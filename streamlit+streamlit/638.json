{"BR": {"BR_id": "638", "BR_author": "kellyamanda", "BRopenT": "2019-11-06T23:36:56Z", "BRcloseT": "2019-12-04T20:56:16Z", "BR_text": {"BRsummary": "Clear matplotlib figure", "BRdescription": "\n When I do this code the second plot will show the labels of the first one:\n <denchmark-code>    def pie_chart_users():\n         a = plt.pie(\n             # using data total)arrests\n             app_data_graph['app_count']['count'],\n             # with the labels being officer names\n             labels=app_data_graph['user_type_apps'],\n             # with the percent listed as a fraction\n             autopct='%1.1f%%',\n             )\n \n         # View the plot drop above\n         # b = plt.axis('equal')\n \n         # View the plot\n         c = plt.tight_layout()\n         return a, c\n \n     '### Breakdown of all app creators (total creators)'\n     pie_1 = pie_chart_users()\n     st.pyplot()\n \n     # Graph breaking down number of apps created by each user group\n     '### % of total apps created by creator group'\n     def pie_chart_totals():\n         a = plt.pie(\n             # using data total)arrests\n             app_data_graph['app_count']['sum'],\n             # with the labels being officer names\n             labels=app_data_graph['user_type_apps'],\n             # with the percent listed as a fraction\n             autopct='%1.1f%%',\n             )\n \n         # View the plot drop above\n         # b = plt.axis('equal')\n \n         # View the plot\n         c = plt.tight_layout()\n         return a, c\n \n     pie_2 = pie_chart_totals()\n     st.pyplot()\n </denchmark-code>\n \n This is fixed by adding in  plt.figure() between the two\n <denchmark-code>    def pie_chart_users():\n         a = plt.pie(\n             # using data total)arrests\n             app_data_graph['app_count']['count'],\n             # with the labels being officer names\n             labels=app_data_graph['user_type_apps'],\n             # with the percent listed as a fraction\n             autopct='%1.1f%%',\n             )\n \n         # View the plot drop above\n         # b = plt.axis('equal')\n \n         # View the plot\n         c = plt.tight_layout()\n         return a, c\n \n     '### Breakdown of all app creators (total creators)'\n     pie_1 = pie_chart_users()\n     st.pyplot()\n     plt.figure()\n \n     # Graph breaking down number of apps created by each user group\n     '### % of total apps created by creator group'\n     def pie_chart_totals():\n         a = plt.pie(\n             # using data total)arrests\n             app_data_graph['app_count']['sum'],\n             # with the labels being officer names\n             labels=app_data_graph['user_type_apps'],\n             # with the percent listed as a fraction\n             autopct='%1.1f%%',\n             )\n \n         # View the plot drop above\n         # b = plt.axis('equal')\n \n         # View the plot\n         c = plt.tight_layout()\n         return a, c\n \n     pie_2 = pie_chart_totals()\n     st.pyplot()\n </denchmark-code>\n \n Looks like st.pyplot needs to clear the Matplotlib figure after drawing it to the app\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "kellyamanda", "commentT": "2019-12-02T18:43:07Z", "comment_text": "\n \t\tI'm not actually sure what the best course of action is here. We could call plt.clf from st.pyplot to clear the current figure - but is that users would expect?\n (In other words, is this simply user error, and the user should be manually calling plt.clf when they want to clear the figure?)\n \t\t"}}}, "commit": {"commit_id": "786ce09532cb06b551193f3ecf3c28610a9be367", "commit_author": "Tim Conkling", "commitT": "2019-12-04 12:56:15-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "lib\\streamlit\\DeltaGenerator.py", "file_new_name": "lib\\streamlit\\DeltaGenerator.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1253,1262,1263,1264,1265,1266", "deleted_lines": "1253,1292", "method_info": {"method_name": "pyplot", "method_params": "self,element,fig,kwargs", "method_startline": "1253", "method_endline": "1292"}}, "hunk_1": {"Ismethod": 1, "added_lines": "1253,1262,1263,1264,1265,1266,1297", "deleted_lines": "1253,1292", "method_info": {"method_name": "pyplot", "method_params": "self,element,fig,clear_figure,kwargs", "method_startline": "1253", "method_endline": "1297"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "lib\\streamlit\\cli.py", "file_new_name": "lib\\streamlit\\cli.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "214,215,216,217", "deleted_lines": "214", "method_info": {"method_name": "main_run", "method_params": "target,args,kwargs", "method_startline": "201", "method_endline": "235"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "lib\\streamlit\\elements\\pyplot.py", "file_new_name": "lib\\streamlit\\elements\\pyplot.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "35,61,62,63,64,65", "deleted_lines": "35", "method_info": {"method_name": "marshall", "method_params": "new_element_proto,fig,clear_figure,kwargs", "method_startline": "35", "method_endline": "65"}}, "hunk_1": {"Ismethod": 1, "added_lines": "35", "deleted_lines": "35", "method_info": {"method_name": "marshall", "method_params": "new_element_proto,fig,kwargs", "method_startline": "35", "method_endline": "60"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "lib\\tests\\streamlit\\cli_test.py", "file_new_name": "lib\\tests\\streamlit\\cli_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "133", "deleted_lines": "133,134", "method_info": {"method_name": "test_run_arguments", "method_params": "self", "method_startline": "117", "method_endline": "135"}}, "hunk_1": {"Ismethod": 1, "added_lines": "144", "deleted_lines": "145,146", "method_info": {"method_name": "test_get_command_line", "method_params": "self", "method_startline": "137", "method_endline": "146"}}, "hunk_2": {"Ismethod": 1, "added_lines": "77,78,79", "deleted_lines": "77,78", "method_info": {"method_name": "test_run_not_allowed_file_extension", "method_params": "self", "method_startline": "70", "method_endline": "79"}}, "hunk_3": {"Ismethod": 1, "added_lines": "109", "deleted_lines": "108,109", "method_info": {"method_name": "test_run_non_existing_url", "method_params": "self,temp_dir", "method_startline": "100", "method_endline": "115"}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "lib\\tests\\streamlit\\delta_generator_test.py", "file_new_name": "lib\\tests\\streamlit\\delta_generator_test.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "19,20,21,22,29,40,41,42,43,44", "deleted_lines": "19,21,23,24,32,33"}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "lib\\tests\\streamlit\\streamlit_test.py", "file_new_name": "lib\\tests\\streamlit\\streamlit_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496", "deleted_lines": null, "method_info": {"method_name": "test_st_pyplot_clear_figure", "method_params": "self", "method_startline": "456", "method_endline": "496"}}}}}}}