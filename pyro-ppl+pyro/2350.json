{"BR": {"BR_id": "2350", "BR_author": "fehiepsi", "BRopenT": "2020-03-07T23:19:08Z", "BRcloseT": "2020-03-09T17:05:07Z", "BR_text": {"BRsummary": "Jitting HMC does not work for models with `param` statements", "BRdescription": "\n The following repro script shows the issue\n import torch\n import pyro\n import pyro.distributions as dist\n from pyro.infer import MCMC, NUTS\n \n def model():\n     x = pyro.param(\"x\", torch.tensor(1.))\n     pyro.sample(\"y\", dist.Normal(x, 1))\n \n mcmc = MCMC(NUTS(model, jit_compile=True), 10)\n mcmc.run()\n mcmc.summary()\n raises the error RuntimeError: Cannot insert a Tensor that requires grad as a constant. Consider making it a parameter or input, or detaching the gradient.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "fehiepsi", "commentT": "2020-03-07T23:22:52Z", "comment_text": "\n \t\tAn easy workaround is to hide the constant by a lambda:\n import torch\n \n import pyro\n import pyro.distributions as dist\n from pyro.infer import MCMC, NUTS\n \n def model():\n     x = pyro.param(\"x\", lambda: torch.tensor(1.))\n     pyro.sample(\"y\", dist.Normal(x, 1))\n \n model()  # <------ initialize param store\n \n mcmc = MCMC(NUTS(model, jit_compile=True), 10)\n mcmc.run()\n mcmc.summary()\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "fehiepsi", "commentT": "2020-03-07T23:25:10Z", "comment_text": "\n \t\tHmm, I still get the issue. Are you using PyTorch nightly?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "fehiepsi", "commentT": "2020-03-08T00:14:43Z", "comment_text": "\n \t\tI'm using PyTorch release. Did you make sure to initialize the param store before inference?\n model()  # initialize param store\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "fehiepsi", "commentT": "2020-03-08T02:05:52Z", "comment_text": "\n \t\tYes, I used your code and still observed the issue. I think this is the same issue as <denchmark-link:https://github.com/pytorch/pytorch/issues/17583>this one</denchmark-link>\n  and PyTorch won't support it. IIUC we can resolve the issue by replaying  sites by constant values (using  e.g.) in the computation of .\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "fehiepsi", "commentT": "2020-03-09T00:27:58Z", "comment_text": "\n \t\tThe JIT tracer expects any constants in the trace to have requires_grad=False as expected. Some of our examples and tests for HMC use model.requires_grad_(False) if the model is a PyroModule or nn.Module.\n I think we could provide a param_store._requires_grad(requires_grad=True) method which will allow us to use the param store for simple key value lookup that will be useful in such situations (i.e. when model is not a PyroModule).\n def requires_grad_(self, requires_grad=True):\n     for v in self._params.values():\n         v.requires_grad_(requires_grad)\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "fehiepsi", "commentT": "2020-03-09T02:02:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/neerajprad>@neerajprad</denchmark-link>\n 's solution works like a charm!! :D (works with multi-chains too) I think we can call this method automatically at the beginning and the ending of  method.\n \t\t"}}}, "commit": {"commit_id": "ddfc451c8036843ac98b0afb408a07c16d3a807e", "commit_author": "Du Phan", "commitT": "2020-03-09 10:05:06-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "pyro\\infer\\mcmc\\util.py", "file_new_name": "pyro\\infer\\mcmc\\util.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "277,278,279,280,281,282,290,291,292", "deleted_lines": null, "method_info": {"method_name": "_potential_fn_jit", "method_params": "self,skip_jit_warnings,jit_options,params", "method_startline": "268", "method_endline": "293"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\infer\\mcmc\\test_mcmc_util.py", "file_new_name": "tests\\infer\\mcmc\\test_mcmc_util.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "59,60,61", "deleted_lines": null, "method_info": {"method_name": "model_with_param", "method_params": "", "method_startline": "59", "method_endline": "61"}}, "hunk_1": {"Ismethod": 1, "added_lines": "67,68,69,70", "deleted_lines": null, "method_info": {"method_name": "test_model_with_param", "method_params": "jit_compile,num_chains", "method_startline": "67", "method_endline": "70"}}}}}}}