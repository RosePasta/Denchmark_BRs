{"BR": {"BR_id": "5815", "BR_author": "hessenpepper", "BRopenT": "2015-12-15T19:52:42Z", "BRcloseT": "2015-12-17T11:54:36Z", "BR_text": {"BRsummary": "UMat issue", "BRdescription": "\n While using warpPerspective with openCL I was having a memory leak. Disabling ocl by using Mat, calling cv::ocl::setUseOpenCL(false) or running on a system that does not have an ocl runtime will work correctly. I've tracked it down a Mat::copyTo. Here is the code to reproduce this problem.\n <denchmark-code>#include <iostream>\n #include <opencv2/opencv.hpp>\n #include <opencv2/core/ocl.hpp>\n int main() {\n     std::cout << \"OpenCV=\" << std::hex << CV_VERSION << std::endl;\n     std::cout << \"Build info=\" << cv::getBuildInformation() << std::endl;\n     cv::ocl::setUseOpenCL(true);\n     std::cout << \"cv::ocl::useOpenCL()=\" << cv::ocl::useOpenCL() << std::endl;\n     while (true) {\n         cv::Mat matM(cv::Size(5, 5), CV_32F);\n         cv::UMat M0;\n         matM.copyTo(M0);\n     }\n }\n </denchmark-code>\n \n This will cause memory usage to increase until all available memory is used. I am using latest openCV from github and visual studio 2015. I have also tried with VS 2013 and on a Mac with XCode 7.2 (7C68). Changing the matrix size to 5000x5000 will cause memory to bounce between 107MB and 203MB.\n Here is output from Windows/VS 2015:\n <denchmark-code>OpenCV=3.0.0-dev\n Build info=\n General configuration for OpenCV 3.0.0-dev =====================================\n   Version control:               unknown\n \n   Platform:\n     Host:                        Windows 10.0.10240 AMD64\n     CMake:                       3.4.1\n     CMake generator:             Visual Studio 14 2015 Win64\n     CMake build tool:            C:/Program Files (x86)/MSBuild/14.0/bin/MSBuild.exe\n     MSVC:                        1900\n \n   C/C++:\n     Built as dynamic libs?:      YES\n     C++ Compiler:                C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/x86_amd64/cl.exe  (ver 19.0.23506.0)\n     C++ flags (Release):         /DWIN32 /D_WINDOWS /W4 /GR /EHa  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi  /wd4251 /wd4324 /wd4275 /wd4589 /MP2  /MD /O2 /Ob2 /D NDEBUG  /Zi\n     C++ flags (Debug):           /DWIN32 /D_WINDOWS /W4 /GR /EHa  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi  /wd4251 /wd4324 /wd4275 /wd4589 /MP2  /D_DEBUG /MDd /Zi /Ob0 /Od /RTC1\n     C Compiler:                  C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/x86_amd64/cl.exe\n     C flags (Release):           /DWIN32 /D_WINDOWS /W3  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi    /MP2  /MD /O2 /Ob2 /D NDEBUG  /Zi\n     C flags (Debug):             /DWIN32 /D_WINDOWS /W3  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi    /MP2  /D_DEBUG /MDd /Zi /Ob0 /Od /RTC1\n     Linker flags (Release):      /machine:x64  /INCREMENTAL:NO  /debug\n     Linker flags (Debug):        /machine:x64  /debug /INCREMENTAL\n     Precompiled headers:         YES\n     Extra dependencies:          comctl32 gdi32 ole32 setupapi ws2_32 vfw32\n     3rdparty dependencies:       zlib libjpeg libwebp libpng libtiff libjasper IlmImf ippicv\n \n   OpenCV modules:\n     To be built:                 hal core flann imgproc ml photo video imgcodecs shape videoio highgui objdetect superres ts features2d calib3d stitching videostab\n     Disabled:                    world\n     Disabled by dependency:      -\n     Unavailable:                 cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev java python2 python3 viz\n \n   Windows RT support:            NO\n \n   GUI:\n     QT:                          NO\n     Win32 UI:                    YES\n     OpenGL support:              NO\n     VTK support:                 NO\n \n   Media I/O:\n     ZLib:                        build (ver 1.2.8)\n     JPEG:                        build (ver 90)\n     WEBP:                        build (ver 0.3.1)\n     PNG:                         build (ver 1.5.12)\n     TIFF:                        build (ver 42 - 4.0.2)\n     JPEG 2000:                   build (ver 1.900.1)\n     OpenEXR:                     build (ver 1.7.1)\n     GDAL:                        NO\n \n   Video I/O:\n     Video for Windows:           YES\n     DC1394 1.x:                  NO\n     DC1394 2.x:                  NO\n     FFMPEG:                      YES (prebuilt binaries)\n       codec:                     YES (ver 56.41.100)\n       format:                    YES (ver 56.36.101)\n       util:                      YES (ver 54.27.100)\n       swscale:                   YES (ver 3.1.101)\n       resample:                  NO\n       gentoo-style:              YES\n     OpenNI:                      NO\n     OpenNI PrimeSensor Modules:  NO\n     OpenNI2:                     NO\n     PvAPI:                       NO\n     GigEVisionSDK:               NO\n     DirectShow:                  YES\n     Media Foundation:            NO\n     XIMEA:                       NO\n     Intel PerC:                  NO\n \n   Parallel framework:            Concurrency\n \n   Other third-party libraries:\n     Use IPP:                     9.0.1 [9.0.1]\n          at:                     C:/opencv/3rdparty/ippicv/unpack/ippicv_win\n     Use IPP Async:               NO\n     Use Eigen:                   NO\n     Use Cuda:                    NO\n     Use OpenCL:                  YES\n \n   OpenCL:\n     Version:                     dynamic\n     Include path:                C:/opencv/3rdparty/include/opencl/1.2\n     Use AMDFFT:                  NO\n     Use AMDBLAS:                 NO\n \n   Python 2:\n     Interpreter:                 NO\n \n   Python 3:\n     Interpreter:                 NO\n \n   Python (for build):            NO\n \n   Java:\n     ant:                         NO\n     JNI:                         NO\n     Java wrappers:               NO\n     Java tests:                  NO\n \n   Matlab:\n     mex:                         NO\n \n   Documentation:\n     Doxygen:                     NO\n     PlantUML:                    NO\n \n   Tests and samples:\n     Tests:                       YES\n     Performance tests:           YES\n     C/C++ Examples:              NO\n \n   Install path:                  C:/opencv/build/install\n \n   cvconfig.h is in:              C:/opencv/build\n -----------------------------------------------------------------\n \n \n cv::ocl::useOpenCL()=1\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "hessenpepper", "commentT": "2015-12-15T20:19:39Z", "comment_text": "\n \t\tCould you try to add this initialization code and run reproducer again in your environment?\n <denchmark-code>BufferPoolController* c = cv::ocl::getOpenCLAllocator()->getBufferPoolController();\n if (c)\n {\n     c->setMaxReservedSize(0);\n }\n </denchmark-code>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "hessenpepper", "commentT": "2015-12-15T22:53:25Z", "comment_text": "\n \t\tThat seems to have fixed it. It no longer runs up memory. I assume that is just diagnostic and not a long term solution?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "hessenpepper", "commentT": "2015-12-16T07:43:56Z", "comment_text": "\n \t\tThanks!\n Yes, it is just diagnostic, which shows that BufferPool doesn't work good with \"hidden\" overhead (for small allocations 5x5 it is very huge).\n \t\t"}}}, "commit": {"commit_id": "6f2632ca2e82dd6487376936934cec641ac87691", "commit_author": "Alexander Alekhin", "commitT": "2015-12-16 14:31:26+03:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "modules\\core\\src\\ocl.cpp", "file_new_name": "modules\\core\\src\\ocl.cpp", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "3905", "deleted_lines": "3905", "method_info": {"method_name": "cv::ocl::OpenCLBufferPoolBaseImpl::_findAndRemoveEntryFromReservedList", "method_params": "entry,size", "method_startline": "3891", "method_endline": "3925"}}, "hunk_1": {"Ismethod": 1, "added_lines": "3944,3945", "deleted_lines": "3944,3945,3946,3947,3948,3949", "method_info": {"method_name": "cv::ocl::OpenCLBufferPoolBaseImpl::_allocationGranularity", "method_params": "size", "method_startline": "3941", "method_endline": "3950"}}}}}}}