{"BR": {"BR_id": "7465", "BR_author": "kesinger", "BRopenT": "2016-10-11T22:20:58Z", "BRcloseT": "2016-10-18T11:32:48Z", "BR_text": {"BRsummary": "Segfault when releasing VideoCapture if CONVERT_RGB is false", "BRdescription": "\n <denchmark-h:h5>System information (version)</denchmark-h>\n \n \n OpenCV => 3.1, top of master, 73a8fa\n Operating System / Platform => linux, ubuntu 16.04\n Compiler => g++ 5.4.0\n \n <denchmark-h:h5>Detailed description</denchmark-h>\n \n After profiling our code, we've found that a significant component of the runtime is in YUV->RGB conversion, which we don't need.  Trying to turn this off with \"set(cv::CAP_PROP_CONVERT_RGB, 0);\" worked but would produce a segfault on exit (sometimes just a coredump, sometimes an internal glibc error).   Examining with valgrind, it appears that the problem is somewhere in a cvFree call, and in particular something called in a destructor triggered by the \"delete *pcapture\" on line 80 in cap.cpp.\n <denchmark-h:h5>Steps to reproduce</denchmark-h>\n \n This code will segfault:\n <denchmark-code>#include <opencv2/highgui/highgui.hpp>\n #include <opencv2/imgproc/imgproc.hpp>\n #include <memory>\n #include <chrono>\n #include <thread>\n #include <iostream>\n #include <unistd.h>\n \n \n int main(void) {\n \n   std::shared_ptr<cv::VideoCapture> camera{nullptr};\n   camera.reset(new cv::VideoCapture(0));\n \n   camera->set(cv::CAP_PROP_CONVERT_RGB, 0);\n   std::cout << \"Ready to go\" << std::endl;\n   const size_t nreads{10};\n   for(size_t i=0; i < nreads; i++) {\n     cv::Mat frame;\n     camera->read(frame);\n     std::cout << \"Read image \" << i << \" of size \" << frame.rows << \" \" << frame.cols << std::endl;\n     usleep(100);\n   }\n   std::cout << \"Finished \" << nreads << \" reads\" << std::endl;\n   std::this_thread::sleep_for(std::chrono::seconds(1));\n   std::cout << \"Finished sleep...\" << std::endl;\n   camera->release();\n   std::cout << \"Camera released\" << std::endl;\n   camera.reset();\n   std::cout << \"Camera reset\" << std::endl;\n }\n </denchmark-code>\n \n The valgrind output looks like:\n <denchmark-code>\n ==366== Invalid read of size 8\n ==366==    at 0x762025: cv::fastFree(void*) (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x43CE71: cv::CvCaptureCAM_V4L::~CvCaptureCAM_V4L() (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x428041: cvReleaseCapture (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x428062: cv::DefaultDeleter<CvCapture>::operator()(CvCapture*) const (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x428080: cv::detail::PtrOwnerImpl<CvCapture, cv::DefaultDeleter<CvCapture> >::deleteSelf() (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x427E75: cv::VideoCapture::release() (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x426791: main (in /home/jake/work/bin/minimumExample)\n ==366==  Address 0x132bf858 is 8 bytes before a block of size 614,400 free'd\n ==366==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n ==366==    by 0x43CE48: cv::CvCaptureCAM_V4L::~CvCaptureCAM_V4L() (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x428041: cvReleaseCapture (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x428062: cv::DefaultDeleter<CvCapture>::operator()(CvCapture*) const (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x428080: cv::detail::PtrOwnerImpl<CvCapture, cv::DefaultDeleter<CvCapture> >::deleteSelf() (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x427E75: cv::VideoCapture::release() (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x426791: main (in /home/jake/work/bin/minimumExample)\n ==366==  Block was alloc'd at\n ==366==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n ==366==    by 0x43DE1A: cv::_capture_V4L2(cv::CvCaptureCAM_V4L*) (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x441FC6: cv::CvCaptureCAM_V4L::open(int) (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x4421F3: cvCreateCameraCapture_V4L(int) (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x428711: cvCreateCameraCapture (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x428A17: cv::VideoCapture::open(int) (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x429F8B: cv::VideoCapture::VideoCapture(int) (in /home/jake/work/bin/minimumExample)\n ==366==    by 0x426536: main (in /home/jake/work/bin/minimumExample)\n </denchmark-code>\n \n A previous debugging run suggested a problem in icvCloseCAM_V4L, in particular a call to \"cvFree(&capture->frame.imageData)\", but I don't consider that reliable enough to do anything more than mention.\n \t"}, "comments": {}}, "commit": {"commit_id": "df2b591896b8c86932c6ebd1d88ed3c18c3fccd4", "commit_author": "Guillaume Jacob", "commitT": "2016-10-17 23:01:30+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\videoio\\src\\cap_v4l.cpp", "file_new_name": "modules\\videoio\\src\\cap_v4l.cpp", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1852", "deleted_lines": "1852", "method_info": {"method_name": "cv::icvCloseCAM_V4L", "method_params": "capture", "method_startline": "1823", "method_endline": "1857"}}}}}}}