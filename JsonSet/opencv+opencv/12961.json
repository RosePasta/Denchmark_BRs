{"BR": {"BR_id": "12961", "BR_author": "ayounes-nviso", "BRopenT": "2018-10-26T13:14:57Z", "BRcloseT": "2019-02-01T12:02:28Z", "BR_text": {"BRsummary": "Regression: image loading/processing on Android 32bit", "BRdescription": "\n <denchmark-h:h5>System information (version)</denchmark-h>\n \n \n OpenCV => latest master or 3.4 branches, starting with this commit\n cc10e6b\n \n This commit does not have the regression:\n <denchmark-link:https://github.com/opencv/opencv/commit/ad93ed720dfd1a69ecb60905777797e15ba7687f>ad93ed7</denchmark-link>\n \n So it's only a few commit between the two.\n \n Operating System / Platform => Android 32bit\n Compiler => NDK r18\n \n <denchmark-h:h5>Detailed description</denchmark-h>\n \n Bus error for some specific jpg files.\n Additional info: The issue is reproducible only on Android, all is fine on Intel-x86/gcc-6 and rasperry-pi3/raspian/g++-arm-linux-gnueabihf platforms.\n We managed to reproduce the crash reliably with an image and the following code on Android (32bit NDK r18) compiled with -DENABLE_NEON=ON -DENABLE_VFPV3=ON\n int main(int argc, char* argv[]) {\n cv::Mat m = cv::imread(argv[1]);\n cv::pyrDown(m, m);\n return 0;}\n Backtrace:\n (cv::PyrDownVec_32s8u::operator()(int*, unsigned char, int, int) const+756)\n (void cv::pyrDown_<cv::FixPtCast<unsigned char, 8>, cv::PyrDownVec_32s8u>(cv::Mat const&, cv::Mat&, int)+4232)\n (cv::pyrDown(cv::_InputArray const&, cv::OutputArray const&, cv::Size const&, int)+660)\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ayounes-nviso", "commentT": "2018-11-29T13:12:14Z", "comment_text": "\n \t\tWe managed to reproduce the crash reliably with an image and the following code on Android (32bit NDK r18) compiled with -DENABLE_NEON=ON -DENABLE_VFPV3=ON\n int main(int argc, char* argv[]) {\n cv::Mat m = cv::imread(argv[1]);\n cv::pyrDown(m, m);\n return 0;}\n Backtrace:\n (cv::PyrDownVec_32s8u::operator()(int*, unsigned char, int, int) const+756)\n (void cv::pyrDown_<cv::FixPtCast<unsigned char, 8>, cv::PyrDownVec_32s8u>(cv::Mat const&, cv::Mat&, int)+4232)\n (cv::pyrDown(cv::_InputArray const&, cv::OutputArray const&, cv::Size const&, int)+660)\n \n \n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ayounes-nviso", "commentT": "2018-12-15T11:32:48Z", "comment_text": "\n \t\tDo you need any more info?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "ayounes-nviso", "commentT": "2018-12-15T16:31:42Z", "comment_text": "\n \t\tpyrDown processing is not depend on image content or source.\n Try to reproduce problem with zero Mat: cv::Mat m(cv::Size(cols, rows), CV_8UC3, cv::Scalar::all(0));\n It would be nice to:\n \n capture problematic instruction with lldb and registers (including memory address ranges of src / dst buffers)\n dump of /proc/cpuinfo\n logcat with OpenCV bootstrap information\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "ayounes-nviso", "commentT": "2019-01-10T21:54:11Z", "comment_text": "\n \t\tI have the same crash with NEON devices when the input image of cv::pyrDown has a size that is not a multiple of 4 (e.g 110).\n I narrowed it down to line 125 of pyramids.cpp:\n *(int*)(dst + x) = v_reinterpret_as_s32(v_rshr_pack<8>(v_pack_u(t0, t0), v_setzero_u16())).get0();\n Looks like the assignment fails, but I don't really understand why.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "ayounes-nviso", "commentT": "2019-01-10T22:46:18Z", "comment_text": "\n \t\tAssembly (iOS built with clang), crash location is 0x161e0a.\n \n PyrDownVec_32s8u::operator():\n     0x161b68 <+0>:   push   {r4, r5, r6, r7, lr}\n     0x161b6a <+2>:   add    r7, sp, #0xc\n     0x161b6c <+4>:   push.w {r8, r10, r11}\n     0x161b70 <+8>:   sub.w  r4, sp, #0x10\n     0x161b74 <+12>:  bfc    r4, #0, #4\n     0x161b78 <+16>:  mov    sp, r4\n     0x161b7a <+18>:  vst1.64 {d8, d9}, [r4:128]\n     0x161b7e <+22>:  sub    sp, #0x20\n     0x161b80 <+24>:  ldr    r4, [r7, #0x8]\n     0x161b82 <+26>:  ldr.w  r12, [r1]\n     0x161b86 <+30>:  ldr.w  r9, [r1, #0x4]\n     0x161b8a <+34>:  cmp    r4, #0x10\n     0x161b8c <+36>:  ldr.w  r10, [r1, #0x8]\n     0x161b90 <+40>:  ldr.w  r11, [r1, #0xc]\n     0x161b94 <+44>:  ldr    r3, [r1, #0x10]\n     0x161b96 <+46>:  bge    0x161ba6                  ; <+62>\n     0x161b98 <+48>:  movs   r0, #0x0\n     0x161b9a <+50>:  sub.w  r1, r4, #0x8\n     0x161b9e <+54>:  cmp    r0, r1\n     0x161ba0 <+56>:  ble.w  0x161d1c                  ; <+436>\n     0x161ba4 <+60>:  b      0x161daa                  ; <+578>\n     0x161ba6 <+62>:  sub.w  r0, r4, #0x10\n     0x161baa <+66>:  str    r0, [sp, #0x8]\n     0x161bac <+68>:  movs   r5, #0x0\n     0x161bae <+70>:  movs   r6, #0x0\n     0x161bb0 <+72>:  movs   r4, #0x30\n     0x161bb2 <+74>:  add    r0, sp, #0x14\n     0x161bb4 <+76>:  strd   r3, r2, [sp, #12]\n     0x161bb8 <+80>:  stm.w  r0, {r9, r10, r12}\n     0x161bbc <+84>:  ldr    r0, [sp, #0x1c]\n     0x161bbe <+86>:  mov    r2, r11\n     0x161bc0 <+88>:  add.w  r11, r2, r5\n     0x161bc4 <+92>:  add.w  r12, r3, r5\n     0x161bc8 <+96>:  add.w  lr, r0, r5\n     0x161bcc <+100>: ldr    r0, [sp, #0x18]\n     0x161bce <+102>: mov    r1, r12\n     0x161bd0 <+104>: add.w  r10, r0, r5\n     0x161bd4 <+108>: add.w  r0, r11, #0x10\n     0x161bd8 <+112>: vld1.32 {d30, d31}, [r0]\n     0x161bdc <+116>: mov    r3, lr\n     0x161bde <+118>: mov    r8, r10\n     0x161be0 <+120>: ldr    r0, [sp, #0x14]\n     0x161be2 <+122>: vld1.32 {d20, d21}, [r8], r4\n     0x161be6 <+126>: add.w  r9, r0, r5\n     0x161bea <+130>: adds   r5, #0x40\n     0x161bec <+132>: vld1.32 {d16, d17}, [r1], r4\n     0x161bf0 <+136>: vqmovn.s32 d20, q10\n     0x161bf4 <+140>: mov    r0, r9\n     0x161bf6 <+142>: vld1.32 {d22, d23}, [r0], r4\n     0x161bfa <+146>: vqmovn.s32 d16, q8\n     0x161bfe <+150>: vld1.32 {d2, d3}, [r0]\n     0x161c02 <+154>: mov    r0, r11\n     0x161c04 <+156>: vqmovn.s32 d26, q11\n     0x161c08 <+160>: vld1.32 {d24, d25}, [r0], r4\n     0x161c0c <+164>: vqmovn.s32 d3, q1\n     0x161c10 <+168>: vld1.32 {d4, d5}, [r0]\n     0x161c14 <+172>: add.w  r0, r10, #0x10\n     0x161c18 <+176>: vqmovn.s32 d24, q12\n     0x161c1c <+180>: vld1.32 {d8, d9}, [r0]\n     0x161c20 <+184>: add.w  r0, r12, #0x20\n     0x161c24 <+188>: vqmovn.s32 d5, q2\n     0x161c28 <+192>: vld1.32 {d18, d19}, [r3], r4\n     0x161c2c <+196>: vqmovn.s32 d21, q4\n     0x161c30 <+200>: vqmovn.s32 d25, q15\n     0x161c34 <+204>: vld1.32 {d6, d7}, [r1]\n     0x161c38 <+208>: vqmovn.s32 d18, q9\n     0x161c3c <+212>: vld1.32 {d28, d29}, [r3]\n     0x161c40 <+216>: vqmovn.s32 d23, q3\n     0x161c44 <+220>: vld1.32 {d8, d9}, [r0]\n     0x161c48 <+224>: add.w  r0, lr, #0x20\n     0x161c4c <+228>: vqmovn.s32 d29, q14\n     0x161c50 <+232>: vld1.32 {d6, d7}, [r0]\n     0x161c54 <+236>: add.w  r0, r11, #0x20\n     0x161c58 <+240>: vqmovn.s32 d22, q4\n     0x161c5c <+244>: mov    r11, r2\n     0x161c5e <+246>: vqmovn.s32 d28, q3\n     0x161c62 <+250>: vld1.32 {d6, d7}, [r0]\n     0x161c66 <+254>: add.w  r0, r9, #0x20\n     0x161c6a <+258>: vld1.32 {d0, d1}, [r8]\n     0x161c6e <+262>: vqmovn.s32 d4, q3\n     0x161c72 <+266>: vqadd.u16 q11, q14, q11\n     0x161c76 <+270>: vld1.32 {d8, d9}, [r0]\n     0x161c7a <+274>: add.w  r0, r10, #0x20\n     0x161c7e <+278>: vqmovn.s32 d1, q0\n     0x161c82 <+282>: vld1.32 {d6, d7}, [r0]\n     0x161c86 <+286>: add.w  r0, r9, #0x10\n     0x161c8a <+290>: vqmovn.s32 d2, q4\n     0x161c8e <+294>: vqmovn.s32 d0, q3\n     0x161c92 <+298>: vld1.32 {d6, d7}, [r0]\n     0x161c96 <+302>: add.w  r0, r12, #0x10\n     0x161c9a <+306>: vld1.32 {d30, d31}, [r0]\n     0x161c9e <+310>: vqmovn.s32 d27, q3\n     0x161ca2 <+314>: add.w  r0, lr, #0x10\n     0x161ca6 <+318>: vqadd.u16 q1, q1, q2\n     0x161caa <+322>: vld1.32 {d4, d5}, [r0]\n     0x161cae <+326>: vqmovn.s32 d17, q15\n     0x161cb2 <+330>: vqadd.u16 q12, q13, q12\n     0x161cb6 <+334>: vqmovn.s32 d19, q2\n     0x161cba <+338>: ldr    r2, [sp, #0x10]\n     0x161cbc <+340>: vqadd.u16 q13, q0, q0\n     0x161cc0 <+344>: ldr.w  r10, [sp, #0x18]\n     0x161cc4 <+348>: vqadd.u16 q14, q1, q0\n     0x161cc8 <+352>: adds   r0, r2, r6\n     0x161cca <+354>: vqadd.u16 q8, q9, q8\n     0x161cce <+358>: ldr.w  r9, [sp, #0x14]\n     0x161cd2 <+362>: vqadd.u16 q9, q12, q10\n     0x161cd6 <+366>: ldr    r3, [sp, #0xc]\n     0x161cd8 <+368>: vqadd.u16 q15, q10, q10\n     0x161cdc <+372>: ldr.w  r12, [sp, #0x1c]\n     0x161ce0 <+376>: vqadd.u16 q10, q11, q13\n     0x161ce4 <+380>: adds   r6, #0x10\n     0x161ce6 <+382>: vshl.i16 q11, q14, #0x2\n     0x161cea <+386>: vshl.i16 q9, q9, #0x2\n     0x161cee <+390>: vqadd.u16 q8, q8, q15\n     0x161cf2 <+394>: vqadd.u16 q10, q10, q11\n     0x161cf6 <+398>: vqadd.u16 q8, q8, q9\n     0x161cfa <+402>: vqrshrn.u16 d19, q10, #0x8\n     0x161cfe <+406>: vqrshrn.u16 d18, q8, #0x8\n     0x161d02 <+410>: vst1.8 {d18, d19}, [r0]\n     0x161d06 <+414>: ldr    r0, [sp, #0x8]\n     0x161d08 <+416>: cmp    r6, r0\n     0x161d0a <+418>: ble.w  0x161bbc                  ; <+84>\n     0x161d0e <+422>: ldr    r4, [r7, #0x8]\n     0x161d10 <+424>: bic    r0, r4, #0xf\n     0x161d14 <+428>: sub.w  r1, r4, #0x8\n     0x161d18 <+432>: cmp    r0, r1\n     0x161d1a <+434>: bgt    0x161daa                  ; <+578>\n     0x161d1c <+436>: add.w  r6, r11, r0, lsl #2\n     0x161d20 <+440>: add.w  lr, r9, r0, lsl #2\n     0x161d24 <+444>: vld1.32 {d20, d21}, [r6]!\n     0x161d28 <+448>: add.w  r1, r10, r0, lsl #2\n     0x161d2c <+452>: add.w  r5, r3, r0, lsl #2\n     0x161d30 <+456>: vld1.32 {d16, d17}, [lr]!\n     0x161d34 <+460>: vqmovn.s32 d20, q10\n     0x161d38 <+464>: vld1.32 {d24, d25}, [r6]\n     0x161d3c <+468>: vqmovn.s32 d16, q8\n     0x161d40 <+472>: add.w  r6, r12, r0, lsl #2\n     0x161d44 <+476>: vld1.32 {d30, d31}, [lr]\n     0x161d48 <+480>: vqmovn.s32 d21, q12\n     0x161d4c <+484>: vld1.32 {d18, d19}, [r1]!\n     0x161d50 <+488>: vqmovn.s32 d17, q15\n     0x161d54 <+492>: vld1.32 {d22, d23}, [r5]!\n     0x161d58 <+496>: vqmovn.s32 d18, q9\n     0x161d5c <+500>: vqadd.u16 q8, q8, q10\n     0x161d60 <+504>: vld1.32 {d28, d29}, [r1]\n     0x161d64 <+508>: vqmovn.s32 d22, q11\n     0x161d68 <+512>: adds   r1, r2, r0\n     0x161d6a <+514>: orr    r0, r0, #0x8\n     0x161d6e <+518>: vld1.32 {d26, d27}, [r6]!\n     0x161d72 <+522>: vqmovn.s32 d19, q14\n     0x161d76 <+526>: vld1.32 {d24, d25}, [r5]\n     0x161d7a <+530>: vqmovn.s32 d26, q13\n     0x161d7e <+534>: vld1.32 {d28, d29}, [r6]\n     0x161d82 <+538>: vqmovn.s32 d23, q12\n     0x161d86 <+542>: vqadd.u16 q8, q8, q9\n     0x161d8a <+546>: vqmovn.s32 d27, q14\n     0x161d8e <+550>: vqadd.u16 q10, q9, q9\n     0x161d92 <+554>: vqadd.u16 q11, q13, q11\n     0x161d96 <+558>: vshl.i16 q8, q8, #0x2\n     0x161d9a <+562>: vqadd.u16 q9, q11, q10\n     0x161d9e <+566>: vqadd.u16 q8, q9, q8\n     0x161da2 <+570>: vqrshrn.u16 d16, q8, #0x8\n     0x161da6 <+574>: vst1.8 {d16}, [r1]\n     0x161daa <+578>: sub.w  r8, r4, #0x4\n     0x161dae <+582>: cmp    r0, r8\n     0x161db0 <+584>: bgt    0x161e14                  ; <+684>\n     0x161db2 <+586>: mov    r1, r9\n     0x161db4 <+588>: add.w  r9, r3, r0, lsl #2\n     0x161db8 <+592>: add.w  r3, r11, r0, lsl #2\n     0x161dbc <+596>: add.w  r6, r10, r0, lsl #2\n     0x161dc0 <+600>: add.w  r5, r1, r0, lsl #2\n     0x161dc4 <+604>: add.w  r4, r12, r0, lsl #2\n     0x161dc8 <+608>: vld1.32 {d16, d17}, [r5]!\n     0x161dcc <+612>: adds   r1, r2, r0\n     0x161dce <+614>: adds   r0, #0x4\n     0x161dd0 <+616>: vld1.32 {d18, d19}, [r6]!\n     0x161dd4 <+620>: cmp    r0, r8\n     0x161dd6 <+622>: vadd.i32 q8, q9, q8\n     0x161dda <+626>: vld1.32 {d20, d21}, [r3]!\n     0x161dde <+630>: vshl.i32 q9, q9, #0x1\n     0x161de2 <+634>: vadd.i32 q8, q8, q10\n     0x161de6 <+638>: vld1.32 {d22, d23}, [r4]!\n     0x161dea <+642>: vadd.i32 q9, q9, q11\n     0x161dee <+646>: vld1.32 {d20, d21}, [r9]!\n     0x161df2 <+650>: vshl.i32 q8, q8, #0x2\n     0x161df6 <+654>: vadd.i32 q9, q9, q10\n     0x161dfa <+658>: vadd.i32 q8, q9, q8\n     0x161dfe <+662>: vqmovun.s32 d16, q8\n     0x161e02 <+666>: vorr   d17, d16, d16\n     0x161e06 <+670>: vqrshrn.u16 d16, q8, #0x8\n ->  0x161e0a <+674>: vst1.32 {d16[0]}, [r1:32]\n     0x161e0e <+678>: vorr   d0, d0, d0\n     0x161e12 <+682>: ble    0x161dc8                  ; <+608>\n     0x161e14 <+684>: add    r4, sp, #0x20\n     0x161e16 <+686>: vld1.64 {d8, d9}, [r4:128]\n     0x161e1a <+690>: sub.w  r4, r7, #0x18\n     0x161e1e <+694>: mov    sp, r4\n     0x161e20 <+696>: pop.w  {r8, r10, r11}\n     0x161e24 <+700>: pop    {r4, r5, r6, r7, pc}\n     0x161e26 <+702>: nop    \n \n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "ayounes-nviso", "commentT": "2019-01-11T15:29:01Z", "comment_text": "\n \t\t\n and registers (including memory address ranges of src / dst buffers)\n \n ?\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "ayounes-nviso", "commentT": "2019-01-11T16:50:39Z", "comment_text": "\n \t\tI'm not sure how to get them with Xcode.\n I managed to reproduce systematically with:\n <denchmark-code>int test() {\n     auto img0 = cv::Mat::zeros(9, 9, CV_8U);\n     auto img1 = cv::Mat{};\n     cv::pyrDown(img0, img1);\n     return cv::sum(img1)[0];\n }\n </denchmark-code>\n \n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "ayounes-nviso", "commentT": "2019-01-11T16:55:02Z", "comment_text": "\n \t\tGeneral Purpose Registers:\n <denchmark-code>        r0 = 0x00000004\n         r1 = 0x1f089cf0\n         r2 = 0x176cbf05\n         r3 = 0x176cbf05\n         r4 = 0x1f089d30\n         r5 = 0x1f089df0\n         r6 = 0x1f089db0\n         r7 = 0x1f0897d8\n         r8 = 0x00000001\n         r9 = 0x1f089d70\n        r10 = 0x1f089d60\n        r11 = 0x1f089ce0\n        r12 = 0x66666667\n         sp = 0x1f089790\n         lr = 0x005c87e9  spell`void cv::pyrDown_<cv::FixPtCast<unsigned char, 8>, cv::PyrDownVec_32s8u>(cv::Mat const&, cv::Mat&, int) + 3609\n         pc = 0x005d0c16  spell`cv::PyrDownVec_32s8u::operator()(int**, unsigned char*, int, int) const + 666\n       cpsr = 0x20000030\n </denchmark-code>\n \n <denchmark-h:hr></denchmark-h>\n \n <denchmark-code>    0x5d0c0a <+654>: vqmovun.s32 d16, q8\n     0x5d0c0e <+658>: vorr   d17, d16, d16\n     0x5d0c12 <+662>: vqrshrn.u16 d16, q8, #0x8\n ->  0x5d0c16 <+666>: vst1.32 {d16[0]}, [r3:32]\n     0x5d0c1a <+670>: vorr   d0, d0, d0\n     0x5d0c1e <+674>: ble    0x5d0bd4                  ; <+600>\n     0x5d0c20 <+676>: add    r4, sp, #0x20\n     0x5d0c22 <+678>: vld1.64 {d8, d9}, [r4:128]\n </denchmark-code>\n \n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "ayounes-nviso", "commentT": "2019-01-14T13:03:53Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ayounes-nviso>@ayounes-nviso</denchmark-link>\n \n \"Inplace\" processing has very limited support in OpenCV.\n Please try this code:\n -cv::pyrDown(m, m);\n +Mar res\n +cv::pyrDown(m, res);\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "ayounes-nviso", "commentT": "2019-01-14T13:19:42Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/arnaudbrejeon>@arnaudbrejeon</denchmark-link>\n  Thank you! Looks like there is alignment issue.\n \n 0x5d0c16 <+666>: vst1.32 {d16[0]}, [r3:32]\n r3 = 0x176cbf05\n \n <denchmark-h:hr></denchmark-h>\n \n I tried this test on ARM devices (Linux):\n \n code: alalek@check_1\n ARMv7: http://pullrequest.opencv.org/buildbot/builders/precommit_armv7/builds/11459\n ARMv8: http://pullrequest.opencv.org/buildbot/builders/precommit_armv8/builds/11346\n \n Issues is not reproduced (GCC compiler).\n I don't have development configuration setup for iOS devices.\n I will try Android later with ARMv7 (NEON).\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "ayounes-nviso", "commentT": "2019-01-14T13:31:20Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/arnaudbrejeon>@arnaudbrejeon</denchmark-link>\n  Could you try this:\n -*(int*)(dst + x) = ...\n +*(__packed int*)(dst + x) = ...\n Details is <denchmark-link:http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/ka15414.html>here</denchmark-link>\n .\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "ayounes-nviso", "commentT": "2019-01-15T02:01:43Z", "comment_text": "\n \t\tOn iOS, I'm using clang and __packed is not supported (compilation error).\n I tried to replace it with __attribute__((aligned(1))) but it didn't solve the crash.\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "ayounes-nviso", "commentT": "2019-01-15T02:07:05Z", "comment_text": "\n \t\tTook me a while to figure it out, but it doesn't crash anymore with:\n <denchmark-code>            typedef int unaligned_int __attribute__((aligned(1)));\n             *((unaligned_int*) (dst + x)) =\n                 v_reinterpret_as_s32(v_rshr_pack<8>(v_pack_u(t0, t0), v_setzero_u16())).get0();\n </denchmark-code>\n \n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "ayounes-nviso", "commentT": "2019-01-15T15:50:24Z", "comment_text": "\n \t\tSorry for not following up in this debugging. But anyway I am happy that Arnaud managed to reproduce and fix!\n Thanks\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "ayounes-nviso", "commentT": "2019-01-24T18:24:15Z", "comment_text": "\n \t\tI created a PR to fix the bug.\n \t\t"}}}, "commit": {"commit_id": "d998e70a2504e9238780d87aa6f501e38adb89d3", "commit_author": "Arnaud Brejeon", "commitT": "2019-01-28 21:36:00+03:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\imgproc\\src\\pyramids.cpp", "file_new_name": "modules\\imgproc\\src\\pyramids.cpp", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "115,126", "deleted_lines": "125", "method_info": {"method_name": "cv::PyrDownVec_32s8u::operator ( )", "method_params": "src,dst,int,width", "method_startline": "81", "method_endline": "130"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\imgproc\\test\\test_filter.cpp", "file_new_name": "modules\\imgproc\\test\\test_filter.cpp", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "2239,2240,2241,2242,2243,2244,2245", "deleted_lines": null, "method_info": {"method_name": "opencv_test::TEST", "method_params": "Imgproc_Pyrdown,issue_12961", "method_startline": "2239", "method_endline": "2245"}}}}}}}