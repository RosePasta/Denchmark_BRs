{"BR": {"BR_id": "4302", "BR_author": "richardsliu", "BRopenT": "2019-10-15T02:15:48Z", "BRcloseT": "2019-10-15T16:59:53Z", "BR_text": {"BRsummary": "Upgrade expects kfdef version to match with the specified version in KfUpgrade file", "BRdescription": "\n For example, suppose this is the KfUpgrade file:\n <denchmark-code>apiVersion: kfupgrade.apps.kubeflow.org/v1alpha1\n kind: KfUpgrade\n metadata:\n   name: update-kf-upgrade\n spec:\n   currentKfDef:\n     name: kf-latest\n   newKfDef:\n     name: kf-latest\n     version: v0.7.1\n   baseConfigPath: /usr/local/google/home/ricliu/demo/deploy/kfctl_gcp_iap.yaml\n </denchmark-code>\n \n This means when we apply, kfctl will look for a KfDef with name kf-latest and version v0.7.1. If one is not found, then we will create one.\n This logic assumes that version is set to v0.7.1 in the base config file. Otherwise, we will still generate a KfApp but with the wrong KfDef version. This will cause the apply step to fail.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "richardsliu", "commentT": "2019-10-15T02:15:50Z", "comment_text": "\n \t\tIssue-Label Bot is automatically applying the label kind/bug to this issue, with a confidence of 0.80. Please mark this comment with \ud83d\udc4d or \ud83d\udc4e to give our bot feedback!\n Links: <denchmark-link:https://github.com/marketplace/issue-label-bot>app homepage</denchmark-link>\n , <denchmark-link:https://mlbot.net/data/kubeflow/kubeflow>dashboard</denchmark-link>\n  and <denchmark-link:https://github.com/hamelsmu/MLapp>code</denchmark-link>\n  for this bot.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "richardsliu", "commentT": "2019-10-15T02:23:20Z", "comment_text": "\n \t\tTo fix this, after merging the KfDef with previous values, kfctl should overwrite the version field in the generated app.yaml with the version string specified in the upgrade yaml.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "richardsliu", "commentT": "2019-10-15T02:27:46Z", "comment_text": "\n \t\tWe should also clearly document what the user is expected to provide here. Under the current design, name is required for both old and new KfDefs. But for the new KfDef, we must also provide the version string.\n \t\t"}}}, "commit": {"commit_id": "9f5ef66ce3d12ff2b603d07330a16661caa0b286", "commit_author": "Richard Liu", "commitT": "2019-10-15 09:59:52-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "bootstrap\\pkg\\kfupgrade\\kfupgrade.go", "file_new_name": "bootstrap\\pkg\\kfupgrade\\kfupgrade.go", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "43,75", "deleted_lines": "43", "method_info": {"method_name": "createNewKfApp", "method_params": "string,KfDef", "method_startline": "43", "method_endline": "83"}}, "hunk_1": {"Ismethod": 1, "added_lines": "119", "deleted_lines": "118", "method_info": {"method_name": "NewKfUpgrade", "method_params": "string", "method_startline": "88", "method_endline": "132"}}, "hunk_2": {"Ismethod": 1, "added_lines": "43,75", "deleted_lines": "43", "method_info": {"method_name": "createNewKfApp", "method_params": "string,string,KfDef", "method_startline": "43", "method_endline": "84"}}}}}}}