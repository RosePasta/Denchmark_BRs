{"BR": {"BR_id": "32501", "BR_author": "drasmuss", "BRopenT": "2019-09-13T15:55:45Z", "BRcloseT": "2019-09-17T21:31:07Z", "BR_text": {"BRsummary": "Error when using stateful RNN with multiple inputs", "BRdescription": "\n System information\n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\n Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A\n TensorFlow installed from (source or binary): binary\n TensorFlow version (use command below): 2.0.0rc0\n Python version: 3.6.8\n Bazel version (if compiling from source): N/A\n GCC/Compiler version (if compiling from source): N/A\n CUDA/cuDNN version: 10.0.130/7.6.0\n GPU model and memory: GTX 980 Ti\n \n Describe the current behavior\n The stock example of RNNs with multiple inputs from here <denchmark-link:https://www.tensorflow.org/beta/guide/keras/rnn#rnns_with_listdict_inputs_or_nested_inputs>https://www.tensorflow.org/beta/guide/keras/rnn#rnns_with_listdict_inputs_or_nested_inputs</denchmark-link>\n  produces an error if you set .  This seems to be a problem with any multi-input RNN with stateful=True.\n Describe the expected behavior\n There should be no error, multi-input RNNs with stateful=True should work the same as with stateful=False (other than preserving state).\n Code to reproduce the issue\n Note, this code is copied from <denchmark-link:https://www.tensorflow.org/beta/guide/keras/rnn#rnns_with_listdict_inputs_or_nested_inputs>https://www.tensorflow.org/beta/guide/keras/rnn#rnns_with_listdict_inputs_or_nested_inputs</denchmark-link>\n , with the exception that I changed the line\n <denchmark-code>rnn = tf.keras.layers.RNN(cell)\n </denchmark-code>\n \n to\n <denchmark-code>rnn = tf.keras.layers.RNN(cell, stateful=True)\n </denchmark-code>\n \n import collections\n \n import tensorflow as tf\n \n NestedInput = collections.namedtuple(\"NestedInput\", [\"feature1\", \"feature2\"])\n NestedState = collections.namedtuple(\"NestedState\", [\"state1\", \"state2\"])\n \n \n class NestedCell(tf.keras.layers.Layer):\n     def __init__(self, unit_1, unit_2, unit_3, **kwargs):\n         self.unit_1 = unit_1\n         self.unit_2 = unit_2\n         self.unit_3 = unit_3\n         self.state_size = NestedState(\n             state1=unit_1, state2=tf.TensorShape([unit_2, unit_3])\n         )\n         self.output_size = (unit_1, tf.TensorShape([unit_2, unit_3]))\n         super(NestedCell, self).__init__(**kwargs)\n \n     def build(self, input_shapes):\n         # expect input_shape to contain 2 items, [(batch, i1), (batch, i2, i3)]\n         input_1 = input_shapes.feature1[1]\n         input_2, input_3 = input_shapes.feature2[1:]\n \n         self.kernel_1 = self.add_weight(\n             shape=(input_1, self.unit_1), initializer=\"uniform\", name=\"kernel_1\"\n         )\n         self.kernel_2_3 = self.add_weight(\n             shape=(input_2, input_3, self.unit_2, self.unit_3),\n             initializer=\"uniform\",\n             name=\"kernel_2_3\",\n         )\n \n     def call(self, inputs, states):\n         # inputs should be in [(batch, input_1), (batch, input_2, input_3)]\n         # state should be in shape [(batch, unit_1), (batch, unit_2, unit_3)]\n         input_1, input_2 = tf.nest.flatten(inputs)\n         s1, s2 = states\n \n         output_1 = tf.matmul(input_1, self.kernel_1)\n         output_2_3 = tf.einsum(\"bij,ijkl->bkl\", input_2, self.kernel_2_3)\n         state_1 = s1 + output_1\n         state_2_3 = s2 + output_2_3\n \n         output = [output_1, output_2_3]\n         new_states = NestedState(state1=state_1, state2=state_2_3)\n \n         return output, new_states\n \n \n unit_1 = 10\n unit_2 = 20\n unit_3 = 30\n \n input_1 = 32\n input_2 = 64\n input_3 = 32\n batch_size = 64\n num_batch = 100\n timestep = 50\n \n cell = NestedCell(unit_1, unit_2, unit_3)\n rnn = tf.keras.layers.RNN(cell, stateful=True)\n \n inp_1 = tf.keras.Input((None, input_1))\n inp_2 = tf.keras.Input((None, input_2, input_3))\n \n outputs = rnn(NestedInput(feature1=inp_1, feature2=inp_2))\n \n model = tf.keras.models.Model([inp_1, inp_2], outputs)\n \n model.compile(optimizer=\"adam\", loss=\"mse\", metrics=[\"accuracy\"])\n Other info / logs\n <denchmark-code>Traceback (most recent call last):\n   File \".../tmp2.py\", line 70, in <module>\n     outputs = rnn(NestedInput(feature1=inp_1, feature2=inp_2))\n   File \"...\\site-packages\\tensorflow_core\\python\\keras\\layers\\recurrent.py\", line 623, in __call__\n     return super(RNN, self).__call__(inputs, **kwargs)\n   File \"...\\site-packages\\tensorflow_core\\python\\keras\\engine\\base_layer.py\", line 777, in __call__\n     self._maybe_build(inputs)\n   File \"...\\site-packages\\tensorflow_core\\python\\keras\\engine\\base_layer.py\", line 2099, in _maybe_build\n     self.build(input_shapes)\n   File \"...\\site-packages\\tensorflow_core\\python\\keras\\layers\\recurrent.py\", line 561, in build\n     self.reset_states()\n   File \"...\\site-packages\\tensorflow_core\\python\\keras\\layers\\recurrent.py\", line 809, in reset_states\n     spec_shape = None if self.input_spec is None else self.input_spec[0].shape\n AttributeError: 'NestedInput' object has no attribute 'shape'\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "drasmuss", "commentT": "2019-09-16T09:03:54Z", "comment_text": "\n \t\tIssue replicating for TF version-2.0rc0 and also 2.0rc1, please find the <denchmark-link:https://colab.sandbox.google.com/gist/oanush/8b07187ad22ba68f2bdd7f45a058d851/32501.ipynb>gist</denchmark-link>\n  of the colab.Thanks!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "drasmuss", "commentT": "2019-09-16T12:40:42Z", "comment_text": "\n \t\tThis issue is present in 1.14.0 as well (and probably earlier, but the RNN api was different so the example doesn't run for other reasons).\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "drasmuss", "commentT": "2019-09-17T17:07:51Z", "comment_text": "\n \t\tThanks for reporting the issue. Let me take a look.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "drasmuss", "commentT": "2019-09-17T21:31:08Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=32501>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=32501>No</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "38b748907e04fb212c1183b4999425d768de0233", "commit_author": "Scott Zhu", "commitT": "2019-09-17 12:26:17-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\keras\\layers\\recurrent.py", "file_new_name": "tensorflow\\python\\keras\\layers\\recurrent.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "822,823,824", "deleted_lines": "822", "method_info": {"method_name": "reset_states", "method_params": "self,states", "method_startline": "819", "method_endline": "873"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow\\python\\keras\\layers\\recurrent_test.py", "file_new_name": "tensorflow\\python\\keras\\layers\\recurrent_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1021,1028,1030,1031,1032,1037,1038,1049,1050,1054,1056,1057,1062,1063,1075,1076", "deleted_lines": "1027,1029,1030,1035,1036,1047,1051,1053,1054,1059,1060,1072", "method_info": {"method_name": "test_nested_input_output", "method_params": "self,stateful", "method_startline": "1021", "method_endline": "1076"}}, "hunk_1": {"Ismethod": 1, "added_lines": "1020,1021,1028,1030,1031,1032,1037,1038,1049,1050,1054,1056,1057,1062,1063", "deleted_lines": "1020,1027,1029,1030,1035,1036,1047,1051,1053,1054,1059,1060,1072", "method_info": {"method_name": "test_nested_input_output", "method_params": "self", "method_startline": "1020", "method_endline": "1072"}}}}}}}