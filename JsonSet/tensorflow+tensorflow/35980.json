{"BR": {"BR_id": "35980", "BR_author": "Intellicode", "BRopenT": "2020-01-17T11:07:41Z", "BRcloseT": "2020-01-28T19:10:51Z", "BR_text": {"BRsummary": "Tensorflow predict call crashes when loading a model with gevent enabled", "BRdescription": "\n System information\n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS 10.14.6, also tried it on the Docker container nvidia/cuda:10.1-cudnn7-runtime\n TensorFlow installed from (source or binary): binary\n TensorFlow version (use command below): v2.1.0-rc2-17-ge5bf8de410 2.1.0\n Python version: 3.7.4 on Mac, Python 3.6.9 :: Anaconda, Inc. in Docker\n CUDA/cuDNN version: N/A\n GPU model and memory: N/A\n \n Describe the current behavior\n Tensorflow crashes after calling predict on the model, this happens with gevent 1.4.0 and also 1.5a2\n Describe the expected behavior\n Tensorflow doesn't crash\n Code to reproduce the issue\n <denchmark-code>from gevent import monkey\n monkey.patch_all()\n \n import numpy as np\n import tensorflow as tf\n \n classifier = tf.keras.models.load_model('tensorflow_model_dir')\n classifier.predict(np.array(\n     np.zeros((1, 12623))\n ))\n </denchmark-code>\n \n Other info / logs\n <denchmark-code>Traceback (most recent call last):\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/backend.py\", line 430, in eager_learning_phase_scope\n     _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH] = value\n   File \"/opt/conda/envs/py36/lib/python3.6/weakref.py\", line 407, in __setitem__\n     self.data[ref(key, self._remove)] = value\n TypeError: cannot create weak reference to 'gevent._local.local' object\n \n During handling of the above exception, another exception occurred:\n \n Traceback (most recent call last):\n   File \"scripts/gevent_load_classifier.py\", line 9, in <module>\n     np.zeros((1, 12623))\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training.py\", line 1013, in predict\n     use_multiprocessing=use_multiprocessing)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py\", line 498, in predict\n     workers=workers, use_multiprocessing=use_multiprocessing, **kwargs)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py\", line 475, in _model_iteration\n     total_epochs=1)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py\", line 128, in run_one_epoch\n     batch_outs = execution_function(iterator)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py\", line 98, in execution_function\n     distributed_function(input_fn))\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py\", line 568, in __call__\n     result = self._call(*args, **kwds)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py\", line 615, in _call\n     self._initialize(args, kwds, add_initializers_to=initializers)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py\", line 497, in _initialize\n     *args, **kwds))\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\", line 2389, in _get_concrete_function_internal_garbage_collected\n     graph_function, _, _ = self._maybe_define_function(args, kwargs)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\", line 2703, in _maybe_define_function\n     graph_function = self._create_graph_function(args, kwargs)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\", line 2593, in _create_graph_function\n     capture_by_value=self._capture_by_value),\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/framework/func_graph.py\", line 978, in func_graph_from_py_func\n     func_outputs = python_func(*func_args, **func_kwargs)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py\", line 439, in wrapped_fn\n     return weak_wrapped_fn().__wrapped__(*args, **kwds)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py\", line 85, in distributed_function\n     per_replica_function, args=args)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py\", line 763, in experimental_run_v2\n     return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py\", line 1819, in call_for_each_replica\n     return self._call_for_each_replica(fn, args, kwargs)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py\", line 2164, in _call_for_each_replica\n     return fn(*args, **kwargs)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/api.py\", line 292, in wrapper\n     return func(*args, **kwargs)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py\", line 212, in _predict_on_batch\n     result = predict_on_batch(model, x)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py\", line 555, in predict_on_batch\n     with backend.eager_learning_phase_scope(0):\n   File \"/opt/conda/envs/py36/lib/python3.6/contextlib.py\", line 81, in __enter__\n     return next(self.gen)\n   File \"/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/backend.py\", line 437, in eager_learning_phase_scope\n     del _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH]\n   File \"/opt/conda/envs/py36/lib/python3.6/weakref.py\", line 391, in __delitem__\n     del self.data[ref(key)]\n TypeError: cannot create weak reference to 'gevent._local.local' object\n \n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "Intellicode", "commentT": "2020-01-23T10:33:46Z", "comment_text": "\n \t\tTried replicating the issue from<denchmark-link:https://colab.sandbox.google.com/gist/oanush/6e224557fe243a2e53b7421176afbfa0/35980.ipynb> given code</denchmark-link>\n ,it just keeps running without any output.Thanks!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "Intellicode", "commentT": "2020-01-23T12:22:42Z", "comment_text": "\n \t\tThanks for checking <denchmark-link:https://github.com/oanush>@oanush</denchmark-link>\n , I tried the notebook, but I think the notebook environment loads tensorflow before doing the monkey patch:\n <denchmark-code>/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: MonkeyPatchWarning: Monkey-patching ssl after ssl has already been imported may lead to errors, including RecursionError on Python 3.6. It may also silently lead to incorrect behaviour on Python 3.7. Please monkey-patch earlier. See https://github.com/gevent/gevent/issues/1016. Modules that had direct imports (NOT patched): ['urllib3.util (/usr/local/lib/python3.6/dist-packages/urllib3/util/__init__.py)', 'urllib3.util.ssl_ (/usr/local/lib/python3.6/dist-packages/urllib3/util/ssl_.py)']. \n </denchmark-code>\n \n This is the same warning I get when I import tensorflow before importing gevent. Also, to reproduce the error you probably need to load an actual tensorflow model (replace tensorflow_model_dir)\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "Intellicode", "commentT": "2020-01-23T23:02:48Z", "comment_text": "\n \t\tLooks like an error in the environment itself. Can you try this in a new virtual environment and let me know if you are facing the same issue?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "Intellicode", "commentT": "2020-01-24T09:58:26Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/gowthamkpr>@gowthamkpr</denchmark-link>\n  I've tried creating a seperate containter for this purpose:\n <denchmark-code>FROM python:3.6-slim\n \n RUN apt-get update \\\n     && apt-get install -y --no-install-recommends build-essential \\\n     && rm -rf /var/lib/apt/lists/*\n \n RUN pip install tensorflow gevent\n \n COPY tf_test.py /opt/test/tf_test.py\n COPY model_dir /opt/test/model_dir\n \n CMD python /opt/test/tf_test.py\n </denchmark-code>\n \n where tf_test.py contains the following code:\n <denchmark-code>from gevent import monkey\n monkey.patch_all()\n \n import numpy as np\n import tensorflow as tf\n \n classifier = tf.keras.models.load_model('/opt/test/model_dir')\n classifier.predict(np.array(\n     np.zeros((1, 12623))\n ))\n </denchmark-code>\n \n This is the complete output:\n <denchmark-code>2020-01-24 09:56:31.304096: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libnvinfer.so.6'; dlerror: libnvinfer.so.6: cannot open shared object file: No such file or directory\n 2020-01-24 09:56:31.304280: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libnvinfer_plugin.so.6'; dlerror: libnvinfer_plugin.so.6: cannot open shared object file: No such file or directory\n 2020-01-24 09:56:31.304324: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:30] Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n 2020-01-24 09:56:31.867084: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n 2020-01-24 09:56:31.867143: E tensorflow/stream_executor/cuda/cuda_driver.cc:351] failed call to cuInit: UNKNOWN ERROR (303)\n 2020-01-24 09:56:31.867175: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (b3b6a3003434): /proc/driver/nvidia/version does not exist\n 2020-01-24 09:56:31.867464: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n 2020-01-24 09:56:31.874365: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 2208000000 Hz\n 2020-01-24 09:56:31.875321: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x55a8216a44f0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:\n 2020-01-24 09:56:31.875375: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version\n Traceback (most recent call last):\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/backend.py\", line 430, in eager_learning_phase_scope\n     _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH] = value\n   File \"/usr/local/lib/python3.6/weakref.py\", line 407, in __setitem__\n     self.data[ref(key, self._remove)] = value\n TypeError: cannot create weak reference to 'gevent._local.local' object\n \n During handling of the above exception, another exception occurred:\n \n Traceback (most recent call last):\n   File \"/opt/test/tf_test.py\", line 9, in <module>\n     np.zeros((1, 12623))\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training.py\", line 1013, in predict\n     use_multiprocessing=use_multiprocessing)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py\", line 498, in predict\n     workers=workers, use_multiprocessing=use_multiprocessing, **kwargs)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py\", line 475, in _model_iteration\n     total_epochs=1)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py\", line 128, in run_one_epoch\n     batch_outs = execution_function(iterator)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py\", line 98, in execution_function\n     distributed_function(input_fn))\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py\", line 568, in __call__\n     result = self._call(*args, **kwds)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py\", line 615, in _call\n     self._initialize(args, kwds, add_initializers_to=initializers)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py\", line 497, in _initialize\n     *args, **kwds))\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\", line 2389, in _get_concrete_function_internal_garbage_collected\n     graph_function, _, _ = self._maybe_define_function(args, kwargs)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\", line 2703, in _maybe_define_function\n     graph_function = self._create_graph_function(args, kwargs)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\", line 2593, in _create_graph_function\n     capture_by_value=self._capture_by_value),\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/framework/func_graph.py\", line 978, in func_graph_from_py_func\n     func_outputs = python_func(*func_args, **func_kwargs)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py\", line 439, in wrapped_fn\n     return weak_wrapped_fn().__wrapped__(*args, **kwds)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py\", line 85, in distributed_function\n     per_replica_function, args=args)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py\", line 763, in experimental_run_v2\n     return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py\", line 1819, in call_for_each_replica\n     return self._call_for_each_replica(fn, args, kwargs)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py\", line 2164, in _call_for_each_replica\n     return fn(*args, **kwargs)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/api.py\", line 292, in wrapper\n     return func(*args, **kwargs)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py\", line 212, in _predict_on_batch\n     result = predict_on_batch(model, x)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py\", line 555, in predict_on_batch\n     with backend.eager_learning_phase_scope(0):\n   File \"/usr/local/lib/python3.6/contextlib.py\", line 81, in __enter__\n     return next(self.gen)\n   File \"/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/backend.py\", line 437, in eager_learning_phase_scope\n     del _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH]\n   File \"/usr/local/lib/python3.6/weakref.py\", line 391, in __delitem__\n     del self.data[ref(key)]\n TypeError: cannot create weak reference to 'gevent._local.local' object\n </denchmark-code>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "Intellicode", "commentT": "2020-01-24T10:10:23Z", "comment_text": "\n \t\tYou can also reproduce the error with the code from the <denchmark-link:https://www.tensorflow.org/tutorials/quickstart/beginner>official beginner tutorial</denchmark-link>\n :\n <denchmark-code>from gevent import monkey\n monkey.patch_all()\n import tensorflow as tf\n \n mnist = tf.keras.datasets.mnist\n \n (x_train, y_train), (x_test, y_test) = mnist.load_data()\n x_train, x_test = x_train / 255.0, x_test / 255.0\n \n model = tf.keras.models.Sequential([\n     tf.keras.layers.Flatten(input_shape=(28, 28)),\n     tf.keras.layers.Dense(128, activation='relu'),\n     tf.keras.layers.Dropout(0.2),\n     tf.keras.layers.Dense(10, activation='softmax')\n ])\n \n model.compile(optimizer='adam',\n               loss='sparse_categorical_crossentropy',\n               metrics=['accuracy'])\n \n model.fit(x_train, y_train, epochs=5)\n \n model.evaluate(x_test, y_test, verbose=2)\n </denchmark-code>\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "Intellicode", "commentT": "2020-01-27T20:59:54Z", "comment_text": "\n \t\tI can confirm this issue. I spent some time browsing the code today, and discovered the following.\n _GRAPH_LEARNING_PHASES  is a weakref.WeakKeyDictionary, and at some point a learning phase is added with the key _DUMMY_EAGER_GRAPH, which is a threading.local() object. Because Gevent monkey patching replaces this local object with a gevent._local.local, which cannot be weakly referenced, lookups for _DUMMY_EAGER_GRAPH will throw the exception above.\n I am not sure the use of  is really necessary here, or perhaps there are alternatives. <denchmark-link:https://github.com/iganichev>@iganichev</denchmark-link>\n  I see that you introduced them a while back, perhaps you can shed some light on this?\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "Intellicode", "commentT": "2020-01-27T21:48:43Z", "comment_text": "\n \t\tWeakKeyDictionary is definitely needed. There are a couple of issues here and I can submit a fix. Can somebody quickly test if something like this would work with gevent?\n <denchmark-code>diff --git a/google3/third_party/tensorflow/python/keras/backend.py b/google3/third_party/tensorflow/python/keras/backend.py\n --- a/google3/third_party/tensorflow/python/keras/backend.py\n +++ b/google3/third_party/tensorflow/python/keras/backend.py\n @@ -110,7 +110,14 @@ py_any = any\n  # _DUMMY_EAGER_GRAPH is used as a key in _GRAPH_LEARNING_PHASES.\n  # We keep a separate reference to it to make sure it does not get removed from\n  # _GRAPH_LEARNING_PHASES.\n -_DUMMY_EAGER_GRAPH = threading.local()\n +class DummyEagerGraph(threading.local):\n +  class Foo(object):\n +    pass\n +  def __init__(self):\n +    super(DummyEagerGraph, self).__init__()\n +    self.key = Foo()\n +\n +\n +_DUMMY_EAGER_GRAPH = DummyEagerGraph()\n  \n  # This boolean flag can be set to True to leave variable initialization\n  # up to the user.\n @@ -295,17 +302,17 @@ def learning_phase():\n      # will always execute non-eagerly using a function-specific default\n      # subgraph.\n      if context.executing_eagerly():\n -      if _DUMMY_EAGER_GRAPH not in _GRAPH_LEARNING_PHASES:\n +      if _DUMMY_EAGER_GRAPH.key not in _GRAPH_LEARNING_PHASES:\n          # Fallback to inference mode as default.\n          return 0\n -      return _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH]\n +      return _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH.key]\n      learning_phase = symbolic_learning_phase()\n      _mark_func_graph_as_unsaveable(graph, learning_phase)\n      return learning_phase\n  \n  \n  def global_learning_phase_is_set():\n -  return _DUMMY_EAGER_GRAPH in _GRAPH_LEARNING_PHASES\n +  return _DUMMY_EAGER_GRAPH.key in _GRAPH_LEARNING_PHASES\n  \n  \n  def _mark_func_graph_as_unsaveable(graph, learning_phase):\n @@ -356,7 +363,7 @@ def set_learning_phase(value):\n      if context.executing_eagerly():\n        # In an eager context, the learning phase values applies to both the eager\n        # context and the internal Keras graph.\n -      _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH] = value\n +      _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH.key] = value\n      _GRAPH_LEARNING_PHASES[get_graph()] = value\n  \n  \n @@ -384,7 +391,7 @@ def learning_phase_scope(value):\n    with ops.init_scope():\n      if context.executing_eagerly():\n        previous_eager_value = _GRAPH_LEARNING_PHASES.get(\n -          _DUMMY_EAGER_GRAPH, None)\n +          _DUMMY_EAGER_GRAPH.key, None)\n      previous_graph_value = _GRAPH_LEARNING_PHASES.get(get_graph(), None)\n  \n    try:\n @@ -395,9 +402,9 @@ def learning_phase_scope(value):\n      with ops.init_scope():\n        if context.executing_eagerly():\n          if previous_eager_value is not None:\n -          _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH] = previous_eager_value\n -        elif _DUMMY_EAGER_GRAPH in _GRAPH_LEARNING_PHASES:\n -          del _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH]\n +          _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH.key] = previous_eager_value\n +        elif _DUMMY_EAGER_GRAPH.key in _GRAPH_LEARNING_PHASES:\n +          del _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH.key]\n  \n        graph = get_graph()\n        if previous_graph_value is not None:\n @@ -427,14 +434,14 @@ def eager_learning_phase_scope(value):\n    if global_learning_phase_was_set:\n      previous_value = learning_phase()\n    try:\n -    _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH] = value\n +    _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH.key] = value\n      yield\n    finally:\n      # Restore learning phase to initial value or unset.\n      if global_learning_phase_was_set:\n -      _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH] = previous_value\n +      _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH.key] = previous_value\n      else:\n -      del _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH]\n +      del _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH.key]\n  \n  \n  def _current_graph(op_input_list):\n </denchmark-code>\n \n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "Intellicode", "commentT": "2020-01-27T23:16:11Z", "comment_text": "\n \t\tYes, this seems to resolve the issue. I did have to modify the patch to reference 'Foo' correctly: self.key = DummyEagerGraph.Foo().\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "Intellicode", "commentT": "2020-01-27T23:40:25Z", "comment_text": "\n \t\tGreat. I will make the patch and send it out internally (a little easier). I should make it to github tomorrow night or a bit later.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "Intellicode", "commentT": "2020-01-27T23:43:31Z", "comment_text": "\n \t\tThat's amazing, thanks for the quick response!\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "Intellicode", "commentT": "2020-01-28T19:10:52Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35980>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35980>No</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "75286a79e7cdf9fdc27b15919f453786eee8936d", "commit_author": "Igor Ganichev", "commitT": "2020-01-28 11:09:31-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "tensorflow\\python\\keras\\backend.py", "file_new_name": "tensorflow\\python\\keras\\backend.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "462,467,469", "deleted_lines": null, "method_info": {"method_name": "eager_learning_phase_scope", "method_params": "value", "method_startline": "442", "method_endline": "469"}}, "hunk_1": {"Ismethod": 1, "added_lines": "137,138,139,140,141,142", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self", "method_startline": "137", "method_endline": "142"}}, "hunk_2": {"Ismethod": 1, "added_lines": "419,430,431,432", "deleted_lines": "398,399,400,430,435,437", "method_info": {"method_name": "learning_phase_scope", "method_params": "value", "method_startline": "397", "method_endline": "438"}}, "hunk_3": {"Ismethod": 1, "added_lines": "330,333", "deleted_lines": "308", "method_info": {"method_name": "learning_phase", "method_params": "", "method_startline": "304", "method_endline": "336"}}, "hunk_4": {"Ismethod": 1, "added_lines": "391", "deleted_lines": "387", "method_info": {"method_name": "set_learning_phase", "method_params": "value", "method_startline": "374", "method_endline": "392"}}, "hunk_5": {"Ismethod": 1, "added_lines": "340", "deleted_lines": null, "method_info": {"method_name": "global_learning_phase_is_set", "method_params": "", "method_startline": "339", "method_endline": "340"}}}}}}}