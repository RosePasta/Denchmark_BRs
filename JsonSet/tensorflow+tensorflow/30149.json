{"BR": {"BR_id": "30149", "BR_author": "ageron", "BRopenT": "2019-06-25T20:34:21Z", "BRcloseT": "2019-07-01T18:20:41Z", "BR_text": {"BRsummary": "Autograph \"Failed to parse source code\" error when using lambda in for loop", "BRdescription": "\n System information\n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow):\n Yes\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04):\n MacOSX 10.13.6\n Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\n N/A\n TensorFlow installed from (source or binary):\n binary\n TensorFlow version (use command below):\n VERSION=2.0.0-dev20190625\n GIT_VERSION=v1.12.1-4885-g71241a6afd\n Python version:\n 3.6.8\n Bazel version (if compiling from source):\n N/A\n GCC/Compiler version (if compiling from source):\n N/A\n CUDA/cuDNN version:\n N/A\n GPU model and memory:\n N/A\n \n Describe the current behavior\n I get an autograph error when running the following code (see the full stacktrace below):\n import tensorflow as tf\n ds = tf.data.Dataset.range(10).window(5, shift=1, drop_remainder=True)\n for window in ds.flat_map(lambda window: window.batch(5)):\n     print(window.numpy())\n The error is ValueError: Failed to parse source code of <function <lambda> at 0x11194c488>\n Describe the expected behavior\n Everything works fine when I define the dataset on the previous line like this:\n import tensorflow as tf\n ds = tf.data.Dataset.range(10).window(5, shift=1, drop_remainder=True)\n ds = ds.flat_map(lambda window: window.batch(5))\n for window in ds:\n     print(window.numpy())\n Code to reproduce the issue\n See above.\n Other info / logs\n Full stack trace with AUTOGRAPH_VERBOSITY=10:\n <denchmark-code>2019-06-25 22:24:13.172683: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n 2019-06-25 22:24:13.197405: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x7fa5e8a657c0 executing computations on platform Host. Devices:\n 2019-06-25 22:24:13.197445: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): <undefined>, <undefined>\n Converted call: <function <lambda> at 0x134b81488>\n     args: (<_VariantDataset shapes: (), types: tf.int64>,)\n     kwargs: {}\n \n Not whitelisted: <method-wrapper '__call__' of function object at 0x134b81488>: default rule\n Not whitelisted: <function <lambda> at 0x134b81488>: default rule\n Entity <function <lambda> at 0x134b81488> is not cached for key <code object <lambda> at 0x13b5f7ed0, file \"<ipython-input-1-8a83c4c9b193>\", line 4> subkey (<tensorflow.python.autograph.core.converter.ConversionOptions object at 0x13b641588>, frozenset())\n Converting <function <lambda> at 0x134b81488>\n WARNING: Logging before flag parsing goes to stderr.\n E0625 22:24:13.215670 140735810999168 ag_logging.py:133] Error converting <function <lambda> at 0x134b81488>\n Traceback (most recent call last):\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 78, in parse_entity\n     return parse_str(source, preamble_len=len(future_features)), source\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 140, in parse_str\n     module_node = gast.parse(src)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/gast/gast.py\", line 240, in parse\n     return ast_to_gast(_ast.parse(*args, **kwargs))\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/ast.py\", line 35, in parse\n     return compile(source, filename, mode, PyCF_ONLY_AST)\n   File \"<unknown>\", line 5\n     for window in ds.flat_map(lambda window: window.batch(5)):\n                                                              ^\n SyntaxError: unexpected EOF while parsing\n \n During handling of the above exception, another exception occurred:\n \n Traceback (most recent call last):\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 118, in parse_entity\n     return parse_str(source, preamble_len=len(future_features)), source\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 140, in parse_str\n     module_node = gast.parse(src)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/gast/gast.py\", line 240, in parse\n     return ast_to_gast(_ast.parse(*args, **kwargs))\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/ast.py\", line 35, in parse\n     return compile(source, filename, mode, PyCF_ONLY_AST)\n   File \"<unknown>\", line 5\n     for window in ds.flat_map(lambda window: window.batch(5)):\n                                                              ^\n SyntaxError: unexpected EOF while parsing\n \n During handling of the above exception, another exception occurred:\n \n Traceback (most recent call last):\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/api.py\", line 635, in to_graph\n     return conversion.convert(entity, program_ctx)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/conversion.py\", line 322, in convert\n     free_nonglobal_var_names)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/conversion.py\", line 240, in _convert_with_cache\n     entity, program_ctx)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/conversion.py\", line 441, in convert_entity_to_ast\n     nodes, name, entity_info = convert_func_to_ast(o, program_ctx)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/conversion.py\", line 601, in convert_func_to_ast\n     node, source = parser.parse_entity(f, future_features=future_features)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 123, in parse_entity\n     ' source to:\\n{}\\nBut that did not work.'.format(source))\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 66, in raise_parse_failure\n     '{}'.format(entity, source, comment))\n ValueError: Failed to parse source code of <function <lambda> at 0x134b81488>, which Python reported as:\n from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n from __future__ import unicode_literals\n for window in ds.flat_map(lambda window: window.batch(5)):\n If this is a lambda function, the error may be avoided by creating the lambda in a standalone statement. Tried to strip down the source to:\n from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n from __future__ import unicode_literals\n for window in ds.flat_map(lambda window: window.batch(5)):\n But that did not work.\n ERROR: Error converting <function <lambda> at 0x134b81488>\n Traceback (most recent call last):\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 78, in parse_entity\n     return parse_str(source, preamble_len=len(future_features)), source\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 140, in parse_str\n     module_node = gast.parse(src)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/gast/gast.py\", line 240, in parse\n     return ast_to_gast(_ast.parse(*args, **kwargs))\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/ast.py\", line 35, in parse\n     return compile(source, filename, mode, PyCF_ONLY_AST)\n   File \"<unknown>\", line 5\n     for window in ds.flat_map(lambda window: window.batch(5)):\n                                                              ^\n SyntaxError: unexpected EOF while parsing\n \n During handling of the above exception, another exception occurred:\n \n Traceback (most recent call last):\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 118, in parse_entity\n     return parse_str(source, preamble_len=len(future_features)), source\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 140, in parse_str\n     module_node = gast.parse(src)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/gast/gast.py\", line 240, in parse\n     return ast_to_gast(_ast.parse(*args, **kwargs))\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/ast.py\", line 35, in parse\n     return compile(source, filename, mode, PyCF_ONLY_AST)\n   File \"<unknown>\", line 5\n     for window in ds.flat_map(lambda window: window.batch(5)):\n                                                              ^\n SyntaxError: unexpected EOF while parsing\n \n During handling of the above exception, another exception occurred:\n \n Traceback (most recent call last):\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/api.py\", line 635, in to_graph\n     return conversion.convert(entity, program_ctx)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/conversion.py\", line 322, in convert\n     free_nonglobal_var_names)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/conversion.py\", line 240, in _convert_with_cache\n     entity, program_ctx)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/conversion.py\", line 441, in convert_entity_to_ast\n     nodes, name, entity_info = convert_func_to_ast(o, program_ctx)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/conversion.py\", line 601, in convert_func_to_ast\n     node, source = parser.parse_entity(f, future_features=future_features)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 123, in parse_entity\n     ' source to:\\n{}\\nBut that did not work.'.format(source))\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 66, in raise_parse_failure\n     '{}'.format(entity, source, comment))\n ValueError: Failed to parse source code of <function <lambda> at 0x134b81488>, which Python reported as:\n from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n from __future__ import unicode_literals\n for window in ds.flat_map(lambda window: window.batch(5)):\n If this is a lambda function, the error may be avoided by creating the lambda in a standalone statement. Tried to strip down the source to:\n from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n from __future__ import unicode_literals\n for window in ds.flat_map(lambda window: window.batch(5)):\n But that did not work.\n Error transforming entity <function <lambda> at 0x134b81488>\n Traceback (most recent call last):\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 78, in parse_entity\n     return parse_str(source, preamble_len=len(future_features)), source\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 140, in parse_str\n     module_node = gast.parse(src)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/gast/gast.py\", line 240, in parse\n     return ast_to_gast(_ast.parse(*args, **kwargs))\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/ast.py\", line 35, in parse\n     return compile(source, filename, mode, PyCF_ONLY_AST)\n   File \"<unknown>\", line 5\n     for window in ds.flat_map(lambda window: window.batch(5)):\n                                                              ^\n SyntaxError: unexpected EOF while parsing\n \n During handling of the above exception, another exception occurred:\n \n Traceback (most recent call last):\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 118, in parse_entity\n     return parse_str(source, preamble_len=len(future_features)), source\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 140, in parse_str\n     module_node = gast.parse(src)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/gast/gast.py\", line 240, in parse\n     return ast_to_gast(_ast.parse(*args, **kwargs))\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/ast.py\", line 35, in parse\n     return compile(source, filename, mode, PyCF_ONLY_AST)\n   File \"<unknown>\", line 5\n     for window in ds.flat_map(lambda window: window.batch(5)):\n                                                              ^\n SyntaxError: unexpected EOF while parsing\n \n During handling of the above exception, another exception occurred:\n \n Traceback (most recent call last):\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/api.py\", line 635, in to_graph\n     return conversion.convert(entity, program_ctx)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/conversion.py\", line 322, in convert\n     free_nonglobal_var_names)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/conversion.py\", line 240, in _convert_with_cache\n     entity, program_ctx)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/conversion.py\", line 441, in convert_entity_to_ast\n     nodes, name, entity_info = convert_func_to_ast(o, program_ctx)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/conversion.py\", line 601, in convert_func_to_ast\n     node, source = parser.parse_entity(f, future_features=future_features)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 123, in parse_entity\n     ' source to:\\n{}\\nBut that did not work.'.format(source))\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/pyct/parser.py\", line 66, in raise_parse_failure\n     '{}'.format(entity, source, comment))\n ValueError: Failed to parse source code of <function <lambda> at 0x134b81488>, which Python reported as:\n from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n from __future__ import unicode_literals\n for window in ds.flat_map(lambda window: window.batch(5)):\n If this is a lambda function, the error may be avoided by creating the lambda in a standalone statement. Tried to strip down the source to:\n from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n from __future__ import unicode_literals\n for window in ds.flat_map(lambda window: window.batch(5)):\n But that did not work.\n \n During handling of the above exception, another exception occurred:\n \n Traceback (most recent call last):\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/api.py\", line 528, in converted_call\n     experimental_optional_features=options.optional_features)\n   File \"/Users/ageron/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/api.py\", line 639, in to_graph\n     entity, e.__class__.__name__, str(e)))\n tensorflow.python.autograph.impl.api.ConversionError: converting <function <lambda> at 0x134b81488>: ValueError: Failed to parse source code of <function <lambda> at 0x134b81488>, which Python reported as:\n from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n from __future__ import unicode_literals\n for window in ds.flat_map(lambda window: window.batch(5)):\n If this is a lambda function, the error may be avoided by creating the lambda in a standalone statement. Tried to strip down the source to:\n from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n from __future__ import unicode_literals\n for window in ds.flat_map(lambda window: window.batch(5)):\n But that did not work.\n W0625 22:24:13.223130 140735810999168 ag_logging.py:146] Entity <function <lambda> at 0x134b81488> could not be transformed and will be executed as-is. Please report this to the AutoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <function <lambda> at 0x134b81488>: ValueError: Failed to parse source code of <function <lambda> at 0x134b81488>, which Python reported as:\n from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n from __future__ import unicode_literals\n for window in ds.flat_map(lambda window: window.batch(5)):\n If this is a lambda function, the error may be avoided by creating the lambda in a standalone statement. Tried to strip down the source to:\n from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n from __future__ import unicode_literals\n for window in ds.flat_map(lambda window: window.batch(5)):\n But that did not work.\n WARNING: Entity <function <lambda> at 0x134b81488> could not be transformed and will be executed as-is. Please report this to the AutoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <function <lambda> at 0x134b81488>: ValueError: Failed to parse source code of <function <lambda> at 0x134b81488>, which Python reported as:\n from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n from __future__ import unicode_literals\n for window in ds.flat_map(lambda window: window.batch(5)):\n If this is a lambda function, the error may be avoided by creating the lambda in a standalone statement. Tried to strip down the source to:\n from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n from __future__ import unicode_literals\n for window in ds.flat_map(lambda window: window.batch(5)):\n But that did not work.\n 2019-06-25 22:24:13.243343: W tensorflow/compiler/jit/mark_for_compilation_pass.cc:1541] (One-time warning): Not using XLA:CPU for cluster because envvar TF_XLA_FLAGS=--tf_xla_cpu_global_jit was not set.  If you want XLA:CPU, either set that envvar, or use experimental_jit_scope to enable XLA:CPU.  To confirm that XLA is active, pass --vmodule=xla_compilation_cache=1 (as a proper command-line flag, not via TF_XLA_FLAGS) or set the envvar XLA_FLAGS=--xla_hlo_profile.\n [0 1 2 3 4]\n [1 2 3 4 5]\n [2 3 4 5 6]\n [3 4 5 6 7]\n [4 5 6 7 8]\n [5 6 7 8 9]\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ageron", "commentT": "2019-06-26T09:29:02Z", "comment_text": "\n \t\tI have reproduced the issue in Colab using TF VERSION=2.0.0-dev20190625.Thanks!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ageron", "commentT": "2019-06-26T19:41:50Z", "comment_text": "\n \t\tThis is related to a limitation in Python's inspect.getsource, which can't always get the source code of lambda functions. Specifically, getsource returns the entire source code line, which isn't always well-formed Python code, as you could see from this example.\n The workaround is to declare the lambda function on a single line, as the OP indicates.\n Normally, the error message should describe that (albeit in more detail), but it should definitely suggest the workaround of declaring the lambda on a separate line - <denchmark-link:https://github.com/ageron>@ageron</denchmark-link>\n  can you confirm that the error message included that guidance?\n Related, we should remove the extraneous imports from the error message. The message should spell just:\n <denchmark-code>ValueError: Failed to parse source code of <function <lambda> at 0x134b81488>, which Python reported as:\n for window in ds.flat_map(lambda window: window.batch(5)):\n </denchmark-code>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "ageron", "commentT": "2019-06-28T14:26:28Z", "comment_text": "\n \t\tYes, I can confirm that the message If this is a lambda function, the error may be avoided by creating the lambda in a standalone statement. was part of the (very long) error message. But it's neither at the beginning nor at the end, so it's easily overlooked. I would recommend shortening the error message (except when AUTOGRAPH_VERBOSITY=10), to something like this:\n ValueError: Failed to parse source code of <function <lambda> at 0x134b81488>, which Python reported as:\n for window in ds.flat_map(lambda window: window.batch(5)):\n The error may be avoided by creating the lambda in a standalone statement.\n Alternatively, isn't it possible to parse this line to extract the lambda? After all, it's right there. :)\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "ageron", "commentT": "2019-06-28T15:16:52Z", "comment_text": "\n \t\tI agree - will simplify the error message.\n Yes, we do attempt to parse the line, but in this case is it not well-formed Python code - in our example, it's a for loop without a body. One could imagine a partial parser which attempts to parse as much as possible of the code that is well-formed, but the Python parser doesn't know how to do that, and even then there may still be situations of ambiguity where the results would be incorrect.\n A much more robust fix would be to fix the parser so that it records the exact extents of the lambda, with column numbers. Currently it only records the line number, which is the root of the problem.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "ageron", "commentT": "2019-07-01T18:20:42Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=30149>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=30149>No</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "38df5d8ef43e884674f22670dbfd19ec26782f17", "commit_author": "Dan Moldovan", "commitT": "2019-07-01 11:18:50-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow\\python\\autograph\\pyct\\parser.py", "file_new_name": "tensorflow\\python\\autograph\\pyct\\parser.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "66", "deleted_lines": "66", "method_info": {"method_name": "parse_entity.raise_parse_failure", "method_params": "comment", "method_startline": "63", "method_endline": "66"}}, "hunk_1": {"Ismethod": 1, "added_lines": "53,66,71,122", "deleted_lines": "53,66,71,122", "method_info": {"method_name": "parse_entity", "method_params": "entity,future_features", "method_startline": "39", "method_endline": "122"}}}}}}}