{"BR": {"BR_id": "2032", "BR_author": "KouateMuhamed", "BRopenT": "2020-08-14T07:42:55Z", "BRcloseT": "2020-08-26T14:26:52Z", "BR_text": {"BRsummary": "Incorrect order of labels in the exported masks", "BRdescription": "\n Hi!\n I'm trying to annotate images for a semantic segmentation task.\n Once my images were uploaded, I made the polygonal labeling of the objects of interest using two classes.\n However, when I go to \"Dump annotatations> Segmentation mask 1.1\"\n I get two folders: \"SegmentationClass\" and \"SegmentationObject.\"\n In the first folder I have the masks of only ONE class, while in the second folder I have the masks with all the objects noted, but with different colors.\n I would like to have masks where annotated objects appear with a single color per class.\n Example: [class1] = cat (red) [class2] = dog [yellow]\n Like the semantic segmentation in this pic: <denchmark-link:https://www.jeremyjordan.me/content/images/2018/05/Screen-Shot-2018-05-21-at-10.44.23-PM.png>https://www.jeremyjordan.me/content/images/2018/05/Screen-Shot-2018-05-21-at-10.44.23-PM.png</denchmark-link>\n \n How can I do?\n Thanks in advance\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "KouateMuhamed", "commentT": "2020-08-14T11:09:30Z", "comment_text": "\n \t\tHello. The masks you're looking for should be in the SegmentationClass directory. Could you check if labelmap.txt contains all the classes the task has? Please, also specify your CVAT version.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "KouateMuhamed", "commentT": "2020-08-14T11:20:51Z", "comment_text": "\n \t\tThank you for the answer!\n Yer the labelmap.txt contains all the classes that the task has:\n # label:color_rgb:parts:actions Cat:48,112,32:: background:0,0,0:: Dog:176,112,32::\n CVAT version:\n Server version: 1.1b0\n Core version: 3.1.1\n Canvas version: 2.0.1\n UI version: 1.6.2\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "KouateMuhamed", "commentT": "2020-08-14T11:44:51Z", "comment_text": "\n \t\tCould you specify the commit hash (git log -1)?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "KouateMuhamed", "commentT": "2020-08-14T12:21:20Z", "comment_text": "\n \t\t\n Could you specify the commit hash (git log -1)?\n \n Where can I find it?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "KouateMuhamed", "commentT": "2020-08-14T13:49:10Z", "comment_text": "\n \t\tIf you downloaded the project by cloning the repository, you need to type the command above. If you just downloaded a release or an archive from github - please tell the version.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "KouateMuhamed", "commentT": "2020-08-14T15:21:44Z", "comment_text": "\n \t\t\n If you downloaded the project by cloning the repository, you need to type the command above. If you just downloaded a release or an archive from github - please tell the version.\n \n Commit hash:\n <denchmark-link:https://github.com/openvinotoolkit/cvat/commit/5b9a1dc44306365276392f36162de4b30b464d02>5b9a1dc</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "55073fb16e5d991d08bcbb127dbddfffba409b90", "commit_author": "Maxim Zhiltsov", "commitT": "2020-08-26 17:26:51+03:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "CHANGELOG.md", "file_new_name": "CHANGELOG.md", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "31", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "datumaro\\datumaro\\plugins\\voc_format\\converter.py", "file_new_name": "datumaro\\datumaro\\plugins\\voc_format\\converter.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "451,461,462,472,476,477,487,488,489,490,491,492,493,494,495,496,497,498,501,508", "deleted_lines": "459,460,461,462,470,473,474,475,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,499,504,505,506,507,508,509", "method_info": {"method_name": "_load_categories", "method_params": "self,label_map_source", "method_startline": "451", "method_endline": "509"}}, "hunk_1": {"Ismethod": 1, "added_lines": "451,461,462,472,476,477,487,488,489,490,491,492,493,494,495,496,497,498,501,508", "deleted_lines": "449,459,460,461,462,470,473,474,475,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,499,504,505,506,507,508,509,517", "method_info": {"method_name": "_load_categories", "method_params": "self,label_map_source", "method_startline": "449", "method_endline": "524"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "datumaro\\datumaro\\plugins\\voc_format\\format.py", "file_new_name": "datumaro\\datumaro\\plugins\\voc_format\\format.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "140,141,142", "deleted_lines": null, "method_info": {"method_name": "parse_label_map", "method_params": "path", "method_startline": "124", "method_endline": "163"}}, "hunk_1": {"Ismethod": 1, "added_lines": "195,196,198,201,203", "deleted_lines": "193,194,196,199,201,205", "method_info": {"method_name": "make_voc_categories", "method_params": "label_map", "method_startline": "179", "method_endline": "206"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 8, "file_old_name": "datumaro\\tests\\test_voc_format.py", "file_new_name": "datumaro\\tests\\test_voc_format.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "477,478,479,480,481", "method_info": {"method_name": "test_dataset_with_guessed_labelmap.__iter__", "method_params": "self", "method_startline": "477", "method_endline": "481"}}, "hunk_1": {"Ismethod": 1, "added_lines": "572,573,575,576,589,590,591,592,593,594,595,596,601,610,611,615", "deleted_lines": "605,619,620", "method_info": {"method_name": "test_dataset_with_fixed_labelmap", "method_params": "self", "method_startline": "568", "method_endline": "620"}}, "hunk_2": {"Ismethod": 1, "added_lines": "572,573,575,576", "deleted_lines": null, "method_info": {"method_name": "test_dataset_with_fixed_labelmap.__iter__", "method_params": "self", "method_startline": "570", "method_endline": "577"}}, "hunk_3": {"Ismethod": 1, "added_lines": "559", "deleted_lines": null, "method_info": {"method_name": "test_dataset_with_source_labelmap_defined", "method_params": "self", "method_startline": "522", "method_endline": "566"}}, "hunk_4": {"Ismethod": 1, "added_lines": "559", "deleted_lines": null, "method_info": {"method_name": "test_dataset_with_source_labelmap_defined.categories", "method_params": "self", "method_startline": "556", "method_endline": "561"}}, "hunk_5": {"Ismethod": 1, "added_lines": null, "deleted_lines": "483,484,485,486,487,488,489", "method_info": {"method_name": "test_dataset_with_guessed_labelmap.categories", "method_params": "self", "method_startline": "483", "method_endline": "489"}}, "hunk_6": {"Ismethod": 1, "added_lines": null, "deleted_lines": "475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520", "method_info": {"method_name": "test_dataset_with_guessed_labelmap", "method_params": "self", "method_startline": "475", "method_endline": "520"}}, "hunk_7": {"Ismethod": 1, "added_lines": "615", "deleted_lines": null, "method_info": {"method_name": "test_dataset_with_fixed_labelmap.categories", "method_params": "self", "method_startline": "614", "method_endline": "615"}}}}}}}