{"BR": {"BR_id": "1687", "BR_author": "striderdoom", "BRopenT": "2019-02-07T21:08:42Z", "BRcloseT": "2019-09-30T23:43:47Z", "BR_text": {"BRsummary": "Crash when use_recurrent=true when code thinks \"0 agents\" are in the scene", "BRdescription": "\n Hello ML Agent folk!\n I'm encountering a very odd, difficult to reproduce bug that I think I've tracked down reasonably (and hopefully you can shed some light on things!)\n in ppo/trainer.py in the construct_curr_info function, line 150 to 171 has the following:\n <denchmark-link:https://camo.githubusercontent.com/f2fd13a1a349f4517319bd5eca604500490ffc32fc2a662e204cc1397376560e/687474703a2f2f7075752e73682f43494d77552f653962333362616334332e706e67></denchmark-link>\n \n If next_info.agents is empty, line 171 still attempts to vstack(memory), yielding an error/crash.  I've changed this section to the following\n <denchmark-link:https://camo.githubusercontent.com/efeb8833bbf9787a52084e581955adf2f0c99abe039530f15d940cd2f1c9b162/687474703a2f2f7075752e73682f43494d78692f303264363164366533662e706e67></denchmark-link>\n \n And my program no longer crashes.  As for my questions/concerns:\n \n Is this a reasonable fix?  Will this cause some long term damage on my agent learning that I won't know about and perhaps a crash was correct?\n Without the fix, my program appears to crash at RANDOM times.  That is, with ZERO changes to code, unity scene, anything, sometimes the code would crash after 3000 steps, sometimes never, sometimes after 150,000 steps.  My guess is that there's some race condition happening somewhere -- possibly that next_info.agents isn't getting the data in time on some ticks.\n To answer some other expect questions -- I'm not deleting/adding any agents to my scene.  I have 1 agent that moves around an empty field and resets to its initial position on AgentReset.  If there's other things I should troubleshoot, do let me know!\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "striderdoom", "commentT": "2019-02-07T21:49:59Z", "comment_text": "\n \t\tAlso this is on 0.6a. We had a very similar issue/fix in 0.5 and iirc it only happened when both On Demand was true AND use_recurrent=true in case that helps with a repro.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "striderdoom", "commentT": "2019-02-08T18:23:39Z", "comment_text": "\n \t\tThanks for reporting this bug - it has been logged and we'll investigate it. Can you post the error/output you get during the crash? Is memories also empty, because next_info.agents is empty?\n There was an issue in 0.6 where we would have a divide-by-zero under certain conditions, but that has since been fixed. But this seems to be a different issue altogether.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "striderdoom", "commentT": "2019-02-11T23:59:28Z", "comment_text": "\n \t\tThanks for following up <denchmark-link:https://github.com/ervteng>@ervteng</denchmark-link>\n  !  Here's the error output:\n <denchmark-link:https://camo.githubusercontent.com/6f3dbac98340177203fa8ba3a85f390fd91b437755ea5546bcb4040eabeb5ec4/687474703a2f2f7075752e73682f434b4f4a572f373139666633306437652e706e67></denchmark-link>\n \n This led us to the conclusion that when next_info.agents is empty, memories will be empty, and so we implemented the \"fix\" in my original post.\n Regarding the 0.6 issue -- you're correct in that it's a different issue.  We actually were having issues with the divide by zero issue, but it was all resolved w/ the 0.6a hotfix branch.  Thanks for that!\n Please let me know if there's additional information that would be helpful.  We've been training our agents using the fix in the original post and haven't had any of the similar crashes.  However, we're still leery that we've put a bandaid on a specific problem as opposed to addressing the underlying issue (ie, maybe next_info.agents should never be empty?)\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "striderdoom", "commentT": "2019-02-19T18:46:44Z", "comment_text": "\n \t\tBumping this issue for visibility!\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "striderdoom", "commentT": "2019-02-25T19:05:26Z", "comment_text": "\n \t\tFollowing up again <denchmark-link:https://github.com/ervteng>@ervteng</denchmark-link>\n  !\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "striderdoom", "commentT": "2019-03-06T21:40:17Z", "comment_text": "\n \t\tHey <denchmark-link:https://github.com/striderdoom>@striderdoom</denchmark-link>\n , thanks for posting the logs - we've logged the error and will investigate it. Could you also post the YAML file for the trainer that you're using? It may have something to do, for instance, with using LSTMs or on-demand actions.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "striderdoom", "commentT": "2019-03-07T19:25:54Z", "comment_text": "\n \t\tAre you referring to trainer_config.yaml ?  If so, here's the configuration settings we are using\n <denchmark-link:https://camo.githubusercontent.com/39834f1391a8d08ad6fa865cb3eef9c4f311a5d41dec197550458563b6315f83/687474703a2f2f7075752e73682f43577a49772f653262343963636331322e706e67></denchmark-link>\n \n Also, we are using on-demand actions for our agent.  Thanks again for investigating this!\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "striderdoom", "commentT": "2019-04-03T23:04:45Z", "comment_text": "\n \t\tHey <denchmark-link:https://github.com/striderdoom>@striderdoom</denchmark-link>\n , are you still seeing this issue? From what we see, there shouldn't be a case where next_info.agents is 0, since the Agent is the one asking for the decision. I think for the time being your fix is OK.\n We changed how this portion of the mechanism works in our develop branch in preparation for our next release, so perhaps give that a go and see if it works. Let us know if it's still being an issue.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "striderdoom", "commentT": "2019-04-04T18:58:06Z", "comment_text": "\n \t\tThanks for the update!  Can't wait to test things out for the next release!\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "striderdoom", "commentT": "2019-04-18T00:55:29Z", "comment_text": "\n \t\tWe're still seeing this issue in ML-Agents 0.8.1. The same fix, now on line 148 of /trainers/ppo/trainer.py, appears to still avoid the error.\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "striderdoom", "commentT": "2019-09-13T01:03:57Z", "comment_text": "\n \t\tI know it's quite an old issue, but I do have an update on this. construct_curr_info seems to only be called when agents are being constructed/destroyed, and in one timestep there is no agent. We recently fixed a bug with construct_curr_info that caused different issues with visual observations, and this one seems to be in the same vein. The fix proposed here should be OK, we'll roll it in to the repo. Thanks!\n \t\t"}}}, "commit": {"commit_id": "0a2a0958e9a58233902b59f203f48b1ff4020aa0", "commit_author": "Ervin T", "commitT": "2019-09-13 10:05:56-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "ml-agents\\mlagents\\trainers\\rl_trainer.py", "file_new_name": "ml-agents\\mlagents\\trainers\\rl_trainer.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "102,103", "deleted_lines": "102", "method_info": {"method_name": "construct_curr_info", "method_params": "self,BrainInfo", "method_startline": "53", "method_endline": "118"}}}}}}}