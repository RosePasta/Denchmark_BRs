{"BR": {"BR_id": "1850", "BR_author": "binshengliu", "BRopenT": "2020-05-16T05:36:55Z", "BRcloseT": "2020-05-19T06:39:20Z", "BR_text": {"BRsummary": "lr_find doesn't return the correct suggestion if some losses are nan", "BRdescription": "\n <denchmark-h:h2>\ud83d\udc1b Bug</denchmark-h>\n \n lr_finder doesn't return the correct suggestion if some losses are nan. The returned loss is the one corresponding to the nan value, which is very big in my case.\n <denchmark-link:https://user-images.githubusercontent.com/441707/82111685-3513ea00-978a-11ea-9de2-f436d2fb1750.png></denchmark-link>\n \n <denchmark-h:h3>To Reproduce</denchmark-h>\n \n This depends on the dataset. Please see the code sample.\n <denchmark-h:h4>Code sample</denchmark-h>\n \n I believe this is caused by numpy. The related code should be \n \n \n pytorch-lightning/pytorch_lightning/trainer/lr_finder.py\n \n \n          Line 325\n       in\n       b84b024\n \n \n \n \n \n \n  min_grad = (np.gradient(np.array(loss))).argmin() \n \n \n \n \n \n example_losses = [0.90, 0.89, 0.87, 0.86, 0.85, 0.84]\n print(np.gradient(example_losses).argmin())\n example_losses = [0.90, 0.89, 0.87, 0.86, 0.85, 0.84, float('nan')]\n print(np.gradient(example_losses).argmin())\n Output:\n <denchmark-code>1\n 5\n </denchmark-code>\n \n <denchmark-h:h3>Expected behavior</denchmark-h>\n \n Return the correct suggested loss.\n <denchmark-h:h3>Environment</denchmark-h>\n \n \n CUDA:\n \n GPU:\n available:         False\n version:           10.2\n \n \n Packages:\n \n numpy:             1.18.4\n pyTorch_debug:     False\n pyTorch_version:   1.5.0\n pytorch-lightning: 0.7.6\n tensorboard:       2.2.0\n tqdm:              4.45.0\n \n \n System:\n \n OS:                Linux\n architecture:\n \n 64bit\n \n \n \n processor:\n python:            3.7.6\n version:           #1 SMP Debian 4.19.118-2 (2020-04-29)\n \n \n \n <denchmark-h:h3>Additional context</denchmark-h>\n \n NA\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "binshengliu", "commentT": "2020-05-16T05:37:40Z", "comment_text": "\n \t\tHi! thanks for your contribution!, great first issue!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "binshengliu", "commentT": "2020-05-16T08:04:29Z", "comment_text": "\n \t\tGood catch. I guess that we can not do much about how  behave but we can filter  values before doing the calculation. <denchmark-link:https://github.com/binshengliu>@binshengliu</denchmark-link>\n  are you up for doing a PR?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "binshengliu", "commentT": "2020-05-16T10:53:58Z", "comment_text": "\n \t\tFiltering out nan would be a reasonable approach. Locally I just reset nan to inf also to avoid dealing with indexes.\n Sorry I'm quite inundated with my own projects recently and may not have enough time to shape a proper PR.\n \t\t"}}}, "commit": {"commit_id": "ac76dfcf62a672c84f843f2e3158e4c6262776da", "commit_author": "Rohit Gupta", "commitT": "2020-05-19 08:39:19+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "CHANGELOG.md", "file_new_name": "CHANGELOG.md", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "17,18", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "pytorch_lightning\\trainer\\lr_finder.py", "file_new_name": "pytorch_lightning\\trainer\\lr_finder.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "324,325,326", "deleted_lines": "324,325", "method_info": {"method_name": "suggestion", "method_params": "self,int,int", "method_startline": "313", "method_endline": "331"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "tests\\trainer\\test_lr_finder.py", "file_new_name": "tests\\trainer\\test_lr_finder.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "127", "deleted_lines": "127", "method_info": {"method_name": "test_call_to_trainer_method", "method_params": "tmpdir", "method_startline": "117", "method_endline": "136"}}, "hunk_1": {"Ismethod": 1, "added_lines": "184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202", "deleted_lines": null, "method_info": {"method_name": "test_suggestion_with_non_finite_values", "method_params": "tmpdir", "method_startline": "184", "method_endline": "202"}}, "hunk_2": {"Ismethod": 1, "added_lines": "173", "deleted_lines": "173", "method_info": {"method_name": "test_suggestion_parameters_work", "method_params": "tmpdir", "method_startline": "164", "method_endline": "181"}}}}}}}