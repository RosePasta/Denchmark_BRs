{"BR": {"BR_id": "19304", "BR_author": "DickJC123", "BRopenT": "2020-10-06T23:22:03Z", "BRcloseT": "2020-10-07T04:10:03Z", "BR_text": {"BRsummary": "[CI Infrastructure] R-MKLDNN-CPU test run failure.  gcc fails due to ccache issue?", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n During the work on PR <denchmark-link:https://github.com/apache/incubator-mxnet/pull/19298>#19298</denchmark-link>\n , the following CI job failed in the windows-cpu R-MKLDNN-CPU test job: <denchmark-link:https://jenkins.mxnet-ci.amazon-ml.com/blue/organizations/jenkins/mxnet-validation%2Funix-cpu/detail/PR-19298/1/pipeline/304/>https://jenkins.mxnet-ci.amazon-ml.com/blue/organizations/jenkins/mxnet-validation%2Funix-cpu/detail/PR-19298/1/pipeline/304/</denchmark-link>\n .  This doesn't appear related to the PR, but more with the CI infrastructure and its use of ccache.  Despite the failure being part of the 'test running' phase, gcc was invoked.  See below for relevant error message.\n A retry of this job did not repeat the error.\n <denchmark-h:h3>Error Message</denchmark-h>\n \n <denchmark-code>...\n [2020-10-06T07:47:24.018Z] gcc -std=gnu99 -I/usr/share/R/include -DNDEBUG     -Iutf8lite/src -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c utf8lite/src/render.c -o utf8lite/src/render.o\n ...\n [2020-10-06T07:47:24.018Z] ccache: error: /work/ccache/ccache.conf: No such file or directory\n [2020-10-06T07:47:24.018Z] make[1]: *** [render.o] Error 1\n [2020-10-06T07:47:24.018Z] make[1]: *** Waiting for unfinished jobs....\n [2020-10-06T07:47:24.018Z] /usr/lib/R/etc/Makeconf:159: recipe for target 'render.o' failed\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "DickJC123", "commentT": "2020-10-07T00:12:11Z", "comment_text": "\n \t\tIn v1.x branch, there is a global ccache configuration:\n \n \n \n incubator-mxnet/ci/docker/runtime_functions.sh\n \n \n         Lines 63 to 111\n       in\n       3b69c60\n \n \n \n \n \n \n  build_ccache_wrappers() { \n \n \n \n  set -ex \n \n \n \n  \n \n \n \n  if [ -z ${CC+x} ]; then \n \n \n \n  echo \"No \\$CC set, defaulting to gcc\"; \n \n \n \n  export CC=gcc \n \n \n \n  fi \n \n \n \n  if [ -z ${CXX+x} ]; then \n \n \n \n  echo \"No \\$CXX set, defaulting to g++\"; \n \n \n \n  export CXX=g++ \n \n \n \n  fi \n \n \n \n  \n \n \n \n  # Recommended by CCache: https://ccache.samba.org/manual.html#_run_modes \n \n \n \n  # Add to the beginning of path to ensure this redirection is picked up instead \n \n \n \n  # of the original ones. Especially CUDA/NVCC appends itself to the beginning of the \n \n \n \n  # path and thus this redirect is ignored. This change fixes this problem \n \n \n \n  # This hacky approach with symbolic links is required because underlying build \n \n \n \n  # systems of our submodules ignore our CMake settings. If they use Makefile, \n \n \n \n  # we can't influence them at all in general and NVCC also prefers to hardcode their \n \n \n \n  # compiler instead of respecting the settings. Thus, we take this brutal approach \n \n \n \n  # and just redirect everything of this installer has been called. \n \n \n \n  # In future, we could do these links during image build time of the container. \n \n \n \n  # But in the beginning, we'll make this opt-in. In future, loads of processes like \n \n \n \n  # the scala make step or numpy compilation and other pip package generations \n \n \n \n  # could be heavily sped up by using ccache as well. \n \n \n \n      mkdir -p /tmp/ccache-redirects \n \n \n \n  export PATH=/tmp/ccache-redirects:$PATH \n \n \n \n      CCACHE=`which ccache` \n \n \n \n      ln -sf $CCACHE /tmp/ccache-redirects/gcc \n \n \n \n      ln -sf $CCACHE /tmp/ccache-redirects/gcc-8 \n \n \n \n      ln -sf $CCACHE /tmp/ccache-redirects/g++ \n \n \n \n      ln -sf $CCACHE /tmp/ccache-redirects/g++-8 \n \n \n \n      ln -sf $CCACHE /tmp/ccache-redirects/clang++-3.9 \n \n \n \n      ln -sf $CCACHE /tmp/ccache-redirects/clang-3.9 \n \n \n \n      ln -sf $CCACHE /tmp/ccache-redirects/clang++-5.0 \n \n \n \n      ln -sf $CCACHE /tmp/ccache-redirects/clang-5.0 \n \n \n \n      ln -sf $CCACHE /tmp/ccache-redirects/clang++-6.0 \n \n \n \n      ln -sf $CCACHE /tmp/ccache-redirects/clang-6.0 \n \n \n \n  #Doesn't work: https://github.com/ccache/ccache/issues/373 \n \n \n \n  # ln -sf $CCACHE /tmp/ccache-redirects/nvcc \n \n \n \n  # ln -sf $CCACHE /tmp/ccache-redirects/nvcc \n \n \n \n  # export NVCC=\"/tmp/ccache-redirects/nvcc\" \n \n \n \n  \n \n \n \n  # Uncomment if you would like to debug CCache hit rates. \n \n \n \n  # You can monitor using tail -f ccache-log \n \n \n \n  #export CCACHE_LOGFILE=/work/mxnet/ccache-log \n \n \n \n  #export CCACHE_LOGFILE=/tmp/ccache-log \n \n \n \n  #export CCACHE_DEBUG=1 \n \n \n \n  } \n \n \n \n \n \n We can just remove it's invocation in the R language tests:\n \n \n \n incubator-mxnet/ci/docker/runtime_functions.sh\n \n \n         Lines 1186 to 1191\n       in\n       3b69c60\n \n \n \n \n \n \n  unittest_ubuntu_minimal_R() { \n \n \n \n  set -ex \n \n \n \n      mkdir -p /tmp/r-site-library \n \n \n \n  # build R packages in parallel \n \n \n \n      mkdir -p ~/.R/ \n \n \n \n      build_ccache_wrappers \n \n \n \n \n \n If that slows down the R test stage too much, one can investigate updating the R toolchain.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "DickJC123", "commentT": "2020-10-07T04:10:23Z", "comment_text": "\n \t\tClosed via <denchmark-link:https://github.com/apache/incubator-mxnet/pull/19305>#19305</denchmark-link>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "DickJC123", "commentT": "2020-10-07T21:31:02Z", "comment_text": "\n \t\tAwesome, thanks for the quick turnaround!\n \t\t"}}}, "commit": {"commit_id": "7f98e7389955248503888519c4c845edbae56129", "commit_author": "Leonard Lausen", "commitT": "2020-10-07 04:09:31+00:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "ci\\docker\\runtime_functions.sh", "file_new_name": "ci\\docker\\runtime_functions.sh", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": null, "deleted_lines": "1191,1220"}}}}}}