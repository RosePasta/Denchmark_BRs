{"BR": {"BR_id": "16743", "BR_author": "sxjscience", "BRopenT": "2019-11-06T20:00:26Z", "BRcloseT": "2020-05-19T17:33:25Z", "BR_text": {"BRsummary": "[Numpy] Cannot mix numpy scalar and MXNet numpy ndarray", "BRdescription": "\n Mixing the original numpy array and the mxnet numpy array will trigger some errors:\n Minimal reproducible example:\n import mxnet as mx\n import numpy as np\n mx.npx.set_np()\n a = np.array(1)\n a += mx.np.array(1)\n Error:\n <denchmark-code>AssertionError                            Traceback (most recent call last)\n <ipython-input-6-4f0c781027dc> in <module>\n       4 mx.npx.set_np()\n       5 a = np.array(1)\n ----> 6 a += mx.np.array(1)\n \n ~/mxnet/python/mxnet/numpy/multiarray.py in __array_ufunc__(self, ufunc, method, *inputs, **kwargs)\n     209                                  'to the list.'\n     210                                  .format(name))\n --> 211             return mx_ufunc(*inputs, **kwargs)\n     212         else:\n     213             return NotImplemented\n \n ~/mxnet/python/mxnet/util.py in _wrap_np_binary_func(x1, x2, out, **kwargs)\n     662                     # otherwise raise TypeError with not understood error message\n     663                     raise TypeError(\"{} {} not understood\".format(key, value))\n --> 664         return func(x1, x2, out=out)\n     665     return _wrap_np_binary_func\n     666 \n \n ~/mxnet/python/mxnet/numpy/multiarray.py in add(x1, x2, out, **kwargs)\n    2415            [ 6.,  8., 10.]])\n    2416     \"\"\"\n -> 2417     return _mx_nd_np.add(x1, x2, out)\n    2418 \n    2419 \n \n ~/mxnet/python/mxnet/util.py in _wrap_np_binary_func(x1, x2, out, **kwargs)\n     662                     # otherwise raise TypeError with not understood error message\n     663                     raise TypeError(\"{} {} not understood\".format(key, value))\n --> 664         return func(x1, x2, out=out)\n     665     return _wrap_np_binary_func\n     666 \n \n ~/mxnet/python/mxnet/ndarray/numpy/_op.py in add(x1, x2, out, **kwargs)\n     525         The sum of x1 and x2, element-wise. This is a scalar if both x1 and x2 are scalars.\n     526     \"\"\"\n --> 527     return _ufunc_helper(x1, x2, _npi.add, _np.add, _npi.add_scalar, None, out)\n     528 \n     529 \n \n ~/mxnet/python/mxnet/ndarray/numpy/_op.py in _ufunc_helper(lhs, rhs, fn_array, fn_scalar, lfn_scalar, rfn_scalar, out)\n     389         return lfn_scalar(lhs, float(rhs), out=out)\n     390     elif isinstance(rhs, ndarray):\n --> 391         return fn_array(lhs, rhs, out=out)\n     392     else:\n     393         raise TypeError('type {} not supported'.format(str(type(rhs))))\n \n ~/mxnet/python/mxnet/ndarray/register.py in add(lhs, rhs, out, name, **kwargs)\n \n AssertionError: Argument lhs must have NDArray type, but got 1\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "sxjscience", "commentT": "2019-11-06T20:03:58Z", "comment_text": "\n \t\tThis will be fine:\n import mxnet as mx\n import numpy as np\n mx.npx.set_np()\n a = 1\n a += mx.np.array(1)\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "sxjscience", "commentT": "2019-11-11T19:37:12Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/zachgk>@zachgk</denchmark-link>\n  assign <denchmark-link:https://github.com/sxjscience>@sxjscience</denchmark-link>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "sxjscience", "commentT": "2020-05-08T07:16:42Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/BenjaminCHEN2016>@BenjaminCHEN2016</denchmark-link>\n  will be looking into it.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "sxjscience", "commentT": "2020-05-08T09:18:06Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/sxjscience>@sxjscience</denchmark-link>\n  <denchmark-link:https://github.com/yzhliu>@yzhliu</denchmark-link>\n  Are numpy array and mxnet array suppose to work together ?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "sxjscience", "commentT": "2020-05-08T16:49:10Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/BenjaminCHEN2016>@BenjaminCHEN2016</denchmark-link>\n  The problem is that it's a numpy scalar and should be treated similarly as python scalars. I just checked that Jax supports the following:\n import jax.numpy as np\n import numpy as onp\n a = onp.array(1)\n b = np.array(1)\n a\n Output:\n <denchmark-code>Out[17]: DeviceArray(2, dtype=int32)\n </denchmark-code>\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "sxjscience", "commentT": "2020-05-19T17:33:24Z", "comment_text": "\n \t\tclosed by <denchmark-link:https://github.com/apache/incubator-mxnet/pull/18313>#18313</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "b2144777b0b49e3e899f3f8af8afe760eaa9da3e", "commit_author": "Yijun Chen", "commitT": "2020-05-19 00:01:39-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "python\\mxnet\\numpy\\multiarray.py", "file_new_name": "python\\mxnet\\numpy\\multiarray.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226", "deleted_lines": null, "method_info": {"method_name": "wrap_mxnp_np_ufunc", "method_params": "func", "method_startline": "207", "method_endline": "226"}}, "hunk_1": {"Ismethod": 1, "added_lines": "222,223,224,225", "deleted_lines": null, "method_info": {"method_name": "wrap_mxnp_np_ufunc._wrap_mxnp_np_ufunc", "method_params": "x1,x2", "method_startline": "222", "method_endline": "225"}}, "hunk_2": {"Ismethod": 1, "added_lines": "280,281,282,283,284,285,286,288,289,290,301,316,317,318,319,320,321,322,323,324,325", "deleted_lines": "276", "method_info": {"method_name": "__array_ufunc__", "method_params": "self,ufunc,method,inputs,kwargs", "method_startline": "275", "method_endline": "329"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\python\\unittest\\test_numpy_op.py", "file_new_name": "tests\\python\\unittest\\test_numpy_op.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701", "deleted_lines": null, "method_info": {"method_name": "test_np_mixed_mxnp_op_funcs", "method_params": "", "method_startline": "2664", "method_endline": "2701"}}}}}}}