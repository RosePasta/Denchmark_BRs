{"BR": {"BR_id": "17179", "BR_author": "sxjscience", "BRopenT": "2019-12-26T21:23:03Z", "BRcloseT": "2020-04-29T23:28:49Z", "BR_text": {"BRsummary": "[Numpy] where does not support python scalar as the input", "BRdescription": "\n import mxnet as mx\n mx.npx.set_np()\n a = mx.np.sym.var('a')\n a = mx.sym.var('a').as_np_ndarray()\n mx.sym.np.where(a, a, 0)\n Error message:\n <denchmark-code>---------------------------------------------------------------------------\n AssertionError                            Traceback (most recent call last)\n <ipython-input-5-e7a6fe89b743> in <module>\n ----> 1 mx.sym.np.where(a, a, 0)\n \n ~/mxnet/python/mxnet/symbol/numpy/_symbol.py in where(condition, x, y)\n    5501 \n    5502     \"\"\"\n -> 5503     return _npi.where(condition, x, y, out=None)\n    5504 \n    5505 \n \n ~/mxnet/python/mxnet/symbol/register.py in where(condition, x, y, name, attr, out, **kwargs)\n \n AssertionError: Argument y must be Symbol instances, but got 0\n </denchmark-code>\n \n Also, the imperative case:\n import mxnet as mx\n mx.npx.set_np()\n mx.np.where(mx.np.ones((10, )), mx.np.ones((10, )), 0)\n Error message:\n <denchmark-code>AssertionError                            Traceback (most recent call last)\n <ipython-input-14-bdddf3065582> in <module>\n ----> 1 mx.np.where(mx.np.ones((10, )), mx.np.ones((10, )), 0)\n \n ~/mxnet/python/mxnet/numpy/multiarray.py in where(condition, x, y)\n    7996            [ 0.,  3., -1.]])\n    7997     \"\"\"\n -> 7998     return _mx_nd_np.where(condition, x, y)\n    7999 \n    8000 \n \n ~/mxnet/python/mxnet/ndarray/numpy/_op.py in where(condition, x, y)\n    6035         return nonzero(condition)\n    6036     else:\n -> 6037         return _npi.where(condition, x, y, out=None)\n    6038 \n    6039 \n \n ~/mxnet/python/mxnet/ndarray/register.py in where(condition, x, y, out, name, **kwargs)\n \n AssertionError: Argument y must have NDArray type, but got 0\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "sxjscience", "commentT": "2019-12-27T06:34:01Z", "comment_text": "\n \t\tI actually mentioned this problem in the PR, <denchmark-link:https://github.com/apache/incubator-mxnet/pull/16829#issuecomment-554489820>#16829 (comment)</denchmark-link>\n \n The author suggested that you should wrap the scalar with.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "sxjscience", "commentT": "2019-12-30T19:36:30Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/apeforest>@apeforest</denchmark-link>\n  assign [<denchmark-link:https://github.com/reminisce>@reminisce</denchmark-link>\n   ]\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "sxjscience", "commentT": "2019-12-31T04:54:26Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/xidulu>@xidulu</denchmark-link>\n  <denchmark-link:https://github.com/hgt312>@hgt312</denchmark-link>\n  In my use case, I'm using the symbolic interface so I cannot call .\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "sxjscience", "commentT": "2019-12-31T05:00:10Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/hgt312>@hgt312</denchmark-link>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "sxjscience", "commentT": "2019-12-31T06:34:53Z", "comment_text": "\n \t\tI will add the scalar version soon.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "sxjscience", "commentT": "2020-01-06T05:31:50Z", "comment_text": "\n \t\tIf both x and y are scalars, dtype of the output should be what? In official numpy, it may be int64 or float64 according to the inputs' type.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "sxjscience", "commentT": "2020-01-08T02:00:13Z", "comment_text": "\n \t\tAre we able to make it numpy compatible?\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "sxjscience", "commentT": "2020-04-29T23:28:49Z", "comment_text": "\n \t\tClosed by <denchmark-link:https://github.com/apache/incubator-mxnet/pull/17249>#17249</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "064decfca412c974b6fd797ade3b2b83ad74b783", "commit_author": "Huang, Guangtai", "commitT": "2020-02-11 11:21:29-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\mxnet\\ndarray\\numpy\\_op.py", "file_new_name": "python\\mxnet\\ndarray\\numpy\\_op.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "6731,6761,6762,6763,6764,6765,6766,6767,6768,6799,6807,6808,6809,6810,6811,6812,6813,6814,6815,6816,6817,6818,6819,6820,6821,6822", "deleted_lines": "6731,6791,6799", "method_info": {"method_name": "where", "method_params": "condition,x,y", "method_startline": "6731", "method_endline": "6822"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\mxnet\\numpy\\multiarray.py", "file_new_name": "python\\mxnet\\numpy\\multiarray.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "8870", "deleted_lines": "8870", "method_info": {"method_name": "where", "method_params": "condition,x,y", "method_startline": "8810", "method_endline": "8875"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\mxnet\\symbol\\numpy\\_symbol.py", "file_new_name": "python\\mxnet\\symbol\\numpy\\_symbol.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "6054,6055,6056,6057,6058,6059,6060,6061,6062,6063,6064,6065,6066,6067,6068,6069", "deleted_lines": "6054", "method_info": {"method_name": "where", "method_params": "condition,x,y", "method_startline": "6035", "method_endline": "6069"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 8, "file_old_name": "src\\operator\\numpy\\np_where_op-inl.h", "file_new_name": "src\\operator\\numpy\\np_where_op-inl.h", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "116,117,118,119", "deleted_lines": null, "method_info": {"method_name": "mxnet::op::numpy_where_scalar2_kernel::Map", "method_params": "i,req,out,cond,x,y", "method_startline": "116", "method_endline": "119"}}, "hunk_1": {"Ismethod": 1, "added_lines": "215", "deleted_lines": "169", "method_info": {"method_name": "mxnet::op::NumpyWhereOpBackward", "method_params": "attrs,ctx,inputs,req,outputs", "method_startline": "167", "method_endline": "268"}}, "hunk_2": {"Ismethod": 1, "added_lines": "56,57,58,59,60,61,62,63", "deleted_lines": null, "method_info": {"method_name": "mxnet::op::NumpyWhereScalar2Param::DMLC_DECLARE_PARAMETER", "method_params": "NumpyWhereScalar2Param", "method_startline": "56", "method_endline": "63"}}, "hunk_3": {"Ismethod": 1, "added_lines": "271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312", "deleted_lines": null, "method_info": {"method_name": "mxnet::op::NumpyWhereScalarOpForward", "method_params": "attrs,ctx,inputs,req,outputs", "method_startline": "271", "method_endline": "312"}}, "hunk_4": {"Ismethod": 1, "added_lines": "387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406", "deleted_lines": null, "method_info": {"method_name": "mxnet::op::NumpyWhereScalar2OpForward", "method_params": "attrs,ctx,inputs,req,outputs", "method_startline": "387", "method_endline": "406"}}, "hunk_5": {"Ismethod": 1, "added_lines": "315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384", "deleted_lines": null, "method_info": {"method_name": "mxnet::op::NumpyWhereScalarOpBackward", "method_params": "attrs,ctx,inputs,req,outputs", "method_startline": "315", "method_endline": "384"}}, "hunk_6": {"Ismethod": 1, "added_lines": "100,101,102,103,104,105,106,107,108,109,110,111", "deleted_lines": null, "method_info": {"method_name": "mxnet::op::numpy_where_scalar_kernel::Map", "method_params": "base,req,cstride,ystride,oshape,datac,datax,datay,out", "method_startline": "100", "method_endline": "111"}}, "hunk_7": {"Ismethod": 1, "added_lines": "47,48,49,50,51", "deleted_lines": null, "method_info": {"method_name": "mxnet::op::NumpyWhereScalarParam::DMLC_DECLARE_PARAMETER", "method_params": "NumpyWhereScalarParam", "method_startline": "47", "method_endline": "51"}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\operator\\numpy\\np_where_op.cc", "file_new_name": "src\\operator\\numpy\\np_where_op.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "78,79,80,81,82,83,84,85,86", "deleted_lines": null, "method_info": {"method_name": "mxnet::op::NumpyWhereScalarOpType", "method_params": "attrs,in_attrs,out_attrs", "method_startline": "78", "method_endline": "86"}}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\operator\\numpy\\np_where_op.cu", "file_new_name": "src\\operator\\numpy\\np_where_op.cu", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "37,38,39,40,41,42,43,44,45,46,47,48,49,50,51", "deleted_lines": null}}}}}}