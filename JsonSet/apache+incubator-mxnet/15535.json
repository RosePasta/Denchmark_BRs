{"BR": {"BR_id": "15535", "BR_author": "turtleizzy", "BRopenT": "2019-07-14T03:13:00Z", "BRcloseT": "2019-12-06T21:36:07Z", "BR_text": {"BRsummary": "mxnet.io.NDArrayIter does not properly function when len(data) * 2 &lt; batch_size and last_batch_handle='pad'", "BRdescription": "\n mxnet version: 1.4.0\n minimal steps to reproduce:\n <denchmark-code>data = mx.nd.arange(4)\n dtIter = mx.io.NDArrayIter(data, batch_size=9, last_batch_handle='pad')\n for i in dtIter:\n     print (i.data)\n </denchmark-code>\n \n <denchmark-code>IndexError                                Traceback (most recent call last)\n <ipython-input-76-d82503158b2b> in <module>\n ----> 1 for i in dtIter:\n       2     print (i.data)\n \n /usr/local/lib/python3.6/site-packages/mxnet/io/io.py in __next__(self)\n     226 \n     227     def __next__(self):\n --> 228         return self.next()\n     229 \n     230     def iter_next(self):\n \n /usr/local/lib/python3.6/site-packages/mxnet/io/io.py in next(self)\n     678         if not self.iter_next():\n     679             raise StopIteration\n --> 680         data = self.getdata()\n     681         label = self.getlabel()\n     682         # iter should stop when last batch is not complete\n \n /usr/local/lib/python3.6/site-packages/mxnet/io/io.py in getdata(self)\n     760     def getdata(self):\n     761         \"\"\"Get data.\"\"\"\n --> 762         return self._batchify(self.data)\n     763 \n     764     def getlabel(self):\n \n /usr/local/lib/python3.6/site-packages/mxnet/io/io.py in _batchify(self, data_source)\n     747             pad = self.batch_size - self.num_data + self.cursor\n     748             first_data = self._getdata(data_source, start=self.cursor)\n --> 749             second_data = self._getdata(data_source, end=pad)\n     750             return self._concat(first_data, second_data)\n     751         # normal case\n \n /usr/local/lib/python3.6/site-packages/mxnet/io/io.py in _getdata(self, data_source, start, end)\n     703                 list(self.idx[s]).index(i)\n     704                 for i in sorted(self.idx[s])\n --> 705             ]]) for x in data_source\n     706         ]\n     707 \n \n /usr/local/lib/python3.6/site-packages/mxnet/io/io.py in <listcomp>(.0)\n     703                 list(self.idx[s]).index(i)\n     704                 for i in sorted(self.idx[s])\n --> 705             ]]) for x in data_source\n     706         ]\n     707 \n \n /usr/local/lib/python3.6/site-packages/mxnet/ndarray/ndarray.py in __getitem__(self, key)\n     504         indexing_dispatch_code = _get_indexing_dispatch_code(key)\n     505         if indexing_dispatch_code == _NDARRAY_BASIC_INDEXING:\n --> 506             return self._get_nd_basic_indexing(key)\n     507         elif indexing_dispatch_code == _NDARRAY_ADVANCED_INDEXING:\n     508             return self._get_nd_advanced_indexing(key)\n \n /usr/local/lib/python3.6/site-packages/mxnet/ndarray/ndarray.py in _get_nd_basic_indexing(self, key)\n     785                 return op.slice(self, begin=(key.start,), end=(key.stop,), step=(key.step,))\n     786             elif key.start is not None or key.stop is not None:\n --> 787                 return self._slice(key.start, key.stop)\n     788             else:\n     789                 return self\n \n /usr/local/lib/python3.6/site-packages/mxnet/ndarray/ndarray.py in _slice(self, start, stop)\n     900         \"\"\"\n     901         handle = NDArrayHandle()\n --> 902         start, stop, _ = _get_index_range(start, stop, self.shape[0])\n     903 \n     904         check_call(_LIB.MXNDArraySlice(\n \n /usr/local/lib/python3.6/site-packages/mxnet/ndarray/ndarray.py in _get_index_range(start, stop, length, step)\n    2325             raise IndexError('Slicing stop %d exceeds limit of %d' % (stop-length, length))\n    2326     elif stop > length:\n -> 2327         raise IndexError('Slicing stop %d exceeds limit of %d' % (stop, length))\n    2328 \n    2329     return start, stop, step\n \n IndexError: Slicing stop 5 exceeds limit of 4\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "turtleizzy", "commentT": "2019-07-14T03:13:04Z", "comment_text": "\n \t\tHey, this is the MXNet Label Bot.\n Thank you for submitting the issue! I will try and suggest some labels so that the appropriate MXNet community members can help resolve it.\n Here are my recommended labels: Bug\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "turtleizzy", "commentT": "2019-07-14T13:17:12Z", "comment_text": "\n \t\tI was running your code, and it looks like last_batch_handle has nothing to do with the error. You'll get the same error whenever your batch size > 2 * len(data).\n data = mx.nd.arange(5)\n \n dtIter = mx.io.NDArrayIter(data, batch_size=11) # everything is fine for batch_size upto 10\n for i in dtIter:\n     print (i.data)\n prints:\n IndexError: Slicing stop 6 exceeds limit of 5\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "turtleizzy", "commentT": "2019-07-14T15:48:31Z", "comment_text": "\n \t\t\n I was running your code, and it looks like last_batch_handle has nothing to do with the error. You'll get the same error whenever your batch size > 2 * len(data).\n data = mx.nd.arange(5)\n \n dtIter = mx.io.NDArrayIter(data, batch_size=11) # everything is fine for batch_size upto 10\n for i in dtIter:\n     print (i.data)\n prints:\n IndexError: Slicing stop 6 exceeds limit of 5\n \n last_batch_handle='pad' does matter because the default value for last_batch_handle is 'pad' and all other options (roll_over and discard) does not result in exception.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "turtleizzy", "commentT": "2019-07-14T16:14:55Z", "comment_text": "\n \t\tOh man!! Sorry, I forgot to see what's the default.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "turtleizzy", "commentT": "2019-07-15T11:04:44Z", "comment_text": "\n \t\tPS: workaround is to pad manually.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "turtleizzy", "commentT": "2019-07-15T16:35:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mxnet-label-bot>@mxnet-label-bot</denchmark-link>\n  add [python, bug]\n \t\t"}}}, "commit": {"commit_id": "9c94fdbeb0cc39ea26aa191d33ca1f343cc5b30b", "commit_author": "Jake Lee", "commitT": "2019-12-06 13:36:06-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\mxnet\\io\\io.py", "file_new_name": "python\\mxnet\\io\\io.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "751,752,753,754,755,756,757,758,759", "deleted_lines": "751", "method_info": {"method_name": "_batchify", "method_params": "self,data_source", "method_startline": "730", "method_endline": "768"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\python\\unittest\\test_io.py", "file_new_name": "tests\\python\\unittest\\test_io.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "202,203,204,205,206", "deleted_lines": null, "method_info": {"method_name": "_test_corner_case", "method_params": "", "method_startline": "202", "method_endline": "206"}}, "hunk_1": {"Ismethod": 1, "added_lines": "230", "deleted_lines": null, "method_info": {"method_name": "test_NDArrayIter", "method_params": "", "method_startline": "209", "method_endline": "230"}}}}}}}