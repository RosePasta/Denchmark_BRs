{"BR": {"BR_id": "15062", "BR_author": "karan6181", "BRopenT": "2019-05-24T18:10:23Z", "BRcloseT": "2019-05-30T22:34:08Z", "BR_text": {"BRsummary": "Bug in BidirectionalCell for imperative mode when time_step is 1", "BRdescription": "\n The _reverse_sequences() method in ~/mxnet/gluon/rnn/rnn_cell.py gives unexpected output when the input is of single time_step with the imperative mode. Below is the example to demonstrate the issue:\n import mxnet as mx\n from mxnet import gluon\n \n def test_bidirectional_unroll_valid_length():\n     class BiLSTM(gluon.nn.HybridBlock):\n         def __init__(self, rnn_size, time_step, **kwargs):\n             super(BiLSTM, self).__init__(**kwargs)\n             self.time_step = time_step\n             with self.name_scope():\n                 self.bi_lstm = gluon.rnn.BidirectionalCell(\n                     gluon.rnn.LSTMCell(rnn_size, prefix='rnn_l0_'),\n                     gluon.rnn.LSTMCell(rnn_size, prefix='rnn_r0_'),\n                     output_prefix='lstm_bi_')\n \n         def hybrid_forward(self, F, inputs, valid_len):\n             outputs, states = self.bi_lstm.unroll(self.time_step, inputs, valid_length=valid_len, layout='NTC', merge_outputs=True)\n             return outputs, states\n \n     rnn_size, time_step = 100, 1\n     net = BiLSTM(rnn_size, time_step)\n     net.initialize()\n     # net.hybridize()\n     inputs_data = mx.nd.random.uniform(shape=(10, 1, 50))\n     valid_len = mx.nd.array([1]*10)\n     outputs, _ = net(inputs_data, valid_len)\n     assert outputs.shape == (10, 1, 200)\n \n \n test_bidirectional_unroll_valid_length()\n Below is the debugged output from _reverse_sequences() method\n >>> len(sequences) # Before reversing the input\n 1\n >>> sequences[0].shape # Before reversing the input\n (10, 50)\n >>> reversed_sequences.shape # After reversing the input\n (10, 50)\n >>> len(reversed_sequences) # After reversing the input\n 10\n \n # The correct output should be\n >>> len(reversed_sequences)\n 1\n reversed_sequences[0].shape\n (10, 50)\n The issue is not reproducible in symbolic mode(Please uncomment the  if you want to run it in symbolic mode). Also, the failure can only be seen in the nightly pip release due to the change made in this PR <denchmark-link:https://github.com/apache/incubator-mxnet/pull/13575>#13575</denchmark-link>\n .\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "karan6181", "commentT": "2019-05-24T18:10:30Z", "comment_text": "\n \t\tHey, this is the MXNet Label Bot.\n Thank you for submitting the issue! I will try and suggest some labels so that the appropriate MXNet community members can help resolve it.\n Here are my recommended labels: Bug\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "karan6181", "commentT": "2019-05-24T23:42:10Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/szha>@szha</denchmark-link>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "karan6181", "commentT": "2019-05-25T07:27:35Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mxnet-label-bot>@mxnet-label-bot</denchmark-link>\n  add[Bug, Gluon]\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "karan6181", "commentT": "2019-05-27T18:51:39Z", "comment_text": "\n \t\tThe problem is in the inconsistent behavior of split, where if the number of splits is 1 it returns a single NDArray instead of a list.\n \t\t"}}}, "commit": {"commit_id": "31438583d72dcd72bedb6e83a0884f53a9a8fe37", "commit_author": "Sheng Zha", "commitT": "2019-05-30 15:34:06-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\mxnet\\gluon\\rnn\\rnn_cell.py", "file_new_name": "python\\mxnet\\gluon\\rnn\\rnn_cell.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "117,118,119,120", "deleted_lines": "117", "method_info": {"method_name": "_reverse_sequences", "method_params": "sequences,unroll_step,valid_length", "method_startline": "105", "method_endline": "122"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "tests\\python\\unittest\\test_gluon_rnn.py", "file_new_name": "tests\\python\\unittest\\test_gluon_rnn.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "639,640,641,642,643,644,645,646", "deleted_lines": "639,640,641,642,643,644,645,646", "method_info": {"method_name": "test_bidirectional_unroll_valid_length.test_bidirectional_unroll_valid_length._check_bidirectional_unroll_valid_length.__init__", "method_params": "self,rnn_size,time_step,kwargs", "method_startline": "639", "method_endline": "646"}}, "hunk_1": {"Ismethod": 1, "added_lines": "650,651,652,653", "deleted_lines": "650,651,652,653", "method_info": {"method_name": "test_bidirectional_unroll_valid_length.hybrid_forward", "method_params": "self,F,inputs,valid_len", "method_startline": "650", "method_endline": "653"}}, "hunk_2": {"Ismethod": 1, "added_lines": "648,649,650,651", "deleted_lines": "648,649,650,651", "method_info": {"method_name": "test_bidirectional_unroll_valid_length.test_bidirectional_unroll_valid_length._check_bidirectional_unroll_valid_length.hybrid_forward", "method_params": "self,F,inputs,valid_len", "method_startline": "648", "method_endline": "651"}}, "hunk_3": {"Ismethod": 1, "added_lines": "637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663", "deleted_lines": "637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662", "method_info": {"method_name": "test_bidirectional_unroll_valid_length", "method_params": "", "method_startline": "636", "method_endline": "663"}}, "hunk_4": {"Ismethod": 1, "added_lines": "641,642,643,644,645,646,647,648", "deleted_lines": "641,642,643,644,645,646,647,648", "method_info": {"method_name": "test_bidirectional_unroll_valid_length.__init__", "method_params": "self,rnn_size,time_step,kwargs", "method_startline": "641", "method_endline": "648"}}, "hunk_5": {"Ismethod": 1, "added_lines": "637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660", "deleted_lines": "637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660", "method_info": {"method_name": "test_bidirectional_unroll_valid_length._check_bidirectional_unroll_valid_length", "method_params": "length", "method_startline": "637", "method_endline": "660"}}}}}}}