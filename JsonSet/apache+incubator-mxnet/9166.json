{"BR": {"BR_id": "9166", "BR_author": "tsutton", "BRopenT": "2017-12-21T19:53:11Z", "BRcloseT": "2019-03-08T03:29:32Z", "BR_text": {"BRsummary": "Segfault on ndarray with negative dimension i.e. mxnet.nx.zeros((-1,))", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n When trying to create an ndarray with a negative size in some dimension, I get a segmentation fault or bad_alloc error. I would have expected an exception with a useful message instead. (When executing in a python terminal, I get the bad_alloc error; when I'm executing in Jupyter notebook it gives a segfault).\n <denchmark-h:h2>Environment info (Required)</denchmark-h>\n \n ----------Python Info----------\n Version      : 3.6.3\n Compiler     : GCC 7.2.0\n Build        : ('default', 'Oct  3 2017 21:45:48')\n Arch         : ('64bit', 'ELF')\n ------------Pip Info-----------\n Version      : 9.0.1\n Directory    : /usr/lib/python3/dist-packages/pip\n ----------MXNet Info-----------\n Version      : 1.0.0\n Directory    : /usr/local/lib/python3.6/dist-packages/mxnet\n Commit Hash   : <denchmark-link:https://github.com/apache/incubator-mxnet/commit/0f05c65492e38f89012e5595c6d60bb67e2d418f>0f05c65</denchmark-link>\n \n ----------System Info----------\n Platform     : Linux-4.13.0-19-generic-x86_64-with-Ubuntu-17.10-artful\n system       : Linux\n node         : adams\n release      : 4.13.0-19-generic\n version      : <denchmark-link:https://github.com/apache/incubator-mxnet/pull/22>#22</denchmark-link>\n -Ubuntu SMP Mon Dec 4 11:58:07 UTC 2017\n ----------Hardware Info----------\n machine      : x86_64\n processor    : x86_64\n Architecture:        x86_64\n CPU op-mode(s):      32-bit, 64-bit\n Byte Order:          Little Endian\n CPU(s):              4\n On-line CPU(s) list: 0-3\n Thread(s) per core:  2\n Core(s) per socket:  2\n Socket(s):           1\n NUMA node(s):        1\n Vendor ID:           GenuineIntel\n CPU family:          6\n Model:               78\n Model name:          Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz\n Stepping:            3\n CPU MHz:             2800.000\n CPU max MHz:         3400.0000\n CPU min MHz:         400.0000\n BogoMIPS:            5616.00\n Virtualization:      VT-x\n L1d cache:           32K\n L1i cache:           32K\n L2 cache:            256K\n L3 cache:            4096K\n NUMA node0 CPU(s):   0-3\n Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf tsc_known_freq pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb intel_pt tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx rdseed adx smap clflushopt xsaveopt xsavec xgetbv1 xsaves dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp\n ----------Network Test----------\n Setting timeout: 10\n Timing for MXNet: <denchmark-link:https://github.com/apache/incubator-mxnet>https://github.com/apache/incubator-mxnet</denchmark-link>\n , DNS: 0.0007 sec, LOAD: 0.6986 sec.\n Timing for Gluon Tutorial(en): <denchmark-link:http://gluon.mxnet.io>http://gluon.mxnet.io</denchmark-link>\n , DNS: 0.0022 sec, LOAD: 0.0343 sec.\n Timing for Gluon Tutorial(cn): <denchmark-link:https://zh.gluon.ai>https://zh.gluon.ai</denchmark-link>\n , DNS: 0.0030 sec, LOAD: 0.0688 sec.\n Timing for FashionMNIST: <denchmark-link:https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/dataset/fashion-mnist/train-labels-idx1-ubyte.gz>https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/dataset/fashion-mnist/train-labels-idx1-ubyte.gz</denchmark-link>\n , DNS: 0.0008 sec, LOAD: 0.2045 sec.\n Timing for PYPI: <denchmark-link:https://pypi.python.org/pypi/pip>https://pypi.python.org/pypi/pip</denchmark-link>\n , DNS: 0.0326 sec, LOAD: 0.0717 sec.\n Timing for Conda: <denchmark-link:https://repo.continuum.io/pkgs/free/>https://repo.continuum.io/pkgs/free/</denchmark-link>\n , DNS: 0.0013 sec, LOAD: 0.0765 sec.\n <denchmark-h:h2>Build info (Required if built from source)</denchmark-h>\n \n Downloaded via \"pip3 install mxnet\".\n <denchmark-h:h2>Minimum reproducible example</denchmark-h>\n \n <denchmark-code>Python 3.6.3 (default, Oct  3 2017, 21:45:48) \n [GCC 7.2.0] on linux\n Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n >>> from mxnet import nd\n >>> nd.zeros((-1,))\n terminate called after throwing an instance of 'std::bad_alloc'\n   what():  std::bad_alloc\n Aborted (core dumped)\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "tsutton", "commentT": "2018-10-17T04:31:15Z", "comment_text": "\n \t\tIs there any use case of trying to create an NDArray of negative size ?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "tsutton", "commentT": "2018-10-17T18:18:17Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/Vikas89>@Vikas89</denchmark-link>\n  shape -1 means MXNet will automatically infer the shape.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "tsutton", "commentT": "2018-10-17T18:19:43Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/nswamy>@nswamy</denchmark-link>\n  Please add label [NDArray] Thanks\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "tsutton", "commentT": "2019-03-06T21:16:10Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/apeforest>@apeforest</denchmark-link>\n  this is not a bug but a case of improper exception handling. Please update the labels.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "tsutton", "commentT": "2019-03-06T21:18:48Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/anirudhacharya>@anirudhacharya</denchmark-link>\n  This is causing a core dump. I think it's a bug that needs to be fixed.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "tsutton", "commentT": "2019-03-06T21:26:04Z", "comment_text": "\n \t\twith the latest version of mxnet, the above command neither causes core dump or Segmentation fault.\n When I try to pass -1 as shape in python2 and python3, I get the following stack trace.\n <denchmark-code>Traceback (most recent call last):\n   File \"<stdin>\", line 1, in <module>\n   File \"/usr/local/lib/python2.7/dist-packages/mxnet-1.5.0-py2.7.egg/mxnet/ndarray/utils.py\", line 67, in zeros\n     return _zeros_ndarray(shape, ctx, dtype, **kwargs)\n   File \"/usr/local/lib/python2.7/dist-packages/mxnet-1.5.0-py2.7.egg/mxnet/ndarray/ndarray.py\", line 3822, in zeros\n     return _internal._zeros(shape=shape, ctx=ctx, dtype=dtype, **kwargs)\n   File \"<string>\", line 34, in _zeros\n   File \"/usr/local/lib/python2.7/dist-packages/mxnet-1.5.0-py2.7.egg/mxnet/_ctypes/ndarray.py\", line 92, in _imperative_invoke\n     ctypes.byref(out_stypes)))\n   File \"/usr/local/lib/python2.7/dist-packages/mxnet-1.5.0-py2.7.egg/mxnet/base.py\", line 252, in check_call\n     raise MXNetError(py_str(_LIB.MXGetLastError()))\n mxnet.base.MXNetError: [21:21:58] src/storage/./cpu_device_storage.h:74: Failed to allocate CPU Memory\n \n Stack trace returned 10 entries:\n [bt] (0) /usr/local/lib/python2.7/dist-packages/mxnet-1.5.0-py2.7.egg/mxnet/libmxnet.so(dmlc::StackTrace[abi:cxx11]()+0x1bc) [0x7f761aea978c]\n [bt] (1) /usr/local/lib/python2.7/dist-packages/mxnet-1.5.0-py2.7.egg/mxnet/libmxnet.so(dmlc::LogMessageFatal::~LogMessageFatal()+0x28) [0x7f761aeaab08]\n [bt] (2) /usr/local/lib/python2.7/dist-packages/mxnet-1.5.0-py2.7.egg/mxnet/libmxnet.so(+0x396d71d) [0x7f761e26e71d]\n [bt] (3) /usr/local/lib/python2.7/dist-packages/mxnet-1.5.0-py2.7.egg/mxnet/libmxnet.so(mxnet::storage::NaiveStorageManager<mxnet::storage::CPUDeviceStorage>::Alloc(mxnet::Storage::Handle*)+0xd) [0x7f761e26e74d]\n [bt] (4) /usr/local/lib/python2.7/dist-packages/mxnet-1.5.0-py2.7.egg/mxnet/libmxnet.so(mxnet::StorageImpl::Alloc(mxnet::Storage::Handle*)+0x5b) [0x7f761e269efb]\n [bt] (5) /usr/local/lib/python2.7/dist-packages/mxnet-1.5.0-py2.7.egg/mxnet/libmxnet.so(mxnet::NDArray::CheckAndAlloc() const+0x98d) [0x7f761aeab59d]\n [bt] (6) /usr/local/lib/python2.7/dist-packages/mxnet-1.5.0-py2.7.egg/mxnet/libmxnet.so(mxnet::imperative::PushFCompute(std::function<void (nnvm::NodeAttrs const&, mxnet::OpContext const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&, std::vector<mxnet::OpReqType, std::allocator<mxnet::OpReqType> > const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&)> const&, nnvm::Op const*, nnvm::NodeAttrs const&, mxnet::Context const&, std::vector<mxnet::engine::Var*, std::allocator<mxnet::engine::Var*> > const&, std::vector<mxnet::engine::Var*, std::allocator<mxnet::engine::Var*> > const&, std::vector<mxnet::Resource, std::allocator<mxnet::Resource> > const&, std::vector<mxnet::NDArray*, std::allocator<mxnet::NDArray*> > const&, std::vector<mxnet::NDArray*, std::allocator<mxnet::NDArray*> > const&, std::vector<unsigned int, std::allocator<unsigned int> > const&, std::vector<mxnet::OpReqType, std::allocator<mxnet::OpReqType> > const&)::{lambda(mxnet::RunContext)#1}::operator()(mxnet::RunContext) const+0xd88) [0x7f761db1a308]\n [bt] (7) /usr/local/lib/python2.7/dist-packages/mxnet-1.5.0-py2.7.egg/mxnet/libmxnet.so(std::_Function_handler<void (mxnet::RunContext), mxnet::imperative::PushFCompute(std::function<void (nnvm::NodeAttrs const&, mxnet::OpContext const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&, std::vector<mxnet::OpReqType, std::allocator<mxnet::OpReqType> > const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&)> const&, nnvm::Op const*, nnvm::NodeAttrs const&, mxnet::Context const&, std::vector<mxnet::engine::Var*, std::allocator<mxnet::engine::Var*> > const&, std::vector<mxnet::engine::Var*, std::allocator<mxnet::engine::Var*> > const&, std::vector<mxnet::Resource, std::allocator<mxnet::Resource> > const&, std::vector<mxnet::NDArray*, std::allocator<mxnet::NDArray*> > const&, std::vector<mxnet::NDArray*, std::allocator<mxnet::NDArray*> > const&, std::vector<unsigned int, std::allocator<unsigned int> > const&, std::vector<mxnet::OpReqType, std::allocator<mxnet::OpReqType> > const&)::{lambda(mxnet::RunContext)#1}>::_M_invoke(std::_Any_data const&, mxnet::RunContext&&)+0x17) [0x7f761db1a9c7]\n [bt] (8) /usr/local/lib/python2.7/dist-packages/mxnet-1.5.0-py2.7.egg/mxnet/libmxnet.so(std::_Function_handler<void (mxnet::RunContext, mxnet::engine::CallbackOnComplete), mxnet::Engine::PushSync(std::function<void (mxnet::RunContext)>, mxnet::Context, std::vector<mxnet::engine::Var*, std::allocator<mxnet::engine::Var*> > const&, std::vector<mxnet::engine::Var*, std::allocator<mxnet::engine::Var*> > const&, mxnet::FnProperty, int, char const*)::{lambda(mxnet::RunContext, mxnet::engine::CallbackOnComplete)#1}>::_M_invoke(std::_Any_data const&, mxnet::RunContext&&, mxnet::engine::CallbackOnComplete&&)+0x5e) [0x7f761da9eb8e]\n [bt] (9) /usr/local/lib/python2.7/dist-packages/mxnet-1.5.0-py2.7.egg/mxnet/libmxnet.so(mxnet::engine::NaiveEngine::PushAsync(std::function<void (mxnet::RunContext, mxnet::engine::CallbackOnComplete)>, mxnet::Context, std::vector<mxnet::engine::Var*, std::allocator<mxnet::engine::Var*> > const&, std::vector<mxnet::engine::Var*, std::allocator<mxnet::engine::Var*> > const&, mxnet::FnProperty, int, char const*, bool)+0x20c) [0x7f761e24393c]\n </denchmark-code>\n \n Based on this, I think this issue can be closed.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "tsutton", "commentT": "2019-03-06T21:29:27Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/anirudhacharya>@anirudhacharya</denchmark-link>\n  Thanks for checking this. Could you please help to update the exception with more meaningful message? Ideally, the user should know that negative number should not be used as dimension in this command.\n \t\t"}}}, "commit": {"commit_id": "30b1cbc1d862f8c5c1f91d0a9f048aef5771f9de", "commit_author": "Anirudh", "commitT": "2019-03-07 19:29:32-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\operator\\tensor\\init_op.h", "file_new_name": "src\\operator\\tensor\\init_op.h", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "217,218,219,220,221", "deleted_lines": null, "method_info": {"method_name": "mxnet::op::InitShape", "method_params": "attrs,in_attrs,out_attrs", "method_startline": "210", "method_endline": "224"}}}}}}}