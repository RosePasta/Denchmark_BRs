{"BR": {"BR_id": "123", "BR_author": "eLvErDe", "BRopenT": "2017-09-13T12:02:12Z", "BRcloseT": "2017-10-27T22:20:34Z", "BR_text": {"BRsummary": "test_inner_product_backward_data fails with \"unknown file: Failure\" error", "BRdescription": "\n <denchmark-code>      Start 15: test_pooling_forward\n 15/28 Test #15: test_pooling_forward .......................   Passed   12.64 sec\n       Start 16: test_pooling_backward\n 16/28 Test #16: test_pooling_backward ......................   Passed   14.82 sec\n       Start 17: test_batch_normalization\n 17/28 Test #17: test_batch_normalization ...................   Passed   59.30 sec\n       Start 18: test_inner_product_forward\n 18/28 Test #18: test_inner_product_forward .................   Passed    0.13 sec\n       Start 19: test_inner_product_backward_data\n 19/28 Test #19: test_inner_product_backward_data ...........***Failed    0.01 sec\n [==========] Running 5 tests from 1 test case.\n [----------] Global test environment set-up.\n [----------] 5 tests from TestInnerProductBackwardData/inner_product_test_float\n [ RUN      ] TestInnerProductBackwardData/inner_product_test_float.TestsInnerProduct/0\n unknown file: Failure\n C++ exception with description \"std::exception\" thrown in SetUp().\n [  FAILED  ] TestInnerProductBackwardData/inner_product_test_float.TestsInnerProduct/0, where GetParam() = 36-byte object <01-00 00-00 05-00 00-00 0C-00 00-00 04-00 00-00 02-00 00-00 20-00 00-00 30-00 00-00 06-00 00-00 06-00 00-00> (1 ms)\n [ RUN      ] TestInnerProductBackwardData/inner_product_test_float.TestsInnerProduct/1\n unknown file: Failure\n C++ exception with description \"std::exception\" thrown in SetUp().\n [  FAILED  ] TestInnerProductBackwardData/inner_product_test_float.TestsInnerProduct/1, where GetParam() = 36-byte object <01-00 00-00 08-00 00-00 08-00 00-00 04-00 00-00 02-00 00-00 20-00 00-00 30-00 00-00 06-00 00-00 06-00 00-00> (1 ms)\n [ RUN      ] TestInnerProductBackwardData/inner_product_test_float.TestsInnerProduct/2\n unknown file: Failure\n C++ exception with description \"std::exception\" thrown in SetUp().\n [  FAILED  ] TestInnerProductBackwardData/inner_product_test_float.TestsInnerProduct/2, where GetParam() = 36-byte object <01-00 00-00 09-00 00-00 09-00 00-00 04-00 00-00 02-00 00-00 20-00 00-00 30-00 00-00 06-00 00-00 06-00 00-00> (0 ms)\n [ RUN      ] TestInnerProductBackwardData/inner_product_test_float.TestsInnerProduct/3\n unknown file: Failure\n C++ exception with description \"std::exception\" thrown in SetUp().\n [  FAILED  ] TestInnerProductBackwardData/inner_product_test_float.TestsInnerProduct/3, where GetParam() = 36-byte object <01-00 00-00 04-00 00-00 0A-00 00-00 04-00 00-00 02-00 00-00 20-00 00-00 80-04 00-00 01-00 00-00 01-00 00-00> (1 ms)\n [ RUN      ] TestInnerProductBackwardData/inner_product_test_float.TestsInnerProduct/4\n unknown file: Failure\n C++ exception with description \"std::exception\" thrown in SetUp().\n [  FAILED  ] TestInnerProductBackwardData/inner_product_test_float.TestsInnerProduct/4, where GetParam() = 36-byte object <01-00 00-00 04-00 00-00 0A-00 00-00 04-00 00-00 02-00 00-00 02-00 00-00 04-00 00-00 01-00 00-00 01-00 00-00> (0 ms)\n [----------] 5 tests from TestInnerProductBackwardData/inner_product_test_float (3 ms total)\n \n [----------] Global test environment tear-down\n [==========] 5 tests from 1 test case ran. (3 ms total)\n [  PASSED  ] 0 tests.\n [  FAILED  ] 5 tests, listed below:\n [  FAILED  ] TestInnerProductBackwardData/inner_product_test_float.TestsInnerProduct/0, where GetParam() = 36-byte object <01-00 00-00 05-00 00-00 0C-00 00-00 04-00 00-00 02-00 00-00 20-00 00-00 30-00 00-00 06-00 00-00 06-00 00-00>\n [  FAILED  ] TestInnerProductBackwardData/inner_product_test_float.TestsInnerProduct/1, where GetParam() = 36-byte object <01-00 00-00 08-00 00-00 08-00 00-00 04-00 00-00 02-00 00-00 20-00 00-00 30-00 00-00 06-00 00-00 06-00 00-00>\n [  FAILED  ] TestInnerProductBackwardData/inner_product_test_float.TestsInnerProduct/2, where GetParam() = 36-byte object <01-00 00-00 09-00 00-00 09-00 00-00 04-00 00-00 02-00 00-00 20-00 00-00 30-00 00-00 06-00 00-00 06-00 00-00>\n [  FAILED  ] TestInnerProductBackwardData/inner_product_test_float.TestsInnerProduct/3, where GetParam() = 36-byte object <01-00 00-00 04-00 00-00 0A-00 00-00 04-00 00-00 02-00 00-00 20-00 00-00 80-04 00-00 01-00 00-00 01-00 00-00>\n [  FAILED  ] TestInnerProductBackwardData/inner_product_test_float.TestsInnerProduct/4, where GetParam() = 36-byte object <01-00 00-00 04-00 00-00 0A-00 00-00 04-00 00-00 02-00 00-00 02-00 00-00 04-00 00-00 01-00 00-00 01-00 00-00>\n \n  5 FAILED TESTS\n \n       Start 20: test_inner_product_backward_weights\n 20/28 Test #20: test_inner_product_backward_weights ........   Passed    0.69 sec\n       Start 21: test_convolution_format_any\n 21/28 Test #21: test_convolution_format_any ................   Passed    0.00 sec\n       Start 22: test_convolution_forward_f32\n 22/28 Test #22: test_convolution_forward_f32 ...............   Passed  330.63 sec\n       Start 23: test_convolution_forward_s16s16s32\n 23/28 Test #23: test_convolution_forward_s16s16s32 .........   Passed  398.90 sec\n       Start 24: test_convolution_relu_forward_f32\n 24/28 Test #24: test_convolution_relu_forward_f32 ..........   Passed   74.53 sec\n       Start 25: test_convolution_relu_forward_s16s16s32\n 25/28 Test #25: test_convolution_relu_forward_s16s16s32 ....   Passed   40.44 sec\n       Start 26: test_convolution_backward_data_f32\n 26/28 Test #26: test_convolution_backward_data_f32 .........   Passed   32.14 sec\n       Start 27: test_convolution_backward_data_s16s16s32\n 27/28 Test #27: test_convolution_backward_data_s16s16s32 ...   Passed   35.99 sec\n       Start 28: test_convolution_backward_weights\n 28/28 Test #28: test_convolution_backward_weights ..........   Passed   41.43 sec\n \n 96% tests passed, 1 tests failed out of 28\n \n Total Test time (real) = 1271.38 sec\n \n The following tests FAILED:\n \t 19 - test_inner_product_backward_data (Failed)\n </denchmark-code>\n \n Latest GIT master on Debian Stretch,\n I'm available to provide more test or information, feel free to ask.\n Best regards, Adam.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "eLvErDe", "commentT": "2017-09-13T17:14:42Z", "comment_text": "\n \t\tHi Adam, can you please share\n \n lscpu output\n compiler version\n cmake command line\n MKLROOT value if used\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "eLvErDe", "commentT": "2017-09-13T17:55:11Z", "comment_text": "\n \t\tSure, are you still around ? I did this during the day on my laptop, so I'll first try to reproduce on my home computer if you don't mind.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "eLvErDe", "commentT": "2017-09-13T18:21:31Z", "comment_text": "\n \t\tOkay, I'm doing more test and I guess I can tell you more:\n It seems to occurs only when buuilding without the non-free MKL library\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "eLvErDe", "commentT": "2017-09-13T18:39:50Z", "comment_text": "\n \t\tPlease find attached the complete build log (yes I'm working on a Debian package building both free and non-free flavors, let me know if interrested for further discussion):\n <denchmark-link:https://github.com/01org/mkl-dnn/files/1300437/mkl-dnn_0.10.20170913.b01e3a5-1_amd64.build.txt>mkl-dnn_0.10+20170913.b01e3a5-1_amd64.build.txt</denchmark-link>\n \n lspcu:\n <denchmark-code>Architecture:          x86_64\n CPU op-mode(s):        32-bit, 64-bit\n Byte Order:            Little Endian\n CPU(s):                4\n On-line CPU(s) list:   0-3\n Thread(s) per core:    1\n Core(s) per socket:    4\n Socket(s):             1\n NUMA node(s):          1\n Vendor ID:             GenuineIntel\n CPU family:            6\n Model:                 42\n Model name:            Intel(R) Core(TM) i5-2400 CPU @ 3.10GHz\n Stepping:              7\n CPU MHz:               3170.385\n CPU max MHz:           3400.0000\n CPU min MHz:           1600.0000\n BogoMIPS:              6219.89\n Virtualization:        VT-x\n L1d cache:             32K\n L1i cache:             32K\n L2 cache:              256K\n L3 cache:              6144K\n NUMA node0 CPU(s):     0-3\n Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm epb tpr_shadow vnmi flexpriority ept vpid xsaveopt dtherm ida arat pln pts\n </denchmark-code>\n \n GCC:\n <denchmark-code>gcc (Debian 7.2.0-4) 7.2.0\n </denchmark-code>\n \n Failing on my laptop too, with older i5 dual core and Debian Stretch (GCC 6 if I remember correctly)\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "eLvErDe", "commentT": "2017-09-14T21:47:13Z", "comment_text": "\n \t\tI reproduced this issue on Intel AVX based system when Intel MKL-DNN is built without binary dependency. This indicates an issue in reference implementation of InnerProduct. Everything works correctly on Intel AVX2 or Intel AVX512 systems where we have optimized GEMM implementation or when Intel MKL-DNN is built with binary dependency.\n Clarification on Intel MKL status: It's free (as in \"free beer\"), but not open source.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "eLvErDe", "commentT": "2017-09-14T22:02:13Z", "comment_text": "\n \t\tIndeed, I can confirm it's related to older CPU. I just received my new Intel 6900K and tests runs flawlessly.\n I can also confirm these two computers are AVX1 only.\n Clarifition on Debian behalf, it's either free software, or non-free ;-)\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "eLvErDe", "commentT": "2017-09-14T23:03:20Z", "comment_text": "\n \t\tWe'll squash it. Glad it's not blocking anything now.\n Fair enough) For Intel AVX2 and beyond the library will run fast without binary dependency, so no need for 'non-free' component there.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "eLvErDe", "commentT": "2017-09-14T23:09:59Z", "comment_text": "\n \t\tGood to hear, I was planning to make some tensorflow benchmarks anyway.\n GTX1080 is still wayyy faster than any CPU but the MKL built variant is on its way and I should be able to get some numbers next week.\n Btw, if's you're interested in Debian/Ubuntu packaging, mkl-dnn is available here:\n <denchmark-link:http://packages.le-vert.net/tensorflow/debian/pool-stretch/mkl-dnn/>http://packages.le-vert.net/tensorflow/debian/pool-stretch/mkl-dnn/</denchmark-link>\n \n Also built for Jessie and Ubuntu Xenial, but what's really matters is that the source package is available too, so it can be built for any distribution.\n Regards,  Adam.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "eLvErDe", "commentT": "2017-09-21T14:55:28Z", "comment_text": "\n \t\tThat's pretty cool. There's one caveat related to threading that affects Intel MKL-DNN binary distribution and need to be taken into account in the packages. The library relies on OpenMP and when it's build with Intel MKL binary dependency (the \"non-free\" version) it will link with libiomp5. This might be the problem for applications that are built with GCC and use OpenMP runtime, as explained in <denchmark-link:https://github.com/01org/mkl-dnn#linking-your-application>linking instructions</denchmark-link>\n . To make the binary distribution complete a version of non-free package with libgomp is probably necessary.\n \t\t"}}}, "commit": {"commit_id": "0699ddcc42950c5e62f79b83a2328390796d00cb", "commit_author": "Fomenko, Evarist M", "commitT": "2017-10-27 07:10:30+00:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\cpu\\ref_inner_product.hpp", "file_new_name": "src\\cpu\\ref_inner_product.hpp", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "104,107", "deleted_lines": "104,107", "method_info": {"method_name": "mkldnn::impl::cpu::ref_inner_product_bwd_data_t::pd_t::init", "method_params": "", "method_startline": "97", "method_endline": "109"}}}}}}}