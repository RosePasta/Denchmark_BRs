{"BR": {"BR_id": "4739", "BR_author": "MichalMalyska", "BRopenT": "2020-10-19T23:30:31Z", "BRcloseT": "2020-11-05T23:50:04Z", "BR_text": {"BRsummary": "Potential bug: The maxpool in cnn_encoder can be triggered by pad tokens.", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n When using a text_field_embedder -> cnn_encoder (without seq2seq_encoder), the output of the embedder (and mask) get fed directly into the cnn_encoder. The pad tokens will get masked (set to 0), but it's still possible that after applying the mask followed by the CNN, the PAD tokens are those with highest activations. This could lead to the same exact datapoint getting different predictions if's part of a batch vs single prediction.\n <denchmark-h:h2>Related issues or possible duplicates</denchmark-h>\n \n \n None\n \n <denchmark-h:h2>Environment</denchmark-h>\n \n OS:  NA\n Python version: NA\n <denchmark-h:h2>Steps to reproduce</denchmark-h>\n \n This can be reproduced by replacing\n \n \n \n allennlp/allennlp/modules/seq2vec_encoders/cnn_encoder.py\n \n \n          Line 113\n       in\n       00bb6c5\n \n \n \n \n \n \n  filter_outputs.append(self._activation(convolution_layer(tokens)).max(dim=2)[0]) \n \n \n \n \n \n <denchmark-code>filter_outputs.append(self._activation(convolution_layer(tokens)).max(dim=2)[0])\n </denchmark-code>\n \n with\n <denchmark-code>activated_outputs, max_indices = self._activation(convolution_layer(tokens)).max(dim=2)\n </denchmark-code>\n \n and checking the indices for the same example inside of a batch vs unpadded.\n <denchmark-h:h2>Possible solution:</denchmark-h>\n \n We could resolve this by adding a large negative value to all CNN outputs for masked tokens, similarly to what they do in the transformers library (<denchmark-link:https://github.com/huggingface/transformers/issues/542>huggingface/transformers#542</denchmark-link>\n , <denchmark-link:https://github.com/huggingface/transformers/blob/c912ba5f69a47396244c64deada5c2b8a258e2b8/src/transformers/modeling_bert.py#L262>https://github.com/huggingface/transformers/blob/c912ba5f69a47396244c64deada5c2b8a258e2b8/src/transformers/modeling_bert.py#L262</denchmark-link>\n ), but I have not been able to figure out how to do this efficiently.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "MichalMalyska", "commentT": "2020-10-21T14:24:54Z", "comment_text": "\n \t\tI created a google collab notebook that showcases how the problem arises and potential solution:\n <denchmark-link:https://colab.research.google.com/drive/1i73ZCEdPGRjS_hKNlrqHBklITME2hGKL?usp=sharing>https://colab.research.google.com/drive/1i73ZCEdPGRjS_hKNlrqHBklITME2hGKL?usp=sharing</denchmark-link>\n \n The solution I created creates an additive mask with large negative values for all filter activations that involved a pad token anywhere. It is a bit clunky so I would appreciate any ideas on how to make this more readable / efficient before creating a PR to fix the bug.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "MichalMalyska", "commentT": "2020-10-21T18:05:28Z", "comment_text": "\n \t\tThanks for the detailed report <denchmark-link:https://github.com/MichalMalyska>@MichalMalyska</denchmark-link>\n . I'll take a look at this soon.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "MichalMalyska", "commentT": "2020-10-21T18:25:47Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/MichalMalyska>@MichalMalyska</denchmark-link>\n  It seems like you have a reasonable solution, would you mind opening up a PR with your fix?\n By the way, you can utilize allennlp.nn.util.min_value_of_dtype() to get an appropriate large negative number for the masked values instead of always using 10e-5.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "MichalMalyska", "commentT": "2020-10-21T19:04:29Z", "comment_text": "\n \t\tYeah, I'll make a PR + some tests on the new seq2vec to ensure the batched and non-batched predictions have the same results. Similar tests are probably in order for other seq2vec encoders that don't use the pack_padded_sequence and pad_packed_sequence methods, and for potentially seq2seq just to ensure masking is actually working as intended.\n There is one design decision that needs to be made:\n Since the approach requires a mask to be not none, we can either:\n \n create a new one of all ones at the start if the original one is None\n Wrap all of this in an if statement that runs the old version of code if mask is None and the new one otherwise.\n \n I am partial to just creating a mask tensor of all True, since it seems much more elegant and doesn't increase the code complexity but it adds memory overhead.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "MichalMalyska", "commentT": "2020-10-21T20:20:12Z", "comment_text": "\n \t\tIf creating a mask of all ones significantly reduces the complexity, then I'm for it. It should be rare that mask is actually None, so I'm not too worried about the performance penalty.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "MichalMalyska", "commentT": "2020-11-05T16:38:03Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/epwalsh>@epwalsh</denchmark-link>\n  this is just a friendly ping to make sure you haven't forgotten about this issue \n \t\t"}}}, "commit": {"commit_id": "23f0a8a65007670d07d99a2f666c52fbf881bd07", "commit_author": "Michal Malyska", "commitT": "2020-11-05 15:50:03-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "CHANGELOG.md", "file_new_name": "CHANGELOG.md", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "127", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "allennlp\\modules\\seq2vec_encoders\\cnn_encoder.py", "file_new_name": "allennlp\\modules\\seq2vec_encoders\\cnn_encoder.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "98,99,100,109,110,114,115,116,117,118,119,121,122,123,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,158", "deleted_lines": "105,106,113", "method_info": {"method_name": "forward", "method_params": "self,Tensor,BoolTensor", "method_startline": "95", "method_endline": "163"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\modules\\seq2vec_encoders\\cnn_encoder_test.py", "file_new_name": "tests\\modules\\seq2vec_encoders\\cnn_encoder_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70", "deleted_lines": null, "method_info": {"method_name": "test_forward_respects_masking", "method_params": "self", "method_startline": "50", "method_endline": "70"}}}}}}}