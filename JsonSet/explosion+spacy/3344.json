{"BR": {"BR_id": "3344", "BR_author": "RonRademaker", "BRopenT": "2019-02-27T16:39:52Z", "BRcloseT": "2019-03-10T15:01:59Z", "BR_text": {"BRsummary": "parser.pipe() skips examples when batch_size &lt; 4", "BRdescription": "\n <denchmark-h:h2>How to reproduce the behaviour</denchmark-h>\n \n Hi,\n When evaluating the space EntityRecognizer I'm running into performance issues. I use \u00b130 custom entities with about \u00b170000 examples. When running this in batches on a V100 GPU (batch size of \u00b116000) one epoch takes about 1 minute and 20 seconds. After that I want to evaluate both my training and test set to gain insight in what's happening. Obviously, this means I need to run all examples through the model, I use the nlp.pipe(samples) structure to do this with a large batch size and no limits on n_threads. Still, this process takes about 8 minutes on the same machine. I think this is very very weird as I don't see how it makes sense that a forward prop with a backprop can be a magnitude faster than just a forward prop. This is why I classify this a but, sorry if it's not and I'm doing something stupid.\n Example code:\n <denchmark-code>counter = 0\n for doc in nlp.pipe(texts, batch_size=16384):\n     counter = counter + 1 # Noop to make sure the inside of my loop is not the bottleneck\n </denchmark-code>\n \n I tried other batch sizes (anything from 24 to 218) but found no significant difference. Also tried explicit n_threads, but it gives similar results. Using nlp.pipe over looping over example by example did speed up by a factor 2.\n <denchmark-h:h2>Your Environment</denchmark-h>\n \n \n Operating System: Ubuntu (AWS deep learning AMI, p3.2xlarge)\n Python Version Used: 3.6.5\n spaCy Version Used: 2.0.18\n Environment Information: Tesla V100 GPU with 16GB RAM\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "RonRademaker", "commentT": "2019-02-27T20:10:48Z", "comment_text": "\n \t\tCan you try again on spacy-nightly? There's some weirdness with the batch sizing in the v2.0 versions. v2.1 should be out soon.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "RonRademaker", "commentT": "2019-02-28T10:15:17Z", "comment_text": "\n \t\tThanks, I tried the nightly version but it looks like entity training broke down somewhere. Testing with the script as documented (I added one sentence that is 100% the same as a training example) on <denchmark-link:https://spacy.netlify.com/usage/training#ner>https://spacy.netlify.com/usage/training#ner</denchmark-link>\n  I get:\n <denchmark-code>Created blank 'en' model\n Losses {'ner': 29.85830795764923}\n Losses {'ner': 22.974769711494446}\n Losses {'ner': 15.957626104354858}\n Losses {'ner': 9.803914964199066}\n Losses {'ner': 8.14788521034643}\n Losses {'ner': 8.616836511762813}\n Losses {'ner': 7.976333131315187}\n Losses {'ner': 7.303826485993341}\n Losses {'ner': 4.836598809459247}\n Losses {'ner': 3.989627659902908}\n Entities in 'Do you like horses?'\n Entities in 'they pretend to care about your feelings, those horses'\n </denchmark-code>\n \n When training on my actual data it looks like spacy is not learning anything (I did not change the code, and it was learning things before), i.e. it recognizes no entities (0 recall). I use a custom train script for training that was based on the example from the docs. My training data is in the format as used in that script (tuples with text and entities in the text with start and end offsets), is it possible to convert that format to the json the spacy train cli accepts so I can try with that command as well?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "RonRademaker", "commentT": "2019-02-28T12:45:49Z", "comment_text": "\n \t\tBy the way, it does look like evaluation is now a matter of seconds \ud83c\udf89 (but with 0 recall....)\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "RonRademaker", "commentT": "2019-02-28T13:12:50Z", "comment_text": "\n \t\tThe links are pointing to the master branch I think, which will be correct on launch. It should work with the version of the script on develop.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "RonRademaker", "commentT": "2019-02-28T15:27:56Z", "comment_text": "\n \t\tThanks, that script does work for me so obviously I'm doing something wrong. I can't really find any real differences that would explain it though, debugging I did something that strikes me as very odd:\n After each epoch I do:\n <denchmark-code>print(nlp.get_pipe('ner').model._mem.weights)\n </denchmark-code>\n \n And it consistently gives me an empty list [] which seems to me that the model has no parameters (so it can't predict or learn anything). The model was created with blank\n <denchmark-code>print(nlp.get_pipe('ner').model._mem._mem)\n </denchmark-code>\n \n Consistently gives all zeros:\n <denchmark-code>[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n   0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n   0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n   0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n   0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n   0. 0. 0. 0. 0. 0. 0. 0.]\n  [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n   0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n   0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n   0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n   0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n   0. 0. 0. 0. 0. 0. 0. 0.]]\n </denchmark-code>\n \n Any ideas where I can look next?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "RonRademaker", "commentT": "2019-02-28T17:35:15Z", "comment_text": "\n \t\tWell, the example has very little data, so the learning is pretty delicate. I think the way the batching is different on the master branch, it just happens to not converge well.\n As for the weights: try model.upper._mem. The parser model has three layers that hold the weights. See the spacy/syntax/_parser_model.pyx file for details.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "RonRademaker", "commentT": "2019-03-01T08:37:31Z", "comment_text": "\n \t\tThanks, that allowed me to make sure that weights were updating. I also found the issue, it was not with training but with evaluating in batches:\n Works as expected:\n <denchmark-code>for text in samples:\n     doc = nlp(text)\n     # evaluate doc.ents\n </denchmark-code>\n \n Zero recall:\n <denchmark-code>for doc in nlp.pipe(texts, batch_size=1):\n     # evaluate doc.ents\n </denchmark-code>\n \n Zero recall:\n <denchmark-code>for doc in nlp.pipe(texts, batch_size=2):\n     # evaluate doc.ents\n </denchmark-code>\n \n Works as expected:\n <denchmark-code>for doc in nlp.pipe(texts, batch_size=4):\n     # evaluate doc.ents\n </denchmark-code>\n \n Increasing the batch size further things keep working.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "RonRademaker", "commentT": "2019-03-04T16:33:42Z", "comment_text": "\n \t\tLooks suspicious for sure! Thanks for reporting.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "RonRademaker", "commentT": "2019-03-10T15:01:59Z", "comment_text": "\n \t\tYeah the batching bug was a regression introduced quite recently, when I fixed a constant in the batch sizing. I changed it to take batch_size // 4 as a value for a sub-batch, but this breaks for n < 4. Fixed now.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "RonRademaker", "commentT": "2019-04-09T15:38:43Z", "comment_text": "\n \t\tThis thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n \t\t"}}}, "commit": {"commit_id": "7461e5e055bafab323faa6d7f0160162b655b523", "commit_author": "Matthew Honnibal", "commitT": "2019-03-10 16:01:34+01:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "spacy\\syntax\\nn_parser.pyx", "file_new_name": "spacy\\syntax\\nn_parser.pyx", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "224", "deleted_lines": "224"}}}}}}