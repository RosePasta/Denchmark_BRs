{"BR": {"BR_id": "8660", "BR_author": "icaropires", "BRopenT": "2020-05-28T15:25:42Z", "BRcloseT": "2020-08-13T21:29:48Z", "BR_text": {"BRsummary": "[autoscaler] Local Cluster with Docker: Check failed: !local_node_id_.IsNil() This node is disconnected.", "BRdescription": "\n <denchmark-h:h3>What is your question?</denchmark-h>\n \n I've been trying to run a cluster using two hosts with docker. But after running ray up -y cluster.yml, I get the following situation after some minutes:\n <denchmark-link:https://user-images.githubusercontent.com/18473249/83157458-feb76280-a0d9-11ea-842b-2d34d1ace91a.png></denchmark-link>\n \n Workers keeps incresing by 16 (number of cores) on the worker node, and the same error popping up on the logs.\n View all logs:\n <denchmark-code>F0528 14:53:04.237076   138 service_based_accessor.cc:320]  Check failed: !local_node_id_.IsNil() This node is disconnected.\n *** Check failure stack trace: ***\n     @     0x55bb8f0f676d  google::LogMessage::Fail()\n     @     0x55bb8f0f7bdc  google::LogMessage::SendToLog()\n     @     0x55bb8f0f6449  google::LogMessage::Flush()\n     @     0x55bb8f0f6661  google::LogMessage::~LogMessage()\n     @     0x55bb8edb7029  ray::RayLog::~RayLog()\n     @     0x55bb8ec285fc  ray::gcs::ServiceBasedNodeInfoAccessor::UnregisterSelf()\n     @     0x55bb8eb37bd4  ray::raylet::Raylet::Stop()\n     @     0x55bb8eb1c943  _ZZ4mainENKUlRKN5boost6system10error_codeEiE_clES3_i.isra.2014\n     @     0x55bb8eb1cd58  _ZN5boost4asio6detail14signal_handlerIZ4mainEUlRKNS_6system10error_codeEiE_NS1_18io_object_executorINS0_8executorEEEE11do_completeEPvPNS1_19scheduler_operationES6_m\n     @     0x55bb8f08841f  boost::asio::detail::scheduler::do_run_one()\n     @     0x55bb8f089921  boost::asio::detail::scheduler::run()\n     @     0x55bb8f08a7c2  boost::asio::io_context::run()\n     @     0x55bb8eb06669  main\n     @     0x7fa7e5fd909b  __libc_start_main\n     @     0x55bb8eb17331  (unknown)\n </denchmark-code>\n \n Relevant messages on logs/monitor.*\n <denchmark-code>2020-05-28 14:52:26,124 WARNING autoscaler.py:536 -- StandardAutoscaler: host02: No heartbeat in 30.2060968875885s, restarting Ray to recover...      \n 2020-05-28 14:53:01,399 WARNING autoscaler.py:536 -- StandardAutoscaler: host02: No heartbeat in 30.24538493156433s, restarting Ray to recover...                              \n 2020-05-28 14:53:36,620 WARNING autoscaler.py:536 -- StandardAutoscaler: host02: No heartbeat in 30.10585641860962s, restarting Ray to recover...                              \n 2020-05-28 14:54:11,807 WARNING autoscaler.py:536 -- StandardAutoscaler: host02: No heartbeat in 30.12926173210144s, restarting Ray to recover...                              \n 2020-05-28 14:54:46,926 WARNING autoscaler.py:536 -- StandardAutoscaler: host02: No heartbeat in 30.117576360702515s, restarting Ray to recover...                             \n 2020-05-28 14:55:22,223 WARNING autoscaler.py:536 -- StandardAutoscaler: host02: No heartbeat in 30.251209259033203s, restarting Ray to recover...                             \n 2020-05-28 14:55:57,461 WARNING autoscaler.py:536 -- StandardAutoscaler: host02: No heartbeat in 30.201629877090454s, restarting Ray to recover...           \n </denchmark-code>\n \n cluster.yml:\n <denchmark-code>cluster_name: test                                                                               \n                   \n min_workers: 2         \n initial_workers: 2      \n max_workers: 2        \n                          \n docker:                  \n   image: \"python:3.8.3\"             \n   container_name: \"ray\"             \n   run_options: [\"--shm-size 25GB\"]    \n                                     \n provider:                     \n     type: local               \n     head_ip: host01           \n     worker_ips: [host02]           \n                                    \n auth:                              \n   ssh_user: root                                                                                                                                              \n   ssh_private_key: ~/.ssh/id_rsa                                                                                                                              \n                                                                                                                                                               \n head_start_ray_commands:                                                                                                                                      \n  - ray stop                                                                                                                                                     \n  - ulimit -c unlimited && ray start --head --redis-port=6379 --redis-password='' --webui-host=0.0.0.0 --autoscaling-config=~/ray_bootstrap_config.yaml        \n                                                                     \n worker_start_ray_commands:                                            \n  - ray stop                                                         \n  - ray start --address=$RAY_HEAD_IP:6379 --redis-password=''\n </denchmark-code>\n \n I wasn't able to detect any blocked ports by the firewall (using telnet, netstat and nc).\n Ray version: 0.8.5 and 0.9.0-dev\n OS: Centos 7, kernel 4.4.96\n Python version: 3.6\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "icaropires", "commentT": "2020-05-29T16:52:18Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ijrsvt>@ijrsvt</denchmark-link>\n  This could possibly be heartbeat lag. I saw several cases when CPU load is high, heartbeats start to lag and are not reached on time, and it marks nodes as dead. <denchmark-link:https://github.com/icaropires>@icaropires</denchmark-link>\n  can you loosen the resource limit of your containers? That says, can you loosen the memory and cpu constraint on Docker containers a lot and see if the same error happens?\n <denchmark-link:https://docs.docker.com/config/containers/resource_constraints/>https://docs.docker.com/config/containers/resource_constraints/</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "icaropires", "commentT": "2020-05-29T17:36:40Z", "comment_text": "\n \t\t\n @ijrsvt This could possibly be heartbeat lag. I saw several cases when CPU load is high, heartbeats start to lag and are not reached on time, and it marks nodes as dead. @icaropires can you loosen the resource limit of your containers? That says, can you loosen the memory and cpu constraint on Docker containers a lot and see if the same error happens?\n https://docs.docker.com/config/containers/resource_constraints/\n \n Thanks for the response <denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n  . But I don't think that's the problem, because I wasn't running any script (I've just ran ) and I haven't set any constraints. But, anyway, I've tried to run with:\n <denchmark-code>run_options: [\"--shm-size 25GB --cpus=16 --memory=50g\"]\n </denchmark-code>\n \n and got the same behavior. It seems to me that the heartbeats are never reaching the head node\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "icaropires", "commentT": "2020-05-29T18:10:54Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/icaropires>@icaropires</denchmark-link>\n  Thanks for the quick response. We will surely investigate it. Btw, is it urgent for you? Can you use some different solutions until we figure out the root cause (like running without Docker)?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "icaropires", "commentT": "2020-05-29T20:23:44Z", "comment_text": "\n \t\t\n @icaropires Thanks for the quick response. We will surely investigate it. Btw, is it urgent for you? Can you use some different solutions until we figure out the root cause (like running without Docker)?\n \n <denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n  I was kind of testing something. But I'll figure it out, thanks for asking!\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "icaropires", "commentT": "2020-05-31T09:02:16Z", "comment_text": "\n \t\tNo problem! Please share your solution if you figured this out. We tried to fix this problem as it happens to many users, but we failed to reproduce it several times ourselves!\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "icaropires", "commentT": "2020-08-04T14:20:35Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n  The problem is the indicated at <denchmark-link:https://github.com/ray-project/ray/issues/8648>#8648</denchmark-link>\n  ! The  is being set to localhost in head node, inside or outside the container. I've had success with the following steps:\n \n ray start the head node\n connect to redis using redis-cli and set  GcsServerAddress to <my_ip:<same port as before>\n ray start other nodes\n \n (I've tested inside containers, but it should work outside as well)\n ray version: 0.8.6\n I don't know the reason this is happening, in other environments it gets the correct IP\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "icaropires", "commentT": "2020-08-04T15:17:03Z", "comment_text": "\n \t\tWould you mind checking what was GCSServerAddress in Redis before you manually set?\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "icaropires", "commentT": "2020-08-04T15:59:12Z", "comment_text": "\n \t\t\n Would you mind checking what was GCSServerAddress in Redis before you manually set?\n \n <denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n  No problem! It's :\n output from cat /tmp/ray/session_latest/logs/gcs_server.out:\n <denchmark-code>I0804 12:51:42.988648    27    27 redis_client.cc:141] RedisClient connected.\n I0804 12:51:42.997473    27    27 redis_gcs_client.cc:88] RedisGcsClient Connected.\n I0804 12:51:42.998004    27    27 gcs_redis_failure_detector.cc:29] Starting redis failure detector.\n I0804 12:51:42.998190    27    27 gcs_actor_manager.cc:737] Loading initial data.\n I0804 12:51:42.998234    27    27 gcs_object_manager.cc:270] Loading initial data.\n I0804 12:51:42.998255    27    27 gcs_node_manager.cc:344] Loading initial data.\n I0804 12:51:42.998407    27    27 gcs_actor_manager.cc:761] Finished loading initial data.\n I0804 12:51:42.998421    27    27 gcs_object_manager.cc:285] Finished loading initial data.\n I0804 12:51:42.998502    27    27 gcs_node_manager.cc:361] Finished loading initial data.\n I0804 12:51:42.998709    27    27 grpc_server.cc:74] GcsServer server started, listening on port 33494.\n I0804 12:51:43.106926    27    27 gcs_server.cc:217] Gcs server address = 127.0.0.1:33494\n I0804 12:51:43.106974    27    27 gcs_server.cc:221] Finished setting gcs server address: 127.0.0.1:33494\n I0804 12:51:43.221514    27    27 gcs_node_manager.cc:135] Registering node info, node id = 94ff5ed7b153cf383852da1001e32b69fa78e04b\n I0804 12:51:43.221841    27    27 gcs_node_manager.cc:140] Finished registering node info, node id = 94ff5ed7b153cf383852da1001e32b69fa78e04b\n \n </denchmark-code>\n \n output from redis-cli:\n <denchmark-code>head:6379> get GcsServerAddress\n \"127.0.0.1:33494\"\n </denchmark-code>\n \n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "icaropires", "commentT": "2020-08-05T05:25:29Z", "comment_text": "\n \t\tReally appreciate it! Would you mind trying one more thing actually? Could you run this command in the head node and see what's the IP addresses in this case?\n import ray\n ray.init(address='auto')\n print(ray.services.get_node_ip_address())\n The GCS server IP address is resolved in CPP, and it seems like it sometimes doesn't resolve the correct local IP addresses (It first pings Google DNS server, and if it fails, it uses asio resolver to get local IP addresses. If both fails, the address is set to be the localhost (your case)). I'd like to check if Python's IP resolution also fails when you run it inside Docker containers.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "icaropires", "commentT": "2020-08-05T15:14:53Z", "comment_text": "\n \t\t\n Really appreciate it! Would you mind trying one more thing actually? Could you run this command in the head node and see what's the IP addresses in this case?\n import ray\n ray.init(address='auto')\n print(ray.services.get_node_ip_address())\n The GCS server IP address is resolved in CPP, and it seems like it sometimes doesn't resolve the correct local IP addresses (It first pings Google DNS server, and if it fails, it uses asio resolver to get local IP addresses. If both fails, the address is set to be the localhost (your case)). I'd like to check if Python's IP resolution also fails when you run it inside Docker containers.\n \n Sure! Running the commands:\n Python 3.8.2 (default, Jul 16 2020, 14:00:26) \n [GCC 9.3.0] on linux\n Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n >>> import ray\n >>> ray.init(address='auto')\n WARNING: Logging before InitGoogleLogging() is written to STDERR\n I0805 11:38:39.371309   611   611 global_state_accessor.cc:25] Redis server address = <my ip>:6379, is test flag = 0\n I0805 11:38:39.372180   611   611 redis_client.cc:141] RedisClient connected.\n I0805 11:38:39.380892   611   611 redis_gcs_client.cc:88] RedisGcsClient Connected.\n I0805 11:38:39.381640   611   611 service_based_gcs_client.cc:75] ServiceBasedGcsClient Connected.\n {'node_ip_address': '<my ip>', 'raylet_ip_address': '<my ip>, 'redis_address': '<my ip>:6379', 'object_store_address': '/tmp/ray/session_2020-08-05_11-37-59_349964_327/sockets/plasma_store', 'raylet_socket_name': '/tmp/ray/session_2020-08-05_11-37-59_349964_327/sockets/raylet', 'webui_url': 'localhost:8265', 'session_dir': '/tmp/ray/session_2020-08-05_11-37-59_349964_327'}\n >>> print(ray.services.get_node_ip_address())\n <my ip>\n I've only replaced my valid IP for <my ip> for security reasons, but it's always the same and is not 127.0.0.1.\n <denchmark-h:h2>Some more informations</denchmark-h>\n \n \n it first pings Google DNS server\n \n \n \n ping 8.8.8.8 works from my head node \ud83e\udd14\n \n \n This \"GcsServerAddress as localhost\" behaviour is happening outside the Docker containers too!\n \n \n In ray version 0.8.6, when opening the dashboard the behaviour is that described in #8805\n \n \n In ray version 0.8.5, when not using autoscaler, no problems can be seen in dashboard, but only the head node resources are used\n \n \n I'll be happy to provide any more details if needed \ud83d\ude03\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "icaropires", "commentT": "2020-08-07T21:44:41Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ijrsvt>@ijrsvt</denchmark-link>\n  I think the issue is that  timeout is too short in CPP code. I can probably push the PR and see if it fixes the issue. If you have any other thought, please let me know!\n <denchmark-link:https://github.com/icaropires>@icaropires</denchmark-link>\n  Would you mind downloading the latest Ray and test if my fix will help you solve the problem in some time like next week?\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "icaropires", "commentT": "2020-08-07T21:53:24Z", "comment_text": "\n \t\t\n @ijrsvt I think the issue is that GcsServerAddress timeout is too short in CPP code. I can probably push the PR and see if it fixes the issue. If you have any other thought, please let me know!\n @icaropires Would you mind downloading the latest Ray and test if my fix will help you solve the problem in some time like next week?\n \n <denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n  No problem, just let me know. If I get some time, I'll also try to investigate\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "icaropires", "commentT": "2020-08-09T07:12:11Z", "comment_text": "\n \t\tI think I was able to solve it. I will update <denchmark-link:https://github.com/ray-project/ray/pull/10004>#10004</denchmark-link>\n   with the checkings and this issue with more details as soon as possible.\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "icaropires", "commentT": "2020-08-10T01:10:19Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n  I've tried to increase timeout to like 2s but I've got the same behaviour even  my ping response being less than 100ms to 8.8.8.8.\n So I invested in trying to fix the fallback option, the local resolve, and implemented the solution at <denchmark-link:https://github.com/ray-project/ray/pull/10004>#10004</denchmark-link>\n  .\n But I guess that even being able to suggest the right IP most of the times, there might be situations in which the best is let the user specify GcsServerAddress (if there are more than one valid IP, for example), probably by passing a flag on CLI.\n \t\t"}}}, "commit": {"commit_id": "b77d6bf87d010d679438006388407bcdc3868100", "commit_author": "\u00cdcaro Arag\u00e3o", "commitT": "2020-08-13 16:29:47-05:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "src\\ray\\common\\network_util.cc", "file_new_name": "src\\ray\\common\\network_util.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "177,178,179", "deleted_lines": null, "method_info": {"method_name": "NetIf::CompPrefixLen", "method_params": "left,right", "method_startline": "177", "method_endline": "179"}}, "hunk_1": {"Ismethod": 1, "added_lines": "181,182,183", "deleted_lines": null, "method_info": {"method_name": "NetIf::NameStartsWith", "method_params": "name,prefix", "method_startline": "181", "method_endline": "183"}}, "hunk_2": {"Ismethod": 1, "added_lines": "92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133", "deleted_lines": null, "method_info": {"method_name": "NetIf::GetValidLocalIpCandidates", "method_params": "", "method_startline": "92", "method_endline": "133"}}, "hunk_3": {"Ismethod": 1, "added_lines": "163,164,165,166,167,168,169,170,171", "deleted_lines": null, "method_info": {"method_name": "NetIf::GetPriority", "method_params": "if_name", "method_startline": "163", "method_endline": "171"}}, "hunk_4": {"Ismethod": 1, "added_lines": "173,174,175", "deleted_lines": null, "method_info": {"method_name": "NetIf::CompNamesAndIps", "method_params": "left,right", "method_startline": "173", "method_endline": "175"}}, "hunk_5": {"Ismethod": 1, "added_lines": "23,25,30,34,35,37,38,39,40,41,42,43,44,45,46,47,55,61,62,63,64,65", "deleted_lines": "28,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,53,58,61", "method_info": {"method_name": "GetValidLocalIp", "method_params": "port,timeout_ms", "method_startline": "19", "method_endline": "67"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ray\\common\\network_util.h", "file_new_name": "src\\ray\\common\\network_util.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "22,23,24,25,26,27,28,29,30,124,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183", "deleted_lines": "115"}}}}}}