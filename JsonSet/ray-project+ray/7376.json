{"BR": {"BR_id": "7376", "BR_author": "mc-allen", "BRopenT": "2020-02-28T16:27:56Z", "BRcloseT": "2020-03-02T07:06:00Z", "BR_text": {"BRsummary": "Serialization of certain objects not handled correctly after 0.8.1", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n When using Ray 0.8.2 on Ubuntu 18.04, I am serializing data structures from the astropy library (<denchmark-link:https://pypi.org/project/astropy/>https://pypi.org/project/astropy/</denchmark-link>\n  , version 4.0).\n Previously, I have configured ray to use cloudpickle for many of these astropy types, as they couldn't be natively handled by ray/pyarrow. In 0.8.2 however, ray seems to be ignoring this configuration, and it converts the data type in question (astropy.constants.constant.Constant) to a numpy ndarray upon ray.put/ray.get, which is incorrect behavior and breaks downstream parts of my code.\n Version 0.8.1 seems to be fine. I also reproduced the issue with the test cases below in  ray-0.9.0.dev0 as of today.\n I suspect that this is a bug related to classes that have numpy-related base class.\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Case 1: ignoring custom serializer\n import numpy\n import ray\n \n class MyConstant(numpy.ndarray):\n     def __init__(self, value):\n         super().__init__()\n         self.constant = value\n     \n     def __str__(self):\n         print(self.constant)\n \n constant = MyConstant(123)\n \n ray.shutdown()\n ray.init()\n \n def explode(x):\n     raise RuntimeError()\n \n ray.register_custom_serializer(type(constant), serializer=explode, deserializer=explode)\n \n try:\n     ray.put(constant)\n     print('Should never get here!')\n except (RuntimeError, IndexError):\n     print('Correct behavior, proof that customer serializer was used.')\n Case 2: Incorrect round-trip\n import numpy\n import ray\n \n class MyConstant(numpy.ndarray):\n     def __init__(self, value):\n         super().__init__()\n         self.constant = value\n     \n     def __str__(self):\n         print(self.constant)\n \n constant = MyConstant(123)\n \n ray.shutdown()\n ray.init()\n \n ray.register_custom_serializer(type(constant), use_pickle=True)\n \n repr_orig = repr(constant)\n repr_ser =repr(ray.get(ray.put(constant)))\n \n if repr_orig == repr_ser:\n     print('Good round trip')\n else:\n     print('Bad round trip!')\n \n print(repr_orig)\n print(repr_ser)\n If we cannot run your script, we cannot fix your issue.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "mc-allen", "commentT": "2020-02-28T17:57:42Z", "comment_text": "\n \t\tThanks, I can reproduce this and it looks like it was introduced in <denchmark-link:https://github.com/ray-project/ray/pull/6675>#6675</denchmark-link>\n \n <denchmark-link:https://github.com/suquark>@suquark</denchmark-link>\n  Can you look into this?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "mc-allen", "commentT": "2020-02-29T20:46:05Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mc-allen>@mc-allen</denchmark-link>\n  it's a great catch! let me fix this\n \t\t"}}}, "commit": {"commit_id": "0792b5cb93bdde5a0b60d734fc687a12221ed2d2", "commit_author": "Siyuan (Ryans) Zhuang", "commitT": "2020-03-01 23:05:59-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\cloudpickle\\cloudpickle_fast.py", "file_new_name": "python\\ray\\cloudpickle\\cloudpickle_fast.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "544,545", "deleted_lines": "544,545", "method_info": {"method_name": "reducer_override", "method_params": "self,obj", "method_startline": "510", "method_endline": "562"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 8, "file_old_name": "python\\ray\\tests\\test_basic.py", "file_new_name": "python\\ray\\tests\\test_basic.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "392,393,394", "deleted_lines": null, "method_info": {"method_name": "test_numpy_subclass_serialization.__init__", "method_params": "self,value", "method_startline": "392", "method_endline": "394"}}, "hunk_1": {"Ismethod": 1, "added_lines": "416,417,418", "deleted_lines": null, "method_info": {"method_name": "test_numpy_subclass_serialization_pickle.__init__", "method_params": "self,value", "method_startline": "416", "method_endline": "418"}}, "hunk_2": {"Ismethod": 1, "added_lines": "420,421", "deleted_lines": null, "method_info": {"method_name": "test_numpy_subclass_serialization_pickle.__str__", "method_params": "self", "method_startline": "420", "method_endline": "421"}}, "hunk_3": {"Ismethod": 1, "added_lines": "396,397", "deleted_lines": null, "method_info": {"method_name": "test_numpy_subclass_serialization.__str__", "method_params": "self", "method_startline": "396", "method_endline": "397"}}, "hunk_4": {"Ismethod": 1, "added_lines": "381,382,383,384,385,386,387", "deleted_lines": null, "method_info": {"method_name": "test_numpy_serialization", "method_params": "ray_start_regular", "method_startline": "381", "method_endline": "387"}}, "hunk_5": {"Ismethod": 1, "added_lines": "414,415,416,417,418,419,420,421,422,423,424,425,426,427,428", "deleted_lines": null, "method_info": {"method_name": "test_numpy_subclass_serialization_pickle", "method_params": "ray_start_regular", "method_startline": "414", "method_endline": "428"}}, "hunk_6": {"Ismethod": 1, "added_lines": "401,402", "deleted_lines": null, "method_info": {"method_name": "test_numpy_subclass_serialization.explode", "method_params": "x", "method_startline": "401", "method_endline": "402"}}, "hunk_7": {"Ismethod": 1, "added_lines": "390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411", "deleted_lines": null, "method_info": {"method_name": "test_numpy_subclass_serialization", "method_params": "ray_start_regular", "method_startline": "390", "method_endline": "411"}}}}}}}