{"BR": {"BR_id": "243", "BR_author": "seanpmorgan", "BRopenT": "2019-05-13T16:23:26Z", "BRcloseT": "2019-07-07T04:49:09Z", "BR_text": {"BRsummary": "Make image transforms compatible with TF Dataset", "BRdescription": "\n From <denchmark-link:https://github.com/tensorflow/addons/issues/242>#242</denchmark-link>\n  we found that the tfa.image transforms are not compatible with dataset mapping. This is a very likely usecase for tfa.image so we need to address this. Here is a minimal example showing the differences in tfa.rotate(pi/2) and tf.image.rot90:\n <denchmark-link:https://colab.research.google.com/drive/1ZDhnGrorvSf04wzS-0utztZ6Nnzusvl7>https://colab.research.google.com/drive/1ZDhnGrorvSf04wzS-0utztZ6Nnzusvl7</denchmark-link>\n \n Problems seem to occur because Dataset mapping runs in graph mode and this check fails:\n <denchmark-link:https://github.com/tensorflow/addons/blob/master/tensorflow_addons/image/transform_ops.py#L323>https://github.com/tensorflow/addons/blob/master/tensorflow_addons/image/transform_ops.py#L323</denchmark-link>\n \n By comparison here is tf.image.rot90:\n <denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/image_ops_impl.py#L514>https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/image_ops_impl.py#L514</denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "seanpmorgan", "commentT": "2019-05-13T16:30:57Z", "comment_text": "\n \t\tWill think about this more tonight\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "seanpmorgan", "commentT": "2019-05-13T23:54:03Z", "comment_text": "\n \t\tAccording to <denchmark-link:https://github.com/tensorflow/tensorflow/issues/27811>tensorflow/tensorflow#27811</denchmark-link>\n , TF2 transforms Data mappings to subgraphs for better performance.\n Here is a non-performatic workaround to force Eager Mode and use tfa.image until there is a solution:\n image_ds = path_ds.map(lambda path: tf.py_function(func=load_and_preprocess_image,inp=[path],Tout=tf.float32))\n I noticed tfa.image.rotate is running on the CPU, so it is running very slowly, is this the expected behaviour?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "seanpmorgan", "commentT": "2019-05-14T00:55:15Z", "comment_text": "\n \t\tThanks for the temporary workaround! Yeah gpu kernels are on the way <denchmark-link:https://github.com/tensorflow/addons/issues/118>#118</denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "seanpmorgan", "commentT": "2019-05-14T05:58:25Z", "comment_text": "\n \t\tTwo thoughts:\n \n I opened #244 to have a (failing) test case for this issue\n The requirement of fixed and static image rank is not only in rotate, but upstream in transform: https://github.com/tensorflow/addons/blob/master/tensorflow_addons/image/transform_ops.py#L76  Is there a strong technical reason why this restriction exists?\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "seanpmorgan", "commentT": "2019-05-14T06:03:48Z", "comment_text": "\n \t\t\n The rot90() code seems to assume that if no shape information is available, one can assume that the rank is 3.  Do we think that's safe for our transformations as well?\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "seanpmorgan", "commentT": "2019-05-14T08:30:12Z", "comment_text": "\n \t\t\n \n I opened #244 to have a (failing) test case for this issue\n \n \n Thank you, <denchmark-link:https://github.com/kyleabeauchamp>@kyleabeauchamp</denchmark-link>\n !\n \n \n The requirement of fixed and static image rank is not only in rotate, but upstream in transform: https://github.com/tensorflow/addons/blob/master/tensorflow_addons/image/transform_ops.py#L76  Is there a strong technical reason why this restriction exists?\n \n \n I think it is because the cpp implementation <denchmark-link:https://github.com/tensorflow/addons/blob/master/tensorflow_addons/custom_ops/image/cc/kernels/image_projective_transform_op.cc#L75>here</denchmark-link>\n  requires a static rank of 4 and each dimension will be fetched out for later computation.\n \n \n The rot90() code seems to assume that if no shape information is available, one can assume that the rank is 3.  Do we think that's safe for our transformations as well?\n \n \n Well, I do not think it is very safe though. I'd suppose it is designed for . (Not so sure about this). Hi, <denchmark-link:https://github.com/facaiy>@facaiy</denchmark-link>\n , would you mind taking a look at this?\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "seanpmorgan", "commentT": "2019-05-16T05:13:19Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/WindQAQ>@WindQAQ</denchmark-link>\n  Thanks for ping me, Tzu-Wei.\n \n Well, I do not think it is very safe though. I'd suppose it is designed for tf.dataset.\n \n Yeah, it's not safe, and we can relax the restriction if we document it clearly: data must be 4-D.\n <denchmark-link:https://github.com/mrry>@mrry</denchmark-link>\n  Hi, Derek, could you take a look? The rank of tensor seems unknown even in eager mode.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "seanpmorgan", "commentT": "2019-05-23T08:56:24Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/karmel>@karmel</denchmark-link>\n  Karmel, do you know who could answer those questions about tf.data and tf.image? Thank you.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "seanpmorgan", "commentT": "2019-05-23T16:44:37Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/jsimsa>@jsimsa</denchmark-link>\n  -- can you advise?\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "seanpmorgan", "commentT": "2019-05-23T19:58:14Z", "comment_text": "\n \t\tOne option is to fix the addons logic as discussed in this thread. Another option is to replace decode_image with decode_png. The problem arises because decode_image is executed by tf.data in graph-mode and shape inference fails to determine which one of the decode utilities is used (which seems to trip some addons logic).\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "seanpmorgan", "commentT": "2019-06-03T23:53:21Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/jsimsa>@jsimsa</denchmark-link>\n  thank you for the answer and apologies for the slow reply back. I confirmed that switching to  does corrrectly infer the shape which is great. One lingering question though:\n \n It's true that the addons logic got tripped up by the None shape coming out of decode_image... but in tf.image.rot90 None shape is handled by defaulting to a 3D shape. Is there a reason this is safe to do? We can copy the same logic but I'm not sure I'm following the rationale.\n \n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "seanpmorgan", "commentT": "2019-06-04T02:28:35Z", "comment_text": "\n \t\tI tried digging through git history to find the person who might have the answer for you and as far as I could tell is should be <denchmark-link:https://github.com/aselle>@aselle</denchmark-link>\n  who introduced that logic in 2016.\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "seanpmorgan", "commentT": "2019-06-11T16:59:24Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/aselle>@aselle</denchmark-link>\n  Do you happen to have any comment on why its safe to default to 3D rotate when shape is ?\n <denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/image_ops_impl.py#L511>https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/image_ops_impl.py#L511</denchmark-link>\n \n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "seanpmorgan", "commentT": "2019-06-11T17:20:00Z", "comment_text": "\n \t\tIt probably is just so that if you don't know anything about the shape you can still proceed.  None of ndims means the rank is not known. so it's just a fallback.\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "seanpmorgan", "commentT": "2019-06-11T23:19:09Z", "comment_text": "\n \t\tSo we should handle unknown rank, because it's valid in graph mode. And it seems that there are at least two solutions:\n \n use dynamic shape if possible;\n fallback to 3D data (perhaps unsafe).\n \n \t\t"}}}, "commit": {"commit_id": "96c3308432bb525c33556063b8f92eeb6123644f", "commit_author": "Yan Facai (\u989c\u53d1\u624d)", "commitT": "2019-07-06 21:49:08-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow_addons\\image\\BUILD", "file_new_name": "tensorflow_addons\\image\\BUILD", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "15,103,104,105,106,107,108,109,110,111,112,113,114,115", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow_addons\\image\\transform_ops.py", "file_new_name": "tensorflow_addons\\image\\transform_ops.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "289,308,309,317", "deleted_lines": "302,303", "method_info": {"method_name": "rotate", "method_params": "images,angles,interpolation,name", "method_startline": "282", "method_endline": "317"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow_addons\\image\\transform_ops_test.py", "file_new_name": "tensorflow_addons\\image\\transform_ops_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "282,283,284,285,286,287", "deleted_lines": null, "method_info": {"method_name": "test_unknown_shape", "method_params": "self", "method_startline": "282", "method_endline": "287"}}, "hunk_1": {"Ismethod": 1, "added_lines": "76,77,78,79,80,81,82", "deleted_lines": null, "method_info": {"method_name": "test_transform_unknown_shape", "method_params": "self", "method_startline": "76", "method_endline": "82"}}}}, "file_3": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "tensorflow_addons\\image\\utils.py"}, "file_4": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "tensorflow_addons\\image\\utils_test.py"}}}}