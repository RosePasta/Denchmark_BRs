{"BR": {"BR_id": "2235", "BR_author": "karriebear", "BRopenT": "2020-10-20T22:05:51Z", "BRcloseT": "2020-11-09T19:28:20Z", "BR_text": {"BRsummary": "Automatically reset buffer when file is read", "BRdescription": "\n Problem:\n read_csv does not work when multiple files are uploaded\n Reason:\n It works currently because we are creating a new BytesIO (or StringIO) object each time in deltagenerator. the object gets passed to and gets processed. when another file is uploaded or a rerun happens, we create a new IO object that is starting back at the beginning.\n The new implementation does not work because we are using the same buffer and once it's read the position is not getting reset. need to reset position after read (issues with read_csv \ud83d\ude22)\n Several users (<denchmark-link:https://discuss.streamlit.io/t/emptydataerror-no-columns-to-parse-from-file/6247/8>here</denchmark-link>\n , <denchmark-link:https://discuss.streamlit.io/t/issue-in-rerunning-file-uploader/6333/2>here</denchmark-link>\n , and <denchmark-link:https://discuss.streamlit.io/t/create-multiple-dataframes-from-csv-files-loaded-via-the-multi-file-uploader/6258/5>here</denchmark-link>\n ) have been stumped by this. We have updated our <denchmark-link:https://github.com/streamlit/streamlit/pull/2207>docs</denchmark-link>\n  to indicate you should do this.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "karriebear", "commentT": "2020-10-26T15:21:10Z", "comment_text": "\n \t\tWhen this bug has not been fixed, I found an alternative method. bytesIO has a method getvalue(), which can read all the data in the buffer without changing the reading position.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "karriebear", "commentT": "2020-10-26T16:05:12Z", "comment_text": "\n \t\tWe need to reset the buffer every time the script is rerun, right?\n <denchmark-link:#>\u2026</denchmark-link>\n \n \n On Mon, Oct 26, 2020 at 8:21 AM, Dynamith < ***@***.*** > wrote:\n \n \n \n  When this bug has not been fixed, I found an alternative method. bytesIO has\n  a method getvalue() , which can read all the data in the buffer without\n  changing the reading position.\n \n \n \n  \u2014\n  You are receiving this because you are subscribed to this thread.\n  Reply to this email directly, view it on GitHub (\n  #2235 (comment)\n  ) , or unsubscribe (\n  https://github.com/notifications/unsubscribe-auth/AAMYONMMVPNJCCRYP2UW7WTSMWHXTANCNFSM4SY6AB2Q\n  ).\n \n \n \n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "karriebear", "commentT": "2020-10-26T16:29:07Z", "comment_text": "\n \t\tCorrect!\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "karriebear", "commentT": "2020-10-26T16:32:04Z", "comment_text": "\n \t\tI'm not sure how you can fix the bug. The current operation of the project is that the buffer is not reset when the script is run, causing the change of the previous reading position to affect the next reading. But if you use the getvalue() method, the reading position will not be changed, so that the data can be read when the script is run later without resetting the buffer. However, this can only read all the data in the buffer at once.\n I do not recommend that you reset the buffer, this may cause some unknown errors. My method is also a good choice, because our purpose of using bytesIO is only to read a file from it.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "karriebear", "commentT": "2020-10-26T17:24:15Z", "comment_text": "\n \t\tWe did go back and forth on when developing the new file uploader to decide if this was something we should do. We hoped that people would reset the buffer after using the BytesIO but this does not seem intuitive based on the comments in the forums. In addition, the reruns we trigger is not very standard behavior when compared to running a script in a notebooks. Ideally, we'd love if users are able to just copy over their script from a notebook and into Streamlit which is not the case here \ud83d\ude1e\n getValue() works but there are several instances where users would like to pass a BytesIO object straight to another library. In this instance, there's no guarantee that the library will use getValue instead of read() (i.e. pandas).\n There's several ways we can implement the resetting and its something we'll be testing thoroughly before pushing anything through.\n Thanks for your feedback and if you have any other thoughts, we'd love to hear about it as we revisit this issue.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "karriebear", "commentT": "2020-10-27T02:01:01Z", "comment_text": "\n \t\tAlright, I really haven't experienced the situation you mentioned. Cheer for you.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "karriebear", "commentT": "2020-10-29T06:10:41Z", "comment_text": "\n \t\tThis issue is really killing me.   I get so much value out Streamlit and the latest version has brought everything to a dead stop.   I cannot find a workaround.  I had to downversion to the previous version of Streamlit to get my app to work properly and now I cannot use any of the new features.  Ultimately I need to upload a file, use a dropdown widget to select the target variable from the data set, and as soon as I choose the target variable, the entire app reruns, the buffer is empty, and the app throws an EmptyDataError.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "karriebear", "commentT": "2020-10-29T14:38:58Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/ikeshare192>@ikeshare192</denchmark-link>\n , sorry to hear about the headache this is causing you. The reason this error is occurring is because of an optimization we made to return the same object on rerun. Previously we were creating a new one on each run which wasn't ideal. Because we are now returning the same object, the buffer position of the object is persisting.\n The solution is to reset the buffer manually like so:\n <denchmark-code>file = st.file_uploader(\"label\")\n if file is not None:\n \tfile.seek(0)\n         ... \n </denchmark-code>\n \n A workaround would be to use getValue() instead of read() if you are reading the file yourself and not passing this to a library.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "karriebear", "commentT": "2020-11-01T00:57:17Z", "comment_text": "\n \t\tExcellent...That solved my problems..onward and upward..\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "karriebear", "commentT": "2020-11-09T19:28:20Z", "comment_text": "\n \t\tResolved in <denchmark-link:https://github.com/streamlit/streamlit/pull/2279>#2279</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "73e411f372ee8c38c9013fd5900f16685fc02c7b", "commit_author": "karrie", "commitT": "2020-10-29 18:58:14-04:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "e2e\\scripts\\st_file_uploader.py", "file_new_name": "e2e\\scripts\\st_file_uploader.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "22,31", "deleted_lines": "22,31"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "e2e\\specs\\st_file_uploader.spec.js", "file_new_name": "e2e\\specs\\st_file_uploader.spec.js", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "142,143,144,145,146,147,148", "deleted_lines": null, "method_info": {"method_name": "(anonymous)", "method_params": "", "method_startline": "101", "method_endline": "149"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "lib\\streamlit\\elements\\file_uploader.py", "file_new_name": "lib\\streamlit\\elements\\file_uploader.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "121,122,123", "deleted_lines": null}}}}}}