{"BR": {"BR_id": "1157", "BR_author": "danielrjiang", "BRopenT": "2020-05-22T00:11:23Z", "BRcloseT": "2020-07-24T01:02:46Z", "BR_text": {"BRsummary": "[Bug] Fantasizing is very slow on GPU due to torch.qr", "BRdescription": "\n <denchmark-h:h1>\ud83d\udc1b Bug</denchmark-h>\n \n torch.qr is causing things to be very slow on the GPU, when using fantasies. This is likely caused by <denchmark-link:https://github.com/pytorch/pytorch/issues/22573>pytorch/pytorch#22573</denchmark-link>\n .\n <denchmark-h:h2>To reproduce</denchmark-h>\n \n See the following notebook example.\n <denchmark-link:https://github.com/cornellius-gp/gpytorch/files/4665346/KG_GPU_investigate.ipynb.txt>KG_GPU_investigate.ipynb.txt</denchmark-link>\n \n ** Stack trace/error message **\n See the following profile results.\n <denchmark-link:https://user-images.githubusercontent.com/18407088/82617537-388de380-9b85-11ea-91c7-c5d86fe103b7.png></denchmark-link>\n \n <denchmark-link:https://user-images.githubusercontent.com/18407088/82617539-3b88d400-9b85-11ea-9ecc-c5171d8380b7.png></denchmark-link>\n \n <denchmark-link:https://github.com/cornellius-gp/gpytorch/files/4665343/kg_cpu.cprofile.txt>kg_cpu.cprofile.txt</denchmark-link>\n \n <denchmark-link:https://github.com/cornellius-gp/gpytorch/files/4665344/kg_gpu.cprofile.txt>kg_gpu.cprofile.txt</denchmark-link>\n \n <denchmark-h:h2>Expected Behavior</denchmark-h>\n \n Running on CUDA should show speedups compared to CPU.\n <denchmark-h:h2>System information</denchmark-h>\n \n Please complete the following information:\n \n latest master\n 1.6.0a0\n Mac OS X Catalina 10.15.4\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "danielrjiang", "commentT": "2020-05-22T00:52:51Z", "comment_text": "\n \t\tMaybe we should put in some logic to use the Woodbury formula for small enough matrices? QR is better stability but likely slower for small matrices. <denchmark-link:https://github.com/Balandat>@Balandat</denchmark-link>\n  <denchmark-link:https://github.com/gpleiss>@gpleiss</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "danielrjiang", "commentT": "2020-05-22T01:13:52Z", "comment_text": "\n \t\tYeah that makes sense. Also, looking through the code above that section, we know that the new_root here is diagonal if we use cholesky for the root decomposition (i.e. if L is lower triangualr). So we don't have to do any work, we can just do a triangular solve against eye to the get the inverse. So we should probably have two code paths, one where L is diagonal and one where it's not. For the general case of tall non-triangular L we can probably do woodbury.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "danielrjiang", "commentT": "2020-07-24T01:02:46Z", "comment_text": "\n \t\tFixed for now by <denchmark-link:https://github.com/cornellius-gp/gpytorch/pull/1224>#1224</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "280b7e7794bf2ee118328075d49e27c009c063f2", "commit_author": "Max Balandat", "commitT": "2020-07-23 15:05:34-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "gpytorch\\models\\exact_prediction_strategies.py", "file_new_name": "gpytorch\\models\\exact_prediction_strategies.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "207,215,216,217,218,219,220,221,222,230,231,232,233,234,236", "deleted_lines": "207,216,223,225", "method_info": {"method_name": "get_fantasy_strategy", "method_params": "self,inputs,targets,full_inputs,full_targets,full_output,kwargs", "method_startline": "106", "method_endline": "267"}}}}}}}