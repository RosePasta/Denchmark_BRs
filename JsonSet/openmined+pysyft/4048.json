{"BR": {"BR_id": "4048", "BR_author": "gmuraru", "BRopenT": "2020-08-20T06:13:18Z", "BRcloseT": "2020-08-23T10:50:12Z", "BR_text": {"BRsummary": "Reciprocal test enchantment negative numbers", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n Test the reciprocal method from precision using negative numbers\n <denchmark-h:h2>Expected Behavior</denchmark-h>\n \n All tests are passing\n <denchmark-h:h2>Screenshots</denchmark-h>\n \n If applicable, add screenshots to help explain your problem.\n <denchmark-h:h2>Additional Context</denchmark-h>\n \n It might require changes to the reciprocal method\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "gmuraru", "commentT": "2020-08-20T08:20:42Z", "comment_text": "\n \t\tI guess the Log and NR method are a problem. Division works fine.. Will look into the issue\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "gmuraru", "commentT": "2020-08-20T11:01:08Z", "comment_text": "\n \t\tAdding you :)\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "gmuraru", "commentT": "2020-08-20T11:03:52Z", "comment_text": "\n \t\t\n I guess the Log and NR method are a problem. Division works fine.. Will look into the issue\n \n Also, there might be worth checking out how <denchmark-link:https://github.com/facebookresearch/CrypTen>CrypTen</denchmark-link>\n  is doing - if they take into consideration negative values.\n If not, one idea (it might not be the greatest) is to use symmetry.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "gmuraru", "commentT": "2020-08-22T15:13:02Z", "comment_text": "\n \t\they could you review my PR?\n <denchmark-link:https://github.com/OpenMined/PySyft/pull/4065>#4065</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "20e36d8e578dcc92b51ec49a8ab396cf684b9235", "commit_author": "addy369", "commitT": "2020-08-23 16:08:11+05:18", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "syft\\frameworks\\torch\\tensors\\interpreters\\precision.py", "file_new_name": "syft\\frameworks\\torch\\tensors\\interpreters\\precision.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "478,479,480,481,482", "deleted_lines": null, "method_info": {"method_name": "modulus", "method_params": "self", "method_startline": "478", "method_endline": "482"}}, "hunk_1": {"Ismethod": 1, "added_lines": "504,505,507,508,513,514", "deleted_lines": "491,493,494,499", "method_info": {"method_name": "reciprocal", "method_params": "self,method,nr_iters", "method_startline": "484", "method_endline": "516"}}, "hunk_2": {"Ismethod": 1, "added_lines": "471,472,473,474,475,476", "deleted_lines": null, "method_info": {"method_name": "signum", "method_params": "self", "method_startline": "471", "method_endline": "476"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "test\\torch\\tensors\\test_precision.py", "file_new_name": "test\\torch\\tensors\\test_precision.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "109", "deleted_lines": "109", "method_info": {"method_name": "test_reciprocal", "method_params": "workers", "method_startline": "106", "method_endline": "122"}}}}}}}