{"BR": {"BR_id": "2162", "BR_author": "okkteam", "BRopenT": "2020-07-10T04:49:26Z", "BRcloseT": "2020-07-10T20:56:58Z", "BR_text": {"BRsummary": "'mtl_mode' in espnet/asr/pytorch_backend/asr.py", "BRdescription": "\n Is this should be 'elif' in ctc mode? Otherwise, the \"transducer\" mode is not used. The source codes are as follows:\n if \" transducer\" in args.model_module: assert args.mtlalpha == 1.0 mtl_mde = \"transducer\" logging.info(\"Pure transducer mode\") if args.mtlalpha == 1.0: mtl_mde = \"ctc\" logging.info(\"Pure CTC mode\")\n Another question: why we must use ctc in transducer mode ?\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "okkteam", "commentT": "2020-07-10T04:56:16Z", "comment_text": "\n \t\t<denchmark-code>if \"transducer\" in args.model_module:   \n     assert args.mtlalpha == 1.0   \n     mtl_mode = \"transducer\"   \n     logging.info(\"Pure transducer mode\")   \n if args.mtlalpha == 1.0:   \n     mtl_mode = \"ctc\"   \n     logging.info(\"Pure CTC mode\")\n </denchmark-code>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "okkteam", "commentT": "2020-07-10T08:39:58Z", "comment_text": "\n \t\tHi,\n Thanks for pointing it out, I found out another typo after checking the file. I'll add the fixes in my current PR.\n Btw, note that it doesn't impact transducer training, only the log message displayed.\n \n Another question: why we must use ctc in transducer mode ?\n \n Short answer: because ESPnet ASR was created and designed for CTC/Attention MTL. It was easier to base transducer mode on CTC mode rather than making global changes or duplicating a lot of parts.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "okkteam", "commentT": "2020-07-10T09:22:59Z", "comment_text": "\n \t\t\n Hi,\n Thanks for pointing it out, I found out another typo after checking the file. I'll add the fixes in my current PR.\n Btw, note that it doesn't impact transducer training, only the log message displayed.\n \n Another question: why we must use ctc in transducer mode ?\n \n Short answer: because ESPnet ASR was created and designed for CTC/Attention MTL. It was easier to base transducer mode on CTC mode rather than making global changes or duplicating a lot of parts.\n \n Thanks for your awesome work!\n I noticed that in espnet/asr/asr.py the use of transducer is to jump directly to espnet/nets/pytorch_backend/e2e_asr_transducer.py through espnet/utils/dynamic_import.py and the mlt_mode in asr.py is useless.\n Therefore, is it possible to create a pure transducer without ctc by making some changes on espnet/nets/pytorch_backend/e2e_asr_transducer.py without change other files?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "okkteam", "commentT": "2020-07-10T09:45:38Z", "comment_text": "\n \t\tmtl_mode, which is defined by mtlalpha, in asr.py controls several things such as used criterion and trainer definition! It may be easier to do a \"pure\" transducer mode now though, I'll have to check recent changes as I'm not up-to-date on some general modifications done is last months.\n \t\t"}}}, "commit": {"commit_id": "5ea3c9dbc5db47f5f076cd22b0e35cfceae78eed", "commit_author": "fboyer", "commitT": "2020-07-10 22:50:52+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "espnet\\asr\\pytorch_backend\\asr.py", "file_new_name": "espnet\\asr\\pytorch_backend\\asr.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "420,670", "deleted_lines": "420,670", "method_info": {"method_name": "train", "method_params": "args", "method_startline": "388", "method_endline": "838"}}}}}}}