{"BR": {"BR_id": "1617", "BR_author": "baldassarreFe", "BRopenT": "2020-12-06T16:01:49Z", "BRcloseT": "2020-12-06T16:53:39Z", "BR_text": {"BRsummary": "Device mismatch when an image in the input batch gives 0 detections at inference time", "BRdescription": "\n <denchmark-h:h2>\ud83d\udc1b Bug</denchmark-h>\n \n The bug happens when:\n \n yolo is loaded from torch hub (I haven't tried otherwise)\n yolo is placed on a cuda device\n autoshape is enabled\n no objects are detected for one image of the batch\n \n <denchmark-h:h2>To Reproduce</denchmark-h>\n \n Input:\n import torch\n import PIL.Image\n \n yolo = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)\n yolo.to('cuda:0')\n yolo = yolo.autoshape()\n \n images = [\n     PIL.Image.new('RGB', (640, 480)), # empty picture\n     PIL.Image.open('picture.jpg'),\n ]\n \n det = yolo(images)\n Output:\n <denchmark-code>---------------------------------------------------------------------------\n RuntimeError                              Traceback (most recent call last)\n <ipython-input-5-e00d4d91b5be> in <module>\n      11 ]\n      12 \n ---> 13 det = yolo(images)\n \n ~/miniconda3/envs/wstal/lib/python3.8/site-packages/torch/nn/modules/module.py in _call_impl(self, *input, **kwargs)\n     725             result = self._slow_forward(*input, **kwargs)\n     726         else:\n --> 727             result = self.forward(*input, **kwargs)\n     728         for hook in itertools.chain(\n     729                 _global_forward_hooks.values(),\n \n ~/.cache/torch/hub/ultralytics_yolov5_master/models/common.py in forward(self, imgs, size, augment, profile)\n     171                 y[i][:, :4] = scale_coords(shape1, y[i][:, :4], shape0[i])\n     172 \n --> 173         return Detections(imgs, y, self.names)\n     174 \n     175 \n \n ~/.cache/torch/hub/ultralytics_yolov5_master/models/common.py in __init__(self, imgs, pred, names)\n     185         d = pred[0].device  # device\n     186         gn = [torch.tensor([*[im.shape[i] for i in [1, 0, 1, 0]], 1., 1.], device=d) for im in imgs]  # normalizations\n --> 187         self.xyxyn = [x / g for x, g in zip(self.xyxy, gn)]  # xyxy normalized\n     188         self.xywhn = [x / g for x, g in zip(self.xywh, gn)]  # xywh normalized\n     189         self.n = len(self.pred)\n \n ~/.cache/torch/hub/ultralytics_yolov5_master/models/common.py in <listcomp>(.0)\n     185         d = pred[0].device  # device\n     186         gn = [torch.tensor([*[im.shape[i] for i in [1, 0, 1, 0]], 1., 1.], device=d) for im in imgs]  # normalizations\n --> 187         self.xyxyn = [x / g for x, g in zip(self.xyxy, gn)]  # xyxy normalized\n     188         self.xywhn = [x / g for x, g in zip(self.xywh, gn)]  # xywh normalized\n     189         self.n = len(self.pred)\n \n RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu!\n </denchmark-code>\n \n <denchmark-h:h2>Expected behavior</denchmark-h>\n \n Running inference on a batch should not cause an error if one of the images in the batch contains no objects.\n Example (one image only, containing some object):\n import torch\n import PIL.Image\n \n yolo = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)\n yolo.to('cuda:0')\n yolo = yolo.autoshape()\n \n images = [\n     PIL.Image.open('picture.jpg'),\n ]\n \n det = yolo(images)\n det.pred\n <denchmark-code>[tensor([[1.87591e+02, 5.51864e+02, 3.39853e+02, 8.59066e+02, 8.55936e-01, 7.60000e+01],\n          [5.86590e+02, 4.37439e+02, 7.19651e+02, 6.74310e+02, 6.16857e-01, 6.70000e+01],\n          [5.87071e+02, 4.37369e+02, 7.17961e+02, 6.76576e+02, 4.29617e-01, 6.50000e+01],\n          [7.52062e+02, 0.00000e+00, 9.28404e+02, 1.42560e+02, 3.03035e-01, 5.80000e+01],\n          [1.04925e+03, 1.45816e+02, 1.15221e+03, 5.04700e+02, 2.93337e-01, 7.60000e+01],\n          [9.32327e+02, 5.56952e+02, 1.24399e+03, 8.11386e+02, 2.89080e-01, 6.70000e+01],\n          [9.30411e+02, 5.55609e+02, 1.25147e+03, 8.10758e+02, 2.72438e-01, 6.30000e+01]], device='cuda:0')]\n </denchmark-code>\n \n <denchmark-h:h2>Environment</denchmark-h>\n \n \n pythorch 1.7.0\n torchvision 0.8.1\n \n <denchmark-h:h2>Additional context</denchmark-h>\n \n The bug happens because the method  called <denchmark-link:https://github.com/ultralytics/yolov5/blob/791dadb51c7da5641a4841eb8a5f319bbc24982b/models/common.py#L166>on line 166 of models/common.py</denchmark-link>\n . The method correctly returns an empty tensor if no objects are detected, however, the tensor is always placed on the CPU, regardless of the original placement:\n Using the same two images as before and running in the debugger we can we print y just after the call to non_max_suppression. The first tensor, relative to the first image, is empty but is on the wrong device\n <denchmark-code>[\n     tensor([], size=(0, 6)), \n     tensor([[1.89654e+02, 5.47858e+02, 3.39484e+02, 8.56558e+02, 8.70220e-01, 7.60000e+01],\n         [5.87016e+02, 4.40495e+02, 7.19600e+02, 6.72573e+02, 6.85066e-01, 6.70000e+01],\n         [9.31165e+02, 5.56877e+02, 1.24205e+03, 8.10770e+02, 5.99013e-01, 6.70000e+01],\n         [5.87003e+02, 4.37579e+02, 7.18493e+02, 6.75023e+02, 5.25025e-01, 6.50000e+01],\n         [7.55756e+02, 0.00000e+00, 9.21378e+02, 1.41996e+02, 4.79300e-01, 5.80000e+01],\n         [6.54120e+00, 2.76469e+02, 4.11797e+02, 5.17683e+02, 3.27896e-01, 7.30000e+01]], device='cuda:0')\n ]\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "baldassarreFe", "commentT": "2020-12-06T16:02:34Z", "comment_text": "\n \t\tHello <denchmark-link:https://github.com/baldassarreFe>@baldassarreFe</denchmark-link>\n , thank you for your interest in  YOLOv5! Please visit our  <denchmark-link:https://github.com/ultralytics/yolov5/wiki#tutorials>Tutorials</denchmark-link>\n  to get started, where you can find quickstart guides for simple tasks like <denchmark-link:https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data>Custom Data Training</denchmark-link>\n  all the way to advanced concepts like <denchmark-link:https://github.com/ultralytics/yolov5/issues/607>Hyperparameter Evolution</denchmark-link>\n .\n If this is a \ud83d\udc1b Bug Report, please provide screenshots and minimum viable code to reproduce your issue, otherwise we can not help you.\n If this is a custom training  Question, please provide as much information as possible, including dataset images, training logs, screenshots, and a public link to online <denchmark-link:https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data#visualize>W&B logging</denchmark-link>\n  if available.\n For business inquiries or professional support requests please visit <denchmark-link:https://www.ultralytics.com>https://www.ultralytics.com</denchmark-link>\n  or email Glenn Jocher at <denchmark-link:mailto:glenn.jocher@ultralytics.com>glenn.jocher@ultralytics.com</denchmark-link>\n .\n <denchmark-h:h2>Requirements</denchmark-h>\n \n Python 3.8 or later with all <denchmark-link:https://github.com/ultralytics/yolov5/blob/master/requirements.txt>requirements.txt</denchmark-link>\n  dependencies installed, including . To install run:\n $ pip install -r requirements.txt\n <denchmark-h:h2>Environments</denchmark-h>\n \n YOLOv5 may be run in any of the following up-to-date verified environments (with all dependencies including <denchmark-link:https://developer.nvidia.com/cuda>CUDA</denchmark-link>\n /<denchmark-link:https://developer.nvidia.com/cudnn>CUDNN</denchmark-link>\n , <denchmark-link:https://www.python.org/>Python</denchmark-link>\n  and <denchmark-link:https://pytorch.org/>PyTorch</denchmark-link>\n  preinstalled):\n \n Google Colab Notebook with free GPU: \n Kaggle Notebook with free GPU: https://www.kaggle.com/ultralytics/yolov5\n Google Cloud Deep Learning VM. See GCP Quickstart Guide\n Docker Image https://hub.docker.com/r/ultralytics/yolov5. See Docker Quickstart Guide \n \n <denchmark-h:h2>Status</denchmark-h>\n \n <denchmark-link:https://github.com/ultralytics/yolov5/workflows/CI%20CPU%20testing/badge.svg></denchmark-link>\n \n If this badge is green, all <denchmark-link:https://github.com/ultralytics/yolov5/actions>YOLOv5 GitHub Actions</denchmark-link>\n  Continuous Integration (CI) tests are currently passing. CI tests verify correct operation of YOLOv5 training (<denchmark-link:https://github.com/ultralytics/yolov5/blob/master/train.py>train.py</denchmark-link>\n ), testing (<denchmark-link:https://github.com/ultralytics/yolov5/blob/master/test.py>test.py</denchmark-link>\n ), inference (<denchmark-link:https://github.com/ultralytics/yolov5/blob/master/detect.py>detect.py</denchmark-link>\n ) and export (<denchmark-link:https://github.com/ultralytics/yolov5/blob/master/models/export.py>export.py</denchmark-link>\n ) on MacOS, Windows, and Ubuntu every 24 hours and on every commit.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "baldassarreFe", "commentT": "2020-12-06T16:23:40Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/baldassarreFe>@baldassarreFe</denchmark-link>\n  thanks for the bug report. I am able to reproduce this in a Colab notebook. It looks like the best solution would be to properly initialize the empty tensors on the same device as the incoming data in the NMS function. I will take a look.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "baldassarreFe", "commentT": "2020-12-06T16:57:30Z", "comment_text": "\n \t\tI verified it works now, problems solved! :)\n <denchmark-link:https://user-images.githubusercontent.com/26833433/101286727-79c9a600-37ec-11eb-937a-906bfca59b1f.png></denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "baldassarreFe", "commentT": "2020-12-06T17:07:32Z", "comment_text": "\n \t\tThanks for the quick fix!\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "baldassarreFe", "commentT": "2020-12-06T17:09:47Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/baldassarreFe>@baldassarreFe</denchmark-link>\n  thanks for the feedback! If you see any other areas that need improvement please let us know.\n \t\t"}}}, "commit": {"commit_id": "68e6ab668b30a6014215b94e399151f8c76e471a", "commit_author": "Glenn Jocher", "commitT": "2020-12-06 17:53:38+01:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "utils\\general.py", "file_new_name": "utils\\general.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "268,280", "deleted_lines": "268,280", "method_info": {"method_name": "non_max_suppression", "method_params": "prediction,conf_thres,iou_thres,classes,agnostic,labels", "method_startline": "261", "method_endline": "347"}}}}}}}