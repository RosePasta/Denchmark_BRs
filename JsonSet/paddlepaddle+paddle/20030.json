{"BR": {"BR_id": "20030", "BR_author": "LDOUBLEV", "BRopenT": "2019-09-26T08:16:11Z", "BRcloseT": "2019-09-27T05:53:48Z", "BR_text": {"BRsummary": "layers.mul \u8ba1\u7b97double grad\u65f6\u62a5memory_size()\u7684\u9519", "BRdescription": "\n \u62a5\u9519\u73af\u5883\uff1a\n CPU/GPU\n paddle 1.5.2\n \u95ee\u9898\u590d\u73b0\u4ee3\u7801\uff1a\n <denchmark-code>def test_mul_grad_paddle_vs_torch():\n     train_program = fluid.Program()\n     start_program = fluid.Program()\n     #place = fluid.CUDAPlace(0)\n     place = fluid.CPUPlace()\n     with fluid.program_guard(train_program, start_program):\n         rng = np.random.RandomState(0)\n         inp_ = rng.uniform(-1, 1, [3, 2]).astype('float32')\n         w1_ = rng.uniform(-1, 1, [2, 5]).astype('float32')\n         w2_ = rng.uniform(-1, 1, [5, 4]).astype('float32')\n         yg_ = rng.uniform(-1, 1, [2, ]).astype('float32')\n \n         inp = fluid.layers.data('inp', [3, 2], append_batch_size=False)\n         w1 = fluid.layers.data('w1', [2, 5], append_batch_size=False)\n         w2 = fluid.layers.data('w2', [5, 4], append_batch_size=False)\n         yg = fluid.layers.data('yg', [2, ], append_batch_size=False)\n \n         inp.stop_gradient = False\n         w1.stop_gradient = False\n         w2.stop_gradient = False\n         yg.stop_gradient = False\n \n         y = fluid.layers.mul(fluid.layers.mul(inp, w1), w2)\n \n         f = y\n \n         x = [w1, w2]\n         dfdx_f1 = fluid.gradients(f, x, f)\n \n         # double gradient\n         dfdx_x_ = fluid.gradients([dfdx_f1[0]*x[0], dfdx_f1[1]*x[1]], f)\n         print(dfdx_x_)\n \n     exe = fluid.Executor(place)\n     exe.run(program=fluid.default_startup_program())\n     compiled_prog = fluid.compiler.CompiledProgram(train_program)\n \n     res = exe.run(compiled_prog, feed={'inp':inp_, 'w1':w1_, 'w2':w2_, 'yg':yg_},\n                   fetch_list=[dfdx_f1[0].name, dfdx_f1[1].name, dfdx_x[0].name)\n     print(res[0], res[1], '\\n', res[2])\n \n     \"\"\" for torch matmul \"\"\"\n     import torch\n     def n2t(x): return torch.from_numpy(np.array(x))\n \n     inp_t, w1_t, w2_t, yg_t = n2t(inp_), n2t(w1_), n2t(w2_), n2t(yg_)\n     w1_t.requires_grad = True\n     w2_t.requires_grad = True\n \n     yt = torch.matmul(torch.matmul(inp_t, w1_t), w2_t)\n \n     x = [w1_t, w2_t]\n     g = yt.detach()\n     g.requires_grad = True\n \n     dfdxt_g = torch.autograd.grad(yt, x, g, create_graph=True)\n     print(dfdxt_g[0].detach().numpy(), '\\n', dfdxt_g[1].detach().numpy())\n \n     dfdx_x = torch.autograd.grad(dfdxt_g, g, x, retain_graph=True)\n \n     np.testing.assert_allclose(dfdxt_g[0].detach().numpy(), res[0], atol=1e-5, rtol=1e-5)\n     np.testing.assert_allclose(dfdxt_g[1].detach().numpy(), res[1], atol=1e-5, rtol=1e-5)\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "LDOUBLEV", "commentT": "2019-09-26T08:16:56Z", "comment_text": "\n \t\t\u62a5\u9519\u622a\u56fe\n <denchmark-link:https://user-images.githubusercontent.com/26592129/65670971-facdcf00-e078-11e9-8f7b-19a5757e1376.png></denchmark-link>\n \n \u6253\u5370\u7684\u7b2c\u4e8c\u6b21\u8ba1\u7b97\u7684\u68af\u5ea6\u4fe1\u606f\n <denchmark-link:https://user-images.githubusercontent.com/26592129/65671005-0a4d1800-e079-11e9-994e-2398353c3b59.png></denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "LDOUBLEV", "commentT": "2019-09-27T03:01:43Z", "comment_text": "\n \t\t\u5df2\u7ecf\u63d0\u4e86pr\u4fee\u590d\n \t\t"}}}, "commit": {"commit_id": "647ff784e2fee81dab4fd7c0c7f94a820c1e7e6f", "commit_author": "lvmengsi", "commitT": "2019-09-27 13:53:47+08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "paddle\\fluid\\operators\\mul_op.cc", "file_new_name": "paddle\\fluid\\operators\\mul_op.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "279,280,281", "deleted_lines": "278,279,280", "method_info": {"method_name": "paddle::operators::MulDoubleGradMaker::Apply", "method_params": "", "method_startline": "265", "method_endline": "287"}}, "hunk_1": {"Ismethod": 1, "added_lines": "247,248", "deleted_lines": "247", "method_info": {"method_name": "paddle::operators::MulDoubleGradOp::InferShape", "method_params": "ctx", "method_startline": "242", "method_endline": "257"}}}}}}}