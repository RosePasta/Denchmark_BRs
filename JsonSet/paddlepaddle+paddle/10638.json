{"BR": {"BR_id": "10638", "BR_author": "dyning", "BRopenT": "2018-05-14T09:56:05Z", "BRcloseT": "2018-05-16T18:37:21Z", "BR_text": {"BRsummary": "smoothL1\u7684\u95ee\u9898", "BRdescription": "\n smooth L1\uff0c\u5982\u679c\u4f7f\u7528inside_weight\u548coutside_weight\uff0c\u5e76\u884c\u8fd0\u884c\u4f1a\u5361\u6b7b\u3002\u6d4b\u8bd5\u7a0b\u5e8f\u5982\u4e0b\uff1a\n import paddle\n import paddle.fluid as fluid\n \n import sys, os\n import time\n import numpy as np\n import math\n import random \n \n def reader_test():\n     def reader():\n         index = range(0, 10000)\n         random.shuffle(index)\n         for idx in index:\n             image = np.random.rand(3, 224, 224)\n             loc = np.random.rand(4)\n             weight = np.random.rand(4)\n             yield image, loc, weight     \n     return reader \n \n def main():\n     data = fluid.layers.data(name='data', shape=[3, 224, 224], dtype='float32')\n     bbox_targets = fluid.layers.data(name='bbox_targets', shape=[4], dtype='float32')\n     bbox_loss_weights = fluid.layers.data(name='bbox_loss_weights', shape=[4], dtype='float32')\n     fea_fc = fluid.layers.fc(input=data, size=1024, act='relu') \n     fc_loc = fluid.layers.fc(input=fea_fc, size=4, act='relu') \n     #loss_loc = fluid.layers.smooth_l1(fc_loc, bbox_targets)\n     loss_loc = fluid.layers.smooth_l1(fc_loc, bbox_targets, inside_weight=bbox_loss_weights, outside_weight=bbox_loss_weights)\n     avg_loss = fluid.layers.mean(x=loss_loc)\n \n     bd = [80000]\n     lr = [0.001, 0.0001]\n     optimizer = fluid.optimizer.Momentum(learning_rate=fluid.layers.piecewise_decay(boundaries=bd, values=lr), momentum=0.9,\n         regularization=fluid.regularizer.L2Decay(1e-4))\n     opts = optimizer.minimize(avg_loss)  \n     place = fluid.CUDAPlace(0)\n     exe = fluid.Executor(place)\n     exe.run(fluid.default_startup_program())    \n     \n     train_reader = paddle.batch(reader_test(), batch_size=16)\n     feeder = fluid.DataFeeder(place=place, feed_list=[data, bbox_targets, bbox_loss_weights])\n     \n     train_exe = fluid.ParallelExecutor(use_cuda=True, loss_name=avg_loss.name)\n \n     for pass_id in range(0, 20):\n         for batch_id, blobs in enumerate(train_reader()):\n             print batch_id\n             train_exe.run([avg_loss.name], feed=feeder.feed(blobs))\n             #exe.run(fluid.default_main_program(), feed=feeder.feed(blobs), fetch_list=[])\n     print \"ok\"  \n \n \n if __name__ == '__main__':\n     main()\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "dyning", "commentT": "2018-06-08T12:34:04Z", "comment_text": "\n \t\t\u8d5e\uff01\n \t\t"}}}, "commit": {"commit_id": "14248a64d7016850ae0bd51752b95aaf1dac295c", "commit_author": "Yu Yang", "commitT": "2018-05-16 11:37:20-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "paddle\\fluid\\framework\\details\\op_handle_base.h", "file_new_name": "paddle\\fluid\\framework\\details\\op_handle_base.h", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "73,74,75,76,77,78,79", "deleted_lines": null, "method_info": {"method_name": "paddle::framework::details::OpHandleBase::NoDupInputSize", "method_params": "", "method_startline": "73", "method_endline": "79"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "paddle\\fluid\\framework\\details\\threaded_ssa_graph_executor.cc", "file_new_name": "paddle\\fluid\\framework\\details\\threaded_ssa_graph_executor.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "177", "deleted_lines": "177", "method_info": {"method_name": "paddle::framework::details::ThreadedSSAGraphExecutor::InsertPendingOp", "method_params": "pending_ops,op_instance", "method_startline": "174", "method_endline": "178"}}}}}}}