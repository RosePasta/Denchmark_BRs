{"BR": {"BR_id": "170", "BR_author": "tonyyang-svail", "BRopenT": "2019-01-22T01:24:12Z", "BRcloseT": "2020-04-28T23:40:18Z", "BR_text": {"BRsummary": "GoYacc: improve syntax error messages", "BRdescription": "\n The error message in parser can be improved.\n \n One good read: https://research.swtch.com/yyerror\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "tonyyang-svail", "commentT": "2020-04-28T21:43:26Z", "comment_text": "\n \t\tThank you <denchmark-link:https://github.com/tonyyang-svail>@tonyyang-svail</denchmark-link>\n  for recommending the blog post by Ross Cox. I read it.\n This post compares two approaches to writing a parser: (1) by-hand and using recursion descending, and (2) using a parser generator like yacc/goyacc/bison.  The former is known better at generating meaningful suggestions for syntax errors.  Russ Cox showed that by adding a post-processing step, he enabled the bison-generated parsers of the Go compiler to generate meaningful suggestions.\n However, when I dig into the Go codebase, I realized that after the above work, Go authors finally turned completely from the bison-generated parser to hand-written parser, in which, I found the meaningful suggestions mentioned in the above blog post, but in another form.\n After reading this, I realized that parser generators are good for a project in its early stage.  After the maturation of the project, the author can rewrite the parser by-hand to make it generate meaningful error messages.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "tonyyang-svail", "commentT": "2020-04-28T21:49:24Z", "comment_text": "\n \t\tA recent <denchmark-link:https://github.com/sql-machine-learning/sqlflow/issues/2165#issue-608229999>bug report</denchmark-link>\n  presents a case that refers back to this very old issue.  To make the discussion self-contained, let me copy the case from <denchmark-link:https://github.com/Yancey1989>@Yancey1989</denchmark-link>\n  to here:\n When users input the following SQLFlow program\n <denchmark-code>SELECT * FROM alifin_jtest_dev.sqlflow_titanic_train\n TO TO TRAIN DNNClassifier WITH\n model.hidden_units=[200, 200, 200]\n model.no_exits=abc,\n LABEL survived\n INTO my_titanic_model;\n Error Message:\n </denchmark-code>\n \n She would get the following error message\n <denchmark-code>runSQLProgram error: syntax error: at (3 ~ 5)-th runes near \"TO TRAIN D\"\n </denchmark-code>\n \n However, the above information is not very meaningful. What she wants might be the following.\n <denchmark-code>syntax error: ... TO TO TRAIN ...\"\n </denchmark-code>\n \n Unfortunately, given what I learned and summarized in <denchmark-link:https://github.com/sql-machine-learning/sqlflow/issues/170#issuecomment-620871377>#170 (comment)</denchmark-link>\n , I am afraid that at the right moment, we still need to stick on the goyacc-generated parser.  Therefore, we could either use Ross Cox's method, or, we give it a quick fix.  Let us do a quick fix.\n I think Ross Cox's method is innovative and interesting.  However, given that the later choice of Go Authors is a hand-written parser, our next step might be to rewrite our parser by hand, other than implementing Ross Cox's method.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "tonyyang-svail", "commentT": "2020-04-28T22:02:29Z", "comment_text": "\n \t\tAs we cannot make the syntax error message more meaningful, let us try to make it less redundant.\n Here is an example of the current error message:\n <denchmark-code>runSQLProgram error: syntax error: at (3 ~ 5)-th runes near \"TO TRAIN D\"\n </denchmark-code>\n \n \n \n The caller runSQLProgram error: is not meaningful. It only tells the name of the function that processed the SQLFlow program.  However, users don't care about which function processed their program.\n \n \n The syntax error: is from goyacc, as shown in\n \n \n \n sqlflow/pkg/parser/lexer.go\n \n \n         Lines 47 to 50\n       in\n       388a9cd\n \n \n \n \n \n \n  func (l *lexer) Error(e string) { \n \n \n \n  l.err = fmt.Errorf(\"%v: at (%d ~ %d)-th runes near %.10q\", \n \n \n \n  e, l.previous, l.pos, l.input[l.previous:]) \n \n \n \n  } \n \n \n \n \n \n \n \n the part at (3 ~ 5)-th runes doesn't make sense to the users.  The position starts from the end of the SELECT statement due to the collaborative parsing algorithm, which is out of users' interest.\n \n \n Let me\n \n remove the position,\n change near to before or near, and\n add a URL pointing to SQLFlow syntax guide https://sqlflow.org/sqlflow/doc/language_guide\n \n \t\t"}}}, "commit": {"commit_id": "677f901fc67fd3d58bdbc0b82c0047b3b0143ac4", "commit_author": "Yi Wang", "commitT": "2020-04-28 16:40:17-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "pkg\\parser\\lexer.go", "file_new_name": "pkg\\parser\\lexer.go", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "48,49,50,51", "deleted_lines": "48,49", "method_info": {"method_name": "Error", "method_params": "string", "method_startline": "47", "method_endline": "52"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "pkg\\parser\\sqlflow_parser_test.go", "file_new_name": "pkg\\parser\\sqlflow_parser_test.go", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "309", "deleted_lines": "309"}}}}}}