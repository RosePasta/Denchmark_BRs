{"BR": {"BR_id": "263", "BR_author": "ryanjulian", "BRopenT": "2018-08-09T21:59:03Z", "BRcloseT": "2018-08-11T03:14:24Z", "BR_text": {"BRsummary": "CategorialMLPPolicy is broken", "BRdescription": "\n import gym\n \n from garage.baselines import LinearFeatureBaseline\n from garage.misc.instrument import run_experiment\n from garage.misc.instrument import stub\n from garage.tf.algos import TRPO\n from garage.tf.envs import TfEnv\n from garage.tf.policies import CategoricalMLPPolicy\n \n # Need to wrap in a tf environment and force_reset to true\n # see https://github.com/openai/rllab/issues/87#issuecomment-282519288\n env = TfEnv(gym.make(\"CartPole-v0\"))\n \n policy = CategoricalMLPPolicy(\n     name=\"policy\", env_spec=env.spec, hidden_sizes=(32, 32))\n \n baseline = LinearFeatureBaseline(env_spec=env.spec)\n \n algo = TRPO(\n     env=env,\n     policy=policy,\n     baseline=baseline,\n     batch_size=4000,\n     max_path_length=200,\n     n_itr=120,\n     discount=0.99,\n     step_size=0.01,\n )\n \n algo.train()\n (garage) rjulian@tars:~/code/garage$ python examples/tf/trpo_gym_tf_cartpole.py \n WARN: gym.spaces.Box autodetected dtype as <class 'numpy.float32'>. Please provide explicit dtype.\n Traceback (most recent call last):\n   File \"examples/tf/trpo_gym_tf_cartpole.py\", line 27, in <module>\n     step_size=0.01,\n   File \"/home/rjulian/code/garage/garage/tf/algos/trpo.py\", line 40, in __init__\n     **kwargs)\n   File \"/home/rjulian/code/garage/garage/tf/algos/npo.py\", line 52, in __init__\n     super(NPO, self).__init__(policy=policy, **kwargs)\n   File \"/home/rjulian/code/garage/garage/tf/algos/batch_polopt.py\", line 90, in __init__\n     self.init_opt()\n   File \"/home/rjulian/code/garage/garage/tf/algos/npo.py\", line 62, in init_opt\n     pol_loss, pol_kl = self._build_policy_loss(pol_loss_inputs)\n   File \"/home/rjulian/code/garage/garage/tf/algos/npo.py\", line 218, in _build_policy_loss\n     policy_entropy = self._build_entropy_term(i)\n   File \"/home/rjulian/code/garage/garage/tf/algos/npo.py\", line 315, in _build_entropy_term\n     name=\"policy_dist_info_flat\")\n   File \"/home/rjulian/code/garage/garage/tf/policies/categorical_mlp_policy.py\", line 71, in dist_info_sym\n     return dict(prob)\n   File \"/home/rjulian/miniconda2/envs/garage/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 436, in __iter__\n     \"Tensor objects are not iterable when eager execution is not \"\n TypeError: Tensor objects are not iterable when eager execution is not enabled. To iterate over this tensor use tf.map_fn.\n (garage) rjulian@tars:~/code/garage$ \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ryanjulian", "commentT": "2018-08-09T22:14:31Z", "comment_text": "\n \t\tSimilarly, once fixed with\n     @overrides\n     def dist_info_sym(self, obs_var, state_info_vars=None, name=None):\n         with tf.name_scope(name, \"dist_info_sym\", [obs_var, state_info_vars]):\n             with tf.name_scope(self._prob_network_name, values=[obs_var]):\n                 prob = L.get_output(\n                     self._l_prob, {self._l_obs: tf.cast(obs_var, tf.float32)})\n             return dict(prob=prob)  # fix here\n Traceback (most recent call last):\n   File \"/home/rjulian/code/garage/scripts/run_experiment.py\", line 191, in <module>\n     run_experiment(sys.argv)\n   File \"/home/rjulian/code/garage/scripts/run_experiment.py\", line 171, in run_experiment\n     method_call(variant_data)\n   File \"examples/tf/ppo_pendulum.py\", line 47, in run_task\n     algo.train()\n   File \"/home/rjulian/code/garage/garage/tf/algos/batch_polopt.py\", line 123, in train\n     paths = self.obtain_samples(itr)\n   File \"/home/rjulian/code/garage/garage/tf/algos/batch_polopt.py\", line 104, in obtain_samples\n     return self.sampler.obtain_samples(itr)\n   File \"/home/rjulian/code/garage/garage/tf/samplers/vectorized_sampler.py\", line 65, in obtain_samples\n     next_obses, rewards, dones, env_infos = self.vec_env.step(actions)\n   File \"/home/rjulian/code/garage/garage/tf/envs/vec_env_executor.py\", line 24, in step\n     dones[self.ts >= self.max_path_length] = True\n IndexError: boolean index did not match indexed array along dimension 0; dimension is 1 but corresponding boolean dimension is 20\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ryanjulian", "commentT": "2018-08-09T22:46:44Z", "comment_text": "\n \t\tShould we change the following code in garage/envs/proxy_env.py? Because gym.Env has no attribute log_diagnostics, why not set this to pass?\n <denchmark-code>    def log_diagnostics(self, paths, *args, **kwargs):\n         self._wrapped_env.log_diagnostics(paths, *args, **kwargs)\n </denchmark-code>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "ryanjulian", "commentT": "2018-08-09T22:49:29Z", "comment_text": "\n \t\tThis should be addressed in <denchmark-link:https://github.com/rlworkgroup/garage/issues/248>#248</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "50b9631a89384059ffb0fbb0d55b4a70535c7df3", "commit_author": "Chang Su", "commitT": "2018-08-10 20:14:23-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "garage\\tf\\distributions\\categorical.py", "file_new_name": "garage\\tf\\distributions\\categorical.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "94", "deleted_lines": "94", "method_info": {"method_name": "entropy", "method_params": "self,info", "method_startline": "92", "method_endline": "94"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "garage\\tf\\policies\\categorical_mlp_policy.py", "file_new_name": "garage\\tf\\policies\\categorical_mlp_policy.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "71", "deleted_lines": "71", "method_info": {"method_name": "dist_info_sym", "method_params": "self,obs_var,state_info_vars,name", "method_startline": "66", "method_endline": "71"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "garage\\tf\\policies\\deterministic_mlp_policy.py", "file_new_name": "garage\\tf\\policies\\deterministic_mlp_policy.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "45", "deleted_lines": "45"}}}, "file_3": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "tests\\tf\\policies\\test_categorical_mlp_policy.py"}}}}