{"BR": {"BR_id": "1349", "BR_author": "gagkhan", "BRopenT": "2020-04-25T01:56:00Z", "BRcloseT": "2020-07-01T00:42:19Z", "BR_text": {"BRsummary": "RaySampler does not use all workers", "BRdescription": "\n In release 2019.10, <denchmark-link:https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/sampler/ray_sampler.py>RaySampler</denchmark-link>\n  sees only one of the workers as idle for all iterations after the first iteration. This can be seen with <denchmark-link:https://github.com/rlworkgroup/garage/blob/release-2019.10/examples/tf/trpo_swimmer_ray_sampler.py>examples/tf/trpo_swimmer_ray_sampler.py</denchmark-link>\n .\n To me it looks like  is not correctly updated at the end of  <denchmark-link:https://github.com/rlworkgroup/garage/blob/d6c993526c23c289ebc94635a78186d9bf197f32/src/garage/sampler/ray_sampler.py#L130>here</denchmark-link>\n . Only those workers which have returned with a result are put back in the idle pool. This is a problem because results from some workers are not processed at the end and these workers don't go back into the idle pool.\n A quick fix (?) is to reset the list of idle workers ids to all workers ids at the start of obtain samples(). This does result in all the workers being used for all iterations. Since the agent parameters are updated in the next iteration, the samples from the previously not ready workers must be valid. However, I am not totally sure.\n <denchmark-link:https://github.com/avnishn>@avnishn</denchmark-link>\n  <denchmark-link:https://github.com/ryanjulian>@ryanjulian</denchmark-link>\n  Appreciate it if the fix can be back-ported to 2019.10!\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "gagkhan", "commentT": "2020-04-25T15:41:19Z", "comment_text": "\n \t\tHi Gagan,\n Thanks for the bug report. We'll definitely look into why it's not using all workers.\n Unfortunately, it doesn't look like your explanation why it's happening is quite right.\n In particular, workers are still added to  <denchmark-link:https://github.com/rlworkgroup/garage/blob/d6c993526c23c289ebc94635a78186d9bf197f32/src/garage/sampler/ray_sampler.py#L163>here</denchmark-link>\n  (which was a super confusing location for it to happen, hence why it was refactored out since then). There's probably some other reason not all of the workers are being utilized fully, but it's not clear to me what it is.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "gagkhan", "commentT": "2020-04-25T17:40:13Z", "comment_text": "\n \t\tHi KR,\n Yes, I did see that self._process_trajectory() updates the list of idle workers but this is called only in the while loop (which exits after collecting enough samples). After the last iteration of the while loop we still have some workers for which we have not called _process_trajectory() on their results. These workers don't go back into the idle pool because processing the results is the only place where self._idle_worker_ids are repopulated. Just to re-iterate, I think the issue is in the last iteration of the while loop to collect samples.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "gagkhan", "commentT": "2020-05-01T19:39:20Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/krzentner>@krzentner</denchmark-link>\n  do you need any more information from @gagankhandate for this issue? Can you help triage (it i.e. is this a bug or not?)\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "gagkhan", "commentT": "2020-05-27T21:44:20Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/krzentner>@krzentner</denchmark-link>\n  bump!\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "gagkhan", "commentT": "2020-07-01T00:05:02Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ryanjulian>@ryanjulian</denchmark-link>\n  I thought we created the fix for this. Is there still an issue?\n \t\t"}}}, "commit": {"commit_id": "888209b24d7898b09609a3f564cd157fa4cf25d1", "commit_author": "Avnish Narayan", "commitT": "2020-06-22 14:09:40-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\garage\\sampler\\ray_sampler.py", "file_new_name": "src\\garage\\sampler\\ray_sampler.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "92,115,116,117,118,119,120,121,122,124,126,139,143,144", "deleted_lines": "92,101,116,121", "method_info": {"method_name": "obtain_samples", "method_params": "self,itr,num_samples", "method_startline": "70", "method_endline": "146"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\garage\\sampler\\test_ray_batched_sampler.py", "file_new_name": "tests\\garage\\sampler\\test_ray_batched_sampler.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94", "deleted_lines": null, "method_info": {"method_name": "test_ray_sampler_idle_workers", "method_params": "self", "method_startline": "74", "method_endline": "94"}}, "hunk_1": {"Ismethod": 1, "added_lines": "61,62,68,69,70", "deleted_lines": "61,62,68,69,70", "method_info": {"method_name": "test_ray_batch_sampler", "method_params": "self", "method_startline": "47", "method_endline": "72"}}}}}}}