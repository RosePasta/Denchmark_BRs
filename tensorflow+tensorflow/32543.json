{"BR": {"BR_id": "32543", "BR_author": "ExpectationMax", "BRopenT": "2019-09-15T16:26:56Z", "BRcloseT": "2019-09-25T20:24:34Z", "BR_text": {"BRsummary": "RNN layer does not reset dropout masks of RNNCell", "BRdescription": "\n System information\n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS Mojave 10.14.6\n TensorFlow installed from (source or binary): binary\n TensorFlow version (use command below):  v1.12.1-9392-gf3c7314d83 1.15.0-rc0\n Python version: 3.7.4\n \n Describe the current behavior\n The RNN layer with an RNNCell does not reset the states of dropout masks compared to the layer implementations of the cells. Thus the behavior of tf.keras.layers.GRU(10) != tf.keras.layers.RNN(tf.keras.layers.GRUCell(10)).\n This is especially problematic, because the <denchmark-link:https://www.tensorflow.org/beta/guide/keras/rnn#rnn_layers_and_rnn_cells>Keras RNN API tutorial</denchmark-link>\n  states both approaches are mathematically equivalent.\n Describe the expected behavior\n The RNN layer should check the type of the RNNCell and, if it is a subclass of DropoutRNNCellMixin, reset the dropout masks after each call. By calling cell.reset_recurrent_dropout_mask() and cell.reset_dropout_mask.\n \n Partially copied from <denchmark-link:https://github.com/tensorflow/tensorflow/issues/29391>#29391</denchmark-link>\n \n from __future__ import absolute_import, division, print_function\n import numpy as np\n \n import tensorflow as tf\n tf.enable_eager_execution()\n \n \n tf.enable_eager_execution()\n print(tf.__version__)\n data = np.random.normal(0, 1, (1, 10, 2)).astype(np.float32)\n rnn = tf.keras.layers.GRU(units=10, dropout=0.5,\n                                    recurrent_dropout=0.5)\n print(set([rnn(data, training=True).numpy()[0, 0] for _ in range(5)]))\n \n rnn_cell = tf.keras.layers.GRUCell(units=10, dropout=0.5,\n                                    recurrent_dropout=0.5)\n rnn = tf.keras.layers.RNN(rnn_cell)\n print(set([rnn(data, training=True).numpy()[0, 0] for _ in range(5)]))\n Output:\n <denchmark-code>WARNING:tensorflow:From check_dropout.py:5: The name tf.enable_eager_execution is deprecated. Please use tf.compat.v1.enable_eager_execution instead.\n \n 1.15.0-rc0\n {0.04537238, 0.15487108, 0.0, 0.08881481, 0.055508718}  # Different dropout mask was used for each call\n {-0.34464198}  # Same dropout mask was used for each call\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ExpectationMax", "commentT": "2019-09-16T06:20:45Z", "comment_text": "\n \t\tI have tried on colab with TF 1.15.0-rc0 , nightly versions and was able to reproduce the issue.Please, find the gist <denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/d29fc400d2933fbf3efedfe1311f9a83/untitled186.ipynb>here</denchmark-link>\n .Thanks!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ExpectationMax", "commentT": "2019-09-24T23:13:17Z", "comment_text": "\n \t\tThanks for reporting the issue, let me fix it.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "ExpectationMax", "commentT": "2019-09-25T20:24:35Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=32543>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=32543>No</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "2eb6dc0f2e7f5455d368c59c35458709eef03a55", "commit_author": "Scott Zhu", "commitT": "2019-09-25 13:13:18-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\keras\\layers\\convolutional_recurrent.py", "file_new_name": "tensorflow\\python\\keras\\layers\\convolutional_recurrent.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "934", "deleted_lines": "934,935", "method_info": {"method_name": "call", "method_params": "self,inputs,mask,training,initial_state", "method_startline": "933", "method_endline": "938"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow\\python\\keras\\layers\\recurrent.py", "file_new_name": "tensorflow\\python\\keras\\layers\\recurrent.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1534", "deleted_lines": null, "method_info": {"method_name": "call", "method_params": "self,inputs,mask,training,initial_state", "method_startline": "1533", "method_endline": "1536"}}, "hunk_1": {"Ismethod": 1, "added_lines": "874,875,876,877", "deleted_lines": null, "method_info": {"method_name": "_maybe_reset_cell_dropout_mask", "method_params": "self,cell", "method_startline": "874", "method_endline": "877"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow\\python\\keras\\layers\\recurrent_test.py", "file_new_name": "tensorflow\\python\\keras\\layers\\recurrent_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "824,825,826,827,828,829,830,831,833,834,835,836,837,838,839,840,841,842,843,844", "deleted_lines": "824", "method_info": {"method_name": "test_dropout_mask_reuse.verify", "method_params": "rnn_layer", "method_startline": "824", "method_endline": "844"}}, "hunk_1": {"Ismethod": 1, "added_lines": "798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847", "deleted_lines": "798,799,800,801,802,803,804,805,806,807,808,809,810,811,813,814,815,816,817,818,819,820,821,822,823,824", "method_info": {"method_name": "test_dropout_mask_reuse", "method_params": "self", "method_startline": "794", "method_endline": "847"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\keras\\layers\\recurrent_v2.py", "file_new_name": "tensorflow\\python\\keras\\layers\\recurrent_v2.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "388", "deleted_lines": "388,389", "method_info": {"method_name": "call", "method_params": "self,inputs,mask,training,initial_state", "method_startline": "370", "method_endline": "425"}}}}}}}