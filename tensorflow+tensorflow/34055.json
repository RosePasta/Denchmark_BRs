{"BR": {"BR_id": "34055", "BR_author": "keithchugg", "BRopenT": "2019-11-07T00:34:22Z", "BRcloseT": "2019-11-19T17:24:57Z", "BR_text": {"BRsummary": "model.reset_states() does not work for bidirectional-RNNs in tf.keras.", "BRdescription": "\n System information\n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): YES.\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS 10.14.6\n TensorFlow installed from (source or binary): binary\n TensorFlow version (use command below): 2.0.0\n Python version: 3.7.4\n GPU model and memory: none (MacBook Pro, Core i5, Iris Graphics 6100, 1.5 GB)\n \n Describe the current behavior\n State handling in RNNs with a Bidirectional wrapper has changed in tf.keras from keras with TF 1.x.  In the old keras with TF 1.x, using stateful=True in a bidi-RNN had no effect -- i.e., all bidi-RNN models behaved as if  stateful=False.  Therefore model.reset_states() did not do anything.\n In the new tf.keras, stateful=True in a bidi-RNN does have an effect -- the fwd-RNN is stateful and the bwd-RNN is stateful.  This is a good change IMO -- even though stateful bidi-RNNs are unusual, this is the best way to implement.  However, in tf.keras, the model.reset_states() does not do anything for bidi-RNN models (SimpleRNN, GRU, LSTM).\n Describe the expected behavior\n For the minimal example script provided below, here is the output:\n <denchmark-code>FWD::\n non_stateful: [ 1.   -0.5   0.25]\n stateful: [ 1.   -0.5   0.25]\n delta: [0. 0. 0.]\n BWD::\n non_stateful: [1. 0. 0.]\n stateful: [1. 0. 0.]\n delta: [0. 0. 0.]\n FWD::\n non_stateful: [ 1.   -0.5   0.25]\n stateful: [ 0.875   -0.4375   0.21875]\n delta: [-0.125    0.0625  -0.03125]\n BWD::\n non_stateful: [1. 0. 0.]\n stateful: [ 0.875  0.25  -0.5  ]\n delta: [-0.125  0.25  -0.5  ]\n \n ** RESETING STATES in STATEFUL MODEL **\n \n FWD::\n non_stateful: [ 1.   -0.5   0.25]\n stateful: [ 0.890625   -0.4453125   0.22265625]\n delta: [-0.109375    0.0546875  -0.02734375]\n BWD::\n non_stateful: [1. 0. 0.]\n stateful: [ 0.890625  0.21875  -0.4375  ]\n delta: [-0.109375  0.21875  -0.4375  ]\n </denchmark-code>\n \n The results after the STATE RESET  should be the same as the first set of results -- i.e., the last (third) set of results should produce the same result for the stateful and non-stateful models (same as the first set of results).\n Code to reproduce the issue\n import numpy as np\n TF2 = True\n if TF2:\n \t### currently, there is a bug in tf.keras: model.reset_states() does not work\n \tfrom tensorflow.keras.layers import Input, Dense, SimpleRNN, GRU, LSTM, Bidirectional\n \tfrom tensorflow.keras.models import Model\n else:\n \t### in the old keras, bidi-RNNs with stateful=True behave smae as stateful=False\n \tfrom keras.layers import Input, Dense, SimpleRNN, GRU, LSTM, Bidirectional\n \tfrom keras.models import Model\n \n sequence_length = 3\n feature_dim = 1\n features_in = Input(batch_shape=(1, sequence_length, feature_dim)) \n \n rnn_out = Bidirectional( SimpleRNN(1, activation=None, use_bias=False, return_sequences=True, return_state=False, stateful=False))(features_in)\n stateless_model = Model(inputs=[features_in], outputs=[rnn_out])\n \n stateful_rnn_out = Bidirectional( SimpleRNN(1, activation=None, use_bias=False, return_sequences=True, return_state=False, stateful=True))(features_in)\n stateful_model = Model(inputs=features_in, outputs=stateful_rnn_out)\n \n toy_weights = [ np.asarray([[1.0]], dtype=np.float32), np.asarray([[-0.5]], dtype=np.float32), np.asarray([[1.0]], dtype=np.float32), np.asarray([[-0.5]], dtype=np.float32)]\n \n stateless_model.set_weights(toy_weights)\n stateful_model.set_weights(toy_weights)\n \n x_in = np.zeros(sequence_length)\n x_in[0] = 1\n x_in = x_in.reshape( (1, sequence_length, feature_dim) )\n \n def print_bidi_out(non_stateful_out, stateful_out):\n \tfb = ['FWD::', 'BWD::']\n \n \tfor i in range(2):\n \t\tprint(fb[i])\n \t\tprint(f'non_stateful: {non_stateful_out.T[i]}')\n \t\tprint(f'stateful: {stateful_out.T[i]}')\n \t\tprint(f'delta: {stateful_out.T[i]-non_stateful_out.T[i]}')\n \n \n non_stateful_out = stateless_model.predict(x_in).reshape((sequence_length,2))\n stateful_out = stateful_model.predict(x_in).reshape((sequence_length,2))\n print_bidi_out(non_stateful_out, stateful_out)\n \n non_stateful_out = stateless_model.predict(x_in).reshape((sequence_length,2))\n stateful_out = stateful_model.predict(x_in).reshape((sequence_length,2))\n print_bidi_out(non_stateful_out, stateful_out)\n \n print('\\n** RESETING STATES in STATEFUL MODEL **\\n')\n stateful_model.reset_states()\n non_stateful_out = stateless_model.predict(x_in).reshape((sequence_length,2))\n stateful_out = stateful_model.predict(x_in).reshape((sequence_length,2))\n print_bidi_out(non_stateful_out, stateful_out)\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "keithchugg", "commentT": "2019-11-07T20:29:55Z", "comment_text": "\n \t\tNote: this is an issue with tf.keras vs. keras (not TF 1.x vs TF 2.0)\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "keithchugg", "commentT": "2019-11-08T08:14:13Z", "comment_text": "\n \t\tI could replicate issue on colab with Tf 2.0.\n Please take a look at <denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/0d4771e1d00b215c8f06577915bf7fef/untitled246.ipynb>gist</denchmark-link>\n . Thanks!\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "keithchugg", "commentT": "2019-11-19T17:24:58Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34055>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34055>No</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "7cea9a4edfd181771da97db944e89551b62195ce", "commit_author": "Scott Zhu", "commitT": "2019-11-18 17:38:12-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\python\\keras\\layers\\wrappers.py", "file_new_name": "tensorflow\\python\\keras\\layers\\wrappers.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "424,425,426,427,428,429", "deleted_lines": "462,463,464,465,466"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\keras\\layers\\wrappers_test.py", "file_new_name": "tensorflow\\python\\keras\\layers\\wrappers_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "554,555,556,557,559,560,561,562,563,564,565", "deleted_lines": "554,555", "method_info": {"method_name": "test_bidirectional_statefulness", "method_params": "self", "method_startline": "539", "method_endline": "567"}}}}}}}