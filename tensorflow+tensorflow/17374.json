{"BR": {"BR_id": "17374", "BR_author": "mixalturek", "BRopenT": "2018-03-02T08:55:38Z", "BRcloseT": "2020-01-24T21:27:29Z", "BR_text": {"BRsummary": "Potential resource leaks caused by unclear Java examples", "BRdescription": "\n <denchmark-h:h3>System information</denchmark-h>\n \n Java examples at <denchmark-link:https://www.tensorflow.org/>https://www.tensorflow.org/</denchmark-link>\n  for tensorflow 1.6.0.\n <denchmark-h:h3>Describe the problem</denchmark-h>\n \n  returns list of closables, Javadoc clearly states that the caller is responsible to free all of them. None of the Java examples I found at <denchmark-link:https://www.tensorflow.org/>https://www.tensorflow.org/</denchmark-link>\n  highlights that, I realized it by happy accident during in-depth reading implementation in Session.java quite long time after I wrote my code that uses TensorFlow.\n <denchmark-code>    /**\n      * Execute the graph fragments necessary to compute all requested fetches.\n      *\n      * <p><b>WARNING:</b> The caller assumes ownership of all returned {@link Tensor}s, i.e., the\n      * caller must call {@link Tensor#close()} on all elements of the returned list to free up\n      * resources.\n      *\n      * ...\n      */\n     public List<Tensor<?>> run() {\n       return runHelper(false).outputs;\n     }\n </denchmark-code>\n \n I'm not sure if the examples them-self contain any resource leak or not, they free only the first element of the list, but there may be more of them (in general). I would expect an explicit loop properly freeing all the returned resources there.\n Such examples for beginners should be as explicit as possible, 100% clear and understandable for anyone. A lot of people (like me) base core of their code on them which may easily introduce significant resource leak bugs to their applications.\n \n https://www.tensorflow.org/install/install_java, HelloTF example\n https://www.tensorflow.org/install/install_java, referenced advanced example LabelImage\n https://github.com/tensorflow/tensorflow/blob/r1.6/tensorflow/java/src/main/java/org/tensorflow/examples/LabelImage.java\n \n <denchmark-h:h3>Source code / logs</denchmark-h>\n \n None.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "mixalturek", "commentT": "2018-03-03T00:39:15Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/asimshankar>@asimshankar</denchmark-link>\n  Can you take a look at this?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "mixalturek", "commentT": "2018-03-03T00:52:24Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mixalturek>@mixalturek</denchmark-link>\n  : Thanks for the note and yes we'd like to make documentation and examples as clear as possible.\n The examples referenced only fetch a single tensor, hence the list returned necessarily has a single element (and since that is referenced in the try-with-resources blocks, there is no leak). When the example is explicitly requesting a single tensor, the loop seems unnecessary.\n Happy to hear any suggestions for improvement though.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "mixalturek", "commentT": "2018-03-04T19:16:42Z", "comment_text": "\n \t\tYes, I guessed there is only a single one so the code is correct. So what about to add a comment with an explicit info.\n <denchmark-code>      // Execute the \"MyConst\" operation in a Session.\n       try (Session s = new Session(g);\n            // Generally, there may be multiple output tensors, all of them must be closed to prevent resource leaks.\n            Tensor output = s.runner().fetch(\"MyConst\").run().get(0)) {\n         System.out.println(new String(output.bytesValue(), \"UTF-8\"));\n       }\n </denchmark-code>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "mixalturek", "commentT": "2018-03-19T06:59:55Z", "comment_text": "\n \t\tSure. A PR would be welcome :)\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "mixalturek", "commentT": "2020-01-24T21:27:29Z", "comment_text": "\n \t\tThe fix PR is merged, so I think we can close this.\n \t\t"}}}, "commit": {"commit_id": "de72c8cccef2ee77667c041b68a34be6fb61ea65", "commit_author": "Michal Turek", "commitT": "2018-04-11 18:32:10-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\docs_src\\install\\install_java.md", "file_new_name": "tensorflow\\docs_src\\install\\install_java.md", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "96,211", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow\\java\\src\\main\\java\\org\\tensorflow\\examples\\LabelImage.java", "file_new_name": "tensorflow\\java\\src\\main\\java\\org\\tensorflow\\examples\\LabelImage.java", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "104", "deleted_lines": null, "method_info": {"method_name": "LabelImage::constructAndExecuteGraphToNormalizeImage", "method_params": "imageBytes", "method_startline": "75", "method_endline": "108"}}, "hunk_1": {"Ismethod": 1, "added_lines": "114", "deleted_lines": null, "method_info": {"method_name": "LabelImage::executeInceptionGraph", "method_params": "graphDef,image", "method_startline": "110", "method_endline": "128"}}}}}}}