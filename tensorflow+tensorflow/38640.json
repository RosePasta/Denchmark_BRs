{"BR": {"BR_id": "38640", "BR_author": "shiningrain", "BRopenT": "2020-04-17T12:59:04Z", "BRcloseT": "2020-04-27T20:07:51Z", "BR_text": {"BRsummary": "K.cast_to_floatx() will convert \"None\" to \"Nan\" and lead the ReLU to Nan output.", "BRdescription": "\n System information\n \n Have I written custom code (as opposed to using example directory):\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04):   Linux Ubuntu 18.04\n TensorFlow backend (yes / no):  yes\n TensorFlow version:  1.14.0-cpu\n Python version:  3.6.9\n CUDA/cuDNN version:  -\n GPU model and memory:  -\n \n Describe the current behavior\n I found that if I used ReLU(threshold = None) in tensorflow.keras, without any errors or warnings, Tensorflow will return a matrix with Nan.  (Detailed configuration and codes for reproduction can be found in the following part) .\n For this reason, I did some investigations and found that when the parameters in ReLU are passed to /tensorflow/python/keras/layers/advanced_activations.py line near line 311, K.cast_to_floatx()  will incorrectly convert the \"None\" parameter to \"Nan\" and pass it to the backend for calculation (refer to Figure 1 and Figure 2).\n \"Nan\" and \"None\" should have different meanings, but K.cast_to_floatx did not distinguish between \"Nan\" and \"None\" during the calculation, which led to the usage of a \"Nan\" parameter in the tensorflow calculation. This further affects the final output result and makes the output with  \"Nan\". This operation may confuse the users.\n Is there a difference in meaning between None and Nan in the implementation of K.cast_to_floatx?  Judging from the current results, their meanings are different.   This issue not only affect ReLU, but also affect ThresholdReLU, LeakyReLU and other operations using K.cast_to_floatx() to convert the parameters.\n <denchmark-h:h2>Code to reproduce the issue</denchmark-h>\n \n <denchmark-code>import os\n import numpy as np\n import tensorflow as tf\n import tensorflow.keras.layers as L\n from tensorflow.keras.models import load_model\n \n \n root_path = \"./Your Path\"\n layer_name=\"ReLU\"\n kwargs={'max_value': 0.5761369157060329, 'negative_slope': 0.7845179761191806, 'threshold': None}\n input= (10 * np.random.randn(1,32,32,16)).astype(np.float32)\n from tensorflow.keras import Model, Input\n layer_cls = getattr(L, layer_name)\n layer = layer_cls(**kwargs)\n x = Input(batch_shape=input.shape)\n y = layer(x)\n bk_model =Model(x, y)\n model_path = os.path.join(root_path, 'model.h5')\n bk_model.save(model_path, bk_model)\n model = load_model(model_path)     \n output = model.predict(input)\n nanresult=np.isnan(output).any()\n print(nanresult)\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "shiningrain", "commentT": "2020-04-17T15:15:59Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/shiningrain>@shiningrain</denchmark-link>\n \n i ran the code shared and face <denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/673d2c21fcf02091f8243c5ac51f72a9/38640.ipynb>this error</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "shiningrain", "commentT": "2020-04-17T15:32:52Z", "comment_text": "\n \t\t\n @shiningrain\n i ran the code shared and face this error\n \n Hello! Thanks for your reply!\n The \"root path\" in my code is \"./ Your Path\", this means that you can set any path you want to save the following model... You can also delete it and just save the model in the current dir. You can also use this code:\n <denchmark-code>import os\n import numpy as np\n import tensorflow as tf\n import tensorflow.keras.layers as L\n from tensorflow.keras.models import load_model\n \n \n layer_name=\"ReLU\"\n kwargs={'max_value': 0.5761369157060329, 'negative_slope': 0.7845179761191806, 'threshold': None}\n input= (10 * np.random.randn(1,32,32,16)).astype(np.float32)\n from tensorflow.keras import Model, Input\n layer_cls = getattr(L, layer_name)\n layer = layer_cls(**kwargs)\n x = Input(batch_shape=input.shape)\n y = layer(x)\n bk_model =Model(x, y)\n bk_model.save(\"model.h5\", bk_model)\n model = load_model(\"model.h5\")     \n output = model.predict(input)\n nanresult=np.isnan(output).any()\n print(nanresult)\n </denchmark-code>\n \n As the following picture shown, the nanresult is True, which means there is nan in output\n <denchmark-link:https://user-images.githubusercontent.com/46860123/79586408-a452db80-8103-11ea-85f7-9b1e0310ef3f.png></denchmark-link>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "shiningrain", "commentT": "2020-04-18T07:53:10Z", "comment_text": "\n \t\tHello, <denchmark-link:https://github.com/Saduf2019>@Saduf2019</denchmark-link>\n   I can also reproduce this issue in Tensorflow 2.1.0-cpu version, shown in the following figure. You can use the code in my reply to reproduce it.\n <denchmark-link:https://user-images.githubusercontent.com/46860123/79631518-6ea60500-818c-11ea-9493-221ccd343132.png></denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "shiningrain", "commentT": "2020-04-20T15:31:18Z", "comment_text": "\n \t\ti am able to replicate this issue, please find the <denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/bd0e794e3005cee01640dca7926e946f/untitled141.ipynb>gist here</denchmark-link>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "shiningrain", "commentT": "2020-04-20T15:51:34Z", "comment_text": "\n \t\t\n i am able to replicate this issue, please find the gist here\n \n Thanks for your reply! That is exactly what I want to show.\n K.cast_to_floatx() will convert None to nan, which are not the same things. And then it leads to nan output.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "shiningrain", "commentT": "2020-04-26T22:51:28Z", "comment_text": "\n \t\tThe none to nan conversion is due to numpy behavior.\n \n \n \n tensorflow/tensorflow/python/keras/backend.py\n \n \n          Line 183\n       in\n       e5bf8de\n \n \n \n \n \n \n  return np.asarray(x, dtype=floatx()) \n \n \n \n \n \n import numpy as np\n np.asarray(None, dtype=float)\n output:\n array(nan)\n However the documentation says  . Perhaps we can add check to pass a float value to threshold argument.\n <denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/layers/ReLU#arguments_2>https://www.tensorflow.org/api_docs/python/tf/keras/layers/ReLU#arguments_2</denchmark-link>\n \n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "shiningrain", "commentT": "2020-04-27T20:07:52Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38640>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38640>No</denchmark-link>\n \n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "shiningrain", "commentT": "2020-04-28T04:06:33Z", "comment_text": "\n \t\t\n The none to nan conversion is due to numpy behavior.\n \n \n \n tensorflow/tensorflow/python/keras/backend.py\n \n \n          Line 183\n       in\n       e5bf8de\n \n \n \n \n \n \n  return np.asarray(x, dtype=floatx()) \n \n \n \n \n \n import numpy as np\n np.asarray(None, dtype=float)\n output:\n array(nan)\n However the documentation says threshold: Float . Perhaps we can add check to pass a float value to threshold argument.\n https://www.tensorflow.org/api_docs/python/tf/keras/layers/ReLU#arguments_2\n \n That's a good idea! Thanks for your fix.\n \t\t"}}}, "commit": {"commit_id": "3db8df8ffafe5bcd83a12b92bc4c8287cd80237f", "commit_author": "A. Unique TensorFlower", "commitT": "2020-04-27 13:01:35-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\keras\\layers\\advanced_activations.py", "file_new_name": "tensorflow\\python\\keras\\layers\\advanced_activations.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "352,353,354", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,max_value,negative_slope,threshold,kwargs", "method_startline": "344", "method_endline": "361"}}}}}}}