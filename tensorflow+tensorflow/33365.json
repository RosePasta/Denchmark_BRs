{"BR": {"BR_id": "33365", "BR_author": "tb438", "BRopenT": "2019-10-15T03:37:06Z", "BRcloseT": "2020-03-10T20:49:02Z", "BR_text": {"BRsummary": "No float64 support with batch normalization in Tensorflow 2.0?", "BRdescription": "\n Stock Ubuntu 19.04 with Cuda 10.0, Tensorflow 2.0.0 installed via pip3, Python 3.7.3, GTX1060.\n I have a float64 valued dataset with a simple conv2d network that includes tf.keras.layers.BatchNormalization() which is where the error is being thrown I think.\n The first set of issues:\n <denchmark-code>WARNING:tensorflow:Layer conv2d is casting an input tensor from dtype float64 to the layer's dtype of float32, which is new behavior in TensorFlow 2.  The layer has dtype float32 because it's dtype defaults to floatx.\n \n If you intended to run this layer in float32, you can safely ignore this warning. If in doubt, this warning is likely only an issue if you are porting a TensorFlow 1.X model to TensorFlow 2.\n \n To change all layers to have dtype float64 by default, call `tf.keras.backend.set_floatx('float64')`. To change just this layer, pass dtype='float64' to the layer constructor. \n </denchmark-code>\n \n After setting tf.keras.backend.set_floatx('float64'), next set of errors:\n <denchmark-code>Traceback (most recent call last):\n   File \"/home/aj/ga.py\", line 183, in <module>\n     encoder = make_encoder_model(z_dim)\n   File \"/home/aj/ga.py\", line 138, in make_encoder_model\n     x = tf.keras.layers.BatchNormalization()(x)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/engine/base_layer.py\", line 842, in __call__\n     outputs = call_fn(cast_inputs, *args, **kwargs)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/layers/normalization.py\", line 659, in call\n     outputs = self._fused_batch_norm(inputs, training=training)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/layers/normalization.py\", line 517, in _fused_batch_norm\n     training, _fused_batch_norm_training, _fused_batch_norm_inference)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/utils/tf_utils.py\", line 59, in smart_cond\n     pred, true_fn=true_fn, false_fn=false_fn, name=name)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/smart_cond.py\", line 59, in smart_cond\n     name=name)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/util/deprecation.py\", line 507, in new_func\n     return func(*args, **kwargs)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/control_flow_ops.py\", line 1174, in cond\n     return cond_v2.cond_v2(pred, true_fn, false_fn, name)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/cond_v2.py\", line 84, in cond_v2\n     op_return_value=pred)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/func_graph.py\", line 915, in func_graph_from_py_func\n     func_outputs = python_func(*func_args, **func_kwargs)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/layers/normalization.py\", line 503, in _fused_batch_norm_training\n     data_format=self._data_format)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/nn_impl.py\", line 1509, in fused_batch_norm\n     name=name)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/gen_nn_ops.py\", line 4620, in fused_batch_norm_v3\n     name=name)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/op_def_library.py\", line 631, in _apply_op_helper\n     param_name=input_name)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/op_def_library.py\", line 60, in _SatisfiesTypeConstraint\n     \", \".join(dtypes.as_dtype(x).name for x in allowed_list)))\n TypeError: Value passed to parameter 'x' has DataType float64 not in list of allowed values: float16, bfloat16, float32\n </denchmark-code>\n \n So is there perhaps another (hopefully drop in) method of batch normalization that supports float64? I don't want to go hacking at allowed_list and all that.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "tb438", "commentT": "2019-10-16T06:56:58Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/tb438>@tb438</denchmark-link>\n \n In order to expedite the trouble-shooting process, please provide a minimal standalone code to reproduce the issue reported here. Thanks!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "tb438", "commentT": "2019-10-25T10:43:17Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/tb438>@tb438</denchmark-link>\n \n Please, let us know any update on this issue. Thanks!\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "tb438", "commentT": "2019-10-25T21:43:45Z", "comment_text": "\n \t\tYes give me another day and I'll upload sanitized code.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "tb438", "commentT": "2019-10-29T15:23:57Z", "comment_text": "\n \t\tHi. I have a similar problem.\n I used this keras code <denchmark-link:https://github.com/keras-team/keras/blob/master/examples/cifar10_resnet.py>https://github.com/keras-team/keras/blob/master/examples/cifar10_resnet.py</denchmark-link>\n .\n And it works fine with TF2.\n But if I set  K.set_floatx('float64')\n It writed \"Value passed to parameter 'x' has DataType float64 not in list of allowed values: float16, bfloat16, float32\"\n Are there working examples, where batch normalization works with float64 in TF 2?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "tb438", "commentT": "2019-10-30T02:20:58Z", "comment_text": "\n \t\tHi Ravikyram,\n Here is the code and exception:\n Python 3.7.5rc1 (default, Oct  8 2019, 16:47:45)\n [GCC 9.2.1 20191008] on linux\n Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n \n \n \n import numpy as np\n import tensorflow as tf\n print(tf.version)\n 2.0.0\n tf.keras.backend.set_floatx('float64')\n inputs = tf.keras.layers.Input(shape=(28, 28, 1))\n x = tf.keras.layers.Conv2D(filters=32, kernel_size=3, strides=2, padding='same')(inputs)\n [...]\n x = tf.keras.layers.LeakyReLU(0.2)(x)\n x = tf.keras.layers.Conv2D(filters=64, kernel_size=3, strides=2, padding='same')(x)\n x = tf.keras.layers.BatchNormalization()(x)\n Traceback (most recent call last):\n File \"\", line 1, in \n File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/engine/base_layer.py\", line 842, in call\n outputs = call_fn(cast_inputs, *args, **kwargs)\n File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/layers/normalization.py\", line 659, in call\n outputs = self._fused_batch_norm(inputs, training=training)\n File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/layers/normalization.py\", line 517, in _fused_batch_norm\n training, _fused_batch_norm_training, _fused_batch_norm_inference)\n File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/utils/tf_utils.py\", line 59, in smart_cond\n pred, true_fn=true_fn, false_fn=false_fn, name=name)\n File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/smart_cond.py\", line 59, in smart_cond\n name=name)\n File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/util/deprecation.py\", line 507, in new_func\n return func(*args, **kwargs)\n File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/control_flow_ops.py\", line 1174, in cond\n return cond_v2.cond_v2(pred, true_fn, false_fn, name)\n File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/cond_v2.py\", line 84, in cond_v2\n op_return_value=pred)\n File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/func_graph.py\", line 915, in func_graph_from_py_func\n func_outputs = python_func(*func_args, **func_kwargs)\n File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/layers/normalization.py\", line 503, in _fused_batch_norm_training\n data_format=self._data_format)\n File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/nn_impl.py\", line 1509, in fused_batch_norm\n name=name)\n File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/gen_nn_ops.py\", line 4620, in fused_batch_norm_v3\n name=name)\n File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/op_def_library.py\", line 631, in _apply_op_helper\n param_name=input_name)\n File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/op_def_library.py\", line 60, in _SatisfiesTypeConstraint\n \", \".join(dtypes.as_dtype(x).name for x in allowed_list)))\n TypeError: Value passed to parameter 'x' has DataType float64 not in list of allowed values: float16, bfloat16, float32\n \n \n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "tb438", "commentT": "2019-10-30T10:03:43Z", "comment_text": "\n \t\tI have tried on colab with TF version 2.0 , 2.1.0-dev20191029 and was able to reproduce the issue.Please, find the gist <denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/e6adf13651041e582a832373063de997/untitled319.ipynb>here</denchmark-link>\n .Thanks!\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "tb438", "commentT": "2019-10-30T15:09:38Z", "comment_text": "\n \t\tHi Ravikyram,\n Thank you for the prompt response. Using your gist above on Colab, I am still getting the same error?\n 2.0.0:\n <denchmark-code>---------------------------------------------------------------------------\n TypeError                                 Traceback (most recent call last)\n <ipython-input-12-fffaff38b358> in <module>()\n       5 x = tf.keras.layers.LeakyReLU(0.2)(x)\n       6 x = tf.keras.layers.Conv2D(filters=64, kernel_size=3, strides=2, padding='same')(x)\n ----> 7 x = tf.keras.layers.BatchNormalization()(x)\n \n 13 frames\n /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/op_def_library.py in _SatisfiesTypeConstraint(dtype, attr_def, param_name)\n      58           \"allowed values: %s\" %\n      59           (param_name, dtypes.as_dtype(dtype).name,\n ---> 60            \", \".join(dtypes.as_dtype(x).name for x in allowed_list)))\n      61 \n      62 \n \n TypeError: Value passed to parameter 'x' has DataType float64 not in list of allowed values: float16, bfloat16, float32\n </denchmark-code>\n \n And with 2.1.0:\n <denchmark-code>---------------------------------------------------------------------------\n TypeError                                 Traceback (most recent call last)\n <ipython-input-3-fffaff38b358> in <module>()\n       5 x = tf.keras.layers.LeakyReLU(0.2)(x)\n       6 x = tf.keras.layers.Conv2D(filters=64, kernel_size=3, strides=2, padding='same')(x)\n ----> 7 x = tf.keras.layers.BatchNormalization()(x)\n \n 13 frames\n /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/op_def_library.py in _SatisfiesTypeConstraint(dtype, attr_def, param_name)\n      59           \"allowed values: %s\" %\n      60           (param_name, dtypes.as_dtype(dtype).name,\n ---> 61            \", \".join(dtypes.as_dtype(x).name for x in allowed_list)))\n      62 \n      63 \n \n TypeError: Value passed to parameter 'x' has DataType float64 not in list of allowed values: float16, bfloat16, float32\n </denchmark-code>\n \n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "tb438", "commentT": "2019-10-30T15:28:08Z", "comment_text": "\n \t\tI've updated my development workstation to 2.1.0 as well, same issue:\n <denchmark-code>>>> import tensorflow as tf\n >>> import numpy as np\n >>> tf.version\n '2.1.0-dev20191029'\n >>> tf.keras.backend.set_floatx('float64')\n >>> inputs = tf.keras.layers.Input(shape=(28, 28, 1))\n >>> x = tf.keras.layers.Conv2D(filters=32, kernel_size=3, strides=2, padding='same')(inputs)\n >>> x = tf.keras.layers.LeakyReLU(0.2)(x)\n >>> x = tf.keras.layers.Conv2D(filters=64, kernel_size=3, strides=2, padding='same')(x)\n >>> x = tf.keras.layers.BatchNormalization()(x)\n Traceback (most recent call last):\n   File \"<stdin>\", line 1, in <module>\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/engine/base_layer.py\", line 773, in __call__\n     outputs = call_fn(cast_inputs, *args, **kwargs)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/layers/normalization.py\", line 695, in call\n     outputs = self._fused_batch_norm(inputs, training=training)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/layers/normalization.py\", line 553, in _fused_batch_norm\n     training, _fused_batch_norm_training, _fused_batch_norm_inference)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/utils/tf_utils.py\", line 59, in smart_cond\n     pred, true_fn=true_fn, false_fn=false_fn, name=name)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/smart_cond.py\", line 59, in smart_cond\n     name=name)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/util/deprecation.py\", line 507, in new_func\n     return func(*args, **kwargs)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/control_flow_ops.py\", line 1174, in cond\n     return cond_v2.cond_v2(pred, true_fn, false_fn, name)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/cond_v2.py\", line 83, in cond_v2\n     op_return_value=pred)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/func_graph.py\", line 958, in func_graph_from_py_func\n     func_outputs = python_func(*func_args, **func_kwargs)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/layers/normalization.py\", line 539, in _fused_batch_norm_training\n     data_format=self._data_format)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/nn_impl.py\", line 1502, in fused_batch_norm\n     name=name)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/gen_nn_ops.py\", line 4248, in fused_batch_norm_v3\n     name=name)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/op_def_library.py\", line 576, in _apply_op_helper\n     param_name=input_name)\n   File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/op_def_library.py\", line 61, in _SatisfiesTypeConstraint\n     \", \".join(dtypes.as_dtype(x).name for x in allowed_list)))\n TypeError: Value passed to parameter 'x' has DataType float64 not in list of allowed values: float16, bfloat16, float32\n </denchmark-code>\n \n Can you try running the same code with GPU-enabled Colab? Perhaps this would only fixed for the CPU branch and not tensorflow-gpu 2.1.0?\n Thanks again for your help.\n \t\t"}, "comments_8": {"comment_id": 10, "comment_author": "tb438", "commentT": "2019-11-25T05:16:42Z", "comment_text": "\n \t\tLOOK, AGAIN, YOUR REDUCED PRECISION INT8 AND INT16 AINT MEAN NOTHING TO US, DO YOU UNDERSTAND GOOGLE? YOUR GOOGLE TPU CAIN'T TRAIN, SO IMA GO WITH CUDA128 JUST AS SOON AS YOU BRING MY FLOAT64 BATCH NORMALIZATION BABY BACK\n \t\t"}, "comments_9": {"comment_id": 11, "comment_author": "tb438", "commentT": "2020-01-08T01:03:18Z", "comment_text": "\n \t\tHello,\n Is there a solution for this?\n i am getting it when i call the model.predict on boolean data.\n it also causes a segmentation fault.\n i am using tf2`s keras\n \t\t"}, "comments_10": {"comment_id": 12, "comment_author": "tb438", "commentT": "2020-01-10T13:54:55Z", "comment_text": "\n \t\tHi all, supporting float64 would be really cool indeed :)\n <denchmark-link:https://github.com/TrailBlazerAI>@TrailBlazerAI</denchmark-link>\n  maybe consider a change of tone when asking for other people to help you?\n \t\t"}, "comments_11": {"comment_id": 13, "comment_author": "tb438", "commentT": "2020-01-11T02:05:07Z", "comment_text": "\n \t\t\n Hello,\n Is there a solution for this?\n i am getting it when i call the model.predict on boolean data.\n it also causes a segmentation fault.\n i am using tf2`s keras\n \n I changed the data to np.float32 and it worked well with tf2, maybe it may help someone still having this issue.\n Thanks\n \t\t"}, "comments_12": {"comment_id": 14, "comment_author": "tb438", "commentT": "2020-02-11T14:15:56Z", "comment_text": "\n \t\tHello,\n Can anyone provide info on the matter?\n Is it gonna be fixed? If no, why?\u00a0Is there a timeline? Are there any blockers?\n Many thanks,\n \n Julien\n \n \t\t"}, "comments_13": {"comment_id": 15, "comment_author": "tb438", "commentT": "2020-03-02T11:09:15Z", "comment_text": "\n \t\tAre there any updates to this? I'm facing the same problem and I'm having to set BatchNorm's dtype to float32 for now but it'd be nice to be able to use float64\n \t\t"}, "comments_14": {"comment_id": 16, "comment_author": "tb438", "commentT": "2020-03-10T16:11:38Z", "comment_text": "\n \t\tThis appears to be an issue with fused batch norm in particular, and if you disable the fused kernel, the code above does not raise an error:\n <denchmark-code>import numpy as np\n import tensorflow as tf\n print(tf.version)\n tf.keras.backend.set_floatx('float64')\n inputs = tf.keras.layers.Input(shape=(28, 28, 1))\n x = tf.keras.layers.Conv2D(filters=32, kernel_size=3, strides=2, padding='same')(inputs)\n x = tf.keras.layers.LeakyReLU(0.2)(x)\n x = tf.keras.layers.Conv2D(filters=64, kernel_size=3, strides=2, padding='same')(x)\n x = tf.keras.layers.BatchNormalization(fused=False)(x)\n </denchmark-code>\n \n <denchmark-link:https://github.com/reedwm>@reedwm</denchmark-link>\n  / <denchmark-link:https://github.com/qlzh727>@qlzh727</denchmark-link>\n  -- this is an unfortunate hard edge for BatchNorm. Can we either add fp64 support to the fused kernel or not default to fusing for unsupported datatypes?\n \t\t"}, "comments_15": {"comment_id": 17, "comment_author": "tb438", "commentT": "2020-03-10T17:40:14Z", "comment_text": "\n \t\tI'll start by not defaulting to fused for unsupported datatypes. We can add fp64 support to the fused kernel later.\n \t\t"}, "comments_16": {"comment_id": 18, "comment_author": "tb438", "commentT": "2020-03-10T20:49:04Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33365>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33365>No</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "2ebc291f6a94163c49fc835d3afc93892e645e45", "commit_author": "Reed Wanderman-Milne", "commitT": "2020-03-10 13:46:51-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\keras\\layers\\normalization.py", "file_new_name": "tensorflow\\python\\keras\\layers\\normalization.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "254,255,256,257,276,277,278,279,280", "deleted_lines": null, "method_info": {"method_name": "_raise_if_fused_cannot_be_used", "method_params": "self", "method_startline": "248", "method_endline": "280"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\keras\\layers\\normalization_test.py", "file_new_name": "tensorflow\\python\\keras\\layers\\normalization_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "72,73,74,75,76,77,78,79,80,81", "deleted_lines": null, "method_info": {"method_name": "test_basic_batchnorm", "method_params": "self", "method_startline": "48", "method_endline": "81"}}}}}}}