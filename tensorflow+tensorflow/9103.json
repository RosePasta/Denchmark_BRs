{"BR": {"BR_id": "9103", "BR_author": "karpkarp", "BRopenT": "2017-04-10T13:04:15Z", "BRcloseT": "2017-04-11T20:26:50Z", "BR_text": {"BRsummary": "BUG: tensorflow.placeholder shape does not serialize with protobuf", "BRdescription": "\n Profobuf serialization(json)\n {\n \"attr\": {\n \"dtype\": {\n \"type\": \"DT_FLOAT\"\n },\n \"shape\": {\n \"shape\": {}\n }\n },\n \"name\": \"x\",\n \"op\": \"Placeholder\"\n },\n Tensorflow code\n x = tf.placeholder(tf.float32, shape=None, name=\"x\")\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "karpkarp", "commentT": "2017-04-10T16:57:01Z", "comment_text": "\n \t\tCould you elaborate on the bug here? There is a <denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.1/tensorflow/core/ops/array_ops.cc#L2751>known issue with the Placeholder op</denchmark-link>\n  where it cannot distinguish between an unknown and a scalar shape, but it does serialize all other shapes correctly.\n There is some work underway to figure out if that bug can be fixed without requiring the PlaceholderV2 operation, but all other shapes should be fine regardless.\n Could you elaborate on your concern here?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "karpkarp", "commentT": "2017-04-10T17:17:46Z", "comment_text": "\n \t\tSorry, I copied the wrong line from Python as I was testing.\n When a placeholder of shape [None, 784] was serialized, the corresponding element in the profobuf json serialization does not contain a shape attribute.\n This is the python code:\n     x = tf.placeholder(tf.float32, shape=[None, 784], name=\"x\")\n     y_ = tf.placeholder(tf.float32, shape=[None, 10], name=\"y_\")\n     with tf.name_scope(\"first_layer\"):\n \n         W = tf.Variable(tf.zeros([784,10]), name=\"W\")\n         b = tf.Variable(tf.zeros([10]), name=\"b\")\n     # Output\n         y = tf.matmul(x,W) + b\n \n     with tf.name_scope(\"softmax_layer\"):\n     # Loss Function\n         softmax = tf.nn.softmax_cross_entropy_with_logits(logits=y, labels=y_)\n     with tf.name_scope(\"error_check\"):\n         cross_entropy = tf.reduce_mean(softmax)\n \n     with tf.name_scope(\"accuracy_check\"):\n     #Accuracy Calc\n         correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\n         accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n \n     sess.run(tf.global_variables_initializer())\n \n     outfile_txt = json_format.MessageToJson(sess.graph_def)\n     outfile = open(\"outfile.json\", 'w')\n     outfile.write(outfile_txt)\n Select elements from the output json file:\n      {\n       \"attr\": {\n         \"dtype\": {\n           \"type\": \"DT_FLOAT\"\n         },\n         \"shape\": {\n           \"shape\": {}\n         }\n       },\n       \"name\": \"x\",\n       \"op\": \"Placeholder\"\n     },\n {\n       \"attr\": {\n         \"shape\": {\n           \"shape\": {\n             \"dim\": [\n               {\n                 \"size\": \"784\"\n               },\n               {\n                 \"size\": \"10\"\n               }\n             ]\n           }\n         },\n         \"shared_name\": {\n           \"s\": \"\"\n         },\n         \"container\": {\n           \"s\": \"\"\n         },\n         \"dtype\": {\n           \"type\": \"DT_FLOAT\"\n         }\n       },\n       \"name\": \"first_layer/W\",\n       \"op\": \"VariableV2\"\n     }\n Let me know if this is because of what you said earlier. Im using tensorflow-gpu installed from pip3 on windows.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "karpkarp", "commentT": "2017-04-10T19:51:27Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/asimshankar>@asimshankar</denchmark-link>\n  do you know if there's an issue tracking that work?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "karpkarp", "commentT": "2017-04-10T20:01:55Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/karpkarp>@karpkarp</denchmark-link>\n  : Thanks for the sample code. It seems that if any of the dimensions are unknown is when we end up with an empty shape in the , which is broader than the problem  is going to address.\n I'll dig in a bit more.\n CC  <denchmark-link:https://github.com/vrv>@vrv</denchmark-link>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "karpkarp", "commentT": "2017-04-10T20:27:35Z", "comment_text": "\n \t\tActually I'm trying to change Placeholder itself so no new V2 is needed, but this is precisely correct.  We currently lose shape information when you serialize and deserialize partially known placeholder shapes.  This is fixed in V2 which I am trying to backport to v1.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "karpkarp", "commentT": "2017-04-10T21:56:51Z", "comment_text": "\n \t\tIt seems in array_ops.py, it sets a requirement for the shape to be fully defined with shape.is_fully_defined() in the placeholder function. Any particular reason for this? Does this mean that a placeholder of shape of [None, SomeNum] will not be enforced?\n In any case, I removed the condition where the Placeholder shape has to be fully defined and the serialization issues are fixed. This does break placeholders with no defined shape so I added two additional function in python/framework/tensor_shape.py\n python/framework/tensor_shape\n  def is_partially_defined(self):\n     return self._dims is not None\n \n   def assert_is_partially_defined(self):\n     if not self.is_partially_defined(self):\n       raise ValueError(\"Shape %s is not partially defined\" % self)\n python\\ops\\array_ops.py\n def placeholder(dtype, shape=None, name=None):\n   shape = tensor_shape.as_shape(shape)\n   if shape.is_partially_defined():\n     dim_list = shape.as_list()\n   else:\n     dim_list = []\n   ret = gen_array_ops._placeholder(\n       dtype=dtype,\n       shape=dim_list,\n       name=name)\n   ret.set_shape(shape)\n   return ret\n   \"versions\": {\n     \"producer\": 21\n   },\n   \"node\": [\n     {\n       \"op\": \"Placeholder\",\n       \"name\": \"x\",\n       \"attr\": {\n         \"shape\": {\n           \"shape\": {\n             \"dim\": [\n               {\n                 \"size\": \"-1\"\n               },\n               {\n                 \"size\": \"784\"\n               }\n             ]\n           }\n         },\n         \"dtype\": {\n           \"type\": \"DT_FLOAT\"\n         }\n       }\n     },\n     {\n       \"op\": \"Placeholder\",\n       \"name\": \"y_\",\n       \"attr\": {\n         \"shape\": {\n           \"shape\": {\n             \"dim\": [\n               {\n                 \"size\": \"-1\"\n               },\n               {\n                 \"size\": \"10\"\n               }\n             ]\n           }\n         },\n         \"dtype\": {\n           \"type\": \"DT_FLOAT\"\n         }\n       }\n     },\n     {\n       \"op\": \"NoOp\",\n       \"name\": \"init\"\n     }\n   ]\n }\n \t\t"}}}, "commit": {"commit_id": "24a95ae389e1c76e771ac33d66e0ec40a236260f", "commit_author": "Vijay Vasudevan", "commitT": "2017-04-10 16:50:29-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\cc\\client\\client_session_test.cc", "file_new_name": "tensorflow\\cc\\client\\client_session_test.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "52", "deleted_lines": "52", "method_info": {"method_name": "tensorflow::TEST", "method_params": "ClientSessionTest,Extend", "method_startline": "50", "method_endline": "64"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "tensorflow\\cc\\framework\\cc_op_gen.cc", "file_new_name": "tensorflow\\cc\\framework\\cc_op_gen.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "129,130,131,132,133", "deleted_lines": "129", "method_info": {"method_name": "tensorflow::PrintTensorShape", "method_params": "shape_proto", "method_startline": "129", "method_endline": "141"}}, "hunk_1": {"Ismethod": 1, "added_lines": "195,196,197,198,199", "deleted_lines": null, "method_info": {"method_name": "tensorflow::PrintTensorProto", "method_params": "proto", "method_startline": "195", "method_endline": "199"}}, "hunk_2": {"Ismethod": 1, "added_lines": "308,309", "deleted_lines": "295,296", "method_info": {"method_name": "tensorflow::AttrTypeName", "method_params": "attr_type", "method_startline": "294", "method_endline": "321"}}, "hunk_3": {"Ismethod": 1, "added_lines": "216,218,251,252,253,254,255,256,257,258", "deleted_lines": "206,208,209,210,211,244,245", "method_info": {"method_name": "tensorflow::PrintAttrValue", "method_params": "op,attr_value", "method_startline": "201", "method_endline": "269"}}, "hunk_4": {"Ismethod": 1, "added_lines": "129,130,131,132,133", "deleted_lines": "129", "method_info": {"method_name": "tensorflow::PrintTensorShape", "method_params": "shape", "method_startline": "129", "method_endline": "137"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\core\\framework\\partial_tensor_shape.cc", "file_new_name": "tensorflow\\core\\framework\\partial_tensor_shape.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "85,86,87,88,89,90,91,92,93,94", "deleted_lines": null, "method_info": {"method_name": "tensorflow::PartialTensorShape::PartialTensorShape", "method_params": "shape", "method_startline": "85", "method_endline": "94"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\core\\framework\\partial_tensor_shape.h", "file_new_name": "tensorflow\\core\\framework\\partial_tensor_shape.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "49,50,51", "deleted_lines": "49"}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\core\\ops\\array_ops.cc", "file_new_name": "tensorflow\\core\\ops\\array_ops.cc", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "2741,2749", "deleted_lines": "2741,2749"}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow\\core\\ops\\array_ops_test.cc", "file_new_name": "tensorflow\\core\\ops\\array_ops_test.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "789,796,814,816", "deleted_lines": "789,796,812,813,814,815,816,817,818,819,820,821,822", "method_info": {"method_name": "tensorflow::TEST", "method_params": "ArrayOpsTest,Placeholder_ShapeFn", "method_startline": "776", "method_endline": "822"}}, "hunk_1": {"Ismethod": 1, "added_lines": null, "deleted_lines": "832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,870,872", "method_info": {"method_name": "tensorflow::TEST", "method_params": "ArrayOpsTest,PlaceholderV2_ShapeFn", "method_startline": "832", "method_endline": "878"}}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\core\\public\\version.h", "file_new_name": "tensorflow\\core\\public\\version.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "87,88,89,93", "deleted_lines": "90"}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 9, "file_old_name": "tensorflow\\python\\kernel_tests\\constant_op_test.py", "file_new_name": "tensorflow\\python\\kernel_tests\\constant_op_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751", "deleted_lines": "688,700,706,707,719,728,731,734,737,738", "method_info": {"method_name": "testOldGraph", "method_params": "self", "method_startline": "677", "method_endline": "751"}}, "hunk_1": {"Ismethod": 1, "added_lines": "638", "deleted_lines": "636,637,638,639,640", "method_info": {"method_name": "testScalarShape", "method_params": "self", "method_startline": "636", "method_endline": "640"}}, "hunk_2": {"Ismethod": 1, "added_lines": "668,671,674", "deleted_lines": "671", "method_info": {"method_name": "testTensorStr", "method_params": "self", "method_startline": "667", "method_endline": "675"}}, "hunk_3": {"Ismethod": 1, "added_lines": "644", "deleted_lines": "642,643,644,645,646,647,648,649,650,651,652", "method_info": {"method_name": "testPartialShape", "method_params": "self", "method_startline": "642", "method_endline": "652"}}, "hunk_4": {"Ismethod": 1, "added_lines": "656", "deleted_lines": "654,655,656,657,658,659,660,661", "method_info": {"method_name": "testControlDependency", "method_params": "self", "method_startline": "654", "method_endline": "661"}}, "hunk_5": {"Ismethod": 1, "added_lines": null, "deleted_lines": "592,593,594,595,596,597,598,599,600,601", "method_info": {"method_name": "testDtype", "method_params": "self", "method_startline": "591", "method_endline": "601"}}, "hunk_6": {"Ismethod": 1, "added_lines": "609", "deleted_lines": "611,612,613,614,615,616,617,618,619,620,621,622", "method_info": {"method_name": "testShape", "method_params": "self", "method_startline": "607", "method_endline": "622"}}, "hunk_7": {"Ismethod": 1, "added_lines": "665", "deleted_lines": "663,664", "method_info": {"method_name": "testBadShape", "method_params": "self", "method_startline": "663", "method_endline": "665"}}, "hunk_8": {"Ismethod": 1, "added_lines": "626", "deleted_lines": "624,625,626,627,628,629,630,631,632,633,634", "method_info": {"method_name": "testUnknownShape", "method_params": "self", "method_startline": "624", "method_endline": "634"}}}}, "file_8": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\ops\\array_ops.py", "file_new_name": "tensorflow\\python\\ops\\array_ops.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1512", "deleted_lines": "1512", "method_info": {"method_name": "placeholder", "method_params": "dtype,shape,name", "method_startline": "1482", "method_endline": "1512"}}}}}}}