{"BR": {"BR_id": "27292", "BR_author": "SpringsteinM", "BRopenT": "2019-03-29T14:25:33Z", "BRcloseT": "2019-04-12T00:31:01Z", "BR_text": {"BRsummary": "keras.layers.RNN with contants", "BRdescription": "\n System information\n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Arch Linux\n Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\n TensorFlow installed from (source or binary): No\n TensorFlow version (use command below): 1.13 and 1.14\n Python version: 3.7\n Bazel version (if compiling from source):\n GCC/Compiler version (if compiling from source):\n CUDA/cuDNN version: 10.1 and 10.0\n GPU model and memory: 1080 Ti\n \n Describe the current behavior\n TypeError: can only concatenate list (not \"tuple\") to list in RNN::build() if a call the RNN with a Tensor as constants.\n Describe the expected behavior\n Basically the build() function of the RNNCellWithConstants should be called, with the input_shape = [(3,3,5), (3,3)]\n Code to reproduce the issue\n <denchmark-code>import tensorflow as tf\n \n \n class RNNCellWithConstants(tf.keras.layers.Layer):\n \n     def __init__(self, **kwargs):\n         self.state_size = 5\n         super(RNNCellWithConstants, self).__init__(**kwargs)\n \n     def build(self, input_shape):\n         print(input_shape)\n         self.built = True\n \n     def call(self, inputs, states, constants):\n         print(inputs, states, constants)\n         return inputs, [inputs]\n \n \n # Test basic case.\n x = tf.keras.Input((None, 5))\n c = tf.keras.Input((3,))\n cell = RNNCellWithConstants()\n layer = tf.keras.layers.RNN(cell)\n y = layer(x, constants=c) # Works as expected.\n \n # Test basic case.\n x = tf.zeros([3, 3, 5], dtype=tf.float32)\n c = tf.zeros([3, 3], dtype=tf.float32)\n cell = RNNCellWithConstants()\n layer = tf.keras.layers.RNN(cell)\n y = layer(x, constants=c) # Crash with the following error\n </denchmark-code>\n \n Other info / logs\n Exception from example:\n <denchmark-code>Traceback (most recent call last):\n   File \"bug.py\", line 25, in <module>\n     y = layer(x, constants=c)\n   File \"/home/matthias/.local/lib/python3.7/site-packages/tensorflow/python/keras/layers/recurrent.py\", line 690, in __call__\n     return super(RNN, self).__call__(inputs, **kwargs)\n   File \"/home/matthias/.local/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 585, in __call__\n     self._maybe_build(inputs)\n   File \"/home/matthias/.local/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 1706, in _maybe_build\n     self.build(input_shapes)\n   File \"/home/matthias/.local/lib/python3.7/site-packages/tensorflow/python/keras/layers/recurrent.py\", line 555, in build\n     self.cell.build([step_input_shape] + constants_shape)\n TypeError: can only concatenate list (not \"tuple\") to list\n </denchmark-code>\n \n If I correct the error temporarily I come to another problem, that the input shapes at build call are not correct any more: [(3, 5), (5,)]\n So I think the mistake lies in that distinction:\n <denchmark-code>    if is_keras_tensor:\n       # Compute the full input spec, including state and constants\n       full_input = [inputs] + additional_inputs\n       # The original input_spec is None since there could be a nested tensor\n       # input. Update the input_spec to match the inputs.\n       full_input_spec = [None for _ in range(len(nest.flatten(inputs)))\n                         ] + additional_specs\n       # Perform the call with temporarily replaced input_spec\n       self.input_spec = full_input_spec\n       output = super(RNN, self).__call__(full_input, **kwargs)\n       # Remove the additional_specs from input spec and keep the rest. It is\n       # important to keep since the input spec was populated by build(), and\n       # will be reused in the stateful=True.\n       self.input_spec = self.input_spec[:-len(additional_specs)]\n       return output\n     else:\n       if initial_state is not None:\n         kwargs['initial_state'] = initial_state\n       if constants is not None:\n         kwargs['constants'] = constants\n       return super(RNN, self).__call__(inputs, **kwargs)\n </denchmark-code>\n \n If I set is_keras_tensor to True, everything will behave as expected.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "SpringsteinM", "commentT": "2019-04-08T04:34:40Z", "comment_text": "\n \t\tI want to work on this issue please <denchmark-link:https://github.com/ymodak>@ymodak</denchmark-link>\n  can you guide me please?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "SpringsteinM", "commentT": "2019-04-12T00:30:57Z", "comment_text": "\n \t\tShould be fixed by <denchmark-link:https://github.com/tensorflow/tensorflow/commit/3e8a80bce0f7ef0ab2ee49f3528a2652f26110f0>3e8a80b</denchmark-link>\n  now.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "SpringsteinM", "commentT": "2019-04-12T00:31:02Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=27292>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=27292>No</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "3e8a80bce0f7ef0ab2ee49f3528a2652f26110f0", "commit_author": "Scott Zhu", "commitT": "2019-04-11 17:13:58-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\keras\\layers\\recurrent.py", "file_new_name": "tensorflow\\python\\keras\\layers\\recurrent.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "146", "deleted_lines": "143,147,148,149,150", "method_info": {"method_name": "build", "method_params": "self,input_shape", "method_startline": "141", "method_endline": "155"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 16, "file_old_name": "tensorflow\\python\\keras\\layers\\recurrent_test.py", "file_new_name": "tensorflow\\python\\keras\\layers\\recurrent_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "408,409,410,411,412,413,414,415", "method_info": {"method_name": "test_rnn_cell_with_constants_layer.call", "method_params": "self,inputs,states,constants", "method_startline": "408", "method_endline": "415"}}, "hunk_1": {"Ismethod": 1, "added_lines": "1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337", "deleted_lines": null, "method_info": {"method_name": "build", "method_params": "self,input_shape", "method_startline": "1324", "method_endline": "1337"}}, "hunk_2": {"Ismethod": 1, "added_lines": "467,468,469,470,471,472,473,475,476,477,478,479,480,482,483,484,485,486,487,488,489,490,491,492,493", "deleted_lines": null, "method_info": {"method_name": "test_rnn_cell_with_non_keras_constants", "method_params": "self", "method_startline": "467", "method_endline": "493"}}, "hunk_3": {"Ismethod": 1, "added_lines": "383", "deleted_lines": "383,384,385,386", "method_info": {"method_name": "test_rnn_cell_with_constants_layer.__init__", "method_params": "self,units,kwargs", "method_startline": "383", "method_endline": "386"}}, "hunk_4": {"Ismethod": 1, "added_lines": null, "deleted_lines": "417,418,419,420", "method_info": {"method_name": "test_rnn_cell_with_constants_layer.get_config", "method_params": "self", "method_startline": "417", "method_endline": "420"}}, "hunk_5": {"Ismethod": 1, "added_lines": "543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573", "deleted_lines": "543,544,545,547,548,549,550,556", "method_info": {"method_name": "test_rnn_cell_with_non_keras_constants_and_initial_state", "method_params": "self", "method_startline": "543", "method_endline": "573"}}, "hunk_6": {"Ismethod": 1, "added_lines": "1348,1349,1350,1351", "deleted_lines": null, "method_info": {"method_name": "get_config", "method_params": "self", "method_startline": "1348", "method_endline": "1351"}}, "hunk_7": {"Ismethod": 1, "added_lines": null, "deleted_lines": "388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406", "method_info": {"method_name": "test_rnn_cell_with_constants_layer.build", "method_params": "self,input_shape", "method_startline": "388", "method_endline": "406"}}, "hunk_8": {"Ismethod": 1, "added_lines": "1339,1340,1341,1342,1343,1344,1345,1346", "deleted_lines": null, "method_info": {"method_name": "call", "method_params": "self,inputs,states,constants", "method_startline": "1339", "method_endline": "1346"}}, "hunk_9": {"Ismethod": 1, "added_lines": "543,544,545", "deleted_lines": "538,539,540,541,542,543,544,545", "method_info": {"method_name": "test_rnn_cell_with_constants_layer_passing_initial_state.call", "method_params": "self,inputs,states,constants", "method_startline": "538", "method_endline": "545"}}, "hunk_10": {"Ismethod": 1, "added_lines": "383,423,424", "deleted_lines": "380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,425,465", "method_info": {"method_name": "test_rnn_cell_with_constants_layer", "method_params": "self", "method_startline": "379", "method_endline": "465"}}, "hunk_11": {"Ismethod": 1, "added_lines": null, "deleted_lines": "513,514,515,516", "method_info": {"method_name": "test_rnn_cell_with_constants_layer_passing_initial_state.__init__", "method_params": "self,units,kwargs", "method_startline": "513", "method_endline": "516"}}, "hunk_12": {"Ismethod": 1, "added_lines": null, "deleted_lines": "518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536", "method_info": {"method_name": "test_rnn_cell_with_constants_layer_passing_initial_state.build", "method_params": "self,input_shape", "method_startline": "518", "method_endline": "536"}}, "hunk_13": {"Ismethod": 1, "added_lines": "1318,1319,1320,1321,1322", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,units,constant_size,kwargs", "method_startline": "1318", "method_endline": "1322"}}, "hunk_14": {"Ismethod": 1, "added_lines": "547,548,549,550", "deleted_lines": "547,548,549,550", "method_info": {"method_name": "test_rnn_cell_with_constants_layer_passing_initial_state.get_config", "method_params": "self", "method_startline": "547", "method_endline": "550"}}, "hunk_15": {"Ismethod": 1, "added_lines": "495,500", "deleted_lines": "509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,538,539,540,541", "method_info": {"method_name": "test_rnn_cell_with_constants_layer_passing_initial_state", "method_params": "self", "method_startline": "495", "method_endline": "541"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "tensorflow\\python\\keras\\layers\\wrappers_test.py", "file_new_name": "tensorflow\\python\\keras\\layers\\wrappers_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "591", "deleted_lines": "592", "method_info": {"method_name": "test_Bidirectional_with_constants", "method_params": "self", "method_startline": "586", "method_endline": "625"}}, "hunk_1": {"Ismethod": 1, "added_lines": "36,39", "deleted_lines": "36", "method_info": {"method_name": "__init__", "method_params": "self,units,constant_size,kwargs", "method_startline": "36", "method_endline": "40"}}, "hunk_2": {"Ismethod": 1, "added_lines": "36,39", "deleted_lines": "36", "method_info": {"method_name": "__init__", "method_params": "self,units,kwargs", "method_startline": "36", "method_endline": "39"}}, "hunk_3": {"Ismethod": 1, "added_lines": "52", "deleted_lines": "42,43,53", "method_info": {"method_name": "build", "method_params": "self,input_shape", "method_startline": "42", "method_endline": "55"}}, "hunk_4": {"Ismethod": 1, "added_lines": "634", "deleted_lines": "635", "method_info": {"method_name": "test_Bidirectional_with_constants_layer_passing_initial_state", "method_params": "self", "method_startline": "627", "method_endline": "678"}}, "hunk_5": {"Ismethod": 1, "added_lines": "67", "deleted_lines": "68", "method_info": {"method_name": "get_config", "method_params": "self", "method_startline": "66", "method_endline": "69"}}}}}}}