{"BR": {"BR_id": "39718", "BR_author": "wwwind", "BRopenT": "2020-05-20T14:15:44Z", "BRcloseT": "2020-06-05T19:20:39Z", "BR_text": {"BRsummary": "TF Lite nightly: Model with Fully Connected layer can't be converted, fully quantization, int8", "BRdescription": "\n System information\n \n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux\n TensorFlow installed from (source or binary): tf-nightly\n TensorFlow version (or github SHA if from source): tf-nightly\n \n Command used to run the converter or code if you\u2019re using the Python API\n If possible, please share a link to Colab/Jupyter/any notebook.\n <denchmark-link:https://colab.research.google.com/drive/1l3VnLtWBCP_IR8CV7bTps1UXPoDfT2ok?usp=sharing>https://colab.research.google.com/drive/1l3VnLtWBCP_IR8CV7bTps1UXPoDfT2ok?usp=sharing</denchmark-link>\n \n <denchmark-code>import numpy as np\n import tensorflow as tf\n \n mnist = tf.keras.datasets.mnist\n train_data, test_data = mnist.load_data()\n \n pre_process = lambda x: x / 255.0\n num_calib = 1000\n calib_data = pre_process(\n             train_data[0][0 : num_calib].astype(np.float32)\n         )\n \n model = tf.keras.Sequential(\n             [\n                 tf.keras.layers.InputLayer(input_shape=(28, 28)),\n                 tf.keras.layers.Reshape(target_shape=(28, 28, 1)),\n                 tf.keras.layers.Conv2D(\n                     filters=12, kernel_size=(3, 3), activation=tf.nn.relu\n                 ),\n                 tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),\n                 tf.keras.layers.Flatten(),\n                 tf.keras.layers.Dense(10, activation=tf.nn.softmax),\n             ]\n         )\n model.summary()\n \n train_images = pre_process(train_data[0])\n train_labels = train_data[1]\n test_images = pre_process(test_data[0])\n test_labels = test_data[1]\n # Train the digit classification model\n model.compile(\n   optimizer=\"adam\",\n   loss=\"sparse_categorical_crossentropy\",\n   metrics=[\"accuracy\"],\n )\n model.fit(\n   train_images,\n   train_labels,\n   epochs=1,\n   validation_data=(test_images, test_labels),\n )\n \n def _get_calib_data_func():\n   def representative_data_gen():\n     for input_value in calib_data:\n       input_value = np.expand_dims(input_value, axis=0).astype(np.float32)\n       yield [input_value]\n \n   return representative_data_gen\n \n converter = tf.lite.TFLiteConverter.from_keras_model(model)\n converter.representative_dataset = _get_calib_data_func()\n \n converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8]\n tflite_model_INT8 = converter.convert()\n </denchmark-code>\n \n <denchmark-code>**RuntimeError: Max and min for dynamic tensors should be recorded during calibration: Failed for tensor sequential_2/reshape_2/Shape\n Empty min/max for tensor sequential_2/reshape_2/Shape**\n </denchmark-code>\n \n Also, please include a link to the saved model or GraphDef\n <denchmark-code>https://colab.research.google.com/drive/1l3VnLtWBCP_IR8CV7bTps1UXPoDfT2ok?usp=sharing\n </denchmark-code>\n \n Failure details\n If the conversion is successful, but the generated model is wrong,\n state what is wrong:\n \n Producing wrong results and/or decrease in accuracy\n Producing correct results, but the model is slower than expected (model generated from old converter)\n \n RNN conversion support\n If converting TF RNN to TFLite fused RNN ops, please prefix [RNN] in the title.\n Any other info / logs\n Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "wwwind", "commentT": "2020-05-20T15:20:46Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/wwwind>@wwwind</denchmark-link>\n ,\n I was able to reproduce the issue with <denchmark-link:https://colab.research.google.com/gist/amahendrakar/4a4ea0178b34597d6035794ba3eb3e36/39718-nightly.ipynb>TF-nightly</denchmark-link>\n . However, the code works with the stable version <denchmark-link:https://colab.research.google.com/gist/amahendrakar/54d9272a3c32841d1532a994cc5820bb/39718-2-0.ipynb>TF v2.2</denchmark-link>\n . Please check the linked gist.\n Could you please try running the code with TF v2.2 and let us know if it works. Thanks!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "wwwind", "commentT": "2020-05-20T15:35:07Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/amahendrakar>@amahendrakar</denchmark-link>\n  Yes, I confirm - it works in tensorflow 2.2.0\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "wwwind", "commentT": "2020-05-20T17:41:14Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/wwwind>@wwwind</denchmark-link>\n ,\n Thank you for the update. Please feel free to close the issue if resolved. Thanks!\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "wwwind", "commentT": "2020-05-25T15:52:25Z", "comment_text": "\n \t\tI get the same error when dealing with tf-nightly. However, I can't go back to 2.2 because a new error suddenly shows up: Tensor 'input_1' has invalid shape '[None, None, None, 3]'. I've seen in other thread it's recommended to use tf-nightly to fix the last error.\n So I can see here kind of deadlock between versions.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "wwwind", "commentT": "2020-05-27T07:35:05Z", "comment_text": "\n \t\t\n @amahendrakar Yes, I confirm - it works in tensorflow 2.2.0\n \n Closing this issue as resolved.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "wwwind", "commentT": "2020-05-27T07:36:13Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/sramirez>@sramirez</denchmark-link>\n ,\n Could you please submit a new issue from <denchmark-link:https://github.com/tensorflow/tensorflow/issues/new/choose>this link</denchmark-link>\n  and fill in the template along with the complete code, so that we can track the issue there. Thanks!\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "wwwind", "commentT": "2020-05-27T09:27:07Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/amahendrakar>@amahendrakar</denchmark-link>\n  Could this bug be fixed in tf-nightly ?\n I am working with tf-nightly and I really appreciate if it will be fixed in the current code.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "wwwind", "commentT": "2020-06-03T16:38:39Z", "comment_text": "\n \t\tThanks, I will take a look into this.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "wwwind", "commentT": "2020-06-03T18:39:43Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/wwwind>@wwwind</denchmark-link>\n  I have updated your code and <denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/05d9d1bcfe32caead45728ac250e8dbf/39718-nightly.ipynb>here</denchmark-link>\n  is the working version of your code with . Thanks!\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "wwwind", "commentT": "2020-06-03T18:41:23Z", "comment_text": "\n \t\tAt a high level there are two ways to fix this issue (one of which <denchmark-link:https://github.com/jvishnuvardhan>@jvishnuvardhan</denchmark-link>\n  pointed out).\n \n Try setting it in keras and keeping conversion the same way:\n \n <denchmark-code>input = tf.keras.layers.Input(shape=(225, 225, 3), batch_size=1)\n </denchmark-code>\n \n \n Use set_shape on the model input and fix the batch size to 1 (example here: https://www.tensorflow.org/lite/convert/python_api#examples_).\n \n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "wwwind", "commentT": "2020-06-05T19:20:41Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39718>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39718>No</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "268a0ea1502532e0e127e71d0ad42cc4e8ad81c6", "commit_author": "Suharsh Sivakumar", "commitT": "2020-06-05 12:13:43-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 16, "file_old_name": "tensorflow\\lite\\tools\\optimize\\quantize_model.cc", "file_new_name": "tensorflow\\lite\\tools\\optimize\\quantize_model.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1112,1119,1120,1121,1122,1123,1124", "deleted_lines": "1174,1175,1176,1177,1181,1183,1184", "method_info": {"method_name": "tflite::optimize::EnsureBiasScaleCompatibility", "method_params": "model,operator_names,real_value_op_set,error_reporter", "method_startline": "1110", "method_endline": "1250"}}, "hunk_1": {"Ismethod": 1, "added_lines": "886,895,896,897,898,899,900", "deleted_lines": null, "method_info": {"method_name": "tflite::optimize::QuantizeWeightsInputOutput", "method_params": "model,allow_float,operator_names,real_value_op_set,error_reporter", "method_startline": "883", "method_endline": "925"}}, "hunk_2": {"Ismethod": 1, "added_lines": "1003,1010,1011,1012,1013,1014,1015", "deleted_lines": "1036,1037,1038", "method_info": {"method_name": "tflite::optimize::FillQuantizationParams", "method_params": "model,operator_names,real_value_op_set,error_reporter", "method_startline": "1001", "method_endline": "1107"}}, "hunk_3": {"Ismethod": 1, "added_lines": "364", "deleted_lines": "294,295,296,303,304,305,306", "method_info": {"method_name": "tflite::optimize::ApplyConstraints", "method_params": "model,operator_names,error_reporter", "method_startline": "294", "method_endline": "364"}}, "hunk_4": {"Ismethod": 1, "added_lines": "637,638,639,640,641", "deleted_lines": "565,566,567,568,569", "method_info": {"method_name": "tflite::optimize::QuantizeOpInput", "method_params": "model,subgraph_idx,op_idx,property,input,error_reporter", "method_startline": "481", "method_endline": "661"}}, "hunk_5": {"Ismethod": 1, "added_lines": "80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132", "deleted_lines": null, "method_info": {"method_name": "tflite::optimize::PopulateRealValueOpSet", "method_params": "model,operator_names", "method_startline": "80", "method_endline": "132"}}, "hunk_6": {"Ismethod": 1, "added_lines": "886,895,896,897,898,899,900", "deleted_lines": "862,863,864,865", "method_info": {"method_name": "tflite::optimize::QuantizeBiases", "method_params": "model,operator_names,error_reporter", "method_startline": "852", "method_endline": "903"}}, "hunk_7": {"Ismethod": 1, "added_lines": "930,939,940,941,942,943,1003,1010,1011,1012,1013,1014,1015", "deleted_lines": "931,932,933", "method_info": {"method_name": "tflite::optimize::FillQuantizationParams", "method_params": "model,operator_names,error_reporter", "method_startline": "923", "method_endline": "1025"}}, "hunk_8": {"Ismethod": 1, "added_lines": "1112,1119,1120,1121,1122,1123,1124", "deleted_lines": "1036,1037,1038", "method_info": {"method_name": "tflite::optimize::EnsureBiasScaleCompatibility", "method_params": "model,operator_names,error_reporter", "method_startline": "1028", "method_endline": "1164"}}, "hunk_9": {"Ismethod": 1, "added_lines": "930,939,940,941,942,943", "deleted_lines": "931,932,933", "method_info": {"method_name": "tflite::optimize::QuantizeBiases", "method_params": "model,operator_names,real_value_op_set,error_reporter", "method_startline": "928", "method_endline": "981"}}, "hunk_10": {"Ismethod": 1, "added_lines": "1260,1261,1262,1263,1264,1268,1269,1270,1272", "deleted_lines": null, "method_info": {"method_name": "tflite::optimize::QuantizeModel", "method_params": "builder,model,input_type,output_type,allow_float,operator_names,error_reporter", "method_startline": "1255", "method_endline": "1282"}}, "hunk_11": {"Ismethod": 1, "added_lines": "364,365,366,367,374,375,376,377,378", "deleted_lines": null, "method_info": {"method_name": "tflite::optimize::ApplyConstraints", "method_params": "model,operator_names,real_value_op_set,error_reporter", "method_startline": "364", "method_endline": "436"}}, "hunk_12": {"Ismethod": 1, "added_lines": "73,74,75,76", "deleted_lines": null, "method_info": {"method_name": "tflite::optimize::IsRealValueOp", "method_params": "real_value_op_set,operator_name", "method_startline": "73", "method_endline": "76"}}, "hunk_13": {"Ismethod": 1, "added_lines": "58,59", "deleted_lines": null, "method_info": {"method_name": "tflite::optimize::GetOperatorProperty", "method_params": "operator_names,model,subgraph_index,op_idx,operator_name", "method_startline": "53", "method_endline": "71"}}, "hunk_14": {"Ismethod": 1, "added_lines": null, "deleted_lines": "822,823,824", "method_info": {"method_name": "tflite::optimize::QuantizeWeightsInputOutput", "method_params": "model,allow_float,operator_names,error_reporter", "method_startline": "811", "method_endline": "849"}}, "hunk_15": {"Ismethod": 1, "added_lines": "41,42,43,44,45,46,47,48", "deleted_lines": null, "method_info": {"method_name": "tflite::optimize::IsFloatTensor", "method_params": "subgraph,tensor_idx", "method_startline": "41", "method_endline": "48"}}}}}}}