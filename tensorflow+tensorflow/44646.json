{"BR": {"BR_id": "44646", "BR_author": "jplu", "BRopenT": "2020-11-06T12:26:32Z", "BRcloseT": "2020-11-20T00:22:43Z", "BR_text": {"BRsummary": "Bug when a custom tf.keras.models.Model has multiple class inheritance", "BRdescription": "\n System information\n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows and Linux Ubuntu 20.04\n TensorFlow installed from (source or binary): pip\n TensorFlow version (use command below): 2.3\n Python version: conda env with Python 3.7.9\n CUDA/cuDNN version: 10.1\n GPU model and memory: GeForce RTX 2080 Super with Max-Q Design 8GB\n \n Describe the current behavior\n Creating a custom model that inherit of at least one other class than tf.keras.models.Model, the following exception is raised:\n <denchmark-code>File \"C:\\Users\\snake\\miniconda3\\envs\\transformers\\lib\\site-packages\\tensorflow\\python\\training\\tracking\\base.py\", line 457, in _method_wrapper\n     result = method(self, *args, **kwargs)\n   File \"C:\\Users\\snake\\miniconda3\\envs\\transformers\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 255, in __init__\n     inject_functional_model_class(self.__class__)\n   File \"C:\\Users\\snake\\miniconda3\\envs\\transformers\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 144, in inject_functional_model_class\n     cls.__bases__ = tuple(inject_functional_model_class(base)\n   File \"C:\\Users\\snake\\miniconda3\\envs\\transformers\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 144, in <genexpr>\n     cls.__bases__ = tuple(inject_functional_model_class(base)\n   File \"C:\\Users\\snake\\miniconda3\\envs\\transformers\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 144, in inject_functional_model_class\n     cls.__bases__ = tuple(inject_functional_model_class(base)\n   File \"C:\\Users\\snake\\miniconda3\\envs\\transformers\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 144, in <genexpr>\n     cls.__bases__ = tuple(inject_functional_model_class(base)\n   File \"C:\\Users\\snake\\miniconda3\\envs\\transformers\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 144, in inject_functional_model_class\n     cls.__bases__ = tuple(inject_functional_model_class(base)\n   File \"C:\\Users\\snake\\miniconda3\\envs\\transformers\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 144, in <genexpr>\n     cls.__bases__ = tuple(inject_functional_model_class(base)\n   File \"C:\\Users\\snake\\miniconda3\\envs\\transformers\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 144, in inject_functional_model_class\n     cls.__bases__ = tuple(inject_functional_model_class(base)\n TypeError: can't set attributes of built-in/extension type 'object'\n </denchmark-code>\n \n Describe the expected behavior\n Being able to create a custom model with different mixins.\n Standalone code to reproduce the issue\n Here a simple piece of code to reproduce the issue:\n <denchmark-code>import tensorflow as tf\n \n class PrintMixin:\n     def custom_print(self):\n         print(\"Hello world\")\n \n class CustomModel(tf.keras.models.Model, PrintMixin):\n     def __init__(self, *args, **kwargs):\n         my_input = tf.keras.layers.Input(shape=(16,))\n         dense = tf.keras.layers.Dense(32, activation='relu')\n         output = dense(my_input)\n         outputs = {\"output\": output}\n \n         super().__init__(inputs=[my_input], outputs=outputs, *args, **kwargs)\n \n \n my_model = CustomModel()\n </denchmark-code>\n \n Other info / logs\n Apparently when giving the inputs and outputs parameters, TensorFlow tries to inject an attribute to all the classes and super classes until reaching tf.keras.models.Model. Here the piece of code from the file training.py line 136:\n <denchmark-code>def inject_functional_model_class(cls):\n   \"\"\"Inject `Functional` into the hierarchy of this class if needed.\"\"\"\n   from tensorflow.python.keras.engine import functional  # pylint: disable=g-import-not-at-top\n   from tensorflow.python.keras.engine import training_v1  # pylint: disable=g-import-not-at-top\n   if cls == Model or cls == training_v1.Model:\n     return functional.Functional\n \n   cls.__bases__ = tuple(inject_functional_model_class(base)\n                         for base in cls.__bases__)\n   # Trigger any `__new__` class swapping that needed to happen on `Functional`\n   # but did not because functional was not in the class hierarchy.\n   cls.__new__(cls)\n \n   return cls\n </denchmark-code>\n \n But when it tries to check the superclass of my mixin class, which is object an error is raised saying that we cannot add an attribute to the object type. For me the following update of the method fix the issue:\n <denchmark-code>def inject_functional_model_class(cls):\n   \"\"\"Inject `Functional` into the hierarchy of this class if needed.\"\"\"\n   from tensorflow.python.keras.engine import functional  # pylint: disable=g-import-not-at-top\n   from tensorflow.python.keras.engine import training_v1  # pylint: disable=g-import-not-at-top\n   if cls == Model or cls == training_v1.Model:\n     return functional.Functional\n   if cls == 'object':\n     return cls\n \n   cls.__bases__ = tuple(inject_functional_model_class(base)\n                         for base in cls.__bases__)\n   # Trigger any `__new__` class swapping that needed to happen on `Functional`\n   # but did not because functional was not in the class hierarchy.\n   cls.__new__(cls)\n \n   return cls\n </denchmark-code>\n \n Here we return the object class as it is. But I don't know if it is a proper fix that won't bring another error elsewhere.\n First, I wanted to know if it is really a bug?\n If not, how I could do a proper custom model with mixin classes and my inputs/outputs.\n If, yes, is the fix I proposed ok and if needed I can open a PR with it.\n Thanks!\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "jplu", "commentT": "2020-11-08T18:05:49Z", "comment_text": "\n \t\tWas able to reproduce the issue with TF v2.3 and TF-nightly. Please find the gist of it <denchmark-link:https://colab.research.google.com/gist/amahendrakar/3b58866c9c9e0ac935296d26b903de22/44646-2-3.ipynb>here</denchmark-link>\n . Thanks!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "jplu", "commentT": "2020-11-18T17:27:48Z", "comment_text": "\n \t\tThanks for reporting the issue. Let me take a close look.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "jplu", "commentT": "2020-11-20T00:22:45Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44646>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44646>No</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "8f68aad1107df679843da96a990773e9fc30201c", "commit_author": "Scott Zhu", "commitT": "2020-11-19 16:21:10-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 9, "file_old_name": "tensorflow\\python\\keras\\engine\\functional_test.py", "file_new_name": "tensorflow\\python\\keras\\engine\\functional_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "2488,2489,2490", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,foo,kwargs", "method_startline": "2488", "method_endline": "2490"}}, "hunk_1": {"Ismethod": 1, "added_lines": "2508,2509,2510,2511,2512", "deleted_lines": null, "method_info": {"method_name": "testFunctionalSubclass", "method_params": "self", "method_startline": "2508", "method_endline": "2512"}}, "hunk_2": {"Ismethod": 1, "added_lines": "2502,2503", "deleted_lines": null, "method_info": {"method_name": "get_bar", "method_params": "self", "method_startline": "2502", "method_endline": "2503"}}, "hunk_3": {"Ismethod": 1, "added_lines": "2498,2499,2500", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,bar,kwargs", "method_startline": "2498", "method_endline": "2500"}}, "hunk_4": {"Ismethod": 1, "added_lines": "2536,2537,2538,2539,2540,2541,2542,2543", "deleted_lines": null, "method_info": {"method_name": "testSubclassModelPreMixin", "method_params": "self", "method_startline": "2536", "method_endline": "2543"}}, "hunk_5": {"Ismethod": 1, "added_lines": "2478,2479,2480,2481,2482,2483", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,args,kwargs", "method_startline": "2478", "method_endline": "2483"}}, "hunk_6": {"Ismethod": 1, "added_lines": "2492,2493", "deleted_lines": null, "method_info": {"method_name": "get_foo", "method_params": "self", "method_startline": "2492", "method_endline": "2493"}}, "hunk_7": {"Ismethod": 1, "added_lines": "2514,2515,2516,2517,2518,2519,2520,2521,2522", "deleted_lines": null, "method_info": {"method_name": "testFunctionalSubclassPreMixin", "method_params": "self", "method_startline": "2514", "method_endline": "2522"}}, "hunk_8": {"Ismethod": 1, "added_lines": "2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534", "deleted_lines": null, "method_info": {"method_name": "testFunctionalSubclassPostMixin", "method_params": "self", "method_startline": "2524", "method_endline": "2534"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow\\python\\keras\\engine\\training.py", "file_new_name": "tensorflow\\python\\keras\\engine\\training.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "118,119,120,121", "deleted_lines": null, "method_info": {"method_name": "inject_functional_model_class", "method_params": "cls", "method_startline": "112", "method_endline": "129"}}, "hunk_1": {"Ismethod": 1, "added_lines": "237,238,239,240,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263", "deleted_lines": "234", "method_info": {"method_name": "__init__", "method_params": "self,args,kwargs", "method_startline": "227", "method_endline": "320"}}}}}}}