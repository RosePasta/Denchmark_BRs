{"BR": {"BR_id": "2773", "BR_author": "reuben", "BRopenT": "2020-02-19T13:22:34Z", "BRcloseT": "2020-03-21T14:40:40Z", "BR_text": {"BRsummary": "[Good First Bug] Implement an API to get textual descriptions of error codes", "BRdescription": "\n It would be nice to have an API similar to <denchmark-link:https://linux.die.net/man/3/strerror>strerror</denchmark-link>\n  to get textual descriptions of error codes so applications can show something meaningful to users in error messages.\n This was already implemented ad-hoc in the .NET bindings, see here: \n \n \n DeepSpeech/native_client/dotnet/DeepSpeechClient/DeepSpeech.cs\n \n \n         Lines 86 to 125\n       in\n       0b82c75\n \n \n \n \n \n \n  /// <summary> \n \n \n \n  /// Evaluate the result code and will raise an exception if necessary. \n \n \n \n  /// </summary> \n \n \n \n  /// <param name=\"resultCode\">Native result code.</param> \n \n \n \n  private void EvaluateResultCode(ErrorCodes resultCode) \n \n \n \n  { \n \n \n \n  switch (resultCode) \n \n \n \n      { \n \n \n \n  case ErrorCodes.DS_ERR_OK: \n \n \n \n  break; \n \n \n \n  case ErrorCodes.DS_ERR_NO_MODEL: \n \n \n \n  throw new ArgumentException(\"Missing model information.\"); \n \n \n \n  case ErrorCodes.DS_ERR_INVALID_ALPHABET: \n \n \n \n  throw new ArgumentException(\"Invalid alphabet embedded in model. (Data corruption?)\"); \n \n \n \n  case ErrorCodes.DS_ERR_INVALID_SHAPE: \n \n \n \n  throw new ArgumentException(\"Invalid model shape.\"); \n \n \n \n  case ErrorCodes.DS_ERR_INVALID_SCORER: \n \n \n \n  throw new ArgumentException(\"Invalid scorer file.\"); \n \n \n \n  case ErrorCodes.DS_ERR_FAIL_INIT_MMAP: \n \n \n \n  throw new ArgumentException(\"Failed to initialize memory mapped model.\"); \n \n \n \n  case ErrorCodes.DS_ERR_FAIL_INIT_SESS: \n \n \n \n  throw new ArgumentException(\"Failed to initialize the session.\"); \n \n \n \n  case ErrorCodes.DS_ERR_FAIL_INTERPRETER: \n \n \n \n  throw new ArgumentException(\"Interpreter failed.\"); \n \n \n \n  case ErrorCodes.DS_ERR_FAIL_RUN_SESS: \n \n \n \n  throw new ArgumentException(\"Failed to run the session.\"); \n \n \n \n  case ErrorCodes.DS_ERR_FAIL_CREATE_STREAM: \n \n \n \n  throw new ArgumentException(\"Error creating the stream.\"); \n \n \n \n  case ErrorCodes.DS_ERR_FAIL_READ_PROTOBUF: \n \n \n \n  throw new ArgumentException(\"Error reading the proto buffer model file.\"); \n \n \n \n  case ErrorCodes.DS_ERR_FAIL_CREATE_SESS: \n \n \n \n  throw new ArgumentException(\"Error failed to create session.\"); \n \n \n \n  case ErrorCodes.DS_ERR_MODEL_INCOMPATIBLE: \n \n \n \n  throw new ArgumentException(\"Error incompatible model.\"); \n \n \n \n  case ErrorCodes.DS_ERR_SCORER_NOT_ENABLED: \n \n \n \n  throw new ArgumentException(\"External scorer is not enabled.\"); \n \n \n \n  default: \n \n \n \n  throw new ArgumentException(\"Unknown error, please make sure you are using the correct native binary.\"); \n \n \n \n      } \n \n \n \n  } \n \n \n \n \n \n Steps to fix this would be roughly:\n Add a new API to native_client/deepspeech.h, something like:\n char* DS_ErrorCodeToErrorMessage(int aErrorCode);\n And then in native_client/deepspeech.cc, implement the function by returning the appropriate error message. The strings can be static, inlined directly in the source code. The documentation for DS_ErrorCodeToErrorMessage should indicate that the returned pointers are read only and MUST not be deallocated or modified.\n Feel free to ask any questions if any of this is confusing.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "reuben", "commentT": "2020-02-19T13:23:12Z", "comment_text": "\n \t\tNext steps would then be to expose this API to our language bindings, as well as make use of it in the .NET binding instead of having its own list there.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "reuben", "commentT": "2020-02-24T11:56:56Z", "comment_text": "\n \t\tI would like to work on this issue!\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "reuben", "commentT": "2020-02-24T14:02:08Z", "comment_text": "\n \t\t\n I would like to work on this issue!\n \n You should have all the informations requires already here. Please feel free to ask for clarification if required.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "reuben", "commentT": "2020-02-24T16:24:34Z", "comment_text": "\n \t\tThank You <denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "reuben", "commentT": "2020-02-25T17:06:35Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/reuben>@reuben</denchmark-link>\n  <denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  Shouldn't be the argument of function\n char* DS_ErrorCodeToErrorMessage(int aErrorCode); \n be\n char* DS_ErrorCodeToErrorMessage(DeepSpeech_Error_Codes aErrorCode); \n As in deepspeech.h  error codes are in  enum DeepSpeech_Error_Codes\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "reuben", "commentT": "2020-02-25T18:20:07Z", "comment_text": "\n \t\tThe C language standard does not guarantee the underlying size of an enum, so we could end up with nasty ABI compatibility issues due to compiler mismatches. int is safer in that regard.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "reuben", "commentT": "2020-02-26T03:37:39Z", "comment_text": "\n \t\tOk <denchmark-link:https://github.com/reuben>@reuben</denchmark-link>\n  thanks.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "reuben", "commentT": "2020-02-26T15:05:30Z", "comment_text": "\n \t\tThe second part of this issue is making sure our bindings in the tree use the new API. There are four bindings in the three:\n \n Python: native_client/python\n JavaScript: native_client/javascript\n .NET: native_client/dotnet\n Java: native_client/java\n \n Here's a rough idea for how to do this for each one of them:\n \n Python: in the object oriented wrapper classes (code here), add checks around every fallible API call as well as using the message strings when raising an exception instead of using the numeric code. You'll also have to add the new function to the list here to make sure the strings are deallocated.\n JavaScript: same as above. Wrapper classes are here, list of functions that return newly allocated strings is here.\n .NET: already has its own handling, which was used as the source for the textual descriptions. Needs to be updated to use the new API. The new function needs to be added in NativeImp.cs, and then it can be used from DeepSpeech.EvaluateResultCode.\n Java: function has to be added to the list here. Actually using it is part of a separate issue, #2701.\n \n <denchmark-link:https://github.com/imskr>@imskr</denchmark-link>\n  are you interested in also taking on this part?\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "reuben", "commentT": "2020-02-26T15:54:52Z", "comment_text": "\n \t\tYes I would like to take this, thanks.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "reuben", "commentT": "2020-02-27T18:13:22Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/reuben>@reuben</denchmark-link>\n  In python: Do I have to add all types of errors mentioned in API  in  function of both  and  class <denchmark-link:https://github.com/mozilla/DeepSpeech/blob/master/native_client/python/__init__.py>here</denchmark-link>\n  ?\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "reuben", "commentT": "2020-02-28T09:28:11Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/imskr>@imskr</denchmark-link>\n  you don't need to duplicate the list of errors anywhere. Just make sure whenever we report errors, instead of just showing the error number we also include a textual description by calling the new function you added in <denchmark-link:https://github.com/mozilla/DeepSpeech/pull/2794>#2794</denchmark-link>\n .\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "reuben", "commentT": "2020-02-28T17:50:10Z", "comment_text": "\n \t\tShould I remove the  statement and add the  function <denchmark-link:https://github.com/mozilla/DeepSpeech/blob/master/native_client/python/__init__.py#L37-L39>here</denchmark-link>\n  ?\n Having little confusion how do i use the  in  although i have added it in  <denchmark-link:https://github.com/reuben>@reuben</denchmark-link>\n \n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "reuben", "commentT": "2020-03-02T09:11:23Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/imskr>@imskr</denchmark-link>\n  You could, instead of throwing an exception with only the error code\n         status, impl = deepspeech.impl.CreateModel(model_path)\n         if status != 0:\n             raise RuntimeError(\"CreateModel failed with error code 0x{:X}\".format(status))\n throw an exception with the error code and textual description. Something like\n         status, impl = deepspeech.impl.CreateModel(model_path)\n         if status != 0:\n             status_message = deepspeech.impl.ErrorCodeToErrorMessage(status)\n             raise RuntimeError(\"CreateModel failed with error message {} with error code 0x{:X}\".format(status_message, status))\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "reuben", "commentT": "2020-03-02T14:04:43Z", "comment_text": "\n \t\tOk, Thank You <denchmark-link:https://github.com/kdavis-mozilla>@kdavis-mozilla</denchmark-link>\n \n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "reuben", "commentT": "2020-04-25T08:44:11Z", "comment_text": "\n \t\tThis thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n \t\t"}}}, "commit": {"commit_id": "5d50d21da0d34751faab725e2619c8e1c9b1215c", "commit_author": "Shubham Kumar", "commitT": "2020-03-21 15:40:39+01:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "native_client\\dotnet\\DeepSpeechClient\\DeepSpeech.cs", "file_new_name": "native_client\\dotnet\\DeepSpeechClient\\DeepSpeech.cs", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "143", "method_info": {"method_name": "DeepSpeechClient::DeepSpeech::EnableExternalScorer", "method_params": "aScorerPath", "method_startline": "141", "method_endline": "155"}}, "hunk_1": {"Ismethod": 1, "added_lines": "92,94", "deleted_lines": "92,94,95,96", "method_info": {"method_name": "DeepSpeechClient::DeepSpeech::EvaluateResultCode", "method_params": "resultCode", "method_startline": "90", "method_endline": "96"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "native_client\\dotnet\\DeepSpeechClient\\NativeImp.cs", "file_new_name": "native_client\\dotnet\\DeepSpeechClient\\NativeImp.cs", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "22,23,24", "deleted_lines": null}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "native_client\\javascript\\deepspeech.i", "file_new_name": "native_client\\javascript\\deepspeech.i", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "40", "deleted_lines": null}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "native_client\\javascript\\index.js", "file_new_name": "native_client\\javascript\\index.js", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "38", "deleted_lines": "38", "method_info": {"method_name": "Model", "method_params": "aModelPath", "method_startline": "31", "method_endline": "42"}}, "hunk_1": {"Ismethod": 1, "added_lines": "142", "deleted_lines": "142", "method_info": {"method_name": "Model.prototype.createStream", "method_params": "", "method_startline": "137", "method_endline": "145"}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "native_client\\python\\__init__.py", "file_new_name": "native_client\\python\\__init__.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "151", "deleted_lines": "151", "method_info": {"method_name": "createStream", "method_params": "self", "method_startline": "139", "method_endline": "152"}}, "hunk_1": {"Ismethod": 1, "added_lines": "38", "deleted_lines": "38", "method_info": {"method_name": "__init__", "method_params": "self,model_path", "method_startline": "32", "method_endline": "39"}}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "native_client\\python\\impl.i", "file_new_name": "native_client\\python\\impl.i", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "124", "deleted_lines": null}}}}}}