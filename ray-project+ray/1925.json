{"BR": {"BR_id": "1925", "BR_author": "robertnishihara", "BRopenT": "2018-04-19T20:30:10Z", "BRcloseT": "2018-04-20T18:34:30Z", "BR_text": {"BRsummary": "Local scheduler crashes when job is killed.", "BRdescription": "\n <denchmark-h:h3>System information</denchmark-h>\n \n \n OS Platform and Distribution: Ubuntu\n Ray installed from (source or binary): pip\n Ray version: 0.4.0\n Python version: Python 3.6.1 :: Continuum Analytics, Inc.\n \n <denchmark-h:h3>Describe the problem</denchmark-h>\n \n I don't have a minimal example at the moment, but I can reproduce the issue by running a specific application and then hitting Ctrl-C in the middle. The local scheduler crashes with\n <denchmark-code>/ray/src/common/state/redis.cc:979 Check failed: reply->type != REDIS_REPLY_ERROR reply->str is Cannot update a task that doesn't exist yet\n </denchmark-code>\n \n Also\n <denchmark-code>/opt/conda/lib/python3.6/site-packages/ray/local_scheduler/../core/src/local_scheduler/local_scheduler[0x43a0f5]\n /opt/conda/lib/python3.6/site-packages/ray/local_scheduler/../core/src/local_scheduler/local_scheduler(_ZN3ray8internal7CerrLogD1Ev+0x8e)[0x44633e]\n /opt/conda/lib/python3.6/site-packages/ray/local_scheduler/../core/src/local_scheduler/local_scheduler(_Z32redis_task_table_update_callbackP17redisAsyncContextPvS1_+0x216)[0x463136]\n /opt/conda/lib/python3.6/site-packages/ray/local_scheduler/../core/src/local_scheduler/local_scheduler(redisProcessCallbacks+0x83)[0x4b1833]\n /opt/conda/lib/python3.6/site-packages/ray/local_scheduler/../core/src/local_scheduler/local_scheduler(aeProcessEvents+0x227)[0x477f47]\n /opt/conda/lib/python3.6/site-packages/ray/local_scheduler/../core/src/local_scheduler/local_scheduler(aeMain+0x2b)[0x47826b]\n /opt/conda/lib/python3.6/site-packages/ray/local_scheduler/../core/src/local_scheduler/local_scheduler(main+0x562)[0x43a9b2]\n /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7fd936d55830]\n /opt/conda/lib/python3.6/site-packages/ray/local_scheduler/../core/src/local_scheduler/local_scheduler[0x43c921]\n </denchmark-code>\n \n cc <denchmark-link:https://github.com/unixpickle>@unixpickle</denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "robertnishihara", "commentT": "2018-04-20T05:33:14Z", "comment_text": "\n \t\tI believe the issue is the following. When the job is killed, the monitor cleans up the task and object table entries in Redis for that job.\n The local scheduler also attempts to update the states of the tasks in Redis. The relevant line is \n \n \n ray/src/local_scheduler/local_scheduler.cc\n \n \n          Line 625\n       in\n       aa07f1c\n \n \n \n \n \n \n  task_table_update(state->db, worker->task_in_progress, NULL, NULL, NULL); \n \n \n \n \n \n Changing that task_table_update to task_table_add_task works around the issue. So does commenting out the line in the monitor that cleans up the task/object table. \n \n \n ray/python/ray/monitor.py\n \n \n          Line 432\n       in\n       aa07f1c\n \n \n \n \n \n \n  self._clean_up_entries_for_driver(driver_id) \n \n \n \n \n \n Another approach is to allow the task_table_update command to fail. There's no reason that the local scheduler has to die when trying to update a task that has been removed.\n \t\t"}}}, "commit": {"commit_id": "cffda73da1c75040db7f8815c62e3ad6a6ededb8", "commit_author": "Robert Nishihara", "commitT": "2018-04-20 11:34:29-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\common\\state\\redis.cc", "file_new_name": "src\\common\\state\\redis.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "969,970,975,976", "deleted_lines": "969,970,971,972,979,980", "method_info": {"method_name": "redis_task_table_update_callback", "method_params": "c,r,privdata", "method_startline": "958", "method_endline": "991"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\local_scheduler\\local_scheduler.cc", "file_new_name": "src\\local_scheduler\\local_scheduler.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "630,631,632,633,634,635,636,637,638,639", "deleted_lines": "625", "method_info": {"method_name": "finish_task", "method_params": "state,worker", "method_startline": "573", "method_endline": "651"}}, "hunk_1": {"Ismethod": 1, "added_lines": "569,570,571", "deleted_lines": null, "method_info": {"method_name": "allow_task_table_update_failure", "method_params": "id,user_context,user_data", "method_startline": "569", "method_endline": "571"}}}}}}}