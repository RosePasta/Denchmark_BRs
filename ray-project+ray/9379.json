{"BR": {"BR_id": "9379", "BR_author": "wumuzi520", "BRopenT": "2020-07-09T13:54:01Z", "BRcloseT": "2020-07-22T02:55:52Z", "BR_text": {"BRsummary": "[GCS] The node will never be detected again when gcs server restart", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n The node will never be detected again when gcs server restart.\n Ray version and other system information (Python version, TensorFlow version, OS):\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):\n <denchmark-code>@pytest.mark.parametrize(\n     \"ray_start_cluster_head\",\n     [generate_internal_config_map(num_heartbeats_timeout=20)],\n     indirect=True)\n def test_node_failure_detector_when_gcs_server_restart(ray_start_cluster_head):\n     \"\"\"Checks that the node failure detector is correct when gcs server restart.\n \n     We set the cluster to timeout nodes after 2 seconds of heartbeats. We\n     then remove a node and restart gcs server again to check\n     that the alive node count is 2, then wait another 2.5 seconds to check that\n     the one of the node is timed out.\n     \"\"\"\n     cluster = ray_start_cluster_head\n     worker = cluster.add_node()\n     cluster.wait_for_nodes()\n \n     cluster.head_node.kill_gcs_server()\n     cluster.remove_node(worker, allow_graceful=False)\n     cluster.head_node.start_gcs_server()\n \n     nodes = ray.nodes()\n     assert len(nodes) == 2\n     assert nodes[0][\"alive\"] and nodes[1][\"alive\"]\n \n     time.sleep(2.5)\n     nodes = ray.nodes()\n     assert len(nodes) == 2\n \n     dead_count = 0\n     for node in nodes:\n         if not node[\"alive\"]:\n             dead_count += 1\n     assert dead_count == 1\n </denchmark-code>\n \n If we cannot run your script, we cannot fix your issue.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {}}, "commit": {"commit_id": "382b314241ef0c475b0acf1d9e1bcebb7742848c", "commit_author": "ZhuSenlin", "commitT": "2020-07-22 10:55:51+08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\tests\\test_gcs_fault_tolerance.py", "file_new_name": "python\\ray\\tests\\test_gcs_fault_tolerance.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "103,104,105,106,107,108,109", "deleted_lines": null, "method_info": {"method_name": "test_node_failure_detector_when_gcs_server_restart.condition", "method_params": "", "method_startline": "103", "method_endline": "109"}}, "hunk_1": {"Ismethod": 1, "added_lines": "61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112", "deleted_lines": null, "method_info": {"method_name": "test_node_failure_detector_when_gcs_server_restart", "method_params": "ray_start_cluster_head", "method_startline": "61", "method_endline": "112"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "src\\ray\\gcs\\gcs_server\\gcs_node_manager.cc", "file_new_name": "src\\ray\\gcs\\gcs_server\\gcs_node_manager.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "413", "deleted_lines": null, "method_info": {"method_name": "ray::gcs::GcsNodeManager::StartNodeFailureDetector", "method_params": "", "method_startline": "413", "method_endline": "413"}}, "hunk_1": {"Ismethod": 1, "added_lines": "36,37,38,39,40", "deleted_lines": null, "method_info": {"method_name": "ray::gcs::GcsNodeManager::NodeFailureDetector::Start", "method_params": "", "method_startline": "36", "method_endline": "41"}}, "hunk_2": {"Ismethod": 1, "added_lines": "34", "deleted_lines": "34", "method_info": {"method_name": "ray::gcs::GcsNodeManager::NodeFailureDetector::NodeFailureDetector", "method_params": "io_service,gcs_table_storage,gcs_pub_sub,on_node_death_callback", "method_startline": "24", "method_endline": "34"}}, "hunk_3": {"Ismethod": 1, "added_lines": "389,390,391,400,401,402", "deleted_lines": "384,393", "method_info": {"method_name": "ray::gcs::GcsNodeManager::LoadInitialData", "method_params": "done", "method_startline": "382", "method_endline": "411"}}, "hunk_4": {"Ismethod": 1, "added_lines": "137", "deleted_lines": "132", "method_info": {"method_name": "ray::gcs::GcsNodeManager::GcsNodeManager", "method_params": "io_service,error_info_accessor,gcs_pub_sub,gcs_table_storage", "method_startline": "118", "method_endline": "141"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ray\\gcs\\gcs_server\\gcs_node_manager.h", "file_new_name": "src\\ray\\gcs\\gcs_server\\gcs_node_manager.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "143,144,145,162,163,164,212,213", "deleted_lines": null}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ray\\gcs\\gcs_server\\gcs_server.cc", "file_new_name": "src\\ray\\gcs\\gcs_server\\gcs_server.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "122,123,124,125,126", "deleted_lines": null, "method_info": {"method_name": "ray::gcs::GcsServer::Start", "method_params": "", "method_startline": "42", "method_endline": "134"}}}}}}}