{"BR": {"BR_id": "5119", "BR_author": "LuckyHouse", "BRopenT": "2019-07-05T03:28:17Z", "BRcloseT": "2020-11-09T19:22:51Z", "BR_text": {"BRsummary": "ValueError: The argument None must be a bytes object.", "BRdescription": "\n <denchmark-h:h3>System information</denchmark-h>\n \n \n Linux Ubuntu 19.04\n Ray installed from (conda env ==>pip):\n Ray version:0.72\n Python version:3.7.3\n \n <denchmark-h:h3>Describe the problem</denchmark-h>\n \n init problem with redis\n <denchmark-h:h3>Source code / logs</denchmark-h>\n \n import ray\n ray.init(redis_address=\"xxxxxxxxxxx:xxxx\",redis_password=\"xxxx\")\n errors:\n Traceback (most recent call last):\n File \"/home/hao/.vscode/extensions/ms-python.python-2019.6.22090/pythonFiles/ptvsd_launcher.py\", line 43, in \n main(ptvsdArgs)\n File \"/home/hao/.vscode/extensions/ms-python.python-2019.6.22090/pythonFiles/lib/python/ptvsd/main.py\", line 434, in main\n run()\n File \"/home/hao/.vscode/extensions/ms-python.python-2019.6.22090/pythonFiles/lib/python/ptvsd/main.py\", line 312, in run_file\n runpy.run_path(target, run_name='main')\n File \"/home/hao/miniconda3/envs/ray/lib/python3.7/runpy.py\", line 263, in run_path\n pkg_name=pkg_name, script_name=fname)\n File \"/home/hao/miniconda3/envs/ray/lib/python3.7/runpy.py\", line 96, in _run_module_code\n mod_name, mod_spec, pkg_name, script_name)\n File \"/home/hao/miniconda3/envs/ray/lib/python3.7/runpy.py\", line 85, in _run_code\n exec(code, run_globals)\n File \"/home/hao/ShengDongAi_Py/audio_server/test.py\", line 2, in \n ray.init(redis_address=\"xxxxxxx\",redis_password=\"xxxx\")\n File \"/home/hao/miniconda3/envs/ray/lib/python3.7/site-packages/ray/worker.py\", line 1442, in init\n ray_params, head=False, shutdown_at_exit=False, connect_only=True)\n File \"/home/hao/miniconda3/envs/ray/lib/python3.7/site-packages/ray/node.py\", line 102, in init\n redis_client.get(\"session_name\"))\n File \"/home/hao/miniconda3/envs/ray/lib/python3.7/site-packages/ray/utils.py\", line 178, in decode\n \"The argument {} must be a bytes object.\".format(byte_str))\n ValueError: The argument None must be a bytes object.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "LuckyHouse", "commentT": "2019-07-05T07:49:11Z", "comment_text": "\n \t\tCould you use redis-cli to check whether the redis-server has the key session_name?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "LuckyHouse", "commentT": "2019-07-07T02:35:43Z", "comment_text": "\n \t\tI'm having this problem too \u2014\u00a0I think what happens is:\n \n Worker node starts\n Head node starts\n Worker node connect to head node\n Worker tries to get session_name from the head node, resulting in the error above (line)\n Head node sets session_name (line)\n \n I was able to ameliorate this problem by adding a delay (the worker node waits for a while before trying to connect to the head node) so that the head node has time to set session_name. Maybe it would make sense for the worker node to try a couple times to get session_name before timing out?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "LuckyHouse", "commentT": "2019-07-07T03:51:44Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ehknight>@ehknight</denchmark-link>\n  <denchmark-link:https://github.com/LuckyHouse>@LuckyHouse</denchmark-link>\n \n Could you please try to apply this patch and then test it? <denchmark-link:https://github.com/ray-project/ray/pull/4977>#4977</denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "LuckyHouse", "commentT": "2019-07-17T09:04:32Z", "comment_text": "\n \t\tIt seems not work.\n Traceback (most recent call last):\n File \"/home/hao/.vscode/extensions/ms-python.python-2019.6.24221/pythonFiles/ptvsd_launcher.py\", line 43, in \n main(ptvsdArgs)\n File \"/home/hao/.vscode/extensions/ms-python.python-2019.6.24221/pythonFiles/lib/python/ptvsd/main.py\", line 434, in main\n run()\n File \"/home/hao/.vscode/extensions/ms-python.python-2019.6.24221/pythonFiles/lib/python/ptvsd/main.py\", line 312, in run_file\n runpy.run_path(target, run_name='main')\n File \"/home/hao/miniconda3/envs/ray/lib/python3.7/runpy.py\", line 263, in run_path\n pkg_name=pkg_name, script_name=fname)\n File \"/home/hao/miniconda3/envs/ray/lib/python3.7/runpy.py\", line 96, in _run_module_code\n mod_name, mod_spec, pkg_name, script_name)\n File \"/home/hao/miniconda3/envs/ray/lib/python3.7/runpy.py\", line 85, in _run_code\n exec(code, run_globals)\n File \"/home/hao/ShengDongAi_Py/audio_server/test.py\", line 2, in \n ray.init(redis_address=\"xxxxxxxx\",redis_password=\"xxxx\")\n File \"/home/hao/miniconda3/envs/ray/lib/python3.7/site-packages/ray/worker.py\", line 1442, in init\n ray_params, head=False, shutdown_at_exit=False, connect_only=True)\n File \"/home/hao/miniconda3/envs/ray/lib/python3.7/site-packages/ray/node.py\", line 101, in init\n self._wait_until_gcs_ready(redis_client)\n File \"/home/hao/miniconda3/envs/ray/lib/python3.7/site-packages/ray/node.py\", line 197, in _wait_until_gcs_ready\n raise Exception(\"Couldn't find GCS_READY flag!\")\n Exception: Couldn't find GCS_READY flag!\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "LuckyHouse", "commentT": "2019-07-17T09:17:24Z", "comment_text": "\n \t\tIn Celery,i can start a worker through  'celery -A tasks worker --loglevel=info'.\n How to start a worker in Ray  through 'init'?Or is it a  missunderstanding  of Ray?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "LuckyHouse", "commentT": "2019-10-14T03:29:48Z", "comment_text": "\n \t\t\n I'm having this problem too \u2014 I think what happens is:\n 1. Worker node starts\n \n 2. Head node starts\n \n 3. Worker node connect to head node\n \n 4. Worker tries to get `session_name` from the head node, resulting in the error above ([line](https://github.com/ray-project/ray/blob/dcd6d4949ca296b584f7090fb2249ae7a07b3e8f/python/ray/node.py#L101))\n \n 5. Head node sets `session_name` ([line](https://github.com/ray-project/ray/blob/dcd6d4949ca296b584f7090fb2249ae7a07b3e8f/python/ray/node.py#L145))\n \n I was able to ameliorate this problem by adding a delay (the worker node waits for a while before trying to connect to the head node) so that the head node has time to set session_name. Maybe it would make sense for the worker node to try a couple times to get session_name before timing out?\n \n <denchmark-link:https://github.com/ehknight>@ehknight</denchmark-link>\n  Could you please describe a little more detail about how you add the delay? I meet the same problem and I add  before this (<denchmark-link:https://github.com/ray-project/ray/blob/dcd6d4949ca296b584f7090fb2249ae7a07b3e8f/python/ray/node.py#L100>line</denchmark-link>\n ) which didn't seem to help.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "LuckyHouse", "commentT": "2019-10-14T05:43:17Z", "comment_text": "\n \t\t\n Exception: Couldn't find GCS_READY flag!\n \n I guess your head node is not able to be started.\n Could you please verity it?\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "LuckyHouse", "commentT": "2020-04-13T08:53:33Z", "comment_text": "\n \t\tI meet the same issue. I prevent the error by adding delay between the launching of nodes. For me, 15 seconds is not enough while 30 seconds can prevent this issue.\n Pseudo code looks like:\n <denchmark-code>start head node\n sleep 30 seconds\n \n for each worker_node:\n     start worker_node\n     sleep 30 seconds\n </denchmark-code>\n \n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "LuckyHouse", "commentT": "2020-11-06T00:23:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/pengzhenghao>@pengzhenghao</denchmark-link>\n  does this still happen on 1.0?\n \t\t"}}}, "commit": {"commit_id": "a09e49ee94dc33118381224adb58df2f6600d151", "commit_author": "Richard Liaw", "commitT": "2020-11-09 11:22:50-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "python\\ray\\node.py", "file_new_name": "python\\ray\\node.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "33,34,35,36,37,38,39,40,41,42,43,44,45", "deleted_lines": null, "method_info": {"method_name": "_get_with_retry", "method_params": "redis_client,key,num_retries", "method_startline": "33", "method_endline": "45"}}, "hunk_1": {"Ismethod": 1, "added_lines": "514", "deleted_lines": null, "method_info": {"method_name": "_get_unused_port", "method_params": "self,close_on_exit", "method_startline": "506", "method_endline": "529"}}, "hunk_2": {"Ismethod": 1, "added_lines": "249,250,257,258", "deleted_lines": null, "method_info": {"method_name": "_init_temp", "method_params": "self,redis_client", "method_startline": "242", "method_endline": "271"}}}}}}}