{"BR": {"BR_id": "9432", "BR_author": "DMTSource", "BRopenT": "2020-07-12T22:23:08Z", "BRcloseT": "2020-11-10T02:01:48Z", "BR_text": {"BRsummary": "High raylet memory usage during object broadcast", "BRdescription": "\n I am unable, on a manual local cluster, to sync a large shared memory numpy arrays after they gets to a certain size. I am unsure if this id due to my config, so I created the below script which recreates my issue.\n In the code below, this can toggle between a non-issue and issue. Is that expected with the change in array size in this manner?\n <denchmark-code># THIS WORKS FINE, no problem, used very little memory on host\n #feature_values = np.random.random((int(5e4),500)).astype(np.float32)\n #feature_values = np.random.random((int(5e5),500)).astype(np.float32)\n # This attempts to use well over 100gb in the RAYLET process\n feature_values = np.random.random((int(5e6),500)).astype(np.float32)\n </denchmark-code>\n \n Essentially, once my shared memory numpy array gets past a certain size, the raylet process, while shipping to nodes, appears to grow to well over 100gb in memory, prob over 200, until a crash. If a node begins to help in shipping after it gets the object it too then creates a massive raylet process which faces the same issues.\n (Note pic was taken during the run, not at end, the RAYLET ram usage went to 100% and began to fill swap entirely as well)\n <denchmark-link:https://user-images.githubusercontent.com/8509302/87257624-78c56000-c46a-11ea-859b-bc520da137e1.png></denchmark-link>\n \n Other issues I notice but are consistent and don't affect the memory issue. mentioned in case they point to other issues:\n \n Number of workers in new version of ray, 0.8.6, seems to be some very large value for some reason, this is probably unrelated but wanted to mention\n I notice in dashboard some workers flash on and off, they seem to work fine, but the dashboard keeps adding and removing or never showing some workers.\n \n Recreation script, with terminal output from crash:\n <denchmark-link:https://gist.github.com/DMTSource/b50aeffde22b51bb82019d9b3e84f921>https://gist.github.com/DMTSource/b50aeffde22b51bb82019d9b3e84f921</denchmark-link>\n \n ray version: 0.8.6 (also tried on snapshot for 0.9.0.dev0 as requested, i've experience this issue across 0.8.4 and 0.8.5 if I recall...)\n pd version: 1.0.1\n np version: 1.18.1\n python version 3.7.4\n ubuntu 14.04\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "DMTSource", "commentT": "2020-07-12T22:33:55Z", "comment_text": "\n \t\tJust for a sanity check, can you try this again on the latest version of Ray (the nightly snapshots?)\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "DMTSource", "commentT": "2020-07-12T22:54:25Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/richardliaw>@richardliaw</denchmark-link>\n  sure thing! I just ran the same process on the current snapshot for the wheel python 3.7, 0.9.0.dev0. But I am seeing similar behavior. I did not restart the host or worker machines however in case that can affect the test/ray install. I used the following command and then re-ran my above process(see recreation script) with the test script on the cluster:\n pip install -U [link to 3.7 wheel]\n Here is the output from this run:\n <denchmark-link:https://gist.github.com/DMTSource/b50aeffde22b51bb82019d9b3e84f921#gistcomment-3373878>https://gist.github.com/DMTSource/b50aeffde22b51bb82019d9b3e84f921#gistcomment-3373878</denchmark-link>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "DMTSource", "commentT": "2020-07-12T23:14:18Z", "comment_text": "\n \t\tthanks! another followup question; do you see this error occurring on a single node too?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "DMTSource", "commentT": "2020-07-12T23:26:46Z", "comment_text": "\n \t\tSorry about that...I had tested that and deleted the info from the above report it seems before posting...\n I have no problems when using a single machine to run this code. So no cluster setup, just an equivalent local init like:\n ray.init(num_cpus=12, memory=32*1073741824, object_store_memory=20*1073741824)\n The single system run uses very little memory, spiking to 30gb but that is all in the ray.put and data setup, after the ray.put and cleanup the memory use is very low and things finish quickly as expected.\n In my actual work, I am able to use ray like this just fine on a single machine, and I am working on training 8 models at once vs using the cluster as desired(Im working with DEAP, not rlib or anything yet for training) and things are working great with shared memory on a single machine case.\n Running it in this manner yields, in console:\n \n $ python tests/ray_shared_memory_cluster_problem.py\n ray.version: 0.9.0.dev0\n pd.version: 1.0.1\n np.version: 1.18.1\n 2020-07-12 19:17:31,218\tINFO resource_spec.py:223 -- Starting Ray with 31.98 GiB memory available for workers and up to 20.0 GiB for objects. You can adjust these settings with ray.init(memory=, object_store_memory=).\n 2020-07-12 19:17:31,697\tINFO services.py:1193 -- View the Ray dashboard at localhost:8265\n Ray put took: 27.7\n n_workers: 12\n actor init took: 0.0\n batch took: 0.0\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "DMTSource", "commentT": "2020-07-12T23:45:19Z", "comment_text": "\n \t\tGot it, thanks! cc <denchmark-link:https://github.com/stephanie-wang>@stephanie-wang</denchmark-link>\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "DMTSource", "commentT": "2020-07-13T00:19:06Z", "comment_text": "\n \t\tYou have the object\n feature_values = np.random.random((int(5e6),500)).astype(np.float32)\n which is about 5e6 x 500 entries (each 4 bytes), which gives 5e6 x 500 x 4 = 10GB for one object. Now, if you do something like\n for _ in range(20):\n     f.remote(feature_values)\n Then under the hood, this will be equivalent to code that looks like\n for _ in range(20):\n     f.remote(ray.put(feature_values))\n The call to ray.put just puts the object into the shared memory object store (which is part of the raylet process).\n Now, if you are passing the object into 20 different tasks, then we could end up with 20 copies of that object simultaneously in the object store, which would give 10GB * 20 = 200GB.\n <denchmark-h:h2>Possible fix</denchmark-h>\n \n If that is actually the issue, then one possible fix would be to make the ray.put call explicit, e.g., to do\n feature_values_id = ray.put(feature_values)\n for _ in range(20):\n     f.remote(feature_values_id)\n Then there should only be one copy in the object store.\n By the way, in the dashboard, can you also click on the \"memory\" tab and see if that has any useful information?\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "DMTSource", "commentT": "2020-07-13T00:23:41Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/robertnishihara>@robertnishihara</denchmark-link>\n  re: explicit ray put, in the user provided gist, I think <denchmark-link:https://github.com/DMTSource>@DMTSource</denchmark-link>\n  is already doing that:\n <denchmark-code>    new_ind_batch = list(\n         ind_creator_pool.map_unordered(\n             lambda a, v: a.run_eval.remote(features_store_id), range(n_workers)\n         )\n </denchmark-code>\n \n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "DMTSource", "commentT": "2020-07-13T00:59:34Z", "comment_text": "\n \t\tI have also tried to accomplish a manual sync with a blocking loop. So before doing the actor pool work, I attempted to ensure each worker has the ability to access the shared object 1-by-1 to ensure no nodes were lacking the shared object.\n Doing ray.get([actor.sync_func.remote(features_store_id) )  for actor in actors]) causes the same issue with exploding memory on host.\n But if i try the blocking [ray.get(actor.sync_func.remote(features_store_id) )  for actor in actors], then it NEARLY(sometimes it'll work) gets around the problem. But once a new node has the shared item it then starts to ship(I guess) to other nodes(in dashboard I see the host and new node(s) split the network load for sending it seems). This results in the node(s) then starting up a raylet that usually grows until crash, like the host. But my nodes have half the ram(64 vs 128) of the host so this is problematic.\n If I get lucky and the sync works in this way and I get to the pool's map call with all nodes synced, however there is still a massive raylet on the nodes and the program easily crashed as very little ram(a few gb) is left for actual work to be done via each actor.\n I cleaned up the gist code to better show this effort in commented out code:\n <denchmark-code>    ## This breaks the node once it becomes a shipper of shared mem objects, leaving behind a massive raylet on nodes\n     #manual_sync = [ray.get(actor.run_eval.remote(features_store_id)) for actor in ind_creator_actors]\n     ## kills the host same as current use of pool does as it attempts to ship all at once\n     #manual_sync = ray.get([actor.run_eval.remote(features_store_id) for actor in ind_creator_actors])\n     #gc.collect()\n </denchmark-code>\n \n I will try the memory tab asap and report, it was blank before(on 0.8.6) but seems to work now(I have a single machine version doing work, on 0.9.0 dev) and I will try to get a look at it when the machines are available for more cluster-testing.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "DMTSource", "commentT": "2020-07-17T21:19:09Z", "comment_text": "\n \t\tcc <denchmark-link:https://github.com/stephanie-wang>@stephanie-wang</denchmark-link>\n \n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "DMTSource", "commentT": "2020-07-17T22:21:44Z", "comment_text": "\n \t\tProbably has something to do with the object transfer algorithm. I think broadcast of large objects has not been stable for some time now.\n cc <denchmark-link:https://github.com/zhuohan123>@zhuohan123</denchmark-link>\n  <denchmark-link:https://github.com/suquark>@suquark</denchmark-link>\n  (who worked on a prototype for improving broadcast before), what do you think?\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "DMTSource", "commentT": "2020-07-23T02:23:28Z", "comment_text": "\n \t\t<denchmark-h:h3>I think my issue has to do with 2 things.</denchmark-h>\n \n Updated recreation code:\n <denchmark-link:https://gist.github.com/DMTSource/68f1b17fe076e33ef67a74ca7abce818>https://gist.github.com/DMTSource/68f1b17fe076e33ef67a74ca7abce818</denchmark-link>\n \n \n \n Load Balancing for the ActorPool(host can get many more workers than expected, nodes get less), which becomes really problematic with many machines. This is seemingly helped by manually syncing(passing the object in a blocking way, see gist), but the host is still overwhelmed easily with too many workers as more machines get added and the small inaccuracy in LB grows into a big problem. Broadcasting also may be an issue as so much ram needed host and nodes for shipping, and I am unsure how much of it cleans up after the sync(creating the need for the manual sync via a slow loop).\n \n \n A strange, inconsistent issue where a machine will not report to the dashboard(or shows and disappears over and over), and whatever this bad state is, it causes the crazy memory leak the moment the actor pool's map_unordered is called. I've seen this issue of the missing-from-dashboard node for a few versions (0.8.4-.6 and now the 0.9.0dev0.) A restart usually fixes that, but then it quickly falls back into the bad state if I recall. This machine still takes in some workers though and it sync manually(but very odd, elevated ram levels on nodes AND host), so it appears to be function and connecting to the cluster in some capacity but the LB or map calls really break down.\n \n \n To address load balancing in general, I am attempting to use a suggestion from <denchmark-link:https://github.com/ray-project/ray/issues/946>#946</denchmark-link>\n  (should this idea be in the docs for actor classes if valid still?), and ensure that when forming my worker pool, there is some sleep time to prevent bad distributions of load due to fast initializations. I start the cluster with 12 assigned out of 32 cpu per machine, for both the host and nodes.\n <denchmark-code># note inside the EvalActor class init I also use a small sleep like suggested in 946, but i noticed the actor creation loop seemed to be non blocking so I used the function below to guarantee a pause.\n n_workers = int(ray.cluster_resources()['CPU']) # This prints to show the correct 36 \n def init_with_pause(n_items_per_batch):\n         worker = EvalActor.remote(n_items_per_batch)\n         sleep(0.1) \n         return worker\n actors = [init_with_pause(n_items_per_batch) for _ in range(n_workers)]\n </denchmark-code>\n \n I removed the problematic machine for now and I am testing with 3(1 host + 2 nodes), which reduces issues with load balancing in general which is not ideal for testing the issue.\n <denchmark-h:h3>So, now with the code below:</denchmark-h>\n \n \n \n When using a manual loop to sync the nodes(see gist url or suggestions above), I still end up with a small deviation from the desired load balance(12/32 per), so the host ends up with a few more workers than the nodes. This small issue may scale poorly for many nodes.\n \n \n If I skip(comment out) the manual loop to sync, then the host gets MANY more workers, 20 when tested. But if I wait I can see the nodes do sync eventually while ram stays nominal on nodes and host(sort of, too many workers can easily hurt that, especially if the worker classes consume even more ram due to internal objects), and then the nodes launch the remaining number of workers to get to the tagert n_workers(36 with 3 the machines). If the host had any more workers though(will be especially true for 4+ machines) this would then cause a BIG memory issue on the host alone(i think this was my initial problem, so i need to manually sync but I NEED the number of workers per machine to hit their target or risk unpredictable behavior at scale).\n \n \n It seems in either case the problem may actually be related to load balancing and perhaps ActorPool/map_unorderd. But also I am concerned about the possibly related, odd behavior of some nodes that go into the sort-of-broken state of not showing(or flashing) in the dashboard.\n Here is an example from my production script(which now use the node sync from the gist before doing any work). I am unable to use more than 1 node + 2 machines due to the way memory is consumed by a large raylet combined with the bigger issue of extra workers on the host(should only be 12 but is 18, then the remaining 9 are split between the 2 nodes). Here is a pic of htop, dashboard, and the memory tab:\n <denchmark-link:https://github.com/ray-project/ray/files/4964180/memory_tab_cluster_issue.txt>memory_tab_cluster_issue.txt</denchmark-link>\n \n <denchmark-link:https://user-images.githubusercontent.com/8509302/88257387-93c67a00-cc8b-11ea-9c89-ceacdefedd55.png></denchmark-link>\n \n <denchmark-link:https://user-images.githubusercontent.com/8509302/88257412-9d4fe200-cc8b-11ea-894c-6969a70e70e4.png></denchmark-link>\n \n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "DMTSource", "commentT": "2020-07-25T21:32:07Z", "comment_text": "\n \t\tI'm trying to take this one step at a time as I realize my summary above is a bit messy....Is there a way I can better ensure load balance in a manual cluster beyond the <denchmark-link:https://github.com/ray-project/ray/issues/946>#946</denchmark-link>\n  sleep mentioned above? I have the current situation which may give clues to the issue(can skip to bold text at bottom):\n Today I am trying to get a 4 machine cluster working. I am seeing no leaks! Even with 1 node not reporting to dashboard like mentioned previously, so that may not be relevant or helpful.\n My host is assigned 12 num_cpu out of its 16 possible(was 14 num_cpu but had to drop it due to following), the nodes get 14 num_cpus. However, My host is usually running 17-20 of the workers created by the ActorPool, this is very problematic. I realize this may still be related to broadcasting many large items at once, because I get the following warning(this is for my production code not the recreation example):\n \n 2020-07-25 17:09:27,624\tWARNING worker.py:1122 -- Warning: The actor RayDeapEval has size 447379250 when pickled. It will be stored in Redis, which could cause memory issues. This may mean that its definition uses a large array or other object.\n \n This means: I have already performed a manual sync, of my feature array, with the cluster right after my put( I did a blocking loop and have already placed the large shared memory item on each node). However, when I then go to define the ActorPool and run map_unordered my host starts its work, but the nodes now need to receive their workers, which takes a minute or so due to the above large RayDeapEval remote actor class. Is THIS broadcast, or generally speaking any time consuming broadcast/worker launch on a manual cluster, bottlenecking and confusing the load balancer somehow and causing the 'bad' number of workers to be placed on the head vs the nodes which then causes memory issues or cpu saturation?\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "DMTSource", "commentT": "2020-07-25T21:49:02Z", "comment_text": "\n \t\tAre you somehow including some state (probably via some python scope) inside the actor? Usually you want to avoid really large actors (and your actor seems really really large). I would imagine the fix is that there's some data that you should instead move via the object store.\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "DMTSource", "commentT": "2020-07-26T02:41:46Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/richardliaw>@richardliaw</denchmark-link>\n  I reviewed the class and found that I was actually doing a bunch of work inside init, some of which was also indeed creating a large numpy array of bools. I will refactor the code to ensure I displace such work to a remote call after init, and work toward placing the troublesome array in the object store with the others to prevent this large actor issue.\n However, I just noticed that when syncing to my nodes(I run a minimal class based on my gist above) there are still some machines with the wrong number of workers, this occurs well before the code relevant to the large deap actor. This deviation in loads is similar to the issue I was seeing when running the <denchmark-link:https://gist.github.com/DMTSource/68f1b17fe076e33ef67a74ca7abce818>gists</denchmark-link>\n  above. It appears I was mistaken in my previous post and the load balance issue persists. I will restart my servers and keep trying to find a pattern with the gist code from a few posts ago.\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "DMTSource", "commentT": "2020-07-26T03:57:56Z", "comment_text": "\n \t\tHere is what I am seeing(screenshot below) and a more simple recreation script based on the above gists code.\n I'm just trying to focus now on load balance, as my original memory issues are impossible to mess with at scale(over 4 servers) without control of how many workers, in this example NodeUpdater workers(ignoring IDLE, should they be sticking around vs being consumed?), are going to each machine.\n \n Target is 14  NodeUpdater workers per machine\n num_cpus=14 for all 3(1host + 2 nodes)..\n When I run the script,  worker count is all over the place as shown in the pic below.\n Each time I run this script the servers take on a random number of NodeUpdater workers, one usually being close to or over 20.\n \n '''\n When I run this script. The number of workers on each machine seems to be all over the place. Sometimes 8, sometimes 20.\n Many IDLE workers remain in most cases (see screenshot).\n \n Starting manual cluster like:\n \n host\n ray start --head --redis-port=6379 --num-cpus=14 --num-gpus=0 --object-store-memory=21474836480\n node(2x)\n ray start --address='192.168.0.9:6379' --redis-password='5241590000000000' --num-cpus=14 --object-store-memory=21474836480\n \n Recreation script:\n '''\n \n import time\n import gc\n from time import time, sleep\n import numpy as np\n import pandas as pd\n import ray\n from ray.util import ActorPool\n \n #python 3.7.6\n print(\"ray.__version__: %s\" % ray.__version__) #0.9.0 dev0\n print(\"pd.__version__: %s\" % pd.__version__)   #1.0.1\n print(\"np.__version__: %s\" % np.__version__)   #1.18.1\n \n ray.init(address='auto', redis_password='5241590000000000')\n \n \n @ray.remote\n class NodeUpdater():\n     # some quick eval\n     def __init__(self, n_steps_per_batch):\n         self.n_steps_per_batch = n_steps_per_batch\n \n         # trying to combat wrong number of workers per node: https://github.com/ray-project/ray/issues/946\n         sleep(0.10)\n \n     def sync_node(self, shared_feature_obj):\n         sleep(0.10)\n         return True\n \n     def run_eval(self, shared_feature_obj):\n         # perform work\n         for _ in range(self.n_steps_per_batch):\n             np.sum(shared_feature_obj)\n         return True\n \n if __name__ == \"__main__\":\n \n     # create and put features\n     feature_values = np.random.random((int(5e5),500)).astype(np.float32)    \n     features_store_id = ray.put(feature_values)\n \n     n_workers = int(ray.cluster_resources()['CPU'])\n     print(\"\\nN_workers on cluster: %d\" % n_workers)\n \n     n_items_per_batch = 300 #do expensive batch loop inside worker\n \n     '''# trying to slow down creation to see if it helps(it did not)\n     def init_with_pause(n_items_per_batch):\n         worker = NodeUpdater.remote(n_items_per_batch)\n         sleep(0.25)\n         return worker\n     actors = [init_with_pause(n_items_per_batch) for _ in range(n_workers)]'''\n     # same behavior as above\n     actors = [NodeUpdater.remote(n_items_per_batch) for _ in range(n_workers)]\n \n     ind_creator_pool = ActorPool(actors)\n \n     start_time = time()\n     new_ind_batch =  ind_creator_pool.map_unordered(\n             lambda a, v: a.run_eval.remote(features_store_id), range(n_workers)\n         )\n     print(list(new_ind_batch))\n     elapsed_time = time() - start_time\n     print('map_unordered took: %0.1f' % elapsed_time)\n Dashboard:\n <denchmark-link:https://user-images.githubusercontent.com/8509302/88471018-8ef30780-ced1-11ea-9924-f419054fd282.png></denchmark-link>\n \n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "DMTSource", "commentT": "2020-07-26T04:08:21Z", "comment_text": "\n \t\tGreat! very helpful. To load balance, you should use <denchmark-link:https://docs.ray.io/en/master/actors.html#resources-with-actors>custom resources</denchmark-link>\n  (or assign each Actor more CPUs so that they won't overflow a certain machine).\n I just realized we don't have documentation on Node resources; but what you can do to force node->actor placement is to use:\n <denchmark-code>actor_cls = ray.remote(CLASS)\n actor_cls = actor_cls.option(resources={\"node:<node-ip>\": 0.25})\n [actor_cls.remote() for i in range(4)]\n \n actor_cls = actor_cls.option(resources={\"node:<node-ip2>\": 0.25})\n [actor_cls.remote() for i in range(4)]\n \n actor_cls = actor_cls.option(resources={\"node:<node-ip3>\": 0.25})\n [actor_cls.remote() for i in range(4)]\n </denchmark-code>\n \n which will force actors to be placed on a certain node.\n You can get all available node:s with ray.cluster_resources().\n Does that help?\n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "DMTSource", "commentT": "2020-07-26T04:09:52Z", "comment_text": "\n \t\tI think you can also add ray.remote(num_cpus=1) to NodeUpdater ?\n \t\t"}, "comments_17": {"comment_id": 18, "comment_author": "DMTSource", "commentT": "2020-07-26T06:43:57Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n  suggestion worked...I must have misread the docs thinking it defaults to 1 in an equivalent way <denchmark-link:https://docs.ray.io/en/master/actors.html#resources-with-actors>via the note here</denchmark-link>\n  so I never bother to try that as it seemed redundant, but I'm seeing now this has to do with 'lifetime' resources as per the second part of the note. Now things are working just fine with the load balance!\n <denchmark-link:https://github.com/richardliaw>@richardliaw</denchmark-link>\n  Thank you for showing me Node resources in options, I can use that for a targeted shared item sync vs having to test each worker for the shared memory item which was wasting time.\n Thank you both! I can now break my work up onto 2-4 server clusters and get to work without load balance issues!!!\n I am now back to the beginning of the issue. For a massive shared memory item I have to sync the object in a blocking way and only on few servers can be put into a manual cluster at once.\n \n I tried passing the object directly to the workers via remote when using map_unordered. With 14 hosts over 8 machines this doesnt work of course for 112 workers at once.\n If I try to 'sync' the 8 nodes at once the same thing occurs, quickly filling the 128gb of host memory very quickly with a massive raylet.\n Syncing 1 node at a time for a 8 server cluster, my host slowly grew to 70+ gb, and a few nodes reached their limit of 65gb too before I had to stop the attempt.\n Working with smaller clusters, such as 2-3 maybe 4 servers, appears to work with my current ram limits. It appears there is indeed an issue with broadcasting and the raylet for this 10gb object(use 5e6 len features in code below) grows huge for a larger manual cluster.\n \n Here is my script:\n '''\n Raylet grows uncontrollably on both host and workers if feature len is 5e6. It works for\n small cluster of 2-4 machines, beyond that raylets seems to leak.\n \n Starting manual cluster like:\n \n host\n ray start --head --redis-port=6379 --num-cpus=14 --num-gpus=0 --object-store-memory=21474836480\n node(7x)\n ray start --address='192.168.0.9:6379' --redis-password='5241590000000000' --num-cpus=14 --object-store-memory=21474836480\n \n Recreation script:\n '''\n \n import gc\n import numpy as np\n import pandas as pd\n import ray\n from ray.util import ActorPool\n \n #python 3.7.6\n print(\"ray.__version__: %s\" % ray.__version__) #0.9.0 dev0\n print(\"pd.__version__: %s\" % pd.__version__)   #1.0.1\n print(\"np.__version__: %s\" % np.__version__)   #1.18.1\n \n ray.init(address='auto', redis_password='5241590000000000')\n \n @ray.remote(num_cpus=1)\n class NodeManualSync():\n     def __init__(self):\n         pass\n     def sync_node(self, shared_feature_obj):\n         return True\n \n @ray.remote(num_cpus=1)\n class Worker():\n     # some quick eval\n     def __init__(self, n_items_per_batch):\n         self.n_items_per_batch = n_items_per_batch\n         # trying to combat wrong number of workers per node: https://github.com/ray-project/ray/issues/946\n \n     def run_eval(self, shared_feature_obj):\n         # perform any batch operation with the obj, we passed(or are passing) it to the worker above so the damage is done\n         for _ in range(self.n_items_per_batch):\n             np.sum(shared_feature_obj)\n         return True\n \n \n if __name__ == \"__main__\":\n \n     # create and put BIG features\n     #feature_values = np.random.random((int(5e5),500)).astype(np.float32)    \n     feature_values = np.random.random((int(5e6),500)).astype(np.float32)    \n     features_store_id = ray.put(feature_values)\n \n     n_workers = int(ray.cluster_resources()['CPU'])\n     ips_of_nodes = [node['NodeManagerAddress'] for node in ray.nodes() if node['Alive']]\n \n     print(\"\\n%d workers on cluster of  1 host+%d nodes.\" % (n_workers, len(ips_of_nodes)-1))\n \n     # pre sync the features to each node specifically(5e6 len features triggers the issues below)\n     # Passing directly to every actor in pool causes huge raylet to form\n     # Just doing all 7 nodes at once also takes over 128gb of memory, do it slowly:\n     print('\\nPerforming Manual Node Sync...')\n     for ip in ips_of_nodes:\n         actor_cls = NodeManualSync.options(resources={\"node:%s\"%ip: 0.25}).remote()\n         ray.get(actor_cls.sync_node.remote(features_store_id))\n         # We HAVE to clean up workers now since workers use @ray.remote(num_cpus=1)\n         #    otherwise they consume cpu for lifetime even if idle and we max out cpu via map below.\n         # Or can have them share via num_cpus=0.5, just for example. Not needed here.\n         del actor_cls \n         gc.collect() \n \n     # create actors for doing heavy work\n     n_items_per_batch = 10 #do expensive batch loop inside worker\n     actors = [Worker.remote(n_items_per_batch) for _ in range(n_workers)]\n     \n     # create actor pool\n     print('\\nWorking via ActorPool...')\n     actor_pool = ActorPool(actors)\n \n     # do work\n     results =  list(actor_pool.map_unordered(\n             lambda a, v: a.run_eval.remote(features_store_id), range(n_workers)\n         )\n     )\n \n     print(results)\n \t\t"}, "comments_18": {"comment_id": 19, "comment_author": "DMTSource", "commentT": "2020-08-14T20:14:11Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/barakmich>@barakmich</denchmark-link>\n  did you have time to look into this?\n \t\t"}, "comments_19": {"comment_id": 20, "comment_author": "DMTSource", "commentT": "2020-08-21T21:25:59Z", "comment_text": "\n \t\tI may have a reproduction using <denchmark-link:https://github.com/DMTSource>@DMTSource</denchmark-link>\n  's most recent code, I can relatively easily get the following C++ stack trace on my dev box:\n <denchmark-code>F0821 21:18:05.024861 424272 424535 core_worker.cc:513]  Check failed: _s.ok() Bad status: IOError: Broken pipe\n *** Check failure stack trace: ***\n     @     0x7f03551957fd  google::LogMessage::Fail()\n     @     0x7f0355196ec9  google::LogMessage::SendToLog()\n     @     0x7f03551954e9  google::LogMessage::Flush()\n     @     0x7f03551956f2  google::LogMessage::~LogMessage()\n     @     0x7f035514a679  ray::RayLog::~RayLog()\n     @     0x7f0354de8f17  _ZNSt17_Function_handlerIFvRKN3ray8ObjectIDEbEZNS0_10CoreWorkerC4ERKNS0_17CoreWorkerOptionsERKNS0_8WorkerIDEEUlS3_bE8_E9_M_invokeERKSt9_Any_dataS3_Ob\n     @     0x7f0354e3c846  ray::ObjectRecoveryManager::PinOrReconstructObject()\n     @     0x7f0354de126a  _ZZZN3ray10CoreWorkerC4ERKNS_17CoreWorkerOptionsERKNS_8WorkerIDEENKUlRKNS_8ObjectIDERKSt8functionIFvS9_RKSt6vectorINS_3rpc7AddressESaISD_EEEEE7_clES9_SL_ENKUlRKNS_6StatusERKSB_INSC_15ObjectTableDataESaISQ_EEE_clESP_SU_\n     @     0x7f0354eb497a  _ZNSt17_Function_handlerIFvRKN3ray6StatusERKNS0_3rpc23GetObjectLocationsReplyEEZNS0_3gcs30ServiceBasedObjectInfoAccessor17AsyncGetLocationsERKNS0_8ObjectIDERKSt8functionIFvS1_RKSt6vectorINS4_15ObjectTableDataESaISG_EEEEEUlS3_S7_E_E9_M_invokeERKSt9_Any_dataS3_S7_\n     @     0x7f0354e79d11  _ZNSt17_Function_handlerIFvRKN3ray6StatusERKNS0_3rpc23GetObjectLocationsReplyEEZNS4_12GcsRpcClient18GetObjectLocationsERKNS4_25GetObjectLocationsRequestERKSt8functionIS8_EEUlS3_S7_E_E9_M_invokeERKSt9_Any_dataS3_S7_\n     @     0x7f0354e739d5  ray::rpc::ClientCallImpl<>::OnReplyReceived()\n     @     0x7f0354da12b2  _ZN5boost4asio6detail18completion_handlerIZN3ray3rpc17ClientCallManager29PollEventsFromCompletionQueueEiEUlvE_E11do_completeEPvPNS1_19scheduler_operationERKNS_6system10error_codeEm\n     @     0x7f03551d9b28  boost::asio::detail::scheduler::do_run_one()\n     @     0x7f03551da691  boost::asio::detail::scheduler::run()\n     @     0x7f03551dd894  boost::asio::io_context::run()\n     @     0x7f0354d83bdf  ray::CoreWorker::RunIOService()\n     @     0x7f0327cbcbf4  execute_native_thread_routine\n     @     0x7f03585469a1  start_thread\n     @     0x7f03589ef193  __GI___clone\n zsh: abort (core dumped)  python oom_failure.py\n </denchmark-code>\n \n This matches the previous stack trace in the initial gist (<denchmark-link:https://gist.github.com/DMTSource/b50aeffde22b51bb82019d9b3e84f921>https://gist.github.com/DMTSource/b50aeffde22b51bb82019d9b3e84f921</denchmark-link>\n ) -- pruned because logs are intertwined:\n <denchmark-code>F0712 19:01:12.391517 19469 19484 core_worker.cc:490] Check failed: _s.ok() Bad status: IOError: Broken pipe\n *** Check failure stack trace: ***\n @ 0x7f23ba5577dd google::LogMessage::Fail()\n @ 0x7f23ba55893c google::LogMessage::SendToLog()\n @ 0x7f23ba5574b9 google::LogMessage::Flush()\n @ 0x7f23ba5576d1 google::LogMessage::~LogMessage()\n @ 0x7f23ba5413a9 ray::RayLog::~RayLog()\n @ 0x7f23ba252f85 _ZNSt17_Function_handlerIFvRKN3ray8ObjectIDEbEZNS0_10CoreWorkerC1ERKNS0_17CoreWorkerOptionsERKNS0_8WorkerIDEEUlS3_bE10_E9_M_invokeERKSt9_Any_dataS3_b\n @ 0x7f23ba2a9e92 ray::ObjectRecoveryManager::PinOrReconstructObject()\n @ 0x7f23ba2538f5 ZNSt17_Function_handlerIFvN3ray6StatusERKSt6vectorINS0_3rpc15ObjectTableDataESaIS4_EEEZZNS0_10CoreWorkerC1ERKNS0_17CoreWorkerOptionsERKNS0_8WorkerIDEENKUlRKNS0_8ObjectIDERKSt8functionIFvSJ_RKS2_INS3_7AddressESaISL_EEEEE9_clESJ_ST_EUlRKS1_S8_E_E9_M_invokeERKSt9_Any_dataS1_S8\n @ 0x7f23ba32a40b ZNSt17_Function_handlerIFvRKN3ray6StatusERKNS0_3rpc23GetObjectLocationsReplyEEZNS0_3gcs30ServiceBasedObjectInfoAccessor17AsyncGetLocationsERKNS0_8ObjectIDERKSt8functionIFvS1_RKSt6vectorINS4_15ObjectTableDataESaISG_EEEEEUlS3_S7_E_E9_M_invokeERKSt9_Any_dataS3_S7\n @ 0x7f23ba2efedf ZNSt17_Function_handlerIFvRKN3ray6StatusERKNS0_3rpc23GetObjectLocationsReplyEEZNS4_12GcsRpcClient18GetObjectLocationsERKNS4_25GetObjectLocationsRequestERKSt8functionIS8_EEUlS3_S7_E_E9_M_invokeERKSt9_Any_dataS3_S7\n @ 0x7f23ba2effe3 ray::rpc::ClientCallImpl<>::OnReplyReceived()\n @ 0x7f23ba21d960 _ZN5boost4asio6detail18completion_handlerIZN3ray3rpc17ClientCallManager29PollEventsFromCompletionQueueEiEUlvE_E11do_completeEPvPNS1_19scheduler_operationERKNS_6system10error_codeEm\n @ 0x7f23ba7946df boost::asio::detail::scheduler::do_run_one()\n @ 0x7f23ba7952f1 boost::asio::detail::scheduler::run()\n @ 0x7f23ba796242 boost::asio::io_context::run()\n @ 0x7f23ba202f80 ray::CoreWorker::RunIOService()\n @ 0x7f23bbeee421 execute_native_thread_routine_compat\n @ 0x7f23d01f1184 start_thread\n @ 0x7f23cff1e03d clone\n Aborted (core dumped)\n </denchmark-code>\n \n Is this looking about right? It's probably more than coincidence, and it gives a very direct place to dive in\n Also has the feature that a local ray.init (as per the gist) works fine\n \t\t"}, "comments_20": {"comment_id": 21, "comment_author": "DMTSource", "commentT": "2020-08-21T23:04:15Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/barakmich>@barakmich</denchmark-link>\n  I think that stacktrace is just an indication that the local raylet has crashed. The error message is unfortunately not informative, but I believe this comes up when the Python driver receives an error on its IPC connection to its local raylet. So it does seem like you are reproducing some crash, but you'll probably need to dig into the raylet logs more, not the driver.\n \t\t"}, "comments_21": {"comment_id": 22, "comment_author": "DMTSource", "commentT": "2020-08-25T11:44:50Z", "comment_text": "\n \t\tI'm facing a similar issue. I have 4 machines, and one of them is a machine with a GPU.\n For example, we name these machines in A, B, C, D, and D is the GPU machine.\n Before some modifications I do:\n \n on D, put some parameters to an actor on A\n actors on B and C will get the parameters from the actor on A\n After some modifications I do:\n on D, put some parameters to an actor on A\n one of actors on B or C will get the parameters from the actor on A\n then this actor will use ray.put to put parameters in the object store memory on B or C\n other actors will get the object id from the actor on its local machine and use ray.get to get the real object\n \n So the problem is in the second situation, the actors on D, which put the parameters, will use a lot of SHR memory (40+GB), and the raylet on D will eventually crash due to lack of shared memory, which is set to 150GB. The total memory available on D is 367GB.\n I thought it was a good way to improve the first situation before applying these modifications. But I didn't know this issue would happen and destroy the training progress.\n \t\t"}, "comments_22": {"comment_id": 23, "comment_author": "DMTSource", "commentT": "2020-11-11T00:29:37Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/DMTSource>@DMTSource</denchmark-link>\n  if you're still running into this, it should be fixed in the nightly wheels. Let us know if the issue still happens!\n \t\t"}, "comments_23": {"comment_id": 24, "comment_author": "DMTSource", "commentT": "2020-11-18T16:15:04Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ericl>@ericl</denchmark-link>\n  I tested with 4 machines using the wheel: ray-1.1.0.dev0. I am seeing absolutely no odd/extra ram use or issues like before on any machine due to the large plasma object broadcast. I will try at larger scales asap but the broadcasting is now going very smoothly. Thank you all and congrats on ray 1.0+ release!\n \t\t"}}}, "commit": {"commit_id": "ee2da0cf45ac70225d9196b4fad7f63a45dcfa55", "commit_author": "Eric Liang", "commitT": "2020-11-09 18:01:47-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "BUILD.bazel", "file_new_name": "BUILD.bazel", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "810,811,812,813,814,815,816,817,818,819,820,821", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\tests\\test_object_manager.py", "file_new_name": "python\\ray\\tests\\test_object_manager.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "160,161", "deleted_lines": "160,161,162", "method_info": {"method_name": "test_actor_broadcast", "method_params": "ray_start_cluster_with_resource", "method_startline": "122", "method_endline": "194"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ray\\common\\ray_config_def.h", "file_new_name": "src\\ray\\common\\ray_config_def.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "196,197,198,199,200,201", "deleted_lines": "196"}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 8, "file_old_name": "src\\ray\\object_manager\\object_manager.cc", "file_new_name": "src\\ray\\object_manager\\object_manager.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "418,419,420,421", "deleted_lines": null, "method_info": {"method_name": "ray::PushManager::OnChunkComplete", "method_params": "", "method_startline": "418", "method_endline": "421"}}, "hunk_1": {"Ismethod": 1, "added_lines": "73,74,75,76", "deleted_lines": null, "method_info": {"method_name": "ray::ObjectManager::ObjectManager", "method_params": "main_service,self_node_id,config,object_directory,restore_spilled_object,spill_objects_callback", "method_startline": "53", "method_endline": "94"}}, "hunk_2": {"Ismethod": 1, "added_lines": "407,408,409,410,411,412,413,414,415,416", "deleted_lines": null, "method_info": {"method_name": "ray::PushManager::StartPush", "method_params": "push_id,num_chunks,send_chunk_fn", "method_startline": "407", "method_endline": "416"}}, "hunk_3": {"Ismethod": 1, "added_lines": "535,536,537,538,539,547,548,549", "deleted_lines": "499,500,501,502,525,531,532,533,534,535,536,537,538,539,540,541,542,543,548", "method_info": {"method_name": "ray::ObjectManager::SendObjectChunk", "method_params": "push_id,object_id,owner_address,client_id,data_size,metadata_size,chunk_index,rpc_client", "method_startline": "499", "method_endline": "549"}}, "hunk_4": {"Ismethod": 1, "added_lines": "423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455", "deleted_lines": null, "method_info": {"method_name": "ray::PushManager::ScheduleRemainingPushes", "method_params": "", "method_startline": "423", "method_endline": "455"}}, "hunk_5": {"Ismethod": 1, "added_lines": "535,536,537,538,539", "deleted_lines": "481,482,483,484,485,486,487,488,489,490,491,499,500,501,502,525,531,532,533,534,535,536,537,538,539,540,541,542,543", "method_info": {"method_name": "ray::ObjectManager::Push", "method_params": "object_id,client_id", "method_startline": "457", "method_endline": "545"}}, "hunk_6": {"Ismethod": 1, "added_lines": "547,548,549,550,551,552,575,576,582,583,584,585,586,587,588,589,590,591,592,593,594,595", "deleted_lines": "548", "method_info": {"method_name": "ray::ObjectManager::SendObjectChunk", "method_params": "push_id,object_id,owner_address,client_id,data_size,metadata_size,chunk_index,rpc_client,on_complete", "method_startline": "547", "method_endline": "600"}}, "hunk_7": {"Ismethod": 1, "added_lines": "974", "deleted_lines": null, "method_info": {"method_name": "ray::ObjectManager::DebugString", "method_params": "", "method_startline": "966", "method_endline": "979"}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "src\\ray\\object_manager\\object_manager.h", "file_new_name": "src\\ray\\object_manager\\object_manager.h", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "133", "deleted_lines": null, "method_info": {"method_name": "ray::PushManager::NumChunksRemaining", "method_params": "", "method_startline": "133", "method_endline": "133"}}, "hunk_1": {"Ismethod": 1, "added_lines": "130", "deleted_lines": null, "method_info": {"method_name": "ray::PushManager::NumChunksInFlight", "method_params": "", "method_startline": "130", "method_endline": "130"}}, "hunk_2": {"Ismethod": 1, "added_lines": "138,139,140,141,142,143,144,145,146", "deleted_lines": null, "method_info": {"method_name": "ray::PushManager::DebugString", "method_params": "", "method_startline": "138", "method_endline": "146"}}, "hunk_3": {"Ismethod": 1, "added_lines": "110,111,112,113", "deleted_lines": null, "method_info": {"method_name": "ray::PushManager::PushManager", "method_params": "max_chunks_in_flight", "method_startline": "110", "method_endline": "113"}}, "hunk_4": {"Ismethod": 1, "added_lines": "136", "deleted_lines": null, "method_info": {"method_name": "ray::PushManager::NumPushesInFlight", "method_params": "", "method_startline": "136", "method_endline": "136"}}}}, "file_5": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "src\\ray\\object_manager\\test\\push_manager_test.cc"}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ray\\raylet\\main.cc", "file_new_name": "src\\ray\\raylet\\main.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "239,240", "deleted_lines": null, "method_info": {"method_name": "main", "method_params": "argc", "method_startline": "62", "method_endline": "292"}}}}}}}