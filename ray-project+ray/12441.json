{"BR": {"BR_id": "12441", "BR_author": "PidgeyBE", "BRopenT": "2020-11-26T10:24:22Z", "BRcloseT": "2020-11-30T04:55:51Z", "BR_text": {"BRsummary": "[autoscaler] Actor resource demands are not cleared after actor is scheduled", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n \n ray nightly\n \n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Take the following steps:\n \n start a k8s autoscaling cluster\n Execute: (I did in in ipython in ray head container)\n \n <denchmark-code>import os\n import ray\n \n ray.init(address=\"auto\")\n \n @ray.remote(num_cpus=0.2)\n class ActorA:\n     def __init__(self):\n         pass\n \n a = ActorA.remote()\n b = ActorA.remote()\n \n # wait untill deployed, then kill actors or exit ipython\n ray.kill(a)\n ray.kill(b)\n </denchmark-code>\n \n -> output of autoscaling monitor:\n <denchmark-code>2020-11-26 10:23:43,710 INFO resource_demand_scheduler.py:193 -- Resource demands: [{'CPU': 0.2}, {'CPU': 0.2}]\n </denchmark-code>\n \n -> the actor resources stick, instead of getting cleaned up\n I would expect the resources to be cleaned up...\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "PidgeyBE", "commentT": "2020-11-27T18:06:20Z", "comment_text": "\n \t\tI think this may be the same issue as <denchmark-link:https://github.com/ray-project/ray/issues/12381>#12381</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "PidgeyBE", "commentT": "2020-11-27T23:48:52Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/wuisawesome>@wuisawesome</denchmark-link>\n  it looks like the actor demands aren't cleared after the actor is scheduled. The following unit test reproduces:\n <denchmark-code>def test_actor_resource_demand(shutdown_only):\n     cluster = ray.init(num_cpus=3)\n     global_state_accessor = GlobalStateAccessor(\n         cluster[\"redis_address\"], ray.ray_constants.REDIS_DEFAULT_PASSWORD)\n     global_state_accessor.connect()\n \n     @ray.remote(num_cpus=2)\n     class Actor:\n         def foo(self):\n             return \"ok\"\n \n     a = Actor.remote()\n     ray.get(a.foo.remote())\n     time.sleep(2)\n \n     message = global_state_accessor.get_all_heartbeat()\n     heartbeat = ray.gcs_utils.HeartbeatBatchTableData.FromString(message)\n \n     # The actor is scheduled so there should be no more demands left.\n     print(heartbeat)\n     assert len(heartbeat.resource_load_by_shape.resource_demands) == 0\n \n     global_state_accessor.disconnect()\n </denchmark-code>\n \n \t\t"}}}, "commit": {"commit_id": "f1cc33a6a6086122548b02bd8ff7edda9e277148", "commit_author": "Alex Wu", "commitT": "2020-11-29 20:55:50-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\tests\\test_actor_advanced.py", "file_new_name": "python\\ray\\tests\\test_actor_advanced.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092", "deleted_lines": null, "method_info": {"method_name": "test_actor_resource_demand", "method_params": "shutdown_only", "method_startline": "1042", "method_endline": "1092"}}, "hunk_1": {"Ismethod": 1, "added_lines": "1051,1052", "deleted_lines": null, "method_info": {"method_name": "test_actor_resource_demand.foo", "method_params": "self", "method_startline": "1051", "method_endline": "1052"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\ray\\gcs\\gcs_server\\gcs_actor_scheduler.cc", "file_new_name": "src\\ray\\gcs\\gcs_server\\gcs_actor_scheduler.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "38", "deleted_lines": null, "method_info": {"method_name": "ray::gcs::GcsActorScheduler::GcsActorScheduler", "method_params": "io_context,gcs_actor_table,gcs_node_manager,gcs_pub_sub,schedule_failure_handler,schedule_success_handler,lease_client_factory,client_factory", "method_startline": "25", "method_endline": "42"}}, "hunk_1": {"Ismethod": 1, "added_lines": "212,213,214,254,255", "deleted_lines": "250", "method_info": {"method_name": "ray::gcs::GcsActorScheduler::LeaseWorkerFromNode", "method_params": "actor,node", "method_startline": "192", "method_endline": "256"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ray\\gcs\\gcs_server\\gcs_actor_scheduler.h", "file_new_name": "src\\ray\\gcs\\gcs_server\\gcs_actor_scheduler.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "289,290", "deleted_lines": null}}}}}}