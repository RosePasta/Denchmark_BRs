{"BR": {"BR_id": "10134", "BR_author": "magicly", "BRopenT": "2020-08-15T13:37:34Z", "BRcloseT": "2020-08-26T03:41:41Z", "BR_text": {"BRsummary": "`ray.wait` more than `timeout`", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n when supplied  parameter,  doesn't match the semantics from docs <denchmark-link:https://docs.ray.io/en/latest/package-ref.html?highlight=wait#ray.wait>https://docs.ray.io/en/latest/package-ref.html?highlight=wait#ray.wait</denchmark-link>\n  :\n \n If timeout is set, the function returns either when the requested number of IDs are ready or when the timeout is reached, whichever occurs first.\n \n In fact, I find that, when timeout is less than 1s, the cost time actually is 2 * timeout; and when timeout is greater than 1s, the cost time actually is timeout + 1.\n It happens in both 0.8.7 and 0.86.\n Ray version and other system information (Python version, TensorFlow version, OS):\n Python 3.7.4 (default, Aug 13 2019, 20:35:49)\n [GCC 7.3.0] :: Anaconda, Inc. on linux\n \n ubuntu 18.04\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):\n import time\n \n import ray\n \n ray.init()\n print(ray.__version__)\n \n \n @ray.remote\n def busy(i):\n     time.sleep(i)\n     return i\n \n \n ids = [busy.remote(0.5 * i) for i in range(1, 10)]\n num_returns = 5\n \n t1 = time.time()\n ready, not_ready = ray.wait(ids, num_returns=num_returns, timeout=0.3)\n print(f\"{ready}, cost time: {time.time() - t1}\")\n \n \n ids = not_ready\n t1 = time.time()\n ready, not_ready = ray.wait(ids, num_returns=num_returns, timeout=1.3)\n print(f\"{ready}, cost time: {time.time() - t1}\")\n the output is:\n 0.8.7\n [ObjectRef(45b95b1c8bd3a9c4ffffffff010000c001000000)], cost time: 0.6006457805633545\n [ObjectRef(ef0a6c221819881cffffffff010000c001000000), ObjectRef(f66d17bae2b0e765ffffffff010000c001000000), ObjectRef(44ee453cd1e8e283ffffffff010000c001000000), ObjectRef(7e0a4dfc4c87306fffffffff010000c001000000)], cost time: 2.3008031845092773\n If we cannot run your script, we cannot fix your issue.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "magicly", "commentT": "2020-08-17T18:31:52Z", "comment_text": "\n \t\tThis looks bad. <denchmark-link:https://github.com/edoakes>@edoakes</denchmark-link>\n  Do you have any clue why it happens?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "magicly", "commentT": "2020-08-19T03:50:31Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ericl>@ericl</denchmark-link>\n  I will take it over next week.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "magicly", "commentT": "2020-08-19T17:16:45Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n  not sure exactly why it happens but the wait logic in the core worker is pretty ugly. I think we can actually clean it up a lot now that we expect everything to be in the in-memory store - this would be a good chance to do that.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "magicly", "commentT": "2020-08-19T17:58:45Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n  Got sucked into this over lunch and ended up finding the issue. Assigned you on the PR.\n \t\t"}}}, "commit": {"commit_id": "cbd9632f3a08a48cae72e903196409b89376129f", "commit_author": "Edward Oakes", "commitT": "2020-08-25 22:41:39-05:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\tests\\test_basic.py", "file_new_name": "python\\ray\\tests\\test_basic.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "261,262,263,264,265,266,267,268,269,270,271,272,273,274", "deleted_lines": null, "method_info": {"method_name": "test_wait_timing", "method_params": "shutdown_only", "method_startline": "261", "method_endline": "274"}}, "hunk_1": {"Ismethod": 1, "added_lines": "265,266", "deleted_lines": null, "method_info": {"method_name": "test_wait_timing.f", "method_params": "", "method_startline": "265", "method_endline": "266"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ray\\core_worker\\core_worker.cc", "file_new_name": "src\\ray\\core_worker\\core_worker.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1047,1048,1049,1050,1051,1052,1053,1055,1056,1057,1058,1064", "deleted_lines": "1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1064,1068,1069,1070,1071,1072,1073,1074,1075", "method_info": {"method_name": "ray::CoreWorker::Wait", "method_params": "ids,num_objects,timeout_ms,results", "method_startline": "1030", "method_endline": "1075"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ray\\core_worker\\store_provider\\memory_store\\memory_store.cc", "file_new_name": "src\\ray\\core_worker\\store_provider\\memory_store\\memory_store.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "319,320,327", "deleted_lines": "319,320,326", "method_info": {"method_name": "ray::CoreWorkerMemoryStore::GetImpl", "method_params": "object_ids,num_objects,timeout_ms,ctx,remove_after_get,results,abort_if_any_object_is_exception", "method_startline": "240", "method_endline": "371"}}}}}}}