{"BR": {"BR_id": "7799", "BR_author": "simon-mo", "BRopenT": "2020-03-29T21:36:47Z", "BRcloseT": "2020-03-31T01:28:14Z", "BR_text": {"BRsummary": "Async Actor Segfault on PyTorch Tensor", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n Ray version and other system information (Python version, TensorFlow version, OS):\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):\n import torch\n from ray import serve\n import ray\n \n serve.init()\n @serve.route(\"/echo\")\n def echo(_, data):\n     return torch.rand(1, 3, 244, 244)\n \n tensor = torch.rand(1, 3, 244, 244)\n \n print(ray.get(echo.remote(data=tensor)).shape)\n This script is flaky, running it three times on my laptop can reproduce the output:\n <denchmark-code>2020-03-29 14:33:56,630\tINFO resource_spec.py:212 -- Starting Ray with 38.33 GiB memory available for workers and up to 0.09 GiB for objects. You can adjust these settings with ray.init(memory=<bytes>, object_store_memory=<bytes>).\n 2020-03-29 14:33:56,981\tINFO services.py:1151 -- View the Ray dashboard at localhost:8265\n (pid=42340) INFO:     Started server process [42340]\n (pid=42340) INFO:     Waiting for application startup.\n (pid=42340) INFO:     Application startup complete.\n (pid=42340) INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n E0329 14:34:00.692930 29990912 task_manager.cc:254] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.serve.policy, class_name=RandomPolicyQueueActor, function_name=enqueue_request, function_hash=}, task_id=b944ee5bb38dd1a5fbe69b320100, job_id=0100, num_args=4, num_returns=2, actor_task_spec={actor_id=fbe69b320100, actor_caller_id=ffffffffffffffffffffffff0100, actor_counter=2}\n Traceback (most recent call last):\n   File \"srtml.py\", line 12, in <module>\n 2020-03-29 14:34:00,694\tWARNING worker.py:1072 -- A worker died or was killed while executing task fffffffffffffffffbe69b320100.\n     print(ray.get(echo.remote(data=tensor)).shape)\n   File \"/Users/simonmo/Desktop/ray/ray/python/ray/worker.py\", line 1515, in get\n     raise value\n ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.\n (pid=42331) *** Aborted at 1585517640 (unix time) try \"date -d @1585517640\" if you are using GNU date ***\n (pid=42331) PC: @                0x0 (unknown)\n (pid=42331) *** SIGSEGV (@0x66) received by PID 42331 (TID 0x7000078b2000) stack trace: ***\n (pid=42333) E0329 14:34:00.692922 222285824 task_manager.cc:254] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.serve.policy, class_name=RandomPolicyQueueActor, function_name=dequeue_request, function_hash=}, task_id=2f567df85d55d93afbe69b320100, job_id=0100, num_args=4, num_returns=2, actor_task_spec={actor_id=fbe69b320100, actor_caller_id=ffffffffffffffffb4cb21440100, actor_counter=1}\n </denchmark-code>\n \n If we cannot run your script, we cannot fix your issue.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "simon-mo", "commentT": "2020-03-29T23:59:22Z", "comment_text": "\n \t\tYeah, in general I don't trust passing Tensors around in Ray. Ideally, I can just pass in an entire pytorch nn Module into ray.put.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "simon-mo", "commentT": "2020-03-30T00:41:00Z", "comment_text": "\n \t\tRay cannot handle tensor input and output ?? \ud83d\ude28\n Hmm somehow it's just async actor related.\n import torch\n import ray\n \n ray.init()\n \n @ray.remote\n class Echo:\n     async def echo(self, data):\n         print(\"got data\", data.shape)\n         return data\n \n e = Echo.remote()\n tensor = torch.rand(1, 3, 244, 244)\n print(ray.get(e.echo.remote(tensor)).shape)\n \t\t"}}}, "commit": {"commit_id": "dc9b62e0073eb223aeb271cb816f9f8248de5d75", "commit_author": "Simon Mo", "commitT": "2020-03-30 18:28:13-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "python\\ray\\_raylet.pyx", "file_new_name": "python\\ray\\_raylet.pyx", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "318,397,403,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127", "deleted_lines": "300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,334,413,419,434,449"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "python\\ray\\serve\\tests\\test_task_runner.py", "file_new_name": "python\\ray\\serve\\tests\\test_task_runner.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "71", "deleted_lines": "71", "method_info": {"method_name": "test_ray_serve_mixin", "method_params": "serve_instance", "method_startline": "52", "method_endline": "80"}}, "hunk_1": {"Ismethod": 1, "added_lines": "95", "deleted_lines": "95", "method_info": {"method_name": "test_task_runner_check_context", "method_params": "serve_instance", "method_startline": "83", "method_endline": "103"}}, "hunk_2": {"Ismethod": 1, "added_lines": "166,168,169,170,180,183", "deleted_lines": "166,168,169,170,180,183", "method_info": {"method_name": "test_task_runner_custom_method_batch", "method_params": "serve_instance", "method_startline": "146", "method_endline": "183"}}, "hunk_3": {"Ismethod": 1, "added_lines": "125", "deleted_lines": "125", "method_info": {"method_name": "test_task_runner_custom_method_single", "method_params": "serve_instance", "method_startline": "106", "method_endline": "143"}}, "hunk_4": {"Ismethod": 1, "added_lines": "40", "deleted_lines": "40", "method_info": {"method_name": "test_runner_actor", "method_params": "serve_instance", "method_startline": "30", "method_endline": "49"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ray\\raylet\\node_manager.cc", "file_new_name": "src\\ray\\raylet\\node_manager.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "3413,3419,3420,3421", "deleted_lines": "3426", "method_info": {"method_name": "ray::raylet::FormatMemoryInfo", "method_params": "node_stats", "method_startline": "3383", "method_endline": "3459"}}}}}}}