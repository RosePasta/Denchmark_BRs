{"BR": {"BR_id": "10150", "BR_author": "mattearllongshot", "BRopenT": "2020-08-17T09:07:43Z", "BRcloseT": "2020-08-27T16:48:24Z", "BR_text": {"BRsummary": "Poor spillback scheduling behavior in large clusters", "BRdescription": "\n <denchmark-h:h1>What is the problem?</denchmark-h>\n \n Ray version: 0.8.5\n Python version: 3.8.1\n OS: Ubuntu 18.04.4 LTS\n When launching 3000 tasks on an autoscaling EC2 cluster, start times are staggered by more than a minute.  Here is an image illustrating this:\n <denchmark-link:https://user-images.githubusercontent.com/37295291/90377427-e408e000-e06f-11ea-8974-864d7f5a8598.png></denchmark-link>\n \n Each horizontal line here represents a task, and they are grouped into blocks according to node that the task is run on, and then ordered by start time.  The x-axis scale is seconds.  As you can see, on some nodes some tasks can start over a minute after others, even if the task is doing a simple sleep, which can extend the run time of the task / incur unnecessary EC2 charges.\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Boot an EC2 cluster using worker types c4.8xlarge, and then run the following script.  You'll need matplotlib / pandas / numpy installed to reproduce the plot, but otherwise it'll run with just ray.\n <denchmark-code>import datetime\n import socket\n import time\n \n import ray\n from ray.autoscaler.autoscaler import request_resources\n \n ray.init('127.0.0.1:6379')\n \n @ray.remote(num_cpus=1)\n def func():\n     start = datetime.datetime.utcnow()\n     time.sleep(120)\n     end = datetime.datetime.utcnow()\n     return start, end, socket.gethostname()\n \n request_resources(3000)\n results = ray.get([func.remote() for _ in range(3000)])   # errors/warnings produced here\n \n #  Produce the plot\n import numpy as np\n import pandas as pd\n import matplotlib.pyplot as plt\n \n df = pd.DataFrame(data=results, columns=['start_time', 'end_time', 'host_name'])\n df = df.sort_values(['host_name', 'start_time'])\n min_time = df.start_time.min()\n \n y = 0\n last_host_name = None\n plt.figure(figsize=(20, 100))\n for _, row in df.iterrows():\n     if last_host_name != None and row.host_name != last_host_name:\n         y += 10\n     x1 = (row.start_time - min_time).total_seconds()\n     x2 = (row.end_time - min_time).total_seconds()\n     plt.plot([x1, x2], [y, y])\n     y += 1\n     last_host_name = row.host_name\n </denchmark-code>\n \n At the point of running   a few errors are output, which I've attached here:\n <denchmark-link:https://github.com/ray-project/ray/files/5083237/errors.txt>errors.txt</denchmark-link>\n \n I tried it with a smaller set of tasks (1000) but couldn't reproduce the issue.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "mattearllongshot", "commentT": "2020-08-17T18:36:13Z", "comment_text": "\n \t\tcc <denchmark-link:https://github.com/wuisawesome>@wuisawesome</denchmark-link>\n  <denchmark-link:https://github.com/ijrsvt>@ijrsvt</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "mattearllongshot", "commentT": "2020-08-17T22:01:56Z", "comment_text": "\n \t\tInteresting. <denchmark-link:https://github.com/mattearllongshot>@mattearllongshot</denchmark-link>\n  to clarify, does this happen also on a fixed-sized (non-autoscaling cluster)?\n I can't think of any reason why this would happen, beyond some scheduling bug (cc <denchmark-link:https://github.com/stephanie-wang>@stephanie-wang</denchmark-link>\n  for ideas)\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "mattearllongshot", "commentT": "2020-08-17T22:39:12Z", "comment_text": "\n \t\tIt seems likely due to bad behavior in the spillback policy used to load-balance tasks in a cluster. Could also just be that the spillback policy is too slow to push tasks onto other nodes. <denchmark-link:https://github.com/wuisawesome>@wuisawesome</denchmark-link>\n  probably has a better idea than me.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "mattearllongshot", "commentT": "2020-08-17T22:51:27Z", "comment_text": "\n \t\tAh, this might just be fixed in the new scheduler (or at least, it makes sense to investigate after we've enabled the new scheduler).\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "mattearllongshot", "commentT": "2020-08-17T22:59:30Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mattearllongshot>@mattearllongshot</denchmark-link>\n  you mentioned errors/warnings. are these just warning about the number of workers started? or are there other warnings?\n My initial instinct was that this could be a side effect of rate limiting the number of in flight lease requests?\n If Stephanie's theory is correct, this should go away/change with the new scheduler. I agree that we should investigate after/when enabling the new scheduler.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "mattearllongshot", "commentT": "2020-08-18T09:53:11Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/wuisawesome>@wuisawesome</denchmark-link>\n , I've pasted the errors here <denchmark-link:https://github.com/ray-project/ray/files/5083237/errors.txt>https://github.com/ray-project/ray/files/5083237/errors.txt</denchmark-link>\n  . They look like raylet crashes.  Both of the IPs shown in the log are for worker nodes.\n Is the new scheduler in the nightlies?  I've just reproduced the issue with the latest ray nightly build (latest as of Monday, at least).  Here is the output from that run:\n <denchmark-link:https://github.com/ray-project/ray/files/5089621/errors-2020-08-18.txt>errors-2020-08-18.txt</denchmark-link>\n .\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "mattearllongshot", "commentT": "2020-08-18T10:13:15Z", "comment_text": "\n \t\tI've just managed to reproduce something similar locally (with yesterday's nightly).\n <denchmark-code>import datetime, time, ray\n \n ray.init(num_cpus=50)\n \n @ray.remote(num_cpus=1)\n def func():\n     start = datetime.datetime.utcnow()\n     time.sleep(15)\n     return start\n \n results = ray.get([func.remote() for _ in range(30)])\n min_time = min(results)\n print([(r - min_time).total_seconds() for r in results])\n </denchmark-code>\n \n output:\n [0.002964, 0.002317, 0.021966, 0.0, 0.001448, 0.034085, 0.003278, 0.004434, 0.004678, 0.00506, 0.005454, 0.006248, 0.344598, 0.682394, 1.028834, 1.362036, 1.698101, 2.02707, 2.370679, 2.71421, 3.103086, 3.429623, 3.792918, 4.165995, 4.483482, 4.817203, 5.157538, 5.475349, 5.825019, 6.172419]\n so start times are staggered by up to 6 seconds, when launching 30 sleep tasks.  Could this be related to the main issue above?  No raylet crashes this time though.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "mattearllongshot", "commentT": "2020-08-18T16:36:30Z", "comment_text": "\n \t\tThat's probably just worker start delay, it takes time to launch 50\n workers. Subsequent runs will be faster.\n <denchmark-link:#>\u2026</denchmark-link>\n \n \n On Tue, Aug 18, 2020, 3:13 AM mattearllongshot ***@***.***> wrote:\n  I've just managed to reproduce something similar locally (with yesterday's\n  nightly).\n \n  import datetime, time, ray\n \n  ray.init(num_cpus=50)\n \n  @ray.remote(num_cpus=1)\n  def func():\n      start = datetime.datetime.utcnow()\n      time.sleep(15)\n      return start\n \n  results = ray.get([func.remote() for _ in range(30)])\n  min_time = min(results)\n  print([(r - min_time).total_seconds() for r in results])\n \n  output:\n  [0.002964, 0.002317, 0.021966, 0.0, 0.001448, 0.034085, 0.003278,\n  0.004434, 0.004678, 0.00506, 0.005454, 0.006248, 0.344598, 0.682394,\n  1.028834, 1.362036, 1.698101, 2.02707, 2.370679, 2.71421, 3.103086,\n  3.429623, 3.792918, 4.165995, 4.483482, 4.817203, 5.157538, 5.475349,\n  5.825019, 6.172419]\n \n  so start times are staggered by up to 6 seconds, when launching 30 sleep\n  tasks. Could this be related to the main issue above?\n \n  \u2014\n  You are receiving this because you commented.\n  Reply to this email directly, view it on GitHub\n  <#10150 (comment)>,\n  or unsubscribe\n  <https://github.com/notifications/unsubscribe-auth/AAADUSRJP2YHH4YEMR6KGL3SBJH4VANCNFSM4QBNQ3PQ>\n  .\n \n \n \n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "mattearllongshot", "commentT": "2020-08-18T18:53:52Z", "comment_text": "\n \t\tHmm yeah 300ms is long, but we never really optimize for start up time so it's definitely believable. I will label this an enhancement because we could probably do a better job of tuning some of our constants (in this case, maybe maximum_startup_concurrency)\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "mattearllongshot", "commentT": "2020-08-18T20:09:14Z", "comment_text": "\n \t\tHmm <denchmark-link:https://github.com/wuisawesome>@wuisawesome</denchmark-link>\n , is that relevant to the original issue, though? It doesn't seem like worker startup time alone explains the staggered tasks in the cluster version. Anyway, it'd be good to confirm if that's the case.\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "mattearllongshot", "commentT": "2020-08-18T21:28:53Z", "comment_text": "\n \t\tSo the 2 \"non-bug\" factors here are autoscaling latency and overhead of spinning up new workers. We should probably confirm both of those, and see what portion of the staggering this accounts for (it sounds like your intuition is saying it won't account for all of this?)\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "mattearllongshot", "commentT": "2020-08-18T21:35:43Z", "comment_text": "\n \t\tI don't think autoscaling latency is relevant here since the diagram shows that all machines start at around the same time.\n The reason I don't think the worker startup time is the only issue is because the diagram shows that times are staggered by up to ~60s. c4.8xlarge as 36 vCPUs, so that would mean nearly 2s to start each worker process, which seems very high.\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "mattearllongshot", "commentT": "2020-08-18T21:51:56Z", "comment_text": "\n \t\tBtw, I heard issues in the past that the worker startup took more than a couple seconds when it is running inside containers. Don't remember the details though. (<denchmark-link:https://github.com/ray-project/ray/pull/9221>#9221</denchmark-link>\n )\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "mattearllongshot", "commentT": "2020-08-19T08:43:17Z", "comment_text": "\n \t\tOk, it sounds like the local issue is indeed separate then. I don't think it's <denchmark-link:https://github.com/ray-project/ray/pull/9221>#9221</denchmark-link>\n  since we're not using docker or containers.  Is there any more info I can grab to help diagnose the cluster issue?\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "mattearllongshot", "commentT": "2020-08-19T08:50:31Z", "comment_text": "\n \t\tOne other feature in the diagram is that some nodes start just fine (all workers start instantaneously) which makes me doubt that it's just a performance barrier on worker startup time, otherwise why would some nodes be immune to it?\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "mattearllongshot", "commentT": "2020-08-19T11:42:43Z", "comment_text": "\n \t\tHere's the output of ray.timeline(), in case it's useful.  It seems not to be showing some of the workers though.\n <denchmark-link:https://github.com/ray-project/ray/files/5096131/timeline.tracing.log>timeline.tracing.log</denchmark-link>\n \n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "mattearllongshot", "commentT": "2020-08-19T16:24:29Z", "comment_text": "\n \t\tOne thing that might help is if you could collect the raylet logs from all of the nodes with debug logging on. This is a bit of a headache to do, so only if you're stuck on this :)\n \n Set RAY_BACKEND_LOG_LEVEL=debug on all nodes, including the head node. You can do that by prepending the ray start commands in the autoscaler config.\n Collect /tmp/ray/session_latest/logs/raylet.out, one per node.\n \n \t\t"}, "comments_17": {"comment_id": 18, "comment_author": "mattearllongshot", "commentT": "2020-08-20T10:18:17Z", "comment_text": "\n \t\tHere's the output for one of worker node's raylets:\n <denchmark-link:https://github.com/ray-project/ray/files/5102266/raylet_10.2.252.220.out.zip>raylet_10.2.252.220.out.zip</denchmark-link>\n \n I have the others so if you need any more, let me know (in total they are 150MB compressed).\n \t\t"}, "comments_18": {"comment_id": 19, "comment_author": "mattearllongshot", "commentT": "2020-08-20T10:23:03Z", "comment_text": "\n \t\tNote that the performance this time was slightly worse than before (the spread of the start times of each task was even longer), possibly due to the extra work that was having to be done by the logging?\n \t\t"}, "comments_19": {"comment_id": 20, "comment_author": "mattearllongshot", "commentT": "2020-08-20T17:19:40Z", "comment_text": "\n \t\tAck yeah, so this seems to be very clearly an issue with the current spillback scheduling policy (the policy used to distribute tasks across multiple nodes). In this file alone, there are 2000+ events where the raylet spills back to another node! :(\n Sorry this is so bad right now, but hopefully the new scheduler will make these issues go away. <denchmark-link:https://github.com/wuisawesome>@wuisawesome</denchmark-link>\n  could potentially work on a quick fix for the current scheduler that would at least solve this issue.\n <denchmark-link:https://github.com/mattearllongshot>@mattearllongshot</denchmark-link>\n , are you blocked on this right now?\n \t\t"}, "comments_20": {"comment_id": 21, "comment_author": "mattearllongshot", "commentT": "2020-08-20T17:30:10Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/stephanie-wang>@stephanie-wang</denchmark-link>\n  we're not really blocked, but it'd be nice to get it fixed since it's adding a couple of minutes onto our testing times, plus the associated EC2 charges.  You mention it should be fixed in the new scheduler, is the new scheduler in the latest nightlies?  The above testing was done with the nightly build as of Monday.\n \t\t"}, "comments_21": {"comment_id": 22, "comment_author": "mattearllongshot", "commentT": "2020-08-20T17:33:18Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/stephanie-wang>@stephanie-wang</denchmark-link>\n  I think we've discovered this in the stress test before (when there are lots of stress, there are lots of spillback). The root cause was inbetween each heartbeat update, the node has wrong information, and it spillbacks to the wrong nodes. I think if we materialize heartbeat data (meaning we temporarily update the heartbeat data in-memory), this can be alleviated.\n \t\t"}, "comments_22": {"comment_id": 23, "comment_author": "mattearllongshot", "commentT": "2020-08-20T17:53:40Z", "comment_text": "\n \t\t\n @stephanie-wang I think we've discovered this in the stress test before (when there are lots of stress, there are lots of spillback). The root cause was inbetween each heartbeat update, the node has wrong information, and it spillbacks to the wrong nodes. I think if we materialize heartbeat data (meaning we temporarily update the heartbeat data in-memory), this can be alleviated.\n \n Thanks, <denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n ! But unfortunately I don't think that's the problem here. There are as many cores as tasks so any of the nodes are feasible and there shouldn't really be a stale heartbeat problem, except maybe when a node is close to becoming full.\n \n You mention it should be fixed in the new scheduler, is the new scheduler in the latest nightlies? The above testing was done with the nightly build as of Monday.\n \n <denchmark-link:https://github.com/wuisawesome>@wuisawesome</denchmark-link>\n  can comment on this.\n \t\t"}, "comments_23": {"comment_id": 24, "comment_author": "mattearllongshot", "commentT": "2020-08-20T17:57:22Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mattearllongshot>@mattearllongshot</denchmark-link>\n  the new scheduler isn't really ready to be used yet. It will likely be usable (but not stable or on by default) in ~1 month. Essentially long enough to not be useful for you, but close enough that there probably won't be any major overhauls to the current scheduler.\n Definitely open to a quick heuristic to help with spillback on the current scheduler though.\n \t\t"}, "comments_24": {"comment_id": 25, "comment_author": "mattearllongshot", "commentT": "2020-08-24T13:18:08Z", "comment_text": "\n \t\tThanks for the updates everyone.  Looking forward to trying out the new scheduler when it's ready.  In the meantime are there any settings we can tweak with the current scheduler to minimize this effect, or are there any possible workarounds?\n \t\t"}, "comments_25": {"comment_id": 26, "comment_author": "mattearllongshot", "commentT": "2020-08-24T14:51:22Z", "comment_text": "\n \t\tHmm I don't think we fully understand the scope of this bug yet which makes it hard to suggest a mitigation. If you could use actors instead of tasks, that might help (assuming you an get some reuse out of the actors, otherwise the overhead will just be high).\n I think we should have a patch in master (for the old scheduler) in the next 2 weeks though.\n \t\t"}, "comments_26": {"comment_id": 27, "comment_author": "mattearllongshot", "commentT": "2020-08-25T22:03:28Z", "comment_text": "\n \t\tHey <denchmark-link:https://github.com/mattearllongshot>@mattearllongshot</denchmark-link>\n , we just merged a temporary fix for this. When you get a chance, can you retry your workload on the nightly wheels for this commit? <denchmark-link:https://github.com/ray-project/ray/commit/d4537ac1ced4923ebbc2fd838b325a324072ab4c>d4537ac</denchmark-link>\n \n \t\t"}, "comments_27": {"comment_id": 28, "comment_author": "mattearllongshot", "commentT": "2020-08-26T17:01:28Z", "comment_text": "\n \t\tSounds great.  I haven't been able to test this today due to EC2 instance availability, but I'll give it another go tomorrow.\n \t\t"}, "comments_28": {"comment_id": 29, "comment_author": "mattearllongshot", "commentT": "2020-08-27T08:24:32Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/stephanie-wang>@stephanie-wang</denchmark-link>\n  , here are the results from yesterday's nightly wheel:\n <denchmark-link:https://user-images.githubusercontent.com/37295291/91416316-21772580-e847-11ea-9705-a94b455d6757.png></denchmark-link>\n \n I've added dashed horizontal lines to make it separate IPs more clearly.  It seems to be more even on startup times, but a few tasks are being delayed until after the others have finished\n \t\t"}, "comments_29": {"comment_id": 30, "comment_author": "mattearllongshot", "commentT": "2020-08-27T08:30:26Z", "comment_text": "\n \t\tI also get these errors printed to stderr when running ray.get: <denchmark-link:https://github.com/ray-project/ray/files/5135094/errors.txt>errors.txt</denchmark-link>\n \n \t\t"}, "comments_30": {"comment_id": 31, "comment_author": "mattearllongshot", "commentT": "2020-08-27T09:29:16Z", "comment_text": "\n \t\tThe above appears to have some instances delayed in their bringup, which perhaps could be causing the problem?  I've run it again and this time the behaviour is more sensible.  Here's the image:\n <denchmark-link:https://user-images.githubusercontent.com/37295291/91422818-96e6f400-e84f-11ea-83d2-4b654d79e442.png></denchmark-link>\n \n Note that one node ends up executing more than the others (57 tasks vs 35) but this is because some instances did not come up (presumably just EC2 issues)  until after the over subscribed node had started its second round of tasks.  No errors on stderr this time.\n \t\t"}, "comments_31": {"comment_id": 32, "comment_author": "mattearllongshot", "commentT": "2020-08-27T16:48:24Z", "comment_text": "\n \t\tThanks, <denchmark-link:https://github.com/mattearllongshot>@mattearllongshot</denchmark-link>\n ! I think those stderr messages match <denchmark-link:https://github.com/ray-project/ray/issues/10343>#10343</denchmark-link>\n  and should be fixed by the next release.\n I'm closing this issue for now since it seems like the scheduling issue is resolved for the moment. Please feel free to reopen if something else comes up!\n \t\t"}, "comments_32": {"comment_id": 33, "comment_author": "mattearllongshot", "commentT": "2020-08-27T17:04:49Z", "comment_text": "\n \t\tGreat! Thanks for taking the time to fix this.  Looking forward to the next release.\n \t\t"}}}, "commit": {"commit_id": "d4537ac1ced4923ebbc2fd838b325a324072ab4c", "commit_author": "Stephanie Wang", "commitT": "2020-08-25 15:01:59-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "python\\ray\\tests\\test_advanced_3.py", "file_new_name": "python\\ray\\tests\\test_advanced_3.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91", "deleted_lines": null, "method_info": {"method_name": "test_local_scheduling_first", "method_params": "ray_start_cluster", "method_startline": "66", "method_endline": "91"}}, "hunk_1": {"Ismethod": 1, "added_lines": "79,80,81", "deleted_lines": null, "method_info": {"method_name": "test_local_scheduling_first.f", "method_params": "", "method_startline": "79", "method_endline": "81"}}, "hunk_2": {"Ismethod": 1, "added_lines": "83,84", "deleted_lines": null, "method_info": {"method_name": "test_local_scheduling_first.local", "method_params": "", "method_startline": "83", "method_endline": "84"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\ray\\raylet\\node_manager.cc", "file_new_name": "src\\ray\\raylet\\node_manager.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "990,991", "deleted_lines": "989", "method_info": {"method_name": "ray::raylet::NodeManager::HeartbeatAdded", "method_params": "client_id,heartbeat_data", "method_startline": "936", "method_endline": "1011"}}, "hunk_1": {"Ismethod": 1, "added_lines": "922,923", "deleted_lines": "922", "method_info": {"method_name": "ray::raylet::NodeManager::TryLocalInfeasibleTaskScheduling", "method_params": "", "method_startline": "916", "method_endline": "934"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "src\\ray\\raylet\\scheduling_policy.cc", "file_new_name": "src\\ray\\raylet\\scheduling_policy.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "186,187,190,196,201", "deleted_lines": "168,169,172,173,179,186,187,188,191,193,198", "method_info": {"method_name": "ray::raylet::SchedulingPolicy::SpillOver", "method_params": "remote_scheduling_resources", "method_startline": "168", "method_endline": "201"}}, "hunk_1": {"Ismethod": 1, "added_lines": "56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74", "deleted_lines": "56", "method_info": {"method_name": "ray::raylet::SchedulingPolicy::Schedule", "method_params": "cluster_resources,local_client_id", "method_startline": "31", "method_endline": "152"}}, "hunk_2": {"Ismethod": 1, "added_lines": "186,187,190,196,201,202,203", "deleted_lines": "186,187,188,191,193,198", "method_info": {"method_name": "ray::raylet::SchedulingPolicy::SpillOverInfeasibleTasks", "method_params": "node_resources", "method_startline": "186", "method_endline": "203"}}, "hunk_3": {"Ismethod": 1, "added_lines": "205,206,207,208,209,210,211,212,213,215,216,217,218,219,220,221,222,223,224,225,226,229,230,231,232,233,234,235,236,237,239,243,244,245", "deleted_lines": null, "method_info": {"method_name": "ray::raylet::SchedulingPolicy::SpillOver", "method_params": "remote_resources,local_resources", "method_startline": "205", "method_endline": "249"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ray\\raylet\\scheduling_policy.h", "file_new_name": "src\\ray\\raylet\\scheduling_policy.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "64,65,66,67,68,69,70,73,74,75,76,77,78,79,80", "deleted_lines": "66,67,68,69,70,71"}}}}}}