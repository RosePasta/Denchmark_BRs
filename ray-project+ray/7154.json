{"BR": {"BR_id": "7154", "BR_author": "thomaschn", "BRopenT": "2020-02-13T16:22:52Z", "BRcloseT": "2020-02-18T21:27:15Z", "BR_text": {"BRsummary": "[cluster] [rllib] Performance plummeting until Error \"Failed to get Object\"", "BRdescription": "\n I'm working on a local ray cluster with 5 nodes (160 CPU and 2 GPU in total). There, training with rllib always starts out rather stable, but after a while learning slows down to a crawl and never recovers. Eventually, the nodes in the cluster randomly spit out various amounts of the following error message:\n \n object_buffer_pool.cc:49] Failed to get object\n \n This problem (very slow progress and sporadically \"Failed to get object\") persists until the cluster is restarted. So even restarting the script or running another script does not work properly.\n <denchmark-link:https://user-images.githubusercontent.com/61015896/74452979-1435b300-4e82-11ea-9020-1b61dd45f50e.png></denchmark-link>\n \n The colored bars indicate the time at which the nodes print the error message. Also, note that the RAM usage is increasing as soon as the throughput is dropping.\n Ray version and other system information (Python version, TensorFlow version, OS):\n \n Ray 0.9.0.dev0 (latest nightly, but stable 0.8.1 has the same problem)\n Python 3.6.10 (Conda 4.7.12)\n Ubuntu 18.04 and 16.04\n \n Ray is installed in a conda environment on all nodes of the cluster. I'm starting the cluster with a yaml file similar to <denchmark-link:https://github.com/ray-project/ray/blob/master/python/ray/autoscaler/local/example-full.yaml>example-full.yaml</denchmark-link>\n . However, to start ray inside the conda environment, I use the following commands:\n <denchmark-code>head_start_ray_commands: \n     - >-\n         source *CONDA_FILE* &&\n         conda activate *CONDA_ENV_NAME* &&\n         ray stop && \n         ulimit -c unlimited &&\n         export CUDA_VISIBLE_DEVICES=0,1 &&\n         ray start --head --redis-port=6379 --autoscaling-config=~/ray_bootstrap_config.yaml --include-webui=True --num-cpus=32 --num-gpus=2\n \n worker_start_ray_commands:\n     - >-\n         source *CONDA_FILE* &&\n         conda activate *CONDA_ENV_NAME* &&\n         ray stop &&  \n         ray start --address=$RAY_HEAD_IP:6379 --num-cpus=32\n </denchmark-code>\n \n <denchmark-h:h3>Reproduction</denchmark-h>\n \n \n (yaml file from <denchmark-link:https://github.com/ray-project/rl-experiments/blob/master/pong-speedrun/pong-impala-fast.yaml>rl-experiments</denchmark-link>\n  )\n \n \n  I have verified my script runs in a clean environment and reproduces the issue.\n \n \n  I have verified the issue also occurs with the latest wheels.\n \n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "thomaschn", "commentT": "2020-02-13T20:12:28Z", "comment_text": "\n \t\tIt sounds like this is due to running out of object store memory. Pong observations are fairly large and with a very large number of workers this is likely to happen.\n \n How much memory is available on the GPU node? For high throughput training you probably want at least several tens of gigabytes.\n The object store is capped at 20GB by default, you can try increasing it on each node by setting object_store_memory config on ray start or init.\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "thomaschn", "commentT": "2020-02-13T20:54:03Z", "comment_text": "\n \t\t\n \n There are 180GB of memory available on the GPU node. However, the error occured on all other nodes (90GB each). Could too little memory on the GPU node cause this kind of error on the other nodes?\n \n \n I will try this again tomorrow. Is there a rule of thumb on how much object store memory will be needed?\n However, I tried increasing the object_store_memory to 50GB on each node before (with a different environment) and it made no difference. Similarly, the ram usage was stable in the beginning and suddenly increased later on, when the performance dropped. From several prior test it looked like there is no regularity in the duration (or number of steps) it takes for the problem to occur - independent of the object store cap.\n \n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "thomaschn", "commentT": "2020-02-13T20:57:09Z", "comment_text": "\n \t\tYeah, it could be the CPU nodes running out. 50GB sounds like quite a lot though. A good rule of thumb is the obs size * sample batch size * num_workers * 5 (fudge factor), which shouldn't be anywhere near 50GB.\n If increasing the object store size makes the run last longer before stalling, then it could be a memory leak. cc <denchmark-link:https://github.com/edoakes>@edoakes</denchmark-link>\n  <denchmark-link:https://github.com/stephanie-wang>@stephanie-wang</denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "thomaschn", "commentT": "2020-02-13T20:58:21Z", "comment_text": "\n \t\tActually can you also include the full trace for object_buffer_pool.cc:49] Failed to get object ?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "thomaschn", "commentT": "2020-02-13T21:07:14Z", "comment_text": "\n \t\tThere is no full trace, as far as the error message is concerned. I could try to increase the logging level to DEBUG and hope for more insight.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "thomaschn", "commentT": "2020-02-14T10:12:04Z", "comment_text": "\n \t\tI'm experiencing similar issues on a cluster of 6 DGX-2 where each has 500 GB object storage. Takes a while however before the error occurs.\n I'll update if I get any useful input.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "thomaschn", "commentT": "2020-02-14T16:28:03Z", "comment_text": "\n \t\tRegarding the object store limit\n I ran the same experiment with 20GB (orange), 25GB (dark blue) and 40GB (light blue) object_store_memory on all nodes (50GB caused ray to crash after a few minutes - long before the memory even had a chance to fill up). The cluster consists of 4 CPU nodes (32 cores) with 93GB memory each and 1 GPU node (32 cores + 2 GPUs) with 186GB.\n Here are the results:\n <denchmark-link:https://user-images.githubusercontent.com/61015896/74546433-d81a5500-4f4a-11ea-80bf-c64694c2471c.png></denchmark-link>\n \n \n Indeed, the available object store limit influences the time it takes for the slowdown to occur\n However, the slowdown does not happen when the object store limit is hit, but some time later\n The Failed to get object Error happens later still: both of the blue runs were stopped as soon as it occurred. Until then, there is no additional output whatsoever.\n Also, the bigger the object store the bigger the memory increase after slowdown\n \n Regarding the error message\n I could not get it to output a full trace, even with RAY_BACKEND_LOG_LEVEL=debug. However, here is the output of /tmp/ray/session_latest/logs/plasma_store.err for the 25GB run (dark blue):\n \n WARNING: Logging before InitGoogleLogging() is written to STDERR\n I0214 14:00:41.087133 20184 store.cc:1228] Allowing the Plasma store to use up to 25GB of memory.\n I0214 14:00:41.087306 20184 store.cc:1255] Starting object store with directory /dev/shm and huge page support disabled\n I0214 14:15:44.313051 20184 eviction_policy.cc:134] There is not enough space to create this object, so evicting 1247 objects to free up 5001957671 bytes. The number of bytes in use (before this eviction) is 24999064639.\n I0214 14:18:14.711824 20184 eviction_policy.cc:134] There is not enough space to create this object, so evicting 1247 objects to free up 5001957671 bytes. The number of bytes in use (before this eviction) is 24998456512.\n I0214 14:20:42.372227 20184 eviction_policy.cc:134] There is not enough space to create this object, so evicting 1247 objects to free up 5001957671 bytes. The number of bytes in use (before this eviction) is 24999006161.\n I0214 14:41:49.462220 20184 store.cc:738] Disconnecting client on fd 42\n I0214 14:41:49.792961 20184 store.cc:738] Disconnecting client on fd 31\n [...]\n \n For context:\n \n object store limit is reached at 15:15:40 (0.2 on x axis)\n memory usage starts growing at 14:22:49 (0.3 on x axis)\n run is terminated by me at 14:41\n \n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "thomaschn", "commentT": "2020-02-14T19:20:00Z", "comment_text": "\n \t\tThanks, this confirms it is a Ray backend bug.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "thomaschn", "commentT": "2020-02-15T01:05:37Z", "comment_text": "\n \t\tI'm having trouble reproducing on (TF 1.15, Ray 0.8.1, Python 3.6, p2.16xl GPU node, m4.16xl CPU node):\n <denchmark-link:https://user-images.githubusercontent.com/14922/74578874-f5035800-4f4b-11ea-96e0-31372d34988c.png></denchmark-link>\n \n Orange is 20GB object store size, blue is 2GB. Both seem to be operating fine past 15-20M timesteps, which has crashed for all configs above. Maybe there is some difference in TF version? There could be some issue where TF is not releasing references to objects. I am using the latest DLAMI, with this yaml:\n <denchmark-code>pong-impala-fast:\n     env: PongNoFrameskip-v4\n     run: IMPALA\n     config:\n         sample_batch_size: 50\n         train_batch_size: 1000\n         num_workers: 128\n         num_envs_per_worker: 5\n         broadcast_interval: 20\n         max_sample_requests_in_flight_per_worker: 1\n         num_data_loader_buffers: 4\n         num_gpus: 2\n         model:\n           dim: 42\n </denchmark-code>\n \n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "thomaschn", "commentT": "2020-02-17T13:40:36Z", "comment_text": "\n \t\tI've just tried the following versions on Python 3.6 with 2GB object storage:\n \n TF 1.15 (both tensorflow and tensorflow-gpu)\n TF 2.0.0\n TF 2.1.0\n ray 0.8.1\n ray 0.9.0 (latest nightly)\n \n On all of these versions, the problem was occurring. Interestingly, it was also occurring very consistently across these runs at a rather precise number of steps (~2.5M). And it confirmed once more that there is a clear relation between object store size and duration until failure.\n I've tried to use ray stack to get some traces, but this requires sudo access which I don't have on those machines.\n Also, I've noticed that the latest nightly prints the following error message during cluster startup, even though I'm not using docker:\n <denchmark-code>2020-02-17 14:19:47,119 WARNING utils.py:406 -- Container memory is larger than system memory.\n 2020-02-17 14:19:47,119 WARNING utils.py:431 -- Container is reporting more memory usage than thesystem.\n </denchmark-code>\n \n On an unrelated note: I'm surprised to see your throughput to match mine almost exactly. How did you achieve <denchmark-link:https://github.com/ray-project/rl-experiments/blob/master/pong-speedrun/pong-impala.png>almost double of that</denchmark-link>\n  with 128 workers on the <denchmark-link:https://github.com/ray-project/rl-experiments>Pong in 3 minutes</denchmark-link>\n  experiment?\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "thomaschn", "commentT": "2020-02-17T16:44:52Z", "comment_text": "\n \t\tI've ran some more experiments by changing the number of nodes in the cluster. It seems like the error only occures when there are more than 2 nodes in the cluster:\n \n 2 nodes (64 CPUs, 2 GPUs): stable\n 3 nodes (96 CPUs, 2 GPUs): 10M steps till error, little slowdown after object store >= 2GB\n 5 nodes (160 CPUs, 2 GPUs): 2.5M steps till error, drastic slowdown after object store >= 2GB\n \n (each run with 63 workers, object store limit at 2GB)\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "thomaschn", "commentT": "2020-02-17T19:47:13Z", "comment_text": "\n \t\tI was able to reproduce this on a 5-node cluster with a p2.16xl head and 4 m4.16xl worker nodes.\n After a few minutes, you start seeing \"Failed to get object\". The frequency of these errors seems to grow over time. Also, raylet CPU and memory seem to increase. The raylet reaches >100% CPU usage on worker nodes.\n I was not able to reproduce the \"drastic slowdown\" part but it could be just these nodes have so much memory it takes a long time to hit that point.\n Here are logs from a raylet on a worker node: <denchmark-link:https://gist.github.com/ericl/496873f85b3052039cec11e7aec56581>https://gist.github.com/ericl/496873f85b3052039cec11e7aec56581</denchmark-link>\n \n The debug state of the worker node:\n <denchmark-link:https://gist.github.com/ericl/067ba33c5ee03718ab7075d327b1a98b>https://gist.github.com/ericl/067ba33c5ee03718ab7075d327b1a98b</denchmark-link>\n \n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "thomaschn", "commentT": "2020-02-17T19:53:00Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/thomaschn>@thomaschn</denchmark-link>\n  can you confirm if you see the performance cliff even with ray==0.8.0? I see the error messages with that version, but am not if it is as severe.\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "thomaschn", "commentT": "2020-02-17T21:10:23Z", "comment_text": "\n \t\tYes, I can imagine your nodes having enough memory to smooth out this issue for a while. After all, your nodes are not even at 10% memory usage, whereas mine are towards 20-50% in total. More specifically, I regularly noticed the nodes which reported Failed to get Object to run completely out of memory. So even 50% of memory usage in total often times means that the failing nodes are at 100%.\n If I remember correctly, ray==0.8.0 crashed completely in those cases with this error message:\n <denchmark-code> \"Object {} is lost (either LRU evicted or deleted by user) and \"\n             \"cannot be reconstructed. Try increasing the object store \"\n             \"memory available with ray.init(object_store_memory=<bytes>) \"\n             \"or setting object store limits with \"\n             \"ray.remote(object_store_memory=<bytes>). See also: {}\".format(\n                 self.object_id.hex(),\n                 \"https://ray.readthedocs.io/en/latest/memory-management.html\"\n </denchmark-code>\n \n I will try to reproduce on 0.8.0 tomorrow. If it helps, I can provide the same logs as you did, <denchmark-link:https://github.com/ericl>@ericl</denchmark-link>\n  . In that case, from which files exactly are those logs?\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "thomaschn", "commentT": "2020-02-17T21:12:37Z", "comment_text": "\n \t\tThe first log is the raylet.out from the worker node in /tmp/ray/session_latest/logs. The second one is the debug_state.txt in session_latest.\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "thomaschn", "commentT": "2020-02-17T21:28:53Z", "comment_text": "\n \t\tCurrent working hypothesis is something like this:\n \n some spurious transfer failure causes a request to get stuck pending forever\n the pending request consumes some amount of temporary buffer memory (and also object store memory)?\n eventually enough pending requests accumulate to cause an OOM\n \n The correlation of the events with filling up the object store could be due to transfer failures only occurring once the object store is filled.\n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "thomaschn", "commentT": "2020-02-18T05:47:53Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ericl>@ericl</denchmark-link>\n  is this fixed by <denchmark-link:https://github.com/ray-project/ray/pull/7201>#7201</denchmark-link>\n ?\n <denchmark-link:https://github.com/thomaschn>@thomaschn</denchmark-link>\n  can you try install from latest development snapshot <denchmark-link:https://ray.readthedocs.io/en/latest/installation.html#latest-snapshots-nightlies>https://ray.readthedocs.io/en/latest/installation.html#latest-snapshots-nightlies</denchmark-link>\n  see if the fix address this issue?\n \t\t"}, "comments_17": {"comment_id": 18, "comment_author": "thomaschn", "commentT": "2020-02-18T05:56:31Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/simon-mo>@simon-mo</denchmark-link>\n  it gets rid of the object get errors in my testing. Would be great to get confirmation.\n \t\t"}, "comments_18": {"comment_id": 19, "comment_author": "thomaschn", "commentT": "2020-02-18T15:01:37Z", "comment_text": "\n \t\tThanks a lot!\n Yes, I can confirm that this problem does not occur any more with the latest development snapshot. No Failed to get object, no drastic slowdown.\n I've run some experiments with 2GB (orange) and 20GB (blue) object store limit on a 5 node cluster using 128 workers. For comparison: magenta is yesterdays \"stable\" run using 64 workers on 2 nodes with 2GB object store limit.\n <denchmark-link:https://user-images.githubusercontent.com/61015896/74747599-7d913980-5267-11ea-8ac1-7635f5b55e20.png></denchmark-link>\n \n However, the memory usage is still growing and the throughput noticeably decreasing over time. I'm not sure though whether this is the same issue or yet another problem.\n \t\t"}, "comments_19": {"comment_id": 20, "comment_author": "thomaschn", "commentT": "2020-02-18T21:26:32Z", "comment_text": "\n \t\tI think that might be a TF issue. When I set num_gpus=1 and commented out the num_data_loader_buffers config, the slowdown vanished (orange line):\n <denchmark-link:https://user-images.githubusercontent.com/14922/74779380-38164180-5252-11ea-93fe-b803e811bb9d.png></denchmark-link>\n \n So it might be a multi-gpu or concurrent data loader caused leak.\n \t\t"}, "comments_20": {"comment_id": 21, "comment_author": "thomaschn", "commentT": "2020-02-18T21:27:15Z", "comment_text": "\n \t\tI'm going to close this issue, feel free to open another one for the more gradual slowdown.\n \t\t"}}}, "commit": {"commit_id": "fae99ecb8e8d750bddcb3674f720f068541dc15d", "commit_author": "Eric Liang", "commitT": "2020-02-17 18:35:25-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ray\\core_worker\\store_provider\\plasma_store_provider.cc", "file_new_name": "src\\ray\\core_worker\\store_provider\\plasma_store_provider.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "135,136,137", "deleted_lines": "135", "method_info": {"method_name": "ray::UnblockIfNeeded", "method_params": "client,ctx", "method_startline": "132", "method_endline": "145"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ray\\raylet\\node_manager.cc", "file_new_name": "src\\ray\\raylet\\node_manager.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "2100,2104,2105,2106,2107,2108,2109,2110,2111,2112", "deleted_lines": "2100,2124", "method_info": {"method_name": "ray::raylet::NodeManager::HandleDirectCallTaskUnblocked", "method_params": "worker", "method_startline": "2071", "method_endline": "2133"}}}}}}}