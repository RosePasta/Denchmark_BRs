{"BR": {"BR_id": "8713", "BR_author": "wuisawesome", "BRopenT": "2020-06-01T21:26:57Z", "BRcloseT": "2020-06-23T01:26:46Z", "BR_text": {"BRsummary": "[ParallelIterator] for_each_concur leaks memory", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n for_each_concur appears to leak memory. After iterating over items, they appear to remain pinned in memory.\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):\n <denchmark-code>import ray\n from ray.util.iter import from_items\n import numpy as np\n \n ray.init()\n \n def expand(x):\n     print(\"Expanding...\")\n     return np.array([x for _ in range(2**26)])\n \n def reduce(x):\n     return np.sum(x)/x.shape[0]\n \n it = from_items(list(range(1000)))\n it = it.for_each(expand, max_concurrency=2)\n \n for x in it.gather_async():\n     print(reduce(x))\n </denchmark-code>\n \n If we cannot run your script, we cannot fix your issue.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "wuisawesome", "commentT": "2020-06-03T03:25:35Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/wuisawesome>@wuisawesome</denchmark-link>\n  Would you mind taking over this issue? For P1 tasks, each assignees will be responsible for resolving them within a month.\n \t\t"}}}, "commit": {"commit_id": "40c15b1ba05e5c9a8ea1165f3a7dffda04156a41", "commit_author": "Alex Wu", "commitT": "2020-06-22 18:26:45-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\test_utils.py", "file_new_name": "python\\ray\\test_utils.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "251", "deleted_lines": "251", "method_info": {"method_name": "acquire", "method_params": "self", "method_startline": "250", "method_endline": "251"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "python\\ray\\tests\\test_iter.py", "file_new_name": "python\\ray\\tests\\test_iter.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,236,237", "deleted_lines": null, "method_info": {"method_name": "test_for_each_concur_sync", "method_params": "ray_start_regular_shared", "method_startline": "204", "method_endline": "237"}}, "hunk_1": {"Ismethod": 1, "added_lines": "215,216", "deleted_lines": null, "method_info": {"method_name": "test_for_each_concur_sync.to_list", "method_params": "it", "method_startline": "215", "method_endline": "216"}}, "hunk_2": {"Ismethod": 1, "added_lines": "208,209,210,211,212", "deleted_lines": null, "method_info": {"method_name": "test_for_each_concur_sync.task", "method_params": "x", "method_startline": "208", "method_endline": "212"}}, "hunk_3": {"Ismethod": 1, "added_lines": "162,172,178,179,180,183,195,196,197,198,199,200,201", "deleted_lines": "162,172,178,192,197", "method_info": {"method_name": "test_for_each_concur_async", "method_params": "ray_start_regular_shared", "method_startline": "162", "method_endline": "201"}}, "hunk_4": {"Ismethod": 1, "added_lines": "162,172,178,179,180,183,195,196,197", "deleted_lines": "162,172,178,192,197", "method_info": {"method_name": "test_for_each_concur", "method_params": "ray_start_regular_shared", "method_startline": "162", "method_endline": "197"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\util\\iter.py", "file_new_name": "python\\ray\\util\\iter.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "769,770,771,773,774,775", "deleted_lines": "768,769,770,771,773,774,775", "method_info": {"method_name": "apply_foreach", "method_params": "it", "method_startline": "761", "method_endline": "775"}}}}}}}