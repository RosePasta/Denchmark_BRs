{"BR": {"BR_id": "1975", "BR_author": "brantPTS", "BRopenT": "2019-10-02T16:19:25Z", "BRcloseT": "2019-10-19T21:02:04Z", "BR_text": {"BRsummary": "Inference fails when running Faster RCNN model from ONNX model zoo", "BRdescription": "\n Describe the bug\n Running an inference with the Faster RCNN model from onnx model zoo fails\n Urgency\n We are blocked from using the ONNX runtime until this is fixed\n System information\n \n OS Platform and Distribution: Windows 10 Pro\n ONNX Runtime installed from source (built locally with Sep 27, 2019 source code)\n Visual Studio version (if applicable): 2019\n CUDA/cuDNN version: 10.0 / 7.3\n GPU model and memory: nVidia GTX 1080ti\n \n To Reproduce\n Get latest source code (we used Sep 27 version)\n Build locally with cuda similar to:\n .\\build.bat --msvc_toolset 14.11 --use_cuda --cuda_home \"C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.0\" --cudnn_home C:\\local\\cudnn-7.3\\cuda --build_csharp\n Download the Faster RCNN model from onnx model zoo (<denchmark-link:https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/faster-rcnn>https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/faster-rcnn</denchmark-link>\n ).\n Ensure this file is on disk here: (or alter source code in unit test appropriately if file is in a different location):\n D:\\modelsfrcnn\\frcnn\\faster_rcnn_R_50_FPN_1x.onnx\n Open the following solution in VS 2019:\n C:\\local\\onnx\\onnxruntime\\csharp\\OnnxRuntime.CSharp.sln\n Add a unit test to InferenceTest.cs (see code below) and run in debug mode:\n C:\\local\\onnx\\onnxruntime\\csharp\\test\\Microsoft.ML.OnnxRuntime.Tests\\InferenceTest.cs\n The unit test code to add to InferenceTest.cs:\n <denchmark-code>[Fact]\n private void frcnnTest()\n {\n \n \tstring modelsDir;\n \t// expect this file: D:\\modelsfrcnn\\frcnn\\faster_rcnn_R_50_FPN_1x.onnx from https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/faster-rcnn\n \tmodelsDir = @\"D:\\modelsfrcnn\";\n \tvar modelRoot = new DirectoryInfo(Path.Combine(modelsDir));\n \tforeach (var modelDir in modelRoot.EnumerateDirectories())\n \t{\n \t\tvar onnxModelNames = modelDir.GetFiles(\"*.onnx\");\n \n \t\tvar onnxModelFileName = Path.Combine(modelsDir, modelDir.Name, onnxModelNames[0].Name);\n \t\tSessionOptions opts = new SessionOptions();\n \t\t//SessionOptions opts = SessionOptions.MakeSessionOptionWithCudaProvider(0);\n \t\tusing (var session = new InferenceSession(onnxModelFileName, opts))\n \t\t{\n \t\t\tfloat[] dataIn;\n \t\t\tdataIn = new float[3 * 416 * 416];\n \n \t\t\t///// Create Inputs\n \t\t\tvar nov = new List<NamedOnnxValue>();\n \t\t\tnov.Add(\n \t\t\t\tNamedOnnxValue.CreateFromTensor<float>\n \t\t\t\t\t(\"image\", new DenseTensor<float>(dataIn, new int[] { 3, 416, 416 })));\n \n \t\t\tint count = 3;\n \t\t\tList<double> timesMs = new List<double>(count);\n \t\t\tStopwatch sw = new Stopwatch();\n \n \t\t\tfor (int i = 0; i < count; i++)\n \t\t\t{\n \n \t\t\t\tsw.Restart();\n \t\t\t\t///// Run Session\n \t\t\t\tusing (var resnov = session.Run(nov))\n \t\t\t\t{\n \t\t\t\t\ttimesMs.Add(sw.ElapsedMilliseconds);\n \t\t\t\t\tvar res = resnov.ToArray()[0].AsTensor<float>().ToArray<float>();\n \t\t\t\t}\n \t\t\t}\n \t\t\ttimesMs.Sort();\n \t\t\tdouble medianTime = timesMs[count / 2];\n \t\t\tConsole.Out.WriteLine($\"Median time: {medianTime:0.00} ms\");\n \t\t\tDebug.WriteLine($\"Median time: {medianTime:0.00} ms\");\n \n \t\t}\n \t} //model\n }\n </denchmark-code>\n \n Expected behavior\n The unit test should run without error or memory leaks. See screenshots below:\n <denchmark-link:https://user-images.githubusercontent.com/34780180/66062061-891cd780-e4f5-11e9-9ff1-cf56d6aff1b1.JPG></denchmark-link>\n \n <denchmark-link:https://user-images.githubusercontent.com/34780180/66062071-8e7a2200-e4f5-11e9-94e1-601d87bec827.JPG></denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "brantPTS", "commentT": "2019-10-02T19:36:59Z", "comment_text": "\n \t\tHi,\n I think there are 2 dimensions to this issue:\n \n I think when you feed it random data, the model is unable to make any detections\n When the C# layer tries to create a tensor with no elements (number of detection boxes = 0), it throws. In Python, I get back an empty array of shape [0, 4].\n \n So, please try following the demo in the link you pasted and try inferencing on an image where the model is sure to detect something. In legitimate cases when there is an image with no objects (or one that the model isn't able to detect), the C# layer must be able to handle it (addressed by <denchmark-link:https://github.com/microsoft/onnxruntime/pull/1976>#1976</denchmark-link>\n  )\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "brantPTS", "commentT": "2019-10-02T22:46:31Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/hariharans29>@hariharans29</denchmark-link>\n   Thank you for working this so promptly.  I will work on preparing some real data and also will look forward to your fix for the zero dimension tensor.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "brantPTS", "commentT": "2019-10-02T23:35:16Z", "comment_text": "\n \t\tSure. The 0 dimension value tensor problem should be limited to just the c# layer (Python and C/C++ should be ok) - just FYI :)\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "brantPTS", "commentT": "2019-10-19T21:02:04Z", "comment_text": "\n \t\tClosing out this issue as the only takeaway for ORT was that the C# layer didn't handle creation of empty tensors (fixed via <denchmark-link:https://github.com/microsoft/onnxruntime/pull/1976>#1976</denchmark-link>\n ) and for the provided input an empty tensor is the right output. So, the result is correct.\n \t\t"}}}, "commit": {"commit_id": "80d09f0c59e551c8e7d9c13b14127268e0638a3d", "commit_author": "Hariharan Seshadri", "commitT": "2019-10-14 14:47:02-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "csharp\\src\\Microsoft.ML.OnnxRuntime\\Tensors\\Tensor.cs", "file_new_name": "csharp\\src\\Microsoft.ML.OnnxRuntime\\Tensors\\Tensor.cs", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "316,318", "deleted_lines": "316,318", "method_info": {"method_name": "Microsoft.ML.OnnxRuntime.Tensors::Tensor<T>::Tensor", "method_params": "dimensions,reverseStride", "method_startline": "305", "method_endline": "328"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "csharp\\test\\Microsoft.ML.OnnxRuntime.Tests\\Tensors\\TensorTests.cs", "file_new_name": "csharp\\test\\Microsoft.ML.OnnxRuntime.Tests\\Tensors\\TensorTests.cs", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233", "deleted_lines": null, "method_info": {"method_name": "Microsoft.ML.OnnxRuntime.Tensors.Tests::TensorTests::ConstructEmptyTensors", "method_params": "tensorConstructor", "method_startline": "178", "method_endline": "233"}}, "hunk_1": {"Ismethod": 1, "added_lines": null, "deleted_lines": "165", "method_info": {"method_name": "Microsoft.ML.OnnxRuntime.Tensors.Tests::TensorTests::ConstructFromDimensions", "method_params": "tensorConstructor", "method_startline": "151", "method_endline": "175"}}}}}}}