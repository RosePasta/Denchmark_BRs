{"BR": {"BR_id": "160", "BR_author": "tracycollins", "BRopenT": "2019-09-18T17:00:55Z", "BRcloseT": "2019-09-27T04:16:53Z", "BR_text": {"BRsummary": "Network.evolve() crash at start: \"TypeError: Cannot read property 'join' of undefined\"", "BRdescription": "\n <denchmark-h:h3>Description</denchmark-h>\n \n This may be pilot error, but I can't figure out what's going wrong.\n Network.evolve() (v0.3.12+) crashes immediately with the error:\n \n Trace: TypeError: Cannot read property 'join' of undefined\n at new c (/node_modules/@liquid-carrot/carrot/dist/carrot.commonjs2.min.js:36:128039)\n at p.evolve (/node_modules/@liquid-carrot/carrot/dist/carrot.commonjs2.min.js:36:92265)\n \n <denchmark-h:h3>Files</denchmark-h>\n \n carrot.commonjs2.min.js (carrot.commonjs2.js)\n <denchmark-h:h3>To Reproduce</denchmark-h>\n \n The confusing thing is that Network.evolve() will run the XOR example, even using the same options for when it fails.  I include the XOR test in the same code as the failing evolve.\n When it fails, it's evolving a network of >1500 inputs and 3 outputs, as opposed to the XOR's 2-in, 1-out.\n An example of the options passed to evolve() is below. Note that the options are generated randomly, but still fails consistently:\n \n EVOLVE OPTIONS\n \u251c\u2500 activation: IDENTITY\n \u251c\u2500 amount: 1\n \u251c\u2500 clear: true\n \u251c\u2500 cost: BINARY\n \u251c\u2500 efficient_mutation: true\n \u251c\u2500 elitism: 2\n \u251c\u2500 equal: true\n \u251c\u2500 error: 0.03\n \u251c\u2500 growth: 0.00009019971047429265\n \u251c\u2500 iterations: 10\n \u251c\u2500 log: 1\n \u251c\u2500 mutation: FFW\n \u251c\u2500 mutation_amount: 1\n \u251c\u2500 mutation_rate: 0.5762620321953104\n \u251c\u2500 popsize: 50\n \u251c\u2500 population_size: 50\n \u251c\u2500 provenance: 0\n \u251c\u2500 schedule\n \u2502  \u2514\u2500 iterations: 1\n \u2514\u2500 threads: 1\n \n Also note that activation, cost, mutation and schedule values are converted to the proper functions/array before evolve().\n I've checked and double-checked the input data set for proper formatting and data types.\n I don't have this problem using 0.3.11.\n I think the problem is in the TestWorker function:\n function TestWorker (serialized_dataset, cost_function) {\n   // find out if in inspect mode. if so then run children in inspect mode as well\n   const argv = process.execArgv.join();\n   const is_debug = argv.includes('inspect') || argv.includes('debug');\n   if (is_debug) {\n     this.worker = cp.fork(path.join(__dirname, '/worker'), [], {\n       execArgv: ['--inspect=' + (fork_port++)],\n     });\n   } else {\n     this.worker = cp.fork(path.join(__dirname, '/worker'));\n   }\n \n   const cost_is_standard = cost_function.name in standard_cost_functions;\n   \n   // send the initialization (ie 'constructor') info\n   this.worker.send({\n       serialized_dataset: serialized_dataset,\n       cost_function: cost_is_standard ? cost_function.name : cost_function.toString(),\n       cost_is_standard,\n     });\n }\n specifically:\n \n const argv = process.execArgv.join();\n \n where process.execArgv is undefined.\n I notice that lots of restructuring happened from 0.3.11 to 0.3.12. Is there something that I need to do to make sure the module is (re)built?\n Any help appreciated! Thanks\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "tracycollins", "commentT": "2019-09-18T17:32:57Z", "comment_text": "\n \t\tHey <denchmark-link:https://github.com/tracycollins>@tracycollins</denchmark-link>\n , any chance we can see a sample of the code that's failing?\n \n The confusing thing is that Network.evolve() will run the XOR example, even using the same options for when it fails. I include the XOR test in the same code as the failing evolve.\n \n I think this is very interesting, to make sure: the example is working but the evolve is failing with the same options while trying to do something in the same scope?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "tracycollins", "commentT": "2019-09-18T17:56:01Z", "comment_text": "\n \t\t\n I notice that lots of restructuring happened from 0.3.11 to 0.3.12. Is there something that I need to do to make sure the module is (re)built?\n \n Update: I think this could be related to a missing workers file that was removed in the transition from 0.3.11 to 0.3.12\n <denchmark-code>    new CopyWebpackPlugin([\n       { from: 'src/multithreading/workers/node/worker.js', to: 'dist' }\n     ])\n </denchmark-code>\n \n Looks like it was removed in <denchmark-link:https://github.com/liquidcarrot/carrot/commit/1ab8a5053aaf28e852f3b4f92d39f643d681e9f3>1ab8a50</denchmark-link>\n \n Specific file changes: <denchmark-link:https://github.com/liquidcarrot/carrot/commit/1ab8a5053aaf28e852f3b4f92d39f643d681e9f3#diff-11e9f7f953edc64ba14b0cc350ae7b9d>1ab8a50#diff-11e9f7f953edc64ba14b0cc350ae7b9d</denchmark-link>\n \n <denchmark-link:https://github.com/tracycollins>@tracycollins</denchmark-link>\n  I'm thinking this is where the issue is coming from, I'm going to reintroduce it and version to see if it resolves the bug\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "tracycollins", "commentT": "2019-09-18T18:22:24Z", "comment_text": "\n \t\tAfter doing some more digging this is probably why the bug is happening:\n \n \n \n carrot/src/multithreading/workers/node/testworker.js\n \n \n         Lines 35 to 37\n       in\n       ad3c6c0\n \n \n \n \n \n \n  } else { \n \n \n \n  this.worker = cp.fork(path.join(__dirname, '/worker')); \n \n \n \n  } \n \n \n \n \n \n We're assuming the worker will be in a separate file inside the same directory\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "tracycollins", "commentT": "2019-09-18T18:26:33Z", "comment_text": "\n \t\tJust published v0.3.14\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "tracycollins", "commentT": "2019-09-18T22:57:20Z", "comment_text": "\n \t\tI'll try the update. If it still fails, I'll post some code.\n Thanks for the quick reply!\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "tracycollins", "commentT": "2019-09-18T22:58:48Z", "comment_text": "\n \t\tAwesome, let me know!\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "tracycollins", "commentT": "2019-09-19T02:57:18Z", "comment_text": "\n \t\tUnfortunately, 0.3.14 fails the same way.\n I'll try to put together a stripped-down version of the code that shows the error in the next day or so.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "tracycollins", "commentT": "2019-09-19T05:47:13Z", "comment_text": "\n \t\tScratch my last comment...\n It seems to be working. Don't think the module was updated in my previous testing.  Closing this now.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "tracycollins", "commentT": "2019-09-27T02:59:11Z", "comment_text": "\n \t\tBug turned out to still be present as discussed in <denchmark-link:https://github.com/liquidcarrot/carrot/issues/161>#161</denchmark-link>\n \n Reopening temporarily while we patch\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "tracycollins", "commentT": "2019-09-27T04:16:52Z", "comment_text": "\n \t\tConfirmed working as of v0.3.16 using this test:\n <denchmark-code>const neataptic = require(\"neataptic\");\n const carrot = require(\"@liquid-carrot/carrot\");\n \n async function main(){\n \n   const numInputs = 2;\n   const numOutputs = 1;\n \n   const carrot_network = new carrot.Network(numInputs, numOutputs);\n   const npt_network = new neataptic.Network(numInputs, numOutputs);\n \n   const trainingSet = [];\n \n   for(let j=0; j<5; j++){\n \n     const datum = {};\n     datum.input = [];\n     datum.output = [];\n \n     for(let i=0; i<numInputs; i++){\n       const inputValue = Math.round(Math.random());\n       datum.input.push(inputValue);\n     }\n \n     for(let i=0; i<numOutputs; i++){\n       const outputValue = Math.round(Math.random());\n       datum.output.push(outputValue);\n     }\n \n     trainingSet.push(datum);\n   }\n \n   console.log(\"trainingSet\\n\" , trainingSet);\n \n   const carrot_options = {\n     mutation: carrot.methods.mutation.FFW,\n     error: 0.05,\n     equal: true,\n     elitism: 5,\n     mutation_rate: 0.5,\n     iterations: 10,\n     log: 1,\n     threads: 1,\n   };\n \n   const npt_options = {\n     mutation: neataptic.methods.mutation.FFW,\n     error: 0.05,\n     equal: true,\n     elitism: 5,\n     mutation_rate: 0.5,\n     iterations: 10,\n     log: 1,\n     threads: 1,\n   };\n \n   console.log(\"neataptic options\\n\" , npt_options);\n \n   try{\n     const npt_results = await npt_network.evolve(trainingSet, npt_options)\n     console.log(\"neataptic results\\n\", npt_results);\n     console.log(\"network.activate(trainingSet[0]: \" + npt_network.activate(trainingSet[0].input) + \")\");\n   } catch(err){\n     console.trace(err);\n     throw err;\n   }\n \n   console.log(\"carrot options\\n\" , carrot_options);\n \n   try{\n     const carrot_results = await carrot_network.evolve(trainingSet, carrot_options)\n     console.log(\"carrot results\\n\", carrot_results);\n     console.log(\"network.activate(trainingSet[0]: \" + carrot_network.activate(trainingSet[0].input) + \")\");\n     return;\n   } catch(err){\n     console.trace(err);\n     throw err;\n   }\n \n }\n \n main();\n </denchmark-code>\n \n Noting here that  is quite a bit slower than  right now (converges in less generations though). The main culprit is likely Lodash's  method inside of  which used heavily in  -- working on resolving this by solving <denchmark-link:https://github.com/liquidcarrot/carrot/issues/152>#152</denchmark-link>\n \n The approach in <denchmark-link:https://github.com/liquidcarrot/carrot/issues/152#issuecomment-527934142>#152 (comment)</denchmark-link>\n  is the likely go-to\n \t\t"}}}, "commit": {"commit_id": "7a742c2654ba74bb93aa2c9851390d4ddcb05ebf", "commit_author": "Christian George Echevarria-Reina", "commitT": "2019-09-26 23:00:48-04:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "package.json", "file_new_name": "package.json", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "5,6", "deleted_lines": "5,6"}}}}}}