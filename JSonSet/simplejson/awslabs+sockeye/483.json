{"BR": {"BR_id": "483", "BR_author": "fhieber", "BRopenT": "2018-07-19T16:34:38Z", "BRcloseT": "2018-07-31T10:19:44Z", "BR_text": {"BRsummary": "hypotheses lengths off by one", "BRdescription": "\n It seems that the current beam search implementation (_beam_search) does not compute hypotheses length correctly. This can be seen when printing sequences and lengths just before returning from _beam_search(): the length is always one short of the actual non-zero values in sequences:\n <denchmark-code>> sequences[0]\n [    2    92  7741   907  2710   295    28     7  7741   907  2710     4\n      7   383 10174  7324  9735   286   671   564  4085    71    22    98\n  10671     4    13   782   485     8  6323  8665     4     8    23     8\n   2976  1037  2448  3577    10   294   575  4664    13    34  3898   608\n     43     5     3     0]\n <NDArray 52 @cpu(0)>\n \n > lengths[0]\n [50.]\n <NDArray 1 @cpu(0)>\n </denchmark-code>\n \n 3 is the EOS id and the length of this hypothesis is clearly 51.\n Let me try to explain the problem below. In practice, it doesn't matter since _assemble_translation() uses the length value to cut off the EOS symbol; the following EOS stripping logic in _make_result() is then redundant. But of course it shouldn't be and I think _beam_search() should return consistent data structures.\n Here's the issue; I think this was introduced with length normalization only done for finished hypotheses:\n \n lengths is initialized with 1s to account for the initial data in sequences, namely the BOS symbol\n In each beam search iteration: as soon as we run topk on hypotheses scores, we effectively have expanded an hypothesis and its length increases by 1.\n However, we are not using the updated length to potentially normalize the hypothesis if its finished. We check the newly acquired best_word_indices for EOS/PAD to compute a current finished status, and if so, we normalize with the OLD length.\n This doesn't yet explain why we end beam_search with a length off by 1. This must somehow happen because the length array is only updated for hypotheses that are not finished and active. Since finished was just recomputed in step 3, the problem must lie in the inactive logic or the fact that right after we update lengths, we recompute finished once again and determine breaking out of the beam search loop based on that.\n \n I am not 100% sure whats wrong here, probably the order of operations isn't entirely correct, but I also don't fully understand the whole  logic introduced. <denchmark-link:https://github.com/mjpost>@mjpost</denchmark-link>\n  could you comment on this?\n At a minimum, we should make sure to normalize with correct length values. At best, we should make sure to return a lengths array from _beam_search that is consistent with sequences. With that, _assemble_translation would not silently cut off the last token (EOS), which by design should be handled later by _make_result().\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "fhieber", "commentT": "2018-07-24T08:33:22Z", "comment_text": "\n \t\tFrom looking at the code, I think the problem is:\n \n We normalize finished hypotheses, and then update the set of finished hypotheses.\n This prevents lengths from being updated.\n \n I think it might be sufficient to:\n \n Return all_finished from the NormalizeFinishedHypotheses hybrid block (as is currently done, though without the extra variable assignment)\n In the calling block, save that to a new variable instead of overwriting finished. This value will then be used for pruning.\n \n With that, the updating of lengths should work correctly because finished itself will not have been updated yet.\n I should be able to look at this soon but thought I'd document this here in the meantime in case someone else wants to fix it.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "fhieber", "commentT": "2018-07-24T08:58:20Z", "comment_text": "\n \t\tLooking further, it seems we could eliminate the UpdateLengthsAndFinished hybrid block, and simply combine the two new blocks into a single block, done just before beam pruning.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "fhieber", "commentT": "2018-07-24T09:17:23Z", "comment_text": "\n \t\tOkay, I fixed this. You can run a simple test and you see at the end that  and  are now corrected. The tests pass but style check will fail because of pylint issue <denchmark-link:https://github.com/awslabs/sockeye/issues/478>#478</denchmark-link>\n .\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "fhieber", "commentT": "2018-07-25T15:23:56Z", "comment_text": "\n \t\tAre we sure the length calculations haven't always been like this?\n To me the lengths should be the length of symbols, which have been generated. In the sequences NDArray we include the <s> symbol, however it is not a symbol that gets generated by the model and it should therefore not count towards the length. That said, it would maybe be more consistent to return the sequences NDArray without <s>. With this in mind the length in the example given below is correct though if we discount for 0 and 2.\n For beam search I think it is actually the correct thing to use the old lengths array for normalizing for the fact that the lengths array is initialized to 1 instead of 0. After generating the first real symbol we should normalize the score by length_penalty(1) as we have only produced a single score thus far.\n So I think if we use the old lengths array we are doing the correct thing. That said, it is currently inconsistent and confusing what we do, so that there is potential for some refactoring/cleanup (that however should not change the way we score).\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "fhieber", "commentT": "2018-07-25T16:03:15Z", "comment_text": "\n \t\tOkay, I think I agree that we should not include <s> in the length counts. The principle can be that we only count steps actually generated by the decoder. But I don't feel strongly about it.\n I think the other simplification I did can remain independent of this decision.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "fhieber", "commentT": "2018-07-26T11:22:50Z", "comment_text": "\n \t\tsounds good. Let's have the simplification, but not count the <s> for lengths and make sure that the returned values from _beam_search are consistent, e.g. by removing <s> before returning.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "fhieber", "commentT": "2018-07-27T09:35:26Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/tdomhan>@tdomhan</denchmark-link>\n  your argument makes sense to me. The main reason I came across this is that it is a bit strange that we return  from  with  not matching the actual sequences in there, then removing  in  by using that length information, and finally remove the  token in  using the  logic.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "fhieber", "commentT": "2018-07-27T09:42:29Z", "comment_text": "\n \t\tYes, so I think we did the correct thing the way we normalized with the lengths, however what we passed around was inconsistent and confusing.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "fhieber", "commentT": "2018-07-27T11:54:42Z", "comment_text": "\n \t\tOkay, I just pushed up a version rebased on master that does all of this. This simplifies a lot of logic where we have to add a null column or strip it off when concatenating. It should be ready to go.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "fhieber", "commentT": "2018-07-27T12:44:01Z", "comment_text": "\n \t\tgreat, thanks!\n \t\t"}}}, "commit": {"commit_id": "8530156880edf632908e053eb799128e0c7bb05a", "commit_author": "Matt Post", "commitT": "2018-07-31 12:19:42+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "CHANGELOG.md", "file_new_name": "CHANGELOG.md", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "13,14,15,16", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "sockeye\\__init__.py", "file_new_name": "sockeye\\__init__.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "14", "deleted_lines": "14"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 7, "file_old_name": "sockeye\\inference.py", "file_new_name": "sockeye\\inference.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "899", "deleted_lines": "899", "method_info": {"method_name": "_concat_translations", "method_params": "LengthPenalty", "method_startline": "899", "method_endline": "900"}}, "hunk_1": {"Ismethod": 1, "added_lines": "899", "deleted_lines": "899", "method_info": {"method_name": "_concat_translations", "method_params": "int,LengthPenalty", "method_startline": "899", "method_endline": "900"}}, "hunk_2": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1787,1788,1789,1790", "method_info": {"method_name": "__init__", "method_params": "self,int,int", "method_startline": "1787", "method_endline": "1790"}}, "hunk_3": {"Ismethod": 1, "added_lines": "1778", "deleted_lines": "1772,1778,1779", "method_info": {"method_name": "hybrid_forward", "method_params": "self,F,best_word_indices,finished,scores_accumulated,lengths", "method_startline": "1772", "method_endline": "1779"}}, "hunk_4": {"Ismethod": 1, "added_lines": "1757,1764,1765,1766,1768,1778", "deleted_lines": "1757,1772,1778", "method_info": {"method_name": "hybrid_forward", "method_params": "self,F,best_word_indices,max_output_lengths,finished,scores_accumulated,lengths", "method_startline": "1757", "method_endline": "1778"}}, "hunk_5": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1792,1793,1794,1795,1796,1806", "method_info": {"method_name": "hybrid_forward", "method_params": "self,F,finished,inactive,lengths,max_output_lengths,best_word_indices", "method_startline": "1792", "method_endline": "1806"}}, "hunk_6": {"Ismethod": 1, "added_lines": "1265", "deleted_lines": null, "method_info": {"method_name": "_concat_translations", "method_params": "self", "method_startline": "1258", "method_endline": "1265"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "test\\unit\\test_inference.py", "file_new_name": "test\\unit\\test_inference.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "76,90", "deleted_lines": "76,90,91", "method_info": {"method_name": "test_concat_translations", "method_params": "", "method_startline": "71", "method_endline": "95"}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tutorials\\constraints\\README.md", "file_new_name": "tutorials\\constraints\\README.md", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "7,8,9,10,11,12,13,14,15,16,17,18,33,35,37,38,39", "deleted_lines": "7,8,9,10,25,27,28,29,31,32,33"}}}}}}