{"BR": {"BR_id": "2551", "BR_author": "moi90", "BRopenT": "2020-07-08T10:57:09Z", "BRcloseT": "2020-10-05T03:02:36Z", "BR_text": {"BRsummary": "TrainerEvaluationLoopMixin activates model.train() at the end", "BRdescription": "\n <denchmark-h:h2>\ud83d\udc1b Bug</denchmark-h>\n \n According to the <denchmark-link:https://github.com/jbschiratti/pytorch-lightning/blob/master/pl_examples/domain_templates/computer_vision_fine_tuning.py>example on fine-tuning</denchmark-link>\n , it is important to set the frozen sub-modules to eval mode. This is sensitive because when in training mode, BatchNorm and Dropout change state.\n However, at the end of TrainerEvaluationLoopMixin._evaluate there is following code:\n # enable train mode again\n model.train()\n So after the first validation run, the model is again completely in training mode and the freezing is partially undone (for layers like BatchNorm and Dropout).\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "moi90", "commentT": "2020-07-09T07:05:14Z", "comment_text": "\n \t\tI agree, this should not happen in the validation loop. Only the training loop should switch the model to training mode.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "moi90", "commentT": "2020-07-09T10:57:04Z", "comment_text": "\n \t\tso, we have to track the state of all the frozen modules before?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "moi90", "commentT": "2020-07-09T15:33:30Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/awaelchli>@awaelchli</denchmark-link>\n  When accepting that the training mode could have been customized, not even the training loop should change it carelessly.\n <denchmark-link:https://github.com/williamFalcon>@williamFalcon</denchmark-link>\n  That would be one solution.\n Another would be to just advice people to set the mode in on_epoch_start. (Would this be late enough so it is not reset by the Trainer?)\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "moi90", "commentT": "2020-09-07T16:13:44Z", "comment_text": "\n \t\tThis issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "moi90", "commentT": "2020-09-18T00:35:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/williamFalcon>@williamFalcon</denchmark-link>\n  <denchmark-link:https://github.com/moi90>@moi90</denchmark-link>\n  what if we just made this a hook? The default hook will implement what we have today, set the model to train or eval mode. But if user wants the fine tuning use case, they can override the hook and just set their layers to train/eval mode manually.\n \n old behaviour is preserved\n no complicated tracking needed\n in the finetuning case, it will be fully transparent to the reader of the code which layers are eval and which are training\n easy to implement\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "moi90", "commentT": "2020-09-19T07:29:58Z", "comment_text": "\n \t\tWhere and when would this hook be called? How would this be different from using on_epoch_start?\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "moi90", "commentT": "2020-09-28T04:30:46Z", "comment_text": "\n \t\t\n Where and when would this hook be called?\n \n Wherever we call model.eval / model.train today in the training loop, we would call the hook instead, which by default also just does that same thing as before, unless user overrides it.\n \n How would this be different from using on_epoch_start?\n \n I think this would be different from an on epoch start because it would allow you to prevent exactly what happens as described in the title: activating model.train for all layers at the end of an epoch.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "moi90", "commentT": "2020-10-02T20:49:22Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/awaelchli>@awaelchli</denchmark-link>\n  can this be added post v1?\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "moi90", "commentT": "2020-10-02T21:30:08Z", "comment_text": "\n \t\tYes\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "moi90", "commentT": "2020-10-05T08:51:34Z", "comment_text": "\n \t\tThank you, this is much appreciated!\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "moi90", "commentT": "2020-12-10T15:41:42Z", "comment_text": "\n \t\tShouldn't the hooks be defined like:\n <denchmark-code>def on_validation_model_eval_end(self) -> None:\n   \"\"\"\n   Called in the validation loop after the model is set to eval\n   \"\"\"\n   # do something when the model is set to eval\n </denchmark-code>\n \n How do we use these hooks in the current version? If I don't want to switch to eval mode ever (a pretty common case with GANs), do I just override\n <denchmark-code>class DummyCallback(pl.Callback):\n   def on_validation_model_eval():\n     pass\n </denchmark-code>\n \n or do I call on_validation_model_train() and then the eval hook won't be called?\n \t\t"}}}, "commit": {"commit_id": "f58c7604093fc37c765ac88e46aaf52b403332fe", "commit_author": "William Falcon", "commitT": "2020-10-04 23:02:35-04:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "pytorch_lightning\\core\\hooks.py", "file_new_name": "pytorch_lightning\\core\\hooks.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "211,212", "deleted_lines": null, "method_info": {"method_name": "on_test_model_eval", "method_params": "self", "method_startline": "211", "method_endline": "212"}}, "hunk_1": {"Ismethod": 1, "added_lines": "151,152", "deleted_lines": null, "method_info": {"method_name": "on_validation_model_train", "method_params": "self", "method_startline": "151", "method_endline": "152"}}, "hunk_2": {"Ismethod": 1, "added_lines": "219,220", "deleted_lines": null, "method_info": {"method_name": "on_test_model_train", "method_params": "self", "method_startline": "219", "method_endline": "220"}}, "hunk_3": {"Ismethod": 1, "added_lines": "143,144", "deleted_lines": null, "method_info": {"method_name": "on_validation_model_eval", "method_params": "self", "method_startline": "143", "method_endline": "144"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "pytorch_lightning\\trainer\\evaluation_loop.py", "file_new_name": "pytorch_lightning\\trainer\\evaluation_loop.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "98,99,100,101,102,103", "deleted_lines": null, "method_info": {"method_name": "on_evaluation_model_train", "method_params": "self,args,kwargs", "method_startline": "98", "method_endline": "103"}}, "hunk_1": {"Ismethod": 1, "added_lines": "91,92,93,94,95,96", "deleted_lines": null, "method_info": {"method_name": "on_evaluation_model_eval", "method_params": "self,args,kwargs", "method_startline": "91", "method_endline": "96"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "pytorch_lightning\\trainer\\trainer.py", "file_new_name": "pytorch_lightning\\trainer\\trainer.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "546,547,619", "deleted_lines": "547,618", "method_info": {"method_name": "run_evaluation", "method_params": "self,bool,max_batches", "method_startline": "537", "method_endline": "625"}}}}, "file_3": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "tests\\trainer\\model_hooks\\__init__.py", "file_new_name": "tests\\trainer\\model_hooks\\__init__.py"}, "file_4": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "tests\\trainer\\model_hooks\\test_model_hooks.py"}}}}