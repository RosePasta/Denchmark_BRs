{"BR": {"BR_id": "3346", "BR_author": "BLKSerene", "BRopenT": "2019-02-28T07:11:56Z", "BRcloseT": "2019-03-06T13:21:46Z", "BR_text": {"BRsummary": "Japanese stop words are not loaded when initializing the language", "BRdescription": "\n Hi, I'm trying to get the stop words of all languages supported by spaCy programmatically, and it seems to me there's an inconsistency with the Japanese language.\n <denchmark-code>>>> import importlib\n >>> spacy_lang = importlib.import_module('spacy.lang.en') # Use string literals here to loop over all languages supported by spaCy\n >>> stop_words = spacy_lang.STOP_WORDS # English and other languages OK\n >>> spacy_lang = importlib.import_module('spacy.lang.ja')\n >>> stop_words = spacy_lang.STOP_WORDS # Fail\n Traceback (most recent call last):\n   File \"<pyshell#18>\", line 1, in <module>\n     stop_words = spacy_lang.STOP_WORDS\n AttributeError: module 'spacy.lang.ja' has no attribute 'STOP_WORDS'\n </denchmark-code>\n \n This one works for the Japanese language:\n <denchmark-code>>>> import importlib\n >>> spacy_stop_words = importlib.import_module('spacy.lang.ja.stop_words') # Iterate over all languages\n >>> stop_words = spacy_stop_words.STOP_WORDS\n </denchmark-code>\n \n And I've found another way to do this (not working for the Japanese language currently):\n <denchmark-code>>>> import spacy\n >>> nlp = spacy.blank('en')\n >>> stop_words = nlp.Defaults.stop_words\n </denchmark-code>\n \n I'm not sure which one would be the best way to fetch all lists of stop words, I suppose that the last one would have a little overhead while loading the blank model? And is there a nicer way to retrieve the lists directly?\n \n Operating System: Windows 10 64-bit\n Python Version Used: 3.7.2 64-bit\n spaCy Version Used: 2.1.0a10\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "BLKSerene", "commentT": "2019-02-28T09:11:10Z", "comment_text": "\n \t\tThanks for the report! (And for your other reports yesterday \u2013 so glad we were able to fix those and improve our tests \ud83d\udc4d)\n Looks like the stop words aren't currently exposed in the JapaneseDefaults. In fact, they're not even imported in ja/__init__.py, even though they exist. That's why importing spacy.lang.ja.stop_words works, but Japanese.Defaults.stop_words doesn't.\n \n I'm not sure which one would be the best way to fetch all lists of stop words, I suppose that the last one would have a little overhead while loading the blank model? And is there a nicer way to retrieve the lists directly?\n \n Yes, I think the second approach is probably more elegant because you're using spaCy's API objects instead of just the module / file structure. (In theory, if stop_words.py is ever renamed internally, your code will stop working, even if Defaults.stop_words still exists.)\n Language data in spaCy is lazy-loaded so it's only imported when it's needed, so you do have to load the language class first before you can access its attributes like stop words etc.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "BLKSerene", "commentT": "2019-04-05T13:56:56Z", "comment_text": "\n \t\tThis thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n \t\t"}}}, "commit": {"commit_id": "6bd34e9d548bd236fafd21811e6fb76fa3ff8932", "commit_author": "Ines Montani", "commitT": "2019-03-06 14:21:15+01:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "spacy\\lang\\ja\\__init__.py", "file_new_name": "spacy\\lang\\ja\\__init__.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "7,94", "deleted_lines": null}}}}}}