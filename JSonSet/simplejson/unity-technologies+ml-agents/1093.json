{"BR": {"BR_id": "1093", "BR_author": "jo3w4rd", "BRopenT": "2018-08-14T17:34:52Z", "BRcloseT": "2018-12-17T19:43:52Z", "BR_text": {"BRsummary": "On-Demand Decision training against a heuristic brain throws exception", "BRdescription": "\n I made an environment of a two-player game using On-Demand decisions and two brains. Training functions properly if both brains are external, but the environment hangs if I set one brain to external and one to heuristic. Inference works fine with either or both brains set to internal or heuristic.\n The environment always hangs just before the second turn of the second player. In the environment log, I see two exceptions, listed below. The first is thrown a few hundred times and then after that the second is thrown from that point onward.\n Exception\n ArgumentNullException: Value cannot be null.\n Parameter name: values\n Google.Protobuf.Collections.RepeatedField1[T].AddRange (System.Collections.Generic.IEnumerable1[T] values) (at <53efaed03be741309d533ea799514544>:0)\n Google.Protobuf.Collections.RepeatedField1[T].Add (System.Collections.Generic.IEnumerable1[T] values) (at <53efaed03be741309d533ea799514544>:0)\n MLAgents.Batcher.AgentInfoConvertor (MLAgents.AgentInfo info) (at <74dd45c0456640008ef7a6bc7fba4308>:0)\n MLAgents.Batcher.SendBrainInfo (System.String brainKey, System.Collections.Generic.Dictionary2[TKey,TValue] agentInfo) (at <74dd45c0456640008ef7a6bc7fba4308>:0) MLAgents.CoreBrainHeuristic.DecideAction (System.Collections.Generic.Dictionary2[TKey,TValue] agentInfo) (at <74dd45c0456640008ef7a6bc7fba4308>:0)\n MLAgents.Brain.DecideAction () (at <74dd45c0456640008ef7a6bc7fba4308>:0)\n MLAgents.Academy.EnvironmentStep () (at <74dd45c0456640008ef7a6bc7fba4308>:0)\n MLAgents.Academy.FixedUpdate () (at <74dd45c0456640008ef7a6bc7fba4308>:0)\n Exception\n ArgumentException: An item with the same key has already been added. Key: OAgent (TicTacToeAgent)\n System.Collections.Generic.Dictionary2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) (at <e1a80661d61443feb3dbdaac88eeb776>:0) System.Collections.Generic.Dictionary2[TKey,TValue].Add (TKey key, TValue value) (at :0)\n MLAgents.Brain.SendState (MLAgents.Agent agent, MLAgents.AgentInfo info) (at <74dd45c0456640008ef7a6bc7fba4308>:0)\n MLAgents.Agent.SendInfoToBrain () (at <74dd45c0456640008ef7a6bc7fba4308>:0)\n MLAgents.Agent.SendInfo () (at <74dd45c0456640008ef7a6bc7fba4308>:0)\n MLAgents.Academy.EnvironmentStep () (at <74dd45c0456640008ef7a6bc7fba4308>:0)\n MLAgents.Academy.FixedUpdate () (at <74dd45c0456640008ef7a6bc7fba4308>:0)\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "jo3w4rd", "commentT": "2018-08-14T18:03:14Z", "comment_text": "\n \t\tAssets for this project are here: <denchmark-link:https://github.com/jo3w4rd/roughdraft/tree/master/unity/Tic-Tac-Toe/Assets>https://github.com/jo3w4rd/roughdraft/tree/master/unity/Tic-Tac-Toe/Assets</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "jo3w4rd", "commentT": "2018-08-14T18:30:52Z", "comment_text": "\n \t\tThanks for pointing this out <denchmark-link:https://github.com/jo3w4rd>@jo3w4rd</denchmark-link>\n . I am assigning <denchmark-link:https://github.com/vincentpierre>@vincentpierre</denchmark-link>\n  since he has worked most with ODD.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "jo3w4rd", "commentT": "2018-08-15T00:48:15Z", "comment_text": "\n \t\tIs due to the memory of the agent being set to null in the Heuristic Brain. One temporary fix is to modify the RandomDecision script method\n     public List<float> MakeMemory(\n             List<float> vectorObs,\n             List<Texture2D> visualObs,\n             float reward,\n             bool done,\n         List<float> memory){\n         return null;\n     }\n with\n     public List<float> MakeMemory(\n             List<float> vectorObs,\n             List<Texture2D> visualObs,\n             float reward,\n             bool done,\n         List<float> memory){\n         return new List<float>();\n     }\n But there should be a nice catching of null memories either in Agent or in Batcher.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "jo3w4rd", "commentT": "2020-01-02T23:47:18Z", "comment_text": "\n \t\tThis thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n \t\t"}}}, "commit": {"commit_id": "153bf0c53159e3152894350daf7d4881bd2d4218", "commit_author": "vincentpierre", "commitT": "2018-08-21 18:30:19-04:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "unity-environment\\Assets\\ML-Agents\\Scripts\\Batcher.cs", "file_new_name": "unity-environment\\Assets\\ML-Agents\\Scripts\\Batcher.cs", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "177,178,179,180,181", "deleted_lines": "170", "method_info": {"method_name": "MLAgents::Batcher::AgentInfoConvertor", "method_params": "info", "method_startline": "163", "method_endline": "189"}}}}}}}