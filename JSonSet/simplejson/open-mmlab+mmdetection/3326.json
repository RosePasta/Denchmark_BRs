{"BR": {"BR_id": "3326", "BR_author": "blackCmd", "BRopenT": "2020-07-16T04:02:01Z", "BRcloseT": "2020-09-22T06:51:20Z", "BR_text": {"BRsummary": "When I tried Asynchronous interface, AttributeError: 'RPNHead' object has no attribute 'rpn_head'", "BRdescription": "\n When I tried Asynchronous interface in documentation I got an error like this.\n \n AttributeError: 'RPNHead' object has no attribute 'rpn_head'\n \n \n And this is the documentation link.\n \n https://mmdetection.readthedocs.io/en/latest/getting_started.html#asynchronous-interface-supported-for-python-3-7\n \n My python version is 3.7.5.\n How can I use Asynchronous interface?\n Plz help for solving the error.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "blackCmd", "commentT": "2020-07-16T08:37:15Z", "comment_text": "\n \t\tRPNHead shouldn't have rpn_head I guess, it points self\n sleep_interval = self.rpn_head.test_cfg.pop('async_sleep_interval', 0.025)\n ->\n sleep_interval = self.test_cfg.pop('async_sleep_interval', 0.025)\n does it work?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "blackCmd", "commentT": "2020-07-16T08:48:10Z", "comment_text": "\n \t\t\n RPNHead shouldn't have rpn_head I guess, it points self\n sleep_interval = self.rpn_head.test_cfg.pop('async_sleep_interval', 0.025)\n ->\n sleep_interval = self.test_cfg.pop('async_sleep_interval', 0.025)\n does it work?\n \n \n RPNHead shouldn't have rpn_head I guess, it points self\n sleep_interval = self.rpn_head.test_cfg.pop('async_sleep_interval', 0.025)\n ->\n sleep_interval = self.test_cfg.pop('async_sleep_interval', 0.025)\n does it work?\n \n Oh, plz wait. I'm gonna try it now!\n It makes another error like this.\n \n \n \n Hmm.. Where can I get rpn_head module.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "blackCmd", "commentT": "2020-07-16T09:01:50Z", "comment_text": "\n \t\tcould you try to modify\n \n \n \n mmdetection/mmdet/models/roi_heads/base_roi_head.py\n \n \n          Line 86\n       in\n       d613f21\n \n \n \n \n \n \n  async def async_simple_test(self, x, img_meta, **kwargs): \n \n \n \n \n \n as\n     async def async_simple_test(self, x, proposal_list , img_meta, **kwargs):\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "blackCmd", "commentT": "2020-07-16T09:22:30Z", "comment_text": "\n \t\t\n could you try to modify\n \n \n \n mmdetection/mmdet/models/roi_heads/base_roi_head.py\n \n \n          Line 86\n       in\n       d613f21\n \n \n \n \n \n \n  async def async_simple_test(self, x, img_meta, **kwargs): \n \n \n \n \n \n as\n     async def async_simple_test(self, x, proposal_list , img_meta, **kwargs):\n \n I thank you for your kindness bro. But I don't have a time to try it now... Sorry...\u3160_\u3160\n I will do that in 24h ! And I'll reply as soon as possible.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "blackCmd", "commentT": "2020-07-16T11:10:15Z", "comment_text": "\n \t\tsame issue in pytest tests/test_async.py could be solved in this way\n \n RPNHead shouldn't have rpn_head I guess, it points self\n sleep_interval = self.rpn_head.test_cfg.pop('async_sleep_interval', 0.025)\n ->\n sleep_interval = self.test_cfg.pop('async_sleep_interval', 0.025)\n does it work?\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "blackCmd", "commentT": "2020-07-17T00:59:45Z", "comment_text": "\n \t\t\n could you try to modify\n \n \n \n mmdetection/mmdet/models/roi_heads/base_roi_head.py\n \n \n          Line 86\n       in\n       d613f21\n \n \n \n \n \n \n  async def async_simple_test(self, x, img_meta, **kwargs): \n \n \n \n \n \n as\n     async def async_simple_test(self, x, proposal_list , img_meta, **kwargs):\n \n I've tried your sugesstion but I've got a this error.\u25bc\n \n \n \n When I debug that error the function ,async_simple_test, looks not implemented yet...\n \n \n \n \n mmdetection/mmdet/models/roi_heads/base_roi_head.py\n \n \n         Lines 86 to 88\n       in\n       d613f21\n \n \n \n \n \n \n  async def async_simple_test(self, x, img_meta, **kwargs): \n \n \n \n  \"\"\"Asynchronized test function.\"\"\" \n \n \n \n  raise NotImplementedError \n \n \n \n \n \n \n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "blackCmd", "commentT": "2020-07-17T02:39:17Z", "comment_text": "\n \t\twhich specific roi head do you take? CascadeRoIHead?\n \n \n \n mmdetection/mmdet/models/roi_heads/standard_roi_head.py\n \n \n          Line 218\n       in\n       588536d\n \n \n \n \n \n \n  async def async_simple_test(self, \n \n \n \n \n \n it's implemented in the standard roi head\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "blackCmd", "commentT": "2020-07-17T03:08:02Z", "comment_text": "\n \t\t\n which specific roi head do you take? CascadeRoIHead?\n \n \n \n mmdetection/mmdet/models/roi_heads/standard_roi_head.py\n \n \n          Line 218\n       in\n       588536d\n \n \n \n \n \n \n  async def async_simple_test(self, \n \n \n \n \n \n it's implemented in the standard roi head\n \n Oh! How did you know that I took a Cascade model! Genius!\n I took this model\u25bc\n \n \n \n What should I do?\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "blackCmd", "commentT": "2020-07-29T07:45:44Z", "comment_text": "\n \t\t\n self.rpn_head.test_cfg.pop('async_sleep_interval', 0.025)\n \n this works\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "blackCmd", "commentT": "2020-07-29T10:56:24Z", "comment_text": "\n \t\t\n \n self.rpn_head.test_cfg.pop('async_sleep_interval', 0.025)\n \n this works\n \n Oh! What is your model used?\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "blackCmd", "commentT": "2020-08-31T16:04:08Z", "comment_text": "\n \t\tSame here. Lets hope it will be implemented one day :)\n \t\t"}}}, "commit": {"commit_id": "382ad136fd198c933e17e28100a345f1dd5c25a9", "commit_author": "Wenwei Zhang", "commitT": "2020-09-22 14:51:19+08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "mmdet\\models\\dense_heads\\rpn_test_mixin.py", "file_new_name": "mmdet\\models\\dense_heads\\rpn_test_mixin.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "15", "deleted_lines": "15,16", "method_info": {"method_name": "async_simple_test_rpn", "method_params": "self,x,img_metas", "method_startline": "14", "method_endline": "22"}}}}}}}