{"BR": {"BR_id": "587", "BR_author": "jvmncs", "BRopenT": "2019-06-26T14:45:50Z", "BRcloseT": "2019-07-11T12:48:22Z", "BR_text": {"BRsummary": "Keras API in documentation", "BRdescription": "\n Since Read the Docs/Sphinx doesn't recognize Google style docstrings, our recent work isn't being added to the documentation.  We should fix Sphinx so that it recognizes these docstrings.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "jvmncs", "commentT": "2019-06-27T19:20:36Z", "comment_text": "\n \t\tWas the entire project changed to these new style docstrings or just the new keras work?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "jvmncs", "commentT": "2019-06-30T09:32:22Z", "comment_text": "\n \t\tDuring the big linting PR where we switched to the TF Style Guide, any functions that didn't have existing docstrings that pylint was complaining about received Google style docstrings if they were public/important enough, and short docstrings without a particular style otherwise.  I believe I made a comment or issue at the time noting that we'd need to slowly phase in Google style across the codebase\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "jvmncs", "commentT": "2019-07-02T13:27:54Z", "comment_text": "\n \t\tI was able to get a doc generated for keras.layers.Dense using autodoc\n `keras.layers.Dense`\n =========\n \n .. autoclass:: tf_encrypted.keras.layers.dense.Dense\n   :members:\n Will generated\n <denchmark-link:https://user-images.githubusercontent.com/1411145/60516103-6b9c5f80-9cb3-11e9-89ab-72626df9dc93.png></denchmark-link>\n \n Obviously the spacing here is a little wonky .. we can fix that up with new lines if needed.\n Going to look into <denchmark-link:https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html>https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html</denchmark-link>\n  first, though.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "jvmncs", "commentT": "2019-07-02T13:32:13Z", "comment_text": "\n \t\tnapoleon worked pretty flawlessly, and even integrates with the older docs that we can eventually roll over\n keras.layers.Dense renders as\n <denchmark-link:https://user-images.githubusercontent.com/1411145/60516698-a6eb5e00-9cb4-11e9-964e-cfe77af45546.png></denchmark-link>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "jvmncs", "commentT": "2019-07-02T13:38:55Z", "comment_text": "\n \t\tSo we can auto generated the API docs based on all of the files that have docs.  This will render something that looks like\n <denchmark-link:https://user-images.githubusercontent.com/1411145/60517041-59bbbc00-9cb5-11e9-9ea9-136f22e8fc48.png></denchmark-link>\n \n I recommend that we do this and remove the extra things in the docs (installing, getting started, etc)., and only have the API docs. We have the website + github for these things, and since we have to rewrite these things for the docs, they go out of date.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "jvmncs", "commentT": "2019-07-02T18:28:49Z", "comment_text": "\n \t\tI dug into another possible avenue which I think is interesting.\n I was curious about rendering the docs on tf-encrypted.io rather than readthedocs.  I think this is what we would want to do long term and might just be worth setting up right now.  I have hacked together a simple proof of concept that I think shows some promise.  Basically I did the following\n \n Converted tf-encrypted/website to be a gatsby project rather than next.js.  The reason I did this is for the build/data pipeline.  In nextjs you can't build things from the filesystem and we would need to introduce network calls to build blogs/docs.\n \n In gatsby, you can generate pages based on graphql queries, I think this is pretty heavy-handed, as we  can leverage the filesystem pretty easily for now (possible avenue for down the road).  Generating docs will look like this:\n \n \n We will have to change the build pipeline of docs very slightly.  It is possible to have the sphinx-build command output json, and with naplean above we introduce one more command (explained above)\n then, we can create a template to render the doc pages\n \n render() {\n     let content = this.props.pageContext.pageContent\n     return (\n         <div className='cover'>\n             <Header hamburgerClicked={this.showSideMenu.bind(this)}/>\n             <div className='content doc' dangerouslySetInnerHTML={{ __html: content.body }} />\n         </div>\n     )\n }\n This will render a page that looks like this\n <denchmark-link:https://user-images.githubusercontent.com/1411145/60536778-723fcc80-9cdd-11e9-802d-0394a3da4420.png></denchmark-link>\n \n The doc output json will basically give you the HTML you want, then we can apply CSS as we see fit\n E.g. we can easily make it a bit more on brand:\n // docs.scss\n @include font-face(RobotoMono, fonts/RobotoMono-Regular, null, null, ttf)\n \n code {\n     color: #06C6A2;\n }\n \n h1 {\n     font-family: \"RobotoMono\";\n }\n \n h2 {\n     font-family: \"RobotoMono\";\n }\n \n .doc {\n     padding: 2rem;\n     padding-top: 7rem;\n }\n will render\n <denchmark-link:https://user-images.githubusercontent.com/1411145/60537062-06aa2f00-9cde-11e9-8511-4e5d653fa1ce.png></denchmark-link>\n \n Obviously we will need to do a bit more than this.  E.g. making a sidebar, etc\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "jvmncs", "commentT": "2019-07-02T18:31:43Z", "comment_text": "\n \t\tAnother bonus is that this same strategy would work for some other things on the site\n e.g. right now the tutorials link back to github, but we could host them on the site, but the content is generated via what is in github source.\n Same with a blog, if we decided to start one.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "jvmncs", "commentT": "2019-07-03T14:20:54Z", "comment_text": "\n \t\tIs there another way to include html content inside react without using this property: dangerouslySetInnerHTML ?\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "jvmncs", "commentT": "2019-07-03T14:37:01Z", "comment_text": "\n \t\t\n Is there another way to include html content inside react without using this property: dangerouslySetInnerHTML ?\n \n No, it is rendered as text otherwise.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "jvmncs", "commentT": "2019-07-03T19:52:20Z", "comment_text": "\n \t\tSo, have dug around sphinx quite a bit and it kind of seems to me like the best way to do docs is more or less how we are doing them now but with the napolean plugin so we can use google style doc strings.\n I spent some time digging in to automatically documenting every file/module, as we have a tendency to forget about the docs/ dir, but in my opinion this makes the amount of API docs too daunting.  You can set excludes but then you have to remember to do that, so you have the reverse problem of what we have right now.\n In summary, we can have either a single index.rst directory that just includes\n .. toctree::\n   :glob:\n   tf_encrypted*\n and you will generate everything\n e.g.\n <denchmark-link:https://user-images.githubusercontent.com/1411145/60620891-c2d52980-9db2-11e9-83cd-df90fe462d4b.png></denchmark-link>\n \n Or we can specifically decide what we want to generate\n e.g.\n .. toctree::\n \n   keras.layers\n   keras.engine\n   converter\n \n will only make docs for those three modules.\n In both cases we can still self host the docs.\n cc <denchmark-link:https://github.com/mortendahl>@mortendahl</denchmark-link>\n .  Which would you prefer?\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "jvmncs", "commentT": "2019-07-04T09:17:16Z", "comment_text": "\n \t\tgreat investigation <denchmark-link:https://github.com/bendecoste>@bendecoste</denchmark-link>\n ! \n \n Which would you prefer?\n \n agree that including everything would be too much, so explicitly mentioning modules seems like the best approach. it won't change that much so optimistic that we'll remember to also include new items to the list\n Re moving away from readthedocs, I agree, this would be nice\n \t\t"}}}, "commit": {"commit_id": "130695169067bb29e85d1758e5b24f5d0e091f77", "commit_author": "Ben DeCoste", "commitT": "2019-07-11 14:48:21+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": ".gitignore", "file_new_name": ".gitignore", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "21", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "Makefile", "file_new_name": "Makefile", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "93,94,95,96,97,98,99,100", "deleted_lines": "93"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "README.md", "file_new_name": "README.md", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "11", "deleted_lines": "11"}}}, "file_3": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\config\\config.rst", "file_new_name": "None"}, "file_4": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\config\\local.rst", "file_new_name": "None"}, "file_5": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\config\\remote.rst", "file_new_name": "None"}, "file_6": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\index.rst", "file_new_name": "None"}, "file_7": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "docs\\source\\api\\keras\\index.rst"}, "file_8": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\layers\\avg_pooling_2d.rst", "file_new_name": "None"}, "file_9": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\layers\\batchnorm.rst", "file_new_name": "None"}, "file_10": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\layers\\convolution.rst", "file_new_name": "None"}, "file_11": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\layers\\dense.rst", "file_new_name": "None"}, "file_12": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\layers\\index.rst", "file_new_name": "None"}, "file_13": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\layers\\max_pooling_2d.rst", "file_new_name": "None"}, "file_14": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\layers\\relu.rst", "file_new_name": "None"}, "file_15": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\layers\\reshape.rst", "file_new_name": "None"}, "file_16": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\layers\\sigmoid.rst", "file_new_name": "None"}, "file_17": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\layers\\tanh.rst", "file_new_name": "None"}, "file_18": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\protocol\\index.rst", "file_new_name": "None"}, "file_19": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\protocol\\pond.rst", "file_new_name": "None"}, "file_20": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\protocol\\pond_private_tensor.rst", "file_new_name": "None"}, "file_21": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\protocol\\pond_public_tensor.rst", "file_new_name": "None"}, "file_22": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\protocol\\pond_tensor.rst", "file_new_name": "None"}, "file_23": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\protocol\\protocol.rst", "file_new_name": "None"}, "file_24": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\protocol\\securenn.rst", "file_new_name": "None"}, "file_25": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\api\\session.rst", "file_new_name": "None"}, "file_26": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "docs\\source\\conf.py", "file_new_name": "docs\\source\\conf.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "48", "deleted_lines": null}}}, "file_27": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\guides\\logistic_regression.rst", "file_new_name": "None"}, "file_28": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\guides\\mnist.rst", "file_new_name": "None"}, "file_29": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "docs\\source\\index.rst", "file_new_name": "docs\\source\\index.rst", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "6,9,11,17,19,24,25,26,27,41,44", "deleted_lines": "6,9,11,17,19,24,25,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,58"}}}, "file_30": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\usage\\getting_started.rst", "file_new_name": "None"}, "file_31": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "docs\\source\\usage\\installation.rst", "file_new_name": "None"}, "file_32": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "requirements.txt", "file_new_name": "requirements.txt", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "20", "deleted_lines": null}}}}}}