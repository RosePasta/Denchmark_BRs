{"BR": {"BR_id": "561", "BR_author": "avitalsh", "BRopenT": "2019-06-12T09:07:44Z", "BRcloseT": "2019-06-21T18:01:12Z", "BR_text": {"BRsummary": "tf.split in keras custom layer", "BRdescription": "\n Hey <denchmark-link:https://github.com/yanndupis>@yanndupis</denchmark-link>\n \n this is a follow up to the bug I raised in <denchmark-link:https://github.com/tf-encrypted/tf-encrypted/pull/421>#421</denchmark-link>\n . I use tf.split in a keras custom layer -\n <denchmark-code>class customLayer(tf.keras.layers.Layer):\n     def __init__(self):\n         super(customLayer, self).__init__()\n \n     def build(self, input_shape):\n         pass\n \n     def call(self, input, **kwargs):\n         return tf.split(input, 3, axis=-1)\n </denchmark-code>\n \n I use this layer in the following simple model and then I convert it using secure_model\n <denchmark-code>input_img = tf.keras.layers.Input(shape=(10,10,3))\n x = customLayer()(input_img)\n model = tf.keras.Model(inputs=input_img, outputs=x)\n model.compile('adam', 'categorical_crossentropy', metrics=['accuracy'])\n s_model = secure_model(model)\n </denchmark-code>\n \n This raises the following error -\n Traceback (most recent call last):\n File \"/cs/labs/peleg/avitalsh/CFNAS/CFNAS/test.py\", line 33, in \n s_model = secure_model(model)\n File \"/cs/labs/peleg/avitalsh/tools/tfe_fork/tf-encrypted/tf_encrypted/private_model.py\", line 84, in secure_model\n tfe.convert.registry(), 'input-provider', inputs)\n File \"/cs/labs/peleg/avitalsh/tools/tfe_fork/tf-encrypted/tf_encrypted/convert/convert.py\", line 104, in convert\n self.outputs[output_name[i]] = out[i]\n IndexError: list index out of range\n I tried debugging a bit and this is what I found -\n When the converter reach this line -\n \n \n \n tf-encrypted/tf_encrypted/convert/convert.py\n \n \n          Line 102\n       in\n       1021893\n \n \n \n \n \n \n  output_name = find_output_names(pb_trimmed, node.name) \n \n \n \n \n \n we enter find_output_names where we list the node names -\n \n \n \n tf-encrypted/tf_encrypted/convert/convert.py\n \n \n         Lines 327 to 328\n       in\n       1021893\n \n \n \n \n \n \n  node_name_list = list(pb_trimmed.keys()) \n \n \n \n  n_i = node_name_list.index(node_name) \n \n \n \n \n \n and this is what I get -\n <denchmark-link:https://user-images.githubusercontent.com/17612668/59337187-bbb58100-8d08-11e9-9407-b786aea7e202.png></denchmark-link>\n \n then when we iterate the list starting from index n_i + 1 which is 3 in this example - but node_name_list has only 3 items so this for loop is skipped and we end up with an empty list as a return value so output_name is an empty list\n \n \n \n tf-encrypted/tf_encrypted/convert/convert.py\n \n \n          Line 102\n       in\n       1021893\n \n \n \n \n \n \n  output_name = find_output_names(pb_trimmed, node.name) \n \n \n \n \n \n and then we get the error here, trying to access items in an empty list\n \n \n \n tf-encrypted/tf_encrypted/convert/convert.py\n \n \n         Lines 103 to 104\n       in\n       1021893\n \n \n \n \n \n \n  for i, _ in enumerate(out): \n \n \n \n  self.outputs[output_name[i]] = out[i] \n \n \n \n \n \n The converter works fine with custom keras layers which use operations that only have one output (such as tf.keras.layers.Relu and tf.keras.layers.Conv2D)\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "avitalsh", "commentT": "2019-06-15T01:10:36Z", "comment_text": "\n \t\tHey <denchmark-link:https://github.com/avitalsh>@avitalsh</denchmark-link>\n  , thanks for raising this issues. I will fix it on Monday.\n Our test in TF Encrypted pass because in the pb tf.split is not the last node.\n \n \n \n tf-encrypted/tf_encrypted/convert/convert_test.py\n \n \n         Lines 186 to 188\n       in\n       58387f8\n \n \n \n \n \n \n  def test_split_convert(self): \n \n \n \n  test_input = np.random.random([1, 10, 10, 3]) \n \n \n \n  self._test_with_ndarray_input_fn('split', test_input, protocol='Pond') \n \n \n \n \n \n When we export the pb file we have this tf.identity op which generates a Pack (stack the split output) the node in the pb file. So in this case find_output_names return Pack inputs.\n \n \n \n tf-encrypted/tf_encrypted/convert/convert_test.py\n \n \n          Line 891\n       in\n       58387f8\n \n \n \n \n \n \n  tf.identity(x, name=pred_node_names[0]) \n \n \n \n \n \n But the converter doesn't handle properly the situation where the last node has several outputs. Which is the case with secure_model (this Pack node doesn't get generated).\n Just curious, did you get an error with split when working with a bigger model where split is not the last operation or just with this toy example?\n Thanks\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "avitalsh", "commentT": "2019-06-16T08:18:04Z", "comment_text": "\n \t\tHey <denchmark-link:https://github.com/yanndupis>@yanndupis</denchmark-link>\n  , thanks!\n I tested the following model, where split is not the last node, and did not get any error -\n <denchmark-code>input_img = tf.keras.layers.Input(shape=(10,10,3))\n x = customLayer()(input_img)\n x = tf.keras.layers.Concatenate(axis=-1)(x)\n model = tf.keras.Model(inputs=input_img, outputs=x)\n </denchmark-code>\n \n I also tested another model that did not get an error, but had wrong output dimensions:\n <denchmark-code>input_img = tf.keras.layers.Input(shape=(10,10,3))\n x = customLayer()(input_img)\n for i in range(3):\n     x[i] = tf.keras.layers.ReLU()(x[i])\n model = tf.keras.Model(inputs=input_img, outputs=x)\n </denchmark-code>\n \n tf.keras output shape: (3, 1, 10, 10, 1)\n tfe output shape: (1, 10, 10, 1) - I think it just returns the last relu performed (on x[2]) and not the entire x tensor.\n \t\t"}}}, "commit": {"commit_id": "64ebba198ca75921cfe084087e5a904b6c083120", "commit_author": "Yann Dupis", "commitT": "2019-06-21 11:01:11-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tf_encrypted\\convert\\convert.py", "file_new_name": "tf_encrypted\\convert\\convert.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "122,123,124,125,126,127,128", "deleted_lines": "122,123", "method_info": {"method_name": "_register_op", "method_params": "self,node,inputs_iterable,input_player,pb_trimmed", "method_startline": "102", "method_endline": "130"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tf_encrypted\\private_model.py", "file_new_name": "tf_encrypted\\private_model.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "35,36,37,38,39", "deleted_lines": "35", "method_info": {"method_name": "private_predict", "method_params": "self,x,input_name,tag", "method_startline": "23", "method_endline": "42"}}}}}}}