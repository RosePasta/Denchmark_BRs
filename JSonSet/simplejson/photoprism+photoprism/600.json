{"BR": {"BR_id": "600", "BR_author": "williewillus", "BRopenT": "2020-11-13T04:28:36Z", "BRcloseT": "2020-11-26T23:54:02Z", "BR_text": {"BRsummary": "Concurrent map read/write crash on import", "BRdescription": "\n Set up with docker-compose and default options (besides changing uid and adding volumes), started an import, then crash.\n Log: <denchmark-link:https://gist.github.com/williewillus/07d6f5930a45cda9e6364095abc3fa63>https://gist.github.com/williewillus/07d6f5930a45cda9e6364095abc3fa63</denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "williewillus", "commentT": "2020-11-15T10:10:54Z", "comment_text": "\n \t\tLooks like an issue in go-exif/v3 at first sight:\n <denchmark-code>fatal error: concurrent map read and map write\n \n goroutine 1285 [running]:\n runtime.throw(0x10c8c7f, 0x21)\n \t/usr/local/go/src/runtime/panic.go:1116 +0x72 fp=0xc02adb3e80 sp=0xc02adb3e50 pc=0x442712\n runtime.mapaccess2(0xf83c80, 0xc02b12d110, 0xc02adb3ef6, 0x3, 0xc02b400bf8)\n \t/usr/local/go/src/runtime/map.go:469 +0x25b fp=0xc02adb3ec0 sp=0xc02adb3e80 pc=0x41b71b\n github.com/dsoprea/go-exif/v3.(*TagIndex).Get(0xc0002f50f0, 0xc0198f0420, 0xc02b518769, 0x0, 0x0, 0x0)\n \t/go/pkg/mod/github.com/dsoprea/go-exif/v3@v3.0.0-20200807075213-089aa48c91e6/tags.go:252 +0xe5 fp=0xc02adb3f18 sp=0xc02adb3ec0 pc=0xb08805\n github.com/dsoprea/go-exif/v3.(*IfdEnumerate).parseTag(0xc02adb44f0, 0xc0198f0420, 0x7, 0xc02b518420, 0x0, 0x0, 0x0)\n \t/go/pkg/mod/github.com/dsoprea/go-exif/v3@v3.0.0-20200807075213-089aa48c91e6/ifd_enumerate.go:249 +0x3a5 fp=0xc02adb4018 sp=0xc02adb3f18 pc=0xafdfe5\n github.com/dsoprea/go-exif/v3.(*IfdEnumerate).parseIfd(0xc02adb44f0, 0xc0198f0420, 0xc02b518420, 0x0, 0x0, 0x0, 0x0, 0xc02b524de0, 0x3, 0x4, ...)\n \t/go/pkg/mod/github.com/dsoprea/go-exif/v3@v3.0.0-20200807075213-089aa48c91e6/ifd_enumerate.go:434 +0x25e fp=0xc02adb41b8 sp=0xc02adb4018 pc=0xaff53e\n github.com/dsoprea/go-exif/v3.(*IfdEnumerate).Collect(0xc02adb44f0, 0xc000000008, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)\n \t/go/pkg/mod/github.com/dsoprea/go-exif/v3@v3.0.0-20200807075213-089aa48c91e6/ifd_enumerate.go:1342 +0xb29 fp=0xc02adb4488 sp=0xc02adb41b8 pc=0xb05e49\n github.com/dsoprea/go-exif/v3.Collect(0xc000130600, 0xc0002f50f0, 0xc02adde006, 0x4ed4, 0x4ed4, 0x125ef80, 0x22271d0, 0x8, 0x0, 0x0, ...)\n \t/go/pkg/mod/github.com/dsoprea/go-exif/v3@v3.0.0-20200807075213-089aa48c91e6/exif.go:230 +0x26c fp=0xc02adb4548 sp=0xc02adb4488 pc=0xafcd6c\n github.com/photoprism/photoprism/internal/meta.(*Data).Exif(0xc02ae19250, 0xc01bc77920, 0x55, 0x109c434, 0x3, 0x0, 0x0)\n \t/go/src/github.com/photoprism/photoprism/internal/meta/exif.go:78 +0x2f3 fp=0xc02adb49b0 sp=0xc02adb4548 pc=0xb71433\n </denchmark-code>\n \n Didn't upgrade to the latest   version for some reason, but can't remember why... was this already fixed, <denchmark-link:https://github.com/dsoprea>@dsoprea</denchmark-link>\n ?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "williewillus", "commentT": "2020-11-16T13:59:54Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/williewillus>@williewillus</denchmark-link>\n  Can you provide us with an example file, so that we can debug this further? You may attach it to this issue, or send via email to <denchmark-link:mailto:hello@photoprism.org>hello@photoprism.org</denchmark-link>\n . Looks like unexpected data, maybe not standards compliant.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "williewillus", "commentT": "2020-11-17T20:09:19Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lastzero>@lastzero</denchmark-link>\n  I see a concurrency issue. What makes you think unexpected data?\n It's worth mentioning that go-exif obviously doesn't manage concurrency. Make sure that we're serializing the requests from the PP side.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "williewillus", "commentT": "2020-11-17T22:27:07Z", "comment_text": "\n \t\tThanks, that's good to know! Using a mutex should be enough? Might slow indexing down a bit.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "williewillus", "commentT": "2020-11-18T00:03:27Z", "comment_text": "\n \t\tCorrect. It would be a necessary cost. As go-exif doesn't not have nor need any parallel processes, locking is somewhat well out of scope.\n That said, this is no heavy feat of engineering, so I might just add it. It looks like it's just a thing with a race on the caching. There aren't many situations where parallel processes would get tripped up, so for me to serialize it here might just completely solve it.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "williewillus", "commentT": "2020-11-21T22:48:33Z", "comment_text": "\n \t\tJust pushed to master. New Docker build for testing available soon.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "williewillus", "commentT": "2020-11-22T06:49:32Z", "comment_text": "\n \t\tFixed in go-exif, as well.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "williewillus", "commentT": "2020-11-22T06:50:05Z", "comment_text": "\n \t\tSorry for the delay.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "williewillus", "commentT": "2020-11-22T12:29:09Z", "comment_text": "\n \t\tNo worries, we're super busy too... fixed all obvious issues this weekend. Hope that's it, so that we can tag a release soon!\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "williewillus", "commentT": "2020-11-26T23:54:01Z", "comment_text": "\n \t\tClosing this since no negative test reports came in.\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "williewillus", "commentT": "2020-12-20T04:39:57Z", "comment_text": "\n \t\tHi, sorry for the lack of updates on this, but I just pulled and tried importing again and so far things are looking good. Thanks for the fix!\n \t\t"}}}, "commit": {"commit_id": "25e88bb1fca7b6a641084bc1a1812b3279e58075", "commit_author": "Michael Mayer", "commitT": "2020-11-21 23:43:53+01:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "internal\\meta\\exif.go", "file_new_name": "internal\\meta\\exif.go", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "49,50,51", "deleted_lines": null, "method_info": {"method_name": "Exif", "method_params": "string,FileType", "method_startline": "48", "method_endline": "293"}}}}}}}