{"BR": {"BR_id": "469", "BR_author": "ChipKerchner", "BRopenT": "2019-04-30T18:02:38Z", "BRcloseT": "2019-05-03T04:38:42Z", "BR_text": {"BRsummary": "Broken unit tests for older and non-Intel systems", "BRdescription": "\n I found 4 unit tests that are broken on older (tested on a Nehalem system) and non-Intel (Power9) systems.\n tests/gtests/test_sum --gtest_filter=TestSum_CPU/sum_test_float.TestsSum_CPU/15\n tests/gtests/test_sum --gtest_filter=TestSum_CPU/sum_test_float_omit_output.TestsSum_CPU/15\n tests/gtests/test_reorder --gtest_filter=Data_CPU/reorder_simple_test_f32_f32.TestsReorder/12\n tests/gtests/test_reorder --gtest_filter=Data_CPU/reorder_simple_test_f32_f32.TestsReorder/13\n <denchmark-h:hr></denchmark-h>\n \n Older HW:\n Architecture:        x86_64\n CPU op-mode(s):      32-bit, 64-bit\n Byte Order:          Little Endian\n CPU(s):              16\n On-line CPU(s) list: 0-15\n Thread(s) per core:  1\n Core(s) per socket:  4\n Socket(s):           4\n NUMA node(s):        1\n Vendor ID:           GenuineIntel\n CPU family:          6\n Model:               15\n Model name:          Genuine Intel(R) CPU                  @ 2.93GHz\n Stepping:            11\n CPU MHz:             1642.102\n BogoMIPS:            5863.95\n Virtualization:      VT-x\n L1d cache:           32K\n L1i cache:           32K\n L2 cache:            4096K\n NUMA node0 CPU(s):   0-15\n Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good nopl cpuid aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca lahf_lm pti tpr_shadow vnmi flexpriority dtherm\n Linux xxxxxx 4.15.10-300.fc27.x86_64 <denchmark-link:https://github.com/oneapi-src/oneDNN/issues/1>#1</denchmark-link>\n  SMP Thu Mar 15 17:13:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\n gcc (GCC) 7.3.1 20180303 (Red Hat 7.3.1-5)\n cmake version 3.11.2\n MKLROOT=\n git log -1 --format=%H\n <denchmark-link:https://github.com/oneapi-src/oneDNN/commit/425c2bfbb5aa40ae671dfe20a8c9083285385888>425c2bf</denchmark-link>\n \n Non Intel-HW:\n Architecture:        ppc64le\n Byte Order:          Little Endian\n CPU(s):              160\n On-line CPU(s) list: 0-159\n Thread(s) per core:  4\n Core(s) per socket:  20\n Socket(s):           2\n NUMA node(s):        2\n Model:               2.2 (pvr 004e 1202)\n Model name:          POWER9 (raw), altivec supported\n CPU max MHz:         3800.0000\n CPU min MHz:         2300.0000\n L1d cache:           32K\n L1i cache:           32K\n L2 cache:            512K\n L3 cache:            10240K\n NUMA node0 CPU(s):   0-79\n NUMA node8 CPU(s):   80-159\n Linux xxxxxx 4.15.0-46-generic <denchmark-link:https://github.com/oneapi-src/oneDNN/issues/49>#49</denchmark-link>\n -Ubuntu SMP Wed Feb 6 09:32:48 UTC 2019 ppc64le ppc64le\n ppc64le GNU/Linux\n cmake version 3.10.2\n gcc (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0\n MKLROOT=\n git log -1 --format=%H\n <denchmark-link:https://github.com/oneapi-src/oneDNN/commit/425c2bfbb5aa40ae671dfe20a8c9083285385888>425c2bf</denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ChipKerchner", "commentT": "2019-04-30T23:59:41Z", "comment_text": "\n \t\tWe validate on Nehalem systems and there's currently no failures in validation. The one you are using seems to be something older, as it does not have sse4_1 flag. Might be a bug in reference code.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ChipKerchner", "commentT": "2019-05-01T00:25:24Z", "comment_text": "\n \t\tI can reproduce it. The bug seems indeed happen in simple_reorder... I will take a look on that.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "ChipKerchner", "commentT": "2019-05-01T14:14:58Z", "comment_text": "\n \t\t\n We validate on Nehalem systems and there's currently no failures in validation. The one you are using seems to be something older, as it does not have sse4_1 flag. Might be a bug in reference code.\n \n Yes, it looks like it is a Merom system.  Someone must have labeled it wrong in the server list.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "ChipKerchner", "commentT": "2019-05-01T15:10:44Z", "comment_text": "\n \t\tYep, reproduced on a Merom.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "ChipKerchner", "commentT": "2019-05-01T16:49:32Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ChipKerchner>@ChipKerchner</denchmark-link>\n ,\n Thanks for reporting the issue. I seem to fix the issue.\n If you have some free time could you please apply the patch and validate on your side?\n Once the full internal validation passes I will promote it to master.\n diff --git a/src/cpu/simple_reorder.hpp b/src/cpu/simple_reorder.hpp\n index ebca9d321..6a653e7d0 100644\n --- a/src/cpu/simple_reorder.hpp\n +++ b/src/cpu/simple_reorder.hpp\n @@ -416,6 +416,9 @@ typename utils::enable_if<false\n          const auto &pdims = order_keep ? output_d.padded_dims()\n                                         : input_d.padded_dims();\n \n +        const auto &nchw8c_d = order_keep ? input_d : output_d;\n +        const auto stride_C_in_8c = nchw8c_d.blocking_desc().strides[1];\n +\n          const int C = dims[1];\n          const int D = is_3d ? dims[2] : 1;\n          const int H = is_1d ? 1 : dims[2 + is_3d];\n @@ -426,8 +429,10 @@ typename utils::enable_if<false\n              const int nb = (block_16 - 1) / blksize_8 + 1;\n              if (alpha == 1.0 && beta == 0.0) {\n                  for (int b = 0; b < nb; ++b) {\n -                    const ptrdiff_t i_off = order_keep ? b : b * blksize_8;\n -                    const ptrdiff_t o_off = order_keep ? b * blksize_8 : b;\n +                    const ptrdiff_t i_off = b\n +                        * (order_keep ? stride_C_in_8c : blksize_8);\n +                    const ptrdiff_t o_off = b\n +                        * (order_keep ? blksize_8 : stride_C_in_8c);\n                      const int block_8 = nstl::min(blksize_8,\n                                                    block_16 - b * blksize_8);\n                      for (int c = 0; c < block_8; ++c) {\n @@ -437,8 +442,10 @@ typename utils::enable_if<false\n                  }\n              } else {\n                  for (int b = 0; b < nb; ++b) {\n -                    const ptrdiff_t i_off = order_keep ? b : b * blksize_8;\n -                    const ptrdiff_t o_off = order_keep ? b * blksize_8 : b;\n +                    const ptrdiff_t i_off = b\n +                        * (order_keep ? stride_C_in_8c : blksize_8);\n +                    const ptrdiff_t o_off = b\n +                        * (order_keep ? blksize_8 : stride_C_in_8c);\n                      const int block_8 = nstl::min(blksize_8,\n                                                    block_16 - b * blksize_8);\n                      for (int c = 0; c < block_8; ++c) {\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "ChipKerchner", "commentT": "2019-05-01T17:45:52Z", "comment_text": "\n \t\tAll the unit tests pass on the Merom and Power9 systems with the above patch.\n Thanks for your quick response!\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "ChipKerchner", "commentT": "2019-05-01T17:46:56Z", "comment_text": "\n \t\tThank you very much for a quick turnaround!\n I will promote the fix soon.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "ChipKerchner", "commentT": "2019-05-01T17:57:55Z", "comment_text": "\n \t\tOne thing I did notice is the Merom system only had 45 unit tests vs 46 in the Power 9 and advanced x86_64 system.\n It doesn't run the unit test - test_rnn_forward\n I can run it manually but ctest doesn't include it in its list.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "ChipKerchner", "commentT": "2019-05-01T18:57:20Z", "comment_text": "\n \t\tThis is really weird. I don't see any reason why the test should disappear from the cmake/ctest system...\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "ChipKerchner", "commentT": "2019-05-01T20:12:09Z", "comment_text": "\n \t\tThat's STRANGE!  When I run 'scripts/prepare_mkl,sh', it no longer produces 'test_rnn_forward'.  Without it, it does produce it (from a clean clone).\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "ChipKerchner", "commentT": "2019-05-01T20:37:21Z", "comment_text": "\n \t\toK, I've figured that out. The reason is <denchmark-link:https://github.com/intel/mkl-dnn/blob/master/tests/gtests/CMakeLists.txt#L74-L79>these lines</denchmark-link>\n .\n But they are gone in the latest internal master. Once the recent changes would be promoted to github the number of test would be constant no matter whether you build Intel MKL-DNN w/ Intel MKL or not.\n So no worries :)\n \t\t"}}}, "commit": {"commit_id": "fff05c7502dba37719d2e116fc847c550d38a462", "commit_author": "Fomenko, Evarist M", "commitT": "2019-05-01 10:10:58-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\cpu\\simple_reorder.hpp", "file_new_name": "src\\cpu\\simple_reorder.hpp", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "419,420,421,432,433,434,435,445,446,447,448", "deleted_lines": "429,430,440,441", "method_info": {"method_name": "mkldnn::impl::cpu::execute", "method_params": "pd,input,output", "method_startline": "404", "method_endline": "474"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tests\\benchdnn\\inputs\\reorder\\test_default", "file_new_name": "tests\\benchdnn\\inputs\\reorder\\test_default", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "22,23,24,25,26", "deleted_lines": null}}}}}}