{"BR": {"BR_id": "758", "BR_author": "krishanudb", "BRopenT": "2021-01-21T22:29:16Z", "BRcloseT": "2021-01-25T11:54:35Z", "BR_text": {"BRsummary": "SQLite OperationalError in SQLDocumentStore", "BRdescription": "\n In the following lines, I get errors:\n <denchmark-code>document_store.delete_all_documents()\n \n # Write documents to document store\n document_store.write_documents(documents)\n \n # Add documents embeddings to index\n document_store.update_embeddings(retriever=retriever)\n </denchmark-code>\n \n The error message:\n <denchmark-code>01/21/2021 22:03:34 - INFO - haystack.document_store.faiss -   Updating embeddings for 75 docs...\n   0%|          | 0/75 [00:00<?, ?it/s]\n ---------------------------------------------------------------------------\n OperationalError                          Traceback (most recent call last)\n /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args)\n    1276                     self.dialect.do_execute(\n -> 1277                         cursor, statement, parameters, context\n    1278                     )\n \n 17 frames\n /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/default.py in do_execute(self, cursor, statement, parameters, context)\n     608     def do_execute(self, cursor, statement, parameters, context=None):\n --> 609         cursor.execute(statement, parameters)\n     610 \n \n OperationalError: near \"(\": syntax error\n \n The above exception was the direct cause of the following exception:\n \n OperationalError                          Traceback (most recent call last)\n <ipython-input-8-0ae6e12f6b98> in <module>()\n       6 \n       7 # Add documents embeddings to index\n ----> 8 document_store.update_embeddings(retriever=retriever)\n \n /usr/local/lib/python3.6/dist-packages/haystack/document_store/faiss.py in update_embeddings(self, retriever, index, batch_size)\n     188         batched_documents = get_batches_from_generator(result, batch_size)\n     189         with tqdm(total=document_count) as progress_bar:\n --> 190             for document_batch in batched_documents:\n     191                 embeddings = retriever.embed_passages(document_batch)  # type: ignore\n     192                 assert len(document_batch) == len(embeddings)\n \n /usr/local/lib/python3.6/dist-packages/haystack/utils.py in get_batches_from_generator(iterable, n)\n     122     \"\"\"\n     123     it = iter(iterable)\n --> 124     x = tuple(islice(it, n))\n     125     while x:\n     126         yield x\n \n /usr/local/lib/python3.6/dist-packages/haystack/document_store/faiss.py in get_all_documents_generator(self, index, filters, return_embedding, batch_size)\n     241             return_embedding = self.return_embedding\n     242 \n --> 243         for doc in documents:\n     244             if return_embedding:\n     245                 if doc.meta and doc.meta.get(\"vector_id\") is not None:\n \n /usr/local/lib/python3.6/dist-packages/haystack/document_store/sql.py in get_all_documents_generator(self, index, filters, return_embedding, batch_size)\n     183 \n     184         documents_map = {}\n --> 185         for i, row in enumerate(self._windowed_query(documents_query, DocumentORM.id, batch_size), start=1):\n     186             documents_map[row.id] = Document(\n     187                 id=row.id,\n \n /usr/local/lib/python3.6/dist-packages/haystack/document_store/sql.py in _windowed_query(self, q, column, windowsize)\n     464         for whereclause in self._column_windows(\n     465                 q.session,\n --> 466                 column, windowsize):\n     467             for row in q.filter(whereclause).order_by(column):\n     468                 yield row\n \n /usr/local/lib/python3.6/dist-packages/haystack/document_store/sql.py in _column_windows(self, session, column, windowsize)\n     449             q = q.filter(text(\"rownum %% %d=1\" % windowsize))\n     450 \n --> 451         intervals = [id for id, in q]\n     452 \n     453         while intervals:\n \n /usr/local/lib/python3.6/dist-packages/sqlalchemy/orm/query.py in __iter__(self)\n    3533         if self._autoflush and not self._populate_existing:\n    3534             self.session._autoflush()\n -> 3535         return self._execute_and_instances(context)\n    3536 \n    3537     def __str__(self):\n \n /usr/local/lib/python3.6/dist-packages/sqlalchemy/orm/query.py in _execute_and_instances(self, querycontext)\n    3558         )\n    3559 \n -> 3560         result = conn.execute(querycontext.statement, self._params)\n    3561         return loading.instances(querycontext.query, result, querycontext)\n    3562 \n \n /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py in execute(self, object_, *multiparams, **params)\n    1009             )\n    1010         else:\n -> 1011             return meth(self, multiparams, params)\n    1012 \n    1013     def _execute_function(self, func, multiparams, params):\n \n /usr/local/lib/python3.6/dist-packages/sqlalchemy/sql/elements.py in _execute_on_connection(self, connection, multiparams, params)\n     296     def _execute_on_connection(self, connection, multiparams, params):\n     297         if self.supports_execution:\n --> 298             return connection._execute_clauseelement(self, multiparams, params)\n     299         else:\n     300             raise exc.ObjectNotExecutableError(self)\n \n /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py in _execute_clauseelement(self, elem, multiparams, params)\n    1128             distilled_params,\n    1129             compiled_sql,\n -> 1130             distilled_params,\n    1131         )\n    1132         if self._has_events or self.engine._has_events:\n \n /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args)\n    1315         except BaseException as e:\n    1316             self._handle_dbapi_exception(\n -> 1317                 e, statement, parameters, cursor, context\n    1318             )\n    1319 \n \n /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py in _handle_dbapi_exception(self, e, statement, parameters, cursor, context)\n    1509             elif should_wrap:\n    1510                 util.raise_(\n -> 1511                     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n    1512                 )\n    1513             else:\n \n /usr/local/lib/python3.6/dist-packages/sqlalchemy/util/compat.py in raise_(***failed resolving arguments***)\n     180 \n     181         try:\n --> 182             raise exception\n     183         finally:\n     184             # credit to\n \n /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args)\n    1275                 if not evt_handled:\n    1276                     self.dialect.do_execute(\n -> 1277                         cursor, statement, parameters, context\n    1278                     )\n    1279 \n \n /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/default.py in do_execute(self, cursor, statement, parameters, context)\n     607 \n     608     def do_execute(self, cursor, statement, parameters, context=None):\n --> 609         cursor.execute(statement, parameters)\n     610 \n     611     def do_execute_no_params(self, cursor, statement, context=None):\n \n OperationalError: (sqlite3.OperationalError) near \"(\": syntax error\n [SQL: SELECT anon_1.document_id AS anon_1_document_id \n FROM (SELECT document.id AS document_id, row_number() OVER (ORDER BY document.id) AS rownum \n FROM document) AS anon_1 \n WHERE rownum % 10000=1]\n (Background on this error at: http://sqlalche.me/e/13/e3q8)\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "krishanudb", "commentT": "2021-01-21T22:58:14Z", "comment_text": "\n \t\tCan you please check the SQLite version?\n Error is coming from windowing query and it's support was introduced since <denchmark-link:https://sqlite.org/windowfunctions.html#history>3.25 version</denchmark-link>\n . So I am suspecting your colab have lower version of SQLite install. Try upgrading to latest version and try again.\n <denchmark-link:https://github.com/tanaysoni>@tanaysoni</denchmark-link>\n  I think we might need to disable windowing queries by default.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "krishanudb", "commentT": "2021-01-21T23:22:51Z", "comment_text": "\n \t\tSQLite3 version (3, 22, 0)\n it seems updating sqlite3 on colab is not as easy\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "krishanudb", "commentT": "2021-01-21T23:36:52Z", "comment_text": "\n \t\tTry this <denchmark-link:https://stackoverflow.com/questions/59427642/upgrading-sqlite-in-colab>https://stackoverflow.com/questions/59427642/upgrading-sqlite-in-colab</denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "krishanudb", "commentT": "2021-01-25T11:56:31Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/krishanudb>@krishanudb</denchmark-link>\n  thank you for raising the issue. With <denchmark-link:https://github.com/deepset-ai/haystack/pull/768>#768</denchmark-link>\n , the use of window functions is disabled for older versions of SQLite. Could you try the tutorial again after pulling in the latest master branch?\n \t\t"}}}, "commit": {"commit_id": "d9f011da9a7a4eb4423f16b783b55fb034fd5c12", "commit_author": "Tanay Soni", "commitT": "2021-01-25 12:54:34+01:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "haystack\\document_store\\sql.py", "file_new_name": "haystack\\document_store\\sql.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "99,100,101,102,103,190,191,192,193,194", "deleted_lines": "185"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "test\\test_document_store.py", "file_new_name": "test\\test_document_store.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "55,56,57,58,59,60,61,62,63,64", "deleted_lines": null, "method_info": {"method_name": "test_get_all_documents_with_correct_filters_legacy_sqlite", "method_params": "document_store_with_docs", "method_startline": "55", "method_endline": "64"}}}}}}}