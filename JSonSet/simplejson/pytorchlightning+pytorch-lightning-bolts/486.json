{"BR": {"BR_id": "486", "BR_author": "jfrancis71", "BRopenT": "2020-12-29T15:38:33Z", "BRcloseT": "2021-01-18T09:14:53Z", "BR_text": {"BRsummary": "forward method of UNet when num_layers = 0 produces IndexError: list index out of range", "BRdescription": "\n <denchmark-h:h2>\ud83d\udc1b Bug</denchmark-h>\n \n The forward method of a UNet object fails with IndexError: list index out of range if it has been constructed with num_layers = 0.\n I realise this is not a very exciting UNet example, but it probably should not fail in this way.\n (I have a model which uses unets of different depths and it's awkward to have to deal with num_layers=0\n as a special case).\n <denchmark-h:h4>Code sample</denchmark-h>\n \n import torch\n import pl_bolts.models.vision.unet as plt_unet\n my_unet = plt_unet.UNet( num_classes = 20, input_channels = 3, num_layers = 0 )\n my_unet( torch.rand( [ 2, 3, 5, 5 ] ) )\n <denchmark-h:hr></denchmark-h>\n \n <denchmark-code>IndexError                                Traceback (most recent call last)\n <ipython-input-6-332b962df305> in <module>\n ----> 1 my_unet( torch.rand( [ 2, 3, 5, 5 ] ) )\n \n ~/anaconda3/envs/PyGenBrix/lib/python3.8/site-packages/torch/nn/modules/module.py in _call_impl(self, *input, **kwargs)\n     725             result = self._slow_forward(*input, **kwargs)\n     726         else:\n --> 727             result = self.forward(*input, **kwargs)\n     728         for hook in itertools.chain(\n     729                 _global_forward_hooks.values(),\n \n ~/anaconda3/envs/PyGenBrix/lib/python3.8/site-packages/pl_bolts/models/vision/unet.py in forward(self, x)\n      56         # Up path\n      57         for i, layer in enumerate(self.layers[self.num_layers:-1]):\n ---> 58             xi[-1] = layer(xi[-1], xi[-2 - i])\n      59         return self.layers[-1](xi[-1])\n      60 \n \n IndexError: list index out of range\n </denchmark-code>\n \n <denchmark-h:h3>Expected behavior</denchmark-h>\n \n I expected it to produce a tensor of shape [ 2, 20, 5, 5 ].\n <denchmark-h:h3>Environment</denchmark-h>\n \n \n PyTorch Version 1.7.1\n OS (e.g., Linux): Ubuntu 18.04\n How you installed PyTorch (conda, pip, source): conda install torch\n Build command you used (if compiling from source):\n Python version: 3.8.5\n CUDA/cuDNN version:\n GPU models and configuration:\n Any other relevant information:\n \n Pytorch lightning bolts: 0.2.6rc1\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "jfrancis71", "commentT": "2020-12-29T15:39:19Z", "comment_text": "\n \t\tHi! thanks for your contribution!, great first issue!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "jfrancis71", "commentT": "2021-01-06T08:07:15Z", "comment_text": "\n \t\tyes, I agree that there shall be some assert for num_layers > 0, mind sens PR with a fix? \ud83d\udc30\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "jfrancis71", "commentT": "2021-01-07T17:25:09Z", "comment_text": "\n \t\tYes, I believe I have a fix for this. I think there is also an error condition where a tensor can be passed in which is too small for the selected num_layers.\n I am double checking both and hope to submit a PR in the next couple of days\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "jfrancis71", "commentT": "2021-01-08T08:37:31Z", "comment_text": "\n \t\tI have submitted a PR for this. <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning-bolts/pull/498>#498</denchmark-link>\n \n Note, my original expected behaviour of outputting a tensor is not correct (I had confused num_layers with number of upsampling stages). Nevertheless the PR containing a more helpful error message will hopefully be more informative.\n Regarding my previous comment about input tensors which are too small I have not put into this PR, as it is a related but slightly separate issue\n \t\t"}}}, "commit": {"commit_id": "455b10ee19b914abf5dd68f9686c9b870daa971b", "commit_author": "Julian Francis", "commitT": "2021-01-18 10:14:52+01:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "pl_bolts\\models\\vision\\unet.py", "file_new_name": "pl_bolts\\models\\vision\\unet.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "34,35,36,37", "deleted_lines": null}}}}}}