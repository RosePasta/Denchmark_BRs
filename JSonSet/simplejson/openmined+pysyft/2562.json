{"BR": {"BR_id": "2562", "BR_author": "mari-linhares", "BRopenT": "2019-08-27T12:58:25Z", "BRcloseT": "2020-05-24T00:09:15Z", "BR_text": {"BRsummary": "resnet50 not supported when torch 1.0.1 / 1.1 is hooked", "BRdescription": "\n <denchmark-code>import torch\n import syft\n hook = syft.TorchHook(torch)\n import torchvision.models as models\n \n def make_model(num_out_classes: int):\n     \"\"\"Load a resnet50 and add a new head to it.\"\"\"\n     model = models.resnet50(pretrained=True) \n     num_ftrs = model.fc.in_features\n     model.fc = torch.nn.Linear(num_ftrs, num_out_classes)\n     return model\n \n model = make_model(7)\n model(torch.zeros(torch.Size([1, 3, 224, 224])))\n </denchmark-code>\n \n Error:\n <denchmark-code>...\n ~/PySyft/syft/frameworks/torch/hook/hook.py in overloaded_func(*args, **kwargs)\n     745                 handle_func_command = TorchTensor.handle_func_command\n     746 \n --> 747             response = handle_func_command(command)\n     748 \n     749             return response\n \n ~/PySyft/syft/frameworks/torch/tensors/interpreters/native.py in handle_func_command(cls, command)\n     336             # in the execute_command function\n     337             if isinstance(args, tuple):\n --> 338                 response = eval(cmd)(*args, **kwargs)\n     339             else:\n     340                 response = eval(cmd)(args, **kwargs)\n \n ~/PySyft/syft/frameworks/torch/tensors/interpreters/native.py in <module>\n \n AttributeError: module 'torch._C._nn' has no attribute 'native_avg_pool2d'\n </denchmark-code>\n \n <denchmark-h:hr></denchmark-h>\n \n torch version 1.0.1 and 1.1\n syft dev version\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "mari-linhares", "commentT": "2019-08-28T07:59:57Z", "comment_text": "\n \t\tWeird... I don't think there is a native_avg_pool2d in Pytorch, only avg_pool2d. Did you try to load the model without hooking torch?\n Maybe the hook changes the name of the method...\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "mari-linhares", "commentT": "2019-08-28T11:54:00Z", "comment_text": "\n \t\t\n Did you try to load the model without hooking torch?\n \n Yes, it works just fine.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "mari-linhares", "commentT": "2019-10-29T19:48:47Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mari-linhares>@mari-linhares</denchmark-link>\n   For some reason, the command created by the native.py file for the avg_pool2d layer looks like this:\n syft.local_worker.hook.torch._C._nn.native_avg_pool2d\n While the max_pool2d looks like this:\n syft.local_worker.hook.torch.nn.functional.native_max_pool2d\n I am still trying to understand why this particular layer is being called from torch._C and not torch.nn, but for practical testing purposes, I just created an if to change avg_pool2d's command to conform to that of max_pool2d, and it worked normally. I was able to load networks like ResNet and MobileNet.\n To fix it, simply open the native.py file and change the construction of the cmd variable to the following:\n <denchmark-code>            if (cmd.split (\".\")[- 1] == 'avg_pool2d'):\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cmd = 'syft.local_worker.hook.torch.nn.functional.native_avg_pool2d'\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cmd = (\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"syft.local_worker.hook.\"\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \".\". join (cmd.split (\".\") [: - 1])\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \".native_\"\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ cmd.split (\".\") [- 1]\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n </denchmark-code>\n \n [EDIT]\n A more automatic way to correct this problem is to replace calls from _C_nn to nn.functional. I will propose this solution through a pull request.\n <denchmark-code>            # Change library path to avoid problems with AvgPooling layer\n             cmd = cmd.replace('_C._nn', 'nn.functional')\n \n             cmd = (\n                 \"syft.local_worker.hook.\"\n                 + \".\".join(cmd.split(\".\")[:-1])\n                 + \".native_\"\n                 + cmd.split(\".\")[-1]\n             )\n </denchmark-code>\n \n Then just run python setup.py install again to overwrite the library with your change. I will try to propose a solution that is not unique to avg_pool, but for now this will work.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "mari-linhares", "commentT": "2019-10-31T13:45:53Z", "comment_text": "\n \t\tTo me this looks like we are hooking _C._nn after we are hooking torch.nn.functional. In my opinion we should not be hooking _C._nn at all which might solve this problem\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "mari-linhares", "commentT": "2020-03-27T10:30:20Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mari-linhares>@mari-linhares</denchmark-link>\n  should we close this issue since currently we are on torch 1.4?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "mari-linhares", "commentT": "2020-05-24T00:09:14Z", "comment_text": "\n \t\tThis issue has been marked stale because it has been open 30 days with no activity. Leave a comment or remove the stale label to unmark it. Otherwise, this will be closed in 7 days.\n \t\t"}}}, "commit": {"commit_id": "e2bf4f6983484191da9f6b1c0f47d42fd11ecc0e", "commit_author": "Marcus Vinicius", "commitT": "2019-12-20 15:23:07+00:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "syft\\frameworks\\torch\\tensors\\interpreters\\native.py", "file_new_name": "syft\\frameworks\\torch\\tensors\\interpreters\\native.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "351,352,353,354,355,356,357", "deleted_lines": null, "method_info": {"method_name": "_fix_torch_library", "method_params": "cmd", "method_startline": "351", "method_endline": "357"}}, "hunk_1": {"Ismethod": 1, "added_lines": "300,301,302,303,304,305,306,307,308,331,332,333,334,335,336", "deleted_lines": "297,301,324,325,326,327", "method_info": {"method_name": "handle_func_command", "method_params": "cls,command", "method_startline": "255", "method_endline": "338"}}, "hunk_2": {"Ismethod": 1, "added_lines": "340,341,342,343,344,345,346,347,348,349", "deleted_lines": null, "method_info": {"method_name": "_get_response", "method_params": "cmd,args,kwargs", "method_startline": "340", "method_endline": "349"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "test\\torch\\tensors\\test_native.py", "file_new_name": "test\\torch\\tensors\\test_native.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214", "deleted_lines": null, "method_info": {"method_name": "test_complex_model", "method_params": "workers", "method_startline": "182", "method_endline": "214"}}, "hunk_1": {"Ismethod": 1, "added_lines": "190,191,192,193,194,195,196", "deleted_lines": null, "method_info": {"method_name": "test_complex_model.__init__", "method_params": "self", "method_startline": "190", "method_endline": "196"}}, "hunk_2": {"Ismethod": 1, "added_lines": "198,199,200,201,202,203,204,205,206,207,208", "deleted_lines": null, "method_info": {"method_name": "test_complex_model.forward", "method_params": "self,x", "method_startline": "198", "method_endline": "208"}}}}}}}