{"BR": {"BR_id": "21418", "BR_author": "ezyang", "BRopenT": "2019-06-05T17:59:49Z", "BRcloseT": "2019-06-05T22:33:27Z", "BR_text": {"BRsummary": "warning: missing return statement at end of non-void function", "BRdescription": "\n On GCC 7.3 + CUDA 10.0, and probably other configurations, we get lots of warnings like:\n <denchmark-code>./c10/core/Backend.h(109): warning: missing return statement at end of non-void function \"c10::tensorTypeIdToBackend\"\n                                               \n ./c10/core/Backend.h(173): warning: missing return statement at end of non-void function \"c10::backendToDeviceType\"\n                                                                                               \n ./c10/core/Backend.h(204): warning: missing return statement at end of non-void function \"c10::backendToCPU\"\n                                                                                    \n ./c10/core/Backend.h(226): warning: missing return statement at end of non-void function \"c10::backendToCUDA\"\n                                                                                                         \n ./c10/core/Backend.h(245): warning: missing return statement at end of non-void function \"c10::backendToHIP\"\n </denchmark-code>\n \n This is because nvcc is unable to deal with the combination of C10_UNLIKELY (aka __builtin_expect) and dead-code elimination, as seen in this simple program:\n <denchmark-code>(/scratch/ezyang/pytorch-tmp-env) ezyang@devfair040:/scratch/ezyang/pytorch-tmp$ cat test.cu\n #include <exception>\n int f() {\n   if (__builtin_expect(true, 0)) {\n     throw std::exception();\n   }\n }\n int g() {\n   if (true) {\n     throw std::exception();\n   }\n }\n (/scratch/ezyang/pytorch-tmp-env) ezyang@devfair040:/scratch/ezyang/pytorch-tmp$ nvcc -c test.cu \n test.cu(6): warning: missing return statement at end of non-void function \"f\"\n \n test.cu(6): warning: missing return statement at end of non-void function \"f\"\n \n </denchmark-code>\n \n This combination of features is handled correctly by the host compiler. Bug was reported to NVIDIA at <denchmark-link:https://developer.nvidia.com/nvidia_bug/2615657>https://developer.nvidia.com/nvidia_bug/2615657</denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ezyang", "commentT": "2019-06-05T18:29:25Z", "comment_text": "\n \t\tcc <denchmark-link:https://github.com/smessmer>@smessmer</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "6b9f46b2d0eca208386886c9cc9c76ed351533fb", "commit_author": "Edward Yang", "commitT": "2019-06-05 15:30:54-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "c10\\util\\Exception.h", "file_new_name": "c10\\util\\Exception.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,194,202,236,244,261,269", "deleted_lines": "174,182,216,224,241,249"}}}}}}