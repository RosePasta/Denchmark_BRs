{"BR": {"BR_id": "1234", "BR_author": "jsreid13", "BRopenT": "2017-12-12T23:02:14Z", "BRcloseT": "2017-12-14T10:37:52Z", "BR_text": {"BRsummary": "Providing a number greater than 13 for --psm option causes it to run in psm mode 8", "BRdescription": "\n <denchmark-h:h3>Environment</denchmark-h>\n \n \n Tesseract Version: 4.0\n Commit Number: Built from source as of commit eba0ae3\n Platform: Ubuntu 16.04, 64-Bit\n \n <denchmark-h:h3>Current Behavior:</denchmark-h>\n \n Running tesseract from command line with option --psm 100  (or any number greater than 13) causes tesseract to run in PSM 8 (PSM_SINGLE_LINE).\n After digging through how Tesseract handles PSM values it seems that if the value entered is greater than 13 then it behaves similarly to PSM 8 based on the PSM functions in publictypes.h, there's only a difference if LSTMRecognizeWord is ran. This is nonintuitive behaviour and should throw an error to the user to warn them to use a valid PSM.\n <denchmark-h:h3>Expected Behavior:</denchmark-h>\n \n Entering a number outside of 0-13 for PSM should throw an error to the user.\n <denchmark-h:h3>Suggested Fix:</denchmark-h>\n \n Include a function to check that that value entered in the command line for PSM is between 0 and 13 in the ParseArgs function in tesseractmain.cpp, if not print a message to the user and exit. I made this function flexible enough to work with the OEM value too because this also doesn't throw an error currently when a value is entered outside of 0-3(or 5? there's two new modes CUBE_ONLY and CUBE_COMBINED not sure if they're still in development but they will be counted by this function).\n void checkArgValues (int arg, const char* mode, int count) {\n   if (arg >= count || arg < 0) {\n     printf(\"Invalid %s value, please enter a number between 0-%d\", mode, count - 1);\n     exit(0); \n   }\n }\n \n and this will be used in the following way:\n       else if (strcmp(argv[i], \"-psm\") == 0 && i + 1 < argc) {\n       // The parameter -psm is deprecated and was replaced by --psm.\n       // It is still supported for compatibility reasons.\n       checkArgValues(atoi(argv[i+1]), \"PSM\", tesseract::PSM_COUNT);\n       *pagesegmode = static_cast(atoi(argv[i + 1]));\n       ++i;\n     } else if (strcmp(argv[i], \"--psm\") == 0 && i + 1 < argc) {\n       checkArgValues(atoi(argv[i+1]), \"PSM\", tesseract::PSM_COUNT);\n       *pagesegmode = static_cast(atoi(argv[i + 1]));\n       ++i;\n     } else if (strcmp(argv[i], \"--oem\") == 0 && i + 1 < argc) {\n       checkArgValues(atoi(argv[i+1]), \"OEM\", tesseract::OEM_COUNT);\n       *enginemode = static_cast(atoi(argv[i + 1]));\n       ++i;\n     }\n \n and requires the following addition to OcrEngineMode in publictypes.h, similar to what is currently in PageSegMode:\n enum OcrEngineMode {\n   OEM_TESSERACT_ONLY,           // Run Tesseract only - fastest\n   OEM_LSTM_ONLY,                // Run just the LSTM line recognizer.\n   OEM_TESSERACT_LSTM_COMBINED,  // Run the LSTM recognizer, but allow fallback\n                                 // to Tesseract when things get difficult.\n   OEM_DEFAULT,                  // Specify this mode when calling init_*(),\n                                 // to indicate that any of the above modes\n                                 // should be automatically inferred from the\n                                 // variables in the language-specific config,\n                                 // command-line configs, or if not specified\n                                 // in any of the above should be set to the\n                                 // default OEM_TESSERACT_ONLY.\n   OEM_CUBE_ONLY,                // Run Cube only - better accuracy, but slower\n   OEM_TESSERACT_CUBE_COMBINED,  // Run both and combine results - best accuracy\n   OEM_COUNT\t\t\t// Number of OEMs\n };\n \n Created pull request <denchmark-link:https://github.com/tesseract-ocr/tesseract/pull/1236>#1236</denchmark-link>\n  to merge this change\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "jsreid13", "commentT": "2017-12-14T10:38:03Z", "comment_text": "\n \t\tthanks\n \t\t"}}}, "commit": {"commit_id": "cdc35338c53a1af1fcb95473445f2aabfdb3f6d1", "commit_author": "Josh Reid", "commitT": "2017-12-14 11:37:44+01:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "api\\tesseractmain.cpp", "file_new_name": "api\\tesseractmain.cpp", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "241,242,243,244,245,246", "deleted_lines": null, "method_info": {"method_name": "checkArgValues", "method_params": "arg,mode,count", "method_startline": "241", "method_endline": "246"}}, "hunk_1": {"Ismethod": 1, "added_lines": "303,307,311", "deleted_lines": null, "method_info": {"method_name": "ParseArgs", "method_params": "argc,argv,lang,image,outputbase,datapath,list_langs,print_parameters,vars_vec,vars_values,arg_i,pagesegmode,enginemode", "method_startline": "249", "method_endline": "339"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "ccstruct\\publictypes.h", "file_new_name": "ccstruct\\publictypes.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "282", "deleted_lines": null}}}}}}