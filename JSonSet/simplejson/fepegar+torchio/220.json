{"BR": {"BR_id": "220", "BR_author": "GFabien", "BRopenT": "2020-07-09T11:58:21Z", "BRcloseT": "2020-07-09T16:18:43Z", "BR_text": {"BRsummary": "Non integer labels in Colin27 2008 version", "BRdescription": "\n \ud83d\udc1bBug\n Class labels in Colin27 dataset, version 2008, are not integer values.\n To reproduce\n from torchio.datasets import Colin27\n colin = Colin27(2008)\n label_values = colin['cls']['data'].unique()\n print(label_values)\n \n >>> tensor([ 0.0000,  0.9882,  2.0235,  3.0118,  4.0000,  4.9882,  6.0235,  7.0118,\n          8.9882, 10.0235, 11.0118, 12.0000])\n Expected behavior\n Label encoding map should only contain integer values.\n TorchIO version\n 0.17.7\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "GFabien", "commentT": "2020-07-09T12:02:36Z", "comment_text": "\n \t\tThanks for reporting, <denchmark-link:https://github.com/GFabien>@GFabien</denchmark-link>\n . This is weird, and I don't think there's much we can do about this. I tried reading the image with ITK and results are the same. I checked the intercept and slope values in the NIfTI header and I found nothing interesting:\n <denchmark-code>scl_slope       : nan\n scl_inter       : nan\n </denchmark-code>\n \n I've been googling with no success. I think that the only solution for now is to round the data in the Colin27 class of the torchio.datasets.mni.colin module.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "GFabien", "commentT": "2020-07-09T12:05:19Z", "comment_text": "\n \t\tI'll check the MINC versions.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "GFabien", "commentT": "2020-07-09T12:08:02Z", "comment_text": "\n \t\t\n I'll check the MINC versions.\n \n I got the same results.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "GFabien", "commentT": "2020-07-09T12:13:55Z", "comment_text": "\n \t\tMight be related to <denchmark-link:https://bartwronski.com/2017/04/02/small-float-formats-r11g11b10f-precision/>Small float formats \u2013 R11G11B10F precision</denchmark-link>\n .\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "GFabien", "commentT": "2020-07-09T12:20:28Z", "comment_text": "\n \t\tIn the NIfTI header it says int16, but for some reason the data is loaded as float64 even when I do\n np.asanyarray(nii.dataobj)\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "GFabien", "commentT": "2020-07-09T12:27:46Z", "comment_text": "\n \t\tmrinfo say there is an intensity scaling\n Data type:         signed 16 bit integer (little endian)\n Intensity scaling: offset = 0, multiplier = 0.047058824449777603\n strange that you do not see the intercept and slope (I thought it was related)\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "GFabien", "commentT": "2020-07-09T12:29:10Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/romainVala>@romainVala</denchmark-link>\n , do you know how/if that multiplier is meant to be used?\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "GFabien", "commentT": "2020-07-09T12:30:49Z", "comment_text": "\n \t\tFrom nibabel:\n image.dataobj.slope\n >>> 0.0470588244497776\n But also from nibabel:\n nib.analyze.get_slope_inter(image)\n >>> (1.0, 0.0)\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "GFabien", "commentT": "2020-07-09T12:34:24Z", "comment_text": "\n \t\tNote that this is a NIfTI image, not analyze:\n nii.header.get_slope_inter()\n >>> (None, None)\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "GFabien", "commentT": "2020-07-09T12:35:38Z", "comment_text": "\n \t\tSome more info about this stuff, for reference: <denchmark-link:https://nipy.org/nibabel/nifti_images.html#data-scaling>https://nipy.org/nibabel/nifti_images.html#data-scaling</denchmark-link>\n \n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "GFabien", "commentT": "2020-07-09T12:38:34Z", "comment_text": "\n \t\t\n In the NIfTI header it says int16, but for some reason the data is loaded as float64\n \n I suspect this happens because there are values for intercept and slope in the original file, so the data is cast to float when multiplying.\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "GFabien", "commentT": "2020-07-09T12:39:36Z", "comment_text": "\n \t\tMaybe those values shouldn't be there in the first place. I'll try modifying the file directly to remove these values and loading it with nibabel.\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "GFabien", "commentT": "2020-07-09T14:23:18Z", "comment_text": "\n \t\tI removed the slope from the file\n In [7]: with open('colin27_cls_tal_hires.nii', 'rb+') as f:\n    ...:     f.seek(116)  # address of intercept, which I know is 0\n    ...:     data = f.read(4)  # stored in float32 so 4 bytes\n    ...:     f.seek(112)  # address of slope\n    ...:     f.write(data)  # actually this should have been 1, but it looks like nibabel uses a 1 if it finds a 0\n    ...:\n and the values are now\n In [14]: np.unique(lm)\n Out[14]:\n array([  0,  21,  43,  64,  85, 106, 128, 149, 191, 213, 234, 255],\n       dtype=int16)\n Indeed to get 12 from 255 you need to multiply by 12/255 = 0.047058823529411764, which is the intercept stored in the header. However, 234 * 0.047058823529411764 = 11.0118. It looks like, for some reason, someone decided to store the labels from 0 to 255 for some reason, and adding a slope. Maybe this worked with the software they use at the MNI because the labels are rounded after reading.\n I think the best for now is just rounding the values ourselves when reading the CLS image.\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "GFabien", "commentT": "2020-07-09T14:51:20Z", "comment_text": "\n \t\t(I edited this comment, forgot to add the returned values: <denchmark-link:https://github.com/fepegar/torchio/issues/220#issuecomment-656100610>#220 (comment)</denchmark-link>\n )\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "GFabien", "commentT": "2020-07-09T16:20:05Z", "comment_text": "\n \t\tFixed (hacked) in v0.17.9. Thanks for reporting and investigating! I'm going to email the person in charge of the atlas to ask about this.\n \t\t"}}}, "commit": {"commit_id": "221ba0e40e5302db8c9d7d961188a68e3d6b5f3d", "commit_author": "Fernando P\u00e9rez-Garc\u00eda", "commitT": "2020-07-09 17:18:43+01:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "torchio\\data\\image.py", "file_new_name": "torchio\\data\\image.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "249,250", "deleted_lines": null, "method_info": {"method_name": "load", "method_params": "self", "method_startline": "238", "method_endline": "267"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "torchio\\datasets\\mni\\colin.py", "file_new_name": "torchio\\datasets\\mni\\colin.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "40,41,42,43,44,45", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,version", "method_startline": "24", "method_endline": "67"}}}}}}}