{"BR": {"BR_id": "1563", "BR_author": "reuben", "BRopenT": "2018-09-19T16:57:29Z", "BRcloseT": "2018-09-28T07:14:38Z", "BR_text": {"BRsummary": "Non-deterministic output with the streaming model", "BRdescription": "\n Example:\n <denchmark-code>./deepspeech --model ~/Development/DeepSpeech/1300_export/output_graph.pbmm --alphabet ~/Development/DeepSpeech/data/alphabet.txt --lm ~/Development/DeepSpeech/data/lm/lm.binary --trie ~/Development/DeepSpeech/data/lm/trie --audio audio/repeat\n TensorFlow: v1.6.0-18-g50214731ea\n DeepSpeech: unknown\n 2018-09-19 13:54:04.607023: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n Running on directory audio/repeat\n > audio/repeat/16.wav\n why should one hall on the dway\n > audio/repeat/17.wav\n why should one hall on the dway\n > audio/repeat/15.wav\n why should one hall on the dway\n > audio/repeat/29.wav\n why should one hall on the dway\n > audio/repeat/28.wav\n why should one hall on the dway\n > audio/repeat/14.wav\n why should one hall on the dway\n > audio/repeat/10.wav\n why should one hall on the dway\n > audio/repeat/11.wav\n why should one hall on the dway\n > audio/repeat/13.wav\n why should one hall on the dway\n > audio/repeat/12.wav\n why should one hall to on the way'\n > audio/repeat/9.wav\n why should one hall on the dway\n > audio/repeat/8.wav\n why should one hall on the dway\n > audio/repeat/6.wav\n why should one hall on the dway\n > audio/repeat/7.wav\n why should one hall on the dway\n > audio/repeat/5.wav\n why should one hall on the dway\n > audio/repeat/4.wav\n why should one halt on the way'\n > audio/repeat/1.wav\n why should one hall on the dway\n > audio/repeat/3.wav\n why should one hall on the dway\n > audio/repeat/2.wav\n why should one hall on the way'\n > audio/repeat/23.wav\n why should one hall on the dway\n > audio/repeat/22.wav\n why should one hall on the dway\n > audio/repeat/20.wav\n why should one hall on the dway\n > audio/repeat/21.wav\n why should one hall on the dway\n > audio/repeat/19.wav\n why should one hall on the dway\n > audio/repeat/25.wav\n why should one halt on the way'\n > audio/repeat/24.wav\n why should one hall on the dway\n > audio/repeat/30.wav\n why should one halt on the way'\n > audio/repeat/18.wav\n why should one hall on the dway\n > audio/repeat/26.wav\n why should one hall to on the way'\n > audio/repeat/27.wav\n why should one hall on the dway\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "reuben", "commentT": "2018-09-19T23:28:32Z", "comment_text": "\n \t\t./deepspeech --model ~/Development/DeepSpeech/1300_export/output_graph.pbmm --alphabet ~/Development/DeepSpeech/data/alphabet.txt --lm ~/Development/DeepSpeech/data/lm/lm.binary --trie ~/Development/DeepSpeech/data/lm/trie --audio audio/repeat\n TensorFlow: v1.6.0-18-g50214731ea\n DeepSpeech: unknown\n 2018-09-19 13:54:04.607023: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n Running on directory audio/repeat\n \n audio/repeat/16.wav\n why should one hall on the dway\n audio/repeat/17.wav\n why should one hall on the dway\n audio/repeat/15.wav\n why should one hall on the dway\n audio/repeat/29.wav\n why should one hall on the dway\n audio/repeat/28.wav\n why should one hall on the dway\n audio/repeat/14.wav\n why should one hall on the dway\n audio/repeat/10.wav\n why should one hall on the dway\n audio/repeat/11.wav\n why should one hall on the dway\n audio/repeat/13.wav\n why should one hall on the dway\n audio/repeat/12.wav\n why should one hall to on the way'\n audio/repeat/9.wav\n why should one hall on the dway\n audio/repeat/8.wav\n why should one hall on the dway\n audio/repeat/6.wav\n why should one hall on the dway\n audio/repeat/7.wav\n why should one hall on the dway\n audio/repeat/5.wav\n why should one hall on the dway\n audio/repeat/4.wav\n why should one halt on the way'\n audio/repeat/1.wav\n why should one hall on the dway\n audio/repeat/3.wav\n why should one hall on the dway\n audio/repeat/2.wav\n why should one hall on the way'\n audio/repeat/23.wav\n why should one hall on the dway\n audio/repeat/22.wav\n why should one hall on the dway\n audio/repeat/20.wav\n why should one hall on the dway\n audio/repeat/21.wav\n why should one hall on the dway\n audio/repeat/19.wav\n why should one hall on the dway\n audio/repeat/25.wav\n why should one halt on the way'\n audio/repeat/24.wav\n why should one hall on the dway\n audio/repeat/30.wav\n why should one halt on the way'\n audio/repeat/18.wav\n why should one hall on the dway\n audio/repeat/26.wav\n why should one hall to on the way'\n audio/repeat/7.htc\n why should one hall on the dway\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "reuben", "commentT": "2018-09-20T05:15:53Z", "comment_text": "\n \t\tAnother data point, but this time in the opposite direction.\n Compiled v0.2.0 on Ubuntu 16.04, Deep Learning base image from AWS + Dockerfile, and ran the native client 80 times over the 8455-210777-0068.wav example audio, each time obtaining the same result.\n So maybe it's the wrapping of the native code in Python, Node, or Rust? Or maybe it's some mismatch between the target platform and the platform the code was compiled for?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "reuben", "commentT": "2018-09-20T13:50:13Z", "comment_text": "\n \t\tI've disabled using the LM decoder in the prod tests as we were getting intermittent failures, we should go back to using the LM there when this is fixed.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "reuben", "commentT": "2018-09-25T18:14:18Z", "comment_text": "\n \t\t\n I've disabled using the LM decoder in the prod tests as we were getting intermittent failures, we should go back to using the LM there when this is fixed.\n \n FTR, there is still some intermittence even after disabling the LM. It looks less frequent, though.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "reuben", "commentT": "2018-09-26T10:43:36Z", "comment_text": "\n \t\tUpdate: looking at retriggers failures on <denchmark-link:https://tools.taskcluster.net/groups/UgiKCb1TSYuMCy0waX5o-g>https://tools.taskcluster.net/groups/UgiKCb1TSYuMCy0waX5o-g</denchmark-link>\n , it would looks like only NodeJS and Python prod are impacted.\n C++, NodeJS and Python prod tests are all using the LM through the same run_prod_inference_tests function. Though, as much as I can tell, in all of the failures reported in the above link, it is when we test the inference on the 44kHz to 16kHz downsampling.\n C++ links directly to libsox while NodeJS and Python more or less relies on stdout of sox binary. Maybe there is a slight variation and it triggers intermittence. At that point, I'm starting to think that the TaskCluster intermittence is unrelated to the one reported here because of the LM ?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "reuben", "commentT": "2018-09-26T16:34:54Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/kdavis-mozilla>@kdavis-mozilla</denchmark-link>\n  I have been able to reproduce locally with v0.2.0 C++ binaries and the use of LM, so if there's anything, it's unrelated to Python, Node or Rust and it's lower-level.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "reuben", "commentT": "2018-09-26T17:41:46Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  As an addendum to my comment. I ran the native client 80 times. But each time I restarted the client. I did not pass a directory full of wav files to the client.\n <denchmark-link:https://github.com/reuben>@reuben</denchmark-link>\n  on the other hand passed a directory to the client so his client was never restarted. So it seems there is some language model state that is not properly \"re-set\" when multiple wav file are decoded in a single client run.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "reuben", "commentT": "2018-09-27T04:49:07Z", "comment_text": "\n \t\t\n @lissyx As an addendum to my comment. I ran the native client 80 times. But each time I restarted the client. I did not pass a directory full of wav files to the client.\n \n Yep, that could be consistent, I did reproduce on a full directory pass, and this was after the 95th iteration.\n i'll go and play with RR now that the TaskCluster issue has been addressed and we know it's unrelated.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "reuben", "commentT": "2018-09-27T09:29:11Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mozilla/DeepSpeech/files/2423393/deepspeech.valgrind.log>deepspeech.valgrind.log</denchmark-link>\n \n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "reuben", "commentT": "2018-09-27T11:45:42Z", "comment_text": "\n \t\tI'm still reproducing even with the patches from <denchmark-link:https://github.com/mozilla/DeepSpeech/pull/1600>#1600</denchmark-link>\n \n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "reuben", "commentT": "2018-09-27T12:50:36Z", "comment_text": "\n \t\tlooks like <denchmark-link:https://github.com/mozilla/DeepSpeech/issues/1602>#1602</denchmark-link>\n  will do it :)\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "reuben", "commentT": "2018-09-28T07:14:38Z", "comment_text": "\n \t\tFixed by <denchmark-link:https://github.com/mozilla/DeepSpeech/pull/1603>#1603</denchmark-link>\n \n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "reuben", "commentT": "2018-09-28T10:18:53Z", "comment_text": "\n \t\tThanks for the fix!\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "reuben", "commentT": "2019-01-02T16:45:48Z", "comment_text": "\n \t\tThis thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n \t\t"}}}, "commit": {"commit_id": "25ed3cb31e2227bf68650a9fc27059e377bf89a9", "commit_author": "Alexandre Lissy", "commitT": "2018-09-28 05:10:15+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "native_client\\beam_search.h", "file_new_name": "native_client\\beam_search.h", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "199", "deleted_lines": null, "method_info": {"method_name": "KenLMBeamScorer::CopyState", "method_params": "from,to", "method_startline": "195", "method_endline": "203"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tc-tests-utils.sh", "file_new_name": "tc-tests-utils.sh", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "138,139,140,145,146,147,148,155,156,157", "deleted_lines": "138,143,144,151"}}}}}}