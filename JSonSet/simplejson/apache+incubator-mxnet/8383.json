{"BR": {"BR_id": "8383", "BR_author": "KellenSunderland", "BRopenT": "2017-10-22T08:53:04Z", "BRcloseT": "2018-08-21T13:13:30Z", "BR_text": {"BRsummary": "test_arange failure - Jetson TX2 (CPU)", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n The test test_operator.test_init is consistently failing.\n <denchmark-h:h2>Environment info (Required)</denchmark-h>\n \n Jetson TX2, aarch64, Ubuntu 16.04, Jetpack 3.1 full install.\n <denchmark-code>What to do:\n 1. Flash your Jetson TX2 with Jetpack 3.1, full install. \n 2. Modify make/config.mk to indicate use of Openblas.\n 3. Compile MXNet locally and install.\n 4. Run nosetests --verbose tests/python/unittest\n </denchmark-code>\n \n Package used (Python/R/Scala/Julia):\n Python package, compiled from source.\n <denchmark-h:h2>Build info (Required if built from source)</denchmark-h>\n \n Compiler (gcc/clang/mingw/visual studio):\n gcc\n MXNet commit hash:\n <denchmark-link:https://github.com/apache/incubator-mxnet/commit/050d30452eb7421045bacbc29d27622a96d8aff9>050d304</denchmark-link>\n \n Build config:\n (Paste the content of config.mk, or the build command.)\n Diff with commit:\n -ifeq ($(UNAME_S), Darwin)\n -USE_BLAS = apple\n -else\n -USE_BLAS = atlas\n -endif\n +USE_BLAS = openblas\n <denchmark-h:h2>Error Message:</denchmark-h>\n \n <denchmark-h:h2>======================================================================\n FAIL: test_operator.test_init</denchmark-h>\n \n Traceback (most recent call last):\n File \"/usr/local/lib/python2.7/dist-packages/nose/case.py\", line 197, in runTest\n self.test(*self.arg)\n File \"/home/nvidia/incubator-mxnet-cpu/tests/python/unittest/test_operator.py\", line 2569, in test_init\n test_arange()\n File \"/home/nvidia/incubator-mxnet-cpu/tests/python/unittest/test_operator.py\", line 2564, in test_arange\n assert_almost_equal(np_out, nd_out.asnumpy())\n File \"/home/nvidia/incubator-mxnet-cpu/python/mxnet/test_utils.py\", line 490, in assert_almost_equal\n raise AssertionError(msg)\n AssertionError:\n Items are not equal:\n Error 508000.000000 exceeds tolerance rtol=0.000010, atol=0.000000.  Location of maximum error:(1,), a=48.000000, b=50.000000\n a: array([ 50,  48,  46, ..., 212, 210, 208], dtype=uint8)\n b: array([50, 50, 50, ..., 50, 50, 50], dtype=uint8)\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "KellenSunderland", "commentT": "2017-10-22T17:25:24Z", "comment_text": "\n \t\tMinimal reproducible code:\n import mxnet as mx\n import numpy as np\n \n from mxnet.test_utils import *\n \n dtype = np.uint8\n config = (50, -50, -2)\n np_out = np.arange(*config, dtype=dtype)\n nd_out = mx.nd.arange(*config, dtype=dtype)\n assert_almost_equal(np_out, nd_out.asnumpy())\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "KellenSunderland", "commentT": "2017-10-22T17:46:16Z", "comment_text": "\n \t\tI'm not sure if this is a valid test.  It think the desired behaviour is somewhat undefined given that we're trying to create a range with an endpoint of -50 on an unsigned data structure.  It could be possible to at the least duplicate numpy's behaviour here, which seems to be to overflow without throwing an error.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "KellenSunderland", "commentT": "2017-10-22T21:18:39Z", "comment_text": "\n \t\tHere's a print of the relevant output on an OSX build\n <denchmark-code>In [3]: print(np_out)\n [ 50  48  46  44  42  40  38  36  34  32  30  28  26  24  22  20  18  16\n   14  12  10   8   6   4   2   0 254 252 250 248 246 244 242 240 238 236\n  234 232 230 228 226 224 222 220 218 216 214 212 210 208]\n \n In [4]: print(nd_out)\n \n [ 50  48  46  44  42  40  38  36  34  32  30  28  26  24  22  20  18  16\n   14  12  10   8   6   4   2   0 254 252 250 248 246 244 242 240 238 236\n  234 232 230 228 226 224 222 220 218 216 214 212 210 208]\n <NDArray 50 @cpu(0)>\n </denchmark-code>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "KellenSunderland", "commentT": "2018-01-22T00:26:26Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/orgs/apache/teams/mxnet-committers>@apache/mxnet-committers</denchmark-link>\n : This issue has been inactive for the past 90 days. It has no label and needs triage.\n For general \"how-to\" questions, our <denchmark-link:https://discuss.mxnet.io/>user forum</denchmark-link>\n  (and <denchmark-link:https://discuss.gluon.ai/>Chinese version</denchmark-link>\n ) is a good place to get help.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "KellenSunderland", "commentT": "2018-07-19T20:57:08Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/KellenSunderland>@KellenSunderland</denchmark-link>\n  Since numpy has a defined behavior for such inputs I think the test is valid. I also tried this on ubuntu and mac, and both produced same results as numpy. Maybe this is a platform-specific thing? Seems like here: <denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/src/operator/tensor/init_op.h#L449-L452>https://github.com/apache/incubator-mxnet/blob/master/src/operator/tensor/init_op.h#L449-L452</denchmark-link>\n  already has some code to address the signed-unsigned issue. From the outputs I think maybe there's some problem with the step conversion as the each output entry from MXNet arange has the same value 50 which is the start value.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "KellenSunderland", "commentT": "2018-07-19T21:04:48Z", "comment_text": "\n \t\tYeah sorry I thought this issue was closed.  I believe it's been fixed.  Give me some time and I'll verify.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "KellenSunderland", "commentT": "2018-07-19T21:17:09Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/KellenSunderland>@KellenSunderland</denchmark-link>\n  Thanks for your quick response! Please close the issue if the results on your end shows that this has been solved.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "KellenSunderland", "commentT": "2018-08-16T06:58:05Z", "comment_text": "\n \t\tSorry was traveling. Will try to take a look at this one today.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "KellenSunderland", "commentT": "2018-08-21T13:13:30Z", "comment_text": "\n \t\tVerified this was fixed prior to 1.2.  Just did a test on-device.  Closing ...\n \t\t"}}}, "commit": {"commit_id": "c84a2f66eb73b743133bb80d008eef098a264172", "commit_author": "Lanking", "commitT": "2018-06-29 04:57:28-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "scala-package\\core\\src\\test\\scala\\org\\apache\\mxnet\\OperatorSuite.scala", "file_new_name": "scala-package\\core\\src\\test\\scala\\org\\apache\\mxnet\\OperatorSuite.scala", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "22,26,236,237,238", "deleted_lines": "21,23,236,237"}}}}}}