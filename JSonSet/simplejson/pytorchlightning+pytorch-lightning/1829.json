{"BR": {"BR_id": "1829", "BR_author": "williamFalcon", "BRopenT": "2020-05-14T01:52:04Z", "BRcloseT": "2020-05-14T21:56:12Z", "BR_text": {"BRsummary": "Allow boolean flags to work without passing True", "BRdescription": "\n We tried to fix this but it's still broken\n This fails when adding args to argparse automatically...\n <denchmark-code>--auto_lr_find\n </denchmark-code>\n \n Instead we have to do:\n <denchmark-code>--auto_lr_find True\n </denchmark-code>\n \n which is not great\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "williamFalcon", "commentT": "2020-05-14T14:14:42Z", "comment_text": "\n \t\tThis only seems to be a problem with the auto_lr_find flag, since it is the only argument that is a union between the 4 allowed types (str, float, int, bool) in the add_argparse_args. So either this needs to be handled as a special case in the argparser or remove one of its allowed value (str or bool).\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "williamFalcon", "commentT": "2020-05-14T15:10:24Z", "comment_text": "\n \t\tit's a problem for many flags haha. The pattern is bool or the callback or string.\n So, early stopping, checkpoint, etc... all have this problem.\n And for the batch size and lr finder stuff we have a few options\n auto_lr_find=True\n auto_lr_find='some.path'\n But True is getting parsed as a string which breaks everything.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "williamFalcon", "commentT": "2020-05-14T15:11:59Z", "comment_text": "\n \t\tI think we need to solve this before 0.7.6 release as this is causing a lot of unexpected behaviors <denchmark-link:https://github.com/Borda>@Borda</denchmark-link>\n .\n Basically i think we need to:\n \n allow the flag to be passed in with set_true --my_flag (this becomes a bool with True)\n but if there is something else, then treat that thing as a string --my_flag this_is_a_string\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "williamFalcon", "commentT": "2020-05-14T15:25:54Z", "comment_text": "\n \t\tI think that the complication comes with\n \n \n \n pytorch-lightning/pytorch_lightning/trainer/trainer.py\n \n \n          Line 131\n       in\n       236c137\n \n \n \n \n \n \n  auto_lr_find: Union[bool, str] = False, \n \n \n \n \n \n so you cannot in argparse define to be store_true  and optional string at the same time\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "williamFalcon", "commentT": "2020-05-14T15:58:32Z", "comment_text": "\n \t\twell this is the minimal solution\n import argparse\n p = argparse.ArgumentParser()\n p.add_argument(\"--a\", type=str, default=False, nargs=\"?\")\n v = vars(p.parse_args())\n v = {k: True if v is None else v for k, v in v.items()}\n print(v)\n gives:\n \n python sample.py --a  >> {'a': True}\n python sample.py  >> {'a': False}\n python sample.py --a park  >> {'a': 'park'}\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "williamFalcon", "commentT": "2020-05-14T17:29:45Z", "comment_text": "\n \t\tlet's merge this asap for 0.7.6\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "williamFalcon", "commentT": "2020-05-14T17:59:48Z", "comment_text": "\n \t\t\n let's merge this asap for 0.7.6\n \n ready to review... ^^ <denchmark-link:https://github.com/williamFalcon>@williamFalcon</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "bee0392c372936567b2bbe6e7ed5828cb3078354", "commit_author": "Jirka Borovec", "commitT": "2020-05-14 17:56:11-04:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 12, "file_old_name": "pytorch_lightning\\trainer\\trainer.py", "file_new_name": "pytorch_lightning\\trainer\\trainer.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "135", "deleted_lines": "135", "method_info": {"method_name": "__init__", "method_params": "self,LightningLoggerBase,True,ModelCheckpoint,True,EarlyStopping,False,None,None,float,int,int,int,str,None,bool,None,None,int,float,int,int,bool,int,int,1,int,int,None,None,float,float,float,float,int,int,add_row_log_interval,None,int,bool,None,int,None,None,BaseProfiler,None,bool,bool,bool,bool,False,bool,ProgressBarBase,True,bool,None,str,default_save_path,gradient_clip,nb_gpu_nodes,max_nb_epochs,min_nb_epochs,use_amp,show_progress_bar,nb_sanity_val_steps,kwargs", "method_startline": "87", "method_endline": "145"}}, "hunk_1": {"Ismethod": 1, "added_lines": "669,670", "deleted_lines": "669", "method_info": {"method_name": "add_argparse_args.allowed_type", "method_params": "x", "method_startline": "669", "method_endline": "670"}}, "hunk_2": {"Ismethod": 1, "added_lines": "699", "deleted_lines": "703", "method_info": {"method_name": "_allowed_type", "method_params": "x", "method_startline": "699", "method_endline": "703"}}, "hunk_3": {"Ismethod": 1, "added_lines": "705", "deleted_lines": "703", "method_info": {"method_name": "arg_default", "method_params": "x", "method_startline": "703", "method_endline": "707"}}, "hunk_4": {"Ismethod": 1, "added_lines": "705", "deleted_lines": null, "method_info": {"method_name": "_arg_default", "method_params": "x", "method_startline": "705", "method_endline": "709"}}, "hunk_5": {"Ismethod": 1, "added_lines": "135", "deleted_lines": "135", "method_info": {"method_name": "__init__", "method_params": "self,LightningLoggerBase,True,ModelCheckpoint,True,EarlyStopping,False,None,None,float,int,int,int,str,None,bool,None,None,int,float,int,int,bool,int,int,1,int,int,None,None,float,float,float,float,int,int,add_row_log_interval,None,int,bool,None,int,None,None,BaseProfiler,None,bool,bool,bool,bool,False,bool,ProgressBarBase,True,bool,str,False,str,default_save_path,gradient_clip,nb_gpu_nodes,max_nb_epochs,min_nb_epochs,use_amp,show_progress_bar,nb_sanity_val_steps,kwargs", "method_startline": "87", "method_endline": "145"}}, "hunk_6": {"Ismethod": 1, "added_lines": "712,713,714,715,716", "deleted_lines": null, "method_info": {"method_name": "parse_argparser", "method_params": "ArgumentParser", "method_startline": "712", "method_endline": "716"}}, "hunk_7": {"Ismethod": 1, "added_lines": "711,712,713,714,715", "deleted_lines": "710", "method_info": {"method_name": "from_argparse_args", "method_params": "cls,args,kwargs", "method_startline": "710", "method_endline": "715"}}, "hunk_8": {"Ismethod": 1, "added_lines": "676", "deleted_lines": "676,677", "method_info": {"method_name": "add_argparse_args.use_type", "method_params": "x", "method_startline": "676", "method_endline": "677"}}, "hunk_9": {"Ismethod": 1, "added_lines": "719,720,722,723,724,725,726,727,728,729", "deleted_lines": null, "method_info": {"method_name": "from_argparse_args", "method_params": "cls,Namespace,kwargs", "method_startline": "719", "method_endline": "733"}}, "hunk_10": {"Ismethod": 1, "added_lines": "699", "deleted_lines": "697", "method_info": {"method_name": "allowed_type", "method_params": "x", "method_startline": "697", "method_endline": "701"}}, "hunk_11": {"Ismethod": 1, "added_lines": "666,667,668,669,670,671,672,673,674,675,676,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695", "deleted_lines": "666,667,668,669,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,697", "method_info": {"method_name": "add_argparse_args", "method_params": "cls,ArgumentParser", "method_startline": "618", "method_endline": "697"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\trainer\\test_trainer_cli.py", "file_new_name": "tests\\trainer\\test_trainer_cli.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "102,103,104,105,106,107,108,109,110,111,112", "deleted_lines": null, "method_info": {"method_name": "test_argparse_args_parsing", "method_params": "cli_args,expected", "method_startline": "102", "method_endline": "112"}}}}}}}