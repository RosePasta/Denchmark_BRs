{"BR": {"BR_id": "2724", "BR_author": "jpblackburn", "BRopenT": "2020-07-27T14:32:27Z", "BRcloseT": "2020-09-14T08:05:52Z", "BR_text": {"BRsummary": "Issues with Confusion Matrix normalization and DDP computation", "BRdescription": "\n <denchmark-h:h2>\ud83d\udc1b Bug</denchmark-h>\n \n I started using the ConfusionMatrix metric to compute normalized confusion matrices within a mult-GPU DDP environment.  However, I found the following issues:\n \n The normalization divisor is computed correctly in a row-wise manner; however, the division is applied column-wise.\n The normalization does not protect against divide by zero if there is no data in a particular row.  While this is not a usual case for a well-designed validation set, it is possible when you have a large number of unbalanced classes and limit_val_batches is small (such as when debugging).\n There is no way to specify the number of classes for the confusion matrix.  This is critical when performing DDP reduction as it is possible that the automatic computation of the number of classes could produce different answers for each process.  I encountered this possibility when using a large number of unbalanced classes such that one of the DDP processes did not see any true data or declarations of the last class, causing its number of classes to be one less than for the other processes.  This bug sometimes causes the entire training process to hang such that I needed to manually kill each DDP process.\n When computing a normalized confusion matrix with DDP reduction, the sum reduction needs to happen prior to the normalization.\n \n <denchmark-h:h3>To Reproduce</denchmark-h>\n \n As a means to reproduce these issues, I have attached two python scripts.  I had to change the extension to .txt such that they would upload the Github.  The script confusion_matrix.py exposes the first two issues with normalization within a single process.  The script confusion_matrix_ddp.py exposes the final two issues by computing the metric within a model trained using DDP over two GPUs.  For both scripts, they create a 4 class problem with 20 samples unevenly divided among the classes.  The true confusion matrix is computed within the script and printed to standard out, along with the confusion matrix computed by Pytorch Lightning.\n <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/files/4982230/confusion_matrix.py.txt>confusion_matrix.py.txt</denchmark-link>\n \n <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/files/4982231/confusion_matrix_ddp.py.txt>confusion_matrix_ddp.py.txt</denchmark-link>\n \n Steps to reproduce the behavior:\n \n Download both scripts\n Rename them to remove the .txt extension\n ./confusion_matrix.py on a machine with at least 1 GPU.  Compare the true and test confusion matrices.\n ./confusion_matrix_ddp.py on a machine with at least 2 GPUs.  This computes the unnormalized confusion matrix.  Compare the true and test confusion matrices.\n \n WARNING: This may hang the process and require you to manually kill each process.\n \n \n ./confusion_matrix_ddp.py --normalize on a machine with at least 2 GPUs.   This computes the normalized confusion matrix.  Compare the true and test confusion matrices.\n \n WARNING: This may hang the process and require you to manually kill each process.\n \n \n \n <denchmark-h:h3>Expected behavior</denchmark-h>\n \n The computed confusion matrix will be identical to the true confusion matrix printed within the scripts provided above.\n <denchmark-h:h3>Environment</denchmark-h>\n \n \n PyTorch Version (e.g., 1.0):  1.5.1=py3.8_cuda10.2.89_cudnn7.6.5_0\n OS (e.g., Linux):  CentOS\n How you installed PyTorch (conda, pip, source):  conda\n Build command you used (if compiling from source):  NA\n Python version:  3.8.3\n CUDA/cuDNN version:  Conda cudatoolkit=10.2.89=hfd86e86_1\n GPU models and configuration:  GeForce GTX 1070 and GeForce GTX 970\n \n <denchmark-h:h3>Solution</denchmark-h>\n \n I have forked Pytorch Lightning and created fixes for all of these issues:  <denchmark-link:https://github.com/jpblackburn/pytorch-lightning/tree/bugfix/confusion_matrix>https://github.com/jpblackburn/pytorch-lightning/tree/bugfix/confusion_matrix</denchmark-link>\n .  I am willing to turn this into a pull request.\n The solution to the first two issues did not require any major changes.  The third issue required the addition of a new argument to ConfusionMatrix for the number of classes.  It is optional and the final argument, so that the API is backwards compatible.  The fourth issue was most involved as it required modifying ConfusionMatrix to derive from Metric rather than TensorMetric.  It then uses an internal class that drives from TensorMetric.  In this manner, forward delegates the computation of the unnormalized confusion matrix and the DDP reduction to the internal class, performing the normalization itself after the DDP reduction is complete.\n I incrementally fixed the issues for easier understanding:\n \n Issues 1 and 2: 8b8b635\n Issue 3: 83927a9 and 913c1e3\n Issue 4: e3e0743\n \n <denchmark-h:h4>To validate the solution:</denchmark-h>\n \n \n ./confusion_matrix.py on a machine with at least 1 GPU.  Compare the true and test confusion matrices.\n ./confusion_matrix_ddp.py --set-num-classes on a machine with at least 2 GPUs.  Compare the true and test confusion matrices.\n ./confusion_matrix_ddp.py --set-num-classes --normalize on a machine with at least 2 GPUs.   Compare the true and test confusion matrices.\n \n Note the addition of --set-num-classes to the DDP script.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "jpblackburn", "commentT": "2020-07-27T14:33:21Z", "comment_text": "\n \t\tHi! thanks for your contribution!, great first issue!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "jpblackburn", "commentT": "2020-09-12T09:26:27Z", "comment_text": "\n \t\tHi!\n Issue 3 already fixed at <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/pull/3450>#3450</denchmark-link>\n  and Issue 2 under process at <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/pull/3465>#3465</denchmark-link>\n . I'm interested in ConfusionMatrix fix for DDP mode too, so maybe we can collaborate to apply your changes for modern version of source code?\n UPD: As I understand,  for DDP already fixed at <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/pull/2528>#2528</denchmark-link>\n , so there is no need to change it for \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "jpblackburn", "commentT": "2020-09-12T10:46:12Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/c00k1ez>@c00k1ez</denchmark-link>\n  could you also take care of issue 1 in your <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/pull/3465>#3465</denchmark-link>\n  PR?\n Should be a simple change from  to  in the normalization.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "jpblackburn", "commentT": "2020-09-12T10:56:14Z", "comment_text": "\n \t\tYeah, just a moment \ud83d\udc4d\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "jpblackburn", "commentT": "2020-09-12T11:26:04Z", "comment_text": "\n \t\tFix Issue 1  at <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/pull/3465>#3465</denchmark-link>\n  (commit <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/commit/fd19c78879e17198282cdc29317405dde5fdf96a>fd19c78</denchmark-link>\n ).\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "jpblackburn", "commentT": "2020-09-14T09:31:50Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/SkafteNicki>@SkafteNicki</denchmark-link>\n  As I remember, <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/pull/3465>#3465</denchmark-link>\n  do not solve issue 4\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "jpblackburn", "commentT": "2020-09-14T10:45:40Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/c00k1ez>@c00k1ez</denchmark-link>\n  you are correct, it was auto closed when <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/pull/3465>#3465</denchmark-link>\n  was merged. However, I do have a fix for this, hope to do it soon (write to me on slack if you want to take over)\n \t\t"}}}, "commit": {"commit_id": "a552d4a2d5056705c68f2eed570a83ee3160b3bc", "commit_author": "Cookie_thief", "commitT": "2020-09-14 10:05:51+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "pytorch_lightning\\metrics\\functional\\classification.py", "file_new_name": "pytorch_lightning\\metrics\\functional\\classification.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "315,316,317,318,319", "deleted_lines": "315"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\metrics\\functional\\test_classification.py", "file_new_name": "tests\\metrics\\functional\\test_classification.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "190,191,192,193,194,195,196,197,198", "deleted_lines": null, "method_info": {"method_name": "test_confusion_matrix", "method_params": "", "method_startline": "174", "method_endline": "198"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\metrics\\test_classification.py", "file_new_name": "tests\\metrics\\test_classification.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "59,60,61,62,63,64,65,66,67,68", "deleted_lines": null, "method_info": {"method_name": "test_confusion_matrix_norm", "method_params": "normalize,num_classes", "method_startline": "59", "method_endline": "68"}}}}}}}