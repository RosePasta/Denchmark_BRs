{"BR": {"BR_id": "1937", "BR_author": "awaelchli", "BRopenT": "2020-05-24T23:28:26Z", "BRcloseT": "2020-08-08T03:26:06Z", "BR_text": {"BRsummary": "TODO list for \"replace Hparams by init args\" PR", "BRdescription": "\n <denchmark-h:h2>\ud83d\ude80 TODO: Follow up work on module arguments rework in #1896</denchmark-h>\n \n \n \n  1. (docs) Make clear the multiple ways args can and cannot be passed in.\n Example:\n  class LitModel(LightningModule):\n     def __init__(self, arg1, arg2):\n      ...\n  Trainer.add_argparse_args(parser)\n  LitModel.add_model_specific_args(parser)\n  LitModel(parser.parse_args())  # this will fail\n This won't work since the list of arguments in constructor is a fixed size.\n We can fix it in two ways:\n \n Add **kwargs to the init signature to catch any unnecessary args (not good design but works)\n Split the parsers to separate model args from Trainer args\n \n \n \n  2. (docs) make it clear which types we save to the checkpoints and which not (nn.Module for example). The name \"module_arguments\" maybe misleading to believe all args are saved.\n \n \n  3. Some old code was left commented, including tests, as mentioned by @yukw777\n \n \n  4.  (tests) The model checkpointing has changed, we should thoroughly test that the correct args are loaded.\n \n \n  5. (tests) Test case for positional args\n \n \n  6. (bugfix) Fix for when super() is not called or called after other local vars were added, e.g.,\n  class LitModel(LightningModule):\n     def __init__(self, arg1, arg2):\n         my_local_var = 2\n         super().__init__()\n         # module_arguments now contains \"my_local_var\"\n  \n  LitModel.load_from_checkpoint(...)  # this fails\n  # TypeError: __init__ got an unexpected argument \"my_local_var\"\n We obviously don't want any local vars other than the arguments in the checkpoint.\n \n \n  7. (bugfix) In Python we are not forced to call the instance \"self\", this is currently hardcoded and leads to:\n  class LitModel(LightningModule):\n     def __init__(obj, arg1, arg2):\n         obj.arg1 = arg1\n         super().__init__()\n         # module_arguments will contain LitModel() itself\n same applies to the conventional naming of \"*args\" and \"**kwargs\"\n \n \n  8. (tests) make sure the LRfinder still works as expected by passing in the suggested learning rate as argument (fixed in #2821 )\n \n \n  9. (enhancement) @festeh wants to add support for dataclasses\n \n \n  10. (bugfix) some of the examples are broken because of the problem mentioned in 1.\n \n \n  11. (test) multiple inheritance\n \n \n  12. Should error or warn when self.auto_collect_arguments() is called somewhere other than in init. A specific use case that is currently not working is #1976\n \n \n Feel free to add additional bullet points I missed :)\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "awaelchli", "commentT": "2020-05-25T05:46:22Z", "comment_text": "\n \t\tWe should also make sure, that the current hparams will always be supported. There are definitely usecases where hparams are not suitable.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "awaelchli", "commentT": "2020-05-25T06:50:47Z", "comment_text": "\n \t\t\n We should also make sure, that the current hparams will always be supported. There are definitely usecases where hparams are not suitable.\n \n they are as Namespace and dict are in allowed primitives\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "awaelchli", "commentT": "2020-05-25T06:55:28Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/Borda>@Borda</denchmark-link>\n  yes, but to make sure, I'd prefer to have an explicit test for this :)\n Since we should really take care of backwards compatibility.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "awaelchli", "commentT": "2020-05-25T07:23:15Z", "comment_text": "\n \t\t\n @Borda yes, but to make sure, I'd prefer to have an explicit test for this :)\n Since we should really take care of backwards compatibility.\n \n Sure, agree, mind draw the test in PR and I will finish it / ensure the compatibility =)\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "awaelchli", "commentT": "2020-05-25T11:01:32Z", "comment_text": "\n \t\t\n  class LitModel(LightningModule):\n     def __init__(self, arg1, arg2):\n      ...\n  Trainer.add_argparse_args(parser)\n  LitModel(parser.pase_args())  # this will fail\n \n <denchmark-link:https://github.com/awaelchli>@awaelchli</denchmark-link>\n  Just for clarification: this will not fail because you have a typo in , but because the call is not supported, right?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "awaelchli", "commentT": "2020-05-25T11:04:59Z", "comment_text": "\n \t\tyes exactly, it will fail because the argparser has many more args than just arg1, arg2.\n I will fix the typo.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "awaelchli", "commentT": "2020-06-16T14:16:46Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/awaelchli>@awaelchli</denchmark-link>\n  let's update the list with respect to what has been done...\n <denchmark-link:https://github.com/edenlightning>@edenlightning</denchmark-link>\n  mind help?\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "awaelchli", "commentT": "2020-08-03T18:45:20Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/awaelchli>@awaelchli</denchmark-link>\n  whats left here?\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "awaelchli", "commentT": "2020-08-03T18:58:07Z", "comment_text": "\n \t\tI think most of the points are outdated, much has changed. I think we can close it and track any remaining issues via reported bugs.  Although I think testing of the \"save_hyperparameters\" feature could be more thorough in general (bullet points 5., 8., 11)\n \t\t"}}}, "commit": {"commit_id": "4234992302608e1999c00b4faffac591fb537a34", "commit_author": "Adrian W\u00e4lchli", "commitT": "2020-06-04 08:35:50-04:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "CHANGELOG.md", "file_new_name": "CHANGELOG.md", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "79,80,81,82", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "pytorch_lightning\\core\\lightning.py", "file_new_name": "pytorch_lightning\\core\\lightning.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1722,1723,1724,1725,1726,1727,1728", "deleted_lines": "1727,1728,1729,1730,1731,1732,1733,1734,1735", "method_info": {"method_name": "module_arguments", "method_params": "self", "method_startline": "1721", "method_endline": "1735"}}, "hunk_1": {"Ismethod": 1, "added_lines": "1744,1745,1746,1747,1748,1749", "deleted_lines": "1744,1745,1746,1747,1748,1749", "method_info": {"method_name": "_get_latest_child", "method_params": "frame,object", "method_startline": "1744", "method_endline": "1749"}}, "hunk_2": {"Ismethod": 1, "added_lines": "1701,1702,1703,1704,1705,1706,1710,1713,1714,1715,1716,1718", "deleted_lines": "1701,1702,1706,1709,1710,1712,1716", "method_info": {"method_name": "auto_collect_arguments", "method_params": "self", "method_startline": "1701", "method_endline": "1718"}}, "hunk_3": {"Ismethod": 1, "added_lines": "1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767", "deleted_lines": "1742,1743,1744,1745,1746,1747,1748,1749", "method_info": {"method_name": "_collect_init_args", "method_params": "frame,list", "method_startline": "1738", "method_endline": "1772"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "tests\\models\\test_hparams.py", "file_new_name": "tests\\models\\test_hparams.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "73,74,75,76,77,78", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "obj,more_args,other_arg,more_kwargs", "method_startline": "73", "method_endline": "78"}}, "hunk_1": {"Ismethod": 1, "added_lines": "141,142,143,144,145", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,arg1,arg2,args,kwargs", "method_startline": "141", "method_endline": "145"}}, "hunk_2": {"Ismethod": 1, "added_lines": "163,164,165,166,167,168", "deleted_lines": null, "method_info": {"method_name": "test_collect_init_arguments_with_local_vars", "method_params": "cls", "method_startline": "163", "method_endline": "168"}}, "hunk_3": {"Ismethod": 1, "added_lines": "47", "deleted_lines": "48,49,50,51,52,53,54", "method_info": {"method_name": "test_omegaconf", "method_params": "tmpdir", "method_startline": "47", "method_endline": "64"}}}}}}}