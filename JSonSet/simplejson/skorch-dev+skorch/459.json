{"BR": {"BR_id": "459", "BR_author": "gillesdami", "BRopenT": "2019-04-18T09:53:22Z", "BRcloseT": "2019-05-02T17:36:54Z", "BR_text": {"BRsummary": "incompatibility of skorch.callbacks.TrainEndCheckpoint with sklearn.compose.TransformedTargetRegressor", "BRdescription": "\n skorch version: 0.5.0.post0\n Minimal example inspired from the docs:\n import numpy as np\n from sklearn.compose import TransformedTargetRegressor\n from sklearn.datasets import make_classification\n from sklearn.preprocessing import StandardScaler\n from skorch.callbacks import TrainEndCheckpoint\n from skorch import NeuralNetClassifier\n from torch import nn\n \n X, y = make_classification(1000, 10, n_informative=5, random_state=0)\n X = X.astype(np.float32)\n y = y.astype(np.int64)\n \n class MyModule(nn.Sequential):\n     def __init__(self, num_units=10):\n         super().__init__(\n             nn.Linear(10, num_units),\n             nn.ReLU(inplace=True),\n             nn.Dropout(0.2),\n             nn.Linear(num_units, 10),\n             nn.Linear(10, 2),\n             nn.Softmax(dim=-1)\n         )\n \n train_end_cp = TrainEndCheckpoint(dirname='exp1', fn_prefix='train_end_')\n net = NeuralNetClassifier(\n     MyModule, lr=0.5, callbacks=[train_end_cp]\n )\n \n net = TransformedTargetRegressor(net, func=lambda x: x, inverse_func=lambda x: x)\n \n _ = net.fit(X, y)\n error returned:\n <denchmark-code>Traceback (most recent call last):\n   File \"test.py\", line 31, in <module>\n     _ = net.fit(X, y)\n   File \"/home/damien/.local/lib/python3.6/site-packages/sklearn/compose/_target.py\", line 198, in fit\n     self.regressor_ = clone(self.regressor)\n   File \"/home/damien/.local/lib/python3.6/site-packages/sklearn/base.py\", line 64, in clone\n     new_object_params[name] = clone(param, safe=False)\n   File \"/home/damien/.local/lib/python3.6/site-packages/sklearn/base.py\", line 52, in clone\n     return estimator_type([clone(e, safe=safe) for e in estimator])\n   File \"/home/damien/.local/lib/python3.6/site-packages/sklearn/base.py\", line 52, in <listcomp>\n     return estimator_type([clone(e, safe=safe) for e in estimator])\n   File \"/home/damien/.local/lib/python3.6/site-packages/sklearn/base.py\", line 65, in clone\n     new_object = klass(**new_object_params)\n TypeError: __init__() got an unexpected keyword argument 'monitor\n </denchmark-code>\n \n explanation:\n For some reason, sklearn will make a copy of the callbacks when using TransformedTargetRegressor. However they does not respect the BaseEstimator specs.\n fix:\n The callbacks classes inherited from Callback should have **args in their __init__ function to ensure that they accept all Callback.__init__ parameters.\n May I open a PR ?\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "gillesdami", "commentT": "2019-04-19T14:42:31Z", "comment_text": "\n \t\tThanks for reporting the bug. I believe the solution would not be optimal, it is better to be explicit about parameters in this case.\n There are 3 parameters missing from TrainEndCheckpoint.__init__, target, monitor, and event_name. They are not there because they are not needed but at the same time, they should be there because TrainEndCheckpoint inherits from Checkpoint.\n The solution would be either to add these parameters with the new defaults -- but it would not really make sense to have them on TrainEndCheckpoint -- or to move the common functionality out of Checkpoint, so that it can be recycled without inheritance -- but this would require the functions to have a lot of parameters.\n I don't have a strong preference, what do others think? <denchmark-link:https://github.com/gillesdami>@gillesdami</denchmark-link>\n  If you would like to work on one of the solutions, or a better one, go ahead.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "gillesdami", "commentT": "2019-04-23T18:12:36Z", "comment_text": "\n \t\tI think adding a **kwargs to TrainEndCheckpoint (with a comment) would be the cleanest fix.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "gillesdami", "commentT": "2019-04-24T07:59:54Z", "comment_text": "\n \t\tAdding explicitly target, monitor and event_name would confuse everyone. In my opinion, we should add **kwargs or refactor the code to avoid inheritance.\n I'd be happy to work on a solution, I'll open a PR once we've chosen the way to go.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "gillesdami", "commentT": "2019-04-25T22:08:07Z", "comment_text": "\n \t\tThe reason why I would avoid **kwargs if possible is that it can be confusing to the user as well (what happens with those kwargs?) and because they silently swallow typos of correct arguments. Furthermore, sklearn discourages the use of **kwargs during init.\n Another solution would be to add the three missing parameters but make a check that their values are what is needed (this check would ideally also work after a set_params). Otherwise, I prefer the refactoring approach, though that is probably the most difficult one to get right.\n \t\t"}}}, "commit": {"commit_id": "17256a1325ea463003a0e927a09a11065dc0b21a", "commit_author": "Thomas J Fan", "commitT": "2019-05-02 19:36:53+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "CHANGES.md", "file_new_name": "CHANGES.md", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "31", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "skorch\\callbacks\\training.py", "file_new_name": "skorch\\callbacks\\training.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "699,700,702,703,704,705,706,707,709,710", "deleted_lines": "699,701,702,703,704,705,708,709", "method_info": {"method_name": "initialize", "method_params": "self", "method_startline": "699", "method_endline": "710"}}, "hunk_1": {"Ismethod": 1, "added_lines": "713,714", "deleted_lines": null, "method_info": {"method_name": "on_train_end", "method_params": "self,net,kwargs", "method_startline": "712", "method_endline": "714"}}, "hunk_2": {"Ismethod": 1, "added_lines": "704,705", "deleted_lines": "704,705", "method_info": {"method_name": "on_epoch_end", "method_params": "self,net,kwargs", "method_startline": "704", "method_endline": "705"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "skorch\\tests\\callbacks\\test_training.py", "file_new_name": "skorch\\tests\\callbacks\\test_training.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "896,897,898,899", "deleted_lines": null, "method_info": {"method_name": "test_cloneable", "method_params": "self,finalcheckpoint_cls", "method_startline": "896", "method_endline": "899"}}}}}}}