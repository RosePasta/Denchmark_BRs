{"BR": {"BR_id": "578", "BR_author": "Randl", "BRopenT": "2017-02-14T17:43:00Z", "BRcloseT": "2017-04-30T21:57:44Z", "BR_text": {"BRsummary": "Misused comma operator in serialization test", "BRdescription": "\n In <denchmark-link:https://github.com/tiny-dnn/tiny-dnn/blob/master/test/test_serialization.h#L408>https://github.com/tiny-dnn/tiny-dnn/blob/master/test/test_serialization.h#L408</denchmark-link>\n \n s1 << (f2, f3) << c4;\n intends to connect both f2 and f3 to s1 and c4, but it actually connects only f3 (this is how comma operator works).\n Solution proposed by <denchmark-link:https://github.com/edgarriba>@edgarriba</denchmark-link>\n  is to use a dynamic array (probably initialization list would work nice here: ) instead.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "Randl", "commentT": "2017-02-24T20:55:47Z", "comment_text": "\n \t\tIs there no solution to this? I'm having the same problem with a multi-input graph network. When I use the concat/add layer it ends up connecting to only one, and then depending on the order I declare the inputs in the construct_graph it makes two different nets.\n Also, this seems to work differently in different contexts. With a smaller net it worked for some reason.\n I tried the solution proposed in the OP but it didn't compile for me (error: expected \u2018;\u2019 before \u2018}\u2019 token). Also tried connecting separately in different lines, but it threw an exception on run-time\n For clarity I'm attaching the gif's from the graph_visualizer of two cases:\n \n success.gif - from the smaller net in which the concat layer actually worked\n \n <denchmark-link:https://cloud.githubusercontent.com/assets/4400081/23319985/9e8e22f2-fab7-11e6-8999-c75d0da232b5.gif></denchmark-link>\n \n Code for this network:\n <denchmark-code>\n   input_layer i1(shape3d(2,1,1));\n   fully_connected_layer<activation::tan_h> fc1(2, 4);\n   i1 << fc1;\n \n   input_layer i2(shape3d(1,1,1));\n   fully_connected_layer<activation::tan_h> fc2(1,4);\n   i2 << fc2;\n \n   concat_layer cc({shape3d(4,1,1), shape3d(4,1,1)});\n   (fc1, fc2) << cc;\n \n   fully_connected_layer<softmax> out(8,1);\n \n   cc << out;\n \n   construct_graph(nn, {&i2, &i1}, {&out});\n </denchmark-code>\n \n 2 an 3) separated1.gif and separated2.gif - from the big net where it didn't work\n <denchmark-link:https://cloud.githubusercontent.com/assets/4400081/23320253/b565ae2c-fab8-11e6-9fd6-1a9e143ebfa6.gif></denchmark-link>\n \n <denchmark-link:https://cloud.githubusercontent.com/assets/4400081/23320268/c1ed6612-fab8-11e6-8dc1-ec90311e9192.gif></denchmark-link>\n \n Code for this (these?) network(s):\n <denchmark-code>  const serial_size_t n_fmaps  = 8;  ///< number of feature maps for upper layer\n   const serial_size_t n_fmaps2 = 16;  ///< number of feature maps for lower layer\n   const serial_size_t n_fc     = 16;  ///< number of hidden units in fully-connected layer\n \n   //Deep model\n   input_layer i1(shape3d(32, 32, 3));\n   convolutional_layer<activation::relu> cl1(32, 32, 5, 3, n_fmaps, padding::same);\n   convolutional_layer<activation::relu> cl2(32, 32, 2, n_fmaps, n_fmaps, padding::valid, true, 2, 2);\n   convolutional_layer<activation::relu> cl3(16, 16, 2, n_fmaps, n_fmaps, padding::valid, true, 2, 2);\n   convolutional_layer<activation::relu> cl4(8, 8, 2, n_fmaps, n_fmaps2, padding::valid, true, 2, 2);\n   fully_connected_layer<activation::identity> fc1(4 * 4 * n_fmaps2, n_fc);\n \n   i1 << cl1 << cl2 << cl3 << cl4 << fc1;\n \n   //Wide model \n   input_layer i2(shape3d(2, 1, 1));\n   fully_connected_layer<tan_h> fc2(2, n_fc);\n \n   i2 << fc2;\n \n   //Combine\n   concat_layer cc({shape3d{n_fc, 1, 1}, shape3d{n_fc, 1, 1}});\n   (fc1, fc2) << cc;\n \n   //Output\n   fully_connected_layer<softmax> out(n_fc * 2, 10);\n   cc << out;\n \n   construct_graph(nn1, {&i1, &i2}, {&out}); //separated1\n   construct_graph(nn2, {&i2, &i1}, {&out}); //separated2\n </denchmark-code>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "Randl", "commentT": "2017-02-25T19:04:32Z", "comment_text": "\n \t\tYou probably might need to dig in the code. Some hints where you could find the issue\n <denchmark-link:https://github.com/tiny-dnn/tiny-dnn/blob/master/tiny_dnn/node.h#L172-193>https://github.com/tiny-dnn/tiny-dnn/blob/master/tiny_dnn/node.h#L172-193</denchmark-link>\n \n This lines of code need a refactor to handle dynamic arrays. Alternatively, we discussed about having a Merge container. The first would will be more direct as a first step though.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "Randl", "commentT": "2017-02-27T00:50:49Z", "comment_text": "\n \t\tFound it! The difference was that in the first case both fully connected layers had the same activation, in the second, one had identity and other tan_h so the expression wasn't recognized as a tuple (node_tuple struct implies that nodes have same type). This seems to be the problem in the serialization test too :)\n I'm a begginer to C++ but I think it would be somewhat simple to extend the struct as to make it more type-agnostic. I'll work on that and let me know if you want me to make a PR later\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "Randl", "commentT": "2017-02-27T04:47:37Z", "comment_text": "\n \t\tOk so this is actually a little bit beyond my skills as a C++ programmer I think.\n Tried changing the functions definitions from\n <denchmark-code>template <typename T>\n node_tuple<T *>\n </denchmark-code>\n \n to\n <denchmark-code>node_tuple<layer *> \n node_tuple<std::shared_ptr<layer>>\n </denchmark-code>\n \n Respectively, but got some error about const in line 231. Whichever way I tried to change it it didnt work (e.g wouldnt compile, would not pass no duplicate symbols test, etc)\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "Randl", "commentT": "2017-03-02T20:58:44Z", "comment_text": "\n \t\tAfter @karandesai-96 finishes decoupling of activations, we will probably can concat tanh with fully_connected to achieve desired result.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "Randl", "commentT": "2017-03-02T21:58:47Z", "comment_text": "\n \t\tGreat! I will leave it to the pros then\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "Randl", "commentT": "2017-04-07T09:14:44Z", "comment_text": "\n \t\tI cannot reproduce this bug in  anymore. I think you guessed it correct <denchmark-link:https://github.com/Abello966>@Abello966</denchmark-link>\n , about the types of members in node_tuple being different. <denchmark-link:https://github.com/Randl>@Randl</denchmark-link>\n  was correct as well, since layers and activations are decoupled, I concatenate them successfully.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "Randl", "commentT": "2017-05-01T01:25:57Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/Abello966>@Abello966</denchmark-link>\n  please pull from latest upstream and test your code, it should work now \n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "Randl", "commentT": "2017-05-01T02:17:44Z", "comment_text": "\n \t\t@karandesai-96 will do! thanks a lot! Hope I could be of some assistance in this\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "Randl", "commentT": "2017-05-01T02:24:53Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/Abello966>@Abello966</denchmark-link>\n  your code snippet and diagram served as a good reference!\n \t\t"}}}, "commit": {"commit_id": "e87931259d4652b6ed71680116798f4dab1df5d6", "commit_author": "Karan Desai", "commitT": "2017-04-30 14:57:43-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "test\\test.cpp", "file_new_name": "test\\test.cpp", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "31", "deleted_lines": null}}}, "file_1": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "test\\test_node.h"}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tiny_dnn\\core\\backend.h", "file_new_name": "tiny_dnn\\core\\backend.h", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "159", "deleted_lines": "159", "method_info": {"method_name": "tiny_dnn::core::backend::set_layer", "method_params": "layer", "method_startline": "159", "method_endline": "159"}}, "hunk_1": {"Ismethod": 1, "added_lines": "159", "deleted_lines": "159", "method_info": {"method_name": "tiny_dnn::core::backend::set_layer", "method_params": "layer", "method_startline": "159", "method_endline": "159"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "tiny_dnn\\layers\\layer.h", "file_new_name": "tiny_dnn\\layers\\layer.h", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "807,808", "deleted_lines": "807,808", "method_info": {"method_name": "tiny_dnn::connect", "method_params": "head,tail,head_index,tail_index", "method_startline": "807", "method_endline": "833"}}, "hunk_1": {"Ismethod": 1, "added_lines": "207", "deleted_lines": "207", "method_info": {"method_name": "tiny_dnn::layer::outputs", "method_params": "", "method_startline": "204", "method_endline": "210"}}, "hunk_2": {"Ismethod": 1, "added_lines": "235", "deleted_lines": "235", "method_info": {"method_name": "tiny_dnn::layer::output", "method_params": "", "method_startline": "230", "method_endline": "239"}}, "hunk_3": {"Ismethod": 1, "added_lines": "803", "deleted_lines": "803", "method_info": {"method_name": "tiny_dnn::layer::get_weight_data", "method_params": "i", "method_startline": "801", "method_endline": "804"}}, "hunk_4": {"Ismethod": 1, "added_lines": "807,808", "deleted_lines": "807,808", "method_info": {"method_name": "tiny_dnn::connect", "method_params": "head,tail,head_index,tail_index", "method_startline": "807", "method_endline": "833"}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tiny_dnn\\network.h", "file_new_name": "tiny_dnn\\network.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "149,150", "deleted_lines": "149,150"}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 22, "file_old_name": "tiny_dnn\\node.h", "file_new_name": "tiny_dnn\\node.h", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "210,211,212,213,214,215,216", "deleted_lines": "210,211,212,213", "method_info": {"method_name": "tiny_dnn::operator < <", "method_params": "lhs,rhs", "method_startline": "210", "method_endline": "216"}}, "hunk_1": {"Ismethod": 1, "added_lines": "139,141,142,143,145", "deleted_lines": "142,144,146", "method_info": {"method_name": "tiny_dnn::node::prev_nodes", "method_params": "", "method_startline": "138", "method_endline": "146"}}, "hunk_2": {"Ismethod": 1, "added_lines": "149,153,156", "deleted_lines": "150,154,157", "method_info": {"method_name": "tiny_dnn::node::next_nodes", "method_params": "", "method_startline": "148", "method_endline": "157"}}, "hunk_3": {"Ismethod": 1, "added_lines": "190,191", "deleted_lines": null, "method_info": {"method_name": "tiny_dnn::operator ,", "method_params": "lhs,rhs", "method_startline": "190", "method_endline": "193"}}, "hunk_4": {"Ismethod": 1, "added_lines": "170,171,172", "deleted_lines": "170,171", "method_info": {"method_name": "tiny_dnn::operator ,", "method_params": "l1,l2", "method_startline": "170", "method_endline": "172"}}, "hunk_5": {"Ismethod": 1, "added_lines": "162,163,165", "deleted_lines": "162,163,164", "method_info": {"method_name": "tiny_dnn::node_tuple::node_tuple", "method_params": "l1,l2", "method_startline": "162", "method_endline": "165"}}, "hunk_6": {"Ismethod": 1, "added_lines": "228,229,230,231", "deleted_lines": "228,229,230,231", "method_info": {"method_name": "tiny_dnn::operator < <", "method_params": "lhs,rhs", "method_startline": "228", "method_endline": "234"}}, "hunk_7": {"Ismethod": 1, "added_lines": "219,220", "deleted_lines": "219,220,221,222", "method_info": {"method_name": "tiny_dnn::operator < <", "method_params": "lhs,rhs", "method_startline": "219", "method_endline": "225"}}, "hunk_8": {"Ismethod": 1, "added_lines": "246,247,248", "deleted_lines": null, "method_info": {"method_name": "tiny_dnn::operator < <", "method_params": "lhs,rhs", "method_startline": "246", "method_endline": "251"}}, "hunk_9": {"Ismethod": 1, "added_lines": "204,205,206,207", "deleted_lines": "201,202,203,204", "method_info": {"method_name": "tiny_dnn::operator < <", "method_params": "lhs,rhs", "method_startline": "201", "method_endline": "207"}}, "hunk_10": {"Ismethod": 1, "added_lines": "237,238,239,240", "deleted_lines": null, "method_info": {"method_name": "tiny_dnn::operator < <", "method_params": "lhs,rhs", "method_startline": "237", "method_endline": "243"}}, "hunk_11": {"Ismethod": 1, "added_lines": "177,178", "deleted_lines": "175,176,177", "method_info": {"method_name": "tiny_dnn::operator ,", "method_params": "l1,l2", "method_startline": "175", "method_endline": "178"}}, "hunk_12": {"Ismethod": 1, "added_lines": "198,199,200", "deleted_lines": "200,201,202", "method_info": {"method_name": "tiny_dnn::operator ,", "method_params": "lhs,rhs", "method_startline": "198", "method_endline": "202"}}, "hunk_13": {"Ismethod": 1, "added_lines": "181,182,183,184", "deleted_lines": "181,182,183", "method_info": {"method_name": "tiny_dnn::operator ,", "method_params": "lhs,rhs", "method_startline": "181", "method_endline": "185"}}, "hunk_14": {"Ismethod": 1, "added_lines": "229,230,231", "deleted_lines": "229,230,231", "method_info": {"method_name": "tiny_dnn::operator < <", "method_params": "lhs,rhs", "method_startline": "229", "method_endline": "234"}}, "hunk_15": {"Ismethod": 1, "added_lines": "188,189,190,191", "deleted_lines": "188,189", "method_info": {"method_name": "tiny_dnn::operator ,", "method_params": "lhs,rhs", "method_startline": "188", "method_endline": "191"}}, "hunk_16": {"Ismethod": 1, "added_lines": "207,208,209,210", "deleted_lines": "209,210", "method_info": {"method_name": "tiny_dnn::operator ,", "method_params": "lhs,rhs", "method_startline": "207", "method_endline": "210"}}, "hunk_17": {"Ismethod": 1, "added_lines": "182,183,184", "deleted_lines": "182,183", "method_info": {"method_name": "tiny_dnn::operator ,", "method_params": "l1,l2", "method_startline": "182", "method_endline": "185"}}, "hunk_18": {"Ismethod": 1, "added_lines": "173,174", "deleted_lines": "174,175", "method_info": {"method_name": "tiny_dnn::operator ,", "method_params": "l1,l2", "method_startline": "173", "method_endline": "175"}}, "hunk_19": {"Ismethod": 1, "added_lines": "254,255,256,257", "deleted_lines": null, "method_info": {"method_name": "tiny_dnn::operator < <", "method_params": "lhs,rhs", "method_startline": "254", "method_endline": "260"}}, "hunk_20": {"Ismethod": 1, "added_lines": "215,216,217,218,219", "deleted_lines": "218,219", "method_info": {"method_name": "tiny_dnn::operator ,", "method_params": "lhs,rhs", "method_startline": "215", "method_endline": "219"}}, "hunk_21": {"Ismethod": 1, "added_lines": "161,162,163", "deleted_lines": "161,162,163,164", "method_info": {"method_name": "tiny_dnn::layer_tuple::layer_tuple", "method_params": "l1,l2", "method_startline": "161", "method_endline": "164"}}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "tiny_dnn\\nodes.h", "file_new_name": "tiny_dnn\\nodes.h", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "575", "deleted_lines": "575,576", "method_info": {"method_name": "tiny_dnn::graph::find_index", "method_params": "nodes,target", "method_startline": "575", "method_endline": "580"}}, "hunk_1": {"Ismethod": 1, "added_lines": "575,581", "deleted_lines": "575,576", "method_info": {"method_name": "tiny_dnn::graph::find_index", "method_params": "nodes,target", "method_startline": "575", "method_endline": "581"}}, "hunk_2": {"Ismethod": 1, "added_lines": "413,414,415,416,421,424", "deleted_lines": "413,414,415,416,421,424", "method_info": {"method_name": "tiny_dnn::graph::construct", "method_params": "input,output", "method_startline": "413", "method_endline": "453"}}, "hunk_3": {"Ismethod": 1, "added_lines": "26", "deleted_lines": "26", "method_info": {"method_name": "cereal::save", "method_params": "ar,v", "method_startline": "26", "method_endline": "35"}}, "hunk_4": {"Ismethod": 1, "added_lines": "26", "deleted_lines": "26", "method_info": {"method_name": "cereal::save", "method_params": "ar,v", "method_startline": "26", "method_endline": "35"}}, "hunk_5": {"Ismethod": 1, "added_lines": "413,414,415,416,421,424", "deleted_lines": "413,414,415,416,421,424", "method_info": {"method_name": "tiny_dnn::graph::construct", "method_params": "input,output", "method_startline": "413", "method_endline": "453"}}}}}}}