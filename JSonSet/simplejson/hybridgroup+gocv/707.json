{"BR": {"BR_id": "707", "BR_author": "Shanduur", "BRopenT": "2020-07-08T13:17:14Z", "BRcloseT": "2020-07-30T15:58:11Z", "BR_text": {"BRsummary": "Mixed Blue and Red colours in gocv.DrawKeyPoints()", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n While performing merge of image and key points with DrawKeyPoints, I am receiving unexpected result. While the RGBA{} definition seems okay, and I am doing everything as in the docs, I am getting result in Blue instead of Red (screenshot is presented below). As I investigated, it MIGHT be connected with different colour definitions in OpenCV - there is used BGRA instead of RGBA in the OpenCV.\n <denchmark-h:h2>Steps to Reproduce</denchmark-h>\n \n \n Start new project, create simple program loading photo and performing SIFT:\n \n package main\n \n import (\n \t\"gocv.io/x/gocv\"\n \t\"gocv.io/x/gocv/contrib\"\n \t\"image/color\"\n )\n \n func main() {\n \twindow := gocv.NewWindow(\"Example\")\n \timg := gocv.IMRead(\"example.jpg\", gocv.IMReadColor)\n \tsift := contrib.NewSIFT()\n \tkp := sift.Detect(img)\n \tgocv.DrawKeyPoints(img, kp, &img, color.RGBA{\n \t\tR: 255,\n \t\tG: 0,\n \t\tB: 0,\n \t\tA: 0,\n \t}, gocv.DrawDefault)\n \tfor {\n \t\twindow.IMShow(img)\n \t\twindow.WaitKey(1)\n \t}\n }\n \n Outcome - key points are drawn in Blue instead of Red:\n \n <denchmark-link:https://user-images.githubusercontent.com/32583062/86922357-c79e8d00-c12c-11ea-903a-850721e64bd3.png></denchmark-link>\n \n <denchmark-h:h2>Your Environment</denchmark-h>\n \n \n Operating System and version: Pop!_OS 20.04 LTS\n OpenCV version used: 4.3.0\n How did you install OpenCV? make install\n GoCV version used: 0.23.0\n Go version: go1.14.4 linux/amd64\n Did you run the env.sh or env.cmd script before trying to go run or go build? No\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "Shanduur", "commentT": "2020-07-09T21:50:43Z", "comment_text": "\n \t\tI agree that sometimes gocv and opencv does not have same features, and some features is very hard to translate to gocv.\n I modified your code to convert loaded image to RGBA because we can only use color.RGBA, and after processing, we return the result image to BGR, which will correctly display red circles.\n package main\n \n import (\n     \"image/color\"\n \n     \"gocv.io/x/gocv\"\n     \"gocv.io/x/gocv/contrib\"\n )\n \n func main() {\n     window := gocv.NewWindow(\"Example\")\n     img := gocv.IMRead(\"example.jpg\", gocv.IMReadColor)\n     gocv.CvtColor(img, &img, gocv.ColorBGRToRGBA) // can also be gocv.ColorBGRToRGBA, doesen't matter\n     sift := contrib.NewSIFT()\n     kp := sift.Detect(img)\n     gocv.DrawKeyPoints(img, kp, &img, color.RGBA{\n         R: 255,\n         G: 0,\n         B: 0,\n         A: 0,\n     }, gocv.DrawDefault)\n     gocv.CvtColor(img, &img, gocv.ColorRGBAToBGR)\n     window.IMShow(img)\n     window.WaitKey(0)\n }\n One possible way to overcome this problem is to create custom color types to be parallel with opencv. color.RGBA is defined as\n type RGBA struct {\n     R, G, B, A uint8\n }\n so it is basicaly a struct with 4 uint8 values. One of solution will be to create same struct (or multiple ones, like BGR..) inside gocv, and use that instead of image/color ones. In addition to creating custom structs, we need to modify functions as well, to include those custom structs. Functions can be named as\n     func DrawKeyPointsBGR(src Mat, keyPoints []KeyPoint, dst *Mat, color gocv.ColorBGR, flag DrawMatchesFlag)\n and so on.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "Shanduur", "commentT": "2020-07-09T23:43:15Z", "comment_text": "\n \t\tOk, tested this, and here are results:\n <denchmark-code>issue707 $ C:\\Go\\bin\\go.exe test -benchmem -bench . -benchtime=1m\n goos: windows\n goarch: amd64\n pkg: programazer.xyz/golubaca/gocv_issues/issue707\n BenchmarkWithColorConverting-16              457         153461301 ns/op          262171 B/op          3 allocs/op\n BenchmarkWithCustomBGRA-16                   483         147834574 ns/op          262165 B/op          3 allocs/op\n PASS\n ok      programazer.xyz/golubaca/gocv_issues/issue707   172.847s\n </denchmark-code>\n \n I modified features2d.go to include new function DrawKeyPointsBGR and also created ctruct  to reflect this change. So, in your example you'll change   to  which will eliminate two color converting operations.\n <denchmark-link:https://github.com/deadprogram>@deadprogram</denchmark-link>\n  Do you agree with this decision or there is better way of handling this? We will have two functions for the same task, but with different parameters. Included benchmark show that we can get couple of more operations in the same time, tested it with 1m/benchFunc. If you agree, I'll create pull request after comparing more methods.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "Shanduur", "commentT": "2020-07-11T08:30:30Z", "comment_text": "\n \t\tOk, after investigating code, I noticed that let say gocv.Rectangle  takes RGBA color vales, but changes the order inside function to BGRA, and passing to C code (code: <denchmark-link:https://github.com/hybridgroup/gocv/blob/master/imgproc.go#L1286>https://github.com/hybridgroup/gocv/blob/master/imgproc.go#L1286</denchmark-link>\n ). So I think it is better to change existing DrawKeyPoints function to behave same as others. I'll create pull request.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "Shanduur", "commentT": "2020-07-11T09:09:40Z", "comment_text": "\n \t\t\n So I think it is better to change existing DrawKeyPoints function to behave same as others.\n \n That sounds like the least surprising solution, to me. Thanks for looking into this!\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "Shanduur", "commentT": "2020-07-30T15:58:11Z", "comment_text": "\n \t\tVersion v0.24.0 includes this so now closing. Thanks!\n \t\t"}}}, "commit": {"commit_id": "50441f6fa7bf9d517a3ad110f2a2a6225f454ab7", "commit_author": "Aleksandar Golubovic", "commitT": "2020-07-11 11:14:10+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "features2d.go", "file_new_name": "features2d.go", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "743,745", "deleted_lines": "743,745", "method_info": {"method_name": "DrawKeyPoints", "method_params": "Mat,KeyPoint,Mat,RGBA,DrawMatchesFlag", "method_startline": "724", "method_endline": "750"}}}}}}}