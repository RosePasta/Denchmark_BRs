{"BR": {"BR_id": "360", "BR_author": "jonashaag", "BRopenT": "2020-11-26T13:43:13Z", "BRcloseT": "2020-11-30T18:21:13Z", "BR_text": {"BRsummary": "Complex RNN n_layers&gt;1 is wrong", "BRdescription": "\n The way we implement complex RNN (used in DCCRN) is wrong since the layers are computed independently for the real and imaginary components, and the real and imaginary results are merged only once.\n What we want (n_layers=2):\n <denchmark-code>rr1 = real_lstm(input.real)\n ir1 = real_lstm(input.imag)\n ii1 = imag_lstm(input.imag)\n ri1 = imag_lstm(input.real)\n r1 = rr1 - ii1\n i1 = ir1 + ri1\n out1 = from_reim(r1, i1)\n \n rr2 = real_lstm(out1.real)\n ir2 = real_lstm(out1.imag)\n ii2 = imag_lstm(out1.imag)\n ri2 = imag_lstm(out1.real)\n r2 = rr2 - ii2\n i2 = ir2 + ri2\n out2 = from_reim(r2, i2)\n </denchmark-code>\n \n What I think we have (n_layers=2):\n <denchmark-code>rr2 = real_lstm(real_lstm(input.real))\n ir2 = real_lstm(real_lstm(input.imag))\n ii2 = imag_lstm(imag_lstm(input.imag))\n ri2 = imag_lstm(imag_lstm(input.real))\n r2 = rr2 - ii2\n i2 = ir2 + ri2\n out2 = from_reim(r2, i2)\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "jonashaag", "commentT": "2020-11-26T14:06:19Z", "comment_text": "\n \t\tYes, true.\n Any Sequential will only combine things afterwards.\n What do you suggest?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "jonashaag", "commentT": "2020-11-26T15:01:01Z", "comment_text": "\n \t\tMaybe we could add a ReImSequential or something similar.\n \t\t"}}}, "commit": {"commit_id": "2055f2baaf260945049eca9a8f13b56938f89c12", "commit_author": "Jonas Haag", "commitT": "2020-11-30 19:21:10+01:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "asteroid\\complex_nn.py", "file_new_name": "asteroid\\complex_nn.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "168,169", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,rnn_type,input_size,hidden_size,n_layers,dropout,bidirectional", "method_startline": "168", "method_endline": "169"}}, "hunk_1": {"Ismethod": 1, "added_lines": "195,196,197,198,199", "deleted_lines": null, "method_info": {"method_name": "forward", "method_params": "self,ComplexTensor", "method_startline": "195", "method_endline": "199"}}, "hunk_2": {"Ismethod": 1, "added_lines": "192,193", "deleted_lines": null, "method_info": {"method_name": "output_size", "method_params": "self", "method_startline": "192", "method_endline": "193"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "asteroid\\masknn\\recurrent.py", "file_new_name": "asteroid\\masknn\\recurrent.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "525,526,529", "deleted_lines": "525,526,529"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\complex_nn_test.py", "file_new_name": "tests\\complex_nn_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "110,111,112,113,114,115,116,117,118,119,120", "deleted_lines": null, "method_info": {"method_name": "test_complexsinglernn", "method_params": "n_layers", "method_startline": "110", "method_endline": "120"}}}}}}}