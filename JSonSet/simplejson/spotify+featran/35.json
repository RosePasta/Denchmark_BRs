{"BR": {"BR_id": "35", "BR_author": "marcromeyn", "BRopenT": "2017-08-17T16:41:54Z", "BRcloseT": "2017-08-17T17:49:11Z", "BR_text": {"BRsummary": "java.lang.NullPointerException when accessing featureNames/featureValues of MultiFeatureSpec", "BRdescription": "\n I am getting a java.lang.NullPointerException when I am trying to access either featureNames or featureValues. When I use either one of the 2 specs separately it works fine but when I try to combine them in a MultiFeatureSpec it fails. Is it a bug or am I doing something wrong?\n @BigQueryType.fromQuery(\n     \"\"\"\n       |#standardSQL\n       |SELECT album_gid, album.num_tracks AS num_tracks,\n       |album.availability.latest_date AS latest_date,\n       |global_popularity.popularity_normalized AS popularity_normalized,\n       |album.duration AS duration\n       |FROM (SELECT * FROM `knowledge-graph-112233.album_entity.album_entity_%s` LIMIT 1000)\n       |WHERE album.num_tracks >= 3\n     \"\"\".stripMargin, \"$LATEST\"\n   ) class AlbumMeta\n \n   def main(cmdlineArgs: Array[String]): Unit = {\n     val (sc, args) = ContextAndArgs(cmdlineArgs)\n \n     val date = args(\"date\").replace(\"-\", \"\")\n     val output = args(\"output\")\n \n     val albumFeatures = sc.typedBigQuery[AlbumMeta](AlbumMeta.query.format(date))\n \n     val conSpec = FeatureSpec.of[AlbumMeta]\n       .required(_.duration.get.toDouble)(StandardScaler(\"duration\"))\n       .required(_.duration.get.toDouble)(StandardScaler(\"duration_mean\", withMean=true))\n       .required(_.duration.get.toDouble)(Identity(\"identity\"))\n       .required(_.duration.get.toDouble)(MinMaxScaler(\"min_max\"))\n \n     val albumSpec = FeatureSpec.of[AlbumMeta]\n       .required(_.album_gid.get)(OneHotEncoder(\"album\"))\n \n     //    val spec_extracted = albumSpec.extract(albumFeatures)\n     val spec_extracted = MultiFeatureSpec(conSpec, albumSpec).extract(albumFeatures)\n \n     val t = spec_extracted.featureNames\n \n     sc.close().waitUntilFinish()\n   }\n Error:\n Caused by: java.lang.NullPointerException\n at com.spotify.featran.FeatureSet.multiFeatureNames(FeatureSpec.scala:231)\n at com.spotify.featran.MultiFeatureExtractor$$anonfun$featureNames$1.apply(MultiFeatureExtractor.scala:56)\n at com.spotify.featran.MultiFeatureExtractor$$anonfun$featureNames$1.apply(MultiFeatureExtractor.scala:56)\n at com.spotify.scio.util.Functions$$anon$8.processElement(Functions.scala:145)\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "marcromeyn", "commentT": "2017-08-17T17:45:12Z", "comment_text": "\n \t\tConfirmed that I can reproduce with this minimized code\n import com.spotify.scio._\n import com.spotify.featran._\n import com.spotify.featran.scio._\n import com.spotify.featran.transformers._\n \n object Test {\n   def main(args: Array[String]): Unit = {\n     val data = (1 to 100).map(x => (x.toDouble, \"key\" + x))\n \n     val (sc, _) = ContextAndArgs(args)\n     val in = sc.parallelize(data)\n \n     val f1 = FeatureSpec.of[(Double, String)]\n       .required(_._1)(StandardScaler(\"duration\"))\n       .required(_._1)(StandardScaler(\"duration_mean\", withMean=true))\n       .required(_._1)(Identity(\"identity\"))\n       .required(_._1)(MinMaxScaler(\"min_max\"))\n     val f2 = FeatureSpec.of[(Double, String)]\n       .required(_._2)(OneHotEncoder(\"album\"))\n     val f = MultiFeatureSpec(f1, f2).extract(in)\n     val n = f.featureNames.materialize\n \n     sc.close()\n     n.waitForResult().value.foreach(println)\n   }\n }\n \t\t"}}}, "commit": {"commit_id": "e25ba4ff7590f21d935ce29fbb4a524e9fe2601b", "commit_author": "Neville Li", "commitT": "2017-08-17 13:49:08-04:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "core\\src\\main\\scala\\com\\spotify\\featran\\MultiFeatureExtractor.scala", "file_new_name": "core\\src\\main\\scala\\com\\spotify\\featran\\MultiFeatureExtractor.scala", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "34", "deleted_lines": "34"}}}}}}