{"BR": {"BR_id": "560", "BR_author": "sxjscience", "BRopenT": "2020-07-17T23:25:52Z", "BRcloseT": "2020-07-20T05:31:47Z", "BR_text": {"BRsummary": "[HPO] ag.space.Categorical does not support keys containing `.`", "BRdescription": "\n Minimal reproducible example:\n Case1: Use model.name as the key\n import autogluon as ag\n \n kwargs = {'model.name': ag.space.Categorical('abc', 'def')}\n \n @ag.args(**kwargs)\n def train_fn(args, reporter):\n     print(args)\n \n \n scheduler = ag.scheduler.FIFOScheduler(train_fn, num_trials=1)\n scheduler.run()\n scheduler.join_jobs()\n Output:\n <denchmark-code>{'model.name': Categorical['abc', 'def'], 'task_id': 108}\n </denchmark-code>\n \n Case2: Use model_name as the key:\n import autogluon as ag\n \n kwargs = {'model_name': ag.space.Categorical('abc', 'def')}\n \n @ag.args(**kwargs)\n def train_fn(args, reporter):\n     print(args)\n \n \n scheduler = ag.scheduler.FIFOScheduler(train_fn, num_trials=1)\n scheduler.run()\n scheduler.join_jobs()\n Output:\n <denchmark-code>{'model_name': 'abc', 'task_id': 109}\n </denchmark-code>\n \n I've also tried ray/tune and it's supported.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "sxjscience", "commentT": "2020-07-20T05:31:46Z", "comment_text": "\n \t\tThanks <denchmark-link:https://github.com/sxjscience>@sxjscience</denchmark-link>\n , merged your fix: <denchmark-link:https://github.com/awslabs/autogluon/pull/564>#564</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "67e243a54f6e7bfa5a2105bd90ba7d0dff35fb0c", "commit_author": "Xingjian Shi", "commitT": "2020-07-19 22:30:59-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "autogluon\\core\\decorator.py", "file_new_name": "autogluon\\core\\decorator.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "107,109", "deleted_lines": "105,107", "method_info": {"method_name": "kwspaces", "method_params": "self", "method_startline": "100", "method_endline": "113"}}, "hunk_1": {"Ismethod": 1, "added_lines": "123,136,137", "deleted_lines": null, "method_info": {"method_name": "args", "method_params": "default,kwvars", "method_startline": "123", "method_endline": "149"}}, "hunk_2": {"Ismethod": 1, "added_lines": "123,136,137", "deleted_lines": "121", "method_info": {"method_name": "args", "method_params": "default,kwvars", "method_startline": "121", "method_endline": "145"}}, "hunk_3": {"Ismethod": 1, "added_lines": "24,36,37", "deleted_lines": "23,35", "method_info": {"method_name": "sample_config", "method_params": "args,config", "method_startline": "22", "method_endline": "41"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "autogluon\\core\\space.py", "file_new_name": "autogluon\\core\\space.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "199", "deleted_lines": "195", "method_info": {"method_name": "sample", "method_params": "self,config", "method_startline": "194", "method_endline": "208"}}, "hunk_1": {"Ismethod": 1, "added_lines": "500", "deleted_lines": null, "method_info": {"method_name": "_rm_hp", "method_params": "cs,k", "method_startline": "496", "method_endline": "501"}}, "hunk_2": {"Ismethod": 1, "added_lines": "233", "deleted_lines": "229", "method_info": {"method_name": "kwspaces", "method_params": "self", "method_startline": "224", "method_endline": "237"}}, "hunk_3": {"Ismethod": 1, "added_lines": "491", "deleted_lines": "486", "method_info": {"method_name": "_add_cs", "method_params": "master_cs,sub_cs,prefix,delimiter,parent_hp", "method_startline": "483", "method_endline": "494"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 9, "file_old_name": "tests\\unittests\\test_search_space.py", "file_new_name": "tests\\unittests\\test_search_space.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "60,61,62,63,64,65,66,67,68,69", "deleted_lines": null, "method_info": {"method_name": "test_search_space_dot_key", "method_params": "", "method_startline": "60", "method_endline": "69"}}, "hunk_1": {"Ismethod": 1, "added_lines": "64,65", "deleted_lines": null, "method_info": {"method_name": "test_search_space_dot_key.train_fn", "method_params": "args,reporter", "method_startline": "64", "method_endline": "65"}}, "hunk_2": {"Ismethod": 1, "added_lines": "15,16", "deleted_lines": "16", "method_info": {"method_name": "test_search_space.myfunc", "method_params": "framework", "method_startline": "15", "method_endline": "16"}}, "hunk_3": {"Ismethod": 1, "added_lines": "35,36,37,38,39,40,41,42,43,44,45,46,47,48,49", "deleted_lines": "35,36,37,38,39,40,41,42,43,44,45,46,47,48,49", "method_info": {"method_name": "test_search_space.train_fn", "method_params": "args,reporter", "method_startline": "35", "method_endline": "49"}}, "hunk_4": {"Ismethod": 1, "added_lines": "13,14", "deleted_lines": "13,14", "method_info": {"method_name": "myfunc", "method_params": "framework", "method_startline": "13", "method_endline": "14"}}, "hunk_5": {"Ismethod": 1, "added_lines": "7,8", "deleted_lines": "7,8", "method_info": {"method_name": "__init__", "method_params": "self,name", "method_startline": "7", "method_endline": "8"}}, "hunk_6": {"Ismethod": 1, "added_lines": "4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,28,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49", "deleted_lines": "4,5,6,7,8,10,11,12,13,14,16,17,18,19,20,21,22,26,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50", "method_info": {"method_name": "test_search_space", "method_params": "", "method_startline": "4", "method_endline": "57"}}, "hunk_7": {"Ismethod": 1, "added_lines": "33,35,36,37,38,39,40,41,42,43,44,45,46,47", "deleted_lines": "33,34,35,36,37,38,39,40,41,42,43,44,45,46,47", "method_info": {"method_name": "train_fn", "method_params": "args,reporter", "method_startline": "33", "method_endline": "47"}}, "hunk_8": {"Ismethod": 1, "added_lines": "9,10", "deleted_lines": "10", "method_info": {"method_name": "test_search_space.__init__", "method_params": "self,name", "method_startline": "9", "method_endline": "10"}}}}}}}