{"BR": {"BR_id": "558", "BR_author": "andyDoucette", "BRopenT": "2020-07-16T23:54:55Z", "BRcloseT": "2020-07-22T18:03:31Z", "BR_text": {"BRsummary": "How to save the model created with an ENAS_Scheduler?", "BRdescription": "\n We have this nice tutorial showing how to use the ENAS_Scheduler to train a model.\n <denchmark-link:https://autogluon.mxnet.io/tutorials/nas/enas_proxylessnas.html>ENAS Tutorial</denchmark-link>\n \n My question is:  How do we save and load trained models created that way?  I've tried 5 different ways and none of them seem to work.\n Based on what I read, the one I think I'm supposed to use is this:\n mynet.export(modelFile, epoch=numEpochsTrained)\n However, that produces this error message when I run it:\n <denchmark-code>Traceback (most recent call last):\n   File \"/usr/lib/python3.6/pdb.py\", line 1667, in main\n     pdb._runscript(mainpyfile)\n   File \"/usr/lib/python3.6/pdb.py\", line 1548, in _runscript\n     self.run(statement)\n   File \"/usr/lib/python3.6/bdb.py\", line 434, in run\n     exec(cmd, globals, locals)\n   File \"<string>\", line 1, in <module>\n   File \"/app/src/cli/boundryDetector.py\", line 2, in <module>\n     import sys,os;\n   File \"/app/src/code/boundryDetector/../lib/click/src/click/core.py\", line 857, in __call__\n     return self.main(*args, **kwargs)\n   File \"/app/src/code/boundryDetector/../lib/click/src/click/core.py\", line 810, in main\n     rv = self.invoke(ctx)\n   File \"/app/src/code/boundryDetector/../lib/click/src/click/core.py\", line 1099, in invoke\n     return ctx.invoke(self.callback, **ctx.params)\n   File \"/app/src/code/boundryDetector/../lib/click/src/click/core.py\", line 613, in invoke\n     return callback(*args, **kwargs)\n   File \"/app/src/cli/boundryDetector.py\", line 108, in boundry_detector\n     dnn.save(modelFile)\n   File \"/app/src/code/boundryDetector/./dnn/save.py\", line 12, in save\n     s.model.export(modelFile, epoch=s.numEpochsTrained)\n   File \"/usr/local/lib/python3.6/dist-packages/mxnet/gluon/block.py\", line 1106, in export\n     assert name in aux_names\n AssertionError\n </denchmark-code>\n \n I'm using:\n <denchmark-code>autogluon==0.0.11\n mxnet==1.6.0\n </denchmark-code>\n \n Your kind assistance would be greatly appreciated. :)\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "andyDoucette", "commentT": "2020-07-17T21:08:00Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/zhreshold>@zhreshold</denchmark-link>\n  Could you take a look at this?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "andyDoucette", "commentT": "2020-07-17T21:57:38Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/andyDoucette>@andyDoucette</denchmark-link>\n  Hi, the fix to export is available here: <denchmark-link:https://github.com/awslabs/autogluon/pull/559>#559</denchmark-link>\n \n The remaining issue is that you can only use the exported model for inference, but may not be able to load it back as the current implementation of ENAS is based on a highly dynamically wrapped structure that can't be pickled or saved.\n The good news is that the exported model can be imported into mxnet without extra dependency.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "andyDoucette", "commentT": "2020-07-18T04:57:42Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/zhreshold>@zhreshold</denchmark-link>\n  Thank you very much! :)  Once this all gets put into master, I'll try it out on my side and report back.\n \t\t"}}}, "commit": {"commit_id": "42941f03cc5f5b668d20c9d136b9bff2eaa3f24f", "commit_author": "Joshua Z. Zhang", "commitT": "2020-07-22 11:03:29-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "autogluon\\contrib\\enas\\enas.py", "file_new_name": "autogluon\\contrib\\enas\\enas.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "73", "deleted_lines": "73", "method_info": {"method_name": "enas_net", "method_params": "kwvars", "method_startline": "67", "method_endline": "172"}}, "hunk_1": {"Ismethod": 1, "added_lines": "306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349", "deleted_lines": null, "method_info": {"method_name": "export", "method_params": "self,path", "method_startline": "306", "method_endline": "349"}}, "hunk_2": {"Ismethod": 1, "added_lines": "73", "deleted_lines": "73", "method_info": {"method_name": "enas_net.registered_class", "method_params": "Cls", "method_startline": "68", "method_endline": "171"}}, "hunk_3": {"Ismethod": 1, "added_lines": "73", "deleted_lines": "73", "method_info": {"method_name": "enas_net.enas_net.registered_class.__init__", "method_params": "self,args,kwargs", "method_startline": "70", "method_endline": "87"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "docs\\tutorials\\nas\\enas_proxylessnas.md", "file_new_name": "docs\\tutorials\\nas\\enas_proxylessnas.md", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "29,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159", "deleted_lines": "29"}}}, "file_2": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "tests\\unittests\\test_contrib_enas.py"}}}}