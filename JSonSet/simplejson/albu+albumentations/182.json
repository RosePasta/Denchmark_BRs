{"BR": {"BR_id": "182", "BR_author": "mortido", "BRopenT": "2019-02-07T11:17:07Z", "BRcloseT": "2019-04-06T19:20:45Z", "BR_text": {"BRsummary": "Shift augmentation in `ShiftScaleRotate` works incorrect for keypoints and bboxes", "BRdescription": "\n Version: 1.12\n Shift augmentation in  works incorrect for keypoints and bboxes. Please compare how it's applied to img:\n <denchmark-link:https://github.com/albu/albumentations/blob/c26383ecd9eeb51d57185bfd699179a8a41f7b6d/albumentations/augmentations/functional.py#L143>https://github.com/albu/albumentations/blob/c26383ecd9eeb51d57185bfd699179a8a41f7b6d/albumentations/augmentations/functional.py#L143</denchmark-link>\n \n BBoxes:\n <denchmark-link:https://github.com/albu/albumentations/blob/c26383ecd9eeb51d57185bfd699179a8a41f7b6d/albumentations/augmentations/functional.py#L635>https://github.com/albu/albumentations/blob/c26383ecd9eeb51d57185bfd699179a8a41f7b6d/albumentations/augmentations/functional.py#L635</denchmark-link>\n \n and keypoints:\n <denchmark-link:https://github.com/albu/albumentations/blob/c26383ecd9eeb51d57185bfd699179a8a41f7b6d/albumentations/augmentations/functional.py#L861>https://github.com/albu/albumentations/blob/c26383ecd9eeb51d57185bfd699179a8a41f7b6d/albumentations/augmentations/functional.py#L861</denchmark-link>\n \n 'dx' and 'dy' is percentage values of image width and height. As we don't have access to image shape during these transforms it may be good to set shift range in pixels not in percents.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "mortido", "commentT": "2019-02-07T11:53:49Z", "comment_text": "\n \t\tbboxes and keypoints use normalized coordinates internally\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "mortido", "commentT": "2019-02-07T12:52:55Z", "comment_text": "\n \t\tActually... I'm going to reopen it.\n Tried to add logging to <denchmark-link:https://github.com/albu/albumentations/blob/c26383ecd9eeb51d57185bfd699179a8a41f7b6d/albumentations/augmentations/functional.py#L858>https://github.com/albu/albumentations/blob/c26383ecd9eeb51d57185bfd699179a8a41f7b6d/albumentations/augmentations/functional.py#L858</denchmark-link>\n \n method. And it doesn't look like keypoints were normalized. Also there is commit that removes  function <denchmark-link:https://github.com/albumentations-team/albumentations/commit/41a5fdff1a2e405197684afcd320dede636d192c>41a5fdf</denchmark-link>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "mortido", "commentT": "2019-02-07T13:50:11Z", "comment_text": "\n \t\tThanks. I'll pass it to <denchmark-link:https://github.com/BloodAxe>@BloodAxe</denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "mortido", "commentT": "2019-02-07T17:46:42Z", "comment_text": "\n \t\tThanks, I'll take a look on weekend on this issue.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "mortido", "commentT": "2019-03-08T16:48:08Z", "comment_text": "\n \t\tHi all,\n First, thank you for such a useful library!\n I noticed ShiftScaleRotate may still not be working correctly for bounding boxes. When applying only a rotation, the rotated bounding boxes are close to the objects in the rotated image but do not correspond exactly to them (at least for rectangular images of different height and width). Some objects actually end outside the rotated bounding box.\n In the following function:\n <denchmark-link:https://github.com/albu/albumentations/blob/09573604506b0f6b2eec3b8d6555faf10f0c5bc4/albumentations/augmentations/functional.py#L143-L153>https://github.com/albu/albumentations/blob/09573604506b0f6b2eec3b8d6555faf10f0c5bc4/albumentations/augmentations/functional.py#L143-L153</denchmark-link>\n \n Denormalizing the coordinates before the rotation and renormalizing again, solved the issues I had:\n <denchmark-code>def bbox_shift_scale_rotate(bbox, angle, scale, dx, dy, interpolation, rows, cols, **params):\n     height, width = rows, cols\n     center = (width / 2, height / 2)\n     matrix = cv2.getRotationMatrix2D(center, angle, scale)\n     matrix[0, 2] += dx * width\n     matrix[1, 2] += dy * height\n     x = np.array([bbox[0], bbox[2], bbox[2], bbox[0]])\n     y = np.array([bbox[1], bbox[1], bbox[3], bbox[3]])\n     ones = np.ones(shape=(len(x)))\n     points_ones = np.vstack([x, y, ones]).transpose()\n     points_ones[:, 0] *= width\n     points_ones[:, 1] *= height\n     tr_points = matrix.dot(points_ones.T).T\n     tr_points[:, 0] /= width\n     tr_points[:, 1] /= height\n     return [min(tr_points[:, 0]), min(tr_points[:, 1]), max(tr_points[:, 0]), max(tr_points[:, 1])]\n </denchmark-code>\n \n It looks like normalization introduces different rescalings for each axis that make the transformation different from the one applied to images. Do you agree or did I miss something?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "mortido", "commentT": "2021-01-16T21:12:59Z", "comment_text": "\n \t\tI'm experiencing issues with the bounding box with YOLO. The center coordinates are correct, though the width and height coordinates of the bounding box are way off. This is the chunk of code that I have to read in a YOLO annotation, apply augmentations to the data, and then re-save the augmentation (for a single object)\n <denchmark-code># Read in the object bounding boxes\n         with open(WORK_DIR + '/renders/' + img[:-4] + '.txt', 'r') as f:\n             labels = f.readline()\n             coords = labels.split(' ')[1:]\n             coords = [float(i) for i in coords]\n \n         coords.append(0)\n \n         # Apply the transforms to the image \n         image = imread(WORK_DIR + '/renders/' + img, pilmode='RGB')\n         image = transforms(image=image, bboxes=[coords])\n \n         print(f\"Applying background and augmentations to {WORK_DIR + '/renders/' + img}\")\n \n         print(f\"before: {coords}after: {image['bboxes']}\")\n \n         imsave(WORK_DIR + '/renders/' + img, image[\"image\"])\n \n         # Save the new\n         with open(WORK_DIR + '/renders/' + img[:-4] + '.txt', 'w') as f:\n             f.write(f\"0 {image['bboxes'][0][0]} {image['bboxes'][0][1]} {image['bboxes'][0][2]} {image['bboxes'][0][3]}\")\n </denchmark-code>\n \n \t\t"}}}, "commit": {"commit_id": "6de2178d408db78de050881c70e8ed5f4cf59e99", "commit_author": "BloodAxe", "commitT": "2019-04-06 22:20:43+03:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "albumentations\\augmentations\\functional.py", "file_new_name": "albumentations\\augmentations\\functional.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "167,168,170,171,176,177,179,180", "deleted_lines": "167,169,170", "method_info": {"method_name": "bbox_shift_scale_rotate", "method_params": "bbox,angle,scale,dx,dy,interpolation,rows,cols,params", "method_startline": "166", "method_endline": "181"}}}}}}}