{"BR": {"BR_id": "568", "BR_author": "NMRobert", "BRopenT": "2017-11-20T22:00:38Z", "BRcloseT": "2017-11-26T13:03:27Z", "BR_text": {"BRsummary": "Predict call execution time degrades linearly with additional calls", "BRdescription": "\n \n OS Platform and Distribution: Linux Ubuntu 17.04\n TensorFlow installed from (source or binary): binary\n Tensorflow version: tensorflow-gpu==1.4.0\n GPflow version:  gpflow-1.0.0 (from github master source)\n CUDNN installed: 6\n GPU:  GeForce GTX 1080 Ti\n Python Version: Python 3.5.3\n \n Issue:\n Repeated calls to .predict (either .predict_f or .predict_y) have degrading execution time when called successively. The initial call might take perhaps 10ms, but later calls might take as long as several seconds each. This poses a problem when many calls to *.predict are desired. I did not observe this behaviour in versions of gpflow prior to 1.0.0.  This occurs for at least the regression models (GPR, SGPR, SVGP), and possibly others.\n <denchmark-code>import numpy as np\n import matplotlib.pyplot as plt\n import gpflow\n import time\n \n X = np.linspace(0,10, 100).reshape(-1,1)\n y = np.sin(X) + np.random.normal(0, 0.25, size=100).reshape(-1,1)\n \n k = gpflow.kernels.RBF(input_dim=1)\n m = gpflow.models.gpr.GPR(X, y, kern=k)\n m.compile()\n gpflow.train.ScipyOptimizer().minimize(m)\n \n print('Done optimize.')\n predict_duration_log = []\n for i in range(250):\n     start = time.time()\n     m.predict_y(X) \n     end = time.time()\n     predict_duration_log.append(end-start)\n \n plt.plot(predict_duration_log)\n plt.show()\n </denchmark-code>\n \n <denchmark-link:url>\n \n </denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "NMRobert", "commentT": "2017-11-21T10:20:23Z", "comment_text": "\n \t\tI replicated your experiment and came to the same conclusion. The code was running on CPU.\n <denchmark-h:h2>GPflow 1.0</denchmark-h>\n \n <denchmark-link:https://user-images.githubusercontent.com/13780846/33067149-2d392af8-cea5-11e7-8213-8dcb910a30b0.png></denchmark-link>\n \n <denchmark-h:h2>GPflow 0.5</denchmark-h>\n \n <denchmark-link:https://user-images.githubusercontent.com/13780846/33067150-2d9d1626-cea5-11e7-9381-f32b00486570.png></denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "NMRobert", "commentT": "2017-11-21T12:46:18Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/NMRobert>@NMRobert</denchmark-link>\n  <denchmark-link:https://github.com/vdutor>@vdutor</denchmark-link>\n  thank you for reporting and confirming.\n <denchmark-link:https://github.com/awav>@awav</denchmark-link>\n  I'm away from my desk but is this possibly because the graph is growing each time we call predict?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "NMRobert", "commentT": "2017-11-21T13:44:30Z", "comment_text": "\n \t\tThat's very interesting, I hope it is not happening because of report_uninitialized_variables... In each run gpflow now checks if variable needs re-initialization or not. Each iteration in the example above adds report_uninitialized_variables operation to the graph and looks like the TensorFlow doesn't recognize which operations must stay w/o touching and which it should run. But, this is just a theory, I will check it.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "NMRobert", "commentT": "2017-11-21T20:00:31Z", "comment_text": "\n \t\tBad news, I was right...\n <denchmark-h:h3>GPflow w/o report_uninitialized_variables.</denchmark-h>\n \n <denchmark-link:https://user-images.githubusercontent.com/24483645/33094391-ed7b744a-cef7-11e7-84f4-96e06a3ebcf4.png></denchmark-link>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "NMRobert", "commentT": "2017-11-22T16:29:41Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/alexggmatthews>@alexggmatthews</denchmark-link>\n , <denchmark-link:https://github.com/jameshensman>@jameshensman</denchmark-link>\n , <denchmark-link:https://github.com/markvdw>@markvdw</denchmark-link>\n , <denchmark-link:https://github.com/NMRobert>@NMRobert</denchmark-link>\n , <denchmark-link:https://github.com/vdutor>@vdutor</denchmark-link>\n   and others :)\n What I can do to fix it: turn off default initialization and checking by tf.report_unitialized_variables. But when you switch to another session, you will have to initialize the model explicitly. Any objections?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "NMRobert", "commentT": "2017-11-23T11:42:10Z", "comment_text": "\n \t\tI found a way to slow down speed degradation w/o removing auto-initializing feature:\n <denchmark-link:https://user-images.githubusercontent.com/24483645/33171218-54f2994a-d043-11e7-9ebe-f19a6f3ee91c.png></denchmark-link>\n \n EDIT: this ^^^ image is wrong\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "NMRobert", "commentT": "2017-11-23T11:58:12Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/awav>@awav</denchmark-link>\n  Thanks for your work on this! I'm not sure I fully understand the consequences of removing auto-initialisation; I don't personally think it would be an issue (for me), but might be confusing and/or unexpected behaviour for some users. What would the code for this look like?\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "NMRobert", "commentT": "2017-11-23T12:01:26Z", "comment_text": "\n \t\tI think that small hurdles for users who want to manage thier own sessions is okay. If you know enough to use a session, you know enough to initialize the tf variables.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "NMRobert", "commentT": "2017-11-23T12:05:07Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/NMRobert>@NMRobert</denchmark-link>\n , When you switch from one session to another you will have to initialize parameters explicitly, for e.g.: .\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "NMRobert", "commentT": "2017-11-23T13:30:18Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/awav>@awav</denchmark-link>\n : The slower degradation, is that still present for \"normal\" users? I think this is quite seriously bad behaviour. For example, in my training code (which I let run for days), I run the prediction code periodically to monitor performance. It would be really annoying for this to slow down.\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "NMRobert", "commentT": "2017-11-24T00:29:22Z", "comment_text": "\n \t\tHere is speed results after improvements which I made:\n <denchmark-h:h2>W/O checking if variables were initialized (sec):</denchmark-h>\n \n In [9]: woi_pd.describe(percentiles=[0.75,0.9,0.999])\n Out[9]:\n count    50000.000000\n mean         0.002592\n std          0.003511\n min          0.001846\n 50%          0.002432\n 75%          0.002665\n 90%          0.003011\n 99.9%        0.005679\n max          0.388551\n dtype: float64\n <denchmark-h:h2>WITH checking if variables were initialized (sec):</denchmark-h>\n \n In [10]: wi_pd.describe(percentiles=[0.75,0.9,0.999])\n Out[10]:\n count    50000.000000\n mean         0.004250\n std          0.003326\n min          0.003169\n 50%          0.004069\n 75%          0.004368\n 90%          0.004832\n 99.9%        0.008807\n max          0.405657\n dtype: float64\n Let's vote:\n \n +1 leave auto-initializing as is\n -1 we can live w/o initializing :)\n \n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "NMRobert", "commentT": "2017-11-24T07:56:55Z", "comment_text": "\n \t\t+1\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "NMRobert", "commentT": "2017-11-24T09:47:13Z", "comment_text": "\n \t\tHi Artem, these benchmark times are really small. I'm only interested in the relative performance degradation for predictions which take around 5 or more seconds. If this will be the absolute degradation then I'm happy with the auto initialise. In my vote I have assumed this is the case, so if not, let me know :)\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "NMRobert", "commentT": "2017-11-24T09:59:54Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/markvdw>@markvdw</denchmark-link>\n , it is not a degradation. I'm sorry for confusion - I edited an image above - my previous experiments were wrong. Here is new graphs:\n <denchmark-link:https://user-images.githubusercontent.com/24483645/33205228-128468ac-d0fe-11e7-9e28-b7dc45670ddc.png></denchmark-link>\n \n So, there is only small overhead 2-3ms, which is constant.\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "NMRobert", "commentT": "2017-11-24T10:06:13Z", "comment_text": "\n \t\tPerfect, let's do auto init then! The only time when this would be a bad thing is if people call predict many times for small numbers of predictions. This isn't a good thing to do anyway, since we still recompute the Cholesky (annoyingly, there's still no good solution to this). I think there's no reason not to use auto-init.\n Also, does this solution also fix the Iterator problem we spoke about?\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "NMRobert", "commentT": "2017-11-24T10:10:35Z", "comment_text": "\n \t\tI'm happy with the proposed solution that leaves auto-init intact.\n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "NMRobert", "commentT": "2017-11-24T10:14:43Z", "comment_text": "\n \t\tHere is results w/o spikes, just for the record:\n In [44]: woi_pd.describe(percentiles=[0.75,0.9,0.999])\n Out[44]:\n count    49995.000000\n mean         0.002557\n std          0.000407\n min          0.001846\n 50%          0.002432\n 75%          0.002665\n 90%          0.003011\n 99.9%        0.005564\n max          0.013085\n dtype: float64\n In [46]: wi_pd.describe(percentiles=[0.75,0.9,0.999])\n Out[46]:\n count    49995.000000\n mean         0.004218\n std          0.000633\n min          0.003169\n 50%          0.004068\n 75%          0.004368\n 90%          0.004831\n 99.9%        0.008685\n max          0.042645\n dtype: float64\n <denchmark-link:https://user-images.githubusercontent.com/24483645/33205841-439d053c-d100-11e7-9214-c53f887ef6a0.png></denchmark-link>\n \n \t\t"}, "comments_17": {"comment_id": 18, "comment_author": "NMRobert", "commentT": "2017-11-26T13:03:14Z", "comment_text": "\n \t\tResolved at <denchmark-link:https://github.com/GPflow/GPflow/pull/575>#575</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "30120a183c81cc5d18af0a00ae35e3ec9e06063a", "commit_author": "Artem Artemev", "commitT": "2017-11-25 12:33:07+00:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": ".travis.yml", "file_new_name": ".travis.yml", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "16", "deleted_lines": "16"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "gpflow\\decors.py", "file_new_name": "gpflow\\decors.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "149,150,151,152,155", "deleted_lines": "149,150,151,154", "method_info": {"method_name": "autoflow.autoflow.autoflow_wrapper.runnable", "method_params": "obj,args,kwargs", "method_startline": "139", "method_endline": "155"}}, "hunk_1": {"Ismethod": 1, "added_lines": "149,150,151,152,155", "deleted_lines": "149,150,151,154", "method_info": {"method_name": "autoflow", "method_params": "af_args,af_kwargs", "method_startline": "136", "method_endline": "157"}}, "hunk_2": {"Ismethod": 1, "added_lines": "149,150,151,152,155", "deleted_lines": "149,150,151,154", "method_info": {"method_name": "autoflow.autoflow_wrapper", "method_params": "method", "method_startline": "137", "method_endline": "156"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "gpflow\\misc.py", "file_new_name": "gpflow\\misc.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "196,197,198", "deleted_lines": null, "method_info": {"method_name": "_find_initializable_tensors.uninitialized_names", "method_params": "", "method_startline": "196", "method_endline": "198"}}, "hunk_1": {"Ismethod": 1, "added_lines": "156,157,158,159,160,161,162,163,164,165,166,167,168", "deleted_lines": null, "method_info": {"method_name": "initialize_variables", "method_params": "variables,session,force,run_kwargs", "method_startline": "156", "method_endline": "168"}}, "hunk_2": {"Ismethod": 1, "added_lines": "171,172,173,174,175,176", "deleted_lines": null, "method_info": {"method_name": "_initializable_tensors", "method_params": "initializables", "method_startline": "171", "method_endline": "176"}}, "hunk_3": {"Ismethod": 1, "added_lines": null, "deleted_lines": "85,86,87", "method_info": {"method_name": "initialize_variables.uninitialized_names", "method_params": "", "method_startline": "85", "method_endline": "87"}}, "hunk_4": {"Ismethod": 1, "added_lines": "179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210", "deleted_lines": null, "method_info": {"method_name": "_find_initializable_tensors", "method_params": "intializables,session", "method_startline": "179", "method_endline": "210"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "gpflow\\params\\dataholders.py", "file_new_name": "gpflow\\params\\dataholders.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "89", "deleted_lines": null, "method_info": {"method_name": "_init_parameter_defaults", "method_params": "self", "method_startline": "86", "method_endline": "89"}}, "hunk_1": {"Ismethod": 1, "added_lines": "82,83,84", "deleted_lines": "81", "method_info": {"method_name": "_build", "method_params": "self", "method_startline": "81", "method_endline": "84"}}, "hunk_2": {"Ismethod": 1, "added_lines": "79", "deleted_lines": null, "method_info": {"method_name": "_clear", "method_params": "self", "method_startline": "75", "method_endline": "79"}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 8, "file_old_name": "gpflow\\params\\parameter.py", "file_new_name": "gpflow\\params\\parameter.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "283,284,285,286,287", "deleted_lines": null, "method_info": {"method_name": "read_value", "method_params": "self,session", "method_startline": "282", "method_endline": "291"}}, "hunk_1": {"Ismethod": 1, "added_lines": "219,220,221,222,223,224", "deleted_lines": null, "method_info": {"method_name": "is_initialized", "method_params": "self,session", "method_startline": "219", "method_endline": "224"}}, "hunk_2": {"Ismethod": 1, "added_lines": "213,214,215,216,217", "deleted_lines": null, "method_info": {"method_name": "is_initialized_tensor", "method_params": "self", "method_startline": "213", "method_endline": "217"}}, "hunk_3": {"Ismethod": 1, "added_lines": "361,362,363,364,365", "deleted_lines": "345,346,347", "method_info": {"method_name": "_build_parameter", "method_params": "self", "method_startline": "345", "method_endline": "365"}}, "hunk_4": {"Ismethod": 1, "added_lines": "339,340,341,342,343", "deleted_lines": null, "method_info": {"method_name": "_build", "method_params": "self", "method_startline": "335", "method_endline": "343"}}, "hunk_5": {"Ismethod": 1, "added_lines": "328,329,330,331,332,333", "deleted_lines": "326", "method_info": {"method_name": "_clear", "method_params": "self", "method_startline": "326", "method_endline": "333"}}, "hunk_6": {"Ismethod": 1, "added_lines": "402", "deleted_lines": null, "method_info": {"method_name": "_init_parameter_defaults", "method_params": "self", "method_startline": "401", "method_endline": "406"}}, "hunk_7": {"Ismethod": 1, "added_lines": "186", "deleted_lines": "186", "method_info": {"method_name": "initializables", "method_params": "self", "method_startline": "183", "method_endline": "186"}}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "gpflow\\training\\tensorflow_optimizer.py", "file_new_name": "gpflow\\training\\tensorflow_optimizer.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "36", "deleted_lines": "36", "method_info": {"method_name": "minimize", "method_params": "self,model,session,var_list,feed_dict,maxiter,initialize,anchor,kwargs", "method_startline": "35", "method_endline": "36"}}, "hunk_1": {"Ismethod": 1, "added_lines": "36", "deleted_lines": "36", "method_info": {"method_name": "minimize", "method_params": "self,model,session,var_list,feed_dict,maxiter,initialize,anchor,kwargs", "method_startline": "35", "method_endline": "36"}}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "setup.py", "file_new_name": "setup.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "4", "deleted_lines": "4"}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "tests\\test_coregion.py", "file_new_name": "tests\\test_coregion.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "100", "deleted_lines": null, "method_info": {"method_name": "test_kernel_variance", "method_params": "self", "method_startline": "98", "method_endline": "106"}}, "hunk_1": {"Ismethod": 1, "added_lines": "90", "deleted_lines": "88,89,90,91,92", "method_info": {"method_name": "test_likelihood_variance", "method_params": "self", "method_startline": "88", "method_endline": "96"}}, "hunk_2": {"Ismethod": 1, "added_lines": "120,130,133", "deleted_lines": "132,135", "method_info": {"method_name": "test_predicts", "method_params": "self", "method_startline": "118", "method_endline": "167"}}, "hunk_3": {"Ismethod": 1, "added_lines": "75,76,77,78,79,80,81,82,83,84,85,86,90", "deleted_lines": "75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92", "method_info": {"method_name": "setUp", "method_params": "self", "method_startline": "75", "method_endline": "92"}}, "hunk_4": {"Ismethod": 1, "added_lines": "75,76,77,78,79,80,81,82,83,84,85,86", "deleted_lines": "75,76,77,78,79,80,81,82,83,84,85,86", "method_info": {"method_name": "setup", "method_params": "self", "method_startline": "75", "method_endline": "86"}}, "hunk_5": {"Ismethod": 1, "added_lines": "110", "deleted_lines": null, "method_info": {"method_name": "test_mean_values", "method_params": "self", "method_startline": "108", "method_endline": "116"}}}}, "file_8": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\test_features.py", "file_new_name": "tests\\test_features.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "40,41,42,43", "deleted_lines": "40,41", "method_info": {"method_name": "test_inducing_points_equivalence", "method_params": "self", "method_startline": "34", "method_endline": "46"}}, "hunk_1": {"Ismethod": 1, "added_lines": "24,30", "deleted_lines": "24,30", "method_info": {"method_name": "test_feature_len", "method_params": "self", "method_startline": "23", "method_endline": "31"}}}}, "file_9": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\test_hmc.py", "file_new_name": "tests\\test_hmc.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "103,104,105,106", "method_info": {"method_name": "test_burn", "method_params": "self", "method_startline": "91", "method_endline": "107"}}}}, "file_10": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "tests\\test_kerns.py", "file_new_name": "tests\\test_kerns.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "386,387,391,392,393,394,395", "deleted_lines": "388,389,390,391", "method_info": {"method_name": "test_asymm", "method_params": "self", "method_startline": "385", "method_endline": "397"}}, "hunk_1": {"Ismethod": 1, "added_lines": "372,373,374,377,378,379,380,381", "deleted_lines": "371,372,375,376,377,378,383", "method_info": {"method_name": "test_symm", "method_params": "self", "method_startline": "371", "method_endline": "383"}}, "hunk_2": {"Ismethod": 1, "added_lines": "356,357,358,359,360,361,362,363,364,365,366,367,368,369", "deleted_lines": "356,357,358,359,360,361,362,363,364,365,366,367,368", "method_info": {"method_name": "kernels", "method_params": "self", "method_startline": "356", "method_endline": "369"}}, "hunk_3": {"Ismethod": 1, "added_lines": "356,357,358,359,360,361,362,363,364,365,366,367,368", "deleted_lines": "355,356,357,358,359,360,361,362,363,364,365,366,367,368", "method_info": {"method_name": "setUp", "method_params": "self", "method_startline": "355", "method_endline": "368"}}}}, "file_11": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\test_likelihoods.py", "file_new_name": "tests\\test_likelihoods.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "399", "method_info": {"method_name": "test_likelihood_checks", "method_params": "self", "method_startline": "351", "method_endline": "405"}}}}, "file_12": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\test_methods.py", "file_new_name": "tests\\test_methods.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "210,215,216", "method_info": {"method_name": "check_models_close", "method_params": "self,m1,m2,tolerance", "method_startline": "206", "method_endline": "219"}}}}, "file_13": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\test_optimizers.py", "file_new_name": "tests\\test_optimizers.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "95", "deleted_lines": null, "method_info": {"method_name": "test_optimizer_with_var_list", "method_params": "self", "method_startline": "85", "method_endline": "121"}}, "hunk_1": {"Ismethod": 1, "added_lines": "63,70,78,83", "deleted_lines": "63,77,82", "method_info": {"method_name": "test_different_sessions", "method_params": "self", "method_startline": "62", "method_endline": "83"}}}}, "file_14": {"file_change_type": "MODIFY", "file_Nmethod": 11, "file_old_name": "tests\\test_param.py", "file_new_name": "tests\\test_param.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "656", "deleted_lines": null, "method_info": {"method_name": "test_add_parameter_to_empty_parameterized", "method_params": "self", "method_startline": "649", "method_endline": "657"}}, "hunk_1": {"Ismethod": 1, "added_lines": "452", "deleted_lines": null, "method_info": {"method_name": "test_is_built", "method_params": "self", "method_startline": "431", "method_endline": "456"}}, "hunk_2": {"Ismethod": 1, "added_lines": "256,257,258,259,260,261,262", "deleted_lines": null, "method_info": {"method_name": "test_str", "method_params": "self", "method_startline": "256", "method_endline": "262"}}, "hunk_3": {"Ismethod": 1, "added_lines": "367", "deleted_lines": null, "method_info": {"method_name": "test_existing_tensor", "method_params": "self", "method_startline": "364", "method_endline": "368"}}, "hunk_4": {"Ismethod": 1, "added_lines": "188,189,190,191", "deleted_lines": "188,190", "method_info": {"method_name": "test_initialized.assert_exception", "method_params": "args,fun,exception", "method_startline": "188", "method_endline": "191"}}, "hunk_5": {"Ismethod": 1, "added_lines": "890", "deleted_lines": null, "method_info": {"method_name": "test_setitem", "method_params": "self", "method_startline": "870", "method_endline": "891"}}, "hunk_6": {"Ismethod": 1, "added_lines": "172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195", "deleted_lines": "188,190,193,195", "method_info": {"method_name": "test_initialized", "method_params": "self", "method_startline": "172", "method_endline": "195"}}, "hunk_7": {"Ismethod": 1, "added_lines": "697", "deleted_lines": null, "method_info": {"method_name": "test_fails_after_compile", "method_params": "self", "method_startline": "694", "method_endline": "700"}}, "hunk_8": {"Ismethod": 1, "added_lines": "272", "deleted_lines": null, "method_info": {"method_name": "test_assign", "method_params": "self", "method_startline": "270", "method_endline": "286"}}, "hunk_9": {"Ismethod": 1, "added_lines": "292", "deleted_lines": null, "method_info": {"method_name": "test_assign_tensor", "method_params": "self", "method_startline": "288", "method_endline": "293"}}, "hunk_10": {"Ismethod": 1, "added_lines": "212,213,215,216,217,218,220,221,222,223,224,225,226,227,228,229,230,232,235,237", "deleted_lines": "222,242", "method_info": {"method_name": "test_fail_scenarios", "method_params": "self", "method_startline": "197", "method_endline": "254"}}}}, "file_15": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\test_profiling.py", "file_new_name": "tests\\test_profiling.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "68", "method_info": {"method_name": "test_autoflow", "method_params": "self", "method_startline": "53", "method_endline": "74"}}}}}}}