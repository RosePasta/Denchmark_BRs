{"BR": {"BR_id": "1096", "BR_author": "ryanwongsa", "BRopenT": "2020-06-02T19:54:15Z", "BRcloseT": "2020-06-04T20:25:34Z", "BR_text": {"BRsummary": "Training on TPU with threading", "BRdescription": "\n <denchmark-h:h2>\u2753 Questions/Help/Support</denchmark-h>\n \n Currently I am trying to train multiple folds of my dataset on each TPU core using threading but ignite has issues where the one thread either takes preference over others or causes my training to crash.\n I created two simple versions to show an ignite version of MNIST on multiple folds vs a regular pytorch version as an example\n \n Ignite TPU multi-fold\n Pytorch TPU multi-fold\n \n The pure Pytorch version doesn't seem to have any issues but ignite version seems inconsistent. I think it how the metrics work on multiple threads. So was wondering if there is any easy way to solve this issue?\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ryanwongsa", "commentT": "2020-06-02T20:42:57Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ryanwongsa>@ryanwongsa</denchmark-link>\n  thank you for this excellent usecase !! I suspect some issues with some unwanted syncs. Thank you again for the codes, we will have a look on it !!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ryanwongsa", "commentT": "2020-06-02T22:35:07Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ryanwongsa>@ryanwongsa</denchmark-link>\n  let me investigate the issue. Since yesterday we merged a huge part of dist config handling which should normally work on GPUs and TPUs.\n Looking the code in details, the codes are not exactly the same:\n \n in ignite version we should not use num_workers=1 and pin_memory=True with XLA.\n our implementation of create_supervised_evaluator unfortunately does not do barrier=True. => we should fix that, probably.\n in pytorch code, they do not add loss.item() for performances issue (I presume).\n \n However, with all those updates, I constantly now experience desynchronization of threads which leads to crashes of jupyter kernel. I need to investigate what happens.\n Maybe there is an issue with our ProgressBar and RunningAverage.\n I replaced the first by tqdm directly and removed logging the loss.\n Here is my version: <denchmark-link:https://colab.research.google.com/gist/vfdev-5/d6bce745a4a70195630725008a1be7f3/ignite_on_tpus.ipynb#scrollTo=6LwB-prr4Bbt>https://colab.research.google.com/gist/vfdev-5/d6bce745a4a70195630725008a1be7f3/ignite_on_tpus.ipynb#scrollTo=6LwB-prr4Bbt</denchmark-link>\n \n PS: There is no synchornization for gradient or metrics computation, right ? So, seems like, all threads are training their own model's copy and have no idea of the presence of others...\n For example, xm.optimizer_step internally does reduce_gradients if\n torch_xla._XLAC._xla_get_replication_devices_count() > 1, but inside main_fold  this value is 0.\n <denchmark-link:https://github.com/pytorch/xla/blob/a53987acc382460c7ab9a3afb7f1a21a18dbba45/torch_xla/core/xla_model.py#L555>https://github.com/pytorch/xla/blob/a53987acc382460c7ab9a3afb7f1a21a18dbba45/torch_xla/core/xla_model.py#L555</denchmark-link>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "ryanwongsa", "commentT": "2020-06-02T23:23:24Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/vfdev-5>@vfdev-5</denchmark-link>\n  thanks for your feedback, I tried running your version and set the metrics for the evaluator to be an empty dictionary and commented out the printing of the metrics and it seems to run without crashing. So I think the main issue is that there is some sort of synchronisation for metric computation even when the trainers are independent.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "ryanwongsa", "commentT": "2020-06-02T23:31:55Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ryanwongsa>@ryanwongsa</denchmark-link>\n  well, let me check that. Thanks for pointing out about metrics' sync for XLA. We need to verify it. Naively, I would say it tries to  with world size = 1, so nothing special... but as we have more than one device used maybe there are some interferences...\n PS: I was wondering why not to use xmp.spawn for a similar task ? This will properly define working group and metrics will be correctly reduced (I hope my tests are not wrong :)\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "ryanwongsa", "commentT": "2020-06-02T23:50:16Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/vfdev-5>@vfdev-5</denchmark-link>\n  Just incase it is of any use, I am pretty sure I was experiencing this issue before the changes from PR <denchmark-link:https://github.com/pytorch/ignite/pull/1042>#1042</denchmark-link>\n  was merged so it might be a general sync issue that might affect GPUs too but I haven\u2019t tried it.\n Also it is weird that the metrics in the evaluator is causing the kernel to crash as it crashes during the training process, so it might be an initialisation issue (maybe?).\n As for the xmp.spawn, I could be wrong but I though the spawn was for when you want to train one model on all cores. In my case I wanted to train 5 fold cross validation simultaneously with 1 fold for each TPU core.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "ryanwongsa", "commentT": "2020-06-02T23:57:20Z", "comment_text": "\n \t\t\n As for the xmp.spawn, I could be wrong but I though the spawn was for when you want to train one model on all cores. In my case I wanted to train 5 fold cross validation simultaneously with 1 fold for each TPU core.\n \n OK, I understand your use-case. Yes, that's correct about xmp.spawn and one model on all cores.\n \n @vfdev-5 Just incase it is of any use, I am pretty sure I was experiencing this issue before the changes from PR #1042 was merged so it might be a general sync issue that might affect GPUs too but I haven\u2019t tried it.\n \n Thanks ! Need to dig into that. Normally, with GPUs if no initialized native torch processing group, we should not do anything to sync ... But, again, let me investigate it.\n \n Also it is weird that the metrics in the evaluator is causing the kernel to crash as it crashes during the training process, so it might be an initialisation issue (maybe?).\n \n Yeah, I remarked that too. On metrics creation we check current world size...\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "ryanwongsa", "commentT": "2020-06-03T00:20:45Z", "comment_text": "\n \t\tI think I got the problem which is here :\n \n \n \n ignite/ignite/distributed/comp_models/xla.py\n \n \n         Lines 31 to 33\n       in\n       2d30d1d\n \n \n \n \n \n \n  def create_from_context() -> Optional[\"_XlaDistModel\"]: \n \n \n \n  if not has_xla_support: \n \n \n \n  return None \n \n \n \n \n \n We create a XLA distributed computation model just if we have xla support. And when we setup it\n we compute various params like nprocs per node etc by using all_reduce which should cause crashing at some point ...\n If I hack the condition as has_xla_support and xm.xrt_world_size() > 1, seems like it can compute without crashing...\n But definitely, there is a bug in the code.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "ryanwongsa", "commentT": "2020-06-03T07:35:27Z", "comment_text": "\n \t\tThanks, I tried that change on my project and it works.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "ryanwongsa", "commentT": "2020-06-03T09:12:29Z", "comment_text": "\n \t\tI think k-fold is a scenario that we have to improve with distributed feature.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "ryanwongsa", "commentT": "2020-06-04T20:30:10Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ryanwongsa>@ryanwongsa</denchmark-link>\n  I just merged a PR that should fix this issue. You can try it with this Colab:\n <denchmark-link:https://colab.research.google.com/gist/vfdev-5/d6bce745a4a70195630725008a1be7f3/ignite_on_tpus.ipynb>https://colab.research.google.com/gist/vfdev-5/d6bce745a4a70195630725008a1be7f3/ignite_on_tpus.ipynb</denchmark-link>\n \n Note: concerning the threading, please see the comment from xla devs : <denchmark-link:https://github.com/pytorch/xla/issues/2171#issuecomment-639065832>pytorch/xla#2171 (comment)</denchmark-link>\n \n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "ryanwongsa", "commentT": "2020-06-04T21:02:58Z", "comment_text": "\n \t\tNice, thanks for the quick fix and update regarding the threading.\n \t\t"}}}, "commit": {"commit_id": "f9645c0f07c3d07f77251f3d6c92e68bc8cc6ac3", "commit_author": "vfdev", "commitT": "2020-06-04 22:25:33+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "ignite\\distributed\\comp_models\\base.py", "file_new_name": "ignite\\distributed\\comp_models\\base.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "24,25,26,27,28,29,30", "deleted_lines": null, "method_info": {"method_name": "_setup_attrs", "method_params": "self", "method_startline": "24", "method_endline": "30"}}, "hunk_1": {"Ismethod": 1, "added_lines": "33,34", "deleted_lines": null, "method_info": {"method_name": "_compute_ntasks_per_node", "method_params": "self", "method_startline": "33", "method_endline": "34"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "ignite\\distributed\\comp_models\\native.py", "file_new_name": "ignite\\distributed\\comp_models\\native.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "88,89,90,91,92,93,94", "method_info": {"method_name": "_setup_attrs", "method_params": "self", "method_startline": "88", "method_endline": "94"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "ignite\\distributed\\comp_models\\xla.py", "file_new_name": "ignite\\distributed\\comp_models\\xla.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "87,88", "deleted_lines": null, "method_info": {"method_name": "device", "method_params": "self", "method_startline": "86", "method_endline": "88"}}, "hunk_1": {"Ismethod": 1, "added_lines": null, "deleted_lines": "61,62,63,64", "method_info": {"method_name": "_setup_attrs", "method_params": "self", "method_startline": "61", "method_endline": "64"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "ignite\\metrics\\metric.py", "file_new_name": "ignite\\metrics\\metric.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "455", "deleted_lines": "455", "method_info": {"method_name": "sync_all_reduce.wrapper", "method_params": "Callable", "method_startline": "444", "method_endline": "462"}}, "hunk_1": {"Ismethod": 1, "added_lines": "455", "deleted_lines": "455", "method_info": {"method_name": "sync_all_reduce.sync_all_reduce.wrapper.another_wrapper", "method_params": "Metric,args,kwargs", "method_startline": "446", "method_endline": "460"}}, "hunk_2": {"Ismethod": 1, "added_lines": "455", "deleted_lines": "455", "method_info": {"method_name": "sync_all_reduce", "method_params": "attrs", "method_startline": "443", "method_endline": "465"}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "tests\\ignite\\distributed\\comp_models\\test_xla.py", "file_new_name": "tests\\ignite\\distributed\\comp_models\\test_xla.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "195,196,197,198,199,200", "deleted_lines": null, "method_info": {"method_name": "test__xla_dist_model_run_parallel_n_threads_without_sync", "method_params": "", "method_startline": "195", "method_endline": "200"}}, "hunk_1": {"Ismethod": 1, "added_lines": "148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189", "deleted_lines": null, "method_info": {"method_name": "main_fold", "method_params": "fold", "method_startline": "148", "method_endline": "189"}}, "hunk_2": {"Ismethod": 1, "added_lines": "186,187", "deleted_lines": null, "method_info": {"method_name": "main_fold.log_progress", "method_params": "", "method_startline": "186", "method_endline": "187"}}, "hunk_3": {"Ismethod": 1, "added_lines": "166,167,168,169,170,171,172,173,174,175", "deleted_lines": null, "method_info": {"method_name": "main_fold.training_step", "method_params": "engine,_", "method_startline": "166", "method_endline": "175"}}}}}}}