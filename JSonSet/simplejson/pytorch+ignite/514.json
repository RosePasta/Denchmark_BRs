{"BR": {"BR_id": "514", "BR_author": "marrrcin", "BRopenT": "2019-05-02T16:05:17Z", "BRcloseT": "2019-05-02T16:50:41Z", "BR_text": {"BRsummary": "Tensorboard Logger does not work with layer freezing", "BRdescription": "\n Consider the following (simplified and self-contained) notebook:\n <denchmark-link:https://gist.github.com/marrrcin/629227cf33d88af6192048871daa3a09>https://gist.github.com/marrrcin/629227cf33d88af6192048871daa3a09</denchmark-link>\n \n which uses mostly the code from Ignite examples to create  and attach  to training events.\n If you use pre-trained model and freeze some layers, you end up with code that will not work, as Ignite tries to collect gradient histograms/scalars for every model parameter, even though some of them are already disabled from updating.\n The exception thrown is the following:\n <denchmark-code>---------------------------------------------------------------------------\n AttributeError                            Traceback (most recent call last)\n <ipython-input-3-5ffffec84f3c> in <module>\n      65     print(\"Done.\")\n      66 \n ---> 67 example()\n \n <ipython-input-3-5ffffec84f3c> in example()\n      62 \n      63 \n ---> 64     trainer.run(DataLoader(FakeDataset(), batch_size=16), max_epochs=5)\n      65     print(\"Done.\")\n      66 \n \n /anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/engine/engine.py in run(self, data, max_epochs)\n     357         except BaseException as e:\n     358             self._logger.error(\"Engine run is terminating due to exception: %s.\", str(e))\n --> 359             self._handle_exception(e)\n     360 \n     361         return self.state\n \n /anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/engine/engine.py in _handle_exception(self, e)\n     322             self._fire_event(Events.EXCEPTION_RAISED, e)\n     323         else:\n --> 324             raise e\n     325 \n     326     def run(self, data, max_epochs=1):\n \n /anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/engine/engine.py in run(self, data, max_epochs)\n     344                 self.state.epoch += 1\n     345                 self._fire_event(Events.EPOCH_STARTED)\n --> 346                 hours, mins, secs = self._run_once_on_dataset()\n     347                 self._logger.info(\"Epoch[%s] Complete. Time taken: %02d:%02d:%02d\", self.state.epoch, hours, mins, secs)\n     348                 if self.should_terminate:\n \n /anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/engine/engine.py in _run_once_on_dataset(self)\n     311         except BaseException as e:\n     312             self._logger.error(\"Current run is terminating due to exception: %s.\", str(e))\n --> 313             self._handle_exception(e)\n     314 \n     315         time_taken = time.time() - start_time\n \n /anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/engine/engine.py in _handle_exception(self, e)\n     322             self._fire_event(Events.EXCEPTION_RAISED, e)\n     323         else:\n --> 324             raise e\n     325 \n     326     def run(self, data, max_epochs=1):\n \n /anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/engine/engine.py in _run_once_on_dataset(self)\n     304                 self._fire_event(Events.ITERATION_STARTED)\n     305                 self.state.output = self._process_function(self, batch)\n --> 306                 self._fire_event(Events.ITERATION_COMPLETED)\n     307                 if self.should_terminate or self.should_terminate_single_epoch:\n     308                     self.should_terminate_single_epoch = False\n \n /anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/engine/engine.py in _fire_event(self, event_name, *event_args, **event_kwargs)\n     257             for func, args, kwargs in self._event_handlers[event_name]:\n     258                 kwargs.update(event_kwargs)\n --> 259                 func(self, *(event_args + args), **kwargs)\n     260 \n     261     def fire_event(self, event_name):\n \n /anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/contrib/handlers/tensorboard_logger.py in __call__(self, engine, logger, event_name)\n     219             name = name.replace('.', '/')\n     220             logger.writer.add_scalar(\"grads_{}/{}\".format(self.reduction.__name__, name),\n --> 221                                      self.reduction(p.grad),\n     222                                      global_step)\n     223 \n \n /anaconda3/envs/ignite/lib/python3.7/site-packages/torch/functional.py in norm(input, p, dim, keepdim, out, dtype)\n     676         (tensor(3.7417), tensor(11.2250))\n     677     \"\"\"\n --> 678     ndim = input.dim()\n     679 \n     680     # catch default case\n \n AttributeError: 'NoneType' object has no attribute 'dim'\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "marrrcin", "commentT": "2019-05-02T16:09:17Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/marrrcin>@marrrcin</denchmark-link>\n  thanks for reporting! Yes, you are correct that there is no checking whether .  If you would like to <denchmark-link:https://github.com/pytorch/ignite/blob/master/CONTRIBUTING.md>contribute to ignite</denchmark-link>\n  and fix this bug, it would be awesome !\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "marrrcin", "commentT": "2019-05-02T16:12:15Z", "comment_text": "\n \t\tI was just creating one: <denchmark-link:https://github.com/pytorch/ignite/pull/515>#515</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "fc85e25dc4f938d780b4c425acb2d40f6cac6f24", "commit_author": "Marcin Zab\u0142ocki", "commitT": "2019-05-02 18:50:40+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "ignite\\contrib\\handlers\\tensorboard_logger.py", "file_new_name": "ignite\\contrib\\handlers\\tensorboard_logger.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "143,144,145", "deleted_lines": null, "method_info": {"method_name": "__call__", "method_params": "self,engine,logger,event_name", "method_startline": "136", "method_endline": "149"}}}}, "file_1": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "tests\\ignite\\contrib\\handlers\\conftest.py"}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 17, "file_old_name": "tests\\ignite\\contrib\\handlers\\test_tensorboard_logger.py", "file_new_name": "tests\\ignite\\contrib\\handlers\\test_tensorboard_logger.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427", "deleted_lines": null, "method_info": {"method_name": "test_grads_hist_frozen_layers", "method_params": "dummy_model_factory", "method_startline": "404", "method_endline": "427"}}, "hunk_1": {"Ismethod": 1, "added_lines": "382,383", "deleted_lines": null, "method_info": {"method_name": "test_grads_hist_handler", "method_params": "dummy_model_factory", "method_startline": "382", "method_endline": "401"}}, "hunk_2": {"Ismethod": 1, "added_lines": "233,234,235,236,237,251,253", "deleted_lines": "233,234,235,236,237,238,239,240,241,242,243,244,246", "method_info": {"method_name": "test_weights_hist_handler", "method_params": "", "method_startline": "233", "method_endline": "264"}}, "hunk_3": {"Ismethod": 1, "added_lines": "298,299", "deleted_lines": "298,299", "method_info": {"method_name": "test_grads_scalar_handler.norm", "method_params": "x", "method_startline": "298", "method_endline": "299"}}, "hunk_4": {"Ismethod": 1, "added_lines": "283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,317,318", "deleted_lines": "283,285,287,288,289,290,291,292,293,294,296,298,299,301,311,312,314,315", "method_info": {"method_name": "test_grads_scalar_handler", "method_params": "", "method_startline": "283", "method_endline": "318"}}, "hunk_5": {"Ismethod": 1, "added_lines": "187,189", "deleted_lines": "188,189,190,191,192,193,194,195,196,197,198,199", "method_info": {"method_name": "test_weights_scalar_handler", "method_params": "dummy_model_factory", "method_startline": "187", "method_endline": "207"}}, "hunk_6": {"Ismethod": 1, "added_lines": "274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298", "deleted_lines": "283,285,287,288,289,290,291,292,293,294,296,298", "method_info": {"method_name": "test_weights_hist_handler_frozen_layers", "method_params": "dummy_model_factory", "method_startline": "274", "method_endline": "298"}}, "hunk_7": {"Ismethod": 1, "added_lines": "187,189,210,211,212,213,214,215,216,217", "deleted_lines": "186,188,189,190,191,192,193,194,195,196,197,198,199", "method_info": {"method_name": "test_weights_scalar_handler", "method_params": "", "method_startline": "186", "method_endline": "217"}}, "hunk_8": {"Ismethod": 1, "added_lines": "287,288,289,290,291,292,293,294", "deleted_lines": "287,288,289,290,291,292,293,294", "method_info": {"method_name": "test_grads_scalar_handler.__init__", "method_params": "self", "method_startline": "287", "method_endline": "294"}}, "hunk_9": {"Ismethod": 1, "added_lines": "334,335,336,337,338,341,342,344,351,360,361,362,363,364,365,366,367", "deleted_lines": "334,335,336,337,338,339,340,341,342,343,344,345,346,347,357,358,359,360,361,362", "method_info": {"method_name": "test_grads_hist_handler", "method_params": "", "method_startline": "334", "method_endline": "371"}}, "hunk_10": {"Ismethod": 1, "added_lines": "237", "deleted_lines": "237,238,239,240,241,242,243,244", "method_info": {"method_name": "test_weights_hist_handler.__init__", "method_params": "self", "method_startline": "237", "method_endline": "244"}}, "hunk_11": {"Ismethod": 1, "added_lines": "210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235", "deleted_lines": "233,234,235", "method_info": {"method_name": "test_weights_scalar_handler_frozen_layers", "method_params": "dummy_model_factory", "method_startline": "210", "method_endline": "235"}}, "hunk_12": {"Ismethod": 1, "added_lines": "251,253", "deleted_lines": null, "method_info": {"method_name": "test_weights_hist_handler", "method_params": "dummy_model_factory", "method_startline": "251", "method_endline": "271"}}, "hunk_13": {"Ismethod": 1, "added_lines": "341,342,344,351,360,361,362,363,364,365,366", "deleted_lines": "341,342,343,344,345,346,347,357,358,359,360,361,362", "method_info": {"method_name": "test_grads_scalar_handler_frozen_layers", "method_params": "dummy_model_factory,norm_mock", "method_startline": "341", "method_endline": "366"}}, "hunk_14": {"Ismethod": 1, "added_lines": "317,318,320,321,322,323,324,325,326,327,329,330,331,332,333,334,335,336,337,338", "deleted_lines": "334,335,336,337,338", "method_info": {"method_name": "test_grads_scalar_handler", "method_params": "dummy_model_factory,norm_mock", "method_startline": "317", "method_endline": "338"}}, "hunk_15": {"Ismethod": 1, "added_lines": null, "deleted_lines": "190,191,192,193,194,195,196,197", "method_info": {"method_name": "test_weights_scalar_handler.__init__", "method_params": "self", "method_startline": "190", "method_endline": "197"}}, "hunk_16": {"Ismethod": 1, "added_lines": "338,341,342,344", "deleted_lines": "338,339,340,341,342,343,344,345", "method_info": {"method_name": "test_grads_hist_handler.__init__", "method_params": "self", "method_startline": "338", "method_endline": "345"}}}}}}}