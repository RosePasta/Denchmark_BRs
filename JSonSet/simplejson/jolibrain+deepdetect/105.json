{"BR": {"BR_id": "105", "BR_author": "voidabhi", "BRopenT": "2016-04-18T08:17:58Z", "BRcloseT": "2016-05-16T13:40:57Z", "BR_text": {"BRsummary": "ERROR - service myserv mllib bad param: no deploy file in ../../models/ggnet for initializing the net", "BRdescription": "\n I am getting this error while running following command:\n curl -X POST \"http://localhost:8080/predict\" -d \"{\\\"service\\\":\\\"myserv\\\",\\\"parameters\\\":{\\\"input\\\":{\\\"width\\\":125,\\\"height\\\":93},\\\"output\\\":{\\\"best\\\":3}},\\\"data\\\":[\\\"path/to/image\\\"]}\"\n On doing ls ../../models/ggnet gives\n <denchmark-code>deploy.prototxt  googlenet.prototxt  googlenet_solver.prototxt  model.json\n </denchmark-code>\n \n i.e deploy.prototxt exists in the path.\n Kindly guide me through this. What am i doing wrong?\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "voidabhi", "commentT": "2016-04-18T08:31:28Z", "comment_text": "\n \t\tHi, can you share the PUT services call as well as the output from the server ? The server is probably not reading from the repository you are listing files from.\n As a tip, try to not use relative paths for models and data repositories as they can only be relative to the directory the server has been started from.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "voidabhi", "commentT": "2016-04-18T08:33:37Z", "comment_text": "\n \t\tThanks for reverting :)\n Here is the python script through which i had created the service\n from dd_client import DD\n dd = DD('localhost')\n dd.set_return_format(dd.RETURN_PYTHON)\n description = 'image classification service'\n mllib = 'caffe'\n model = {'templates':'../templates/caffe/','repository':'../../models/ggnet'}\n parameters_input = {'connector':'image'}\n parameters_mllib = {'template':'googlenet','nclasses':1000}\n parameters_output = {}\n print dd.put_service('myserv',model,description,mllib,\n                parameters_input,parameters_mllib,parameters_output)\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "voidabhi", "commentT": "2016-04-18T08:38:32Z", "comment_text": "\n \t\tTry passing an absolute path to repository, that is the most likely error here.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "voidabhi", "commentT": "2016-04-18T08:40:25Z", "comment_text": "\n \t\tTried it with /opt/models/ggnet. Getting the same error.\n Also, I am running dd server inside docker (ubuntu) and this script outside. Is that right?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "voidabhi", "commentT": "2016-04-18T08:45:25Z", "comment_text": "\n \t\tYour docker container cannot read outside of its own filesystem without some work. By default, our docker container mounts /data for internal use. You can either move your model inside the container, or create /data and put it in there to then try to get the server to access it from within the container. In all cases I suggest you read a bit on how to share filesystem between outside and inside docker containers, especially if the two options above do not work easily for you.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "voidabhi", "commentT": "2016-04-18T08:49:54Z", "comment_text": "\n \t\tI guess i have communicated it wrong.\n The complete dd project including templates and models are inside the docker container filesystem.\n Only the scripts for creating and testing services are outside.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "voidabhi", "commentT": "2016-04-18T09:01:02Z", "comment_text": "\n \t\tPlease come onto <denchmark-link:https://gitter.im/beniz/deepdetect>https://gitter.im/beniz/deepdetect</denchmark-link>\n  as this would take too long within a ticket.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "voidabhi", "commentT": "2016-04-18T09:06:47Z", "comment_text": "\n \t\t[closed by mistake]\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "voidabhi", "commentT": "2016-05-05T16:24:56Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/voidabhi>@voidabhi</denchmark-link>\n  have you succeeded by yourself (or given up) ?\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "voidabhi", "commentT": "2016-05-07T10:11:57Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/beniz>@beniz</denchmark-link>\n  Unfortunately when i had tried again with my updates in dockerfile it didn't work. Didn't get time in between to resolve the issue.\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "voidabhi", "commentT": "2016-05-15T21:19:30Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/voidabhi>@voidabhi</denchmark-link>\n  my apologies for the delay. So, I've taken time to give it a try and your Python script needs to be modified to not use the  parameter, as below:\n from dd_client import DD\n dd = DD('localhost')\n dd.set_return_format(dd.RETURN_PYTHON)\n description = 'image classification service'\n mllib = 'caffe'\n model = {'repository':'../../models/ggnet'}\n parameters_input = {'connector':'image'}\n parameters_mllib = {'nclasses':1000}\n parameters_output = {}\n print dd.put_service('myserv',model,description,mllib,\n                parameters_input,parameters_mllib,parameters_output)\n That is, use the template parameter to create the neural net architecture once, and after that remove it.\n The reason is that there's a pre-trained model in  after the service has been created once. The deepdetect server now includes a protection against using a  when a model and its neural net architecture files are already in a repository (<denchmark-link:https://github.com/beniz/deepdetect/commit/d84ea7f5f92aead307f860a7ce2bc28fc7ace334>beniz@d84ea7f</denchmark-link>\n ). While this is generating issues to new users, it was a mandatory step to ensure that production systems cannot be broken (and net architecture lost) with a missplaced API call.\n In the case of the docker deepdetect container documentation, I still consider this is a bug. The solution we are slowly converging to is to add an override on/off toggle to the API.\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "voidabhi", "commentT": "2016-05-16T13:40:57Z", "comment_text": "\n \t\tThe commit above fixes the issue, and README has been updated. Closing. cc <denchmark-link:https://github.com/voidabhi>@voidabhi</denchmark-link>\n  in case you decide to retry, let us know how it goes.\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "voidabhi", "commentT": "2017-10-12T06:50:23Z", "comment_text": "\n \t\tIt seems the files type in docker are read as  DT_UNKNOWN, so add the \"DT_UNKNOWN\" files to the file list could solver the problem in my case.\n \t\t"}}}, "commit": {"commit_id": "ff7bf26369f32e3496c295b80fb6302633ed86aa", "commit_author": "Emmanuel Benazera", "commitT": "2016-05-16 15:39:40+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "docker\\README.md", "file_new_name": "docker\\README.md", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "40,68", "deleted_lines": "40,68"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "docker\\cpu\\Dockerfile", "file_new_name": "docker\\cpu\\Dockerfile", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "33,34", "deleted_lines": null}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "docker\\gpu\\Dockerfile", "file_new_name": "docker\\gpu\\Dockerfile", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "34,35", "deleted_lines": null}}}}}}