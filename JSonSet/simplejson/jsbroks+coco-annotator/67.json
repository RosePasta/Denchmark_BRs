{"BR": {"BR_id": "67", "BR_author": "matt-deboer", "BRopenT": "2019-01-16T23:40:46Z", "BRcloseT": "2019-01-24T18:18:42Z", "BR_text": {"BRsummary": "INITIALIZE_FROM_FILE requires a 'current_user'", "BRdescription": "\n Related to <denchmark-link:https://github.com/jsbroks/coco-annotator/issues/50>#50</denchmark-link>\n , it looks like this feature may have been broken in recent user-based changes.\n Specifically:\n <denchmark-code>[ERROR] Exception in worker process\n Traceback (most recent call last):\n   File \"/usr/local/lib/python3.6/site-packages/gunicorn/arbiter.py\", line 583, in spawn_worker\n     worker.init_process()\n   File \"/usr/local/lib/python3.6/site-packages/gunicorn/workers/base.py\", line 129, in init_process\n     self.load_wsgi()\n   File \"/usr/local/lib/python3.6/site-packages/gunicorn/workers/base.py\", line 138, in load_wsgi\n     self.wsgi = self.app.wsgi()\n   File \"/usr/local/lib/python3.6/site-packages/gunicorn/app/base.py\", line 67, in wsgi\n     self.callable = self.load()\n   File \"/usr/local/lib/python3.6/site-packages/gunicorn/app/wsgiapp.py\", line 52, in load\n     return self.load_wsgiapp()\n   File \"/usr/local/lib/python3.6/site-packages/gunicorn/app/wsgiapp.py\", line 41, in load_wsgiapp\n     return util.import_app(self.app_uri)\n   File \"/usr/local/lib/python3.6/site-packages/gunicorn/util.py\", line 350, in import_app\n     __import__(module)\n   File \"/workspace/app/__init__.py\", line 61, in <module>\n     create_from_json(Config.INITIALIZE_FROM_FILE)\n   File \"/workspace/app/models.py\", line 374, in create_from_json\n     upsert(DatasetModel, query={ \"name\": name}, update=dataset_json)\n   File \"/workspace/app/models.py\", line 347, in upsert\n     new_model.save()\n   File \"/workspace/app/models.py\", line 45, in save\n     self.owner = current_user.username\n   File \"/usr/local/lib/python3.6/site-packages/werkzeug/local.py\", line 347, in __getattr__\n     return getattr(self._get_current_object(), name)\n AttributeError: 'NoneType' object has no attribute 'username'\n </denchmark-code>\n \n It looks like in models.py:45,\n <denchmark-code>self.owner = current_user.username\n </denchmark-code>\n \n there will not be any current_user available when the app is initializing; maybe there should be a special 'system' owner? Or perhaps the initializer.json file could contain a user section which would associate the datasets/categories created with a particular user...\n Or maybe this feature should just be replaced with an API call so it will always have an associated user?\n Then again, that would create a need to manually create users before being able to use the API...probably at least need a builtin admin account for such bootstrap concerns...\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "matt-deboer", "commentT": "2019-01-23T23:58:19Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/jsbroks>@jsbroks</denchmark-link>\n  I'm thinking the best approach is to add a built-in  user with a password configured via environment variables--then, use this account for bootstrapping concerns via API calls.\n So, if the env ADMIN_PASSWORD is specified, then an admin user is created on startup with that password, defaulting to username admin (overridden via env ADMIN_USERNAME).\n Then, the effects of INITIALIZE_FROM_FILE can be accomplished with normal api calls.\n What do you think?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "matt-deboer", "commentT": "2019-01-24T01:13:56Z", "comment_text": "\n \t\tI'm not quite for the idea of adding users using environment variables as it starts to complicate the experience.\n Even adding a simple line such as:\n username = current.username\n ... = username if username else \"system\"\n would be a simple fix.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "matt-deboer", "commentT": "2019-01-24T17:40:38Z", "comment_text": "\n \t\tok, sounds good. PR coming shortly.\n \t\t"}}}, "commit": {"commit_id": "1a2da49bb2d9f839f924893163506dbaa37de9b3", "commit_author": "Matt DeBoer", "commitT": "2019-01-24 13:18:41-05:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "app\\models.py", "file_new_name": "app\\models.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "201,202,203,204,205", "deleted_lines": "198", "method_info": {"method_name": "save", "method_params": "self,copy,args,kwargs", "method_startline": "190", "method_endline": "206"}}, "hunk_1": {"Ismethod": 1, "added_lines": "45,46,47,48", "deleted_lines": "45", "method_info": {"method_name": "save", "method_params": "self,args,kwargs", "method_startline": "35", "method_endline": "50"}}}}}}}