{"BR": {"BR_id": "644", "BR_author": "FGeri", "BRopenT": "2020-08-27T07:32:35Z", "BRcloseT": "2020-08-29T10:15:58Z", "BR_text": {"BRsummary": "[BUG] Pipelining multiple augmentations return wrong transformation matrix", "BRdescription": "\n <denchmark-h:h2>\ud83d\udc1b Bug</denchmark-h>\n \n Transformation matrices get calculated wrongly when fed though more than one augmentation.\n <denchmark-h:h2>To Reproduce</denchmark-h>\n \n <denchmark-code>>>> import kornia as K\n >>> import torch\n >>> from kornia.augmentation import random_generator as rg\n >>> input = torch.tensor([[1., 0., 0.],\n                   [0., 1., 2.,],\n                   [0., 0., 1.,]]).view((1,1,3,3))\n \n >>> params = rg.random_rotation_generator(batch_size=1,degrees=torch.tensor([90.,90.]))\n >>> hflip = K.augmentation.RandomHorizontalFlip(1.0,return_transform=True)\n >>> rot = K.augmentation.RandomRotation(degrees=90.0, return_transform=True)\n >>> rotated_img,T_rot = rot(input,params)\n >>> final_img_true, T_hflip = hflip(rotated_img)\n >>> T_true = T_hflip @ T_rot\n >>> final_img,T = hflip(rot(input,params))\n \n >>> assert torch.allclose(final_img_true,final_img), \"Result images don't match.\"\n >>> assert torch.allclose(T_true,T), \"Transformations don't match.\"\n AssertionError: Transformations don't match.\n \n </denchmark-code>\n \n <denchmark-h:h2>Expected behavior</denchmark-h>\n \n A pipeline of multiple the augmentation moduls should return the correct transformation matrix.\n <denchmark-h:h2>Environment</denchmark-h>\n \n PyTorch version: 1.6.0\n Is debug build: False\n CUDA used to build PyTorch: 10.2\n OS: Ubuntu 18.04.4 LTS (x86_64)\n GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\n Clang version: Could not collect\n CMake version: version 3.18.1\n Python version: 3.6 (64-bit runtime)\n Is CUDA available: True\n CUDA runtime version: 10.2.89\n GPU models and configuration: GPU 0: GeForce RTX 2080 Ti\n Nvidia driver version: 440.44\n cuDNN version: /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5\n Versions of relevant libraries:\n [pip3] numpy==1.19.1\n [pip3] torch==1.6.0\n [pip3] torchvision==0.7.0\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "FGeri", "commentT": "2020-08-27T07:49:33Z", "comment_text": "\n \t\tIf I remember right, shouldn't be T_true = T_rot @ T_hflip?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "FGeri", "commentT": "2020-08-27T08:12:33Z", "comment_text": "\n \t\tFor applying a transformation given by a matrix we have to multiply with it from the left. So since we first rotate an v=[x,y,1] point v_rotated =  T_rot @ v, then v_final = T_hflip @ v_rotated. Fixing this in the AugmentationBase doesn't break any tests, so ops might not have been mixed resulting in equal transformation matrices hence order of the matrices did't matter.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "FGeri", "commentT": "2020-08-27T08:32:45Z", "comment_text": "\n \t\tCan you give a PR to fix this?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "FGeri", "commentT": "2020-08-27T08:36:29Z", "comment_text": "\n \t\tSure, I'll write some tests and open a PR.\n \t\t"}}}, "commit": {"commit_id": "25531b6a77b494378d8f6e3818c29d9119763abc", "commit_author": "FGeri", "commitT": "2020-08-29 12:15:57+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "kornia\\augmentation\\augmentation.py", "file_new_name": "kornia\\augmentation\\augmentation.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "61", "deleted_lines": "61"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "test\\augmentation\\test_augmentation.py", "file_new_name": "test\\augmentation\\test_augmentation.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62", "deleted_lines": null, "method_info": {"method_name": "test_forward", "method_params": "self,device,dtype", "method_startline": "20", "method_endline": "62"}}, "hunk_1": {"Ismethod": 1, "added_lines": "64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86", "deleted_lines": null, "method_info": {"method_name": "test_gradcheck", "method_params": "self,device,dtype", "method_startline": "64", "method_endline": "86"}}}}}}}