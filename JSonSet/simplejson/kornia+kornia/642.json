{"BR": {"BR_id": "642", "BR_author": "jatentaki", "BRopenT": "2020-08-26T08:22:07Z", "BRcloseT": "2020-09-12T09:36:34Z", "BR_text": {"BRsummary": "warp_frame_depth fails with different aspect ratios between src and dst", "BRdescription": "\n <denchmark-h:h2>\ud83d\udc1b Bug</denchmark-h>\n \n As in the title: I am trying to get kornia.geometry.warp_frame_depth to work for my project and a seemingly intermittent bug appears to boil down to that - warp_frame_depth works when the aspect ratios of src and dst match but fails otherwise.\n <denchmark-h:h2>To Reproduce</denchmark-h>\n \n I made a small repro repository with sample images, depths and camera parameters <denchmark-link:https://github.com/jatentaki/warp-bug>here</denchmark-link>\n . Just clone it and execute  to see the behavior (it uses kornia, numpy, matplotlib, imageio and h5py modules). You can comment out lines 6-7 in favor of 10-11 to see a working example with images of equal aspect ratio.\n <denchmark-h:h2>Expected behavior</denchmark-h>\n \n The warping behavior should not depend on aspect ratios. It may seem that a workaround is to pad the images until they are of equal shape, but this doesn't seem to be the case.\n <denchmark-h:h2>Environment</denchmark-h>\n \n kornia 0.4.0\n PyTorch version: 1.6.0\n Is debug build: No\n CUDA used to build PyTorch: None\n OS: Ubuntu 18.04.5 LTS\n GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\n Clang version: 6.0.0-1ubuntu2 (tags/RELEASE_600/final)\n CMake version: version 3.18.2\n Python version: 3.8 (64-bit runtime)\n Is CUDA available: No\n CUDA runtime version: No CUDA\n GPU models and configuration: No CUDA\n Nvidia driver version: No CUDA\n cuDNN version: No CUDA\n Versions of relevant libraries:\n [pip3] numpy==1.19.1\n [pip3] torch==1.6.0\n [pip3] torch-cluster==1.5.4\n [pip3] torch-dimcheck==0.0.1\n [pip3] torch-geometric==1.4.3\n [pip3] torch-localize==0.1.0\n [pip3] torch-scatter==2.0.4\n [pip3] torch-sparse==0.6.2\n [pip3] torchvision==0.7.0\n [conda] blas                      1.0                         mkl\n [conda] cpuonly                   1.0                           0    pytorch\n [conda] mkl                       2020.1                      217\n [conda] mkl-service               2.3.0            py38he904b0f_0\n [conda] mkl_fft                   1.1.0            py38h23d657b_0\n [conda] mkl_random                1.1.1            py38h0573a6f_0\n [conda] numpy                     1.19.1           py38hbc911f0_0\n [conda] numpy-base                1.19.1           py38hfa32c7d_0\n [conda] pytorch                   1.6.0               py3.8_cpu_0  [cpuonly]  pytorch\n [conda] torch-cluster             1.5.4                    pypi_0    pypi\n [conda] torch-dimcheck            0.0.1                    pypi_0    pypi\n [conda] torch-geometric           1.4.3                    pypi_0    pypi\n [conda] torch-localize            0.1.0                    pypi_0    pypi\n [conda] torch-scatter             2.0.4                    pypi_0    pypi\n [conda] torch-sparse              0.6.2                    pypi_0    pypi\n [conda] torchvision               0.7.0                  py38_cpu  [cpuonly]  pytorch\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "jatentaki", "commentT": "2020-08-26T09:51:18Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/jatentaki>@jatentaki</denchmark-link>\n  not suprised since we didn't design the functionality to support this use case. Just to verify, does it work if you resize the depth maps to the image resolution ? by doing that you might have to scale the camera intrinsics too <denchmark-link:https://kornia.readthedocs.io/en/latest/geometry.epipolar.html#kornia.geometry.epipolar.scale_intrinsics>https://kornia.readthedocs.io/en/latest/geometry.epipolar.html#kornia.geometry.epipolar.scale_intrinsics</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "jatentaki", "commentT": "2020-08-26T10:00:54Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/edgarriba>@edgarriba</denchmark-link>\n  I'm not sure if I follow: if I rescale an image to match the size of another with a different aspect ratio, I will apply different scaling to x and y axes. This means that  will not work since it applies uniform scaling. Am I misunderstanding something?\n My actual use case is to warp between images of equal tensor shape (so that they can be batched), but they represent different camera aspect ratios. I scale (along with camera intrinsics) and zero-pad them to arrive at the same tensor size, but logically they represent different photo shapes. It still doesn't work in that case. In fact, I first thought there was something wrong with my scale/pad/adjust intrinsics code, and that's why I am posting this code above, as a minimal reproducing example.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "jatentaki", "commentT": "2020-08-26T10:27:06Z", "comment_text": "\n \t\tI made a <denchmark-link:https://github.com/jatentaki/warp-bug/blob/equal_shape/warp.py>branch</denchmark-link>\n  where I implement my actual use case: I first scale the images while preserving aspect ratio and then pad the shorter side to arrive at uniform (1024, 1024) shape. I adjust K with . As far as I understand, that's what you had in mind when asking me to resize depth maps to image resolution. The issue remains as can be seen when running the code.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "jatentaki", "commentT": "2020-08-29T09:14:11Z", "comment_text": "\n \t\tI'll investigate further. If you find the actual issue, please propose a fix for this\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "jatentaki", "commentT": "2020-08-29T11:05:52Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/edgarriba>@edgarriba</denchmark-link>\n  thanks. I made yet another <denchmark-link:https://github.com/jatentaki/warp-bug/tree/centered>branch</denchmark-link>\n  where I symmetrically pad the images on both sides (so it's like  instead of ) and set  to the center of the padded image (since in my data the focal point is always the center anyway). This doesn't work either, but to my surprise it gives different results (distortions) than the previous mode of padding.\n I am far from comfortable with epipolar geometry so it can well be a grave misunderstanding of mine rather than a bug, but in any case we would ideally arrive at a working example to include in the repo.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "jatentaki", "commentT": "2020-08-31T17:18:07Z", "comment_text": "\n \t\tJust had a quick glance on the problem and while the <denchmark-link:https://github.com/kornia/kornia/blob/master/kornia/geometry/warp/depth_warper.py>depth warper</denchmark-link>\n  can deal with different cameras from source do destination, it's not the case for the function <denchmark-link:https://github.com/kornia/kornia/blob/8991e4d5f7a0fa1f04029311821a50d9fcf5e93f/kornia/geometry/depth.py#L107>warp_frame_depth</denchmark-link>\n \n You should try to use the  function instead. It will need you to create two pinhole cameras though. (, see <denchmark-link:https://github.com/kornia/kornia/blob/8991e4d5f7a0fa1f04029311821a50d9fcf5e93f/kornia/geometry/camera/pinhole.py#L11>here</denchmark-link>\n  )\n We might need to add an optional K2 parameter to the warp_depth_frame function to take this into account.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "jatentaki", "commentT": "2020-09-01T07:45:00Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ClementPinard>@ClementPinard</denchmark-link>\n  thanks for your suggestion - you are definitely right. In case <denchmark-link:https://github.com/jatentaki>@jatentaki</denchmark-link>\n 's issue is solved using , we must definitely merge both functionalities.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "jatentaki", "commentT": "2020-09-01T09:17:16Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ClementPinard>@ClementPinard</denchmark-link>\n  thanks a lot for investigating, I'll use  soon and let you know if my problem is solved.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "jatentaki", "commentT": "2020-09-01T13:41:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ClementPinard>@ClementPinard</denchmark-link>\n  could you share your code using ? I <denchmark-link:https://github.com/jatentaki/warp-bug/tree/pinhole_equal>tried</denchmark-link>\n  but I can't get it right. Interestingly, now the previously problematic case (unequal aspect ratio) is close to being correct while the equal aspect ratio pair is completely distorted. I am a bit confused about the API, in particular\n \n What is the use of height, width parameters in depth_warp, given that we provide both intrinsics (as part of PinholeCamera) and image tensor shapes (since we provide both depth_src and image_dst)? It mirrors the API of DepthWarper, but in this case couldn't this be inferred from the remaining parameters?\n What should be the layout of intrinsics matrix? The introduction to kornia.geometry.camera introduces a 3x4 Rt and a 3x3 K but then the docs for PinholeCamera itself speak of both being 4x4. I inferred from source code that both should be \"extended\" by an extra row/column with zeros and one on the diagonal, but I am not sure if I am reading this correctly.\n \n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "jatentaki", "commentT": "2020-09-02T16:57:35Z", "comment_text": "\n \t\tI completely agree with you that the depth_warp API is far from flexible enough. Height and width should be deducted from depth shape, and Intrinsics the here needs to be 4x4 should only need to be 3x3 and the conversion should be done within the class.\n Other than that I couldn't get right results for the moment. I can share you the code, but it does not work and I don't know exactly why. I'll get back to you with the solution when I find it :)\n Anyway, here's what I wrote (on top of your own script):\n <denchmark-link:https://gist.github.com/ClementPinard/e7353dee56faf3f4c62f0753a2703568>https://gist.github.com/ClementPinard/e7353dee56faf3f4c62f0753a2703568</denchmark-link>\n \n It's possible I don't use the API right myself, I'll have to investigate.\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "jatentaki", "commentT": "2020-09-02T17:34:00Z", "comment_text": "\n \t\tAfter some more investigation, there IS a bug in kornia. in test/geometry/warp/test_depth_warper.py , the case with different intrinsics from src to dst is never tested, and when we change that, the test fails.\n This does not say that my implementation is correct, but at least we know that something in Kornia either regarding depth warper or depth warper's tests needs to be changed.\n We might need to change the test script so that it now addresses the different intrinsics case and solve the now failing test and then we will be able to look at this problem. And obviously, there is also the problem of the warp_depth_frame function API that needs to change as well to accept the second intrinsics parameter.\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "jatentaki", "commentT": "2020-09-03T14:21:39Z", "comment_text": "\n \t\tI think I found it. <denchmark-link:https://github.com/kornia/kornia/blob/master/kornia/geometry/warp/depth_warper.py#L83>This</denchmark-link>\n  line effectively computes\n trans = pinhole_src.extrinsics.inverse() @ self._pinhole_dst.extrinsics\n whereas it should be\n trans = self._pinhole_dst.extrinsics @ pinhole_src.extrinsics.inverse()\n instead. I'll make a PR.\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "jatentaki", "commentT": "2020-09-07T09:18:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ClementPinard>@ClementPinard</denchmark-link>\n  <denchmark-link:https://github.com/jatentaki>@jatentaki</denchmark-link>\n  thanks for taking a look at it. Please, propose any change you think that might be more suitable to stabilize the API.\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "jatentaki", "commentT": "2020-09-07T09:21:10Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/jatentaki>@jatentaki</denchmark-link>\n  for the intrinsice, indeed it's a mistake since it should be a Bx3x3 matrix.\n \t\t"}}}, "commit": {"commit_id": "70d14474fc61307c0583d4bbe472c7081a2d141d", "commit_author": "Micha\u0142 Tyszkiewicz", "commitT": "2020-09-12 11:36:33+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "kornia\\geometry\\warp\\depth_warper.py", "file_new_name": "kornia\\geometry\\warp\\depth_warper.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "6,82,83,84,85", "deleted_lines": "6,7,83,84"}}}}}}