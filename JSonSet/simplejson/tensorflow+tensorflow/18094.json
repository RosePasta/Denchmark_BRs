{"BR": {"BR_id": "18094", "BR_author": "zmjjmz", "BRopenT": "2018-03-29T18:13:25Z", "BRcloseT": "2018-04-20T23:10:42Z", "BR_text": {"BRsummary": "`tf.keras.estimator._create_ordered_io` casts everything to floatx, which breaks non-floatx inputs", "BRdescription": "\n <denchmark-h:h3>System information</denchmark-h>\n \n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Debian 3.16.36\n TensorFlow installed from (source or binary): Installed via pip\n TensorFlow version (use command below): ('v1.6.0-0-gd2e24b6039', '1.6.0')\n Python version: 2.7.9\n Bazel version (if compiling from source):\n GCC/Compiler version (if compiling from source):\n CUDA/cuDNN version: n/a\n GPU model and memory: n/a\n Exact command to reproduce: Requires significant code, let me know if necessary\n \n <denchmark-h:h3>Describe the problem</denchmark-h>\n \n This is kind of a simple issue with using Keras models as Tensorflow Estimators. I unfortunately need to do this awkward conversion in order to use SageMaker, which is even more awkwardly behind by two versions of Tensorflow. Which is fun.\n Basically, I have a  model that expects a  input , which is then passed through to a Lookup layer for some text embeddings. This works fine as a Keras model and works fine if I extract the input layers myself and connect them into an Estimator. However, if I go to create an estimator from the model using  I run into this code path: <denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.6/tensorflow/python/keras/_impl/keras/estimator.py#L80>https://github.com/tensorflow/tensorflow/blob/r1.6/tensorflow/python/keras/_impl/keras/estimator.py#L80</denchmark-link>\n \n This conversion then causes the model to break further down the line. I'm not sure why this float cast occurs, but this commit <denchmark-link:https://github.com/tensorflow/tensorflow/commit/4c86ece040cb96ea689f5c0d084b6959274eab91#diff-69effda952f96b36c8015cc1a3462d65>4c86ece#diff-69effda952f96b36c8015cc1a3462d65</denchmark-link>\n  seems to imply that Keras models are meant to only take floatx input, which doesn't really seem right.\n Would not doing this cast break anything? If so, is there a way to use a non-float32 input with Keras models that need to be converted to Estimators?\n Thanks!\n <denchmark-h:h3>Source code / logs</denchmark-h>\n \n Here's the exact traceback for the issue:\n <denchmark-code>/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/h5py/__init__.py:34: FutureWarning: Conversion of the second argument \n of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.          \n   from ._conv import register_converters as _register_converters                                                                           \n WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmp6Wogzk                                                               \n 2018-03-29 14:12:41.586292: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow       \n binary was not compiled to use: AVX2 FMA                                                                                                   \n WARNING:tensorflow:Output \"final_representation\" missing from loss dictionary. We assume this was done on purpose, and we will not be      \n expecting any data to be passed to \"final_representation\" during training.                                                                 \n WARNING:tensorflow:Output \"oov_code\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any    \n data to be passed to \"oov_code\" during training.                                                                                           \n Testing common_estimator_fns.py locally                                                                                                    \n Making estimator                                                                                                                           \n Model dir: /tmp/tmp6Wogzk                                                                                                                  \n Training estimator                                                                                                                         \n float64                                                                                                                                    \n Tensor(\"random_shuffle_queue_DequeueMany:1\", shape=(32, 1), dtype=string, device=/device:CPU:0)                                            \n Traceback (most recent call last):                                                                                                         \n   File \"common_estimator_fns.py\", line 423, in <module>                                                                                    \n     hooks=[tf_debug.LocalCLIDebugHook()])                                                                                                  \n   File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.py\", line 352, in train \n     loss = self._train_model(input_fn, hooks, saving_listeners)                                                                            \n   File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.py\", line 812, in       \n _train_model                                                                                                                               \n     features, labels, model_fn_lib.ModeKeys.TRAIN, self.config)                                                                            \n   File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.py\", line 793, in       \n _call_model_fn                                                                                                                             \n     model_fn_results = self._model_fn(features=features, **kwargs)                                                                         \n   File \"common_estimator_fns.py\", line 381, in model_fn                                                                                    \n     return keras_model_fn(features, labels, mode)                                                                                          \n   File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/estimator.py\", line 160,  \n in model_fn                                                                                                                                \n     labels)                                                                                                                                \n   File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/estimator.py\", line 109,  \n in _clone_and_build_model                                                                                                                  \n     model = models.clone_model(keras_model, input_tensors=input_tensors)                                                                   \n   File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/models.py\", line 1557, in \n clone_model                                                                                                                                \n     return _clone_functional_model(model, input_tensors=input_tensors)                                                                     \n   File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/models.py\", line 1451, in \n _clone_functional_model                                                                                                                    \n     output_tensors = topology._to_list(layer(computed_tensor, **kwargs))                                                                   \n   File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line \n 258, in __call__                                                                                                                           \n     output = super(Layer, self).__call__(inputs, **kwargs)                                                                                 \n   File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 673, in __call__      \n     self._assert_input_compatibility(inputs)                                                                                               \n   File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 1204, in              \n _assert_input_compatibility                                                                                                                \n     ', found dtype=' + str(x.dtype))                                                                                                       \n ValueError: Input 0 of layer lookedup is incompatible with the layer: expected dtype=<dtype: 'string'>, found dtype=<dtype: 'float32'>     \n </denchmark-code>\n \n I can provide code if absolutely necessary, but it'd take some work to get to a minimal reproduction.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "zmjjmz", "commentT": "2018-03-29T18:21:19Z", "comment_text": "\n \t\tLooking at the history of this file, using other types were never tested.\n We should use <denchmark-link:https://www.tensorflow.org/api_docs/python/tf/is_numeric_tensor>https://www.tensorflow.org/api_docs/python/tf/is_numeric_tensor</denchmark-link>\n  before casting\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "zmjjmz", "commentT": "2018-04-03T17:05:21Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/fchollet>@fchollet</denchmark-link>\n  Can you take a look at this?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "zmjjmz", "commentT": "2018-04-12T00:08:37Z", "comment_text": "\n \t\tI confirm this bug. /cc <denchmark-link:https://github.com/lenlen>@lenlen</denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "zmjjmz", "commentT": "2018-04-12T19:09:43Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/yifeif>@yifeif</denchmark-link>\n  what do you think about this issue? Could it be a simple fix?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "zmjjmz", "commentT": "2018-04-12T19:16:48Z", "comment_text": "\n \t\tI opened a PR <denchmark-link:https://github.com/tensorflow/tensorflow/pull/18104>#18104</denchmark-link>\n  as a starting point.\n \t\t"}}}, "commit": {"commit_id": "3fa8795c511931b55a9703956bdf564fde817c2a", "commit_author": "Fr\u00e9d\u00e9ric Branchaud-Charron", "commitT": "2018-04-20 16:10:41-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow\\python\\keras\\_impl\\keras\\estimator.py", "file_new_name": "tensorflow\\python\\keras\\_impl\\keras\\estimator.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "60,61,62,63,64,65,66,67,68", "deleted_lines": null, "method_info": {"method_name": "_convert_tensor", "method_params": "x", "method_startline": "60", "method_endline": "68"}}, "hunk_1": {"Ismethod": 1, "added_lines": "102,124,129", "deleted_lines": "89,111,116", "method_info": {"method_name": "_create_ordered_io", "method_params": "keras_model,estimator_io,is_input", "method_startline": "84", "method_endline": "129"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "tensorflow\\python\\keras\\_impl\\keras\\estimator_test.py", "file_new_name": "tensorflow\\python\\keras\\_impl\\keras\\estimator_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "360,361,362,363,364,365,366,373,374,379,380", "deleted_lines": "361,366", "method_info": {"method_name": "test_multi_inputs_multi_outputs", "method_params": "self", "method_startline": "347", "method_endline": "391"}}, "hunk_1": {"Ismethod": 1, "added_lines": "373,374", "deleted_lines": null, "method_info": {"method_name": "test_multi_inputs_multi_outputs.train_input_fn", "method_params": "", "method_startline": "372", "method_endline": "376"}}, "hunk_2": {"Ismethod": 1, "added_lines": "379,380", "deleted_lines": null, "method_info": {"method_name": "test_multi_inputs_multi_outputs.eval_input_fn", "method_params": "", "method_startline": "378", "method_endline": "382"}}, "hunk_3": {"Ismethod": 1, "added_lines": "148,150,152,153,154,156,159", "deleted_lines": "145,151,154", "method_info": {"method_name": "multi_inputs_multi_outputs_model", "method_params": "", "method_startline": "145", "method_endline": "167"}}}}}}}