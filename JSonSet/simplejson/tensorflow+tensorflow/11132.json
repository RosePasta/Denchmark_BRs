{"BR": {"BR_id": "11132", "BR_author": "galeone", "BRopenT": "2017-06-29T08:49:31Z", "BRcloseT": "2017-07-07T01:10:25Z", "BR_text": {"BRsummary": "Go: SIGABRT when executing the same node more than once", "BRdescription": "\n <denchmark-h:h2>Problem</denchmark-h>\n \n In Go, when we pass the same node to the fetches list more then once SIGABRT is raised.\n <denchmark-h:h3>Source code / logs</denchmark-h>\n \n package poc_test\n \n import (\n         \"fmt\"\n         tf \"github.com/tensorflow/tensorflow/tensorflow/go\"\n         \"github.com/tensorflow/tensorflow/tensorflow/go/op\"\n         \"testing\"\n )\n \n func TestFunc(t *testing.T) {\n         // Create root scope\n         root := op.NewScope()\n \n         // Define graph\n \n         // Create a constant matrix\n         A := op.Const(root.SubScope(\"A\"), [2][2]int32{{1, 2}, {-1, -2}})\n         // Create a constant column vector\n         b := op.Const(root.SubScope(\"b\"), [2][1]int32{{10}, {100}})\n         // Create a matmul operation\n         mul := op.MatMul(root.SubScope(\"MatMul\"), A, b)\n \n         // Finalize the graph\n         graph, _ := root.Finalize()\n \n         // Create the session\n         var sess *tf.Session\n         sess, _ = tf.NewSession(graph, &tf.SessionOptions{})\n         // Run\n         var results []*tf.Tensor\n         var err error\n         if results, err = sess.Run(nil, []tf.Output{mul, mul}, nil); err != nil {\n                 t.Errorf(err.Error())\n         }\n         fmt.Println(results[0].Value())\n }\n Here's the output:\n <denchmark-code>go test poc_test.go \n 2017-06-29 10:46:09.154744: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n 2017-06-29 10:46:09.155330: I tensorflow/core/common_runtime/gpu/gpu_device.cc:938] Found device 0 with properties: \n name: GeForce GTX 1080 Ti\n major: 6 minor: 1 memoryClockRate (GHz) 1.582\n pciBusID 0000:03:00.0\n Total memory: 10.91GiB\n Free memory: 249.38MiB\n 2017-06-29 10:46:09.267778: W tensorflow/stream_executor/cuda/cuda_driver.cc:523] A non-primary context 0x1f22910 exists before initializing the StreamExecutor. We haven't verified StreamExecutor works with that.\n 2017-06-29 10:46:09.268001: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n 2017-06-29 10:46:09.268357: I tensorflow/core/common_runtime/gpu/gpu_device.cc:938] Found device 1 with properties: \n name: GeForce GTX 1060 6GB\n major: 6 minor: 1 memoryClockRate (GHz) 1.7845\n pciBusID 0000:01:00.0\n Total memory: 5.93GiB\n Free memory: 5.34GiB\n 2017-06-29 10:46:09.268390: I tensorflow/core/common_runtime/gpu/gpu_device.cc:830] Peer access not supported between device ordinals 0 and 1\n 2017-06-29 10:46:09.268399: I tensorflow/core/common_runtime/gpu/gpu_device.cc:830] Peer access not supported between device ordinals 1 and 0\n 2017-06-29 10:46:09.268409: I tensorflow/core/common_runtime/gpu/gpu_device.cc:959] DMA: 0 1 \n 2017-06-29 10:46:09.268415: I tensorflow/core/common_runtime/gpu/gpu_device.cc:969] 0:   Y N \n 2017-06-29 10:46:09.268421: I tensorflow/core/common_runtime/gpu/gpu_device.cc:969] 1:   N Y \n 2017-06-29 10:46:09.268433: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1028] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:03:00.0)\n 2017-06-29 10:46:09.268440: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1028] Creating TensorFlow device (/gpu:1) -> (device: 1, name: GeForce GTX 1060 6GB, pci bus id: 0000:01:00.0)\n 2017-06-29 10:46:09.290295: F tensorflow/c/c_api.cc:488] Check failed: nelems == 0 (2 vs. 0)\n SIGABRT: abort\n PC=0x7fa8684dc670 m=0 sigcode=18446744073709551610\n signal arrived during cgo execution\n \n goroutine 5 [syscall, locked to thread]:\n runtime.cgocall(0x50d580, 0xc420043d68, 0x530100)\n         /usr/lib/go/src/runtime/cgocall.go:131 +0xe2 fp=0xc420043d20 sp=0xc420043ce0\n github.com/tensorflow/tensorflow/tensorflow/go._Cfunc_TF_SessionRun(0x2beb8a0, 0x0, 0x0, 0x0, 0x0, 0xc42000ce40, 0xc420011040, 0xc400000002, 0x0, 0x0, ...)\n         github.com/tensorflow/tensorflow/tensorflow/go/_obj/_cgo_gotypes.go:703 +0x45 fp=0xc420043d68 sp=0xc420043d20\n github.com/tensorflow/tensorflow/tensorflow/go.(*Session).Run.func1(0x2beb8a0, 0x0, 0x0, 0x0, 0x0, 0xc42000ce40, 0xc420011040, 0xc400000002, 0x0, 0x0, ...)\n         /home/pgaleone/projects/go/src/github.com/tensorflow/tensorflow/tensorflow/go/session.go:87 +0x23a fp=0xc420043dd8 sp=0xc420043d68\n github.com/tensorflow/tensorflow/tensorflow/go.(*Session).Run(0xc42000ce20, 0x0, 0xc420043f50, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\n         /home/pgaleone/projects/go/src/github.com/tensorflow/tensorflow/tensorflow/go/session.go:91 +0x243 fp=0xc420043e70 sp=0xc420043dd8\n command-line-arguments_test.TestFunc(0xc4200665b0)\n         /home/pgaleone/projects/go/src/github.com/galeone/asd/poc_test.go:32 +0x35d fp=0xc420043fa8 sp=0xc420043e70\n testing.tRunner(0xc4200665b0, 0x562278)\n         /usr/lib/go/src/testing/testing.go:657 +0x96 fp=0xc420043fd0 sp=0xc420043fa8\n runtime.goexit()\n         /usr/lib/go/src/runtime/asm_amd64.s:2197 +0x1 fp=0xc420043fd8 sp=0xc420043fd0\n created by testing.(*T).Run\n         /usr/lib/go/src/testing/testing.go:697 +0x2ca\n \n goroutine 1 [chan receive]:\n testing.(*T).Run(0xc4200664e0, 0x559659, 0x8, 0x562278, 0xc420053d20)\n         /usr/lib/go/src/testing/testing.go:698 +0x2f4\n testing.runTests.func1(0xc4200664e0)\n         /usr/lib/go/src/testing/testing.go:882 +0x67\n testing.tRunner(0xc4200664e0, 0xc420053de0)\n         /usr/lib/go/src/testing/testing.go:657 +0x96\n testing.runTests(0xc42000cd80, 0x7ecf80, 0x1, 0x1, 0x4131ac)\n         /usr/lib/go/src/testing/testing.go:888 +0x2c1\n testing.(*M).Run(0xc420053f20, 0xc420053f20)\n         /usr/lib/go/src/testing/testing.go:822 +0xfc\n main.main()\n         command-line-arguments/_test/_testmain.go:42 +0xf7\n \n goroutine 17 [syscall, locked to thread]:\n runtime.goexit()\n         /usr/lib/go/src/runtime/asm_amd64.s:2197 +0x1\n \n rax    0x0\n rbx    0x6\n rcx    0x7fa8684dc670\n rdx    0x0\n rdi    0x2\n rsi    0x7ffe4515bf50\n rbp    0x7ffe4515c1a0\n rsp    0x7ffe4515bf50\n r8     0x0\n r9     0x7ffe4515bf50\n r10    0x8\n r11    0x246\n r12    0x2\n r13    0x2\n r14    0x2bf8160\n r15    0x20\n rip    0x7fa8684dc670\n rflags 0x246\n cs     0x33\n fs     0x0\n gs     0x0\n FAIL    command-line-arguments  0.544s\n </denchmark-code>\n \n The same logic,  in python, works without any issue:\n import tensorflow as tf\n \n A = tf.constant([[1,2], [-1, -2]])\n b = tf.constant([[10], [100]])\n \n mul = tf.matmul(A, b)\n \n with tf.Session() as sess:\n     print(sess.run([mul, mul]))\n outputs\n <denchmark-code>[array([[ 210],\n        [-210]], dtype=int32), array([[ 210],\n        [-210]], dtype=int32)]\n </denchmark-code>\n \n as expected.\n <denchmark-h:h3>System information</denchmark-h>\n \n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Archlinux\n TensorFlow installed from (source or binary): source\n TensorFlow version (use command below): 1.2.0\n Bazel version (if compiling from source): 0.5.1\n CUDA/cuDNN version: cuda 8, cudnn 5.1\n GPU model and memory:  GeForce GTX 1080\n Exact command to reproduce: go test\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "galeone", "commentT": "2017-06-29T14:48:06Z", "comment_text": "\n \t\tThanks for the report, it certainly shouldn't fail with a SIGABRT.\n (That said though, am curious about the use case for fetching the same value multiple times).\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "galeone", "commentT": "2017-06-29T15:11:23Z", "comment_text": "\n \t\tI was showing that in <denchmark-link:https://github.com/galeone/tfgo>tfgo</denchmark-link>\n  when one assigns a go variable to another go variable it needs to \"clone\" it before the assignment in order to create a different and new node in the graph.\n Otherwise, the assignment only exists in Go but the underlying reference points to the same node in the graph.\n (In short, I was showing how to use tf.assing and not the assignment operator of the lanuage used).\n To empathize this, I'd like to show that those 2 Go variables when evaluated contain the same value.\n But I can't because of that bug, thus I fallback showing it in another way. The first example here: <denchmark-link:https://github.com/galeone/tfgo#getting-started>https://github.com/galeone/tfgo#getting-started</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "66604b0355b32961f9a532792be2e008cc22221f", "commit_author": "Asim Shankar", "commitT": "2017-07-05 21:35:40-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\core\\common_runtime\\direct_session.cc", "file_new_name": "tensorflow\\core\\common_runtime\\direct_session.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,640,641,642,643,644,645,646,647,648", "deleted_lines": "624,625,626,627", "method_info": {"method_name": "tensorflow::DirectSession::Run", "method_params": "run_options,inputs,output_names,target_nodes,outputs,run_metadata", "method_startline": "434", "method_endline": "689"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\core\\common_runtime\\direct_session_test.cc", "file_new_name": "tensorflow\\core\\common_runtime\\direct_session_test.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435", "deleted_lines": null, "method_info": {"method_name": "tensorflow::TEST", "method_params": "DirectSessionTest,FetchMultipleTimes", "method_startline": "409", "method_endline": "435"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\core\\distributed_runtime\\rpc\\grpc_session.cc", "file_new_name": "tensorflow\\core\\distributed_runtime\\rpc\\grpc_session.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "193,194,196,197,198,199,200,226,227,228,229,230,231,232,233,234,235,236", "deleted_lines": "193,195,196,197,198", "method_info": {"method_name": "tensorflow::GrpcSession::RunHelper", "method_params": "run_options,inputs,output_tensor_names,target_node_names,outputs,run_metadata,prun_handle", "method_startline": "166", "method_endline": "243"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\core\\distributed_runtime\\rpc\\grpc_session_test.cc", "file_new_name": "tensorflow\\core\\distributed_runtime\\rpc\\grpc_session_test.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211", "deleted_lines": null, "method_info": {"method_name": "tensorflow::TEST", "method_params": "GrpcSessionTest,FetchMultipleTimes", "method_startline": "186", "method_endline": "211"}}}}}}}