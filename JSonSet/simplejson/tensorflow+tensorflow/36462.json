{"BR": {"BR_id": "36462", "BR_author": "gabrieldemarmiesse", "BRopenT": "2020-02-04T13:55:11Z", "BRcloseT": "2020-02-28T02:20:40Z", "BR_text": {"BRsummary": "Autograph is incompatible with typeguard", "BRdescription": "\n Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template\n System information\n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): ubuntu 18.04\n Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: no\n TensorFlow installed from (source or binary): binary\n TensorFlow version (use command below): 2.1.0\n Python version: 3.6.9\n Bazel version (if compiling from source): no\n GCC/Compiler version (if compiling from source): no\n CUDA/cuDNN version: no\n GPU model and memory: no gpu\n \n You can collect some of this information using our environment capture\n <denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh>script</denchmark-link>\n \n You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: \n Describe the current behavior\n import tensorflow as tf\n from typeguard import typechecked\n @tf.function(autograph=True)\n @typechecked\n def add(a: tf.Tensor, b: tf.Tensor) -> tf.Tensor:\n     return a + b\n \n print(add(tf.ones(2), tf.zeros(2)))\n <denchmark-code>---------------------------------------------------------------------------\n NameError                                 Traceback (most recent call last)\n <ipython-input-5-5567d1a6d381> in <module>()\n       4     return a + b\n       5 \n ----> 6 print(add(tf.ones(2), tf.zeros(2)))\n \n 8 frames\n /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/def_function.py in __call__(self, *args, **kwds)\n     566         xla_context.Exit()\n     567     else:\n --> 568       result = self._call(*args, **kwds)\n     569 \n     570     if tracing_count == self._get_tracing_count():\n \n /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/def_function.py in _call(self, *args, **kwds)\n     613       # This is the first call of __call__, so we have to initialize.\n     614       initializers = []\n --> 615       self._initialize(args, kwds, add_initializers_to=initializers)\n     616     finally:\n     617       # At this point we know that the initialization is complete (or less\n \n /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/def_function.py in _initialize(self, args, kwds, add_initializers_to)\n     495     self._concrete_stateful_fn = (\n     496         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access\n --> 497             *args, **kwds))\n     498 \n     499     def invalid_creator_scope(*unused_args, **unused_kwds):\n \n /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)\n    2387       args, kwargs = None, None\n    2388     with self._lock:\n -> 2389       graph_function, _, _ = self._maybe_define_function(args, kwargs)\n    2390     return graph_function\n    2391 \n \n /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/function.py in _maybe_define_function(self, args, kwargs)\n    2701 \n    2702       self._function_cache.missed.add(call_context_key)\n -> 2703       graph_function = self._create_graph_function(args, kwargs)\n    2704       self._function_cache.primary[cache_key] = graph_function\n    2705       return graph_function, args, kwargs\n \n /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)\n    2591             arg_names=arg_names,\n    2592             override_flat_arg_shapes=override_flat_arg_shapes,\n -> 2593             capture_by_value=self._capture_by_value),\n    2594         self._function_attributes,\n    2595         # Tell the ConcreteFunction to clean up its graph once it goes out of\n \n /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)\n     976                                           converted_func)\n     977 \n --> 978       func_outputs = python_func(*func_args, **func_kwargs)\n     979 \n     980       # invariant: `func_outputs` contains only Tensors, CompositeTensors,\n \n /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/def_function.py in wrapped_fn(*args, **kwds)\n     437         # __wrapped__ allows AutoGraph to swap in a converted function. We give\n     438         # the function a weak reference to itself to avoid a reference cycle.\n --> 439         return weak_wrapped_fn().__wrapped__(*args, **kwds)\n     440     weak_wrapped_fn = weakref.ref(wrapped_fn)\n     441 \n \n /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/func_graph.py in wrapper(*args, **kwargs)\n     966           except Exception as e:  # pylint:disable=broad-except\n     967             if hasattr(e, \"ag_error_metadata\"):\n --> 968               raise e.ag_error_metadata.to_exception(e)\n     969             else:\n     970               raise\n \n NameError: in converted code:\n \n     /usr/local/lib/python3.6/dist-packages/typeguard/__init__.py:3 wrapper  *\n         check_argument_types(memo)\n     /usr/local/lib/python3.6/dist-packages/typeguard/__init__.py:663 check_argument_types  *\n         for argname, expected_type in memo.type_hints.items():\n     /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/autograph/operators/control_flow.py:339 for_stmt\n         return _py_for_stmt(iter_, extra_test, body, get_state, set_state, init_vars)\n     /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/autograph/operators/control_flow.py:348 _py_for_stmt\n         if extra_test is not None and not extra_test(*state):\n     /tmp/tmpnaoua4_l.py:96 extra_test\n         return ag__.not_(do_return)\n \n     NameError: free variable 'do_return' referenced before assignment in enclosing scope\n </denchmark-code>\n \n Describe the expected behavior\n <denchmark-code>tf.Tensor([1. 1.], shape=(2,), dtype=float32)\n </denchmark-code>\n \n Code to reproduce the issue\n Provide a reproducible test case that is the bare minimum necessary to generate the problem.\n import tensorflow as tf\n from typeguard import typechecked\n \n @tf.function(autograph=True)\n @typechecked\n def add(a: tf.Tensor, b: tf.Tensor) -> tf.Tensor:\n     return a + b\n \n print(add(tf.ones(2), tf.zeros(2)))\n See the colab notebook: <denchmark-link:https://colab.research.google.com/drive/1RTg-ysyIdKME4fbJQ1D5Dxs-11YfBV5e>https://colab.research.google.com/drive/1RTg-ysyIdKME4fbJQ1D5Dxs-11YfBV5e</denchmark-link>\n \n Other info / logs\n Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "gabrieldemarmiesse", "commentT": "2020-02-24T08:27:35Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/gabrieldemarmiesse>@gabrieldemarmiesse</denchmark-link>\n \n Can you try running the code in latest -tf-nightly ( ). The issue seemed to be fixed, kindly find the <denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/3f87aa19ac8da80ccb090f842407294a/untitled5.ipynb>gist of colab</denchmark-link>\n  for the same.Thanks!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "gabrieldemarmiesse", "commentT": "2020-02-24T10:38:49Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ravikyram>@ravikyram</denchmark-link>\n \n This issue does not seem to be fixed with the current nightly 2.2.0-dev20200218. I get the same error as before. I tested locally and in google colab (your notebook) with tf-nightly and the error is the same.\n See my minimal notebook with tensorflow uninstalled and tf-nightly installed instead:\n <denchmark-link:https://colab.research.google.com/drive/1qkIblkiFhd-jPmC6Ki4F7xemPorRbf_->https://colab.research.google.com/drive/1qkIblkiFhd-jPmC6Ki4F7xemPorRbf_-</denchmark-link>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "gabrieldemarmiesse", "commentT": "2020-02-28T02:20:42Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36462>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36462>No</denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "gabrieldemarmiesse", "commentT": "2020-02-28T03:55:35Z", "comment_text": "\n \t\tI'm not sure if the PR fixed it, but we can check with the next nightly.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "gabrieldemarmiesse", "commentT": "2020-02-28T19:14:00Z", "comment_text": "\n \t\tI checked the repro colab with the new tf-nightly, and it appears that the fix worked.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "gabrieldemarmiesse", "commentT": "2020-02-29T10:48:13Z", "comment_text": "\n \t\tI confirm! thanks it's awesome!\n \t\t"}}}, "commit": {"commit_id": "a962580295172539a3a6ae5b02836aac1cabf100", "commit_author": "Dan Moldovan", "commitT": "2020-02-27 18:18:06-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\autograph\\converters\\break_statements.py", "file_new_name": "tensorflow\\python\\autograph\\converters\\break_statements.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "146", "deleted_lines": "146", "method_info": {"method_name": "visit_For", "method_params": "self,node", "method_startline": "107", "method_endline": "149"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\autograph\\converters\\control_flow.py", "file_new_name": "tensorflow\\python\\autograph\\converters\\control_flow.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "465,466", "deleted_lines": "465,466", "method_info": {"method_name": "visit_For", "method_params": "self,node", "method_startline": "446", "method_endline": "525"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\autograph\\converters\\control_flow_deprecated_py2.py", "file_new_name": "tensorflow\\python\\autograph\\converters\\control_flow_deprecated_py2.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "490,491", "deleted_lines": "490,491", "method_info": {"method_name": "visit_For", "method_params": "self,node", "method_startline": "474", "method_endline": "604"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow\\python\\autograph\\converters\\return_statements.py", "file_new_name": "tensorflow\\python\\autograph\\converters\\return_statements.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "296,306", "deleted_lines": "296,306", "method_info": {"method_name": "visit_For", "method_params": "self,node", "method_startline": "289", "method_endline": "309"}}, "hunk_1": {"Ismethod": 1, "added_lines": "359,360,361", "deleted_lines": "363,368", "method_info": {"method_name": "visit_FunctionDef", "method_params": "self,node", "method_startline": "333", "method_endline": "385"}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\python\\autograph\\pyct\\anno.py", "file_new_name": "tensorflow\\python\\autograph\\pyct\\anno.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "62,63,64,65", "deleted_lines": null}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\autograph\\pyct\\cfg.py", "file_new_name": "tensorflow\\python\\autograph\\pyct\\cfg.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "847,848,849,850,851", "deleted_lines": null, "method_info": {"method_name": "visit_For", "method_params": "self,node", "method_startline": "837", "method_endline": "865"}}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\autograph\\pyct\\static_analysis\\activity.py", "file_new_name": "tensorflow\\python\\autograph\\pyct\\static_analysis\\activity.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "542,543", "deleted_lines": null, "method_info": {"method_name": "visit_For", "method_params": "self,node", "method_startline": "534", "method_endline": "549"}}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\autograph\\pyct\\templates.py", "file_new_name": "tensorflow\\python\\autograph\\pyct\\templates.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "121,122", "deleted_lines": "123,125", "method_info": {"method_name": "__init__", "method_params": "self,replacements", "method_startline": "111", "method_endline": "127"}}}}}}}