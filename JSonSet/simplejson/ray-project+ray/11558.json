{"BR": {"BR_id": "11558", "BR_author": "tgaddair", "BRopenT": "2020-10-22T15:59:34Z", "BRcloseT": "2020-10-23T23:39:23Z", "BR_text": {"BRsummary": "Dask on Ray: persisting a series with Ray scheduler raises error", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n Calling series.persist(scheduler=ray_dask_get) on a Dask series raises:\n <denchmark-code>ValueError: 'object_refs' must either be an object ref or a list of object refs.\n </denchmark-code>\n \n Performing the same operation using the default scheduler works fine.\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n <denchmark-code>import pandas as pd\n import dask.dataframe as dd\n import ray\n from ray.util.dask import ray_dask_get\n \n ray.init()\n \n df = pd.DataFrame({'data': ['a', 'b', 'c']})\n ddf = dd.from_pandas(df, npartitions=1)\n s = ddf['data']\n s.persist(scheduler=ray_dask_get)  # s.persist() will work\n </denchmark-code>\n \n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "tgaddair", "commentT": "2020-10-22T16:50:52Z", "comment_text": "\n \t\tCc <denchmark-link:https://github.com/clarkzinzow>@clarkzinzow</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "tgaddair", "commentT": "2020-10-22T19:01:24Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/tgaddair>@tgaddair</denchmark-link>\n  I think I know where this is happening, but is there any chance that you have a full traceback available?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "tgaddair", "commentT": "2020-10-22T19:07:53Z", "comment_text": "\n \t\tHere you go:\n <denchmark-code>---------------------------------------------------------------------------\n ValueError                                Traceback (most recent call last)\n <ipython-input-60-f9cafb99359e> in <module>\n       3 s = ddf['data']\n       4 s\n ----> 5 s.persist(scheduler=ray_dask_get)\n       6 # s.persist()\n \n env/lib/python3.7/site-packages/dask/base.py in persist(self, **kwargs)\n     138         dask.base.persist\n     139         \"\"\"\n --> 140         (result,) = persist(self, traverse=False, **kwargs)\n     141         return result\n     142 \n \n env/lib/python3.7/site-packages/dask/base.py in persist(*args, **kwargs)\n     655         postpersists.append((rebuild, a_keys, state))\n     656 \n --> 657     results = schedule(dsk, keys, **kwargs)\n     658     d = dict(zip(keys, results))\n     659     results2 = [r({k: d[k] for k in ks}, *s) for r, ks, s in postpersists]\n \n env/lib/python3.7/site-packages/ray/util/dask/scheduler.py in ray_dask_get(***failed resolving arguments***)\n     116         # cleaned up until all Ray tasks are done.\n     117         del dsk\n --> 118         result = ray_get_unpack(object_refs)\n     119         if ray_finish_cbs is not None:\n     120             for cb in ray_finish_cbs:\n \n env/lib/python3.7/site-packages/ray/util/dask/scheduler.py in ray_get_unpack(object_refs)\n     358         return repack(computed_result)\n     359     else:\n --> 360         return ray.get(object_refs)\n     361 \n     362 \n \n env/lib/python3.7/site-packages/ray/worker.py in get(object_refs, timeout)\n    1414 \n    1415         if not isinstance(object_refs, list):\n -> 1416             raise ValueError(\"'object_refs' must either be an object ref \"\n    1417                              \"or a list of object refs.\")\n    1418 \n \n ValueError: 'object_refs' must either be an object ref or a list of object refs.\n </denchmark-code>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "tgaddair", "commentT": "2020-10-22T19:32:56Z", "comment_text": "\n \t\tAwesome, thanks!\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "tgaddair", "commentT": "2020-10-23T18:51:40Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/tgaddair>@tgaddair</denchmark-link>\n   doesn't play nicely with tuples of object refs, unfortunately, and this isn't properly handled in the Dask-on-Ray scheduler. I'll submit a PR!\n \t\t"}}}, "commit": {"commit_id": "0979589c7cd8b6115e3294136b0461f4d75c00ee", "commit_author": "Clark Zinzow", "commitT": "2020-10-23 16:39:22-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\tests\\test_dask_scheduler.py", "file_new_name": "python\\ray\\tests\\test_dask_scheduler.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "35,36,37,38", "deleted_lines": null, "method_info": {"method_name": "test_ray_dask_persist", "method_params": "ray_start_regular_shared", "method_startline": "35", "method_endline": "38"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\util\\dask\\scheduler.py", "file_new_name": "python\\ray\\util\\dask\\scheduler.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "349,350,351,352,353", "deleted_lines": "349,350,351", "method_info": {"method_name": "ray_get_unpack", "method_params": "object_refs", "method_startline": "336", "method_endline": "362"}}}}}}}