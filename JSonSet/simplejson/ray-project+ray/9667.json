{"BR": {"BR_id": "9667", "BR_author": "raphaelavalos", "BRopenT": "2020-07-23T15:18:44Z", "BRcloseT": "2020-07-28T12:15:04Z", "BR_text": {"BRsummary": "[RLlib] Bugs in PyTorch version of DDPG", "BRdescription": "\n Hello,\n I spotted some bugs in the implementation of DDPG in PyTorch.\n \n \n The gradient clipping is not implemented correctly, it uses the 'grad_norm_clipping' parameter instead of 'grad_clip' and the function ray.rllib.utils.torch_ops.minimize_and_clip which is not correct. All the others algorithms seems to use ray.rllib.agents.a3c.a3c_torch_policy.apply_grad_clipping. I propose to replace minimize_and_clip by the A3C function in torch_ops.\n \n \n In the PyTorch model of DDPG the parameters to bound the action space (range and minimum) are not tracked by PyTorch as they are not registered as parameters. This means that they are not converted to cuda tensors resulting in an error.\n \n \n The target model is placed on the gpu even if ray was not configure to use the gpu.\n \n \n I will make a PR with everything. But I don't know if I should replace minimize_and_clip.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n   I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "raphaelavalos", "commentT": "2020-07-23T16:24:26Z", "comment_text": "\n \t\tI would add other issue: clamp is used to clamp the action at several places <denchmark-link:https://github.com/ray-project/ray/blob/fcdf410ae1bb5071e7d92174eace7d79be2d4ef9/rllib/utils/exploration/gaussian_noise.py#L157>here</denchmark-link>\n  and <denchmark-link:https://github.com/ray-project/ray/blob/43043ee4d5c672f7fbc22ac9559e8164731fd053/rllib/agents/ddpg/ddpg_torch_policy.py#L68>here</denchmark-link>\n , while min/max combinaison should be used instead. Indeed, clamp does not support element-wise operation and this limitation is currently circumvent by clamping with respect to the first low/high bounds of the action space, which does not make any sense.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "raphaelavalos", "commentT": "2020-07-23T16:40:47Z", "comment_text": "\n \t\tI will add that :)\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "raphaelavalos", "commentT": "2020-07-23T16:45:53Z", "comment_text": "\n \t\tNice ! Thank you \ud83d\udc4d Personally I'm doing this (for example):\n <denchmark-code>policy_tp1_smoothed = torch.min(torch.max(policy_tp1 + clipped_normal_sample,\n     torch.tensor(policy.action_space.low, dtype=torch.float32, device=policy_tp1.device)),\n     torch.tensor(policy.action_space.high, dtype=torch.float32, device=policy_tp1.device))\n </denchmark-code>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "raphaelavalos", "commentT": "2020-07-23T17:04:20Z", "comment_text": "\n \t\tNote that the problem appears <denchmark-link:https://github.com/ray-project/ray/blob/fcdf410ae1bb5071e7d92174eace7d79be2d4ef9/rllib/utils/exploration/ornstein_uhlenbeck_noise.py#L176>here</denchmark-link>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "raphaelavalos", "commentT": "2020-07-24T09:29:11Z", "comment_text": "\n \t\t\n I would add other issue: clamp is used to clamp the action at several places here and here, while min/max combinaison should be used instead. Indeed, clamp does not support element-wise operation and this limitation is currently circumvent by clamping with respect to the first low/high bounds of the action space, which does not make any sense.\n \n Yeah, but one instance of clamping is in the Exploration component (which could be used in any other algorithm) and the other is part of the DDPG algorithm. I think this one is ok here.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "raphaelavalos", "commentT": "2020-07-24T09:30:02Z", "comment_text": "\n \t\t\n Note that the problem appears here\n \n Perfect, thanks! Will fix this.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "raphaelavalos", "commentT": "2020-07-24T09:31:42Z", "comment_text": "\n \t\tLooking into minimize_and_clip issue. ...\n I think I changed it so it's more concise because we had a lot of duplicate logic in the grad-clipping code prior to adding eager support.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "raphaelavalos", "commentT": "2020-07-24T09:34:51Z", "comment_text": "\n \t\tThe target model is placed on the gpu even if ray was not configure to use the gpu.\n This should be fixed in the current master.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "raphaelavalos", "commentT": "2020-07-24T09:41:10Z", "comment_text": "\n \t\t\n Yeah, but one instance of clamping is in the Exploration component (which could be used in any other algorithm) and the other is part of the DDPG algorithm. I think this one is ok here.\n \n What do you mean ? Why would it be ok to clamp wrt to first element bounds only in some cases ?\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "raphaelavalos", "commentT": "2020-07-24T09:42:38Z", "comment_text": "\n \t\t\n \n The target model is placed on the gpu even if ray was not configure to use the gpu.\n \n This should be fixed in the current master.\n \n There is the same problem for the model itself at least for 0.86, and on master as far as I know (since torch.cuda.is_gpu_available is used to choose the device). Is it also fixed ?\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "raphaelavalos", "commentT": "2020-07-24T09:50:51Z", "comment_text": "\n \t\tYeah, we just made a fix for this a week ago or so.\n I created this PR here to fix all the other problems described above.\n <denchmark-link:https://github.com/ray-project/ray/pull/9680>#9680</denchmark-link>\n \n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "raphaelavalos", "commentT": "2020-07-24T09:51:20Z", "comment_text": "\n \t\tPlease let me know, if I'm missing anything. Leaving this open until merged (probably later today).\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "raphaelavalos", "commentT": "2020-07-24T09:52:07Z", "comment_text": "\n \t\tOn the GPU: Yes, we are no longer checking, whether we have a GPU, but whether the config actually says: num_gpus > 0 and only then place the model on the GPU.\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "raphaelavalos", "commentT": "2020-07-24T09:57:55Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/duburcqa>@duburcqa</denchmark-link>\n  <denchmark-link:https://github.com/raphaelavalos>@raphaelavalos</denchmark-link>\n \n Btw, we are very close to setting up daily automatic GPU + \"heavy\" regression tests (Atari, MuJoCo) to catch these things much earlier than we do right now. Hopefully, this will eliminate issues like the GPU one here altogether.\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "raphaelavalos", "commentT": "2020-07-24T10:05:14Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/sven1977>@sven1977</denchmark-link>\n  we did things differently so I don't know if it is relevant but in my case the tests were failing because we have two new parameters on the model. You can check my last commit (above) it fixed the tests in my case.\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "raphaelavalos", "commentT": "2020-07-24T10:31:21Z", "comment_text": "\n \t\tYeah, makes sense. If your PR is ready, feel free to ping me here so we can approve and merge it.\n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "raphaelavalos", "commentT": "2020-07-24T11:53:48Z", "comment_text": "\n \t\tI spotted yet another issue : the device may be wrong for the noise, it can be on 'cpu' device while the action is on 'gpu' device in some case (I don't know exactly when though, but it happens to me in 0.8.6). It appears <denchmark-link:https://github.com/ray-project/ray/blob/43043ee4d5c672f7fbc22ac9559e8164731fd053/rllib/agents/ddpg/ddpg_torch_policy.py#L63>here</denchmark-link>\n , <denchmark-link:https://github.com/ray-project/ray/blob/fcdf410ae1bb5071e7d92174eace7d79be2d4ef9/rllib/utils/exploration/gaussian_noise.py#L155>here</denchmark-link>\n  and <denchmark-link:https://github.com/ray-project/ray/blob/fcdf410ae1bb5071e7d92174eace7d79be2d4ef9/rllib/utils/exploration/ornstein_uhlenbeck_noise.py#L175>here</denchmark-link>\n .\n \t\t"}, "comments_17": {"comment_id": 18, "comment_author": "raphaelavalos", "commentT": "2020-07-25T09:34:50Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/sven1977>@sven1977</denchmark-link>\n  <denchmark-link:https://github.com/raphaelavalos>@raphaelavalos</denchmark-link>\n  Other bug: Pytorch  method is used to get a dict of model parameters, which is wrong.  returns something way more complex than that, including attributes.  should be used instead. Moreover, it is sometimes returning a dict instead of an OrderedDict as it should be. The issue occurs <denchmark-link:https://github.com/ray-project/ray/blob/57544b1ff9f97d4da9f64d25c8ea5a3d8d247ffc/rllib/agents/ddpg/ddpg_torch_model.py#L183>here</denchmark-link>\n  for DDPG. It should be instead:\n <denchmark-code>    def policy_variables(self, as_dict=False):\n         \"\"\"Return the list of variables for the policy net.\"\"\"\n         if as_dict:\n             return OrderedDict(self.policy_model.named_parameters())\n         return list(self.policy_model.parameters())\n \n     def q_variables(self, as_dict=False):\n         \"\"\"Return the list of variables for Q / twin Q nets.\"\"\"\n         if as_dict:\n             return OrderedDict((\n                 *self.q_model.named_parameters(),\n                 *(self.twin_q_model.named_parameters() if self.twin_q_model else [])\n             ))\n         return [*self.q_model.parameters(),\n                 *(self.twin_q_model.parameters() if self.twin_q_model else [])]\n </denchmark-code>\n \n \t\t"}, "comments_18": {"comment_id": 19, "comment_author": "raphaelavalos", "commentT": "2020-07-27T09:57:07Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/duburcqa>@duburcqa</denchmark-link>\n  I have made to change to parameters but I don't think OrderedDict is needed here.\n \t\t"}, "comments_19": {"comment_id": 20, "comment_author": "raphaelavalos", "commentT": "2020-07-27T11:15:01Z", "comment_text": "\n \t\t\n @duburcqa I have made to change to parameters but I don't think OrderedDict is needed here.\n \n Yes it is not a big deal in practice.\n \t\t"}, "comments_20": {"comment_id": 21, "comment_author": "raphaelavalos", "commentT": "2020-07-27T11:21:10Z", "comment_text": "\n \t\tWhy not to fix in this PR the clamping issue for the exploration noise I mentioned ? Because it is a more general issue than DDPG alone ?\n \t\t"}, "comments_21": {"comment_id": 22, "comment_author": "raphaelavalos", "commentT": "2020-07-27T15:51:23Z", "comment_text": "\n \t\t\n Why not to fix in this PR the clamping issue for the exploration noise I mentioned ? Because it is a more general issue than DDPG alone ?\n \n <denchmark-link:https://github.com/sven1977>@sven1977</denchmark-link>\n  Thank you for having taken care of this !\n With those 2 PRs, I think we are good.\n \t\t"}, "comments_22": {"comment_id": 23, "comment_author": "raphaelavalos", "commentT": "2020-07-30T11:14:21Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/sven1977>@sven1977</denchmark-link>\n  would it be possible to keep the issue open until <denchmark-link:https://github.com/ray-project/ray/pull/9683>#9683</denchmark-link>\n  is merged ?\n \t\t"}}}, "commit": {"commit_id": "ff9c1dac887643e464f5f829c7d8b920b0aa8140", "commit_author": "Sven Mika", "commitT": "2020-07-28 14:15:03+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "rllib\\agents\\ddpg\\ddpg_torch_model.py", "file_new_name": "rllib\\agents\\ddpg\\ddpg_torch_model.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "54,55,56", "deleted_lines": "54,55,56"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "rllib\\agents\\ddpg\\ddpg_torch_policy.py", "file_new_name": "rllib\\agents\\ddpg\\ddpg_torch_policy.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "190,191,192,193", "method_info": {"method_name": "gradients_fn", "method_params": "policy,optimizer,loss", "method_startline": "190", "method_endline": "193"}}, "hunk_1": {"Ismethod": 1, "added_lines": "67,68,70,71,72,73,74,75,76,77,78,79,80,81", "deleted_lines": "66,68,69,70", "method_info": {"method_name": "ddpg_actor_critic_loss", "method_params": "policy,model,_,train_batch", "method_startline": "31", "method_endline": "170"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "rllib\\utils\\exploration\\gaussian_noise.py", "file_new_name": "rllib\\utils\\exploration\\gaussian_noise.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "156,157,158,159,160,161,162,163,164,165,166,167,168", "deleted_lines": "156,157,158,159", "method_info": {"method_name": "_get_torch_exploration_action", "method_params": "self,action_dist,explore,timestep", "method_startline": "139", "method_endline": "177"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "rllib\\utils\\exploration\\ornstein_uhlenbeck_noise.py", "file_new_name": "rllib\\utils\\exploration\\ornstein_uhlenbeck_noise.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "176,177,178,179,180,181,182,183,184,185,186,187", "deleted_lines": "176,177,178", "method_info": {"method_name": "_get_torch_exploration_action", "method_params": "self,action_dist,explore,timestep", "method_startline": "146", "method_endline": "197"}}}}}}}