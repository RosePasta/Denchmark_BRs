{"BR": {"BR_id": "12649", "BR_author": "PidgeyBE", "BRopenT": "2020-12-07T11:40:16Z", "BRcloseT": "2020-12-11T17:35:18Z", "BR_text": {"BRsummary": "[core] exit_actor() broken with async actors", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n *1.0.1 and latest master\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n <denchmark-code>import ray\n import time\n \n ray.init()\n \n @ray.remote\n class SomeActor():\n \n     def function(self):\n         print(\"Running in sync function\")\n         time.sleep(2)\n         print(\"Done in sync function\")\n \n     async def function_async(self):\n         print(\"Running in sync function\")\n         await asyncio.sleep(2)\n         print(\"Done in sync function\")\n \n     def terminate(self):\n         print(\"Self-killing\")\n         ray.actor.exit_actor()\n \n for i in range(10):\n     try:\n         actor = SomeActor.remote()\n         second = actor.function.remote()\n         ray.get(actor.terminate.remote())\n         print(\"waiting for function\")\n         result = ray.get(second)\n         print(\"done\")\n     except Exception as e:\n         print(f\"raised {e}\")\n </denchmark-code>\n \n -> This script never ends.\n Note the async method function_async is not used, only defined. Removing this method makes the script work.\n So it seems that as soon as 1 async method is defined on an actor, ray.actor.exit_actor() is broken.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "PidgeyBE", "commentT": "2020-12-07T20:42:24Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/PidgeyBE>@PidgeyBE</denchmark-link>\n  thanks for raising this. I will look into it\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "PidgeyBE", "commentT": "2020-12-08T23:54:26Z", "comment_text": "\n \t\tThe reason is SystemExit (raised by exit_actor()) was raised in the asyncio loop thread, which isn't caught by Ray worker's main thread. A work-around is to use os._exit(0) to exit the process forcefully. But this will skip Ray worker's cleanup stack. I will continue investigate a solution for this.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "PidgeyBE", "commentT": "2020-12-11T17:36:02Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/PidgeyBE>@PidgeyBE</denchmark-link>\n  this should be fixed in Ray master once the wheel is available in few hours!\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "PidgeyBE", "commentT": "2021-01-07T15:33:46Z", "comment_text": "\n \t\tI don't understand why the changes in the linked MR are not in ray 1.1.0, but for some reason the repro script above does not freeze anymore in ray 1.1.0.\n Anyhow, the following script still freezes:\n <denchmark-code>import ray\n import time\n import asyncio\n \n ray.init()\n \n @ray.remote\n class SomeActor():\n \n     async def function_async(self):\n         print(\"Running in async function\")\n         await asyncio.sleep(2)\n         print(\"Done in async function\")\n \n     def terminate(self):\n         print(\"Self-killing\")\n         ray.actor.exit_actor()\n \n loop = asyncio.get_event_loop()\n \n for i in range(10):\n     try:\n         actor = SomeActor.remote()\n \n         async def kill():\n             actor.terminate.remote()\n \n         async def test():\n             fut = actor.function_async.remote()\n             await asyncio.wait([fut, kill()])\n         \n         loop.run_until_complete(test())\n         print(\"done\")\n     except Exception as e:\n         print(f\"raised {e}\")\n </denchmark-code>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "PidgeyBE", "commentT": "2021-01-07T17:15:54Z", "comment_text": "\n \t\tThanks for reporting! Does it still freeze in master?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "PidgeyBE", "commentT": "2021-01-07T17:28:22Z", "comment_text": "\n \t\tNo, in master there is no issue!\n \t\t"}}}, "commit": {"commit_id": "68d7fa21378a97dc8fb3ce81d3b60b2ac9d04a0d", "commit_author": "Simon Mo", "commitT": "2020-12-11 09:35:17-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "python\\ray\\_raylet.pyx", "file_new_name": "python\\ray\\_raylet.pyx", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "354,355,356,357,358,359,360,361,362,363,364,365,491,499", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\actor.py", "file_new_name": "python\\ray\\actor.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1022,1023,1024,1025,1026,1027,1028,1029", "deleted_lines": null, "method_info": {"method_name": "exit_actor", "method_params": "", "method_startline": "1006", "method_endline": "1037"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "python\\ray\\tests\\test_asyncio.py", "file_new_name": "python\\ray\\tests\\test_asyncio.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "211,212", "deleted_lines": null, "method_info": {"method_name": "test_asyncio_exit_actor.ping", "method_params": "self", "method_startline": "211", "method_endline": "212"}}, "hunk_1": {"Ismethod": 1, "added_lines": "202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224", "deleted_lines": null, "method_info": {"method_name": "test_asyncio_exit_actor", "method_params": "ray_start_regular_shared", "method_startline": "202", "method_endline": "224"}}, "hunk_2": {"Ismethod": 1, "added_lines": "208,209", "deleted_lines": null, "method_info": {"method_name": "test_asyncio_exit_actor.exit", "method_params": "self", "method_startline": "208", "method_endline": "209"}}, "hunk_3": {"Ismethod": 1, "added_lines": "214,215,216", "deleted_lines": null, "method_info": {"method_name": "test_asyncio_exit_actor.loop_forever", "method_params": "self", "method_startline": "214", "method_endline": "216"}}}}}}}