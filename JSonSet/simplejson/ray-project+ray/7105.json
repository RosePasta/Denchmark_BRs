{"BR": {"BR_id": "7105", "BR_author": "elpollouk", "BRopenT": "2020-02-10T10:26:59Z", "BRcloseT": "2020-02-11T06:40:10Z", "BR_text": {"BRsummary": "[Ray] Attempting to fetch an object that has been freed blocks forever", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n Ray: 0.8.0/0.8.1\n OS: Ubuntu 16.04/18.04\n Attempting to ray.get() an object freed using ray.internal.free() causes the get request to block forever.\n RLlib has the function <denchmark-link:https://github.com/ray-project/ray/blob/247a4d022ac4ca0a10553616b7c806c4429ed355/rllib/utils/memory.py#L12>ray_get_and_free()</denchmark-link>\n  which is used to fetch and free up samples returned from environment workers. However, when attempting to recover after a worker failure, it will try to re-fetch the last sample batch but ends up blocking the main thread as it tries to fetch an already freed object.\n When a process has become stuck in this state, it must be terminated using the kill command as Ctrl+C has no effect.\n <denchmark-h:h3>Expected Behaviour</denchmark-h>\n \n An error is raised if attempting to fetch a freed object. This allows API users to quickly detect problems related to API misuse.\n <denchmark-h:h3>Reproduction</denchmark-h>\n \n <denchmark-code>import ray\n \n @ray.remote\n class Sampler:\n     def sample(self):\n         return [1, 2, 3, 4, 5]\n \n ray.init()\n sampler = Sampler.remote()\n \n obj_id = sampler.sample.remote()\n sample = ray.get(obj_id)\n print(\"Sample: {}\".format(sample))\n \n ray.internal.free(obj_id)\n sample = ray.get(obj_id) # Will block forever here\n print(\"Refetched sample: {}\".format(sample))\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "elpollouk", "commentT": "2020-02-10T18:59:23Z", "comment_text": "\n \t\tThis is very likely hanging on the in-memory store get() call - ray.internal.free deletes the object from both the in-memory and plasma stores so the subsequent ray.get() blocks forever waiting for the in-memory store entry to appear (which it never does).\n Not sure the right solution here. We could leave a \"freed\" object in the store but it's not obvious when we can clean it up (maybe once all Python references are gone).\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "elpollouk", "commentT": "2020-02-10T19:49:33Z", "comment_text": "\n \t\tI see, I thought we only freed from plasma before actually. I think that is fine since local objects are recounted already.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "elpollouk", "commentT": "2020-02-11T10:13:09Z", "comment_text": "\n \t\tI can confirm that my test script runs to completion with the latest nightly.\n \t\t"}}}, "commit": {"commit_id": "58c94f6381922b2f1b8cd53b5c351468c0537898", "commit_author": "Eric Liang", "commitT": "2020-02-10 22:40:09-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "build.sh", "file_new_name": "build.sh", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "123,140,141,142,143", "deleted_lines": "123,140,141"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "python\\ray\\tests\\test_advanced.py", "file_new_name": "python\\ray\\tests\\test_advanced.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50", "deleted_lines": null, "method_info": {"method_name": "test_internal_free", "method_params": "shutdown_only", "method_startline": "25", "method_endline": "50"}}, "hunk_1": {"Ismethod": 1, "added_lines": "33,34", "deleted_lines": null, "method_info": {"method_name": "test_internal_free.sample_big", "method_params": "self", "method_startline": "33", "method_endline": "34"}}, "hunk_2": {"Ismethod": 1, "added_lines": "30,31", "deleted_lines": null, "method_info": {"method_name": "test_internal_free.sample", "method_params": "self", "method_startline": "30", "method_endline": "31"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ray\\core_worker\\core_worker.cc", "file_new_name": "src\\ray\\core_worker\\core_worker.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "620,621,622,623,624,625,626", "deleted_lines": "617,618,619,620,624", "method_info": {"method_name": "ray::CoreWorker::Delete", "method_params": "object_ids,local_only,delete_creating_tasks", "method_startline": "615", "method_endline": "631"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ray\\core_worker\\core_worker.h", "file_new_name": "src\\ray\\core_worker\\core_worker.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "272", "deleted_lines": "272"}}}}}}