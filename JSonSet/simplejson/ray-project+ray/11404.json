{"BR": {"BR_id": "11404", "BR_author": "architkulkarni", "BRopenT": "2020-10-15T00:19:58Z", "BRcloseT": "2020-10-23T19:01:05Z", "BR_text": {"BRsummary": "[Serve] 60 second examples don't work if run as .py file", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n The two scripts at <denchmark-link:https://docs.ray.io/en/master/serve/>https://docs.ray.io/en/master/serve/</denchmark-link>\n  print the expected result (, ) if pasted into , but not when run as a  file.  Maybe everyone just pastes examples into their interpreter, but I wonder if this could be a bad first impression for those users that try to save them and run them.\n Example:\n <denchmark-code>\u276f python quickstart_class.py\n 2020-10-14 17:17:30,101 INFO services.py:1088 -- View the Ray dashboard at http://127.0.0.1:8265\n (pid=62031) 2020-10-14 17:17:32,055     INFO controller.py:194 -- Starting router with name 'liItJb:SERVE_CONTROLLER_ACTOR:SERVE_PROXY_ACTOR-node:10.0.0.99-0' on node 'node:10.0.0.99-0' listening on '127.0.0.1:8000'\n (pid=62026) 2020-10-14 17:17:32,196     WARNING worker.py:1426 -- Using blocking ray.get inside async actor. This blocks the event loop. Please use `await` on object ref with asyncio.gather if you want to yield execution to the event loop instead.\n (pid=62026) INFO:     Started server process [62026]\n (pid=62031) 2020-10-14 17:17:34,118     INFO controller.py:704 -- Registering route '/counter' to endpoint 'counter' with methods '['GET']'.\n 2020-10-14 17:17:36,486 INFO api.py:56 -- Shutting down Ray Serve because client went out of scope. To prevent this, either keep a reference to the client object or use serve.start(detached=True).\n \u276f\n </denchmark-code>\n \n Ray version and other system information (Python version, TensorFlow version, OS):\n Ray 1.0.0, but also on master.  py3.6, MacOS\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Linked above, but here's a paste:\n from ray import serve\n import requests\n \n client = serve.start()\n \n def echo(flask_request):\n     return \"hello \" + flask_request.args.get(\"name\", \"serve!\")\n \n \n client.create_backend(\"hello\", echo)\n client.create_endpoint(\"hello\", backend=\"hello\", route=\"/hello\")\n \n requests.get(\"http://127.0.0.1:8000/hello\").text\n # > \"hello serve!\"\n from ray import serve\n import requests\n \n client = serve.start()\n \n class Counter:\n     def __init__(self):\n         self.count = 0\n \n     def __call__(self, flask_request):\n         return {\"current_counter\": self.count}\n \n \n client.create_backend(\"counter\", Counter)\n client.create_endpoint(\"counter\", backend=\"counter\", route=\"/counter\")\n \n requests.get(\"http://127.0.0.1:8000/counter\").json()\n # > {\"current_counter\": self.count}\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "architkulkarni", "commentT": "2020-10-15T17:33:21Z", "comment_text": "\n \t\tcan you fix it by wrapping the requests in a for loop and print a shutting down near the end?\n <denchmark-code>for _ in range(10):\n     requests.get(\"....\")\n \n print(\"Shutting down\")\n client.shutdown()\n </denchmark-code>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "architkulkarni", "commentT": "2020-10-15T23:47:59Z", "comment_text": "\n \t\tThis is embarrassing, I just realized we don't call print() in the script, but when pasted into ipython the value of the last line is always printed.  I'll just wrap the last line in print().  This is what's done in the examples on the front page of the Ray docs, so it'll be consistent.\n \t\t"}}}, "commit": {"commit_id": "1ce0c4965b695c7dc464d4837170fc4948c1807d", "commit_author": "architkulkarni", "commitT": "2020-10-23 12:01:04-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "doc\\source\\serve\\index.rst", "file_new_name": "doc\\source\\serve\\index.rst", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "40", "deleted_lines": "40"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\serve\\examples\\doc\\quickstart_class.py", "file_new_name": "python\\ray\\serve\\examples\\doc\\quickstart_class.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "14", "deleted_lines": null, "method_info": {"method_name": "__call__", "method_params": "self,flask_request", "method_startline": "13", "method_endline": "15"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "python\\ray\\serve\\examples\\doc\\quickstart_function.py", "file_new_name": "python\\ray\\serve\\examples\\doc\\quickstart_function.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "16,17", "deleted_lines": "16,17"}}}}}}