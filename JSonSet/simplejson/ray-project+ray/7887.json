{"BR": {"BR_id": "7887", "BR_author": "clarkzinzow", "BRopenT": "2020-04-03T05:58:39Z", "BRcloseT": "2020-04-11T23:51:33Z", "BR_text": {"BRsummary": "[Core] Apparent task/object leak on certain direct task calls.", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n Ray appears to be leaking tasks/objects on certain direct task calls. Namely, it appears that the raylet/node manager is losing track of direct task calls that depend on the same return object of an upstream task (and are possibly sharing a worker lease, need to confirm that.) So far, all instances of leaked tasks appear to correspond to pairs of tasks, sharing the same scheduler key and submitted nearly at the same time, both depending on the same task return object, with the task submitted second tending to be leaked.\n From an end-user perspective, this leak manifests in many orphaned objects being left in the object store, none of which are retrievable (ray.get() hangs indefinitely.)\n <denchmark-h:h4>Version information</denchmark-h>\n \n \n Python 3.7.5\n Ubuntu 19.10\n ray at commit 93b5c38 (will test on most recently built master commit soon)\n \n <denchmark-h:h3>Bug Information</denchmark-h>\n \n Currently unable to create a minimal reproduction, still working on that. <denchmark-link:https://github.com/stephanie-wang>@stephanie-wang</denchmark-link>\n  said that it'd be a good idea to open an issue so this bug isn't only tracked by a Slack thread, and she was pretty confident that there is in fact a leak. Below is a summary of some log and code spelunking.\n <denchmark-h:h4>Summary</denchmark-h>\n \n \n Two tasks, 240f6960faf7db13ffffffff0100 and c83000702c305163ffffffff0100, depend on the same object 1d539110471eab4dffffffff010000c801000000, and both appear to have the same scheduling key and both are making worker lease requests at around the same time.\n It appears that the lease request for the second task, c83000702c305163ffffffff0100, is never granted.\n It also appears that the raylet loses track of the second task: the task is never transitioned out of READY. Namely, in the node manager, FinishAssignTask() and FinishAssignedTask() are never called for the task.\n An object with ID 1d539110471eab4dffffffff010000c801000000 ends up being orphaned in the object store since the node manager thinks that task c83000702c305163ffffffff0100 still depends on the object after its unpinned; this results in a failed object pull and a failed object reconstruction, which I believe means that the object orphaned in the object store is an error object.\n Not sure if the second task is reusing the first task's worker lease and is somehow making a lease request of its own, or if they aren't sharing a worker lease and the lease request never returns and the raylet loses track of the task for a different reason.\n \n <denchmark-h:h4>Details</denchmark-h>\n \n There are two downstream tasks that depend on the return object of task 1d539110471eab4dffffffff0100:\n raylet:\n <denchmark-code>I0331 01:26:54.120884  4315 task_dependency_manager.cc:184] Task 240f6960faf7db13ffffffff0100 blocked on object 1d539110471eab4dffffffff010000c801000000\n I0331 01:26:55.895077  4315 task_dependency_manager.cc:184] Task c83000702c305163ffffffff0100 blocked on object 1d539110471eab4dffffffff010000c801000000\n </denchmark-code>\n \n Both of these downstream tasks complete according to the worker:\n python-worker:\n <denchmark-code>I0331 01:26:55.904520  4339 core_worker.cc:1186] Finished executing task 240f6960faf7db13ffffffff0100\n I0331 01:26:55.909976  4352 task_manager.cc:127] Completing task 240f6960faf7db13ffffffff0100\n I0331 01:26:55.930382  4339 core_worker.cc:1186] Finished executing task c83000702c305163ffffffff0100\n I0331 01:26:55.930879  4352 task_manager.cc:127] Completing task c83000702c305163ffffffff0100\n </denchmark-code>\n \n However, according to the raylet logs, task 240f6960faf7db13ffffffff0100 finished but task c83000702c305163ffffffff0100 did not:\n raylet:\n <denchmark-code>I0331 01:26:55.950846  4315 node_manager.cc:2414] Finished task 240f6960faf7db13ffffffff0100\n </denchmark-code>\n \n In fact, from the raylet's perspective, the   task is never moved out of the ready queue into the running queue by the scheduler, the node manager never assigns the task to a worker, etc. I'm assuming that this is because that task is a direct task call whose scheduling decision is cached and an existing worker lease (provisioned by task ) is being reused, so no worker lease is granted and it appears to go through a different code path that doesn't call <denchmark-link:https://github.com/ray-project/ray/blob/93b5c38b7dc75b64a4812c1b300f48f9f1bf5d2b/src/ray/raylet/node_manager.cc#L3016-L3055>FinishAssignTask()</denchmark-link>\n  or <denchmark-link:https://github.com/ray-project/ray/blob/93b5c38b7dc75b64a4812c1b300f48f9f1bf5d2b/src/ray/raylet/node_manager.cc#L2412-L2456>FinishAssignedTask()</denchmark-link>\n  in the node manager. Therefore, from the node manager's perspective,   is a queued task that still depends on the return object of task  when that object gets unpinned:\n raylet:\n <denchmark-code>I0331 01:26:55.950737  4315 node_manager.cc:3264] Unpinning object 1d539110471eab4dffffffff010000c801000000\n I0331 01:26:56.616161  4315 node_manager.cc:2815] Object missing 1d539110471eab4dffffffff010000c801000000,  on 87b1fb4ac8cb822f02545201693611dc853749e7, 1 tasks waiting, tasks: c83000702c305163ffffffff0100\n </denchmark-code>\n \n This will cause the task dependency manager to consider the object ID required, which causes an attempted (and failed) object pull and object reconstruction to kick off 10 seconds later:\n \n \n \n ray/src/ray/raylet/node_manager.cc\n \n \n          Line 2804\n       in\n       93b5c38\n \n \n \n \n \n \n  const auto waiting_task_ids = task_dependency_manager_.HandleObjectMissing(object_id); \n \n \n \n \n \n \n \n \n ray/src/ray/raylet/task_dependency_manager.cc\n \n \n          Line 170\n       in\n       93b5c38\n \n \n \n \n \n \n  HandleRemoteDependencyRequired(object_id); \n \n \n \n \n \n \n \n \n ray/src/ray/raylet/task_dependency_manager.cc\n \n \n         Lines 73 to 74\n       in\n       93b5c38\n \n \n \n \n \n \n  RAY_CHECK_OK(object_manager_.Pull(object_id)); \n \n \n \n  reconstruction_policy_.ListenAndMaybeReconstruct(object_id); \n \n \n \n \n \n \n \n \n ray/src/ray/raylet/reconstruction_policy.cc\n \n \n         Lines 210 to 223\n       in\n       93b5c38\n \n \n \n \n \n \n  void ReconstructionPolicy::ListenAndMaybeReconstruct(const ObjectID &object_id) { \n \n \n \n  RAY_LOG(DEBUG) << \"Listening and maybe reconstructing object \" << object_id; \n \n \n \n    TaskID task_id = object_id.TaskId(); \n \n \n \n  auto it = listening_tasks_.find(task_id); \n \n \n \n  // Add this object to the list of objects created by the same task. \n \n \n \n  if (it == listening_tasks_.end()) { \n \n \n \n  auto inserted = listening_tasks_.emplace(task_id, ReconstructionTask(io_service_)); \n \n \n \n      it = inserted.first; \n \n \n \n  // Set a timer for the task that created the object. If the lease for that \n \n \n \n  // task expires, then reconstruction of that task will be triggered. \n \n \n \n  SetTaskTimeout(it, initial_reconstruction_timeout_ms_); \n \n \n \n    } \n \n \n \n    it->second.created_objects.insert(object_id); \n \n \n \n  } \n \n \n \n \n \n raylet:\n <denchmark-code># unpinned\n I0331 01:26:55.950737  4315 node_manager.cc:3264] Unpinning object 1d539110471eab4dffffffff010000c801000000\n I0331 01:26:56.616024  4315 object_directory.cc:71] Reporting object removed to GCS 1d539110471eab4dffffffff010000c801000000\n I0331 01:26:56.616030  4315 service_based_accessor.cc:748] Removing object location, object id = 1d539110471eab4dffffffff010000c801000000, node id = 87b1fb4ac8cb822f02545201693611dc853749e7\n # attempted object pull request\n I0331 01:26:56.616096  4315 object_manager.cc:126] Pull on 87b1fb4ac8cb822f02545201693611dc853749e7 of object 1d539110471eab4dffffffff010000c801000000\n I0331 01:26:56.616108  4315 service_based_accessor.cc:776] Subscribing object location, object id = 1d539110471eab4dffffffff010000c801000000\n I0331 01:26:56.616137  4315 service_based_accessor.cc:781] Finished subscribing object location, object id = 1d539110471eab4dffffffff010000c801000000\n # object reconstruction in 10 seconds from this point since pull request will fail\n I0331 01:26:56.616145  4315 reconstruction_policy.cc:211] Listening and maybe reconstructing object 1d539110471eab4dffffffff010000c801000000\n I0331 01:26:56.616161  4315 node_manager.cc:2815] Object missing 1d539110471eab4dffffffff010000c801000000,  on 87b1fb4ac8cb822f02545201693611dc853749e7, 1 tasks waiting, tasks: c83000702c305163ffffffff0100\n # failed object pull\n E0331 01:26:56.616714  4315 object_manager.cc:189] The object manager with ID 87b1fb4ac8cb822f02545201693611dc853749e7 is trying to pull object 1d539110471eab4dffffffff010000c801000000 but the object table suggests that this object manager already has the object. The object may have been evicted.\n I0331 01:26:56.618919  4315 service_based_accessor.cc:762] Finished removing object location, status = OK, object id = 1d539110471eab4dffffffff010000c801000000, node id = 87b1fb4ac8cb822f02545201693611dc853749e7\n # object reconstruction starts here, after waiting for 10 seconds\n I0331 01:27:06.616205  4315 service_based_accessor.cc:653] Subscribing task lease, task id = 1d539110471eab4dffffffff0100\n I0331 01:27:06.616250  4315 service_based_accessor.cc:658] Finished subscribing task lease, task id = 1d539110471eab4dffffffff0100\n I0331 01:27:06.618786  4315 service_based_accessor.cc:574] Getting task, task id = 1d539110471eab4dffffffff0100\n # task lineage not available in GCS since it was already cleaned up\n W0331 01:27:06.619911  4315 node_manager.cc:2703] Metadata of task 1d539110471eab4dffffffff0100 not found in either GCS or lineage cache. It may have been evicted by the redis LRU configuration. Consider increasing the memory allocation via ray.init(redis_max_memory=<max_memory_bytes>).\n I0331 01:27:06.620035  4315 service_based_accessor.cc:585] Finished getting task, status = Invalid: Task not exist., task id = 1d539110471eab4dffffffff0100\n </denchmark-code>\n \n After the reconstruction fails, it appears that an object is put into the object store under that ID, which I believe is an error object (I can't inspect it since the object has already gone out of scope according to the Ray workers; a ray.get() call hangs indefinitely):\n <denchmark-code>I0331 01:27:06.620035  4315 service_based_accessor.cc:585] Finished getting task, status = Invalid: Task not exist., task id = 1d539110471eab4dffffffff0100\n I0331 01:27:06.620261  4315 object_manager.cc:78] Object added 1d539110471eab4dffffffff010000c801000000\n I0331 01:27:06.620273  4315 object_directory.cc:62] Reporting object added to GCS 1d539110471eab4dffffffff010000c801000000\n I0331 01:27:06.620281  4315 service_based_accessor.cc:721] Adding object location, object id = 1d539110471eab4dffffffff010000c801000000, node id = 87b1fb4ac8cb822f02545201693611dc853749e7\n I0331 01:27:06.620378  4315 service_based_accessor.cc:787] Unsubscribing object location, object id = 1d539110471eab4dffffffff010000c801000000\n I0331 01:27:06.620412  4315 service_based_accessor.cc:789] Finished unsubscribing object location, object id = 1d539110471eab4dffffffff010000c801000000\n I0331 01:27:06.620429  4315 reconstruction_policy.cc:226] Reconstruction for object 1d539110471eab4dffffffff010000c801000000 canceled\n I0331 01:27:06.620440  4315 service_based_accessor.cc:664] Unsubscribing task lease, task id = 1d539110471eab4dffffffff0100\n I0331 01:27:06.620460  4315 service_based_accessor.cc:666] Finished unsubscribing task lease, task id = 1d539110471eab4dffffffff0100\n I0331 01:27:06.620471  4315 node_manager.cc:2756] Object local 1d539110471eab4dffffffff010000c801000000,  on 87b1fb4ac8cb822f02545201693611dc853749e7, 1 tasks ready\n I0331 01:27:06.620859  4315 service_based_accessor.cc:736] Finished adding object location, status = OK, object id = 1d539110471eab4dffffffff010000c801000000, node id = 87b1fb4ac8cb822f02545201693611dc853749e7\n </denchmark-code>\n \n I believe that the reference counting logic is behaving as expected. It appears to be the c83000702c305163ffffffff0100 task becoming untracked by the raylet/node manager that's causing the failed object pull and the failed task reconstruction. Whatever code path this task is taking, it needs to tell the raylet/node manager that the task is assigned (once it's assigned) and that it's finished (once it's finished.)\n <denchmark-h:h4>Direct Task Model Confusion</denchmark-h>\n \n I'm still trying to wrap my head around the code path differences between a direct task that leases a worker and a direct task that reuses an existing worker lease. In this case, it appears that both tasks request a worker lease:\n raylet:\n <denchmark-code>I0331 01:26:54.120754  4315 node_manager.cc:1626] Worker lease request 240f6960faf7db13ffffffff0100\n I0331 01:26:55.894937  4315 node_manager.cc:1626] Worker lease request c83000702c305163ffffffff0100\n </denchmark-code>\n \n but only one is granted:\n python-driver\n <denchmark-code>I0331 01:26:55.894311  4352 direct_task_transport.cc:133] Lease granted 240f6960faf7db13ffffffff0100\n </denchmark-code>\n \n suggesting that (if the lease is shared) a lease request is made for each task once dependencies are resolved, the lease is granted for the first task while the second task's lease request is not, the latter task is pushed to the worker after the former completes, but the former never calls the <denchmark-link:https://github.com/ray-project/ray/blob/93b5c38b7dc75b64a4812c1b300f48f9f1bf5d2b/src/ray/core_worker/transport/direct_actor_transport.cc#L283-L290>task_done_</denchmark-link>\n  callback, which never causes the raylet to indicate that the worker is available, so the worker is never put back into the worker pool, which causes the latter task to never be \"assigned\" (via <denchmark-link:https://github.com/ray-project/ray/blob/93b5c38b7dc75b64a4812c1b300f48f9f1bf5d2b/src/ray/raylet/node_manager.cc#L2327-L2410>NodeManager.AssignTask()</denchmark-link>\n  or <denchmark-link:https://github.com/ray-project/ray/blob/93b5c38b7dc75b64a4812c1b300f48f9f1bf5d2b/src/ray/raylet/node_manager.cc#L3016-L3055>NodeManager.FinishAssignTask()</denchmark-link>\n ) to a worker, so the task is never transitioned to .\n However, I can't see how two lease requests on the same scheduling key could be in flight concurrently, given that the direct task submitter's <denchmark-link:https://github.com/ray-project/ray/blob/93b5c38b7dc75b64a4812c1b300f48f9f1bf5d2b/src/ray/core_worker/transport/direct_task_transport.cc#L108-L151>RequestNewWorkerIfNeeded</denchmark-link>\n  is guarded by a mutex and a collision in  should short-circuit the function, preventing the second task from submitting a lease request. This would suggest that the second task isn't sharing a worker lease, but that makes the fact that the lease is never granted and the raylet losing track of the task even more confusing. Moreover, I've pretty sure that both tasks have the same scheduling key (they have the same resource requirements, function descriptor, and arguments.)\n <denchmark-h:h3>Next Steps</denchmark-h>\n \n \n \n If anyone could shed some light on the intended submission flow and lifetime of direct tasks reusing worker leases, I would be forever grateful.\n \n \n I'm going to keep working on a minimal reproducible example and will add it to this issue if/when I find one.\n \n \n  I have verified my script runs in a clean environment and reproduces the issue.\n \n \n  I have verified the issue also occurs with the latest wheels.\n \n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "clarkzinzow", "commentT": "2020-04-03T19:12:38Z", "comment_text": "\n \t\tThanks, <denchmark-link:https://github.com/clarkzinzow>@clarkzinzow</denchmark-link>\n ! I think I actually have an idea of what's going on. Hopefully I can get a PR open for it later today or this weekend, and you can try it out. The bug seems to be an interaction between task batching and eager eviction of objects that have gone out of scope. I believe the sequence is this:\n \n Driver submits tasks T1 and T2 that both depend on object O, so they have the same scheduling key (same resources, dependencies, etc). Driver sends one lease request for each task to the raylet, which queues them. We submit one lease request for each because optimistically, we'd like the tasks to run in parallel on different workers.\n O appears and the raylet grants a lease for T1 to the driver. T2's lease request is still queued.\n Driver pushes T1 to the leased worker for execution. The worker finishes while the lease is still active, so the driver also pushes T2 to the worker for execution. This is the \"task batching\" optimization - we try to reuse the same worker for multiple tasks so we don't have to wait for the scheduler to grant another lease request.\n Worker finishes T2, so the driver/raylet free O since it no longer has any references.\n Raylet still has T2's lease request queued and is trying to fetch O since it is no longer available locally. Eventually, this times out because O will not be created again.\n \n My plan to fix this is to have the worker cancel active lease requests once there are no more tasks to run for that scheduling key. Downside is we'd need to keep a bit more state at the workers, and have an additional IPC to send the cancellation. This could also slightly hurt performance if another task with the same key gets added immediately after, since we'd have to request a lease from the raylet again.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "clarkzinzow", "commentT": "2020-04-03T23:20:52Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/stephanie-wang>@stephanie-wang</denchmark-link>\n  That's awesome! And that sequence jives with my spelunking, a few quick questions there:\n \n Driver sends one lease request for each task to the raylet, which queues them. We submit one lease request for each because optimistically, we'd like the tasks to run in parallel on different workers.\n \n I thought that only one lease request should be sent for tasks with the same scheduling key? Shouldn't the T1 lease request be made, with that lease request added to pending_lease_requests_, while holding a lock on a lease request mutex, and then when RequestNewWorkerIfNeeded is called for T2, it should short-circuit before making a lease request for T2?\n \n \n \n ray/src/ray/core_worker/transport/direct_task_transport.cc\n \n \n         Lines 110 to 113\n       in\n       93b5c38\n \n \n \n \n \n \n  if (pending_lease_requests_.find(scheduling_key) != pending_lease_requests_.end()) { \n \n \n \n  // There's already an outstanding lease request for this type of task. \n \n \n \n  return; \n \n \n \n  } \n \n \n \n \n \n I'm probably missing something here, but it seems like those concurrent lease requests shouldn't be possible. \ud83e\udd14\n \n Raylet still has T2's lease request queued and is trying to fetch O since it is no longer available locally. Eventually, this times out because O will not be created again.\n \n So the flow for this is:\n \n The object is deleted from the object store.\n This triggers a SubscribeObjDeleted subscription, which calls HandleObjectMissing.\n Which calls the corresponding HandleObjectMissing method on the dependency manager.\n Which checks to see if the remote dependency is required; it is considered required since it was never removed from the set of required tasks.\n This triggers the immediate failed pull request and the failed reconstruction attempt 10 seconds later.\n \n Is that about right?\n \n My plan to fix this is to have the worker cancel active lease requests once there are no more tasks to run for that scheduling key. Downside is we'd need to keep a bit more state at the workers, and have an additional IPC to send the cancellation. This could also slightly hurt performance if another task with the same key gets added immediately after, since we'd have to request a lease from the raylet again.\n \n I'm probably missing something, but shouldn't the task dependency manager be notified of a batched task being done right after the task finishes, via the existing callbacks, rather than on lease cancellation at the end of a batch? I could imagine a batch of tasks fitting within a lease window pilling up, none finishing according to the raylet since it won't receive notice that the tasks have finished until those lease request cancellations come through.\n Is this an apt description of ideal behavior?\n \n The raylet properly maintains the task state for batched tasks, transitioning them into RUNNING when the task is sent to the worker and removing them from the node manager's local_queue_ when the task is done executing.\n The task should be removed from the raylet's task dependency manager (via task_dependency_manager_.UnsubscribeGetDependencies() and task_dependency_manager_.Cancel()) when the task is done running.\n The worker lease expiration should be extended at the beginning of the execution of a batched task, since a new task of the same scheduling key should be taken as an indication that the leased worker is valuable and will probably see more utilization from this worker in the near term.\n \n If so, could that be achieved by invoking the node manager's  and  methods at the beginning of task execution and after task execution has finished (e.g. in the core worker direct call receiver's  method, via a mechanism similar to <denchmark-link:https://github.com/ray-project/ray/blob/93b5c38b7dc75b64a4812c1b300f48f9f1bf5d2b/src/ray/core_worker/transport/direct_actor_transport.cc#L289>the OnTaskDone callback</denchmark-link>\n ), respectively, with the task lease request returning an indication of a successful reuse of an existing lease (indicating that the lease expiration should be extended)? I feel like the semantics might be better in having the lease request return with an extension indication and the raylet task state being kept up-to-date via the the same  and  methods used elsewhere being called out to between task state transitions in the direct task receiver. What do you think?\n Also I wouldn't be surprised if I completely misunderstood a billion things about the leasing architecture and if everything that I said is wrong or untenable, feel free to ignore if that's the case! \ud83d\ude01\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "clarkzinzow", "commentT": "2020-04-11T23:52:21Z", "comment_text": "\n \t\tHey <denchmark-link:https://github.com/clarkzinzow>@clarkzinzow</denchmark-link>\n , if you get a chance, can you try out your application on the latest master? We just merged <denchmark-link:https://github.com/ray-project/ray/pull/7929>#7929</denchmark-link>\n  which should hopefully have fixed the issue. Thanks!\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "clarkzinzow", "commentT": "2020-04-13T16:46:11Z", "comment_text": "\n \t\tThanks <denchmark-link:https://github.com/stephanie-wang>@stephanie-wang</denchmark-link>\n , that was quick!  I'll confirm that the issue is fixed today.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "clarkzinzow", "commentT": "2020-04-13T23:00:19Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/stephanie-wang>@stephanie-wang</denchmark-link>\n  I haven't been able to trigger any more task leakages, so it looks like the lease cancellation has done the trick!\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "clarkzinzow", "commentT": "2020-04-13T23:06:23Z", "comment_text": "\n \t\tGreat, thanks <denchmark-link:https://github.com/clarkzinzow>@clarkzinzow</denchmark-link>\n  for reporting and helping us out with the issue!\n \t\t"}}}, "commit": {"commit_id": "18e9a076e5db9599e66bae6387e5c27431e9a324", "commit_author": "Stephanie Wang", "commitT": "2020-04-11 16:51:32-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\tests\\test_advanced_3.py", "file_new_name": "python\\ray\\tests\\test_advanced_3.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689", "deleted_lines": null, "method_info": {"method_name": "test_lease_request_leak", "method_params": "shutdown_only", "method_startline": "664", "method_endline": "689"}}, "hunk_1": {"Ismethod": 1, "added_lines": "673,674,675", "deleted_lines": null, "method_info": {"method_name": "test_lease_request_leak.f", "method_params": "x", "method_startline": "673", "method_endline": "675"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\ray\\common\\task\\task.h", "file_new_name": "src\\ray\\common\\task\\task.h", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "62,63,64", "deleted_lines": null, "method_info": {"method_name": "ray::Task::OnCancellationInstead", "method_params": "callback", "method_startline": "62", "method_endline": "64"}}, "hunk_1": {"Ismethod": 1, "added_lines": "97", "deleted_lines": null, "method_info": {"method_name": "ray::Task::OnCancellation", "method_params": "", "method_startline": "97", "method_endline": "97"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 15, "file_old_name": "src\\ray\\core_worker\\test\\direct_task_transport_test.cc", "file_new_name": "src\\ray\\core_worker\\test\\direct_task_transport_test.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "430,431", "deleted_lines": null, "method_info": {"method_name": "ray::TEST", "method_params": "DirectTaskTransportTest,TestConcurrentWorkerLeases", "method_startline": "386", "method_endline": "432"}}, "hunk_1": {"Ismethod": 1, "added_lines": "459,465,471,472,485,486,487", "deleted_lines": null, "method_info": {"method_name": "ray::TEST", "method_params": "DirectTaskTransportTest,TestReuseWorkerLease", "method_startline": "434", "method_endline": "487"}}, "hunk_2": {"Ismethod": 1, "added_lines": "104,105,106,107,108,109,110", "deleted_lines": "106,108", "method_info": {"method_name": "ray::MockRayletClient::CancelWorkerLease", "method_params": "task_id,callback", "method_startline": "104", "method_endline": "110"}}, "hunk_3": {"Ismethod": 1, "added_lines": "489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540", "deleted_lines": null, "method_info": {"method_name": "ray::TEST", "method_params": "DirectTaskTransportTest,TestRetryLeaseCancellation", "method_startline": "489", "method_endline": "540"}}, "hunk_4": {"Ismethod": 1, "added_lines": "934,935", "deleted_lines": null, "method_info": {"method_name": "ray::TEST", "method_params": "DirectTaskTransportTest,TestWorkerLeaseTimeout", "method_startline": "887", "method_endline": "936"}}, "hunk_5": {"Ismethod": 1, "added_lines": "105,106,107,108,109,110,111,114,116,117,118", "deleted_lines": "106,108", "method_info": {"method_name": "ray::MockRayletClient::GrantWorkerLease", "method_params": "address,port,retry_at_raylet_id", "method_startline": "105", "method_endline": "125"}}, "hunk_6": {"Ismethod": 1, "added_lines": "382,383", "deleted_lines": null, "method_info": {"method_name": "ray::TEST", "method_params": "DirectTaskTransportTest,TestHandleTaskFailure", "method_startline": "359", "method_endline": "384"}}, "hunk_7": {"Ismethod": 1, "added_lines": "629,630", "deleted_lines": null, "method_info": {"method_name": "ray::TEST", "method_params": "DirectTaskTransportTest,TestWorkerNotReusedOnError", "method_startline": "592", "method_endline": "631"}}, "hunk_8": {"Ismethod": 1, "added_lines": "355,356", "deleted_lines": null, "method_info": {"method_name": "ray::TEST", "method_params": "DirectTaskTransportTest,TestSubmitOneTask", "method_startline": "325", "method_endline": "357"}}, "hunk_9": {"Ismethod": 1, "added_lines": "712,713,714,715,716,717", "deleted_lines": null, "method_info": {"method_name": "ray::TEST", "method_params": "DirectTaskTransportTest,TestSpillback", "method_startline": "664", "method_endline": "718"}}, "hunk_10": {"Ismethod": 1, "added_lines": "660,661", "deleted_lines": null, "method_info": {"method_name": "ray::TEST", "method_params": "DirectTaskTransportTest,TestWorkerNotReturnedOnExit", "method_startline": "633", "method_endline": "662"}}, "hunk_11": {"Ismethod": 1, "added_lines": "774,775,776,777,778,779", "deleted_lines": null, "method_info": {"method_name": "ray::TEST", "method_params": "DirectTaskTransportTest,TestSpillbackRoundTrip", "method_startline": "720", "method_endline": "780"}}, "hunk_12": {"Ismethod": 1, "added_lines": "137,138,139,140,141,142,143,144,145,146,147,148", "deleted_lines": null, "method_info": {"method_name": "ray::MockRayletClient::ReplyCancelWorkerLease", "method_params": "success", "method_startline": "137", "method_endline": "148"}}, "hunk_13": {"Ismethod": 1, "added_lines": "542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589", "deleted_lines": null, "method_info": {"method_name": "ray::TEST", "method_params": "DirectTaskTransportTest,TestConcurrentCancellationAndSubmission", "method_startline": "542", "method_endline": "590"}}, "hunk_14": {"Ismethod": 1, "added_lines": "114,116,117,118", "deleted_lines": null, "method_info": {"method_name": "ray::MockRayletClient::GrantWorkerLease", "method_params": "address,port,retry_at_raylet_id,cancel", "method_startline": "113", "method_endline": "135"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "src\\ray\\core_worker\\transport\\direct_task_transport.cc", "file_new_name": "src\\ray\\core_worker\\transport\\direct_task_transport.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "159,160,161,162,164,165,166,167,168,169", "deleted_lines": "153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168", "method_info": {"method_name": "ray::CoreWorkerDirectTaskSubmitter::RetryLeaseRequest", "method_params": "status,lease_client,scheduling_key", "method_startline": "153", "method_endline": "169"}}, "hunk_1": {"Ismethod": 1, "added_lines": "59,80,81", "deleted_lines": null, "method_info": {"method_name": "ray::CoreWorkerDirectTaskSubmitter::OnWorkerIdle", "method_params": "addr,scheduling_key,was_error,assigned_resources", "method_startline": "55", "method_endline": "85"}}, "hunk_2": {"Ismethod": 1, "added_lines": "224,251", "deleted_lines": "215,216,217,218,219,220,221,222,223,224,225", "method_info": {"method_name": "ray::CoreWorkerDirectTaskSubmitter::PushNormalTask", "method_params": "addr,client,scheduling_key,task_spec,assigned_resources", "method_startline": "207", "method_endline": "252"}}, "hunk_3": {"Ismethod": 1, "added_lines": "159,160,161,162,164,165,166,167,168,169,170,172,173,174,175,188,189,190,191,192,193,194,196,197,198,199,201,202,203,204", "deleted_lines": "144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,188", "method_info": {"method_name": "ray::CoreWorkerDirectTaskSubmitter::RequestNewWorkerIfNeeded", "method_params": "scheduling_key,raylet_address", "method_startline": "144", "method_endline": "205"}}, "hunk_4": {"Ismethod": 1, "added_lines": "87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118", "deleted_lines": null, "method_info": {"method_name": "ray::CoreWorkerDirectTaskSubmitter::CancelWorkerLeaseIfNeeded", "method_params": "scheduling_key", "method_startline": "87", "method_endline": "118"}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ray\\core_worker\\transport\\direct_task_transport.h", "file_new_name": "src\\ray\\core_worker\\transport\\direct_task_transport.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "101,102,103,104,105,106,107,165,166,167", "deleted_lines": "87,88,89,90,91,92,164"}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ray\\protobuf\\node_manager.proto", "file_new_name": "src\\ray\\protobuf\\node_manager.proto", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "35,36,37,54,55,56,57,58,59,60,61,62,63,64,65,66,134,135,136", "deleted_lines": null}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "src\\ray\\raylet\\node_manager.cc", "file_new_name": "src\\ray\\raylet\\node_manager.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "3182,3183", "deleted_lines": null, "method_info": {"method_name": "ray::raylet::NodeManager::FinishAssignTask", "method_params": "worker,task_id,success", "method_startline": "3158", "method_endline": "3199"}}, "hunk_1": {"Ismethod": 1, "added_lines": "1788,1789,1790,1791,1792", "deleted_lines": null, "method_info": {"method_name": "ray::raylet::NodeManager::HandleRequestWorkerLease", "method_params": "request,reply,send_reply_callback", "method_startline": "1651", "method_endline": "1794"}}, "hunk_2": {"Ismethod": 1, "added_lines": "1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859", "deleted_lines": null, "method_info": {"method_name": "ray::raylet::NodeManager::HandleCancelWorkerLease", "method_params": "request,reply,send_reply_callback", "method_startline": "1829", "method_endline": "1859"}}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ray\\raylet\\node_manager.h", "file_new_name": "src\\ray\\raylet\\node_manager.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "579,580,581,582,583", "deleted_lines": null}}}, "file_8": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ray\\raylet\\raylet_client.cc", "file_new_name": "src\\ray\\raylet\\raylet_client.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "370,371,372,373,374,375,376", "deleted_lines": null, "method_info": {"method_name": "ray::raylet::RayletClient::CancelWorkerLease", "method_params": "task_id,callback", "method_startline": "370", "method_endline": "376"}}}}, "file_9": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ray\\raylet\\raylet_client.h", "file_new_name": "src\\ray\\raylet\\raylet_client.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "69,70,71,72,284,285,286,287", "deleted_lines": null}}}, "file_10": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ray\\rpc\\node_manager\\node_manager_client.h", "file_new_name": "src\\ray\\rpc\\node_manager\\node_manager_client.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "90,91,92", "deleted_lines": null}}}, "file_11": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ray\\rpc\\node_manager\\node_manager_server.h", "file_new_name": "src\\ray\\rpc\\node_manager\\node_manager_server.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "30,59,60,61,62", "deleted_lines": null}}}}}}