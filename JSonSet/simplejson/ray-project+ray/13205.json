{"BR": {"BR_id": "13205", "BR_author": "simon-mo", "BRopenT": "2021-01-05T18:18:38Z", "BRcloseT": "2021-01-05T20:33:51Z", "BR_text": {"BRsummary": "test_actor::test_atexit_handler[__ray_terminate__] Windows CI Failure", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n Ray version and other system information (Python version, TensorFlow version, OS):\n <denchmark-code>2021-01-05T05:59:09.6946634Z \ufffd[31m\ufffd[1mFAILED: \ufffd[0m//python/ray/tests:test_actor (Summary)\n 2021-01-05T05:59:09.6950035Z       C:/users/runneradmin/_bazel_runneradmin/vlncal46/execroot/com_github_ray_project_ray/bazel-out/x64_windows-opt/testlogs/python/ray/tests/test_actor/test.log\n 2021-01-05T05:59:09.6952178Z       C:/users/runneradmin/_bazel_runneradmin/vlncal46/execroot/com_github_ray_project_ray/bazel-out/x64_windows-opt/testlogs/python/ray/tests/test_actor/test_attempts/attempt_1.log\n 2021-01-05T05:59:09.6957492Z       C:/users/runneradmin/_bazel_runneradmin/vlncal46/execroot/com_github_ray_project_ray/bazel-out/x64_windows-opt/testlogs/python/ray/tests/test_actor/test_attempts/attempt_2.log\n 2021-01-05T05:59:09.6959705Z \ufffd[32mINFO: \ufffd[0mFrom Testing //python/ray/tests:test_actor:\n 2021-01-05T05:59:09.6969215Z ==================== Test output for //python/ray/tests:test_actor:\n 2021-01-05T05:59:09.6971353Z ============================= test session starts =============================\n 2021-01-05T05:59:09.6974851Z platform win32 -- Python 3.7.9, pytest-5.4.3, py-1.10.0, pluggy-0.13.1 -- C:\\hostedtoolcache\\windows\\Python\\3.7.9\\x64\\python.exe\n 2021-01-05T05:59:09.6976240Z cachedir: .pytest_cache\n 2021-01-05T05:59:09.6977302Z rootdir: C:\\Users\\runneradmin\\AppData\\Local\\Temp\\Bazel.runfiles_tt8mg_hk\\runfiles\\com_github_ray_project_ray\n 2021-01-05T05:59:09.6978817Z plugins: asyncio-0.14.0, rerunfailures-9.1.1, sugar-0.9.4, timeout-1.4.2\n 2021-01-05T05:59:09.6980201Z collecting ... collected 36 items\n 2021-01-05T05:59:09.6980702Z \n 2021-01-05T05:59:09.6982076Z ::test_caching_actors PASSED                                             [  2%]\n 2021-01-05T05:59:09.6983090Z ::test_remote_function_within_actor PASSED                               [  5%]\n 2021-01-05T05:59:09.6986847Z ::test_define_actor_within_actor PASSED                                  [  8%]\n 2021-01-05T05:59:09.6996612Z ::test_use_actor_within_actor PASSED                                     [ 11%]\n 2021-01-05T05:59:09.6997835Z ::test_use_actor_twice PASSED                                            [ 13%]\n 2021-01-05T05:59:09.6998607Z ::test_define_actor_within_remote_function PASSED                        [ 16%]\n 2021-01-05T05:59:09.6999409Z ::test_use_actor_within_remote_function PASSED                           [ 19%]\n 2021-01-05T05:59:09.7000166Z ::test_actor_import_counter PASSED                                       [ 22%]\n 2021-01-05T05:59:09.7000997Z ::test_actor_method_metadata_cache PASSED                                [ 25%]\n 2021-01-05T05:59:09.7002149Z ::test_actor_class_name PASSED                                           [ 27%]\n 2021-01-05T05:59:09.7002892Z ::test_actor_exit_from_task PASSED                                       [ 30%]\n 2021-01-05T05:59:09.7003630Z ::test_actor_init_error_propagated PASSED                                [ 33%]\n 2021-01-05T05:59:09.7004383Z ::test_keyword_args PASSED                                               [ 36%]\n 2021-01-05T05:59:09.7005244Z ::test_actor_name_conflict PASSED                                        [ 38%]\n 2021-01-05T05:59:09.7005975Z ::test_variable_number_of_args PASSED                                    [ 41%]\n 2021-01-05T05:59:09.7006818Z ::test_no_args PASSED                                                    [ 44%]\n 2021-01-05T05:59:09.7007621Z ::test_no_constructor PASSED                                             [ 47%]\n 2021-01-05T05:59:09.7008350Z ::test_custom_classes PASSED                                             [ 50%]\n 2021-01-05T05:59:09.7009080Z ::test_actor_class_attributes PASSED                                     [ 52%]\n 2021-01-05T05:59:09.7009817Z ::test_actor_static_attributes PASSED                                    [ 55%]\n 2021-01-05T05:59:09.7010532Z ::test_decorator_args PASSED                                             [ 58%]\n 2021-01-05T05:59:09.7011222Z ::test_random_id_generation PASSED                                       [ 61%]\n 2021-01-05T05:59:09.7011943Z ::test_actor_inheritance PASSED                                          [ 63%]\n 2021-01-05T05:59:09.7012653Z ::test_multiple_return_values PASSED                                     [ 66%]\n 2021-01-05T05:59:09.7013363Z ::test_options_num_returns PASSED                                        [ 69%]\n 2021-01-05T05:59:09.7014044Z ::test_options_name PASSED                                               [ 72%]\n 2021-01-05T05:59:09.7014695Z ::test_define_actor PASSED                                               [ 75%]\n 2021-01-05T05:59:09.7015363Z ::test_actor_deletion PASSED                                             [ 77%]\n 2021-01-05T05:59:09.7016010Z ::test_actor_method_deletion PASSED                                      [ 80%]\n 2021-01-05T05:59:09.7016776Z ::test_distributed_actor_handle_deletion PASSED                          [ 83%]\n 2021-01-05T05:59:09.7017523Z ::test_multiple_actors PASSED                                            [ 86%]\n 2021-01-05T05:59:09.7018228Z ::test_inherit_actor_from_class PASSED                                   [ 88%]\n 2021-01-05T05:59:09.7018994Z ::test_actor_creation_latency SKIPPED                                    [ 91%]\n 2021-01-05T05:59:09.7019735Z ::test_atexit_handler[__ray_terminate__] FAILED                          [ 94%]\n 2021-01-05T05:59:09.7020477Z ::test_atexit_handler[ray.actor.exit_actor] FAILED                       [ 97%]\n 2021-01-05T05:59:09.7021281Z ::test_atexit_handler[ray.kill] FAILED                                   [100%]\n 2021-01-05T05:59:09.7021861Z \n 2021-01-05T05:59:09.7022355Z ================================== FAILURES ===================================\n 2021-01-05T05:59:09.7023010Z ___________________ test_atexit_handler[__ray_terminate__] ____________________\n 2021-01-05T05:59:09.7023423Z \n 2021-01-05T05:59:09.7024721Z ray_start_regular_shared = {'metrics_export_port': 62347, 'node_id': 'bb2372dd67f015d3fa738c6f602bce377d6334d0257da7ece0e441e7', 'node_ip_address': '10.1.0.4', 'object_store_address': 'tcp://127.0.0.1:63406', ...}\n 2021-01-05T05:59:09.7026086Z exit_condition = '__ray_terminate__'\n 2021-01-05T05:59:09.7026470Z \n 2021-01-05T05:59:09.7026992Z     @pytest.mark.parametrize(\n 2021-01-05T05:59:09.7027632Z         \"exit_condition\",\n 2021-01-05T05:59:09.7028090Z         [\n 2021-01-05T05:59:09.7028683Z             # \"out_of_scope\", TODO(edoakes): enable this once fixed.\n 2021-01-05T05:59:09.7029317Z             \"__ray_terminate__\",\n 2021-01-05T05:59:09.7029824Z             \"ray.actor.exit_actor\",\n 2021-01-05T05:59:09.7030359Z             \"ray.kill\"\n 2021-01-05T05:59:09.7030790Z         ])\n 2021-01-05T05:59:09.7031703Z     def test_atexit_handler(ray_start_regular_shared, exit_condition):\n 2021-01-05T05:59:09.7032403Z         @ray.remote\n 2021-01-05T05:59:09.7032821Z         class A():\n 2021-01-05T05:59:09.7034569Z             def __init__(self, tmpfile, data):\n 2021-01-05T05:59:09.7035160Z                 import atexit\n 2021-01-05T05:59:09.7035608Z     \n 2021-01-05T05:59:09.7036063Z                 def f(*args, **kwargs):\n 2021-01-05T05:59:09.7036575Z                     with open(tmpfile, \"w\") as f:\n 2021-01-05T05:59:09.7037118Z                         f.write(data)\n 2021-01-05T05:59:09.7037627Z                         f.flush()\n 2021-01-05T05:59:09.7038058Z     \n 2021-01-05T05:59:09.7038556Z                 atexit.register(f)\n 2021-01-05T05:59:09.7038994Z     \n 2021-01-05T05:59:09.7039476Z             def ready(self):\n 2021-01-05T05:59:09.7039963Z                 pass\n 2021-01-05T05:59:09.7040397Z     \n 2021-01-05T05:59:09.7040849Z             def exit(self):\n 2021-01-05T05:59:09.7041415Z                 ray.actor.exit_actor()\n 2021-01-05T05:59:09.7041929Z     \n 2021-01-05T05:59:09.7042370Z         data = \"hello\"\n 2021-01-05T05:59:09.7043103Z         tmpfile = tempfile.NamedTemporaryFile()\n 2021-01-05T05:59:09.7043934Z         a = A.remote(tmpfile.name, data)\n 2021-01-05T05:59:09.7044568Z         ray.get(a.ready.remote())\n 2021-01-05T05:59:09.7045015Z     \n 2021-01-05T05:59:09.7045525Z         if exit_condition == \"out_of_scope\":\n 2021-01-05T05:59:09.7046063Z             del a\n 2021-01-05T05:59:09.7046622Z         elif exit_condition == \"__ray_terminate__\":\n 2021-01-05T05:59:09.7047298Z             ray.wait([a.__ray_terminate__.remote()])\n 2021-01-05T05:59:09.7047960Z         elif exit_condition == \"ray.actor.exit_actor\":\n 2021-01-05T05:59:09.7048649Z             ray.wait([a.exit.remote()])\n 2021-01-05T05:59:09.7049264Z         elif exit_condition == \"ray.kill\":\n 2021-01-05T05:59:09.7049811Z             ray.kill(a)\n 2021-01-05T05:59:09.7050256Z         else:\n 2021-01-05T05:59:09.7050786Z             assert False, \"Unrecognized condition\"\n 2021-01-05T05:59:09.7051364Z     \n 2021-01-05T05:59:09.7051831Z         def check_file_written():\n 2021-01-05T05:59:09.7052413Z             with open(tmpfile.name) as f:\n 2021-01-05T05:59:09.7052970Z                 if f.read() == data:\n 2021-01-05T05:59:09.7053418Z                     return True\n 2021-01-05T05:59:09.7053909Z                 return False\n 2021-01-05T05:59:09.7054343Z     \n 2021-01-05T05:59:09.7054994Z         # ray.kill() should not trigger atexit handlers, all other methods should.\n 2021-01-05T05:59:09.7056320Z         if exit_condition == \"ray.kill\":\n 2021-01-05T05:59:09.7056887Z             assert not check_file_written()\n 2021-01-05T05:59:09.7057427Z         else:\n 2021-01-05T05:59:09.7057995Z >           wait_for_condition(check_file_written)\n 2021-01-05T05:59:09.7058392Z \n 2021-01-05T05:59:09.7059298Z \\\\?\\C:\\Users\\RUNNER~1\\AppData\\Local\\Temp\\Bazel.runfiles_tt8mg_hk\\runfiles\\com_github_ray_project_ray\\python\\ray\\tests\\test_actor.py:931: \n 2021-01-05T05:59:09.7060412Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n 2021-01-05T05:59:09.7061084Z d:\\a\\ray\\ray\\python\\ray\\test_utils.py:235: in wait_for_condition\n 2021-01-05T05:59:09.7061765Z     if condition_predictor():\n 2021-01-05T05:59:09.7062316Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n 2021-01-05T05:59:09.7062627Z \n 2021-01-05T05:59:09.7063104Z     def check_file_written():\n 2021-01-05T05:59:09.7063698Z >       with open(tmpfile.name) as f:\n 2021-01-05T05:59:09.7064631Z E       PermissionError: [Errno 13] Permission denied: 'C:\\\\Users\\\\RUNNER~1\\\\AppData\\\\Local\\\\Temp\\\\tmp25scr5mh'\n 2021-01-05T05:59:09.7065286Z \n 2021-01-05T05:59:09.7066214Z \\\\?\\C:\\Users\\RUNNER~1\\AppData\\Local\\Temp\\Bazel.runfiles_tt8mg_hk\\runfiles\\com_github_ray_project_ray\\python\\ray\\tests\\test_actor.py:922: PermissionError\n 2021-01-05T05:59:09.7067405Z ---------------------------- Captured stderr call -----------------------------\n 2021-01-05T05:59:09.7068225Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m Windows fatal exception: access violation\n 2021-01-05T05:59:09.7068918Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m \n 2021-01-05T05:59:09.7069546Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m Windows fatal exception: access violation\n 2021-01-05T05:59:09.7070160Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m \n 2021-01-05T05:59:09.7070736Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m Windows fatal exception: access violation\n 2021-01-05T05:59:09.7071483Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m \n 2021-01-05T05:59:09.7072112Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m Windows fatal exception: access violation\n 2021-01-05T05:59:09.7072728Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m \n 2021-01-05T05:59:09.7073346Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m Windows fatal exception: access violation\n 2021-01-05T05:59:09.7073904Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m \n 2021-01-05T05:59:09.7074515Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m Windows fatal exception: access violation\n 2021-01-05T05:59:09.7075120Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m \n 2021-01-05T05:59:09.7075738Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m Windows fatal exception: access violation\n 2021-01-05T05:59:09.7076336Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m \n 2021-01-05T05:59:09.7076907Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m Windows fatal exception: access violation\n 2021-01-05T05:59:09.7077507Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m \n 2021-01-05T05:59:09.7078122Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m Windows fatal exception: access violation\n 2021-01-05T05:59:09.7078715Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m \n 2021-01-05T05:59:09.7079325Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m Windows fatal exception: access violation\n 2021-01-05T05:59:09.7079919Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m \n 2021-01-05T05:59:09.7080485Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m Windows fatal exception: access violation\n 2021-01-05T05:59:09.7081077Z \ufffd[2m\ufffd[36m(pid=8160)\ufffd[0m \n </denchmark-code>\n \n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Please provide a short code snippet (less than 50 lines if possible) that can be copy-pasted to reproduce the issue. The snippet should have no external library dependencies (i.e., use fake or mock data / environments):\n If the code snippet cannot be run by itself, the issue will be closed with \"needs-repro-script\".\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {}}, "commit": {"commit_id": "d738610dc906e80cb21e41d554754572aadadb4b", "commit_author": "Edward Oakes", "commitT": "2021-01-05 14:33:51-06:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "python\\ray\\tests\\test_actor.py", "file_new_name": "python\\ray\\tests\\test_actor.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "878", "deleted_lines": null}}}}}}