{"BR": {"BR_id": "9282", "BR_author": "wumuzi520", "BRopenT": "2020-07-03T02:00:56Z", "BRcloseT": "2020-07-08T04:21:25Z", "BR_text": {"BRsummary": "It will failed when register two or more detached actors with empty name", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n It will failed when register two or more detached actors with empty name\n Ray version and other system information (Python version, TensorFlow version, OS):\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):\n <denchmark-code>TEST_F(GcsActorManagerTest, TestDetachedActorWithEmptyName) {\n   auto job_id = JobID::FromInt(1);\n \n   auto request1 =\n       Mocker::GenCreateActorRequest(job_id, 0, /*is_detached=*/true, /*name=*/\"\");\n   Status status = gcs_actor_manager_->RegisterActor(\n       request1, [](std::shared_ptr<gcs::GcsActor> actor) {});\n   ASSERT_TRUE(status.ok());\n   ASSERT_TRUE(gcs_actor_manager_->GetActorIDByName(\"\").IsNil());\n \n   auto request2 =\n       Mocker::GenCreateActorRequest(job_id, 0, /*is_detached=*/true, /*name=*/\"\");\n   status = gcs_actor_manager_->RegisterActor(request2,\n                                              [](std::shared_ptr<gcs::GcsActor> actor) {});\n   ASSERT_TRUE(status.ok());\n }\n </denchmark-code>\n \n If we cannot run your script, we cannot fix your issue.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {}}, "commit": {"commit_id": "42f8f16c041e01f2066b47204987149d4ac64c2b", "commit_author": "ZhuSenlin", "commitT": "2020-07-08 12:21:24+08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "src\\ray\\gcs\\gcs_server\\gcs_actor_manager.cc", "file_new_name": "src\\ray\\gcs\\gcs_server\\gcs_actor_manager.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "660,661", "deleted_lines": "664,665", "method_info": {"method_name": "ray::gcs::GcsActorManager::ReconstructActor", "method_params": "actor_id,need_reschedule", "method_startline": "623", "method_endline": "686"}}, "hunk_1": {"Ismethod": 1, "added_lines": "756", "deleted_lines": "760", "method_info": {"method_name": "ray::gcs::GcsActorManager::LoadInitialData", "method_params": "done", "method_startline": "747", "method_endline": "788"}}, "hunk_2": {"Ismethod": 1, "added_lines": "389", "deleted_lines": "393", "method_info": {"method_name": "ray::gcs::GcsActorManager::RegisterActor", "method_params": "request,callback", "method_startline": "362", "method_endline": "413"}}, "hunk_3": {"Ismethod": 1, "added_lines": "72", "deleted_lines": "72", "method_info": {"method_name": "ray::gcs::GcsActor::GetName", "method_params": "", "method_startline": "72", "method_endline": "72"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ray\\gcs\\gcs_server\\gcs_actor_manager.h", "file_new_name": "src\\ray\\gcs\\gcs_server\\gcs_actor_manager.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "278", "deleted_lines": "278"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ray\\gcs\\gcs_server\\test\\gcs_actor_manager_test.cc", "file_new_name": "src\\ray\\gcs\\gcs_server\\test\\gcs_actor_manager_test.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418", "deleted_lines": null, "method_info": {"method_name": "ray::TEST_F", "method_params": "GcsActorManagerTest,TestActorWithEmptyName", "method_startline": "396", "method_endline": "418"}}}}}}}