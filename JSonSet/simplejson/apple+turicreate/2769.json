{"BR": {"BR_id": "2769", "BR_author": "guihao-liang", "BRopenT": "2019-12-02T23:02:25Z", "BRcloseT": "2019-12-04T23:47:09Z", "BR_text": {"BRsummary": "od 6.0 consumes weights exported from 5.8 but has inconsistent evaluation result", "BRdescription": "\n <denchmark-h:h1>result</denchmark-h>\n \n using same dataset and same weights, but\n metrics from 6.0\n <denchmark-code>{'average_precision': {'bike': 0.012347009032964706, 'carsgraz': 0.015508192591369152}, 'average_precision_50': {'bike': 0.069046750664711, 'carsgraz': 0.060742706060409546}, 'mean_average_precision': 0.013927601277828217, 'mean_average_precision_50': 0.06489472836256027}\n </denchmark-code>\n \n metrics from 5.8:\n <denchmark-code>{'average_precision_50': {'bike': 0.09294442373851787, 'carsgraz': 0.06547559906557089}, 'average_precision': {'bike': 0.015251833463317571, 'carsgraz': 0.019742030947649234}, 'mean_average_precision_50': 0.07921001140204438, 'mean_average_precision': 0.017496932205483408}\n </denchmark-code>\n \n are different.\n <denchmark-h:h1>minimum reproduction:</denchmark-h>\n \n \n train over data ig02 using 5.8 and export weights to the disk\n \n <denchmark-code>import turicreate as tc\n import sys\n import os\n import pickle\n \n tc_version = tc.__version__\n dir_out = \"./output\"\n name_out = \"ig02-{}-{}\".format(sys.platform, tc_version)\n \n data = tc.SFrame('/Users/<yourname>/Work/tc-testing/'\n                  'tc_test_dataset/Object_Detection/ig02.sframe')\n \n train_data, test_data = data.random_split(0.8, seed=1)\n \n # Create a model\n model = tc.object_detector.create(train_data, max_iterations=20)\n \n # Save predictions to an SArray\n predictions = model.predict(test_data)\n predictions.save(os.path.join(dir_out, \"%s-predictions.sarray\" % name_out))\n \n # Evaluate the model and save the results into a dictionary\n evaluations = model.evaluate(test_data, metric='all')\n to_serialize = {}\n for key, val in evaluations.items():\n     if isinstance(val, tc.SFrame):\n         print(\"save sframe\")\n         val.save(os.path.join(dir_out,\n                               \"{}-evaluations-{}.sframe\".format(name_out,\n                                                                 key)))\n     else:\n         to_serialize[key] = val\n \n if len(to_serialize) > 0:\n     print(\"dump evaluation dictionary:\\n\", to_serialize)\n     with open(os.path.join(dir_out, \"{}-evaluations.dict\".format(name_out)),\n               'wb') as f:\n         pickle.dump(to_serialize, f)\n \n # Save the model for later use in Turi Create\n model.save('output/%s.model' % name_out)\n \n # Export for use in Core ML\n model.export_coreml('output/%s.mlmodel' % name_out)\n </denchmark-code>\n \n \n load the model to 6.0\n \n <denchmark-code>import turicreate as tc\n import sys\n import os\n \n tc_version = sys.argv[1]\n dir_out = \"./output\"\n name_out = \"ig02-{}-{}\".format(sys.platform, tc_version)\n \n data = tc.SFrame('/Users/<yourname>/Work/tc-testing/'\n                  'tc_test_dataset/Object_Detection/ig02.sframe')\n \n train_data, test_data = data.random_split(0.8, seed=1)\n \n # Create a model\n model = tc.load_model(os.path.join(dir_out, \"%s.model\" % name_out))\n \n # Save predictions to an SArray\n predictions = model.predict(test_data)\n print(predictions)\n \n evaluations = model.evaluate(test_data, metric=\"all\")\n print(evaluations)\n </denchmark-code>\n \n \t"}, "comments": {}}, "commit": {"commit_id": "4e9fe88dc634fa3d694fbfd48427c9eddbe99902", "commit_author": "Henry Tao", "commitT": "2019-12-04 15:47:08-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "src\\python\\turicreate\\toolkits\\object_detector\\_tf_model_architecture.py", "file_new_name": "src\\python\\turicreate\\toolkits\\object_detector\\_tf_model_architecture.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "272", "deleted_lines": "272", "method_info": {"method_name": "tiny_yolo", "method_params": "self,inputs,output_size", "method_startline": "237", "method_endline": "278"}}, "hunk_1": {"Ismethod": 1, "added_lines": "21,46", "deleted_lines": "21,46", "method_info": {"method_name": "__init__", "method_params": "self,input_h,input_w,batch_size,output_size,out_h,out_w,init_weights,config", "method_startline": "21", "method_endline": "82"}}, "hunk_2": {"Ismethod": 1, "added_lines": "418", "deleted_lines": "417", "method_info": {"method_name": "predict", "method_params": "self,feed_dict", "method_startline": "401", "method_endline": "423"}}, "hunk_3": {"Ismethod": 1, "added_lines": "395,396", "deleted_lines": "395", "method_info": {"method_name": "train", "method_params": "self,feed_dict", "method_startline": "375", "method_endline": "399"}}, "hunk_4": {"Ismethod": 1, "added_lines": "90", "deleted_lines": "90", "method_info": {"method_name": "load_weights", "method_params": "self,tf_net_params", "method_startline": "88", "method_endline": "108"}}, "hunk_5": {"Ismethod": 1, "added_lines": "21,46", "deleted_lines": "21,46", "method_info": {"method_name": "__init__", "method_params": "self,input_h,input_w,batch_size,output_size,out_h,out_w,init_weights,config,is_train", "method_startline": "21", "method_endline": "82"}}}}}}}