{"BR": {"BR_id": "18878", "BR_author": "deanranderson", "BRopenT": "2020-11-20T15:51:01Z", "BRcloseT": "2020-12-18T22:30:53Z", "BR_text": {"BRsummary": "cv::COLOR_YUV2BGR and cv::COLOR_YUV2RGB are not handled in color.hpp dstChannels", "BRdescription": "\n <denchmark-h:h5>System information (version)</denchmark-h>\n \n \n OpenCV => 4.5\n Operating System / Platform => Ubuntu 18.04\n Compiler => gcc 7.5\n \n <denchmark-h:h5>Detailed description</denchmark-h>\n \n While doing some performance comparisons between cv::Mat and cv::UMat (OpenCL), I noticed that OpenCL was taking a lot longer (8x) when performing color conversions from YUV to BGR or RGB.\n I compared my benchmarking code to the perf tests, and I was not populating the optional dstCn parameter in my calls to cv::cvtColor().  When I did pass that parameter, my performance greatly improved!\n I think I tracked it down to the function dstChannels() in color.hpp \n \n \n opencv/modules/imgproc/src/color.hpp\n \n \n          Line 109\n       in\n       049b50d\n \n \n \n \n \n \n  case COLOR_YUV2BGR_NV21: case COLOR_YUV2RGB_NV21: case COLOR_YUV2BGR_NV12: case COLOR_YUV2RGB_NV12: \n \n \n \n \n  .  The cv::COLOR_YUV2RGB and cv::COLOR_YUV2BGR codes are not in the switch-case list, so the default value of 0 is returned.  This then gets passed to oclCvtColorYUV2BGR();\n I don't fully understand why passing 0 as the value for dcn to the OpenCL kernel results in such poor performance, but seems like a simple fix.\n <denchmark-h:h5>Steps to reproduce</denchmark-h>\n \n <denchmark-code>```.cpp\n cv::UMat yuv = cv::UMat::zeros(1920, 1080, CV_8UC3);\n cv::UMat rgb;\n cv::cvtColor(yuv, rgb, cv::COLOR_YUV2RGB); /// This is slow :-(\n cv::cvtColor(yuv, rgb, cv::COLOR_YUV2RGB, 3); /// This is fast!\n ```\n </denchmark-code>\n \n I can whip up a complete test case/perf test if that's helpful.\n <denchmark-h:h5>Issue submission checklist</denchmark-h>\n \n \n  I report the issue, it's not a question\n  I checked the problem with documentation, FAQ, open issues,\n answers.opencv.org, Stack Overflow, etc and have not found solution\n  I updated to latest OpenCV version and the issue is still there\n  There is reproducer code and related data files: videos, images, onnx, etc\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "deanranderson", "commentT": "2020-12-17T18:50:12Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/deanranderson>@deanranderson</denchmark-link>\n , thank you! I've reproduced the issue and correction of switch works fine. For example, reading the input 4664x5830 image into  and its conversion with    gives the following results:\n no fix:\n <denchmark-code>YUV2RGB\n 0.19270s | 0.17835s | 0.20722s | 0.19647s\n \n YUV2BGR\n 0.19586s | 0.19144s | 0.20094s | 0.19670s\n </denchmark-code>\n \n fix applied:\n <denchmark-code>YUV2RGB\n 0.00818s | 0.00822s | 0.00815s | 0.00826s\n \n YUV2BGR\n 0.00816s | 0.00815s | 0.00818s | 0.00814s\n </denchmark-code>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "deanranderson", "commentT": "2020-12-17T19:36:47Z", "comment_text": "\n \t\tOpenCV performance tests doesn't show improvements (i5-6600, iGPU):\n <denchmark-code>./bin/opencv_perf_imgproc --gtest_filter=OCL*CvtColor* --gtest_param_filter=*COLOR_YUV2RGB,* --perf_threads=1\n </denchmark-code>\n \n \n \n \n Name of Test\n base\n fix\n x-factor\n \n \n \n \n CvtColor::OCL_CvtColorFixture::(640x480, (COLOR_YUV2RGB, 3, 3))\n 0.172\n 0.169\n 1.02\n \n \n CvtColor::OCL_CvtColorFixture::(1280x720, (COLOR_YUV2RGB, 3, 3))\n 0.542\n 0.526\n 1.03\n \n \n CvtColor::OCL_CvtColorFixture::(1920x1080, (COLOR_YUV2RGB, 3, 3))\n 1.360\n 1.359\n 1.00\n \n \n CvtColor::OCL_CvtColorFixture::(3840x2160, (COLOR_YUV2RGB, 3, 3))\n 5.184\n 5.190\n 1.00\n \n \n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "deanranderson", "commentT": "2020-12-18T09:25:56Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/alalek>@alalek</denchmark-link>\n , in <denchmark-link:https://github.com/opencv/opencv/blob/master/modules/imgproc/perf/opencl/perf_color.cpp#L72>perf_color.cpp</denchmark-link>\n   param is set into the correct value explicitly. Here the performance problem occurs when the  parameter is empty - then it by default is set into 0. Thus, changing the original line in perf test in the following way:\n \n gives us the below results:\n \n fix applied:\n \n <denchmark-code>[ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/3, where GetParam() = (640x480, (COLOR_YUV2RGB, 3, 0))\n [       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/3 (7 ms)\n \n [ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/29, where GetParam() = (1280x720, (COLOR_YUV2RGB, 3, 0))\n [       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/29 (9 ms)\n \n [ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/55, where GetParam() = (1920x1080, (COLOR_YUV2RGB, 3, 0))\n [       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/55 (14 ms)\n \n [ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/81, where GetParam() = (3840x2160, (COLOR_YUV2RGB, 3, 0))\n [       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/81 (54 ms)\n </denchmark-code>\n \n \n no fix applied:\n \n <denchmark-code>[ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/3, where GetParam() = (640x480, (COLOR_YUV2RGB, 3, 0))\n [       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/3 (14 ms)\n \n \n [ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/29, where GetParam() = (1280x720, (COLOR_YUV2RGB, 3, 0))\n [       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/29 (28 ms)\n \n \n [ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/55, where GetParam() = (1920x1080, (COLOR_YUV2RGB, 3, 0))\n [       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/55 (64 ms)\n \n \n [ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/81, where GetParam() = (3840x2160, (COLOR_YUV2RGB, 3, 0))\n [       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/81 (255 ms)\n </denchmark-code>\n \n \t\t"}}}, "commit": {"commit_id": "3bc1b5396258a85c6b3078b176cab3f7c8210c3a", "commit_author": "Anastasia Murzova", "commitT": "2020-12-18 21:40:32+03:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\imgproc\\src\\color.hpp", "file_new_name": "modules\\imgproc\\src\\color.hpp", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "107", "deleted_lines": null, "method_info": {"method_name": "cv::impl::dstChannels", "method_params": "code", "method_startline": "92", "method_endline": "120"}}}}}}}