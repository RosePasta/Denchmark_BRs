{"BR": {"BR_id": "17553", "BR_author": "EhsanKia", "BRopenT": "2020-06-15T06:17:48Z", "BRcloseT": "2020-12-11T19:09:36Z", "BR_text": {"BRsummary": "knnSearch in Flann Index segfaults if used after leaving the local scope", "BRdescription": "\n \n OpenCV => 4.2.0.34\n Operating System / Platform => Windows 32 Bit, Debian 64 bit\n Compiler => precompiled manylinux/windows binaries, as well as manually compiled with g++\n \n <denchmark-h:h5>Detailed description</denchmark-h>\n \n knnSearch on FLANN Index causes a segfault (windows and debian, 32bit and 64bit, precompiled and manually compiled) when using algorithm 0, 1, 2, 3 and 5 (not with algorithm 4), if you create the index in a function and return it, then use knnSearch in another method.\n It seems to be a memory issue. With < around 20s images (~1000 features), it never segfaults, but as the number of images go up, the probability of segfault does too, and eventually at around 40 images/2000 features, it gets to 100%.\n My uneducated guess is that some things are getting freed after we leave the function scope which shouldn't, and the more stuff you have loaded, the higher the probability of a GC run which wipes one of those variables that are needed.\n <denchmark-h:h5>Steps to reproduce</denchmark-h>\n \n import cv2\n import glob\n import numpy\n \n def create_index(feature):\n     descriptors = []\n     for filename in glob.glob('*.png')[:30]:  # Adjust this 30\n         img = cv2.imread(filename)\n         _, des = feature.detectAndCompute(img, None)\n         descriptors.append(des)\n \n     index_params = dict(algorithm=1)\n     descriptor_array = numpy.concatenate(descriptors)\n     print(descriptor_array.shape)\n     flann = cv2.flann_Index(descriptor_array, index_params)\n     return flann\n \n feature = cv2.xfeatures2d.SURF_create()  # Same for SIFT and ORB\n index = create_index(feature)\n query_img = cv2.imread('barrel.png')\n _, query_des = feature.detectAndCompute(query_img, None)\n idx, _ = index.knnSearch(query_des, 1)  # <-- segfault\n print('this line is never reached')\n The images are these, but I believe any would do:\n <denchmark-link:https://github.com/EhsanKia/CatalogScanner/tree/master/diys/generated>https://github.com/EhsanKia/CatalogScanner/tree/master/diys/generated</denchmark-link>\n \n <denchmark-h:h5>Issue submission checklist</denchmark-h>\n \n \n [ X ] I report the issue, it's not a question\n [ X ] I checked the problem with documentation, FAQ, open issues,\n answers.opencv.org, Stack Overflow, etc and have not found solution\n [ X ] I updated to latest OpenCV version and the issue is still there\n [ X ] There is reproducer code and related data files: videos, images, onnx, etc\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "EhsanKia", "commentT": "2020-06-15T06:53:34Z", "comment_text": "\n \t\tsimilar behaviour in c++, the problem might be here:\n \n \n \n opencv/modules/flann/src/miniflann.cpp\n \n \n          Line 319\n       in\n       c244b45\n \n \n \n \n \n \n  ::cvflann::Matrix<ElementType> dataset((ElementType*)data.data, data.rows, data.cols); \n \n \n \n \n \n (it tries to \"run away\" with the descriptor Mat's data pointer)\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "EhsanKia", "commentT": "2020-12-08T05:09:02Z", "comment_text": "\n \t\tFix for 4.x branch is here: <denchmark-link:https://github.com/opencv/opencv/pull/19045>#19045</denchmark-link>\n \n Please take a look.\n \t\t"}}}, "commit": {"commit_id": "a04479746a944aa3a6de5029658423c82462e15a", "commit_author": "Alexander Alekhin", "commitT": "2020-12-11 19:09:35+00:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\features2d\\test\\test_nearestneighbors.cpp", "file_new_name": "modules\\features2d\\test\\test_nearestneighbors.cpp", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "126", "deleted_lines": "126", "method_info": {"method_name": "opencv_test::NearestNeighborTest::run", "method_params": "int", "method_startline": "121", "method_endline": "153"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "modules\\flann\\include\\opencv2\\flann\\miniflann.hpp", "file_new_name": "modules\\flann\\include\\opencv2\\flann\\miniflann.hpp", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "172,173,178", "deleted_lines": null}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "modules\\flann\\src\\miniflann.cpp", "file_new_name": "modules\\flann\\src\\miniflann.cpp", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "795,796,797,798,799,800,801", "deleted_lines": null, "method_info": {"method_name": "cv::flann::Index::load", "method_params": "_data,filename", "method_startline": "792", "method_endline": "801"}}, "hunk_1": {"Ismethod": 1, "added_lines": "803,804,805,806,807", "deleted_lines": null, "method_info": {"method_name": "cv::flann::Index::load_", "method_params": "filename", "method_startline": "803", "method_endline": "883"}}, "hunk_2": {"Ismethod": 1, "added_lines": "393,394,395,396,397,401", "deleted_lines": "396,400", "method_info": {"method_name": "cv::flann::Index::build", "method_params": "_data,params,_distType", "method_startline": "388", "method_endline": "448"}}, "hunk_3": {"Ismethod": 1, "added_lines": "469,470", "deleted_lines": null, "method_info": {"method_name": "cv::flann::Index::release", "method_params": "", "method_startline": "465", "method_endline": "509"}}}}}}}