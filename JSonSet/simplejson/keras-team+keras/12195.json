{"BR": {"BR_id": "12195", "BR_author": "faustomorales", "BRopenT": "2019-02-03T18:01:19Z", "BRcloseT": "2019-10-22T14:14:40Z", "BR_text": {"BRsummary": "ValueError: Unable to create group (Name already exists) with model.save_weights()", "BRdescription": "\n This is a similar issue to <denchmark-link:https://github.com/keras-team/keras/issues/6005>#6005</denchmark-link>\n  but I believe it is caused by the way  defines groups. In particular, if a layer named  is in a network after a layer named ,  throws an exception. But the same does not occur if  comes first. To reproduce, see the snippet below.\n <denchmark-code>from keras import layers, models\n \n # This raises an exception.\n input_layer = layers.Input((None, None, 3), name='test_input')\n x = layers.Conv2D(1, 1, name='conv1/conv')(input_layer)\n x = layers.BatchNormalization(name='conv1/bn')(x)\n x = layers.Activation('relu', name='conv1')(x)\n models.Model(inputs=input_layer, outputs=x).save_weights('test.h5')\n \n # This doesn't raise an exception\n input_layer = layers.Input((None, None, 3), name='test_input')\n x = layers.Conv2D(1, 1, name='conv1')(input_layer)\n x = layers.BatchNormalization(name='conv1/bn')(x)\n x = layers.Activation('relu', name='conv1/relu')(x)\n models.Model(inputs=input_layer, outputs=x).save_weights('test.h5')\n </denchmark-code>\n \n Perhaps we could provide a more helpful error message in keras/engine/saving.py? For example, changing part of save_weights_to_hdf5_group to the following would help trace the offending layer name.\n <denchmark-code>for layer in layers:\n     try:\n          g = group.create_group(layer.name)\n     except ValueError:\n          raise ValueError('An error occurred creating weights group for {0}.'.format(layer.name))\n     symbolic_weights = layer.weights\n     weight_values = K.batch_get_value(symbolic_weights)\n </denchmark-code>\n \n Happy to create PR if this is helpful.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "faustomorales", "commentT": "2019-02-03T21:31:39Z", "comment_text": "\n \t\tI don't really know what we should do in this case. But that's definitely an issue. <denchmark-link:https://github.com/farizrahman4u>@farizrahman4u</denchmark-link>\n  what should we do about this?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "faustomorales", "commentT": "2019-02-04T19:36:53Z", "comment_text": "\n \t\tWill get back to this and the pyux PR on Saturday.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "faustomorales", "commentT": "2019-08-22T05:05:30Z", "comment_text": "\n \t\tI'm experiencing the same issue. Any updates on this?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "faustomorales", "commentT": "2019-09-06T07:09:42Z", "comment_text": "\n \t\tI am also facing the same issue, Any updates on it?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "faustomorales", "commentT": "2019-09-08T22:53:29Z", "comment_text": "\n \t\t+1\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "faustomorales", "commentT": "2019-09-12T13:41:05Z", "comment_text": "\n \t\tI met the same error, I solved it by saving the model with .tf instead of .h5\n Plus, I am using TensorFlow 2.0, the default saving format is .tf\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "faustomorales", "commentT": "2019-09-30T17:21:49Z", "comment_text": "\n \t\tThis issue has a larger effect than suggested in the top of the thread.  It actually completely prevents saving the weights of a keras model that uses tf.ones_like.\n in_layer = Input((None, None, 3), name=\"test_input\")\n ones = K.ones_like(in_layer)\n model = Model(inputs=in_layer, outputs=ones)\n \n model.save_weights(\"tmp/test_save_ones.keras\")\n Raises: ValueError: Unable to create group (name already exists)\n This is because of the issue described above by <denchmark-link:https://github.com/faustomorales>@faustomorales</denchmark-link>\n  and can be seen if we look at how  gets added to the keras model:\n [(l, l.name) for l in model.layers]\n Output:\n <denchmark-code>[(<tensorflow.python.keras.engine.input_layer.InputLayer at 0x7fb6e9fa53c8>,\n   'test_input'),\n  (<tensorflow.python.keras.engine.base_layer.TensorFlowOpLayer at 0x7fb6e9fa56d8>,\n   'tf_op_layer_ones_like_2/Shape'),\n  (<tensorflow.python.keras.engine.base_layer.TensorFlowOpLayer at 0x7fb6e9fa59e8>,\n   'tf_op_layer_ones_like_2')]\n </denchmark-code>\n \n I haven't looked around for other places where this is happening but I assume that there are more cases where this causes problems.  Given that this effectively breaks a core part of the Keras API in tensorflow--the ability to save certain models in h5 format--I'd argue that this needs a more serious fix than just an error message.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "faustomorales", "commentT": "2019-10-11T09:29:48Z", "comment_text": "\n \t\thello, I also get trouble with this issue.\n If you guys are using tensorflow 2.0, you can change \".h5\" to \".tf\" and everything should be saved.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "faustomorales", "commentT": "2019-10-21T08:52:14Z", "comment_text": "\n \t\tHello,\n I also have this issue with tensorflow 2.0.0\n If some of you still want to use the .h5 format, I've found a potential fix.\n Since the problem lays in the order of creation of the h5py groups: a group name can't be prefix of a previous group name, it is possible to sort the layers by name before saving them.\n This change worked for me :\n File: $CUSTOM_PATH/tensorflow_core/python/keras/saving/hdf5_format.py\n Function: save_weights_to_hdf5_group\n <denchmark-code>  for layer in layers:\n     g = f.create_group(layer.name)\n     weights = _legacy_weights(layer)\n     weight_values = K.batch_get_value(weights)\n     weight_names = [w.name.encode('utf8') for w in weights]\n     save_attributes_to_hdf5_group(g, 'weight_names', weight_names)\n     for name, val in zip(weight_names, weight_values):\n       param_dset = g.create_dataset(name, val.shape, dtype=val.dtype)\n       if not val.shape:\n         # scalar\n         param_dset[()] = val\n       else:\n         param_dset[:] = val\n </denchmark-code>\n \n replaced by:\n <denchmark-code>  sorted_layers = [(layers[i].name, i) for i in range(len(layers))]\n   sorted_layers.sort()\n \n   for sorted_layer_index in range(len(sorted_layers)):\n     layer = layers[sorted_layers[sorted_layer_index][1]]\n     g = f.create_group(layer.name)\n     weights = _legacy_weights(layer)\n     weight_values = K.batch_get_value(weights)\n     weight_names = [w.name.encode('utf8') for w in weights]\n     save_attributes_to_hdf5_group(g, 'weight_names', weight_names)\n     for name, val in zip(weight_names, weight_values):\n       param_dset = g.create_dataset(name, val.shape, dtype=val.dtype)\n       if not val.shape:\n         # scalar\n         param_dset[()] = val\n       else:\n         param_dset[:] = val\n </denchmark-code>\n \n With this modification I was able to save my model in .h5 format and then to load my model from scratch and run inferences.\n I can do a pull request if you think it's a good idea\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "faustomorales", "commentT": "2019-10-22T14:14:42Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/keras-team/keras/issues/12195>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/keras-team/keras/issues/12195>No</denchmark-link>\n \n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "faustomorales", "commentT": "2019-12-08T11:06:54Z", "comment_text": "\n \t\twow! I seconded <denchmark-link:https://github.com/Salingo>@Salingo</denchmark-link>\n !  By changing weight file name from .h5 to .tf it should work! No idea why it is the case, though!\n My case: Tensorflow Keras (version 1.14)\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "faustomorales", "commentT": "2020-04-09T10:33:34Z", "comment_text": "\n \t\t\n This issue has a larger effect than suggested in the top of the thread. It actually completely prevents saving the weights of a keras model that uses tf.ones_like.\n in_layer = Input((None, None, 3), name=\"test_input\")\n ones = K.ones_like(in_layer)\n model = Model(inputs=in_layer, outputs=ones)\n \n model.save_weights(\"tmp/test_save_ones.keras\")\n Raises: ValueError: Unable to create group (name already exists)\n This is because of the issue described above by @faustomorales and can be seen if we look at how ones_like gets added to the keras model:\n [(l, l.name) for l in model.layers]\n Output:\n [(<tensorflow.python.keras.engine.input_layer.InputLayer at 0x7fb6e9fa53c8>,\n   'test_input'),\n  (<tensorflow.python.keras.engine.base_layer.TensorFlowOpLayer at 0x7fb6e9fa56d8>,\n   'tf_op_layer_ones_like_2/Shape'),\n  (<tensorflow.python.keras.engine.base_layer.TensorFlowOpLayer at 0x7fb6e9fa59e8>,\n   'tf_op_layer_ones_like_2')]\n \n I haven't looked around for other places where this is happening but I assume that there are more cases where this causes problems. Given that this effectively breaks a core part of the Keras API in tensorflow--the ability to save certain models in h5 format--I'd argue that this needs a more serious fix than just an error message.\n \n One walk around is to use the Lambda layer to wrap these type of operations\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "faustomorales", "commentT": "2020-04-30T19:30:10Z", "comment_text": "\n \t\tI'm still getting this issue no matter what I try. Any ideas on what I'm doing wrong? I'm trying to save the YAM net model so I can then convert it to tensorflow.js.\n <denchmark-code>      cls._yamnet = yamnet.yamnet_frames_model(params)\n       cls._yamnet.load_weights('yamnet.h5')\n       cls._yamnet_classes = yamnet.class_names('yamnet_class_map.csv')\n       YAMNetTest._yamnet.save('./foo/yamnet.h5') # Unable to create group (name already exists)\n     # YAMNetTest._yamnet.save('./foo/yamnet') # 'Tensor' object has no attribute '_datatype_enum'\n     # tfjs.converters.save_keras_model(YAMNetTest._yamnet, './foo') # Unable to create group (name already exists)\n     # YAMNetTest._yamnet.save('./foo/foo.tf') # 'Tensor' object has no attribute '_datatype_enum'\n     # tf.saved_model.save(YAMNetTest._yamnet, './foo') # 'Tensor' object has no attribute '_datatype_enum'\n </denchmark-code>\n \n Versions:\n <denchmark-code>tensorboard          2.1.1      \n tensorflow           2.1.0      \n tensorflow-cpu       2.1.0      \n tensorflow-estimator 2.1.0      \n tensorflow-hub       0.7.0      \n tensorflowjs         1.7.4  \n </denchmark-code>\n \n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "faustomorales", "commentT": "2020-07-19T01:52:27Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/Tbuhet>@Tbuhet</denchmark-link>\n  Your method works for saving the model but it creates issues while loading this model. How to get around that?\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "faustomorales", "commentT": "2020-09-05T06:35:51Z", "comment_text": "\n \t\t\n hello, I also get trouble with this issue.\n If you guys are using tensorflow 2.0, you can change \".h5\" to \".tf\" and everything should be saved.\n \n hello, I also get trouble with this issue. how did u do that ,model.save(xxxx.tf)?\n \t\t"}}}, "commit": {"commit_id": "ecac367b2372b5f2326fcd3ddd11718323427f4e", "commit_author": "Thibault Buhet", "commitT": "2019-10-22 16:14:39+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "keras\\engine\\saving.py", "file_new_name": "keras\\engine\\saving.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "747,748,749", "deleted_lines": "747", "method_info": {"method_name": "save_weights_to_hdf5_group", "method_params": "group,layers", "method_startline": "733", "method_endline": "768"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tests\\keras\\metrics_training_test.py", "file_new_name": "tests\\keras\\metrics_training_test.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "83", "deleted_lines": "83"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\test_model_saving.py", "file_new_name": "tests\\test_model_saving.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "711,712,713,714,715,716,717,718,719,720,721,722,723", "deleted_lines": null, "method_info": {"method_name": "test_saving_group_naming_h5py", "method_params": "tmpdir", "method_startline": "711", "method_endline": "723"}}}}}}}