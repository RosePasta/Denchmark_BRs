{"BR": {"BR_id": "6173", "BR_author": "drscotthawley", "BRopenT": "2017-04-06T04:39:47Z", "BRcloseT": "2017-04-10T22:56:11Z", "BR_text": {"BRsummary": "K.batch_dot() doc example fails w/ Tensorflow backend", "BRdescription": "\n From the batch_dot section of the Backend docs (<denchmark-link:https://keras.io/backend/>https://keras.io/backend/</denchmark-link>\n ):\n \n Shape inference: Let x's shape be (100, 20) and y's shape be (100, 30, 20). If axes is (1, 2), to find the output shape of resultant tensor, loop through each dimension in x's shape and y's shape:\n x.shape[0] : 100 : append to output shape\n x.shape[1] : 20 : do not append to output shape, dimension 1 of x has been summed over. (dot_axes[0] = 1)\n y.shape[0] : 100 : do not append to output shape, always ignore first dimension of y\n y.shape[1] : 30 : append to output shape\n y.shape[2] : 20 : do not append to output shape, dimension 2 of y has been summed over. (dot_axes[1] = 2) output_shape = (100, 30)\n \n \n Actually running this (see below code) produces errors when using the newest Tensorflow.  Seems to be ok with Theano.\n Please make sure that the boxes below are checked before you submit your issue. If your issue is an implementation question, please ask your question on <denchmark-link:http://stackoverflow.com/questions/tagged/keras>StackOverflow</denchmark-link>\n  or <denchmark-link:https://keras-slack-autojoin.herokuapp.com/>join the Keras Slack channel</denchmark-link>\n  and ask there instead of filing a GitHub issue.\n Thank you!\n \n \n  Check that you are up-to-date with the master branch of Keras. You can update with:\n pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps\n \n \n  If running on TensorFlow, check that you are up-to-date with the latest version. The installation instructions can be found here.\n \n \n  If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:\n pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps\n \n \n  Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).\n \n \n <denchmark-code>from keras import backend as K\n \n x = K.ones(shape=(100,20))\n y = K.ones(shape=(100,30,20))\n xy = K.batch_dot(x,y,axes=(1,2))\n </denchmark-code>\n \n Fails with...\n Using TensorFlow backend.\n Traceback (most recent call last):\n File \"/opt/anaconda/envs/py35/lib/python3.5/site-packages/tensorflow/python/framework/common_shapes.py\", line 671, in _call_cpp_shape_fn_impl\n input_tensors_as_shapes, status)\n File \"/opt/anaconda/envs/py35/lib/python3.5/contextlib.py\", line 66, in exit\n next(self.gen)\n File \"/opt/anaconda/envs/py35/lib/python3.5/site-packages/tensorflow/python/framework/errors_impl.py\", line 466, in raise_exception_on_not_ok_status\n pywrap_tensorflow.TF_GetCode(status))\n tensorflow.python.framework.errors_impl.InvalidArgumentError: Shape must be rank 2 but is rank 3 for 'MatMul' (op: 'MatMul') with input shapes: [100,20], [100,30,20].\n During handling of the above exception, another exception occurred:\n Traceback (most recent call last):\n File \"batch_dot_test.py\", line 6, in \n xy = K.batch_dot(x,y,axes=(1,2))\n File \"/opt/anaconda/envs/py35/lib/python3.5/site-packages/keras/backend/tensorflow_backend.py\", line 917, in batch_dot\n out = tf.matmul(x, y, adjoint_a=adj_x, adjoint_b=adj_y)\n File \"/opt/anaconda/envs/py35/lib/python3.5/site-packages/tensorflow/python/ops/math_ops.py\", line 1801, in matmul\n a, b, transpose_a=transpose_a, transpose_b=transpose_b, name=name)\n File \"/opt/anaconda/envs/py35/lib/python3.5/site-packages/tensorflow/python/ops/gen_math_ops.py\", line 1263, in _mat_mul\n transpose_b=transpose_b, name=name)\n File \"/opt/anaconda/envs/py35/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py\", line 768, in apply_op\n op_def=op_def)\n File \"/opt/anaconda/envs/py35/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 2338, in create_op\n set_shapes_for_outputs(ret)\n File \"/opt/anaconda/envs/py35/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 1719, in set_shapes_for_outputs\n shapes = shape_func(op)\n File \"/opt/anaconda/envs/py35/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 1669, in call_with_requiring\n return call_cpp_shape_fn(op, require_shape_fn=True)\n File \"/opt/anaconda/envs/py35/lib/python3.5/site-packages/tensorflow/python/framework/common_shapes.py\", line 610, in call_cpp_shape_fn\n debug_python_shape_fn, require_shape_fn)\n File \"/opt/anaconda/envs/py35/lib/python3.5/site-packages/tensorflow/python/framework/common_shapes.py\", line 676, in _call_cpp_shape_fn_impl\n raise ValueError(err.message)\n ValueError: Shape must be rank 2 but is rank 3 for 'MatMul' (op: 'MatMul') with input shapes: [100,20], [100,30,20].\n When using Theano, no output appears at all, indicating success.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "drscotthawley", "commentT": "2017-04-06T04:57:04Z", "comment_text": "\n \t\tjust passing x = K.ones(shape=(100,20,1)) resolves this issue.\n From keras.backend.tensorflow_backend.py\n \n \n \n x_batch = K.ones(shape=(32, 20, 1))\n y_batch = K.ones(shape=(32, 30, 20))\n xy_batch_dot = K.batch_dot(x_batch, y_batch, axes=[1, 2])\n K.int_shape(xy_batch_dot)\n (32, 1, 30)\n \n \n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "drscotthawley", "commentT": "2017-04-09T03:38:34Z", "comment_text": "\n \t\tTrue, that is a viable workaround, however that is not what the documentation says -- as it stands, there's a contradiction.  And it's not what happens with the Theano backend.  Plus your result produces the wrong number of dimensions; it would need a call to reshape() at the end.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "drscotthawley", "commentT": "2017-04-09T21:25:44Z", "comment_text": "\n \t\tCan someone please investigate what a solution would look like?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "drscotthawley", "commentT": "2017-04-10T18:58:06Z", "comment_text": "\n \t\tTo me, it is not a bug in code though but somehow inconsistency in the documents. The code example in the official site <denchmark-link:https://keras.io/backend/>https://keras.io/backend/</denchmark-link>\n , which only appears in the docstring in tensorflow backend, actually implies the fact that x and y should be of the same rank.\n Theano backend uses  to implement  which happens to help you expand the missing dim if applicable. While in the tensorflow backend, I don't think this is ever supported, no matter using  or latest . Specifically, see <denchmark-link:https://www.tensorflow.org/api_docs/python/tf/matmul>tf.matmul</denchmark-link>\n ,\n .\n \n It is possible to manually fix this, possibly add as below to (<denchmark-link:https://github.com/fchollet/keras/blob/master/keras/backend/tensorflow_backend.py#L911>https://github.com/fchollet/keras/blob/master/keras/backend/tensorflow_backend.py#L911</denchmark-link>\n )\n         if ndim(x) < ndim(y):\n             x = tf.expand_dims(x, axis=ndim(x) if axes[0] == ndim(x) - 1 else ndim(x))\n         if ndim(y) < ndim(x):\n             y = tf.expand_dims(y, axis=ndim(y) if axes[1] == ndim(y) - 1 else ndim(y))\n         \n         if axes is not None:\n             adj_x = None if axes[0] == ndim(x) - 1 else True\n         ....\n Use ndim(x)-1 not hard code1 or 2 because tf.matmul now supports the input to have more than 3 ranks. Or would it be better we raise an error to both backends to notify that the inputs x and y should be of the same rank?\n if ndim(x) != ndim(y):\n      raise ValueError(\"Inputs should have same ranks but are \" + str(ndim(x)) + \" and \" + str(ndim(y)) + \".\")\n I am not sure which way is better and the first solution need more checks for conditions.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "drscotthawley", "commentT": "2017-04-10T20:54:09Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/keras-team/keras/pull/6219>#6219</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "ac6fde801c6b39588aae8e8660e5bbbbf0542110", "commit_author": "Fariz Rahman", "commitT": "2017-04-10 15:56:00-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "keras\\backend\\tensorflow_backend.py", "file_new_name": "keras\\backend\\tensorflow_backend.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "905,906,907,908,909,910,911,912,913,914,928,929,930,931,932,933", "deleted_lines": null, "method_info": {"method_name": "batch_dot", "method_params": "x,y,axes", "method_startline": "852", "method_endline": "936"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\keras\\backend\\backend_test.py", "file_new_name": "tests\\keras\\backend\\backend_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "86,87,88,89", "deleted_lines": null, "method_info": {"method_name": "test_linear_operations", "method_params": "self", "method_startline": "80", "method_endline": "94"}}}}}}}