{"BR": {"BR_id": "621", "BR_author": "yuangu", "BRopenT": "2020-10-27T02:18:50Z", "BRcloseT": "2020-10-29T04:47:58Z", "BR_text": {"BRsummary": "pth and onnx export different results on pytorch", "BRdescription": "\n import torch\n import torch.nn as nn\n import torch.nn.functional as F\n import torch.onnx\n  \n import netron\n  \n class model(nn.Module):\n     def __init__(self):\n         super(model, self).__init__()\n         self.block1 = nn.Sequential(\n             nn.Conv2d(64, 64, 3, padding=1, bias=False),\n             nn.BatchNorm2d(64),\n             nn.ReLU(inplace=True),\n             nn.Conv2d(64, 32, 1, bias=False),\n             nn.BatchNorm2d(32),\n             nn.ReLU(inplace=True),\n             nn.Conv2d(32, 64, 3, padding=1, bias=False),\n             nn.BatchNorm2d(64)\n         )\n  \n         self.conv1 = nn.Conv2d(3, 64, 3, padding=1, bias=False)\n         self.output = nn.Sequential(\n             nn.Conv2d(64, 1, 3, padding=1, bias=True),\n             nn.Sigmoid()\n         )\n  \n     def forward(self, x):\n         x = self.conv1(x)\n         identity = x\n         x = F.relu(self.block1(x) + identity)\n         x = self.output(x)\n         return x\n  \n  \n d = torch.rand(1, 3, 416, 416)\n m = model()\n o = m(d)\n  \n # onnx_path = \"onnx_model_name.onnx\"\n # torch.onnx.export(m, d, onnx_path)\n # netron.start(onnx_path)\n \n modelPath = './model_para.pth'\n torch.save(m, modelPath)\n netron.start(modelPath)`\n here is this code . The result of PTH lacks an addition operator\u3002\n pth data:\n <denchmark-link:https://user-images.githubusercontent.com/1897438/97248664-379c6480-183d-11eb-9dbb-5cb7c9179b3b.png></denchmark-link>\n \n onnx data:\n <denchmark-link:https://user-images.githubusercontent.com/1897438/97248750-67e40300-183d-11eb-8916-4689eff53abe.png></denchmark-link>\n \n win10 + Python 3.8.5 + Pytorch 1.6.0 + netron 4.5.9\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "yuangu", "commentT": "2020-10-29T04:47:57Z", "comment_text": "\n \t\ttorch.save will not save the full model graph. The connections and order can only be guessed or not rendered. The full graph is included in ONNX or TorchScript (as code).\n \t\t"}}}, "commit": {"commit_id": "7946ce430924a738c8a741e08506b7a959dd5e88", "commit_author": "Lutz Roeder", "commitT": "2020-10-28 21:41:37-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "source\\pytorch.js", "file_new_name": "source\\pytorch.js", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "140", "deleted_lines": "140,141,142,143,144,145", "method_info": {"method_name": "constructor", "method_params": "metadata,container", "method_startline": "59", "method_endline": "162"}}, "hunk_1": {"Ismethod": 1, "added_lines": "236,253", "deleted_lines": "221,231,232,234,235,257,274", "method_info": {"method_name": "_createNode", "method_params": "metadata,groups,key,obj,args", "method_startline": "221", "method_endline": "275"}}, "hunk_2": {"Ismethod": 1, "added_lines": "211,213,214", "deleted_lines": "211,212", "method_info": {"method_name": "this._createNode", "method_params": "metadata,groups,key,value,inputs", "method_startline": "211", "method_endline": "219"}}, "hunk_3": {"Ismethod": 1, "added_lines": "198,208,209,210,211,213,214,236,253", "deleted_lines": "198,199,200,201,202,203,204,205,206,209,211,212,221,231,232,234,235", "method_info": {"method_name": "_createNode", "method_params": "metadata,groups,key,obj,args,output", "method_startline": "198", "method_endline": "254"}}, "hunk_4": {"Ismethod": 1, "added_lines": "211,213", "deleted_lines": "211,212", "method_info": {"method_name": "(anonymous)", "method_params": "", "method_startline": "211", "method_endline": "213"}}, "hunk_5": {"Ismethod": 1, "added_lines": "189", "deleted_lines": "190,191,192,193,194,195,196", "method_info": {"method_name": "this._createNode", "method_params": "metadata,groups,key,value,sequential", "method_startline": "189", "method_endline": "196"}}}}}}}