{"BR": {"BR_id": "479", "BR_author": "itayalfia", "BRopenT": "2020-04-24T19:50:22Z", "BRcloseT": "2020-04-28T13:18:33Z", "BR_text": {"BRsummary": "Summary fails for subclassed keras models", "BRdescription": "\n <denchmark-h:h3>Describe the bug</denchmark-h>\n \n When using subclassed Keras models, calling larq.models.summary fails and expects calling\n model.build first.\n Even if build is called, it fails with another less obvious error (seems to be a problem with output_shape)\n <denchmark-h:h3>To Reproduce</denchmark-h>\n \n import larq\n import tensorflow as tf\n from tensorflow import keras\n from larq_zoo.sota import QuickNet\n from zookeeper import cli, task\n from typing import Callable, Optional\n \n \n class EmbedderWrapperModel(keras.Model):\n     def __init__(self, zoo_class: Callable[..., keras.Model],\n                  input_shape: int, num_classes: int, dynamic=False,\n                  finetune_basenet=True, pretrained_basenet=True, cut_layer_name: Optional[str] = None):\n         super(EmbedderWrapperModel, self).__init__(dynamic=dynamic)\n \n         self.basenet = self._get_basenet(zoo_class, input_shape, finetune_basenet, pretrained_basenet, cut_layer_name)\n         global_pool_shape = self.basenet.output_shape[1], self.basenet.output_shape[2]\n \n         self.batch_norm = keras.layers.BatchNormalization(momentum=0.9, epsilon=1e-5)\n         self.global_pool = keras.layers.AveragePooling2D(pool_size=global_pool_shape)\n         self.dense_softmax = keras.layers.Dense(num_classes, activation=tf.nn.softmax)\n \n     def _get_basenet(self, zoo_class: Callable[..., keras.Model], input_shape: int,\n                      finetune_basenet: bool, pretrained_basenet: bool, cut_layer_name: Optional[str]) -> keras.Model:\n         weights = \"imagenet\" if pretrained_basenet else None\n \n         if not cut_layer_name:\n             basenet = zoo_class(input_shape=(input_shape, input_shape, 3), include_top=False, weights=weights)\n         else:\n             full_zoo_model = zoo_class(input_shape=(input_shape, input_shape, 3), include_top=True, weights=weights)\n             inputs, outputs = full_zoo_model.inputs, full_zoo_model.get_layer(cut_layer_name).output\n             basenet = keras.Model(inputs=inputs, outputs=outputs)\n \n         basenet.trainable = finetune_basenet\n \n         return basenet\n \n     def call(self, inputs, training=False, mask=None):\n         x = self.basenet(inputs, training=training)\n         x = self.batch_norm(x, training=training)\n         x = self.global_pool(x)\n         x = keras.layers.Flatten()(x)\n         x = self.dense_softmax(x)\n \n         return x\n \n \n @task\n class BugTest:\n     INPUT_SHAPE = 224\n     CLASSES_NUM = 10\n \n     FINETUNE_BASENET = False\n     PRETRAINED_BASENET = True\n \n     def run(self):\n         cut_layer_name = \"activation\"  # `activation` is last relu layer before global pooling\n \n         model = EmbedderWrapperModel(QuickNet, self.INPUT_SHAPE, self.CLASSES_NUM,\n                                      finetune_basenet=self.FINETUNE_BASENET, pretrained_basenet=self.PRETRAINED_BASENET,\n                                      cut_layer_name=cut_layer_name)\n \n         model.build(input_shape=(None, 224, 224, 3))\n \n         larq.models.summary(model)\n \n \n if __name__ == \"__main__\":\n     cli()\n <denchmark-h:h3>Expected behavior</denchmark-h>\n \n Expected model.build to solve the problem, instead got:\n <denchmark-code>Traceback (most recent call last):\n   File \"C:/Users/User/PycharmProjects/BNN-Playground/summary_bug.py\", line 68, in <module>\n     cli()\n   File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\click\\core.py\", line 829, in __call__\n     return self.main(*args, **kwargs)\n   File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\click\\core.py\", line 782, in main\n     rv = self.invoke(ctx)\n   File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\click\\core.py\", line 1259, in invoke\n     return _process_result(sub_ctx.command.invoke(sub_ctx))\n   File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\click\\core.py\", line 1066, in invoke\n     return ctx.invoke(self.callback, **ctx.params)\n   File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\click\\core.py\", line 610, in invoke\n     return callback(*args, **kwargs)\n   File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\zookeeper\\core\\task.py\", line 59, in command\n     task_instance.run()\n   File \"C:/Users/User/PycharmProjects/BNN-Playground/summary_bug.py\", line 64, in run\n     larq.models.summary(model)\n   File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\larq\\models.py\", line 466, in summary\n     model_profile = ModelProfile(model)\n   File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\larq\\models.py\", line 261, in __init__\n     self.layer_profiles = [LayerProfile(l) for l in model.layers]\n   File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\larq\\models.py\", line 261, in <listcomp>\n     self.layer_profiles = [LayerProfile(l) for l in model.layers]\n   File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\larq\\models.py\", line 158, in __init__\n     n=p.count * self.output_pixels,\n   File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\larq\\models.py\", line 227, in output_pixels\n     if len(self.output_shape) == 4:\n TypeError: object of type 'NoneType' has no len()\n </denchmark-code>\n \n <denchmark-h:h3>Environment</denchmark-h>\n \n TensorFlow version: 2.2.0rc3\n Larq version: 0.9.4\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "itayalfia", "commentT": "2020-04-24T22:51:53Z", "comment_text": "\n \t\t\n When using subclassed Keras models, calling larq.models.summary fails and expects calling\n model.build first.\n \n This is unfortunately something we cannot easily fix. This is also how Keras handles it when model.summary() is called.\n \n Even if build is called, it fails with another less obvious error (seems to be a problem with output_shape)\n \n I submitted a fix for this in <denchmark-link:https://github.com/larq/larq/pull/480>#480</denchmark-link>\n \n Unfortunately due to the way subclassed models are constructed we cannot display all the information that we can extract from a statically built Functional or Sequential model so statistics that rely on the activation sizes won't be displayed in the summary.\n \t\t"}}}, "commit": {"commit_id": "90a8ab07af60e7da0a0c0bfdee99a976ca8e1181", "commit_author": "Lukas Geiger", "commitT": "2020-04-28 15:18:32+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "larq\\models.py", "file_new_name": "larq\\models.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "153", "deleted_lines": "153", "method_info": {"method_name": "__init__", "method_params": "self,Layer", "method_startline": "133", "method_endline": "162"}}, "hunk_1": {"Ismethod": 1, "added_lines": "228,230,231,234,236", "deleted_lines": "229,231,232", "method_info": {"method_name": "output_pixels", "method_params": "self", "method_startline": "228", "method_endline": "236"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "larq\\models_test.py", "file_new_name": "larq\\models_test.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "10,11,12,13,14,15,16,17,18,19,20", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,kwargs", "method_startline": "10", "method_endline": "20"}}, "hunk_1": {"Ismethod": 1, "added_lines": "149,150,151,152,153,154", "deleted_lines": null, "method_info": {"method_name": "test_subclass_model_summary", "method_params": "snapshot,capsys", "method_startline": "149", "method_endline": "154"}}, "hunk_2": {"Ismethod": 1, "added_lines": "22,23", "deleted_lines": null, "method_info": {"method_name": "call", "method_params": "self,inputs", "method_startline": "22", "method_endline": "23"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "larq\\snapshots\\snap_models_test.py", "file_new_name": "larq\\snapshots\\snap_models_test.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78", "deleted_lines": null}}}}}}