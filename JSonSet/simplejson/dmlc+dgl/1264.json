{"BR": {"BR_id": "1264", "BR_author": "gurdaspuriya", "BRopenT": "2020-02-15T02:18:46Z", "BRcloseT": "2020-02-18T05:55:25Z", "BR_text": {"BRsummary": "multi_update_all with 'stack' reducer", "BRdescription": "\n <denchmark-h:h2>\ud83d\ude80 Feature</denchmark-h>\n \n \n Stack order is inconsistent, better to have it consistent.\n The shape of the output is not consistent, when there is only one message-type (single frame), the same frame is returned; while for multiple message-types, an additional dimension is introduced.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "gurdaspuriya", "commentT": "2020-02-17T16:25:37Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/gurdaspuriya>@gurdaspuriya</denchmark-link>\n  We have submitted a patch.\n One quick question: after you stack-reduce the per-type (reduced) messages, how would you like to use it?  For instance, would you pass the whole thing through an MLP, or access each per-type reduced message individually (in this case I would suggest to update_all on each edge type individually instead), or maybe something else?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "gurdaspuriya", "commentT": "2020-02-17T16:32:40Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/BarclayII>@BarclayII</denchmark-link>\n  Thanks for taking care.\n For my current use case, I would pass the whole thing through a MLP.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "gurdaspuriya", "commentT": "2020-02-18T05:55:25Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/gurdaspuriya>@gurdaspuriya</denchmark-link>\n  The patch has been merged. Please checkout the lastest master. Let us know if there are more issues.\n \t\t"}}}, "commit": {"commit_id": "c7f6cf628287b341ddebc9c04ff611fd8c619d4f", "commit_author": "Minjie Wang", "commitT": "2020-02-18 13:54:11+08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 7, "file_old_name": "python\\dgl\\heterograph.py", "file_new_name": "python\\dgl\\heterograph.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "3864", "deleted_lines": null, "method_info": {"method_name": "merge_frames.merger", "method_params": "flist", "method_startline": "3863", "method_endline": "3864"}}, "hunk_1": {"Ismethod": 1, "added_lines": "2860,2889,2892", "deleted_lines": "2888", "method_info": {"method_name": "multi_send_and_recv", "method_params": "self,etype_dict,cross_reducer,apply_node_func,inplace", "method_startline": "2779", "method_endline": "2896"}}, "hunk_2": {"Ismethod": 1, "added_lines": "3050,3066,3069", "deleted_lines": "3063", "method_info": {"method_name": "multi_pull", "method_params": "self,v,etype_dict,cross_reducer,apply_node_func,inplace", "method_startline": "2982", "method_endline": "3072"}}, "hunk_3": {"Ismethod": 1, "added_lines": "3272,3287,3291,3292", "deleted_lines": "3283", "method_info": {"method_name": "multi_update_all", "method_params": "self,etype_dict,cross_reducer,apply_node_func", "method_startline": "3210", "method_endline": "3295"}}, "hunk_4": {"Ismethod": 1, "added_lines": "3825,3830,3834,3835,3836,3837,3838,3839,3846,3847,3848,3851,3852,3853,3854,3855,3864,3874", "deleted_lines": "3831,3834,3835,3837,3845,3855,3856,3857,3858", "method_info": {"method_name": "merge_frames", "method_params": "frames,reducer,order", "method_startline": "3825", "method_endline": "3875"}}, "hunk_5": {"Ismethod": 1, "added_lines": "2656,2671,2674", "deleted_lines": "2672", "method_info": {"method_name": "multi_recv", "method_params": "self,v,reducer_dict,cross_reducer,apply_node_func,inplace", "method_startline": "2586", "method_endline": "2677"}}, "hunk_6": {"Ismethod": 1, "added_lines": "3825,3830,3834,3835,3836,3837,3838,3839,3846,3847,3848,3851,3852,3853,3854,3855", "deleted_lines": "3816,3821,3831,3834,3835,3837,3845,3855,3856,3857,3858", "method_info": {"method_name": "merge_frames", "method_params": "frames,reducer", "method_startline": "3816", "method_endline": "3859"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "tests\\compute\\test_heterograph.py", "file_new_name": "tests\\compute\\test_heterograph.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1481,1482", "deleted_lines": null, "method_info": {"method_name": "test_stack_reduce.rfunc2", "method_params": "nodes", "method_startline": "1481", "method_endline": "1482"}}, "hunk_1": {"Ismethod": 1, "added_lines": "1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494", "deleted_lines": null, "method_info": {"method_name": "test_stack_reduce", "method_params": "", "method_startline": "1470", "method_endline": "1494"}}, "hunk_2": {"Ismethod": 1, "added_lines": "1483,1484", "deleted_lines": null, "method_info": {"method_name": "test_stack_reduce.mfunc", "method_params": "edges", "method_startline": "1483", "method_endline": "1484"}}, "hunk_3": {"Ismethod": 1, "added_lines": "1252,1253,1254,1255", "deleted_lines": "1252,1253,1254,1255,1256,1257", "method_info": {"method_name": "test_level2", "method_params": "", "method_startline": "1047", "method_endline": "1273"}}, "hunk_4": {"Ismethod": 1, "added_lines": "1479,1480", "deleted_lines": null, "method_info": {"method_name": "test_stack_reduce.rfunc", "method_params": "nodes", "method_startline": "1479", "method_endline": "1480"}}}}}}}