{"BR": {"BR_id": "893", "BR_author": "thuzhf", "BRopenT": "2018-09-13T16:03:23Z", "BRcloseT": "2018-09-13T20:26:42Z", "BR_text": {"BRsummary": "Concerns on the uses of `self._init(locals())` in some classes", "BRdescription": "\n \n What you did:\n \n \n If you're using examples: Yes. Actually I notice that you define and call self._init(locals()) in some classes' self.__init__() method. I don't see explanations on this use, but it seems handy and I thought this method could also be used in some other classes. But problems ocurr when I inherit from these classes. The point is that if you inherit from these classes who call self._init(locals()) inside their self.__init__(), the child class's __class__ will be set to the parent class. In this case, if you override some of the parent class's methods, it won't work; that's to say, when you call these overrided methods inside an instance of the child class, it will still call the parent's corresponding method instead of the child's. I will give a concrete example below.\n \n What's the command you run: Please see the pasted code below.\n Have you made any changes to code? Paste them if any: Please see the pasted code below.\n \n \n Better to paste what you did instead of describing them. Please see the pasted code below.\n \n class Z:\n     pass # do other things\n \n class A(Z):\n     def __init__(self, x):\n         super().__init__()\n         self._init(locals())\n \n     def _init(self, params=None):\n         if params:\n             for k, v in params.items():\n                 # if k != 'self' and k != '__class__' and ...:\n                 if k != 'self':\n                     setattr(self, k, v)\n \n     def f(self):\n         print('from A')\n \n class B(A):\n     def __init__(self, x):\n         print('self1: {}'.format(self))\n         super().__init__(x)\n         print('self2: {}'.format(self))\n \n     def f(self):\n         print('from B')\n \n b = B(x=3) # self1 and self2 will be different\n b.f() # and this will print: 'from A'\n ###### The output is pasted below:\n # self1: <__main__.B object at 0x7fec3562c240>\n # self2: <__main__.A object at 0x7fec3562c240>\n # from A\n ######\n \n What you observed, including but not limited to the entire logs.\n \n \n Better to paste what you observed instead of describing them: Please see below.\n \n <denchmark-code>self1: <__main__.B object at 0x7fec3562c240>\n self2: <__main__.A object at 0x7fec3562c240>\n from A\n </denchmark-code>\n \n \n What you expected, if not obvious: I expected self1 and self2 would be the same, and b.f() will print: 'from B'\n Your environment:\n \n \n Python version: 3.6.5\n TF version: v1.10.1-0-g4dcfddc5d1 1.10.1.\n Tensorpack version: 0.8.9.\n \n In this case, it seems people shouldn't inherit from such classes. Because self._init(locals()) is used in some places in your code and I see no explanation on it, I am not sure whether this is your expected behavior. Is it a possible bug or is this your expected behavior (if it is your expected, would you please give me some explanations on how to use it properly)? Thanks!\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "thuzhf", "commentT": "2018-09-13T20:22:59Z", "comment_text": "\n \t\tI think you're right and __class__ should not be set.\n \t\t"}}}, "commit": {"commit_id": "68b8a7b739f122158f3d637e299976cca4ba4dfb", "commit_author": "Yuxin Wu", "commitT": "2018-09-13 22:26:13+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorpack\\dataflow\\imgaug\\base.py", "file_new_name": "tensorpack\\dataflow\\imgaug\\base.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "28", "deleted_lines": "28", "method_info": {"method_name": "_init", "method_params": "self,params", "method_startline": "25", "method_endline": "29"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorpack\\dataflow\\imgaug\\transform.py", "file_new_name": "tensorpack\\dataflow\\imgaug\\transform.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "45", "deleted_lines": "45", "method_info": {"method_name": "_init", "method_params": "self,params", "method_startline": "42", "method_endline": "46"}}}}}}}