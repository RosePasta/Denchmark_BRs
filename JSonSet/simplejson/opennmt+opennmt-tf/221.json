{"BR": {"BR_id": "221", "BR_author": "wanghm92", "BRopenT": "2018-10-14T06:19:56Z", "BRcloseT": "2018-10-15T09:27:31Z", "BR_text": {"BRsummary": "assert_state_is_compatible() cannot detect dimension difference between encoder_state and decoder_zero_state when encoder and decoder dimensions are not the same in NMTSmall model", "BRdescription": "\n I just followed the instructions on the page <denchmark-link:http://opennmt.net/OpenNMT-tf/quickstart.html>http://opennmt.net/OpenNMT-tf/quickstart.html</denchmark-link>\n  and played around a little bit with the NMTSmall model by setting a different  value to the , say , which is different from the  for the .\n This line\n \n \n \n OpenNMT-tf/opennmt/layers/bridge.py\n \n \n          Line 56\n       in\n       ae0ada9\n \n \n \n \n \n \n  assert_state_is_compatible(decoder_zero_state, encoder_state) \n \n \n \n \n \n in the CopyBridge did not throw any error, even though the encoder_state and decoder_zero_state do not have the same dimensions, 256 vs 512.\n It probably natual for someone to think of using the DenseBridge when dimensions are set differently. However, the CopyBridge should be throwing some errors in such misusage cases here, instead of letting one to figure out that with some error message as follows\n ValueError: Dimensions must be equal, but are 1280 and 1536 for 'seq2seq/parallel_0/seq2seq/decoder_1/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul' (op: 'MatMul') with input shapes: [?,1280], [1536,2048].\n Can anyone please explain why the\n \n \n \n OpenNMT-tf/opennmt/layers/bridge.py\n \n \n          Line 28\n       in\n       ae0ada9\n \n \n \n \n \n \n  tf.contrib.framework.with_same_shape(x, y) \n \n \n \n \n \n passed without an issue?\n Thanks!\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "wanghm92", "commentT": "2018-10-15T08:37:28Z", "comment_text": "\n \t\tThanks for reporting.\n Looks like  is incorrectly used here as it does not throw directly but returns  with an <denchmark-link:https://www.tensorflow.org/api_docs/python/tf/Assert>assert op</denchmark-link>\n  dependency. I think we could remove the use of this function and just check manually that the depth dimension is the same.\n \t\t"}}}, "commit": {"commit_id": "45d79f1eb649af56b0e32e030bf48635a1888e38", "commit_author": "Guillaume Klein", "commitT": "2018-10-15 11:27:30+02:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "CHANGELOG.md", "file_new_name": "CHANGELOG.md", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "20", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "opennmt\\layers\\bridge.py", "file_new_name": "opennmt\\layers\\bridge.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "28,29,30,31,32", "deleted_lines": "28", "method_info": {"method_name": "assert_state_is_compatible", "method_params": "expected_state,state", "method_startline": "9", "method_endline": "32"}}}}}}}