{"BR": {"BR_id": "257", "BR_author": "zjuturtle", "BRopenT": "2020-11-13T09:51:14Z", "BRcloseT": "2020-11-23T18:02:53Z", "BR_text": {"BRsummary": "Decode Seq2Seq with unexpected  hidden clear", "BRdescription": "\n <denchmark-h:h3>Bug Description</denchmark-h>\n \n I noice a <denchmark-link:https://github.com/facebookresearch/flashlight/commit/712c9a3fd0a01d1ca7f8b6f49487ea155fa0bcda>commit</denchmark-link>\n  try to reduce memory usage by clear preState.hidden in advance. But it will cause unexpected crash in following decode step\n \n \n \n flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp\n \n \n          Line 387\n       in\n       712c9a3\n \n \n \n \n \n \n  buf->prevStates, \n \n \n \n \n \n In normal case, buf->prevStates is a vector of TS2SState. Every TS2SState->hidden should have same size (Maybe 6 in my case?). But sometimes TS2SState->hidden is empty, that will cause crash in decode step(Because in decode step it will concatenate buf->prevStates)\n I wrote a little code to demonstrate\n <denchmark-code>// flashlight/app/asr/criterion/TransformerCriterion.cpp\n       std::stringstream ss;\n       for(int ii=0;ii < buf->prevStates.size();ii++) {\n           auto &state = buf->prevStates[ii];\n           ss<<\" \"<<state->hidden.size();\n       }\n       FL_LOG(fl::INFO) << \"decode call input.dims =\"<<buf->input.dims()<<\", ys.size()=\"<<buf->ys.size()\n        <<\" prevStates.hidden size =[\"<< ss.str() << \"]prevStates.size()=\" <<buf->prevStates.size();\n \n       std::tie(amScores, outStates) = criterion->decodeBatchStep(\n           buf->input,\n           buf->ys,\n           buf->prevStates,\n           buf->attentionThreshold,\n           buf->smoothingTemperature);\n </denchmark-code>\n \n The output will be like\n <denchmark-code>I1113 09:47:35.609973 82176 TransformerCriterion.cpp:394 decode call input.dims =512 83 1 1, ys.size()=1 prevStates.hidden size =[ 0]prevStates.size()=1\n I1113 09:48:48.601410 82176 TransformerCriterion.cpp:394 decode call input.dims =512 83 1 1, ys.size()=4 prevStates.hidden size =[ 6 6 6 6]prevStates.size()=4\n I1113 09:48:49.637162 82176 TransformerCriterion.cpp:394 decode call input.dims =512 83 1 1, ys.size()=9 prevStates.hidden size =[ 6 6 6 6 6 6 6 6 6]prevStates.size()=9\n I1113 09:48:49.658872 82176 TransformerCriterion.cpp:394 decode call input.dims =512 83 1 1, ys.size()=9 prevStates.hidden size =[ 6 6 6 6 6 6 6 6 6]prevStates.size()=9\n I1113 09:48:49.684775 82176 TransformerCriterion.cpp:394 decode call input.dims =512 83 1 1, ys.size()=9 prevStates.hidden size =[ 6 6 6 6 6 6 6 6 6]prevStates.size()=9\n I1113 09:48:49.727832 82176 TransformerCriterion.cpp:394 decode call input.dims =512 83 1 1, ys.size()=10 prevStates.hidden size =[ 6 6 6 6 6 6 6 6 6 6]prevStates.size()=10\n I1113 09:48:49.759795 82176 TransformerCriterion.cpp:394 decode call input.dims =512 83 1 1, ys.size()=8 prevStates.hidden size =[ 0 0 6 6 6 6 6 6]prevStates.size()=8\n F1113 09:48:49.763934 82176 Decode.cpp:655 Exception in thread 0\n </denchmark-code>\n \n Note the second line from the bottom output prevStates.hidden size =[ 0 0 6 6 6 6 6 6]. First two prevStates's hidden vector is empty\n Decode is fine in old code\n <denchmark-h:h4>Reproduction Steps</denchmark-h>\n \n Run master code after this commit use decode_transformer_s2s_ngram.cfg\n <denchmark-h:h3>Platform and Hardware</denchmark-h>\n \n V100 16G * 8\n Ubuntu with Docker\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "zjuturtle", "commentT": "2020-11-14T04:30:55Z", "comment_text": "\n \t\tHey, thanks for reporting. I have several comments.\n Here \n \n \n flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp\n \n \n          Line 371\n       in\n       712c9a3\n \n \n \n \n \n \n  for (int i = start; i < end; i++) { \n \n \n \n \n  we full the buffer with necessary batch of previous states. Then we call decode \n \n \n flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp\n \n \n          Line 384\n       in\n       712c9a3\n \n \n \n \n \n \n  std::tie(amScores, outStates) = criterion->decodeBatchStep( \n \n \n \n \n  for the full batch and then we clean up the previous state for which we computed the outputStates \n \n \n flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp\n \n \n          Line 398\n       in\n       712c9a3\n \n \n \n \n \n \n  for (int i = start; i < end; i++) { \n \n \n \n \n . We don't use the previous state anywhere else. So it should not cause the problem of null pointers for the previous states. However with this fix now you can run with larger beams / larger input sequences.\n Could you run with commented part of code on cleaning the previous states? Do you have another behaviour?\n Also cc <denchmark-link:https://github.com/xuqiantong>@xuqiantong</denchmark-link>\n  if I missed something.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "zjuturtle", "commentT": "2020-11-16T07:54:26Z", "comment_text": "\n \t\tI dig a little deeper into code. Here's what I found:\n The root case is because prevStates.hidden does not has the same dims. Function input parameter rawPrevStates is vector<TS2SState*>. But these TS2SState* seems share the same  pointer. That means, rawPrevStates has a lot identical TS2SState* pointer.(Is this as design or a pointer bug?)\n Add a little code here to demonstrate\n \n \n \n flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp\n \n \n          Line 362\n       in\n       712c9a3\n \n \n \n \n \n \n  int start = 0, step = std::min(10, 1000 / (t + 1)); \n \n \n \n \n \n std::string rawPrevStatesPtr(const std::vector<AMStatePtr>& rawPrevStates){\n   std::stringstream ss;\n   ss << \"[\";\n   for(int i=0; i<rawPrevStates.size();i++) {\n     ss << \" \"<< static_cast<void*>(rawPrevStates[i].get());\n   }\n   ss<<\"]\";\n   return ss.str();\n }\n \n //---\n std::vector<AMStatePtr> out;\n std::vector<std::vector<float>> amScoresAll;\n \n int start = 0, step = std::min(10, 1000 / (t + 1));\n FL_LOG(fl::INFO) << \"rawPrevStatesPtr: \" <<rawPrevStatesPtr(rawPrevStates);\n while (start < B) {\n       buf->prevStates.resize(0);\n // ...\n The output pointer addresses before crash are\n <denchmark-code>rawPrevStatesPtr: [ 0x7fbb509011d0 0x7fbb509011d0 0x7fbb509011d0 0x7fbb509011d0 0x7fbb509011d0 0x7fbb509011d0 0x7fbb5097a860 0x7fbb509011d0 0x7fbb501a5220 0x7fbb509011d0 0x7fbb509011d0 0x7fbb509011d0 0x7fbb508e8040 0x7fbb509e68b0 0x7fbb5013adc0 0x7fbb5082f340 0x7fbb50a705b0 0x7fbb50a705b0]\n </denchmark-code>\n \n A lot rawPrevStates are the same.\n Now let's see what happened exactly. In my case, I got 2 loop here\n \n \n \n flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp\n \n \n          Line 363\n       in\n       712c9a3\n \n \n \n \n \n \n  while (start < B) { \n \n \n \n \n \n so in the first loop end, we clear hidden\n \n \n \n flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp\n \n \n          Line 401\n       in\n       712c9a3\n \n \n \n \n \n \n  prevState->hidden.clear(); \n \n \n \n \n \n will clear more than we expected.\n Add a little code to demonstrate here\n \n \n \n flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp\n \n \n          Line 398\n       in\n       712c9a3\n \n \n \n \n \n \n  for (int i = start; i < end; i++) { \n \n \n \n \n \n std::string rawPrevStatesHiddenSize(const std::vector<AMStatePtr>& rawPrevStates){\n   std::stringstream ss;\n   ss << \"[\";\n       for(int i=0; i<rawPrevStates.size();i++) {\n         auto ptr = static_cast<TS2SState*>(rawPrevStates[i].get());\n         if (ptr) {\n           ss<< \" \" << ptr->hidden.size();\n         }else{\n           ss<<\" nullPtr \";\n         }\n       }\n       ss<<\"]\";\n     return ss.str();\n }\n //-------\n for (int i = start; i < end; i++) {\n         TS2SState* prevState = static_cast<TS2SState*>(rawPrevStates[i].get());\n         if (prevState) {\n           FL_LOG(fl::INFO) <<\"Before clear \"<<i<< \" \"<< rawPrevStatesHiddenSize(rawPrevStates);\n           prevState->hidden.clear();\n           FL_LOG(fl::INFO) <<\"After clear \"<<i<<\" \"<< rawPrevStatesHiddenSize(rawPrevStates);\n         }\n       }\n We will get\n <denchmark-code>TransformerCriterion.cpp:439 Before clear 0 [ 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6]\n TransformerCriterion.cpp:444 After clear 0 [ 0 0 0 0 0 0 6 0 6 0 0 0 6 6 6 6 6 6]\n </denchmark-code>\n \n So in second loop run, we will get prevStates.hidden size =[ 0 0 6 6 6 6 6 6]\n I read more code today. A little comment:\n These same pointer came from in this function\n \n \n \n flashlight/flashlight/lib/text/decoder/LexiconFreeSeq2SeqDecoder.cpp\n \n \n          Line 20\n       in\n       712c9a3\n \n \n \n \n \n \n  void LexiconFreeSeq2SeqDecoder::decodeStep( \n \n \n \n \n \n This function will call a couple of candidatesAdd.  candidatesAdd  will create LexiconFreeSeq2SeqDecoderState and add it to candidates_. But it use same pointer to assign amState. So in the end, we call\n \n \n \n flashlight/flashlight/lib/text/decoder/LexiconFreeSeq2SeqDecoder.cpp\n \n \n          Line 138\n       in\n       712c9a3\n \n \n \n \n \n \n  candidatesStore( \n \n \n \n \n \n In hyp_[t+1] some LexiconFreeSeq2SeqDecoderState will share same amState pointer.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "zjuturtle", "commentT": "2020-11-17T07:11:09Z", "comment_text": "\n \t\tI suggest a fix for this\n \n \n \n flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp\n \n \n          Line 398\n       in\n       712c9a3\n \n \n \n \n \n \n  for (int i = start; i < end; i++) { \n \n \n \n \n \n       std::unordered_set<TS2SState*> validPrevStateSet;\n       for (int i = end;i < rawPrevStates.size();i++){\n         validPrevStateSet.insert(static_cast<TS2SState*>(rawPrevStates[i].get()));\n       }\n \n       for (int i = start; i < end; i++) {\n         TS2SState* prevState = static_cast<TS2SState*>(rawPrevStates[i].get());\n         if (prevState && validPrevStateSet.cend() == validPrevStateSet.find(prevState)) {\n           prevState->hidden.clear();\n         }\n       }\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "zjuturtle", "commentT": "2020-11-17T08:47:07Z", "comment_text": "\n \t\tThanks for your detailed investigation, we will have a look and will try to repro and then come back to you =).\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "zjuturtle", "commentT": "2020-11-17T09:12:04Z", "comment_text": "\n \t\tBy the way, I think there's a bug here\n \n \n \n flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp\n \n \n          Line 362\n       in\n       75c241b\n \n \n \n \n \n \n  int start = 0, step = std::min(10, 1000 / (t + 1)); \n \n \n \n \n \n t will increase during decoding, so if t get larger than 999,  step will be 0, then the while loop will become infinite loop.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "zjuturtle", "commentT": "2020-11-17T18:22:43Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/zjuturtle>@zjuturtle</denchmark-link>\n , thanks for spotting the bugs!\n \n \n For the state.hidden bug, I think we can simply move https://github.com/facebookresearch/flashlight/blob/master/flashlight/app/asr/criterion/TransformerCriterion.cpp#L398-L403 out of this loop https://github.com/facebookresearch/flashlight/blob/master/flashlight/app/asr/criterion/TransformerCriterion.cpp#L363 and place it at the end.\n \n \n For the step=0 bug, we should add something like step = max(step, 1).\n \n \n Please let me know your thoughts!\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "zjuturtle", "commentT": "2020-11-18T02:10:55Z", "comment_text": "\n \t\tFor state.hidden bug, if we just move clear code out of the loop, I think we will lose the opportunity clear hidden in advance in the loop. Add some valid check code, it will not cost much extra time.\n Add following code before loop\n \n \n \n flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp\n \n \n          Line 363\n       in\n       9448004\n \n \n \n \n \n \n  while (start < B) { \n \n \n \n \n \n     // A simple bimap to record valid clear hidden\n     std::map<TS2SState*, int> validClearPtr2Index;\n     std::map<int, TS2SState*> validClearIndex2Ptr;\n     for (int index=0;index<rawPrevStates.size();index++){\n       TS2SState* ptr = static_cast<TS2SState*>(rawPrevStates[index].get());\n       auto iter = validClearPtr2Index.find(ptr);\n \n       // Pointer exists in earlier rawPrevStates\n       if (iter != validClearPtr2Index.end()){\n         validClearIndex2Ptr.erase(iter->second);\n         validClearPtr2Index.erase(iter);\n       }\n       validClearPtr2Index[ptr] = index;\n       validClearIndex2Ptr[index] = ptr;\n     }\n     validClearPtr2Index.clear();\n Then in the original clear code,\n \n \n \n flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp\n \n \n         Lines 398 to 403\n       in\n       9448004\n \n \n \n \n \n \n  for (int i = start; i < end; i++) { \n \n \n \n    TS2SState* prevState = static_cast<TS2SState*>(rawPrevStates[i].get()); \n \n \n \n  if (prevState) { \n \n \n \n      prevState->hidden.clear(); \n \n \n \n    } \n \n \n \n  } \n \n \n \n \n \n modify to\n       // clean the previous state which is not needed anymore\n       // to prevent from OOM\n       for (int i = start; i < end; i++) {\n         auto iter = validClearIndex2Ptr.find(i);\n         if (iter != validClearIndex2Ptr.end()) {\n           TS2SState* prevState = static_cast<TS2SState*>(rawPrevStates[i].get());\n           if (prevState) {\n             prevState->hidden.clear();\n           }\n         }\n       }\n This fix is better than my last suggestion for speed\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "zjuturtle", "commentT": "2020-11-18T10:50:04Z", "comment_text": "\n \t\tLet us discuss your solutions and then I will send the fix (or you could do PR) =) Thanks again for reporting/debugging/sharing ideas of fix for the issue!\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "zjuturtle", "commentT": "2020-11-19T01:58:39Z", "comment_text": "\n \t\tUnfortunately my computer is not allowed upload to GitHub. So PR is currently unavailable for me.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "zjuturtle", "commentT": "2020-11-23T06:33:13Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/zjuturtle>@zjuturtle</denchmark-link>\n \n Thanks again for reporting/debugging/solving the issue. Here the fix <denchmark-link:https://github.com/facebookresearch/flashlight/pull/280>#280</denchmark-link>\n , could you try it and tell if it works now for you?\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "zjuturtle", "commentT": "2020-11-23T18:02:53Z", "comment_text": "\n \t\tThe PR is merged, closing the issue for now.\n Feel free to reopen if there is still any problem, and please report if everything works for you now <denchmark-link:https://github.com/zjuturtle>@zjuturtle</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "31ef2e14d9351186539c699a7e6f7ac2100312b5", "commit_author": "Tatiana Likhomanenko", "commitT": "2020-11-23 09:55:03-08:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "0.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "flashlight\\app\\asr\\criterion\\TransformerCriterion.cpp", "file_new_name": "flashlight\\app\\asr\\criterion\\TransformerCriterion.cpp", "file_complexity": {"file_NLOC": "356", "file_CCN": "64", "file_NToken": "2903"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "362,363,364,365,366,367,368,407,408,409", "deleted_lines": "400", "method_info": {"method_name": "fl::app::asr::buildTransformerAmUpdateFunction", "method_params": "c", "method_startline": "340", "method_endline": "419", "method_complexity": {"method_NLOC": "71", "method_CCN": "13", "method_NToken": "559", "method_nesting_level": "3"}}}}}}}}