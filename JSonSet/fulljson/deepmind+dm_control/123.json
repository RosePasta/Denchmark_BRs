{"BR": {"BR_id": "123", "BR_author": "ajabri", "BRopenT": "2019-12-29T22:40:37Z", "BRcloseT": "2020-01-07T00:42:21Z", "BR_text": {"BRsummary": "EGL initialization error", "BRdescription": "\n Hi,\n I've recently come across the following error, on a machine with Nvidia driver version: 440.33.01    CUDA version: 10.2, when trying to use EGL for headless rendering. The same exact code was running properly on a machine with CUDA Version 10.1 and driver version 390.\n Any idea how to fix the issue? I've tried reinstalling dm_control with pip.\n <denchmark-code>  File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/suite/__init__.py\", line 28, in <module>\n     from dm_control.suite import acrobot\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/suite/acrobot.py\", line 24, in <module>\n     from dm_control import mujoco\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/mujoco/__init__.py\", line 18, in <module>\n     from dm_control.mujoco.engine import action_spec\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/mujoco/engine.py\", line 44, in <module>\n     from dm_control import _render\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/__init__.py\", line 75, in <module>\n     Renderer = import_func()\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/__init__.py\", line 36, in _import_egl\n     from dm_control._render.pyopengl.egl_renderer import EGLContext\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/pyopengl/egl_renderer.py\", line 66, in <module>\n     EGL_DISPLAY = create_initialized_headless_egl_display()\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/pyopengl/egl_renderer.py\", line 49, in create_initialized_headless_egl_display\n     for device in EGL.eglQueryDevicesEXT():\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/pyopengl/egl_ext.py\", line 65, in eglQueryDevicesEXT\n     success = _eglQueryDevicesEXT(max_devices, devices, num_devices)\n ctypes.ArgumentError: argument 2: <class 'TypeError'>: expected LP_c_void_p instance instead of EGLDeviceEXT_pointer_Array_10\n </denchmark-code>\n \n Thanks,\n A\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ajabri", "commentT": "2020-01-02T21:49:15Z", "comment_text": "\n \t\tTry to do\n $ export DISPLAY=:0\n in your terminal and try again, it works for me.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ajabri", "commentT": "2020-01-03T04:19:44Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/xinleipan>@xinleipan</denchmark-link>\n  In this case, I'm trying to use EGL for  rendering. Setting \"DISPLAY=:0\" results in the below error. Are you rendering with glfw or osmesa?\n <denchmark-code>Traceback (most recent call last):\n   File \"main_maw.py\", line 6, in <module>\n     import dmc_wrapper as dmc2gym\n   File \"/home/aj/rlpyt/selfish/dmc_wrapper.py\", line 2, in <module>\n     from dm_control import suite\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/suite/__init__.py\", line 28, in <module>\n     from dm_control.suite import acrobot\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/suite/acrobot.py\", line 24, in <module>\n     from dm_control import mujoco\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/mujoco/__init__.py\", line 18, in <module>\n     from dm_control.mujoco.engine import action_spec\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/mujoco/engine.py\", line 44, in <module>\n     from dm_control import _render\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/__init__.py\", line 67, in <module>\n     Renderer = import_func()  # pylint: disable=invalid-name\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/__init__.py\", line 36, in _import_egl\n     from dm_control._render.pyopengl.egl_renderer import EGLContext\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/pyopengl/egl_renderer.py\", line 68, in <module>\n     raise ImportError('Cannot initialize a headless EGL display.')\n ImportError: Cannot initialize a headless EGL display.\n </denchmark-code>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "ajabri", "commentT": "2020-01-04T00:17:08Z", "comment_text": "\n \t\tI'm not sure, sorry. Maybe it's GLFW, I just installed MuJoCo normally with a Ubuntu 16.04 machine, CUDA 8.0 and NVIDIA GPU.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "ajabri", "commentT": "2020-01-04T03:55:54Z", "comment_text": "\n \t\tsame issue here on a ubuntu box.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "ajabri", "commentT": "2020-01-04T04:02:28Z", "comment_text": "\n \t\tProblem solved, use this: <denchmark-link:https://github.com/ajabri>@ajabri</denchmark-link>\n \n <denchmark-code>export MUJOCO_GL=\"glfw\"\n </denchmark-code>\n \n In order to avoid the EGL, one way I have seen working is to use the GLFW backend. To do so, you need to set the environment flag to glfw. Then you need a display port that is actually available.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "ajabri", "commentT": "2020-01-04T04:04:41Z", "comment_text": "\n \t\tI need headless rendering, so I need to use EGL as my rendering backend.\n The same code worked on another machine, the only difference being (I\n believe) that the machine on which I obtain the above error has a much more\n recent nvidia driver (440 vs 390).\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "ajabri", "commentT": "2020-01-04T05:03:05Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ajabri>@ajabri</denchmark-link>\n  if X display is not available, you can use \"osmesa\" backend.\n (for the interest of others: won't work even if you install Xvfb and GLFW because they require X-display)\n <denchmark-code>export MUJOCO_GL=\"osmesa\"\n </denchmark-code>\n \n Here is the full setup for a headless linux box with no built-in X display:\n       export MUJOCO_GL=osmesa\n       export MJLIB_PATH=$HOME/.mujoco/mujoco200/bin/libmujoco200.so\n       export MJKEY_PATH=$HOME/.mujoco/mujoco200/mjkey.txt\n       export LD_LIBRARY_PATH=$HOME/.mujoco/mujoco200/bin:$LD_LIBRARY_PATH\n       export MUJOCO_PY_MJPRO_PATH=$HOME/.mujoco/mujoco200/\n       export MUJOCO_PY_MJKEY_PATH=$HOME/.mujoco/mujoco200/mjkey.txt\n <denchmark-link:https://github.com/saran-t>@saran-t</denchmark-link>\n  maybe we can add this to the documentation? :)\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "ajabri", "commentT": "2020-01-04T05:12:16Z", "comment_text": "\n \t\tHmmm, EGL should allow for hardware accelerated headless rendering without\n X display. Has worked properly for me in the past. Will look into other differences of current setup.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "ajabri", "commentT": "2020-01-04T05:16:12Z", "comment_text": "\n \t\tMaybe we can ping <denchmark-link:https://github.com/saran-t>@saran-t</denchmark-link>\n  about that\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "ajabri", "commentT": "2020-01-05T07:42:29Z", "comment_text": "\n \t\t\n @ajabri if X display is not available, you can use \"osmesa\" backend.\n (for the interest of others: won't work even if you install Xvfb and GLFW because they require X-display)\n export MUJOCO_GL=\"osmesa\"\n \n Here is the full setup for a headless linux box with no built-in X display:\n       export MUJOCO_GL=osmesa\n       export MJLIB_PATH=$HOME/.mujoco/mujoco200/bin/libmujoco200.so\n       export MJKEY_PATH=$HOME/.mujoco/mujoco200/mjkey.txt\n       export LD_LIBRARY_PATH=$HOME/.mujoco/mujoco200/bin:$LD_LIBRARY_PATH\n       export MUJOCO_PY_MJPRO_PATH=$HOME/.mujoco/mujoco200/\n       export MUJOCO_PY_MJKEY_PATH=$HOME/.mujoco/mujoco200/mjkey.txt\n @saran-t maybe we can add this to the documentation? :)\n \n This way exactly solve me from those terrible mistakes\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "ajabri", "commentT": "2020-01-05T12:45:38Z", "comment_text": "\n \t\tI can't see how a CUDA upgrade could have changed anything given that we are specifying the argument types ourselves, but one thing that you could try is to change this line\n <denchmark-link:https://github.com/deepmind/dm_control/blob/master/dm_control/_render/pyopengl/egl_ext.py#L65>https://github.com/deepmind/dm_control/blob/master/dm_control/_render/pyopengl/egl_ext.py#L65</denchmark-link>\n \n to\n success = _eglQueryDevicesEXT(max_devices, ctypes.POINTER(ctypes.c_void_p)(ctypes.addressof(devices)), num_devices)\n Let me know if this works.\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "ajabri", "commentT": "2020-01-06T18:17:35Z", "comment_text": "\n \t\tThe above change gives me the following error:\n <denchmark-code>Traceback (most recent call last):\n   File \"main_maw.py\", line 6, in <module>\n     import dmc_wrapper as dmc2gym\n   File \"/home/aj/rlpyt/selfish/dmc_wrapper.py\", line 2, in <module>\n     from dm_control import suite\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/suite/__init__.py\", line 28, in <module>\n     from dm_control.suite import acrobot\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/suite/acrobot.py\", line 24, in <module>\n     from dm_control import mujoco\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/mujoco/__init__.py\", line 18, in <module>\n     from dm_control.mujoco.engine import action_spec\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/mujoco/engine.py\", line 44, in <module>\n     from dm_control import _render\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/__init__.py\", line 67, in <module>\n     Renderer = import_func()  # pylint: disable=invalid-name\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/__init__.py\", line 36, in _import_egl\n     from dm_control._render.pyopengl.egl_renderer import EGLContext\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/pyopengl/egl_renderer.py\", line 66, in <module>\n     EGL_DISPLAY = create_initialized_headless_egl_display()\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/pyopengl/egl_renderer.py\", line 49, in create_initialized_headless_egl_display\n     for device in EGL.eglQueryDevicesEXT():\n   File \"/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/pyopengl/egl_ext.py\", line 66, in eglQueryDevicesEXT\n     success = _eglQueryDevicesEXT(max_devices, ctypes.POINTER(ctypes.c_void_p)(ctypes.addressof(devices)), num_devices)\n TypeError: expected c_void_p instead of int\n </denchmark-code>\n \n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "ajabri", "commentT": "2020-01-06T23:43:46Z", "comment_text": "\n \t\tI think this was due to an upstream change in PyOpenGL. In versions newer than 3.1.4,  has its own  member (<denchmark-link:https://github.com/mcfletch/pyopengl/commit/38f4cc533b2ed3e85c585c4a4f00ed06f7aa6056>mcfletch/pyopengl@38f4cc5</denchmark-link>\n ), which overrides our assignment of  when we do the wildcard import on the last line. Consequently we end up with mismatching pointer types in  and in the body of . I'll put together a fix.\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "ajabri", "commentT": "2020-01-08T20:00:23Z", "comment_text": "\n \t\tThank you <denchmark-link:https://github.com/alimuldal>@alimuldal</denchmark-link>\n !\n \t\t"}}}, "commit": {"commit_id": "0b7369e57523a74b1288b98458a4a30b5faa1c24", "commit_author": "Alistair Muldal", "commitT": "2020-01-06 16:25:45-08:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "dm_control\\_render\\pyopengl\\egl_ext.py", "file_new_name": "dm_control\\_render\\pyopengl\\egl_ext.py", "file_complexity": {"file_NLOC": "43", "file_CCN": "3", "file_NToken": "250"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "65", "deleted_lines": null, "method_info": {"method_name": "eglQueryDevicesEXT", "method_params": "max_devices", "method_startline": "64", "method_endline": "73", "method_complexity": {"method_NLOC": "10", "method_CCN": "3", "method_NToken": "81", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "requirements.txt", "file_new_name": "requirements.txt", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "15", "deleted_lines": "15"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "setup.py", "file_new_name": "setup.py", "file_complexity": {"file_NLOC": "157", "file_CCN": "19", "file_NToken": "774"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "169,184", "deleted_lines": "169,184"}}}}}}