{"BR": {"BR_id": "173", "BR_author": "mihahauke", "BRopenT": "2017-02-25T19:23:51Z", "BRcloseT": "2017-02-26T20:29:37Z", "BR_text": {"BRsummary": "get_state in python wrapper seems to leak memory", "BRdescription": "\n \n No description provided.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "mihahauke", "commentT": "2017-02-25T20:10:46Z", "comment_text": "\n \t\tNot only it leaks memory, it seems closing and re-initing DoomGame instance does not release this memory , nor does creating a completely new DoomGame instance in same process.\n My current work-around is to completely kill Process objects holding the DoomGame objects and create new Processes when using multiprocessing to run multiple DoomGame instances in parallel.\n \t\t"}}}, "commit": {"commit_id": "f473833e7ee956d62c9b67aab28957ae7706ce99", "commit_author": "micha\u0142", "commitT": "2017-02-26 21:18:25+01:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "0.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\lib_python\\ViZDoomGamePython.cpp", "file_new_name": "src\\lib_python\\ViZDoomGamePython.cpp", "file_complexity": {"file_NLOC": "161", "file_CCN": "38", "file_NToken": "1476"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "228,231,232,233,235,236,240", "deleted_lines": "228,231,232,233,238", "method_info": {"method_name": "vizdoom::DoomGamePython::dataToNumpyArray", "method_params": "dims,shape,type,data", "method_startline": "228", "method_endline": "241", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "86", "method_nesting_level": "1"}}}}}}}}