{"BR": {"BR_id": "105", "BR_author": "shehroze37-zz", "BRopenT": "2016-07-30T14:10:17Z", "BRcloseT": "2016-12-06T09:52:35Z", "BR_text": {"BRsummary": "Depth buffer for 'on my way home' scenario not working", "BRdescription": "\n Hi the depth buffer for on my way home scenario is not working. And what metric does the depth buffer values represent. I am using that for research and its very important I get the scale of that correct so wasn't sure how to convert those depth values into a suitable metric i.e (meters, cm, mm etc). I would appreciate any help on this. Even if it doesnt represent any metric, are the depth buffer values consistent throughout different scenarios?\n When I was testing the on my way home scenario, the max value in the depth buffer was 4 and the minimum was 4 as well so not sure whats going wrong there.\n Cheers !\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "shehroze37-zz", "commentT": "2016-07-30T18:13:20Z", "comment_text": "\n \t\tIt's strange but it actually doesn't work for this one scenario. I'll examine this.\n And as for the question about metric:\n It is not intended to represent any and the values are the same for the same distances regardless of the scenario and main wad.\n So using this <denchmark-link:http://doomwiki.org/wiki/Map_unit>http://doomwiki.org/wiki/Map_unit</denchmark-link>\n  and a map with known dimensions you can calculate how to translate buffer's values to real world units.\n Let us know if you do it, I'm curious about results :)\n EDIT:\n Additional explanation:\n Depth is calculated based on the texture's scale value which is represented in a rather unusual way (at least for me) in ZDoom/Doom engine and I have no idea how to translate that value to more meaningful unit.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "shehroze37-zz", "commentT": "2016-08-12T14:52:34Z", "comment_text": "\n \t\tI found it is possible to get the correct depth buffer in my_way_home.\n Its just not very likely and doesn't work if you render the window.\n In general this looks a lot like <denchmark-link:https://github.com/Marqt/ViZDoom/issues/72>issue 72</denchmark-link>\n .\n A little experiment (see code below):\n Ubuntu 14.04, approx. 4 weeks old vizdoom version\n \n \n Turning off all rendering options (incl window):\n Found 6.5 % correct depth buffers (65/1000) in 233.9 s.\n \n \n Turning on all rendering options (except window):\n Found 13.4 % correct depth buffers (134/1000) in 228.6 s.\n \n \n Turning on all rendering options (incl window):\n Found 0.0 % correct depth buffers (0/500) in 333.1 s.\n \n \n import numpy as np\n from vizdoom import DoomGame, ScreenFormat\n \n import time\n \n \n def create_game(config_path = 'config/my_way_home.cfg'):\n     '''\n         Create and initialize a new game\n         Set screenformat manually\n         Start a new episode\n     '''\n     game = DoomGame()\n     game.load_config(config_path)\n     game.set_screen_format(ScreenFormat.CRCGCBDB) # Set screenformat manually\n     game.init()\n     game.new_episode()\n     return game\n \n \n def functional_depth_buffer():\n     game = create_game()\n     img_buffer = game.get_state().image_buffer\n     depth = img_buffer[-1,:,:]\n \n     # Test if correct depth buffer this can be incorrect because\n     # standing straight in front of a wall might result in a uniform depth buffer.\n     if np.std(depth) > 0.0001:\n         functional = True\n     else:\n         functional = False\n \n     game.close()\n \n     return functional\n \n \n def test_functional_depth_buffer(n = 100):\n     n_funct = 0.\n     for i in xrange(n):\n         if functional_depth_buffer():\n             n_funct += 1\n     return round(n_funct/n,3)\n \n \n if __name__ == '__main__':\n     n = 500\n     before = time.time()\n     r_funct = test_functional_depth_buffer(n)\n     duration = round(time.time() - before,1)\n     print 'Found {} % correct depth buffers ({}/{}) in {} s.'.format(r_funct*100., int(n*r_funct), n, duration)\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "shehroze37-zz", "commentT": "2016-12-06T09:52:34Z", "comment_text": "\n \t\tI cannot reproduce this bug anymore (tested on Linux and Windows) - closing.\n \t\t"}}}, "commit": {"commit_id": "7db09bb3a8031f5d5764e5428896efb5ed26a0be", "commit_author": "Marqt", "commitT": "2016-11-10 23:46:50+01:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "0.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\vizdoom\\src\\d_main.cpp", "file_new_name": "src\\vizdoom\\src\\d_main.cpp", "file_complexity": {"file_NLOC": "2208", "file_CCN": "437", "file_NToken": "11672"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "823,824,825,826,827,848,849,850", "deleted_lines": null, "method_info": {"method_name": "D_Display", "method_params": "", "method_startline": "666", "method_endline": "967", "method_complexity": {"method_NLOC": "246", "method_CCN": "60", "method_NToken": "1261", "method_nesting_level": "0"}}}}}}}}