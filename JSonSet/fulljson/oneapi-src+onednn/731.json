{"BR": {"BR_id": "731", "BR_author": "pinzhenx", "BRopenT": "2020-05-19T03:36:40Z", "BRcloseT": "2020-05-21T22:46:47Z", "BR_text": {"BRsummary": "feature request: support strided (non-contiguous) memories", "BRdescription": "\n Pytorch uses the same language as DNNL, a dim-stride pair, to describe a plain-format memory. So ideally it's possible to convert all Pytorch tensors to DNNL tensors at zero cost.\n Moreover, Pytorch ops support non-contiguous tensors that's been sliced from another, and these sliced tensors may not be contiguous at any dimension, i.e. none of the strides is 1. I'll use \"non-contiguous\" and \"strided\" interchangeably below. Under the current DNNL programming model, users are supposed to reorder a strided tensor into a dense one and then pass it to DNNL primitive.\n We are now exploring if we can directly pass strided tensors to DNNL and expect it can at least fallback to a ref path. Unfortunately, it failed on a binary primitive with this snippet.\n #include <stdio.h>\n #include \"dnnl.hpp\"\n \n using namespace dnnl;\n using tag = memory::format_tag;\n using dt = memory::data_type;\n \n void dump(const memory& m) {\n   printf(\"[%g\", ((float*)m.get_data_handle())[0]);\n   for (size_t i = 1; i < m.get_desc().get_size() / sizeof(float); i++)\n     printf(\", %g\", ((float*)m.get_data_handle())[i]);\n   printf(\"]\\n\");\n }\n \n engine eng(engine::kind::cpu, 0);\n stream strm(eng);\n \n void test_binary() {\n   float src0_buf[12] = {100, 200, 300, 400, 500, 600, 700, 800, 900, 100, 1100, 1200};\n   float src1_buf[32] = {1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16,\n                         17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};\n   float dst_buf[12] = {0};\n \n   memory src0({{2, 4}, dt::f32, {4, 1}}, eng, src0_buf);\n   memory src1({{2, 4}, dt::f32, {16, 4}}, eng, src1_buf);\n   memory dst({{2, 4}, dt::f32, {4, 1}}, eng, dst_buf);\n \n   // if we put strided tensor at the first input and set dst format as `any`, \n   // it will corrupt its memory\n   auto pd = binary::primitive_desc({algorithm::binary_add, src0.get_desc(), src1.get_desc(), dst.get_desc()}, eng);\n   binary(pd).execute(strm, {{DNNL_ARG_SRC_0, src0}, {DNNL_ARG_SRC_1, src1}, {DNNL_ARG_DST, dst}});\n \n   dump(src0);\n   dump(src1);\n   dump(dst); // [101, 205, 309, 413, 517, 621, 725, 829]\n }\n \n int main() {\n   test_binary();\n   return 0;\n }\n <denchmark-code>dnnl_verbose,info,oneDNN v1.4.0 (commit 9034f147d87b96000ef8b13a4f37c8b9f8c3e025)\n dnnl_verbose,info,cpu,runtime:OpenMP\n dnnl_verbose,info,cpu,isa:Intel AVX-512 with AVX512BW, AVX512VL, and AVX512DQ extensions\n dnnl_verbose,info,gpu,runtime:none\n dnnl_verbose,exec,cpu,binary,jit:uni,undef,src_f32::blocked:ab:f0 src_f32::blocked:ab:f0 dst_f32::blocked:ab:f0,,alg:binary_add,2x4:2x4 2x4,34.281\n [100, 200, 300, 400, 500, 600, 700, 800]\n [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\n [101, 202, 303, 404, 505, 606, 707, 808]\n </denchmark-code>\n \n According to the discussion in <denchmark-link:https://github.com/oneapi-src/oneDNN/issues/69#issuecomment-630500241>#69 (comment)</denchmark-link>\n , only reorder, sum, concat could correctly handle these strided tensors, and from <denchmark-link:https://github.com/oneapi-src/oneDNN/issues/593#issuecomment-553806623>#593 (comment)</denchmark-link>\n  we knew that not many primitives even support permuted formats. So we want all primitives to have a defined behavior on custom formats, either throw an error or fallback to ref path. Especially for these two classes regardless of DNNL-specific blocked format:\n \n \n non-contiguous & dense\n #elems == the size described by dims&strides.\n e.g. memory described by permuted format tags, like ba, nhwc, iohw.\n \n \n non-contiguous & not dense\n #elems < the size described by dims&strides.\n e.g. submemory sliced from other memory\n \n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "pinzhenx", "commentT": "2020-05-19T04:56:40Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/pinzhenx>@pinzhenx</denchmark-link>\n ,\n Thanks for the opened issue!\n The current described behavior is definitely a bug.\n \n So we want all primitives to have a defined behavior on custom formats, either throw an error or fallback to ref path.\n \n In my opinion, the library indeed should at least fallback to the reference implementation.\n But I want to confirm with you that you are indeed fine with the fallback to the reference generic implementations, that are known to be extremely slow. Are you oK with this? Do you want to know that the implementation is \"slow\" in advance? Which is in most of the cases could be done by checking if pd::impl_info_str() has \"ref\" sub-string.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "pinzhenx", "commentT": "2020-05-19T05:14:05Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/pinzhenx>@pinzhenx</denchmark-link>\n , could you try this patch, please?\n <denchmark-code>diff --git a/src/cpu/x64/jit_uni_binary.hpp b/src/cpu/x64/jit_uni_binary.hpp\n index af1199b3a..f8787f803 100644\n --- a/src/cpu/x64/jit_uni_binary.hpp\n +++ b/src/cpu/x64/jit_uni_binary.hpp\n @@ -78,6 +78,9 @@ struct jit_uni_binary_t : public primitive_t {\n                  ok = ok && bcast_dims[d] == 1;\n              if (!ok) return false;\n \n +            ok = ok && src0_d.is_dense(true) && src1_d.is_dense(true);\n +            if (!ok) return false;\n +\n              if (src0_d.is_plain() && src1_d.is_plain()) {\n                  const auto &bd0 = src0_d.blocking_desc();\n                  const auto &bd1 = src1_d.blocking_desc();\n </denchmark-code>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "pinzhenx", "commentT": "2020-05-19T05:56:33Z", "comment_text": "\n \t\tThis patch does work well.\n Another issue, if the src0 is a strided tensor, and dst is of format any, the queried dst is indeed a dense tensor, but the result was still incorrect.\n void test_binary_dst_any() {\n   float src0_buf[12] = {100, 200, 300, 400, 500, 600, 700, 800, 900, 100, 1100, 1200};\n   float src1_buf[32] = {1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16,\n                         17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};\n   float dst_buf[12] = {0};\n \n   memory src0({{2, 4}, dt::f32, {4, 1}}, eng, src0_buf);\n   memory src1({{2, 4}, dt::f32, {16, 4}}, eng, src1_buf);\n   std::swap(src0, src1);    // <--- now src0 is non-contiguous, src1 is dense\n \n   memory::desc dst_desc{{2, 4}, dt::f32, tag::any};\n \n   auto pd = binary::primitive_desc({algorithm::binary_add, src0.get_desc(), src1.get_desc(), dst_desc}, eng);\n   memory dst(pd.dst_desc(), eng, dst_buf);\n   binary(pd).execute(strm, {{DNNL_ARG_SRC_0, src0}, {DNNL_ARG_SRC_1, src1}, {DNNL_ARG_DST, dst}});\n \n   dump(src0);\n   dump(src1);\n   dump(dst); // 101, 205, 309, 413, 517, 621, 725, 829\n }\n \n \n dnnl_verbose,info,oneDNN v1.4.0 (commit d310bfe968d4b5165511a68201a71fd995c0d321)\n dnnl_verbose,info,cpu,runtime:OpenMP\n dnnl_verbose,info,cpu,isa:Intel AVX-512 with AVX512BW, AVX512VL, and AVX512DQ extensions\n dnnl_verbose,info,gpu,runtime:none\n dnnl_verbose,exec,cpu,binary,ref:any,undef,src_f32::blocked:ab:f0 src_f32::blocked:ab:f0 dst_f32::blocked:ab:f0,,alg:binary_add,2x4:2x4 2x4,6.54688\n [1125, 2, 3, 4, 517, 6, 7, 8, 621, 10, 11, 12, 725, 14, 15, 16, 829, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\n [100, 200, 300, 400, 500, 600, 700, 800]\n [101, 0, 0, 0, 205, 0, 0, 0]\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "pinzhenx", "commentT": "2020-05-19T07:22:50Z", "comment_text": "\n \t\t\n But I want to confirm with you that you are indeed fine with the fallback to the reference generic implementations, that are known to be extremely slow.\n \n Well, that won't do any good for us. I believe we should continue to use the old way of converting it back to dense first.\n Thanks for your explanation.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "pinzhenx", "commentT": "2020-05-19T19:21:55Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/pinzhenx>@pinzhenx</denchmark-link>\n , could you, please, try yet another fix up patch?\n <denchmark-code>diff --git a/src/cpu/ref_binary.cpp b/src/cpu/ref_binary.cpp\n index 02337be5a..ae5dcefb0 100644\n --- a/src/cpu/ref_binary.cpp\n +++ b/src/cpu/ref_binary.cpp\n @@ -96,6 +96,7 @@ void ref_binary_t<src0_type, src1_type, dst_type>::execute_ref(\n \n      const memory_desc_wrapper src0_d(pd()->src_md(0));\n      const memory_desc_wrapper src1_d(pd()->src_md(1));\n +    const memory_desc_wrapper dst_d(pd()->dst_md());\n \n      const auto alg = pd()->desc()->alg_kind;\n \n @@ -145,7 +146,8 @@ void ref_binary_t<src0_type, src1_type, dst_type>::execute_ref(\n      parallel_nd(nelems_A, [&](dim_t i) {\n          auto off_A = src0_d.off_l(i);\n          auto off_B = is_tensor_op ? src1_d.off_l(i) : map_idx_B(i);\n -        perform_op(&dst[off_A], src0[off_A], src1[off_B], params);\n +        auto off_C = dst_d.off_l(i);\n +        perform_op(&dst[off_C], src0[off_A], src1[off_B], params);\n      });\n  }\n </denchmark-code>\n \n We've added an item to revisit our testing to better cover strided memory descriptors.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "pinzhenx", "commentT": "2020-07-01T16:00:36Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/dzarukin>@dzarukin</denchmark-link>\n  same issue in sum\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "pinzhenx", "commentT": "2020-07-01T18:30:52Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/pinzhenx>@pinzhenx</denchmark-link>\n ,\n Since it's somewhat same but a bit different issue, may I ask you to create another tracker for sum?\n And I would really much appreciate a reproducer due to reference sum is reorder based and the issue may hide under the different stone.\n Thanks.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "pinzhenx", "commentT": "2020-07-02T01:55:40Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/dzarukin>@dzarukin</denchmark-link>\n  , thanks for you explanation. Now it seems not to be an issue to me but a kind of UB.\n Given two strided src tensors and without a dst desc, it's reasonable for dnnl to choose a strided format for dst, however it's not the behavior of binary. As long as we fixed the dst to dense, sum works well, but that requires us to check density outside. Do you think users should do like that?\n <denchmark-code>#include <stdio.h>\n #include \"dnnl.hpp\"\n \n using namespace dnnl;\n using tag = memory::format_tag;\n using dt = memory::data_type;\n \n engine eng(engine::kind::cpu, 0);\n \n void dump_desc(const memory::desc& mdesc) {\n   auto md = mdesc.data;\n   printf(\"\\t\\t\");\n   for (int i = 0; i < md.ndims; i++)\n     printf(\"%c\\t\", 'A' + i);\n   printf(\"\\ndims\\t\\t\");\n   for (int i = 0; i < md.ndims; i++)\n     printf(\"%ld\\t\", md.dims[i]);\n   printf(\"\\npadded_dims\\t\");\n   for (int i = 0; i < md.ndims; i++)\n     printf(\"%ld\\t\", md.padded_dims[i]);\n   printf(\"\\nstrides\\t\\t\");\n   for (int i = 0; i < md.ndims; i++)\n     printf(\"%ld\\t\", md.format_desc.blocking.strides[i]);\n   printf(\"\\n\\ninner_idxs\\t\");\n   for (int i = 0; i < md.format_desc.blocking.inner_nblks; i++)\n     printf(\"%ld\\t\", md.format_desc.blocking.inner_idxs[i]);\n   printf(\"\\ninner_blks\\t\");\n   for (int i = 0; i < md.format_desc.blocking.inner_nblks; i++)\n     printf(\"%ld\\t\", md.format_desc.blocking.inner_blks[i]);\n   printf(\"\\n\");\n }\n \n int main() {\n   auto pd = sum::primitive_desc({1.0, 1.0}, {\n     {{4, 4}, dt::f32, {100, 10}},  // src0 desc\n     {{4, 4}, dt::f32, {100, 10}},  // src1 desc\n   }, eng);\n   dump_desc(pd.dst_desc());\n   return 0;\n }\n </denchmark-code>\n \n <denchmark-code>                A       B\n dims            4       4\n padded_dims     4       4\n strides         100     10   <-- dst is still a strided tensor\n \n inner_idxs\n inner_blks\n </denchmark-code>\n \n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "pinzhenx", "commentT": "2020-07-02T02:13:52Z", "comment_text": "\n \t\tWhen it comes to other primitives eltwise, there's no way to let it \"strided in dense out\". So we should do a reorder to make it contiguous, is it correct?\n \t\t"}}}, "commit": {"commit_id": "c8e926a840d5268633969757daaf99d076265165", "commit_author": "Dmitrii Zarukin", "commitT": "2020-05-20 15:49:45-07:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "0.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\cpu\\ref_binary.cpp", "file_new_name": "src\\cpu\\ref_binary.cpp", "file_complexity": {"file_NLOC": "122", "file_CCN": "21", "file_NToken": "1100"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "99,149,150", "deleted_lines": "148", "method_info": {"method_name": "dnnl::impl::cpu::ref_binary_t<src0_type,src1_type,dst_type>::execute_ref", "method_params": "ctx", "method_startline": "91", "method_endline": "152", "method_complexity": {"method_NLOC": "48", "method_CCN": "8", "method_NToken": "543", "method_nesting_level": "3"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\cpu\\x64\\jit_uni_binary.hpp", "file_new_name": "src\\cpu\\x64\\jit_uni_binary.hpp", "file_complexity": {"file_NLOC": "79", "file_CCN": "28", "file_NToken": "566"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "54,57", "deleted_lines": "54", "method_info": {"method_name": "dnnl::impl::cpu::x64::jit_uni_binary_t::pd_t::init", "method_params": "engine", "method_startline": "45", "method_endline": "63", "method_complexity": {"method_NLOC": "17", "method_CCN": "10", "method_NToken": "123", "method_nesting_level": "6"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "69,70,71,72,73,74,75,76,82", "deleted_lines": "73", "method_info": {"method_name": "dnnl::impl::cpu::x64::jit_uni_binary_t::pd_t::is_applicable", "method_params": "", "method_startline": "66", "method_endline": "109", "method_complexity": {"method_NLOC": "32", "method_CCN": "17", "method_NToken": "315", "method_nesting_level": "6"}}}}}}}}