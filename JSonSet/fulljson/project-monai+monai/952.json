{"BR": {"BR_id": "952", "BR_author": "robogast", "BRopenT": "2020-08-26T09:01:55Z", "BRcloseT": "2020-08-31T14:35:26Z", "BR_text": {"BRsummary": "Preventing imports of all monai submodules", "BRdescription": "\n When importing monai in any way, all submodules are automatically made available, e.g.:\n import monai results in the root level import transforms being suddenly possible (instead of needing from monai import transforms)\n This seems to me like undesirable behavior: any project that has a local transforms submodule is suddenly unable to import it, because this results in a name conflict with the imported monai modules.\n When looking at any other package, similar behavior doesn't occur: after performing import torch, one doesn't expect import utils to import torch.utils(!)\n To conclude:\n --- Current (undesirable) situation ---\n import monai\n import transforms  # no error\n \n # do something with transforms\n # e.g. transforms.Compose([...])\n --- Desired situation ---\n import monai\n \n # do something with transforms\n # e.g. monai.transforms.Compose([...])\n Or, with specific import:\n from monai import transforms\n \n # do something with transforms\n # e.g. transforms.Compose([...])\n And when no local module is present:\n import monai\n import transforms\n Traceback (most recent call last):\n   File \"<stdin>\", line 1, in <module>\n ModuleNotFoundError: No module named 'transforms'\n The same holds for all monai submodules (utils, metrics, losses, etc.)\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "robogast", "commentT": "2020-08-26T10:16:49Z", "comment_text": "\n \t\tthanks for the nice bug report <denchmark-link:https://github.com/robogast>@robogast</denchmark-link>\n .\n the root cause is this submodule importing doesn't consider the basemod \n \n \n MONAI/monai/utils/module.py\n \n \n          Line 52\n       in\n       9a50150\n \n \n \n \n \n \n  importer.find_module(name).load_module(name) \n \n \n \n \n \n changing the method to have a prefix basemod seems to address this issue, but <denchmark-link:https://github.com/ericspod>@ericspod</denchmark-link>\n  please confirm\n def load_submodules(basemod, load_all: bool = True, exclude_pattern: str = \"(.*[tT]est.*)|(_.*)\"):\n     submodules = []\n \n     for importer, name, is_pkg in walk_packages(basemod.__path__, prefix=basemod.__name__ + \".\"):\n         if (is_pkg or load_all) and match(exclude_pattern, name) is None:\n             mod = import_module(name)\n             importer.find_module(name).load_module(name)\n             submodules.append(mod)\n \n     return submodules\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "robogast", "commentT": "2020-08-26T14:40:42Z", "comment_text": "\n \t\tThis change does work for the importing but then causes problems with unittest, tests start complaining about super not working correctly: TypeError: super(type, obj): obj must be an instance or subtype of type. This comes up even though obj is an instance of type, Perhaps modules get imported multiple times somehow so there's two copies of definitions, I'll keep looking into it.\n \t\t"}}}, "commit": {"commit_id": "fd6d6a657ecc223fdcc0676bd7ecc8593de222e6", "commit_author": "Eric Kerfoot", "commitT": "2020-08-31 15:35:25+01:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "monai\\utils\\module.py", "file_new_name": "monai\\utils\\module.py", "file_complexity": {"file_NLOC": "140", "file_CCN": "24", "file_NToken": "614"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "46,50,51,52", "deleted_lines": "45,49,50,51", "method_info": {"method_name": "load_submodules", "method_params": "basemod,bool,str", "method_startline": "43", "method_endline": "56", "method_complexity": {"method_NLOC": "8", "method_CCN": "6", "method_NToken": "92", "method_nesting_level": "0"}}}}}}}}