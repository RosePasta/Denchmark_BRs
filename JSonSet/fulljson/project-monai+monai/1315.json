{"BR": {"BR_id": "1315", "BR_author": "Nic-Ma", "BRopenT": "2020-12-03T03:28:44Z", "BRcloseT": "2020-12-05T14:50:01Z", "BR_text": {"BRsummary": "Missing up_modules in AHNet when TorchScript", "BRdescription": "\n Describe the bug\n When exporting model in TorchScript, it output error:\n <denchmark-code>RuntimeError: \n Module 'PSP' has no attribute 'up_modules' :\n   File \"/workspace/data/medical/MONAI/monai/networks/nets/ahnet.py\", line 290\n         if self.upsample_mode == \"transpose\":\n             for (project_module, pool_module, up_module) in zip(\n                 self.project_modules, self.pool_modules, self.up_modules\n                                                          ~~~~~~~~~~~~~~~ <--- HERE\n             ):\n                 output = up_module(project_module(pool_module(x)))\n </denchmark-code>\n \n I will fix it ASAP.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "Nic-Ma", "commentT": "2020-12-03T07:40:14Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/ericspod>@ericspod</denchmark-link>\n  <denchmark-link:https://github.com/wyli>@wyli</denchmark-link>\n  ,\n Our CI test doesn't face this issue because TorchScript depends on the parameters of network.\n If I change the default model from transpose to nearest, CI will fail with same error:\n     @skip_if_quick\n     def test_script(self):\n         net = AHNet(spatial_dims=3, upsample_mode=\"nearest\", out_channels=2)\n         test_data = torch.randn(1, 1, 128, 64, 32)\n         test_script_save(net, test_data)\n So seems we can't make sure all the networks with all the parameters can support TorchScript so far?\n Thanks.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "Nic-Ma", "commentT": "2020-12-03T07:43:37Z", "comment_text": "\n \t\tReopen the issue because we may still have other parameter-related TorchScript issues in other networks, need <denchmark-link:https://github.com/ericspod>@ericspod</denchmark-link>\n  to help double confirm.\n Thanks.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "Nic-Ma", "commentT": "2020-12-03T14:01:34Z", "comment_text": "\n \t\tYes there were a few other instances of this I changed earlier but missed this one. All members which Torchscript needs to encode, nn.Module members for the most part, must always be created in the constructor. As a general Pythonic style this should always be the case anyhow, users of a class typically expect a member to always be present in its instances.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "Nic-Ma", "commentT": "2020-12-05T14:50:01Z", "comment_text": "\n \t\tSure, thanks for your explanation.\n \t\t"}}}, "commit": {"commit_id": "bc28d79f4d6039652b4ff19ed09990246efa2b91", "commit_author": "Nic Ma", "commitT": "2020-12-03 15:42:10+08:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "monai\\networks\\nets\\ahnet.py", "file_new_name": "monai\\networks\\nets\\ahnet.py", "file_complexity": {"file_NLOC": "451", "file_CCN": "37", "file_NToken": "3825"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "246", "deleted_lines": "246,272", "method_info": {"method_name": "__init__", "method_params": "self,int,int,int,str", "method_startline": "244", "method_endline": "283", "method_complexity": {"method_NLOC": "36", "method_CCN": "4", "method_NToken": "311", "method_nesting_level": "1"}}}}}}}}