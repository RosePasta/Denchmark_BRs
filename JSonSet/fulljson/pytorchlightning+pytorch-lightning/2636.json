{"BR": {"BR_id": "2636", "BR_author": "ehsanmok", "BRopenT": "2020-07-17T20:49:57Z", "BRcloseT": "2020-10-05T11:36:13Z", "BR_text": {"BRsummary": "nan metric breaking ModelCheckpoint", "BRdescription": "\n <denchmark-h:h2>\ud83d\udc1b Bug</denchmark-h>\n \n Comparing any numbers to float('nan') is False in Python so as a result if a non-loss metric score is nan initially in training, then callback cannot checkpoint any scores after.\n <denchmark-h:h3>Expected behavior</denchmark-h>\n \n Ignore a nan metric score. This is orthogonal to when grad or weights become nan.\n <denchmark-h:h3>Environment</denchmark-h>\n \n \n PyTorch Version (e.g., 1.0): 1.5.0\n OS (e.g., Linux): Linux\n How you installed PyTorch (conda, pip, source): pip\n Build command you used (if compiling from source):\n Python version: 3.6\n CUDA/cuDNN version: 10.0\n GPU models and configuration: Tesla V100\n \n <denchmark-h:h3>Additional context</denchmark-h>\n \n Previous issue wasn't addressed completely <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/issues/1008>#1008</denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ehsanmok", "commentT": "2020-07-17T20:50:49Z", "comment_text": "\n \t\tHi! thanks for your contribution!, great first issue!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ehsanmok", "commentT": "2020-09-15T17:43:27Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ehsanmok>@ehsanmok</denchmark-link>\n  mind send a PR? \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "ehsanmok", "commentT": "2020-09-26T10:02:44Z", "comment_text": "\n \t\tAssign this to me please.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "ehsanmok", "commentT": "2020-09-27T07:44:38Z", "comment_text": "\n \t\tSo I can reproduce this issue <denchmark-link:https://colab.research.google.com/drive/1dbvG_Gth8KvBsNHr5hQ4npIjmf_GAbNS?usp=sharing#scrollTo=ssQ_w97DvdzV>like this</denchmark-link>\n .\n I am not exactly clear on what the expected behavior is though. In <denchmark-link:https://github.com/awaelchli>@awaelchli</denchmark-link>\n  's PR for <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/pull/1097/files>nan detection and intervention</denchmark-link>\n , training is stopped when loss or weights contain  or infinite values.\n What do we want to do:\n \n \n if a metric that was passed as monitor param to ModelCheckpointgoes nan/inf:\n \n raise an error (like when loss/weights do the same)\n raise a warning but continue training and do not save any more checkpoints\n raise a warning but continue training and do not save checkpoints when monitor is nan/inf. What if it returns to non nan/inf values (as mentioned in #1008)?\n \n \n \n separate from this issue perhaps if any metric goes nan/inf (regardless of whether ModelCheckpoint) is used:\n \n raise a warning / error ? (if the former than this should be addressed in a different issue perhaps)\n \n \n \n when do we want to detect nan/infmetrics (whether monitor or any)?\n \n ASAP which would be in the first validation step when it happens (perhaps even in Trainer.run_sanity_check)\n on_validation_end (after all batches are processed) and model checkpoint is being saved\n \n \n \n \t\t"}}}, "commit": {"commit_id": "6ac0958166c66ed599c96737b587232b7a33d89e", "commit_author": "Jirka Borovec", "commitT": "2020-10-05 07:36:12-04:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "pytorch_lightning\\callbacks\\model_checkpoint.py", "file_new_name": "pytorch_lightning\\callbacks\\model_checkpoint.py", "file_complexity": {"file_NLOC": "425", "file_CCN": "86", "file_NToken": "2237"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "520,521,522,523", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\checkpointing\\test_model_checkpoint.py", "file_new_name": "tests\\checkpointing\\test_model_checkpoint.py", "file_complexity": {"file_NLOC": "365", "file_CCN": "42", "file_NToken": "2747"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484", "deleted_lines": null, "method_info": {"method_name": "test_checkpointing_with_nan_as_first", "method_params": "tmpdir,mode", "method_startline": "463", "method_endline": "484", "method_complexity": {"method_NLOC": "15", "method_CCN": "2", "method_NToken": "126", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "469,470,471", "deleted_lines": null, "method_info": {"method_name": "test_checkpointing_with_nan_as_first.validation_epoch_end", "method_params": "self,outputs", "method_startline": "469", "method_endline": "471", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "23", "method_nesting_level": "2"}}}}}}}}