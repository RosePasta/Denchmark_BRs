{"BR": {"BR_id": "796", "BR_author": "williamFalcon", "BRopenT": "2020-02-07T09:36:51Z", "BRcloseT": "2020-02-09T22:48:38Z", "BR_text": {"BRsummary": "new profiler has failing tests", "BRdescription": "\n <denchmark-link:https://github.com/jeremyjordan>@jeremyjordan</denchmark-link>\n \n Tests fail on OSX\n <denchmark-code>tests/test_profiler.py::test_advanced_profiler FAILED \n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "williamFalcon", "commentT": "2020-02-07T09:43:10Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/jeremyjordan>@jeremyjordan</denchmark-link>\n  <denchmark-link:https://travis-ci.org/PyTorchLightning/pytorch-lightning/jobs/647158609>https://travis-ci.org/PyTorchLightning/pytorch-lightning/jobs/647158609</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "williamFalcon", "commentT": "2020-02-07T12:47:11Z", "comment_text": "\n \t\t that environment has really inconsistent s (eg. see discussion <denchmark-link:https://www.reddit.com/r/Python/comments/8eqwsr/unexpected_behavior_of_timesleep_seems_to_add/?utm_source=amp&utm_medium=&utm_content=post_body>here</denchmark-link>\n ). i could relax the precision requirement on the test even further.\n perhaps i can also profile a no-op and require the recorded duration to be less than X to ensure our profilers don\u2019t add much overhead.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "williamFalcon", "commentT": "2020-02-07T22:26:06Z", "comment_text": "\n \t\tmaybe some larger tolerance on the value?\n <denchmark-code>        a_duration = get_duration(p.profiled_actions[\"a\"])\n >       np.testing.assert_almost_equal(a_duration, [4], decimal=1)\n E       AssertionError: \n E       Arrays are not almost equal to 1 decimals\n E       \n E       Mismatch: 100%\n E       Max absolute difference: 0.150021\n E       Max relative difference: 0.03750525\n E        x: array(4.2)\n E        y: array([4])\n tests/test_profiler.py:46: AssertionError\n </denchmark-code>\n \n for the record, restartd job/build helps but it is not very nice hack which need manual work...\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "williamFalcon", "commentT": "2020-02-07T23:20:52Z", "comment_text": "\n \t\tyeah a larger tolerance will ensure it passes the tests, we should also include a new test which does something like\n <denchmark-code>with profiler.profile(\"no-op\"):\n     pass\n </denchmark-code>\n \n and ensure the \"no-op\" duration is less than some desired overhead threshold. this ensures that we won't introduce performance regressions in future updates.\n \t\t"}}}, "commit": {"commit_id": "fc0ad03008f5b725814a9091dc6a874950f49b42", "commit_author": "Jirka Borovec", "commitT": "2020-02-09 17:48:37-05:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "tests\\test_profiler.py", "file_new_name": "tests\\test_profiler.py", "file_complexity": {"file_NLOC": "34", "file_CCN": "4", "file_NToken": "327"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "28", "method_info": {"method_name": "test_advanced_profiler.get_duration", "method_params": "profile", "method_startline": "28", "method_endline": "29", "method_complexity": {"method_NLOC": "2", "method_CCN": "2", "method_NToken": "22", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "24,25,26,27", "deleted_lines": "22,23,24", "method_info": {"method_name": "test_simple_profiler", "method_params": "", "method_startline": "8", "method_endline": "27", "method_complexity": {"method_NLOC": "13", "method_CCN": "1", "method_NToken": "136", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "31,48,49,50,51,52,53,54,55", "deleted_lines": "45,46,47,48,49,50", "method_info": {"method_name": "test_advanced_profiler", "method_params": "", "method_startline": "30", "method_endline": "55", "method_complexity": {"method_NLOC": "17", "method_CCN": "1", "method_NToken": "154", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "31", "deleted_lines": null, "method_info": {"method_name": "test_advanced_profiler._get_duration", "method_params": "profile", "method_startline": "31", "method_endline": "32", "method_complexity": {"method_NLOC": "2", "method_CCN": "2", "method_NToken": "22", "method_nesting_level": "1"}}}}}}}}