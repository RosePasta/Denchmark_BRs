{"BR": {"BR_id": "2769", "BR_author": "acturner", "BRopenT": "2020-07-30T22:03:12Z", "BRcloseT": "2020-10-05T16:44:24Z", "BR_text": {"BRsummary": "Bug in `LightningModule.load_from_checkpoint`", "BRdescription": "\n Suppose you have a class Model(LightningModule) (a LightningModule subclass) and as parameters it takes\n params: argparse.Namespace (without a default value), along with other keyword arguments which might take default arguments. Loading from a checkpoint\n model = Model(params=params, **kwargs)\n ...  # saves a checkpoint\n model = Model.load_from_checkpoint(params=params, **kwargs)  \n # same behavior arises if params is passed as positional argument\n will throw the error TypeError: __init__() got multiple values for argument 'params'.\n This comes from the fact that in line 205 in pytorch_lightning/core/saving.py\n model = cls(*cls_args, **cls_kwargs)\n when inspected, cls_args is ({'params': params},) and cls_kwargs is, of course, {'params': params}.\n This stems from the fact in lines 189-196 (in saving.py):\n             if args_name == 'kwargs':\n                 # in case the class cannot take any extra argument filter only the possible\n                 cls_kwargs.update(**model_args)\n             elif args_name:\n                 if args_name in cls_init_args_name:\n                     cls_kwargs.update({args_name: model_args})\n             else:\n                 cls_args = (model_args,) + cls_args\n the else clause is getting called and model_args contains a copy of kwargs!\n To be honest, it's very unclear to me exactly what model_args is supposed to be here, but what is clear is that\n this block needs more checking so that we don't just stick copies of items in cls_kwargs into cls_args. Just doing\n something silly like replacing the else clause with\n from typing import Sequence\n ...\n              elif isinstance(model_args, Sequence):\n                 cls_args = tuple(model_args) + cls_args\n fixes the problem for me, but as I said, I'm unclear on exactly how model_args is being used, so I'm sure there is a better\n solution.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "acturner", "commentT": "2020-07-30T22:04:14Z", "comment_text": "\n \t\tHi! thanks for your contribution!, great first issue!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "acturner", "commentT": "2020-08-24T14:34:24Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/Borda>@Borda</denchmark-link>\n  any updates on this?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "acturner", "commentT": "2020-10-02T14:16:41Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/acturner>@acturner</denchmark-link>\n  it is fixed by <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/pull/2776>#2776</denchmark-link>\n  mind try...\n \t\t"}}}, "commit": {"commit_id": "cea5f1f53876399dfaa0d37accdc527af7ca39af", "commit_author": "Jean-Baptiste SCHIRATTI", "commitT": "2020-10-05 12:44:23-04:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "pytorch_lightning\\core\\saving.py", "file_new_name": "pytorch_lightning\\core\\saving.py", "file_complexity": {"file_NLOC": "294", "file_CCN": "39", "file_NToken": "1305"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "55", "method_info": {"method_name": "load_from_checkpoint", "method_params": "cls,str,args,str,str,device,int,None,None,bool,kwargs", "method_startline": "52", "method_endline": "59", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "56", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "157,160,161,162,163,164,165,169,170,171,173,174,175,177,178,179,180,182,183,185,186,187,191,193", "deleted_lines": "159,164,166,167,168,169,171,175,176,177,178,179,180,181,182,186,188,189,190,192", "method_info": {"method_name": "_load_model_state", "method_params": "cls,str,bool,cls_kwargs_new", "method_startline": "157", "method_endline": "201", "method_complexity": {"method_NLOC": "25", "method_CCN": "8", "method_NToken": "243", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "244", "deleted_lines": null, "method_info": {"method_name": "_convert_loaded_hparams", "method_params": "dict,Callable,None", "method_startline": "243", "method_endline": "252", "method_complexity": {"method_NLOC": "7", "method_CCN": "3", "method_NToken": "43", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "160,161,162,163,164,165,169,170,171,173,174,175,177,178,179,180,182,183,185,186,187,191,193", "deleted_lines": "159,164,166,167,168,169,171,175,176,177,178,179,180,181,182,186,188,189,190,192", "method_info": {"method_name": "_load_model_state", "method_params": "cls,str,cls_args,bool,cls_kwargs", "method_startline": "159", "method_endline": "199", "method_complexity": {"method_NLOC": "25", "method_CCN": "13", "method_NToken": "241", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\base\\model_template.py", "file_new_name": "tests\\base\\model_template.py", "file_complexity": {"file_NLOC": "137", "file_CCN": "8", "file_NToken": "750"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "42,43,44,45,46,47,48,49,50,51,52", "deleted_lines": "42,43,44,45,46,47,48,49,50,51,52", "method_info": {"method_name": "__init__", "method_params": "self,float,int,int,float,str,str,int,int,float,float", "method_startline": "41", "method_endline": "52", "method_complexity": {"method_NLOC": "12", "method_CCN": "1", "method_NToken": "76", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\models\\test_hparams.py", "file_new_name": "tests\\models\\test_hparams.py", "file_complexity": {"file_NLOC": "318", "file_CCN": "55", "file_NToken": "2588"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "541,542", "deleted_lines": "541,542", "method_info": {"method_name": "test_args", "method_params": "tmpdir", "method_startline": "533", "method_endline": "542", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "62", "method_nesting_level": "0"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\models\\test_restore.py", "file_new_name": "tests\\models\\test_restore.py", "file_complexity": {"file_NLOC": "265", "file_CCN": "30", "file_NToken": "2017"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "221,222,223,224,225,226,237", "deleted_lines": null, "method_info": {"method_name": "test_load_model_from_checkpoint", "method_params": "tmpdir,model_template", "method_startline": "197", "method_endline": "242", "method_complexity": {"method_NLOC": "26", "method_CCN": "3", "method_NToken": "235", "method_nesting_level": "0"}}}}}}}}