{"BR": {"BR_id": "3172", "BR_author": "ozen", "BRopenT": "2020-08-25T18:31:49Z", "BRcloseT": "2020-09-19T22:29:07Z", "BR_text": {"BRsummary": "\"Unsupported `ReduceOp` for distributed computing\" warning when using Result without distributed", "BRdescription": "\n <denchmark-h:h2>\ud83d\udc1b Bug</denchmark-h>\n \n step_result.py imports pytorch_lightning.metrics.converters\n converters.py raises the following warning if torch.distributed.ReduceOp cannot be imported:\n \n rank_zero_warn('Unsupported ReduceOp for distributed computing.')\n \n I don't use and don't want to use distributed training, but this warning is printed to stdout non-stop at one warning per second rate.\n <denchmark-h:h3>To Reproduce</denchmark-h>\n \n Use Result object without a distributed package available.\n <denchmark-h:h3>Expected behavior</denchmark-h>\n \n This warning should be printed once at most.\n If I don't use distributed, I don't need to see this warning at all.\n <denchmark-h:h3>Environment</denchmark-h>\n \n \n CUDA:\n - GPU:\n - GeForce RTX 2080\n - available:         True\n - version:           10.2\n Packages:\n - numpy:             1.18.1\n - pyTorch_debug:     False\n - pyTorch_version:   1.6.0\n - pytorch-lightning: 0.9.0\n - tensorboard:       2.2.0\n - tqdm:              4.47.0\n System:\n - OS:                Windows\n - architecture:\n - 64bit\n - WindowsPE\n - processor:         Intel64 Family 6 Model 158 Stepping 10, GenuineIntel\n - python:            3.7.1\n - version:           10.0.19041\n \n <denchmark-h:h3>Additional context</denchmark-h>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ozen", "commentT": "2020-08-25T20:01:29Z", "comment_text": "\n \t\tYeah, that is PyTorch issue as most it does not support several distributed features on Windows...\n May send a PR with some friendly message or update it docs?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ozen", "commentT": "2020-08-25T20:35:46Z", "comment_text": "\n \t\tI think I understand what you are saying. But, pytorch-lightning code is the one that prints the warning message. Since it keeps printing the same warning like it is in an infinite loop, upgrading from 0.8 to 0.9 made pytorch-lightning unusable for me, and for anyone using Windows I imagine.\n If you say pytorch-lightning 0.9+ won't support Windows, that's one thing. Otherwise, this is an issue.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "ozen", "commentT": "2020-08-25T20:49:44Z", "comment_text": "\n \t\t\n I think I understand what you are saying. But, pytorch-lightning code is the one that prints the warning message.\n \n yes, we warn you that you requested something which is not supported on your OS, pt does not give it to you either, the diff is the PT even does not tell you and is standard computing\n \n Since it keeps printing the same warning like it is in an infinite loop, upgrading from 0.8 to 0.9 made pytorch-lightning unusable for me, and for anyone using Windows I imagine.\n \n so you just complain that you get this message several times? <denchmark-link:https://github.com/awaelchli>@awaelchli</denchmark-link>\n \n \n If you say pytorch-lightning 0.9+ won't support Windows, that's one thing. Otherwise, this is an issue.\n \n this is a misunderstanding, it is not PL who does not support distributed on Win but PyTorch itself, PL is just wrapper above PT... so you shall create an issue there...\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "ozen", "commentT": "2020-08-25T20:56:45Z", "comment_text": "\n \t\t\n this is a misunderstanding, it is not PL who does not support distributed on Win but PyTorch itself, PL is just wrapper above PT... so you shall create an issue there...\n \n I think I failed to explain the problem. I use PT without any issues, because I don't use distributed anyway. I don't use distributed when I use PL either, but PL core imports distributed anyway, and prints that warning, and prints it once per every second (I don't know why).\n Edit: and this only started to happen in 0.9 because the import line came with the Result object.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "ozen", "commentT": "2020-08-25T21:21:10Z", "comment_text": "\n \t\tok, that is fair that we shall tell you just once or even do not import it if you do not need it...\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "ozen", "commentT": "2020-08-25T21:22:24Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ozen>@ozen</denchmark-link>\n  mind send a PR with patching this importing?\n cc: <denchmark-link:https://github.com/awaelchli>@awaelchli</denchmark-link>\n  <denchmark-link:https://github.com/yukw777>@yukw777</denchmark-link>\n \n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "ozen", "commentT": "2020-08-25T22:03:51Z", "comment_text": "\n \t\tOK, couple of findings:\n \n As I understand rank_zero_only covers distributed processes, but not DataLoader worker processes. The worker processes are started at the beginning of the training and validation runs at every epoch, resulted in a lot of warnings, especially if you use a large number of workers.\n from pytorch_lightning.metrics.converters import _sync_ddp_if_available line in core/step_result.py can be moved inside the if clause where it is used if sync_dist=True. But this alone won't solve the problem because metric converters are imported elsewhere too.\n The ReduceOp import in metrics/converters.py that causes the warning is used for two things: type hints and in the function _sync_ddp_if_available. If we moved the import inside _sync_ddp_if_available the problem would be solved, but I don't know if it's OK to remove the type hints.\n \n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "ozen", "commentT": "2020-09-07T12:32:49Z", "comment_text": "\n \t\tTo keep it simple, you can also ignore the warnings in the command-line with\n <denchmark-code> >>> python -W \"ignore::UserWarning::0\" file_to_run.py\n </denchmark-code>\n \n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "ozen", "commentT": "2020-09-19T01:15:02Z", "comment_text": "\n \t\tI have mentioned multi-process data loading as the cause of the spam of warnings. In fact, this is a problem only in Windows when  statement is outside of  block. The reason of this is <denchmark-link:https://pytorch.org/docs/stable/data.html#platform-specific-behaviors>described here</denchmark-link>\n . Moving the import statements inside the if block solves the problem.\n We may still consider changing the code a little bit. The origin of the warning is pytorch_lightning.metrics.converters module.\n try:\n     from torch.distributed import ReduceOp\n except ImportError:\n     class ReduceOp:\n         SUM = None\n     rank_zero_warn(\"Unsupported `ReduceOp` for distributed computing\")\n Note that ReduceOp.SUM is not used. ReduceOp class is imported only for the type hints (i.e. reduce_op: Optional[ReduceOp] = None). However on the same module, group parameters do not follow this practice for type hinting and use Optional[Any].\n An example:\n def tensor_metric(group: Optional[Any] = None, reduce_op: Optional[ReduceOp] = None) -> Callable:\n If we change the hints into\n def tensor_metric(group: Optional[Any] = None, reduce_op: Optional[Any] = None) -> Callable:\n we can remove the import ReduceOp statement together with the warning.\n Or maybe we want type hints for group as well:\n def tensor_metric(group: Optional[group] = None, reduce_op: Optional[ReduceOp] = None) -> Callable:\n and add a try-catch import for group too since it has the same problem with the ReduceOp class.\n I can send a PR depending on the decision.\n \t\t"}}}, "commit": {"commit_id": "99f05ed23f818d4f21c2c6925a66e75df606c859", "commit_author": "Adrian W\u00e4lchli", "commitT": "2020-09-19 18:29:06-04:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "pytorch_lightning\\metrics\\converters.py", "file_new_name": "pytorch_lightning\\metrics\\converters.py", "file_complexity": {"file_NLOC": "302", "file_CCN": "38", "file_NToken": "1121"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "31,33", "deleted_lines": "29,32,34,35,39,40"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "pytorch_lightning\\metrics\\sklearns.py", "file_new_name": "pytorch_lightning\\metrics\\sklearns.py", "file_complexity": {"file_NLOC": "1014", "file_CCN": "60", "file_NToken": "3128"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "23,25", "deleted_lines": "22,24,26,27,31,32"}}}}}}