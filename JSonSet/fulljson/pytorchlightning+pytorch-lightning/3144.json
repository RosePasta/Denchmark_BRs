{"BR": {"BR_id": "3144", "BR_author": "lezwon", "BRopenT": "2020-08-25T03:35:04Z", "BRcloseT": "2020-08-26T16:22:20Z", "BR_text": {"BRsummary": "ONNX model does not save on GPU", "BRdescription": "\n <denchmark-h:h2>\ud83d\udc1b Bug</denchmark-h>\n \n Attempting to export on ONNX after training model on GPU, throws an error is the input_sample or example_input_array is not a CUDA tensor.\n <denchmark-h:h3>To Reproduce</denchmark-h>\n \n Steps to reproduce the behavior:\n \n Train a model on GPU\n Try to export to ONNX when  self.example_input_array = torch.zeros(1, 1, 500, 500) or input_sample = torch.zeros(1, 1, 500, 500)\n \n <denchmark-code>---------------------------------------------------------------------------\n RuntimeError                              Traceback (most recent call last)\n <ipython-input-32-cd8009a0b6a3> in <module>\n       1 filepath = 'model.onnx'\n ----> 2 model.to_onnx(filepath, export_params=True)\n \n /opt/conda/lib/python3.7/site-packages/pytorch_lightning/core/lightning.py in to_onnx(self, file_path, input_sample, **kwargs)\n    1721         if 'example_outputs' not in kwargs:\n    1722             self.eval()\n -> 1723             kwargs['example_outputs'] = self(input_data)\n    1724 \n    1725         torch.onnx.export(self, input_data, file_path, **kwargs)\n \n /opt/conda/lib/python3.7/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\n     548             result = self._slow_forward(*input, **kwargs)\n     549         else:\n --> 550             result = self.forward(*input, **kwargs)\n     551         for hook in self._forward_hooks.values():\n     552             hook_result = hook(self, input, result)\n \n <ipython-input-24-51cae3b5e57f> in forward(self, inputs)\n      20 \n      21     def forward(self, inputs):\n ---> 22         return self.model(inputs)\n      23 \n      24     def training_step(self, batch, batch_idx):\n \n /opt/conda/lib/python3.7/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\n     548             result = self._slow_forward(*input, **kwargs)\n     549         else:\n --> 550             result = self.forward(*input, **kwargs)\n     551         for hook in self._forward_hooks.values():\n     552             hook_result = hook(self, input, result)\n \n /opt/conda/lib/python3.7/site-packages/torch/nn/modules/container.py in forward(self, input)\n      98     def forward(self, input):\n      99         for module in self:\n --> 100             input = module(input)\n     101         return input\n     102 \n \n /opt/conda/lib/python3.7/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\n     548             result = self._slow_forward(*input, **kwargs)\n     549         else:\n --> 550             result = self.forward(*input, **kwargs)\n     551         for hook in self._forward_hooks.values():\n     552             hook_result = hook(self, input, result)\n \n /opt/conda/lib/python3.7/site-packages/torch/nn/modules/conv.py in forward(self, input)\n     351 \n     352     def forward(self, input):\n --> 353         return self._conv_forward(input, self.weight)\n     354 \n     355 class Conv3d(_ConvNd):\n \n /opt/conda/lib/python3.7/site-packages/torch/nn/modules/conv.py in _conv_forward(self, input, weight)\n     348                             _pair(0), self.dilation, self.groups)\n     349         return F.conv2d(input, weight, self.bias, self.stride,\n --> 350                         self.padding, self.dilation, self.groups)\n     351 \n     352     def forward(self, input):\n \n RuntimeError: Input type (torch.FloatTensor) and weight type (torch.cuda.FloatTensor) should be the same\n </denchmark-code>\n \n <denchmark-h:h4>Code sample</denchmark-h>\n \n filepath = 'model.onnx'\n model.to_onnx(filepath, export_params=True)\n <denchmark-h:h3>Expected behavior</denchmark-h>\n \n Should automatically convert example_input_array or input_sample to the device type and save the model to ONNX.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "lezwon", "commentT": "2020-08-25T07:09:53Z", "comment_text": "\n \t\tI would say that the problem could be the distributed way, mind check running only on a single GPU?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "lezwon", "commentT": "2020-08-25T09:31:24Z", "comment_text": "\n \t\tI ran this on Kaggle notebook. When I tried to save after training, it threw the error.\n \t\t"}}}, "commit": {"commit_id": "d9ea25590e95ca9e70401123a0f1f59de711e2ff", "commit_author": "Lezwon Castelino", "commitT": "2020-08-26 16:22:19+00:00", "commit_complexity": {"commit_NLOC": "0.2916666666666667", "commit_CCN": "1.0", "commit_Nprams": "0.75"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "CHANGELOG.md", "file_new_name": "CHANGELOG.md", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "29,30", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "pytorch_lightning\\core\\lightning.py", "file_new_name": "pytorch_lightning\\core\\lightning.py", "file_complexity": {"file_NLOC": "1480", "file_CCN": "100", "file_NToken": "2334"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1719,1720,1721,1722,1723,1724,1727,1728", "deleted_lines": "1719,1720,1723", "method_info": {"method_name": "to_onnx", "method_params": "self,str,None,kwargs", "method_startline": "1689", "method_endline": "1730", "method_complexity": {"method_NLOC": "17", "method_CCN": "5", "method_NToken": "120", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 9, "file_old_name": "tests\\models\\test_onnx.py", "file_new_name": "tests\\models\\test_onnx.py", "file_complexity": {"file_NLOC": "97", "file_CCN": "11", "file_NToken": "816"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "128", "deleted_lines": null, "method_info": {"method_name": "test_if_inference_output_is_valid", "method_params": "tmpdir", "method_startline": "118", "method_endline": "141", "method_complexity": {"method_NLOC": "14", "method_CCN": "1", "method_NToken": "139", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "101,102,103", "deleted_lines": "102", "method_info": {"method_name": "test_error_if_no_input", "method_params": "tmpdir", "method_startline": "97", "method_endline": "104", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "49", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "20,21,22,23,24", "deleted_lines": "20", "method_info": {"method_name": "test_model_saves_with_input_sample", "method_params": "tmpdir", "method_startline": "14", "method_endline": "24", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "81", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "107,108,109,110,111,112,113,114,115", "deleted_lines": null, "method_info": {"method_name": "test_error_if_input_sample_is_not_tensor", "method_params": "tmpdir", "method_startline": "107", "method_endline": "115", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "65", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "91", "deleted_lines": "88", "method_info": {"method_name": "test_verbose_param", "method_params": "tmpdir,capsys", "method_startline": "88", "method_endline": "94", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "48", "method_nesting_level": "0"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "83", "deleted_lines": "69,77", "method_info": {"method_name": "test_model_saves_on_multi_gpu", "method_params": "tmpdir", "method_startline": "65", "method_endline": "85", "method_complexity": {"method_NLOC": "16", "method_CCN": "1", "method_NToken": "89", "method_nesting_level": "0"}}}, "hunk_6": {"Ismethod": 1, "added_lines": "47", "deleted_lines": "44", "method_info": {"method_name": "test_model_saves_with_example_output", "method_params": "tmpdir", "method_startline": "41", "method_endline": "52", "method_complexity": {"method_NLOC": "10", "method_CCN": "1", "method_NToken": "87", "method_nesting_level": "0"}}}, "hunk_7": {"Ismethod": 1, "added_lines": "28,29,30,31,32,33,34", "deleted_lines": "33", "method_info": {"method_name": "test_model_saves_on_gpu", "method_params": "tmpdir", "method_startline": "28", "method_endline": "38", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "85", "method_nesting_level": "0"}}}, "hunk_8": {"Ismethod": 1, "added_lines": "58", "deleted_lines": null, "method_info": {"method_name": "test_model_saves_with_example_input_array", "method_params": "tmpdir", "method_startline": "55", "method_endline": "61", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "53", "method_nesting_level": "0"}}}}}}}}