{"BR": {"BR_id": "2442", "BR_author": "Anjum48", "BRopenT": "2020-07-01T06:56:52Z", "BRcloseT": "2020-07-21T19:18:58Z", "BR_text": {"BRsummary": "validation_epoch_end needs to return CUDA tensors", "BRdescription": "\n <denchmark-h:h2>\ud83d\udc1b Bug</denchmark-h>\n \n I'm not sure if this is expected behaviour or not, but upgrading to the latest version (from 0.8.1) caused my validation_epoch_end to break. It appears that a CUDA tensor is expected for the metric where before the tensor was device agnostic.\n This was using sklearn's roc_auc_score. I haven't yet got around to testing PL's new metrics.\n Feel free to close if this is expected behaviour.\n <denchmark-h:h3>To Reproduce</denchmark-h>\n \n This is my validation_epoch_end. Uncommenting .to(avg_loss.device) allows this to run with the dev version of PL.\n This was run with ddp, precision=16 using Apex AMP.\n <denchmark-code>def validation_epoch_end(self, outputs):\n         avg_loss = torch.stack([x[\"val_loss\"] for x in outputs]).mean()\n         y_pred = torch.cat([x[\"y_pred\"].squeeze() for x in outputs]).cpu().numpy()\n         y_true = torch.cat([x[\"y_true\"].squeeze() for x in outputs]).cpu().numpy()\n \n         metric = torch.tensor(roc_auc_score(y_true, y_pred))  # .to(avg_loss.device)\n \n         tensorboard_logs = {\n             \"loss/validation\": avg_loss,\n             \"auc\": metric,\n         }\n         return {\"val_loss\": avg_loss, \"log\": tensorboard_logs, \"auc\": metric}\n </denchmark-code>\n \n The error message can be seen here: <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/issues/2411#issuecomment-652171874>#2411 (comment)</denchmark-link>\n \n <denchmark-h:h4>Code sample</denchmark-h>\n \n <denchmark-h:h3>Expected behavior</denchmark-h>\n \n <denchmark-h:h3>Environment</denchmark-h>\n \n Please copy and paste the output from our\n <denchmark-link:https://raw.githubusercontent.com/PyTorchLightning/pytorch-lightning/master/tests/collect_env_details.py>environment collection script</denchmark-link>\n \n (or fill out the checklist below manually).\n You can get the script and run it with:\n <denchmark-code>wget https://raw.githubusercontent.com/PyTorchLightning/pytorch-lightning/master/tests/collect_env_details.py\n # For security purposes, please check the contents of collect_env_details.py before running it.\n python collect_env_details.py\n </denchmark-code>\n \n \n PyTorch Version (e.g., 1.0): 1.5\n OS (e.g., Linux): Ubuntu 20.04\n How you installed PyTorch (conda, pip, source):\n Build command you used (if compiling from source):\n Python version: 3.8.2\n CUDA/cuDNN version: 10.2\n GPU models and configuration: Dual GPU (ddp)\n Any other relevant information: Apex AMP\n \n <denchmark-h:h3>Additional context</denchmark-h>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "Anjum48", "commentT": "2020-07-01T07:11:15Z", "comment_text": "\n \t\tI also have a sklearn generated metric that is only logged, with no business being on gpu. Hopefully not intended behavior?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "Anjum48", "commentT": "2020-07-01T09:57:44Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/justusschock>@justusschock</denchmark-link>\n  <denchmark-link:https://github.com/SkafteNicki>@SkafteNicki</denchmark-link>\n  mind have look? \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "Anjum48", "commentT": "2020-07-02T06:41:19Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/Anjum48>@Anjum48</denchmark-link>\n  this is probably caused by <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/pull/2434>#2434</denchmark-link>\n  in combination with your dip backend (from here: <denchmark-link:https://pytorch.org/docs/stable/distributed.html#backends>https://pytorch.org/docs/stable/distributed.html#backends</denchmark-link>\n ) which does not support CPU tensors (are you using NCCL backend?)\n <denchmark-link:https://github.com/s-rog>@s-rog</denchmark-link>\n  can you elaborate on your problem? Maybe in a separate issue since I'm not sure, if this is the same problem here.\n cc <denchmark-link:https://github.com/williamFalcon>@williamFalcon</denchmark-link>\n  ^^\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "Anjum48", "commentT": "2020-07-02T07:52:20Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/justusschock>@justusschock</denchmark-link>\n , I'm using the default PyTorch install from conda, so I believe NCCL is being used (both GPUs are in the same machine). The weird thing is that this only started happening when I upgraded from 0.8.1 to 0.8.4 so I guess something has changed in ddp?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "Anjum48", "commentT": "2020-07-02T07:56:58Z", "comment_text": "\n \t\tThis is not on ddp itself, but we added a often requested feature and synced the outputs across ddp nodes. And since you probably used nccl backend (which only supports gpu), this probably causes the drawback. Can you try to switch the backend of DDP? Maybe to Gloo or MPI?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "Anjum48", "commentT": "2020-07-02T08:22:09Z", "comment_text": "\n \t\tI added torch.distributed.Backend('gloo') to the top of my training script and am seeing the same error\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "Anjum48", "commentT": "2020-07-02T08:24:14Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/justusschock>@justusschock</denchmark-link>\n  I have the same issue as OP where my  returns a cpu tensor like:\n \n Edit:\n does this mean that the previous implementation was only returning/logging the rank 0 output?\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "Anjum48", "commentT": "2020-07-02T08:28:45Z", "comment_text": "\n \t\t\n Hi @justusschock, I'm using the default PyTorch install from conda, so I believe NCCL is being used (both GPUs are in the same machine). The weird thing is that this only started happening when I upgraded from 0.8.1 to 0.8.4 so I guess something has changed in ddp?\n \n FYI, We are testing also against Conda PyTorch distributions\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "Anjum48", "commentT": "2020-07-02T08:29:20Z", "comment_text": "\n \t\t\n does this mean that the previous implementation was only returning/logging the rank 0 output?\n \n I was also wondering this. I noticed my validation loss double after upgrading to 0.8.4\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "Anjum48", "commentT": "2020-07-02T10:20:56Z", "comment_text": "\n \t\tIt is synced/reduced back to process 0 and only logged there :) DO you think it would be better to log from each process with the respective rank as a prefix?\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "Anjum48", "commentT": "2020-07-02T10:23:15Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/Anjum48>@Anjum48</denchmark-link>\n  regarding your persisting error:\n adding it at the top of your script doesn't help, since lightning trainer overwrites this. You have to set it in the trainer: <denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/blob/master/pytorch_lightning/trainer/trainer.py#L166>https://github.com/PyTorchLightning/pytorch-lightning/blob/master/pytorch_lightning/trainer/trainer.py#L166</denchmark-link>\n \n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "Anjum48", "commentT": "2020-07-02T11:11:06Z", "comment_text": "\n \t\tOk I tried it in trainer, and got this error (after disabling AMP):\n <denchmark-code>Loaded pretrained weights for efficientnet-b0\n train.py:141: DtypeWarning: Columns (5) have mixed types.Specify dtype option on import or set low_memory=False.\n   train_single_fold(args)\n GPU available: True, used: False\n TPU available: False, using: 0 TPU cores\n \n   | Name      | Type             | Params\n -----------------------------------------------\n 0 | critereon | CrossEntropyLoss | 0     \n 1 | metric    | AUROC            | 0     \n 2 | net       | EfficientNet     | 4 M   \n Traceback (most recent call last):\n   File \"train.py\", line 141, in <module>\n     train_single_fold(args)\n   File \"train.py\", line 65, in train_single_fold\n     trainer.fit(model)\n   File \"/home/anjum/anaconda3/envs/kaggle/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py\", line 1020, in fit\n     self.run_pretrain_routine(model)\n   File \"/home/anjum/anaconda3/envs/kaggle/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py\", line 1128, in run_pretrain_routine\n     self.reset_val_dataloader(ref_model)\n   File \"/home/anjum/anaconda3/envs/kaggle/lib/python3.8/site-packages/pytorch_lightning/trainer/data_loading.py\", line 342, in reset_val_dataloader\n     self._reset_eval_dataloader(model, 'val')\n   File \"/home/anjum/anaconda3/envs/kaggle/lib/python3.8/site-packages/pytorch_lightning/trainer/data_loading.py\", line 268, in _reset_eval_dataloader\n     dataloaders = self.request_dataloader(getattr(model, f'{mode}_dataloader'))\n   File \"/home/anjum/anaconda3/envs/kaggle/lib/python3.8/site-packages/pytorch_lightning/trainer/data_loading.py\", line 363, in request_dataloader\n     dataloader = dataloader_fx()\n   File \"/home/anjum/PycharmProjects/kaggle/siim_isic_melanoma_classification/engine.py\", line 194, in val_dataloader\n     sampler = DistributedSampler(dataset)\n   File \"/home/anjum/anaconda3/envs/kaggle/lib/python3.8/site-packages/torch/utils/data/distributed.py\", line 43, in __init__\n     num_replicas = dist.get_world_size()\n   File \"/home/anjum/anaconda3/envs/kaggle/lib/python3.8/site-packages/torch/distributed/distributed_c10d.py\", line 582, in get_world_size\n     return _get_group_size(group)\n   File \"/home/anjum/anaconda3/envs/kaggle/lib/python3.8/site-packages/torch/distributed/distributed_c10d.py\", line 196, in _get_group_size\n     _check_default_pg()\n   File \"/home/anjum/anaconda3/envs/kaggle/lib/python3.8/site-packages/torch/distributed/distributed_c10d.py\", line 186, in _check_default_pg\n     assert _default_pg is not None, \\\n AssertionError: Default process group is not initialized\n </denchmark-code>\n \n I'm not familiar with gloo so I don't know what I'm looking at here. Isn't gloo for CPU only training?\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "Anjum48", "commentT": "2020-07-02T11:19:45Z", "comment_text": "\n \t\tfixed on master for now.\n Yes, currently only rank 0 is used for val calculation. The problem is that reducing blows up memory and causes these kinds of issues.\n however, this will be enabled again in an upcoming PR with an object that can do this kind of syncing automatically. however we\u2019ll need to solve this problem again, so we still need to identify what the issue is.\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "Anjum48", "commentT": "2020-07-03T00:24:45Z", "comment_text": "\n \t\t\n It is synced/reduced back to process 0 and only logged there :)\n \n \n Yes, currently only rank 0 is used for val calculation.\n \n <denchmark-link:https://github.com/justusschock>@justusschock</denchmark-link>\n  <denchmark-link:https://github.com/williamFalcon>@williamFalcon</denchmark-link>\n  ming clarifying? these two statements seem to be contradicting, unless I'm misunderstanding something...\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "Anjum48", "commentT": "2020-07-03T05:08:49Z", "comment_text": "\n \t\tOriginally we didn't reduce on val - it was on our todo. Then we added it, but it had weird issues such as this one. So we removed it and will test it more before adding back in.\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "Anjum48", "commentT": "2020-07-07T08:21:47Z", "comment_text": "\n \t\tI suppose the metric package fixes/bypasses this issue?\n I just converted my vanilla sk metrics to the pl sk interface, will test soon.\n Edit:\n <denchmark-code>  File \"/opt/conda/lib/python3.6/site-packages/pytorch_lightning/metrics/metric.py\", line 145, in __call__\n     return apply_to_collection(self._orig_call(*args, **kwargs), torch.Tensor,\n   File \"/opt/conda/lib/python3.6/site-packages/pytorch_lightning/metrics/converters.py\", line 67, in new_func\n     return func_to_apply(result, *dec_args, **dec_kwargs)\n   File \"/opt/conda/lib/python3.6/site-packages/pytorch_lightning/utilities/apply_func.py\", line 35, in apply_to_collection\n     return function(data, *args, **kwargs)\n   File \"/opt/conda/lib/python3.6/site-packages/pytorch_lightning/metrics/converters.py\", line 252, in _sync_ddp_if_available\n     async_op=False)\n   File \"/opt/conda/lib/python3.6/site-packages/torch/distributed/distributed_c10d.py\", line 898, in all_reduce\n     work = _default_pg.allreduce([tensor], opts)\n RuntimeError: Tensors must be CUDA and dense\n </denchmark-code>\n \n same issue using the built in metric interface it seems... I'm guessing the metrics need to include cuda conversion (for now) to be able to be reduced?\n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "Anjum48", "commentT": "2020-07-07T09:58:56Z", "comment_text": "\n \t\tare you on master?\n We won't include a cuda conversion here (we already have a push to self.device), since this also depends on your distributed backend (and you don't have access tp/want the computation to run on a gpu all the times.\n \t\t"}, "comments_17": {"comment_id": 18, "comment_author": "Anjum48", "commentT": "2020-07-08T00:23:48Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/justusschock>@justusschock</denchmark-link>\n  I just updated and tried again with the same error\n \t\t"}, "comments_18": {"comment_id": 19, "comment_author": "Anjum48", "commentT": "2020-07-08T09:05:06Z", "comment_text": "\n \t\tdo you have any CPU tensors there?\n \t\t"}, "comments_19": {"comment_id": 20, "comment_author": "Anjum48", "commentT": "2020-07-09T00:26:35Z", "comment_text": "\n \t\tnope both inputs to the lightning sklearn metric are cuda tensors\n \t\t"}, "comments_20": {"comment_id": 21, "comment_author": "Anjum48", "commentT": "2020-07-09T07:55:11Z", "comment_text": "\n \t\tI think I know the issue. Currently there is a problem with device propagation in utilities.device_dtype_mixin which causes the device property to be set only for the most outer instance. E.g. when you assign the metric to your LightningModule, the device of your metric isn't updated. So far I don't know why though.\n Any Idea <denchmark-link:https://github.com/Borda>@Borda</denchmark-link>\n ?\n \t\t"}, "comments_21": {"comment_id": 22, "comment_author": "Anjum48", "commentT": "2020-07-15T12:34:55Z", "comment_text": "\n \t\tnot sure at this moment, will check it...\n \t\t"}, "comments_22": {"comment_id": 23, "comment_author": "Anjum48", "commentT": "2020-07-16T02:21:34Z", "comment_text": "\n \t\tShould this be a separate issue? as it's an issue with metrics and not validation_epoch_end specifically\n \t\t"}, "comments_23": {"comment_id": 24, "comment_author": "Anjum48", "commentT": "2020-07-21T13:39:16Z", "comment_text": "\n \t\tJust some findings tho\n Currently, classification metrics return cpu tensor while regression metrics return cuda tensor, haven't tested with sk-metrics.\n <denchmark-link:https://colab.research.google.com/drive/102qrhFRbH3Jkh28-icSkuVkgelKmxlAt?usp=sharing>COLAB EXAMPLE</denchmark-link>\n \n \t\t"}, "comments_24": {"comment_id": 25, "comment_author": "Anjum48", "commentT": "2020-07-21T13:39:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/justusschock>@justusschock</denchmark-link>\n  The problem is simply that when you call .to on the nn.Module, it is not calling .to on the submodules. What the pytorch nn module does instead is only move the tensors (buffers, parameters) of these submodules, since pytorch has no such thing as a device property, the device is simply defined by the device the tensors are on.\n We can come up with a creative solution that involves going over all submodules and checking if they are instance of dtypedevicemixin and calling .to on these\n But this is not a real solution because if you nest multiple levels of dtype-mixin-subclass and nn.Module in a particular way, it can still lead to the same bug\n EDIT: I think I have a fix that involves using the apply function on the module, and can submit a PR.\n \t\t"}, "comments_25": {"comment_id": 26, "comment_author": "Anjum48", "commentT": "2020-07-21T19:41:23Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/Anjum48>@Anjum48</denchmark-link>\n  the bug should be fixed now, although I was not able to check your use case with precision=16. Let me know if it works or not.\n \t\t"}, "comments_26": {"comment_id": 27, "comment_author": "Anjum48", "commentT": "2020-07-22T03:28:36Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/awaelchli>@awaelchli</denchmark-link>\n  pulled from master and still experiencing the same issue with FP16\n \t\t"}, "comments_27": {"comment_id": 28, "comment_author": "Anjum48", "commentT": "2020-07-22T07:54:00Z", "comment_text": "\n \t\tYes, but this is probably something different. If you're using AMP, they don't convert inputs and outputs once, but they monkey patch every function to convert it's inputs and convert it's outputs back...\n Are you on slack? Maybe it's best to write me a message there, so that we can easily discuss your issue without spamming all the others :)\n \t\t"}}}, "commit": {"commit_id": "a5538af3558cf544dffd92b1b8bab3a5793f0ba0", "commit_author": "Adrian W\u00e4lchli", "commitT": "2020-07-21 15:18:57-04:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "0.8333333333333334"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "CHANGELOG.md", "file_new_name": "CHANGELOG.md", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "24", "deleted_lines": "24"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "pytorch_lightning\\core\\lightning.py", "file_new_name": "pytorch_lightning\\core\\lightning.py", "file_complexity": {"file_NLOC": "1610", "file_CCN": "86", "file_NToken": "2253"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "71,72,73,74,75,76", "method_info": {"method_name": "__init__", "method_params": "self,args,kwargs", "method_startline": "37", "method_endline": "78", "method_complexity": {"method_NLOC": "16", "method_CCN": "1", "method_NToken": "101", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "pytorch_lightning\\metrics\\metric.py", "file_new_name": "pytorch_lightning\\metrics\\metric.py", "file_complexity": {"file_NLOC": "91", "file_CCN": "11", "file_NToken": "515"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "30,31", "method_info": {"method_name": "__init__", "method_params": "self,str", "method_startline": "22", "method_endline": "31", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "41", "method_nesting_level": "1"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 10, "file_old_name": "pytorch_lightning\\utilities\\device_dtype_mixin.py", "file_new_name": "pytorch_lightning\\utilities\\device_dtype_mixin.py", "file_complexity": {"file_NLOC": "147", "file_CCN": "17", "file_NToken": "476"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "137", "deleted_lines": "138", "method_info": {"method_name": "float", "method_params": "self", "method_startline": "131", "method_endline": "138", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "26", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "158,159,160,161,162,163,164,165,166,167,168", "deleted_lines": null, "method_info": {"method_name": "__update_properties", "method_params": "self,None,None", "method_startline": "158", "method_endline": "168", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "35", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "108", "deleted_lines": "108,109", "method_info": {"method_name": "cuda", "method_params": "self,None", "method_startline": "95", "method_endline": "109", "method_complexity": {"method_NLOC": "15", "method_CCN": "1", "method_NToken": "45", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "160,161,162,163,164,165,166", "deleted_lines": null, "method_info": {"method_name": "__update_properties.apply_fn", "method_params": "module", "method_startline": "160", "method_endline": "166", "method_complexity": {"method_NLOC": "7", "method_CCN": "4", "method_NToken": "37", "method_nesting_level": "2"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "128", "deleted_lines": "129", "method_info": {"method_name": "type", "method_params": "self,str", "method_startline": "119", "method_endline": "129", "method_complexity": {"method_NLOC": "11", "method_CCN": "1", "method_NToken": "38", "method_nesting_level": "1"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "85,86,87,88,92", "deleted_lines": "85,86,87,88,89,90,91,92", "method_info": {"method_name": "to", "method_params": "self,args,kwargs", "method_startline": "32", "method_endline": "93", "method_complexity": {"method_NLOC": "61", "method_CCN": "1", "method_NToken": "61", "method_nesting_level": "1"}}}, "hunk_6": {"Ismethod": 1, "added_lines": "146", "deleted_lines": "147", "method_info": {"method_name": "double", "method_params": "self", "method_startline": "140", "method_endline": "147", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "26", "method_nesting_level": "1"}}}, "hunk_7": {"Ismethod": 1, "added_lines": "116", "deleted_lines": "117", "method_info": {"method_name": "cpu", "method_params": "self", "method_startline": "111", "method_endline": "117", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "29", "method_nesting_level": "1"}}}, "hunk_8": {"Ismethod": 1, "added_lines": "9,10,11,12", "deleted_lines": "9", "method_info": {"method_name": "__init__", "method_params": "self", "method_startline": "9", "method_endline": "12", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "31", "method_nesting_level": "1"}}}, "hunk_9": {"Ismethod": 1, "added_lines": "155", "deleted_lines": "156", "method_info": {"method_name": "half", "method_params": "self", "method_startline": "149", "method_endline": "156", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "26", "method_nesting_level": "1"}}}}}, "file_4": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "tests\\utilities\\test_dtype_device_mixin.py", "file_complexity": {"file_NLOC": "63", "file_CCN": "8", "file_NToken": "498"}}}}}