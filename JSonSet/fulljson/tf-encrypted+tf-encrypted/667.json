{"BR": {"BR_id": "667", "BR_author": "execl", "BRopenT": "2019-09-20T12:47:03Z", "BRcloseT": "2019-09-23T09:34:44Z", "BR_text": {"BRsummary": "Failure of div function", "BRdescription": "\n The div function in Pond protocol supports a public divisor y. The protocol handles y as calculate its inverse (1 / y.decode()) and multiple it with the dividend x. However this inverse is a tensor (after decode) and is incompatible with the lift function in mul.\n An error occurs:\n TypeError: Don't know how to lift <class 'tf_encrypted.protocol.pond.pond.PondPrivateVariable'>, <class 'tensorflow.python.framework.ops.Tensor'>\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "execl", "commentT": "2019-09-20T13:29:07Z", "comment_text": "\n \t\tOne fix would be to implement and use <denchmark-link:https://www.tensorflow.org/api_docs/python/tf/math/reciprocal>tf.reciprocal</denchmark-link>\n  for public tensors (eg decode, compute native reciprocal, encode).\n In the particular case reported here this will result in a multiplication between a private variable and a public tensor, which will be properly handled by lift and in turn mul.\n \t\t"}}}, "commit": {"commit_id": "ea7ab35f33cb58b10d3e6f1d599ad57b7a6b9294", "commit_author": "Morten Dahl", "commitT": "2019-09-23 11:34:43+02:00", "commit_complexity": {"commit_NLOC": "0.4897959183673469", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "tf_encrypted\\protocol\\pond\\pond.py", "file_new_name": "tf_encrypted\\protocol\\pond\\pond.py", "file_complexity": {"file_NLOC": "2700", "file_CCN": "372", "file_NToken": "20587"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "970", "deleted_lines": "967", "method_info": {"method_name": "div", "method_params": "self,x,y", "method_startline": "955", "method_endline": "974", "method_complexity": {"method_NLOC": "11", "method_CCN": "4", "method_NToken": "88", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "2935,2936,2937,2938,2939,2940,2941,2942,2943,2944,2945,2946,2947,2948,2949,2950,2951,2952,2953,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963,2964,2965,2966,2967,2968", "deleted_lines": null, "method_info": {"method_name": "_reciprocal_public", "method_params": "prot,x", "method_startline": "2935", "method_endline": "2968", "method_complexity": {"method_NLOC": "25", "method_CCN": "1", "method_NToken": "172", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "951,952", "deleted_lines": null, "method_info": {"method_name": "reciprocal", "method_params": "self,x", "method_startline": "951", "method_endline": "952", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "16", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "1849", "deleted_lines": "1846", "method_info": {"method_name": "unwrapped", "method_params": "self", "method_startline": "1822", "method_endline": "1852", "method_complexity": {"method_NLOC": "31", "method_CCN": "1", "method_NToken": "23", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tf_encrypted\\protocol\\pond\\pond_test.py", "file_new_name": "tf_encrypted\\protocol\\pond\\pond_test.py", "file_complexity": {"file_NLOC": "99", "file_CCN": "13", "file_NToken": "883"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114", "deleted_lines": null, "method_info": {"method_name": "test_public_division", "method_params": "self", "method_startline": "98", "method_endline": "114", "method_complexity": {"method_NLOC": "12", "method_CCN": "1", "method_NToken": "127", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "116,117,118,119,120,121,122,123,124,125,126,127,128,129,130", "deleted_lines": null, "method_info": {"method_name": "test_public_reciprocal", "method_params": "self", "method_startline": "116", "method_endline": "130", "method_complexity": {"method_NLOC": "10", "method_CCN": "1", "method_NToken": "99", "method_nesting_level": "1"}}}}}}}}