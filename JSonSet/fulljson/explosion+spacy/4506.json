{"BR": {"BR_id": "4506", "BR_author": "ines", "BRopenT": "2019-10-22T16:20:18Z", "BRcloseT": "2019-10-22T18:10:45Z", "BR_text": {"BRsummary": "Vectors.most_similar should always return 1.0 for identical vectors", "BRdescription": "\n We should probably hard-code the workaround for the imprecision, just like we do for the built-in similarity methods.\n <denchmark-h:h2>How to reproduce the behaviour</denchmark-h>\n \n \n \n \n spaCy/spacy/tests/vocab_vectors/test_vectors.py\n \n \n         Lines 144 to 154\n       in\n       74a19ae\n \n \n \n \n \n \n  @pytest.mark.xfail \n \n \n \n  def test_vectors_most_similar_identical(): \n \n \n \n  \"\"\"Test that most similar identical vectors are assigned a score of 1.0.\"\"\" \n \n \n \n  data = numpy.asarray([[4, 2, 2, 2], [4, 2, 2, 2], [1, 1, 1, 1]], dtype=\"f\") \n \n \n \n  v = Vectors(data=data, keys=[\"A\", \"B\", \"C\"]) \n \n \n \n  keys, _, scores = v.most_similar(numpy.asarray([[4, 2, 2, 2]], dtype=\"f\")) \n \n \n \n  assert scores[0][0] == 1.0 # not 1.0000002 \n \n \n \n  data = numpy.asarray([[1, 2, 3], [1, 2, 3], [1, 1, 1]], dtype=\"f\") \n \n \n \n  v = Vectors(data=data, keys=[\"A\", \"B\", \"C\"]) \n \n \n \n  keys, _, scores = v.most_similar(numpy.asarray([[1, 2, 3]], dtype=\"f\")) \n \n \n \n  assert scores[0][0] == 1.0 # not 0.9999999 \n \n \n \n \n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ines", "commentT": "2019-10-22T17:25:56Z", "comment_text": "\n \t\tJust out of curiosity - why is this a requirement? Shouldn't equality on real values always be tested with some margin?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ines", "commentT": "2019-10-22T18:03:06Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/svlandeg>@svlandeg</denchmark-link>\n  It's not really a requirement, but when we didn't clip the values for the  methods, people found this pretty confusing (e.g. when  wasn't ). And since we're doing it this way for other similarity comparisons, we might as well do it for the .\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "ines", "commentT": "2019-11-21T18:54:50Z", "comment_text": "\n \t\tThis thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n \t\t"}}}, "commit": {"commit_id": "9489c5f6b2e58f2de4f9ff463982b1b9430a5c7f", "commit_author": "Matthew Honnibal", "commitT": "2019-10-22 20:10:42+02:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "spacy\\tests\\vocab_vectors\\test_vectors.py", "file_new_name": "spacy\\tests\\vocab_vectors\\test_vectors.py", "file_complexity": {"file_NLOC": "239", "file_CCN": "46", "file_NToken": "2835"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "317", "deleted_lines": null, "method_info": {"method_name": "test_vocab_prune_vectors", "method_params": "", "method_startline": "300", "method_endline": "317", "method_complexity": {"method_NLOC": "17", "method_CCN": "1", "method_NToken": "208", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "spacy\\vectors.pyx", "file_new_name": "spacy\\vectors.pyx", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "347,349,350,351,352", "deleted_lines": "347"}}}}}}