{"BR": {"BR_id": "1591", "BR_author": "sdmonov", "BRopenT": "2017-11-16T14:29:09Z", "BRcloseT": "2018-01-14T13:37:38Z", "BR_text": {"BRsummary": "-march=native option makes gcc compiler to fail on Power8 system with Ubuntu", "BRdescription": "\n My Environment:\n \n Operating System: Ubuntu 16.04.3 LTS on Power8\n Python Version Used: Python 3.6.2 |Anaconda, Inc.| (default, Sep 15 2017, 20:38:23) [GCC 4.8.4] on linux\n spaCy Version Used: Master from 11/16/2017 (commit a3d4dd1)\n gcc version: 5.4.0 20160609 (Ubuntu/IBM 5.4.0-6ubuntu1~16.04.5)\n System Information: PowerNV 8335-GTB with POWER8NVL CPU\n \n Recent commit <denchmark-link:https://github.com/explosion/spaCy/commit/79fcf8576aa077749c91315d102c0d70d888ca60>79fcf85</denchmark-link>\n  added  to the compile options for gcc/clang in setup.py. The problem is that  is not supported by all the gcc compilers and as far as I know some older versions of clang too. I've tested it with  on . Also tested  ARM cross compiler on x86 with Ubuntu 14.04.\n This is the output of the ppc64le:\n <denchmark-code>............\n copying spacy/tokens/doc.pyx -> build/lib.linux-ppc64le-3.6/spacy/tokens\n copying spacy/tokens/token.pyx -> build/lib.linux-ppc64le-3.6/spacy/tokens\n copying spacy/tokens/span.pxd -> build/lib.linux-ppc64le-3.6/spacy/tokens\n copying spacy/tokens/token.pxd -> build/lib.linux-ppc64le-3.6/spacy/tokens\n copying spacy/tokens/__init__.pxd -> build/lib.linux-ppc64le-3.6/spacy/tokens\n copying spacy/tokens/doc.pxd -> build/lib.linux-ppc64le-3.6/spacy/tokens\n copying spacy/tests/tokenizer/sun.txt -> build/lib.linux-ppc64le-3.6/spacy/tests/tokenizer\n running build_ext\n building 'spacy.parts_of_speech' extension\n creating build/temp.linux-ppc64le-3.6\n creating build/temp.linux-ppc64le-3.6/spacy\n gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -I/home/user/miniconda3/envs/spacy/include/python3.6m -I/home/user/AI/spaCy/include -I/home/user/miniconda3/envs/spacy/include/python3.6m -c spacy/parts_of_speech.cpp -o build/temp.linux-ppc64le-3.6/spacy/parts_of_speech.o -O3 -Wno-strict-prototypes -Wno-unused-function -march=native\n gcc: error: unrecognized command line option \u2018-march=native\u2019\n error: command 'gcc' failed with exit status 1\n </denchmark-code>\n \n After removing the -march=native option, spaCy builds and runs just fine.\n Here is the output from the arm cross compiler.\n <denchmark-code>................\n writing top-level names to spacy.egg-info/top_level.txt\n reading manifest file 'spacy.egg-info/SOURCES.txt'\n reading manifest template 'MANIFEST.in'\n writing manifest file 'spacy.egg-info/SOURCES.txt'\n installing library code to build/bdist.linux-x86_64/egg\n running install_lib\n running build_py\n running build_ext\n building 'spacy.parts_of_speech' extension\n arm-linux-gnueabihf-gcc -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -I/home/moni/miniconda3/envs/pytorch/include/python3.6m -I/home/moni/src/ibm/AI/spaCy/include -I/home/moni/miniconda3/envs/pytorch/include/python3.6m -c spacy/parts_of_speech.cpp -o build/temp.linux-x86_64-3.6/spacy/parts_of_speech.o -O3 -Wno-strict-prototypes -Wno-unused-function -march=native\n cc1plus: error: unrecognized argument in option \u2018-march=native\u2019\n cc1plus: note: valid arguments to \u2018-march=\u2019 are: armv2 armv2a armv3 armv3m armv4 armv4t armv5 armv5e armv5t armv5te armv6 armv6-m armv6j armv6k armv6s-m armv6t2 armv6z armv6zk armv7 armv7-a armv7-m armv7-r armv7e-m armv8-a armv8-a+crc iwmmxt iwmmxt2 native\n cc1plus: warning: command line option \u2018-Wno-strict-prototypes\u2019 is valid for C/ObjC but not for C++ [enabled by default]\n error: command 'arm-linux-gnueabihf-gcc' failed with exit status 1\n </denchmark-code>\n \n I guess the best solution would be to add code to detect the best CPU flags and add them as -march parameters or simply detect if -march=native is supported by the compiler and only use it in such case.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "sdmonov", "commentT": "2017-11-16T15:17:43Z", "comment_text": "\n \t\tThanks; very valuable report and analysis.\n I think spaCy should not set -march=native. There are a few dot products implemented as basic loops. This is fine so long as the compiler vectorises the loops reasonably well, but I see that cross-platform support is going to be a real problem. Instead of trying to get this right in spaCy, it'll be better to call into a library.\n If we get rid of these dot products we can also compile with -O2, to hopefully reduce compile times, which have been creeping upwards. The long compilation is starting to get quite annoying, and there was a report of an out-of-memory error on a 1gb VM.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "sdmonov", "commentT": "2017-11-16T20:16:10Z", "comment_text": "\n \t\tSomewhat related, the default  seems to cause problems in the conda packages: <denchmark-link:https://github.com/conda-forge/spacy-feedstock/issues/24>conda-forge/spacy-feedstock#24</denchmark-link>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "sdmonov", "commentT": "2017-11-18T17:16:07Z", "comment_text": "\n \t\tLooks like the best would be the if compiler CPU optimization flags can be provided through env variable for example in case of binaries  generation or detected using a library if not provided for local installs optimization.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "sdmonov", "commentT": "2017-12-11T21:01:34Z", "comment_text": "\n \t\tI think this might cause <denchmark-link:https://github.com/explosion/spaCy/issues/1589>#1589</denchmark-link>\n \n I was building a Docker image with spaCy with a different set of supported CPU instructions to the target set, which results in Illegal instruction. It would seem -march=native causes this to be the case.\n I think the built library should be largely independent of target platform. For now, the workaround is simply to build the Docker image on the target platform (instead of \"anywhere\"!)\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "sdmonov", "commentT": "2018-01-10T22:16:42Z", "comment_text": "\n \t\tWe weren't able to use spaCy 2.0.5 on EMR because of this issue. We had to publish an internal version that reverses commit <denchmark-link:https://github.com/explosion/spaCy/commit/a3d4dd1a5d1ea827761bcf04302762936d0e143c>a3d4dd1</denchmark-link>\n  in order to avoid the  error at import time. I second folks suggesting that the  option should not be the default bdist option.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "sdmonov", "commentT": "2018-01-14T13:35:59Z", "comment_text": "\n \t\tThanks all for the report. I've now removed the march=native flag.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "sdmonov", "commentT": "2018-04-12T18:17:52Z", "comment_text": "\n \t\tThe closest equivalent option for Power systems is currently . See <denchmark-link:https://gcc.gnu.org/onlinedocs/gcc/RS_002f6000-and-PowerPC-Options.html>these gcc docs</denchmark-link>\n  for details.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "sdmonov", "commentT": "2018-05-12T18:57:54Z", "comment_text": "\n \t\tThis thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n \t\t"}}}, "commit": {"commit_id": "2e449c1fbfd1fdb948da6056c3694a23de1bdf46", "commit_author": "Matthew Honnibal", "commitT": "2018-01-14 14:34:36+01:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "setup.py", "file_new_name": "setup.py", "file_complexity": {"file_NLOC": "180", "file_CCN": "22", "file_NToken": "994"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "49,50", "deleted_lines": "49,50,51"}}}}}}