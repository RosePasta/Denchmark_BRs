{"BR": {"BR_id": "993", "BR_author": "dcferreira", "BRopenT": "2020-08-14T09:43:58Z", "BRcloseT": "2020-09-13T08:19:35Z", "BR_text": {"BRsummary": "DataframeInput does not handle indices", "BRdescription": "\n Describe the bug\n I expected DataframeInput/DataframeOutput to keep dataframe indices, but this does not happen.\n To Reproduce\n I'll take the example code I've been using for other bug reports:\n \n Server:\n \n import bentoml\n from bentoml.adapters import DataframeInput, DataframeOutput\n \n @bentoml.env(auto_pip_dependencies=True)\n class TestSizer(bentoml.BentoService):\n     @bentoml.api(input=DataframeInput(input_dtypes={\"text\": \"str\"}),\n                  output=DataframeOutput())\n     def size(self, df):\n         if 'text' not in df:\n             raise ValueError('The Dataframe needs a column named \"text\".')\n         return df.text.apply(len).to_frame()\n \n if __name__ == '__main__':\n     sizer = TestSizer()\n     sizer.save()\n \n Client:\n \n import pandas as pd\n import requests\n \n class TextClient:\n     def __init__(self, server_url: str):\n         self.server_url = server_url\n \n     def size(self, df: pd.DataFrame) -> pd.DataFrame:\n         if 'text' not in df:\n             raise ValueError('The given Dataframe requires a column named \"html\".')\n         resp = requests.post(self.server_url, headers={'Content-Type': 'application/json'},\n                              data=df.to_json())\n         if resp.status_code != 200:\n             raise ValueError('Bad reply!')\n         return pd.DataFrame(data=resp.json(), index=df.index)\n \n if __name__ == '__main__':\n     client = TextClient('http://127.0.0.1:5000/size')\n     ex1 = pd.DataFrame({\"text\": [\"this is a text\", \"and another one\", \"\"]}, index=[\"14\", \"15\", \"0\"])\n     print(client.size(ex1))\n Notice the indices in the dataframe of the example correspond to the length of the strings, for easier comparison to the correct result.\n Expected behavior\n The expected output here would be:\n <denchmark-code>    text\n 14   14\n 15   15\n 0     0\n </denchmark-code>\n \n However, in my machine I get:\n <denchmark-code>    text\n 14     0\n 15    14\n 0     15\n </denchmark-code>\n \n If I replace return pd.DataFrame(data=resp.json(), index=df.index) in the client by return pd.DataFrame(data=resp.json()), I get:\n <denchmark-code>   text\n 0     0\n 1    14\n 2    15\n </denchmark-code>\n \n which gives some insight as to why this happens.\n The issue here is that read_dataframes_from_json_n_csv (in bentoml/utils/dataframe_util.py) gets rid of indices.\n Workaround\n There is a way to work around this, by moving the index to a column before sending it to the server, and making sure the server also gives the index in a column.\n For this example, these classes work around this issue:\n \n Server:\n \n class TestSizer(bentoml.BentoService):\n     @bentoml.api(input=DataframeInput(input_dtypes={\"text\": \"str\"}, orient='columns'),\n                  output=DataframeOutput())\n     def size(self, df):\n         if 'text' not in df:\n             raise ValueError('The Dataframe needs a column named \"text\".')\n         return df.set_index('index').fillna('').text.apply(len).to_frame().reset_index()\n \n Client:\n \n class TextClient:\n     def __init__(self, server_url: str):\n         self.server_url = server_url\n \n     def size(self, df: pd.DataFrame) -> pd.DataFrame:\n         if 'text' not in df:\n             raise ValueError('The given Dataframe requires a column named \"html\".')\n         resp = requests.post(self.server_url, headers={'Content-Type': 'application/json'},\n                              data=df.reset_index().to_json(orient='columns'))\n         if resp.status_code != 200:\n             raise ValueError('Bad reply!')\n         return pd.DataFrame(data=resp.json()).set_index('index')\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "dcferreira", "commentT": "2020-08-14T14:51:54Z", "comment_text": "\n \t\trequests.post(self.server_url, headers={'Content-Type': 'application/json'},\n                          data=df.to_json(orient=\"records\"))\n would do the trick.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "dcferreira", "commentT": "2020-09-13T08:19:35Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/bojiang>@bojiang</denchmark-link>\n  's suggestion should resolve this problem.  With the new DataframeInput release, we recommend always specify the orient in the code, e.g. \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "dcferreira", "commentT": "2020-11-05T15:34:04Z", "comment_text": "\n \t\tThis issue seems to be back, unless I'm misunderstanding something.\n Updated server to bentoml 0.9.2:\n import bentoml\n from bentoml.adapters import DataframeInput, DataframeOutput\n \n \n @bentoml.env(auto_pip_dependencies=True)\n class TestSizer(bentoml.BentoService):\n     @bentoml.api(input=DataframeInput(columns=['text'], dtype={\"text\": \"str\"}, orient='columns'),\n                  batch=True,\n                  output=DataframeOutput())\n     def predict(self, df):\n         if 'text' not in df:\n             raise ValueError('The Dataframe needs a column named \"text\".')\n         print(df.index)\n         return df.fillna('').text.apply(len)\n \n \n if __name__ == '__main__':\n     sizer = TestSizer()\n     sizer.save()\n and client:\n import pandas as pd\n import requests\n \n \n class TextClient:\n     def __init__(self, server_url: str):\n         self.server_url = server_url\n \n     def size(self, df: pd.DataFrame) -> pd.DataFrame:\n         if 'text' not in df:\n             raise ValueError('The given Dataframe requires a column named \"text\".')\n         resp = requests.post(self.server_url, headers={'Content-Type': 'application/json'},\n                              data=df.to_json(orient='columns'))\n         if resp.status_code != 200:\n             raise ValueError('Bad reply!')\n         return pd.DataFrame(resp.json())\n \n \n if __name__ == '__main__':\n     client = TextClient('http://127.0.0.1:5000/predict')\n     ex1 = pd.DataFrame({\"text\": [\"this is a text\", \"and another one\", \"\"]}, index=[\"14\", \"15\", \"0\"])\n     print(client.size(ex1))\n Notice that orient='columns' is specified both in the server, and in the client request.\n Expected output:\n <denchmark-code>   text\n 14    14\n 15    15\n 0      0\n </denchmark-code>\n \n Actual output:\n <denchmark-code>   text\n 0    14\n 1    15\n 2     0\n </denchmark-code>\n \n The raw JSON response is also a bit weird looking, ignoring the index completely:\n <denchmark-code>[{'text': 14}, {'text': 15}, {'text': 0}]\n </denchmark-code>\n \n Am I misunderstanding something, or is this just not expected behavior?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "dcferreira", "commentT": "2020-11-06T03:44:05Z", "comment_text": "\n \t\tHi.\n Using DataframeInput, we assume that each row of a frame is a piece of input data. A full data frame represents a batch of input data. Under this assumption, the values of indices should not be considered in inference.\n \n The raw JSON response is also a bit weird looking, ignoring the index completely\n \n It is not that weird, it is how records oriented frame looks like. (pandas.Dataframe.to_json(orient=\"records\"))\n DataframeInput is designed to ignore the index, so we recommend users to use the orient records as input.\n Can you describe why you need the indices?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "dcferreira", "commentT": "2020-11-06T09:03:58Z", "comment_text": "\n \t\tAh ok, so this is expected behavior.\n As for why I need it, generally speaking I want the ability to treat rows differently, depending on their content.\n For example, say I have an NLP classifier, and a column with text.\n Some tensorflow text models break if you give it an empty string.\n So I'd want to remove the empty strings before sending them to the tf model.\n In my response I wouldn't want to include the rows that weren't classified, so the output shape would be different than the input shape.\n In my usecase I'm also chaining different models together, depending on the content of the row, until one model has a satisfying result.\n This means that each row can go through a different set of models.\n I'm doing this with multiple bentoml services linked together.\n For this, while it would be feasible to use ranged indices in each service, it would be more convenient (for me as the programmer) to have the same row having the same index in all models.\n Anyway, I can use the workaround of having the index as a column.\n It's just that in my head, I expected indices to work automagically with the pandas adapters.\n Thanks <denchmark-link:https://github.com/bojiang>@bojiang</denchmark-link>\n ! :)\n \t\t"}}}, "commit": {"commit_id": "a3f45e4205f726ccdbb6a57246ad0796e7c97773", "commit_author": "bojiang", "commitT": "2020-09-04 13:23:41+08:00", "commit_complexity": {"commit_NLOC": "0.5376344086021505", "commit_CCN": "0.4838709677419355", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "bentoml\\adapters\\base_output.py", "file_new_name": "bentoml\\adapters\\base_output.py", "file_complexity": {"file_NLOC": "66", "file_CCN": "8", "file_NToken": "265"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "16,19,23,32,33,34,35,36,37,38,39,40,41,42,43", "deleted_lines": "16,21,22,32,33,34,35,36"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 10, "file_old_name": "bentoml\\adapters\\dataframe_input.py", "file_new_name": "bentoml\\adapters\\dataframe_input.py", "file_complexity": {"file_NLOC": "161", "file_CCN": "20", "file_NToken": "822"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "61,64,65,66", "deleted_lines": "61,62,63,64,65,66", "method_info": {"method_name": "__init__", "method_params": "self,orient,typ,input_dtypes,is_batch_input,base_kwargs", "method_startline": "60", "method_endline": "66", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "23", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "147,148,149,150,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167", "deleted_lines": "147,148,149,150,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167", "method_info": {"method_name": "handle_request", "method_params": "self,Request", "method_startline": "147", "method_endline": "167", "method_complexity": {"method_NLOC": "18", "method_CCN": "5", "method_NToken": "119", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "118,119,120,121,122,123,124,127,128,129,130,131,132,133,134,135,136,137,138", "deleted_lines": "128,129,130,131,133,134,135,136,137,138", "method_info": {"method_name": "request_schema", "method_params": "self", "method_startline": "116", "method_endline": "138", "method_complexity": {"method_NLOC": "23", "method_CCN": "3", "method_NToken": "129", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": null, "deleted_lines": "228,229,230,231,232,233,234,235,236,237,238,240,241,242,243,244,245", "method_info": {"method_name": "handle_aws_lambda_event", "method_params": "self,event,func", "method_startline": "228", "method_endline": "245", "method_complexity": {"method_NLOC": "15", "method_CCN": "5", "method_NToken": "110", "method_nesting_level": "1"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "164,165", "deleted_lines": "164,165", "method_info": {"method_name": "extract_user_func_args", "method_params": "self", "method_startline": "164", "method_endline": "165", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "13", "method_nesting_level": "1"}}}, "hunk_5": {"Ismethod": 1, "added_lines": null, "deleted_lines": "169,170", "method_info": {"method_name": "handle_batch_request", "method_params": "self,func", "method_startline": "169", "method_endline": "170", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "12", "method_nesting_level": "1"}}}, "hunk_6": {"Ismethod": 1, "added_lines": "189,190,191,193,194,195", "deleted_lines": "189,190,191,192,193,194,195,197,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,222,223,224,225,226", "method_info": {"method_name": "handle_cli", "method_params": "self,args,func", "method_startline": "189", "method_endline": "226", "method_complexity": {"method_NLOC": "33", "method_CCN": "9", "method_NToken": "209", "method_nesting_level": "1"}}}, "hunk_7": {"Ismethod": 1, "added_lines": "154,155,156,157,158,159,160,161,162", "deleted_lines": "154,155,156,157,158,159,160,161,162", "method_info": {"method_name": "_detect_format", "method_params": "cls,InferenceTask", "method_startline": "154", "method_endline": "162", "method_complexity": {"method_NLOC": "9", "method_CCN": "4", "method_NToken": "64", "method_nesting_level": "1"}}}, "hunk_8": {"Ismethod": 1, "added_lines": "140,141,142,143,144,147,148,149,150", "deleted_lines": "140,141,144,145,146,147,148,149,150", "method_info": {"method_name": "from_aws_lambda_event", "method_params": "self,AwsLambdaEvent", "method_startline": "140", "method_endline": "151", "method_complexity": {"method_NLOC": "11", "method_CCN": "2", "method_NToken": "103", "method_nesting_level": "1"}}}, "hunk_9": {"Ismethod": 1, "added_lines": "59", "deleted_lines": "58,59", "method_info": {"method_name": "__init__", "method_params": "self,orient,typ,columns,input_dtypes,base_kwargs", "method_startline": "58", "method_endline": "59", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "23", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 7, "file_old_name": "bentoml\\adapters\\dataframe_output.py", "file_new_name": "bentoml\\adapters\\dataframe_output.py", "file_complexity": {"file_NLOC": "64", "file_CCN": "7", "file_NToken": "316"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "43", "deleted_lines": "42,45,46", "method_info": {"method_name": "__init__", "method_params": "self,output_orient,kwargs", "method_startline": "42", "method_endline": "49", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "39", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "66,67,68,69,70,71", "deleted_lines": "66,67,68,69,70,71", "method_info": {"method_name": "to_batch_response", "method_params": "self,result_conc,slices,fallbacks,None", "method_startline": "66", "method_endline": "71", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "23", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "63,64", "deleted_lines": null, "method_info": {"method_name": "pack_user_func_return_value", "method_params": "self,return_result", "method_startline": "63", "method_endline": "64", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "13", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "59", "deleted_lines": null, "method_info": {"method_name": "pip_dependencies", "method_params": "self", "method_startline": "57", "method_endline": "61", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "10", "method_nesting_level": "1"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "27", "deleted_lines": "15,16,17,18,19,20,22", "method_info": {"method_name": "df_to_json", "method_params": "result,pandas_dataframe_orient", "method_startline": "15", "method_endline": "27", "method_complexity": {"method_NLOC": "10", "method_CCN": "3", "method_NToken": "72", "method_nesting_level": "0"}}}, "hunk_5": {"Ismethod": 1, "added_lines": null, "deleted_lines": "99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121", "method_info": {"method_name": "to_cli", "method_params": "self,result,args", "method_startline": "99", "method_endline": "121", "method_complexity": {"method_NLOC": "16", "method_CCN": "2", "method_NToken": "93", "method_nesting_level": "1"}}}, "hunk_6": {"Ismethod": 1, "added_lines": null, "deleted_lines": "123,124,125,126,127,128,129,130,131,132,133,134,135", "method_info": {"method_name": "to_aws_lambda_event", "method_params": "self,result,event", "method_startline": "123", "method_endline": "135", "method_complexity": {"method_NLOC": "9", "method_CCN": "2", "method_NToken": "57", "method_nesting_level": "1"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "bentoml\\adapters\\file_input.py", "file_new_name": "bentoml\\adapters\\file_input.py", "file_complexity": {"file_NLOC": "116", "file_CCN": "9", "file_NToken": "430"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "17", "deleted_lines": "17,18"}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "bentoml\\adapters\\image_input.py", "file_new_name": "bentoml\\adapters\\image_input.py", "file_complexity": {"file_NLOC": "109", "file_CCN": "5", "file_NToken": "351"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "15,17,22", "deleted_lines": "15,17,18,19,25,26"}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "bentoml\\adapters\\json_output.py", "file_new_name": "bentoml\\adapters\\json_output.py", "file_complexity": {"file_NLOC": "107", "file_CCN": "10", "file_NToken": "473"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "16,17,19,20,21,22,23,25,29", "deleted_lines": "15,17,22,23,27,28,29"}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "bentoml\\adapters\\legacy_image_input.py", "file_new_name": "bentoml\\adapters\\legacy_image_input.py", "file_complexity": {"file_NLOC": "109", "file_CCN": "11", "file_NToken": "509"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "16", "deleted_lines": "16"}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "bentoml\\adapters\\multi_file_input.py", "file_new_name": "bentoml\\adapters\\multi_file_input.py", "file_complexity": {"file_NLOC": "122", "file_CCN": "18", "file_NToken": "553"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "16,18,21,23,32,36,38,39", "deleted_lines": "16,17,20,22,25,26,34,38,40,41,53"}}}, "file_8": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "bentoml\\adapters\\utils.py", "file_new_name": "bentoml\\adapters\\utils.py", "file_complexity": {"file_NLOC": "66", "file_CCN": "20", "file_NToken": "422"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": null, "deleted_lines": "4"}}}, "file_9": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "bentoml\\service.py", "file_new_name": "bentoml\\service.py", "file_complexity": {"file_NLOC": "521", "file_CCN": "107", "file_NToken": "2673"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "216,223,224,227", "deleted_lines": "215,216,219", "method_info": {"method_name": "infer", "method_params": "self", "method_startline": "210", "method_endline": "241", "method_complexity": {"method_NLOC": "25", "method_CCN": "8", "method_NToken": "174", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182", "deleted_lines": "163,171,172,173", "method_info": {"method_name": "user_func.wrapped_func", "method_params": "args,kwargs", "method_startline": "162", "method_endline": "182", "method_complexity": {"method_NLOC": "21", "method_CCN": "8", "method_NToken": "115", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "153,156,157,159,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182", "deleted_lines": "157,160,161,163,171,172,173", "method_info": {"method_name": "user_func", "method_params": "self", "method_startline": "148", "method_endline": "184", "method_complexity": {"method_NLOC": "10", "method_CCN": "2", "method_NToken": "48", "method_nesting_level": "1"}}}}}, "file_10": {"file_change_type": "MODIFY", "file_Nmethod": 8, "file_old_name": "bentoml\\types.py", "file_new_name": "bentoml\\types.py", "file_complexity": {"file_NLOC": "162", "file_CCN": "21", "file_NToken": "968"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "82,83,84,85,86,87,88,89,90,91", "deleted_lines": "82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100", "method_info": {"method_name": "parse_raw_headers", "method_params": "cls,str", "method_startline": "82", "method_endline": "100", "method_complexity": {"method_NLOC": "17", "method_CCN": "3", "method_NToken": "118", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "49,50,51,52", "deleted_lines": null, "method_info": {"method_name": "get", "method_params": "self,key,default", "method_startline": "49", "method_endline": "52", "method_complexity": {"method_NLOC": "4", "method_CCN": "2", "method_NToken": "31", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "43,44,45,46,47", "deleted_lines": "43,44,45,46,47", "method_info": {"method_name": "__init__", "method_params": "self,args,kwargs", "method_startline": "43", "method_endline": "47", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "38", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91", "deleted_lines": "80,81,82,83,84,85,86,87,88,89,90,91", "method_info": {"method_name": "parse", "method_params": "cls,str", "method_startline": "69", "method_endline": "91", "method_complexity": {"method_NLOC": "21", "method_CCN": "4", "method_NToken": "146", "method_nesting_level": "1"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "106", "deleted_lines": null, "method_info": {"method_name": "parsed_headers", "method_params": "self", "method_startline": "105", "method_endline": "106", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "16", "method_nesting_level": "1"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "59,60,61,62", "deleted_lines": "62", "method_info": {"method_name": "__len__", "method_params": "self", "method_startline": "59", "method_endline": "62", "method_complexity": {"method_NLOC": "4", "method_CCN": "2", "method_NToken": "21", "method_nesting_level": "1"}}}, "hunk_6": {"Ismethod": 1, "added_lines": "54,55,56,57", "deleted_lines": null, "method_info": {"method_name": "__getitem__", "method_params": "self,key", "method_startline": "54", "method_endline": "57", "method_complexity": {"method_NLOC": "4", "method_CCN": "2", "method_NToken": "24", "method_nesting_level": "1"}}}, "hunk_7": {"Ismethod": 1, "added_lines": "64,65", "deleted_lines": null, "method_info": {"method_name": "__bool__", "method_params": "self", "method_startline": "64", "method_endline": "65", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "12", "method_nesting_level": "1"}}}}}, "file_11": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "bentoml\\utils\\__init__.py", "file_new_name": "bentoml\\utils\\__init__.py", "file_complexity": {"file_NLOC": "54", "file_CCN": "12", "file_NToken": "368"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "22", "deleted_lines": "22"}}}, "file_12": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "bentoml\\utils\\csv.py", "file_complexity": {"file_NLOC": "51", "file_CCN": "28", "file_NToken": "373"}}, "file_13": {"file_change_type": "MODIFY", "file_Nmethod": 21, "file_old_name": "bentoml\\utils\\dataframe_util.py", "file_new_name": "bentoml\\utils\\dataframe_util.py", "file_complexity": {"file_NLOC": "180", "file_CCN": "68", "file_NToken": "1238"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "190,191,192,193,194,195,203,204,205,206,207,208,209,210,211,212", "deleted_lines": "190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212", "method_info": {"method_name": "_guess_orient", "method_params": "table", "method_startline": "190", "method_endline": "212", "method_complexity": {"method_NLOC": "23", "method_CCN": "19", "method_NToken": "187", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": null, "deleted_lines": "284,285,286,287,288,289,290,291,292,293,294,295,296", "method_info": {"method_name": "_gen_slice", "method_params": "ids", "method_startline": "284", "method_endline": "296", "method_complexity": {"method_NLOC": "12", "method_CCN": "4", "method_NToken": "61", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "162,163,164,165,167,168,169,170,171,172,174,177,178,179,180,181,182,183,184,185,186", "deleted_lines": "162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186", "method_info": {"method_name": "_dataframe_csv_from_input", "method_params": "str,fmt,orient,state", "method_startline": "162", "method_endline": "186", "method_complexity": {"method_NLOC": "25", "method_CCN": "10", "method_NToken": "148", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": null, "deleted_lines": "300", "method_info": {"method_name": "read_dataframes_from_json_n_csv", "method_params": "str", "method_startline": "299", "method_endline": "300", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "22", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "85,86,87,89", "deleted_lines": "85,86,87,88,89", "method_info": {"method_name": "_from_json_columns", "method_params": "DataFrameState,dict", "method_startline": "85", "method_endline": "89", "method_complexity": {"method_NLOC": "5", "method_CCN": "5", "method_NToken": "72", "method_nesting_level": "0"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "69,70", "deleted_lines": "69,70", "method_info": {"method_name": "__init__", "method_params": "self,str,None", "method_startline": "69", "method_endline": "70", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "21", "method_nesting_level": "1"}}}, "hunk_6": {"Ismethod": 1, "added_lines": "46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65", "deleted_lines": "48,49,50,51,53,54,55,56,59,60,61,64,65", "method_info": {"method_name": "guess_orient", "method_params": "table,strict", "method_startline": "46", "method_endline": "65", "method_complexity": {"method_NLOC": "20", "method_CCN": "10", "method_NToken": "109", "method_nesting_level": "0"}}}, "hunk_7": {"Ismethod": 1, "added_lines": "73,74,75,77", "deleted_lines": "74,75,76,77", "method_info": {"method_name": "_from_json_records", "method_params": "DataFrameState,list", "method_startline": "73", "method_endline": "77", "method_complexity": {"method_NLOC": "5", "method_CCN": "5", "method_NToken": "62", "method_nesting_level": "0"}}}, "hunk_8": {"Ismethod": 1, "added_lines": "59,60,61,62,63,64,65", "deleted_lines": "59,60,61,64,65", "method_info": {"method_name": "_from_json_values", "method_params": "DataFrameState,list", "method_startline": "59", "method_endline": "65", "method_complexity": {"method_NLOC": "6", "method_CCN": "3", "method_NToken": "40", "method_nesting_level": "0"}}}, "hunk_9": {"Ismethod": 1, "added_lines": "80,81,82", "deleted_lines": null, "method_info": {"method_name": "_from_json_values", "method_params": "DataFrameState,list", "method_startline": "80", "method_endline": "82", "method_complexity": {"method_NLOC": "3", "method_CCN": "2", "method_NToken": "21", "method_nesting_level": "0"}}}, "hunk_10": {"Ismethod": 1, "added_lines": null, "deleted_lines": "32,33,34", "method_info": {"method_name": "__init__", "method_params": "self,None,int", "method_startline": "32", "method_endline": "34", "method_complexity": {"method_NLOC": "3", "method_CCN": "2", "method_NToken": "33", "method_nesting_level": "1"}}}, "hunk_11": {"Ismethod": 1, "added_lines": "177,178,179,180,181,182,183,184,185,186", "deleted_lines": "176,177,178,179,180,181,182,183,184,185,186", "method_info": {"method_name": "_detect_orient", "method_params": "table", "method_startline": "176", "method_endline": "186", "method_complexity": {"method_NLOC": "10", "method_CCN": "5", "method_NToken": "60", "method_nesting_level": "0"}}}, "hunk_12": {"Ismethod": 1, "added_lines": "117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133", "deleted_lines": "113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133", "method_info": {"method_name": "_csv_split", "method_params": "string,delimiter,maxsplit", "method_startline": "113", "method_endline": "133", "method_complexity": {"method_NLOC": "6", "method_CCN": "3", "method_NToken": "50", "method_nesting_level": "0"}}}, "hunk_13": {"Ismethod": 1, "added_lines": "190,191,192,193,194", "deleted_lines": "189,190,191,192,193,194", "method_info": {"method_name": "read_dataframes_from_json_n_csv", "method_params": "str,columns,dtype", "method_startline": "189", "method_endline": "194", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "30", "method_nesting_level": "0"}}}, "hunk_14": {"Ismethod": 1, "added_lines": "93,94,95,96,97,98,99", "deleted_lines": "92,93,97,98,99", "method_info": {"method_name": "_from_json_index", "method_params": "DataFrameState,dict", "method_startline": "92", "method_endline": "99", "method_complexity": {"method_NLOC": "8", "method_CCN": "7", "method_NToken": "103", "method_nesting_level": "0"}}}, "hunk_15": {"Ismethod": 1, "added_lines": "117,119,120,121,122,123,124,125,126,127,128,129,130", "deleted_lines": "117,118,119,120,121,122,123,124,125,126,127,128,129,130", "method_info": {"method_name": "_csv_split._iter_line", "method_params": "line", "method_startline": "117", "method_endline": "130", "method_complexity": {"method_NLOC": "14", "method_CCN": "7", "method_NToken": "80", "method_nesting_level": "2"}}}, "hunk_16": {"Ismethod": 1, "added_lines": null, "deleted_lines": "227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,253,254,255,256,258,259,260,261,263,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281", "method_info": {"method_name": "_dataframe_csv_from_input", "method_params": "tables,content_types,orients", "method_startline": "227", "method_endline": "281", "method_complexity": {"method_NLOC": "48", "method_CCN": "18", "method_NToken": "265", "method_nesting_level": "0"}}}, "hunk_17": {"Ismethod": 1, "added_lines": "136,137,138,139,140,141", "deleted_lines": "136,137,138,139,140,141", "method_info": {"method_name": "_csv_unquote", "method_params": "string", "method_startline": "136", "method_endline": "141", "method_complexity": {"method_NLOC": "6", "method_CCN": "3", "method_NToken": "49", "method_nesting_level": "0"}}}, "hunk_18": {"Ismethod": 1, "added_lines": "144,145,146,147", "deleted_lines": "144,145,146,147,148,149,150,151", "method_info": {"method_name": "_csv_quote", "method_params": "td", "method_startline": "144", "method_endline": "151", "method_complexity": {"method_NLOC": "8", "method_CCN": "7", "method_NToken": "64", "method_nesting_level": "0"}}}, "hunk_19": {"Ismethod": 1, "added_lines": "103,104,105,106,107,108,109,110,111,112", "deleted_lines": "102,103,104,105,106,107,108,109,110,111,112", "method_info": {"method_name": "_from_json_split", "method_params": "DataFrameState,dict", "method_startline": "102", "method_endline": "112", "method_complexity": {"method_NLOC": "10", "method_CCN": "7", "method_NToken": "91", "method_nesting_level": "0"}}}, "hunk_20": {"Ismethod": 1, "added_lines": "117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147", "deleted_lines": "115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147", "method_info": {"method_name": "_from_csv_without_index", "method_params": "DataFrameState", "method_startline": "115", "method_endline": "147", "method_complexity": {"method_NLOC": "32", "method_CCN": "17", "method_NToken": "196", "method_nesting_level": "0"}}}}}, "file_14": {"file_change_type": "RENAME", "file_Nmethod": 0, "file_old_name": "tests\\adapters\\test_dataframe_handler.py", "file_new_name": "tests\\adapters\\test_dataframe_input.py", "file_complexity": {"file_NLOC": "185", "file_CCN": "31", "file_NToken": "1386"}}, "file_15": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\adapters\\test_json_input.py", "file_new_name": "tests\\adapters\\test_json_input.py", "file_complexity": {"file_NLOC": "89", "file_CCN": "30", "file_NToken": "709"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "77,85,94", "deleted_lines": "75,83,92", "method_info": {"method_name": "test_json_from_aws_lambda_event", "method_params": "input_adapter,raw_jsons", "method_startline": "75", "method_endline": "99", "method_complexity": {"method_NLOC": "23", "method_CCN": "7", "method_NToken": "172", "method_nesting_level": "0"}}}}}}}}