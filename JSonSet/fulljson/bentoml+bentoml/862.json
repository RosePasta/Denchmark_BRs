{"BR": {"BR_id": "862", "BR_author": "Rasen-wq", "BRopenT": "2020-07-02T14:50:33Z", "BRcloseT": "2020-07-07T05:11:11Z", "BR_text": {"BRsummary": "DataFrame Input - pass NaN values in JSON Request", "BRdescription": "\n Describe the bug\n Hi, I am trying BentoML with DataFrameInput and the Titanic Dataset following this <denchmark-link:https://github.com/bentoml/gallery/blob/master/lightbgm/titanic-survival-prediction/lightbgm-titanic-survival-prediction.ipynb>notebook</denchmark-link>\n . In this dataset there are None values.\n I am sending the following data content, in this case the null value is casted to None and not to NaN:\n '{\"Pclass\":{\"0\":3},\"Age\":{\"0\":null},\"Fare\":{\"0\":7.8958},\"SibSp\":{\"0\":0},\"Parch\":{\"0\":0}}'\n If I change the null value to any number the request is successful.\n I believe the problem is in this <denchmark-link:https://github.com/bentoml/BentoML/blob/master/bentoml/adapters/dataframe_input.py#L158>line</denchmark-link>\n , when the dtype inference is set to false. This makes impossibile to cast the  value.\n I am suggesting, in order to solve the problem to change the dtype inference to be True.\n Doing that, Pandas will automatically infer the NaN value.\n Something I found interesting: if I send 1 only row with a null  value this is casted to string. If I send 2 rows, one with null value and one without the casting works well. I don't believe this type of behaviour should be expected.\n To Reproduce\n pd.read_json('[{\"key\": NaN }]',dtype=False)\n Is casted to None\n pd.read_json('[{\"key\": NaN }]',dtype=True)\n Is casted regularly to NaN.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "Rasen-wq", "commentT": "2020-07-02T15:28:09Z", "comment_text": "\n \t\tThe problem can be easily workaround using the JSON Input, I still think it makes sense to raise the issue when using the DataFrame Input.\n <denchmark-link:https://user-images.githubusercontent.com/17594750/86377940-ea3e2b00-bc80-11ea-8e78-bcff5d0e7689.png></denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "Rasen-wq", "commentT": "2020-07-06T23:17:12Z", "comment_text": "\n \t\tThanks for reporting this <denchmark-link:https://github.com/Rasen-wq>@Rasen-wq</denchmark-link>\n ,  I think your suggestion makes sense, I'm not sure why the  was set to false.\n <denchmark-link:https://github.com/bojiang>@bojiang</denchmark-link>\n  thoughts?\n \t\t"}}}, "commit": {"commit_id": "3ad2ffe02658958d0e5db517d2d039615e370e33", "commit_author": "Chaoyu", "commitT": "2020-07-06 22:02:28-07:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "0.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "bentoml\\adapters\\dataframe_input.py", "file_new_name": "bentoml\\adapters\\dataframe_input.py", "file_complexity": {"file_NLOC": "195", "file_CCN": "34", "file_NToken": "985"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "234", "deleted_lines": "237,238,239", "method_info": {"method_name": "handle_aws_lambda_event", "method_params": "self,event,func", "method_startline": "228", "method_endline": "245", "method_complexity": {"method_NLOC": "15", "method_CCN": "5", "method_NToken": "110", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "155", "deleted_lines": "155,156,157,158", "method_info": {"method_name": "handle_request", "method_params": "self,Request,func", "method_startline": "147", "method_endline": "167", "method_complexity": {"method_NLOC": "18", "method_CCN": "5", "method_NToken": "121", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "206,215", "deleted_lines": "209,218", "method_info": {"method_name": "handle_cli", "method_params": "self,args,func", "method_startline": "189", "method_endline": "226", "method_complexity": {"method_NLOC": "33", "method_CCN": "9", "method_NToken": "209", "method_nesting_level": "1"}}}}}}}}