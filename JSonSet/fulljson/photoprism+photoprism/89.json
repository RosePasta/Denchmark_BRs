{"BR": {"BR_id": "89", "BR_author": "rcdailey", "BRopenT": "2019-01-01T21:10:20Z", "BRcloseT": "2019-12-30T14:46:32Z", "BR_text": {"BRsummary": "Segmentation fault on start of Docker container", "BRdescription": "\n Using latest on  (SHA1: <denchmark-link:https://github.com/photoprism/photoprism/commit/6cf39ebd677aecf3a6af42f5dacccc5df0d897ce>6cf39eb</denchmark-link>\n ), I have my own  as shown:\n version: '3.7'\n \n services:\n   photoprism:\n     build:\n       context: source\n       dockerfile: docker/photoprism/Dockerfile\n     image: photoprism/photoprism\n     #restart: always\n     network_mode: bridge\n     user: $UID:$GID\n     ports:\n     - 50180:80\n     volumes:\n     - /media/photo/photoprism:/srv/photoprism/photos\n     - ./cache:/srv/photoprism/cache # thumbnail cache\n     - ./database:/srv/photoprism/database # database files\n     environment:\n     - PHOTOPRISM_DEBUG=true\n     - PHOTOPRISM_SERVER_MODE=debug\n     - PHOTOPRISM_IMPORT_PATH=/srv/photoprism/photos/import\n     - PHOTOPRISM_EXPORT_PATH=/srv/photoprism/photos/export\n     - PHOTOPRISM_ORIGINALS_PATH=/srv/photoprism/photos/originals\n I have the repository cloned at directory source next to my YML file. I get this segmentation fault when I do docker-compose up after doing a docker-compose build:\n <denchmark-code>panic: runtime error: invalid memory address or nil pointer dereference\n [signal SIGSEGV: segmentation violation code=0x1 addr=0x40 pc=0x7c3eb7]\n \n goroutine 1 [running]:\n github.com/photoprism/photoprism/internal/fsutil.ExpandedFilename(0x191acb6, 0x1e, 0xb, 0x191acb6)\n     /go/src/github.com/photoprism/photoprism/internal/fsutil/file.go:25 +0x37\n github.com/photoprism/photoprism/internal/context.NewConfig(0xc000430420, 0xc00043c7b8)\n     /go/src/github.com/photoprism/photoprism/internal/context/config.go:68 +0xda\n github.com/photoprism/photoprism/internal/commands.startAction(0xc000430420, 0x0, 0xc000430420)\n     /go/src/github.com/photoprism/photoprism/internal/commands/start.go:42 +0x40\n github.com/urfave/cli.HandleAction(0x1655600, 0x19902a8, 0xc000430420, 0xc000240400, 0x0)\n     /go/pkg/mod/github.com/urfave/cli@v1.20.0/app.go:490 +0xc8\n github.com/urfave/cli.Command.Run(0x18f1a51, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1905092, 0x11, 0x0, ...)\n     /go/pkg/mod/github.com/urfave/cli@v1.20.0/command.go:210 +0x9a2\n github.com/urfave/cli.(*App).Run(0xc0000d8820, 0xc0000ce000, 0x2, 0x2, 0x0, 0x0)\n     /go/pkg/mod/github.com/urfave/cli@v1.20.0/app.go:255 +0x687\n main.main()\n     /go/src/github.com/photoprism/photoprism/cmd/photoprism/photoprism.go:33 +0x309\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "rcdailey", "commentT": "2019-01-03T04:13:20Z", "comment_text": "\n \t\tOk, so if your source is up-to-date it looks like the current user can't be found for any reason. We need to implement error handling in file.go line 24 for that case. Do you want to send a pull request?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "rcdailey", "commentT": "2019-01-03T05:03:10Z", "comment_text": "\n \t\tAdded error handling. Let me know if this fixed it.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "rcdailey", "commentT": "2019-01-03T05:27:17Z", "comment_text": "\n \t\tNow I get:\n <denchmark-code>2019/01/03 05:25:55.738 terror.go:327: [fatal] open /srv/photoprism/server/database/LOCK: permission denied\n github.com/pingcap/errors.AddStack\n     /go/pkg/mod/github.com/pingcap/errors@v0.11.0/errors.go:174\n github.com/pingcap/errors.Trace\n     /go/pkg/mod/github.com/pingcap/errors@v0.11.0/juju_adaptor.go:12\n github.com/pingcap/tidb/store/mockstore/mocktikv.NewMVCCLevelDB\n     /go/pkg/mod/github.com/pingcap/tidb@v0.0.0-20181212102244-990f859384b8/store/mockstore/mocktikv/mvcc_leveldb.go:119\n github.com/pingcap/tidb/store/mockstore/mocktikv.NewTiKVAndPDClient\n     /go/pkg/mod/github.com/pingcap/tidb@v0.0.0-20181212102244-990f859384b8/store/mockstore/mocktikv/mock.go:30\n github.com/pingcap/tidb/store/mockstore.NewMockTikvStore\n     /go/pkg/mod/github.com/pingcap/tidb@v0.0.0-20181212102244-990f859384b8/store/mockstore/tikv.go:106\n github.com/pingcap/tidb/store/mockstore.MockDriver.Open\n     /go/pkg/mod/github.com/pingcap/tidb@v0.0.0-20181212102244-990f859384b8/store/mockstore/tikv.go:47\n github.com/pingcap/tidb/store/mockstore.(*MockDriver).Open\n     <autogenerated>:1\n github.com/pingcap/tidb/session.newStoreWithRetry.func1\n     /go/pkg/mod/github.com/pingcap/tidb@v0.0.0-20181212102244-990f859384b8/session/tidb.go:273\n github.com/pingcap/tidb/util.RunWithRetry\n     /go/pkg/mod/github.com/pingcap/tidb@v0.0.0-20181212102244-990f859384b8/util/misc.go:39\n github.com/pingcap/tidb/session.newStoreWithRetry\n     /go/pkg/mod/github.com/pingcap/tidb@v0.0.0-20181212102244-990f859384b8/session/tidb.go:271\n github.com/pingcap/tidb/session.NewStore\n     /go/pkg/mod/github.com/pingcap/tidb@v0.0.0-20181212102244-990f859384b8/session/tidb.go:255\n github.com/photoprism/photoprism/internal/tidb.createStoreAndDomain\n     /go/src/github.com/photoprism/photoprism/internal/tidb/server.go:112\n github.com/photoprism/photoprism/internal/tidb.Start\n     /go/src/github.com/photoprism/photoprism/internal/tidb/server.go:89\n runtime.goexit\n     /usr/local/go/src/runtime/asm_amd64.s:1333\n </denchmark-code>\n \n Does your docker container not support running as an arbitrary user?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "rcdailey", "commentT": "2019-01-03T05:31:51Z", "comment_text": "\n \t\tAt least I didn't try so far... would it be possible to fix the permissions somethow and try again?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "rcdailey", "commentT": "2019-01-03T14:09:42Z", "comment_text": "\n \t\tPermissions are already correct on the host, specifically where the volumes\n are concerned.\n <denchmark-link:#>\u2026</denchmark-link>\n \n \n On Wed, Jan 2, 2019, 11:31 PM Michael Mayer ***@***.***> wrote:\n  At least I didn't try so far... would it be possible to fix the\n  permissions somethow and try again?\n \n  \u2014\n  You are receiving this because you authored the thread.\n  Reply to this email directly, view it on GitHub\n  <#89 (comment)>,\n  or mute the thread\n  <https://github.com/notifications/unsubscribe-auth/ABr6dhQaLAeAkeFcbUo9YSkq7R1vet4Dks5u_ZXJgaJpZM4ZmB8x>\n  .\n \n \n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "rcdailey", "commentT": "2019-01-03T14:48:58Z", "comment_text": "\n \t\tJust noticed that you mount the db and cache volumes from your host:\n <denchmark-code>- ./cache:/srv/photoprism/cache # thumbnail cache\n - ./database:/srv/photoprism/database # database files\n </denchmark-code>\n \n Why? In that case, permissions & case sensitivity can be an issue. Also performance might suffer (at least on a Mac).\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "rcdailey", "commentT": "2019-01-03T15:19:05Z", "comment_text": "\n \t\tI do it this way so I can directly access the files if needed, and also so\n I can control permissions manually. I cannot do either of these without\n trickery if they are true docker volumes. Not to mention that it's too easy\n to remove docker volumes, IMHO. And important data should not go into\n docker volumes for this reason (only data that is easily reproduced or\n redownloaded, such as cache but not database).\n \n Anyway, I'm not asking you to agree with how I'm doing it, just know that I\n do this with 10 other distinct docker containers and it works fine. The\n issue is likely that your entrypoint script is running commands that only\n work when you're root. However, now they are running as a non-privileged\n user inside the container. So your container logic and processes will need\n to handle both root and non-root users.\n <denchmark-link:#>\u2026</denchmark-link>\n \n \n On Thu, Jan 3, 2019 at 8:49 AM Michael Mayer ***@***.***> wrote:\n  Just noticed that you mount the db and cache volumes from your host:\n \n  - ./cache:/srv/photoprism/cache # thumbnail cache\n  - ./database:/srv/photoprism/database # database files\n \n  Why? In that case, permissions & case sensitivity can be an issue. Also\n  performance might suffer (at least on a Mac).\n \n  \u2014\n  You are receiving this because you authored the thread.\n  Reply to this email directly, view it on GitHub\n  <#89 (comment)>,\n  or mute the thread\n  <https://github.com/notifications/unsubscribe-auth/ABr6dvHxLQyZBLwkrLyiZSetV6F2iF1-ks5u_hhfgaJpZM4ZmB8x>\n  .\n \n \n \n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "rcdailey", "commentT": "2019-01-03T15:25:16Z", "comment_text": "\n \t\tWhat is the recommended way to ensure the filesystem is always writable for our app from inside the container, independent of how you mount it and what the permissions are?\n We later want to distribute a single binary without Docker, so I didn't spend much time on those issues. Any help is much appreciated.\n Note that the DB and the cache can be re-built any time from the files (except the likes, those will later be stored in XMP and can also be restored).\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "rcdailey", "commentT": "2019-01-03T19:04:38Z", "comment_text": "\n \t\tI think there's 2 principles that most containers usually follow:\n \n Do not support changes between UID/GID between multiple sessions using the same volume.\n Allow root and non-root users to be specified for running services.\n \n What number 1 means is that if I start my container with UID 1000, you assume that UID will never change. So if I start as UID 2000 after files have been created in volumes and I get permission errors, that's something I need to fix myself. Some containers do things like sudo chown -R but this is situational.\n For number 2, I've seen two approaches:\n \n Use --user with docker run or user: with Docker Compose. This runs your entrypoint as that UID/GID.\n Do not use --user, and instead provide environment variables (e.g. PHOTOPRISM_UID and PHOTOPRISM_GID, which the user specifies when they start the container.\n \n In the second case, it works a bit like this:\n \n Container is started\n Container entrypoint is executed as root user\n Perform root-level setup as-needed (initialize volumes, download/install stuff, chmod, etc)\n Execute your service (photoprism in this case) using an explicit UID/GID (pulling these values from the aforementioned environment variables the user provided to the container).\n \n This approach is generally required if you still need root for certain tasks required to initialize the container, but don't affect the host machine in any significant way (e.g. writes files to volumes as root that the user in turn can't access on the host). And usually the only thing that needs to run as that UID is the service itself, since it's the thing creating the files, using the volumes, etc.\n Both of these solutions address file permissions problems in volumes, which is generally the biggest issue you see. Imagine someone mapping an NFS mounted-volume on the host to the container. NFS is pretty permission sensitive, so if it's creating files with the root UID, that might cause failures or other problems.\n If you need a real world example, look at the LinuxServer.io containers. They have a pretty neat framework set up to run init services under specific UID/GID.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "rcdailey", "commentT": "2019-01-04T15:35:53Z", "comment_text": "\n \t\tThank you very much for the overview! \ud83d\udc4d\n I'll have a closer look when I find the time... A pull request would be really amazing. I'm slowly running out of food as I spent the last 6 months working for free on various open-source projects.\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "rcdailey", "commentT": "2019-01-04T16:27:10Z", "comment_text": "\n \t\tI saw your previous question: Yes, you do have to do it all in the entrypoint. Most people wouldn't be bothered to build their own subimage based on yours to perform those tasks. It makes the most sense to be done as initialization of the container itself in those cases. Again, a lot of it is situational, and depends on the requirements and semantics of your services.\n No problem. And no rush. I am pretty busy myself, but if I can find the time to help out I will. The downside is that doing this right really requires a deep understanding of your services, which will take a long time for someone new to the project.\n My intention was to try out Photoprism in a test instance, but I couldn't get it working in the way I expected the configuration to work (specifically, overriding the container UID/GID, as we discussed).\n Keep up the great work.\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "rcdailey", "commentT": "2019-01-04T16:31:35Z", "comment_text": "\n \t\t\n I saw your previous question\n \n Haha, yes, I thought I can figure this out myself. Thanks for the clarification. I'll leave this issue open so that someone can pick it up.\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "rcdailey", "commentT": "2019-07-29T14:28:18Z", "comment_text": "\n \t\tJust heard about Photoprism and wanted to check it out, crashes with a segfault immediately on launch, can't even get any logging information out of it. Any assistance would be appreciated, including my compose file, environment is running Ubuntu 18.04, Docker 19.03.1 build 74b1e89. /media/photos is a zfs filesyste if that matters.\n <denchmark-code>version: '3.6'\n \n volumes:\n     photoprism_db:\n         driver: local\n         name: photoprism_db\n     photoprism_cache:\n         driver: local\n         name: photoprism_cache\n \n services:\n     photoprism:\n         container_name: photoprism\n         restart: unless-stopped\n         volumes:\n             - '/media/photos:/home/photoprism/Pictures/Originals:ro'\n             - 'photoprism_cache:/home/photoprism/.cache/photoprism'\n             - 'photoprism_db:/home/photoprism/.local/share/photoprism/resources/database'\n         ports:\n             - '2342:2342'\n         image: photoprism/photoprism\n </denchmark-code>\n \n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "rcdailey", "commentT": "2019-08-18T16:28:45Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/scottjl>@scottjl</denchmark-link>\n  Is that the same issue as <denchmark-link:https://github.com/photoprism/photoprism/issues/128>#128</denchmark-link>\n ?\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "rcdailey", "commentT": "2019-12-30T12:35:30Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rcdailey>@rcdailey</denchmark-link>\n  Does this issue still exist?\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "rcdailey", "commentT": "2019-12-30T14:46:31Z", "comment_text": "\n \t\tI do not use this anymore so I'm not able to confirm. I'll close the issue.\n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "rcdailey", "commentT": "2019-12-30T14:55:11Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rcdailey>@rcdailey</denchmark-link>\n  Sorry we didn't meet your needs!\n \t\t"}}}, "commit": {"commit_id": "95b041e25fed355a012dcaf7f081aa1a87d88403", "commit_author": "Michael Mayer", "commitT": "2019-01-03 05:45:54+01:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "0.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "internal\\fsutil\\file.go", "file_new_name": "internal\\fsutil\\file.go", "file_complexity": {"file_NLOC": "96", "file_CCN": "23", "file_NToken": "528"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "29,30,31,34,35,36,37,38", "deleted_lines": "24,25,26,32,35", "method_info": {"method_name": "ExpandedFilename", "method_params": "string", "method_startline": "23", "method_endline": "41", "method_complexity": {"method_NLOC": "15", "method_CCN": "6", "method_NToken": "90", "method_nesting_level": "0"}}}}}}}}