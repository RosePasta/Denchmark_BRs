{"BR": {"BR_id": "2092", "BR_author": "swghosh", "BRopenT": "2020-08-14T21:42:15Z", "BRcloseT": "2020-09-01T03:11:27Z", "BR_text": {"BRsummary": "tfa.image.translate_xy, tfa.image.shear_* fails to work with float images", "BRdescription": "\n System information\n \n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Google Colaboratory (Debian) / macOS v10.15.6\n TensorFlow version and how it was installed (source or binary): Binary TF_v2.3.0\n TensorFlow-Addons version and how it was installed (source or binary): Binary tfa-nightly_v0.12.0.dev20200811022730\n Python version: 3.7.6\n Is GPU used? (yes/no): no\n \n Describe the bug\n tfa.image.shear_x, tfa.image.shear_y, tfa.image.translate_xy and possibly other args that make use of the replace argument fails to work with float images. The replace argument should strictly be an integer (uint8) which is also suggested in the documentation, but the same results in either TypeError or ConcatV2 errors when working with non-integer images.\n Code to reproduce the issue\n float_image = tf.random.uniform([32, 32, 3], 0, 1, dtype=tf.float32)\n sheared_image = tfa.image.shear_x(float_image, 0.3, replace=0.5)  # fails with TypeError\n sheared_image = tfa.image.shear_x(float_image, 0.3, replace=128)  # fails with Concat error\n A more detailed Colab with the stack trace and other possible combinations that still won't work for the same reason can be found in <denchmark-link:https://colab.research.google.com/gist/swghosh/7245f498ba407f5552a304fa2784c0ac/-tfa-image-op-bug-w-replace-argument.ipynb>[tfa.image] op bug w/ replace argument.ipynb</denchmark-link>\n \n Other info / logs\n ---------------------------------------------------------------------------\n TypeError                                 Traceback (most recent call last)\n <ipython-input-12-50c68fed8a6d> in <module>()\n ----> 1 sheared_image3 = tfa.image.shear_x(float_image, 0.3, replace=0.5)\n       2 sheared_image4 = tfa.image.shear_y(float_image, 0.4, replace=0.4)\n       3 \n       4 plt.imshow(sheared_image3)\n       5 plt.show()\n \n 5 frames\n /usr/local/lib/python3.6/dist-packages/tensorflow_addons/image/transform_ops.py in shear_x(image, level, replace)\n     324     #  0  1].\n     325     image = transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])\n --> 326     return unwrap(image, replace)\n     327 \n     328 \n \n /usr/local/lib/python3.6/dist-packages/tensorflow_addons/image/utils.py in unwrap(image, replace)\n     135     alpha_channel = flattened_image[:, 3]\n     136 \n --> 137     replace = tf.constant(replace, tf.uint8)\n     138     if tf.rank(replace) == 0:\n     139         replace = tf.expand_dims(replace, 0)\n \n /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name)\n     262   \"\"\"\n     263   return _constant_impl(value, dtype, shape, name, verify_shape=False,\n --> 264                         allow_broadcast=True)\n     265 \n     266 \n \n /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/constant_op.py in _constant_impl(value, dtype, shape, name, verify_shape, allow_broadcast)\n     273       with trace.Trace(\"tf.constant\"):\n     274         return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n --> 275     return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n     276 \n     277   g = ops.get_default_graph()\n \n /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/constant_op.py in _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n     298 def _constant_eager_impl(ctx, value, dtype, shape, verify_shape):\n     299   \"\"\"Implementation of eager constant.\"\"\"\n --> 300   t = convert_to_eager_tensor(value, ctx, dtype)\n     301   if shape is None:\n     302     return t\n \n /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/constant_op.py in convert_to_eager_tensor(value, ctx, dtype)\n      96       dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      97   ctx.ensure_initialized()\n ---> 98   return ops.EagerTensor(value, ctx.device_name, dtype)\n      99 \n     100 \n \n TypeError: Cannot convert 0.5 to EagerTensor of dtype uint8\n ---------------------------------------------------------------------------\n InvalidArgumentError                      Traceback (most recent call last)\n <ipython-input-13-ffd69f46b291> in <module>()\n ----> 1 sheared_image3 = tfa.image.shear_x(float_image, 0.3, replace=128)\n       2 sheared_image4 = tfa.image.shear_y(float_image, 0.4, replace=0)\n       3 \n       4 plt.imshow(sheared_image3)\n       5 plt.show()\n \n 6 frames\n /usr/local/lib/python3.6/dist-packages/six.py in raise_from(value, from_value)\n \n InvalidArgumentError: cannot compute ConcatV2 as input #1(zero-based) was expected to be a uint8 tensor but is a float tensor [Op:ConcatV2] name: concat\n What would be the way out to run these op(s) with float images?\n <denchmark-link:https://github.com/WindQAQ>@WindQAQ</denchmark-link>\n  <denchmark-link:https://github.com/facaiy>@facaiy</denchmark-link>\n  <denchmark-link:https://github.com/sayoojbk>@sayoojbk</denchmark-link>\n \n /cc: <denchmark-link:https://github.com/tanzhenyu>@tanzhenyu</denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "swghosh", "commentT": "2020-08-14T21:51:01Z", "comment_text": "\n \t\tThis is the bug in our part. I can fix it recently. But personally, I discourage to use this function after <denchmark-link:https://github.com/tensorflow/tensorflow/pull/41365>tensorflow/tensorflow#41365</denchmark-link>\n  gets merged. Once one can control  when doing transformation, / is redundant.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "swghosh", "commentT": "2020-08-16T14:57:05Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/WindQAQ>@WindQAQ</denchmark-link>\n , thanks for sharing the update on TF  and it's upcoming support for  as a complete op arg.\n So as a workaround we should wait for the changes to get merged on tf/master and then look into a fix for this (float support on image ops with ), right?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "swghosh", "commentT": "2020-08-16T15:34:22Z", "comment_text": "\n \t\t\n Hi @WindQAQ, thanks for sharing the update on TF ImageProjectiveTransformV2 and it's upcoming support for fill_mode as a complete op arg.\n So as a workaround we should wait for the changes to get merged on tf/master and then look into a fix for this (float support on image ops with replace), right?\n \n Yes, I can fix it today or you can open an PR for it!\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "swghosh", "commentT": "2020-08-16T15:40:22Z", "comment_text": "\n \t\t\n \n Hi @WindQAQ, thanks for sharing the update on TF ImageProjectiveTransformV2 and it's upcoming support for fill_mode as a complete op arg.\n So as a workaround we should wait for the changes to get merged on tf/master and then look into a fix for this (float support on image ops with replace), right?\n \n \n \n Yes, I can fix it today or you can open an PR for it!\n \n I'll work on a PR and get this done. (utilising the fill_mode argument from ImageProjectiveTransformV2)\n Should I then skip wrap / unwrap completely?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "swghosh", "commentT": "2020-08-16T15:47:11Z", "comment_text": "\n \t\t\n \n \n Hi @WindQAQ, thanks for sharing the update on TF ImageProjectiveTransformV2 and it's upcoming support for fill_mode as a complete op arg.\n So as a workaround we should wait for the changes to get merged on tf/master and then look into a fix for this (float support on image ops with replace), right?\n \n \n \n Yes, I can fix it today or you can open an PR for it!\n \n I'll work on a PR and get this done. (utilising the fill_mode argument from ImageProjectiveTransformV2)\n Should I then skip wrap / unwrap completely?\n \n Sorry that I accidentally edited your comment... And just leave it alone as fill_value has not supported yet.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "swghosh", "commentT": "2020-08-16T15:50:31Z", "comment_text": "\n \t\tOh cool cool. We can wait till the support is added. Thanks.\n \t\t"}}}, "commit": {"commit_id": "03d02c1437baead76576c6081fc8907bf04e7263", "commit_author": "Tzu-Wei Sung", "commitT": "2020-08-31 20:11:26-07:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "tensorflow_addons\\image\\tests\\transform_ops_test.py", "file_new_name": "tensorflow_addons\\image\\tests\\transform_ops_test.py", "file_complexity": {"file_NLOC": "297", "file_CCN": "23", "file_NToken": "3348"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "328,329,330,331,332,333", "deleted_lines": "327,328,329", "method_info": {"method_name": "test_shear_x", "method_params": "", "method_startline": "327", "method_endline": "344", "method_complexity": {"method_NLOC": "15", "method_CCN": "1", "method_NToken": "202", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "329,330,331,332,333", "deleted_lines": "329,347", "method_info": {"method_name": "test_shear_x", "method_params": "dtype", "method_startline": "329", "method_endline": "348", "method_complexity": {"method_NLOC": "17", "method_CCN": "1", "method_NToken": "204", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "352,353,354,355,356,357", "deleted_lines": "349,350,351,366", "method_info": {"method_name": "test_shear_y", "method_params": "", "method_startline": "349", "method_endline": "366", "method_complexity": {"method_NLOC": "15", "method_CCN": "1", "method_NToken": "208", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "353,354,355,356,357,372", "deleted_lines": "366", "method_info": {"method_name": "test_shear_y", "method_params": "dtype", "method_startline": "353", "method_endline": "372", "method_complexity": {"method_NLOC": "17", "method_CCN": "1", "method_NToken": "206", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow_addons\\image\\tests\\translate_ops_test.py", "file_new_name": "tensorflow_addons\\image\\tests\\translate_ops_test.py", "file_complexity": {"file_NLOC": "69", "file_CCN": "4", "file_NToken": "662"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98", "deleted_lines": null, "method_info": {"method_name": "test_translate_xy_scalar_replace", "method_params": "dtype", "method_startline": "83", "method_endline": "98", "method_complexity": {"method_NLOC": "16", "method_CCN": "1", "method_NToken": "132", "method_nesting_level": "0"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "tensorflow_addons\\image\\transform_ops.py", "file_new_name": "tensorflow_addons\\image\\transform_ops.py", "file_complexity": {"file_NLOC": "293", "file_CCN": "10", "file_NToken": "1241"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "311,315", "deleted_lines": "311,315", "method_info": {"method_name": "shear_x", "method_params": "TensorLike,float,TensorLike", "method_startline": "311", "method_endline": "327", "method_complexity": {"method_NLOC": "13", "method_CCN": "1", "method_NToken": "66", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "330", "deleted_lines": "330", "method_info": {"method_name": "shear_y", "method_params": "TensorLike,float,int", "method_startline": "330", "method_endline": "346", "method_complexity": {"method_NLOC": "13", "method_CCN": "1", "method_NToken": "66", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "330", "deleted_lines": "330", "method_info": {"method_name": "shear_y", "method_params": "TensorLike,float,TensorLike", "method_startline": "330", "method_endline": "346", "method_complexity": {"method_NLOC": "13", "method_CCN": "1", "method_NToken": "66", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "311,315", "deleted_lines": "311,315", "method_info": {"method_name": "shear_x", "method_params": "TensorLike,float,int", "method_startline": "311", "method_endline": "327", "method_complexity": {"method_NLOC": "13", "method_CCN": "1", "method_NToken": "66", "method_nesting_level": "0"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow_addons\\image\\translate_ops.py", "file_new_name": "tensorflow_addons\\image\\translate_ops.py", "file_complexity": {"file_NLOC": "100", "file_CCN": "3", "file_NToken": "402"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "110", "deleted_lines": "110", "method_info": {"method_name": "translate_xy", "method_params": "TensorLike,TensorLike,int", "method_startline": "109", "method_endline": "110", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "13", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "110", "deleted_lines": "110", "method_info": {"method_name": "translate_xy", "method_params": "TensorLike,TensorLike,TensorLike", "method_startline": "109", "method_endline": "110", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "13", "method_nesting_level": "0"}}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow_addons\\image\\utils.py", "file_new_name": "tensorflow_addons\\image\\utils.py", "file_complexity": {"file_NLOC": "74", "file_CCN": "15", "file_NToken": "665"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "137,141", "deleted_lines": "137,141", "method_info": {"method_name": "unwrap", "method_params": "image,replace", "method_startline": "112", "method_endline": "151", "method_complexity": {"method_NLOC": "16", "method_CCN": "2", "method_NToken": "209", "method_nesting_level": "0"}}}}}}}}