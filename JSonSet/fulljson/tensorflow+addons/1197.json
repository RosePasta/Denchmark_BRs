{"BR": {"BR_id": "1197", "BR_author": "gabrieldemarmiesse", "BRopenT": "2020-03-02T13:18:01Z", "BRcloseT": "2020-03-03T11:02:09Z", "BR_text": {"BRsummary": "Activations_tests.py is not run at all with bazel.", "BRdescription": "\n To reproduce: see <denchmark-link:https://github.com/tensorflow/addons/pull/1196>#1196</denchmark-link>\n \n Describe the bug\n This file is not run by bazel, I hit this error when I was trying to make a proof of concept with pytest, and I couldn't get those tests to work. Even when executing them line by line in a new python script. At first I though bazel did some black magic with serialization, but actually those tests are not run at all.\n Code to reproduce the issue\n see <denchmark-link:https://github.com/tensorflow/addons/pull/1196>#1196</denchmark-link>\n  The build is passing despite an inexisting activation function.\n Other info / logs\n With pytest I get this error:\n <denchmark-code>(proof_activations_tests_broken) /mnt/c/Users/gdemarmi/Desktop/projects/addons $ pytest -v tensorflow_addons/activations/activations_test.py\n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/pep8.py:110: FutureWarning: Possible nested set at position 1\n   EXTRANEOUS_WHITESPACE_REGEX = re.compile(r'[[({] | []}),;:]')\n ============================================================== test session starts ==============================================================\n platform linux -- Python 3.7.5, pytest-5.0.1, py-1.8.0, pluggy-0.13.0 -- /home/gdemarmi/softwares/python/anaconda/bin/python\n cachedir: .pytest_cache\n rootdir: /mnt/c/Users/gdemarmi/Desktop/projects/addons\n plugins: arraydiff-0.3, cov-2.7.1, doctestplus-0.2.0, flake8-1.0.4, forked-1.0.2, openfiles-0.4.0, pep8-1.0.6, remotedata-0.3.2, xdist-1.27.0, typeguard-2.7.1\n collected 3 items\n \n tensorflow_addons/activations/activations_test.py::ActivationsTest::test_serialization FAILED                                             [ 33%]\n tensorflow_addons/activations/activations_test.py::ActivationsTest::test_serialization_with_layers FAILED                                 [ 66%]\n tensorflow_addons/activations/activations_test.py::ActivationsTest::test_session SKIPPED                                                  [100%]\n \n =================================================================== FAILURES ====================================================================\n ______________________________________________________ ActivationsTest.test_serialization _______________________________________________________\n \n self = <tensorflow_addons.activations.activations_test.ActivationsTest testMethod=test_serialization>, args = (), kwargs = {}\n \n     def decorated(self, *args, **kwargs):\n       try:\n         with context.graph_mode():\n           with self.test_session(use_gpu=use_gpu, config=config):\n >           f(self, *args, **kwargs)\n \n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/tensorflow_core/python/framework/test_util.py:1111:\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n tensorflow_addons/activations/activations_test.py:38: in test_serialization\n     fn = tf.keras.activations.get(name)\n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/tensorflow_core/python/keras/activations.py:445: in get\n     return deserialize(identifier)\n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/tensorflow_core/python/keras/activations.py:407: in deserialize\n     printable_module_name='activation function')\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n \n identifier = 'gelu'\n module_objects = {'K': <module 'tensorflow.python.keras.backend' from '/home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-pack.../python/anaconda/lib/python3.7/site-packages/tensorflow_core/python/keras/__pycache__/activations.cpython-37.pyc', ...}\n custom_objects = None, printable_module_name = 'activation function'\n \n     @keras_export('keras.utils.deserialize_keras_object')\n     def deserialize_keras_object(identifier,\n                                  module_objects=None,\n                                  custom_objects=None,\n                                  printable_module_name='object'):\n       if identifier is None:\n         return None\n \n       if isinstance(identifier, dict):\n         # In this case we are dealing with a Keras config dictionary.\n         config = identifier\n         (cls, cls_config) = class_and_config_for_serialized_keras_object(\n             config, module_objects, custom_objects, printable_module_name)\n \n         if hasattr(cls, 'from_config'):\n           arg_spec = tf_inspect.getfullargspec(cls.from_config)\n           custom_objects = custom_objects or {}\n \n           if 'custom_objects' in arg_spec.args:\n             return cls.from_config(\n                 cls_config,\n                 custom_objects=dict(\n                     list(_GLOBAL_CUSTOM_OBJECTS.items()) +\n                     list(custom_objects.items())))\n           with CustomObjectScope(custom_objects):\n             return cls.from_config(cls_config)\n         else:\n           # Then `cls` may be a function returning a class.\n           # in this case by convention `config` holds\n           # the kwargs of the function.\n           custom_objects = custom_objects or {}\n           with CustomObjectScope(custom_objects):\n             return cls(**cls_config)\n       elif isinstance(identifier, six.string_types):\n         object_name = identifier\n         if custom_objects and object_name in custom_objects:\n           obj = custom_objects.get(object_name)\n         elif object_name in _GLOBAL_CUSTOM_OBJECTS:\n           obj = _GLOBAL_CUSTOM_OBJECTS[object_name]\n         else:\n           obj = module_objects.get(object_name)\n           if obj is None:\n >           raise ValueError('Unknown ' + printable_module_name + ':' + object_name)\n E           ValueError: Unknown activation function:gelu\n \n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/tensorflow_core/python/keras/utils/generic_utils.py:322: ValueError\n ------------------------------------------------------------- Captured stderr call --------------------------------------------------------------\n WARNING: Logging before flag parsing goes to stderr.\n W0302 14:16:06.604320 140554174990144 deprecation.py:323] From /home/gdemarmi/softwares/python/anaconda/lib/python3.7/contextlib.py:82: TensorFlowTestCase.test_session (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\n Instructions for updating:\n Use `self.session()` or `self.cached_session()` instead.\n 2020-03-02 14:16:06.609159: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n 2020-03-02 14:16:06.609314: E tensorflow/stream_executor/cuda/cuda_driver.cc:351] failed call to cuInit: UNKNOWN ERROR (303)\n 2020-03-02 14:16:06.609390: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (CRE1-L11685): /proc/driver/nvidia/version does not exist\n 2020-03-02 14:16:06.611303: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n 2020-03-02 14:16:06.628701: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 2712000000 Hz\n 2020-03-02 14:16:06.630525: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x7fffcefdc180 initialized for platform Host (this does not guarantee that XLA will be used). Devices:\n 2020-03-02 14:16:06.630953: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version\n --------------------------------------------------------------- Captured log call ---------------------------------------------------------------\n WARNING  tensorflow:deprecation.py:323 From /home/gdemarmi/softwares/python/anaconda/lib/python3.7/contextlib.py:82: TensorFlowTestCase.test_session (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\n                                        Instructions for updating:\n                                        Use `self.session()` or `self.cached_session()` instead.\n ________________________________________________ ActivationsTest.test_serialization_with_layers _________________________________________________\n \n self = <tensorflow_addons.activations.activations_test.ActivationsTest testMethod=test_serialization_with_layers>, args = (), kwargs = {}\n \n     def decorated(self, *args, **kwargs):\n       try:\n         with context.graph_mode():\n           with self.test_session(use_gpu=use_gpu, config=config):\n >           f(self, *args, **kwargs)\n \n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/tensorflow_core/python/framework/test_util.py:1111:\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n tensorflow_addons/activations/activations_test.py:49: in test_serialization_with_layers\n     deserialized_layer = tf.keras.layers.deserialize(config)\n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/tensorflow_core/python/keras/layers/serialization.py:106: in deserialize\n     printable_module_name='layer')\n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/tensorflow_core/python/keras/utils/generic_utils.py:305: in deserialize_keras_object\n     return cls.from_config(cls_config)\n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer.py:519: in from_config\n     return cls(**config)\n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/tensorflow_core/python/keras/layers/core.py:1082: in __init__\n     self.activation = activations.get(activation)\n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/tensorflow_core/python/keras/activations.py:445: in get\n     return deserialize(identifier)\n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/tensorflow_core/python/keras/activations.py:407: in deserialize\n     printable_module_name='activation function')\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n \n identifier = 'sparsemax'\n module_objects = {'K': <module 'tensorflow.python.keras.backend' from '/home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-pack.../python/anaconda/lib/python3.7/site-packages/tensorflow_core/python/keras/__pycache__/activations.cpython-37.pyc', ...}\n custom_objects = None, printable_module_name = 'activation function'\n \n     @keras_export('keras.utils.deserialize_keras_object')\n     def deserialize_keras_object(identifier,\n                                  module_objects=None,\n                                  custom_objects=None,\n                                  printable_module_name='object'):\n       if identifier is None:\n         return None\n \n       if isinstance(identifier, dict):\n         # In this case we are dealing with a Keras config dictionary.\n         config = identifier\n         (cls, cls_config) = class_and_config_for_serialized_keras_object(\n             config, module_objects, custom_objects, printable_module_name)\n \n         if hasattr(cls, 'from_config'):\n           arg_spec = tf_inspect.getfullargspec(cls.from_config)\n           custom_objects = custom_objects or {}\n \n           if 'custom_objects' in arg_spec.args:\n             return cls.from_config(\n                 cls_config,\n                 custom_objects=dict(\n                     list(_GLOBAL_CUSTOM_OBJECTS.items()) +\n                     list(custom_objects.items())))\n           with CustomObjectScope(custom_objects):\n             return cls.from_config(cls_config)\n         else:\n           # Then `cls` may be a function returning a class.\n           # in this case by convention `config` holds\n           # the kwargs of the function.\n           custom_objects = custom_objects or {}\n           with CustomObjectScope(custom_objects):\n             return cls(**cls_config)\n       elif isinstance(identifier, six.string_types):\n         object_name = identifier\n         if custom_objects and object_name in custom_objects:\n           obj = custom_objects.get(object_name)\n         elif object_name in _GLOBAL_CUSTOM_OBJECTS:\n           obj = _GLOBAL_CUSTOM_OBJECTS[object_name]\n         else:\n           obj = module_objects.get(object_name)\n           if obj is None:\n >           raise ValueError('Unknown ' + printable_module_name + ':' + object_name)\n E           ValueError: Unknown activation function:sparsemax\n \n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/tensorflow_core/python/keras/utils/generic_utils.py:322: ValueError\n =============================================================== warnings summary ================================================================\n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/google/protobuf/descriptor.py:47\n   /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/google/protobuf/descriptor.py:47: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working\n     from google.protobuf.pyext import _message\n \n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/botocore/vendored/requests/packages/urllib3/_collections.py:1\n /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/botocore/vendored/requests/packages/urllib3/_collections.py:1\n   /home/gdemarmi/softwares/python/anaconda/lib/python3.7/site-packages/botocore/vendored/requests/packages/urllib3/_collections.py:1: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working\n     from collections import Mapping, MutableMapping\n \n -- Docs: https://docs.pytest.org/en/latest/warnings.html\n =============================================== 2 failed, 1 skipped, 3 warnings in 16.01 seconds ================================================\n </denchmark-code>\n \n \t"}, "comments": {}}, "commit": {"commit_id": "e55167c7e16dc8945809bcc96dd335e72ebf0fa1", "commit_author": "who who who", "commitT": "2020-03-03 12:02:08+01:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow_addons\\activations\\activations_test.py", "file_new_name": "tensorflow_addons\\activations\\activations_test.py", "file_complexity": {"file_NLOC": "34", "file_CCN": "4", "file_NToken": "221"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "37", "deleted_lines": "37", "method_info": {"method_name": "test_serialization", "method_params": "self", "method_startline": "35", "method_endline": "42", "method_complexity": {"method_NLOC": "8", "method_CCN": "2", "method_NToken": "74", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow_addons\\activations\\sparsemax.py", "file_new_name": "tensorflow_addons\\activations\\sparsemax.py", "file_complexity": {"file_NLOC": "74", "file_CCN": "5", "file_NToken": "566"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": null, "deleted_lines": "22,85"}}}}}}