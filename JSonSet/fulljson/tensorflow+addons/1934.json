{"BR": {"BR_id": "1934", "BR_author": "AntPeixe", "BRopenT": "2020-06-17T08:27:26Z", "BRcloseT": "2020-06-24T17:18:54Z", "BR_text": {"BRsummary": "Unable to restore model using crf_decode", "BRdescription": "\n System information\n \n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS Cataline 10.15.3\n TensorFlow version and how it was installed (source or binary): 2.2.0 (from pypi)\n TensorFlow-Addons version and how it was installed (source or binary): 0.7.0 (from pypi)\n Python version: 3.7.4\n Is GPU used? (yes/no): no\n \n Describe the bug\n When trying to load a model with tf.keras.models.load_model which uses tfa.text.crf.crf_decode it fails on restoring the custom object. This seems to occur as it can't build the object because the init method takes extra arguments. Below there is a simple (standalone) example that fails and the traceback of the error.\n Code to reproduce the issue\n <denchmark-code>import numpy as np\n import tensorflow as tf\n import tensorflow_addons as tfa\n \n \n class CRFLoss:\n     def __init__(self, transition):\n         self.transition = transition\n         self.__name__ = \"CRFLoss\"\n \n     def __call__(self, true, pred):\n         log_likelihood, _ = tfa.text.crf.crf_log_likelihood(\n             inputs=pred,\n             tag_indices=true,\n             sequence_lengths=tf.ones(tf.shape(true)[0]) * 10,\n             transition_params=self.transition,\n         )\n         return tf.reduce_mean(-log_likelihood)\n \n     def get_config(self):\n         \"\"\"Return helper config.\"\"\"\n         config = {\"transition\": self.transition.numpy().tolist()}\n         return config\n \n     @classmethod\n     def from_config(cls, config):\n         config[\"transition\"] = tf.constant(config[\"transition\"], dtype=tf.float32)\n         return cls(**config)\n \n \n def create_model():\n     input_tensor = tf.keras.Input(shape=(10, 3), dtype=tf.float32, name=\"input_tensor\")\n     seq_len = tf.keras.Input(shape=(), dtype=tf.int32, name=\"seq_len\")\n     transition = tf.constant([[1, 1, 0], [0, 1, 1], [1, 0, 1]], dtype=tf.float32)\n \n     output = tf.multiply(input_tensor, tf.constant(1.0))\n     decoded, _ = tfa.text.crf.crf_decode(input_tensor, transition, seq_len)\n \n     loss = CRFLoss(transition)\n \n     model = tf.keras.Model(inputs=[input_tensor, seq_len], outputs=[output, decoded], name=\"example_model\")\n     model.compile(optimizer=\"Adam\", loss={\"tf_op_layer_Mul\": loss})\n     return model\n \n x_data = {\n     \"input_tensor\": np.random.random_sample((5, 10, 3)).astype(dtype=np.float32),\n     \"seq_len\": np.array([10] * 5, dtype=np.int32),\n }\n y_data = {\"tf_op_layer_Mul\": np.random.randint(0, 3, (5, 10))}\n \n model = create_model()\n model.fit(x_data, y_data)\n model.predict({\"input_tensor\": tf.expand_dims(x_data[\"input_tensor\"][0], 0), \"seq_len\": np.array([10])})\n \n tf.saved_model.save(model, \"./example_model/\")\n \n tf.keras.backend.clear_session()\n model = tf.keras.models.load_model(\n     \"./example_model/\",\n     custom_objects={\"CrfDecodeForwardRnnCell\": tfa.text.crf.CrfDecodeForwardRnnCell, \"CRFLoss\": CRFLoss}\n )\n model.fit(x_data, y_data)\n model.predict({\"input_tensor\": tf.expand_dims(x_data[\"input_tensor\"][0], 0), \"seq_len\": np.array([10])})\n </denchmark-code>\n \n Other info / logs\n <denchmark-code>Traceback (most recent call last):\n   File \"addon_issue_snippet.py\", line 60, in <module>\n     custom_objects={\"CrfDecodeForwardRnnCell\": tfa.text.crf.CrfDecodeForwardRnnCell, \"CRFLoss\": CRFLoss}\n   File \"venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/save.py\", line 190, in load_model\n     return saved_model_load.load(filepath, compile)\n   File \"venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/saved_model/load.py\", line 116, in load\n     model = tf_load.load_internal(path, loader_cls=KerasObjectLoader)\n   File \"venv/lib/python3.7/site-packages/tensorflow/python/saved_model/load.py\", line 604, in load_internal\n     export_dir)\n   File \"venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/saved_model/load.py\", line 188, in __init__\n     super(KerasObjectLoader, self).__init__(*args, **kwargs)\n   File \"venv/lib/python3.7/site-packages/tensorflow/python/saved_model/load.py\", line 123, in __init__\n     self._load_all()\n   File \"venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/saved_model/load.py\", line 209, in _load_all\n     self._layer_nodes = self._load_layers()\n   File \"venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/saved_model/load.py\", line 309, in _load_layers\n     layers[node_id] = self._load_layer(proto.user_object, node_id)\n   File \"venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/saved_model/load.py\", line 337, in _load_layer\n     obj, setter = revive_custom_object(proto.identifier, metadata)\n   File \"venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/saved_model/load.py\", line 782, in revive_custom_object\n     .format(identifier))\n ValueError: Unable to restore custom object of type _tf_keras_rnn_layer currently. Please make sure that the layer implements `get_config`and `from_config` when saving. In addition, please use the `custom_objects` arg when calling `load_model()`.\n </denchmark-code>\n \n Possible solution\n I've tried to debug this a bit and the solution I've found to work is to implement get_config and from_config on tfa.text.crf.CrfDecodeForwardRnnCell.\n For now I'm patching those methods in the object but it isn't very clean. If the proposed solution is good I'd gladly add the methods and create a PR.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "AntPeixe", "commentT": "2020-06-19T05:07:14Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/AntPeixe>@AntPeixe</denchmark-link>\n , your solution is correct IMO. Feel free to open an PR and request my review. Thank you!\n \t\t"}}}, "commit": {"commit_id": "81d8defbe2e850fe4b290e17974cfca3487a53bf", "commit_author": "Ant\u00f3nio Peixe", "commitT": "2020-06-24 22:36:53+05:18", "commit_complexity": {"commit_NLOC": "0.22916666666666666", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow_addons\\text\\crf.py", "file_new_name": "tensorflow_addons\\text\\crf.py", "file_complexity": {"file_NLOC": "412", "file_CCN": "30", "file_NToken": "2483"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "425,426,427,428,429,430", "deleted_lines": null, "method_info": {"method_name": "get_config", "method_params": "self", "method_startline": "425", "method_endline": "430", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "64", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "433,434,435,436,437", "deleted_lines": null, "method_info": {"method_name": "from_config", "method_params": "cls,dict", "method_startline": "433", "method_endline": "437", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "37", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow_addons\\text\\tests\\crf_test.py", "file_new_name": "tensorflow_addons\\text\\tests\\crf_test.py", "file_complexity": {"file_NLOC": "328", "file_CCN": "29", "file_NToken": "3313"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412", "deleted_lines": null, "method_info": {"method_name": "test_crf_decode_save_load", "method_params": "tmpdir", "method_startline": "370", "method_endline": "412", "method_complexity": {"method_NLOC": "37", "method_CCN": "1", "method_NToken": "380", "method_nesting_level": "0"}}}}}}}}