{"BR": {"BR_id": "722", "BR_author": "dominikroblek", "BRopenT": "2019-11-27T20:52:48Z", "BRcloseT": "2019-12-21T15:41:20Z", "BR_text": {"BRsummary": "tfa.layers.WeightNormalization fails with Assert when called by multiple threads", "BRdescription": "\n <denchmark-h:h3>Issue description</denchmark-h>\n \n tfa.layers.WeightNormalization fails with the following Tensorflow assert failure when used by multiple threads (e.g., when the same layer wrapped by tfa.layers.WeightNormalization is part of two parallel execution flows in a Tensorflow graph while reusing the variables):\n <denchmark-code>(0) Invalid argument: assertion failed: [The layer has been initialized.] [Condition x == y did not hold element-wise:] [x (discriminator/discriminator_1/n_layer_discriminator/sequential_21/grouped_conv1d_3/weight_normalization_304/cond/assert_equal_1/ReadVariableOp:0) = ] [1] [y (discriminator/discriminator_1/n_layer_discriminator/sequential_21/grouped_conv1d_3/weight_normalization_304/cond/assert_equal_1/y:0) = ] [0]\n [[{{node discriminator/discriminator_1/n_layer_discriminator/sequential_21/grouped_conv1d_3/weight_normalization_304/cond/assert_equal_1/Assert/AssertGuard/Assert}}]]\n </denchmark-code>\n \n <denchmark-h:h3>Proposed solution</denchmark-h>\n \n Add the following line of code to the tfa.layers.WeightNormalization.build function:\n <denchmark-code>self._initialized_critical_section = tf.CriticalSection(name='initialized_mutex')\n </denchmark-code>\n \n Replace g = tf.cond(self._initialized, _do_nothing, _update_weights) in the tfa.layers.WeightNormalization.call function with the following lines of code:\n <denchmark-code>def _get_initialized_weights():\n     return tf.cond(self._initialized, _do_nothing, _update_weights)\n g = self._initialized_critical_section.execute(_get_initialized_weights)\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "dominikroblek", "commentT": "2019-12-01T04:42:33Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/dominikroblek>@dominikroblek</denchmark-link>\n , thanks for the report! Are you willing to fill a PR and add some unittests for it? Thank you again.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "dominikroblek", "commentT": "2020-02-04T13:13:05Z", "comment_text": "\n \t\tWhat I see from the assert message ([The layer has been initialized.]) - it has nothing to do with the race conditions of parallel execution. It's a \"multiple initializations\" problem. CriticalSection won't help. Atomic flag (test-and-set lock mechanism) should have been there. And a piece of code to reproduce the problem, in the first place.\n \t\t"}}}, "commit": {"commit_id": "9bed3e960309532171860229eeb06430d54dd019", "commit_author": "Dheeraj R Reddy", "commitT": "2019-12-21 10:41:19-05:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "0.5"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow_addons\\layers\\wrappers.py", "file_new_name": "tensorflow_addons\\layers\\wrappers.py", "file_complexity": {"file_NLOC": "135", "file_CCN": "18", "file_NToken": "901"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "125,126", "deleted_lines": "124", "method_info": {"method_name": "call", "method_params": "self,inputs", "method_startline": "114", "method_endline": "137", "method_complexity": {"method_NLOC": "12", "method_CCN": "1", "method_NToken": "99", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "61", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,layer,data_init,kwargs", "method_startline": "57", "method_endline": "62", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "73", "method_nesting_level": "1"}}}}}}}}