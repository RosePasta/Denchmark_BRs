{"BR": {"BR_id": "511", "BR_author": "kazemnejad", "BRopenT": "2019-09-15T11:44:17Z", "BRcloseT": "2019-09-18T06:03:02Z", "BR_text": {"BRsummary": "Creating an instance of BasicDecoder fails with AttentionMechanism without memory", "BRdescription": "\n System information\n \n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Google Colab\n TensorFlow version and how it was installed (source or binary): 2.0.0-dev20190914\n TensorFlow-Addons version and how it was installed (source or binary): 0.6.0-dev\n Python version: 3.6\n Is GPU used? (yes/no): Yes\n \n Describe the bug\n When creating a BasicDecoder using an AttentionWrapper cell which itself is created by using an AttentionMechinsm without a memory, an error is raised.\n Code to reproduce the issue\n units = 32\n vocab_size = 1000\n attention_mechanism = tfa.seq2seq.LuongAttention(units)\n cell = tf.keras.layers.LSTMCell(units)\n attention_wrapper = tfa.seq2seq.AttentionWrapper(\n     cell, attention_mechanism)\n \n vocab_proj_layer = tf.keras.layers.Dense(vocab_size)\n decoder_sampler = tfa.seq2seq.sampler.TrainingSampler()\n decoder = tfa.seq2seq.BasicDecoder(\n     cell=attention_wrapper, \n     sampler=decoder_sampler, \n     output_layer=vocab_proj_layer)\n Other info / logs\n <denchmark-code>ValueError: The AttentionMechanism instances passed to this AttentionWrapper should be initialized with a memory first, either by passing it to the AttentionMechanism constructor or calling attention_mechanism.setup_memory()\n </denchmark-code>\n \n <denchmark-link:https://github.com/tensorflow/addons/files/3613698/error.txt>Full trace</denchmark-link>\n \n The cause of this error is probably the rnn_cell_impl.assert_like_rnncell(\"cell\", cell) check which is present in the BasicDecoder's constructor. The above assertion will end up in AttentionWrapper.output_size or AttentionWrapper.state_size.\n This issue is probably related to <denchmark-link:https://github.com/tensorflow/addons/issues/461>#461</denchmark-link>\n \n I encountered this issue when i was working on #335.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "kazemnejad", "commentT": "2019-09-15T13:05:04Z", "comment_text": "\n \t\tThanks for the report!\n It appears  reimplements its own  in terms of : <denchmark-link:https://github.com/tensorflow/tensorflow/commit/d70e8ee2d8c75d5af830f6f6ebc233fc93a89081>tensorflow/tensorflow@d70e8ee</denchmark-link>\n . This is certainly to support cells overriding  but it's unclear how common this use case is.\n As it is a private TensorFlow API, I would suggest to implement an alternative that works for us. What do you think?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "kazemnejad", "commentT": "2019-09-15T17:21:42Z", "comment_text": "\n \t\tYes, I think it would work completely fine. However, it would restrict the type of RNNCells that we could potentially accept. So probably we need to document it somewhere in our code to inform the future users.\n In addition, Maybe we should warn the user to not use our .output_size/.state_size before the memory initialization. And even double-check our code to make sure that we wait until the initialization of the memory.\n \t\t"}}}, "commit": {"commit_id": "b086968285088816c02a38f28852178bfbe4bb98", "commit_author": "Guillaume Klein", "commitT": "2019-09-18 14:03:01+08:00", "commit_complexity": {"commit_NLOC": "0.68", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow_addons\\seq2seq\\attention_wrapper.py", "file_new_name": "tensorflow_addons\\seq2seq\\attention_wrapper.py", "file_complexity": {"file_NLOC": "1084", "file_CCN": "137", "file_NToken": "6340"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "29,30,1639", "deleted_lines": "1637"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow_addons\\seq2seq\\basic_decoder.py", "file_new_name": "tensorflow_addons\\seq2seq\\basic_decoder.py", "file_complexity": {"file_NLOC": "68", "file_CCN": "12", "file_NToken": "504"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "54", "deleted_lines": "56", "method_info": {"method_name": "__init__", "method_params": "self,cell,sampler,output_layer,kwargs", "method_startline": "39", "method_endline": "65", "method_complexity": {"method_NLOC": "13", "method_CCN": "4", "method_NToken": "105", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow_addons\\seq2seq\\basic_decoder_test.py", "file_new_name": "tensorflow_addons\\seq2seq\\basic_decoder_test.py", "file_complexity": {"file_NLOC": "613", "file_CCN": "16", "file_NToken": "4291"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "695,696,697,698,699,700,701,702,703,704,705", "deleted_lines": null, "method_info": {"method_name": "testBasicDecoderWithAttentionWrapper", "method_params": "self", "method_startline": "695", "method_endline": "705", "method_complexity": {"method_NLOC": "10", "method_CCN": "1", "method_NToken": "74", "method_nesting_level": "1"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow_addons\\seq2seq\\beam_search_decoder.py", "file_new_name": "tensorflow_addons\\seq2seq\\beam_search_decoder.py", "file_complexity": {"file_NLOC": "671", "file_CCN": "82", "file_NToken": "4357"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "28,275", "deleted_lines": "30,31,32,277"}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow_addons\\utils\\keras_utils.py", "file_new_name": "tensorflow_addons\\utils\\keras_utils.py", "file_complexity": {"file_NLOC": "57", "file_CCN": "14", "file_NToken": "321"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "72,73,74,75,76,77,78,79,80,81,82", "deleted_lines": null, "method_info": {"method_name": "_hasattr", "method_params": "obj,attr_name", "method_startline": "72", "method_endline": "82", "method_complexity": {"method_NLOC": "9", "method_CCN": "3", "method_NToken": "34", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114", "deleted_lines": null, "method_info": {"method_name": "assert_like_rnncell", "method_params": "cell_name,cell", "method_startline": "85", "method_endline": "114", "method_complexity": {"method_NLOC": "16", "method_CCN": "4", "method_NToken": "94", "method_nesting_level": "0"}}}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "tensorflow_addons\\utils\\keras_utils_test.py", "file_new_name": "tensorflow_addons\\utils\\keras_utils_test.py", "file_complexity": {"file_NLOC": "32", "file_CCN": "5", "file_NToken": "264"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "45,46,47", "deleted_lines": null, "method_info": {"method_name": "test_non_cell", "method_params": "self", "method_startline": "45", "method_endline": "47", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "30", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "52,53", "deleted_lines": null, "method_info": {"method_name": "test_custom_cell.output_size", "method_params": "self", "method_startline": "52", "method_endline": "53", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "10", "method_nesting_level": "3"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "27,28,30,31,32,35,38", "deleted_lines": "26,28,31,34", "method_info": {"method_name": "test_normalize_tuple", "method_params": "self", "method_startline": "26", "method_endline": "38", "method_complexity": {"method_NLOC": "11", "method_CCN": "1", "method_NToken": "113", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "49,50,51,52,53,54,55", "deleted_lines": null, "method_info": {"method_name": "test_custom_cell", "method_params": "self", "method_startline": "49", "method_endline": "55", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "31", "method_nesting_level": "1"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "42,43", "deleted_lines": null, "method_info": {"method_name": "test_standard_cell", "method_params": "self", "method_startline": "42", "method_endline": "43", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "22", "method_nesting_level": "1"}}}}}}}}