{"BR": {"BR_id": "2094", "BR_author": "BinyanHu", "BRopenT": "2020-08-15T14:10:33Z", "BRcloseT": "2020-09-01T17:48:03Z", "BR_text": {"BRsummary": "Weights of Inner Optimizers Not Saved", "BRdescription": "\n System information\n \n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04 & Windows 10\n TensorFlow version and how it was installed (source or binary): 2.3.0 from source\n TensorFlow-Addons version and how it was installed (source or binary): 0.11.1 from source\n Python version: 3.7\n Is GPU used? (yes/no): yes\n \n Describe the bug\n Resume a training process needs the restoration of the optimizer states to continue training RIGHT from the previous state without any loss of accuracy. Currently, the keras interface of saving model keras.Model.save_weights  checkpoints both the network parameters and the optimizer weights. However, when an optimizer is wrapped inside another, its weights can not be saved by this mean.\n For example, when I was trying to use the Ranger optimizer, which is constructed by wrapping RAdam with Lookahead:\n <denchmark-code>optimizer = tfa.optimizers.Lookahead(\n     tfa.optimizers.RectifiedAdam()\n )\n </denchmark-code>\n \n I noticed a performance drop on resuming training. I found that the weights of the inner RAdam were not saved into the checkpoint. (I checked the .index file in the checkpoint folder and there are no variable names like \"m\" and \"v\", only \"slow\", which is the weights of Lookahead). Therefore, after loading the weights from file and restart fitting, the weights of RAdam are randomly reinitialized. This could because the weights of the inner optimizer are not automatically tracked.\n Experiments\n I trained the two LeNets on the FashionMNIST dataset. All the configurations are the same except for the optimizers. Both training are interrupted in the middle and then resumed.\n <denchmark-link:https://user-images.githubusercontent.com/26186061/90313678-f46e6d00-df40-11ea-9000-3fa8e429818d.png></denchmark-link>\n \n \n Note the \"bump\" of the Ranger curve caused by the reinitialization of RAdam weights. Apparently, the weights of the inner optimizer are not correctly saved.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "BinyanHu", "commentT": "2020-08-15T14:56:56Z", "comment_text": "\n \t\tCan you prepare a minimal PR with a new test to cover your case?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "BinyanHu", "commentT": "2020-08-15T15:03:00Z", "comment_text": "\n \t\tSo that we could check if It is similar to <denchmark-link:https://github.com/tensorflow/addons/issues/1911>#1911</denchmark-link>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "BinyanHu", "commentT": "2020-08-15T16:40:28Z", "comment_text": "\n \t\t\n So that we could check if It is similar to #1911\n \n Our issues are similar. But the real problem is on the missing weights of the inner RAdam optimizer.\n First, I reran my program with status.assert_consumed(), and the errors are as follows:\n <denchmark-code>AssertionError:\n Unresolved object in checkpoint (root).optimizer.iter: attributes {\n   name: \"VARIABLE_VALUE\"\n   full_name: \"iter\"\n   checkpoint_key: \"optimizer/iter/.ATTRIBUTES/VARIABLE_VALUE\"\n }\n </denchmark-code>\n \n Same as <denchmark-link:https://github.com/tensorflow/addons/issues/1911>#1911</denchmark-link>\n . This is because the variable  is not yet created by the time when we load the weights. If we do  after fitting the model, the error goes away. The following warnings of all \"slow\" of the network parameters are not used in that issue are caused merely by non-training mode does not require loading the optimizer states, which is not a problem. In all, calling  right after loading weights does not reveal the problem.\n Second, learning rate warmup could help RAdam to re-accumulate the mean and variance statistics with small steps rather than \"messing up\" the network weights in the first few steps on resuming. This can, to some extent, alleviate the missing of the RAdam weights, but is definitely not the correct solution.\n Plus, I just checked the sizes of the checkpoint files: Ranger 3381kb and RAdam 5070kb. With an extra slot \"slow\", the size of the Ranger checkpoint should not be smaller, indicating that the weights of RAdam are missing.\n I think the reason is evident here. If a PR is still needed, how should the test be conducted? Would saving and loading a model with a Lookahead-wrapped optimizer with slots be enough to demonstrate the problem?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "BinyanHu", "commentT": "2020-08-15T17:10:18Z", "comment_text": "\n \t\tLookahead test has no serializzation test currently.\n So I think that you can add a small one and let It to fail in <denchmark-link:https://github.com/tensorflow/addons/blob/master/tensorflow_addons/optimizers/tests/lookahead_test.py>https://github.com/tensorflow/addons/blob/master/tensorflow_addons/optimizers/tests/lookahead_test.py</denchmark-link>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "BinyanHu", "commentT": "2020-08-15T17:17:08Z", "comment_text": "\n \t\tCheck if some of the original author tests could be useful <denchmark-link:https://github.com/CyberZHG/keras-lookahead/blob/master/tests/test_optimizers.py>https://github.com/CyberZHG/keras-lookahead/blob/master/tests/test_optimizers.py</denchmark-link>\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "BinyanHu", "commentT": "2020-08-15T17:18:50Z", "comment_text": "\n \t\t/cc <denchmark-link:https://github.com/CyberZHG>@CyberZHG</denchmark-link>\n \n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "BinyanHu", "commentT": "2020-08-15T17:23:11Z", "comment_text": "\n \t\tAlso check that you are recovering custom objects on load e.g. custom_objects={ 'RAdam': RAdam, 'Lookahead': Lookahead, })\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "BinyanHu", "commentT": "2020-08-16T15:51:41Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/BinyanHu>@BinyanHu</denchmark-link>\n , thanks for investigating this. Can you provide the minimal code snippet to reproduce the issue, e.g. the way you save the model? Thank you!\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "BinyanHu", "commentT": "2020-08-16T16:09:20Z", "comment_text": "\n \t\t<denchmark-code>AssertionError:\n Unresolved object in checkpoint (root).optimizer.iter: attributes {\n   name: \"VARIABLE_VALUE\"\n   full_name: \"iter\"\n   checkpoint_key: \"optimizer/iter/.ATTRIBUTES/VARIABLE_VALUE\"\n }\n \n </denchmark-code>\n \n I think this is because of the fact that the value you pass to your optimizer is float, it gives this warning. You can use tf.Variable() for that.\n On the other hand, I feel this is the real issue here\n <denchmark-code>Plus, I just checked the sizes of the checkpoint files: Ranger 3381kb and RAdam 5070kb. With an extra slot \"slow\", the size of the Ranger checkpoint should not be smaller, indicating that the weights of RAdam are missing.\n </denchmark-code>\n \n \t\t"}}}, "commit": {"commit_id": "2bf57f8383cd84aa145905aa01a30f59824feb2b", "commit_author": "bhack", "commitT": "2020-09-01 10:48:02-07:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow_addons\\optimizers\\average_wrapper.py", "file_new_name": "tensorflow_addons\\optimizers\\average_wrapper.py", "file_complexity": {"file_NLOC": "99", "file_CCN": "21", "file_NToken": "673"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "49", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow_addons\\optimizers\\lookahead.py", "file_new_name": "tensorflow_addons\\optimizers\\lookahead.py", "file_complexity": {"file_NLOC": "154", "file_CCN": "17", "file_NToken": "830"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "83", "deleted_lines": null}}}}}}