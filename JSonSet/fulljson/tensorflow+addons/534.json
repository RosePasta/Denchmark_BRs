{"BR": {"BR_id": "534", "BR_author": "kazemnejad", "BRopenT": "2019-09-20T19:53:00Z", "BRcloseT": "2019-10-07T18:28:09Z", "BR_text": {"BRsummary": "BasicDecoder fails with masked input tensor", "BRdescription": "\n System information\n \n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04\n TensorFlow version and how it was installed (source or binary): binary(2.0.0-dev20190920)\n TensorFlow-Addons version and how it was installed (source or binary): binary(0.6.0-dev)\n Python version: 3.6\n Is GPU used? (yes/no): yes\n \n Describe the bug\n When the BasicDecoder receives a tensor equipped with masking meta-data as the input, it will fail due to the unhandled mask argument in TrainingSampler.initialize(..). This is a common scenario in which the input tensor is computed using the embedding layer.\n Code to reproduce the issue\n units = 32\n vocab_size = 1000\n embedding = tf.keras.layers.Embedding(\n     input_dim=vocab_size, output_dim=units, mask_zero=True)\n attention_mechanism = attention_wrapper.LuongAttention(units)\n cell = tf.keras.layers.LSTMCell(units)\n cell = tfa.seq2seq.AttentionWrapper(cell, attention_mechanism)\n output_layer = tf.keras.layers.Dense(vocab_size)\n sampler = tfa.seq2seq.sampler.TrainingSampler()\n decoder = tfa.seq2seq.BasicDecoder(\n     cell, sampler, output_layer=output_layer)\n \n # setup the attention mechanism's memory with a random tensor\n fake_mem = tf.random.normal((2, 3, units))\n fake_mem_mask = tf.ones((2,3), dtype=tf.bool)\n attention_mechanism(fake_mem, mask=fake_mem_mask, setup_memory=True)\n \n word_ids = tf.random.uniform((2, 5), 0, vocab_size, dtype=tf.int64) \\\n             * tf.constant([[1, 1, 1, 0, 0], [1, 1, 1, 1, 1]], dtype=tf.int64)\n word_embeds = embedding(word_ids)\n mask = embedding.compute_mask(word_ids)\n \n initial_state = cell.get_initial_state(batch_size=2, dtype=tf.float32)\n outputs = decoder(\n     inputs=word_embeds,\n     initial_state=initial_state,\n     sequence_length=tf.math.reduce_sum(tf.cast(mask, tf.int32), axis=1),\n )\n It will raise the following error:\n <denchmark-code>  File \"tensorflow_addons/seq2seq/basic_decoder.py\", line 72, in initialize\n     return self.sampler.initialize(inputs, **kwargs) + (initial_state,)\n TypeError: initialize() got an unexpected keyword argument 'mask'\n </denchmark-code>\n \n Other info / logs\n This issue happens because we capture the mask argument on the BaseDecoder.call(..., **kwargs) and propagate it all the way through TrainingSample.initialize(...) except that the initialize method doesn't accept the mask argument.\n One can temporarily fix this error by adding delattr(word_embeds, '_keras_mask') just before calling the decoder instance.\n I encountered this issue when i was working on #335\n Ideas to fix this issue:\n \n Fix the BasicDecoder to only pass the appropriate argument when it calls the sampler. or even fix the TrainingSampler to capture all other arguments using the kwargs\n Add the appropriate support for the mask argument in the TrainingSampler in additon to sequence_length (similar to AttentionMechanism)\n \n I think there is no harm in the latter option as it provides a more Keras-friendly way to work with the framework.\n \t"}, "comments": {}}, "commit": {"commit_id": "83d28c90dcdf8d361ee5d3102258d924459e911c", "commit_author": "Amirhossein Kazemnejad", "commitT": "2019-10-07 14:28:08-04:00", "commit_complexity": {"commit_NLOC": "0.20353982300884957", "commit_CCN": "0.6017699115044248", "commit_Nprams": "0.9557522123893806"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow_addons\\seq2seq\\basic_decoder_test.py", "file_new_name": "tensorflow_addons\\seq2seq\\basic_decoder_test.py", "file_complexity": {"file_NLOC": "712", "file_CCN": "22", "file_NToken": "5029"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219", "deleted_lines": null, "method_info": {"method_name": "testStepWithTrainingHelperMaskedInput", "method_params": "self,use_mask", "method_startline": "127", "method_endline": "219", "method_complexity": {"method_NLOC": "85", "method_CCN": "5", "method_NToken": "618", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "803,804,805,806,807,808,809,810,811,812,813,814,815,816", "deleted_lines": null, "method_info": {"method_name": "testRightPaddedSequenceAssertion", "method_params": "self", "method_startline": "803", "method_endline": "816", "method_complexity": {"method_NLOC": "12", "method_CCN": "1", "method_NToken": "95", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 8, "file_old_name": "tensorflow_addons\\seq2seq\\sampler.py", "file_new_name": "tensorflow_addons\\seq2seq\\sampler.py", "file_complexity": {"file_NLOC": "517", "file_CCN": "85", "file_NToken": "3468"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "803,804,805,806,807,808,809,810,811,812,813,814,815,816,817", "deleted_lines": null, "method_info": {"method_name": "_check_sequence_is_right_padded", "method_params": "mask,time_major", "method_startline": "803", "method_endline": "817", "method_complexity": {"method_NLOC": "11", "method_CCN": "2", "method_NToken": "107", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "433,434,435,436,437", "deleted_lines": null, "method_info": {"method_name": "initialize", "method_params": "self,inputs,sequence_length,mask,auxiliary_inputs", "method_startline": "433", "method_endline": "437", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "19", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "337,338,339,340,341", "deleted_lines": null, "method_info": {"method_name": "initialize", "method_params": "self,inputs,sequence_length,mask,embedding", "method_startline": "337", "method_endline": "341", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "19", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "205,211,223,224,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241", "deleted_lines": "204,222,223,224,225,226,227,228,229,234,235", "method_info": {"method_name": "initialize", "method_params": "self,inputs,sequence_length", "method_startline": "204", "method_endline": "241", "method_complexity": {"method_NLOC": "22", "method_CCN": "4", "method_NToken": "210", "method_nesting_level": "1"}}}, "hunk_4": {"Ismethod": 1, "added_lines": null, "deleted_lines": "400,418", "method_info": {"method_name": "initialize", "method_params": "self,inputs,sequence_length,auxiliary_inputs", "method_startline": "400", "method_endline": "418", "method_complexity": {"method_NLOC": "18", "method_CCN": "4", "method_NToken": "133", "method_nesting_level": "1"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "184,185", "deleted_lines": "184", "method_info": {"method_name": "__init__", "method_params": "self,time_major", "method_startline": "176", "method_endline": "188", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "20", "method_nesting_level": "1"}}}, "hunk_6": {"Ismethod": 1, "added_lines": null, "deleted_lines": "308,317", "method_info": {"method_name": "initialize", "method_params": "self,inputs,sequence_length,embedding", "method_startline": "308", "method_endline": "317", "method_complexity": {"method_NLOC": "10", "method_CCN": "3", "method_NToken": "68", "method_nesting_level": "1"}}}, "hunk_7": {"Ismethod": 1, "added_lines": "205,211,223,224,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260", "deleted_lines": "222,223,224,225,226,227,228,229,234,235", "method_info": {"method_name": "initialize", "method_params": "self,inputs,sequence_length,mask", "method_startline": "205", "method_endline": "270", "method_complexity": {"method_NLOC": "45", "method_CCN": "10", "method_NToken": "391", "method_nesting_level": "1"}}}}}}}}