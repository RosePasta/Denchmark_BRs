{"BR": {"BR_id": "277", "BR_author": "fepegar", "BRopenT": "2020-08-18T14:47:43Z", "BRcloseT": "2020-09-17T17:41:52Z", "BR_text": {"BRsummary": "Error in weighted sampler if no sampling map is passed", "BRdescription": "\n \ud83d\udc1bBug\n The sampling map name should be mandatory.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "fepegar", "commentT": "2020-09-12T10:31:34Z", "comment_text": "\n \t\tI would consider using keyword-only arguments through the project.\n Namely, instead of:\n def f(a,b,c=5):\n you can use:\n def f(a,b,*,c=5)\n The difference is the calling. f(1,2,3) is valid for the first, but not for the second. f(1,2,c=3) is valid for both.\n Keyword-only arguments help to stabilize API, because if you rearrange the keywords,\n the function will work as it did before.\n E.g. changing from def f(a,b,,c=5) to def f(a,b,,d=1, c=5) is safe,\n but from  def f(a,b,c=5)   to   def f(a,b,d=1,c=5) makes silently leads to mistakes when you call it as f(1,2,3).\n Also, while mypy is nice for testing, pycontracts could be considered for runtime checks.\n It supports well beyond basic type checking, e.g. it allows ranges:  x=int, >3, <5\n This could be handy for checking dimensions, requiring valid file names, etc.\n So in the above example, you could set probability map to be torch.Tensor or numpy array,\n and it would give runtime error if the input was None, or none of the two types.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "fepegar", "commentT": "2020-09-17T17:32:44Z", "comment_text": "\n \t\tI like the idea of using  in signatures: <denchmark-link:https://github.com/fepegar/torchio/pull/290#discussion_r489784437>#290 (comment)</denchmark-link>\n .\n \n E.g. changing from def f(a,b,,c=5) to def f(a,b,,d=1, c=5) is safe,\n but from def f(a,b,c=5) to def f(a,b,d=1,c=5) makes silently leads to mistakes when you call it as f(1,2,3).\n \n I guess the stars are missing in this examples.\n \n Also, while mypy is nice for testing, pycontracts could be considered for runtime checks.\n It supports well beyond basic type checking, e.g. it allows ranges: x=int, >3, <5\n This could be handy for checking dimensions, requiring valid file names, etc.\n \n I didn't know pycontracts. I'll give it a try!\n Thanks, <denchmark-link:https://github.com/dvolgyes>@dvolgyes</denchmark-link>\n .\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "fepegar", "commentT": "2020-09-22T16:21:15Z", "comment_text": "\n \t\tI'm tinkering with pycontracts. It looks nice, but there are (for now) some things I don't like from the point of view of users:\n \n I have to explicitly say that a number can be int or float, not just float\n Exception messages are huge. This is something I really want to avoid\n Docs look less nice. Examples:\n \n <denchmark-link:https://user-images.githubusercontent.com/12688084/93909538-c0ccf280-fcf7-11ea-9783-ec231bf3d477.png></denchmark-link>\n \n \n In this example, the user seems to be expected to understand contracts syntax.\n \n <denchmark-link:https://user-images.githubusercontent.com/12688084/93909542-c1fe1f80-fcf7-11ea-9eb9-c42836b6d283.png></denchmark-link>\n \n \n In this example, I have defined the `'probability'` contract before, but this is not expanded and therefore not useful for the user.\n \n What do you think?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "fepegar", "commentT": "2020-09-22T16:29:01Z", "comment_text": "\n \t\tExample of code that generates a huge error:\n from contracts import contract\n \n class A:\n     @contract\n     def __init__(self, d: 'float'):\n         pass\n \n A(1)\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "fepegar", "commentT": "2020-09-22T21:35:00Z", "comment_text": "\n \t\tThere is a solution for everything.\n Of course, you could educate the users/developers, but also, it is quite easy to customize the exception.\n I guess this code shows everything which is needed.\n If you don't like the pycontracts style, you could put your own contract (see below) into torchio.contract,\n and use it as:\n from torchio import contract\n @contract\n ....\n And my long example with some details:\n #!/usr/bin/python3\n from contracts import contract as original_contract\n from contracts.interface import ContractNotRespected\n \n import traceback\n import sys\n \n def contract(func,*args, **kwargs):\n     def wrapper(*args,**kwargs):\n         try:\n             result = original_contract(func)\n             return result(*args,**kwargs)\n         except Exception as e:\n             print('You have useful information in the exception')\n             for key in dir(e):\n                 if not key.startswith('__'):\n                     print(f\" e.{key} = {getattr(e,key)}\")\n             print(f\"{e.__doc__=}\")\n             print(f\"{func.__doc__=}\")\n             print(\"\")\n             print(\"\")\n             print(\"\")\n             print('Oh-oh, you made a serious error here:')\n             traceback.print_stack(file=sys.stdout, limit=-1) #Let's print the stack trace without boilerplate\n             print(\"\")\n             print(e.error)\n             print(f\"Well, the annotations for function are:\")\n             print(f\"   {func.__annotations__}\")\n             print(f\"\")\n             print(f\"Maybe you should read the documentation?\")\n             print(f\"https://torchio.readthedocs.io/search.html?q={func.__qualname__}\")\n             sys.exit(1)\n     return wrapper\n \n @contract\n def test(x:int, z:int=3):\n     \"\"\"docstring comes here\"\"\"\n     return x\n \n test(1,4)\n test('random input')\n The result will be something like this (assuming it is in the test.py):\n You have useful information in the exception\n  e.args = (CheckType(int), \"Expected type 'int', got <class 'str'>.\", 'random input', {})\n  e.context = {}\n  e.contract = int\n  e.error = Breach for argument 'x' to test().\n Expected type 'int', got <class 'str'>.\n  e.stack = [(CheckType(int), {}, 'random input')]\n  e.value = random input\n  e.with_traceback = <built-in method with_traceback of ContractNotRespected object at 0x7f26f496e700>\n e.__doc__=' Exception thrown when a value does not respect a contract. '\n func.__doc__='docstring comes here'\n \n \n \n Oh-oh, you made a serious error here:\n   File \"test.py\", line 41, in <module>\n     test('random input')\n \n Breach for argument 'x' to test().\n Expected type 'int', got <class 'str'>.\n Well, the annotations for function are:\n    {'x': <class 'int'>, 'z': <class 'int'>}\n \n Maybe you should read the documentation?\n https://torchio.readthedocs.io/search.html?q=test\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "fepegar", "commentT": "2020-09-22T21:40:36Z", "comment_text": "\n \t\tYou can also put the contracts into two places: into the contract decorator or into the docstring.\n Is it nice or not? Well, that is a good question. You can always add an extra part in the docstring,\n like a textual marker, e.g. 'Expected constraints:', and just like i printed the url,\n you could cut out this part of the docstring, and print it to screen.\n Then ensuring this part will be necessary during pull requests.\n Or just saying, e.g. \"read the documentation, variable 'x' did not fulfill the requirements\n either for its type or for its value\".\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "fepegar", "commentT": "2020-09-22T21:48:23Z", "comment_text": "\n \t\tYou can also formulate the contracts and check them individually, like an assert at the beginning of the\n function, and make an error message if the contract is breached.\n (see contracts.check and contracts.check_multiple)\n These also could be wrapped / or put into a try/except section, like:\n def custom_check(contract, variable):\n    try:\n       check(contract, variable)\n    except:\n      print(\"Hey, this contract wasn't met: {contract}\")\n      raise Exception from None\n Or something like this, see the other example above too.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "fepegar", "commentT": "2020-09-29T18:24:57Z", "comment_text": "\n \t\tNice, sounds like the exceptions could be improved then. Do you have a solution for point 3. in <denchmark-link:https://github.com/fepegar/torchio/issues/277#issuecomment-696829428>#277 (comment)</denchmark-link>\n ?\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "fepegar", "commentT": "2020-09-29T21:51:03Z", "comment_text": "\n \t\tWell, it depends how you define readability.\n There are 3 ways to define contracts:\n \n signature\n docstring\n decorator\n I hate the signature part, it looks super-confusing i think.\n Docstring looks reasonably good, but might confuse single readers, so i usually end up with the decorator, like:\n \n <denchmark-code>@contract(n='int, >=1')\n def factorial(n):\n      if n==1: return 1\n     return n*factorial(n-1)\n </denchmark-code>\n \n Since i don't use mypy, i actually don't need annotation, but it is nice to have.\n As far as i remember pycontracts support multiple contracts, so you can have contract\n in form of annotation and also as a decorator, but the interplay is a bit fishy, e.g. consider this:\n <denchmark-code>@contract(n='float, >1 | int, >=1')\n def factorial(n:int):\n      if n==1: return 1\n     return n*factorial(n-1)\n </denchmark-code>\n \n How suppose this to work?\n As long as the annotation is only defined on one place, it could not really get unsynchronized.\n If it is defined at two places, it could.\n But there is a soft remedy: first, you don't have to apply it everywhere.\n Use it where it is straightforward, or where it is a frequently used public interface.\n Hopefully, the internal parts should be tested with unit-tests anyway, the major public interfaces\n the ones what people most likely will misuse, e.g. __init__.\n Secondly, it can be gradually introduced after a bug fix / refactoring, checking if it helps or not.\n Anyway, i am not strongly pushing it, but it helps time to time, especially with some trickier parts, e.g.\n <denchmark-code>from pathlib import Path\n new_contract('existing_file', lambda p: Path(p).exists())\n new_contract('existing_dir', lambda p: Path(p).exists() and Path(p).is_dir())\n </denchmark-code>\n \n Because for most routines, you expect a filename, but you don't actually test if it exists, etc.,\n rather the open function will raise an exception. This is fine most of the time, except when the\n exception is really deep in a stack trace, and it is hard to figure out what was the reason.\n But stating that the file does'nt exist is a nice and straightforward explanation.\n Also, 'existing_file' as a type doesn't tell much in a docstring or in a type annotation, so\n i prefer it in the decorator format.\n (You could have fancy conditions, like a tensor with finite values (no NaN of inf), but these might be expensive\n checks, don't overuse it. But i have used these kind of checks for debugging, they are most helpful there.\n I actually wish a multi-level contract system, like some contracts could be only checked in debug mode,\n some should be checked always. But the framework doesn't have such option currently.)\n So my two cents:\n \n contracts in decorator, maybe textual explanation in docstring when it is not obvious\n custom 'contract' decorator from  torchio, which wraps the exceptions, see above.\n if you don't like it, you can just disable contracts with a simple call.\n (Redefine the contract function in torchio to a no-op, so they will not be just ignored,\n this could depend on environmental variables, like TORCHIO_DISABLE_CONTRACTS=1, see the dotenv package,\n https://github.com/theskumar/python-dotenv )\n \n But i am also happy without pycontracts, it was just a soft recommendation. :)\n \t\t"}}}, "commit": {"commit_id": "6fa4612653d780f8751d0c1efd5f3f8a2f005fd0", "commit_author": "Fernando", "commitT": "2020-09-17 18:40:11+01:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "torchio\\data\\sampler\\uniform.py", "file_new_name": "torchio\\data\\sampler\\uniform.py", "file_complexity": {"file_NLOC": "14", "file_CCN": "2", "file_NToken": "72"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "14", "deleted_lines": "14", "method_info": {"method_name": "__init__", "method_params": "self,TypePatchSize", "method_startline": "13", "method_endline": "14", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "19", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "torchio\\data\\sampler\\weighted.py", "file_new_name": "torchio\\data\\sampler\\weighted.py", "file_complexity": {"file_NLOC": "215", "file_CCN": "11", "file_NToken": "805"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "57", "deleted_lines": "57", "method_info": {"method_name": "__init__", "method_params": "self,TypePatchSize,str", "method_startline": "54", "method_endline": "58", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "14", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "57", "deleted_lines": "57", "method_info": {"method_name": "__init__", "method_params": "self,TypePatchSize,None", "method_startline": "54", "method_endline": "58", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "19", "method_nesting_level": "1"}}}}}}}}