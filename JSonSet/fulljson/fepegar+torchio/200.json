{"BR": {"BR_id": "200", "BR_author": "fepegar", "BRopenT": "2020-06-20T14:48:32Z", "BRcloseT": "2020-06-20T15:03:26Z", "BR_text": {"BRsummary": "Avoid unnecessary copies when the input of Transform is a tensor", "BRdescription": "\n There is no need to deepcopy the input sample in Transform if it is a tensor, as it will be performed by ImagesDataset._get_sample_dict_from_subject anyway.\n \n \n \n torchio/torchio/transforms/transform.py\n \n \n         Lines 45 to 55\n       in\n       89b7641\n \n \n \n \n \n \n  if isinstance(data, (np.ndarray, torch.Tensor)): \n \n \n \n  is_array = isinstance(data, np.ndarray) \n \n \n \n  is_tensor = True \n \n \n \n  sample = self.parse_tensor(data) \n \n \n \n  else: \n \n \n \n  is_tensor = is_array = False \n \n \n \n  sample = data \n \n \n \n  self.parse_sample(sample) \n \n \n \n  if torch.rand(1).item() > self.probability: \n \n \n \n  return sample \n \n \n \n  sample = deepcopy(sample) \n \n \n \n \n \n \n \n \n torchio/torchio/data/dataset.py\n \n \n         Lines 130 to 136\n       in\n       89b7641\n \n \n \n \n \n \n  def _get_sample_dict_from_subject(self, subject: Subject): \n \n \n \n  \"\"\"Create a dictionary of dictionaries with subject information. \n \n \n \n   \n \n \n \n          Args: \n \n \n \n              subject: Instance of :py:class:`~torchio.data.subject.Subject`. \n \n \n \n          \"\"\" \n \n \n \n  subject_sample = copy.deepcopy(subject) \n \n \n \n \n \n \t"}, "comments": {}}, "commit": {"commit_id": "13a46cc68407e0002d989f325a0a0b4b02aaeeb0", "commit_author": "Fernando", "commitT": "2020-06-20 16:02:40+01:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "0.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "torchio\\transforms\\transform.py", "file_new_name": "torchio\\transforms\\transform.py", "file_complexity": {"file_NLOC": "135", "file_CCN": "28", "file_NToken": "678"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "55,56,57,58,59", "deleted_lines": "55", "method_info": {"method_name": "__call__", "method_params": "self,Subject", "method_startline": "34", "method_endline": "73", "method_complexity": {"method_NLOC": "25", "method_CCN": "7", "method_NToken": "164", "method_nesting_level": "1"}}}}}}}}