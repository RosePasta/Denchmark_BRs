{"BR": {"BR_id": "407", "BR_author": "fepegar", "BRopenT": "2021-01-01T18:39:20Z", "BRcloseT": "2021-01-01T19:14:54Z", "BR_text": {"BRsummary": "RuntimeError: Can only calculate the mean of floating types. Got Short instead", "BRdescription": "\n \ud83d\udc1bBug\n From the inference notebook.\n To reproduce\n # From NiftyNet model zoo\n LI_LANDMARKS = \"4.4408920985e-16 8.06305571158 15.5085721044 18.7007018006 21.5032879029 26.1413278906 29.9862059045 33.8384058795 38.1891334787 40.7217966068 44.0109152758 58.3906435207 100.0\"\n li_landmarks = np.array([float(n) for n in LI_LANDMARKS.split()])\n \n transforms = [\n     tio.ToCanonical(),\n     tio.Resample(1),\n     tio.HistogramStandardization(landmarks={'t1': li_landmarks}, masking_method=tio.ZNormalization.mean),\n     tio.ZNormalization(masking_method=tio.ZNormalization.mean),\n ]\n transform = tio.Compose(transforms)\n preprocessed = transform(subject)\n ---------------------------------------------------------------------------\n RuntimeError                              Traceback (most recent call last)\n <ipython-input-5-f7eeffa30bdc> in <module>()\n      10 ]\n      11 transform = tio.Compose(transforms)\n ---> 12 preprocessed = transform(subject)\n \n 5 frames\n /usr/local/lib/python3.6/dist-packages/torchio/transforms/transform.py in __call__(self, data)\n     100             subject = copy.copy(subject)\n     101         with np.errstate(all='raise'):\n --> 102             transformed = self.apply_transform(subject)\n     103         self.add_transform_to_subject_history(transformed)\n     104         for image in transformed.get_images(intensity_only=False):\n \n /usr/local/lib/python3.6/dist-packages/torchio/transforms/augmentation/composition.py in apply_transform(self, subject)\n      44     def apply_transform(self, subject: Subject) -> Subject:\n      45         for transform in self.transforms:\n ---> 46             subject = transform(subject)\n      47         return subject\n      48 \n \n /usr/local/lib/python3.6/dist-packages/torchio/transforms/transform.py in __call__(self, data)\n     100             subject = copy.copy(subject)\n     101         with np.errstate(all='raise'):\n --> 102             transformed = self.apply_transform(subject)\n     103         self.add_transform_to_subject_history(transformed)\n     104         for image in transformed.get_images(intensity_only=False):\n \n /usr/local/lib/python3.6/dist-packages/torchio/transforms/preprocessing/intensity/normalization_transform.py in apply_transform(self, subject)\n      46     def apply_transform(self, subject: Subject) -> Subject:\n      47         for image_name, image in self.get_images_dict(subject).items():\n ---> 48             mask = Transform.get_mask(self.masking_method, subject, image.data)\n      49             self.apply_normalization(subject, image_name, mask)\n      50         return subject\n \n /usr/local/lib/python3.6/dist-packages/torchio/transforms/transform.py in get_mask(masking_method, subject, tensor)\n     394             return Transform.ones(tensor)\n     395         elif callable(masking_method):\n --> 396             return masking_method(tensor)\n     397         elif type(masking_method) is str:\n     398             if masking_method in subject and isinstance(subject[masking_method], LabelMap):\n \n /usr/local/lib/python3.6/dist-packages/torchio/transforms/transform.py in mean(tensor)\n     386     @staticmethod\n     387     def mean(tensor: torch.Tensor) -> torch.Tensor:\n --> 388         mask = tensor > tensor.mean()\n     389         return mask\n     390 \n \n RuntimeError: Can only calculate the mean of floating types. Got Short instead.\n TorchIO version\n 0.18.14\n \t"}, "comments": {}}, "commit": {"commit_id": "21f03117f213caa0c46c6d45a7dfd9afad4be823", "commit_author": "Fernando P\u00e9rez-Garc\u00eda", "commitT": "2021-01-01 19:14:53+00:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\transforms\\preprocessing\\test_z_normalization.py", "file_new_name": "tests\\transforms\\preprocessing\\test_z_normalization.py", "file_complexity": {"file_NLOC": "20", "file_CCN": "3", "file_NToken": "183"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "20,21,22,23,24,25,26", "deleted_lines": null, "method_info": {"method_name": "test_dtype", "method_params": "self", "method_startline": "20", "method_endline": "26", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "56", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "torchio\\transforms\\preprocessing\\intensity\\histogram_standardization.py", "file_new_name": "torchio\\transforms\\preprocessing\\intensity\\histogram_standardization.py", "file_complexity": {"file_NLOC": "248", "file_CCN": "12", "file_NToken": "1208"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "163,169,170,171", "deleted_lines": "162,164,170,171"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "torchio\\transforms\\transform.py", "file_new_name": "torchio\\transforms\\transform.py", "file_complexity": {"file_NLOC": "427", "file_CCN": "58", "file_NToken": "2003"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "401", "deleted_lines": "401", "method_info": {"method_name": "mean", "method_params": "Tensor", "method_startline": "400", "method_endline": "402", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "28", "method_nesting_level": "1"}}}}}}}}