{"BR": {"BR_id": "206", "BR_author": "fepegar", "BRopenT": "2020-06-24T13:01:12Z", "BRcloseT": "2020-06-26T09:20:39Z", "BR_text": {"BRsummary": "RandomGhosting algorithm removes zero-frequency component", "BRdescription": "\n \ud83d\udc1bBug\n When the ghosting algorithm removes the center of k-space, the image is too distorted.\n To reproduce\n I'm using <denchmark-link:https://www.dropbox.com/s/3342ndv600tcmjp/t1.nii.gz?dl=1>this image</denchmark-link>\n  and the <denchmark-link:https://torchio.readthedocs.io/slicer.html>TorchIO Slicer module</denchmark-link>\n .\n 8 ghosts along axis 2:\n <denchmark-link:https://user-images.githubusercontent.com/12688084/85559148-5980a300-b621-11ea-8e1d-3b0d590bff1b.png></denchmark-link>\n \n 7 ghosts:\n <denchmark-link:https://user-images.githubusercontent.com/12688084/85559190-67362880-b621-11ea-90bc-8ffd59b244f6.png></denchmark-link>\n \n The shape of the image along axis 2 is 176, which is a multiple of 8.\n Expected behavior\n An image that looks more like the second.\n TorchIO version\n 0.17.0.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "fepegar", "commentT": "2020-06-24T13:05:24Z", "comment_text": "\n \t\tIf the zero-frequency component is restored, the image looks more natural, but the artifact is not very visible.\n <denchmark-link:https://user-images.githubusercontent.com/12688084/85561186-466ed280-b623-11ea-91a7-04091b342bb8.png></denchmark-link>\n \n Also, there's no reason to limit the intensity kwarg to 1. Maybe the intensity could be scaled to be inversely proportional to the number of ghosts. If number of ghosts is set to 2:\n <denchmark-link:https://user-images.githubusercontent.com/12688084/85561599-a2d1f200-b623-11ea-9ec5-a0dac1e28ea0.png></denchmark-link>\n \n This also looks a bit like the original image. Maybe it's better to restore not just the middle line of k-space, but a percentage of the k-space around the center, e.g. 2-5%.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "fepegar", "commentT": "2020-06-24T14:04:23Z", "comment_text": "\n \t\tthere is already a  percentage_to_avoid = 0.05 in the code,\n no ?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "fepegar", "commentT": "2020-06-24T14:22:51Z", "comment_text": "\n \t\tLastly, I think there's no reason to take only images with positive values. We could use the real part of the inverse Fourier transform instead of the magnitude:\n <denchmark-link:https://user-images.githubusercontent.com/12688084/85565186-d2362e00-b626-11ea-8b53-48b77b189a12.png></denchmark-link>\n \n This is the result of using 8 ghosts and getting the real component instead of the magnitude:\n <denchmark-link:https://user-images.githubusercontent.com/12688084/85574282-8ab3a000-b62e-11ea-9b9d-6995748a4a34.png></denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "fepegar", "commentT": "2020-06-24T14:24:05Z", "comment_text": "\n \t\t\n there is already a percentage_to_avoid = 0.05 in the code,\n no ?\n \n Yes, you're right. But it doesn't seem to be working, and the code I wrote for RandomGhosting is not clear. I have a new implementation, I'll open a PR in a second.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "fepegar", "commentT": "2020-06-24T14:35:34Z", "comment_text": "\n \t\tok\n I am surprise about the visual different between abs and real (what is the color map in both (min max values)\n The reason taking the abs is that this is what is done in the acquisition process ... (you never get negative values in raw images) but not sure if we have to follow it ...\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "fepegar", "commentT": "2020-06-24T14:37:48Z", "comment_text": "\n \t\tIn that plot I used an image with negative values to accentuate the issue. I don't know much about raw values from the MR scan. Are they always positive?\n I think the imaginary component in the plot is just noise, almost 0, so taking the real part only would make sense.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "fepegar", "commentT": "2020-06-24T14:51:59Z", "comment_text": "\n \t\tHere's the notebook I've been playing with: <denchmark-link:https://colab.research.google.com/drive/1Uk5Zq-uJFdyGh7Dzs7agprH1H5IYU0KP?usp=sharing>https://colab.research.google.com/drive/1Uk5Zq-uJFdyGh7Dzs7agprH1H5IYU0KP?usp=sharing</denchmark-link>\n \n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "fepegar", "commentT": "2020-06-24T14:55:44Z", "comment_text": "\n \t\t\n In that plot I used an image with negative values to accentuate the issue. I don't know much about raw values from the MR scan. Are they always positive?\n \n the MR image is the inverse fourier transform of the measured signal, so you get a complex number, but most of the sequence just consider the magnitude\n The phase can have a lot of meaning in some case, but this is an other issue,\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "fepegar", "commentT": "2020-06-24T16:11:58Z", "comment_text": "\n \t\tI see you also come back to real part for the motion... hmmm ...\n to be sure, I would like to test the difference (in case of only positive values ..)\n I see your point when you have negative value in the image, but why do you need it ?\n is there a reason to do znormalization like transforms at the first place ? (it seems to me more logical to put it at the end)\n I prefer to performed MRI artefact on the first place (on positive values ...)\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "fepegar", "commentT": "2020-06-24T16:38:32Z", "comment_text": "\n \t\tI prefer the MRI artifacts at the beginning as well, but users might, for whatever reason, have some negative values in the input.\n <denchmark-link:https://colab.research.google.com/drive/1JGDJ8FsCH0BQ6SgjFE_ztwq1c7SmmIGy?usp=sharing>Here's a notebook</denchmark-link>\n  that I'm playing with. You can see that there's not much difference:\n <denchmark-link:https://user-images.githubusercontent.com/12688084/85596273-7cbb4a80-b641-11ea-893f-fdff9268e176.png></denchmark-link>\n \n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "fepegar", "commentT": "2020-06-24T21:42:02Z", "comment_text": "\n \t\t\n I'm using this image and the TorchIO Slicer module.\n 8 ghosts along axis 2:\n \n I do not reproduce your first image (with master branch), with you t1 and this code\n suj = [tio.data.Subject(t1=tio.data.Image('/data/t1.nii.gz', tio.INTENSITY))]\n t=    tio.transforms.RandomGhosting(axes=2, num_ghosts=(8,8), intensity=(1,1))\n \n dataset = tio.data.ImagesDataset(suj, transform=t)\n s = dataset[0]\n s['t1'].save('/tmp/trans.nii')\n what do I miss ?\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "fepegar", "commentT": "2020-06-24T21:50:11Z", "comment_text": "\n \t\tforget my previous message, I was using your last PR ...\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "fepegar", "commentT": "2020-06-24T23:40:00Z", "comment_text": "\n \t\tNote that since <denchmark-link:https://github.com/fepegar/torchio/pull/204>#204</denchmark-link>\n  you don't need to pass the subject through the dataset:\n suj = tio.data.Subject(t1=tio.Image('/data/t1.nii.gz'))\n t = tio.RandomGhosting(axes=2, num_ghosts=(8, 8), intensity=(1, 1))\n s = t(sun)\n s.t1.save('/tmp/trans.nii')\n \t\t"}}}, "commit": {"commit_id": "2b97128dd4fd4376f4d574e6ef4c0d889f701f9e", "commit_author": "Fernando P\u00e9rez-Garc\u00eda", "commitT": "2020-06-26 10:20:39+01:00", "commit_complexity": {"commit_NLOC": "0.5614035087719298", "commit_CCN": "0.7192982456140351", "commit_Nprams": "0.14035087719298245"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\transforms\\augmentation\\test_random_motion.py", "file_new_name": "tests\\transforms\\augmentation\\test_random_motion.py", "file_complexity": {"file_NLOC": "7", "file_CCN": "1", "file_NToken": "40"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "8,9", "deleted_lines": "8,9", "method_info": {"method_name": "test_random_motion", "method_params": "self", "method_startline": "7", "method_endline": "9", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "25", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "torchio\\transforms\\augmentation\\intensity\\random_ghosting.py", "file_new_name": "torchio\\transforms\\augmentation\\intensity\\random_ghosting.py", "file_complexity": {"file_NLOC": "134", "file_CCN": "8", "file_NToken": "814"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "39", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,int,int,4,10", "method_startline": "34", "method_endline": "42", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "93", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "111,115", "deleted_lines": null, "method_info": {"method_name": "add_artifact", "method_params": "self,Tensor,int,int,float,float", "method_startline": "109", "method_endline": "116", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "28", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "119,120,121,122,123,124,125,126,127,128,129,130", "deleted_lines": "119,120,121,122,123,124,125,126,127,128,129,130", "method_info": {"method_name": "get_axis_and_size", "method_params": "axis,array", "method_startline": "119", "method_endline": "130", "method_complexity": {"method_NLOC": "12", "method_CCN": "4", "method_NToken": "64", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "87,92", "deleted_lines": "78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95", "method_info": {"method_name": "apply_transform", "method_params": "self,Subject", "method_startline": "69", "method_endline": "95", "method_complexity": {"method_NLOC": "27", "method_CCN": "5", "method_NToken": "152", "method_nesting_level": "1"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "145,146,147", "deleted_lines": "147", "method_info": {"method_name": "add_artifact", "method_params": "self,Image,int,int,float", "method_startline": "145", "method_endline": "151", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "24", "method_nesting_level": "1"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "133,134,135,136,137,138,139,140,141,142,143", "deleted_lines": "133,134,135,136,137,138,139,140,141,142,143", "method_info": {"method_name": "get_slice", "method_params": "axis,array,slice_idx", "method_startline": "133", "method_endline": "143", "method_complexity": {"method_NLOC": "10", "method_CCN": "4", "method_NToken": "62", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "torchio\\transforms\\augmentation\\intensity\\random_motion.py", "file_new_name": "torchio\\transforms\\augmentation\\intensity\\random_motion.py", "file_complexity": {"file_NLOC": "213", "file_CCN": "12", "file_NToken": "1235"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "67,68", "deleted_lines": "85,86,87,88,89,90,91,92,93,94,95,96", "method_info": {"method_name": "apply_transform", "method_params": "self,Subject", "method_startline": "67", "method_endline": "116", "method_complexity": {"method_NLOC": "46", "method_CCN": "3", "method_NToken": "210", "method_nesting_level": "1"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "torchio\\transforms\\augmentation\\intensity\\random_spike.py", "file_new_name": "torchio\\transforms\\augmentation\\intensity\\random_spike.py", "file_complexity": {"file_NLOC": "87", "file_CCN": "5", "file_NToken": "500"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "30", "deleted_lines": "31", "method_info": {"method_name": "__init__", "method_params": "self,int,int,1,float,float,1,1", "method_startline": "28", "method_endline": "34", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "59", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "30", "deleted_lines": "31", "method_info": {"method_name": "__init__", "method_params": "self,int,int,1,float,float,1,3", "method_startline": "27", "method_endline": "33", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "57", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "74", "deleted_lines": "56,57,58,59,60,61,62,63,64,65,66,67", "method_info": {"method_name": "apply_transform", "method_params": "self,Subject", "method_startline": "43", "method_endline": "77", "method_complexity": {"method_NLOC": "31", "method_CCN": "3", "method_NToken": "164", "method_nesting_level": "1"}}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "torchio\\transforms\\augmentation\\random_transform.py", "file_new_name": "torchio\\transforms\\augmentation\\random_transform.py", "file_complexity": {"file_NLOC": "88", "file_CCN": "9", "file_NToken": "349"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "101", "deleted_lines": "101", "method_info": {"method_name": "inv_fourier_transform", "method_params": "ndarray", "method_startline": "98", "method_endline": "101", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "31", "method_nesting_level": "1"}}}}}}}}