{"BR": {"BR_id": "1775", "BR_author": "johnnylecy", "BRopenT": "2019-12-09T08:53:55Z", "BRcloseT": "2020-02-16T11:49:02Z", "BR_text": {"BRsummary": "why can't run testing on GPU 1\uff1f", "BRdescription": "\n There are 2 GPU in my computer. I run testing on GPU0\uff0ceverything is normal. But I run testing on GPU1\uff0cI got a error as follow.\n I use High-level APIs for testing images like this:\n gpu_id = 1\n device_id = 'cuda:' + str(gpu_id)\n net = init_detector(config_file, checkpoint_file, device=device_id)\n ... ...\n predict_result = inference_detector(net, im_file)\n someone can help me, please? Thank you.\n error:\n THCudaCheck FAIL file=/pytorch/aten/src/THC/THCGeneral.cpp line=371 error=77 : an illegal memory access was encountered0:09,  2.57it/s]\n Process Process-1:\n Traceback (most recent call last):\n File \"/opt/conda/lib/python3.6/multiprocessing/process.py\", line 258, in _bootstrap\n self.run()\n File \"/opt/conda/lib/python3.6/multiprocessing/process.py\", line 93, in run\n self._target(*self._args, **self._kwargs)\n File \"evaluate_rcnn_base_mulscale_with_clsfy_mulprocess-4_stride_half.py\", line 263, in eval_net\n evaluate(net, sub_dir, img_name, img_result_dir, det_result_txt)\n File \"evaluate_rcnn_base_mulscale_with_clsfy_mulprocess-4_stride_half.py\", line 202, in evaluate\n predict_result = inference_detector(net, im_file)\n File \"/data/nas/workspace/jupyter/mmdetection-master/mmdet/apis/inference.py\", line 86, in inference_detector\n result = model(return_loss=False, rescale=True, **data)\n File \"/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 541, in \n result = self.forward(*input, **kwargs)\n File \"/data/nas/workspace/jupyter/mmdetection-master/mmdet/core/fp16/decorators.py\", line 49, in new_func\n return old_func(*args, **kwargs)\n File \"/data/nas/workspace/jupyter/mmdetection-master/mmdet/models/detectors/base.py\", line 119, in forward\n return self.forward_test(img, img_meta, **kwargs)\n File \"/data/nas/workspace/jupyter/mmdetection-master/mmdet/models/detectors/base.py\", line 102, in forward_test\n return self.simple_test(imgs[0], img_metas[0], **kwargs)\n File \"/data/nas/workspace/jupyter/mmdetection-master/mmdet/models/detectors/two_stage.py\", line 273, in simple_test\n x, img_meta, proposal_list, self.test_cfg.rcnn, rescale=rescale)\n File \"/data/nas/workspace/jupyter/mmdetection-master/mmdet/models/detectors/test_mixins.py\", line 49, in simple_test_bboxes\n x[:len(self.bbox_roi_extractor.featmap_strides)], rois)\n File \"/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 541, in \n result = self.forward(*input, **kwargs)\n File \"/data/nas/workspace/jupyter/mmdetection-master/mmdet/core/fp16/decorators.py\", line 127, in new_func\n return old_func(*args, **kwargs)\n File \"/data/nas/workspace/jupyter/mmdetection-master/mmdet/models/roi_extractors/single_level.py\", line 106, in forward\n roi_feats[inds] = roi_feats_t\n RuntimeError: cuda runtime error (77) : an illegal memory access was encountered at /pytorch/aten/src/THC/THCGeneral.cpp:371\n terminate called after throwing an instance of 'c10::Error'\n what():  CUDA error: an illegal memory access was encountered (insert_events at /pytorch/c10/cuda/CUDACachingAllocator.cpp:569)\n frame #0: c10::Error::Error(c10::SourceLocation, std::string const&) + 0x33 (0x7fb69c895813 in /opt/conda/lib/python3.6/site-packages/torch/lib/libc10.so)\n frame <denchmark-link:https://github.com/open-mmlab/mmdetection/issues/1>#1</denchmark-link>\n :  + 0x16126 (0x7fb69eaeb126 in /opt/conda/lib/python3.6/site-packages/torch/lib/libc10_cuda.so)\n frame <denchmark-link:https://github.com/open-mmlab/mmdetection/issues/2>#2</denchmark-link>\n :  + 0x16b11 (0x7fb69eaebb11 in /opt/conda/lib/python3.6/site-packages/torch/lib/libc10_cuda.so)\n frame <denchmark-link:https://github.com/open-mmlab/mmdetection/issues/3>#3</denchmark-link>\n : c10::TensorImpl::release_resources() + 0x4d (0x7fb69c885f0d in /opt/conda/lib/python3.6/site-packages/torch/lib/libc10.so)\n frame <denchmark-link:https://github.com/open-mmlab/mmdetection/issues/4>#4</denchmark-link>\n :  + 0x4af752 (0x7fb68a3f6752 in /opt/conda/lib/python3.6/site-packages/torch/lib/libtorch_python.so)\n frame <denchmark-link:https://github.com/open-mmlab/mmdetection/issues/5>#5</denchmark-link>\n :  + 0x4af796 (0x7fb68a3f6796 in /opt/conda/lib/python3.6/site-packages/torch/lib/libtorch_python.so)\n \n frame <denchmark-link:https://github.com/open-mmlab/mmdetection/pull/50>#50</denchmark-link>\n : __libc_start_main + 0xf5 (0x7fb6b1428b15 in /lib64/libc.so.6)\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "johnnylecy", "commentT": "2019-12-09T13:12:17Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/johnnylecy>@johnnylecy</denchmark-link>\n  ,\n This might because the rois and the features are not in the same device, could you check the devices of the features and rois? Furthermore, maybe you can try to use  at the beginning of your scripts or add print out each related variables' devices to see whether they are the same.\n We will also try to reproduce this bug.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "johnnylecy", "commentT": "2019-12-10T03:03:32Z", "comment_text": "\n \t\thi <denchmark-link:https://github.com/ZwwWayne>@ZwwWayne</denchmark-link>\n \uff0c\n <denchmark-h:h2>How should I do for checking or printing the device of the features and rois\uff1f</denchmark-h>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "johnnylecy", "commentT": "2019-12-10T05:27:54Z", "comment_text": "\n \t\tprint(rois.device) should work.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "johnnylecy", "commentT": "2020-01-03T09:26:23Z", "comment_text": "\n \t\ti have the same problem?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "johnnylecy", "commentT": "2020-01-15T05:58:19Z", "comment_text": "\n \t\tI don't know why this would happened but I know how to solve it . you can use cuda_visible_device to avoid set device_id = 'cuda:' + str(gpu_id)  to let the model testing on your gpu\u3002\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "johnnylecy", "commentT": "2020-01-16T08:54:03Z", "comment_text": "\n \t\tsame problem!!!\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "johnnylecy", "commentT": "2020-02-16T02:59:20Z", "comment_text": "\n \t\tShould have been fixed.\n \t\t"}}}, "commit": {"commit_id": "2afa06359c55b63fa32af6d04f892bae140ec46e", "commit_author": "Cao Yuhang", "commitT": "2020-02-16 19:49:01+08:00", "commit_complexity": {"commit_NLOC": "0.375", "commit_CCN": "1.0", "commit_Nprams": "0.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "mmdet\\ops\\masked_conv\\src\\masked_conv2d_cuda.cpp", "file_new_name": "mmdet\\ops\\masked_conv\\src\\masked_conv2d_cuda.cpp", "file_complexity": {"file_NLOC": "53", "file_CCN": "3", "file_NToken": "387"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "61", "deleted_lines": null, "method_info": {"method_name": "masked_col2im_forward_cuda", "method_params": "col,mask_h_idx,mask_w_idx,height,width,channels,im", "method_startline": "51", "method_endline": "69", "method_complexity": {"method_NLOC": "14", "method_CCN": "1", "method_NToken": "100", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "37", "deleted_lines": null, "method_info": {"method_name": "masked_im2col_forward_cuda", "method_params": "im,mask_h_idx,mask_w_idx,kernel_h,kernel_w,pad_h,pad_w,col", "method_startline": "27", "method_endline": "49", "method_complexity": {"method_NLOC": "18", "method_CCN": "1", "method_NToken": "145", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "mmdet\\ops\\roi_align\\src\\roi_align_cuda.cpp", "file_new_name": "mmdet\\ops\\roi_align\\src\\roi_align_cuda.cpp", "file_complexity": {"file_NLOC": "64", "file_CCN": "5", "file_NToken": "452"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "36", "deleted_lines": null, "method_info": {"method_name": "roi_align_forward_cuda", "method_params": "features,rois,pooled_height,pooled_width,spatial_scale,sample_num,output", "method_startline": "29", "method_endline": "56", "method_complexity": {"method_NLOC": "22", "method_CCN": "2", "method_NToken": "152", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "65", "deleted_lines": null, "method_info": {"method_name": "roi_align_backward_cuda", "method_params": "top_grad,rois,pooled_height,pooled_width,spatial_scale,sample_num,bottom_grad", "method_startline": "58", "method_endline": "84", "method_complexity": {"method_NLOC": "22", "method_CCN": "2", "method_NToken": "152", "method_nesting_level": "0"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "mmdet\\ops\\roi_pool\\src\\roi_pool_cuda.cpp", "file_new_name": "mmdet\\ops\\roi_pool\\src\\roi_pool_cuda.cpp", "file_complexity": {"file_NLOC": "65", "file_CCN": "5", "file_NToken": "497"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "34", "deleted_lines": null, "method_info": {"method_name": "roi_pooling_forward_cuda", "method_params": "features,rois,pooled_height,pooled_width,spatial_scale,output,argmax", "method_startline": "26", "method_endline": "53", "method_complexity": {"method_NLOC": "22", "method_CCN": "2", "method_NToken": "159", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "62", "deleted_lines": null, "method_info": {"method_name": "roi_pooling_backward_cuda", "method_params": "top_grad,rois,argmax,spatial_scale,bottom_grad", "method_startline": "55", "method_endline": "83", "method_complexity": {"method_NLOC": "25", "method_CCN": "2", "method_NToken": "185", "method_nesting_level": "0"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "mmdet\\ops\\sigmoid_focal_loss\\src\\sigmoid_focal_loss.cpp", "file_new_name": "mmdet\\ops\\sigmoid_focal_loss\\src\\sigmoid_focal_loss.cpp", "file_complexity": {"file_NLOC": "39", "file_CCN": "5", "file_NToken": "270"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "22", "deleted_lines": null, "method_info": {"method_name": "SigmoidFocalLoss_forward", "method_params": "logits,targets,num_classes,gamma,alpha", "method_startline": "17", "method_endline": "27", "method_complexity": {"method_NLOC": "11", "method_CCN": "2", "method_NToken": "75", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "35", "deleted_lines": null, "method_info": {"method_name": "SigmoidFocalLoss_backward", "method_params": "logits,targets,d_losses,num_classes,gamma,alpha", "method_startline": "29", "method_endline": "40", "method_complexity": {"method_NLOC": "12", "method_CCN": "2", "method_NToken": "84", "method_nesting_level": "0"}}}}}}}}