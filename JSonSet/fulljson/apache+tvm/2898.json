{"BR": {"BR_id": "2898", "BR_author": "derisavi", "BRopenT": "2019-03-26T15:35:03Z", "BRcloseT": "2019-04-26T21:10:43Z", "BR_text": {"BRsummary": "[TEXPR][PASS] Loop distribution pass generates incorrect code", "BRdescription": "\n With the following input DSL:\n import tvm\n m = 48\n A = tvm.placeholder((m,), name='A', dtype=\"float16\")\n C = tvm.compute((m,), lambda i: A[i], name='C')\n D = tvm.compute((m,), lambda i: C[i], name='D')\n \n s = tvm.create_schedule(D.op)\n # We split the two axis with factors where neither counts the other\n co, ci = s[C].split(C.op.axis[0], 10)\n do, di = s[D].split(D.op.axis[0], 32)\n s[C].compute_at(s[D], do)\n \n bounds = tvm.schedule.InferBound(s)\n stmt = tvm.schedule.ScheduleOps(s, bounds)\n stmt = tvm.ir_pass.CanonicalSimplify(stmt)\n print(stmt)\n \n stmt = tvm.ir_pass.LoopPartition(stmt, True)\n stmt = tvm.ir_pass.CanonicalSimplify(stmt)\n print(stmt)\n The following is the output of first print statement. Code is correct.\n <denchmark-code>// attr [compute(D, 0x1e4d7e0)] realize_scope = \"\"\n realize D([0, 48]) {\n   produce D {\n     for (i.outer, 0, 2) {\n       // attr [compute(C, 0x195b3a0)] realize_scope = \"\"\n       realize C([(i.outer*32), 32]) {\n         produce C {\n           for (i.outer, 0, 4) {\n             for (i.inner, 0, 10) {\n               if (likely((((i.outer*10) + i.inner) < 32))) {\n                 if (likely(((((i.outer*32) + (i.outer*10)) + i.inner) < 48))) {\n                   C((((i.outer*32) + (i.outer*10)) + i.inner)) =A((((i.outer*32) + (i.outer*10)) + i.inner))\n                 }\n               }\n             }\n           }\n         }\n         for (i.inner, 0, 32) {\n           if (likely((((i.outer*32) + i.inner) < 48))) {\n             if (likely((((i.outer*32) + i.inner) < 48))) {\n               D(((i.outer*32) + i.inner)) =C(((i.outer*32) + i.inner))\n             }\n           }\n         }\n       }\n     }\n   }\n }\n </denchmark-code>\n \n The following is the output of the second print statement. Code is incorrect in that in the second produce C only 10 (instead of 16) elements of A are copied to C.\n <denchmark-code>// attr [compute(D, 0x1e4d7e0)] realize_scope = \"\"\n realize D([0, 48]) {\n   produce D {\n     for (i.outer, 0, 1) {\n       // attr [compute(C, 0x195b3a0)] realize_scope = \"\"\n       realize C([(i.outer*32), 32]) {\n         produce C {\n           for (i.outer, 0, 3) {\n             for (i.inner, 0, 10) {\n               C((((i.outer*32) + (i.outer*10)) + i.inner)) =A((((i.outer*32) + (i.outer*10)) + i.inner))\n             }\n           }\n           for (i.inner, 0, 2) {\n             C(((30 + (i.outer*32)) + i.inner)) =A(((30 + (i.outer*32)) + i.inner))\n           }\n         }\n         for (i.inner, 0, 32) {\n           D(((i.outer*32) + i.inner)) =C(((i.outer*32) + i.inner))\n         }\n       }\n     }\n     // attr [compute(C, 0x195b3a0)] realize_scope = \"\"\n     realize C([32, 32]) {\n       produce C {\n         for (i.outer, 0, 1) {\n           for (i.inner, 0, 10) {\n             C(((32 + (i.outer*10)) + i.inner)) =A(((32 + (i.outer*10)) + i.inner))\n           }\n         }\n       }\n       for (i.inner, 0, 16) {\n         D((32 + i.inner)) =C((32 + i.inner))\n       }\n     }\n   }\n }\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "derisavi", "commentT": "2019-03-26T16:12:51Z", "comment_text": "\n \t\tThanks for reporting this, we should fix this asap. Let us see if it is caused by some of the recent changes <denchmark-link:https://github.com/dmlc/tvm/commits/master/src/pass/loop_partition.cc>https://github.com/dmlc/tvm/commits/master/src/pass/loop_partition.cc</denchmark-link>\n  or was just something we overlooked.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "derisavi", "commentT": "2019-03-26T16:18:38Z", "comment_text": "\n \t\tI'm working on a fix now. In addition to this problem, I'm trying to fix general problems that I have found in the code as well. I will submit a PR as soon as I have it ready (likely in the next day or two).\n To answer your question, I don't know whether this has been caused by recent changes in loop_partition.cc or not.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "derisavi", "commentT": "2019-03-26T16:37:32Z", "comment_text": "\n \t\tPlease also check if it has something to do with the fact that high-level produce consume pattern is involved, i.e. if we can reproduce the same error using tvm.lower\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "derisavi", "commentT": "2019-04-01T21:55:37Z", "comment_text": "\n \t\tThe bug is also reproducible using tvm.lower. Setting the input DSL to:\n import tvm\n m = 48\n A = tvm.placeholder((m,), name='A', dtype=\"float16\")\n C = tvm.compute((m,), lambda i: A[i], name='C')\n D = tvm.compute((m,), lambda i: C[i], name='D')\n \n s = tvm.create_schedule(D.op)\n co, ci = s[C].split(C.op.axis[0], factor=10)\n do, di = s[D].split(D.op.axis[0], 32)\n s[C].compute_at(s[D], do)\n \n with tvm.build_config(partition_const_loop=True):\n     print(tvm.lower(s, [A, C, D], name=\"fadd1\", simple_mode=False).body);\n generates the following output, which has the same problem explained above:\n <denchmark-code>...\n // attr [0] compute_scope = \"fadd1_compute_\"\n produce D {\n   for (i.outer, 0, 1) {\n     produce C {\n       for (i.outer, 0, 3) {\n         for (i.inner, 0, 10) {\n           C[(((i.outer*32) + (i.outer*10)) + i.inner)] = A[(((i.outer*32) + (i.outer*10)) + i.inner)]\n         }\n       }\n       for (i.inner, 0, 2) {\n         C[(((i.outer*32) + i.inner) + 30)] = A[(((i.outer*32) + i.inner) + 30)]\n       }\n     }\n     for (i.inner, 0, 32) {\n       D[((i.outer*32) + i.inner)] = C[((i.outer*32) + i.inner)]\n     }\n   }\n   produce C {\n     for (i.outer, 0, 1) {\n       for (i.inner, 0, 10) {\n         C[(((i.outer*10) + i.inner) + 32)] = A[(((i.outer*10) + i.inner) + 32)]\n       }\n     }\n   }\n   for (i.inner, 0, 16) {\n     D[(i.inner + 32)] = C[(i.inner + 32)]\n   }\n }\n </denchmark-code>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "derisavi", "commentT": "2019-04-03T02:38:07Z", "comment_text": "\n \t\tThis bug will not be fixed only by the change in Halide IR. It also requires quite a bit of code in TVM (I am almost ready to send a PR for that part). So should we reopen this issue?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "derisavi", "commentT": "2019-04-03T03:00:32Z", "comment_text": "\n \t\tit was automatically closed by github association rule :)\n \t\t"}}}, "commit": {"commit_id": "7e68d63f75dfa961c50cfeb7a55f78db9dcc90f0", "commit_author": "Salem Derisavi", "commitT": "2019-04-26 14:10:42-07:00", "commit_complexity": {"commit_NLOC": "0.23423423423423423", "commit_CCN": "0.44144144144144143", "commit_Nprams": "0.6126126126126126"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 13, "file_old_name": "src\\pass\\loop_partition.cc", "file_new_name": "src\\pass\\loop_partition.cc", "file_complexity": {"file_NLOC": "443", "file_CCN": "106", "file_NToken": "3556"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "600,601,602,603,604,605,606", "deleted_lines": null, "method_info": {"method_name": "tvm::ir::LoopPartitioner::MakeFor", "method_params": "node,extent,body", "method_startline": "597", "method_endline": "607", "method_complexity": {"method_NLOC": "10", "method_CCN": "2", "method_NToken": "110", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "416,417,418,419,420,421,422,423,424", "deleted_lines": "418", "method_info": {"method_name": "tvm::ir::AppendStmts", "method_params": "a,b", "method_startline": "416", "method_endline": "424", "method_complexity": {"method_NLOC": "9", "method_CCN": "3", "method_NToken": "56", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "231,232", "deleted_lines": "231", "method_info": {"method_name": "tvm::ir::ThreadPartitionInserter::ThreadPartitionInserter", "method_params": "ps,cond", "method_startline": "231", "method_endline": "232", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "36", "method_nesting_level": "3"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "262,263,264", "deleted_lines": null, "method_info": {"method_name": "tvm::ir::ConditionEliminator::Mutate", "method_params": "e", "method_startline": "261", "method_endline": "266", "method_complexity": {"method_NLOC": "6", "method_CCN": "3", "method_NToken": "51", "method_nesting_level": "3"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,504,505,506,507,508,509,510,511,514,515,516,523,524,535,536,539,540,541,542,549,550,553,554,555,563,564,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,585,586,591", "deleted_lines": null, "method_info": {"method_name": "tvm::ir::LoopPartitioner::TryPartition", "method_params": "node,stmt,var,min,max,body,partition_thread_scope", "method_startline": "472", "method_endline": "595", "method_complexity": {"method_NLOC": "97", "method_CCN": "24", "method_NToken": "712", "method_nesting_level": "2"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "323", "deleted_lines": null, "method_info": {"method_name": "tvm::ir::LoopPartitioner::Mutate_", "method_params": "op,stmt", "method_startline": "316", "method_endline": "330", "method_complexity": {"method_NLOC": "12", "method_CCN": "3", "method_NToken": "134", "method_nesting_level": "3"}}}, "hunk_6": {"Ismethod": 1, "added_lines": "228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246", "deleted_lines": "231", "method_info": {"method_name": "tvm::ir::PartitionFinder::InverseCond", "method_params": "cond", "method_startline": "228", "method_endline": "246", "method_complexity": {"method_NLOC": "13", "method_CCN": "5", "method_NToken": "150", "method_nesting_level": "3"}}}, "hunk_7": {"Ismethod": 1, "added_lines": "257,258", "deleted_lines": "258", "method_info": {"method_name": "tvm::ir::ConditionEliminator::ConditionEliminator", "method_params": "ps,cond_value", "method_startline": "257", "method_endline": "258", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "31", "method_nesting_level": "3"}}}, "hunk_8": {"Ismethod": 1, "added_lines": "277", "deleted_lines": null, "method_info": {"method_name": "tvm::ir::ThreadPartitionInserter::ThreadPartitionInserter", "method_params": "ps,cond", "method_startline": "277", "method_endline": "278", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "34", "method_nesting_level": "3"}}}, "hunk_9": {"Ismethod": 1, "added_lines": "214,215", "deleted_lines": "214,215", "method_info": {"method_name": "tvm::ir::ConditionEliminator::ConditionEliminator", "method_params": "ps", "method_startline": "214", "method_endline": "215", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "23", "method_nesting_level": "3"}}}, "hunk_10": {"Ismethod": 1, "added_lines": "383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414", "deleted_lines": "383,384,385,386,387,388,389,390,391,392,401,402,403,404,405,406,407,408,409,410,412", "method_info": {"method_name": "tvm::ir::LoopPartitioner::GetIntervalAndCondset", "method_params": "partitions,for_interval,cond_value", "method_startline": "383", "method_endline": "414", "method_complexity": {"method_NLOC": "27", "method_CCN": "11", "method_NToken": "263", "method_nesting_level": "2"}}}, "hunk_11": {"Ismethod": 1, "added_lines": "201,202,203,205,207,208,209,210,211,212,213,214,215,216,217", "deleted_lines": "202,211,214,215,219", "method_info": {"method_name": "tvm::ir::PartitionFinder::Visit_", "method_params": "op", "method_startline": "196", "method_endline": "223", "method_complexity": {"method_NLOC": "23", "method_CCN": "6", "method_NToken": "167", "method_nesting_level": "3"}}}, "hunk_12": {"Ismethod": 1, "added_lines": "43,44,45,46,47", "deleted_lines": "43,44", "method_info": {"method_name": "tvm::ir::PartitionKeyHash::operator ( )", "method_params": "k", "method_startline": "43", "method_endline": "47", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "58", "method_nesting_level": "3"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "tests\\python\\unittest\\test_pass_loop_partition.py", "file_new_name": "tests\\python\\unittest\\test_pass_loop_partition.py", "file_complexity": {"file_NLOC": "340", "file_CCN": "24", "file_NToken": "4061"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385", "deleted_lines": null, "method_info": {"method_name": "test_double_splitting_with_indivisible_factors", "method_params": "", "method_startline": "356", "method_endline": "385", "method_complexity": {"method_NLOC": "23", "method_CCN": "1", "method_NToken": "362", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "26,27,28", "deleted_lines": null, "method_info": {"method_name": "find_top_produce.f", "method_params": "x,ret", "method_startline": "26", "method_endline": "28", "method_complexity": {"method_NLOC": "3", "method_CCN": "2", "method_NToken": "25", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "25,26,27,28,29,30,31", "deleted_lines": null, "method_info": {"method_name": "find_top_produce", "method_params": "stmt", "method_startline": "25", "method_endline": "31", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "35", "method_nesting_level": "0"}}}}}}}}