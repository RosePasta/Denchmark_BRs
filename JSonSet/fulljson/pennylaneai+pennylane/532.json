{"BR": {"BR_id": "532", "BR_author": "antalszava", "BRopenT": "2020-03-06T04:29:45Z", "BRcloseT": "2020-04-24T12:01:05Z", "BR_text": {"BRsummary": "RandomLayers does not work with the Qiskit plugin as NumPy native integers are passed as wires instead of Python ints", "BRdescription": "\n <denchmark-h:h4>Issue description</denchmark-h>\n \n \n Expected behavior:\n \n No problem with using RandomLayers with the Qiskit plugin.\n \n Actual behavior:\n \n As  uses  specific functions to generate ,  native integers are returned as  instead of values of type . This results in a Qiskit error when using devices from the Qiskit plugin as per the following known bug and open issue:\n <denchmark-link:https://github.com/Qiskit/qiskit-terra/issues/3929>Qiskit/qiskit-terra#3929</denchmark-link>\n \n \n Reproduces how often:\n \n Each time RandomLayers is used with the Qiskit plugin.\n \n System information:\n \n <denchmark-code>Name: PennyLane\n Version: 0.9.0.dev0\n Summary: PennyLane is a Python quantum machine learning library by Xanadu Inc.\n Home-page: https://github.com/XanaduAI/pennylane\n Author: None\n Author-email: None\n License: Apache License 2.0\n Location: /xanadu/pennylane\n Requires: numpy, scipy, networkx, autograd, toml, appdirs, semantic-version\n Required-by: \n Platform info:           Linux-4.19.11-041911-generic-x86_64-with-debian-buster-sid\n Python version:          3.7.6\n Numpy version:           1.17.4\n Scipy version:           1.3.2\n Installed devices:\n - default.gaussian (PennyLane-0.9.0.dev0)\n - default.qubit (PennyLane-0.9.0.dev0)\n - default.tensor (PennyLane-0.9.0.dev0)\n - default.tensor.tf (PennyLane-0.9.0.dev0)\n - strawberryfields.fock (PennyLane-SF-0.8.0)\n - strawberryfields.gaussian (PennyLane-SF-0.8.0)\n - qiskit.aer (PennyLane-qiskit-0.8.0)\n - qiskit.basicaer (PennyLane-qiskit-0.8.0)\n - qiskit.ibmq (PennyLane-qiskit-0.8.0)\n - forest.numpy_wavefunction (PennyLane-Forest-0.8.0)\n - forest.qpu (PennyLane-Forest-0.8.0)\n - forest.qvm (PennyLane-Forest-0.8.0)\n - forest.wavefunction (PennyLane-Forest-0.8.0)\n - projectq.classical (PennyLane-PQ-0.7.0.dev0)\n - projectq.ibm (PennyLane-PQ-0.7.0.dev0)\n - projectq.simulator (PennyLane-PQ-0.7.0.dev0)\n - microsoft.QuantumSimulator (PennyLane-qsharp-0.6.0)\n - cirq.simulator (PennyLane-Cirq-0.8.0)\n </denchmark-code>\n \n <denchmark-h:h4>Source code and tracebacks</denchmark-h>\n \n Code to reproduce this problem:\n import pennylane as qml\n from pennylane.templates.layers import RandomLayers\n from pennylane.init import random_layers_uniform\n import numpy as np\n \n \n num_qubits = 5\n \n dev = qml.device('qiskit.aer',wires=num_qubits)\n conv_params = random_layers_uniform(n_layers=3, n_wires=num_qubits, seed=2)\n \n @qml.qnode(dev)\n def circuit(weights=None):\n     RandomLayers(weights=weights, wires=list(range(num_qubits)))\n     return qml.expval(qml.PauliZ(0))\n \n circuit(weights=conv_params)\n Traceback:\n ~/anaconda3/lib/python3.7/site-packages/qiskit/circuit/register.py in __getitem__(self, key)\n      88         \"\"\"\n      89         if not isinstance(key, (int, slice, list)):\n ---> 90             raise CircuitError(\"expected integer or slice index into register\")\n      91         if isinstance(key, slice):\n      92             return self._bits[key]\n CircuitError: 'expected integer or slice index into register'\n Note: a quick fix is available on the wires_to_int branch.\n <denchmark-h:h4>Additional information</denchmark-h>\n \n Things to consider:\n \n this particular case might be solved in Qiskit with a next release;\n further templates might include similar logic for wires.\n \n Fruit for thought in the long run: it could be a good idea in general, to place a sort of \"wire type\" modifying logic in PennyLane, such that \"from a given point\" in the line of execution, it would be guaranteed, that all wires are of type int under the hood.\n This would allow:\n \n validation for wire types and a possibly needed conversion of wires to take place only at one place in the entire codebase\n any operation (such as RandomLayers) to not need to contain logic on conversion, checking validity, etc.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "antalszava", "commentT": "2020-03-06T18:48:08Z", "comment_text": "\n \t\tI think we should be able to fix this issue, <denchmark-link:https://github.com/PennyLaneAI/pennylane/issues/456>#456</denchmark-link>\n , and <denchmark-link:https://github.com/PennyLaneAI/pennylane/issues/423>#423</denchmark-link>\n  at the same time. I'm thinking a single bookkeeping  or  class (name provisional) which is responsible for all this, and which is called by all other parts of the software as needed\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "antalszava", "commentT": "2020-03-13T10:41:07Z", "comment_text": "\n \t\tMaybe this should be an ADR though. I think it should be done at the level of the device, i.e. like\n dev = qml.device(\"qiskit.aer\", wires=[3,4,5,6,7])\n We can just overload the wires argument in the following way\n <denchmark-code>if isinstance(wires, Sequence):\n     wires = list(wires)\n elsif isinstance(wires, numbers.Integral):\n     wires = range(wires)\n \n num_wires = len(wires)\n </denchmark-code>\n \n I don't even think we have to change so much in the rest of the code. Only the device itself will have some kind of WireMap that maps the wires given to the physical qubits that are available.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "antalszava", "commentT": "2020-03-15T02:15:29Z", "comment_text": "\n \t\t\n dev = qml.device(\"qiskit.aer\", wires=[3,4,5,6,7])\n \n I agree! This is what I have been envisioning as well. Simpler for the user (in that they don't need to learn a new object/new methods), and fits the existing paradigm really well.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "antalszava", "commentT": "2020-03-25T05:05:14Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/antalszava>@antalszava</denchmark-link>\n , Qiskit version 0.16.2 was released on March 21st. Is this bug now closed?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "antalszava", "commentT": "2020-03-30T21:50:33Z", "comment_text": "\n \t\tYes \ud83d\ude3f\n Qiskit versions (pip install qiskit):\n qiskit==0.16.2\n qiskit-aer==0.4.1\n qiskit-aqua==0.6.5\n qiskit-ibmq-provider==0.5.0\n qiskit-ignis==0.2.0\n qiskit-terra==0.12.0\n After that, had to pip install python-constraint (due an error from qiskit-terra) and then received the original error.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "antalszava", "commentT": "2020-04-14T23:19:29Z", "comment_text": "\n \t\tStill relevant with\n qiskit==0.18.0\n qiskit-aer==0.5.0\n qiskit-aqua==0.6.5\n qiskit-ibmq-provider==0.6.0\n qiskit-ignis==0.3.0\n qiskit-terra==0.13.0\n \t\t"}}}, "commit": {"commit_id": "f542738a9d89b375cbf8b08970da66981bfdc113", "commit_author": "Maria Schuld", "commitT": "2020-04-24 21:19:04+09:18", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "0.0", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": ".github\\CHANGELOG.md", "file_new_name": ".github\\CHANGELOG.md", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "231,232,233", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "pennylane\\templates\\layers\\random.py", "file_new_name": "pennylane\\templates\\layers\\random.py", "file_complexity": {"file_NLOC": "225", "file_CCN": "10", "file_NToken": "451"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "50,52,56,59", "deleted_lines": "51,57", "method_info": {"method_name": "random_layer", "method_params": "weights,wires,ratio_imprim,imprimitive,rotations,seed", "method_startline": "31", "method_endline": "60", "method_complexity": {"method_NLOC": "27", "method_CCN": "6", "method_NToken": "132", "method_nesting_level": "0"}}}}}}}}