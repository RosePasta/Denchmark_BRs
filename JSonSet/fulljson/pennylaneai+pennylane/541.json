{"BR": {"BR_id": "541", "BR_author": "co9olguy", "BRopenT": "2020-03-10T19:56:28Z", "BRcloseT": "2020-08-25T14:06:13Z", "BR_text": {"BRsummary": "Qubitunitary causes bug with complex matrix", "BRdescription": "\n <denchmark-h:h4>Issue description</denchmark-h>\n \n Issue posted by user  on the <denchmark-link:https://discuss.pennylane.ai/t/errors-in-passing-quantum-matrix-operators-to-qnode-object/362>forums</denchmark-link>\n \n \n Expected behavior: The following circuit containing QubitUnitary should function without errors:\n \n <denchmark-code>dev = qml.device('default.qubit', wires=2)\n @qml.qnode(dev, interface='numpy')\n def circuit1(theta, matrix):\n     qml.RX(theta, wires=0)\n     qml.QubitUnitary(matrix, wires=1)\n     return qml.expval(qml.PauliZ(0)), qml.expval(qml.PauliZ(1))\n </denchmark-code>\n \n \n \n Actual behavior: When provided with the matrix np.array([[1, 0], [0, 0.70710678 + 0.70710678*1.j]]), an exception is raised: \"TypeError: RX: Real scalar parameter expected, got <class 'numpy.complex128'>.\"\n \n \n Reproduces how often: Seems to happen no matter what gate is put before QubitUnitary, and no matter how many gates there are in between the first and QubitUnitary. When the preceding gate has no parameterized argument, circuit executes without error.\n \n \n System information: Name: PennyLane\n Version: 0.9.0.dev0\n Summary: PennyLane is a Python quantum machine learning library by Xanadu Inc.\n Home-page: https://github.com/XanaduAI/pennylane\n Author: None\n Author-email: None\n License: Apache License 2.0\n Location: /home/nathan/dev/pennylane\n Requires: numpy, scipy, networkx, autograd, toml, appdirs, semantic-version\n Required-by: PennyLane-qiskit, PennyLane-Qchem, PennyLane-PQ, PennyLane-Forest\n Platform info:           Linux-5.3.0-40-generic-x86_64-with-debian-buster-sid\n Python version:          3.7.6\n Numpy version:           1.18.1\n Scipy version:           1.4.1\n Installed devices:\n \n \n \n qiskit.aer (PennyLane-qiskit-0.8.0)\n qiskit.basicaer (PennyLane-qiskit-0.8.0)\n qiskit.ibmq (PennyLane-qiskit-0.8.0)\n projectq.classical (PennyLane-PQ-0.8.0)\n projectq.ibm (PennyLane-PQ-0.8.0)\n projectq.simulator (PennyLane-PQ-0.8.0)\n forest.numpy_wavefunction (PennyLane-Forest-0.8.0)\n forest.qpu (PennyLane-Forest-0.8.0)\n forest.qvm (PennyLane-Forest-0.8.0)\n forest.wavefunction (PennyLane-Forest-0.8.0)\n default.gaussian (PennyLane-0.9.0.dev0)\n default.qubit (PennyLane-0.9.0.dev0)\n default.tensor (PennyLane-0.9.0.dev0)\n default.tensor.tf (PennyLane-0.9.0.dev0)\n \n <denchmark-h:h4>Source code and tracebacks</denchmark-h>\n \n <denchmark-h:hr></denchmark-h>\n \n TypeError                                 Traceback (most recent call last)\n  in \n 2 theta = 0.2\n 3 matrix = np.array([[1, 0], [0, 0.70710678 + 0.70710678*1.j]])\n ----> 4 print(circuit1(theta, matrix))\n ~/dev/pennylane/pennylane/interfaces/autograd.py in (self, *args, **kwargs)\n 45             # prevents autograd boxed arguments from going through to evaluate\n 46             args = autograd.builtins.tuple(args)  # pylint: disable=no-member\n ---> 47             return self.evaluate(args, kwargs)\n 48\n 49         <denchmark-link:https://github.com/staticmethod>@staticmethod</denchmark-link>\n \n ~/anaconda3/envs/pennylane0.8/lib/python3.7/site-packages/autograd/tracer.py in f_wrapped(*args, **kwargs)\n 46             return new_box(ans, trace, node)\n 47         else:\n ---> 48             return f_raw(*args, **kwargs)\n 49     f_wrapped.fun = f_raw\n 50     f_wrapped._is_autograd_primitive = True\n ~/dev/pennylane/pennylane/qnodes/base.py in evaluate(self, args, kwargs)\n 773         if isinstance(self.device, qml.QubitDevice):\n 774             # TODO: remove this if statement once all devices are ported to the QubitDevice API\n --> 775             ret = self.device.execute(self.circuit, return_native_type=temp)\n 776         else:\n 777             ret = self.device.execute(\n ~/dev/pennylane/pennylane/_qubit_device.py in execute(self, circuit, **kwargs)\n 152\n 153         # apply all circuit operations\n --> 154         self.apply(circuit.operations, rotations=circuit.diagonalizing_gates, **kwargs)\n 155\n 156         # generate computational basis samples\n ~/dev/pennylane/pennylane/plugins/default_qubit.py in apply(self, operations, rotations, **kwargs)\n 97             # number of wires on device\n 98             wires = operation.wires\n ---> 99             par = operation.parameters\n 100\n 101             if i > 0 and isinstance(operation, (QubitStateVector, BasisState)):\n ~/dev/pennylane/pennylane/operation.py in parameters(self)\n 462             return p\n 463\n --> 464         return [evaluate(p) for p in self.params]\n 465\n 466     def queue(self):\n ~/dev/pennylane/pennylane/operation.py in (.0)\n 462             return p\n 463\n --> 464         return [evaluate(p) for p in self.params]\n 465\n 466     def queue(self):\n ~/dev/pennylane/pennylane/operation.py in evaluate(p)\n 459                 return p\n 460             if isinstance(p, VariableRef):\n --> 461                 p = self.check_domain(p.val)\n 462             return p\n 463\n ~/dev/pennylane/pennylane/operation.py in check_domain(self, p, flattened)\n 411             if not isinstance(p, numbers.Real):\n 412                 raise TypeError(\n --> 413                     \"{}: Real scalar parameter expected, got {}.\".format(self.name, type(p))\n 414                 )\n 415\n TypeError: RX: Real scalar parameter expected, got <class 'numpy.complex128'>.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "co9olguy", "commentT": "2020-03-10T20:05:13Z", "comment_text": "\n \t\tNote that if we use a real matrix, the circuit executes without complaint\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "co9olguy", "commentT": "2020-03-11T03:11:59Z", "comment_text": "\n \t\tI think two things are happening here.\n Ideally, we want the following behaviour:\n \n \n Arrays/matrices should always be passed as auxiliary arguments, simply so pennylane knows they are not differentiable. This is independent of them becoming Variables or not.\n \n \n Arrays/matrices passed as positional arguments should still evaluate on the forward pass, but fail on the backward pass.\n \n \n However, when arrays are converted to variables, there is an issue. In the base QNode:\n <denchmark-link:https://github.com/XanaduAI/pennylane/blob/f7ad64a39187a577ff33d1cf3abb57e345eb317a/pennylane/qnodes/base.py#L288>https://github.com/XanaduAI/pennylane/blob/f7ad64a39187a577ff33d1cf3abb57e345eb317a/pennylane/qnodes/base.py#L288</denchmark-link>\n \n Due to NumPy casting rules, the presence of a single complex value will cause the entire array to become complex valued, even values that were originally real. This explains why this bug only affects circuits that contain QubitUnitary with complex arrays and parametrized gates.\n Question: is this a new issue, or has this always been present?\n Possible solutions:\n \n \n Enforce arrays always being passed as auxiliary arguments.\n Pro: easy. Cons: loss of flexibility\n \n \n Do not use a numpy array to store variable values, to allow multiple types. Cons: ?\n \n \n Cast gate parameters to floats, and only raise an error if the imaginary part is non-zero. Pro: easy, makes sense, gates already declare they require real parameters. Cons: ?\n \n \n I think (3) is the best solution, alongside making it more clear to the user that arrays should always be auxiliary if they plan to do backpropagation/gradient computations.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "co9olguy", "commentT": "2020-03-11T12:50:53Z", "comment_text": "\n \t\tI actually prefer solution (2), just have\n Variable.positional_arg_values = list(_flatten(args)))\n In that way, gates will still complain when the parameters are complex.\n Note that passing arrays as parameters is totally within scope in pennylane (e.g. weights for templates). In this particular case, the problem is that the parameter matrix is used in a place where it can not be differentiated.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "co9olguy", "commentT": "2020-03-25T04:57:07Z", "comment_text": "\n \t\tI'm curious now how much of an impact simply changing\n Variable.positional_arg_values = list(_flatten(args)))\n and running the tests will have.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "co9olguy", "commentT": "2020-03-27T22:07:13Z", "comment_text": "\n \t\t(I'm using the primary/auxiliary parameter nomeclature here.)\n The quantum circuits in PL are meant to be differentiable wrt. their primary parameters, which can always be treated as a flattenable nested sequence of real scalar values. So by design no complex values can appear as primary arguments. Furthermore, by design matrix-like parameters which are not differentiable should be auxiliary.\n Note that this does not prevent passing real arrays as primary arguments (weights in templates, for example).\n I would not allow passing complex values to primary parameters even on the forward pass (evaluation only, no differentiation), since this is unnecessary and just confuses the concepts. If it works, the user will be twice as surprised when the differentation suddenly raises an error.\n I think <denchmark-link:https://github.com/johannesjmeyer>@johannesjmeyer</denchmark-link>\n  's idea might be good: use a list instead of an array. I thought  access was fundamentally faster than list access, but it seems that Python lists are actually implemented using some kind of dynamic array with O(1) access, so it's certainly worth testing. If there is no performance loss, it seems like a clean solution.\n <denchmark-link:https://wiki.python.org/moin/TimeComplexity>https://wiki.python.org/moin/TimeComplexity</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "daa97d306050be1f8e0429dac5d4ec2502bcfc3a", "commit_author": "antalszava", "commitT": "2020-08-25 23:24:12+09:18", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "benchmark\\bm_jacobian_end_weighted.py", "file_new_name": "benchmark\\bm_jacobian_end_weighted.py", "file_complexity": {"file_NLOC": "36", "file_CCN": "8", "file_NToken": "270"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "34", "deleted_lines": "34"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "benchmark\\bm_jacobian_front_weighted.py", "file_new_name": "benchmark\\bm_jacobian_front_weighted.py", "file_complexity": {"file_NLOC": "36", "file_CCN": "8", "file_NToken": "270"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "34", "deleted_lines": "34"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "pennylane\\qnodes\\base.py", "file_new_name": "pennylane\\qnodes\\base.py", "file_complexity": {"file_NLOC": "436", "file_CCN": "136", "file_NToken": "2707"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "329", "deleted_lines": "329", "method_info": {"method_name": "_set_variables", "method_params": "self,args,kwargs", "method_startline": "321", "method_endline": "332", "method_complexity": {"method_NLOC": "4", "method_CCN": "3", "method_NToken": "57", "method_nesting_level": "1"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\qnodes\\test_qnode_base.py", "file_new_name": "tests\\qnodes\\test_qnode_base.py", "file_complexity": {"file_NLOC": "1005", "file_CCN": "156", "file_NToken": "10405"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853", "deleted_lines": null, "method_info": {"method_name": "test_complex_positional_argument_qubitunitary", "method_params": "self,tol", "method_startline": "837", "method_endline": "853", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "84", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "844,845,846,847,848", "deleted_lines": null, "method_info": {"method_name": "test_complex_positional_argument_qubitunitary.circuit", "method_params": "phi,matrix", "method_startline": "844", "method_endline": "848", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "45", "method_nesting_level": "2"}}}}}}}}