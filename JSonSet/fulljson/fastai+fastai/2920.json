{"BR": {"BR_id": "2920", "BR_author": "muellerzr", "BRopenT": "2020-10-30T23:23:43Z", "BRcloseT": "2020-11-03T01:59:35Z", "BR_text": {"BRsummary": "Torch Script Transforms Incapability with fastai's Adjustments to nn.Sequential", "BRdescription": "\n Torchvision now uses nn.Sequential to wrap transform pipelines. It seems one of fastai's little adjustments to the layers (specifically nn.Sequential) seems to break it. See below:\n import torchvision.transforms as tv\n from fastai.vision.all import *\n \n transforms = nn.Sequential(\n     tv.CenterCrop(224)\n )\n \n s_tfm = torch.jit.script(transforms)\n Full stack trace is below:\n ---------------------------------------------------------------------------\n UnsupportedNodeError                      Traceback (most recent call last)\n <ipython-input-57-3b8409179db3> in <module>()\n ----> 1 s_tfm = torch.jit.script(transforms)\n \n 9 frames\n /usr/local/lib/python3.6/dist-packages/torch/jit/_script.py in script(obj, optimize, _frames_up, _rcb)\n     896     if isinstance(obj, torch.nn.Module):\n     897         return torch.jit._recursive.create_script_module(\n --> 898             obj, torch.jit._recursive.infer_methods_to_compile\n     899         )\n     900 \n \n /usr/local/lib/python3.6/dist-packages/torch/jit/_recursive.py in create_script_module(nn_module, stubs_fn, share_types)\n     350     check_module_initialized(nn_module)\n     351     concrete_type = get_module_concrete_type(nn_module, share_types)\n --> 352     return create_script_module_impl(nn_module, concrete_type, stubs_fn)\n     353 \n     354 def create_script_module_impl(nn_module, concrete_type, stubs_fn):\n \n /usr/local/lib/python3.6/dist-packages/torch/jit/_recursive.py in create_script_module_impl(nn_module, concrete_type, stubs_fn)\n     363     cpp_module = torch._C._create_module_with_type(concrete_type.jit_type)\n     364     method_stubs = stubs_fn(nn_module)\n --> 365     property_stubs = get_property_stubs(nn_module)\n     366 \n     367     def init_fn(script_module):\n \n /usr/local/lib/python3.6/dist-packages/torch/jit/_recursive.py in get_property_stubs(nn_module)\n     599     \"\"\"\n     600     module_ty = type(nn_module)\n --> 601     properties_asts = get_class_properties(module_ty, self_name=\"RecursiveScriptModule\")\n     602     rcbs = {}\n     603 \n \n /usr/local/lib/python3.6/dist-packages/torch/jit/frontend.py in get_class_properties(cls, self_name)\n     149     for prop in props:\n     150         if prop[0] not in unused_properties and not should_drop(prop[1].fget):\n --> 151             getter = get_jit_def(prop[1].fget, f\"__{prop[0]}_getter\", self_name=self_name)\n     152             setter = get_jit_def(prop[1].fset, f\"__{prop[0]}_setter\", self_name=self_name) if prop[1].fset else None\n     153             properties.append(Property(getter.range(), Ident(getter.range(), prop[0]), getter, setter))\n \n /usr/local/lib/python3.6/dist-packages/torch/jit/frontend.py in get_jit_def(fn, def_name, self_name)\n     219             arg.annotation = unused_def.args.args[0].annotation\n     220 \n --> 221     return build_def(ctx, fn_def, type_line, def_name, self_name=self_name)\n     222 \n     223 \n \n /usr/local/lib/python3.6/dist-packages/torch/jit/frontend.py in build_def(ctx, py_def, type_line, def_name, self_name)\n     253     return Def(Ident(r, def_name),\n     254                decl,\n --> 255                build_stmts(ctx, body))\n     256 \n     257 \n \n /usr/local/lib/python3.6/dist-packages/torch/jit/frontend.py in build_stmts(ctx, stmts)\n     125 \n     126 def build_stmts(ctx, stmts):\n --> 127     stmts = [build_stmt(ctx, s) for s in stmts]\n     128     return list(filter(None, stmts))\n     129 \n \n /usr/local/lib/python3.6/dist-packages/torch/jit/frontend.py in <listcomp>(.0)\n     125 \n     126 def build_stmts(ctx, stmts):\n --> 127     stmts = [build_stmt(ctx, s) for s in stmts]\n     128     return list(filter(None, stmts))\n     129 \n \n /usr/local/lib/python3.6/dist-packages/torch/jit/frontend.py in __call__(self, ctx, node)\n     226         method = getattr(self, 'build_' + node.__class__.__name__, None)\n     227         if method is None:\n --> 228             raise UnsupportedNodeError(ctx, node)\n     229         return method(ctx, node)\n     230 \n \n UnsupportedNodeError: try blocks aren't supported:\n   File \"/usr/local/lib/python3.6/dist-packages/fastai/layers.py\", line 572\n def _has_children(m:nn.Module):\n     try: next(m.children())\n     ~~~ <--- HERE\n     except StopIteration: return False\n     return True\n cc: <denchmark-link:https://github.com/jph00>@jph00</denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "muellerzr", "commentT": "2020-11-24T08:02:14Z", "comment_text": "\n \t\thi are there are fixes for this? I'm running into this issue as well. This is my code:\n <denchmark-code>img_size = 128\n trace_input = torch.ones(1,3,img_size,img_size).cuda()\n learn.model.eval()\n jit_model = torch.jit.trace(learn.model.float(), trace_input)\n </denchmark-code>\n \n This is my error:\n <denchmark-code>---------------------------------------------------------------------------\n UnsupportedNodeError                      Traceback (most recent call last)\n <ipython-input-64-8261d07310ef> in <module>\n       2 trace_input = torch.ones(1,3,img_size,img_size).cuda()\n       3 learn.model.eval()\n ----> 4 jit_model = torch.jit.trace(learn.model.float(), trace_input)\n       5 #jit_model\n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/_trace.py in trace(func, example_inputs, optimize, check_trace, check_inputs, check_tolerance, strict, _force_outplace, _module_class, _compilation_unit)\n     740             strict,\n     741             _force_outplace,\n --> 742             _module_class,\n     743         )\n     744 \n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/_trace.py in trace_module(mod, inputs, optimize, check_trace, check_inputs, check_tolerance, strict, _force_outplace, _module_class, _compilation_unit)\n     926         register_submods(mod, \"__module\")\n     927 \n --> 928         module = make_module(mod, _module_class, _compilation_unit)\n     929 \n     930         for method_name, example_inputs in inputs.items():\n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/_trace.py in make_module(mod, _module_class, _compilation_unit)\n     558         if _module_class is None:\n     559             _module_class = TopLevelTracedModule\n --> 560         return _module_class(mod, _compilation_unit=_compilation_unit)\n     561 \n     562 \n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/_trace.py in __init__(self, orig, id_set, _compilation_unit)\n    1038         for name, submodule in orig._modules.items():\n    1039             tmp_module._modules[name] = make_module(\n -> 1040                 submodule, TracedModule, _compilation_unit=None\n    1041             )\n    1042 \n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/_trace.py in make_module(mod, _module_class, _compilation_unit)\n     558         if _module_class is None:\n     559             _module_class = TopLevelTracedModule\n --> 560         return _module_class(mod, _compilation_unit=_compilation_unit)\n     561 \n     562 \n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/_trace.py in __init__(self, orig, id_set, _compilation_unit)\n    1038         for name, submodule in orig._modules.items():\n    1039             tmp_module._modules[name] = make_module(\n -> 1040                 submodule, TracedModule, _compilation_unit=None\n    1041             )\n    1042 \n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/_trace.py in make_module(mod, _module_class, _compilation_unit)\n     558         if _module_class is None:\n     559             _module_class = TopLevelTracedModule\n --> 560         return _module_class(mod, _compilation_unit=_compilation_unit)\n     561 \n     562 \n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/_trace.py in __init__(self, orig, id_set, _compilation_unit)\n    1038         for name, submodule in orig._modules.items():\n    1039             tmp_module._modules[name] = make_module(\n -> 1040                 submodule, TracedModule, _compilation_unit=None\n    1041             )\n    1042 \n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/_trace.py in make_module(mod, _module_class, _compilation_unit)\n     558         if _module_class is None:\n     559             _module_class = TopLevelTracedModule\n --> 560         return _module_class(mod, _compilation_unit=_compilation_unit)\n     561 \n     562 \n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/_trace.py in __init__(self, orig, id_set, _compilation_unit)\n    1042 \n    1043         script_module = torch.jit._recursive.create_script_module(\n -> 1044             tmp_module, lambda module: (), share_types=False\n    1045         )\n    1046 \n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/_recursive.py in create_script_module(nn_module, stubs_fn, share_types)\n     350     check_module_initialized(nn_module)\n     351     concrete_type = get_module_concrete_type(nn_module, share_types)\n --> 352     return create_script_module_impl(nn_module, concrete_type, stubs_fn)\n     353 \n     354 def create_script_module_impl(nn_module, concrete_type, stubs_fn):\n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/_recursive.py in create_script_module_impl(nn_module, concrete_type, stubs_fn)\n     363     cpp_module = torch._C._create_module_with_type(concrete_type.jit_type)\n     364     method_stubs = stubs_fn(nn_module)\n --> 365     property_stubs = get_property_stubs(nn_module)\n     366 \n     367     def init_fn(script_module):\n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/_recursive.py in get_property_stubs(nn_module)\n     599     \"\"\"\n     600     module_ty = type(nn_module)\n --> 601     properties_asts = get_class_properties(module_ty, self_name=\"RecursiveScriptModule\")\n     602     rcbs = {}\n     603 \n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/frontend.py in get_class_properties(cls, self_name)\n     149     for prop in props:\n     150         if prop[0] not in unused_properties and not should_drop(prop[1].fget):\n --> 151             getter = get_jit_def(prop[1].fget, f\"__{prop[0]}_getter\", self_name=self_name)\n     152             setter = get_jit_def(prop[1].fset, f\"__{prop[0]}_setter\", self_name=self_name) if prop[1].fset else None\n     153             properties.append(Property(getter.range(), Ident(getter.range(), prop[0]), getter, setter))\n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/frontend.py in get_jit_def(fn, def_name, self_name)\n     219             arg.annotation = unused_def.args.args[0].annotation\n     220 \n --> 221     return build_def(ctx, fn_def, type_line, def_name, self_name=self_name)\n     222 \n     223 \n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/frontend.py in build_def(ctx, py_def, type_line, def_name, self_name)\n     253     return Def(Ident(r, def_name),\n     254                decl,\n --> 255                build_stmts(ctx, body))\n     256 \n     257 \n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/frontend.py in build_stmts(ctx, stmts)\n     125 \n     126 def build_stmts(ctx, stmts):\n --> 127     stmts = [build_stmt(ctx, s) for s in stmts]\n     128     return list(filter(None, stmts))\n     129 \n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/frontend.py in <listcomp>(.0)\n     125 \n     126 def build_stmts(ctx, stmts):\n --> 127     stmts = [build_stmt(ctx, s) for s in stmts]\n     128     return list(filter(None, stmts))\n     129 \n \n ~/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/torch/jit/frontend.py in __call__(self, ctx, node)\n     226         method = getattr(self, 'build_' + node.__class__.__name__, None)\n     227         if method is None:\n --> 228             raise UnsupportedNodeError(ctx, node)\n     229         return method(ctx, node)\n     230 \n \n UnsupportedNodeError: try blocks aren't supported:\n   File \"/home/ec2-user/anaconda3/envs/pytorch_latest_p36/lib/python3.6/site-packages/fastai/layers.py\", line 572\n def _has_children(m:nn.Module):\n     try: next(m.children())\n     ~~~ <--- HERE\n     except StopIteration: return False\n     return True\n \n </denchmark-code>\n \n \t\t"}}}, "commit": {"commit_id": "12e79779303a58571c18dc51605084cf004e9a60", "commit_author": "Jeremy Howard", "commitT": "2020-11-02 16:58:03-08:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": ".gitignore", "file_new_name": ".gitignore", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "1", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "fastai\\_nbdev.py", "file_new_name": "fastai\\_nbdev.py", "file_complexity": {"file_NLOC": "867", "file_CCN": "1", "file_NToken": "3384"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "151", "deleted_lines": "151"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "fastai\\layers.py", "file_new_name": "fastai\\layers.py", "file_complexity": {"file_NLOC": "437", "file_CCN": "115", "file_NToken": "5118"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "571", "deleted_lines": "571", "method_info": {"method_name": "has_children", "method_params": "m", "method_startline": "571", "method_endline": "574", "method_complexity": {"method_NLOC": "4", "method_CCN": "2", "method_NToken": "22", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "571", "deleted_lines": "571", "method_info": {"method_name": "_has_children", "method_params": "Module", "method_startline": "571", "method_endline": "574", "method_complexity": {"method_NLOC": "4", "method_CCN": "2", "method_NToken": "26", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "579", "deleted_lines": "577", "method_info": {"method_name": "flatten_model", "method_params": "m", "method_startline": "577", "method_endline": "579", "method_complexity": {"method_NLOC": "3", "method_CCN": "2", "method_NToken": "31", "method_nesting_level": "0"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "nbs\\01_layers.ipynb", "file_new_name": "nbs\\01_layers.ipynb", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "140,1885,1888,1898,1899,1911", "deleted_lines": "140,141,142,1887,1890,1891,1892,1902,1903,1915"}}}}}}