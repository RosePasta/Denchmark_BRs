{"BR": {"BR_id": "2978", "BR_author": "wfwiggins", "BRopenT": "2020-11-12T21:12:10Z", "BRcloseT": "2020-11-22T13:54:56Z", "BR_text": {"BRsummary": "`TextDataLoaders.from_df()` returns `TypeError: 'float' object is not iterable`", "BRdescription": "\n Please confirm you have the latest versions of fastai, fastcore, fastscript, and nbdev prior to reporting a bug (delete one): YES\n <denchmark-code>fastai==2.1.5\n fastcore==1.3.4\n </denchmark-code>\n \n Describe the bug\n Creating TextDataLoaders.from_df(...) fails with TypeError: 'float' object is not iterable.\n To Reproduce\n Code to reproduce the behavior:\n <denchmark-code>>>> dls_lm = TextDataLoaders.from_df(train_val, valid_pct=0.3, seed=42, text_col='full-text', is_lm=True) # FAILS\n >>> dls_cls = TextDataLoaders.from_df(train_val, valid_pct=validation_pct, seed=42, text_col=training_target, label_col='label', text_vocab=lm_vocab) # FAILS\n </denchmark-code>\n \n See Colab notebook at <denchmark-link:https://colab.research.google.com/github/wfwiggins/RSNA-NLP-2020/blob/master/RSNA20_NLP.ipynb>this link</denchmark-link>\n .\n Expected behavior\n Should return TextDataLoaders to the assigned variable.\n Error with full stack trace\n <denchmark-code>---------------------------------------------------------------------------\n TypeError                                 Traceback (most recent call last)\n <ipython-input-11-396b44668da0> in <module>()\n      11 \n      12 lm_vocab = torch.load('vocab.pkl')\n ---> 13 dls_cls = TextDataLoaders.from_df(train_val, valid_pct=validation_pct, seed=42, text_col=training_target, label_col='label', text_vocab=lm_vocab)\n      14 dls_cls.show_batch(max_n=3)\n \n 13 frames\n /usr/local/lib/python3.6/dist-packages/fastai/text/data.py in from_df(cls, df, path, valid_pct, seed, text_col, label_col, label_delim, y_block, text_vocab, is_lm, valid_col, tok_tfm, seq_len, backwards, **kwargs)\n     272                            get_y=None if is_lm else ColReader(label_col, label_delim=label_delim),\n     273                            splitter=splitter)\n --> 274         return cls.from_dblock(dblock, df, path=path, seq_len=seq_len, **kwargs)\n     275 \n     276     @classmethod\n \n /usr/local/lib/python3.6/dist-packages/fastai/data/core.py in from_dblock(cls, dblock, source, path, bs, val_bs, shuffle_train, device, **kwargs)\n     178     @classmethod\n     179     def from_dblock(cls, dblock, source, path='.',  bs=64, val_bs=None, shuffle_train=True, device=None, **kwargs):\n --> 180         return dblock.dataloaders(source, path=path, bs=bs, val_bs=val_bs, shuffle_train=shuffle_train, device=device, **kwargs)\n     181 \n     182     _docs=dict(__getitem__=\"Retrieve `DataLoader` at `i` (`0` is training, `1` is validation)\",\n \n /usr/local/lib/python3.6/dist-packages/fastai/data/block.py in dataloaders(self, source, path, verbose, **kwargs)\n     111 \n     112     def dataloaders(self, source, path='.', verbose=False, **kwargs):\n --> 113         dsets = self.datasets(source)\n     114         kwargs = {**self.dls_kwargs, **kwargs, 'verbose': verbose}\n     115         return dsets.dataloaders(path=path, after_item=self.item_tfms, after_batch=self.batch_tfms, **kwargs)\n \n /usr/local/lib/python3.6/dist-packages/fastai/data/block.py in datasets(self, source, verbose)\n     108         splits = (self.splitter or RandomSplitter())(items)\n     109         pv(f\"{len(splits)} datasets of sizes {','.join([str(len(s)) for s in splits])}\", verbose)\n --> 110         return Datasets(items, tfms=self._combine_type_tfms(), splits=splits, dl_type=self.dl_type, n_inp=self.n_inp, verbose=verbose)\n     111 \n     112     def dataloaders(self, source, path='.', verbose=False, **kwargs):\n \n /usr/local/lib/python3.6/dist-packages/fastai/data/core.py in __init__(self, items, tfms, tls, n_inp, dl_type, **kwargs)\n     308     def __init__(self, items=None, tfms=None, tls=None, n_inp=None, dl_type=None, **kwargs):\n     309         super().__init__(dl_type=dl_type)\n --> 310         self.tls = L(tls if tls else [TfmdLists(items, t, **kwargs) for t in L(ifnone(tfms,[None]))])\n     311         self.n_inp = ifnone(n_inp, max(1, len(self.tls)-1))\n     312 \n \n /usr/local/lib/python3.6/dist-packages/fastai/data/core.py in <listcomp>(.0)\n     308     def __init__(self, items=None, tfms=None, tls=None, n_inp=None, dl_type=None, **kwargs):\n     309         super().__init__(dl_type=dl_type)\n --> 310         self.tls = L(tls if tls else [TfmdLists(items, t, **kwargs) for t in L(ifnone(tfms,[None]))])\n     311         self.n_inp = ifnone(n_inp, max(1, len(self.tls)-1))\n     312 \n \n /usr/local/lib/python3.6/dist-packages/fastcore/foundation.py in __call__(cls, x, *args, **kwargs)\n     161     def __call__(cls, x=None, *args, **kwargs):\n     162         if not args and not kwargs and x is not None and isinstance(x,cls): return x\n --> 163         return super().__call__(x, *args, **kwargs)\n     164 \n     165 # Cell\n \n /usr/local/lib/python3.6/dist-packages/fastai/data/core.py in __init__(self, items, tfms, use_list, do_setup, split_idx, train_setup, splits, types, verbose, dl_type)\n     234         if do_setup:\n     235             pv(f\"Setting up {self.tfms}\", verbose)\n --> 236             self.setup(train_setup=train_setup)\n     237 \n     238     def _new(self, items, split_idx=None, **kwargs):\n \n /usr/local/lib/python3.6/dist-packages/fastai/data/core.py in setup(self, train_setup)\n     256             for f in self.tfms.fs:\n     257                 self.types.append(getattr(f, 'input_types', type(x)))\n --> 258                 x = f(x)\n     259             self.types.append(type(x))\n     260         types = L(t if is_listy(t) else [t] for t in self.types).concat().unique()\n \n /usr/local/lib/python3.6/dist-packages/fastcore/transform.py in __call__(self, x, **kwargs)\n      71     @property\n      72     def name(self): return getattr(self, '_name', _get_name(self))\n ---> 73     def __call__(self, x, **kwargs): return self._call('encodes', x, **kwargs)\n      74     def decode  (self, x, **kwargs): return self._call('decodes', x, **kwargs)\n      75     def __repr__(self): return f'{self.name}:\\nencodes: {self.encodes}decodes: {self.decodes}'\n \n /usr/local/lib/python3.6/dist-packages/fastcore/transform.py in _call(self, fn, x, split_idx, **kwargs)\n      81     def _call(self, fn, x, split_idx=None, **kwargs):\n      82         if split_idx!=self.split_idx and self.split_idx is not None: return x\n ---> 83         return self._do_call(getattr(self, fn), x, **kwargs)\n      84 \n      85     def _do_call(self, f, x, **kwargs):\n \n /usr/local/lib/python3.6/dist-packages/fastcore/transform.py in _do_call(self, f, x, **kwargs)\n      87             if f is None: return x\n      88             ret = f.returns_none(x) if hasattr(f,'returns_none') else None\n ---> 89             return retain_type(f(x, **kwargs), x, ret)\n      90         res = tuple(self._do_call(f, x_, **kwargs) for x_ in x)\n      91         return retain_type(res, x)\n \n /usr/local/lib/python3.6/dist-packages/fastcore/dispatch.py in __call__(self, *args, **kwargs)\n     115         elif self.inst is not None: f = MethodType(f, self.inst)\n     116         elif self.owner is not None: f = MethodType(f, self.owner)\n --> 117         return f(*args, **kwargs)\n     118 \n     119     def __get__(self, inst, owner):\n \n /usr/local/lib/python3.6/dist-packages/fastai/text/data.py in encodes(self, o)\n      46             self.o2i = defaultdict(int, {v:k for k,v in enumerate(self.vocab) if v != 'xxfake'})\n      47 \n ---> 48     def encodes(self, o): return TensorText(tensor([self.o2i  [o_] for o_ in o]))\n      49     def decodes(self, o): return L(self.vocab[o_] for o_ in o)\n      50 \n \n TypeError: 'float' object is not iterable\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "wfwiggins", "commentT": "2020-11-12T21:35:34Z", "comment_text": "\n \t\tAnother user posted on this issue in the forums <denchmark-link:https://forums.fast.ai/t/getting-error-typeerror-float-object-is-not-iterable-when-creating-dataloaders/81881/2>see post here</denchmark-link>\n .\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "wfwiggins", "commentT": "2020-11-12T22:08:58Z", "comment_text": "\n \t\tThe issue appears to pertain to a change in fastcore and was temporarily fixed by pinning fastcore==1.3.1. Will move this to the fastcore Issues.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "wfwiggins", "commentT": "2020-11-21T21:26:43Z", "comment_text": "\n \t\tThis issue is indeed in fastai and not fastcore\n Simply downgrading to fastcore==1.3.1 does not resolve the issue.  You must downgrade to fastai==2.1.4\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "wfwiggins", "commentT": "2020-11-21T23:21:51Z", "comment_text": "\n \t\tI can recreate with the following code and the attached csv\n <denchmark-code>from fastai.text.all import *\n df = pd.read_csv('reviewSpamData.csv')\n df_new = df[(df.domain.str.contains('hotel')) & (df.type.str.contains('expert')==False)]\n dls_lm = TextDataLoaders.from_df(df_new, valid_pct = 0.1, text_col='text', \n                                  label_col='spam', bs=256, seq_len=80, is_lm=True)\n </denchmark-code>\n \n <denchmark-link:https://github.com/fastai/fastai/files/5578636/reviewSpamData.zip>reviewSpamData.zip</denchmark-link>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "wfwiggins", "commentT": "2020-11-22T03:14:39Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/dalupus>@dalupus</denchmark-link>\n  you are correct. I had overlooked the fact that I had also pinned  in order to fix this issue.\n It appears that reverting the change to tokenize_df made in fastai.text.core from 2.1.4 -> 2.1.5 fixes this issue. The change was apparently made in response to a numpy warning. The change was made on line 224 of fastai/text/core.py.\n <denchmark-code># fastai==2.1.4\n 224    res[tok_text_col] = outputs\n \n # fastai==2.1.5\n 224    res[tok_text_col] = pd.Series(outputs, dtype=object)\n </denchmark-code>\n \n I will submit a PR reverting this change shortly, assuming this is desirable.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "wfwiggins", "commentT": "2020-11-22T16:10:36Z", "comment_text": "\n \t\tThanks <denchmark-link:https://github.com/wfwiggins>@wfwiggins</denchmark-link>\n  .  That change caught my eye but I was overwhelmed by all the padding changes.\n \t\t"}}}, "commit": {"commit_id": "0e0113134936f4a624487aede940e6142427ab80", "commit_author": "Walter Wiggins, MD, PhD", "commitT": "2020-11-22 05:54:43-08:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "0.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "fastai\\text\\core.py", "file_new_name": "fastai\\text\\core.py", "file_complexity": {"file_NLOC": "275", "file_CCN": "78", "file_NToken": "3066"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "224", "deleted_lines": "224"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "fastai\\vision\\utils.py", "file_new_name": "fastai\\vision\\utils.py", "file_complexity": {"file_NLOC": "70", "file_CCN": "17", "file_NToken": "713"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "37,38", "deleted_lines": "37", "method_info": {"method_name": "download_images", "method_params": "dest,url_file,urls,max_pics,n_workers,timeout,preserve_filename", "method_startline": "32", "method_endline": "38", "method_complexity": {"method_NLOC": "7", "method_CCN": "2", "method_NToken": "98", "method_nesting_level": "0"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "nbs\\30_text.core.ipynb", "file_new_name": "nbs\\30_text.core.ipynb", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "790", "deleted_lines": "790"}}}}}}