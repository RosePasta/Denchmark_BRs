{"BR": {"BR_id": "2409", "BR_author": "zrqiao", "BRopenT": "2020-12-09T01:53:31Z", "BRcloseT": "2021-01-05T14:22:04Z", "BR_text": {"BRsummary": "Batching fails when remove_edges is called on part of the graphs", "BRdescription": "\n <denchmark-h:h2>\ud83d\udc1b Bug</denchmark-h>\n \n In my graph dataloader, g.remove_edges(zero_eid) is called on each graph before batching, but for some graphs zero_eid has no elements. When calling dgl.batch, I got the following error:\n \n dgl._ffi.base.DGLError: Expect all graphs to have the same schema on nodes[\"ao\"].data, but graph 6 got\n {'n': Scheme(shape=(), dtype=torch.int64), 'l': Scheme(shape=(), dtype=torch.int64)}\n which is different from\n {'n': Scheme(shape=(), dtype=torch.int64), 'l': Scheme(shape=(), dtype=torch.int64), '_ID': Scheme(shape=(), dtype=torch.int64)}.\n \n <denchmark-h:h2>Suggested changes</denchmark-h>\n \n I used the following workaround that changes <denchmark-link:https://github.com/dmlc/dgl/blob/master/python/dgl/heterograph.py#L680>L680-690 of dgl/heterograph.py</denchmark-link>\n  to:\n <denchmark-code>         if len(eids) > 0:\n              assert self.number_of_edges(etype) > F.as_scalar(F.max(eids, dim=0)), \\\n                  \"The input eid {} is out of the range [0:{})\".format(\n                      F.as_scalar(F.max(eids, dim=0)), self.number_of_edges(etype))\n \n          # edge_subgraph\n          edges = {}\n          u_type, e_type, v_type = self.to_canonical_etype(etype)\n          for c_etype in self.canonical_etypes:\n              # the target edge type\n              if c_etype == (u_type, e_type, v_type) and len(eids) > 0:\n                  origin_eids = self.edges(form='eid', order='eid', etype=c_etype)\n                  edges[c_etype] = utils.compensate(eids, origin_eids)\n              else:\n                  edges[c_etype] = self.edges(form='eid', order='eid', etype=c_etype)\n </denchmark-code>\n \n which enforce self.edge_subgraph to be called when the number of edges to be removed is zero. I can make a PR if this is a desirable solution. Thanks!\n <denchmark-h:h2>Environment</denchmark-h>\n \n \n DGL Version: 0.5.3\n Backend Library & Version: PyTorch 1.7.0\n OS: Linux\n How you installed DGL: pip\n Python version: 3.7\n CUDA/cuDNN version (if applicable): 10.2\n GPU models and configuration: V100\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "zrqiao", "commentT": "2020-12-10T07:12:28Z", "comment_text": "\n \t\tThanks for the report and I confirmed the error with the code snippet below.\n import dgl\n import torch\n \n g1 = dgl.graph(([1, 2], [2, 3]))\n g2 = dgl.graph(([1], [0]))\n g3 = dgl.graph(([1, 1, 1,], [2, 3, 0]))\n node_feats = 2\n edge_feats = 3\n graphs = [g1, g2, g3]\n for g in graphs:\n     g.ndata['hv'] = torch.randn(g.num_nodes(), node_feats)\n     g.edata['he'] = torch.randn(g.num_edges(), edge_feats)\n \n g1.remove_edges([])\n g2.remove_edges([0])\n g3.remove_edges([0, 2])\n bg = dgl.batch([g1, g2, g3])\n It seems that remove_edges invokes edge_subgraph, which records the original IDs for the nodes/edges in the subgraph. Meanwhile, it skips the operation when remove_edges has no elements at all. I guess a similar issue also exists for remove_nodes. I can think of the following options:\n \n Enforcing the call of subgraph extraction as you proposed. The drawback is that this brings additional unnecessary overhead.\n Simply not storing the original node/edge IDs. This is not mentioned in the doc as well.\n Add an additional argument to enable/disable storing the original node/edge IDs.\n \n What do you think? Copy <denchmark-link:https://github.com/jermainewang>@jermainewang</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "zrqiao", "commentT": "2020-12-10T17:58:39Z", "comment_text": "\n \t\tThanks. As for now, to avoid mutating the source code I used a tricky workaround: I just create a new graph with the subgraph indices/features to manually remove the original EIDs.\n My opinion is that if we do not change the current function, the issue can be circumvented in the application code. But I agree that this behavior of remove_edges should be elaborated on in the documentation to avoid confusion.\n \t\t"}}}, "commit": {"commit_id": "0c2a2ea1e2267d3442d52e476ca0438cf9d0f5ed", "commit_author": "Mufei Li", "commitT": "2021-01-05 22:22:03+08:00", "commit_complexity": {"commit_NLOC": "0.07142857142857142", "commit_CCN": "0.6428571428571429", "commit_Nprams": "0.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\dgl\\dataloading\\dataloader.py", "file_new_name": "python\\dgl\\dataloading\\dataloader.py", "file_complexity": {"file_NLOC": "448", "file_CCN": "55", "file_NToken": "1722"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "230,231,239,240", "deleted_lines": "230,238", "method_info": {"method_name": "sample_blocks", "method_params": "self,g,seed_nodes,exclude_eids", "method_startline": "188", "method_endline": "254", "method_complexity": {"method_NLOC": "30", "method_CCN": "10", "method_NToken": "276", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "python\\dgl\\heterograph.py", "file_new_name": "python\\dgl\\heterograph.py", "file_complexity": {"file_NLOC": "1926", "file_CCN": "414", "file_NToken": "11059"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "614,630,631,632,633", "deleted_lines": "610,697", "method_info": {"method_name": "remove_nodes", "method_params": "self,nids,ntype", "method_startline": "610", "method_endline": "700", "method_complexity": {"method_NLOC": "85", "method_CCN": "6", "method_NToken": "201", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "614,630,631,632,633,705", "deleted_lines": "697", "method_info": {"method_name": "remove_nodes", "method_params": "self,nids,ntype,store_ids", "method_startline": "614", "method_endline": "708", "method_complexity": {"method_NLOC": "89", "method_CCN": "6", "method_NToken": "209", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "523,539,540,541,542,609", "deleted_lines": "523,605,610", "method_info": {"method_name": "remove_edges", "method_params": "self,eids,etype,store_ids", "method_startline": "523", "method_endline": "612", "method_complexity": {"method_NLOC": "84", "method_CCN": "6", "method_NToken": "238", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "523,539,540,541,542", "deleted_lines": "523,605", "method_info": {"method_name": "remove_edges", "method_params": "self,eids,etype", "method_startline": "523", "method_endline": "608", "method_complexity": {"method_NLOC": "80", "method_CCN": "6", "method_NToken": "230", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "python\\dgl\\subgraph.py", "file_new_name": "python\\dgl\\subgraph.py", "file_complexity": {"file_NLOC": "130", "file_CCN": "45", "file_NToken": "1269"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "20,52,53,54,55,141", "deleted_lines": "20,32,33,34,140", "method_info": {"method_name": "node_subgraph", "method_params": "graph,nodes,store_ids", "method_startline": "20", "method_endline": "141", "method_complexity": {"method_NLOC": "15", "method_CCN": "4", "method_NToken": "136", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "637,652,653,654,655,662,663", "deleted_lines": "656,657", "method_info": {"method_name": "_create_hetero_subgraph", "method_params": "parent,sgi,induced_nodes,induced_edges,store_ids", "method_startline": "637", "method_endline": "666", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "72", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "637,652,653,654,655", "deleted_lines": "635,656,657", "method_info": {"method_name": "_create_hetero_subgraph", "method_params": "parent,sgi,induced_nodes,induced_edges", "method_startline": "635", "method_endline": "660", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "64", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "20,52,53,54,55", "deleted_lines": "20,32,33,34,140", "method_info": {"method_name": "node_subgraph", "method_params": "graph,nodes", "method_startline": "20", "method_endline": "140", "method_complexity": {"method_NLOC": "15", "method_CCN": "4", "method_NToken": "130", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "145,178,180,181,182,183", "deleted_lines": "144,156,157,158,180,281", "method_info": {"method_name": "edge_subgraph", "method_params": "graph,edges,preserve_nodes", "method_startline": "144", "method_endline": "281", "method_complexity": {"method_NLOC": "16", "method_CCN": "6", "method_NToken": "161", "method_nesting_level": "0"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "145,178,180,181,182,183,283", "deleted_lines": "156,157,158,180,281", "method_info": {"method_name": "edge_subgraph", "method_params": "graph,edges,preserve_nodes,store_ids", "method_startline": "145", "method_endline": "283", "method_complexity": {"method_NLOC": "16", "method_CCN": "6", "method_NToken": "167", "method_nesting_level": "0"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "python\\dgl\\transform.py", "file_new_name": "python\\dgl\\transform.py", "file_complexity": {"file_NLOC": "1186", "file_CCN": "71", "file_NToken": "3346"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1119,1138,1139,1140,1141", "deleted_lines": "1119,1182", "method_info": {"method_name": "remove_edges", "method_params": "g,eids,etype", "method_startline": "1119", "method_endline": "1183", "method_complexity": {"method_NLOC": "65", "method_CCN": "1", "method_NToken": "32", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "1186,1190,1204,1205,1206,1207", "deleted_lines": "1186,1250", "method_info": {"method_name": "remove_nodes", "method_params": "g,nids,ntype", "method_startline": "1186", "method_endline": "1251", "method_complexity": {"method_NLOC": "66", "method_CCN": "1", "method_NToken": "32", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "1190,1204,1205,1206,1207,1258", "deleted_lines": "1250", "method_info": {"method_name": "remove_nodes", "method_params": "g,nids,ntype,store_ids", "method_startline": "1190", "method_endline": "1259", "method_complexity": {"method_NLOC": "70", "method_CCN": "1", "method_NToken": "40", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "1119,1138,1139,1140,1141,1186", "deleted_lines": "1119,1182,1186", "method_info": {"method_name": "remove_edges", "method_params": "g,eids,etype,store_ids", "method_startline": "1119", "method_endline": "1187", "method_complexity": {"method_NLOC": "69", "method_CCN": "1", "method_NToken": "40", "method_nesting_level": "0"}}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "python\\dgl\\utils\\internal.py", "file_new_name": "python\\dgl\\utils\\internal.py", "file_complexity": {"file_NLOC": "456", "file_CCN": "147", "file_NToken": "3527"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "757,772,773,774,775,788,789", "deleted_lines": "757,772,773,786", "method_info": {"method_name": "extract_node_subframes", "method_params": "graph,nodes,store_ids", "method_startline": "757", "method_endline": "791", "method_complexity": {"method_NLOC": "11", "method_CCN": "5", "method_NToken": "78", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "829,844,845,846,847", "deleted_lines": "826,841,842,855", "method_info": {"method_name": "extract_edge_subframes", "method_params": "graph,edges", "method_startline": "826", "method_endline": "857", "method_complexity": {"method_NLOC": "10", "method_CCN": "4", "method_NToken": "71", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "829,844,845,846,847,860,861", "deleted_lines": "841,842,855", "method_info": {"method_name": "extract_edge_subframes", "method_params": "graph,edges,store_ids", "method_startline": "829", "method_endline": "863", "method_complexity": {"method_NLOC": "11", "method_CCN": "5", "method_NToken": "78", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "757,772,773,774,775,788", "deleted_lines": "757,772,773,786", "method_info": {"method_name": "extract_node_subframes", "method_params": "graph,nodes", "method_startline": "757", "method_endline": "788", "method_complexity": {"method_NLOC": "10", "method_CCN": "4", "method_NToken": "71", "method_nesting_level": "0"}}}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\compute\\test_removal.py", "file_new_name": "tests\\compute\\test_removal.py", "file_complexity": {"file_NLOC": "166", "file_CCN": "16", "file_NToken": "1682"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "104,105,114,118,119", "deleted_lines": "110", "method_info": {"method_name": "test_edge_removal", "method_params": "idtype", "method_startline": "90", "method_endline": "119", "method_complexity": {"method_NLOC": "24", "method_CCN": "3", "method_NToken": "305", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "19,20,28,31,32", "deleted_lines": "28", "method_info": {"method_name": "test_node_removal", "method_params": "idtype", "method_startline": "7", "method_endline": "32", "method_complexity": {"method_NLOC": "20", "method_CCN": "1", "method_NToken": "261", "method_nesting_level": "0"}}}}}}}}