{"BR": {"BR_id": "1081", "BR_author": "JakeStevens", "BRopenT": "2019-12-07T23:19:19Z", "BRcloseT": "2019-12-11T06:32:26Z", "BR_text": {"BRsummary": "[Bug] Issue in reversing graph that was loaded from file", "BRdescription": "\n <denchmark-h:h2>\ud83d\udc1b Bug</denchmark-h>\n \n Reversing a graph that was loaded from a file using shared_*data does not result in a correct reversed graph for certain graph topologies. The graph's edges are mutated on the first reverse, resulting in the incorrect graph. Subsequent calls to reverse do not mutate the graph further.\n <denchmark-h:h2>To Reproduce</denchmark-h>\n \n <denchmark-code>from dgl import DGLGraph\n from dgl.data.utils import save_graphs, load_graphs\n import torch\n \n graph = DGLGraph()\n graph.add_nodes(3)\n graph.add_edge(1, 0)\n graph.add_edge(0, 1)\n graph.add_edge(2, 0)\n graph.edata['e_feats'] = torch.Tensor([[0, 1, 0],\n                               [1, 1, 1],\n                               [1, 0, 1]])\n save_graphs('./graph.bin', graph)\n \n \n before_direct = graph.edges[[0,1,2],[1,0,0]].data['e_feats']\n g = graph.reverse(share_ndata=True, share_edata=True)\n after_direct = g.edges[[1,0,0],[0,1,2]].data['e_feats']\n \n graphs, _ = load_graphs('./graph.bin')\n graph = graphs[0]\n \n before_load = graph.edges[[0,1,2],[1,0,0]].data['e_feats']\n g = graph.reverse(share_ndata=True, share_edata=True)\n after_load = g.edges[[1,0,0],[0,1,2]].data['e_feats']\n g2 = g.reverse(share_ndata=True, share_edata=True)\n after_load_2nd_rev = g2.edges[[0,1,2],[1,0,0]].data['e_feats']\n \n print(torch.all(before_direct == after_direct)) #should be true, is true\n print(torch.all(before_load == after_load)) #should be true, is false\n print(torch.all(after_load == after_load_2nd_rev)) #should be true, is true\n </denchmark-code>\n \n <denchmark-h:h2>Expected behavior</denchmark-h>\n \n The edge data for an edge (e.g, (1 -> 0)) should be the same as the edge data for the reversed edge (e.g, (0->1). This occurs for a generated graph but not for a loaded graph.\n <denchmark-h:h2>Environment</denchmark-h>\n \n \n DGL Version (e.g., 1.0): latest commit\n Backend Library & Version (e.g., PyTorch 0.4.1, MXNet/Gluon 1.3): PyTorch 0.4.1\n OS (e.g., Linux): Linux\n How you installed DGL (conda, pip, source): source\n Build command you used (if compiling from source): NOCUDA\n Python version: 3.7\n CUDA/cuDNN version (if applicable): N/A\n GPU models and configuration (e.g. V100): N/A\n Any other relevant information:\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "JakeStevens", "commentT": "2019-12-08T15:13:43Z", "comment_text": "\n \t\tThank you for the report and I've verified the bug. <denchmark-link:https://github.com/VoVAllen>@VoVAllen</denchmark-link>\n  Could you please take a look? The implementation for  can be found <denchmark-link:https://github.com/dmlc/dgl/blob/master/python/dgl/transform.py#L287>here</denchmark-link>\n .\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "JakeStevens", "commentT": "2019-12-08T15:30:10Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mufeili>@mufeili</denchmark-link>\n \n <denchmark-link:https://github.com/dmlc/dgl/blob/master/python/dgl/transform.py#L291>https://github.com/dmlc/dgl/blob/master/python/dgl/transform.py#L291</denchmark-link>\n \n  doesn't guarantee the edge ordering by eids.  did. However I think we should change the behavior of  to force it return ordered edges. <denchmark-link:https://github.com/jermainewang>@jermainewang</denchmark-link>\n  What do you think about this?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "JakeStevens", "commentT": "2019-12-11T06:32:26Z", "comment_text": "\n \t\tThis should be fixed in <denchmark-link:https://github.com/dmlc/dgl/pull/1090>#1090</denchmark-link>\n  .\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "JakeStevens", "commentT": "2019-12-11T14:09:43Z", "comment_text": "\n \t\tI've confirmed that <denchmark-link:https://github.com/dmlc/dgl/pull/1090>#1090</denchmark-link>\n  fixes both the bug in both the small test case I shared, as well as in the larger application I was writing.\n \t\t"}}}, "commit": {"commit_id": "b599f6ed96a883838017f5a8eb608a0e639c1ddc", "commit_author": "Mufei Li", "commitT": "2019-12-11 13:39:18+08:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\dgl\\transform.py", "file_new_name": "python\\dgl\\transform.py", "file_complexity": {"file_NLOC": "135", "file_CCN": "26", "file_NToken": "1344"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "291", "deleted_lines": "291", "method_info": {"method_name": "reverse", "method_params": "g,share_ndata,share_edata", "method_startline": "219", "method_endline": "297", "method_complexity": {"method_NLOC": "12", "method_CCN": "3", "method_NToken": "91", "method_nesting_level": "0"}}}}}}}}