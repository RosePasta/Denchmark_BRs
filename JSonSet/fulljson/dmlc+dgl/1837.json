{"BR": {"BR_id": "1837", "BR_author": "BarclayII", "BRopenT": "2020-07-20T15:15:16Z", "BRcloseT": "2020-08-18T01:29:06Z", "BR_text": {"BRsummary": "Number of nodes wrong when batching blocks", "BRdescription": "\n <denchmark-h:h2>\ud83d\udc1b Bug</denchmark-h>\n \n See the following reproduction code\n <denchmark-h:h2>To Reproduce</denchmark-h>\n \n plays_spmat = ssp.coo_matrix(([1, 1, 1, 1], ([0, 1, 2, 1], [0, 0, 1, 1])))\n wishes_nx = nx.DiGraph()\n wishes_nx.add_nodes_from(['u0', 'u1', 'u2'], bipartite=0)\n wishes_nx.add_nodes_from(['g0', 'g1'], bipartite=1)\n wishes_nx.add_edge('u0', 'g1', id=0)\n wishes_nx.add_edge('u2', 'g0', id=1)\n \n follows_g = dgl.graph([(0, 1), (1, 2)], 'user', 'follows')\n plays_g = dgl.bipartite(plays_spmat, 'user', 'plays', 'game')\n wishes_g = dgl.bipartite(wishes_nx, 'user', 'wishes', 'game')\n develops_g = dgl.bipartite([(0, 0), (1, 1)], 'developer', 'develops', 'game')\n g = dgl.hetero_from_relations([follows_g, plays_g, wishes_g, develops_g])\n g2 = dgl.hetero_from_relations([follows_g, plays_g, wishes_g, develops_g])\n \n block1 = dgl.to_block(g, {'user': [1, 2], 'game': [0, 1], 'developer': []})\n block2 = dgl.to_block(g2, {'user': [1, 2], 'game': [0, 1], 'developer': []})\n batched_block = dgl.batch_hetero([block1, block2])\n assert block1.number_of_src_nodes('developer') == 2             # passes\n assert block2.number_of_src_nodes('developer') == 2             # passes\n assert batched_block.number_of_src_nodes('developer') == 4      # fails, = 0\n <denchmark-h:h2>Expected behavior</denchmark-h>\n \n The last test should return pass.\n <denchmark-h:h2>Environment</denchmark-h>\n \n \n DGL Version (e.g., 1.0): master\n Backend Library & Version (e.g., PyTorch 0.4.1, MXNet/Gluon 1.3):\n OS (e.g., Linux):\n How you installed DGL (conda, pip, source):\n Build command you used (if compiling from source):\n Python version:\n CUDA/cuDNN version (if applicable):\n GPU models and configuration (e.g. V100):\n Any other relevant information:\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "BarclayII", "commentT": "2020-07-21T01:34:23Z", "comment_text": "\n \t\tIt seems batching of block is not well tested\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "BarclayII", "commentT": "2020-08-06T19:20:10Z", "comment_text": "\n \t\tI also came across a batching problem, directly with heterographs:\n <denchmark-code>g0 = dgl.heterograph({\n      ('user', 'plays', 'game'): [(0, 0), (1, 0), (1, 1), (2, 1)],\n      }, num_nodes_dict={\"foo\":1, \"user\":3, \"game\":2})\n g1 = dgl.heterograph({\n      ('user', 'plays', 'game'): [(0, 0), (1, 0), (1, 1), (2, 1)],\n      }, num_nodes_dict={\"foo\": 2, \"user\":3, \"game\":2})\n gall = dgl.batch_hetero([g0, g1])\n print(g0)\n print(g1)\n print(gall)\n </denchmark-code>\n \n prints:\n <denchmark-code>Graph(num_nodes={'foo': 1, 'game': 2, 'user': 3},\n       num_edges={('user', 'plays', 'game'): 4},\n       metagraph=[('user', 'game')])\n Graph(num_nodes={'foo': 2, 'game': 2, 'user': 3},\n       num_edges={('user', 'plays', 'game'): 4},\n       metagraph=[('user', 'game')])\n Graph(num_nodes={'foo': 0, 'game': 4, 'user': 6},\n       num_edges={('user', 'plays', 'game'): 8},\n       metagraph=[('user', 'game')])\n </denchmark-code>\n \n So it seems that nodes without edges get dropped when batching heterographs\n \t\t"}}}, "commit": {"commit_id": "aa19df1bbbc0b92a4e3d0b529941100a129be192", "commit_author": "Quan (Andy) Gan", "commitT": "2020-08-18 09:29:05+08:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "0.9444444444444444", "commit_Nprams": "0.9444444444444444"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\dgl\\batch.py", "file_new_name": "python\\dgl\\batch.py", "file_complexity": {"file_NLOC": "280", "file_CCN": "64", "file_NToken": "1379"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "171,176,177,178,179,180,182,183,184,185,186,187,188", "deleted_lines": "174,175,176,177,178,179,180,182,183,184,185,187", "method_info": {"method_name": "batch", "method_params": "graphs,ndata,edata,node_attrs,edge_attrs", "method_startline": "12", "method_endline": "218", "method_complexity": {"method_NLOC": "195", "method_CCN": "26", "method_NToken": "566", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "DELETE", "file_Nmethod": 0, "file_old_name": "test.py", "file_new_name": "test.py", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\compute\\test_batched_heterograph.py", "file_new_name": "tests\\compute\\test_batched_heterograph.py", "file_complexity": {"file_NLOC": "259", "file_CCN": "27", "file_NToken": "4112"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "46,48,49,50", "deleted_lines": "46,47,48,49,50,51,52,53,54,55", "method_info": {"method_name": "test_topology", "method_params": "gs,idtype", "method_startline": "46", "method_endline": "105", "method_complexity": {"method_NLOC": "44", "method_CCN": "5", "method_NToken": "546", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "44,46,48,49,50", "deleted_lines": "44,46,47,48,49,50,51,52,53,54,55", "method_info": {"method_name": "test_topology", "method_params": "idtype", "method_startline": "44", "method_endline": "110", "method_complexity": {"method_NLOC": "51", "method_CCN": "5", "method_NToken": "689", "method_nesting_level": "0"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tests\\compute\\test_pickle.py", "file_new_name": "tests\\compute\\test_pickle.py", "file_complexity": {"file_NLOC": "145", "file_CCN": "25", "file_NToken": "1572"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "135", "deleted_lines": "135"}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\test_utils\\graph_cases.py", "file_new_name": "tests\\test_utils\\graph_cases.py", "file_complexity": {"file_NLOC": "117", "file_CCN": "26", "file_NToken": "1727"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "114,115,116,117,118,119,120,121,122,123,124,125", "deleted_lines": null, "method_info": {"method_name": "two_hetero_batch", "method_params": "", "method_startline": "114", "method_endline": "125", "method_complexity": {"method_NLOC": "12", "method_CCN": "1", "method_NToken": "170", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "128,129,130,131,132,133,134,135,136,137,138,139", "deleted_lines": null, "method_info": {"method_name": "two_hetero_batch_with_isolated_ntypes", "method_params": "", "method_startline": "128", "method_endline": "139", "method_complexity": {"method_NLOC": "12", "method_CCN": "1", "method_NToken": "210", "method_nesting_level": "0"}}}}}}}}