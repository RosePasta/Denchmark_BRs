{"BR": {"BR_id": "2901", "BR_author": "rohrl", "BRopenT": "2017-02-22T00:54:40Z", "BRcloseT": "2018-04-19T10:19:47Z", "BR_text": {"BRsummary": "Can't import ResNet50 from Keras(th) on master", "BRdescription": "\n I got around the ZeroPadding2D by removing it and adding \"border_mode='same'\", but further on DL4J import throws:\n <denchmark-code>Exception in thread \"main\" java.lang.reflect.InvocationTargetException\n \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n \tat java.lang.reflect.Method.invoke(Method.java:498)\n \tat com.intellij.rt.execution.CommandLineWrapper.main(CommandLineWrapper.java:130)\n Caused by: java.lang.IllegalStateException: Mis matched lengths: [32768] != [16384]\n \tat org.nd4j.linalg.util.LinAlgExceptions.assertSameLength(LinAlgExceptions.java:40)\n \tat org.nd4j.linalg.api.ops.BaseTransformOp.<init>(BaseTransformOp.java:48)\n \tat org.nd4j.linalg.api.ops.impl.transforms.Set.<init>(Set.java:25)\n \tat org.nd4j.linalg.api.ndarray.BaseNDArray.assign(BaseNDArray.java:1203)\n \tat org.deeplearning4j.nn.layers.BaseLayer.setParam(BaseLayer.java:281)\n \tat org.deeplearning4j.nn.modelimport.keras.KerasLayer.copyWeightsToLayer(KerasLayer.java:432)\n \tat org.deeplearning4j.nn.modelimport.keras.KerasModel.helperCopyWeightsToModel(KerasModel.java:598)\n \tat org.deeplearning4j.nn.modelimport.keras.KerasModel.getComputationGraph(KerasModel.java:453)\n \tat org.deeplearning4j.nn.modelimport.keras.KerasModel.getComputationGraph(KerasModel.java:439)\n \tat org.deeplearning4j.nn.modelimport.keras.KerasModelImport.importKerasModelAndWeights(KerasModelImport.java:205)\n \tat com.nuix.load.image.ModelImport.main(ModelImport.java:43)\n \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n \tat java.lang.reflect.Method.invoke(Method.java:498)\n \tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)\n \t... 5 more\n </denchmark-code>\n \n Here is the json config from Keras:\n <denchmark-link:https://gist.github.com/rohrl/a456e8cb775b6f7d49c7ec0d45db5f05>https://gist.github.com/rohrl/a456e8cb775b6f7d49c7ec0d45db5f05</denchmark-link>\n \n I'm using this together with the weights file generated using \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "rohrl", "commentT": "2017-02-22T06:51:14Z", "comment_text": "\n \t\tNote: this (just merged) PR adds explicit support for ZeroPadding layers: <denchmark-link:https://github.com/deeplearning4j/deeplearning4j/pull/2849>https://github.com/deeplearning4j/deeplearning4j/pull/2849</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "rohrl", "commentT": "2017-02-22T07:40:56Z", "comment_text": "\n \t\tThis was a bug in import of functional API models, and has been fixed in this merged PR: <denchmark-link:https://github.com/deeplearning4j/deeplearning4j/pull/2903>https://github.com/deeplearning4j/deeplearning4j/pull/2903</denchmark-link>\n . I can confirm I successfully imported the model, including weights, from your gist. Closing.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "rohrl", "commentT": "2017-02-23T05:13:44Z", "comment_text": "\n \t\tHi, I'm still seeing errors with ResNet50.\n I used CPU build from master at rev <denchmark-link:https://github.com/eclipse/deeplearning4j/commit/fbac77364468bcc971c6e386344c6e00211f3205>fbac773</denchmark-link>\n  (so including your PR)\n The network I'm importing is ResNet50 from Keras with theano backend:\n <denchmark-link:https://github.com/fchollet/keras/blob/master/keras/applications/resnet50.py>https://github.com/fchollet/keras/blob/master/keras/applications/resnet50.py</denchmark-link>\n \n <denchmark-link:https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_th_dim_ordering_th_kernels.h5>https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_th_dim_ordering_th_kernels.h5</denchmark-link>\n \n When I use KerasModelImport.importKerasModelAndWeights(String jsonConfig, String hd5fileWeights) I get the same error as previously:\n java.lang.IllegalStateException: Mis matched lengths: [32768] != [16384]\n I also tried using KerasModelImport.importKerasModelAndWeights(String hd5fileName) - this fails with following:\n <denchmark-code>Exception in thread \"main\" java.lang.reflect.InvocationTargetException\n \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n \tat java.lang.reflect.Method.invoke(Method.java:498)\n \tat com.intellij.rt.execution.CommandLineWrapper.main(CommandLineWrapper.java:130)\n Caused by: java.lang.RuntimeException: Unknown exception.\n \tat org.bytedeco.javacpp.hdf5$H5Location.openAttribute(Native Method)\n \tat org.deeplearning4j.nn.modelimport.keras.Hdf5Archive.readAttributeAsJson(Hdf5Archive.java:88)\n \tat org.deeplearning4j.nn.modelimport.keras.KerasModel$ModelBuilder.modelHdf5Filename(KerasModel.java:525)\n \tat org.deeplearning4j.nn.modelimport.keras.KerasModelImport.importKerasModelAndWeights(KerasModelImport.java:122)\n \tat com.nuix.tools.deeplearning.ModelImport.main(ModelImport.java:69)\n \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n \tat java.lang.reflect.Method.invoke(Method.java:498)\n \tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)\n \t... 5 more\n HDF5-DIAG: Error detected in HDF5 (1.10.0-patch1) thread 0:\n   #000: C:\\autotest\\HDF5110ReleaseRWDITAR\\src\\H5A.c line 438 in H5Aopen(): unable to load attribute info from object header for attribute: 'model_config'\n     major: Attribute\n     minor: Unable to initialize object\n   #001: C:\\autotest\\HDF5110ReleaseRWDITAR\\src\\H5Oattribute.c line 530 in H5O_attr_open_by_name(): can't locate attribute: 'model_config'\n     major: Attribute\n     minor: Object not found\n </denchmark-code>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "rohrl", "commentT": "2017-02-23T05:20:56Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rohrl>@rohrl</denchmark-link>\n  I'm giving it a shot now.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "rohrl", "commentT": "2017-02-23T19:05:38Z", "comment_text": "\n \t\tReopening as I've been able to reproduce this issue. That said, I'm not 100% convinced this is on our end -- either that, or I'm misunderstanding something about this model. As far as I can tell, this Exception is being thrown when we try to set the weights for the res2b_branch2a convolutional layer. As far as I can tell, the input to that layer has shape (h=55, w=55, d=512), but we're trying to set weights with shape (h=1, w=1, channels=256, filters=64), which makes very little sense.\n <denchmark-link:https://github.com/rohrl>@rohrl</denchmark-link>\n  can you offer any insights about this?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "rohrl", "commentT": "2017-02-23T19:37:08Z", "comment_text": "\n \t\tSadly, I don't know anything more.\n I've been trying to import net with weights from Keras and getting this\n error.\n Is there any other source of trained Resnet ? You said you managed to\n import Resnet with weights successfully - which model was it?\n Will TF backend work ?\n <denchmark-link:#>\u2026</denchmark-link>\n \n \n On 24 Feb. 2017 06:05, \"Dave kale\" ***@***.***> wrote:\n  Reopening as I've been able to reproduce this issue. That said, I'm not\n  100% convinced this is on our end -- either that, or I'm misunderstanding\n  something about this model. As far as I can tell, this Exception is being\n  thrown when we try to set the weights for the res2b_branch2a\n  convolutional layer. As far as I can tell, the input to that layer has\n  shape (h=55, w=55, d=512), but we're trying to set weights with shape (h=1,\n  w=1, channels=256, filters=64), which makes very little sense.\n \n  @rohrl <https://github.com/rohrl> can you offer any insights about this?\n \n  \u2014\n  You are receiving this because you were mentioned.\n  Reply to this email directly, view it on GitHub\n  <https://github.com/deeplearning4j/deeplearning4j/issues/2901#issuecomment-282088371>,\n  or mute the thread\n  <https://github.com/notifications/unsubscribe-auth/ANhDTfydJ76mHTDDnez3y9VB2DdkDR4Qks5rfdiQgaJpZM4MIEUh>\n  .\n \n \n \n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "rohrl", "commentT": "2017-02-24T01:00:51Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rohrl>@rohrl</denchmark-link>\n  OK, I figured it out. Keras <denchmark-link:https://keras.io/layers/core/#merge>merge layers</denchmark-link>\n  have a  field that determines how to merge the layers, whether via concatenation or summation, etc. Currently, we've been directly mapping Keras merge layers to DL4J Merge vertices, but when the mode is something other than concat (e.g., sum), we should map it to a DL4J ElementWiseVertex. Will fix before next release and post an update here once done.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "rohrl", "commentT": "2017-02-24T02:56:24Z", "comment_text": "\n \t\tThanks <denchmark-link:https://github.com/turambar>@turambar</denchmark-link>\n  . So is there any possibility at the moment to import ResNet with weights to DL4J ?\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "rohrl", "commentT": "2017-02-24T08:12:42Z", "comment_text": "\n \t\tFixed in this merged PR: <denchmark-link:https://github.com/deeplearning4j/deeplearning4j/pull/2915>https://github.com/deeplearning4j/deeplearning4j/pull/2915</denchmark-link>\n \n NOTE: can only confirm successful import without Exception. Have not tested performance.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "rohrl", "commentT": "2017-02-28T01:11:21Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/turambar>@turambar</denchmark-link>\n  Hey, thanks, I confirm that import was successful.\n However when I save and read it, it spits this out:\n <denchmark-code>Caused by: org.nd4j.shade.jackson.databind.JsonMappingException: No suitable constructor found for type [simple type, class org.deeplearning4j.nn.conf.layers.ZeroPaddingLayer]: can not instantiate from JSON object (missing default constructor or creator, or perhaps need to add/enable type information?)\n  at [Source: java.io.StringReader@5ce675b5; line: 220, column: 15] (through reference chain: org.deeplearning4j.nn.conf.ComputationGraphConfiguration[\"vertices\"]->java.util.LinkedHashMap[\"zeropadding2d_1\"]->org.deeplearning4j.nn.conf.graph.LayerVertex[\"layerConf\"]->org.deeplearning4j.nn.conf.NeuralNetConfiguration[\"layer\"])\n \tat org.nd4j.shade.jackson.databind.JsonMappingException.from(JsonMappingException.java:148)\n \tat org.nd4j.shade.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1080)\n \tat org.nd4j.shade.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:295)\n \tat org.nd4j.shade.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:142)\n \tat org.nd4j.shade.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer._deserialize(AsWrapperTypeDeserializer.java:114)\n \tat org.nd4j.shade.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer.deserializeTypedFromObject(AsWrapperTypeDeserializer.java:49)\n \tat org.nd4j.shade.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:131)\n \tat org.nd4j.shade.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:521)\n \tat org.nd4j.shade.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:95)\n \tat org.nd4j.shade.jackson.databind.deser.impl.BeanPropertyMap.findDeserializeAndSet(BeanPropertyMap.java:285)\n \tat org.nd4j.shade.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:248)\n \tat org.nd4j.shade.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:136)\n \tat org.nd4j.shade.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:523)\n \tat org.nd4j.shade.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:95)\n \tat org.nd4j.shade.jackson.databind.deser.impl.BeanPropertyMap.findDeserializeAndSet(BeanPropertyMap.java:285)\n \tat org.nd4j.shade.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:248)\n \tat org.nd4j.shade.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:136)\n \tat org.nd4j.shade.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer._deserialize(AsWrapperTypeDeserializer.java:114)\n \tat org.nd4j.shade.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer.deserializeTypedFromObject(AsWrapperTypeDeserializer.java:49)\n \tat org.nd4j.shade.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:131)\n \tat org.nd4j.shade.jackson.databind.deser.std.MapDeserializer._readAndBindStringMap(MapDeserializer.java:475)\n \tat org.nd4j.shade.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:330)\n \tat org.nd4j.shade.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:25)\n \tat org.nd4j.shade.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:523)\n \tat org.nd4j.shade.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:95)\n \tat org.nd4j.shade.jackson.databind.deser.impl.BeanPropertyMap.findDeserializeAndSet(BeanPropertyMap.java:285)\n \tat org.nd4j.shade.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:248)\n \tat org.nd4j.shade.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:136)\n \tat org.nd4j.shade.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3562)\n \tat org.nd4j.shade.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2578)\n \tat org.deeplearning4j.nn.conf.ComputationGraphConfiguration.fromJson(ComputationGraphConfiguration.java:137)\n \t... 18 more\n </denchmark-code>\n \n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "rohrl", "commentT": "2017-02-28T02:06:28Z", "comment_text": "\n \t\tI just run it and the imported network seems to be broken - it always outputs similar values (\"cleaver; dishwasher; nail; nematode; oboe\") regardless of input.\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "rohrl", "commentT": "2017-03-02T20:31:20Z", "comment_text": "\n \t\t(98% copy and paste of my comment on the Inception issue!)\n <denchmark-link:https://github.com/rohrl>@rohrl</denchmark-link>\n  thank you for your persistence in testing model import. I'm traveling this week so I don't have a ton of dev cycles, but I'll try to take a look when I settle back down (weekend or early next week at latest). In the meantime, I encourage you to fire up your debugger and dive into the source code -- even if you just narrow it down some, that will help accelerate a fix, if one is needed.\n <denchmark-link:https://github.com/eraly>@eraly</denchmark-link>\n  if you get any bandwidth, maybe take a look? This is also on our Keras model import post-release test TODO list anyway, no?\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "rohrl", "commentT": "2017-03-06T07:02:51Z", "comment_text": "\n \t\tWill take a look at this this week.\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "rohrl", "commentT": "2017-04-03T00:18:27Z", "comment_text": "\n \t\tWas this fixed?\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "rohrl", "commentT": "2017-04-03T00:21:36Z", "comment_text": "\n \t\tNot yet.\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "rohrl", "commentT": "2017-08-01T11:30:11Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rohrl>@rohrl</denchmark-link>\n  what's the status of this issue? You can import now, but output is off / inconsistent? Thanks\n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "rohrl", "commentT": "2018-01-18T16:59:45Z", "comment_text": "\n \t\tnote to self: the batchnorm axis mostly used for this resnet model (axis=2) is currently not supported.\n \t\t"}, "comments_17": {"comment_id": 18, "comment_author": "rohrl", "commentT": "2018-01-19T21:08:07Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/maxpumperla>@maxpumperla</denchmark-link>\n  are you sure new batchnorm impl doesn't support it?\n \t\t"}, "comments_18": {"comment_id": 19, "comment_author": "rohrl", "commentT": "2018-01-22T20:31:57Z", "comment_text": "\n \t\tI'm seeing a very similar problem - I have a model trained up with the stock Keras 2.0 ResNet50 implementation, and attemping to load it gives the following using 2.0.9-SNAPSHOT (from today) of dl4j.\n <denchmark-code>java.lang.IllegalStateException: Mis matched lengths: [32768] != [16384] - Array 1 shape: [64, 512, 1, 1], array 2 shape: [64, 256, 1, 1]\n \tat org.nd4j.linalg.util.LinAlgExceptions.assertSameLength(LinAlgExceptions.java:41)\n \tat org.nd4j.linalg.api.ops.BaseTransformOp.<init>(BaseTransformOp.java:174)\n \tat org.nd4j.linalg.api.ops.impl.transforms.Set.<init>(Set.java:41)\n \tat org.nd4j.linalg.api.ndarray.BaseNDArray.assign(BaseNDArray.java:1273)\n \tat org.deeplearning4j.nn.layers.BaseLayer.setParam(BaseLayer.java:204)\n \tat org.deeplearning4j.nn.modelimport.keras.KerasLayer.copyWeightsToLayer(KerasLayer.java:295)\n \tat org.deeplearning4j.nn.modelimport.keras.utils.KerasModelUtils.copyWeightsToModel(KerasModelUtils.java:76)\n \tat org.deeplearning4j.nn.modelimport.keras.KerasModel.getComputationGraph(KerasModel.java:377)\n \tat org.deeplearning4j.nn.modelimport.keras.KerasModel.getComputationGraph(KerasModel.java:363)\n \tat org.deeplearning4j.nn.modelimport.keras.KerasModelImport.importKerasModelAndWeights(KerasModelImport.java:107)\n </denchmark-code>\n \n \t\t"}, "comments_19": {"comment_id": 20, "comment_author": "rohrl", "commentT": "2018-09-22T22:13:56Z", "comment_text": "\n \t\tThis thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n \t\t"}}}, "commit": {"commit_id": "e603426e410367541e2c6479ff69d3819d514543", "commit_author": "maxpumperla", "commitT": "2018-04-19 11:24:33+02:00", "commit_complexity": {"commit_NLOC": "0.8571428571428571", "commit_CCN": "0.8571428571428571", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "deeplearning4j-modelimport\\src\\main\\java\\org\\deeplearning4j\\nn\\modelimport\\keras\\config\\KerasLayerConfiguration.java", "file_new_name": "deeplearning4j-modelimport\\src\\main\\java\\org\\deeplearning4j\\nn\\modelimport\\keras\\config\\KerasLayerConfiguration.java", "file_complexity": {"file_NLOC": "230", "file_CCN": "0", "file_NToken": "1600"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "293", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "deeplearning4j-modelimport\\src\\main\\java\\org\\deeplearning4j\\nn\\modelimport\\keras\\utils\\KerasActivationUtils.java", "file_new_name": "deeplearning4j-modelimport\\src\\main\\java\\org\\deeplearning4j\\nn\\modelimport\\keras\\utils\\KerasActivationUtils.java", "file_complexity": {"file_NLOC": "48", "file_CCN": "14", "file_NToken": "467"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "52,53,54", "deleted_lines": null, "method_info": {"method_name": "KerasActivationUtils::mapActivation", "method_params": "kerasActivation,conf", "method_startline": "41", "method_endline": "72", "method_complexity": {"method_NLOC": "31", "method_CCN": "12", "method_NToken": "282", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "deeplearning4j-modelimport\\src\\main\\java\\org\\deeplearning4j\\nn\\modelimport\\keras\\utils\\KerasModelUtils.java", "file_new_name": "deeplearning4j-modelimport\\src\\main\\java\\org\\deeplearning4j\\nn\\modelimport\\keras\\utils\\KerasModelUtils.java", "file_complexity": {"file_NLOC": "241", "file_CCN": "64", "file_NToken": "1949"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "245", "deleted_lines": "245", "method_info": {"method_name": "KerasModelUtils::importWeights", "method_params": "weightsArchive,weightsRoot,layers,kerasVersion,backend", "method_startline": "170", "method_endline": "316", "method_complexity": {"method_NLOC": "124", "method_CCN": "44", "method_NToken": "951", "method_nesting_level": "1"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "deeplearning4j-modelimport\\src\\test\\java\\org\\deeplearning4j\\nn\\modelimport\\keras\\e2e\\KerasModelEndToEndTest.java", "file_new_name": "deeplearning4j-modelimport\\src\\test\\java\\org\\deeplearning4j\\nn\\modelimport\\keras\\e2e\\KerasModelEndToEndTest.java", "file_complexity": {"file_NLOC": "414", "file_CCN": "73", "file_NToken": "3276"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "307,308,309", "deleted_lines": null, "method_info": {"method_name": "KerasModelEndToEndTest::importMobileNet", "method_params": "", "method_startline": "307", "method_endline": "309", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "12", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "316,317,318", "deleted_lines": null, "method_info": {"method_name": "KerasModelEndToEndTest::importInception", "method_params": "", "method_startline": "316", "method_endline": "318", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "12", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "297,298,299", "deleted_lines": null, "method_info": {"method_name": "KerasModelEndToEndTest::importDenseNet", "method_params": "", "method_startline": "297", "method_endline": "299", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "12", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "325,326,327", "deleted_lines": null, "method_info": {"method_name": "KerasModelEndToEndTest::importXception", "method_params": "", "method_startline": "325", "method_endline": "327", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "12", "method_nesting_level": "1"}}}}}}}}