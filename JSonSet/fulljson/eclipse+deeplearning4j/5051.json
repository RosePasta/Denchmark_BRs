{"BR": {"BR_id": "5051", "BR_author": "s78154", "BRopenT": "2018-05-04T12:44:02Z", "BRcloseT": "2018-05-15T07:06:57Z", "BR_text": {"BRsummary": "OutOfMemoryError for Orthogonal init (Keras 2)", "BRdescription": "\n <denchmark-h:h4>Issue Description</denchmark-h>\n \n Hi, I am working on a research project at my university. My task at the moment is to get the keras model importer working. My docent gave me two files created in python with keras version 2:\n \n .json file (json.txt) file as model and\n .h5 weightsArchive\n \n My programming example is:\n public void LoadFromFileSystem() {\n \tFile modelJsonFile = new File(kerasJsonSource);\n \tFile modelWeightFile = new File(kerasH5Source);\n \n \tMultiLayerNetwork network = null;\n \ttry {\n \t\tnetwork = KerasModelImport.importKerasSequentialModelAndWeights(modelJsonFile.getAbsolutePath(), modelWeightFile.getAbsolutePath(), false);\n \t\t} catch (IOException e) {\n \t\t\tSystem.err.println(e.getMessage());\n \t\t\te.printStackTrace();\n \t\t} catch (InvalidKerasConfigurationException e) {\n \t\t\tSystem.err.println(e.getMessage());\n \t\t\te.printStackTrace();\n \t\t} catch (UnsupportedKerasConfigurationException e) {\n \t\t\tSystem.err.println(e.getMessage());\n \t\t\te.printStackTrace();\n \t\t} \n \t}\n }\n Always running the application I get an OutOfMemoryError:\n Exception in thread \"main\" java.lang.OutOfMemoryError: Cannot allocate new FloatPointer(25600000000): totalBytes = 85M, physicalBytes = 299M \t\n at org.bytedeco.javacpp.FloatPointer.<init>(FloatPointer.java:76) \n at org.nd4j.linalg.api.buffer.BaseDataBuffer.<init>(BaseDataBuffer.java:567) \n at org.nd4j.linalg.api.buffer.FloatBuffer.<init>(FloatBuffer.java:61) at org.nd4j.linalg.api.buffer.factory.DefaultDataBufferFactory.createFloat(DefaultDataBufferFactory.java:252) \tat org.nd4j.linalg.factory.Nd4j.createBuffer(Nd4j.java:1478) \n at org.nd4j.linalg.factory.Nd4j.createBuffer(Nd4j.java:1452)\n at org.nd4j.linalg.api.ndarray.BaseNDArray.<init>(BaseNDArray.java:253)\n at org.nd4j.linalg.cpu.nativecpu.NDArray.<init>(NDArray.java:109)\n at org.nd4j.linalg.cpu.nativecpu.CpuNDArrayFactory.create(CpuNDArrayFactory.java:275)\n at org.nd4j.linalg.factory.Nd4j.create(Nd4j.java:5043)\n at org.nd4j.linalg.factory.Nd4j.create(Nd4j.java:4997)\n at org.nd4j.linalg.api.rng.distribution.impl.OrthogonalDistribution.sample(OrthogonalDistribution.java:234) \tat org.nd4j.linalg.api.rng.distribution.impl.OrthogonalDistribution.sample(OrthogonalDistribution.java:251) \n at org.deeplearning4j.nn.weights.WeightInitUtil.initWeights(WeightInitUtil.java:68) \n at org.deeplearning4j.nn.weights.WeightInitUtil.initWeights(WeightInitUtil.java:61) \n at org.deeplearning4j.nn.params.LSTMParamInitializer.init(LSTMParamInitializer.java:151) \n at org.deeplearning4j.nn.conf.layers.LSTM.instantiate(LSTM.java:84) \n at org.deeplearning4j.nn.multilayer.MultiLayerNetwork.init(MultiLayerNetwork.java:635) \n at org.deeplearning4j.nn.multilayer.MultiLayerNetwork.init(MultiLayerNetwork.java:550) \n at org.deeplearning4j.nn.modelimport.keras.KerasSequentialModel.getMultiLayerNetwork(KerasSequentialModel.java:226) \n at org.deeplearning4j.nn.modelimport.keras.KerasSequentialModel.getMultiLayerNetwork(KerasSequentialModel.java:215) \n at org.deeplearning4j.nn.modelimport.keras.KerasModelImport.importKerasSequentialModelAndWeights(KerasModelImport.java:214) \n at api_import.KerasModelImporter.LoadFromFileSystem(KerasModelImporter.java:56) \n at api_import.KerasModelImporter.main(KerasModelImporter.java:75) \n \n Caused by: java.lang.OutOfMemoryError: Native allocator returned address == 0 \n at org.bytedeco.javacpp.FloatPointer.<init>(FloatPointer.java:70) \t... 23 more \n After debugging the project I came to the result that the KerasSequentialModel is created successfully. But while processing the method kerasModel.getMultiLayerNetwork() in class KerasModelImport Nd4j tries to allocate an array with 25600000000 elements.\n Can anyone tell me how to fix this issue? I have already tried to increase the heap space via the VM arguments in Eclipse. But the problem is still the same.\n <denchmark-h:h4>Version Information</denchmark-h>\n \n \n DL4J dependencies via gradle:\n deeplearning4j-core:1.0.0-alpha\n nd4j-native-platform:1.0.0-alpha\n platform information\n OS: Windows 10, 64 Bit\n RAM: 8 GB\n IDE: Eclipse Oxygen, Version 4.7.3a\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "s78154", "commentT": "2018-05-04T13:18:26Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/s78154>@s78154</denchmark-link>\n  thanks for reporting this, I've seen this recently as well on a larger model. My first guess is that something changed to the implementation (or something underlying) . <denchmark-link:https://github.com/raver119>@raver119</denchmark-link>\n  are you aware of any changes down stream?\n <denchmark-link:https://github.com/s78154>@s78154</denchmark-link>\n  can you try to set the recurrent initialiser of your LSTMs to something else? I want to narrow this down and see if it's really just orthogonal that's causing the issue.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "s78154", "commentT": "2018-05-07T13:53:25Z", "comment_text": "\n \t\tI changed the initializer in the JSON file to RandomNormal. There are no errors anymore. But I also get no information about starting the neural network and the application terminates after import.\n Does it change anything for me, when I import the weights archive with the RandomNormal initializer? It would be nice if you can fix the issue.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "s78154", "commentT": "2018-05-07T15:30:01Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/s78154>@s78154</denchmark-link>\n  by \"starting\" I presume you mean training the model? If so, you need to do this:\n a) save model config and weights in one h5 file after compiling the keras model. you do this with model.save(\"foo.h5\"). this way the keras training configuration is also stored. If you do it separately, it isn't.\n b) use enforceTrainingConfig=true to load the model.\n Here's an example:\n <denchmark-link:https://github.com/deeplearning4j/deeplearning4j/blob/4f058e80f1f9cf14d80b2700f3cb66bdb3965f37/deeplearning4j-modelimport/src/test/java/org/deeplearning4j/nn/modelimport/keras/e2e/KerasModelEndToEndTest.java#L301-L311>https://github.com/deeplearning4j/deeplearning4j/blob/4f058e80f1f9cf14d80b2700f3cb66bdb3965f37/deeplearning4j-modelimport/src/test/java/org/deeplearning4j/nn/modelimport/keras/e2e/KerasModelEndToEndTest.java#L301-L311</denchmark-link>\n \n re: orthogonal, we're working on this. no worries!\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "s78154", "commentT": "2018-09-22T01:24:34Z", "comment_text": "\n \t\tThis thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n \t\t"}}}, "commit": {"commit_id": "f47b764f9b6e86ea145f5c546327cf2552f78292", "commit_author": "maxpumperla", "commitT": "2018-05-15 00:48:30+02:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "0.0", "commit_Nprams": "0.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "deeplearning4j-nn\\src\\main\\java\\org\\deeplearning4j\\nn\\weights\\WeightInitUtil.java", "file_new_name": "deeplearning4j-nn\\src\\main\\java\\org\\deeplearning4j\\nn\\weights\\WeightInitUtil.java", "file_complexity": {"file_NLOC": "114", "file_CCN": "31", "file_NToken": "999"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "69,70,71,72,73", "deleted_lines": "68", "method_info": {"method_name": "WeightInitUtil::initWeights", "method_params": "fanIn,fanOut,shape,initScheme,dist,order,paramView", "method_startline": "65", "method_endline": "158", "method_complexity": {"method_NLOC": "90", "method_CCN": "26", "method_NToken": "758", "method_nesting_level": "1"}}}}}}}}