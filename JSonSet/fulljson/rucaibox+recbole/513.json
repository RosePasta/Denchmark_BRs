{"BR": {"BR_id": "513", "BR_author": "zhuhh666", "BRopenT": "2020-11-19T11:35:01Z", "BRcloseT": "2020-11-22T07:00:48Z", "BR_text": {"BRsummary": "RuntimeError: Trying to create tensor with negative dimension -25: [-25]", "BRdescription": "\n \u8bad\u7ec3\u8fc7\u7a0b\u62a5\u9519\n \n \u4e3a\u4e86\u6d4b\u8bd5\uff0c\u6211\u6536\u96c6\u4e86\u4e00\u4efd\u7b80\u5355\u7684\u65e5\u5fd7\uff0c\u5e76\u6309\u7167\u8981\u6c42\u628a\u6587\u4ef6\u8f6c\u6362\u6210recbole\u6307\u5b9a\u7684\u683c\u5f0f\uff0c\u4f46\u662f\u8fd0\u884c\u7684\u65f6\u5019\u62a5\u9519:RuntimeError: Trying to create tensor with negative dimension -25: [-25]\n \u53e6\u5916\u65f6\u95f4\u6233\u7684\u5355\u4f4d\u662f\uff08s or ms\uff1f\uff09\n \n \u4ee5\u4e0b\u662f\u6211\u7684\u4ee3\u7801\n \n test.yaml\n \n USER_ID_FIELD: user_id\n ITEM_ID_FIELD: item_id\n RATING_FIELD: rating\n TIME_FIELD: timestamp\n load_col:\n     inter: [rating, user_id, item_id, timestamp]\n \n min_user_inter_num: 10\n min_item_inter_num: 10\n lowest_val:\n     rating: 2\n eval_setting: RO_RS,full\n split_ratio: [0.8,0.1,0.1]\n \n run.py\n \n <denchmark-code>from recbole.config import Config\n from recbole.data import create_dataset,data_preparation\n from recbole.model.general_recommender import BPR\n from recbole.trainer import Trainer\n from logging import  getLogger\n from recbole.utils import init_seed,init_logger\n \n if __name__ == '__main__':\n     # \u521d\u59cb\u5316\u914d\u7f6e\n     config = Config(model='BPR',dataset='test')\n     config['data_path'] = './test_data/'\n     config['dataset'] = 'test'\n     # \u521d\u59cb\u968f\u673a\u79cd\u5b50\uff0c\u786e\u4fdd\u5b9e\u9a8c\u7684\u53ef\u91cd\u590d\u6027\n     init_seed(config['seed'],config['reproducibility'])\n     ## \u521d\u59cb\u5316\u65e5\u5fd7\n     init_logger(config)\n     logger = getLogger()\n     ## \u5c06\u914d\u7f6e\u4fe1\u606f\u5199\u5165\u65e5\u5fd7\n     logger.info(config)\n     ## \u6570\u636e\u96c6\u521b\u5efa\u548c\u7b5b\u9009\n     dataset = create_dataset(config)\n     logger.info(dataset)\n     ## \u6570\u636e\u96c6\u5212\u5206\n     train_data,valid_data,test_data = data_preparation(config,dataset)\n \n     ## \u6a21\u578b\u8f7d\u5165\u548c\u521d\u59cb\u5316\n     model = BPR(config,train_data).to(config['device'])\n     logger.info(model)\n     ## \u8bad\u7ec3\u5668\u52a0\u8f7d\u548c\u521d\u59cb\u5316\n     trainer = Trainer(config,model)\n \n     # \u6a21\u578b\u8bad\u7ec3\n     best_valid_score, best_valid_result = trainer.fit(train_data, valid_data)\n \n     ## \u6a21\u578b\u8bc4\u4f30\n     test_result = trainer.evaluate(test_data)\n     print(test_result)\n \n </denchmark-code>\n \n \n <denchmark-link:https://camo.githubusercontent.com/98350398e88eb7f352fc691e4acebc01b8f20b0defa820928196dc33e5769b82/68747470733a2f2f706963676f30362e6f73732d636e2d7a68616e676a69616b6f752e616c6979756e63732e636f6d2f696d672f32303230313131393139323934322e706e67></denchmark-link>\n \n \n <denchmark-link:https://camo.githubusercontent.com/91f220b5f7c5e51ffc76164fd85246c5a247103aab4ece9e43088eec1f4c35cb/68747470733a2f2f706963676f30362e6f73732d636e2d7a68616e676a69616b6f752e616c6979756e63732e636f6d2f696d672f32303230313131393139333832362e706e67></denchmark-link>\n \n \n \n OS: windows\n RecBole Version \u4e0d\u592a\u6e05\u695a\n Python Version 3.6.12\n PyTorch Version 1.7.0\n cudatoolkit Version 11.1\n \n \u65b0\u624b\u4e0a\u8def\uff0c\u9ebb\u70e6\u5927\u5927\u4eec\u4e86\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "zhuhh666", "commentT": "2020-11-19T12:35:46Z", "comment_text": "\n \t\t\u8fd9\u4e2a\u786e\u5b9e\u662fTrainer\u7684bug\u3002\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5c06RecBole\u5e93\u4e2drecbole/trainer/trainer.py\u7684\u7b2c314\u884c\u7684\n padding_nums = self.tot_item_num * len(tmp_len_list) - np.sum(tmp_len_list)\n \u4fee\u6539\u4e3a\n padding_nums = max(self.tot_item_num, max(tmp_len_list)) * len(tmp_len_list) - np.sum(tmp_len_list)\n \u5982\u679c\u4ecd\u4e0d\u80fd\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u8bf7\u5c3d\u5feb\u8054\u7cfb\u6211\u4eec\u3002\u6211\u4eec\u4f1a\u5728\u4e4b\u540e\u7684\u7248\u672c\u4e2d\u4fee\u590d\u8fd9\u4e2abug\u3002\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "zhuhh666", "commentT": "2020-11-19T12:46:51Z", "comment_text": "\n \t\t\u5173\u4e8e\u6570\u636e\u96c6\u91cc\u65f6\u95f4\u6233\uff08timestamp\uff09\u7684\u5355\u4f4d\u95ee\u9898\uff0c\u6211\u4eec\u7684\u6846\u67b6\u5e76\u4e0d\u5bf9\u5176\u4f5c\u8981\u6c42\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u8f93\u5165\u7279\u5f81\u3002\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "zhuhh666", "commentT": "2020-11-19T12:49:03Z", "comment_text": "\n \t\t\n \u8fd9\u4e2a\u786e\u5b9e\u662fTrainer\u7684bug\u3002\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5c06RecBole\u5e93\u4e2drecbole/trainer/trainer.py\u7684\u7b2c314\u884c\u7684\n padding_nums = self.tot_item_num * len(tmp_len_list) - np.sum(tmp_len_list)\n \u4fee\u6539\u4e3a\n padding_nums = max(self.tot_item_num, max(tmp_len_list)) * len(tmp_len_list) - np.sum(tmp_len_list)\n \u5982\u679c\u4ecd\u4e0d\u80fd\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u8bf7\u5c3d\u5feb\u8054\u7cfb\u6211\u4eec\u3002\u6211\u4eec\u4f1a\u5728\u4e4b\u540e\u7684\u7248\u672c\u4e2d\u4fee\u590d\u8fd9\u4e2abug\u3002\n \n \u591a\u8c22\u56de\u590d\uff0c\u6211\u6309\u7167\u4f60\u7684\u8bf4\u6cd5\u4fee\u6539\u4e86\u4ee3\u7801\uff0c\u62a5\u4e86\u65b0\u7684\u9519\u8bef\uff0c\u622a\u56fe\u5982\u4e0b\uff1a\n <denchmark-link:https://camo.githubusercontent.com/dd1ea35d5377dc37eb3b02eec77ea0c81c6486bb9a35c3e8520b38b563a72c71/68747470733a2f2f706963676f30362e6f73732d636e2d7a68616e676a69616b6f752e616c6979756e63732e636f6d2f696d672f32303230313131393230343832352e706e67></denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "zhuhh666", "commentT": "2020-11-19T12:50:08Z", "comment_text": "\n \t\t\n \u5173\u4e8e\u6570\u636e\u96c6\u91cc\u65f6\u95f4\u6233\uff08timestamp\uff09\u7684\u5355\u4f4d\u95ee\u9898\uff0c\u6211\u4eec\u7684\u6846\u67b6\u5e76\u4e0d\u5bf9\u5176\u4f5c\u8981\u6c42\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u8f93\u5165\u7279\u5f81\u3002\n \n \u4e86\u89e3\uff0c\u591a\u8c22\u89e3\u7b54\uff01\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "zhuhh666", "commentT": "2020-11-19T12:52:26Z", "comment_text": "\n \t\t\u56e0\u4e3a\u6211\u770b\u63a7\u5236\u53f0\u5df2\u7ecf\u6709\u4e86\u8bad\u7ec3\u6570\u636e\u4ea7\u751f\uff0c\u6240\u4ee5\u4f1a\u662f\u6570\u636e\u4e0d\u89c4\u8303\u5bfc\u81f4\u7684\u95ee\u9898\u5417\uff1f\n <denchmark-link:https://user-images.githubusercontent.com/48661348/99668706-0c5a0d80-2aa9-11eb-83a2-eefa8194c7f6.png></denchmark-link>\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "zhuhh666", "commentT": "2020-11-19T12:54:28Z", "comment_text": "\n \t\t\u8bf7\u95ee\u65b9\u4fbf\u5c06\u6570\u636e\u53d1\u7ed9\u6211\u4eec\uff08<denchmark-link:mailto:recbole@outlook.com>recbole@outlook.com</denchmark-link>\n \uff09\u5417\uff1f\u6211\u4eec\u56e2\u961f\u5c06\u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\u8fdb\u884c\u4fee\u590d\u3002\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "zhuhh666", "commentT": "2020-11-19T12:55:41Z", "comment_text": "\n \t\t\n \u8bf7\u95ee\u65b9\u4fbf\u5c06\u6570\u636e\u53d1\u7ed9\u6211\u4eec\uff08recbole@outlook.com\uff09\u5417\uff1f\u6211\u4eec\u56e2\u961f\u5c06\u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\u8fdb\u884c\u4fee\u590d\u3002\n \n \u60a8\u597d\uff0c\u6d4b\u8bd5\u6570\u636e\u96c6\u5df2\u7ecf\u901a\u8fc7qq\u90ae\u7bb1\u53d1\u9001\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "zhuhh666", "commentT": "2020-11-19T13:19:42Z", "comment_text": "\n \t\t\u8c22\u8c22\u4f60\u63d0\u4f9b\u7684\u6570\u636e\uff0c\u524d\u9762\u7684\u4fee\u590d\u5e76\u4e0d\u5b8c\u5168\uff0c\u5e94\u8be5\u5c06RecBole\u5e93\u4e2drecbole/trainer/trainer.py\u4ece\u7b2c313\u884c\u81f3\u7b2c322\u884c\u7684\n extra_len_list = np.subtract(self.tot_item_num, tmp_len_list).tolist()\n padding_nums = self.tot_item_num * len(tmp_len_list) - np.sum(tmp_len_list)\n padding_tensor = torch.tensor([-np.inf], dtype=scores.dtype, device=self.device).repeat(padding_nums)\n padding_scores = torch.split(padding_tensor, extra_len_list)\n \n final_scores = list(itertools.chain.from_iterable(zip(pos_scores, neg_scores, padding_scores)))\n final_scores = torch.cat(final_scores)\n \n setattr(interaction, 'pos_len_list', pos_len_list)\n setattr(interaction, 'user_len_list', len(tmp_len_list) * [self.tot_item_num])\n \u4fee\u6539\u4e3a\uff1a\n final_scores_width = max(self.tot_item_num, max(tmp_len_list))\n extra_len_list = np.subtract(final_scores_width, tmp_len_list).tolist()\n padding_nums = final_scores_width * len(tmp_len_list) - np.sum(tmp_len_list)\n padding_tensor = torch.tensor([-np.inf], dtype=scores.dtype, device=self.device).repeat(padding_nums)\n padding_scores = torch.split(padding_tensor, extra_len_list)\n \n final_scores = list(itertools.chain.from_iterable(zip(pos_scores, neg_scores, padding_scores)))\n final_scores = torch.cat(final_scores)\n \n setattr(interaction, 'pos_len_list', pos_len_list)\n setattr(interaction, 'user_len_list', len(tmp_len_list) * [final_scores_width])\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "zhuhh666", "commentT": "2020-11-19T13:37:38Z", "comment_text": "\n \t\t\n \u8c22\u8c22\u4f60\u63d0\u4f9b\u7684\u6570\u636e\uff0c\u524d\u9762\u7684\u4fee\u590d\u5e76\u4e0d\u5b8c\u5168\uff0c\u5e94\u8be5\u5c06RecBole\u5e93\u4e2drecbole/trainer/trainer.py\u4ece\u7b2c313\u884c\u81f3\u7b2c322\u884c\u7684\n extra_len_list = np.subtract(self.tot_item_num, tmp_len_list).tolist()\n padding_nums = self.tot_item_num * len(tmp_len_list) - np.sum(tmp_len_list)\n padding_tensor = torch.tensor([-np.inf], dtype=scores.dtype, device=self.device).repeat(padding_nums)\n padding_scores = torch.split(padding_tensor, extra_len_list)\n \n final_scores = list(itertools.chain.from_iterable(zip(pos_scores, neg_scores, padding_scores)))\n final_scores = torch.cat(final_scores)\n \n setattr(interaction, 'pos_len_list', pos_len_list)\n setattr(interaction, 'user_len_list', len(tmp_len_list) * [self.tot_item_num])\n \u4fee\u6539\u4e3a\uff1a\n final_scores_width = max(self.tot_item_num, max(tmp_len_list))\n extra_len_list = np.subtract(final_scores_width, tmp_len_list).tolist()\n padding_nums = final_scores_width * len(tmp_len_list) - np.sum(tmp_len_list)\n padding_tensor = torch.tensor([-np.inf], dtype=scores.dtype, device=self.device).repeat(padding_nums)\n padding_scores = torch.split(padding_tensor, extra_len_list)\n \n final_scores = list(itertools.chain.from_iterable(zip(pos_scores, neg_scores, padding_scores)))\n final_scores = torch.cat(final_scores)\n \n setattr(interaction, 'pos_len_list', pos_len_list)\n setattr(interaction, 'user_len_list', len(tmp_len_list) * [final_scores_width])\n \n \u4fee\u6539\u4ee3\u7801\u540e\u4ee3\u7801\u53ef\u6b63\u5e38\u8fd0\u884c\u5e76\u8fd4\u56de\u9884\u671f\u6548\u679c\uff0c\u611f\u8c22\u8010\u5fc3\u89e3\u7b54\uff0c\u5bf9\u521d\u5b66\u8005\u6765\u8bb2\u5f88\u68d2\u7684\u9879\u76ee\u3002\u518d\u6b21\u611f\u8c22\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "zhuhh666", "commentT": "2020-11-20T02:17:50Z", "comment_text": "\n \t\t\n \n \u8c22\u8c22\u4f60\u63d0\u4f9b\u7684\u6570\u636e\uff0c\u524d\u9762\u7684\u4fee\u590d\u5e76\u4e0d\u5b8c\u5168\uff0c\u5e94\u8be5\u5c06RecBole\u5e93\u4e2drecbole/trainer/trainer.py\u4ece\u7b2c313\u884c\u81f3\u7b2c322\u884c\u7684\n extra_len_list = np.subtract(self.tot_item_num, tmp_len_list).tolist()\n padding_nums = self.tot_item_num * len(tmp_len_list) - np.sum(tmp_len_list)\n padding_tensor = torch.tensor([-np.inf], dtype=scores.dtype, device=self.device).repeat(padding_nums)\n padding_scores = torch.split(padding_tensor, extra_len_list)\n \n final_scores = list(itertools.chain.from_iterable(zip(pos_scores, neg_scores, padding_scores)))\n final_scores = torch.cat(final_scores)\n \n setattr(interaction, 'pos_len_list', pos_len_list)\n setattr(interaction, 'user_len_list', len(tmp_len_list) * [self.tot_item_num])\n \u4fee\u6539\u4e3a\uff1a\n final_scores_width = max(self.tot_item_num, max(tmp_len_list))\n extra_len_list = np.subtract(final_scores_width, tmp_len_list).tolist()\n padding_nums = final_scores_width * len(tmp_len_list) - np.sum(tmp_len_list)\n padding_tensor = torch.tensor([-np.inf], dtype=scores.dtype, device=self.device).repeat(padding_nums)\n padding_scores = torch.split(padding_tensor, extra_len_list)\n \n final_scores = list(itertools.chain.from_iterable(zip(pos_scores, neg_scores, padding_scores)))\n final_scores = torch.cat(final_scores)\n \n setattr(interaction, 'pos_len_list', pos_len_list)\n setattr(interaction, 'user_len_list', len(tmp_len_list) * [final_scores_width])\n \n \u4fee\u6539\u4ee3\u7801\u540e\u4ee3\u7801\u53ef\u6b63\u5e38\u8fd0\u884c\u5e76\u8fd4\u56de\u9884\u671f\u6548\u679c\uff0c\u611f\u8c22\u8010\u5fc3\u89e3\u7b54\uff0c\u5bf9\u521d\u5b66\u8005\u6765\u8bb2\u5f88\u68d2\u7684\u9879\u76ee\u3002\u518d\u6b21\u611f\u8c22\n \n \u8c22\u8c22\u4f60\u6307\u51fa\u6765\u6211\u4eec\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5c06\u6301\u7eed\u5b8c\u5584\u6211\u4eec\u7684\u4ee3\u7801\uff0c\u5e76\u4e14\u4fdd\u6301\u5feb\u901f\u53cd\u9988\u3001\u5feb\u901f\u4fee\u6b63\u7684\u5f00\u53d1\u6001\u5ea6\uff0c\u4e5f\u6b22\u8fce\u4f60\u5c06\u6b64\u5de5\u5177\u63a8\u8350\u7ed9\u5176\u4ed6\u4eba\u8bd5\u7528\u3002\u521a\u521a\u53d1\u5e03\uff0c\u786e\u5b9e\u96be\u514d\u5b58\u5728\u95ee\u9898\u3002\u6211\u4eec\u627f\u8bfa\u5c06\u6301\u7eed\u6539\u5584\u3002\u8c22\u8c22\uff01\n --\u8d75\u946b\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "zhuhh666", "commentT": "2020-11-20T04:54:27Z", "comment_text": "\n \t\t\n \n \n \u8c22\u8c22\u4f60\u63d0\u4f9b\u7684\u6570\u636e\uff0c\u524d\u9762\u7684\u4fee\u590d\u5e76\u4e0d\u5b8c\u5168\uff0c\u5e94\u8be5\u5c06RecBole\u5e93\u4e2drecbole/trainer/trainer.py\u4ece\u7b2c313\u884c\u81f3\u7b2c322\u884c\u7684\n extra_len_list = np.subtract(self.tot_item_num, tmp_len_list).tolist()\n padding_nums = self.tot_item_num * len(tmp_len_list) - np.sum(tmp_len_list)\n padding_tensor = torch.tensor([-np.inf], dtype=scores.dtype, device=self.device).repeat(padding_nums)\n padding_scores = torch.split(padding_tensor, extra_len_list)\n \n final_scores = list(itertools.chain.from_iterable(zip(pos_scores, neg_scores, padding_scores)))\n final_scores = torch.cat(final_scores)\n \n setattr(interaction, 'pos_len_list', pos_len_list)\n setattr(interaction, 'user_len_list', len(tmp_len_list) * [self.tot_item_num])\n \u4fee\u6539\u4e3a\uff1a\n final_scores_width = max(self.tot_item_num, max(tmp_len_list))\n extra_len_list = np.subtract(final_scores_width, tmp_len_list).tolist()\n padding_nums = final_scores_width * len(tmp_len_list) - np.sum(tmp_len_list)\n padding_tensor = torch.tensor([-np.inf], dtype=scores.dtype, device=self.device).repeat(padding_nums)\n padding_scores = torch.split(padding_tensor, extra_len_list)\n \n final_scores = list(itertools.chain.from_iterable(zip(pos_scores, neg_scores, padding_scores)))\n final_scores = torch.cat(final_scores)\n \n setattr(interaction, 'pos_len_list', pos_len_list)\n setattr(interaction, 'user_len_list', len(tmp_len_list) * [final_scores_width])\n \n \u4fee\u6539\u4ee3\u7801\u540e\u4ee3\u7801\u53ef\u6b63\u5e38\u8fd0\u884c\u5e76\u8fd4\u56de\u9884\u671f\u6548\u679c\uff0c\u611f\u8c22\u8010\u5fc3\u89e3\u7b54\uff0c\u5bf9\u521d\u5b66\u8005\u6765\u8bb2\u5f88\u68d2\u7684\u9879\u76ee\u3002\u518d\u6b21\u611f\u8c22\n \n \u8c22\u8c22\u4f60\u6307\u51fa\u6765\u6211\u4eec\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5c06\u6301\u7eed\u5b8c\u5584\u6211\u4eec\u7684\u4ee3\u7801\uff0c\u5e76\u4e14\u4fdd\u6301\u5feb\u901f\u53cd\u9988\u3001\u5feb\u901f\u4fee\u6b63\u7684\u5f00\u53d1\u6001\u5ea6\uff0c\u4e5f\u6b22\u8fce\u4f60\u5c06\u6b64\u5de5\u5177\u63a8\u8350\u7ed9\u5176\u4ed6\u4eba\u8bd5\u7528\u3002\u521a\u521a\u53d1\u5e03\uff0c\u786e\u5b9e\u96be\u514d\u5b58\u5728\u95ee\u9898\u3002\u6211\u4eec\u627f\u8bfa\u5c06\u6301\u7eed\u6539\u5584\u3002\u8c22\u8c22\uff01\n --\u8d75\u946b\n \n \u5f88\u68d2\u7684\u56e2\u961f\uff0c\u5411\u4f60\u4eec\u5b66\u4e60\uff0c\u5df2\u7ecf\u63a8\u8350\u7ed9\u8eab\u8fb9\u7684\u670b\u53cb\u4f7f\u7528\uff0c\u518d\u6b21\u611f\u8c22\u8c22\u8c22\uff01\n \t\t"}}}, "commit": {"commit_id": "3578fbee7ab4b1da07789d57cc1b791e6432a58f", "commit_author": "chenyushuo", "commitT": "2020-11-19 21:39:28+08:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "recbole\\trainer\\trainer.py", "file_new_name": "recbole\\trainer\\trainer.py", "file_complexity": {"file_NLOC": "576", "file_CCN": "115", "file_NToken": "3813"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "313,314,315,323", "deleted_lines": "313,314,322", "method_info": {"method_name": "_full_sort_batch_eval", "method_params": "self,batched_data", "method_startline": "284", "method_endline": "325", "method_complexity": {"method_NLOC": "33", "method_CCN": "3", "method_NToken": "406", "method_nesting_level": "1"}}}}}}}}