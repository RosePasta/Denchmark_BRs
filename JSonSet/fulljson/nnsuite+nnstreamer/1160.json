{"BR": {"BR_id": "1160", "BR_author": "boxerab", "BRopenT": "2019-02-24T22:25:46Z", "BRcloseT": "2019-02-25T10:43:06Z", "BR_text": {"BRsummary": "Framework open return value is ignored", "BRdescription": "\n Should handle failure to open framework:\n <denchmark-code>/**\n  * @brief Open nn framework.\n  */\n #define gst_tensor_filter_open_fw(filter) do { \\\n       if (filter->prop.fw_opened == FALSE && filter->fw) { \\\n         if (filter->fw->open != NULL) {\\\n           if (filter->fw->open (&filter->prop, &filter->privateData) == 0) \\\n             filter->prop.fw_opened = TRUE; \\\n         } else {\\\n           filter->prop.fw_opened = TRUE; \\\n         } \\\n       } \\\n     } while (0)\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "boxerab", "commentT": "2019-02-24T22:25:48Z", "comment_text": "\n \t\t : Thank you for posting issue <denchmark-link:https://github.com/nnstreamer/nnstreamer/issues/1160>#1160</denchmark-link>\n . The person in charge will reply soon.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "boxerab", "commentT": "2019-02-24T22:28:56Z", "comment_text": "\n \t\tAlso\n <denchmark-code>static int\n tf_open (const GstTensorFilterProperties * prop, void **private_data)\n {\n   int retval = tf_loadModelFile (prop, private_data);\n   g_assert (retval == 0);       /** This must be called only once */\n   return 0;\n }\n </denchmark-code>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "boxerab", "commentT": "2019-02-25T02:20:52Z", "comment_text": "\n \t\tWe can check it with filter->prop.fw_opened. I'll add a check for that value.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "boxerab", "commentT": "2019-02-25T02:24:02Z", "comment_text": "\n \t\tThanks. Also should not ignore loadModelFile return value.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "boxerab", "commentT": "2019-02-25T08:32:23Z", "comment_text": "\n \t\t\n Thanks. Also should not ignore loadModelFile return value.\n \n <denchmark-link:https://github.com/helloahn>@helloahn</denchmark-link>\n \n <denchmark-code>/NNStreamer/ext$ grep -r loadModelFile *\n nnstreamer/tensor_filter/tensor_filter_tensorflow.c:tf_loadModelFile (const GstTensorFilterProperties * prop, void **private_data)\n nnstreamer/tensor_filter/tensor_filter_tensorflow.c:  int retval = tf_loadModelFile (prop, private_data);\n nnstreamer/tensor_filter/tensor_filter_tensorflow_lite.c:tflite_loadModelFile (const GstTensorFilterProperties * prop,\n nnstreamer/tensor_filter/tensor_filter_tensorflow_lite.c:  return tflite_loadModelFile (prop, private_data);\n </denchmark-code>\n \n \t\t"}}}, "commit": {"commit_id": "31c7c9051c7c0f927bd723842310079d542c68d2", "commit_author": "MyungJoo Ham", "commitT": "2019-02-25 19:43:05+09:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "gst\\nnstreamer\\tensor_filter\\tensor_filter.c", "file_new_name": "gst\\nnstreamer\\tensor_filter\\tensor_filter.c", "file_complexity": {"file_NLOC": "844", "file_CCN": "126", "file_NToken": "4877"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1357,1358,1359", "deleted_lines": null, "method_info": {"method_name": "gst_tensor_filter_start", "method_params": "trans", "method_startline": "1350", "method_endline": "1361", "method_complexity": {"method_NLOC": "9", "method_CCN": "2", "method_NToken": "40", "method_nesting_level": "0"}}}}}}}}