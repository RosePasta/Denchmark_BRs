{"BR": {"BR_id": "581", "BR_author": "canerturkmen", "BRopenT": "2020-01-30T16:48:40Z", "BRcloseT": "2020-01-30T20:06:26Z", "BR_text": {"BRsummary": "HybridBlock to SymbolBlock conversion forgets about input/output formats", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n Currently, GluonTS uses the HybridBlock.export and SymbolBlock.imports facilities to convert a HybridBlock to SymbolBlock. However, during this conversion, mxnet \"forgets\" about the _in_format and _out_format member variables which keep track of how a block object's inputs (resp. outputs) are nested within the call signature.\n This leads to several unexpected behaviors when converting blocks.\n <denchmark-h:h2>To Reproduce</denchmark-h>\n \n import mxnet as mx\n \n from gluonts.support import util\n \n class TestBlock(mx.gluon.HybridBlock):\n     def hybrid_forward(self, F, x1, x2):\n         return F.broadcast_mul(x1, x2[0]) \n     \n x1 = mx.nd.array([1, 2, 3])\n x2 = [mx.nd.array([1, 5, 5])]\n \n my_block = TestBlock()\n my_block.collect_params().initialize()\n my_block.hybridize()\n my_block(x1, x2)\n \n sb = util.hybrid_block_to_symbol_block(my_block, [x1, x2])\n <denchmark-h:h2>Error Message</denchmark-h>\n \n <denchmark-code>---------------------------------------------------------------------------\n AttributeError                            Traceback (most recent call last)\n <ipython-input-18-f8f4e08a1a43> in <module>\n       7 my_block(x1, x2)\n       8 \n ----> 9 sb = util.hybrid_block_to_symbol_block(my_block, [x1, x2])\n \n ~/code/gluon-ts/src/gluonts/support/util.py in hybrid_block_to_symbol_block(hb, data_batch)\n     216             net=hb,\n     217             hybridize=True,\n --> 218             data_batch=data_batch,\n     219             static_alloc=True,\n     220             static_shape=True,\n \n ~/code/gluon-ts/src/gluonts/support/util.py in import_symb_block(num_inputs, model_dir, model_name, epoch)\n     276         The deserialized block.\n     277     \"\"\"\n --> 278     if num_inputs == 1:\n     279         input_names = [\"data\"]\n     280     else:\n \n ~/VENVS/gluonts/lib/python3.6/site-packages/mxnet/gluon/block.py in imports(symbol_file, input_names, param_file, ctx)\n    1022         ret = SymbolBlock(sym, inputs)\n    1023         if param_file is not None:\n -> 1024             ret.collect_params().load(param_file, ctx=ctx)\n    1025         return ret\n    1026 \n \n ~/VENVS/gluonts/lib/python3.6/site-packages/mxnet/gluon/parameter.py in load(self, filename, ctx, allow_missing, ignore_extra, restore_prefix)\n     902         lprefix = len(restore_prefix)\n     903         loaded = [(k[4:] if k.startswith('arg:') or k.startswith('aux:') else k, v) \\\n --> 904                   for k, v in ndarray.load(filename).items()]\n     905         arg_dict = {restore_prefix+k: v for k, v in loaded}\n     906         if not allow_missing:\n \n AttributeError: 'list' object has no attribute 'items'\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "canerturkmen", "commentT": "2020-01-30T16:52:39Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/canerturkmen>@canerturkmen</denchmark-link>\n  looks like someone has a fix in the making ;-)\n \t\t"}}}, "commit": {"commit_id": "2889be4952954798d827f197b22fc78d4fcb5609", "commit_author": "Caner Turkmen", "commitT": "2020-01-30 21:01:29+01:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "0.7735849056603774"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\gluonts\\support\\util.py", "file_new_name": "src\\gluonts\\support\\util.py", "file_complexity": {"file_NLOC": "501", "file_CCN": "42", "file_NToken": "1966"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "36,179,207,208,209,210,211,228,248,249,250,251,252,283,284,285,286,287,288,289,292,295,298,299,300,301,302,303", "deleted_lines": "41,206,274,277"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "test\\support\\test_util.py", "file_new_name": "test\\support\\test_util.py", "file_complexity": {"file_NLOC": "134", "file_CCN": "14", "file_NToken": "1309"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174", "deleted_lines": null, "method_info": {"method_name": "sym_block_import_export_test_cases", "method_params": "", "method_startline": "126", "method_endline": "174", "method_complexity": {"method_NLOC": "12", "method_CCN": "1", "method_NToken": "66", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "181,182,183,184,185,186,187,188,189,190,191,192,193", "deleted_lines": null, "method_info": {"method_name": "test_symb_block_export_import_nested_array", "method_params": "block_type,hybridize", "method_startline": "181", "method_endline": "193", "method_complexity": {"method_NLOC": "10", "method_CCN": "2", "method_NToken": "127", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "141,142,143,144,145,146,147,148,149,150", "deleted_lines": null, "method_info": {"method_name": "sym_block_import_export_test_cases.__init__", "method_params": "self,kwargs", "method_startline": "141", "method_endline": "150", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "59", "method_nesting_level": "2"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "129,130", "deleted_lines": null, "method_info": {"method_name": "sym_block_import_export_test_cases.hybrid_forward", "method_params": "self,F,Tensor", "method_startline": "129", "method_endline": "130", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "30", "method_nesting_level": "2"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "152,153,154", "deleted_lines": null, "method_info": {"method_name": "sym_block_import_export_test_cases.hybrid_forward", "method_params": "self,F,Tensor,my_param", "method_startline": "152", "method_endline": "154", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "52", "method_nesting_level": "2"}}}}}}}}