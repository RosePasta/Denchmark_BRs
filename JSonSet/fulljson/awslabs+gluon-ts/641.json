{"BR": {"BR_id": "641", "BR_author": "mbataillou", "BRopenT": "2020-02-14T15:00:32Z", "BRcloseT": "2020-03-30T18:43:18Z", "BR_text": {"BRsummary": "DeepAREstimator can't use DirichletMultinomialOutput anymore due to an assertion error", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n DeepAREstimator can't train DirichletMultinomialOutput due to an assertion error checking for scale to be None while I assume DeepAREstimator is returning a scale.\n <denchmark-h:h2>To Reproduce</denchmark-h>\n \n <denchmark-code>import numpy as np\n \n from gluonts.dataset.common import ListDataset\n from gluonts.distribution import DirichletMultinomialOutput\n from gluonts.model.deepar import DeepAREstimator\n from gluonts.trainer import Trainer\n \n train_dataset = ListDataset(\n     data_iter=[\n         {\n             \"start\": \"2019-01-01 00:00:00\",\n             \"target\": np.ones(shape=(4, 100)),\n         },\n     ],\n     freq=\"5min\",\n     one_dim_target=False,\n )\n \n estimator = DeepAREstimator(\n     'H', prediction_length=5, trainer=Trainer(epochs=3, hybridize=False),\n     distr_output=DirichletMultinomialOutput(dim=4, n_trials=100),\n )\n \n predictor = estimator.train(train_dataset)\n </denchmark-code>\n \n <denchmark-h:h2>Error Message</denchmark-h>\n \n <denchmark-code>---------------------------------------------------------------------------\n AssertionError                            Traceback (most recent call last)\n <ipython-input-8-920902ee83c0> in <module>\n      22 )\n      23 \n ---> 24 predictor = estimator.train(train_dataset)\n \n /opt/amazon/lib/python3.6/site-packages/gluonts/model/estimator.py in train(self, training_data, validation_data)\n     221         self, training_data: Dataset, validation_data: Optional[Dataset] = None\n     222     ) -> Predictor:\n --> 223         return self.train_model(training_data, validation_data).predictor\n \n /opt/amazon/lib/python3.6/site-packages/gluonts/model/estimator.py in train_model(self, training_data, validation_data)\n     206             input_names=get_hybrid_forward_input_names(trained_net),\n     207             train_iter=training_data_loader,\n --> 208             validation_iter=validation_data_loader,\n     209         )\n     210 \n \n /opt/amazon/lib/python3.6/site-packages/gluonts/trainer/_base.py in __call__(self, net, input_names, train_iter, validation_iter)\n     295                     )\n     296 \n --> 297                     epoch_loss = loop(epoch_no, train_iter)\n     298                     if is_validation_available:\n     299                         epoch_loss = loop(\n \n /opt/amazon/lib/python3.6/site-packages/gluonts/trainer/_base.py in loop(epoch_no, batch_iter, is_training)\n     235 \n     236                             with mx.autograd.record():\n --> 237                                 output = net(*inputs)\n     238 \n     239                                 # network can returns several outputs, the first being always the loss\n \n /opt/amazon/lib/python3.6/site-packages/mxnet/gluon/block.py in __call__(self, *args)\n     546             hook(self, args)\n     547 \n --> 548         out = self.forward(*args)\n     549 \n     550         for hook in self._forward_hooks.values():\n \n /opt/amazon/lib/python3.6/site-packages/mxnet/gluon/block.py in forward(self, x, *args)\n     923                     params = {i: j.data(ctx) for i, j in self._reg_params.items()}\n     924 \n --> 925                 return self.hybrid_forward(ndarray, x, *args, **params)\n     926 \n     927         assert isinstance(x, Symbol), \\\n \n /opt/amazon/lib/python3.6/site-packages/gluonts/model/deepar/_network.py in hybrid_forward(self, F, feat_static_cat, feat_static_real, past_time_feat, past_target, past_observed_values, future_time_feat, future_target, future_observed_values)\n     380             future_time_feat=future_time_feat,\n     381             future_target=future_target,\n --> 382             future_observed_values=future_observed_values,\n     383         )\n     384 \n \n /opt/amazon/lib/python3.6/site-packages/gluonts/model/deepar/_network.py in distribution(self, feat_static_cat, feat_static_real, past_time_feat, past_target, past_observed_values, future_time_feat, future_target, future_observed_values)\n     336         distr_args = self.proj_distr_args(rnn_outputs)\n     337 \n --> 338         return self.distr_output.distribution(distr_args, scale=scale)\n     339 \n     340     # noinspection PyMethodOverriding,PyPep8Naming\n \n /opt/amazon/lib/python3.6/site-packages/gluonts/distribution/dirichlet_multinomial.py in distribution(self, distr_args, loc, scale)\n     182 \n     183     def distribution(self, distr_args, loc=None, scale=None) -> Distribution:\n --> 184         assert loc is None and scale is None\n     185         distr = DirichletMultinomial(self.dim, self.n_trials, distr_args)\n     186         return distr\n \n AssertionError: \n </denchmark-code>\n \n <denchmark-h:h2>Environment</denchmark-h>\n \n \n Operating system: Amazon Linux\n Python version: 3.6\n GluonTS version: a96a0cc4 internal\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "mbataillou", "commentT": "2020-02-14T16:16:56Z", "comment_text": "\n \t\tThe issue is that some distributions (like Dirichlet) cannot handle translation/scaling.\n I would say that asserting that loc and scale are None is convenient, as not doing so may create confusion. We would need to disable any scaling option in the model: however, setting scaling=False in DeepAREstimator doesn't work because the NOPScaler actually does produce a scale, which happens to be 1.\n I think NOPScaler should return None when called. Also, scalers need not to be of HybridBlock type, they could just be callable objects.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "mbataillou", "commentT": "2020-02-14T16:31:26Z", "comment_text": "\n \t\tHowever, we may (and should) have networks that return the distribution's arguments, including loc and scale, in which case having either of them as None will create problems with hybridization.\n So after all, just ignoring loc and scale without any assertion may be the only way to go.\n \t\t"}}}, "commit": {"commit_id": "2e20016827ae7a3708227092d2b2918e595a11d3", "commit_author": "Lorenzo Stella", "commitT": "2020-03-30 20:43:17+02:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "0.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\gluonts\\distribution\\dirichlet.py", "file_new_name": "src\\gluonts\\distribution\\dirichlet.py", "file_complexity": {"file_NLOC": "112", "file_CCN": "14", "file_NToken": "733"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "151", "method_info": {"method_name": "distribution", "method_params": "self,distr_args,loc,scale", "method_startline": "150", "method_endline": "153", "method_complexity": {"method_NLOC": "4", "method_CCN": "2", "method_NToken": "33", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\gluonts\\distribution\\dirichlet_multinomial.py", "file_new_name": "src\\gluonts\\distribution\\dirichlet_multinomial.py", "file_complexity": {"file_NLOC": "144", "file_CCN": "13", "file_NToken": "805"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "184", "method_info": {"method_name": "distribution", "method_params": "self,distr_args,loc,scale", "method_startline": "183", "method_endline": "186", "method_complexity": {"method_NLOC": "4", "method_CCN": "2", "method_NToken": "41", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\gluonts\\distribution\\neg_binomial.py", "file_new_name": "src\\gluonts\\distribution\\neg_binomial.py", "file_complexity": {"file_NLOC": "96", "file_CCN": "14", "file_NToken": "654"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": null, "deleted_lines": "127"}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\gluonts\\distribution\\poisson.py", "file_new_name": "src\\gluonts\\distribution\\poisson.py", "file_complexity": {"file_NLOC": "73", "file_CCN": "14", "file_NToken": "436"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": null, "deleted_lines": "105"}}}}}}