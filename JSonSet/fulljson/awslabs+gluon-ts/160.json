{"BR": {"BR_id": "160", "BR_author": "lostella", "BRopenT": "2019-07-01T11:31:36Z", "BRcloseT": "2019-08-23T14:49:15Z", "BR_text": {"BRsummary": "Multivariate time series raise an error", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n I'm trying to model 4-dimensional time series using MultivariateGaussianOutput, but training fails due to some invalid loss value.\n <denchmark-h:h2>To Reproduce</denchmark-h>\n \n <denchmark-code>import numpy as np\n \n from gluonts.dataset.common import ListDataset\n from gluonts.distribution import MultivariateGaussianOutput\n from gluonts.model.deepar import DeepAREstimator\n from gluonts.trainer import Trainer\n \n train_dataset = ListDataset(\n     data_iter=[\n         {\n             \"start\": \"2019-01-01 00:00:00\",\n             \"target\": np.ones(shape=(4, 100)).tolist(),\n         },\n     ],\n     freq=\"5min\",\n )\n \n estimator = DeepAREstimator(\n     'H', prediction_length=5, trainer=Trainer(epochs=3, hybridize=False),\n     distr_output=MultivariateGaussianOutput(dim=4),\n )\n \n predictor = estimator.train(train_dataset)\n </denchmark-code>\n \n <denchmark-h:h2>Error Message</denchmark-h>\n \n <denchmark-code>Traceback (most recent call last):\n   File \"/Users/stellalo/gluon-ts/examples/run_multivariate.py\", line 15, in <module>\n     freq=\"5min\",\n   File \"/Users/stellalo/gluon-ts/src/gluonts/dataset/common.py\", line 259, in __init__\n     self.list_data = [process(data) for data in data_iter]\n   File \"/Users/stellalo/gluon-ts/src/gluonts/dataset/common.py\", line 259, in <listcomp>\n     self.list_data = [process(data) for data in data_iter]\n   File \"/Users/stellalo/gluon-ts/src/gluonts/dataset/common.py\", line 435, in __call__\n     data = t(data)\n   File \"/Users/stellalo/gluon-ts/src/gluonts/dataset/common.py\", line 374, in __call__\n     f\"JSON array has bad shape - expected {self.req_ndim} \"\n gluonts.core.exception.GluonTSDataError: JSON array has bad shape - expected 1 dimensions, got -1\n </denchmark-code>\n \n <denchmark-h:h2>Environment</denchmark-h>\n \n \n Operating system: macOS\n Python version: 3.6.6\n GluonTS version: master (35cc49b)\n \n (Add as much information about your environment as possible, e.g. dependencies versions.)\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "lostella", "commentT": "2019-08-22T12:14:31Z", "comment_text": "\n \t\tI have done some investigation based on the code above.\n When L, the Lower triangular Cholesky factor of covariance matrix has negative diagonal values, the log_prob will become undefined and therefore the weighted average loss become nan.\n The domain_map function from MultivariateGaussianOutput seems not working as expected.\n <denchmark-code>    def domain_map(self, F, mu_vector, L_vector):\n         # apply softplus to the diagonal of L and mask upper coefficient to make it lower-triangular\n         # diagonal matrix whose elements are diagonal elements of L mapped through a softplus\n         d = self.dim\n \n         # reshape from vector form (..., d * d) to matrix form(..., d, d)\n         L_matrix = L_vector.reshape((-2, d, d, -4), reverse=1)\n \n         L_diag = F.broadcast_mul(\n             F.Activation(\n                 F.broadcast_mul(L_matrix, F.eye(d)), act_type=\"softrelu\"\n             ),\n             F.eye(d),\n         )\n \n         mask = self.lower_triangular_ones(F, d)\n \n         L_low = F.broadcast_mul(L_matrix, mask)\n \n         return mu_vector, L_diag + L_low\n </denchmark-code>\n \n The mask from lower_triangular_ones will include the diagonal itself, instead of just the lower triangular part of matrix.\n Example:\n L_matrix:\n [[-1, 2, 3],\n [4, -5, 6],\n [7, 8, -9]]\n L_diag:\n [[relu(-1), 0, 0],\n [0, relu(-5), 0],\n [0, 0, relu(-9)]]\n mask:\n [[1, 0, 0],\n [1, 1, 0],\n [1, 1, 1]]\n L_low:\n [[-1, 0, 0],\n [4, -5, 0],\n [7, 8, -9]]\n Therefore negative values may exist in L_diag + L_low and cause errors.\n <denchmark-h:h3>Suggested change</denchmark-h>\n \n <denchmark-code>    def lower_triangular_ones(self, F, d: int) -> Tensor:\n         mask = F.zeros_like(F.eye(d))\n         for k in range(d):\n             mask = mask + F.eye(d, d, -(k+1))\n         return mask\n </denchmark-code>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "lostella", "commentT": "2019-08-23T12:41:07Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/davidlkl>@davidlkl</denchmark-link>\n  thanks for looking into this. I think having\n <denchmark-code>    def lower_triangular_ones(self, F, d: int) -> Tensor:\n         mask = F.zeros_like(F.eye(d))\n         for k in range(1, d):\n             mask = mask + F.eye(d, d, -k)\n         return mask\n </denchmark-code>\n \n would be more precise, and letting the offset 1 be customizable even better. I'm opening a PR where this utility function is moved to a more appropriate place, and implement the fix. Thanks!\n \t\t"}}}, "commit": {"commit_id": "ac8fc9b0ae81cd072fdd37d4ff089ca670939043", "commit_author": "Lorenzo Stella", "commitT": "2019-08-23 16:48:45+02:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "1.0", "commit_Nprams": "0.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\gluonts\\distribution\\multivariate_gaussian.py", "file_new_name": "src\\gluonts\\distribution\\multivariate_gaussian.py", "file_complexity": {"file_NLOC": "119", "file_CCN": "12", "file_NToken": "644"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "162", "deleted_lines": "147,148,149,150,151", "method_info": {"method_name": "domain_map", "method_params": "self,F,mu_vector,L_vector", "method_startline": "147", "method_endline": "166", "method_complexity": {"method_NLOC": "12", "method_CCN": "1", "method_NToken": "103", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": null, "deleted_lines": "146,147,148,149,150", "method_info": {"method_name": "lower_triangular_ones", "method_params": "self,F,int", "method_startline": "146", "method_endline": "150", "method_complexity": {"method_NLOC": "5", "method_CCN": "2", "method_NToken": "51", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\gluonts\\support\\linalg_util.py", "file_new_name": "src\\gluonts\\support\\linalg_util.py", "file_complexity": {"file_NLOC": "198", "file_CCN": "5", "file_NToken": "621"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85", "deleted_lines": null, "method_info": {"method_name": "lower_triangular_ones", "method_params": "F,int,int", "method_startline": "60", "method_endline": "85", "method_complexity": {"method_NLOC": "26", "method_CCN": "2", "method_NToken": "58", "method_nesting_level": "0"}}}}}}}}