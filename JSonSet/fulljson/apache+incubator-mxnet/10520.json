{"BR": {"BR_id": "10520", "BR_author": "jinhuang415", "BRopenT": "2018-04-12T08:50:15Z", "BRcloseT": "2019-06-21T20:18:28Z", "BR_text": {"BRsummary": "MXNet operator profile aggregate counter issue", "BRdescription": "\n It looks the operator counter of the aggregated output is the 2x of real value.\n I used below gluon model (mainly copied from <denchmark-link:https://mxnet.incubator.apache.org/tutorials/gluon/gluon.html>https://mxnet.incubator.apache.org/tutorials/gluon/gluon.html</denchmark-link>\n , contains 2 convolutions for each forward pass) and did profiling, the aggregated convolution counter is 4 instead of 2, the counter doubled for other OPs as well.\n <denchmark-code># import dependencies\n from __future__ import print_function\n import numpy as np\n import mxnet as mx\n import mxnet.ndarray as F\n import mxnet.gluon as gluon\n from mxnet.gluon import nn\n from mxnet import autograd\n \n class Net(gluon.Block):\n     def __init__(self, **kwargs):\n         super(Net, self).__init__(**kwargs)\n         with self.name_scope():\n             # layers created in name_scope will inherit name space\n             # from parent layer.\n             self.conv1 = nn.Conv2D(6, kernel_size=5)\n             self.pool1 = nn.MaxPool2D(pool_size=(2,2))\n             self.conv2 = nn.Conv2D(16, kernel_size=5)\n             self.pool2 = nn.MaxPool2D(pool_size=(2,2))\n             self.fc1 = nn.Dense(120)\n             self.fc2 = nn.Dense(84)\n             self.fc3 = nn.Dense(10)\n \n     def forward(self, x):\n         x = self.pool1(F.relu(self.conv1(x)))\n         x = self.pool2(F.relu(self.conv2(x)))\n         # 0 means copy over size from corresponding dimension.\n         # -1 means infer size from the rest of dimensions.\n         x = x.reshape((0, -1))\n         x = F.relu(self.fc1(x))\n         x = F.relu(self.fc2(x))\n         x = self.fc3(x)\n         return x\n \n net = Net()\n # Initialize on CPU. Replace with `mx.gpu(0)`, or `[mx.gpu(0), mx.gpu(1)]`,\n # etc to use one or more GPUs.\n net.collect_params().initialize(mx.init.Xavier(), ctx=mx.cpu())\n \n mx.profiler.set_config(aggregate_stats=True)\n mx.profiler.set_state('run')\n \n data = mx.nd.random_normal(shape=(10, 1, 32, 32))  # dummy data\n output = net(data)\n output.wait_to_read()\n \n print(mx.profiler.dumps())\n \n </denchmark-code>\n \n The profile output is below:\n <denchmark-code>[jinhuang@mlt-ace image-classification]$ python test_gluon.py\n \n Profile Statistics.\n         Note that counter items are counter values and not time units.\n Device Storage\n =================\n Name                          Total Count        Time (ms)    Min Time (ms)    Max Time (ms)    Avg Time (ms)\n ----                          -----------        ---------    -------------    -------------    -------------\n Memory: cpu/0                          65         535.0320           0.0240         726.1520         363.0640\n \n MXNET_C_API\n =================\n Name                          Total Count        Time (ms)    Min Time (ms)    Max Time (ms)    Avg Time (ms)\n ----                          -----------        ---------    -------------    -------------    -------------\n MXNDArrayReshape64                      1           0.0140           0.0140           0.0140           0.0140\n MXNDArrayFree                          21           0.1100           0.0000           0.0290           0.0052\n MXAutogradMarkVariables                10           0.1080           0.0080           0.0180           0.0108\n MXNDArrayCreateEx                      10           0.0340           0.0020           0.0070           0.0034\n MXNDArrayGetDType                      15           0.0000           0.0000           0.0000           0.0000\n MXSymbolSetAttr                        47           0.0920           0.0010           0.0130           0.0020\n MXNDArrayGetContext                    13           0.0070           0.0000           0.0010           0.0005\n MXNDArrayWaitToRead                     1          12.0930          12.0930          12.0930          12.0930\n MXSymbolInferShape                      7           0.5700           0.0490           0.2320           0.0814\n MXNet C API Calls                     230           0.2300           0.0010           0.2300           0.1145\n MXNet C API Concurrency               459           0.0010           0.0000           0.0010           0.0005\n MXSymbolCreateAtomicSymbol               7           0.3780           0.0190           0.1540           0.0540\n MXAutogradSetIsRecording               10           0.0140           0.0000           0.0070           0.0014\n MXAutogradSetIsTraining                10           0.0040           0.0000           0.0010           0.0004\n MXImperativeInvokeEx                   52           3.7600           0.0150           1.7250           0.0723\n MXNDArrayGetShape                      25           0.0190           0.0000           0.0030           0.0008\n \n operator\n =================\n Name                          Total Count        Time (ms)    Min Time (ms)    Max Time (ms)    Avg Time (ms)\n ----                          -----------        ---------    -------------    -------------    -------------\n WaitForVar                              2           0.0080           0.0040           0.0040           0.0040\n FullyConnected                          6           0.7770           0.0590           0.2380           0.1295\n Pooling                                 4           0.5280           0.0890           0.1750           0.1320\n _zeros                                 20           0.6220           0.0020           0.1410           0.0311\n ResourceParallelRandomSetSeed               2          14.7190           7.3580           7.3610           7.3595\n DeleteVariable                         40           0.1130           0.0010           0.0070           0.0028\n relu                                    8           0.2220           0.0070           0.0770           0.0278\n _random_normal                          2          10.8890           5.4430           5.4460           5.4445\n _random_uniform                        10           0.7370           0.0100           0.2740           0.0737\n _full                                  10           0.0350           0.0010           0.0080           0.0035\n Convolution                             4          12.5590           0.5260           5.7530           3.1398\n zeros_like                             20           0.3800           0.0030           0.1490           0.0190\n CopyCPU2CPU                            20           0.4690           0.0030           0.1530           0.0235\n Reorder                                 4           0.0110           0.0010           0.0050           0.0027\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "jinhuang415", "commentT": "2018-04-12T08:51:20Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/pengzhao-intel>@pengzhao-intel</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "jinhuang415", "commentT": "2018-04-12T17:37:51Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/nswamy>@nswamy</denchmark-link>\n  Can you please add labels-\n Python, Gluon, Profiler\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "jinhuang415", "commentT": "2018-04-17T04:28:41Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/cjolivier01>@cjolivier01</denchmark-link>\n  This functionality is really useful and we apply it in our daily works.\n Could you help fix the issue?\n \t\t"}}}, "commit": {"commit_id": "3f8fd005402968e77ecb05eb3c73eb1c5e35b332", "commit_author": "Zhaoqi Zhu", "commitT": "2019-06-21 13:18:28-07:00", "commit_complexity": {"commit_NLOC": "0.25925925925925924", "commit_CCN": "0.25925925925925924", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\profiler\\aggregate_stats.cc", "file_new_name": "src\\profiler\\aggregate_stats.cc", "file_complexity": {"file_NLOC": "215", "file_CCN": "46", "file_NToken": "1847"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "88,89,90", "deleted_lines": "88", "method_info": {"method_name": "mxnet::profiler::AggregateStats::OnProfileStat", "method_params": "stat", "method_startline": "86", "method_endline": "91", "method_complexity": {"method_NLOC": "6", "method_CCN": "2", "method_NToken": "58", "method_nesting_level": "2"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "src\\profiler\\profiler.h", "file_new_name": "src\\profiler\\profiler.h", "file_complexity": {"file_NLOC": "706", "file_CCN": "128", "file_NToken": "4632"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1166,1167", "deleted_lines": null, "method_info": {"method_name": "mxnet::profiler::ProfileOperator::ProfileOperator", "method_params": "name,attributes", "method_startline": "1161", "method_endline": "1169", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "52", "method_nesting_level": "3"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "844", "deleted_lines": null, "method_info": {"method_name": "mxnet::profiler::ProfileTask::SendStat", "method_params": "", "method_startline": "841", "method_endline": "846", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "61", "method_nesting_level": "3"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "816,817,818", "deleted_lines": null, "method_info": {"method_name": "mxnet::profiler::ProfileTask::enableAggregateStats", "method_params": "enabled", "method_startline": "816", "method_endline": "818", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "13", "method_nesting_level": "3"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\python\\unittest\\test_profiler.py", "file_new_name": "tests\\python\\unittest\\test_profiler.py", "file_complexity": {"file_NLOC": "237", "file_CCN": "58", "file_NToken": "1804"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292", "deleted_lines": null, "method_info": {"method_name": "test_aggregate_duplication", "method_params": "", "method_startline": "272", "method_endline": "292", "method_complexity": {"method_NLOC": "20", "method_CCN": "6", "method_NToken": "192", "method_nesting_level": "0"}}}}}}}}