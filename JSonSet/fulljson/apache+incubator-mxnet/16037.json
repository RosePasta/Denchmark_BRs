{"BR": {"BR_id": "16037", "BR_author": "matteosal", "BRopenT": "2019-08-29T16:49:21Z", "BRcloseT": "2019-09-04T06:09:07Z", "BR_text": {"BRsummary": "LSTM with MKL-DNN produces wrong output after weights are changed", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n \n Create an RNN op with mode='lstm' and bind it\n Run a forward pass\n Change the NDArray holding the RNN parameters\n Run a forward pass again\n \n The output doesn't change, unless the second forward pass is performed in training mode (is_train=True). Setting MXNET_MKLDNN_ENABLED=0 doesn't fix the issue, but using a build without MKL-DNN does.\n This severly impacts training with a validation set, because evaluating the performance on the validation set is typically performed with is_train=False after several updates of the weights. In this case, validation shows no improvement because the output of the layer is stuck at the very first training iteration.\n <denchmark-h:h2>Environment info (Required)</denchmark-h>\n \n <denchmark-code>----------Python Info----------\n Version      : 3.7.2\n Compiler     : GCC 7.3.0\n Build        : ('default', 'Dec 29 2018 06:19:36')\n Arch         : ('64bit', '')\n ------------Pip Info-----------\n Version      : 19.0.1\n Directory    : /opt/Anaconda/lib/python3.7/site-packages/pip\n ----------MXNet Info-----------\n Version      : 1.5.0\n Directory    : /home/matteo/Git/mxnet/python/mxnet\n Commit hash file \"/home/matteo/Git/mxnet/python/mxnet/COMMIT_HASH\" not found. Not installed from pre-built package or built from source.\n Library      : ['/home/matteo/Git/mxnet/python/mxnet/../../lib/libmxnet.so']\n Build features:\n \u2716 CUDA\n \u2716 CUDNN\n \u2716 NCCL\n \u2716 CUDA_RTC\n \u2716 TENSORRT\n \u2714 CPU_SSE\n \u2714 CPU_SSE2\n \u2714 CPU_SSE3\n \u2714 CPU_SSE4_1\n \u2714 CPU_SSE4_2\n \u2716 CPU_SSE4A\n \u2714 CPU_AVX\n \u2716 CPU_AVX2\n \u2716 OPENMP\n \u2716 SSE\n \u2714 F16C\n \u2714 JEMALLOC\n \u2716 BLAS_OPEN\n \u2714 BLAS_ATLAS\n \u2716 BLAS_MKL\n \u2716 BLAS_APPLE\n \u2716 LAPACK\n \u2714 MKLDNN\n \u2716 OPENCV\n \u2716 CAFFE\n \u2716 PROFILER\n \u2716 DIST_KVSTORE\n \u2716 CXX14\n \u2716 INT64_TENSOR_SIZE\n \u2716 SIGNAL_HANDLER\n \u2716 DEBUG\n ----------System Info----------\n Platform     : Linux-4.15.0-55-generic-x86_64-with-debian-buster-sid\n system       : Linux\n node         : mongolius\n release      : 4.15.0-55-generic\n version      : #60-Ubuntu SMP Tue Jul 2 18:22:20 UTC 2019\n ----------Hardware Info----------\n machine      : x86_64\n processor    : x86_64\n Architecture:        x86_64\n CPU op-mode(s):      32-bit, 64-bit\n Byte Order:          Little Endian\n CPU(s):              8\n On-line CPU(s) list: 0-7\n Thread(s) per core:  2\n Core(s) per socket:  4\n Socket(s):           1\n NUMA node(s):        1\n Vendor ID:           GenuineIntel\n CPU family:          6\n Model:               94\n Model name:          Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz\n Stepping:            3\n CPU MHz:             2700.253\n CPU max MHz:         3500,0000\n CPU min MHz:         800,0000\n BogoMIPS:            5184.00\n Virtualization:      VT-x\n L1d cache:           32K\n L1i cache:           32K\n L2 cache:            256K\n L3 cache:            6144K\n NUMA node0 CPU(s):   0-7\n Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf tsc_known_freq pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb invpcid_single pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx rdseed adx smap clflushopt intel_pt xsaveopt xsavec xgetbv1 xsaves dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp md_clear flush_l1d\n ----------Network Test----------\n Setting timeout: 10\n Timing for MXNet: https://github.com/apache/incubator-mxnet, DNS: 0.0117 sec, LOAD: 0.8935 sec.\n Timing for Gluon Tutorial(en): http://gluon.mxnet.io, DNS: 0.0599 sec, LOAD: 2.1901 sec.\n Timing for Gluon Tutorial(cn): https://zh.gluon.ai, DNS: 0.1028 sec, LOAD: 0.9832 sec.\n Timing for FashionMNIST: https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/dataset/fashion-mnist/train-labels-idx1-ubyte.gz, DNS: 0.0657 sec, LOAD: 1.2597 sec.\n Timing for PYPI: https://pypi.python.org/pypi/pip, DNS: 0.0380 sec, LOAD: 0.8543 sec.\n Timing for Conda: https://repo.continuum.io/pkgs/free/, DNS: 0.0395 sec, LOAD: 0.4625 sec.\n </denchmark-code>\n \n Package used (Python/R/Scala/Julia): python\n <denchmark-h:h2>Build info (Required if built from source)</denchmark-h>\n \n Compiler (gcc/clang/mingw/visual studio): gcc\n MXNet commit hash: <denchmark-link:https://github.com/apache/incubator-mxnet/commit/076b2f330c60f05cb939beea28dd04cd571a34c0>076b2f3</denchmark-link>\n \n Build config: plain config.mk, except for USE_OPENCV=0\n <denchmark-h:h2>Minimum reproducible example</denchmark-h>\n \n <denchmark-code>import mxnet as mx\n \n sym = mx.sym.RNN(mode='lstm', num_layers=1, state_outputs=False, state_size=1, name='rnn')\n \n ex = sym.bind(mx.cpu(), \n \t{\n \t\t'rnn_data': mx.ndarray.random.uniform(low=-1, high=1, shape=(10, 128, 5)),\n \t\t'rnn_parameters': mx.ndarray.random.uniform(low=-1, high=1, shape=(32)),\n \t\t'rnn_state': mx.ndarray.zeros(shape=(1, 128, 1)),\n \t\t'rnn_state_cell': mx.ndarray.zeros(shape=(1, 128, 1)),\n \t}\n )\n \n print('---- Output in training mode:')\n ex.forward(is_train=True)\n print(ex.output_dict['rnn_output'].sum().asnumpy())\n \n print('\\n---- Output in test mode:')\n ex.forward(is_train=False)\n print(ex.output_dict['rnn_output'].sum().asnumpy())\n \n ex.copy_params_from(\t\n \t{\n \t\t'rnn_data': ex.arg_dict['rnn_data'],\n \t\t'rnn_parameters': mx.ndarray.random.uniform(low=-1, high=1, shape=(32)),\n \t\t'rnn_state': ex.arg_dict['rnn_state'],\n \t\t'rnn_state_cell': ex.arg_dict['rnn_state_cell'],\n \t}\n )\n \n print('\\n---- Output in training mode after changing weights:')\n ex.forward(is_train=True)\n print(ex.output_dict['rnn_output'].sum().asnumpy())\n \n print('\\n---- Output in test mode after changing weights:')\n ex.forward(is_train=False)\n print(ex.output_dict['rnn_output'].sum().asnumpy())\n </denchmark-code>\n \n When using a build with MKL-DNN, this script print something like this:\n <denchmark-code>---- Output in training mode:\n [-112.02175]\n \n ---- Output in test mode:\n [-112.02175]\n \n ---- Output in training mode after changing weights:\n [-362.91537]\n \n ---- Output in test mode after changing weights:\n [-112.02175]\n </denchmark-code>\n \n Which shows that the output doesn't change after changing the weights unless the forward pass is performed in training mode. Setting MXNET_MKLDNN_ENABLED=0 doesn't fix the issue, but using a build without MKL-DNN does.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "matteosal", "commentT": "2019-08-29T16:49:25Z", "comment_text": "\n \t\tHey, this is the MXNet Label Bot.\n Thank you for submitting the issue! I will try and suggest some labels so that the appropriate MXNet community members can help resolve it.\n Here are my recommended label(s): Bug\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "matteosal", "commentT": "2019-08-29T17:51:36Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mxnet-label-bot>@mxnet-label-bot</denchmark-link>\n  add [Bug, MKLDNN, RNN]\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "matteosal", "commentT": "2019-08-30T00:50:28Z", "comment_text": "\n \t\tProbably it's because the stateful RNN op doesn't check if weight is changed. We will look at this. <denchmark-link:https://github.com/pengzhao-intel>@pengzhao-intel</denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "matteosal", "commentT": "2019-08-30T02:09:37Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/zixuanweeei>@zixuanweeei</denchmark-link>\n  Would you  please have a look for this?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "matteosal", "commentT": "2019-08-30T02:44:46Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ZhennanQin>@ZhennanQin</denchmark-link>\n  Sure. Just as you have said, it is definitely caused by that stateful RNN op won't check weights again after it has been initialized with MKL-DNN memory format in inference procedure.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "matteosal", "commentT": "2019-08-30T06:13:34Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/matteosal>@matteosal</denchmark-link>\n  Thanks for you reporting this issue. We are addressing the problem. PR is on the way. Thanks.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "matteosal", "commentT": "2019-08-30T12:04:05Z", "comment_text": "\n \t\tGreat!\n I also see the same problem with modes rnn_relu and rnn_tanh, while gru is fine.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "matteosal", "commentT": "2019-09-01T04:50:27Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/matteosal>@matteosal</denchmark-link>\n  That's right. The problem won't apear with GRU, because we haven't integrated MKL-DNN GRU into MXNet yet. It will be available in the near future.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "matteosal", "commentT": "2019-09-01T06:25:18Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/matteosal>@matteosal</denchmark-link>\n  thanks to reporting the issues which are really helpful.\n Would you mind introducing some background of how your organizations are using MKL-DNN so that we can have better supports or more cooperations?\n My official email: <denchmark-link:mailto:patric.zhao@intel.com>patric.zhao@intel.com</denchmark-link>\n \n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "matteosal", "commentT": "2019-09-02T11:05:23Z", "comment_text": "\n \t\t\n @matteosal thanks to reporting the issues which are really helpful.\n Would you mind introducing some background of how your organizations are using MKL-DNN so that we can have better supports or more cooperations?\n My official email: patric.zhao@intel.com\n \n Sure, I'm writing you from my Wolfram work email\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "matteosal", "commentT": "2019-09-04T06:09:07Z", "comment_text": "\n \t\tFixed and closing. Thanks to reporting the issue :)\n \t\t"}}}, "commit": {"commit_id": "07b44709847f2a4f6975bb2e0ce6d42798bc5213", "commit_author": "Zixuan Wei", "commitT": "2019-09-04 14:08:29+08:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "src\\operator\\rnn-inl.h", "file_new_name": "src\\operator\\rnn-inl.h", "file_complexity": {"file_NLOC": "1294", "file_CCN": "165", "file_NToken": "8102"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "525,526,527,528,529,530,563,564,565,566,567,568,569,570,571,572,573", "method_info": {"method_name": "mxnet::op::RNNOp::~RNNOp", "method_params": "", "method_startline": "524", "method_endline": "574", "method_complexity": {"method_NLOC": "42", "method_CCN": "10", "method_NToken": "291", "method_nesting_level": "3"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "842,843,844,845,846,847,848,849,850,851,852,854,859,861,862,865", "deleted_lines": "563,564,565,566,567,568,569,570,571,572,573,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,878,879,880,881,882,883,887,888", "method_info": {"method_name": "mxnet::op::RNNOp::Forward", "method_params": "ctx,in_data,req,out_data", "method_startline": "560", "method_endline": "947", "method_complexity": {"method_NLOC": "325", "method_CCN": "41", "method_NToken": "1907", "method_nesting_level": "3"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "1137,1146", "deleted_lines": "949,950,951,952,953,954,955,956,957,958,959,960,961,1174", "method_info": {"method_name": "mxnet::op::RNNOp::Backward", "method_params": "ctx,out_grad,in_data,out_data,req,in_grad", "method_startline": "949", "method_endline": "1176", "method_complexity": {"method_NLOC": "200", "method_CCN": "19", "method_NToken": "1433", "method_nesting_level": "3"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\operator\\rnn.cc", "file_new_name": "src\\operator\\rnn.cc", "file_complexity": {"file_NLOC": "625", "file_CCN": "55", "file_NToken": "5481"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "275,277,281,282,284,285,287,290", "deleted_lines": "273,277,278,279,284,288", "method_info": {"method_name": "mxnet::op::RNNStatefulComputeCPU", "method_params": "state_ptr,ctx,inputs,req,outputs", "method_startline": "226", "method_endline": "635", "method_complexity": {"method_NLOC": "365", "method_CCN": "22", "method_NToken": "3796", "method_nesting_level": "2"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\python\\unittest\\test_operator.py", "file_new_name": "tests\\python\\unittest\\test_operator.py", "file_complexity": {"file_NLOC": "7613", "file_CCN": "1249", "file_NToken": "94479"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115", "deleted_lines": null, "method_info": {"method_name": "test_rnn_with_new_param", "method_params": "", "method_startline": "80", "method_endline": "115", "method_complexity": {"method_NLOC": "34", "method_CCN": "5", "method_NToken": "427", "method_nesting_level": "0"}}}}}}}}