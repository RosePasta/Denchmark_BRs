{"BR": {"BR_id": "12662", "BR_author": "Ishitori", "BRopenT": "2018-09-25T11:02:08Z", "BRcloseT": "2018-11-02T21:18:33Z", "BR_text": {"BRsummary": "Memory leak when passing images of different dimensions with MXNET_CUDNN_AUTOTUNE_DEFAULT", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n I have noticed, that if I use MXNET_CUDNN_AUTOTUNE_DEFAULT=1 with big image dimensions (1900x1900), then after a forward pass a lot of GPU memory got consumed and never released. Autotune gets Out of Memory exception, if I try to pass another image after the first one with also big, but different dimensions (1800x1800).\n The image dimensions are smaller, so my assumption is that since 1900x1900 got processed then 1800x1800 should also be processed, because it takes less memory. But it is actually not the case, because after the first image processing some of the GPU memory is not released.\n The main question for me is why GPU memory is not released once the first image is processed? It seems like something is holding it. I think there is a memory leak or some sort of cache, which is never released.\n <denchmark-h:h2>Environment info (Required)</denchmark-h>\n \n <denchmark-code>----------Python Info----------\n Version      : 3.6.4\n Compiler     : GCC 7.2.0\n Build        : ('default', 'Jan 16 2018 18:10:19')\n Arch         : ('64bit', '')\n ------------Pip Info-----------\n Version      : 9.0.1\n Directory    : /home/ubuntu/anaconda3/lib/python3.6/site-packages/pip\n ----------MXNet Info-----------\n /home/ubuntu/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprec$\n ted. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n   from ._conv import register_converters as _register_converters\n Version      : 1.3.0\n Directory    : /home/ubuntu/anaconda3/lib/python3.6/site-packages/mxnet\n Commit Hash   : b3be92f4a48bce62a5a8424271871c2f81c8f7f1\n ----------System Info----------\n Platform     : Linux-4.4.0-1066-aws-x86_64-with-debian-stretch-sid\n system       : Linux\n node         : ip-172-31-22-61\n release      : 4.4.0-1066-aws\n version      : #76-Ubuntu SMP Thu Aug 16 16:21:21 UTC 2018\n ----------Hardware Info----------\n machine      : x86_64\n processor    : x86_64\n Architecture:          x86_64\n CPU op-mode(s):        32-bit, 64-bit\n Byte Order:            Little Endian\n CPU(s):                32\n On-line CPU(s) list:   0-31\n Thread(s) per core:    2\n Core(s) per socket:    16\n Socket(s):             1\n NUMA node(s):          1\n Vendor ID:             GenuineIntel\n CPU family:            6\n Model:                 79\n Model name:            Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz\n Stepping:              1\n CPU MHz:               2699.984\n CPU max MHz:           3000.0000\n CPU min MHz:           1200.0000\n BogoMIPS:              4600.07\n Hypervisor vendor:     Xen\n Virtualization type:   full\n L1d cache:             32K\n L1i cache:             32K\n L2 cache:              256K\n L3 cache:              46080K\n NUMA node0 CPU(s):     0-31\n Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good\n nopl xtopology nonstop_tsc aperfmperf pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3\n dnowprefetch invpcid_single kaiser fsgsbase bmi1 hle avx2 smep bmi2 erms invpcid rtm rdseed adx xsaveopt\n ----------Network Test----------\n Setting timeout: 10\n Timing for MXNet: https://github.com/apache/incubator-mxnet, DNS: 0.0024 sec, LOAD: 0.5097 sec.\n Timing for Gluon Tutorial(en): http://gluon.mxnet.io, DNS: 0.0004 sec, LOAD: 0.3562 sec.\n Timing for Gluon Tutorial(cn): https://zh.gluon.ai, DNS: 0.0003 sec, LOAD: 0.3587 sec.\n Timing for FashionMNIST: https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/dataset/fashion-mnist/train-labels-idx1-ubyte.gz, DNS: 0.0003 sec, LOAD: 0.1460 sec.\n Timing for PYPI: https://pypi.python.org/pypi/pip, DNS: 0.0023 sec, LOAD: 0.0745 sec.\n Timing for Conda: https://repo.continuum.io/pkgs/free/, DNS: 0.0003 sec, LOAD: 0.0240 sec.\n </denchmark-code>\n \n Package used (Python/R/Scala/Julia):\n Python\n <denchmark-h:h2>Error Message:</denchmark-h>\n \n <denchmark-code>Traceback (most recent call last):\n   File \"main.py\", line 71, in <module>\n     print(transform_fn(net, args.b, args.h, args.w))\n   File \"main.py\", line 54, in transform_fn\n     data_out = net(data_in).asnumpy()\n   File \"/home/ubuntu/anaconda3/lib/python3.6/site-packages/mxnet/ndarray/ndarray.py\", line 1972, in asnumpy\n     ctypes.c_size_t(data.size)))\n   File \"/home/ubuntu/anaconda3/lib/python3.6/site-packages/mxnet/base.py\", line 252, in check_call\n     raise MXNetError(py_str(_LIB.MXGetLastError()))\n mxnet.base.MXNetError: [02:19:57] src/operator/nn/./cudnn/cudnn_convolution-inl.h:870: Failed to find any forward convolution algorithm.  with workspace size of 1073741824 bytes, please consider reducing batch/model size or increasing the workspace size\n \n Stack trace returned 10 entries:\n [bt] (0) /home/ubuntu/anaconda3/lib/python3.6/site-packages/mxnet/libmxnet.so(+0x36161a) [0x7f3ddb36761a]\n ...\n </denchmark-code>\n \n <denchmark-h:h2>Minimum reproducible example</denchmark-h>\n \n <denchmark-code>import os\n import argparse\n \n #os.environ['MXNET_CUDNN_AUTOTUNE_DEFAULT'] = \"0\"\n \n from mxnet import nd, gluon\n import mxnet as mx\n from mxnet.gluon import nn\n import json\n \n ctx = mx.gpu(0)\n \n def create_model():\n     net = gluon.nn.HybridSequential()\n     with net.name_scope():\n         net.add(nn.Conv2D(64, 5))\n         net.add(nn.LeakyReLU(0.1))\n         net.add(nn.Conv2D(64, 3))\n         net.add(nn.LeakyReLU(0.1))\n         net.add(nn.Conv2D(96, 3))\n         net.add(nn.LeakyReLU(0.1))\n         net.add(nn.Conv2D(96, 3))\n         net.add(nn.LeakyReLU(0.1))\n         net.add(nn.Conv2D(128, 3))\n         net.add(nn.LeakyReLU(0.1))\n         net.add(nn.Conv2D(128, 3))\n         net.add(nn.LeakyReLU(0.1))\n         net.add(nn.Conv2D(256, 3))\n         net.add(nn.LeakyReLU(0.1))\n         net.add(nn.Conv2D(128, 3))\n         net.add(nn.LeakyReLU(0.1))\n         net.add(nn.Conv2D(1, 3))\n     return net\n \n \n def model_fn():\n     net = create_model()\n     net.hybridize()\n     net.initialize(mx.init.Normal(sigma=0.01), ctx=ctx)\n     return net\n \n \n def transform_fn(net, batch_size=1, height=500, width=500):\n     data_in = nd.random_uniform(low=0, high=255, shape=(batch_size, 3, height, width), ctx=ctx, dtype=\"float32\")\n \n     data_out = net(data_in).asnumpy()\n     return data_out\n \n parser = argparse.ArgumentParser(description='Memory consumption checker')\n parser.add_argument('--h', type=int, default=500, help='Height of an image, default 500')\n parser.add_argument('--w', type=int, default=500, help='Weight of an image, default 500')\n parser.add_argument('--b', type=int, default=1, help='Batch_size, default 1')\n args = parser.parse_args()\n print(args)\n \n net = model_fn()\n mx.nd.waitall()\n \n while True:\n         args.h = int(input(\"Height: \"))\n         args.w = int(input(\"Width: \"))\n         print(transform_fn(net, args.b, args.h, args.w))\n </denchmark-code>\n \n <denchmark-h:h2>Steps to reproduce</denchmark-h>\n \n \n Run script on p2 instance\n On first prompt of image dimensions provide 1900 and 1900\n See amount of GPU memory in use once the forward pass is done and second prompt is displayed (in my case it was 5508 out of 11441)\n Enter image dimensions of 1800 and 1800\n See out of memory error\n \n <denchmark-h:h2>What have you tried to solve it?</denchmark-h>\n \n Setting MXNET_CUDNN_AUTOTUNE_DEFAULT=0 seems to solve the problem. The inference time increases slightly, but memory seems like properly reused:\n \n After the first image is done (1900x1900), the consumption is almost the same: 5505/11441\n After the second image is done (1800x1800), the consumption gets to 10222/11441, but processing doesn't fail\n I can even run 3rd image (1700x1700) and it gets processed fine and consumption drops to 4451/11441.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "Ishitori", "commentT": "2018-09-25T14:21:39Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mxnet-label-bot>@mxnet-label-bot</denchmark-link>\n  [Bug, Memory]\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "Ishitori", "commentT": "2018-10-03T18:11:19Z", "comment_text": "\n \t\tI think we discovered this before. Somehow I can't find the ticket, but I did some memory consumption graphs in the Jetson board which indicated a leak in Cuda / cudnn. We notified NVidia about this before. Maybe <denchmark-link:https://github.com/DickJC123>@DickJC123</denchmark-link>\n  has some more info.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "Ishitori", "commentT": "2018-10-03T18:12:28Z", "comment_text": "\n \t\tIs the memory released across executions of the script?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "Ishitori", "commentT": "2018-10-03T18:13:45Z", "comment_text": "\n \t\tPossibly related: <denchmark-link:https://devtalk.nvidia.com/default/topic/1023405/jetson-tx2/continuously-decreasing-available-memory/>https://devtalk.nvidia.com/default/topic/1023405/jetson-tx2/continuously-decreasing-available-memory/</denchmark-link>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "Ishitori", "commentT": "2018-10-05T16:46:58Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/larroy>@larroy</denchmark-link>\n , when searching for the best algorithm the memory consumption spikes, and once it is found it goes down, but not to the state it was before the search started.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "Ishitori", "commentT": "2018-10-06T02:48:02Z", "comment_text": "\n \t\tI have an explanation but I'll have to think about the best fix.  The problem starts with the fact that cudnnFind() does its own workspace  allocations and doesn't use MXNet's memory allocator.  MXNet anticipates this by setting up a 'headroom' via MXNET_GPU_MEM_POOL_RESERVE (a percentage of total memory). I was able to run your script with repeated allocations on a 16GB GPU by setting MXNET_GPU_MEM_POOL_RESERVE=35.  On a 12GB GPU, the corresponding value would be 47!!  That's clearly excessive so we might have to resort to calling the 'Ex' flavor of cudnnFind, which allows for pre-screening of algos that have a workspace greater than the threshold set by the convolution instance 'workspace' param.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "Ishitori", "commentT": "2018-10-14T21:36:59Z", "comment_text": "\n \t\tI had been working up a PR with a number of improvements to the way MXNet uses cudnnFind.  In the PR's new serialized approach to running cudnnFind, a fix to your problem became possible.  Please see <denchmark-link:https://github.com/apache/incubator-mxnet/pull/12804>#12804</denchmark-link>\n \n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "Ishitori", "commentT": "2018-10-27T16:36:01Z", "comment_text": "\n \t\tCan this be closed due to the previous fix by <denchmark-link:https://github.com/DickJC123>@DickJC123</denchmark-link>\n  ?\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "Ishitori", "commentT": "2018-11-02T21:18:32Z", "comment_text": "\n \t\tYes, I consider the issue fixed. I tried to reproduce it with --pre version of mxnet, using the same methodology and it doesn't fail anymore.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "Ishitori", "commentT": "2018-11-09T10:51:12Z", "comment_text": "\n \t\tHow did you measure the memory? Do you think it makes sense to add a regression test?\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "Ishitori", "commentT": "2018-11-10T00:55:18Z", "comment_text": "\n \t\tAs part of <denchmark-link:https://github.com/apache/incubator-mxnet/pull/12804>#12804</denchmark-link>\n , I took the minimal example code provided here and turned it into the initially failing unittest test_gluon_gpu.py:test_large_models.  To make the test universal, I had its operation scale with the amount of available memory, as provided by a new Python API addition gpu_memory_info():\n <denchmark-code>python -c \"import mxnet; print(mxnet.context.gpu_memory_info(0))\"\n </denchmark-code>\n \n After CI showed the test failing, I pushed the fix that corrected the issue.  So in summary, we have a new function to measure memory, and a new unittest for this issue.\n \t\t"}}}, "commit": {"commit_id": "ee5f699754b78e25dd023a18adfd8810139a2ce3", "commit_author": "Dick Carter", "commitT": "2018-10-26 00:03:41-07:00", "commit_complexity": {"commit_NLOC": "0.6966292134831461", "commit_CCN": "1.0", "commit_Nprams": "0.6853932584269663"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "CONTRIBUTORS.md", "file_new_name": "CONTRIBUTORS.md", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "190", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "docs\\faq\\env_var.md", "file_new_name": "docs\\faq\\env_var.md", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "70,71,72,73", "deleted_lines": null}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "include\\mxnet\\base.h", "file_new_name": "include\\mxnet\\base.h", "file_complexity": {"file_NLOC": "188", "file_CCN": "43", "file_NToken": "1311"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "337,338,357,358", "deleted_lines": "337,338,357,358", "method_info": {"method_name": "mxnet::Context::GetGPUMemoryInformation", "method_params": "dev,free_mem,total_mem", "method_startline": "337", "method_endline": "364", "method_complexity": {"method_NLOC": "18", "method_CCN": "2", "method_NToken": "155", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "337,338,357,358", "deleted_lines": "337,338,357,358", "method_info": {"method_name": "mxnet::Context::GetGPUMemoryInformation", "method_params": "dev,free_mem,total_mem", "method_startline": "337", "method_endline": "364", "method_complexity": {"method_NLOC": "18", "method_CCN": "2", "method_NToken": "155", "method_nesting_level": "1"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "include\\mxnet\\c_api.h", "file_new_name": "include\\mxnet\\c_api.h", "file_complexity": {"file_NLOC": "765", "file_CCN": "0", "file_NToken": "4533"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "444,452,453,454,455,456,457,458,459,460", "deleted_lines": null}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "perl-package\\AI-MXNetCAPI\\mxnet.i", "file_new_name": "perl-package\\AI-MXNetCAPI\\mxnet.i", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "347,355,356,357,358,359,360,361,362,363", "deleted_lines": null}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\mxnet\\context.py", "file_new_name": "python\\mxnet\\context.py", "file_complexity": {"file_NLOC": "118", "file_CCN": "22", "file_NToken": "579"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283", "deleted_lines": null, "method_info": {"method_name": "gpu_memory_info", "method_params": "device_id", "method_startline": "261", "method_endline": "283", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "63", "method_nesting_level": "0"}}}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\c_api\\c_api.cc", "file_new_name": "src\\c_api\\c_api.cc", "file_complexity": {"file_NLOC": "1205", "file_CCN": "160", "file_NToken": "8449"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "127,128,129,130,131,132,133,134", "deleted_lines": null, "method_info": {"method_name": "MXGetGPUMemoryInformation", "method_params": "dev,free_mem,total_mem", "method_startline": "126", "method_endline": "134", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "68", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "136", "deleted_lines": null, "method_info": {"method_name": "MXGetGPUMemoryInformation64", "method_params": "dev,free_mem,total_mem", "method_startline": "136", "method_endline": "140", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "34", "method_nesting_level": "0"}}}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "src\\operator\\nn\\cudnn\\cudnn_algoreg-inl.h", "file_new_name": "src\\operator\\nn\\cudnn\\cudnn_algoreg-inl.h", "file_complexity": {"file_NLOC": "127", "file_CCN": "23", "file_NToken": "796"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "70,71,72,73,74,84,85", "deleted_lines": "68,78,88,89,90,91", "method_info": {"method_name": "mxnet::op::CuDNNAlgoReg::Find", "method_params": "param,in_shape,out_shape,cudnn_data_type,cudnn_forward_compute_type,cudnn_backward_compute_type,sm_arch,add_to_weight,fwd,bwd,flt", "method_startline": "68", "method_endline": "91", "method_complexity": {"method_NLOC": "24", "method_CCN": "3", "method_NToken": "183", "method_nesting_level": "3"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "74,84,85,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,113,114,115", "deleted_lines": "78,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117", "method_info": {"method_name": "mxnet::op::CuDNNAlgoReg::FindOrElseRegister", "method_params": "param,in_shape,out_shape,cudnn_data_type,cudnn_forward_compute_type,cudnn_backward_compute_type,sm_arch,add_to_weight,fwd,bwd,flt,algo_setter", "method_startline": "74", "method_endline": "117", "method_complexity": {"method_NLOC": "41", "method_CCN": "7", "method_NToken": "289", "method_nesting_level": "3"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,113,114,115", "deleted_lines": "93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,124,125,126", "method_info": {"method_name": "mxnet::op::CuDNNAlgoReg::Register", "method_params": "param,in_shape,out_shape,cudnn_data_type,cudnn_forward_compute_type,cudnn_backward_compute_type,sm_arch,add_to_weight,fwd,bwd,flt", "method_startline": "93", "method_endline": "127", "method_complexity": {"method_NLOC": "34", "method_CCN": "6", "method_NToken": "224", "method_nesting_level": "3"}}}}}, "file_8": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "src\\operator\\nn\\cudnn\\cudnn_convolution-inl.h", "file_new_name": "src\\operator\\nn\\cudnn\\cudnn_convolution-inl.h", "file_complexity": {"file_NLOC": "833", "file_CCN": "142", "file_NToken": "6360"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "615,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,735,736,738,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,757,758,759,762,763,764,765,766,767,768,769,770,771,773,774,775,776,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,819,820,821,822,824", "deleted_lines": "618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,663,664,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,743,744,745,746,747,748,749,750,751,752,753,754,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823", "method_info": {"method_name": "mxnet::op::CuDNNConvolutionOp::CuDNNAlgoSetter", "method_params": "rctx,in_shape,out_shape,cudnn_forward_compute_type,cudnn_backward_compute_type,fwd,bwd,flt", "method_startline": "615", "method_endline": "824", "method_complexity": {"method_NLOC": "185", "method_CCN": "30", "method_NToken": "1094", "method_nesting_level": "3"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "1011,1012,1013,1014,1015,1016,1017", "deleted_lines": null, "method_info": {"method_name": "mxnet::op::CuDNNConvolutionOp::ReserveElements", "method_params": "elements", "method_startline": "1011", "method_endline": "1017", "method_complexity": {"method_NLOC": "7", "method_CCN": "3", "method_NToken": "77", "method_nesting_level": "3"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "1020,1021,1022,1023,1024,1025,1026", "deleted_lines": null, "method_info": {"method_name": "mxnet::op::CuDNNConvolutionOp::LogNoSuitableAlgoAndExit", "method_params": "num_algos_tried,min_memory_needs,workspace_byte,algo_kind", "method_startline": "1020", "method_endline": "1026", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "50", "method_nesting_level": "3"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873", "deleted_lines": "826,827,828,829,830,833,834,835,836,837,838,839,840,841,842", "method_info": {"method_name": "mxnet::op::CuDNNConvolutionOp::SelectAlgo", "method_params": "rctx,in_shape,out_shape,cudnn_forward_compute_type,cudnn_backward_compute_type", "method_startline": "826", "method_endline": "883", "method_complexity": {"method_NLOC": "33", "method_CCN": "3", "method_NToken": "274", "method_nesting_level": "3"}}}}}, "file_9": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "src\\operator\\nn\\cudnn\\cudnn_deconvolution-inl.h", "file_new_name": "src\\operator\\nn\\cudnn\\cudnn_deconvolution-inl.h", "file_complexity": {"file_NLOC": "787", "file_CCN": "125", "file_NToken": "5918"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "757,758,759,760,761,762,763,764,765,766,767,768,769,770,772,773,774,775,776,777,778,779,780,781,782,783,784,786,787,788,789,790,791,792,793,794,795,797,798,799,800,801,802,803,804,805,806,807", "deleted_lines": "757,758,759,760,762,763,764,765,766,769,770,771,772,773,774,775,776,777,778,779", "method_info": {"method_name": "mxnet::op::CuDNNDeconvolutionOp::SelectAlgo", "method_params": "rctx,in_shape,out_shape,cudnn_forward_compute_type,cudnn_backward_compute_type", "method_startline": "757", "method_endline": "824", "method_complexity": {"method_NLOC": "33", "method_CCN": "3", "method_NToken": "274", "method_nesting_level": "3"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "966,967,968,969,970,971,972", "deleted_lines": null, "method_info": {"method_name": "mxnet::op::CuDNNDeconvolutionOp::LogNoSuitableAlgoAndExit", "method_params": "num_algos_tried,min_memory_needs,workspace_byte,algo_kind", "method_startline": "966", "method_endline": "972", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "50", "method_nesting_level": "3"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "956,957,958,959,960,961,962", "deleted_lines": null, "method_info": {"method_name": "mxnet::op::CuDNNDeconvolutionOp::ReserveElements", "method_params": "elements", "method_startline": "956", "method_endline": "962", "method_complexity": {"method_NLOC": "7", "method_CCN": "3", "method_NToken": "77", "method_nesting_level": "3"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,727,728,729,730,731,732,733,734,735,736,737,738,740,741,742,744,746,747,748,749,750,751,752,753,754,755", "deleted_lines": "542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,609,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,674,675,676,677,678,679,680,681,682,683,684,685,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,717,718,719,720,721,722,723,724,725,726,727,728,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755", "method_info": {"method_name": "mxnet::op::CuDNNDeconvolutionOp::CuDNNAlgoSetter", "method_params": "rctx,in_shape,out_shape,cudnn_forward_compute_type,cudnn_backward_compute_type,fwd,bwd,flt", "method_startline": "542", "method_endline": "755", "method_complexity": {"method_NLOC": "189", "method_CCN": "30", "method_NToken": "1094", "method_nesting_level": "3"}}}}}, "file_10": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "src\\storage\\pooled_storage_manager.h", "file_new_name": "src\\storage\\pooled_storage_manager.h", "file_complexity": {"file_NLOC": "222", "file_CCN": "51", "file_NToken": "1607"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "88", "deleted_lines": null, "method_info": {"method_name": "mxnet::storage::GPUPooledStorageManager::DirectFreeNoLock", "method_params": "handle", "method_startline": "86", "method_endline": "94", "method_complexity": {"method_NLOC": "8", "method_CCN": "3", "method_NToken": "59", "method_nesting_level": "3"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "157", "deleted_lines": null, "method_info": {"method_name": "mxnet::storage::GPUPooledStorageManager::Free", "method_params": "handle", "method_startline": "155", "method_endline": "160", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "63", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "60,61,62,63,64", "deleted_lines": null, "method_info": {"method_name": "mxnet::storage::GPUPooledStorageManager::GPUPooledStorageManager", "method_params": "", "method_startline": "57", "method_endline": "69", "method_complexity": {"method_NLOC": "13", "method_CCN": "3", "method_NToken": "90", "method_nesting_level": "3"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "97,98,99,100", "deleted_lines": null, "method_info": {"method_name": "mxnet::storage::GPUPooledStorageManager::RoundToMultiple", "method_params": "x,multiple", "method_startline": "97", "method_endline": "100", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "30", "method_nesting_level": "3"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "102,103,104,105,106,107,108,109,110,111", "deleted_lines": "108", "method_info": {"method_name": "mxnet::storage::GPUPooledStorageManager::RoundAllocSize", "method_params": "size", "method_startline": "102", "method_endline": "111", "method_complexity": {"method_NLOC": "6", "method_CCN": "2", "method_NToken": "36", "method_nesting_level": "3"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "132", "deleted_lines": "133", "method_info": {"method_name": "mxnet::storage::GPUPooledStorageManager::Alloc", "method_params": "handle", "method_startline": "130", "method_endline": "153", "method_complexity": {"method_NLOC": "23", "method_CCN": "7", "method_NToken": "202", "method_nesting_level": "2"}}}}}, "file_11": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\python\\gpu\\test_gluon_gpu.py", "file_new_name": "tests\\python\\gpu\\test_gluon_gpu.py", "file_complexity": {"file_NLOC": "199", "file_CCN": "35", "file_NToken": "2230"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "254,255,256,257", "deleted_lines": null, "method_info": {"method_name": "test_large_models.tensor_size", "method_params": "big_tensor_bytes", "method_startline": "254", "method_endline": "257", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "27", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275", "deleted_lines": null, "method_info": {"method_name": "test_large_models", "method_params": "", "method_startline": "241", "method_endline": "275", "method_complexity": {"method_NLOC": "22", "method_CCN": "2", "method_NToken": "208", "method_nesting_level": "0"}}}}}}}}