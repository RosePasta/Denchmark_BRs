{"BR": {"BR_id": "17638", "BR_author": "ZheyuYe", "BRopenT": "2020-02-20T19:39:17Z", "BRcloseT": "2020-02-25T03:58:26Z", "BR_text": {"BRsummary": "[Numpy] unknown type_flag=7", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n A series of issues related to  occured afther the pull <denchmark-link:https://github.com/apache/incubator-mxnet/pull/17438>#17438</denchmark-link>\n  and <denchmark-link:https://github.com/apache/incubator-tvm/pull/4571/>#4571</denchmark-link>\n  in tvm. This is, after all, a serious problem that makes many of deep numpy's features unusable.\n Here is a simple error case.\n <denchmark-h:h3>Error Message</denchmark-h>\n \n <denchmark-code>---------------------------------------------------------------------------\n MXNetError                                Traceback (most recent call last)\n <ipython-input-2-48e3c90810f4> in <module>\n      17 foo = Foo()\n      18 foo.hybridize()\n ---> 19 out = foo(mx.np.ones((10,), ctx=mx.gpu()))\n \n ~/incubator-mxnet/python/mxnet/gluon/block.py in __call__(self, *args)\n     680             hook(self, args)\n     681 \n --> 682         out = self.forward(*args)\n     683 \n     684         for hook in self._forward_hooks.values():\n \n ~/incubator-mxnet/python/mxnet/gluon/block.py in forward(self, x, *args)\n    1175                                      'Find all contexts = {}'.format(ctx_set))\n    1176                 with ctx:\n -> 1177                     return self._call_cached_op(x, *args)\n    1178             with ctx:\n    1179                 try:\n \n ~/incubator-mxnet/python/mxnet/gluon/block.py in _call_cached_op(self, *args)\n    1022         cargs = [args_without_none[i] if is_arg else i.data()\n    1023                  for is_arg, i in self._cached_op_args]\n -> 1024         out = self._cached_op(*cargs)\n    1025         if isinstance(out, NDArray):\n    1026             out = [out]\n \n ~/incubator-mxnet/python/mxnet/_ctypes/ndarray.py in __call__(self, *args, **kwargs)\n     167             ctypes.byref(num_output),\n     168             ctypes.byref(output_vars),\n --> 169             ctypes.byref(out_stypes)))\n     170 \n     171         if original_output is not None:\n \n ~/incubator-mxnet/python/mxnet/base.py in check_call(ret)\n     244     \"\"\"\n     245     if ret != 0:\n --> 246         raise get_last_ffi_error()\n     247 \n     248 \n \n MXNetError: Traceback (most recent call last):\n   File \"../src/nnvm/plan_memory.cc\", line 58\n MXNetError: unknown type_flag=7\n </denchmark-code>\n \n <denchmark-h:h2>To Reproduce</denchmark-h>\n \n <denchmark-code>import mxnet as mx\n import numpy as np\n from numpy.testing import assert_allclose\n from mxnet.gluon import HybridBlock\n mx.npx.set_np()\n \n class Foo(HybridBlock):\n     def __init__(self, prefix=None, params=None):\n         super(Foo, self).__init__(prefix=prefix, params=params)\n \n     def hybrid_forward(self, F, valid_length):\n         mask = (F.np.ones((10,)) < valid_length).astype(np.float32)\n         mask2 = (F.np.ones((10,)) < valid_length).astype(np.float32)\n         mask = mask * F.np.expand_dims(mask2, axis=-1)\n         return mask\n \n foo = Foo()\n foo.hybridize()\n out = foo(mx.np.ones((10,), ctx=mx.gpu()))\n </denchmark-code>\n \n <denchmark-h:h2>Comments</denchmark-h>\n \n <denchmark-link:https://github.com/sxjscience>@sxjscience</denchmark-link>\n  <denchmark-link:https://github.com/yzhliu>@yzhliu</denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ZheyuYe", "commentT": "2020-02-20T21:24:56Z", "comment_text": "\n \t\tlooking into it. thanks for reporting.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ZheyuYe", "commentT": "2020-02-20T21:34:45Z", "comment_text": "\n \t\tI find it could be further simplified:\n import mxnet as mx\n import numpy as np\n from numpy.testing import assert_allclose\n from mxnet.gluon import HybridBlock\n mx.npx.set_np()\n \n class Foo(HybridBlock):\n     def __init__(self, prefix=None, params=None):\n         super(Foo, self).__init__(prefix=prefix, params=params)\n \n     def hybrid_forward(self, F, valid_length):\n         mask = (F.np.ones((10,)) < valid_length).astype(np.float32)\n         return mask\n \n foo = Foo()\n foo.hybridize()\n out = foo(mx.np.ones((10,), ctx=mx.gpu()))\n print(out)\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "ZheyuYe", "commentT": "2020-02-20T22:07:37Z", "comment_text": "\n \t\timport mxnet as mx\n import numpy as np\n import os\n from numpy.testing import assert_allclose\n from mxnet.gluon import HybridBlock\n mx.npx.set_np()\n \n os.environ['DMLC_LOG_STACK_TRACE_DEPTH'] = '30'\n \n class Foo(HybridBlock):\n     def __init__(self, prefix=None, params=None):\n         super(Foo, self).__init__(prefix=prefix, params=params)\n \n     def hybrid_forward(self, F, valid_length):\n         mask = (F.np.ones((10,)) < valid_length).astype(np.float32)\n         return mask\n \n foo = Foo()\n foo.hybridize()\n out = foo(mx.np.ones((10,), ctx=mx.gpu()))\n print(out)\n <denchmark-code>MXNetError: Traceback (most recent call last):\n   [bt] (12) libmxnet.so(MXInvokeCachedOpEx+0x60) [0x7fce362ab420]\n   [bt] (11) libmxnet.so(MXInvokeCachedOp+0x42e) [0x7fce362aad4e]\n   [bt] (10) libmxnet.so(mxnet::CachedOp::Forward(std::shared_ptr<mxnet::CachedOp> const&, std::vector<mxnet::NDArray*, std::allocator<mxnet::NDArray*> > const&, std::vector<mxnet::NDArray*, std::allocator<mxnet::NDArray*> > const&)+0xc77) [0x7fce36421d27]\n   [bt] (9) libmxnet.so(mxnet::CachedOp::DynamicForward(mxnet::Context const&, std::vector<mxnet::NDArray*, std::allocator<mxnet::NDArray*> > const&, std::vector<mxnet::NDArray*, std::allocator<mxnet::NDArray*> > const&, bool)+0x20c) [0x7fce3641973c]\n   [bt] (8) libmxnet.so(mxnet::CachedOp::SetForwardGraph(mxnet::CachedOp::GraphInfo*, bool, std::vector<mxnet::NDArray*, std::allocator<mxnet::NDArray*> > const&)+0x965) [0x7fce36418525]\n   [bt] (7) libmxnet.so(mxnet::imperative::MXPlanMemory(nnvm::Graph*, std::vector<int, std::allocator<int> >&&, std::vector<unsigned int, std::allocator<unsigned int> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::pair<unsigned int, unsigned int> const&, std::pair<unsigned int, unsigned int> const&, bool)+0x1e8) [0x7fce3642f598]\n   [bt] (6) libmxnet.so(nnvm::ApplyPass(nnvm::Graph, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x213) [0x7fce362d0ab3]\n   [bt] (5) libmxnet.so(nnvm::ApplyPasses(nnvm::Graph, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0xecd) [0x7fce3a0b87bd]\n   [bt] (4) libmxnet.so(std::_Function_handler<nnvm::Graph (nnvm::Graph), nnvm::Graph (*)(nnvm::Graph)>::_M_invoke(std::_Any_data const&, nnvm::Graph&&)+0x10a) [0x7fce365e6b9a]\n   [bt] (3) libmxnet.so(+0x1f279d0) [0x7fce366169d0]\n   [bt] (2) libmxnet.so(+0x1f26a6e) [0x7fce36615a6e]\n   [bt] (1) libmxnet.so(+0x1f2424d) [0x7fce3661324d]\n   [bt] (0) libmxnet.so(dmlc::LogMessageFatal::~LogMessageFatal()+0x72) [0x7fce3622b982]\n   File \"../src/nnvm/plan_memory.cc\", line 58\n MXNetError: unknown type_flag=7\n </denchmark-code>\n \n \t\t"}}}, "commit": {"commit_id": "31144c763bfd0fe199b7fe0f23a20555c9731e7a", "commit_author": "reminisce", "commitT": "2020-02-24 19:58:25-08:00", "commit_complexity": {"commit_NLOC": "0.9411764705882353", "commit_CCN": "0.9411764705882353", "commit_Nprams": "0.7058823529411765"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\nnvm\\plan_memory.cc", "file_new_name": "src\\nnvm\\plan_memory.cc", "file_complexity": {"file_NLOC": "305", "file_CCN": "87", "file_NToken": "2617"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "41,42,43,45,46,47,48,50,51,52,54,55,56", "deleted_lines": "41,42,44,45,46,47,49,50,51,53,54,55", "method_info": {"method_name": "nnvm::pass::MXGetDTypeSize", "method_params": "type_flag", "method_startline": "39", "method_endline": "62", "method_complexity": {"method_NLOC": "24", "method_CCN": "14", "method_NToken": "107", "method_nesting_level": "3"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "tests\\python\\unittest\\test_numpy_gluon.py", "file_new_name": "tests\\python\\unittest\\test_numpy_gluon.py", "file_complexity": {"file_NLOC": "315", "file_CCN": "69", "file_NToken": "3271"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422", "deleted_lines": null, "method_info": {"method_name": "test_hybridize_boolean_dtype", "method_params": "", "method_startline": "405", "method_endline": "422", "method_complexity": {"method_NLOC": "11", "method_CCN": "1", "method_NToken": "79", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "410,411,412", "deleted_lines": null, "method_info": {"method_name": "test_hybridize_boolean_dtype.hybrid_forward", "method_params": "self,F,valid_length", "method_startline": "410", "method_endline": "412", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "32", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "407,408", "deleted_lines": null, "method_info": {"method_name": "test_hybridize_boolean_dtype.__init__", "method_params": "self,prefix,params", "method_startline": "407", "method_endline": "408", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "30", "method_nesting_level": "2"}}}}}}}}