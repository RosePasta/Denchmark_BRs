{"BR": {"BR_id": "12061", "BR_author": "StOnEGiggity", "BRopenT": "2018-08-07T08:43:33Z", "BRcloseT": "2018-09-27T16:12:02Z", "BR_text": {"BRsummary": "Mxnet 1.3 Bug : Prelu activation compution fault in expand_shape function", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n when input shape of prelu layer meets the condition where the height or the width of input is the same as channel, like shape (1, 64, 64, 128), it will cause broadcast multiply in the third dimension. There may be wrong in \n \n \n incubator-mxnet/src/operator/leaky_relu-inl.h\n \n \n         Lines 287 to 289\n       in\n       9dd5edd\n \n \n \n \n \n \n  if (s >= 0 && (dst[i] == src[s] || src[s] == 1)) { \n \n \n \n    result[i] = src[s]; \n \n \n \n    s--; \n \n \n \n \n \n <denchmark-h:h2>Environment info (Required)</denchmark-h>\n \n ----------Python Info----------\n Version      : 3.5.2\n Compiler     : GCC 5.4.0 20160609\n Build        : ('default', 'Nov 23 2017 16:37:01')\n Arch         : ('64bit', 'ELF')\n ------------Pip Info-----------\n Version      : 8.1.1\n Directory    : /usr/lib/python3/dist-packages/pip\n ----------MXNet Info-----------\n Version      : 1.3.0\n Directory    : /mnt/truenas/scratch/tianqi.tang/incubator-mxnet-syncbn/python/mxnet\n Hashtag not found. Not installed from pre-built package.\n ----------System Info----------\n Platform     : Linux-4.4.0-116-generic-x86_64-with-Ubuntu-16.04-xenial\n system       : Linux\n node         : rnd-coco\n release      : 4.4.0-116-generic\n version      : <denchmark-link:https://github.com/apache/incubator-mxnet/pull/140>#140</denchmark-link>\n -Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018\n ----------Hardware Info----------\n machine      : x86_64\n processor    : x86_64\n Architecture:          x86_64\n CPU op-mode(s):        32-bit, 64-bit\n Byte Order:            Little Endian\n CPU(s):                48\n On-line CPU(s) list:   0-47\n Thread(s) per core:    2\n Core(s) per socket:    12\n Socket(s):             2\n NUMA node(s):          2\n Vendor ID:             GenuineIntel\n CPU family:            6\n Model:                 63\n Model name:            Intel(R) Xeon(R) CPU E5-2670 v3 @ 2.30GHz\n Stepping:              2\n CPU MHz:               2599.988\n CPU max MHz:           3100.0000\n CPU min MHz:           1200.0000\n BogoMIPS:              4601.31\n Virtualization:        VT-x\n Hypervisor vendor:     vertical\n Virtualization type:   full\n L1d cache:             32K\n L1i cache:             32K\n L2 cache:              256K\n L3 cache:              30720K\n NUMA node0 CPU(s):     0-11,24-35\n NUMA node1 CPU(s):     12-23,36-47\n Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm epb invpcid_single retpoline kaiser tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm xsaveopt cqm_llc cqm_occup_llc dtherm ida arat pln pts\n ----------Network Test----------\n Setting timeout: 10\n Timing for FashionMNIST: <denchmark-link:https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/dataset/fashion-mnist/train-labels-idx1-ubyte.gz>https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/dataset/fashion-mnist/train-labels-idx1-ubyte.gz</denchmark-link>\n , DNS: 0.0157 sec, LOAD: 1.2276 sec.\n Timing for Gluon Tutorial(en): <denchmark-link:http://gluon.mxnet.io>http://gluon.mxnet.io</denchmark-link>\n , DNS: 0.0702 sec, LOAD: 1.7148 sec.\n Timing for Gluon Tutorial(cn): <denchmark-link:https://zh.gluon.ai>https://zh.gluon.ai</denchmark-link>\n , DNS: 0.0169 sec, LOAD: 0.9205 sec.\n Timing for MXNet: <denchmark-link:https://github.com/apache/incubator-mxnet>https://github.com/apache/incubator-mxnet</denchmark-link>\n , DNS: 0.0086 sec, LOAD: 2.3017 sec.\n Timing for Conda: <denchmark-link:https://repo.continuum.io/pkgs/free/>https://repo.continuum.io/pkgs/free/</denchmark-link>\n , DNS: 0.0086 sec, LOAD: 0.7714 sec.\n Timing for PYPI: <denchmark-link:https://pypi.python.org/pypi/pip>https://pypi.python.org/pypi/pip</denchmark-link>\n , DNS: 0.0167 sec, LOAD: 3.6228 sec.\n <denchmark-h:h2>Minimum reproducible example</denchmark-h>\n \n <denchmark-code>import mxnet as mx                                                                                                                                                                                                 \n print(mx.__version__)                                                                                                                                                                                              \n import numpy as np                                                                                                                                                                                                                                                                                                                                                                                                                     \n RELU3 = mx.symbol.LeakyReLU                                                                                                                                                                                                                                                                                                                                                                         \n gamma=np.random.normal(size=(64,))                                                                                                                                                                                \n print('gamma',gamma)                                                                                                                                                                                               \n gamma=mx.nd.array(gamma, ctx=mx.gpu(7))                                                                                                                                                                            \n def single_dev_consist():                                                                                                                                                                                         \n      data = mx.sym.var(\"data\")                                                                                                                                                                                      \n      leaky_gamma = mx.sym.var(\"prelu3_gamma\")                                                                                                                                                                                                                                                                                                                                                                                       \n      relu3 = RELU3(name='prelu3', act_type='prelu', data=data, gamma=leaky_gamma)                                                                                                                                   \n      relu3_exe = relu3.simple_bind(mx.gpu(7), data=(1,64,64,128))                                                                                                                                                                                                                        \n      d = mx.nd.array(np.random.normal(size=(1,64,64,128)), ctx=mx.gpu(7))                                                                                                                                                                                                                                                                                                          \n      print('data', d[0, :, 0, 0])                                                                                                                                                                                   \n      relu3_exe.forward(is_train=False, data=d, prelu3_gamma=gamma)                                                                                                                                                  \n      output1 = relu3_exe.outputs[0].asnumpy()                                                                                                                                                                                                                                                                                                                                           \n      print('output',output1[0,:,0,0])                                                                                                                                                                               \n      print(\"\\n\")                                                                                                                                                                                                    \n \n if __name__ == \"__main__\":                                                                                                                                                                                         \n      single_dev_consist()                 \n </denchmark-code>\n \n <denchmark-h:h2>What have you tried to solve it?</denchmark-h>\n \n \n one naive solution is to specify the 2nd dimension, like\n (s >= 0 && i == 1 && (dst[i] == src[s] || src[s] == 1)\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "StOnEGiggity", "commentT": "2018-08-07T16:36:18Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/StOnEGiggity>@StOnEGiggity</denchmark-link>\n  thanks for your issues and pointing out the operator, we will start looking into this. <denchmark-link:https://github.com/haojin2>@haojin2</denchmark-link>\n  <denchmark-link:https://github.com/eric-haibin-lin>@eric-haibin-lin</denchmark-link>\n \n <denchmark-link:https://github.com/mxnet-label-bot>@mxnet-label-bot</denchmark-link>\n  could you please add [Bug, operator] here?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "StOnEGiggity", "commentT": "2018-09-12T18:26:16Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/StOnEGiggity>@StOnEGiggity</denchmark-link>\n  if you already identified the root cause and knew the fix, would you mind making the change directly and contribute to this repository? If so, we are more than happy to review your pull request. but also please don't feel obliged :)\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "StOnEGiggity", "commentT": "2018-09-27T16:06:32Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/sandeep-krishnamurthy>@sandeep-krishnamurthy</denchmark-link>\n  <denchmark-link:https://github.com/anirudh2290>@anirudh2290</denchmark-link>\n  This issue has been fixed by the requester. Please close it. Thanks!\n \t\t"}}}, "commit": {"commit_id": "40e3d9c1dde2a803ccd0fa165a09f9c3ded6a121", "commit_author": "TianqiTang", "commitT": "2018-09-27 00:15:59-07:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "0.0", "commit_Nprams": "0.38461538461538464"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\operator\\leaky_relu-inl.h", "file_new_name": "src\\operator\\leaky_relu-inl.h", "file_complexity": {"file_NLOC": "419", "file_CCN": "67", "file_NToken": "3815"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "304", "deleted_lines": "304", "method_info": {"method_name": "mxnet::op::LeakyReLUOp::expand_shape", "method_params": "src,dst", "method_startline": "300", "method_endline": "313", "method_complexity": {"method_NLOC": "14", "method_CCN": "6", "method_NToken": "134", "method_nesting_level": "3"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "tests\\python\\unittest\\test_operator.py", "file_new_name": "tests\\python\\unittest\\test_operator.py", "file_complexity": {"file_NLOC": "5756", "file_CCN": "930", "file_NToken": "71871"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "775,776,777,778,779,780,785,786,787,788,789,794,796,797,800,802,803,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829", "deleted_lines": "775,780,785,789,792,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816", "method_info": {"method_name": "test_prelu", "method_params": "", "method_startline": "771", "method_endline": "829", "method_complexity": {"method_NLOC": "27", "method_CCN": "5", "method_NToken": "438", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "775,776,777,778,779,780", "deleted_lines": "775,780", "method_info": {"method_name": "test_prelu.fprelu", "method_params": "x,gamma", "method_startline": "772", "method_endline": "782", "method_complexity": {"method_NLOC": "11", "method_CCN": "2", "method_NToken": "90", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "785,786,787,788,789,794,796,797,800,802,803", "deleted_lines": "785,789,792,795,796,797,798,799,800,801,802,803,804", "method_info": {"method_name": "test_prelu.fprelu_grad", "method_params": "x,y,gamma", "method_startline": "783", "method_endline": "804", "method_complexity": {"method_NLOC": "22", "method_CCN": "11", "method_NToken": "272", "method_nesting_level": "1"}}}}}}}}