{"BR": {"BR_id": "18132", "BR_author": "sxjscience", "BRopenT": "2020-04-22T02:04:16Z", "BRcloseT": "2020-04-24T05:09:13Z", "BR_text": {"BRsummary": "[Numpy] np.split will trigger an error", "BRdescription": "\n Minimal reproducible example:\n import mxnet as mx\n mx.npx.set_np()\n a = mx.np.ones((10, 10, 3))\n mx.np.split(a, 3, axis=-1)\n Error message\n <denchmark-code>MXNetError                                Traceback (most recent call last)\n <ipython-input-20-31fd4ac7e489> in <module>\n ----> 1 mx.np.split(a, 3, axis=-1)\n \n ~/mxnet/python/mxnet/numpy/multiarray.py in split(ary, indices_or_sections, axis)\n    5835     [array([0., 1., 2.]), array([3., 4.]), array([5.]), array([6., 7.]), array([])]\n    5836     \"\"\"\n -> 5837     return _mx_nd_np.split(ary, indices_or_sections, axis=axis)\n    5838 \n    5839 \n \n ~/mxnet/python/mxnet/ndarray/numpy/_op.py in split(ary, indices_or_sections, axis)\n    3905     if isinstance(indices_or_sections, set):\n    3906         indices_or_sections = list(indices_or_sections)\n -> 3907     return list(_api_internal.split(ary, indices_or_sections, axis))\n    3908 # pylint: enable=redefined-outer-name\n    3909 \n \n ~/mxnet/python/mxnet/_ffi/_ctypes/function.py in __call__(self, *args)\n     113                 self.handle, values, tcodes, ctypes.c_int(num_args),\n     114                 ctypes.byref(ret_val), ctypes.byref(ret_tcode)) != 0:\n --> 115             raise get_last_ffi_error()\n     116         _ = temp_args\n     117         _ = args\n \n MXNetError: Traceback (most recent call last):\n   File \"../include/mxnet/./tuple.h\", line 245\n MXNetError: Check failed: i >= 0 && i < ndim(): index = -1 must be in range [0, 3)\n </denchmark-code>\n \n Just use numpy won't have any error.\n <denchmark-code>import numpy as np\n a = np.ones((10, 10, 3))\n np.split(a, 3, axis=-1)\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "sxjscience", "commentT": "2020-04-22T05:46:32Z", "comment_text": "\n \t\tThe  should have been canonicalized in backend. <denchmark-link:https://github.com/hzfan>@hzfan</denchmark-link>\n  Can you get it fixed?\n \n \n \n incubator-mxnet/src/api/operator/numpy/np_matrix_op.cc\n \n \n         Lines 142 to 149\n       in\n       6a809aa\n \n \n \n \n \n \n  param.axis = args[2].operator int(); \n \n \n \n  param.squeeze_axis = false; \n \n \n \n  if (args[1].type_code() == kDLInt) { \n \n \n \n    param.indices = TShape(0, 0); \n \n \n \n    param.sections = args[1].operator int(); \n \n \n \n  CHECK_GT(param.sections, 0) \n \n \n \n      << \"ValueError: number sections must be larger than 0\"; \n \n \n \n  CHECK_EQ(inputs[0]->shape()[param.axis] % param.sections, 0) \n \n \n \n \n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "sxjscience", "commentT": "2020-04-22T05:51:11Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/reminisce>@reminisce</denchmark-link>\n   I will fix it. Thanks for the deep dive.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "sxjscience", "commentT": "2020-04-22T05:59:55Z", "comment_text": "\n \t\tSeems these checks in ffi is redundant? The logic is already in FCompute function.\n \t\t"}}}, "commit": {"commit_id": "71a7b5d5c918b07a6afde858ffc74e90f65173bd", "commit_author": "Yiyan66", "commitT": "2020-04-23 11:50:49-07:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\api\\operator\\numpy\\np_matrix_op.cc", "file_new_name": "src\\api\\operator\\numpy\\np_matrix_op.cc", "file_complexity": {"file_NLOC": "423", "file_CCN": "0", "file_NToken": "4026"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "147,148,149,152", "deleted_lines": "149"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\python\\unittest\\test_numpy_interoperability.py", "file_new_name": "tests\\python\\unittest\\test_numpy_interoperability.py", "file_complexity": {"file_NLOC": "2535", "file_CCN": "452", "file_NToken": "34707"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "348", "deleted_lines": null, "method_info": {"method_name": "_add_workload_split", "method_params": "", "method_startline": "345", "method_endline": "349", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "87", "method_nesting_level": "0"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\python\\unittest\\test_numpy_op.py", "file_new_name": "tests\\python\\unittest\\test_numpy_op.py", "file_complexity": {"file_NLOC": "7877", "file_CCN": "1860", "file_NToken": "88314"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "2941", "deleted_lines": "2941", "method_info": {"method_name": "test_np_split", "method_params": "", "method_startline": "2919", "method_endline": "2967", "method_complexity": {"method_NLOC": "29", "method_CCN": "9", "method_NToken": "350", "method_nesting_level": "0"}}}}}}}}