{"BR": {"BR_id": "11084", "BR_author": "GokawaHaruki", "BRopenT": "2018-05-29T07:12:50Z", "BRcloseT": "2018-08-18T00:23:47Z", "BR_text": {"BRsummary": "Undefined Behavior of mx.sym.where with shape-mismatched cond", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n mx.sym.where(cond, x, y) still functions, given shape-mismatched cond. Would it be more reasonable if we raise a shape mismatched error?\n Related API: <denchmark-link:http://mxnet.incubator.apache.org/versions/1.2.0/api/python/symbol/symbol.html?highlight=mxnet.symbol.where#mxnet.symbol.where>http://mxnet.incubator.apache.org/versions/1.2.0/api/python/symbol/symbol.html?highlight=mxnet.symbol.where#mxnet.symbol.where</denchmark-link>\n \n <denchmark-h:h2>Environment info</denchmark-h>\n \n mxnet-cu90==1.2.0\n <denchmark-h:h2>Minimum reproducible example</denchmark-h>\n \n import mxnet as mx\n \n cond = mx.sym.Variable('cond')\n x = mx.sym.Variable('x')\n y = mx.sym.Variable('y')\n out = mx.sym.where(cond, x, y)\n test = lambda c: out.eval(x=mx.nd.array([[2,3],[4,5],[6,7]]), y=mx.nd.array([[8,9],[10,11],[12,13]]), cond=mx.nd.array(c))\n \n print(test([[1, 0], [1, 0], [0, 0]]))  #1. [[2,9],[4,11],[12,13]], as expected.\n print(test([1, 0, 1, 0, 0, 0]))        #2. [[2,9],[4,11],[12,13]], undefined. Seems correct at least.\n print(test([1, 0, 1, 0]))              #3. [[2,9],[4,11],[12,13]], undefined. Automatically adding trailing zeros?\n \n print(test([[1, 1], [1, 0], [0, 0]]))  #4. [[2,3],[4,11],[12,13]], as expected.\n print(test([[1, 1, 1], [0, 0, 0]]))    #5. [[2,3],[4,11],[12,13]], undefined. Automatically reshaping?\n print(test([1, 0]))                    #6. [[2,3],[4,11],[12,13]], undefined. Automatically repeating?\n \n print(test([1, 0, 1]))                 #7. [[2,3],[10,11],[6,7]], as expected.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "GokawaHaruki", "commentT": "2018-05-29T07:42:39Z", "comment_text": "\n \t\tPerhaps the root is here?\n \n Call where_batch with M = x.Size()/cond.Size() if given shape-mismatched cond:\n https://github.com/apache/incubator-mxnet/blob/v1.2.0/src/operator/tensor/control_flow_op.h#L297\n Perform KERNEL_ASSIGN(out[i], req, (0 != cond[i/M]? x[i] : y[i]));, which results in automatic reshaping and repeating.\n https://github.com/apache/incubator-mxnet/blob/v1.2.0/src/operator/tensor/control_flow_op.h#L97\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "GokawaHaruki", "commentT": "2018-05-29T07:50:21Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/GokawaHaruki>@GokawaHaruki</denchmark-link>\n  I think the problem is  will only create one executor. The code will raise an error if it's written this way:\n import mxnet as mx\n \n cond = mx.sym.Variable('cond')\n x = mx.sym.Variable('x')\n y = mx.sym.Variable('y')\n out = mx.sym.where(cond, x, y)\n test = lambda c: mx.nd.where(mx.nd.array(c), mx.nd.array([[2,3],[4,5],[6,7]]), mx.nd.array([[8,9],[10,11],[12,13]]))\n \n print(test([[1, 0], [1, 0], [0, 0]]))  #1. [[2,9],[4,11],[12,13]], as expected.\n print(test([1, 0, 1, 0, 0, 0]))        #2. raise error\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "GokawaHaruki", "commentT": "2018-05-29T07:58:21Z", "comment_text": "\n \t\tIt is still a bug as the shape checking logic is not triggered.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "GokawaHaruki", "commentT": "2018-08-14T19:49:07Z", "comment_text": "\n \t\tI have created a JIRA <denchmark-link:https://issues.apache.org/jira/browse/MXNET-806>https://issues.apache.org/jira/browse/MXNET-806</denchmark-link>\n  to track this bug and am working on it this week.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "GokawaHaruki", "commentT": "2018-08-18T00:23:47Z", "comment_text": "\n \t\tResolving as the fix is merged.\n \t\t"}}}, "commit": {"commit_id": "54af0ccabaceb19b60e69fdafd2975142a9018ef", "commit_author": "Lin Yuan", "commitT": "2018-08-17 17:23:18-07:00", "commit_complexity": {"commit_NLOC": "0.8461538461538461", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\operator\\tensor\\control_flow_op.h", "file_new_name": "src\\operator\\tensor\\control_flow_op.h", "file_complexity": {"file_NLOC": "370", "file_CCN": "69", "file_NToken": "3564"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "191", "deleted_lines": "191", "method_info": {"method_name": "mxnet::op::WhereOpShape", "method_params": "attrs,in_attrs,out_attrs", "method_startline": "172", "method_endline": "194", "method_complexity": {"method_NLOC": "21", "method_CCN": "6", "method_NToken": "249", "method_nesting_level": "2"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\python\\unittest\\test_operator.py", "file_new_name": "tests\\python\\unittest\\test_operator.py", "file_complexity": {"file_NLOC": "5712", "file_CCN": "935", "file_NToken": "71615"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488", "deleted_lines": "4486", "method_info": {"method_name": "test_where.test_invalid_shape", "method_params": "", "method_startline": "4476", "method_endline": "4488", "method_complexity": {"method_NLOC": "11", "method_CCN": "1", "method_NToken": "218", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4500", "deleted_lines": "4486", "method_info": {"method_name": "test_where", "method_params": "", "method_startline": "4352", "method_endline": "4500", "method_complexity": {"method_NLOC": "20", "method_CCN": "1", "method_NToken": "139", "method_nesting_level": "0"}}}}}}}}