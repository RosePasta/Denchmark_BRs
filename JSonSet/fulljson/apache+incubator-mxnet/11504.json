{"BR": {"BR_id": "11504", "BR_author": "Neutron3529", "BRopenT": "2018-06-30T00:25:48Z", "BRcloseT": "2018-07-02T15:45:06Z", "BR_text": {"BRsummary": "Callback's bug with very fast speed.", "BRdescription": "\n <denchmark-code>INFO:root:Epoch[0] Batch [1]    Speed: 323135.90 samples/sec    accuracy=0.102800\n INFO:root:Epoch[0] Batch [2]    Speed: 641232.84 samples/sec    accuracy=0.109800\n Traceback (most recent call last):\n   File \"<stdin>\", line 7, in <module>\n   File \"d:\\program files\\python37\\lib\\site-packages\\mxnet\\module\\base_module.py\", line 533, in fit\n     callback(batch_end_params)\n   File \"d:\\program files\\python37\\lib\\site-packages\\mxnet\\callback.py\", line 159, in __call__\n     speed = self.frequent * self.batch_size / (time.time() - self.tic)\n </denchmark-code>\n \n ZeroDivisionError: float division by zero\n it seems that time.time may not always return different result, which cause a division by zero exception.\n <denchmark-code>>>> [time.time() for i in range(100000)][0::99999]\n [1530318107.497374, 1530318107.497374]\n >>> [time.time() for i in range(100000)][0::99999]\n [1530318108.5909886, 1530318108.6061418]\n </denchmark-code>\n \n maybe use\n <denchmark-code>speed = self.frequent * self.batch_size / (time.time() - self.tic+1e-38)\n </denchmark-code>\n \n will be better, or mxnet should use a high performance timer rather than time.time\n for example, using time.perf_counter_ns may be better\n <denchmark-code>>>> [time.perf_counter_ns() for i in range(10)]\n [751763884032, 751763884495, 751763884959, 751763884959, 751763885423, 751763885887, 751763885887, 751763886351, 751763886351, 751763886814]\n </denchmark-code>\n \n \t"}, "comments": {}}, "commit": {"commit_id": "6bdd9227c1f0be8f38465a36ac3e8eb2ec53a0fd", "commit_author": "Pedro Larroy", "commitT": "2018-07-02 09:43:57-07:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "0.5", "commit_Nprams": "0.5"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\mxnet\\callback.py", "file_new_name": "python\\mxnet\\callback.py", "file_complexity": {"file_NLOC": "116", "file_CCN": "25", "file_NToken": "625"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "159,160,161,162,163", "deleted_lines": "159", "method_info": {"method_name": "__call__", "method_params": "self,param", "method_startline": "150", "method_endline": "177", "method_complexity": {"method_NLOC": "25", "method_CCN": "7", "method_NToken": "180", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\mxnet\\notebook\\callback.py", "file_new_name": "python\\mxnet\\notebook\\callback.py", "file_complexity": {"file_NLOC": "243", "file_CCN": "50", "file_NToken": "1624"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "168,169,170,171,172", "deleted_lines": "168", "method_info": {"method_name": "_process_batch", "method_params": "self,param,dataframe", "method_startline": "155", "method_endline": "179", "method_complexity": {"method_NLOC": "18", "method_CCN": "3", "method_NToken": "129", "method_nesting_level": "1"}}}}}}}}