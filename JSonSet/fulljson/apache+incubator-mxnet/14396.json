{"BR": {"BR_id": "14396", "BR_author": "YutingZhang", "BRopenT": "2019-03-12T01:47:10Z", "BRcloseT": "2019-03-20T16:23:02Z", "BR_text": {"BRsummary": "mx.nd.Custom not working in subprocess", "BRdescription": "\n mx.nd.Custom gets stuck at subprocess.\n The following code to replicate the error is from <denchmark-link:https://github.com/wkcn/MobulaOP/issues/40#issuecomment-471803878>wkcn/MobulaOP#40 (comment)</denchmark-link>\n \n from concurrent import futures\n \n import mxnet as mx\n import sys\n \n class AdditionOP(mx.operator.CustomOp):\n     def __init__(self):\n         super(AdditionOP, self).__init__()\n     def forward(self, is_train, req, in_data, out_data, aux):\n         out_data[0][:] = in_data[0] + in_data[1]\n     def backward(self, req, out_grad, in_data, out_data, in_grad, aux):\n         in_grad[0][:] = out_grad[0]\n         in_grad[1][:] = out_grad[0]\n \n @mx.operator.register(\"AdditionOP\")\n class AdditionOPProp(mx.operator.CustomOpProp):\n     def __init__(self):\n         super(AdditionOPProp, self).__init__()\n     def list_arguments(self):\n         return ['a', 'b']\n     def list_outputs(self):\n         return ['output']\n     def infer_shape(self, in_shape):\n         return in_shape, [in_shape[0]]\n     def create_operator(self, ctx, shapes, dtypes):\n         return AdditionOP()\n \n def foo():\n     a = mx.nd.array([1, 2, 3])\n     b = mx.nd.array([4, 5, 6])\n \n     a.attach_grad()\n     b.attach_grad()\n \n     print(\"REC\")\n     with mx.autograd.record():\n         c = mx.nd.Custom(a, b, op_type='AdditionOP')\n \n     dc = mx.nd.array([7, 8, 9])\n     c.backward(dc)\n \n     print('Okay :-)')\n     print('a + b = c \\n {} + {} = {}'.format(a.asnumpy(), b.asnumpy(), c.asnumpy()))\n \n def main():\n     ex = futures.ProcessPoolExecutor(1)\n     r = ex.submit(foo)\n     r.result()\n \n if __name__ == '__main__':\n     main()\n asnumpy gets stuck due to mx.nd.Custom\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "YutingZhang", "commentT": "2019-03-12T01:47:12Z", "comment_text": "\n \t\tHey, this is the MXNet Label Bot.\n Thank you for submitting the issue! I will try and suggest some labels so that the appropriate MXNet community members can help resolve it.\n Here are my recommended labels: Bug\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "YutingZhang", "commentT": "2019-03-12T02:12:42Z", "comment_text": "\n \t\tI found that the custom operator has been Engine::Get()->PushSync, but it couldn't be executed. (forward and backward).\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "YutingZhang", "commentT": "2019-03-12T11:24:47Z", "comment_text": "\n \t\tI rekon there's a limitation of custom op with requires a global lock when executing the python custom op, and it might cause dead lock when combined with subprocess.\n <denchmark-link:https://github.com/eric-haibin-lin>@eric-haibin-lin</denchmark-link>\n  raising for expertise in engine part.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "YutingZhang", "commentT": "2019-03-15T19:35:11Z", "comment_text": "\n \t\tYes this is because of the dead lock in the subprocess. One way to fix this is to create a start and stop functions in CustomOperator, which should be called from pthread_atfork prepare and child handlers.\n Using thread pool to manage CustomOperator threads would make the implementation cleaner. Anyone wants to try and create a PR for this ? <denchmark-link:https://github.com/wkcn>@wkcn</denchmark-link>\n  <denchmark-link:https://github.com/arcadiaphy>@arcadiaphy</denchmark-link>\n  <denchmark-link:https://github.com/YutingZhang>@YutingZhang</denchmark-link>\n  ?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "YutingZhang", "commentT": "2019-03-16T19:26:49Z", "comment_text": "\n \t\tAfter <denchmark-link:https://github.com/apache/incubator-mxnet/pull/14363>#14363</denchmark-link>\n , the threads is created  when running custom operator, so custom operator needs also to be executed in main process to reproduce the bug:\n <denchmark-code>from concurrent import futures\n \n import mxnet as mx\n import sys\n \n class AdditionOP(mx.operator.CustomOp):\n     def __init__(self):\n         super(AdditionOP, self).__init__()\n     def forward(self, is_train, req, in_data, out_data, aux):\n         out_data[0][:] = in_data[0] + in_data[1]\n     def backward(self, req, out_grad, in_data, out_data, in_grad, aux):\n         in_grad[0][:] = out_grad[0]\n         in_grad[1][:] = out_grad[0]\n \n @mx.operator.register(\"AdditionOP\")\n class AdditionOPProp(mx.operator.CustomOpProp):\n     def __init__(self):\n         super(AdditionOPProp, self).__init__()\n     def list_arguments(self):\n         return ['a', 'b']\n     def list_outputs(self):\n         return ['output']\n     def infer_shape(self, in_shape):\n         return in_shape, [in_shape[0]]\n     def create_operator(self, ctx, shapes, dtypes):\n         return AdditionOP()\n \n def foo():\n     a = mx.nd.array([1, 2, 3])\n     b = mx.nd.array([4, 5, 6])\n \n     a.attach_grad()\n     b.attach_grad()\n \n     print(\"REC\")\n     with mx.autograd.record():\n         c = mx.nd.Custom(a, b, op_type='AdditionOP')\n \n     dc = mx.nd.array([7, 8, 9])\n     c.backward(dc)\n \n     print('Okay :-)')\n     print('a + b = c \\n {} + {} = {}'.format(a.asnumpy(), b.asnumpy(), c.asnumpy()))\n \n def main():\n     foo()  # ensure custom threads created in main process\n     ex = futures.ProcessPoolExecutor(1)\n     r = ex.submit(foo)\n     r.result()\n \n if __name__ == '__main__':\n     main()\n </denchmark-code>\n \n \t\t"}}}, "commit": {"commit_id": "4b1811cce5933f5c9a6de2e930fa15d31e62bfcc", "commit_author": "Wang Jiajun", "commitT": "2019-03-20 09:23:01-07:00", "commit_complexity": {"commit_NLOC": "0.5384615384615384", "commit_CCN": "1.0", "commit_Nprams": "0.8653846153846154"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "docs\\tutorials\\gluon\\customop.md", "file_new_name": "docs\\tutorials\\gluon\\customop.md", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "33,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\c_api\\c_api.cc", "file_new_name": "src\\c_api\\c_api.cc", "file_complexity": {"file_NLOC": "1215", "file_CCN": "161", "file_NToken": "8543"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "114", "deleted_lines": null, "method_info": {"method_name": "MXNotifyShutdown", "method_params": "", "method_startline": "112", "method_endline": "117", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "39", "method_nesting_level": "0"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\initialize.cc", "file_new_name": "src\\initialize.cc", "file_complexity": {"file_NLOC": "50", "file_CCN": "6", "file_NToken": "297"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "57,60,65,78", "deleted_lines": null, "method_info": {"method_name": "mxnet::LibraryInitializer::LibraryInitializer", "method_params": "", "method_startline": "45", "method_endline": "81", "method_complexity": {"method_NLOC": "28", "method_CCN": "4", "method_NToken": "198", "method_nesting_level": "2"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "src\\operator\\custom\\custom-inl.h", "file_new_name": "src\\operator\\custom\\custom-inl.h", "file_complexity": {"file_NLOC": "158", "file_CCN": "34", "file_NToken": "1045"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "144,145,146,147,148,149,150,151", "deleted_lines": "150,151", "method_info": {"method_name": "mxnet::op::custom::CustomOperator::Start", "method_params": "", "method_startline": "144", "method_endline": "151", "method_complexity": {"method_NLOC": "8", "method_CCN": "2", "method_NToken": "45", "method_nesting_level": "4"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "166,167", "deleted_lines": null, "method_info": {"method_name": "mxnet::op::custom::CustomOperator::CustomOperator", "method_params": "", "method_startline": "166", "method_endline": "168", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "11", "method_nesting_level": "4"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "139,140,141,142,143,144,145,146,147,148", "deleted_lines": "139", "method_info": {"method_name": "mxnet::op::custom::CustomOperator::~CustomOperator", "method_params": "", "method_startline": "139", "method_endline": "148", "method_complexity": {"method_NLOC": "10", "method_CCN": "3", "method_NToken": "50", "method_nesting_level": "4"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "153,162", "deleted_lines": "153,154,155,156,157,158", "method_info": {"method_name": "mxnet::op::custom::CustomOperator::Stop", "method_params": "", "method_startline": "153", "method_endline": "163", "method_complexity": {"method_NLOC": "11", "method_CCN": "3", "method_NToken": "56", "method_nesting_level": "4"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "139,140,141,142", "deleted_lines": "139", "method_info": {"method_name": "mxnet::op::custom::CustomOperator::Get", "method_params": "", "method_startline": "139", "method_endline": "142", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "13", "method_nesting_level": "4"}}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\operator\\custom\\custom.cc", "file_new_name": "src\\operator\\custom\\custom.cc", "file_complexity": {"file_NLOC": "490", "file_CCN": "75", "file_NToken": "4925"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "37,38,39,40", "method_info": {"method_name": "mxnet::op::custom::CustomOperator::Get", "method_params": "", "method_startline": "37", "method_endline": "40", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "15", "method_nesting_level": "3"}}}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 9, "file_old_name": "tests\\python\\unittest\\test_operator.py", "file_new_name": "tests\\python\\unittest\\test_operator.py", "file_complexity": {"file_NLOC": "6324", "file_CCN": "1016", "file_NToken": "79493"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "5217,5218", "deleted_lines": null, "method_info": {"method_name": "test_custom_op.list_arguments", "method_params": "self", "method_startline": "5217", "method_endline": "5218", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "11", "method_nesting_level": "3"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "5223,5224", "deleted_lines": null, "method_info": {"method_name": "test_custom_op.create_operator", "method_params": "self,ctx,shapes,dtypes", "method_startline": "5223", "method_endline": "5224", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "15", "method_nesting_level": "3"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "5221,5222", "deleted_lines": null, "method_info": {"method_name": "test_custom_op.infer_shape", "method_params": "self,in_shape", "method_startline": "5221", "method_endline": "5222", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "16", "method_nesting_level": "3"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "5201,5202,5203,5204,5205,5206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5224,5225,5226,5227,5228,5229,5230,5231,5232,5233,5234,5235,5236,5237,5238", "deleted_lines": null, "method_info": {"method_name": "test_custom_op", "method_params": "", "method_startline": "5006", "method_endline": "5238", "method_complexity": {"method_NLOC": "116", "method_CCN": "3", "method_NToken": "1000", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "5226,5227,5228,5229,5230", "deleted_lines": null, "method_info": {"method_name": "test_custom_op.custom_add", "method_params": "", "method_startline": "5226", "method_endline": "5230", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "70", "method_nesting_level": "2"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "5205,5206", "deleted_lines": null, "method_info": {"method_name": "test_custom_op.__init__", "method_params": "self", "method_startline": "5205", "method_endline": "5206", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "15", "method_nesting_level": "3"}}}, "hunk_6": {"Ismethod": 1, "added_lines": "5209,5210,5211", "deleted_lines": null, "method_info": {"method_name": "test_custom_op.backward", "method_params": "self,req,out_grad,in_data,out_data,in_grad,aux", "method_startline": "5209", "method_endline": "5211", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "41", "method_nesting_level": "3"}}}, "hunk_7": {"Ismethod": 1, "added_lines": "5219,5220", "deleted_lines": null, "method_info": {"method_name": "test_custom_op.list_outputs", "method_params": "self", "method_startline": "5219", "method_endline": "5220", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "9", "method_nesting_level": "3"}}}, "hunk_8": {"Ismethod": 1, "added_lines": "5207,5208", "deleted_lines": null, "method_info": {"method_name": "test_custom_op.forward", "method_params": "self,is_train,req,in_data,out_data,aux", "method_startline": "5207", "method_endline": "5208", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "32", "method_nesting_level": "3"}}}}}}}}