{"BR": {"BR_id": "10146", "BR_author": "xiehust", "BRopenT": "2018-03-18T06:40:10Z", "BRcloseT": "2018-04-23T19:23:42Z", "BR_text": {"BRsummary": "why the gluon.nn.embedding always return float32? seems cannot chang to float64.", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n (Brief description of the problem in no more than 2 sentences.)\n I am using gluon.nn.embedding in my block, but it always return the output with dtype 'float32', thus it prevents me from concat another vector which has dtype 'float64'. Event if I set the dtype 'float64' or np.float64, it still doesn't work, and always output float32 value.\n <denchmark-h:h2>Environment info (Required)</denchmark-h>\n \n windows 10\n mxnet:'1.1.0' build 20180213\n <denchmark-code>code:\n class Net(gluon.Block):\n     def __init__(self, **kwargs):\n         super(Net, self).__init__(**kwargs)\n         with self.name_scope():\n             # layers created in name_scope will inherit name space\n             # from parent layer.\n             self.tag1embedding = gluon.nn.Embedding(input_dim=tagdim,output_dim=output_dim,dtype=np.float64)\n             self.dense1 = gluon.nn.Dense(1)\n \n     def forward(self, x):\n         b = self.tag1embedding(x[1])\n         print (b.dtype)\n         print (x[0].dtype)\n         print (x[1].dtype)\n         c=nd.concat(x[0],b,dim=1)\n         y = self.dense1(c)\n         return y\n --------\n the print output above is \n <class 'numpy.float32'>\n <class 'numpy.float64'>\n <class 'numpy.float64'>\n \n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "xiehust", "commentT": "2018-03-23T17:31:04Z", "comment_text": "\n \t\tWe should add dtype as an argument.\n \t\t"}}}, "commit": {"commit_id": "0bcc2daace816c98f1048792dc0350cebb38b45f", "commit_author": "Ziyue Huang", "commitT": "2018-04-23 12:23:41-07:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "1.0", "commit_Nprams": "0.7222222222222222"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\mxnet\\gluon\\nn\\basic_layers.py", "file_new_name": "python\\mxnet\\gluon\\nn\\basic_layers.py", "file_complexity": {"file_NLOC": "596", "file_CCN": "64", "file_NToken": "2504"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "184", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,units,activation,use_bias,flatten,dtype,weight_initializer,bias_initializer,in_units,kwargs", "method_startline": "183", "method_endline": "185", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "38", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": null, "deleted_lines": "182", "method_info": {"method_name": "__init__", "method_params": "self,units,activation,use_bias,flatten,weight_initializer,bias_initializer,in_units,kwargs", "method_startline": "181", "method_endline": "183", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "34", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "tests\\python\\unittest\\test_gluon.py", "file_new_name": "tests\\python\\unittest\\test_gluon.py", "file_complexity": {"file_NLOC": "731", "file_CCN": "100", "file_NToken": "7604"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "780,781,782,783,784", "deleted_lines": null, "method_info": {"method_name": "test_dtype.__init__", "method_params": "self,in_dim,output_dim", "method_startline": "780", "method_endline": "784", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "68", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "786,787,788,789,790,791", "deleted_lines": null, "method_info": {"method_name": "test_dtype.forward", "method_params": "self,x", "method_startline": "786", "method_endline": "791", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "45", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "129", "deleted_lines": "129", "method_info": {"method_name": "test_parameter_str", "method_params": "", "method_startline": "116", "method_endline": "130", "method_complexity": {"method_NLOC": "10", "method_CCN": "1", "method_NToken": "71", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796", "deleted_lines": null, "method_info": {"method_name": "test_dtype", "method_params": "", "method_startline": "761", "method_endline": "796", "method_complexity": {"method_NLOC": "21", "method_CCN": "1", "method_NToken": "203", "method_nesting_level": "0"}}}}}}}}