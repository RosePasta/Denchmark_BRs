{"BR": {"BR_id": "9920", "BR_author": "wkcn", "BRopenT": "2018-02-28T12:57:06Z", "BRcloseT": "2018-05-16T05:56:11Z", "BR_text": {"BRsummary": "Asynchronous Issue on CustomOP and mxnet.image.ImageDetIter", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n When I use CustomOP and mxnet.image.ImageDetIter simultaneously, it may cause the error:\n <denchmark-code>Traceback (most recent call last):\n    File \"/home/wkcn/proj/faster-rcnn-mx/it.py\", line 95, in <module>\n      model.fit(train_data = train_data, begin_epoch = 0, num_epoch = 120, allow_missing = True, batch_end_callback = mx.callback.Speedometer(batch_size, 5)    , eval_metric = MyMetric()) \n    File \"/usr/local/lib/python2.7/dist-packages/mxnet/module/base_module.py\", line 491, in fit\n      next_data_batch = next(data_iter)\n    File \"/usr/local/lib/python2.7/dist-packages/mxnet/image/detection.py\", line 765, in next\n      data = self.imdecode(s)\n    File \"/usr/local/lib/python2.7/dist-packages/mxnet/image/image.py\", line 1223, in imdecode\n      raise RuntimeError(\"{}, {}\".format(locate(), e))\n  RuntimeError: Broken image index: 32, [12:14:03] src/io/image_io.cc:186: Check failed: inputs[0].ctx().dev_mask() == Context::kCPU (2 vs. 1) Only supports cpu input\n </denchmark-code>\n \n The reason is that the custom operator will create the GPU context and enter it.\n <denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/python/mxnet/operator.py#L790>https://github.com/apache/incubator-mxnet/blob/master/python/mxnet/operator.py#L790</denchmark-link>\n \n <denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/python/mxnet/operator.py#L814>https://github.com/apache/incubator-mxnet/blob/master/python/mxnet/operator.py#L814</denchmark-link>\n \n At this time (context.default_ctx is GPU), ImageDetIter execute the codes below:\n <denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/python/mxnet/image/detection.py#L764>https://github.com/apache/incubator-mxnet/blob/master/python/mxnet/image/detection.py#L764</denchmark-link>\n \n <denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/python/mxnet/image/image.py#L135>https://github.com/apache/incubator-mxnet/blob/master/python/mxnet/image/image.py#L135</denchmark-link>\n \n Because context.default_ctx is GPU now, (The custom operator is in the GPU context and doesn't exit it yet), the function imdecode will use nd.array(...) to create a NDArray in the default context, namely the GPU context. It causes the error:\n <denchmark-code>   File \"/usr/local/lib/python2.7/dist-packages/mxnet/image/detection.py\", line 765, in next\n      data = self.imdecode(s)\n    File \"/usr/local/lib/python2.7/dist-packages/mxnet/image/image.py\", line 1223, in imdecode\n      raise RuntimeError(\"{}, {}\".format(locate(), e))\n  RuntimeError: Broken image index: 32, [12:14:03] src/io/image_io.cc:186: Check failed: inputs[0].ctx().dev_mask() == Context::kCPU (2 vs. 1) Only supports cpu input\n </denchmark-code>\n \n <denchmark-h:h2>Environment info (Required)</denchmark-h>\n \n <denchmark-code>----------Python Info----------\n ('Version      :', '2.7.12')\n ('Compiler     :', 'GCC 5.4.0 20160609')\n ('Build        :', ('default', 'Dec  4 2017 14:50:18'))\n ('Arch         :', ('64bit', 'ELF'))\n ------------Pip Info-----------\n ('Version      :', '8.1.1')\n ('Directory    :', '/usr/lib/python2.7/dist-packages/pip')\n ----------MXNet Info-----------\n ('Version      :', '1.1.0')\n ('Directory    :', '/usr/local/lib/python2.7/dist-packages/mxnet')\n ('Commit Hash   :', '07a83a0325a3d782513a04f47d711710972cb144')\n ----------System Info----------\n ('Platform     :', 'Linux-4.7.3-coreos-r3-x86_64-with-Ubuntu-16.04-xenial')\n ('system       :', 'Linux')\n ('node         :', 'phlrr3110')\n ('release      :', '4.7.3-coreos-r3')\n ('version      :', '#1 SMP Thu Feb 23 02:16:16 UTC 2017')\n \n GPU: Tesla M40 x 4\n </denchmark-code>\n \n Package used (Python/R/Scala/Julia):\n Python\n <denchmark-h:h2>Error Message:</denchmark-h>\n \n <denchmark-code>Traceback (most recent call last):\n    File \"/home/wkcn/proj/faster-rcnn-mx/it.py\", line 95, in <module>\n      model.fit(train_data = train_data, begin_epoch = 0, num_epoch = 120, allow_missing = True, batch_end_callback = mx.callback.Speedometer(batch_size, 5)    , eval_metric = MyMetric()) \n    File \"/usr/local/lib/python2.7/dist-packages/mxnet/module/base_module.py\", line 491, in fit\n      next_data_batch = next(data_iter)\n    File \"/usr/local/lib/python2.7/dist-packages/mxnet/image/detection.py\", line 765, in next\n      data = self.imdecode(s)\n    File \"/usr/local/lib/python2.7/dist-packages/mxnet/image/image.py\", line 1223, in imdecode\n      raise RuntimeError(\"{}, {}\".format(locate(), e))\n  RuntimeError: Broken image index: 32, [12:14:03] src/io/image_io.cc:186: Check failed: inputs[0].ctx().dev_mask() == Context::kCPU (2 vs. 1) Only supports cpu input\n </denchmark-code>\n \n <denchmark-h:h2>Minimum reproducible example</denchmark-h>\n \n import mxnet as mx\n from mxnet import gluon\n from mxnet import image\n from mxnet import nd\n import numpy as np\n import logging\n \n logger = logging.getLogger()\n logger.setLevel(logging.DEBUG)\n \n root_url = ('https://apache-mxnet.s3-accelerate.amazonaws.com/'\n             'gluon/dataset/pikachu/')\n data_dir = './data/pikachu/'\n dataset = {'train.rec': 'e6bcb6ffba1ac04ff8a9b1115e650af56ee969c8',\n           'train.idx': 'dcf7318b2602c06428b9988470c731621716c393',\n           'val.rec': 'd6c33f799b4d058e82f2cb5bd9a976f69d72d520'}\n for k, v in dataset.items():\n     gluon.utils.download(root_url+k, data_dir+k, sha1_hash=v)\n \n T = 1\n devs = [mx.gpu(i) for i in range(4)]\n data_shape = 224 * T\n batch_size = 20 * len(devs)\n rgb_mean = np.array([1,2,3]) \n \n class_names = ['pikachu']\n num_class = len(class_names)\n \n def get_iterators(data_shape, batch_size):\n     train_iter = image.ImageDetIter(\n         batch_size=batch_size,\n         data_shape=(3, data_shape, data_shape),\n         path_imgrec=data_dir+'train.rec',\n         path_imgidx=data_dir+'train.idx',\n         shuffle=True,\n         mean=True,\n         rand_crop=1,\n         min_object_covered=0.95,\n         max_attempts=200)\n     val_iter = image.ImageDetIter(\n         batch_size=batch_size,\n         data_shape=(3, data_shape, data_shape),\n         path_imgrec=data_dir+'val.rec',\n         shuffle=False,\n         mean=True)\n     return train_iter, val_iter, class_names, num_class\n \n train_data, test_data, class_names, num_class = get_iterators(\n     data_shape, batch_size)\n \n \n class MyCustom(mx.operator.CustomOp):\n     def __init__(self):\n         super(MyCustom, self).__init__()\n     def forward(self, is_train, req, in_data, out_data, aux):\n         self.assign(out_data[0], req[0], 0)\n     def backward(self, req, out_grad, in_data, out_data, in_grad, aux):\n         self.assign(in_grad[0], req[0], 0)\n         self.assign(in_grad[1], req[1], 0)\n         \n @mx.operator.register(\"MyCustom\")\n class MyCustomProp(mx.operator.CustomOpProp):\n     def __init__(self):\n         super(MyCustomProp, self).__init__(need_top_grad = False)\n     def list_arguments(self):\n         return [\"data\", \"label\"]\n     def list_outputs(self):\n         return [\"loss\"]\n     def infer_shape(self, in_shape):\n         return [in_shape[0], in_shape[1]], [(1, )], []\n     def infer_type(self, in_type):\n         dtype = in_type[0]\n         return [dtype, dtype], [dtype], []\n     def create_operator(self, ctx, shapes, dtypes):\n         return MyCustom()\n \n class MyMetric(mx.metric.EvalMetric):\n     def __init__(self):\n         super(MyMetric, self).__init__(\"MyMetric\")\n         self.name = ['empty']\n     def update(self, labels, preds):\n         pass\n     def get(self):\n         return self.name, [0]\n \n x = mx.sym.Variable(\"data\")\n label = mx.sym.Variable(\"label\")\n x = mx.sym.FullyConnected(data = x, num_hidden = 100)\n label = mx.sym.Reshape(data = label, shape = (0, -1))\n sym = mx.sym.Custom(data = x, label = label, op_type = \"MyCustom\")\n \n model = mx.module.Module(context = devs, symbol = sym, data_names = ('data',), label_names = ('label',))\n \n print (\"start\")\n model.fit(train_data = train_data, begin_epoch = 0, num_epoch = 120, allow_missing = True, batch_end_callback = mx.callback.Speedometer(batch_size, 5), eval_metric = MyMetric()) \n '''\n with mx.gpu(0):\n     while 1:\n         e = train_data.next()\n         print (\"batch\")\n '''\n <denchmark-h:h2>Steps to reproduce</denchmark-h>\n \n (Paste the commands you ran that produced the error.)\n \n Run the code\n \n <denchmark-h:h2>What have you tried to solve it?</denchmark-h>\n \n \n Changing the code: https://github.com/apache/incubator-mxnet/blob/master/python/mxnet/image/image.py#L135, and adding the parameter ctx = context.cpu(), the problem will be solved.\n \n <denchmark-link:https://github.com/wkcn/incubator-mxnet/commit/eddab0ec2c26a92d7cc30ed48658091099204a2c>The code changed</denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "wkcn", "commentT": "2018-02-28T18:36:17Z", "comment_text": "\n \t\tNeed to use thread local structures to store global states like context\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "wkcn", "commentT": "2018-04-20T06:49:04Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/wkcn>@wkcn</denchmark-link>\n  thanks for sharing your ways.  I added ctx = context.cpu(), however,  the new problem happens:\n /usr/local/lib/python2.7/dist-packages/mxnet/module/base_module.py:466: UserWarning: Optimizer created manually outside Module but rescale_grad is not normalized to 1.0/batch_size/num_workers (0.25 vs. 0.0078125). Is this intended?\n optimizer_params=optimizer_params)\n call reset()\n terminate called after throwing an instance of 'dmlc::Error'\n what():  [14:37:42] src/engine/./threaded_engine.h:359: [14:37:42] src/ndarray/ndarray_function.cu:43: Check failed: to->type_flag_ == from.type_flag_ (0 vs. 3) Source and target must have the same data type when copying across devices.\n Did you solve it ?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "wkcn", "commentT": "2018-04-20T09:31:54Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/IrvingShu>@IrvingShu</denchmark-link>\n \n It seems that the data types of source ndarray and target ndarray are different.\n Could you upload the Minimum reproducible example?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "wkcn", "commentT": "2018-04-24T03:17:23Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/piiswrong>@piiswrong</denchmark-link>\n  can you tell me  how to add thread local structures to store global states like context. I add   some custom layers such as center loss , focal loss, ringloss , all happens this problem. Thank you.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "wkcn", "commentT": "2018-04-24T08:57:31Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/IrvingShu>@IrvingShu</denchmark-link>\n  I am currently working on fixing this. Please see: <denchmark-link:https://github.com/anirudh2290/mxnet/blob/fix_global_ctx_ex/python/mxnet/context.py>https://github.com/anirudh2290/mxnet/blob/fix_global_ctx_ex/python/mxnet/context.py</denchmark-link>\n  to get more context on what <denchmark-link:https://github.com/piiswrong>@piiswrong</denchmark-link>\n  means.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "wkcn", "commentT": "2018-04-29T13:59:03Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/anirudh2290>@anirudh2290</denchmark-link>\n  thank you, did you finished fixing it, I tried it , it  also failed.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "wkcn", "commentT": "2018-04-29T23:55:26Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/IrvingShu>@IrvingShu</denchmark-link>\n  The workaround I provided should work with the minimum reproducible steps in the issue.  There was an issue with the current_context() function which has also been fixed. The workaround is only when you use the  class and not for anything else.  Please provide a minimum reproducible script if it doesn't work.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "wkcn", "commentT": "2018-05-16T00:24:45Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/wkcn>@wkcn</denchmark-link>\n  <denchmark-link:https://github.com/IrvingShu>@IrvingShu</denchmark-link>\n  the PR is merged. can you check with the latest master if your issue is fixed.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "wkcn", "commentT": "2018-05-16T05:37:14Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/anirudh2290>@anirudh2290</denchmark-link>\n \n Hi!\n The issue is fixed.\n Thank you!\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "wkcn", "commentT": "2018-08-23T14:35:12Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/wkcn>@wkcn</denchmark-link>\n  \u4f60\u597d\uff0c\u8bf7\u95ee\u4f60\u662f\u600e\u4e48\u89e3\u51b3 Check failed: to->type_flag_ == from.type_flag_ (0 vs. 3) Source and target must have the same data type when copying across devices\u7684\uff0c\u6211\u4e00\u5f00\u59cb\u4e5f\u662f\u62a5\u4e86\u8fd9\u4e2aissue\u7684\u9519\u8bef\uff0c\u7136\u540e\u6309\u7167\u4ee3\u7801\u6539\u4e86\u4e4b\u540e\u53c8\u4f1a\u51fa\u73b0\u4e0a\u9762\u8fd9\u4e2a\u9519\u8bef\uff0c\u6211\u62a5\u9519\u7684\u4fe1\u606f\u662f\n Traceback (most recent call last):\n File \"train_softmax_fast.py\", line 892, in \n main()\n File \"train_softmax_fast.py\", line 889, in main\n train_net(args)\n File \"train_softmax_fast.py\", line 883, in train_net\n epoch_end_callback = epoch_cb )\n File \"/usr/local/lib/python2.7/dist-packages/mxnet/module/multitaskmodulev3.py\", line 269, in fit\n self.update_metric(gender_eval_metric, data_batch.label)\n File \"/usr/local/lib/python2.7/dist-packages/mxnet/module/module.py\", line 768, in update_metric\n self., preds)\n File \"/usr/local/lib/python2.7/dist-packages/mxnet/metric.py\", line 304, in update_dict\n metric.update_dict(labels, preds)\n File \"/usr/local/lib/python2.7/dist-packages/mxnet/metric.py\", line 132, in update_dict\n self.update(label, pred)\n File \"train_softmax_fast.py\", line 203, in update\n print(\"pred_label before if is {}\\n\".format(mx.ndarray.array(pred_label)))\n File \"/usr/local/lib/python2.7/dist-packages/mxnet/ndarray/ndarray.py\", line 189, in \n return '\\n%s\\n<%s %s @%s>' % (str(self.asnumpy()),\n File \"/usr/local/lib/python2.7/dist-packages/mxnet/ndarray/ndarray.py\", line 1876, in asnumpy\n ctypes.c_size_t(data.size)))\n File \"/usr/local/lib/python2.7/dist-packages/mxnet/base.py\", line 149, in check_call\n raise MXNetError(py_str( == from.type_flag_ (0 vs. 3) Source and target must have the same data type when copying across devices.\n Stack trace returned 10 entries:\n [bt] (0) /usr/local/lib/python2.7/dist-packages/mxnet/libmxnet.so(+0x30756a) [0x7f8c83ab656a]\n [bt] (1) /usr/local/lib/python2.7/dist-packages/mxnet/libmxnet.so(+0x307b91) [0x7f8c83ab6b91]\n [bt] (2) /usr/local/lib/python2.7/dist-packages/mxnet/libmxnet.so(+0x401cd87) [0x7f8c877cbd87]\n [bt] (3) /usr/local/lib/python2.7/dist-packages/mxnet/libmxnet.so(+0x2628a16) [0x7f8c85dd7a16]\n [bt] (4) /usr/local/lib/python2.7/dist-packages/mxnet/libmxnet.so(+0x263c41a) [0x7f8c85deb41a]\n [bt] (5) /usr/local/lib/python2.7/dist-packages/mxnet/libmxnet.so(+0x263c54b) [0x7f8c85deb54b]\n [bt] (6) /usr/local/lib/python2.7/dist-packages/mxnet/libmxnet.so(+0x2472944) [0x7f8c85c21944]\n [bt] (7) /usr/local/lib/python2.7/dist-packages/mxnet/libmxnet.so(+0x2478e13) [0x7f8c85c27e13]\n [bt] (8) /usr/local/lib/python2.7/dist-packages/mxnet/libmxnet.so(+0x2479066) [0x7f8c85c28066]\n [bt] (9) /usr/local/lib/python2.7/dist-packages/mxnet/libmxnet.so(+0x2473054) [0x7f8c85c22054]\n \u8bf7\u95ee\u4f60\u662f\u5982\u4f55\u89e3\u51b3\u7684\uff0c\u6211\u4e00\u5171\u6709\u4e09\u4e2a\u81ea\u5b9a\u4e49\u7684AccMetric\uff0c\u524d\u4e24\u4e2aAccMetric\u7528\u7684\u65b9\u6cd5\u90fd\u662fmx.nd.array(pred_label, ctx=mx.current_context())\u6765\u89e3\u51b3\uff0c\u5947\u602a\u7684\u662f\u524d\u9762\u4e24\u4e2a\u52a0\u7684\u5730\u65b9\u4e0d\u4e00\u6837\u624d\u53ef\u4ee5\uff0c\u8fd9\u7b2c\u4e09\u4e2a\u5c31\u5b8c\u5168\u89e3\u51b3\u4e0d\u4e86\u4e86\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "wkcn", "commentT": "2018-08-23T23:02:58Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/MinZhaoLin>@MinZhaoLin</denchmark-link>\n  \u4f60\u9047\u5230\u7684\u95ee\u9898\u597d\u50cf\u548c\u8fd9\u4e2aissue\u4e0d\u4e00\u6837\n metric\u91cc\u4f20\u5165\u7684pred_label\u662fGPU\u6570\u636e\uff0clabel\u662fCPU\u6570\u636e\n \u4f60\u53ef\u4ee5\u5c1d\u8bd5pred_label.as_in_context(label.context)\uff0c\u8ba9pred\u548clabel\u5728\u540c\u4e00\u4e2acontext\u91cc\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "wkcn", "commentT": "2018-08-24T04:47:40Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/wkcn>@wkcn</denchmark-link>\n \n \u6211\u662f\u4e00\u5f00\u59cb\u5b9a\u4e49\u4e86\u81ea\u5df1\u7684softmax\u5c42\u540e\uff0c\u51fa\u73b0\u4e86\u8fd9\u4e2aissue\u7684\u62a5\u9519src/io/image_io.cc:186: Check failed: inputs[0].ctx().dev_mask() == Context::kCPU (2 vs. 1) Only supports cpu input\uff0c\n \u7136\u540e\u6839\u636e\u8fd9\u4e2aissue\u6539\u4e86\u4e4b\u540e\uff0c\u5c31\u662f\u4fee\u6539Imge.py\u4e4b\u540e\uff0c\u5728AccMetric\u91cc\u9762\u5c31\u51fa\u73b0\u4e86src/ndarray/ndarray_function.cu:43: Check failed: to->type_flag == from.type_flag_ (0 vs. 3) Source and target must have the same data type when copying across devices.\u8fd9\u4e2a\u95ee\u9898\n \u8fd9\u4e2a\u95ee\u9898\u5177\u4f53\u662f\u5728pred_label = pred_label.asnumpy().astype('int32').flatten()\u7684\u65f6\u5019\u51fa\u73b0\u7684\uff0c\u7136\u540e\u5f53\u6211\u5c1d\u8bd5\u5728\u8fd9\u53e5\u8bdd\u524d\u9762\uff08\u67d0\u4e9b\u5730\u65b9\uff0c\u6709\u4e9b\u5730\u65b9\u53ef\u4ee5\uff0c\u6709\u4e9b\u5730\u65b9\u4e5f\u4f1a\u62a5\u9519\uff09\u5c06pred_label\u76f4\u63a5print\u8f93\u51fa\u7684\u65f6\u5019\uff0c\u4ed6\u662f\u6709\u65f6\u4f1a\u6b63\u5e38\u8fd0\u884c\u4e0d\u4f1a\u62a5\u9519\uff0c\u4f46\u662f\u6bcf\u6b21\u5f53pred_label\u8c03\u7528\u5230asnumpy()\u7684\u65f6\u5019\u5c31\u4f1a\u62a5\u8fd9\u4e2a\u9519\n <denchmark-code>class GenderAccMetric(mx.metric.EvalMetric):\n   def __init__(self):\n     self.axis = 1\n     super(GenderAccMetric, self).__init__(\n         'acc', axis=self.axis,\n         output_names=None, label_names=None)\n     self.losses = []\n     self.count = 0\n \n   def update(self, _labels, preds):\n     self.count+=1\n     #print(\"in gender AccMetric\\n\")\n     #print(\"label is {}\\n\".format(_labels[2])) \n     #print(\"preds is {}\\n\".format(preds[3]))  \u5f53\u8f93\u51falabel\u548cpreds\u65f6\uff0c\u6709\u65f6\u4f1a\u6b63\u5e38\u8fd0\u884c\n     labels = [_labels[2]]\n     _preds = [preds[3]] #use softmax output\n     for label, pred_label in zip(labels, _preds):\n         #print(\"pred_label before if is {}\\n\".format(pred_label)) \u5728\u8fd9\u91cc\u8f93\u51fa\u4e5f\u4f1a\u62a5\u9519\n         pred_label = pred_label.as_in_context(label.context) \u52a0\u4e0a\u4e86\u8fd9\u53e5\u8bdd\u8fd8\u662f\u4e0d\u884c\n         if pred_label.shape != label.shape:\n             #pred_label = mx.ndarray.array(_pred_label, ctx=mx.current_context())\u5176\u4e2d\u4e00\u4e2aAccMetric\u5728\u8fd9\u91cc\u8fdb\u884c\u8f6c\u6362\u5c31\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u4f46\u5269\u4e0b\u7684\u4e24\u4e2a\u4e0d\u884c\n             pred_label = mx.ndarray.argmax(pred_label, axis=self.axis)\n         pred_label = pred_label.asnumpy().astype('int32').flatten()\n         label = label.asnumpy()\n         if label.ndim==2:\n           label = label[:,0]\n         label = label.astype('int32').flatten()\n         assert label.shape==pred_label.shape\n         self.sum_metric += (pred_label.flat == label.flat).sum()\n         self.num_inst += len(pred_label.flat)\n </denchmark-code>\n \n \u6240\u4ee5\u603b\u7684\u6765\u8bf4\uff0c\u6211\u611f\u5230\u975e\u5e38\u5947\u602a\u548c\u56f0\u6270\uff0c\u6309\u7167\u4f60\u8bf4\u7684\u65b9\u6cd5\u6539\u4e86\u8fd8\u662f\u4e0d\u884c\uff0c\u6211\u611f\u89c9\u662f\u53ea\u8981\u662fpred\u8c03\u7528\u4e86asnumpy\uff08\uff09\u5c31\u4f1a\u62a5\u9519\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "wkcn", "commentT": "2018-08-24T04:57:11Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/wkcn>@wkcn</denchmark-link>\n  \u6211\u7528\u7684\u65f6mxnet-cu80\uff0c\u8fd9\u662f\u6211\u5b9a\u4e49\u7684softmax\u5c42\uff0c\u4e3b\u8981\u662f\u5f53label\u4e3a\u51680\u65f6\uff0c\u56de\u4f200\u68af\u5ea6\uff0c\u4e3b\u8981\u662f\u60f3mxnet\u7684module\u591a\u4efb\u52a1\uff0c\u4f46\u6bcf\u4e2a\u4efb\u52a1\u5355\u72ec\u8bad\u7ec3\uff0c\u5c31\u662f\u56e0\u4e3a\u6570\u636e\u53ea\u6709\u5355\u72ec\u4e00\u4e2a\u4efb\u52a1\u7684\u6807\u7b7e\n <denchmark-code>class Softmax(mx.operator.CustomOp):\n   def forward(self, is_train, req, in_data, out_data, aux):\n       x = in_data[0]\n       y = mx.nd.exp(x - x.max(axis=1).reshape((x.shape[0], 1)))\n       y[:] = mx.nd.divide(y, y.sum(axis=1).reshape(x.shape[0], 1))\n       self.assign(out_data[0], req[0], mx.nd.array(y))\n \n   def backward(self, req, out_grad, in_data, out_data, in_grad, aux):\n       l = in_data[1].astype('int32')\n       y = out_data[0]\n       if l.sum().asnumpy() == 0:\n         self.assign(in_grad[0], req[0], mx.nd.zeros_like(y))\n       else:\n         y[np.arange(l.shape[0]), l] -= 1.0\n         y = y / 160\n         self.assign(in_grad[0], req[0], mx.nd.array(y))\n \n @mx.operator.register(\"softmax\")\n class SoftmaxProp(mx.operator.CustomOpProp):\n   def __init__(self):\n       super(SoftmaxProp, self).__init__(need_top_grad=False)\n \n   def list_arguments(self):\n       return ['data', 'label']\n \n   def list_outputs(self):\n       return ['output']\n \n   def infer_shape(self, in_shape):\n       data_shape = in_shape[0]\n       label_shape = (in_shape[0][0],)\n       output_shape = in_shape[0]\n       return [data_shape, label_shape], [output_shape], []\n \n   def infer_type(self, in_type):\n       return in_type, [in_type[0]], []\n \n   def create_operator(self, ctx, shapes, dtypes):\n       return Softmax()\n \n </denchmark-code>\n \n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "wkcn", "commentT": "2018-08-24T06:32:54Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/wkcn>@wkcn</denchmark-link>\n  \u95ee\u9898\u89e3\u51b3\u5566\uff0c\u6211\u6839\u636eChange class variables to thread local variables <denchmark-link:https://github.com/apache/incubator-mxnet/pull/10833>#10833</denchmark-link>\n  \u5c31\u662f\u4e0a\u9762anirudh2290 \u7684PR\u628a\u9700\u8981\u6539\u7684\u6587\u4ef6\u90fd\u6539\u4e86\u5c31\u53ef\u4ee5\u4e86\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "wkcn", "commentT": "2018-08-24T08:54:07Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/MinZhaoLin>@MinZhaoLin</denchmark-link>\n  \u8bf6\uff1f\u4f60\u7528\u7684MXNet\u7248\u672c\u662f\u4e0d\u662f\u6ca1\u6709\u5408\u5e76PR #10833\u5462?\n \u4f60\u5b9a\u4e49\u7684Softmax\u5c42\u5e94\u8be5\u4e5f\u53ef\u4ee5\u7528\u4e0b\u9762\u8bed\u53e5\u4ee3\u66ff\n valid = (label == 0).sum() > 0\n output = valid * mx.sym.SoftmaxOutput(pred, label, ...)\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "wkcn", "commentT": "2019-07-18T11:25:59Z", "comment_text": "\n \t\t\n @wkcn \u95ee\u9898\u89e3\u51b3\u5566\uff0c\u6211\u6839\u636eChange class variables to thread local variables #10833 \u5c31\u662f\u4e0a\u9762anirudh2290 \u7684PR\u628a\u9700\u8981\u6539\u7684\u6587\u4ef6\u90fd\u6539\u4e86\u5c31\u53ef\u4ee5\u4e86\n \n \u4f60\u597d,\u6211\u4e5f\u662f\u6309\u7167\u8fd9\u4e2a\u6539\u4e86\u4f46\u662f \u6211\u7528\u591aGPU\u7684\u65f6\u5019\u8fd8\u662f\u4f1a\u51fa\u73b0\u4f60\u63cf\u8ff0\u7684\u8fd9\u4e2a\u95ee\u9898,\u4f60\u6709\u9047\u5230\u5417\n \t\t"}}}, "commit": {"commit_id": "86ee3e119a38b440350a847683313e23f9b3cc1e", "commit_author": "Anirudh Subramanian", "commitT": "2018-05-11 11:06:52-07:00", "commit_complexity": {"commit_NLOC": "0.6583333333333333", "commit_CCN": "1.0", "commit_Nprams": "0.8541666666666666"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "python\\mxnet\\attribute.py", "file_new_name": "python\\mxnet\\attribute.py", "file_complexity": {"file_NLOC": "57", "file_CCN": "13", "file_NToken": "299"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "69,70,71,72,75", "deleted_lines": "67,68,71,76", "method_info": {"method_name": "__enter__", "method_params": "self", "method_startline": "67", "method_endline": "76", "method_complexity": {"method_NLOC": "9", "method_CCN": "2", "method_NToken": "69", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "80", "deleted_lines": "78", "method_info": {"method_name": "__exit__", "method_params": "self,ptype,value,trace", "method_startline": "78", "method_endline": "80", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "24", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "93,94,95,96,97", "deleted_lines": null, "method_info": {"method_name": "current", "method_params": "cls,val", "method_startline": "93", "method_endline": "97", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "23", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "84,85,86,87,88,89,90", "deleted_lines": null, "method_info": {"method_name": "current", "method_params": "cls", "method_startline": "84", "method_endline": "90", "method_complexity": {"method_NLOC": "7", "method_CCN": "2", "method_NToken": "40", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 9, "file_old_name": "python\\mxnet\\base.py", "file_new_name": "python\\mxnet\\base.py", "file_complexity": {"file_NLOC": "336", "file_CCN": "88", "file_NToken": "2491"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "146,147", "deleted_lines": null, "method_info": {"method_name": "with_metaclass.__new__", "method_params": "cls,name,this_bases,d", "method_startline": "146", "method_endline": "147", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "20", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "129,130,131,132,133,134,135", "deleted_lines": null, "method_info": {"method_name": "__setattr__", "method_params": "cls,key,value", "method_startline": "129", "method_endline": "135", "method_complexity": {"method_NLOC": "6", "method_CCN": "4", "method_NToken": "59", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "103,104,105", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,fget,fset", "method_startline": "103", "method_endline": "105", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "21", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "139,140,141,142,143,144,145,146,147,148,149,150,151,152", "deleted_lines": null, "method_info": {"method_name": "with_metaclass", "method_params": "meta,bases", "method_startline": "139", "method_endline": "152", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "36", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "155,156,157,158,159", "deleted_lines": null, "method_info": {"method_name": "classproperty", "method_params": "func", "method_startline": "155", "method_endline": "159", "method_complexity": {"method_NLOC": "4", "method_CCN": "2", "method_NToken": "29", "method_nesting_level": "0"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "150,151", "deleted_lines": null, "method_info": {"method_name": "with_metaclass.__prepare__", "method_params": "cls,name,this_bases", "method_startline": "150", "method_endline": "151", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "2"}}}, "hunk_6": {"Ismethod": 1, "added_lines": "112,113,114,115,116,117,118,119,120", "deleted_lines": null, "method_info": {"method_name": "__set__", "method_params": "self,obj,value", "method_startline": "112", "method_endline": "120", "method_complexity": {"method_NLOC": "9", "method_CCN": "3", "method_NToken": "60", "method_nesting_level": "1"}}}, "hunk_7": {"Ismethod": 1, "added_lines": "122,123,124,125,126", "deleted_lines": null, "method_info": {"method_name": "setter", "method_params": "self,func", "method_startline": "122", "method_endline": "126", "method_complexity": {"method_NLOC": "5", "method_CCN": "2", "method_NToken": "33", "method_nesting_level": "1"}}}, "hunk_8": {"Ismethod": 1, "added_lines": "107,108,109,110", "deleted_lines": null, "method_info": {"method_name": "__get__", "method_params": "self,obj,clas", "method_startline": "107", "method_endline": "110", "method_complexity": {"method_NLOC": "4", "method_CCN": "2", "method_NToken": "35", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "python\\mxnet\\context.py", "file_new_name": "python\\mxnet\\context.py", "file_complexity": {"file_NLOC": "105", "file_CCN": "20", "file_NToken": "472"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "262,263,264", "deleted_lines": null, "method_info": {"method_name": "current_context", "method_params": "", "method_startline": "240", "method_endline": "264", "method_complexity": {"method_NLOC": "4", "method_CCN": "2", "method_NToken": "34", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "126,127,128,129,130,131,132,133", "deleted_lines": null, "method_info": {"method_name": "default_ctx", "method_params": "cls", "method_startline": "126", "method_endline": "133", "method_complexity": {"method_NLOC": "8", "method_CCN": "2", "method_NToken": "44", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "136,137,138,139,140,141", "deleted_lines": null, "method_info": {"method_name": "default_ctx", "method_params": "cls,val", "method_startline": "136", "method_endline": "141", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "24", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "115,116,117,118", "deleted_lines": "117", "method_info": {"method_name": "__enter__", "method_params": "self", "method_startline": "114", "method_endline": "119", "method_complexity": {"method_NLOC": "6", "method_CCN": "2", "method_NToken": "46", "method_nesting_level": "1"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "122", "deleted_lines": null, "method_info": {"method_name": "__exit__", "method_params": "self,ptype,value,trace", "method_startline": "121", "method_endline": "122", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "20", "method_nesting_level": "1"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "python\\mxnet\\gluon\\block.py", "file_new_name": "python\\mxnet\\gluon\\block.py", "file_complexity": {"file_NLOC": "515", "file_CCN": "143", "file_NToken": "3518"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "50,53", "deleted_lines": "49,52", "method_info": {"method_name": "create", "method_params": "prefix,params,hint", "method_startline": "48", "method_endline": "69", "method_complexity": {"method_NLOC": "20", "method_CCN": "6", "method_NToken": "161", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "74,75", "deleted_lines": "73,74", "method_info": {"method_name": "__enter__", "method_params": "self", "method_startline": "71", "method_endline": "78", "method_complexity": {"method_NLOC": "8", "method_CCN": "2", "method_NToken": "58", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "85", "deleted_lines": "84", "method_info": {"method_name": "__exit__", "method_params": "self,ptype,value,trace", "method_startline": "80", "method_endline": "85", "method_complexity": {"method_NLOC": "6", "method_CCN": "2", "method_NToken": "45", "method_nesting_level": "1"}}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "python\\mxnet\\name.py", "file_new_name": "python\\mxnet\\name.py", "file_complexity": {"file_NLOC": "61", "file_CCN": "12", "file_NToken": "311"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "89,90", "deleted_lines": null, "method_info": {"method_name": "current", "method_params": "cls,val", "method_startline": "89", "method_endline": "90", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "14", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "80,81,82,83,84,85,86", "deleted_lines": null, "method_info": {"method_name": "current", "method_params": "cls", "method_startline": "80", "method_endline": "86", "method_complexity": {"method_NLOC": "7", "method_CCN": "2", "method_NToken": "40", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "68,69,70,71", "deleted_lines": "71,72", "method_info": {"method_name": "__enter__", "method_params": "self", "method_startline": "67", "method_endline": "72", "method_complexity": {"method_NLOC": "6", "method_CCN": "2", "method_NToken": "43", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "76", "deleted_lines": null, "method_info": {"method_name": "__exit__", "method_params": "self,ptype,value,trace", "method_startline": "74", "method_endline": "76", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "24", "method_nesting_level": "1"}}}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "python\\mxnet\\ndarray\\ndarray.py", "file_new_name": "python\\mxnet\\ndarray\\ndarray.py", "file_complexity": {"file_NLOC": "1235", "file_CCN": "391", "file_NToken": "9871"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "3708", "deleted_lines": "3708", "method_info": {"method_name": "eye", "method_params": "N,M,k,ctx,dtype,kwargs", "method_startline": "3675", "method_endline": "3711", "method_complexity": {"method_NLOC": "5", "method_CCN": "3", "method_NToken": "72", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "2264,2286", "deleted_lines": "2264,2286", "method_info": {"method_name": "ones", "method_params": "shape,ctx,dtype,kwargs", "method_startline": "2255", "method_endline": "2289", "method_complexity": {"method_NLOC": "5", "method_CCN": "3", "method_NToken": "56", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "2442", "deleted_lines": "2442", "method_info": {"method_name": "arange", "method_params": "start,stop,step,repeat,ctx,dtype", "method_startline": "2400", "method_endline": "2444", "method_complexity": {"method_NLOC": "5", "method_CCN": "2", "method_NToken": "70", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "3736", "deleted_lines": "3736", "method_info": {"method_name": "empty", "method_params": "shape,ctx,dtype", "method_startline": "3715", "method_endline": "3739", "method_complexity": {"method_NLOC": "8", "method_CCN": "4", "method_NToken": "62", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "3669", "deleted_lines": "3669", "method_info": {"method_name": "zeros", "method_params": "shape,ctx,dtype,kwargs", "method_startline": "3639", "method_endline": "3672", "method_complexity": {"method_NLOC": "5", "method_CCN": "3", "method_NToken": "56", "method_nesting_level": "0"}}}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "python\\mxnet\\ndarray\\sparse.py", "file_new_name": "python\\mxnet\\ndarray\\sparse.py", "file_complexity": {"file_NLOC": "659", "file_CCN": "195", "file_NToken": "4672"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1532", "deleted_lines": "1532", "method_info": {"method_name": "zeros", "method_params": "stype,shape,ctx,dtype,kwargs", "method_startline": "1503", "method_endline": "1539", "method_complexity": {"method_NLOC": "12", "method_CCN": "6", "method_NToken": "126", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "1606", "deleted_lines": "1606", "method_info": {"method_name": "array", "method_params": "source_array,ctx,dtype", "method_startline": "1575", "method_endline": "1633", "method_complexity": {"method_NLOC": "25", "method_CCN": "8", "method_NToken": "229", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "1565", "deleted_lines": "1565", "method_info": {"method_name": "empty", "method_params": "stype,shape,ctx,dtype", "method_startline": "1543", "method_endline": "1572", "method_complexity": {"method_NLOC": "12", "method_CCN": "6", "method_NToken": "91", "method_nesting_level": "0"}}}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\mxnet\\symbol\\register.py", "file_new_name": "python\\mxnet\\symbol\\register.py", "file_complexity": {"file_NLOC": "163", "file_CCN": "22", "file_NToken": "809"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "116,118,144,175", "deleted_lines": "116,118,144,175", "method_info": {"method_name": "_generate_symbol_function_code", "method_params": "handle,name,func_name,signature_only", "method_startline": "34", "method_endline": "187", "method_complexity": {"method_NLOC": "142", "method_CCN": "21", "method_NToken": "682", "method_nesting_level": "0"}}}}}, "file_8": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\mxnet\\symbol\\symbol.py", "file_new_name": "python\\mxnet\\symbol\\symbol.py", "file_complexity": {"file_NLOC": "1036", "file_CCN": "309", "file_NToken": "9167"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1770", "deleted_lines": "1770", "method_info": {"method_name": "eval", "method_params": "self,ctx,kwargs", "method_startline": "1733", "method_endline": "1771", "method_complexity": {"method_NLOC": "4", "method_CCN": "2", "method_NToken": "36", "method_nesting_level": "1"}}}}}, "file_9": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\mxnet\\test_utils.py", "file_new_name": "python\\mxnet\\test_utils.py", "file_complexity": {"file_NLOC": "1220", "file_CCN": "158", "file_NToken": "8506"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "57", "deleted_lines": "57", "method_info": {"method_name": "default_context", "method_params": "", "method_startline": "53", "method_endline": "57", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "9", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "62", "deleted_lines": "62", "method_info": {"method_name": "set_default_context", "method_params": "ctx", "method_startline": "60", "method_endline": "62", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "13", "method_nesting_level": "0"}}}}}, "file_10": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "tests\\nightly\\test_tlocal_racecondition.py", "file_complexity": {"file_NLOC": "82", "file_CCN": "13", "file_NToken": "717"}}, "file_11": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\python\\unittest\\test_contrib_operator.py", "file_new_name": "tests\\python\\unittest\\test_contrib_operator.py", "file_complexity": {"file_NLOC": "182", "file_CCN": "16", "file_NToken": "2970"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "45", "deleted_lines": "45", "method_info": {"method_name": "test_box_nms_op", "method_params": "", "method_startline": "28", "method_endline": "159", "method_complexity": {"method_NLOC": "77", "method_CCN": "1", "method_NToken": "1253", "method_nesting_level": "0"}}}}}, "file_12": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "tests\\python\\unittest\\test_operator.py", "file_new_name": "tests\\python\\unittest\\test_operator.py", "file_complexity": {"file_NLOC": "4828", "file_CCN": "801", "file_NToken": "60550"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "4498", "deleted_lines": "4498", "method_info": {"method_name": "test_deformable_psroipooling", "method_params": "", "method_startline": "4470", "method_endline": "4500", "method_complexity": {"method_NLOC": "28", "method_CCN": "7", "method_NToken": "379", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "4462", "deleted_lines": "4462", "method_info": {"method_name": "test_deformable_convolution", "method_params": "", "method_startline": "4430", "method_endline": "4464", "method_complexity": {"method_NLOC": "31", "method_CCN": "8", "method_NToken": "363", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "3717", "deleted_lines": "3717", "method_info": {"method_name": "test_tile", "method_params": "", "method_startline": "3663", "method_endline": "3751", "method_complexity": {"method_NLOC": "13", "method_CCN": "1", "method_NToken": "34", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "4424", "deleted_lines": "4424", "method_info": {"method_name": "test_psroipooling", "method_params": "", "method_startline": "4404", "method_endline": "4426", "method_complexity": {"method_NLOC": "21", "method_CCN": "6", "method_NToken": "300", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "3717", "deleted_lines": "3717", "method_info": {"method_name": "test_tile.test_tile_backward", "method_params": "", "method_startline": "3705", "method_endline": "3727", "method_complexity": {"method_NLOC": "21", "method_CCN": "3", "method_NToken": "248", "method_nesting_level": "1"}}}}}, "file_13": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "tests\\python\\unittest\\test_thread_local.py", "file_complexity": {"file_NLOC": "114", "file_CCN": "16", "file_NToken": "792"}}}}}