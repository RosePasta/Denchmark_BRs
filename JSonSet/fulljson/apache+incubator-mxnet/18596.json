{"BR": {"BR_id": "18596", "BR_author": "leezu", "BRopenT": "2020-06-20T00:15:10Z", "BRcloseT": "2020-06-24T09:03:21Z", "BR_text": {"BRsummary": "TestNode.test_exports fails on macOS following \"Implement ONNX export for gluon LSTM\"", "BRdescription": "\n <denchmark-code>2020-06-19T19:50:34.0061500Z =================================== FAILURES ===================================\n 2020-06-19T19:50:34.0062030Z ____________________________ TestNode.test_exports _____________________________\n 2020-06-19T19:50:34.0064350Z [gw3] darwin -- Python 3.6.10 /Users/runner/hostedtoolcache/Python/3.6.10/x64/bin/python3\n 2020-06-19T19:50:34.0064480Z \n 2020-06-19T19:50:34.0064630Z self = <test_node.TestNode testMethod=test_exports>\n 2020-06-19T19:50:34.0064700Z \n 2020-06-19T19:50:34.0064820Z     def test_exports(self):\n 2020-06-19T19:50:34.0064950Z         for test in export_test_cases:\n 2020-06-19T19:50:34.0065460Z             test_name, onnx_name, mx_op, input_shape, attrs = test\n 2020-06-19T19:50:34.0066030Z             input_sym = mx.sym.var('data')\n 2020-06-19T19:50:34.0066250Z             if isinstance(mx_op, type) and issubclass(mx_op, (mx.gluon.HybridBlock, mx.gluon.SymbolBlock)):\n 2020-06-19T19:50:34.0066520Z                 mx_op = mx_op(**attrs)\n 2020-06-19T19:50:34.0066850Z                 mx_op.initialize()\n 2020-06-19T19:50:34.0067320Z                 mx_op(mx.nd.zeros(input_shape))\n 2020-06-19T19:50:34.0068010Z                 params = {k: v.data() for k, v in mx_op.collect_params().items()}\n 2020-06-19T19:50:34.0068180Z                 outsym = mx_op(input_sym)\n 2020-06-19T19:50:34.0068290Z             else:\n 2020-06-19T19:50:34.0068530Z                 params = {}\n 2020-06-19T19:50:34.0068990Z                 outsym = mx_op(input_sym, **attrs)\n 2020-06-19T19:50:34.0069900Z             converted_model = onnx_mxnet.export_model(outsym, params, [input_shape], np.float32,\n 2020-06-19T19:50:34.0070070Z >                                                     onnx_file_path=outsym.name + \".onnx\")\n 2020-06-19T19:50:34.0070150Z \n 2020-06-19T19:50:34.0071070Z tests/python/unittest/onnx/test_node.py:132: \n 2020-06-19T19:50:34.0071440Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n 2020-06-19T19:50:34.0072310Z python/mxnet/contrib/onnx/mx2onnx/export_model.py:83: in export_model\n 2020-06-19T19:50:34.0072470Z     verbose=verbose)\n 2020-06-19T19:50:34.0073360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n 2020-06-19T19:50:34.0073490Z \n 2020-06-19T19:50:34.0074400Z self = <mxnet.contrib.onnx.mx2onnx.export_onnx.MXNetGraph object at 0x1485d5240>\n 2020-06-19T19:50:34.0074560Z sym = <Symbol lstm12_rnn0>\n 2020-06-19T19:50:34.0075830Z params = {'l0_h2h_bias': \n 2020-06-19T19:50:34.0076400Z [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n 2020-06-19T19:50:34.0076980Z <NDArray 12 @cpu(0)>, 'l0_h2h_weight': \n 2020-06-19T19:50:34.0077470Z [[-0.02334689 -0.006454...  0.03353088]\n 2020-06-19T19:50:34.0077600Z  [ 0.02073693  0.05509142]\n 2020-06-19T19:50:34.0078090Z  [-0.05902549 -0.02687716]\n 2020-06-19T19:50:34.0078570Z  [-0.00526763 -0.02571405]]\n 2020-06-19T19:50:34.0078750Z <NDArray 12x2 @cpu(0)>}\n 2020-06-19T19:50:34.0078880Z in_shape = [(3, 1, 2)], in_type = 1, verbose = False\n 2020-06-19T19:50:34.0078980Z \n 2020-06-19T19:50:34.0079110Z     def create_onnx_graph_proto(self, sym, params, in_shape, in_type, verbose=False):\n 2020-06-19T19:50:34.0079240Z         \"\"\"Convert MXNet graph to ONNX graph\n 2020-06-19T19:50:34.0079410Z     \n 2020-06-19T19:50:34.0079520Z         Parameters\n 2020-06-19T19:50:34.0079990Z         ----------\n 2020-06-19T19:50:34.0080120Z         sym : :class:`~mxnet.symbol.Symbol`\n 2020-06-19T19:50:34.0080240Z             MXNet symbol object\n 2020-06-19T19:50:34.0080430Z         params : dict of ``str`` to :class:`~mxnet.ndarray.NDArray`\n 2020-06-19T19:50:34.0080650Z             Dict of converted parameters stored in ``mxnet.ndarray.NDArray`` format\n 2020-06-19T19:50:34.0081200Z         in_shape : List of tuple\n 2020-06-19T19:50:34.0081380Z             Input shape of the model e.g [(1,3,224,224)]\n 2020-06-19T19:50:34.0081500Z         in_type : data type\n 2020-06-19T19:50:34.0081650Z             Input data type e.g. np.float32\n 2020-06-19T19:50:34.0081940Z         verbose : Boolean\n 2020-06-19T19:50:34.0082160Z             If true will print logs of the model conversion\n 2020-06-19T19:50:34.0082320Z     \n 2020-06-19T19:50:34.0082440Z         Returns\n 2020-06-19T19:50:34.0083120Z         -------\n 2020-06-19T19:50:34.0083270Z         graph : GraphProto\n 2020-06-19T19:50:34.0083390Z             ONNX graph\n 2020-06-19T19:50:34.0083550Z         \"\"\"\n 2020-06-19T19:50:34.0083940Z         try:\n 2020-06-19T19:50:34.0084870Z             from onnx import (checker, helper, NodeProto, ValueInfoProto, TensorProto)\n 2020-06-19T19:50:34.0085040Z             from onnx.helper import make_tensor_value_info\n 2020-06-19T19:50:34.0085180Z         except ImportError:\n 2020-06-19T19:50:34.0085770Z             raise ImportError(\"Onnx and protobuf need to be installed. \"\n 2020-06-19T19:50:34.0086660Z                               + \"Instructions to install - https://github.com/onnx/onnx\")\n 2020-06-19T19:50:34.0086850Z     \n 2020-06-19T19:50:34.0086980Z         # When MXNet model is saved to json file , MXNet adds a node for label.\n 2020-06-19T19:50:34.0087480Z         # The name of this node is, name of the last node + \"_label\" ( i.e if last node\n 2020-06-19T19:50:34.0088230Z         # name is \"Softmax\", this node will have a name \"Softmax_label\". Also, the new node\n 2020-06-19T19:50:34.0088780Z         # will always be second last node in the json graph.\n 2020-06-19T19:50:34.0089230Z         # Deriving the output_label name.\n 2020-06-19T19:50:34.0090540Z         output_label = sym.get_internals()[len(sym.get_internals()) - 1].name + \"_label\"\n 2020-06-19T19:50:34.0090720Z     \n 2020-06-19T19:50:34.0090840Z         weights = MXNetGraph.convert_weights_to_numpy(params)\n 2020-06-19T19:50:34.0091040Z     \n 2020-06-19T19:50:34.0091210Z         mx_graph = json.loads(sym.tojson())[\"nodes\"]\n 2020-06-19T19:50:34.0091340Z     \n 2020-06-19T19:50:34.0091700Z         initializer = []\n 2020-06-19T19:50:34.0091960Z         all_processed_nodes = []\n 2020-06-19T19:50:34.0092290Z         onnx_processed_nodes = []\n 2020-06-19T19:50:34.0092630Z         onnx_processed_inputs = []\n 2020-06-19T19:50:34.0093510Z         onnx_processed_outputs = []\n 2020-06-19T19:50:34.0093660Z         index_lookup = []\n 2020-06-19T19:50:34.0093780Z     \n 2020-06-19T19:50:34.0093900Z         # Determine output and internal shapes\n 2020-06-19T19:50:34.0094790Z         graph_outputs = MXNetGraph.get_outputs(sym, params, in_shape, output_label)\n 2020-06-19T19:50:34.0094980Z         graph_shapes = MXNetGraph.get_outputs(sym.get_internals(), params, in_shape, output_label, verbose=False)\n 2020-06-19T19:50:34.0095330Z     \n 2020-06-19T19:50:34.0095540Z         graph_input_idx = 0\n 2020-06-19T19:50:34.0095840Z         for idx, node in enumerate(mx_graph):\n 2020-06-19T19:50:34.0096120Z             op = node[\"op\"]\n 2020-06-19T19:50:34.0096510Z             name = node[\"name\"]\n 2020-06-19T19:50:34.0096770Z             if verbose:\n 2020-06-19T19:50:34.0097640Z                 logging.info(\"Converting idx: %d, op: %s, name: %s\", idx, op, name)\n 2020-06-19T19:50:34.0097790Z     \n 2020-06-19T19:50:34.0097950Z             # A node is an input node if its op_name is \"null\" and is not\n 2020-06-19T19:50:34.0098340Z             # in params dict\n 2020-06-19T19:50:34.0098690Z             if op == \"null\" and name not in params:\n 2020-06-19T19:50:34.0099030Z                 # Handling graph input\n 2020-06-19T19:50:34.0099530Z     \n 2020-06-19T19:50:34.0099860Z                 # Skipping output_label node, as this node is not part of graph\n 2020-06-19T19:50:34.0100580Z                 # Refer \"output_label\" assignment above for more details.\n 2020-06-19T19:50:34.0101330Z                 if name == output_label:\n 2020-06-19T19:50:34.0101470Z                     continue\n 2020-06-19T19:50:34.0101830Z                 converted = MXNetGraph.convert_layer(\n 2020-06-19T19:50:34.0101960Z                     node,\n 2020-06-19T19:50:34.0102100Z                     is_input=True,\n 2020-06-19T19:50:34.0102230Z                     mx_graph=mx_graph,\n 2020-06-19T19:50:34.0102970Z                     weights=weights,\n 2020-06-19T19:50:34.0103150Z >                   in_shape=in_shape[graph_input_idx],\n 2020-06-19T19:50:34.0103370Z                     in_type=in_type,\n 2020-06-19T19:50:34.0103660Z                     proc_nodes=all_processed_nodes,\n 2020-06-19T19:50:34.0104080Z                     graph_shapes=graph_shapes,\n 2020-06-19T19:50:34.0104580Z                     initializer=initializer,\n 2020-06-19T19:50:34.0104880Z                     index_lookup=index_lookup)\n 2020-06-19T19:50:34.0105270Z E               IndexError: list index out of range\n 2020-06-19T19:50:34.0105430Z \n 2020-06-19T19:50:34.0106450Z python/mxnet/contrib/onnx/mx2onnx/export_onnx.py:233: IndexError\n </denchmark-code>\n \n <denchmark-link:https://github.com/apache/incubator-mxnet/pull/17734>#17734</denchmark-link>\n \n cc <denchmark-link:https://github.com/RuRo>@RuRo</denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "leezu", "commentT": "2020-06-20T17:44:39Z", "comment_text": "\n \t\tAlso happened in <denchmark-link:https://github.com/apache/incubator-mxnet/pull/18579>#18579</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "1fcc7ea8b8f5dfebd3f5440ffe9e0c7d4b13b90f", "commit_author": "RuRo", "commitT": "2020-06-24 02:03:20-07:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\python\\unittest\\onnx\\test_node.py", "file_new_name": "tests\\python\\unittest\\onnx\\test_node.py", "file_complexity": {"file_NLOC": "161", "file_CCN": "20", "file_NToken": "2307"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "126", "deleted_lines": "126", "method_info": {"method_name": "test_exports", "method_params": "self", "method_startline": "118", "method_endline": "134", "method_complexity": {"method_NLOC": "17", "method_CCN": "5", "method_NToken": "165", "method_nesting_level": "1"}}}}}}}}