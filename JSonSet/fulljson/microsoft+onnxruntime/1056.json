{"BR": {"BR_id": "1056", "BR_author": "Legorock", "BRopenT": "2019-05-17T10:09:37Z", "BRcloseT": "2019-05-28T23:38:40Z", "BR_text": {"BRsummary": "Onnx Backend API 'run_model' is broken", "BRdescription": "\n Describe the bug\n A clear and concise description of what the bug is.\n Trying to run an Onnx model with Onnx Backend API raises TypeError exception\n because it cannot call 'rep.run()' with 2 arguments (inputs, options).\n I can invoke rep.run manually with 1 argument however, 'run_model' tries to have 'options' argument as well.\n System information\n \n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\n ONNX Runtime installed from (source or binary): pip install onnxruntime\n ONNX Runtime version:  0.4.0\n Python version: 3.6\n CUDA/cuDNN version, GPU model and memory: no GPU\n \n To Reproduce\n Describe steps/code to reproduce the behavior:\n \n Load an onnx model with onnx.load\n create numpy arrays according to the model input dimensions\n import ONNX Runtime backend such as\n \"from onnxruntime.backend.backend import OnnxRuntimeBackend as backend\"\n run \"backend.run_model(onnx_model, inputs)\"\n \n Expected behavior\n A clear and concise description of what you expected to happen.\n Run  a simple Onnx Model in a runtime agnostic way given the model inputs.\n \n If applicable, add screenshots to help explain your problem.\n In the screenshot, it is not shown but 'rep' object is created with 'cls.prepare' using the onnx model/\n <denchmark-link:https://user-images.githubusercontent.com/6500946/57920756-1986b280-789c-11e9-9d76-02df23007613.png></denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "Legorock", "commentT": "2019-05-17T19:04:02Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/Legorock>@Legorock</denchmark-link>\n  Would you, please, share your script?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "Legorock", "commentT": "2019-05-21T07:39:40Z", "comment_text": "\n \t\tI am not at work until Thursday, I will be able to share my script when I will be in my office.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "Legorock", "commentT": "2019-05-23T07:51:17Z", "comment_text": "\n \t\t<denchmark-code>import sys\n import pathlib\n \n import onnx\n import numpy as np\n from onnxruntime.backend.backend import OnnxRuntimeBackend as backend\n # import caffe2.python.onnx.backend as backend\n \n def gen_inputs(ttypes):\n \treturn [np.random.rand(*[d.dim_value for d in tt.dim])  for tt in ttypes]\n \n def main():\n \tmodel_path = sys.argv[1]\n \tmodel_path = pathlib.Path(model_path)\n \tassert model_path.exists()\n \n \tmodel = onnx.load(str(model_path))\n \n \to_inputs = [x for x in model.graph.input \n \t\t\t\tif not x.name in [y.name for y in model.graph.initializer]]\n \n \tcm_inputs = gen_inputs([i.type.tensor_type.shape for i in o_inputs])\n \tcm_inputs = [n.astype(np.float32) for n in cm_inputs]\n \n \tbackend.run_model(model, cm_inputs)\n \n if __name__ == \"__main__\":\n \tassert len(sys.argv) == 2, \"invalid number of arguments!\"\n \tmain()\n </denchmark-code>\n \n Above is my script. It is supposed to be launched with onnx model as the 1st commad-line argument.\n If you replace  with , it works.\n Output:\n <denchmark-link:https://user-images.githubusercontent.com/6500946/58234793-abc90380-7d3f-11e9-8f97-dfd3c3794d59.png></denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "Legorock", "commentT": "2019-05-28T23:38:40Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/Legorock>@Legorock</denchmark-link>\n  I hope this addresses the issue. Pls, reopen if you feel that something more is needed.\n \t\t"}}}, "commit": {"commit_id": "8c7e4eb3fbf7ba4093a1d2f30e27bfc171bbc957", "commit_author": "Dmitri Smirnov", "commitT": "2019-05-28 16:36:57-07:00", "commit_complexity": {"commit_NLOC": "0.6363636363636364", "commit_CCN": "0.6363636363636364", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "onnxruntime\\python\\backend\\backend.py", "file_new_name": "onnxruntime\\python\\backend\\backend.py", "file_complexity": {"file_NLOC": "55", "file_CCN": "13", "file_NToken": "340"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "94", "deleted_lines": "94", "method_info": {"method_name": "run_model", "method_params": "cls,model,inputs,device,kwargs", "method_startline": "80", "method_endline": "94", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "40", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "onnxruntime\\python\\backend\\backend_rep.py", "file_new_name": "onnxruntime\\python\\backend\\backend_rep.py", "file_complexity": {"file_NLOC": "34", "file_CCN": "10", "file_NToken": "232"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "31,32,33,34,35,36,41,52", "deleted_lines": "34,45", "method_info": {"method_name": "run", "method_params": "self,inputs,kwargs", "method_startline": "26", "method_endline": "52", "method_complexity": {"method_NLOC": "21", "method_CCN": "9", "method_NToken": "193", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "onnxruntime\\test\\python\\onnxruntime_test_python_backend.py", "file_new_name": "onnxruntime\\test\\python\\onnxruntime_test_python_backend.py", "file_complexity": {"file_NLOC": "61", "file_CCN": "8", "file_NToken": "820"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "61,62,63,64,65,66,67,68,69,70,71,72,73", "deleted_lines": null, "method_info": {"method_name": "testRunModelProtoApi", "method_params": "self", "method_startline": "61", "method_endline": "73", "method_complexity": {"method_NLOC": "11", "method_CCN": "1", "method_NToken": "196", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "47,50", "deleted_lines": "49", "method_info": {"method_name": "testRunModelProto", "method_params": "self", "method_startline": "47", "method_endline": "59", "method_complexity": {"method_NLOC": "12", "method_CCN": "1", "method_NToken": "202", "method_nesting_level": "1"}}}}}}}}