{"BR": {"BR_id": "5247", "BR_author": "fdwr", "BRopenT": "2020-09-22T03:15:38Z", "BRcloseT": "2020-09-23T05:01:10Z", "BR_text": {"BRsummary": "lp_norm CPU operator leaves output element uninitialized when 0 norm.", "BRdescription": "\n Describe the bug\n LpNorm leaves some output tensor elements unwritten if the norm is 0 (leaving random values), but it should write every output element, either 0 or NaN. When comparing GPU vs CPU paths, I was getting 0 in the DML GPU but 0xCDCDCDCD for the CPU \ud83e\udd28, which was from this line:\n \\onnxruntime\\core\\providers\\cpu\\nn\\lp_norm.cc\n void DoNormalizeP1(\n     const float* xData,\n     float* yData,\n     const int64_t m,\n     const int64_t n,\n     const int64_t sf) {\n   for (int i = 0; i < n; ++i) {\n     auto base = (i / sf) * sf * m + (i % sf);\n     ConstStridedVec xVec(xData + base, 1, m, InnerStride(sf));\n     auto norm = xVec.template lpNorm<1>();\n >>> if (norm != 0) {\n       StridedVec yVec(yData + base, 1, m, InnerStride(sf));\n >>>   yVec = xVec / norm;\n     }\n   }\n };\n Repro:\n     // P = 1. 2D. Axis 0.\n     {\n       \"op_type\": \"LpNormalization\",\n       \"axis\": 0,\n       \"p\": 1,\n       \"input\":  [[1, 0, 3, 2],\n                  [0, 0, 0, 2]],\n       \"output\": [[1, 0, 1, 0.5],\n                  [0, 0, 0, 0.5]],\n       \"T\": \"float32\"\n     },\n Expected output:\n <denchmark-code>Expected outputs:\n     float32 output[2,4]:\n         [0]/[0,0]: 1 (0x3F800000)\n         [1]/[0,1]: 0 (0x00000000)\n         [2]/[0,2]: 1 (0x3F800000)\n         [3]/[0,3]: 0.5 (0x3F000000)\n         [4]/[1,0]: 0 (0x00000000)\n         [5]/[1,1]: 0 (0x00000000)\n         [6]/[1,2]: 0 (0x00000000)\n         [7]/[1,3]: 0.5 (0x3F000000)\n Actual outputs:\n     float32 output[2,4]:\n         [0]/[0,0]: 1 (0x3F800000)\n         [1]/[0,1]: -4.31602e+08 (0xCDCDCDCD) <<<<<<<<<<<<<<<<<<<<\n         [2]/[0,2]: 1 (0x3F800000)\n         [3]/[0,3]: 0.5 (0x3F000000)\n         [4]/[1,0]: 0 (0x00000000)\n         [5]/[1,1]: -4.31602e+08 (0xCDCDCDCD) <<<<<<<<<<<<<<<<<<<<\n         [6]/[1,2]: 0 (0x00000000)\n         [7]/[1,3]: 0.5 (0x3F000000)\n </denchmark-code>\n \n Urgency\n Not urgent. We've disabled the test case on our side for ORT 1.5.\n System information\n \n OS Platform and Distribution: Windows 10 latest\n ONNX Runtime installed from (source or binary): source\n ONNX Runtime version: master 2020-09-21\n Python version: NA\n Visual Studio version (if applicable): Visual Studio 2017\n GCC/Compiler version (if compiling from source): NA\n CUDA/cuDNN version: NA\n GPU model and memory: NA\n \n To Reproduce\n <denchmark-code>ir_version: 4\n producer_name: \"OnnxConformanceTest\"\n graph {\n   node {\n     input: \"input\"\n     output: \"output\"\n     op_type: \"LpNormalization\"\n     attribute {\n       name: \"axis\"\n       i: 0\n       type: INT\n     }\n     attribute {\n       name: \"p\"\n       i: 1\n       type: INT\n     }\n     domain: \"\"\n   }\n   name: \"LpNormalization_1\"\n   input {\n     name: \"input\"\n     type {\n       tensor_type {\n         elem_type: FLOAT\n         shape {\n           dim {\n             dim_value: 2\n           }\n           dim {\n             dim_value: 4\n           }\n         }\n       }\n     }\n   }\n   output {\n     name: \"output\"\n     type {\n       tensor_type {\n         elem_type: FLOAT\n         shape {\n           dim {\n             dim_value: 2\n           }\n           dim {\n             dim_value: 4\n           }\n         }\n       }\n     }\n   }\n }\n opset_import {\n   domain: \"\"\n   version: 1\n }\n opset_import {\n   domain: \"\"\n   version: 7\n }\n </denchmark-code>\n \n Expected behavior\n 0 or NaN, but all elements written.\n \t"}, "comments": {}}, "commit": {"commit_id": "75d994f1940444022bc22127c87f56636df884a6", "commit_author": "Hariharan Seshadri", "commitT": "2020-09-22 22:01:09-07:00", "commit_complexity": {"commit_NLOC": "0.8260869565217391", "commit_CCN": "1.0", "commit_Nprams": "0.8260869565217391"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "onnxruntime\\core\\providers\\cpu\\nn\\lp_norm.cc", "file_new_name": "onnxruntime\\core\\providers\\cpu\\nn\\lp_norm.cc", "file_complexity": {"file_NLOC": "65", "file_CCN": "9", "file_NToken": "565"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "49,50,54,55,56", "deleted_lines": "47", "method_info": {"method_name": "onnxruntime::DoNormalizeP1", "method_params": "xData,yData,m,n,sf", "method_startline": "40", "method_endline": "59", "method_complexity": {"method_NLOC": "18", "method_CCN": "3", "method_NToken": "130", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "28,29,33,34,35", "deleted_lines": "30", "method_info": {"method_name": "onnxruntime::DoNormalizeP2", "method_params": "xData,yData,m,n,sf", "method_startline": "19", "method_endline": "38", "method_complexity": {"method_NLOC": "18", "method_CCN": "3", "method_NToken": "130", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "onnxruntime\\test\\providers\\cpu\\nn\\lp_norm_op_test.cc", "file_new_name": "onnxruntime\\test\\providers\\cpu\\nn\\lp_norm_op_test.cc", "file_complexity": {"file_NLOC": "107", "file_CCN": "6", "file_NToken": "1338"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "110,111,112,113,114,115,116,117,118,119,120,121,122,123", "deleted_lines": null, "method_info": {"method_name": "onnxruntime::test::TEST", "method_params": "LpNormalizationTest,L1NormalizationWithZeroNorm", "method_startline": "110", "method_endline": "123", "method_complexity": {"method_NLOC": "10", "method_CCN": "1", "method_NToken": "123", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "125,126,127,128,129,130,131,132,133,134,135,136,137", "deleted_lines": null, "method_info": {"method_name": "onnxruntime::test::TEST", "method_params": "LpNormalizationTest,L2NormalizationWithZeroNorm", "method_startline": "125", "method_endline": "137", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "108", "method_nesting_level": "2"}}}}}}}}