{"BR": {"BR_id": "4014", "BR_author": "freedenS", "BRopenT": "2020-05-21T10:13:03Z", "BRcloseT": "2020-06-29T10:10:02Z", "BR_text": {"BRsummary": "The output is different with the same input on CUDA", "BRdescription": "\n Describe the bug\n I trained a MaskRcnn model and convert it to onnx. When i use test images to do inference,it can give the correct output. But if i do the inference with a white image (all 255) first, and then use test images to do inference, it can't recognize correctly with onnxruntime-gpu1.3.0.\n if i use onnxruntime1.3.0, it will not happen.\n System information\n \n OS Platform and Distribution :Windows 10 (c++) & Linux Ubuntu 16.04(python3.7)\n ONNX Runtime installed from :binary from pip install\n ONNX Runtime version:1.3.0\n Python version:3.7\n Visual Studio version (if applicable):2017\n GCC/Compiler version (if compiling from source):compiling from binary\n CUDA/cuDNN version:CUDA10.1 & cuDNN7.6.5\n GPU model and memory:2080Ti 11G\n \n To Reproduce\n \n Describe steps/code to reproduce the behavior.\n Attach the ONNX model to the issue (where applicable) to expedite investigation.\n onnx model and images are here https://drive.google.com/open?id=1c7GDq8AYgneP6mdqFPSH1GKl7Oggn8Mq\n do the inference with a white image (all 255) first, and then use test images to do inference\n \n <denchmark-code>import os\n import onnxruntime\n import cv2\n import torch #1.5.0\n from detectron2.data.transforms as T #just for resize\n filelist = os.listdir('./')\n sess = onnxruntime.InferenceSession('./segmentation.onnx')\n for i in filelist:\n     inputs = cv2.imread('./' + i)\n     transform_gen = T.ResizeShortestEdge([800,800],1333)\n     inputs = transform_gen.get_transform(inputs).apply_image(inputs)\n     inputs = torch.as_tensor(inputs.astype('float32').transpose(2,0,1))\n     inputs = inputs.unsqueeze(0)\n     res = sess.run(None, {sess.get_inputs()[0].name:inputs.numpy()})\n     print (res)\n </denchmark-code>\n \n \n If applicable, add screenshots to help explain your problem.\n <denchmark-link:https://user-images.githubusercontent.com/26213470/82542042-eb5d4200-9b83-11ea-8272-174bdc6d6972.png></denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "freedenS", "commentT": "2020-05-23T08:32:59Z", "comment_text": "\n \t\tIs 1.jpg the fully white image and 2.jpg a normal test image ?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "freedenS", "commentT": "2020-05-25T08:47:15Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/hariharans29>@hariharans29</denchmark-link>\n  Yes\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "freedenS", "commentT": "2020-05-27T01:24:53Z", "comment_text": "\n \t\tThanks. I ll take a look.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "freedenS", "commentT": "2020-05-27T02:53:11Z", "comment_text": "\n \t\tThank you!\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "freedenS", "commentT": "2020-06-08T08:43:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/hariharans29>@hariharans29</denchmark-link>\n  anything new?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "freedenS", "commentT": "2020-06-11T04:58:42Z", "comment_text": "\n \t\tSorry - I haven't had time to look at this yet. I ll try and take a look soon.\n My guess is that when you feed in all 255's, CUDA/ CuDNN /CuBLAS doesn't like it (maybe triggers a numerical overflow in some operation ?) and the CUDA EP goes into a bad state after this and hence you see issues with subsequent runs.\n Also, usually there is a \"pre-processing step\" for image models which involves subtracting per channel mean and dividing by the per channel std deviation. Not sure, if the all 255 image causes an issue because of this (because clearly it is not \"pre-processed\").\n Does this all 255 image issue block your use-case in any way or is it just that you are curious about it ?\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "freedenS", "commentT": "2020-06-11T06:58:04Z", "comment_text": "\n \t\tThanks for your reply!\n i move the preprocess into inference(include subtract mean and divide std deviation), so the preprocess of my model is only image resize.(will it cause the problem?)\n This problem will happen only when the model is mask-rcnn, the Conv_3281 is in mask_head layer.\n I test some faster-rcnn models, and haven't found this problem.\n And i find that some normal images (such as other model's test image) could also cause this problem.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "freedenS", "commentT": "2020-06-12T19:38:33Z", "comment_text": "\n \t\tOh so the preprocessing is built into the model ? I see. Okay- I ll take a look at this very soon.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "freedenS", "commentT": "2020-06-13T04:14:11Z", "comment_text": "\n \t\tYes, the preprocessing(subtracting per channel mean, dividing by the per channel std deviation and padding for fpn) is built into the model.\n In addition, I have made some other attempts.Hope it will be useful.\n \n if i move the preprocessing out, and add image_size as second input which is used by clip.\n result: I can only get segmentation fault (core dumped)\n if i move the preprocessing out, and use current input's size for clip (after resize and padding, it may be out of image's boundary)\n result: I got the correct result!\n No matter which way I choose\uff0c i can get the correct result as long as i use onnxruntime1.3(cpu)\n Thank you!\n \n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "freedenS", "commentT": "2020-06-16T22:06:05Z", "comment_text": "\n \t\tTaking a look at the model as is (with preprocessing inside it)\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "freedenS", "commentT": "2020-06-18T20:46:47Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/freedenS>@freedenS</denchmark-link>\n   - What is the tensor dimension for height and width ? Is there any aspect ration to be maintained between the two ?\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "freedenS", "commentT": "2020-06-18T21:21:58Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/freedenS>@freedenS</denchmark-link>\n  ,\n I couldn't repro this with the height == width == 224. See below - I run all 255s and random valued inputs alternately. I tried with 1.3.0 onnxruntime GPU package (you can uncomment the appropriate lines as you run on your box) . I set log_severity_level to 0 and confirmed that a lot (almost all nodes) got placed on the CUDA EP.\n I think I might know why you are running into this issue. Are you using a fixed height and width combination between runs ? My guess is that you are varying height and width. The model is annotated with \"dynamic\" dim values for height and width - this is a little misleading - while ORT as an engine will accept any dim value, the model might inherently expect that there be some relationship (aspect ratio) between the height and width and the model will work on the assumption that the user has adhered to this requirement and when this is not met the model is bound to fail. You need to check what shapes the model was trained with and check if you need to adhere to any aspect ratio requirements.\n <denchmark-code>\n import onnxruntime as rt\n import numpy as np\n \n opt = rt.SessionOptions()\n \n # Uncomment to see which nodes get placed on CUDA EP\n #opt.log_severity_level = 0\n \n sess = rt.InferenceSession(r'segmentation.onnx', opt)\n \n input_name_0 = sess.get_inputs()[0].name\n \n # run 1 - all 255\n input_0 = np.zeros((1, 3, 224, 224), dtype = np.float32)\n input_0 += 255\n #print(input_0)\n pred_onnx_0 = sess.run(None, {input_name_0: input_0})\n print(pred_onnx_0[0])\n \n # run 2 - random\n input_1 = np.random.rand(1, 3, 224, 224).astype(np.float32)\n #print(input_1)\n pred_onnx_1 = sess.run(None, {input_name_0: input_1})\n print(pred_onnx_1[0])\n \n # run 3 - all 255\n pred_onnx_2 = sess.run(None, {input_name_0: input_0})\n print(pred_onnx_2[0])\n \n # run 2 - random\n pred_onnx_3 = sess.run(None, {input_name_0: input_1})\n print(pred_onnx_3[0])\n \n print (\"Done\")\n </denchmark-code>\n \n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "freedenS", "commentT": "2020-06-18T21:38:44Z", "comment_text": "\n \t\tOh I just saw your input script and noticed that you were feeding [800, 800] inputs and I could hit the issue with that. My guess is that there is something in the input combination (input shape + ConvTranspose attributes that CuDNN does not like). This doesn't look like it is an ORT issue in that it doesn't break runs after you feed it all 255s.\n I ll debug what shapes the inputs have by the time it reaches the faulty ConvTranspose node in some time.\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "freedenS", "commentT": "2020-06-19T03:59:32Z", "comment_text": "\n \t\t\n Hi @freedenS - What is the tensor dimension for height and width ? Is there any aspect ration to be maintained between the two ?\n \n The height and width are equal to input's which are dynamic.\n There isn't any aspect ration to be maintained between the height and width.\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "freedenS", "commentT": "2020-06-19T04:01:44Z", "comment_text": "\n \t\t\n Hi @freedenS ,\n I couldn't repro this with the height == width == 224. See below - I run all 255s and random valued inputs alternately. I tried with 1.3.0 onnxruntime GPU package (you can uncomment the appropriate lines as you run on your box) . I set log_severity_level to 0 and confirmed that a lot (almost all nodes) got placed on the CUDA EP.\n I think I might know why you are running into this issue. Are you using a fixed height and width combination between runs ? My guess is that you are varying height and width. The model is annotated with \"dynamic\" dim values for height and width - this is a little misleading - while ORT as an engine will accept any dim value, the model might inherently expect that there be some relationship (aspect ratio) between the height and width and the model will work on the assumption that the user has adhered to this requirement and when this is not met the model is bound to fail. You need to check what shapes the model was trained with and check if you need to adhere to any aspect ratio requirements.\n \n import onnxruntime as rt\n import numpy as np\n \n opt = rt.SessionOptions()\n \n # Uncomment to see which nodes get placed on CUDA EP\n #opt.log_severity_level = 0\n \n sess = rt.InferenceSession(r'segmentation.onnx', opt)\n \n input_name_0 = sess.get_inputs()[0].name\n \n # run 1 - all 255\n input_0 = np.zeros((1, 3, 224, 224), dtype = np.float32)\n input_0 += 255\n #print(input_0)\n pred_onnx_0 = sess.run(None, {input_name_0: input_0})\n print(pred_onnx_0[0])\n \n # run 2 - random\n input_1 = np.random.rand(1, 3, 224, 224).astype(np.float32)\n #print(input_1)\n pred_onnx_1 = sess.run(None, {input_name_0: input_1})\n print(pred_onnx_1[0])\n \n # run 3 - all 255\n pred_onnx_2 = sess.run(None, {input_name_0: input_0})\n print(pred_onnx_2[0])\n \n # run 2 - random\n pred_onnx_3 = sess.run(None, {input_name_0: input_1})\n print(pred_onnx_3[0])\n \n print (\"Done\")\n \n \n I'll try this.\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "freedenS", "commentT": "2020-06-19T04:33:48Z", "comment_text": "\n \t\tSorry - I realized the issue now. For the input dims you are feeding there is no output, and this \"empty\" output is handled fine in the first run but there is a bug that meant on the subsequent run, this \"empty\" output was not gracefully handled. I have a fix PR for out. Thanks for reporting.\n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "freedenS", "commentT": "2020-06-19T04:36:31Z", "comment_text": "\n \t\t\n Oh I just saw your input script and noticed that you were feeding [800, 800] inputs and I could hit the issue with that. My guess is that there is something in the input combination (input shape + ConvTranspose attributes that CuDNN does not like). This doesn't look like it is an ORT issue in that it doesn't break runs after you feed it all 255s.\n I ll debug what shapes the inputs have by the time it reaches the faulty ConvTranspose node in some time.\n \n I resize the input as is (min_size:800 and max_size:1333).\n please allow me to describe the problem again.\n There are img1 and img2.\n img2 is a normal test image and img1 isn't a normal test image (because i test some other images and also cause this problem)\n inference: img2\n res: correct result\n inference: img1, img2\n res: empty result, errormsg(Conv_3281 or segmentation fault)\n it looks like the model (after inference with img1) is different with before.\n \t\t"}, "comments_17": {"comment_id": 18, "comment_author": "freedenS", "commentT": "2020-06-19T04:39:17Z", "comment_text": "\n \t\tThe error will go away after <denchmark-link:https://github.com/microsoft/onnxruntime/pull/4281>#4281</denchmark-link>\n .\n Can you try this and see if this output is experienced ?\n inference: img1, img1\n res: empty result, errormsg(Conv_3281 or segmentation fault)\n \t\t"}, "comments_18": {"comment_id": 19, "comment_author": "freedenS", "commentT": "2020-06-19T04:41:10Z", "comment_text": "\n \t\tget it!\n Thank you!\n \t\t"}, "comments_19": {"comment_id": 20, "comment_author": "freedenS", "commentT": "2020-06-19T06:12:01Z", "comment_text": "\n \t\t\n The error will go away after #4281.\n Can you try this and see if this output is experienced ?\n inference: img1, img1\n res: empty result, errormsg(Conv_3281 or segmentation fault)\n \n I have tried this.\n the size of img1 is equal to img2.(img1 is other model's train image, not fully white image)\n inference: img1, img1\n res: empty result, empty result\n inference: img1, img1, img2\n res: empty result, empty result, errormsg(Conv_3281 or segmentation fault)\n \t\t"}, "comments_20": {"comment_id": 21, "comment_author": "freedenS", "commentT": "2020-06-19T06:18:07Z", "comment_text": "\n \t\t\n \n The error will go away after #4281.\n Can you try this and see if this output is experienced ?\n inference: img1, img1\n res: empty result, errormsg(Conv_3281 or segmentation fault)\n \n I have tried this.\n the size of img1 is equal to img2.(img1 is other model's train image, not fully white image)\n inference: img1, img1\n res: empty result, empty result\n inference: img1, img1, img2\n res: empty result, empty result, errormsg(Conv_3281 or segmentation fault)\n \n Can you please try building from source with my PR and checking if the issue goes away ?\n \t\t"}, "comments_21": {"comment_id": 22, "comment_author": "freedenS", "commentT": "2020-06-19T06:20:23Z", "comment_text": "\n \t\tok, i'll take a try.\n \t\t"}, "comments_22": {"comment_id": 23, "comment_author": "freedenS", "commentT": "2020-06-19T06:21:46Z", "comment_text": "\n \t\tThanks, and just to be clear - I have used the original model you shared in the issue description (preprocessing inside I think)\n \t\t"}, "comments_23": {"comment_id": 24, "comment_author": "freedenS", "commentT": "2020-06-19T06:24:24Z", "comment_text": "\n \t\tOk. ^v^\n \t\t"}, "comments_24": {"comment_id": 25, "comment_author": "freedenS", "commentT": "2020-06-19T13:21:52Z", "comment_text": "\n \t\tI have built from source with your PR and tested the model i shared, but the problem (Conv_3281) still exists.\n \t\t"}, "comments_25": {"comment_id": 26, "comment_author": "freedenS", "commentT": "2020-06-19T19:10:39Z", "comment_text": "\n \t\tStrange. In my case - the error I hit was in a ConvTranspose node (some nodes below the Conv node you are experiencing issues with) -\n <denchmark-link:https://user-images.githubusercontent.com/9969784/85174243-d7ac0680-b229-11ea-9637-d681399e96bd.png></denchmark-link>\n \n And I am guessing you build from master right (not rel-1.3.0) ?\n Any chance you ' ll be able to share the tensors being used for the 2 runs ? You can construct 2 .pb files using the ONNX Python APIs here to convert from numpy arrays to .pb - <denchmark-link:https://github.com/onnx/onnx/blob/master/docs/PythonAPIOverview.md>https://github.com/onnx/onnx/blob/master/docs/PythonAPIOverview.md</denchmark-link>\n . That will make it easier to investigate. Thanks!\n \t\t"}, "comments_26": {"comment_id": 27, "comment_author": "freedenS", "commentT": "2020-06-22T09:24:37Z", "comment_text": "\n \t\tsorry for the late reply, the error I hit was in Conv_3281.\n I have met the same problem with python3.7 (pip install from binary) and c++(download from <denchmark-link:https://github.com/microsoft/onnxruntime/releases/download/v1.3.0/onnxruntime-win-x64-gpu-1.3.0.zip>https://github.com/microsoft/onnxruntime/releases/download/v1.3.0/onnxruntime-win-x64-gpu-1.3.0.zip</denchmark-link>\n ). My opencv version is 4.2\n And i built from <denchmark-link:https://github.com/microsoft/onnxruntime/pull/4281>#4281</denchmark-link>\n  , only got the same result.\n I'll upload the pb files soon.\n \t\t"}, "comments_27": {"comment_id": 28, "comment_author": "freedenS", "commentT": "2020-06-22T20:03:43Z", "comment_text": "\n \t\tThanks!\n I ll take a look again after you upload the pb files.\n \t\t"}, "comments_28": {"comment_id": 29, "comment_author": "freedenS", "commentT": "2020-06-23T06:13:16Z", "comment_text": "\n \t\tHere are the pb files.<denchmark-link:https://drive.google.com/file/d/1qLZpY3lU6lmVQFPmPTnK9_C2MRaoj2K4/view?usp=sharing>https://drive.google.com/file/d/1qLZpY3lU6lmVQFPmPTnK9_C2MRaoj2K4/view?usp=sharing</denchmark-link>\n \n \t\t"}, "comments_29": {"comment_id": 30, "comment_author": "freedenS", "commentT": "2020-06-24T18:20:53Z", "comment_text": "\n \t\tAwesome, thanks.\n \t\t"}, "comments_30": {"comment_id": 31, "comment_author": "freedenS", "commentT": "2020-06-25T05:36:23Z", "comment_text": "\n \t\tLooking at this. One question - do you get this issue when you run the two cases concurrently ? If so, can you try running one at a time sequentially ?\n \t\t"}, "comments_31": {"comment_id": 32, "comment_author": "freedenS", "commentT": "2020-06-25T14:02:44Z", "comment_text": "\n \t\tsorry, what are the two cases mean?\n \t\t"}, "comments_32": {"comment_id": 33, "comment_author": "freedenS", "commentT": "2020-06-26T06:36:30Z", "comment_text": "\n \t\tHey, never mind. I think I figured out the issue (finally :))! I ll update the same PR- please try after I update it.\n Thanks for reporting!\n \t\t"}, "comments_33": {"comment_id": 34, "comment_author": "freedenS", "commentT": "2020-06-26T23:33:16Z", "comment_text": "\n \t\tCan you please try building from source again and checking (with the PR) ? I could get the two inputs to pass with the fixes.\n \t\t"}, "comments_34": {"comment_id": 35, "comment_author": "freedenS", "commentT": "2020-06-28T02:21:07Z", "comment_text": "\n \t\tThank you!\n I'll try again.\n \t\t"}, "comments_35": {"comment_id": 36, "comment_author": "freedenS", "commentT": "2020-06-29T10:09:56Z", "comment_text": "\n \t\tAwesome! It works!\n Thank you very much!\n \t\t"}}}, "commit": {"commit_id": "465140b3842289ddc86d908bffe47c0701037059", "commit_author": "Hariharan Seshadri", "commitT": "2020-06-29 16:07:42-07:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "0.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "onnxruntime\\core\\providers\\cuda\\nn\\conv.cc", "file_new_name": "onnxruntime\\core\\providers\\cuda\\nn\\conv.cc", "file_complexity": {"file_NLOC": "186", "file_CCN": "24", "file_NToken": "1580"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "115,116,117,118,119,120,121,122,123,124,125", "deleted_lines": "98,99,100,101,115,116", "method_info": {"method_name": "onnxruntime::cuda::Conv<T>::ComputeInternal", "method_params": "context", "method_startline": "37", "method_endline": "211", "method_complexity": {"method_NLOC": "139", "method_CCN": "18", "method_NToken": "1294", "method_nesting_level": "2"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "onnxruntime\\core\\providers\\cuda\\nn\\conv_transpose.cc", "file_new_name": "onnxruntime\\core\\providers\\cuda\\nn\\conv_transpose.cc", "file_complexity": {"file_NLOC": "145", "file_CCN": "22", "file_NToken": "1299"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "70,99,100,101,102,103,104,105,106,107,108,109,162,163,164,165,166,167,168,169,170,171,172,173,174,175,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203", "deleted_lines": "70,85,86,87,88,89,101,102,103,158,160,161,162,163,165,166,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193", "method_info": {"method_name": "onnxruntime::cuda::ConvTranspose<T>::DoConvTranspose", "method_params": "context,dynamic_padding", "method_startline": "39", "method_endline": "207", "method_complexity": {"method_NLOC": "132", "method_CCN": "21", "method_NToken": "1243", "method_nesting_level": "2"}}}}}}}}