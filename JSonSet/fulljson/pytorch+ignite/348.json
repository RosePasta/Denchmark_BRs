{"BR": {"BR_id": "348", "BR_author": "vfdev-5", "BRopenT": "2018-11-29T00:15:41Z", "BRcloseT": "2018-12-13T22:13:27Z", "BR_text": {"BRsummary": "Bug in binary precision", "BRdescription": "\n Basic tests of binary precision seem to fail:\n precision = Precision(average=True)\n \n y_pred = torch.rand(10, 1)\n y = torch.randint(0, 2, size=(10,)).type(torch.LongTensor)\n \n precision.update((y_pred, y))\n \n np_y = y.numpy().ravel()\n np_y_pred = (y_pred.numpy().ravel() > 0.5).astype('int')\n \n precision_score(np_y, np_y_pred), precision.compute()\n <denchmark-link:https://github.com/jasonkriss>@jasonkriss</denchmark-link>\n  could you please confirm this ?\n EDIT: Another failing test: <denchmark-link:https://github.com/pytorch/ignite/pull/333#issuecomment-442643530>#333 (comment)</denchmark-link>\n \n Probably, the error is at binary to categorical mapping and counting class-0 similarly to class-1. But in binary case we should ignore class-0.\n There is also input \"binary or categorical\" checking is missing if user tries to mix both in several updates.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "vfdev-5", "commentT": "2018-11-29T00:34:44Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/vfdev-5>@vfdev-5</denchmark-link>\n  this might be happening because we map binary into categorical thus creating precision for 2 classes and then average it.\n If we treat binary as just once class and round it, we should get the same answer.\n The reason we\u2019re different answers is because of ignite treats it as 2 classes while sklearn treats it as 1 class.\n Works on my local machine. Will try with all the binary tests.\n EDIT: I just saw your edit lol\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "vfdev-5", "commentT": "2018-11-29T00:37:41Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/anmolsjoshi>@anmolsjoshi</denchmark-link>\n  I thought to add an attribute  like this:\n class Precision(Metric):\n     def __init__(self, output_transform=lambda x: x, is_multilabel=False, average=False, threshold_function=None):\n         self._average = average\n         if is_multilabel:\n             if threshold_function is None:\n                 self._threshold = torch.round\n             else:\n                 if callable(threshold_function):\n                     self._threshold = threshold_function\n                 else:\n                     raise ValueError(\"threshold_function must be a callable function.\")\n             if not self._average:\n                 warnings.warn('average should be True for multilabel cases. Precision._average updated'\n                               ' to True. Average is calculated across samples, instead of classes.', UserWarning)\n                 self._average = True\n             self.update = self._update_multilabel\n         else:\n             self.update = self._update_multiclass\n         super(Precision, self).__init__(output_transform=output_transform)\n         self._is_binary = None\n \n     def reset(self):\n         self._all_positives = None\n         self._true_positives = None\n         self._is_binary = None\n \n ...\n \n     def _update_multiclass(self, output):\n         y_pred, y = output\n         dtype = y_pred.type()\n \n         if not (y.ndimension() == y_pred.ndimension() or y.ndimension() + 1 == y_pred.ndimension()):\n             raise ValueError(\"y must have shape of (batch_size, ...) and y_pred must have \"\n                              \"shape of (batch_size, num_categories, ...) or (batch_size, ...).\")\n \n         if y.ndimension() == 1 or y.shape[1] == 1:\n             # Binary Case, flattens y and num_classes is equal to 1.\n             y = y.squeeze(dim=1).view(-1) if (y.ndimension() > 1) else y.view(-1)\n \n         if y_pred.ndimension() == 1 or y_pred.shape[1] == 1:\n             # Binary Case, flattens y and num_classes is equal to 1.\n             y_pred = y_pred.squeeze(dim=1).view(-1) if (y_pred.ndimension() > 1) else y_pred.view(-1)\n \n         y_shape = y.shape\n         y_pred_shape = y_pred.shape\n \n         if y.ndimension() + 1 == y_pred.ndimension():\n             y_pred_shape = (y_pred_shape[0],) + y_pred_shape[2:]\n \n         if not (y_shape == y_pred_shape):\n             raise ValueError(\"y and y_pred must have compatible shapes.\")\n \n         if y_pred.ndimension() == y.ndimension():\n             # Maps Binary Case to Categorical Case with 2 classes\n             y_pred = y_pred.unsqueeze(dim=1)\n             y_pred = torch.cat([1.0 - y_pred, y_pred], dim=1)\n             if self._is_binary is None:\n                 self._is_binary = True\n             elif not self._is_binary:\n                 raise ValueError(\"A binary y (shape={}) or y_pred (shape={}) values encountered while previous \"\n                                  \"values are categorical.\".format(y.shape, y_pred.shape))\n \n         y = to_onehot(y.view(-1), num_classes=y_pred.size(1))\n         indices = torch.max(y_pred, dim=1)[1].view(-1)\n         y_pred = to_onehot(indices, num_classes=y_pred.size(1))\n \n         y_pred = y_pred.type(dtype)\n         y = y.type(dtype)\n \n         correct = y * y_pred\n         all_positives = y_pred.sum(dim=0)\n \n         if self._is_binary:\n             correct = correct[:, 1, ...]\n             all_positives = all_positives[1, ...]\n \n         if correct.sum() == 0:\n             true_positives = torch.zeros_like(all_positives)\n         else:\n             true_positives = correct.sum(dim=0)\n         if self._all_positives is None:\n             self._all_positives = all_positives\n             self._true_positives = true_positives\n         else:\n             self._all_positives += all_positives\n             self._true_positives += true_positives\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "vfdev-5", "commentT": "2018-11-29T00:40:52Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/anmolsjoshi>@anmolsjoshi</denchmark-link>\n  IMO we should fix this bug in priority before merging multilabel case.\n And we need to add more strong tests.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "vfdev-5", "commentT": "2018-11-29T06:07:36Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/vfdev-5>@vfdev-5</denchmark-link>\n  I agree that we should correct this bug.\n What are your thoughts on splitting the Metric (Accuracy, Precision and Recall) as shown below:\n \n \n Have a _check_output function that decides whether the problem is binary, multiclass, multilabel. The output of this function is y_pred, y, type. Type can be determined by shape. This bypasses the need for is_multilabel argument.\n \n \n In the case of binary or multilabel, make threshold_function (initialized as None or user input) torch.round or user_input. I honestly think we need to use a threshold for binary problems rather than converting them to multiclass problem.\n \n \n In one common update function, binary and multilabel are handled similarly and we keep multiclass handling the same.\n \n \n Only change needed then would be on how self._true_positives and self._all_positives are accumulated.\n \n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "vfdev-5", "commentT": "2018-11-29T06:44:20Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/vfdev-5>@vfdev-5</denchmark-link>\n  see code below\n I think if we can find a method to see if self.output_type changes during training, we can raise an error.\n class Precision(Metric):\n     def __init__(self, output_transform=lambda x: x, average=False, threshold_function=None):\n         self._average = average\n \n         if threshold_function is not None:\n             if callable(threshold_function):\n                 self._threshold = threshold_function\n             else:\n                 raise ValueError(\"threshold_function must be a callable function.\")\n         else:\n             self._threshold = torch.round\n         super(Precision, self).__init__(output_transform=output_transform)\n \n     def _check_output(self, output):\n \n         y_pred, y = output\n \n         if not (y.ndimension() == y_pred.ndimension() or y.ndimension() + 1 == y_pred.ndimension()):\n             raise ValueError(\"y must have shape of (batch_size, ...) and y_pred must have \"\n                              \"shape of (batch_size, num_categories, ...) or (batch_size, ...).\")\n \n         if y.ndimension() == 1 or y.shape[1] == 1:\n             # Binary Case, flattens y and num_classes is equal to 1.\n             y = y.squeeze(dim=1).view(-1) if (y.ndimension() > 1) else y.view(-1)\n \n         if y_pred.ndimension() == 1 or y_pred.shape[1] == 1:\n             # Binary Case, flattens y and num_classes is equal to 1.\n             y_pred = y_pred.squeeze(dim=1).view(-1) if (y_pred.ndimension() > 1) else y_pred.view(-1)\n \n         y_shape = y.shape\n         y_pred_shape = y_pred.shape\n \n         if y.ndimension() + 1 == y_pred.ndimension():\n             y_pred_shape = (y_pred_shape[0],) + y_pred_shape[2:]\n \n         if not (y_shape == y_pred_shape):\n             raise ValueError(\"y and y_pred must have compatible shapes.\")\n \n         if y.ndimension() + 1 == y_pred.ndimension():\n             self.output_type = 'multiclass'\n             self.axis = 0\n             self.update_func = sum\n \n         elif y_pred.shape == y.shape and not y.ndimension() == 1:\n             self.output_type = 'multilabel'\n             self.axis = 1\n             self.update_func = torch.cat\n \n             if y_pred.ndimension() > 2:\n                 num_classes = y_pred.size(1)\n                 y_pred = torch.transpose(y_pred, 1, 0).contiguous().view(num_classes, -1).transpose(1, 0)\n                 y = torch.transpose(y, 1, 0).contiguous().view(num_classes, -1).transpose(1, 0)\n \n             if not self._average:\n                 warnings.warn('average should be True for multilabel cases. Precision._average updated'\n                               ' to True. Average is calculated across samples, instead of classes.', UserWarning)\n                 self._average = True\n \n         elif y_pred.shape == y.shape and y.ndimension() == 1:\n             self.output_type = 'binary'\n             self.axis = 0\n             self.update_func = sum\n \n         else:\n             raise ValueError()\n \n         return y_pred, y\n \n     def update(self, output):\n         y_pred, y = self._check_output(output)\n         dtype = y_pred.type()\n \n         if self.output_type == 'multiclass':\n             y = to_onehot(y.view(-1), num_classes=y_pred.size(1))\n             indices = torch.max(y_pred, dim=1)[1].view(-1)\n             y_pred = to_onehot(indices, num_classes=y_pred.size(1))\n         else:\n             y_pred = self._threshold(y_pred)\n \n             if torch.equal(y, y**2):\n                 raise ValueError()\n \n             if torch.equal(y_pred, y_pred**2):\n                 raise ValueError()\n \n         y_pred = y_pred.type(dtype)\n         y = y.type(dtype)\n \n         correct = y * y_pred\n         all_positives = y_pred.sum(dim=self.axis)\n \n         if correct.sum() == 0:\n             true_positives = torch.zeros_like(all_positives)\n         else:\n             true_positives = correct.sum(dim=self.axis)\n \n         if self._all_positives is None:\n             self._all_positives = all_positives\n             self._true_positives = true_positives\n         else:\n \n             self._all_positives = self.update_func([self._all_positives, all_positives])\n             self._true_positives = self.update_func([self._true_positives, true_positives])\n \n     def compute(self):\n         if self._all_positives is None:\n             raise NotComputableError('Precision must have at least one example before it can be computed')\n \n         result = self._true_positives / self._all_positives\n         result[result != result] = 0.0\n         if self._average:\n             return result.mean().item()\n         else:\n             return result\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "vfdev-5", "commentT": "2018-11-29T07:47:38Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/anmolsjoshi>@anmolsjoshi</denchmark-link>\n  if we unify all cases, we should make sure that the implementation is bullet-proof, all tricky cases are covered when user tries to mix types: binary, categorial, multilabel in updates during the same computation session. IMO, it becomes very difficult to follow the implementation.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "vfdev-5", "commentT": "2018-11-29T17:43:24Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/vfdev-5>@vfdev-5</denchmark-link>\n  I agree with your implementation. I'll incorporate it into the current PR <denchmark-link:https://github.com/pytorch/ignite/pull/333>#333</denchmark-link>\n  and update the binary tests accordingly for Precision and Recall i.e. not map y_pred to 2 classes when using sklearn.\n Maybe in the future we can think of a more a sophisticated approach to unify all cases.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "vfdev-5", "commentT": "2018-12-06T17:03:37Z", "comment_text": "\n \t\tOnce this is merged we should probably cut a release. I think for bugfixes we should release often, just to avoid anyone running for too long with a buggy version\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "vfdev-5", "commentT": "2018-12-07T07:32:49Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/alykhantejani>@alykhantejani</denchmark-link>\n , so new release version will be  or  ?\n If  then we need also to remove ,  as mentioned in warnings\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "vfdev-5", "commentT": "2018-12-07T12:31:30Z", "comment_text": "\n \t\tSo we could follow the pytorch path here. 0.2 can contain the backwards incompatible changes and this can be 0.1.2, we can switch the warning message to say 0.2 and all the current tickets assigned to 0.1.2 we can just move to 0.2 and that can be the next release (pending no further bug fixes).\n wdyt?\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "vfdev-5", "commentT": "2018-12-07T22:01:52Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/alykhantejani>@alykhantejani</denchmark-link>\n  sounds good, let's do it like you propose\n \t\t"}}}, "commit": {"commit_id": "8558a8fc3be0b01af86da6f2e2dbd9464624950c", "commit_author": "Anmol Joshi", "commitT": "2018-12-13 23:13:26+01:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "0.244", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "ignite\\metrics\\accuracy.py", "file_new_name": "ignite\\metrics\\accuracy.py", "file_complexity": {"file_NLOC": "67", "file_CCN": "22", "file_NToken": "513"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61", "deleted_lines": "43,44,45,46,48,49", "method_info": {"method_name": "_check_type", "method_params": "self,output", "method_startline": "42", "method_endline": "61", "method_complexity": {"method_NLOC": "16", "method_CCN": "6", "method_NToken": "118", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "83,84,85", "deleted_lines": null, "method_info": {"method_name": "reset", "method_params": "self", "method_startline": "83", "method_endline": "85", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "15", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "87,88,89,90,92,93,94,95,96,97", "deleted_lines": null, "method_info": {"method_name": "update", "method_params": "self,output", "method_startline": "87", "method_endline": "99", "method_complexity": {"method_NLOC": "10", "method_CCN": "3", "method_NToken": "113", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "15,19,23,26,27,28,29,30,35,40", "deleted_lines": "15,16,17,18,19,21,24,25,26,27,38", "method_info": {"method_name": "_check_shape", "method_params": "self,output", "method_startline": "15", "method_endline": "40", "method_complexity": {"method_NLOC": "17", "method_CCN": "9", "method_NToken": "173", "method_nesting_level": "1"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "11,12,13", "deleted_lines": "11,13", "method_info": {"method_name": "__init__", "method_params": "self,output_transform", "method_startline": "11", "method_endline": "13", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "30", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "ignite\\metrics\\binary_accuracy.py", "file_new_name": "ignite\\metrics\\binary_accuracy.py", "file_complexity": {"file_NLOC": "11", "file_CCN": "1", "file_NToken": "57"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "13", "deleted_lines": "13", "method_info": {"method_name": "__init__", "method_params": "self,args,kwargs", "method_startline": "11", "method_endline": "14", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "35", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "ignite\\metrics\\categorical_accuracy.py", "file_new_name": "ignite\\metrics\\categorical_accuracy.py", "file_complexity": {"file_NLOC": "11", "file_CCN": "1", "file_NToken": "57"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "13", "deleted_lines": "13", "method_info": {"method_name": "__init__", "method_params": "self,args,kwargs", "method_startline": "11", "method_endline": "14", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "35", "method_nesting_level": "1"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "ignite\\metrics\\precision.py", "file_new_name": "ignite\\metrics\\precision.py", "file_complexity": {"file_NLOC": "59", "file_CCN": "9", "file_NToken": "359"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "17,18", "deleted_lines": "16,17,18", "method_info": {"method_name": "reset", "method_params": "self", "method_startline": "16", "method_endline": "18", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "15", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "48,49,50,52,54,55,56,57,58,59,60,61,73,74", "deleted_lines": "48,50,51,52,53,55,56,57,61,69,70,71,72,73,74", "method_info": {"method_name": "update", "method_params": "self,output", "method_startline": "48", "method_endline": "74", "method_complexity": {"method_NLOC": "22", "method_CCN": "4", "method_NToken": "196", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "12,14", "deleted_lines": "12,13,14", "method_info": {"method_name": "__init__", "method_params": "self,output_transform,average", "method_startline": "12", "method_endline": "14", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "34", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "20,21", "deleted_lines": "19,20", "method_info": {"method_name": "__init__", "method_params": "self,average,output_transform", "method_startline": "19", "method_endline": "21", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "32", "method_nesting_level": "1"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "20,21,22,23,25,26,27,28,29,30", "deleted_lines": "20,24,25,27,28,29", "method_info": {"method_name": "compute", "method_params": "self", "method_startline": "20", "method_endline": "30", "method_complexity": {"method_NLOC": "10", "method_CCN": "3", "method_NToken": "71", "method_nesting_level": "1"}}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "ignite\\metrics\\recall.py", "file_new_name": "ignite\\metrics\\recall.py", "file_complexity": {"file_NLOC": "40", "file_CCN": "4", "file_NToken": "220"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "23,24,26,28,29,30,31,32,33,34,35,40,43,47,48", "deleted_lines": "22,24,25,26,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48", "method_info": {"method_name": "update", "method_params": "self,output", "method_startline": "22", "method_endline": "48", "method_complexity": {"method_NLOC": "22", "method_CCN": "4", "method_NToken": "196", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "24,26", "deleted_lines": "24,25,26", "method_info": {"method_name": "reset", "method_params": "self", "method_startline": "24", "method_endline": "26", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "15", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "20", "deleted_lines": "20,21,22", "method_info": {"method_name": "__init__", "method_params": "self,average,output_transform", "method_startline": "20", "method_endline": "22", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "32", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": null, "deleted_lines": "77,78,79,80,81,82,83,84,85", "method_info": {"method_name": "compute", "method_params": "self", "method_startline": "77", "method_endline": "85", "method_complexity": {"method_NLOC": "9", "method_CCN": "3", "method_NToken": "55", "method_nesting_level": "1"}}}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 18, "file_old_name": "tests\\ignite\\metrics\\test_accuracy.py", "file_new_name": "tests\\ignite\\metrics\\test_accuracy.py", "file_complexity": {"file_NLOC": "186", "file_CCN": "11", "file_NToken": "2421"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115,116,117,119", "deleted_lines": "92,95,98,99,100,101,103,106,107,109,110,112,113,115,116,118", "method_info": {"method_name": "test_binary_input_NL", "method_params": "", "method_startline": "92", "method_endline": "119", "method_complexity": {"method_NLOC": "19", "method_CCN": "1", "method_NToken": "244", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "62,63,64,65,66,67,68,69,71,72,73,74,76", "deleted_lines": "62,65,66,67,70,73,74,75,78", "method_info": {"method_name": "test_categorical_compute", "method_params": "", "method_startline": "62", "method_endline": "78", "method_complexity": {"method_NLOC": "15", "method_CCN": "1", "method_NToken": "238", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "81,82,83,84,85,86,87,88,89,90,91,92", "deleted_lines": "81,84,85,86,87,88,89,92", "method_info": {"method_name": "test_categorical_compute_batch_images", "method_params": "", "method_startline": "81", "method_endline": "92", "method_complexity": {"method_NLOC": "11", "method_CCN": "1", "method_NToken": "146", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "17,20,21,22,23,24,25,26,27,28,29,30,31", "deleted_lines": "14,17,18,19,22,25,26,27,28,31", "method_info": {"method_name": "test_binary_compute", "method_params": "", "method_startline": "14", "method_endline": "31", "method_complexity": {"method_NLOC": "16", "method_CCN": "1", "method_NToken": "246", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "11", "deleted_lines": "14", "method_info": {"method_name": "test_no_update", "method_params": "", "method_startline": "11", "method_endline": "14", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "22", "method_nesting_level": "0"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59", "deleted_lines": "34,37,38,39,40,43,46,47,48,51,54,55,56,59", "method_info": {"method_name": "test_binary_wrong_inputs", "method_params": "", "method_startline": "32", "method_endline": "59", "method_complexity": {"method_NLOC": "14", "method_CCN": "1", "method_NToken": "249", "method_nesting_level": "0"}}}, "hunk_6": {"Ismethod": 1, "added_lines": "165,168,169,170,171,172,173,174,175,176,177,178,179,180,181", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_wrong_inputs", "method_params": "", "method_startline": "165", "method_endline": "181", "method_complexity": {"method_NLOC": "11", "method_CCN": "1", "method_NToken": "153", "method_nesting_level": "0"}}}, "hunk_7": {"Ismethod": 1, "added_lines": "17,20,21,22,23,24,25,26,27,28,29", "deleted_lines": "17,18,19,22,25,26,27,28", "method_info": {"method_name": "test__check_shape", "method_params": "", "method_startline": "17", "method_endline": "29", "method_complexity": {"method_NLOC": "10", "method_CCN": "1", "method_NToken": "185", "method_nesting_level": "0"}}}, "hunk_8": {"Ismethod": 1, "added_lines": "220,221,224,225,227,228,229,231,233,234,235,236,237,238,239,240,241", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_input_NL", "method_params": "", "method_startline": "220", "method_endline": "241", "method_complexity": {"method_NLOC": "19", "method_CCN": "1", "method_NToken": "236", "method_nesting_level": "0"}}}, "hunk_9": {"Ismethod": 1, "added_lines": "62,63,64,65,66,67,68,69,71,72,73,74,76,79,80,81,82,83,84,85,86,87,88,89", "deleted_lines": "62,65,66,67,70,73,74,75,78,81,84,85,86,87,88,89", "method_info": {"method_name": "test_binary_input_N", "method_params": "", "method_startline": "62", "method_endline": "89", "method_complexity": {"method_NLOC": "19", "method_CCN": "1", "method_NToken": "236", "method_nesting_level": "0"}}}, "hunk_10": {"Ismethod": 1, "added_lines": "244,245,248,249,251,252,253,254,255,257,258,259,260,261,262,263,264,265", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_input_NHW", "method_params": "", "method_startline": "244", "method_endline": "265", "method_complexity": {"method_NLOC": "19", "method_CCN": "1", "method_NToken": "248", "method_nesting_level": "0"}}}, "hunk_11": {"Ismethod": 1, "added_lines": "106,107,108,109,110,111,112,114,115,116,117,119", "deleted_lines": "106,107,109,110,112,113,115,116,118", "method_info": {"method_name": "test_incorrect_shape", "method_params": "", "method_startline": "106", "method_endline": "119", "method_complexity": {"method_NLOC": "10", "method_CCN": "1", "method_NToken": "97", "method_nesting_level": "0"}}}, "hunk_12": {"Ismethod": 1, "added_lines": "122,123,126,127,128,129,131,132,133,134,136,139,140,141,142,144,145,146,147,149,152,153,154,155,157,158,159,160,162", "deleted_lines": null, "method_info": {"method_name": "test_binary_input_NHW", "method_params": "", "method_startline": "122", "method_endline": "162", "method_complexity": {"method_NLOC": "28", "method_CCN": "1", "method_NToken": "378", "method_nesting_level": "0"}}}, "hunk_13": {"Ismethod": 1, "added_lines": "184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,203,204,206,208,210,211,213,214,215,217", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_input_N", "method_params": "", "method_startline": "184", "method_endline": "217", "method_complexity": {"method_NLOC": "28", "method_CCN": "1", "method_NToken": "345", "method_nesting_level": "0"}}}, "hunk_14": {"Ismethod": 1, "added_lines": "268,269,271,272,273,274,276,277,278,280", "deleted_lines": null, "method_info": {"method_name": "test_incorrect_type", "method_params": "", "method_startline": "268", "method_endline": "281", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "86", "method_nesting_level": "0"}}}, "hunk_15": {"Ismethod": 1, "added_lines": "8,9,10,11", "deleted_lines": "8", "method_info": {"method_name": "test_zero_div", "method_params": "", "method_startline": "8", "method_endline": "11", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "22", "method_nesting_level": "0"}}}, "hunk_16": {"Ismethod": 1, "added_lines": "95,96,97,98,99,100,101,102,103", "deleted_lines": "95,98,99,100,101,103", "method_info": {"method_name": "test_ner_example", "method_params": "", "method_startline": "95", "method_endline": "103", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "148", "method_nesting_level": "0"}}}, "hunk_17": {"Ismethod": 1, "added_lines": "34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59", "deleted_lines": "34,37,38,39,40,43,46,47,48,51,54,55,56,59", "method_info": {"method_name": "test_compute_batch_images", "method_params": "", "method_startline": "34", "method_endline": "59", "method_complexity": {"method_NLOC": "23", "method_CCN": "1", "method_NToken": "426", "method_nesting_level": "0"}}}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "tests\\ignite\\metrics\\test_binary_accuracy.py", "file_new_name": "tests\\ignite\\metrics\\test_binary_accuracy.py", "file_complexity": {"file_NLOC": "5", "file_CCN": "1", "file_NToken": "24"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "8,9,10,11", "method_info": {"method_name": "test_zero_div", "method_params": "", "method_startline": "8", "method_endline": "11", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "22", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "5,6,7", "deleted_lines": "5", "method_info": {"method_name": "test_warning", "method_params": "", "method_startline": "5", "method_endline": "7", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "15", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": null, "deleted_lines": "14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31", "method_info": {"method_name": "test_compute", "method_params": "", "method_startline": "14", "method_endline": "31", "method_complexity": {"method_NLOC": "16", "method_CCN": "1", "method_NToken": "246", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": null, "deleted_lines": "34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59", "method_info": {"method_name": "test_compute_batch_images", "method_params": "", "method_startline": "34", "method_endline": "59", "method_complexity": {"method_NLOC": "23", "method_CCN": "1", "method_NToken": "426", "method_nesting_level": "0"}}}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "tests\\ignite\\metrics\\test_categorical_accuracy.py", "file_new_name": "tests\\ignite\\metrics\\test_categorical_accuracy.py", "file_complexity": {"file_NLOC": "5", "file_CCN": "1", "file_NToken": "24"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "8,9,10,11", "method_info": {"method_name": "test_zero_div", "method_params": "", "method_startline": "8", "method_endline": "11", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "22", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "5,6,7", "deleted_lines": "5", "method_info": {"method_name": "test_warning", "method_params": "", "method_startline": "5", "method_endline": "7", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "15", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": null, "deleted_lines": "14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30", "method_info": {"method_name": "test_compute", "method_params": "", "method_startline": "14", "method_endline": "30", "method_complexity": {"method_NLOC": "15", "method_CCN": "1", "method_NToken": "238", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": null, "deleted_lines": "33,34,35,36,37,38,39,40,41,42,43,44", "method_info": {"method_name": "test_compute_batch_images", "method_params": "", "method_startline": "33", "method_endline": "44", "method_complexity": {"method_NLOC": "11", "method_CCN": "1", "method_NToken": "146", "method_nesting_level": "0"}}}}}, "file_8": {"file_change_type": "MODIFY", "file_Nmethod": 24, "file_old_name": "tests\\ignite\\metrics\\test_precision.py", "file_new_name": "tests\\ignite\\metrics\\test_precision.py", "file_complexity": {"file_NLOC": "231", "file_CCN": "52", "file_NToken": "2943"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119", "deleted_lines": "102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119", "method_info": {"method_name": "test_ner_example", "method_params": "", "method_startline": "102", "method_endline": "119", "method_complexity": {"method_NLOC": "15", "method_CCN": "3", "method_NToken": "213", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129", "deleted_lines": "101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129", "method_info": {"method_name": "test_binary_input_NL._test", "method_params": "average", "method_startline": "101", "method_endline": "129", "method_complexity": {"method_NLOC": "21", "method_CCN": "5", "method_NToken": "298", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79", "deleted_lines": "62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79", "method_info": {"method_name": "test_binary_vs_categorical", "method_params": "", "method_startline": "62", "method_endline": "79", "method_complexity": {"method_NLOC": "16", "method_CCN": "1", "method_NToken": "248", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "122,123,124,125,126,127,128,129,130,131,132,133,134,135", "deleted_lines": "122,123,124,125,126,129,131,132,135", "method_info": {"method_name": "test_incorrect_shape", "method_params": "", "method_startline": "122", "method_endline": "135", "method_complexity": {"method_NLOC": "10", "method_CCN": "1", "method_NToken": "97", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_input_NHW._test", "method_params": "average", "method_startline": "279", "method_endline": "307", "method_complexity": {"method_NLOC": "27", "method_CCN": "7", "method_NToken": "346", "method_nesting_level": "1"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330", "deleted_lines": null, "method_info": {"method_name": "test_incorrect_type", "method_params": "", "method_startline": "313", "method_endline": "330", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "0"}}}, "hunk_6": {"Ismethod": 1, "added_lines": "54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92", "deleted_lines": "54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92", "method_info": {"method_name": "test_binary_input_N._test", "method_params": "average", "method_startline": "54", "method_endline": "92", "method_complexity": {"method_NLOC": "31", "method_CCN": "7", "method_NToken": "470", "method_nesting_level": "1"}}}, "hunk_7": {"Ismethod": 1, "added_lines": "82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99", "deleted_lines": "82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99", "method_info": {"method_name": "test_binary_shapes", "method_params": "", "method_startline": "82", "method_endline": "99", "method_complexity": {"method_NLOC": "16", "method_CCN": "1", "method_NToken": "261", "method_nesting_level": "0"}}}, "hunk_8": {"Ismethod": 1, "added_lines": "40,41,42,43,45,46", "deleted_lines": "39,40,41,42,43,44,45,46", "method_info": {"method_name": "test_compute_average", "method_params": "", "method_startline": "39", "method_endline": "46", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "66", "method_nesting_level": "0"}}}, "hunk_9": {"Ismethod": 1, "added_lines": "21,22,25,26,27,29,30,31,32,33,36", "deleted_lines": "14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36", "method_info": {"method_name": "test_compute", "method_params": "", "method_startline": "14", "method_endline": "36", "method_complexity": {"method_NLOC": "19", "method_CCN": "1", "method_NToken": "179", "method_nesting_level": "0"}}}, "hunk_10": {"Ismethod": 1, "added_lines": "276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_input_NHW", "method_params": "", "method_startline": "276", "method_endline": "310", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "0"}}}, "hunk_11": {"Ismethod": 1, "added_lines": "51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95", "deleted_lines": "51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95", "method_info": {"method_name": "test_binary_input_N", "method_params": "", "method_startline": "51", "method_endline": "95", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "0"}}}, "hunk_12": {"Ismethod": 1, "added_lines": "191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_input_N._test", "method_params": "average", "method_startline": "191", "method_endline": "233", "method_complexity": {"method_NLOC": "40", "method_CCN": "10", "method_NToken": "496", "method_nesting_level": "1"}}}, "hunk_13": {"Ismethod": 1, "added_lines": "21,22,25,26,27,29,30,31,32,33,36,37,38,40,41,42,43,45,46,47,48", "deleted_lines": "21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48", "method_info": {"method_name": "test_binary_wrong_inputs", "method_params": "", "method_startline": "21", "method_endline": "48", "method_complexity": {"method_NLOC": "14", "method_CCN": "1", "method_NToken": "249", "method_nesting_level": "0"}}}, "hunk_14": {"Ismethod": 1, "added_lines": "49,50,51,52,53,54,55,56,57,58,59", "deleted_lines": "49,50,51,52,53,54,55,56,57,58,59", "method_info": {"method_name": "test_compute_all_wrong", "method_params": "", "method_startline": "49", "method_endline": "59", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "90", "method_nesting_level": "0"}}}, "hunk_15": {"Ismethod": 1, "added_lines": "316,317,318,319,320,321,322,323,324,325,326,327", "deleted_lines": null, "method_info": {"method_name": "test_incorrect_type._test", "method_params": "average", "method_startline": "316", "method_endline": "327", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "100", "method_nesting_level": "1"}}}, "hunk_16": {"Ismethod": 1, "added_lines": "135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169", "deleted_lines": "135,136,137,138,139,141,142,143,144,145,147,149,150,151,152,154,155,157", "method_info": {"method_name": "test_binary_input_NHW", "method_params": "", "method_startline": "135", "method_endline": "169", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "0"}}}, "hunk_17": {"Ismethod": 1, "added_lines": "242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_input_NL._test", "method_params": "average", "method_startline": "242", "method_endline": "270", "method_complexity": {"method_NLOC": "27", "method_CCN": "7", "method_NToken": "338", "method_nesting_level": "1"}}}, "hunk_18": {"Ismethod": 1, "added_lines": "172,173,175,176,177,179,180,181,183,184,185", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_wrong_inputs", "method_params": "", "method_startline": "172", "method_endline": "185", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "153", "method_nesting_level": "0"}}}, "hunk_19": {"Ismethod": 1, "added_lines": "239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_input_NL", "method_params": "", "method_startline": "239", "method_endline": "273", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "0"}}}, "hunk_20": {"Ismethod": 1, "added_lines": "138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166", "deleted_lines": "138,139,141,142,143,144,145,147,149,150,151,152,154,155,157", "method_info": {"method_name": "test_binary_input_NHW._test", "method_params": "average", "method_startline": "138", "method_endline": "166", "method_complexity": {"method_NLOC": "21", "method_CCN": "5", "method_NToken": "306", "method_nesting_level": "1"}}}, "hunk_21": {"Ismethod": 1, "added_lines": "98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132", "deleted_lines": "98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,131,132", "method_info": {"method_name": "test_binary_input_NL", "method_params": "", "method_startline": "98", "method_endline": "132", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "0"}}}, "hunk_22": {"Ismethod": 1, "added_lines": "138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157", "deleted_lines": "138,139,141,142,143,144,145,147,149,150,151,152,154,155,157", "method_info": {"method_name": "test_sklearn_compute", "method_params": "", "method_startline": "138", "method_endline": "157", "method_complexity": {"method_NLOC": "14", "method_CCN": "3", "method_NToken": "163", "method_nesting_level": "0"}}}, "hunk_23": {"Ismethod": 1, "added_lines": "188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_input_N", "method_params": "", "method_startline": "188", "method_endline": "236", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "0"}}}}}, "file_9": {"file_change_type": "MODIFY", "file_Nmethod": 24, "file_old_name": "tests\\ignite\\metrics\\test_recall.py", "file_new_name": "tests\\ignite\\metrics\\test_recall.py", "file_complexity": {"file_NLOC": "231", "file_CCN": "52", "file_NToken": "2943"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_input_NL._test", "method_params": "average", "method_startline": "242", "method_endline": "270", "method_complexity": {"method_NLOC": "27", "method_CCN": "7", "method_NToken": "338", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "172,173,175,176,177,179,180,181,183,184,185", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_wrong_inputs", "method_params": "", "method_startline": "172", "method_endline": "185", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "153", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92", "deleted_lines": "54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92", "method_info": {"method_name": "test_binary_input_N._test", "method_params": "average", "method_startline": "54", "method_endline": "92", "method_complexity": {"method_NLOC": "31", "method_CCN": "7", "method_NToken": "470", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_input_NL", "method_params": "", "method_startline": "239", "method_endline": "273", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "41,42,43,45,46,47,48,49", "deleted_lines": "41,42,43,44,45,46,47,48,49", "method_info": {"method_name": "test_compute_average", "method_params": "", "method_startline": "41", "method_endline": "49", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "66", "method_nesting_level": "0"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "21,22,25,26,27,29,30,31,32,33,36,37,38", "deleted_lines": "14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38", "method_info": {"method_name": "test_compute", "method_params": "", "method_startline": "14", "method_endline": "38", "method_complexity": {"method_NLOC": "19", "method_CCN": "1", "method_NToken": "179", "method_nesting_level": "0"}}}, "hunk_6": {"Ismethod": 1, "added_lines": "141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160", "deleted_lines": "141,142,144,145,146,147,148,150,152,153,154,155,157,158,160", "method_info": {"method_name": "test_sklearn_compute", "method_params": "", "method_startline": "141", "method_endline": "160", "method_complexity": {"method_NLOC": "14", "method_CCN": "3", "method_NToken": "163", "method_nesting_level": "0"}}}, "hunk_7": {"Ismethod": 1, "added_lines": "21,22,25,26,27,29,30,31,32,33,36,37,38,40,41,42,43,45,46,47,48", "deleted_lines": "21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48", "method_info": {"method_name": "test_binary_wrong_inputs", "method_params": "", "method_startline": "21", "method_endline": "48", "method_complexity": {"method_NLOC": "14", "method_CCN": "1", "method_NToken": "249", "method_nesting_level": "0"}}}, "hunk_8": {"Ismethod": 1, "added_lines": "52,53,54,55,56,57,58,59,60,61,62", "deleted_lines": "52,53,54,55,56,57,58,59,60,61,62", "method_info": {"method_name": "test_compute_all_wrong", "method_params": "", "method_startline": "52", "method_endline": "62", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "90", "method_nesting_level": "0"}}}, "hunk_9": {"Ismethod": 1, "added_lines": "125,126,127,128,129,130,131,132,133,134,135,136,137,138", "deleted_lines": "125,126,127,128,129,132,134,135,138", "method_info": {"method_name": "test_incorrect_shape", "method_params": "", "method_startline": "125", "method_endline": "138", "method_complexity": {"method_NLOC": "10", "method_CCN": "1", "method_NToken": "97", "method_nesting_level": "0"}}}, "hunk_10": {"Ismethod": 1, "added_lines": "316,317,318,319,320,321,322,323,324,325,326,327", "deleted_lines": null, "method_info": {"method_name": "test_incorrect_type._test", "method_params": "average", "method_startline": "316", "method_endline": "327", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "100", "method_nesting_level": "1"}}}, "hunk_11": {"Ismethod": 1, "added_lines": "65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82", "deleted_lines": "65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82", "method_info": {"method_name": "test_binary_vs_categorical", "method_params": "", "method_startline": "65", "method_endline": "82", "method_complexity": {"method_NLOC": "16", "method_CCN": "1", "method_NToken": "248", "method_nesting_level": "0"}}}, "hunk_12": {"Ismethod": 1, "added_lines": "279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_input_NHW._test", "method_params": "average", "method_startline": "279", "method_endline": "307", "method_complexity": {"method_NLOC": "27", "method_CCN": "7", "method_NToken": "346", "method_nesting_level": "1"}}}, "hunk_13": {"Ismethod": 1, "added_lines": "85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102", "deleted_lines": "85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102", "method_info": {"method_name": "test_binary_shapes", "method_params": "", "method_startline": "85", "method_endline": "102", "method_complexity": {"method_NLOC": "16", "method_CCN": "1", "method_NToken": "261", "method_nesting_level": "0"}}}, "hunk_14": {"Ismethod": 1, "added_lines": "138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166", "deleted_lines": "138,139,140,141,142,144,145,146,147,148,150,152,153,154,155,157,158,160", "method_info": {"method_name": "test_binary_input_NHW._test", "method_params": "average", "method_startline": "138", "method_endline": "166", "method_complexity": {"method_NLOC": "21", "method_CCN": "5", "method_NToken": "306", "method_nesting_level": "1"}}}, "hunk_15": {"Ismethod": 1, "added_lines": "51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95", "deleted_lines": "51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95", "method_info": {"method_name": "test_binary_input_N", "method_params": "", "method_startline": "51", "method_endline": "95", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "0"}}}, "hunk_16": {"Ismethod": 1, "added_lines": "98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132", "deleted_lines": "98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132", "method_info": {"method_name": "test_binary_input_NL", "method_params": "", "method_startline": "98", "method_endline": "132", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "0"}}}, "hunk_17": {"Ismethod": 1, "added_lines": "276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_input_NHW", "method_params": "", "method_startline": "276", "method_endline": "310", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "0"}}}, "hunk_18": {"Ismethod": 1, "added_lines": "188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_input_N", "method_params": "", "method_startline": "188", "method_endline": "236", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "0"}}}, "hunk_19": {"Ismethod": 1, "added_lines": "191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233", "deleted_lines": null, "method_info": {"method_name": "test_multiclass_input_N._test", "method_params": "average", "method_startline": "191", "method_endline": "233", "method_complexity": {"method_NLOC": "40", "method_CCN": "10", "method_NToken": "496", "method_nesting_level": "1"}}}, "hunk_20": {"Ismethod": 1, "added_lines": "105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122", "deleted_lines": "105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122", "method_info": {"method_name": "test_ner_example", "method_params": "", "method_startline": "105", "method_endline": "122", "method_complexity": {"method_NLOC": "15", "method_CCN": "3", "method_NToken": "213", "method_nesting_level": "0"}}}, "hunk_21": {"Ismethod": 1, "added_lines": "101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129", "deleted_lines": "101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129", "method_info": {"method_name": "test_binary_input_NL._test", "method_params": "average", "method_startline": "101", "method_endline": "129", "method_complexity": {"method_NLOC": "21", "method_CCN": "5", "method_NToken": "298", "method_nesting_level": "1"}}}, "hunk_22": {"Ismethod": 1, "added_lines": "135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169", "deleted_lines": "135,138,139,140,141,142,144,145,146,147,148,150,152,153,154,155,157,158,160", "method_info": {"method_name": "test_binary_input_NHW", "method_params": "", "method_startline": "135", "method_endline": "169", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "0"}}}, "hunk_23": {"Ismethod": 1, "added_lines": "313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330", "deleted_lines": null, "method_info": {"method_name": "test_incorrect_type", "method_params": "", "method_startline": "313", "method_endline": "330", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "0"}}}}}, "file_10": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\ignite\\metrics\\test_running_average.py", "file_new_name": "tests\\ignite\\metrics\\test_running_average.py", "file_complexity": {"file_NLOC": "114", "file_CCN": "15", "file_NToken": "1054"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "44", "deleted_lines": "44", "method_info": {"method_name": "test_integration", "method_params": "", "method_startline": "26", "method_endline": "107", "method_complexity": {"method_NLOC": "44", "method_CCN": "1", "method_NToken": "373", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "20", "deleted_lines": "20", "method_info": {"method_name": "test_wrong_input_args", "method_params": "", "method_startline": "12", "method_endline": "23", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "82", "method_nesting_level": "0"}}}}}}}}