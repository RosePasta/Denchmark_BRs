{"BR": {"BR_id": "1975", "BR_author": "brollb", "BRopenT": "2020-11-10T22:08:56Z", "BRcloseT": "2020-11-11T14:45:52Z", "BR_text": {"BRsummary": "Create multiple plots in a single operation", "BRdescription": "\n Currently, this does not appear to be supported...\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "brollb", "commentT": "2020-11-10T22:22:41Z", "comment_text": "\n \t\tThis is the code that I was running and expecting to see two plots generated:\n from matplotlib import pyplot as plt \n from tensorflow.keras.optimizers import Adam\n \n class TrainNodePredictor():\n     def __init__(self, model, learning_rate=0.005, epochs=50):\n         self.model = model\n         self.epochs = epochs\n         self.learning_rate = learning_rate\n     def execute(self, data, val_data):\n         optimizer = Adam(lr=self.learning_rate)\n         self.model.compile(optimizer=optimizer, loss='categorical_crossentropy', weighted_metrics=['acc'])\n         self.model.summary()\n         X, A, y = data\n         val_X, val_A, val_y = val_data\n         val_data = ([val_X, val_A], val_y)\n         unknowns = X.argmin(2)\n         history = self.model.fit([X, A],\n                         y,\n                         sample_weight=unknowns,\n                         epochs=self.epochs,\n                         validation_data=val_data,\n                         shuffle=True)\n         plt.figure(0)\n         plt.plot(history.history['acc'], label='train')\n         plt.plot(history.history['val_acc'], label='val')\n         plt.title('Accuracy')\n         plt.xlabel('epoch')\n         plt.ylabel('accuracy')\n         plt.legend(['train', 'val'])\n         plt.show()\n \n         plt.figure(1)\n         plt.plot(history.history['loss'], label='train')\n         plt.plot(history.history['val_loss'], label='val')\n         plt.title('Loss')\n         plt.xlabel('epoch')\n         plt.ylabel('loss')\n         plt.legend(['train', 'val'])\n         plt.show()\n         return self.model\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "brollb", "commentT": "2020-11-10T22:54:20Z", "comment_text": "\n \t\tThis needs a fix in upstream webgme-plotly, opening an issue there.\n The above comment is not correct. The widget already handles array of PlotlyJSONs.\n \t\t"}}}, "commit": {"commit_id": "cead1ec7f8df746c89d312fe05646be6a2cf2925", "commit_author": "Umesh Timalsina", "commitT": "2020-11-11 08:45:49-06:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "src\\plugins\\ExecuteJob\\ExecuteJob.Metadata.js", "file_new_name": "src\\plugins\\ExecuteJob\\ExecuteJob.Metadata.js", "file_complexity": {"file_NLOC": "106", "file_CCN": "24", "file_NToken": "863"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "105", "deleted_lines": "105", "method_info": {"method_name": "ExecuteJob.prototype.parseForMetadataCmds", "method_params": "job,lines,skip", "method_startline": "59", "method_endline": "127", "method_complexity": {"method_NLOC": "41", "method_CCN": "6", "method_NToken": "282", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "105", "deleted_lines": "105", "method_info": {"method_name": "(anonymous)", "method_params": "", "method_startline": "105", "method_endline": "105", "method_complexity": {"method_NLOC": "1", "method_CCN": "1", "method_NToken": "14", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "105", "deleted_lines": "105", "method_info": {"method_name": "ExecuteJob.prototype.onMetadataCommand", "method_params": "job,cmd,id,content", "method_startline": "102", "method_endline": "110", "method_complexity": {"method_NLOC": "8", "method_CCN": "2", "method_NToken": "80", "method_nesting_level": "0"}}}}}}}}