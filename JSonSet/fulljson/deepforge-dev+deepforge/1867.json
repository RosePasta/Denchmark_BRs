{"BR": {"BR_id": "1867", "BR_author": "brollb", "BRopenT": "2020-08-18T15:11:58Z", "BRcloseT": "2020-08-18T20:51:28Z", "BR_text": {"BRsummary": "Plotly error on pipeline restart", "BRdescription": "\n I executed a pipeline, opened a job and viewed a plot, then restarted the pipeline and got the following error:\n <denchmark-link:https://user-images.githubusercontent.com/4982789/90530941-14698080-e13b-11ea-87cd-04cb4f09dfaf.png></denchmark-link>\n \n I suspect the plot was still trying to update and wasn't properly destroyed (maybe ignoring the \"embedded\" value)?\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "brollb", "commentT": "2020-08-18T15:13:24Z", "comment_text": "\n \t\tTechnically, you could split this into 2 issues:\n \n plotly visualizer shouldn't be updating when I am viewing the pipeline again\n plotly graph should probably handle this more gracefully. That is, it shouldn't throw an error if I have it open when the execution is restarted\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "brollb", "commentT": "2020-08-18T15:15:00Z", "comment_text": "\n \t\tDo you have the operation that caused this error? Like if matplotlib is in interactive mode vs regular mode?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "brollb", "commentT": "2020-08-18T15:20:18Z", "comment_text": "\n \t\tI was using the Train operation from the cifar10 example. However, I suspect it is an issue at the UI level rather than matplotlib. (Since I was viewing the execution when it occurred, I didn't expect that code to be running at all.) Here is a more detailed list of the actions I took:\n \n execute a training pipeline\n an operation after the training operation failed (no other operations had any plotting)\n opened the \"Train\" job and viewed the training loss\n went back to the execution view and restarted it\n \n Since the Plotly JSON was valid when I viewed it and the Train operation had finished, I suspect this is just an issue at the visualizer level.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "brollb", "commentT": "2020-08-18T16:47:33Z", "comment_text": "\n \t\tI discovered a new error while working to resolve this issue:\n Replication steps using devProject:\n \n Go to ScatterPlots3D operation in devProject\n Execute PlotsPipeline operation, view the graph and restart the execution from the console output view\n Go back the ExecutionView, which will result in the following error:\n \n <denchmark-code>Uncaught (in promise) TypeError: node.getId is not a function\n     at ExecutionViewControl.Execute.runExecutionPlugin (Execute.js:52)\n     at Execute.js:404\n     at _fulfilled (q.js:1121)\n     at q.js:1150\n     at Promise.promise.promiseDispatch (q.js:1083)\n     at q.js:891\n     at runSingle (q.js:404)\n     at flush (q.js:392)\n     at onNextTick (q.js:252)\n     at Item.run (q.js:154)\n Execute.runExecutionPlugin @ Execute.js:52\n (anonymous) @ Execute.js:404\n _fulfilled @ q.js:1121\n (anonymous) @ q.js:1150\n Promise.promise.promiseDispatch @ q.js:1083\n (anonymous) @ q.js:891\n runSingle @ q.js:404\n flush @ q.js:392\n onNextTick @ q.js:252\n Item.run @ q.js:154\n drainQueue @ q.js:124\n setTimeout (async)\n runTimeout @ q.js:42\n process.nextTick @ q.js:144\n exports.setImmediate @ q.js:245\n nextTick @ q.js:447\n (anonymous) @ q.js:890\n (anonymous) @ q.js:530\n become @ q.js:889\n deferred.resolve @ q.js:905\n (anonymous) @ APIClient.js:68\n Request.callback @ superagent.js:1723\n (anonymous) @ superagent.js:1550\n Emitter.emit @ superagent.js:134\n xhr.onreadystatechange @ superagent.js:1817\n XMLHttpRequest.send (async)\n Request._end @ superagent.js:1884\n Request.end @ superagent.js:1788\n APIClient._request @ APIClient.js:63\n JobOriginClient.getOrigin @ JobOriginClient.js:41\n Execute._onOriginBranch @ Execute.js:382\n (anonymous) @ Execute.js:402\n _fulfilled @ q.js:1121\n (anonymous) @ q.js:1150\n Promise.promise.promiseDispatch @ q.js:1083\n (anonymous) @ q.js:891\n runSingle @ q.js:404\n flush @ q.js:392\n onNextTick @ q.js:252\n Item.run @ q.js:154\n drainQueue @ q.js:124\n setTimeout (async)\n runTimeout @ q.js:42\n process.nextTick @ q.js:144\n exports.setImmediate @ q.js:245\n nextTick @ q.js:447\n Promise.then @ q.js:1143\n Promise.nodeify @ q.js:2320\n CoreQ.loadChild @ coreQ.js:32\n loadChildrenPattern @ client.js:351\n baseLoaded @ client.js:374\n loadPattern @ client.js:382\n ThrottleListener.execute @ tasync.js:630\n (anonymous) @ tasync.js:672\n Client.updateTerritory @ client.js:1922\n updateDeepForgeNamespace @ globals.js:167\n triggerEvents @ backbone.js:371\n triggerApi @ backbone.js:356\n eventsApi @ backbone.js:155\n Events.trigger @ backbone.js:346\n set @ backbone.js:516\n _WebGMEState.set @ StateManager.js:187\n (anonymous) @ WebGME.History.js:59\n dispatch @ jquery.js:5183\n elemData.handle @ jquery.js:4991\n </denchmark-code>\n \n \t\t"}}}, "commit": {"commit_id": "507838031dbc3f93c2dadd9af7d0c2cffb39624b", "commit_author": "Umesh Timalsina", "commitT": "2020-08-18 15:51:26-05:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "src\\visualizers\\panels\\PlotlyGraph\\PlotlyGraphControl.js", "file_new_name": "src\\visualizers\\panels\\PlotlyGraph\\PlotlyGraphControl.js", "file_complexity": {"file_NLOC": "120", "file_CCN": "31", "file_NToken": "782"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "139", "deleted_lines": null, "method_info": {"method_name": "PlotlyGraphControl.prototype._attachClientEventListeners", "method_params": "", "method_startline": "137", "method_endline": "142", "method_complexity": {"method_NLOC": "6", "method_CCN": "2", "method_NToken": "38", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "72,73,74,75,132,133,134,139", "deleted_lines": "72,73,74,75,76,136", "method_info": {"method_name": "PlotlyGraphControl.prototype._getObjectDescriptor", "method_params": "nodeId", "method_startline": "62", "method_endline": "165", "method_complexity": {"method_NLOC": "20", "method_CCN": "3", "method_NToken": "152", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "73,74,75", "deleted_lines": "73,74,75,76", "method_info": {"method_name": "JSON.parse", "method_params": "", "method_startline": "73", "method_endline": "77", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "11", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "74,75", "deleted_lines": "74,75,76", "method_info": {"method_name": "JSON.parse", "method_params": "plotlyData", "method_startline": "74", "method_endline": "78", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "11", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "132,133,134", "deleted_lines": null, "method_info": {"method_name": "PlotlyGraphControl.prototype.destroy", "method_params": "", "method_startline": "130", "method_endline": "135", "method_complexity": {"method_NLOC": "6", "method_CCN": "2", "method_NToken": "29", "method_nesting_level": "0"}}}}}}}}