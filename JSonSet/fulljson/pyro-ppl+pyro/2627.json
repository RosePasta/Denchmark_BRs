{"BR": {"BR_id": "2627", "BR_author": "jetsnguns", "BRopenT": "2020-09-15T17:06:38Z", "BRcloseT": "2020-09-21T03:27:56Z", "BR_text": {"BRsummary": "Problem in HMC/NUTS with custom potential_fn", "BRdescription": "\n <denchmark-h:h3>Issue Description</denchmark-h>\n \n Running a simple MCMC chain worked in Pyro 1.3.1, but fails in Pyro 1.4.0\n <denchmark-h:h3>Environment</denchmark-h>\n \n \n Ubuntu 18.04, Python 3.8.5 (Anaconda)\n PyTorch 1.6.0\n Pyro 1.4.0\n \n <denchmark-h:h3>Code Snippet</denchmark-h>\n \n import torch\n from pyro.infer import NUTS, MCMC\n \n target = torch.distributions.Normal(loc=torch.tensor([10., 0.]),\n                                    scale=torch.tensor([1., 1.]))\n \n def potential_fn(z):\n     z = z['points']\n     return -target.log_prob(z).sum(1)[None]\n \n nuts = NUTS(potential_fn=potential_fn)\n mcmc = MCMC(kernel=nuts, warmup_steps=200, initial_params={'points': torch.tensor([[0., 0.]])}, num_samples=1000)\n \n mcmc.run()\n \n mcmc.get_samples()['points']\n Error message:\n <denchmark-code>Sample: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1200/1200 [00:02, 475.82it/s, step size=1.02e+00, acc. prob=0.925]\n \n ---------------------------------------------------------------------------\n TypeError                                 Traceback (most recent call last)\n <ipython-input-7-a0f6be1c98b4> in <module>\n ----> 1 mcmc.run()\n \n ~/anaconda3/envs/bayesnn/lib/python3.8/site-packages/pyro/poutine/messenger.py in _context_wrap(context, fn, *args, **kwargs)\n       9 def _context_wrap(context, fn, *args, **kwargs):\n      10     with context:\n ---> 11         return fn(*args, **kwargs)\n      12 \n      13 \n \n ~/anaconda3/envs/bayesnn/lib/python3.8/site-packages/pyro/infer/mcmc/api.py in run(self, *args, **kwargs)\n     412             if getattr(self.kernel, \"transforms\", None) is None:\n     413                 warmup_steps = 0\n --> 414                 self.kernel.setup(warmup_steps, *args, **kwargs)\n     415             # Use `kernel.transforms` when available\n     416             if getattr(self.kernel, \"transforms\", None) is not None:\n \n ~/anaconda3/envs/bayesnn/lib/python3.8/site-packages/pyro/infer/mcmc/hmc.py in setup(self, warmup_steps, *args, **kwargs)\n     306             z_grads, potential_energy = potential_grad(self.potential_fn, z)\n     307         else:\n --> 308             z_grads, potential_energy = {}, self.potential_fn(self.initial_params)\n     309         self._cache(self.initial_params, potential_energy, z_grads)\n     310         if self.initial_params:\n \n <ipython-input-5-5caff8926040> in potential_fn(z)\n       3 \n       4 def potential_fn(z):\n ----> 5     z = z['points']\n       6     return -target.log_prob(z).sum(1)[None]\n \n TypeError: 'NoneType' object is not subscriptable\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "jetsnguns", "commentT": "2020-09-17T20:17:00Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/jetsnguns>@jetsnguns</denchmark-link>\n  it looks like <denchmark-link:https://github.com/fehiepsi>@fehiepsi</denchmark-link>\n  has already fixed this bug in the dev branch. You can install Pyro from github or wait for the next release. Thanks for reporting a clear code snippet, I have added it as a regression test in <denchmark-link:https://github.com/pyro-ppl/pyro/pull/2631>#2631</denchmark-link>\n  !\n \t\t"}}}, "commit": {"commit_id": "51f99f3e8cadb16b490c5d2dd8d3f3c2fef303b5", "commit_author": "Fritz Obermeyer", "commitT": "2020-09-20 20:27:55-07:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\infer\\mcmc\\test_valid_models.py", "file_new_name": "tests\\infer\\mcmc\\test_valid_models.py", "file_complexity": {"file_NLOC": "333", "file_CCN": "36", "file_NToken": "3929"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "405,406,407", "deleted_lines": null, "method_info": {"method_name": "test_potential_fn_initial_params.potential_fn", "method_params": "z", "method_startline": "405", "method_endline": "407", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "27", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "401,402,403,404,405,406,407,408,409,410,411,412,413,414", "deleted_lines": null, "method_info": {"method_name": "test_potential_fn_initial_params", "method_params": "Kernel", "method_startline": "401", "method_endline": "414", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "106", "method_nesting_level": "0"}}}}}}}}