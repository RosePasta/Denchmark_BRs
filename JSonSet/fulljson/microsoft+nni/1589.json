{"BR": {"BR_id": "1589", "BR_author": "martsalz", "BRopenT": "2019-10-08T07:20:23Z", "BRcloseT": "2020-02-27T06:45:09Z", "BR_text": {"BRsummary": "ValueError: Out of range float values are not JSON compliant", "BRdescription": "\n Short summary about the issue/question:\n When executing an experiment, the following error message appears for some trials:\n ValueError: Out of range float values are not JSON compliant\n What's the reason for this?\n nni Environment:\n \n nni version: v0.8-320-g421065b\n nni mode(local|pai|remote): local\n OS: CentOS 7\n python version: Python 3.6\n is conda or virtualenv used?: virtualenv\n is running in docker?: no\n \n Anything else we need to know:\n stderr:\n <denchmark-code>Using TensorFlow backend.\n Traceback (most recent call last):\n   File \"test.py\", line 164, in <module>\n     train(ARGS, RECEIVED_PARAMS)\n   File \"test.py\", line 136, in train\n     validation_data=(x_test, y_test), callbacks=[SendMetrics(), TensorBoard(log_dir=TENSORBOARD_DIR)])\n   File \"/home/msalz/venv_nni_dev/lib64/python3.6/site-packages/keras/engine/training.py\", line 1178, in fit\n     validation_freq=validation_freq)\n   File \"/home/msalz/venv_nni_dev/lib64/python3.6/site-packages/keras/engine/training_arrays.py\", line 224, in fit_loop\n     callbacks.on_epoch_end(epoch, epoch_logs)\n   File \"/home/msalz/venv_nni_dev/lib64/python3.6/site-packages/keras/callbacks.py\", line 152, in on_epoch_end\n     callback.on_epoch_end(epoch, logs)\n   File \"test.py\", line 119, in on_epoch_end\n     nni.report_intermediate_result(logs[\"val_loss\"])\n   File \"/home/msalz/nni/build/nni/trial.py\", line 81, in report_intermediate_result\n     'value': metric\n   File \"/home/msalz/venv_nni_dev/lib64/python3.6/site-packages/json_tricks/nonp.py\", line 99, in dumps\n     primitives=primitives, fallback_encoders=fallback_encoders, **jsonkwargs).encode(obj)\n   File \"/usr/lib64/python3.6/json/encoder.py\", line 199, in encode\n     chunks = self.iterencode(o, _one_shot=True)\n   File \"/usr/lib64/python3.6/json/encoder.py\", line 257, in iterencode\n     return _iterencode(o, 0)\n ValueError: Out of range float values are not JSON compliant\n </denchmark-code>\n \n <denchmark-code>authorName: default\n experimentName: example_mnist\n maxExecDuration: 2h\n maxTrialNum: 1000\n trialConcurrency: 2\n localConfig:\n     useActiveGpu: true\n     maxTrialNumPerGpu: 2\n #choice: local, remote, pai\n trainingServicePlatform: local\n searchSpacePath: search_space.json\n #choice: true, false\n useAnnotation: false\n advisor:\n   #choice: Hyperband\n   builtinAdvisorName: BOHB\n   classArgs:\n     min_budget: 4\n     max_budget: 32\n     #eta: proportion of discarded trials\n     eta: 2\n     #choice: maximize, minimize\n     optimize_mode: minimize\n trial:\n   command: python3 test.py\n   codeDir: .\n   gpuNum: 1\n </denchmark-code>\n \n <denchmark-link:https://user-images.githubusercontent.com/12211578/66374895-528b0500-e9ac-11e9-92f7-8cbd4c85e668.png></denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "martsalz", "commentT": "2019-10-09T07:09:04Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/martsalz>@martsalz</denchmark-link>\n  Hi, can you log the value of logs[\"val_loss\"] ?  I suspect that the value of logs[\"val_loss\"] is out of range for the failed trail.   Sometimes if learning rate is too large, the loss value could be 'nan'.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "martsalz", "commentT": "2019-11-14T09:11:30Z", "comment_text": "\n \t\tBecause the experiments take a few hours/days and the error message occurs sporadically in my opinion, the reproducibility is not that easy.....\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "martsalz", "commentT": "2019-11-22T11:08:44Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/chicm-ms>@chicm-ms</denchmark-link>\n  Yes, logs[\"val_loss\"] returns the value :\n `[11/22/2019, 12:05:09 PM] PRINT  - ETA: 0s - loss: nan\n [11/22/2019, 12:05:09 PM] PRINT 499/500 [============================>.]\n [11/22/2019, 12:05:09 PM] PRINT  - ETA: 0s - loss: nan\n [11/22/2019, 12:05:13 PM] PRINT 500/500 [==============================]\n [11/22/2019, 12:05:13 PM] PRINT  - 118s 236ms/step - loss: nan - val_loss: nan\n [11/22/2019, 12:05:13 PM] ERROR (mnist_keras/MainThread) Out of range float values are not JSON compliant\n Traceback (most recent call last):\n File \"test.py\", line 76, in \n train(ARGS, RECEIVED_PARAMS)\n File \"test.py\", line 63, in train\n validation_steps=val_steps)\n File \"/home/msalz/venv_nni_dev/lib64/python3.6/site-packages/keras/legacy/interfaces.py\", line 91, in wrapper\n return func(*args, **kwargs)\n File \"/home/msalz/venv_nni_dev/lib64/python3.6/site-packages/keras/engine/training.py\", line 1658, in fit_generator\n initial_epoch=initial_epoch)\n File \"/home/msalz/venv_nni_dev/lib64/python3.6/site-packages/keras/engine/training_generator.py\", line 255, in fit_generator\n callbacks.on_epoch_end(epoch, epoch_logs)\n File \"/home/msalz/venv_nni_dev/lib64/python3.6/site-packages/keras/callbacks.py\", line 152, in on_epoch_end\n callback.on_epoch_end(epoch, logs)\n File \"test.py\", line 41, in on_epoch_end\n nni.report_intermediate_result(logs[\"val_loss\"])\n File \"/home/msalz/nni/build/nni/trial.py\", line 84, in report_intermediate_result\n 'value': metric\n File \"/home/msalz/venv_nni_dev/lib64/python3.6/site-packages/json_tricks/nonp.py\", line 99, in dumps\n primitives=primitives, fallback_encoders=fallback_encoders, **jsonkwargs).encode(obj)\n File \"/usr/lib64/python3.6/json/encoder.py\", line 199, in encode\n chunks = self.iterencode(o, _one_shot=True)\n File \"/usr/lib64/python3.6/json/encoder.py\", line 257, in iterencode\n return _iterencode(o, 0)\n ValueError: Out of range float values are not JSON compliant\n `\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "martsalz", "commentT": "2019-11-25T09:33:08Z", "comment_text": "\n \t\tHow can this bug be fixed quickly? In my experiment with 173 trainings, 65 of them failed due to this error. With 8h/model very frustrating.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "martsalz", "commentT": "2019-12-05T05:18:46Z", "comment_text": "\n \t\tWe are trying to fix this with PR <denchmark-link:https://github.com/microsoft/nni/pull/1958>#1958</denchmark-link>\n \n Too large learning rate can lead to nan loss value, a quick fix is to check your trial code / search space and set learning rate to a smaller value.\n Since the loss value of the failed jobs are nan, the hyper parameter of those jobs won't be the best even if they are not failed.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "martsalz", "commentT": "2020-02-27T06:45:09Z", "comment_text": "\n \t\tClosing this issue since the problem is fixed in nni v1.4.  <denchmark-link:https://github.com/martsalz>@martsalz</denchmark-link>\n  , you can check our latest nni version.\n \t\t"}}}, "commit": {"commit_id": "a9711e24a150d2cf4e5cb3ed3d2224789369feda", "commit_author": "chicm-ms", "commitT": "2020-01-15 16:43:19+08:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\nni_manager\\core\\nniDataStore.ts", "file_new_name": "src\\nni_manager\\core\\nniDataStore.ts", "file_complexity": {"file_NLOC": "333", "file_CCN": "13", "file_NToken": "2516"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "7,135,144", "deleted_lines": "134,143"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\nni_manager\\core\\sqlDatabase.ts", "file_new_name": "src\\nni_manager\\core\\sqlDatabase.ts", "file_complexity": {"file_NLOC": "225", "file_CCN": "21", "file_NToken": "2008"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "8,206,207,209", "deleted_lines": "205,206,208"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\nni_manager\\package.json", "file_new_name": "src\\nni_manager\\package.json", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "19,38", "deleted_lines": null}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\nni_manager\\yarn.lock", "file_new_name": "src\\nni_manager\\yarn.lock", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "160,161,162,163,1847,1848,1849,2378,2379,2380,2381,2382,2383", "deleted_lines": "1843,1844,1845"}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\sdk\\pynni\\nni\\msg_dispatcher.py", "file_new_name": "src\\sdk\\pynni\\nni\\msg_dispatcher.py", "file_complexity": {"file_NLOC": "164", "file_CCN": "51", "file_NToken": "1121"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "65", "deleted_lines": "65", "method_info": {"method_name": "_pack_parameter", "method_params": "parameter_id,params,customized,trial_job_id,parameter_index", "method_startline": "52", "method_endline": "65", "method_complexity": {"method_NLOC": "14", "method_CCN": "4", "method_NToken": "81", "method_nesting_level": "0"}}}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\sdk\\pynni\\nni\\platform\\local.py", "file_new_name": "src\\sdk\\pynni\\nni\\platform\\local.py", "file_complexity": {"file_NLOC": "71", "file_CCN": "14", "file_NToken": "472"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "33", "deleted_lines": "33", "method_info": {"method_name": "request_next_parameter", "method_params": "", "method_startline": "32", "method_endline": "39", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "32", "method_nesting_level": "0"}}}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\sdk\\pynni\\nni\\trial.py", "file_new_name": "src\\sdk\\pynni\\nni\\trial.py", "file_complexity": {"file_NLOC": "60", "file_CCN": "14", "file_NToken": "268"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "133", "deleted_lines": "123,135", "method_info": {"method_name": "report_final_result", "method_params": "metric", "method_startline": "122", "method_endline": "140", "method_complexity": {"method_NLOC": "11", "method_CCN": "3", "method_NToken": "58", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "112", "deleted_lines": "113", "method_info": {"method_name": "report_intermediate_result", "method_params": "metric", "method_startline": "100", "method_endline": "120", "method_complexity": {"method_NLOC": "13", "method_CCN": "3", "method_NToken": "63", "method_nesting_level": "0"}}}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\sdk\\pynni\\nni\\utils.py", "file_new_name": "src\\sdk\\pynni\\nni\\utils.py", "file_complexity": {"file_NLOC": "63", "file_CCN": "14", "file_NToken": "300"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "5,7,12,13", "deleted_lines": "4,5,6,7"}}}, "file_8": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\webui\\package.json", "file_new_name": "src\\webui\\package.json", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "21,59", "deleted_lines": null}}}, "file_9": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\webui\\src\\components\\trial-detail\\TableList.tsx", "file_new_name": "src\\webui\\src\\components\\trial-detail\\TableList.tsx", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "9,181,185,213,222", "deleted_lines": "9,181,185,213,222"}}}, "file_10": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\webui\\src\\static\\function.ts", "file_new_name": "src\\webui\\src\\static\\function.ts", "file_complexity": {"file_NLOC": "176", "file_CCN": "40", "file_NToken": "1131"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "177,178,179,180,181,182,183", "deleted_lines": "177", "method_info": {"method_name": "parseMetrics", "method_params": "string", "method_startline": "177", "method_endline": "183", "method_complexity": {"method_NLOC": "7", "method_CCN": "2", "method_NToken": "37", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "186", "deleted_lines": null, "method_info": {"method_name": "metricAccuracy", "method_params": "MetricDataRecord", "method_startline": "185", "method_endline": "188", "method_complexity": {"method_NLOC": "4", "method_CCN": "2", "method_NToken": "29", "method_nesting_level": "0"}}}}}, "file_11": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\webui\\src\\static\\model\\trial.ts", "file_new_name": "src\\webui\\src\\static\\model\\trial.ts", "file_complexity": {"file_NLOC": "180", "file_CCN": "2", "file_NToken": "1214"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "2,59,141,142,144", "deleted_lines": "2,59,141,142,144"}}}, "file_12": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\webui\\yarn.lock", "file_new_name": "src\\webui\\yarn.lock", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "83,84,85,86,3995,3996,3997,3998,3999,4000", "deleted_lines": null}}}}}}