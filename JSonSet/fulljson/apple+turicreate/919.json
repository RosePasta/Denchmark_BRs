{"BR": {"BR_id": "919", "BR_author": "prashpal", "BRopenT": "2018-07-28T00:14:49Z", "BRcloseT": "2019-11-13T00:32:19Z", "BR_text": {"BRsummary": "Can't get activity classification to work with MPS", "BRdescription": "\n In OS10.14, activity classification works fine with CPU. I tried to force it to use MPS by setting use_mps() as True in the file _mps_utils.py. But the test case is just crashing.\n Image classification seems to be using MPS, but I am not sure why activity classification is not.\n Has the activity classification been verified to work with MPS? If so, could you share the steps to get it working?\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "prashpal", "commentT": "2018-07-28T06:06:54Z", "comment_text": "\n \t\tSorry you are having this issue.\n It should work by default. What Mac hardware are you using?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "prashpal", "commentT": "2018-07-30T17:49:01Z", "comment_text": "\n \t\tI am using a 2016 13 inch MacBook Pro with Intel Iris Graphics 550.\n Below are the steps I followed:\n \n Install MacOS 10.14 public beta version\n Get Turi Create source code: https://github.com/apple/turicreate\n Set use_mps() = True in _mps_utils.py file\n Build Turi\n Run unit test for activity classification:\n ~/turicreate/scripts/run_python_test.sh debug\n \n If I skip step 3, then unit tests run training on CPU and the tests are passing.\n But, with MPS forced, the test crashes.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "prashpal", "commentT": "2018-07-31T21:07:52Z", "comment_text": "\n \t\tUnfortunately, the GPU acceleration for activity classification (and object detection) requires a discrete GPU, not the Intel Iris chipset. Image classification uses a different framework (via CoreML) to leverage GPU resources.\n Probably we should update our documentation to clarify the requirements, especially since they differ across toolkits\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "prashpal", "commentT": "2018-08-01T03:11:49Z", "comment_text": "\n \t\tThanks for the clarification. Are there plans to enable activity classification with Intel graphics since MPS can support it?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "prashpal", "commentT": "2018-08-01T17:28:24Z", "comment_text": "\n \t\tSome testing with our current MPS implementation using Intel graphics did not reveal performance improvements over our MXNet (CPU only) implementation. We do plan to do some more work on activity classification, so we can certainly revisit this question after we've iterated on the implementation some.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "prashpal", "commentT": "2018-08-02T11:33:56Z", "comment_text": "\n \t\tFor future reference - _mps_utils.use_mps() is an internal function, that checks the user config plus relevant hardware availability, not a user facing API.\n The APIish way for enforcing GPU usage would be\n <denchmark-code>tc.config.set_num_gpus(1)\n </denchmark-code>\n \n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "prashpal", "commentT": "2018-08-02T18:44:56Z", "comment_text": "\n \t\tOk thank you <denchmark-link:https://github.com/nickjong>@nickjong</denchmark-link>\n  and <denchmark-link:https://github.com/igiloh>@igiloh</denchmark-link>\n  . Please keep me updated when support with Intel graphics is available. Even if we do not see perf improvement with Intel graphics, it will be good to have the option of using it.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "prashpal", "commentT": "2018-08-02T19:08:04Z", "comment_text": "\n \t\thi <denchmark-link:https://github.com/prashpal>@prashpal</denchmark-link>\n  ,\n If you're building TC from source - you can try modifying  in <denchmark-link:https://github.com/apple/turicreate/blob/master/src/unity/python/turicreate/toolkits/_mps_utils.py#L178>_mps_utils.py</denchmark-link>\n  to return always true. If you're on mac OS 10.14+ - it would use the intel GPU.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "prashpal", "commentT": "2018-08-02T21:43:32Z", "comment_text": "\n \t\tYes, I am setting use_mps() = True in _mps_utils.py file to force to use Intel graphics.\n use_mps() seems to be a check for 2 things -  has_fast_mps_support() and _tc_config.get_num_gpus() != 0.\n With the above change, the test seems to be going through Intel graphics, but the validation test crashes. So I wanted to check if the tests were verified to work with Intel graphics?\n Is my understanding correct?\n \n Image classification Training - can use CPU or discrete GPU (via MPS or MXNet)\n Activity classification Training - can use CPU or discrete GPU (via MPS or MXNet)\n Image classification Inference - can use CPU or discrete GPU (via CoreML or MPS or MXNet) or Intel GPU (via CoreML)\n Activity classification Inference - can use CPU or discrete GPU (via MPS or MXNet)\n \n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "prashpal", "commentT": "2018-08-08T20:27:01Z", "comment_text": "\n \t\tI have not verified any tests for the Intel graphics MPS code path, since this code path is not currently supported.\n Image classification has two phases: feature extraction using a neural network and logistic regression based on the extracted features. The logistic regression currently always runs on CPU. The feature extraction is the same for both training and inference, and always uses CoreML, which should use GPU or CPU, as available.\n Activity classification training and inference both use either MPS (on Macs with AMD GPUs) or MXNet (using GPU or CPU, as available).\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "prashpal", "commentT": "2018-08-09T20:09:05Z", "comment_text": "\n \t\tThanks for clarifying <denchmark-link:https://github.com/nickjong>@nickjong</denchmark-link>\n \n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "prashpal", "commentT": "2018-10-19T22:52:49Z", "comment_text": "\n \t\tWe should probably just go ahead and use the Intel GPU anyway, since this is less confusing. Need to verify that this works end-to-end though\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "prashpal", "commentT": "2018-10-26T00:07:29Z", "comment_text": "\n \t\tOk, thanks for the update.\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "prashpal", "commentT": "2019-02-21T18:10:50Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/nickjong>@nickjong</denchmark-link>\n  , I wanted to check if we have any updates on this.\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "prashpal", "commentT": "2019-03-06T00:47:13Z", "comment_text": "\n \t\tSorry, nothing concrete to report yet, although activity classification is something we're actively investigating now\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "prashpal", "commentT": "2019-03-13T21:47:17Z", "comment_text": "\n \t\tWe currently expect/hope to support Skylake Intel GPUs and later, in June\n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "prashpal", "commentT": "2019-10-16T18:52:15Z", "comment_text": "\n \t\tHi\n Im curious if there is any public documentation on CoreML's device selection heuristic. With the addition of 10.15's CoreML preferredMetalDevice API for MLModelConfig, I imagined it would be possible to force the MTLDevice an MLModel / Vision request runs on.\n In my testing with integrated, discrete and eGPU, it appears only the eGPU consistently runs the CoreML model. My CoreML Model is a pipeline model consisting of a Mobilenet classifier with multiple outputs (multi head classifiers attached to a custom feature extractor).\n Im curious to understand device selection preference for a few reasons:\n a) Id like to ensure my MLModel is fed images CIImages backed by textures local to the device inference will be run on, to limit PCI transfers and keep things local\n b) my model is actually fed frames of video, and WWDC '19 / 10.15 introduces VideoToolbox and AVFoundation API's to help force particular video encoders and decoders on specific GPUs.\n In theory, if all works well, I should be able to specify the same MTLDevice for video decode, preprocessing, CoreML/Vision inference, and subsequent encoding - keeping all IOSurface backed pixel buffers and textures resident on the same GPU.\n Apple has a Pro Apps WWDC video suggesting this is the path forward to fast path Multi GPU support / Afterburner decoder support moving forward.\n Does CoreML ACTUALLY allow suggested device placement to work?\n I am running a retina MacBook Pro 2018 with Vega 20 GPU, and trying various methods to get the Vega 20 to light up.\n \n \n Disabling automatic graphics switching\n \n \n Disabling automatic graphics switching / setting NSSupportsAutomaticGraphicsSwitching to False\n \n \n Disabling automatic graphics switching / setting NSSupportsAutomaticGraphicsSwitching to True\n \n \n Enabling automatic graphics switching / setting NSSupportsAutomaticGraphicsSwitching to False\n \n \n Enabling automatic graphics switching / setting NSSupportsAutomaticGraphicsSwitching to True\n \n \n having a full battery and plugged into my Apple power adaptor\n \n \n having full battery and plugged into my eGPU\n \n \n I can only on occasion get the Vega 20 to 'light up' - but can consistently have CoreML run on the eGPU (Radeon 580)\n I can inspect the CoreML model and see its MLConfig has a preferred device set to the Vega 20, but Instruments, Xcode, and Activity Monitor all report no GPU usage on the Vega 20, and in fact, sometimes no GPU usage at all (not even the integrated GPU).\n Any insight would be most helpful.\n Apologies if this is not the best repository to post my query to.\n Thanks in advance.\n \t\t"}, "comments_17": {"comment_id": 18, "comment_author": "prashpal", "commentT": "2019-10-17T19:21:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/vade>@vade</denchmark-link>\n  - this isn't the right place to ask this question. I suggest reporting the issue here: <denchmark-link:https://developer.apple.com/bug-reporting/>https://developer.apple.com/bug-reporting/</denchmark-link>\n \n \t\t"}, "comments_18": {"comment_id": 19, "comment_author": "prashpal", "commentT": "2019-10-17T19:41:50Z", "comment_text": "\n \t\tI hear you <denchmark-link:https://github.com/TobyRoseman>@TobyRoseman</denchmark-link>\n  - however having these convo's in the open rather than behind closed feedback is helpful to other developers who have similar questions, and leaves a breadcrumb trail to answers. I'm sure you understand!\n But yes, ive asked there and on S/O as well. Appreciate the response!\n \t\t"}}}, "commit": {"commit_id": "f441ea29d86649ceb92e5c6622e485caa8365343", "commit_author": "Nick Jong", "commitT": "2019-11-12 16:32:18-08:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ml\\neural_net\\mps_compute_context.hpp", "file_new_name": "src\\ml\\neural_net\\mps_compute_context.hpp", "file_complexity": {"file_NLOC": "32", "file_CCN": "0", "file_NToken": "241"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": null, "deleted_lines": "31,32,33,34,35,36,37"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\ml\\neural_net\\mps_compute_context.mm", "file_new_name": "src\\ml\\neural_net\\mps_compute_context.mm", "file_complexity": {"file_NLOC": "113", "file_CCN": "19", "file_NToken": "777"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "61,62,63,64,65,66,67,68,69,70,71,72,73,74", "deleted_lines": "61,62,63,64,65,66,67,68,69,70,71,72,73,74", "method_info": {"method_name": "turi::neural_net::mps_compute_context::mps_compute_context", "method_params": "", "method_startline": "61", "method_endline": "74", "method_complexity": {"method_NLOC": "11", "method_CCN": "2", "method_NToken": "53", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "43,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75", "deleted_lines": "46,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75", "method_info": {"method_name": "turi::neural_net::create_mps_compute_context", "method_params": "", "method_startline": "42", "method_endline": "76", "method_complexity": {"method_NLOC": "21", "method_CCN": "5", "method_NToken": "132", "method_nesting_level": "3"}}}}}}}}