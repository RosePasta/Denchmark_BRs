{"BR": {"BR_id": "1831", "BR_author": "znation", "BRopenT": "2019-05-03T01:13:55Z", "BRcloseT": "2019-05-03T20:17:03Z", "BR_text": {"BRsummary": "CoreML export of boosted tree classifier gives wrong predictions", "BRdescription": "\n Repro:\n #!/bin/python\n \n import turicreate as tc\n import coremltools\n \n SEED = 42\n \n # Load the data\n data =  tc.SFrame.read_csv('https://raw.githubusercontent.com/apple/turicreate/master/src/unity/python/turicreate/test/mushroom.csv')\n \n # Label 'c' is edible\n data['label'] = data['label'] == 'c'\n \n # Make a train-test split\n train_data, test_data = data.random_split(0.8,seed=SEED)\n \n # Create a model.\n model = tc.boosted_trees_classifier.create(train_data, target='label',\n                                            max_iterations=2,\n                                            max_depth = 3)\n \n # Save predictions to an SFrame (class and corresponding class-probabilities)\n predictions = model.classify(test_data)\n \n # Evaluate the model and save the results into a dictionary\n results = model.evaluate(test_data)\n \n test_frame = test_data[0:1]\n test_dict = test_frame[0]\n \n train_data.save('mushrooms_train.sf')\n test_data.save('mushrooms_test.sf')\n model.save('mushrooms.tcmodel')\n model.export_coreml('mushrooms.mlmodel')\n \n tc_model = tc.load_model('mushrooms.tcmodel')\n cm_model = coremltools.models.MLModel('mushrooms.mlmodel')\n \n print(\"Testing TuriCreate Model\")\n print(\"Input Test Frame: {}\".format(test_frame))\n print(\"Model output labels: {}\".format(tc_model.classes))\n print(\"Model Classification: {}\".format(tc_model.classify(test_frame)))\n print(\"Classification Scores: {}\".format(tc_model.predict(test_frame,output_type='probability_vector')))\n print(\"=============================================================================\")\n print()\n print(\"Testing CoreML Model\")\n print(\"Input Test Dictionary: {}\".format(test_dict))\n print(\"Model Classification: {}\".format(cm_model.predict(test_dict)))\n Expected:\n \n Same predictions from both Turi Create and Core ML\n \n Actual:\n \n Different predictions!\n \n \t"}, "comments": {}}, "commit": {"commit_id": "ea07d2dd68321352fc324e929a89239931c920dc", "commit_author": "Zach Nation", "commitT": "2019-05-03 13:17:03-07:00", "commit_complexity": {"commit_NLOC": "0.32142857142857145", "commit_CCN": "0.32142857142857145", "commit_Nprams": "0.32142857142857145"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\unity\\python\\turicreate\\test\\test_coreml_export.py", "file_new_name": "src\\unity\\python\\turicreate\\test\\test_coreml_export.py", "file_complexity": {"file_NLOC": "280", "file_CCN": "81", "file_NToken": "2888"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "382,383,384,385,386,387,388,389,390", "deleted_lines": null, "method_info": {"method_name": "test_tree_export_issue_1831", "method_params": "self", "method_startline": "382", "method_endline": "390", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "75", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "104", "deleted_lines": "100", "method_info": {"method_name": "_test_coreml_export", "method_params": "self,model,test_sf,is_regression,has_probability,predict_topk", "method_startline": "58", "method_endline": "115", "method_complexity": {"method_NLOC": "27", "method_CCN": "10", "method_NToken": "244", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\unity\\toolkits\\coreml_export\\xgboost_exporter.cpp", "file_new_name": "src\\unity\\toolkits\\coreml_export\\xgboost_exporter.cpp", "file_complexity": {"file_NLOC": "213", "file_CCN": "25", "file_NToken": "1736"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "96,100,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248", "deleted_lines": "96,100,187,189,193,211,226,227,228,229,230,231,232", "method_info": {"method_name": "turi::export_xgboost_model", "method_params": "metadata,trees,is_classifier,is_random_forest,context", "method_startline": "78", "method_endline": "270", "method_complexity": {"method_NLOC": "151", "method_CCN": "20", "method_NToken": "1200", "method_nesting_level": "1"}}}}}}}}