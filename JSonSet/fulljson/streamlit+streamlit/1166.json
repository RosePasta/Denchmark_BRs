{"BR": {"BR_id": "1166", "BR_author": "firstmover", "BRopenT": "2020-03-02T05:00:25Z", "BRcloseT": "2020-07-13T17:39:42Z", "BR_text": {"BRsummary": "Incorrect cache hit when argument is a list of float", "BRdescription": "\n <denchmark-h:h1>Summary</denchmark-h>\n \n Incorrect cache hit when argument is a list of float.\n <denchmark-h:h1>Steps to reproduce</denchmark-h>\n \n import streamlit as st\n \n \n @st.cache()\n def _func(o):\n     return o\n \n \n def main():\n \n     for o in [[0.0, 1.0], [2.0, 3.0]]:\n         print(\"o: {}\".format(o))\n         ret_o = _func(o)\n         print(\"ret_o: {}\".format(ret_o))\n \n     for o in [[0, 1], [2, 3]]:\n         print(\"o: {}\".format(o))\n         ret_o = _func(o)\n         print(\"ret_o: {}\".format(ret_o))\n \n \n if __name__ == \"__main__\":\n     main()\n <denchmark-h:h2>Expected behavior:</denchmark-h>\n \n _func returns the argument o. In main loop, for each _func call o and ret_o should be identical.\n <denchmark-h:h2>Actual behavior:</denchmark-h>\n \n Incorrect cache hit when o is a list of float. When o is a list of int, it works correctly.\n <denchmark-h:h2>Is this a regression?</denchmark-h>\n \n I am not sure. I didn't try the old version.\n <denchmark-h:h1>Debug info</denchmark-h>\n \n \n Streamlit version: 0.56.0\n Python version: 3.7.4\n conda\n OS version: Ubuntu 18.04.4 LTS\n Browser version: Google Chrome 80.0.3987.116\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "firstmover", "commentT": "2020-03-03T21:04:43Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/firstmover>@firstmover</denchmark-link>\n  ,\n This does seem to be a bug.  Thanks for reporting it!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "firstmover", "commentT": "2020-06-16T16:11:48Z", "comment_text": "\n \t\tI just wanted to comment (as can be seen in <denchmark-link:https://github.com/streamlit/streamlit/issues/1502>#1502</denchmark-link>\n ) that this bug only happens if the floats are integer-like, i.e. it does not happen with [1.0001, 2.0001, ...] but it does happen for [1.0, 2.0,...].\n \t\t"}}}, "commit": {"commit_id": "9a8d76e5facd1983c660e9240a731f4905758738", "commit_author": "Jonathan R", "commitT": "2020-07-07 14:46:19-04:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "lib\\streamlit\\hashing.py", "file_new_name": "lib\\streamlit\\hashing.py", "file_complexity": {"file_NLOC": "600", "file_CCN": "159", "file_NToken": "3393"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "257,258", "method_info": {"method_name": "__init__", "method_params": "self,hash_funcs", "method_startline": "236", "method_endline": "258", "method_complexity": {"method_NLOC": "11", "method_CCN": "4", "method_NToken": "69", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "259,260,262,263,267,274,281", "deleted_lines": "257,258,259,262,264,268,269,270,271,278,279,280,282,288", "method_info": {"method_name": "to_bytes", "method_params": "self,obj,context", "method_startline": "257", "method_endline": "296", "method_complexity": {"method_NLOC": "21", "method_CCN": "8", "method_NToken": "153", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "lib\\tests\\streamlit\\caching_test.py", "file_new_name": "lib\\tests\\streamlit\\caching_test.py", "file_complexity": {"file_NLOC": "420", "file_CCN": "64", "file_NToken": "2309"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "47,48,49,50,51,52,53", "deleted_lines": null, "method_info": {"method_name": "test_multiple_int_like_floats", "method_params": "self", "method_startline": "47", "method_endline": "53", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "41", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "49,50", "deleted_lines": null, "method_info": {"method_name": "test_multiple_int_like_floats.foo", "method_params": "x", "method_startline": "49", "method_endline": "50", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "7", "method_nesting_level": "2"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "lib\\tests\\streamlit\\hashing_test.py", "file_new_name": "lib\\tests\\streamlit\\hashing_test.py", "file_complexity": {"file_NLOC": "731", "file_CCN": "173", "file_NToken": "5760"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "106,107", "deleted_lines": null, "method_info": {"method_name": "test_recursive_hash_func.hash_int", "method_params": "x", "method_startline": "106", "method_endline": "107", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "7", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "110,111", "deleted_lines": null, "method_info": {"method_name": "test_recursive_hash_func.foo", "method_params": "x", "method_startline": "110", "method_endline": "111", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "7", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "105,106,107,108,109,110,111,112,113", "deleted_lines": null, "method_info": {"method_name": "test_recursive_hash_func", "method_params": "self", "method_startline": "105", "method_endline": "113", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "36", "method_nesting_level": "1"}}}}}}}}