{"BR": {"BR_id": "184", "BR_author": "omar-ogm", "BRopenT": "2020-06-24T08:44:28Z", "BRcloseT": "2020-06-24T13:56:42Z", "BR_text": {"BRsummary": "gentl.NotAvailableException: 'BUFFER_INFO_WIDTH'", "BRdescription": "\n \n This issue is related to <denchmark-link:https://github.com/genicam/harvesters/issues/175>#175</denchmark-link>\n \n When I test it it seems to work, but now is not working anymore. (Not on any version before and after the issue was resolved). Maybe I test it on another camera since Ive been working recently on different cameras but Im pretty sure it was this camera.\n There doesn't seem to be information on the buffer available, the exception that is being thrown is  but on the commit that fixes this problem initially the exception caught is .\n <denchmark-code>  File \"C:\\Users\\OmarGarridoMart\u00edn\\Desktop\\OMAR\\PROJECTS\\DB_HSTM_POC\\workspace\\db_high_speed_track_monitoring_poc_VENV\\lib\\site-packages\\harvesters\\core.py\", line 834, in __init__\n     self._data = self._to_np_array(proxy)\n   File \"C:\\Users\\OmarGarridoMart\u00edn\\Desktop\\OMAR\\PROJECTS\\DB_HSTM_POC\\workspace\\db_high_speed_track_monitoring_poc_VENV\\lib\\site-packages\\harvesters\\core.py\", line 842, in _to_np_array\n     w = self._buffer.width\n   File \"C:\\Users\\OmarGarridoMart\u00edn\\Desktop\\OMAR\\PROJECTS\\DB_HSTM_POC\\workspace\\db_high_speed_track_monitoring_poc_VENV\\lib\\site-packages\\genicam\\gentl.py\", line 4368, in _get_width\n     return _gentl.Buffer__get_width(self)\n _gentl.NotAvailableException: GenTL exception: Resource or information is not available. (Message from the source: 'BUFFER_INFO_WIDTH' is not available for this buffer(payload type: PAYLOAD_TYPE_CHUNK_DATA)) (ID: -1014)\n </denchmark-code>\n \n To Reproduce\n Steps to reproduce the behavior:\n Connect to a camera and try to fetch a buffer\n <denchmark-code>from harvesters.core import Harvester\n \n \n h = Harvester()\n \n h.add_file(r'C:\\Program Files\\MATRIX VISION\\mvIMPACT Acquire\\bin\\x64\\mvGenTLProducer.cti')\n h.update()\n \n print(h.files)\n \n ia = h.create_image_acquirer(0)\n \n # Example: Change values from the GenICam Camera, This values are in the node_map\n # ia.remote_device.node_map.Height.value = 16\n # ia.remote_device.node_map.Width.value = 256\n \n ia.start_acquisition()\n \n with ia.fetch_buffer() as buffer:\n     # Let's create an alias of the 2D image component:\n     component = buffer.payload.components[0]\n \n     # Note that the number of components can be vary. If your\n     # target remote device transmits a multi-part information, then\n     # you'd get two or more components in the payload. However, now\n     # we're working with a remote device that transmits only a 2D image.\n     # So we manipulate only index 0 of the list object, components.\n \n     # Let's see the acquired data in 1D:\n     _1d = component.data\n     print('1D: {0}'.format(_1d))\n \n \n # Release and exit\n ia.stop_acquisition()\n </denchmark-code>\n \n Expected behavior\n I guess the buffer should be either filled on not used in this case.\n Screenshots\n Desktop (please complete the following information):\n \n Windows 10\n Python: 3.7\n Harvester: 1.2.3, 1.2.4 and 1.2.6 tested\n GenTL Producer: matrix vision recommended from harvesters\n Camera: TIS DKF 33GP1300\n \n Additional context\n The entire buffer seem to not have the information available\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "omar-ogm", "commentT": "2020-06-24T09:09:44Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/omar-ogm>@omar-ogm</denchmark-link>\n  Hi. Thank you for the report. Could you try out the latest master branch when you can, please? /Kazunari\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "omar-ogm", "commentT": "2020-06-24T11:40:05Z", "comment_text": "\n \t\tHi with this I get a buffer with information with it, so we could say that this specific issue is closed. I'm getting the image as BayerRG8 format, one question out of topic, Can I do demosaicing with harvesters?\n Thank you for the quick response\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "omar-ogm", "commentT": "2020-06-24T13:56:39Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/omar-ogm>@omar-ogm</denchmark-link>\n  Thank you for the reply. Concerning your additional question, I think OpenCV can help you just taking an image data array from Harvester.\n \t\t"}}}, "commit": {"commit_id": "9a6f97bf574bf97f9c20dc5315f38b156e138169", "commit_author": "kznr", "commitT": "2020-06-24 18:08:48+09:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\harvesters\\core.py", "file_new_name": "src\\harvesters\\core.py", "file_complexity": {"file_NLOC": "2403", "file_CCN": "355", "file_NToken": "10670"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "843,846,850,856", "deleted_lines": "844,848,854", "method_info": {"method_name": "_to_np_array", "method_params": "self,pf_proxy", "method_startline": "838", "method_endline": "865", "method_complexity": {"method_NLOC": "26", "method_CCN": "5", "method_NToken": "137", "method_nesting_level": "1"}}}}}}}}