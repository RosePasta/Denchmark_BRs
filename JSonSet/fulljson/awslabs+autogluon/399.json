{"BR": {"BR_id": "399", "BR_author": "braaannigan", "BRopenT": "2020-04-01T13:19:12Z", "BRcloseT": "2020-05-06T20:24:15Z", "BR_text": {"BRsummary": "LightGBM error special JSON characters in feature name", "BRdescription": "\n Hi - great library everyone!\n I'm doing tabular prediction with news article data.  The LightGBM model doesn't run with the following error:\n <denchmark-code>LightGBMError: Do not support special JSON characters in feature name.\n Do not support special JSON characters in feature name.\n </denchmark-code>\n \n The upstream issue in LightGBM is here:<denchmark-link:https://github.com/microsoft/LightGBM/issues/2455>microsoft/LightGBM#2455</denchmark-link>\n \n Basically they check for special json characters .e.g [],{}\": in features names and throw an error if found. Could autogluon check for these characters and remove any offending features?\n Liam\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "braaannigan", "commentT": "2020-04-01T18:14:07Z", "comment_text": "\n \t\tGood catch, thanks for the info! Just to clarify, LightGBM fails in this scenario, but the rest of the models train successfully and you are able to get a result from AutoGluon?\n If so, I think I can look into fixing this, the question is if I can get it to still use the features rather than dropping them entirely (I think I can by clever renaming).\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "braaannigan", "commentT": "2020-04-01T18:46:12Z", "comment_text": "\n \t\tYep, everything else works fine and I get a result at the end\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "braaannigan", "commentT": "2020-04-02T19:19:54Z", "comment_text": "\n \t\tTo aid in testing to ensure I am covering all of the failure cases, could you provide a sample training data of the news article data you are experiencing the problem with or the location which you obtained the data? If you wish to keep it private that is fine, but it could help accelerating the fix on my end.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "braaannigan", "commentT": "2020-04-03T06:16:15Z", "comment_text": "\n \t\tSure - first 3 rows of csv are enough to trigger it - see attached zip.\n <denchmark-link:https://github.com/awslabs/autogluon/files/4425329/err.tar.gz>err.tar.gz</denchmark-link>\n \n Is there a way to access errors in the underlying models using the %debug in ipython?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "braaannigan", "commentT": "2020-05-04T08:21:59Z", "comment_text": "\n \t\tHi,\n I have encountred the same problem. Fixed it before the training begins with a regular expression and lambda function (pandas). Object named \"data\" must be a dataframe.\n import re\n data = data.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))\n Could provide data/column headers if needed.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "braaannigan", "commentT": "2020-05-04T11:37:32Z", "comment_text": "\n \t\tThanks for the info <denchmark-link:https://github.com/oguzhangur96>@oguzhangur96</denchmark-link>\n ! Right now the main difficulty here is to ensure that column names are always converted when entering the model (whether for feature importances, fit, inference) and also inversely converted back to the original upon leaving. This seems to be something that LightGBM itself should handle, and I don't have a good understanding of why they haven't done so.\n Furthermore, it isn't sufficient to only remove the special characters, because we have to ensure no two columns have the same name. One simple way is to just rename columns 0-n as '0', '1', ...'n-1', 'n', but then this operation would also have to be done on all of the 99% of problems where this is not required, particularly for online-inference of single rows. I have to first benchmark inference times in these situations to ensure our online-inference speed isn't significantly slowed due to this fix.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "braaannigan", "commentT": "2020-05-06T20:24:15Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/braaannigan>@braaannigan</denchmark-link>\n  , <denchmark-link:https://github.com/oguzhangur96>@oguzhangur96</denchmark-link>\n \n <denchmark-link:https://github.com/awslabs/autogluon/pull/451>#451</denchmark-link>\n  is merged and should fix this issue (Just in time for our upcoming 0.0.7 release!). I have tested this on various NLP problems which previously caused crashes, and it successfully trains.\n Thanks again for highlighting this issue!\n Best,\n Nick\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "braaannigan", "commentT": "2020-05-07T14:33:35Z", "comment_text": "\n \t\tGreat - looking forward to the next release!\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "braaannigan", "commentT": "2020-06-04T10:52:01Z", "comment_text": "\n \t\thow can i fix this error \"LightGBMError: Do not support special JSON characters in feature name.\"\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "braaannigan", "commentT": "2020-06-04T18:20:35Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ind-kum>@ind-kum</denchmark-link>\n  Please check your AutoGluon version and upgrade to 0.0.10 if you haven't. This should fix the issue.\n \t\t"}}}, "commit": {"commit_id": "cd5f6050bc9f33838b5ce3a5849df82ac63b61bd", "commit_author": "Nick Erickson", "commitT": "2020-05-06 13:17:34-07:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "autogluon\\utils\\tabular\\ml\\models\\abstract\\abstract_model.py", "file_new_name": "autogluon\\utils\\tabular\\ml\\models\\abstract\\abstract_model.py", "file_complexity": {"file_NLOC": "407", "file_CCN": "111", "file_NToken": "3249"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "253,255", "deleted_lines": "253,255", "method_info": {"method_name": "compute_feature_importance", "method_params": "self,X,y,features_to_use,preprocess,subsample_size,silent,kwargs", "method_startline": "241", "method_endline": "270", "method_complexity": {"method_NLOC": "22", "method_CCN": "11", "method_NToken": "244", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "autogluon\\utils\\tabular\\ml\\models\\lgb\\lgb_model.py", "file_new_name": "autogluon\\utils\\tabular\\ml\\models\\lgb\\lgb_model.py", "file_complexity": {"file_NLOC": "252", "file_CCN": "72", "file_NToken": "2143"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "280,281,282,283,284,285", "deleted_lines": null, "method_info": {"method_name": "compute_feature_importance", "method_params": "self,kwargs", "method_startline": "280", "method_endline": "285", "method_complexity": {"method_NLOC": "6", "method_CCN": "4", "method_NToken": "68", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "298,302,303,304", "deleted_lines": null, "method_info": {"method_name": "get_model_feature_importance", "method_params": "self,use_original_feature_names", "method_startline": "298", "method_endline": "305", "method_complexity": {"method_NLOC": "8", "method_CCN": "6", "method_NToken": "100", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": null, "deleted_lines": "270", "method_info": {"method_name": "get_model_feature_importance", "method_params": "self", "method_startline": "270", "method_endline": "274", "method_complexity": {"method_NLOC": "5", "method_CCN": "2", "method_NToken": "45", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "174", "deleted_lines": null, "method_info": {"method_name": "generate_datasets", "method_params": "self,DataFrame,Series,params,X_test,Y_test,dataset_train,dataset_val,save", "method_startline": "167", "method_endline": "186", "method_complexity": {"method_NLOC": "14", "method_CCN": "9", "method_NToken": "198", "method_nesting_level": "1"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165", "deleted_lines": "154", "method_info": {"method_name": "preprocess", "method_params": "self,X,is_train", "method_startline": "149", "method_endline": "165", "method_complexity": {"method_NLOC": "15", "method_CCN": "7", "method_NToken": "120", "method_nesting_level": "1"}}}}}}}}