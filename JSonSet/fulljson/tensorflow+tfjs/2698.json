{"BR": {"BR_id": "2698", "BR_author": "Nithanaroy", "BRopenT": "2020-01-25T07:20:49Z", "BRcloseT": "2020-01-29T03:38:33Z", "BR_text": {"BRsummary": "Error: Unsupported tensor DataType: DT_INT64", "BRdescription": "\n <denchmark-h:h4>TensorFlow.js version</denchmark-h>\n \n \"@tensorflow/tfjs-node\": \"^1.5.1\"\n <denchmark-h:h4>Browser version</denchmark-h>\n \n NA\n <denchmark-h:h4>Describe the problem or feature request</denchmark-h>\n \n When I load a saved model that is saved by tf.keras, Error: Unsupported tensor DataType: DT_INT64 error is thrown in node v10.15.0.\n <denchmark-h:h4>Code to reproduce the bug / link to feature request</denchmark-h>\n \n <denchmark-link:https://colab.research.google.com/drive/13GNsRCVtiS3r-VcupZGC2aZo-gSueMEV#revisionId=0BwoZu2uBQcUZTUFQNDBIdURHaUJsR3VMK2c2OWhxZVg4LytzPQ>https://colab.research.google.com/drive/13GNsRCVtiS3r-VcupZGC2aZo-gSueMEV#revisionId=0BwoZu2uBQcUZTUFQNDBIdURHaUJsR3VMK2c2OWhxZVg4LytzPQ</denchmark-link>\n  saves the  model using \n and\n const tf = require(\"@tensorflow/tfjs-node\");\n async function main() {\n     const modelInfo = await tf.node.getMetaGraphsFromSavedModel(\"./saved_model/3_table_model\")    \n }\n main();\n tries to load the meta graph.\n And here is the stack trace from the run,\n <denchmark-code>node-pre-gyp info This Node instance does not support builds for N-API version 4\n node-pre-gyp info This Node instance does not support builds for N-API version 5\n node-pre-gyp info This Node instance does not support builds for N-API version 4\n node-pre-gyp info This Node instance does not support builds for N-API version 5\n 2020-01-24 23:17:13.039164: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n 2020-01-24 23:17:13.069065: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x109651400 initialized for platform Host (this does not guarantee that XLA will be used). Devices:\n 2020-01-24 23:17:13.069096: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version\n (node:16643) UnhandledPromiseRejectionWarning: Error: Unsupported tensor DataType: DT_INT64\n     at mapTFDtypeToJSDtype (<PROJECT_PATH>/node_modules/@tensorflow/tfjs-node/dist/saved_model.js:464:19)\n     at Object.<anonymous> (<PROJECT_PATH>/node_modules/@tensorflow/tfjs-node/dist/saved_model.js:162:57)\n     at step (<PROJECT_PATH>/node_modules/@tensorflow/tfjs-node/dist/saved_model.js:48:23)\n     at Object.next (<PROJECT_PATH>/node_modules/@tensorflow/tfjs-node/dist/saved_model.js:29:53)\n     at fulfilled (<PROJECT_PATH>/node_modules/@tensorflow/tfjs-node/dist/saved_model.js:20:58)\n (node:16643) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\n (node:16643) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n </denchmark-code>\n \n I'm running this on a Mac OS 10.15.1 with Python 2.7.17 :: Anaconda, Inc.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "Nithanaroy", "commentT": "2020-01-25T08:00:15Z", "comment_text": "\n \t\tI changed my dataset to  to make it work. But not sure if this is mentioned already, but I couldn't find in the  of Node.js doc.\n Changed my Python input pipeline for this at <denchmark-link:https://colab.research.google.com/drive/13GNsRCVtiS3r-VcupZGC2aZo-gSueMEV#revisionId=0BwoZu2uBQcUZSEVEdWVwU1c1ZVE4dlpvS0JuNEc2ZlBSa1g4PQ>https://colab.research.google.com/drive/13GNsRCVtiS3r-VcupZGC2aZo-gSueMEV#revisionId=0BwoZu2uBQcUZSEVEdWVwU1c1ZVE4dlpvS0JuNEc2ZlBSa1g4PQ</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "Nithanaroy", "commentT": "2020-01-25T20:18:06Z", "comment_text": "\n \t\tSubmitted a PR <denchmark-link:https://github.com/tensorflow/tfjs/pull/2700>#2700</denchmark-link>\n  , thanks for reporting.\n cc <denchmark-link:https://github.com/kangyizhang>@kangyizhang</denchmark-link>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "Nithanaroy", "commentT": "2020-02-12T07:30:20Z", "comment_text": "\n \t\tI'm working on another more complex model and facing the same issue even after ensuring all my tf.data and tf.feature_columns operations are on int32 or float32. Is there a way to debug this in my Python code?\n I tried to use saved model CLI to find any instances of int64 in my saved model, but couldn't find any function which can help me here.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "Nithanaroy", "commentT": "2020-10-02T16:10:28Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/kangyizhang>@kangyizhang</denchmark-link>\n  I'm getting this error after converting a GraphModel from TFHub to a saved model:\n <denchmark-code>(node:39361) UnhandledPromiseRejectionWarning: Error: Unsupported tensor DataType: DT_INT64, try to modify the model in python to convert the datatype\n </denchmark-code>\n \n The model I have converted, was working in TFJS, since it's a tfjs-models example:\n <denchmark-code>tfconv.loadGraphModel(\n       'https://tfhub.dev/tensorflow/tfjs-model/toxicity/1/default/1',\n       { fromTFHub: true })\n </denchmark-code>\n \n \t\t"}}}, "commit": {"commit_id": "ac52f1c9e4b6319dcfaa79b685069c91be95cfde", "commit_author": "Rajeshwar Reddy T", "commitT": "2020-01-28 19:38:32-08:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "0.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tfjs-node\\src\\saved_model.ts", "file_new_name": "tfjs-node\\src\\saved_model.ts", "file_complexity": {"file_NLOC": "256", "file_CCN": "42", "file_NToken": "1931"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "438,439", "deleted_lines": "437", "method_info": {"method_name": "mapTFDtypeToJSDtype", "method_params": "string", "method_startline": "425", "method_endline": "441", "method_complexity": {"method_NLOC": "17", "method_CCN": "6", "method_NToken": "58", "method_nesting_level": "0"}}}}}}}}