{"BR": {"BR_id": "2643", "BR_author": "Nithanaroy", "BRopenT": "2020-01-05T05:05:13Z", "BRcloseT": "2020-02-04T00:26:40Z", "BR_text": {"BRsummary": "tf.LayersModel.save fails in a worker as window object is absent", "BRdescription": "\n To get help from the community, we encourage using Stack Overflow and the <denchmark-link:https://stackoverflow.com/questions/tagged/tensorflow.js>tensorflow.js</denchmark-link>\n  tag.\n <denchmark-h:h4>TensorFlow.js version</denchmark-h>\n \n 1.13\n <denchmark-h:h4>Browser version</denchmark-h>\n \n Chrome 79\n <denchmark-h:h4>Describe the problem</denchmark-h>\n \n  does not work in a web worker as  object is not found. It is due <denchmark-link:https://github.com/tensorflow/tfjs/blob/master/tfjs-core/src/io/indexed_db.ts#L60>https://github.com/tensorflow/tfjs/blob/master/tfjs-core/src/io/indexed_db.ts#L60</denchmark-link>\n  line\n <denchmark-code>ReferenceError: window is not defined\n     at sp (indexed_db.ts:60)\n     at new t (indexed_db.ts:89)\n     at cp (indexed_db.ts:242)\n     at router_registry.ts:96\n     at Array.forEach (<anonymous>)\n     at Function.t.getHandlers (router_registry.ts:95)\n     at Function.t.getSaveHandlers (router_registry.ts:71)\n     at Object.getSaveHandlers (router_registry.ts:110)\n     at e.<anonymous> (training.ts:1814)\n     at common.ts:14\n </denchmark-code>\n \n <denchmark-h:h4>Code to reproduce the bug / link to feature request</denchmark-h>\n \n Simply try to save a model in a worker. You can try the below example in a worker,\n worker.js\n const model = tf.sequential(\n     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n console.log('Prediction from original model:');\n model.predict(tf.ones([1, 3])).print();\n \n const saveResults = await model.save('indexeddb://my-model-1');\n main-thread.js\n const w = new Worker(\"worker.js\");\n ...\n \n const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n console.log('Prediction from loaded model:');\n loadedModel.predict(tf.ones([1, 3])).print();\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "Nithanaroy", "commentT": "2020-01-05T05:05:58Z", "comment_text": "\n \t\tAs a temporary solution, I added window = globalThis; in my worker.js file and it works.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "Nithanaroy", "commentT": "2020-01-06T10:07:57Z", "comment_text": "\n \t\tJust made a PR to fix it!\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "Nithanaroy", "commentT": "2020-02-04T00:26:40Z", "comment_text": "\n \t\tRelated <denchmark-link:https://github.com/tensorflow/tfjs/pull/2647>PR</denchmark-link>\n  has been merged, closing this issue.Thank you.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "Nithanaroy", "commentT": "2020-03-10T20:49:41Z", "comment_text": "\n \t\tAs of Version 1.7.0 this issues still existed for me.\n <denchmark-code>0.worker.js:106656 Uncaught (in promise) ReferenceError: window is not defined\n     at Ef (0.worker.js:106656)\n     at new t (0.worker.js:106656)\n     at kf (0.worker.js:106656)\n     at 0.worker.js:106656\n     at Array.forEach (<anonymous>)\n     at Function.t.getHandlers (0.worker.js:106656)\n     at Function.t.getSaveHandlers (0.worker.js:106656)\n     at Object.getSaveHandlers (0.worker.js:106656)\n     at t.<anonymous> (0.worker.js:107602)\n     at 0.worker.js:107602\n </denchmark-code>\n \n If anybody else still has this problem, this worked for me:\n I created a custom IOHandler, which is basically a copy of the existing BrowserIndexedDB class and I updated the getIndexedDBFactory function the handler uses like so:\n function getIndexedDBFactory(): IDBFactory {\n     if (!env().getBool('IS_BROWSER')) {\n         // TODO(cais): Add more info about what IOHandler subtypes are available.\n         //   Maybe point to a doc page on the web and/or automatically determine\n         //   the available IOHandlers and print them in the error message.\n         throw new Error(\n             'Failed to obtain IndexedDB factory because the current environment' +\n             'is not a web browser.');\n     }\n     // tslint:disable-next-line:no-any\n     let theWindow;\n     try {\n         theWindow = window;\n     }\n     catch {\n         theWindow = self;\n     }\n     const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n         theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n         theWindow.shimIndexedDB;\n     if (factory == null) {\n         throw new Error(\n             'The current browser does not appear to support IndexedDB.');\n     }\n     return factory;\n }\n Usage:\n //saveurl without the indexeddb:// scheme\n model.save(new IDBWorkerSaveHandler(saveUrl))\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "Nithanaroy", "commentT": "2020-06-07T16:47:15Z", "comment_text": "\n \t\tI still have this issue in version 2.0.0. I'm using workerize-loader in a project bootstrapped with create-react-app.\n \t\t"}}}, "commit": {"commit_id": "5afa7c289e5197f141161c1f5ee85d68694c1e34", "commit_author": "WenheLI", "commitT": "2020-02-03 19:24:45-05:00", "commit_complexity": {"commit_NLOC": "0.6666666666666666", "commit_CCN": "0.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tfjs-core\\src\\io\\indexed_db.ts", "file_new_name": "tfjs-core\\src\\io\\indexed_db.ts", "file_complexity": {"file_NLOC": "247", "file_CCN": "64", "file_NToken": "1688"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "60", "deleted_lines": "60", "method_info": {"method_name": "getIndexedDBFactory", "method_params": "", "method_startline": "50", "method_endline": "69", "method_complexity": {"method_NLOC": "16", "method_CCN": "8", "method_NToken": "79", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "tfjs-core\\src\\io\\local_storage.ts", "file_new_name": "tfjs-core\\src\\io\\local_storage.ts", "file_complexity": {"file_NLOC": "238", "file_CCN": "28", "file_NToken": "1734"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "312", "deleted_lines": null, "method_info": {"method_name": "constructor", "method_params": "", "method_startline": "307", "method_endline": "316", "method_complexity": {"method_NLOC": "10", "method_CCN": "2", "method_NToken": "47", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "41", "deleted_lines": null, "method_info": {"method_name": "purgeLocalStorageArtifacts", "method_params": "", "method_startline": "39", "method_endline": "61", "method_complexity": {"method_NLOC": "23", "method_CCN": "8", "method_NToken": "153", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "123,124", "deleted_lines": "122", "method_info": {"method_name": "constructor", "method_params": "string", "method_startline": "121", "method_endline": "140", "method_complexity": {"method_NLOC": "15", "method_CCN": "6", "method_NToken": "83", "method_nesting_level": "0"}}}}}}}}