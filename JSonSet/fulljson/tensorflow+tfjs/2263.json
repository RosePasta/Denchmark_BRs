{"BR": {"BR_id": "2263", "BR_author": "cifkao", "BRopenT": "2019-10-24T00:17:37Z", "BRcloseT": "2019-11-04T23:16:26Z", "BR_text": {"BRsummary": "\"Cannot compute the outputs\" for dynamic ops (TensorArrayStack)", "BRdescription": "\n <denchmark-h:h3>TensorFlow.js version</denchmark-h>\n \n 1.2.11\n <denchmark-h:h4>Browser version</denchmark-h>\n \n Google Chrome Version 77.0.3865.120 (Official Build) (64-bit)\n <denchmark-h:h4>Describe the problem or feature request</denchmark-h>\n \n I have a graph model (built using tf.contrib.seq2seq) which uses control flow ops for dynamic RNN decoding. I exported it with TF 1.15 (using simple_save) and converted with TF.js 1.2.11 (command: tensorflowjs_converter --input_format=tf_saved_model --output_format=tfjs_graph_model --saved_model_tags=serve).\n When trying to run the model with executeAsync, I get the following error:\n <denchmark-code>Uncaught (in promise) Error: Cannot compute the outputs [decoder/decode_sample/decoder_1/transpose_1] from the provided inputs [inputs,softmax_temperature]. Consider providing the following inputs: []. Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [decoder/decode_sample/decoder_1/TensorArrayStack_1/TensorArrayGatherV3]\n     at t.<anonymous> (graph_executor.ts:318)\n     at callbacks.ts:253\n     at Object.next (callbacks.ts:253)\n     at o (callbacks.ts:253)\n </denchmark-code>\n \n Does this mean TF.js currently cannot handle these ops? Is it the TensorArrayStack/TensorArrayGatherV3 operation or something else?\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "cifkao", "commentT": "2019-10-24T17:29:22Z", "comment_text": "\n \t\tHi there is a known bug with  specified here in <denchmark-link:https://github.com/tensorflow/tfjs/issues/1793>#1793</denchmark-link>\n  , for it to work you may need to specify the output nodes please refer <denchmark-link:https://github.com/tensorflow/tfjs/issues/2254#issuecomment-545755315>here</denchmark-link>\n .\n cc <denchmark-link:https://github.com/pyu10055>@pyu10055</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "cifkao", "commentT": "2019-10-24T18:26:24Z", "comment_text": "\n \t\tHi, thanks for the response. I'd seen that issue before and I'm already specifying the output nodes like this:\n <denchmark-code>model.executeAsync({'inputs': tf.zeros([1, 128, 16]), 'softmax_temperature': tf.scalar(0.6)}, [\"decoder/decode_sample/decoder_1/transpose_1\"])\n </denchmark-code>\n \n I can, for example, get the encoder outputs by passing \"encoder_rnn/rnn/transpose_1\", but there seems to be some issue with the decoder... I'm guessing the graph may be broken by the conversion.\n Is there some way to get more information from the executor to see what exactly is preventing it from running? The error says Consider providing the following inputs: [], which doesn't help much...\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "cifkao", "commentT": "2019-10-29T03:31:27Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/cifkao>@cifkao</denchmark-link>\n  Thank you for reporting the issue, this might related to our model analyzer having issue with TensorArray ops. Do you have the converted op that can be shared for us to reproduce?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "cifkao", "commentT": "2019-10-29T12:39:03Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/pyu10055>@pyu10055</denchmark-link>\n  I was able to get a complete example. I'm attaching the <denchmark-link:https://github.com/tensorflow/tfjs/files/3783528/saved_model.pb.gz>SavedModel protobuffer</denchmark-link>\n  and the <denchmark-link:https://github.com/tensorflow/tfjs/files/3783529/model.json.gz>tfjs model</denchmark-link>\n  (converted using v1.3.0).\n I run the model with:\n model.executeAsync({'inputs': tf.zeros([1, 16], 'int32'), 'softmax_temperature': tf.scalar(0.6)}, [\"decoder/decode_sample/decoder/transpose_1\"])\n and get the following error:\n <denchmark-code>Uncaught (in promise) Error: Cannot compute the outputs [decoder/decode_sample/decoder/transpose_1] from the provided inputs [inputs,softmax_temperature]. Consider providing the following inputs: []. Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [decoder/decode_sample/decoder/TensorArrayStack_1/TensorArrayGatherV3]\n     at t.<anonymous> (graph_executor.ts:318)\n     at callbacks.ts:253\n     at Object.next (callbacks.ts:253)\n     at o (callbacks.ts:253)\n </denchmark-code>\n \n So this is the op concerned:\n {'name': 'decoder/decode_sample/decoder/TensorArrayStack_1/TensorArrayGatherV3',\n  'op': 'TensorArrayGatherV3',\n  'input': ['decoder/decode_sample/decoder/TensorArray_1',\n   'decoder/decode_sample/decoder/TensorArrayStack_1/range',\n   'decoder/decode_sample/decoder/while/Exit_3'],\n  'attr': {'element_shape': {'shape': {'dim': [{'size': '-1'}]}},\n   'dtype': {'type': 'DT_INT32'}}}\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "cifkao", "commentT": "2019-10-29T17:36:03Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/cifkao>@cifkao</denchmark-link>\n  can you provide the whole directory of the saved_model, also the weights files for the tfjs converter model? Thanks.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "cifkao", "commentT": "2019-10-29T21:27:57Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/pyu10055>@pyu10055</denchmark-link>\n  Sure, here's everything:\n \n export.tar.gz\n export_web.tar.gz\n \n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "cifkao", "commentT": "2019-11-02T05:30:32Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/cifkao>@cifkao</denchmark-link>\n   I was able to run your model with the fix above.\n I got following result\n [122, 122, 122, 122, 122, 122, 122, 121, 122, 122, 122, 122, 122, 121, 122, 122, 122, 122, 121, 122, 122, 122, 122, 121, 122, 122, 122, 121, 122, 122, 122, 121, 122, 122, 122, 121, 122, 122, 122, 121, 122, 122, 122, 121, 122, 122, 122, 121, 122, 122]\n Please let me know if it matches your python output, thanks.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "cifkao", "commentT": "2019-11-02T10:54:39Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/pyu10055>@pyu10055</denchmark-link>\n  Perfect!\n I got a different output, but I assume it's because the random generators are different. Can you try the deterministic output \"decoder/decode_greedy/decoder/transpose_1\"? That gave me:\n [[ 37  37 162  73 162  55  55  55  55  55  55  55  55  55  55  55  55  55\n 55  55  55  55  55  55  55  55  55  55  55  55  55  55  55  55  55  55\n 55  55  55  55  55  55  55  55  55  55  55  55  55  55]]\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "cifkao", "commentT": "2019-11-02T10:56:07Z", "comment_text": "\n \t\t(Updated the comment above, it should be greedy instead of sample.)\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "cifkao", "commentT": "2019-11-02T15:35:56Z", "comment_text": "\n \t\tyes, that is the exact result I got\n [37, 37, 162, 73, 162, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55]\n length: 1\n proto: Array(0)\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "cifkao", "commentT": "2019-11-02T15:39:05Z", "comment_text": "\n \t\tYou have some Assert ops in your model, it would be ideal to avoid them, since it will slow down the model. Our converter automatically convert them to no-op by default, which is causing the issue you are having.\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "cifkao", "commentT": "2019-11-04T09:57:00Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/pyu10055>@pyu10055</denchmark-link>\n  Thanks! Is there an easy way to remove the asserts from the graph? (They're added by .)\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "cifkao", "commentT": "2019-11-04T19:07:53Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/cifkao>@cifkao</denchmark-link>\n  in that case you can rely on our converter to do that, and the fix I had will fix your issue.\n \t\t"}}}, "commit": {"commit_id": "3b53ad9c9246f1ffa78072513141ccfcfd599604", "commit_author": "Ping Yu", "commitT": "2019-11-04 15:16:25-08:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tfjs-converter\\src\\operations\\executors\\control_executor.ts", "file_new_name": "tfjs-converter\\src\\operations\\executors\\control_executor.ts", "file_complexity": {"file_NLOC": "132", "file_CCN": "17", "file_NToken": "1074"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "160", "deleted_lines": "160", "method_info": {"method_name": "return", "method_params": "data", "method_startline": "42", "method_endline": "163", "method_complexity": {"method_NLOC": "110", "method_CCN": "16", "method_NToken": "904", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tfjs-converter\\src\\operations\\executors\\graph_executor.ts", "file_new_name": "tfjs-converter\\src\\operations\\executors\\graph_executor.ts", "file_complexity": {"file_NLOC": "71", "file_CCN": "19", "file_NToken": "568"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "69", "deleted_lines": "69", "method_info": {"method_name": "(anonymous)", "method_params": "", "method_startline": "29", "method_endline": "91", "method_complexity": {"method_NLOC": "62", "method_CCN": "17", "method_NToken": "483", "method_nesting_level": "0"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tfjs-converter\\src\\operations\\executors\\graph_executor_test.ts", "file_new_name": "tfjs-converter\\src\\operations\\executors\\graph_executor_test.ts", "file_complexity": {"file_NLOC": "173", "file_CCN": "32", "file_NToken": "1487"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "148,150,151,152", "deleted_lines": "148,150", "method_info": {"method_name": "(anonymous)", "method_params": "", "method_startline": "148", "method_endline": "153", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "43", "method_nesting_level": "0"}}}}}}}}