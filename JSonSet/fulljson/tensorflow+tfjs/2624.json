{"BR": {"BR_id": "2624", "BR_author": "MatPoliquin", "BRopenT": "2019-12-29T09:10:38Z", "BRcloseT": "2020-02-05T15:58:33Z", "BR_text": {"BRsummary": "tf.time() kernelMs returns zero in Firefox", "BRdescription": "\n TensorFlow.js 1.3.1\n FireFox 71.0 (64-bit)\n Chrome 79.0.3945.88 (64-bit)\n Ubuntu 19.10 (64-bit)\n Problem:\n tf.time().kernelMs returns 0 (or sometimes a very low number) on Firefox while always returning the correct timing on Chrome.\n The correct value is typicaly between 100-300 ms, depending on which gpu you have.\n Code:\n \n const matSize = 1024;\n const mat1 = tf.ones([matSize, matSize], tf.float32);\n const mat2 = tf.ones([matSize, matSize], tf.float32);\n const time = await tf.time(() => tf.matMul(mat1, mat2));\n \n Edit:\n I got the same problem with Edge and Android Chrome\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "MatPoliquin", "commentT": "2020-01-17T23:32:51Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/annxingyuan>@annxingyuan</denchmark-link>\n  seems to be a bug I was able to reproduce the bug in firefox  , please check\n repro code: const matSize = 1024; const mat1 = tf.ones([matSize, matSize], tf.float32); const mat2 = tf.ones([matSize, matSize], tf.float32); const time1 = await tf.time(() => tf.matMul(mat1, mat2)); console.log(kernelMs: ${time1.kernelMs}, wallTimeMs: ${time1.wallMs});\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "MatPoliquin", "commentT": "2020-02-03T13:13:11Z", "comment_text": "\n \t\tI think the reason kernelMs is inaccurate in Firefox is that Firefox doesn't support WebGL query timers. In this case we just snapshot performance.now() before and after calling the WebGL draw command for that kernel and report kernelMs as the difference.\n <denchmark-link:https://github.com/dsmilkov>@dsmilkov</denchmark-link>\n  <denchmark-link:https://github.com/nsthorat>@nsthorat</denchmark-link>\n  - do you think it makes sense to omit  from  output if query timers are unavailable?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "MatPoliquin", "commentT": "2020-02-03T16:21:03Z", "comment_text": "\n \t\tInstead of omitting (which is basically silencing the error), how about we throw an error with a user-friendly msg? Specifically the webgl's backend.time() should throw an error if the query timer is not supported, and that error should propagate through tf.time. WDYT?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "MatPoliquin", "commentT": "2020-02-03T16:23:34Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/annxingyuan>@annxingyuan</denchmark-link>\n  we actually should use a CPU timer if it's not enabled today. I think it makes to disambiguate and have the error propagate through the tf.time() call.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "MatPoliquin", "commentT": "2020-02-03T16:35:39Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/dsmilkov>@dsmilkov</denchmark-link>\n  <denchmark-link:https://github.com/nsthorat>@nsthorat</denchmark-link>\n \n We do use a CPU timer if query timers are not enabled - but the CPU timer just reports the time elapsed before and after calling WebGL draw (which will always be close to 0).\n I feel like tf.time() shouldn't throw an error if query timers are not enabled because tf.time() also returns wallMs, which is valuable regardless of whether query timers are enabled. I think it makes sense for tf.time() to adapt its return signature depending on the device's capabilities. What do you think?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "MatPoliquin", "commentT": "2020-02-03T16:39:14Z", "comment_text": "\n \t\tAh okay, I think that makes sense. Something like gpuKernelMs?\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "MatPoliquin", "commentT": "2020-02-03T16:56:30Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/nsthorat>@nsthorat</denchmark-link>\n  I think  makes sense for the name because it could be meaningful for the CPU backend. How about just not returning  as part of  if the user is on the WebGL backend and the query timer extension is unavailable?\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "MatPoliquin", "commentT": "2020-02-03T17:42:59Z", "comment_text": "\n \t\tTalked to Nikhil. We decided that we shouldn't silently ignore (omit information) b/c that is not helpful to the user. E.g. if I'm using firefox + webgl and call tf.time, I want to understand why I can't measure the kernel time.\n Here is the proposal. Instead of throwing an error, kernelMs should map to:\n \n if everything works, a number\n if we can't measure it:\n \n {error: 'WebGL query timers are not supported in this environment'}\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "MatPoliquin", "commentT": "2020-02-03T17:53:21Z", "comment_text": "\n \t\tOK - sounds good.\n \t\t"}}}, "commit": {"commit_id": "0db0373720151aedf5608b4c4cde3c81c0aa85ad", "commit_author": "Ann Yuan", "commitT": "2020-02-05 10:58:32-05:00", "commit_complexity": {"commit_NLOC": "0.9230769230769231", "commit_CCN": "1.0", "commit_Nprams": "0.9230769230769231"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tfjs-core\\src\\backends\\backend.ts", "file_new_name": "tfjs-core\\src\\backends\\backend.ts", "file_complexity": {"file_NLOC": "547", "file_CCN": "6", "file_NToken": "3934"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "28", "deleted_lines": "28"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "tfjs-core\\src\\backends\\webgl\\backend_webgl.ts", "file_new_name": "tfjs-core\\src\\backends\\webgl\\backend_webgl.ts", "file_complexity": {"file_NLOC": "2414", "file_CCN": "69", "file_NToken": "15912"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "535", "deleted_lines": null, "method_info": {"method_name": "]", "method_params": "", "method_startline": "535", "method_endline": "535", "method_complexity": {"method_NLOC": "1", "method_CCN": "1", "method_NToken": "1", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "535", "deleted_lines": null, "method_info": {"method_name": "(anonymous)", "method_params": "", "method_startline": "535", "method_endline": "535", "method_complexity": {"method_NLOC": "1", "method_CCN": "1", "method_NToken": "15", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "530", "deleted_lines": "530", "method_info": {"method_name": "getExtraProfileInfo", "method_params": "", "method_startline": "530", "method_endline": "530", "method_complexity": {"method_NLOC": "1", "method_CCN": "1", "method_NToken": "1", "method_nesting_level": "0"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tfjs-core\\src\\globals.ts", "file_new_name": "tfjs-core\\src\\globals.ts", "file_complexity": {"file_NLOC": "81", "file_CCN": "23", "file_NToken": "569"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "242,243,244", "deleted_lines": "242"}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tfjs-core\\src\\profiler.ts", "file_new_name": "tfjs-core\\src\\profiler.ts", "file_complexity": {"file_NLOC": "74", "file_CCN": "16", "file_NToken": "579"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "80,81,82,83,84", "deleted_lines": "80,81,82", "method_info": {"method_name": "logKernelProfile", "method_params": "string,Tensor,TypedArray,NamedTensorMap,string", "method_startline": "79", "method_endline": "106", "method_complexity": {"method_NLOC": "24", "method_CCN": "5", "method_NToken": "241", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "80,81,82,83,84", "deleted_lines": "80,81,82", "method_info": {"method_name": "logKernelProfile", "method_params": "string,Tensor,TypedArray,number,NamedTensorMap,string", "method_startline": "79", "method_endline": "104", "method_complexity": {"method_NLOC": "22", "method_CCN": "4", "method_NToken": "225", "method_nesting_level": "0"}}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tfjs-core\\src\\profiler_test.ts", "file_new_name": "tfjs-core\\src\\profiler_test.ts", "file_complexity": {"file_NLOC": "140", "file_CCN": "21", "file_NToken": "1135"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160", "deleted_lines": null, "method_info": {"method_name": "(anonymous)", "method_params": "", "method_startline": "137", "method_endline": "160", "method_complexity": {"method_NLOC": "11", "method_CCN": "1", "method_NToken": "91", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "149,150,151,152,153,154,155,156,157,158,159", "deleted_lines": null, "method_info": {"method_name": "tf.tensor1d", "method_params": "", "method_startline": "149", "method_endline": "159", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "23", "method_nesting_level": "0"}}}}}}}}