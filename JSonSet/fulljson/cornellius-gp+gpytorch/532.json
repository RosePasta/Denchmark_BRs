{"BR": {"BR_id": "532", "BR_author": "Balandat", "BRopenT": "2019-02-22T21:57:14Z", "BRcloseT": "2019-03-19T14:58:12Z", "BR_text": {"BRsummary": "batch evaluation of Hadamard Multi-Task GP fails", "BRdescription": "\n Note: This happens both on master and on the batch_lt3 branch\n Repro:\n First run the <denchmark-link:https://github.com/cornellius-gp/gpytorch/blob/master/examples/03_Multitask_GP_Regression/Hadamard_Multitask_GP_Regression.ipynb>Hadamard MTGP example</denchmark-link>\n .\n Then\n <denchmark-code>test_x = torch.linspace(0, 1, 51).unsqueeze(-1).repeat(2, 1, 1)\n tast_i_task1 = torch.full_like(test_x, dtype=torch.long, fill_value=0)\n \n with torch.no_grad(), gpytorch.settings.fast_pred_var():\n     observed_pred_y1 = likelihood(model(test_x, tast_i_task1))\n </denchmark-code>\n \n errors out with\n <denchmark-code>---------------------------------------------------------------------------\n RuntimeError                              Traceback (most recent call last)\n <ipython-input-62-28172f8b7beb> in <module>()\n       1 with torch.no_grad(), gpytorch.settings.fast_pred_var():\n ----> 2     observed_pred_y1 = likelihood(model(test_x, tast_i_task1))\n \n /data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/models/exact_gp.py in __call__(self, *args, **kwargs)\n     199             )\n     200 \n --> 201             full_output = super(ExactGP, self).__call__(*full_inputs, **kwargs)\n     202             if settings.debug().on():\n     203                 if not isinstance(full_output, MultivariateNormal):\n \n /data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/module.py in __call__(self, *inputs, **kwargs)\n      18 \n      19     def __call__(self, *inputs, **kwargs):\n ---> 20         outputs = self.forward(*inputs, **kwargs)\n      21         if isinstance(outputs, list):\n      22             return [_validate_module_outputs(output) for output in outputs]\n \n <ipython-input-52-b565681c3db1> in forward(self, x, i)\n      17         covar_i = self.task_covar_module(i)\n      18         # Multiply the two together to get the covariance we want\n ---> 19         covar = covar_x.mul(covar_i)\n      20 \n      21         return gpytorch.distributions.MultivariateNormal(mean_x, covar)\n \n /data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/lazy_tensor.py in mul(self, other)\n     950                 return self._mul_constant(other.view(*other.shape[:-2]))\n     951 \n --> 952         return self._mul_matrix(other)\n     953 \n     954     def ndimension(self):\n \n /data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/lazy_tensor.py in _mul_matrix(self, other)\n     443         \"\"\"\n     444         from .mul_lazy_tensor import MulLazyTensor\n --> 445         return MulLazyTensor(self, other).evaluate_kernel()\n     446 \n     447     def _preconditioner(self):\n \n /data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/lazy_tensor.py in evaluate_kernel(self)\n     734         all lazily evaluated kernels actually evaluated.\n     735         \"\"\"\n --> 736         return self.representation_tree()(*self.representation())\n     737 \n     738     def inv_matmul(self, right_tensor, left_tensor=None):\n \n /data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/mul_lazy_tensor.py in representation_tree(self)\n     235 \n     236     def representation_tree(self):\n --> 237         if self.non_lazy_self is not None:\n     238             return self.non_lazy_self.representation_tree()\n     239         else:\n \n /data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/mul_lazy_tensor.py in non_lazy_self(self)\n      37         if hasattr(self, \"_non_lazy_self\"):\n      38             return self._non_lazy_self[0]\n ---> 39         elif len(self._args) == 1:\n      40             return self._args[0]\n      41         else:\n \n /data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/mul_lazy_tensor.py in _args(self)\n      54         if not hasattr(self, \"_mul_args_memo\") and not hasattr(self, \"_non_lazy_self\"):\n      55             lazy_tensors = sorted(\n ---> 56                 (lv.evaluate_kernel() for lv in self.lazy_tensors), key=lambda lv: lv.root_decomposition_size()\n      57             )\n      58 \n \n /data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/mul_lazy_tensor.py in <genexpr>(.0)\n      54         if not hasattr(self, \"_mul_args_memo\") and not hasattr(self, \"_non_lazy_self\"):\n      55             lazy_tensors = sorted(\n ---> 56                 (lv.evaluate_kernel() for lv in self.lazy_tensors), key=lambda lv: lv.root_decomposition_size()\n      57             )\n      58 \n \n /data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/lazy_evaluated_kernel_tensor.py in evaluate_kernel(self)\n     159             with settings.lazily_evaluate_kernels(False):\n     160                 self._cached_kernel_eval = self.kernel(\n --> 161                     x1, x2, diag=False, batch_dims=self.batch_dims, **self.params\n     162                 )\n     163 \n \n /data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/kernels/kernel.py in __call__(self, x1, x2, diag, batch_dims, **params)\n     396                 res = LazyEvaluatedKernelTensor(self, x1_, x2_, batch_dims=batch_dims, **params)\n     397             else:\n --> 398                 res = super(Kernel, self).__call__(x1_, x2_, batch_dims=batch_dims, **params)\n     399 \n     400             # TODO: remove bach checking once kernels support arbitrary batch dimensions\n \n /data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/module.py in __call__(self, *inputs, **kwargs)\n      18 \n      19     def __call__(self, *inputs, **kwargs):\n ---> 20         outputs = self.forward(*inputs, **kwargs)\n      21         if isinstance(outputs, list):\n      22             return [_validate_module_outputs(output) for output in outputs]\n \n /data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/kernels/index_kernel.py in forward(self, i1, i2, **params)\n      78     def forward(self, i1, i2, **params):\n      79         covar_matrix = self._eval_covar_matrix()\n ---> 80         res = InterpolatedLazyTensor(base_lazy_tensor=covar_matrix, left_interp_indices=i1, right_interp_indices=i2)\n      81         return res\n \n /data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/interpolated_lazy_tensor.py in __init__(self, base_lazy_tensor, left_interp_indices, left_interp_values, right_interp_indices, right_interp_values)\n      60             raise RuntimeError(\n      61                 \"left interp size ({}) is incompatible with base_lazy_tensor size ({}). Make sure the two \"\n ---> 62                 \"have the same number of batch dimensions\".format(left_interp_indices.size(), base_lazy_tensor.size())\n      63             )\n      64         if right_interp_indices.shape[:-2] != base_lazy_tensor.batch_shape:\n \n RuntimeError: left interp size (torch.Size([2, 251, 1])) is incompatible with base_lazy_tensor size (torch.Size([1, 2, 2])). Make sure the two have the same number of batch dimensions\n </denchmark-code>\n \n \t"}, "comments": {}}, "commit": {"commit_id": "5ae7e24308aa3da597e27bae3f4e6ea28630654f", "commit_author": "Geoff Pleiss", "commitT": "2019-03-18 19:27:07-04:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "0.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "gpytorch\\lazy\\interpolated_lazy_tensor.py", "file_new_name": "gpytorch\\lazy\\interpolated_lazy_tensor.py", "file_complexity": {"file_NLOC": "312", "file_CCN": "39", "file_NToken": "2738"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "15,16", "deleted_lines": null, "method_info": {"method_name": "_check_args", "method_params": "self,base_lazy_tensor,left_interp_indices,left_interp_values,right_interp_indices,right_interp_values", "method_startline": "15", "method_endline": "16", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "13", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "test\\lazy\\test_interpolated_lazy_tensor.py", "file_new_name": "test\\lazy\\test_interpolated_lazy_tensor.py", "file_complexity": {"file_NLOC": "108", "file_CCN": "12", "file_NToken": "1265"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "109", "deleted_lines": "109,111", "method_info": {"method_name": "create_lazy_tensor", "method_params": "self", "method_startline": "101", "method_endline": "115", "method_complexity": {"method_NLOC": "13", "method_CCN": "1", "method_NToken": "259", "method_nesting_level": "1"}}}}}}}}