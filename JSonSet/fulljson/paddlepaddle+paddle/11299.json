{"BR": {"BR_id": "11299", "BR_author": "jetfuel", "BRopenT": "2018-06-07T23:09:19Z", "BRcloseT": "2018-08-15T11:35:20Z", "BR_text": {"BRsummary": "Image Classification Always Returns Cat.", "BRdescription": "\n Issue: Image Classification with Resnet will only infer category 3 (cat)\n The training code as follow. The resnet_cifar10 is based on the <denchmark-link:https://github.com/PaddlePaddle/Paddle/blob/develop/python/paddle/fluid/tests/book/test_image_classification.py>image_classification_test</denchmark-link>\n  with some minor change.\n After changing training with about 10 epochs, the accuracy during training is about 95%. When test against with the test_suit using trainer.test, the accuracy is about 79%\n However, when using the Inferencer to load the saved params to do infer. The result is always showing category 3 (cat). I even use the the original train dataset for inferring, but the result is always 3.\n Could this mean that there might be a bug within the inferencer or saving the params?\n  The test from <denchmark-link:https://github.com/PaddlePaddle/Paddle/blob/develop/python/paddle/fluid/tests/book/test_image_classification.py>image_classification_test</denchmark-link>\n  does provide correct inferring.\n <denchmark-code># Copyright (c) 2016 PaddlePaddle Authors. All Rights Reserved\n #\n # Licensed under the Apache License, Version 2.0 (the \"License\");\n # you may not use this file except in compliance with the License.\n # You may obtain a copy of the License at\n #\n #     http://www.apache.org/licenses/LICENSE-2.0\n #\n # Unless required by applicable law or agreed to in writing, software\n # distributed under the License is distributed on an \"AS IS\" BASIS,\n # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n # See the License for the specific language governing permissions and\n # limitations under the License\n \n from __future__ import print_function\n \n import paddle\n import paddle.fluid as fluid\n import numpy\n import sys\n \n from vgg import vgg_bn_drop\n from resnet import resnet_cifar10\n \n \n def inference_network():\n     # The image is 32 * 32 with RGB representation.\n     data_shape = [3, 32, 32]\n     images = fluid.layers.data(name='pixel', shape=data_shape, dtype='float32')\n \n     predict = resnet_cifar10(images, 32)\n     # predict = vgg_bn_drop(images) # un-comment to use vgg net\n     return predict\n \n \n def train_network():\n     predict = inference_network()\n     label = fluid.layers.data(name='label', shape=[1], dtype='int64')\n     cost = fluid.layers.cross_entropy(input=predict, label=label)\n     avg_cost = fluid.layers.mean(cost)\n     accuracy = fluid.layers.accuracy(input=predict, label=label)\n     return [avg_cost, accuracy]\n \n \n def optimizer_program():\n     return fluid.optimizer.Adam(learning_rate=0.001)\n \n \n def train(use_cuda, train_program, params_dirname):\n     BATCH_SIZE = 128\n     EPOCH_NUM = 2\n \n     train_reader = paddle.batch(\n         paddle.reader.shuffle(paddle.dataset.cifar.train10(), buf_size=50000),\n         batch_size=BATCH_SIZE)\n \n     test_reader = paddle.batch(\n         paddle.dataset.cifar.test10(), batch_size=BATCH_SIZE)\n \n     def event_handler(event):\n         if isinstance(event, fluid.EndStepEvent):\n             if event.step % 100 == 0:\n                 print(\"\\nPass %d, Batch %d, Cost %f, Acc %f\" %\n                       (event.step, event.epoch, event.metrics[0],\n                        event.metrics[1]))\n             else:\n                 sys.stdout.write('.')\n                 sys.stdout.flush()\n \n         if isinstance(event, fluid.EndEpochEvent):\n             avg_cost, accuracy = trainer.test(\n                 reader=test_reader, feed_order=['pixel', 'label'])\n \n             print('\\nTest with Pass {0}, Loss {1:2.2}, Acc {2:2.2}'.format(\n                 event.epoch, avg_cost, accuracy))\n             if params_dirname is not None:\n                 trainer.save_params(params_dirname)\n \n     place = fluid.CUDAPlace(0) if use_cuda else fluid.CPUPlace()\n     trainer = fluid.Trainer(\n         train_func=train_program, optimizer_func=optimizer_program, place=place)\n \n     trainer.train(\n         reader=train_reader,\n         num_epochs=EPOCH_NUM,\n         event_handler=event_handler,\n         feed_order=['pixel', 'label'])\n \n \n def infer(use_cuda, inference_program, params_dirname=None):\n     place = fluid.CUDAPlace(0) if use_cuda else fluid.CPUPlace()\n     inferencer = fluid.Inferencer(\n         infer_func=inference_program, param_path=params_dirname, place=place)\n \n     train_reader = paddle.batch(\n         paddle.reader.shuffle(paddle.dataset.cifar.train10(), buf_size=50000),\n         batch_size=1000)\n \n     for batch in train_reader():\n         image = batch[0][0]\n         label = batch[0][1]\n \n         image_array = image.reshape(1, 3, 32, 32)\n \n         results = inferencer.infer({'pixel': image_array})\n         lab = results[0].argsort()\n         print(\"Label--------: \", label)\n         print(\"infer results: \", lab[0][-1])\n \n \n def main(use_cuda):\n     if use_cuda and not fluid.core.is_compiled_with_cuda():\n         return\n     save_path = \"image_classification_resnet.inference.model\"\n \n     train(\n         use_cuda=use_cuda,\n         train_program=train_network,\n         params_dirname=save_path)\n \n     infer(\n         use_cuda=use_cuda,\n         inference_program=inference_network,\n         params_dirname=save_path)\n \n \n if __name__ == '__main__':\n     # For demo purpose, the training runs on CPU\n     # Please change accordingly.\n     main(use_cuda=False)\n \n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "jetfuel", "commentT": "2018-08-15T11:35:18Z", "comment_text": "\n \t\t\u60a8\u597d\uff0c\u6b64issue\u5728\u8fd1\u4e00\u4e2a\u6708\u5185\u6682\u65e0\u66f4\u65b0\uff0c\u6211\u4eec\u5c06\u4e8e\u4eca\u5929\u5185\u5173\u95ed\u3002\u82e5\u5728\u5173\u95ed\u540e\u60a8\u4ecd\u9700\u8ddf\u8fdb\u63d0\u95ee\uff0c\u53ef\u91cd\u65b0\u5f00\u542f\u6b64\u95ee\u9898\uff0c\u6211\u4eec\u5c06\u572824\u5c0f\u65f6\u5185\u56de\u590d\u60a8\u3002\u56e0\u5173\u95ed\u5e26\u6765\u7684\u4e0d\u4fbf\u6211\u4eec\u6df1\u8868\u6b49\u610f\uff0c\u8bf7\u60a8\u8c05\u89e3~\u611f\u8c22\u60a8\u5bf9PaddlePaddle\u7684\u652f\u6301!\n Hello, this issue has not been updated in the past month. We will close it today for the sake of other user\u2018s experience. If you still need to follow up on this question after closing, please feel free to reopen it. In that case, we will get back to you within 24 hours. We apologize for the inconvenience caused by the closure and thank you so much for your support of PaddlePaddle Group!\n \t\t"}}}, "commit": {"commit_id": "637827a5bc80d6e0a17466e44b087f91601539cb", "commit_author": "Jeff Wang", "commitT": "2018-06-08 15:05:25-07:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "1.0", "commit_Nprams": "0.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\paddle\\fluid\\inferencer.py", "file_new_name": "python\\paddle\\fluid\\inferencer.py", "file_complexity": {"file_NLOC": "44", "file_CCN": "5", "file_NToken": "298"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "59", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,infer_func,param_path,place,parallel", "method_startline": "30", "method_endline": "59", "method_complexity": {"method_NLOC": "19", "method_CCN": "2", "method_NToken": "167", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "python\\paddle\\fluid\\trainer.py", "file_new_name": "python\\paddle\\fluid\\trainer.py", "file_complexity": {"file_NLOC": "242", "file_CCN": "48", "file_NToken": "1630"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "118,120", "deleted_lines": "118,120"}}}}}}