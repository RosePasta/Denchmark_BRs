{"BR": {"BR_id": "13117", "BR_author": "yangperasd", "BRopenT": "2018-08-31T09:09:31Z", "BRcloseT": "2018-09-03T04:07:57Z", "BR_text": {"BRsummary": "Bug in parallel Inference in Python Fluid v0.14.0", "BRdescription": "\n I found a bug in doing inference in parallel.\n Some info about this Bug:\n \n TypeError: run() got multiple values for keyword argument 'fetch_list'\n \n Some info about my env:\n paddlepaddle: 0.14.0\n system: Ubuntu 14.04\n python: 2.7\n Some code to reproduce this bug.\n The main code is borrowed from recognize_digits in  paddlepaddle book except  line 133.\n <denchmark-link:https://github.com/PaddlePaddle/book/blob/2b81d844673c1ba09fd596d70492375f2998ad36/02.recognize_digits/train.py#L133>https://github.com/PaddlePaddle/book/blob/2b81d844673c1ba09fd596d70492375f2998ad36/02.recognize_digits/train.py#L133</denchmark-link>\n \n \n Use the above code to replace the line 133.\n Some reasons about this bug:\n The main reason is the difference  betweent Executor  and ParallelExecutor in API.\n The API of class Executor is\n \n run(program=None, feed=None, fetch_list=None, feed_var_name='feed', fetch_var_name='fetch', scope=None, return_numpy=True, use_program_cache=False)\n \n The API of class ParallelExecutor is\n \n run(fetch_list, feed=None, feed_dict=None, return_numpy=True)\n \n Here is the main code result in this bug:\n \n \n When set parallel=True,  use  instead  to do inerence.\n According to the API of , the first arg of method  is fetch_list, but <denchmark-link:https://github.com/PaddlePaddle/Paddle/blob/c709a04ae22cd848f50a11737bdb3af24eabbe1e/python/paddle/fluid/inferencer.py#L102-L105>#L102-L105</denchmark-link>\n  assign fetch_list again by kwags.\n Some code to fix this bug\n `\n class Inferencer(object):\n \"\"\"\n Inferencer High Level API.\n <denchmark-code>Args:\n     infer_func (Python func): Infer function that will return predict Variable\n     param_path (str): The path where the inference model is saved by fluid.io.save_params\n     place (Place): place to do the inference\n     parallel (bool): use parallel_executor to run the inference, it will use multi CPU/GPU.\n \n Examples:\n     .. code-block:: python\n \n         def inference_program():\n             x = fluid.layers.data(name='x', shape=[13], dtype='float32')\n             y_predict = fluid.layers.fc(input=x, size=1, act=None)\n             return y_predict\n \n         place = fluid.CPUPlace()\n         inferencer = fluid.Inferencer(\n             infer_func=inference_program, param_path=\"/tmp/model\", place=place)\n \n \"\"\"\n \n def __init__(self, infer_func, param_path, place=None, parallel=False):\n     self.param_path = param_path\n     self.scope = core.Scope()\n     self.parallel = parallel\n     self.place = check_and_get_place(place)\n \n     self.inference_program = framework.Program()\n     with framework.program_guard(self.inference_program):\n         with unique_name.guard():\n             self.predict_var = infer_func()\n \n     with self._prog_and_scope_guard():\n         # load params from param_path into scope\n         io.load_params(executor.Executor(self.place), param_path)\n     \n     self.inference_program = self.inference_program.clone(for_test=True)\n \n     if parallel:\n         with self._prog_and_scope_guard():\n             self.exe = parallel_executor.ParallelExecutor(\n                 use_cuda=isinstance(self.place, core.CUDAPlace),\n                 main_program=self.inference_program)\n     else:\n         self.exe = executor.Executor(self.place)\n \n     self.parallel = parallel\n \n \n def infer(self, inputs, return_numpy=True):\n     \"\"\"\n     Do Inference for Inputs\n \n     Args:\n         inputs (map): a map of {\"input_name\": input_var} that will be feed into the inference program\n         return_numpy (bool): transform return value into numpy or not\n \n     Returns:\n         Tensor or Numpy: the predict value of the inference model for the inputs\n \n     Examples:\n         .. code-block:: python\n \n             tensor_x = numpy.random.uniform(0, 10, [batch_size, 13]).astype(\"float32\")\n             results = inferencer.infer({'x': tensor_x})\n     \"\"\"\n     if not isinstance(inputs, dict):\n         raise ValueError(\n             \"inputs should be a map of {'input_name': input_var}\")\n \n     with executor.scope_guard(self.scope):\n         if self.parallel:\n             results = self.exe.run(\n                                feed=inputs,\n                                fetch_list=[self.predict_var.name],\n                                return_numpy=return_numpy)\n         else:\n             results = self.exe.run(self.inference_program,\n                                feed=inputs,\n                                fetch_list=[self.predict_var],\n                                return_numpy=return_numpy)\n     return results\n \n @contextlib.contextmanager\n def _prog_and_scope_guard(self):\n     with framework.program_guard(main_program=self.inference_program):\n         with executor.scope_guard(self.scope):\n             yield\n </denchmark-code>\n \n `\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "yangperasd", "commentT": "2018-09-01T14:30:58Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/chengduoZH>@chengduoZH</denchmark-link>\n  could help to check about this issue of . Thanks\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "yangperasd", "commentT": "2018-09-03T04:51:24Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/yangperasd>@yangperasd</denchmark-link>\n  thanks for your feedback, this bug has been fixed in 0.15.0.\n \t\t"}}}, "commit": {"commit_id": "ef628ab887c1df5de638504c37016a6924057e2c", "commit_author": "chengduo", "commitT": "2018-09-03 12:07:56+08:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "1.0", "commit_Nprams": "0.5238095238095238"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\paddle\\fluid\\inferencer.py", "file_new_name": "python\\paddle\\fluid\\inferencer.py", "file_complexity": {"file_NLOC": "66", "file_CCN": "5", "file_NToken": "310"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "101,102,103", "deleted_lines": "101,102,103,104", "method_info": {"method_name": "infer", "method_params": "self,inputs,return_numpy", "method_startline": "80", "method_endline": "106", "method_complexity": {"method_NLOC": "9", "method_CCN": "2", "method_NToken": "61", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "python\\paddle\\fluid\\tests\\book\\high-level-api\\image_classification\\test_image_classification_resnet.py", "file_new_name": "python\\paddle\\fluid\\tests\\book\\high-level-api\\image_classification\\test_image_classification_resnet.py", "file_complexity": {"file_NLOC": "128", "file_CCN": "23", "file_NToken": "984"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "150,155", "deleted_lines": "142,150,155", "method_info": {"method_name": "main", "method_params": "use_cuda", "method_startline": "142", "method_endline": "155", "method_complexity": {"method_NLOC": "12", "method_CCN": "3", "method_NToken": "49", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "94,121,122,123,124", "deleted_lines": "92,119", "method_info": {"method_name": "train", "method_params": "use_cuda,train_program,params_dirname", "method_startline": "92", "method_endline": "125", "method_complexity": {"method_NLOC": "19", "method_CCN": "2", "method_NToken": "135", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "150,155,159,160,162,163,164,165,166,167,171,172", "deleted_lines": "150,155,160", "method_info": {"method_name": "main", "method_params": "use_cuda,parallel", "method_startline": "150", "method_endline": "172", "method_complexity": {"method_NLOC": "18", "method_CCN": "5", "method_NToken": "87", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "94,121,122,123,124", "deleted_lines": "119,128", "method_info": {"method_name": "train", "method_params": "use_cuda,train_program,parallel,params_dirname", "method_startline": "94", "method_endline": "130", "method_complexity": {"method_NLOC": "22", "method_CCN": "2", "method_NToken": "141", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "133,136,137,138,139", "deleted_lines": "142", "method_info": {"method_name": "infer", "method_params": "use_cuda,inference_program,parallel,params_dirname", "method_startline": "133", "method_endline": "147", "method_complexity": {"method_NLOC": "10", "method_CCN": "2", "method_NToken": "90", "method_nesting_level": "0"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "133,136,137,138,139", "deleted_lines": "128,131", "method_info": {"method_name": "infer", "method_params": "use_cuda,inference_program,params_dirname", "method_startline": "128", "method_endline": "139", "method_complexity": {"method_NLOC": "7", "method_CCN": "2", "method_NToken": "84", "method_nesting_level": "0"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "python\\paddle\\fluid\\tests\\book\\high-level-api\\image_classification\\test_image_classification_vgg.py", "file_new_name": "python\\paddle\\fluid\\tests\\book\\high-level-api\\image_classification\\test_image_classification_vgg.py", "file_complexity": {"file_NLOC": "106", "file_CCN": "16", "file_NToken": "861"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "127,130", "deleted_lines": "119,120,121,127,132", "method_info": {"method_name": "main", "method_params": "use_cuda", "method_startline": "119", "method_endline": "132", "method_complexity": {"method_NLOC": "12", "method_CCN": "3", "method_NToken": "49", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "127,130,134,135,137,138,139,140,141,145,146", "deleted_lines": "127,132,137", "method_info": {"method_name": "main", "method_params": "use_cuda,parallel", "method_startline": "127", "method_endline": "146", "method_complexity": {"method_NLOC": "16", "method_CCN": "3", "method_NToken": "74", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "73,98,99,100,101", "deleted_lines": "96,105", "method_info": {"method_name": "train", "method_params": "use_cuda,train_program,parallel,params_dirname", "method_startline": "73", "method_endline": "107", "method_complexity": {"method_NLOC": "21", "method_CCN": "2", "method_NToken": "138", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "110,113,114,115,116", "deleted_lines": "119,120,121", "method_info": {"method_name": "infer", "method_params": "use_cuda,inference_program,parallel,params_dirname", "method_startline": "110", "method_endline": "124", "method_complexity": {"method_NLOC": "10", "method_CCN": "2", "method_NToken": "90", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "110,113,114,115,116", "deleted_lines": "105,108", "method_info": {"method_name": "infer", "method_params": "use_cuda,inference_program,params_dirname", "method_startline": "105", "method_endline": "116", "method_complexity": {"method_NLOC": "7", "method_CCN": "2", "method_NToken": "84", "method_nesting_level": "0"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "73,98,99,100,101", "deleted_lines": "71,96", "method_info": {"method_name": "train", "method_params": "use_cuda,train_program,params_dirname", "method_startline": "71", "method_endline": "102", "method_complexity": {"method_NLOC": "18", "method_CCN": "2", "method_NToken": "132", "method_nesting_level": "0"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "python\\paddle\\fluid\\tests\\book\\high-level-api\\recognize_digits\\test_recognize_digits_conv.py", "file_new_name": "python\\paddle\\fluid\\tests\\book\\high-level-api\\recognize_digits\\test_recognize_digits_conv.py", "file_complexity": {"file_NLOC": "110", "file_CCN": "15", "file_NToken": "749"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "129,133,137", "deleted_lines": "126,133,137", "method_info": {"method_name": "main", "method_params": "use_cuda", "method_startline": "126", "method_endline": "137", "method_complexity": {"method_NLOC": "10", "method_CCN": "1", "method_NToken": "36", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "129,133,137,138,139,140,141,142,143,144,148,149", "deleted_lines": "133,137,141,142", "method_info": {"method_name": "main", "method_params": "use_cuda,parallel", "method_startline": "129", "method_endline": "149", "method_complexity": {"method_NLOC": "16", "method_CCN": "3", "method_NToken": "74", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "67,74", "deleted_lines": "67,74", "method_info": {"method_name": "train", "method_params": "use_cuda,train_program,parallel,params_dirname", "method_startline": "67", "method_endline": "108", "method_complexity": {"method_NLOC": "17", "method_CCN": "2", "method_NToken": "106", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "67,74", "deleted_lines": "67,74", "method_info": {"method_name": "train", "method_params": "use_cuda,train_program,params_dirname", "method_startline": "67", "method_endline": "108", "method_complexity": {"method_NLOC": "17", "method_CCN": "2", "method_NToken": "104", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "111,115,116,117,118", "deleted_lines": "111,115,126", "method_info": {"method_name": "infer", "method_params": "use_cuda,inference_program,parallel,params_dirname", "method_startline": "111", "method_endline": "126", "method_complexity": {"method_NLOC": "12", "method_CCN": "2", "method_NToken": "107", "method_nesting_level": "0"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "111,115,116,117,118", "deleted_lines": "111,115", "method_info": {"method_name": "infer", "method_params": "use_cuda,inference_program,params_dirname", "method_startline": "111", "method_endline": "123", "method_complexity": {"method_NLOC": "9", "method_CCN": "2", "method_NToken": "101", "method_nesting_level": "0"}}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "python\\paddle\\fluid\\tests\\book\\high-level-api\\recognize_digits\\test_recognize_digits_mlp.py", "file_new_name": "python\\paddle\\fluid\\tests\\book\\high-level-api\\recognize_digits\\test_recognize_digits_mlp.py", "file_complexity": {"file_NLOC": "92", "file_CCN": "14", "file_NToken": "674"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "93,97,98,99,100", "deleted_lines": "93,104", "method_info": {"method_name": "infer", "method_params": "use_cuda,inference_program,parallel,params_dirname", "method_startline": "93", "method_endline": "108", "method_complexity": {"method_NLOC": "12", "method_CCN": "2", "method_NToken": "107", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "54,58,59,60,61", "deleted_lines": "53,57", "method_info": {"method_name": "train", "method_params": "use_cuda,train_program,params_dirname", "method_startline": "53", "method_endline": "86", "method_complexity": {"method_NLOC": "14", "method_CCN": "2", "method_NToken": "100", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "93,97,98,99,100", "deleted_lines": "89,93", "method_info": {"method_name": "infer", "method_params": "use_cuda,inference_program,params_dirname", "method_startline": "89", "method_endline": "101", "method_complexity": {"method_NLOC": "9", "method_CCN": "2", "method_NToken": "101", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "54,58,59,60,61", "deleted_lines": "57,89", "method_info": {"method_name": "train", "method_params": "use_cuda,train_program,params_dirname,parallel", "method_startline": "54", "method_endline": "90", "method_complexity": {"method_NLOC": "17", "method_CCN": "2", "method_NToken": "106", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "111,115", "deleted_lines": "104,111,115", "method_info": {"method_name": "main", "method_params": "use_cuda", "method_startline": "104", "method_endline": "115", "method_complexity": {"method_NLOC": "10", "method_CCN": "1", "method_NToken": "36", "method_nesting_level": "0"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "111,115,119,120,121,122,123,124,125,126,130,131", "deleted_lines": "111,115,119,120", "method_info": {"method_name": "main", "method_params": "use_cuda,parallel", "method_startline": "111", "method_endline": "131", "method_complexity": {"method_NLOC": "16", "method_CCN": "3", "method_NToken": "74", "method_nesting_level": "0"}}}}}}}}