{"BR": {"BR_id": "4427", "BR_author": "reiyw", "BRopenT": "2020-07-01T06:31:01Z", "BRcloseT": "2020-07-06T14:15:50Z", "BR_text": {"BRsummary": "PretrainedModelInitializer fails to initialize a model with a 0-dim tensor", "BRdescription": "\n <denchmark-h:h2>Checklist</denchmark-h>\n \n \n  I have verified that the issue exists against the master branch of AllenNLP.\n  I have read the relevant section in the contribution guide on reporting bugs.\n  I have checked the issues list for similar or identical bug reports.\n  I have checked the pull requests list for existing proposed fixes.\n  I have checked the CHANGELOG and the commit log to find out if the bug was already fixed in the master branch.\n  I have included in the \"Description\" section below a traceback from any exceptions related to this bug.\n  I have included in the \"Related issues or possible duplicates\" section below all related issues and possible duplicate issues (If there are none, check this box anyway).\n  I have included in the \"Environment\" section below the name of the operating system and Python version that I was using when I discovered this bug.\n  I have included in the \"Environment\" section below the output of pip freeze.\n  I have included in the \"Steps to reproduce\" section below a minimally reproducible example.\n \n <denchmark-h:h2>Description</denchmark-h>\n \n \n Python traceback:\n \n Traceback (most recent call last):\n   File \"test.py\", line 27, in <module>\n     applicator(net)\n   File \"/Users/reiyw/.ghq/ghq/github.com/allenai/allennlp/allennlp/nn/initializers.py\", line 482, in __call__\n     initializer(parameter, parameter_name=name)\n   File \"/Users/reiyw/.ghq/ghq/github.com/allenai/allennlp/allennlp/nn/initializers.py\", line 406, in __call__\n     tensor.data[:] = source_weights[:]\n IndexError: slice() cannot be applied to a 0-dim tensor.\n \n \n \n PretrainedModelInitializer fails to initialize a model with 0-dim tensors. The error occurs at:\n \n \n \n allennlp/allennlp/nn/initializers.py\n \n \n         Lines 405 to 406\n       in\n       637dbb1\n \n \n \n \n \n \n  # Copy the parameters from the source to the destination \n \n \n \n  tensor.data[:] = source_weights[:] \n \n \n \n \n \n The cause is that slicing cannot be applied to a 0-dim tensor. Instead of slicing a tensor here, we can avoid the error by using copy_ method:\n <denchmark-code>tensor.data.copy_(source_weights.data)\n </denchmark-code>\n \n I have confirmed that this change will not break the pretrained model initializer test.\n Another workaround is to use a 1-dim tensor instead of a 0-dim tensor to represent a scalar, but I think it's better to fix it so that others don't face the same problem.\n If that change is appropriate, I would be happy to submit a PR.\n <denchmark-h:h2>Related issues or possible duplicates</denchmark-h>\n \n \n None\n \n <denchmark-h:h2>Environment</denchmark-h>\n \n OS: OS X\n Python version: 3.7.7\n \n Output of pip freeze:\n \n -e git+ssh://git@github.com/allenai/allennlp.git@9c4dfa544e85e00d636beb0026a08e40dcdb6404#egg=allennlp\n apex @ git+https://github.com/NVIDIA/apex.git@44532b30a4fad442f00635a0f4c8f241b06c2315\n appdirs==1.4.4\n attrs==19.3.0\n black==19.10b0\n bleach==3.1.5\n blis==0.4.1\n boto3==1.14.12\n botocore==1.17.12\n catalogue==1.0.0\n certifi==2020.6.20\n chardet==3.0.4\n click==7.1.2\n codecov==2.1.7\n colorama==0.4.3\n coverage==5.1\n cycler==0.10.0\n cymem==2.0.3\n docutils==0.15.2\n filelock==3.0.12\n flake8==3.8.3\n flaky==3.6.1\n future==0.18.2\n h5py==2.10.0\n idna==2.10\n importlib-metadata==1.7.0\n Jinja2==2.11.2\n jmespath==0.10.0\n joblib==0.15.1\n jsonnet==0.16.0\n jsonpickle==1.4.1\n keyring==21.2.1\n kiwisolver==1.2.0\n livereload==2.6.2\n lunr==0.5.8\n Markdown==3.2.2\n markdown-include==0.5.1\n MarkupSafe==1.1.1\n matplotlib==3.2.2\n mccabe==0.6.1\n mkdocs==1.1.2\n mkdocs-material==5.3.3\n mkdocs-material-extensions==1.0\n more-itertools==8.4.0\n murmurhash==1.0.2\n mypy==0.782\n mypy-extensions==0.4.3\n nltk==3.5\n nr.collections==0.0.1\n nr.databind.core==0.0.16\n nr.databind.json==0.0.11\n nr.interface==0.0.3\n nr.metaclass==0.0.5\n nr.parsing.date==0.1.0\n nr.pylang.utils==0.0.3\n nr.stream==0.0.4\n numpy==1.19.0\n overrides==3.1.0\n packaging==20.4\n pathspec==0.8.0\n pathtools==0.1.2\n pkginfo==1.5.0.1\n plac==1.1.3\n pluggy==0.13.1\n preshed==3.0.2\n protobuf==3.12.2\n py==1.9.0\n py-cpuinfo==6.0.0\n pycodestyle==2.6.0\n pyflakes==2.2.0\n Pygments==2.6.1\n pymdown-extensions==7.1\n pyparsing==2.4.7\n pytest==5.4.3\n pytest-benchmark==3.2.3\n pytest-cov==2.10.0\n python-dateutil==2.8.1\n PyYAML==5.3.1\n readme-renderer==26.0\n regex==2020.6.8\n requests==2.24.0\n requests-toolbelt==0.9.1\n responses==0.10.15\n rfc3986==1.4.0\n ruamel.yaml==0.16.10\n ruamel.yaml.clib==0.2.0\n s3transfer==0.3.3\n sacremoses==0.0.43\n scikit-learn==0.23.1\n scipy==1.5.0\n sentencepiece==0.1.91\n six==1.15.0\n spacy==2.3.0\n srsly==1.0.2\n tensorboardX==2.0\n thinc==7.4.1\n threadpoolctl==2.1.0\n tokenizers==0.7.0\n toml==0.10.1\n torch==1.5.1\n tornado==6.0.4\n tqdm==4.47.0\n transformers==2.11.0\n twine==3.2.0\n typed-ast==1.4.1\n typing-extensions==3.7.4.2\n urllib3==1.25.9\n wasabi==0.7.0\n wcwidth==0.2.5\n webencodings==0.5.1\n zipp==3.1.0\n \n \n \n <denchmark-h:h2>Steps to reproduce</denchmark-h>\n \n \n Example source:\n \n import tempfile\n import pathlib\n \n import torch\n \n from allennlp.nn import InitializerApplicator\n from allennlp.nn.initializers import PretrainedModelInitializer\n \n \n class Net(torch.nn.Module):\n     def __init__(self):\n         super().__init__()\n         # 0-dim tensor\n         self.scalar = torch.nn.Parameter(torch.tensor(1.0))\n \n \n net = Net()\n temp_dir = pathlib.Path(tempfile.mkdtemp())\n weights_file = temp_dir / \"weights.th\"\n torch.save(net.state_dict(), weights_file)\n \n initializer = PretrainedModelInitializer(weights_file)\n applicator = InitializerApplicator([(\"scalar\", initializer)])\n applicator(net)\n \n \n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "reiyw", "commentT": "2020-07-01T15:18:49Z", "comment_text": "\n \t\tYep, you're right, this looks like a bug to me, and I agree with your fix of just using copy_.  Can you submit a PR, adding your minimal repro as a test case so we don't have a regression?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "reiyw", "commentT": "2020-07-02T01:26:28Z", "comment_text": "\n \t\tOk, I'll submit a PR within a day or two.\n \t\t"}}}, "commit": {"commit_id": "8229aca3be784ae3af5cd4edec2749124e6b6cba", "commit_author": "Ryo Takahashi", "commitT": "2020-07-06 07:15:49-07:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "CHANGELOG.md", "file_new_name": "CHANGELOG.md", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "23", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "allennlp\\nn\\initializers.py", "file_new_name": "allennlp\\nn\\initializers.py", "file_complexity": {"file_NLOC": "377", "file_CCN": "43", "file_NToken": "1603"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "406", "deleted_lines": "406", "method_info": {"method_name": "__call__", "method_params": "self,Tensor,str,kwargs", "method_startline": "391", "method_endline": "406", "method_complexity": {"method_NLOC": "10", "method_CCN": "3", "method_NToken": "92", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\nn\\pretrained_model_initializer_test.py", "file_new_name": "tests\\nn\\pretrained_model_initializer_test.py", "file_complexity": {"file_NLOC": "121", "file_CCN": "17", "file_NToken": "1170"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "109,110,111,112,113,114", "deleted_lines": null, "method_info": {"method_name": "test_zero_dim_tensor", "method_params": "self", "method_startline": "109", "method_endline": "114", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "40", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "18", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self", "method_startline": "14", "method_endline": "18", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "58", "method_nesting_level": "1"}}}}}}}}