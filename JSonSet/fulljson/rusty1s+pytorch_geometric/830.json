{"BR": {"BR_id": "830", "BR_author": "seyuboglu", "BRopenT": "2019-11-26T23:27:47Z", "BRcloseT": "2020-01-06T19:05:25Z", "BR_text": {"BRsummary": "Failure modes of from_networkx", "BRdescription": "\n <denchmark-h:h2>\u2753 Questions & Help</denchmark-h>\n \n Hi! What kinds of networkx graphs are expected to work with from_networkx. Right now, the documentation just says that it expects a networkx graph, but there are definitely some networkx graphs for which it doesn't work:\n Graphs without contiguous node labels:\n The following cell runs without error. Except the output is a little funky-\n <denchmark-code>from torch_geometric.utils.convert import from_networkx\n import networkx as nx \n \n # build an nx graph \n graph = nx.Graph()\n graph.add_node(4)\n graph.add_node(2)\n graph.add_node(6)\n graph.add_edge(4, 6)\n graph.add_edge(2, 6)\n for node in graph.nodes():\n     graph.nodes[node][\"x\"] = node\n \n # convert to pyg\n data = from_networkx(graph)   \n print(f\"X: {data.x}\")\n print(f\"Edge index: {data.edge_index}\")\n </denchmark-code>\n \n The output is:\n <denchmark-code>X: tensor([4, 2, 6])\n Edge index: tensor([[4, 2, 6, 6],\n         [6, 6, 4, 2]])\n </denchmark-code>\n \n The node indices in the edge_index have no correspondence with the order of the nodes in the feature matrix x. It seems to me like from_networkx is dependent on: (1) node labels of nx.Graph being consecutive numbers (i.e. from 0 to len(graph) - 1) and (2) that graph.nodes() returns these nodes in order. That being said, perhaps I am missing something with how Data is being used in message passing etc. In either case, I think it would be helpful to add a note in the documentation about the kinds of networkx graphs the function will work with.\n Graphs without edges:\n The following crashes with a IndexError: list index out of range\n <denchmark-code>from torch_geometric.utils.convert import from_networkx\n import networkx as nx \n \n graph = nx.Graph()\n graph.add_node(1)\n graph.add_node(2)\n from_networkx(graph)\n </denchmark-code>\n \n Graphs with non-numeric node labels\n Crashes with ValueError: too many dimensions 'str'\n <denchmark-code>from torch_geometric.utils.convert import from_networkx\n import networkx as nx \n \n # build an nx graph \n graph = nx.Graph()\n graph.add_node(\"4\")\n graph.add_node(\"2\")\n graph.add_edge(\"4\", \"2\")\n \n # convert to pyg\n data = from_networkx(graph)\n </denchmark-code>\n \n Thanks!!\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "seyuboglu", "commentT": "2019-11-27T06:38:04Z", "comment_text": "\n \t\tThanks for this issue. It is correct that from_networkx currently expects consecutive numbers as node indices. This should be fixed and I will work on it :)\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "seyuboglu", "commentT": "2020-01-06T19:05:25Z", "comment_text": "\n \t\tFixed in master (<denchmark-link:https://github.com/rusty1s/pytorch_geometric/commit/c0458f0c0fb84c27570d91c6a971e29109649fca>c0458f0</denchmark-link>\n ).\n \t\t"}}}, "commit": {"commit_id": "c0458f0c0fb84c27570d91c6a971e29109649fca", "commit_author": "rusty1s", "commitT": "2020-01-06 20:04:58+01:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "test\\utils\\test_convert.py", "file_new_name": "test\\utils\\test_convert.py", "file_complexity": {"file_NLOC": "112", "file_CCN": "12", "file_NToken": "1325"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "98,99,100,101,102,103,104,105,106,107,108", "deleted_lines": null, "method_info": {"method_name": "test_from_networkx_non_numeric_labels", "method_params": "", "method_startline": "98", "method_endline": "108", "method_complexity": {"method_NLOC": "11", "method_CCN": "2", "method_NToken": "96", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "111,112,113,114,115,116,117", "deleted_lines": null, "method_info": {"method_name": "test_from_networkx_without_edges", "method_params": "", "method_startline": "111", "method_endline": "117", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "50", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "120,121,122,123,124,125,126,127,128,129", "deleted_lines": null, "method_info": {"method_name": "test_subgraph_convert", "method_params": "", "method_startline": "120", "method_endline": "129", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "75", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "84,85,86,87,88,89,90,91,92,93,94,95", "deleted_lines": null, "method_info": {"method_name": "test_from_networkx_non_consecutive", "method_params": "", "method_startline": "84", "method_endline": "95", "method_complexity": {"method_NLOC": "11", "method_CCN": "2", "method_NToken": "100", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "73", "deleted_lines": "73,74,75,76,77,78,79,80,81", "method_info": {"method_name": "test_networkx_vice_versa_convert", "method_params": "", "method_startline": "73", "method_endline": "81", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "64", "method_nesting_level": "0"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "84,85,86,87,88,89,90,91", "deleted_lines": "83", "method_info": {"method_name": "test_vice_versa_convert", "method_params": "", "method_startline": "83", "method_endline": "91", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "64", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "torch_geometric\\utils\\convert.py", "file_new_name": "torch_geometric\\utils\\convert.py", "file_complexity": {"file_NLOC": "112", "file_CCN": "25", "file_NToken": "742"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "89,93,95,97,99,101,104,105,106,107,109", "deleted_lines": "92,93,94,95,97,99,101,103,106,108", "method_info": {"method_name": "from_networkx", "method_params": "G", "method_startline": "81", "method_endline": "113", "method_complexity": {"method_NLOC": "26", "method_CCN": "10", "method_NToken": "230", "method_nesting_level": "0"}}}}}}}}