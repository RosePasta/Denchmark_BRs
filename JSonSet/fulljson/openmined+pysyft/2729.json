{"BR": {"BR_id": "2729", "BR_author": "ninja18", "BRopenT": "2019-11-11T16:04:14Z", "BRcloseT": "2019-12-30T12:36:56Z", "BR_text": {"BRsummary": "Output pointer to pointer of an operation is duplicated twice", "BRdescription": "\n Describe the bug\n When a double pointer is operated with some function/operation the output tensor double pointer is stored twice in the worker containing the double pointer\n To Reproduce\n Steps to reproduce the behavior:\n follow through the tutorial part 03 python notebook\n exact image of reproducing step provided below\n Expected behavior\n The worker who have double pointer must store the output of the operation only once\n Screenshots\n <denchmark-link:https://user-images.githubusercontent.com/19199814/68601735-f0ea1900-04ca-11ea-9b33-7cef52abaea2.png></denchmark-link>\n \n Desktop (please complete the following information):\n \n OS: OSX Mojave\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ninja18", "commentT": "2019-11-13T23:06:38Z", "comment_text": "\n \t\tHi, I think this is due to the object pointer in Alice having to be unwrapped  and then re-wrapped when getting the response.\n However, when re-wrapping, the object is incorrectly registered to make the first copy in Alice (due to the default setting of <denchmark-link:https://github.com/OpenMined/PySyft/blob/1cf824502fc83ef4b8e17135458a14d35753c745/syft/generic/pointers/object_pointer.py#L163>register=True in  wrap()</denchmark-link>\n ):\n <denchmark-code>class ObjectPointer(AbstractObject):\n     ...\n     def wrap(self, register=True, type=None, **kwargs): \n </denchmark-code>\n \n Then, when we actually want to register the response as we normally would when executing the command, the registered response creates a second copy in Alice.\n I'm not super familiar with the code to know if this intended, or actually makes sense (sorry if I've misunderstood something!), but thought it could be helpful.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ninja18", "commentT": "2019-12-17T20:45:32Z", "comment_text": "\n \t\tApproach\n I currently have implemented a fix where I add a parameter to check if a tensor had been unwrapped and is now getting rewrapped in the hook response (rewrap=True which by default will be False to not break code).\n It takes advantage of the <denchmark-link:https://github.com/OpenMined/PySyft/blob/8f7705fbba623827f1edaf5a2a351a973e2e001d/syft/generic/frameworks/hook/hook_args.py#L254>build_rule() in build_wrap_response_from_function()</denchmark-link>\n  to check if the data type is a tensor (and not int, str etc). When it's building a wrap function, it checks if both  on the args passed and , and if so, I set an attribute like  which gets checked in the  function as to whether to register.\n Passes tests but is slow?\n It currently passes 100% of tests BUT seems inefficient given the point of the build rule is to efficiently check if things need to be wrapped whereas this loops over the args.\n \n Alternatively, I thought we could pass  for these tensors in the hook response, but it seems the <denchmark-link:https://github.com/OpenMined/PySyft/blob/master/syft/frameworks/torch/hook/hook_args.py#L39-L46>lambda for TorchTensor defined in backward_func() as</denchmark-link>\n :\n <denchmark-code>backward_func = {\n     TorchTensor: lambda i: i.wrap(), # how to give the lambda arg register=False?\n     torch.Tensor: lambda i: i.wrap(),\n     torch.nn.Parameter: lambda i: torch.nn.Parameter(data=i),\n     AutogradTensor: lambda i: AutogradTensor(data=i).on(i, wrap=False),\n     LoggingTensor: lambda i: LoggingTensor().on(i, wrap=False),\n     PaillierTensor: lambda i: PaillierTensor().on(i, wrap=False),\n }\n </denchmark-code>\n \n \n Here is the code changes:\n <denchmark-link:https://github.com/linamnt/PySyft/commit/97a7a24b3c061c99a73482f6c6c9c3ab4cad3d42>linamnt@97a7a24</denchmark-link>\n \n Do I submit a PR so it can be reviewed formally? or wait til the best approach is figured out?\n \t\t"}}}, "commit": {"commit_id": "580027c42f6c942da80234b59423d21c51e5583a", "commit_author": "Lina Tran", "commitT": "2019-12-30 13:36:56+01:00", "commit_complexity": {"commit_NLOC": "0.6923076923076923", "commit_CCN": "0.6923076923076923", "commit_Nprams": "0.6923076923076923"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "syft\\frameworks\\torch\\hook\\hook_args.py", "file_new_name": "syft\\frameworks\\torch\\hook\\hook_args.py", "file_complexity": {"file_NLOC": "74", "file_CCN": "0", "file_NToken": "408"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "40,41,42,43,44,45", "deleted_lines": "40,41,42,43,44,45"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "syft\\generic\\frameworks\\hook\\hook.py", "file_new_name": "syft\\generic\\frameworks\\hook\\hook.py", "file_complexity": {"file_NLOC": "357", "file_CCN": "107", "file_NToken": "2521"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "481,482,483,484,485,488", "deleted_lines": "483", "method_info": {"method_name": "_get_hooked_method", "method_params": "cls,method_name", "method_startline": "394", "method_endline": "493", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "17", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "481,482,483,484,485,488", "deleted_lines": "483", "method_info": {"method_name": "_get_hooked_method.overloaded_native_method", "method_params": "self,args,kwargs", "method_startline": "409", "method_endline": "491", "method_complexity": {"method_NLOC": "44", "method_CCN": "13", "method_NToken": "342", "method_nesting_level": "2"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "test\\torch\\pointers\\test_pointer_tensor.py", "file_new_name": "test\\torch\\pointers\\test_pointer_tensor.py", "file_complexity": {"file_NLOC": "248", "file_CCN": "26", "file_NToken": "2422"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "466,467,468,469,470,471,472,473,474,475,476,477,478,479", "deleted_lines": null, "method_info": {"method_name": "test_registration_of_operation_on_pointer_of_pointer", "method_params": "workers", "method_startline": "466", "method_endline": "479", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "75", "method_nesting_level": "0"}}}}}}}}