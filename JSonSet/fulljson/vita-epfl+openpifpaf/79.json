{"BR": {"BR_id": "79", "BR_author": "innjoshka", "BRopenT": "2019-06-13T13:18:07Z", "BRcloseT": "2019-06-13T22:23:36Z", "BR_text": {"BRsummary": "Predict module saves bboxes into json WITHOUT filtering zero values", "BRdescription": "\n Predict module saves bboxes into json not in correct way. Bboxes computed from keypoints are computed with zeros, so almost all saved results into json has zero numbers!. However, show module filters zero points and works fine. I have changed function to work correctly and consider filtering zero kps.\n With filtering zero keypoints\n <denchmark-code>[            if 'json' in args.output_types:\n                 with open(output_path + '.pifpaf.json', 'w') as f:\n                     json.dump([\n                         {'keypoints': np.around(kps, 1).reshape(-1).tolist(),\n                          'bbox': [np.min(kps[:, 0][kps[:, 2] > 0]), np.min(kps[:, 1][kps[:, 2] > 0]),\n                                   np.max(kps[:, 0][kps[:, 2] > 0]), np.max(kps[:, 1][kps[:, 2] > 0])]}\n                         for kps in keypoint_sets\n ], f)\n </denchmark-code>\n \n Without filtering zero keypoints\n <denchmark-code>            if 'json' in args.output_types:\n                 with open(output_path + '.pifpaf.json', 'w') as f:\n                     json.dump([\n                         {'keypoints': np.around(kps, 1).reshape(-1).tolist(),\n                          'bbox': [np.min(kps[:, 0]), np.min(kps[:, 1]),\n                                   np.max(kps[:, 0]), np.max(kps[:, 1])]}\n                         for kps in keypoint_sets\n ], f)\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "innjoshka", "commentT": "2019-06-13T22:12:29Z", "comment_text": "\n \t\tThanks for reporting this!\n I have opened a Pull Request with a fix. Note that the fix produces a different result because I am following now the COCO convention like the rest of the code where a bounding box is given by [x, y, w, h] instead of the corners of the box. Please let me know if you have any comments.\n \t\t"}}}, "commit": {"commit_id": "22ba6d6f732a41e67dd7a931452656917ee54124", "commit_author": "Sven Kreiss", "commitT": "2019-06-13 15:23:02-07:00", "commit_complexity": {"commit_NLOC": "0.875", "commit_CCN": "0.875", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "openpifpaf\\predict.py", "file_new_name": "openpifpaf\\predict.py", "file_complexity": {"file_NLOC": "130", "file_CCN": "18", "file_NToken": "1017"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "76,77,78,79,80,81,82,83", "deleted_lines": null, "method_info": {"method_name": "bbox_from_keypoints", "method_params": "kps", "method_startline": "76", "method_endline": "83", "method_complexity": {"method_NLOC": "7", "method_CCN": "2", "method_NToken": "114", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "138,139,140,141", "deleted_lines": "128,129,130", "method_info": {"method_name": "main", "method_params": "", "method_startline": "86", "method_endline": "159", "method_complexity": {"method_NLOC": "59", "method_CCN": "9", "method_NToken": "464", "method_nesting_level": "0"}}}}}}}}