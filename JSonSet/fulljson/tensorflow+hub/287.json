{"BR": {"BR_id": "287", "BR_author": "arnoegw", "BRopenT": "2019-05-03T15:54:11Z", "BRcloseT": "2019-05-10T11:38:36Z", "BR_text": {"BRsummary": "hub.KerasLayer crashes Model.save() in h5 format", "BRdescription": "\n I'm consolidating various issues listed below to what I believe to be their common cause.\n Problem:\n In TF2 alpha, adding a hub.KerasLayer crashes Model.save() in h5 format with message \"Unable to create link\" from h5py. Hub authors need to follow up on ironing out that workflow.\n How to repro (thanks <denchmark-link:https://github.com/frogermcs>@frogermcs</denchmark-link>\n ):\n \n Open https://colab.research.google.com/github/tensorflow/hub/blob/master/examples/colab/tf2_image_retraining.ipynb\n Do one of\n \n !pip install -U --pre tensorflow-gpu for 2.0.0-alpha0\n !pip install -U --pre tf-nightly-gpu-2.0-preview for 2.0.0.dev20190503\n \n \n !pip install tensorflow-hub for 0.4.0\n At the very end, append a code block with the single line\n model.save('path_to_my_model.h5')\n Go \"Runtime > Restart and run all\"\n \n For me (and the other reporters), that crashes with\n <denchmark-code>/usr/local/lib/python3.6/dist-packages/h5py/_hl/group.py in __setitem__(self, name, obj)\n     286             if isinstance(obj, HLObject):\n --> 287                 h5o.link(obj.id, self.id, name, lcpl=lcpl, lapl=self._lapl)\n \n h5py/_objects.pyx in h5py._objects.with_phil.wrapper()\n h5py/_objects.pyx in h5py._objects.with_phil.wrapper()\n h5py/h5o.pyx in h5py.h5o.link()\n RuntimeError: Unable to create link (name already exists)\n </denchmark-code>\n \n Issues that are likely subsumed by this:\n tensorflow/hub <denchmark-link:https://github.com/tensorflow/hub/issues/255>#255</denchmark-link>\n \n <denchmark-link:https://github.com/tensorflow/tensorflow/issues/26835>tensorflow/tensorflow#26835</denchmark-link>\n \n <denchmark-link:https://github.com/tensorflow/tensorflow/issues/27688>tensorflow/tensorflow#27688</denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "arnoegw", "commentT": "2019-05-03T15:57:17Z", "comment_text": "\n \t\tNote workaround in\n <denchmark-link:https://github.com/tensorflow/tensorflow/issues/26835#issuecomment-485534826>tensorflow/tensorflow#26835 (comment)</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "arnoegw", "commentT": "2019-05-10T10:09:09Z", "comment_text": "\n \t\tThis appears to be caused by missing explicit variable names in the image modules tfhub.dev/google/tf2-preview/*/2. I'll see if re-exporting at head (i.e., past commit <denchmark-link:https://github.com/tensorflow/tensorflow/commit/e479cf6a28a8f0706328c796365c7a82a63c7b4e>tensorflow/tensorflow@e479cf6</denchmark-link>\n ) helps.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "arnoegw", "commentT": "2019-05-10T11:31:04Z", "comment_text": "\n \t\tI've just published\n <denchmark-link:https://tfhub.dev/google/tf2-preview/inception_v3/feature_vector/3>https://tfhub.dev/google/tf2-preview/inception_v3/feature_vector/3</denchmark-link>\n \n <denchmark-link:https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/3>https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/3</denchmark-link>\n \n and updated <denchmark-link:https://colab.research.google.com/github/tensorflow/hub/blob/master/examples/colab/tf2_image_retraining.ipynb>tf2_image_retraining.ipynb</denchmark-link>\n  with a reference to them.\n For me, that fixes the workflow from the initial comment (meaning, model.save('...h5') succeeds).\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "arnoegw", "commentT": "2019-05-13T03:06:19Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/arnoegw>@arnoegw</denchmark-link>\n  just ran the notebook and it is giving the following error when compiling:\n `Building model with <denchmark-link:https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/3>https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/3</denchmark-link>\n \n NotEncodableErrorTraceback (most recent call last)\n  in ()\n 2 model = tf.keras.Sequential([\n 3     hub.KerasLayer(MODULE_HANDLE, output_shape=[FV_SIZE],\n ----> 4                    trainable=do_fine_tuning),\n 5     tf.keras.layers.Dropout(rate=0.2),\n 6     tf.keras.layers.Dense(train_generator.num_classes, activation='softmax',\n 11 frames\n /usr/local/lib/python2.7/dist-packages/tensorflow_hub/keras_layer.pyc in init(self, handle, trainable, arguments, **kwargs)\n 96       self._func = handle\n 97     else:\n ---> 98       self._func = module_v2.load(handle)\n 99       if not callable(self._func):\n 100         raise ValueError(\"Non-callable result from hub.load('%s')\" %\n /usr/local/lib/python2.7/dist-packages/tensorflow_hub/module_v2.pyc in load(handle)\n 78                                 \"format. Loading of the module using \"\n 79                                 \"hub.load() is not supported.\" % handle)\n ---> 80     return tf_v1.saved_model.load_v2(module_handle)\n 81   else:\n 82     raise NotImplementedError(\"hub.load() is not implemented for TF < 1.14.x, \"\n /usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/load.pyc in load(export_dir, tags)\n 322       loader = _Loader(object_graph_proto,\n 323                        saved_model_proto,\n --> 324                        export_dir)\n 325       root = loader.get(0)\n 326   else:\n /usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/load.pyc in init(self, object_graph_proto, saved_model_proto, export_dir)\n 55         function_deserialization.load_function_def_library(\n 56             meta_graph.graph_def.library))\n ---> 57     self._load_all()\n 58     # TODO(b/124045874): There are limitations with functions whose captures\n 59     # trigger other functions to be executed. For now it is only guaranteed to\n /usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/load.pyc in _load_all(self)\n 130     node_setters = []\n 131     for proto in self._proto.nodes:\n --> 132       node, setter = self._recreate(proto)\n 133       self._nodes.append(node)\n 134       node_setters.append(setter)\n /usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/load.pyc in _recreate(self, proto)\n 193     if kind not in factory:\n 194       raise ValueError(\"Unknown SavedObject type: %r\" % kind)\n --> 195     return factory<denchmark-link:>kind</denchmark-link>\n \n 196\n 197   def _recreate_user_object(self, proto):\n /usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/load.pyc in ()\n 182         \"user_object\": lambda: self._recreate_user_object(proto.user_object),\n 183         \"asset\": lambda: self._recreate_asset(proto.asset),\n --> 184         \"function\": lambda: self._recreate_function(proto.function),\n 185         \"bare_concrete_function\": functools.partial(\n 186             self._recreate_bare_concrete_function,\n /usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/load.pyc in _recreate_function(self, proto)\n 217   def _recreate_function(self, proto):\n 218     return function_deserialization.recreate_function(\n --> 219         proto, self._concrete_functions), setattr\n 220\n 221   def _recreate_bare_concrete_function(self, proto):\n /usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/function_deserialization.pyc in recreate_function(saved_function, concrete_functions)\n 184   coder = nested_structure_coder.StructureCoder()\n 185   function_spec = _deserialize_function_spec(saved_function.function_spec,\n --> 186                                              coder)\n 187\n 188   def restored_function_body(*args, **kwargs):\n /usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/function_deserialization.pyc in _deserialize_function_spec(function_spec_proto, coder)\n 118       annotations=typeless_fullargspec.annotations)\n 119   is_method = function_spec_proto.is_method\n --> 120   args_to_prepend = coder.decode_proto(function_spec_proto.args_to_prepend)\n 121   kwargs_to_include = coder.decode_proto(function_spec_proto.kwargs_to_include)\n 122   input_signature = coder.decode_proto(function_spec_proto.input_signature)\n /usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/nested_structure_coder.pyc in decode_proto(self, proto)\n 112       NotEncodableError: For values for which there are no encoders.\n 113     \"\"\"\n --> 114     return self._map_structure(proto, self._get_decoders())\n 115\n 116\n /usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/nested_structure_coder.pyc in _map_structure(self, pyobj, coders)\n 69         return do(pyobj, recursion_fn)\n 70     raise NotEncodableError(\n ---> 71         \"No encoder for object [%s] of type [%s].\" % (str(pyobj), type(pyobj)))\n 72\n 73   def encode_structure(self, nested_structure):\n NotEncodableError: No encoder for object [] of type [<class 'tensorflow.core.protobuf.struct_pb2.StructuredValue'>].`\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "arnoegw", "commentT": "2019-05-13T08:39:34Z", "comment_text": "\n \t\tLet's continue in the separate issue <denchmark-link:https://github.com/tensorflow/hub/issues/297>#297</denchmark-link>\n  that you filed.\n \t\t"}}}, "commit": {"commit_id": "820b5a99fa811fc353014d1c91d1129701fc45d1", "commit_author": "TensorFlow Hub Authors", "commitT": "2019-05-10 13:27:51+02:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "examples\\colab\\tf2_image_retraining.ipynb", "file_new_name": "examples\\colab\\tf2_image_retraining.ipynb", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "161,361,362", "deleted_lines": "161,361,362"}}}}}}