{"BR": {"BR_id": "659", "BR_author": "DmitryUlyanov", "BRopenT": "2016-03-26T06:42:19Z", "BRcloseT": "2016-10-20T21:52:30Z", "BR_text": {"BRsummary": "Torch + LMDB, not enough memory", "BRdescription": "\n Hello, I am trying to use lmdb dataset that I created with DIGITS and torch defined model. The dataset has around 300k objects. The loading is interrupted by the error:\n <denchmark-code>2016-03-26 09:30:27 [INFO ] creating data readers\n 2016-03-26 09:30:27 [INFO ] opening LMDB database: /place/home/dmitry/git/DIGITS/digits/jobs/20160325-003220-9caf/train_db\n 2016-03-26 09:30:27 [INFO ] opening LMDB database: /place/home/dmitry/git/DIGITS/digits/jobs/20160325-003220-9caf/train_db\n 2016-03-26 09:30:27 [INFO ] opening LMDB database: /place/home/dmitry/git/DIGITS/digits/jobs/20160325-003220-9caf/train_db\n 2016-03-26 09:30:27 [INFO ] opening LMDB database: /place/home/dmitry/git/DIGITS/digits/jobs/20160325-003220-9caf/train_db\n 2016-03-26 09:32:08 [FAIL] /home/dmitry/torch/install/share/lua/5.1/threads/threads.lua:264:\n [thread 4 callback] /place/home/dmitry/git/DIGITS/tools/torch/data.lua:326: not enough memory\n </denchmark-code>\n \n I have tried to install different versions of LMDB lib, but it does not help. Thank you in advance.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "DmitryUlyanov", "commentT": "2016-03-27T15:59:16Z", "comment_text": "\n \t\tThanks for the report <denchmark-link:https://github.com/DmitryUlyanov>@DmitryUlyanov</denchmark-link>\n . And sorry to hear that you met this issue! I will try and reduce the memory footprint of DIGITS's data loader for Torch. In the meantime you might want to check whether reducing the number of loader threads helps with the memory issue. The default is 4 threads and this is coming from this <denchmark-link:https://github.com/NVIDIA/DIGITS/blob/master/tools/torch/main.lua#L221>line</denchmark-link>\n  (for the training set) and this <denchmark-link:https://github.com/NVIDIA/DIGITS/blob/master/tools/torch/main.lua#L235>line</denchmark-link>\n  (for the validation set).\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "DmitryUlyanov", "commentT": "2016-03-31T18:21:33Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/DmitryUlyanov>@DmitryUlyanov</denchmark-link>\n  I notice that right after opening LMDB files, each thread allocates large amounts of memory in order to store keys to all entries. This takes in the order of 500MB worth of memory per thread per million keys. Did it help to reduce the number of threads? How much spare memory do you have on your system?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "DmitryUlyanov", "commentT": "2016-03-31T22:43:16Z", "comment_text": "\n \t\tHello, thank you for the investigation. I did not have time to try to reduce the number of workers yet. I have 12GB GPU, AlexNet with 128 batch, which I assume needs ~4 GB. The server has 256GB RAM, so problem is not there probably.\n I tried to run MNIST example and it worked good for me. I will try reduce the number of workers in a while and report. Thanks!\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "DmitryUlyanov", "commentT": "2016-04-15T19:46:45Z", "comment_text": "\n \t\tJust to bump this up, i added a variable to <denchmark-link:https://github.com/NVIDIA/DIGITS/blob/master/tools/torch/main.lua#L221>https://github.com/NVIDIA/DIGITS/blob/master/tools/torch/main.lua#L221</denchmark-link>\n  and <denchmark-link:https://github.com/NVIDIA/DIGITS/blob/master/tools/torch/main.lua#L235>https://github.com/NVIDIA/DIGITS/blob/master/tools/torch/main.lua#L235</denchmark-link>\n  so that the amount of used threads are now  instead of 4. I am running this with a Titan X; and it is using  for ImageNet, 1.3 million images of 256x256. LMDB size 140Gb. It seems to be working finally. <denchmark-link:https://github.com/gheinrich>@gheinrich</denchmark-link>\n  how did you come up with the number of 500MB per thread per million keys? If i have  of memory on my Titan, that does not compute. Thanks mate, and thanks for the thread-tip!\n Update: After waiting an hour, it doesnt want to train at all. GPU utilizaiton jumps up ever half a minute from a silent 0% to 50%+ for a split second and then back.\n |   3  GeForce GTX TIT...  Off  | 0000:04:00.0     Off |                  N/A |\n | 26%   65C    P2    85W / 250W |   5170MiB / 12287MiB |            Default |\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "DmitryUlyanov", "commentT": "2016-04-15T20:45:13Z", "comment_text": "\n \t\tHi Tim, I was referring to CPU memory footprint for storing LMDB keys. The GPU memory is mostly a function of batch size and the number of parameters in your model and this doesn't depend on the number of data loader threads.\n Today I have resumed working on this issue. I am trying to enable data loading from LMDB without storing keys at all, which would improve CPU memory consumption a lot. But I have troubles doing it in a multi-threaded environment. I'll keep you posted! Thanks for your patience!\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "DmitryUlyanov", "commentT": "2016-04-15T20:47:57Z", "comment_text": "\n \t\tBut as <denchmark-link:https://github.com/DmitryUlyanov>@DmitryUlyanov</denchmark-link>\n  noted with only 300k images and 256Gb CPU RAM and I have found out (by making it work with 1 thread), it does not seem to be related to the CPU's RAM.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "DmitryUlyanov", "commentT": "2016-04-15T21:02:20Z", "comment_text": "\n \t\tThe memory error fires before we load the model into GPU. There might be restrictions in place on <denchmark-link:https://github.com/DmitryUlyanov>@DmitryUlyanov</denchmark-link>\n  's system that limit the maximum amount of memory that a single process is able to use so the error might fire well before we hit the hard 256GB limit. By all means, if you find anything please let us know. Thanks in advance!\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "DmitryUlyanov", "commentT": "2016-04-16T20:48:53Z", "comment_text": "\n \t\tIt turns out that Luajit limits heap memory to 2GB. So I am proposing a change to move LMDB keys from a Lua table to a tds.Vec (where items are allocated off the C heap and don't suffer from the Luajit 2GB heap limit).\n I was able to train 1 epoch of Alexnet on 10 million 256x256 RGB images. It took 4h47m on a Titan X and GPU utilization was consistently over 95%.\n <denchmark-link:https://github.com/DmitryUlyanov>@DmitryUlyanov</denchmark-link>\n  <denchmark-link:https://github.com/TimZaman>@TimZaman</denchmark-link>\n  can you try PR <denchmark-link:https://github.com/NVIDIA/DIGITS/pull/686>#686</denchmark-link>\n ?\n A further improvement would be to share LMDB keys between threads but I'd like to see if <denchmark-link:https://github.com/NVIDIA/DIGITS/pull/686>#686</denchmark-link>\n  is working for you first. Thanks!\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "DmitryUlyanov", "commentT": "2016-04-16T23:47:16Z", "comment_text": "\n \t\t1M images, 256x256, batch size 256, vanilla AlexNet, Titan X, 4 loader threads. and your pull request: now works. On Caffe it took around an hour per epoch. This seems to be taking 2 hours per epoch. But I have a  1200% luajit CPU usage now. GPU utilisation is still swinging a lot between 0 and 100 (that could be the 8tb hdd i am using).\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "DmitryUlyanov", "commentT": "2016-04-17T08:43:41Z", "comment_text": "\n \t\tThank you very much for testing this Tim! Does the code look sensible to you? I wouldn't mind another pair of eyes to review this!\n I've created <denchmark-link:https://github.com/NVIDIA/DIGITS/issues/687>#687</denchmark-link>\n  to see if we can tackle the perf issue.\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "DmitryUlyanov", "commentT": "2016-10-20T21:52:30Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/gheinrich>@gheinrich</denchmark-link>\n :  I'm experiencing this exact error () during model training with torch.  I see you've closed this issue, but I'm still not sure what I can do to address the problem.  My dataset is a large lmdb set created by DIGITS.\n I tried setting OMP_NUM_THREADS=1 and even setting batch_size=1.  The memory limits on the GPU and CPU do not grow very large, according to DIGITS.\n Will you please point me in the right direction here?  I can provide additional information, if needed.\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "DmitryUlyanov", "commentT": "2016-10-20T22:04:34Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/michaelholm-ce>@michaelholm-ce</denchmark-link>\n  do you have  installed as a lua package?\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "DmitryUlyanov", "commentT": "2016-10-20T22:10:47Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/TimZaman>@TimZaman</denchmark-link>\n :  I did not, but now do, and am trying it.  Thank you.\n \t\t"}}}, "commit": {"commit_id": "bc647b48b2ec356eb49dd3e73693b27542d950bb", "commit_author": "Greg Heinrich", "commitT": "2016-04-16 22:52:10+02:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "docs\\BuildTorch.md", "file_new_name": "docs\\BuildTorch.md", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "66", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "scripts\\travis\\install-torch.sh", "file_new_name": "scripts\\travis\\install-torch.sh", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "24", "deleted_lines": null}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tools\\torch\\data.lua", "file_new_name": "tools\\torch\\data.lua", "file_complexity": {"file_NLOC": "472", "file_CCN": "91", "file_NToken": "3172"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "325", "deleted_lines": null, "method_info": {"method_name": "DBSource", "method_params": "", "method_startline": "324", "method_endline": "334", "method_complexity": {"method_NLOC": "11", "method_CCN": "2", "method_NToken": "61", "method_nesting_level": "0"}}}}}}}}