{"BR": {"BR_id": "11131", "BR_author": "fbergama", "BRopenT": "2018-03-21T11:56:59Z", "BRcloseT": "2019-06-05T18:26:12Z", "BR_text": {"BRsummary": "cv::stereoRectify  gives different results between version 3.4.0 and 3.4.1", "BRdescription": "\n <denchmark-h:h5>System information (version)</denchmark-h>\n \n \n OpenCV => 3.4.1  and 3.4.0\n Operating System / Platform => Linux Ubuntu artful 64 Bit\n Compiler => GCC 7.2.0\n \n <denchmark-h:h5>Detailed description</denchmark-h>\n \n cv::stereoRectify in the latest 3.4.1 version of OpenCV is giving wrong results when alpha=1.0. In particular, many values are negated and the output ROIs are wrongly set to zero.\n <denchmark-h:h5>Steps to reproduce</denchmark-h>\n \n #include <iostream>\n #include <opencv2/core/core.hpp>\n #include <opencv2/calib3d/calib3d.hpp>\n \n \n int main( int argc, char* argv[] )\n {\n    cv::Mat K0 = (cv::Mat_<double>(3,3) << 1457.572438721727, 0, 1212.945694211622, 0, 1457.522226502963, 1007.32058848921, 0, 0, 1);\n    cv::Mat kk0 =  cv::Mat_<double>::zeros(1,5);\n    cv::Mat K1 = (cv::Mat_<double>(3,3) << 1460.868570835972, 0, 1215.024068023046, 0, 1460.791367088, 1011.107202932225, 0, 0, 1);\n    cv::Mat kk1 =  cv::Mat_<double>::zeros(1,5);\n \n    cv::Mat R = (cv::Mat_<double>(3,3) << 0.9985404059825475, 0.02963547172078553, -0.04515303352041626, -0.03103795276460111, 0.9990471552537432, -0.03068268351343364, 0.04420071389006859, 0.03203935697372317, 0.9985087763742083 );\n \n    cv::Mat T = (cv::Mat_<double>(3,1) << 0.9995500167379527, 0.0116311595111068, 0.02764923448462666 );\n \n    cv::Size imgsize( 2456, 2058 );\n \n    cv::Mat R1;\n    cv::Mat R2;\n    cv::Mat P1;\n    cv::Mat P2;\n    cv::Mat Q;\n \n    cv::Rect RL;\n    cv::Rect RR;\n \n    cv::stereoRectify( K0, kk0, K1, kk1, imgsize, R, T, R1, R2, P1, P2, Q, 0, 1.0, imgsize,  &RL, &RR );\n \n    std::cout << \"Results with OpenCV \" << CV_VERSION_MAJOR << \".\" << CV_VERSION_MINOR << \".\" << CV_VERSION_REVISION << std::endl;\n    std::cout << \"R1 = \" << R1 << std::endl;\n    std::cout << \"R2 = \" << R1 << std::endl;\n    std::cout << \"P1 = \" << R1 << std::endl;\n    std::cout << \"P2 = \" << R1 << std::endl;\n    std::cout << \" Q = \" << Q << std::endl;\n    std::cout << \"RL = \" << RL << std::endl;\n    std::cout << \"RR = \" << RR << std::endl;\n \n    return 0;\n }\n \n Here is the (correct) output if the above snippet is compiled against 3.4.0:\n <denchmark-code>Results with OpenCV 3.4.0\n R1 = [0.9989521880366085, 0.04212807677012295, -0.01788158730434815;\n -0.04239762600809163, 0.9989886214454816, -0.01497249248903642;\n 0.01723273993740956, 0.01571494098324542, 0.9997279996599788]\n R2 = [0.9989521880366085, 0.04212807677012295, -0.01788158730434815;\n -0.04239762600809163, 0.9989886214454816, -0.01497249248903642;\n 0.01723273993740956, 0.01571494098324542, 0.9997279996599788]\n P1 = [0.9989521880366085, 0.04212807677012295, -0.01788158730434815;\n -0.04239762600809163, 0.9989886214454816, -0.01497249248903642;\n 0.01723273993740956, 0.01571494098324542, 0.9997279996599788]\n P2 = [0.9989521880366085, 0.04212807677012295, -0.01788158730434815;\n -0.04239762600809163, 0.9989886214454816, -0.01497249248903642;\n 0.01723273993740956, 0.01571494098324542, 0.9997279996599788]\n Q = [1, 0, 0, -1256.409484863281;\n 0, 1, 0, -1009.329612731934;\n 0, 0, 0, 1365.958853945157;\n 0, 0, -1, 110.4263305664062]\n RL = [2217 x 1830 from (135, 71)]\n RR = [2275 x 1883 from (73, 128)]\n </denchmark-code>\n \n And the (wrong) output with 3.4.1:\n <denchmark-code>Results with OpenCV 3.4.1\n R1 = [-0.9989521880366083, -0.04212807677012573, 0.01788158730434768;\n 0.04239645983065649, -0.9989896825345417, 0.01490484429181281;\n 0.01723560879981172, 0.01564734281550852, 0.9997290105084047]\n R2 = [-0.9989521880366083, -0.04212807677012573, 0.01788158730434768;\n 0.04239645983065649, -0.9989896825345417, 0.01490484429181281;\n 0.01723560879981172, 0.01564734281550852, 0.9997290105084047]\n P1 = [-0.9989521880366083, -0.04212807677012573, 0.01788158730434768;\n 0.04239645983065649, -0.9989896825345417, 0.01490484429181281;\n 0.01723560879981172, 0.01564734281550852, 0.9997290105084047]\n P2 = [-0.9989521880366083, -0.04212807677012573, 0.01788158730434768;\n 0.04239645983065649, -0.9989896825345417, 0.01490484429181281;\n 0.01723560879981172, 0.01564734281550852, 0.9997290105084047]\n Q = [1, 0, 0, -1199.557830810547;\n 0, 1, 0, -1048.840476989746;\n 0, 0, 0, 1365.921907767475;\n 0, 0, 0.9999999999999998, 110.5510559082031]\n RL = [0 x 0 from (0, 0)]\n RR = [0 x 0 from (0, 0)]\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "fbergama", "commentT": "2018-03-25T06:33:22Z", "comment_text": "\n \t\tI think this is related issue: <denchmark-link:http://answers.opencv.org/question/187581/stereorectify-doesnt-work-sometimes/>http://answers.opencv.org/question/187581/stereorectify-doesnt-work-sometimes/</denchmark-link>\n  Please comment if possible.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "fbergama", "commentT": "2018-03-25T08:23:37Z", "comment_text": "\n \t\tCheck this issue <denchmark-link:https://github.com/opencv/opencv/issues/10791>#10791</denchmark-link>\n  and try the latest code from master branch.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "fbergama", "commentT": "2018-03-25T10:59:46Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/alalek>@alalek</denchmark-link>\n   I have built my sample code, described in the link above, with OpenCV 3.4.1 (released this 26 days ago), I still get most of the stereopairs broken.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "fbergama", "commentT": "2018-03-25T15:32:58Z", "comment_text": "\n \t\tAlso checked with latest repository build of opencv -- same result.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "fbergama", "commentT": "2018-03-26T08:57:25Z", "comment_text": "\n \t\tJust tried with the latest repository build of master branch. Same problem.\n Don't know if it might be useful, but the error occurs only if alpha is different than 0.\n Also, it is probably related to <denchmark-link:https://github.com/opencv/opencv/issues/10791>#10791</denchmark-link>\n  but in my case the camera  has no distortion.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "fbergama", "commentT": "2018-03-30T20:51:38Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/fbergama>@fbergama</denchmark-link>\n  any idea where to take working code?\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "fbergama", "commentT": "2018-03-30T21:08:28Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/stiv-yakovenko>@stiv-yakovenko</denchmark-link>\n  Sorry, what do you mean?\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "fbergama", "commentT": "2018-03-30T22:28:50Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/fbergama>@fbergama</denchmark-link>\n   do you know any workaround for this rectification bug?\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "fbergama", "commentT": "2018-03-30T22:58:22Z", "comment_text": "\n \t\tHaven\u2019t had time to investigate. For now I\u2019ve just downgraded to 3.4.0\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "fbergama", "commentT": "2018-03-31T00:03:34Z", "comment_text": "\n \t\tSo strange, I observe same problems on both 3.4.0 and 3.4.1\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "fbergama", "commentT": "2018-03-31T09:40:29Z", "comment_text": "\n \t\tI guess it\u2019s due to the rational distortion model. In my case images are not distorted\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "fbergama", "commentT": "2018-03-31T10:01:19Z", "comment_text": "\n \t\tWhat do you mean by rational distortion?\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "fbergama", "commentT": "2018-03-31T11:32:30Z", "comment_text": "\n \t\tI mean the rational model implemented in OpenCV when calibrated with the flag CALIB_RATIONAL_MODEL.\n For details see:\n <denchmark-link:https://www.robots.ox.ac.uk/~vgg/publications/2005/Claus05a/claus05a.pdf>https://www.robots.ox.ac.uk/~vgg/publications/2005/Claus05a/claus05a.pdf</denchmark-link>\n \n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "fbergama", "commentT": "2018-04-02T18:29:03Z", "comment_text": "\n \t\tI've solved my problem by using stereoRectifyUndistorted instead of stereoRectify. I've created 100 random points, projected them to both images from stereopair and calculated F and also rectifying homographies. All stereo pairs look perfect with this approach. So stereoRectify definitely has a bug...\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "fbergama", "commentT": "2018-07-16T01:59:26Z", "comment_text": "\n \t\tI can't find stereoRectifyUndistorted function..did you mean stereoRectifyUncalibrated ?\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "fbergama", "commentT": "2018-10-03T13:09:11Z", "comment_text": "\n \t\tI had many similar problems with stereoRectify (negativ fx, fy in P1 and P2, zero ROI's, incorrect field of view for various alphas) in opencv-python-3.4.0.12 and it all seems to be fixed after upgrading opencv-python-3.4.3.18.\n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "fbergama", "commentT": "2018-12-29T08:08:26Z", "comment_text": "\n \t\tI am now facing this problem in 4.0.0, how to fix it?\n \t\t"}, "comments_17": {"comment_id": 18, "comment_author": "fbergama", "commentT": "2018-12-29T10:44:45Z", "comment_text": "\n \t\tproblem solved, I re-implement the C version opencv source code\n \t\t"}, "comments_18": {"comment_id": 19, "comment_author": "fbergama", "commentT": "2019-03-22T08:20:26Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/zhu-ty>@zhu-ty</denchmark-link>\n  Same problem in 4.1.0. Could you give me some advice on fixing it? Thanks.\n \t\t"}, "comments_19": {"comment_id": 20, "comment_author": "fbergama", "commentT": "2019-03-22T08:26:58Z", "comment_text": "\n \t\t\n @zhu-ty Same problem in 4.1.0. Could you give me some advice on fixing it? Thanks.\n \n Hi, I just copy the 3.4.0 source code to use the old version ...\n check here:\n <denchmark-link:https://github.com/zhu-ty/StereoDepth/blob/master/Cpp/ImageRectify/StereoRectify.cpp>StereoRectify.cpp</denchmark-link>\n \n \t\t"}, "comments_20": {"comment_id": 21, "comment_author": "fbergama", "commentT": "2019-08-20T00:39:26Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/zhu-ty>@zhu-ty</denchmark-link>\n  and <denchmark-link:https://github.com/Li-Shang>@Li-Shang</denchmark-link>\n   I'm using opencv4.1.0 right now and encountering the same question when I applying a monochrome image into the function.\n \t\t"}, "comments_21": {"comment_id": 22, "comment_author": "fbergama", "commentT": "2019-09-01T08:49:51Z", "comment_text": "\n \t\tWith the same camera intrinsic matrix and distortion variables, stereoRectify() in 3.4.4 and 3.4.7 gives different results, and none of them appears to be correct:\n In Opencv 3.4.4\n R1:[0.999896853671721, 0.002053753407717491, -0.01421492575897811;\n -0.001998376861133589, 0.999990363955317, 0.003908770450311316;\n 0.01422281643395065, -0.003879960496271806, 0.9998913227942493]\n R2:[0.9999779479868923, 0.00254726430537831, -0.006133105614847437;\n -0.002571273117301952, 0.9999890504487179, -0.003909928033559669;\n 0.006123078839976506, 0.003925611701368454, 0.999973548389301]\n P1:[908.2936897395464, 0, 326.1423835754395, 0;\n 0, 908.2936897395464, 249.1884441375732, 0;\n 0, 0, 1, 0]\n P2:[908.2936897395464, 0, 326.1423835754395, -54484.83516184997;\n 0, 908.2936897395464, 249.1884441375732, 0;\n 0, 0, 1, 0]\n Q:[1, 0, 0, -326.1423835754395;\n 0, 1, 0, -249.1884441375732;\n 0, 0, 0, 908.2936897395464;\n 0, 0, 0.01667057791477966, 0]\n In Opencv 3.4.7\n R1:[0.999896853671721, 0.002053753407717509, -0.01421492575897819;\n -0.001998210979511085, 0.9999903186351127, 0.003920432237275809;\n 0.01422283974016211, -0.003891623438360741, 0.9998912771380395]\n R2:[0.9999779479868922, 0.002547264305378328, -0.006133105614847516;\n -0.00257120170332341, 0.9999890961653295, -0.003898265287061783;\n 0.006123108828459249, 0.003913948774068135, 0.999973593922994]\n P1:[811.2993931021877, 0, 326.1423835754395, 0;\n 0, 811.2993931021877, 249.1768836975098, 0;\n 0, 0, 1, 0]\n P2:[811.2993931021877, 0, 326.1423835754395, -48666.54277071658;\n 0, 811.2993931021877, 249.1768836975098, 0;\n 0, 0, 1, 0]\n Q:[1, 0, 0, -326.1423835754395;\n 0, 1, 0, -249.1768836975098;\n 0, 0, 0, 811.2993931021877;\n 0, 0, 0.01667057791477966, -0]\n The issue i encountered is that the stereo images don't get rectified correctly:\n <denchmark-link:https://user-images.githubusercontent.com/16633061/64074014-2eb31000-ccd8-11e9-9db4-3711f0a3c5e3.png></denchmark-link>\n \n Where in Matlab, with the same camera intrinsic matrices and distortions, R and T, the stereo  images get rectified correctly.\n \t\t"}, "comments_22": {"comment_id": 23, "comment_author": "fbergama", "commentT": "2019-09-01T10:29:37Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/hellochenwang>@hellochenwang</denchmark-link>\n , may be you can find exact version of opencv where the algorithm got spoilt?\n \t\t"}, "comments_23": {"comment_id": 24, "comment_author": "fbergama", "commentT": "2019-09-03T01:21:33Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/stiv-yakovenko>@stiv-yakovenko</denchmark-link>\n   i tried 2.4, 3.4.0 and 3.4.7, none of them rectified the images. if you look at the data, R1, R2 are the same across these versions. P1, P2 and Q are all slightly different among these versions. i.e. f, Cx1, Cy1, Cx2, Cy2 are calculated differently among these versions.\n I also tried the stereoRectifyUndistorted way, getting R1, R2, P1, P2 through H1 and H2, it also only undistorted the images(and looked different than stereoRectify's result), rectification still didn't happen. how did you generate the 100 random points? I used the same points from chessboard corners.\n \n 3.4.7\n R1:[0.9999776678389756, 0.003866499441780588, -0.005451055438198469;\n -0.003875921199231103, 0.9999910112256485, -0.001718924885548591;\n 0.00544436021778072, 0.001740014359572358, 0.9999836655125161]\n R2:[0.9999917217889253, 0.004059096422512854, 0.000283001507847639;\n -0.004059579798160889, 0.9999902652963838, 0.001728908421624442;\n -0.0002759809469227705, -0.001730042976559704, 0.9999984653917307]\n P1:[909.4462728713727, 0, 317.9187049865723, 0;\n 0, 909.4462728713727, 243.5866050720215, 0;\n 0, 0, 1, 0]\n P2:[909.4462728713727, 0, 317.9187049865723, -54.57683975635572;\n 0, 909.4462728713727, 243.5866050720215, 0;\n 0, 0, 1, 0]\n Q:[1, 0, 0, -317.9187049865723;\n 0, 1, 0, -243.5866050720215;\n 0, 0, 0, 909.4462728713727;\n 0, 0, 16.66359351203481, -0]\n 3.4.0\n R1:[0.9999776678389756, 0.003866499441780588, -0.005451055438198469;\n -0.003875921199231103, 0.9999910112256485, -0.001718924885548591;\n 0.00544436021778072, 0.001740014359572358, 0.9999836655125161]\n R2:[0.9999917217889253, 0.004059096422512854, 0.000283001507847639;\n -0.004059579798160889, 0.9999902652963838, 0.001728908421624442;\n -0.0002759809469227705, -0.001730042976559704, 0.9999984653917307]\n P1:[909.1166950086803, 0, 317.7264938354492, 0;\n 0, 909.1166950086803, 243.917818069458, 0;\n 0, 0, 1, 0]\n P2:[909.1166950086803, 0, 317.7264938354492, -54.55706143768428;\n 0, 909.1166950086803, 243.917818069458, 0;\n 0, 0, 1, 0]\n Q:[1, 0, 0, -317.7264938354492;\n 0, 1, 0, -243.917818069458;\n 0, 0, 0, 909.1166950086803;\n 0, 0, 16.66359351203481, -0]\n 2.4.0\n R1:[0.9999776678389756, 0.003866499441780588, -0.005451055438198469;\n -0.003875921199231103, 0.9999910112256485, -0.001718924885548591;\n 0.00544436021778072, 0.001740014359572358, 0.9999836655125161]\n R2:[0.9999917217889253, 0.004059096422512854, 0.000283001507847639;\n -0.004059579798160889, 0.9999902652963838, 0.001728908421624442;\n -0.0002759809469227705, -0.001730042976559704, 0.9999984653917307]\n P1:[909.3446133446074, 0, 317.9754257202148, 0;\n 0, 909.3446133446074, 243.6130523681641, 0;\n 0, 0, 1, 0]\n P2:[909.3446133446074, 0, 317.9754257202148, -54.57073905984679;\n 0, 909.3446133446074, 243.6130523681641, 0;\n 0, 0, 1, 0]\n Q:[1, 0, 0, -317.9754257202148;\n 0, 1, 0, -243.6130523681641;\n 0, 0, 0, 909.3446133446074;\n 0, 0, 16.66359351203481, -0]\n \n \t\t"}}}, "commit": {"commit_id": "394bc91e0709571523323cbf6cf74b2fdd307ffb", "commit_author": "rasmus25", "commitT": "2019-06-04 18:43:42+03:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\calib3d\\src\\calibration.cpp", "file_new_name": "modules\\calib3d\\src\\calibration.cpp", "file_complexity": {"file_NLOC": "3155", "file_CCN": "736", "file_NToken": "33544"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "2300,2324,2325,2327,2328,2329,2330,2331,2332", "deleted_lines": "2300,2309,2315,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355", "method_info": {"method_name": "cvStereoRectify", "method_params": "_cameraMatrix1,_cameraMatrix2,_distCoeffs1,_distCoeffs2,imageSize,matR,matT,_R1,_R2,_P1,_P2,matQ,flags,alpha,newImgSize,roi1,roi2", "method_startline": "2292", "method_endline": "2498", "method_complexity": {"method_NLOC": "171", "method_CCN": "22", "method_NToken": "2248", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\calib3d\\test\\test_cameracalibration.cpp", "file_new_name": "modules\\calib3d\\test\\test_cameracalibration.cpp", "file_complexity": {"file_NLOC": "1979", "file_CCN": "227", "file_NToken": "20260"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371", "deleted_lines": null, "method_info": {"method_name": "opencv_test::TEST", "method_params": "Calib3d_StereoCalibrate,regression_11131", "method_startline": "2335", "method_endline": "2371", "method_complexity": {"method_NLOC": "33", "method_CCN": "1", "method_NToken": "339", "method_nesting_level": "2"}}}}}}}}