{"BR": {"BR_id": "9863", "BR_author": "homm", "BRopenT": "2017-10-16T16:47:51Z", "BRcloseT": "2019-11-18T12:06:51Z", "BR_text": {"BRsummary": "cv2.GaussianBlur produces darker results than input", "BRdescription": "\n <denchmark-h:h5>System information (version)</denchmark-h>\n \n \n OpenCV => 3.3.0 master\n Operating System / Platform => Ubuntu 16.04 / x86_64\n Compiler => gcc 5.4\n \n <denchmark-h:h5>Detailed description</denchmark-h>\n \n GaussianBlur produces darker results than the input image.\n Original Image:\n <denchmark-link:https://user-images.githubusercontent.com/128982/31622948-8c81076c-b2a6-11e7-8b21-dc1803e39556.png></denchmark-link>\n \n >>> cv2.imwrite('gaus.30.cv2.png', cv2.GaussianBlur(im, (151, 151), 30))\n <denchmark-link:https://user-images.githubusercontent.com/128982/31623282-9ddb3180-b2a7-11e7-96bc-be7b07ec4fc0.png></denchmark-link>\n \n <denchmark-code>$ gm convert gaus.0.png -blur 75x30 gaus.30.gm.png\n </denchmark-code>\n \n <denchmark-link:https://user-images.githubusercontent.com/128982/31623794-452271be-b2a9-11e7-8d31-848d37be08cc.png></denchmark-link>\n \n Images should look the same, but this is obvious, that produced by OpenCV is much darker.\n <denchmark-h:h3>Proof that results produced by OpenCV is wrong</denchmark-h>\n \n In theory, Gaussian blur shouldn't change color distribution or lightness. So, lets calculate lightness of the images:\n # Using Pillow\n from PIL import Image \n \n def lightness(im):\n     hist = im.histogram()\n     return [\n         sum(i*v for i, v in enumerate(hist[:256])) / im.width / im.height,\n         sum(i*v for i, v in enumerate(hist[256:512])) / im.width / im.height,\n         sum(i*v for i, v in enumerate(hist[512:])) / im.width / im.height\n     ]\n \n # [59.76, 69.08, 40.2]\n print(lighnes(Image.open('gaus.0.png')))\n \n # [59.73, 69.18, 39.94]\n print(lighnes(Image.open('gaus.30.gm.png')))\n \n # [53.86, 62.26, 36.22]\n print(lighnes(Image.open('gaus.30.cv2.png')))\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "homm", "commentT": "2017-10-16T20:14:54Z", "comment_text": "\n \t\tLooks like the discrepancy is only for CV_8U type?\n <denchmark-code>diff ImageMagick / GaussianBlur CV_8U\n diff_b= 3.72009277344\n diff_g= 6.92227783203\n diff_r= 5.87456054688\n \n diff ImageMagick / GaussianBlur CV_32F\n diff_b= -0.263266247775\n diff_g= 0.0798971206896\n diff_r= -0.0453944416418\n \n diff ImageMagick / sepFilter2D CV_8U\n diff_b= 3.72009277344\n diff_g= 6.92227783203\n diff_r= 5.87456054688\n \n diff ImageMagick / sepFilter2D CV_32F\n diff_b= -0.263266247775\n diff_g= 0.0798971206896\n diff_r= -0.0453944416418\n \n </denchmark-code>\n \n More tests with different Gaussian kernel sizes:\n \n ksize=11, sigma=30:\n \n <denchmark-code>diff ImageMagick / GaussianBlur CV_8U\n diff_b= 0.469177246094\n diff_g= 1.1412109375\n diff_r= 0.923785400391\n \n diff ImageMagick / GaussianBlur CV_32F\n diff_b= -0.467183839615\n diff_g= -0.469239479038\n diff_r= -0.469786457056\n </denchmark-code>\n \n \n ksize=41, sigma=30:\n \n <denchmark-code>diff ImageMagick / GaussianBlur CV_8U\n diff_b= -1.40687255859\n diff_g= -2.06359863281\n diff_r= -1.86463623047\n \n diff ImageMagick / GaussianBlur CV_32F\n diff_b= -0.460932953184\n diff_g= -0.435742572248\n diff_r= -0.456756945207\n </denchmark-code>\n \n \n ksize=121, sigma=30:\n \n <denchmark-code>diff ImageMagick / GaussianBlur CV_8U\n diff_b= -1.57329711914\n diff_g= -2.19058837891\n diff_r= -2.00388183594\n \n diff ImageMagick / GaussianBlur CV_32F\n diff_b= -0.305351354854\n diff_g= -0.0147031555618\n diff_r= -0.121201964526\n </denchmark-code>\n \n \n ksize=151, sigma=30:\n \n <denchmark-code>diff ImageMagick / GaussianBlur CV_8U\n diff_b= 3.72009277344\n diff_g= 6.92227783203\n diff_r= 5.87456054688\n \n diff ImageMagick / GaussianBlur CV_32F\n diff_b= -0.263266247775\n diff_g= 0.0798971206896\n diff_r= -0.0453944416418\n </denchmark-code>\n \n Full code:\n <denchmark-code>import cv2 as cv\n import numpy as np\n \n im = cv.imread('snake.png')\n im_blur_gm = cv.imread('gaus.30.gm.png')\n \n im_blur_cv_8u = cv.GaussianBlur(im, (151, 151), 30)\n \n diff_b = im_blur_gm[:,:,0].astype(float) - im_blur_cv_8u[:,:,0].astype(float)\n diff_g = im_blur_gm[:,:,1].astype(float) - im_blur_cv_8u[:,:,1].astype(float)\n diff_r = im_blur_gm[:,:,2].astype(float) - im_blur_cv_8u[:,:,2].astype(float)\n \n print \"diff ImageMagick / GaussianBlur CV_8U\"\n print \"diff_b=\", np.mean(diff_b)\n print \"diff_g=\", np.mean(diff_g)\n print \"diff_r=\", np.mean(diff_r)\n \n np.savetxt('diff_b.txt', diff_b)\n np.savetxt('diff_g.txt', diff_g)\n np.savetxt('diff_r.txt', diff_r)\n \n im_float = np.zeros(im.shape, dtype=np.float32)\n \n for i in xrange(im.shape[0]):\n   for j in xrange(im.shape[1]):\n     im_float[i,j,0] = im[i,j,0]\n     im_float[i,j,1] = im[i,j,1]\n     im_float[i,j,2] = im[i,j,2]\n \n im_blur_cv_float = cv.GaussianBlur(im_float, (151, 151), 30)\n \n diff_b = im_blur_gm[:,:,0].astype(float) - im_blur_cv_float[:,:,0]\n diff_g = im_blur_gm[:,:,1].astype(float) - im_blur_cv_float[:,:,1]\n diff_r = im_blur_gm[:,:,2].astype(float) - im_blur_cv_float[:,:,2]\n \n print \"\\ndiff ImageMagick / GaussianBlur CV_32F\"\n print \"diff_b=\", np.mean(diff_b)\n print \"diff_g=\", np.mean(diff_g)\n print \"diff_r=\", np.mean(diff_r)\n \n np.savetxt('diff_b_float.txt', diff_b)\n np.savetxt('diff_g_float.txt', diff_g)\n np.savetxt('diff_r_float.txt', diff_r)\n \n kernel = cv.getGaussianKernel(151, 30, cv.CV_32F)\n \n im_sep_cv_8u = cv.sepFilter2D(im, cv.CV_8U, kernel, kernel)\n \n diff_b = im_blur_gm[:,:,0].astype(float) - im_sep_cv_8u[:,:,0].astype(float)\n diff_g = im_blur_gm[:,:,1].astype(float) - im_sep_cv_8u[:,:,1].astype(float)\n diff_r = im_blur_gm[:,:,2].astype(float) - im_sep_cv_8u[:,:,2].astype(float)\n \n print \"\\ndiff ImageMagick / sepFilter2D CV_8U\"\n print \"diff_b=\", np.mean(diff_b)\n print \"diff_g=\", np.mean(diff_g)\n print \"diff_r=\", np.mean(diff_r)\n \n im_sep_cv_float = cv.sepFilter2D(im, cv.CV_32F, kernel, kernel)\n \n diff_b = im_blur_gm[:,:,0].astype(float) - im_sep_cv_float[:,:,0]\n diff_g = im_blur_gm[:,:,1].astype(float) - im_sep_cv_float[:,:,1]\n diff_r = im_blur_gm[:,:,2].astype(float) - im_sep_cv_float[:,:,2]\n \n print \"\\ndiff ImageMagick / sepFilter2D CV_32F\"\n print \"diff_b=\", np.mean(diff_b)\n print \"diff_g=\", np.mean(diff_g)\n print \"diff_r=\", np.mean(diff_r)\n </denchmark-code>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "homm", "commentT": "2019-01-24T16:57:34Z", "comment_text": "\n \t\tI had the same issue.\n For anyone wondering, you can use getGaussianKernel and sepFilter2D to avoid the issue.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "homm", "commentT": "2019-05-04T22:57:28Z", "comment_text": "\n \t\t\n you can use getGaussianKernel and sepFilter2D to avoid the issue.\n \n What issue to avoid?\n Results from experiments above shows the same numbers:\n <denchmark-code>diff ImageMagick / GaussianBlur CV_8U\n diff_b= 3.72009277344\n diff_g= 6.92227783203\n diff_r= 5.87456054688\n \n diff ImageMagick / sepFilter2D CV_8U\n diff_b= 3.72009277344\n diff_g= 6.92227783203\n diff_r= 5.87456054688\n </denchmark-code>\n \n Difference is observed between 8U / 32F cases.\n <denchmark-h:hr></denchmark-h>\n \n Proper way for making of these experiments is to drop pixels affected by borders at least (probably they are handled in a different ways).\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "homm", "commentT": "2019-05-06T18:43:42Z", "comment_text": "\n \t\tI am using OpenCV 3.4.\n On a big image:\n <denchmark-code>im: (3648, 4864, 3)\n im_blur_gm: (3648, 4864, 3)\n diff ImageMagick / GaussianBlur CV_8U\n diff_b= 11.6140492281\n diff_g= 12.2392454725\n diff_r= 12.1626385103\n \n diff ImageMagick / GaussianBlur CV_32F\n diff_b= -0.498279786766\n diff_g= -0.498219731421\n diff_r= -0.498563998672\n \n diff ImageMagick / sepFilter2D CV_8U\n diff_b= 11.6140573585\n diff_g= 12.2392529355\n diff_r= 12.1626454272\n \n diff ImageMagick / sepFilter2D CV_32F\n diff_b= -0.498279760832\n diff_g= -0.498219566537\n diff_r= -0.498563828562\n </denchmark-code>\n \n Setting explicitly sigmaX=30, sigmaY=30:\n <denchmark-code>im: (3648, 4864, 3)\n im_blur_gm: (3648, 4864, 3)\n diff ImageMagick / GaussianBlur CV_8U\n diff_b= -0.498629633803\n diff_g= -0.498437173969\n diff_r= -0.498979240853\n \n diff ImageMagick / GaussianBlur CV_32F\n diff_b= -0.498289962178\n diff_g= -0.498230124242\n diff_r= -0.498574525185\n \n diff ImageMagick / sepFilter2D CV_8U\n diff_b= 11.6140573585\n diff_g= 12.2392529355\n diff_r= 12.1626454272\n \n diff ImageMagick / sepFilter2D CV_32F\n diff_b= -0.498279760832\n diff_g= -0.498219566537\n diff_r= -0.498563828562\n </denchmark-code>\n \n On a small image (snake) (old code):\n <denchmark-code>im: (320, 512, 3)\n im_blur_gm: (320, 512, 3)\n diff ImageMagick / GaussianBlur CV_8U\n diff_b= 4.4182333754\n diff_g= 8.35163664377\n diff_r= 7.0989853956\n \n diff ImageMagick / GaussianBlur CV_32F\n diff_b= -0.496995073647\n diff_g= -0.4971752022\n diff_r= -0.498224385727\n \n diff ImageMagick / sepFilter2D CV_8U\n diff_b= 4.4182333754\n diff_g= 8.35163664377\n diff_r= 7.09900178662\n \n diff ImageMagick / sepFilter2D CV_32F\n diff_b= -0.496995206189\n diff_g= -0.497175293301\n diff_r= -0.498224482238\n </denchmark-code>\n \n On a small image (snake) (new code):\n <denchmark-code>im: (320, 512, 3)\n im_blur_gm: (320, 512, 3)\n diff ImageMagick / GaussianBlur CV_8U\n diff_b= -0.49654968939\n diff_g= -0.496648035536\n diff_r= -0.497320067531\n \n diff ImageMagick / GaussianBlur CV_32F\n diff_b= -0.497001285997\n diff_g= -0.497185361616\n diff_r= -0.49823264558\n \n diff ImageMagick / sepFilter2D CV_8U\n diff_b= 4.4182333754\n diff_g= 8.35163664377\n diff_r= 7.09900178662\n \n diff ImageMagick / sepFilter2D CV_32F\n diff_b= -0.496995206189\n diff_g= -0.497175293301\n diff_r= -0.498224482238\n </denchmark-code>\n \n Code:\n \n from __future__ import print_function\n import numpy as np\n import cv2 as cv\n import argparse\n \n parser = argparse.ArgumentParser()\n parser.add_argument('--image', type=str, help='path to original image file')\n parser.add_argument('--blur', type=str, help='path to ImageMagick blurred image file')\n args = parser.parse_args()\n \n im = cv.imread(args.image)\n im_blur_gm = cv.imread(args.blur)\n \n print(\"im:\", im.shape)\n print(\"im_blur_gm:\", im_blur_gm.shape)\n \n im_blur_cv_8u = cv.GaussianBlur(im, (151, 151), sigmaX=30, sigmaY=30)\n \n cv.imwrite(\"cv_blur.png\", im_blur_cv_8u)\n \n diff_b = im_blur_gm[:,:,0].astype(float) - im_blur_cv_8u[:,:,0].astype(float)\n diff_g = im_blur_gm[:,:,1].astype(float) - im_blur_cv_8u[:,:,1].astype(float)\n diff_r = im_blur_gm[:,:,2].astype(float) - im_blur_cv_8u[:,:,2].astype(float)\n \n diff_b = diff_b[75:-76,75:-76]\n diff_g = diff_g[75:-76,75:-76]\n diff_r = diff_r[75:-76,75:-76]\n \n print(\"diff ImageMagick / GaussianBlur CV_8U\")\n print(\"diff_b=\", np.mean(diff_b))\n print(\"diff_g=\", np.mean(diff_g))\n print(\"diff_r=\", np.mean(diff_r))\n \n np.savetxt('diff_b.txt', diff_b)\n np.savetxt('diff_g.txt', diff_g)\n np.savetxt('diff_r.txt', diff_r)\n \n im_float = im.astype(np.float32)\n im_blur_cv_float = cv.GaussianBlur(im_float, (151, 151), sigmaX=30, sigmaY=30)\n \n diff_b = im_blur_gm[:,:,0].astype(float) - im_blur_cv_float[:,:,0]\n diff_g = im_blur_gm[:,:,1].astype(float) - im_blur_cv_float[:,:,1]\n diff_r = im_blur_gm[:,:,2].astype(float) - im_blur_cv_float[:,:,2]\n \n diff_b = diff_b[75:-76,75:-76]\n diff_g = diff_g[75:-76,75:-76]\n diff_r = diff_r[75:-76,75:-76]\n \n print(\"\\ndiff ImageMagick / GaussianBlur CV_32F\")\n print(\"diff_b=\", np.mean(diff_b))\n print(\"diff_g=\", np.mean(diff_g))\n print(\"diff_r=\", np.mean(diff_r))\n \n np.savetxt('diff_b_float.txt', diff_b)\n np.savetxt('diff_g_float.txt', diff_g)\n np.savetxt('diff_r_float.txt', diff_r)\n \n kernel = cv.getGaussianKernel(151, 30, cv.CV_32F)\n \n im_sep_cv_8u = cv.sepFilter2D(im, cv.CV_8U, kernel, kernel)\n \n diff_b = im_blur_gm[:,:,0].astype(float) - im_sep_cv_8u[:,:,0].astype(float)\n diff_g = im_blur_gm[:,:,1].astype(float) - im_sep_cv_8u[:,:,1].astype(float)\n diff_r = im_blur_gm[:,:,2].astype(float) - im_sep_cv_8u[:,:,2].astype(float)\n \n diff_b = diff_b[75:-76,75:-76]\n diff_g = diff_g[75:-76,75:-76]\n diff_r = diff_r[75:-76,75:-76]\n \n print(\"\\ndiff ImageMagick / sepFilter2D CV_8U\")\n print(\"diff_b=\", np.mean(diff_b))\n print(\"diff_g=\", np.mean(diff_g))\n print(\"diff_r=\", np.mean(diff_r))\n \n im_sep_cv_float = cv.sepFilter2D(im, cv.CV_32F, kernel, kernel)\n \n diff_b = im_blur_gm[:,:,0].astype(float) - im_sep_cv_float[:,:,0]\n diff_g = im_blur_gm[:,:,1].astype(float) - im_sep_cv_float[:,:,1]\n diff_r = im_blur_gm[:,:,2].astype(float) - im_sep_cv_float[:,:,2]\n \n diff_b = diff_b[75:-76,75:-76]\n diff_g = diff_g[75:-76,75:-76]\n diff_r = diff_r[75:-76,75:-76]\n \n print(\"\\ndiff ImageMagick / sepFilter2D CV_32F\")\n print(\"diff_b=\", np.mean(diff_b))\n print(\"diff_g=\", np.mean(diff_g))\n print(\"diff_r=\", np.mean(diff_r))\n \n \n When sigma1==sigma2, it should use IPP, otherwise ocvSepFilter.\n The <denchmark-link:https://docs.opencv.org/3.4/d4/d86/group__imgproc__filter.html#gaabe8c836e97159a9193fb0b11ac52cf1>documentation</denchmark-link>\n  says:\n sigmaY Gaussian  kernel standard deviation in Y direction; if sigmaY is zero, it is set  to be equal to sigmaX, if both sigmas are zeros, they are computed from  ksize.width and ksize.height, respectively (see getGaussianKernel  for details); to fully control the result regardless of possible future  modifications of all this semantics, it is recommended to specify all  of ksize, sigmaX, and sigmaY. \n I don't think sigmaY==sigmaX when sigmaY=0 is valid anymore.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "homm", "commentT": "2019-07-13T07:58:54Z", "comment_text": "\n \t\tI had the same issue.\n I guess that opencv makes an inaccurate approximation for int type data.\n When data type is double, the issue no longer appear.\n Python code:\n <denchmark-code>img64f = (image/1.0)    \n g = cv2.getGaussianKernel(rad, rad)    \n img = (cv2.sepFilter2D(img64f, cv2.CV_64FC4, g, g) ).astype(np.uint8)  \n </denchmark-code>\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "homm", "commentT": "2019-10-23T17:01:04Z", "comment_text": "\n \t\tProblem has been introduced in bit-exact computation path.\n Computation using floating-point numbers (32F/64F) looks well.\n Main inaccurate calculations are performed during kernels conversion:\n \n GaussianBlur => ufixedpoint16 (8-bit fraction part)\n sepFilter2D => 8-bit fraction part (32-bit total)\n \n For example, bit-exact GaussianBlur kernels may break their main property of sum(k) == 1.0.\n There are several options for handling that:\n \n don't call bit-exact code if bit-exact kernel is not a good approximation\n \n \"good approximation\" should be well defined\n \n \n try to adjust approximated kernel with saving sum(k) == 1.0 property.\n \n This looks like crazy process (and it is hard to define that), but there is already special cases for sigma=0 and ksize=3,5,7 (these kernels are not accurate approximations from original formula)\n Adjusting of approximated kernels in case of sepFilter2D() doesn't look good anyway (it is GaussianBlur approach only)\n \n \n \n \t\t"}}}, "commit": {"commit_id": "f4d55d512fe43a31a39f5e40629fa75d66879036", "commit_author": "Alexander Alekhin", "commitT": "2019-11-18 01:39:27+03:00", "commit_complexity": {"commit_NLOC": "0.3411764705882353", "commit_CCN": "0.7058823529411765", "commit_Nprams": "0.023529411764705882"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\features2d\\misc\\java\\test\\BruteForceDescriptorMatcherTest.java", "file_new_name": "modules\\features2d\\misc\\java\\test\\BruteForceDescriptorMatcherTest.java", "file_complexity": {"file_NLOC": "214", "file_CCN": "35", "file_NToken": "1738"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "88,92", "deleted_lines": "88,92", "method_info": {"method_name": "BruteForceDescriptorMatcherTest::setUp", "method_params": "", "method_startline": "82", "method_endline": "94", "method_complexity": {"method_NLOC": "12", "method_CCN": "1", "method_NToken": "106", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\features2d\\misc\\java\\test\\BruteForceL1DescriptorMatcherTest.java", "file_new_name": "modules\\features2d\\misc\\java\\test\\BruteForceL1DescriptorMatcherTest.java", "file_complexity": {"file_NLOC": "200", "file_CCN": "33", "file_NToken": "1611"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "88,89,90,91,92", "deleted_lines": "88,89,90,91,92", "method_info": {"method_name": "BruteForceL1DescriptorMatcherTest::setUp", "method_params": "", "method_startline": "82", "method_endline": "94", "method_complexity": {"method_NLOC": "12", "method_CCN": "1", "method_NToken": "106", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\features2d\\misc\\java\\test\\BruteForceSL2DescriptorMatcherTest.java", "file_new_name": "modules\\features2d\\misc\\java\\test\\BruteForceSL2DescriptorMatcherTest.java", "file_complexity": {"file_NLOC": "202", "file_CCN": "33", "file_NToken": "1621"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "93,97", "deleted_lines": "93,97", "method_info": {"method_name": "BruteForceSL2DescriptorMatcherTest::setUp", "method_params": "", "method_startline": "87", "method_endline": "99", "method_complexity": {"method_NLOC": "12", "method_CCN": "1", "method_NToken": "106", "method_nesting_level": "1"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\features2d\\misc\\java\\test\\FlannBasedDescriptorMatcherTest.java", "file_new_name": "modules\\features2d\\misc\\java\\test\\FlannBasedDescriptorMatcherTest.java", "file_complexity": {"file_NLOC": "289", "file_CCN": "37", "file_NToken": "1813"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "163,167", "deleted_lines": "163,167", "method_info": {"method_name": "FlannBasedDescriptorMatcherTest::setUp", "method_params": "", "method_startline": "158", "method_endline": "169", "method_complexity": {"method_NLOC": "12", "method_CCN": "1", "method_NToken": "106", "method_nesting_level": "1"}}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "modules\\features2d\\misc\\java\\test\\ORBDescriptorExtractorTest.java", "file_new_name": "modules\\features2d\\misc\\java\\test\\ORBDescriptorExtractorTest.java", "file_complexity": {"file_NLOC": "93", "file_CCN": "12", "file_NToken": "868"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "95", "deleted_lines": "95", "method_info": {"method_name": "ORBDescriptorExtractorTest::testRead", "method_params": "", "method_startline": "79", "method_endline": "99", "method_complexity": {"method_NLOC": "15", "method_CCN": "1", "method_NToken": "198", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "56", "deleted_lines": "56", "method_info": {"method_name": "ORBDescriptorExtractorTest::testComputeMatListOfKeyPointMat", "method_params": "", "method_startline": "45", "method_endline": "60", "method_complexity": {"method_NLOC": "14", "method_CCN": "1", "method_NToken": "169", "method_nesting_level": "1"}}}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "modules\\imgproc\\src\\filter.dispatch.cpp", "file_new_name": "modules\\imgproc\\src\\filter.dispatch.cpp", "file_complexity": {"file_NLOC": "1129", "file_CCN": "285", "file_NToken": "10284"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297", "deleted_lines": null, "method_info": {"method_name": "cv::createBitExactKernel_32S", "method_params": "kernel,kernel_dst,bits", "method_startline": "282", "method_endline": "297", "method_complexity": {"method_NLOC": "16", "method_CCN": "3", "method_NToken": "140", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "324,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,357", "deleted_lines": "314,315,316,317,318,319,321", "method_info": {"method_name": "cv::createSeparableLinearFilter", "method_params": "_srcType,_dstType,__rowKernel,__columnKernel,_anchor,_delta,_rowBorderType,_columnBorderType,_borderValue", "method_startline": "299", "method_endline": "377", "method_complexity": {"method_NLOC": "75", "method_CCN": "19", "method_NToken": "568", "method_nesting_level": "1"}}}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "modules\\imgproc\\src\\fixedpoint.inl.hpp", "file_new_name": "modules\\imgproc\\src\\fixedpoint.inl.hpp", "file_complexity": {"file_NLOC": "333", "file_CCN": "221", "file_NToken": "5173"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "360", "deleted_lines": null, "method_info": {"method_name": "ufixedpoint16::raw", "method_params": "", "method_startline": "360", "method_endline": "360", "method_complexity": {"method_NLOC": "1", "method_CCN": "1", "method_NToken": "8", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "359", "deleted_lines": null, "method_info": {"method_name": "ufixedpoint16::fromRaw", "method_params": "v", "method_startline": "359", "method_endline": "359", "method_complexity": {"method_NLOC": "1", "method_CCN": "1", "method_NToken": "13", "method_nesting_level": "2"}}}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 8, "file_old_name": "modules\\imgproc\\src\\smooth.dispatch.cpp", "file_new_name": "modules\\imgproc\\src\\smooth.dispatch.cpp", "file_complexity": {"file_NLOC": "511", "file_CCN": "137", "file_NToken": "4403"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "172", "method_info": {"method_name": "cv::getGaussianKernel", "method_params": "n,sigma,int,res", "method_startline": "172", "method_endline": "172", "method_complexity": {"method_NLOC": "1", "method_CCN": "1", "method_NToken": "33", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679", "deleted_lines": null, "method_info": {"method_name": "cv::GaussianBlur", "method_params": "_src,_dst,ksize,sigma1,sigma2,borderType", "method_startline": "600", "method_endline": "683", "method_complexity": {"method_NLOC": "67", "method_CCN": "28", "method_NToken": "744", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,220", "deleted_lines": null, "method_info": {"method_name": "cv::getGaussianKernel", "method_params": "n,sigma,ktype", "method_startline": "199", "method_endline": "220", "method_complexity": {"method_NLOC": "19", "method_CCN": "5", "method_NToken": "137", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "80,83,84,86,88,90,91,93,95,96,97,98,99,100,101,103,105,106,107,108,109,110,111,112,113,115,117,118,119,120,121,122,123,124,125,126,127,129,131,132,133,134,135,136,137,138,139,140,141,142,143,147,148,149,151,152,153,154,155,156,157,161,162,163,164,165,166,167,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,193,194,195,196,197", "deleted_lines": "80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,97,98,99,101,102,104,106,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,136,138,139,141,143,144,149,150,151,152,153,157,158,160,162,163,165,169,172", "method_info": {"method_name": "cv::getGaussianKernelBitExact", "method_params": "result,n,sigma", "method_startline": "80", "method_endline": "197", "method_complexity": {"method_NLOC": "103", "method_CCN": "12", "method_NToken": "694", "method_nesting_level": "1"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "588,589,590,591,592,593,594,595,596,597,598", "deleted_lines": null, "method_info": {"method_name": "cv::validateGaussianBlurKernel", "method_params": "kernel", "method_startline": "588", "method_endline": "598", "method_complexity": {"method_NLOC": "10", "method_CCN": "2", "method_NToken": "69", "method_nesting_level": "1"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "125,126,127,129,131,132,133,134,135,136,137,138,139,140,141,142,143,147,148,149,151,152,153,154,155,156,157,161,162,163,164,165,166,167,168,169", "deleted_lines": "125,126,127,128,129,130,131,133,134,136,138,139,141,143,144,149,150,151,152,153,157,158,160,162,163,165,169", "method_info": {"method_name": "cv::getFixedpointGaussianKernel", "method_params": "n,sigma", "method_startline": "125", "method_endline": "169", "method_complexity": {"method_NLOC": "39", "method_CCN": "9", "method_NToken": "415", "method_nesting_level": "1"}}}, "hunk_6": {"Ismethod": 1, "added_lines": "223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257", "deleted_lines": null, "method_info": {"method_name": "cv::getGaussianKernelFixedPoint_ED", "method_params": "result,kernel_bitexact,fractionBits", "method_startline": "223", "method_endline": "257", "method_complexity": {"method_NLOC": "27", "method_CCN": "2", "method_NToken": "221", "method_nesting_level": "1"}}}, "hunk_7": {"Ismethod": 1, "added_lines": "263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279", "deleted_lines": null, "method_info": {"method_name": "cv::getGaussianKernel<ufixedpoint16>", "method_params": "n,sigma,int,res", "method_startline": "263", "method_endline": "279", "method_complexity": {"method_NLOC": "14", "method_CCN": "2", "method_NToken": "115", "method_nesting_level": "1"}}}}}, "file_8": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "modules\\imgproc\\test\\test_filter.cpp", "file_new_name": "modules\\imgproc\\test\\test_filter.cpp", "file_complexity": {"file_NLOC": "1806", "file_CCN": "349", "file_NToken": "19966"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "696,697,698,699,700", "deleted_lines": null, "method_info": {"method_name": "opencv_test::CV_SmoothBaseTest::dump_test_case", "method_params": "test_case_idx,out", "method_startline": "696", "method_endline": "700", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "37", "method_nesting_level": "3"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "812,813,814,815,816", "deleted_lines": null, "method_info": {"method_name": "opencv_test::CV_GaussianBlurTest::dump_test_case", "method_params": "test_case_idx,out", "method_startline": "812", "method_endline": "816", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "49", "method_nesting_level": "3"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "63,64,65,66,67", "deleted_lines": null, "method_info": {"method_name": "opencv_test::CV_FilterBaseTest::dump_test_case", "method_params": "test_case_idx,out", "method_startline": "63", "method_endline": "67", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "37", "method_nesting_level": "3"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "869,870,876,877", "deleted_lines": null, "method_info": {"method_name": "opencv_test::calcGaussianKernel", "method_params": "n,sigma,kernel", "method_startline": "862", "method_endline": "897", "method_complexity": {"method_NLOC": "33", "method_CCN": "6", "method_NToken": "391", "method_nesting_level": "2"}}}}}, "file_9": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "modules\\imgproc\\test\\test_smooth_bitexact.cpp", "file_new_name": "modules\\imgproc\\test\\test_smooth_bitexact.cpp", "file_complexity": {"file_NLOC": "160", "file_CCN": "27", "file_NToken": "3142"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "175,176,177,178,179,180,181,182,183,184", "deleted_lines": null, "method_info": {"method_name": "opencv_test::checkGaussianBlur_8Uvs32F", "method_params": "src8u,src32f,N,sigma", "method_startline": "175", "method_endline": "184", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "93", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "170", "deleted_lines": null, "method_info": {"method_name": "opencv_test::TEST", "method_params": "GaussianBlur_Bitexact,regression_15015", "method_startline": "166", "method_endline": "172", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "64", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "186,187,188,189,190,191,192", "deleted_lines": null, "method_info": {"method_name": "opencv_test::TEST", "method_params": "GaussianBlur_Bitexact,regression_9863", "method_startline": "186", "method_endline": "192", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "44", "method_nesting_level": "2"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "74,80", "deleted_lines": null, "method_info": {"method_name": "opencv_test::TEST", "method_params": "GaussianBlur_Bitexact,Linear8U", "method_startline": "42", "method_endline": "164", "method_complexity": {"method_NLOC": "109", "method_CCN": "21", "method_NToken": "2581", "method_nesting_level": "2"}}}}}, "file_10": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\objdetect\\misc\\python\\test\\test_facedetect.py", "file_new_name": "modules\\objdetect\\misc\\python\\test\\test_facedetect.py", "file_complexity": {"file_NLOC": "63", "file_CCN": "15", "file_NToken": "531"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "53", "deleted_lines": "53", "method_info": {"method_name": "test_facedetect", "method_params": "self", "method_startline": "25", "method_endline": "88", "method_complexity": {"method_NLOC": "46", "method_CCN": "13", "method_NToken": "427", "method_nesting_level": "1"}}}}}, "file_11": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "modules\\ts\\include\\opencv2\\ts.hpp", "file_new_name": "modules\\ts\\include\\opencv2\\ts.hpp", "file_complexity": {"file_NLOC": "498", "file_CCN": "49", "file_NToken": "3797"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "431,432,433", "deleted_lines": null}}}, "file_12": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "modules\\ts\\src\\ts.cpp", "file_new_name": "modules\\ts\\src\\ts.cpp", "file_complexity": {"file_NLOC": "779", "file_CCN": "226", "file_NToken": "5256"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "410,411,412,413", "deleted_lines": null, "method_info": {"method_name": "cvtest::BaseTest::dump_test_case", "method_params": "test_case_idx,out", "method_startline": "410", "method_endline": "413", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "29", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "353,354,355,356,357,359", "deleted_lines": null, "method_info": {"method_name": "cvtest::BaseTest::run", "method_params": "start_from", "method_startline": "325", "method_endline": "361", "method_complexity": {"method_NLOC": "31", "method_CCN": "11", "method_NToken": "226", "method_nesting_level": "1"}}}}}}}}