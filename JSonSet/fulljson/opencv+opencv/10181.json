{"BR": {"BR_id": "10181", "BR_author": "romanc", "BRopenT": "2017-11-28T12:40:36Z", "BRcloseT": "2017-11-29T10:05:39Z", "BR_text": {"BRsummary": "matrix division: div_SIMD has incorrect division by zero handling in template specialization for double", "BRdescription": "\n The specialization for double precision floating point types of div_SIMD in artihm_simd.hpp [1] has an inconsistent handling of the special case division by zero. It is supposed to check the denominator to not be zero, but the nominator is checked instead.\n \n \n \n opencv/modules/core/src/arithm_simd.hpp\n \n \n          Line 1727\n       in\n       bc547c4\n \n \n \n \n \n \n  res0 = v_select(f0 == v_zero, v_zero, res0); \n \n \n \n \n \n \n \n \n opencv/modules/core/src/arithm_simd.hpp\n \n \n          Line 1728\n       in\n       bc547c4\n \n \n \n \n \n \n  res1 = v_select(f1 == v_zero, v_zero, res1); \n \n \n \n \n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "romanc", "commentT": "2017-11-28T13:00:47Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/alalek>@alalek</denchmark-link>\n  I only added a PR for the master branch. Can you port this back to the 2.4 branch or do I have to add another PR for that?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "romanc", "commentT": "2017-11-28T13:07:00Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/romanc>@romanc</denchmark-link>\n  Thank you!\n PR for the master branch is enough. There is no similar SIMD optimization in the 2.4 branch.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "romanc", "commentT": "2017-11-28T15:22:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/alalek>@alalek</denchmark-link>\n  I have also indication that matrix division for 8SC3 and 8UC3 (mapping to  and ) might be inconsistent when it comes to division by zero. Looking at code, I could not find an error. Are there testcases in the testsuite that will run matrix division with, say, an all-0-matrix for all possible datatypes in OpenCV? This helps me to rule out another bug in OpenCV.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "romanc", "commentT": "2017-11-28T15:36:02Z", "comment_text": "\n \t\tWe have no special tests for division by zero.\n \n all-0-matrix for all possible datatypes\n \n Actually the hard problem here is optimization backends, like IPP, HAL, OpenCL (probably not run in your case), SIMD and generic non-optimized implementation.\n BTW, perhaps your patch resolves this issue <denchmark-link:https://github.com/opencv/opencv/issues/8413>#8413</denchmark-link>\n  too\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "romanc", "commentT": "2017-11-28T15:57:38Z", "comment_text": "\n \t\t\n Actually the hard problem here is optimization backends, like IPP, HAL, OpenCL (probably not run in your case), SIMD and generic non-optimized implementation.\n \n I see, this can get pretty ugly, if you want to check all possible versions of the code with that many optimization backends. I am most probably running the SIMD version of the code. It's also the one I check when looking for another bug in these cases. If I have time, I will try to run the generic non-optimized version to check, if there is a difference. Anyway, thanks for the quick answer. If I find something, I will open another issue. I don't want to clutter this issue any more than necessary.\n \n BTW, perhaps your patch resolves this issue #8413 too\n \n Indeed, this looks very similar to the behavior I get ;)\n \t\t"}}}, "commit": {"commit_id": "d381e499ead28937cdea5c3ac54aac35693769af", "commit_author": "Roman Cattaneo", "commitT": "2017-11-28 13:48:40+01:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\core\\src\\arithm_simd.hpp", "file_new_name": "modules\\core\\src\\arithm_simd.hpp", "file_complexity": {"file_NLOC": "1427", "file_CCN": "178", "file_NToken": "12445"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1727,1728", "deleted_lines": "1727,1728", "method_info": {"method_name": "cv::Div_SIMD<double>::operator ( )", "method_params": "src1,src2,dst,width,scale", "method_startline": "1707", "method_endline": "1735", "method_complexity": {"method_NLOC": "22", "method_CCN": "3", "method_NToken": "181", "method_nesting_level": "2"}}}}}}}}