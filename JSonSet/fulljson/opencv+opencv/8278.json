{"BR": {"BR_id": "8278", "BR_author": "ville-v", "BRopenT": "2017-02-27T09:13:32Z", "BRcloseT": "2017-03-01T14:13:17Z", "BR_text": {"BRsummary": "CV_XADD compile errors with Embarcadero C++ Builder 10.1", "BRdescription": "\n <denchmark-h:h5>System information (version)</denchmark-h>\n \n \n OpenCV => 3.2\n Operating System / Platform => Windows 64 Bit\n Compiler => Embarcadero C++ Builder 10.1, Clang-based bcc32c compiler\n \n <denchmark-h:h5>Detailed description</denchmark-h>\n \n In cvdef.h, the following line fails to compile for two reasons\n #else\n   CV_INLINE CV_XADD(int* addr, int delta) { int tmp = *addr; *addr += delta; return tmp; }\n #endif\n First is \"[bcc32c Error] cvdef.h(442): C++ requires a type specifier for all declarations\". Reason is the function has no return value, but it should return int.\n Second is \"[bcc32c Error] ptr.inl.hpp(67): no matching function for call to 'CV_XADD'\"\n \"[bcc32c Hint] cvdef.h(442): candidate function not viable: no known conversion from 'unsigned int *' to 'int *' for 1st argument\". The same error also occurs on line 72 in ptr.inl.hpp.\n <denchmark-h:h5>Steps to reproduce</denchmark-h>\n \n \n Add OpenCV include file\n \n #include <opencv2/core/core.hpp>\n \n Try to compile\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ville-v", "commentT": "2017-02-27T10:43:55Z", "comment_text": "\n \t\tCould you try to add \"int\":\n \n CV_INLINE int CV_XADD(...)\"\n \n But using this branch you will compile thread unsafe code. Why _MSC_VER detection doesn't work?(your system is Windows - are you use cross-compilation?)\n Could you dump used compiler defines? It is something like clang -dM -E - < /dev/null, but with OpenCV specific flags (see make VERBOSE=1 or similar output).\n Also you can try to use CMAKE_CXX_FLAGS and define your custom CV_XADD macro (be careful with spaces).\n BTW, This platform is not supported officially. But we will accept reasonable patches, that don't break existed functionality.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ville-v", "commentT": "2017-02-27T10:52:18Z", "comment_text": "\n \t\tI can make this branch to compile by adding \"int\" as you suggested, and changing PtrOwner::refCount to int in ptr.inl.hpp. But this might be an imperfect fix. I don't know if there are other files that use CV_XADD with unsigned int.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "ville-v", "commentT": "2017-02-27T11:02:37Z", "comment_text": "\n \t\tThe command that should dump predefined macros does not seem to work this compiler. But the macros are listed in the documentation here: <denchmark-link:http://docwiki.embarcadero.com/RADStudio/Berlin/en/Predefined_Macros>http://docwiki.embarcadero.com/RADStudio/Berlin/en/Predefined_Macros</denchmark-link>\n \n Basically, the compiler defines __BORLANDC__ and __clang__, and does not define _MSC_VER.\n C++ Builder 10.1. is \"C++Builder Berlin\".\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "ville-v", "commentT": "2017-02-27T11:07:23Z", "comment_text": "\n \t\tWell, Could you try to change this <denchmark-link:https://github.com/opencv/opencv/blob/3.2.0/modules/core/include/opencv2/core/cvdef.h#L423>line</denchmark-link>\n :\n - #elif defined __GNUC__\n + #elif defined __GNUC__ || defined __clang__\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "ville-v", "commentT": "2017-02-27T11:43:16Z", "comment_text": "\n \t\tThat change fixes the issue.\n \t\t"}}}, "commit": {"commit_id": "0c1bcf354c78f367a7af4f0ced9cc2b130bc499e", "commit_author": "ville-v", "commitT": "2017-03-01 08:47:49+02:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "modules\\core\\include\\opencv2\\core\\cvdef.h", "file_new_name": "modules\\core\\include\\opencv2\\core\\cvdef.h", "file_complexity": {"file_NLOC": "72", "file_CCN": "1", "file_NToken": "241"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "441", "deleted_lines": "441"}}}}}}