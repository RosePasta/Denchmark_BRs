{"BR": {"BR_id": "16777", "BR_author": "alalek", "BRopenT": "2020-03-10T23:20:18Z", "BRcloseT": "2020-03-17T12:58:12Z", "BR_text": {"BRsummary": "core: getNumThreads() result is wrong on Win32/Concurrency backend", "BRdescription": "\n getNumThreads() returns nCPUs+1 by default:\n \n 4 cores: getNumThreads() => 5\n 4 cores + HT: getNumThreads() => 9\n \n relates <denchmark-link:https://github.com/opencv/opencv/commit/460644b8a4325558414f1d30ba15138857434875>460644b</denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "alalek", "commentT": "2020-03-11T05:44:33Z", "comment_text": "\n \t\tOpenCV doc for <denchmark-link:https://docs.opencv.org/3.4/db/de0/group__core__utils.html#ga2db334ec41d98da3129ef4a2342fc4d4>getNumThreads:Concurrency</denchmark-link>\n  says \"\"\n Offending code is below: I can't imagine why 1 would be added to whatever's returned by GetNumberOfVirtualProcessors().\n <denchmark-code>#elif defined HAVE_CONCURRENCY\n \n     return 1 + (pplScheduler == 0\n         ? Concurrency::CurrentScheduler::Get()->GetNumberOfVirtualProcessors()\n         : pplScheduler->GetNumberOfVirtualProcessors());\n </denchmark-code>\n \n There's no reason a parallelized implementation should use more than number of vCPUs than system. I can't seem to find anything in the MS Concurrency runtime's documentation that says a task will be more optimal if a scheduler is configured to use 1 plus number of vCPUs. Interesting find.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "alalek", "commentT": "2020-03-11T07:05:45Z", "comment_text": "\n \t\t1 + is from setNumThreads() implementation:\n \n \n \n opencv/modules/core/src/parallel.cpp\n \n \n         Lines 726 to 731\n       in\n       3befdb4\n \n \n \n \n \n \n  else if (pplScheduler == 0 || 1 + pplScheduler->GetNumberOfVirtualProcessors() != (unsigned int)threads) \n \n \n \n  { \n \n \n \n      pplScheduler = Concurrency::Scheduler::Create(Concurrency::SchedulerPolicy(2, \n \n \n \n                     Concurrency::MinConcurrency, threads-1, \n \n \n \n                     Concurrency::MaxConcurrency, threads-1)); \n \n \n \n  } \n \n \n \n \n \n Probably 1 here is for the \"caller\" thread.\n <denchmark-h:hr></denchmark-h>\n \n setNumThreads(2) + getNumThreads() should be checked too.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "alalek", "commentT": "2020-03-12T05:31:43Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/alalek>@alalek</denchmark-link>\n  , thanks for pointing that out. I\n If I have understood correctly, for setNumThreads, then I propose patch below. Not sure what you mean by getNumThreads() should be checked too as the PR contains patch for that.\n diff --git a/modules/core/src/parallel.cpp b/modules/core/src/parallel.cpp\n index af520633ae..f967953643 100644\n --- a/modules/core/src/parallel.cpp\n +++ b/modules/core/src/parallel.cpp\n @@ -701,11 +701,11 @@ void setNumThreads( int threads_ )\n          // Concurrency always uses >=2 threads, so we just disable it if 1 thread is requested\n          numThreads = 0;\n      }\n -    else if (pplScheduler == 0 || 1 + pplScheduler->GetNumberOfVirtualProcessors() != (unsigned int)threads)\n +    else if (pplScheduler == 0 || pplScheduler->GetNumberOfVirtualProcessors() != (unsigned int)threads)\n      {\n          pplScheduler = Concurrency::Scheduler::Create(Concurrency::SchedulerPolicy(2,\n -                       Concurrency::MinConcurrency, threads-1,\n -                       Concurrency::MaxConcurrency, threads-1));\n +                       Concurrency::MinConcurrency, threads,\n +                       Concurrency::MaxConcurrency, threads));\n      }\n \n  #elif defined HAVE_PTHREADS_PF\n \n Quick test with on 4 core system:\n <denchmark-code>    cout << endl << getNumThreads();\n     cv::setNumThreads(3); //scheduler is created\n     cout << endl << cv::getNumThreads(); //scheduler is queried for vCPU count\n </denchmark-code>\n \n returns:\n <denchmark-code>4\n \n 3\n </denchmark-code>\n \n This is good?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "alalek", "commentT": "2020-03-17T12:58:11Z", "comment_text": "\n \t\t\n threads-1\n \n Check actual CPU load and number of active threads.\n threads-1 is correct, because the current thread is attached into thread pool before running job.\n <denchmark-h:hr></denchmark-h>\n \n Fixed by <denchmark-link:https://github.com/opencv/opencv/pull/16779>#16779</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "3b2e409fa7f4d6319242da85b434d9b0ff8d996f", "commit_author": "RAJKIRAN NATARAJAN", "commitT": "2020-03-16 17:12:29+03:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\core\\src\\parallel.cpp", "file_new_name": "modules\\core\\src\\parallel.cpp", "file_complexity": {"file_NLOC": "520", "file_CCN": "166", "file_NToken": "3179"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "621,623", "deleted_lines": "621,623", "method_info": {"method_name": "cv::getNumThreads", "method_params": "void", "method_startline": "575", "method_endline": "634", "method_complexity": {"method_NLOC": "25", "method_CCN": "17", "method_NToken": "123", "method_nesting_level": "1"}}}}}}}}