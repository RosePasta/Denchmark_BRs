{"BR": {"BR_id": "16203", "BR_author": "JamesOldfield", "BRopenT": "2019-12-19T15:36:55Z", "BRcloseT": "2020-01-22T15:53:21Z", "BR_text": {"BRsummary": "imdecode ignores IMREAD_REDUCED_* flags", "BRdescription": "\n Passing any of the IMREAD_REDUCED_ flags, e.g. IMREAD_REDUCED_GRAYSCALE_2, to the flags parameter of imdecode() has no effect. I notice the imread_() function includes this code:\n <denchmark-code>int scale_denom = 1;\n if( flags > IMREAD_LOAD_GDAL )\n {\n if( flags & IMREAD_REDUCED_GRAYSCALE_2 )\n     scale_denom = 2;\n else if( flags & IMREAD_REDUCED_GRAYSCALE_4 )\n     scale_denom = 4;\n else if( flags & IMREAD_REDUCED_GRAYSCALE_8 )\n     scale_denom = 8;\n }\n \n /// set the scale_denom in the driver\n decoder->setScale( scale_denom );\n </denchmark-code>\n \n This code is absent in imdecode() (and imdecode_).\n For those that aren't familiar with that flag: The expected effect is that the image is resized by the stated factor if it is a JPEG. This happens for \"free\" due to the way the JPEG encoding works, so it is much faster than opening the image at full resolution and then doing a separate resize.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "JamesOldfield", "commentT": "2019-12-21T23:53:49Z", "comment_text": "\n \t\tFor me: in Version 3.4.9, Win32, running this:\n <denchmark-code>Mat img1 = imread(\"d:/input.jpg\", IMREAD_REDUCED_GRAYSCALE_8);\n Mat img2 = imread(\"d:/input.jpg\", IMREAD_REDUCED_GRAYSCALE_4);\n Mat img3 = imread(\"d:/input.jpg\", IMREAD_REDUCED_GRAYSCALE_2);\n Mat img4 = imread(\"d:/input.jpg\");\n cout << endl << img1.size;\n cout << endl << img2.size;\n cout << endl << img3.size;\n cout << endl << img4.size;\n </denchmark-code>\n \n produces:\n <denchmark-code>435 x 290\n 869 x 579\n 1737 x 1157\n 3474 x 2314\n </denchmark-code>\n \n Are you using a Jpeg2k file by any chance? I don't sense OpenCV handles rescaling in that format, at least I don't see it handled in grfmt_jpeg2000.cpp.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "JamesOldfield", "commentT": "2019-12-24T11:42:09Z", "comment_text": "\n \t\tI believe this report is about imdecode() call (not imread()).\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "JamesOldfield", "commentT": "2019-12-24T15:21:26Z", "comment_text": "\n \t\tlet me work on this ( i am the person who add IMREAD_REDUCED_* flags)\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "JamesOldfield", "commentT": "2020-01-08T07:05:29Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/sturkmen72>@sturkmen72</denchmark-link>\n  / <denchmark-link:https://github.com/alalek>@alalek</denchmark-link>\n , I'm new to opencv, can I look into this? I think if we add the flag checks in this <denchmark-link:https://github.com/opencv/opencv/blob/3fb6617d62abc104c60f521316aeb50eec18cde7/modules/imgcodecs/src/loadsave.cpp#L740>line</denchmark-link>\n , issue will be solved.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "JamesOldfield", "commentT": "2020-01-08T07:26:24Z", "comment_text": "\n \t\tsee my initial work <denchmark-link:https://github.com/sturkmen72/opencv/commit/fbc0fcddcd0b67d7aa046f5ecc3415f514fceb49>sturkmen72@fbc0fcd</denchmark-link>\n  i did not test it well and need resize except jpeg format\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "JamesOldfield", "commentT": "2020-01-08T07:58:38Z", "comment_text": "\n \t\tHi, <denchmark-link:https://github.com/sturkmen72>@sturkmen72</denchmark-link>\n  thanks for the response, can I build on this? Or you'll only commit to this issue?\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "JamesOldfield", "commentT": "2020-01-08T13:00:55Z", "comment_text": "\n \t\tfeel free to create a PR i am a bit busy these days\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "JamesOldfield", "commentT": "2020-01-08T15:37:30Z", "comment_text": "\n \t\tThanks, <denchmark-link:https://github.com/sturkmen72>@sturkmen72</denchmark-link>\n , will look into it.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "JamesOldfield", "commentT": "2020-01-10T13:05:56Z", "comment_text": "\n \t\tMany thanks to both of you for providing fixes. I must admit I'm a little surprised that both of are suggesting replacing the sequence of if statements (quoted in my original comment) with:\n <denchmark-code>scale_denom = flags >> 3;\n </denchmark-code>\n \n Although this is certainly shorter, I don't think it's simpler. It's not as obvious that it's correct as the original code was, and it's fragile in the face of enum values changing in future (admittedly unlikely). I think there's a chance it won't work with other flags simultaneously e.g. what happens if the user provides IMREAD_REDUCED_GRAYSCALE_4 | IMREAD_IGNORE_ORIENTATION? It also makes it harder to search - I came across the snippet by searching the codebase for \"IMREAD_REDUCED_GRAYSCALE_2\", which after this change would provide no hits.\n If you want to do a bit of refactoring while fixing this issue, a more productive route would probably be to merge imread_() and imdecode_() into one function. After all, that duplicated code is how this issue arose in the first place. But I'm not an OpenCV contributor so I don't know for sure that would be possible or a good idea.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "JamesOldfield", "commentT": "2020-01-10T14:11:53Z", "comment_text": "\n \t\tSure <denchmark-link:https://github.com/alalek>@alalek</denchmark-link>\n , I'll add them. Also like <denchmark-link:https://github.com/JamesOldfield>@JamesOldfield</denchmark-link>\n  suggested, do I merge the common parts of imread and imdecode?\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "JamesOldfield", "commentT": "2020-01-10T14:17:53Z", "comment_text": "\n \t\t\n do I merge the common parts\n \n Lets solve problems by one and provide small and clear patches. Added duplicated code is not huge for now.\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "JamesOldfield", "commentT": "2020-01-10T15:05:42Z", "comment_text": "\n \t\tSure <denchmark-link:https://github.com/alalek>@alalek</denchmark-link>\n , infact I'll fix imdecode only and write tests for now, raise a new PR for imread. My main concern is that neither imread nor imdecode is taking care of flags like , regarding resize.\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "JamesOldfield", "commentT": "2020-01-10T19:39:20Z", "comment_text": "\n \t\t\n IMREAD_REDUCED_GRAYSCALE_4 | IMREAD_IGNORE_ORIENTATION\n \n <denchmark-link:https://github.com/JamesOldfield>@JamesOldfield</denchmark-link>\n  you are right\n  is wrong\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "JamesOldfield", "commentT": "2020-01-11T00:14:13Z", "comment_text": "\n \t\tYou may use this image for <denchmark-link:https://github.com/opencv/opencv_extra/blob/3.4.9/testdata/cv/imgproc/stuff.jpg>tests</denchmark-link>\n .\n Add tests for existed imread() first (this feature has been landed without any tests...):\n <denchmark-code>String path = findDataFile(\"../cv/imgproc/stuff.jpg\");\n {  // no flags\n     Mat m = imread(path);\n     ASSERT_FALSE(m.empty());\n     EXPECT_EQ(640, m.cols);\n     EXPECT_EQ(480, m.rows);\n }\n {  // reduced x2 flag\n     Mat m = imread(path, IMREAD_REDUCED_GRAYSCALE_2);\n     ASSERT_FALSE(m.empty());\n     EXPECT_EQ(320, m.cols);\n     EXPECT_EQ(240, m.rows);\n }\n ... other flags\n </denchmark-code>\n \n and similar cases for . You may take a look on code for reading file content from <denchmark-link:https://github.com/opencv/opencv/blob/3.4.9/modules/dnn/test/test_common.impl.hpp#L164-L179>here</denchmark-link>\n .\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "JamesOldfield", "commentT": "2020-01-11T04:07:06Z", "comment_text": "\n \t\tThanks <denchmark-link:https://github.com/alalek>@alalek</denchmark-link>\n , will do.\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "JamesOldfield", "commentT": "2020-01-11T08:52:07Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/alalek>@alalek</denchmark-link>\n  / <denchmark-link:https://github.com/sturkmen72>@sturkmen72</denchmark-link>\n  / <denchmark-link:https://github.com/JamesOldfield>@JamesOldfield</denchmark-link>\n , there is a small problem with the enum flags, they cannot be used with  operators, for example:\n  is 17 meaning binary: \n  is 33 meaning binary: \n This means anding them will give true which is wrong. It makes sense for greyscale because they are 16, 32 and 64.\n Here is my proposed solution, please let me know if any changes needed\n <denchmark-code>switch(flags)\n  {\n \t case IMREAD_REDUCED_GRAYSCALE_2:\n \t case IMREAD_REDUCED_COLOR_2:\n \t\t scale_denom = 2;\n \t\t break;\n \t case IMREAD_REDUCED_GRAYSCALE_4:\n \t case IMREAD_REDUCED_COLOR_4:\n \t\t scale_denom = 4;\n \t\t break;\n \t case IMREAD_REDUCED_GRAYSCALE_8:\n \t case IMREAD_REDUCED_COLOR_8:\n \t\t scale_denom = 8;\n \t\t break;\n  }\n </denchmark-code>\n \n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "JamesOldfield", "commentT": "2020-01-11T09:38:38Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ganesh-k13>@ganesh-k13</denchmark-link>\n  why do you think there is a problem on actual code? did you test it. i believe all  flags with  works fine\n \t\t"}, "comments_17": {"comment_id": 18, "comment_author": "JamesOldfield", "commentT": "2020-01-11T09:39:54Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/sturkmen72>@sturkmen72</denchmark-link>\n , IMREAD_REDUCED_COLOR_* is not used anywhere in the code. So this issue did not rise.\n \t\t"}, "comments_18": {"comment_id": 19, "comment_author": "JamesOldfield", "commentT": "2020-01-11T09:44:20Z", "comment_text": "\n \t\ti am not an expert but i think there is a bitwise and \n so no need IMREAD_REDUCED_COLOR_* in the code\n \t\t"}, "comments_19": {"comment_id": 20, "comment_author": "JamesOldfield", "commentT": "2020-01-11T09:47:22Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/sturkmen72>@sturkmen72</denchmark-link>\n , fair point, but if we add some flags in between, it might break something. But yeah, I think if no flags will be added, I'll go ahead with the current method and do the bitwise , let me know which is best.\n \t\t"}, "comments_20": {"comment_id": 21, "comment_author": "JamesOldfield", "commentT": "2020-01-13T09:22:24Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ganesh-k13>@ganesh-k13</denchmark-link>\n  I think you might have misunderstood how  flags are allocated, and the ones related to resizing especially. It is not integer values that are assigned meaning, but instead the individual bits are assigned meaning. So there is no possibility that someone would \"add some flags in between\". Let me show you what bits correspond to what flags, with an example value that I will explain below:\n <denchmark-code>7 6 5 4 3 2 1 0   Bit index\n \n 1 0 1 0 0 0 0 1 = 161, an example value (see below)\n | | | | | | | |\n | | | | | | |  \\\n | | | | | | |   - IMREAD_COLOR\n | | | | | |  \\\n | | | | | |   --- IMREAD_ANYDEPTH\n | | | | |  \\\n | | | | |   ----- IMREAD_ANYCOLOR\n | | | |  \\\n | | | |   ------- IMREAD_LOAD_GDAL\n | | |  \\\n | | |   --------- IMREAD_REDUCED_GRAYSCALE_2\n | |  \\\n | |   ----------- IMREAD_REDUCED_GRAYSCALE_4\n |  \\\n |   ------------- IMREAD_REDUCED_GRAYSCALE_8\n  \\\n   --------------- IMREAD_IGNORE_ORIENTATION\n </denchmark-code>\n \n In the above example value of 161, the flags are set to ignore JPEG orientation, reduce size by factor 4, and return as a color image, because those three flags are set.\n I think you are confused by the fact that there are both IMREAD_REDUCED_GRAYSCALE_2 and IMREAD_REDUCED_COLOR_2 flags (and similarly for other sizes). But only the IMREAD_REDUCED_GRAYSCALE_2 actually defines the bit for size reduction; IMREAD_REDUCED_COLOR_2 is just that flag ORed with IMREAD_COLOR for convenience. For example, the above value could be obtained in these two ways:\n <denchmark-code>int flags1 = cv::IMREAD_COLOR | cv::IMREAD_REDUCED_GRAYSCALE_4 | cv::IMREAD_IGNORE_ORIENTATION); // = 161\n int flags2 = cv::IMREAD_REDUCED_COLOR_4 | cv::IMREAD_IGNORE_ORIENTATION); // = 161\n </denchmark-code>\n \n This explains why the existing code with repeated if statements works and is robust to other flags being set even though it only checks the IMREAD_REDUCED_GRAYSCALE_ flags: because those are the values that actually define the bits for the reduction flags.\n In retrospect maybe it would have been better to simply call those flags IMREAD_REDUCED_2 etc. and document that the user must OR them with IMREAD_GRAY (which is 0) or IMREAD_COLOR depending on what they want. This would also make it clear that you can combine them with IMREAD_ANYCOLOR, which I believe is currently possible but from the flag names you'd be hard pressed to guess that.\n (In retrospect I also think it was a waste to give IMREAD_REDUCED_GRAYSCALE_8 its own bit. It could have just been set to IMREAD_REDUCED_GRAYSCALE_2 | IMREAD_REDUCED_GRAYSCALE_4, given that those flags are otherwise mutally exclusive.)\n \t\t"}, "comments_21": {"comment_id": 22, "comment_author": "JamesOldfield", "commentT": "2020-01-13T09:41:03Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/JamesOldfield>@JamesOldfield</denchmark-link>\n , thanks for the clarification, it is very clear now :)\n \t\t"}, "comments_22": {"comment_id": 23, "comment_author": "JamesOldfield", "commentT": "2020-01-14T08:16:03Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/opencv/opencv/pull/16309>#16309</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "80ade96c8c60c174bf1d61d58a404b883337b3f6", "commit_author": "Ganesh Kathiresan", "commitT": "2020-01-20 14:00:45+03:00", "commit_complexity": {"commit_NLOC": "0.13392857142857142", "commit_CCN": "0.3482142857142857", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "modules\\imgcodecs\\src\\loadsave.cpp", "file_new_name": "modules\\imgcodecs\\src\\loadsave.cpp", "file_complexity": {"file_NLOC": "767", "file_CCN": "202", "file_NToken": "5348"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "426,427,428,429,430,431", "deleted_lines": "426,427,428,429,430,431", "method_info": {"method_name": "cv::imread_", "method_params": "", "method_startline": "397", "method_endline": "525", "method_complexity": {"method_NLOC": "101", "method_CCN": "31", "method_NToken": "658", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "769,770,771,772,773,774,775,776,777,778,779,780,781,782,878,896,897,898,899,900,901,902", "deleted_lines": "864", "method_info": {"method_name": "cv::imdecode_", "method_params": "", "method_startline": "753", "method_endline": "905", "method_complexity": {"method_NLOC": "135", "method_CCN": "35", "method_NToken": "883", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\imgcodecs\\test\\test_precomp.hpp", "file_new_name": "modules\\imgcodecs\\test\\test_precomp.hpp", "file_complexity": {"file_NLOC": "64", "file_CCN": "27", "file_NToken": "362"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71", "deleted_lines": null, "method_info": {"method_name": "cv::PrintTo", "method_params": "val,os", "method_startline": "14", "method_endline": "71", "method_complexity": {"method_NLOC": "58", "method_CCN": "27", "method_NToken": "349", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "modules\\imgcodecs\\test\\test_read_write.cpp", "file_new_name": "modules\\imgcodecs\\test\\test_read_write.cpp", "file_complexity": {"file_NLOC": "166", "file_CCN": "7", "file_NToken": "1443"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51", "deleted_lines": null, "method_info": {"method_name": "opencv_test::TEST_P", "method_params": "Imgcodecs_Resize,imread_reduce_flags", "method_startline": "35", "method_endline": "51", "method_complexity": {"method_NLOC": "15", "method_CCN": "1", "method_NToken": "150", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84", "deleted_lines": null, "method_info": {"method_name": "opencv_test::TEST_P", "method_params": "Imgcodecs_Resize,imdecode_reduce_flags", "method_startline": "55", "method_endline": "84", "method_complexity": {"method_NLOC": "24", "method_CCN": "1", "method_NToken": "275", "method_nesting_level": "2"}}}}}}}}