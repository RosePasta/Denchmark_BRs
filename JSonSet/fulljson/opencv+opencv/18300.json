{"BR": {"BR_id": "18300", "BR_author": "sl-sergei", "BRopenT": "2020-09-09T08:09:01Z", "BRcloseT": "2020-09-17T13:29:21Z", "BR_text": {"BRsummary": "Problem with loading ONNX networks with Resize layer", "BRdescription": "\n <denchmark-h:h5>System information (version)</denchmark-h>\n \n \n OpenCV => 4.4.0-dev or 3.4.11-pre\n Operating System / Platform => Ubuntu 18.04\n Compiler => gcc 7.5.0\n \n <denchmark-h:h5>Detailed description</denchmark-h>\n \n OpenCV has the following problem with loading networks with Resize layer:\n cv2.error: OpenCV(3.4.11-pre) /home/ssl/Documents/projects/OpenCV/opencv/modules/dnn/src/onnx/onnx_importer.cpp:1424: error: (-2:Unspecified error) in function 'void cv::dnn::experimental_dnn_34_v18::ONNXImporter::populateNet(cv::dnn::experimental_dnn_34_v18::Net)'\n \n (expected: 'shapes.depth() == CV_32S'), where\n 'shapes.depth()' is 5 (CV_32FC1)\n must be equal to\n 'CV_32S' is 4 (CV_32SC1)\n \n It prevents OpenCV from loading various networks from Segmentation Models Pytorch (<denchmark-link:https://github.com/qubvel/segmentation_models.pytorch>https://github.com/qubvel/segmentation_models.pytorch</denchmark-link>\n ) or Human Segmentation Pytorch (<denchmark-link:https://github.com/thuyngch/Human-Segmentation-PyTorch>https://github.com/thuyngch/Human-Segmentation-PyTorch</denchmark-link>\n )\n <denchmark-h:h5>Steps to reproduce</denchmark-h>\n \n reproducer_resize.py\n <denchmark-code>import cv2\n import torch\n import torch.nn as nn\n import torch.nn.functional as F\n \n \n class Conv2dReLU(nn.Sequential):\n     def __init__(\n             self,\n             in_channels,\n             out_channels,\n             kernel_size,\n             padding=0,\n             stride=1,\n             use_batchnorm=True,\n     ):\n \n         conv = nn.Conv2d(\n             in_channels,\n             out_channels,\n             kernel_size,\n             stride=stride,\n             padding=padding,\n             bias=not (use_batchnorm),\n         )\n         relu = nn.ReLU(inplace=True)\n \n         if use_batchnorm and use_batchnorm != \"inplace\":\n             bn = nn.BatchNorm2d(out_channels)\n \n         else:\n             bn = nn.Identity()\n \n         super(Conv2dReLU, self).__init__(conv, bn, relu)\n \n class Attention(nn.Module):\n \n     def __init__(self, name, **params):\n         super().__init__()\n \n         if name is None:\n             self.attention = nn.Identity(**params)\n         else:\n             raise ValueError(\"Attention {} is not implemented\".format(name))\n \n     def forward(self, x):\n         return self.attention(x)\n \n class DecoderBlock(nn.Module):\n     def __init__(\n             self,\n             in_channels,\n             skip_channels,\n             out_channels,\n             use_batchnorm=True,\n             attention_type=None,\n     ):\n         super().__init__()\n         self.conv1 = Conv2dReLU(\n             in_channels + skip_channels,\n             out_channels,\n             kernel_size=3,\n             padding=1,\n             use_batchnorm=use_batchnorm,\n         )\n         self.conv2 = Conv2dReLU(\n             out_channels,\n             out_channels,\n             kernel_size=3,\n             padding=1,\n             use_batchnorm=use_batchnorm,\n         )\n \n     def forward(self, x, skip=None):\n         x = F.interpolate(x, scale_factor=2, mode=\"nearest\")\n         if skip is not None:\n             x = torch.cat([x, skip], dim=1)\n         x = self.conv1(x)\n         x = self.conv2(x)\n         return x\n \n model = DecoderBlock(2, 0, 2)\n x = torch.rand(1, 2, 10, 10)\n model.eval()\n print(cv2.__version__)\n torch.onnx.export(model, x, \"resize.onnx\", opset_version=11)\n opencv_net = cv2.dnn.readNetFromONNX(\"resize.onnx\")\n </denchmark-code>\n \n <denchmark-h:h5>Issue submission checklist</denchmark-h>\n \n \n  I report the issue, it's not a question\n \n \n  I checked the problem with documentation, FAQ, open issues,\n answers.opencv.org, Stack Overflow, etc and have not found solution\n \n \n  I updated to latest OpenCV version and the issue is still there\n \n \n  There is reproducer code and related data files: videos, images, onnx, etc\n \n \n \n \t"}, "comments": {}}, "commit": {"commit_id": "fa953e4205327224a1124be10b90d497d7cfa32f", "commit_author": "Sergei Slashchinin", "commitT": "2020-09-17 11:05:22+00:00", "commit_complexity": {"commit_NLOC": "0.6666666666666666", "commit_CCN": "0.6666666666666666", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\dnn\\src\\onnx\\onnx_importer.cpp", "file_new_name": "modules\\dnn\\src\\onnx\\onnx_importer.cpp", "file_complexity": {"file_NLOC": "1516", "file_CCN": "302", "file_NToken": "13224"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1591,1592,1593", "deleted_lines": "1591", "method_info": {"method_name": "cv::dnn::ONNXImporter::populateNet", "method_params": "dstNet", "method_startline": "312", "method_endline": "1689", "method_complexity": {"method_NLOC": "1231", "method_CCN": "242", "method_NToken": "10932", "method_nesting_level": "2"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\dnn\\test\\test_onnx_importer.cpp", "file_new_name": "modules\\dnn\\test\\test_onnx_importer.cpp", "file_complexity": {"file_NLOC": "782", "file_CCN": "283", "file_NToken": "4954"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "639,640,641,642", "deleted_lines": null, "method_info": {"method_name": "opencv_test::TEST_P", "method_params": "Test_ONNX_layers,ResizeOpset11_Torch1_6", "method_startline": "639", "method_endline": "642", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "13", "method_nesting_level": "2"}}}}}}}}