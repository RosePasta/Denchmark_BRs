{"BR": {"BR_id": "5710", "BR_author": "ajbernal", "BRopenT": "2015-11-24T20:34:55Z", "BRcloseT": "2015-12-09T10:29:19Z", "BR_text": {"BRsummary": "OpenCL HOG Object detect assigns the wrong SIMD size.", "BRdescription": "\n In the classification of descriptor histograms function each kernel variation depends on preprocessor directives to specify the kernel SIMDness. The value is passed to the kernel as a compilation a flag named WAVE_SIZE. The value of WAVE_SIZE is then calculated by compiling each kernel twice.\n The first time assumes no SIMD size to build the kernel and then it calls  getWorkGroupInfo(CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE) to to find it.\n The second time it  passes the previous SIMD size (WAVE_SIZE) as a compilation flag but know the kernel has changed and it's possible that the compiler will choose a different SIMD size for the new kernel that contradicts the previous value.\n Since the SIMD preferred size depends upon vendor implementation, we can't guarantee that the SIMDness would remain constant if the kernel changes.\n This issue happens on the following kernels:\n \n classify_hists_180_kernel\n classify_hists_252_kernel\n classify_hists_kernel\n normalize_hists_kernel -> reduce_smem\n \n Called from the following functions:\n \n ocl_classify_hists\n ocl_normalize_hists\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ajbernal", "commentT": "2015-11-24T22:03:48Z", "comment_text": "\n \t\tHi,\n \n Similar 2-step compilation have been used as a workaround for OpenCL compilers/runtime, which are unable to run compiled kernels or run code very inefficiently due some GPU resource limitation (VGPR and others): these kernels is large enough and there are many variables. So this 2 step strategy is used to get more effective code which can be launched:\n a) build kernel#1 with default parameters.\n b) ask optimal parameters for kernel#1 and apply these parameters to kernel#2.\n It is a trick, but it works.\n An another (but similar) approach have been added for filtering code ( 2.4 branch - there were issue with successfully compiled kernels which were unable to run with required workgroup size)\n \n \n we can't guarantee that the SIMDness would remain constant if the kernel changes.\n \n I agree here, but I don't know other better solutions at this moment (without a large performance impact, like to check all range of possible WAVE_SIZE values and SIMDness in all cases and to select \"the best\" value).\n \n Do you have a suggestion with fix something here? Does this workaround not work somewhere on some cases?\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ajbernal", "commentT": "2015-11-24T23:00:11Z", "comment_text": "\n \t\tMy thoughts, here:\n \n I'm not against compiling the kernel twice and I think that it will definitely help dealing with different platforms/vendors. But I haven't really thought about a general solution.\n The solution for this specific case is pretty simple. In order to guarantee SIMDness we should compile the kernel with SIMD32 since it's the highest size optimized in the kernel without the use of barriers.\n \n If the  compiler then decides to build the first kernel using SIMD16 and we pass that value to the next build, we're safe because there's a barrier that guarantees the execution order between different hardware threads (even if it decides to build the second kernel using SIMD32).\n If the compiler builds the first kernel using SIMD32 the second will use SIMD32 as well, so no issues here.\n \n \n \n I have a fix in place and I can submit a pull request to address this specific case but we may want to check if we're doing the same somewhere else.\n \t\t"}}}, "commit": {"commit_id": "5c8683139fdfa9d4cd8dde05fa62e214139c4916", "commit_author": "Ariel Bernal", "commitT": "2015-11-25 16:20:04-08:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "modules\\objdetect\\src\\hog.cpp", "file_new_name": "modules\\objdetect\\src\\hog.cpp", "file_complexity": {"file_NLOC": "3136", "file_CCN": "308", "file_NToken": "44636"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1227", "deleted_lines": "1227", "method_info": {"method_name": "cv::ocl_normalize_hists", "method_params": "nbins,block_stride_x,block_stride_y,height,width,block_hists,threshold", "method_startline": "1190", "method_endline": "1255", "method_complexity": {"method_NLOC": "60", "method_CCN": "10", "method_NToken": "487", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "1654,1670,1686", "deleted_lines": "1654,1670,1686", "method_info": {"method_name": "cv::ocl_classify_hists", "method_params": "win_height,win_width,block_stride_y,block_stride_x,win_stride_y,win_stride_x,height,width,block_hists,detector,free_coef,threshold,labels,descr_size,block_hist_size", "method_startline": "1639", "method_endline": "1722", "method_complexity": {"method_NLOC": "77", "method_CCN": "12", "method_NToken": "665", "method_nesting_level": "1"}}}}}}}}