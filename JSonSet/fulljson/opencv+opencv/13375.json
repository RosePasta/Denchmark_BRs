{"BR": {"BR_id": "13375", "BR_author": "Daniel-Alievsky", "BRopenT": "2018-12-05T21:44:32Z", "BRcloseT": "2018-12-18T20:48:00Z", "BR_text": {"BRsummary": "Sobel() and Scharr() do not work correctly with UMat when delta != 0", "BRdescription": "\n Hello! I detected a little problem while using UMat version of Sobel and Scarr filters. It seems that they ignore \"delta\" argument.\n I detected this in Java test, based on Javacpp, but it seems that it is a problem of OpenCV C++ code, not a bug of Javacpp bridge (see <denchmark-link:https://github.com/bytedeco/javacpp-presets/issues/645>bytedeco/javacpp-presets#645</denchmark-link>\n  )\n The Java test is very simple:\n <denchmark-code>public class UMatSobelBug {\n     public static void main(String[] args) {\n         opencv_core.setUseOpenCL(true);\n         if (args.length < 3) {\n             System.out.printf(\"Usage: %s source_image target_mat target_umat%n\", UMatSobelBug.class);\n             return;\n         }\n         final String sourceFile = args[0];\n         final String targetMat = args[1];\n         final String targetUMat = args[2];\n         final opencv_core.Mat source = opencv_imgcodecs.imread(sourceFile);\n         opencv_imgproc.GaussianBlur(source, source, new opencv_core.Size(55, 55), 0.0);\n \n         opencv_core.Mat mat = new opencv_core.Mat();\n         opencv_imgproc.Sobel(source, mat, opencv_core.CV_8U,\n                 1, 1, 3, 10.0, 128, opencv_core.BORDER_DEFAULT);\n         opencv_imgcodecs.imwrite(targetMat, mat);\n \n         opencv_core.UMat uMat = new opencv_core.UMat();\n         opencv_imgproc.Sobel(source.getUMat(opencv_core.ACCESS_RW), uMat, opencv_core.CV_8U,\n                 1, 1, 3, 10.0, 128, opencv_core.BORDER_DEFAULT);\n         opencv_imgcodecs.imwrite(targetUMat, uMat);\n     }\n }\n </denchmark-code>\n \n Please run it (or equivalent C++ test) for any simple RGB image (I tried with some JPEG photo).\n Mat version works correctly: the results are near delta=128 - gray picture.\n UMat version just ignores delta, as if it delta=0 - almost black picture.\n And the same problem will be with non-zero \"delta\" argument for Scharr function, for example, if I'll use the calls\n <denchmark-code>        opencv_imgproc.Scharr(source, mat, opencv_core.CV_8U,\n                 1, 0, 1.0, 128, opencv_core.BORDER_DEFAULT);\n ...\n         opencv_imgproc.Scharr(source.getUMat(opencv_core.ACCESS_RW), uMat, opencv_core.CV_8U,\n                 1, 0, 1.0, 128, opencv_core.BORDER_DEFAULT);\n \n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "Daniel-Alievsky", "commentT": "2018-12-17T02:49:01Z", "comment_text": "\n \t\tIt looks like for  and  functions,  value has been hardcoded to  (but only for 2D case- <denchmark-link:https://github.com/opencv/opencv/blob/3.4/modules/imgproc/src/deriv.cpp#L443>reference</denchmark-link>\n )\n CV_OCL_RUN(ocl::isOpenCLActivated() && _dst.isUMat() && _src.dims() <= 2 && (size_t)_src.rows() > kx.total() && (size_t)_src.cols() > kx.total(),ocl_sepFilter2D(_src, _dst, ddepth, kx, ky, Point(-1, -1), 0, borderType))\n Notice the argument just before  which is 0, is the argument for  in  (<denchmark-link:https://github.com/opencv/opencv/blob/master/modules/imgproc/src/filter.cpp#L4925>reference</denchmark-link>\n ).\n Is this the issue?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "Daniel-Alievsky", "commentT": "2018-12-17T09:11:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/vishwesh5>@vishwesh5</denchmark-link>\n  Right! Please create PR for 3.4 branch with replacing  ->  in deriv.cpp\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "Daniel-Alievsky", "commentT": "2018-12-17T10:03:52Z", "comment_text": "\n \t\tSure!\n <denchmark-link:#>\u2026</denchmark-link>\n \n \n On Mon 17 Dec, 2018, 2:42 PM Alexander Alekhin ***@***.*** wrote:\n  @vishwesh5 <https://github.com/vishwesh5> Right! Please create PR for 3.4\n  branch with replacing 0 -> delta in deriv.cpp\n \n  \u2014\n  You are receiving this because you were mentioned.\n  Reply to this email directly, view it on GitHub\n  <#13375 (comment)>,\n  or mute the thread\n  <https://github.com/notifications/unsubscribe-auth/ALkvCgyoYgVjo5ndCmfs8F8tjRqTD20pks5u51_-gaJpZM4ZFMAU>\n  .\n \n \n \n \t\t"}}}, "commit": {"commit_id": "3eb2c940ded61858b037ffd25d0eaa96a448fbc4", "commit_author": "vishwesh5", "commitT": "2018-12-17 20:27:22+05:18", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "modules\\imgproc\\src\\deriv.cpp", "file_new_name": "modules\\imgproc\\src\\deriv.cpp", "file_complexity": {"file_NLOC": "672", "file_CCN": "213", "file_NToken": "6919"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "444", "deleted_lines": "444", "method_info": {"method_name": "cv::Sobel", "method_params": "_src,_dst,ddepth,dx,dy,ksize,scale,delta,borderType", "method_startline": "414", "method_endline": "463", "method_complexity": {"method_NLOC": "37", "method_CCN": "14", "method_NToken": "520", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "497", "deleted_lines": "497", "method_info": {"method_name": "cv::Scharr", "method_params": "_src,_dst,ddepth,dx,dy,scale,delta,borderType", "method_startline": "466", "method_endline": "513", "method_complexity": {"method_NLOC": "36", "method_CCN": "13", "method_NToken": "486", "method_nesting_level": "0"}}}}}}}}