{"BR": {"BR_id": "1051", "BR_author": "JanX2", "BRopenT": "2017-12-01T12:26:16Z", "BRcloseT": "2017-12-05T13:18:39Z", "BR_text": {"BRsummary": "macOS fix deps path and id name for C++ binary", "BRdescription": "\n On macOS 10.12.6, I tried to follow \u201c<denchmark-link:https://github.com/mozilla/DeepSpeech#using-the-command-line-client>Using the command-line client</denchmark-link>\n \u201d and the <denchmark-link:https://github.com/mozilla/DeepSpeech/blob/master/native_client/README.md>native client README</denchmark-link>\n . I had a couple of issues getting the pre-build binaries to work. The following notes are what I did about them.\n Initial Python dependencies\n <denchmark-code>pip install six\n </denchmark-code>\n \n Download via\n <denchmark-code>python util/taskcluster.py --arch osx --target .\n </denchmark-code>\n \n The native_client requires AVX2. It will crash with an \u201cIllegal Instruction: 4\u201d error otherwise.\n Check your CPU capabilities:\n <denchmark-code>sysctl -a | grep machdep.cpu.features\n sysctl -a | grep machdep.cpu.leaf7_features\n </denchmark-code>\n \n The latter should contain \u201cAVX2\u201d.\n <denchmark-code>cd native_client\n </denchmark-code>\n \n All dependencies that are not supplied by the system are still hard-wired to the build system\u2019s paths.\n This is how to check the dependencies of a binary:\n <denchmark-code>otool -L *binary_path*\n </denchmark-code>\n \n This is how to fix/patch the binaries and complete the set of required dependencies:\n <denchmark-code>install_name_tool -change /Users/build-user/TaskCluster/LightTasks/1/tasks/task_1511961329/homebrew/opt/sox/lib/libsox.3.dylib @executable_path/libsox.3.dylib ./deepspeech\n install_name_tool -change bazel-out/local-opt/bin/native_client/libdeepspeech.so @executable_path/libdeepspeech.so ./deepspeech\n install_name_tool -change bazel-out/local-opt/bin/native_client/libdeepspeech_utils.so @executable_path/libdeepspeech_utils.so ./deepspeech\n install_name_tool -change bazel-out/local-opt/bin/tensorflow/libtensorflow_cc.so @executable_path/libtensorflow_cc.so ./deepspeech\n \n install_name_tool -id @executable_path/libdeepspeech.so libdeepspeech.so\n install_name_tool -id @executable_path/libctc_decoder_with_kenlm.so libctc_decoder_with_kenlm.so\n install_name_tool -id @executable_path/libdeepspeech_utils.so libdeepspeech_utils.so\n install_name_tool -id @executable_path/libtensorflow_cc.so libtensorflow_cc.so\n \n brew install libpng\n brew install libmad\n brew install sox\n \n cp -pLR  /usr/local/opt/libpng/lib/libpng16.16.dylib ./\n cp -pLR  /usr/local/opt/mad/lib/libmad.0.dylib ./\n \n sudo install_name_tool -id @executable_path/libpng16.16.dylib libpng16.16.dylib\n sudo install_name_tool -id @executable_path/libmad.0.dylib libmad.0.dylib\n \n cp -pLR /usr/local/Cellar/sox/14.4.2/lib/libsox.3.dylib ./\n sudo install_name_tool -id @executable_path/libsox.3.dylib libsox.3.dylib\n install_name_tool -change /usr/local/opt/mad/lib/libmad.0.dylib @executable_path/libmad.0.dylib libsox.3.dylib\n </denchmark-code>\n \n The following assumes this directory list within the DeepSpeech root:\n native_client\n smoke_test\n models\n Finally we can test the native_client.\n <denchmark-code>./deepspeech ../models/output_graph.pb ../smoke_test/LDC93S1.wav ../models/alphabet.txt ../models/lm.binary ../models/trie \n </denchmark-code>\n \n The release process should be amended to check for non-system provided dependencies and fix them like above.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "JanX2", "commentT": "2017-12-01T12:31:24Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/JanX2>@JanX2</denchmark-link>\n  Thanks! We would be happy to review a PR for that. There is something that I am puzzled about, because we should already have something working properly:  should be already set to pick the proper ,  and .\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "JanX2", "commentT": "2017-12-01T12:37:46Z", "comment_text": "\n \t\tThat is really odd <denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n ! The  I got yesterday has the broken paths as per above. I just rechecked.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "JanX2", "commentT": "2017-12-01T12:38:24Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/JanX2>@JanX2</denchmark-link>\n  I just tested with a build from TC (we merged tensorflow-r1.4 this morning), and indeed, seems like we have wrong path for   (and sox), but other deps are good.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "JanX2", "commentT": "2017-12-01T12:39:30Z", "comment_text": "\n \t\t<denchmark-code>$ otool -L deepspeech \n deepspeech:\n \tbazel-out/local-opt/bin/native_client/libdeepspeech.so (compatibility version 0.0.0, current version 0.0.0)\n \tbazel-out/local-opt/bin/native_client/libdeepspeech_utils.so (compatibility version 0.0.0, current version 0.0.0)\n \t@rpath/libtensorflow_cc.so (compatibility version 0.0.0, current version 0.0.0)\n \t@rpath/libtensorflow_framework.so (compatibility version 0.0.0, current version 0.0.0)\n \t/Users/build-user/TaskCluster/LightTasks/1/tasks/task_1512084443/homebrew/opt/sox/lib/libsox.3.dylib (compatibility version 4.0.0, current version 4.0.0)\n \t/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 307.5.0)\n \t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.60.2)\n </denchmark-code>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "JanX2", "commentT": "2017-12-01T12:44:17Z", "comment_text": "\n \t\tYes <denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n . That can\u2019t work. I get the same.\n <denchmark-code>dyld: Library not loaded: bazel-out/local-opt/bin/native_client/libdeepspeech.so\n   Referenced from: \u2026/native_client-2/./deepspeech\n   Reason: image not found\n Abort trap: 6\n </denchmark-code>\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "JanX2", "commentT": "2017-12-01T12:45:24Z", "comment_text": "\n \t\tSo, <denchmark-link:https://github.com/JanX2>@JanX2</denchmark-link>\n  don't hesitate to send a PR, I think we should not bundle  and its friends, though, that should be relying on the user's system (and we document that kind of dependencies), and thanks for testing and documenting that :)\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "JanX2", "commentT": "2017-12-01T12:47:00Z", "comment_text": "\n \t\tI agree <denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n . Not bundling sox is fine.\n But paths on the build machine like bazel-out/local-opt/bin/native_client/libdeepspeech.so will not work anywhere else.\n Thank you for responding so quickly by the way!\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "JanX2", "commentT": "2017-12-01T13:18:51Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/JanX2>@JanX2</denchmark-link>\n  True, except I'm far from being used to the OSX linker, and its documentation is not as good as I would hope for quickly discovering, so I don't really know which magic path should be used :), so if you do, I'd really like to see a PR. If not, then I'll work on that, but later :)\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "JanX2", "commentT": "2017-12-01T14:28:15Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  I don\u2019t know about a \u201cmagic path\u201d, but my use of  should fix the paths to be system setup agnostic as long as the dependencies are in the same folder. :)\n I don\u2019t have a clue about the build system this project is using for the native client, but there ought to be a way to integrate the above. If all else fails, the commands I have describe above are a solution of last resort.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "JanX2", "commentT": "2017-12-01T14:29:33Z", "comment_text": "\n \t\tMagic path in my mind are stuff like @executable_path. Besides, it should just be fixed within native_client/Makefile and maybe native_client/definitions.mk, nothing fancy.\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "JanX2", "commentT": "2017-12-01T17:58:27Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  Ah. I get it. :)\n  is a placeholder that will be replaced by the dynamic linker AFAIK. <denchmark-link:https://en.wikipedia.org/wiki/Clarke%27s_three_laws>Any sufficiently advanced technology is indistinguishable from magic.</denchmark-link>\n \n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "JanX2", "commentT": "2017-12-04T09:42:08Z", "comment_text": "\n \t\tSure, but should we really use @executable_path for libs like sox? For tensorflow and others we do package, that seems right, but for others deps, I'm not so sure :[\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "JanX2", "commentT": "2017-12-04T12:32:36Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  I\u2019m pretty sure all the binaries should be using  though it\u2019s a must for libsox.\n I just added that in my OP, but I am talking solely about the pre-build binaries here.\n Additionally, the .so extension is not used for dynamic libraries on macOS. It\u2019s supposed to be .dylib as it already is for libsox.\n Off the top of my hat, I blame the build system. I don\u2019t know it at all so, to me, the white spots on my map are automatically the culprit. ;)\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "JanX2", "commentT": "2017-12-04T15:34:55Z", "comment_text": "\n \t\tI have just tried to build Deep Speech from source. This appears to instruct the build system to build the binaries:\n bazel build -c opt --copt=-O3 //tensorflow:libtensorflow_cc.so //tensorflow:libtensorflow_framework.so //native_client:deepspeech //native_client:deepspeech_utils //native_client:libctc_decoder_with_kenlm.so //native_client:generate_trie \n This references the .so names directly. bagel should either name them .dylib files on macOS irregardless of the names for targets (that\u2019s what they appear to be to me) or the targets need to be differently named on macOS if the target name and file name are hard-wired together.\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "JanX2", "commentT": "2017-12-04T15:47:25Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/JanX2>@JanX2</denchmark-link>\n  That's the part for TensorFlow, we don't really have a control on that.\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "JanX2", "commentT": "2017-12-04T15:53:28Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  Ok. Then I would recommend to do some post-processing similar to what I have done in my original post here. Rename the binaries and patch the paths used by the dynamic linker.\n I have also tried to build the binaries from source. Stuck now:\n <denchmark-link:https://discourse.mozilla.org/t/build-deep-speech-from-source-macos-10-12-6/22997>https://discourse.mozilla.org/t/build-deep-speech-from-source-macos-10-12-6/22997</denchmark-link>\n \n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "JanX2", "commentT": "2017-12-04T15:54:53Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/JanX2>@JanX2</denchmark-link>\n  I have to admit I don't really see how big of a deal it is that the shared object is named  instead of . I'm more concerned by the linkage issues, but those are easy to fix: it's in  and  :)\n \t\t"}, "comments_17": {"comment_id": 18, "comment_author": "JanX2", "commentT": "2017-12-04T17:53:35Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  The reason is that I want to build a macOS  containing everything and I don\u2019t want any confusion in my toolchain when I get there.\n I finally managed to build Deep Speech from source. The last holdup was that make deepspeech couldn\u2019t find lib sox, because PKG_CONFIG_PATH wasn\u2019t set for some reason. libsox and friends were installed using brew install sox. This fixed the PKG_CONFIG_PATH issue:\n export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib\n Fixing the linker paths may be as simple as copying/renaming the .so files into native_client and changing the following line from definitions.mk for macOS targets:\n LDFLAGS += -Wl,-rpath,. -L${TFDIR}/bazel-bin/tensorflow -L${TFDIR}/bazel-bin/native_client $(EXTRA_LDFLAGS) $(LIBS)\n I have never written a file for that build system. Do you know how to copy the dynamic library .so files. Maybe even rename them in the process?\n Then end result would be a directory will all necessary binaries that is moveable and largely independent of the way the system is set up.\n \t\t"}, "comments_18": {"comment_id": 19, "comment_author": "JanX2", "commentT": "2017-12-04T18:03:37Z", "comment_text": "\n \t\tThanks! I'm really puzzled how I can help: what you call \"that build system\" is just standard makefile, like on any simple Unix system. So you can just modify it and say add a target deepspeech.framework that would copy around files for your use case.\n Regarding LDFLAGS line, is this really the way it is supposed to work on OSX, to copy around the .so? IMHO we should just add OSX-specific steps in the native_client/Makefile definition of the deepspeech target that calls install_name_tool to fix the dependencies, right?\n \t\t"}, "comments_19": {"comment_id": 20, "comment_author": "JanX2", "commentT": "2017-12-04T18:47:10Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  I mostly use Xcode as my IDE and rarely have to touch any text-based part of the build infrastructure it uses. It can call on make as an external build system, but that usually makes things harder when you want to debug something.\n As of my last test, the binary distribution for Deep Speech had all the dependencies apart from libsox shipping with it, but they had paths to those dependencies would only work on the original build machine. That\u2019s what I want to fix. The binary distribution should work OOTB. Without having to resort to shipping that Users folder. It\u2019s huge and pretty messy.\n And no, moving dynamic libraries around to get a working build product is not the usual way. At least you don\u2019t do it manually. Xcode usually does this for you to bundle everything together for packaging or distribution. Just have a look an app on macOS. It\u2019s actually a directory called a \u201cpackage\u201d you can open via the contextual menu in the Finder. Having all non-system-provided dependencies in there bundled up makes things relatively neat.\n I believe you were right before when you suggested using @rpath, but I didn\u2019t want to pile on even more dynamic linker magic (I seems just to result in the search of a list of paths) that might break. For our scenario here, @executable_path will work fine.\n For my framework things might get a bit more complicated, because it might be bundled within another framework and @executable_path will not be the same there as it\u2019s relative to the executable, not the framework binary.\n \t\t"}, "comments_20": {"comment_id": 21, "comment_author": "JanX2", "commentT": "2017-12-04T18:56:33Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/JanX2>@JanX2</denchmark-link>\n  You are mixing things together, and this is getting confusing now: I was referring to \"moving dynamic libraries\" when you mentionned the , I'm not even thinking about packaging yet. I still don't understand what you suggest there: copy the  into  and change  to use a different path for linkage?\n I think @rpath is safer for your framework things, however. So, I insist, it should just be a matter of fixing the deps in native_client/Makefile after building the binaries and linking with proper @rpath values. If you don't know how to hack Makefile, it's okay, I'll take care of it, but your first post suggested you had the knowledge :)\n \t\t"}, "comments_21": {"comment_id": 22, "comment_author": "JanX2", "commentT": "2017-12-04T19:00:51Z", "comment_text": "\n \t\tSo mostly:\n <denchmark-code>install_name_tool -change /Users/build-user/TaskCluster/LightTasks/X/tasks/task_Y/homebrew/opt/sox/lib/libsox.3.dylib @executable_path/libsox.3.dylib ./deepspeech\n install_name_tool -change bazel-out/local-opt/bin/native_client/libdeepspeech.so @executable_path/libdeepspeech.so ./deepspeech\n install_name_tool -change bazel-out/local-opt/bin/native_client/libdeepspeech_utils.so @executable_path/libdeepspeech_utils.so ./deepspeech\n </denchmark-code>\n \n \t\t"}, "comments_22": {"comment_id": 23, "comment_author": "JanX2", "commentT": "2017-12-04T19:10:43Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  I find time and time again that I have no idea what I\u2019m doing. :)\n Your suggestion would assume that the .so files are all next to the deepspeech binary:\n install_name_tool -change bazel-out/local-opt/bin/native_client/libdeepspeech.so @executable_path/libdeepspeech.so ./deepspeech install_name_tool -change bazel-out/local-opt/bin/native_client/libdeepspeech_utils.so @executable_path/libdeepspeech_utils.so ./deepspeech \n The other line as well, but with the complication that the user has to provide libsox and we don\u2019t know where it is. We can ask for it to be in a specific place. Like in /opt/sox/lib/libsox.3.dylibor next to the deepspeech binary:\n install_name_tool -change /Users/build-user/TaskCluster/LightTasks/X/tasks/task_Y/homebrew/opt/sox/lib/libsox.3.dylib @executable_path/libsox.3.dylib ./deepspeech \n My approach was the latter so I could move the set of binaries around. Even to another machine, if necessary.\n \t\t"}, "comments_23": {"comment_id": 24, "comment_author": "JanX2", "commentT": "2017-12-04T19:17:17Z", "comment_text": "\n \t\tNow, we are on good grounds. It is supposed that deepspeech binary once distributed is bundled with the libraries, so the assumption holds. And I second you on the sox dependency ; I think we should just rely on the linker's to find it. I don't know if we need to fix the .so reference with install_name_tool.\n \t\t"}, "comments_24": {"comment_id": 25, "comment_author": "JanX2", "commentT": "2017-12-04T19:22:15Z", "comment_text": "\n \t\tWe don\u2019t need to fix the .so reference, but it would be good form to.\n Additionally, the dependencies may have broken paths as per my example in the OP.\n \t\t"}, "comments_25": {"comment_id": 26, "comment_author": "JanX2", "commentT": "2017-12-04T19:24:00Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/JanX2>@JanX2</denchmark-link>\n   reference is a dependency in my mind.\n \t\t"}, "comments_26": {"comment_id": 27, "comment_author": "JanX2", "commentT": "2017-12-04T19:26:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  Sorry for the misunderstanding. I read \u201c reference\u201d as changing the file names to . Not fixing the paths. But you meant the latter. Fixing the paths isn\u2019t optional unless we want a pre-build binary that doesn\u2019t work OOTB. ;)\n \n Additionally, the dependencies may have broken paths as per my example in the OP.\n \n What I meant there was that the dependencies may/do have broken paths to their dependencies and so on recursively.\n \t\t"}, "comments_27": {"comment_id": 28, "comment_author": "JanX2", "commentT": "2017-12-04T19:28:37Z", "comment_text": "\n \t\tYet,\n <denchmark-code>$ otool -L deepspeech \n deepspeech:\n \t@rpath/libdeepspeech.so (compatibility version 0.0.0, current version 0.0.0)\n \t@rpath/libdeepspeech_utils.so (compatibility version 0.0.0, current version 0.0.0)\n \t@rpath/libtensorflow_cc.so (compatibility version 0.0.0, current version 0.0.0)\n \t@rpath/libtensorflow_framework.so (compatibility version 0.0.0, current version 0.0.0)\n \t/Users/build-user/TaskCluster/LightTasks/5/tasks/task_1512394014/homebrew/opt/sox/lib/libsox.3.dylib (compatibility version 4.0.0, current version 4.0.0)\n \t/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 307.5.0)\n \t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.60.2)\n </denchmark-code>\n \n Assuming brew install sox has been performed, I get libsox.3.dylib properly loaded:\n <denchmark-code>$ DYLD_PRINT_LIBRARIES=1 ./deepspeech \n dyld: loaded: /Users/tc-gh-ds/test/./deepspeech\n dyld: loaded: ./libdeepspeech.so\n dyld: loaded: ./libdeepspeech_utils.so\n dyld: loaded: ./libtensorflow_cc.so\n dyld: loaded: ./libtensorflow_framework.so\n dyld: loaded: /usr/local/lib/libsox.3.dylib\n dyld: loaded: /usr/lib/libc++.1.dylib\n dyld: loaded: /usr/lib/libSystem.B.dylib\n dyld: loaded: /usr/lib/libc++abi.dylib\n dyld: loaded: /usr/lib/system/libcache.dylib\n dyld: loaded: /usr/lib/system/libcommonCrypto.dylib\n dyld: loaded: /usr/lib/system/libcompiler_rt.dylib\n dyld: loaded: /usr/lib/system/libcopyfile.dylib\n dyld: loaded: /usr/lib/system/libcorecrypto.dylib\n dyld: loaded: /usr/lib/system/libdispatch.dylib\n dyld: loaded: /usr/lib/system/libdyld.dylib\n dyld: loaded: /usr/lib/system/libkeymgr.dylib\n dyld: loaded: /usr/lib/system/liblaunch.dylib\n dyld: loaded: /usr/lib/system/libmacho.dylib\n dyld: loaded: /usr/lib/system/libquarantine.dylib\n dyld: loaded: /usr/lib/system/libremovefile.dylib\n dyld: loaded: /usr/lib/system/libsystem_asl.dylib\n dyld: loaded: /usr/lib/system/libsystem_blocks.dylib\n dyld: loaded: /usr/lib/system/libsystem_c.dylib\n dyld: loaded: /usr/lib/system/libsystem_configuration.dylib\n dyld: loaded: /usr/lib/system/libsystem_coreservices.dylib\n dyld: loaded: /usr/lib/system/libsystem_coretls.dylib\n dyld: loaded: /usr/lib/system/libsystem_dnssd.dylib\n dyld: loaded: /usr/lib/system/libsystem_info.dylib\n dyld: loaded: /usr/lib/system/libsystem_kernel.dylib\n dyld: loaded: /usr/lib/system/libsystem_m.dylib\n dyld: loaded: /usr/lib/system/libsystem_malloc.dylib\n dyld: loaded: /usr/lib/system/libsystem_network.dylib\n dyld: loaded: /usr/lib/system/libsystem_networkextension.dylib\n dyld: loaded: /usr/lib/system/libsystem_notify.dylib\n dyld: loaded: /usr/lib/system/libsystem_platform.dylib\n dyld: loaded: /usr/lib/system/libsystem_pthread.dylib\n dyld: loaded: /usr/lib/system/libsystem_sandbox.dylib\n dyld: loaded: /usr/lib/system/libsystem_secinit.dylib\n dyld: loaded: /usr/lib/system/libsystem_symptoms.dylib\n dyld: loaded: /usr/lib/system/libsystem_trace.dylib\n dyld: loaded: /usr/lib/system/libunwind.dylib\n dyld: loaded: /usr/lib/system/libxpc.dylib\n dyld: loaded: /usr/lib/libobjc.A.dylib\n dyld: loaded: /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n dyld: loaded: /usr/lib/libenergytrace.dylib\n dyld: loaded: /usr/lib/libbsm.0.dylib\n dyld: loaded: /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\n dyld: loaded: /usr/lib/libz.1.dylib\n dyld: loaded: /usr/lib/system/libkxld.dylib\n dyld: loaded: /usr/lib/libDiagnosticMessagesClient.dylib\n dyld: loaded: /usr/lib/libicucore.A.dylib\n dyld: loaded: /usr/local/opt/libpng/lib/libpng16.16.dylib\n dyld: loaded: /usr/local/opt/mad/lib/libmad.0.dylib\n dyld: loaded: /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio\n dyld: loaded: /System/Library/Frameworks/Security.framework/Versions/A/Security\n dyld: loaded: /usr/lib/libcoretls.dylib\n dyld: loaded: /usr/lib/libcoretls_cfhelpers.dylib\n dyld: loaded: /usr/lib/libOpenScriptingUtil.dylib\n dyld: loaded: /usr/lib/libauto.dylib\n dyld: loaded: /usr/lib/libpam.2.dylib\n dyld: loaded: /usr/lib/libsqlite3.dylib\n dyld: loaded: /usr/lib/libxar.1.dylib\n dyld: loaded: /usr/lib/libbz2.1.0.dylib\n dyld: loaded: /usr/lib/libxml2.2.dylib\n dyld: loaded: /usr/lib/liblzma.5.dylib\n Usage: deepspeech MODEL_PATH AUDIO_PATH ALPHABET_PATH [LM_PATH] [TRIE_PATH] [-t]\n   MODEL_PATH\tPath to the model (protocol buffer binary file)\n   AUDIO_PATH\tPath to the audio file to run (any file format supported by libsox)\n   ALPHABET_PATH\tPath to the configuration file specifying the alphabet used by the network.\n   LM_PATH\tOptional: Path to the language model binary file.\n   TRIE_PATH\tOptional: Path to the language model trie file created with native_client/generate_trie.\n   -t\t\tRun in benchmark mode, output mfcc & inference time\n </denchmark-code>\n \n \t\t"}, "comments_28": {"comment_id": 29, "comment_author": "JanX2", "commentT": "2017-12-04T19:32:38Z", "comment_text": "\n \t\tThanks! DYLD_PRINT_LIBRARIES=1 seems really useful. One new thing for my tool chest. :)\n LGTM so far!\n Apparently it doesn\u2019t list subdependencies. These might still have dependencies that are build-machine specific:\n <denchmark-code>./libdeepspeech.so\n ./libdeepspeech_utils.so\n ./libtensorflow_cc.so\n ./libtensorflow_framework.so\n </denchmark-code>\n \n \t\t"}, "comments_29": {"comment_id": 30, "comment_author": "JanX2", "commentT": "2017-12-04T19:54:49Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/JanX2>@JanX2</denchmark-link>\n  No, we don't need to worry about those, we already set proper RPATH for  and , you are just right that we need to fix  and . One this is done, then we don't  to change the path of  since you see that it is being picked up properly by . Though we may still want to change the path, for the sake of doing it properly.\n And fixing the use of RPATH is likely to be a two lines patch on native_client/Makefile. Do you still want to look into that? I should be able to get on that in the next days, but before i'd like to add more resources for building for OSX so we can add C++ binary, Python and Node bindings test coverage on this platform as well.\n \t\t"}, "comments_30": {"comment_id": 31, "comment_author": "JanX2", "commentT": "2017-12-04T19:57:38Z", "comment_text": "\n \t\tWe might need to fix the IDs, though we build libdeepspeech.so and libdeepspeech_utils.so using TensorFlow's bazel primitives that seems to set it properly on libtensorflow_cc.so and libtensorflow_framework.so ; I might have to dig further on how they enable that, maybe we miss some definition somewhere:\n <denchmark-code>ds-tc-worker:test tc-gh-ds$ otool -L libdeepspeech.so \n libdeepspeech.so:\n \tbazel-out/local-opt/bin/native_client/libdeepspeech.so (compatibility version 0.0.0, current version 0.0.0)\n \t/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 307.5.0)\n \t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.60.2)\n ds-tc-worker:test tc-gh-ds$ otool -L libdeepspeech_utils.so \n libdeepspeech_utils.so:\n \tbazel-out/local-opt/bin/native_client/libdeepspeech_utils.so (compatibility version 0.0.0, current version 0.0.0)\n \t/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 307.5.0)\n \t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.60.2)\n ds-tc-worker:test tc-gh-ds$ otool -L libtensorflow_\n /Library/Developer/CommandLineTools/usr/bin/objdump: 'libtensorflow_': No such file or directory\n ds-tc-worker:test tc-gh-ds$ otool -L libtensorflow_framework.so \n libtensorflow_framework.so:\n \t@rpath/libtensorflow_framework.so (compatibility version 0.0.0, current version 0.0.0)\n \t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.60.2)\n \t/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit (compatibility version 1.0.0, current version 275.0.0)\n \t/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 307.5.0)\n ds-tc-worker:test tc-gh-ds$ otool -L libtensorflow_cc.so \n libtensorflow_cc.so:\n \t@rpath/libtensorflow_cc.so (compatibility version 0.0.0, current version 0.0.0)\n \t@rpath/libtensorflow_framework.so (compatibility version 0.0.0, current version 0.0.0)\n \t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.60.2)\n \t/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 307.5.0)\n </denchmark-code>\n \n \t\t"}, "comments_31": {"comment_id": 32, "comment_author": "JanX2", "commentT": "2017-12-04T20:14:04Z", "comment_text": "\n \t\tOkay, just : <denchmark-link:https://github.com/mozilla/tensorflow/blob/master/tensorflow/BUILD#L617>https://github.com/mozilla/tensorflow/blob/master/tensorflow/BUILD#L617</denchmark-link>\n \n \t\t"}, "comments_32": {"comment_id": 33, "comment_author": "JanX2", "commentT": "2017-12-05T10:14:26Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/JanX2>@JanX2</denchmark-link>\n  I've started a PR <denchmark-link:https://github.com/mozilla/DeepSpeech/pull/1071>#1071</denchmark-link>\n  that should set things straights :)\n \t\t"}, "comments_33": {"comment_id": 34, "comment_author": "JanX2", "commentT": "2017-12-05T10:40:24Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/JanX2>@JanX2</denchmark-link>\n  With that PR:\n <denchmark-code>$ otool -L deepspeech \n deepspeech:\n \t@rpath/libdeepspeech.so (compatibility version 0.0.0, current version 0.0.0)\n \t@rpath/libdeepspeech_utils.so (compatibility version 0.0.0, current version 0.0.0)\n \t@rpath/libtensorflow_cc.so (compatibility version 0.0.0, current version 0.0.0)\n \t@rpath/libtensorflow_framework.so (compatibility version 0.0.0, current version 0.0.0)\n \t@rpath/libsox.3.dylib (compatibility version 4.0.0, current version 4.0.0)\n \t/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 307.5.0)\n \t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.60.2)\n ds-tc-worker:test tc-gh-ds$ ./deepspeech \n Usage: deepspeech MODEL_PATH AUDIO_PATH ALPHABET_PATH [LM_PATH] [TRIE_PATH] [-t]\n   MODEL_PATH\tPath to the model (protocol buffer binary file)\n   AUDIO_PATH\tPath to the audio file to run (any file format supported by libsox)\n   ALPHABET_PATH\tPath to the configuration file specifying the alphabet used by the network.\n   LM_PATH\tOptional: Path to the language model binary file.\n   TRIE_PATH\tOptional: Path to the language model trie file created with native_client/generate_trie.\n   -t\t\tRun in benchmark mode, output mfcc & inference time\n </denchmark-code>\n \n \t\t"}, "comments_34": {"comment_id": 35, "comment_author": "JanX2", "commentT": "2017-12-05T11:28:54Z", "comment_text": "\n \t\tI think that\u2019s a good start. There still are two issues I can see:\n \n \n We should not change the libraries in place but copy them next to deepspeech into the native_client directory. We might otherwise break other stuff relying on the setup being as it is. Especially regarding libsox. This is fine, if we are in our own little sandbox, but we may not be.\n \n \n The libraries themselves need to be fixed. This is covered by https://github.com/mozilla/tensorflow/blob/master/tensorflow/BUILD#L617 correct?\n \n \n \t\t"}, "comments_35": {"comment_id": 36, "comment_author": "JanX2", "commentT": "2017-12-05T11:38:33Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/JanX2>@JanX2</denchmark-link>\n \n For (1), I either disagree or don't understand. Everything is bundled together as native_client.tar.xz. It does work.\n For (2), there is nothing to fix, as you point out and as you can see with otool, they are already properly defined.\n \t\t"}, "comments_36": {"comment_id": 37, "comment_author": "JanX2", "commentT": "2017-12-05T11:41:09Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  Yes. It does work. But you might prevent libsox from working correctly on the build machine. For example, I might be puzzled afterwards, if something linking against lib sox doesn\u2019t work on my build machine. This might be fine for the tensorflow libraries, but for libsox, which my be outside of our directory hierarchy it may not.\n \t\t"}, "comments_37": {"comment_id": 38, "comment_author": "JanX2", "commentT": "2017-12-05T11:47:04Z", "comment_text": "\n \t\tThat code isn't changing libsox, it's changing the deepspeech binary.\n \t\t"}, "comments_38": {"comment_id": 39, "comment_author": "JanX2", "commentT": "2017-12-05T11:52:51Z", "comment_text": "\n \t\tMy bad. You are right of course! :D\n \t\t"}, "comments_39": {"comment_id": 40, "comment_author": "JanX2", "commentT": "2019-01-03T08:04:36Z", "comment_text": "\n \t\tThis thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n \t\t"}}}, "commit": {"commit_id": "8661d482c8e1f4128362d7757017fd99f8e6c563", "commit_author": "Alexandre Lissy", "commitT": "2017-12-05 11:07:18+01:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "native_client\\BUILD", "file_new_name": "native_client\\BUILD", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "62,63,64,65,66,67,99,100,101,102,103,104", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "native_client\\Makefile", "file_new_name": "native_client\\Makefile", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "23,24,25,26,27", "deleted_lines": null}}}}}}