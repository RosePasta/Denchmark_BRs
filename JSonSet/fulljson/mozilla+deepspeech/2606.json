{"BR": {"BR_id": "2606", "BR_author": "slaypni", "BRopenT": "2019-12-17T05:21:46Z", "BRcloseT": "2020-01-03T16:14:45Z", "BR_text": {"BRsummary": "Windows 10 might require \"Redistribuable Visual C++ 2015 Update 3\" for runtime (NodeJS)", "BRdescription": "\n \n OS Platform and Distribution: Windows 10 (64bit)\n DeepSpeech package: deepspeech (npm)\n DeepSpeech version: 0.6.0\n Node version: 13.0.1\n Sample code: https://gist.github.com/slaypni/695df46d55fcae159105d99fe96b99d8\n Exact command to reproduce: yarn; node main.js\n \n It seems using deepspeech node client fails on Windows. An error is produced as follows when trying to run:\n <denchmark-code>> node main.js\n internal/modules/cjs/loader.js:1041\n   return process.dlopen(module, path.toNamespacedPath(filename));\n                  ^\n \n Error: A dynamic link library (DLL) initialization routine failed.\n \\\\?\\C:\\Users\\Kazuaki\\Desktop\\devel\\ds\\node_modules\\deepspeech\\lib\\binding\\v0.6.0\\win32-x64\\node-v79\\deepspeech.node\n     at Object.Module._extensions..node (internal/modules/cjs/loader.js:1041:18)\n     at Module.load (internal/modules/cjs/loader.js:822:32)\n     at Function.Module._load (internal/modules/cjs/loader.js:730:14)\n     at Module.require (internal/modules/cjs/loader.js:864:19)\n     at require (internal/modules/cjs/helpers.js:74:18)\n     at Object.<anonymous> (C:\\Users\\Kazuaki\\Desktop\\devel\\ds\\node_modules\\deepspeech\\index.js:17:17)\n     at Module._compile (internal/modules/cjs/loader.js:971:30)\n     at Object.Module._extensions..js (internal/modules/cjs/loader.js:1011:10)\n     at Module.load (internal/modules/cjs/loader.js:822:32)\n     at Function.Module._load (internal/modules/cjs/loader.js:730:14)\n </denchmark-code>\n \n The same code runs without errors on macOS.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "slaypni", "commentT": "2019-12-17T07:29:55Z", "comment_text": "\n \t\tThat's weird, we have tests coverage on Windows, and NodeJS v13.0.1.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "slaypni", "commentT": "2019-12-17T07:37:35Z", "comment_text": "\n \t\t\n Error: A dynamic link library (DLL) initialization routine failed.\n \\?\\C:\\Users\\Kazuaki\\Desktop\\devel\\ds\\node_modules\\deepspeech\\lib\\binding\\v0.6.0\\win32-x64\\node-v79\\deepspeech.node\n \n I don't know well enough Windows, but deepspeech.node should load libdeepspeech.so. Somehow, it is failing :/\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "slaypni", "commentT": "2019-12-17T14:21:30Z", "comment_text": "\n \t\tLooks like I reproduce that on a Windows 10 VM :'(\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "slaypni", "commentT": "2019-12-17T14:37:26Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/slaypni>@slaypni</denchmark-link>\n  It looks like you need \"Redistribuable Visual C++ 2015 Update 3 (64 bits)\" to be installed. Can you try from this link ?\n <denchmark-link:https://www.microsoft.com/fr-fr/download/details.aspx?id=53840>https://www.microsoft.com/fr-fr/download/details.aspx?id=53840</denchmark-link>\n \n Only select the  package. It was enough to get  for me. I'm not sure how we should handle that, I don't know well enough Windows' world.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "slaypni", "commentT": "2019-12-17T14:47:21Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/kdavis-mozilla>@kdavis-mozilla</denchmark-link>\n  <denchmark-link:https://github.com/reuben>@reuben</denchmark-link>\n  I'll need your opinion whether we just update the doc, or whether we should package the libs with ours.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "slaypni", "commentT": "2019-12-17T15:13:32Z", "comment_text": "\n \t\tOh and <denchmark-link:https://github.com/carlfm01>@carlfm01</denchmark-link>\n  might also have opinions here :)\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "slaypni", "commentT": "2019-12-17T15:56:14Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  Thank you for finding a solution. I installed the specified version of  and tried to run deepspeech, however, the same error occured again \n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "slaypni", "commentT": "2019-12-17T16:01:51Z", "comment_text": "\n \t\t\n @lissyx Thank you for finding a solution. I installed the specified version of vc_redist.x64.exe and tried to run deepspeech, however, the same error occured again.\n \n That's weird, I verified several times with install / uninstall of it, and I would constantly reproduce / fix the issue. That should not be needed, but have you restarted between tests ? It could be possible that the path is not yet updated.\n At that point, maybe you lack some other dep, but it seems like Windows is a bit a moving target, this is not something we had to do before.\n <denchmark-link:https://github.com/slaypni>@slaypni</denchmark-link>\n  What's your exact Windows version ? Maybe you need other versions of  as well ?\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "slaypni", "commentT": "2019-12-17T16:18:12Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/slaypni>@slaypni</denchmark-link>\n  Checking with , reading  with it, I can confirm:\n \n msvcp140.dll\n vcruntime140.dll\n Are the only ones missing after uninstalling the redistribuable package. Please check on your side as well ?\n \n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "slaypni", "commentT": "2019-12-17T17:02:14Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  I confirmed all DLLs used from  exist by using <denchmark-link:https://github.com/lucasg/Dependencies>Dependencies</denchmark-link>\n . (Dependency Walker seems not working on my Windows.) Although it also shows  has one missing module , I am not sure if it is a problem.\n Exact version of my Windows is as follows:\n \n Edition: Windows 10 Pro\n Version: 1909\n Installed Date: 2019/12/08\n OS Build: 18363.476\n \n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "slaypni", "commentT": "2019-12-17T17:04:49Z", "comment_text": "\n \t\t\n Although it also shows deepspeech.node has one missing module libdeepspeech.so, I am not sure if it is a problem.\n \n Check index.js we are supposed to force PATH to ensure that libdeepspeech.so is properly found. It's possible you need to add the path containing it to Dependencies' config.\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "slaypni", "commentT": "2019-12-17T17:05:10Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/slaypni>@slaypni</denchmark-link>\n  I don't know how to further debug missing DLLs on Windows.\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "slaypni", "commentT": "2019-12-17T17:29:05Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  Configuring Dependencies' search path enabled to find  as you said. Currently I am copying  onto the current directly (and also a directly under PATH), therefore it should be found on runtime, however, it fails to run. I am wondering if the error is really caused by missing DLLs.\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "slaypni", "commentT": "2019-12-17T17:33:16Z", "comment_text": "\n \t\t\n @lissyx Configuring Dependencies' search path enabled to find libdeepspeech.so as you said. Currently I am copying libdeepspeech.so on the current directly (and also a directly under PATH), therefore it should be found on runtime, however, it fails to run. I am wondering if the error is really caused by missing DLLs.\n \n Are you sure that your Node process has the same PATH ? There should be no need to move the library, please avoid this as it's going to make debugging even more difficult.\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "slaypni", "commentT": "2019-12-17T17:45:31Z", "comment_text": "\n \t\t\n I confirmed all DLLs used from libdeepspeech.so exist by using Dependencies. (Dependency Walker seems not working on my Windows.)\n \n Please re-verify everything. I just checked with this tools, and it indeeds finds the missing redistribuable libs from its own directory. Obviously, not a directory that is known by Node process.\n <denchmark-link:https://github.com/slaypni>@slaypni</denchmark-link>\n  On the installed module, can you hack into  and add some  statement to know about  before and after we compute it ?\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "slaypni", "commentT": "2019-12-17T22:56:10Z", "comment_text": "\n \t\tHello,\n Just tested and it is working for me, the thing is that I have literally all the redistributable versions installed, at the moment I can't remove them to confirm.\n What comes to my mind for now to mitigate the unknown source of the issue is to check that the redistributable is installed by using the regedit key:\n something like:\n <denchmark-code>var regedit = require('regedit')\n \n regedit.list('HKLM\\\\SOFTWARE\\\\Microsoft\\\\VisualStudio\\\\14.0\\\\VC\\\\Runtimes\\\\x64', function(err, result) {\n      console.log(result['HKLM\\\\SOFTWARE\\\\Microsoft\\\\VisualStudio\\\\14.0\\\\VC\\\\Runtimes\\\\x64'].values['Version'])\n })\n </denchmark-code>\n \n We need to check from 10.0 to 15.9 and see if at least one is installed(instead of only 14.0)\n If the Runtime is the source of the issue I think checking the installed version and adding the requirement to the docs should be fine.\n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "slaypni", "commentT": "2019-12-18T04:32:21Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  Thank you for suggesting actions.\n \n Please re-verify everything. I just checked with this tools, and it indeeds finds the missing redistribuable libs from its own directory. Obviously, not a directory that is known by Node process.\n \n Dependencies shows all DLLs linked from libdeepspeech.so are located under C:\\WINDOWS\\system32\\.\n \n On the installed module, can you hack into deepspeech/index.js and add some console.log statement to know about process.env['PATH'] before and after we compute it ?\n \n I printed oldPath and process.env['PATH'] just before require(binding_path) where an error occurs.\n \n oldPath: C:\\Python37\\Scripts\\;C:\\Python37\\;...\n process.env['PATH']: C:\\Users\\Kazuaki\\Desktop\\devel\\ds\\node_modules\\deepspeech\\lib\\binding\\v0.6.0\\win32-x64;C:\\Python37\\Scripts\\;C:\\Python37\\;...\n \n It looks PATH is properly set. (... is just for truncation.)\n \t\t"}, "comments_17": {"comment_id": 18, "comment_author": "slaypni", "commentT": "2019-12-18T07:44:34Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/slaypni>@slaypni</denchmark-link>\n  Then I'm sorry, I don't know how to debug that further. Out of luck, can you try latest NodeJS v13? This is what I was using (13.3.1 I think ?). Have you ran  against  to check if it depends on anything else than  ?\n \t\t"}, "comments_18": {"comment_id": 19, "comment_author": "slaypni", "commentT": "2019-12-18T08:59:31Z", "comment_text": "\n \t\t\n If the Runtime is the source of the issue I think checking the installed version and adding the requirement to the docs should be fine.\n \n It's likely this is hitting not just node users, if it is libdeepspeech.so that is linked against those runtime. I'm not a big fan of doing those checks in the library (and actually, I dont think we can since the linker will not load us).\n <denchmark-link:https://github.com/carlfm01>@carlfm01</denchmark-link>\n  Should we instead package those two deps along with our runtime ? And if so, where should we source those library ? From the builders ?\n \t\t"}, "comments_19": {"comment_id": 20, "comment_author": "slaypni", "commentT": "2019-12-18T09:10:55Z", "comment_text": "\n \t\t\n process.env['PATH']: C:\\Users\\Kazuaki\\Desktop\\devel\\ds\\node_modules\\deepspeech\\lib\\binding\\v0.6.0\\win32-x64;C:\\Python37\\Scripts\\;C:\\Python37\\;...\n \n Just to be 100% sure, you do have C:\\Users\\Kazuaki\\Desktop\\devel\\ds\\node_modules\\deepspeech\\lib\\binding\\v0.6.0\\win32-x64\\libdeepspeech.so and it is readable by your user, right ?\n \t\t"}, "comments_20": {"comment_id": 21, "comment_author": "slaypni", "commentT": "2019-12-19T05:22:43Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  I upgraded NodeJS to the latest one (13.5.0), confirmed  exists on the certain path and it is readable, however, loading  still produces the same error. I understand it is hard to investigate the problem further unless reproducing the same error on your environment. I'll see if I can find solutions.\n \t\t"}, "comments_21": {"comment_id": 22, "comment_author": "slaypni", "commentT": "2019-12-19T09:39:39Z", "comment_text": "\n \t\t\n @lissyx I upgraded NodeJS to the latest one (13.5.0), confirmed libdeepspeech.so exists on the certain path and it is readable, however, loading deepspeech still produces the same error. I understand it is hard to investigate the problem further unless reproducing the same error on your environment. I'll see if I can find solutions.\n \n What about analyzing deepspeech.node as well with Dependencies ?\n \t\t"}, "comments_22": {"comment_id": 23, "comment_author": "slaypni", "commentT": "2019-12-19T09:40:14Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/slaypni>@slaypni</denchmark-link>\n  It might be good if you could also give a try to the C++ native client, this might help excluding hypothesis.\n \t\t"}, "comments_23": {"comment_id": 24, "comment_author": "slaypni", "commentT": "2019-12-19T22:57:46Z", "comment_text": "\n \t\t\n It's likely this is hitting not just node users, if it is libdeepspeech.so\n \n Initially, I thought it was about the node linking, I see the issue now and my suggestion makes no sense.\n \n Should we instead package those two deps along with our runtime\n \n I don't think is the ideal, let's first confirm the issue with the .so .\n \t\t"}, "comments_24": {"comment_id": 25, "comment_author": "slaypni", "commentT": "2019-12-20T05:51:35Z", "comment_text": "\n \t\tI'm afraid I can't help here, currently, I don't have a clean VM to deploy and debug. Tried locally but can't replicate, I've removed all the redistributables and I still see the dependency .dll's. Everything still works :/\n <denchmark-link:https://github.com/slaypni>@slaypni</denchmark-link>\n  can you try with <denchmark-link:https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk>https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk</denchmark-link>\n  installed?\n \t\t"}, "comments_25": {"comment_id": 26, "comment_author": "slaypni", "commentT": "2019-12-22T10:11:34Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  I paste a screenshot of Dependencies against . Are there examples to use the native C++ client?\n <denchmark-link:https://github.com/carlfm01>@carlfm01</denchmark-link>\n  It seems I have already installed the SDK since Visual Studio is installed on the machine.\n <denchmark-link:https://user-images.githubusercontent.com/1160392/71320422-6eec0780-24ee-11ea-9e9d-2939be517b7a.png></denchmark-link>\n \n \t\t"}, "comments_26": {"comment_id": 27, "comment_author": "slaypni", "commentT": "2019-12-22T11:06:15Z", "comment_text": "\n \t\t\n Are there examples to use the native C++ client?\n \n Yes, please have a look at the documentation.\n \t\t"}, "comments_27": {"comment_id": 28, "comment_author": "slaypni", "commentT": "2019-12-22T11:08:29Z", "comment_text": "\n \t\t\n I paste a screenshot of Dependencies against deepspeech.node\n \n What are those strange characters that are used as path separator in the status bar at the bottom ? We should see \\ and not those.\n Are you using a specific locale ? How are you running node ? From a terminal ? What's your shell ?\n \t\t"}, "comments_28": {"comment_id": 29, "comment_author": "slaypni", "commentT": "2019-12-22T11:38:53Z", "comment_text": "\n \t\t\n Are there examples to use the native C++ client?\n \n Alright, I will see it.\n \n What are those strange characters that are used as path separator in the status bar at the bottom ? We should see \\ and not those.\n \n The character \u00a5 appears in place of \\ when setting Japanese locale on Windows. I understand it is just a matter of font.\n \n Are you using a specific locale ? How are you running node ? From a terminal ? What's your shell ?\n \n It is Japanese locale. I run node from Powershell and Command prompt.\n \t\t"}, "comments_29": {"comment_id": 30, "comment_author": "slaypni", "commentT": "2019-12-22T12:56:07Z", "comment_text": "\n \t\t\n It is Japanese locale. I run node from Powershell and Command prompt.\n \n It would not be completely impossible this is triggering a bug. It'd be awesome if you could check that:\n \n try under msys2 64-bits, with LC_ALL=C\n try under Powershell with C locale (I don't know how to do that)\n \n \t\t"}, "comments_30": {"comment_id": 31, "comment_author": "slaypni", "commentT": "2019-12-24T14:40:51Z", "comment_text": "\n \t\tI tried to run node from Powershell and MSYS on Windows Sandbox where NodeJS and Microsoft Visual C++ 2015 Redistributable (x64) - 14.0.24215 were additionally installed, however, they seem to fail with the same error. The region was set to US and language was set to English (US).\n WDAGUtilityAccount@90e34f2c-3b35-4963-99e1-91053d1b3331 MSYS ~\n # export LC_ALL=C\n \n WDAGUtilityAccount@90e34f2c-3b35-4963-99e1-91053d1b3331 MSYS ~\n # \"/c/Program Files/nodejs/npx\" deepspeech -v\n npx: installed 81 in 12.922s\n A dynamic link library (DLL) initialization routine failed.\n \\\\?\\C:\\Users\\WDAGUtilityAccount\\AppData\\Roaming\\npm-cache\\_npx\\3084\\node_modules\\deepspeech\\lib\\binding\\v0.6.0\\win32-x64\\node-v79\\deepspeech.node\n \t\t"}, "comments_31": {"comment_id": 32, "comment_author": "slaypni", "commentT": "2020-01-02T11:45:47Z", "comment_text": "\n \t\t\n I tried to run node from Powershell and MSYS on Windows Sandbox where NodeJS and Microsoft Visual C++ 2015 Redistributable (x64) - 14.0.24215 were additionally installed, however, they seem to fail with the same error. The region was set to US and language was set to English (US).\n WDAGUtilityAccount@90e34f2c-3b35-4963-99e1-91053d1b3331 MSYS ~\n # export LC_ALL=C\n \n WDAGUtilityAccount@90e34f2c-3b35-4963-99e1-91053d1b3331 MSYS ~\n # \"/c/Program Files/nodejs/npx\" deepspeech -v\n npx: installed 81 in 12.922s\n A dynamic link library (DLL) initialization routine failed.\n \\\\?\\C:\\Users\\WDAGUtilityAccount\\AppData\\Roaming\\npm-cache\\_npx\\3084\\node_modules\\deepspeech\\lib\\binding\\v0.6.0\\win32-x64\\node-v79\\deepspeech.node\n \n I'm really unable to help more here. <denchmark-link:https://github.com/carlfm01>@carlfm01</denchmark-link>\n  Do you know how we can get more informations from the Windows linker ? Under linux I would  and we might know more. I'm surprised we don't have similar tooling for this platform (all I could search would not be helping).\n \t\t"}, "comments_32": {"comment_id": 33, "comment_author": "slaypni", "commentT": "2020-01-03T00:28:49Z", "comment_text": "\n \t\t\n @carlfm01 Do you know how we can get more informations from the Windows linker ?\n \n No, sorry.\n \n It might be good if you could also give a try to the C++ native client, this might help excluding hypothesis.\n \n <denchmark-link:https://github.com/slaypni>@slaypni</denchmark-link>\n  please try running the native client and update us.\n \t\t"}, "comments_33": {"comment_id": 34, "comment_author": "slaypni", "commentT": "2020-01-03T15:12:37Z", "comment_text": "\n \t\t\n \n Should we instead package those two deps along with our runtime\n \n I don't think is the ideal, let's first confirm the issue with the .so .\n \n How does other solves this ? I've seen other floss project shipping those libs as well.\n \t\t"}, "comments_34": {"comment_id": 35, "comment_author": "slaypni", "commentT": "2020-01-04T09:21:23Z", "comment_text": "\n \t\t\n How does other solves this ? I've seen other floss project shipping those libs as well.\n \n Hello <denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  Sorry for the delay, digging more I found someone mentioned  to link statically against dependencies at the cost of increasing the size of the native so, using  compiles for me, I'm now testing to see if it still works.\n I'll need your help to confirm that this removes the dependency requirement.\n <denchmark-link:https://docs.microsoft.com/en-us/cpp/build/reference/md-mt-ld-use-run-time-library?view=vs-2019>https://docs.microsoft.com/en-us/cpp/build/reference/md-mt-ld-use-run-time-library?view=vs-2019</denchmark-link>\n \n \t\t"}, "comments_35": {"comment_id": 36, "comment_author": "slaypni", "commentT": "2020-01-04T09:59:45Z", "comment_text": "\n \t\tI confirm it still works at least with the .NET client (can't test with every single client), using the dependency walker shows that  is gone, it still shows  :/ only your tests <denchmark-link:https://github.com/lissyx>@lissyx</denchmark-link>\n  or <denchmark-link:https://github.com/slaypni>@slaypni</denchmark-link>\n  will tell if this removes the dependency\n \t\t"}, "comments_36": {"comment_id": 37, "comment_author": "slaypni", "commentT": "2020-01-07T11:17:13Z", "comment_text": "\n \t\t\n \n How does other solves this ? I've seen other floss project shipping those libs as well.\n \n Hello @lissyx Sorry for the delay, digging more I found someone mentioned /MT to link statically against dependencies at the cost of increasing the size of the native so, using --copt=\"/MT\" compiles for me, I'm now testing to see if it still works.\n I'll need your help to confirm that this removes the dependency requirement.\n https://docs.microsoft.com/en-us/cpp/build/reference/md-mt-ld-use-run-time-library?view=vs-2019\n \n Your link seems to suggest MD and not MT. Also, /MT badly fails, we need to rebuild everything with it, it seems :/\n \t\t"}, "comments_37": {"comment_id": 38, "comment_author": "slaypni", "commentT": "2020-01-07T20:20:47Z", "comment_text": "\n \t\t\n Your link seems to suggest MD and not MT.\n \n I just read again the link and for MD says The actual working code is contained in MSVCRversionnumber.DLL, which must be available at run time\n Also MT vs MD on StackOverflow :<denchmark-link:https://stackoverflow.com/questions/757418/should-i-compile-with-md-or-mt>https://stackoverflow.com/questions/757418/should-i-compile-with-md-or-mt</denchmark-link>\n \n \n we need to rebuild everything with it, it seems :/\n \n :/\n \t\t"}, "comments_38": {"comment_id": 39, "comment_author": "slaypni", "commentT": "2020-01-07T21:34:34Z", "comment_text": "\n \t\t\n \n Your link seems to suggest MD and not MT.\n \n I just read again the link and for MD says The actual working code is contained in MSVCRversionnumber.DLL, which must be available at run time\n Also MT vs MD on StackOverflow :https://stackoverflow.com/questions/757418/should-i-compile-with-md-or-mt\n \n we need to rebuild everything with it, it seems :/\n \n :/\n \n Ouch, misread msvcp for msvcr :/\n \t\t"}, "comments_39": {"comment_id": 40, "comment_author": "slaypni", "commentT": "2020-02-06T22:40:30Z", "comment_text": "\n \t\tThis thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n \t\t"}}}, "commit": {"commit_id": "af8b64f3bcc65b0453c1d307c905b708de04c632", "commit_author": "Alexandre Lissy", "commitT": "2020-01-03 17:11:57+01:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "USING.rst", "file_new_name": "USING.rst", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "18,19", "deleted_lines": "18"}}}}}}