{"BR": {"BR_id": "429", "BR_author": "kyuusaku", "BRopenT": "2018-06-08T11:33:44Z", "BRcloseT": "2018-06-25T08:10:37Z", "BR_text": {"BRsummary": "Weird output of resize_bilinear", "BRdescription": "\n The function <denchmark-link:https://github.com/Tencent/ncnn/blob/master/src/mat.cpp#L605>resize_bilinear_image</denchmark-link>\n  in  seems not accurate.\n The unit test reveals unexpected negative outputs for positive inputs.\n Here is a simple example can be used to reproduce the weird output.\n <denchmark-code>#include <iostream>\n #include <fstream>\n #include <opencv2/opencv.hpp>\n #include <opencv2/core/core.hpp>\n #include <opencv2/highgui/highgui.hpp>\n #include \"net.h\"\n \n void ncnn_blob_to_txt(const ncnn::Mat& m, const std::string blob_name)\n {\n     std::ofstream outfile(\"log/\" + blob_name + \".txt\");\n     if (!outfile.is_open())\n     {\n         std::cout << \"file open fail\" << std::endl;\n         exit(1);\n     }\n     \n     std::cout << \"dims:\" << m.dims << \" w:\" << m.w << \" h:\" << m.h << \" c:\" << m.c << std::endl;\n     outfile << \"dims:\" << m.dims << \" w:\" << m.w << \" h:\" << m.h << \" c:\" << m.c << \"\\r\\n\" << \" \\r\\n\";\n \n     int size = m.w * m.h;\n     for (int c = 0; c < m.c; c++)\n     {\n         const float* ptr = m.channel(c);\n         for (int h = 0; h < m.h; h++)\n         {\n             for (int w = 0; w < m.w; w++)\n             {\n                 outfile << *ptr << \" \";\n                 ptr++;\n             }\n             outfile << \"\\r\\n\";\n         }\n         outfile << \" \\r\\n\";\n     }\n     outfile.close();\n }\n \n void cv_blob_to_txt(const cv::Mat& m, const std::string blob_name)\n {\n     std::ofstream outfile(\"log/\" + blob_name + \".txt\");\n     if (!outfile.is_open())\n     {\n         std::cout << \"file open fail\" << std::endl;\n         exit(1);\n     }\n     \n     std::cout << \"dims:\" << m.dims << \" w:\" << m.cols << \" h:\" << m.rows << std::endl;\n     outfile << \"dims:\" << m.dims << \" w:\" << m.cols << \" h:\" << m.rows << \"\\r\\n\" << \" \\r\\n\";\n \n     const float* ptr = (const float*)m.data;\n     for (int h = 0; h < m.rows; h++)\n     {\n         for (int w = 0; w < m.cols; w++)\n         {\n             outfile << *(ptr + h*m.cols + w) << \" \";\n         }\n         outfile << \"\\r\\n\";\n     }\n     outfile.close();\n }\n \n void ncnn_from_float(ncnn::Mat& m, float* input)\n {\n     float* ptr = m;\n \n     int size = m.w * m.h;\n \n     printf(\"%d %d %d \\n\", m.w, m.h, m.c);\n \n     for (int h = 0; h < m.h; h++)\n     {\n         for (int w = 0; w < m.w; w++)\n         {\n             *(ptr + h*m.w + w) = *(input + h*m.w + w);\n         }\n     }\n }\n \n void cv_from_float(cv::Mat& m, float* input)\n {\n     float* ptr = (float*)m.data;\n \n     printf(\"%d %d \\n\", m.cols, m.rows);\n \n     for (int h = 0; h < m.rows; h++)\n     {\n         for (int w = 0; w < m.cols; w++)\n         {\n             *(ptr + h*m.cols + w) = *(input + h*m.cols + w);\n         }\n     }\n }\n \n int test_resize_bilinear(int argc, char** argv) {\n     float input[12][12] = {\n         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \n         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.81992e-14, 0}, \n         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \n         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \n         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \n         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \n         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \n         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \n         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.63482e-15, 4.02549e-13}, \n         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \n         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \n         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\n     };\n \n \n     ncnn::Mat in(12, 12, 1);\n     ncnn_from_float(in, &input[0][0]);\n \n     ncnn::Mat out;\n     ncnn::resize_bilinear(in, out, 48, 48);\n \n     ncnn_blob_to_txt(in, \"test_resize_bilinear_input\");\n     ncnn_blob_to_txt(out, \"test_resize_bilinear_output\");\n \n     cv::Mat cv_in(12, 12, CV_32FC1);\n     cv_from_float(cv_in, &input[0][0]);\n     cv::Mat cv_out;\n     cv::resize(cv_in, cv_out, cv::Size(48, 48));\n     cv_blob_to_txt(cv_out, \"test_resize_bilinear_opencv_output\");\n \n     return 0;\n }\n \n \n int main(int argc, char* argv[]) {\n     test_resize_bilinear(argc, argv);\n }\n </denchmark-code>\n \n The weird output is\n <denchmark-code>dims:3 w:48 h:48 c:1\n  \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -2.25934e-15 -6.77801e-15 -1.12967e-14 -1.58154e-14 -1.58154e-14 -1.12967e-14 -6.77801e-15 -2.25934e-15 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -7.53113e-16 -2.25934e-15 -3.76556e-15 -5.27179e-15 -5.27179e-15 -3.76556e-15 -2.25934e-15 -7.53113e-16 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7.53113e-16 2.25934e-15 3.76556e-15 5.27179e-15 5.27179e-15 3.76556e-15 2.25934e-15 7.53113e-16 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2.25934e-15 6.77801e-15 1.12967e-14 1.58154e-14 1.58154e-14 1.12967e-14 6.77801e-15 2.25934e-15 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3.76556e-15 1.12967e-14 1.88278e-14 2.63589e-14 2.63589e-14 1.88278e-14 1.12967e-14 3.76556e-15 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5.27179e-15 1.58154e-14 2.63589e-14 3.69025e-14 3.69025e-14 2.63589e-14 1.58154e-14 5.27179e-15 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5.27179e-15 1.58154e-14 2.63589e-14 3.69025e-14 3.69025e-14 2.63589e-14 1.58154e-14 5.27179e-15 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3.76556e-15 1.12967e-14 1.88278e-14 2.63589e-14 2.63589e-14 1.88278e-14 1.12967e-14 3.76556e-15 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2.25934e-15 6.77801e-15 1.12967e-14 1.58154e-14 1.58154e-14 1.12967e-14 6.77801e-15 2.25934e-15 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7.53113e-16 2.25934e-15 3.76556e-15 5.27179e-15 5.27179e-15 3.76556e-15 2.25934e-15 7.53113e-16 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5.67941e-17 1.70382e-16 2.8397e-16 3.97558e-16 6.68739e-15 1.91535e-14 3.16195e-14 4.40856e-14 5.03186e-14 5.03186e-14 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1.70382e-16 5.11147e-16 8.51911e-16 1.19268e-15 2.00622e-14 5.74604e-14 9.48586e-14 1.32257e-13 1.50956e-13 1.50956e-13 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2.8397e-16 8.51911e-16 1.41985e-15 1.98779e-15 3.34369e-14 9.57673e-14 1.58098e-13 2.20428e-13 2.51593e-13 2.51593e-13 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3.97558e-16 1.19268e-15 1.98779e-15 2.78291e-15 4.68117e-14 1.34074e-13 2.21337e-13 3.08599e-13 3.5223e-13 3.5223e-13 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3.97558e-16 1.19268e-15 1.98779e-15 2.78291e-15 4.68117e-14 1.34074e-13 2.21337e-13 3.08599e-13 3.5223e-13 3.5223e-13 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2.8397e-16 8.51911e-16 1.41985e-15 1.98779e-15 3.34369e-14 9.57673e-14 1.58098e-13 2.20428e-13 2.51593e-13 2.51593e-13 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1.70382e-16 5.11147e-16 8.51911e-16 1.19268e-15 2.00622e-14 5.74604e-14 9.48586e-14 1.32257e-13 1.50956e-13 1.50956e-13 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5.67941e-17 1.70382e-16 2.8397e-16 3.97558e-16 6.68739e-15 1.91535e-14 3.16195e-14 4.40856e-14 5.03186e-14 5.03186e-14 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n \n </denchmark-code>\n \n It is worth noting that. There are also other cases can generate such weird outputs.\n <denchmark-link:https://github.com/nihui>@nihui</denchmark-link>\n  please help.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "kyuusaku", "commentT": "2018-06-25T07:52:12Z", "comment_text": "\n \t\tconfirmed\n \t\t"}}}, "commit": {"commit_id": "ee988174460ef9b55e3c4f4e4ad02f4d9e75e87c", "commit_author": "nihuini", "commitT": "2018-06-25 16:09:13+08:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\mat.cpp", "file_new_name": "src\\mat.cpp", "file_complexity": {"file_NLOC": "690", "file_CCN": "116", "file_NToken": "3805"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "627,630,631,632,633,634,635,650,653,654,655,656,657", "deleted_lines": "626,629,644", "method_info": {"method_name": "ncnn::resize_bilinear_image", "method_params": "src,dst,w,h", "method_startline": "606", "method_endline": "833", "method_complexity": {"method_NLOC": "171", "method_CCN": "19", "method_NToken": "1266", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "src\\mat_pixel.cpp", "file_new_name": "src\\mat_pixel.cpp", "file_complexity": {"file_NLOC": "1646", "file_CCN": "181", "file_NToken": "10495"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1160,1163,1164,1165,1166,1167,1186,1189,1190,1191,1192,1193", "deleted_lines": "1159,1180", "method_info": {"method_name": "ncnn::resize_bilinear_c3", "method_params": "src,srcw,srch,dst,w,h", "method_startline": "1133", "method_endline": "1425", "method_complexity": {"method_NLOC": "230", "method_CCN": "19", "method_NToken": "1725", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "1454,1457,1458,1459,1460,1461,1480,1483,1484,1485,1486,1487", "deleted_lines": "1443,1464", "method_info": {"method_name": "ncnn::resize_bilinear_c1", "method_params": "src,srcw,srch,dst,w,h", "method_startline": "1427", "method_endline": "1676", "method_complexity": {"method_NLOC": "193", "method_CCN": "17", "method_NToken": "1279", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "1705,1708,1709,1710,1711,1712,1731,1734,1735,1736,1737,1738", "deleted_lines": "1684,1705", "method_info": {"method_name": "ncnn::resize_bilinear_c4", "method_params": "src,srcw,srch,dst,w,h", "method_startline": "1678", "method_endline": "1973", "method_complexity": {"method_NLOC": "233", "method_CCN": "19", "method_NToken": "1776", "method_nesting_level": "1"}}}}}}}}