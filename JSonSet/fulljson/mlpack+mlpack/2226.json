{"BR": {"BR_id": "2226", "BR_author": "shrit", "BRopenT": "2020-02-19T16:15:40Z", "BRcloseT": "2020-03-17T13:21:36Z", "BR_text": {"BRsummary": "Verify that ann is reading the entire dataset at least once", "BRdescription": "\n Hello,\n In the actual implementation of the Artificial Neural Network, the users are using the Train() function to train a model. We pass a dataset into the train function,  but we are not sure that in one epoch we are passing over the entire dataset.\n It would be very appropriate to print a warning telling the user that the epoch did not pass over the entire dataset, asking to modify the maxIteration() to be at the same size as the numbers of columns of the dataset matrix.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "shrit", "commentT": "2020-02-20T13:44:58Z", "comment_text": "\n \t\tHi, <denchmark-link:https://github.com/shrit>@shrit</denchmark-link>\n  I would like to move forward with this issue. Any hint from your side on how to move forward with it would be very helpful. Thanks.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "shrit", "commentT": "2020-02-20T13:55:30Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/gaurav-singh1998>@gaurav-singh1998</denchmark-link>\n  You can choose any dataset that can be trained with neural networks, then you reduce the  parameter, and monitor how the training process using  callback. If you choose a small  much smaller than the dataset size, you will notice that the training will stop before completing the epoch.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "shrit", "commentT": "2020-02-22T04:27:33Z", "comment_text": "\n \t\tCan I take up this problem? Can I work on this problem?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "shrit", "commentT": "2020-02-22T04:29:50Z", "comment_text": "\n \t\tHey, <denchmark-link:https://github.com/gauthampkrishnan>@gauthampkrishnan</denchmark-link>\n  I am currently working on this. Can you take another issue? Thanks.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "shrit", "commentT": "2020-02-22T04:31:21Z", "comment_text": "\n \t\t\n Hey, @gauthampkrishnan I am currently working on this. Can you take another issue? Thanks.\n \n <denchmark-link:https://github.com/gaurav-singh1998>@gaurav-singh1998</denchmark-link>\n  yes ofcourse all the best\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "shrit", "commentT": "2020-02-22T04:32:49Z", "comment_text": "\n \t\tInterested in a collaboration? <denchmark-link:https://github.com/Gaura>@Gaura</denchmark-link>\n \n \n \n Hey, @gauthampkrishnan I am currently working on this. Can you take another issue? Thanks.\n \n @gaurav-singh1998 yes ofcourse all the best\n \n interested in collaboration?\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "shrit", "commentT": "2020-02-22T14:50:16Z", "comment_text": "\n \t\tHi, <denchmark-link:https://github.com/shrit>@shrit</denchmark-link>\n  sorry for the late reply, got busy because of college mid-sem exams. I have been trying to replicate the issue you mentioned. Code regarding the same can be found <denchmark-link:https://ideone.com/bZH5Xx>here</denchmark-link>\n . The dataset used was generated with the help of python interpreter and the code regarding it can be found <denchmark-link:https://ideone.com/a3wbW0>here</denchmark-link>\n . I wanted to know if I am on the correct path with this and if this is correct then how to use the Progressbar() callback in 'Train()' method of Perceptron object?\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "shrit", "commentT": "2020-02-22T14:58:12Z", "comment_text": "\n \t\tI am not sure that perceptrons accept callbacks. You can use the code I have used in this issue <denchmark-link:https://github.com/mlpack/mlpack/issues/2073#issuecomment-549080270>#2073 (comment)</denchmark-link>\n \n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "shrit", "commentT": "2020-02-23T13:41:39Z", "comment_text": "\n \t\tHey, <denchmark-link:https://github.com/shrit>@shrit</denchmark-link>\n  I was going through the issue you mentioned and was able to understand the issue present. So, according to me, there has to be a warning in <denchmark-link:https://github.com/mlpack/mlpack/blob/master/src/mlpack/methods/ann/ffn.hpp>ffn.hpp</denchmark-link>\n  telling the user to pass  value the same as the number of columns in the dataset? Please correct me if I am wrong\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "shrit", "commentT": "2020-02-23T13:49:56Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/gaurav-singh1998>@gaurav-singh1998</denchmark-link>\n  You understood it right, this is exaclty what has to be done.\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "shrit", "commentT": "2020-02-23T13:54:39Z", "comment_text": "\n \t\tThanks, <denchmark-link:https://github.com/shrit>@shrit</denchmark-link>\n  for the clarification will open a PR by tomorrow :)\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "shrit", "commentT": "2020-02-23T17:04:00Z", "comment_text": "\n \t\tHey, <denchmark-link:https://github.com/shrit>@shrit</denchmark-link>\n  one final query. Can you tell what should the warning say and should the same thing to be done with rnn_impl.hpp?\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "shrit", "commentT": "2020-02-23T20:25:09Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/gaurav-singh1998>@gaurav-singh1998</denchmark-link>\n  You can add something as follows: \n You can modify this warning as you like, but it has to tell the user about these points.\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "shrit", "commentT": "2020-02-24T12:22:09Z", "comment_text": "\n \t\tHi, <denchmark-link:https://github.com/shrit>@shrit</denchmark-link>\n  <denchmark-link:https://github.com/zoq>@zoq</denchmark-link>\n  I have incorporated the warning message in ,  and  but if we call the  function inside a for loop the warning gets printed multiple times. Is there a way to tackle it?\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "shrit", "commentT": "2020-02-24T13:43:58Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/gaurav-singh1998>@gaurav-singh1998</denchmark-link>\n  The  function itself have a loop inside (in the optimizer part), why we would have to put it inside a loop?\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "shrit", "commentT": "2020-02-24T13:46:45Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/shrit>@shrit</denchmark-link>\n  like in the example you used in the comment you did,\n for(int i=0; i<300; i++)\n {\n model.Train(trainX, trainY, optimizer, ens::PrintLoss(),\n ens::ProgressBar(),\n ens::StoreBestCoordinatesarma::mat());\n <denchmark-code>optimizer.ResetPolicy() = false;\n </denchmark-code>\n \n }\n Because of this the warn message is getting multiple times. Can you review <denchmark-link:https://github.com/mlpack/mlpack/pull/2233>#2233</denchmark-link>\n ?\n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "shrit", "commentT": "2020-02-24T14:15:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/gaurav-singh1998>@gaurav-singh1998</denchmark-link>\n   Exactly. I agree with you.\n When I posted this issue, it was back in November. Callbacks where just begin merged in mlpack.\n Later on, I understood we do not have to use outside  loop. In fact, it is totally possible to achieve the objective of the optimization without outside outer loop.\n Before callbacks, we had to put iterations since we did not observe in real-time either the training loss or the validation loss, so you had to test on a validation set after each return of , and write by ourself an Early Stopping locally based on the .\n <denchmark-link:https://github.com/zoq>@zoq</denchmark-link>\n  What do you think? Do we have to put an outside loop on the train function nowadays?\n \t\t"}, "comments_17": {"comment_id": 18, "comment_author": "shrit", "commentT": "2020-02-25T22:34:53Z", "comment_text": "\n \t\t\n When I posted this issue, it was back in November. Callbacks where just begin merged in mlpack.\n Later on, I understood we do not have to use outside for loop. In fact, it is totally possible to achieve the objective of the optimization without outside outer loop.\n Before callbacks, we had to put iterations since we did not observe in real-time either the training loss or the validation loss, so you had to test on a validation set after each return of Train(), and write by ourself an Early Stopping locally based on the Evaluate().\n @zoq What do you think? Do we have to put an outside loop on the train function nowadays?\n \n You are absolutely correct, the callbacks should make the for loop obsolete.\n \t\t"}, "comments_18": {"comment_id": 19, "comment_author": "shrit", "commentT": "2020-03-17T12:59:32Z", "comment_text": "\n \t\tHi, <denchmark-link:https://github.com/shrit>@shrit</denchmark-link>\n  since this issue has been solved. I think we should go ahead and close it. Thanks.\n \t\t"}}}, "commit": {"commit_id": "3199df34fef4eb10ba26487561d7d678b04e6fe9", "commit_author": "Gaurav Singh", "commitT": "2020-03-17 00:51:31-04:00", "commit_complexity": {"commit_NLOC": "0.5581395348837209", "commit_CCN": "1.0", "commit_Nprams": "0.9418604651162791"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "COPYRIGHT.txt", "file_new_name": "COPYRIGHT.txt", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "131", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\mlpack\\methods\\ann\\brnn.hpp", "file_new_name": "src\\mlpack\\methods\\ann\\brnn.hpp", "file_complexity": {"file_NLOC": "137", "file_CCN": "9", "file_NToken": "757"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "27,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108", "deleted_lines": null}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "src\\mlpack\\methods\\ann\\brnn_impl.hpp", "file_new_name": "src\\mlpack\\methods\\ann\\brnn_impl.hpp", "file_complexity": {"file_NLOC": "607", "file_CCN": "60", "file_NToken": "4052"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "124,125", "deleted_lines": null, "method_info": {"method_name": "mlpack::ann::BRNN<OutputLayerType,MergeLayerType,MergeOutputType,InitializationRuleType,CustomLayers...>::Train", "method_params": "predictors,responses,optimizer", "method_startline": "105", "method_endline": "134", "method_complexity": {"method_NLOC": "23", "method_CCN": "2", "method_NToken": "144", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "160,161", "deleted_lines": null, "method_info": {"method_name": "mlpack::ann::BRNN<OutputLayerType,MergeLayerType,MergeOutputType,InitializationRuleType,CustomLayers...>::Train", "method_params": "predictors,responses", "method_startline": "140", "method_endline": "168", "method_complexity": {"method_NLOC": "21", "method_CCN": "2", "method_NToken": "129", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85", "deleted_lines": null, "method_info": {"method_name": "mlpack::ann::BRNN<OutputLayerType,MergeLayerType,MergeOutputType,InitializationRuleType,CustomLayers...>::WarnMessageMaxIterations", "method_params": "optimizer,samples", "method_startline": "70", "method_endline": "85", "method_complexity": {"method_NLOC": "16", "method_CCN": "3", "method_NToken": "82", "method_nesting_level": "2"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\mlpack\\methods\\ann\\ffn.hpp", "file_new_name": "src\\mlpack\\methods\\ann\\ffn.hpp", "file_complexity": {"file_NLOC": "165", "file_CCN": "11", "file_NToken": "957"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "33,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114", "deleted_lines": null}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "src\\mlpack\\methods\\ann\\ffn_impl.hpp", "file_new_name": "src\\mlpack\\methods\\ann\\ffn_impl.hpp", "file_complexity": {"file_NLOC": "560", "file_CCN": "71", "file_NToken": "3911"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "115,116", "deleted_lines": null, "method_info": {"method_name": "mlpack::ann::FFN<OutputLayerType,InitializationRuleType,CustomLayers...>::Train", "method_params": "predictors,responses,optimizer,callbacks", "method_startline": "107", "method_endline": "125", "method_complexity": {"method_NLOC": "15", "method_CCN": "1", "method_NToken": "116", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "139,140", "deleted_lines": null, "method_info": {"method_name": "mlpack::ann::FFN<OutputLayerType,InitializationRuleType,CustomLayers...>::Train", "method_params": "predictors,responses,callbacks", "method_startline": "130", "method_endline": "149", "method_complexity": {"method_NLOC": "15", "method_CCN": "1", "method_NToken": "115", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "76,77,78,79,80,81,82,83,84,85,86,87,88,89,90", "deleted_lines": null, "method_info": {"method_name": "mlpack::ann::FFN<OutputLayerType,InitializationRuleType,CustomLayers...>::WarnMessageMaxIterations", "method_params": "optimizer,samples", "method_startline": "76", "method_endline": "90", "method_complexity": {"method_NLOC": "15", "method_CCN": "3", "method_NToken": "78", "method_nesting_level": "2"}}}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\mlpack\\methods\\ann\\layer\\layer_traits.hpp", "file_new_name": "src\\mlpack\\methods\\ann\\layer\\layer_traits.hpp", "file_complexity": {"file_NLOC": "31", "file_CCN": "0", "file_NToken": "169"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "119,120,121,122", "deleted_lines": null}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\mlpack\\methods\\ann\\rnn.hpp", "file_new_name": "src\\mlpack\\methods\\ann\\rnn.hpp", "file_complexity": {"file_NLOC": "139", "file_CCN": "11", "file_NToken": "775"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "26,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104", "deleted_lines": null}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "src\\mlpack\\methods\\ann\\rnn_impl.hpp", "file_new_name": "src\\mlpack\\methods\\ann\\rnn_impl.hpp", "file_complexity": {"file_NLOC": "487", "file_CCN": "63", "file_NToken": "3030"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "120,121", "deleted_lines": null, "method_info": {"method_name": "mlpack::ann::RNN<OutputLayerType,InitializationRuleType,CustomLayers...>::Train", "method_params": "predictors,responses,optimizer,callbacks", "method_startline": "101", "method_endline": "130", "method_complexity": {"method_NLOC": "23", "method_CCN": "2", "method_NToken": "148", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "70,71,72,73,74,75,76,77,78,79,80,81,82,83,84", "deleted_lines": null, "method_info": {"method_name": "mlpack::ann::RNN<OutputLayerType,InitializationRuleType,CustomLayers...>::WarnMessageMaxIterations", "method_params": "optimizer,samples", "method_startline": "70", "method_endline": "84", "method_complexity": {"method_NLOC": "15", "method_CCN": "3", "method_NToken": "78", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "166,167", "deleted_lines": null, "method_info": {"method_name": "mlpack::ann::RNN<OutputLayerType,InitializationRuleType,CustomLayers...>::Train", "method_params": "predictors,responses,callbacks", "method_startline": "146", "method_endline": "176", "method_complexity": {"method_NLOC": "23", "method_CCN": "2", "method_NToken": "147", "method_nesting_level": "2"}}}}}, "file_8": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\mlpack\\tests\\activation_functions_test.cpp", "file_new_name": "src\\mlpack\\tests\\activation_functions_test.cpp", "file_complexity": {"file_NLOC": "471", "file_CCN": "57", "file_NToken": "2855"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "313", "deleted_lines": "313"}}}, "file_9": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\mlpack\\tests\\feedforward_network_test.cpp", "file_new_name": "src\\mlpack\\tests\\feedforward_network_test.cpp", "file_complexity": {"file_NLOC": "349", "file_CCN": "25", "file_NToken": "3475"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622", "deleted_lines": null, "method_info": {"method_name": "BOOST_AUTO_TEST_CASE", "method_params": "OptimizerTest", "method_startline": "599", "method_endline": "622", "method_complexity": {"method_NLOC": "18", "method_CCN": "1", "method_NToken": "191", "method_nesting_level": "0"}}}}}}}}