{"BR": {"BR_id": "798", "BR_author": "thejonan", "BRopenT": "2016-10-05T16:41:39Z", "BRcloseT": "2016-10-06T20:37:10Z", "BR_text": {"BRsummary": "PARAM_VECTOR_IN seems not to be working", "BRdescription": "\n Having a definition like this:\n <denchmark-code>PARAM_VECTOR_IN(size_t, \"ignore_dimensions\", \"The indices of dimensions to be ignored \"\n     \"on split attempts.\", \"n\");\n </denchmark-code>\n \n and passing parameters like -n 0,2 produces an exception in CLI::ParseCommandLine(argc, argv); call. The output is this:\n <denchmark-code>[FATAL]: Caught exception from parsing command line:    the argument ('0, 2') for option '--ignore_dimensions' is invalid\n \n libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: fatal error; see Log::Fatal output\n Program ended with exit code: 9\n </denchmark-code>\n \n which is rather strange, because this is very close to the example of PARAM_VECTOR_IN usage given in the comment next to its declaration.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "thejonan", "commentT": "2016-10-06T18:11:08Z", "comment_text": "\n \t\tI found that PARAM_VECTOR did not work when I wrote some tests for it.  So I did some digging in the boost::program_options documentation and figured out how to make it work.  But the usage actually turns out to be a little bit different than expected.  You'll need to do, e.g., -n 0 2 or -n 0 -n 2 (either works).  I updated the documentation to point that out.  Let me know if my fix does not work for you.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "thejonan", "commentT": "2016-10-06T20:23:09Z", "comment_text": "\n \t\tInteresting, because I've tried the second option (-n 0 -n 2) before, and then it crashed with \"duplicate entry\" exception. I've just tried the first one - it doesn't crash, but reads only the first value. It could be some \"specific\" boost-on-Mac-via-MacPorts behavior.\n Strange enough, the two new tests regarding this doesn't seem to fail! I'll make some more investigation and come back.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "thejonan", "commentT": "2016-10-06T20:26:52Z", "comment_text": "\n \t\tFascinating, can you tell me more about what you've done with the first option that doesn't work?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "thejonan", "commentT": "2016-10-06T20:31:11Z", "comment_text": "\n \t\tI've made all this attempts in det_main.cpp, not it matters. Added this, as pointed out:\n <denchmark-code>PARAM_VECTOR_IN(size_t, \"ignore_dimensions\", \"The indices of dimensions to be ignored \"\n     \"on split attempts.\", \"n\");\n </denchmark-code>\n \n Then tried to obtain the value like this:\n <denchmark-code>std::vector<size_t> ignoreDims = CLI::GetParam<std::vector<size_t>>(\"ignore_dimensions\");\n </denchmark-code>\n \n Gives these arguments: -n 2 3 and checking the ignoreDims's value (in the debugger), it shows a vector with only one element - 2. (Yes, I've built MLPack with DEBUG=ON).\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "thejonan", "commentT": "2016-10-06T20:36:14Z", "comment_text": "\n \t\tI obviously need to take some rest. I've just tried it again and it worked as expected. And I've made several attempts before (but without updating from your repo. This time I did). It is also possible to be because I make two types of builds - one in an xcode generated project (via cmake) and another with classical Makefiles with OpenMP enabled compiler, so they could step on each other's toes, although (of course) I'm doing that in separate folders, but sharing the actual source tree.\n Sorry, I think we can close this.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "thejonan", "commentT": "2016-10-06T20:37:10Z", "comment_text": "\n \t\tOk, I will not investigate then. :)\n \t\t"}}}, "commit": {"commit_id": "998bb2fae41210d03ddf007b51d994a9cf6262cf", "commit_author": "Ryan Curtin", "commitT": "2016-10-06 14:09:41-04:00", "commit_complexity": {"commit_NLOC": "0.2545454545454545", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\mlpack\\core\\util\\cli.hpp", "file_new_name": "src\\mlpack\\core\\util\\cli.hpp", "file_complexity": {"file_NLOC": "98", "file_CCN": "0", "file_NToken": "625"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "src\\mlpack\\core\\util\\cli_impl.hpp", "file_new_name": "src\\mlpack\\core\\util\\cli_impl.hpp", "file_complexity": {"file_NLOC": "79", "file_CCN": "12", "file_NToken": "621"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "75", "deleted_lines": "67,76", "method_info": {"method_name": "mlpack::CLI::Add", "method_params": "identifier,description,alias,required,input", "method_startline": "33", "method_endline": "99", "method_complexity": {"method_NLOC": "35", "method_CCN": "6", "method_NToken": "286", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "148,149,150,151,152,153,154", "deleted_lines": null, "method_info": {"method_name": "mlpack::CLI::AddOption", "method_params": "optId,descr", "method_startline": "148", "method_endline": "154", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "51", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "157,158,159,160,161,162,163", "deleted_lines": null, "method_info": {"method_name": "mlpack::CLI::AddOption", "method_params": "optId,descr", "method_startline": "157", "method_endline": "163", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "55", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\mlpack\\tests\\cli_test.cpp", "file_new_name": "src\\mlpack\\tests\\cli_test.cpp", "file_complexity": {"file_NLOC": "196", "file_CCN": "15", "file_NToken": "1357"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196", "deleted_lines": null, "method_info": {"method_name": "BOOST_AUTO_TEST_CASE", "method_params": "TestVectorOption2", "method_startline": "169", "method_endline": "196", "method_complexity": {"method_NLOC": "22", "method_CCN": "1", "method_NToken": "185", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164", "deleted_lines": null, "method_info": {"method_name": "BOOST_AUTO_TEST_CASE", "method_params": "TestVectorOption", "method_startline": "140", "method_endline": "164", "method_complexity": {"method_NLOC": "20", "method_CCN": "1", "method_NToken": "171", "method_nesting_level": "0"}}}}}}}}