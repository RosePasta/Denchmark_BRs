{"BR": {"BR_id": "1227", "BR_author": "rcurtin", "BRopenT": "2018-02-07T15:47:23Z", "BRcloseT": "2018-02-24T15:22:15Z", "BR_text": {"BRsummary": "Avoid setting random seed in main tests", "BRdescription": "\n This one is related to <denchmark-link:https://github.com/mlpack/mlpack/issues/1152>#1152</denchmark-link>\n  and would be a good issue for someone who is looking to contribute.\n One of the keys about the test mlpack_test is that its results are reproducible for a single build.  So, the random seed should never be set during the test, instead preferring to leave it to whatever it is set to during compilation.  This means I can run mlpack_test multiple times, and if a single random test failed, it will fail again.  This is important for debugging.\n However, the recent addition of the main tests in <denchmark-link:https://github.com/mlpack/mlpack/issues/1152>#1152</denchmark-link>\n  is actually setting the random seed in many cases to , which is different for every run.  That breaks the idea set out above... so we should fix it. :)\n I would suggest the following steps as a good way to approach this issue:\n \n \n Read through the code to understand how math::RandomSeed(std::time(NULL)) is being called by some of the main tests in src/mlpack/tests/*.cpp.  The call will be in mlpackMain() of some of the algorithms being tested.\n \n \n See that math::RandomSeed() is actually being called during the tests, perhaps by adding some printed debugging output to the call or setting a breakpoint or something.\n \n \n Think about a way where, if we are in the tests (mlpack_test only), we can either avoid calling math::RandomSeed() altogether, or make sure that it doesn't actually set the random seed.\n \n \n Implement it!\n \n \n Test that setting the random seed still works for the command-line programs and Python bindings by manually running a program that has the --seed option with different seeds, and seeing that the output is different (k-means is one good option).\n \n \n Regardless of whose PR is merged in the end, I think it is a great learning experience for the codebase for multiple people to work on this, so there is no need to \"claim\" the issue.  I'm likely to review and merge the first working PR that is submitted.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "rcurtin", "commentT": "2018-02-10T19:11:22Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rcurtin>@rcurtin</denchmark-link>\n  here we have to avoid calling  or both  and  ?\n I'm confused if we avoid calling both i.e. avoid calling  altogether then how will the randomseed will be set? What should be it's value when we don't pass the  as input Param as well as when we are not allowing the  to be it's default value i.e. 0 ?\n If we've to just not allow the calling of  for  then I think we should decide a fixed value of  whenever  is called from any of the . To do this I've two things in mind:\n \n \n We can pass a default argument to mlpackMain() which will be set to true when we are calling it through any of the mlpack_test otherwise which will be false and we can then check its value in if condition while calling RandomSeed() and if its true then we can call RandomSeed() for the fixed value of seed\n \n \n Plz refer this Qn. We can find out the calling function name through a static function defined in class Reporter which will return a boolean variable indicating if the calling function is one of the mlpack_test\n \n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "rcurtin", "commentT": "2018-02-10T23:54:00Z", "comment_text": "\n \t\tOne way would be to disable the functionality of math::RandomSeed() when we are calling from the tests.  There are some macros that are set only inside of the tests.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "rcurtin", "commentT": "2018-02-11T00:00:06Z", "comment_text": "\n \t\tYeah BINDING_TYPE == BINDING_TYPE_TEST so we can use this condition to disable the functionality of math::RandomSeed()\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "rcurtin", "commentT": "2018-02-24T15:22:15Z", "comment_text": "\n \t\tFixed via <denchmark-link:https://github.com/mlpack/mlpack/pull/1264>#1264</denchmark-link>\n . Thanks! :)\n \t\t"}}}, "commit": {"commit_id": "11ab75be66d7eb33cf990009fa778d545eb62738", "commit_author": "Roberto Hueso Gomez", "commitT": "2018-02-16 20:09:12+01:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\mlpack\\core\\math\\random.hpp", "file_new_name": "src\\mlpack\\core\\math\\random.hpp", "file_complexity": {"file_NLOC": "64", "file_CCN": "13", "file_NToken": "360"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "42,46", "deleted_lines": null, "method_info": {"method_name": "mlpack::math::RandomSeed", "method_params": "seed", "method_startline": "40", "method_endline": "47", "method_complexity": {"method_NLOC": "6", "method_CCN": "2", "method_NToken": "36", "method_nesting_level": "2"}}}}}}}}