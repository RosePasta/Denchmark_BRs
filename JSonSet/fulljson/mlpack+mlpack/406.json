{"BR": {"BR_id": "406", "BR_author": "rcurtin", "BRopenT": "2015-02-19T22:13:00Z", "BRcloseT": "2015-04-27T00:34:19Z", "BR_text": {"BRsummary": "CF should avoid calculating full matrix when providing recommendations", "BRdescription": "\n Right now, the first line of CF::GetRecommendations() reads\n <denchmark-code>rating = w * h\n </denchmark-code>\n \n which has the issue that the RAM on the system must be equal to the number of items vs. the number of recommendations.  Then, we run tree-based kNN on the rating matrix, which is of high dimension, which will be slow:\n <denchmark-code>// Calculate the neighborhood of the queried users.\n // This should be a templatized option.\n neighbor::AllkNN a(rating, query);\n arma::mat resultingDistances; // Temporary storage.\n a.Search(numUsersForSimilarity, neighborhood, resultingDistances);\n </denchmark-code>\n \n But this isn't necessary.  Note that what we are trying to do is find the most similar users (columns), but we have decomposed the input matrix X = W * H.  (H is the matrix that holds the user preferences, depending on how you look at it.)\n Now, some quick linear algebra gives us that X.col(i) = W * H.col(i).  But remember, we are looking for the nearest neighbors of X.col(i), so this is equivalent to the nearest neighbors of H.col(i).  Why aren't we searching for the nearest neighbors in the H matrix, then?\n A patch for this ticket should also include some information on the speedup obtained (in either a test program or the cf executable), and verification that the module provides the same results (perhaps through the already written tests).\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "rcurtin", "commentT": "2015-02-24T23:18:33Z", "comment_text": "\n \t\tMy linear algebra is wrong.  X.col(i) = W * H.col(i), but it is not true that d(X.col(i), X.col(j)) = d(H.col(i), H.col(j)) unless we make some assumptions about W, which we can't do.  Oops.  Self-assigning until I figure out how this can be done.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "rcurtin", "commentT": "2015-03-25T22:11:02Z", "comment_text": "\n \t\td(X.col(i), X.col(j)) = d(W H.col(i), W H.col(j)).\n For the L2 distance (which is fine for now), we can show that this is the Mahalanobis distance with M^{-1} = W^T W.  Decompose M^{-1} = L L^T (Cholesky decomposition), and then multiply H by L^T to obtain H' (this takes O(r^2 n) time).  Then, once this is done,\n d(X.col(i), X.col(j)) = d(H'.col(i), H'.col(j))\n and each distance calculation takes only O(r) time.  We can use simple nearest neighbor search out of the box on H', then.\n \t\t"}}}, "commit": {"commit_id": "fbdc8d44bcdb3a9f174b6f9a8839ced81b20f98f", "commit_author": "ryan", "commitT": "2015-04-26 20:34:14-04:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\mlpack\\methods\\cf\\cf_impl.hpp", "file_new_name": "src\\mlpack\\methods\\cf\\cf_impl.hpp", "file_complexity": {"file_NLOC": "161", "file_CCN": "22", "file_NToken": "1230"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "122,123,124,125,126,127,128,129,130,136,140,147,159,160,161,162,163,164,165,166,175", "deleted_lines": "122,123,129,133,140,144,145,146,147,148,149,150,151,152,153,154,155,156,157,174", "method_info": {"method_name": "mlpack::cf::CF<FactorizerType>::GetRecommendations", "method_params": "numRecs,recommendations,users", "method_startline": "118", "method_endline": "200", "method_complexity": {"method_NLOC": "48", "method_CCN": "10", "method_NToken": "413", "method_nesting_level": "2"}}}}}}}}