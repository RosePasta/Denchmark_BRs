{"BR": {"BR_id": "226", "BR_author": "mlaradji", "BRopenT": "2018-09-27T23:37:00Z", "BRcloseT": "2018-10-23T20:26:50Z", "BR_text": {"BRsummary": "Upgrade raw image reading to imageio.imread", "BRdescription": "\n <denchmark-h:h3>Bug Description</denchmark-h>\n \n I have folders data/train and data/val that contain jpg images. I created two labels.csv (in data/train and data/val) file that contains two columns: 'File Name' and 'Label', and filled them with the labels of their respective image sets. I can successfully run the following code:\n <denchmark-code>from autokeras.image_supervised import ImageClassifier, load_image_dataset\n \n x_train, y_train = load_image_dataset(csv_file_path=\"data/train/labels.csv\",\n                                       images_path=\"data/train\")\n print(x_train.shape)\n print(y_train.shape)\n \n x_val, y_val = load_image_dataset(csv_file_path=\"data/val/labels.csv\",\n                                     images_path=\"data/val\")\n </denchmark-code>\n \n with the output being:\n <denchmark-code>(13750,)\n (13750,)\n </denchmark-code>\n \n I run into errors when trying to use x_train. When executing the following code:\n <denchmark-code>if __name__ == '__main__':\n \n     clf = ImageClassifier(verbose=True)\n     clf.fit(x_train, y_train, time_limit=12 * 60 * 60)\n     clf.final_fit(x_train, y_train, x_val, y_val, retrain=True)\n     y = clf.evaluate(x_val, y_val)\n     print(y)\n </denchmark-code>\n \n the following error is raised:\n <denchmark-code>---------------------------------------------------------------------------\n ValueError                                Traceback (most recent call last)\n ~/Software/anaconda3/lib/python3.6/site-packages/autokeras/image_supervised.py in _validate(x_train, y_train)\n      24     try:\n ---> 25         x_train = x_train.astype('float64')\n      26     except ValueError:\n \n ValueError: setting an array element with a sequence.\n \n During handling of the above exception, another exception occurred:\n \n [OUTPUT TRUNCATED]\n </denchmark-code>\n \n The output of print(x_train) is:\n <denchmark-code>array([array([[[169, 173, 174],\n         [169, 173, 174],\n         [169, 173, 174],\n         ...,\n         [187, 187, 179],\n         [184, 183, 178],\n         [182, 181, 176]],\n \n        [[169, 173, 174],\n         [169, 173, 174],\n         [169, 173, 174],\n         ...,\n         [184, 184, 176],\n         [182, 181, 176],\n         [180, 179, 174]],\n \n        [[168, 172, 171],\n         [168, 172, 171],\n         [168, 172, 171],\n         ...,\n         [183, 183, 175],\n         [180, 179, 174],\n         [179, 178, 173]],\n \n        ...,\n \n [OUTPUT TRUNCATED]\n \n        [[ 42,  83, 111],\n         [ 40,  75, 103],\n         [ 69,  96, 123],\n         ...,\n         [238, 239, 234],\n         [237, 238, 233],\n         [238, 239, 234]],\n \n        [[ 45,  86, 114],\n         [ 49,  84, 112],\n         [ 79, 106, 133],\n         ...,\n         [238, 239, 234],\n         [237, 238, 233],\n         [238, 239, 234]],\n \n        [[ 40,  81, 109],\n         [ 51,  86, 114],\n         [ 84, 111, 138],\n         ...,\n         [238, 239, 234],\n         [237, 238, 233],\n         [238, 239, 234]]], dtype=uint8)], dtype=object)\n </denchmark-code>\n \n <denchmark-h:h3>Reproducing Steps</denchmark-h>\n \n Steps to reproduce the behavior:\n \n Step 1: Import dataset using autokeras.image_supervised.load_image_dataset from a folder with jpg images and a labels.csv file.\n Step 2: Execute clf = ImageClassifier(), clf.fit(x_train, y_train).\n \n <denchmark-h:h3>Expected Behavior</denchmark-h>\n \n I expected training on the dataset to start.\n <denchmark-h:h3>Setup Details</denchmark-h>\n \n \n OS type and version: Ubuntu 18.04.1 LTS\n Python: 3.6.5\n autokeras:  0.2.14\n scikit-learn: 0.19.2\n numpy: 1.14.5\n keras: 2.2.2\n scipy: 1.1.0\n tensorflow: 1.10.1\n pytorch: None\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "mlaradji", "commentT": "2018-09-29T09:37:59Z", "comment_text": "\n \t\tI'm getting the same problem using autokeras on colab.\n When I brought in the mnist example, after the reshape x_train was (60000, 28, 28, 1), but using load_image_dataset on jpgs is also giving me a 1D array of arrays. I'm unsure how to reshape it properly.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "mlaradji", "commentT": "2018-09-30T19:14:06Z", "comment_text": "\n \t\tI think I've figured out why I was running into problems. The problem was that my jpg images were not of the same resolution.\n <denchmark-h:h3>Fix?</denchmark-h>\n \n I normalized my images to the same resolution by adding the following lines, and a new option normalized_size, to autokeras.image_supervised.read_images:\n <denchmark-code>import cv2\n ...\n                 img = cv2.imread(img_path)\n                 img = cv2.resize(img, dsize=normalized_size, interpolation=cv2.INTER_CUBIC)\n </denchmark-code>\n \n Executing the following lines results in the desired output:\n <denchmark-code>x_train, y_train = load_image_dataset(csv_file_path=\"data/train/labels.csv\",\n                                       images_path=\"data/train\", normalized_size = (100,100))\n print(x_train.shape)\n print(y_train.shape)\n </denchmark-code>\n \n Output:\n <denchmark-code>(13750, 100, 100, 3)\n (13750,)\n </denchmark-code>\n \n Running the training then proceeds without error.\n <denchmark-h:h3>Pull Request</denchmark-h>\n \n I think requiring that the images be of the same resolution is good behavior, as I've read that usually speeds up the training. I think at least one of the following functionality could be added to autokeras:\n \n I think it is useful having an option in autokeras.image_supervised.load_image_dataset, or perhaps a separate function, to normalize an image dataset to the same resolution. However, there are possible problems that could occur. Reducing an image's resolution could cause data loss, and, depending on the way the resolution is changed, the images might be changed too much and it might throw off the training. Note that my knowledge in this area is very limited.\n help(autokeras.image_supervised.load_image_dataset) could include a line indicating that images need to be of the same size.\n Allow image datasets that have multiple resolutions. This is probably the most desirable, but I foresee that it would require changes to functions outside of image_supervised.py.\n \n If one (or more) of the options seems desirable, I could code in the relevant sections and submit a pull request.\n <denchmark-h:h3>Changed Functions</denchmark-h>\n \n For reference, the following are the changed functions in image_supervised.py:\n <denchmark-code>def read_images(img_file_names, images_dir_path, normalized_size = None):\n     \"\"\"Read the images from the path and return their numpy.ndarray instance.\n         Return a numpy.ndarray instance containing the training data.\n \n     Args:\n         img_file_names: List containing images names.\n         images_dir_path: Path to the directory containing images.\n     \"\"\"\n     x_train = []\n     if os.path.isdir(images_dir_path):\n         for img_file in img_file_names:\n             img_path = os.path.join(images_dir_path, img_file)\n             if os.path.exists(img_path):\n                 #img = ndimage.imread(fname=img_path)\n                 img = cv2.imread(img_path)\n                 img = cv2.resize(img, dsize=normalized_size, interpolation=cv2.INTER_CUBIC)\n                 if len(img.shape) < 3:\n                     img = img[..., np.newaxis]\n                 x_train.append(img)\n             else:\n                 raise ValueError(\"%s image does not exist\" % img_file)\n     else:\n         raise ValueError(\"Directory containing images does not exist\")\n     return np.asanyarray(x_train)\n \n \n def load_image_dataset(csv_file_path, images_path, normalized_size = None):\n     \"\"\"Load images from the files and labels from a csv file.\n \n     Second, the dataset is a set of images and the labels are in a CSV file.\n     The CSV file should contain two columns whose names are 'File Name' and 'Label'.\n     The file names in the first column should match the file names of the images with extensions,\n     e.g., .jpg, .png.\n     The path to the CSV file should be passed through the `csv_file_path`.\n     The path to the directory containing all the images should be passed through `image_path`.\n \n     Args:\n         csv_file_path: CSV file path.\n         images_path: Path where images exist.\n \n     Returns:\n         x: Four dimensional numpy.ndarray. The channel dimension is the last dimension.\n         y: The labels.\n     \"\"\"\n     img_file_name, y = read_csv_file(csv_file_path)\n     x = read_images(img_file_name, images_path, normalized_size = normalized_size)\n     return np.array(x), np.array(y)\n </denchmark-code>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "mlaradji", "commentT": "2018-09-30T21:13:29Z", "comment_text": "\n \t\tAwesome, great work! I figured it was probably due to the different resolutions. I used this code:\n def proc_images():\n \"\"\"\n Returns two arrays:\n x is an array of resized images\n y is an array of labels\n \"\"\"\n <denchmark-code>drone=\"yes\"\n \n x = [] # images as arrays\n y = [] # labels Infiltration or Not_infiltration\n WIDTH = 128\n HEIGHT = 128\n \n for img in images:\n     base = os.path.basename(img)\n     finding = labels[\"Label\"][labels[\"File Name\"] == base].values[0]\n \n     # Read and resize image\n     full_size_image = cv2.imread(img)\n     x.append(cv2.resize(full_size_image, (WIDTH,HEIGHT), interpolation=cv2.INTER_CUBIC))\n \n     # Labels\n     if drone in finding:\n         #finding = str(disease)\n         finding = 1\n         y.append(finding)\n \n     else:\n         #finding = \"Not_\" + str(disease)\n         finding = 0\n         y.append(finding)\n \n return x,y\n </denchmark-code>\n \n which I borrowed from a kaggle kernel: <denchmark-link:https://www.kaggle.com/crawford/resize-and-save-images-as-numpy-arrays-128x128>https://www.kaggle.com/crawford/resize-and-save-images-as-numpy-arrays-128x128</denchmark-link>\n \n to resize the images, and this worked for autokeras. It made me think if there is any automated, or in principle method to find the optimal resizing parameters for any arbitrary set of images, as you rightly point out that resizing can result in information loss or distortion. I don't have a solution for that yet but if I find one I will report it.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "mlaradji", "commentT": "2018-10-09T19:16:32Z", "comment_text": "\n \t\tThe following changes to image_supervised.py worked for me. Used imageio.imread to bring in images and skimage.transform.resize to make all images the same dimension by giving (x, y, z) where z=channels.\n I tried to make a PR but I'm a noob and I think I did it in the wrong place.\n <denchmark-code>def read_images(img_file_names, images_dir_path, normalized_size=None):\n     \"\"\"Read the images from the path and return their numpy.ndarray instance.\n         Return a numpy.ndarray instance containing the training data.\n \n     Args:\n         img_file_names: List containing images names.\n         images_dir_path: Path to the directory containing images.\n         normalized_size: tuple specifying resize shape (x, y, z), z = channels\n     \"\"\"\n     x_train = []\n     if os.path.isdir(images_dir_path):\n         for img_file in img_file_names:\n             img_path = os.path.join(images_dir_path, img_file)\n             if os.path.exists(img_path):\n                 # img = ndimage.imread(fname=img_path)\n                 img = imageio.imread(img_path)\n                 img = resize(img, output_shape=normalized_size, anti_aliasing=True)\n                 if len(img.shape) < 3:\n                     img = img[..., np.newaxis]\n                 x_train.append(img)\n             else:\n                 raise ValueError(\"%s image does not exist\" % img_file)\n     else:\n         raise ValueError(\"Directory containing images does not exist\")\n     return np.asanyarray(x_train)\n </denchmark-code>\n \n \t\t"}}}, "commit": {"commit_id": "73cc4c077eb37ed797cdce325852649e5702b4c6", "commit_author": "Satya Kesav", "commitT": "2018-10-23 15:26:49-05:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "autokeras\\utils.py", "file_new_name": "autokeras\\utils.py", "file_complexity": {"file_NLOC": "134", "file_CCN": "44", "file_NToken": "1033"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "198,199", "deleted_lines": "198,199", "method_info": {"method_name": "read_image", "method_params": "img_path", "method_startline": "197", "method_endline": "199", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "17", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "requirements.txt", "file_new_name": "requirements.txt", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "9", "deleted_lines": null}}}}}}