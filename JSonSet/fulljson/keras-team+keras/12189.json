{"BR": {"BR_id": "12189", "BR_author": "slavikkom", "BRopenT": "2019-02-01T14:26:48Z", "BRcloseT": "2019-02-02T12:51:08Z", "BR_text": {"BRsummary": "Nadam optimizer arguments description missed schedule_decay", "BRdescription": "\n Both documentation <denchmark-link:https://keras.io/optimizers/>https://keras.io/optimizers/</denchmark-link>\n  and the source code <denchmark-link:https://github.com/keras-team/keras/blob/master/keras/optimizers.py#L605>https://github.com/keras-team/keras/blob/master/keras/optimizers.py#L605</denchmark-link>\n  missed the description of an argument schedule_decay. Currently, it is:\n <denchmark-h:h1>Arguments</denchmark-h>\n \n <denchmark-code>    lr: float >= 0. Learning rate.\n     beta_1/beta_2: floats, 0 < beta < 1. Generally close to 1.\n     epsilon: float >= 0. Fuzz factor. If `None`, defaults to `K.epsilon()`.\n </denchmark-code>\n \n While actual list of parameters is: lr=0.002, beta_1=0.9, beta_2=0.999, epsilon=None, schedule_decay=0.004\n I propose to add a line like schedule_decay: float >= 0, determines \"what it actually does\". Could do it myself also.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "slavikkom", "commentT": "2019-02-01T16:20:40Z", "comment_text": "\n \t\tThanks for the report. It strange that our continuous integration system didn't pick up this anomaly. This is an issue. This line: \n \n \n keras/tests/test_documentation.py\n \n \n          Line 115\n       in\n       e59570a\n \n \n \n \n \n \n  \"{} {} arguments are not present in documentation \".format(name, list( \n \n \n \n \n  should have triggered an error.\n Fix for this test welcome.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "slavikkom", "commentT": "2019-02-01T20:12:37Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/gabrieldemarmiesse>@gabrieldemarmiesse</denchmark-link>\n  The test passes because it only checks that methods have a proper docstring (see  in <denchmark-link:https://github.com/keras-team/keras/blob/e59570ae26670f788d6c649191031e4a8824f955/tests/test_documentation.py#L21>here</denchmark-link>\n ). However,  has the function type. I don't think we want to apply  to the init as the docstring in at the class level. Would adding a match between class docstring and init arguments make sense ?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "slavikkom", "commentT": "2019-02-01T20:17:39Z", "comment_text": "\n \t\tYes it would make sense and should be enforced. Since we use it for the docs, the docstring should be correct. This issue shows it. PR welcome to enforce this.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "slavikkom", "commentT": "2019-02-02T12:51:08Z", "comment_text": "\n \t\tFixed in <denchmark-link:https://github.com/keras-team/keras/pull/12192>#12192</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "a1397169ddf8595736c01fcea084c8e34e1a3884", "commit_author": "Raphael Meudec", "commitT": "2019-02-02 13:50:40+01:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "keras\\callbacks.py", "file_new_name": "keras\\callbacks.py", "file_complexity": {"file_NLOC": "1161", "file_CCN": "260", "file_NToken": "6298"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "651,652,653,970,971", "deleted_lines": "659,660,661,975,976"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "keras\\engine\\sequential.py", "file_new_name": "keras\\engine\\sequential.py", "file_complexity": {"file_NLOC": "220", "file_CCN": "42", "file_NToken": "955"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "29", "deleted_lines": null}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "keras\\layers\\core.py", "file_new_name": "keras\\layers\\core.py", "file_complexity": {"file_NLOC": "848", "file_CCN": "106", "file_NToken": "3482"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "53,54,55,631,632", "deleted_lines": null}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "keras\\layers\\cudnn_recurrent.py", "file_new_name": "keras\\layers\\cudnn_recurrent.py", "file_complexity": {"file_NLOC": "488", "file_CCN": "45", "file_NToken": "2918"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "344,345,346,347,348", "deleted_lines": "338,339,340,341,342"}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "keras\\layers\\embeddings.py", "file_new_name": "keras\\layers\\embeddings.py", "file_complexity": {"file_NLOC": "150", "file_CCN": "15", "file_NToken": "616"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "48,49,50", "deleted_lines": null}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "keras\\layers\\local.py", "file_new_name": "keras\\layers\\local.py", "file_complexity": {"file_NLOC": "373", "file_CCN": "24", "file_NToken": "1712"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "50", "deleted_lines": null}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "keras\\layers\\noise.py", "file_new_name": "keras\\layers\\noise.py", "file_complexity": {"file_NLOC": "147", "file_CCN": "19", "file_NToken": "691"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "119,120", "deleted_lines": null}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "keras\\layers\\wrappers.py", "file_new_name": "keras\\layers\\wrappers.py", "file_complexity": {"file_NLOC": "508", "file_CCN": "103", "file_NToken": "3157"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "343", "deleted_lines": null}}}, "file_8": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "keras\\optimizers.py", "file_new_name": "keras\\optimizers.py", "file_complexity": {"file_NLOC": "618", "file_CCN": "107", "file_NToken": "4932"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "535,536,618,619,621,700,701,702", "deleted_lines": "535,617"}}}, "file_9": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "keras\\utils\\data_utils.py", "file_new_name": "keras\\utils\\data_utils.py", "file_complexity": {"file_NLOC": "438", "file_CCN": "87", "file_NToken": "2230"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "653", "deleted_lines": "653"}}}, "file_10": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tests\\test_documentation.py", "file_new_name": "tests\\test_documentation.py", "file_complexity": {"file_NLOC": "129", "file_CCN": "60", "file_NToken": "1058"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "21,22,23,24,25,26", "deleted_lines": null, "method_info": {"method_name": "handle_class_init", "method_params": "name,member", "method_startline": "21", "method_endline": "26", "method_complexity": {"method_NLOC": "6", "method_CCN": "3", "method_NToken": "55", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "36,37,38", "deleted_lines": null, "method_info": {"method_name": "handle_class", "method_params": "name,member", "method_startline": "29", "method_endline": "41", "method_complexity": {"method_NLOC": "10", "method_CCN": "6", "method_NToken": "84", "method_nesting_level": "0"}}}}}}}}