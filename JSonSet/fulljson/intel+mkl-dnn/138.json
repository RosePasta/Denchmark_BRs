{"BR": {"BR_id": "138", "BR_author": "aBleauGenetec", "BRopenT": "2017-10-19T15:03:20Z", "BRcloseT": "2017-10-25T19:03:57Z", "BR_text": {"BRsummary": "_jit_sse42_convolution_fwd_t crashes", "BRdescription": "\n Tested on a CPU supporting SSE4.2, but not AVX, under Windows 10,  with benchdnn:\n benchdnn --conv --mode=P --dir=FWD_D -v9 --perf-template=perf,%d,avg=%0tmsec g1mb1ic3ih227iw227oc96oh55ow55kh11kw11sh4sw4ph0pw0dh0dw0n\"alexnet:conv1\"\n Output:\n run: --dir=FWD_D mb1ic3ih227oc96oh55kh11sh4nalexnet:conv1\n mkldnn implementation: const char *__cdecl mkldnn::impl::cpu::_jit_sse42_convolution_fwd_t<0>::pd_t::name(void) const\n Then a window pop-up: benchdnn.exe has stopped working.\n Changing the input parameters slightly, so that another implementation is chosen works. Example, changing ic3 to ic1 above:\n benchdnn --conv --mode=P --dir=FWD_D -v9 --perf-template=perf,%d,avg=%0tmsec g1mb1ic1ih227iw227oc96oh55ow55kh11kw11sh4sw4ph0pw0dh0dw0n\"alexnet:conv1\"\n Output:\n run: --dir=FWD_D mb1ic1ih227oc96oh55kh11sh4nalexnet:conv1\n mkldnn implementation: const char *__cdecl mkldnn::impl::cpu::_gemm_convolution_fwd_t<0,0,0>::pd_t::name(void) const\n perf,--dir=FWD_D mb1ic1ih227oc96oh55kh11sh4nalexnet:conv1,avg=16.457msec\n tests:1 passed:0 skipped:0 mistrusted:0 unimplemented:0 failed:0\n I also tested the problematic case on a Xeon E5-1620v3 supporting AVX2:\n run: --dir=FWD_D mb1ic3ih227oc96oh55kh11sh4nalexnet:conv1\n mkldnn implementation: const char *__cdecl mkldnn::impl::cpu::_jit_avx2_convolution_fwd_t<0>::pd_t::name(void) const\n perf,--dir=FWD_D mb1ic3ih227oc96oh55kh11sh4nalexnet:conv1,avg=2.65636msec\n tests:1 passed:0 skipped:0 mistrusted:0 unimplemented:0 failed:0\n Then I edited cpuengine.cpp to comment the line enabling the AVX2 implementation:\n //INSTANCE(jit_avx2_convolution_fwd_t),\n and rerun. This time, _jit_sse42_convolution_fwd_t was selected and it crashed in the same manner as on the smaller CPU. I was able to attach a debugger and saw that it was due to an access violation.\n \n Andr\u00e9 Bleau, Genetec\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "aBleauGenetec", "commentT": "2017-10-19T16:04:40Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/aBleauGenetec>@aBleauGenetec</denchmark-link>\n ,\n Thanks for reporting the bug!\n The problem seems to be due to <denchmark-link:https://github.com/01org/mkl-dnn/blob/master/src/cpu/jit_sse42_conv_kernel_f32.hpp#L56>direct rcx register use</denchmark-link>\n , which is the first parameter in Windows cdecl calling convention, while it is not the case for Linux/Mac. Will fix it soon.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "aBleauGenetec", "commentT": "2017-10-25T19:01:14Z", "comment_text": "\n \t\tThanks <denchmark-link:https://github.com/rsdubtso>@rsdubtso</denchmark-link>\n ! I tried your changes and it solves the issue.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "aBleauGenetec", "commentT": "2017-10-25T20:40:54Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rsdubtso>@rsdubtso</denchmark-link>\n ,\n I think you forgot jit_uni_batch_normalization, which also uses rcx.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "aBleauGenetec", "commentT": "2017-10-25T20:48:23Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/aBleauGenetec>@aBleauGenetec</denchmark-link>\n ,\n Could you please point to exact line where you see batch-norm uses %rcx?\n To be more precise, batch-norm uses %rcx via reg_param=abi_param1 (which equals %rcx on Windows), but we should handle that correctly.\n Do you still observe the problem?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "aBleauGenetec", "commentT": "2017-10-26T12:27:37Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/emfomenk>@emfomenk</denchmark-link>\n ,\n In jit_uni_batch_normalization.cpp, lin 103 reads:\n Reg64 dst_simd_iter = rcx;\n As I never used it, I never had a problem with it. I discovered it by searching the code for\n = rcx\n \n Andr\u00e9\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "aBleauGenetec", "commentT": "2017-10-26T14:28:23Z", "comment_text": "\n \t\tHi Andr\u00e9,\n Now I got it :) I haven't seen that line in my repo, because it is already fixed by another <denchmark-link:https://github.com/rsdubtso/mkl-dnn/commit/f25939a284c459965ae6d6efa790e0a1f46f1f34>commit</denchmark-link>\n .\n <denchmark-link:https://github.com/rsdubtso>@rsdubtso</denchmark-link>\n  's <denchmark-link:https://github.com/rsdubtso/mkl-dnn>repo</denchmark-link>\n  is slightly ahead this one, but we will soon promote all the changes here as well. So that you will be able to use just vanilla mkl-dnn.\n P.S. dst_simd_iter (= %rcx) was an unused variable, so everything should be fine with bnorm\n \t\t"}}}, "commit": {"commit_id": "07ce0dbc762115c751ab581c2f5099437324d0fa", "commit_author": "Fomenko, Evarist M", "commitT": "2017-10-19 16:35:25+00:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\cpu\\jit_avx2_1x1_conv_kernel_f32.hpp", "file_new_name": "src\\cpu\\jit_avx2_1x1_conv_kernel_f32.hpp", "file_complexity": {"file_NLOC": "66", "file_CCN": "2", "file_NToken": "387"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "62,63", "deleted_lines": "62,63"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\cpu\\jit_avx2_conv_kernel_f32.hpp", "file_new_name": "src\\cpu\\jit_avx2_conv_kernel_f32.hpp", "file_complexity": {"file_NLOC": "124", "file_CCN": "3", "file_NToken": "806"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "139", "deleted_lines": "139"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\cpu\\jit_avx512_common_1x1_conv_kernel.hpp", "file_new_name": "src\\cpu\\jit_avx512_common_1x1_conv_kernel.hpp", "file_complexity": {"file_NLOC": "66", "file_CCN": "2", "file_NToken": "378"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "69,73", "deleted_lines": "69,73"}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\cpu\\jit_sse42_1x1_conv_kernel_f32.hpp", "file_new_name": "src\\cpu\\jit_sse42_1x1_conv_kernel_f32.hpp", "file_complexity": {"file_NLOC": "63", "file_CCN": "2", "file_NToken": "363"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "61,62", "deleted_lines": "61,62"}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\cpu\\jit_sse42_conv_kernel_f32.hpp", "file_new_name": "src\\cpu\\jit_sse42_conv_kernel_f32.hpp", "file_complexity": {"file_NLOC": "51", "file_CCN": "1", "file_NToken": "324"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "56", "deleted_lines": "56"}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\cpu\\jit_uni_pool_kernel_f32.hpp", "file_new_name": "src\\cpu\\jit_uni_pool_kernel_f32.hpp", "file_complexity": {"file_NLOC": "83", "file_CCN": "13", "file_NToken": "640"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "79", "deleted_lines": "79"}}}}}}