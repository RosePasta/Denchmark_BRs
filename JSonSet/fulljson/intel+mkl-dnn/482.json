{"BR": {"BR_id": "482", "BR_author": "xkszltl", "BRopenT": "2019-05-31T03:21:46Z", "BRcloseT": "2019-06-10T20:46:59Z", "BR_text": {"BRsummary": "LNK2001 on Windows", "BRdescription": "\n <denchmark-h:h3>Environment</denchmark-h>\n \n \n OS version (uname -a) Win10\n Compiler version (gcc --version) VS2019\n CMake version (cmake --version) 3.14\n git hash (git log -1 --format=%H) v0.19 (41be)\n \n Was able to compile on earlier version\n Log attached:\n <denchmark-code>LINK: command \"C:\\PROGRA~2\\MICROS~4\\2019\\ENTERP~1\\VC\\Tools\\MSVC\\1421~1.277\\bin\\Hostx64\\x64\\link.exe /nologo @CMakeFiles\\mkldnn.rsp /out:src\\mkldnn.dll /implib:src\\mkldnn.lib /pdb:pdb\\mkldnn.pdb /dll /version:0.19 /DEBUG:FASTLINK /LTCG:incremental /INCREMENTAL:NO /MANIFEST /MANIFESTFILE:src\\mkldnn.dll.manifest\" failed (exit code 1120) with the following output:\n    Creating library src\\mkldnn.lib and object src\\mkldnn.exp\n gemm_driver.cpp.obj : error LNK2001: unresolved external symbol \"int __cdecl mkldnn::impl::cpu::gemm_s8u8s32_jump_to_gemv_s8u8s32<struct mkldnn::impl::cpu::gemm_info_t<float,float,float> >(struct mkldnn::impl::cpu::gemm_info_t<float,float,float> *)\" (??$gemm_s8u8s32_jump_to_gemv_s8u8s32@U?$gemm_info_t@MMM@cpu@impl@mkldnn@@@cpu@impl@mkldnn@@YAHPEAU?$gemm_info_t@MMM@012@@Z)\n src\\mkldnn.dll : fatal error LNK1120: 1 unresolved externals\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "xkszltl", "commentT": "2019-05-31T16:28:03Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/xkszltl>@xkszltl</denchmark-link>\n , thank you for the report. The issue does not seem to reproduce in out validation. Issues like that may happen if you update the source base without rebuilding the MSVS project. Could you please try clean build?\n If the issue still reproduces please share the CMake log.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "xkszltl", "commentT": "2019-06-02T07:43:15Z", "comment_text": "\n \t\tI build from a clean repo.\n It's in a automated process so there won't be any left over from the previous build.\n Note that I'm talking about v0.19.\n I tried v1.0-pc2 and that works, but since that's not a release yet I'm not sure whether I want to use it in production.\n BTW what's \"pc\" in your context?\n Here's the cmake option I used, and vcvarsall.bat was called previously to setup VS2019 env.\n <denchmark-link:https://github.com/xkszltl/Roaster/blob/c20a5dae376685405b61959116dc3fc24b57d13c/win/pkgs/mkl-dnn.ps1#L34-L44>https://github.com/xkszltl/Roaster/blob/c20a5dae376685405b61959116dc3fc24b57d13c/win/pkgs/mkl-dnn.ps1#L34-L44</denchmark-link>\n \n <denchmark-link:https://github.com/xkszltl/Roaster/blob/c20a5dae376685405b61959116dc3fc24b57d13c/win/pkgs/env/toolchain.ps1#L167>https://github.com/xkszltl/Roaster/blob/c20a5dae376685405b61959116dc3fc24b57d13c/win/pkgs/env/toolchain.ps1#L167</denchmark-link>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "xkszltl", "commentT": "2019-06-03T07:00:08Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/xkszltl>@xkszltl</denchmark-link>\n , the issue you reported is the same as was reported in <denchmark-link:https://github.com/oneapi-src/oneDNN/issues/456>#456</denchmark-link>\n . Unfortunately, that fix didn't come to the mnt-v0 branch (which is used for 0.x releases) by mistake. We will definitely fix it in mnt-v0 branch as well.\n I may suggest you to apply this commit <denchmark-link:https://github.com/oneapi-src/oneDNN/commit/d485a54ac2b07b7349dabd833961415315a18fea>d485a54</denchmark-link>\n  from master branch to fix the issue.\n The reason we didn't catch the issue in our testing is that we do not test MSVS 2019 + Debug configuration yet, and this is the only configuration where the issue may appear.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "xkszltl", "commentT": "2019-06-03T09:37:53Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/densamoilov>@densamoilov</denchmark-link>\n  Thanks!\n Not sure why you can only repro with Debug but I do have  in the code attached above.\n Note that instead of using msbuild, here I used .\n Does that somehow affect the result or is there any hard dependency on \"Visual Studio\" cmake generator?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "xkszltl", "commentT": "2019-06-03T17:45:05Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/xkszltl>@xkszltl</denchmark-link>\n , pc stands for 'preview candidate'. Production-ready version of v1.0 will be available in a few weeks from now.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "xkszltl", "commentT": "2019-06-04T03:33:20Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/xkszltl>@xkszltl</denchmark-link>\n  I wouldn't expect the Ninja generator to affect the default compiler/linker flags, but what I see is that you adjust those flags on your own.\n The original issue is caused by a function call in a dead branch which may or may not be eliminated depending on the compiler.\n In your case, the <denchmark-link:https://docs.microsoft.com/en-us/cpp/build/reference/gl-whole-program-optimization?view=vs-2019>/GL</denchmark-link>\n  option is the one which exposes the issue because it may affect code generation and make the compiler to keep the dead code, which causes the issue. The same happens in Debug mode. In the Release mode, without additional compiler flags the dead code will be eliminated.\n <denchmark-link:https://stackoverflow.com/a/23982816>This is a related answer on Stack Overflow</denchmark-link>\n \n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "xkszltl", "commentT": "2019-06-10T20:46:59Z", "comment_text": "\n \t\tClosing as the target commit was to the mnt-v0 branch and auto-close will only trigger on master.\n \t\t"}}}, "commit": {"commit_id": "dbda56d5a43bfbaebc088b18586e3d6083c06067", "commit_author": "Denis Samoilov", "commitT": "2019-06-03 00:28:55-07:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\cpu\\gemm\\gemm_driver.cpp", "file_new_name": "src\\cpu\\gemm\\gemm_driver.cpp", "file_complexity": {"file_NLOC": "1122", "file_CCN": "315", "file_NToken": "8956"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1308,1309", "deleted_lines": "1308,1309,1310,1311", "method_info": {"method_name": "mkldnn::impl::cpu::gemm_threading_driver", "method_params": "arg", "method_startline": "1293", "method_endline": "1426", "method_complexity": {"method_NLOC": "113", "method_CCN": "29", "method_NToken": "1000", "method_nesting_level": "3"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\cpu\\gemm\\s8x8s32\\jit_avx512_core_gemv_s8u8s32.cpp", "file_new_name": "src\\cpu\\gemm\\s8x8s32\\jit_avx512_core_gemv_s8u8s32.cpp", "file_complexity": {"file_NLOC": "241", "file_CCN": "61", "file_NToken": "1812"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "37,38,39,40", "deleted_lines": null, "method_info": {"method_name": "mkldnn::impl::cpu::gemm_s8u8s32_jump_to_gemv_s8u8s32", "method_params": "arg", "method_startline": "37", "method_endline": "40", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "3"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "33,34", "deleted_lines": null, "method_info": {"method_name": "mkldnn::impl::cpu::gemm_s8u8s32_jump_to_gemv_s8u8s32", "method_params": "arg", "method_startline": "33", "method_endline": "34", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "18", "method_nesting_level": "3"}}}}}}}}