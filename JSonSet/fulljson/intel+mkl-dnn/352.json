{"BR": {"BR_id": "352", "BR_author": "peteryang1", "BRopenT": "2018-11-23T09:54:45Z", "BRcloseT": "2018-11-30T04:47:56Z", "BR_text": {"BRsummary": "get wrong layout when using deconvolution-direct && group != 1", "BRdescription": "\n while I'm calculating a deconv operation, the input_dim is (1,8,1,1) the kernel_dim is (2,4,4,1,1), output_dim is (1,8,1,1), I think the result is incorrect.\n if I name the result of first group g1f1, g1f2, g1f3, g1f4 (4 feature maps) , then the second group g2f1, g2f2, g2f3, g2f4, in mkldnn we place the result in order g1f1, g2f1, g1f2, g2f2, g1f3 g2f3, g1f4, g2f4. it seems not correct to place it this way.\n In group convolution, when group is not 1, we split the channels into groups, after each group finished calculating, we concat the groups into output. deconv is an operation to do the conv in the opposite way, so we should also concat the channels instead of cross laid.\n I have an example , in the op in explained above , I set the weights randomly, bias all zero, and input tensor all one. the model shape is like below:(onnx model)\n <denchmark-link:https://user-images.githubusercontent.com/25981102/48937070-f95ae400-ef47-11e8-805f-6e78ace07c72.png></denchmark-link>\n \n In pytorch the result is:\n <denchmark-link:https://user-images.githubusercontent.com/25981102/48937115-0f68a480-ef48-11e8-97e9-218496ebd0fb.png></denchmark-link>\n \n In mkldnn, the result is:\n <denchmark-link:https://user-images.githubusercontent.com/25981102/48937353-c9601080-ef48-11e8-992d-f4f9231c9fb9.png></denchmark-link>\n \n advises are welcomed! thanks.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "peteryang1", "commentT": "2018-11-25T12:48:09Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/peteryang1>@peteryang1</denchmark-link>\n ,\n Could you please provide a small reproducer with MKL-DNN calls for the issue? Also you may want to start with benchdnn, which is a standalone Intel MKL-DNN performance and correctness benchmark. Please run it as shown below.\n I tried to reproduce it on my side, but failed.\n Here is a <denchmark-link:https://gist.github.com/emfomenk/f6ffe2cb2be1aced27c10d12db2f4dc9>github gist</denchmark-link>\n  with pytorch and mkl-dnn code. Both give the same output:\n $ # Intel MKL-DNN\n $ g++ deconv.cpp -lmkldnn -lgomp -lpthread && ./a.out\n 12, 21, -102, -201,\n \n $ # PyTorch\n $ python deconv.py\n tensor([[[[  12.]], [[  21.]], [[-102.]], [[-201.]]]], grad_fn=<CatBackward>)\n Please note that I didn't pass any to deconv in C++ file just to simplify the tests. However benchdnn (which does use any) doesn't report any issues for the sizes you mentioned.\n $ xMKLDNN_VERBOSE=1 ./tests/benchdnn/benchdnn --deconv mb1_g2ic8oc8_ih1kh1ph0\n 0:PASSED __REPRO: g2mb1ic8ih1oc8oh1kh1n\"wip\"\n tests:1 passed:1 skipped:0 mistrusted:0 unimplemented:0 failed:0\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "peteryang1", "commentT": "2018-11-27T06:30:01Z", "comment_text": "\n \t\tHi, <denchmark-link:https://github.com/emfomenk>@emfomenk</denchmark-link>\n  , I run the code of  <denchmark-link:https://gist.github.com/emfomenk/f6ffe2cb2be1aced27c10d12db2f4dc9>github gist</denchmark-link>\n , it is ok, but if we change the output size to 6, the output of mkldnn is not same with pytorch, the changed code details are:\n For deconv.cpp:\n   to \n  to \n   to \n  to \n For deconv.py:\n  to ,\n   to  ,\n After those changes, I get the output of mkldnn is : , for pytorch, the output is: .\n Can you give me some advice? Thanks.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "peteryang1", "commentT": "2018-11-27T08:05:29Z", "comment_text": "\n \t\tHi, <denchmark-link:https://github.com/emfomenk>@emfomenk</denchmark-link>\n  , and thank @zxb1489479870 for your information. I run your code, the result is the same, but my code is not the same as yours and I think your code has something inappropriate.\n I found the difference between my code and yours:\n \n I set all the desc's layout mkldnn::memory::format::any, so the weight's layout is set to mkldnn::memory::format::blocked automatically.\n \n const auto conv_transpose_desc = mkldnn::deconvolution_forward::desc(\n         mkldnn::prop_kind::forward_inference, _algorithm,\n         mkldnn::memory::desc(\n             { _input_dims }, mkldnn::memory::data_type::f32,\n             mkldnn::memory::format::any),\n         mkldnn::memory::desc(\n             { _kernel_dims }, mkldnn::memory::data_type::f32,\n             mkldnn::memory::format::any),\n         mkldnn::memory::desc(\n             { _bias_dims }, mkldnn::memory::data_type::f32,\n             mkldnn::memory::format::any),\n         mkldnn::memory::desc(\n             { _output_dims }, mkldnn::memory::data_type::f32,\n             mkldnn::memory::format::any),\n         { 1,1 },{ 0,0 },{ 0,0 }, mkldnn::padding_kind::zero);\n \n In pytorch, the input and weight are set like below:\n \n the weight is defined like CNHW(IOHW in mkldnn), so I transposed it to NCHW before put then into mkldnn, then because I set them mkldnn::memory::format::any in 1, I use mkldnn::reorder to reorder the weight to the layout it creates; part code like below:\n \n     std::vector<float> kernel_temp(4*8*1*1);\n     if (integrated_transpose(4,8,1,1, kernel,cnhw, kernel_temp.data(),nchw) == 0)//transpose weight from cnhw to nchw\n     {\n         source_layout = nnb_tensor_layout_nchw;\n     }\n     mkldnn::memory::format source_layout_mkldnn;\n     switch (source_layout)\n     {\n     case nnb_tensor_layout_nchw:\n         source_layout_mkldnn = mkldnn::memory::format::goihw;\n         break;\n     default:\n         return EINVAL;\n     }\n     auto source_kernel_memory = mkldnn::memory(\n         { { { kernel_dims },\n             mkldnn::memory::data_type::f32,\n             source_layout_mkldnn },\n           *reinterpret_cast<mkldnn::engine*>(mkldnn_runtime) },\n         kernel_temp.data());\n     auto target_kernel_memory = mkldnn::memory(\n         pdd->conv_transpose_primitive_desc.weights_primitive_desc(), workspace);\n     auto reorder = mkldnn::reorder(source_kernel_memory, target_kernel_memory);\n pytorch code is the same as yours.\n this is the difference I found, hope to get some advises from you.Thanks!\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "peteryang1", "commentT": "2018-11-28T13:22:59Z", "comment_text": "\n \t\toK, first of all I am sorry for my example.\n By coincidence I chose the symmetric weights and didn't notice the issue. I updated the <denchmark-link:https://gist.github.com/emfomenk/f6ffe2cb2be1aced27c10d12db2f4dc9>gist</denchmark-link>\n .\n There are the following changes there:\n \n Weights matrix is not symmetric now {10, 1, 1, 10, ...} --> {10, 2, 1, 10, ...} to reproduce the issue\n Weights format can be passed at compile time via -DGWEI_FMT=goihw or -DGWEI_FMT=giohw\n I added deconv_with_any.cpp that demonstrates how to run deconvolution in appropriate way (using any at creation) [*]\n \n Original gist used goihw format for weights. However it turned out that PyTorch uses giohw format for weights in deconvolution (in opposite to goihw format for weights in convolution). The reason is deconvolution in PyTorch wants to reuse backward pass of convolution. Thanks @zxb1489479870 for pointing on that.\n Once I replaced goihw with giohw all deconv.py, deconv.cpp, and deconv_with_any.cpp gave the same result.\n .\n The latest version of Intel MKL-DNN doesn't support  and  formats. There are simply no value in the corresponding enum. I prepared a quick patch that adds support for those formats. You can find it <denchmark-link:https://gist.github.com/emfomenk/1c5b78333d0eede05b796f85ccf48192>here</denchmark-link>\n  and apply it against the latest master branch. I hope we will soon promote this patch, and you will be able to use these formats out-of-the-box.\n Applying this patch is the recommended way to make deconvolution + reorders work as you want.\n There is a way to make Intel MKL-DNN work even without this patch but that would be hacky... so I would suggest not doing that.\n <denchmark-h:hr></denchmark-h>\n \n [*] Please note that currently creating deconvolution with any is the only way to get performant primitive. If you force deconvolution to use user-specified format deconvolution would be horribly slow. This is a known issue and will be fixed in future Intel MKL-DNN releases.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "peteryang1", "commentT": "2018-11-29T08:33:21Z", "comment_text": "\n \t\tafter I set the reorder desc to mkldnn::memory::format::giohw, it really works right. it seems your patch does solve this problem. hope to see it merged to the master branch!\n I got another small mistake, while I'm building the latest mkldnn, the 25 line of utils.cmake gets an error, seems it's a small bug, deleting this line solves this problem.\n the content is:\n include(\"cmake/options.cmake\")\n but cmake cannot find this file.\n thanks again for your help!\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "peteryang1", "commentT": "2018-11-29T08:40:10Z", "comment_text": "\n \t\tGreat, thanks for confirming and willing to test the patch!\n \n got another small mistake, while I'm building the latest mkldnn, ...\n \n Hmm, this is super strange \n The file exists, <denchmark-link:https://github.com/intel/mkl-dnn/blob/master/cmake/options.cmake>here it is</denchmark-link>\n . May I ask to clean the build directory completely and try to rebuild from the scratch? Seems like the problem might cause by applying the patch or something like that...\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "peteryang1", "commentT": "2018-11-29T08:58:49Z", "comment_text": "\n \t\tI tried cleaning the cache, it still causes an error. this line is added recently, seems useless, you can check it later, not a big problem.\n thank again for your help on the convtranspose.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "peteryang1", "commentT": "2018-11-29T09:22:22Z", "comment_text": "\n \t\tseems it's my mistake, I rewrite the cmake file to find mkldnn. so the root of cmake is not the root of mkldnn. sorry-.-\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "peteryang1", "commentT": "2018-11-29T09:24:02Z", "comment_text": "\n \t\tNo problem. Thanks for confirming that! :)\n I will leave the bug open until promote PyTorch formats to master.\n \t\t"}}}, "commit": {"commit_id": "8d87ea962a34e7c2f975879e2260383cf5242f6a", "commit_author": "Fomenko, Evarist M", "commitT": "2018-11-29 01:46:09-08:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "include\\mkldnn.hpp", "file_new_name": "include\\mkldnn.hpp", "file_complexity": {"file_NLOC": "2654", "file_CCN": "290", "file_NToken": "19354"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "627,670", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "include\\mkldnn_types.h", "file_new_name": "include\\mkldnn_types.h", "file_complexity": {"file_NLOC": "449", "file_CCN": "0", "file_NToken": "1297"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "191,192,193,211,212,213", "deleted_lines": null}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\common\\c_types_map.hpp", "file_new_name": "src\\common\\c_types_map.hpp", "file_complexity": {"file_NLOC": "315", "file_CCN": "1", "file_NToken": "1691"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "142,183", "deleted_lines": null}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\common\\format_traits.hpp", "file_new_name": "src\\common\\format_traits.hpp", "file_complexity": {"file_NLOC": "176", "file_CCN": "9", "file_NToken": "1954"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "128,175", "deleted_lines": null}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "src\\common\\memory_desc_wrapper.cpp", "file_new_name": "src\\common\\memory_desc_wrapper.cpp", "file_complexity": {"file_NLOC": "860", "file_CCN": "308", "file_NToken": "7564"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1004,1033", "deleted_lines": null, "method_info": {"method_name": "mkldnn::impl::memory_desc_wrapper::compute_blocking", "method_params": "memory_desc", "method_startline": "971", "method_endline": "1081", "method_complexity": {"method_NLOC": "109", "method_CCN": "107", "method_NToken": "954", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "712,713,714,715,716,717", "deleted_lines": null, "method_info": {"method_name": "mkldnn::impl::fill_giohw", "method_params": "md", "method_startline": "712", "method_endline": "717", "method_complexity": {"method_NLOC": "5", "method_CCN": "2", "method_NToken": "46", "method_nesting_level": "3"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "387,388,389,390,391,392", "deleted_lines": null, "method_info": {"method_name": "mkldnn::impl::fill_iohw", "method_params": "md", "method_startline": "387", "method_endline": "392", "method_complexity": {"method_NLOC": "5", "method_CCN": "2", "method_NToken": "44", "method_nesting_level": "3"}}}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\common\\mkldnn_debug.cpp", "file_new_name": "src\\common\\mkldnn_debug.cpp", "file_complexity": {"file_NLOC": "214", "file_CCN": "190", "file_NToken": "1786"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "75,83", "deleted_lines": null, "method_info": {"method_name": "mkldnn_fmt2str", "method_params": "v", "method_startline": "56", "method_endline": "174", "method_complexity": {"method_NLOC": "119", "method_CCN": "116", "method_NToken": "1051", "method_nesting_level": "0"}}}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\common\\type_helpers.hpp", "file_new_name": "src\\common\\type_helpers.hpp", "file_complexity": {"file_NLOC": "262", "file_CCN": "73", "file_NToken": "1414"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "125,166", "deleted_lines": null, "method_info": {"method_name": "mkldnn::impl::types::format_normalize", "method_params": "fmt", "method_startline": "85", "method_endline": "198", "method_complexity": {"method_NLOC": "109", "method_CCN": "2", "method_NToken": "240", "method_nesting_level": "3"}}}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\benchdnn\\dnn_types.cpp", "file_new_name": "tests\\benchdnn\\dnn_types.cpp", "file_complexity": {"file_NLOC": "400", "file_CCN": "169", "file_NToken": "2585"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "105", "deleted_lines": null, "method_info": {"method_name": "fmt2data_kind", "method_params": "fmt", "method_startline": "75", "method_endline": "133", "method_complexity": {"method_NLOC": "54", "method_CCN": "48", "method_NToken": "165", "method_nesting_level": "0"}}}}}, "file_8": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\benchdnn\\mkldnn_debug.cpp", "file_new_name": "tests\\benchdnn\\mkldnn_debug.cpp", "file_complexity": {"file_NLOC": "123", "file_CCN": "7", "file_NToken": "605"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "99,118", "deleted_lines": null, "method_info": {"method_name": "str2fmt", "method_params": "str", "method_startline": "71", "method_endline": "166", "method_complexity": {"method_NLOC": "90", "method_CCN": "1", "method_NToken": "448", "method_nesting_level": "0"}}}}}, "file_9": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\gtests\\mkldnn_test_common.hpp", "file_new_name": "tests\\gtests\\mkldnn_test_common.hpp", "file_complexity": {"file_NLOC": "449", "file_CCN": "144", "file_NToken": "3581"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "240,262", "deleted_lines": null, "method_info": {"method_name": "create_md", "method_params": "dims,data_type,fmt", "method_startline": "221", "method_endline": "298", "method_complexity": {"method_NLOC": "75", "method_CCN": "59", "method_NToken": "429", "method_nesting_level": "0"}}}}}, "file_10": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tests\\gtests\\test_reorder.cpp", "file_new_name": "tests\\gtests\\test_reorder.cpp", "file_complexity": {"file_NLOC": "324", "file_CCN": "17", "file_NToken": "5453"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "336,337,338,339,340", "deleted_lines": "336"}}}}}}