{"BR": {"BR_id": "918", "BR_author": "lidanqing-intel", "BRopenT": "2020-12-11T02:40:27Z", "BRcloseT": "2021-01-05T00:27:21Z", "BR_text": {"BRsummary": "Interpolate formula fail on corner conditions", "BRdescription": "\n <denchmark-h:h1>Summary</denchmark-h>\n \n Hi, I doubt there is some error in formula in <denchmark-link:https://docs.oneapi.com/versions/latest/onednn/dev_guide_resampling.html>https://docs.oneapi.com/versions/latest/onednn/dev_guide_resampling.html</denchmark-link>\n \n I implemented an interface calling oneDNN resampling kernel in PaddlePaddle. When working on unittest, I have some problems.\n If I use formula in the API to make expected results\n <denchmark-link:https://user-images.githubusercontent.com/47151829/101854143-390dbc00-3b61-11eb-903d-fe803937add6.png></denchmark-link>\n \n All unittest failed.\n If I use following formula\n src(n, ic, ih, iw) = src(n, ic, min(max(ih, 0), IH-1), min(max(iw, 0), IW-1))\n some unit tests passed, but some still fail.\n Can you please suggest if following calculation is correct? Thank you\n <denchmark-h:h1>URLs</denchmark-h>\n \n oneDNN Interpolate doc: <denchmark-link:https://docs.oneapi.com/versions/latest/onednn/dev_guide_resampling.html>https://docs.oneapi.com/versions/latest/onednn/dev_guide_resampling.html</denchmark-link>\n \n <denchmark-h:h1>Additional details</denchmark-h>\n \n My unittest reference results are calculated as follows:\n <denchmark-code>    batch_size, channel, in_h, in_w = input.shape\n     fh = out_h * 1.0 / in_h\n     fw = out_w * 1.0 / in_w\n \n     out = np.zeros((batch_size, channel, out_h, out_w))\n     for oh in range(out_h):\n         h0 = int(math.floor((oh + 0.5) / fh - 0.5))\n         h1 = int(math.ceil((oh + 0.5) / fh - 0.5))\n         Wh = (oh + 0.5) / fh - 0.5 - h0\n         for ow in range(out_w):\n             w0 = int(math.floor((ow + 0.5) / fw - 0.5))\n             w1 = int(math.ceil((ow + 0.5) / fw - 0.5))\n             Ww = (ow + 0.5) / fw - 0.5 - w0\n             h0 = min(h0, in_h - 1)\n             h1 = min(h1, in_h - 1)  \n             w0 = min(w0, in_w - 1)\n             w1 = min(w1, in_w - 1)\n             input_h0_w0 = input[:, :, max(0, h0), max(0, w0)]\n             input_h1_w0 = input[:, :, max(0, h1), max(0, w0)]\n             input_h0_w1 = input[:, :, max(0, h0), max(0, w1)]\n             input_h1_w1 = input[:, :, max(0, h1), max(0, w1)]\n             out[:, :, oh,\n                 ow] = input_h0_w0 * Wh * Ww + input_h1_w0 * (\n                     1 - Wh) * Ww + input_h0_w1 * Wh * (\n                         1 - Ww) + input_h1_w1 * (1 - Wh) * (1 - Ww)\n \n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "lidanqing-intel", "commentT": "2020-12-11T03:57:13Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/lidanqing-intel>@lidanqing-intel</denchmark-link>\n , thanks for the question.\n Resampling is not a straightforward operation and has tons of edge cases.\n \n \n The formula you refer is about boundary conditions and I don't see how it's different from the one you are using.\n \n \n Regarding rest computations, we moved away from dividing on scale factor due to correctness issues. E.g. h0 = int(math.floor((oh + 0.5) / fh - 0.5)) we validate as h0 = int(math.floor((oh + 0.5) * in_h / out_h - 0.5)). This gives the best accuracy from our testing of multiple sizes for forward and backward. Rest differences may be double checked with benchdnn: https://github.com/oneapi-src/oneDNN/blob/master/tests/benchdnn/resampling/ref_resampling.cpp. This is the way we ensure operation correctness.\n \n \n To proceed further we will need the DNNL_VERBOSE output for failed cases (at least one or two) and the output of get versus expected.\n \n \n Thanks.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "lidanqing-intel", "commentT": "2020-12-11T21:52:47Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/lidanqing-intel>@lidanqing-intel</denchmark-link>\n , you convinced me something is wrong with these formulae. It's definitely not a  but  for ih < 0. But deeper look makes actually these formulae senseless since they don't represent any connection with the reality from math point of view. We will try to make math statements more precise but one should read these assumptions that border values are remain the same.\n Thanks for your input on this one. If there are more things to clarify, feel free to ask them, please. Thanks.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "lidanqing-intel", "commentT": "2020-12-13T00:56:11Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/dzarukin>@dzarukin</denchmark-link>\n   I found another place in the doc that is not aligned with the reference code. The formula in the doc\n <denchmark-link:https://user-images.githubusercontent.com/47151829/102000218-697e6300-3ce5-11eb-8ff3-d75c536e3417.png></denchmark-link>\n \n should be changed to\n <denchmark-code>dst[n,c,oh,ow] = src(n,c,ih0,iw0)* (1 - Wh) * (1 - Ww) + \n                  src(n,c,ih1,iw0)* Wh * (1 - Ww) + \n                  src(n,c,ih0,iw1)* (1 - Wh) * Ww +\n                  src(n,c,ih1,iw1)* Wh * Ww\n </denchmark-code>\n \n After using second formula, all my unit tests passed! Thank you for pointing me the reference code link ~\n Because I am enabling oneDNN resampling kernel in PaddlePaddle framework. And Baidu require large number of unit tests to check border conditions. That is why I need to implement this resampling myself in python, to compare if the oneDNN kernel results is the same as my python calculation. Thank you very much for you help !\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "lidanqing-intel", "commentT": "2021-01-05T00:27:19Z", "comment_text": "\n \t\tFixed with <denchmark-link:https://github.com/oneapi-src/oneDNN/commit/58e5ee23ffba463ae2f4584c2cdc49b584993ce2>58e5ee2</denchmark-link>\n . Documentation is updated <denchmark-link:https://oneapi-src.github.io/oneDNN/dev_guide_resampling.html>online</denchmark-link>\n .\n Thank you for the report!\n \t\t"}}}, "commit": {"commit_id": "58e5ee23ffba463ae2f4584c2cdc49b584993ce2", "commit_author": "Dmitrii Zarukin", "commitT": "2020-12-22 18:27:07-08:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "doc\\primitives\\resampling.md", "file_new_name": "doc\\primitives\\resampling.md", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "34,35,36,37,38,39,40,41,58,59,60,61", "deleted_lines": "34,35,36,53,54,55,56"}}}}}}