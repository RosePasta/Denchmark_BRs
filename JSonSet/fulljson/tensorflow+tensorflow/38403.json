{"BR": {"BR_id": "38403", "BR_author": "keithchugg", "BRopenT": "2020-04-09T19:52:33Z", "BRcloseT": "2020-06-25T03:18:51Z", "BR_text": {"BRsummary": "model.reset_states() does not work for bidirectional-RNNs in tf.keras", "BRdescription": "\n System information\n \n \n Have I written custom code (as opposed to using a stock\n example script provided in TensorFlow): YES\n \n \n OS Platform and Distribution (e.g.,\n Linux Ubuntu 16.04): Ubuntu 18.04 LTS\n \n \n TensorFlow installed from (source or\n binary): binary\n \n \n TensorFlow version (use command below):\n TF 2.1\n and\n tf-nightly==2.2.0.dev20200407\n (both have bug around this issue, but different issues)\n \n \n Python version:  3.7.4\n \n \n CUDA/cuDNN version: 10.1, 7.6.5\n \n \n GPU model and memory: 2080ti, 11GB.  Bug is on both CPU/GPU.\n \n \n Describe the current behavior\n model.reset_states() does not work for bidirectional, stateful recurrent layers (bidi-RNNs).\n TF 2.1: model.reset_states() does nothing for stateful bidi-RNNs.\n tf-nightly: calling model.reset_states() for stateful bidi-RNNs causes a crash\n \n This was reported as a bug in TF 2.0 -- <denchmark-link:https://github.com/tensorflow/tensorflow/issues/34055>model.reset_states() does nothing for bidi-RNNs</denchmark-link>\n .  I thought this was fixed in tf-nightly at that time, but has returned in TF 2.1.\n model.reset_states() for standard RNNs changed in TF 2.1. has the following behavior:\n \n if model is stateful with NO initial state input: resets state to zero\n if model is stateful with initial state input: resets state to state input\n otherwise the state is carried over form the last call.\n \n Thus the expected behavior for stateful bidi-RNNs is:\n \n if model is stateful with NO initial state input: resets fwd and bwd state to zero\n if model is stateful with initial state input: resets fwd state to fwd state input and  resets bwd state to bwd state input\n otherwise the fwd state and bwd state are carried over form the last call (as is done in stateful bidi-RNNs).\n \n Standalone code to reproduce the issue\n Code to show this behavior with no state-inputs:\n import os\n os.environ['CUDA_DEVICE_ORDER']='PCI_BUS_ID'\n os.environ['CUDA_VISIBLE_DEVICES']=''\n \n import numpy as np\n from tensorflow.keras.layers import Input, Dense, SimpleRNN, GRU, LSTM, Bidirectional\n from tensorflow.keras.models import Model\n \n REC = LSTM\n \n sequence_length = 3\n feature_dim = 1\n features_in = Input(batch_shape=(1, sequence_length, feature_dim)) \n \n rnn_out = Bidirectional( REC(1, activation=None, use_bias=False, return_sequences=True, return_state=False, stateful=False))(features_in)\n stateless_model = Model(inputs=[features_in], outputs=[rnn_out])\n \n stateful_rnn_out = Bidirectional( REC(1, activation=None, use_bias=False, return_sequences=True, return_state=False, stateful=True))(features_in)\n stateful_model = Model(inputs=features_in, outputs=stateful_rnn_out)\n \n stateful_model.set_weights( stateless_model.get_weights() )\n \n x_in = np.random.normal(0,10,sequence_length)\n x_in = x_in.reshape( (1, sequence_length, feature_dim) )\n \n def print_bidi_out(non_stateful_out, stateful_out):\n \tfb = ['FWD::', 'BWD::']\n \n \tfor i in range(2):\n \t\tprint(fb[i])\n \t\tprint(f'non_stateful: {non_stateful_out.T[i]}')\n \t\tprint(f'stateful: {stateful_out.T[i]}')\n \t\tprint(f'delta: {stateful_out.T[i]-non_stateful_out.T[i]}')\n \n \n non_stateful_out = stateless_model.predict(x_in).reshape((sequence_length,2))\n stateful_out = stateful_model.predict(x_in).reshape((sequence_length,2))\n print_bidi_out(non_stateful_out, stateful_out)\n \n non_stateful_out = stateless_model.predict(x_in).reshape((sequence_length,2))\n stateful_out = stateful_model.predict(x_in).reshape((sequence_length,2))\n print_bidi_out(non_stateful_out, stateful_out)\n \n print('\\n** RESETING STATES in STATEFUL MODEL **\\n')\n stateful_model.reset_states()\n non_stateful_out = stateless_model.predict(x_in).reshape((sequence_length,2))\n stateful_out = stateful_model.predict(x_in).reshape((sequence_length,2))\n print_bidi_out(non_stateful_out, stateful_out)\n Code to demo with initial-state inputs:\n import os\n os.environ['CUDA_DEVICE_ORDER']='PCI_BUS_ID'\n os.environ['CUDA_VISIBLE_DEVICES']=''\n \n import numpy as np\n from tensorflow.keras.layers import Input, Dense, SimpleRNN, GRU, LSTM, Bidirectional\n from tensorflow.keras.models import Model\n \n REC = LSTM\n \n sequence_length = 3\n feature_dim = 1\n features_in = Input(batch_shape=(1, sequence_length, feature_dim)) \n state_h_fwd_in = Input(batch_shape=(1, 1))\n state_h_bwd_in = Input(batch_shape=(1, 1))\n state_c_fwd_in = Input(batch_shape=(1, 1))\n state_c_bwd_in = Input(batch_shape=(1, 1))\n \n four_state_shape = [state_h_fwd_in, state_c_fwd_in, state_h_bwd_in, state_c_bwd_in]\n two_state_shape = [state_h_fwd_in, state_h_bwd_in]\n \n if REC == LSTM:\n     rnn_out = Bidirectional( REC(1, activation='linear', use_bias=False, return_sequences=True, return_state=False, stateful=False))(features_in, initial_state=four_state_shape)\n     stateful_rnn_out = Bidirectional( REC(1, activation='linear', use_bias=False, return_sequences=True, return_state=False, stateful=True))(features_in, initial_state=four_state_shape)\n     rnn_inputs = [features_in, state_h_fwd_in, state_c_fwd_in, state_h_bwd_in, state_c_bwd_in]\n else:\n     if REC == SimpleRNN:\n         rnn_out = Bidirectional( REC(1, activation='linear', use_bias=False, return_sequences=True, return_state=False, stateful=False))(features_in, initial_state=two_state_shape)\n         stateful_rnn_out = Bidirectional( REC(1, activation='linear', use_bias=False, return_sequences=True, return_state=False, stateful=True))(features_in, initial_state=two_state_shape)\n     else:\n         rnn_out = Bidirectional( REC(1, activation='linear', use_bias=False, return_sequences=True, return_state=False, stateful=False))(features_in, initial_state=two_state_shape)\n         stateful_rnn_out = Bidirectional( REC(1, activation='linear', use_bias=False, return_sequences=True, return_state=False, stateful=True))(features_in, initial_state=two_state_shape)\n     rnn_inputs = [features_in, state_h_fwd_in, state_h_bwd_in]\n \n stateless_model = Model(inputs=rnn_inputs, outputs=rnn_out)\n stateful_model = Model(inputs=rnn_inputs, outputs=stateful_rnn_out)\n \n \n # toy_weights = [np.asarray([[ 1.0]], dtype=np.float32), np.asarray([[0.5 ]], dtype=np.float32), np.asarray([[ -1.0 ]], dtype=np.float32), np.asarray([[ -0.5 ]], dtype=np.float32)]\n # stateless_model.set_weights(toy_weights)\n # stateful_model.set_weights(toy_weights)\n \n stateful_model.set_weights( stateless_model.get_weights() )\n \n stateful_model.save('temp_stateful.h5')\n stateless_model.save('temp_stateless.h5')\n \n x_in = np.random.normal(0,10,sequence_length)\n x_in = np.asarray([1,0,0])\n x_in = x_in.reshape( (1, sequence_length, feature_dim) )\n \n fwd_initial_h = np.asarray(2.75).reshape(1,1)\n fwd_initial_c = np.asarray(1.3).reshape(1,1)\n bwd_initial_h = np.asarray(-2.0).reshape(1,1)\n bwd_initial_c = np.asarray(-1.2).reshape(1,1)\n \n # fwd_initial_h = np.asarray(np.random.normal(0,10)).reshape(1,1)\n # fwd_initial_h = np.asarray(np.random.normal(0,10)).reshape(1,1)\n # bwd_initial_h = np.asarray(np.random.normal(0,10)).reshape(1,1)\n # fwd_initial_c = np.asarray(np.random.normal(0,10)).reshape(1,1)\n # bwd_initial_c = np.asarray(np.random.normal(0,10)).reshape(1,1)\n \n if REC == LSTM:\n     rnn_input = [x_in, fwd_initial_h, fwd_initial_c, bwd_initial_h, bwd_initial_c]\n else:\n     rnn_input = [x_in, fwd_initial_h, bwd_initial_h] \n     \n \n def print_bidi_out(non_stateful_out, stateful_out):\n \tfb = ['FWD::', 'BWD::']\n \n \tfor i in range(2):\n \t\tprint(fb[i])\n \t\tprint(f'non_stateful: {non_stateful_out.T[i]}')\n \t\tprint(f'stateful: {stateful_out.T[i]}')\n \t\tprint(f'delta: {stateful_out.T[i]-non_stateful_out.T[i]}')\n \n non_stateful_out = stateless_model.predict(rnn_input).reshape((sequence_length,2))\n stateful_out = stateful_model.predict(rnn_input).reshape((sequence_length,2))\n print_bidi_out(non_stateful_out, stateful_out)\n \n non_stateful_out = stateless_model.predict(rnn_input).reshape((sequence_length,2))\n stateful_out = stateful_model.predict(rnn_input).reshape((sequence_length,2))\n print_bidi_out(non_stateful_out, stateful_out)\n \n print('\\n** RESETING STATES in STATEFUL MODEL **\\n')\n stateful_model.reset_states()\n non_stateful_out = stateless_model.predict(rnn_input).reshape((sequence_length,2))\n stateful_out = stateful_model.predict(rnn_input).reshape((sequence_length,2))\n print_bidi_out(non_stateful_out, stateful_out)\n Other info / logs Include any logs or source code that would be helpful to\n diagnose the problem. If including tracebacks, please include the full\n traceback. Large logs and files should be attached.\n sample output for a SimpleRNN with input states -- using TF 2.1:\n <denchmark-code>FWD::\n non_stateful: [7.375   3.6875  1.84375]\n stateful: [7.375   3.6875  1.84375]\n delta: [0. 0. 0.]\n BWD::\n non_stateful: [ 11.5 -25.   50. ]\n stateful: [ 11.5 -25.   50. ]\n delta: [0. 0. 0.]\n FWD::\n non_stateful: [7.375   3.6875  1.84375]\n stateful: [1.921875   0.9609375  0.48046875]\n delta: [-5.453125  -2.7265625 -1.3632812]\n BWD::\n non_stateful: [ 11.5 -25.   50. ]\n stateful: [-2.4375  2.875  -5.75  ]\n delta: [-13.9375  27.875  -55.75  ]\n \n ** RESETING STATES in STATEFUL MODEL **\n \n FWD::\n non_stateful: [7.375   3.6875  1.84375]\n stateful: [1.2402344 0.6201172 0.3100586]\n delta: [-6.1347656 -3.0673828 -1.5336914]\n BWD::\n non_stateful: [ 11.5 -25.   50. ]\n stateful: [-0.6953125 -0.609375   1.21875  ]\n delta: [-12.1953125  24.390625  -48.78125  ]\n </denchmark-code>\n \n Crash when using 4/7 tf-nightly:\n <denchmark-code>Traceback (most recent call last):\n   File \"temp_bidi_state_in.py\", line 89, in <module>\n     stateful_model.reset_states()\n   File \"/home/keith/.pyenv/versions/tfn/lib/python3.7/site-packages/tensorflow/python/keras/engine/network.py\", line 473, in reset_states\n     layer.reset_states()\n   File \"/home/keith/.pyenv/versions/tfn/lib/python3.7/site-packages/tensorflow/python/keras/layers/wrappers.py\", line 676, in reset_states\n     self.forward_layer.reset_states()\n   File \"/home/keith/.pyenv/versions/tfn/lib/python3.7/site-packages/tensorflow/python/keras/layers/recurrent.py\", line 903, in reset_states\n     spec_shape = nest.flatten(self.input_spec[0])[0].shape\n AttributeError: 'NoneType' object has no attribute 'shape'\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "keithchugg", "commentT": "2020-04-13T08:00:59Z", "comment_text": "\n \t\tWorks without issues with <denchmark-link:https://colab.research.google.com/gist/amahendrakar/4dcad65983174e0f482251cf99f534d0/38403.ipynb>TF v2.1</denchmark-link>\n . Was able to reproduce the issue with <denchmark-link:https://colab.research.google.com/gist/amahendrakar/230e360bfceb18658b1c800e4a7fd6f6/38403-2-2.ipynb>TF v2.2.0-rc2</denchmark-link>\n  and <denchmark-link:https://colab.research.google.com/gist/amahendrakar/65a2ce796d53b8b649918ee5bbf36cb3/38403-tf-nightly.ipynb>TF-nightly</denchmark-link>\n . Please find the attached gist. Thanks!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "keithchugg", "commentT": "2020-04-13T16:05:51Z", "comment_text": "\n \t\t\n Works without issues with TF v2.1. Was able to reproduce the issue with TF v2.2.0-rc2 and TF-nightly. Please find the attached gist. Thanks!\n \n For TF 2.1, it is not crashing, but it is not resetting the states in the stateful bidi models.  The results after the state-reset should be the same for the stateful and nonstateful models.  The only case that is working correctly is the when there is no initial-state-input and TF 2.2rc or tf-nightly is used.  This is consistent with my original post.  Sorry, it is a bit detailed, but here is teh summary:\n \n TF 2.1: state reset for stateful models does nothing.  Should resets the state to zero if no initial state is input or back to the input initial state if it is provided (same as uni-directional RNNs).\n TF 2.2rc and tf-nightly: behavior is correct when no initial state is provided, but reset_state crashes when initial-state is input to stateful models.\n \n Fixing the 2.2/nightly behavior would be a great fix as 2.2 is on the way..  Thanks!!\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "keithchugg", "commentT": "2020-04-13T17:39:46Z", "comment_text": "\n \t\tThanks for reporting the issue. Will take a closer look.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "keithchugg", "commentT": "2020-06-25T00:02:13Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/keithchugg>@keithchugg</denchmark-link>\n  I think this was resolved in recent  by <denchmark-link:https://github.com/qlzh727>@qlzh727</denchmark-link>\n  . I checked it with  and cannot reproduce the issue. <denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/be5bbce7844f13ffc44fda50d392e2fb/38403-tf-nightly.ipynb>Here</denchmark-link>\n  is the gist for your reference.\n Please verify once and close the issue, if this was resolved for you. Thanks!\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "keithchugg", "commentT": "2020-06-25T03:18:50Z", "comment_text": "\n \t\tOh, thanks for the notice, I think this should be fixed already. I just forgot to close the github issue.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "keithchugg", "commentT": "2020-06-25T03:18:53Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38403>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38403>No</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "60b167181081c14ff88c77ae62049cab8a5ba4c7", "commit_author": "Scott Zhu", "commitT": "2020-04-14 10:15:01-07:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "0.896551724137931", "commit_Nprams": "0.896551724137931"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\keras\\layers\\recurrent.py", "file_new_name": "tensorflow\\python\\keras\\layers\\recurrent.py", "file_complexity": {"file_NLOC": "2493", "file_CCN": "304", "file_NToken": "11761"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "697,698,699,700,701,702,703,704", "deleted_lines": "697,698,699,700", "method_info": {"method_name": "__call__", "method_params": "self,inputs,initial_state,constants,kwargs", "method_startline": "654", "method_endline": "718", "method_complexity": {"method_NLOC": "48", "method_CCN": "13", "method_NToken": "320", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\keras\\layers\\recurrent_test.py", "file_new_name": "tensorflow\\python\\keras\\layers\\recurrent_test.py", "file_complexity": {"file_NLOC": "1483", "file_CCN": "106", "file_NToken": "14231"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1378,1379,1380,1381,1383,1384,1385,1386", "deleted_lines": null, "method_info": {"method_name": "test_full_input_spec", "method_params": "self", "method_startline": "1367", "method_endline": "1386", "method_complexity": {"method_NLOC": "19", "method_CCN": "1", "method_NToken": "249", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\keras\\layers\\wrappers_test.py", "file_new_name": "tensorflow\\python\\keras\\layers\\wrappers_test.py", "file_complexity": {"file_NLOC": "1022", "file_CCN": "99", "file_NToken": "10248"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259", "deleted_lines": null, "method_info": {"method_name": "test_full_input_spec", "method_params": "self", "method_startline": "1240", "method_endline": "1259", "method_complexity": {"method_NLOC": "18", "method_CCN": "1", "method_NToken": "259", "method_nesting_level": "1"}}}}}}}}