{"BR": {"BR_id": "12641", "BR_author": "quaeler", "BRopenT": "2017-08-28T04:58:44Z", "BRcloseT": "2018-02-08T00:46:32Z", "BR_text": {"BRsummary": "Improve all-in-memory file copy architecture (Python at least)", "BRdescription": "\n Current file copy (at least via Python  (<denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/platform/gfile.py#L22>gfile.py</denchmark-link>\n \u2192 <denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/io/file_io.py#L371>file_io.py</denchmark-link>\n  \u2192 <denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/io/file_io.i#L113>file_io.i</denchmark-link>\n )) involves copying the source contents into memory, and then writing memory to the destination. For scenarios like <denchmark-link:https://github.com/tensorflow/tensorflow/issues/12630>#12630</denchmark-link>\n  which is working with an 11GB asset, this is unacceptable design.\n file_system.h's WritableFile is not stubbed to allow anything like a streaming, though its RandomAccessFile is. (not entirely, entirely, true - i suppose WriteableFile.Append(const StringPiece& data) could be employed in a streamable fashion -ish.)\n To cull the Python low hanging fruit, at least, please implement <denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/io/file_io.i#L113>file_io.i</denchmark-link>\n  using a regular streaming design instead of the above described current design.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "quaeler", "commentT": "2017-08-28T20:40:29Z", "comment_text": "\n \t\tCreated a PR <denchmark-link:https://github.com/tensorflow/tensorflow/pull/12658>#12658</denchmark-link>\n  for that.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "quaeler", "commentT": "2017-08-30T21:25:41Z", "comment_text": "\n \t\tSlurping the whole file into memory and writing it back out isn't exactly optimal. Streaming would be great. What would be even better is the <denchmark-link:http://man7.org/linux/man-pages/man2/sendfile.2.html>sendfile</denchmark-link>\n  system call, which does it entirely in kernel space. If would be terrific if <denchmark-link:https://github.com/rohan100jain>@rohan100jain</denchmark-link>\n  was able to implement that when src and dst are Unix FS, and do streaming otherwise.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "quaeler", "commentT": "2017-08-31T03:31:17Z", "comment_text": "\n \t\tThe implementation of CopyFile in PR <denchmark-link:https://github.com/tensorflow/tensorflow/pull/12658>#12658</denchmark-link>\n  has been updated with calling  in Linux for posix file systems. Please take a look.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "quaeler", "commentT": "2017-12-20T01:18:55Z", "comment_text": "\n \t\tIt has been 14 days with no activity and this issue has an assignee.Please update the label and/or status accordingly.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "quaeler", "commentT": "2018-01-03T19:11:44Z", "comment_text": "\n \t\tIt has been 14 days with no activity and this issue has an assignee.Please update the label and/or status accordingly.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "quaeler", "commentT": "2018-01-18T19:13:55Z", "comment_text": "\n \t\tNagging Assignee: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "quaeler", "commentT": "2018-02-06T07:42:08Z", "comment_text": "\n \t\tNagging Assignee: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "quaeler", "commentT": "2018-02-06T15:49:13Z", "comment_text": "\n \t\tThere's a PR somewhere adding in-kernel sendfile copy support I spent a lot of time helping to review a while back. I don't know what the status of that is, but I hope the author is generous enough to bring it to completion, because it'd be a great notch in his belt because this isn't an easy problem to solve.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "quaeler", "commentT": "2018-02-06T16:04:32Z", "comment_text": "\n \t\tIt's the PR cited above - <denchmark-link:https://github.com/tensorflow/tensorflow/pull/12658>#12658</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "b1f5f433959406c7aad634c05e85ccd62fd06e87", "commit_author": "Yong Tang", "commitT": "2018-02-07 16:46:31-08:00", "commit_complexity": {"commit_NLOC": "0.1511627906976744", "commit_CCN": "0.38372093023255816", "commit_Nprams": "0.7674418604651163"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow\\core\\platform\\env.cc", "file_new_name": "tensorflow\\core\\platform\\env.cc", "file_complexity": {"file_NLOC": "423", "file_CCN": "89", "file_NToken": "3165"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "284,285,286,287,288,289,290,291,292,293", "deleted_lines": null, "method_info": {"method_name": "tensorflow::Env::CopyFile", "method_params": "src,target", "method_startline": "284", "method_endline": "293", "method_complexity": {"method_NLOC": "10", "method_CCN": "2", "method_NToken": "76", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444", "deleted_lines": null, "method_info": {"method_name": "tensorflow::FileSystemCopyFile", "method_params": "src_fs,src,target_fs,target", "method_startline": "423", "method_endline": "444", "method_complexity": {"method_NLOC": "20", "method_CCN": "4", "method_NToken": "179", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\core\\platform\\env.h", "file_new_name": "tensorflow\\core\\platform\\env.h", "file_complexity": {"file_NLOC": "157", "file_CCN": "18", "file_NToken": "1193"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "217,218,219,387,388,389,390,391", "deleted_lines": null}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\core\\platform\\file_system.cc", "file_new_name": "tensorflow\\core\\platform\\file_system.cc", "file_complexity": {"file_NLOC": "195", "file_CCN": "45", "file_NToken": "1362"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "268,269,270", "deleted_lines": null, "method_info": {"method_name": "tensorflow::FileSystem::CopyFile", "method_params": "src,target", "method_startline": "268", "method_endline": "270", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "28", "method_nesting_level": "1"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\core\\platform\\file_system.h", "file_new_name": "tensorflow\\core\\platform\\file_system.h", "file_complexity": {"file_NLOC": "135", "file_CCN": "17", "file_NToken": "890"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "192,193,194", "deleted_lines": null}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\core\\platform\\posix\\posix_file_system.cc", "file_new_name": "tensorflow\\core\\platform\\posix\\posix_file_system.cc", "file_complexity": {"file_NLOC": "289", "file_CCN": "67", "file_NToken": "1870"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349", "deleted_lines": null, "method_info": {"method_name": "tensorflow::PosixFileSystem::CopyFile", "method_params": "src,target", "method_startline": "285", "method_endline": "349", "method_complexity": {"method_NLOC": "53", "method_CCN": "15", "method_NToken": "386", "method_nesting_level": "1"}}}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\core\\platform\\posix\\posix_file_system.h", "file_new_name": "tensorflow\\core\\platform\\posix\\posix_file_system.h", "file_complexity": {"file_NLOC": "37", "file_CCN": "3", "file_NToken": "285"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "59,60", "deleted_lines": null}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\python\\lib\\io\\file_io.i", "file_new_name": "tensorflow\\python\\lib\\io\\file_io.i", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "113,115,116,120,121", "deleted_lines": "113,115,116,120,121,122,123,124,125,126,127"}}}}}}