{"BR": {"BR_id": "34165", "BR_author": "saikumarGadde", "BRopenT": "2019-11-11T19:06:57Z", "BRcloseT": "2020-10-07T19:55:47Z", "BR_text": {"BRsummary": "tf.keras.backend.sqrt(tf.constant(-1.0)) is 0 which is misleading and tf.sqrt(tf.constant(-1.0)) is 'nan' which is the way it should be.", "BRdescription": "\n System information\n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\n Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No\n TensorFlow installed from (source or binary): Source\n TensorFlow version (use command below): 1.15\n Python version: 3.7\n Bazel version (if compiling from source): No\n GCC/Compiler version (if compiling from source): No\n CUDA/cuDNN version: No\n GPU model and memory: Run in CPU\n Describe the current behavior\n tf.keras.backend.sqrt(tf.constant(-1.0)) returns 0 as clip_by_value is being done in the source code (Which is highly misleading, as can be seen only in the source and not in the function document) whereas tf.sqrt(tf.constant(-1.0)) returns 'nan' which is the expected behavior of any sqrt function. This causes some bugs which are very difficult to track.\n \n Describe the expected behavior\n Make sqrt functions return only the expected behavior and remove the clip_by_value.\n Code to reproduce the issue\n import tensorflow as tf\n tf.enable_eager_execution()\n tf.keras.backend.sqrt(tf.constant(-1.0)).numpy()\n tf.sqrt(tf.constant(-1.0)).numpy()\n Other info / logs\n Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "saikumarGadde", "commentT": "2019-11-11T22:12:39Z", "comment_text": "\n \t\tAs you can see from the <denchmark-link:https://github.com/tensorflow/tensorflow/blob/590d6eef7e91a6a7392c8ffffb7b58f2e0c8bc6b/tensorflow/python/keras/backend.py#L2104>source code</denchmark-link>\n  tf.keras.backend.sqrt clips the input value to zero if its less than 0 and to infinity if its equal to infinity as shown by the function <denchmark-link:https://github.com/tensorflow/tensorflow/blob/590d6eef7e91a6a7392c8ffffb7b58f2e0c8bc6b/tensorflow/python/keras/backend.py#L2104>here</denchmark-link>\n . This is the reason why the output is zero\n But in tf.sqrt the sqrt function is from gen_math_ops.py which has a different behaviour i.e., behaviour similar to numpy and thats the reason why its value is defaulted to NaN\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "saikumarGadde", "commentT": "2019-11-11T23:45:54Z", "comment_text": "\n \t\tBut developers usually expect the tensorflow to return nan when tf.sqrt( negative numbers) is done, as thats the norm unlike returning 0, which defies the name of the function. Or, I would request you to update the documentation just to avoid the confusion as tensorflow is moving towards keras.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "saikumarGadde", "commentT": "2019-11-12T00:37:14Z", "comment_text": "\n \t\tSure <denchmark-link:https://github.com/saikumarGadde>@saikumarGadde</denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "saikumarGadde", "commentT": "2020-01-15T10:23:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/MarkDaoust>@MarkDaoust</denchmark-link>\n  Is this issue is solved? Thanks.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "saikumarGadde", "commentT": "2020-10-07T19:55:47Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/saikumarGadde>@saikumarGadde</denchmark-link>\n : Yes, you have a point but: we need to be very conservative about changing the behavior of existing functions. Also and what is the goal of using  at all?\n At this point tf.keras.backend should be considered an implementation detail. It was a tools for writing keras to be backend-agnostic. TensorFlow is effectively the only backend now.\n That's why fchollet removed the documentation for these in:\n <denchmark-link:https://github.com/tensorflow/tensorflow/commit/91e5ad0fad9bbf8462a797ddd7183df1c15f6832#diff-e329ed6b8d30dca9a441689005047035>91e5ad0#diff-e329ed6b8d30dca9a441689005047035</denchmark-link>\n \n <denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/backend?version=nightly>https://www.tensorflow.org/api_docs/python/tf/keras/backend?version=nightly</denchmark-link>\n \n The functions will still be available in the package but they are undocumented to communicate that they should not be used.\n \t\t"}}}, "commit": {"commit_id": "8134c918424e5f99683617ca5afa8303e5c90642", "commit_author": "A. Unique TensorFlower", "commitT": "2020-10-07 10:59:21-07:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\keras\\backend.py", "file_new_name": "tensorflow\\python\\keras\\backend.py", "file_complexity": {"file_NLOC": "3127", "file_CCN": "570", "file_NToken": "20061"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "2431,2432,2433", "deleted_lines": null, "method_info": {"method_name": "sqrt", "method_params": "x", "method_startline": "2428", "method_endline": "2443", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "52", "method_nesting_level": "0"}}}}}}}}