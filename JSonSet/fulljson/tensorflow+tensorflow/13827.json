{"BR": {"BR_id": "13827", "BR_author": "Ouwen", "BRopenT": "2017-10-19T03:47:14Z", "BRcloseT": "2017-12-21T15:19:12Z", "BR_text": {"BRsummary": "Tensorflow 1.3: tf.constant with dtype=[float32, float64, float16] may have inconsistent behavior.", "BRdescription": "\n <denchmark-h:h3>System information</denchmark-h>\n \n \n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No\n \n \n OS Platform and Distribution (e.g., Linux Ubuntu 16.04):\n Ubuntu 16.04 with docker running gcr.io/tensorflow/tensorflow:latest\n \n \n TensorFlow installed from (source or binary): NA\n \n \n TensorFlow version (use command below): ('v1.3.0-rc2-20-g0787eee', '1.3.0')\n \n \n Python version: 2.7\n \n \n Bazel version (if compiling from source): NA\n \n \n CUDA/cuDNN version: NA\n \n \n GPU model and memory: NA\n \n \n Exact command to reproduce:\n \n \n <denchmark-code>// works\n test = numpy.array([1,2,3,4,5,6, None], dtype=numpy.float32)\n sess = tf.Session()\n print(sess.run(tf.constant(test, dtype=tf.float32)))\n </denchmark-code>\n \n <denchmark-code>// works\n sess = tf.Session()\n print(sess.run(tf.constant([1, 2, 3, 4, 5, 6, None], dtype=tf.float16)))\n </denchmark-code>\n \n <denchmark-code>// returns error\n sess = tf.Session()\n print(sess.run(tf.constant([1, 2, 3, 4, 5, 6, None], dtype=tf.float32)))\n // TypeError: Expected float32, got None of type '_Message' instead.\n </denchmark-code>\n \n <denchmark-h:h3>Describe the problem</denchmark-h>\n \n A tensorflow constant with None in array with dtype float32, float64 seem to throw an error. However, if they are first wrapped by a numpy array, none is accepted and turned into NaN. This behavior seems inconsistent.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "Ouwen", "commentT": "2017-10-19T04:00:38Z", "comment_text": "\n \t\t/CC <denchmark-link:https://github.com/MarkDaoust>@MarkDaoust</denchmark-link>\n \n That's unfortunate. Would you like to contribute a fix?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "Ouwen", "commentT": "2017-10-19T04:32:16Z", "comment_text": "\n \t\tI'd love to take a stab at contributing. From a brief glance i'm wondering if the convert_to_tensor function may be culprit. Glad to take any pointers as well.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "Ouwen", "commentT": "2017-10-19T07:44:51Z", "comment_text": "\n \t\tSo here is what I've found after looking through the code. This error is propagated from tensorflow version 0.5.0 to 1.4.0-rc0\n   values pass without any problems because they are not checked in <denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L273-L291>_TF_TO_IS_OK</denchmark-link>\n .  values are thus not stopped by the <denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L376>_AssertCompatible</denchmark-link>\n  call, where they continue onward to be transformed into  values by <denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L377>np.array</denchmark-link>\n \n For , and   types,  values are caught by the <denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L294-L303>_AssertCompatible</denchmark-link>\n , and since they are not an instance of <denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L243>compat.real_types</denchmark-link>\n   a  is raised.\n So while the following produces an error:\n <denchmark-code>sess = tf.Session()\n print(sess.run(tf.constant([1, 2, 3, 4, 5, 6, None], dtype=tf.float32)))\n // TypeError: Expected float32, got None of type '_Message' instead.\n </denchmark-code>\n \n Using explicit nan will not cause an error\n <denchmark-code>sess = tf.Session()\n print(sess.run(tf.constant([1, 2, 3, 4, 5, 6, float('nan')], dtype=tf.float32)))\n </denchmark-code>\n \n Since the  abstraction states the <denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/ops.py#L575-L578>following are equivalent</denchmark-link>\n \n <denchmark-code>value_1 = my_func(tf.constant([[1.0, 2.0], [3.0, 4.0]]))\n value_2 = my_func([[1.0, 2.0], [3.0, 4.0]])\n value_3 = my_func(np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float32))\n </denchmark-code>\n \n I believe that the below should be equivalent as well\n <denchmark-code>value_a = my_func(tf.constant([[1.0, 2.0], [3.0, None]], dtype=tf.float32))\n value_b = my_func(np.array([[1.0, 2.0], [3.0, None]], dtype=np.float32))\n </denchmark-code>\n \n Given what has been found, I would like to\n \n \n Update _FilterFloat to allow for None values.\n \n \n Add tf.float16 into the  _TF_TO_IS_OK dictionary with the _FilterFloat function\n \n \n Add a test into ops_test.py named testConvertToTensorFloatNoneValue\n \n \n Please let me know if this is a good plan assuming nothing breaks.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "Ouwen", "commentT": "2017-10-19T16:26:37Z", "comment_text": "\n \t\tThanks Ouwen! This is the best kind of bug report.\n I'm not an expert on this part of TensorFlow, but this all looks pretty reasonable. Please send a PR after you fix that missing (self).\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "Ouwen", "commentT": "2017-10-19T16:48:35Z", "comment_text": "\n \t\tAppreciate it <denchmark-link:https://github.com/MarkDaoust>@MarkDaoust</denchmark-link>\n , here is the PR <denchmark-link:https://github.com/tensorflow/tensorflow/pull/13834>#13834</denchmark-link>\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "Ouwen", "commentT": "2017-12-20T19:24:06Z", "comment_text": "\n \t\tIt has been 14 days with no activity and the awaiting response label was assigned. Is this still an issue? Please update the label and/or status accordingly.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "Ouwen", "commentT": "2017-12-21T15:19:12Z", "comment_text": "\n \t\tThis is fixed by <denchmark-link:https://github.com/tensorflow/tensorflow/pull/13834>#13834</denchmark-link>\n .\n \t\t"}}}, "commit": {"commit_id": "c43d777b56a17832f7de288d0fe966bf537ffeb7", "commit_author": "Ouwen Huang", "commitT": "2017-11-08 22:49:31-08:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\framework\\ops.py", "file_new_name": "tensorflow\\python\\framework\\ops.py", "file_complexity": {"file_NLOC": "2518", "file_CCN": "610", "file_NToken": "13267"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "866,867,868,869", "deleted_lines": null, "method_info": {"method_name": "convert_to_tensor", "method_params": "value,dtype,name,preferred_dtype", "method_startline": "840", "method_endline": "894", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "41", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\python\\framework\\tensor_util.py", "file_new_name": "tensorflow\\python\\framework\\tensor_util.py", "file_complexity": {"file_NLOC": "571", "file_CCN": "236", "file_NToken": "4748"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "289", "deleted_lines": null}}}}}}