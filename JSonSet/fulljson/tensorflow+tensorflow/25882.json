{"BR": {"BR_id": "25882", "BR_author": "serycjon", "BRopenT": "2019-02-19T09:14:34Z", "BRcloseT": "2019-04-25T20:16:04Z", "BR_text": {"BRsummary": "tf.image.random_jpeg_quality only products images of single jpeg quality", "BRdescription": "\n System information\n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Debian 9\n TensorFlow installed from (source or binary): pip install\n TensorFlow version (use command below): v1.12.0-0-ga6d8ffae09\n Python version: 2.7.13\n CUDA/cuDNN version: 9.0 / 7.0.3\n GPU model and memory: GeForce GTX 1080 Ti, 10405 MB\n \n Describe the current behavior\n tf.image.random_jpeg_quality generates random jpeg quality on graph creation, which is then fixed.\n Describe the expected behavior\n tf.image.random_jpeg_quality generates random jpeg quality for each image/batch of images passed through it.\n Code to reproduce the issue\n import numpy as np\n import tensorflow as tf\n \n img = np.random.randint(0, 256, (100, 200, 3), dtype=np.uint8)\n \n tf_img = tf.placeholder(tf.uint8)\n jpeg_augment = tf.image.random_jpeg_quality(tf_img,\n                                             min_jpeg_quality=20,\n                                             max_jpeg_quality=90)\n \n sess_config = tf.ConfigProto()\n sess_config.gpu_options.allow_growth = True\n \n with tf.Session(config=sess_config) as sess:\n     sess.run(tf.global_variables_initializer())\n     results = []\n     for i in range(25):\n         augmented = sess.run([jpeg_augment], feed_dict={tf_img: img})[0]\n         results.append(augmented)\n \n results = np.array(results)\n same_as_first = results == results[0, ...]\n all_equal = np.all(same_as_first)\n print('all_equal: {}'.format(all_equal))\n assert not all_equal\n The code causing this is located at:\n \n \n \n tensorflow/tensorflow/python/ops/image_ops_impl.py\n \n \n          Line 1634\n       in\n       a6d8ffa\n \n \n \n \n \n \n  jpeg_quality = np.random.randint(min_jpeg_quality, max_jpeg_quality) \n \n \n \n \n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "serycjon", "commentT": "2019-02-22T12:46:59Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/drpngx>@drpngx</denchmark-link>\n  Can you answer the issue or reassign?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "serycjon", "commentT": "2019-02-22T12:57:45Z", "comment_text": "\n \t\tI think this is more of a \"type:bug\" than \"type:feature\"\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "serycjon", "commentT": "2019-03-15T21:15:13Z", "comment_text": "\n \t\tThe root cause of this problem is that the  op's  parameter is a fixed , not a variable . Fixing  will necessitate a new version of  with a different signature. <denchmark-link:https://github.com/drpngx>@drpngx</denchmark-link>\n  I'd be happy to put in a PR for this issue if that's ok.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "serycjon", "commentT": "2019-03-18T17:25:38Z", "comment_text": "\n \t\tSounds like a good idea. <denchmark-link:https://github.com/frreiss>@frreiss</denchmark-link>\n  are you familiar with the op replacement process? You have to:\n \n Create a new op, call it v2.\n Check it in, with tests etc and wait for two weeks.\n Replace the call from v1 to v2.\n \n The v2 version should be a strict superset of v1. Ideally it should behave exactly like v1 with the default options.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "serycjon", "commentT": "2019-03-19T17:14:04Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/drpngx>@drpngx</denchmark-link>\n  yes, I've done an op replacement in the past with the  op.\n I'll break this work down into a few smaller PRs to make the diff size more manageable:\n \n Add a new C++ op, EncodeJpegV2, along with C++ regression tests.\n Modify the random_jpeg_quality Python API to use EncodeJpegV2 and also fix issue #25882.\n Change the other Python code in image_ops_impl.py that uses gen_image_ops.encode_jpeg to use gen_image_ops.encode_jpeg_v2.\n \n Regarding the first step: I see that EncodeJpeg has a number of other arguments that are currently static attributes:\n REGISTER_OP(\"EncodeJpeg\")\n     .Input(\"image: uint8\")\n     .Attr(\"format: {'', 'grayscale', 'rgb'} = ''\")\n     .Attr(\"quality: int = 95\")\n     .Attr(\"progressive: bool = false\")\n     .Attr(\"optimize_size: bool = false\")\n     .Attr(\"chroma_downsampling: bool = true\")\n     .Attr(\"density_unit: {'in', 'cm'} = 'in'\")\n     .Attr(\"x_density: int = 300\")\n     .Attr(\"y_density: int = 300\")\n     .Attr(\"xmp_metadata: string = ''\")\n     .Output(\"contents: string\")\n \n Do you have any preference about which arguments I should turn into 0-D tensors in the new op?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "serycjon", "commentT": "2019-03-20T00:17:51Z", "comment_text": "\n \t\tI will let the API reviewer comment. My general intuition is that numbers can be changed, and everything else, in the worst case put in the graph. So quality, {x,y}_density would be input tensors.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "serycjon", "commentT": "2019-03-20T20:28:23Z", "comment_text": "\n \t\t(For API owners) This might be more appropriate for the <denchmark-link:https://github.com/tensorflow/addons>TensorFlow Addons</denchmark-link>\n  repository, which has a number of special use ops like this. In either case, in the op registration code above, the Attrs should be Inputs. (Inputs are more flexible.)\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "serycjon", "commentT": "2019-04-02T01:35:21Z", "comment_text": "\n \t\tI was about to start work on this, but it looks like an anonymous Googler has already committed a patch. Someone should close this issue.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "serycjon", "commentT": "2019-04-25T20:16:05Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=25882>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=25882>No</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "d87710ed89e01cf479d2b6ba619a879c32ad77d9", "commit_author": "A. Unique TensorFlower", "commitT": "2019-03-21 14:46:55-07:00", "commit_complexity": {"commit_NLOC": "0.3854166666666667", "commit_CCN": "0.9270833333333334", "commit_Nprams": "0.7395833333333334"}, "changed_files": {"file_0": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "tensorflow\\core\\api_def\\base_api\\api_def_EncodeJpegVariableQuality.pbtxt", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}}, "file_1": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "tensorflow\\core\\api_def\\java_api\\api_def_EncodeJpegVariableQuality.pbtxt", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}}, "file_2": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "tensorflow\\core\\api_def\\python_api\\api_def_EncodeJpegVariableQuality.pbtxt", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow\\core\\kernels\\encode_jpeg_op.cc", "file_new_name": "tensorflow\\core\\kernels\\encode_jpeg_op.cc", "file_complexity": {"file_NLOC": "155", "file_CCN": "17", "file_NToken": "1148"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "140,141", "deleted_lines": null, "method_info": {"method_name": "tensorflow::EncodeJpegVariableQualityOp::EncodeJpegVariableQualityOp", "method_params": "context", "method_startline": "140", "method_endline": "141", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "13", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195", "deleted_lines": null, "method_info": {"method_name": "tensorflow::EncodeJpegVariableQualityOp::Compute", "method_params": "context", "method_startline": "143", "method_endline": "195", "method_complexity": {"method_NLOC": "43", "method_CCN": "4", "method_NToken": "369", "method_nesting_level": "2"}}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\core\\ops\\image_ops.cc", "file_new_name": "tensorflow\\core\\ops\\image_ops.cc", "file_complexity": {"file_NLOC": "735", "file_CCN": "20", "file_NToken": "5640"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "452,453,454,455,456,457,458", "deleted_lines": null}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\go\\op\\wrappers.go", "file_new_name": "tensorflow\\go\\op\\wrappers.go", "file_complexity": {"file_NLOC": "18637", "file_CCN": "3583", "file_NToken": "115766"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "15600,15601,15602,15603,15604,15605,15606,15607,15608,15609,15610,15611,15612", "deleted_lines": null, "method_info": {"method_name": "EncodeJpegVariableQuality", "method_params": "Scope,Output,Output", "method_startline": "15600", "method_endline": "15612", "method_complexity": {"method_NLOC": "13", "method_CCN": "2", "method_NToken": "76", "method_nesting_level": "0"}}}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow\\python\\ops\\image_ops_impl.py", "file_new_name": "tensorflow\\python\\ops\\image_ops_impl.py", "file_complexity": {"file_NLOC": "1601", "file_CCN": "227", "file_NToken": "11573"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1905,1918,1919,1920,1921,1922,1923,1924,1925", "deleted_lines": "1898,1911", "method_info": {"method_name": "adjust_jpeg_quality", "method_params": "image,jpeg_quality,name", "method_startline": "1893", "method_endline": "1929", "method_complexity": {"method_NLOC": "13", "method_CCN": "3", "method_NToken": "127", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "1880,1881,1882,1883,1884,1885,1886,1887,1888", "deleted_lines": "1880,1881", "method_info": {"method_name": "random_jpeg_quality", "method_params": "image,min_jpeg_quality,max_jpeg_quality,seed", "method_startline": "1851", "method_endline": "1889", "method_complexity": {"method_NLOC": "16", "method_CCN": "7", "method_NToken": "112", "method_nesting_level": "0"}}}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow\\python\\ops\\image_ops_test.py", "file_new_name": "tensorflow\\python\\ops\\image_ops_test.py", "file_complexity": {"file_NLOC": "3907", "file_CCN": "491", "file_NToken": "42021"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "3905,3906,3907,3908,3909,3910,3911,3912,3913,3914,3915,3916,3917", "deleted_lines": null, "method_info": {"method_name": "testAdjustJpegQuality", "method_params": "self", "method_startline": "3905", "method_endline": "3917", "method_complexity": {"method_NLOC": "11", "method_CCN": "1", "method_NToken": "91", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "3882,3883,3884,3885,3886,3887,3888,3889,3890,3891,3892,3893,3894,3895,3896,3897,3898,3899,3900,3901,3902,3903", "deleted_lines": null, "method_info": {"method_name": "testRandomJpegQuality", "method_params": "self", "method_startline": "3882", "method_endline": "3903", "method_complexity": {"method_NLOC": "15", "method_CCN": "4", "method_NToken": "149", "method_nesting_level": "1"}}}}}, "file_8": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\tools\\api\\golden\\v1\\tensorflow.raw_ops.pbtxt", "file_new_name": "tensorflow\\tools\\api\\golden\\v1\\tensorflow.raw_ops.pbtxt", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "975,976,977,978", "deleted_lines": null}}}, "file_9": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\tools\\api\\golden\\v2\\tensorflow.raw_ops.pbtxt", "file_new_name": "tensorflow\\tools\\api\\golden\\v2\\tensorflow.raw_ops.pbtxt", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "975,976,977,978", "deleted_lines": null}}}}}}