{"BR": {"BR_id": "32487", "BR_author": "cadama", "BRopenT": "2019-09-13T06:50:22Z", "BRcloseT": "2019-10-03T00:04:27Z", "BR_text": {"BRsummary": "[TF -2] Multi gpu training error", "BRdescription": "\n I am trying to train a keras model on two k80.\n **\n \n Have I written custom code\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): SMP Debian 4.9.144-3.1\n TensorFlow version (use command below): 2.0.0-rc0\n Python version: 3.6.9\n CUDA/cuDNN version: 10.1\n GPU model and memory: Tesla K80\n \n Here is the the keras model that I am trying to fit:\n <denchmark-code>import tensorflow as tf\n import numpy as np\n \n class SparseSlice(tf.keras.layers.Layer):\n     def __init__(self, feature_column):\n         super(SparseSlice, self).__init__()\n         self.fc = feature_column\n \n     def build(self, input_shape):\n \n         self.kernel = self.add_weight('{}_kernel'.format(self.fc.name), shape=(self.fc.num_buckets, ), dtype=tf.float32)\n \n     def call(self, input):\n         ids = self.fc._transform_input_tensor(input)\n         return tf.expand_dims(tf.gather(self.kernel, ids.values), axis=1)\n \n \n strategy = tf.distribute.MirroredStrategy()\n with strategy.scope():\n \n     batch_size = 10\n     sparse_col = tf.feature_column.categorical_column_with_hash_bucket('sparse_col', 10000, dtype=tf.int64)\n     dense_col = tf.feature_column.numeric_column('dense_col', dtype=tf.float32)\n     example_spec = tf.feature_column.make_parse_example_spec([sparse_col, dense_col])\n \n     sparse_inputs = tf.keras.layers.Input(name=sparse_col.name, shape=(None, ), batch_size=batch_size, sparse=True, dtype=tf.int64)\n     dense_inputs = {dense_col.name: tf.keras.layers.Input(name=dense_col.name, shape=(1, ), dtype=tf.float32)}\n \n     sparse_out = SparseSlice(sparse_col)(sparse_inputs)\n     output = tf.keras.layers.Dense(1, activation='sigmoid')(sparse_out)\n     num = tf.keras.layers.DenseFeatures(dense_col)(dense_inputs)\n \n     concats = tf.keras.layers.Concatenate()([output, num])\n     output = tf.keras.layers.Dense(1, activation='sigmoid')(concats)\n \n     model = tf.keras.Model([dense_inputs, {'sparse_output': sparse_inputs}], output)\n \n     model.compile(optimizer='adam',\n                   loss='mse')\n \n     np.random.random(())\n \n     features = {dense_col.name: tf.constant(np.random.random((batch_size, )))}\n     features.update({sparse_col.name: tf.sparse.SparseTensor(indices=[[i, 0] for i in range(batch_size)], values=np.random.randint(0, 1000, (batch_size, )), dense_shape=(batch_size, 1))})\n     ys = tf.constant(np.random.rand(batch_size), dtype=tf.float32)\n \n     dataset = tf.data.Dataset.from_tensor_slices((features, ys)).batch(batch_size)\n \n     model.fit(x=dataset,\n               epochs=1\n               )\n </denchmark-code>\n \n but I am getting the following error:\n <denchmark-code>2019-09-13 06:48:10.524592: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n 2019-09-13 06:48:10.525159: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: \n name: Tesla K80 major: 3 minor: 7 memoryClockRate(GHz): 0.8235\n pciBusID: 0000:00:04.0\n 2019-09-13 06:48:10.525252: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n 2019-09-13 06:48:10.525673: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 1 with properties: \n name: Tesla K80 major: 3 minor: 7 memoryClockRate(GHz): 0.8235\n pciBusID: 0000:00:05.0\n 2019-09-13 06:48:10.525737: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0\n 2019-09-13 06:48:10.525763: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0\n 2019-09-13 06:48:10.525798: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10.0\n 2019-09-13 06:48:10.525835: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10.0\n 2019-09-13 06:48:10.525869: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10.0\n 2019-09-13 06:48:10.525904: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10.0\n 2019-09-13 06:48:10.525937: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7\n 2019-09-13 06:48:10.526033: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n 2019-09-13 06:48:10.526541: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n 2019-09-13 06:48:10.527021: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n 2019-09-13 06:48:10.527491: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n 2019-09-13 06:48:10.527907: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0, 1\n 2019-09-13 06:48:10.528002: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:\n 2019-09-13 06:48:10.528023: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 1 \n 2019-09-13 06:48:10.528036: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N Y \n 2019-09-13 06:48:10.528054: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 1:   Y N \n 2019-09-13 06:48:10.528240: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n 2019-09-13 06:48:10.528714: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n 2019-09-13 06:48:10.529244: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n 2019-09-13 06:48:10.529670: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/device:GPU:0 with 10805 MB memory) -> physical GPU (device: 0, name: Tesla K80, pci bus id: 0000:00:04.0, compute capability: 3.7)\n 2019-09-13 06:48:10.529763: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n 2019-09-13 06:48:10.530226: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/device:GPU:1 with 10805 MB memory) -> physical GPU (device: 1, name: Tesla K80, pci bus id: 0000:00:05.0, compute capability: 3.7)\n       1/Unknown - 0s 75ms/stepTraceback (most recent call last):\n   File \"/opt/conda/lib/python3.6/site-packages/IPython/core/interactiveshell.py\", line 3326, in run_code\n     exec(code_obj, self.user_global_ns, self.user_ns)\n   File \"<ipython-input-7-9c71ae70d829>\", line 33, in <module>\n     epochs=1\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training.py\", line 734, in fit\n     use_multiprocessing=use_multiprocessing)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py\", line 324, in fit\n     total_epochs=epochs)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py\", line 123, in run_one_epoch\n     batch_outs = execution_function(iterator)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py\", line 86, in execution_function\n     distributed_function(input_fn))\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py\", line 427, in __call__\n     self._initialize(args, kwds, add_initializers_to=initializer_map)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py\", line 370, in _initialize\n     *args, **kwds))\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\", line 1847, in _get_concrete_function_internal_garbage_collected\n     graph_function, _, _ = self._maybe_define_function(args, kwargs)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\", line 2147, in _maybe_define_function\n     graph_function = self._create_graph_function(args, kwargs)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\", line 2038, in _create_graph_function\n     capture_by_value=self._capture_by_value),\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/framework/func_graph.py\", line 915, in func_graph_from_py_func\n     func_outputs = python_func(*func_args, **func_kwargs)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py\", line 320, in wrapped_fn\n     return weak_wrapped_fn().__wrapped__(*args, **kwds)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py\", line 66, in distributed_function\n     model, input_iterator, mode)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py\", line 112, in _prepare_feed_values\n     inputs, targets, sample_weights = _get_input_from_iterator(inputs)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py\", line 132, in _get_input_from_iterator\n     next_element = next(iterator)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/distribute/input_lib.py\", line 275, in __next__\n     return self.get_next()\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/distribute/input_lib.py\", line 304, in get_next\n     global_has_value, replicas = _get_next_as_optional(self, self._strategy)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/distribute/input_lib.py\", line 200, in _get_next_as_optional\n     iterator._iterators[i].get_next_as_list(new_name))  # pylint: disable=protected-access\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/distribute/input_lib.py\", line 878, in get_next_as_list\n     lambda: _dummy_tensor_fn(data.value_structure))\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/util/deprecation.py\", line 507, in new_func\n     return func(*args, **kwargs)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/ops/control_flow_ops.py\", line 1174, in cond\n     return cond_v2.cond_v2(pred, true_fn, false_fn, name)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/ops/cond_v2.py\", line 91, in cond_v2\n     op_return_value=pred)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/framework/func_graph.py\", line 915, in func_graph_from_py_func\n     func_outputs = python_func(*func_args, **func_kwargs)\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/distribute/input_lib.py\", line 878, in <lambda>\n     lambda: _dummy_tensor_fn(data.value_structure))\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/distribute/input_lib.py\", line 801, in _dummy_tensor_fn\n     result.append(create_dummy_tensor(feature_shape, feature_type))\n   File \"/home/cdalmaso/.local/lib/python3.6/site-packages/tensorflow_core/python/distribute/input_lib.py\", line 784, in create_dummy_tensor\n     for dim in feature_shape.dims:\n TypeError: 'NoneType' object is not iterable\n </denchmark-code>\n \n Everything runs fine if I exclude the with strategy.scope()\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "cadama", "commentT": "2019-09-13T09:30:44Z", "comment_text": "\n \t\tIssue replicating with TF version-2.0rc0, please find the <denchmark-link:https://colab.research.google.com/gist/oanush/fa05103b0c9f82e26949f3ede67ffaf5/32487.ipynb>gist</denchmark-link>\n  of the colab.Thanks!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "cadama", "commentT": "2019-09-30T19:34:39Z", "comment_text": "\n \t\tWe have an internal fix for this pending. Meanwhile, adding\n <denchmark-code>strategy = tf.distribute.MirroredStrategy()\n strategy.extended.experimental_enable_get_next_as_optional = False\n </denchmark-code>\n \n should work.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "cadama", "commentT": "2019-10-02T14:45:49Z", "comment_text": "\n \t\tIt works indeed. Thanks.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "cadama", "commentT": "2019-10-03T00:04:29Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=32487>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=32487>No</denchmark-link>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "cadama", "commentT": "2019-11-20T11:21:33Z", "comment_text": "\n \t\tI also met this problem, and use above the internal fix, thanks !\n still I have few questions:\n \n is this a bug and will be fixed in the later version or this is the way to use it?\n what causes this ?\n if i don't set this option, but to do some changes to the dataset, will it work as expected ?\n \n \t\t"}}}, "commit": {"commit_id": "144e0ebb1c9ede81886e215904a4e4598cd8b0b0", "commit_author": "Philip Pham", "commitT": "2019-10-02 17:04:12-07:00", "commit_complexity": {"commit_NLOC": "0.17346938775510204", "commit_CCN": "0.6020408163265306", "commit_Nprams": "0.6122448979591837"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\core\\common_runtime\\copy_tensor.cc", "file_new_name": "tensorflow\\core\\common_runtime\\copy_tensor.cc", "file_complexity": {"file_NLOC": "328", "file_CCN": "46", "file_NToken": "2322"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "311", "deleted_lines": "311,312,313,314,315,316", "method_info": {"method_name": "tensorflow::WrappedTensorDeviceCopy", "method_params": "from,to,copy", "method_startline": "308", "method_endline": "318", "method_complexity": {"method_NLOC": "10", "method_CCN": "2", "method_NToken": "57", "method_nesting_level": "2"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\python\\distribute\\BUILD", "file_new_name": "tensorflow\\python\\distribute\\BUILD", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "446,449,708,709,711,712,713,722,723", "deleted_lines": null}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "tensorflow\\python\\distribute\\input_lib.py", "file_new_name": "tensorflow\\python\\distribute\\input_lib.py", "file_complexity": {"file_NLOC": "676", "file_CCN": "151", "file_NToken": "4332"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "913", "deleted_lines": "883,884", "method_info": {"method_name": "get_next_as_list", "method_params": "self,name", "method_startline": "882", "method_endline": "919", "method_complexity": {"method_NLOC": "14", "method_CCN": "3", "method_NToken": "109", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "801", "deleted_lines": "782,784,790,791,792,793,794,795,796", "method_info": {"method_name": "_dummy_tensor_fn.create_dummy_tensor", "method_params": "feature_shape,feature_type", "method_startline": "782", "method_endline": "801", "method_complexity": {"method_NLOC": "11", "method_CCN": "5", "method_NToken": "82", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "801,803,804,805,806,807,808,809,810,811,812,818,819,820,821,824,825,826,827,828,829,832,833,834,835,836,837,838,841", "deleted_lines": "803,804,805,806,807,808,809,810,811", "method_info": {"method_name": "_dummy_tensor_fn", "method_params": "value_structure", "method_startline": "798", "method_endline": "841", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "17", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349", "deleted_lines": "330", "method_info": {"method_name": "get_next", "method_params": "self,name", "method_startline": "281", "method_endline": "352", "method_complexity": {"method_NLOC": "47", "method_CCN": "13", "method_NToken": "416", "method_nesting_level": "1"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "801,803,804,805,806,807,808,809,810,811,812,818,819,820,821,824,825,826,827,828,829,832,833,834,835,836,837,838", "deleted_lines": "803,804,805,806,807,808,809,810,811", "method_info": {"method_name": "_dummy_tensor_fn.create_dummy_tensor", "method_params": "type_spec", "method_startline": "801", "method_endline": "839", "method_complexity": {"method_NLOC": "24", "method_CCN": "10", "method_NToken": "229", "method_nesting_level": "1"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 7, "file_old_name": "tensorflow\\python\\distribute\\input_lib_test.py", "file_new_name": "tensorflow\\python\\distribute\\input_lib_test.py", "file_complexity": {"file_NLOC": "814", "file_CCN": "55", "file_NToken": "5744"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604", "deleted_lines": null, "method_info": {"method_name": "testRaggedSparse", "method_params": "self,distribution,input_type,drop_remainder,defun", "method_startline": "516", "method_endline": "604", "method_complexity": {"method_NLOC": "42", "method_CCN": "5", "method_NToken": "408", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "583,584,585,586,587", "deleted_lines": null, "method_info": {"method_name": "testRaggedSparse.sum_for_loop", "method_params": "dataset", "method_startline": "583", "method_endline": "587", "method_complexity": {"method_NLOC": "5", "method_CCN": "2", "method_NToken": "38", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "566,567,568,569,570,571,572,573,574,575,576,577", "deleted_lines": null, "method_info": {"method_name": "testRaggedSparse.sum_batch", "method_params": "per_replica_features", "method_startline": "566", "method_endline": "577", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "17", "method_nesting_level": "2"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "579,580,581", "deleted_lines": null, "method_info": {"method_name": "testRaggedSparse._reduce", "method_params": "state,batch", "method_startline": "579", "method_endline": "581", "method_complexity": {"method_NLOC": "3", "method_CCN": "2", "method_NToken": "34", "method_nesting_level": "2"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "569,570,571,572,573,574,575", "deleted_lines": null, "method_info": {"method_name": "testRaggedSparse.testRaggedSparse.sum_batch.map_fn", "method_params": "per_replica_values", "method_startline": "569", "method_endline": "575", "method_complexity": {"method_NLOC": "7", "method_CCN": "2", "method_NToken": "65", "method_nesting_level": "3"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "589,590,591,592,593,594,595", "deleted_lines": null, "method_info": {"method_name": "testRaggedSparse.sum_while_loop", "method_params": "iterator,reduce_fn", "method_startline": "589", "method_endline": "595", "method_complexity": {"method_NLOC": "7", "method_CCN": "3", "method_NToken": "49", "method_nesting_level": "2"}}}, "hunk_6": {"Ismethod": 1, "added_lines": "524,525,526,527,528,529,530,531,532,533,534,535,536", "deleted_lines": null, "method_info": {"method_name": "testRaggedSparse.dataset_fn", "method_params": "ctx", "method_startline": "524", "method_endline": "536", "method_complexity": {"method_NLOC": "13", "method_CCN": "2", "method_NToken": "125", "method_nesting_level": "2"}}}}}}}}