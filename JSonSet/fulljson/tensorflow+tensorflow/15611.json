{"BR": {"BR_id": "15611", "BR_author": "huaxz1986", "BRopenT": "2017-12-24T09:33:59Z", "BRcloseT": "2017-12-31T06:33:44Z", "BR_text": {"BRsummary": "'saved_model_cli.py' bug fix!", "BRdescription": "\n In file python/tools/saved_model_cli.py  at function def _print_tensor_info(tensor_info):\n The first line should be:\n   print('    dtype: ' + {value:key for (key,value) in types_pb2.DataType.items()}[tensor_info.dtype])\n Not be :  print('    dtype: ' + types_pb2.DataType.keyss()[tensor_info.dtype])\n because tensor_info.dtype  is an Integer which is the value of types(not the index of type values).\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "huaxz1986", "commentT": "2017-12-24T15:34:24Z", "comment_text": "\n \t\tIt's not necessary to do that, types_pb2.DataType is not python dict. The order of EnumTypeWrapper.keys() is not arbitrary.\n See the definition of EnumTypeWrapper.keys():\n   def keys(self):\n     \"\"\"Return a list of the string names in the enum.\n     These are returned in the order they were defined in the .proto file.\n     \"\"\"\n \n     return [value_descriptor.name\n             for value_descriptor in self._enum_type.values]\n and self._enum_type.values is something like:\n   values=[\n     _descriptor.EnumValueDescriptor(\n       name='DT_INVALID', index=0, number=0,\n       options=None,\n       type=None),\n     _descriptor.EnumValueDescriptor(\n       name='DT_FLOAT', index=1, number=1,\n       options=None,\n       type=None),\n     _descriptor.EnumValueDescriptor(\n       name='DT_DOUBLE', index=2, number=2,\n       options=None,\n       type=None),\n       ...\n   ]\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "huaxz1986", "commentT": "2017-12-25T06:10:49Z", "comment_text": "\n \t\tWhen I run tfdbg\uff1a\n <denchmark-code>graph = tf.get_default_graph()\n with  graph.as_default():\n     v1 = tf.get_variable('v1', initializer=[1, 2, 3])\n     v2 = tf.square(v1, name='v2')\n     sess = tf.Session()\n     sess = tf_dbg.LocalCLIDebugWrapperSession(sess)\n     with sess.as_default():\n       sess.run(tf.global_variables_initializer())\n       _v2 = sess.run(v2)\n       print(_v2)\n </denchmark-code>\n \n The type of v1 is DT_INT_REF\uff0cand saved_model_cli.py throws exception.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "huaxz1986", "commentT": "2017-12-26T02:02:32Z", "comment_text": "\n \t\tYes, my mistake, for REF type, the value is not the same as its index. Can you add a minimum repuducible code and its error log to better describe this problem?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "huaxz1986", "commentT": "2017-12-27T10:05:19Z", "comment_text": "\n \t\tThis is a simple  example to show the usage of saved_model_cli\uff1a\n <denchmark-code>export_dir = 'out'\n builder = tf.saved_model.builder.SavedModelBuilder(export_dir)\n graph = tf.get_default_graph()\n with graph.as_default():\n   v1 = tf.get_variable('v1',shape=[3],\n                   initializer=tf.zeros_initializer)\n   v2 = tf.square(v1,name='v2')\n   with tf.Session(graph=graph) as sess:\n     sess.run(v1.initializer)\n     builder.add_meta_graph_and_variables(sess,['xxx'])\n     predict_signature_def = tf.saved_model.\\\n     \tsignature_def_utils.build_signature_def(\\\n              inputs={\n         \t\t 'input_x': \\\n                   tf.saved_model.utils.build_tensor_info(v1),\n              }, outputs={'pred_y':\\\n \t\t\t\t  tf.saved_model.utils.build_tensor_info(v2)},\\\n              method_name=tf.saved_model.\\\n  \t\t\t signature_constants.PREDICT_OUTPUTS)\n     builder.add_meta_graph([tf.saved_model.\\\n              tag_constants.TRAINING,\n              tf.saved_model.tag_constants.SERVING],\\\n              signature_def_map={'predict_graph': predict_signature_def})\n     builder.save(as_text=True)\n </denchmark-code>\n \n Then run saved_model_cli in shell\uff1a\n <denchmark-code>saved_model_cli show --dir out/ --tag_set serve,train --signature_def predict_graph\n </denchmark-code>\n \n The result is :\n <denchmark-code>The given SavedModel SignatureDef contains the following input(s):\n inputs['input_x'] tensor_info:\n tensor type: 101\n     dtype: DT_FLOAT_REF\n     shape: (3)\n     name: v1:0\n The given SavedModel SignatureDef contains the following output(s):\n outputs['pred_y'] tensor_info:\n tensor type: 1\n     dtype: DT_FLOAT\n     shape: (3)\n     name: v2:0\n Method name is: outputs\n </denchmark-code>\n \n I change tensorflow/python/tools/saved_model_cli._print_tensor_info() like this:\n <denchmark-code>def _print_tensor_info(tensor_info):\n   \"\"\"Prints details of the given tensor_info.\n \n   Args:\n     tensor_info: TensorInfo object to be printed.\n   \"\"\"\n #####  this is what I do ####\n   print('tensor type:',tensor_info.dtype)\n   print('    dtype: ' + {value:key for (key,value) in types_pb2.DataType.items()}[tensor_info.dtype])\n ##########\n   # Display shape as tuple.\n   if tensor_info.tensor_shape.unknown_rank:\n     shape = 'unknown_rank'\n   else:\n     dims = [str(dim.size) for dim in tensor_info.tensor_shape.dim]\n     shape = ', '.join(dims)\n     shape = '(' + shape + ')'\n   print('    shape: ' + shape)\n   print('    name: ' + tensor_info.name)\n </denchmark-code>\n \n By the way, I use python3.6+ubuntu 16.04+ tensorflow 1.4\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "huaxz1986", "commentT": "2017-12-27T13:20:33Z", "comment_text": "\n \t\tThanks for the supplement. I am not sure who is responsible for this module, friendly ping <denchmark-link:https://github.com/yifeif>@yifeif</denchmark-link>\n  <denchmark-link:https://github.com/drpngx>@drpngx</denchmark-link>\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "huaxz1986", "commentT": "2017-12-27T21:18:48Z", "comment_text": "\n \t\t/CC <denchmark-link:https://github.com/sukritiramesh>@sukritiramesh</denchmark-link>\n \n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "huaxz1986", "commentT": "2017-12-27T22:07:01Z", "comment_text": "\n \t\tThanks <denchmark-link:https://github.com/huaxz1986>@huaxz1986</denchmark-link>\n ! Will fix this internally!\n \t\t"}}}, "commit": {"commit_id": "2e2715baa84720f786b38d1f9cb6887399020d6f", "commit_author": "Yifei Feng", "commitT": "2017-12-28 14:01:06-08:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\python\\tools\\BUILD", "file_new_name": "tensorflow\\python\\tools\\BUILD", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "254", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\tools\\saved_model_cli.py", "file_new_name": "tensorflow\\python\\tools\\saved_model_cli.py", "file_complexity": {"file_NLOC": "321", "file_CCN": "45", "file_NToken": "1759"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "155,156,157", "deleted_lines": "155", "method_info": {"method_name": "_print_tensor_info", "method_params": "tensor_info", "method_startline": "149", "method_endline": "166", "method_complexity": {"method_NLOC": "12", "method_CCN": "4", "method_NToken": "94", "method_nesting_level": "0"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow\\python\\tools\\saved_model_cli_test.py", "file_new_name": "tensorflow\\python\\tools\\saved_model_cli_test.py", "file_complexity": {"file_NLOC": "420", "file_CCN": "31", "file_NToken": "3042"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "220", "method_info": {"method_name": "testInputPreProcessFileNames", "method_params": "self", "method_startline": "216", "method_endline": "223", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "57", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "205,206,207,208,209,210,211", "deleted_lines": null, "method_info": {"method_name": "testPrintREFTypeTensor", "method_params": "self", "method_startline": "205", "method_endline": "211", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "68", "method_nesting_level": "1"}}}}}}}}