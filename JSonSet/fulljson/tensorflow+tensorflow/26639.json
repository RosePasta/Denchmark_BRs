{"BR": {"BR_id": "26639", "BR_author": "dipanjanS", "BRopenT": "2019-03-13T04:01:20Z", "BRcloseT": "2020-07-20T21:58:59Z", "BR_text": {"BRsummary": "Nasnet models don't support custom image sizes even if include_top is set to False", "BRdescription": "\n The general idea for fine-tuning pre-trained models with a custom image size is to set the include_top parameter to False when loading the models. However it doesn't seem to be working with the Nasnet models in tf.keras so far. All other models including Inception are working fine.\n Note: I was using tensorflow 2.0 alpha so I'm not sure if that is the problem.\n I believe maybe some issue somewhere in checking dimension size along with the include_top flag but I might be wrong.\n Following is the stack trace.\n <denchmark-code>\n Code executed:\n nasnet = tf.keras.applications.nasnet.NASNetLarge(include_top=False, weights='imagenet', \n                                                                                   input_shape=(100, 100, 3))\n \n Error Message:\n ---------------------------------------------------------------------------\n ValueError                                Traceback (most recent call last)\n <ipython-input-100-64f6d45dc54d> in <module>\n       1 nasnet = tf.keras.applications.nasnet.NASNetLarge(include_top=False, weights='imagenet', \n ----> 2                                                                                 input_shape=(100, 100, 3))\n       3 nasnet.summary()\n \n /opt/anaconda3/lib/python3.6/site-packages/tensorflow/python/keras/applications/__init__.py in wrapper(*args, **kwargs)\n      68       kwargs['models'] = models\n      69       kwargs['utils'] = utils\n ---> 70     return base_fun(*args, **kwargs)\n      71   return wrapper\n      72 \n \n /opt/anaconda3/lib/python3.6/site-packages/tensorflow/python/keras/applications/nasnet.py in NASNetLarge(*args, **kwargs)\n      37 @keras_modules_injection\n      38 def NASNetLarge(*args, **kwargs):\n ---> 39   return nasnet.NASNetLarge(*args, **kwargs)\n      40 \n      41 \n \n /opt/anaconda3/lib/python3.6/site-packages/keras_applications/nasnet.py in NASNetLarge(input_shape, include_top, weights, input_tensor, pooling, classes, **kwargs)\n     364                   classes=classes,\n     365                   default_size=331,\n --> 366                   **kwargs)\n     367 \n     368 \n \n /opt/anaconda3/lib/python3.6/site-packages/keras_applications/nasnet.py in NASNet(input_shape, penultimate_filters, num_blocks, stem_block_filters, skip_reduction, filter_multiplier, include_top, weights, input_tensor, pooling, classes, default_size, **kwargs)\n     166                                       data_format=backend.image_data_format(),\n     167                                       require_flatten=True,\n --> 168                                       weights=weights)\n     169 \n     170     if backend.image_data_format() != 'channels_last':\n \n /opt/anaconda3/lib/python3.6/site-packages/keras_applications/imagenet_utils.py in _obtain_input_shape(input_shape, default_size, min_size, data_format, require_flatten, weights)\n     290                                  'and loading `imagenet` weights, '\n     291                                  '`input_shape` should be ' +\n --> 292                                  str(default_shape) + '.')\n     293         return default_shape\n     294     if input_shape:\n \n ValueError: When setting `include_top=True` and loading `imagenet` weights, `input_shape` should be (331, 331, 3).\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "dipanjanS", "commentT": "2019-03-13T18:09:16Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/dipanjanS>@dipanjanS</denchmark-link>\n  Could you provide a code to reproduce the bug? Thanks!\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "dipanjanS", "commentT": "2019-03-13T20:01:48Z", "comment_text": "\n \t\tHi, it's mentioned in the previous comment, reposting here again separately.\n <denchmark-code>nasnet = tf.keras.applications.nasnet.NASNetLarge(include_top=False, weights='imagenet', \n                                                   input_shape=(100, 100, 3))\n </denchmark-code>\n \n Tensorflow version being used: '2.0.0-alpha0'\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "dipanjanS", "commentT": "2019-03-13T22:10:16Z", "comment_text": "\n \t\tAdding Francois who is the owner Keras overall.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "dipanjanS", "commentT": "2019-05-09T03:04:09Z", "comment_text": "\n \t\tSame question\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "dipanjanS", "commentT": "2019-05-12T03:45:24Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/fchollet>@fchollet</denchmark-link>\n  any idea on this aspect?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "dipanjanS", "commentT": "2019-05-20T05:57:38Z", "comment_text": "\n \t\tI need to wrote weights=None, then the training runs successfully.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "dipanjanS", "commentT": "2019-05-20T11:17:12Z", "comment_text": "\n \t\tThat is just random initialization of weights, the whole point of using this is to do transfer learning with pre-trained weights obtained from imagenet. Using weights=None defeats the purpose of doing that. That's the same like building your own CNN and copying the layers from Nasnet.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "dipanjanS", "commentT": "2019-05-20T16:20:01Z", "comment_text": "\n \t\tI understand.but then you see in practice, nasnet was requiring fixed image size after loading imagenet.whats the solution to that besides dumping imagenet?-------- Original Message --------Subject: Re: [tensorflow/tensorflow] Nasnet models don't support custom image sizes even if include_top is set to False (<denchmark-link:https://github.com/tensorflow/tensorflow/issues/26639>#26639</denchmark-link>\n )From: Dipanjan Sarkar To: tensorflow/tensorflow CC: Kirosealin ,Manual That is just random initialization of weights, the whole point of using this is to do transfer learning with pre-trained weights obtained from imagenet. Using weights=None defeats the purpose of doing that. That's the same like building your own CNN and copying the layers from Nasnet.\n \n \u2014You are receiving this because you are subscribed to this thread.Reply to this email directly, view it on GitHub, or mute the thread.\n [\n {\n \"<denchmark-link:https://github.com/context>@context</denchmark-link>\n \": \"<denchmark-link:http://schema.org>http://schema.org</denchmark-link>\n \",\n \"<denchmark-link:https://github.com/type>@type</denchmark-link>\n \": \"EmailMessage\",\n \"potentialAction\": {\n \"<denchmark-link:https://github.com/type>@type</denchmark-link>\n \": \"ViewAction\",\n \"target\": \"<denchmark-link:https://github.com/tensorflow/tensorflow/issues/26639>#26639</denchmark-link>\n ?email_source=notifications\\u0026email_token=AFSLRD4TMTZWQ2OWYGGW2V3PWKC4RA5CNFSM4G5RM342YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODVYP2CY#issuecomment-493944075\",\n \"url\": \"<denchmark-link:https://github.com/tensorflow/tensorflow/issues/26639>#26639</denchmark-link>\n ?email_source=notifications\\u0026email_token=AFSLRD4TMTZWQ2OWYGGW2V3PWKC4RA5CNFSM4G5RM342YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODVYP2CY#issuecomment-493944075\",\n \"name\": \"View Issue\"\n },\n \"description\": \"View this Issue on GitHub\",\n \"publisher\": {\n \"<denchmark-link:https://github.com/type>@type</denchmark-link>\n \": \"Organization\",\n \"name\": \"GitHub\",\n \"url\": \"<denchmark-link:https://github.com>https://github.com</denchmark-link>\n \"\n }\n }\n ]\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "dipanjanS", "commentT": "2019-05-20T16:29:19Z", "comment_text": "\n \t\tfixing the API so it is consistent with the other pre-trained models I guess?\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "dipanjanS", "commentT": "2019-12-28T15:27:32Z", "comment_text": "\n \t\tThe problem is not with the TensorFlow itself, but with the  module. The reason for such behavior of NASNet is described <denchmark-link:https://github.com/keras-team/keras-applications/pull/62>here</denchmark-link>\n . So it's more likely a bug than a feature, however, I think that documentation should be updated.\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "dipanjanS", "commentT": "2020-07-01T09:38:27Z", "comment_text": "\n \t\tI just ran into this, agree the documentation should be updated - both the tensorflow and keras documentation say that you should be able to set input_shape to something other than (331,331,3).\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "dipanjanS", "commentT": "2020-07-20T21:58:58Z", "comment_text": "\n \t\tThe documentation for loading weights with correct input_shape has been updated. Thanks!\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "dipanjanS", "commentT": "2020-07-20T21:59:00Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/26639>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/26639>No</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "f7ee1bff1d90aa0ac0a5e16a71c3c60f7ad96fdb", "commit_author": "A. Unique TensorFlower", "commitT": "2020-07-18 23:38:32-07:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\python\\keras\\applications\\nasnet.py", "file_new_name": "tensorflow\\python\\keras\\applications\\nasnet.py", "file_complexity": {"file_NLOC": "509", "file_CCN": "17", "file_NToken": "2979"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "357,433", "deleted_lines": null}}}}}}