{"BR": {"BR_id": "25985", "BR_author": "huan", "BRopenT": "2019-02-21T20:42:41Z", "BRcloseT": "2019-03-11T14:24:36Z", "BR_text": {"BRsummary": "reset_states() failure in a stateful network with initial_states set and training in batch - TypeError: 'NoneType' object is not subscriptable", "BRdescription": "\n System information\n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): N\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04\n Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N\n TensorFlow installed from (source or binary): binary\n TensorFlow version (use command below): 2.0.0-dev20190217\n Python version: 3.5.2\n Bazel version (if compiling from source): n/a\n GCC/Compiler version (if compiling from source): n/a\n CUDA/cuDNN version: 10\n GPU model and memory: GTX 1080 8G\n \n Describe the current behavior\n As <denchmark-link:https://github.com/manojrege>@manojrege</denchmark-link>\n  said from <denchmark-link:https://github.com/keras-team/keras/issues/11148>keras-team/keras#11148</denchmark-link>\n , when we use  with RNN in some case, we will get an exception:\n <denchmark-code>Traceback (most recent call last):\n   File \"/usr/local/Cellar/python/3.6.5_1/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\n     \"__main__\", mod_spec)\n   File \"/usr/local/Cellar/python/3.6.5_1/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 85, in _run_code\n     exec(code, run_globals)\n   File \"/Users/manoj/Desktop/repos/yane/yane/LSTM/manytomanyLSTM.py\", line 137, in <module>\n     incremental_train(space)\n   File \"/Users/manoj/Desktop/repos/yane/yane/LSTM/manytomanyLSTM.py\", line 128, in incremental_train\n     model.reset_states()\n   File \"/usr/local/lib/python3.6/site-packages/keras/engine/topology.py\", line 1968, in reset_states\n     layer.reset_states()\n   File \"/usr/local/lib/python3.6/site-packages/keras/layers/recurrent.py\", line 681, in reset_states\n     batch_size = self.input_spec[0].shape[0]        \n TypeError: 'NoneType' object is not subscriptable\n </denchmark-code>\n \n There's another issue talking about this problem at <denchmark-link:https://github.com/tensorflow/tensorflow/issues/25852>#25852</denchmark-link>\n \n Describe the expected behavior\n Should not throw exception.\n Code to reproduce the issue\n import tensorflow as tf\n \n # import pdb; pdb.set_trace()\n inputs = tf.keras.layers.Input(batch_shape=(1, 1, 1))\n \n state_h = tf.keras.layers.Input(batch_shape=(1, 1))\n state_c = tf.keras.layers.Input(batch_shape=(1, 1))\n \n states = [state_h, state_c]\n \n decoder_out = tf.keras.layers.LSTM(1, stateful=True)(\n     inputs,\n     initial_state=states\n )\n \n model = tf.keras.Model([inputs, state_h, state_c], decoder_out)\n model.reset_states()\n Other info / logs\n I can confirm that the Pull Request <denchmark-link:https://github.com/keras-team/keras/pull/11149/files>https://github.com/keras-team/keras/pull/11149/files</denchmark-link>\n  can fix this problem.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "huan", "commentT": "2019-03-11T14:24:35Z", "comment_text": "\n \t\tThis should be now fixed by <denchmark-link:https://github.com/tensorflow/tensorflow/commit/83df61b4d4ad11f3b8cf05ee98d29e6fb5e25506>83df61b</denchmark-link>\n .\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "huan", "commentT": "2019-03-11T15:54:33Z", "comment_text": "\n \t\tThanks, that's awesome.\n \t\t"}}}, "commit": {"commit_id": "83df61b4d4ad11f3b8cf05ee98d29e6fb5e25506", "commit_author": "Scott Zhu", "commitT": "2019-03-09 08:47:57-08:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\keras\\layers\\recurrent.py", "file_new_name": "tensorflow\\python\\keras\\layers\\recurrent.py", "file_complexity": {"file_NLOC": "2906", "file_CCN": "340", "file_NToken": "13961"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "699,700,701,702", "deleted_lines": "697,700", "method_info": {"method_name": "__call__", "method_params": "self,inputs,initial_state,constants,kwargs", "method_startline": "646", "method_endline": "709", "method_complexity": {"method_NLOC": "46", "method_CCN": "13", "method_NToken": "309", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\keras\\layers\\recurrent_test.py", "file_new_name": "tensorflow\\python\\keras\\layers\\recurrent_test.py", "file_complexity": {"file_NLOC": "1153", "file_CCN": "83", "file_NToken": "11040"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316", "deleted_lines": null, "method_info": {"method_name": "test_full_input_spec", "method_params": "self", "method_startline": "1305", "method_endline": "1316", "method_complexity": {"method_NLOC": "11", "method_CCN": "1", "method_NToken": "104", "method_nesting_level": "1"}}}}}}}}