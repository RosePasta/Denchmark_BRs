{"BR": {"BR_id": "30113", "BR_author": "53RT", "BRopenT": "2019-06-25T09:44:55Z", "BRcloseT": "2020-01-13T09:57:42Z", "BR_text": {"BRsummary": "tf.image.encode_png doesn't support 16 bit and inconsistent behavior in eager mode", "BRdescription": "\n Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template\n System information\n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Win 10\n Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\n TensorFlow installed from (source or binary): binary\n TensorFlow version (use command below): tested with 1.9.0, 1.12.0 and 1.14.0\n Python version: 3.7\n Bazel version (if compiling from source):\n GCC/Compiler version (if compiling from source):\n CUDA/cuDNN version:\n GPU model and memory:\n \n You can collect some of this information using our environment capture\n <denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh>script</denchmark-link>\n \n You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: \n Describe the current behavior\n Creating a numpy array with uint16 datatype and passing it to tf.image.encode_png() yields different results in eager execution mode. The first time the array is passed it somehow gets transformed to a uint8 array and for the following encodings it works as expected.\n Using a tf.session the uint16 input is always transformed to uint8\n Describe the expected behavior\n Just return a bytestring of a 16bit PNG\n Code to reproduce the issue\n Provide a reproducible test case that is the bare minimum necessary to generate the problem.\n import numpy as np\n import tensorflow as tf\n #tf.enable_eager_execution()\n \n np.random.seed(1)\n A = np.random.randint(low=0, high=65535, size=100, dtype=np.uint16).reshape(10,10,1)\n B = A.copy()\n np.allclose(A,B) # is true\n \n # Eager Execution\n a_encoded = tf.image.encode_png(A).numpy()\n b_encoded = tf.image.encode_png(B).numpy()\n \n print(len(a_encoded),len(b_encoded)) # prints 178 and 278, 278 expected both times\n assert(a_encoded == b_encoded) # Fails\n \n # Session Mode\n encode_a = tf.image.encode_png(A)\n encode_b = tf.image.encode_png(B)\n \n with tf.Session() as sess:\n     a_encoded = sess.run(encode_a)\n     b_encoded = sess.run(encode_b)\n \n print(len(a_encoded),len(b_encoded)) # prints 178 and 178 but 278 expected \n assert(a_encoded == b_encoded) # True\n Other info / logs\n Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "53RT", "commentT": "2019-06-28T06:09:13Z", "comment_text": "\n \t\tI am able to reproduce the issue with eager execution using TF 1.12 &TF 1.9 but in session i am getting the below error.\n RuntimeError: The Session graph is empty. Add operations to the graph before calling run().\n But in TF1.14 i am able to reproduce the issue with session mode but i am getting below error with eager execution.\n ValueError: tf.enable_eager_execution must be called at program startup.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "53RT", "commentT": "2019-07-12T01:00:44Z", "comment_text": "\n \t\tApologies for the delay in response. I get following results using TF 1.14. Can you please confirm?Thanks!\n Eager Mode\n  278, 278\n Session Mode\n 178, 178\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "53RT", "commentT": "2019-07-12T11:41:26Z", "comment_text": "\n \t\tHi, thanks for having a look at it.\n The PNG header of the encoded image should be something around 60-70 bytes from looking at the outputs.\n So for the 10x10px uint8 image the expected byte length is ~ 100+70 and for the uint16 it should be around 2*100+70.\n With a fresh install of TF 1.14.0 and Python 3.6 I've got\n Eager Mode\n 178,278 \n Session Mode\n 178``,``178\n But it should be 278 always, in both modes. So in session mode the encoding doesn't work and in eager mode it works after the first encoding which is currently my workaround.\n Note: I executed it in a notebook and after a kernel restart I get the 178, 278 result for eager execution and if I execute the cell again, it will be 278, 278. So I guess there is some kind of initialization going on that sets the correct datatype after the first faulty execution of tf.image.encode.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "53RT", "commentT": "2019-07-12T12:13:07Z", "comment_text": "\n \t\tIt seems the problem exists also in TF 2.0 (if the usage hasn't changed).\n Python 3.6.5 |Anaconda, Inc.| (default, Mar 29 2018, 13:32:41) [MSC v.1900 64 bit (AMD64)] on win32\n Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n >>> import numpy as np\n >>> import tensorflow as tf\n >>>\n >>> print(tf.__version__)\n 2.0.0-beta1\n >>>\n >>> np.random.seed(1)\n >>> A = np.random.randint(low=0, high=65535, size=100, dtype=np.uint16).reshape(10,10,1)\n >>> B = A.copy()\n >>> np.allclose(A,B) # is true\n True\n >>>\n >>> a_encoded = tf.image.encode_png(A).numpy()\n >>> b_encoded = tf.image.encode_png(B).numpy()\n >>>\n >>> print(len(a_encoded),len(b_encoded)) # prints 178 and 278, 278 expected both times\n 178 278\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "53RT", "commentT": "2019-11-03T19:14:28Z", "comment_text": "\n \t\tI could reproduce the issue with 2.0 and master, and could see the issue lies in the generated code of encode_png_eager_fallback (and to args_to_matching_eager).\n The issue is that in encode_png_eager_fallback, eager tensor for input image is created with \"preferred_dtype\" passed as uint8 (since EncodePng's defined T type is UINT8).\n However, input image itself is a numpy array with dtype of uint16. So, the second time it runs, input image is converted to a tensor as uint16. The reason is that the second time encode_png_eager_fallback is not called, so T type of UINT8 is not used implicitly.\n I think the behavior may need to be fixed one way or another, though I it might also break many other places if the fix is not careful.\n Not sure the best way to get around it, though <denchmark-link:https://github.com/53RT>@53RT</denchmark-link>\n  if you convert input numpy array to tensor first then the example will run correctly.\n <denchmark-link:https://github.com/orgs/tensorflow/teams/api-owners>@tensorflow/api-owners</denchmark-link>\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "53RT", "commentT": "2019-11-05T00:04:59Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/akshaym>@akshaym</denchmark-link>\n  do you understand what is happening here?\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "53RT", "commentT": "2019-11-22T21:59:39Z", "comment_text": "\n \t\tSorry for the delayed response.\n Eager internally has 2 paths (and you've found a place where they don't agree - a discrepancy I will remove soon).\n Unfortunately, this means removing the behavior of being 278 is unfortunately going to go away in eager, and all the above cases will return 178.\n As suggested by <denchmark-link:https://github.com/yongtang>@yongtang</denchmark-link>\n , the best thing to do is to convert the numpy array to a tensor explicitly.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "53RT", "commentT": "2019-12-27T05:29:03Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/53RT>@53RT</denchmark-link>\n , Looks like its fixed in TF-nightly (2.1).\n Please find the <denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/7bd1e30565e22d6f8a9087006016e52f/untitled327.ipynb>gist</denchmark-link>\n  and let us know. Thanks!\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "53RT", "commentT": "2020-01-10T12:37:31Z", "comment_text": "\n \t\tIt has been 14 days with no activity and the awaiting response label was assigned. Is this still an issue?\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "53RT", "commentT": "2020-01-13T05:16:03Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/53RT>@53RT</denchmark-link>\n , Issue is fixed in Tf-nightly.\n Can you confirm. Thanks\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "53RT", "commentT": "2020-01-13T09:57:42Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/gadagashwini>@gadagashwini</denchmark-link>\n  sorry for not responding.\n Yes I could reproduce the results and PNG encoding/decoding did worked for 8 and 16 bit with\n <denchmark-code>tf.__version__\n '2.2.0-dev20200112'\n </denchmark-code>\n \n Thanks for fixing it\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "53RT", "commentT": "2020-01-13T09:57:43Z", "comment_text": "\n \t\tAre you satisfied with the resolution of your issue?\n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/30113>Yes</denchmark-link>\n \n <denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/30113>No</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "7807ec92bf8f44b5fd6de5b5342f041b168cf1f3", "commit_author": "Akshay Modi", "commitT": "2019-11-22 18:15:05-08:00", "commit_complexity": {"commit_NLOC": "0.2692307692307692", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\python\\eager\\BUILD", "file_new_name": "tensorflow\\python\\eager\\BUILD", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "624", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "tensorflow\\python\\eager\\pywrap_tfe_src.cc", "file_new_name": "tensorflow\\python\\eager\\pywrap_tfe_src.cc", "file_complexity": {"file_NLOC": "3376", "file_CCN": "303", "file_NToken": "24026"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179", "deleted_lines": null, "method_info": {"method_name": "GetAttrToDefaultsMap", "method_params": "op_def", "method_startline": "157", "method_endline": "179", "method_complexity": {"method_NLOC": "18", "method_CCN": "5", "method_NToken": "149", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "1007", "deleted_lines": null, "method_info": {"method_name": "get_uid", "method_params": "", "method_startline": "1007", "method_endline": "1007", "method_complexity": {"method_NLOC": "1", "method_CCN": "1", "method_NToken": "9", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "151,152,153,154,155", "deleted_lines": null, "method_info": {"method_name": "GetAllAttrToDefaultsMaps", "method_params": "", "method_startline": "151", "method_endline": "155", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "37", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "tensorflow\\python\\eager\\pywrap_tfe_test.py", "file_new_name": "tensorflow\\python\\eager\\pywrap_tfe_test.py", "file_complexity": {"file_NLOC": "232", "file_CCN": "18", "file_NToken": "1930"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "297,298", "deleted_lines": null, "method_info": {"method_name": "testOpDefDefaultType.func", "method_params": "im", "method_startline": "297", "method_endline": "298", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "12", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "305,306", "deleted_lines": null, "method_info": {"method_name": "testOpDefDefaultType.func_captured", "method_params": "", "method_startline": "305", "method_endline": "306", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "11", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309", "deleted_lines": null, "method_info": {"method_name": "testOpDefDefaultType", "method_params": "self", "method_startline": "274", "method_endline": "309", "method_complexity": {"method_NLOC": "20", "method_CCN": "1", "method_NToken": "173", "method_nesting_level": "1"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\framework\\test_ops.cc", "file_new_name": "tensorflow\\python\\framework\\test_ops.cc", "file_complexity": {"file_NLOC": "562", "file_CCN": "17", "file_NToken": "3318"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "707,708,709,710,711,712,713", "deleted_lines": null, "method_info": {"method_name": "tensorflow::DTypeWithDefaultOp::Compute", "method_params": "ctx", "method_startline": "707", "method_endline": "713", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "68", "method_nesting_level": "2"}}}}}}}}