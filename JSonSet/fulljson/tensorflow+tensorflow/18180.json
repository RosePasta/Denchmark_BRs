{"BR": {"BR_id": "18180", "BR_author": "asimshankar", "BRopenT": "2018-04-02T17:10:21Z", "BRcloseT": "2018-04-05T20:14:32Z", "BR_text": {"BRsummary": "Eager: tf.size() does not respect `out_type`", "BRdescription": "\n <denchmark-h:h3>System information</denchmark-h>\n \n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux, Ubuntu 16.04\n TensorFlow installed from (source or binary): binary\n TensorFlow version (use command below): 1.7.0\n Python version:  2.7.12\n Bazel version (if compiling from source): N/A\n GCC/Compiler version (if compiling from source): N/A\n CUDA/cuDNN version: N/A\n GPU model and memory: N/A\n Exact command to reproduce:\n \n import tensorflow as tf\n \n tf.enable_eager_execution()\n \n print(tf.size([1, 2, 3]).dtype)\n <denchmark-h:h3>Describe the problem</denchmark-h>\n \n As per the documentation of <denchmark-link:https://www.tensorflow.org/api_docs/python/tf/size>tf.size</denchmark-link>\n , the  of the returned tensor should default to  and it can be optionally overridden by providing an  argument.\n However, in the snippet above,  returns a  tensor, and in a related StackOverflow question: <denchmark-link:https://stackoverflow.com/questions/49604969/gradient-error-occurred-when-calculate-two-embeddings-on-eager-mode>https://stackoverflow.com/questions/49604969/gradient-error-occurred-when-calculate-two-embeddings-on-eager-mode</denchmark-link>\n  the  used by  is resulting in a  tensor.\n Long story short, this is a buggy discrepancy between eager execution and graph construction.\n (Likely introduced in commit <denchmark-link:https://github.com/tensorflow/tensorflow/commit/47ea851d3faf029d5b23ee70cb3b96bad0128324>47ea851</denchmark-link>\n )\n CC <denchmark-link:https://github.com/alextp>@alextp</denchmark-link>\n \n \t"}, "comments": {}}, "commit": {"commit_id": "46df4a1afd50f69966e63245e7758cc0d5656c4e", "commit_author": "Asim Shankar", "commitT": "2018-04-02 12:03:55-07:00", "commit_complexity": {"commit_NLOC": "0.5714285714285714", "commit_CCN": "0.5714285714285714", "commit_Nprams": "0.5714285714285714"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "tensorflow\\python\\kernel_tests\\array_ops_test.py", "file_new_name": "tensorflow\\python\\kernel_tests\\array_ops_test.py", "file_complexity": {"file_NLOC": "1000", "file_CCN": "168", "file_NToken": "10840"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1024,1025,1026,1027,1028,1029,1030,1031,1032,1033", "deleted_lines": "1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033", "method_info": {"method_name": "testSparseShape", "method_params": "self", "method_startline": "1023", "method_endline": "1033", "method_complexity": {"method_NLOC": "10", "method_CCN": "1", "method_NToken": "169", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "1036,1037,1038,1039,1040,1041", "deleted_lines": null, "method_info": {"method_name": "testSizeDtype", "method_params": "self", "method_startline": "1036", "method_endline": "1041", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "60", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "1012,1013,1014,1015,1017,1018,1019,1020", "deleted_lines": "1011,1012,1013,1014,1015,1017,1018,1019,1020", "method_info": {"method_name": "testDenseShape", "method_params": "self", "method_startline": "1011", "method_endline": "1020", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "144", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\python\\ops\\array_ops.py", "file_new_name": "tensorflow\\python\\ops\\array_ops.py", "file_complexity": {"file_NLOC": "983", "file_CCN": "239", "file_NToken": "7339"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "390,391,392,393", "deleted_lines": "390", "method_info": {"method_name": "size_internal", "method_params": "input,name,optimize,out_type", "method_startline": "374", "method_endline": "407", "method_complexity": {"method_NLOC": "21", "method_CCN": "9", "method_NToken": "223", "method_nesting_level": "0"}}}}}}}}