{"BR": {"BR_id": "25463", "BR_author": "rsepassi", "BRopenT": "2019-02-03T02:46:03Z", "BRcloseT": "2019-02-07T04:39:39Z", "BR_text": {"BRsummary": "TensorFlow GCS access does not work from colab", "BRdescription": "\n System information\n Using colab.research.google.com\n Describe the current behavior\n Hangs.\n <denchmark-code>import tensorflow as tf\n tf.io.gfile.exists(\u201cgs://tfds-data\u201d)  # which is a public GCS bucket\n </denchmark-code>\n \n Describe the expected behavior\n Should not hang.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "rsepassi", "commentT": "2019-02-03T02:47:18Z", "comment_text": "\n \t\tLinked <denchmark-link:https://github.com/tensorflow/datasets/issues/36>tensorflow/datasets#36</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "rsepassi", "commentT": "2019-02-04T17:55:44Z", "comment_text": "\n \t\tYes, this one's a known bug: the problem is that it's trying an authenticated request, with some number of timeouts; IIRC, it'll eventually complete after ~10m. (!!!)\n Quick workaround: first, do\n <denchmark-code>from google.colab import auth\n auth.authenticate_user()\n </denchmark-code>\n \n and it'll work.\n This was intended to be fixed upstream, but it looks like that didn't work (at least, it still hangs for me). I'll take a look.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "rsepassi", "commentT": "2019-02-04T18:43:22Z", "comment_text": "\n \t\tThanks <denchmark-link:https://github.com/craigcitro>@craigcitro</denchmark-link>\n . Why is it trying to make an authenticated request? In the particular case I'm running into, it's a publicly accessible GCS bucket, so no auth necessary. Where is the \"authenticated request\" logic happening? I'm guessing it's a TF thing, not a colab thing, right? Should we update it to first check if credentials exist? (if so, make authenticated request, if not don't)\n In my particular case, TFDS is storing some files on a public GCS bucket and is trying to load them. The user shouldn't know anything about the GCS bucket. Calling auth.authenticate_user() forces the user to go to an oauth link, copy a verification code, and paste it back in. This isn't something we want to force users to do. In the short term TFDS will probably use the GCS HTTP API instead of tf.io.gfile.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "rsepassi", "commentT": "2019-02-07T06:20:54Z", "comment_text": "\n \t\tI've added a $NO_GCE_CHECK environment variable that allows a user to completely sidestep the GCE metadata checks; anyone who's hitting the original issue (slow timeouts + retries attempting to fetch a public GCS resource) should be able to use this to get unblocked.\n For Colab in particular, I'm going to add this patch and enable it in our runtimes (where GCE metadata is never available).\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "rsepassi", "commentT": "2019-02-07T07:53:42Z", "comment_text": "\n \t\tThanks!\n <denchmark-link:#>\u2026</denchmark-link>\n \n \n On Wed, Feb 6, 2019 at 10:24 PM Craig Citro ***@***.***> wrote:\n  I've added a $NO_GCE_CHECK environment variable that allows a user to\n  completely sidestep the GCE metadata checks; anyone who's hitting the\n  original issue (slow timeouts + retries attempting to fetch a public GCS\n  resource) should be able to use this to get unblocked.\n \n  For Colab in particular, I'm going to add this patch and enable it in our\n  runtimes (where GCE metadata is never available).\n \n  \u2014\n  You are receiving this because you authored the thread.\n  Reply to this email directly, view it on GitHub\n  <#25463 (comment)>,\n  or mute the thread\n  <https://github.com/notifications/unsubscribe-auth/ABEGWxqzc1Y2eueoxJ6Cux6txS1tKe5Dks5vK8aIgaJpZM4af5x9>\n  .\n \n \n \n \t\t"}}}, "commit": {"commit_id": "a252fe83f4dc29c0614983046825ec75a3529cb9", "commit_author": "Craig Citro", "commitT": "2019-02-06 20:37:57-08:00", "commit_complexity": {"commit_NLOC": "0.4666666666666667", "commit_CCN": "0.4666666666666667", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\core\\platform\\cloud\\google_auth_provider.cc", "file_new_name": "tensorflow\\core\\platform\\cloud\\google_auth_provider.cc", "file_complexity": {"file_NLOC": "173", "file_CCN": "28", "file_NToken": "987"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,169,185,186,187,188,189,190,191", "deleted_lines": "149,150,152,168,169", "method_info": {"method_name": "tensorflow::GoogleAuthProvider::GetToken", "method_params": "t", "method_startline": "138", "method_endline": "195", "method_complexity": {"method_NLOC": "45", "method_CCN": "7", "method_NToken": "240", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tensorflow\\core\\platform\\cloud\\google_auth_provider.h", "file_new_name": "tensorflow\\core\\platform\\cloud\\google_auth_provider.h", "file_complexity": {"file_NLOC": "30", "file_CCN": "1", "file_NToken": "149"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "54", "deleted_lines": "54"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "tensorflow\\core\\platform\\cloud\\google_auth_provider_test.cc", "file_new_name": "tensorflow\\core\\platform\\cloud\\google_auth_provider_test.cc", "file_complexity": {"file_NLOC": "197", "file_CCN": "13", "file_NToken": "1221"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262", "deleted_lines": null, "method_info": {"method_name": "tensorflow::TEST_F", "method_params": "GoogleAuthProviderTest,NoGceCheckEnvironmentVariable", "method_startline": "242", "method_endline": "262", "method_complexity": {"method_NLOC": "13", "method_CCN": "1", "method_NToken": "93", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "73,75", "deleted_lines": "72", "method_info": {"method_name": "tensorflow::GoogleAuthProviderTest::ClearEnvVars", "method_params": "", "method_startline": "71", "method_endline": "76", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "25", "method_nesting_level": "2"}}}}}}}}