{"BR": {"BR_id": "13764", "BR_author": "vishvananda", "BRopenT": "2017-10-17T00:17:31Z", "BRcloseT": "2017-11-04T03:09:38Z", "BR_text": {"BRsummary": "Failure in TestNewTensor when running go test", "BRdescription": "\n <denchmark-h:h3>System information</denchmark-h>\n \n \n Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no\n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\n TensorFlow installed from (source or binary): source (branch 1.4)\n TensorFlow version (use command below): 1.4.0-dev\n Python version: 3.5\n Bazel version (if compiling from source): 5.4.0\n CUDA/cuDNN version: 8.0/6.0\n GPU model and memory: nVidia 1080Ti 11G\n Exact command to reproduce: go test -v github.com/tensorflow/tensorflow/tensorflow/go\n \n <denchmark-h:h3>Describe the problem</denchmark-h>\n \n I'm trying to use the go bindings to the tensorflow c library. When I run the tests, I get a nil pointer dereference and a segfault. The details are below. Note that I've built the c library from source using the following options:\n bazel build -c opt --config=cuda --config=mkl -c opt --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-mfpmath=both --copt=-msse4.2 -c opt --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" //tensorflow:libtensorflow.so\n <denchmark-h:h3>Source code / logs</denchmark-h>\n \n When I run go test -v github.com/tensorflow/tensorflow/tensorflow/go I get the following error:\n <denchmark-code>2017-10-16 17:12:30.568054: E tensorflow/core/common_runtime/bfc_allocator.cc:244] tried to allocate 0 bytes\n 2017-10-16 17:12:30.568065: W tensorflow/core/common_runtime/allocator_retry.cc:32] Request to allocate 0 bytes\n --- FAIL: TestNewTensor (0.00s)\n panic: runtime error: invalid memory address or nil pointer dereference [recovered]\n         panic: runtime error: invalid memory address or nil pointer dereference\n [signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x536098]\n \n goroutine 168 [running]:\n testing.tRunner.func1(0xc42059c4e0)\n         /usr/lib/go-1.8/src/testing/testing.go:622 +0x29d\n panic(0x6a0b80, 0xa18e80)\n         /usr/lib/go-1.8/src/runtime/panic.go:489 +0x2cf\n github.com/tensorflow/tensorflow/tensorflow/go.tensorData(0x7fa8f40195b0, 0xc420595900, 0x688a80, 0x6ffb90)\n         /home/vishvananda/go/src/github.com/tensorflow/tensorflow/tensorflow/go/tensor.go:209 +0x48\n github.com/tensorflow/tensorflow/tensorflow/go.NewTensor(0x683d20, 0xc4205945e0, 0xc42004d9a0, 0x2, 0x2)\n         /home/vishvananda/go/src/github.com/tensorflow/tensorflow/tensorflow/go/tensor.go:92 +0x221\n github.com/tensorflow/tensorflow/tensorflow/go.TestNewTensor(0xc42059c4e0)\n         /home/vishvananda/go/src/github.com/tensorflow/tensorflow/tensorflow/go/tensor_test.go:92 +0x2526\n testing.tRunner(0xc42059c4e0, 0x6ffbd0)\n         /usr/lib/go-1.8/src/testing/testing.go:657 +0x96\n created by testing.(*T).Run\n         /usr/lib/go-1.8/src/testing/testing.go:697 +0x2ca\n exit status 2\n FAIL    github.com/tensorflow/tensorflow/tensorflow/go  0.443s\n </denchmark-code>\n \n Adding some debugging, it turns out that the TestNewTensor test fails when attempting to create the following tensor {[]int64{2, 0}, [][]int64{{}, {}}}. If I comment out that line, the tests pass.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "vishvananda", "commentT": "2017-10-17T00:40:19Z", "comment_text": "\n \t\tIt looks like this is due to the fact that TF_TensorData returns nil if no data is allocated. Assuming this is correct behavior and nil needs to be checked for on the go side then the following patch fixes the problem:\n <denchmark-code>diff --git a/tensorflow/go/tensor.go b/tensorflow/go/tensor.go\n index e8fa21a..6cbf759 100644\n --- a/tensorflow/go/tensor.go\n +++ b/tensorflow/go/tensor.go\n @@ -205,6 +205,9 @@ func (t *Tensor) WriteContentsTo(w io.Writer) (int64, error) {\n  func tensorData(c *C.TF_Tensor) []byte {\n         // See: https://github.com/golang/go/wiki/cgo#turning-c-arrays-into-go-slices\n         cbytes := C.TF_TensorData(c)\n +       if cbytes == nil {\n +               return nil\n +       }\n         length := int(C.TF_TensorByteSize(c))\n         slice := (*[1 << 30]byte)(unsafe.Pointer(cbytes))[:length:length]\n         return slice\n </denchmark-code>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "vishvananda", "commentT": "2017-10-17T01:38:26Z", "comment_text": "\n \t\tThanks for the report <denchmark-link:https://github.com/vishvananda>@vishvananda</denchmark-link>\n . I'm unable to reproduce the problem using the 1.3.0 release binary, or <denchmark-link:https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-1.3.0.tar.gz>1.4.0-rc0 release binary</denchmark-link>\n  (will try rebuilding from source using the exact flags you're using). Do you see the same problem when using the release binaries of the C API?\n Which version of go are you using? Also, is it possible that LD_LIBRARY_PATH is somehow bringing in an older version of the C API libraries that your go program ends up using?\n It should be okay for TF_TensorData to return nil.\n Any additional information in reproducing the environment will be helpful. (I'll try to dig into this a bit more by rebuilding from source using the command you provided above)\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "vishvananda", "commentT": "2017-10-17T04:41:14Z", "comment_text": "\n \t\tFascinating, both the 1.3.0 and the 1.4.0-rc0 release binary return zero length from TF_TensorData but they return a pointer to an actual buffer instead of nil. I'm attempting my flags on the 1.3 branch to see if it is the flags that are causing it to return nil. Next, I'll try removing the extra flags one at a time to see if I can narrow it down. I suspect AllocateTensor ends up with a nil buffer in certain cases. In the successful versions I don't see this error message:\n <denchmark-code>2017-10-16 21:31:57.797656: E tensorflow/core/common_runtime/bfc_allocator.cc:244] tried to allocate 0 bytes\n 2017-10-16 21:31:57.797690: W tensorflow/core/common_runtime/allocator_retry.cc:32] Request to allocate 0 bytes\n </denchmark-code>\n \n In any case the nil check is probably good to have anyway.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "vishvananda", "commentT": "2017-10-17T05:42:38Z", "comment_text": "\n \t\tOk, I think I've tracked down the issue to building with MKL. If I build without --config=mkl the tests pass fine. The issue is that building with MKL uses the bfc_allocator to allocate memory. That allocator explicitly returns nil when an allocation of zero bytes is performed (As a side note, this probably should not be an error or warning if we expect it to happen when we request a zero length tensor). In the case of running without MKL, the allocation eventually calls malloc (or jemalloc or alloc_aligned). The man tells me that malloc(0) is implementation defined and our version returns a non-nil pointer so the code does not throw a null-pointer exception. I suggest using something like the patch I included above for the go side, and maybe downgrading the error and warning messages in bfc_allocator.cc and allocator_retry.cc to something a bit less scary (maybe Info?).\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "vishvananda", "commentT": "2017-10-17T06:07:44Z", "comment_text": "\n \t\tThanks for the detailed trackdown <denchmark-link:https://github.com/vishvananda>@vishvananda</denchmark-link>\n , much appreciated.\n Yes, what you said makes sense. For the Go side, would you like to contribute a pull request to make the fix? If not, let me know and I'm happy to make the change as well.\n Thanks!\n \t\t"}}}, "commit": {"commit_id": "db10718b38b2884cb5ed46d33c135c079f649d16", "commit_author": "Vish (Ishaya) Abrams", "commitT": "2017-11-03 20:09:38-07:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tensorflow\\go\\tensor.go", "file_new_name": "tensorflow\\go\\tensor.go", "file_complexity": {"file_NLOC": "375", "file_CCN": "80", "file_NToken": "3089"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "210,211,212", "deleted_lines": null, "method_info": {"method_name": "tensorData", "method_params": "TF_Tensor", "method_startline": "207", "method_endline": "216", "method_complexity": {"method_NLOC": "9", "method_CCN": "2", "method_NToken": "69", "method_nesting_level": "0"}}}}}}}}