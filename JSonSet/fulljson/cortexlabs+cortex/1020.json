{"BR": {"BR_id": "1020", "BR_author": "iPalash", "BRopenT": "2020-05-05T10:19:37Z", "BRcloseT": "2020-05-07T02:18:11Z", "BR_text": {"BRsummary": "Completion doesn't work with zsh", "BRdescription": "\n <denchmark-h:h4>Version</denchmark-h>\n \n 0.16.0\n <denchmark-h:h4>Description</denchmark-h>\n \n The cli client completion doesn't work in zsh shell owning to some compatibility issues in the cortex completion script. Throws an error -> bad option: -t\n <denchmark-h:h4>Steps to reproduce</denchmark-h>\n \n \n Run source  source <(cortex completion) in a zsh shell\n \n <denchmark-h:h4>Expected behavior</denchmark-h>\n \n cli autocomplete should work with zsh.\n <denchmark-h:h4>Actual behavior</denchmark-h>\n \n Since the script failed, no autocomplete with cli in zsh\n <denchmark-h:h4>Screenshots</denchmark-h>\n \n <denchmark-link:https://user-images.githubusercontent.com/3626711/81056325-fd828380-8ee7-11ea-812f-274da663ae6c.png></denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "iPalash", "commentT": "2020-05-05T16:36:03Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/iPalash>@iPalash</denchmark-link>\n  thanks for creating this issue! Currently we only support bash completion, but we will look into supporting zsh for our next release\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "iPalash", "commentT": "2020-05-06T00:06:01Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/iPalash>@iPalash</denchmark-link>\n  I am working on adding this now; does this file work on your system? You should be able to copy-paste this into a file named  in your , or paste it into any file (e.g. ) and run .\n <denchmark-code>#compdef _cortex cortex\n \n \n function _cortex {\n   local -a commands\n \n   _arguments -C \\\n     \"1: :->cmnds\" \\\n     \"*::arg:->args\"\n \n   case $state in\n   cmnds)\n     commands=(\n       \"deploy:create or update apis\"\n       \"refresh:restart all replicas for an api (witout downtime)\"\n       \"get:get information about apis\"\n       \"logs:stream logs from an api\"\n       \"predict:make a prediction request using a json file\"\n       \"delete:delete an api\"\n       \"cluster:manage a cluster\"\n       \"version:print the cli and cluster versions\"\n       \"env:manage environments\"\n       \"completion:generate shell completion scripts\"\n       \"help:Help about any command\"\n     )\n     _describe \"command\" commands\n     ;;\n   esac\n \n   case \"$words[1]\" in\n   deploy)\n     _cortex_deploy\n     ;;\n   refresh)\n     _cortex_refresh\n     ;;\n   get)\n     _cortex_get\n     ;;\n   logs)\n     _cortex_logs\n     ;;\n   predict)\n     _cortex_predict\n     ;;\n   delete)\n     _cortex_delete\n     ;;\n   cluster)\n     _cortex_cluster\n     ;;\n   version)\n     _cortex_version\n     ;;\n   env)\n     _cortex_env\n     ;;\n   completion)\n     _cortex_completion\n     ;;\n   help)\n     _cortex_help\n     ;;\n   esac\n }\n \n function _cortex_deploy {\n   _arguments \\\n     '(-e --env)'{-e,--env}'[environment to use]:' \\\n     '(-f --force)'{-f,--force}'[override the in-progress api update]' \\\n     '(-y --yes)'{-y,--yes}'[skip prompts]'\n }\n \n function _cortex_refresh {\n   _arguments \\\n     '(-e --env)'{-e,--env}'[environment to use]:' \\\n     '(-f --force)'{-f,--force}'[override the in-progress api update]'\n }\n \n function _cortex_get {\n   _arguments \\\n     '(-e --env)'{-e,--env}'[environment to use]:' \\\n     '(-w --watch)'{-w,--watch}'[re-run the command every second]'\n }\n \n function _cortex_logs {\n   _arguments \\\n     '(-e --env)'{-e,--env}'[environment to use]:'\n }\n \n function _cortex_predict {\n   _arguments \\\n     '(-e --env)'{-e,--env}'[environment to use]:'\n }\n \n function _cortex_delete {\n   _arguments \\\n     '(-e --env)'{-e,--env}'[environment to use]:' \\\n     '(-f --force)'{-f,--force}'[delete the api without confirmation]' \\\n     '(-c --keep-cache)'{-c,--keep-cache}'[keep cached data for the api]'\n }\n \n \n function _cortex_cluster {\n   local -a commands\n \n   _arguments -C \\\n     \"1: :->cmnds\" \\\n     \"*::arg:->args\"\n \n   case $state in\n   cmnds)\n     commands=(\n       \"up:spin up a cluster\"\n       \"info:get information about a cluster\"\n       \"update:update a cluster\"\n       \"down:spin down a cluster\"\n     )\n     _describe \"command\" commands\n     ;;\n   esac\n \n   case \"$words[1]\" in\n   up)\n     _cortex_cluster_up\n     ;;\n   info)\n     _cortex_cluster_info\n     ;;\n   update)\n     _cortex_cluster_update\n     ;;\n   down)\n     _cortex_cluster_down\n     ;;\n   esac\n }\n \n function _cortex_cluster_up {\n   _arguments \\\n     '(-c --config)'{-c,--config}'[path to a cluster configuration file]:filename:_files -g \"yaml\" -g \"yml\"' \\\n     '(-e --env)'{-e,--env}'[environment to configure]:' \\\n     '(-y --yes)'{-y,--yes}'[skip prompts]'\n }\n \n function _cortex_cluster_info {\n   _arguments \\\n     '(-c --config)'{-c,--config}'[path to a cluster configuration file]:filename:_files -g \"yaml\" -g \"yml\"' \\\n     '(-e --env)'{-e,--env}'[environment to configure]:' \\\n     '(-d --debug)'{-d,--debug}'[save the current cluster state to a file]' \\\n     '(-y --yes)'{-y,--yes}'[skip prompts]'\n }\n \n function _cortex_cluster_update {\n   _arguments \\\n     '(-c --config)'{-c,--config}'[path to a cluster configuration file]:filename:_files -g \"yaml\" -g \"yml\"' \\\n     '(-e --env)'{-e,--env}'[environment to configure]:' \\\n     '(-y --yes)'{-y,--yes}'[skip prompts]'\n }\n \n function _cortex_cluster_down {\n   _arguments \\\n     '(-c --config)'{-c,--config}'[path to a cluster configuration file]:filename:_files -g \"yaml\" -g \"yml\"' \\\n     '(-y --yes)'{-y,--yes}'[skip prompts]'\n }\n \n function _cortex_version {\n   _arguments \\\n     '(-e --env)'{-e,--env}'[environment to use]:'\n }\n \n \n function _cortex_env {\n   local -a commands\n \n   _arguments -C \\\n     \"1: :->cmnds\" \\\n     \"*::arg:->args\"\n \n   case $state in\n   cmnds)\n     commands=(\n       \"configure:configure an environment\"\n       \"list:list all configured environments\"\n       \"default:set the default environment\"\n       \"delete:delete an environment configuration\"\n     )\n     _describe \"command\" commands\n     ;;\n   esac\n \n   case \"$words[1]\" in\n   configure)\n     _cortex_env_configure\n     ;;\n   list)\n     _cortex_env_list\n     ;;\n   default)\n     _cortex_env_default\n     ;;\n   delete)\n     _cortex_env_delete\n     ;;\n   esac\n }\n \n function _cortex_env_configure {\n   _arguments \\\n     '(-p --provider)'{-p,--provider}'[set the provider without prompting]:' \\\n     '(-o --operator-endpoint)'{-o,--operator-endpoint}'[set the operator endpoint without prompting]:' \\\n     '(-k --aws-access-key-id)'{-k,--aws-access-key-id}'[set the aws access key id without prompting]:' \\\n     '(-s --aws-secret-access-key)'{-s,--aws-secret-access-key}'[set the aws secret access key without prompting]:' \\\n     '(-r --aws-region)'{-r,--aws-region}'[set the aws region without prompting]:'\n }\n \n function _cortex_env_list {\n   _arguments\n }\n \n function _cortex_env_default {\n   _arguments\n }\n \n function _cortex_env_delete {\n   _arguments\n }\n \n function _cortex_completion {\n   _arguments \\\n     '(-h --help)'{-h,--help}'[help for completion]'\n }\n \n function _cortex_help {\n   _arguments\n }\n \n alias cx='cortex'\n \n if compquote '' 2>/dev/null; then _cortex; else compdef _cortex cortex; fi\n </denchmark-code>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "iPalash", "commentT": "2020-05-22T22:28:16Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/iPalash>@iPalash</denchmark-link>\n  this has been released in v0.17.0 (here\u2019s the full <denchmark-link:https://github.com/cortexlabs/cortex/releases/tag/v0.17.0>changelog</denchmark-link>\n )\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "iPalash", "commentT": "2020-05-30T20:52:16Z", "comment_text": "\n \t\tThanks for the quick turnaround on this.\n \t\t"}}}, "commit": {"commit_id": "8a6f3941f9b35b3e12752caed2827714f4e1bd56", "commit_author": "David Eliahu", "commitT": "2020-05-06 19:18:11-07:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "cli\\cmd\\completion.go", "file_new_name": "cli\\cmd\\completion.go", "file_complexity": {"file_NLOC": "67", "file_CCN": "4", "file_NToken": "459"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99", "deleted_lines": null, "method_info": {"method_name": "", "method_params": "", "method_startline": "79", "method_endline": "100", "method_complexity": {"method_NLOC": "14", "method_CCN": "3", "method_NToken": "81", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "cli\\cmd\\errors.go", "file_new_name": "cli\\cmd\\errors.go", "file_complexity": {"file_NLOC": "263", "file_CCN": "36", "file_NToken": "1358"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "317,318,319,320,321,322", "deleted_lines": null, "method_info": {"method_name": "ErrorShellCompletionNotSupported", "method_params": "string", "method_startline": "317", "method_endline": "322", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "36", "method_nesting_level": "0"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "cli\\cmd\\root.go", "file_new_name": "cli\\cmd\\root.go", "file_complexity": {"file_NLOC": "161", "file_CCN": "28", "file_NToken": "803"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "210", "deleted_lines": "210", "method_info": {"method_name": "printLeadingNewLine", "method_params": "", "method_startline": "209", "method_endline": "214", "method_complexity": {"method_NLOC": "6", "method_CCN": "3", "method_NToken": "33", "method_nesting_level": "0"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "dev\\generate_cli_md.sh", "file_new_name": "dev\\generate_cli_md.sh", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "17,18,21,22,23,24", "deleted_lines": null}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "docs\\cluster-management\\uninstall.md", "file_new_name": "docs\\cluster-management\\uninstall.md", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "23", "deleted_lines": "23"}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "docs\\miscellaneous\\cli.md", "file_new_name": "docs\\miscellaneous\\cli.md", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,252", "deleted_lines": "218,219,220,221,222,223,224,225,226,229"}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "get-cli.sh", "file_new_name": "get-cli.sh", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "108,113,122,130", "deleted_lines": "108,113,122,130"}}}}}}