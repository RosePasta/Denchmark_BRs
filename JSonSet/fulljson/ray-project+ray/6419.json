{"BR": {"BR_id": "6419", "BR_author": "ericl", "BRopenT": "2019-12-10T19:53:32Z", "BRcloseT": "2019-12-20T06:21:31Z", "BR_text": {"BRsummary": "reporter.py using large amounts of CPU in get_workers()", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n reporter.py uses a lot of CPU on machines with many processes running. The culprit from profiling is get_workers:\n <denchmark-code>    memory_info (psutil/_pslinux.py:1608)\n     wrapper (psutil/_pslinux.py:1402)\n     memory_info (psutil/__init__.py:1048)\n     wrapper (psutil/_common.py:342)\n     as_dict (psutil/__init__.py:527)\n     <listcomp> (ray/reporter.py:118)\n     get_workers (ray/reporter.py:117)\n     get_all_stats (ray/reporter.py:143)\n     perform_iteration (ray/reporter.py:152)\n     run (ray/reporter.py:163)\n     <module> (ray/reporter.py:205)\n </denchmark-code>\n \n The get workers call is this:\n <denchmark-code>    @staticmethod\n     def get_workers():\n         return [\n             x.as_dict(attrs=[\n                 \"pid\", \"create_time\", \"cpu_percent\", \"cpu_times\", \"name\",\n                 \"cmdline\", \"memory_info\", \"memory_full_info\"\n             ]) for x in psutil.process_iter(attrs=[\"cmdline\"])\n             if is_worker(x.info[\"cmdline\"])\n         ]\n </denchmark-code>\n \n We call this twice a second by default.\n cc <denchmark-link:https://github.com/pcmoritz>@pcmoritz</denchmark-link>\n  <denchmark-link:https://github.com/mitchellstern>@mitchellstern</denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ericl", "commentT": "2019-12-10T19:59:51Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/edoakes>@edoakes</denchmark-link>\n  does this also affect the current release?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ericl", "commentT": "2019-12-19T22:51:33Z", "comment_text": "\n \t\tI see this issue also in 0.7.6. I have a training job involving ~8 actors, and get informed on launch that there are something like 25 ray workers. reporter.py typically consumes like 75% of a CPU core, see this typical screenshot from htop:\n <denchmark-link:https://user-images.githubusercontent.com/5598968/71216232-d85de300-226e-11ea-8ca8-e2e29b21a8be.png></denchmark-link>\n \n For a quick fix, is there a way to just disable reporter? It's pretty annoying to have to kill the process each time you need all your cores.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "ericl", "commentT": "2019-12-19T23:06:20Z", "comment_text": "\n \t\tWhoops, didn't notice there was a new release. It seems marginally better in 0.8.0, around 50% cpu on the same example:\n <denchmark-link:https://user-images.githubusercontent.com/5598968/71216982-11975280-2271-11ea-9087-fc66a2edf9bc.png></denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "de22cdb233596697d6aa13ee0214307518e1642f", "commit_author": "Eric Liang", "commitT": "2019-12-19 22:21:30-08:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "python\\ray\\dashboard\\client\\src\\api.ts", "file_new_name": "python\\ray\\dashboard\\client\\src\\api.ts", "file_complexity": {"file_NLOC": "102", "file_CCN": "8", "file_NToken": "591"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": null, "deleted_lines": "73"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "python\\ray\\ray_constants.py", "file_new_name": "python\\ray\\ray_constants.py", "file_complexity": {"file_NLOC": "107", "file_CCN": "10", "file_NToken": "489"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "153,154", "deleted_lines": "153,154"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\reporter.py", "file_new_name": "python\\ray\\reporter.py", "file_complexity": {"file_NLOC": "172", "file_CCN": "32", "file_NToken": "1055"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "115,116,117,118,119,120", "deleted_lines": "115,116", "method_info": {"method_name": "get_workers", "method_params": "", "method_startline": "112", "method_endline": "123", "method_complexity": {"method_NLOC": "12", "method_CCN": "3", "method_NToken": "51", "method_nesting_level": "1"}}}}}}}}