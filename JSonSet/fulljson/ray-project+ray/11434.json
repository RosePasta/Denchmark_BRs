{"BR": {"BR_id": "11434", "BR_author": "gregoruar", "BRopenT": "2020-10-16T11:14:21Z", "BRcloseT": "2020-10-26T19:33:14Z", "BR_text": {"BRsummary": "[tune] tune.choice, tune.qrandint not compatible with keras", "BRdescription": "\n <denchmark-h:h3>tune.choice, tune.qrandint not compatible with keras</denchmark-h>\n \n I wanted to do hparam search based on tune functionalities. Unfortunately, usage of tune built-in methods did not work, for neurons it raised TypeError: int() argument must be a string, a bytes-like object or a number, not 'Integer', when I replaced function with simple int, debugger stumbled upon tune.choice next: TypeError: Expected float32, got <ray.tune.sample.Categorical object at 0x7fe7d1835a90> of type 'Categorical' instead.\n <denchmark-code>config = {\n     \"learning_rate\": tune.qloguniform(1e-4, 1e-1, 5e-5),\n     \"batch_size\": tune.choice([32, 64, 128, 256]),\n     \"neurons1\": tune.qrandint(32, 1024, 32),\n     \"neurons2\": tune.qrandint(32, 1024, 32),\n     \"dropout\": tune.choice([0.1, 0.2, 0.3,]),\n }\n </denchmark-code>\n \n The error reproduced on the script with mnist data, which I specially prepared and in the clean environment with newly installed ray. However, everything worked, when I launched hyperparameter hp for config creation:\n <denchmark-code>from hyperopt import hp\n config = {\n     \"learning_rate\": hp.choice(\"learning_rate\", [0.001, 0.0001]),\n     \"batch_size\": tune.choice(\"batch_size\", [32, 64, 128, 256]),\n     \"neurons1\": hp.choice(\"neurons1\", [32, 64]),\n     \"neurons2\": hp.choice(\"neurons2\", [32, 64]),\n     \"dropout\": hp.choice(\"dropout\", [0.1, 0.2, 0.3,]),\n }\n \n [mnist.txt](https://github.com/ray-project/ray/files/5391092/mnist.txt)\n </denchmark-code>\n \n Here is the script:\n <denchmark-code>import os\n \n os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"3,4,5\"\n os.environ[\"TF_XLA_FLAGS\"] = \"--tf_xla_cpu_global_jit\"\n # loglevel : 0 all printed, 1 I not printed, 2 I and W not printed, 3 nothing printed\n os.environ['TF_CPP_MIN_LOG_LEVEL'] = '1'\n \n from tensorflow import keras\n \n import ray\n from ray import tune\n from ray.tune.schedulers import AsyncHyperBandScheduler\n from ray.tune.suggest.hyperopt import HyperOptSearch\n from ray.tune.suggest import ConcurrencyLimiter\n \n ray.init(configure_logging=False)\n \n EPOCHS = 20\n num_samples = 100\n experiment_name = \"test_1\"\n \n config = {\n     \"learning_rate\": tune.qloguniform(1e-4, 1e-1, 5e-5),\n     \"batch_size\": tune.choice([32, 64, 128, 256]),\n     \"neurons1\": tune.qrandint(32, 1024, 32),\n     \"neurons2\": tune.qrandint(32, 1024, 32),\n     \"dropout\": tune.choice([0.1, 0.2, 0.3,]),\n }\n \n class TuneReporter(keras.callbacks.Callback):\n     \"\"\"Tune Callback for Keras.\"\"\"\n     def on_epoch_end(self, epoch, logs=None):\n         tune.report(keras_info=logs, val_loss=logs['val_loss'], val_accuracy=logs[\"val_accuracy\"])\n \n \n \n def trainer(config):\n \n   # Load MNIST dataset as NumPy arrays\n   (x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()\n \n   # Preprocess the data\n   x_train = x_train.reshape(-1, 784).astype('float32') / 255\n   x_test = x_test.reshape(-1, 784).astype('float32') / 255\n \n   model = keras.Sequential([\n     keras.layers.Dense(config[\"neurons1\"], input_shape=(784,), activation='relu', name='dense_1'),\n     keras.layers.Dropout(config['dropout']),\n     keras.layers.Dense(config[\"neurons2\"], activation='relu', name='dense_2'),\n     keras.layers.Dense(10, activation='softmax', name='predictions'),\n   ])\n \n   model.compile(optimizer=optimizers.Adam(learning_rate = config['learning_rate']),\n           loss=keras.losses.SparseCategoricalCrossentropy(),\n           metrics=['accuracy'])\n \n   earlystopping = keras.callbacks.EarlyStopping(monitor=\"val_loss\", \n     patience=10,  \n     min_delta=1e-4, \n     mode='min', \n     restore_best_weights=True, \n     verbose=1)\n \n   tunerrep = TuneReporter()\n   callbacks_ = [earlystopping, tunerrep,]\n \n \n \n   history = model.fit(\n     x_train,\n     y_train,\n     batch_size=config[\"batch_size\"],\n     validation_data=(x_test, y_test),\n     epochs=EPOCHS,\n     callbacks=callbacks_)\n \n   return history\n \n \n scheduler = AsyncHyperBandScheduler(time_attr='training_iteration',\n                     metric=\"val_loss\",\n                     mode=\"min\",\n                     grace_period=10)\n \n #Use bayesian optimisation with TPE implemented by hyperopt\n search_alg = HyperOptSearch(config,\n                 metric=\"val_loss\",\n                 mode=\"min\",\n                 )\n \n search_alg = ConcurrencyLimiter(search_alg, max_concurrent=4)\n \n analysis = tune.run(trainer, \n           verbose=1,\n           local_dir=\"ray_results\",\n           name=experiment_name, \n           num_samples=num_samples,\n           search_alg=search_alg,\n           scheduler=scheduler,\n           raise_on_failed_trial=False,\n           resources_per_trial={\"cpu\": 2, \"gpu\": 1},\n           log_to_file=(\"stdout.log\", \"stderr.log\"),\n           fail_fast=True,\n           )\n \n best_config = analysis.get_best_config(metric=\"val_loss\", mode='min')\n print(f'Best config: {best_config}')\n </denchmark-code>\n \n Here is the partial log of two errors:\n <denchmark-code>Traceback (most recent call last):\n (pid=82997)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/threading.py\", line 916, in _bootstrap_inner\n (pid=82997)     self.run()\n (pid=82997)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/ray/tune/function_runner.py\", line 246, in run\n (pid=82997)     raise e\n (pid=82997)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/ray/tune/function_runner.py\", line 227, in run\n (pid=82997)     self._entrypoint()\n (pid=82997)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/ray/tune/function_runner.py\", line 290, in entrypoint\n (pid=82997)     self._status_reporter.get_checkpoint())\n (pid=82997)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/ray/tune/function_runner.py\", line 497, in _trainable_func\n (pid=82997)     output = train_func(config)\n (pid=82997)   File \"test_ray.py\", line 49, in trainer\n (pid=82997)     keras.layers.Dense(config[\"neurons1\"], input_shape=(784,), activation='relu', name='dense_1'),\n (pid=82997)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/layers/core.py\", line 1081, in __init__\n (pid=82997)     self.units = int(units) if not isinstance(units, int) else units\n (pid=82997) TypeError: int() argument must be a string, a bytes-like object or a number, not 'Integer'\n ------------------------------------------------------------\n (pid=84324) Traceback (most recent call last):\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/threading.py\", line 916, in _bootstrap_inner\n (pid=84324)     self.run()\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/ray/tune/function_runner.py\", line 246, in run\n (pid=84324)     raise e\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/ray/tune/function_runner.py\", line 227, in run\n (pid=84324)     self._entrypoint()\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/ray/tune/function_runner.py\", line 290, in entrypoint\n (pid=84324)     self._status_reporter.get_checkpoint())\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/ray/tune/function_runner.py\", line 497, in _trainable_func\n (pid=84324)     output = train_func(config)\n (pid=84324)   File \"test_ray.py\", line 50, in trainer\n (pid=84324)     keras.layers.Dense(10, activation='softmax', name='predictions'),\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/training/tracking/base.py\", line 457, in _method_wrapper\n (pid=84324)     result = method(self, *args, **kwargs)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/sequential.py\", line 116, in __init__\n (pid=84324)     self.add(layer)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/training/tracking/base.py\", line 457, in _method_wrapper\n (pid=84324)     result = method(self, *args, **kwargs)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/sequential.py\", line 203, in add\n (pid=84324)     output_tensor = layer(self.outputs[0])\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer.py\", line 773, in __call__\n (pid=84324)     outputs = call_fn(cast_inputs, *args, **kwargs)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/layers/core.py\", line 183, in call\n (pid=84324)     lambda: array_ops.identity(inputs))\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/utils/tf_utils.py\", line 59, in smart_cond\n (pid=84324)     pred, true_fn=true_fn, false_fn=false_fn, name=name)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/framework/smart_cond.py\", line 59, in smart_cond\n (pid=84324)     name=name)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/util/deprecation.py\", line 507, in new_func\n (pid=84324)     return func(*args, **kwargs)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/ops/control_flow_ops.py\", line 1174, in cond\n (pid=84324)     return cond_v2.cond_v2(pred, true_fn, false_fn, name)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/ops/cond_v2.py\", line 83, in cond_v2\n (pid=84324)     op_return_value=pred)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/framework/func_graph.py\", line 978, in func_graph_from_py_func\n (pid=84324)     func_outputs = python_func(*func_args, **func_kwargs)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/layers/core.py\", line 179, in dropped_inputs\n (pid=84324)     rate=self.rate)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/util/deprecation.py\", line 507, in new_func\n (pid=84324)     return func(*args, **kwargs)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/ops/nn_ops.py\", line 4289, in dropout\n (pid=84324)     return dropout_v2(x, rate, noise_shape=noise_shape, seed=seed, name=name)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/ops/nn_ops.py\", line 4383, in dropout_v2\n (pid=84324)     rate, dtype=x.dtype, name=\"rate\")\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/framework/ops.py\", line 1314, in convert_to_tensor\n (pid=84324)     ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/framework/constant_op.py\", line 317, in _constant_tensor_conversion_function\n (pid=84324)     return constant(v, dtype=dtype, name=name)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/framework/constant_op.py\", line 258, in constant\n (pid=84324)     allow_broadcast=True)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/framework/constant_op.py\", line 296, in _constant_impl\n (pid=84324)     allow_broadcast=allow_broadcast))\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/framework/tensor_util.py\", line 451, in make_tensor_proto\n (pid=84324)     _AssertCompatible(values, dtype)\n (pid=84324)   File \"/home/gsukhorukov/.conda/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/framework/tensor_util.py\", line 331, in _AssertCompatible\n (pid=84324)     (dtype.name, repr(mismatch), type(mismatch).__name__))\n (pid=84324) TypeError: Expected float32, got <ray.tune.sample.Categorical object at 0x7fe7d1835a90> of type 'Categorical' instead.\n </denchmark-code>\n \n Here is the conda yml env:\n <denchmark-code>name: ray-test\n channels:\n   - defaults\n dependencies:\n   - _libgcc_mutex=0.1=main\n   - _tflow_select=2.3.0=mkl\n   - absl-py=0.10.0=py36_0\n   - aiohttp=3.6.3=py36h7b6447c_0\n   - astor=0.8.1=py36_0\n   - async-timeout=3.0.1=py36_0\n   - attrs=20.2.0=py_0\n   - blas=1.0=mkl\n   - blinker=1.4=py36_0\n   - brotlipy=0.7.0=py36h7b6447c_1000\n   - c-ares=1.16.1=h7b6447c_0\n   - ca-certificates=2020.10.14=0\n   - cachetools=4.1.1=py_0\n   - certifi=2020.6.20=py36_0\n   - cffi=1.14.3=py36he30daa8_0\n   - chardet=3.0.4=py36_1003\n   - click=7.1.2=py_0\n   - cryptography=3.1.1=py36h1ba5d50_0\n   - dataclasses=0.7=py36_0\n   - gast=0.2.2=py36_0\n   - google-auth=1.22.1=py_0\n   - google-auth-oauthlib=0.4.1=py_2\n   - google-pasta=0.2.0=py_0\n   - grpcio=1.31.0=py36hf8bcb03_0\n   - h5py=2.10.0=py36hd6299e0_1\n   - hdf5=1.10.6=hb1b8bf9_0\n   - idna=2.10=py_0\n   - idna_ssl=1.1.0=py36_0\n   - importlib-metadata=2.0.0=py_1\n   - intel-openmp=2020.2=254\n   - keras-applications=1.0.8=py_1\n   - keras-preprocessing=1.1.0=py_1\n   - ld_impl_linux-64=2.33.1=h53a641e_7\n   - libedit=3.1.20191231=h14c3975_1\n   - libffi=3.3=he6710b0_2\n   - libgcc-ng=9.1.0=hdf63c60_0\n   - libgfortran-ng=7.3.0=hdf63c60_0\n   - libprotobuf=3.13.0.1=hd408876_0\n   - libstdcxx-ng=9.1.0=hdf63c60_0\n   - markdown=3.3.1=py36_0\n   - mkl=2020.2=256\n   - mkl-service=2.3.0=py36he904b0f_0\n   - mkl_fft=1.2.0=py36h23d657b_0\n   - mkl_random=1.1.1=py36h0573a6f_0\n   - multidict=4.7.6=py36h7b6447c_1\n   - ncurses=6.2=he6710b0_1\n   - numpy=1.19.1=py36hbc911f0_0\n   - numpy-base=1.19.1=py36hfa32c7d_0\n   - oauthlib=3.1.0=py_0\n   - openssl=1.1.1h=h7b6447c_0\n   - opt_einsum=3.1.0=py_0\n   - pandas=1.1.3=py36he6710b0_0\n   - pip=20.2.3=py36_0\n   - protobuf=3.13.0.1=py36he6710b0_1\n   - pyasn1=0.4.8=py_0\n   - pyasn1-modules=0.2.8=py_0\n   - pycparser=2.20=py_2\n   - pyjwt=1.7.1=py36_0\n   - pyopenssl=19.1.0=py_1\n   - pysocks=1.7.1=py36_0\n   - python=3.6.12=hcff3b4d_2\n   - python-dateutil=2.8.1=py_0\n   - pytz=2020.1=py_0\n   - readline=8.0=h7b6447c_0\n   - requests=2.24.0=py_0\n   - requests-oauthlib=1.3.0=py_0\n   - rsa=4.6=py_0\n   - scipy=1.5.2=py36h0b6359f_0\n   - setuptools=50.3.0=py36hb0f4dca_1\n   - six=1.15.0=py_0\n   - sqlite=3.33.0=h62c20be_0\n   - tensorboard=2.2.1=pyh532a8cf_0\n   - tensorboard-plugin-wit=1.6.0=py_0\n   - tensorflow=2.1.0=mkl_py36h23468d9_0\n   - tensorflow-base=2.1.0=mkl_py36h6d63fb7_0\n   - tensorflow-estimator=2.1.0=pyhd54b08b_0\n   - termcolor=1.1.0=py36_1\n   - tk=8.6.10=hbc83047_0\n   - typing_extensions=3.7.4.3=py_0\n   - urllib3=1.25.10=py_0\n   - werkzeug=1.0.1=py_0\n   - wheel=0.35.1=py_0\n   - wrapt=1.12.1=py36h7b6447c_1\n   - xz=5.2.5=h7b6447c_0\n   - zipp=3.3.0=py_0\n   - zlib=1.2.11=h7b6447c_3\n   - pip:\n     - aiohttp-cors==0.7.0\n     - aioredis==1.3.1\n     - beautifulsoup4==4.9.3\n     - blessings==1.7\n     - cloudpickle==1.6.0\n     - colorama==0.4.4\n     - colorful==0.5.4\n     - contextvars==2.4\n     - decorator==4.4.2\n     - filelock==3.0.12\n     - future==0.18.2\n     - google==3.0.0\n     - google-api-core==1.22.4\n     - googleapis-common-protos==1.52.0\n     - gpustat==0.6.0\n     - hiredis==1.1.0\n     - hyperopt==0.2.5\n     - immutables==0.14\n     - jsonschema==3.2.0\n     - msgpack==1.0.0\n     - networkx==2.5\n     - nvidia-ml-py3==7.352.0\n     - opencensus==0.7.11\n     - opencensus-context==0.1.2\n     - prometheus-client==0.8.0\n     - psutil==5.7.2\n     - py-spy==0.3.3\n     - pyrsistent==0.17.3\n     - pyyaml==5.3.1\n     - ray==1.0.0\n     - redis==3.4.1\n     - soupsieve==2.0.1\n     - tabulate==0.8.7\n     - tensorboardx==2.1\n     - tqdm==4.50.2\n     - yarl==1.5.1\n </denchmark-code>\n \n Ray version and other system information (Python version, TensorFlow version, OS):\n \n ray==1.0.0\n tensorflow=2.1.0=gpu_py36h2e5cdaa_0\n python=3.6.10=h0371630_0\n -os = CentOS Linux 7 (Core)\n \n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):\n If we cannot run your script, we cannot fix your issue.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "gregoruar", "commentT": "2020-10-20T15:55:35Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/gregoruar>@gregoruar</denchmark-link>\n  - first thank you for raising this issue and for the exhaustive reproduction script!\n The error is due to passing a tune search space directly to HyperOptSearch - until now we only allowed automatic conversion of tune search space when passed as the tune.run(config) parameter.\n So with\n <denchmark-code>search_alg = HyperOptSearch(\n                 metric=\"val_loss\",\n                 mode=\"min\",\n                 )\n \n search_alg = ConcurrencyLimiter(search_alg, max_concurrent=4)\n \n analysis = tune.run(trainer, \n           config=config,\n           verbose=1,\n           local_dir=\"ray_results\",\n           name=experiment_name, \n           num_samples=num_samples,\n           search_alg=search_alg,\n           scheduler=scheduler,\n           raise_on_failed_trial=False,\n           resources_per_trial={\"cpu\": 2, \"gpu\": 1},\n           log_to_file=(\"stdout.log\", \"stderr.log\"),\n           fail_fast=True,\n           )\n </denchmark-code>\n \n it should work (or run into the next error, which is that HyperOpt does not support lower bounds other than 0 for random integers...).\n We addressed this in <denchmark-link:https://github.com/ray-project/ray/pull/11503>#11503</denchmark-link>\n  however, and once that PR is merged, it will be possible to pass tune search spaces directly to search algorithms.\n Let me know if you need any more help.\n \t\t"}}}, "commit": {"commit_id": "1a1ff28d18f293cef6fb231e673ebfec5ae0328d", "commit_author": "Kai Fricke", "commitT": "2020-10-26 12:33:13-07:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "1.0", "commit_Nprams": "0.9852941176470589"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\tune\\suggest\\ax.py", "file_new_name": "python\\ray\\tune\\suggest\\ax.py", "file_complexity": {"file_NLOC": "279", "file_CCN": "32", "file_NToken": "1158"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "107", "deleted_lines": "106", "method_info": {"method_name": "__init__", "method_params": "self,Dict,None,None,None,None,None,None,None,None", "method_startline": "106", "method_endline": "114", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "85", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "107", "deleted_lines": "106", "method_info": {"method_name": "__init__", "method_params": "self,None,None,None,None,None,None,None,None", "method_startline": "105", "method_endline": "113", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "80", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\tune\\suggest\\bayesopt.py", "file_new_name": "python\\ray\\tune\\suggest\\bayesopt.py", "file_complexity": {"file_NLOC": "274", "file_CCN": "31", "file_NToken": "1351"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "366", "deleted_lines": "357", "method_info": {"method_name": "convert_search_space", "method_params": "Dict", "method_startline": "357", "method_endline": "390", "method_complexity": {"method_NLOC": "13", "method_CCN": "3", "method_NToken": "63", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "366,399,400,401,402", "deleted_lines": null, "method_info": {"method_name": "convert_search_space", "method_params": "Dict,bool", "method_startline": "366", "method_endline": "403", "method_complexity": {"method_NLOC": "16", "method_CCN": "4", "method_NToken": "81", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\tune\\suggest\\bohb.py", "file_new_name": "python\\ray\\tune\\suggest\\bohb.py", "file_complexity": {"file_NLOC": "237", "file_CCN": "34", "file_NToken": "1271"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "97,98", "deleted_lines": "96", "method_info": {"method_name": "__init__", "method_params": "self,None,None,int,None,None", "method_startline": "95", "method_endline": "100", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "49", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "97,98", "deleted_lines": "96", "method_info": {"method_name": "__init__", "method_params": "self,Dict,None,None,int,None,None", "method_startline": "96", "method_endline": "102", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "54", "method_nesting_level": "1"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\tune\\suggest\\dragonfly.py", "file_new_name": "python\\ray\\tune\\suggest\\dragonfly.py", "file_complexity": {"file_NLOC": "316", "file_CCN": "36", "file_NToken": "1260"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "135", "deleted_lines": "134", "method_info": {"method_name": "__init__", "method_params": "self,None,None,Dict,None,None,None,None,None,kwargs", "method_startline": "132", "method_endline": "140", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "82", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "135", "deleted_lines": "134", "method_info": {"method_name": "__init__", "method_params": "self,None,None,None,None,None,None,None,kwargs", "method_startline": "131", "method_endline": "139", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "77", "method_nesting_level": "1"}}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "python\\ray\\tune\\suggest\\hyperopt.py", "file_new_name": "python\\ray\\tune\\suggest\\hyperopt.py", "file_complexity": {"file_NLOC": "347", "file_CCN": "49", "file_NToken": "1847"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "13,172,173,174,175,176,177,178", "deleted_lines": "171"}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\tune\\suggest\\nevergrad.py", "file_new_name": "python\\ray\\tune\\suggest\\nevergrad.py", "file_complexity": {"file_NLOC": "240", "file_CCN": "33", "file_NToken": "1166"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "97", "deleted_lines": "96", "method_info": {"method_name": "__init__", "method_params": "self,None,Optimizer,None,None,None,None,None,kwargs", "method_startline": "94", "method_endline": "100", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "57", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "97", "deleted_lines": "96", "method_info": {"method_name": "__init__", "method_params": "self,None,Optimizer,None,Dict,None,None,None,None,kwargs", "method_startline": "95", "method_endline": "101", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "62", "method_nesting_level": "1"}}}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\tune\\suggest\\optuna.py", "file_new_name": "python\\ray\\tune\\suggest\\optuna.py", "file_complexity": {"file_NLOC": "242", "file_CCN": "34", "file_NToken": "1196"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "107", "deleted_lines": "106", "method_info": {"method_name": "__init__", "method_params": "self,None,None,None,None", "method_startline": "105", "method_endline": "109", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "44", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "107", "deleted_lines": "106", "method_info": {"method_name": "__init__", "method_params": "self,Dict,None,None,None,None", "method_startline": "106", "method_endline": "110", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "49", "method_nesting_level": "1"}}}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\tune\\suggest\\skopt.py", "file_new_name": "python\\ray\\tune\\suggest\\skopt.py", "file_complexity": {"file_NLOC": "274", "file_CCN": "31", "file_NToken": "1306"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "281", "deleted_lines": "272", "method_info": {"method_name": "convert_search_space", "method_params": "Dict", "method_startline": "272", "method_endline": "314", "method_complexity": {"method_NLOC": "13", "method_CCN": "3", "method_NToken": "63", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "281,323,324,325,326", "deleted_lines": null, "method_info": {"method_name": "convert_search_space", "method_params": "Dict,bool", "method_startline": "281", "method_endline": "327", "method_complexity": {"method_NLOC": "16", "method_CCN": "4", "method_NToken": "81", "method_nesting_level": "1"}}}}}, "file_8": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "python\\ray\\tune\\suggest\\suggestion.py", "file_new_name": "python\\ray\\tune\\suggest\\suggestion.py", "file_complexity": {"file_NLOC": "246", "file_CCN": "28", "file_NToken": "981"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "11,12,13,14,15,16,17", "deleted_lines": null}}}, "file_9": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\tune\\suggest\\zoopt.py", "file_new_name": "python\\ray\\tune\\suggest\\zoopt.py", "file_complexity": {"file_NLOC": "263", "file_CCN": "25", "file_NToken": "1090"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "256,257,262", "deleted_lines": "246,251,290,295", "method_info": {"method_name": "convert_search_space", "method_params": "Dict", "method_startline": "246", "method_endline": "295", "method_complexity": {"method_NLOC": "15", "method_CCN": "5", "method_NToken": "76", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "256,257", "deleted_lines": null, "method_info": {"method_name": "convert_search_space", "method_params": "Dict,bool", "method_startline": "256", "method_endline": "257", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "20", "method_nesting_level": "1"}}}}}, "file_10": {"file_change_type": "MODIFY", "file_Nmethod": 9, "file_old_name": "python\\ray\\tune\\tests\\test_sample.py", "file_new_name": "python\\ray\\tune\\tests\\test_sample.py", "file_complexity": {"file_NLOC": "588", "file_CCN": "33", "file_NToken": "5753"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "541,542,543,544,545,546,547,548,549,550,551,552", "deleted_lines": null, "method_info": {"method_name": "testConvertNevergrad", "method_params": "self", "method_startline": "499", "method_endline": "552", "method_complexity": {"method_NLOC": "48", "method_CCN": "1", "method_NToken": "461", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "219,220,221,222,223", "deleted_lines": null, "method_info": {"method_name": "testConvertAx", "method_params": "self", "method_startline": "156", "method_endline": "223", "method_complexity": {"method_NLOC": "61", "method_CCN": "1", "method_NToken": "477", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "700,701,702,703,704,705,706,707,708,709,710,711,712", "deleted_lines": null, "method_info": {"method_name": "testConvertZOOpt", "method_params": "self", "method_startline": "644", "method_endline": "712", "method_complexity": {"method_NLOC": "60", "method_CCN": "1", "method_NToken": "574", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "389,390,391,392,393,394,395,396,397,398,399,400,401,402", "deleted_lines": null, "method_info": {"method_name": "testConvertDragonfly", "method_params": "self", "method_startline": "326", "method_endline": "402", "method_complexity": {"method_NLOC": "67", "method_CCN": "1", "method_NToken": "493", "method_nesting_level": "1"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "594,595,596,597,598,599,600,601", "deleted_lines": null, "method_info": {"method_name": "testConvertOptuna", "method_params": "self", "method_startline": "554", "method_endline": "601", "method_complexity": {"method_NLOC": "41", "method_CCN": "1", "method_NToken": "411", "method_nesting_level": "1"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "638,639,640,641,642", "deleted_lines": null, "method_info": {"method_name": "testConvertSkOpt", "method_params": "self", "method_startline": "603", "method_endline": "642", "method_complexity": {"method_NLOC": "34", "method_CCN": "1", "method_NToken": "399", "method_nesting_level": "1"}}}, "hunk_6": {"Ismethod": 1, "added_lines": "317,318,319,320,321,322,323,324", "deleted_lines": null, "method_info": {"method_name": "testConvertBOHB", "method_params": "self", "method_startline": "273", "method_endline": "324", "method_complexity": {"method_NLOC": "45", "method_CCN": "1", "method_NToken": "437", "method_nesting_level": "1"}}}, "hunk_7": {"Ismethod": 1, "added_lines": "447,448,449,450,451", "deleted_lines": null, "method_info": {"method_name": "testConvertHyperOpt", "method_params": "self", "method_startline": "404", "method_endline": "451", "method_complexity": {"method_NLOC": "42", "method_CCN": "1", "method_NToken": "427", "method_nesting_level": "1"}}}, "hunk_8": {"Ismethod": 1, "added_lines": "267,268,269,270,271", "deleted_lines": null, "method_info": {"method_name": "testConvertBayesOpt", "method_params": "self", "method_startline": "225", "method_endline": "271", "method_complexity": {"method_NLOC": "39", "method_CCN": "1", "method_NToken": "446", "method_nesting_level": "1"}}}}}}}}