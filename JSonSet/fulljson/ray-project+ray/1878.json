{"BR": {"BR_id": "1878", "BR_author": "robertnishihara", "BRopenT": "2018-04-11T21:39:58Z", "BRcloseT": "2018-04-15T20:54:43Z", "BR_text": {"BRsummary": "UI timeline doesn't work when remote function has an argument of type \"bytes\".", "BRdescription": "\n To reproduce the issue, run the following\n import ray\n ray.init()\n \n @ray.remote\n def f(x):\n     pass\n \n f.remote(b'hello')\n Then go to the UI and try to generate the timeline. I see the following\n <denchmark-code>Collected profiles for 2 tasks.\n Dumping task profile data to /var/folders/15/54jf68993rd7753c5fms424r0000gn/T/tmpm91862cq.json, this might take a while...\n Creating JSON 6/2\n ---------------------------------------------------------------------------\n TypeError                                 Traceback (most recent call last)\n ~/Workspace/ray/python/ray/experimental/ui.py in handle_submit(sender)\n     390                                              breakdowns=breakdown,\n     391                                              obj_dep=obj_dep.value,\n --> 392                                              task_dep=task_dep.value)\n     393         print(\"Opening html file in browser...\")\n     394 \n \n ~/Workspace/ray/python/ray/experimental/state.py in dump_catapult_trace(self, path, task_info, breakdowns, task_dep, obj_dep)\n     823         print(\"Creating JSON {}/{}\".format(len(full_trace), len(task_info)))\n     824         with open(path, \"w\") as outfile:\n --> 825             json.dump(full_trace, outfile)\n     826 \n     827     def _get_times(self, data):\n \n ~/anaconda3/lib/python3.6/json/__init__.py in dump(obj, fp, skipkeys, ensure_ascii, check_circular, allow_nan, cls, indent, separators, default, sort_keys, **kw)\n     177     # could accelerate with writelines in some versions of Python, at\n     178     # a debuggability cost\n --> 179     for chunk in iterable:\n     180         fp.write(chunk)\n     181 \n \n ~/anaconda3/lib/python3.6/json/encoder.py in _iterencode(o, _current_indent_level)\n     426             yield _floatstr(o)\n     427         elif isinstance(o, (list, tuple)):\n --> 428             yield from _iterencode_list(o, _current_indent_level)\n     429         elif isinstance(o, dict):\n     430             yield from _iterencode_dict(o, _current_indent_level)\n \n ~/anaconda3/lib/python3.6/json/encoder.py in _iterencode_list(lst, _current_indent_level)\n     323                 else:\n     324                     chunks = _iterencode(value, _current_indent_level)\n --> 325                 yield from chunks\n     326         if newline_indent is not None:\n     327             _current_indent_level -= 1\n \n ~/anaconda3/lib/python3.6/json/encoder.py in _iterencode_dict(dct, _current_indent_level)\n     402                 else:\n     403                     chunks = _iterencode(value, _current_indent_level)\n --> 404                 yield from chunks\n     405         if newline_indent is not None:\n     406             _current_indent_level -= 1\n \n ~/anaconda3/lib/python3.6/json/encoder.py in _iterencode_dict(dct, _current_indent_level)\n     402                 else:\n     403                     chunks = _iterencode(value, _current_indent_level)\n --> 404                 yield from chunks\n     405         if newline_indent is not None:\n     406             _current_indent_level -= 1\n \n ~/anaconda3/lib/python3.6/json/encoder.py in _iterencode_list(lst, _current_indent_level)\n     323                 else:\n     324                     chunks = _iterencode(value, _current_indent_level)\n --> 325                 yield from chunks\n     326         if newline_indent is not None:\n     327             _current_indent_level -= 1\n \n ~/anaconda3/lib/python3.6/json/encoder.py in _iterencode(o, _current_indent_level)\n     435                     raise ValueError(\"Circular reference detected\")\n     436                 markers[markerid] = o\n --> 437             o = _default(o)\n     438             yield from _iterencode(o, _current_indent_level)\n     439             if markers is not None:\n \n ~/anaconda3/lib/python3.6/json/encoder.py in default(self, o)\n     178         \"\"\"\n     179         raise TypeError(\"Object of type '%s' is not JSON serializable\" %\n --> 180                         o.__class__.__name__)\n     181 \n     182     def encode(self, o):\n \n TypeError: Object of type 'bytes' is not JSON serializable\n </denchmark-code>\n \n \t"}, "comments": {}}, "commit": {"commit_id": "7792032ee37a7f193d1cdab72eb7fbe6af0004fb", "commit_author": "Robert Nishihara", "commitT": "2018-04-15 13:54:42-07:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "python\\ray\\experimental\\state.py", "file_new_name": "python\\ray\\experimental\\state.py", "file_complexity": {"file_NLOC": "762", "file_CCN": "109", "file_NToken": "4439"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "597,598,599,600", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "test\\runtest.py", "file_new_name": "test\\runtest.py", "file_complexity": {"file_NLOC": "1559", "file_CCN": "368", "file_NToken": "13030"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "2060", "deleted_lines": "2060", "method_info": {"method_name": "testDumpTraceFile.f", "method_params": "", "method_startline": "2060", "method_endline": "2061", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "6", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "2060", "deleted_lines": "2060", "method_info": {"method_name": "testDumpTraceFile.f", "method_params": "xs", "method_startline": "2060", "method_endline": "2061", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "8", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "2060,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080", "deleted_lines": "2060,2071", "method_info": {"method_name": "testDumpTraceFile", "method_params": "self", "method_startline": "2056", "method_endline": "2088", "method_complexity": {"method_NLOC": "23", "method_CCN": "5", "method_NToken": "193", "method_nesting_level": "1"}}}}}}}}