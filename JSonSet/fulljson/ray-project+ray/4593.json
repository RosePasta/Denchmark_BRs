{"BR": {"BR_id": "4593", "BR_author": "robertnishihara", "BRopenT": "2019-04-10T05:33:42Z", "BRcloseT": "2019-05-05T23:06:36Z", "BR_text": {"BRsummary": "The /tmp/ray directory belongs to the first person to start Ray, which leads to permission errors.", "BRdescription": "\n To see the issue, do the following:\n \n rm -r /tmp/ray\n python -c \"import ray; ray.init()\"\n ls -l /tmp/\n \n You will see a line like\n <denchmark-code>drwxr-xr-x  3 rkn  wheel    96B Apr  9 22:31 ray/\n </denchmark-code>\n \n which shows that the temp directory /tmp/ray created by Ray cannot be written by other users. If another user on the same machine tries to do ray.init(), they may run into errors. On the other hand, if you do\n ls -l /tmp/ray/\n you will see a line like\n <denchmark-code>drwxrwxrwx  4 rkn  wheel   128B Apr  9 22:31 session_2019-04-09_22-31-10_72937/\n </denchmark-code>\n \n which shows that the session directory inside of /tmp/ray/ is writable by everyone.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "robertnishihara", "commentT": "2019-04-23T19:02:36Z", "comment_text": "\n \t\tI also see this problem when starting ray on non-head nodes in a cluster with a shared /tmp directory.\n The default for a node seems to be to have /tmp/ray as the temp directory and if I specify a temp dir for a non-head node, then ray raises an error that \"When connecting to an existing cluster, temp_dir must not be provided.\"\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "robertnishihara", "commentT": "2019-04-27T04:24:04Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/robertnishihara>@robertnishihara</denchmark-link>\n  I've been continuing to see this problem a lot with classrooms where students are sharing nodes. The students are having to set temp_dir in ray.init() to avoid this issue. Maybe temp could be automatically set to something like  for user-specific tmp directories?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "robertnishihara", "commentT": "2019-04-27T23:31:45Z", "comment_text": "\n \t\tcc <denchmark-link:https://github.com/suquark>@suquark</denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "robertnishihara", "commentT": "2019-04-29T14:08:27Z", "comment_text": "\n \t\tI think the intent is to have /tmp/ray writeable by everyone and its sub-directories with user-specific permissions. Is that right?\n However, that still wouldn't solve the problem of non-head nodes not being allowed to have their own temp directories. Commenting out the following from worker.py should fix that:\n <denchmark-code>        if temp_dir is not None:\n             raise Exception(\"When connecting to an existing cluster, \"\n                             \"temp_dir must not be provided.\")\n \n </denchmark-code>\n \n Should that be a separate bug?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "robertnishihara", "commentT": "2019-04-29T17:39:09Z", "comment_text": "\n \t\tThis is tricky in that tmp has to accommodate both shared and non shared systems. Could os.stat be run to check the accessibility of tmp and if it doesn't have permission, it creates a user tmp folder for stricter systems that will block ray.init otherwise?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "robertnishihara", "commentT": "2019-04-29T18:18:36Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/gndctrl2mjrtm>@gndctrl2mjrtm</denchmark-link>\n , do you anticipate any issues with making  as writable by everyone (but then potentially making its subfolders specific to whichever user created them)?\n If that doesn't work, something like what you're suggesting could work.\n <denchmark-link:https://github.com/RaghuSpaceRajan>@RaghuSpaceRajan</denchmark-link>\n  that potentially looks like a different bug.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "robertnishihara", "commentT": "2019-04-29T18:54:54Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/robertnishihara>@robertnishihara</denchmark-link>\n  That could work from my understanding of how Ray initializes /tmp directories.\n However, the issue is that this has to be done across every node of the system, which makes me realize that in the situation where a user goes to a compute node and exits that node, all the tmp data is lost since it's stored on the compute node and deleted when the user leaves. While it could be argued that the user should stay on that node, this doesn't work as well on larger systems with many users requesting resources and it also means that the developer has to be aware of this.\n Also, this might solve it for this particular system, but doesn't mean that other systems will not also have this whenever they have shared nodes unless they are also aware of this.\n Why can't /ray be stored in the user's ~/tmp/ray instead of /tmp/ray? That would solve this additional problem as well mentioned above.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "robertnishihara", "commentT": "2019-04-29T20:27:43Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/gndctrl2mjrtm>@gndctrl2mjrtm</denchmark-link>\n  one setting where  makes more sense is the multi-tenant setting where a single Ray cluster is shared between many users. In that case, it's more natural for users to look in  instead of in the home directory of whichever other user started the Ray cluster.\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "robertnishihara", "commentT": "2019-04-29T21:00:46Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/robertnishihara>@robertnishihara</denchmark-link>\n  What about the case such as the one we have where it's a very large number of users and shared data violates data privacy laws, so there can't be a single Ray cluster? Does the object store have the ability to distinguish whether, for instance, a user has permission to get the value back from a certain object id? Regardless of the technical feasibility of getting another correct object id, the legality might prevent me from making such a global Ray cluster.\n Not to mention having a global /tmp/ray folder where all log files are then stored, but I'm assuming that the correct permissions are automatically set so that only that user can read the logs of their own workers?\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "robertnishihara", "commentT": "2019-05-04T18:15:09Z", "comment_text": "\n \t\tThis issue should be fixed by <denchmark-link:https://github.com/ray-project/ray/pull/4605>#4605</denchmark-link>\n  (once it is merged).\n <denchmark-link:https://github.com/gndctrl2mjrtm>@gndctrl2mjrtm</denchmark-link>\n  Currently the object store doesn't check any kind of permissions or do any authentication. Any process running on the same machine can connect to it. To make work really well in the multi-tenant setting with no sharing of information between drivers will take a lot more work. On the other hand, in this case, it might be easier to just start one Ray cluster per user.\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "robertnishihara", "commentT": "2019-05-05T23:06:36Z", "comment_text": "\n \t\tFixed by <denchmark-link:https://github.com/ray-project/ray/pull/4605>#4605</denchmark-link>\n .\n \t\t"}}}, "commit": {"commit_id": "bd00735fe877c24b99893651f90d3b43d87578c2", "commit_author": "Si-Yuan", "commitT": "2019-05-05 16:06:15-07:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "doc\\source\\tempfile.rst", "file_new_name": "doc\\source\\tempfile.rst", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "7,8,10,12,13,14,15,17,18,19,20,22,23,24,25,26,27,28,29,38,55,56,57,58,59", "deleted_lines": "7,8,10,12,13,14,16,17,18,28,29,30,31,48,49,50,51,52,61"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "python\\ray\\node.py", "file_new_name": "python\\ray\\node.py", "file_complexity": {"file_NLOC": "469", "file_CCN": "72", "file_NToken": "2901"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "230", "deleted_lines": null, "method_info": {"method_name": "address_info", "method_params": "self", "method_startline": "222", "method_endline": "231", "method_complexity": {"method_NLOC": "9", "method_CCN": "1", "method_NToken": "45", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "144,145,146,147,156", "deleted_lines": "139,143,144,145,146,147,148,149,151,153,154,156,157", "method_info": {"method_name": "_init_temp", "method_params": "self", "method_startline": "139", "method_endline": "157", "method_complexity": {"method_NLOC": "14", "method_CCN": "2", "method_NToken": "128", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "242,243,244", "deleted_lines": null, "method_info": {"method_name": "get_session_dir_path", "method_params": "self", "method_startline": "242", "method_endline": "244", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "10", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "156,160,161,162,163,164,165,167,168,169,170,171,172,173,174,176,177,179,180", "deleted_lines": "156,157", "method_info": {"method_name": "_init_temp", "method_params": "self,redis_client", "method_startline": "156", "method_endline": "180", "method_complexity": {"method_NLOC": "17", "method_CCN": "3", "method_NToken": "162", "method_nesting_level": "1"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 7, "file_old_name": "python\\ray\\tests\\test_tempfile.py", "file_new_name": "python\\ray\\tests\\test_tempfile.py", "file_complexity": {"file_NLOC": "127", "file_CCN": "15", "file_NToken": "795"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "147,148,149,150,151,152,153", "deleted_lines": null, "method_info": {"method_name": "test_session_dir_uniqueness", "method_params": "", "method_startline": "147", "method_endline": "153", "method_complexity": {"method_NLOC": "7", "method_CCN": "2", "method_NToken": "49", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "104,119", "deleted_lines": "113", "method_info": {"method_name": "test_raylet_tempfiles", "method_params": "", "method_startline": "101", "method_endline": "136", "method_complexity": {"method_NLOC": "32", "method_CCN": "3", "method_NToken": "266", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "139,140,141,142,143,144", "deleted_lines": null, "method_info": {"method_name": "test_tempdir_privilege", "method_params": "", "method_startline": "139", "method_endline": "144", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "47", "method_nesting_level": "0"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "51,52,53,54,55,56,57,58", "deleted_lines": null, "method_info": {"method_name": "test_tempdir_commandline", "method_params": "", "method_startline": "51", "method_endline": "58", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "59", "method_nesting_level": "0"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "42,46", "deleted_lines": null, "method_info": {"method_name": "test_tempdir", "method_params": "", "method_startline": "41", "method_endline": "48", "method_complexity": {"method_NLOC": "8", "method_CCN": "1", "method_NToken": "60", "method_nesting_level": "0"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "68,77", "deleted_lines": "62,71", "method_info": {"method_name": "test_raylet_socket_name", "method_params": "", "method_startline": "61", "method_endline": "78", "method_complexity": {"method_NLOC": "18", "method_CCN": "3", "method_NToken": "82", "method_nesting_level": "0"}}}, "hunk_6": {"Ismethod": 1, "added_lines": "88,97", "deleted_lines": "82,91,98", "method_info": {"method_name": "test_temp_plasma_store_socket", "method_params": "", "method_startline": "81", "method_endline": "98", "method_complexity": {"method_NLOC": "18", "method_CCN": "3", "method_NToken": "82", "method_nesting_level": "0"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "python\\ray\\utils.py", "file_new_name": "python\\ray\\utils.py", "file_complexity": {"file_NLOC": "254", "file_CCN": "75", "file_NToken": "1539"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,523,533", "deleted_lines": "503,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533", "method_info": {"method_name": "try_to_create_directory", "method_params": "directory_path", "method_startline": "503", "method_endline": "533", "method_complexity": {"method_NLOC": "19", "method_CCN": "6", "method_NToken": "105", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "503,504,505,506,507,508,509,510,511,512,513,514,515", "deleted_lines": "503", "method_info": {"method_name": "try_make_directory_shared", "method_params": "directory_path", "method_startline": "503", "method_endline": "515", "method_complexity": {"method_NLOC": "8", "method_CCN": "3", "method_NToken": "39", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "518,523,533,534,535,536,537,538,539,540", "deleted_lines": "518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533", "method_info": {"method_name": "try_to_create_directory", "method_params": "directory_path,warn_if_exist", "method_startline": "518", "method_endline": "540", "method_complexity": {"method_NLOC": "14", "method_CCN": "5", "method_NToken": "82", "method_nesting_level": "0"}}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\worker.py", "file_new_name": "python\\ray\\worker.py", "file_complexity": {"file_NLOC": "1378", "file_CCN": "201", "file_NToken": "7684"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1697", "deleted_lines": "1697", "method_info": {"method_name": "connect", "method_params": "node,mode,log_to_driver,worker,driver_id", "method_startline": "1693", "method_endline": "1697", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "21", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "1697", "deleted_lines": "1697,1698", "method_info": {"method_name": "connect", "method_params": "node,mode,log_to_driver,worker,driver_id,load_code_from_local", "method_startline": "1693", "method_endline": "1698", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "25", "method_nesting_level": "0"}}}}}}}}