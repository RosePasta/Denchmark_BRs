{"BR": {"BR_id": "12041", "BR_author": "AmeerHajAli", "BRopenT": "2020-11-16T17:36:57Z", "BRcloseT": "2020-12-24T17:32:53Z", "BR_text": {"BRsummary": "[C++ API] Objects leaking in the C++ language Support.", "BRdescription": "\n The c++ API is leaking objects. We suspect this is due to reference counting. We might need to add a class like this in the C++ API <denchmark-link:https://github.com/ray-project/ray/blob/master/python/ray/includes/object_ref.pxi>https://github.com/ray-project/ray/blob/master/python/ray/includes/object_ref.pxi</denchmark-link>\n .\n example:\n <denchmark-code>auto r1 = actor5.Task(&Counter::Add, r0).Remote();\n auto r2 = actor5.Task(&Counter::Add, r1).Remote();\n auto r3 = actor5.Task(&Counter::Add, r2).Remote();\n int result3 = *(Ray::Get(r3)); // this will remove r0, r1, r2, r3, which is pretty scary.\n // int result2 = *(Ray::Get(r2)); // will not work\n // int result2 = *(Ray::Get(r1)); // will not work\n // int result2 = *(Ray::Get(r0)); // will not work\n </denchmark-code>\n \n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "AmeerHajAli", "commentT": "2020-11-17T03:36:27Z", "comment_text": "\n \t\tWe can refer to <denchmark-link:https://github.com/ray-project/ray/milestone/16>https://github.com/ray-project/ray/milestone/16</denchmark-link>\n  for adding reference counting support in C++ worker.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "AmeerHajAli", "commentT": "2020-11-18T22:27:09Z", "comment_text": "\n \t\tThanks <denchmark-link:https://github.com/kfstorm>@kfstorm</denchmark-link>\n !\n There are recently some users interested in C++ (Intel, Alibaba). Just in order to set right expectations, when do you think we can have this issue resolved? cc <denchmark-link:https://github.com/SongGuyang>@SongGuyang</denchmark-link>\n  <denchmark-link:https://github.com/raulchen>@raulchen</denchmark-link>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "AmeerHajAli", "commentT": "2020-11-19T13:35:01Z", "comment_text": "\n \t\tSorry that we don't have much bandwidth on this currently. Could you guys take on this issue?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "AmeerHajAli", "commentT": "2020-11-19T15:44:18Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/SongGuyang>@SongGuyang</denchmark-link>\n  mentioned he will look into it tomorrow.\n \t\t"}}}, "commit": {"commit_id": "2059a2090da953df153cf89b477a2f9f4945b7a9", "commit_author": "Alind Khare", "commitT": "2020-12-24 09:32:52-08:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "cpp\\include\\ray\\api\\object_ref.h", "file_new_name": "cpp\\include\\ray\\api\\object_ref.h", "file_complexity": {"file_NLOC": "51", "file_CCN": "8", "file_NToken": "283"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "56,57,58,59,60", "deleted_lines": null, "method_info": {"method_name": "ray::api::ObjectRef<T>::~ObjectRef", "method_params": "", "method_startline": "56", "method_endline": "61", "method_complexity": {"method_NLOC": "6", "method_CCN": "2", "method_NToken": "37", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "50,51,52,53,54", "deleted_lines": null, "method_info": {"method_name": "ray::api::ObjectRef<T>::ObjectRef", "method_params": "id", "method_startline": "48", "method_endline": "54", "method_complexity": {"method_NLOC": "7", "method_CCN": "2", "method_NToken": "45", "method_nesting_level": "2"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "cpp\\src\\ray\\test\\cluster\\cluster_mode_test.cc", "file_new_name": "cpp\\src\\ray\\test\\cluster\\cluster_mode_test.cc", "file_complexity": {"file_NLOC": "117", "file_CCN": "13", "file_NToken": "1245"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "95,97,99,100,114,118,121,122,123,124,127,130,132,133,135,136,137,138,139,140,141", "deleted_lines": "94,95,96,98,100,102,103,117,121,124,125,126,127,128,131,132,135,137,138,140,141,142,143,144,145", "method_info": {"method_name": "TEST", "method_params": "RayClusterModeTest,FullTest", "method_startline": "36", "method_endline": "145", "method_complexity": {"method_NLOC": "81", "method_CCN": "1", "method_NToken": "1017", "method_nesting_level": "0"}}}}}}}}