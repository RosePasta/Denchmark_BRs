{"BR": {"BR_id": "12126", "BR_author": "anabranch", "BRopenT": "2020-11-18T19:47:15Z", "BRcloseT": "2020-11-19T19:05:00Z", "BR_text": {"BRsummary": "[Dashboard / metrics] KeyError: 'viewData'", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n Ray nightly, TF 2.2, Python 3.7.7, running a tune training workload.\n <denchmark-code>Error: Traceback (most recent call last): File \"/root/anaconda3/lib/python3.7/site-packages/ray/new_dashboard/utils.py\", line 351, in _update_cache response = task.result() \n File \"/root/anaconda3/lib/python3.7/site-packages/ray/new_dashboard/modules/stats_collector/stats_collector_head.py\", line 89, in get_all_nodes all_node_details = await DataOrganizer.get_all_node_details() \n File \"/root/anaconda3/lib/python3.7/site-packages/ray/new_dashboard/datacenter.py\", line 201, in get_all_node_details for node_id in DataSource.nodes.keys() \n File \"/root/anaconda3/lib/python3.7/site-packages/ray/new_dashboard/datacenter.py\", line 201, in <listcomp> for node_id in DataSource.nodes.keys() \n File \"/root/anaconda3/lib/python3.7/site-packages/ray/new_dashboard/datacenter.py\", line 149, in get_node_info node_stats[\"viewData\"], KeyError: 'viewData'\n </denchmark-code>\n \n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):\n If we cannot run your script, we cannot fix your issue.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "anabranch", "commentT": "2020-11-18T19:53:00Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/anabranch>@anabranch</denchmark-link>\n  could you please provide some info on how to reproduce this? e.g., cluster yaml and what the tune job was\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "anabranch", "commentT": "2020-11-18T23:06:28Z", "comment_text": "\n \t\tYes, I will try to get the repro. Feel free to leave as P2 until then, just wanted to document the error for posterity. Additionally, it also looks like we're just querying a dictionary for a value that may or may not exist. It seems like if we just did node_stats.get(\"viewData\", {<insert-default>} then we'd cover our bases.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "anabranch", "commentT": "2020-11-18T23:09:43Z", "comment_text": "\n \t\tIn fact just looking at <denchmark-link:https://github.com/ray-project/ray/blob/master/dashboard/datacenter.py#L146>the code</denchmark-link>\n . It seems like this is almost designed to occur as\n <denchmark-code>    node_stats = dict(DataSource.node_stats.get(node_id, {}))\n </denchmark-code>\n \n Will create an empty dictionary if it can't find the node_id and in 4 lines later we try to extract a value from it.\n I realize a reproduction would be nice, but this also just seems like a bit of a code smell where we're creating an empty dictionary and later assuming it to have a certain key.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "anabranch", "commentT": "2020-11-18T23:12:50Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/anabranch>@anabranch</denchmark-link>\n  yeah, see the PR above which fixes it. Want a repro mostly to make sure there aren't other related corner cases / assumptions we're making\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "anabranch", "commentT": "2020-11-18T23:24:57Z", "comment_text": "\n \t\tugh, I just didn't refresh github so I didn't see the PR...\n \t\t"}}}, "commit": {"commit_id": "5fb410cfbf2e42d7db61ffeed9fa3b07b21b14ce", "commit_author": "SangBin Cho", "commitT": "2020-11-19 11:04:59-08:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "0.0", "commit_Nprams": "0.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "dashboard\\datacenter.py", "file_new_name": "dashboard\\datacenter.py", "file_complexity": {"file_NLOC": "244", "file_CCN": "47", "file_NToken": "1663"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "98,100,115", "method_info": {"method_name": "get_node_workers", "method_params": "cls,node_id", "method_startline": "94", "method_endline": "127", "method_complexity": {"method_NLOC": "31", "method_CCN": "3", "method_NToken": "281", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "145,147", "deleted_lines": "149", "method_info": {"method_name": "get_node_info", "method_params": "cls,node_id", "method_startline": "127", "method_endline": "165", "method_complexity": {"method_NLOC": "29", "method_CCN": "3", "method_NToken": "235", "method_nesting_level": "1"}}}}}}}}