{"BR": {"BR_id": "12382", "BR_author": "wuisawesome", "BRopenT": "2020-11-25T03:10:55Z", "BRcloseT": "2020-12-21T18:30:04Z", "BR_text": {"BRsummary": "[Autoscaler] Autoscaler counts head node in node specific max workers", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n Given a config like this (with a program that needs 5 GPUs), 4 of them launch, and the final worker cannot launch because there are no remaining nodes which fulfill the resource demand.\n <denchmark-code>min_workers: 4\n max_workers: 4\n initial_workers: 4\n idle_timeout_minutes: 1000\n \n docker: {}\n \n provider:\n     type: aws\n     region: us-west-2\n     availability_zone: us-west-2a, us-west-2b, us-west-2c\n \n available_node_types:\n     gpu_1_ondemand:\n         max_worker: 4\n         node_config:\n             InstanceType: g4dn.16xlarge\n             TagSpecifications:\n               - ResourceType: \"instance\"\n                 Tags:\n                   - Key: anyscale-user\n                     Value: xmo@anyscale.com\n                   - Key: anyscale-expiration\n                     Value: \"2020-11-30\"\n \n # Specify the node type of the head node (as configured above).\n head_node_type: gpu_1_ondemand\n \n # Specify the default type of the worker node (as configured above).\n worker_default_node_type: gpu_1_ondemand\n \n # The default settings for the head node. This will be merged with the per-node\n # type configs given above.\n head_node:\n     ImageId: latest_dlami\n \n # The default settings for worker nodes. This will be merged with the per-node\n # type configs given above.\n worker_nodes:\n     ImageId: latest_dlami\n \n file_mounts: {\n   \"/home/ubuntu/workspace\": \".\"\n }\n \n rsync_filter:\n     - .gitignore\n \n # How Ray will authenticate with newly launched nodes.\n auth:\n     ssh_user: ubuntu\n \n setup_commands:\n   - pip install torch torchvision ray[all] pillow\n   - pip install -U boto3 botocore\n   # Download the pretrained model\n   - python -c \"from torchvision.models import resnet50; resnet50(pretrained=True)\"\n   - pip install -U https://s3-us-west-2.amazonaws.com/ray-wheels/latest/ray-1.1.0.dev0-cp37-cp37m-manylinux2014_x86_64.whl\n </denchmark-code>\n \n Ray version and other system information (Python version, TensorFlow version, OS):\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):\n If we cannot run your script, we cannot fix your issue.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "wuisawesome", "commentT": "2020-12-08T22:39:57Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/wuisawesome>@wuisawesome</denchmark-link>\n  do you mean that only three workers are launched, instead of 4?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "wuisawesome", "commentT": "2020-12-08T22:41:13Z", "comment_text": "\n \t\tYeah\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "wuisawesome", "commentT": "2020-12-09T00:16:20Z", "comment_text": "\n \t\tCan you just add +1 if it is a headnode here:\n \n \n \n ray/python/ray/autoscaler/_private/resource_demand_scheduler.py\n \n \n          Line 564\n       in\n       fd4e025\n \n \n \n \n \n \n  node_type, 0) >= node_types[node_type].get( \n \n \n \n \n \n ?\n \t\t"}}}, "commit": {"commit_id": "5e2b850836b893a7276edbcf42079b6759dbd2f0", "commit_author": "Ameer Haj Ali", "commitT": "2020-12-21 10:30:03-08:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\autoscaler\\_private\\resource_demand_scheduler.py", "file_new_name": "python\\ray\\autoscaler\\_private\\resource_demand_scheduler.py", "file_complexity": {"file_NLOC": "596", "file_CCN": "30", "file_NToken": "3023"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "570", "deleted_lines": null, "method_info": {"method_name": "get_nodes_for", "method_params": "NodeType,NodeType,NodeType,int,bool", "method_startline": "568", "method_endline": "573", "method_complexity": {"method_NLOC": "6", "method_CCN": "1", "method_NToken": "49", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "python\\ray\\tests\\test_resource_demand_scheduler.py", "file_new_name": "python\\ray\\tests\\test_resource_demand_scheduler.py", "file_complexity": {"file_NLOC": "1743", "file_CCN": "86", "file_NToken": "11653"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "261,263,266,271,274,276", "deleted_lines": null, "method_info": {"method_name": "test_get_nodes_respects_max_limit", "method_params": "", "method_startline": "246", "method_endline": "280", "method_complexity": {"method_NLOC": "35", "method_CCN": "1", "method_NToken": "192", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,233,239", "deleted_lines": "146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,182,204,206,209,214,217,219", "method_info": {"method_name": "test_get_nodes_packing_heuristic", "method_params": "", "method_startline": "145", "method_endline": "243", "method_complexity": {"method_NLOC": "96", "method_CCN": "1", "method_NToken": "505", "method_nesting_level": "0"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "1415,1440", "deleted_lines": null, "method_info": {"method_name": "testRequestBundles", "method_params": "self", "method_startline": "1408", "method_endline": "1442", "method_complexity": {"method_NLOC": "34", "method_CCN": "2", "method_NToken": "254", "method_nesting_level": "1"}}}}}}}}