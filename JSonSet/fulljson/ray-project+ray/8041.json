{"BR": {"BR_id": "8041", "BR_author": "Jungdam", "BRopenT": "2020-04-16T06:40:31Z", "BRcloseT": "2020-05-12T17:14:06Z", "BR_text": {"BRsummary": "[rllib] free_log_std does not support modelV2?", "BRdescription": "\n <denchmark-h:h3>What is your question?</denchmark-h>\n \n Previously, free_log_std was supported and was implemented in \"rllib/models/model.py\".\n Now, I was not able to find similar ones anywhere else in \"rllib/models/modelv2.py\" and its tf and torch extensions. I am curious whether free_log_std was deprecated or was just missing for some reason.\n Thanks!\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "Jungdam", "commentT": "2020-04-17T06:10:28Z", "comment_text": "\n \t\tThis looks like an unintended omission. I'm not sure if this would affect performance much though, since the logstds will still end up learnable, but connected to more units.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "Jungdam", "commentT": "2020-04-17T07:59:27Z", "comment_text": "\n \t\tThank for the reply.\n I'll assume our policy is a Gaussian policy.\n In theory, there would be similar eventually, however, there are some environments that show differences in performance in practice. The environments affected by the free_log_std option are usually ones that require careful exploration such as physically-simulated agents or robot controls. If logstd depends on the state of agent, the sampled actions could be too aggressive because logstd could be really large at some (unknown) states, which easily gets off the safe action range for agents. So, some of literatures in physically-simulated agents or robot controls reported that using state-independent logstd (like free_log_std) or constant logstd showed better performances.\n I currently implemented state-independent logstd and constant logstd myself, they showed better performances, and the convergences are more stable than state-dependent logstd.\n It would be great if you guys consider that both state-indendent and constant logstd are included as default functionalities in the future.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "Jungdam", "commentT": "2020-04-20T19:17:55Z", "comment_text": "\n \t\tThat's a good point. <denchmark-link:https://github.com/sven1977>@sven1977</denchmark-link>\n  this could be relevant during benchmarking.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "Jungdam", "commentT": "2020-04-21T01:45:35Z", "comment_text": "\n \t\tAnd also it would be good if users can assign the initial values for constant/learnable log_std.\n The implementation existed in the previous version initializes log_std as 0.0, which means 1.0 std and covers approximately 1/4 range given a mean value. In my experience, some environments required more careful exploration by setting lower values than 1.0 std.\n And, I guess that <denchmark-link:https://github.com/ray-project/ray/issues/7923>#7923</denchmark-link>\n  would be probably related to this problem. I also got NaN eventually in my environment when I run the experiment by using state_dependent log_std.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "Jungdam", "commentT": "2020-05-01T08:35:45Z", "comment_text": "\n \t\tDid you implement this for rllib? If so, would you mind sharing how you did it?\n Im also experiencing NaN problems which I suspect is caused by this.\n \n I currently implemented state-independent logstd and constant logstd myself, they showed better performances, and the convergences are more stable than state-dependent logstd.\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "Jungdam", "commentT": "2020-05-05T18:58:04Z", "comment_text": "\n \t\tJust updating that changing to free_log_std solved this for me, having very similar issues as in <denchmark-link:https://github.com/ray-project/ray/issues/7923>#7923</denchmark-link>\n \n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "Jungdam", "commentT": "2020-05-09T03:10:24Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ray-project/ray/pull/8380/files>https://github.com/ray-project/ray/pull/8380/files</denchmark-link>\n  should fix this, please give it a try!\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "Jungdam", "commentT": "2020-05-12T19:47:05Z", "comment_text": "\n \t\tSorry for the late reply. Thanks for adding this and I leave a comment in TF implementation part.\n Thanks again!\n \t\t"}}}, "commit": {"commit_id": "7ce138a6dcc38f466222f87ea4927c3e93a6e247", "commit_author": "Eric Liang", "commitT": "2020-05-12 10:14:05-07:00", "commit_complexity": {"commit_NLOC": "0.42857142857142855", "commit_CCN": "0.42857142857142855", "commit_Nprams": "0.9591836734693877"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 6, "file_old_name": "rllib\\agents\\ppo\\tests\\test_ppo.py", "file_new_name": "rllib\\agents\\ppo\\tests\\test_ppo.py", "file_complexity": {"file_NLOC": "278", "file_CCN": "45", "file_NToken": "2294"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176", "deleted_lines": "127,128,129,130,131,132,133,134,135,136,137,147,149", "method_info": {"method_name": "test_ppo_free_log_std", "method_params": "self", "method_startline": "127", "method_endline": "176", "method_complexity": {"method_NLOC": "34", "method_CCN": "9", "method_NToken": "236", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "155,156,157,158,159,160,161", "deleted_lines": null, "method_info": {"method_name": "test_ppo_free_log_std.get_value", "method_params": "", "method_startline": "155", "method_endline": "161", "method_complexity": {"method_NLOC": "7", "method_CCN": "3", "method_NToken": "52", "method_nesting_level": "3"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "63", "deleted_lines": "73", "method_info": {"method_name": "test_ppo_fake_multi_gpu_learning", "method_params": "self", "method_startline": "61", "method_endline": "86", "method_complexity": {"method_NLOC": "22", "method_CCN": "3", "method_NToken": "143", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "90", "deleted_lines": "112,119,120,121,122,123,124,125", "method_info": {"method_name": "test_ppo_exploration_setup", "method_params": "self", "method_startline": "88", "method_endline": "125", "method_complexity": {"method_NLOC": "30", "method_CCN": "5", "method_NToken": "244", "method_nesting_level": "1"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "180,191,192,193,194,195,196,197,198,199,200,201,202,203,209,211", "deleted_lines": null, "method_info": {"method_name": "test_ppo_loss_function", "method_params": "self", "method_startline": "178", "method_endline": "272", "method_complexity": {"method_NLOC": "80", "method_CCN": "19", "method_NToken": "604", "method_nesting_level": "1"}}}, "hunk_5": {"Ismethod": 1, "added_lines": "51", "deleted_lines": null, "method_info": {"method_name": "test_ppo_compilation", "method_params": "self", "method_startline": "49", "method_endline": "59", "method_complexity": {"method_NLOC": "9", "method_CCN": "3", "method_NToken": "68", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "rllib\\models\\catalog.py", "file_new_name": "rllib\\models\\catalog.py", "file_complexity": {"file_NLOC": "363", "file_CCN": "32", "file_NToken": "2130"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "47,48,49", "deleted_lines": "47"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "rllib\\models\\tf\\fcnet_v2.py", "file_new_name": "rllib\\models\\tf\\fcnet_v2.py", "file_complexity": {"file_NLOC": "85", "file_CCN": "4", "file_NToken": "669"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "80,81,82", "deleted_lines": null, "method_info": {"method_name": "tiled_log_std", "method_params": "x", "method_startline": "80", "method_endline": "82", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "35", "method_nesting_level": "3"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "rllib\\models\\torch\\fcnet.py", "file_new_name": "rllib\\models\\torch\\fcnet.py", "file_complexity": {"file_NLOC": "86", "file_CCN": "5", "file_NToken": "587"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "107,108", "deleted_lines": null, "method_info": {"method_name": "forward", "method_params": "self,input_dict,state,seq_lens", "method_startline": "103", "method_endline": "110", "method_complexity": {"method_NLOC": "8", "method_CCN": "3", "method_NToken": "88", "method_nesting_level": "1"}}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "rllib\\models\\torch\\misc.py", "file_new_name": "rllib\\models\\torch\\misc.py", "file_complexity": {"file_NLOC": "88", "file_CCN": "9", "file_NToken": "599"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "120,121,122,123", "deleted_lines": null, "method_info": {"method_name": "forward", "method_params": "self,x", "method_startline": "120", "method_endline": "123", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "44", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "114,115,116,117,118", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,num_bias_vars", "method_startline": "114", "method_endline": "118", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "47", "method_nesting_level": "1"}}}}}}}}