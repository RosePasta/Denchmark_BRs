{"BR": {"BR_id": "13346", "BR_author": "edoakes", "BRopenT": "2021-01-11T22:17:19Z", "BRcloseT": "2021-01-14T16:38:03Z", "BR_text": {"BRsummary": "[ray client] Failure when get_actor returns an exception", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n Serve uses exceptions from get_actor as a signal that the actor doesn't exist.\n import ray\n \n ray.util.connect(\"localhost:60123\")\n ray.get_actor(\"does_not_exist\")\n <denchmark-code>Traceback (most recent call last):\n   File \"test.py\", line 5, in <module>\n     client = serve.start(detached=True)\n   File \"/Users/eoakes/code/ray/python/ray/serve/api.py\", line 590, in start\n     ray.get_actor(controller_name)\n   File \"/Users/eoakes/code/ray/python/ray/_private/client_mode_hook.py\", line 46, in wrapper\n     return getattr(ray, func.__name__)(*args, **kwargs)\n   File \"/Users/eoakes/code/ray/python/ray/util/client/api.py\", line 125, in get_actor\n     return self.worker.get_actor(name)\n   File \"/Users/eoakes/code/ray/python/ray/util/client/worker.py\", line 205, in get_actor\n     ids = self._call_schedule_for_task(task)\n   File \"/Users/eoakes/code/ray/python/ray/util/client/worker.py\", line 169, in _call_schedule_for_task\n     raise decode_exception(e.details)\n   File \"/Users/eoakes/code/ray/python/ray/util/client/worker.py\", line 264, in decode_exception\n     data = base64.standard_b64decode(data)\n   File \"/Users/eoakes/anaconda3/lib/python3.8/base64.py\", line 105, in standard_b64decode\n     return b64decode(s)\n   File \"/Users/eoakes/anaconda3/lib/python3.8/base64.py\", line 80, in b64decode\n     s = _bytes_from_decode_data(s)\n   File \"/Users/eoakes/anaconda3/lib/python3.8/base64.py\", line 45, in _bytes_from_decode_data\n     raise TypeError(\"argument should be a bytes-like object or ASCII \"\n TypeError: argument should be a bytes-like object or ASCII string, not 'method'\n </denchmark-code>\n \n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Please provide a short code snippet (less than 50 lines if possible) that can be copy-pasted to reproduce the issue. The snippet should have no external library dependencies (i.e., use fake or mock data / environments):\n If the code snippet cannot be run by itself, the issue will be closed with \"needs-repro-script\".\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {}}, "commit": {"commit_id": "9c6d892eec114ebef8df707320b8e8114feb1d63", "commit_author": "Barak Michener", "commitT": "2021-01-14 10:38:01-06:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\tests\\test_actor.py", "file_new_name": "python\\ray\\tests\\test_actor.py", "file_complexity": {"file_NLOC": "655", "file_CCN": "166", "file_NToken": "4954"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "858,859,860", "deleted_lines": null, "method_info": {"method_name": "test_get_non_existing_named_actor", "method_params": "ray_start_regular_shared", "method_startline": "858", "method_endline": "860", "method_complexity": {"method_NLOC": "3", "method_CCN": "1", "method_NToken": "21", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\util\\client\\server\\server.py", "file_new_name": "python\\ray\\util\\client\\server\\server.py", "file_complexity": {"file_NLOC": "412", "file_CCN": "72", "file_NToken": "3025"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "264", "deleted_lines": "264,265", "method_info": {"method_name": "Schedule", "method_params": "self,task,context", "method_startline": "241", "method_endline": "266", "method_complexity": {"method_NLOC": "26", "method_CCN": "6", "method_NToken": "188", "method_nesting_level": "1"}}}}}}}}