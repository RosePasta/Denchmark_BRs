{"BR": {"BR_id": "11484", "BR_author": "ericl", "BRopenT": "2020-10-19T22:26:50Z", "BRcloseT": "2020-11-03T17:34:15Z", "BR_text": {"BRsummary": "[autoscaler] EC2 instance type resources detection only works for first 100 instances", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n The AWS node provider's call to boto3.client(\"ec2\").describe_instance_types() only returns 100 results. It seems we need to paginate through the full set of instance types, which exceeds 100: <denchmark-link:https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_instance_types>https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_instance_types</denchmark-link>\n \n Otherwise, instances like \"m4.16xlarge\" are not found in the list: dict_keys(['m2.2xlarge', 'r5a.12xlarge', 'c6g.16xlarge', 'm6g.xlarge', 'r5dn.8xlarge', 'm5dn.12xlarge', 'c5n.2xlarge', 'm5ad.8xlarge', 'c4.8xlarge', 't2.2xlarge', 'm5d.large', 'd2.2xlarge', 'c6g.xlarge', 'm5d.8xlarge', 'r5ad.24xlarge', 'inf1.xlarge', 'c5d.12xlarge', 't4g.nano', 'z1d.2xlarge', 't1.micro', 'r5a.xlarge', 'c5ad.16xlarge', 'c5ad.12xlarge', 'c5d.large', 'r6g.8xlarge', 'm5a.2xlarge', 'c5.4xlarge', 'c3.large', 'm5a.4xlarge', 'f1.2xlarge', 'r3.large', 'm5.24xlarge', 'x1e.8xlarge', 'c5ad.24xlarge', 'm5.8xlarge', 'c6gd.metal', 'r5ad.8xlarge', 'r5ad.12xlarge', 'm5a.16xlarge', 'm5n.16xlarge', 'm6g.metal', 'r6g.medium', 'm5d.16xlarge', 't3a.small', 'm6gd.metal', 'r4.16xlarge', 'a1.medium', 'i3en.3xlarge', 'c4.4xlarge', 'm2.4xlarge', 'r6gd.2xlarge', 'i3en.12xlarge', 'r3.8xlarge', 'r6gd.large', 'x1e.32xlarge', 'm5ad.4xlarge', 'm5dn.large', 'r6gd.xlarge', 'g3.16xlarge', 'm5dn.2xlarge', 'm5dn.8xlarge', 't3.2xlarge', 'g4dn.metal', 'r5.24xlarge', 'r6gd.medium', 't3a.2xlarge', 'm6gd.xlarge', 'c5ad.4xlarge', 'c5a.4xlarge', 't4g.medium', 'm5ad.2xlarge', 'i2.2xlarge', 'm4.4xlarge', 'm5ad.large', 'm5dn.xlarge', 'r6g.16xlarge', 'c3.8xlarge', 'm6gd.12xlarge', 'm5.12xlarge', 'r5a.large', 'm5ad.12xlarge', 'm5.xlarge', 'i3en.24xlarge', 'm5d.xlarge', 't3.xlarge', 'x1.16xlarge', 'm6gd.4xlarge', 'r5a.2xlarge', 'c5n.large', 'm6gd.medium', 'c5n.4xlarge', 'x1e.2xlarge', 'r5n.4xlarge', 'c6g.12xlarge', 'r5n.12xlarge', 'm5d.metal', 'd2.8xlarge', 'm5.metal', 'r6g.large', 'c5.xlarge'])\n Btw, we should also be raising an error if an instance type is not found in this dict, instead of silently ignoring it.\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Try to create a cluster with m4.16xl instance type--- resources will not be auto filled.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ericl", "commentT": "2020-10-19T22:28:00Z", "comment_text": "\n \t\tboto sucks\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ericl", "commentT": "2020-10-19T22:28:50Z", "comment_text": "\n \t\t\n Btw, we should also be raising an error if an instance type is not found in this dict, instead of silently ignoring it.\n \n Maybe we should consider a warning? That way if we're doing something wrong, the user can hard code these things in. I agree we shouldn't be silent though.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "ericl", "commentT": "2020-10-19T22:44:37Z", "comment_text": "\n \t\tI can't think of a valid reason why the user would want to launch with an invalid instance type, so it seems fine to me to raise an error in this case.\n Note that we already try-catch around the entire resource detection block, so it would get converted to a warning that it could not autodetect for that instance type.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "ericl", "commentT": "2020-10-19T23:00:15Z", "comment_text": "\n \t\tAh yeah that's right, we do try-catch the whole thing. I'm happy with that, though I betcha boto will find a way to fail still :p (i wonder what instances will be returned if your default region doesn't have an instance type...)\n \t\t"}}}, "commit": {"commit_id": "08e0e8311a33c85e21ee19a067d17e46f432a08a", "commit_author": "Ameer Haj Ali", "commitT": "2020-11-03 09:34:14-08:00", "commit_complexity": {"commit_NLOC": "0.07142857142857142", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\autoscaler\\_private\\aws\\node_provider.py", "file_new_name": "python\\ray\\autoscaler\\_private\\aws\\node_provider.py", "file_complexity": {"file_NLOC": "407", "file_CCN": "74", "file_NToken": "2411"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81", "deleted_lines": null, "method_info": {"method_name": "list_ec2_instances", "method_params": "str", "method_startline": "55", "method_endline": "81", "method_complexity": {"method_NLOC": "26", "method_CCN": "2", "method_NToken": "95", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\autoscaler\\_private\\util.py", "file_new_name": "python\\ray\\autoscaler\\_private\\util.py", "file_complexity": {"file_NLOC": "163", "file_CCN": "34", "file_NToken": "1073"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "108,109", "deleted_lines": "108,109,110", "method_info": {"method_name": "fillout_defaults", "method_params": "str", "method_startline": "101", "method_endline": "110", "method_complexity": {"method_NLOC": "10", "method_CCN": "2", "method_NToken": "68", "method_nesting_level": "0"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\tests\\test_autoscaler_yaml.py", "file_new_name": "python\\ray\\tests\\test_autoscaler_yaml.py", "file_complexity": {"file_NLOC": "167", "file_CCN": "16", "file_NToken": "862"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "26,27,28,29", "deleted_lines": "26,27", "method_info": {"method_name": "testValidateDefaultConfig", "method_params": "self", "method_startline": "24", "method_endline": "37", "method_complexity": {"method_NLOC": "12", "method_CCN": "5", "method_NToken": "59", "method_nesting_level": "1"}}}}}}}}