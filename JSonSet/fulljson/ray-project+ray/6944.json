{"BR": {"BR_id": "6944", "BR_author": "alindkhare", "BRopenT": "2020-01-28T22:53:57Z", "BRcloseT": "2020-02-10T06:58:41Z", "BR_text": {"BRsummary": "[Ray] Cannot have empty byte string (b\"\")  argument for remote calls", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n Ray version: 0.8.1\n Getting this traceback for below script -\n <denchmark-code>---------------------------------------------------------------------------\n IndexError                                Traceback (most recent call last)\n IndexError: Out of bounds on buffer access (axis 0)\n Exception ignored in: 'ray._raylet.prepare_args'\n IndexError: Out of bounds on buffer access (axis 0)\n ---------------------------------------------------------------------------\n RayTaskError(AssertionError)              Traceback (most recent call last)\n <ipython-input-1-f78ed339f691> in <module>\n       4     return a\n       5 ray.init()\n ----> 6 result = ray.get(f.remote(b\"\"))\n       7 print(result)\n \n ~/anaconda3/envs/check-ray/lib/python3.6/site-packages/ray/worker.py in get(object_ids, timeout)\n    1490                     worker.core_worker.dump_object_store_memory_usage()\n    1491                 if isinstance(value, RayTaskError):\n -> 1492                     raise value.as_instanceof_cause()\n    1493                 else:\n    1494                     raise value\n \n RayTaskError(AssertionError): ray_worker (pid=19607, ip=130.207.124.200)\n   File \"python/ray/_raylet.pyx\", line 633, in ray._raylet.execute_task\n   File \"python/ray/_raylet.pyx\", line 634, in ray._raylet.execute_task\n   File \"python/ray/_raylet.pyx\", line 521, in ray._raylet.deserialize_args\n   File \"/nethome/akhare39/anaconda3/envs/check-ray/lib/python3.6/site-packages/ray/signature.py\", line 163, in recover_args\n     \"Flattened arguments need to be even-numbered. See `flatten_args`.\")\n AssertionError: Flattened arguments need to be even-numbered. See `flatten_args`.\n </denchmark-code>\n \n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n import ray\n @ray.remote\n def f(a):\n     return a\n ray.init()\n result = ray.get(f.remote(b\"\"))\n print(result)\n If we cannot run your script, we cannot fix your issue.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "alindkhare", "commentT": "2020-01-28T22:54:08Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/simon-mo>@simon-mo</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "alindkhare", "commentT": "2020-01-28T23:29:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/chaokunyang>@chaokunyang</denchmark-link>\n  is there a change from ray streaming/xlang that prevent  from serializing zero length bytes?\n It seems like &buffer[0] will error in cython.\n <denchmark-code>elif type(arg) is bytes:\n             buffer = arg\n             size = buffer.nbytes\n             arg_data = dynamic_pointer_cast[CBuffer, LocalMemoryBuffer](\n                 make_shared[LocalMemoryBuffer](\n                     <uint8_t*>(&buffer[0]), size, True))\n </denchmark-code>\n \n but if we do\n <denchmark-code>if len(arg) == 0:\n                 arg_data = dynamic_pointer_cast[CBuffer, LocalMemoryBuffer](\n                     make_shared[LocalMemoryBuffer](0)\n                 )\n </denchmark-code>\n \n the deserialization will fail and print out\n <denchmark-code>*** Aborted at 1580253913 (unix time) try \"date -d @1580253913\" if you are using GNU date ***\n PC: @                0x0 (unknown)\n *** SIGSEGV (@0x0) received by PID 90230 (TID 0x118952dc0) stack trace: ***\n     @     0x7fff6ca63b1d _sigtramp\n     @        0x10dde63ec call_function\n     @        0x10e0ffdea __Pyx_PyObject_GenericGetAttrNoDict()\n     @        0x10e1025b2 __pyx_f_3ray_7_raylet_6Buffer_make()\n     @        0x10e1497f7 __pyx_f_3ray_7_raylet_deserialize_args()\n     @        0x10e13d6bd __pyx_f_3ray_7_raylet_execute_task()\n     @        0x10e13500f __pyx_f_3ray_7_raylet_task_execution_handler()\n     @        0x10e14ff8b std::__1::__function::__func<>::operator()()\n     @        0x10e1895e5 ray::CoreWorker::ExecuteTask()\n     @        0x10e1bb23e std::__1::__function::__func<>::operator()()\n     @        0x10e1e6090 ray::CoreWorkerDirectTaskReceiver::HandlePushTask()::$_2::operator()()\n     @        0x10e1e5365 ray::CoreWorkerDirectTaskReceiver::HandlePushTask()\n     @        0x10e1c6d4e boost::asio::detail::completion_handler<>::do_complete()\n     @        0x10e1b3e90 boost::asio::detail::scheduler::do_run_one()\n     @        0x10e1b3a02 boost::asio::detail::scheduler::run()\n     @        0x10e192382 ray::CoreWorker::StartExecutingTasks()\n     @        0x10e117f0b __pyx_pw_3ray_7_raylet_10CoreWorker_3run_task_loop()\n     @        0x10dd10f95 _PyCFunction_FastCallDict\n     @        0x10dde638f call_function\n     @        0x10dde3ef2 _PyEval_EvalFrameDefault\n     @        0x10dde673c fast_function\n     @        0x10dde63ec call_function\n     @        0x10dde3ef2 _PyEval_EvalFrameDefault\n     @        0x10ddd7659 _PyEval_EvalCodeWithName\n     @        0x10de3010c PyRun_FileExFlags\n     @        0x10de2f5e4 PyRun_SimpleFileExFlags\n     @        0x10de562a6 Py_Main\n     @        0x10dc88009 main\n     @     0x7fff6c8622e5 start\n     @                0xc (unknown)\n </denchmark-code>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "alindkhare", "commentT": "2020-02-03T01:16:04Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/simon-mo>@simon-mo</denchmark-link>\n    is a bug. But  shouldn't fail. I'll look into this and submit a PR after I figured out.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "alindkhare", "commentT": "2020-02-03T03:05:10Z", "comment_text": "\n \t\tI think <denchmark-link:https://github.com/jovany-wang>@jovany-wang</denchmark-link>\n  has encountered and fixed this bug in our internal version.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "alindkhare", "commentT": "2020-02-03T07:18:40Z", "comment_text": "\n \t\tYes, I have ran into this issue before in xlang. I\u2018m not sure it's the same issue as this one.\n Anyway, it's actually a bug, I'll look into it later as well.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "alindkhare", "commentT": "2020-02-04T12:38:51Z", "comment_text": "\n \t\tAfter new serialization introduced in <denchmark-link:https://github.com/ray-project/ray/pull/6948>#6948</denchmark-link>\n , the error is:\n <denchmark-code>PC: @                0x0 (unknown)\n *** SIGABRT (@0x7fff711a7b66) received by PID 30645 (TID 0x7fffa970c380) stack trace: ***\n     @     0x7fff71365f5a _sigtramp\n     @        0x10032b279 PyErr_Occurred\n     @     0x7fff711031ae abort\n     @        0x10807f679 google::logging_fail()\n     @        0x10807f66a google::LogMessage::Fail()\n     @        0x10807e548 google::LogMessage::SendToLog()\n     @        0x10807eb9c google::LogMessage::Flush()\n     @        0x10807ec6f google::LogMessage::~LogMessage()\n     @        0x107cf5a05 arrow::util::ArrowLog::~ArrowLog()\n     @        0x1089400c7 arrow::py::PyBuffer::Init()\n     @        0x108940159 arrow::py::PyBuffer::FromPyObject()\n     @        0x107ac80bf __pyx_pw_7pyarrow_3lib_131py_buffer()\n     @        0x100d8e958 __Pyx_PyObject_CallMethO()\n     @        0x100d975e9 __pyx_f_3ray_7_raylet_write_serialized_object()\n     @        0x100db09c1 __pyx_f_3ray_7_raylet_prepare_args()\n     @        0x100da2efa __pyx_pw_3ray_7_raylet_10CoreWorker_29submit_task()\n     @        0x100295967 _PyCFunction_FastCallDict\n     @        0x100317927 call_function\n     @        0x1003140d2 _PyEval_EvalFrameDefault\n     @        0x10031838f _PyEval_EvalCodeWithName\n     @        0x100318c41 fast_function\n     @        0x100317901 call_function\n     @        0x1003140d2 _PyEval_EvalFrameDefault\n     @        0x10031838f _PyEval_EvalCodeWithName\n     @        0x100318c41 fast_function\n     @        0x100317901 call_function\n     @        0x100314171 _PyEval_EvalFrameDefault\n     @        0x10031838f _PyEval_EvalCodeWithName\n     @        0x100318c41 fast_function\n     @        0x100317901 call_function\n     @        0x1003140d2 _PyEval_EvalFrameDefault\n     @        0x10031838f _PyEval_EvalCodeWithName\n Abort trap: 6\n </denchmark-code>\n \n It's failed in pyarrow.py_buffer():\n Status PyBuffer::Init(PyObject* obj) {\n   if (!PyObject_GetBuffer(obj, &py_buf_, PyBUF_ANY_CONTIGUOUS)) {\n     data_ = reinterpret_cast<const uint8_t*>(py_buf_.buf);\n     ARROW_CHECK_NE(data_, nullptr) << \"Null pointer in Py_buffer\";\n     size_ = py_buf_.len;\n     capacity_ = py_buf_.len;\n     is_mutable_ = !py_buf_.readonly;\n     if (is_mutable_) {\n       mutable_data_ = reinterpret_cast<uint8_t*>(py_buf_.buf);\n     }\n     return Status::OK();\n   } else {\n     return ConvertPyError(StatusCode::Invalid);\n   }\n }\n It caused by NULL buffer returned by vector.data() when make_shared[LocalMemoryBuffer](0). I'll fix this\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "alindkhare", "commentT": "2020-02-10T04:10:04Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/alindkhare>@alindkhare</denchmark-link>\n   just FYI: The PR to fix this issue was merged.\n \t\t"}}}, "commit": {"commit_id": "247a4d022ac4ca0a10553616b7c806c4429ed355", "commit_author": "chaokunyang", "commitT": "2020-02-10 12:07:29+08:00", "commit_complexity": {"commit_NLOC": "0.0", "commit_CCN": "0.0", "commit_Nprams": "0.6666666666666666"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "python\\ray\\_raylet.pyx", "file_new_name": "python\\ray\\_raylet.pyx", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "569,570,571,572,573,574,575", "deleted_lines": "569,570,571,572"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\tests\\test_basic.py", "file_new_name": "python\\ray\\tests\\test_basic.py", "file_complexity": {"file_NLOC": "1224", "file_CCN": "288", "file_NToken": "9659"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "46,47", "deleted_lines": null, "method_info": {"method_name": "test_simple_serialization", "method_params": "ray_start_regular", "method_startline": "38", "method_endline": "101", "method_complexity": {"method_NLOC": "53", "method_CCN": "7", "method_NToken": "360", "method_nesting_level": "0"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ray\\core_worker\\core_worker.cc", "file_new_name": "src\\ray\\core_worker\\core_worker.cc", "file_complexity": {"file_NLOC": "1002", "file_CCN": "169", "file_NToken": "8061"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "970,971", "deleted_lines": "970", "method_info": {"method_name": "ray::CoreWorker::ExecuteTask", "method_params": "task_spec,resource_ids,return_objects", "method_startline": "916", "method_endline": "1000", "method_complexity": {"method_NLOC": "74", "method_CCN": "15", "method_NToken": "602", "method_nesting_level": "1"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ray\\core_worker\\transport\\direct_actor_transport.cc", "file_new_name": "src\\ray\\core_worker\\transport\\direct_actor_transport.cc", "file_complexity": {"file_NLOC": "259", "file_CCN": "48", "file_NToken": "2134"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "268", "deleted_lines": "268", "method_info": {"method_name": "ray::CoreWorkerDirectTaskReceiver::HandlePushTask", "method_params": "request,reply,send_reply_callback", "method_startline": "198", "method_endline": "342", "method_complexity": {"method_NLOC": "111", "method_CCN": "24", "method_NToken": "927", "method_nesting_level": "1"}}}}}}}}