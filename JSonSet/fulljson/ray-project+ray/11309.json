{"BR": {"BR_id": "11309", "BR_author": "demattia", "BRopenT": "2020-10-09T12:34:32Z", "BRcloseT": "2020-10-21T21:29:44Z", "BR_text": {"BRsummary": "[tune] A worker dies after 1000 samples", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n Workers crash while testing the Hyperopt example script: <denchmark-link:https://docs.ray.io/en/latest/tune/examples/hyperopt_example.html>https://docs.ray.io/en/latest/tune/examples/hyperopt_example.html</denchmark-link>\n  on a larger number of samples with fewer steps. The modified version of the script is attached below. The only changes are reducing the number of steps from 100 to 10 (for reaching the issue faster) and increasing the number of samples from 1000 to 10000. The worker crashes happen just beyond the 1000 samples, but at no fixed point.\n The following error message appears when a worker crashes:\n <denchmark-code>(pid=136534) F1009 07:02:26.344231 136534 136534 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 192.168.1.98:39953\n (pid=136534) *** Check failure stack trace: ***\n (pid=136534)     @     0x7f56afdb7f5d  google::LogMessage::Fail()\n (pid=136534)     @     0x7f56afdb90bc  google::LogMessage::SendToLog()\n (pid=136534)     @     0x7f56afdb7c39  google::LogMessage::Flush()\n (pid=136534)     @     0x7f56afdb7e51  google::LogMessage::~LogMessage()\n (pid=136534)     @     0x7f56afd6eff9  ray::RayLog::~RayLog()\n (pid=136534)     @     0x7f56afab2a5a  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n (pid=136534)     @     0x7f56afab2b5f  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n (pid=136534)     @     0x7f56afab2d01  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n (pid=136534)     @     0x7f56afab5071  ray::gcs::ServiceBasedGcsClient::Connect()\n (pid=136534)     @     0x7f56afa36746  ray::CoreWorker::CoreWorker()\n (pid=136534)     @     0x7f56afa3a484  ray::CoreWorkerProcess::CreateWorker()\n (pid=136534)     @     0x7f56afa3b6f2  ray::CoreWorkerProcess::CoreWorkerProcess()\n (pid=136534)     @     0x7f56afa3c0bb  ray::CoreWorkerProcess::Initialize()\n (pid=136534)     @     0x7f56af975dce  __pyx_pw_3ray_7_raylet_10CoreWorker_1__cinit__()\n (pid=136534)     @     0x7f56af9775b5  __pyx_tp_new_3ray_7_raylet_CoreWorker()\n (pid=136534)     @     0x556d5bd4e909  _PyObject_FastCallKeywords\n (pid=136534)     @     0x556d5bdb439e  _PyEval_EvalFrameDefault\n (pid=136534)     @     0x556d5bcf7160  _PyEval_EvalCodeWithName\n (pid=136534)     @     0x556d5bd47107  _PyFunction_FastCallKeywords\n (pid=136534)     @     0x556d5bdb0585  _PyEval_EvalFrameDefault\n (pid=136534)     @     0x556d5bcf6829  _PyEval_EvalCodeWithName\n (pid=136534)     @     0x556d5bcf7714  PyEval_EvalCodeEx\n (pid=136534)     @     0x556d5bcf773c  PyEval_EvalCode\n (pid=136534)     @     0x556d5be0ef14  run_mod\n (pid=136534)     @     0x556d5be19331  PyRun_FileExFlags\n (pid=136534)     @     0x556d5be19523  PyRun_SimpleFileExFlags\n (pid=136534)     @     0x556d5be1a655  pymain_main\n (pid=136534)     @     0x556d5be1a77c  _Py_UnixMain\n (pid=136534)     @     0x7f56b0fb90b3  __libc_start_main\n (pid=136534)     @     0x556d5bdbeff0  (unknown)\n A worker died or was killed while executing task ffffffffffffffff92c1835601000000.\n </denchmark-code>\n \n The main job does not crash but is stuck when all workers are dead. Killing the main job via keyboard results in:\n <denchmark-code>^CTraceback (most recent call last):\n   File \"test.py\", line 72, in <module>\n     **tune_kwargs)\n   File \"/home/demattia/miniconda3/envs/test_tune/lib/python3.7/site-packages/ray/tune/tune.py\", line 405, in run\n     runner.step()\n   File \"/home/demattia/miniconda3/envs/test_tune/lib/python3.7/site-packages/ray/tune/trial_runner.py\", line 375, in step\n     self._process_events()  # blocking\n   File \"/home/demattia/miniconda3/envs/test_tune/lib/python3.7/site-packages/ray/tune/trial_runner.py\", line 475, in _process_events\n     trial = self.trial_executor.get_next_available_trial()  # blocking\n   File \"/home/demattia/miniconda3/envs/test_tune/lib/python3.7/site-packages/ray/tune/ray_trial_executor.py\", line 463, in get_next_available_trial\n     [result_id], _ = ray.wait(shuffled_results)\n   File \"/home/demattia/miniconda3/envs/test_tune/lib/python3.7/site-packages/ray/worker.py\", line 1558, in wait\n     worker.current_task_id,\n   File \"python/ray/_raylet.pyx\", line 939, in ray._raylet.CoreWorker.wait\n   File \"python/ray/_raylet.pyx\", line 144, in ray._raylet.check_status\n KeyboardInterrupt\n ^CError in atexit._run_exitfuncs:\n Traceback (most recent call last):\n   File \"/home/demattia/miniconda3/envs/test_tune/lib/python3.7/site-packages/ray/worker.py\", line 784, in shutdown\n     time.sleep(0.5)\n KeyboardInterrupt\n </denchmark-code>\n \n The file /tmp/ray/gcs_server.out is very large, I only provide snippet in case it is helpful. The following snippet is representative of the log while the workers are still alive:\n <denchmark-code>I1009 07:02:24.829182 112317 112317 gcs_worker_manager.cc:31] Reporting worker failure, worker id = e9f747a7936a76818495\\\n 506b3f11c238bda56539, node id = 2041b2a79d53a7b4776d1553e99f625ccd26c15b, address = 192.168.1.98\n W1009 07:02:24.829221 112317 112317 gcs_actor_manager.cc:544] Actor 35557ddd01000000 is out of scope,, destroying actor \\\n child.\n W1009 07:02:24.829221 112317 112317 gcs_actor_manager.cc:544] Actor 35557ddd01000000 is out of scope,, destroying actor \\\n child.\n I1009 07:02:24.829226 112317 112317 gcs_actor_manager.cc:558] Destroying actor, actor id = 35557ddd01000000\n I1009 07:02:24.829228 112317 112317 gcs_actor_manager.cc:1065] Erasing actor 35557ddd01000000 owned by 01000000fffffffff\\\n fffffffffffffffffffffff\n W1009 07:02:24.829443 112317 112317 gcs_worker_manager.cc:67] Failed to report worker failure, the worker doesn't exist,\\\n  worker id = e9f747a7936a76818495506b3f11c238bda56539, node id = 2041b2a79d53a7b4776d1553e99f625ccd26c15b, address = 192\\\n .168.1.98\n W1009 07:02:24.829443 112317 112317 gcs_worker_manager.cc:67] Failed to report worker failure, the worker doesn't exist,\\\n  worker id = e9f747a7936a76818495506b3f11c238bda56539, node id = 2041b2a79d53a7b4776d1553e99f625ccd26c15b, address = 192\\\n .168.1.98\n </denchmark-code>\n \n After the workers crash and the main job is stuck the content becomes:\n <denchmark-code>I1009 07:03:00.041805 112317 112317 gcs_actor_scheduler.cc:387] Retry creating actor 92c1835601000000 on worker 7bb2509f\\\n 320bd6f298c0f4a49bb9debecd2349e2 at node 2041b2a79d53a7b4776d1553e99f625ccd26c15b\n I1009 07:03:00.041824 112317 112317 gcs_actor_scheduler.cc:322] Start creating actor 92c1835601000000 on worker 7bb2509f\\\n 320bd6f298c0f4a49bb9debecd2349e2 at node 2041b2a79d53a7b4776d1553e99f625ccd26c15b\n I1009 07:03:00.111589 112317 112317 gcs_actor_scheduler.cc:387] Retry creating actor 7bb0b57001000000 on worker 3a3c4734\\\n 91f3af24c7eb1796c06b1ed67a13690e at node 2041b2a79d53a7b4776d1553e99f625ccd26c15b\n I1009 07:03:00.111609 112317 112317 gcs_actor_scheduler.cc:322] Start creating actor 7bb0b57001000000 on worker 3a3c4734\\\n 91f3af24c7eb1796c06b1ed67a13690e at node 2041b2a79d53a7b4776d1553e99f625ccd26c15b\n I1009 07:03:00.128782 112317 112317 gcs_actor_scheduler.cc:387] Retry creating actor 4d95c66301000000 on worker af65091d\\\n e52553f02a58a926af9ce296da7b45ac at node 2041b2a79d53a7b4776d1553e99f625ccd26c15b\n </denchmark-code>\n \n Ray version and other system information (Python version, TensorFlow version, OS):\n OS: Ubuntu 20.04.1 LTS (Focal Fossa)\n Ray version = 1.0.0\n Python version = 3.7.9\n Hyperopt version = 0.2.5\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Setup the conda environment:\n \n \n (taken from the quickstart: <denchmark-link:https://docs.ray.io/en/latest/tune/index.html>https://docs.ray.io/en/latest/tune/index.html</denchmark-link>\n )\n \n Full pip freeze:\n <denchmark-code>aiohttp==3.6.2\n aiohttp-cors==0.7.0\n aioredis==1.3.1\n async-timeout==3.0.1\n attrs==20.2.0\n beautifulsoup4==4.9.3\n blessings==1.7\n cachetools==4.1.1\n certifi==2020.6.20\n chardet==3.0.4\n click==7.1.2\n cloudpickle==1.6.0\n colorama==0.4.3\n colorful==0.5.4\n decorator==4.4.2\n filelock==3.0.12\n flake8==3.8.4\n future==0.18.2\n google==3.0.0\n google-api-core==1.22.4\n google-auth==1.22.1\n googleapis-common-protos==1.52.0\n gpustat==0.6.0\n grpcio==1.32.0\n hiredis==1.1.0\n hyperopt==0.2.5\n idna==2.10\n importlib-metadata==2.0.0\n jsonschema==3.2.0\n mccabe==0.6.1\n msgpack==1.0.0\n multidict==4.7.6\n networkx==2.5\n numpy==1.19.2\n nvidia-ml-py3==7.352.0\n opencensus==0.7.10\n opencensus-context==0.1.1\n pandas==1.1.3\n Pillow==7.2.0\n prometheus-client==0.8.0\n protobuf==3.13.0\n psutil==5.7.2\n py-spy==0.3.3\n pyasn1==0.4.8\n pyasn1-modules==0.2.8\n pycodestyle==2.6.0\n pyflakes==2.2.0\n pyrsistent==0.17.3\n python-dateutil==2.8.1\n pytz==2020.1\n PyYAML==5.3.1\n ray==1.0.0\n redis==3.4.1\n requests==2.24.0\n rsa==4.6\n scipy==1.5.2\n six==1.15.0\n soupsieve==2.0.1\n tabulate==0.8.7\n tensorboardX==2.1\n torch==1.6.0\n torchvision==0.7.0\n tqdm==4.50.2\n typing-extensions==3.7.4.3\n urllib3==1.25.10\n yarl==1.6.0\n zipp==3.3.0\n </denchmark-code>\n \n Script to reproduce the issue:\n <denchmark-code>\"\"\"This test checks that HyperOpt is functional.\n \n It also checks that it is usable with a separate scheduler.\n \"\"\"\n import time\n \n import ray\n from ray import tune\n from ray.tune.suggest import ConcurrencyLimiter\n from ray.tune.schedulers import AsyncHyperBandScheduler\n from ray.tune.suggest.hyperopt import HyperOptSearch\n \n \n def evaluation_fn(step, width, height):\n     return (0.1 + width * step / 100)**(-1) + height * 0.1\n \n \n def easy_objective(config):\n     # Hyperparameters\n     width, height = config[\"width\"], config[\"height\"]\n \n     for step in range(config[\"steps\"]):\n         # Iterative training function - can be any arbitrary training procedure\n         intermediate_score = evaluation_fn(step, width, height)\n         # Feed the score back back to Tune.\n         tune.report(iterations=step, mean_loss=intermediate_score)\n         time.sleep(0.1)\n \n \n if __name__ == \"__main__\":\n     import argparse\n \n     parser = argparse.ArgumentParser()\n     parser.add_argument(\n         \"--smoke-test\", action=\"store_true\", help=\"Finish quickly for testing\")\n     args, _ = parser.parse_known_args()\n     ray.init(configure_logging=False)\n \n     current_best_params = [\n         {\n             \"width\": 1,\n             \"height\": 2,\n             \"activation\": 0  # Activation will be relu\n         },\n         {\n             \"width\": 4,\n             \"height\": 2,\n             \"activation\": 1  # Activation will be tanh\n         }\n     ]\n \n     tune_kwargs = {\n         \"num_samples\": 10 if args.smoke_test else 10000,\n         \"config\": {\n             \"steps\": 10,\n             \"width\": tune.uniform(0, 20),\n             \"height\": tune.uniform(-100, 100),\n             # This is an ignored parameter.\n             \"activation\": tune.choice([\"relu\", \"tanh\"])\n         }\n     }\n     algo = HyperOptSearch(points_to_evaluate=current_best_params)\n     algo = ConcurrencyLimiter(algo, max_concurrent=4)\n \n     scheduler = AsyncHyperBandScheduler()\n     tune.run(\n         easy_objective,\n         search_alg=algo,\n         scheduler=scheduler,\n         metric=\"mean_loss\",\n         mode=\"min\",\n         **tune_kwargs)\n </denchmark-code>\n \n The script is a small variation of the example at <denchmark-link:https://docs.ray.io/en/latest/tune/examples/hyperopt_example.html>https://docs.ray.io/en/latest/tune/examples/hyperopt_example.html</denchmark-link>\n  with the only change being the num_samples increase to 10000 and the steps decrease to 10.\n Save the script as test.py and run python test.py. Expect the workers to start crashing after about 1000 samples. The point at which they crash is not exactly reproducible. However, they fact that they crash is reproducible. I was never able to complete a full run over 10000 sample and on my setup they tend to crash between 1000 and 2000 samples (trials). For example, in the last attempt the workers started crashing just after I saw the message .. 1091 more trials not shown (1091 TERMINATED) on screen.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "demattia", "commentT": "2020-10-09T19:17:07Z", "comment_text": "\n \t\tWow <denchmark-link:https://github.com/demattia>@demattia</denchmark-link>\n  thanks a bunch for this super comprehensive repro script!\n cc <denchmark-link:https://github.com/krfricke>@krfricke</denchmark-link>\n  who has been looking into this.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "demattia", "commentT": "2020-10-16T21:41:50Z", "comment_text": "\n \t\tThis seems like a P0 since it's a Ray core crash. cc <denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n  <denchmark-link:https://github.com/stephanie-wang>@stephanie-wang</denchmark-link>\n \n (assuming it's a new issue in 1.0)\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "demattia", "commentT": "2020-10-16T21:50:39Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/raulchen>@raulchen</denchmark-link>\n , looks like a GCS crash?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "demattia", "commentT": "2020-10-16T21:52:13Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/demattia>@demattia</denchmark-link>\n  Did you see any logs from ?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "demattia", "commentT": "2020-10-16T22:38:23Z", "comment_text": "\n \t\tI just tried running it again and the gcs_server.err file contains only one line:\n <denchmark-code>$ more /tmp/ray/session_2020-10-16_17-13-46_362805_33697/logs/gcs_server.err\n E1016 17:14:42.006647171   33721 tcp_server_posix.cc:213]    Failed accept4: Too\n  many open files\n </denchmark-code>\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "demattia", "commentT": "2020-10-16T22:40:34Z", "comment_text": "\n \t\tInteresting, maybe the GCS is not cleaning up connections to actors that have died? That would explain why it only happens after a large number of samples (unique actors created).\n If this is true, it should be reproducible just by creating a bunch of actors and removing them.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "demattia", "commentT": "2020-10-16T22:47:51Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/demattia>@demattia</denchmark-link>\n  How do you start you cluster? When you start can you run with this command? \n or if you just use ray.init, ulimit -c unlimited; python ...\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "demattia", "commentT": "2020-10-16T23:44:32Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ericl>@ericl</denchmark-link>\n  to test if the lack of connections cleanup is the culprit do you have any suggestions on a small test I could run?\n <denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n  I just tried with . The job still reaches a locked status, I get the following output:\n <denchmark-code>A worker died or was killed while executing task ffffffffffffffffa088417a01000000.\n (pid=raylet) E1016 18:36:37.321611 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.321856 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.321877 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.321892 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.321905 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.321919 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n A worker died or was killed while executing task ffffffffffffffffb92a749101000000.\n (pid=raylet) E1016 18:36:37.354800 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.354835 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.354849 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.354863 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.354887 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.354899 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.366017 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.366053 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.366080 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.366093 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.366106 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.366118 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.366132 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.382012 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.382083 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.382256 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.382285 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.382298 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.382318 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n A worker died or was killed while executing task ffffffffffffffffb205b1c001000000.\n A worker died or was killed while executing task ffffffffffffffff4bc8365e01000000.\n (pid=raylet) E1016 18:36:37.400481 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.400910 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.400934 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.400954 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.400971 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.400998 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.401015 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.415406 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.415614 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.415827 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.416010 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.416209 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n (pid=raylet) E1016 18:36:37.416402 62950 62950 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n </denchmark-code>\n \n The job memory usage doubles at this point and it remains in that locked status until I kill it. Interestingly, the gcs_server.err file still shows the same:\n <denchmark-code>$ cat /tmp/ray/session_2020-10-16_18-34-01_829650_62922/logs/gcs_server.err\n E1016 18:34:57.824522905   62941 tcp_server_posix.cc:213]    Failed accept4: Too many open files\n </denchmark-code>\n \n Maybe it has to do with the file descriptors limit? This the ulimit -a command output is as follows:\n <denchmark-code>$ ulimit -a\n -t: cpu time (seconds)              unlimited\n -f: file size (blocks)              unlimited\n -d: data seg size (kbytes)          unlimited\n -s: stack size (kbytes)             8192\n -c: core file size (blocks)         unlimited\n -m: resident set size (kbytes)      unlimited\n -u: processes                       256847\n -n: file descriptors                1024\n -l: locked-in-memory size (kbytes)  65536\n -v: address space (kbytes)          unlimited\n -x: file locks                      unlimited\n -i: pending signals                 256847\n -q: bytes in POSIX msg queues       819200\n -e: max nice                        0\n -r: max rt priority                 0\n -N 15:                              unlimited\n </denchmark-code>\n \n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "demattia", "commentT": "2020-10-16T23:52:27Z", "comment_text": "\n \t\tYeah I think ulimit -c unlimited should allow the unlimited number of open file desc (but based on your help CLI, it is probably -n). Maybe you can instead try ulimit -n 65000; ray start...\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "demattia", "commentT": "2020-10-16T23:53:16Z", "comment_text": "\n \t\tah yeah. I can see you have 1024 fd limit! I think the root cause is we probably don't properly clean up connections, but this might help you mitigate issues without fixing the root cause\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "demattia", "commentT": "2020-10-17T01:47:09Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n  I was able to get through the initial crash via , thank you for the suggestion.\n The job slows down tremendously after the first few thousand samples. Is that expected from Hyperopt or could this be a consequence of the root cause?\n I noticed this in the output:\n <denchmark-code>Number of trials: 9119 (4 RUNNING, 9115 TERMINATED)\n +-------------------------+------------+---------------------+--------------+----------+---------+---------+-----------+--------+------------------+--------------+-----------------+\n | Trial name              | status     | loc                 | activation   |   height |   steps |   width |      loss |   iter |   total time (s) |   iterations |   neg_mean_loss |\n |-------------------------+------------+---------------------+--------------+----------+---------+---------+-----------+--------+------------------+--------------+-----------------|\n | easy_objective_baec28af | RUNNING    | 192.168.1.98:293301 | tanh         | -99.9262 |      10 | 19.9911 | -9.40414  |      9 |     29.8703      |            8 |        9.40414  |\n | easy_objective_c6e4fff9 | RUNNING    | 192.168.1.98:293435 | tanh         | -99.97   |      10 | 19.9964 | -8.56821  |      4 |     10.0016      |            3 |        8.56821  |\n | easy_objective_cce9da7f | RUNNING    |                     | tanh         | -64.901  |      10 | 19.9986 |           |        |                  |              |                 |\n | easy_objective_cce9da8b | RUNNING    |                     | tanh         | -99.9644 |      10 | 18.5679 |           |        |                  |              |                 |\n | easy_objective_00070a3a | TERMINATED |                     | tanh         | -96.2074 |      10 | 19.9978 |  0.379256 |      1 |      0.000170946 |            0 |       -0.379256 |\n | easy_objective_00070a3e | TERMINATED |                     | relu         | -99.8693 |      10 | 19.9823 | -9.46017  |     10 |     40.2135      |            9 |        9.46017  |\n | easy_objective_00070a41 | TERMINATED |                     | tanh         | -91.1667 |      10 | 19.6413 |  0.883334 |      1 |      0.000124931 |            0 |       -0.883334 |\n | easy_objective_001768ba | TERMINATED |                     | relu         | -96.2062 |      10 | 17.9835 | -8.05691  |      4 |      0.316018    |            3 |        8.05691  |\n | easy_objective_001768be | TERMINATED |                     | relu         | -84.7459 |      10 | 19.4491 |  1.52541  |      1 |      0.000139236 |            0 |       -1.52541  |\n | easy_objective_001768c1 | TERMINATED |                     | relu         | -80.1204 |      10 | 18.8326 |  1.98796  |      1 |      0.000136137 |            0 |       -1.98796  |\n | easy_objective_001768c7 | TERMINATED |                     | relu         | -87.1098 |      10 | 18.3095 |  1.28902  |      1 |      0.000151157 |            0 |       -1.28902  |\n | easy_objective_001768ca | TERMINATED |                     | tanh         | -96.2964 |      10 | 14.0009 | -7.70666  |      4 |      0.470859    |            3 |        7.70666  |\n | easy_objective_001768ce | TERMINATED |                     | relu         | -77.2134 |      10 | 19.5709 |  2.27866  |      1 |      0.000116348 |            0 |       -2.27866  |\n | easy_objective_001768d2 | TERMINATED |                     | relu         | -90.0362 |      10 | 19.981  |  0.996375 |      1 |      0.000134468 |            0 |       -0.996375 |\n | easy_objective_001768d6 | TERMINATED |                     | relu         | -66.5341 |      10 | 17.7863 |  3.34659  |      1 |      0.000136137 |            0 |       -3.34659  |\n | easy_objective_001768d9 | TERMINATED |                     | relu         | -27.5854 |      10 | 18.6839 |  7.24146  |      1 |      0.000114441 |            0 |       -7.24146  |\n | easy_objective_001768dd | TERMINATED |                     | relu         | -99.9664 |      10 | 19.9842 | -9.46993  |     10 |      0.928737    |            9 |        9.46993  |\n | easy_objective_001768e0 | TERMINATED |                     | relu         | -93.1312 |      10 | 19.9989 |  0.686876 |      1 |      0.000126839 |            0 |       -0.686876 |\n | easy_objective_001768e3 | TERMINATED |                     | relu         | -82.6744 |      10 | 19.1888 |  1.73256  |      1 |      0.000142097 |            0 |       -1.73256  |\n | easy_objective_001768e8 | TERMINATED |                     | relu         | -99.7873 |      10 | 19.9984 | -9.45238  |     10 |      0.929037    |            9 |        9.45238  |\n +-------------------------+------------+---------------------+--------------+----------+---------+---------+-----------+--------+------------------+--------------+-----------------+\n ... 9099 more trials not shown (9099 TERMINATED)\n </denchmark-code>\n \n The port listed under loc keeps increasing. Is this normal or is it related to the lack of cleanup? I wonder if this may cause a slowdown in the processing. The first 1000 samples run in about one minute. However, to reach 9000 it took more than two hours.\n A sample of the same output for the first 1000 samples is:\n <denchmark-code>Number of trials: 976 (3 RUNNING, 973 TERMINATED)\n +-------------------------+------------+-------+--------------+------------+---------+----------+-----------+--------+------------------+--------------+-----------------+\n | Trial name              | status     | loc   | activation   |     height |   steps |    width |      loss |   iter |   total time (s) |   iterations |   neg_mean_loss |\n |-------------------------+------------+-------+--------------+------------+---------+----------+-----------+--------+------------------+--------------+-----------------|\n | easy_objective_fe442ed1 | RUNNING    |       | tanh         | -81.3322   |      10 | 18.3525  |           |        |                  |              |                 |\n | easy_objective_fe442ed4 | RUNNING    |       | tanh         | -27.9333   |      10 | 19.9991  |           |        |                  |              |                 |\n | easy_objective_fe442ed8 | RUNNING    |       | tanh         | -55.5845   |      10 |  1.15827 |           |        |                  |              |                 |\n | easy_objective_b94e4362 | TERMINATED |       | tanh         |   2        |      10 |  4       |  2.37391  |     10 |      0.928054    |            9 |       -2.37391  |\n | easy_objective_b94e4363 | TERMINATED |       | relu         |   2        |      10 |  1       |  5.46316  |     10 |      0.923865    |            9 |       -5.46316  |\n | easy_objective_b94e4364 | TERMINATED |       | relu         | -98.1968   |      10 |  7.05509 | -8.45906  |     10 |      0.925836    |            9 |        8.45906  |\n | easy_objective_b94e4365 | TERMINATED |       | relu         |  83.7363   |      10 | 12.3102  | 18.3736   |      1 |      0.000134706 |            0 |      -18.3736   |\n | easy_objective_b94e436e | TERMINATED |       | relu         |  45.2408   |      10 |  4.04708 | 14.5241   |      1 |      0.000127077 |            0 |      -14.5241   |\n | easy_objective_b94e4376 | TERMINATED |       | relu         | -69.3192   |      10 | 15.6438  | -6.26876  |     10 |      0.931887    |            9 |        6.26876  |\n | easy_objective_b94e4396 | TERMINATED |       | tanh         |  66.1188   |      10 |  3.79745 | 16.6119   |      1 |      0.000133514 |            0 |      -16.6119   |\n | easy_objective_b94e4399 | TERMINATED |       | relu         |  72.2568   |      10 |  1.50478 | 17.2257   |      1 |      0.000148296 |            0 |      -17.2257   |\n | easy_objective_b94e439c | TERMINATED |       | tanh         | -77.7765   |      10 | 19.7163  | -7.24417  |     10 |      0.943723    |            9 |        7.24417  |\n | easy_objective_b94e43a0 | TERMINATED |       | tanh         | -24.4784   |      10 |  5.22422 |  7.55216  |      1 |      0.000123262 |            0 |       -7.55216  |\n | easy_objective_b94e43a4 | TERMINATED |       | relu         | -15.9875   |      10 | 16.4877  |  8.40125  |      1 |      0.000123501 |            0 |       -8.40125  |\n | easy_objective_b94e43aa | TERMINATED |       | relu         | -81.956    |      10 |  9.55864 | -5.61001  |      4 |      0.309341    |            3 |        5.61001  |\n | easy_objective_ba422cac | TERMINATED |       | relu         |  -0.577995 |      10 |  9.12862 |  9.9422   |      1 |      0.00012517  |            0 |       -9.9422   |\n | easy_objective_ba422caf | TERMINATED |       | tanh         |  33.4712   |      10 | 17.3596  | 13.3471   |      1 |      9.82285e-05 |            0 |      -13.3471   |\n | easy_objective_ba422cb5 | TERMINATED |       | relu         |  81.3015   |      10 | 14.5552  | 18.1301   |      1 |      0.000136852 |            0 |      -18.1301   |\n | easy_objective_ba422cb8 | TERMINATED |       | relu         | -78.4471   |      10 |  1.45203 | -0.879026 |      4 |      0.310111    |            3 |        0.879026 |\n | easy_objective_ba422cbd | TERMINATED |       | tanh         |   3.93785  |      10 | 14.8098  | 10.3938   |      1 |      0.000105858 |            0 |      -10.3938   |\n +-------------------------+------------+-------+--------------+------------+---------+----------+-----------+--------+------------------+--------------+-----------------+\n ... 956 more trials not shown (956 TERMINATED)\n </denchmark-code>\n \n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "demattia", "commentT": "2020-10-17T02:04:50Z", "comment_text": "\n \t\tIn this latest run the gcs_server.err is empty, as expected. The gcs_server.out still shows the following:\n <denchmark-code>I1016 20:48:00.966279 87641 87641 gcs_actor_manager.cc:859] Actor created successfully, actor id = cbefcd0901000000\n I1016 20:48:00.966625 87641 87641 gcs_actor_manager.cc:131] Finished creating actor, job id = 01000000, actor id = cbefcd0901000000\n W1016 20:48:00.995527 87641 87641 gcs_actor_manager.cc:544] Actor cbefcd0901000000 is out of scope,, destroying actor child.\n W1016 20:48:00.995527 87641 87641 gcs_actor_manager.cc:544] Actor cbefcd0901000000 is out of scope,, destroying actor child.\n I1016 20:48:00.995549 87641 87641 gcs_actor_manager.cc:558] Destroying actor, actor id = cbefcd0901000000\n I1016 20:48:00.995558 87641 87641 gcs_actor_manager.cc:1065] Erasing actor cbefcd0901000000 owned by 01000000ffffffffffffffffffffffffffffffff\n I1016 20:48:00.995904 87641 87641 gcs_worker_manager.cc:31] Reporting worker failure, worker id = dd7583c76aa690d413a0a695cd96fa091cc72585, node id = 4467d12e34ea89e26e03126ccbedd527b9d9f056, address = 192.168.1.98\n I1016 20:48:00.996824 87641 87641 gcs_actor_manager.cc:680] Worker dd7583c76aa690d413a0a695cd96fa091cc72585 on node 4467d12e34ea89e26e03126ccbedd527b9d9f056 intentional exit.\n </denchmark-code>\n \n The line\n <denchmark-code>I1016 20:48:00.995904 87641 87641 gcs_worker_manager.cc:31] Reporting worker failure, worker id = dd7583c76aa690d413a0a695cd96fa091cc72585, node id = 4467d12e34ea89e26e03126ccbedd527b9d9f056, address = 192.168.1.98\n </denchmark-code>\n \n talks about a worker failure and the next line about intentional exit. Is this expected?\n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "demattia", "commentT": "2020-10-17T05:18:59Z", "comment_text": "\n \t\tThat intentional exit is misleading. I will fix the issue. It should be intentional exit : True / False. I think what's happening is one of your nodes is dead in the middle. Did you see any logs from gcs_server that your node is dead?\n \t\t"}, "comments_13": {"comment_id": 14, "comment_author": "demattia", "commentT": "2020-10-17T05:25:35Z", "comment_text": "\n \t\talso cc <denchmark-link:https://github.com/richardliaw>@richardliaw</denchmark-link>\n  Have you seen this error. Any possibility the issue is from Tune?\n \t\t"}, "comments_14": {"comment_id": 15, "comment_author": "demattia", "commentT": "2020-10-17T07:24:45Z", "comment_text": "\n \t\tThis actually seems really easy to reproduce. I haven't seen this issue from Tune before, but going to 10k samples can probably cause some problems.\n \t\t"}, "comments_15": {"comment_id": 16, "comment_author": "demattia", "commentT": "2020-10-19T04:27:34Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/richardliaw>@richardliaw</denchmark-link>\n  Is it possible for the Tune team to take this over and confirm the issue is not related to Tune itself first?\n \t\t"}, "comments_16": {"comment_id": 17, "comment_author": "demattia", "commentT": "2020-10-19T19:35:27Z", "comment_text": "\n \t\tI'm also suffering from this \"Couldn't reconnect to GCS server. The last attempted GCS server address was ...\" error. In my case, I'm using hyperopt as well. In some cases the errors start at just over 500 trials out of a planned 2,500 trials. The program gets to the first 500 trials in a few minutes and then keeps running forever without completing any other trials before I have to kill it. Also I am not using a cluster, everything is being run on a single machine.\n \t\t"}, "comments_17": {"comment_id": 18, "comment_author": "demattia", "commentT": "2020-10-19T22:39:51Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n  since this seems to be confirmed to be a GCS connection leak , is Kai still the right person to work on it?\n \t\t"}, "comments_18": {"comment_id": 19, "comment_author": "demattia", "commentT": "2020-10-20T01:05:54Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ag-tcm>@ag-tcm</denchmark-link>\n  Can you also show us the log of ?\n \t\t"}, "comments_19": {"comment_id": 20, "comment_author": "demattia", "commentT": "2020-10-20T01:06:46Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ericl>@ericl</denchmark-link>\n  So, my understanding / hypothesis here is the initial error was due to a connection leak, but the following errors (<denchmark-link:https://github.com/ray-project/ray/issues/11309#issuecomment-710726509>#11309 (comment)</denchmark-link>\n ) are just due to Tune? (Or it could be that gcs server is not stable when there are so many actors, but I'd like to make sure it is not a Tune issue before I dig deeper into it)\n \t\t"}, "comments_20": {"comment_id": 21, "comment_author": "demattia", "commentT": "2020-10-20T01:07:57Z", "comment_text": "\n \t\tI'm not sure any errors after the initial one make sense to look into--- once we run out of file descriptors, anything could happen.\n \t\t"}, "comments_21": {"comment_id": 22, "comment_author": "demattia", "commentT": "2020-10-20T19:07:25Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n  I re-ran another job since the error and that gcs_server.err file has been overwritten. I'll post that log when it happens again though.\n \t\t"}, "comments_22": {"comment_id": 23, "comment_author": "demattia", "commentT": "2020-10-20T20:33:51Z", "comment_text": "\n \t\tI've managed to reproduce the error with this simplified script: <denchmark-link:https://gist.github.com/ericl/73dfd011a5c592e65bae66e6fab52052>https://gist.github.com/ericl/73dfd011a5c592e65bae66e6fab52052</denchmark-link>\n \n with ulimit -n 2000\n 0.8.5 -> works\n 0.8.6 -> works\n 0.8.7 -> fails\n 1.0 -> fails\n So it's pretty clearly tied to GCS actor manager on by default. Looking into how to fix next.\n \t\t"}, "comments_23": {"comment_id": 24, "comment_author": "demattia", "commentT": "2020-10-21T01:17:09Z", "comment_text": "\n \t\tAfter more investigation, I don't believe this is really a leak of gRPC clients (I added constructor/destructor logging hooks and the number of gRPC clients remains bounded, and we seem to be cleaning up properly in all cases).\n I believe that what's going on is there are a large number of connections stuck closing in TIME_WAIT state: <denchmark-link:https://github.com/grpc/grpc/issues/3855>grpc/grpc#3855</denchmark-link>\n  This means that after an actor is destroyed, the sockets used for communicating with it may be active for up to 120s: <denchmark-link:https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux>https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux</denchmark-link>\n  There are some kernel options to recycle sockets, but I didn't have much success trying them.\n Since 1.0 is managing actors from the GCS server, this at least doubles the number of connections per actor: you need one from the driver->actor, and another from the GCS->actor. We also seem to be opening more than 1 connection in the GCS, so the overall number of sockets is now 2-3x it was before, bumping into FD limits.\n I'm not sure the best solution for this, but probably increasing the ulimit is the way to go in the short term.\n \t\t"}, "comments_24": {"comment_id": 25, "comment_author": "demattia", "commentT": "2020-10-21T03:40:06Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/demattia>@demattia</denchmark-link>\n  if you are on the latest master release, you can also use  to avoid this issue.\n \t\t"}, "comments_25": {"comment_id": 26, "comment_author": "demattia", "commentT": "2020-10-21T05:08:38Z", "comment_text": "\n \t\tBtw, I've also observed Tune getting pretty slow with a large number of finished trials (>2000). I guess this is a separate bug, please open another issue for it to track.\n \t\t"}, "comments_26": {"comment_id": 27, "comment_author": "demattia", "commentT": "2020-10-21T06:28:14Z", "comment_text": "\n \t\tyep, the tune slowdown is tracked <denchmark-link:https://github.com/ray-project/ray/issues/11233>#11233</denchmark-link>\n \n \t\t"}, "comments_27": {"comment_id": 28, "comment_author": "demattia", "commentT": "2020-10-21T10:55:57Z", "comment_text": "\n \t\tThanks <denchmark-link:https://github.com/ericl>@ericl</denchmark-link>\n  and everyone for your help. The ulimit increase indeed seems to solve the issue for now. <denchmark-link:https://github.com/richardliaw>@richardliaw</denchmark-link>\n  I will try the reuse_actors=True at the next chance, thanks for the suggestion. I will follow the slowdown on <denchmark-link:https://github.com/ray-project/ray/issues/11233>#11233</denchmark-link>\n  as that is the next bottleneck.\n \t\t"}}}, "commit": {"commit_id": "920e4b2ef8d084f5a25c205c0bda3cabb13e3384", "commit_author": "Eric Liang", "commitT": "2020-10-21 14:29:43-07:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "python\\ray\\worker.py", "file_new_name": "python\\ray\\worker.py", "file_complexity": {"file_NLOC": "991", "file_CCN": "176", "file_NToken": "5315"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647", "deleted_lines": null}}}}}}