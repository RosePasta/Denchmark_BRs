{"BR": {"BR_id": "11178", "BR_author": "architkulkarni", "BRopenT": "2020-10-02T16:47:55Z", "BRcloseT": "2020-10-07T17:50:30Z", "BR_text": {"BRsummary": "[Serve] Backend Actor can't scale up to 2 replicas if it uses an endpoint handle internally", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n A backend using an endpoint handle internally appears to hang when client.update_backend_config is called to change the number of replicas from 1 to 2.\n Ray version and other system information (Python version, TensorFlow version, OS):\n Ray 1.0.0, Python 3.6, Mac OS (Also Py3.7 and Linux)\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n There are three\n Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):\n import ray\n from ray import serve\n from ray.serve import BackendConfig\n \n ray.init()\n client = serve.start() # serve.start(detached=True) fixes it\n \n def hello_world(_):\n     return b\"Hello World\"\n \n class ForwardActor:\n     def __init__(self):\n         # client = serve.connect() fixes it\n         self.handle = client.get_handle(\"hello_world\") # replacing this with self.handle = 1 fixes it\n \n     def __call__(self, _):\n         return 1 \n \n client.create_backend(\"hello_world\", hello_world)\n client.create_endpoint(\"hello_world\", backend=\"hello_world\")\n \n client.create_backend(\"ForwardActor\", ForwardActor)\n client.create_endpoint(\"ForwardActor\", backend=\"ForwardActor\")\n \n forwarders_config = BackendConfig(num_replicas=2) # replacing this with num_replicas = 1 fixes it\n \n #Hangs on this line\n client.update_backend_config(\"ForwardActor\", forwarders_config)\n Actually, the same problem happens if you set the num_replicas to 2 right from the start in create_backend.\n This is the line where it hangs: <denchmark-link:https://github.com/ray-project/ray/blob/master/python/ray/serve/controller.py#L435>https://github.com/ray-project/ray/blob/master/python/ray/serve/controller.py#L435</denchmark-link>\n \n If we cannot run your script, we cannot fix your issue.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "architkulkarni", "commentT": "2020-10-02T16:54:13Z", "comment_text": "\n \t\tThis looks pretty problematic. My initial guess would be that there's a deadlock between the code that starts the handle in the backend worker (which is calling into the controller) and the code that waits for the new replicas to start up.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "architkulkarni", "commentT": "2020-10-02T19:18:44Z", "comment_text": "\n \t\tI will try to isolated it into a Ray Core issue. Seems like something to do with actor ref counting\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "architkulkarni", "commentT": "2020-10-02T19:31:24Z", "comment_text": "\n \t\tMinimal version from Serve:\n from ray import serve\n \n client = serve.start()\n \n class ForwardActor:\n     def __init__(self):\n         self.client = client\n \n client.create_backend(\"ForwardActor\", ForwardActor, config={\"num_replicas\": 2})\n \t\t"}}}, "commit": {"commit_id": "68106425dbcad18537daeff36a51989e9bd47375", "commit_author": "Simon Mo", "commitT": "2020-10-07 10:50:30-07:00", "commit_complexity": {"commit_NLOC": "1.0", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\serve\\api.py", "file_new_name": "python\\ray\\serve\\api.py", "file_complexity": {"file_NLOC": "405", "file_CCN": "29", "file_NToken": "1461"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "61,62,63,64", "deleted_lines": null, "method_info": {"method_name": "__reduce__", "method_params": "self", "method_startline": "61", "method_endline": "64", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "13", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "56,57,58", "deleted_lines": null, "method_info": {"method_name": "__del__", "method_params": "self", "method_startline": "54", "method_endline": "59", "method_complexity": {"method_NLOC": "6", "method_CCN": "2", "method_NToken": "24", "method_nesting_level": "1"}}}}}}}}