{"BR": {"BR_id": "10258", "BR_author": "rkooo567", "BRopenT": "2020-08-22T01:25:44Z", "BRcloseT": "2020-08-24T23:58:28Z", "BR_text": {"BRsummary": "[Placement Group] SigSegv on IsSubset", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n The following script has this error.\n <denchmark-code>*** Aborted at 1598059486 (unix time) try \"date -d @1598059486\" if you are using GNU date ***\n PC: @                0x0 (unknown)\n *** SIGSEGV (@0x9) received by PID 56473 (TID 0x113b30dc0) stack trace: ***\n     @     0x7fff6f4e55fd _sigtramp\n     @ 0x3838313100000010 (unknown)\n     @        0x10b5d38df ray::ResourceSet::IsSubset()\n     @        0x10b1cf22c ray::gcs::GcsSpreadStrategy::Schedule()\n     @        0x10b1cfd13 ray::gcs::GcsPlacementGroupScheduler::ScheduleUnplacedBundles()\n     @        0x10b1c46d4 ray::gcs::GcsPlacementGroupManager::SchedulePendingPlacementGroups()\n     @        0x10b1c7535 ray::gcs::GcsPlacementGroupManager::OnNodeDead()\n     @        0x10b26be48 std::__1::__function::__func<>::operator()()\n     @        0x10b1a6d16 ray::gcs::GcsNodeManager::RemoveNode()\n     @        0x10b1a5d40 ray::gcs::GcsNodeManager::HandleUnregisterNode()\n     @        0x10b233f92 ray::rpc::ServerCallImpl<>::HandleRequestImpl()\n     @        0x10b233edf _ZN5boost4asio6detail18completion_handlerIZN3ray3rpc14ServerCallImplINS4_25NodeInfoGcsServiceHandlerENS4_21UnregisterNodeRequestENS4_19UnregisterNodeReplyEE13HandleRequestEvEUlvE_E11do_completeEPvPNS1_19scheduler_operationERKNS_6system10error_codeEm\n     @        0x10b7680a9 boost::asio::detail::scheduler::do_run_one()\n     @        0x10b75ba32 boost::asio::detail::scheduler::run()\n     @        0x10b75b8cc boost::asio::io_context::run()\n     @        0x10b16362f main\n     @     0x7fff6f2eccc9 start\n </denchmark-code>\n \n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):\n def test_placement_group_wait(ray_start_cluster):\n     cluster = ray_start_cluster\n     for _ in range(2):\n         cluster.add_node(num_cpus=2)\n     ray.init(address=cluster.address)\n     cluster.wait_for_nodes()\n \n     # Wait on placement group that cannot be created.\n     placement_group = ray.experimental.placement_group(\n         name=\"name\", strategy=\"SPREAD\", bundles=[{\n             \"CPU\": 2\n         }, {\n             \"CPU\": 2\n         }, {\n             \"GPU\": 2\n         },])\n     ready, unready = ray.wait([placement_group.ready()], timeout=0.1)\n     assert len(unready) == 1\n     assert len(ready) == 0\n     table = ray.experimental.placement_group_table(placement_group)\n     print(table)\n \n     cluster.add_node(num_gpus=2)\n \n     # Wait on placement group and check table.\n     # ready, unready = ray.wait([placement_group.ready()])\n     import time\n     time.sleep(5)\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "rkooo567", "commentT": "2020-08-22T01:27:47Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ffbin>@ffbin</denchmark-link>\n  Any TODO that is related to this?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "rkooo567", "commentT": "2020-08-22T01:42:16Z", "comment_text": "\n \t\tAlso, broken in this scenario.\n <denchmark-code>    cluster = ray_start_cluster\n     nodes = [cluster.add_node(num_cpus=2) for _ in range(2)]\n     ray.init(address=cluster.address)\n     cluster.wait_for_nodes()\n \n     # Wait on placement group that cannot be created.\n     placement_group = ray.experimental.placement_group(\n         name=\"name\", strategy=\"SPREAD\", bundles=[{\n             \"CPU\": 2\n         }, {\n             \"CPU\": 2\n         }, {\n             \"GPU\": 2\n         },])\n     # ready, unready = ray.wait([placement_group.ready()], timeout=0.1)\n     # assert len(unready) == 1\n     # assert len(ready) == 0\n     table = ray.experimental.placement_group_table(placement_group)\n     assert table[\"state\"] == \"PENDING\"\n \n     # Wait on placement group that cannot be created.\n     placement_group2 = ray.experimental.placement_group(\n         name=\"name\", strategy=\"SPREAD\", bundles=[{\n             \"CPU\": 2\n         }, {\n             \"CPU\": 2\n         },])\n     ready, unready = ray.wait([placement_group2.ready()])\n     assert len(unready) == 0\n     assert len(ready) == 1\n     table = ray.experimental.placement_group_table(placement_group2)\n     assert table[\"state\"] == \"CREATED\"\n </denchmark-code>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "rkooo567", "commentT": "2020-08-22T03:54:03Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rkooo567>@rkooo567</denchmark-link>\n  I can't reproduce it with the following example. Is this problem related to ?\n <denchmark-code>def test_placement_group_wait(ray_start_cluster):\n     cluster = ray_start_cluster\n     for _ in range(2):\n         cluster.add_node(num_cpus=2)\n     ray.init(address=cluster.address)\n     cluster.wait_for_nodes()\n \n     # Wait on placement group that cannot be created.\n     placement_group = ray.experimental.placement_group(\n         name=\"name\", strategy=\"SPREAD\", bundles=[{\n             \"CPU\": 2\n         }, {\n             \"CPU\": 2\n         }, {\n             \"GPU\": 2\n         },])\n     import time\n     time.sleep(1)\n     # assert len(unready) == 1\n     # assert len(ready) == 0\n     table = ray.experimental.placement_group_table(placement_group)\n     print(table)\n \n     cluster.add_node(num_gpus=2)\n \n     # Wait on placement group and check table.\n     # ready, unready = ray.wait([placement_group.ready()])\n     time.sleep(5)\n </denchmark-code>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "rkooo567", "commentT": "2020-08-22T05:21:58Z", "comment_text": "\n \t\tI could reproduce with this script.\n def test_placement_group_wait_2(ray_start_cluster):\n     cluster = ray_start_cluster\n     for _ in range(2):\n         cluster.add_node(num_cpus=2)\n     ray.init(address=cluster.address)\n     cluster.wait_for_nodes()\n \n     # Wait on placement group that cannot be created.\n     placement_group = ray.experimental.placement_group(\n         name=\"name\", strategy=\"SPREAD\", bundles=[{\n             \"CPU\": 2\n         }, {\n             \"CPU\": 2\n         }, {\n             \"GPU\": 2\n         },])\n     # ready, unready = ray.wait([placement_group.ready()], timeout=0.1)\n     # assert len(unready) == 1\n     # assert len(ready) == 0\n     table = ray.experimental.placement_group_table(placement_group)\n     print(table)\n \n     cluster.add_node(num_gpus=2)\n \n     # Wait on placement group and check table.\n     # ready, unready = ray.wait([placement_group.ready()])\n     import time\n     time.sleep(5)\n I didn't check if this is related to my PR, but it will be highly unlikely cuz I dont change any cpp code.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "rkooo567", "commentT": "2020-08-22T05:22:20Z", "comment_text": "\n \t\t(btw, you should check gcs_server.err logs to see if the error occured)\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "rkooo567", "commentT": "2020-08-22T05:32:20Z", "comment_text": "\n \t\tConfirmed I could reproduce without wait (I tested on the master branch).\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "rkooo567", "commentT": "2020-08-22T06:20:10Z", "comment_text": "\n \t\tThanks, i will try to fix it.\n \t\t"}}}, "commit": {"commit_id": "b61a79efd7e2a572db38dfdd9b2244ee152e5bd0", "commit_author": "fangfengbin", "commitT": "2020-08-23 11:33:40-07:00", "commit_complexity": {"commit_NLOC": "0.3695652173913043", "commit_CCN": "0.2608695652173913", "commit_Nprams": "0.8260869565217391"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "java\\runtime\\src\\main\\java\\io\\ray\\runtime\\task\\LocalModeTaskSubmitter.java", "file_new_name": "java\\runtime\\src\\main\\java\\io\\ray\\runtime\\task\\LocalModeTaskSubmitter.java", "file_complexity": {"file_NLOC": "356", "file_CCN": "57", "file_NToken": "2954"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "228", "deleted_lines": null, "method_info": {"method_name": "LocalModeTaskSubmitter::createPlacementGroup", "method_params": "bundles,strategy", "method_startline": "226", "method_endline": "229", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "35", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "169,170,171,172,173,174,175,176,177", "deleted_lines": null, "method_info": {"method_name": "LocalModeTaskSubmitter::createActor", "method_params": "functionDescriptor,args,options", "method_startline": "166", "method_endline": "197", "method_complexity": {"method_NLOC": "31", "method_CCN": "6", "method_NToken": "254", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\tests\\test_placement_group.py", "file_new_name": "python\\ray\\tests\\test_placement_group.py", "file_complexity": {"file_NLOC": "428", "file_CCN": "63", "file_NToken": "3014"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "561,562,563,564,565", "deleted_lines": null, "method_info": {"method_name": "test_schedule_placement_group_when_node_add.is_placement_group_created", "method_params": "", "method_startline": "561", "method_endline": "565", "method_complexity": {"method_NLOC": "5", "method_CCN": "2", "method_NToken": "29", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571", "deleted_lines": null, "method_info": {"method_name": "test_schedule_placement_group_when_node_add", "method_params": "ray_start_cluster", "method_startline": "549", "method_endline": "571", "method_complexity": {"method_NLOC": "12", "method_CCN": "1", "method_NToken": "66", "method_nesting_level": "0"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ray\\gcs\\gcs_server\\gcs_placement_group_manager.cc", "file_new_name": "src\\ray\\gcs\\gcs_server\\gcs_placement_group_manager.cc", "file_complexity": {"file_NLOC": "270", "file_CCN": "46", "file_NToken": "1866"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "340,341,342,343", "deleted_lines": "340,341", "method_info": {"method_name": "ray::gcs::GcsPlacementGroupManager::OnNodeDead", "method_params": "node_id", "method_startline": "327", "method_endline": "348", "method_complexity": {"method_NLOC": "18", "method_CCN": "5", "method_NToken": "140", "method_nesting_level": "2"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "src\\ray\\gcs\\gcs_server\\gcs_placement_group_scheduler.cc", "file_new_name": "src\\ray\\gcs\\gcs_server\\gcs_placement_group_scheduler.cc", "file_complexity": {"file_NLOC": "350", "file_CCN": "63", "file_NToken": "2754"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "277", "deleted_lines": "261", "method_info": {"method_name": "ray::gcs::GcsPlacementGroupScheduler::DestroyPlacementGroupBundleResourcesIfExists", "method_params": "placement_group_id", "method_startline": "260", "method_endline": "287", "method_complexity": {"method_NLOC": "22", "method_CCN": "5", "method_NToken": "163", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "105,106,114,115,116,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,146,150", "deleted_lines": "105,106,110,117,123,124,125,126,127,130,131", "method_info": {"method_name": "ray::gcs::GcsSpreadStrategy::Schedule", "method_params": "bundles,context", "method_startline": "98", "method_endline": "158", "method_complexity": {"method_NLOC": "42", "method_CCN": "11", "method_NToken": "277", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": null, "deleted_lines": "397", "method_info": {"method_name": "ray::gcs::GcsPlacementGroupScheduler::GetScheduleContext", "method_params": "placement_group_id", "method_startline": "395", "method_endline": "419", "method_complexity": {"method_NLOC": "22", "method_CCN": "5", "method_NToken": "180", "method_nesting_level": "2"}}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 4, "file_old_name": "src\\ray\\gcs\\gcs_server\\test\\gcs_placement_group_scheduler_test.cc", "file_new_name": "src\\ray\\gcs\\gcs_server\\test\\gcs_placement_group_scheduler_test.cc", "file_complexity": {"file_NLOC": "438", "file_CCN": "33", "file_NToken": "3684"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "207,230,231", "deleted_lines": "207,232,233", "method_info": {"method_name": "ray::TEST_F", "method_params": "GcsPlacementGroupSchedulerTest,TestSchedulePlacementGroupFailed", "method_startline": "207", "method_endline": "237", "method_complexity": {"method_NLOC": "24", "method_CCN": "1", "method_NToken": "211", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262", "deleted_lines": null, "method_info": {"method_name": "ray::TEST_F", "method_params": "GcsPlacementGroupSchedulerTest,TestSpreadStrategyResourceCheck", "method_startline": "239", "method_endline": "262", "method_complexity": {"method_NLOC": "19", "method_CCN": "1", "method_NToken": "178", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "207,230,231", "deleted_lines": "207,232,233", "method_info": {"method_name": "ray::TEST_F", "method_params": "GcsPlacementGroupSchedulerTest,TestSchedulePlacementGroupReplyFailure", "method_startline": "207", "method_endline": "237", "method_complexity": {"method_NLOC": "24", "method_CCN": "1", "method_NToken": "211", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "506,510,511,512,513,514", "deleted_lines": "481,485,486,487,488,489", "method_info": {"method_name": "ray::TEST_F", "method_params": "GcsPlacementGroupSchedulerTest,TestRescheduleWhenNodeDead", "method_startline": "473", "method_endline": "516", "method_complexity": {"method_NLOC": "34", "method_CCN": "1", "method_NToken": "301", "method_nesting_level": "1"}}}}}}}}