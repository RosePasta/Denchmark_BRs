{"BR": {"BR_id": "10928", "BR_author": "mkoh-asapp", "BRopenT": "2020-09-21T17:31:43Z", "BRcloseT": "2020-10-10T00:22:21Z", "BR_text": {"BRsummary": "[autoscaler] Unable to launch Kubernetes cluster if I don't have permission to list namespaces", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n When trying to create a cluster, Ray is trying to check if the namespace that I provide in my cluster config exists or not. And if it does not exist, it will try to create it.  (<denchmark-link:https://github.com/ray-project/ray/blob/master/python/ray/autoscaler/_private/kubernetes/config.py#L61>https://github.com/ray-project/ray/blob/master/python/ray/autoscaler/_private/kubernetes/config.py#L61</denchmark-link>\n )\n This causes a problem if I do not have permission to list namespaces or create namespaces on the kube cluster I'm using.\n Ray version and other system information (Python version, TensorFlow version, OS):\n Ray 0.8.7\n Python 3.7\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):\n Here is a ray config to reproduce\n <denchmark-code># Created: 2020-09-21T10:39:01-04:00\n cluster_name: mkoh-test\n min_workers: 1\n max_workers: 2\n initial_workers: 1\n autoscaling_mode: default\n target_utilization_fraction: 0.8\n idle_timeout_minutes: 60\n provider:\n   type: kubernetes\n   use_internal_ips: true\n   namespace: nlp\n head_node:\n   apiVersion: v1\n   kind: Pod\n   metadata:\n     generateName: ray-head-\n     labels:\n       component: ray-head\n   spec:\n     serviceAccountName: autoscaler\n     restartPolicy: Never\n     volumes:\n     - name: dshm\n       emptyDir:\n         medium: Memory\n     containers:\n     - name: ray-node\n       image:\n worker_nodes:\n   apiVersion: v1\n   kind: Pod\n   metadata:\n     generateName: ray-worker-\n     labels:\n       component: ray-worker\n   spec:\n     serviceAccountName: default\n     restartPolicy: Never\n     volumes:\n     - name: dshm\n       emptyDir:\n         medium: Memory\n     containers:\n     - name: ray-node\n       imagePullPolicy:\n       image:\n file_mounts: {}\n cluster_synced_files: []\n file_mounts_sync_continuously: false\n initialization_commands: []\n setup_commands: []\n head_setup_commands: []\n worker_setup_commands: []\n head_start_ray_commands:\n - ray stop\n - ulimit -n 65536; ray start --head --num-cpus=$MY_CPU_REQUEST --port=6379 --object-manager-port=8076 --autoscaling-config=~/ray_bootstrap_config.yaml --webui-host 0.0.0.0\n worker_start_ray_commands:\n - ray stop\n - ulimit -n 65536; ray start --num-cpus=$MY_CPU_REQUEST --address=$RAY_HEAD_IP:6379 --object-manager-port=8076\n </denchmark-code>\n \n If we cannot run your script, we cannot fix your issue.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "mkoh-asapp", "commentT": "2020-10-06T01:47:12Z", "comment_text": "\n \t\tLooks like we need to use the Kubernetes  API to look at permissions for the namespace \u2014 I'm looking into it.\n <denchmark-link:https://kubernetes.io/docs/reference/access-authn-authz/authorization/>https://kubernetes.io/docs/reference/access-authn-authz/authorization/</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "mkoh-asapp", "commentT": "2020-10-06T13:20:33Z", "comment_text": "\n \t\tI believe that SelfSubjectAccessReview can also be something that a user might not be permitted to do, depending on the cluster configuration. Can I suggest that it would be better to not do any sort of check at all and just let the operation fail on its own if the requested namespace does not exist? I feel like Ray should not be trying to create any namespaces and leave that up to the cluster admin.\n (By \"let the operation fail on its own\" I mean let the Kube api will fail when you try to create the resources in a namespace that cannot be accessed)\n \t\t"}}}, "commit": {"commit_id": "48db6f8858b4c971563a41f8751ad012a7a55446", "commit_author": "Gekho457", "commitT": "2020-10-09 19:22:20-05:00", "commit_complexity": {"commit_NLOC": "0.25", "commit_CCN": "1.0", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "python\\ray\\autoscaler\\_private\\kubernetes\\config.py", "file_new_name": "python\\ray\\autoscaler\\_private\\kubernetes\\config.py", "file_complexity": {"file_NLOC": "159", "file_CCN": "39", "file_NToken": "1165"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "66,67,68,69,70,71,72,73", "deleted_lines": "61", "method_info": {"method_name": "_configure_namespace", "method_params": "provider_config", "method_startline": "59", "method_endline": "85", "method_complexity": {"method_NLOC": "24", "method_CCN": "4", "method_NToken": "150", "method_nesting_level": "0"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "34,35", "deleted_lines": null, "method_info": {"method_name": "not_checking_msg", "method_params": "resource_type,name", "method_startline": "34", "method_endline": "35", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "16", "method_nesting_level": "0"}}}}}}}}