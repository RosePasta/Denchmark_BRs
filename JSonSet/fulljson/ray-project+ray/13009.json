{"BR": {"BR_id": "13009", "BR_author": "sumanthratna", "BRopenT": "2020-12-21T03:48:42Z", "BRcloseT": "2021-01-05T16:04:19Z", "BR_text": {"BRsummary": "[tune] sample_from validation fails with functools.partial and callables with kwargs", "BRdescription": "\n CC <denchmark-link:https://github.com/richardliaw>@richardliaw</denchmark-link>\n \n (labeling as bug because functools.partial and callables with kwargs should definitely be supported [IMO] and there's no indication in the docs that they don't work)\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n \n \n \n ray/python/ray/tune/sample.py\n \n \n         Lines 317 to 320\n       in\n       4caa6c6\n \n \n \n \n \n \n  if len(signature(func).parameters) > 1: \n \n \n \n  raise ValueError( \n \n \n \n  \"The function passed to a `Function` parameter must accept \" \n \n \n \n  \"either 0 or 1 parameters.\") \n \n \n \n \n \n In tune.sample_from we have a check to see if the passed callable has either 0 or 1 arguments. This fails for functools.partial and callables that have argument with default values.\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n # untested; you get the idea\n from ray import tune\n \n \n def trainable(config):\n     return config[\"a\"]\n \n def get_a(spec, base=2):\n     return base/(spec.b**2)\n \n config = {\n     \"b\": tune.uniform(0, 10),\n     \"a\": tune.sample_from(get_a),\n }\n tune.run(trainable, config=config)\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n <denchmark-h:h3>Solutions</denchmark-h>\n \n <denchmark-h:h4>Make spec a positional argument</denchmark-h>\n \n i.e., instruct users to make this their sample_from signature:\n def func(spec, /, arg, kwarg=None):\n     pass\n then we could change the check to if len(frozenset(name for name, param in signature(func).parameters.items() if param.kind == Parameter.POSITIONAL_ONLY)) > 1\n pros:\n \n we get to keep the check\n \n cons:\n \n seems a little unintuitive for users to be required to do this\n \n <denchmark-h:h4>Remove the check</denchmark-h>\n \n pros:\n \n this GH issue is resolved\n \n cons:\n \n uglier error message is user passes function with an incorrect signature?\n \n we can except NameError to print a prettier error message\n \n \n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "sumanthratna", "commentT": "2021-01-04T12:55:02Z", "comment_text": "\n \t\tLet's use sig.bind() for this as we do for detect_checkpoint_func and alike. That way we stay very flexible and still support all kinds of callables.\n I pushed a small PR for this, would be great to get your feedback on it.\n \t\t"}}}, "commit": {"commit_id": "96c2d3d2b50a25821336ed2b56daa187f293ef09", "commit_author": "Kai Fricke", "commitT": "2021-01-05 08:04:18-08:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\tune\\sample.py", "file_new_name": "python\\ray\\tune\\sample.py", "file_complexity": {"file_NLOC": "341", "file_CCN": "83", "file_NToken": "2536"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365", "deleted_lines": "350,351,352,353,354", "method_info": {"method_name": "__init__", "method_params": "self,Callable", "method_startline": "348", "method_endline": "366", "method_complexity": {"method_NLOC": "16", "method_CCN": "4", "method_NToken": "67", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "python\\ray\\tune\\tests\\test_sample.py", "file_new_name": "python\\ray\\tune\\tests\\test_sample.py", "file_complexity": {"file_NLOC": "825", "file_CCN": "58", "file_NToken": "7902"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169", "deleted_lines": null, "method_info": {"method_name": "testFunctionSignature", "method_params": "self", "method_startline": "145", "method_endline": "169", "method_complexity": {"method_NLOC": "14", "method_CCN": "2", "method_NToken": "87", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "148,149", "deleted_lines": null, "method_info": {"method_name": "testFunctionSignature.sample_a", "method_params": "", "method_startline": "148", "method_endline": "149", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "6", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "157,158", "deleted_lines": null, "method_info": {"method_name": "testFunctionSignature.sample_d_invalid", "method_params": "spec,b", "method_startline": "157", "method_endline": "158", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "9", "method_nesting_level": "2"}}}, "hunk_3": {"Ismethod": 1, "added_lines": "151,152", "deleted_lines": null, "method_info": {"method_name": "testFunctionSignature.sample_b", "method_params": "spec", "method_startline": "151", "method_endline": "152", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "7", "method_nesting_level": "2"}}}, "hunk_4": {"Ismethod": 1, "added_lines": "154,155", "deleted_lines": null, "method_info": {"method_name": "testFunctionSignature.sample_c", "method_params": "spec,b", "method_startline": "154", "method_endline": "155", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "11", "method_nesting_level": "2"}}}}}}}}