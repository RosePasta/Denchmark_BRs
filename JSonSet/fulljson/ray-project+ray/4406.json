{"BR": {"BR_id": "4406", "BR_author": "robertnishihara", "BRopenT": "2019-03-19T02:16:11Z", "BRcloseT": "2019-03-21T18:59:16Z", "BR_text": {"BRsummary": "Redis LRU plus object store LRU can lead to fatal crash.", "BRdescription": "\n <denchmark-h:h3>System information</denchmark-h>\n \n \n OS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS\n Ray installed from (source or binary): source\n Ray version: 0.7.0.dev1\n Python version: 3.6.4\n Exact command to reproduce:\n \n import numpy as np\n import ray\n \n ray.init(object_store_memory=10**8)\n \n x = np.zeros(8*10**7, dtype=np.uint8)\n x_id = ray.put(x)\n \n # Remove the object from the object table to simulate Redis LRU eviction.\n assert ray.global_state.redis_clients[0].delete(b'OBJECT' + x_id.binary()) == 1\n \n # Now evict the object from the object store.\n ray.put(x)  # This will crash.\n The raylet crashes with Redis error: ERR The entry to remove doesn't exist.:\n <denchmark-code>F0318 19:14:06.948998 2466321280 redis_context.cc:58] Redis error: ERR The entry to remove doesn't exist.\n *** Check failure stack trace: ***\n *** Aborted at 1552961646 (unix time) try \"date -d @1552961646\" if you are using GNU date ***\n PC: @                0x0 (unknown)\n *** SIGABRT (@0x7fff5a64ab66) received by PID 43368 (TID 0x7fff93011380) stack trace: ***\n     @     0x7fff5a808f5a _sigtramp\n     @                0x0 (unknown)\n     @     0x7fff5a5a61ae abort\n     @        0x104bb5cb9 google::logging_fail()\n     @        0x104bb4992 google::LogMessage::SendToLog()\n     @        0x104bb5095 google::LogMessage::Flush()\n     @        0x104bb5172 google::LogMessage::~LogMessage()\n     @        0x104bae955 ray::RayLog::~RayLog()\n     @        0x104b33dc3 ray::gcs::GlobalRedisCallback()\n     @        0x104b97fad redisProcessCallbacks\n     @        0x104b2ae5a RedisAsioClient::handle_read()\n     @        0x104b2b4ac boost::asio::detail::reactive_null_buffers_op<>::do_complete()\n     @        0x104aa77af boost::asio::detail::scheduler::do_run_one()\n     @        0x104aa71d2 boost::asio::detail::scheduler::run()\n     @        0x104a9c44e main\n     @     0x7fff5a4fa015 start\n     @               0x10 (unknown)\n </denchmark-code>\n \n This is related to <denchmark-link:https://github.com/ray-project/ray/pull/4199>#4199</denchmark-link>\n . cc <denchmark-link:https://github.com/stephanie-wang>@stephanie-wang</denchmark-link>\n  <denchmark-link:https://github.com/kfstorm>@kfstorm</denchmark-link>\n  Thoughts about the best way to fix this?\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "robertnishihara", "commentT": "2019-03-19T03:40:57Z", "comment_text": "\n \t\tThe redis key about this object was deleted and then it requests to remove an entry about this object. This is due to we treat a remove operation against a non-existent entry is invalid.\n To make GCS  data structure works well with redis LRU cache, we can change the implementation in  to allow removing a non-existent entry. This will keep it consistent with redis list implementation since we allow appending an  entry to an empty redis list. However, as I mentioned in <denchmark-link:https://github.com/ray-project/ray/pull/4199>#4199</denchmark-link>\n , one drawback of this is that the remove operation may silently fail due to fields of data mismatch with existing entry in GCS.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "robertnishihara", "commentT": "2019-03-19T04:14:33Z", "comment_text": "\n \t\tThanks <denchmark-link:https://github.com/kfstorm>@kfstorm</denchmark-link>\n , that explanation makes sense. Relevant comment is <denchmark-link:https://github.com/ray-project/ray/pull/4199#discussion_r263244194>#4199 (comment)</denchmark-link>\n  I believe.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "robertnishihara", "commentT": "2019-03-19T16:42:16Z", "comment_text": "\n \t\tSounds like we should change this to log the error on redis, but return OK.\n \t\t"}}}, "commit": {"commit_id": "c36d03874b7eb084a5fff90053e0ebe56d787607", "commit_author": "Kai Yang", "commitT": "2019-03-21 11:59:15-07:00", "commit_complexity": {"commit_NLOC": "0.8", "commit_CCN": "0.85", "commit_Nprams": "0.8"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\tests\\test_basic.py", "file_new_name": "python\\ray\\tests\\test_basic.py", "file_complexity": {"file_NLOC": "2050", "file_CCN": "481", "file_NToken": "16427"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862", "deleted_lines": null, "method_info": {"method_name": "test_redis_lru_with_set", "method_params": "ray_start_object_store_memory", "method_startline": "2847", "method_endline": "2862", "method_complexity": {"method_NLOC": "12", "method_CCN": "3", "method_NToken": "88", "method_nesting_level": "0"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\tests\\test_failure.py", "file_new_name": "python\\ray\\tests\\test_failure.py", "file_complexity": {"file_NLOC": "456", "file_CCN": "77", "file_NToken": "3192"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "633,634,635,636,637", "deleted_lines": "627,628", "method_info": {"method_name": "test_redis_module_failure", "method_params": "ray_start_regular", "method_startline": "592", "method_endline": "637", "method_complexity": {"method_NLOC": "30", "method_CCN": "1", "method_NToken": "247", "method_nesting_level": "0"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ray\\gcs\\client_test.cc", "file_new_name": "src\\ray\\gcs\\client_test.cc", "file_complexity": {"file_NLOC": "940", "file_CCN": "113", "file_NToken": "8362"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "693,694,695,696,697,698", "deleted_lines": "693", "method_info": {"method_name": "ray::gcs::TestSetSubscribeAll", "method_params": "job_id,client", "method_startline": "645", "method_endline": "714", "method_complexity": {"method_NLOC": "51", "method_CCN": "11", "method_NToken": "491", "method_nesting_level": "2"}}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\ray\\gcs\\redis_module\\ray_redis_module.cc", "file_new_name": "src\\ray\\gcs\\redis_module\\ray_redis_module.cc", "file_complexity": {"file_NLOC": "614", "file_CCN": "112", "file_NToken": "4278"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "513,514,515,516,517,518", "deleted_lines": "511,517,518", "method_info": {"method_name": "internal_redis_commands::SetRemove_RedisCommand", "method_params": "ctx,argv,argc", "method_startline": "508", "method_endline": "519", "method_complexity": {"method_NLOC": "12", "method_CCN": "3", "method_NToken": "76", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "490", "deleted_lines": "484,485", "method_info": {"method_name": "internal_redis_commands::SetAdd_RedisCommand", "method_params": "ctx,argv,argc", "method_startline": "482", "method_endline": "491", "method_complexity": {"method_NLOC": "10", "method_CCN": "3", "method_NToken": "65", "method_nesting_level": "1"}}}}}}}}