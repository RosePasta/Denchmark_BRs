{"BR": {"BR_id": "9058", "BR_author": "goulou", "BRopenT": "2020-06-20T14:34:57Z", "BRcloseT": "2020-06-23T21:43:28Z", "BR_text": {"BRsummary": "[tune] AsyncHyperBandScheduler has different default brackets than the original paper", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n In current (0.8.7) version of Ray, the default bracket count is not that of the <denchmark-link:https://arxiv.org/abs/1810.05934>original Paper.</denchmark-link>\n \n Citation of the paper :\n \n Selecting ASHA default settings. Our experiments in Section 4 and the experiments conducted by Li et al. (2018) both show that aggressive early-stopping is effective across a variety of different hyperparameter tuning tasks. Hence,using both works as guidelines, we propose the followingdefault settings for ASHA:\n \n Elimination rate:  we set \u03b7=  4 so that the top 1/4 of configurations are promoted to the next rung\n Maximum early-stopping rate: we set the maximum early-stopping rate for bracket s0 to allow for a maximum of 5 rungs which indicates a minimum resource of r = (1/4^4)*R = R/256.\n Then the minimum resource perconfiguration for a given bracket s is rs=r\u03b7^s\n Brackets to run: to increase robustness to misspecification of the early-stopping rate, we default to running the threemost aggressively early-stopping brackets s= 0, 1, 2 of ASHA. We exclude the two least aggressive brackets (i.e. s4 with r4=R and s3 with r3=R/4) to allow for higher speedups from early-stopping. We define this default set of brackets as the \u2018standard\u2019 set of early-stopping brackets, though we also expose the options for more conservative or more aggressive bracket sets.\n \n \n Here is the constructor code :\n <denchmark-code>    def __init__(self,\n                  time_attr=\"training_iteration\",\n                  reward_attr=None,\n                  metric=\"episode_reward_mean\",\n                  mode=\"max\",\n                  max_t=100,\n                  grace_period=1,\n                  reduction_factor=4,\n                  brackets=1):\n \n </denchmark-code>\n \n Here, the default number of bracket is 1 while it was proposed to be 3 in the paper. I cannot find any logical explanation to that.\n I am not 100% sure about the maximum early-stopping rate, which is translated in the _rung calculation code ( self._rungs = [(min_t * self.rf**(k + s), {}) for k in reversed(range(MAX_RUNGS))]) because of the k factor, but it seems OK.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "goulou", "commentT": "2020-06-20T21:01:16Z", "comment_text": "\n \t\tHey, <denchmark-link:https://github.com/goulou>@goulou</denchmark-link>\n  this was an intentional change after speaking with the ASHA authors, who mentioned that s=0 performs best in practice.\n If you look at their experiments, their results and benchmarks all use s=0.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "goulou", "commentT": "2020-06-21T07:28:33Z", "comment_text": "\n \t\tOK, thanks for the anwser. I can close the issue if you want, but maybe you want to add a comment in the code or documentation explaining that detail?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "goulou", "commentT": "2020-06-21T20:14:06Z", "comment_text": "\n \t\tHm, yeah that would be a good idea. Would you be willing to open a small PR to the docs? Happy to help merge it.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "goulou", "commentT": "2020-08-14T21:29:31Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/richardliaw>@richardliaw</denchmark-link>\n  <denchmark-link:https://github.com/goulou>@goulou</denchmark-link>\n  Does  also include the case for 0, 1, 2? Or do we need to pass ?\n Also, what if I have one of those \"slow winners\" performance curves, where it starts off very low but ultimately achieves the best performance? Does increasing  help?\n \t\t"}}}, "commit": {"commit_id": "9b4428c668bdcfbe282d689f7e703e8e9eace76e", "commit_author": "goulou", "commitT": "2020-06-23 14:43:27-07:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "doc\\source\\tune\\api_docs\\schedulers.rst", "file_new_name": "doc\\source\\tune\\api_docs\\schedulers.rst", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "69,74,75", "deleted_lines": "69"}}}}}}