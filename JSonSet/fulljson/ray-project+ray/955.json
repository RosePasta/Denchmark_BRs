{"BR": {"BR_id": "955", "BR_author": "robertnishihara", "BRopenT": "2017-09-08T23:05:42Z", "BRcloseT": "2018-05-25T18:01:12Z", "BR_text": {"BRsummary": "Ray fails to serialize Torch tensor.", "BRdescription": "\n I'm running into problems serializing pytorch tensors.\n import ray\n import torch\n \n ray.init()\n \n x = torch.Tensor(10)\n \n x_id = ray.put(x)\n \n result = ray.get(x_id)\n Inspecting the values shows that x and result are different.\n >>> x\n  0.0000e+00\n -8.5899e+09\n  0.0000e+00\n -8.5899e+09\n  5.6052e-45\n  1.4714e-43\n  1.5975e-43\n  1.4153e-43\n  1.3873e-43\n  1.6255e-43\n [torch.FloatTensor of size 10]\n \n >>> result\n [torch.FloatTensor with no dimension]\n \n >>> result[0]\n RuntimeError: dimension 1 out of range of 0D tensor at /Users/soumith/code/builder/wheel/pytorch-src/torch/lib/TH/generic/THTensor.c:24\n cc <denchmark-link:https://github.com/vitchyr>@vitchyr</denchmark-link>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "robertnishihara", "commentT": "2017-10-18T23:43:52Z", "comment_text": "\n \t\tThe fix for this is waiting on <denchmark-link:https://github.com/ray-project/ray/issues/1138>#1138</denchmark-link>\n .\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "robertnishihara", "commentT": "2017-10-21T19:47:16Z", "comment_text": "\n \t\tNo longer waiting on <denchmark-link:https://github.com/ray-project/ray/issues/1138>#1138</denchmark-link>\n  because it is fixed in pyarrow, so <denchmark-link:https://github.com/ray-project/ray/pull/1152>#1152</denchmark-link>\n  fixes it.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "robertnishihara", "commentT": "2018-05-16T07:24:18Z", "comment_text": "\n \t\tI'm building off master and the above example no longer works.\n I'm running python 3.6 on a macOS.\n <denchmark-code>In [1]: import ray\n    ...: import torch\n    ...:\n    ...: ray.init()\n    ...:\n    ...: x = torch.Tensor(10)\n    ...:\n    ...: x_id = ray.put(x)\n    ...:\n    ...: result = ray.get(x_id)\n    ...:\n Process STDOUT and STDERR is being redirected to /tmp/raylogs/.\n Waiting for redis server at 127.0.0.1:40869 to respond...\n Waiting for redis server at 127.0.0.1:10446 to respond...\n Starting local scheduler with the following resources: {'CPU': 8, 'GPU': 0}.\n \n ======================================================================\n View the web UI at http://localhost:8889/notebooks/ray_ui8885.ipynb?token=5148456270b22c7a7ca145ddb67789feb86c0d935350b766\n ======================================================================\n \n WARNING: Serializing objects of type <class 'torch.Tensor'> by expanding them as dictionaries of their fields. This behavior may be incorrect in some cases.\n \n In [2]: result\n Out[2]: tensor([])\n </denchmark-code>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "robertnishihara", "commentT": "2018-05-16T07:24:40Z", "comment_text": "\n \t\tThis is blocking <denchmark-link:https://github.com/ray-project/ray/pull/2036>#2036</denchmark-link>\n .\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "robertnishihara", "commentT": "2018-05-16T07:31:44Z", "comment_text": "\n \t\tDoes it work with earlier versions of pytorch? Could it be the version update (I assume this is pytorch 0.4)?\n It's possible that simply switching to the latest Arrow will fix the issue because of <denchmark-link:https://github.com/apache/arrow/commit/df9bdc10a9481ee328e22cf0dc20e17d4ca4f8d0>apache/arrow@df9bdc1</denchmark-link>\n .\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "robertnishihara", "commentT": "2018-05-16T07:40:30Z", "comment_text": "\n \t\tsure; how do I try that out?\n cc <denchmark-link:https://github.com/alok>@alok</denchmark-link>\n \n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "robertnishihara", "commentT": "2018-05-16T17:07:56Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/richardliaw>@richardliaw</denchmark-link>\n  If you use the code snippet I put in <denchmark-link:https://github.com/ray-project/ray/issues/1856>#1856</denchmark-link>\n  and the version of arrow Robert mentioned (or manually change your local copy of the arrow code since it's a one line fix), it should work. I just tested your code snippet in this issue with the custom serializer and it works fine.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "robertnishihara", "commentT": "2018-05-16T17:55:11Z", "comment_text": "\n \t\tIs it possible to get away without custom serializers?\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "robertnishihara", "commentT": "2018-05-16T18:02:06Z", "comment_text": "\n \t\tOnly if you use that arrow PR. I use the custom serializer for local testing and the arrow PR just makes it the official solution.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "robertnishihara", "commentT": "2018-05-16T22:43:14Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/richardliaw>@richardliaw</denchmark-link>\n  the line to change is\n \n \n \n ray/thirdparty/scripts/build_arrow.sh\n \n \n          Line 50\n       in\n       78bb887\n \n \n \n \n \n \n  git checkout 5f9cf9c96709f92e9ac4828cf3e106a165576ce7 \n \n \n \n \n \n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "robertnishihara", "commentT": "2018-05-25T01:20:42Z", "comment_text": "\n \t\tThis can be closed since <denchmark-link:https://github.com/ray-project/ray/pull/2100>#2100</denchmark-link>\n  was merged.\n \t\t"}}}, "commit": {"commit_id": "97c6369b495e1e84b4a8511e92bfd7709745eec9", "commit_author": "Robert Nishihara", "commitT": "2017-10-21 21:24:10-07:00", "commit_complexity": {"commit_NLOC": "0.484375", "commit_CCN": "0.0", "commit_Nprams": "0.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 10, "file_old_name": "python\\ray\\worker.py", "file_new_name": "python\\ray\\worker.py", "file_complexity": {"file_NLOC": "1344", "file_CCN": "230", "file_NToken": "8387"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1030,1031", "method_info": {"method_name": "_initialize_serialization.array_custom_deserializer", "method_params": "serialized_obj", "method_startline": "1030", "method_endline": "1031", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "27", "method_nesting_level": "1"}}}, "hunk_1": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1038,1039", "method_info": {"method_name": "_initialize_serialization.ordered_dict_custom_serializer", "method_params": "obj", "method_startline": "1038", "method_endline": "1039", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "23", "method_nesting_level": "1"}}}, "hunk_2": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1060,1061,1062,1063,1064,1065,1066,1067", "method_info": {"method_name": "_initialize_serialization._serialize_pandas_series", "method_params": "s", "method_startline": "1060", "method_endline": "1067", "method_complexity": {"method_NLOC": "7", "method_CCN": "1", "method_NToken": "42", "method_nesting_level": "1"}}}, "hunk_3": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1069,1070,1071,1072,1073", "method_info": {"method_name": "_initialize_serialization._serialize_pandas_dataframe", "method_params": "df", "method_startline": "1069", "method_endline": "1073", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "24", "method_nesting_level": "1"}}}, "hunk_4": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1075,1076,1077,1078,1079,1080,1081,1082,1083", "method_info": {"method_name": "_initialize_serialization._deserialize_callback_pandas", "method_params": "data", "method_startline": "1075", "method_endline": "1083", "method_complexity": {"method_NLOC": "9", "method_CCN": "3", "method_NToken": "51", "method_nesting_level": "1"}}}, "hunk_5": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1027,1028", "method_info": {"method_name": "_initialize_serialization.array_custom_serializer", "method_params": "obj", "method_startline": "1027", "method_endline": "1028", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "17", "method_nesting_level": "1"}}}, "hunk_6": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1041,1042", "method_info": {"method_name": "_initialize_serialization.ordered_dict_custom_deserializer", "method_params": "obj", "method_startline": "1041", "method_endline": "1042", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "23", "method_nesting_level": "1"}}}, "hunk_7": {"Ismethod": 1, "added_lines": "1012,1013,1023", "deleted_lines": "1021,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038", "method_info": {"method_name": "_initialize_serialization", "method_params": "worker", "method_startline": "1005", "method_endline": "1038", "method_complexity": {"method_NLOC": "17", "method_CCN": "2", "method_NToken": "110", "method_nesting_level": "0"}}}, "hunk_8": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1052,1053", "method_info": {"method_name": "_initialize_serialization.default_dict_custom_deserializer", "method_params": "obj", "method_startline": "1052", "method_endline": "1053", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "28", "method_nesting_level": "1"}}}, "hunk_9": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1049,1050", "method_info": {"method_name": "_initialize_serialization.default_dict_custom_serializer", "method_params": "obj", "method_startline": "1049", "method_endline": "1050", "method_complexity": {"method_NLOC": "2", "method_CCN": "1", "method_NToken": "27", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\thirdparty\\download_thirdparty.sh", "file_new_name": "src\\thirdparty\\download_thirdparty.sh", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "16", "deleted_lines": "16"}}}}}}