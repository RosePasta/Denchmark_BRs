{"BR": {"BR_id": "7724", "BR_author": "zajaczajac", "BRopenT": "2020-03-24T09:26:09Z", "BRcloseT": "2020-04-13T16:30:56Z", "BR_text": {"BRsummary": "ray.init fails when temp_dir too long (but still reasonable)", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n When I set temp_dir argument of ray.init to a path that is still reasonably short (50 characters), exception about File name too long is thrown. See the code and traces below.\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Script:\n <denchmark-code>import ray\n \n ray.init(temp_dir='/tmp/aaaaaaaaaabbbbbbbbbbaaaaaaaaaabbbbbbbbbbaaaaa')\n </denchmark-code>\n \n Trace:\n <denchmark-code>2020-03-24 10:24:03,788\tINFO resource_spec.py:212 -- Starting Ray with 4.59 GiB memory available for workers and up to 2.3 GiB for objects. You can adjust these settings with ray.init(memory=<bytes>, object_store_memory=<bytes>).\n 2020-03-24 10:24:04,902\tINFO services.py:523 -- Failed to connect to the redis server, retrying.\n 2020-03-24 10:24:05,234\tINFO services.py:1123 -- View the Ray dashboard at localhost:8265\n libc++abi.dylib: terminating with uncaught exception of type boost::wrapexcept<boost::system::system_error>: File name too long\n *** Aborted at 1585041845 (unix time) try \"date -d @1585041845\" if you are using GNU date ***\n PC: @                0x0 (unknown)\n *** SIGABRT (@0x7fff6d9bf7fa) received by PID 2316 (TID 0x110b5adc0) stack trace: ***\n     @     0x7fff6da7142d _sigtramp\n     @              0x400 (unknown)\n     @     0x7fff6d946a1c abort\n     @     0x7fff6a9e0be8 abort_message\n     @     0x7fff6a9e0d84 demangling_terminate_handler()\n     @     0x7fff6c50c792 _objc_terminate()\n     @     0x7fff6a9eddc7 std::__terminate()\n     @     0x7fff6a9edb6c __cxxabiv1::failed_throw()\n     @     0x7fff6a9df45d __cxa_throw\n     @        0x10c889718 boost::throw_exception<>()\n     @        0x10c8896ac boost::asio::detail::do_throw_error()\n     @        0x10c88f5b9 boost::asio::local::detail::endpoint::endpoint()\n     @        0x10c33878d ray::raylet::RayletConnection::RayletConnection()\n     @        0x10c339e95 ray::raylet::RayletClient::RayletClient()\n     @        0x10c29e0d7 ray::CoreWorker::CoreWorker()\n     @        0x10c23c0d1 __pyx_tp_new_3ray_7_raylet_CoreWorker()\n     @        0x10bbe9ae9 type_call\n     @        0x10bbae72d _PyObject_FastCallKeywords\n     @        0x10bc44977 call_function\n     @        0x10bc3d5ef _PyEval_EvalFrameDefault\n     @        0x10bc452db _PyEval_EvalCodeWithName\n     @        0x10bbae88c _PyFunction_FastCallKeywords\n     @        0x10bc4497e call_function\n     @        0x10bc3d733 _PyEval_EvalFrameDefault\n     @        0x10bc452db _PyEval_EvalCodeWithName\n     @        0x10bbae88c _PyFunction_FastCallKeywords\n     @        0x10bc4497e call_function\n     @        0x10bc3d733 _PyEval_EvalFrameDefault\n     @        0x10bc452db _PyEval_EvalCodeWithName\n     @        0x10bc3ba15 PyEval_EvalCode\n     @        0x10bc6a2ab run_mod\n     @        0x10bc692c6 PyRun_FileExFlags\n [1]    2316 abort      python raytest.py\n </denchmark-code>\n \n System: MacOS 10.15.3, Python 3.7.0, ray: tested with both 0.8.2 and latest.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "zajaczajac", "commentT": "2020-03-31T22:27:39Z", "comment_text": "\n \t\tseems like this is a problem with the underlying boost requirement:\n <denchmark-link:https://www.boost.org/doc/libs/1_71_0/libs/filesystem/doc/reference.html#long-path-warning>https://www.boost.org/doc/libs/1_71_0/libs/filesystem/doc/reference.html#long-path-warning</denchmark-link>\n \n Not sure if there any quick fix. :-(\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "zajaczajac", "commentT": "2020-04-09T05:42:15Z", "comment_text": "\n \t\tFrom the duplicate referenced issue above:\n Calling ray.init(temp_dir=\"string > 45 chars\") causes a std::terminate due to the 107 character socket length limit in unix: <denchmark-link:http://man7.org/linux/man-pages/man7/unix.7.html>http://man7.org/linux/man-pages/man7/unix.7.html</denchmark-link>\n \n (see also: <denchmark-link:https://unix.stackexchange.com/q/367008>https://unix.stackexchange.com/q/367008</denchmark-link>\n )\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "zajaczajac", "commentT": "2020-04-09T05:52:16Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mehrdadn>@mehrdadn</denchmark-link>\n  If there isn't a good way to just make it work, then how about the following?\n \n In the C++ constructor, explicitly check the length and give a fatal error if it is too long.\n In Python and Java (in ray.init()), raise an exception if the name is too long?\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "zajaczajac", "commentT": "2020-04-09T05:58:43Z", "comment_text": "\n \t\tYeah, something like that should work for now. The main complication here is\u2014what length do we check it against? The viability of a temp_dir depends on the subsequent socket path names we want to use, which are different, and in multiple places in the code. We can glance through for the maximum length used right now, but it'll likely change over time. Getting it exactly right would need some refactoring, e.g. to let us aggregate all possible suffixes etc.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "zajaczajac", "commentT": "2020-04-09T14:42:35Z", "comment_text": "\n \t\t+1 to <denchmark-link:https://github.com/robertnishihara>@robertnishihara</denchmark-link>\n  's solution. not having ray crashing upon init (with explicit error message) is always a good experience\n another is to shorten the generated path like , for example using epoch instead. but that reduces readability during debugging so I am actually not too fond about this.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "zajaczajac", "commentT": "2020-04-13T16:30:56Z", "comment_text": "\n \t\tError message fixed by <denchmark-link:https://github.com/ray-project/ray/pull/7951>#7951</denchmark-link>\n . It still fails, but now with a better Python exception.\n \t\t"}}}, "commit": {"commit_id": "1b0f6fd558ee372b4d44c97de05e1c50bf913c50", "commit_author": "mehrdadn", "commitT": "2020-04-13 09:30:01-07:00", "commit_complexity": {"commit_NLOC": "0.3333333333333333", "commit_CCN": "0.0", "commit_Nprams": "0.5833333333333334"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\node.py", "file_new_name": "python\\ray\\node.py", "file_complexity": {"file_NLOC": "567", "file_CCN": "90", "file_NToken": "3552"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "397,411,412,413,414,415,416", "deleted_lines": null, "method_info": {"method_name": "_prepare_socket_file", "method_params": "self,socket_path,default_prefix", "method_startline": "386", "method_endline": "417", "method_complexity": {"method_NLOC": "21", "method_CCN": "7", "method_NToken": "157", "method_nesting_level": "1"}}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\tests\\test_tempfile.py", "file_new_name": "python\\ray\\tests\\test_tempfile.py", "file_complexity": {"file_NLOC": "169", "file_CCN": "17", "file_NToken": "1217"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "75,76,77,78", "deleted_lines": null, "method_info": {"method_name": "test_tempdir_long_path", "method_params": "", "method_startline": "75", "method_endline": "78", "method_complexity": {"method_NLOC": "4", "method_CCN": "1", "method_NToken": "40", "method_nesting_level": "0"}}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ray\\util\\util.cc", "file_new_name": "src\\ray\\util\\util.cc", "file_complexity": {"file_NLOC": "266", "file_CCN": "68", "file_NToken": "1933"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "103,104,105", "deleted_lines": null, "method_info": {"method_name": "ParseUrlEndpoint", "method_params": "endpoint,default_port", "method_startline": "85", "method_endline": "121", "method_complexity": {"method_NLOC": "32", "method_CCN": "10", "method_NToken": "352", "method_nesting_level": "0"}}}}}}}}