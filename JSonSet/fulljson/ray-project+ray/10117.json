{"BR": {"BR_id": "10117", "BR_author": "juliusfrost", "BRopenT": "2020-08-14T17:54:56Z", "BRcloseT": "2020-08-16T18:25:13Z", "BR_text": {"BRsummary": "[rllib] Off Policy Estimation breaks with GPU on PyTorch (MARWIL) (Offline API)", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n When I use MARWIL with PyTorch and num_gpus: 1, I get an error when computing metrics. This happens because in off policy estimation it uses the torch tensors on gpu instead of numpy arrays. Particularly, I use \"input_evaluation\": [\"is\", \"wis\"] and the error goes away when \"input_evaluation\": [\"simulation\"]\n <denchmark-code>Traceback (most recent call last):\n   File \"C:\\Users\\Julius\\Anaconda3\\envs\\ray\\lib\\site-packages\\ray\\tune\\trial_runner.py\", line 497, in _process_trial\n     result = self.trial_executor.fetch_result(trial)\n   File \"C:\\Users\\Julius\\Anaconda3\\envs\\ray\\lib\\site-packages\\ray\\tune\\ray_trial_executor.py\", line 434, in fetch_result\n     result = ray.get(trial_future[0], DEFAULT_GET_TIMEOUT)\n   File \"C:\\Users\\Julius\\Anaconda3\\envs\\ray\\lib\\site-packages\\ray\\worker.py\", line 1553, in get\n     raise value.as_instanceof_cause()\n ray.exceptions.RayTaskError(AttributeError): ray::MARWIL.train() (pid=9136, ip=10.0.0.18)\n   File \"python\\ray\\_raylet.pyx\", line 474, in ray._raylet.execute_task\n   File \"python\\ray\\_raylet.pyx\", line 427, in ray._raylet.execute_task.function_executor\n   File \"C:\\Users\\Julius\\Anaconda3\\envs\\ray\\lib\\site-packages\\ray\\function_manager.py\", line 567, in actor_method_executor\n     raise e\n   File \"C:\\Users\\Julius\\Anaconda3\\envs\\ray\\lib\\site-packages\\ray\\function_manager.py\", line 559, in actor_method_executor\n     method_returns = method(actor, *args, **kwargs)\n   File \"C:\\Users\\Julius\\Anaconda3\\envs\\ray\\lib\\site-packages\\ray\\rllib\\agents\\trainer.py\", line 522, in train\n     raise e\n   File \"C:\\Users\\Julius\\Anaconda3\\envs\\ray\\lib\\site-packages\\ray\\rllib\\agents\\trainer.py\", line 508, in train\n     result = Trainable.train(self)\n   File \"C:\\Users\\Julius\\Anaconda3\\envs\\ray\\lib\\site-packages\\ray\\tune\\trainable.py\", line 337, in train\n     result = self.step()\n   File \"C:\\Users\\Julius\\Anaconda3\\envs\\ray\\lib\\site-packages\\ray\\rllib\\agents\\trainer_template.py\", line 110, in step\n     res = next(self.train_exec_impl)\n   File \"C:\\Users\\Julius\\Anaconda3\\envs\\ray\\lib\\site-packages\\ray\\util\\iter.py\", line 758, in __next__\n     return next(self.built_iterator)\n   File \"C:\\Users\\Julius\\Anaconda3\\envs\\ray\\lib\\site-packages\\ray\\util\\iter.py\", line 793, in apply_foreach\n     result = fn(item)\n   File \"C:\\Users\\Julius\\Anaconda3\\envs\\ray\\lib\\site-packages\\ray\\rllib\\execution\\metric_ops.py\", line 87, in __call__\n     res = summarize_episodes(episodes, orig_episodes)\n   File \"C:\\Users\\Julius\\Anaconda3\\envs\\ray\\lib\\site-packages\\ray\\rllib\\evaluation\\metrics.py\", line 173, in summarize_episodes\n     metrics[k] = np.mean(v_list)\n   File \"<__array_function__ internals>\", line 6, in mean\n   File \"C:\\Users\\Julius\\Anaconda3\\envs\\ray\\lib\\site-packages\\numpy\\core\\fromnumeric.py\", line 3335, in mean\n     out=out, **kwargs)\n   File \"C:\\Users\\Julius\\Anaconda3\\envs\\ray\\lib\\site-packages\\numpy\\core\\_methods.py\", line 161, in _mean\n     ret = ret.dtype.type(ret / rcount)\n AttributeError: 'torch.dtype' object has no attribute 'type'\n </denchmark-code>\n \n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):\n If we cannot run your script, we cannot fix your issue.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "juliusfrost", "commentT": "2020-08-14T20:50:20Z", "comment_text": "\n \t\tHmm I think we are missing a call to .cpu().numpy() somewhere and are trying to calculate a np.mean() over torch tensors representing a single element. Do you think you could look into this issue?\n \t\t"}}}, "commit": {"commit_id": "dc659ae89ada171a86a97006d61084513d799d80", "commit_author": "Julius Frost", "commitT": "2020-08-16 11:25:12-07:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "rllib\\offline\\off_policy_estimator.py", "file_new_name": "rllib\\offline\\off_policy_estimator.py", "file_complexity": {"file_NLOC": "76", "file_CCN": "14", "file_NToken": "446"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "59,67,73", "deleted_lines": "64,70", "method_info": {"method_name": "action_prob", "method_params": "self,SampleBatchType", "method_startline": "59", "method_endline": "73", "method_complexity": {"method_NLOC": "14", "method_CCN": "5", "method_NToken": "126", "method_nesting_level": "1"}}}}}}}}