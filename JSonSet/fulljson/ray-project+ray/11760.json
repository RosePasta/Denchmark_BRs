{"BR": {"BR_id": "11760", "BR_author": "ienkovich", "BRopenT": "2020-11-02T17:01:44Z", "BRcloseT": "2020-11-11T07:44:17Z", "BR_text": {"BRsummary": "[Core] Ray breaks alignment for NumPy arrays of doubles", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n I'm using Ray 1.0.0 with Python 3.8.3 on Ubuntu 18.04\n When I use Ray to serialize/deserialize a NumPy array of doubles, I get an unaligned NumPy array (data is not 8-byte aligned).\n <denchmark-h:h3>Reproduction</denchmark-h>\n \n Here is a reproducer I use\n <denchmark-code>import numpy as np\n import ray\n ray.init()\n \n arr1 = np.array([10.1, 20.2, 30.3], dtype = np.double)\n oid = ray.put(arr1)\n arr2 = ray.get(oid)\n \n ptr1 = arr1.__array_interface__[\"data\"][0]\n print(f\"Original address: 0x{hex(ptr1)} - {'un' if ptr1 % 8 != 0 else ''}aligned\")\n assert(ptr1 % 8 == 0)\n ptr2 = arr2.__array_interface__[\"data\"][0]\n print(f\"Deserialized address: 0x{hex(ptr2)} - {'un' if ptr2 % 8 != 0 else ''}aligned\")\n assert(ptr2 % 8 == 0)\n </denchmark-code>\n \n The output is:\n <denchmark-code>Original address: 0x0x56150a88c9d0 - aligned\n Deserialized address: 0x0x7f738756010c - unaligned\n Traceback (most recent call last):\n   File \"1.py\", line 14, in <module>\n     assert(ptr2 % 8 == 0)\n AssertionError\n </denchmark-code>\n \n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "ienkovich", "commentT": "2020-11-02T18:50:58Z", "comment_text": "\n \t\tIs this a regression from Ray 0.8 series?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "ienkovich", "commentT": "2020-11-02T18:55:07Z", "comment_text": "\n \t\tI think we actually want the arrays to be 64-byte aligned for performance reasons. I know we guaranteed that when we were using pyarrow for serialization. <denchmark-link:https://github.com/pcmoritz>@pcmoritz</denchmark-link>\n  <denchmark-link:https://github.com/suquark>@suquark</denchmark-link>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "ienkovich", "commentT": "2020-11-02T20:00:43Z", "comment_text": "\n \t\tInteresting, so this may have been broken for some time now.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "ienkovich", "commentT": "2020-11-02T20:30:14Z", "comment_text": "\n \t\tFood for thought: I've tried pickling and unpickling back (by using builtin pickle module and calling pickle.loads(pickle.dumps(arr, -1))), and unpickled array is properly aligned, while retrieved via Ray is not.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "ienkovich", "commentT": "2020-11-03T18:48:22Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ericl>@ericl</denchmark-link>\n  What's the action item here?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "ienkovich", "commentT": "2020-11-06T01:36:26Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/robertnishihara>@robertnishihara</denchmark-link>\n  I almost sure when moving from pyarrow to pickle5, the buffer is still aligned:\n \n \n \n ray/python/ray/includes/serialization.pxi\n \n \n         Lines 301 to 307\n       in\n       28e7439\n \n \n \n \n \n \n  # Increase buffer address. \n \n \n \n  if view.len < kMajorBufferSize: \n \n \n \n  self._curr_buffer_addr = padded_length( \n \n \n \n  self._curr_buffer_addr, kMinorBufferAlign) \n \n \n \n  else: \n \n \n \n  self._curr_buffer_addr = padded_length( \n \n \n \n  self._curr_buffer_addr, kMajorBufferAlign) \n \n \n \n \n \n For large chunks, we align the buffer to 64 bytes(kMajorBufferAlign); for small chunks, we align it to 8 bytes (kMinorBufferAlign).\n Maybe it is related to the msgpack header which is introduced recently?\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "ienkovich", "commentT": "2020-11-09T03:09:25Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/suquark>@suquark</denchmark-link>\n  Could it be that the relative addresses are aligned, but not the start? Maybe we need to make sure to make  aligned in here: <denchmark-link:https://github.com/ray-project/ray/blob/master/python/ray/includes/serialization.pxi#L360>https://github.com/ray-project/ray/blob/master/python/ray/includes/serialization.pxi#L360</denchmark-link>\n \n Can you test that and create a PR for it?\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "ienkovich", "commentT": "2020-11-09T03:09:34Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/suquark>@suquark</denchmark-link>\n  it's definitely not aligned right now, e.g.,\n import ray\n import numpy as np\n ray.init()\n x = ray.get(ray.put(np.zeros(10**8)))\n assert x.ctypes.data % 64 == 0  # This is often (always?) 12 for me. Not that I tried larger arrays in case the different code paths for smaller objects change things.\n For some reason I thought we had a test for this, but I can't find it now.\n EDIT: I guess we added the test in Arrow.\n <denchmark-link:https://github.com/apache/arrow/blob/599b458c68dfcba38fe5448913d4bb69723e1439/python/pyarrow/tests/test_serialization.py#L1156-L1176>https://github.com/apache/arrow/blob/599b458c68dfcba38fe5448913d4bb69723e1439/python/pyarrow/tests/test_serialization.py#L1156-L1176</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "b8dda0e3d09c8214db04b45852b07367615560fe", "commit_author": "Siyuan (Ryans) Zhuang", "commitT": "2020-11-10 23:44:16-08:00", "commit_complexity": {"commit_NLOC": "0.6730769230769231", "commit_CCN": "0.6730769230769231", "commit_Nprams": "1.0"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "BUILD.bazel", "file_new_name": "BUILD.bazel", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "1370,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440", "deleted_lines": null}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "python\\ray\\_raylet.pyx", "file_new_name": "python\\ray\\_raylet.pyx", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": null, "deleted_lines": "57"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "python\\ray\\includes\\serialization.pxi", "file_new_name": "python\\ray\\includes\\serialization.pxi", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "68,69,70,204,205,206,207,208,209,210,218,219,223,224,225,232,234,236,237,238,322,323,329,331,332,333,340,341,342,343,344,345,349,350,353,354,355,356,357,358,359,360,361,362,363", "deleted_lines": "51,52,55,56,72,73,207,213,216,220,221,222,230,232,233,234,235,236,316,317,318,320,324,325,326,332,333,341,342,343,344,345,349,350,351,353,354,355,357,358,359,360"}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\ray\\tests\\test_serialization.py", "file_new_name": "python\\ray\\tests\\test_serialization.py", "file_complexity": {"file_NLOC": "428", "file_CCN": "99", "file_NToken": "3170"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568", "deleted_lines": null, "method_info": {"method_name": "test_buffer_alignment", "method_params": "", "method_startline": "546", "method_endline": "568", "method_complexity": {"method_NLOC": "17", "method_CCN": "8", "method_NToken": "239", "method_nesting_level": "0"}}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "src\\ray\\common\\buffer.h", "file_new_name": "src\\ray\\common\\buffer.h", "file_complexity": {"file_NLOC": "77", "file_CCN": "20", "file_NToken": "509"}, "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "72,73,74,75", "deleted_lines": "68,69,70,71,80", "method_info": {"method_name": "ray::LocalMemoryBuffer::LocalMemoryBuffer", "method_params": "data,size,copy_data", "method_startline": "68", "method_endline": "80", "method_complexity": {"method_NLOC": "13", "method_CCN": "2", "method_NToken": "82", "method_nesting_level": "2"}}}, "hunk_1": {"Ismethod": 1, "added_lines": "84,85,86", "deleted_lines": null, "method_info": {"method_name": "ray::LocalMemoryBuffer::LocalMemoryBuffer", "method_params": "size", "method_startline": "83", "method_endline": "87", "method_complexity": {"method_NLOC": "5", "method_CCN": "1", "method_NToken": "36", "method_nesting_level": "2"}}}, "hunk_2": {"Ismethod": 1, "added_lines": "97,98,99,100,101,102", "deleted_lines": null, "method_info": {"method_name": "ray::LocalMemoryBuffer::~LocalMemoryBuffer", "method_params": "", "method_startline": "97", "method_endline": "102", "method_complexity": {"method_NLOC": "6", "method_CCN": "2", "method_NToken": "22", "method_nesting_level": "2"}}}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ray\\protobuf\\serialization.proto", "file_new_name": "src\\ray\\protobuf\\serialization.proto", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "24,25,26,38,39,42,45,46,47,48,49,50,51,87,91,93", "deleted_lines": "24,25,26,37,38,40,41,44,46,47,49,84,85,87,88,89,93,95"}}}, "file_6": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "src\\ray\\thirdparty\\aligned_alloc.c", "file_complexity": {"file_NLOC": "34", "file_CCN": "8", "file_NToken": "217"}}, "file_7": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "src\\ray\\thirdparty\\aligned_alloc.h", "file_complexity": {"file_NLOC": "5", "file_CCN": "0", "file_NToken": "25"}}}}}