{"BR": {"BR_id": "8535", "BR_author": "acxz", "BRopenT": "2020-05-21T13:34:00Z", "BRcloseT": "2020-06-01T20:40:01Z", "BR_text": {"BRsummary": "[ray] Build failure when installing from source", "BRdescription": "\n <denchmark-h:h3>What is the problem?</denchmark-h>\n \n I am trying to install ray from source. However, I receive the following error during the building process:\n <denchmark-code>INFO: From Executing genrule //:python/ray/streaming/_streaming.pyx_cython_translation:\n warning: python/ray/streaming/includes/transfer.pxi:57:50: Not all members given for struct 'CChannelCreationParameter'\n warning: python/ray/streaming/includes/transfer.pxi:57:50: Not all members given for struct 'CChannelCreationParameter'\n ERROR: /home/acxz/.cache/yay/python-ray/src/ray-ray-0.8.5/BUILD.bazel:371:1: Linking of rule '//:gcs_server' failed (Exit 1): gcc failed: error executing command \n   (cd /home/acxz/.cache/bazel/_bazel_acxz/e78727c45c5a88c44dd6ec8fadd46e6f/sandbox/linux-sandbox/1714/execroot/com_github_ray_project_ray && \\\n   exec env - \\\n     LD_LIBRARY_PATH=/home/acxz/cf_ws/devel/lib:/opt/ros/melodic/lib:/usr/lib/gazebo-11/plugins:/usr/lib/gazebo-11/plugins \\\n     PATH=/home/acxz/cf_ws/devel/bin:/opt/ros/melodic/bin:/home/acxz/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/opt/cuda/bin:/usr/lib/jvm/default/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl \\\n     PWD=/proc/self/cwd \\\n   /usr/bin/gcc @bazel-out/k8-opt/bin/gcs_server-2.params)\n Execution platform: @local_config_platform//:host\n \n Use --sandbox_debug to see verbose messages from the sandbox gcc failed: error executing command \n   (cd /home/acxz/.cache/bazel/_bazel_acxz/e78727c45c5a88c44dd6ec8fadd46e6f/sandbox/linux-sandbox/1714/execroot/com_github_ray_project_ray && \\\n   exec env - \\\n     LD_LIBRARY_PATH=/home/acxz/cf_ws/devel/lib:/opt/ros/melodic/lib:/usr/lib/gazebo-11/plugins:/usr/lib/gazebo-11/plugins \\\n     PATH=/home/acxz/cf_ws/devel/bin:/opt/ros/melodic/bin:/home/acxz/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/opt/cuda/bin:/usr/lib/jvm/default/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl \\\n     PWD=/proc/self/cwd \\\n   /usr/bin/gcc @bazel-out/k8-opt/bin/gcs_server-2.params)\n Execution platform: @local_config_platform//:host\n \n Use --sandbox_debug to see verbose messages from the sandbox\n bazel-out/k8-opt/bin/_objs/gcs/subscription_executor.pic.o:subscription_executor.cc:function ray::gcs::SubscriptionExecutor<ray::ClientID, ray::rpc::HeartbeatTableData, ray::gcs::HeartbeatTable>::AsyncSubscribeAll(ray::ClientID const&, std::function<void (ray::ClientID const&, ray::rpc::HeartbeatTableData const&)> const&, std::function<void (ray::Status)> const&): error: undefined reference to 'ray::gcs::Log<ray::ClientID, ray::rpc::HeartbeatTableData>::Subscribe(ray::JobID const&, ray::ClientID const&, std::function<void (ray::gcs::RedisGcsClient*, ray::ClientID const&, std::vector<ray::rpc::HeartbeatTableData, std::allocator<ray::rpc::HeartbeatTableData> > const&)> const&, std::function<void (ray::gcs::RedisGcsClient*)> const&)'\n bazel-out/k8-opt/bin/_objs/gcs/subscription_executor.pic.o:subscription_executor.cc:function ray::gcs::SubscriptionExecutor<ray::ClientID, ray::rpc::HeartbeatBatchTableData, ray::gcs::HeartbeatBatchTable>::AsyncSubscribeAll(ray::ClientID const&, std::function<void (ray::ClientID const&, ray::rpc::HeartbeatBatchTableData const&)> const&, std::function<void (ray::Status)> const&): error: undefined reference to 'ray::gcs::Log<ray::ClientID, ray::rpc::HeartbeatBatchTableData>::Subscribe(ray::JobID const&, ray::ClientID const&, std::function<void (ray::gcs::RedisGcsClient*, ray::ClientID const&, std::vector<ray::rpc::HeartbeatBatchTableData, std::allocator<ray::rpc::HeartbeatBatchTableData> > const&)> const&, std::function<void (ray::gcs::RedisGcsClient*)> const&)'\n bazel-out/k8-opt/bin/_objs/gcs/subscription_executor.pic.o:subscription_executor.cc:function ray::gcs::SubscriptionExecutor<ray::WorkerID, ray::rpc::WorkerFailureData, ray::gcs::WorkerFailureTable>::AsyncSubscribeAll(ray::ClientID const&, std::function<void (ray::WorkerID const&, ray::rpc::WorkerFailureData const&)> const&, std::function<void (ray::Status)> const&): error: undefined reference to 'ray::gcs::Log<ray::WorkerID, ray::rpc::WorkerFailureData>::Subscribe(ray::JobID const&, ray::ClientID const&, std::function<void (ray::gcs::RedisGcsClient*, ray::WorkerID const&, std::vector<ray::rpc::WorkerFailureData, std::allocator<ray::rpc::WorkerFailureData> > const&)> const&, std::function<void (ray::gcs::RedisGcsClient*)> const&)'\n collect2: error: ld returned 1 exit status\n Target //:ray_pkg failed to build\n INFO: Elapsed time: 1150.801s, Critical Path: 83.46s\n INFO: 1710 processes: 1710 linux-sandbox.\n FAILED: Build did NOT complete successfully\n Traceback (most recent call last):\n   File \"setup.py\", line 202, in <module>\n     setup(\n   File \"/usr/lib/python3.8/site-packages/setuptools/__init__.py\", line 144, in setup\n     return distutils.core.setup(**attrs)\n   File \"/usr/lib/python3.8/distutils/core.py\", line 148, in setup\n     dist.run_commands()\n   File \"/usr/lib/python3.8/distutils/dist.py\", line 966, in run_commands\n     self.run_command(cmd)\n   File \"/usr/lib/python3.8/distutils/dist.py\", line 985, in run_command\n     cmd_obj.run()\n   File \"/usr/lib/python3.8/distutils/command/build.py\", line 135, in run\n     self.run_command(cmd_name)\n   File \"/usr/lib/python3.8/distutils/cmd.py\", line 313, in run_command\n     self.distribution.run_command(command)\n   File \"/usr/lib/python3.8/distutils/dist.py\", line 985, in run_command\n     cmd_obj.run()\n   File \"setup.py\", line 121, in run\n     subprocess.check_call(command)\n   File \"/usr/lib/python3.8/subprocess.py\", line 364, in check_call\n     raise CalledProcessError(retcode, cmd)\n subprocess.CalledProcessError: Command '['../build.sh', '-p', '/usr/bin/python']' returned non-zero exit status 1.\n \n </denchmark-code>\n \n Ray version and other system information (Python version, TensorFlow version, OS):\n ray: 0.8.5\n python: 3.8.3\n gcc: 10.1.0\n bazel: 3.1.0\n os: Arch Linux\n <denchmark-h:h3>Reproduction (REQUIRED)</denchmark-h>\n \n Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):\n If we cannot run your script, we cannot fix your issue.\n \n  I have verified my script runs in a clean environment and reproduces the issue.\n  I have verified the issue also occurs with the latest wheels.\n \n The above does not apply since this is a build issue.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "acxz", "commentT": "2020-05-21T22:14:41Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/simon-mo>@simon-mo</denchmark-link>\n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "acxz", "commentT": "2020-05-21T22:51:06Z", "comment_text": "\n \t\tSeems like GCS build issue. <denchmark-link:https://github.com/ffbin>@ffbin</denchmark-link>\n  can you take a look or find someone might touch this code recently? Thanks\n The error is undefined symbol, reformatted the log below.\n <denchmark-code>bazel-out/k8-opt/bin/_objs/gcs/subscription_executor.pic.o:subscription_executor.cc:function ray::gcs::SubscriptionExecutor<ray::ClientID, ray::rpc::HeartbeatTableData, ray::gcs::HeartbeatTable>::AsyncSubscribeAll(ray::ClientID const&, std::function<void (ray::ClientID const&, ray::rpc::HeartbeatTableData const&)> const&, std::function<void (ray::Status)> const&): \n error: undefined reference to 'ray::gcs::Log<ray::ClientID, ray::rpc::HeartbeatTableData>::Subscribe(ray::JobID const&, ray::ClientID const&, std::function<void (ray::gcs::RedisGcsClient*, ray::ClientID const&, std::vector<ray::rpc::HeartbeatTableData, std::allocator<ray::rpc::HeartbeatTableData> > const&)> const&, std::function<void (ray::gcs::RedisGcsClient*)> const&)'\n \n bazel-out/k8-opt/bin/_objs/gcs/subscription_executor.pic.o:subscription_executor.cc:function ray::gcs::SubscriptionExecutor<ray::ClientID, ray::rpc::HeartbeatBatchTableData, ray::gcs::HeartbeatBatchTable>::AsyncSubscribeAll(ray::ClientID const&, std::function<void (ray::ClientID const&, ray::rpc::HeartbeatBatchTableData const&)> const&, std::function<void (ray::Status)> const&): \n error: undefined reference to 'ray::gcs::Log<ray::ClientID, ray::rpc::HeartbeatBatchTableData>::Subscribe(ray::JobID const&, ray::ClientID const&, std::function<void (ray::gcs::RedisGcsClient*, ray::ClientID const&, std::vector<ray::rpc::HeartbeatBatchTableData, std::allocator<ray::rpc::HeartbeatBatchTableData> > const&)> const&, std::function<void (ray::gcs::RedisGcsClient*)> const&)'\n \n bazel-out/k8-opt/bin/_objs/gcs/subscription_executor.pic.o:subscription_executor.cc:function ray::gcs::SubscriptionExecutor<ray::WorkerID, ray::rpc::WorkerFailureData, ray::gcs::WorkerFailureTable>::AsyncSubscribeAll(ray::ClientID const&, std::function<void (ray::WorkerID const&, ray::rpc::WorkerFailureData const&)> const&, std::function<void (ray::Status)> const&): \n error: undefined reference to 'ray::gcs::Log<ray::WorkerID, ray::rpc::WorkerFailureData>::Subscribe(ray::JobID const&, ray::ClientID const&, std::function<void (ray::gcs::RedisGcsClient*, ray::WorkerID const&, std::vector<ray::rpc::WorkerFailureData, std::allocator<ray::rpc::WorkerFailureData> > const&)> const&, std::function<void (ray::gcs::RedisGcsClient*)> const&)'\n </denchmark-code>\n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "acxz", "commentT": "2020-05-31T16:07:47Z", "comment_text": "\n \t\tSpent a little more time into this today and I think I have a solution (<denchmark-link:https://github.com/ray-project/ray/pull/8690>#8690</denchmark-link>\n ), not too sure tho, since my build fails but now it fails somewhere else that I believe is unrelated. If someone could test my changes that would be great.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "acxz", "commentT": "2020-06-01T20:41:07Z", "comment_text": "\n \t\tI just merged <denchmark-link:https://github.com/ray-project/ray/pull/8690>#8690</denchmark-link>\n  since the test failure seems unrelated.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "acxz", "commentT": "2020-06-01T21:22:12Z", "comment_text": "\n \t\tThx so much!\n \t\t"}}}, "commit": {"commit_id": "8b924a48460472204e533a193d582de7779aee75", "commit_author": "acxz", "commitT": "2020-06-01 13:39:59-07:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\ray\\gcs\\tables.cc", "file_new_name": "src\\ray\\gcs\\tables.cc", "file_complexity": {"file_NLOC": "754", "file_CCN": "128", "file_NToken": "6469"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "873,874,875", "deleted_lines": null}}}}}}