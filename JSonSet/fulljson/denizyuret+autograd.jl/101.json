{"BR": {"BR_id": "101", "BR_author": "tscode", "BRopenT": "2018-11-10T12:09:39Z", "BRcloseT": "2019-01-05T02:08:28Z", "BR_text": {"BRsummary": "grad doesn't work on trivial identity", "BRdescription": "\n I am on the official julia 1.0.1 release with all packages up-to-date.\n The following returns nothing,\n using AutoGrad\n y = Param(1.)\n f(x) = x\n d = @diff f(y)\n grad(d, y) # returns nothing\n while this works:\n f(x) = 1x\n d = @diff f(y)\n grad(d, y) # returns 1.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "tscode", "commentT": "2018-11-10T12:54:38Z", "comment_text": "\n \t\tOkay I found another problem with broadcasting of user-defined functions that may be related:\n y = Param([1.,2.])\n f(x) = 1x\n d = @diff sum(f.(y))\n grad(d, y) # returns nothing\n In contrast, it works with predefined functions:\n d = @diff sum(sin.(y))\n grad(d, y) # returns something reasonable\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "tscode", "commentT": "2018-11-10T13:00:38Z", "comment_text": "\n \t\tnothing is used interchangably with 0 in AutoGrad results to avoid creating\n large 0 arrays.\n <denchmark-link:#>\u2026</denchmark-link>\n \n \n On Sat, Nov 10, 2018 at 7:54 AM tscode ***@***.***> wrote:\n  Okay I found another problem with broadcasting of user-defined functions\n  that may be related:\n \n  y = Param([1.,2.])f(x) = 1x\n  d = @diff sum(f.(y))grad(d, y) # returns nothing\n \n  In contrast, it works with predefined functions:\n \n  d = @diff sum(sin.(y))grad(d, y) # returns something reasonable\n \n  \u2014\n  You are receiving this because you are subscribed to this thread.\n  Reply to this email directly, view it on GitHub\n  <#101 (comment)>,\n  or mute the thread\n  <https://github.com/notifications/unsubscribe-auth/ABvNphMCKtqeB_k9XyrGZYK7J09jJdp9ks5utsyPgaJpZM4YX9W8>\n  .\n \n \n \n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "tscode", "commentT": "2018-11-10T13:18:50Z", "comment_text": "\n \t\tOkay, but I expect the gradient of the identity x -> x to be 1, and not 0. So it should not return nothing, if I understood your comment correctly?\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "tscode", "commentT": "2018-11-10T13:56:39Z", "comment_text": "\n \t\tThat is correct, I\u2019ll see what\u2019s wrong...\n <denchmark-link:#>\u2026</denchmark-link>\n \n \n On Sat, Nov 10, 2018 at 8:18 AM tscode ***@***.***> wrote:\n  Okay, but I expect the gradient of the identity x -> x to be 1, and not\n  0. So it should not return nothing, if I understood your comment correctly?\n \n  \u2014\n  You are receiving this because you commented.\n \n \n  Reply to this email directly, view it on GitHub\n  <#101 (comment)>,\n  or mute the thread\n  <https://github.com/notifications/unsubscribe-auth/ABvNpg5xrERQ6kwpPH6o1KK7ULCKqLwIks5uttI6gaJpZM4YX9W8>\n  .\n \n \n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "tscode", "commentT": "2018-11-11T22:17:37Z", "comment_text": "\n \t\tThe first example failed because I did not handle the case where the differentiated function just returns one of the parameter inputs. It should be fixed in the latest master.\n The second example failed because AutoGrad does not yet support broadcasting arbitrary functions, only some primitives. I added code that throws an error reflecting this instead of silently failing.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "tscode", "commentT": "2018-11-14T19:21:25Z", "comment_text": "\n \t\tThe issue of supporting custom broadcasting also came up in Knet: <denchmark-link:https://github.com/denizyuret/Knet.jl/issues/342>denizyuret/Knet.jl#342</denchmark-link>\n \n I am leaving this issue open: custom broadcasting used to work in Julia 0.6, maybe we can find a simple fix for 1.0 as well.\n \t\t"}}}, "commit": {"commit_id": "94eca8d0d8c956b766545458c83beaaf1d552741", "commit_author": "Deniz Yuret", "commitT": "2018-11-11 17:17:13-05:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\core.jl", "file_new_name": "src\\core.jl", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "55,87", "deleted_lines": "86"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "test\\core.jl", "file_new_name": "test\\core.jl", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "38,39,40,41,42,43,44", "deleted_lines": null}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "test\\linearalgebra.jl", "file_new_name": "test\\linearalgebra.jl", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "50,51,52,58,59", "deleted_lines": "50,51,52,58,59"}}}}}}