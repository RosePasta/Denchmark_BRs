{"BR": {"BR_id": "80", "BR_author": "CarloLucibello", "BRopenT": "2018-08-16T03:46:15Z", "BRcloseT": "2018-08-23T07:25:59Z", "BR_text": {"BRsummary": "broadcast error for integer power", "BRdescription": "\n On master and julia 0.7\n julia> grad(x->sum(x.^2))([1,2,3])\n \u250c Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of\n \u2502 type `x::Rec{Array{Int64,1}}` with `Ref(x)` to ensure they broadcast as \"scalar\" elements.\n \u2502   caller = ip:0x0\n \u2514 @ Core :-1\n ERROR: DimensionMismatch(\"Cannot multiply two vectors\")\n Stacktrace:\n  [1] *(::Array{Int64,1}, ::Array{Int64,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/LinearAlgebra/src/deprecated.jl:566\n  [2] power_by_squaring(::Array{Int64,1}, ::Int64) at ./intfuncs.jl:192\n  [3] ^(::Array{Int64,1}, ::Int64) at ./deprecated.jl:55\n  [4] (::getfield(AutoGrad, Symbol(\"##rfun#7#9\")){typeof(^)})(::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::Rec{Array{Int64,1}}, ::Vararg{Any,N} where N) at /home/carlo/.julia/dev/AutoGrad/src/core.jl:133\n  [5] rfun at /home/carlo/.julia/dev/AutoGrad/src/core.jl:130 [inlined]\n  [6] ^ at ./none:0 [inlined]\n  [7] macro expansion at ./none:0 [inlined]\n  [8] literal_pow at ./none:0 [inlined]\n  [9] _broadcast_getindex_evalf at ./broadcast.jl:574 [inlined]\n  [10] _broadcast_getindex at ./broadcast.jl:547 [inlined]\n  [11] getindex at ./broadcast.jl:507 [inlined]\n  [12] copy at ./broadcast.jl:734 [inlined]\n  [13] materialize at ./broadcast.jl:724 [inlined]\n  [14] (::getfield(Main, Symbol(\"##15#16\")))(::Rec{Array{Int64,1}}) at ./REPL[11]:1\n  [15] (::getfield(AutoGrad, Symbol(\"##gradfun#1#2\")){getfield(Main, Symbol(\"##15#16\")),Int64})(::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::Array{Int64,1}) at /home/carlo/.julia/dev/AutoGrad/src/core.jl:95\n  [16] (::getfield(AutoGrad, Symbol(\"#gradfun#3\")){getfield(AutoGrad, Symbol(\"##gradfun#1#2\")){getfield(Main, Symbol(\"##15#16\")),Int64}})(::Array{Int64,1}) at /home/carlo/.julia/dev/AutoGrad/src/core.jl:39\n  [17] top-level scope at none:0\n The temporary workaround would be to use a float exponent\n julia> grad(x->sum(x.^2.0))([1,2,3])\n 3-element Array{Float64,1}:\n  2.0\n  4.0\n  6.0\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "CarloLucibello", "commentT": "2018-08-16T04:03:13Z", "comment_text": "\n \t\tIn src/base.jl we have\n @primitive ^(x1,x2),dy,y  unbroadcast(x1,dxndx(x1,x2,dy))  unbroadcast(x2,dy.*y.*log.(x1))\n @primitive ^(x1,x2::Integer),dy,y  unbroadcast(x1,dxndx(x1,x2,dy))  unbroadcast(x2,dy.*y.*log.(x1)) # ambiguity fix\n dxndx(x1,x2,dy)=(if x2==0; zero(dy); elseif x2==1; dy; elseif x2==2; 2 .* x1 .* dy; else; dy.*x2.*x1.^(x2 .- 1); end) # optimize common cases\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "CarloLucibello", "commentT": "2018-08-19T00:47:29Z", "comment_text": "\n \t\tIn addition to integer powers, matrix powers are also broken, e.g. rand(3,3)^2.0\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "CarloLucibello", "commentT": "2018-08-19T12:00:07Z", "comment_text": "\n \t\t\n In addition to integer powers, matrix powers are also broken, e.g. rand(3,3)^2.0\n \n Matrix powers are working for me\n julia> r=rand(2,2)\n 2\u00d72 Array{Float64,2}:\n  0.783298  0.554936\n  0.904212  0.51457 \n \n julia> grad(x->sum(x^2.0))(r)\n 2\u00d72 Array{Float64,2}:\n  1.5666   1.10987\n  1.80842  1.02914\n \n julia> grad(x->sum(x^2))(r)\n 2\u00d72 Array{Float64,2}:\n  1.5666   1.10987\n  1.80842  1.02914\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "CarloLucibello", "commentT": "2018-08-19T12:05:55Z", "comment_text": "\n \t\tI see what you mean now, matrix powers are treated as elements wise powers. Continuing the example above we have\n julia> grad(x->sum(x.^2))(r)\n \u250c Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of\n \u2502 type `x::Rec{Array{Float64,2}}` with `Ref(x)` to ensure they broadcast as \"scalar\" elements.\n \u2502   caller = ip:0x0\n \u2514 @ Core :-1\n 2\u00d72 Array{Float64,2}:\n  1.5666   1.10987\n  1.80842  1.02914\n \n julia> grad(x->sum(x.^2.0))(r)\n 2\u00d72 Array{Float64,2}:\n  1.5666   1.10987\n  1.80842  1.02914\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "CarloLucibello", "commentT": "2018-08-19T12:14:42Z", "comment_text": "\n \t\tAlso non-integer matrix powers are broken. This is a very serious bug.\n julia> r^3.1\n 2\u00d72 Array{Float64,2}:\n  1.49742  1.16269\n  2.06055  1.60003\n \n julia> r.^3.1\n 2\u00d72 Array{Float64,2}:\n  0.35567   0.136366\n  0.803742  0.432063\n \n julia> grad(x->sum(x^3.1))(r)\n 2\u00d72 Array{Float64,2}:\n  1.53898  0.803888\n  2.67353  1.7558  \n \n julia> grad(x->sum(x.^3.1))(r)\n 2\u00d72 Array{Float64,2}:\n  1.53898  0.803888\n  2.67353  1.7558  \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "CarloLucibello", "commentT": "2018-08-22T22:49:56Z", "comment_text": "\n \t\tLatest master fixes this (matrix powers still missing), please test and close.\n <denchmark-code>julia> grad(x->sum(x.^2))([1,2,3])\n grad(x->sum(x.^2))([1,2,3])\n 3-element Array{Int64,1}:\n  2\n  4\n  6\n \n julia> grad(x->sum(x.^2.0))([1,2,3])\n grad(x->sum(x.^2.0))([1,2,3])\n 3-element Array{Float64,1}:\n  2.0\n  4.0\n  6.0\n \n julia> r = [1. 2.; 3. 4.]\n r = [1. 2.; 3. 4.]\n 2\u00d72 Array{Float64,2}:\n  1.0  2.0\n  3.0  4.0\n \n julia> grad(x->sum(x^2.0))(r)\n grad(x->sum(x^2.0))(r)\n ERROR: Derivatives of real matrix powers not defined.\n \n julia> grad(x->sum(x^2))(r)\n grad(x->sum(x^2))(r)\n ERROR: Derivatives of integer matrix powers not defined.\n \n julia> grad(x->sum(x.^2))(r)\n grad(x->sum(x.^2))(r)\n 2\u00d72 Array{Float64,2}:\n  2.0  4.0\n  6.0  8.0\n \n julia> grad(x->sum(x.^2))(r)\n grad(x->sum(x.^2))(r)\n 2\u00d72 Array{Float64,2}:\n  2.0  4.0\n  6.0  8.0\n \n julia> grad(x->sum(x.^2.0))(r)\n grad(x->sum(x.^2.0))(r)\n 2\u00d72 Array{Float64,2}:\n  2.0  4.0\n  6.0  8.0\n \n julia> r^3.1\n r^3.1\n 2\u00d72 Array{Complex{Float64},2}:\n  43.7868-0.0109935im   63.8808+0.00502871im\n  95.8212+0.00754306im  139.608-0.0034504im\n \n julia> r.^3.1\n r.^3.1\n 2\u00d72 Array{Float64,2}:\n   1.0      8.57419\n  30.1353  73.5167\n \n julia> grad(x->sum(x^3.1))(r)\n grad(x->sum(x^3.1))(r)\n ERROR: Derivatives of real matrix powers not defined.\n \n julia> grad(x->sum(x.^3.1))(r)\n grad(x->sum(x.^3.1))(r)\n 2\u00d72 Array{Float64,2}:\n   3.1     13.29\n  31.1398  56.9754\n </denchmark-code>\n \n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "CarloLucibello", "commentT": "2018-08-23T07:25:59Z", "comment_text": "\n \t\tNIce, tanks, this is working for me now. I'll open a different issue for matrix powers\n \t\t"}}}, "commit": {"commit_id": "e404118db60c02dacb00b636b8bb3e4e79ba2b6e", "commit_author": "Deniz Yuret", "commitT": "2018-08-23 01:49:25+03:00", "commit_complexity": {"commit_NLOC": "None", "commit_CCN": "None", "commit_Nprams": "None"}, "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\AutoGrad.jl", "file_new_name": "src\\AutoGrad.jl", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "8", "deleted_lines": "8"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\base.jl", "file_new_name": "src\\base.jl", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "2,52,53,54,55,57,58,59,60", "deleted_lines": "2,52,53"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "src\\linearalgebra.jl", "file_new_name": "src\\linearalgebra.jl", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "97,98,103,104,105", "deleted_lines": null}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "test\\base.jl", "file_new_name": "test\\base.jl", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "62,63,67,68,69", "deleted_lines": "62"}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "test\\gradcheck.jl", "file_new_name": "test\\gradcheck.jl", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "82,83", "deleted_lines": null}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "test\\linearalgebra.jl", "file_new_name": "test\\linearalgebra.jl", "file_complexity": {"file_NLOC": "None", "file_CCN": "None", "file_NToken": "None"}, "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "58,59", "deleted_lines": null}}}}}}