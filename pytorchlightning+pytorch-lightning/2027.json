{"BR": {"BR_id": "2027", "BR_author": "williamFalcon", "BRopenT": "2020-05-31T12:33:44Z", "BRcloseT": "2020-06-08T11:19:35Z", "BR_text": {"BRsummary": "Support DictConfig", "BRdescription": "\n We need to add DictConfig support for Omegaconf <denchmark-link:https://github.com/Borda>@Borda</denchmark-link>\n  to the auto hparam save\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "williamFalcon", "commentT": "2020-05-31T19:28:03Z", "comment_text": "\n \t\tYes, I agree. Users should have other options besides argument parser to set up their configuration. Personally speaking, I don't like typing too much on the command line b/c that is error-prone. A dictionary-like configuration system would be great. One example would be Ross's <denchmark-link:https://github.com/rbgirshick/yacs>yacs</denchmark-link>\n  which works pretty well.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "williamFalcon", "commentT": "2020-06-01T19:02:26Z", "comment_text": "\n \t\tOmegaConf is along the same lines as Yacs, but with more features (might as well support YACS too, but just saying).\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "williamFalcon", "commentT": "2020-06-01T22:00:59Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/DKandrew>@DKandrew</denchmark-link>\n  <denchmark-link:https://github.com/Darktex>@Darktex</denchmark-link>\n  you would keep passing one eg  argument which is used internally? Kind of pseudocode...\n \n \n  conf = OmegaConf(...)\n  model = MyModel(conf)\n \n \n \n  conf = OmegaConf(...)\n  model = MyModel(**vars(conf))\n \n \n \n assuming that the conf can be also loaded from a file...\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "williamFalcon", "commentT": "2020-06-02T20:22:53Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/Borda>@Borda</denchmark-link>\n \n I am not sure if I understand your question correctly, are you asking which approach you listed above is better?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "williamFalcon", "commentT": "2020-06-02T22:19:50Z", "comment_text": "\n \t\t\n I am not sure if I understand your question correctly, are you asking which approach you listed above is better?\n \n I am trying to understand your use-case, mind draw your use case?\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "williamFalcon", "commentT": "2020-06-02T23:42:38Z", "comment_text": "\n \t\tSure. My use-case is the first one\n <denchmark-code>conf = OmegaConf(...)\n model = MyModel(conf)\n </denchmark-code>\n \n I don't want to use the second case because conf contains too many entries: entries for network layers, dataloader, training, optimizer/scheduler, etc. I don't want to expand all of them into my __init__() because that would be too long. After all, MyModel is just an nn.Module with additional features, so internally I have a self.conf to store the entire config and use it whenever I need it.\n <denchmark-code>class MyModel(LightningModule)\n     def __init__(self, conf):\n         self.conf = conf\n         # Normal network parameters like in_features, out_features\n </denchmark-code>\n \n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "williamFalcon", "commentT": "2020-06-02T23:49:42Z", "comment_text": "\n \t\tlet\u2019s do this:\n <denchmark-h:h2>case 1</denchmark-h>\n \n User explicitly says what they want to save.\n class LitModel(...):\n \n     def __init__(self, conf):\n         self.save_hyperparameters(conf)\n <denchmark-h:h2>Case 2:</denchmark-h>\n \n User wants to save all the init stuff.\n They can do it all manually or ask us to do it automatically\n class LitModel(...):\n \n     def __init__(self, arg1, arg2, arg3):\n         # manually\n         self.save_hyperparameters(arg_name=arg1, arg_name=arg2, arg_name=arg3)\n         \n         # equivalent automatic\n         self.save_hyperparameters()\n <denchmark-h:h2>Case 3:</denchmark-h>\n \n They want to save ONLY some of the init stuff\n class LitModel(...):\n \n     def __init__(self, arg1, arg2, arg3):\n         # manually\n         self.save_hyperparameters(arg_name=arg2)\n <denchmark-h:h2>Special cases:</denchmark-h>\n \n \n namespace\n \n     def __init__(self, hparams):\n         # manually\n         self.save_hyperparameters(hparams)\n \n dict\n \n     def __init__(self, some_dict):\n         # manually\n         self.save_hyperparameters(some_dict)\n \n omniconf\n \n     def __init__(self, conf):\n         # manually\n         self.save_hyperparameters(conf)\n \n anything they want\n \n     def __init__(self, some_random_alternative_to_config):\n         # manually\n         self.save_hyperparameters(some_random_alternative_to_config)\n <denchmark-link:https://github.com/orgs/PyTorchLightning/teams/core-contributors>@PyTorchLightning/core-contributors</denchmark-link>\n \n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "williamFalcon", "commentT": "2020-06-04T03:10:30Z", "comment_text": "\n \t\t\n let\u2019s do this:\n \n Sounds good to me. Looking forward to it!\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "williamFalcon", "commentT": "2020-06-04T12:12:14Z", "comment_text": "\n \t\t\n case 1\n User explicitly says what they want to save.\n class LitModel(...):\n \n     def __init__(self, conf):\n         self.save_hyperparameters(conf)\n \n is very tricky as we would need to do some pairing from init frame and hope none of the conf1, conf2, ... has the same value so I would skip this case...\n \n Special cases:\n \n namespace\n dict\n \n     def __init__(self, conf):\n         # manually\n         self.save_hyperparameters(conf)\n \n here you want to unroll all elements?\n assume you have some_dict=dict(a=1, b=3) then you would in fact do something similar like self.save_hyperparameters(**some_dict)\n if fact\n <denchmark-code>def save_hyperparameters(**kwargs):\n     ...\n     for elms in kwargs:\n         if isisntance(conf, (dict, OmegaConf)):\n             self.save_hyperparameters(**conf)\n         if isisntance(conf, Namespace):\n             self.save_hyperparameters(**vars(conf))\n        ...\n </denchmark-code>\n \n \t\t"}}}, "commit": {"commit_id": "d2967d9305b42c9260f821f2b7fb43fbf19ca1aa", "commit_author": "Jirka Borovec", "commitT": "2020-06-08 07:19:34-04:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "CHANGELOG.md", "file_new_name": "CHANGELOG.md", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "79", "deleted_lines": "79,80,81"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "docs\\source\\hyperparameters.rst", "file_new_name": "docs\\source\\hyperparameters.rst", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "105,106,108,109,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,130,131,132,133,137,140,142,143,145,146,149,167,171,174,176,178,179,181,182,183,185,186,188,189", "deleted_lines": "106,108,109,111,112,114,118,121,122,123,125,126,127,129,130,132,133,135,136,137,138,139,140,141,142,143,144,145,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,184,186,187,189,191,192,195"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 11, "file_old_name": "pytorch_lightning\\core\\lightning.py", "file_new_name": "pytorch_lightning\\core\\lightning.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1717,1723,1725,1729,1730,1734", "method_info": {"method_name": "auto_collect_arguments", "method_params": "self", "method_startline": "1717", "method_endline": "1734"}}, "hunk_1": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460", "method_info": {"method_name": "load_from_metrics", "method_params": "cls,weights_path,tags_csv,map_location", "method_startline": "1450", "method_endline": "1460"}}, "hunk_2": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1737,1738,1739,1741,1742,1743,1745,1746,1747,1748,1749,1750,1751", "method_info": {"method_name": "module_arguments", "method_params": "self", "method_startline": "1737", "method_endline": "1751"}}, "hunk_3": {"Ismethod": 1, "added_lines": "1681,1682", "deleted_lines": null, "method_info": {"method_name": "hparams", "method_params": "self,dict,Namespace", "method_startline": "1681", "method_endline": "1682"}}, "hunk_4": {"Ismethod": 1, "added_lines": "1564,1569,1570,1571,1572,1573,1574,1575,1577,1578,1580,1584,1585,1589,1590", "deleted_lines": "1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590", "method_info": {"method_name": "_auto_collect_arguments", "method_params": "cls,frame", "method_startline": "1564", "method_endline": "1590"}}, "hunk_5": {"Ismethod": 1, "added_lines": "1585,1589,1590,1592,1593,1595,1596,1597,1598,1599", "deleted_lines": "1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599", "method_info": {"method_name": "_load_model_state", "method_params": "cls,str,args,kwargs", "method_startline": "1585", "method_endline": "1599"}}, "hunk_6": {"Ismethod": 1, "added_lines": "1592,1593,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657", "deleted_lines": "1592,1593,1594,1595,1596,1597,1598,1599,1600", "method_info": {"method_name": "save_hyperparameters", "method_params": "self,args,frame", "method_startline": "1592", "method_endline": "1657"}}, "hunk_7": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1463,1464,1465,1466,1467,1468,1469,1470", "method_info": {"method_name": "load_from_checkpoint", "method_params": "cls,str,args,str,str,device,int,None,None,None,kwargs", "method_startline": "1463", "method_endline": "1470"}}, "hunk_8": {"Ismethod": 1, "added_lines": null, "deleted_lines": "1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1784,1785,1786,1787,1788", "method_info": {"method_name": "_collect_init_args", "method_params": "frame,list", "method_startline": "1754", "method_endline": "1788"}}, "hunk_9": {"Ismethod": 1, "added_lines": "1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672", "deleted_lines": null, "method_info": {"method_name": "_set_hparams", "method_params": "self,dict,Namespace", "method_startline": "1659", "method_endline": "1672"}}, "hunk_10": {"Ismethod": 1, "added_lines": "1675,1676,1677,1678", "deleted_lines": null, "method_info": {"method_name": "hparams", "method_params": "self", "method_startline": "1675", "method_endline": "1678"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "pytorch_lightning\\core\\saving.py", "file_new_name": "pytorch_lightning\\core\\saving.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "29,30,31,32,33,34,35,36,37,38,39", "deleted_lines": null, "method_info": {"method_name": "load_from_metrics", "method_params": "cls,weights_path,tags_csv,map_location", "method_startline": "29", "method_endline": "39"}}, "hunk_1": {"Ismethod": 1, "added_lines": "164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188", "deleted_lines": null, "method_info": {"method_name": "_load_model_state", "method_params": "cls,str,args,kwargs", "method_startline": "164", "method_endline": "188"}}, "hunk_2": {"Ismethod": 1, "added_lines": "42,43,44,45,46,47,48,49", "deleted_lines": null, "method_info": {"method_name": "load_from_checkpoint", "method_params": "cls,str,args,str,str,device,int,None,None,None,kwargs", "method_startline": "42", "method_endline": "49"}}}}, "file_4": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "pytorch_lightning\\trainer\\trainer.py", "file_new_name": "pytorch_lightning\\trainer\\trainer.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "689", "deleted_lines": null, "method_info": {"method_name": "add_argparse_args.use_type", "method_params": "x", "method_startline": "688", "method_endline": "689"}}, "hunk_1": {"Ismethod": 1, "added_lines": "689", "deleted_lines": "690", "method_info": {"method_name": "add_argparse_args", "method_params": "cls,ArgumentParser", "method_startline": "631", "method_endline": "709"}}, "hunk_2": {"Ismethod": 1, "added_lines": "966", "deleted_lines": "967", "method_info": {"method_name": "run_pretrain_routine", "method_params": "self,LightningModule", "method_startline": "943", "method_endline": "1043"}}}}, "file_5": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "pytorch_lightning\\trainer\\training_io.py", "file_new_name": "pytorch_lightning\\trainer\\training_io.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "476,477", "deleted_lines": "480,481", "method_info": {"method_name": "hpc_save", "method_params": "self,str,logger", "method_startline": "452", "method_endline": "482"}}, "hunk_1": {"Ismethod": 1, "added_lines": "270,271", "deleted_lines": null, "method_info": {"method_name": "save_checkpoint", "method_params": "self,filepath,bool", "method_startline": "262", "method_endline": "274"}}, "hunk_2": {"Ismethod": 1, "added_lines": "357,358,359,361,362", "deleted_lines": "363,365,366", "method_info": {"method_name": "dump_checkpoint", "method_params": "self,bool", "method_startline": "311", "method_endline": "367"}}}}, "file_6": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "pytorch_lightning\\utilities\\__init__.py", "file_new_name": "pytorch_lightning\\utilities\\__init__.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "5", "deleted_lines": null}}}, "file_7": {"file_change_type": "MODIFY", "file_Nmethod": 8, "file_old_name": "pytorch_lightning\\utilities\\parsing.py", "file_new_name": "pytorch_lightning\\utilities\\parsing.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "28", "deleted_lines": "27,28,29,30,31", "method_info": {"method_name": "clean_namespace", "method_params": "hparams", "method_startline": "27", "method_endline": "46"}}, "hunk_1": {"Ismethod": 1, "added_lines": "70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93", "deleted_lines": null, "method_info": {"method_name": "collect_init_args", "method_params": "frame,list,bool", "method_startline": "70", "method_endline": "93"}}, "hunk_2": {"Ismethod": 1, "added_lines": "49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67", "deleted_lines": null, "method_info": {"method_name": "get_init_args", "method_params": "frame", "method_startline": "49", "method_endline": "67"}}, "hunk_3": {"Ismethod": 1, "added_lines": "121,122,123,124,125,126,127,128", "deleted_lines": null, "method_info": {"method_name": "__repr__", "method_params": "self", "method_startline": "121", "method_endline": "128"}}, "hunk_4": {"Ismethod": 1, "added_lines": "118,119", "deleted_lines": null, "method_info": {"method_name": "__setattr__", "method_params": "self,key,val", "method_startline": "118", "method_endline": "119"}}, "hunk_5": {"Ismethod": 1, "added_lines": "5,13,15", "deleted_lines": "4,12,14", "method_info": {"method_name": "strtobool", "method_params": "val", "method_startline": "4", "method_endline": "23"}}, "hunk_6": {"Ismethod": 1, "added_lines": "112,113,114,115,116", "deleted_lines": null, "method_info": {"method_name": "__getattr__", "method_params": "self,key", "method_startline": "112", "method_endline": "116"}}, "hunk_7": {"Ismethod": 1, "added_lines": "5,13,15", "deleted_lines": "12,14", "method_info": {"method_name": "str_to_bool", "method_params": "val", "method_startline": "5", "method_endline": "24"}}}}, "file_8": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tests\\base\\model_template.py", "file_new_name": "tests\\base\\model_template.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "54", "deleted_lines": "54"}}}, "file_9": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\loggers\\test_trains.py", "file_new_name": "tests\\loggers\\test_trains.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "25", "deleted_lines": "25", "method_info": {"method_name": "test_trains_logger", "method_params": "tmpdir", "method_startline": "8", "method_endline": "27"}}}}, "file_10": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\models\\test_cpu.py", "file_new_name": "tests\\models\\test_cpu.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "115", "method_info": {"method_name": "test_multi_cpu_model_ddp", "method_params": "tmpdir", "method_startline": "114", "method_endline": "131"}}}}, "file_11": {"file_change_type": "MODIFY", "file_Nmethod": 30, "file_old_name": "tests\\models\\test_hparams.py", "file_new_name": "tests\\models\\test_hparams.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113", "deleted_lines": "95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113", "method_info": {"method_name": "test_explicit_args_hparams", "method_params": "tmpdir", "method_startline": "95", "method_endline": "113"}}, "hunk_1": {"Ismethod": 1, "added_lines": "101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136", "deleted_lines": "101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,131,132,133,134,135,136", "method_info": {"method_name": "test_collect_init_arguments", "method_params": "tmpdir,cls", "method_startline": "101", "method_endline": "136"}}, "hunk_2": {"Ismethod": 1, "added_lines": "123,124,125", "deleted_lines": "123,124,125", "method_info": {"method_name": "test_implicit_args_hparams.__init__", "method_params": "self,test_arg,test_arg2", "method_startline": "123", "method_endline": "125"}}, "hunk_3": {"Ismethod": 1, "added_lines": "23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45", "deleted_lines": "21,25,33,38", "method_info": {"method_name": "test_class_nesting", "method_params": "tmpdir", "method_startline": "21", "method_endline": "45"}}, "hunk_4": {"Ismethod": 1, "added_lines": "33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59", "deleted_lines": "33,38,48", "method_info": {"method_name": "_run_standard_hparams_test", "method_params": "tmpdir,model,cls", "method_startline": "33", "method_endline": "59"}}, "hunk_5": {"Ismethod": 1, "added_lines": "65,66,67,68", "deleted_lines": "65,66,67,68", "method_info": {"method_name": "__init__", "method_params": "self,args,subclass_arg,kwargs", "method_startline": "65", "method_endline": "68"}}, "hunk_6": {"Ismethod": 1, "added_lines": "18,20", "deleted_lines": "18", "method_info": {"method_name": "__init__", "method_params": "self,hparams", "method_startline": "18", "method_endline": "20"}}, "hunk_7": {"Ismethod": 1, "added_lines": "204,205,206,207,208,209", "deleted_lines": null, "method_info": {"method_name": "test_omegaconf", "method_params": "tmpdir", "method_startline": "203", "method_endline": "219"}}, "hunk_8": {"Ismethod": 1, "added_lines": "72,73,74,75,76,77", "deleted_lines": "72,73,74,75,76,77", "method_info": {"method_name": "test_dict_hparams", "method_params": "tmpdir,cls", "method_startline": "72", "method_endline": "77"}}, "hunk_9": {"Ismethod": 1, "added_lines": "205,206,207,208", "deleted_lines": null, "method_info": {"method_name": "test_omegaconf.__init__", "method_params": "self,ogc", "method_startline": "205", "method_endline": "208"}}, "hunk_10": {"Ismethod": 1, "added_lines": "175,179,187,192", "deleted_lines": null, "method_info": {"method_name": "test_class_nesting", "method_params": "", "method_startline": "175", "method_endline": "199"}}, "hunk_11": {"Ismethod": 1, "added_lines": "63,64,65,66,67,68", "deleted_lines": "63,64,65,66,67,68", "method_info": {"method_name": "test_namespace_hparams", "method_params": "tmpdir,cls", "method_startline": "63", "method_endline": "68"}}, "hunk_12": {"Ismethod": 1, "added_lines": "116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134", "deleted_lines": "116,117,118,119,120,123,124,125,126,127,128,129,130,131,132,133,134", "method_info": {"method_name": "test_implicit_args_hparams", "method_params": "tmpdir", "method_startline": "116", "method_endline": "134"}}, "hunk_13": {"Ismethod": 1, "added_lines": "335", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,arg1,arg2,args,kwargs", "method_startline": "330", "method_endline": "335"}}, "hunk_14": {"Ismethod": 1, "added_lines": "74,75,76,77,78,79", "deleted_lines": "74,75,76,77,78,79", "method_info": {"method_name": "__init__", "method_params": "obj,more_args,other_arg,more_kwargs", "method_startline": "74", "method_endline": "79"}}, "hunk_15": {"Ismethod": 1, "added_lines": "382,383,384", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,arg1,arg2", "method_startline": "382", "method_endline": "384"}}, "hunk_16": {"Ismethod": 1, "added_lines": "81,82,83,84,85,86,87,88,89,90,91,92", "deleted_lines": "81,82,83,84,85,86,87,88,89,90,91,92", "method_info": {"method_name": "test_omega_conf_hparams", "method_params": "tmpdir,cls", "method_startline": "81", "method_endline": "92"}}, "hunk_17": {"Ismethod": 1, "added_lines": "144,145,146", "deleted_lines": null, "method_info": {"method_name": "test_explicit_missing_args_hparams.__init__", "method_params": "self,test_arg,test_arg2", "method_startline": "144", "method_endline": "146"}}, "hunk_18": {"Ismethod": 1, "added_lines": "391,392,393,394", "deleted_lines": null, "method_info": {"method_name": "test_single_config_models_fail", "method_params": "tmpdir,cls,config", "method_startline": "391", "method_endline": "394"}}, "hunk_19": {"Ismethod": 1, "added_lines": "308,309,310,311,312,314", "deleted_lines": null, "method_info": {"method_name": "_raw_checkpoint_path", "method_params": "trainer", "method_startline": "308", "method_endline": "314"}}, "hunk_20": {"Ismethod": 1, "added_lines": "345,346,347", "deleted_lines": null, "method_info": {"method_name": "test_collect_init_arguments_with_local_vars", "method_params": "cls", "method_startline": "342", "method_endline": "347"}}, "hunk_21": {"Ismethod": 1, "added_lines": "102,103,104", "deleted_lines": "102,103,104", "method_info": {"method_name": "test_explicit_args_hparams.__init__", "method_params": "self,test_arg,test_arg2", "method_startline": "102", "method_endline": "104"}}, "hunk_22": {"Ismethod": 1, "added_lines": "192", "deleted_lines": null, "method_info": {"method_name": "test_class_nesting.test", "method_params": "self", "method_startline": "190", "method_endline": "192"}}, "hunk_23": {"Ismethod": 1, "added_lines": "179", "deleted_lines": null, "method_info": {"method_name": "test_class_nesting.forward", "method_params": "self", "method_startline": "178", "method_endline": "179"}}, "hunk_24": {"Ismethod": 1, "added_lines": "16,17,18", "deleted_lines": "15,17,18", "method_info": {"method_name": "__init__", "method_params": "self,ogc", "method_startline": "15", "method_endline": "18"}}, "hunk_25": {"Ismethod": 1, "added_lines": "88,89,90,91", "deleted_lines": "88,89,90,91", "method_info": {"method_name": "__init__", "method_params": "self,args,my_loss", "method_startline": "88", "method_endline": "91"}}, "hunk_26": {"Ismethod": 1, "added_lines": "187", "deleted_lines": null, "method_info": {"method_name": "test_class_nesting.test_outside", "method_params": "", "method_startline": "185", "method_endline": "187"}}, "hunk_27": {"Ismethod": 1, "added_lines": "137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168", "deleted_lines": "138,139,149,150,157,161,162,167,168", "method_info": {"method_name": "test_explicit_missing_args_hparams", "method_params": "tmpdir", "method_startline": "137", "method_endline": "168"}}, "hunk_28": {"Ismethod": 1, "added_lines": "376,377,378", "deleted_lines": null, "method_info": {"method_name": "__init__", "method_params": "self,arg1", "method_startline": "376", "method_endline": "378"}}, "hunk_29": {"Ismethod": 1, "added_lines": "397,398,399,400,401,402", "deleted_lines": null, "method_info": {"method_name": "test_hparams_pickle", "method_params": "tmpdir", "method_startline": "397", "method_endline": "402"}}}}, "file_12": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\models\\test_restore.py", "file_new_name": "tests\\models\\test_restore.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": null, "deleted_lines": "273,274", "method_info": {"method_name": "test_model_pickle", "method_params": "tmpdir", "method_startline": "272", "method_endline": "276"}}}}, "file_13": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tests\\requirements-devel.txt", "file_new_name": "tests\\requirements-devel.txt", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "5,6,7", "deleted_lines": "5"}}}, "file_14": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\trainer\\test_trainer.py", "file_new_name": "tests\\trainer\\test_trainer.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "45", "deleted_lines": "46", "method_info": {"method_name": "test_no_val_module", "method_params": "tmpdir", "method_startline": "21", "method_endline": "54"}}}}}}}