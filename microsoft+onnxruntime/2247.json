{"BR": {"BR_id": "2247", "BR_author": "mgkeeley", "BRopenT": "2019-10-24T03:54:16Z", "BRcloseT": "2019-10-31T17:12:00Z", "BR_text": {"BRsummary": "ReduceMin/ReduceMax do not reduce axes on Cuda provider", "BRdescription": "\n Describe the bug\n When using the Reduce operators (e.g. ReduceMin) with no axes sepcified, and keep_dims==0, the dimensions of the input tensor are not reduced when running via the Cuda provider.  If the exact same Onnx model is used with the CPU provider, the axes are reduced as expected.\n Urgency\n A workaround is possible: instead of\n m = data.min()\n you can write\n m, _ = data.view(-1).min(dim = 0, keepdim = True)\n System information\n \n OS Platform and Distribution: Windows 7 x64\n ONNX Runtime installed from: NuGet (C#)\n ONNX Runtime version: 0.5.0, 0.5.1\n Python version: 3.7\n Visual Studio version (if applicable): 2019 (16.3.1)\n CUDA/cuDNN version: 10.0\n GPU model and memory: RTX 2080 Ti\n \n To Reproduce\n \n Create a pytorch model that uses the .min() operator on a tensor with more than one dimension\n data = torch.randn(2, 2) data_min = data.min()\n Export the model to onnx, import in OnnxRuntime for C#\n Run the model via CPU e.g.\n new InferenceSession(pathToOnnxFile, SessionOptions.Default);\n Check the output is a single scalar tensor.\n Run the model via GPU e.g.\n new InferenceSession(pathToOnnxFile, SessionOptions.MakeSessionOptionWithCudaProvider());\n The output has the same dimensions as the input\n \n Expected behavior\n The results should be the same for both providers; and the number of dimensions should be reduced.\n Additional context\n I'm not a CUDA programmer, but looking at the code in \n \n \n onnxruntime/onnxruntime/core/providers/cuda/reduction/reduction_ops.cc\n \n \n          Line 91\n       in\n       90858b7\n \n \n \n \n \n \n  squeezed_output_dims.push_back(input_dims[i]); \n \n \n \n \n  it seems the reduced dimensions are correctly calculated from output_dims and stored in squeezed_output_dims, but then later, these reduced dimensions are ignored when creating the output tensor \n \n \n onnxruntime/onnxruntime/core/providers/cuda/reduction/reduction_ops.cc\n \n \n          Line 109\n       in\n       90858b7\n \n \n \n \n \n \n  std::vector<int64_t> output_dims_cudnn = output_dims; \n \n \n \n \n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "mgkeeley", "commentT": "2019-10-25T20:58:31Z", "comment_text": "\n \t\tHello,\n I tried to repro this in current master but couldn't repro it. (I ll check to see if there was a fix committed for this since 0.5.0/0.5.1).\n Since we didn't have a case covering this exact combination, I added some tests in <denchmark-link:https://github.com/microsoft/onnxruntime/pull/2268>#2268</denchmark-link>\n  (reduce on default axes (all axes) with keep_dims == 0) and the result was a scalar as you correctly described. These tests pass for the CUDA EP.\n Also,\n \n \n \n onnxruntime/onnxruntime/core/providers/cuda/reduction/reduction_ops.cc\n \n \n          Line 95\n       in\n       90858b7\n \n \n \n \n \n \n  Tensor* Y = ctx->Output(0, TensorShape(squeezed_output_dims)); \n \n \n \n \n , we do create an output tensor using the correct dims (squeezed_output_dims as you rightly pointed out).\n Please let me know if I have made a mistake. You can check one of the tests added.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "mgkeeley", "commentT": "2019-10-25T22:57:48Z", "comment_text": "\n \t\tOK, let me make a minimal reproduction my side, I will attach it here. Thanks for your time.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "mgkeeley", "commentT": "2019-10-25T23:32:00Z", "comment_text": "\n \t\tSee attached for a python script that reproduces the issue my side.\n Also the min.onnx file that has the issue.\n <denchmark-link:https://github.com/microsoft/onnxruntime/files/3774136/onnx-reduce.zip>onnx-reduce.zip</denchmark-link>\n \n Output:\n <denchmark-code>Onnx info:\n ir_version = 4\n producer_name = pytorch\n producer_version = 1.2\n opset_import = [version: 9\n ]\n Onnx graph:\n graph torch-jit-export (\n   %input[FLOAT, batchxheight]\n ) {\n   %minimum = ReduceMin[keepdims = 0](%input)\n   return %minimum\n }\n Input: tensor([[ 0.3182, -0.2890,  0.9320],\n         [ 1.8208, -0.0751, -1.1916]])\n Output: [[ 0.31817138 -0.28902754  0.9320159 ]\n  [ 1.820803   -0.07514615 -1.191623  ]]\n Output shape: (2, 3)\n </denchmark-code>\n \n \n pip list\n \n <denchmark-code>Package              Version\n -------------------- ---------------\n absl-py              0.7.1\n apex                 0.1\n astor                0.8.0\n attrs                19.1.0\n Automat              0.7.0\n certifi              2019.9.11\n cffi                 1.12.3\n characteristic       14.3.0\n cloudpickle          0.8.1\n constantly           15.1.0\n cycler               0.10.0\n cytoolz              0.9.0.1\n dask                 1.2.0\n decorator            4.4.0\n future               0.17.1\n gast                 0.2.2\n google-pasta         0.1.7\n graphviz             0.11\n grpcio               1.22.0\n h5py                 2.9.0\n hyperlink            19.0.0\n idna                 2.8\n imageio              2.5.0\n incremental          17.5.0\n Keras-Applications   1.0.8\n Keras-Preprocessing  1.1.0\n kiwisolver           1.0.1\n klein                19.6.0\n Markdown             3.1.1\n matplotlib           3.0.3\n mkl-fft              1.0.10\n mkl-random           1.0.2\n networkx             2.3\n numpy                1.16.3\n olefile              0.46\n onnx                 1.5.0\n onnxruntime-gpu      0.5.0\n Pillow               6.0.0\n pip                  19.1\n protobuf             3.9.0\n py-lz4framed         0.13.0\n pycparser            2.19\n PyHamcrest           1.9.0\n pyparsing            2.4.0\n pypiwin32            223\n python-dateutil      2.8.0\n pytz                 2019.1\n PyWavelets           1.0.3\n pywin32              224\n scikit-image         0.15.0\n scipy                1.2.1\n setuptools           41.0.0\n six                  1.12.0\n tb-nightly           1.15.0a20190726\n tensorflow-estimator 1.14.0\n termcolor            1.1.0\n toolz                0.9.0\n torch                1.2.0\n torchvision          0.4.0\n torchviz             0.0.1\n tornado              6.0.2\n tqdm                 4.32.2\n Tubes                0.2.0\n Twisted              19.2.1\n typing               3.6.6\n typing-extensions    3.7.4\n Werkzeug             0.15.5\n wheel                0.33.1\n wincertstore         0.2\n wrapt                1.11.2\n yappi                0.98\n zope.interface       4.6.0\n </denchmark-code>\n \n If i run pip uninstall onnx-runtime-gpu and pip install onnx-runtime:\n <denchmark-code>Input: tensor([[-0.3735,  0.4288, -0.1181],\n         [-0.8469, -0.0080,  0.3052]])\n Output: -0.8469265103340149\n Output shape: ()\n </denchmark-code>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "mgkeeley", "commentT": "2019-10-25T23:43:01Z", "comment_text": "\n \t\tCan you try building from master ? I think it is probably fixed in master since I don't see it reproing. I can try your script meanwhile.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "mgkeeley", "commentT": "2019-10-26T03:05:09Z", "comment_text": "\n \t\tOK, after a bit of struggle I compiled the onnxruntime from the master branch.\n I then created a C# project that used the built assemblies, and found the same issue.\n When running with the default sessions, there is actually an error as the C# runtime doesn't seem to like 0-dimension outputs, but changing the settings to SessionOptions.MakeSessionOptionWithCudaProvider() then the output is the same as the input.\n Maybe it is a problem parsing the onnx file correctly?\n <denchmark-link:https://github.com/microsoft/onnxruntime/files/3774386/ReduceTest.zip>ReduceTest.zip</denchmark-link>\n \n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "mgkeeley", "commentT": "2019-10-26T04:19:49Z", "comment_text": "\n \t\tThanks for your reply. C# might have that limitation, yes. It doesn't allow creating scalars (0 dim outputs). We will address that in the near future. Python, c/c++ can handle them.\n Let me try reproing with your attached model.\n By any chance, did you take a look at any test added via <denchmark-link:https://github.com/microsoft/onnxruntime/pull/2268>#2268</denchmark-link>\n  ? Is it along the lines of your expectation ? Just making sure there is no gap in expectation.\n Thanks !\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "mgkeeley", "commentT": "2019-10-26T07:43:54Z", "comment_text": "\n \t\tYes, I had a look, the new tests seem to be what I would expect to be happening from the onnx file dump i.e.\n %minimum = ReduceMin[keepdims = 0](%input)\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "mgkeeley", "commentT": "2019-10-28T18:09:44Z", "comment_text": "\n \t\tI took a look at the model - It looks alright. Strange. Let me investigate further...\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "mgkeeley", "commentT": "2019-10-28T20:15:19Z", "comment_text": "\n \t\tYou are right - when I tried running your model after building from master, I got the input back as an output (almost like passing it through an Identity node). This looks like a bug somewhere. I have a feeling this is a corner case failure (input rank < 3). I know that there is some special casing of this case based on this comment -\n \n \n \n onnxruntime/onnxruntime/core/providers/cuda/reduction/reduction_ops.cc\n \n \n          Line 107\n       in\n       90858b7\n \n \n \n \n \n \n  // CUDNN requires at least 3D input, so pad 1s if needed \n \n \n \n \n \n That would explain why the new tests pass and this model doesn't work as expected. I ll dig into this. Thanks for bringing this up.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "mgkeeley", "commentT": "2019-10-28T23:33:16Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/microsoft/onnxruntime/files/3781036/min4d.zip>min4d.zip</denchmark-link>\n \n Thanks, I'm not so sure about the 3d being a bug, I see the same with e.g. a 4D tensor (see attached model).\n It's almost like it is doing Min instead of ReduceMin; but as there is only one tensor, the element-wise minimum of the elements just returns the same values as the input.\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "mgkeeley", "commentT": "2019-10-29T01:17:21Z", "comment_text": "\n \t\tI see, thanks for the update. I took a look - I haven't been able to zero-in on the cause yet. There is nothing obvious that jumps out as being wrong and given that it passes similar unit tests, this will require some more investigation as to why it breaks this single node model. I will keep you updated.\n \t\t"}, "comments_11": {"comment_id": 12, "comment_author": "mgkeeley", "commentT": "2019-10-30T19:06:13Z", "comment_text": "\n \t\tFound the issue and fixed via <denchmark-link:https://github.com/microsoft/onnxruntime/pull/2268>#2268</denchmark-link>\n \n \t\t"}, "comments_12": {"comment_id": 13, "comment_author": "mgkeeley", "commentT": "2019-10-30T20:34:25Z", "comment_text": "\n \t\tBuilt a Py wheel and made sure the output is correct using your sample model. Thanks for bringing this to our attention.\n \t\t"}}}, "commit": {"commit_id": "4bcd8bfca1eaa791970caaa18c719bb31a8d0627", "commit_author": "Hariharan Seshadri", "commitT": "2019-10-31 10:11:59-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "onnxruntime\\core\\providers\\cuda\\reduction\\reduction_ops.cc", "file_new_name": "onnxruntime\\core\\providers\\cuda\\reduction\\reduction_ops.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "78,92,104,106,107,108,113,114,115", "deleted_lines": "103", "method_info": {"method_name": "onnxruntime::cuda::ReduceKernel<allow_multi_axes>::ComputeImpl", "method_params": "ctx,cudnnReduceOp", "method_startline": "60", "method_endline": "274"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 14, "file_old_name": "onnxruntime\\test\\providers\\cpu\\reduction\\reduction_ops_test.cc", "file_new_name": "onnxruntime\\test\\providers\\cpu\\reduction\\reduction_ops_test.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "560,561,562,563,564,565,566,567,568,569,570,571,572,573,574", "deleted_lines": null, "method_info": {"method_name": "onnxruntime::test::TEST", "method_params": "ReductionOpTest,ReduceMean_default_axes_do_not_keep_dims", "method_startline": "560", "method_endline": "574"}}, "hunk_1": {"Ismethod": 1, "added_lines": "80", "deleted_lines": "80", "method_info": {"method_name": "onnxruntime::test::TEST", "method_params": "ReductionOpTest,ReduceL1_do_not_keepdims", "method_startline": "80", "method_endline": "95"}}, "hunk_2": {"Ismethod": 1, "added_lines": "323,324,325,326,327,328,329,330,331,332,333,334,335,336,337", "deleted_lines": null, "method_info": {"method_name": "onnxruntime::test::TEST", "method_params": "ReductionOpTest,ReduceLogSumExp_default_axes_do_not_keep_dims", "method_startline": "323", "method_endline": "337"}}, "hunk_3": {"Ismethod": 1, "added_lines": "1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102", "deleted_lines": null, "method_info": {"method_name": "onnxruntime::test::onnxruntime::test::TEST.TEST", "method_params": "ReductionOpTest,ReduceProd_default_axes_do_not_keep_dims", "method_startline": "1088", "method_endline": "1102"}}, "hunk_4": {"Ismethod": 1, "added_lines": "1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027", "deleted_lines": null, "method_info": {"method_name": "onnxruntime::test::onnxruntime::test::TEST.TEST", "method_params": "ReductionOpTest,ReduceSumSquare_default_axes_do_not_keep_dims", "method_startline": "1013", "method_endline": "1027"}}, "hunk_5": {"Ismethod": 1, "added_lines": "80", "deleted_lines": "80", "method_info": {"method_name": "onnxruntime::test::TEST", "method_params": "ReductionOpTest,ReduceL1_do_not_keep_dims", "method_startline": "80", "method_endline": "95"}}, "hunk_6": {"Ismethod": 1, "added_lines": "172,173,174,175,176,177,178,179,180,181,182,183,184,185,186", "deleted_lines": null, "method_info": {"method_name": "onnxruntime::test::TEST", "method_params": "ReductionOpTest,ReduceL2_default_axes_do_not_keep_dims", "method_startline": "172", "method_endline": "186"}}, "hunk_7": {"Ismethod": 1, "added_lines": "892,893,894,895,896,897,898,899,900,901,902,903,904,905,906", "deleted_lines": null, "method_info": {"method_name": "onnxruntime::test::TEST", "method_params": "ReductionOpTest,ReduceSum_default_axes_do_not_keep_dims", "method_startline": "892", "method_endline": "906"}}, "hunk_8": {"Ismethod": 1, "added_lines": "97", "deleted_lines": "97", "method_info": {"method_name": "onnxruntime::test::TEST", "method_params": "ReductionOpTest,ReduceL1_do_not_keep_dims_2", "method_startline": "97", "method_endline": "105"}}, "hunk_9": {"Ismethod": 1, "added_lines": "97", "deleted_lines": "97", "method_info": {"method_name": "onnxruntime::test::TEST", "method_params": "ReductionOpTest,ReduceL1_do_not_keepdims_2", "method_startline": "97", "method_endline": "105"}}, "hunk_10": {"Ismethod": 1, "added_lines": "433,434,435,436,437,438,439,440,441,442,443,444,445,446,447", "deleted_lines": null, "method_info": {"method_name": "onnxruntime::test::TEST", "method_params": "ReductionOpTest,ReduceMax_default_axes_do_not_keep_dims", "method_startline": "433", "method_endline": "447"}}, "hunk_11": {"Ismethod": 1, "added_lines": "1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103", "deleted_lines": null, "method_info": {"method_name": "onnxruntime::test::TEST", "method_params": "ReductionOpTest,ReduceSumSquare_double", "method_startline": "963", "method_endline": "1410"}}, "hunk_12": {"Ismethod": 1, "added_lines": "670,671,672,673,674,675,676,677,678,679,680,681,682,683,684", "deleted_lines": null, "method_info": {"method_name": "onnxruntime::test::TEST", "method_params": "ReductionOpTest,ReduceMin_default_axes_do_not_keep_dims", "method_startline": "670", "method_endline": "684"}}, "hunk_13": {"Ismethod": 1, "added_lines": "686,687,688,689,690,691,692,693,694", "deleted_lines": null, "method_info": {"method_name": "onnxruntime::test::TEST", "method_params": "ReductionOpTest,ReduceMin_default_axes_do_not_keep_dims_2D", "method_startline": "686", "method_endline": "694"}}}}}}}