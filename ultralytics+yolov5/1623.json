{"BR": {"BR_id": "1623", "BR_author": "mfruhner", "BRopenT": "2020-12-07T10:20:44Z", "BRcloseT": "2020-12-09T02:44:14Z", "BR_text": {"BRsummary": "train_batch.jpg labels missing", "BRdescription": "\n <denchmark-h:h2>\ud83d\udc1b Bug</denchmark-h>\n \n Hello, on my custom dataset I noticed some missing labels in random images in train_batch*.jpg images. I then tried it out with coco128 and i noticed the same behaviour. Most labels are correct, but some are just missing. It always appears to be a complete mosaic (or rect for --rect) without labels inside a batch. See the following images with the cake and the dog/elephant:\n <denchmark-link:https://user-images.githubusercontent.com/25232372/101338771-babdcb00-387d-11eb-9c1e-2d22780e3749.png></denchmark-link>\n \n <denchmark-link:https://user-images.githubusercontent.com/25232372/101338806-c4dfc980-387d-11eb-89dd-2c7c9c6ff328.png></denchmark-link>\n \n <denchmark-h:h2>To Reproduce (REQUIRED)</denchmark-h>\n \n Download latest docker image.\n Run:\n python train.py --img 640 --batch 16 --epochs 1 --data coco128.yaml --weights yolov5s.pt --nosave --cache\n Output:\n Some images are missing their labels.\n The questions is also, if it is just a rendering bug, or if the missing labels are contributing to the training processing, resulting in inferior results.\n <denchmark-h:h2>Expected behavior</denchmark-h>\n \n All images have their correct bounding boxes\n <denchmark-h:h2>Environment</denchmark-h>\n \n If applicable, add screenshots to help explain your problem.\n \n OS: Ubuntu, Docker Image\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "mfruhner", "commentT": "2020-12-07T10:21:28Z", "comment_text": "\n \t\tHello <denchmark-link:https://github.com/mfruhner>@mfruhner</denchmark-link>\n , thank you for your interest in  YOLOv5! Please visit our  <denchmark-link:https://github.com/ultralytics/yolov5/wiki#tutorials>Tutorials</denchmark-link>\n  to get started, where you can find quickstart guides for simple tasks like <denchmark-link:https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data>Custom Data Training</denchmark-link>\n  all the way to advanced concepts like <denchmark-link:https://github.com/ultralytics/yolov5/issues/607>Hyperparameter Evolution</denchmark-link>\n .\n If this is a \ud83d\udc1b Bug Report, please provide screenshots and minimum viable code to reproduce your issue, otherwise we can not help you.\n If this is a custom training  Question, please provide as much information as possible, including dataset images, training logs, screenshots, and a public link to online <denchmark-link:https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data#visualize>W&B logging</denchmark-link>\n  if available.\n For business inquiries or professional support requests please visit <denchmark-link:https://www.ultralytics.com>https://www.ultralytics.com</denchmark-link>\n  or email Glenn Jocher at <denchmark-link:mailto:glenn.jocher@ultralytics.com>glenn.jocher@ultralytics.com</denchmark-link>\n .\n <denchmark-h:h2>Requirements</denchmark-h>\n \n Python 3.8 or later with all <denchmark-link:https://github.com/ultralytics/yolov5/blob/master/requirements.txt>requirements.txt</denchmark-link>\n  dependencies installed, including . To install run:\n $ pip install -r requirements.txt\n <denchmark-h:h2>Environments</denchmark-h>\n \n YOLOv5 may be run in any of the following up-to-date verified environments (with all dependencies including <denchmark-link:https://developer.nvidia.com/cuda>CUDA</denchmark-link>\n /<denchmark-link:https://developer.nvidia.com/cudnn>CUDNN</denchmark-link>\n , <denchmark-link:https://www.python.org/>Python</denchmark-link>\n  and <denchmark-link:https://pytorch.org/>PyTorch</denchmark-link>\n  preinstalled):\n \n Google Colab Notebook with free GPU: \n Kaggle Notebook with free GPU: https://www.kaggle.com/ultralytics/yolov5\n Google Cloud Deep Learning VM. See GCP Quickstart Guide\n Docker Image https://hub.docker.com/r/ultralytics/yolov5. See Docker Quickstart Guide \n \n <denchmark-h:h2>Status</denchmark-h>\n \n <denchmark-link:https://github.com/ultralytics/yolov5/workflows/CI%20CPU%20testing/badge.svg></denchmark-link>\n \n If this badge is green, all <denchmark-link:https://github.com/ultralytics/yolov5/actions>YOLOv5 GitHub Actions</denchmark-link>\n  Continuous Integration (CI) tests are currently passing. CI tests verify correct operation of YOLOv5 training (<denchmark-link:https://github.com/ultralytics/yolov5/blob/master/train.py>train.py</denchmark-link>\n ), testing (<denchmark-link:https://github.com/ultralytics/yolov5/blob/master/test.py>test.py</denchmark-link>\n ), inference (<denchmark-link:https://github.com/ultralytics/yolov5/blob/master/detect.py>detect.py</denchmark-link>\n ) and export (<denchmark-link:https://github.com/ultralytics/yolov5/blob/master/models/export.py>export.py</denchmark-link>\n ) on MacOS, Windows, and Ubuntu every 24 hours and on every commit.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "mfruhner", "commentT": "2020-12-08T15:01:36Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mfruhner>@mfruhner</denchmark-link>\n  thanks for the bug report! I'd noticed the same behavior recently. The mosaic plotting function has undergone several recent updates, so it may be a bug there, perhaps related to de-normalization of the labels. I will add a TODO here for us to try to reproduce and find a fix.\n In any case, this is almost certainly a plotting-related issue, as it only appeared within the last several weeks, and the COCO128 labels have never changed.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "mfruhner", "commentT": "2020-12-08T15:01:56Z", "comment_text": "\n \t\tTODO: reproduce and fix mosaic plotting bug.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "mfruhner", "commentT": "2020-12-09T02:25:12Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mfruhner>@mfruhner</denchmark-link>\n  I can reproduce this issue in a Colab notebook by running your command after running the setup cell. I can see in train_batch2.jpg specifically an image for which many objects have labels, like train, refrigerator, that are not being plotted properly. I will try to figure out why this is happening.\n <denchmark-link:https://user-images.githubusercontent.com/26833433/101565743-8a138980-3982-11eb-9186-713cc47d4d96.jpg></denchmark-link>\n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "mfruhner", "commentT": "2020-12-09T02:34:43Z", "comment_text": "\n \t\tOk I think I see the problem. A check is made to determine if the labels are in normalized coordinates before scaling them up to pixels. The check is failing sometimes due to numerical precision issues it seems:\n True 1.0\n True 1.0\n True 1.0\n True 1.0\n True 1.0\n True 1.0\n True 1.0\n True 1.0\n True 1.0\n True 1.0\n True 1.0\n True 1.0\n False 1.0000001\n True 1.0\n True 1.0\n I think the solution is to introduce an eps term to account for precision issues, perhaps with a default value of eps=0.01.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "mfruhner", "commentT": "2020-12-09T02:35:38Z", "comment_text": "\n \t\tAlso I should add, that comically the result is that all the boxes are indeed plotted all of the time, but the 'missing' boxes are simply plotted entirely inside the 0,0 pixel.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "mfruhner", "commentT": "2020-12-09T02:43:46Z", "comment_text": "\n \t\tProblem appears solved now in PR branch:\n <denchmark-link:https://user-images.githubusercontent.com/26833433/101567183-36566f80-3985-11eb-9740-52397c0f3524.jpg></denchmark-link>\n \n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "mfruhner", "commentT": "2020-12-09T02:44:59Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mfruhner>@mfruhner</denchmark-link>\n  problem should be resolved now after PR <denchmark-link:https://github.com/ultralytics/yolov5/pull/1647>#1647</denchmark-link>\n . Thank you for your contributions, and please let us know if you spot any other problems or areas for improvement!\n \t\t"}}}, "commit": {"commit_id": "84f9bb5d92dd8ae453df3c712d2092344d29ad90", "commit_author": "Glenn Jocher", "commitT": "2020-12-08 18:44:13-08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "utils\\plots.py", "file_new_name": "utils\\plots.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "144", "deleted_lines": "144", "method_info": {"method_name": "plot_images", "method_params": "images,targets,paths,fname,names,max_size,max_subplots", "method_startline": "98", "method_endline": "174"}}}}}}}