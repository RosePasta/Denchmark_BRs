{"BR": {"BR_id": "831", "BR_author": "jinfagang", "BRopenT": "2020-08-24T09:09:46Z", "BRcloseT": "2020-09-30T00:41:36Z", "BR_text": {"BRsummary": "RuntimeError: Exporting the operator hardswish to ONNX opset version 11 is not supported. Please open a bug to request ONNX export support for the missing operator.", "BRdescription": "\n Hardswish changed into exportable way:\n <denchmark-code>class Hardswish(nn.Module):  # alternative to nn.Hardswish() for export\n     @staticmethod\n     def forward(x):\n         # return x * F.hardsigmoid(x)\n         return x * F.hardtanh(x + 3, 0., 6.) / 6.\n </denchmark-code>\n \n still occured this error. ( i have changed conv in common.py)\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "jinfagang", "commentT": "2020-08-25T03:07:36Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/jinfagang>@jinfagang</denchmark-link>\n  hey there. I've been experimenting with export recently. This custom Hardswish() class provides alternatives to the pytorch nn.Hardswish() class.\n The first line is best for CoreML export, the second is best for ONNX export. But in both cases you need to replace existing nn.Hardswish() with this custom version with something like this:\n     import models\n     import utils\n \n     # Update model\n     for k, m in model.named_modules():\n         m._non_persistent_buffers_set = set()  # pytorch 1.6.0 compatability\n         if isinstance(m, models.common.Conv):\n            m.act = utils.activations.Hardswish()  # assign activation\n If you are training a model from scratch however (intended for export), I would recommend simply using nn.LeakyReLU(0.1) here to avoid all this hassle:\n \n \n \n yolov5/models/common.py\n \n \n         Lines 20 to 27\n       in\n       a8751e5\n \n \n \n \n \n \n  class Conv(nn.Module): \n \n \n \n  # Standard convolution \n \n \n \n  def __init__(self, c1, c2, k=1, s=1, p=None, g=1, act=True):  # ch_in, ch_out, kernel, stride, padding, groups \n \n \n \n  super(Conv, self).__init__() \n \n \n \n  self.conv = nn.Conv2d(c1, c2, k, s, autopad(k, p), groups=g, bias=False) \n \n \n \n  self.bn = nn.BatchNorm2d(c2) \n \n \n \n  self.act = nn.Hardswish() if act else nn.Identity() \n \n \n \n  \n \n \n \n \n \n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "jinfagang", "commentT": "2020-08-25T03:19:17Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/glenn-jocher>@glenn-jocher</denchmark-link>\n   I got a more better performance with v3.0 architecture, I not sure it's benifit from new activation or new FPN connection behaviour, I am training a new model with custom Hardswish, can it able to export in this way?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "jinfagang", "commentT": "2020-08-25T03:55:59Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/jinfagang>@jinfagang</denchmark-link>\n  yes, you can definitely export a v3.0 model this way, including all Hardswish activations. This exports correctly to all 3 (torchscript, onnx and coreml). I'm thinking of updating export.py to handle this automatically BTW, I might to that today to fully address this.\n I should warn you though some export destinations are not hardswish optimized, since it's very new. PyTorch speed is unaffected, but CoreML speeds are much slower for now, until Apple does the work on their side to optimize these ops.\n BTW, export.py has been updated now for automatic model fusion at the beginning, see <denchmark-link:https://github.com/ultralytics/yolov5/issues/827>#827</denchmark-link>\n . Previously I only had this working for ONNX, but now its also applied to torchscript and CoreML. This should result in a significant layer count reduction in exported models.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "jinfagang", "commentT": "2020-08-25T03:57:35Z", "comment_text": "\n \t\tTODO: Automatic nn.Hardswish() replacement with utils.activations.Hardswish() for v3.0 exports.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "jinfagang", "commentT": "2020-08-25T04:53:42Z", "comment_text": "\n \t\tCommit <denchmark-link:https://github.com/ultralytics/yolov5/commit/4d7f222f73ef9ab06df45ddc5f363d24aff4570f>4d7f222</denchmark-link>\n  updates export.py for full v3.0 hardswish compatibility. Please git pull and try again, and let me know if you run into any more problems.\n Current v3.0 export command:\n $ export PYTHONPATH=\"$PWD\" && python models/export.py --weights ./yolov5s.pt --img 640 --batch 1\n Output:\n Namespace(batch_size=1, img_size=[640, 640], weights='./yolov5s.pt')\n Downloading https://github.com/ultralytics/yolov5/releases/download/v3.0/yolov5s.pt to ./yolov5s.pt...\n \n Fusing layers... \n Model Summary: 140 layers, 7.45958e+06 parameters, 6.61683e+06 gradients, 17.5 GFLOPS\n \n Starting TorchScript export with torch 1.6.0...\n ...\n TorchScript export success, saved as ./yolov5s.torchscript.pt\n \n Starting ONNX export with onnx 1.7.0...\n ONNX export success, saved as ./yolov5s.onnx\n \n Starting CoreML export with coremltools 4.0b3...\n Running MIL optimization passes: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:00<00:00, 16.12 passes/s]\n ...\n Translating MIL ==> MLModel Ops: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1077/1077 [00:00<00:00, 1092.24 ops/s]\n CoreML export success, saved as ./yolov5s.mlmodel\n \n Export complete. Visualize with https://github.com/lutzroeder/netron.\n \n Process finished with exit code 0\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "jinfagang", "commentT": "2020-08-25T05:00:39Z", "comment_text": "\n \t\tUpdate: <denchmark-link:https://github.com/ultralytics/yolov5/commit/4fb8cb353f7d1945e3e1b270980c883c82297d2f>4fb8cb3</denchmark-link>\n  adds backwards compatibility and robustness for earlier (or custom) models with alternate activation strategies.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "jinfagang", "commentT": "2020-09-25T00:41:00Z", "comment_text": "\n \t\tThis issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n \t\t"}}}, "commit": {"commit_id": "4fb8cb353f7d1945e3e1b270980c883c82297d2f", "commit_author": "Glenn Jocher", "commitT": "2020-08-24 21:59:26-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "models\\export.py", "file_new_name": "models\\export.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "10,36", "deleted_lines": "35"}}}}}}