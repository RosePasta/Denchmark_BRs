{"BR": {"BR_id": "1528", "BR_author": "elmeriz", "BRopenT": "2020-11-26T17:11:54Z", "BRcloseT": "2020-11-26T17:33:29Z", "BR_text": {"BRsummary": "Scaled box coordinates when computing loss in test.py", "BRdescription": "\n compute_loss() in test.py uses box coordinates that are scaled to image size. This results in zero cls/box losses.\n In train.py, loss is computed with normalized coordinates which works as expected.\n In test.py (line 103):\n <denchmark-code>    targets = targets.to(device)\n     nb, _, height, width = img.shape  # batch size, channels, height, width\n     targets[:, 2:] *= torch.Tensor([width, height, width, height]).to(device)\n \n     with torch.no_grad():\n         # Run model\n         t = time_synchronized()\n         inf_out, train_out = model(img, augment=augment)  # inference and training outputs\n         t0 += time_synchronized() - t\n \n         # Compute loss\n         if training:\n             loss += compute_loss([x.float() for x in train_out], targets, model)[1][:3]  # box, obj, cls\n     ...\n </denchmark-code>\n \n Simple fix is to just scale the coordinates after computing loss:\n <denchmark-code>    targets = targets.to(device)\n     nb, _, height, width = img.shape  # batch size, channels, height, width\n \n     with torch.no_grad():\n         # Run model\n         t = time_synchronized()\n         inf_out, train_out = model(img, augment=augment)  # inference and training outputs\n         t0 += time_synchronized() - t\n \n         # Compute loss\n         if training:\n             loss += compute_loss([x.float() for x in train_out], targets, model)[1][:3]  # box, obj, cls\n \n         targets[:, 2:] *= torch.Tensor([width, height, width, height]).to(device)\n     ...\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "elmeriz", "commentT": "2020-11-26T17:12:40Z", "comment_text": "\n \t\tHello <denchmark-link:https://github.com/elmeriz>@elmeriz</denchmark-link>\n , thank you for your interest in  YOLOv5! Please visit our  <denchmark-link:https://github.com/ultralytics/yolov5/wiki#tutorials>Tutorials</denchmark-link>\n  to get started, where you can find quickstart guides for simple tasks like <denchmark-link:https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data>Custom Data Training</denchmark-link>\n  all the way to advanced concepts like <denchmark-link:https://github.com/ultralytics/yolov5/issues/607>Hyperparameter Evolution</denchmark-link>\n .\n If this is a \ud83d\udc1b Bug Report, please provide screenshots and minimum viable code to reproduce your issue, otherwise we can not help you.\n If this is a custom training  Question, please provide as much information as possible, including dataset images, training logs, screenshots, and a public link to online <denchmark-link:https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data#visualize>W&B logging</denchmark-link>\n  if available.\n For business inquiries or professional support requests please visit <denchmark-link:https://www.ultralytics.com>https://www.ultralytics.com</denchmark-link>\n  or email Glenn Jocher at <denchmark-link:mailto:glenn.jocher@ultralytics.com>glenn.jocher@ultralytics.com</denchmark-link>\n .\n <denchmark-h:h2>Requirements</denchmark-h>\n \n Python 3.8 or later with all <denchmark-link:https://github.com/ultralytics/yolov5/blob/master/requirements.txt>requirements.txt</denchmark-link>\n  dependencies installed, including . To install run:\n $ pip install -r requirements.txt\n <denchmark-h:h2>Environments</denchmark-h>\n \n YOLOv5 may be run in any of the following up-to-date verified environments (with all dependencies including <denchmark-link:https://developer.nvidia.com/cuda>CUDA</denchmark-link>\n /<denchmark-link:https://developer.nvidia.com/cudnn>CUDNN</denchmark-link>\n , <denchmark-link:https://www.python.org/>Python</denchmark-link>\n  and <denchmark-link:https://pytorch.org/>PyTorch</denchmark-link>\n  preinstalled):\n \n Google Colab Notebook with free GPU: \n Kaggle Notebook with free GPU: https://www.kaggle.com/ultralytics/yolov5\n Google Cloud Deep Learning VM. See GCP Quickstart Guide\n Docker Image https://hub.docker.com/r/ultralytics/yolov5. See Docker Quickstart Guide \n \n <denchmark-h:h2>Status</denchmark-h>\n \n <denchmark-link:https://github.com/ultralytics/yolov5/workflows/CI%20CPU%20testing/badge.svg></denchmark-link>\n \n If this badge is green, all <denchmark-link:https://github.com/ultralytics/yolov5/actions>YOLOv5 GitHub Actions</denchmark-link>\n  Continuous Integration (CI) tests are currently passing. CI tests verify correct operation of YOLOv5 training (<denchmark-link:https://github.com/ultralytics/yolov5/blob/master/train.py>train.py</denchmark-link>\n ), testing (<denchmark-link:https://github.com/ultralytics/yolov5/blob/master/test.py>test.py</denchmark-link>\n ), inference (<denchmark-link:https://github.com/ultralytics/yolov5/blob/master/detect.py>detect.py</denchmark-link>\n ) and export (<denchmark-link:https://github.com/ultralytics/yolov5/blob/master/models/export.py>export.py</denchmark-link>\n ) on MacOS, Windows, and Ubuntu every 24 hours and on every commit.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "elmeriz", "commentT": "2020-11-26T17:20:15Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/elmeriz>@elmeriz</denchmark-link>\n  ah, thanks for the bug report! This seems like an easy fix, I like your suggestion.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "elmeriz", "commentT": "2020-11-26T17:34:42Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/elmeriz>@elmeriz</denchmark-link>\n  your proposed fix has been implemented and merged in PR <denchmark-link:https://github.com/ultralytics/yolov5/pull/1529>#1529</denchmark-link>\n . Please git pull to receive this update and let us know if you have any other problems.\n Thank you for your contributions, and also feel free to submit PRs for any other fixes and updates you find!\n \t\t"}}}, "commit": {"commit_id": "0f2057ed336c86bff2ebb5e0fbf5da08ab78d204", "commit_author": "Glenn Jocher", "commitT": "2020-11-26 18:33:28+01:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "test.py", "file_new_name": "test.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "18,117,119,327,328,332", "deleted_lines": "18,105,118,327,331"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "utils\\plots.py", "file_new_name": "utils\\plots.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "227", "deleted_lines": "227", "method_info": {"method_name": "plot_study_txt", "method_params": "f,x", "method_startline": "221", "method_endline": "250"}}, "hunk_1": {"Ismethod": 1, "added_lines": "143", "deleted_lines": "143", "method_info": {"method_name": "plot_images", "method_params": "images,targets,paths,fname,names,max_size,max_subplots", "method_startline": "98", "method_endline": "171"}}, "hunk_2": {"Ismethod": 1, "added_lines": "371", "deleted_lines": "371", "method_info": {"method_name": "plot_results", "method_params": "start,stop,bucket,id", "method_startline": "346", "method_endline": "380"}}}}}}}