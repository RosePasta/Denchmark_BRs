{"BR": {"BR_id": "18906", "BR_author": "diablodale", "BRopenT": "2020-11-24T01:05:12Z", "BRcloseT": "2020-11-25T09:26:45Z", "BR_text": {"BRsummary": "ocl::Context::create(string) reference count wrong when reusing contexts", "BRdescription": "\n <denchmark-h:h5>System information (version)</denchmark-h>\n \n \n OpenCV => 4.5.0 and master\n Operating System / Platform => Microsoft Windows [Version 10.0.19042.630]\n Compiler => VS Community 2019 v16.8.2\n \n <denchmark-h:h5>Detailed description</denchmark-h>\n \n The reference count impl->addref() is missing in the supporting functions called by ocl::Context::create(string). PR including two test cases incoming.\n \n \n \n opencv/modules/core/src/ocl.cpp\n \n \n         Lines 2437 to 2441\n       in\n       0105f8f\n \n \n \n \n \n \n  if (impl) \n \n \n \n  { \n \n \n \n  CV_LOG_INFO(NULL, \"OpenCL: reuse context@\" << impl->contextId << \" for configuration: \" << configuration) \n \n \n \n  return impl; \n \n \n \n  } \n \n \n \n \n \n This was discovered as I was creating/binding the same GPU across multiple threads. I saw that the entries in the Context::Impl::getGlobalContainer() entries were being released before they should. And, a later ocl::Context::create(string) with the same string config would create a new context rather than reusing the existing one.\n Code review also exposes the missing impl->addref() by comparing the three sibling findOrCreateContext().\n And in a Debug build, the log to the console will show creation of new context rather than reuse.\n <denchmark-h:h5>Steps to reproduce</denchmark-h>\n \n See test cases in PR. Or write your own via...\n \n Save current OpenCLExecutionContext\n Create three empty void* variables: p1, p2, p3\n Open a scope\n Create a new Context via a configuration string\n Create a OpenCLExecutionContext with that Context and the first device\n bind() that OpenCLExecutionContext\n Save handle within the Context via context.ptr() to the p1 variable\n End that scope\n Create a new scope\n Create a new Context via the same configuration string.\n Save handle within the Context via context.ptr() to the p2 variable\n End that 2nd scope. Note...due to this issue, the ref count of the Context stored in the getGlobalContainer() will go to zero and be deallocated/released.\n Create a new scope\n Create a new Context via the same configuration string. Due to this issue, and since the Context was prematurely released, a brand new Context will be created and inserted into the getGlobalContainer().\n Save handle within the Context via context.ptr() to the p3 variable\n End that 3rd scope\n Compare the values of all three void* variables\n \n <denchmark-h:h5>Result</denchmark-h>\n \n p1 == p2 This is expected.\n p2 != p3 This is errant\n <denchmark-h:h5>Expected</denchmark-h>\n \n All three void* variables to contain the same memory address.\n <denchmark-h:h5>Notes</denchmark-h>\n \n The PR includes two new test cases\n \n Expose this issue and verify its fix\n Verify the reverse behavior and that the correct number of release() are called and the getGlobalContainer() entry cleared\n \n <denchmark-h:h5>Issue submission checklist</denchmark-h>\n \n \n  I report the issue, it's not a question\n  I checked the problem with documentation, FAQ, open issues,\n answers.opencv.org, Stack Overflow, etc and have not found solution\n  I updated to latest OpenCV version and the issue is still there\n  There is reproducer code and related data files: videos, images, onnx, etc\n \n \t"}, "comments": {}}, "commit": {"commit_id": "c08e38acd017f6c73a1657e5e12b1609d3a80334", "commit_author": "Dale Phurrough", "commitT": "2020-11-25 01:53:41+01:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\core\\src\\ocl.cpp", "file_new_name": "modules\\core\\src\\ocl.cpp", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "2440", "deleted_lines": null, "method_info": {"method_name": "cv::ocl::Context::Impl::findOrCreateContext", "method_params": "configuration_", "method_startline": "2426", "method_endline": "2462"}}}}}}}