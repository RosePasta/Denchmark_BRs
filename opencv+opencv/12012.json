{"BR": {"BR_id": "12012", "BR_author": "qenops", "BRopenT": "2018-07-19T01:55:56Z", "BRcloseT": "2018-10-10T08:56:38Z", "BR_text": {"BRsummary": "Python stereoCalibrate fails assertion when adding CALIB_USE_EXTRINSIC_GUESS flag", "BRdescription": "\n <denchmark-h:h5>System information (version)</denchmark-h>\n \n \n OpenCV => 3.4.2\n Operating System / Platform => Raspbian Stretch\n Python => 3.5.3\n \n <denchmark-h:h5>Detailed description</denchmark-h>\n \n When adding the CALIB_USE_EXTRINSIC_GUESS flag, stereoCalibrate will fail the CV_IS_MAT tests. When calling the same method without that flag, and with same arguments it completes without issue. Also calling stereoCalibrateExtended works both with and without the USE_EXTRINISC_GUESS flag.\n Not sure if this is related to <denchmark-link:https://github.com/opencv/opencv/issues/11085>#11085</denchmark-link>\n \n <denchmark-h:h5>Steps to reproduce</denchmark-h>\n \n flags = cv2.CALIB_FIX_INTRINSIC\n ret, mtx1, dist1, mtx2, dist2, R, T, E, F = cv2.stereoCalibrate(objpoints, imgpointsA, imgpointsB, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, grayA.shape[::-1], R=R, T=T, flags=flags, **kws)\n flags += cv2.CALIB_USE_EXTRINSIC_GUESS\n ret, mtx1, dist1, mtx2, dist2, R, T, E, F = cv2.stereoCalibrate(objpoints, imgpointsA, imgpointsB, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, grayA.shape[::-1], R=R, T=T, flags=flags, **kws)\n Error output is:\n \n cv2.error: OpenCV(3.4.2) /home/pi/opencv-3.4.2/modules/calib3d/src/calibration.cpp:1781: error: (-215:Assertion failed) (((_imagePoints1) != __null && (((const CvMat*)(_imagePoints1))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_imagePoints1))->cols > 0 && ((const CvMat*)(_imagePoints1))->rows > 0) && ((const CvMat*)(_imagePoints1))->data.ptr != __null) && (((_imagePoints2) != __null && (((const CvMat*)(_imagePoints2))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_imagePoints2))->cols > 0 && ((const CvMat*)(_imagePoints2))->rows > 0) && ((const CvMat*)(_imagePoints2))->data.ptr != __null) && (((_objectPoints) != __null && (((const CvMat*)(_objectPoints))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_objectPoints))->cols > 0 && ((const CvMat*)(_objectPoints))->rows > 0) && ((const CvMat*)(_objectPoints))->data.ptr != __null) && (((_npoints) != __null && (((const CvMat*)(_npoints))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_npoints))->cols > 0 && ((const CvMat*)(_npoints))->rows > 0) && ((const CvMat*)(_npoints))->data.ptr != __null) && (((matR) != __null && (((const CvMat*)(matR))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(matR))->cols > 0 && ((const CvMat*)(matR))->rows > 0) && ((const CvMat*)(matR))->data.ptr != __null) && (((matT) !=__null && (((const CvMat*)(matT))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(matT))->cols > 0 && ((const CvMat*)(matT))->rows > 0) && ((const CvMat*)(matT))->data.ptr != __null) in function 'cvStereoCalibrateImpl'\n \n # This one does not fail\n flags = cv2.CALIB_FIX_INTRINSIC\n flags += cv2.CALIB_USE_EXTRINSIC_GUESS\n cv2.stereoCalibrateExtended(objpoints, imgpointsA, imgpointsB, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, grayA.shape[::-1], R, T, flags=flags)\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "qenops", "commentT": "2018-07-19T06:43:39Z", "comment_text": "\n \t\tPlease add dump (via Python print/pprint) of all passed matrices or at least their \"shape\".\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "qenops", "commentT": "2018-07-19T18:15:57Z", "comment_text": "\n \t\tHere is the data I'm using:\n objpoints = list of 9 ndarray of shape 54,3 with dtype np.float32\n imgpointsA = list of 9 ndarray of shape 54,1,2 with dtype np.float32\n imgpointsB = list of 9 ndarray of shape 54,1,2 with dtype np.float32\n cameraMatrix1 = np.array([[ 407.87383762,0.,322.49729584],[0.,407.96003123,247.6930031],[0.,0.,1.]],dtype=np.float64)\n distCoeffs1 = np.array([[ -4.16483960e-01],[  2.08322274e-01],[  2.77542975e-04],[ -5.90362926e-04],[ -5.70882963e-02]],dtype=np.float64)\n cameraMatrix2 = np.array([[ 387.06322646,0.,315.62728327],[0.,387.82902342,254.41221478],[0.,0.,1.]],dtype=np.float64)\n distCoeffs2 = np.array([[-0.40212671],[ 0.19521368],[ 0.00196181],[-0.00042008],[-0.05139762]],dtype=np.float64)\n imageSize = (640,480)\n R = np.array([[9.52021185e-01,-9.30718068e-03,3.05890567e-01],[8.74371643e-03,9.99956614e-01,3.21217358e-03],[ -3.05907192e-01,-3.83436919e-04,9.52061260e-01]],dtype=np.float64)\n T = np.array([[-63.78115762],[ -0.85865368],[ 16.71733832]],dtype=np.float64)\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "qenops", "commentT": "2018-07-24T13:31:38Z", "comment_text": "\n \t\tI've also encountered this issue. Using suggestion from <denchmark-link:https://github.com/qenops>@qenops</denchmark-link>\n , switched to stereoCalibrateExtended and it did work passing R and T.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "qenops", "commentT": "2018-07-24T19:05:27Z", "comment_text": "\n \t\tI added some dumpers for OpenCV's / function's parameters: <denchmark-link:https://github.com/opencv/opencv/pull/12054>#12054</denchmark-link>\n \n It would be nice to dump metadata of your arguments via these functions?\n Try to split <denchmark-link:https://github.com/opencv/opencv/blob/3.4.2/modules/calib3d/src/calibration.cpp#L1779-L1781>assertion line</denchmark-link>\n  (to get exact parameter name with problem):\n -     CV_Assert( CV_IS_MAT(_imagePoints1) && CV_IS_MAT(_imagePoints2) &&\n -               CV_IS_MAT(_objectPoints) && CV_IS_MAT(_npoints) &&\n -               CV_IS_MAT(matR) && CV_IS_MAT(matT) );\n +    CV_Assert(CV_IS_MAT(_imagePoints1));\n +    CV_Assert(CV_IS_MAT(_imagePoints2));\n +    CV_Assert(CV_IS_MAT(_objectPoints));\n +    CV_Assert(CV_IS_MAT(_npoints));\n +    CV_Assert(CV_IS_MAT(matR));\n +    CV_Assert(CV_IS_MAT(matT));\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "qenops", "commentT": "2018-08-03T00:55:06Z", "comment_text": "\n \t\tSorry it took a while to circle back to this.  It looks like matR is causing the problem:\n cv2.error: OpenCV(3.4.2) /home/pi/opencv-3.4.2/modules/calib3d/src/calibration.cpp:1783: error: (-215:Assertion failed) (((matR) != __null && (((const CvMat*)(matR))->type & 0xFFFF0000)== 0x42420000 && ((const CvMat*)(matR))->cols > 0 && ((const CvMat*)(matR))->rows > 0) && ((const CvMat*)(matR))->data.ptr != __null) in function 'cvStereoCalibrateImpl'\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "qenops", "commentT": "2018-08-03T01:02:28Z", "comment_text": "\n \t\tOutput of the new tests is:\n <denchmark-code>======================================================================\n FAIL: test_InputArray (test_misc.Arguments)\n ----------------------------------------------------------------------\n Traceback (most recent call last):\n   File \"/home/pi/opencv-3.4.2/modules/python/test/test_misc.py\", line 52, in test_InputArray\n     self.assertEqual(res1, \"InputArray: empty()=true kind=0x00010000 flags=0x01010000 total(-1)=0 dims(-1)=0 size(-1)=0x0 type(-1)=CV_8UC1\")\n AssertionError: 'Inpu[23 chars]nd=0x100200010000 flags=0x01010000 total(-1)=0[37 chars]8UC1' != 'Inpu[23 chars]nd=0x00010000 flags=0x01010000 total(-1)=0 dim[33 chars]8UC1'\n - InputArray: empty()=true kind=0x100200010000 flags=0x01010000 total(-1)=0 dims(-1)=0 size(-1)=0x0 type(-1)=CV_8UC1\n ?                                 ----\n + InputArray: empty()=true kind=0x00010000 flags=0x01010000 total(-1)=0 dims(-1)=0 size(-1)=0x0 type(-1)=CV_8UC1\n \n \n ======================================================================\n FAIL: test_InputArrayOfArrays (test_misc.Arguments)\n ----------------------------------------------------------------------\n Traceback (most recent call last):\n   File \"/home/pi/opencv-3.4.2/modules/python/test/test_misc.py\", line 70, in test_InputArrayOfArrays\n     self.assertEqual(res1, \"InputArrayOfArrays: empty()=true kind=0x00050000 flags=0x01050000 total(-1)=0 dims(-1)=1 size(-1)=0x0\")\n AssertionError: 'Inpu[31 chars]nd=0x100200050000 flags=0x01050000 total(-1)=0[20 chars]=0x0' != 'Inpu[31 chars]nd=0x00050000 flags=0x01050000 total(-1)=0 dim[16 chars]=0x0'\n - InputArrayOfArrays: empty()=true kind=0x100200050000 flags=0x01050000 total(-1)=0 dims(-1)=1 size(-1)=0x0\n ?                                         ----\n + InputArrayOfArrays: empty()=true kind=0x00050000 flags=0x01050000 total(-1)=0 dims(-1)=1 size(-1)=0x0\n </denchmark-code>\n \n If I update the kind values in the unit test to 0x100200010000 and 0x100200050000, it passes all tests in the Arguments class.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "qenops", "commentT": "2018-08-03T21:09:12Z", "comment_text": "\n \t\tIt seems failed Python test is my mistake (invalid format: expects \"long long int\", passed \"int\" only - garbage is printed).\n Please add dump of these statements (right before stereoCalibrate call):\n \n print(cv.utils.dumpInputArray(R))\n print(cv.utils.dumpInputArray(cameraMatrix1))\n \n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "qenops", "commentT": "2018-08-03T21:27:41Z", "comment_text": "\n \t\t<denchmark-code>>>> print(cv2.utils.dumpInputArray(cam.R))\n InputArray: empty()=false kind=0x100200010000 flags=0x01010000 total(-1)=9 dims(-1)=2 size(-1)=3x3 type(-1)=CV_64FC1\n >>> print(cv2.utils.dumpInputArray(cam.lfMatrix))\n InputArray: empty()=false kind=0x100200010000 flags=0x189f35801010000 total(-1)=9 dims(-1)=2 size(-1)=3x3 type(-1)=CV_64FC1\n </denchmark-code>\n \n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "qenops", "commentT": "2018-08-03T22:44:48Z", "comment_text": "\n \t\t has <denchmark-link:https://github.com/opencv/opencv/blob/3.4.2/modules/calib3d/include/opencv2/calib3d.hpp#L1201-L1216>this declaration of R/T parameters</denchmark-link>\n :\n \n InputOutputArray R,InputOutputArray T\n \n stereoCalibrate has this:\n \n OutputArray R,OutputArray T\n \n There is no way to pass initial values of R/T into stereoCalibrate() call.\n So CALIB_USE_EXTRINSIC_GUESS can be used with stereoCalibrateExtended() only.\n Need to add check with more adequate error message.\n \t\t"}}}, "commit": {"commit_id": "0ffc186680753febc7b5b70688dd795f2b6ed518", "commit_author": "Apoorv Goel", "commitT": "2018-10-03 15:50:04+03:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "modules\\calib3d\\src\\calibration.cpp", "file_new_name": "modules\\calib3d\\src\\calibration.cpp", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "3543,3544,3545", "deleted_lines": null, "method_info": {"method_name": "cv::stereoCalibrate", "method_params": "_objectPoints,_imagePoints1,_imagePoints2,_cameraMatrix1,_distCoeffs1,_cameraMatrix2,_distCoeffs2,imageSize,_Rmat,_Tmat,_Emat,_Fmat,flags,criteria", "method_startline": "3534", "method_endline": "3553"}}}}}}}