{"BR": {"BR_id": "245", "BR_author": "gcp", "BRopenT": "2018-05-24T10:21:38Z", "BRcloseT": "2018-06-30T22:33:55Z", "BR_text": {"BRsummary": "test_batch_normalization is failing", "BRdescription": "\n gcc version 7.3.0\n various CPUs (Xeon(R) CPU E3-1240 v3, Ryzen 1700)\n Ubuntu 16.04\n No MKL\n Current git master (<denchmark-link:https://github.com/oneapi-src/oneDNN/commit/72236df2da36d2c73ce1c719c6e9fa04a2f6bdc7>72236df</denchmark-link>\n )\n Doing a simple cmake .. && make && make test produces a test failure:\n 22/37 Test <denchmark-link:https://github.com/oneapi-src/oneDNN/issues/22>#22</denchmark-link>\n : test_batch_normalization ......................***Failed   45.53 sec\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "gcp", "commentT": "2018-05-24T20:17:44Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/gcp>@gcp</denchmark-link>\n ,\n Could you please provide a little bit more information? Could you please dump the output of the test, so that we can at least see, what exactly fails. Please also set MKLDNN_VERBOSE environment variable to 2 to get a little bit more verbose info.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "gcp", "commentT": "2018-05-25T07:42:27Z", "comment_text": "\n \t\t<denchmark-link:https://sjeng.org/ftp/work/log.txt.gz>https://sjeng.org/ftp/work/log.txt.gz</denchmark-link>\n \n relevant part when run with MKLDNN_VERBOSE:\n <denchmark-code>[ RUN      ] GoogleNet_Blocked_8/bnrm_test_float.TestsBnrm/2\n mkldnn_verbose,create,batch_normalization,jit:avx2,forward_inference,fdata:nChw8c fdiff:undef,flags:0,mb2ic192ih56iw56,0.0490723\n mkldnn_verbose,exec,batch_normalization,jit:avx2,forward_inference,fdata:nChw8c fdiff:undef,flags:0,mb2ic192ih56iw56,1.323\n mkldnn_verbose,create,batch_normalization,jit:avx2,forward_training,fdata:nChw8c fdiff:undef,flags:0,mb2ic192ih56iw56,0.0959473\n mkldnn_verbose,exec,batch_normalization,jit:avx2,forward_training,fdata:nChw8c fdiff:undef,flags:0,mb2ic192ih56iw56,1.10303\n mkldnn_verbose,create,batch_normalization,jit:avx2,forward_training,fdata:nChw8c fdiff:undef,flags:1,mb2ic192ih56iw56,0.0629883\n mkldnn_verbose,exec,batch_normalization,jit:avx2,forward_training,fdata:nChw8c fdiff:undef,flags:1,mb2ic192ih56iw56,1.59814\n mkldnn_verbose,create,batch_normalization,jit:avx2,forward_inference,fdata:nChw8c fdiff:undef,flags:1,mb2ic192ih56iw56,0.0549316\n mkldnn_verbose,exec,batch_normalization,jit:avx2,forward_inference,fdata:nChw8c fdiff:undef,flags:1,mb2ic192ih56iw56,1.229\n mkldnn_verbose,create,batch_normalization,jit:avx2,forward_inference,fdata:nChw8c fdiff:undef,flags:2,mb2ic192ih56iw56,0.0678711\n mkldnn_verbose,exec,batch_normalization,jit:avx2,forward_inference,fdata:nChw8c fdiff:undef,flags:2,mb2ic192ih56iw56,1.17798\n mkldnn_verbose,create,batch_normalization,jit:avx2,forward_training,fdata:nChw8c fdiff:undef,flags:2,mb2ic192ih56iw56,0.052002\n mkldnn_verbose,exec,batch_normalization,jit:avx2,forward_training,fdata:nChw8c fdiff:undef,flags:2,mb2ic192ih56iw56,1.09985\n mkldnn_verbose,create,batch_normalization,jit:avx2,forward_training,fdata:nChw8c fdiff:undef,flags:3,mb2ic192ih56iw56,0.0419922\n mkldnn_verbose,exec,batch_normalization,jit:avx2,forward_training,fdata:nChw8c fdiff:undef,flags:3,mb2ic192ih56iw56,1.11719\n mkldnn_verbose,create,batch_normalization,jit:avx2,backward_data,fdata:nChw8c fdiff:nChw8c,flags:0,mb2ic192ih56iw56,0.0610352\n mkldnn_verbose,exec,batch_normalization,jit:avx2,backward_data,fdata:nChw8c fdiff:nChw8c,flags:0,mb2ic192ih56iw56,1.55908\n The difference between (out_diff_src - ref_diff_src) / norm_max and 0. is 0.81878101825714111, which exceeds eps, where\n (out_diff_src - ref_diff_src) / norm_max evaluates to -0.81878101825714111,\n 0. evaluates to 0, and\n eps evaluates to 0.62720000743865967.\n </denchmark-code>\n \n On one of the machines the test passes today (!). Could this be related to uninitialized memory or saving/restoring CPU state?\n I will see if I can make the failure reappear, to exclude the possibility of  having ssh'ed to the wrong machine when I reported it is reproducible on multiple.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "gcp", "commentT": "2018-05-25T07:52:35Z", "comment_text": "\n \t\tI managed to reproduce the failure on both systems again. It does not happen if they are idle, but it does happen if there are other machine learning tasks busy (PyTorch+cuDNN or TF+cuDNN). It's very unlikely to be related to heat or stability (different CPU vendors, not overclocked, well-cooled workstations,  exactly the same test that fails).\n Intel(R) Xeon(R) CPU E3-1240 v3 @ 3.40GHz is on:\n Linux mozwell 4.15.0-20-generic <denchmark-link:https://github.com/oneapi-src/oneDNN/issues/21>#21</denchmark-link>\n ~16.04.1-Ubuntu SMP Wed Apr 25 02:42:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\n Which is a ubuntu built kernel. nvidia-driver is 390.48\n AMD Ryzen 7 1700 Eight-Core Processor is on:\n Linux beast 4.15.13-ryzen <denchmark-link:https://github.com/oneapi-src/oneDNN/issues/24>#24</denchmark-link>\n  SMP Tue Mar 27 09:27:37 CEST 2018 x86_64 x86_64 x86_64 GNU/Linux\n Which is directly from kernel.org. nvidia-driver is 390.30\n My best guess is that there is some issue with memory initialization or processor state.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "gcp", "commentT": "2018-05-25T17:13:42Z", "comment_text": "\n \t\tI got a report that this also reproduces on a 56-core AVX-512 machine, without NVIDIA drivers installed.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "gcp", "commentT": "2018-05-25T17:18:12Z", "comment_text": "\n \t\tI can reproduce this, on a similar Ubuntu machine as Gian-Carlo. This box is a Skylake with 8 logical cores. Running the following command (with an otherwise idle machine) shows no failures:\n <denchmark-code>OMP_NUM_THREADS=8 tests/gtests/test_batch_normalization --gtest_filter=GoogleNet_Blocked_8/bnrm_test_float.TestsBnrm/2 --gtest_repeat=-1\n </denchmark-code>\n \n However, the command\n <denchmark-code>OMP_NUM_THREADS=9 tests/gtests/test_batch_normalization --gtest_filter=GoogleNet_Blocked_8/bnrm_test_float.TestsBnrm/2 --gtest_repeat=-1\n </denchmark-code>\n \n Fails almost immediately, in the manner described above.\n This was also reproduced in a dual-socket Skylake-SP machine with 56 total logical cores. But there the behavior is different, and fewer-than-logical numbers of threads fail. In particular, running the test with 4, 6, 9, 10, 11, 12, 13 threads fails, and after that it seems to stop failing.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "gcp", "commentT": "2018-06-06T19:15:14Z", "comment_text": "\n \t\tThanks for the details. I've reproduced the issue on Intel(R) Xeon(R) Platinum 8164 CPU and am looking into it.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "gcp", "commentT": "2018-06-12T02:44:54Z", "comment_text": "\n \t\tI am on Ubuntu 16.04 and have the same issue with mkl-dnn-0.14. mkl-dnn is compiled with the small library it downloaded (mklml_lnx_2018.0.3.20180406)\n But I also have the intel-mkl lib (2018.2-199)  and openblas installed in my system and I switch between them with update-alternatives\n Interestingly test_batch_normalization fails if system intel-mkl is set to be default blas at run time but it passes if openblas is set to be default blas, moreover openblas appears to be slightly faster on other tests too. (openblas is self compiled, not Ubuntu's stock version)\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "gcp", "commentT": "2018-06-30T22:33:55Z", "comment_text": "\n \t\tResolved in <denchmark-link:https://github.com/oneapi-src/oneDNN/commit/1ce0f0bd341cf8942437d50b29a85253197402c4>1ce0f0b</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "1ce0f0bd341cf8942437d50b29a85253197402c4", "commit_author": "Astafiev, Nikita", "commitT": "2018-06-26 09:46:25-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\cpu\\jit_uni_batch_normalization.cpp", "file_new_name": "src\\cpu\\jit_uni_batch_normalization.cpp", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "1004,1005,1006,1040,1041,1043,1044,1046,1047", "deleted_lines": "1004,1005,1006,1007,1008,1043,1045", "method_info": {"method_name": "mkldnn::impl::cpu::uni_bnorm_driver_t::exec", "method_params": "ithr,nthr,src,diff_src,dst,diff_dst,scale_shift,diff_scale_shift,mean,var,ws", "method_startline": "947", "method_endline": "1055"}}}}}}}