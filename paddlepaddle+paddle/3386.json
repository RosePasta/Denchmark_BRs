{"BR": {"BR_id": "3386", "BR_author": "reyoung", "BRopenT": "2017-08-10T07:23:26Z", "BRcloseT": "2017-08-10T10:23:32Z", "BR_text": {"BRsummary": "Boost Variadic Template and NVCC has bugs if nvcc != 7.5", "BRdescription": "\n It seems that in this <denchmark-link:https://github.com/boostorg/config/blame/develop/include/boost/config/compiler/nvcc.hpp>file</denchmark-link>\n ,  boost disable variadic template support when nvcc != 7.5. It says that  has bug to handle C++ variadic template.\n But our refactoring code is using boost::variant, which is used the variadic template in C++ 11. If we use boost > 1.61 and nvcc != 7.5, the error will occurred like below:\n <denchmark-code>Undefined symbols for architecture x86_64:\n   \"paddle::platform::is_cpu_place(boost::variant<paddle::platform::GPUPlace, paddle::platform::CPUPlace, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> const&)\", referenced from:\n       float* paddle::framework::Tensor::mutable_data<float>(boost::variant<paddle::platform::GPUPlace, paddle::platform::CPUPlace, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>) in libadd_op.a(add_op_generated_add_op.cu.o)\n       paddle::framework::Tensor::PlaceholderImpl<float, paddle::platform::CPUPlace>::PlaceholderImpl(paddle::platform::CPUPlace, unsigned long) in libadd_op.a(add_op_generated_add_op.cu.o)\n       paddle::framework::Tensor::PlaceholderImpl<float, paddle::platform::GPUPlace>::PlaceholderImpl(paddle::platform::GPUPlace, unsigned long) in libadd_op.a(add_op_generated_add_op.cu.o)\n   \"paddle::platform::is_gpu_place(boost::variant<paddle::platform::GPUPlace, paddle::platform::CPUPlace, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> const&)\", referenced from:\n       paddle::framework::OperatorWithKernel::OpKernelHash::operator()(paddle::framework::OperatorWithKernel::OpKernelKey const&) const in libadd_op.a(add_op_generated_add_op.cu.o)\n       float* paddle::framework::Tensor::mutable_data<float>(boost::variant<paddle::platform::GPUPlace, paddle::platform::CPUPlace, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>) in libadd_op.a(add_op_generated_add_op.cu.o)\n   \"paddle::platform::places_are_same_class(boost::variant<paddle::platform::GPUPlace, paddle::platform::CPUPlace, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> const&, boost::variant<paddle::platform::GPUPlace, paddle::platform::CPUPlace, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> const&)\", referenced from:\n       paddle::framework::OperatorWithKernel::OpKernelKey::operator==(paddle::framework::OperatorWithKernel::OpKernelKey const&) const in libadd_op.a(add_op_generated_add_op.cu.o)\n ld: symbol(s) not found for architecture x86_64\n </denchmark-code>\n \n There should be two situations.\n \n \n Check boost and nvcc version in CMake, and give a reasonable error. Freeze our boost and nvcc to some version.\n \n \n Always define BOOST_NO_CXX11_VARIADIC_TEMPLATES when GPU=ON. To generate same function symbols between gcc/clang and nvcc\n \n \n \t"}, "comments": {}}, "commit": {"commit_id": "2df628af884f78f9019e28dc1f242264581bbdb4", "commit_author": "Yu Yang", "commitT": "2017-08-10 15:47:30+08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "paddle\\framework\\attribute.h", "file_new_name": "paddle\\framework\\attribute.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "26", "deleted_lines": "17"}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "paddle\\framework\\ddim.h", "file_new_name": "paddle\\framework\\ddim.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "22", "deleted_lines": "17"}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "paddle\\framework\\operator.h", "file_new_name": "paddle\\framework\\operator.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "29", "deleted_lines": "18"}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "paddle\\platform\\place.h", "file_new_name": "paddle\\platform\\place.h", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "18", "deleted_lines": "17"}}}, "file_4": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "None", "file_new_name": "paddle\\platform\\variant.h"}}}}