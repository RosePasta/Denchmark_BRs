<bug id='17589' author='sl1pkn07' open_date='2020-02-13T16:53:59Z' closed_time='2020-02-13T20:31:26Z'>
	<summary>OSError: /tmp/makepkg/sl1-mxnet-git/src/build/libmxnet.so.1.5.1: undefined symbol: _ZN4dmlc14RecordIOReader10NextRecordEPSs</summary>
	<description>
&lt;denchmark-code&gt;Scanning dependencies of target cpp_package_op_h
make[2]: Leaving directory '/tmp/makepkg/sl1-mxnet-git/src/build'
make -f cpp-package/CMakeFiles/cpp_package_op_h.dir/build.make cpp-package/CMakeFiles/cpp_package_op_h.dir/build
make[2]: Entering directory '/tmp/makepkg/sl1-mxnet-git/src/build'
cd /tmp/makepkg/sl1-mxnet-git/src/incubator-mxnet/cpp-package/scripts &amp;&amp; echo Running:\ OpWrapperGenerator.py
Running: OpWrapperGenerator.py
cd /tmp/makepkg/sl1-mxnet-git/src/incubator-mxnet/cpp-package/scripts &amp;&amp; python OpWrapperGenerator.py /tmp/makepkg/sl1-mxnet-git/src/build/libmxnet.so.1.5.1
Traceback (most recent call last):
  File "OpWrapperGenerator.py", line 433, in &lt;module&gt;
    raise(e)
  File "OpWrapperGenerator.py", line 427, in &lt;module&gt;
    f.write(patternStr % ParseAllOps())
  File "OpWrapperGenerator.py", line 321, in ParseAllOps
    cdll.libmxnet = cdll.LoadLibrary(sys.argv[1])
  File "/usr/lib/python3.8/ctypes/__init__.py", line 451, in LoadLibrary
    return self._dlltype(name)
  File "/usr/lib/python3.8/ctypes/__init__.py", line 373, in __init__
    self._handle = _dlopen(self._name, mode)
OSError: /tmp/makepkg/sl1-mxnet-git/src/build/libmxnet.so.1.5.1: undefined symbol: _ZN4dmlc14RecordIOReader10NextRecordEPSs
make[2]: *** [cpp-package/CMakeFiles/cpp_package_op_h.dir/build.make:59: cpp-package/CMakeFiles/cpp_package_op_h] Error 1
&lt;/denchmark-code&gt;

linux
python 3.8.1
mxnet &lt;denchmark-link:https://github.com/apache/incubator-mxnet/commit/f5a1014479351f3139b92c437d65de3a3a653196&gt;f5a1014&lt;/denchmark-link&gt;

gcc 8.3.0, also happen with gcc 9.2.1
	</description>
	<comments>
		<comment id='1' author='sl1pkn07' date='2020-02-13T17:03:26Z'>
		Please provide full cmake configuration and build logs.
		</comment>
		<comment id='2' author='sl1pkn07' date='2020-02-13T17:05:33Z'>
		&lt;denchmark-code&gt; cmake ../incubator-mxnet \
    -DCMAKE_BUILD_TYPE=None \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_LIBDIR=lib \
    -DCMAKE_INSTALL_DOCDIR=share/doc/mxnet \
    -DENABLE_CUDA_RTC=ON \
    -DBUILD_SHARED_LIBS=ON \
    -DBUILD_CPP_EXAMPLES=OFF \
    -DUSE_CCACHE=OFF \
    -DUSE_CXX14_IF_AVAILABLE=ON \
    -DUSE_CPP_PACKAGE=ON \
    -DUSE_CUDNN=ON \
    -DUSE_NCCL=ON \
    -DUSE_OPENCV=ON \
    -DUSE_OPENMP=ON \
    -DUSE_MKLDNN=OFF \
    -DUSE_LAPACK=ON \
    -DUSE_JEMALLOC=OFF \
    -DUSE_GPERFTOOLS=OFF \
    -DNCCL_ROOT=/usr \
    -DCUDA_HOST_COMPILER=/usr/bin/cc-8 \
    -DCMAKE_C_COMPILER=/usr/bin/cc-8 \
    -DCMAKE_C_COMPILER_AR=/usr/bin/gcc-ar-8 \
    -DCMAKE_C_COMPILER_RANLIB=/usr/bin/gcc-ranlib-8 \
    -DCMAKE_CXX_COMPILER=/usr/bin/c++-8 \
    -DCMAKE_CXX_COMPILER_AR=/usr/bin/gcc-ar-8 \
    -DCMAKE_CXX_COMPILER_RANLIB=/usr/bin/gcc-ranlib-8
&lt;/denchmark-code&gt;

the build log is too extense
		</comment>
		<comment id='3' author='sl1pkn07' date='2020-02-13T17:48:56Z'>
		Without the build log and the log of above cmake file, it's impossible to advise about the root cause of your issue.
You can attach the file in a comment.
		</comment>
		<comment id='4' author='sl1pkn07' date='2020-02-13T20:31:26Z'>
		seems fixed
build opencv(4.2.0) (with cuda support) and openexr with gcc 8 (instead gcc 9) the error is gone
sorry for the noise
		</comment>
		<comment id='5' author='sl1pkn07' date='2020-08-25T21:50:30Z'>
		_ZN4dmlc14RecordIOReader10NextRecordEPSs corresponds to  dmlc::RecordIOReader::NextRecord(std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*)
I ran into this problem because I was compiling MxNet with GCC 8 but linking to a 4.9 libstdc++. Somewhere between 4.9 and 8, there was an ABI change to std::string in order to comply with C++11 requirements that resulted in std::string being moved into the std::__cxx11 namespace. You can see this below (T ~= 'defined', 'U' ~= missing):
&lt;denchmark-code&gt;&gt;&gt; nm -C libmxnet.so | grep 'dmlc::RecordIOReader::NextRecord'

000000000471cc60 T dmlc::RecordIOReader::NextRecord(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*)
0000000000cd897c t dmlc::RecordIOReader::NextRecord(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) [clone .cold.54]
                 U dmlc::RecordIOReader::NextRecord(std::string*)
&lt;/denchmark-code&gt;

If you look in libmxnet.so, you'll find tons of similarly missing symbols. For whatever reason, NextRecord(...) just happens to be the first in the compilation.
It is possible to force GCC to compile using the old, pre-C++11 namespace and functionality by compiling with -D_GLIBCXX_USE_CXX11_ABI=0. It appears you can configure MxNet to build with ADD_CFLAGS=-D_GLIBCXX_USE_CXX11_ABI=0 to add this to your build.
		</comment>
	</comments>
</bug>