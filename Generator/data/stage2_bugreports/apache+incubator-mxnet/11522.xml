<bug id='11522' author='simonmaurer' open_date='2018-07-02T10:00:45Z' closed_time='2018-07-06T01:49:13Z'>
	<summary>MXNet 1.2.0 - net.save_params() output parameter file contains garbage</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

When using Gluon APIs gluon.nn.SymbolBlock to load a pretrained VGG16 and finetune the model (while replacing the last VGG16 layer with an additional FullyConnected layer) the model file (.json) can be correctly saved, but not the parameters (weights, biases) with net.save_params().
The resulting file is of size 32Byte (no matter what size the additional layer) containing the only binary data:
��\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00
Model used:
'&lt;denchmark-link:http://data.dmlc.ml/models/imagenet/vgg/vgg16-symbol.json&gt;http://data.dmlc.ml/models/imagenet/vgg/vgg16-symbol.json&lt;/denchmark-link&gt;
'
'&lt;denchmark-link:http://data.dmlc.ml/models/imagenet/vgg/vgg16-0000.params&gt;http://data.dmlc.ml/models/imagenet/vgg/vgg16-0000.params&lt;/denchmark-link&gt;
'
&lt;denchmark-h:h2&gt;Environment info (Required)&lt;/denchmark-h&gt;

Ubuntu 16.04, MXNet version 1.2.0 (pip3 compiled version)
&lt;denchmark-h:h2&gt;Minimum reproducible example&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;context = mx.cpu() # same for mx.gpu(0)
data = mx.sym.var('data')
sym, arg_params, aux_params = mx.model.load_checkpoint(&lt;model-path&gt;, 0)
layers = sym.get_internals()
sym = layers['fc8' + '_output']
new_sym = mx.symbol.FullyConnected(data=sym, num_hidden=32, name='bit_layer')
new_params = dict({k: arg_params[k] for k in arg_params if 'bit_layer' not in k})
 
net = gluon.nn.SymbolBlock(outputs=new_sym, inputs=data)
net_params = net.collect_params()
net_params.initialize(mx.init.Uniform(scale=0.1), ctx=context)
for param in new_params:
    if param in net_params:
        net_params[param]._load_init(new_params[param], ctx=context)
for param in aux_params:
    if param in net_params:
        net_params[param]._load_init(aux_params[param], ctx=context)
net.hybridize()
# Save symbol from Gluon
sym_json = net(data)
sym_json.save('test-symbol'+'.json')

# Save weights after first passing some data to build the graph (not listed here)
net.save_params('test.params')`
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;What have you tried to solve it?&lt;/denchmark-h&gt;


Revert to MXNet 1.1.0 -&gt; net.save_params() works accordingly! Size of weights file (.params) will be roughly 500MB
Assumption MXNet 1.2.0 model incompatibility with pretrained models created with earlier versions (VGG16 used here was created with MXNet version 0.8)
use net.export("test", epoch=0) ??

	</description>
	<comments>
		<comment id='1' author='simonmaurer' date='2018-07-02T10:31:45Z'>
		&lt;denchmark-link:https://github.com/piiswrong&gt;@piiswrong&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/ThomasDelteil&gt;@ThomasDelteil&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='simonmaurer' date='2018-07-02T16:27:46Z'>
		Thank you for submitting the issue! &lt;denchmark-link:https://github.com/sandeep-krishnamurthy&gt;@sandeep-krishnamurthy&lt;/denchmark-link&gt;
 requesting this be labeled.
		</comment>
		<comment id='3' author='simonmaurer' date='2018-07-06T00:07:50Z'>
		&lt;denchmark-link:https://github.com/simonmaurer&gt;@simonmaurer&lt;/denchmark-link&gt;

please use
net.hybridize()
net(mx.nd.ones((1,3,224,224))
net.export('test')
To export your model.
You will get a test-symbol.json and test-0000.params file.
For more details refer to this tutorial: &lt;denchmark-link:https://mxnet.incubator.apache.org/tutorials/gluon/save_load_params.html&gt;https://mxnet.incubator.apache.org/tutorials/gluon/save_load_params.html&lt;/denchmark-link&gt;

edit: Also note that if you want to fine-tune VGG16 with a different final layer, I would suggest this much simpler way:
vgg16 = gluon.model_zoo.vision.vgg16(pretrained=True)
with vgg16.name_scope():
    vgg16.output = mx.gluon.nn.Dense(32, prefix='bit_layer')
vgg16.output.initialize()

vgg16.hybridize()
vgg16(mx.nd.ones((1,3,224,224)))
vgg16.export('test')
		</comment>
	</comments>
</bug>