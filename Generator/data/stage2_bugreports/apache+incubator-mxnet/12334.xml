<bug id='12334' author='ShownX' open_date='2018-08-24T15:29:05Z' closed_time='2018-10-11T22:14:15Z'>
	<summary>Load pretrained model with new load_parameters() API</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

Cannot load only convolutional layers with pre-trained model using load_parameters() API
&lt;denchmark-h:h2&gt;Environment info (Required)&lt;/denchmark-h&gt;

Ubuntu 16.04
mxnet-cu90 1.3.0b20180821
&lt;denchmark-h:h2&gt;Error Message:&lt;/denchmark-h&gt;

missing_parameters
&lt;denchmark-h:h2&gt;Minimum reproducible example&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;from mxnet.gluon.model_zoo.vision import get_model

# download the pretrained model with the path: model_path
model = get_model('resnet101_v2')
model.features.load_parameters(model_path)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;What have you tried to solve it?&lt;/denchmark-h&gt;

The reason of this issue is load_parameters called from features block, in which name of parameters starts with numbers. But the pretrained model parameters starts with features.
The load_parameters cannot find the corresponding name in this case.
One way to work around this issue is using the model.save_params() to save again and load using the API load_parameters. However, the save_params() is deprecated.
To prevent any problem with loading parameters, I propose this issue and hope the team can fix it.
	</description>
	<comments>
		<comment id='1' author='ShownX' date='2018-08-24T16:38:53Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 [Gluon, Model Zoo, Bug]
		</comment>
		<comment id='2' author='ShownX' date='2018-09-06T09:30:26Z'>
		&lt;denchmark-code&gt;from mxnet.gluon.model_zoo.vision import get_model

# download the pretrained model with the path: model_path
model = get_model('resnet101_v2')
model.features.load_parameters(model_path, allow_missing=True, ignore_extra=True)
&lt;/denchmark-code&gt;

This can work.
		</comment>
		<comment id='3' author='ShownX' date='2018-09-06T18:20:47Z'>
		I do not think allow_missing=True is correct since the current problem is the key saved in the model is the name with prefix features, which cannot be found in parameters names in model.features. I guess all features with the argument all missing would not be initialized at all/ initialized by random numbers depends on the initializer.
		</comment>
		<comment id='4' author='ShownX' date='2018-09-07T02:40:59Z'>
		Yes, you are right. The keys don't match. Maybe you can get pretrained model, and then get the feature.
&lt;denchmark-code&gt;model = get_model('resnet101_v2', pretrained=True)
feat = model.features
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='ShownX' date='2018-09-07T03:11:18Z'>
		Sometimes, we need to initialize using the other models weights, not only the weights stored on the server.
I proposed this issue for future use since the save_params() is deprecated in the future. It should be raised because it would be super user-unfriendly.
		</comment>
		<comment id='6' author='ShownX' date='2018-09-10T21:39:28Z'>
		After transition from save_params to save_parameters it is no longer enforcing prefix check, and it's really error prone if we are going to load partial weights from different models.
So save_parameters and load_parameters are seriously only for serialization IMO.
As suggested by &lt;denchmark-link:https://github.com/L1aoXingyu&gt;@L1aoXingyu&lt;/denchmark-link&gt;
 I think it's safer to copy loaded parameters between each other, at least you will know what parameters are indeed copied.
Let me know what's your concern if directly loading partial weights is not applicable. &lt;denchmark-link:https://github.com/ShownX&gt;@ShownX&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='ShownX' date='2018-09-10T23:26:37Z'>
		Right now, I meet the issue like:

I have a pre-trained model, e.g. resnet trained on my own datasets. Assume it is saved by the function save_parameters(). The key of the saved function would be the format such as features.0.0.mean

2.1. If I just use exactly model but only initialize the features using the pretrained model, the previous function does not work: model.features.initialize(model_path).
2.2. Based on this pretrained model, I would like to expand the functionalities or modify the model based on the pre-trained model. Let's say I have the several hyridizesequences such as features0, features1, ..., which change the structure of the models and the key.

In both cases, the initialization would fail because it cannot find the corresponding key from the ndarray formated pre-trained model and the modified pre-trained models.

For example, ndarray pretrained model is features.0.0.mean
but the corresponding key of parameters in the case 2.1 is 0.0.mean and the key of parameters in case 2.2 might be 1.0.mean
However, in the deprecated function save_params(), which uses the layer name as the key, I can find the corresponding key in both cases.
Hope the mxnet team can address this issue. Otherwise, it would be the terrible user experience when the users face both cases.
		</comment>
		<comment id='8' author='ShownX' date='2018-09-11T00:25:46Z'>
		&lt;denchmark-link:https://github.com/ShownX&gt;@ShownX&lt;/denchmark-link&gt;
 If you prefer preserving names, here's the API for it:
&lt;denchmark-code&gt;net = get_model('resnet101_v2', pretrained=True)
net.collect_params().save(filename, strip_prefix=net.prefix)
new_net.collect_params(collect='the patterns').load(filename, restore_prefix=new_net.prefix)
&lt;/denchmark-code&gt;

What your purpose is reusing separate(partial) parameters, not the entire network.
		</comment>
		<comment id='9' author='ShownX' date='2018-09-11T02:30:03Z'>
		Thanks. Right now, I can use save_params() to get what I want. But it is deprecated in the future. I want to address this issue when the mxnet team actually decide to deprecate this function and hope can update the functions save_parameters() or load_parameters().
There are two cases I mention before. 1. Training the custom dataset with the pre-trained model; 2. Modifying the backbone network such as ResNet and design a new network.
		</comment>
		<comment id='10' author='ShownX' date='2018-09-11T18:19:22Z'>
		&lt;denchmark-link:https://github.com/piiswrong&gt;@piiswrong&lt;/denchmark-link&gt;
 Do you have some comments here?
		</comment>
		<comment id='11' author='ShownX' date='2018-10-08T19:56:10Z'>
		&lt;denchmark-link:https://github.com/ShownX&gt;@ShownX&lt;/denchmark-link&gt;
 If the issue is resolved for you, can you close this issue ? Thanks :)
		</comment>
		<comment id='12' author='ShownX' date='2018-10-09T20:35:24Z'>
		I do not think it is resolved.
		</comment>
	</comments>
</bug>