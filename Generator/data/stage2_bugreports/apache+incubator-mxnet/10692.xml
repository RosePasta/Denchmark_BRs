<bug id='10692' author='KellenSunderland' open_date='2018-04-25T23:38:10Z' closed_time='2019-04-30T05:10:17Z'>
	<summary>Executor's set_monitor_callback leaks memory in high-level languages.</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

Executor's set_monitor_callback leaks memory in high-level languages.
&lt;denchmark-h:h2&gt;Environment info (Required)&lt;/denchmark-h&gt;

OSX, pip installed MXNet.
&lt;denchmark-h:h2&gt;Minimum reproducible example&lt;/denchmark-h&gt;

import mxnet as mx
count = 0

def mon_callback(*args, **kwargs):
    global count
    count = count + 1

def main():
    while True:
        process_request()[0].wait_to_read()

def process_request():
    x = mx.sym.Variable('x')
    y = mx.sym.FullyConnected(x, num_hidden=1024)
    for i in range(0, 4):
        y = x + 1
    executor = y.bind(mx.cpu(), {'x': mx.nd.zeros((1024, ))})
    executor.set_monitor_callback(mon_callback)
    return executor.forward(is_train=False)

if __name__ == "__main__":
    main()
&lt;denchmark-h:h2&gt;Comments&lt;/denchmark-h&gt;


Looks like the leak is due to this implementation: https://github.com/apache/incubator-mxnet/blob/master/src/executor/graph_executor.cc#L1461 which copies output ndarrays and then passes back raw pointers to them.  This might make sense for native languages, but if the language accessing the callback is python for example it becomes difficult to properly delete this memory.

	</description>
	<comments>
		<comment id='1' author='KellenSunderland' date='2018-07-13T20:59:34Z'>
		&lt;denchmark-link:https://github.com/KellenSunderland&gt;@KellenSunderland&lt;/denchmark-link&gt;
 how much memory does it leak? this may be a critical issue.
This is an MXNet backend issue.
&lt;denchmark-link:https://github.com/marcoabreu&gt;@marcoabreu&lt;/denchmark-link&gt;
 can you please remove "C++" and apply "Backend"? thanks!
		</comment>
		<comment id='2' author='KellenSunderland' date='2019-04-29T18:48:57Z'>
		&lt;denchmark-link:https://github.com/KellenSunderland&gt;@KellenSunderland&lt;/denchmark-link&gt;
 I changed your script a little bit and I did not see memory leak anymore.
&lt;denchmark-code&gt;import ctypes
import mxnet as mx
from mxnet.base import NDArrayHandle
from mxnet.ndarray import NDArray

count = 0

def mon_callback(*args, **kwargs):
    global count
    count = count + 1
    array = ctypes.cast(args[1], NDArrayHandle)
    array = NDArray(array, writable=False)
&lt;/denchmark-code&gt;

I think it is not the best practice to pass a raw pointer back to higher level language and rely on users to properly free the memory. I tried to free the memory after we execute the callback in &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/14805/files&gt;GraphExecutor&lt;/denchmark-link&gt;
. However, it caused double free error in some cases where we create NDArray using the raw pointer. In this case, the memory is properly freed, as the modified code above. This is actually what we are doing in &lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/python/mxnet/monitor.py#L70&gt;Monitor&lt;/denchmark-link&gt;
 class.
Please let us know if you have further questions. Otherwise, please close the issue. Thanks.
		</comment>
		<comment id='3' author='KellenSunderland' date='2019-04-30T05:10:17Z'>
		&lt;denchmark-link:https://github.com/yuxihu&gt;@yuxihu&lt;/denchmark-link&gt;
 Yes I was also occasionally getting double frees.  Thanks for the modified code, good reference.  Closing the issue.
		</comment>
	</comments>
</bug>