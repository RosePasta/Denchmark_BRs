<bug id='9034' author='adrianloy' open_date='2017-12-12T11:15:44Z' closed_time='2018-09-18T17:53:47Z'>
	<summary>Understanding the correlation layer</summary>
	<description>
Hey everyone,
I do not understand the impact of the stride parameter for the mxnet.sym.correlation layer. I have this simple minimal example:
&lt;denchmark-code&gt;import numpy as np
import mxnet as mx

# Network
data1 = mx.symbol.Variable('data1')
#data2 = mx.symbol.Variable('data2')
cor = mx.sym.Correlation(data1=data1, data2=data1, kernel_size=28, stride1=1, stride2=1, pad_size=0, max_displacement=0)
loss = mx.sym.MakeLoss(cor, normalization='batch')
group = mx.symbol.Group([mx.sym.BlockGrad(cor), loss])

# Data
datashape = (1, 1, 28, 28)  # like mnist
data = np.random.rand(1, 1, 28, 28)

#Bind, execute, get computed correlation
executor = group.simple_bind(ctx=mx.cpu(), data1=datashape)
outs = executor.forward(is_train=True, data1=data)
cor = executor.outputs[0]
grad1 = executor.outputs[1]
print(cor)
&lt;/denchmark-code&gt;

It computes the correlation between 2 identical feature maps with a kernel of the same size as the feature maps. I do not understand why the output of the correlation layer has shape 1x1x2x2. If I set the strides to anything bigger than 1, the output is a 1x1x1x1 matrix, that makes more sense to me. As the Kernel has the size of the feature maps, the output should always be a 1x1x1x1 matrix, independent from the value of the strides parameters!
The documentation notes

Given a maximum displacement :math:d, for each location :math:x_{1} it computes correlations :math:c(x_{1}, x_{2}) only in a neighborhood of size :math:D:=2d+1,
by limiting the range of :math:x_{2}. We use strides :math:s_{1}, s_{2}, to quantize :math:x_{1} globally and to quantize :math:x_{2} within the neighborhood
centered around :math:x_{1}.
The final output is defined by the following expression:

.. math::
  out[n, q, i, j] = c(x_{i, j}, x_{q})

where :math:`i` and :math:`j` enumerate spatial locations in :math:`f_{1}`, and :math:`q` denotes the :math:`q^{th}` neighborhood of :math:`x_{i,j}`.


Unfortunately I do not really understand from this the impact of the strides parameter, as s_1 and s_2 do not appear in the equation.
Furthermore, if you just run the code a couple of times you will notice that the correlation matrix sometimes contains "Infinity" values. I do not understand mathematically or conceptually how the correlation can be infinity.
Any help is much appreciated.
	</description>
	<comments>
		<comment id='1' author='adrianloy' date='2018-07-12T16:52:15Z'>
		kernel_size must be odd number, otherwise strange things happen! It's mentioned in the docs string, but I think it would be better for this to be added as strict validation to avoid confusion like this in the future.
With regards to the stride (once a odd kernel_size is used), stride1 relates to the striding on the data1 feature map 1 and stride2 relates to the striding within the 'neighborhood' defined on feature map 2. Without a neighborhood this method would compare all patches from feature map 1 with all patches from feature map 2. With large feature maps, the number of comparisons becomes too large, so we restrict to a region in feature map 2 centered around the corresponding location of the patch in feature map 1. And stride2 strides within this neighborhood region.
I recommend taking a look the &lt;denchmark-link:https://arxiv.org/pdf/1504.06852.pdf&gt;'FlowNet: Learning Optical Flow with Convolutional Networks'&lt;/denchmark-link&gt;
 paper that defined this type of layer.
		</comment>
		<comment id='2' author='adrianloy' date='2018-07-12T16:54:31Z'>
		&lt;denchmark-link:https://github.com/dsqx71&gt;@dsqx71&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/sxjscience&gt;@sxjscience&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/eric-haibin-lin&gt;@eric-haibin-lin&lt;/denchmark-link&gt;
 it would be good to get some input validation on  here to avoid this issue in the future.
		</comment>
		<comment id='3' author='adrianloy' date='2018-07-12T16:56:17Z'>
		&lt;denchmark-link:https://github.com/sandeep-krishnamurthy&gt;@sandeep-krishnamurthy&lt;/denchmark-link&gt;
 can we now retag, thanks! I think Bug and Operator are the most appropriate tags.
		</comment>
		<comment id='4' author='adrianloy' date='2018-08-22T21:46:20Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 : [Bug, Operator]
		</comment>
	</comments>
</bug>