<bug id='14265' author='satyakrishnagorti' open_date='2019-02-27T20:45:04Z' closed_time='2019-03-07T18:13:32Z'>
	<summary>Bug in Optimizer's serializeState and deserializeState methods (Scala)</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

Currently there is a bug in the way Optimizer is trying to serialize state which fails when trying to deserialize Optimizer that has no states (like SGD without momentum).
&lt;denchmark-h:h2&gt;Issue&lt;/denchmark-h&gt;

Currently the way serialize is being done is as below: (pasting Optimizer.serailizeState())
  override def serializeState(): Array[Byte] = {
        val bos = new ByteArrayOutputStream()
        try {
          val out = new ObjectOutputStream(bos)
          out.writeInt(states.size)
          states.foreach { case (k, v) =&gt;
            if (v != null) {
              out.writeInt(k)
              val stateBytes = optimizer.serializeState(v)
              if (stateBytes == null) {
                out.writeInt(0)
              } else {
                out.writeInt(stateBytes.length)
                out.write(stateBytes)
              }
            }
          }
          out.flush()
          bos.toByteArray
        } finally {
         ...
      }
  }
When an Optimizer without states like SGD with momentum set as 0 is being used. The states map (Map[Int, AnyRef]) contains a (key, value) pair as (some integer index, null).
The above serialize method does not write k as the value of key and 0 as the value of stateBytes, due to the null check if (v != null)
Now while deserializing: (Pasting code from Optimizer.deserializeState())
  override def deserializeState(bytes: Array[Byte]): Unit = {
        val bis = new ByteArrayInputStream(bytes)
        var in: ObjectInputStream = null
        try {
          in = new ObjectInputStream(bis)
          val size = in.readInt()
          (0 until size).foreach(_ =&gt; {
            val key = in.readInt()
            val bytesLength = in.readInt()
            val value =
              if (bytesLength &gt; 0) {
                val bytes = Array.fill[Byte](bytesLength)(0)
                in.readFully(bytes)
                optimizer.deserializeState(bytes)
              } else {
                null
              }
            states.update(key, value)
          })
        } finally {
          ...
      }
  }
In the foreach loop, the key is being read (which wasn't serialized previously) hence, this would cause an java.io.EOFException.
&lt;denchmark-h:h2&gt;Solution.&lt;/denchmark-h&gt;

Get rid of if (v != null) check and retain the rest.
	</description>
	<comments>
		<comment id='1' author='satyakrishnagorti' date='2019-02-27T20:45:08Z'>
		Hey, this is the MXNet Label Bot.
Thank you for submitting the issue! I will try and suggest some labels so that the appropriate MXNet community members can help resolve it.
Here are my recommended labels: Scala, Bug
		</comment>
		<comment id='2' author='satyakrishnagorti' date='2019-02-28T00:27:35Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 add [Scala, Bug]
		</comment>
		<comment id='3' author='satyakrishnagorti' date='2019-03-01T19:42:17Z'>
		Hey &lt;denchmark-link:https://github.com/satyakrishnagorti&gt;@satyakrishnagorti&lt;/denchmark-link&gt;
, it sounds like you have looked at this and know what to change. If you are interested, you are also more than welcome to open a pull request and contribute the fixes yourself. Let me know if you need any help
		</comment>
		<comment id='4' author='satyakrishnagorti' date='2019-03-01T21:02:36Z'>
		Yeah, I will send a PR soon.
		</comment>
	</comments>
</bug>