<bug id='18681' author='AustinDoolittle' open_date='2020-07-09T18:56:35Z' closed_time='2020-07-09T20:33:13Z'>
	<summary>Infer Shape Fails for empty NDArrays</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

When trying to move a tensor of size 0 to a different context than the context that it is currently on, an "inferring shapes failed" error is raised. This occurs for tensors regardless of the number of dimensions they contain. It seems that inferring the shape of an empty NDArray is not currently possible.
&lt;denchmark-h:h3&gt;Error Message&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Traceback (most recent call last):
  File "&lt;redacted&gt;/recreate_shape_bug.py", line 7, in &lt;module&gt;
    new_array = empty_array.as_in_context(mx.cpu())
  File "&lt;redacted&gt;/python3.6/site-packages/mxnet/ndarray/ndarray.py", line 2144, in as_in_context
    return self.copyto(context)
  File "&lt;redacted&gt;/python3.6/site-packages/mxnet/ndarray/ndarray.py", line 2093, in copyto
    return _internal._copyto(self, out=hret)
  File "&lt;string&gt;", line 25, in _copyto
  File "&lt;redacted&gt;/python3.6/site-packages/mxnet/_ctypes/ndarray.py", line 92, in _imperative_invoke
    ctypes.byref(out_stypes)))
  File "&lt;redacted&gt;/python3.6/site-packages/mxnet/base.py", line 253, in check_call
    raise MXNetError(py_str(_LIB.MXGetLastError()))
mxnet.base.MXNetError: [18:43:30] &lt;redacted&gt;/src/imperative/./imperative_utils.h:145: Operator _copyto inferring shapes failed.
input shapes:
[-1]
output shapes:
[-1]
operator attributes:

Stack trace:
  [bt] (0) &lt;redacted&gt;/lib/libmxnet.so(dmlc::LogMessageFatal::~LogMessageFatal()+0x24) [0x7fe5f79ba534]
  [bt] (1) &lt;redacted&gt;/lib/libmxnet.so(mxnet::imperative::SetShapeType(mxnet::Context const&amp;, nnvm::NodeAttrs const&amp;, std::vector&lt;mxnet::NDArray*, std::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::vector&lt;mxnet::NDArray*, std::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, mxnet::DispatchMode*)+0x1dd5) [0x7fe5f983c1e5]
  [bt] (2) &lt;redacted&gt;/lib/libmxnet.so(mxnet::Imperative::Invoke(mxnet::Context const&amp;, nnvm::NodeAttrs const&amp;, std::vector&lt;mxnet::NDArray*, std::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::vector&lt;mxnet::NDArray*, std::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;)+0x297) [0x7fe5f98300c7]
  [bt] (3) &lt;redacted&gt;/lib/libmxnet.so(MXImperativeInvokeImpl(void*, int, void**, int*, void***, int, char const**, char const**)+0x5e5) [0x7fe5f973c995]
  [bt] (4) &lt;redacted&gt;/lib/libmxnet.so(MXImperativeInvokeEx+0x67) [0x7fe5f973dd27]
  [bt] (5) &lt;redacted&gt;/lib/python3.6/lib-dynload/_ctypes.cpython-36m-x86_64-linux-gnu.so(ffi_call_unix64+0x4c) [0x7fe622ba3ef8]
  [bt] (6) &lt;redacted&gt;/lib/python3.6/lib-dynload/_ctypes.cpython-36m-x86_64-linux-gnu.so(ffi_call+0x15f) [0x7fe622ba2fff]
  [bt] (7) &lt;redacted&gt;/lib/python3.6/lib-dynload/_ctypes.cpython-36m-x86_64-linux-gnu.so(_ctypes_callproc+0x292) [0x7fe622b9ae02]
  [bt] (8) &lt;redacted&gt;/lib/python3.6/lib-dynload/_ctypes.cpython-36m-x86_64-linux-gnu.so(+0xa08b) [0x7fe622b9208b]
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

Code to reproduce is as follows
&lt;denchmark-code&gt;import mxnet as mx

empty_array = mx.nd.array([], ctx=mx.Context('cpu_shared', 0))
new_array = empty_array.as_in_context(mx.cpu())
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Steps to reproduce&lt;/denchmark-h&gt;

(Paste the commands you ran that produced the error.)

Run above code as-is

&lt;denchmark-h:h2&gt;What have you tried to solve it?&lt;/denchmark-h&gt;


Attempted with tensors of &gt;1 dimension, but got the same result.

&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;

Python: 3.6.10
MXNet: 1.6.1
	</description>
	<comments>
		<comment id='1' author='AustinDoolittle' date='2020-07-09T18:59:09Z'>
		&lt;denchmark-link:https://github.com/AustinDoolittle&gt;@AustinDoolittle&lt;/denchmark-link&gt;
 zero size array support is not available by default and needs to be turned on manually. If you turn on  does it resolve the issue?
		</comment>
		<comment id='2' author='AustinDoolittle' date='2020-07-09T19:15:25Z'>
		That does appear to resolve the issue as reported. Unfortunately that will break quite a bit of our existing code. We'll look into some temporary workarounds. Just out of curiosity, will the np_shape approach be the default in the future? Or will this continue to be opt-in only?
		</comment>
		<comment id='3' author='AustinDoolittle' date='2020-07-09T19:33:23Z'>
		You can try and mark the part of code that requires zero-size/zero-dim array with the decorator @mx.use_np_shape and it will only take effect for that part of code.
		</comment>
		<comment id='4' author='AustinDoolittle' date='2020-07-09T19:47:59Z'>
		
Just out of curiosity, will the np_shape approach be the default in the future? Or will this continue to be opt-in only?

Numpy compatible mode will be default (and the only supported way) in MXNet 2
		</comment>
		<comment id='5' author='AustinDoolittle' date='2020-07-09T20:33:13Z'>
		
You can try and mark the part of code that requires zero-size/zero-dim array with the decorator @mx.use_np_shape and it will only take effect for that part of code.

This works, I'll run with this for now. Since this is expected behavior, I'll close out the ticket. Thanks Sheng and Leonard for the quick help and useful information :)
		</comment>
	</comments>
</bug>