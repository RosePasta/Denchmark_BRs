<bug id='16850' author='stu1130' open_date='2019-11-19T07:14:23Z' closed_time='2019-11-20T02:10:50Z'>
	<summary>[Numpy] expand_dims throws delay_alloc error</summary>
	<description>
MXNet version: pip install mxnet-mkl --pre as of today
&lt;denchmark-code&gt;&gt;&gt;&gt; import mxnet
&gt;&gt;&gt; from mxnet import np, npx
&gt;&gt;&gt; npx.set_np()
&gt;&gt;&gt; a = np.array([]).reshape(2, 1, 0)
&gt;&gt;&gt; np.expand_dims(a, 2).wait_to_read()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/leecheng/anaconda3/lib/python3.7/site-packages/mxnet/ndarray/ndarray.py", line 2350, in wait_to_read
    check_call(_LIB.MXNDArrayWaitToRead(self.handle))
  File "/Users/leecheng/anaconda3/lib/python3.7/site-packages/mxnet/base.py", line 255, in check_call
    raise MXNetError(py_str(_LIB.MXGetLastError()))
mxnet.base.MXNetError: [23:11:49] src/ndarray/ndarray.cc:502: Check failed: delay_alloc:
Stack trace:
  [bt] (0) 1   libmxnet.so                         0x000000011c7cc029 mxnet::op::MKLDNNLeakyReluBackward(nnvm::NodeAttrs const&amp;, mxnet::OpContext const&amp;, std::__1::vector&lt;mxnet::NDArray, std::__1::allocator&lt;mxnet::NDArray&gt; &gt; const&amp;, mxnet::OpReqType const&amp;, mxnet::NDArray const&amp;) + 4265
  [bt] (1) 2   libmxnet.so                         0x000000011ea457c4 mxnet::NDArray::Chunk::SetMKLMem(mxnet::TShape const&amp;, int) + 1668
  [bt] (2) 3   libmxnet.so                         0x000000011ea45cc0 mxnet::NDArray::GetMKLDNNData() const + 560
  [bt] (3) 4   libmxnet.so                         0x000000011c80e941 mxnet::op::MKLDNNReshapeFwd::MKLDNNReshapeFwd(mxnet::OpReqType const&amp;, mxnet::NDArray const&amp;, mxnet::NDArray const&amp;) + 225
  [bt] (4) 5   libmxnet.so                         0x000000011c80fe65 mxnet::op::GetReshapeForward(mxnet::OpReqType const&amp;, mxnet::NDArray const&amp;, mxnet::NDArray const&amp;) + 245
  [bt] (5) 6   libmxnet.so                         0x000000011c810cd7 mxnet::op::MKLDNNReshapeForward(nnvm::NodeAttrs const&amp;, mxnet::OpContext const&amp;, mxnet::NDArray const&amp;, mxnet::OpReqType const&amp;, mxnet::NDArray const&amp;) + 951
  [bt] (6) 7   libmxnet.so                         0x000000011e969daa mxnet::imperative::PushFComputeEx(std::__1::function&lt;void (nnvm::NodeAttrs const&amp;, mxnet::OpContext const&amp;, std::__1::vector&lt;mxnet::NDArray, std::__1::allocator&lt;mxnet::NDArray&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::OpReqType, std::__1::allocator&lt;mxnet::OpReqType&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray, std::__1::allocator&lt;mxnet::NDArray&gt; &gt; const&amp;)&gt; const&amp;, nnvm::Op const*, nnvm::NodeAttrs const&amp;, mxnet::Context const&amp;, std::__1::vector&lt;mxnet::engine::Var*, std::__1::allocator&lt;mxnet::engine::Var*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::engine::Var*, std::__1::allocator&lt;mxnet::engine::Var*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::Resource, std::__1::allocator&lt;mxnet::Resource&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray*, std::__1::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray*, std::__1::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::OpReqType, std::__1::allocator&lt;mxnet::OpReqType&gt; &gt; const&amp;)::'lambda'(mxnet::RunContext)::operator()(mxnet::RunContext) const + 490
  [bt] (7) 8   libmxnet.so                         0x000000011e96a7ad std::__1::__function::__func&lt;mxnet::imperative::PushFComputeEx(std::__1::function&lt;void (nnvm::NodeAttrs const&amp;, mxnet::OpContext const&amp;, std::__1::vector&lt;mxnet::NDArray, std::__1::allocator&lt;mxnet::NDArray&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::OpReqType, std::__1::allocator&lt;mxnet::OpReqType&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray, std::__1::allocator&lt;mxnet::NDArray&gt; &gt; const&amp;)&gt; const&amp;, nnvm::Op const*, nnvm::NodeAttrs const&amp;, mxnet::Context const&amp;, std::__1::vector&lt;mxnet::engine::Var*, std::__1::allocator&lt;mxnet::engine::Var*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::engine::Var*, std::__1::allocator&lt;mxnet::engine::Var*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::Resource, std::__1::allocator&lt;mxnet::Resource&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray*, std::__1::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray*, std::__1::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::OpReqType, std::__1::allocator&lt;mxnet::OpReqType&gt; &gt; const&amp;)::'lambda'(mxnet::RunContext), std::__1::allocator&lt;mxnet::imperative::PushFComputeEx(std::__1::function&lt;void (nnvm::NodeAttrs const&amp;, mxnet::OpContext const&amp;, std::__1::vector&lt;mxnet::NDArray, std::__1::allocator&lt;mxnet::NDArray&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::OpReqType, std::__1::allocator&lt;mxnet::OpReqType&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray, std::__1::allocator&lt;mxnet::NDArray&gt; &gt; const&amp;)&gt; const&amp;, nnvm::Op const*, nnvm::NodeAttrs const&amp;, mxnet::Context const&amp;, std::__1::vector&lt;mxnet::engine::Var*, std::__1::allocator&lt;mxnet::engine::Var*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::engine::Var*, std::__1::allocator&lt;mxnet::engine::Var*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::Resource, std::__1::allocator&lt;mxnet::Resource&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray*, std::__1::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray*, std::__1::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::OpReqType, std::__1::allocator&lt;mxnet::OpReqType&gt; &gt; const&amp;)::'lambda'(mxnet::RunContext)&gt;, void (mxnet::RunContext)&gt;::operator()(mxnet::RunContext&amp;&amp;) + 29
  [bt] (8) 9   libmxnet.so                         0x000000011e8de6d7 dmlc::ThreadLocalStore&lt;mxnet::engine::ThreadedEngine::BulkStatus&gt;::Get() + 16263
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='stu1130' date='2019-11-19T07:41:21Z'>
		ExpandDimEx needs to skip zero-size cases. I will send in a PR for the fix.
		</comment>
		<comment id='2' author='stu1130' date='2019-11-19T07:50:28Z'>
		MKL-DNN path has been fixed by &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/16837&gt;#16837&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='3' author='stu1130' date='2019-11-19T07:56:13Z'>
		&lt;denchmark-link:https://github.com/TaoLv&gt;@TaoLv&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/16837&gt;#16837&lt;/denchmark-link&gt;
 only deals with zero-dim case, while here it's zero-size which is different.
		</comment>
		<comment id='4' author='stu1130' date='2019-11-19T08:01:25Z'>
		&lt;denchmark-link:https://github.com/reminisce&gt;@reminisce&lt;/denchmark-link&gt;
 Yes, we need also check if any dim is zero.
		</comment>
		<comment id='5' author='stu1130' date='2019-11-19T08:04:21Z'>
		Thank you for clarifying &lt;denchmark-link:https://github.com/reminisce&gt;@reminisce&lt;/denchmark-link&gt;
 . Let me know if anything I can help.
		</comment>
	</comments>
</bug>