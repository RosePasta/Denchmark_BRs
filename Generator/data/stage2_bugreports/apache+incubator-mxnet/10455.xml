<bug id='10455' author='majia-yu' open_date='2018-04-07T07:54:46Z' closed_time='2018-11-27T00:38:13Z'>
	<summary>Bug of group2ctxs for model parallelism</summary>
	<description>
&lt;denchmark-h:h1&gt;Description&lt;/denchmark-h&gt;

mx.mod.Module with group2ctxs gives different results, for num_gpus &lt;= 7 and &gt;= 8.
A short example is the graph as below, behaves differently given different gpus and args.group2ctxs, with a customized softmax.
(Its complete code sample follows later.)
graph = mx.mod.Module(
    context=[mx.cpu(0)],
    symbol=softmax((512, 256), 500, gpus), #softmax here takes a list of gpus and split the calculation to these gpus
    group2ctxs={ 'dev_%d' % i : [mx.gpu(gpu)] for i, gpu in enumerate(gpus)}
               if args.group2ctxs else None
)
&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;

The script magic.py (attached later) gives different results as following:
$ python magic.py --group2ctxs 0 --num_gpus 1    # A single-CPU no-group2ctxs case.
loss: 22.12132072448730468750000000000000
input_grads: 0.00030235992744565010070800781250

$ python magic.py --group2ctxs 1 --num_gpus 1    # Changing group2ctxs alone does not matter.
loss: 22.12132072448730468750000000000000
input_grads: 0.0003023596364073455333709716796

$ python magic.py --group2ctxs 1 --num_gpus 4    # 4 GPUs still performs same.
loss: 22.12132072448730468750000000000000
input_grads: 0.00030235989834181964397430419922

$ python magic.py --group2ctxs 1 --num_gpus 7    # 7 GPUs still performs same.
loss: 22.12132072448730468750000000000000
input_grads: 0.00030235946178436279296875000000

$ python magic.py --group2ctxs 1 --num_gpus 8    # 8 GPUs gives a totally different result!
loss: 22.12132263183593750000000000000000
input_grads: 0.00453650718554854393005371093750
Below is the magic.py.
&lt;denchmark-h:h2&gt;Environment info (Required)&lt;/denchmark-h&gt;

----------Python Info----------
Version      : 3.5.2
Compiler     : GCC 5.4.0 20160609
Build        : ('default', 'Sep 14 2017 22:51:06')
Arch         : ('64bit', 'ELF')
------------Pip Info-----------
Version      : 9.0.3
----------MXNet Info-----------
Version      : 1.1.0
Commit Hash   : &lt;denchmark-link:https://github.com/apache/incubator-mxnet/commit/07a83a0325a3d782513a04f47d711710972cb144&gt;07a83a0&lt;/denchmark-link&gt;

----------System Info----------
Platform     : Linux-4.13.0-36-generic-x86_64-with-Ubuntu-16.04-xenial
system       : Linux
release      : 4.13.0-36-generic
version      : &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/40&gt;#40&lt;/denchmark-link&gt;
~16.04.1-Ubuntu SMP Fri Feb 16 23:25:58 UTC 2018
----------Hardware Info----------
machine      : x86_64
processor    : x86_64
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                56
On-line CPU(s) list:   0-55
Thread(s) per core:    2
Core(s) per socket:    14
Socket(s):             2
NUMA node(s):          2
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 79
Model name:            Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz
Stepping:              1
CPU MHz:               2400.215
CPU max MHz:           3300.0000
CPU min MHz:           1200.0000
BogoMIPS:              4800.43
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              35840K
NUMA node0 CPU(s):     0-13,28-41
NUMA node1 CPU(s):     14-27,42-55
Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cdp_l3 invpcid_single pti retpoline intel_ppin intel_pt tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts
----------Network Test----------
Setting timeout: 10
Timing for FashionMNIST: &lt;denchmark-link:https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/dataset/fashion-mnist/train-labels-idx1-ubyte.gz&gt;https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/dataset/fashion-mnist/train-labels-idx1-ubyte.gz&lt;/denchmark-link&gt;
, DNS: 0.1864 sec, LOAD: 1.3491 sec.
Timing for MXNet: &lt;denchmark-link:https://github.com/apache/incubator-mxnet&gt;https://github.com/apache/incubator-mxnet&lt;/denchmark-link&gt;
, DNS: 0.0119 sec, LOAD: 3.8785 sec.
Timing for Conda: &lt;denchmark-link:https://repo.continuum.io/pkgs/free/&gt;https://repo.continuum.io/pkgs/free/&lt;/denchmark-link&gt;
, DNS: 0.0096 sec, LOAD: 0.4216 sec.
Timing for Gluon Tutorial(cn): &lt;denchmark-link:https://zh.gluon.ai&gt;https://zh.gluon.ai&lt;/denchmark-link&gt;
, DNS: 0.1880 sec, LOAD: 0.8841 sec.
Timing for Gluon Tutorial(en): &lt;denchmark-link:http://gluon.mxnet.io&gt;http://gluon.mxnet.io&lt;/denchmark-link&gt;
, DNS: 0.2153 sec, LOAD: 0.4721 sec.
Timing for PYPI: &lt;denchmark-link:https://pypi.python.org/pypi/pip&gt;https://pypi.python.org/pypi/pip&lt;/denchmark-link&gt;
, DNS: 0.0118 sec, LOAD: 0.9239 sec.
	</description>
	<comments>
		<comment id='1' author='majia-yu' date='2018-04-10T16:10:43Z'>
		For the 8 gpus case, is the result deterministic across multiple runs?
		</comment>
		<comment id='2' author='majia-yu' date='2018-05-29T18:15:35Z'>
		Could you provide the script magic.py and the softmax implementation as an example to investigate?
		</comment>
		<comment id='3' author='majia-yu' date='2018-08-04T05:15:22Z'>
		&lt;denchmark-link:https://github.com/majia-yu&gt;@majia-yu&lt;/denchmark-link&gt;
 do you mind providing a minimum reproducible example?
		</comment>
		<comment id='4' author='majia-yu' date='2018-11-16T21:41:09Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 add [Backend, Pending Requester Info]
		</comment>
		<comment id='5' author='majia-yu' date='2018-11-26T21:30:03Z'>
		&lt;denchmark-link:https://github.com/majia-yu&gt;@majia-yu&lt;/denchmark-link&gt;
 Are you still facing this issue? Requesting a reproducible example for the same (magic.py)
		</comment>
		<comment id='6' author='majia-yu' date='2018-11-27T00:38:06Z'>
		&lt;denchmark-link:https://github.com/vrakesh&gt;@vrakesh&lt;/denchmark-link&gt;
 no, everything is fine thanks
		</comment>
		<comment id='7' author='majia-yu' date='2018-12-11T17:35:45Z'>
		&lt;denchmark-link:https://github.com/majia-yu&gt;@majia-yu&lt;/denchmark-link&gt;
  Hi, could you share how did you solve the issue ?
		</comment>
		<comment id='8' author='majia-yu' date='2018-12-12T22:49:19Z'>
		&lt;denchmark-link:https://github.com/majia-yu&gt;@majia-yu&lt;/denchmark-link&gt;
 were you able to solve this issue ? If so could you share your solution ?
		</comment>
	</comments>
</bug>