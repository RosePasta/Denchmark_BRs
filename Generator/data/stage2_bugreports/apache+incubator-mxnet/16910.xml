<bug id='16910' author='szhengac' open_date='2019-11-26T07:32:55Z' closed_time='2020-04-30T00:24:03Z'>
	<summary>Scalar ndarray does not support exponentiation</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

the following codes produce error:
&lt;denchmark-code&gt;a = mx.nd.array(2)
b = 2**a
&lt;/denchmark-code&gt;

or
&lt;denchmark-code&gt;a = mx.nd.array(2)
b = a**2
&lt;/denchmark-code&gt;

it will be ok if I use vector ndarray:
&lt;denchmark-code&gt;a = mx.nd.array([2])
b = a**2
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Error Message&lt;/denchmark-h&gt;

Traceback (most recent call last):
File "", line 1, in 
File "/home/ubuntu/.local/lib/python3.5/site-packages/mxnet/ndarray/ndarray.py", line 376, in rpow
return power(other, self)
File "/home/ubuntu/.local/lib/python3.5/site-packages/mxnet/ndarray/ndarray.py", line 3824, in power
_internal._rpower_scalar)
File "/home/ubuntu/.local/lib/python3.5/site-packages/mxnet/ndarray/ndarray.py", line 3457, in _ufunc_helper
return rfn_scalar(rhs, float(lhs))
File "", line 32, in _rpower_scalar
File "/home/ubuntu/.local/lib/python3.5/site-packages/mxnet/_ctypes/ndarray.py", line 107, in _imperative_invoke
ctypes.byref(out_stypes)))
File "/home/ubuntu/.local/lib/python3.5/site-packages/mxnet/base.py", line 255, in check_call
raise MXNetError(py_str(_LIB.MXGetLastError()))
mxnet.base.MXNetError: [07:30:49] src/imperative/./imperative_utils.h:146: Operator _rpower_scalar inferring shapes failed.
input shapes:
None
output shapes:
None
operator attributes:
scalar : 2.0
Stack trace:
[bt] (0) /home/ubuntu/.local/lib/python3.5/site-packages/mxnet/libmxnet.so(+0x6a6deb) [0x7fb6c0eaadeb]
[bt] (1) /home/ubuntu/.local/lib/python3.5/site-packages/mxnet/libmxnet.so(mxnet::imperative::SetShapeType(mxnet::Context const&amp;, nnvm::NodeAttrs const&amp;, std::vector&lt;mxnet::NDArray*, std::allocatormxnet::NDArray* &gt; const&amp;, std::vector&lt;mxnet::NDArray*, std::allocatormxnet::NDArray* &gt; const&amp;, mxnet::DispatchMode*)+0x363b) [0x7fb6c40ac18b]
[bt] (2) /home/ubuntu/.local/lib/python3.5/site-packages/mxnet/libmxnet.so(mxnet::Imperative::Invoke(mxnet::Context const&amp;, nnvm::NodeAttrs const&amp;, std::vector&lt;mxnet::NDArray*, std::allocatormxnet::NDArray* &gt; const&amp;, std::vector&lt;mxnet::NDArray*, std::allocatormxnet::NDArray* &gt; const&amp;)+0x1db) [0x7fb6c40b2dfb]
[bt] (3) /home/ubuntu/.local/lib/python3.5/site-packages/mxnet/libmxnet.so(+0x376deff) [0x7fb6c3f71eff]
[bt] (4) /home/ubuntu/.local/lib/python3.5/site-packages/mxnet/libmxnet.so(MXImperativeInvokeEx+0x62) [0x7fb6c3f724c2]
[bt] (5) /usr/lib/python3.5/lib-dynload/_ctypes.cpython-35m-x86_64-linux-gnu.so(ffi_call_unix64+0x4c) [0x7fb70cd71e20]
[bt] (6) /usr/lib/python3.5/lib-dynload/_ctypes.cpython-35m-x86_64-linux-gnu.so(ffi_call+0x2eb) [0x7fb70cd7188b]
[bt] (7) /usr/lib/python3.5/lib-dynload/_ctypes.cpython-35m-x86_64-linux-gnu.so(_ctypes_callproc+0x49a) [0x7fb70cd6c01a]
[bt] (8) /usr/lib/python3.5/lib-dynload/_ctypes.cpython-35m-x86_64-linux-gnu.so(+0x9fcb) [0x7fb70cd5ffcb]
Traceback (most recent call last):
File "", line 1, in 
File "/home/ubuntu/.local/lib/python3.5/site-packages/mxnet/ndarray/ndarray.py", line 372, in pow
return power(self, other)
File "/home/ubuntu/.local/lib/python3.5/site-packages/mxnet/ndarray/ndarray.py", line 3824, in power
_internal._rpower_scalar)
File "/home/ubuntu/.local/lib/python3.5/site-packages/mxnet/ndarray/ndarray.py", line 3459, in _ufunc_helper
return lfn_scalar(lhs, float(rhs))
File "", line 32, in _power_scalar
File "/home/ubuntu/.local/lib/python3.5/site-packages/mxnet/_ctypes/ndarray.py", line 107, in _imperative_invoke
ctypes.byref(out_stypes)))
File "/home/ubuntu/.local/lib/python3.5/site-packages/mxnet/base.py", line 255, in check_call
raise MXNetError(py_str(_LIB.MXGetLastError()))
mxnet.base.MXNetError: [07:31:22] src/imperative/./imperative_utils.h:146: Operator _power_scalar inferring shapes failed.
input shapes:
None
output shapes:
None
operator attributes:
scalar : 2.0
Stack trace:
[bt] (0) /home/ubuntu/.local/lib/python3.5/site-packages/mxnet/libmxnet.so(+0x6a6deb) [0x7fb6c0eaadeb]
[bt] (1) /home/ubuntu/.local/lib/python3.5/site-packages/mxnet/libmxnet.so(mxnet::imperative::SetShapeType(mxnet::Context const&amp;, nnvm::NodeAttrs const&amp;, std::vector&lt;mxnet::NDArray*, std::allocatormxnet::NDArray* &gt; const&amp;, std::vector&lt;mxnet::NDArray*, std::allocatormxnet::NDArray* &gt; const&amp;, mxnet::DispatchMode*)+0x363b) [0x7fb6c40ac18b]
[bt] (2) /home/ubuntu/.local/lib/python3.5/site-packages/mxnet/libmxnet.so(mxnet::Imperative::Invoke(mxnet::Context const&amp;, nnvm::NodeAttrs const&amp;, std::vector&lt;mxnet::NDArray*, std::allocatormxnet::NDArray* &gt; const&amp;, std::vector&lt;mxnet::NDArray*, std::allocatormxnet::NDArray* &gt; const&amp;)+0x1db) [0x7fb6c40b2dfb]
[bt] (3) /home/ubuntu/.local/lib/python3.5/site-packages/mxnet/libmxnet.so(+0x376deff) [0x7fb6c3f71eff]
[bt] (4) /home/ubuntu/.local/lib/python3.5/site-packages/mxnet/libmxnet.so(MXImperativeInvokeEx+0x62) [0x7fb6c3f724c2]
[bt] (5) /usr/lib/python3.5/lib-dynload/_ctypes.cpython-35m-x86_64-linux-gnu.so(ffi_call_unix64+0x4c) [0x7fb70cd71e20]
[bt] (6) /usr/lib/python3.5/lib-dynload/_ctypes.cpython-35m-x86_64-linux-gnu.so(ffi_call+0x2eb) [0x7fb70cd7188b]
[bt] (7) /usr/lib/python3.5/lib-dynload/_ctypes.cpython-35m-x86_64-linux-gnu.so(_ctypes_callproc+0x49a) [0x7fb70cd6c01a]
[bt] (8) /usr/lib/python3.5/lib-dynload/_ctypes.cpython-35m-x86_64-linux-gnu.so(+0x9fcb) [0x7fb70cd5ffcb]
	</description>
	<comments>
		<comment id='1' author='szhengac' date='2019-11-26T07:40:59Z'>
		Please note that scalar tensors are only formally supported in mxnet.numpy module. Many operators in mx.nd do not have expected behaviors on scalar tensors. You will also need to turn on NumPy-compatible shape inference mode explicitly, because shape=() was treated as unknown shape information in the default mode for backward compatibility.
&gt;&gt;&gt; from mxnet import np, npx
&gt;&gt;&gt; npx.set_np()  # turn on numpy-compatible shape inference mode
&gt;&gt;&gt; a = np.array(2)
&gt;&gt;&gt; 2 ** a
array(4.)
&gt;&gt;&gt; a ** 2
array(4.)

&gt;&gt;&gt; import mxnet as mx
&gt;&gt;&gt; a = mx.nd.array(2)
&gt;&gt;&gt; 2 ** a

4.0
&lt;NDArray  @cpu(0)&gt;
&gt;&gt;&gt; a ** 2

4.0
&lt;NDArray  @cpu(0)&gt;
		</comment>
		<comment id='2' author='szhengac' date='2020-04-30T00:24:01Z'>
		Close as it is expected and has been resolved in np interface
		</comment>
	</comments>
</bug>