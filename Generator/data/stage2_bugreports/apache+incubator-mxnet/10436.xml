<bug id='10436' author='milandesai' open_date='2018-04-06T08:30:03Z' closed_time='2018-09-25T18:38:13Z'>
	<summary>FeedForward.scala and NDArrayIter.scala leak memory by not disposing of NDArrays</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

FeedForward.scala and NDArrayIter.scala leak memory by not disposing of NDArrays. We see the below leak warnings occur running on MXNet 1.1.0. Additionally, there is no clean way of disposing a FeedForward and its contents.
&lt;denchmark-h:h2&gt;Version&lt;/denchmark-h&gt;

MXNet 1.1.0
&lt;denchmark-h:h2&gt;Error Message:&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;[2018-04-06 01:12:13,895] WARN  - Finalizer - WarnIfNotDisposed - LEAK: An instance of class ml.dmlc.mxnet.NDArray was not disposed. Creation point of this resource was:
	java.lang.Thread.getStackTrace(Thread.java:1552)
	ml.dmlc.mxnet.WarnIfNotDisposed.$init$(WarnIfNotDisposed.scala:52)
	ml.dmlc.mxnet.NDArray.&lt;init&gt;(NDArray.scala:549)
	ml.dmlc.mxnet.NDArray.slice(NDArray.scala:632)
	ml.dmlc.mxnet.FeedForward.$anonfun$predict$5(FeedForward.scala:233)
	scala.collection.TraversableLike$WithFilter.$anonfun$foreach$1(TraversableLike.scala:789)
	scala.collection.IndexedSeqOptimized.foreach(IndexedSeqOptimized.scala:32)
	scala.collection.IndexedSeqOptimized.foreach$(IndexedSeqOptimized.scala:29)
	scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:191)
	scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:788)
	ml.dmlc.mxnet.FeedForward.predict(FeedForward.scala:232)

[2018-04-06 01:12:13,895] WARN  - Finalizer - WarnIfNotDisposed - LEAK: An instance of class ml.dmlc.mxnet.NDArray was not disposed. Creation point of this resource was:
	java.lang.Thread.getStackTrace(Thread.java:1552)
	ml.dmlc.mxnet.WarnIfNotDisposed.$init$(WarnIfNotDisposed.scala:52)
	ml.dmlc.mxnet.NDArray.&lt;init&gt;(NDArray.scala:549)
	ml.dmlc.mxnet.NDArray.slice(NDArray.scala:632)
	ml.dmlc.mxnet.io.NDArrayIter.$anonfun$_getData$2(NDArrayIter.scala:163)
	scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:234)
	scala.collection.Iterator.foreach(Iterator.scala:929)
	scala.collection.Iterator.foreach$(Iterator.scala:929)
	scala.collection.AbstractIterator.foreach(Iterator.scala:1417)
	scala.collection.IterableLike.foreach(IterableLike.scala:71)
	scala.collection.IterableLike.foreach$(IterableLike.scala:70)
	scala.collection.AbstractIterable.foreach(Iterable.scala:54)
	scala.collection.TraversableLike.map(TraversableLike.scala:234)
	scala.collection.TraversableLike.map$(TraversableLike.scala:227)
	scala.collection.AbstractTraversable.map(Traversable.scala:104)
	ml.dmlc.mxnet.io.NDArrayIter._getData(NDArrayIter.scala:163)
	ml.dmlc.mxnet.io.NDArrayIter.getData(NDArrayIter.scala:176)
	ml.dmlc.mxnet.io.NDArrayIter.next(NDArrayIter.scala:134)
	ml.dmlc.mxnet.FeedForward.predict(FeedForward.scala:226)
&lt;/denchmark-code&gt;

The culprit appears to be FeedForward.scala:233 and NDArrayIter:163. Additionally, it would be nice to to provide a method that disposes of a FeedForward; i.e. it disposes the symbol, executor, and aux/arg params.
	</description>
	<comments>
		<comment id='1' author='milandesai' date='2018-05-21T20:30:06Z'>
		Any chance of having this issue bumped up?  This bug renders training via Scala impossible in many cases and could be problematic for large batch decoding/inference.
		</comment>
		<comment id='2' author='milandesai' date='2018-05-23T06:47:18Z'>
		Thanks for your message! We are currently working on a draft proposal to solve this issue and send to the devlist. The disposing method currently brings a great inconvenience to users. In the past, we tried to place that into finalizer stage and it sometimes crash for unknown reasons. Will follow up with this thread with our progress.
		</comment>
		<comment id='3' author='milandesai' date='2018-05-23T21:38:02Z'>
		Great!  Looking forward to it and happy to help test and/or review.
		</comment>
		<comment id='4' author='milandesai' date='2018-07-31T18:19:56Z'>
		Memory leak was a result of the FeedForward predict method not properly disposing of two NDArrays. This was fixed in the PR above. Issue can be closed. &lt;denchmark-link:https://github.com/nswamy&gt;@nswamy&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='milandesai' date='2018-07-31T18:22:39Z'>
		&lt;denchmark-link:https://github.com/wellner&gt;@wellner&lt;/denchmark-link&gt;
 Currently &lt;denchmark-link:https://github.com/yzhliu&gt;@yzhliu&lt;/denchmark-link&gt;
 brings a solution on Memory leaks here: &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/11751&gt;#11751&lt;/denchmark-link&gt;
. Please take a look in here.
		</comment>
		<comment id='6' author='milandesai' date='2018-09-25T05:19:35Z'>
		Can this issue be closed? &lt;denchmark-link:https://github.com/milandesai&gt;@milandesai&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/wellner&gt;@wellner&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='milandesai' date='2018-09-25T18:31:58Z'>
		&lt;denchmark-link:https://github.com/sandeep-krishnamurthy&gt;@sandeep-krishnamurthy&lt;/denchmark-link&gt;
 Please close this issue as PRs with fixes have been submitted.
&lt;denchmark-link:https://github.com/milandesai&gt;@milandesai&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/wellner&gt;@wellner&lt;/denchmark-link&gt;
 Please feel free to reopen the issue if you see it again.
		</comment>
	</comments>
</bug>