<bug id='16833' author='stu1130' open_date='2019-11-15T22:05:44Z' closed_time='2019-11-16T12:21:00Z'>
	<summary>[Numpy] expands_dims cannot suport scalar</summary>
	<description>
build from source with codebase as of today
build flag:
&lt;denchmark-code&gt;cmake -GNinja -DUSE_CUDA=OFF -DBLAS=apple -DUSE_OPENCV=ON -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/local/opt/ccache/bin/ccache -DCMAKE_C_COMPILER_LAUNCHER=/usr/local/opt/ccache/bin/ccache -DUSE_MKLDNN=ON -DUSE_OPENMP=OFF -DCMAKE_BUILD_TYPE=DEBUG ..
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;&gt;&gt;&gt; from mxnet import npx, np
&gt;&gt;&gt; npx.set_np()
&gt;&gt;&gt; a = np.array(1)
&gt;&gt;&gt; np.expand_dims(a, 0)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/leecheng/workspace/incubator-mxnet/python/mxnet/numpy/multiarray.py", line 916, in __repr__
    array_str = self.asnumpy().__repr__()
  File "/Users/leecheng/workspace/incubator-mxnet/python/mxnet/ndarray/ndarray.py", line 2549, in asnumpy
    ctypes.c_size_t(data.size)))
  File "/Users/leecheng/workspace/incubator-mxnet/python/mxnet/base.py", line 255, in check_call
    raise MXNetError(py_str(_LIB.MXGetLastError()))
mxnet.base.MXNetError: [13:49:23] ../src/ndarray/ndarray.cc:487: MKLDNN doesn't support 0 dimensions
Stack trace:
  [bt] (0) 1   libmxnet.dylib                      0x00000001170fe729 dmlc::LogMessageFatal::~LogMessageFatal() + 57
  [bt] (1) 2   libmxnet.dylib                      0x000000011739ee8f mxnet::NDArray::Chunk::SetMKLMem(mxnet::TShape const&amp;, int) + 511
  [bt] (2) 3   libmxnet.dylib                      0x000000011739fa15 mxnet::NDArray::GetMKLDNNData() const + 789
  [bt] (3) 4   libmxnet.dylib                      0x0000000117a57ebc mxnet::op::MKLDNNReshapeFwd::MKLDNNReshapeFwd(mxnet::OpReqType const&amp;, mxnet::NDArray const&amp;, mxnet::NDArray const&amp;) + 140
  [bt] (4) 5   libmxnet.dylib                      0x0000000117a596cd mxnet::op::GetReshapeForward(mxnet::OpReqType const&amp;, mxnet::NDArray const&amp;, mxnet::NDArray const&amp;) + 237
  [bt] (5) 6   libmxnet.dylib                      0x0000000117a5a6ed mxnet::op::MKLDNNReshapeForward(nnvm::NodeAttrs const&amp;, mxnet::OpContext const&amp;, mxnet::NDArray const&amp;, mxnet::OpReqType const&amp;, mxnet::NDArray const&amp;) + 1005
  [bt] (6) 7   libmxnet.dylib                      0x00000001195d378d mxnet::op::ExpandDimEx(nnvm::NodeAttrs const&amp;, mxnet::OpContext const&amp;, std::__1::vector&lt;mxnet::NDArray, std::__1::allocator&lt;mxnet::NDArray&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::OpReqType, std::__1::allocator&lt;mxnet::OpReqType&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray, std::__1::allocator&lt;mxnet::NDArray&gt; &gt; const&amp;) + 589
  [bt] (7) 8   libmxnet.dylib                      0x00000001172bc708 mxnet::imperative::PushFComputeEx(std::__1::function&lt;void (nnvm::NodeAttrs const&amp;, mxnet::OpContext const&amp;, std::__1::vector&lt;mxnet::NDArray, std::__1::allocator&lt;mxnet::NDArray&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::OpReqType, std::__1::allocator&lt;mxnet::OpReqType&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray, std::__1::allocator&lt;mxnet::NDArray&gt; &gt; const&amp;)&gt; const&amp;, nnvm::Op const*, nnvm::NodeAttrs const&amp;, mxnet::Context const&amp;, std::__1::vector&lt;mxnet::engine::Var*, std::__1::allocator&lt;mxnet::engine::Var*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::engine::Var*, std::__1::allocator&lt;mxnet::engine::Var*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::Resource, std::__1::allocator&lt;mxnet::Resource&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray*, std::__1::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray*, std::__1::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::OpReqType, std::__1::allocator&lt;mxnet::OpReqType&gt; &gt; const&amp;)::'lambda'(mxnet::RunContext)::operator()(mxnet::RunContext) const + 584
  [bt] (8) 9   libmxnet.dylib                      0x00000001172bcfcd std::__1::__function::__func&lt;mxnet::imperative::PushFComputeEx(std::__1::function&lt;void (nnvm::NodeAttrs const&amp;, mxnet::OpContext const&amp;, std::__1::vector&lt;mxnet::NDArray, std::__1::allocator&lt;mxnet::NDArray&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::OpReqType, std::__1::allocator&lt;mxnet::OpReqType&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray, std::__1::allocator&lt;mxnet::NDArray&gt; &gt; const&amp;)&gt; const&amp;, nnvm::Op const*, nnvm::NodeAttrs const&amp;, mxnet::Context const&amp;, std::__1::vector&lt;mxnet::engine::Var*, std::__1::allocator&lt;mxnet::engine::Var*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::engine::Var*, std::__1::allocator&lt;mxnet::engine::Var*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::Resource, std::__1::allocator&lt;mxnet::Resource&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray*, std::__1::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray*, std::__1::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::OpReqType, std::__1::allocator&lt;mxnet::OpReqType&gt; &gt; const&amp;)::'lambda'(mxnet::RunContext), std::__1::allocator&lt;mxnet::imperative::PushFComputeEx(std::__1::function&lt;void (nnvm::NodeAttrs const&amp;, mxnet::OpContext const&amp;, std::__1::vector&lt;mxnet::NDArray, std::__1::allocator&lt;mxnet::NDArray&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::OpReqType, std::__1::allocator&lt;mxnet::OpReqType&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray, std::__1::allocator&lt;mxnet::NDArray&gt; &gt; const&amp;)&gt; const&amp;, nnvm::Op const*, nnvm::NodeAttrs const&amp;, mxnet::Context const&amp;, std::__1::vector&lt;mxnet::engine::Var*, std::__1::allocator&lt;mxnet::engine::Var*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::engine::Var*, std::__1::allocator&lt;mxnet::engine::Var*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::Resource, std::__1::allocator&lt;mxnet::Resource&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray*, std::__1::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::NDArray*, std::__1::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::__1::vector&lt;mxnet::OpReqType, std::__1::allocator&lt;mxnet::OpReqType&gt; &gt; const&amp;)::'lambda'(mxnet::RunContext)&gt;, void (mxnet::RunContext)&gt;::operator()(mxnet::RunContext&amp;&amp;) + 29

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='stu1130' date='2019-11-15T22:36:52Z'>
		&lt;denchmark-link:https://github.com/PatricZhao&gt;@PatricZhao&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='stu1130' date='2019-11-16T03:38:33Z'>
		&lt;denchmark-link:https://github.com/stu1130&gt;@stu1130&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/reminisce&gt;@reminisce&lt;/denchmark-link&gt;
 Thanks for reporting this issue. I can reproduce this from my side. I just figured out the root cause, when input's ndim is 0, it should not execute MKL-DNN pass. Anyway, I will submit a PR to fix this issue soon. Sorry for any inconvenience. &lt;denchmark-link:https://github.com/pengzhao-intel&gt;@pengzhao-intel&lt;/denchmark-link&gt;

Also tested below input, and no error.
&lt;denchmark-code&gt;&gt;&gt;&gt; a = np.array([1])
&gt;&gt;&gt; np.expand_dims(a, 0)
mkldnn_verbose,info,Intel MKL-DNN v1.0.4 (commit a0a87d662edeef38d01db4ac5dd25f59a1f0881f)
mkldnn_verbose,info,Detected ISA is Intel AVX-512 with Intel DL Boost
mkldnn_verbose,exec,cpu,reorder,simple:any,undef,src_f32::blocked:a:f0 dst_f32::blocked:a:f0,num:1,1,11.0342
array([[1.]])
&gt;&gt;&gt;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='stu1130' date='2019-11-16T04:13:06Z'>
		&lt;denchmark-link:https://github.com/stu1130&gt;@stu1130&lt;/denchmark-link&gt;
 PR#16837 is filed. Please help check if it fix this issue. Thanks.
		</comment>
	</comments>
</bug>