<bug id='18068' author='ZheyuYe' open_date='2020-04-15T16:21:51Z' closed_time='2020-05-22T18:30:51Z'>
	<summary>[Numpy] Failed for Boolean type</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

Many operations are unreliable in numpy interface but works well in mx.nd.ndarray, such as an example showcased in the reproducible code snippet. The reasons for the above problems can be boiled down to the incompatibility of Boolean type which is the return type of mx.np.equal'. Unlike the mx.np.equaloperation,mx.nd.equal` takes float32 as the resulting data type and works fine in this case.
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

import mxnet as mx
inputs = mx.np.array([1,1,1])
fake_data = mx.np.array([1,1,0])
1 - mx.np.equal(fake_data, inputs)

inputs = mx.nd.array([1,1,1])
fake_data = mx.nd.array([1,1,0])
1 - mx.nd.equal(fake_data, inputs)
&lt;denchmark-h:h3&gt;Error Message&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;MXNetError                                Traceback (most recent call last)
/usr/local/lib/python3.6/dist-packages/IPython/core/formatters.py in __call__(self, obj)
    700                 type_pprinters=self.type_printers,
    701                 deferred_pprinters=self.deferred_printers)
--&gt; 702             printer.pretty(obj)
    703             printer.flush()
    704             return stream.getvalue()

/usr/local/lib/python3.6/dist-packages/IPython/lib/pretty.py in pretty(self, obj)
    400                         if cls is not object \
    401                                 and callable(cls.__dict__.get('__repr__')):
--&gt; 402                             return _repr_pprint(obj, self, cycle)
    403 
    404             return _default_pprint(obj, self, cycle)

/usr/local/lib/python3.6/dist-packages/IPython/lib/pretty.py in _repr_pprint(obj, p, cycle)
    695     """A pprint that just redirects to the normal repr function."""
    696     # Find newlines and replace them with p.break_()
--&gt; 697     output = repr(obj)
    698     for idx,output_line in enumerate(output.splitlines()):
    699         if idx:

~/mxnet/python/mxnet/numpy/multiarray.py in __repr__(self)
   1163          [0.84426576 0.60276335 0.85794562]] @gpu(0)
   1164         """
-&gt; 1165         array_str = self.asnumpy().__repr__()
   1166         dtype = self.dtype
   1167         if 'dtype=' in array_str:

~/mxnet/python/mxnet/ndarray/ndarray.py in asnumpy(self)
   2564             self.handle,
   2565             data.ctypes.data_as(ctypes.c_void_p),
-&gt; 2566             ctypes.c_size_t(data.size)))
   2567         return data
   2568 

~/mxnet/python/mxnet/base.py in check_call(ret)
    244     """
    245     if ret != 0:
--&gt; 246         raise get_last_ffi_error()
    247 
    248 

MXNetError: Traceback (most recent call last):
  File "../src/operator/numpy/./../tensor/elemwise_binary_scalar_op.h", line 244
MXNetError: Unknown type enum 7
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Comments&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/sxjscience&gt;@sxjscience&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='ZheyuYe' date='2020-04-15T16:32:04Z'>
		import mxnet as mx
inputs = mx.np.array([1,1,1])
fake_data = mx.np.array([1,1,0])
labels = mx.np.ones_like(inputs) - mx.np.equal(fake_data, inputs)
It works well.
		</comment>
		<comment id='2' author='ZheyuYe' date='2020-04-15T16:35:13Z'>
		We should enhance the support of boolean type. The current problem is that operators like np.equal(a, b), a == b will return a array with boolean type. However, this array will usually be updated with operations like 1 - mask.
		</comment>
		<comment id='3' author='ZheyuYe' date='2020-04-15T16:35:35Z'>
		&lt;denchmark-link:https://github.com/haojin2&gt;@haojin2&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/yzhliu&gt;@yzhliu&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/reminisce&gt;@reminisce&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/szha&gt;@szha&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='ZheyuYe' date='2020-04-29T23:03:32Z'>
		Assignee: &lt;denchmark-link:https://github.com/CassiniXu&gt;@CassiniXu&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='ZheyuYe' date='2020-05-15T07:54:07Z'>
		Thanks for your issue,
This is indeed a very interesting use case.
I noticed that this problem also occurred in PyTorch:
&gt;&gt;&gt; inputs = torch.tensor([1,1,1])
&gt;&gt;&gt; fake_data = torch.tensor([1,1,0])
&gt;&gt;&gt; 1 - (inputs == fake_data)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/ubuntu/anaconda3/lib/python3.7/site-packages/torch/tensor.py", line 394, in __rsub__
    return _C._VariableFunctions.rsub(self, other)
RuntimeError: Subtraction, the `-` operator, with a bool tensor is not supported. If you are trying to invert a mask, use the `~` or `logical_not()` operator instead.
&gt;&gt;&gt;
If we are capable of providing a solution to this case, that would be a huge advantage over PyTorch.
		</comment>
		<comment id='6' author='ZheyuYe' date='2020-05-22T18:30:51Z'>
		closed by &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/18277&gt;#18277&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>