<bug id='15659' author='matteosal' open_date='2019-07-25T18:24:16Z' closed_time='2019-08-04T13:50:13Z'>
	<summary>Dropout produces wrong mask with MKL-DNN</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

Dropout mask (second output) is always full of zeros when mxnet is built with MKL-DNN. Weirdly, setting MXNET_MKLDNN_ENABLED=0 doesn't fix it, but using a build without MKL-DNN does.
&lt;denchmark-h:h2&gt;Environment info (Required)&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;----------Python Info----------
Version      : 3.7.2
Compiler     : GCC 7.3.0
Build        : ('default', 'Dec 29 2018 06:19:36')
Arch         : ('64bit', '')
------------Pip Info-----------
Version      : 19.0.1
Directory    : /opt/Anaconda/lib/python3.7/site-packages/pip
----------MXNet Info-----------
Version      : 1.5.0
Directory    : /home/matteo/Git/mxnet/python/mxnet
Commit hash file "/home/matteo/Git/mxnet/python/mxnet/COMMIT_HASH" not found. Not installed from pre-built package or built from source.
Library      : ['/home/matteo/Git/mxnet/python/mxnet/../../lib/libmxnet.so']
Build features:
✖ CUDA
✖ CUDNN
✖ NCCL
✖ CUDA_RTC
✖ TENSORRT
✔ CPU_SSE
✔ CPU_SSE2
✔ CPU_SSE3
✔ CPU_SSE4_1
✔ CPU_SSE4_2
✖ CPU_SSE4A
✔ CPU_AVX
✖ CPU_AVX2
✖ OPENMP
✖ SSE
✔ F16C
✔ JEMALLOC
✖ BLAS_OPEN
✔ BLAS_ATLAS
✖ BLAS_MKL
✖ BLAS_APPLE
✖ LAPACK
✔ MKLDNN
✖ OPENCV
✖ CAFFE
✖ PROFILER
✖ DIST_KVSTORE
✖ CXX14
✖ INT64_TENSOR_SIZE
✖ SIGNAL_HANDLER
✖ DEBUG
----------System Info----------
Platform     : Linux-4.15.0-55-generic-x86_64-with-debian-buster-sid
system       : Linux
node         : mongolius
release      : 4.15.0-55-generic
version      : #60-Ubuntu SMP Tue Jul 2 18:22:20 UTC 2019
----------Hardware Info----------
machine      : x86_64
processor    : x86_64
Architecture:        x86_64
CPU op-mode(s):      32-bit, 64-bit
Byte Order:          Little Endian
CPU(s):              8
On-line CPU(s) list: 0-7
Thread(s) per core:  2
Core(s) per socket:  4
Socket(s):           1
NUMA node(s):        1
Vendor ID:           GenuineIntel
CPU family:          6
Model:               94
Model name:          Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz
Stepping:            3
CPU MHz:             2700.253
CPU max MHz:         3500,0000
CPU min MHz:         800,0000
BogoMIPS:            5184.00
Virtualization:      VT-x
L1d cache:           32K
L1i cache:           32K
L2 cache:            256K
L3 cache:            6144K
NUMA node0 CPU(s):   0-7
Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf tsc_known_freq pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb invpcid_single pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx rdseed adx smap clflushopt intel_pt xsaveopt xsavec xgetbv1 xsaves dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp md_clear flush_l1d
----------Network Test----------
Setting timeout: 10
Timing for MXNet: https://github.com/apache/incubator-mxnet, DNS: 0.0117 sec, LOAD: 0.8935 sec.
Timing for Gluon Tutorial(en): http://gluon.mxnet.io, DNS: 0.0599 sec, LOAD: 2.1901 sec.
Timing for Gluon Tutorial(cn): https://zh.gluon.ai, DNS: 0.1028 sec, LOAD: 0.9832 sec.
Timing for FashionMNIST: https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/dataset/fashion-mnist/train-labels-idx1-ubyte.gz, DNS: 0.0657 sec, LOAD: 1.2597 sec.
Timing for PYPI: https://pypi.python.org/pypi/pip, DNS: 0.0380 sec, LOAD: 0.8543 sec.
Timing for Conda: https://repo.continuum.io/pkgs/free/, DNS: 0.0395 sec, LOAD: 0.4625 sec.
&lt;/denchmark-code&gt;

Using python package.
&lt;denchmark-h:h2&gt;Build info (Required if built from source)&lt;/denchmark-h&gt;

Compiler: gcc
MXNet commit hash: &lt;denchmark-link:https://github.com/apache/incubator-mxnet/commit/076b2f330c60f05cb939beea28dd04cd571a34c0&gt;076b2f3&lt;/denchmark-link&gt;

Build config: plain config.mk, except for USE_OPENCV=0
&lt;denchmark-h:h2&gt;Minimum reproducible example&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import mxnet as mx

json = '{\"nodes\":[{\"op\":\"null\",\"name\":\"in\",\"inputs\":[]},{\"op\":\
\"Dropout\",\"name\":\"dropout\",\"attrs\":{\"axes\":\"()\",\"mode\":\
\"always\",\"p\":\"0.2\"},\"inputs\":[[0,0,0]]}],\"arg_nodes\":[0],\"\
heads\":[[1,0,0],[1,1,0]]}'

sym = mx.sym.load_json(json)
ex = sym.bind(mx.cpu(), {'in': mx.nd.array(range(10))})
ex.forward()
print(ex.outputs)
&lt;/denchmark-code&gt;

When running the above script using a build with MKL-DNN, the second output is full of 1.e-45. When using a build without MKL-DNN, it is as expected.
A side question: if I were to build that symbol using the symbol API, how would I grab the second Drouput output?
	</description>
	<comments>
		<comment id='1' author='matteosal' date='2019-07-25T18:24:19Z'>
		Hey, this is the MXNet Label Bot.
Thank you for submitting the issue! I will try and suggest some labels so that the appropriate MXNet community members can help resolve it.
Here are my recommended labels: Build
		</comment>
		<comment id='2' author='matteosal' date='2019-07-26T03:47:05Z'>
		&lt;denchmark-link:https://github.com/wuxun-zhang&gt;@wuxun-zhang&lt;/denchmark-link&gt;
 please take a look for this issue.
		</comment>
		<comment id='3' author='matteosal' date='2019-07-26T04:49:24Z'>
		Some background: MKL-DNN itself doesn't support dropout primitive. When MXNet is built with MKL-DNN, it will use functions from VSL to implement dropout. It's kind of legacy code from MKL2017 integration. That's why it cannot be disabled by MXNET_MKLDNN_ENABLED=0.
		</comment>
		<comment id='4' author='matteosal' date='2019-07-26T05:16:37Z'>
		OK. I'll look into this issue.
		</comment>
		<comment id='5' author='matteosal' date='2019-07-27T14:45:08Z'>
		&lt;denchmark-link:https://github.com/matteosal&gt;@matteosal&lt;/denchmark-link&gt;
 Thanks for reporting this issue. Seems this is not a computational error. I have looked into the  code, and found that the output  is forced to be calculated and stored with  type instead of original  or  type. So, when you tried to access the value of , the wrong answer  will be printed.  Refer to &lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/src/operator/nn/dropout-inl.h#L131&gt;forward pass&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/src/operator/nn/dropout-inl.h#L152&gt;backward pass&lt;/denchmark-link&gt;
.
You can build from source by commenting out the  option in &lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/Makefile#L150&gt;Makefile&lt;/denchmark-link&gt;
 to work around it temporarily. We'll submit a PR for this after completing the verification locally.
		</comment>
	</comments>
</bug>