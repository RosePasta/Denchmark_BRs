<bug id='15933' author='eric-haibin-lin' open_date='2019-08-16T21:23:30Z' closed_time='2020-04-30T00:11:45Z'>
	<summary>indexing op does not report out of bound indices</summary>
	<description>
out of bound error is reported in numpy:
&lt;denchmark-code&gt;&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.ones((1,))[[10]]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: index 10 is out of bounds for axis 0 with size 1
&gt;&gt;&gt;
&lt;/denchmark-code&gt;

but MXNet does not:
&lt;denchmark-code&gt;&gt;&gt;&gt; import mxnet as mx
&gt;&gt;&gt; mx.nd.ones((1,))[[10]]
[6.4e-44]
&lt;NDArray 1 @cpu(0)&gt;
&lt;/denchmark-code&gt;

We can reuse the kernel in nd.take(mode='raise') to report such an error.
&lt;denchmark-link:https://github.com/reminisce&gt;@reminisce&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/haojin2&gt;@haojin2&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/hhexiy&gt;@hhexiy&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='eric-haibin-lin' date='2019-08-16T21:23:32Z'>
		Hey, this is the MXNet Label Bot.
Thank you for submitting the issue! I will try and suggest some labels so that the appropriate MXNet community members can help resolve it.
Here are my recommended labels: Bug
		</comment>
		<comment id='2' author='eric-haibin-lin' date='2019-08-17T11:13:01Z'>
		&lt;denchmark-link:https://github.com/eric-haibin-lin&gt;@eric-haibin-lin&lt;/denchmark-link&gt;
 ,
From a quick view,
take as of now doesn't actually support mode=raise,



incubator-mxnet/src/operator/tensor/indexing_op.h


        Lines 671 to 675
      in
      a8b9728






 .describe("Specify how out-of-bound indices bahave. Default is \"clip\"." 



 " \"clip\" means clip to the range. So, if all indices mentioned are too large," 



 " they are replaced by the index that addresses the last element along an axis. " 



 " \"wrap\" means to wrap around. " 



 " \"raise\" means to raise an error, not supported yet."); 








incubator-mxnet/src/operator/tensor/indexing_op.h


        Lines 679 to 709
      in
      a8b9728






 inline bool TakeOpShape(const nnvm::NodeAttrs&amp; attrs, 



                         mxnet::ShapeVector *in_attrs, 



                         mxnet::ShapeVector *out_attrs) { 



 using namespace mshadow; 



 const mxnet::TShape &amp;arrshape = (*in_attrs)[take_::kArr]; 



 const mxnet::TShape &amp;idxshape = (*in_attrs)[take_::kIdx]; 



 if (!shape_is_known(idxshape)) return false; 



 const TakeParam&amp; param = nnvm::get&lt;TakeParam&gt;(attrs.parsed); 



 if (param.mode == take_::kRaise) { 



 LOG(FATAL) &lt;&lt; "Raise is not supported for the time being..."; 



   } 



 CHECK(param.axis &gt;= -1 * arrshape.ndim() &amp;&amp; param.axis &lt; arrshape.ndim()) 



     &lt;&lt; "Axis should be in the range of [-r, r-1] where r is the rank of input tensor"; 



 



   out_attrs-&gt;clear(); 



 



 const index_t actual_axis = param.axis + ((param.axis &lt; 0) ? arrshape.ndim() : 0); 



   mxnet::TShape oshape(idxshape.ndim() + arrshape.ndim() - 1, -1); 



 for (index_t i = 0; i &lt; idxshape.ndim(); ++i) { 



     oshape[i + actual_axis] = idxshape[i]; 



   } 



 for (index_t i = 0; i &lt; arrshape.ndim(); i++) { 



 if (i &lt; actual_axis) { 



       oshape[i] = arrshape[i]; 



     } else if (i &gt; actual_axis) { 



       oshape[i + idxshape.ndim() - 1] = arrshape[i]; 



     } 



   } 



   out_attrs-&gt;push_back(oshape); 



 return shape_is_known(oshape); 



 } 





So as of now, it doesn't actually raise out-of-bounds error.
		</comment>
		<comment id='3' author='eric-haibin-lin' date='2019-09-02T00:10:28Z'>
		Raise mode added in &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/15887&gt;#15887&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>