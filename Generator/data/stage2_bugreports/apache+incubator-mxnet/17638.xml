<bug id='17638' author='ZheyuYe' open_date='2020-02-20T19:39:17Z' closed_time='2020-02-25T03:58:26Z'>
	<summary>[Numpy] unknown type_flag=7</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

A series of issues related to  occured afther the pull &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/17438&gt;#17438&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/apache/incubator-tvm/pull/4571/&gt;#4571&lt;/denchmark-link&gt;
 in tvm. This is, after all, a serious problem that makes many of deep numpy's features unusable.
Here is a simple error case.
&lt;denchmark-h:h3&gt;Error Message&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;---------------------------------------------------------------------------
MXNetError                                Traceback (most recent call last)
&lt;ipython-input-2-48e3c90810f4&gt; in &lt;module&gt;
     17 foo = Foo()
     18 foo.hybridize()
---&gt; 19 out = foo(mx.np.ones((10,), ctx=mx.gpu()))

~/incubator-mxnet/python/mxnet/gluon/block.py in __call__(self, *args)
    680             hook(self, args)
    681 
--&gt; 682         out = self.forward(*args)
    683 
    684         for hook in self._forward_hooks.values():

~/incubator-mxnet/python/mxnet/gluon/block.py in forward(self, x, *args)
   1175                                      'Find all contexts = {}'.format(ctx_set))
   1176                 with ctx:
-&gt; 1177                     return self._call_cached_op(x, *args)
   1178             with ctx:
   1179                 try:

~/incubator-mxnet/python/mxnet/gluon/block.py in _call_cached_op(self, *args)
   1022         cargs = [args_without_none[i] if is_arg else i.data()
   1023                  for is_arg, i in self._cached_op_args]
-&gt; 1024         out = self._cached_op(*cargs)
   1025         if isinstance(out, NDArray):
   1026             out = [out]

~/incubator-mxnet/python/mxnet/_ctypes/ndarray.py in __call__(self, *args, **kwargs)
    167             ctypes.byref(num_output),
    168             ctypes.byref(output_vars),
--&gt; 169             ctypes.byref(out_stypes)))
    170 
    171         if original_output is not None:

~/incubator-mxnet/python/mxnet/base.py in check_call(ret)
    244     """
    245     if ret != 0:
--&gt; 246         raise get_last_ffi_error()
    247 
    248 

MXNetError: Traceback (most recent call last):
  File "../src/nnvm/plan_memory.cc", line 58
MXNetError: unknown type_flag=7
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import mxnet as mx
import numpy as np
from numpy.testing import assert_allclose
from mxnet.gluon import HybridBlock
mx.npx.set_np()

class Foo(HybridBlock):
    def __init__(self, prefix=None, params=None):
        super(Foo, self).__init__(prefix=prefix, params=params)

    def hybrid_forward(self, F, valid_length):
        mask = (F.np.ones((10,)) &lt; valid_length).astype(np.float32)
        mask2 = (F.np.ones((10,)) &lt; valid_length).astype(np.float32)
        mask = mask * F.np.expand_dims(mask2, axis=-1)
        return mask

foo = Foo()
foo.hybridize()
out = foo(mx.np.ones((10,), ctx=mx.gpu()))
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Comments&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/sxjscience&gt;@sxjscience&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/yzhliu&gt;@yzhliu&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='ZheyuYe' date='2020-02-20T21:24:56Z'>
		looking into it. thanks for reporting.
		</comment>
		<comment id='2' author='ZheyuYe' date='2020-02-20T21:34:45Z'>
		I find it could be further simplified:
import mxnet as mx
import numpy as np
from numpy.testing import assert_allclose
from mxnet.gluon import HybridBlock
mx.npx.set_np()

class Foo(HybridBlock):
    def __init__(self, prefix=None, params=None):
        super(Foo, self).__init__(prefix=prefix, params=params)

    def hybrid_forward(self, F, valid_length):
        mask = (F.np.ones((10,)) &lt; valid_length).astype(np.float32)
        return mask

foo = Foo()
foo.hybridize()
out = foo(mx.np.ones((10,), ctx=mx.gpu()))
print(out)
		</comment>
		<comment id='3' author='ZheyuYe' date='2020-02-20T22:07:37Z'>
		import mxnet as mx
import numpy as np
import os
from numpy.testing import assert_allclose
from mxnet.gluon import HybridBlock
mx.npx.set_np()

os.environ['DMLC_LOG_STACK_TRACE_DEPTH'] = '30'

class Foo(HybridBlock):
    def __init__(self, prefix=None, params=None):
        super(Foo, self).__init__(prefix=prefix, params=params)

    def hybrid_forward(self, F, valid_length):
        mask = (F.np.ones((10,)) &lt; valid_length).astype(np.float32)
        return mask

foo = Foo()
foo.hybridize()
out = foo(mx.np.ones((10,), ctx=mx.gpu()))
print(out)
&lt;denchmark-code&gt;MXNetError: Traceback (most recent call last):
  [bt] (12) libmxnet.so(MXInvokeCachedOpEx+0x60) [0x7fce362ab420]
  [bt] (11) libmxnet.so(MXInvokeCachedOp+0x42e) [0x7fce362aad4e]
  [bt] (10) libmxnet.so(mxnet::CachedOp::Forward(std::shared_ptr&lt;mxnet::CachedOp&gt; const&amp;, std::vector&lt;mxnet::NDArray*, std::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::vector&lt;mxnet::NDArray*, std::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;)+0xc77) [0x7fce36421d27]
  [bt] (9) libmxnet.so(mxnet::CachedOp::DynamicForward(mxnet::Context const&amp;, std::vector&lt;mxnet::NDArray*, std::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::vector&lt;mxnet::NDArray*, std::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, bool)+0x20c) [0x7fce3641973c]
  [bt] (8) libmxnet.so(mxnet::CachedOp::SetForwardGraph(mxnet::CachedOp::GraphInfo*, bool, std::vector&lt;mxnet::NDArray*, std::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;)+0x965) [0x7fce36418525]
  [bt] (7) libmxnet.so(mxnet::imperative::MXPlanMemory(nnvm::Graph*, std::vector&lt;int, std::allocator&lt;int&gt; &gt;&amp;&amp;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::pair&lt;unsigned int, unsigned int&gt; const&amp;, std::pair&lt;unsigned int, unsigned int&gt; const&amp;, bool)+0x1e8) [0x7fce3642f598]
  [bt] (6) libmxnet.so(nnvm::ApplyPass(nnvm::Graph, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)+0x213) [0x7fce362d0ab3]
  [bt] (5) libmxnet.so(nnvm::ApplyPasses(nnvm::Graph, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;)+0xecd) [0x7fce3a0b87bd]
  [bt] (4) libmxnet.so(std::_Function_handler&lt;nnvm::Graph (nnvm::Graph), nnvm::Graph (*)(nnvm::Graph)&gt;::_M_invoke(std::_Any_data const&amp;, nnvm::Graph&amp;&amp;)+0x10a) [0x7fce365e6b9a]
  [bt] (3) libmxnet.so(+0x1f279d0) [0x7fce366169d0]
  [bt] (2) libmxnet.so(+0x1f26a6e) [0x7fce36615a6e]
  [bt] (1) libmxnet.so(+0x1f2424d) [0x7fce3661324d]
  [bt] (0) libmxnet.so(dmlc::LogMessageFatal::~LogMessageFatal()+0x72) [0x7fce3622b982]
  File "../src/nnvm/plan_memory.cc", line 58
MXNetError: unknown type_flag=7
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>