<bug id='17595' author='connorgoggins' open_date='2020-02-14T19:19:55Z' closed_time='2020-07-01T14:53:55Z'>
	<summary>MKLDNN incompatibility with large tensor (dim &amp;gt;= 2^32) data</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

While testing individual ops for large tensor (dimension &gt;= 2^32) input functionality, I found an error in MKLDNN. Within 3rdparty/mkldnn/src/cpu/gemm/gemm.cpp on line 43 there is a function which takes in several parameters, including M (the variable used to accept the data dimension in the input). M is designated as an int, so when the value 2^32 is passed in as the first dimension of the input data the &gt; 0 assertion on the next line fails (since the int dtype in C++ interprets 2^32 as 0).
Note that this error occurs whenever MKLDNN is enabled - whether the BLAS engine is MKL, OpenBLAS, or none. When MKLDNN is disabled, the error does not occur.
All tests were run on the latest master, building from source.
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;----------Python Info----------
Version      : 3.6.6
Compiler     : GCC 7.2.0
Build        : ('default', 'Jun 28 2018 17:14:51')
Arch         : ('64bit', '')
------------Pip Info-----------
Version      : 19.3.1
Directory    : /home/ubuntu/anaconda3/lib/python3.6/site-packages/pip
----------MXNet Info-----------
Version      : 1.6.0
Directory    : /home/ubuntu/mxnet/python/mxnet
Num GPUs     : 0
Hashtag not found. Not installed from pre-built package.
----------System Info----------
Platform     : Linux-4.4.0-1098-aws-x86_64-with-debian-stretch-sid
system       : Linux
node         : ip-172-31-47-40
release      : 4.4.0-1098-aws
version      : #109-Ubuntu SMP Fri Nov 8 09:30:18 UTC 2019
----------Hardware Info----------
machine      : x86_64
processor    : x86_64
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                96
On-line CPU(s) list:   0-95
Thread(s) per core:    2
Core(s) per socket:    24
Socket(s):             2
NUMA node(s):          2
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 85
Model name:            Intel(R) Xeon(R) Platinum 8259CL CPU @ 2.50GHz
Stepping:              7
CPU MHz:               2500.000
BogoMIPS:              5000.00
Hypervisor vendor:     KVM
Virtualization type:   full
L1d cache:             32K
L1i cache:             32K
L2 cache:              1024K
L3 cache:              36608K
NUMA node0 CPU(s):     0-23,48-71
NUMA node1 CPU(s):     24-47,72-95
Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon rep_good nopl xtopology nonstop_tsc aperfmperf tsc_known_freq pni pclmulqdq monitor ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single kaiser fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid mpx avx512f rdseed adx smap clflushopt clwb avx512cd xsaveopt xsavec xgetbv1 ida arat pku
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Steps to reproduce&lt;/denchmark-h&gt;

Create a Python script with the following content:
&lt;denchmark-code&gt;import mxnet as mx

print(mx.nd.FullyConnected(data=mx.nd.random_normal(shape=(2**32,1)), weight=mx.nd.random_normal(shape=(1,1)), bias=mx.nd.random_normal(shape=(1,)), flatten=False, num_hidden=1))
&lt;/denchmark-code&gt;

and run it with Python3.
&lt;denchmark-h:h2&gt;Failing Environments and Errors&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;BLAS = None, MKLDNN = enabled&lt;/denchmark-h&gt;

&lt;denchmark-h:h4&gt;Feature List&lt;/denchmark-h&gt;

✖ CUDA, ✖ CUDNN, ✖ NCCL, ✖ CUDA_RTC, ✖ TENSORRT, ✔ CPU_SSE, ✔ CPU_SSE2, ✔ CPU_SSE3, ✔ CPU_SSE4_1, ✔ CPU_SSE4_2, ✖ CPU_SSE4A, ✔ CPU_AVX, ✖ CPU_AVX2, ✔ OPENMP, ✖ SSE, ✔ F16C, ✖ JEMALLOC, ✖ BLAS_OPEN, ✖ BLAS_ATLAS, ✖ BLAS_MKL, ✖ BLAS_APPLE, ✔ LAPACK, ✔ MKLDNN, ✖ OPENCV, ✖ CAFFE, ✖ PROFILER, ✖ DIST_KVSTORE, ✖ CXX14, ✔ INT64_TENSOR_SIZE, ✖ SIGNAL_HANDLER, ✔ DEBUG, ✖ TVM_OP
&lt;denchmark-h:h4&gt;Error&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;python3: /home/ubuntu/mxnet/3rdparty/mkldnn/src/cpu/gemm/gemm.cpp:43: void dnnl::impl::cpu::msan_unpoison_matrix(void*, int, int, int, size_t): Assertion `C
!= nullptr &amp;&amp; M &gt; 0 &amp;&amp; N &gt; 0 &amp;&amp; LDC &gt;= M &amp;&amp; typesize' failed.
Aborted (core dumped)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;BLAS = MKL, MKLDNN = enabled&lt;/denchmark-h&gt;

&lt;denchmark-h:h4&gt;Feature List&lt;/denchmark-h&gt;

✖ CUDA, ✖ CUDNN, ✖ NCCL, ✖ CUDA_RTC, ✖ TENSORRT, ✔ CPU_SSE, ✔ CPU_SSE2, ✔ CPU_SSE3, ✔ CPU_SSE4_1, ✔ CPU_SSE4_2, ✖ CPU_SSE4A, ✔ CPU_AVX, ✖ CPU_AVX2, ✔ OPENMP, ✖ SSE, ✔ F16C, ✖ JEMALLOC, ✖ BLAS_OPEN, ✖ BLAS_ATLAS, ✔ BLAS_MKL, ✖ BLAS_APPLE, ✔ LAPACK, ✔ MKLDNN, ✖ OPENCV, ✖ CAFFE, ✖ PROFILER, ✖ DIST_KVSTORE, ✖ CXX14, ✔ INT64_TENSOR_SIZE, ✖ SIGNAL_HANDLER, ✔ DEBUG, ✖ TVM_OP
&lt;denchmark-h:h4&gt;Error&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;python3: /home/ubuntu/mxnet/3rdparty/mkldnn/src/cpu/gemm/gemm.cpp:43: void dnnl::impl::cpu::msan_unpoison_matrix(void*, int, int, int, size_t): Assertion `C
!= nullptr &amp;&amp; M &gt; 0 &amp;&amp; N &gt; 0 &amp;&amp; LDC &gt;= M &amp;&amp; typesize' failed.
Aborted (core dumped)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;BLAS = OpenBLAS, MKLDNN = enabled&lt;/denchmark-h&gt;

&lt;denchmark-h:h4&gt;Feature List&lt;/denchmark-h&gt;

✖ CUDA, ✖ CUDNN, ✖ NCCL, ✖ CUDA_RTC, ✖ TENSORRT, ✔ CPU_SSE, ✔ CPU_SSE2, ✔ CPU_SSE3, ✔ CPU_SSE4_1, ✔ CPU_SSE4_2, ✖ CPU_SSE4A, ✔ CPU_AVX, ✖ CPU_AVX2, ✔ OPENMP, ✖ SSE, ✔ F16C, ✖ JEMALLOC, ✔ BLAS_OPEN, ✖ BLAS_ATLAS, ✖ BLAS_MKL, ✖ BLAS_APPLE, ✔ LAPACK, ✔ MKLDNN, ✖ OPENCV, ✖ CAFFE, ✖ PROFILER, ✖ DIST_KVSTORE, ✖ CXX14, ✔ INT64_TENSOR_SIZE, ✖ SIGNAL_HANDLER, ✔ DEBUG, ✖ TVM_OP
&lt;denchmark-h:h4&gt;Error&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;python3: /home/ubuntu/mxnet/3rdparty/mkldnn/src/cpu/gemm/gemm.cpp:43: void dnnl::impl::cpu::msan_unpoison_matrix(void*, int, int, int, size_t): Assertion `C
!= nullptr &amp;&amp; M &gt; 0 &amp;&amp; N &gt; 0 &amp;&amp; LDC &gt;= M &amp;&amp; typesize' failed.
Aborted (core dumped)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Successful Environments and Outputs&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;BLAS = None, MKLDNN = disabled&lt;/denchmark-h&gt;

&lt;denchmark-h:h4&gt;Feature List&lt;/denchmark-h&gt;

✖ CUDA, ✖ CUDNN, ✖ NCCL, ✖ CUDA_RTC, ✖ TENSORRT, ✔ CPU_SSE, ✔ CPU_SSE2, ✔ CPU_SSE3, ✔ CPU_SSE4_1, ✔ CPU_SSE4_2, ✖ CPU_SSE4A, ✔ CPU_AVX, ✖ CPU_AVX2, ✔ OPENMP, ✖ SSE, ✔ F16C, ✖ JEMALLOC, ✖ BLAS_OPEN, ✖ BLAS_ATLAS, ✖ BLAS_MKL, ✖ BLAS_APPLE, ✔ LAPACK, ✖ MKLDNN, ✖ OPENCV, ✖ CAFFE, ✖ PROFILER, ✖ DIST_KVSTORE, ✖ CXX14, ✔ INT64_TENSOR_SIZE, ✖ SIGNAL_HANDLER, ✔ DEBUG, ✖ TVM_OP
&lt;denchmark-h:h4&gt;Output&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;[[1.1367434]
 [1.1367434]
 [1.1367434]
 ...
 [1.1367434]
 [1.1367434]
 [1.1367434]]
&lt;NDArray 4294967296x1 @cpu(0)&gt;
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;BLAS = MKL, MKLDNN = disabled&lt;/denchmark-h&gt;

&lt;denchmark-h:h4&gt;Feature List&lt;/denchmark-h&gt;

✖ CUDA, ✖ CUDNN, ✖ NCCL, ✖ CUDA_RTC, ✖ TENSORRT, ✔ CPU_SSE, ✔ CPU_SSE2, ✔ CPU_SSE3, ✔ CPU_SSE4_1, ✔ CPU_SSE4_2, ✖ CPU_SSE4A, ✔ CPU_AVX, ✖ CPU_AVX2, ✔ OPENMP, ✖ SSE, ✔ F16C, ✖ JEMALLOC, ✖ BLAS_OPEN, ✖ BLAS_ATLAS, ✔ BLAS_MKL, ✖ BLAS_APPLE, ✔ LAPACK, ✖ MKLDNN, ✖ OPENCV, ✖ CAFFE, ✖ PROFILER, ✖ DIST_KVSTORE, ✖ CXX14, ✔ INT64_TENSOR_SIZE, ✖ SIGNAL_HANDLER, ✔ DEBUG, ✖ TVM_OP
&lt;denchmark-h:h4&gt;Output&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;[[1.1367434]
 [1.1367434]
 [1.1367434]
 ...
 [1.1367434]
 [1.1367434]
 [1.1367434]]
&lt;NDArray 4294967296x1 @cpu(0)&gt;
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;BLAS = OpenBLAS, MKLDNN = disabled&lt;/denchmark-h&gt;

&lt;denchmark-h:h4&gt;Feature List&lt;/denchmark-h&gt;

✖ CUDA, ✖ CUDNN, ✖ NCCL, ✖ CUDA_RTC, ✖ TENSORRT, ✔ CPU_SSE, ✔ CPU_SSE2, ✔ CPU_SSE3, ✔ CPU_SSE4_1, ✔ CPU_SSE4_2, ✖ CPU_SSE4A, ✔ CPU_AVX, ✖ CPU_AVX2, ✔ OPENMP, ✖ SSE, ✔ F16C, ✖ JEMALLOC, ✔ BLAS_OPEN, ✖ BLAS_ATLAS, ✖ BLAS_MKL, ✖ BLAS_APPLE, ✔ LAPACK, ✖ MKLDNN, ✖ OPENCV, ✖ CAFFE, ✖ PROFILER, ✖ DIST_KVSTORE, ✖ CXX14, ✔ INT64_TENSOR_SIZE, ✖ SIGNAL_HANDLER, ✔ DEBUG, ✖ TVM_OP
&lt;denchmark-h:h4&gt;Output&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;[[1.1367434]
 [1.1367434]
 [1.1367434]
 ...
 [1.1367434]
 [1.1367434]
 [1.1367434]]
&lt;NDArray 4294967296x1 @cpu(0)&gt;
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='connorgoggins' date='2020-02-14T19:30:02Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 add [MKLDNN]
		</comment>
		<comment id='2' author='connorgoggins' date='2020-02-14T19:38:37Z'>
		&lt;denchmark-link:https://github.com/PatricZhao&gt;@PatricZhao&lt;/denchmark-link&gt;
 Could your team please take a look at this? Thanks!
		</comment>
		<comment id='3' author='connorgoggins' date='2020-02-14T20:04:00Z'>
		&lt;denchmark-link:https://github.com/connorgoggins&gt;@connorgoggins&lt;/denchmark-link&gt;
 thanks for bringing this up
&lt;denchmark-link:https://github.com/PatricZhao&gt;@PatricZhao&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/TaoLv&gt;@TaoLv&lt;/denchmark-link&gt;
  looks like blas=MKL/openblas/none(mnative mxnet) and MKLDNN=OFF are supporting gemm on int64 but with MKLDNN its not. If its not a known issue with MKLDNN can you guys please take a look
		</comment>
		<comment id='4' author='connorgoggins' date='2020-02-15T03:28:58Z'>
		Thank you for reporting the issue. I will take a look at this. But my initial thought is that MKL-DNN itself already supports int64 shape since the v1.0 upgrading, while I don't think the current integration of MKL/openblas supports int64 GEMM.
		</comment>
		<comment id='5' author='connorgoggins' date='2020-02-15T04:34:45Z'>
		I can reproduce the crash.
		</comment>
		<comment id='6' author='connorgoggins' date='2020-02-16T02:24:03Z'>
		&lt;denchmark-link:https://github.com/TaoLv&gt;@TaoLv&lt;/denchmark-link&gt;
 thanks for taking a look !
		</comment>
		<comment id='7' author='connorgoggins' date='2020-03-06T09:43:51Z'>
		&lt;denchmark-link:https://github.com/access2rohit&gt;@access2rohit&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/connorgoggins&gt;@connorgoggins&lt;/denchmark-link&gt;
 This was confirmed to be a bug of the DNNL library. But we still need to wait for the next release of the library to get the bug fixed.
		</comment>
		<comment id='8' author='connorgoggins' date='2020-04-17T23:17:23Z'>
		This issue is resolved in &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/releases/tag/v1.4&gt;oneDNN v1.4&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='9' author='connorgoggins' date='2020-04-20T08:48:39Z'>
		&lt;denchmark-link:https://github.com/vpirogov&gt;@vpirogov&lt;/denchmark-link&gt;
 Thanks for the update. We will upgrade the 3rdparty dependency soon.
		</comment>
		<comment id='10' author='connorgoggins' date='2020-05-05T18:42:20Z'>
		&lt;denchmark-link:https://github.com/vpirogov&gt;@vpirogov&lt;/denchmark-link&gt;
 great news! Once this is added to MXNet we can resolve this issue :)
		</comment>
	</comments>
</bug>