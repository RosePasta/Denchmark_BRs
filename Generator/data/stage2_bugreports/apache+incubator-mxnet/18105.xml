<bug id='18105' author='sxjscience' open_date='2020-04-20T06:48:24Z' closed_time='2020-05-06T22:57:51Z'>
	<summary>[Gluon] Deferred initialization error of dynamic shape operators</summary>
	<description>
import mxnet as mx
from mxnet.gluon import nn, HybridBlock
mx.npx.set_np()

class Foo(HybridBlock):
    def __init__(self, prefix=None, params=None):
        super().__init__(prefix=prefix, params=params)
        with self.name_scope():
            # Set in_units = 10 won't have any problem
            # self.dense_layer = nn.Dense(128, in_units=10, flatten=False)
            self.dense_layer = nn.Dense(128, flatten=False)

    def hybrid_forward(self, F, a, b):
        idx = F.np.unique(a)
        idx = F.npx.stop_gradient(idx)
        c = F.np.take(b, idx, axis=0)
        return self.dense_layer(c)


foo = Foo()
foo.initialize()
foo.hybridize()

a = mx.np.random.randint(0, 10, (5, 6))
b = mx.np.random.normal(0, 1, (100, 10))
b.attach_grad()

with mx.autograd.record():
    out = foo(a, b)
    out.backward()
print(b.grad)
Error:
&lt;denchmark-code&gt;ValueError: Deferred initialization failed because shape cannot be inferred. Cannot decide shape for the following arguments (0s in shape means unknown dimensions). Consider providing them as input:
        foo0_dense0_weight: (128, -1)
&lt;/denchmark-code&gt;

However, in this scenario, we should be able to get the partial shape of c because we are only calling take in axis=0.
	</description>
	<comments>
		<comment id='1' author='sxjscience' date='2020-04-20T20:50:28Z'>
		In general the problem of shape inference with dynamic shape operators is one motivation for adding HybridBlock.forward based on deferred compute.
In that case, you can implement HybridBlock.infer_shape and work around that by it's very nature, the backend can't do shape inference on dynamic shape operators.
You can also implement HybridBlock.infer_shape without using deferred compute interface, but then you'll get a symbol as input to HybridBlock.infer_shape and that may not help you to manually set the parameter shape..
		</comment>
		<comment id='2' author='sxjscience' date='2020-05-06T22:57:51Z'>
		I'll close this as wont-fix based on above discussion on Python-side infer_shape
		</comment>
	</comments>
</bug>