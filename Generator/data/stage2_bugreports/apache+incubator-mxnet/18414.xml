<bug id='18414' author='sxjscience' open_date='2020-05-27T06:14:42Z' closed_time='2020-06-02T15:45:17Z'>
	<summary>Type inference bug of negation</summary>
	<description>
import mxnet as mx
mx.npx.set_np()
a = mx.np.ones((10, 10), dtype=mx.np.int32)
b = -a
print(b.dtype)
Output:
&lt;denchmark-code&gt;float64
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='sxjscience' date='2020-05-27T07:46:27Z'>
		&lt;denchmark-link:https://github.com/sxjscience&gt;@sxjscience&lt;/denchmark-link&gt;

Thanks for your issue, I was able to reproduce this issue on my device, we discovered that the cause of this problem is &lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/python/mxnet/numpy/multiarray.py#L988&gt;https://github.com/apache/incubator-mxnet/blob/master/python/mxnet/numpy/multiarray.py#L988&lt;/denchmark-link&gt;
, where the origin tensor would be multiplied by  when calling negation.
I believe this problem could be resolved by changing -1.0 to -1, as the backend is now able to perform type promotion for scalar-tensor binary ops, which should return a value of type int32.
I will create a fix for this issue.
		</comment>
		<comment id='2' author='sxjscience' date='2020-05-27T19:28:29Z'>
		&lt;denchmark-link:https://github.com/CassiniXu&gt;@CassiniXu&lt;/denchmark-link&gt;
 thanks for finding the root cause. In terms of the solution, I'm not sure if multiply is the right way to go. After all, we don't want int8 number to be promoted to int32 when being negated. How about implementing a negation kernel?
		</comment>
	</comments>
</bug>