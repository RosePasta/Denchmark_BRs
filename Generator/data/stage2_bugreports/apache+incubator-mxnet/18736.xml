<bug id='18736' author='DickJC123' open_date='2020-07-16T18:37:09Z' closed_time='2020-07-19T21:15:06Z'>
	<summary>unittest/test_numpy_interoperability.py inadvertently puts additional unittests on a fixed seed</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

The following code in test_numpy_interoperability.py sets a numpy seed unilaterally, thereby making deterministic the random numbers used in subsequent unittests: 


incubator-mxnet/tests/python/unittest/test_numpy_interoperability.py


        Lines 515 to 528
      in
      2abf0b8






 def _add_workload_linalg_cholesky(): 



 shapes = [(1, 1), (2, 2), (3, 3), (50, 50), (3, 10, 10)] 



 dtypes = (np.float32, np.float64) 



 



 for shape, dtype in itertools.product(shapes, dtypes): 



 _np.random.seed(1) 



 a = _np.random.randn(*shape) 



 



 t = list(range(len(shape))) 



 t[-2:] = -1, -2 



 



 a = _np.matmul(a.transpose(t).conj(), a) 



 



 OpArgMngr.add_workload('linalg.cholesky', np.array(a, dtype=dtype)) 





Also, since the code is executed on import of the file, this sets the seed in advance of the with_seed() mechanism, thereby forcing determinism on a large number of other modules that import this test file, including test_operator_gpu.py.
We clearly want to get back to our usual mode of running tests non-deterministically with different random data each time, to ensure a robust framework.  Thus, having noticed this issue during the development of my current PR &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/18694&gt;#18694&lt;/denchmark-link&gt;
, I have included a fixing commit &lt;denchmark-link:https://github.com/apache/incubator-mxnet/commit/6567b61d219fa984d5c1b8c3987990ca04b73575&gt;6567b61&lt;/denchmark-link&gt;
 .
&lt;denchmark-link:https://github.com/vexilligera&gt;@vexilligera&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/reminisce&gt;@reminisce&lt;/denchmark-link&gt;
, could you review my fix and comment, or suggest an alternative fix via another PR?  For example, you may want to evaluate whether the test is able to support random data of some appropriate distribution.  Also, you may want to evaluate whether performing all the set-up functions of this test module lazily on first use, rather than as done currently at file import, is generally a better practice.  Thanks.
&lt;denchmark-h:h3&gt;Error Message&lt;/denchmark-h&gt;

I noticed this problem when different runs of the CI would flag the same failing test with the same rnd seed. [Output not retained]
&lt;denchmark-h:h2&gt;What have you tried to solve it?&lt;/denchmark-h&gt;


See referenced PR and fixing commit


	</description>
	<comments>
		<comment id='1' author='DickJC123' date='2020-07-16T19:28:03Z'>
		While technically a different issue, test_numpy_interoperability.py has a spurious print statement: 


incubator-mxnet/tests/python/unittest/test_numpy_interoperability.py


        Lines 2896 to 2902
      in
      2abf0b8






 def _add_workload_unwrap(): 



 phase = np.linspace(0, np.pi, num=5) 



 phase[3:] += np.pi 



 phase_s = np.vstack((phase,phase)) 



 OpArgMngr.add_workload('unwrap', phase) 



 print(phase_s.shape) 



 OpArgMngr.add_workload('unwrap', phase_s, axis=1) 





I've removed this in PR &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/18694&gt;#18694&lt;/denchmark-link&gt;
 commit &lt;denchmark-link:https://github.com/apache/incubator-mxnet/commit/3d47acba82e44b6b731ff048905472c8c0c2f8de&gt;3d47acb&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='DickJC123' date='2020-07-19T21:15:06Z'>
		fixed by &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/18694&gt;#18694&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>