<bug id='16765' author='zachgk' open_date='2019-11-08T18:47:10Z' closed_time='2019-11-25T19:03:40Z'>
	<summary>FusedOp Failing Static Linked Build</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

The build is currently failing for the statically linked build that is used for Scala Maven Publishing. This is blocking the currently nightly snapshot and must also be fixed before building the release jars as well.
&lt;denchmark-code&gt;build/src/operator/fusion/fused_op_gpu.o: In function `void mxnet::FusedOp::Forward&lt;mshadow::gpu&gt;(nnvm::NodeAttrs const&amp;, mxnet::OpContext const&amp;, std::vector&lt;mxnet::TBlob, std::allocator&lt;mxnet::TBlob&gt; &gt; const&amp;, std::vector&lt;mxnet::OpReqType, std::allocator&lt;mxnet::OpReqType&gt; &gt; const&amp;, std::vector&lt;mxnet::TBlob, std::allocator&lt;mxnet::TBlob&gt; &gt; const&amp;)':

tmpxft_00008748_00000000-5_fused_op.compute_70.cudafe1.cpp:(.text._ZN5mxnet7FusedOp7ForwardIN7mshadow3gpuEEEvRKN4nnvm9NodeAttrsERKNS_9OpContextERKSt6vectorINS_5TBlobESaISC_EERKSB_INS_9OpReqTypeESaISH_EESG_+0x1287): undefined reference to `cuLaunchKernel'

tmpxft_00008748_00000000-5_fused_op.compute_70.cudafe1.cpp:(.text._ZN5mxnet7FusedOp7ForwardIN7mshadow3gpuEEEvRKN4nnvm9NodeAttrsERKNS_9OpContextERKSt6vectorINS_5TBlobESaISC_EERKSB_INS_9OpReqTypeESaISH_EESG_+0x12a6): undefined reference to `cuGetErrorString'

collect2: error: ld returned 1 exit status

make: *** [bin/im2rec] Error 1

make: *** Waiting for unfinished jobs....

2019-11-01 20:27:09,794 - root - INFO - Waiting for status of container 00fc4568b4c9 for 600 s.

2019-11-01 20:27:10,060 - root - INFO - Container exit status: {'StatusCode': 2, 'Error': None}

2019-11-01 20:27:10,061 - root - ERROR - Container exited with an error ðŸ˜ž

2019-11-01 20:27:10,061 - root - INFO - Executed command for reproduction:
&lt;/denchmark-code&gt;

See full log at &lt;denchmark-link:http://jenkins.mxnet-ci.amazon-ml.com/blue/organizations/jenkins/restricted-publish-artifacts/detail/master/287/pipeline/&gt;http://jenkins.mxnet-ci.amazon-ml.com/blue/organizations/jenkins/restricted-publish-artifacts/detail/master/287/pipeline/&lt;/denchmark-link&gt;

Main Scala nightly pipeline at &lt;denchmark-link:http://jenkins.mxnet-ci.amazon-ml.com/job/restricted-publish-artifacts/job/master/&gt;http://jenkins.mxnet-ci.amazon-ml.com/job/restricted-publish-artifacts/job/master/&lt;/denchmark-link&gt;

It seems to be a result of &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/15167&gt;#15167&lt;/denchmark-link&gt;
. The pip build has also been failing since this date for what might be the same reason.
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

This version of the build can be run by following the instructions located at &lt;denchmark-link:https://github.com/apache/incubator-mxnet/tree/master/tools/staticbuild&gt;https://github.com/apache/incubator-mxnet/tree/master/tools/staticbuild&lt;/denchmark-link&gt;
. The Scala build uses variant cu92mkl by default, but other cuda builds should have the same problem.
The build is currently run on a Ubuntu 14.04 docker instance using &lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/ci/docker/Dockerfile.publish.ubuntu1404_cpu&gt;https://github.com/apache/incubator-mxnet/blob/master/ci/docker/Dockerfile.publish.ubuntu1404_cpu&lt;/denchmark-link&gt;
.
	</description>
	<comments>
		<comment id='1' author='zachgk' date='2019-11-08T18:47:22Z'>
		&lt;denchmark-link:https://github.com/ptrendx&gt;@ptrendx&lt;/denchmark-link&gt;
 Can you take a look?
		</comment>
		<comment id='2' author='zachgk' date='2019-11-08T19:07:06Z'>
		Hmmm, it is strange - &lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/src/common/rtc.cc&gt;https://github.com/apache/incubator-mxnet/blob/master/src/common/rtc.cc&lt;/denchmark-link&gt;
 already uses those same functions (e.g. here: &lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/src/common/rtc.cc#L175&gt;https://github.com/apache/incubator-mxnet/blob/master/src/common/rtc.cc#L175&lt;/denchmark-link&gt;
) and it compiles no problem...
		</comment>
		<comment id='3' author='zachgk' date='2019-11-11T19:28:26Z'>
		&lt;denchmark-link:https://github.com/zachgk&gt;@zachgk&lt;/denchmark-link&gt;
 assign &lt;denchmark-link:https://github.com/ptrendx&gt;@ptrendx&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='zachgk' date='2019-11-12T23:34:54Z'>
		Trading my assignment with &lt;denchmark-link:https://github.com/DickJC123&gt;@DickJC123&lt;/denchmark-link&gt;
 who is looking into this issue.
		</comment>
		<comment id='5' author='zachgk' date='2019-11-13T04:53:20Z'>
		I'm able to reproduce the link error in the docker container mentioned above with the command:
&lt;denchmark-code&gt;tools/staticbuild/build.sh cu92mkl maven
&lt;/denchmark-code&gt;

I'll continue investigating the root cause.  FYI, the following command does not have a similar issue:
&lt;denchmark-code&gt;tools/staticbuild/build.sh cu92 pip
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='zachgk' date='2019-11-15T01:56:47Z'>
		Finally figured out what's going on here.  The build of bin/im2rec via ld (as driven by g++) is failing because LDFLAGS is missing '-lcuda -lnvrtc'.  The Makefile will add these flags to LDFLAGS (as well as compile with MXNET_ENABLE_CUDA_RTC=1) if it sees ENABLE_CUDA_RTC set in config.mk .  The maven builds are using the flag USE_NVRTC (to no effect), while the pip builds were converted to using ENABLE_CUDA_RTC via PR &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/14250&gt;#14250&lt;/denchmark-link&gt;
.  Not sure why the PR stopped short of converting all the builds.
The functionality of ./src/common/rtc.cc is guarded by MXNET_ENABLE_CUDA_RTC.  So the question to fusion PR author &lt;denchmark-link:https://github.com/ptrendx&gt;@ptrendx&lt;/denchmark-link&gt;
 becomes, do you think the pointwise fusion should be similarly guarded by ENABLE_CUDA_RTC (or a different flag)?  Should MXNet warn when the user is running on a build that lacks the rtc capability, and under what circumstances (e.g. only when MXNET_USE_FUSION=1 is set explicitly in the environment and on a gpu context)? Should the user expect to run the unittest suite on the no-rtc builds, and how do we detect that?
		</comment>
		<comment id='7' author='zachgk' date='2019-11-25T17:41:18Z'>
		&lt;denchmark-link:https://github.com/zachgk&gt;@zachgk&lt;/denchmark-link&gt;
 is this fixed now that &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/16838&gt;#16838&lt;/denchmark-link&gt;
 is merged?
		</comment>
	</comments>
</bug>