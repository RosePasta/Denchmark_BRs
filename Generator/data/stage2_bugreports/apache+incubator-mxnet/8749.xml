<bug id='8749' author='aijanai' open_date='2017-11-21T12:14:13Z' closed_time='2018-03-22T06:43:49Z'>
	<summary>[FIX ATTACHED] Not working example on Iterators tutorial - SimpleIter</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

The tutorial at &lt;denchmark-link:https://mxnet.incubator.apache.org/tutorials/basic/data.html&gt;https://mxnet.incubator.apache.org/tutorials/basic/data.html&lt;/denchmark-link&gt;
 that can be downloaded as iPython doens't work, probably due to outdated code. In particular, the code for the  class returns  object with  and fields always empty.
This iterator breaks the fit function when we try to train the simple MLP provided.
&lt;denchmark-h:h2&gt;Environment info (Required)&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;----------Python Info----------
Version      : 3.5.2
Compiler     : GCC 5.4.0 20160609
Build        : ('default', 'Sep 14 2017 22:51:06')
Arch         : ('64bit', 'ELF')
------------Pip Info-----------
Version      : 9.0.1
Directory    : /home/ai_ja_nai/pischool/mxnet/venv3/local/lib/python3.5/site-packages/pip
----------MXNet Info-----------
Version      : 0.12.1
Directory    : /home/ai_ja_nai/pischool/mxnet/venv3/local/lib/python3.5/site-packages/mxnet
Commit Hash   : e0c7906693f0c79b0ce34a4d777c26a6bf1903c1
----------System Info----------
Platform     : Linux-4.4.0-98-generic-x86_64-with-Ubuntu-16.04-xenial
system       : Linux
node         : aiMacBookPro
release      : 4.4.0-98-generic
version      : #121-Ubuntu SMP Tue Oct 10 14:24:03 UTC 2017
----------Hardware Info----------
machine      : x86_64
processor    : x86_64
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                4
On-line CPU(s) list:   0-3
Thread(s) per core:    2
Core(s) per socket:    2
Socket(s):             1
NUMA node(s):          1
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 69
Model name:            Intel(R) Core(TM) i5-4258U CPU @ 2.40GHz
Stepping:              1
CPU MHz:               2900.531
CPU max MHz:           2900,0000
CPU min MHz:           800,0000
BogoMIPS:              4800.02
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              3072K
NUMA node0 CPU(s):     0-3
Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm epb tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid xsaveopt dtherm ida arat pln pts
----------Network Test----------
Setting timeout: 10
Timing for Gluon Tutorial(en): http://gluon.mxnet.io, DNS: 0.0745 sec, LOAD: 0.1277 sec.
Timing for Gluon Tutorial(cn): https://zh.gluon.ai, DNS: 0.1750 sec, LOAD: 4.3842 sec.
Timing for FashionMNIST: https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/dataset/fashion-mnist/train-labels-idx1-ubyte.gz, DNS: 0.0590 sec, LOAD: 0.6070 sec.
Timing for Conda: https://repo.continuum.io/pkgs/free/, DNS: 0.0557 sec, LOAD: 0.3190 sec.
Timing for PYPI: https://pypi.python.org/pypi/pip, DNS: 0.0468 sec, LOAD: 0.1626 sec.
Timing for MXNet: https://github.com/apache/incubator-mxnet, DNS: 0.0343 sec, LOAD: 0.8834 sec.


&lt;/denchmark-code&gt;

Package used (Python/R/Scala/Julia):
I'm using Python
&lt;denchmark-h:h2&gt;Error Message:&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-40-a2ae3e4b88e5&gt; in &lt;module&gt;()
      9 
     10 mod = mx.mod.Module(symbol=net)
---&gt; 11 mod.fit(data_iter, num_epoch=5)

~/pischool/mxnet/venv3/local/lib/python3.5/site-packages/mxnet/module/base_module.py in fit(self, train_data, eval_data, eval_metric, epoch_end_callback, batch_end_callback, kvstore, optimizer, optimizer_params, eval_end_callback, eval_batch_end_callback, initializer, arg_params, aux_params, allow_missing, force_rebind, force_init, begin_epoch, num_epoch, validation_metric, monitor)
    485                 if monitor is not None:
    486                     monitor.tic()
--&gt; 487                 self.forward_backward(data_batch)
    488                 self.update()
    489                 try:

~/pischool/mxnet/venv3/local/lib/python3.5/site-packages/mxnet/module/base_module.py in forward_backward(self, data_batch)
    189     def forward_backward(self, data_batch):
    190         """A convenient function that calls both ``forward`` and ``backward``."""
--&gt; 191         self.forward(data_batch, is_train=True)
    192         self.backward()
    193 

~/pischool/mxnet/venv3/local/lib/python3.5/site-packages/mxnet/module/module.py in forward(self, data_batch, is_train)
    592                 new_lshape = None
    593 
--&gt; 594             self.reshape(new_dshape, new_lshape)
    595 
    596         self._exec_group.forward(data_batch, is_train)

~/pischool/mxnet/venv3/local/lib/python3.5/site-packages/mxnet/module/module.py in reshape(self, data_shapes, label_shapes)
    454         assert self.binded
    455         self._data_shapes, self._label_shapes = _parse_data_desc(
--&gt; 456             self.data_names, self.label_names, data_shapes, label_shapes)
    457 
    458         self._exec_group.reshape(self._data_shapes, self._label_shapes)

~/pischool/mxnet/venv3/local/lib/python3.5/site-packages/mxnet/module/base_module.py in _parse_data_desc(data_names, label_names, data_shapes, label_shapes)
     69     """parse data_attrs into DataDesc format and check that names match"""
     70     data_shapes = [x if isinstance(x, DataDesc) else DataDesc(*x) for x in data_shapes]
---&gt; 71     _check_names_match(data_names, data_shapes, 'data', True)
     72     if label_shapes is not None:
     73         label_shapes = [x if isinstance(x, DataDesc) else DataDesc(*x) for x in label_shapes]

~/pischool/mxnet/venv3/local/lib/python3.5/site-packages/mxnet/module/base_module.py in _check_names_match(data_names, data_shapes, name, throw)
     61             name, name, str(data_shapes), str(data_names))
     62         if throw:
---&gt; 63             raise ValueError(msg)
     64         else:
     65             warnings.warn(msg)

ValueError: Data provided by data_shapes don't match names specified by data_names ([] vs. ['data'])
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Minimum reproducible example&lt;/denchmark-h&gt;

During the tutorial at &lt;denchmark-link:https://mxnet.incubator.apache.org/tutorials/basic/data.ipynb&gt;https://mxnet.incubator.apache.org/tutorials/basic/data.ipynb&lt;/denchmark-link&gt;
, try to execute the cell 40 containing the following code:
&lt;denchmark-code&gt;n = 32
data_iter = SimpleIter(['data'], [(n, 100)],
                  [lambda s: np.random.uniform(-1, 1, s)],
                  ['softmax_label'], [(n,)],
                  [lambda s: np.random.randint(0, num_classes, s)])

mod = mx.mod.Module(symbol=net)
mod.fit(data_iter, num_epoch=5)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Steps to reproduce&lt;/denchmark-h&gt;

Executed all the cells in the tutorial up to 41.
&lt;denchmark-h:h2&gt;What have you tried to solve it?&lt;/denchmark-h&gt;

This is the correct implementation that makes the fit function to train correctly a model (the issue lies in the provide_data/label fields that don't use the DataDesc object:
&lt;denchmark-code&gt;class SimpleIter(mx.io.DataIter):
    def __init__(self, data_names, data_shapes, data_gen,
                 label_names, label_shapes, label_gen, num_batches=10):
        self._provide_data = [mx.io.DataDesc(name=name,shape=shape,layout='NTC') for name,shape in zip(data_names, data_shapes)]
        self._provide_label = [mx.io.DataDesc(name=name,shape=shape,layout='NTC') for name,shape in zip(label_names, label_shapes)]
        self.num_batches = num_batches
        self.data_gen = data_gen
        self.label_gen = label_gen
        self.cur_batch = 0

    def __iter__(self):
        return self

    def reset(self):
        self.cur_batch = 0

    def __next__(self):
        return self.next()

    @property
    def provide_data(self):
        return self._provide_data

    @property
    def provide_label(self):
        return self._provide_label

    def next(self):
        if self.cur_batch &lt; self.num_batches:
            self.cur_batch += 1
            data = [mx.nd.array(g(d[1])) for d,g in zip(self._provide_data, self.data_gen)]
            label = [mx.nd.array(g(d[1])) for d,g in zip(self._provide_label, self.label_gen)]
            

            return mx.io.DataBatch(
                data,
                label,
                provide_data=self._provide_data,
                provide_label=self._provide_label
            )
        else:
            raise StopIteration
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='aijanai' date='2017-11-26T21:11:59Z'>
		The NTC layout usually refers to a layout that's used in RNNs, while the tutorial is on image data. From the context, it looks like NCHW is the right layout to use in DataDesc. Could you propose a fix in the form of a pull request, after fixing the layout problem?
		</comment>
		<comment id='2' author='aijanai' date='2017-11-30T17:27:35Z'>
		Uhm, that tutorial is on random numbers and that Iterator is used on a numeric MLP example
		</comment>
		<comment id='3' author='aijanai' date='2017-12-19T15:27:48Z'>
		I found the error (if it only appears when you use Python 3.x instead of Python 2): &lt;denchmark-link:https://stackoverflow.com/a/31684038/1734298&gt;The behaviour of the zip function of python was changed&lt;/denchmark-link&gt;
. In python 3, you get a one-time iterator, which is the reason why it is always empty. You can change the example code of SimpleIter as seen below to get it to work in Python 3. I changed it so that new zip-iterators are created every time you call the property provide_data(self) and redirected the calls to the internal _provide_data in next() to that property.
&lt;denchmark-code&gt;class SimpleIter(mx.io.DataIter):
    def __init__(self, data_names, data_shapes, data_gen,
                 label_names, label_shapes, label_gen, num_batches=10):
        self._data_names = data_names
        self._data_shapes = data_shapes
        self._label_names = label_names
        self._label_shapes = label_shapes
        self.num_batches = num_batches
        self.data_gen = data_gen
        self.label_gen = label_gen
        self.cur_batch = 0

    def __iter__(self):
        return self

    def reset(self):
        self.cur_batch = 0

    def __next__(self):
        return self.next()

    @property
    def provide_data(self):
        return zip(self._data_names, self._data_shapes)

    @property
    def provide_label(self):
        return zip(self._label_names, self._label_shapes)

    def next(self):
        if self.cur_batch &lt; self.num_batches:
            self.cur_batch += 1
            data = [mx.nd.array(g(d[1])) for d,g in zip(self.provide_data, self.data_gen)]
            label = [mx.nd.array(g(d[1])) for d,g in zip(self.provide_label, self.label_gen)]
            return mx.io.DataBatch(data, label)
        else:
            raise StopIteration
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='aijanai' date='2018-01-27T00:26:20Z'>
		This issues has been already addressed by &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/9460&gt;#9460&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='5' author='aijanai' date='2018-03-10T00:02:11Z'>
		proposed labels: "Bug" , "Duplicate", "Python"
		</comment>
		<comment id='6' author='aijanai' date='2018-03-20T02:05:22Z'>
		&lt;denchmark-link:https://github.com/pracheer&gt;@pracheer&lt;/denchmark-link&gt;
 can you please verify and close this if this is fixed ?
		</comment>
		<comment id='7' author='aijanai' date='2018-03-22T06:40:55Z'>
		This has been fixed and can be closed.
		</comment>
	</comments>
</bug>