<bug id='8646' author='xuzhm' open_date='2017-11-14T07:05:09Z' closed_time='2019-05-08T22:32:57Z'>
	<summary>Bug in FullyConnected???</summary>
	<description>
I   built  a simple  network  like this:
    data = mx.symbol.Variable(name="data")
    net = mx.symbol.Pooling(data=data, global_pool=True, kernel=(2, 2), pool_type='avg', name=('stn_pool2'))
    net = mx.symbol.Flatten(data=net, name='flatten')

    w1 = mx.symbol.Variable(name="fc_loc1_weight", init=mx.init.Zero(), lr_mult=0, wd_mult=0)
    b1 = mx.symbol.Variable(name="fc_loc1_bias", init=mx.init.One(), lr_mult=0, wd_mult=0)
    loc1 = mx.symbol.FullyConnected(data=net, num_hidden=6, name="fc_loc1", weight=w1, bias=b1)

    w2 = mx.symbol.Variable(name="fc_loc2_weight", init=mx.init.Zero(), lr_mult=0, wd_mult=0)
    b2 = mx.symbol.Variable(name="fc_loc2_bias", init=mx.init.Zero(), lr_mult=0, wd_mult=0)
    loc2 = mx.symbol.FullyConnected(data=net, num_hidden=6, name="fc_loc2", weight=w2, bias=b2)

    w3 = mx.symbol.Variable(name="fc_loc3_weight", init=mx.init.Zero(), lr_mult=0, wd_mult=0)
    b3 = mx.symbol.Variable(name="fc_loc3_bias", init=mx.init.One(), lr_mult=0, wd_mult=0)
    loc3 = mx.symbol.FullyConnected(data=net, num_hidden=6, name="fc_loc3", weight=w3, bias=b3)

    locsum = mx.symbol.ElementWiseSum(*[loc1, loc2, loc3], name='loc_sum')

    fc       = mx.symbol.FullyConnected(data=locsum, num_hidden=num_classes, name='fc')
    softmax   = mx.symbol.SoftmaxOutput( data=fc,  name='softmax')



then
  
    model = mx.mod.Module(
        context       = devs,
        symbol        = new_sym
    )

   ...

   def norm_stat(d):
        return d
   mon = mx.mon.Monitor(1, norm_stat, pattern='.*')

   ...

 model.fit(train,
              begin_epoch=epoch,
              num_epoch=num_epoch,
              eval_data=val,
              eval_metric=eval_metric,
              kvstore=kv,
              optimizer='sgd',
              optimizer_params=optimizer_params,
              arg_params=arg_params,
              aux_params=aux_params,
    #          initializer=initializer,
              allow_missing=True, # for new fc layer
              #allow_missing=False, # for new fc layer
              monitor = mon,
              batch_end_callback=mx.callback.Speedometer(args.batch_size, 1),
              epoch_end_callback=checkpoint)
and  plot  the network:
&lt;denchmark-link:https://user-images.githubusercontent.com/6814767/32766517-f640117c-c8d4-11e7-9451-3b1206e419a3.png&gt;&lt;/denchmark-link&gt;

but  the monitor  shows:
&lt;denchmark-link:https://user-images.githubusercontent.com/6814767/32766731-d13cb46a-c8d5-11e7-9028-ae5878a6f1f1.png&gt;&lt;/denchmark-link&gt;

fc_loc1_output  is not same with  fc_loc3_output  , what's wrong?        loc_sum_0  != ( fc_loc1_output + fc_loc2_output + fc_loc3_output  )   ?
&lt;denchmark-link:https://github.com/piiswrong&gt;@piiswrong&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='xuzhm' date='2017-11-14T20:00:01Z'>
		Thanks for reporting this. Do you mind making the code snippet runnable to ease the efforts on reproducing it? (assuming you already have runnable example). Using dummy data (e.g. mx.nd.random.uniform) should suffice.
		</comment>
		<comment id='2' author='xuzhm' date='2017-11-15T08:02:17Z'>
		&lt;denchmark-link:https://github.com/apache/incubator-mxnet/files/1473785/test_fc.py.zip&gt;test_fc.py.zip&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/szha&gt;@szha&lt;/denchmark-link&gt;
    Here is  my test scripts.
The fc output of the monitor in the mx.mod.Module.fit    is very strange  ...
		</comment>
		<comment id='3' author='xuzhm' date='2018-03-12T19:32:41Z'>
		&lt;denchmark-link:https://github.com/eric-haibin-lin&gt;@eric-haibin-lin&lt;/denchmark-link&gt;
 Please tag with "Bug" and "Need triage"
		</comment>
		<comment id='4' author='xuzhm' date='2018-03-24T19:56:09Z'>
		&lt;denchmark-link:https://github.com/anirudh2290&gt;@anirudh2290&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/eric-haibin-lin&gt;@eric-haibin-lin&lt;/denchmark-link&gt;
 please refrain from manually adding "Need Triage" label while triaging. Thanks.
		</comment>
		<comment id='5' author='xuzhm' date='2018-12-26T21:54:22Z'>
		&lt;denchmark-link:https://github.com/szha&gt;@szha&lt;/denchmark-link&gt;
 Has this issue been resolved? Requesting an update on the same
		</comment>
		<comment id='6' author='xuzhm' date='2018-12-26T22:53:53Z'>
		&lt;denchmark-link:https://github.com/vrakesh&gt;@vrakesh&lt;/denchmark-link&gt;
 thanks for pinging. I haven't worked on this so not sure what the status is. I'd recommend trying to reproduce the issue with the above code and see if the issue persists.
		</comment>
		<comment id='7' author='xuzhm' date='2019-03-14T00:58:42Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 add [Operator]
		</comment>
		<comment id='8' author='xuzhm' date='2019-05-06T21:33:06Z'>
		Hello &lt;denchmark-link:https://github.com/xuzhm&gt;@xuzhm&lt;/denchmark-link&gt;

Sorry for the delay in our response.
I ran a sample to verify the above behavior
&lt;denchmark-code&gt;data_0 -&gt; fc_0  \
data_1 -&gt; fc_1   \ 
data_2 -&gt; fc_2      =&gt; sum
data_3 -&gt; fc_3  /
data_4 -&gt; fc_4 /
&lt;/denchmark-code&gt;

Then compare the below:

End to end in single module
Individually calculate output of fc_0, ... fc_4 and then sum it to compare with above result

I find the results are same. And, I am using latest MXNet (1.5.0) got with pip install mxnet-mkl --pre
		</comment>
		<comment id='9' author='xuzhm' date='2019-05-08T22:32:57Z'>
		&lt;denchmark-link:https://github.com/xuzhm&gt;@xuzhm&lt;/denchmark-link&gt;
 close this issue for now since lacking response. Please feel free to reopen if the above solution doesn't help
		</comment>
	</comments>
</bug>