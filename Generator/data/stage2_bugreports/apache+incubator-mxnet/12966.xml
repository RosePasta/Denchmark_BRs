<bug id='12966' author='nikudyshko' open_date='2018-10-24T20:15:04Z' closed_time='2019-01-17T21:06:06Z'>
	<summary>Strange behaviour/possible bug with mxnet::cpp::Symbol::Variable name argument</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

In a nutshell: network doesn't train if I change prefix in Symbol::Variable name argument from "w" and "b" (lines 38, 39 in example &lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/cpp-package/example/mlp_cpu.cpp&gt;mlp_cpu.cpp&lt;/denchmark-link&gt;
) to anything with length greater than 1 char (for example: to "ws"/"bs" or "qwe"/"rty")
&lt;denchmark-h:h2&gt;Environment info&lt;/denchmark-h&gt;

Windows 10 64-bit, Visual Studio 2017 Community Edition (ver. 15.8.4)
MXnet built from source (ver. 1.3.0) with cmake (ver. 3.13.0) and VS2017 (ver. 15.8.4)
I'm using cpp package
&lt;denchmark-h:h2&gt;Minimum reproducible example&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/cpp-package/example/mlp_cpu.cpp&gt;mlp_cpu.cpp&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;Steps to reproduce&lt;/denchmark-h&gt;


Change lines 38, 39 to something like this:
   weights[i] = Symbol::Variable("ws" + std::to_string(i));
   biases[i] = Symbol::Variable("bs" + std::to_string(i));
Compile and run.

&lt;denchmark-h:h2&gt;What have you tried to solve it?&lt;/denchmark-h&gt;


Temporary solution is simple - use only 1 char prefixes (actualy - there are 2 chars, because of string termination char)

I think, that it somehow related to .InferArgsMap function, but that's not for sure.
Probably, related to &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/8126&gt;#8126&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='nikudyshko' date='2018-10-25T17:54:08Z'>
		Thanks for the issue. Adding some labels to help get the correct eyes on this.
&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 [c++, bug]
		</comment>
		<comment id='2' author='nikudyshko' date='2018-10-27T01:50:15Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 [Training]
		</comment>
		<comment id='3' author='nikudyshko' date='2018-10-27T01:51:35Z'>
		&lt;denchmark-link:https://github.com/nikudyshko&gt;@nikudyshko&lt;/denchmark-link&gt;
 , it seems you are using C++ API for training the model. Would you mind sharing your use case? Namely, what made you chose C++ API for training purposes over, let's say, Python API?
		</comment>
		<comment id='4' author='nikudyshko' date='2018-10-27T01:56:17Z'>
		&lt;denchmark-link:https://github.com/leleamol&gt;@leleamol&lt;/denchmark-link&gt;
 , could you please take a look into this issue?
		</comment>
		<comment id='5' author='nikudyshko' date='2018-10-29T17:57:57Z'>
		&lt;denchmark-link:https://github.com/nikudyshko&gt;@nikudyshko&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/ddavydenko&gt;@ddavydenko&lt;/denchmark-link&gt;
  I spent some time experimenting with this issue. This is an interesting issue.  If I use 2 or 3 characters in following lines to name the variable (e.g ws or wst, bs or bst) then the training fails.
weights[i] = Symbol::Variable("ws" + std::to_string(i));
biases[i] = Symbol::Variable("bs" + std::to_string(i));
However, if I use 1 or more than 3 characters then the training proceeds correctly.
I looked at implementations c++ package API implementations briefly and nothing stood out.  I would have to dive deeper.  Would also need to see if it is reproducible in python.
Will provide an update.
		</comment>
		<comment id='6' author='nikudyshko' date='2018-10-30T19:05:20Z'>
		&lt;denchmark-link:https://github.com/nikudyshko&gt;@nikudyshko&lt;/denchmark-link&gt;
 , I compared this C++ implementation with python implementation.  (The excerpt given below). I noted following:

In python API,  while creating "FullyConnected" layer, the names of 'weights' and 'biases' are automatically generated, if not specified. These names are of the format fc_weight and fc_bias
User can specify the names of "weights" and "biases" while creating FullyConnected layer using mx.sympo.FullyConnected. However, the names are required to end with "weight", "bias" , "gamma", etc.  The program (mentioned in the excerpt) prints following error.

&lt;denchmark-code&gt;'Please use mx.sym.Variable(init=mx.init.*) to set initialization pattern' % name)
ValueError: Unknown initialization pattern for 2wt. Default initialization is now limited to "weight", "bias", "gamma" (1.0), and "beta" (0.0).Please use mx.sym.Variable(init=mx.init.*) to set initialization pattern
&lt;/denchmark-code&gt;

This indicates that there are some rules or requirements need to be followed for naming the weights and biases for FullyConnected layers. I have tagged couple of experts who might provide more insight.
&lt;denchmark-link:https://github.com/eric-haibin-lin&gt;@eric-haibin-lin&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/nswamy&gt;@nswamy&lt;/denchmark-link&gt;

Excerpt of the program that creates mlp symbol in python.
&lt;denchmark-code&gt;data = mx.symbol.Variable('data')
wname = 'wt';
w1 = mx.sym.Variable(str(1) + wname);
w2 = mx.sym.Variable(str(2) + wname);
w3 = mx.sym.Variable(str(3) + wname);
fc1 = mx.symbol.FullyConnected(data, weight= w1, name='fc1', num_hidden=128)
act1 = mx.symbol.Activation(fc1, name='relu1', act_type="relu")
fc2 = mx.symbol.FullyConnected(act1, weight=w2, name = 'fc2', num_hidden = 64)
act2 = mx.symbol.Activation(fc2, name='relu2', act_type="relu")
fc3 = mx.symbol.FullyConnected(act2, weight=w3, name='fc3', num_hidden=10)
softmax = mx.symbol.SoftmaxOutput(fc3, name = 'sm')
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='nikudyshko' date='2018-10-30T23:13:54Z'>
		The issue is similar to the issue &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/8108&gt;#8108&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='nikudyshko' date='2018-11-01T00:04:54Z'>
		&lt;denchmark-link:https://github.com/ddavydenko&gt;@ddavydenko&lt;/denchmark-link&gt;
 Sorry for my late answer, was AFK for few days. I'm developing application, that will be a part of software package for measurement complex from my lab and there is probability that it will require on-line learning. Whole package will be written on C++ so using cpp-api is the only option.
		</comment>
		<comment id='9' author='nikudyshko' date='2018-11-03T00:02:00Z'>
		&lt;denchmark-link:https://github.com/nikudyshko&gt;@nikudyshko&lt;/denchmark-link&gt;
 The following lines in symbol.hpp are causing this behavior.


If the names of "weight" and "bias" variables are not 3 or 4 character long, then gradients for these variables are not upgraded. Hence the training fails. We need to fix this issue.
However, this can be worked around either by having the names of these variables more than 4 character long. Or passing the "std::map&lt;std::string, OpReqType&gt;" to Symbol::SimpleBind() function.
The std::map&lt;std::string, OpReqType&gt; map contains the symbol names for which we would like to update the gradients. Entries in this map will be
&lt;denchmark-code&gt;std::map&lt;std::string, OpReqType&gt; grad_req_type;

// ws1, bs1, ws2, bs2 are the names of weights and bias variables for layer 1 and 2
grad_req_type["ws1"] = OpReqType::kWriteTo
grad_req_type["bs1"] = OpReqType::kWriteTo
grad_req_type["ws2"] = OpReqType::kWriteTo
grad_req_type["bs2"] = OpReqType::kWriteTo

&lt;/denchmark-code&gt;

		</comment>
		<comment id='10' author='nikudyshko' date='2018-11-03T19:28:24Z'>
		&lt;denchmark-link:https://github.com/leleamol&gt;@leleamol&lt;/denchmark-link&gt;
 Thank you for your explanations. Not sure if this issue should be closed, so I leave it up to moderators.
		</comment>
		<comment id='11' author='nikudyshko' date='2019-01-04T21:34:54Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
  Can we close this issue since the fix has been merged with PR &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/13284&gt;#13284&lt;/denchmark-link&gt;

		</comment>
		<comment id='12' author='nikudyshko' date='2019-01-17T20:38:21Z'>
		&lt;denchmark-link:https://github.com/lanking520&gt;@lanking520&lt;/denchmark-link&gt;
  Can you close this issue ? The issue is already fixed and verified.
		</comment>
		<comment id='13' author='nikudyshko' date='2019-01-17T21:06:06Z'>
		&lt;denchmark-link:https://github.com/nikudyshko&gt;@nikudyshko&lt;/denchmark-link&gt;
 Close this issue for now. Please feel free to reopen if issue persist.
		</comment>
	</comments>
</bug>