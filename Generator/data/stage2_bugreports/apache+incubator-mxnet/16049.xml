<bug id='16049' author='canerturkmen' open_date='2019-08-30T10:10:16Z' closed_time='2019-11-01T09:37:36Z'>
	<summary>Initializers should implement `__eq__`</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

HybridBlocks do not initialize with params when parameter initializers are explicitly given, and two initializers don't match (by reference).
&lt;denchmark-h:h2&gt;Environment info (Required)&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;----------Python Info----------
Version      : 3.6.5
Compiler     : GCC 4.2.1 Compatible Apple LLVM 10.0.0 (clang-1000.10.44.4)
Build        : ('default', 'Aug 19 2019 21:45:20')
Arch         : ('64bit', '')
------------Pip Info-----------
Version      : 9.0.3
Directory    : /Users/caner/VENVS/mxnet/lib/python3.6/site-packages/pip
----------MXNet Info-----------
Version      : 1.5.0
Directory    : /Users/caner/VENVS/mxnet/lib/python3.6/site-packages/mxnet
Commit Hash   : 75a9e187d00a8b7ebc71412a02ed0e3ae489d91f
Library      : ['/Users/caner/VENVS/mxnet/lib/python3.6/site-packages/mxnet/libmxnet.so']
Build features:
✖ CUDA
✖ CUDNN
✖ NCCL
✖ CUDA_RTC
✖ TENSORRT
✔ CPU_SSE
✔ CPU_SSE2
✔ CPU_SSE3
✔ CPU_SSE4_1
✔ CPU_SSE4_2
✖ CPU_SSE4A
✔ CPU_AVX
✖ CPU_AVX2
✖ OPENMP
✖ SSE
✖ F16C
✖ JEMALLOC
✖ BLAS_OPEN
✖ BLAS_ATLAS
✖ BLAS_MKL
✖ BLAS_APPLE
✔ LAPACK
✖ MKLDNN
✔ OPENCV
✖ CAFFE
✖ PROFILER
✔ DIST_KVSTORE
✖ CXX14
✖ INT64_TENSOR_SIZE
✔ SIGNAL_HANDLER
✖ DEBUG
----------System Info----------
Platform     : Darwin-17.7.0-x86_64-i386-64bit
system       : Darwin
node         : caner.local
release      : 17.7.0
version      : Darwin Kernel Version 17.7.0: Thu Jun 21 22:53:14 PDT 2018; root:xnu-4570.71.2~1/RELEASE_X86_64
----------Hardware Info----------
machine      : x86_64
processor    : i386
b'machdep.cpu.brand_string: Intel(R) Core(TM) i5-7360U CPU @ 2.30GHz'
b'machdep.cpu.features: FPU VME DE PSE TSC MSR PAE MCE CX8 APIC SEP MTRR PGE MCA CMOV PAT PSE36 CLFSH DS ACPI MMX FXSR SSE SSE2 SS HTT TM PBE SSE3 PCLMULQDQ DTES64 MON DSCPL VMX SMX EST TM2 SSSE3 FMA CX16 TPR PDCM SSE4.1 SSE4.2 x2APIC MOVBE POPCNT AES PCID XSAVE OSXSAVE SEGLIM64 TSCTMR AVX1.0 RDRAND F16C'
b'machdep.cpu.leaf7_features: SMEP ERMS RDWRFSGS TSC_THREAD_OFFSET BMI1 HLE AVX2 BMI2 INVPCID RTM SMAP RDSEED ADX IPT SGX FPU_CSDS MPX CLFSOPT'
b'machdep.cpu.extfeatures: SYSCALL XD 1GBPAGE EM64T LAHF LZCNT PREFETCHW RDTSCP TSCI'
----------Network Test----------
Setting timeout: 10
Timing for MXNet: https://github.com/apache/incubator-mxnet, DNS: 0.0194 sec, LOAD: 0.9172 sec.
Timing for Gluon Tutorial(en): http://gluon.mxnet.io, DNS: 0.1381 sec, LOAD: 0.4366 sec.
Timing for Gluon Tutorial(cn): https://zh.gluon.ai, DNS: 0.3400 sec, LOAD: 1.0238 sec.
Timing for FashionMNIST: https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/dataset/fashion-mnist/train-labels-idx1-ubyte.gz, DNS: 0.1015 sec, LOAD: 1.1239 sec.
Timing for PYPI: https://pypi.python.org/pypi/pip, DNS: 0.0782 sec, LOAD: 1.3505 sec.
Timing for Conda: https://repo.continuum.io/pkgs/free/, DNS: 0.0280 sec, LOAD: 0.2009 sec.
----------Environment----------
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Error Message:&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
&lt;ipython-input-1-3346a22eb7cb&gt; in &lt;module&gt;
     20 
     21 MyBlock(
---&gt; 22     params=bl.collect_params()
     23 )

&lt;ipython-input-1-3346a22eb7cb&gt; in __init__(self, **kwargs)
     11                 shape=(1,),
     12                 allow_deferred_init=False,
---&gt; 13                 init=mx.init.Constant(-10.0),
     14             )
     15 

~/VENVS/mxnet/lib/python3.6/site-packages/mxnet/gluon/parameter.py in get(self, name, **kwargs)
    784                         "does not match with stored for attribute '%s': " \
    785                         "desired '%s' vs stored '%s'."%(
--&gt; 786                             name, k, str(v), str(getattr(param, k)))
    787                 else:
    788                     setattr(param, k, v)

AssertionError: Cannot retrieve Parameter 'myblock0_some_param' because desired attribute does not match with stored for attribute 'init': desired '&lt;mxnet.initializer.Constant object at 0x10c55e400&gt;' vs stored '&lt;mxnet.initializer.Constant object at 0x10bb41e80&gt;'.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Minimum reproducible example&lt;/denchmark-h&gt;

import mxnet as mx
from mxnet import gluon

class MyBlock(gluon.HybridBlock):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        with self.name_scope():
            self.some_param = self.params.get(
                "some_param",
                shape=(1,),
                allow_deferred_init=False,
                init=mx.init.Constant(-10.0),
            )
            
bl = MyBlock()

bl.collect_params()
bl.initialize()

MyBlock(
    params=bl.collect_params()
)
&lt;denchmark-h:h2&gt;Steps to reproduce&lt;/denchmark-h&gt;

(Paste the commands you ran that produced the error.)




&lt;denchmark-h:h2&gt;What have you tried to solve it?&lt;/denchmark-h&gt;





	</description>
	<comments>
		<comment id='1' author='canerturkmen' date='2019-08-30T10:10:18Z'>
		Hey, this is the MXNet Label Bot.
Thank you for submitting the issue! I will try and suggest some labels so that the appropriate MXNet community members can help resolve it.
Here are my recommended label(s): Gluon, Feature
		</comment>
		<comment id='2' author='canerturkmen' date='2019-08-30T18:53:34Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 add [Gluon, Question]
		</comment>
		<comment id='3' author='canerturkmen' date='2019-08-30T21:54:18Z'>
		I think this is what is happening.

When MyBlock is first instantiated and assigned to "bl", it creates the "some_param" with "init=mx.init.Constant(-10.0)"
While instantiating another object (at the end of the script), we retrieve params from "bl" (using bl.collect_params()) and set them to be params for the newly instantiated object.
In the newly instantiated object, when "self.params.get" is called, it finds the "some_param" to be already present but it's already initialized with "mx.init.Constant(-10.0)" in "bl" hence it falis.

The problem can be avoided by implementing the MyBlock constructor as follows:
&lt;denchmark-code&gt;class MyBlock(gluon.HybridBlock):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        with self.name_scope():
            self.some_param = self.params.get("some_param", shape=(1,), allow_deferred_init=False)
            self.some_param.initialize(init=mx.init.Constant(-10.0))
&lt;/denchmark-code&gt;

The ParamDict.get() method tries to retrieve the parameter if it already exists, it creates a new one if not present.
&lt;denchmark-link:https://github.com/canerturkmen&gt;@canerturkmen&lt;/denchmark-link&gt;
 please let me know if it answers your question.
&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 add [Pending Requester Info]
		</comment>
		<comment id='4' author='canerturkmen' date='2019-09-01T08:30:53Z'>
		Indeed, that is a nice workaround.
Ultimately I thought this was an issue since the two initializers are (logically) equivalent, and that the Initializer class does not implement __eq__. But if it's expected behavior that the parameter initialization compares initializers by reference, my question is answered.
		</comment>
		<comment id='5' author='canerturkmen' date='2019-09-03T16:37:29Z'>
		Thanks &lt;denchmark-link:https://github.com/canerturkmen&gt;@canerturkmen&lt;/denchmark-link&gt;
 for your response!
&lt;denchmark-link:https://github.com/lanking520&gt;@lanking520&lt;/denchmark-link&gt;
  Please feel free to close this issue
		</comment>
		<comment id='6' author='canerturkmen' date='2019-10-30T07:50:43Z'>
		It's not expected behaviour that the parameter initialization compares initializers by reference. Initializers should implement __eq__. The current workaround is a workaround, but does not provide good user experience. It actually requires knowing the context that the parameters should be initialized on while constructing the Block. Further it throws warnings when sharing parameters between multiple blocks.
Thus re-opening the issue.
		</comment>
		<comment id='7' author='canerturkmen' date='2019-10-30T23:41:51Z'>
		A workaround not requiring to specify context is as follows
class MyBlock(gluon.HybridBlock):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        with self.name_scope():
            self.some_param = self.params.get(
                "some_param", shape=(1,), allow_deferred_init=False, init=mx.init.Constant(-10.0)
                if not self.params._shared or
                self.params.prefix + 'some_param' not in self.params._shared
                else None)
Note that to make this work correctly, don't pass on params=params to child-blocks of a block that shares parameters.
		</comment>
		<comment id='8' author='canerturkmen' date='2019-11-01T09:37:36Z'>
		Fixed by &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/16680&gt;#16680&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>