<bug id='18952' author='Zha0q1' open_date='2020-08-17T22:25:21Z' closed_time='2020-09-09T20:30:25Z'>
	<summary>Numpy copysign backward error</summary>
	<description>
&lt;denchmark-code&gt;======================================== FAILURES ================================[44/1372]
______________________________________ test_copysign ______________________________________
                                                                                           
    @use_np                                                                                
    def test_copysign():                                                                   
        A = np.ones((INT_OVERFLOW, 2))                                                     
        A.attach_grad()                                                                    
        with mx.autograd.record():                                                         
&gt;           B = np.copysign(A, -1)                                                         
                                                                                           
tests/nightly/test_np_large_array.py:430:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
python/mxnet/util.py:647: in _wrap_np_binary_func
    return func(x1, x2, out=out)
python/mxnet/numpy/multiarray.py:7826: in copysign
    return _mx_nd_np.copysign(x1, x2, out=out)
python/mxnet/util.py:647: in _wrap_np_binary_func
    return func(x1, x2, out=out)
python/mxnet/ndarray/numpy/_op.py:5789: in copysign
    return _api_internal.copysign(x1, x2, out)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;mxnet._ffi.function.Function object at 0x7fa1e86acdc0&gt;
args = (array([[1., 1.],
       [1., 1.],
       [1., 1.],
       ...,
       [1., 1.],
       [1., 1.],
       [1., 1.]]), -1, None)
temp_args = []
values = &lt;mxnet._ffi._ctypes.function.MXNetValue_Array_3 object at 0x7fa19ae0ddd0&gt;
tcodes = &lt;mxnet._ffi._ctypes.function.c_int_Array_3 object at 0x7fa19ae0def0&gt;

    def __call__(self, *args):
        """Call the function with positional arguments

        args : list
           The positional arguments to the function call.
        """
        temp_args = []
        values, tcodes, num_args = _make_mxnet_args(args, temp_args)
        ret_val = MXNetValue()
        ret_tcode = ctypes.c_int()
        if _LIB.MXNetFuncCall(
                self.handle, values, tcodes, ctypes.c_int(num_args),
                ctypes.byref(ret_val), ctypes.byref(ret_tcode)) != 0:
&gt;           raise get_last_ffi_error()
E           mxnet.base.MXNetError: Traceback (most recent call last):
E             File "../src/c_api/../operator/custom/../operator_common.h", line 375
E           MXNetError: Check failed: pNode-&gt;num_inputs() == pNode-&gt;inputs.size() (1 vs. 2)
 : Number of inputs to operator _backward_npi_copysign_scalar (1) does not match the actual
 number of inputs provided to operator node_0_backward (2).

python/mxnet/_ffi/_ctypes/function.py:115: MXNetError

&lt;/denchmark-code&gt;

I got this error when trying to run:
&lt;denchmark-code&gt;def test_copysign():
    A = np.ones((INT_OVERFLOW, 2))
    A.attach_grad() 
    with mx.autograd.record():
        B = np.copysign(A, -1)
    print(B) 
    assert B.shape == (INT_OVERFLOW, 2)
    B.backward()
    assert A.grad.shape == (INT_OVERFLOW, 2)
&lt;/denchmark-code&gt;

However, this was able to run with no problem:
&lt;denchmark-code&gt;@use_np   
def test_copysign():
    A = np.ones((INT_OVERFLOW, 2))
    #A.attach_grad()
    #with mx.autograd.record():
    B = np.copysign(A, -1) 
    print(B) 
    assert B.shape == (INT_OVERFLOW, 2)
    #B.backward()
    #assert A.grad.shape == (INT_OVERFLOW, 2)
&lt;/denchmark-code&gt;

Am I doing this wrong?
	</description>
	<comments>
	</comments>
</bug>