<bug id='14105' author='mseth10' open_date='2019-02-09T14:16:24Z' closed_time='2019-03-14T23:10:20Z'>
	<summary>nd.slice errors out when end=-1 and step=-1</summary>
	<description>
&lt;denchmark-h:h3&gt;Description&lt;/denchmark-h&gt;

For mxnet.ndarray.slice(data, begin, end), if end=-1 and step=-1, it does not return a reversed tensor. Instead, it gives an invalid data error.
&lt;denchmark-h:h3&gt;Minimum reproducible environment&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;&gt;&gt;&gt; import mxnet.ndarray as nd
&gt;&gt;&gt; a = nd.normal(shape=(4))
&gt;&gt;&gt; a
[2.2122064 0.7740038 1.0434405 1.1839255]
&lt;NDArray 4 @cpu(0)&gt;a = nd.normal(shape=(4))
&gt;&gt;&gt; a1 = nd.slice(a, begin=2, end=-1, step=-1)
&lt;/denchmark-code&gt;

Expected output: [1.0434405 0.7740038 2.2122064]
Outputs:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "test_slice.py", line 4, in &lt;module&gt;
    a1 = nd.slice(a, begin=2, end=-1, step=-1)
  File "&lt;string&gt;", line 86, in slice
  File "/home/ubuntu/workspace/mxnet0/python/mxnet/_ctypes/ndarray.py", line 92, in _imperative_invoke
    ctypes.byref(out_stypes)))
  File "/home/ubuntu/workspace/mxnet0/python/mxnet/base.py", line 252, in check_call
    raise MXNetError(py_str(_LIB.MXGetLastError()))
mxnet.base.MXNetError: [13:57:39] /home/ubuntu/workspace/mxnet0/src/operator/tensor/./matrix_op-inl.h:716: Check failed: e &lt; b (3 vs. 2) slicing with begin=[0]=2, end[0]=3, and step[0]=-1 is invalid
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='mseth10' date='2019-02-09T14:16:27Z'>
		Hey, this is the MXNet Label Bot.
Thank you for submitting the issue! I will try and suggest some labels so that the appropriate MXNet community members can help resolve it.
Here are my recommended labels: Bug
		</comment>
		<comment id='2' author='mseth10' date='2019-02-09T14:16:57Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 add [Python, NDArray, Operator, Bug]
		</comment>
		<comment id='3' author='mseth10' date='2019-02-24T06:03:12Z'>
		According to numpy, this should return an empty array. Since MXNet does not support emtpy array in computation, it simply throws exception. So there is nothing wrong for now until we support empty arrays which has been planned.
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; data = np.random.uniform(size=(4,))
&gt;&gt;&gt; data
array([0.19584417, 0.05437645, 0.73802081, 0.20259332])
&gt;&gt;&gt; data[2:-1:-1]
array([], dtype=float64)
		</comment>
		<comment id='4' author='mseth10' date='2019-03-14T17:27:36Z'>
		&lt;denchmark-link:https://github.com/reminisce&gt;@reminisce&lt;/denchmark-link&gt;
 numpy behavior seems to be inconsistent . For example
&lt;denchmark-code&gt;&gt;&gt;&gt; data = np.random.uniform(size=(4,))
&gt;&gt;&gt; data
array([0.6677262 , 0.29855998, 0.32659663, 0.15015646])
&gt;&gt;&gt; data[2:0:-1]
array([0.32659663, 0.29855998])
&gt;&gt;&gt; data[2:-1:-1]
array([], dtype=float64)
&gt;&gt;&gt;
&lt;/denchmark-code&gt;

end = 0 returns the two element array till index 1. end = -1 instead of returning 3 element array returns empty array. Ideally it should return the three element array. Otherwise there is no way to include the 0th index with negative step.
		</comment>
		<comment id='5' author='mseth10' date='2019-03-14T18:05:52Z'>
		Opened an issue with numpy for the same &lt;denchmark-link:https://github.com/numpy/numpy/issues/13123&gt;numpy/numpy#13123&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='mseth10' date='2019-03-14T19:13:13Z'>
		According to numpy, -1 corresponds to last element of array.
To include element 0, slice down to None, or just omit that bound.
&gt;&gt;&gt; data = np.random.uniform(size=(4,))
&gt;&gt;&gt; data
array([0.39041899, 0.65619514, 0.79147856, 0.71647746])
&gt;&gt;&gt; data[2:None:-1]
array([0.79147856, 0.65619514, 0.39041899])
&gt;&gt;&gt; data[2::-1]
array([0.79147856, 0.65619514, 0.39041899])
		</comment>
		<comment id='7' author='mseth10' date='2019-03-14T23:10:19Z'>
		Closing this issue as the behavior is consistent with numpy.
Here is how we can get the element at 0-th index with MXNet NDArray.
&lt;denchmark-code&gt;&gt;&gt;&gt; import mxnet.ndarray as nd
&gt;&gt;&gt; a = nd.normal(shape=(4))
&gt;&gt;&gt; a
[2.2122064 0.7740038 1.0434405 1.1839255]
&lt;NDArray 4 @cpu(0)&gt;
&gt;&gt;&gt; nd.slice(a, begin=2, end=(None,), step=-1)
[1.0434405 0.7740038 2.2122064]
&lt;NDArray 3 @cpu(0)&gt;
&lt;/denchmark-code&gt;

Note: None needs to be given as part of a tuple.
		</comment>
	</comments>
</bug>