<bug id='13265' author='chenyujing1234' open_date='2018-11-14T16:26:24Z' closed_time='2019-07-17T22:23:41Z'>
	<summary>MXNet C++Interface reasoning leads to CPU memory leak</summary>
	<description>
I am using the c++ interface of mxnet to carry out the reasoning of mtcnn algorithm for face detection.
Environment: Ubuntu16.04.1 + GPU cuda9.0 + MXNet1.3.0
I use the interface: MXPredCreate MXPredReshape MXPredForward MXPredFree...
When I used a lot of pictures for stress testing (running for a long time), I found that my process occupied more and more CPU memory, and eventually it occupied all the memory.
My process was forced to kill by the system.
Later, I wrote the program To Test:

If only do MXPredCreate, then MXPredFree, and MXPredCreate gives different width and height.
After 100 thousand cycles, memory will increase by 1G
If you do MXPredCreate, and then MXPredReshape to change the width and height, so that the continuous cycle, found that memory leaks very quickly, less than half an hour to leak 4G.
Do you want to invite MXNet's main developers to find this problem? Please track it down for me. It has been bothering me for almost a week.

	</description>
	<comments>
		<comment id='1' author='chenyujing1234' date='2018-11-14T19:13:49Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 add [C++, Memory, Bug, Pending Requester Info]
Thanks for raising the issue &lt;denchmark-link:https://github.com/chenyujing1234&gt;@chenyujing1234&lt;/denchmark-link&gt;
. Can you provide a bit more info so we can better help?
&lt;denchmark-h:h2&gt;Environment info (Required)&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;What to do:
1. Download the diagnosis script from https://raw.githubusercontent.com/apache/incubator-mxnet/master/tools/diagnose.py
2. Run the script using `python diagnose.py` and paste its output here.

&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Build info (If built from source)&lt;/denchmark-h&gt;

Compiler (gcc/clang/mingw/visual studio):
MXNet commit hash:
(Paste the output of git rev-parse HEAD here.)
Build config:
(Paste the content of config.mk, or the build command.)
&lt;denchmark-h:h2&gt;Minimum reproducible example&lt;/denchmark-h&gt;

Can you share the code for the program that you used to test the memory leak?
		</comment>
		<comment id='2' author='chenyujing1234' date='2018-11-14T20:24:04Z'>
		&lt;denchmark-link:https://github.com/chenyujing1234&gt;@chenyujing1234&lt;/denchmark-link&gt;
 Would you be able to post some sample code, that when run in a loop will leak?  If we can run this for a fixed number of iterations (say 1234 loops) we should then be able to look with an ASAN build and see what's leaking.
		</comment>
		<comment id='3' author='chenyujing1234' date='2018-11-15T01:43:09Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 update [Bug, C API, Memory, Pending Requester Info]
		</comment>
		<comment id='4' author='chenyujing1234' date='2018-11-15T11:57:55Z'>
		You can get my test code from this address. TKS
&lt;denchmark-link:https://pan.baidu.com/s/19Wtd_Cf1BGF-2MS3le1mYA&gt;https://pan.baidu.com/s/19Wtd_Cf1BGF-2MS3le1mYA&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='chenyujing1234' date='2018-11-15T11:58:18Z'>
		
@mxnet-label-bot update [Bug, C API, Memory, Pending Requester Info]
You can get my test code from this address. TKS
https://pan.baidu.com/s/19Wtd_Cf1BGF-2MS3le1mYA

		</comment>
		<comment id='6' author='chenyujing1234' date='2018-11-15T11:58:38Z'>
		
@chenyujing1234 Would you be able to post some sample code, that when run in a loop will leak? If we can run this for a fixed number of iterations (say 1234 loops) we should then be able to look with an ASAN build and see what's leaking.

You can get my test code from this address. TKS
&lt;denchmark-link:https://pan.baidu.com/s/19Wtd_Cf1BGF-2MS3le1mYA&gt;https://pan.baidu.com/s/19Wtd_Cf1BGF-2MS3le1mYA&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='chenyujing1234' date='2018-11-15T11:59:02Z'>
		
@mxnet-label-bot add [C++, Memory, Bug, Pending Requester Info]
Thanks for raising the issue @chenyujing1234. Can you provide a bit more info so we can better help?
Environment info (Required)
What to do:
1. Download the diagnosis script from https://raw.githubusercontent.com/apache/incubator-mxnet/master/tools/diagnose.py
2. Run the script using `python diagnose.py` and paste its output here.

Build info (If built from source)
Compiler (gcc/clang/mingw/visual studio):
MXNet commit hash:
(Paste the output of git rev-parse HEAD here.)
Build config:
(Paste the content of config.mk, or the build command.)
Minimum reproducible example
Can you share the code for the program that you used to test the memory leak?

You can get my test code from this address. TKS
&lt;denchmark-link:https://pan.baidu.com/s/19Wtd_Cf1BGF-2MS3le1mYA&gt;https://pan.baidu.com/s/19Wtd_Cf1BGF-2MS3le1mYA&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='chenyujing1234' date='2018-11-15T18:17:49Z'>
		Great bug report &lt;denchmark-link:https://github.com/chenyujing1234&gt;@chenyujing1234&lt;/denchmark-link&gt;
.  Really appreciate the details.  I'll take a look at this on a best-effort basis (might take a while to verify the leaks on my end).
If anyone else from the community has time to jump on this I think it'd be very useful.  I've seen a lot of reports of leaks from users.
		</comment>
		<comment id='9' author='chenyujing1234' date='2018-11-16T06:30:19Z'>
		Are you using a mxnet version that contain MKL-DNN?
		</comment>
		<comment id='10' author='chenyujing1234' date='2018-11-16T07:22:41Z'>
		
Are you using a mxnet version that contain MKL-DNN?

No
		</comment>
		<comment id='11' author='chenyujing1234' date='2018-11-19T02:13:06Z'>
		
Great

Now my project is stuck here, waiting for your reply. Thank you
		</comment>
		<comment id='12' author='chenyujing1234' date='2018-11-19T02:18:56Z'>
		Any chance you could paste the reproducing code on gist.github.com?
		</comment>
		<comment id='13' author='chenyujing1234' date='2018-11-19T02:28:52Z'>
		
Any chance you could paste the reproducing code on gist.github.com?

I am sorry , I can't visit gist.github.com. Can you visit &lt;denchmark-link:https://pan.baidu.com/s/19Wtd_Cf1BGF-2MS3le1mYA&gt;https://pan.baidu.com/s/19Wtd_Cf1BGF-2MS3le1mYA&lt;/denchmark-link&gt;

		</comment>
		<comment id='14' author='chenyujing1234' date='2018-11-19T02:36:16Z'>
		Looks like I need to install an app to access the files, but no worries, I can likely download the code with a colleague tomorrow.
		</comment>
		<comment id='15' author='chenyujing1234' date='2018-11-19T04:57:55Z'>
		&lt;denchmark-link:https://github.com/KellenSunderland&gt;@KellenSunderland&lt;/denchmark-link&gt;

I uploaded the test code attached by &lt;denchmark-link:https://github.com/chenyujing1234&gt;@chenyujing1234&lt;/denchmark-link&gt;
  to google drive , you can get it  by this&lt;denchmark-link:https://drive.google.com/file/d/1NWSzK9Qv1kBCZMoSfz-OxkKCWmIpoBjv/view?usp=sharing&gt; link &lt;/denchmark-link&gt;

		</comment>
		<comment id='16' author='chenyujing1234' date='2018-11-19T13:04:10Z'>
		
Looks like I need to install an app to access the files, but no worries, I can likely download the code with a colleague tomorrow.

I Build ASAN versin, and test, Found memory leak.
the log is :
&lt;denchmark-link:https://gist.github.com/chenyujing1234/0449ecf6f502e5c3538e4f2f018a04e1&gt;https://gist.github.com/chenyujing1234/0449ecf6f502e5c3538e4f2f018a04e1&lt;/denchmark-link&gt;

		</comment>
		<comment id='17' author='chenyujing1234' date='2018-11-19T19:05:29Z'>
		Great work, looks like the ASAN build is setup right and detecting errors.  What I would do now is run the offending code in a loop with a fixed number of iterations, then look for a leak that has a multiple of that number.  If there's a genuine leak it should be present there.  For example you could run MXPredCreate, MXPredReshape, MXPredForward and then MXPredFree in a loop 123 times, then look for mem leaks with a multiple of 123 instances.
This guide may also help you:
&lt;denchmark-link:https://cwiki.apache.org/confluence/display/MXNET/Detecting+Memory+Leaks+and+Buffer+Overflows+in+MXNet&gt;https://cwiki.apache.org/confluence/display/MXNET/Detecting+Memory+Leaks+and+Buffer+Overflows+in+MXNet&lt;/denchmark-link&gt;

		</comment>
		<comment id='18' author='chenyujing1234' date='2018-11-20T02:32:13Z'>
		
Great work, looks like the ASAN build is setup right and detecting errors. What I would do now is run the offending code in a loop with a fixed number of iterations, then look for a leak that has a multiple of that number. If there's a genuine leak it should be present there. For example you could run MXPredCreate, MXPredReshape, MXPredForward and then MXPredFree in a loop 123 times, then look for mem leaks with a multiple of 123 instances.
This guide may also help you:
https://cwiki.apache.org/confluence/display/MXNET/Detecting+Memory+Leaks+and+Buffer+Overflows+in+MXNet
Some of my test code need to be modified, otherwise the memory overflow error will be reported.
include/mxnet_mtcnn.hpp
42             buffer_.reset(new char[length_ + 1]);
43             ifs.read(buffer_.get(), length_);
44             ifs.close();
45             buffer_[length_] = '\0';

		</comment>
		<comment id='19' author='chenyujing1234' date='2018-11-21T01:45:13Z'>
		
Great work, looks like the ASAN build is setup right and detecting errors. What I would do now is run the offending code in a loop with a fixed number of iterations, then look for a leak that has a multiple of that number. If there's a genuine leak it should be present there. For example you could run MXPredCreate, MXPredReshape, MXPredForward and then MXPredFree in a loop 123 times, then look for mem leaks with a multiple of 123 instances.
This guide may also help you:
https://cwiki.apache.org/confluence/display/MXNET/Detecting+Memory+Leaks+and+Buffer+Overflows+in+MXNet

Has any result ?
		</comment>
		<comment id='20' author='chenyujing1234' date='2018-11-22T06:52:50Z'>
		
Great work, looks like the ASAN build is setup right and detecting errors. What I would do now is run the offending code in a loop with a fixed number of iterations, then look for a leak that has a multiple of that number. If there's a genuine leak it should be present there. For example you could run MXPredCreate, MXPredReshape, MXPredForward and then MXPredFree in a loop 123 times, then look for mem leaks with a multiple of 123 instances.
This guide may also help you:
https://cwiki.apache.org/confluence/display/MXNET/Detecting+Memory+Leaks+and+Buffer+Overflows+in+MXNet

&lt;denchmark-h:h1&gt;I've solved one the memory leak problem caused by using reshape functions in the CPU version.
Cause:  PredictorHandle object is not released after calling Reshape.&lt;/denchmark-h&gt;

But there will still be memory leaks in reasoning on gpu, but I don't know how to compile the version of ASAN. Can you help me to compile the version of ASAN of GPU-cuda 9.0?
		</comment>
		<comment id='21' author='chenyujing1234' date='2018-11-23T15:19:53Z'>
		Now GPU reasoning will still have memory leaks, troubled for two weeks, now want to go online, but stuck here. I don't know what you got there?
		</comment>
		<comment id='22' author='chenyujing1234' date='2018-11-24T05:00:47Z'>
		You can drop reshape to avoid this.
		</comment>
		<comment id='23' author='chenyujing1234' date='2018-12-20T09:37:07Z'>
		I found the same issue. Every time I do reshape first and Free the reshaped handle. However, mem usage increased very quickly. My mxnet version is 1.2.1rc1, built with mkldnn. The issue both appeared in mac os and ubuntu. &lt;denchmark-link:https://github.com/chinakook&gt;@chinakook&lt;/denchmark-link&gt;
 If drop reshape, must call MXPredCreate  every time before do infer. Would there be a performance issue? Or it seems that i could prepare a few fixed size models for dynamic input.
		</comment>
		<comment id='24' author='chenyujing1234' date='2018-12-20T12:51:39Z'>
		Create a fixed model for the biggest size of input image, and pad every image to this biggest one.
		</comment>
		<comment id='25' author='chenyujing1234' date='2018-12-24T01:09:36Z'>
		Finally, it was found that because the original Pred object was not released when Reshape Function was called, it would not be leaked if it was released.
		</comment>
		<comment id='26' author='chenyujing1234' date='2019-01-04T23:35:45Z'>
		&lt;denchmark-link:https://github.com/chenyujing1234&gt;@chenyujing1234&lt;/denchmark-link&gt;
 can you please let us know if the issue is fixed? If it is we can close this issue.
Thanks,
		</comment>
		<comment id='27' author='chenyujing1234' date='2019-01-04T23:35:58Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 add [Pending Requester Info]
		</comment>
		<comment id='28' author='chenyujing1234' date='2019-01-15T01:21:14Z'>
		I think this should have been fixed by &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/13376&gt;#13376&lt;/denchmark-link&gt;
 (we may want to consider backporting it given the number of reports).
		</comment>
		<comment id='29' author='chenyujing1234' date='2019-01-17T01:39:30Z'>
		
I found the same issue. Every time I do reshape first and Free the reshaped handle. However, mem usage increased very quickly. My mxnet version is 1.2.1rc1, built with mkldnn. The issue both appeared in mac os and ubuntu. @chinakook If drop reshape, must call MXPredCreate every time before do infer. Would there be a performance issue? Or it seems that i could prepare a few fixed size models for dynamic input.

I have the same issue, I just use MXPredCreate and MXPredFree everytime, but still got cpu and gpu memory leak. it is slow but still leaks memory.
		</comment>
		<comment id='30' author='chenyujing1234' date='2019-01-17T01:43:20Z'>
		
Finally, it was found that because the original Pred object was not released when Reshape Function was called, it would not be leaked if it was released.

you mean we should manually release the former handle after reshape, and manually release reshape handle after use?
		</comment>
		<comment id='31' author='chenyujing1234' date='2019-02-01T01:56:22Z'>
		I also got the memory leak ,  call like this :
MXPredCreate()
MXPredSetInput(x);
MXPredForward(x); //memory leak
MXPredFree(x);
, when I mask the call :  MXPredForward(),  the mem leak will not turn up(memory use do not grow).
		</comment>
		<comment id='32' author='chenyujing1234' date='2019-02-03T20:17:13Z'>
		I tried to reproduce the memory leak with an ASAN build and don't see anything that jumps out as a leak.  There's a number of data structures allocated and then not released, but these structures don't seem to increase over time/iterations.
My could sample runs a simplification of the image-classification demo.  A snippet of the code tested for leaks is here: &lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/8e2c0adb61b5f5ceee4d090f1413c8697a61e008/example/image-classification/predict-cpp/image-classification-predict.cc&gt;https://github.com/apache/incubator-mxnet/blob/8e2c0adb61b5f5ceee4d090f1413c8697a61e008/example/image-classification/predict-cpp/image-classification-predict.cc&lt;/denchmark-link&gt;

The results reported by ASAN are here: &lt;denchmark-link:http://jenkins.mxnet-ci.amazon-ml.com/blue/rest/organizations/jenkins/pipelines/mxnet-validation/pipelines/miscellaneous/branches/PR-13917/runs/14/nodes/137/log/?start=0&gt;http://jenkins.mxnet-ci.amazon-ml.com/blue/rest/organizations/jenkins/pipelines/mxnet-validation/pipelines/miscellaneous/branches/PR-13917/runs/14/nodes/137/log/?start=0&lt;/denchmark-link&gt;

What I would expect to see if there was a genuine leak in my code would be an ASAN leak summary that would report leaked objects that are some multiple of '1234', my iteration size.  I don't see any objects that look like they were leaked as part of a MXPredCreate/MXPredForward/MXPredFree iteration.
What I did notice is that the image-classification sample has a buffer overflow as a result of not properly null-terminating the char* buffer containing the symbolic graph description.  I'll see if I can submit a PR to fix that, and if anyone is basing their code on this sample please make sure that the symbol buffer you pass into MXPredCreate is null terminated.
If others are still having problems with leaks, would you be able to post a small sample that replicates the leak?  That way others can have a look at your specific sample to determine where this leak is coming from.
		</comment>
		<comment id='33' author='chenyujing1234' date='2019-02-15T03:53:05Z'>
		&lt;denchmark-link:https://github.com/KellenSunderland&gt;@KellenSunderland&lt;/denchmark-link&gt;
 I found the memory leaks in ASAN reports of image classification example mainly come from &lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/src/common/object_pool.h#L135&gt;https://github.com/apache/incubator-mxnet/blob/master/src/common/object_pool.h#L135&lt;/denchmark-link&gt;

Why commented out the free operation?
		</comment>
		<comment id='34' author='chenyujing1234' date='2019-02-15T04:30:28Z'>
		&lt;denchmark-link:https://github.com/arcadiaphy&gt;@arcadiaphy&lt;/denchmark-link&gt;
 I'm relatively new to the code base so take this with a grain of salt, but my guess is the following:

Memory allocation on GPU is expensive so MxNet doesn't really free it during the life of the program, they re-use it using their custom allocator pool
They could free the memory at program exit when the allocator pool gets destructed but:
a) Who cares, if the program is exiting anyway, let the OS take care of re-claiming the memory
b) As the comment in the code you pointed out mentions, they need to be careful that they don't free the memory until after all other destructors that might still have pointers to the memory try to access it; if there are global variables or something then destructor order can be tricky and why bother anyway because of (a)

Actually just dug a little more and saw this comment:



incubator-mxnet/src/engine/threaded_engine.h


        Lines 543 to 549
      in
      149d810






    * \brief Holding a shared_ptr to the object pool to prevent it from being destructed too early 



    * See also #309 (https://github.com/dmlc/mxnet/issues/309) 



  */ 



   std::shared_ptr&lt;common::ObjectPool&lt;ThreadedOpr&gt; &gt;       objpool_opr_ref_; 



   std::shared_ptr&lt;common::ObjectPool&lt;OprBlock&gt; &gt;          objpool_blk_ref_; 



   std::shared_ptr&lt;common::ObjectPool&lt;VersionedVarBlock&gt; &gt; objpool_varblk_ref_; 



   std::shared_ptr&lt;common::ObjectPool&lt;ThreadedVar&gt; &gt;       objpool_var_ref_; 





That points here:
&lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/309&gt;#309&lt;/denchmark-link&gt;

So my guess is my explanation is probably mostly correct.
		</comment>
		<comment id='35' author='chenyujing1234' date='2019-02-15T06:33:40Z'>
		&lt;denchmark-link:https://github.com/stephenrawls&gt;@stephenrawls&lt;/denchmark-link&gt;
 The object pool is used to quickly allocate variables when threaded engine schedules computing operations, so it's not related to GPU memory.
I think the object pools will only be destructed at program exit, so I cannot imagine what memory problems will be caused during destructing. I have re-added the free operation several weeks ago, and no problems are found in my using process.
After fix this memory pool issue, some ASAN memory tests should be set up in CI to avoid memory leaks in C++ interface.
		</comment>
		<comment id='36' author='chenyujing1234' date='2019-02-15T07:03:48Z'>
		I see, thanks for background. I didn't look closely so just assumed it was about GPU memory.
Re: "I cannot imagine what memory problems will be caused during destruction".
I'm not an expert, but I think that in general destruction order is undefined for global variables and it can cause memory related problems if the memory an object needs during destruction has been freed before its destructor runs. Because the order of destruction is undefined things often seem to run fine until you get unlucky and the order changes.
See the issue I mentioned earlier, or this one: &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/12613&gt;#12613&lt;/denchmark-link&gt;

No idea if it applies here or not though.
		</comment>
		<comment id='37' author='chenyujing1234' date='2019-02-15T07:32:03Z'>
		&lt;denchmark-link:https://github.com/stephenrawls&gt;@stephenrawls&lt;/denchmark-link&gt;
 Thanks for mentioning related issues, they are all singleton destructing problems. Crash happens when accessing too early destructed singletons. The main problem of object pools is fixed in &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/312&gt;#312&lt;/denchmark-link&gt;
, maybe there are still some underlying issues.
I think the correct way is to just let problem happens, then we can fix them to approach leak-free codes.
		</comment>
		<comment id='38' author='chenyujing1234' date='2019-03-08T03:52:11Z'>
		Thanks for the great discussion! &lt;denchmark-link:https://github.com/JohnLee168&gt;@JohnLee168&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/coolwebgo&gt;@coolwebgo&lt;/denchmark-link&gt;
 are you guys still seeing memory leak ? Can you provide a reproducible script for this.
		</comment>
		<comment id='39' author='chenyujing1234' date='2019-07-17T22:23:41Z'>
		&lt;denchmark-link:https://github.com/chenyujing1234&gt;@chenyujing1234&lt;/denchmark-link&gt;
 Close this issue for inactivity. Please feel free to reopen if problem persist
		</comment>
	</comments>
</bug>