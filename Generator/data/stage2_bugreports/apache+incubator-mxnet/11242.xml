<bug id='11242' author='yjcn' open_date='2018-06-12T07:38:03Z' closed_time='2018-06-20T03:20:18Z'>
	<summary>Same model with c_predict_api gets an incorrect result but it is right in python.</summary>
	<description>
I use my own dataset( 3 classes) to train a vgg16_reduced model. And it works well in &lt;denchmark-link:https://github.com/apache/incubator-mxnet/tree/master/example/ssd&gt;mxnet-ssd python&lt;/denchmark-link&gt;
. And I want to use the c++ interface. First, I use deploy.py to deploy the model.  I test the depolyed model, it works well too in python. Then I test it in&lt;denchmark-link:https://github.com/zhreshold/mxnet-ssd.cpp&gt; mxnet-ssd.cpp&lt;/denchmark-link&gt;

and &lt;denchmark-link:https://gist.github.com/shuokay/c8234fc5f2230ab79e89306a822f5edd&gt;single cpp file ssd&lt;/denchmark-link&gt;
.And there is no errors , but the result is incorrect(no detection).  I also trained inceptionv3 model, the result is same.
	</description>
	<comments>
		<comment id='1' author='yjcn' date='2018-06-12T18:03:36Z'>
		Hello &lt;denchmark-link:https://github.com/yjcn&gt;@yjcn&lt;/denchmark-link&gt;
 - Thanks for submitting the issue. Could you paste a log of your results here?
		</comment>
		<comment id='2' author='yjcn' date='2018-06-13T12:05:10Z'>
		&lt;denchmark-link:https://github.com/kalyc&gt;@kalyc&lt;/denchmark-link&gt;
   Thanks for your reply.
This is python ssd  's result.
&lt;denchmark-link:https://user-images.githubusercontent.com/8858803/41349684-37f27924-6f43-11e8-8a5b-ea7f1a0789eb.png&gt;&lt;/denchmark-link&gt;

This is cpp ssd 's result and log.
&lt;denchmark-link:https://user-images.githubusercontent.com/8858803/41349727-65f5af3a-6f43-11e8-92eb-cc1e25e3ba68.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/8858803/41349933-ff6e458c-6f43-11e8-8ae2-8d3a6fd71793.jpg&gt;&lt;/denchmark-link&gt;

This my cpp ssd &lt;denchmark-link:https://gist.github.com/shuokay/c8234fc5f2230ab79e89306a822f5edd&gt;code &lt;/denchmark-link&gt;
 Is anything wrong?
&lt;denchmark-code&gt;#include &lt;stdio.h&gt;

// Path for c_predict_api
#include &lt;mxnet/c_predict_api.h&gt;

#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

#include &lt;opencv2/opencv.hpp&gt;

const mx_float DEFAULT_MEAN = 117.0;

// Read file to buffer
class BufferFile {
 public :
    std::string file_path_;
    int length_;
    char* buffer_;

    explicit BufferFile(std::string file_path)
    :file_path_(file_path) {

        std::ifstream ifs(file_path.c_str(), std::ios::in | std::ios::binary);
        if (!ifs) {
            std::cerr &lt;&lt; "Can't open the file. Please check " &lt;&lt; file_path &lt;&lt; ". \n";
            length_ = 0;
            buffer_ = NULL;
            return;
        }

        ifs.seekg(0, std::ios::end);
        length_ = ifs.tellg();
        ifs.seekg(0, std::ios::beg);
        std::cout &lt;&lt; file_path.c_str() &lt;&lt; " ... "&lt;&lt; length_ &lt;&lt; " bytes\n";

        buffer_ = new char[sizeof(char) * length_];
        ifs.read(buffer_, length_);
        ifs.close();
    }

    int GetLength() {
        return length_;
    }
    char* GetBuffer() {
        return buffer_;
    }

    ~BufferFile() {
        if (buffer_) {
          delete[] buffer_;
          buffer_ = NULL;
        }
    }
};

void GetImageFile(const std::string image_file,
                  mx_float* image_data, const int channels,
                  const cv::Size resize_size, const mx_float* mean_data = nullptr) {
    // Read all kinds of file into a BGR color 3 channels image
    cv::Mat im_ori = cv::imread(image_file, cv::IMREAD_COLOR);

    if (im_ori.empty()) {
        std::cerr &lt;&lt; "Can't open the image. Please check " &lt;&lt; image_file &lt;&lt; ". \n";
        assert(false);
    }

    cv::Mat im;

    resize(im_ori, im, resize_size);

    float mean_b, mean_g, mean_r;
    mean_b = 104.0;
    mean_g = 117.0;
    mean_r = 123.0;
    for(int i=0; i &lt; im.cols; ++i){
      uchar* data = im.ptr&lt;uchar&gt;(i);
      for(int j=0; j&lt; im.rows; ++j){
        image_data[i*im.cols+j+2] = static_cast&lt;mx_float&gt;(*data++) - mean_b;
        image_data[i*im.cols+j+1] = static_cast&lt;mx_float&gt;(*data++) - mean_g;
        image_data[i*im.cols+j] = static_cast&lt;mx_float&gt;(*data++) - mean_r;
      }
    }
}

int main(int argc, char* argv[]) {
    if (argc &lt; 4) {
        std::cout &lt;&lt; "Usage: ./detect symbol_path params_path image_path" &lt;&lt; std::endl;
        return 0;
    }

    std::string test_file;
    test_file = std::string(argv[3]);

    // Models path for your model, you have to modify it
    std::string json_file = std::string(argv[1]);
    std::string param_file = std::string(argv[2]);

    BufferFile json_data(json_file);
    BufferFile param_data(param_file);

    // Parameters
    int dev_type = 1;  // 1: cpu, 2: gpu
    int dev_id = 0;  // arbitrary.
    mx_uint num_input_nodes = 1;  // 1 for feedforward
    const char* input_key[1] = {"data"};
    const char** input_keys = input_key;

    // Image size and channels
    int width = 512;
    int height = 512;
    int channels = 3;

    const mx_uint input_shape_indptr[2] = { 0, 4 };
    const mx_uint input_shape_data[4] = { 1, static_cast&lt;mx_uint&gt;(channels), static_cast&lt;mx_uint&gt;(height), static_cast&lt;mx_uint&gt;(width)};
    PredictorHandle pred_hnd = 0;

    if (json_data.GetLength() == 0 || param_data.GetLength() == 0) {
        return -1;
    }

    // Create Predictor
    MXPredCreate((const char*)json_data.GetBuffer(),
                 (const char*)param_data.GetBuffer(),
                 static_cast&lt;size_t&gt;(param_data.GetLength()),
                 dev_type, dev_id, num_input_nodes, input_keys, input_shape_indptr, input_shape_data, &amp;pred_hnd);
    assert(pred_hnd);

    int image_size = width * height * channels;


    // // Read Image Data
    std::vector&lt;mx_float&gt; image_data = std::vector&lt;mx_float&gt;(image_size);
    GetImageFile(test_file, image_data.data(), channels, cv::Size(width, height));
    // // Set Input Image
    int64 start = cv::getTickCount();
    MXPredSetInput(pred_hnd, "data", image_data.data(), image_size);
    // // Do Predict Forward
    MXPredForward(pred_hnd);

    mx_uint output_index = 0;

    mx_uint *shape = 0;
    mx_uint shape_len;

    // Get Output Result
    MXPredGetOutputShape(pred_hnd, output_index, &amp;shape, &amp;shape_len);

    size_t size = 1;
    for (mx_uint i = 0; i &lt; shape_len; ++i) size *= shape[i];

    std::vector&lt;float&gt; data(size);

    MXPredGetOutput(pred_hnd, 0, data.data(), size);
    int64 end = cv::getTickCount();
    double secs = (end-start)/cv::getTickFrequency();
    std::cout&lt;&lt;"time: " &lt;&lt;secs&lt;&lt;std::endl;
    assert(data.size() % 6 == 0);
    cv::Mat mat = cv::imread(test_file, 1);
    int orig_cols = mat.cols;
    int orig_rows = mat.rows;
    cv::resize(mat, mat, cv::Size(width, height));
    for(int i=0; i&lt;data.size(); i+=6){
      if(data[i]&lt;0) continue;
      int id = static_cast&lt;int&gt;(data[i]);
      float score = data[i+1];
      if(score &lt; 0.5) continue;
      std::cout&lt;&lt;score&lt;&lt;std::endl;
      int xmin = static_cast&lt;int&gt;((data[i+2])*width);
      int ymin = static_cast&lt;int&gt;((data[i+3])*height);
      int xmax = static_cast&lt;int&gt;((data[i+4])*width);
      int ymax = static_cast&lt;int&gt;((data[i+5])*height);
      cv::rectangle(mat, cv::Point(xmin, ymin), cv::Point(xmax, ymax), cv::Scalar(255, 0, 0), 2);
    }
    cv::resize(mat, mat, cv::Size(orig_cols, orig_rows));
    cv::imshow(test_file, mat);
    cv::waitKey(0);
    return 0;
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='yjcn' date='2018-06-15T18:38:46Z'>
		Hey &lt;denchmark-link:https://github.com/yjcn&gt;@yjcn&lt;/denchmark-link&gt;
,
Thanks for pasting the results from CPP API. Could you also predict those from Python API as well?
It appears that you are using CPP, while the issue name mentions C API. Could you edit the issue title accordingly.
&lt;denchmark-link:https://github.com/sandeep-krishnamurthy&gt;@sandeep-krishnamurthy&lt;/denchmark-link&gt;
 could you add label "Bug", "C++", "Python" to this issue?
		</comment>
		<comment id='4' author='yjcn' date='2018-06-16T04:02:04Z'>
		&lt;denchmark-link:https://github.com/kalyc&gt;@kalyc&lt;/denchmark-link&gt;

this is python ssd 's log.
&lt;denchmark-link:https://user-images.githubusercontent.com/8858803/41495600-e01dbe0e-715c-11e8-88b7-197f5098757f.png&gt;&lt;/denchmark-link&gt;

Although the code is cpp, the api is c_predict_api.
		</comment>
		<comment id='5' author='yjcn' date='2018-06-20T03:20:18Z'>
		I found the problem. The GetImageFile function is wrong
The right function is
&lt;denchmark-code&gt;void GetImageFile(const std::string image_file,
                  mx_float* image_data, const int channels,
                  const cv::Size resize_size, const mx_float* mean_data = nullptr) {
    // Read all kinds of file into a BGR color 3 channels image
    cv::Mat im_ori = cv::imread(image_file, cv::IMREAD_COLOR);

    if (im_ori.empty()) {
        std::cerr &lt;&lt; "Can't open the image. Please check " &lt;&lt; image_file &lt;&lt; ". \n";
        assert(false);
    }

    cv::Mat im;

    cv::resize(im_ori, im, resize_size);

    float mean_b, mean_g, mean_r;
    mean_b = 104.0;
    mean_g = 117.0;
    mean_r = 123.0;
    for(int i=0; i &lt; im.rows; ++i){
      uchar* data = im.ptr&lt;uchar&gt;(i);
      for(int j=0; j&lt; im.cols; ++j){
        image_data[2*im.rows*im.cols+i*im.cols+j] = static_cast&lt;mx_float&gt;(*data++) - mean_b;
        image_data[im.rows*im.cols+i*im.cols+j] = static_cast&lt;mx_float&gt;(*data++) - mean_g;
        image_data[i*im.cols+j] = static_cast&lt;mx_float&gt;(*data++) - mean_r;
      }
    }
}
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>