<bug id='14833' author='roywei' open_date='2019-04-29T15:26:33Z' closed_time='2019-05-21T18:40:48Z'>
	<summary>[Numpy][Keras-MXNet] Infer shape partial failed for unknown shapes</summary>
	<description>
I came from a user reported issue here: &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/14751#issuecomment-486866935&gt;#14751 (comment)&lt;/denchmark-link&gt;

Currently latest MXNet does not work with Keras-MXNet(v2.2.4.1)
In &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/14661&gt;#14661&lt;/denchmark-link&gt;
, unknown shape in mxnet was represented using , and changed to , this brought some unexpected behavior on  of some of the operators in MXNet.
As noted in the &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/14661&gt;PR&lt;/denchmark-link&gt;
 discussion, when many operators were implemented for the first time, some strong assumption may have been made because zero-dim and zero-size tensors are not introduced.
Also, many of these problems are not revealed in MXNet because unknown dim place holders (0 or -1) are not used often. For now, this change does not bring any other compatibility issue except in the &lt;denchmark-link:https://github.com/awslabs/keras-apache-mxnet&gt;keras-mxnet&lt;/denchmark-link&gt;
 project. Keras-MXNet relies a lot on unknown shapes and infer_shape_partial internally.
As I'm trying to fix the problem, I m using this issue to record the operators in MXNet where the infer shape logic may be wrong.
Following are the operators I found now, more to come:

 dot
DotShape need to return if lhs or rhs shape is unknow:
adding the following at this line
solves it

&lt;denchmark-code&gt;if (!shape_is_known(lshape) || !shape_is_known(rshape)) return false;
&lt;/denchmark-code&gt;


 transpose
we were checking dim  here

&lt;denchmark-code&gt;CHECK_LE(shp.ndim(), 6U)
&lt;/denchmark-code&gt;


 pooling
CHECK_GE, CHECK_LE
https://github.com/apache/incubator-mxnet/blob/master/src/operator/pooling_v1-inl.h#L246

fails if shp.dim() is -1 because it's comparing signed with unsigned and returning false, but -1 is lesser than 6
Thanks, &lt;denchmark-link:https://github.com/reminisce&gt;@reminisce&lt;/denchmark-link&gt;
 for the help to identify these issues, I'm still trying to come up with the full list of ops impacted as I need to convert keras-mxnet bugs to pure mxnet root cause.
cc &lt;denchmark-link:https://github.com/junrushao1994&gt;@junrushao1994&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/sandeep-krishnamurthy&gt;@sandeep-krishnamurthy&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='roywei' date='2019-04-29T15:26:37Z'>
		Hey, this is the MXNet Label Bot.
Thank you for submitting the issue! I will try and suggest some labels so that the appropriate MXNet community members can help resolve it.
Here are my recommended labels: Feature
		</comment>
		<comment id='2' author='roywei' date='2019-04-29T15:52:37Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 add [Bug, Numpy, Operator]
		</comment>
		<comment id='3' author='roywei' date='2019-07-22T17:57:54Z'>
		This does not yet appear fixed with keras-mxnet 2.2.4.1 and mxnet 1.5.0
&lt;denchmark-code&gt;mxnet.base.MXNetError: Invalid Parameter format for lrs expect tuple of &lt;float&gt; but value='[_mulscalar7:[tensor=True dtype=float32], _mulscalar9:[tensor=True dtype=float32], _mulscalar11:[tensor=True dtype=float32], _mulscalar13:[tensor=True dtype=float32]]', in operator multi_sgd_mom_update(name="", rescale_grad="1.0", momentum="0.9", wds="[0.0, 0.0, 0.0, 0.0]", lrs="[_mulscalar7:[tensor=True dtype=float32], _mulscalar9:[tensor=True dtype=float32], _mulscalar11:[tensor=True dtype=float32], _mulscalar13:[tensor=True dtype=float32]]", num_weights="4")
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='roywei' date='2019-07-22T21:25:22Z'>
		Hi &lt;denchmark-link:https://github.com/iamthebot&gt;@iamthebot&lt;/denchmark-link&gt;
 , we just released MXNet 1.5.0, and keras-mxnet will release 2.2.4.2 in next week or so. Then it will be fixed. Tracked here: &lt;denchmark-link:https://github.com/awslabs/keras-apache-mxnet/issues/234&gt;awslabs/keras-apache-mxnet#234&lt;/denchmark-link&gt;

The fix require change on both MXNet and keras-mxnet. change on keras-mxnet is only available in master branch and need to build from source to install for now
		</comment>
	</comments>
</bug>