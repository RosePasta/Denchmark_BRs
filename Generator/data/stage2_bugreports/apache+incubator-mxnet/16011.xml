<bug id='16011' author='Pagey' open_date='2019-08-26T13:17:53Z' closed_time='2019-08-26T20:09:13Z'>
	<summary>integer overflow bug in large NDArray AGAIN</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

a bug that has been fixed last year &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/11742&gt;#11742&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/apeforest&gt;@apeforest&lt;/denchmark-link&gt;
 seems to have returned-
when creating large NDArrays indexes seem to overflow
&lt;denchmark-h:h2&gt;Environment info (Required)&lt;/denchmark-h&gt;

windows 10, python 3.6.8, mxnet 1.6.0
&lt;denchmark-h:h2&gt;Error Message:&lt;/denchmark-h&gt;

Traceback (most recent call last):
File "", line 1, in 
File "C:\Program Files\Python36\lib\site-packages\mxnet-1.6.0-py3.6.egg\mxnet\ndarray\ndarray.py", line 194, in repr
return '\n%s\n&lt;%s %s @%s&gt;' % (str(self.asnumpy()),
File "C:\Program Files\Python36\lib\site-packages\mxnet-1.6.0-py3.6.egg\mxnet\ndarray\ndarray.py", line 2092, in asnumpy
ctypes.c_size_t(data.size)))
File "C:\Program Files\Python36\lib\site-packages\mxnet-1.6.0-py3.6.egg\mxnet\base.py", line 253, in check_call
raise MXNetError(py_str(_LIB.MXGetLastError()))
mxnet.base.MXNetError: [13:27:53] C:\Jenkins\workspace\mxnet\mxnet\src\ndarray\ndarray_function.cc:51: Check failed: size == to-&gt;Size() (57032704 vs. 4352000000) : copying size mismatch, from: 228130816 bytes, to: 17408000000 bytes.
&lt;denchmark-h:h2&gt;Minimum reproducible example&lt;/denchmark-h&gt;

(from issues it appeared in before &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/10807&gt;#10807&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/9207&gt;#9207&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/10158&gt;#10158&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/9304&gt;#9304&lt;/denchmark-link&gt;
)



print(mx.nd.zeros(shape=(34000000,128)))
or



import numpy as np
import mxnet as mx
X = np.zeros((200000, 32768), dtypes=np.float32)
mx.nd.array(X)
&lt;denchmark-h:h2&gt;Steps to reproduce&lt;/denchmark-h&gt;

see MRE
&lt;denchmark-h:h2&gt;What have you tried to solve it?&lt;/denchmark-h&gt;


build from April 11 2019 seems not to have this issue, so was probably added later

	</description>
	<comments>
		<comment id='1' author='Pagey' date='2019-08-26T13:17:57Z'>
		Hey, this is the MXNet Label Bot.
Thank you for submitting the issue! I will try and suggest some labels so that the appropriate MXNet community members can help resolve it.
Here are my recommended label(s): Bug
		</comment>
		<comment id='2' author='Pagey' date='2019-08-26T14:15:09Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 add [bug]
		</comment>
		<comment id='3' author='Pagey' date='2019-08-26T14:15:43Z'>
		&lt;denchmark-link:https://github.com/apeforest&gt;@apeforest&lt;/denchmark-link&gt;
 Would you please take a look?
		</comment>
		<comment id='4' author='Pagey' date='2019-08-26T17:57:01Z'>
		&lt;denchmark-link:https://github.com/access2rohit&gt;@access2rohit&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='Pagey' date='2019-08-26T18:29:08Z'>
		&lt;denchmark-link:https://github.com/Pagey&gt;@Pagey&lt;/denchmark-link&gt;
 The was some performance regression after we changed from int32_t to int64_t in MXNet 1.4 release and we had to add a compiler flag and make the default to int32_t (&lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/14570&gt;#14570&lt;/denchmark-link&gt;
). We have been working on the performance regression issue and plan to use int64_t by default in MXNet 1.6.
For now, please build mxnet from source with compiler flag USE_INT64_TENSOR_SIZE on to work for large NDArray.
		</comment>
		<comment id='6' author='Pagey' date='2019-08-26T20:09:13Z'>
		Closing this issue as it is not a bug
		</comment>
	</comments>
</bug>