<bug id='2555' author='freddycct' open_date='2016-06-28T06:07:08Z' closed_time='2016-07-01T02:23:24Z'>
	<summary>OSError: exception: stack overflow</summary>
	<description>
recent problem... perhaps due to the recent changes in code.
&lt;denchmark-code&gt;Exception ignored in: &lt;bound method Symbol.__del__ of &lt;mxnet.symbol.Symbol object at 0x000001F0E408C6A0&gt;&gt;
Traceback (most recent call last):
  File "C:\Users\chuaf\AppData\Local\Continuum\Miniconda3\lib\site-packages\mxnet-0.7.0-py3.5.egg\mxnet\symbol.py", line 106, in __del__
    check_call(_LIB.MXSymbolFree(self.handle))
OSError: exception: stack overflow
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='freddycct' date='2016-06-28T06:16:27Z'>
		&lt;denchmark-link:https://github.com/freddycct&gt;@freddycct&lt;/denchmark-link&gt;
 Could you provide some code examples for us to debug?
		</comment>
		<comment id='2' author='freddycct' date='2016-06-28T06:22:56Z'>
		hang on, i am compiling the latest commit, let me see if there are any problems...
		</comment>
		<comment id='3' author='freddycct' date='2016-06-28T07:04:29Z'>
		i am still having this crash despite having the latest compiled codes. I will prepare some test data set and upload my code tomorrow. Thank you.
		</comment>
		<comment id='4' author='freddycct' date='2016-06-28T22:22:26Z'>
		I hope you have scikit learn installed...
Please help me out here, you can see it crashes when I do the model.fit.
Unzip and try, it is written in ipython notebook (jupyter notebook)
&lt;denchmark-link:https://github.com/dmlc/mxnet/files/338167/encoder_decoder.zip&gt;encoder_decoder.zip&lt;/denchmark-link&gt;

my specs: Windows 10, Visual Studio 2013, Python 3.5
		</comment>
		<comment id='5' author='freddycct' date='2016-06-28T23:55:01Z'>
		If there is anyone working on it, please message me if you have any questions.
		</comment>
		<comment id='6' author='freddycct' date='2016-06-29T06:23:54Z'>
		&lt;denchmark-link:https://github.com/sxjscience&gt;@sxjscience&lt;/denchmark-link&gt;
 Hi, can please run my code and see whether you encounter the same problem?
		</comment>
		<comment id='7' author='freddycct' date='2016-06-29T08:02:30Z'>
		&lt;denchmark-link:https://github.com/freddycct&gt;@freddycct&lt;/denchmark-link&gt;
 I've run it and have got the same error. I'm trying to find out the cause.
		</comment>
		<comment id='8' author='freddycct' date='2016-06-29T09:36:55Z'>
		I've simplified the code a little bit. Only occurs for large graphs.
import mxnet as mx

def sym_gen(length):
    data = mx.sym.Variable('data')
    wordvec = mx.sym.SliceChannel(data=data, num_outputs=length, squeeze_axis=1, axis=1)
    hidden = mx.sym.Variable('init_hidden')
    for i in range(length):
        hidden = hidden + wordvec[i]
    return hidden
sym = sym_gen(length=20000)
del sym
 has thrown the exception.
&lt;denchmark-link:https://github.com/dmlc/mxnet/blob/master/src/c_api/c_api.cc#L591-L595&gt;https://github.com/dmlc/mxnet/blob/master/src/c_api/c_api.cc#L591-L595&lt;/denchmark-link&gt;

Edit:  Occurs on both windows and linux. We can change the length to a crazy number like 1000000 to make this happen.
		</comment>
		<comment id='9' author='freddycct' date='2016-06-29T17:22:26Z'>
		Thanks &lt;denchmark-link:https://github.com/sxjscience&gt;@sxjscience&lt;/denchmark-link&gt;
 , I am happy to have made some contribution to this project by discovering a bug. I hope it will be resolved soon, so that I can continue with what I was doing.
		</comment>
		<comment id='10' author='freddycct' date='2016-06-30T04:27:12Z'>
		&lt;denchmark-link:https://github.com/freddycct&gt;@freddycct&lt;/denchmark-link&gt;
 You can remove the exception catch by replacing these two lines to . The program can run after applying this hotfix.
		</comment>
		<comment id='11' author='freddycct' date='2016-06-30T04:48:22Z'>
		Replace which two lines?
Does this fully fix the problem? I wouldn't want any memory leak...
		</comment>
		<comment id='12' author='freddycct' date='2016-06-30T04:58:46Z'>
		&lt;denchmark-link:https://github.com/freddycct&gt;@freddycct&lt;/denchmark-link&gt;
 I mean &lt;denchmark-link:https://github.com/dmlc/mxnet/blob/master/src/c_api/c_api.cc#L593-L594&gt;https://github.com/dmlc/mxnet/blob/master/src/c_api/c_api.cc#L593-L594&lt;/denchmark-link&gt;
. It doesn't fix the problem and only enables you to continue running the executors. Another way is to reduce the sequence length.
		</comment>
		<comment id='13' author='freddycct' date='2016-06-30T05:05:21Z'>
		The sequence length is due to the nature of my data. So I cannot reduce it.
Is this is a bug within the C++ codes? If it can be addressed at the python side, I could help out. Otherwise ,the C++ codes are not very easy for me to understand and edit.
Meanwhile, I will use the hotfix you suggested. Thank you.
edit: I think the bug lies at the Symbol destructor, the function of the class destructor might be deleting something that does not exist, or has already been deleted...
		</comment>
		<comment id='14' author='freddycct' date='2016-06-30T05:18:59Z'>
		&lt;denchmark-link:https://github.com/freddycct&gt;@freddycct&lt;/denchmark-link&gt;
 Yes, it's in the C++ and only occurs for large symbolic graphs. You can try Truncated BPTT for long sequences. Directly unfolding the whole sequence and performing forward/backward will be quite slow in this case.
		</comment>
		<comment id='15' author='freddycct' date='2016-06-30T06:11:55Z'>
		&lt;denchmark-link:https://github.com/sxjscience&gt;@sxjscience&lt;/denchmark-link&gt;
 Thank you for the suggestions.
Whenever you are free, please continue to fix the bug at your convenience. Thank you.
		</comment>
		<comment id='16' author='freddycct' date='2016-06-30T17:44:26Z'>
		I simplify the code further, nothing to do with sequence length
&lt;denchmark-code&gt;import mxnet as mx

def sym_gen(length):
    data = mx.sym.Variable('data')
    hidden = mx.sym.Variable('hidden')
    for i in range(length):
        hidden = hidden + data
    return hidden
sym = sym_gen(length=20000)
del sym
&lt;/denchmark-code&gt;

		</comment>
		<comment id='17' author='freddycct' date='2016-06-30T21:06:42Z'>
		This is an interesting problem that raises up. This was due to the usage of shared_ptr inside the symbol and the deletion triggered a chain of shared_ptr deletions, where the recursion of delete function call piles up and causes stack overflow.
Like &lt;denchmark-link:https://github.com/sxjscience&gt;@sxjscience&lt;/denchmark-link&gt;
 said, remove the delete of symbol might be a good temp solution to go. We will think of better alternatives for a safer destruction.
Thanks for finding this interesting case. Also  cc &lt;denchmark-link:https://github.com/mavenlin&gt;@mavenlin&lt;/denchmark-link&gt;
 since it is interesting thing we need to address in pressure testing the graph.
		</comment>
		<comment id='18' author='freddycct' date='2016-06-30T22:02:20Z'>
		should be fixed by &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/2586&gt;#2586&lt;/denchmark-link&gt;

		</comment>
		<comment id='19' author='freddycct' date='2016-07-01T02:10:41Z'>
		Thanks for the fix, it works now...
		</comment>
	</comments>
</bug>