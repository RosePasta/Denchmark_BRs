<bug id='14594' author='wkcn' open_date='2019-04-02T09:08:25Z' closed_time='2019-04-15T21:06:45Z'>
	<summary>[bug]mx.nd.stack couldn't stack scalars</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

Hi, there.
I found a bug about mx.nd.stack, which couldn't stack scalars whose shape is ().
&lt;denchmark-h:h2&gt;Environment info (Required)&lt;/denchmark-h&gt;

Package used (Python/R/Scala/Julia):
Python
&lt;denchmark-h:h2&gt;Build info (Required if built from source)&lt;/denchmark-h&gt;

Compiler (gcc/clang/mingw/visual studio):
gcc
MXNet commit hash:
&lt;denchmark-link:https://github.com/apache/incubator-mxnet/commit/5d2a4510c2c226c6921a8a213d04461f68ca7173&gt;5d2a451&lt;/denchmark-link&gt;

Build config:
make -j 5 USE_OPENCV=1 USE_BLAS=openblas USE_MKLDNN=0
&lt;denchmark-h:h2&gt;Error Message:&lt;/denchmark-h&gt;

I tried to fix the bug, however I do not why attach_grad calls the function infershape.
&lt;denchmark-code&gt;Traceback (most recent call last):                                                                                           
  File "test_stack.py", line 6, in &lt;module&gt;                                                                                  
    a.attach_grad()
  File "/home/wkcn/proj/incubator-mxnet/python/mxnet/ndarray/ndarray.py", line 2163, in attach_grad                          
    grad = op.zeros_like(self)  # pylint: disable=undefined-variable                                                         
  File "&lt;string&gt;", line 42, in zeros_like
  File "/home/wkcn/proj/incubator-mxnet/python/mxnet/_ctypes/ndarray.py", line 92, in _imperative_invoke                     
    ctypes.byref(out_stypes)))
  File "/home/wkcn/proj/incubator-mxnet/python/mxnet/base.py", line 252, in check_call                                       
    raise MXNetError(py_str(_LIB.MXGetLastError()))
mxnet.base.MXNetError: [17:00:14] src/imperative/./imperative_utils.h:125: Check failed: infershape[attrs.op](attrs, &amp;in_shape
s, &amp;out_shapes)                                      
                                                           
Stack trace returned 10 entries:                   
[bt] (0) /home/wkcn/proj/incubator-mxnet/python/mxnet/../../lib/libmxnet.so(dmlc::StackTrace[abi:cxx11]()+0x173) [0x7f5c78f31f
33]                                             
[bt] (1) /home/wkcn/proj/incubator-mxnet/python/mxnet/../../lib/libmxnet.so(dmlc::LogMessageFatal::~LogMessageFatal()+0x39) [0
x7f5c78f32bb9]                                            
[bt] (2) /home/wkcn/proj/incubator-mxnet/python/mxnet/../../lib/libmxnet.so(mxnet::imperative::SetShapeType(mxnet::Context con
st&amp;, nnvm::NodeAttrs const&amp;, std::vector&lt;mxnet::NDArray*, std::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::vector&lt;mxnet::NDArray
*, std::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, mxnet::DispatchMode*)+0x1a79) [0x7f5c7b5a1e69]
[bt] (3) /home/wkcn/proj/incubator-mxnet/python/mxnet/../../lib/libmxnet.so(mxnet::Imperative::Invoke(mxnet::Context const&amp;, n
nvm::NodeAttrs const&amp;, std::vector&lt;mxnet::NDArray*, std::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;, std::vector&lt;mxnet::NDArray*, std
::allocator&lt;mxnet::NDArray*&gt; &gt; const&amp;)+0x674) [0x7f5c7b5a6d24]
[bt] (4) /home/wkcn/proj/incubator-mxnet/python/mxnet/../../lib/libmxnet.so(MXImperativeInvokeImpl(void*, int, void**, int*, v
oid***, int, char const**, char const**)+0x585) [0x7f5c7bc962f5]
[bt] (5) /home/wkcn/proj/incubator-mxnet/python/mxnet/../../lib/libmxnet.so(MXImperativeInvokeEx+0x67) [0x7f5c7bc98847]
[bt] (6) /usr/lib/libffi.so.6(ffi_call_unix64+0x4c) [0x7f5c87a676d0]
[bt] (7) /usr/lib/libffi.so.6(ffi_call+0x230) [0x7f5c87a670a0]
[bt] (8) /usr/lib/python3.7/lib-dynload/_ctypes.cpython-37m-x86_64-linux-gnu.so(_ctypes_callproc+0x2a5) [0x7f5c87acd625]
[bt] (9) /usr/lib/python3.7/lib-dynload/_ctypes.cpython-37m-x86_64-linux-gnu.so(+0x12fb0) [0x7f5c87acdfb0]
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Minimum reproducible example&lt;/denchmark-h&gt;

Test case 1:
import mxnet as mx
import random

a = mx.nd.array(random.randint(1, 100))
b = mx.nd.array(random.randint(1, 100))
a.attach_grad()
b.attach_grad()
ograd = mx.nd.random.uniform(0, 100, (2,))
#with mx.autograd.record():
c = mx.nd.stack(a, b)
#    c.backward(ograd)
print(c)
print(a.grad)
Test case 2:
import mxnet as mx

a = mx.nd.array(3)
b = mx.nd.zeros_like(a)
&lt;denchmark-h:h2&gt;Steps to reproduce&lt;/denchmark-h&gt;


Run the test case

	</description>
	<comments>
		<comment id='1' author='wkcn' date='2019-04-02T09:08:28Z'>
		Hey, this is the MXNet Label Bot.
Thank you for submitting the issue! I will try and suggest some labels so that the appropriate MXNet community members can help resolve it.
Here are my recommended labels: Bug
		</comment>
		<comment id='2' author='wkcn' date='2019-04-02T20:12:59Z'>
		&lt;denchmark-link:https://github.com/wkcn&gt;@wkcn&lt;/denchmark-link&gt;
 looks like this is related to &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/14227&gt;#14227&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='3' author='wkcn' date='2019-04-02T21:06:56Z'>
		scalars are not currently supported. this should probably be fixed by the zero size tensor support work.
		</comment>
		<comment id='4' author='wkcn' date='2019-04-02T22:15:01Z'>
		&lt;denchmark-link:https://github.com/abhinavs95&gt;@abhinavs95&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/anirudh2290&gt;@anirudh2290&lt;/denchmark-link&gt;
 Thank you! It is an issue about zero dimension tensor, which is similar to &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/14227&gt;#14227&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='wkcn' date='2019-04-05T21:29:39Z'>
		&lt;denchmark-link:https://github.com/mxnet-label-bot&gt;@mxnet-label-bot&lt;/denchmark-link&gt;
 update [Bug, operator]
		</comment>
		<comment id='6' author='wkcn' date='2019-04-15T20:04:20Z'>
		&lt;denchmark-link:https://github.com/anirudh2290&gt;@anirudh2290&lt;/denchmark-link&gt;

This is sam as supporting 0 shape -
&lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/14227&gt;#14227&lt;/denchmark-link&gt;

Can we close either of them or both in favor of 0-shape support.
		</comment>
		<comment id='7' author='wkcn' date='2019-04-15T21:06:45Z'>
		duplication of &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/14227&gt;#14227&lt;/denchmark-link&gt;
 and should be fixed by &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/14253&gt;#14253&lt;/denchmark-link&gt;
 . Closing.
		</comment>
	</comments>
</bug>