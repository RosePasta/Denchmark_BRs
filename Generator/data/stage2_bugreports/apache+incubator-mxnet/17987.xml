<bug id='17987' author='leezu' open_date='2020-04-07T03:49:14Z' closed_time='2020-04-08T19:05:45Z'>
	<summary>Dynamic subgraph accesses elements of empty vector</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

Dynamic subgraph code accesses elements of empty vector, causing MXNet to abort.
The PR only passed CI because of the outdated toolchain used on CI. CI with updated toolchain (ie &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/17984&gt;#17984&lt;/denchmark-link&gt;
) catches the bug.
&lt;denchmark-h:h3&gt;Error Message&lt;/denchmark-h&gt;

/usr/include/c++/7/bits/stl_vector.h:815: std::vector&lt;_Tp, _Alloc&gt;::const_reference std::vector&lt;_Tp, _Alloc&gt;::operator[](std::vector&lt;_Tp, _Alloc&gt;::size_type) const [with _Tp = mxnet:: Resource; _Alloc = std::allocator&lt;mxnet::Resource&gt;; std::vector&lt;_Tp, _Alloc&gt;::const_reference = const mxnet::Resource&amp;; std::vector&lt;_Tp, _Alloc&gt;::size_type = long unsigned int]: Asser tion '__builtin_expect(__n &lt; this-&gt;size(), true)' failed.
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

Compile MXNet with gcc7+ and _GLIBCXX_ASSERTIONS, for example via
CC=gcc-7 CXX=g++-7 cmake -GNinja -DUSE_CUDA=0 -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ninja.
Run python3 -m nose --verbose ../tests/python/unittest/test_extensions.py -m test_subgraph.
This will raise the error above.
OR apply the following simple patch
diff --git a/src/c_api/c_api.cc b/src/c_api/c_api.cc
index 949a59406..2c17320f0 100644
--- a/src/c_api/c_api.cc
+++ b/src/c_api/c_api.cc
@@ -187,7 +187,7 @@ void CustomFComputeDispatcher(const std::string op_name,
   }

   // get memory resource and mxnet backend streams
-  const Resource &amp;resource = ctx.requested[0];
+  const Resource &amp;resource = ctx.requested.at(0);
   mshadow::Stream&lt;mxnet::cpu&gt; *cpu_stream = ctx.get_stream&lt;mxnet::cpu&gt;();
   mshadow::Stream&lt;mxnet::gpu&gt; *gpu_stream = ctx.get_stream&lt;mxnet::gpu&gt;();
and MXNet will always crash with vector: :_M_range_check: __n (which is 0) &gt;= this-&gt;size() (which is 0) during the dynamic subgraph test.
cc &lt;denchmark-link:https://github.com/samskalicky&gt;@samskalicky&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/rondogency&gt;@rondogency&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='leezu' date='2020-04-07T05:43:16Z'>
		Hi &lt;denchmark-link:https://github.com/leezu&gt;@leezu&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/rondogency&gt;@rondogency&lt;/denchmark-link&gt;
 and I have discussed unifying the resource requests for custom ops and custom subgraph ops and have made the change in &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/17762&gt;#17762&lt;/denchmark-link&gt;
 to remove . This change will fix the issue such that  will always have at least one element.
But &lt;denchmark-link:https://github.com/rondogency&gt;@rondogency&lt;/denchmark-link&gt;
 being the overly cautious expert that he is also changed it to  and added  too.
Thanks for investigating this issue!
		</comment>
		<comment id='2' author='leezu' date='2020-04-08T19:05:43Z'>
		Fixed by &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/17762&gt;#17762&lt;/denchmark-link&gt;
. Thanks &lt;denchmark-link:https://github.com/rondogency&gt;@rondogency&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/samskalicky&gt;@samskalicky&lt;/denchmark-link&gt;
 for the quick fix.
		</comment>
	</comments>
</bug>