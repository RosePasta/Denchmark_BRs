<bug id='10282' author='ThomasDelteil' open_date='2018-03-27T21:14:13Z' closed_time='2018-03-31T16:44:40Z'>
	<summary>plot_network issue with LRN</summary>
	<description>
There is an issue in master that is not present in 1.1.0
Plotting the network on this tutorial:
&lt;denchmark-link:http://mxnet-ci-doc.s3-accelerate.dualstack.amazonaws.com/PR-10165/10/tutorials/onnx/inference_on_onnx_model.html&gt;http://mxnet-ci-doc.s3-accelerate.dualstack.amazonaws.com/PR-10165/10/tutorials/onnx/inference_on_onnx_model.html&lt;/denchmark-link&gt;

Fails with this error:
&lt;denchmark-code&gt;KeyErrorTraceback (most recent call last)
&lt;ipython-input-15-3112c78b14de&gt; in &lt;module&gt;()
----&gt; 1 mx.visualization.plot_network(sym, shape={"input_0":inputs[0].shape}, node_attrs={"shape":"oval","fixedsize":"false"})

/home/ubuntu/anaconda3/envs/mxnet_p27/lib/python2.7/site-packages/mxnet/visualization.pyc in plot_network(symbol, title, save_format, shape, node_attrs, hide_weights)
    342                                 if "num_outputs" in params:
    343                                     key += str(int(params["num_outputs"]) - 1)
--&gt; 344                             shape = shape_dict[key][1:]
    345                             label = "x".join([str(x) for x in shape])
    346                             attr["label"] = label

KeyError: u'lrn0_output'
&lt;/denchmark-code&gt;

The issue was introduced before mxnet==1.2.0b20180221
It is related to the fact that the LRN layer does not have an output, whilst in 1.1.0 I can do
sym.get_internals()['lrn0_output']
The issue was introduced by this PR and this commit &lt;denchmark-link:https://github.com/apache/incubator-mxnet/commit/c3e3a832bfeceff070ba263aa8a4489ca27f452e&gt;c3e3a83&lt;/denchmark-link&gt;
:
&lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/9677&gt;#9677&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='ThomasDelteil' date='2018-03-28T03:46:31Z'>
		Seems FListOutputNames attribute is not registered with string vector {"output", "tmp_norm"} for LRN operator as it was in legacy interface. I found the same issue with Convolution and FullyConnected a few days back. Need to scan the operator registrations in that PR to see if there are more missing. It could introduce backward incompatibility for applications depending on output names.
&lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/9677/files#diff-3519c5391807f84a8d67bbf60b81bc92L197&gt;https://github.com/apache/incubator-mxnet/pull/9677/files#diff-3519c5391807f84a8d67bbf60b81bc92L197&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/zheng-da&gt;@zheng-da&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='ThomasDelteil' date='2018-03-28T14:27:43Z'>
		I'll fix the LRN op.
&lt;denchmark-link:https://github.com/reminisce&gt;@reminisce&lt;/denchmark-link&gt;
 do we really need to provide output names for convolution and fullyconnected? It seems the old interface doesn't provide output names, except for the operators that have multiple outputs.
BTW, it seems your fix has a bug.
&lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/src/operator/nn/convolution.cc#L471&gt;https://github.com/apache/incubator-mxnet/blob/master/src/operator/nn/convolution.cc#L471&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/src/operator/nn/fully_connected.cc#L270&gt;https://github.com/apache/incubator-mxnet/blob/master/src/operator/nn/fully_connected.cc#L270&lt;/denchmark-link&gt;

Could you please fix it? It should use FListOutputNames.
		</comment>
		<comment id='3' author='ThomasDelteil' date='2018-03-28T14:33:05Z'>
		I checked all other operators. It seems others are fine.
		</comment>
		<comment id='4' author='ThomasDelteil' date='2018-03-28T16:06:11Z'>
		&lt;denchmark-link:https://github.com/zheng-da&gt;@zheng-da&lt;/denchmark-link&gt;
 The legacy interface has  as a virtual function. It's defined in the base class , so all the inheriting classes have this function if it's not implemented in themselves. I will fix the typo.
		</comment>
		<comment id='5' author='ThomasDelteil' date='2018-03-28T16:40:50Z'>
		&lt;denchmark-link:https://github.com/zheng-da&gt;@zheng-da&lt;/denchmark-link&gt;
 The funny thing is that even with the typo of writing  as  in convolution and fc, it still gives me the correct output name as using legacy interface. It turns out that attribute  and  are identical functions. But I will fix the typo anyway and add unit tests.
		</comment>
		<comment id='6' author='ThomasDelteil' date='2018-03-28T17:38:12Z'>
		&lt;denchmark-link:https://github.com/reminisce&gt;@reminisce&lt;/denchmark-link&gt;
 you are right. nnvm::FListInputNames defines the signature of the functor, so your code is fine. it's just a little confusing.
I'm still confused if we have to define FListOutputNames for all operators?
		</comment>
		<comment id='7' author='ThomasDelteil' date='2018-03-28T17:44:30Z'>
		&lt;denchmark-link:https://github.com/ThomasDelteil&gt;@ThomasDelteil&lt;/denchmark-link&gt;
 my PR (&lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/10296&gt;#10296&lt;/denchmark-link&gt;
) has been merged. Can you try it again?
		</comment>
		<comment id='8' author='ThomasDelteil' date='2018-03-28T18:05:44Z'>
		&lt;denchmark-link:https://github.com/zheng-da&gt;@zheng-da&lt;/denchmark-link&gt;
 There is no hard requirement. Doing this is for two reasons:

Keep backward compatibility.
It's sort of the convention of naming all the outputs of nn ops as "output". For all the other tensor ops, I don't observe this convention.

As you can see, there are multiple places in the code base following this convention. In quantization, we also use this to determine which layer should be calibrated or not.
I will submit a PR to fix the cosmetic issue with unit tests covering convolution, fc, and lrn.
		</comment>
		<comment id='9' author='ThomasDelteil' date='2018-03-30T20:26:27Z'>
		&lt;denchmark-link:https://github.com/ThomasDelteil&gt;@ThomasDelteil&lt;/denchmark-link&gt;
 We have open-sourced &lt;denchmark-link:https://github.com/awslabs/mxboard&gt;MXBoard&lt;/denchmark-link&gt;
 which enables users to visualize MXNet data (including network structures) in &lt;denchmark-link:https://pypi.python.org/pypi/tensorboard&gt;TensorBoard&lt;/denchmark-link&gt;
. The current version on PyPI is &lt;denchmark-link:https://pypi.python.org/pypi?:action=display&amp;name=mxboard&amp;version=0.1.0rc3&gt;0.1.0rc3&lt;/denchmark-link&gt;
. You can either install from source or . The GitHub site has rich examples and tutorials on installation and how to use it in MXNet. Could you try it and give us feedbacks? Thanks.
		</comment>
		<comment id='10' author='ThomasDelteil' date='2018-03-30T21:07:07Z'>
		I will try it next week for sure, looks great!
		</comment>
		<comment id='11' author='ThomasDelteil' date='2018-03-31T16:44:39Z'>
		&lt;denchmark-link:https://github.com/zheng-da&gt;@zheng-da&lt;/denchmark-link&gt;
 the fix is working the graph is displaying
		</comment>
	</comments>
</bug>