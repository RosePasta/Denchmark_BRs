<bug id='17641' author='icemelon9' open_date='2020-02-20T22:51:03Z' closed_time='2020-03-04T16:55:02Z'>
	<summary>OpenMP Error</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

Compiled MxNet has duplicate OpenMP library link to both libomp and libiomp.
&lt;denchmark-h:h3&gt;Error Message&lt;/denchmark-h&gt;

(Paste the complete error message. Please also include stack trace by setting environment variable DMLC_LOG_STACK_TRACE_DEPTH=10 before running your script.)
&lt;denchmark-code&gt;OMP: Error #15: Initializing libiomp5.so, but found libomp.so already initialized.
OMP: Hint This means that multiple copies of the OpenMP runtime have been linked
into the program. That is dangerous, since it can degrade performance or cause
incorrect results. The best thing to do is to ensure that only a single OpenMP
runtime is linked into the process, e.g. by avoiding static linking of the
OpenMP runtime in any library. As an unsafe, unsupported, undocumented
workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to
allow the program to continue to execute, but that may cause crashes or silently
produce incorrect results. For more information, please see
http://www.intel.com/software/products/support/.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

I have both Intel MKL and MKLDNN library installed on Ubuntu 18.04. Use the following config to compile MxNet will lead the error shown above.
&lt;denchmark-code&gt;cmake -DUSE_CUDA=0 -DUSE_CUDNN=0 -DUSE_MKLDNN=1 -DCMAKE_BUILD_TYPE=Release -GNinja ..
ninja -v
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;What have you tried to solve it?&lt;/denchmark-h&gt;

After I deleted 3rdparty/openmp, and recompiled mxnet, this error no longer occurs.
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;

Ubuntu 18.04, installed with Intel MKL and MKLDNN library.
	</description>
	<comments>
		<comment id='1' author='icemelon9' date='2020-02-21T09:10:37Z'>
		that is because git clone --recursive pull openmp, and the cmake script don't take care if use system openMP or not



incubator-mxnet/CMakeLists.txt


        Lines 390 to 430
      in
      9dcf71d






 # ---[ OpenMP 



 if(USE_OPENMP) 



 



 function(load_omp) 



 # Intel/llvm OpenMP: https://github.com/llvm-mirror/openmp 



 set(OPENMP_STANDALONE_BUILD TRUE) 



 set(LIBOMP_ENABLE_SHARED TRUE) 



 set(CMAKE_BUILD_TYPE Release) 



 set(OPENMP_ENABLE_LIBOMPTARGET OFF CACHE BOOL "LLVM OpenMP offloading support")  # Requires CMP0077 CMake 3.13 



 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openmp) 



 endfunction() 



 



 # This should build on Windows, but there's some problem and I don't have a Windows box, so 



 # could a Windows user please fix? 



 if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openmp/CMakeLists.txt 



 AND SYSTEM_ARCHITECTURE STREQUAL "x86_64" 



 AND NOT CMAKE_BUILD_TYPE STREQUAL "Distribution" 



 AND NOT MSVC 



 AND NOT CMAKE_CROSSCOMPILING) 



     load_omp() 



 list(REMOVE_ITEM mxnet_LINKER_LIBS iomp5) 



 list(APPEND mxnet_LINKER_LIBS omp) 



 if(UNIX) 



 list(APPEND mxnet_LINKER_LIBS pthread) 



 endif() 



 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}") 



 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}") 



 add_definitions(-DMXNET_USE_OPENMP=1) 



 else() 



 find_package(OpenMP REQUIRED) 



 if(OPENMP_FOUND) 



 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}") 



 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}") 



 set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}") 



 set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}") 



 add_definitions(-DMXNET_USE_OPENMP=1) 



 endif() 



 endif() 



 elseif(UNIX AND NOT ANDROID) 



 list(APPEND mxnet_LINKER_LIBS pthread) 



 endif() 





unfortunately, openmp dont have pkg-config file, or cmake files for interact with cmake
seems need a own cmake module for search it
		</comment>
		<comment id='2' author='icemelon9' date='2020-02-21T09:18:34Z'>
		Same issue: &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/17366&gt;#17366&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='icemelon9' date='2020-02-21T09:45:39Z'>
		this case also same effects with intel-dnnl.
some distros already provide a package intel-dnnl, but mxnet force download the sources again
		</comment>
		<comment id='4' author='icemelon9' date='2020-02-21T17:18:03Z'>
		&lt;denchmark-link:https://github.com/cjolivier01&gt;@cjolivier01&lt;/denchmark-link&gt;
 you previously vetoed changing the omp configuration in cmake build, due to a race condition that had not been fixed. As that has been fixed, are you OK with proceeding to prefer system OMP for the CMake build by default? Or what is your recommendation?
Static build should still statically build omp.
		</comment>
		<comment id='5' author='icemelon9' date='2020-02-21T17:21:25Z'>
		&lt;denchmark-link:https://github.com/sl1pkn07&gt;@sl1pkn07&lt;/denchmark-link&gt;
 given the rapid development of intel-dnnl, MXNet expects a fixed version of intel-dnnl. It's quite unlikely that the system provides that particular version, but patches to improve detection are welcome. Do you want to contribute a PR? But let's track this in a separate issue.
		</comment>
		<comment id='6' author='icemelon9' date='2020-02-21T19:51:32Z'>
		
What is pulling in libiomp5.so ?
Since when is libomp being linked in statically?  I am not aware of this ever being the case.

		</comment>
		<comment id='7' author='icemelon9' date='2020-02-21T19:59:26Z'>
		btw, cmake files have min cmake at 3.13, but default 18.04 cmake install is cmake 3.10.  Does anyone know what the deal is with 3.13?  Ubuntu 18.04 is a pretty widely-used release...
I changed back to 3.10 and it seems to build ok.
		</comment>
		<comment id='8' author='icemelon9' date='2020-02-21T20:15:26Z'>
		
@cjolivier01 you previously vetoed changing the omp configuration in cmake build, due to a race condition that had not been fixed. As that has been fixed, are you OK with proceeding to prefer system OMP for the CMake build by default? Or what is your recommendation?
Static build should still statically build omp.

Not actually.  Due to no legitimate reason to remove it.
		</comment>
		<comment id='9' author='icemelon9' date='2020-02-21T20:43:09Z'>
		
What is pulling in libiomp5.so ?

MKL

btw, cmake files have min cmake at 3.13, but default 18.04 cmake install is cmake 3.10. Does anyone know what the deal is with 3.13? Ubuntu 18.04 is a pretty widely-used release...
I changed back to 3.10 and it seems to build ok.

Just  as per the doc &lt;denchmark-link:https://mxnet.apache.org/get_started/ubuntu_setup&gt;https://mxnet.apache.org/get_started/ubuntu_setup&lt;/denchmark-link&gt;
. It'd be harder to explain when users require 3.13 and when 3.X, or 3.Y, than to uniformly require a recent version. There are various bugs fixed in 3.13 that affect MXNet use-cases (eg cuda, &lt;denchmark-link:https://cmake.org/cmake/help/latest/policy/CMP0077.html&gt;https://cmake.org/cmake/help/latest/policy/CMP0077.html&lt;/denchmark-link&gt;
 for llvm openmp subproject)

Not actually. Due to no legitimate reason to remove it.

Speed up developer build. No need to build llvm openmp if system openmp is present.
		</comment>
		<comment id='10' author='icemelon9' date='2020-02-21T20:57:48Z'>
		openmp is like a 4-5-second build.
On my desktop machine it's &lt; 3:
real    0m2.940s
user    0m42.446s
sys     0m5.442s
		</comment>
		<comment id='11' author='icemelon9' date='2020-02-21T20:58:39Z'>
		I installed mkl, but it does not appear to pick it up.  is there a way to force it?
		</comment>
		<comment id='12' author='icemelon9' date='2020-02-21T21:11:13Z'>
		Actually, i don;t see this behavior when it does pull in mkl/pulling in the other omp (this is Ubuntu 18.04):
&lt;denchmark-code&gt;[chriso@chriso-ripper:~/src/mxnet/build (master)]ldd libmxnet.so 
        linux-vdso.so.1 (0x00007ffcbdf3b000)
        libmkl_rt.so =&gt; /opt/intel/mkl/lib/intel64/libmkl_rt.so (0x00007fb399dd8000)
        librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007fb399bd0000)
        libomp.so =&gt; /home/chriso/src/mxnet/build/3rdparty/openmp/runtime/src/libomp.so (0x00007fb3998ea000)
        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fb3996e6000)
        libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fb3994c7000)
        libstdc++.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007fb39913e000)
        libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007fb398da0000)
        libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fb398b88000)
        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fb398797000)
        /lib64/ld-linux-x86-64.so.2 (0x00007fb3a078c000)
&lt;/denchmark-code&gt;

I don;t show libmkl_rt.so pulling in libiomp5:
&lt;denchmark-code&gt;[chriso@chriso-ripper:~/src/mxnet/build (master)]ldd /opt/intel/mkl/lib/intel64/libmkl_rt.so
        linux-vdso.so.1 (0x00007ffd6c5cc000)
        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fc85058d000)
        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc85019c000)
        /lib64/ld-linux-x86-64.so.2 (0x00007fc850e71000)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='13' author='icemelon9' date='2020-02-21T21:32:22Z'>
		I think  may   as per &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/issues/230#issuecomment-451082066&gt;oneapi-src/oneDNN#230 (comment)&lt;/denchmark-link&gt;
, but I haven't looked into this further yet
		</comment>
		<comment id='14' author='icemelon9' date='2020-02-21T21:41:07Z'>
		Linking in any version of omp statically would probably be a bad idea, since startup order would be important.
		</comment>
		<comment id='15' author='icemelon9' date='2020-02-21T21:42:06Z'>
		Clearly it does not:
[chriso@chriso-ripper:~/src/mxnet/build (master)]ldd /opt/intel/mkl/lib/intel64/libmkl_rt.so
linux-vdso.so.1 (0x00007ffd6c5cc000)
libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fc85058d000)
libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc85019c000)
/lib64/ld-linux-x86-64.so.2 (0x00007fc850e71000)
		</comment>
		<comment id='16' author='icemelon9' date='2020-02-21T21:47:51Z'>
		Yes, that's why dlopen.
		</comment>
		<comment id='17' author='icemelon9' date='2020-02-21T21:51:52Z'>
		and with readelf -a &lt;lib&gt; | grep NEEDED ?
		</comment>
		<comment id='18' author='icemelon9' date='2020-02-21T21:53:59Z'>
		can you supply a  script to reproduc this error? I am not able to reproduce.
		</comment>
		<comment id='19' author='icemelon9' date='2020-02-21T22:00:15Z'>
		i'm using system openmp and no mkl-dnnl. sorry &lt;denchmark-link:https://github.com/icemelon9&gt;@icemelon9&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='20' author='icemelon9' date='2020-02-21T22:12:09Z'>
		&lt;denchmark-link:https://github.com/sl1pkn07&gt;@sl1pkn07&lt;/denchmark-link&gt;
 please open a separate issue for your problem. This issue is about MKL.
		</comment>
		<comment id='21' author='icemelon9' date='2020-02-21T22:12:40Z'>
		&lt;denchmark-link:https://github.com/icemelon9&gt;@icemelon9&lt;/denchmark-link&gt;
 please provide the a reproducer to trigger the error message.
		</comment>
		<comment id='22' author='icemelon9' date='2020-02-24T05:41:08Z'>
		Sorry about the late response. Here's the script to reproduce the error message.
import numpy as np
import mxnet as mx

a = mx.nd.array(np.random.uniform(size=(1024, 128)).astype('float32'))
b = mx.nd.array(np.random.uniform(size=(128, 1024)).astype('float32'))
c = mx.nd.dot(a, b)
c.wait_to_read()
The following shows shared library used by libmxnet on my machine.
&lt;denchmark-code&gt;mxnet git:(master) ldd build/libmxnet.so
        linux-vdso.so.1 (0x00007ffd8b467000)
        libmkl_rt.so =&gt; /opt/intel/mkl/lib/intel64/libmkl_rt.so (0x00007f1abac81000)
        librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007f1abaa79000)
        libopencv_imgcodecs.so.3.2 =&gt; /usr/lib/x86_64-linux-gnu/libopencv_imgcodecs.so.3.2 (0x00007f1aba840000)
        libopencv_imgproc.so.3.2 =&gt; /usr/lib/x86_64-linux-gnu/libopencv_imgproc.so.3.2 (0x00007f1aba2ef000)
        libopencv_core.so.3.2 =&gt; /usr/lib/x86_64-linux-gnu/libopencv_core.so.3.2 (0x00007f1ab9eb4000)
        libomp.so =&gt; /home/ubuntu/repo/mxnet/build/3rdparty/openmp/runtime/src/libomp.so (0x00007f1ab9bce000)
        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f1ab99ca000)
        libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f1ab97ab000)
        libstdc++.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f1ab9422000)
        libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f1ab9084000)
        libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f1ab8e6c000)
        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f1ab8a7b000)
        ...
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;mxnet git:(master) readelf -a build/libmxnet.so| grep NEEDED
 0x0000000000000001 (NEEDED)             Shared library: [libmkl_rt.so]
 0x0000000000000001 (NEEDED)             Shared library: [librt.so.1]
 0x0000000000000001 (NEEDED)             Shared library: [libopencv_imgcodecs.so.3.2]
 0x0000000000000001 (NEEDED)             Shared library: [libopencv_imgproc.so.3.2]
 0x0000000000000001 (NEEDED)             Shared library: [libopencv_core.so.3.2]
 0x0000000000000001 (NEEDED)             Shared library: [libomp.so]
 0x0000000000000001 (NEEDED)             Shared library: [libdl.so.2]
 0x0000000000000001 (NEEDED)             Shared library: [libpthread.so.0]
 0x0000000000000001 (NEEDED)             Shared library: [libstdc++.so.6]
 0x0000000000000001 (NEEDED)             Shared library: [libm.so.6]
 0x0000000000000001 (NEEDED)             Shared library: [libgcc_s.so.1]
 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]
 0x0000000000000001 (NEEDED)             Shared library: [ld-linux-x86-64.so.2]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='23' author='icemelon9' date='2020-02-24T17:24:33Z'>
		&lt;denchmark-code&gt; 0x0000000000000001 (NEEDED)             Shared library: [libmkl_rt.so]
 0x0000000000000001 (NEEDED)             Shared library: [librt.so.1]
 0x0000000000000001 (NEEDED)             Shared library: [libopencv_imgcodecs.so.3.2]
 0x0000000000000001 (NEEDED)             Shared library: [libopencv_imgproc.so.3.2]
 0x0000000000000001 (NEEDED)             Shared library: [libopencv_core.so.3.2]
 0x0000000000000001 (NEEDED)             Shared library: [libomp.so]
 0x0000000000000001 (NEEDED)             Shared library: [libdl.so.2]
 0x0000000000000001 (NEEDED)             Shared library: [libpthread.so.0]
 0x0000000000000001 (NEEDED)             Shared library: [libstdc++.so.6]
 0x0000000000000001 (NEEDED)             Shared library: [libm.so.6]
 0x0000000000000001 (NEEDED)             Shared library: [libgcc_s.so.1]
 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]
 0x0000000000000001 (NEEDED)             Shared library: [ld-linux-x86-64.so.2]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='24' author='icemelon9' date='2020-02-24T17:25:22Z'>
		(pytorch) [chriso@chriso-ripper:~/src/mxnet (master)]python
Python 3.6.10 |Anaconda, Inc.| (default, Jan  7 2020, 21:14:29) 
[GCC 7.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import mxnet as mx
&gt;&gt;&gt; 
&gt;&gt;&gt; a = mx.nd.array(np.random.uniform(size=(1024, 128)).astype('float32'))
&gt;&gt;&gt; b = mx.nd.array(np.random.uniform(size=(128, 1024)).astype('float32'))
&gt;&gt;&gt; c = mx.nd.dot(a, b)
&gt;&gt;&gt; c.wait_to_read()
&gt;&gt;&gt; exit()
Stll can't reproduce.
Can you send entire cmake config log?
		</comment>
		<comment id='25' author='icemelon9' date='2020-02-24T17:55:49Z'>
		CI can also reproduce this issue. I switched CI to testing CMake builds instead of Makefile build in &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/17645&gt;#17645&lt;/denchmark-link&gt;
 and the Python MKLDNN + MKL Pipeline fails with this issue: &lt;denchmark-link:http://jenkins.mxnet-ci.amazon-ml.com/blue/organizations/jenkins/mxnet-validation%2Funix-cpu/detail/PR-17645/30/pipeline/297&gt;Log of test failure&lt;/denchmark-link&gt;
 and &lt;denchmark-link:http://jenkins.mxnet-ci.amazon-ml.com/blue/rest/organizations/jenkins/pipelines/mxnet-validation/pipelines/unix-cpu/branches/PR-17645/runs/30/nodes/297/steps/775/log/?start=0&gt;Raw log of test failure&lt;/denchmark-link&gt;

and &lt;denchmark-link:http://jenkins.mxnet-ci.amazon-ml.com/blue/rest/organizations/jenkins/pipelines/mxnet-validation/pipelines/unix-cpu/branches/PR-17645/runs/30/nodes/48/steps/169/log/?start=0&gt;Raw log of build&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/cjolivier01&gt;@cjolivier01&lt;/denchmark-link&gt;
 the build log contains the output of cmake configuration.
That pipeline relies on the following build
&lt;denchmark-code&gt;build_ubuntu_cpu_mkldnn_mkl() {
    set -ex
    cd /work/build
    cmake \
        -DCMAKE_BUILD_TYPE="RelWithDebInfo" \
        -DUSE_MKL_IF_AVAILABLE=ON \
        -DBLAS="MKL" \
        -DUSE_TVM_OP=ON \
        -DUSE_CUDA=OFF \
        -DUSE_CPP_PACKAGE=ON \
        -G Ninja /work/mxnet
    ninja
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='26' author='icemelon9' date='2020-02-24T18:00:23Z'>
		Here is the cmake log.
&lt;denchmark-code&gt;build git:(master) ✗ cmake -DUSE_CUDA=0 -DUSE_CUDNN=0 -DUSE_MKLDNN=1 -DCMAKE_BUILD_TYPE=Release -GNinja ..
-- The C compiler identification is GNU 7.4.0
-- The CXX compiler identification is GNU 7.4.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- CMAKE_CROSSCOMPILING FALSE
-- CMAKE_HOST_SYSTEM_PROCESSOR x86_64
-- CMAKE_SYSTEM_PROCESSOR x86_64
-- CMAKE_SYSTEM_NAME Linux
-- CMake version '3.16.4' using generator 'Ninja'
-- Performing Test SUPPORT_CXX11
-- Performing Test SUPPORT_CXX11 - Success
-- Performing Test SUPPORT_CXX0X
-- Performing Test SUPPORT_CXX0X - Success
-- MKL-DNN compat: set DNNL_BUILD_EXAMPLES to MKLDNN_BUILD_EXAMPLES with value `OFF`
-- MKL-DNN compat: set DNNL_BUILD_TESTS to MKLDNN_BUILD_TESTS with value `OFF`
-- MKL-DNN compat: set DNNL_ENABLE_JIT_PROFILING to MKLDNN_ENABLE_JIT_PROFILING with value `OFF`
-- MKL-DNN compat: set DNNL_LIBRARY_TYPE to MKLDNN_LIBRARY_TYPE with value `STATIC`
-- MKL-DNN compat: set DNNL_ARCH_OPT_FLAGS to MKLDNN_ARCH_OPT_FLAGS with value ``
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE
-- Found OpenMP_C: -fopenmp (found version "4.5")
-- Found OpenMP_CXX: -fopenmp (found version "4.5")
-- Found OpenMP: TRUE (found version "4.5")
-- GPU support is disabled
-- Could NOT find Doxygen (missing: DOXYGEN_EXECUTABLE)
-- Found Git: /usr/bin/git (found version "2.17.1")
-- Intel(R) VTune(TM) Amplifier JIT profiling disabled
-- Found MKL: /opt/intel/mkl/include
-- Found MKL (include: /opt/intel/mkl/include, lib: /opt/intel/mkl/lib/intel64/libmkl_rt.so
-- Found OpenCV: /usr (found version "3.2.0") found components: core highgui imgproc imgcodecs
-- OpenCV 3.2.0 found (/usr/share/OpenCV)
--  OpenCV_LIBS=opencv_core;opencv_highgui;opencv_imgproc;opencv_imgcodecs
-- Performing Test OPENMP_HAVE_WERROR_FLAG
-- Performing Test OPENMP_HAVE_WERROR_FLAG - Success
-- Performing Test OPENMP_HAVE_STD_GNUPP11_FLAG
-- Performing Test OPENMP_HAVE_STD_GNUPP11_FLAG - Success
-- Performing Test OPENMP_HAVE_STD_CPP11_FLAG
-- Performing Test OPENMP_HAVE_STD_CPP11_FLAG - Success
-- Found PythonInterp: /home/ubuntu/anaconda3/envs/tvm/bin/python (found version "3.6.9")
-- Cannot find llvm-lit.
-- Please put llvm-lit in your PATH, set OPENMP_LLVM_LIT_EXECUTABLE to its full path, or point OPENMP_LLVM_TOOLS_DIR to its directory.
CMake Warning at 3rdparty/openmp/cmake/OpenMPTesting.cmake:22 (message):
  The check targets will not be available!
Call Stack (most recent call first):
  3rdparty/openmp/cmake/OpenMPTesting.cmake:40 (find_standalone_test_dependencies)
  3rdparty/openmp/CMakeLists.txt:49 (include)


-- Performing Test LIBOMP_HAVE_FNO_EXCEPTIONS_FLAG
-- Performing Test LIBOMP_HAVE_FNO_EXCEPTIONS_FLAG - Success
-- Performing Test LIBOMP_HAVE_FNO_RTTI_FLAG
-- Performing Test LIBOMP_HAVE_FNO_RTTI_FLAG - Success
-- Performing Test LIBOMP_HAVE_X_CPP_FLAG
-- Performing Test LIBOMP_HAVE_X_CPP_FLAG - Success
-- Performing Test LIBOMP_HAVE_WCAST_QUAL_FLAG
-- Performing Test LIBOMP_HAVE_WCAST_QUAL_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_FUNCTION_FLAG
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_FUNCTION_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_LOCAL_TYPEDEF_FLAG
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_LOCAL_TYPEDEF_FLAG - Failed
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_VALUE_FLAG
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_VALUE_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_VARIABLE_FLAG
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_VARIABLE_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_SWITCH_FLAG
-- Performing Test LIBOMP_HAVE_WNO_SWITCH_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_COVERED_SWITCH_DEFAULT_FLAG
-- Performing Test LIBOMP_HAVE_WNO_COVERED_SWITCH_DEFAULT_FLAG - Failed
-- Performing Test LIBOMP_HAVE_WNO_DEPRECATED_REGISTER_FLAG
-- Performing Test LIBOMP_HAVE_WNO_DEPRECATED_REGISTER_FLAG - Failed
-- Performing Test LIBOMP_HAVE_WNO_SIGN_COMPARE_FLAG
-- Performing Test LIBOMP_HAVE_WNO_SIGN_COMPARE_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_GNU_ANONYMOUS_STRUCT_FLAG
-- Performing Test LIBOMP_HAVE_WNO_GNU_ANONYMOUS_STRUCT_FLAG - Failed
-- Performing Test LIBOMP_HAVE_WNO_UNKNOWN_PRAGMAS_FLAG
-- Performing Test LIBOMP_HAVE_WNO_UNKNOWN_PRAGMAS_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_MISSING_FIELD_INITIALIZERS_FLAG
-- Performing Test LIBOMP_HAVE_WNO_MISSING_FIELD_INITIALIZERS_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_MISSING_BRACES_FLAG
-- Performing Test LIBOMP_HAVE_WNO_MISSING_BRACES_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_COMMENT_FLAG
-- Performing Test LIBOMP_HAVE_WNO_COMMENT_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_SELF_ASSIGN_FLAG
-- Performing Test LIBOMP_HAVE_WNO_SELF_ASSIGN_FLAG - Failed
-- Performing Test LIBOMP_HAVE_WNO_VLA_EXTENSION_FLAG
-- Performing Test LIBOMP_HAVE_WNO_VLA_EXTENSION_FLAG - Failed
-- Performing Test LIBOMP_HAVE_WNO_FORMAT_PEDANTIC_FLAG
-- Performing Test LIBOMP_HAVE_WNO_FORMAT_PEDANTIC_FLAG - Failed
-- Performing Test LIBOMP_HAVE_WSTRINGOP_OVERFLOW_FLAG
-- Performing Test LIBOMP_HAVE_WSTRINGOP_OVERFLOW_FLAG - Success
-- Performing Test LIBOMP_HAVE_MSSE2_FLAG
-- Performing Test LIBOMP_HAVE_MSSE2_FLAG - Success
-- Performing Test LIBOMP_HAVE_FTLS_MODEL_FLAG
-- Performing Test LIBOMP_HAVE_FTLS_MODEL_FLAG - Success
-- Performing Test LIBOMP_HAVE_MMIC_FLAG
-- Performing Test LIBOMP_HAVE_MMIC_FLAG - Failed
-- Performing Test LIBOMP_HAVE_M32_FLAG
-- Performing Test LIBOMP_HAVE_M32_FLAG - Failed
-- Performing Test LIBOMP_HAVE_X_FLAG
-- Performing Test LIBOMP_HAVE_X_FLAG - Success
-- Performing Test LIBOMP_HAVE_WARN_SHARED_TEXTREL_FLAG
-- Performing Test LIBOMP_HAVE_WARN_SHARED_TEXTREL_FLAG - Success
-- Performing Test LIBOMP_HAVE_AS_NEEDED_FLAG
-- Performing Test LIBOMP_HAVE_AS_NEEDED_FLAG - Success
-- Performing Test LIBOMP_HAVE_VERSION_SCRIPT_FLAG
-- Performing Test LIBOMP_HAVE_VERSION_SCRIPT_FLAG - Success
-- Performing Test LIBOMP_HAVE_STATIC_LIBGCC_FLAG
-- Performing Test LIBOMP_HAVE_STATIC_LIBGCC_FLAG - Success
-- Performing Test LIBOMP_HAVE_Z_NOEXECSTACK_FLAG
-- Performing Test LIBOMP_HAVE_Z_NOEXECSTACK_FLAG - Success
-- Performing Test LIBOMP_HAVE_FINI_FLAG
-- Performing Test LIBOMP_HAVE_FINI_FLAG - Success
-- Found Perl: /usr/bin/perl (found version "5.26.1")
-- Performing Test LIBOMP_HAVE_VERSION_SYMBOLS
-- Performing Test LIBOMP_HAVE_VERSION_SYMBOLS - Success
-- Performing Test LIBOMP_HAVE___BUILTIN_FRAME_ADDRESS
-- Performing Test LIBOMP_HAVE___BUILTIN_FRAME_ADDRESS - Success
-- Performing Test LIBOMP_HAVE_WEAK_ATTRIBUTE
-- Performing Test LIBOMP_HAVE_WEAK_ATTRIBUTE - Success
-- Looking for include files windows.h, psapi.h
-- Looking for include files windows.h, psapi.h - not found
-- Looking for EnumProcessModules in psapi
-- Looking for EnumProcessModules in psapi - not found
-- LIBOMP: Operating System     -- Linux
-- LIBOMP: Target Architecture  -- x86_64
-- LIBOMP: Build Type           -- Release
-- LIBOMP: Library Kind         -- SHARED
-- LIBOMP: Library Type         -- normal
-- LIBOMP: Fortran Modules      -- FALSE
-- LIBOMP: Build                -- 20140926
-- LIBOMP: Use Stats-gathering  -- FALSE
-- LIBOMP: Use Debugger-support -- FALSE
-- LIBOMP: Use ITT notify       -- TRUE
-- LIBOMP: Use OMPT-support     -- TRUE
-- LIBOMP: Use OMPT-optional  -- TRUE
-- LIBOMP: Use Adaptive locks   -- TRUE
-- LIBOMP: Use quad precision   -- TRUE
-- LIBOMP: Use TSAN-support     -- FALSE
-- LIBOMP: Use Hwloc library    -- FALSE
-- Looking for sqrt in m
-- Looking for sqrt in m - found
-- Looking for __atomic_load_1
-- Looking for __atomic_load_1 - not found
-- Looking for __atomic_load_1 in atomic
-- Looking for __atomic_load_1 in atomic - found
-- check-libomp does nothing.
-- check-ompt does nothing.
-- check-openmp does nothing.
USE_LAPACK is ON
CMake Warning at 3rdparty/googletest/googletest/CMakeLists.txt:47 (project):
  VERSION keyword not followed by a value or was followed by a value that
  expanded to nothing.


-- Found GTest: gtest
-- Looking for clock_gettime in rt
-- Looking for clock_gettime in rt - found
-- Looking for fopen64
-- Looking for fopen64 - not found
-- Looking for C++ include cxxabi.h
-- Looking for C++ include cxxabi.h - found
-- Looking for nanosleep
-- Looking for nanosleep - found
-- Looking for backtrace
-- Looking for backtrace - found
-- backtrace facility detected in default set of libraries
-- Found Backtrace: /usr/include
-- Check if the system is big endian
-- Searching 16 bit integer
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of unsigned short
-- Check size of unsigned short - done
-- Using unsigned short
-- Check if the system is big endian - little endian
-- /home/ubuntu/repo/mxnet/3rdparty/dmlc-core/cmake/build_config.h.in -&gt; include/dmlc/build_config.h
-- Performing Test SUPPORT_MSSE2
-- Performing Test SUPPORT_MSSE2 - Success
-- Found OpenMP_C: -fopenmp
-- Found OpenMP_CXX: -fopenmp
-- Found OpenMP: TRUE
-- Performing Test SUPPORT_MSSE3
-- Performing Test SUPPORT_MSSE3 - Success
-- Determining F16C support
-- Performing Test COMPILER_SUPPORT_MF16C
-- Performing Test COMPILER_SUPPORT_MF16C - Success
-- Configuring done
-- Generating done
-- Build files have been written to: /home/ubuntu/repo/mxnet/build
&lt;/denchmark-code&gt;

		</comment>
		<comment id='27' author='icemelon9' date='2020-02-24T18:12:29Z'>
		This is with latest 2020 version of mkl?
		</comment>
		<comment id='28' author='icemelon9' date='2020-02-25T19:02:02Z'>
		

@TaoLv
what version of gcc?

@cjolivier01 this will happen with any version of gcc

&lt;denchmark-link:https://github.com/TaoLv&gt;@TaoLv&lt;/denchmark-link&gt;
 which version of gcc?
		</comment>
		<comment id='29' author='icemelon9' date='2020-02-25T19:13:03Z'>
		
even if I remove the openmp build in CMakeLists.txt and build with clang, I get that warning, since it pulls in libomp from clang

&lt;denchmark-link:https://github.com/cjolivier01&gt;@cjolivier01&lt;/denchmark-link&gt;
 How can we stop clang from pulling in libomp? It doesn't have an effect when static linking, as the symbols are already resolved, but it would be better to not pull libomp in in the first place.
		</comment>
		<comment id='30' author='icemelon9' date='2020-02-26T00:26:53Z'>
		Stopping clang/others from linking to omp seems like the tail wagging the dog.  I think we should consider other options, such as making the static mkl build work, or somehow stopping mkl from being so "clever".
		</comment>
		<comment id='31' author='icemelon9' date='2020-02-26T02:09:42Z'>
		
@TaoLv which version of gcc?

It's 4.8.5 on centos. Do you want me to try a higher version or exclude opencv from the build?

-DMKL_USE_STATIC_LIBS=ON is currently broken on my system and in particular doesn't link iomp statically.

&lt;denchmark-link:https://github.com/leezu&gt;@leezu&lt;/denchmark-link&gt;
, with this flag on, I would expect only MKL libraries to be statically linked while omp runtime is dynamically linked to mxnet.so. That's how we handle the omp linkage of DNNL.
		</comment>
		<comment id='32' author='icemelon9' date='2020-02-26T02:11:54Z'>
		&lt;denchmark-link:https://github.com/leezu&gt;@leezu&lt;/denchmark-link&gt;
 what's the error of statically linking MKL libraries?
		</comment>
		<comment id='33' author='icemelon9' date='2020-02-26T02:35:51Z'>
		&lt;denchmark-link:https://github.com/leezu&gt;@leezu&lt;/denchmark-link&gt;
, previously we thought intel is not distributing iomp static library: &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/8532#issuecomment-341834234&gt;#8532 (comment)&lt;/denchmark-link&gt;
. But from the linked issue, even we fix the omp runtime conflict inside mxnet, we may still encounter conflicts in down stream projects.
		</comment>
		<comment id='34' author='icemelon9' date='2020-02-26T02:37:34Z'>
		
@leezu what's the error of statically linking MKL libraries?

for me it was some link error on some secondary thing like cpp unit test or something like that. libmxnet.so built successfully and the test script was successful. probably not too hard to fix.
		</comment>
		<comment id='35' author='icemelon9' date='2020-02-26T02:42:40Z'>
		Thank you &lt;denchmark-link:https://github.com/cjolivier01&gt;@cjolivier01&lt;/denchmark-link&gt;
 . That's exactly what I just observed.
		</comment>
		<comment id='36' author='icemelon9' date='2020-02-26T06:41:15Z'>
		&lt;denchmark-link:https://github.com/TaoLv&gt;@TaoLv&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/cjolivier01&gt;@cjolivier01&lt;/denchmark-link&gt;
 its not hard to fix. If you look above, I posted the patch to fix it 12 hours ago.
An improved version of that patch is in &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/17645&gt;#17645&lt;/denchmark-link&gt;

		</comment>
		<comment id='37' author='icemelon9' date='2020-02-26T06:51:53Z'>
		Thanks &lt;denchmark-link:https://github.com/leezu&gt;@leezu&lt;/denchmark-link&gt;
! It seems that we have got a consensus to address this issue?
		</comment>
		<comment id='38' author='icemelon9' date='2020-02-26T15:42:10Z'>
		there’s a lot of stuff in that PR，would prefer a more targeted PR.
Also, I think the best fix is link statically to
MKL as we discussed, which as far as I can tell is not addressed in this PR, although I didn’t read every line. i will review some more when i get to my day job, but it would be better to have a small, targeted PR.
		</comment>
		<comment id='39' author='icemelon9' date='2020-02-26T16:20:51Z'>
		i will post a pr in the next day or two that addresses this and also clang issue as  well as transitive omp dependencies which may also cause the error due to mkl behaving foolishly.
		</comment>
		<comment id='40' author='icemelon9' date='2020-02-26T17:01:58Z'>
		&lt;denchmark-link:https://github.com/cjolivier01&gt;@cjolivier01&lt;/denchmark-link&gt;
 the PR coniststs of two commits. Only the second commit is related to omp and implements the conclusion from the discussion in this issue.
I have removed the second commit and disabled testing the MKL cmake builds. I look forward to your improved fix, thanks for contributing that.
		</comment>
		<comment id='41' author='icemelon9' date='2020-03-02T17:43:21Z'>
		&lt;denchmark-link:https://github.com/cjolivier01&gt;@cjolivier01&lt;/denchmark-link&gt;
 thanks for volunteering to contribute the PR! Do you have any status update?
		</comment>
		<comment id='42' author='icemelon9' date='2020-03-03T18:18:20Z'>
		&lt;denchmark-link:https://github.com/cjolivier01&gt;@cjolivier01&lt;/denchmark-link&gt;
 please prioritize the PR, as this affects other users. For example &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/17733&gt;#17733&lt;/denchmark-link&gt;

Let me know if I may resubmit the MKL static linkage commit earlier included in &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/17645&gt;#17645&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='43' author='icemelon9' date='2020-03-03T18:34:39Z'>
		yesh just submit the static linkage
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Tue, Mar 3, 2020 at 10:18 AM Leonard Lausen ***@***.***&gt; wrote:
 @cjolivier01 &lt;https://github.com/cjolivier01&gt; please prioritize the PR,
 as this affects other users. For example #17733
 &lt;#17733&gt;

 Let me know if I may resubmit the MKL static linkage commit earlier
 included in #17645 &lt;#17645&gt;.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 &lt;#17641?email_source=notifications&amp;email_token=ACVWZ7LR6RPRYJPLODWI4TDRFVCW5A5CNFSM4KYYMAM2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOENUSMAA#issuecomment-594093568&gt;,
 or unsubscribe
 &lt;https://github.com/notifications/unsubscribe-auth/ACVWZ7OGQYOOPVXQJOEII2LRFVCW5ANCNFSM4KYYMAMQ&gt;
 .



		</comment>
	</comments>
</bug>