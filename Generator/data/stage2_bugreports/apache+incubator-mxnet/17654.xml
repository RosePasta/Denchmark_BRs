<bug id='17654' author='ZheyuYe' open_date='2020-02-21T15:38:56Z' closed_time='2020-02-25T21:40:45Z'>
	<summary>[LayerNorm] Missing the mismatch cues of in_channels</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

It seems that LayerNorm could work through even the setting of in_channels is wrong. As seen in the reproducible code snippet below, I am setting the parameters in_channels as 768 purposely in all cases which are unmatched receiving a input whose whose dimension of last axis is 1024. However, only the last of the three error cases would produce a "reasonable" error message.
I'm not entirely clear about the underlying implementation of nn.LayerNorm, and it make no sense to me that the first two cases are properly executable. I am wondering is there any chance to recheck the LayerNorm to generating an error message to infrom the user of the mismatch. It is now apparent that error messages occur only when there are other layers attached and the model is hybridized.
The above thinking and experimental process were inspired by a typo in the [SQUAD fine-tuning scripts of XLNET, which may need to be corrected. Surprisingly, this is a runable script even if the units size of xlnet large is 1024.
&lt;denchmark-link:https://github.com/dmlc/gluon-nlp/blob/137e6b16bc1e672c6963a1e2ed754357e5a2ba11/scripts/language_model/model/qa.py#L37-L46&gt;https://github.com/dmlc/gluon-nlp/blob/137e6b16bc1e672c6963a1e2ed754357e5a2ba11/scripts/language_model/model/qa.py#L37-L46&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import mxnet as mx
from mxnet.gluon import HybridBlock,nn
mx.npx.set_np()

class Foobar(HybridBlock):
    def __init__(self, units, prefix=None, params=None):
        super(Foobar, self).__init__(prefix=prefix, params=params)
        self.dense = nn.Dense(1, flatten=False)
        self.layernorm = nn.LayerNorm(epsilon=1e-12, in_channels=768)
    def hybrid_forward(self, F, x):
        out = self.layernorm(x)
        return out

class Foo(HybridBlock):
    def __init__(self, units, prefix=None, params=None):
        super(Foo, self).__init__(prefix=prefix, params=params)
        self.dense = nn.Dense(1, flatten=False)
        self.layernorm = nn.LayerNorm(epsilon=1e-12, in_channels=768)
    def hybrid_forward(self, F, x):
        out = self.layernorm(x)
        out = self.dense(out)
        return out

foo_0 = Foobar(units=1024)
foo_0.initialize(ctx=mx.gpu())
foo_0.hybridize()
out = foo_0(mx.np.random.normal(0,1,size=(10,1024), ctx=mx.gpu()))

foo_1 = Foo(units=1024)
foo_1.initialize(ctx=mx.gpu())
out = foo_1(mx.np.random.normal(0,1,size=(10,1024), ctx=mx.gpu()))

foo_2 = Foo(units=1024)
foo_2.initialize(ctx=mx.gpu())
foo_2.hybridize()
out = foo_2(mx.np.random.normal(0,1,size=(10,1024), ctx=mx.gpu()))

&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Error Message&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;DeferredInitializationError: Parameter 'dense2_weight' has not been initialized yet because initialization was deferred. Actual initialization happens during the first forward pass. Please pass one batch of data through the network before accessing Parameters. You can also avoid deferred initialization by specifying in_units, num_features, etc., for network layers.

During handling of the above exception, another exception occurred:
AssertionError: Expected shape (1024,) is incompatible with given shape (768,).
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Comments&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/sxjscience&gt;@sxjscience&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='ZheyuYe' date='2020-02-21T16:59:33Z'>
		&lt;denchmark-link:https://github.com/ZheyuYe&gt;@ZheyuYe&lt;/denchmark-link&gt;
 The C++ side implementation of the shape inferring logic is here: 

The python side is here: 


incubator-mxnet/python/mxnet/gluon/nn/basic_layers.py


        Lines 609 to 614
      in
      9dcf71d






 self.gamma = self.params.get('gamma', grad_req='write' if scale else 'null', 



 shape=(in_channels,), init=gamma_initializer, 



 allow_deferred_init=True) 



 self.beta = self.params.get('beta', grad_req='write' if center else 'null', 



 shape=(in_channels,), init=beta_initializer, 



 allow_deferred_init=True) 





The problem should be to check the shape of gamma and beta:



incubator-mxnet/src/operator/nn/layer_norm.cc


        Lines 56 to 57
      in
      9dcf71d






 in_shape-&gt;at(layernorm::kGamma) = mxnet::TShape(Shape1(channelCount)); 



 in_shape-&gt;at(layernorm::kBeta) = mxnet::TShape(Shape1(channelCount)); 





Would you try to investigate the issue? You can append std::cout &lt;&lt; in_shape-&gt;at(layernorm::kGamma), which should not be empty when in_channel is given.
I think one way to solve the prioblem is to use the same SHAPE_ASSIGN_CHECK as here:



incubator-mxnet/src/operator/numpy/np_where_op.cc


         Line 42
      in
      9dcf71d






 SHAPE_ASSIGN_CHECK(*out_attrs, 0, operand1); 





		</comment>
	</comments>
</bug>