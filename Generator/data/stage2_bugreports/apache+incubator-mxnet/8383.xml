<bug id='8383' author='KellenSunderland' open_date='2017-10-22T08:53:04Z' closed_time='2018-08-21T13:13:30Z'>
	<summary>test_arange failure - Jetson TX2 (CPU)</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

The test test_operator.test_init is consistently failing.
&lt;denchmark-h:h2&gt;Environment info (Required)&lt;/denchmark-h&gt;

Jetson TX2, aarch64, Ubuntu 16.04, Jetpack 3.1 full install.
&lt;denchmark-code&gt;What to do:
1. Flash your Jetson TX2 with Jetpack 3.1, full install. 
2. Modify make/config.mk to indicate use of Openblas.
3. Compile MXNet locally and install.
4. Run nosetests --verbose tests/python/unittest
&lt;/denchmark-code&gt;

Package used (Python/R/Scala/Julia):
Python package, compiled from source.
&lt;denchmark-h:h2&gt;Build info (Required if built from source)&lt;/denchmark-h&gt;

Compiler (gcc/clang/mingw/visual studio):
gcc
MXNet commit hash:
&lt;denchmark-link:https://github.com/apache/incubator-mxnet/commit/050d30452eb7421045bacbc29d27622a96d8aff9&gt;050d304&lt;/denchmark-link&gt;

Build config:
(Paste the content of config.mk, or the build command.)
Diff with commit:
-ifeq ($(UNAME_S), Darwin)
-USE_BLAS = apple
-else
-USE_BLAS = atlas
-endif
+USE_BLAS = openblas
&lt;denchmark-h:h2&gt;Error Message:&lt;/denchmark-h&gt;

&lt;denchmark-h:h2&gt;======================================================================
FAIL: test_operator.test_init&lt;/denchmark-h&gt;

Traceback (most recent call last):
File "/usr/local/lib/python2.7/dist-packages/nose/case.py", line 197, in runTest
self.test(*self.arg)
File "/home/nvidia/incubator-mxnet-cpu/tests/python/unittest/test_operator.py", line 2569, in test_init
test_arange()
File "/home/nvidia/incubator-mxnet-cpu/tests/python/unittest/test_operator.py", line 2564, in test_arange
assert_almost_equal(np_out, nd_out.asnumpy())
File "/home/nvidia/incubator-mxnet-cpu/python/mxnet/test_utils.py", line 490, in assert_almost_equal
raise AssertionError(msg)
AssertionError:
Items are not equal:
Error 508000.000000 exceeds tolerance rtol=0.000010, atol=0.000000.  Location of maximum error:(1,), a=48.000000, b=50.000000
a: array([ 50,  48,  46, ..., 212, 210, 208], dtype=uint8)
b: array([50, 50, 50, ..., 50, 50, 50], dtype=uint8)
	</description>
	<comments>
		<comment id='1' author='KellenSunderland' date='2017-10-22T17:25:24Z'>
		Minimal reproducible code:
import mxnet as mx
import numpy as np

from mxnet.test_utils import *

dtype = np.uint8
config = (50, -50, -2)
np_out = np.arange(*config, dtype=dtype)
nd_out = mx.nd.arange(*config, dtype=dtype)
assert_almost_equal(np_out, nd_out.asnumpy())
		</comment>
		<comment id='2' author='KellenSunderland' date='2017-10-22T17:46:16Z'>
		I'm not sure if this is a valid test.  It think the desired behaviour is somewhat undefined given that we're trying to create a range with an endpoint of -50 on an unsigned data structure.  It could be possible to at the least duplicate numpy's behaviour here, which seems to be to overflow without throwing an error.
		</comment>
		<comment id='3' author='KellenSunderland' date='2017-10-22T21:18:39Z'>
		Here's a print of the relevant output on an OSX build
&lt;denchmark-code&gt;In [3]: print(np_out)
[ 50  48  46  44  42  40  38  36  34  32  30  28  26  24  22  20  18  16
  14  12  10   8   6   4   2   0 254 252 250 248 246 244 242 240 238 236
 234 232 230 228 226 224 222 220 218 216 214 212 210 208]

In [4]: print(nd_out)

[ 50  48  46  44  42  40  38  36  34  32  30  28  26  24  22  20  18  16
  14  12  10   8   6   4   2   0 254 252 250 248 246 244 242 240 238 236
 234 232 230 228 226 224 222 220 218 216 214 212 210 208]
&lt;NDArray 50 @cpu(0)&gt;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='KellenSunderland' date='2018-01-22T00:26:26Z'>
		&lt;denchmark-link:https://github.com/orgs/apache/teams/mxnet-committers&gt;@apache/mxnet-committers&lt;/denchmark-link&gt;
: This issue has been inactive for the past 90 days. It has no label and needs triage.
For general "how-to" questions, our &lt;denchmark-link:https://discuss.mxnet.io/&gt;user forum&lt;/denchmark-link&gt;
 (and &lt;denchmark-link:https://discuss.gluon.ai/&gt;Chinese version&lt;/denchmark-link&gt;
) is a good place to get help.
		</comment>
		<comment id='5' author='KellenSunderland' date='2018-07-19T20:57:08Z'>
		&lt;denchmark-link:https://github.com/KellenSunderland&gt;@KellenSunderland&lt;/denchmark-link&gt;
 Since numpy has a defined behavior for such inputs I think the test is valid. I also tried this on ubuntu and mac, and both produced same results as numpy. Maybe this is a platform-specific thing? Seems like here: &lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/src/operator/tensor/init_op.h#L449-L452&gt;https://github.com/apache/incubator-mxnet/blob/master/src/operator/tensor/init_op.h#L449-L452&lt;/denchmark-link&gt;
 already has some code to address the signed-unsigned issue. From the outputs I think maybe there's some problem with the step conversion as the each output entry from MXNet arange has the same value 50 which is the start value.
		</comment>
		<comment id='6' author='KellenSunderland' date='2018-07-19T21:04:48Z'>
		Yeah sorry I thought this issue was closed.  I believe it's been fixed.  Give me some time and I'll verify.
		</comment>
		<comment id='7' author='KellenSunderland' date='2018-07-19T21:17:09Z'>
		&lt;denchmark-link:https://github.com/KellenSunderland&gt;@KellenSunderland&lt;/denchmark-link&gt;
 Thanks for your quick response! Please close the issue if the results on your end shows that this has been solved.
		</comment>
		<comment id='8' author='KellenSunderland' date='2018-08-16T06:58:05Z'>
		Sorry was traveling. Will try to take a look at this one today.
		</comment>
		<comment id='9' author='KellenSunderland' date='2018-08-21T13:13:30Z'>
		Verified this was fixed prior to 1.2.  Just did a test on-device.  Closing ...
		</comment>
	</comments>
</bug>