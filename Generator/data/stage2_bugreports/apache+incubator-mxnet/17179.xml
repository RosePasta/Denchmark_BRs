<bug id='17179' author='sxjscience' open_date='2019-12-26T21:23:03Z' closed_time='2020-04-29T23:28:49Z'>
	<summary>[Numpy] where does not support python scalar as the input</summary>
	<description>
import mxnet as mx
mx.npx.set_np()
a = mx.np.sym.var('a')
a = mx.sym.var('a').as_np_ndarray()
mx.sym.np.where(a, a, 0)
Error message:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
&lt;ipython-input-5-e7a6fe89b743&gt; in &lt;module&gt;
----&gt; 1 mx.sym.np.where(a, a, 0)

~/mxnet/python/mxnet/symbol/numpy/_symbol.py in where(condition, x, y)
   5501 
   5502     """
-&gt; 5503     return _npi.where(condition, x, y, out=None)
   5504 
   5505 

~/mxnet/python/mxnet/symbol/register.py in where(condition, x, y, name, attr, out, **kwargs)

AssertionError: Argument y must be Symbol instances, but got 0
&lt;/denchmark-code&gt;

Also, the imperative case:
import mxnet as mx
mx.npx.set_np()
mx.np.where(mx.np.ones((10, )), mx.np.ones((10, )), 0)
Error message:
&lt;denchmark-code&gt;AssertionError                            Traceback (most recent call last)
&lt;ipython-input-14-bdddf3065582&gt; in &lt;module&gt;
----&gt; 1 mx.np.where(mx.np.ones((10, )), mx.np.ones((10, )), 0)

~/mxnet/python/mxnet/numpy/multiarray.py in where(condition, x, y)
   7996            [ 0.,  3., -1.]])
   7997     """
-&gt; 7998     return _mx_nd_np.where(condition, x, y)
   7999 
   8000 

~/mxnet/python/mxnet/ndarray/numpy/_op.py in where(condition, x, y)
   6035         return nonzero(condition)
   6036     else:
-&gt; 6037         return _npi.where(condition, x, y, out=None)
   6038 
   6039 

~/mxnet/python/mxnet/ndarray/register.py in where(condition, x, y, out, name, **kwargs)

AssertionError: Argument y must have NDArray type, but got 0
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='sxjscience' date='2019-12-27T06:34:01Z'>
		I actually mentioned this problem in the PR, &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/16829#issuecomment-554489820&gt;#16829 (comment)&lt;/denchmark-link&gt;

The author suggested that you should wrap the scalar with.
		</comment>
		<comment id='2' author='sxjscience' date='2019-12-30T19:36:30Z'>
		&lt;denchmark-link:https://github.com/apeforest&gt;@apeforest&lt;/denchmark-link&gt;
 assign [&lt;denchmark-link:https://github.com/reminisce&gt;@reminisce&lt;/denchmark-link&gt;
  ]
		</comment>
		<comment id='3' author='sxjscience' date='2019-12-31T04:54:26Z'>
		&lt;denchmark-link:https://github.com/xidulu&gt;@xidulu&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/hgt312&gt;@hgt312&lt;/denchmark-link&gt;
 In my use case, I'm using the symbolic interface so I cannot call .
		</comment>
		<comment id='4' author='sxjscience' date='2019-12-31T05:00:10Z'>
		&lt;denchmark-link:https://github.com/hgt312&gt;@hgt312&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='sxjscience' date='2019-12-31T06:34:53Z'>
		I will add the scalar version soon.
		</comment>
		<comment id='6' author='sxjscience' date='2020-01-06T05:31:50Z'>
		If both x and y are scalars, dtype of the output should be what? In official numpy, it may be int64 or float64 according to the inputs' type.
		</comment>
		<comment id='7' author='sxjscience' date='2020-01-08T02:00:13Z'>
		Are we able to make it numpy compatible?
		</comment>
		<comment id='8' author='sxjscience' date='2020-04-29T23:28:49Z'>
		Closed by &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/17249&gt;#17249&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>