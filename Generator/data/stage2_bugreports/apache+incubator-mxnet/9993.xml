<bug id='9993' author='jacky4323' open_date='2018-03-05T10:43:50Z' closed_time='2018-03-22T13:15:41Z'>
	<summary>cmake cannot build mxnet</summary>
	<description>
Hi,
sorry,there are some problems with cmake
command I use
$git clone --recursive &lt;denchmark-link:https://github.com/apache/incubator-mxnet.git&gt;https://github.com/apache/incubator-mxnet.git&lt;/denchmark-link&gt;

$cd incubator-mxnet/
$mkdir build/Release &amp;&amp; cd build/Release
$cmake ../../
$make -j8

cmake ../../ output log

-- The C compiler identification is GNU 5.4.0
-- The CXX compiler identification is GNU 5.4.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- CMake version '3.5.1' using generator 'Unix Makefiles'
-- Performing Test SUPPORT_CXX11
-- Performing Test SUPPORT_CXX11 - Success
-- Performing Test SUPPORT_CXX0X
-- Performing Test SUPPORT_CXX0X - Success
-- Performing Test SUPPORT_MSSE2
-- Performing Test SUPPORT_MSSE2 - Success
-- CMAKE_BUILD_TYPE is unset, defaulting to Release
-- Detecting Intel(R) MKL: trying mklml_intel
-- Detecting Intel(R) MKL: trying mklml
-- Detecting Intel(R) MKL: trying mkl_rt
CMake Warning at 3rdparty/mkldnn/cmake/MKL.cmake:177 (message):
Intel(R) MKL not found.  Some performance features may not be available.
Please run scripts/prepare_mkl.sh to download a minimal set of libraries or
get a full version from &lt;denchmark-link:https://software.intel.com/en-us/intel-mkl&gt;https://software.intel.com/en-us/intel-mkl&lt;/denchmark-link&gt;

Call Stack (most recent call first):
3rdparty/mkldnn/cmake/OpenMP.cmake:24 (include)
3rdparty/mkldnn/CMakeLists.txt:57 (include)
-- Try OpenMP C flag = [-fopenmp]
-- Performing Test OpenMP_FLAG_DETECTED
-- Performing Test OpenMP_FLAG_DETECTED - Success
-- Try OpenMP CXX flag = [-fopenmp]
-- Performing Test OpenMP_FLAG_DETECTED
-- Performing Test OpenMP_FLAG_DETECTED - Success
-- Found OpenMP: -fopenmp
-- Could NOT find Doxygen (missing:  DOXYGEN_EXECUTABLE)
-- VTune profiling environment is unset
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - found
-- Found Threads: TRUE
-- Found CUDA: /usr/local/cuda-8.0 (found version "8.0")
-- Found OpenBLAS libraries: /usr/lib/libopenblas.so
-- Found OpenBLAS include: /usr/include
-- CUDA detected: 8.0
-- Found cuDNN (include: /usr/local/cuda-8.0/include, library: /usr/local/cuda-8.0/lib64/libcudnn.so)
-- Running GPU architecture autodetection
-- Found CUDA arch 5.2 5.2 5.2 5.2
-- Added CUDA NVCC flags for: sm_52
-- Could NOT find Gperftools (missing:  GPERFTOOLS_LIBRARIES GPERFTOOLS_INCLUDE_DIR)
-- Found PkgConfig: /usr/bin/pkg-config (found version "0.29.1")
-- Could NOT find Jemalloc (missing:  JEMALLOC_LIBRARY JEMALLOC_INCLUDE_DIR)
--  OpenCV_LIBS=opencv_core;opencv_highgui;opencv_imgproc;opencv_imgcodecs
-- OpenCV found (/usr/local/share/OpenCV)
-- Performing Test LIBOMP_HAVE_STD_CPP11_FLAG
-- Performing Test LIBOMP_HAVE_STD_CPP11_FLAG - Success
-- Performing Test LIBOMP_HAVE_FNO_EXCEPTIONS_FLAG
-- Performing Test LIBOMP_HAVE_FNO_EXCEPTIONS_FLAG - Success
-- Performing Test LIBOMP_HAVE_FNO_RTTI_FLAG
-- Performing Test LIBOMP_HAVE_FNO_RTTI_FLAG - Success
-- Performing Test LIBOMP_HAVE_X_CPP_FLAG
-- Performing Test LIBOMP_HAVE_X_CPP_FLAG - Success
-- Performing Test LIBOMP_HAVE_WERROR_FLAG
-- Performing Test LIBOMP_HAVE_WERROR_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_FUNCTION_FLAG
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_FUNCTION_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_LOCAL_TYPEDEF_FLAG
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_LOCAL_TYPEDEF_FLAG - Failed
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_VALUE_FLAG
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_VALUE_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_VARIABLE_FLAG
-- Performing Test LIBOMP_HAVE_WNO_UNUSED_VARIABLE_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_SWITCH_FLAG
-- Performing Test LIBOMP_HAVE_WNO_SWITCH_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_COVERED_SWITCH_DEFAULT_FLAG
-- Performing Test LIBOMP_HAVE_WNO_COVERED_SWITCH_DEFAULT_FLAG - Failed
-- Performing Test LIBOMP_HAVE_WNO_DEPRECATED_REGISTER_FLAG
-- Performing Test LIBOMP_HAVE_WNO_DEPRECATED_REGISTER_FLAG - Failed
-- Performing Test LIBOMP_HAVE_WNO_SIGN_COMPARE_FLAG
-- Performing Test LIBOMP_HAVE_WNO_SIGN_COMPARE_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_GNU_ANONYMOUS_STRUCT_FLAG
-- Performing Test LIBOMP_HAVE_WNO_GNU_ANONYMOUS_STRUCT_FLAG - Failed
-- Performing Test LIBOMP_HAVE_WNO_UNKNOWN_PRAGMAS_FLAG
-- Performing Test LIBOMP_HAVE_WNO_UNKNOWN_PRAGMAS_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_MISSING_FIELD_INITIALIZERS_FLAG
-- Performing Test LIBOMP_HAVE_WNO_MISSING_FIELD_INITIALIZERS_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_MISSING_BRACES_FLAG
-- Performing Test LIBOMP_HAVE_WNO_MISSING_BRACES_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_COMMENT_FLAG
-- Performing Test LIBOMP_HAVE_WNO_COMMENT_FLAG - Success
-- Performing Test LIBOMP_HAVE_WNO_SELF_ASSIGN_FLAG
-- Performing Test LIBOMP_HAVE_WNO_SELF_ASSIGN_FLAG - Failed
-- Performing Test LIBOMP_HAVE_WNO_VLA_EXTENSION_FLAG
-- Performing Test LIBOMP_HAVE_WNO_VLA_EXTENSION_FLAG - Failed
-- Performing Test LIBOMP_HAVE_WNO_FORMAT_PEDANTIC_FLAG
-- Performing Test LIBOMP_HAVE_WNO_FORMAT_PEDANTIC_FLAG - Failed
-- Performing Test LIBOMP_HAVE_MSSE2_FLAG
-- Performing Test LIBOMP_HAVE_MSSE2_FLAG - Success
-- Performing Test LIBOMP_HAVE_FTLS_MODEL_FLAG
-- Performing Test LIBOMP_HAVE_FTLS_MODEL_FLAG - Success
-- Performing Test LIBOMP_HAVE_MMIC_FLAG
-- Performing Test LIBOMP_HAVE_MMIC_FLAG - Failed
-- Performing Test LIBOMP_HAVE_M32_FLAG
-- Performing Test LIBOMP_HAVE_M32_FLAG - Failed
-- Performing Test LIBOMP_HAVE_X_FLAG
-- Performing Test LIBOMP_HAVE_X_FLAG - Success
-- Performing Test LIBOMP_HAVE_WARN_SHARED_TEXTREL_FLAG
-- Performing Test LIBOMP_HAVE_WARN_SHARED_TEXTREL_FLAG - Success
-- Performing Test LIBOMP_HAVE_AS_NEEDED_FLAG
-- Performing Test LIBOMP_HAVE_AS_NEEDED_FLAG - Success
-- Performing Test LIBOMP_HAVE_VERSION_SCRIPT_FLAG
-- Performing Test LIBOMP_HAVE_VERSION_SCRIPT_FLAG - Success
-- Performing Test LIBOMP_HAVE_STATIC_LIBGCC_FLAG
-- Performing Test LIBOMP_HAVE_STATIC_LIBGCC_FLAG - Success
-- Performing Test LIBOMP_HAVE_Z_NOEXECSTACK_FLAG
-- Performing Test LIBOMP_HAVE_Z_NOEXECSTACK_FLAG - Success
-- Performing Test LIBOMP_HAVE_FINI_FLAG
-- Performing Test LIBOMP_HAVE_FINI_FLAG - Success
-- Found Perl: /usr/bin/perl (found version "5.22.1")
-- Performing Test LIBOMP_HAVE_VERSION_SYMBOLS
-- Performing Test LIBOMP_HAVE_VERSION_SYMBOLS - Success
-- Performing Test LIBOMP_HAVE___BUILTIN_FRAME_ADDRESS
-- Performing Test LIBOMP_HAVE___BUILTIN_FRAME_ADDRESS - Success
-- Performing Test LIBOMP_HAVE_WEAK_ATTRIBUTE
-- Performing Test LIBOMP_HAVE_WEAK_ATTRIBUTE - Success
-- Looking for include files windows.h, psapi.h
-- Looking for include files windows.h, psapi.h - not found
-- Looking for EnumProcessModules in psapi
-- Looking for EnumProcessModules in psapi - not found
-- LIBOMP: Operating System     -- Linux
-- LIBOMP: Target Architecture  -- x86_64
-- LIBOMP: Build Type           -- Release
-- LIBOMP: OpenMP Version       -- 50
-- LIBOMP: Library Kind         -- SHARED
-- LIBOMP: Library Type         -- normal
-- LIBOMP: Fortran Modules      -- FALSE
-- LIBOMP: Build                -- 20140926
-- LIBOMP: Use Stats-gathering  -- FALSE
-- LIBOMP: Use Debugger-support -- FALSE
-- LIBOMP: Use ITT notify       -- TRUE
-- LIBOMP: Use OMPT-support     -- FALSE
-- LIBOMP: Use Adaptive locks   -- TRUE
-- LIBOMP: Use quad precision   -- TRUE
-- LIBOMP: Use TSAN-support     -- FALSE
-- LIBOMP: Use Hwloc library    -- FALSE
-- Found PythonInterp: /usr/bin/python (found version "2.7.12")
-- Looking for sqrt in m
-- Looking for sqrt in m - found
-- Looking for __atomic_load_1
-- Looking for __atomic_load_1 - not found
-- Looking for __atomic_load_1 in atomic
-- Looking for __atomic_load_1 in atomic - found
-- LIBOMP: Cannot find llvm-lit.
-- LIBOMP: Please put llvm-lit in your PATH, set LIBOMP_LLVM_LIT_EXECUTABLE to its full path or point OPENMP_LLVM_TOOLS_DIR to its directory
CMake Warning at 3rdparty/openmp/runtime/cmake/LibompUtils.cmake:21 (message):
LIBOMP: The check-libomp target will not be available!
Call Stack (most recent call first):
3rdparty/openmp/runtime/test/CMakeLists.txt:62 (libomp_warning_say)
-- Could NOT find Jemalloc (missing:  JEMALLOC_LIBRARY JEMALLOC_INCLUDE_DIR)
-- Found GTest: gtest
-- Found cuDNN (include: /usr/local/cuda-8.0/include, library: /usr/local/cuda-8.0/lib64/libcudnn.so)
You have called ADD_LIBRARY for library mxnet without any source files. This typically indicates a problem with your CMakeLists.txt file
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jacky4323/TEST_bmxnet/incubator-mxnet/build/Release

make -j8 error

[ 56%] Linking CXX executable benchdnn
[ 57%] Linking CXX executable test_convolution_forward_u8s8s32
[ 57%] Built target benchdnn
[ 57%] Built target test_convolution_forward_u8s8s32
[ 57%] Linking CXX executable test_convolution_relu_forward_f32
[ 57%] Built target test_convolution_relu_forward_f32
CMakeFiles/Makefile2:139: recipe for target 'CMakeFiles/mxnet_static.dir/all' failed
make[1]: *** [CMakeFiles/mxnet_static.dir/all] Error 2
Makefile:138: recipe for target 'all' failed
make: *** [all] Error 2
	</description>
	<comments>
		<comment id='1' author='jacky4323' date='2018-03-05T16:13:01Z'>
		I was able to reproduce.
		</comment>
		<comment id='2' author='jacky4323' date='2018-03-05T16:13:46Z'>
		The exact error is:
&lt;denchmark-code&gt;In file included from /home/piotr/devel/mxnet_build/src/operator/nn/dropout.cu:27:0:
/home/piotr/devel/mxnet_build/src/operator/nn/./dropout-inl.h:44:31: fatal error: mkl_vml_functions.h: No such file or directory
compilation terminated.
CMake Error at cuda_compile_generated_dropout.cu.o.cmake:207 (message):
  Error generating
  /home/piotr/devel/mxnet_build/build/CMakeFiles/cuda_compile.dir/src/operator/nn/./cuda_compile_generated_dropout.cu.o



&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='jacky4323' date='2018-03-05T16:56:11Z'>
		&lt;denchmark-link:https://github.com/marcoabreu&gt;@marcoabreu&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/cjolivier01&gt;@cjolivier01&lt;/denchmark-link&gt;
  as we spoke with Marco in person, I don't think we should compile with MKL by default if we don't even know if there's MKL available.
As a workaround, you can call cmake as:
&lt;denchmark-code&gt;cmake -DUSE_MKL_IF_AVAILABLE=OFF ..

&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='jacky4323' date='2018-03-05T17:12:57Z'>
		The logic in CMakeLists.txt is bad, having mkldnn as is part of 3rdparty doesn't mean that you have MKL which is not open source.
		</comment>
		<comment id='5' author='jacky4323' date='2018-03-05T23:59:14Z'>
		How come that CMake properly detects that MKL is not present
&lt;denchmark-code&gt;-- Detecting Intel(R) MKL: trying mklml_intel
-- Detecting Intel(R) MKL: trying mklml
-- Detecting Intel(R) MKL: trying mkl_rt
CMake Warning at 3rdparty/mkldnn/cmake/MKL.cmake:177 (message):
Intel(R) MKL not found. Some performance features may not be available.
Please run scripts/prepare_mkl.sh to download a minimal set of libraries or
get a full version from https://software.intel.com/en-us/intel-mkl
Call Stack (most recent call first):
3rdparty/mkldnn/cmake/OpenMP.cmake:24 (include)
3rdparty/mkldnn/CMakeLists.txt:57 (include)
&lt;/denchmark-code&gt;

but still tries to use it?
		</comment>
		<comment id='6' author='jacky4323' date='2018-03-06T00:04:14Z'>
		I am not sure what was changed for the enormous mkldnn PR, but "USE_MKL_IF_AVAILABLE" means use it if it is found (real MKL or MKLML), otherwise don't.
		</comment>
		<comment id='7' author='jacky4323' date='2018-03-06T01:42:18Z'>
		closed on accident
		</comment>
		<comment id='8' author='jacky4323' date='2018-03-06T10:31:57Z'>
		Well, it's clear from the logic in the CMake file what the problem is. I can fix it, but honestly I would like to test the build system better or be more careful. I invested already a lot of time on maintaining the build system and I'm not happy to see this random breaks.
		</comment>
		<comment id='9' author='jacky4323' date='2018-03-06T10:35:45Z'>
		Another problem right now is what we discussed previously with &lt;denchmark-link:https://github.com/cjolivier01&gt;@cjolivier01&lt;/denchmark-link&gt;
 :
When I build in CLion:
&lt;denchmark-code&gt;CMake Error at CMakeLists.txt:51 (project):
  No CMAKE_CUDA_COMPILER could be found.

  Tell CMake where to find the compiler by setting either the environment
  variable "CUDACXX" or the CMake cache entry CMAKE_CUDA_COMPILER to the full
  path to the compiler, or to the compiler name if it is in the PATH.

&lt;/denchmark-code&gt;

I use
USE_OLDCMAKECUDA as a workaround, but I would prefer this to work out of the box.
From CMAKE docs I don't see why generators are supposed to work with Unix Makefiles:
&lt;denchmark-link:https://cmake.org/cmake/help/latest/variable/CMAKE_GENERATOR_TOOLSET.html&gt;https://cmake.org/cmake/help/latest/variable/CMAKE_GENERATOR_TOOLSET.html&lt;/denchmark-link&gt;

I never got a propper answer to this.
		</comment>
		<comment id='10' author='jacky4323' date='2018-03-13T08:09:19Z'>
		&lt;denchmark-link:https://github.com/jacky4323&gt;@jacky4323&lt;/denchmark-link&gt;
  your issue should be the same with &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/10072&gt;#10072&lt;/denchmark-link&gt;
, would you try to patch the related PR(&lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/10075&gt;#10075&lt;/denchmark-link&gt;
) in &lt;denchmark-link:https://github.com/apache/incubator-mxnet/issues/10072&gt;#10072&lt;/denchmark-link&gt;
 and see if the issue is gone?
		</comment>
		<comment id='11' author='jacky4323' date='2018-03-22T13:07:23Z'>
		&lt;denchmark-link:https://github.com/marcoabreu&gt;@marcoabreu&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/szha&gt;@szha&lt;/denchmark-link&gt;
 This issue has been fixed in &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/10075&gt;#10075&lt;/denchmark-link&gt;
.  Could you help close this one?
		</comment>
		<comment id='12' author='jacky4323' date='2018-12-13T02:20:21Z'>
		
How come that CMake properly detects that MKL is not present
-- Detecting Intel(R) MKL: trying mklml_intel
-- Detecting Intel(R) MKL: trying mklml
-- Detecting Intel(R) MKL: trying mkl_rt
CMake Warning at 3rdparty/mkldnn/cmake/MKL.cmake:177 (message):
Intel(R) MKL not found. Some performance features may not be available.
Please run scripts/prepare_mkl.sh to download a minimal set of libraries or
get a full version from https://software.intel.com/en-us/intel-mkl
Call Stack (most recent call first):
3rdparty/mkldnn/cmake/OpenMP.cmake:24 (include)
3rdparty/mkldnn/CMakeLists.txt:57 (include)

but still tries to use it?

But I have already installed mkl in anaconda and I cmake in anaconda. Why this error again?
		</comment>
	</comments>
</bug>