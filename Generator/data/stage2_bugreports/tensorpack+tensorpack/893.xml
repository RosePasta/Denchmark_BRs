<bug id='893' author='thuzhf' open_date='2018-09-13T16:03:23Z' closed_time='2018-09-13T20:26:42Z'>
	<summary>Concerns on the uses of `self._init(locals())` in some classes</summary>
	<description>

What you did:


If you're using examples: Yes. Actually I notice that you define and call self._init(locals()) in some classes' self.__init__() method. I don't see explanations on this use, but it seems handy and I thought this method could also be used in some other classes. But problems ocurr when I inherit from these classes. The point is that if you inherit from these classes who call self._init(locals()) inside their self.__init__(), the child class's __class__ will be set to the parent class. In this case, if you override some of the parent class's methods, it won't work; that's to say, when you call these overrided methods inside an instance of the child class, it will still call the parent's corresponding method instead of the child's. I will give a concrete example below.

What's the command you run: Please see the pasted code below.
Have you made any changes to code? Paste them if any: Please see the pasted code below.


Better to paste what you did instead of describing them. Please see the pasted code below.

class Z:
    pass # do other things

class A(Z):
    def __init__(self, x):
        super().__init__()
        self._init(locals())

    def _init(self, params=None):
        if params:
            for k, v in params.items():
                # if k != 'self' and k != '__class__' and ...:
                if k != 'self':
                    setattr(self, k, v)

    def f(self):
        print('from A')

class B(A):
    def __init__(self, x):
        print('self1: {}'.format(self))
        super().__init__(x)
        print('self2: {}'.format(self))

    def f(self):
        print('from B')

b = B(x=3) # self1 and self2 will be different
b.f() # and this will print: 'from A'
###### The output is pasted below:
# self1: &lt;__main__.B object at 0x7fec3562c240&gt;
# self2: &lt;__main__.A object at 0x7fec3562c240&gt;
# from A
######

What you observed, including but not limited to the entire logs.


Better to paste what you observed instead of describing them: Please see below.

&lt;denchmark-code&gt;self1: &lt;__main__.B object at 0x7fec3562c240&gt;
self2: &lt;__main__.A object at 0x7fec3562c240&gt;
from A
&lt;/denchmark-code&gt;


What you expected, if not obvious: I expected self1 and self2 would be the same, and b.f() will print: 'from B'
Your environment:


Python version: 3.6.5
TF version: v1.10.1-0-g4dcfddc5d1 1.10.1.
Tensorpack version: 0.8.9.

In this case, it seems people shouldn't inherit from such classes. Because self._init(locals()) is used in some places in your code and I see no explanation on it, I am not sure whether this is your expected behavior. Is it a possible bug or is this your expected behavior (if it is your expected, would you please give me some explanations on how to use it properly)? Thanks!
	</description>
	<comments>
		<comment id='1' author='thuzhf' date='2018-09-13T20:22:59Z'>
		I think you're right and __class__ should not be set.
		</comment>
	</comments>
</bug>