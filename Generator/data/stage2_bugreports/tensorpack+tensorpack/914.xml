<bug id='914' author='thuzhf' open_date='2018-09-29T08:49:26Z' closed_time='2018-09-30T07:09:29Z'>
	<summary>param `last_k` in `StatMonitorParamSetter` is misleading</summary>
	<description>



tensorpack/tensorpack/callbacks/param.py


        Lines 301 to 367
      in
      da143e0






 class StatMonitorParamSetter(HyperParamSetter): 



 """ 



     Change the param by monitoring the change of a statistic. 



     Change when it wasn't decreasing/increasing enough. 



     """ 



 def __init__(self, param, stat_name, value_func, threshold, 



 last_k, reverse=False): 



 """ 



         Args: 



             param: same as in :class:`HyperParamSetter`. 



             stat_name (str): name of the statistics. 



             value_func (float -&gt; float): a function which returns a new value 



                 taking the old value. 



             threshold (float): change threshold. 



             last_k (int): last k epochs. 



             reverse (bool): monitor increasing instead of decreasing. 



  



         This callback will change ``param`` by ``new_value = value_func(old_value)``, when: 



         ``min(stats) &gt;= stats[0] - threshold``, where 



         ``stats = [the values of stat_name in last k epochs]`` 



  



         If ``reverse`` is True, it will change the ``param`` when: 



         ``max(stats) &lt;= stats[0] + threshold``. 



  



         Example: 



             If validation error wasn't decreasing for 5 epochs, anneal the learning rate by 0.2: 



  



             .. code-block:: python 



  



                 StatMonitorParamSetter('learning_rate', 'val-error', lambda x: x * 0.2, 0, 5) 



         """ 



 super(StatMonitorParamSetter, self).__init__(param) 



 self.stat_name = stat_name 



 self.value_func = value_func 



 self.last_k = last_k 



 self.threshold = threshold 



 self.reverse = reverse 



 



 self.last_changed_epoch = 0 



 



 def _get_value_to_set(self): 



 try: 



 hist = self.trainer.monitors.get_history(self.stat_name) 



 except KeyError: 



 logger.warn( 



 "[StatMonitorParamSetter] Key {} not found in monitor history! Ignore it.".format(self.stat_name)) 



 return None 



 



 if len(hist) &lt; self.last_k + 1 or \ 



 self.epoch_num - self.last_changed_epoch &lt; self.last_k: 



 return None 



 hist = hist[-self.last_k - 1:]    # len==last_k+1 



 



 hist_first = hist[0] 



 if not self.reverse: 



 hist_min = min(hist) 



 if hist_min &lt; hist_first - self.threshold:  # small enough 



 return None 



 else: 



 hist_max = max(hist) 



 if hist_max &gt; hist_first + self.threshold:  # large enough 



 return None 



 self.last_changed_epoch = self.epoch_num 



 logger.info( 



 "[StatMonitorParamSetter] Triggered, history of {}: ".format( 



 self.stat_name) + ','.join([str(round(x, 3)) for x in hist])) 



 return self.value_func(self.get_current_value()) 





last_k in the above class means the last k epochs. But L352 only uses the last k values in the hist (hist = self.trainer.monitors.get_history(self.stat_name)) variable. And if you set period in the following class to be greater than 0, the hist variable can also be appended values within each epoch together with at the end of each epoch which will lead to that the last k values in hist doesn't correspond to the last k epochs.



tensorpack/tensorpack/callbacks/summary.py


         Line 101
      in
      da143e0






 def MergeAllSummaries(period=0, run_alone=False, key=tf.GraphKeys.SUMMARIES): 





Since the class StatMonitorParamSetter  seems coupling with class MergeAllSummaries, I think you can change the last_k's meaning to be the last k period which is defined in MergeAllSummaries, and also change some epoch-related code in the class StatMonitorParamSetter. Otherwise users cannot use this class together with setting period to be greater than 0 in MergeAllSummaries.
	</description>
	<comments>
	</comments>
</bug>