<bug id='514' author='marrrcin' open_date='2019-05-02T16:05:17Z' closed_time='2019-05-02T16:50:41Z'>
	<summary>Tensorboard Logger does not work with layer freezing</summary>
	<description>
Consider the following (simplified and self-contained) notebook:
&lt;denchmark-link:https://gist.github.com/marrrcin/629227cf33d88af6192048871daa3a09&gt;https://gist.github.com/marrrcin/629227cf33d88af6192048871daa3a09&lt;/denchmark-link&gt;

which uses mostly the code from Ignite examples to create  and attach  to training events.
If you use pre-trained model and freeze some layers, you end up with code that will not work, as Ignite tries to collect gradient histograms/scalars for every model parameter, even though some of them are already disabled from updating.
The exception thrown is the following:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-3-5ffffec84f3c&gt; in &lt;module&gt;
     65     print("Done.")
     66 
---&gt; 67 example()

&lt;ipython-input-3-5ffffec84f3c&gt; in example()
     62 
     63 
---&gt; 64     trainer.run(DataLoader(FakeDataset(), batch_size=16), max_epochs=5)
     65     print("Done.")
     66 

/anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/engine/engine.py in run(self, data, max_epochs)
    357         except BaseException as e:
    358             self._logger.error("Engine run is terminating due to exception: %s.", str(e))
--&gt; 359             self._handle_exception(e)
    360 
    361         return self.state

/anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/engine/engine.py in _handle_exception(self, e)
    322             self._fire_event(Events.EXCEPTION_RAISED, e)
    323         else:
--&gt; 324             raise e
    325 
    326     def run(self, data, max_epochs=1):

/anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/engine/engine.py in run(self, data, max_epochs)
    344                 self.state.epoch += 1
    345                 self._fire_event(Events.EPOCH_STARTED)
--&gt; 346                 hours, mins, secs = self._run_once_on_dataset()
    347                 self._logger.info("Epoch[%s] Complete. Time taken: %02d:%02d:%02d", self.state.epoch, hours, mins, secs)
    348                 if self.should_terminate:

/anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/engine/engine.py in _run_once_on_dataset(self)
    311         except BaseException as e:
    312             self._logger.error("Current run is terminating due to exception: %s.", str(e))
--&gt; 313             self._handle_exception(e)
    314 
    315         time_taken = time.time() - start_time

/anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/engine/engine.py in _handle_exception(self, e)
    322             self._fire_event(Events.EXCEPTION_RAISED, e)
    323         else:
--&gt; 324             raise e
    325 
    326     def run(self, data, max_epochs=1):

/anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/engine/engine.py in _run_once_on_dataset(self)
    304                 self._fire_event(Events.ITERATION_STARTED)
    305                 self.state.output = self._process_function(self, batch)
--&gt; 306                 self._fire_event(Events.ITERATION_COMPLETED)
    307                 if self.should_terminate or self.should_terminate_single_epoch:
    308                     self.should_terminate_single_epoch = False

/anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/engine/engine.py in _fire_event(self, event_name, *event_args, **event_kwargs)
    257             for func, args, kwargs in self._event_handlers[event_name]:
    258                 kwargs.update(event_kwargs)
--&gt; 259                 func(self, *(event_args + args), **kwargs)
    260 
    261     def fire_event(self, event_name):

/anaconda3/envs/ignite/lib/python3.7/site-packages/pytorch_ignite-0.2.0-py3.7.egg/ignite/contrib/handlers/tensorboard_logger.py in __call__(self, engine, logger, event_name)
    219             name = name.replace('.', '/')
    220             logger.writer.add_scalar("grads_{}/{}".format(self.reduction.__name__, name),
--&gt; 221                                      self.reduction(p.grad),
    222                                      global_step)
    223 

/anaconda3/envs/ignite/lib/python3.7/site-packages/torch/functional.py in norm(input, p, dim, keepdim, out, dtype)
    676         (tensor(3.7417), tensor(11.2250))
    677     """
--&gt; 678     ndim = input.dim()
    679 
    680     # catch default case

AttributeError: 'NoneType' object has no attribute 'dim'
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='marrrcin' date='2019-05-02T16:09:17Z'>
		&lt;denchmark-link:https://github.com/marrrcin&gt;@marrrcin&lt;/denchmark-link&gt;
 thanks for reporting! Yes, you are correct that there is no checking whether .  If you would like to &lt;denchmark-link:https://github.com/pytorch/ignite/blob/master/CONTRIBUTING.md&gt;contribute to ignite&lt;/denchmark-link&gt;
 and fix this bug, it would be awesome !
		</comment>
		<comment id='2' author='marrrcin' date='2019-05-02T16:12:15Z'>
		I was just creating one: &lt;denchmark-link:https://github.com/pytorch/ignite/pull/515&gt;#515&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>