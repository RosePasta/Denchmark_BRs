<bug id='1004' author='sdesrozis' open_date='2020-05-02T20:10:58Z' closed_time='2020-05-16T23:58:48Z'>
	<summary>Bug adding handler in case of decoration + class function + filtered event</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug description&lt;/denchmark-h&gt;

I would like to report a bug using handler defined by decorated function in a class with filtered event.
The following code reproduces all possible situations to add an handler defined w/wo decoration in a class or not, w/wo engine (or args), using an event w/wo filter
engine = Engine(lambda e, b: b)

# decorator
def decorated(fun):
    @functools.wraps(fun)
    def wrapper(*args, **kwargs):
        return fun(*args, **kwargs)
    return wrapper

# handler as a function
def foo():
    print("foo")

# handler as a decorated function
@decorated
def decorated_foo():
    print("decorated_foo")

# register handler as a function -- OK
engine.add_event_handler(Events.EPOCH_STARTED, foo)
# register handler as a function with filter -- OK
engine.add_event_handler(Events.EPOCH_STARTED(every=2), foo)
# register handler as a decorated function -- OK
engine.add_event_handler(Events.EPOCH_STARTED, decorated_foo)
# register handler as a decorated function with filter -- OK
engine.add_event_handler(Events.EPOCH_STARTED(every=2), decorated_foo)


# handler as a function with engine (here args)
def foo_args(args):
    print("foo_args", args)


# handler as a decorated function with engine 
@decorated
def decorated_foo_args(args):
    print("decorated_foo_args", args)

# register handler as a function with engine  -- OK
engine.add_event_handler(Events.EPOCH_STARTED, foo_args)
# register handler as a function with engine and filter -- OK
engine.add_event_handler(Events.EPOCH_STARTED(every=2), foo_args)
# register handler as a decorated function with engine -- OK
engine.add_event_handler(Events.EPOCH_STARTED, decorated_foo_args)
# register handler as a decorated function with engine and filter -- OK
engine.add_event_handler(Events.EPOCH_STARTED(every=2), decorated_foo_args)

class Foo:
    # handler as a class function (ie method)
    def foo(self):
        print("foo")

    # handler as a decorated method
    @decorated
    def decorated_foo(self):
        print("decorated_foo")

    # handler as a method with engine
    def foo_args(self, args):
        print("foo_args", args)

    # handler as a decorated method with engine
    @decorated
    def decorated_foo_args(self, args):
        print("decorated_foo_args", args)


foo = Foo()

# register handler as a method -- OK
engine.add_event_handler(Events.EPOCH_STARTED, foo.foo)
# register handler as a method with filter -- OK
engine.add_event_handler(Events.EPOCH_STARTED(every=2), foo.foo)
# register handler as a decorated method -- OK
engine.add_event_handler(Events.EPOCH_STARTED, foo.decorated_foo)
# register handler as a decorated method with filter -- OK
engine.add_event_handler(Events.EPOCH_STARTED(every=2), foo.decorated_foo)
# register handler as a method with engine  -- OK
engine.add_event_handler(Events.EPOCH_STARTED, foo.foo_args)
# register handler as a method with engine and filter -- OK
engine.add_event_handler(Events.EPOCH_STARTED(every=2), foo.foo_args)
# register handler as a decorated method with engine -- OK
engine.add_event_handler(Events.EPOCH_STARTED, foo.decorated_foo_args)

# register handler as a decorated method with engine and filter -- FAILED
engine.add_event_handler(Events.EPOCH_STARTED(every=2), foo.decorated_foo_args)

engine.run([0])
The error is
&lt;denchmark-code&gt;Error adding &lt;function Foo.decorated_foo_args at 0x1229b6af0&gt; 'handler': takes parameters ['self', 'args'] but will be called with [](missing a required argument: 'self').
&lt;/denchmark-code&gt;

Why ?
First, a handler defined with a filtered event is wrapped with decoration. See &lt;denchmark-link:https://github.com/sdesrozis/ignite/blob/93be57aa3f71ce601391d59096c3b430c4d9487b/ignite/engine/engine.py#L198&gt;https://github.com/sdesrozis/ignite/blob/93be57aa3f71ce601391d59096c3b430c4d9487b/ignite/engine/engine.py#L198&lt;/denchmark-link&gt;
. Note that  is used to fit the signature of the related handler.
The failed case is decorated method with engine. So, I guess functools.wraps works perfectly and catch self and engine as arguments. But the signature checking search (using inspect.signature) fails because missing self...
See signature checking



ignite/ignite/engine/utils.py


         Line 5
      in
      0de7156






 def _check_signature(fn: Callable, fn_description: str, *args, **kwargs) -&gt; None: 





I think this is related to follow_wrapped=True argument of inspect.signature.
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


PyTorch Version (e.g., 1.4): 1.5
Ignite Version (e.g., 0.3.0): 0.4
OS (e.g., Linux): MacOS
How you installed Ignite (conda, pip, source): Honda
Python version: 3.7
Any other relevant information:

	</description>
	<comments>
	</comments>
</bug>