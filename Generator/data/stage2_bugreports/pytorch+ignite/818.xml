<bug id='818' author='CDitzel' open_date='2020-03-02T10:13:06Z' closed_time='2020-04-28T13:42:34Z'>
	<summary>Strange program flow if using custom dataloader</summary>
	<description>
If using a custom dataloader that implements the len method, the current epoch is terminated upon this line 


ignite/ignite/engine/engine.py


         Line 455
      in
      90d4e1b






 if iter_counter == self.state.epoch_length: 





which causes an exit of the while True loop in



ignite/ignite/engine/engine.py


         Line 405
      in
      90d4e1b






 while True: 




.
However, at the start of the next epoch, the dataloader is exhausted and thus StopIteration is thrown only now, i.e. at the beginning of an actually new epoch.
I find this behaviour rather strange and unnatural. Can someome explain me the reason for this, maybe I just dont understand the underlying purpose
	</description>
	<comments>
		<comment id='1' author='CDitzel' date='2020-03-02T10:15:26Z'>
		&lt;denchmark-link:https://github.com/CDitzel&gt;@CDitzel&lt;/denchmark-link&gt;
 thanks for the report. Could you please provide some details on your custom dataloader ?
		</comment>
		<comment id='2' author='CDitzel' date='2020-03-02T10:54:20Z'>
		I use &lt;denchmark-link:https://tensorpack.readthedocs.io/tutorial/dataflow.html&gt;Tensorpack's Dataflow&lt;/denchmark-link&gt;
 which, at its core, is just a chain of iterators which yield one batch after another until exhaustion and that implement the () method to return the 'epoch_length'. Nothing too fancy, in its simplest form, sth. along the following lines:
&lt;denchmark-code&gt;class MyDataFlow(DataFlow):
  def __iter__(self):
    # load data from somewhere with Python, and yield them
    for k in range(100):
      digit = np.random.rand(28, 28)
      label = np.random.randint(10)
      yield [digit, label]
   def __len__(self):
      return 100

      
df = MyDataFlow()
df.reset_state()
for datapoint in df:
    print(datapoint[0], datapoint[1])
&lt;/denchmark-code&gt;

My point is general is, that the method 


ignite/ignite/engine/engine.py


         Line 398
      in
      90d4e1b






 def _run_once_on_dataset(self) -&gt; Tuple[int, int, int]: 




 is implemented in such a way that the break statement is always hit before the StopIteration exception is thrown.
		</comment>
		<comment id='3' author='CDitzel' date='2020-03-02T11:07:02Z'>
		Ok, thanks for the details. The point is the following, when using iterators it is impossible to restart it. For example,
a = [1, 2, 3, 4, 5]
a_iter = iter(a)

for n in range(2):
    for i in a_iter:
        print(n, i)
So, it means that if provided data is iterator, there are 2 ways: a) either it defines complete number of iterations (num_epoch * epoch_length), b) either it defines a single epoch and we need to call a reset method to restart the iterator.
I think this should be the same issue with your MyDataFlow. Can you loop more that one time on it without calling a reset or similar ?
df = MyDataFlow()
df.reset_state()
for datapoint in df:
    print(datapoint[0], datapoint[1])

for datapoint in df:
    print(datapoint[0], datapoint[1])
Otherwise, you can specify the length as 10 as in your example and define 10 epoch to match total 100 elements of your dataflow.
		</comment>
		<comment id='4' author='CDitzel' date='2020-03-02T11:57:31Z'>
		I reset the state after every sample has been used. So it can be reused. But how does this relate to my question? Why do we need both, the break statement and the StopIteration Handling?
		</comment>
		<comment id='5' author='CDitzel' date='2020-03-02T12:11:17Z'>
		
But how does this relate to my question? Why do we need both, the break statement and the StopIteration Handling?

Because, dataflow can have its "length" and user can define another epoch_length smaller, larger or equal dataflow's one.
		</comment>
		<comment id='6' author='CDitzel' date='2020-03-02T13:30:00Z'>
		thanks, but why then not discard the exception part altogether?
		</comment>
		<comment id='7' author='CDitzel' date='2020-03-02T13:47:57Z'>
		
why then not discard the exception part altogether?

I do not get what you mean by that. But, we also keep in mind that other data providers like torch DataLoader can be restarted by reapplying iter(loader). So, when exception is catched we restart the loader.
		</comment>
		<comment id='8' author='CDitzel' date='2020-03-02T15:11:39Z'>
		mh I thank you for your answers. I will have to think about the implications for a while...
		</comment>
		<comment id='9' author='CDitzel' date='2020-03-09T10:27:50Z'>
		I found that GET_BATCH_STARTED is called twice when stop Iteration is thrown in engine.
This program flow just seems wrong
		</comment>
		<comment id='10' author='CDitzel' date='2020-03-10T09:43:17Z'>
		
I found that GET_BATCH_STARTED is called twice when stop Iteration is thrown in engine.
This program flow just seems wrong

Let me check that.
		</comment>
		<comment id='11' author='CDitzel' date='2020-03-19T10:22:45Z'>
		did you find what I was saying is true?
		</comment>
		<comment id='12' author='CDitzel' date='2020-03-19T10:58:55Z'>
		It depends on your iterator. For infinite iterator everything is OK
from ignite.engine import Engine, Events

engine = Engine(lambda e, b: print("{}:{} - {}".format(e.state.epoch, e.state.iteration, b)))

@engine.on(Events.GET_BATCH_STARTED)
def log_if_called1(e):
    print("{}:{} - GET_BATCH_STARTED".format(e.state.epoch, e.state.iteration))
    
@engine.on(Events.GET_BATCH_COMPLETED)
def log_if_called2(e):
    print("{}:{} - GET_BATCH_COMPLETED".format(e.state.epoch, e.state.iteration))    

def data_iter(size):
    while True:
        for i in range(size):
            yield i

engine.run(data_iter(3), epoch_length=4, max_epochs=2);
gives
&lt;denchmark-code&gt;1:0 - GET_BATCH_STARTED
1:0 - GET_BATCH_COMPLETED
1:1 - 0
1:1 - GET_BATCH_STARTED
1:1 - GET_BATCH_COMPLETED
1:2 - 1
1:2 - GET_BATCH_STARTED
1:2 - GET_BATCH_COMPLETED
1:3 - 2
1:3 - GET_BATCH_STARTED
1:3 - GET_BATCH_COMPLETED
1:4 - 0
2:4 - GET_BATCH_STARTED
2:4 - GET_BATCH_COMPLETED
2:5 - 1
2:5 - GET_BATCH_STARTED
2:5 - GET_BATCH_COMPLETED
2:6 - 2
2:6 - GET_BATCH_STARTED
2:6 - GET_BATCH_COMPLETED
2:7 - 0
2:7 - GET_BATCH_STARTED
2:7 - GET_BATCH_COMPLETED
2:8 - 1
&lt;/denchmark-code&gt;

For a finite iterator, yes, I confirm GET_BATCH_STARTED called more than once
def finite_data_iter(size):    
    for i in range(size):
        yield i

engine = Engine(lambda e, b: print("{}:{} - {}".format(e.state.epoch, e.state.iteration, b)))


@engine.on(Events.GET_BATCH_STARTED)
def log_if_called1(e):
    print("{}:{} - GET_BATCH_STARTED".format(e.state.epoch, e.state.iteration))

    
@engine.on(Events.GET_BATCH_COMPLETED)
def log_if_called2(e):
    print("{}:{} - GET_BATCH_COMPLETED".format(e.state.epoch, e.state.iteration))    

engine.run(finite_data_iter(3), epoch_length=4, max_epochs=2);
gives
&lt;denchmark-code&gt;1:0 - GET_BATCH_STARTED
1:0 - GET_BATCH_COMPLETED
1:1 - 0
1:1 - GET_BATCH_STARTED
1:1 - GET_BATCH_COMPLETED
1:2 - 1
1:2 - GET_BATCH_STARTED
1:2 - GET_BATCH_COMPLETED
1:3 - 2
1:3 - GET_BATCH_STARTED
1:3 - GET_BATCH_STARTED
2:3 - GET_BATCH_STARTED
2:3 - GET_BATCH_STARTED
/opt/conda/lib/python3.7/site-packages/ignite/engine/engine.py:427: UserWarning: Data iterator can not provide data anymore but required total number of iterations to run is not reached. Current iteration: 3 vs Total iterations to run : 8
  self.state.iteration, self.state.epoch_length * self.state.max_epochs
&lt;/denchmark-code&gt;

However, as event name states "get batch started" = batch fetching is started, so engine tries to fetch data without success multiple times as required by epoch_length and max_epochs.
		</comment>
		<comment id='13' author='CDitzel' date='2020-03-25T09:13:35Z'>
		so you are saying this is a feature rather than a bug?
I never specified epoch_length though...
		</comment>
		<comment id='14' author='CDitzel' date='2020-03-25T10:32:57Z'>
		&lt;denchmark-link:https://github.com/CDitzel&gt;@CDitzel&lt;/denchmark-link&gt;
 could you please provide a minimal snippet to reproduce your case ?
		</comment>
		<comment id='15' author='CDitzel' date='2020-04-03T09:05:06Z'>
		&lt;denchmark-link:https://github.com/CDitzel&gt;@CDitzel&lt;/denchmark-link&gt;
 I think I could reproduce your issue:
from ignite.engine import Engine, Events

def update(e, _):
    pass
                        
trainer = Engine(update)

@trainer.on(Events.GET_BATCH_STARTED)
def log_if_called1(e):
    print("{}:{} - GET_BATCH_STARTED - ".format(e.state.epoch, e.state.iteration), end=" ")
    
@trainer.on(Events.GET_BATCH_COMPLETED)
def log_if_called2(e):
    print("{}:{} - GET_BATCH_COMPLETED".format(e.state.epoch, e.state.iteration))    

data = list(range(int(10)))
trainer.run(data, max_epochs=4);
and
&lt;denchmark-code&gt;1:0 - GET_BATCH_STARTED -  1:0 - GET_BATCH_COMPLETED
1:1 - GET_BATCH_STARTED -  1:1 - GET_BATCH_COMPLETED
...
1:8 - GET_BATCH_STARTED -  1:8 - GET_BATCH_COMPLETED
1:9 - GET_BATCH_STARTED -  1:9 - GET_BATCH_COMPLETED
2:10 - GET_BATCH_STARTED -  2:10 - GET_BATCH_STARTED -  2:10 - GET_BATCH_COMPLETED
2:11 - GET_BATCH_STARTED -  2:11 - GET_BATCH_COMPLETED
2:12 - GET_BATCH_STARTED -  2:12 - GET_BATCH_COMPLETED
2:13 - GET_BATCH_STARTED -  2:13 - GET_BATCH_COMPLETED
...
2:19 - GET_BATCH_STARTED -  2:19 - GET_BATCH_COMPLETED
3:20 - GET_BATCH_STARTED -  3:20 - GET_BATCH_STARTED -  3:20 - GET_BATCH_COMPLETED
3:21 - GET_BATCH_STARTED -  3:21 - GET_BATCH_COMPLETED
...
3:27 - GET_BATCH_STARTED -  3:27 - GET_BATCH_COMPLETED
3:28 - GET_BATCH_STARTED -  3:28 - GET_BATCH_COMPLETED
3:29 - GET_BATCH_STARTED -  3:29 - GET_BATCH_COMPLETED
4:30 - GET_BATCH_STARTED -  4:30 - GET_BATCH_STARTED -  4:30 - GET_BATCH_COMPLETED
4:31 - GET_BATCH_STARTED -  4:31 - GET_BATCH_COMPLETED
4:32 - GET_BATCH_STARTED -  4:32 - GET_BATCH_COMPLETED
....
4:38 - GET_BATCH_STARTED -  4:38 - GET_BATCH_COMPLETED
4:39 - GET_BATCH_STARTED -  4:39 - GET_BATCH_COMPLETED
&lt;/denchmark-code&gt;

Looks like a bug. Thanks for reporting that !
		</comment>
		<comment id='16' author='CDitzel' date='2020-04-04T18:07:18Z'>
		I just saw your reply, Thank you for getting back to me on that.
		</comment>
	</comments>
</bug>