<bug id='2418' author='shmoradims' open_date='2017-09-26T23:16:36Z' closed_time='2017-12-05T22:39:14Z'>
	<summary>C# 2.2 Function.FindByName() doesn't find inputs</summary>
	<description>
Example:
var a = Variable.InputVariable(new int[] { 1 }, DataType.Float, "a");
var b = Variable.InputVariable(new int[] { 1 }, DataType.Float, "b");
var c = CNTKLib.Plus(a, b, "c");
FindByName can’t find inputs a or b. It can only find c:
c.FindByName("a")
null
c.FindByName("b")
null
c.FindByName("a", true)
null
c.FindByName("b", true)
null
c.FindByName("c").Name
"c"
The python equivalent works fine:
a = C.input_variable(shape=1, name='a')
b = C.input_variable(shape=1, name='b')
c = C.plus(a, b, name='c')
print(c.find_by_name('a').name)
print(c.find_by_name('b').name)
print(c.find_by_name('c').name)
Output:
a
b
c
The C# version has unexpected / inconsistent behavior. I’d expect the inputs to be treated the same as any other node in the graph, similar to the python version.
	</description>
	<comments>
		<comment id='1' author='shmoradims' date='2017-10-05T01:25:32Z'>
		It is handled by Liqun.
There is a tiny note, C# actually matches C++.
In C++, FindByName is designed to find the operator with the name, instead of variable.
A operator has a different type from a variable, and a operator can have multiple output variables.
In Python, I think we don't explicitly distinguish these two.
		</comment>
		<comment id='2' author='shmoradims' date='2017-12-05T22:39:14Z'>
		Closing, duplicate of &lt;denchmark-link:https://github.com/microsoft/CNTK/issues/2454&gt;#2454&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>