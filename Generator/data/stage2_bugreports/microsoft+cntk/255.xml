<bug id='255' author='shane6lee' open_date='2016-03-19T17:55:41Z' closed_time='2017-07-07T09:12:52Z'>
	<summary>Crash in UCIFastReader</summary>
	<description>
I am seeing a crash in UCIFastReader and I think it is due to this line of code (UCIFastReader.cpp, line 928):
memcpy(&amp;m_featuresBuffer.get()[j` * m_featureCount], &amp;m_featureData[jRand * m_featureCount], sizeof(ElemType) * m_featureCount);
There should be a check to ensure jRand * m_featureCount + m_featureCount does not exceed the length of m_featureData.
	</description>
	<comments>
		<comment id='1' author='shane6lee' date='2016-03-20T03:47:57Z'>
		This was a known bug that should have been fixed some time ago. Would you mind checking two things:

are you using the latest version? (Are you using a pre-built binary or self-compiled source?)
did you declare SGD's epochSize parameter being larger than the actual training corpus? If so, please try adjusting epochSize = #samples in the corpus

		</comment>
		<comment id='2' author='shane6lee' date='2016-03-20T04:45:23Z'>
		I cloned the source from GitHub yesterday and compiled the binaries myself, so it is the latest version. In the SGD section the epochSize is set to 0.
		</comment>
		<comment id='3' author='shane6lee' date='2016-03-20T04:53:26Z'>
		Would you mind trying something: If you know the number of samples in your training set, could you set epochSize to that number?
		</comment>
		<comment id='4' author='shane6lee' date='2016-03-20T05:17:35Z'>
		Actually while trouble shooting this error:
"EXCEPTION occurred: randomizeRange must be an even multiple of mbSize and an integral factor of epochSize",
I put in additional print statements and this was printed:
m_epochSize = 12277393; requestDataSize = 4611686018427387903; m_randomizeRange = 12277393; m_mbSize = 4096
So it looks like the epochSize is set to the number of input samples of 12277393.
		</comment>
		<comment id='5' author='shane6lee' date='2016-03-20T07:42:27Z'>
		it also requires the random range to be multiples of the minibatch size.
the workaround is to randomize your set offline and don't use readers randomization
Thanks,
Dong Yu (俞栋)Sent from my smart phone. Please forgive my typos.




-------- Original message --------
From: shane6lee  
Date: 3/20/2016  13:17  (GMT+08:00) 
To: Microsoft/CNTK  
Subject: Re: [CNTK] Crash in UCIFastReader (&lt;denchmark-link:https://github.com/microsoft/CNTK/issues/255&gt;#255&lt;/denchmark-link&gt;
) 


Actually while trouble shooting this error:
"EXCEPTION occurred: randomizeRange must be an even multiple of mbSize and an integral factor of epochSize",
I put in additional print statements and this was printed:
m_epochSize = 12277393; requestDataSize = 4611686018427387903; m_randomizeRange = 12277393; m_mbSize = 4096
So it looks like the epochSize is set to the number of input samples of 12277393.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

You are receiving this because you are subscribed to this thread.
Reply to this email directly or view it on GitHub:
&lt;denchmark-link:https://github.com/microsoft/CNTK/issues/255#issuecomment-198852553&gt;#255 (comment)&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='shane6lee' date='2016-03-21T14:58:27Z'>
		If you're feeling adventurous, you can try using CNTKTextFormat reader instead of the UCIFast.
Towards this end, you'll need to

convert your data using a python script:

python uci_to_cntk_text_format_converter.py -in [input file] -fs [features.start] -fd [features.dim] -ls [labels.start] -ld [labels.dim] --num_labels [labels.labelDim] -out [output file]
where input values are identical to those in your "reader" config section.

replace "reader" section in your config with:

&lt;denchmark-code&gt;reader = [
        readerType = "CNTKTextFormatReader"
        file = "[output file]" # output of the converter
        input = [
            features = [
                dim = [features.dim] # same as before
                format = "dense"
            ]
            labels = [
                dim = [labels.labelDim] # the number of possible label values (not labels.dim!)
                format = "dense"
            ]
        ]
    ]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='shane6lee' date='2016-03-22T22:51:09Z'>
		Using the "Simple2d" example, could you tell me if this is the right way to use the conversion script:
python uci_to_cntk.py -in SimpleDataTrain.txt -fs 0 -fd 2 -ls 2 -ld 1 --num_labels 2 -out cntk.txt
		</comment>
		<comment id='8' author='shane6lee' date='2016-03-23T08:30:36Z'>
		That is correct. The reader section in the config should look like this:
&lt;denchmark-code&gt;reader = [
        readerType = "CNTKTextFormatReader"
        file = "cntk.txt" # alternatively, "full_path/cntk.txt" or "$DataDir$/cntk.txt"

        input = [
            features = [
                dim = 2
                format = "dense"
            ]
            labels = [
                dim = 2
                format = "dense"
            ]
        ]
    ]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='shane6lee' date='2017-07-07T09:24:23Z'>
		The readers have bee reworked entirely. Please try with the latest bits. Thanks.
		</comment>
	</comments>
</bug>