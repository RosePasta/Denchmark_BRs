<bug id='887' author='MikeInnes' open_date='2019-10-08T13:50:35Z' closed_time='2020-12-28T00:26:58Z'>
	<summary>normalise is not GPU compatible</summary>
	<description>
julia&gt; using Flux, CuArrays

julia&gt; CuArrays.allowscalar(false)

julia&gt; Flux.normalise(gpu(rand(10)))
ERROR: scalar getindex is disallowed
This is actually due to std with a dims argument:
julia&gt; std(gpu(rand(10)), dims = 1)
ERROR: scalar getindex is disallowed
	</description>
	<comments>
		<comment id='1' author='MikeInnes' date='2020-01-01T01:17:51Z'>
		&lt;denchmark-code&gt;julia&gt; using Flux,CuArrays

julia&gt; CuArrays.allowscalar(false)

julia&gt; Flux.normalise(gpu(rand(10)))
10-element CuArray{Float32,1,Nothing}:
 -0.4204     
 -1.0460519  
  1.3730303  
  0.9785272  
 -1.2841846  
  1.0471098  
  1.0527792  
 -1.3440493  
 -0.46324056 
  0.106479086

julia&gt; test = gpu(reshape(collect(1:9), 3, 3))
3×3 CuArray{Float32,2,Nothing}:
 1.0  4.0  7.0
 2.0  5.0  8.0
 3.0  6.0  9.0

julia&gt; Flux.normalise(test,dims=1)
3×3 CuArray{Float32,2,Nothing}:
 -1.22474  -1.22474  -1.22474
  0.0       0.0       0.0    
  1.22474   1.22474   1.22474

julia&gt; Flux.normalise(test,dims=2)
3×3 CuArray{Float32,2,Nothing}:
 -1.22474  0.0  1.22474
 -1.22474  0.0  1.22474
 -1.22474  0.0  1.22474
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/MikeInnes&gt;@MikeInnes&lt;/denchmark-link&gt;
 I have written a seperate function for normalising a CuArray which i think will solve this bug.
		</comment>
		<comment id='2' author='MikeInnes' date='2020-01-01T09:22:21Z'>
		&lt;denchmark-link:https://github.com/FluxML/Flux.jl/pull/981&gt;#981&lt;/denchmark-link&gt;
 Here is the PR with the added function
		</comment>
		<comment id='3' author='MikeInnes' date='2020-12-28T00:26:57Z'>
		This seems to  be fixed
julia&gt; Flux.normalise(rand(3,3) |&gt; gpu, dims=1)
3×3 CUDA.CuArray{Float32,2}:
 -0.347823  -0.617769   0.627006
  1.36064    1.41056   -1.41124
 -1.01282   -0.792795   0.784235

julia&gt; Flux.normalise(rand(3,3) |&gt; gpu, dims=2)
3×3 CUDA.CuArray{Float32,2}:
 -0.133363   1.28592  -1.15256
  0.141054   1.14807  -1.28912
 -0.350742  -1.01107   1.36181
		</comment>
	</comments>
</bug>