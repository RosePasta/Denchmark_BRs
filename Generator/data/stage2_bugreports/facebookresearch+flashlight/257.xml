<bug id='257' author='zjuturtle' open_date='2020-11-13T09:51:14Z' closed_time='2020-11-23T18:02:53Z'>
	<summary>Decode Seq2Seq with unexpected  hidden clear</summary>
	<description>
&lt;denchmark-h:h3&gt;Bug Description&lt;/denchmark-h&gt;

I noice a &lt;denchmark-link:https://github.com/facebookresearch/flashlight/commit/712c9a3fd0a01d1ca7f8b6f49487ea155fa0bcda&gt;commit&lt;/denchmark-link&gt;
 try to reduce memory usage by clear preState.hidden in advance. But it will cause unexpected crash in following decode step



flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp


         Line 387
      in
      712c9a3






 buf-&gt;prevStates, 





In normal case, buf-&gt;prevStates is a vector of TS2SState. Every TS2SState-&gt;hidden should have same size (Maybe 6 in my case?). But sometimes TS2SState-&gt;hidden is empty, that will cause crash in decode step(Because in decode step it will concatenate buf-&gt;prevStates)
I wrote a little code to demonstrate
&lt;denchmark-code&gt;// flashlight/app/asr/criterion/TransformerCriterion.cpp
      std::stringstream ss;
      for(int ii=0;ii &lt; buf-&gt;prevStates.size();ii++) {
          auto &amp;state = buf-&gt;prevStates[ii];
          ss&lt;&lt;" "&lt;&lt;state-&gt;hidden.size();
      }
      FL_LOG(fl::INFO) &lt;&lt; "decode call input.dims ="&lt;&lt;buf-&gt;input.dims()&lt;&lt;", ys.size()="&lt;&lt;buf-&gt;ys.size()
       &lt;&lt;" prevStates.hidden size =["&lt;&lt; ss.str() &lt;&lt; "]prevStates.size()=" &lt;&lt;buf-&gt;prevStates.size();

      std::tie(amScores, outStates) = criterion-&gt;decodeBatchStep(
          buf-&gt;input,
          buf-&gt;ys,
          buf-&gt;prevStates,
          buf-&gt;attentionThreshold,
          buf-&gt;smoothingTemperature);
&lt;/denchmark-code&gt;

The output will be like
&lt;denchmark-code&gt;I1113 09:47:35.609973 82176 TransformerCriterion.cpp:394 decode call input.dims =512 83 1 1, ys.size()=1 prevStates.hidden size =[ 0]prevStates.size()=1
I1113 09:48:48.601410 82176 TransformerCriterion.cpp:394 decode call input.dims =512 83 1 1, ys.size()=4 prevStates.hidden size =[ 6 6 6 6]prevStates.size()=4
I1113 09:48:49.637162 82176 TransformerCriterion.cpp:394 decode call input.dims =512 83 1 1, ys.size()=9 prevStates.hidden size =[ 6 6 6 6 6 6 6 6 6]prevStates.size()=9
I1113 09:48:49.658872 82176 TransformerCriterion.cpp:394 decode call input.dims =512 83 1 1, ys.size()=9 prevStates.hidden size =[ 6 6 6 6 6 6 6 6 6]prevStates.size()=9
I1113 09:48:49.684775 82176 TransformerCriterion.cpp:394 decode call input.dims =512 83 1 1, ys.size()=9 prevStates.hidden size =[ 6 6 6 6 6 6 6 6 6]prevStates.size()=9
I1113 09:48:49.727832 82176 TransformerCriterion.cpp:394 decode call input.dims =512 83 1 1, ys.size()=10 prevStates.hidden size =[ 6 6 6 6 6 6 6 6 6 6]prevStates.size()=10
I1113 09:48:49.759795 82176 TransformerCriterion.cpp:394 decode call input.dims =512 83 1 1, ys.size()=8 prevStates.hidden size =[ 0 0 6 6 6 6 6 6]prevStates.size()=8
F1113 09:48:49.763934 82176 Decode.cpp:655 Exception in thread 0
&lt;/denchmark-code&gt;

Note the second line from the bottom output prevStates.hidden size =[ 0 0 6 6 6 6 6 6]. First two prevStates's hidden vector is empty
Decode is fine in old code
&lt;denchmark-h:h4&gt;Reproduction Steps&lt;/denchmark-h&gt;

Run master code after this commit use decode_transformer_s2s_ngram.cfg
&lt;denchmark-h:h3&gt;Platform and Hardware&lt;/denchmark-h&gt;

V100 16G * 8
Ubuntu with Docker
	</description>
	<comments>
		<comment id='1' author='zjuturtle' date='2020-11-14T04:30:55Z'>
		Hey, thanks for reporting. I have several comments.
Here 


flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp


         Line 371
      in
      712c9a3






 for (int i = start; i &lt; end; i++) { 




 we full the buffer with necessary batch of previous states. Then we call decode 


flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp


         Line 384
      in
      712c9a3






 std::tie(amScores, outStates) = criterion-&gt;decodeBatchStep( 




 for the full batch and then we clean up the previous state for which we computed the outputStates 


flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp


         Line 398
      in
      712c9a3






 for (int i = start; i &lt; end; i++) { 




. We don't use the previous state anywhere else. So it should not cause the problem of null pointers for the previous states. However with this fix now you can run with larger beams / larger input sequences.
Could you run with commented part of code on cleaning the previous states? Do you have another behaviour?
Also cc &lt;denchmark-link:https://github.com/xuqiantong&gt;@xuqiantong&lt;/denchmark-link&gt;
 if I missed something.
		</comment>
		<comment id='2' author='zjuturtle' date='2020-11-16T07:54:26Z'>
		I dig a little deeper into code. Here's what I found:
The root case is because prevStates.hidden does not has the same dims. Function input parameter rawPrevStates is vector&lt;TS2SState*&gt;. But these TS2SState* seems share the same  pointer. That means, rawPrevStates has a lot identical TS2SState* pointer.(Is this as design or a pointer bug?)
Add a little code here to demonstrate



flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp


         Line 362
      in
      712c9a3






 int start = 0, step = std::min(10, 1000 / (t + 1)); 





std::string rawPrevStatesPtr(const std::vector&lt;AMStatePtr&gt;&amp; rawPrevStates){
  std::stringstream ss;
  ss &lt;&lt; "[";
  for(int i=0; i&lt;rawPrevStates.size();i++) {
    ss &lt;&lt; " "&lt;&lt; static_cast&lt;void*&gt;(rawPrevStates[i].get());
  }
  ss&lt;&lt;"]";
  return ss.str();
}

//---
std::vector&lt;AMStatePtr&gt; out;
std::vector&lt;std::vector&lt;float&gt;&gt; amScoresAll;

int start = 0, step = std::min(10, 1000 / (t + 1));
FL_LOG(fl::INFO) &lt;&lt; "rawPrevStatesPtr: " &lt;&lt;rawPrevStatesPtr(rawPrevStates);
while (start &lt; B) {
      buf-&gt;prevStates.resize(0);
// ...
The output pointer addresses before crash are
&lt;denchmark-code&gt;rawPrevStatesPtr: [ 0x7fbb509011d0 0x7fbb509011d0 0x7fbb509011d0 0x7fbb509011d0 0x7fbb509011d0 0x7fbb509011d0 0x7fbb5097a860 0x7fbb509011d0 0x7fbb501a5220 0x7fbb509011d0 0x7fbb509011d0 0x7fbb509011d0 0x7fbb508e8040 0x7fbb509e68b0 0x7fbb5013adc0 0x7fbb5082f340 0x7fbb50a705b0 0x7fbb50a705b0]
&lt;/denchmark-code&gt;

A lot rawPrevStates are the same.
Now let's see what happened exactly. In my case, I got 2 loop here



flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp


         Line 363
      in
      712c9a3






 while (start &lt; B) { 





so in the first loop end, we clear hidden



flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp


         Line 401
      in
      712c9a3






 prevState-&gt;hidden.clear(); 





will clear more than we expected.
Add a little code to demonstrate here



flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp


         Line 398
      in
      712c9a3






 for (int i = start; i &lt; end; i++) { 





std::string rawPrevStatesHiddenSize(const std::vector&lt;AMStatePtr&gt;&amp; rawPrevStates){
  std::stringstream ss;
  ss &lt;&lt; "[";
      for(int i=0; i&lt;rawPrevStates.size();i++) {
        auto ptr = static_cast&lt;TS2SState*&gt;(rawPrevStates[i].get());
        if (ptr) {
          ss&lt;&lt; " " &lt;&lt; ptr-&gt;hidden.size();
        }else{
          ss&lt;&lt;" nullPtr ";
        }
      }
      ss&lt;&lt;"]";
    return ss.str();
}
//-------
for (int i = start; i &lt; end; i++) {
        TS2SState* prevState = static_cast&lt;TS2SState*&gt;(rawPrevStates[i].get());
        if (prevState) {
          FL_LOG(fl::INFO) &lt;&lt;"Before clear "&lt;&lt;i&lt;&lt; " "&lt;&lt; rawPrevStatesHiddenSize(rawPrevStates);
          prevState-&gt;hidden.clear();
          FL_LOG(fl::INFO) &lt;&lt;"After clear "&lt;&lt;i&lt;&lt;" "&lt;&lt; rawPrevStatesHiddenSize(rawPrevStates);
        }
      }
We will get
&lt;denchmark-code&gt;TransformerCriterion.cpp:439 Before clear 0 [ 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6]
TransformerCriterion.cpp:444 After clear 0 [ 0 0 0 0 0 0 6 0 6 0 0 0 6 6 6 6 6 6]
&lt;/denchmark-code&gt;

So in second loop run, we will get prevStates.hidden size =[ 0 0 6 6 6 6 6 6]
I read more code today. A little comment:
These same pointer came from in this function



flashlight/flashlight/lib/text/decoder/LexiconFreeSeq2SeqDecoder.cpp


         Line 20
      in
      712c9a3






 void LexiconFreeSeq2SeqDecoder::decodeStep( 





This function will call a couple of candidatesAdd.  candidatesAdd  will create LexiconFreeSeq2SeqDecoderState and add it to candidates_. But it use same pointer to assign amState. So in the end, we call



flashlight/flashlight/lib/text/decoder/LexiconFreeSeq2SeqDecoder.cpp


         Line 138
      in
      712c9a3






 candidatesStore( 





In hyp_[t+1] some LexiconFreeSeq2SeqDecoderState will share same amState pointer.
		</comment>
		<comment id='3' author='zjuturtle' date='2020-11-17T07:11:09Z'>
		I suggest a fix for this



flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp


         Line 398
      in
      712c9a3






 for (int i = start; i &lt; end; i++) { 





      std::unordered_set&lt;TS2SState*&gt; validPrevStateSet;
      for (int i = end;i &lt; rawPrevStates.size();i++){
        validPrevStateSet.insert(static_cast&lt;TS2SState*&gt;(rawPrevStates[i].get()));
      }

      for (int i = start; i &lt; end; i++) {
        TS2SState* prevState = static_cast&lt;TS2SState*&gt;(rawPrevStates[i].get());
        if (prevState &amp;&amp; validPrevStateSet.cend() == validPrevStateSet.find(prevState)) {
          prevState-&gt;hidden.clear();
        }
      }
		</comment>
		<comment id='4' author='zjuturtle' date='2020-11-17T08:47:07Z'>
		Thanks for your detailed investigation, we will have a look and will try to repro and then come back to you =).
		</comment>
		<comment id='5' author='zjuturtle' date='2020-11-17T09:12:04Z'>
		By the way, I think there's a bug here



flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp


         Line 362
      in
      75c241b






 int start = 0, step = std::min(10, 1000 / (t + 1)); 





t will increase during decoding, so if t get larger than 999,  step will be 0, then the while loop will become infinite loop.
		</comment>
		<comment id='6' author='zjuturtle' date='2020-11-17T18:22:43Z'>
		Hi &lt;denchmark-link:https://github.com/zjuturtle&gt;@zjuturtle&lt;/denchmark-link&gt;
, thanks for spotting the bugs!


For the state.hidden bug, I think we can simply move https://github.com/facebookresearch/flashlight/blob/master/flashlight/app/asr/criterion/TransformerCriterion.cpp#L398-L403 out of this loop https://github.com/facebookresearch/flashlight/blob/master/flashlight/app/asr/criterion/TransformerCriterion.cpp#L363 and place it at the end.


For the step=0 bug, we should add something like step = max(step, 1).


Please let me know your thoughts!
		</comment>
		<comment id='7' author='zjuturtle' date='2020-11-18T02:10:55Z'>
		For state.hidden bug, if we just move clear code out of the loop, I think we will lose the opportunity clear hidden in advance in the loop. Add some valid check code, it will not cost much extra time.
Add following code before loop



flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp


         Line 363
      in
      9448004






 while (start &lt; B) { 





    // A simple bimap to record valid clear hidden
    std::map&lt;TS2SState*, int&gt; validClearPtr2Index;
    std::map&lt;int, TS2SState*&gt; validClearIndex2Ptr;
    for (int index=0;index&lt;rawPrevStates.size();index++){
      TS2SState* ptr = static_cast&lt;TS2SState*&gt;(rawPrevStates[index].get());
      auto iter = validClearPtr2Index.find(ptr);

      // Pointer exists in earlier rawPrevStates
      if (iter != validClearPtr2Index.end()){
        validClearIndex2Ptr.erase(iter-&gt;second);
        validClearPtr2Index.erase(iter);
      }
      validClearPtr2Index[ptr] = index;
      validClearIndex2Ptr[index] = ptr;
    }
    validClearPtr2Index.clear();
Then in the original clear code,



flashlight/flashlight/app/asr/criterion/TransformerCriterion.cpp


        Lines 398 to 403
      in
      9448004






 for (int i = start; i &lt; end; i++) { 



   TS2SState* prevState = static_cast&lt;TS2SState*&gt;(rawPrevStates[i].get()); 



 if (prevState) { 



     prevState-&gt;hidden.clear(); 



   } 



 } 





modify to
      // clean the previous state which is not needed anymore
      // to prevent from OOM
      for (int i = start; i &lt; end; i++) {
        auto iter = validClearIndex2Ptr.find(i);
        if (iter != validClearIndex2Ptr.end()) {
          TS2SState* prevState = static_cast&lt;TS2SState*&gt;(rawPrevStates[i].get());
          if (prevState) {
            prevState-&gt;hidden.clear();
          }
        }
      }
This fix is better than my last suggestion for speed
		</comment>
		<comment id='8' author='zjuturtle' date='2020-11-18T10:50:04Z'>
		Let us discuss your solutions and then I will send the fix (or you could do PR) =) Thanks again for reporting/debugging/sharing ideas of fix for the issue!
		</comment>
		<comment id='9' author='zjuturtle' date='2020-11-19T01:58:39Z'>
		Unfortunately my computer is not allowed upload to GitHub. So PR is currently unavailable for me.
		</comment>
		<comment id='10' author='zjuturtle' date='2020-11-23T06:33:13Z'>
		&lt;denchmark-link:https://github.com/zjuturtle&gt;@zjuturtle&lt;/denchmark-link&gt;

Thanks again for reporting/debugging/solving the issue. Here the fix &lt;denchmark-link:https://github.com/facebookresearch/flashlight/pull/280&gt;#280&lt;/denchmark-link&gt;
, could you try it and tell if it works now for you?
		</comment>
		<comment id='11' author='zjuturtle' date='2020-11-23T18:02:53Z'>
		The PR is merged, closing the issue for now.
Feel free to reopen if there is still any problem, and please report if everything works for you now &lt;denchmark-link:https://github.com/zjuturtle&gt;@zjuturtle&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>