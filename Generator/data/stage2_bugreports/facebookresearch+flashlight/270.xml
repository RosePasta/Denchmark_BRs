<bug id='270' author='WilliamTambellini' open_date='2020-11-19T00:59:07Z' closed_time='2020-12-01T22:23:53Z'>
	<summary>Cuda sources (CriterionUtils.cu,...) compilation failure</summary>
	<description>
&lt;denchmark-h:h3&gt;Bug Description&lt;/denchmark-h&gt;

Cuda sources (CriterionUtils.cu,...) compilation failure
&lt;denchmark-h:h4&gt;Reproduction Steps&lt;/denchmark-h&gt;


git pull the very master as today specially the upgrade to cmake 3.10 f5f84c4
cmake with 3.12+
make

&lt;denchmark-h:h3&gt;Platform and Hardware&lt;/denchmark-h&gt;

ubuntu 16, cuda 10.2
&lt;denchmark-h:h4&gt;Additional Context&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;[ 12%] Building CUDA object CMakeFiles/fl-libraries.dir/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu.o
/usr/local/cuda/bin/nvcc  -DFL_LIBRARIES_USE_CUDA -DFL_LIBRARIES_USE_KENLM -DKENLM_MAX_ORDER=6 -I/home/wtambellini/repos/flashlight -I/usr/include/openblas -I/home/wtambellini/repos/kenlm -I/home/wtambellini/repos/flashlight/release/CUB/src/CUB -I/usr/local/cuda/include   -x cu -c /home/wtambellini/repos/flashlight/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu -o CMakeFiles/fl-libraries.dir/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu.o
/home/wtambellini/repos/flashlight/flashlight/lib/sequence/criterion/Defines.h(14): warning: scoped enumeration types are a C++11 feature
/home/wtambellini/repos/flashlight/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu(24): error: explicit type is missing ("int" assumed)
&lt;/denchmark-code&gt;

As you can see the std=c++11 is not set in the nvcc CLI.
It's because the cmake team has changed their mind several times about how to handle cuda.
Todays FL master is setting a global var in CUDAUtils.cmake:
&lt;denchmark-code&gt;function (set_cuda_cxx_compile_flags)
  set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS};-std=c++11" PARENT_SCOPE)
  # Using host flags makes things bad - keep things clean
  set(CUDA_PROPAGATE_HOST_FLAGS OFF)
endfunction()
&lt;/denchmark-code&gt;

which does nt work anymore with 'recent' cmake.
The proper way to do is said to set target props:  adding
&lt;denchmark-code&gt;  target_compile_options(fl-libraries PRIVATE $&lt;$&lt;COMPILE_LANGUAGE:CUDA&gt;:--std=c++11&gt;)
&lt;/denchmark-code&gt;

seems to fix the error.
Refs:
&lt;denchmark-link:https://forums.developer.nvidia.com/t/passing-flags-to-nvcc-via-cmake/75768/2&gt;https://forums.developer.nvidia.com/t/passing-flags-to-nvcc-via-cmake/75768/2&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='WilliamTambellini' date='2020-11-25T03:44:42Z'>
		cc &lt;denchmark-link:https://github.com/jacobkahn&gt;@jacobkahn&lt;/denchmark-link&gt;
 could you add this fix in cmake or &lt;denchmark-link:https://github.com/WilliamTambellini&gt;@WilliamTambellini&lt;/denchmark-link&gt;
 feel free to send PR?
		</comment>
		<comment id='2' author='WilliamTambellini' date='2020-11-30T06:36:45Z'>
		I cannot build for cmake 3.19.1. Context below
&lt;denchmark-code&gt;[build] make[3]: *** [third/flashlight/CMakeFiles/fl-libraries.dir/flashlight/lib/sequence/criterion/cuda/ForceAlignmentCriterion.cu.o] Error 1
[build] nvcc fatal   : redefinition of argument 'std'
&lt;/denchmark-code&gt;

Delete  seems solve &lt;denchmark-link:https://github.com/facebookresearch/DetectAndTrack/issues/57&gt;Ref&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/WilliamTambellini&gt;@WilliamTambellini&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/jacobkahn&gt;@jacobkahn&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='WilliamTambellini' date='2020-11-30T14:30:21Z'>
		&lt;denchmark-link:https://github.com/WilliamTambellini&gt;@WilliamTambellini&lt;/denchmark-link&gt;
 this is what I was talking about :)
		</comment>
		<comment id='4' author='WilliamTambellini' date='2020-11-30T17:33:10Z'>
		Hum, I ve just tried and seems to build correctly with todays master and cmake 3.19:
&lt;denchmark-code&gt;[ 20%] Building CUDA object CMakeFiles/fl-libraries.dir/flashlight/lib/sequence/criterion/cuda/ForceAlignmentCriterion.cu.o
/usr/local/cuda/bin/nvcc -forward-unknown-to-host-compiler -DFL_LIBRARIES_USE_CUDA -DFL_LIBRARIES_USE_KENLM -DKENLM_MAX_ORDER=6 -I/home/wtambellini/repos/flashlight -I/usr/include/openblas -I/home/wtambellini/repos/kenlm -I/home/wtambellini/repos/flashlight/release/CUB/src/CUB -I/usr/local/cuda/include -O3 -DNDEBUG --std=c++14 -Xcompiler -pthread -std=c++14 -x cu -c /home/wtambellini/repos/flashlight/flashlight/lib/sequence/criterion/cuda/ForceAlignmentCriterion.cu -o CMakeFiles/fl-libraries.dir/flashlight/lib/sequence/criterion/cuda/ForceAlignmentCriterion.cu.o
&lt;/denchmark-code&gt;

The c++14 flag appears twice but nvcc (10.2) does not seem to care. Perhaps depends on the version of nvcc though.
Status with todays master:

CUDAUtils.cmake does set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS};-std=c++11" PARENT_SCOPE)
fl lib cmakelists sets target_compile_options(fl-libraries PRIVATE $&lt;$&lt;COMPILE_LANGUAGE:CUDA&gt;:--std=c++14&gt;)

&lt;denchmark-link:https://github.com/jacobkahn&gt;@jacobkahn&lt;/denchmark-link&gt;
 I see at least these options:
1- I could simply remove the  target_compile_options(fl-libraries PRIVATE $&lt;$&lt;COMPILE_LANGUAGE:CUDA&gt;:--std=c++14&gt;) : only usefull for recent cmake, using cmake 3.10 just simpler. Supporting wide range of cmake versions in FL is anyway quite time consuming and perhaps not that worth it (at least for my usecase).
2- switching to target_compile_options(fl-libraries PRIVATE $&lt;$&lt;COMPILE_LANGUAGE:CUDA&gt;:--std=c++11&gt;), not 14. Safer.
3- I could retouch the CUDAUtils.cmake to upgrade to std to c++14 (not 11): could be usefull in the near futur but worry about old cuda (9 ?) support.
Your call,
W.
		</comment>
		<comment id='5' author='WilliamTambellini' date='2020-11-30T17:51:42Z'>
		&lt;denchmark-link:https://github.com/WilliamTambellini&gt;@WilliamTambellini&lt;/denchmark-link&gt;
 I actually think the  approach should work fine — I've just found what I think it is the issue: &lt;denchmark-link:https://github.com/facebookresearch/flashlight/blob/5b0771abdbcf1f39037b3a7d322faebfd4eca43b/cmake/CUDAUtils.cmake#L23&gt;this line&lt;/denchmark-link&gt;
 was never changed! Testing now with a few different versions of CMake.
		</comment>
		<comment id='6' author='WilliamTambellini' date='2020-12-01T06:46:10Z'>
		&lt;denchmark-link:https://github.com/jacobkahn&gt;@jacobkahn&lt;/denchmark-link&gt;
 apparently the issue was not because of 2 std c++ flags but indeed because of 2 conflictual std=c++ (11 and 14) in the same command line. Good to see you ve upgraded cuda compilation to std 14.
Though, master does nt compile anymore for me even with cmake 3.10 :
...
[  6%] Building CUDA object CMakeFiles/fl-libraries.dir/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu.o
/usr/local/cuda/bin/nvcc  -DFL_LIBRARIES_USE_CUDA -DFL_LIBRARIES_USE_KENLM -DKENLM_MAX_ORDER=6 -I/home/wtambellini/repos/flashlight -I/usr/include/openblas -I/home/wtambellini/repos/kenlm -isystem=/usr/include -I/home/wtambellini/repos/flashlight/release/CUB/src/CUB -I/usr/local/cuda/include  -O3 -DNDEBUG   -x cu -c /home/wtambellini/repos/flashlight/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu -o CMakeFiles/fl-libraries.dir/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu.o
/home/wtambellini/repos/flashlight/flashlight/lib/sequence/criterion/Defines.h(14): warning: scoped enumeration types are a C++11 feature
/home/wtambellini/repos/flashlight/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu(24): error: explicit type is missing ("int" assumed)
...
I ve added a message after the set:
set_cuda_cxx_compile_flags()
message(STATUS "CUDA_NVCC_FLAGS=${CUDA_NVCC_FLAGS}")
and I see that
CUDA_NVCC_FLAGS=;-std=c++14
at cmake init, but is probably reset/cleared later on as it does not appear in the final nvcc commandline.
		</comment>
		<comment id='7' author='WilliamTambellini' date='2020-12-01T07:37:15Z'>
		&lt;denchmark-link:https://github.com/jacobkahn&gt;@jacobkahn&lt;/denchmark-link&gt;
  apparently CUDA_NVCC_FLAGS does not seem to do anything anymore even in the FL circle CI jobs:
from
&lt;denchmark-link:https://app.circleci.com/pipelines/github/facebookresearch/flashlight/755/workflows/c784063f-fe74-40f6-a963-273aeab68f41/jobs/1544/steps&gt;https://app.circleci.com/pipelines/github/facebookresearch/flashlight/755/workflows/c784063f-fe74-40f6-a963-273aeab68f41/jobs/1544/steps&lt;/denchmark-link&gt;

see that there is no std c++ flag but (for some reasons) nvcc (10.0 ?) does not complain:
[ 16%] Building CUDA object CMakeFiles/fl-libraries.dir/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu.o
/usr/local/cuda/bin/nvcc  -DFL_LIBRARIES_USE_CUDA -DFL_LIBRARIES_USE_KENLM -DFL_LIBRARIES_USE_MKL -DKENLM_MAX_ORDER=6 -I/flashlight -I/opt/intel/mkl/include -I/root/kenlm -I/flashlight/build/CUB/src/CUB -I/usr/local/cuda/include   -x cu -c /flashlight/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu -o CMakeFiles/fl-libraries.dir/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu.o
[ 16%] Building CUDA object CMakeFiles/fl-libraries.dir/flashlight/lib/sequence/criterion/cuda/ForceAlignmentCriterion.cu.o
/usr/local/cuda/bin/nvcc  -DFL_LIBRARIES_USE_CUDA -DFL_LIBRARIES_USE_KENLM -DFL_LIBRARIES_USE_MKL -DKENLM_MAX_ORDER=6 -I/flashlight -I/opt/intel/mkl/include -I/root/kenlm -I/flashlight/build/CUB/src/CUB -I/usr/local/cuda/include   -x cu -c /flashlight/flashlight/lib/sequence/criterion/cuda/ForceAlignmentCriterion.cu -o CMakeFiles/fl-libraries.dir/flashlight/lib/sequence/criterion/cuda/ForceAlignmentCriterion.cu.o
On my side I cannot downgrade to cuda10.0 so as today I cannot compile FL master without
target_compile_options(fl-libraries PRIVATE $&lt;$&lt;COMPILE_LANGUAGE:CUDA&gt;:--std=c++14&gt;)
Kind
W.
Refs:
&lt;denchmark-link:https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html&gt;https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html&lt;/denchmark-link&gt;

"The default C++ dialect depends on the host compiler. nvcc matches the default C++ dialect that the host compiler uses. "
		</comment>
		<comment id='8' author='WilliamTambellini' date='2020-12-01T16:20:31Z'>
		&lt;denchmark-link:https://github.com/WilliamTambellini&gt;@WilliamTambellini&lt;/denchmark-link&gt;
 aha. That's some good investigation. Let's add that  stuff back and kill everything related to .
Seems like nvcc guesses or infers the C++ std to compile with pretty randomly... not great :). I'll send a fix.
		</comment>
		<comment id='9' author='WilliamTambellini' date='2020-12-01T20:56:16Z'>
		Cool, tks. I guess/hope nvidia has good reasons to rely on the host compiler but for FL/AF, it s indeed safer to hard set the std in the cmake, not randomly relying on the local gcc. CU.
		</comment>
		<comment id='10' author='WilliamTambellini' date='2020-12-01T21:35:18Z'>
		&lt;denchmark-link:https://github.com/WilliamTambellini&gt;@WilliamTambellini&lt;/denchmark-link&gt;
 I have a fix - turns out
&lt;denchmark-code&gt;set(CMAKE_CUDA_STANDARD 14)
set(CMAKE_CUDA_STANDARD_REQUIRED ON)
&lt;/denchmark-code&gt;

Is the right way to go. Tested with a bunch of CMake versions — 3.10, 3.12, 3.19, etc. Will send the commit shortly.
		</comment>
		<comment id='11' author='WilliamTambellini' date='2020-12-02T19:02:48Z'>
		Hi &lt;denchmark-link:https://github.com/jacobkahn&gt;@jacobkahn&lt;/denchmark-link&gt;

I ve just repulled/rebased and it sadly still fails :) because no std cpp in the nvcc line:
&lt;denchmark-code&gt;/usr/local/cuda/bin/nvcc  -DFL_LIBRARIES_USE_CUDA -DFL_LIBRARIES_USE_KENLM -DKENLM_MAX_ORDER=6 -I/home/wtambellini/repos/flashlight -I/usr/include/openblas -I/home/wtambellini/repos/kenlm -I/home/wtambellini/repos/flashlight/release/CUB/src/CUB -I/usr/local/cuda/include  -O3 -DNDEBUG   -x cu -c /home/wtambellini/repos/flashlight/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu -o CMakeFiles/fl-libraries.dir/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu.o
/home/wtambellini/repos/flashlight/flashlight/lib/sequence/criterion/Defines.h(14): warning: scoped enumeration types are a C++11 feature
&lt;/denchmark-code&gt;

But good news, I know why : seen in the cmake doc:
&lt;denchmark-link:https://cmake.org/cmake/help/v3.10/prop_tgt/CUDA_STANDARD.html#prop_tgt:CUDA_STANDARD&gt;https://cmake.org/cmake/help/v3.10/prop_tgt/CUDA_STANDARD.html#prop_tgt:CUDA_STANDARD&lt;/denchmark-link&gt;

set_property(TARGET tgt PROPERTY CUDA_STANDARD 11)
"This property is initialized by the value of the CMAKE_CUDA_STANDARD variable if it is set when a target is created."
In the fl lib CMakeLists, you create the lib
add_library(  fl-libraries
and then later (too late)
set(CMAKE_CUDA_STANDARD 14)
set(CMAKE_CUDA_STANDARD_REQUIRED ON)
I ve set these global vars at the top of the cmake file (before creating the target), and then it does work:
[ 17%] Building CUDA object CMakeFiles/fl-libraries.dir/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu.o
/usr/local/cuda/bin/nvcc  -DFL_LIBRARIES_USE_CUDA -DFL_LIBRARIES_USE_KENLM -DKENLM_MAX_ORDER=6 -I/home/wtambellini/repos/flashlight -I/usr/include/openblas -I/home/wtambellini/repos/kenlm -I/home/wtambellini/repos/flashlight/release/CUB/src/CUB -I/usr/local/cuda/include  -O3 -DNDEBUG   -std=c++14 -x cu -c /home/wtambellini/repos/flashlight/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu -o CMakeFiles/fl-libraries.dir/flashlight/lib/sequence/criterion/cuda/CriterionUtils.cu.o
Conclusion: we just have to move these global var sets earlier. Would you like me to ?
		</comment>
		<comment id='12' author='WilliamTambellini' date='2020-12-03T15:26:09Z'>
		&lt;denchmark-link:https://github.com/WilliamTambellini&gt;@WilliamTambellini&lt;/denchmark-link&gt;
 I have a commit right now doing this. Another good catch though! We should do this before we do we do anything else at the configuration stage of the fl build.
If you want to test the PR, that would be great, but it's equivalent to what you've suggested. We should be good now.
		</comment>
	</comments>
</bug>