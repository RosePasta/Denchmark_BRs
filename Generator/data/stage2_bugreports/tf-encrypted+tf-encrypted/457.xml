<bug id='457' author='avitalsh' open_date='2019-04-27T20:15:11Z' closed_time='2019-05-06T17:02:52Z'>
	<summary>Assign requires shapes of both tensors to match</summary>
	<description>
Hi, I wrote some code that works fine when using local config, but when I run the exact same code using remote config I get the following error -
InvalidArgumentError (see above for traceback): Assign requires shapes of both tensors to match. lhs shape= [128,128] rhs shape= [16,14,14]
[[node private-var_1/Variable/Assign (defined at /cs/labs/peleg/avitalsh/tools/tf-encrypted/tf_encrypted/tensor/native.py:406) ]]
Here is the code causing the error -
`
&lt;denchmark-code&gt;model = tf.keras.Sequential()
model.add(tf.keras.layers.InputLayer(input_shape=(28,28,1)))

model.add(tf.keras.layers.Conv2D(filters=16, kernel_size=(3,3), padding='same'))
model.add(tf.keras.layers.ReLU())
model.add(tf.keras.layers.AveragePooling2D(pool_size=(2,2)))
model.add(tf.keras.layers.Conv2D(filters=16, kernel_size=(5,5), padding='same'))
model.add(tf.keras.layers.ReLU())
model.add(tf.keras.layers.AveragePooling2D(pool_size=(2,2)))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(100))
model.add(tf.keras.layers.ReLU())
model.add(tf.keras.layers.Dense(10))


with tf.Session() as network_sess:
    K.set_session(network_sess)

    model.compile('adam', 'categorical_crossentropy', metrics=['accuracy'])

    s_model = secure_model(model)
    s_model.private_predict(np.zeros((1, 28, 28, 1)))


K.clear_session()
network_sess.close()
&lt;/denchmark-code&gt;

`
Full traceback -
Traceback (most recent call last):
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/client/session.py", line 1334, in _do_call
return fn(*args)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/client/session.py", line 1319, in _run_fn
options, feed_dict, fetch_list, target_list, run_metadata)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/client/session.py", line 1407, in _call_tf_sessionrun
run_metadata)
tensorflow.python.framework.errors_impl.InvalidArgumentError: Assign requires shapes of both tensors to match. lhs shape= [128,128] rhs shape= [16,14,14]
[[{{node private-var_1/Variable/Assign}}]]
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
File "benchmarking.py", line 156, in 
s_model.private_predict(np.zeros((1, 28, 28, 1)))
File "/cs/labs/peleg/avitalsh/tools/tf-encrypted/tf_encrypted/private_model.py", line 20, in private_predict
sess.run(tf.global_variables_initializer())
File "/cs/labs/peleg/avitalsh/tools/tf-encrypted/tf_encrypted/session.py", line 110, in run
feed_dict=feed_dict
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/client/session.py", line 929, in run
run_metadata_ptr)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/client/session.py", line 1152, in _run
feed_dict_tensor, options, run_metadata)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/client/session.py", line 1328, in _do_run
run_metadata)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/client/session.py", line 1348, in _do_call
raise type(e)(node_def, op, message)
tensorflow.python.framework.errors_impl.InvalidArgumentError: Assign requires shapes of both tensors to match. lhs shape= [128,128] rhs shape= [16,14,14]
[[node private-var_1/Variable/Assign (defined at /cs/labs/peleg/avitalsh/tools/tf-encrypted/tf_encrypted/tensor/native.py:406) ]]
Caused by op 'private-var_1/Variable/Assign', defined at:
File "benchmarking.py", line 155, in 
s_model = secure_model(model)
File "/cs/labs/peleg/avitalsh/tools/tf-encrypted/tf_encrypted/private_model.py", line 70, in secure_model
y = c.convert(remove_training_nodes(graph_def), tfe.convert.register(), 'input-provider', inputs)
File "/cs/labs/peleg/avitalsh/tools/tf-encrypted/tf_encrypted/convert/convert.py", line 84, in convert
self.outputs[output] = register[node.op](self, node, inputs)
File "/cs/labs/peleg/avitalsh/tools/tf-encrypted/tf_encrypted/convert/register.py", line 120, in conv2d
layer.initialize(initial_weights=w)
File "/cs/labs/peleg/avitalsh/tools/tf-encrypted/tf_encrypted/layers/convolution.py", line 79, in initialize
self.bias = self.prot.define_private_variable(np.zeros(self.output_shape[1:]))
File "/cs/labs/peleg/avitalsh/tools/tf-encrypted/tf_encrypted/protocol/pond.py", line 330, in define_private_variable
x0 = factory.variable(v0)
File "/cs/labs/peleg/avitalsh/tools/tf-encrypted/tf_encrypted/tensor/native.py", line 47, in variable
return Variable(initial_value.value)
File "/cs/labs/peleg/avitalsh/tools/tf-encrypted/tf_encrypted/tensor/native.py", line 406, in init
self.variable = tf.Variable(initial_value, dtype=FACTORY.native_type, trainable=False)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/ops/variables.py", line 213, in call
return cls._variable_v1_call(*args, **kwargs)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/ops/variables.py", line 176, in _variable_v1_call
aggregation=aggregation)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/ops/variables.py", line 155, in 
previous_getter = lambda **kwargs: default_variable_creator(None, **kwargs)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py", line 2495, in default_variable_creator
expected_shape=expected_shape, import_scope=import_scope)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/ops/variables.py", line 217, in call
return super(VariableMetaclass, cls).call(*args, **kwargs)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/ops/variables.py", line 1395, in init
constraint=constraint)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/ops/variables.py", line 1547, in _init_from_args
validate_shape=validate_shape).op
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/ops/state_ops.py", line 223, in assign
validate_shape=validate_shape)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/ops/gen_state_ops.py", line 64, in assign
use_locking=use_locking, name=name)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py", line 788, in _apply_op_helper
op_def=op_def)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py", line 507, in new_func
return func(*args, **kwargs)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/framework/ops.py", line 3300, in create_op
op_def=op_def)
File "/cs/labs/peleg/avitalsh/virtualenvs/python3-dev-cpu/lib/python3.6/site-packages/tensorflow/python/framework/ops.py", line 1801, in init
self._traceback = tf_stack.extract_stack()
InvalidArgumentError (see above for traceback): Assign requires shapes of both tensors to match. lhs shape= [128,128] rhs shape= [16,14,14]
[[node private-var_1/Variable/Assign (defined at /cs/labs/peleg/avitalsh/tools/tf-encrypted/tf_encrypted/tensor/native.py:406) ]]
	</description>
	<comments>
		<comment id='1' author='avitalsh' date='2019-05-06T15:50:09Z'>
		After discussing the issue with &lt;denchmark-link:https://github.com/mortendahl&gt;@mortendahl&lt;/denchmark-link&gt;
, the problem was found - I was running different models with remoteConfig - without restarting the tf servers between different models. The servers kept state which included the first model, so every other model caused this error.
A solution that worked for me was to reset the session in each server and the default graph before running a new model, for example:
&lt;denchmark-code&gt;tf.Session.reset("grpc://10.0.0.10:4440")
tf.Session.reset("grpc://10.0.0.11:4440")
tf.Session.reset("grpc://10.0.0.12:4440")
tf.Session.reset("grpc://10.0.0.20:4440")
tf.Session.reset("grpc://10.0.0.30:4440")
tf.reset_default_graph()

&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='avitalsh' date='2019-05-06T17:02:38Z'>
		Thank you very much for the feedback &lt;denchmark-link:https://github.com/avitalsh&gt;@avitalsh&lt;/denchmark-link&gt;
!
		</comment>
	</comments>
</bug>