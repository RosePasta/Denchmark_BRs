<bug id='513' author='mortendahl' open_date='2019-05-29T13:39:15Z' closed_time='2019-06-19T14:40:55Z'>
	<summary>Module for secure randomness not loaded when installed from PyPI package</summary>
	<description>
TFE installed via pip will currently not load the secure randomness module. Error seems to come from TensorFlow:
&lt;denchmark-code&gt;&gt;&gt;&gt; secure_random_module = tf.load_op_library(shared_object)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/miniconda3/envs/tfe-release-py35/lib/python3.5/site-packages/tensorflow/python/framework/load_library.py", line 61, in load_op_library
    lib_handle = py_tf.TF_LoadLibrary(library_filename)
tensorflow.python.framework.errors_impl.NotFoundError: dlopen(/usr/local/miniconda3/envs/tfe-release-py35/lib/python3.5/site-packages/tf_encrypted/operations/secure_random/secure_random_module_tf_1.13.1.so, 6): no suitable image found.  Did find:
	/usr/local/miniconda3/envs/tfe-release-py35/lib/python3.5/site-packages/tf_encrypted/operations/secure_random/secure_random_module_tf_1.13.1.so: unknown file type, first eight bytes: 0x7F 0x45 0x4C 0x46 0x02 0x01 0x01 0x00
	/usr/local/miniconda3/envs/tfe-release-py35/lib/python3.5/site-packages/tf_encrypted/operations/secure_random/secure_random_module_tf_1.13.1.so: unknown file type, first eight bytes: 0x7F 0x45 0x4C 0x46 0x02 0x01 0x01 0x00
&lt;/denchmark-code&gt;

Package should come with this for both Python 3.5 and 3.6 and both Linux and macOS.
	</description>
	<comments>
		<comment id='1' author='mortendahl' date='2019-05-29T15:25:01Z'>
		Unable to reproduce on macos with python 3.5 and 3.6, linux with python 3.5 and 3.6. Blocked until we have a way to reproduce this reliably.
		</comment>
		<comment id='2' author='mortendahl' date='2019-05-29T15:29:57Z'>
		Same here, I can't reproduce anymore. Closing down for now. Thanks a lot for looking into it &lt;denchmark-link:https://github.com/justin1121&gt;@justin1121&lt;/denchmark-link&gt;
!
		</comment>
		<comment id='3' author='mortendahl' date='2019-06-03T04:57:31Z'>
		There are reports of PySyft users in the OpenMined Slack experiencing this warning: &lt;denchmark-link:https://openmined.slack.com/archives/C6EEFN3A8/p1559517593068600?thread_ts=1559517593.068600&amp;cid=C6EEFN3A8&gt;https://openmined.slack.com/archives/C6EEFN3A8/p1559517593068600?thread_ts=1559517593.068600&amp;cid=C6EEFN3A8&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='mortendahl' date='2019-06-03T17:07:39Z'>
		Others have had similar issues before &lt;denchmark-link:https://github.com/bbalasub1/glmnet_python/issues/17&gt;bbalasub1/glmnet_python#17&lt;/denchmark-link&gt;
. Even the first eight bytes is the same.
		</comment>
		<comment id='5' author='mortendahl' date='2019-06-03T17:18:53Z'>
		I can reproduce the error message macos if I copy over the .so file from a ubuntu box. Is pip somehow installing the linux shared object on macos?
		</comment>
		<comment id='6' author='mortendahl' date='2019-06-03T17:26:50Z'>
		
I can reproduce the error message macos if I copy over the .so file from a ubuntu box. Is pip somehow installing the linux shared object on macos?

It could be a bug with how we build the shared object - is it possible we're overwriting the .so we're packaging up with pip?
		</comment>
		<comment id='7' author='mortendahl' date='2019-06-03T17:56:53Z'>
		I can reproduce this consistently by installing tf-encrypted version 0.5.2 (pip install tf-encrypted==0.5.2) so this release must be broken. Still stumped on how that version even would get installed for syft users. The version is pinned to tf-encrypted 0.5.4. Perhaps this is happening to users with tf-encrypted already installed and for some reason tf-encrypted 0.5.4 isn't being installed correctly.
		</comment>
		<comment id='8' author='mortendahl' date='2019-06-03T18:17:58Z'>
		Next steps here:


Inform people having problems to make sure they have tfe 0.5.4 installed.


Update release documentation to explicitly mention to make sure the secure randomness module is being loaded once a release candidate has been pushed.


Continue to watch for this problem in future releases, etc. If it's a persistent problem we can't figure out we might have to figure out a different approach to building the shared objects.


		</comment>
		<comment id='9' author='mortendahl' date='2019-06-04T15:25:38Z'>
		&lt;denchmark-link:https://github.com/justin1121&gt;@justin1121&lt;/denchmark-link&gt;
 looks like upgrading to 0.5.4 does not fix the problem in general. here's another report of a PySyft user who is explicitly using tf 1.13.1 and tfe 0.5.4: &lt;denchmark-link:https://openmined.slack.com/archives/C6DEWA4FR/p1559656785003600&gt;https://openmined.slack.com/archives/C6DEWA4FR/p1559656785003600&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='mortendahl' date='2019-06-04T15:34:40Z'>
		Ahh secure randomness is not supported on windows.
		</comment>
		<comment id='11' author='mortendahl' date='2019-06-04T15:48:28Z'>
		Do we even have a pypi package for Windows?
		</comment>
		<comment id='12' author='mortendahl' date='2019-06-04T15:50:35Z'>
		Yeah good point. How did they install tf-encrypted in the first place?!
		</comment>
		<comment id='13' author='mortendahl' date='2019-06-04T19:36:51Z'>
		Looked into how tf-encrypted is getting installed on windows and it looks like it just installs the source tarball if there's no wheel available. I think we should either not upload the tarball or add to the secure randomness warning message that it's not supported on windows.
		</comment>
		<comment id='14' author='mortendahl' date='2019-06-05T10:30:08Z'>
		Let's do the second option, we (or PySyft) might have some users on Windows, and it's better to give them something than nothing.
Do you think I somehow got the linux and macos build crossed when it happened on my macbook?
		</comment>
		<comment id='15' author='mortendahl' date='2019-06-05T10:48:19Z'>
		Yeah not sure what happened there. Maybe had 0.5.2 installed somehow?
		</comment>
		<comment id='16' author='mortendahl' date='2019-06-06T12:34:49Z'>
		&lt;denchmark-link:https://github.com/justin1121&gt;@justin1121&lt;/denchmark-link&gt;
 what do you think about compiling and packaging the custom ops for several versions of TensorFlow? right now you'll only get them if you're on TF 1.13.1 and fall back to insecure randomness for other versions. moving forward we'll have more custom ops, to the point where we might start having strong dependencies on them. from what I understand it could be a simple as updating the build and deploy CI script?
		</comment>
		<comment id='17' author='mortendahl' date='2019-06-06T12:41:39Z'>
		That's what we used to do I think we wanted to force everyone on 1.13.1 to get the faster int64s so we removed it. I think to add new versions to packages all we need to do is add a couple lines here &lt;denchmark-link:https://github.com/tf-encrypted/tf-encrypted/blob/master/Makefile#L310&gt;https://github.com/tf-encrypted/tf-encrypted/blob/master/Makefile#L310&lt;/denchmark-link&gt;
. For 1.14.0rc0:
&lt;denchmark-code&gt;pip install tensorflow==1.14.0rc0
$(MAKE) $(SECURE_OUT_PRE)1.14.0rc0.so
&lt;/denchmark-code&gt;

Something we may want to consider is just building the objects on install although that could severely slower the install time (probably why decided to package them together in the first place).
		</comment>
		<comment id='18' author='mortendahl' date='2019-06-06T12:52:32Z'>
		Excellent, thanks!

Something we may want to consider is just building the objects on install although that could severely slower the install time (probably why decided to package them together in the first place).

Building on install seems less ideal to me, as it would require the user to have a suitable build environment.
Another thing, what do you think about splitting up the make file so it scales better with more custom ops? Ie having makefile in subdirectories etc.
		</comment>
		<comment id='19' author='mortendahl' date='2019-06-06T13:12:17Z'>
		Yeah makes sense to me. Not sure why we put it all in one Makefile. I'd actually suggest using bazel to build the custom ops too. Tensorflow provides some pretty good guides for building custom op with bazel. I think we might be able to just generate python wrappers with bazel as well, not sure how that works.
		</comment>
	</comments>
</bug>