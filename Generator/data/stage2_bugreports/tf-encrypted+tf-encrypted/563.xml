<bug id='563' author='mortendahl' open_date='2019-06-12T10:49:29Z' closed_time='2019-06-19T14:40:55Z'>
	<summary>Better error handling around loading custom ops</summary>
	<description>
Errors occur on Windows when loading custom ops (reported by &lt;denchmark-link:https://github.com/SamratPyaraka&gt;@SamratPyaraka&lt;/denchmark-link&gt;
):

https://openmined.slack.com/archives/C6DEWA4FR/p1559899875021800
https://openmined.slack.com/files/UK23GC3CH/FK536E8LB/image.png

It looks like the official TFE pypi package was installed, yet not sure how this is possible (any thoughts &lt;denchmark-link:https://github.com/justin1121&gt;@justin1121&lt;/denchmark-link&gt;
?).
A simple solution might be to include platform information in the name of the object file, preventing it to be found on eg Windows if built on Unix (see eg &lt;denchmark-link:https://github.com/tf-encrypted/tf-encrypted/blob/master/tf_encrypted/operations/secure_random/secure_random.py#L13&gt;https://github.com/tf-encrypted/tf-encrypted/blob/master/tf_encrypted/operations/secure_random/secure_random.py#L13&lt;/denchmark-link&gt;
)
We should also add better error handling if loading fails, support more exceptions or at least reporting any underlying error, see &lt;denchmark-link:https://github.com/tf-encrypted/tf-encrypted/blob/master/tf_encrypted/operations/secure_random/secure_random.py#L18&gt;https://github.com/tf-encrypted/tf-encrypted/blob/master/tf_encrypted/operations/secure_random/secure_random.py#L18&lt;/denchmark-link&gt;

Related: &lt;denchmark-link:https://github.com/tf-encrypted/tf-encrypted/issues/513&gt;#513&lt;/denchmark-link&gt;

Action items:

 don't ship source package with object files, it will likely fail
 better exception handling around loading

	</description>
	<comments>
		<comment id='1' author='mortendahl' date='2019-06-12T10:52:56Z'>
		Its still just doing a source install and for whatever reason the shared object is being included in the source tarball as well.
		</comment>
		<comment id='2' author='mortendahl' date='2019-06-12T11:03:21Z'>
		
A simple solution might be to include platform information in the name of the object file, preventing it to be found on eg Windows if built on Unix

We can do this via the extension: .so for Unix, .dylib for MacOS and .dll for Windows.
		</comment>
		<comment id='3' author='mortendahl' date='2019-06-12T11:13:32Z'>
		

A simple solution might be to include platform information in the name of the object file, preventing it to be found on eg Windows if built on Unix



We can do this via the extension: .so for Unix, .dylib for MacOS and .dll for Windows.

If it problem is that the source package ships with object files then it might be better simply to strip these. Any logic we'd implement for checking the file extensions would essentially do what pip is already doing for us.
		</comment>
	</comments>
</bug>