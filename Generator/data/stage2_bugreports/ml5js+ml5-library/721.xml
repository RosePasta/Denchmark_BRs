<bug id='721' author='LudwigStumpp' open_date='2019-11-24T12:27:42Z' closed_time='2019-12-15T16:20:44Z'>
	<summary>Regression with ml5.neuralNetwork seems to ignore last data point</summary>
	<description>
Dear ml5 community,
I'm submitting a new issue. Please see the details below.
&lt;denchmark-h:h3&gt;‚Üí Step 1: Describe the issue üìù&lt;/denchmark-h&gt;


Did you find a bug? Want to suggest an idea for feature?


I found a bug where training a neural network to do a simple regression task would always ignore the last data point added to the training data

&lt;denchmark-h:h3&gt;‚Üí Step 2: Screenshots or Relevant Documentation üñº&lt;/denchmark-h&gt;


Here's some helpful screenshots and/or documentation of the new feature
What I did:


train a simple ml5.neuralNetwork with three data points

0.1 / 0.9
0.5 / 0.9
0.8 / 0.1


normalizing the data by calling neuralNetwork.normalizeData();
made sure that all of the data was actually added to the model by looking at the neuralNetwork properties

&lt;denchmark-link:https://user-images.githubusercontent.com/42147848/69494590-dbf38980-0ebd-11ea-957c-8eaea39e1b18.jpg&gt;&lt;/denchmark-link&gt;


watching the training curve after 100 periods leads to conclusion that there is loss close to zero

&lt;denchmark-link:https://user-images.githubusercontent.com/42147848/69494587-d5651200-0ebd-11ea-9f06-3b91614520b9.jpg&gt;&lt;/denchmark-link&gt;


prediction of new input 0.8 leads to output 0.8999999

&lt;denchmark-link:https://user-images.githubusercontent.com/42147848/69494593-de55e380-0ebd-11ea-9292-2e0dc0c498f2.jpg&gt;&lt;/denchmark-link&gt;


this suggests that last data point 0.8 / 0.1 was not used at training

&lt;denchmark-h:h3&gt;‚Üí Step 3: Share an example of the issue ü¶Ñ&lt;/denchmark-h&gt;


Here's some example code or a demonstration of  in https://github.com/ml5js/ml5-examples OR in the https://editor.p5js.org or codepen/jsfiddle/etc...

&lt;denchmark-link:https://codepen.io/Hppy/pen/yLLWOKX&gt;https://codepen.io/Hppy/pen/yLLWOKX&lt;/denchmark-link&gt;

Other relevant information, if applicable
&lt;denchmark-h:h3&gt;‚Üí Describe your setup ü¶Ñ&lt;/denchmark-h&gt;


Here's some helpful information about my setup...


Web browser &amp; version: Firefox 70.0.1 (64-bit)
Operating System: Windows 10 Version 1903 (OS Build) 18362.476
ml5 version you're using: 0.4.3
Any additional notes: -

	</description>
	<comments>
		<comment id='1' author='LudwigStumpp' date='2019-11-24T14:47:03Z'>
		Issue also happening on classification tasks, just built another quick demo to check.
You can also see it on the demo by &lt;denchmark-link:https://github.com/shiffman&gt;@shiffman&lt;/denchmark-link&gt;
 at &lt;denchmark-link:https://editor.p5js.org/full/zwGahux8a&gt;https://editor.p5js.org/full/zwGahux8a&lt;/denchmark-link&gt;
 by adding only two different labelled data points. The second and last one will be ignored:
&lt;denchmark-link:https://user-images.githubusercontent.com/42147848/69496416-57f7cc80-0ed2-11ea-9fe2-d9b65a1f2079.jpg&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='LudwigStumpp' date='2019-11-25T20:21:25Z'>
		Quick update:
Just found this part of code in your library at &lt;denchmark-link:https://github.com/ml5js/ml5-library/blob/development/src/NeuralNetwork/index.js&gt;https://github.com/ml5js/ml5-library/blob/development/src/NeuralNetwork/index.js&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;// train the model
await this.model.fit(xs, ys, {
    shuffle: true,
    batchSize,
    epochs,
    validationSplit: 0.1,
    callbacks: modelFitCallbacks
});
&lt;/denchmark-code&gt;

First I thought, maybe the problem is caused by the validationSplit: 0.1 resulting in some data not being used for training. But then I realized the shuffle: true property, which would lead to random data not being used. Either way I am not sure what a train-validation split of 0.1 looks like when you only have &lt; 10 training data points (10 * 0.1 = 1).
But up until this point, the training data looks fine, I checked the passed params xs and ys and they have all the added data points.
So from my point of view, this might even be an issue with Tensorflow.js since this.model.fit is from their library, right?
Now it might be worth rebuilding the same scenario using Tensorflow.js only. If the same unexpected behavior (at least to me it is) occurs, then this issue is not on your side.
		</comment>
		<comment id='3' author='LudwigStumpp' date='2019-11-25T20:47:30Z'>
		Update:
After testing it locally on my machine and removing the validationSplit: 0.1 property passed at this.model.fit() (see above), the unexpected behavior is no longer happening. ü•≥
I recommend opening this parameter to the user.
You could add the validationSplit property to the options object that needs to be passed when creating a new instance of ml5.neuralNetwork.
This all makes me wondering now, why the shuffle: true - property at model.fit() has no effect. üôÑ
		</comment>
		<comment id='4' author='LudwigStumpp' date='2019-11-25T21:08:58Z'>
		&lt;denchmark-link:https://github.com/LudwigStumpp&gt;@LudwigStumpp&lt;/denchmark-link&gt;
 - Oh wow! Thank you for this investigation. This is really helpful feedback. I will make sure this gets added in the next release. For now let's keep this issue open until this gets integrated. Many many thanks!
		</comment>
		<comment id='5' author='LudwigStumpp' date='2019-11-25T21:10:29Z'>
		Background information:
The reason for this to be important to me is that I was building this quick regression illustrator tool &lt;denchmark-link:https://codepen.io/Hppy/pen/WNNBVwg&gt;https://codepen.io/Hppy/pen/WNNBVwg&lt;/denchmark-link&gt;
 to showcase what over-&amp; and underfitting is.
You can add data points by clicking inside the canvas, enter the desired number of training epochs and start training by hitting the button.
Here I realized the above described behavior that my last data point was never used.
		</comment>
		<comment id='6' author='LudwigStumpp' date='2019-11-25T21:54:31Z'>
		So the experienced behavior makes totally sense:
From Tensorflow.js documentation at &lt;denchmark-link:https://js.tensorflow.org/api/latest/#tf.Sequential.fit&gt;https://js.tensorflow.org/api/latest/#tf.Sequential.fit&lt;/denchmark-link&gt;


validationSplit(number) Float between 0 and 1: fraction of the training data to be used as validation data. The model will set apart this fraction of the training data, will not train on it, and will evaluate the loss and any model metrics on this data at the end of each epoch. The validation data is selected from the last samples in the x and y data provided, before shuffling.

&lt;denchmark-link:https://github.com/joeyklee&gt;@joeyklee&lt;/denchmark-link&gt;
 - Glad to hear that you are planning to give the user the possibility to customize this property!
		</comment>
		<comment id='7' author='LudwigStumpp' date='2019-12-13T00:01:32Z'>
		&lt;denchmark-link:https://github.com/LudwigStumpp&gt;@LudwigStumpp&lt;/denchmark-link&gt;
 - Just circling back around on this issue. The recent updates to the NeuralNetwork class have been merged to ! If you're still working on this project and feel like testing this, it would be great to see if the latest reimplmentation of this feature resolves the above points.
Thanks!
		</comment>
		<comment id='8' author='LudwigStumpp' date='2019-12-14T19:51:06Z'>
		Hi Joey,
thanks for reaching back!
After building it locally using Webpack, I can confirm that after explicitly passing the option validationSplit: 0 as a property of the TRAINING_OPTIONS  passed to the ml5.neuralNetwork.train() - method , the last data point is now being used for training (since there is no more train-val-split).
Thanks a lot for considering my opinion on this. Highly appreciated helping!
		</comment>
		<comment id='9' author='LudwigStumpp' date='2019-12-15T16:19:46Z'>
		&lt;denchmark-link:https://github.com/LudwigStumpp&gt;@LudwigStumpp&lt;/denchmark-link&gt;
 - Super! Thanks so much for looking into this. It's so helpful! I'm glad to hear it is working out and will close this issue now.
		</comment>
		<comment id='10' author='LudwigStumpp' date='2019-12-15T16:20:44Z'>
		&lt;denchmark-link:https://github.com/all-contributors&gt;@all-contributors&lt;/denchmark-link&gt;
 please add &lt;denchmark-link:https://github.com/LudwigStumpp&gt;@LudwigStumpp&lt;/denchmark-link&gt;
 for review bug example
		</comment>
		<comment id='11' author='LudwigStumpp' date='2019-12-15T16:20:54Z'>
		&lt;denchmark-link:https://github.com/joeyklee&gt;@joeyklee&lt;/denchmark-link&gt;

I've put up &lt;denchmark-link:https://github.com/ml5js/ml5-library/pull/758&gt;a pull request&lt;/denchmark-link&gt;
 to add &lt;denchmark-link:https://github.com/LudwigStumpp&gt;@LudwigStumpp&lt;/denchmark-link&gt;
! 
		</comment>
	</comments>
</bug>