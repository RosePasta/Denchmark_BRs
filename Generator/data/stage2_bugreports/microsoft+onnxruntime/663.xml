<bug id='663' author='xkszltl' open_date='2019-03-20T13:43:37Z' closed_time='2019-04-22T07:22:45Z'>
	<summary>Crash at the end of cmake config.</summary>
	<description>
Describe the bug
This is a master-only issue.
Doesn't apply to v0.3.0.

&lt;denchmark-link:https://user-images.githubusercontent.com/5203025/54688639-40627b80-4adb-11e9-9a62-9e53c5cb98e9.png&gt;&lt;/denchmark-link&gt;


&lt;denchmark-link:https://user-images.githubusercontent.com/5203025/54688391-c5996080-4ada-11e9-8c50-332189fd8a6b.png&gt;&lt;/denchmark-link&gt;


&lt;denchmark-link:https://user-images.githubusercontent.com/5203025/54688749-77d12800-4adb-11e9-8b87-e6fc56200a5a.png&gt;&lt;/denchmark-link&gt;

System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): CentOS 7
ONNX Runtime installed from (source or binary): source
ONNX Runtime version: master
Python version: 3.6 from rh-python36
GCC/Compiler version (if compiling from source): gcc 8.2.1 from devtoolset-8

	</description>
	<comments>
		<comment id='1' author='xkszltl' date='2019-03-20T23:20:51Z'>
		We don't support CentOS 7.
And, For every Linux release we support, please use the stock compiler that came along with the OS. I don't think it's a compiler bug, because nobody guarantees GCC 8 can work on CentOS 7.
		</comment>
		<comment id='2' author='xkszltl' date='2019-03-22T10:22:20Z'>
		&lt;denchmark-link:https://github.com/snnn&gt;@snnn&lt;/denchmark-link&gt;
 Are you closing the wrong one?
This is not related to either CentOS or gcc-8.
And it happened somewhere around v0.3.0 and master so it's a regression.
		</comment>
		<comment id='3' author='xkszltl' date='2019-03-22T19:08:11Z'>
		Hi &lt;denchmark-link:https://github.com/pranavsharma&gt;@pranavsharma&lt;/denchmark-link&gt;
 , could you take a look?
		</comment>
		<comment id='4' author='xkszltl' date='2019-03-23T06:55:57Z'>
		Under system information you've mentioned that you ran this on CentOS 7. We don't support CentOS. Let me know if you're observing this issue on Ubuntu 16.04.
		</comment>
		<comment id='5' author='xkszltl' date='2019-03-23T08:29:32Z'>
		&lt;denchmark-link:https://github.com/pranavsharma&gt;@pranavsharma&lt;/denchmark-link&gt;

It doesn't look like a distro issue to me.
And I don't have any Ubuntu handy currently, especially for such an old version.
After debugging for a while we noticed that there's a GPU driver update happened in the background.
This might be the root cause.
		</comment>
		<comment id='6' author='xkszltl' date='2019-03-23T21:31:33Z'>
		Alright, keep us posted if you're still observing the issue after you resolve the drive update.
		</comment>
		<comment id='7' author='xkszltl' date='2019-03-26T05:51:51Z'>
		&lt;denchmark-link:https://github.com/xkszltl&gt;@xkszltl&lt;/denchmark-link&gt;
 is your issue resolved? can this be closed?
		</comment>
		<comment id='8' author='xkszltl' date='2019-03-27T10:33:55Z'>
		Actually the issue is not resolved.
I double checked and it is not related to the driver.
And it only applies to master, v0.3.0 is OK, so yes it's a regression.
After debugging for a while I think I found the bug.
I expect onnxruntime_USE_CUDA=OFF to act as a master switch but it doesn't.
onnxruntime_USE_TENSORRT=ON will still be effective and trigger a CUDA lookup in CMake.
So please consider overwrite TRT option based on CUDA, or use if (onnxruntime_USE_CUDA AND onnxruntime_USE_TENSORRT).
		</comment>
		<comment id='9' author='xkszltl' date='2019-03-27T21:28:30Z'>
		What command are you using to start the build? build.sh will default CUDA to being ON if TensorRT is enabled, as CUDA is a dependency of TensorRT so I'm not sure the issue would come up if that was used.
Explicitly enabling TensorRT and disabling CUDA would suggest some misunderstanding about what TensorRT requires. Maybe at the cmake level we could error out if this error was detected.
I don't think disabling TensorRT if CUDA is disabled is correct as TensorRT was explicitly enabled and as such the user wouldn't expect it to be turned off.
		</comment>
		<comment id='10' author='xkszltl' date='2019-03-27T22:14:25Z'>
		This is a wrong expectation: I expect onnxruntime_USE_CUDA=OFF to act as a master switch.
		</comment>
		<comment id='11' author='xkszltl' date='2019-03-27T22:44:59Z'>
		&lt;denchmark-link:https://github.com/skottmckay&gt;@skottmckay&lt;/denchmark-link&gt;

I'm not using the script but go to cmake directly.
I need to inject a lot of things like fdebug-prefix-map and ccache, using cmake directly is just easier for me.
&lt;denchmark-link:https://github.com/pranavsharma&gt;@pranavsharma&lt;/denchmark-link&gt;

Wrong assertion but reasonable expectation.
It'll be better to make it as a master switch, or throw an error.
In other word, your code should "work" (i.e. reach a well-defined final state, no matter if it's succeed or error) on the entire input space.
		</comment>
		<comment id='12' author='xkszltl' date='2019-04-22T07:22:45Z'>
		Closing this as the cause of the issue has been explained. To reiterate - CUDA and TensorRT are separate execution providers in onnxruntime. If you enable tensorrt, cuda is enabled automatically since it's a dependency of tensorrt. If you enable only cuda, however, tensorrt is not enabled as it's a separate execution provider.
		</comment>
		<comment id='13' author='xkszltl' date='2019-04-22T07:53:06Z'>
		I actually like this explanation, if this is how it works currently in master.
My concern is that CUDA=OFF/TRT=ON was UB when I open this issue.
We should either make it as ON/ON or OFF/OFF, or explicitly throw an error msg.
All 3 options is better than UB.
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


 On Apr 22, 2019, at 00:22, Pranav Sharma ***@***.***&gt; wrote:

 Closed #663 &lt;#663&gt;.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub &lt;#663 (comment)&gt;, or mute the thread &lt;https://github.com/notifications/unsubscribe-auth/ABHWIUJ5PZIM7UPGE4GKQE3PRVRUVANCNFSM4G75KLOQ&gt;.



		</comment>
	</comments>
</bug>