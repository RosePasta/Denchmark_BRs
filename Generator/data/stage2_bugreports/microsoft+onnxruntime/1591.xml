<bug id='1591' author='scnakandala' open_date='2019-08-08T18:16:54Z' closed_time='2019-10-01T19:03:06Z'>
	<summary>ONNXRuntime_GPU illegal memory access error</summary>
	<description>
Describe the bug
When trying to run the ONNX graph attached in [1] on onnxruntime_gpu-0.5.0 the runtime crashes with the following error. But it successfully runs on onnxruntime-0.5.0
&lt;denchmark-link:https://drive.google.com/file/d/1hJG1nwYqcBznG1aCGy6jdmIT6eKNF9sy/view?usp=sharing&gt;[1]&lt;/denchmark-link&gt;

Error:
terminate called after throwing an instance of 'onnxruntime::OnnxRuntimeException' what():  /home/hummingbird/onnxruntime/onnxruntime/core/providers/cuda/cuda_call.cc:97 bool onnxruntime::CudaCall(ERRTYPE, const char*, const char*, ERRTYPE, const char*) [with ERRTYPE = cudaError; bool THRW = true] /home/hummingbird/onnxruntime/onnxruntime/core/providers/cuda/cuda_call.cc:91 bool onnxruntime::CudaCall(ERRTYPE, const char*, const char*, ERRTYPE, const char*) [with ERRTYPE = cudaError; bool THRW = true] CUDA failure 77: an illegal memory access was encountered ; GPU=0 ; hostname=supun-k80 ; expr=cudaEventDestroy(read_event_);
Urgency
None
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04
ONNX Runtime installed from (source or binary): source (0.5.0 tag: 1f8019b)
ONNX Runtime version: 0.5.0
Python version: 3.6.8
Visual Studio version (if applicable):
GCC/Compiler version (if compiling from source): 6.5.0
CUDA/cuDNN version: CUDA 10.0/ cuDNN: 7.4.2
GPU model and memory: K80

To Reproduce
Describe steps/code to reproduce the behavior:
Use the model attached in [1] and run the following code:
import numpy as np
import onnxruntime as rt

sess_opts = rt.SessionOptions()
sess_opts.enable_sequential_execution = True
sess_opts.session_thread_pool_size = 1

sess = rt.InferenceSession("hospital_rf_nn.onnx", sess_options=sess_opts)
input_name1 = sess.get_inputs()[0].name
input_name2 = sess.get_inputs()[1].name

float_inputs = np.random.rand(batch_size, 9).astype('float32')
long_inputs = np.random.rand(batch_size, 15).astype('int64')

inputs = {input_name1: float_inputs, input_name2: long_inputs}

nn_output = sess.run(None, inputs)
Expected behavior
Should successfully run.
Screenshots
If applicable, add screenshots to help explain your problem.
Additional context
Add any other context about the problem here. If the issue is about a particular model, please share the model details as well to facilitate debugging.
	</description>
	<comments>
		<comment id='1' author='scnakandala' date='2019-08-14T21:03:22Z'>
		please try with cudnn 7.3.1
		</comment>
		<comment id='2' author='scnakandala' date='2019-08-14T23:00:12Z'>
		I downloaded the model, seems it's a bug in the code somewhere, still investigating
		</comment>
		<comment id='3' author='scnakandala' date='2019-09-20T17:47:07Z'>
		finally, found that the illegal memory access is in the Slice OP which output to id 53. Still dig more to see what happened. from now on it won't take much time since narrowed down to the right place I think.
		</comment>
		<comment id='4' author='scnakandala' date='2019-09-20T18:19:30Z'>
		It's CUDA Equal OP cause the issue actually.
Will have a PR today.
		</comment>
		<comment id='5' author='scnakandala' date='2019-09-24T05:24:41Z'>
		PR merged, please help verify.
		</comment>
		<comment id='6' author='scnakandala' date='2019-10-01T19:03:05Z'>
		Closing this as the fix PR is merged. Please re-open if you need further help. Thanks.
		</comment>
	</comments>
</bug>