<bug id='3430' author='pranav-prakash' open_date='2020-04-06T09:45:51Z' closed_time='2020-04-10T02:25:12Z'>
	<summary>Segfault when serializing a model that contains value_info for an edge not present in graph</summary>
	<description>
Describe the bug
Consider a model that contains unused value_info entries. When this model is loaded into onnxruntime, the following snippet in graph.cc:2536 will be called
&lt;denchmark-code&gt;    for (auto&amp; graph_value_info : graph_proto_-&gt;value_info()) {
      auto&amp; name = graph_value_info.name();
      const auto* node_arg = GetNodeArg(name);
      value_info_.push_back(node_arg);
    }
&lt;/denchmark-code&gt;

Note that if name is never used, GetNodeArg will return a nullptr which will be pushed into the value_info_ array. Subsequently, if any graph transform modifies the graph such that a GraphProtoSync() is needed (as checked in ToGraphProto()), then we call into ToGraphProtoInternal(ONNX_NAMESPACE::GraphProto&amp; graph_proto). In this method we have
&lt;denchmark-code&gt;  for (const auto* value_info : value_info_) {
    *(graph_proto.mutable_value_info()-&gt;Add()) = value_info-&gt;ToProto();
  }
&lt;/denchmark-code&gt;

where we will attempt to dereference the nullptr we had previously added to the value_info array and crash.
Since value_info for an edge that does not exist can be safely removed, I believe a simple null check before adding should guard against this.
Urgency
P3 severity.
Expected behavior
Extra value_info entries should not crash model serializer.
	</description>
	<comments>
		<comment id='1' author='pranav-prakash' date='2020-04-09T02:58:42Z'>
		&lt;denchmark-link:https://github.com/pranav-prakash&gt;@pranav-prakash&lt;/denchmark-link&gt;
  Looks like a simple enough change. Would you like to contribute?
		</comment>
	</comments>
</bug>