<bug id='851' author='fjfjfan' open_date='2019-04-17T03:23:27Z' closed_time='2019-04-18T23:07:27Z'>
	<summary>bidirectional lstm model with sequence_lens RuntimeError: Unexpected input data type</summary>
	<description>

I want to verify the prediction with ONNX Runtime and onnx-tensorflow.
I used a bidirectional lstm model with 'sequence_lens', 'initial_h', 'initial_c':
&lt;denchmark-link:https://github.com/Microsoft/onnxruntime/files/3087774/test_lstm_bidirectional_c_simple.onnx.zip&gt;test_lstm_bidirectional_c_simple.onnx.zip&lt;/denchmark-link&gt;

But there is an error:
RuntimeError: Method run failed due to: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Unexpected input data type. Actual: (N11onnxruntime11NonOnnxTypeIiEE) , expected: (N11onnxruntime11NonOnnxTypeIfEE)
seems it caused by the type of sequence_lens?
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Mac os 10.14
ONNX Runtime installed from (source or binary):
pip install onnxruntime
ONNX Runtime version:
0.3.0
Python version:
python 3.6

To Reproduce
&lt;denchmark-code&gt;import onnx
import numpy as np
from onnx_tf.backend import run_node

input = np.array([[[1., 2., 3., 4.], [5., 6., 7., 8.]]]).astype(np.float32)

input_size = 4
hidden_size = 3
weight_scale = 0.1
number_of_gates = 4
number_of_peepholes = 3

# Initializing Inputs
X = input
W = weight_scale * np.ones((2, number_of_gates * hidden_size, input_size)).astype(np.float32)
R = weight_scale * np.ones((2, number_of_gates * hidden_size, hidden_size)).astype(np.float32)
B = np.zeros((2, 2 * number_of_gates * hidden_size)).astype(np.float32)
sequence_lens = np.repeat(input.shape[0], input.shape[1]).astype(np.int32)
initial_h = weight_scale * np.zeros((2, input.shape[1], hidden_size)).astype(np.float32)
initial_c = weight_scale * np.ones(
    (2, input.shape[1], hidden_size)).astype(np.float32)

node = onnx.helper.make_node(
    'LSTM',
    inputs=['X', 'W', 'R', 'B', 'sequence_lens', 'initial_h', 'initial_c'],
    outputs=['Y', 'Y_h', 'Y_c'],
    activations=['Sigmoid', 'Tanh', 'Tanh', 'Sigmoid', 'Tanh', 'Tanh'],
    direction='bidirectional',
    hidden_size=hidden_size)

outputs = run_node(node, [X, W, R, B, sequence_lens, initial_h, initial_c])
Y = outputs["Y"]
Y_h_1 = outputs["Y_h"]
Y_c = outputs["Y_c"]


# Compute the prediction with ONNX Runtime
import onnxruntime as rt
import numpy
sess = rt.InferenceSession("test_lstm_bidirectional_c_simple.onnx")
input_name_X = sess.get_inputs()[0].name
input_name_W = sess.get_inputs()[1].name
input_name_R = sess.get_inputs()[2].name
input_name_B = sess.get_inputs()[3].name
input_name_S = sess.get_inputs()[4].name
input_name_H = sess.get_inputs()[5].name
input_name_C = sess.get_inputs()[6].name

label_name_Y = sess.get_outputs()[0].name
label_name_Y_h = sess.get_outputs()[1].name
label_name_Y_c = sess.get_outputs()[2].name

pred_onx = sess.run([label_name_Y, label_name_Y_h, label_name_Y_c], {input_name_X: X,
input_name_W : W,
input_name_R : R,
input_name_B : B,
input_name_S : sequence_lens,
input_name_H :initial_h,
input_name_C :initial_c})
&lt;/denchmark-code&gt;

Expected behavior
A clear and concise description of what you expected to happen.
Screenshots
If applicable, add screenshots to help explain your problem.
Additional context
Add any other context about the problem here.
	</description>
	<comments>
		<comment id='1' author='fjfjfan' date='2019-04-17T17:04:10Z'>
		You feed in wrong input type. Please verify if your input tensor's element type matches the model's requirement.
		</comment>
		<comment id='2' author='fjfjfan' date='2019-04-18T02:47:56Z'>
		&lt;denchmark-link:https://github.com/snnn&gt;@snnn&lt;/denchmark-link&gt;
 Thanks for your comments. Yes, from the error msg we could get that info. But if you modified to

The error will be:

Also from &lt;denchmark-link:https://github.com/onnx/onnx/blob/master/docs/Operators.md#LSTM&gt;https://github.com/onnx/onnx/blob/master/docs/Operators.md#LSTM&lt;/denchmark-link&gt;
, the type of sequence_lens should be T1 : tensor(int32)
The definition in the model and the data feed to the model in my code are np.int32, which is match the ONNX specification.
Thanks!
		</comment>
		<comment id='3' author='fjfjfan' date='2019-04-18T07:33:38Z'>
		&lt;denchmark-link:https://github.com/fjfjfan&gt;@fjfjfan&lt;/denchmark-link&gt;
 I ran your script. You're not labeling the inputs correctly. Here're the labels you assume
X type:  tensor(float)
W type:  tensor(float)
R type:  tensor(float)
B type:  tensor(float)
S type:  tensor(float)
H type:  tensor(float)
C type:  tensor(int32) &lt;---- you assume this is C, when it should be sequence_lens
Here are the actual lables that are obtained from the session
B  type:  tensor(float)
R  type:  tensor(float)
W  type:  tensor(float)
X  type:  tensor(float)
initial_c  type:  tensor(float)
initial_h  type:  tensor(float)
sequence_lens  type:  tensor(int32)
Let me know if this doesn't fix the issue.
		</comment>
		<comment id='4' author='fjfjfan' date='2019-04-18T07:34:29Z'>
		This is the modification I did to your script

input_name_X = sess.get_inputs()[0].name
print(input_name_X, " type: ", sess.get_inputs()[0].type)
input_name_W = sess.get_inputs()[1].name
print(input_name_W, " type: ", sess.get_inputs()[1].type)
input_name_R = sess.get_inputs()[2].name
print(input_name_R, " type: ", sess.get_inputs()[2].type)
input_name_B = sess.get_inputs()[3].name
print(input_name_B, " type: ", sess.get_inputs()[3].type)
input_name_S = sess.get_inputs()[4].name
print(input_name_S, " type: ", sess.get_inputs()[4].type)
input_name_H = sess.get_inputs()[5].name
print(input_name_H, " type: ", sess.get_inputs()[5].type)
input_name_C = sess.get_inputs()[6].name
print(input_name_C, " type: ", sess.get_inputs()[6].type)

		</comment>
		<comment id='5' author='fjfjfan' date='2019-04-18T08:24:19Z'>
		&lt;denchmark-link:https://github.com/pranavsharma&gt;@pranavsharma&lt;/denchmark-link&gt;
 Thanks for your prompt response, that works for me, just one more question: where to get those info? since it has different input/out sequence of params from onnx or onnx-tf. Thanks a lot!
		</comment>
		<comment id='6' author='fjfjfan' date='2019-04-18T23:07:27Z'>
		Use sess.get_inputs()[0].name and sess.get_inputs()[0].type to get this info. Closing this now since your issue is resolved.
		</comment>
	</comments>
</bug>