<bug id='1770' author='brantPTS' open_date='2019-09-06T16:35:57Z' closed_time='2019-09-12T00:06:44Z'>
	<summary>C# Inference fails with YOLOv3 model</summary>
	<description>
Describe the bug
Inference fails in C# .NET console application with YOLOv3 model.
Urgency
Cannot use ONNX runtime without this fixed
System information
Windows 10 Pro

ONNX Runtime 0.5 installed from NuGet
Visual Studio 2019

To Reproduce
Create folder: C:\Temp\OnnxTest
Create Visual Studio 2019 .NET Console application:
&lt;denchmark-link:https://user-images.githubusercontent.com/34780180/64444177-629b8600-d088-11e9-854b-8c8bbbc674ac.png&gt;&lt;/denchmark-link&gt;

Add NuGet reference to ONNX runtime (cuda)
&lt;denchmark-link:https://user-images.githubusercontent.com/34780180/64444198-70510b80-d088-11e9-91bf-8cdd1523ee9b.png&gt;&lt;/denchmark-link&gt;

Copy contents of example c# inference from ONNX source on GitHub:
onnxruntime\csharp\sample\Microsoft.ML.OnnxRuntime.InferenceSample\Program.cs
into:
C:\Temp\OnnxTest\OnnxTest\OnnxTestConsole\Program.cs
Fix compile errors as follows:
Change:
using Microsoft.ML.OnnxRuntime.Tensors; To:
using System.Numerics.Tensors; 
Change :
options.GraphOptimizationLevel = GraphOptimizationLevel.ORT_ENABLE_EXTENDED; To:
options.SetSessionGraphOptimizationLevel(0);  
Copy model and data to these paths
C:\Temp\OnnxTest\bench.in
C:\Temp\OnnxTest\squeezenet.onnx
Update paths in program.cs:
…
…

Change platform to x64 in project properties/Build
&lt;denchmark-link:https://user-images.githubusercontent.com/34780180/64444119-4697e480-d088-11e9-96de-04545ba7dd14.png&gt;&lt;/denchmark-link&gt;

Run program, it should succeed
Now copy Yolo3 onnx model from here: &lt;denchmark-link:https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/yolov3&gt;https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/yolov3&lt;/denchmark-link&gt;

to here:
C:\Temp\OnnxTest\yolov3.onnx
And update model path
string modelPath = @"C:\Temp\OnnxTest\yolov3.onnx"; 
It will fail:
&lt;denchmark-link:https://user-images.githubusercontent.com/34780180/64444035-1e0fea80-d088-11e9-9541-2b1340fbc215.png&gt;&lt;/denchmark-link&gt;

It is difficult to guess what sort of input tensors should be fed into network since the dimensions contain negative numbers:
&lt;denchmark-link:https://user-images.githubusercontent.com/34780180/64444071-2ec06080-d088-11e9-8a64-ebd5e58d545a.png&gt;&lt;/denchmark-link&gt;

A best guess at input tensors is as follows:
`
int[] dims = new[] {1, 3, 224, 224};
var tensor = new DenseTensor(inputData, dims);
container.Add(NamedOnnxValue.CreateFromTensor("input_1", tensor));
int[] imageDimInputDims = new[] { 1, 2 };
float[] imageDimValues = new[] { 224F, 224F };
var tensorImageDims = new DenseTensor(imageDimValues, imageDimInputDims);
container.Add(NamedOnnxValue.CreateFromTensor("image_shape", tensorImageDims));
`
Will result in error:
&lt;denchmark-link:https://user-images.githubusercontent.com/34780180/64444382-e05f9180-d088-11e9-9b9d-540cea63c63f.png&gt;&lt;/denchmark-link&gt;

Please advise on how to run an inference with this model.  A bonus would be a C# example on how to run an inference with this model as well:
&lt;denchmark-link:https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/faster-rcnn&gt;https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/faster-rcnn&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='brantPTS' date='2019-09-06T17:58:31Z'>
		&lt;denchmark-link:https://github.com/shahasad&gt;@shahasad&lt;/denchmark-link&gt;
 can you take a look? thanks!
		</comment>
		<comment id='2' author='brantPTS' date='2019-09-11T20:01:44Z'>
		&lt;denchmark-link:https://github.com/brantPTS&gt;@brantPTS&lt;/denchmark-link&gt;
 , this error is due to a shape inference bug in OnnxRuntime version 0.5. I was able to reproduce the error as well.
&lt;denchmark-link:https://user-images.githubusercontent.com/13698702/64729848-df689e80-d492-11e9-87a3-f7a95821cf64.png&gt;&lt;/denchmark-link&gt;

The fix is already checked into the master branch, and the Yolov3 model  runs successfully for me using the  snippet below.
You can build the DLLs from source to get the fix. If you need a NuGet package, you should be able to create one using the same file layout as in version 0.5, but using the bits from your local build.
&lt;denchmark-link:https://github.com/microsoft/onnxruntime/blob/master/csharp/test/Microsoft.ML.OnnxRuntime.Tests/InferenceTest.cs&gt;InferenceTest.cs&lt;/denchmark-link&gt;

        [Fact]
        private void mytest()
        {
            var modelsDir = @"D:\modelsyolov3";
            var modelRoot = new DirectoryInfo(Path.Combine(modelsDir));
            foreach (var modelDir in modelRoot.EnumerateDirectories())
            {
                var onnxModelNames = modelDir.GetFiles("*.onnx");
                var onnxModelFileName = Path.Combine(modelsDir, modelDir.Name, onnxModelNames[0].Name);
                using (var session = new InferenceSession(onnxModelFileName))
                {
                    var testRoot = new DirectoryInfo(Path.Combine(modelsDir, modelDir.Name));
                    var testData = testRoot.EnumerateDirectories("test_data*").First();

                    ///// Load test data
                    var dataIn = LoadTensorFromFilePb(Path.Combine(modelsDir, modelDir.Name, testData.ToString(), "input_0.pb"));

                    ///// Create Inputs
                    var nov = new List&lt;NamedOnnxValue&gt;();
                    nov.Add(
                        NamedOnnxValue.CreateFromTensor&lt;float&gt;
                        ("input_1", new DenseTensor&lt;float&gt;(dataIn, new int[] { 1, 3, 416, 416 })));
                    nov.Add(
                        NamedOnnxValue.CreateFromTensor&lt;float&gt;
                        ("image_shape", new DenseTensor&lt;float&gt;(new float[] { 416, 416 }, new int[] { 1, 2 })));

                    ///// Run Session
                    using (var resnov = session.Run(nov))
                    {
                        var res = resnov.ToArray()[0].AsTensor&lt;float&gt;().ToArray&lt;float&gt;();
                    }
                }
            } //model
        }
		</comment>
		<comment id='3' author='brantPTS' date='2019-09-11T23:26:17Z'>
		&lt;denchmark-link:https://github.com/jignparm&gt;@jignparm&lt;/denchmark-link&gt;
, that is great news - thank you for the prompt fix. I will try to build from source and test.  Any idea when a 0.6 release may be published on NuGet?
Thanks,
Brant
		</comment>
		<comment id='4' author='brantPTS' date='2019-09-12T00:06:44Z'>
		The next release will be end of Oct.
		</comment>
		<comment id='5' author='brantPTS' date='2019-10-28T15:29:31Z'>
		Any updates on when we can expect a release which includes the fix to this issue?
		</comment>
		<comment id='6' author='brantPTS' date='2019-10-28T22:25:49Z'>
		The release branch of v1.0 is cut. The NuGet packages will be available within a few days.
&lt;denchmark-link:https://github.com/microsoft/onnxruntime/tree/rel-1.0.0&gt;https://github.com/microsoft/onnxruntime/tree/rel-1.0.0&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='brantPTS' date='2020-03-04T06:14:50Z'>
		Hi Mrs &lt;denchmark-link:https://github.com/jignparm&gt;@jignparm&lt;/denchmark-link&gt;

I'm importing yolov3 to onnx by CPP.
the dimensions is above post.
input_1 : (1, 3, 416, 416)
image_shape: (1, 2, 416, 416)
but it report the error as below:

Got invalid dimensions for input: input_1 for the following indices
index: 1 Got: 2 Expected: 3
Please fix either the inputs or the model.

so I fixed it with 2 ways as below, then it have no error as above:
1/
input_1 : (1, 3, 416, 416)
image_shape: (1, 3, 416, 416)
2/
input_1 : (1, 2, 416, 416)
image_shape: (1, 3, 416, 416)
so which way is correct.
Please let me know.
Thanks
		</comment>
		<comment id='8' author='brantPTS' date='2020-03-05T23:54:54Z'>
		
so which way is correct.

It should be  "input_1 =  image_shape: =(1, 3, 416, 416)".  If you copy-paste the code snippet above, it should work.
		</comment>
		<comment id='9' author='brantPTS' date='2020-03-06T01:46:38Z'>
		Dear &lt;denchmark-link:https://github.com/jignparm&gt;@jignparm&lt;/denchmark-link&gt;

Thanks for your reply.

If you copy-paste the code snippet above, it should work.

But I'm writing CPP code (not C#), so cannot copy that.
Could you help me to share a code snippet of CPP?
1/ I'm not really understand the preprocessing step of yolov3, So could you explain more about it.
As I understanding, this step will resize the freestyle image to 416x416, If I cannot find function to resize the image in CPP, could I fix the image input to 416x416 and skip the preprocessing step?
2/ the Yolov3 process 1 image only, so why it have 2 input
Thanks
		</comment>
	</comments>
</bug>