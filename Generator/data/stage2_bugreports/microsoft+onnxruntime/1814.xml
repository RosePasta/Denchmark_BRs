<bug id='1814' author='fdwr' open_date='2019-09-11T21:56:25Z' closed_time='2019-09-17T04:51:27Z'>
	<summary>HardMax/LpNormalization fail with negative axis</summary>
	<description>
Describe the bug
HardMax fails with negative axis. It should call HandleNegativeAxis to resolve the value into an absolute positive axis.
HRESULT=0x80004005 message=Exception during initialization: S:\WindowsAI\engine\lotus\onnxruntime\core/providers/cpu/math/hardmax.h:24 onnxruntime::Hardmax&lt;float&gt;::Hardmax axis_ &gt;= 0 was false. Invalid axis provided.



onnxruntime/onnxruntime/core/providers/cpu/math/hardmax.h


         Line 24
      in
      d9fa632






 ORT_ENFORCE(axis_ &gt;= 0, "Invalid axis provided."); 





From ONNX spec: "Accepted range in [-r, r-1] where r = rank(input)."
&lt;denchmark-link:https://github.com/onnx/onnx/blob/master/docs/Operators.md#Hardmax&gt;https://github.com/onnx/onnx/blob/master/docs/Operators.md#Hardmax&lt;/denchmark-link&gt;

Urgency
Preferably before Vibranium release.
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 2019-09-09
ONNX Runtime installed from (source or binary): source
ONNX Runtime version: 0.5
Python version: NA
Visual Studio version (if applicable): 2017 15.8.5
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version: NA
GPU model and memory: NA

To Reproduce
Pass negative axis value. e.g.
&lt;denchmark-code&gt;// 2D array, axis 0 via negative axis.
{
  "op_type": "Hardmax",
  "axis": -2,
  "input":  [[0, 1, 2, -2, 2],
             [0, 1, 2, -1, 3],
             [0, 0, 3,  0, 0]],
  "output": [[0, 0, 0, 0, 0],
             [0, 0, 0, 0, 1],
             [0, 0, 0, 0, 0]],
  "T": "float32"
},
&lt;/denchmark-code&gt;

Expected behavior
HardMax should call HandleNegativeAxis to resolve the value into an absolute positive axis. Note GPU operator passes this.
👍 ArgMax
👍 ArgMin
👍 Concat
👍 Flatten
👍 Gather
✖ Hardmax
👍 LogSoftmax
✖ LpNormalization
👍 OneHot
👍 ReduceL1
👍 ReduceL2
👍 ReduceLogSum
👍 ReduceLogSumExp
👍 ReduceMax
👍 ReduceMean
👍 ReduceMin
👍 ReduceProd
👍 ReduceSum
👍 ReduceSumSquare
👍 Scatter
👍 Slice
👍 Softmax
👍 Split
👍 TopK
Additional context
Found while testing WinML ONNX conformance GPU vs CPU.
	</description>
	<comments>
		<comment id='1' author='fdwr' date='2019-09-11T22:06:27Z'>
		Hi &lt;denchmark-link:https://github.com/fdwr&gt;@fdwr&lt;/denchmark-link&gt;
,
Actually the opset-10 HardMax spec is unclear - &lt;denchmark-link:https://github.com/onnx/onnx/blob/rel-1.5.0/docs/Operators.md#Hardmax&gt;https://github.com/onnx/onnx/blob/rel-1.5.0/docs/Operators.md#Hardmax&lt;/denchmark-link&gt;
.  The line you are referring to is from current master which means opset-11 HardMax needs to support it.
Having said that, it does seem reasonable to support negative axis for HardMax-10 as well.
		</comment>
		<comment id='2' author='fdwr' date='2019-09-11T22:14:31Z'>
		&lt;denchmark-link:https://github.com/hariharans29&gt;@hariharans29&lt;/denchmark-link&gt;
 : True, that clarification was added recently. Though it's always been assumed, even when unstated, that operators with an  attribute should resolve negative values (and for consistency, Softmax works in ORT, so HardMax would be expected to for consistency).
I tested the following for negative axes and found HardMax was the only one missing the check: ArgMin, ArgMax, Concat, Gather, Hardmax, LogSoftmax, ReduceL1, ReduceL2, ReduceLogSum, ReduceLogSumExp, ReduceMax, ReduceMean, ReduceMin, ReduceProd, ReduceSum, ReduceSumSquare, Scatter, Slice, Softmax, Split, TopK
		</comment>
		<comment id='3' author='fdwr' date='2019-09-11T22:18:59Z'>
		&lt;denchmark-link:https://github.com/fdwr&gt;@fdwr&lt;/denchmark-link&gt;
 - makes sense to add it then :). Will do it.
		</comment>
		<comment id='4' author='fdwr' date='2019-09-12T00:04:28Z'>
		&lt;denchmark-link:https://github.com/hariharans29&gt;@hariharans29&lt;/denchmark-link&gt;
 : Found one more (after double checking and sweeping through all of Operators.md for anything with an  attribute) after adding LpNormalization, OneHot, Flatten.
LpNormalization accepts -1 but rejects -2.



onnxruntime/onnxruntime/core/providers/cpu/nn/lp_norm.cc


         Line 58
      in
      2b8677b






 const auto canonical_axis = axis_ != -1 ? axis_ : (input_shape.NumDimensions() - 1); 





		</comment>
		<comment id='5' author='fdwr' date='2019-09-17T04:51:27Z'>
		Fixed via &lt;denchmark-link:https://github.com/microsoft/onnxruntime/pull/1835&gt;#1835&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>