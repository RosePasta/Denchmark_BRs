<bug id='4559' author='dashesy' open_date='2020-07-20T21:34:54Z' closed_time='2020-07-22T00:57:48Z'>
	<summary>Segmentation fault with zero-dim tensor</summary>
	<description>

This is very much related to issue &lt;denchmark-link:https://github.com/microsoft/onnxruntime/issues/1879&gt;#1879&lt;/denchmark-link&gt;
 which was fixed for the ops we used before.
Urgency
Found a workaround to avoid the faulty ops (code is attached later)
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04
ONNX Runtime installed from (source or binary): pip
ONNX Runtime version: pip 1.4.0 (same crash on 1.2.0)
Python version: 3.6.9
Visual Studio version (if applicable):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

To Reproduce

Describe steps/code to reproduce the behavior.

import onnxruntime as rt
import torch
from torch import nn

class CrashRepro(nn.Module):
    def __init__(self):
        super(CrashRepro, self).__init__()
        self.img_embedding = nn.Linear(1030, 768, bias=True)
        
    def forward(self, img_feats):    
        return self.img_embedding(img_feats)

model = CrashRepro()
img_feats = torch.ones(1, 19, 1030)

dynamic_axes = {
    'img_feats': {1: 'box_spatial'},
}
onnxfile = "/mnt/output/gr/cap/crash.onnx"
targets = ["result"]
torch.onnx.export(model, img_feats, onnxfile,
                  verbose=True,
                  input_names=[
                      'img_feats'
                  ],
                  dynamic_axes=dynamic_axes,
                  output_names=targets,
                  opset_version=11)

# works
sess = rt.InferenceSession(onnxfile)
results = sess.run(targets, {
    'img_feats': img_feats.numpy()
})

# crashes
img_feats = torch.ones(1, 0, 1030)
results = sess.run(targets, {
    'img_feats': img_feats.numpy()
})

Attach the ONNX model to the issue (where applicable) to expedite investigation.

&lt;denchmark-link:https://user-images.githubusercontent.com/873905/87988412-205b1780-ca95-11ea-9571-a105cbde32d8.png&gt;&lt;/denchmark-link&gt;

Expected behavior
No segmentation fault

MatMulis causing crash:
&lt;denchmark-link:https://user-images.githubusercontent.com/873905/87988412-205b1780-ca95-11ea-9571-a105cbde32d8.png&gt;&lt;/denchmark-link&gt;

Additional context
This is the workaround:
class CrashRepro(nn.Module):
    def __init__(self):
        super(CrashRepro, self).__init__()
        self.img_embedding = nn.Linear(1030, 768, bias=True)
        
    def forward(self, img_feats):    
        return self.img_embedding(img_feats.squeeze(0)).unsqueeze(0)
which exports a different ops (not sure why!) but this ops does not crash with empty tensor.
&lt;denchmark-link:https://user-images.githubusercontent.com/873905/87988588-716b0b80-ca95-11ea-96dd-1b413b2f02d1.png&gt;&lt;/denchmark-link&gt;

Changing the size exporting a different model is another issue but I guess I have to open that in PyTorch ONNX Export being flimsy.
	</description>
	<comments>
		<comment id='1' author='dashesy' date='2020-07-21T00:07:36Z'>
		So by looking at img_feats = torch.ones(1, 0, 1030) - I am guessing the dim value of box_spatial is 0 for the case where it segfaults ?
Probably, Gemm handles the corner case and MatMul doesn't. I ll take a look.
		</comment>
		<comment id='2' author='dashesy' date='2020-07-21T00:37:15Z'>
		Either that, or my guess is that empty tensor is only handled if the first dimension is zero (batch).
		</comment>
	</comments>
</bug>