<bug id='4369' author='amirebrahimi' open_date='2020-06-29T22:34:47Z' closed_time='2020-08-25T18:00:34Z'>
	<summary>ArgumentException: Dimensions must contain elements</summary>
	<description>
Describe the bug
While debugging a network and splitting it into separate parts I reduced one part down to simply returning the first dimension of the shape. This exception occurs while running the model using the C# InferenceSample project. Exception occurs in Tensor.cs:309.
Urgency
None
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 Build 18363
ONNX Runtime installed from (source or binary): source
ONNX Runtime version: b41fcf1
Python version: N/A
Visual Studio version (if applicable): 2019
GCC/Compiler version (if compiling from source): cl.exe 19.26.28806 for x64
CUDA/cuDNN version: N/A
GPU model and memory: N/A

To Reproduce

Use the Microsoft.ML.OnnxRuntime.InferenceSample project
Modify the sample to use the attached .onnx file (see below) and skip using the inputData from "bench.in" (i.e. initialize the input tensors without inputData)
Run and notice the exception that occurs.

Expected behavior
Since the output is a scalar I'd still expect the dimensions to correctly show as 1.

&lt;denchmark-link:https://user-images.githubusercontent.com/904110/86062617-feceb900-ba1d-11ea-967b-079f3e2db665.png&gt;&lt;/denchmark-link&gt;


&lt;denchmark-link:https://github.com/microsoft/onnxruntime/files/4848364/siamese_test_opt.zip&gt;siamese_test_opt.zip&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='amirebrahimi' date='2020-06-29T23:58:39Z'>
		Thanks for reporting. Yes, the C# API's Tensor class doesn't like scalars (tensors with zero dimensions) . Will fix it. If you have a fix, contributions are welcome. :)
		</comment>
		<comment id='2' author='amirebrahimi' date='2020-06-30T19:04:48Z'>
		I tried some things at the C level like using Size() instead of size(), but that broke tests, so I reverted them. Do you foresee this being a change that is needed only on the C# side?
		</comment>
		<comment id='3' author='amirebrahimi' date='2020-06-30T19:11:55Z'>
		Yes, the native layer should handle scalars correctly. The change will be only in c#. Most likely, will be along the lines of modifying the if check that is throwing (and a few other places perhaps) and adding a test. I can make the change if it is too time consuming for you.
		</comment>
		<comment id='4' author='amirebrahimi' date='2020-07-01T02:23:18Z'>
		I added support as you suggested and added a single test for the use-case I encountered. You're welcome to add additional tests if it needs more coverage.
		</comment>
		<comment id='5' author='amirebrahimi' date='2020-07-01T07:45:40Z'>
		Thanks for the contribution., but are you rebased with current master ? It seems like there are changes in 75 files in the PR.
		</comment>
		<comment id='6' author='amirebrahimi' date='2020-07-01T15:43:34Z'>
		Looks like I started off of the last tagged release version. I'll merge latest master.
		</comment>
		<comment id='7' author='amirebrahimi' date='2020-07-01T16:08:32Z'>
		Not sure what happened with branches on that one, so I just started fresh off of master.
		</comment>
	</comments>
</bug>