<bug id='648' author='dendisuhubdy' open_date='2019-03-18T12:04:20Z' closed_time='2019-03-29T07:21:12Z'>
	<summary>error: no matching function for call to 'OrtCreateSession'</summary>
	<description>
Describe the bug
error: no matching function for call to 'OrtCreateSession'
System information

OS Platform and Distribution (e.g., MacOS X 10.14 Mojave):
ONNX Runtime installed from (source or binary): from source
ONNX Runtime version: 1.3.0
Python version: 3.7
GCC/Compiler version (if compiling from source): AppleClang

&lt;denchmark-code&gt;Apple LLVM version 10.0.0 (clang-1000.11.45.5)
Target: x86_64-apple-darwin18.5.0
Thread model: posix
InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
&lt;/denchmark-code&gt;


CUDA/cuDNN version: None
GPU model and memory: None

To Reproduce
Describe steps/code to reproduce the behavior:
Try compiling the C API sample
&lt;denchmark-code&gt;**Error Message**
Scanning dependencies of target inference
[ 50%] Building CXX object CMakeFiles/inference.dir/src/lambda_server.cc.o
/Users/grokmachine/research/src/lambda_server.cc:57:16: error: no matching function for call to 'OrtCreateSession'
  CHECK_STATUS(OrtCreateSession(env, model_path, session_option, &amp;session));
               ^~~~~~~~~~~~~~~~
/Users/grokmachine/research/src/lambda_server.cc:19:31: note: expanded from macro 'CHECK_STATUS'
    OrtStatus* onnx_status = (expr);                     \
                              ^~~~
/usr/local/include/onnxruntime_c_api.h:189:16: note: candidate function not viable: no known conversion from 'const wchar_t *' to 'const char *' for 2nd argument
ORT_API_STATUS(OrtCreateSession, _In_ OrtEnv* env, _In_ const ORTCHAR_T* model_path,
               ^
/usr/local/include/onnxruntime_c_api.h:130:38: note: expanded from macro 'ORT_API_STATUS'
  ORT_EXPORT OrtStatus* ORT_API_CALL NAME(__VA_ARGS__) NO_EXCEPTION ORT_MUST_USE_RESULT
                                     ^
/Users/grokmachine/research/src/lambda_server.cc:64:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  OrtCreateDefaultAllocator(&amp;allocator);
  ^~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~
/Users/grokmachine/research/src/lambda_server.cc:144:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  OrtGetTensorMutableData(output_tensor, (void**)&amp;floatarr);
  ^~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/grokmachine/research/src/lambda_server.cc:39:14: warning: unused parameter 'argc' [-Wunused-parameter]
int main(int argc, char* argv[]) {
             ^
/Users/grokmachine/research/src/lambda_server.cc:39:26: warning: unused parameter 'argv' [-Wunused-parameter]
int main(int argc, char* argv[]) {
                         ^
/Users/grokmachine/research/src/lambda_server.cc:75:21: warning: comparison of integers of different signs: 'int' and 'size_t' (aka 'unsigned long') [-Wsign-compare]
  for (int i = 0; i &lt; num_input_nodes; i++) {
                  ~ ^ ~~~~~~~~~~~~~~~
/Users/grokmachine/research/src/lambda_server.cc:94:23: warning: comparison of integers of different signs: 'int' and 'size_t' (aka 'unsigned long') [-Wsign-compare]
    for (int j = 0; j &lt; num_dims; j++)
                    ~ ^ ~~~~~~~~
6 warnings and 1 error generated.
make[2]: *** [CMakeFiles/inference.dir/src/lambda_server.cc.o] Error 1
make[1]: *** [CMakeFiles/inference.dir/all] Error 2
make: *** [all] Error 2
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='dendisuhubdy' date='2019-03-18T12:31:33Z'>
		Hmmmn weird when I changed OrtCreateSession to :: OrtCreateSession the error disappeared.
		</comment>
		<comment id='2' author='dendisuhubdy' date='2019-03-18T18:39:10Z'>
		ORTCHAR_T should be 'char' type on your platform. I'm wondering how 'wchar_t' came up. It looks like something wrong.
		</comment>
		<comment id='3' author='dendisuhubdy' date='2019-03-19T04:43:43Z'>
		I changed the const wchar_t * to const char and the compilation works, now there's linking errors. It seems you guys have the build.sh for Linux only which creates libonnxruntime_*.a files rather than .dylib files. Could you help adjust the build.py or share how you might do it so I can help you out?
Cool project by the way.
		</comment>
		<comment id='4' author='dendisuhubdy' date='2019-03-19T06:57:36Z'>
		Hi,
Please try
&lt;denchmark-code&gt;./build.sh --use_openmp  --skip_submodule_sync --parallel --build_shared_lib
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='dendisuhubdy' date='2019-03-20T05:49:38Z'>
		I skipped using --use_openmp because it always fails on Mac OS X, I'll retry it and tee the output to you
		</comment>
		<comment id='6' author='dendisuhubdy' date='2019-03-20T05:56:26Z'>
		&lt;denchmark-code&gt;Undefined symbols for architecture x86_64:
  "___kmpc_for_static_fini", referenced from:
      _.omp_outlined._debug__ in libonnxruntime_mlas.a(pooling.cpp.o)
      _.omp_outlined._debug__ in libonnxruntime_mlas.a(threading.cpp.o)
  "___kmpc_for_static_init_4", referenced from:
      _.omp_outlined._debug__ in libonnxruntime_mlas.a(threading.cpp.o)
  "___kmpc_for_static_init_8", referenced from:
      _.omp_outlined._debug__ in libonnxruntime_mlas.a(pooling.cpp.o)
  "___kmpc_fork_call", referenced from:
      MlasPool(MLAS_POOLING_KIND, unsigned long, long long const*, long long const*, long long const*, long long const*, long long const*, float const*, float*) in libonnxruntime_mlas.a(pooling.cpp.o)
      MlasExecuteThreaded(void (*)(void*, int), void*, int) in libonnxruntime_mlas.a(threading.cpp.o)
  "___kmpc_global_thread_num", referenced from:
      _.omp_outlined._debug__ in libonnxruntime_mlas.a(pooling.cpp.o)
      _.omp_outlined._debug__ in libonnxruntime_mlas.a(threading.cpp.o)
  "_omp_get_max_threads", referenced from:
      MLAS_PLATFORM::GetMaximumThreadCount() in libonnxruntime_mlas.a(convolve.cpp.o)
      MLAS_PLATFORM::GetMaximumThreadCount() in libonnxruntime_mlas.a(sgemm.cpp.o)
  "_omp_get_num_threads", referenced from:
      MLAS_PLATFORM::GetMaximumThreadCount() in libonnxruntime_mlas.a(convolve.cpp.o)
      MLAS_PLATFORM::GetMaximumThreadCount() in libonnxruntime_mlas.a(sgemm.cpp.o)
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
gmake[2]: *** [CMakeFiles/onnxruntime_mlas_test.dir/build.make:85: onnxruntime_mlas_test] Error 1
gmake[1]: *** [CMakeFiles/Makefile2:73: CMakeFiles/onnxruntime_mlas_test.dir/all] Error 2
gmake[1]: *** Waiting for unfinished jobs....

&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='dendisuhubdy' date='2019-03-20T06:26:45Z'>
		If without '--use_openmp', are you able to get the dylib?
		</comment>
		<comment id='8' author='dendisuhubdy' date='2019-03-20T23:11:38Z'>
		Hi, &lt;denchmark-link:https://github.com/RyanUnderhill&gt;@RyanUnderhill&lt;/denchmark-link&gt;
 , I think we should rename the OrtCreateSession in onnxruntime_cxx_api.h to CreateSession, to avoid name conflict.  What do you think?
		</comment>
		<comment id='9' author='dendisuhubdy' date='2019-03-29T02:43:36Z'>
		&lt;denchmark-link:https://github.com/snnn&gt;@snnn&lt;/denchmark-link&gt;
 let me try again
		</comment>
		<comment id='10' author='dendisuhubdy' date='2019-03-29T03:06:30Z'>
		Works with ./build.sh --skip_submodule_sync --parallel --build_shared_lib but not ./build.sh --use_openmp  --skip_submodule_sync --parallel --build_shared_lib or ./build.sh --parallel --build_shared_lib
		</comment>
		<comment id='11' author='dendisuhubdy' date='2019-03-29T03:57:07Z'>
		"./build.sh --skip_submodule_sync --parallel --build_shared_lib" and  "./build.sh --parallel --build_shared_lib" are almost identical.  If without '--skip_submodule_sync' it fails, you may try to run 'git submodule update --init --recursive' then run the build command again, it should success.
		</comment>
		<comment id='12' author='dendisuhubdy' date='2019-03-29T06:47:42Z'>
		The shared library is built and I did a sudo make install to put it in my /usr/local/. All is fine now üëç
		</comment>
	</comments>
</bug>