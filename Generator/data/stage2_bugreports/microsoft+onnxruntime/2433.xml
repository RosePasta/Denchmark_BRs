<bug id='2433' author='FlorentGuinier' open_date='2019-11-19T08:26:19Z' closed_time='2019-12-05T19:29:46Z'>
	<summary>Pad operator: Negative pads value not supported.</summary>
	<description>
Describe the bug
Pad operator: Negative pads value not supported (shape is correct values look like garbage memory).
Urgency
Pad node with a negative pad amount are usefull to perform crop. As negative pad is relative to the size of the input while, a slice operation is hard-coded, meaning a network cannot change input resolution later. ONNX specs support negative pad amount, having ONNX runtime support it as well is a must have for us.
System information

OS: Windows 10
ONNX Runtime installed from (source or binary): From binary (pip)
ONNX Runtime version: tryed both 0.5 and 1.0 (ie same problem with both)
ONNX version : 1.2.2
Python version: Python 3.6.8
Visual Studio version (if applicable): NA
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version: NA
GPU model and memory: NA


Run the attached python script  &lt;denchmark-link:https://github.com/microsoft/onnxruntime/files/3862682/negative_pad_onnxruntime_repro_bug.py.txt&gt;negative_pad_onnxruntime_repro_bug.py.txt&lt;/denchmark-link&gt;

Look at output tensor values.

According to ONNX Negative Padding should be supported:
&lt;denchmark-link:https://github.com/onnx/onnx/blob/master/docs/Operators.md#Pad&gt;https://github.com/onnx/onnx/blob/master/docs/Operators.md#Pad&lt;/denchmark-link&gt;

Running the script attached shows that it is not the case, ie the output tensor shape is correct while values look like uninitialized memory.

&lt;denchmark-link:https://user-images.githubusercontent.com/20201082/69129083-fdafd380-0aad-11ea-8d9b-1300f4fea262.png&gt;&lt;/denchmark-link&gt;

Additional context
	</description>
	<comments>
		<comment id='1' author='FlorentGuinier' date='2019-11-19T17:23:17Z'>
		&lt;denchmark-link:https://github.com/hariharans29&gt;@hariharans29&lt;/denchmark-link&gt;
 FYI
		</comment>
		<comment id='2' author='FlorentGuinier' date='2019-11-19T19:35:28Z'>
		Negative pad values have been supported since an earlier version of Pad. Opset-11 only had an interface change for Pad (a couple of attributes were made inputs). I only coded up the logic to handle the old and the new interface. The code already had logic to handle negative pads. This might be a bug that has always existed then. Nonetheless, let me take a look..
		</comment>
		<comment id='3' author='FlorentGuinier' date='2019-11-28T09:50:50Z'>
		Thanks for looking into it &lt;denchmark-link:https://github.com/hariharans29&gt;@hariharans29&lt;/denchmark-link&gt;
 let me know if I can help.
		</comment>
		<comment id='4' author='FlorentGuinier' date='2019-11-28T20:34:53Z'>
		Sorry &lt;denchmark-link:https://github.com/FlorentGuinier&gt;@FlorentGuinier&lt;/denchmark-link&gt;
 - I haven't been able to get to this yet. I plan to take a look at this next week after the holidays. Thanks for checking back!
		</comment>
		<comment id='5' author='FlorentGuinier' date='2019-11-29T08:03:35Z'>
		&lt;denchmark-link:https://github.com/hariharans29&gt;@hariharans29&lt;/denchmark-link&gt;
 thanks for letting me know :). Have good vacation!
		</comment>
		<comment id='6' author='FlorentGuinier' date='2019-12-04T22:43:26Z'>
		Could repro this. Investigating the pad logic to handle negative pad values.
		</comment>
		<comment id='7' author='FlorentGuinier' date='2019-12-05T00:56:23Z'>
		
Negative pad values have been supported since an earlier version of Pad. Opset-11 only had an interface change for Pad (a couple of attributes were made inputs). I only coded up the logic to handle the old and the new interface. The code already had logic to handle negative pads. This might be a bug that has always existed then. Nonetheless, let me take a look..

Looks like this was a bug that always existed. There was a bug handling negative begin pad values - the pointer was being offset in the wrong direction resulting in it pointing to garbage which was then copied over to the output.
		</comment>
		<comment id='8' author='FlorentGuinier' date='2019-12-05T01:07:54Z'>
		&lt;denchmark-link:https://github.com/FlorentGuinier&gt;@FlorentGuinier&lt;/denchmark-link&gt;
  - I added your example as a test case. Please take a look. Thanks for reporting this.
		</comment>
		<comment id='9' author='FlorentGuinier' date='2019-12-06T07:45:36Z'>
		&lt;denchmark-link:https://github.com/hariharans29&gt;@hariharans29&lt;/denchmark-link&gt;
 Thanks!
		</comment>
	</comments>
</bug>