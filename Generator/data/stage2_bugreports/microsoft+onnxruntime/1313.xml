<bug id='1313' author='fdwr' open_date='2019-06-28T03:28:38Z' closed_time='2019-07-01T21:29:34Z'>
	<summary>OneHot should treat negative axis as range from last dimension</summary>
	<description>
Describe the bug
The Lotus CPU implementation OneHot rejects negative axes except -1 (rejects -2, -3...) which is overly strict and inconsistent with the spec. It should treat negative values like the other ONNX operators (Gather, Pad, Slice) as distance from the last dimension. Although the spec doesn't explicitly state this, it is implied by the wording, and the ONNX shape inference honors any negative number.
The validation rejects valid values here: &lt;denchmark-link:https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/tensor/onehot.h&gt;https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/tensor/onehot.h&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;if (tmp_axis &lt; -1) {
    ORT_THROW("Value of axis is &lt; -1");
&lt;/denchmark-code&gt;

Contrast with ONNX shape inference: &lt;denchmark-link:https://github.com/onnx/onnx/blob/master/onnx/defs/tensor/defs.cc&gt;https://github.com/onnx/onnx/blob/master/onnx/defs/tensor/defs.cc&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;    if (axis &lt; -out_rank || axis &gt;= out_rank) {
        fail_shape_inference(
            "'axis' must be in [-rank(indices)-1, rank(indices)]");
        }
        if (axis &lt; 0) {
            axis += out_rank;
        }
&lt;/denchmark-code&gt;

System information

Windows 10 OS WinML CPU (works in GPU kernel)
ONNX Runtime installed from (source or binary): source
ONNX Runtime version: 1.5
Python version: NA
Visual Studio version (if applicable): Visual Studio 2017
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version: NA
GPU model and memory: NA

To Reproduce
Pass axis = -3. e.g.:
&lt;denchmark-code&gt; // 2D to 3D with negative axis.
{
  "op_type": "OneHot",
  "indices": [[1, 0, 3],
              [0, 2, 0]],
  "depth": [4],
  "values": [1, 2],
  "output": [[[1, 2, 1],[2, 1, 2]],
             [[2, 1, 1],[1, 1, 1]],
             [[1, 1, 1],[1, 2, 1]],
             [[1, 1, 2],[1, 1, 1]]],
  "axis": -3, // Equivalent to 0.
  "T1": "uint32",
  "T2": "uint32",
  "T3": "float32"
}`
&lt;/denchmark-code&gt;

Expected behavior
Given 2D input (3D output), axis = -3 is treated as axis = 0, or axis = -2 is treated as axis = 1.
	</description>
	<comments>
		<comment id='1' author='fdwr' date='2019-06-29T00:26:03Z'>
		Hi &lt;denchmark-link:https://github.com/fdwr&gt;@fdwr&lt;/denchmark-link&gt;

Don't you mean:
For 4D input, the output would be 5D and axis = -3 should be treated as -3 + 5 = 2 and axis = -2 should be treated as -2 + 5 = 3 ?
(Or)
continuing from the illustrative example, I think you wanted to say "Given 2D" (not "Given 4D")
		</comment>
		<comment id='2' author='fdwr' date='2019-06-29T00:50:25Z'>
		&lt;denchmark-link:https://github.com/hariharans29&gt;@hariharans29&lt;/denchmark-link&gt;
 Indeed :). Updated typo in-place.
		</comment>
	</comments>
</bug>