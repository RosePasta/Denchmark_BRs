<bug id='2690' author='jignparm' open_date='2019-12-18T01:27:49Z' closed_time='2019-12-20T05:02:56Z'>
	<summary>C# - Unicode characters in string input tensors not translated correctly</summary>
	<description>
Describe the bug
An input string tensor,  containing unicode chars,  gets translated to an unexpected value.
Urgency
Bug
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows
ONNX Runtime installed from (source or binary): V 1.0 from source
ONNX Runtime version: 1.0
Python version: N/A
Visual Studio version (if applicable): 2017
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

To Reproduce
Modify the C# unit test (InferenceTest.cs) to include a unicode character as shown below and run the test. It will fail, indicating the returned output tensor does not match the input tensor.
        [Fact]
        private void TestModelInputSTRING()
        {
            // model takes 1x5 input of fixed type, echoes back
            string modelPath = Path.Combine(Directory.GetCurrentDirectory(), "test_types_STRING.pb");
            using (var session = new InferenceSession(modelPath))
            {
                var container = new List&lt;NamedOnnxValue&gt;();
                var tensorIn = new DenseTensor&lt;string&gt;(new string[] { "hello...\u017E", "ced", "def", "", "frozen" }, new int[] { 1, 5 });
                var nov = NamedOnnxValue.CreateFromTensor("input", tensorIn);
                container.Add(nov);
                using (var res = session.Run(container))
                {
                    var tensorOut = res.First().AsTensor&lt;string&gt;();
                    Assert.True(tensorOut.SequenceEqual(tensorIn));
                }
            }
        }
Expected behavior
In the unit test above, the output string tensor should match the input string tensor.
Screenshots
Setting a debugger breakpoint in the unit test above, the values of tensorIn do not match the values of tensorOut
&lt;denchmark-link:https://user-images.githubusercontent.com/13698702/71047875-24a50800-2135-11ea-9030-7fd1e2415924.png&gt;&lt;/denchmark-link&gt;

Additional context
Add any other context about the problem here. If the issue is about a particular model, please share the model details as well to facilitate debugging.
	</description>
	<comments>
		<comment id='1' author='jignparm' date='2019-12-18T03:33:38Z'>
		I could be wrong - but isn't the string object in c# just a sequence of characters and if I remember correctly, the default encoding is UTF-16- so the memory backing the input string object is not ONNX conformant (expects UTF-8). Should the test be modified to pass an array of string objects (all UTF-8 character encoded) so that the underlying memory is ONNX conformant ?
		</comment>
		<comment id='2' author='jignparm' date='2019-12-18T09:03:36Z'>
		The  current code is relying on the &lt;denchmark-link:https://github.com/microsoft/onnxruntime/blob/master/csharp/src/Microsoft.ML.OnnxRuntime/NativeMethods.cs#L592&gt;OrtFillStringTensor API&lt;/denchmark-link&gt;
 to do  encoding of managed C# strings (in UTF-16) and fill out a native ORT tensor (in UTF-8). However, it seems this API doesn't work in all cases.
The unit test needs to be updated to include more complex characters in string values, beyond the simple ASCII-compatible characters currently being used, and verify that the string values faithfully complete a round trip going from “Input C# string --&gt; C# ORT layer --&gt; Native ORT --&gt; C# ORT layer --&gt; output C# string” without being mangled (e.g. using an ONNX model whose output is an "echo" of the input).
One solution would be to update &lt;denchmark-link:https://github.com/microsoft/onnxruntime/blob/master/csharp/src/Microsoft.ML.OnnxRuntime/NativeMethods.cs#L592&gt;OrtFillStringTensor API&lt;/denchmark-link&gt;
  to handle more complex strings (e.g. multi-byte, non-ASCII-compatible).
A second solution would be to do all encoding to UTF-8 in C#, and compose native string tensors programatically, without using OrtFillStringTensor.
		</comment>
	</comments>
</bug>