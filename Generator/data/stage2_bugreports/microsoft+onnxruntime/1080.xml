<bug id='1080' author='GuanLuo' open_date='2019-05-22T16:29:14Z' closed_time='2019-05-28T23:12:31Z'>
	<summary>"Where" Op Is Not Implemented</summary>
	<description>
Hi all, I created a model containing "Where" operator but failed to load it via Onnx Runtime C API:
&lt;denchmark-code&gt;Could not find an implementation for the node Where(9)
&lt;/denchmark-code&gt;

However, the &lt;denchmark-link:https://github.com/Microsoft/onnxruntime/blob/master/docs/Versioning.md#version-matrix&gt;version matrix&lt;/denchmark-link&gt;
 says it supports Onnx opset version 10.
The Python script to generate the model:
import onnx
onnx_input_str = onnx.helper.make_tensor_value_info("INPUT0", onnx.TensorProto.STRING, [1])
onnx_input_int = onnx.helper.make_tensor_value_info("INPUT1", onnx.TensorProto.INT32, [1])
onnx_flag = onnx.helper.make_tensor_value_info("READY", onnx.TensorProto.INT32, [1])
onnx_output = onnx.helper.make_tensor_value_info("OUTPUT", onnx.TensorProto.STRING, [1])

internal_input = onnx.helper.make_node("Cast", ["INPUT0"], ["_INPUT"], to=onnx.TensorProto.INT32)
add = onnx.helper.make_node("Add", ["_INPUT", "INPUT1"], ["add"])
zeros = onnx.helper.make_node("Sub", ["READY", "READY"], ["zeros"])
equal = onnx.helper.make_node("Equal", ["READY", "zeros"], ["equal"])
where = onnx.helper.make_node("Where", ["equal", "zeros", "add"], ["CAST"])
cast = onnx.helper.make_node("Cast", ["CAST"], ["OUTPUT"], to=onnx.TensorProto.STRING)

onnx_nodes = [internal_input, add, zeros, equal, where, cast]
onnx_inputs = [onnx_input_str, onnx_input_int, onnx_flag]
onnx_outputs = [onnx_output]

graph_proto = onnx.helper.make_graph(onnx_nodes, "conditional_and_cast", onnx_inputs, onnx_outputs)
model_def = onnx.helper.make_model(graph_proto)
onnx.save(model_def, "model.onnx")
	</description>
	<comments>
		<comment id='1' author='GuanLuo' date='2019-05-22T17:11:16Z'>
		
Could not find an implementation for the node Where(9)

This suggests you model has opset set to 9. What version of ONNX are you using?
		</comment>
		<comment id='2' author='GuanLuo' date='2019-05-22T17:23:16Z'>
		&lt;denchmark-link:https://github.com/skottmckay&gt;@skottmckay&lt;/denchmark-link&gt;
 The onnx version is '1.4.1', and it is using opset 9 as you said (&lt;denchmark-link:https://github.com/onnx/onnx/blob/master/docs/Versioning.md&gt;versioning doc&lt;/denchmark-link&gt;
). So it is not backward capatible?
		</comment>
		<comment id='3' author='GuanLuo' date='2019-05-22T18:18:11Z'>
		Sorry - I thought Where was new in opset 10. What version of onnxruntime are you using as our implementation of Where was added a few months ago (and is valid for opset 9).
&lt;denchmark-link:https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/tensor/where_op.cc&gt;https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/tensor/where_op.cc&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='GuanLuo' date='2019-05-22T18:52:14Z'>
		I am using Onnx Runtime 0.4.0 built from source. Now I looked at the  at branch  and I noticed that the types  and  is &lt;denchmark-link:https://github.com/microsoft/onnxruntime/blob/rel-0.4.0/onnxruntime/core/providers/cpu/tensor/where_op.cc#L38&gt;commented out&lt;/denchmark-link&gt;
, so I suppose that "where" op is implemented in Onnx Runtime but it is limited to certain data types?
		</comment>
		<comment id='5' author='GuanLuo' date='2019-05-22T19:28:20Z'>
		The current implementation does limit the supported types, I believe to try and keep the overall binary size small. Support for int32_t was enabled last week though, so if you pulled the latest master it would be in that.
&lt;denchmark-link:https://github.com/microsoft/onnxruntime/commit/31cbb5d33de775dae852a4b566e3a82cadcc1c0e#diff-3276925863124d4b46cb2f4e29e49b9f&gt;31cbb5d#diff-3276925863124d4b46cb2f4e29e49b9f&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='GuanLuo' date='2019-05-22T19:52:41Z'>
		I see. I wonder if there is a option / mode that I can enable to build the library with full Onnx support? Right now it seems to be inconvenient as I need to do something similar to &lt;denchmark-link:https://github.com/microsoft/onnxruntime/commit/31cbb5d33de775dae852a4b566e3a82cadcc1c0e&gt;31cbb5d&lt;/denchmark-link&gt;
 and to rebuild to support some data types.
		</comment>
		<comment id='7' author='GuanLuo' date='2019-05-28T23:12:31Z'>
		Opened a new issue &lt;denchmark-link:https://github.com/microsoft/onnxruntime/issues/1122&gt;#1122&lt;/denchmark-link&gt;
 for the feature requested in followup comment.
		</comment>
	</comments>
</bug>