<bug id='1882' author='Godricly' open_date='2019-09-20T03:32:09Z' closed_time='2019-11-04T08:01:39Z'>
	<summary>MKLDNN subgraph Error</summary>
	<description>
Describe the bug
&lt;denchmark-code&gt;import torch
import onnxruntime
from torch import nn
from torch.nn import functional as F

class Demo(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = nn.Conv2d(16,16,3,2,1)
        self.conv2 = nn.Conv2d(16,16,3,2,1)
        self.conv3 = nn.Conv2d(16,16,3,2,1)


    def forward(self, x):
        y = self.conv1(x)
        y = F.relu(y)
        out1 = self.conv2(y)
        out2 = self.conv3(y)
        return out1, out2

if __name__ == "__main__":
    input_tensor = torch.zeros((1,16,100,100))
    demo = Demo()
    out = demo(input_tensor)
    torch.onnx.export(demo, input_tensor, "debug.onnx", #verbose=True,
                        input_names=['data'],
                        opset_version=10,
                        do_constant_folding=True,
                        dynamic_axes={'data':{0:'batch'},
                                    })

    ses_option = onnxruntime.SessionOptions()
    ort_session = onnxruntime.InferenceSession("debug.onnx", ses_option)
&lt;/denchmark-code&gt;

The model exported fails during intialization.
Error:
&lt;denchmark-code&gt;RuntimeError: [ONNXRuntimeError] : 6 : RUNTIME_EXCEPTION : Exception during initialization:  onnxruntime_mkl/include/onnxruntime/core/graph/graph.h:926 onnxruntime::Node* onnxruntime::Graph::NodeAtIndexImpl(onnxruntime::NodeIndex) const node_index &lt; nodes_.size() was false. Validating no unexpected access using an invalid node_index.
&lt;/denchmark-code&gt;

Urgency
If there are particular important use cases blocked by this or strict project-related timelines, please share more information and dates. If there are no hard deadlines, please specify none.
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): 18.04
ONNX Runtime installed from (source or binary):  source
ONNX Runtime version: 561f2c4
Python version: 3.6.7
Visual Studio version (if applicable): NA
GCC/Compiler version (if compiling from source): 7.4.0
CUDA/cuDNN version: NA
GPU model and memory: NA

To Reproduce
Describe steps/code to reproduce the behavior:

compiling onnxrunime with MKLDNN support
pip install torch(I'm using daily build 1.3.0.dev20190906)
2, run the script above

	</description>
	<comments>
		<comment id='1' author='Godricly' date='2019-09-20T03:33:51Z'>
		&lt;denchmark-link:https://github.com/sreekanth-yalachigere&gt;@sreekanth-yalachigere&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/jywu-msft&gt;@jywu-msft&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='Godricly' date='2019-09-20T03:38:07Z'>
		&lt;denchmark-link:https://user-images.githubusercontent.com/17567935/65300531-59d9a280-dba6-11e9-9963-219399c68b1d.png&gt;&lt;/denchmark-link&gt;

FYI.
		</comment>
		<comment id='3' author='Godricly' date='2019-09-20T09:15:09Z'>
		&lt;denchmark-code&gt;  /** Gets the maximum NodeIndex value used in the Graph. */
  int MaxNodeIndex() const noexcept { return static_cast&lt;int&gt;(nodes_.size()); }  //assume the casting won't overflow

  // the definition below
  std::vector&lt;std::unique_ptr&lt;Node&gt;&gt; nodes_;
&lt;/denchmark-code&gt;

Is this function somehow misleading? It actually represents the number of nodes before optimization.
		</comment>
		<comment id='4' author='Godricly' date='2019-09-20T09:17:56Z'>
		


onnxruntime/onnxruntime/core/providers/mkldnn/mkldnn_execution_provider.cc


         Line 302
      in
      561f2c4






 if (temp_index &gt; graph_viewer.MaxNodeIndex()) 





according to last one. The condition here should be great equal.
		</comment>
		<comment id='5' author='Godricly' date='2019-09-20T20:16:45Z'>
		&lt;denchmark-link:https://github.com/sreekanth-yalachigere&gt;@sreekanth-yalachigere&lt;/denchmark-link&gt;
 , can you fix this as part of your upcoming PR?
		</comment>
		<comment id='6' author='Godricly' date='2019-09-20T20:18:04Z'>
		&lt;denchmark-link:https://github.com/jywu-msft&gt;@jywu-msft&lt;/denchmark-link&gt;
 yes.
		</comment>
		<comment id='7' author='Godricly' date='2019-09-21T10:26:02Z'>
		fixing that condition wont fix the issue. Please double check the graph optimization parts. thx
		</comment>
		<comment id='8' author='Godricly' date='2019-10-23T09:20:49Z'>
		the &lt;denchmark-link:https://github.com/microsoft/onnxruntime/pull/2117&gt;#2117&lt;/denchmark-link&gt;
 didn't fix the demo script for me.
commit id tested &lt;denchmark-link:https://github.com/microsoft/onnxruntime/commit/041a1cab54493d3d32e6a6a8b4981add8c1419ed&gt;041a1ca&lt;/denchmark-link&gt;
.
&lt;denchmark-code&gt;onnxruntime/include/onnxruntime/core/graph/graph.h:938 onnxruntime::Node* onnxruntime::Graph::NodeAtIndexImpl(onnxruntime::NodeIndex) const node_index &lt; nodes_.size() was false. Validating no unexpected access using an invalid node_index. Got:4 Max:4
&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='Godricly' date='2019-10-24T19:35:12Z'>
		&lt;denchmark-link:https://github.com/Godricly&gt;@Godricly&lt;/denchmark-link&gt;
 I fixed this issue. Can you please try this &lt;denchmark-link:https://github.com/sreekanth-yalachigere/onnxruntime/tree/rel-1.0.0&gt;branch&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='10' author='Godricly' date='2019-11-04T08:01:39Z'>
		Sry for the late reply. It works. Many thx.
		</comment>
	</comments>
</bug>