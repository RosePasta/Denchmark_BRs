<bug id='269' author='skamkar' open_date='2018-09-23T16:38:37Z' closed_time='2018-10-02T17:33:32Z'>
	<summary>Linearexplainer interventional option</summary>
	<description>
For the interventional option, from your docstring, "assuming features are independent leads to interventional SHAP values which for a linear model are coef[i] * (x[i] - X.mean(0)[i]) for the ith feature". I understand this to mean that regardless of any colinearity within the data, the feature importance computed will be a relative difference of the feature (relative to feature mean), scaled by the coefficient. Makes total sense.
Now, here's a test case (adapted from your unit test) that offers a confounding result.
&lt;denchmark-code&gt;np.random.seed(0)
beta = np.array([1, 0, 0])
mu = np.zeros(3)
Sigma = np.array([[1, 1, 0],
                  [1, 1, 0],
                  [0, 0, 1]])

X = np.ones((1,3))
explainer = shap.LinearExplainer((beta, 0), (mu, Sigma), feature_dependence='interventional')
explainer.shap_values(X)
&lt;/denchmark-code&gt;

Which returns a result of array([[0.5, 0.5, 0. ]]). Since the first and second inputs are perfectly correlated, but the linear model only uses the first input, I'd expect a result of array([[1.0, 0., 0.]]). Any insight would be helpful. (I see that it's due to L81 - L85 of linear.py, but don't understand why this is necessary.)
And, by the way, shap is a phenomenal repo; keep up the great work.
	</description>
	<comments>
		<comment id='1' author='skamkar' date='2018-10-02T17:28:30Z'>
		Thanks for pointing this out! This is indeed a bug. The reason perfectly redundant variables are grouped together is to avoid singularity problems later on. But for "interventional" we don't need to invert the correlation matrix so this doesn't matter. This grouping should not be done when doing the interventional version.
		</comment>
		<comment id='2' author='skamkar' date='2018-10-02T21:38:18Z'>
		Excellent. Thanks much!
		</comment>
	</comments>
</bug>