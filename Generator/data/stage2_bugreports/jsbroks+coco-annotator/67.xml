<bug id='67' author='matt-deboer' open_date='2019-01-16T23:40:46Z' closed_time='2019-01-24T18:18:42Z'>
	<summary>INITIALIZE_FROM_FILE requires a 'current_user'</summary>
	<description>
Related to &lt;denchmark-link:https://github.com/jsbroks/coco-annotator/issues/50&gt;#50&lt;/denchmark-link&gt;
, it looks like this feature may have been broken in recent user-based changes.
Specifically:
&lt;denchmark-code&gt;[ERROR] Exception in worker process
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/gunicorn/arbiter.py", line 583, in spawn_worker
    worker.init_process()
  File "/usr/local/lib/python3.6/site-packages/gunicorn/workers/base.py", line 129, in init_process
    self.load_wsgi()
  File "/usr/local/lib/python3.6/site-packages/gunicorn/workers/base.py", line 138, in load_wsgi
    self.wsgi = self.app.wsgi()
  File "/usr/local/lib/python3.6/site-packages/gunicorn/app/base.py", line 67, in wsgi
    self.callable = self.load()
  File "/usr/local/lib/python3.6/site-packages/gunicorn/app/wsgiapp.py", line 52, in load
    return self.load_wsgiapp()
  File "/usr/local/lib/python3.6/site-packages/gunicorn/app/wsgiapp.py", line 41, in load_wsgiapp
    return util.import_app(self.app_uri)
  File "/usr/local/lib/python3.6/site-packages/gunicorn/util.py", line 350, in import_app
    __import__(module)
  File "/workspace/app/__init__.py", line 61, in &lt;module&gt;
    create_from_json(Config.INITIALIZE_FROM_FILE)
  File "/workspace/app/models.py", line 374, in create_from_json
    upsert(DatasetModel, query={ "name": name}, update=dataset_json)
  File "/workspace/app/models.py", line 347, in upsert
    new_model.save()
  File "/workspace/app/models.py", line 45, in save
    self.owner = current_user.username
  File "/usr/local/lib/python3.6/site-packages/werkzeug/local.py", line 347, in __getattr__
    return getattr(self._get_current_object(), name)
AttributeError: 'NoneType' object has no attribute 'username'
&lt;/denchmark-code&gt;

It looks like in models.py:45,
&lt;denchmark-code&gt;self.owner = current_user.username
&lt;/denchmark-code&gt;

there will not be any current_user available when the app is initializing; maybe there should be a special 'system' owner? Or perhaps the initializer.json file could contain a user section which would associate the datasets/categories created with a particular user...
Or maybe this feature should just be replaced with an API call so it will always have an associated user?
Then again, that would create a need to manually create users before being able to use the API...probably at least need a builtin admin account for such bootstrap concerns...
	</description>
	<comments>
		<comment id='1' author='matt-deboer' date='2019-01-23T23:58:19Z'>
		&lt;denchmark-link:https://github.com/jsbroks&gt;@jsbroks&lt;/denchmark-link&gt;
 I'm thinking the best approach is to add a built-in  user with a password configured via environment variables--then, use this account for bootstrapping concerns via API calls.
So, if the env ADMIN_PASSWORD is specified, then an admin user is created on startup with that password, defaulting to username admin (overridden via env ADMIN_USERNAME).
Then, the effects of INITIALIZE_FROM_FILE can be accomplished with normal api calls.
What do you think?
		</comment>
		<comment id='2' author='matt-deboer' date='2019-01-24T01:13:56Z'>
		I'm not quite for the idea of adding users using environment variables as it starts to complicate the experience.
Even adding a simple line such as:
username = current.username
... = username if username else "system"
would be a simple fix.
		</comment>
		<comment id='3' author='matt-deboer' date='2019-01-24T17:40:38Z'>
		ok, sounds good. PR coming shortly.
		</comment>
	</comments>
</bug>