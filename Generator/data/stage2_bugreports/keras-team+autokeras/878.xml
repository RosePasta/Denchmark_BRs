<bug id='878' author='DavidJBianco' open_date='2020-01-02T17:43:29Z' closed_time='2020-02-08T22:31:31Z'>
	<summary>Add a dictionary for all custom layers for keras load_model</summary>
	<description>
&lt;denchmark-h:h3&gt;Bug Description&lt;/denchmark-h&gt;

I created a model using AutoKeras 1.0 StructuredDataClassifier, saved it as an h5 file, and am unable to properly load it back into Keras.  Both AutoKeras and Keras are using the tensorflow backend.
&lt;denchmark-h:h3&gt;Reproducing Steps&lt;/denchmark-h&gt;

I can train a model easily, using code similar to:
&lt;denchmark-code&gt;num_data = 500
train_x = common.generate_structured_data(num_data)
train_y = common.generate_one_hot_labels(num_instances=num_data, num_classes=3)
clf = ak.StructuredDataClassifier(
    column_names=common.COLUMN_NAMES_FROM_NUMPY,
    max_trials=1,
    seed=common.SEED)
clf.fit(train_x, train_y, epochs=4, validation_data=(train_x, train_y))
loss = clf.evaluate(train_x, train_y)
print(loss)
&lt;/denchmark-code&gt;

I try to load it like so:
&lt;denchmark-code&gt;from keras.models import load_model

model = load_model('testmodel.h5')
&lt;/denchmark-code&gt;

This code throws an error:


TypeError                                 Traceback (most recent call last)
 in 
----&gt; 1 model = load_model('testmodel.h5')
/opt/conda/lib/python3.7/site-packages/keras/engine/saving.py in load_wrapper(*args, **kwargs)
490                 os.remove(tmp_filepath)
491             return res
--&gt; 492         return load_function(*args, **kwargs)
493
494     return load_wrapper
/opt/conda/lib/python3.7/site-packages/keras/engine/saving.py in load_model(filepath, custom_objects, compile)
582     if H5Dict.is_supported_type(filepath):
583         with H5Dict(filepath, mode='r') as h5dict:
--&gt; 584             model = _deserialize_model(h5dict, custom_objects, compile)
585     elif hasattr(filepath, 'write') and callable(filepath.write):
586         def load_function(h5file):
/opt/conda/lib/python3.7/site-packages/keras/engine/saving.py in _deserialize_model(h5dict, custom_objects, compile)
272         raise ValueError('No model found in config.')
273     model_config = json.loads(model_config.decode('utf-8'))
--&gt; 274     model = model_from_config(model_config, custom_objects=custom_objects)
275     model_weights_group = h5dict['model_weights']
276
/opt/conda/lib/python3.7/site-packages/keras/engine/saving.py in model_from_config(config, custom_objects)
625                         'Sequential.from_config(config)?')
626     from ..layers import deserialize
--&gt; 627     return deserialize(config, custom_objects=custom_objects)
628
629
/opt/conda/lib/python3.7/site-packages/keras/layers/init.py in deserialize(config, custom_objects)
166                                     module_objects=globs,
167                                     custom_objects=custom_objects,
--&gt; 168                                     printable_module_name='layer')
/opt/conda/lib/python3.7/site-packages/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)
145                     config['config'],
146                     custom_objects=dict(list(_GLOBAL_CUSTOM_OBJECTS.items()) +
--&gt; 147                                         list(custom_objects.items())))
148             with CustomObjectScope(custom_objects):
149                 return cls.from_config(config['config'])
/opt/conda/lib/python3.7/site-packages/keras/engine/network.py in from_config(cls, config, custom_objects)
1054         # First, we create all layers and enqueue nodes to be processed
1055         for layer_data in config['layers']:
-&gt; 1056             process_layer(layer_data)
1057
1058         # Then we process nodes in order of layer depth.
/opt/conda/lib/python3.7/site-packages/keras/engine/network.py in process_layer(layer_data)
1040
1041             layer = deserialize_layer(layer_data,
-&gt; 1042                                       custom_objects=custom_objects)
1043             created_layers[layer_name] = layer
1044
/opt/conda/lib/python3.7/site-packages/keras/layers/init.py in deserialize(config, custom_objects)
166                                     module_objects=globs,
167                                     custom_objects=custom_objects,
--&gt; 168                                     printable_module_name='layer')
/opt/conda/lib/python3.7/site-packages/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)
147                                         list(custom_objects.items())))
148             with CustomObjectScope(custom_objects):
--&gt; 149                 return cls.from_config(config['config'])
150         else:
151             # Then cls may be a function returning a class.
/opt/conda/lib/python3.7/site-packages/keras/engine/base_layer.py in from_config(cls, config)
1177             A layer instance.
1178         """
-&gt; 1179         return cls(**config)
1180
1181     def count_params(self):
/opt/conda/lib/python3.7/site-packages/keras/legacy/interfaces.py in wrapper(*args, **kwargs)
89                 warnings.warn('Update your ' + object_name + ' call to the ' +
90                               'Keras 2 API: ' + signature, stacklevel=2)
---&gt; 91             return func(*args, **kwargs)
92         wrapper._original_function = func
93         return wrapper
TypeError: init() got an unexpected keyword argument 'ragged'

&lt;denchmark-h:h3&gt;Expected Behavior&lt;/denchmark-h&gt;

I expected load_model() to return a valid model.
&lt;denchmark-h:h3&gt;Setup Details&lt;/denchmark-h&gt;


OS type and version: Same on OS X / homebrew or Linux Ubuntu 18.4
Python: 3.6 (OS X) or 3.7.3 (Ubuntu)
autokeras: master
scikit-learn: 0.21.3
numpy: 1.17.3
keras: 2.3.1
scipy: 1.3.1
tensorflow: 2.1.0rc2
pytorch: not installed (but same failure if run with torch 1.3.1 installed)

&lt;denchmark-h:h3&gt;Additional context&lt;/denchmark-h&gt;

	</description>
	<comments>
		<comment id='1' author='DavidJBianco' date='2020-01-06T15:03:03Z'>
		I am facing the same issue. It migth be somehow related to **kwargs? Should we add them somewhere into our code or they are missing in autokeras package?
		</comment>
		<comment id='2' author='DavidJBianco' date='2020-01-15T21:46:34Z'>
		&lt;denchmark-link:https://github.com/DavidJBianco&gt;@DavidJBianco&lt;/denchmark-link&gt;
 This is a very tough issue.
First, the saved model is may contain a custom layer .
You can follow &lt;denchmark-link:http://keras.io/getting-started/faq/&gt;http://keras.io/getting-started/faq/&lt;/denchmark-link&gt;
 the tutorial of saving and loading custom layer.

However, the keras model doesn't save all the things of a found model by AutoKeras. It may use a lightGBM model.
We will update the tutorial for handling this in the tutorial below soon.
&lt;denchmark-link:https://autokeras.com/tutorial/export/&gt;https://autokeras.com/tutorial/export/&lt;/denchmark-link&gt;

In the near future, we will wrap everything into the keras model and remove the custom layer. So this issue will be resovled automatically.
		</comment>
		<comment id='3' author='DavidJBianco' date='2020-01-22T14:28:59Z'>
		Does this mean that saving a model doesn't currently work? Or is there a work around? I now have a model with 0 trainable parameters which seems wrong.
		</comment>
		<comment id='4' author='DavidJBianco' date='2020-01-22T19:18:35Z'>
		&lt;denchmark-link:https://github.com/mulka&gt;@mulka&lt;/denchmark-link&gt;
 For the StructuredDataClassifier, the export model may not always work. This issue will be solved soon since Keras is supporting preprocessing layers from tensorflow 2.1.
		</comment>
		<comment id='5' author='DavidJBianco' date='2020-02-08T22:31:31Z'>
		This one is resolved for the latest version.
Please refer to the tutorial about export model for details.
&lt;denchmark-link:https://autokeras.com/tutorial/export/&gt;https://autokeras.com/tutorial/export/&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>