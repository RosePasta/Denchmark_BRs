<bug id='1241' author='sword134' open_date='2020-07-17T16:25:57Z' closed_time='2020-09-26T23:36:08Z'>
	<summary>Model crashes on classifier.evaluate</summary>
	<description>
&lt;denchmark-h:h3&gt;Bug Description&lt;/denchmark-h&gt;

My LSTM model crashes upon reaching the classifier.evaluate part, thus rendering all of the training a waste of time.
&lt;denchmark-h:h3&gt;Bug Reproduction&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;data = predata
# print(data)

# Normalize the data
column_names_to_normalize = list(data.columns.values)
column_names_to_normalize.remove(RESPONSEVARIABLE)
column_names_to_normalize.remove("timestamp_day")
column_names_to_normalize.remove("timestamp_month")

sc = preprocessing.MinMaxScaler()
num_d = data[column_names_to_normalize]

# update the cols with their normalized values
data[num_d.columns] = sc.fit_transform(num_d)
dataset = data
# print(dataset[0:5])

# Split into training and testing
train_dataset, test_dataset = train_test_split(
    dataset, test_size=0.05, shuffle=False)


print(train_dataset)
print(test_dataset)

train_labels = train_dataset.pop(RESPONSEVARIABLE)
test_labels = test_dataset.pop(RESPONSEVARIABLE)

train_dataset = train_dataset.values.astype("float32")
test_dataset = test_dataset.values.astype("float32")

print("Original training data shape:")
print(train_dataset.shape)

y_train = train_labels[look_back:]  # (train_size-look_back,)
y_test = test_labels[look_back:]  # ((n_sample-train_size),)
print("Y training and test shape:")
print(y_train.shape, y_test.shape)
train_X = view_as_windows(train_dataset, (look_back, train_dataset.shape[1]))[
    :-1, 0]  # (train_size-look_back, look_back, n_features)
test_X = view_as_windows(test_dataset, (look_back, test_dataset.shape[1]))[
    :-1, 0]  # ((n_sample-train_size)-look_back, look_back, n_features)
print("X training and test shape:")
print(train_X.shape, test_X.shape)

input_node = ak.Input()
#output_node1 = ak.Normalization()(input_node)
output_node1 = ak.RNNBlock(return_sequences=True,
                           layer_type='lstm')(input_node)
output_node2 = ak.RNNBlock(return_sequences=True,
                           layer_type='lstm')(output_node1)
output_node3 = ak.RNNBlock(return_sequences=True,
                           layer_type='lstm')(output_node2)
output_node4 = ak.RNNBlock(layer_type='lstm')(output_node3)
output_node5 = ak.DenseBlock()(output_node4)
output_node = ak.Merge()(
    [output_node1, output_node2, output_node3, output_node4, output_node5])
output_nodefinal = ak.ClassificationHead()(output_node)

my_callbacks = [tf.keras.callbacks.EarlyStopping(patience=15, restore_best_weights=True, monitor="val_accuracy", mode="auto"),
                tf.keras.callbacks.ModelCheckpoint(filepath=PATH+"\TimeseriesCallbackModel\TimeseriesCallbackModel", save_weights_only=True, monitor='val_accuracy', mode='auto', save_best_only=True)]

classifier = ak.AutoModel(
    inputs=input_node, outputs=output_nodefinal, max_trials=15, directory=PATH+"\TimeseriesModel", overwrite=True)
# classifier = ak.StructuredDataClassifier(
#    max_trials=1, directory="D:\AutoKerasProject\model", overwrite=True)

classifier.fit(x=train_X, y=y_train, callbacks=my_callbacks)
print("Done fitting, beginning evaluation:")
print(classifier.evaluate(x=test_X, y=y_test))
&lt;/denchmark-code&gt;

The error message:
&lt;denchmark-code&gt;Done fitting, beginning evaluation:
Traceback (most recent call last):
  File "d:\AutoKerasProject\AutoKerasAutoModel3daybinary.py", line 121, in &lt;module&gt;
    print(classifier.evaluate(x=test_X, y=y_test))
  File "D:\Anaconda\envs\tf-gpu\lib\site-packages\autokeras\auto_model.py", line 444, in evaluate
    dataset = self._process_xy(x, y, False)
  File "D:\Anaconda\envs\tf-gpu\lib\site-packages\autokeras\auto_model.py", line 307, in _process_xy
    y = self._adapt(y, fit, self._heads, self._output_adapters)
  File "D:\Anaconda\envs\tf-gpu\lib\site-packages\autokeras\auto_model.py", line 275, in _adapt
    source = adapter.transform(source)
  File "D:\Anaconda\envs\tf-gpu\lib\site-packages\autokeras\engine\adapter.py", line 88, in transform
    return self.convert_to_dataset(dataset)
  File "D:\Anaconda\envs\tf-gpu\lib\site-packages\autokeras\adapters\output_adapter.py", line 101, in convert_to_dataset
    dataset = self.label_encoder.encode(dataset)
  File "D:\Anaconda\envs\tf-gpu\lib\site-packages\autokeras\encoders.py", line 128, in encode
    data))).reshape(-1, 1)
  File "D:\Anaconda\envs\tf-gpu\lib\site-packages\autokeras\encoders.py", line 127, in &lt;lambda&gt;
    return np.array(list(map(lambda x: self._label_to_int[x],
KeyError: nan
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Setup Details&lt;/denchmark-h&gt;

Include the details about the versions of:
-OS type and version:
-Python: 3.6.10
-autokeras: 1.0.3
-keras-tuner: latest
-scikit-learn: 0.23.1
-numpy: 1.18.5
-pandas: 1.0.5
-tensorflow: 2.2.0
	</description>
	<comments>
		<comment id='1' author='sword134' date='2020-09-19T22:48:22Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
	</comments>
</bug>