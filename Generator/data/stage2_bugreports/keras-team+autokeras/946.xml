<bug id='946' author='rakshanda22' open_date='2020-02-07T21:28:22Z' closed_time='2020-02-11T23:28:35Z'>
	<summary>Text Classification Validation Accuracy does not change</summary>
	<description>
In the following text classification example &lt;denchmark-link:url&gt;https://autokeras.com/examples/imdb/&lt;/denchmark-link&gt;
 the validation accuracy remains the same across all epochs and trials. The validation accuracy is 50.62% and seems like random classification accuracy. What could be the possible issue?
	</description>
	<comments>
		<comment id='1' author='rakshanda22' date='2020-02-08T15:13:47Z'>
		&lt;denchmark-link:https://github.com/rakshanda22&gt;@rakshanda22&lt;/denchmark-link&gt;

We will look into it. Thank you for the report.
		</comment>
		<comment id='2' author='rakshanda22' date='2020-02-09T15:54:36Z'>
		I noticed the same.
Also:

all is well on autokeras 1.0.0, bug is only on 1.0.1
works just as bad on other text datasets

I'm using Ubuntu 18.04 and tensorflow 2.1.0
		</comment>
		<comment id='3' author='rakshanda22' date='2020-02-10T17:19:36Z'>
		&lt;denchmark-link:https://github.com/johny-b&gt;@johny-b&lt;/denchmark-link&gt;
 If so, it must be the text vectorization layer.
We didn't use it in 1.0.0 and use it in 1.0.1.
It's weights cannot be saved for now.
When the tuner loads it for eval and predict, it doesn't work.
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/v2.1.0/tensorflow/python/keras/layers/preprocessing/text_vectorization.py#L290&gt;https://github.com/tensorflow/tensorflow/blob/v2.1.0/tensorflow/python/keras/layers/preprocessing/text_vectorization.py#L290&lt;/denchmark-link&gt;

Hopefully, it can be saved with TF 2.2.
I will confirm with the tensorflow team. If not, we may try to do a walk around.
		</comment>
		<comment id='4' author='rakshanda22' date='2020-02-10T17:21:40Z'>
		So is there a way to drop down to autokeras 1.0.0?
Also another workaround could be to use this instead of text classification.
input_node = ak.TextInput()
output_node = ak.TextBlock(vectorizer='ngram')(input_node)
output_node = ak.ClassificationHead()(output_node)
clf = ak.AutoModel(inputs=input_node, outputs=output_node, max_trials=10)
clf.fit(x_train, y_train)
		</comment>
		<comment id='5' author='rakshanda22' date='2020-02-10T17:24:22Z'>
		&lt;denchmark-link:https://github.com/rakshanda22&gt;@rakshanda22&lt;/denchmark-link&gt;
 Yes.
&lt;denchmark-code&gt;pip3 uninstall autokeras
pip3 install autokeras==1.0.0
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='rakshanda22' date='2020-07-22T08:12:10Z'>
		Having the same problem. Any suggestions?
		</comment>
		<comment id='7' author='rakshanda22' date='2020-07-23T21:14:02Z'>
		&lt;denchmark-link:https://github.com/SoYoungCho&gt;@SoYoungCho&lt;/denchmark-link&gt;
 This is a rather old issue. I believe it has been fixed already. Are you using AutoKeras 1.0.4 with Keras Tuner 1.0.2rc1? Thanks.
		</comment>
		<comment id='8' author='rakshanda22' date='2020-07-24T00:46:28Z'>
		
@SoYoungCho This is a rather old issue. I believe it has been fixed already. Are you using AutoKeras 1.0.4 with Keras Tuner 1.0.2rc1? Thanks.

Problem solved. I did use AutoKeras 1.0.4 with Keras Tuner 1.0.2rc1, but the problem was overfitting. Randomly shuffling the dataset solved my issue. Thanks!
		</comment>
	</comments>
</bug>