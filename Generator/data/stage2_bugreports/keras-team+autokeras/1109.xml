<bug id='1109' author='cordeirojoao' open_date='2020-04-29T17:32:00Z' closed_time='2020-07-17T15:28:25Z'>
	<summary>AutoModel error when using a ConvBlock (simples hello world)</summary>
	<description>
&lt;denchmark-h:h3&gt;Bug Description&lt;/denchmark-h&gt;

Trying to do a simple "hello world" with Titanic dataset using AutoModel  with a Conv block, it returns error :(
&lt;denchmark-h:h3&gt;Bug Reproduction&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;input_node = ak.Input() #also tried using ak.StructuredDataInput()
output_node = ak.Normalization()(input_node)
output_node = ak.ConvBlock()(output_node)
output_node = ak.ClassificationHead()(output_node)

auto_model = ak.AutoModel(inputs=input_node, outputs=output_node, max_trials=1)
auto_model.fit(x=x_train_array, y=y_train, epochs=1)
&lt;/denchmark-code&gt;

Data used by the code:
&lt;denchmark-code&gt;train = pd.read_csv("titanic_train.csv")
val = pd.read_csv("titanic_eval.csv")

col=['survived', "sex", "class", "deck", "embark_town", "alone", "age", "fare" ]#,"n_siblings_spouses"], "parch"

x_train = train.drop(columns=col)
x_train_array = x_train.to_numpy() #dtype is int64
y_train = train['survived']
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Setup Details&lt;/denchmark-h&gt;


OS type and version: Win10
Python: 3.7.4
autokeras: 1.0.2
numpy: 1.18.1
pandas: 1.0.3
tensorflow: 2.1.0
TF.Keras: 2.2.4-tf

&lt;denchmark-h:h3&gt;ERROR&lt;/denchmark-h&gt;

TypeError: Value passed to parameter 'x' has DataType string not in list of allowed values: bfloat16, float16, float32, float64, uint8, int8, uint16, int16, int32, int64, complex64, complex128
Full error:
Traceback (most recent call last):
File "C:\Users\Joao\Anaconda3\envs\myenv\lib\site-packages\kerastuner\engine\hypermodel.py", line 105, in build
model = self.hypermodel.build(hp)
File "C:\Users\Joao\Anaconda3\envs\myenv\lib\site-packages\kerastuner\engine\hypermodel.py", line 65, in _build_wrapper
return self._build(hp, *args, **kwargs)
File "C:\Users\Joao\Anaconda3\envs\myenv\lib\site-packages\autokeras\graph.py", line 245, in build
outputs = block.build(hp, inputs=temp_inputs)
File "C:\Users\Joao\Anaconda3\envs\myenv\lib\site-packages\autokeras\engine\block.py", line 40, in _build_wrapper
return self._build(hp, *args, **kwargs)
File "C:\Users\Joao\Anaconda3\envs\myenv\lib\site-packages\autokeras\hypermodels\preprocessing.py", line 26, in build
return preprocessing.Normalization(axis=self.axis)(input_node)
File "C:\Users\Joao\Anaconda3\envs\myenv\lib\site-packages\tensorflow_core\python\keras\engine\base_layer.py", line 773, in call
outputs = call_fn(cast_inputs, *args, **kwargs)
File "C:\Users\Joao\Anaconda3\envs\myenv\lib\site-packages\tensorflow_core\python\keras\layers\preprocessing\normalization.py", line 113, in call
return (inputs - mean) / math_ops.sqrt(variance)
File "C:\Users\Joao\Anaconda3\envs\myenv\lib\site-packages\tensorflow_core\python\ops\math_ops.py", line 902, in binary_op_wrapper
return func(x, y, name=name)
File "C:\Users\Joao\Anaconda3\envs\myenv\lib\site-packages\tensorflow_core\python\ops\gen_math_ops.py", line 10104, in sub
"Sub", x=x, y=y, name=name)
File "C:\Users\Joao\Anaconda3\envs\myenv\lib\site-packages\tensorflow_core\python\framework\op_def_library.py", line 576, in _apply_op_helper
param_name=input_name)
File "C:\Users\Joao\Anaconda3\envs\myenv\lib\site-packages\tensorflow_core\python\framework\op_def_library.py", line 61, in _SatisfiesTypeConstraint
", ".join(dtypes.as_dtype(x).name for x in allowed_list)))
TypeError: Value passed to parameter 'x' has DataType string not in list of allowed values: bfloat16, float16, float32, float64, uint8, int8, uint16, int16, int32, int64, complex64, complex128
	</description>
	<comments>
		<comment id='1' author='cordeirojoao' date='2020-07-15T19:14:14Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='2' author='cordeirojoao' date='2020-07-17T15:27:39Z'>
		Meanwhile I was able to set Automodel with CNN block. Please find the code below.
Hope it can be usefull for you :)
Note: at this point I ws using autokeras: 1.0.3 and  Tensorflow: 2.2.0
&lt;denchmark-code&gt;# Library import
import pandas as pd
import numpy as np
import autokeras as ak
import tensorflow as tf
import matplotlib.pyplot as plt

# Prepare example Data - Shape 1D
num_instances = 100
num_features = 5
x_train = np.random.rand(num_instances, num_features).astype(np.float32)
y_train = np.zeros(num_instances).astype(np.float32)
y_train[0:int(num_instances/2)]=1
x_test = np.random.rand(num_instances, num_features).astype(np.float32)
y_test = np.zeros(num_instances).astype(np.float32)
y_train[0:int(num_instances/2)]=1

x_train = np.expand_dims(x_train, axis=2) #This step it's very important an CNN will only accept this data shape
print(x_train.shape)
print(y_train.shape)

# Prepare Automodel for search
input_node = ak.Input() 
output_node = ak.ConvBlock()(input_node) 
#output_node = ak.DenseBlock()(output_node) #optional
#output_node = ak.SpatialReduction()(output_node) #optional
output_node = ak.ClassificationHead(num_classes=2, multi_label=True)(output_node)

auto_model = ak.AutoModel(inputs=input_node,outputs=output_node,overwrite=True,max_trials=1)

# Search
auto_model.fit(x_train, y_train, epochs=1)
print(auto_model.evaluate(x_test, y_test))

# Export as a Keras Model
model = auto_model.export_model()
print(type(model.summary()))

# Export as a Keras Model
model = auto_model.export_model()
print(type(model.summary()))
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>