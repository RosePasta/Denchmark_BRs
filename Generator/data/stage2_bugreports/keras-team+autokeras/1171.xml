<bug id='1171' author='Astlaan' open_date='2020-06-04T16:14:21Z' closed_time='2020-07-28T07:10:25Z'>
	<summary>Custom blocks causing errors during automodel.fit</summary>
	<description>
I'm trying to implement the following custom model in autokeras:
Data: sequencial data (padded according to the longest sample) with the shape (batch_size, Nr timesteps, Nr features per timestep) = (None, None, 20)
x_train.shape = (20373, 50, 20)
y_train.shape = (20373,)
x_train.dtype = dtype('int64')
y_train.dtype = dtype('float64')
Model:

Masking Layer (due to the usage of padding)
TimeDistributed DenseBlock
RNN Block (LSTM)
DenseBlock
RegressionHead

I implemented the Masking Layer and TimeDistributed Denseblock according to the custom block example in the documentation. The complete implementation is present below:
&lt;denchmark-code&gt;class TimeDistributedDense(ak.Block):
    def build(self, hp, inputs=None):
        output = inputs
        for i in range(hp.Int('num_layers_embedding', 1, 2)):
            output = TimeDistributed(Dense(hp.Int('unitsembedding_' + str(i), min_value=2, max_value=16, step=2), activation='tanh'))(output)
            output = BatchNormalization()(output)
        return output_node

class Mask(ak.Block):

    def build(self, hp, inputs=None):
        layer = Masking(mask_value=0, input_shape=(None, 20))
        output_node = layer(inputs)
        return output_node

input_node = ak.Input(shape = (None, None, 20))
output_node = Mask()(input_node)
output_node = TimeDistributedDense()(output_node)
output_node = ak.RNNBlock(return_sequences=False, bidirectional=False, num_layers=None, layer_type='lstm')(output_node)
output_node = ak.DenseBlock(num_layers=None, use_batchnorm=True, dropout_rate=0)(output_node)
output_node = ak.RegressionHead(
    output_dim=1, loss="binary_crossentropy", metrics=None, dropout_rate=0)(output_node)

shutil.rmtree('auto_model')
auto_model = ak.AutoModel(
    inputs=input_node, 
    outputs=output_node,
    tuner = 'bayesian',
    overwrite=True,
    max_trials=20)
&lt;/denchmark-code&gt;

When I try to run auto_model.fit(x_train, y_train, batch_size = 512)  I get a long traceback:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/kerastuner/engine/hypermodel.py", line 105, in build
    model = self.hypermodel.build(hp)
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/kerastuner/engine/hypermodel.py", line 65, in _build_wrapper
    return self._build(hp, *args, **kwargs)
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/autokeras/graph.py", line 245, in build
    outputs = block.build(hp, inputs=temp_inputs)
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/autokeras/engine/block.py", line 40, in _build_wrapper
    return self._build(hp, *args, **kwargs)
  File "&lt;ipython-input-33-81a07af1a5dd&gt;", line 36, in build
    output_node = layer(inputs)
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py", line 922, in __call__
    outputs = call_fn(cast_inputs, *args, **kwargs)
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/keras/layers/core.py", line 112, in call
    outputs = inputs * math_ops.cast(boolean_mask, inputs.dtype)
AttributeError: 'list' object has no attribute 'dtype'

&lt;/denchmark-code&gt;

This error is related to the Masking Layer.
If I comment the line where I add the Masking layer to the automodel (output_node = Mask()(input_node)), rewire TimeDistributedDense to receive input_node, rerun the model code, and run automodel.fit() I get:
&lt;denchmark-code&gt;
Traceback (most recent call last):
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/kerastuner/engine/hypermodel.py", line 105, in build
    model = self.hypermodel.build(hp)
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/kerastuner/engine/hypermodel.py", line 65, in _build_wrapper
    return self._build(hp, *args, **kwargs)
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/autokeras/graph.py", line 245, in build
    outputs = block.build(hp, inputs=temp_inputs)
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/autokeras/engine/block.py", line 40, in _build_wrapper
    return self._build(hp, *args, **kwargs)
  File "&lt;ipython-input-37-d29943b35d09&gt;", line 27, in build
    output = TimeDistributed(Dense(hp.Int('unitsembedding_' + str(i), min_value=2, max_value=16, step=2), activation='tanh'))(output)
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py", line 897, in __call__
    self._maybe_build(inputs)
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py", line 2416, in _maybe_build
    self.build(input_shapes)  # pylint:disable=not-callable
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/keras/layers/wrappers.py", line 175, in build
    input_shape = tensor_shape.TensorShape(input_shape).as_list()
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/framework/tensor_shape.py", line 771, in __init__
    self._dims = [as_dimension(d) for d in dims_iter]
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/framework/tensor_shape.py", line 771, in &lt;listcomp&gt;
    self._dims = [as_dimension(d) for d in dims_iter]
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/framework/tensor_shape.py", line 716, in as_dimension
    return Dimension(value)
  File "/home/dmalvalada/bulk/home/dmalvalada/bulk/miniconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/framework/tensor_shape.py", line 200, in __init__
    None)
  File "&lt;string&gt;", line 3, in raise_from
TypeError: Dimension value must be integer or None or have an __index__ method, got TensorShape([None, 50, 20])
&lt;/denchmark-code&gt;

Any idea on how to solve this?
	</description>
	<comments>
		<comment id='1' author='Astlaan' date='2020-06-23T15:51:15Z'>
		&lt;denchmark-link:https://github.com/Astlaan&gt;@Astlaan&lt;/denchmark-link&gt;
 I think this is a great use case!
If you would like to reproduce it on colab with autokeras 1.0.3, I will try to help you solve it.
Thank you!
		</comment>
	</comments>
</bug>