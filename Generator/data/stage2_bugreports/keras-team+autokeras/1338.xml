<bug id='1338' author='BryceSchmitt' open_date='2020-09-15T21:13:17Z' closed_time='2020-12-02T22:14:10Z'>
	<summary>ImageRegressor fit crashes with Dataset input because of data_utils.dataset_shape</summary>
	<description>
&lt;denchmark-h:h3&gt;Bug Description&lt;/denchmark-h&gt;

I am using a TensorFlow Dataset as training input for an ImageRegressor; my Dataset contains (input, output) tuples of three channel images as the input and an array of length 1 containing a float as the output. The ImageRegressor.fit function crashes when I call it; I get a different stack trace if I batch my dataset or not before calling fit, but investigating the crashes I have found that they are both caused by the dataset_shape function in autokeras.utils.data_utils returning a shape with None as the size of every dimension.
This function just calls  presumably to return the shape of the elements of the dataset; I looked to see if there were any issues with this function and couldn't find anything other than this function is apparently replaced by  according to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/30774&gt;this TensorFlow issue&lt;/denchmark-link&gt;
.
The following snippet is a comparison of these two functions and the actual shape of my data.
def get_first_element_shape(dataset):
    for thing in dataset:
        if isinstance(thing, tuple):
            return tuple(element.shape for element in thing)
        else:
            return thing.shape

print('Original Dataset')
print(tf.compat.v1.data.get_output_shapes(train_dataset)) # in data_utils.dataset_shape
print(tf.data.experimental.get_structure(train_dataset)) # function that replaces get_ouput_shapes (See TF issue #30774)
print(get_first_element_shape(train_dataset)) # My function to work around the None sized dimensions

x = train_dataset.map(lambda a, b: a)
print('\nX dataset (split out of input dataset by _process_xy in autokeras.automodel)')
print(tf.compat.v1.data.get_output_shapes(x))
print(tf.data.experimental.get_structure(x))
print(get_first_element_shape(x))

batched_dataset = train_dataset.batch(4)
x = batched_dataset.map(lambda a, b: a)
print('\nBatched X dataset')
print(tf.compat.v1.data.get_output_shapes(x))
print(tf.data.experimental.get_structure(x))
print(get_first_element_shape(x))
Output:
&lt;denchmark-code&gt;Original Dataset
(TensorShape([None, None, None]), TensorShape([1]))
(TensorSpec(shape=(None, None, None), dtype=tf.float32, name=None), TensorSpec(shape=(1,), dtype=tf.float32, name=None))
(TensorShape([600, 600, 3]), TensorShape([1]))

X dataset (split out of input dataset by _process_xy in autokeras.automodel)
(None, None, None)
TensorSpec(shape=(None, None, None), dtype=tf.float32, name=None)
(600, 600, 3)

Batched X dataset
(None, None, None, None)
TensorSpec(shape=(None, None, None, None), dtype=tf.float32, name=None)
(4, 600, 600, 3)
&lt;/denchmark-code&gt;

I have verified that all of my x data is the same shape so I don't know why it comes out None. Replacing tf.compat.v1.data.get_output_shapes(dataset) in dataset_shape with the code in my get_first_element_shape function as a workaround stops the crashes and allows me to run fit.
&lt;denchmark-h:h3&gt;Bug Reproduction&lt;/denchmark-h&gt;

reg = ak.ImageRegressor(
    overwrite=True,
    max_trials=1)

reg.fit(train_dataset, epochs=2, validation_data=validation_dataset, batch_size=2)
The train_dataset and validation_dataset are the same data format (they are split from a single source dataset).
&lt;denchmark-h:h3&gt;Setup Details&lt;/denchmark-h&gt;


OS type and version: Ubuntu 18.04 (Docker container from base image tensorflow/tensorflow:2.3.0-jupyter)
Python: 3.6
autokeras: 1.0.8
keras-tuner:1.0.2rc1
tensorflow:2.3.0

	</description>
	<comments>
		<comment id='1' author='BryceSchmitt' date='2020-11-26T10:10:56Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='2' author='BryceSchmitt' date='2020-12-02T22:14:10Z'>
		This issue is not a bug in AutoKeras, but an error I made when creating my dataset. In case anyone encounters this issue, my dataset was read from a TFRecordFile and so the Tensors in it did not have an explicitly defined shape; this is fixed by calling &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/data/Dataset#map&gt;dataset.map&lt;/denchmark-link&gt;
 and using the function &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/ensure_shape&gt;tf.ensure_shape&lt;/denchmark-link&gt;
 in the map function to explicitly set the shape of the Tensors.
		</comment>
	</comments>
</bug>