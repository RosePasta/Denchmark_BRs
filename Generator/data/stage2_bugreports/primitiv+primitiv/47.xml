<bug id='47' author='vbkaisetsu' open_date='2017-11-04T17:21:48Z' closed_time='2017-11-05T16:00:11Z'>
	<summary>[FreeBSD] Python runtime error: "Default object is null."</summary>
	<description>
Steps to reproduce:
Install primitiv in FreeBSD 11.1 by the following commands (root):
pkg install protobuf cmake git googletest python3
python3 -m ensurepip
pip3 install numpy cython
git clone https://github.com/odashi/primitiv.git
cd primitiv
cmake . -DPRIMITIV_BUILD_TESTS=ON
make
make test
make install
cd python-primitiv
env CPLUS_INCLUDE_PATH=/usr/local/include ./setup.py build
The following python code throws an error:
&gt;&gt;&gt; from primitiv import *
&gt;&gt;&gt; dev = devices.Naive()
&gt;&gt;&gt; Device.set_default(dev)
&gt;&gt;&gt; g = Graph()
&gt;&gt;&gt; Graph.set_default(g)
&gt;&gt;&gt; dev == Device.get_default()
True
&gt;&gt;&gt; g == Graph.get_default()
True
&gt;&gt;&gt; node = operators.ones([2,3])               
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "primitiv/_operator.pyx", line 226, in primitiv._operator._operators.ones
    return wrapNode(op_ones[CppNode](normShape(shape).wrapped, device.wrapped[0]))
RuntimeError: /root/primitiv/primitiv/mixins.h: 69: Default object is null.
	</description>
	<comments>
		<comment id='1' author='vbkaisetsu' date='2017-11-04T18:14:46Z'>
		Does this problem also occur with the same C++ implementation?
E.g.:
// test.cc
#include &lt;primitiv/primitiv.h&gt;
int main() {
  primitiv::devices::Naive dev;
  primitiv::Device::set_default(dev);
  primitiv::Graph g;
  primitiv::Graph::set_default(g);
  auto x = primitiv::operators::ones&lt;primitiv::Node&gt;({2, 3});
  return 0;
}
and g++ std=c++11 test.cc -lprimitiv &amp;&amp; ./a.out.
		</comment>
		<comment id='2' author='vbkaisetsu' date='2017-11-04T23:51:45Z'>
		g++ is not installed, so I used clang++ instead: clang++ -std=c++11 test.cc -lprimitiv.
No error occurs.
I found that repository's Python 3.6.2 is built with Clang 3.8.0, but clang++ 4.0.0 is installed.
I will try to build Python 3 from a source code.
		</comment>
		<comment id='3' author='vbkaisetsu' date='2017-11-05T10:19:32Z'>
		This issue does not occur before &lt;denchmark-link:https://github.com/primitiv/primitiv/commit/f1206e447f4d5e61617c2ed7ed9df3696005922f&gt;f1206e4&lt;/denchmark-link&gt;
, and the cause of the issue might be a (bug?) behavior of the linker about . We need some optional code to avoid this.
		</comment>
		<comment id='4' author='vbkaisetsu' date='2017-11-05T10:29:49Z'>
		Particularly, the linker may not generate an instance of DefaultSettable&lt;T&gt;::default_obj_ for some reason. Could you please add below code in device.cc and a similar one in graph.cc and re-compile whole library?
#if SOME_LINKER_DEPENDENT_CONDITIONS
namespace primitiv {
namespace mixins {

template&lt;&gt;
Device *DefaultSettable&lt;Device&gt;::default_obj_ = nullptr;

}  // namespace mixins
}  // namespace primitiv
#endif  // SOME_LINKER_DEPENDENT_CONDITIONS
		</comment>
		<comment id='5' author='vbkaisetsu' date='2017-11-05T10:35:24Z'>
		&lt;denchmark-link:https://github.com/odash&gt;@odash&lt;/denchmark-link&gt;
 It works fine. I used  switch.
		</comment>
		<comment id='6' author='vbkaisetsu' date='2017-11-05T10:40:57Z'>
		I attach output of nm command:
&lt;denchmark-code&gt;# Ubuntu g++ 7.2.0
$ nm ../build/primitiv/libprimitiv.so | grep default_obj_
00000000002e3548 u _ZN8primitiv6mixins15DefaultSettableINS_5GraphEE12default_obj_E
00000000002e3540 u _ZN8primitiv6mixins15DefaultSettableINS_6DeviceEE12default_obj_E

# FreeBSD clang++ 4.0.0
# nm ../primitiv/libprimitiv.so  |  grep default_obj_
0000000000303690 V _ZN8primitiv6mixins15DefaultSettableINS_5GraphEE12default_obj_E
0000000000303688 V _ZN8primitiv6mixins15DefaultSettableINS_6DeviceEE12default_obj_E

# MacOS X clang++ 900.0.38
$ nm ./primitiv/libprimitiv.dylib | grep default_obj_
00000000000b5e18 D __ZN8primitiv6mixins15DefaultSettableINS_5GraphEE12default_obj_E
00000000000b5db8 D __ZN8primitiv6mixins15DefaultSettableINS_6DeviceEE12default_obj_E

u: unique global symbol
V: weak object symbol
D: symbol in the initialized data section
&lt;/denchmark-code&gt;

clang++ on FreeBSD generates weak object (V) for default_obj_ used for {get,set}_default() functions.
		</comment>
		<comment id='7' author='vbkaisetsu' date='2017-11-05T11:05:47Z'>
		This looks strange. Does it need some reports to the distribution (or searching threads about this issue)?
		</comment>
		<comment id='8' author='vbkaisetsu' date='2017-11-05T11:08:29Z'>
		BTW, the compiler switch should describe the meaning of its behavior. I recommend, e.g., PRIMITIV_NEED_EXPLICIT_STATIC_MEMBERS and this should be synthesized using CMakeLists.txt and config.h.in.
		</comment>
		<comment id='9' author='vbkaisetsu' date='2017-11-05T11:21:40Z'>
		Is it a GCC extension? But current mix-ins work well on Clang of OSX.
&lt;denchmark-link:https://stackoverflow.com/questions/1553854/template-static-variable&gt;https://stackoverflow.com/questions/1553854/template-static-variable&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='vbkaisetsu' date='2017-11-05T11:26:38Z'>
		According to &lt;denchmark-link:https://sourceware.org/binutils/docs/binutils/nm.html&gt;this page&lt;/denchmark-link&gt;
,  is a GNU extension. clang on OSX uses  which is not a GNU extension.
		</comment>
		<comment id='11' author='vbkaisetsu' date='2017-11-05T11:32:34Z'>
		Thanks. Could we always enable code described above w/o compiler switches? If it is natural way, we should select it by default.
		</comment>
		<comment id='12' author='vbkaisetsu' date='2017-11-05T11:56:46Z'>
		Could you please check what symbol is referred to from the python module. I guess that in FreeBSD you end up with two copies of the variable: first in the python binary and the second in the c++ binary.
		</comment>
		<comment id='13' author='vbkaisetsu' date='2017-11-05T12:05:15Z'>
		It looks mysterious.

w/o explicit instantiation (in Clang/FreeBSD): C++ module has only weak objects and Python module defines its own explicit instances? Where do the pointers in the C++ module access to?
w/ explicit instantiation: C++ module has instances and the Python module links to them?

		</comment>
		<comment id='14' author='vbkaisetsu' date='2017-11-05T12:19:20Z'>
		More speculations:
On other unixes the linkers seem to prefer symbols from shared libraries over the weak symbols in object files.
On FreeBSD they are treated in a same way, so when compiling a python module, the first symbol (probably from an object file) is used instead of a correct one (from the C++ .so binary).
Then explicit template specialization creates a strong symbol (in a C++ binary) and only then it is preferred over weak ones in object files.
So one more idea for debugging this: what happens if you pass a primitiv.so as a first input argument, before any python library object files when linking a python module.
		</comment>
		<comment id='15' author='vbkaisetsu' date='2017-11-05T12:35:00Z'>
		Here is a result of nm (FreeBSD).
&lt;denchmark-code&gt;w/o explicit instantiation:
root@:~/primitiv # nm ./primitiv/libprimitiv.so | grep default_obj_
0000000000303690 V _ZN8primitiv6mixins15DefaultSettableINS_5GraphEE12default_obj_E
0000000000303688 V _ZN8primitiv6mixins15DefaultSettableINS_6DeviceEE12default_obj_E

root@:~/primitiv # nm ./python-primitiv/build/lib.freebsd-11.1-RELEASE-amd64-3.6/primitiv/_graph.so | grep default_obj_
000000000021d740 V _ZN8primitiv6mixins15DefaultSettableINS_5GraphEE12default_obj_E
000000000021d738 V _ZN8primitiv6mixins15DefaultSettableINS_6DeviceEE12default_obj_E

=============================
w/ explicit instantiation:
root@:~/primitiv # nm ./primitiv/libprimitiv.so | grep default_obj_
0000000000303690 B _ZN8primitiv6mixins15DefaultSettableINS_5GraphEE12default_obj_E
0000000000303688 B _ZN8primitiv6mixins15DefaultSettableINS_6DeviceEE12default_obj_E

root@:~/primitiv # nm ./python-primitiv/build/lib.freebsd-11.1-RELEASE-amd64-3.6/primitiv/_graph.so | grep default_obj_
000000000021d740 V _ZN8primitiv6mixins15DefaultSettableINS_5GraphEE12default_obj_E
000000000021d738 V _ZN8primitiv6mixins15DefaultSettableINS_6DeviceEE12default_obj_E

V: weak object
B: uninitialized data section
&lt;/denchmark-code&gt;

Explicit instantiation generates a normal symbol for C++ library, and weak symbol for Python library.
		</comment>
		<comment id='16' author='vbkaisetsu' date='2017-11-05T12:39:22Z'>
		Check the pointers in terms of the 1st case. Do both .so generate different instances?
		</comment>
		<comment id='17' author='vbkaisetsu' date='2017-11-05T12:43:17Z'>
		To do above, e.g., adding code cout &lt;&lt; &amp;default_obj_ &lt;&lt; endl; to any functions of DefaultSettable&lt;T&gt;.
		</comment>
		<comment id='18' author='vbkaisetsu' date='2017-11-05T12:45:33Z'>
		&lt;denchmark-link:https://github.com/odashi&gt;@odashi&lt;/denchmark-link&gt;
 Yes. Two addresses ( in  and  in ) are different value.
		</comment>
		<comment id='19' author='vbkaisetsu' date='2017-11-05T12:49:10Z'>
		Okay, thanks. Could you be able to check it in the 2nd case, and also other platforms?
		</comment>
		<comment id='20' author='vbkaisetsu' date='2017-11-05T12:51:35Z'>
		And is it possible to do &lt;denchmark-link:https://github.com/primitiv/primitiv/issues/47#issuecomment-341968983&gt;#47 (comment)&lt;/denchmark-link&gt;
? I guess it is little difficult with Cython.
		</comment>
		<comment id='21' author='vbkaisetsu' date='2017-11-05T12:53:29Z'>
		I think this is actually a bug of FreeBSD toolchain/dynamic linker, but an actual fix for this should be probably somehow not to leak default_obj_ to .h files.
		</comment>
		<comment id='22' author='vbkaisetsu' date='2017-11-05T12:54:34Z'>
		Yup, I guess so.
		</comment>
		<comment id='23' author='vbkaisetsu' date='2017-11-05T12:55:20Z'>
		&lt;denchmark-link:https://github.com/eiennohito&gt;@eiennohito&lt;/denchmark-link&gt;


So one more idea for debugging this: what happens if you pass a primitiv.so as a first input argument, before any python library object files when linking a python module.

Here is the current linking command:
c++ -shared -lpthread -L/usr/local/lib -fstack-protector build/temp.freebsd-11.1-RELEASE-amd64-3.6/primitiv/_graph.o -L/usr/local/lib -lprimitiv -lpython3.6m -o build/lib.free bsd-11.1-RELEASE-amd64-3.6/primitiv/_graph.so
Could you tell me the order of arguments?
		</comment>
		<comment id='24' author='vbkaisetsu' date='2017-11-05T12:56:20Z'>
		&lt;denchmark-link:https://github.com/vbkaisetsu&gt;@vbkaisetsu&lt;/denchmark-link&gt;
 Place  at the first argument (out of all libraries that use primitiv headers).
		</comment>
		<comment id='25' author='vbkaisetsu' date='2017-11-05T12:57:41Z'>
		Instead of -lprimitiv could you please pass the full path to .so file, like:
&lt;denchmark-code&gt;c++ -shared -lpthread -L/usr/local/lib &lt;full_path_to&gt;/primitiv.so -fstack-protector build/temp.freebsd-11.1-RELEASE-amd64-3.6/primitiv/_graph.o -L/usr/local/lib  -lpython3.6m -o build/lib.free bsd-11.1-RELEASE-amd64-3.6/primitiv/_graph.so
&lt;/denchmark-code&gt;

That's actually would be a bit more robust, but the variant above may do as well.
		</comment>
		<comment id='26' author='vbkaisetsu' date='2017-11-05T13:01:52Z'>
		It does not affect:
&lt;denchmark-code&gt;root@:~/primitiv/python-primitiv # c++ -shared -lpthread -L/usr/local/lib /usr/lib/libprimitiv.so -fstack-protector build/temp.freebsd-11.1-RELEASE-amd64-3.6/primitiv/_graph.o -L/usr/local/lib -lpython3.6m -o build/lib.freebsd-11.1-RELEASE-amd64-3.6/primitiv/_graph.so
root@:~/primitiv/python-primitiv # nm build/lib.freebsd-11.1-RELEASE-amd64-3.6/primitiv/_graph.so | grep default_obj_
000000000021d740 V _ZN8primitiv6mixins15DefaultSettableINS_5GraphEE12default_obj_E
000000000021d738 V _ZN8primitiv6mixins15DefaultSettableINS_6DeviceEE12default_obj_E
&lt;/denchmark-code&gt;

		</comment>
		<comment id='27' author='vbkaisetsu' date='2017-11-05T13:04:16Z'>
		One more thought on the topic: building an intermediate primitiv library to be static (with -fPIC though) should work around this problem as well.
		</comment>
		<comment id='28' author='vbkaisetsu' date='2017-11-05T13:42:11Z'>
		I observed that always enabling the &lt;denchmark-link:https://github.com/primitiv/primitiv/pull/48&gt;#48&lt;/denchmark-link&gt;
 option can be compiled but does not pass C++ tests on OSX/Clang.
		</comment>
		<comment id='29' author='vbkaisetsu' date='2017-11-05T14:48:56Z'>
		

Build OK?




OSX
FreeBSD
Linux




w/o explicit
OK
OK
OK


w/ explicit
OK
OK
Failed





Symbol type of default_obj_





OSX
FreeBSD
Linux




w/o explicit
C++ lib
D
V
u



Python lib
D
V
u



Address
Same
Diff
Same


w/ explicit
C++ lib
S
B
N/A



Python lib
D
V
N/A



Address
Diff
Same
N/A





		</comment>
		<comment id='30' author='vbkaisetsu' date='2017-11-05T15:45:21Z'>
		Thanks! It looks really buggy.
For now, it'd be OK for me to leave this issue with merging &lt;denchmark-link:https://github.com/primitiv/primitiv/pull/48&gt;#48&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>