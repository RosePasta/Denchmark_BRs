<bug id='244' author='cs2be' open_date='2018-02-01T21:52:44Z' closed_time='2018-02-08T18:22:02Z'>
	<summary>No cross-platform compatibility of logs</summary>
	<description>
visualDL has errors when reading logs from another system.  For example If logs were generate on linux, and user reads the logs on macOS, the visualDL server will run into alot of errors.
	</description>
	<comments>
		<comment id='1' author='cs2be' date='2018-02-02T19:42:45Z'>
		The issue seems to be with "std::hashstd::string".  The hash method is returning different values on Linux and OSX.
binary_record.h:72:
std::string hash() { return std::to_string(hasher(data)); }
So when we read the binary record, we compare the file hash and throw an error if the hash doesn't match:
binary_record.h:85:
CHECK_EQ(hash(), hash_) &lt;&lt; "data broken: " &lt;&lt; path;
I created a test in "test_binary_record.cc"
&lt;denchmark-code&gt;  std::string message = "hello world";
  BinaryRecord rcd("./", std::move(message));
  rcd.tofile();

  BinaryRecordReader reader("./", rcd.hash());
  LOG(INFO) &lt;&lt; reader.data;
  ASSERT_EQ(reader.data, "hello world");

  std::hash&lt;std::string&gt; hasher;
  std::cout &lt;&lt; "HASH: " &lt;&lt; hasher(message) &lt;&lt; std::endl;
}
&lt;/denchmark-code&gt;

And ran test on both Ubuntu and OSX:
Ubuntu:
&lt;denchmark-code&gt;root@cc62a709b30a:/visualdl/build2# ./vl_test 
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from BinaryRecord
[ RUN      ] BinaryRecord.init
WARNING: Logging before InitGoogleLogging() is written to STDERR
I0202 19:39:27.768194  5961 test_binary_record.cc:27] hello world
HASH: 5577293430985752569
[       OK ] BinaryRecord.init (5 ms)
[----------] 1 test from BinaryRecord (5 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (5 ms total)
[  PASSED  ] 1 test.
&lt;/denchmark-code&gt;

OSX:
&lt;denchmark-code&gt;(venv) Thuans-MacBook-Pro-2:build thuan$ ./vl_test 
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from BinaryRecord
[ RUN      ] BinaryRecord.init
WARNING: Logging before InitGoogleLogging() is written to STDERR
I0202 11:38:29.180557 4007486400 test_binary_record.cc:27] hello world
HASH: 12386028635079221413
[       OK ] BinaryRecord.init (1 ms)
[----------] 1 test from BinaryRecord (1 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (1 ms total)
[  PASSED  ] 1 test.
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/Superjomn&gt;@Superjomn&lt;/denchmark-link&gt;
 I'm not an expert in C++, do you know if there is a more consistant hashing method for cross platform?
		</comment>
		<comment id='2' author='cs2be' date='2018-02-03T01:26:10Z'>
		Hash here just works as a filename generator for a BinaryRecord, and it has some bugs, for example, if two image components add two same image records, these two records will be saved to one same file called daffa(a hash code), if any image component update this record, it will delete the daffa file even another image component still needs it.
So I think a simple but bug-free way is to define a filename generator that does not depend on the content of the record, for example, just a global counter(static) seems work.
		</comment>
		<comment id='3' author='cs2be' date='2018-02-08T18:22:01Z'>
		Fixed in &lt;denchmark-link:https://github.com/PaddlePaddle/VisualDL/pull/260&gt;#260&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>