<bug id='123' author='ajabri' open_date='2019-12-29T22:40:37Z' closed_time='2020-01-07T00:42:21Z'>
	<summary>EGL initialization error</summary>
	<description>
Hi,
I've recently come across the following error, on a machine with Nvidia driver version: 440.33.01    CUDA version: 10.2, when trying to use EGL for headless rendering. The same exact code was running properly on a machine with CUDA Version 10.1 and driver version 390.
Any idea how to fix the issue? I've tried reinstalling dm_control with pip.
&lt;denchmark-code&gt;  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/suite/__init__.py", line 28, in &lt;module&gt;
    from dm_control.suite import acrobot
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/suite/acrobot.py", line 24, in &lt;module&gt;
    from dm_control import mujoco
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/mujoco/__init__.py", line 18, in &lt;module&gt;
    from dm_control.mujoco.engine import action_spec
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/mujoco/engine.py", line 44, in &lt;module&gt;
    from dm_control import _render
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/__init__.py", line 75, in &lt;module&gt;
    Renderer = import_func()
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/__init__.py", line 36, in _import_egl
    from dm_control._render.pyopengl.egl_renderer import EGLContext
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/pyopengl/egl_renderer.py", line 66, in &lt;module&gt;
    EGL_DISPLAY = create_initialized_headless_egl_display()
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/pyopengl/egl_renderer.py", line 49, in create_initialized_headless_egl_display
    for device in EGL.eglQueryDevicesEXT():
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/pyopengl/egl_ext.py", line 65, in eglQueryDevicesEXT
    success = _eglQueryDevicesEXT(max_devices, devices, num_devices)
ctypes.ArgumentError: argument 2: &lt;class 'TypeError'&gt;: expected LP_c_void_p instance instead of EGLDeviceEXT_pointer_Array_10
&lt;/denchmark-code&gt;

Thanks,
A
	</description>
	<comments>
		<comment id='1' author='ajabri' date='2020-01-02T21:49:15Z'>
		Try to do
$ export DISPLAY=:0
in your terminal and try again, it works for me.
		</comment>
		<comment id='2' author='ajabri' date='2020-01-03T04:19:44Z'>
		&lt;denchmark-link:https://github.com/xinleipan&gt;@xinleipan&lt;/denchmark-link&gt;
 In this case, I'm trying to use EGL for  rendering. Setting "DISPLAY=:0" results in the below error. Are you rendering with glfw or osmesa?
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "main_maw.py", line 6, in &lt;module&gt;
    import dmc_wrapper as dmc2gym
  File "/home/aj/rlpyt/selfish/dmc_wrapper.py", line 2, in &lt;module&gt;
    from dm_control import suite
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/suite/__init__.py", line 28, in &lt;module&gt;
    from dm_control.suite import acrobot
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/suite/acrobot.py", line 24, in &lt;module&gt;
    from dm_control import mujoco
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/mujoco/__init__.py", line 18, in &lt;module&gt;
    from dm_control.mujoco.engine import action_spec
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/mujoco/engine.py", line 44, in &lt;module&gt;
    from dm_control import _render
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/__init__.py", line 67, in &lt;module&gt;
    Renderer = import_func()  # pylint: disable=invalid-name
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/__init__.py", line 36, in _import_egl
    from dm_control._render.pyopengl.egl_renderer import EGLContext
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/pyopengl/egl_renderer.py", line 68, in &lt;module&gt;
    raise ImportError('Cannot initialize a headless EGL display.')
ImportError: Cannot initialize a headless EGL display.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='ajabri' date='2020-01-04T00:17:08Z'>
		I'm not sure, sorry. Maybe it's GLFW, I just installed MuJoCo normally with a Ubuntu 16.04 machine, CUDA 8.0 and NVIDIA GPU.
		</comment>
		<comment id='4' author='ajabri' date='2020-01-04T03:55:54Z'>
		same issue here on a ubuntu box.
		</comment>
		<comment id='5' author='ajabri' date='2020-01-04T04:02:28Z'>
		Problem solved, use this: &lt;denchmark-link:https://github.com/ajabri&gt;@ajabri&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;export MUJOCO_GL="glfw"
&lt;/denchmark-code&gt;

In order to avoid the EGL, one way I have seen working is to use the GLFW backend. To do so, you need to set the environment flag to glfw. Then you need a display port that is actually available.
		</comment>
		<comment id='6' author='ajabri' date='2020-01-04T04:04:41Z'>
		I need headless rendering, so I need to use EGL as my rendering backend.
The same code worked on another machine, the only difference being (I
believe) that the machine on which I obtain the above error has a much more
recent nvidia driver (440 vs 390).
		</comment>
		<comment id='7' author='ajabri' date='2020-01-04T05:03:05Z'>
		&lt;denchmark-link:https://github.com/ajabri&gt;@ajabri&lt;/denchmark-link&gt;
 if X display is not available, you can use "osmesa" backend.
(for the interest of others: won't work even if you install Xvfb and GLFW because they require X-display)
&lt;denchmark-code&gt;export MUJOCO_GL="osmesa"
&lt;/denchmark-code&gt;

Here is the full setup for a headless linux box with no built-in X display:
      export MUJOCO_GL=osmesa
      export MJLIB_PATH=$HOME/.mujoco/mujoco200/bin/libmujoco200.so
      export MJKEY_PATH=$HOME/.mujoco/mujoco200/mjkey.txt
      export LD_LIBRARY_PATH=$HOME/.mujoco/mujoco200/bin:$LD_LIBRARY_PATH
      export MUJOCO_PY_MJPRO_PATH=$HOME/.mujoco/mujoco200/
      export MUJOCO_PY_MJKEY_PATH=$HOME/.mujoco/mujoco200/mjkey.txt
&lt;denchmark-link:https://github.com/saran-t&gt;@saran-t&lt;/denchmark-link&gt;
 maybe we can add this to the documentation? :)
		</comment>
		<comment id='8' author='ajabri' date='2020-01-04T05:12:16Z'>
		Hmmm, EGL should allow for hardware accelerated headless rendering without
X display. Has worked properly for me in the past. Will look into other differences of current setup.
		</comment>
		<comment id='9' author='ajabri' date='2020-01-04T05:16:12Z'>
		Maybe we can ping &lt;denchmark-link:https://github.com/saran-t&gt;@saran-t&lt;/denchmark-link&gt;
 about that
		</comment>
		<comment id='10' author='ajabri' date='2020-01-05T07:42:29Z'>
		
@ajabri if X display is not available, you can use "osmesa" backend.
(for the interest of others: won't work even if you install Xvfb and GLFW because they require X-display)
export MUJOCO_GL="osmesa"

Here is the full setup for a headless linux box with no built-in X display:
      export MUJOCO_GL=osmesa
      export MJLIB_PATH=$HOME/.mujoco/mujoco200/bin/libmujoco200.so
      export MJKEY_PATH=$HOME/.mujoco/mujoco200/mjkey.txt
      export LD_LIBRARY_PATH=$HOME/.mujoco/mujoco200/bin:$LD_LIBRARY_PATH
      export MUJOCO_PY_MJPRO_PATH=$HOME/.mujoco/mujoco200/
      export MUJOCO_PY_MJKEY_PATH=$HOME/.mujoco/mujoco200/mjkey.txt
@saran-t maybe we can add this to the documentation? :)

This way exactly solve me from those terrible mistakes
		</comment>
		<comment id='11' author='ajabri' date='2020-01-05T12:45:38Z'>
		I can't see how a CUDA upgrade could have changed anything given that we are specifying the argument types ourselves, but one thing that you could try is to change this line
&lt;denchmark-link:https://github.com/deepmind/dm_control/blob/master/dm_control/_render/pyopengl/egl_ext.py#L65&gt;https://github.com/deepmind/dm_control/blob/master/dm_control/_render/pyopengl/egl_ext.py#L65&lt;/denchmark-link&gt;

to
success = _eglQueryDevicesEXT(max_devices, ctypes.POINTER(ctypes.c_void_p)(ctypes.addressof(devices)), num_devices)
Let me know if this works.
		</comment>
		<comment id='12' author='ajabri' date='2020-01-06T18:17:35Z'>
		The above change gives me the following error:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "main_maw.py", line 6, in &lt;module&gt;
    import dmc_wrapper as dmc2gym
  File "/home/aj/rlpyt/selfish/dmc_wrapper.py", line 2, in &lt;module&gt;
    from dm_control import suite
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/suite/__init__.py", line 28, in &lt;module&gt;
    from dm_control.suite import acrobot
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/suite/acrobot.py", line 24, in &lt;module&gt;
    from dm_control import mujoco
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/mujoco/__init__.py", line 18, in &lt;module&gt;
    from dm_control.mujoco.engine import action_spec
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/mujoco/engine.py", line 44, in &lt;module&gt;
    from dm_control import _render
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/__init__.py", line 67, in &lt;module&gt;
    Renderer = import_func()  # pylint: disable=invalid-name
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/__init__.py", line 36, in _import_egl
    from dm_control._render.pyopengl.egl_renderer import EGLContext
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/pyopengl/egl_renderer.py", line 66, in &lt;module&gt;
    EGL_DISPLAY = create_initialized_headless_egl_display()
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/pyopengl/egl_renderer.py", line 49, in create_initialized_headless_egl_display
    for device in EGL.eglQueryDevicesEXT():
  File "/home/aj/miniconda3/envs/rlpyt/lib/python3.7/site-packages/dm_control/_render/pyopengl/egl_ext.py", line 66, in eglQueryDevicesEXT
    success = _eglQueryDevicesEXT(max_devices, ctypes.POINTER(ctypes.c_void_p)(ctypes.addressof(devices)), num_devices)
TypeError: expected c_void_p instead of int
&lt;/denchmark-code&gt;

		</comment>
		<comment id='13' author='ajabri' date='2020-01-06T23:43:46Z'>
		I think this was due to an upstream change in PyOpenGL. In versions newer than 3.1.4,  has its own  member (&lt;denchmark-link:https://github.com/mcfletch/pyopengl/commit/38f4cc533b2ed3e85c585c4a4f00ed06f7aa6056&gt;mcfletch/pyopengl@38f4cc5&lt;/denchmark-link&gt;
), which overrides our assignment of  when we do the wildcard import on the last line. Consequently we end up with mismatching pointer types in  and in the body of . I'll put together a fix.
		</comment>
		<comment id='14' author='ajabri' date='2020-01-08T20:00:23Z'>
		Thank you &lt;denchmark-link:https://github.com/alimuldal&gt;@alimuldal&lt;/denchmark-link&gt;
!
		</comment>
	</comments>
</bug>