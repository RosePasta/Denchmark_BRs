<bug id='486' author='jfrancis71' open_date='2020-12-29T15:38:33Z' closed_time='2021-01-18T09:14:53Z'>
	<summary>forward method of UNet when num_layers = 0 produces IndexError: list index out of range</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

The forward method of a UNet object fails with IndexError: list index out of range if it has been constructed with num_layers = 0.
I realise this is not a very exciting UNet example, but it probably should not fail in this way.
(I have a model which uses unets of different depths and it's awkward to have to deal with num_layers=0
as a special case).
&lt;denchmark-h:h4&gt;Code sample&lt;/denchmark-h&gt;

import torch
import pl_bolts.models.vision.unet as plt_unet
my_unet = plt_unet.UNet( num_classes = 20, input_channels = 3, num_layers = 0 )
my_unet( torch.rand( [ 2, 3, 5, 5 ] ) )
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;IndexError                                Traceback (most recent call last)
&lt;ipython-input-6-332b962df305&gt; in &lt;module&gt;
----&gt; 1 my_unet( torch.rand( [ 2, 3, 5, 5 ] ) )

~/anaconda3/envs/PyGenBrix/lib/python3.8/site-packages/torch/nn/modules/module.py in _call_impl(self, *input, **kwargs)
    725             result = self._slow_forward(*input, **kwargs)
    726         else:
--&gt; 727             result = self.forward(*input, **kwargs)
    728         for hook in itertools.chain(
    729                 _global_forward_hooks.values(),

~/anaconda3/envs/PyGenBrix/lib/python3.8/site-packages/pl_bolts/models/vision/unet.py in forward(self, x)
     56         # Up path
     57         for i, layer in enumerate(self.layers[self.num_layers:-1]):
---&gt; 58             xi[-1] = layer(xi[-1], xi[-2 - i])
     59         return self.layers[-1](xi[-1])
     60 

IndexError: list index out of range
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

I expected it to produce a tensor of shape [ 2, 20, 5, 5 ].
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;


PyTorch Version 1.7.1
OS (e.g., Linux): Ubuntu 18.04
How you installed PyTorch (conda, pip, source): conda install torch
Build command you used (if compiling from source):
Python version: 3.8.5
CUDA/cuDNN version:
GPU models and configuration:
Any other relevant information:

Pytorch lightning bolts: 0.2.6rc1
	</description>
	<comments>
		<comment id='1' author='jfrancis71' date='2020-12-29T15:39:19Z'>
		Hi! thanks for your contribution!, great first issue!
		</comment>
		<comment id='2' author='jfrancis71' date='2021-01-06T08:07:15Z'>
		yes, I agree that there shall be some assert for num_layers &gt; 0, mind sens PR with a fix? üê∞
		</comment>
		<comment id='3' author='jfrancis71' date='2021-01-07T17:25:09Z'>
		Yes, I believe I have a fix for this. I think there is also an error condition where a tensor can be passed in which is too small for the selected num_layers.
I am double checking both and hope to submit a PR in the next couple of days
		</comment>
		<comment id='4' author='jfrancis71' date='2021-01-08T08:37:31Z'>
		I have submitted a PR for this. &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning-bolts/pull/498&gt;#498&lt;/denchmark-link&gt;

Note, my original expected behaviour of outputting a tensor is not correct (I had confused num_layers with number of upsampling stages). Nevertheless the PR containing a more helpful error message will hopefully be more informative.
Regarding my previous comment about input tensors which are too small I have not put into this PR, as it is a related but slightly separate issue
		</comment>
	</comments>
</bug>