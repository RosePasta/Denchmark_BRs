<bug id='1791' author='AnselmC' open_date='2020-05-05T17:07:03Z' closed_time='2020-08-31T11:26:51Z'>
	<summary>Can't get Open3d to work with multiprocessing and OpenCV feature detection</summary>
	<description>
IMPORTANT: Please use the following template to report the bug.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Describe the bug
First of all, thanks for this library!
However, I can't seem to get it to work for my purposes: using it with opencv feature detection and multiprocessing.
I am unsure whether this is a bug in open3d or not but it's one of the three bug candidates and a more likely candidate than opencv and python's multiprocessing (I would assume since less people have worked on it for less time.) Of course, by that logic most likely it's me ;)
Anyway, I also created a stack overflow &lt;denchmark-link:https://stackoverflow.com/questions/61618467/trouble-working-with-open3d-pythons-multiprocessing-and-feature-detection&gt;question&lt;/denchmark-link&gt;
 to describe my problem:

In my main process I'm running a non-blocking open3d visualizer, and in a separate process I'm doing some image processing involving feature detection (both ORB and SuperPoint) - but the feature detection function never finishes.

To Reproduce
Run this script, it will get stuck when trying to detect orb features.
import time
import multiprocessing as mp

import cv2
import open3d as o3d
import numpy as np


class Viewer:
    def __init__(self, stop_flag):
        self._stop_flag = stop_flag
        self._vis = o3d.visualization.Visualizer()
        self._vis.create_window()

    def run(self):
        while not self._stop_flag.is_set():
            self._vis.update_geometry()
            self._vis.poll_events()
            self._vis.update_renderer()

        self._vis.destroy_window()


def worker(stop_flag, num_iterations):
    def _generate_img():
        return np.random.randn(400, 400, 3).astype(np.float32)

    def _do_work():
        print("Processing image...")
        orb = cv2.ORB.create()
        orb.detect(_generate_img(), mask=None)
        print("Finished processing")

    for i in range(num_iterations):
        _do_work()
        time.sleep(0.5)
    stop_flag.set()


if __name__ == "__main__":
    stop_flag = mp.Event()
    viewer = Viewer(stop_flag)
    worker_p = mp.Process(target=worker, args=[stop_flag, 10])
    worker_p.start()
    viewer.run()
    worker_p.join()
However, everything works as expected if I

switch to threading instead of multiprocessing

if __name__ == "__main__":
    import threading
    stop_flag = threading.Event()
    viewer = Viewer(stop_flag)
    worker_t = threading.Thread(target=worker, args=[stop_flag, 10])
    worker_t.start()
    viewer.run()
    worker_t.join()

or replace feature detection with some other image processing task

def _do_work():
    print("Processing image...")
    for i in range(5):
        np.fft.fft2(_generate_img())
    print("Finished processing")

or replace the open3d visualizer with opencv visualizations

class Viewer:
    def __init__(self, stop_flag):
        self._stop_flag = stop_flag

    def run(self):
        while not self._stop_flag.is_set():
            frame = np.random.randn(400, 400)
            cv2.imshow("Frame", frame)
            cv2.waitKey(1)

        cv2.waitKey(1)
        cv2.destroyAllWindows()
        cv2.waitKey(1)
Expected behavior
Feature detection doesn't get stuck.
Environment (please complete the following information):

OS: OSX Mojave
Python version: 3.7.7
Open3D version: 0.8.0.0
Is this remote workstation?: no
How did you install Open3D?: pip

	</description>
	<comments>
		<comment id='1' author='AnselmC' date='2020-08-31T11:26:51Z'>
		No longer an issue with 0.10.0.0 for me
		</comment>
	</comments>
</bug>