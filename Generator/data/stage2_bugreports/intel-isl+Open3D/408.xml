<bug id='408' author='HaiDang2001VN' open_date='2018-06-22T15:25:59Z' closed_time='2019-02-19T19:25:22Z'>
	<summary>Failed when import py3d on Windows 10</summary>
	<description>
Hello &lt;denchmark-link:https://github.com/syncle&gt;@syncle&lt;/denchmark-link&gt;
 , thank you and your team with magnificent works in computer vision and graphic processing.
I have compiled Open3D with specified Python 3.5 and VS 2017 (CMake use std:c++14 when compile). Then I built  and it successfully created  on , but when I use Python IDLE 3.5 (64-bit) to import py3d, it get  error.
I checked the system variables and make new var named  (as it doesn't exist), assigned the path of .pyd to it but that seems not getting better.
I also found the same .pyd in  and run python interpreter to import it, received ImportError again.
Did you know about anything caused this error or what info you need more to understand the problem here?
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Info:
OS: Windows 10 64-bit (Ver 1803, Build 17134.112)
VS 2017: MSVC 14.4 and CMake auto-find OpenMP, Python
Python 3.5 (64-bit) and dependencies is along with Open3D (src\External folder)
Thanks in advance.
	</description>
	<comments>
		<comment id='1' author='HaiDang2001VN' date='2018-06-22T15:33:21Z'>
		&lt;denchmark-link:https://github.com/HaiDang2001VN&gt;@HaiDang2001VN&lt;/denchmark-link&gt;

when was the last time you pulled down the Open3D code?
we have changed the  name to  quite a while ago.
please checkout the latest version and try again. alternatively you can try
&lt;denchmark-code&gt;pip install open3d-python
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='HaiDang2001VN' date='2018-06-22T15:52:33Z'>
		Hello &lt;denchmark-link:https://github.com/takanokage&gt;@takanokage&lt;/denchmark-link&gt;
 ,
I cloned the repo 3 hours ago and then built it.
Before cloned it, I eventually try:

then  from Python interpreter but it produced

I don't know what DLL it used so I decied to directly compile from source, but it results as above.
So, alternatively if you know what DLL it needs, please tell me.
Thanks in advance.
		</comment>
		<comment id='3' author='HaiDang2001VN' date='2018-06-22T17:33:08Z'>
		do you have more details on the error?
what version of open3d-python did you try? the latest I uploaded is 0.1.5.5, the previous ones where displaying indeed the error you're describing.
I just tested again and it works on my Windows machine with Python 2.7 and 3.5, 32bit and 64bit.
		</comment>
		<comment id='4' author='HaiDang2001VN' date='2018-06-22T17:35:57Z'>
		I have a similar issue on OSX.
I pip installed, then get:
&lt;denchmark-code&gt;&gt;&gt;&gt; import open3d
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/qianyizh/anaconda/envs/py36/lib/python3.6/site-packages/open3d/__init__.py", line 11, in &lt;module&gt;
    from open3d.macos import *
  File "/Users/qianyizh/anaconda/envs/py36/lib/python3.6/site-packages/open3d/macos/__init__.py", line 7, in &lt;module&gt;
    globals().update(importlib.import_module('open3d.macos.open3d').__dict__)
  File "/Users/qianyizh/anaconda/envs/py36/lib/python3.6/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
ImportError: dlopen(/Users/qianyizh/anaconda/envs/py36/lib/python3.6/site-packages/open3d/macos/open3d.so, 2): Library not loaded: /usr/local/opt/glew/lib/libGLEW.2.1.dylib
  Referenced from: /Users/qianyizh/anaconda/envs/py36/lib/python3.6/site-packages/open3d/macos/open3d.so
  Reason: image not found
&lt;/denchmark-code&gt;

Does it mean I need to install glew?
		</comment>
		<comment id='5' author='HaiDang2001VN' date='2018-06-22T17:50:42Z'>
		I have reinstall via pip but just get ImportError again.
And I use Python 3.5.0 (for more specific: the IDLE show me [MSC v.1900 64 bit (AMD64)] on win32).
		</comment>
		<comment id='6' author='HaiDang2001VN' date='2018-06-22T17:56:34Z'>
		&lt;denchmark-link:https://github.com/qianyizh&gt;@qianyizh&lt;/denchmark-link&gt;
 in your case seems easy enough: install glew. Pretty much all of the dependencies that where installed on my build system have to be installed on the target system.
		</comment>
		<comment id='7' author='HaiDang2001VN' date='2018-06-22T17:58:33Z'>
		&lt;denchmark-link:https://github.com/HaiDang2001VN&gt;@HaiDang2001VN&lt;/denchmark-link&gt;
 yeah, I added yesterday binaries for the 64bit version of Python 2.7 and 3.5.
The one reason that I can think of that this might not work was a report by two other people before that sometimes pip is unable to place the binaries in site-packages. It's just that we've never gathered enough information to figure out why - I can't reproduce it locally.
		</comment>
		<comment id='8' author='HaiDang2001VN' date='2018-06-22T18:02:06Z'>
		Yeah, I know what to do. But it is not written in the document - so it is not obvious.
I think I have similar issue with my Window machine too, some DLL libraries are missing. I think it is because some dependent libraries are either not installed or incorrectly configured.
We should resolve this, either add a document page describing how to install these dependency libraries on various operating systems, or make open3d-python a standalone package that can directly pip install and use out of the box (like opencv-python).
Btw, why does open3d-python install opencv too? I don't think opencv is a dependent library of open3d?
		</comment>
		<comment id='9' author='HaiDang2001VN' date='2018-06-22T18:18:13Z'>
		OpenCV - That's on me. I followed the script for installing the python dependencies and there opencv is mentioned as mandatory.
So you're saying that opencv is not actually required? In that case I can fix both the script and the pip package, just let me know.
		</comment>
		<comment id='10' author='HaiDang2001VN' date='2018-06-29T07:54:25Z'>
		OpenCV is not mandatory. It is optional for Reconstruction system.
		</comment>
		<comment id='11' author='HaiDang2001VN' date='2018-06-29T15:31:20Z'>
		Are we including the reconstruction system in the Open3D python module?
		</comment>
		<comment id='12' author='HaiDang2001VN' date='2018-06-29T18:48:09Z'>
		Reconstruction system is high-level Python tutorial scripts, although the basic functions for the system are implemented as C++ API in Open3D. It is not true that reconstruction system can be included in Open3D Python module, because it is just series of Python tutorial script. The reconstruction system optionally uses Python API of OpenCV, but OpenCV is not necessary to run Open3D python module.
In summary, open3d-python don't have to install opencv. Instead, it could be in util/scripts/install-deps-python.sh as a one of optional Python package.
		</comment>
		<comment id='13' author='HaiDang2001VN' date='2018-06-29T18:57:13Z'>
		
We should resolve this, either add a document page describing how to install these dependency libraries on various operating systems, or make open3d-python a standalone package that can directly pip install and use out of the box (like opencv-python).

I agree. Can we make a standalone package? I think this would be much convenient than writing a long document case by case. As &lt;denchmark-link:https://github.com/qianyizh&gt;@qianyizh&lt;/denchmark-link&gt;
 mentioned, I also encountered the similar error:
&lt;denchmark-code&gt;&gt;&gt;&gt; import open3d
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/jaesikpa/anaconda/lib/python3.6/site-packages/open3d/__init__.py", line 11, in &lt;module&gt;
    from open3d.macos import *
  File "/Users/jaesikpa/anaconda/lib/python3.6/site-packages/open3d/macos/__init__.py", line 7, in &lt;module&gt;
    globals().update(importlib.import_module('open3d.macos.open3d').__dict__)
  File "/Users/jaesikpa/anaconda/lib/python3.6/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
ImportError: dlopen(/Users/jaesikpa/anaconda/lib/python3.6/site-packages/open3d/macos/open3d.so, 2): Library not loaded: /usr/local/opt/jpeg/lib/libjpeg.9.dylib
  Referenced from: /Users/jaesikpa/anaconda/lib/python3.6/site-packages/open3d/macos/open3d.so
  Reason: Incompatible library version: open3d.so requires version 13.0.0 or later, but libjpeg.9.dylib provides version 12.0.0
&lt;/denchmark-code&gt;

I know this is dependency problem, but someone just want to use Open3D out-of-box.
		</comment>
		<comment id='14' author='HaiDang2001VN' date='2018-07-03T17:36:02Z'>
		This is burning. I just tried on my Ubuntu machine, and this is what I got:
&lt;denchmark-code&gt;&gt; pip install open3d-python
Collecting open3d-python
  Downloading https://files.pythonhosted.org/packages/2d/b3/3c1a6afa37f9ad2c85ab2c2abd249432bab06fb8e00ab94f8c4cd060b234/open3d_python-0.1.5.5-py2.py3-none-any.whl (7.7MB)
    100% |████████████████████████████████| 7.8MB 6.8MB/s 
Requirement already satisfied: numpy in /home/qianyizh/anaconda3/lib/python3.6/site-packages (from open3d-python) (1.14.3)
Requirement already satisfied: matplotlib in /home/qianyizh/anaconda3/lib/python3.6/site-packages (from open3d-python) (2.2.2)
Collecting opencv-python (from open3d-python)
  Using cached https://files.pythonhosted.org/packages/7c/78/bc95e29057e80d1da71912426113e85f20752b1031193f51750322354937/opencv_python-3.4.1.15-cp36-cp36m-manylinux1_x86_64.whl
Requirement already satisfied: cycler&gt;=0.10 in /home/qianyizh/anaconda3/lib/python3.6/site-packages (from matplotlib-&gt;open3d-python) (0.10.0)
Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&gt;=2.0.1 in /home/qianyizh/anaconda3/lib/python3.6/site-packages (from matplotlib-&gt;open3d-python) (2.2.0)
Requirement already satisfied: python-dateutil&gt;=2.1 in /home/qianyizh/anaconda3/lib/python3.6/site-packages (from matplotlib-&gt;open3d-python) (2.6.1)
Requirement already satisfied: pytz in /home/qianyizh/anaconda3/lib/python3.6/site-packages (from matplotlib-&gt;open3d-python) (2017.2)
Requirement already satisfied: six&gt;=1.10 in /home/qianyizh/anaconda3/lib/python3.6/site-packages (from matplotlib-&gt;open3d-python) (1.11.0)
Requirement already satisfied: kiwisolver&gt;=1.0.1 in /home/qianyizh/anaconda3/lib/python3.6/site-packages (from matplotlib-&gt;open3d-python) (1.0.1)
Requirement already satisfied: setuptools in /home/qianyizh/anaconda3/lib/python3.6/site-packages (from kiwisolver&gt;=1.0.1-&gt;matplotlib-&gt;open3d-python) (36.5.0.post20170921)
Installing collected packages: opencv-python, open3d-python
Successfully installed open3d-python-0.1.5.5 opencv-python-3.4.1.15
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;Python 3.6.5 |Anaconda custom (64-bit)| (default, Apr 29 2018, 16:14:56) 
[GCC 7.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import open3d
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/qianyizh/anaconda3/lib/python3.6/site-packages/open3d/__init__.py", line 9, in &lt;module&gt;
    from open3d.linux import *
  File "/home/qianyizh/anaconda3/lib/python3.6/site-packages/open3d/linux/__init__.py", line 7, in &lt;module&gt;
    globals().update(importlib.import_module('open3d.linux.open3d').__dict__)
  File "/home/qianyizh/anaconda3/lib/python3.6/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
ImportError: /home/qianyizh/anaconda3/lib/python3.6/site-packages/open3d/linux/open3d.so: undefined symbol: _Py_ZeroStruct
&lt;/denchmark-code&gt;

On my OSX:
&lt;denchmark-code&gt;Python 3.6.4 |Anaconda custom (64-bit)| (default, Jan 16 2018, 12:04:33) 
[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import open3d
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/qianyizh/anaconda/envs/py36/lib/python3.6/site-packages/open3d/__init__.py", line 11, in &lt;module&gt;
    from open3d.macos import *
  File "/Users/qianyizh/anaconda/envs/py36/lib/python3.6/site-packages/open3d/macos/__init__.py", line 7, in &lt;module&gt;
    globals().update(importlib.import_module('open3d.macos.open3d').__dict__)
  File "/Users/qianyizh/anaconda/envs/py36/lib/python3.6/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
ImportError: dlopen(/Users/qianyizh/anaconda/envs/py36/lib/python3.6/site-packages/open3d/macos/open3d.so, 2): Library not loaded: /usr/local/opt/glew/lib/libGLEW.2.1.dylib
  Referenced from: /Users/qianyizh/anaconda/envs/py36/lib/python3.6/site-packages/open3d/macos/open3d.so
  Reason: image not found
&lt;/denchmark-code&gt;

On my windows: never succeeded.
We need to hot fix this. &lt;denchmark-link:https://github.com/takanokage&gt;@takanokage&lt;/denchmark-link&gt;
 can you look into this and give a daily update about it? If you are on vacation, assign someone else (Jaesik or me) so we know the ownership.
		</comment>
		<comment id='15' author='HaiDang2001VN' date='2018-07-03T17:55:18Z'>
		I see there's a mismatch between python installations. It would seem that you're running a custom Python installation, this is why it's not able to import Open3D.
Open3D as it is today is only supported with the standard Python installation. That was the specification of the pip package ticket when I worked on it.
Open3D is not supported on Anaconda Python - this is not a bug, it is a feature request.
This week I'm 100% working on another project, adding support for Anaconda, or anything else for that matter, will have to wait.
		</comment>
		<comment id='16' author='HaiDang2001VN' date='2018-07-03T18:06:53Z'>
		Thanks for the update. Agree this is a feature that has not been built yet. And we should build it.
I am more worried about the ownership of this issue since I know you will be on leave since next week. If you can't work on this this week either, then it probably makes more sense for me or &lt;denchmark-link:https://github.com/syncle&gt;@syncle&lt;/denchmark-link&gt;
 to just take the ownership until you come back from leave.
		</comment>
		<comment id='17' author='HaiDang2001VN' date='2018-07-03T18:07:38Z'>
		Open3D is supported on Ubuntu/macOS/Windows only on a standard/native Python distribution, not AnaConda.
pip install open3d-python was tested and found to be working out of the box with:

Windows, python installed from https://www.python.org/downloads/, 2.7 &amp; 3.5 32bit and 64bit
MacOS, system python 2.7
Ubuntu, system python 2.7 and python 3.5 installed through apt.

For any other use cases please open appropriate feature requests and close this.
Explanation:
It is possible to invoke pip with package managers such as conda however this is a non-standard way of installing packages on conda. Open3D is supported on only native Python installations and will not work if installed with pip from conda just because they use different paths for the pip packages.
		</comment>
		<comment id='18' author='HaiDang2001VN' date='2018-07-03T18:13:33Z'>
		&lt;denchmark-link:https://github.com/qianyizh&gt;@qianyizh&lt;/denchmark-link&gt;

We have a workaround for this: native Python installation.
I would recommend reducing the urgency from  to  ;). I am hoping that this workaround can help alleviate the problem.
I think a lot of this confusion was caused by the fact that so far we've assumed that all Python installations are created equal. That is not true. We need a list of all the package managers that manage Python in their own unique way and after that decide which of these we want to support.
		</comment>
		<comment id='19' author='HaiDang2001VN' date='2018-07-03T18:26:03Z'>
		Good. I think the easiest fix for now is to add this as a "note" in the document of:
&lt;denchmark-link:http://www.open3d.org/docs/tutorial/Basic/python_interface.html#install-open3d-from-pypi&gt;http://www.open3d.org/docs/tutorial/Basic/python_interface.html#install-open3d-from-pypi&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;Open3D is supported on Ubuntu/macOS/Windows only on a standard/native Python distribution, not AnaConda.
pip install open3d-python was tested and found to be working out of the box with:

* Windows, python installed from https://www.python.org/downloads/, 2.7 &amp; 3.5 32bit and 64bit
* MacOS, system python 2.7
* Ubuntu, system python 2.7 and python 3.5 installed through apt.
&lt;/denchmark-code&gt;

I will test native builds tonight and if it works I am up for closing this ticket for now (and open a new request for conda-backed python!).
		</comment>
		<comment id='20' author='HaiDang2001VN' date='2018-07-03T18:28:29Z'>
		As a hindsight, I think the confusion came from the lack of documentation. I learnt it just now (that the pip package does not work with conda-backed python) and I am pretty sure I am an experienced user of Open3D :). So we should have it documented.
		</comment>
		<comment id='21' author='HaiDang2001VN' date='2018-07-03T18:46:30Z'>
		Great. I will submit PR to update document accordingly.
		</comment>
		<comment id='22' author='HaiDang2001VN' date='2018-07-03T18:55:11Z'>
		&lt;denchmark-link:https://github.com/qianyizh&gt;@qianyizh&lt;/denchmark-link&gt;
 I don't think anybody realized that the issue was different Python installations until you posted the error message showing an anaconda path. This wasn't just our documentation lacking. In fact this is a subtle issue of which I am going to assume most Python users (including ourselves) may not be aware of: there several ways to install Python and these are not necessarily compatible between each other in every aspect.
		</comment>
		<comment id='23' author='HaiDang2001VN' date='2018-07-06T19:37:28Z'>
		To add some more detail, I have tested with a fresh Ubuntu 16.04 and encountered the similar external library issue aforementioned. I used naive pip, no anaconda installed.
pip distribution runs out-of-box

if all the required dependency are already installed (we have already opened issue for this)
if the installed external library version matches with the one used for buildind pip open3d distribution. (For example, even if libpng is already installed in the system, if it is not libpng16, it cannot import. This was my case when I tried with fresh ubuntu.)

However, this is not the case for a user (consider a user who didn't visit our github repo and didn't know about install-deps-ubuntu/mac.sh) who just want to install open3d via pip. That's why we have many corner cases.
One quick remedy

add description in pypi page that you would need to visit github and download/run shell script before try pip install

Better remedy

Fix pip package that can explicitly control dependencies.

		</comment>
		<comment id='24' author='HaiDang2001VN' date='2018-07-08T00:41:20Z'>
		This is very bad. We need hot fix. I will take over the ownership.
		</comment>
		<comment id='25' author='HaiDang2001VN' date='2018-09-14T19:11:04Z'>
		Any update on this?  I get the same issue:
Windows 10 (x64), Python 3.7 (x64), native pip install gives
&lt;denchmark-link:https://user-images.githubusercontent.com/13024737/45570254-40797a00-b81f-11e8-9a35-a049e38dc1a4.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='26' author='HaiDang2001VN' date='2018-09-14T20:12:24Z'>
		&lt;denchmark-link:https://github.com/Travis346&gt;@Travis346&lt;/denchmark-link&gt;
 Python 3.7 is not supported in our pip package. If you unzip the pip package, you'll see binaries for Python 2.7, 3.5 and 3.6.
&lt;denchmark-code&gt;├── __init__.py
├── linux
│   ├── __init__.py
│   ├── open3d.cpython-35m-x86_64-linux-gnu.so
│   ├── open3d.cpython-36m-x86_64-linux-gnu.so
│   ├── open3d.so
│   └── readme.txt
├── macos
│   ├── __init__.py
│   ├── open3d.cpython-35m-darwin.so
│   ├── open3d.cpython-36m-darwin.so
│   ├── open3d.so
│   └── readme.txt
└── win32
    ├── 32b
    │   ├── __init__.py
    │   ├── open3d.cp35-win32.pyd
    │   ├── open3d.cp36-win32.pyd
    │   └── open3d.pyd
    ├── 64b
    │   ├── __init__.py
    │   ├── open3d.cp35-win_amd64.pyd
    │   ├── open3d.cp36-win_amd64.pyd
    │   └── open3d.pyd
    ├── __init__.py
    └── readme.txt
&lt;/denchmark-code&gt;

The quick fix would be to compile from source, or, use the 2.7, 3.5 and 3.6 Python version. Later we may add Python 3.7 support as well.
BTW, we now have a repository with CI jobs that test pip and conda installations: &lt;denchmark-link:https://github.com/IntelVCL/Open3D_Python_CI/blob/master/appveyor.yml&gt;https://github.com/IntelVCL/Open3D_Python_CI/blob/master/appveyor.yml&lt;/denchmark-link&gt;
. They're passing for 2.7, 3.5, 3.6 on Windows.
		</comment>
		<comment id='27' author='HaiDang2001VN' date='2018-09-28T03:35:04Z'>
		&lt;denchmark-link:https://github.com/Travis346&gt;@Travis346&lt;/denchmark-link&gt;
: the dynamic library link issue is addressed with Open3D v0.3. Can you try out &lt;denchmark-link:http://www.open3d.org/docs/tutorial/Basic/python_interface.html#install-open3d-from-pypi&gt;this&lt;/denchmark-link&gt;
? &lt;denchmark-link:https://github.com/HaiDang2001VN&gt;@HaiDang2001VN&lt;/denchmark-link&gt;
: as a note, from open3d v0.2, we renamed py3d to open3d.
		</comment>
		<comment id='28' author='HaiDang2001VN' date='2018-11-14T00:09:35Z'>
		Hi, is there a fix for DLL issue? Does it work on python3.7? Thanks
		</comment>
		<comment id='29' author='HaiDang2001VN' date='2018-11-14T01:22:52Z'>
		Currently, we don't have pre-compiled library for python3.7 yet. To use Open3D with python3.7, please &lt;denchmark-link:http://www.open3d.org/docs/compilation.html&gt;compile from source&lt;/denchmark-link&gt;
.
We do have plan to add pre-compiled library for python3.7 in the future -- potentially after the automatic packaging CI is setup.
		</comment>
		<comment id='30' author='HaiDang2001VN' date='2018-12-17T19:17:26Z'>
		&lt;denchmark-link:https://github.com/HaiDang2001VN&gt;@HaiDang2001VN&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/gtorpiano&gt;@gtorpiano&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/Travis346&gt;@Travis346&lt;/denchmark-link&gt;
: we have resolved many issues for pip package. Could you try again and share the status?
&lt;denchmark-link:https://github.com/yxlao&gt;@yxlao&lt;/denchmark-link&gt;
: how about we add a support for Python 3.7?
		</comment>
		<comment id='31' author='HaiDang2001VN' date='2018-12-18T08:05:39Z'>
		Potentially we can add it in  release, but it would be a manual add. For  when we have the automatic packaging, we should definitely support it. What do you think &lt;denchmark-link:https://github.com/syncle&gt;@syncle&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='32' author='HaiDang2001VN' date='2018-12-18T08:29:46Z'>
		&lt;denchmark-link:https://github.com/yxlao&gt;@yxlao&lt;/denchmark-link&gt;
: I agree. Let's do that for the next release.
		</comment>
		<comment id='33' author='HaiDang2001VN' date='2019-02-19T19:25:22Z'>
		Python 3.7 supported has been added since v0.5.0
		</comment>
	</comments>
</bug>