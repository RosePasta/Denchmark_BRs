<bug id='1239' author='josuerocha' open_date='2019-10-12T19:18:55Z' closed_time='2019-10-15T21:51:05Z'>
	<summary>Memory leak when creating multiple point clouds in for loop</summary>
	<description>
Hello,
Thank you for this outstanding library.
Describe the bug
Memory usage increases when multiple point clouds are created inside a for loop, even though there are no active references in Python to the previous objects.
To Reproduce
Steps to reproduce the behavior:

Run the following code:

    cloud_vis = o3d.visualization.Visualizer()
    cloud_vis.create_window("Cloud")
    while 1:
        depth_image = freenect.sync_get_depth()[0]
        rgb_image = freenect.sync_get_video()[0]
        depth_image_o3d = o3d.geometry.Image(depth_image)
        rgb_image_o3d = o3d.geometry.Image(rgb_image)
        rgbd_image = o3d.geometry.RGBDImage.create_from_color_and_depth(rgb_image_o3d, depth_image_o3d)
        if 'cloud' in locals():
            cloud.clear()
        cloud = o3d.geometry.PointCloud.create_from_rgbd_image(rgbd_image, PinholeCameraIntrinsic(PrimeSenseDefault))
        cloud_vis.add_geometry(cloud)
        cloud_vis.update_geometry()
        cloud_vis.reset_view_point(False)
        cloud_vis.poll_events()
        cloud_vis.update_renderer()

Notice that memory usage increases over time and the script crashes.

Expected behavior
I expected no memory leaks to happen.
Environment (please complete the following information):

OS:  Ubuntu 18.04
Python version: 3.6.9
Open3D version: 0.8.0.0
Is this remote workstation?: NO
How did you install Open3D?: conda

Additional context
I am retrieving RGB and depth frames from a Kinect V1, then using Open3D to generate a point cloud and to manipulate the data.
	</description>
	<comments>
		<comment id='1' author='josuerocha' date='2019-10-13T22:22:37Z'>
		I believe this is not a bug. In C++ implementation, add_geometry pushes a copy of the cloud object into the visualizer.
Current update_geometry function is not very user friendly. Workarounds can be

Use cloud_vis.remove_geometry(cloud) instead of cloud.clear() to remove it before re-adding it to the visualizer.
Directly update cloud.points, cloud.normals etc and only call update_geometry().

		</comment>
		<comment id='2' author='josuerocha' date='2019-10-15T21:51:05Z'>
		Hello theNded,
I just tested the solution provided and I confirm that it solved this issue.
Thank you very much for your answer and help.
		</comment>
	</comments>
</bug>