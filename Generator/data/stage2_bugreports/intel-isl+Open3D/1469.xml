<bug id='1469' author='SebastianGrans' open_date='2020-01-29T16:04:56Z' closed_time='2020-05-08T14:31:19Z'>
	<summary>Specifying depth_trunc as</summary>
	<description>
Describe the bug
I rewrote the &lt;denchmark-link:http://www.open3d.org/docs/release/tutorial/Basic/rgbd_images/redwood.html&gt;redwood&lt;/denchmark-link&gt;
 example code to generate a point cloud from the &lt;denchmark-link:https://github.com/thodan/t-less_toolkit&gt;T-LESS&lt;/denchmark-link&gt;
 dataset. This dataset has depth images with values on the order of 10^4, so the default truncation of 3.0 is not suitable.
If the depth_trunc variable is set explicitly, e.g. depth_trunc = 1000000, the script runs and results in the point cloud being visualized.
If however depth_trunc is specified as the output from a function such as np.max, i.e. depth_trunc = np.max(depth_raw), the code terminates with an error. I suspect this is because the resulting rgbd_image.depth list consists only of zeros.
I have tried various forms of type casting in order to make sure that depth_trunc recieves an int, to no avail.
&lt;denchmark-code&gt;Exception has occurred: RuntimeError
[Open3D ERROR] [CreateCoordinateFrame] size &lt;= 0
  File "/home/grans/Documents/pointnet2/utils/dtopcd.py", line 64, in &lt;module&gt;
    o3d.visualization.draw_geometries([pcd])
  File "/usr/lib/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "/usr/lib/python2.7/runpy.py", line 82, in _run_module_code
    mod_name, mod_fname, mod_loader, pkg_name)
  File "/usr/lib/python2.7/runpy.py", line 252, in run_path
    return _run_module_code(code, init_globals, run_name, path_name)
&lt;/denchmark-code&gt;

To Reproduce
Steps to reproduce the behavior:
Download the T-LESS dataset using &lt;denchmark-link:https://github.com/thodan/t-less_toolkit&gt;this&lt;/denchmark-link&gt;
 toolkit.
Specify the correct  in the code below.
Execute.
import open3d as o3d
import matplotlib.pyplot as plt

import os 
import numpy as np
import yaml

if __name__ == "__main__":

    ROOT_PATH = "/home/grans/Documents/t-less_v2/test_primesense/"
    VIEW_NO = "01"

    GT_PATH = os.path.join(ROOT_PATH, VIEW_NO, 'gt.yml')
    INFO_PATH = os.path.join(ROOT_PATH, VIEW_NO, 'info.yml')
    DEPTH_IMGS = os.path.join(ROOT_PATH, VIEW_NO, 'depth')
    RGB_IMGS = os.path.join(ROOT_PATH, VIEW_NO, 'rgb')

    IMG_NO = 255
    DIMG_PATH = os.path.join(DEPTH_IMGS, str(IMG_NO).rjust(4, '0') + '.png')
    RGBIMG_PATH = os.path.join(RGB_IMGS, str(IMG_NO).rjust(4, '0') + '.png')

    color_raw = o3d.io.read_image(RGBIMG_PATH)
    depth_raw = o3d.io.read_image(DIMG_PATH)

    f = open(INFO_PATH, 'r')
    # These files are small. So load_all() isn't necessary.
    # yml = yaml.load_all(f, Loader=yaml.FullLoader)
    yml = yaml.load(f, Loader=yaml.FullLoader)
    fx, _, cx, _, fy, cy, _, _, _ = np.array(yml[IMG_NO]['cam_K'])
    scale = np.array(yml[IMG_NO]['depth_scale'])
    width, height = color_raw.get_max_bound().astype('int')

    cameraIntrinsics = o3d.camera.PinholeCameraIntrinsic(width, height, fx, fy, cx, cy)
    
    trunc = 1000 # This works
    # trunc = np.inf # This works
    # trunc = np.max(depth_raw) # This does not work
    # trunc = int(np.max(depth_raw) # This does not work
    rgbd_image = o3d.geometry.RGBDImage.create_from_color_and_depth(
        color_raw, 
        depth_raw, 
        depth_scale=scale, 
        depth_trunc=trunc, # For some reason they truncate the depth at z  =
        convert_rgb_to_intensity=False
        )
    print(rgbd_image)

    plt.subplot(1, 2, 1)
    plt.title('grayscale image')
    plt.imshow(rgbd_image.color)
    plt.subplot(1, 2, 2)
    plt.title('depth image')
    plt.imshow(rgbd_image.depth)
    plt.show()

    pcd = o3d.geometry.PointCloud.create_from_rgbd_image(
        rgbd_image,
        o3d.camera.PinholeCameraIntrinsic(cameraIntrinsics))
    # Flip it, otherwise the pointcloud will be upside down
    pcd.transform([[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]])

    # The code executes fine until this statement. 
    o3d.visualization.draw_geometries([pcd]) 
Expected behavior
The visualization should show me the point cloud.
Environment (please complete the following information):

OS: [e.g. OSX Mojave, Ubuntu 16.04, Windows 10.0]
Python version: 2.7.17
Open3D version: 0.9.0.0
Is this remote workstation?: No
How did you install Open3D?: pip

Additional context
Add any other context about the problem here.
	</description>
	<comments>
		<comment id='1' author='SebastianGrans' date='2020-02-18T15:07:00Z'>
		Umm, it should run well... I think the issue may come from the max depth value. What is the return value of np.max? Does it exceed integer precision? In that case, I think the sign of the value could be swapped.
		</comment>
		<comment id='2' author='SebastianGrans' date='2020-05-08T14:31:19Z'>
		Closing the issue since not much evidence to help. &lt;denchmark-link:https://github.com/SebastianGrans&gt;@SebastianGrans&lt;/denchmark-link&gt;
 please reopen this if necessary.
		</comment>
	</comments>
</bug>