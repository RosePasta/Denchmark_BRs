<bug id='239' author='amrit110' open_date='2018-03-23T18:15:41Z' closed_time='2020-03-04T23:50:14Z'>
	<summary>Add multiple geometries to VisualizerWithEditing class</summary>
	<description>
It would be nice to be able to add multiple geometries to the VisualizerWithEditing class where the geometries can be PointCloud or say TriangleMesh. Currently this doesn't seem to be the case. Any ideas on how to do it?
An example use case can be like this:
def draw_geometries_pick_points(geometries):
    vis = VisualizerWithEditing()
    vis.create_window()
    for geometry in geometries:
        vis.add_geometry(geometry)
        vis.run()
    vis.destroy_window()
Say we have a point cloud and some mesh objects that are used to enclose points like a bounding box, with the Visualizer class, one can add geometries and get the complete visualization as shown below
&lt;denchmark-link:https://user-images.githubusercontent.com/8986523/37847587-937a2b82-2ed1-11e8-83dd-8f95554149e8.png&gt;&lt;/denchmark-link&gt;

But with the VisualizerWithEditing class, despite adding geometries using add_geometry, only the first geometry object is visualized. So, if the PointCloud was the first to be added, then we get only
&lt;denchmark-link:https://user-images.githubusercontent.com/8986523/37847201-51589a3c-2ed0-11e8-8e40-d53e7b978519.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='amrit110' date='2018-03-23T19:14:18Z'>
		Thanks, &lt;denchmark-link:https://github.com/amrit110&gt;@amrit110&lt;/denchmark-link&gt;
 for pointing out the issue with nice examples. Technically  should run exactly as the same as , but it looks something went wrong. I am working for this issue.
		</comment>
		<comment id='2' author='amrit110' date='2018-03-23T21:26:56Z'>
		The issue turns out to be non-trivial as VisualizerWithEditing is designed for point cloud.
Let's get back to the question.  ignores the second call of  due to the below lines:
&lt;denchmark-link:https://github.com/IntelVCL/Open3D/blob/c9aab50f15e74aaaa9c30e190a143340d9a1a3ec/src/Visualization/Visualizer/VisualizerWithEditing.cpp#L46-L51&gt;https://github.com/IntelVCL/Open3D/blob/c9aab50f15e74aaaa9c30e190a143340d9a1a3ec/src/Visualization/Visualizer/VisualizerWithEditing.cpp#L46-L51&lt;/denchmark-link&gt;

If you remove  you should be able to see point both cloud and mesh.
Another issue is that  does not support meshes. For example the below lines,
&lt;denchmark-link:https://github.com/IntelVCL/Open3D/blob/c9aab50f15e74aaaa9c30e190a143340d9a1a3ec/src/Visualization/Visualizer/VisualizerWithEditing.cpp#L185-L187&gt;https://github.com/IntelVCL/Open3D/blob/c9aab50f15e74aaaa9c30e190a143340d9a1a3ec/src/Visualization/Visualizer/VisualizerWithEditing.cpp#L185-L187&lt;/denchmark-link&gt;

Only initializes .
&lt;denchmark-link:https://github.com/qianyizh&gt;@qianyizh&lt;/denchmark-link&gt;
: I would like to ask your opinion. Do you think it is feasible to reuse point picking functions for meshes?
		</comment>
		<comment id='3' author='amrit110' date='2018-03-23T23:29:49Z'>
		Ah I see. Thanks! I can now pick points that belong to the point cloud while visualizing all the geometries. Point picking for meshes seems like a useful feature, since one might want to select intermediate points on the meshes. Can this be generalized to creating an arbitrary point to be picked? So say that I wish to actually get the location of a point that might be close to an existing point, I could create a point to do this, thereby also picking it. I would imagine this to be a quite a useful feature. But, this seems very much non-trivial and might be quite some work, since creating a point based on where the mouse click is done is not obvious to me. But if you have ideas on that I would be interested to spend time trying to implement it.
		</comment>
		<comment id='4' author='amrit110' date='2018-03-24T00:03:28Z'>
		That's a great idea. Actually, I was thinking about re-using the current implementation for picking vertices in a mesh. That will just find the most adjacent points likewise it worked for point clouds. However, I agree with your idea. The most reasonable way for mesh is to find the three vertices that wraps the user provided point, and apply &lt;denchmark-link:https://classes.soe.ucsc.edu/cmps160/Fall10/resources/barycentricInterpolation.pdf&gt;barycentric interpolation&lt;/denchmark-link&gt;
 to estimate 3D position of the user provided point.
This will going to be interesting feature. I would be glad if you can contribute!
		</comment>
		<comment id='5' author='amrit110' date='2018-03-24T00:55:58Z'>
		A workaround I used is to simply create a point cloud from the mesh, and render it jointly with the mesh. The picker works for the point cloud.
		</comment>
		<comment id='6' author='amrit110' date='2018-03-26T07:16:19Z'>
		&lt;denchmark-link:https://github.com/syncle&gt;@syncle&lt;/denchmark-link&gt;
 thanks. ill start looking into it since I would really like to be able to have user defined points, though might take a while to understand how to do it.
		</comment>
		<comment id='7' author='amrit110' date='2019-01-28T07:08:53Z'>
		
A workaround I used is to simply create a point cloud from the mesh, and render it jointly with the mesh. The picker works for the point cloud.

Hi, would you please share the way to ' render it jointly' ?
		</comment>
		<comment id='8' author='amrit110' date='2019-10-02T14:28:59Z'>
		Is this gonna be solved in the official release?
		</comment>
		<comment id='9' author='amrit110' date='2020-03-04T23:50:14Z'>
		Time to close this, since the new visualization system is around the corner.
		</comment>
		<comment id='10' author='amrit110' date='2020-04-16T05:27:06Z'>
		May I know the the updates?
		</comment>
		<comment id='11' author='amrit110' date='2020-06-29T21:16:28Z'>
		I have still this issue on version 0.10.0.0 on linux ubuntu 18.04 LTS, should it have been solved?
		</comment>
	</comments>
</bug>