<bug id='1281' author='MaxChanger' open_date='2019-10-30T12:22:02Z' closed_time='2019-10-30T16:53:18Z'>
	<summary>After --refine, the integrate result become worse</summary>
	<description>

After , the integrate result become worse.
I follow the official tutorial using Open3D, and found out that the results of each reconstruction are different, and in most cases it is worse &lt;denchmark-link:https://github.com/intel-isl/Open3D/issues/1264&gt;#1264&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/intel-isl/Open3D/issues/1254&gt;#1254&lt;/denchmark-link&gt;
 . So I did a lot of tests to find out where the problem is.
When I used debug/visualize_alignment.py to see the registration between two fragments, the parameter --before_optimized made me found some differences. I found a strange registration in using config["template_refined_posegraph_optimized"], but is normal in config["template_global_posegraph"].
So, I modify the line in  integrate_scene.py,  use the posegraph in global_registration_optimized.json instead of refined_registration_optimized.json and get a better result than using --refine.
    pose_graph_fragment = o3d.io.read_pose_graph(   
        # join(path_dataset, config["template_refined_posegraph_optimized"])) # refined_registration_optimized.json
        join(path_dataset, config["template_global_posegraph_optimized"])) # global_registration_optimized.json
Expected behavior
I don't understand why this happens, and why the result of integrate becomes worse after refinement.

&lt;denchmark-link:https://user-images.githubusercontent.com/35401968/67857685-60b6e600-fb52-11e9-81cd-737ba9527a5a.png&gt;&lt;/denchmark-link&gt;


the left image using global_registration_optimized.json， the right image using refined_registration_optimized.json

Environment (please complete the following information):

OS: Ubuntu 16.04
Python version: 3.6.9
Open3D version: 0.8.0
Is this remote workstation?: no
How did you install Open3D?:  conda install -c open3d-admin open3d

	</description>
	<comments>
		<comment id='1' author='MaxChanger' date='2019-10-30T15:00:31Z'>
		It's seems like a wrong loop closure was not filtered (which should have been).
Are you using FGR or RANSAC?
Also, can you please upload these .json files?
		</comment>
		<comment id='2' author='MaxChanger' date='2019-10-30T15:05:44Z'>
		Yes, I use the .josn files in tutorial &lt;denchmark-link:https://github.com/intel-isl/Open3D/blob/master/examples/Python/ReconstructionSystem/config/tutorial.json&gt;config/tutorial.josn&lt;/denchmark-link&gt;
 without any change.
The default is RANSAC，right?
		</comment>
		<comment id='3' author='MaxChanger' date='2019-10-30T15:25:57Z'>
		Sorry I didn't make it clear. Can you please share the pose graphs' json files? Also, can you identify the fragment ids with strange registrations? A screenshot can be very helpful.
		</comment>
		<comment id='4' author='MaxChanger' date='2019-10-30T15:41:34Z'>
		I have the similar issue after running on this dataset. Working on fixing it.

Multi-scale colored ICP fails for some fragments.
&lt;denchmark-link:https://github.com/MaxChanger&gt;@MaxChanger&lt;/denchmark-link&gt;
 as a workaround, please change "icp_method" in the config file to "point_to_point" or "point_to_plane"
		</comment>
		<comment id='5' author='MaxChanger' date='2019-10-30T16:53:18Z'>
		I will close this and launch a new issue with a miminal reproducible example.
		</comment>
		<comment id='6' author='MaxChanger' date='2019-10-31T02:33:14Z'>
		&lt;denchmark-link:https://github.com/theNded&gt;@theNded&lt;/denchmark-link&gt;
 Thank you very much, I will continue to try the solution you provided to find out if there are any problems.
		</comment>
		<comment id='7' author='MaxChanger' date='2019-10-31T06:41:34Z'>
		I get your point, and I change the method of "icp_method": "point_to_plane" in tutorial.json
The picture below is a comparison of two icp_methods, in the same fragments folder (same once --make)
&lt;denchmark-link:https://user-images.githubusercontent.com/35401968/67924729-5ba67500-fbec-11e9-927d-0c2c1c1dc745.png&gt;&lt;/denchmark-link&gt;


the left is "icp_method": "point_to_plane" and the right is "icp_method": "color"

		</comment>
		<comment id='8' author='MaxChanger' date='2019-11-06T06:47:14Z'>
		&lt;denchmark-link:https://github.com/theNded&gt;@theNded&lt;/denchmark-link&gt;
  I checked your analysis in &lt;denchmark-link:https://github.com/intel-isl/Open3D/issues/1286&gt;#1286&lt;/denchmark-link&gt;

I don't know if you remember it seems that there are many mistakes in the --refine stage, but there are no mistakes in the --register stage. However, multiscale_icp is called in both stages, that is, color_icp is used in both stages.


As you mentioned:
it seems that some ill color gradiants polluted the linear system

I guess it's due to some noise points in original ply file without downsample, am I right ?



Open3D/examples/Python/ReconstructionSystem/register_fragments.py


        Lines 66 to 68
      in
      e6568ea






 (transformation, information) = \ 



 multiscale_icp(source_down, target_down, 



         [config["voxel_size"]], [50], config, transformation_init) 








Open3D/examples/Python/ReconstructionSystem/refine_registration.py


        Lines 93 to 102
      in
      e6568ea






 def local_refinement(source, target, transformation_init, config): 



 voxel_size = config["voxel_size"] 



     (transformation, information) = \ 



 multiscale_icp( 



 source, target, 



             [voxel_size, voxel_size/2.0, voxel_size/4.0], [50, 30, 14], 



 config, transformation_init) 



 if config["debug_mode"]: 



 draw_registration_result_original_color(source, target, transformation) 



 return (transformation, information) 





		</comment>
		<comment id='9' author='MaxChanger' date='2019-11-06T07:48:23Z'>
		&lt;denchmark-link:https://github.com/theNded&gt;@theNded&lt;/denchmark-link&gt;
  I did a little try, also downsample in the --refine stage, the code is as follows, the function  is the same as , I thought it would get a good result, but I got 
So the problem does not seem to be down sampling.
&lt;denchmark-link:https://user-images.githubusercontent.com/35401968/68278635-be948200-00ac-11ea-93c1-560069c684bd.png&gt;&lt;/denchmark-link&gt;

def register_point_cloud_pair(ply_file_names, s, t, transformation_init,
                              config):
    print("reading %s ..." % ply_file_names[s])
    source = o3d.io.read_point_cloud(ply_file_names[s])
    print("reading %s ..." % ply_file_names[t])
    target = o3d.io.read_point_cloud(ply_file_names[t]) 

    (source_down, source_fpfh) = preprocess_point_cloud(source, config) 
    (target_down, target_fpfh) = preprocess_point_cloud(target, config)
    (transformation, information) = \
                local_refinement(source_down, target_down, transformation_init, config)   

    # (transformation, information) = \
    #         local_refinement(source, target, transformation_init, config)   
    if config["debug_mode"]:
        print(transformation)
        print(information)
    return (transformation, information)
		</comment>
	</comments>
</bug>