<bug id='276' author='JWHennessey' open_date='2018-04-05T16:04:08Z' closed_time='2018-04-06T07:39:24Z'>
	<summary>Global Optimization Flips Sign Of Transformation Matrices</summary>
	<description>
Great work on this library!
I am experimenting with your reconstruction pipeline with the C++ API and I have come across strange behavior where the output transformation matrix values have the wrong sign. I only noticed this when when performing a global optimization on a pose graph with reliable edges (e.g. the two pointclouds are tightly aligned). This example below has a single edge but I have also seen examples where there are more clouds joined by many reliable edges.
&lt;denchmark-code&gt;...Build pose graph using RANSAC and ICP. This scene only has two point clouds that need to align.  
Then perform the global optimization.... 

      GlobalOptimization(
                    pose_graph,
                    GlobalOptimizationLevenbergMarquardt(),
                    GlobalOptimizationConvergenceCriteria(),
                    GlobalOptimizationOption(
                            0.01,
                            0.25,
                            `1));
&lt;/denchmark-code&gt;

Before running the optimization the pose graph contains:
&lt;denchmark-code&gt;{
	"class_name" : "PoseGraph",
	
	"edges" : 
	[
		{
			"class_name" : "PoseGraphEdge",
			"confidence" : 1.0,
			"information" : 
			[
				34099.0,
				0.0,
				0.0,
				0.0,
				415.37399999992857,
				12764.381979620783,
				0.0,
				34099.0,
				0.0,
				-415.37399999992857,
				0.0,
				16463.712022405816,
				0.0,
				0.0,
				34099.0,
				-12764.381979620783,
				-16463.712022405816,
				0.0,
				0.0,
				-415.37399999992857,
				-12764.381979620783,
				62456.691808645257,
				15791.629451913823,
				3703.7257858969974,
				415.37399999992857,
				0.0,
				-16463.712022405816,
				15791.629451913823,
				74673.802616639994,
				-11243.323558827107,
				12764.381979620783,
				16463.712022405816,
				0.0,
				3703.7257858969974,
				-11243.323558827107,
				55221.29001328376
			],
			"source_node_id" : 0,
			"target_node_id" : 1,
			"transformation" : 
			[
				-0.48990790736546147,
				-0.87175075834073679,
				-0.0063919975864186159,
				0.0,
				0.87176179612279614,
				-0.48992687320628858,
				0.00174061226755499,
				0.0,
				-0.0046489914552744673,
				-0.0047195595832163536,
				0.99997805607712709,
				0.0,
				-1.2424892605072533,
				0.85829723657701784,
				0.018927510517620764,
				1.0
			],
			"uncertain" : true,
			"version_major" : 1,
			"version_minor" : 0
		}
	],
	"nodes" : 
	[
		{
			"class_name" : "PoseGraphNode",
			"pose" : 
			[
				1.0,
				0.0,
				0.0,
				0.0,
				0.0,
				1.0,
				0.0,
				0.0,
				0.0,
				0.0,
				1.0,
				0.0,
				0.0,
				0.0,
				0.0,
				1.0
			],
			"version_major" : 1,
			"version_minor" : 0
		},
		{
			"class_name" : "PoseGraphNode",
			"pose" : 
			[
				1.0,
				0.0,
				0.0,
				0.0,
				0.0,
				1.0,
				0.0,
				0.0,
				0.0,
				0.0,
				1.0,
				0.0,
				0.0,
				0.0,
				0.0,
				1.0
			],
			"version_major" : 1,
			"version_minor" : 0
		}
	],
	"version_major" : 1,
	"version_minor" : 0
}

&lt;/denchmark-code&gt;

If I use the edge transformation to transform Node 0 to Node 1 and view both Nodes together the pointclouds are nicely aligned. In this trivial case I may not need to run the global optimization but the same error has occurred in different examples.
The pose graph after the optimisation is below as you can see the signs of the values in the transformation matrix have been changed.
&lt;denchmark-code&gt;{
	"class_name" : "PoseGraph",
	"edges" : 
	[
		{
			"class_name" : "PoseGraphEdge",
			"confidence" : 1.0,
			"information" : 
			[
				34099.0,
				0.0,
				0.0,
				0.0,
				415.37399999992857,
				12764.381979620783,
				0.0,
				34099.0,
				0.0,
				-415.37399999992857,
				0.0,
				16463.712022405816,
				0.0,
				0.0,
				34099.0,
				-12764.381979620783,
				-16463.712022405816,
				0.0,
				0.0,
				-415.37399999992857,
				-12764.381979620783,
				62456.691808645257,
				15791.629451913823,
				3703.7257858969974,
				415.37399999992857,
				0.0,
				-16463.712022405816,
				15791.629451913823,
				74673.802616639994,
				-11243.323558827107,
				12764.381979620783,
				16463.712022405816,
				0.0,
				3703.7257858969974,
				-11243.323558827107,
				55221.29001328376
			],
			"source_node_id" : 0,
			"target_node_id" : 1,
			"transformation" : 
			[
				-0.48990790736546147,
				-0.87175075834073679,
				-0.0063919975864186159,
				0.0,
				0.87176179612279614,
				-0.48992687320628858,
				0.00174061226755499,
				0.0,
				-0.0046489914552744673,
				-0.0047195595832163536,
				0.99997805607712709,
				0.0,
				-1.2424892605072533,
				0.85829723657701784,
				0.018927510517620764,
				1.0
			],
			"uncertain" : true,
			"version_major" : 1,
			"version_minor" : 0
		}
	],
	"nodes" : 
	[
		{
			"class_name" : "PoseGraphNode",
			"pose" : 
			[
				0.48993024246413214,
				0.87176141035414501,
				-0.00063319537992922743,
				0.0,
				-0.87175996416575952,
				0.48992774689980439,
				-0.0023168287365873757,
				0.0,
				-0.0017095019011203285,
				0.0016870788463811486,
				0.99999711567994842,
				0.0,
				-1.2424892605188789,
				0.85829723654726131,
				0.018927510493506647,
				1.0
			],
			"version_major" : 1,
			"version_minor" : 0
		},
		{
			"class_name" : "PoseGraphNode",
			"pose" : 
			[
				1.0,
				-5.1965471314051326e-19,
				-3.2526065174565133e-19,
				0.0,
				1.1050476533174328e-16,
				1.0,
				4.3368086899420177e-19,
				0.0,
				-2.1684043449710089e-19,
				0.0,
				1.0,
				0.0,
				0.0,
				2.7755575615628914e-17,
				0.0,
				1.0
			],
			"version_major" : 1,
			"version_minor" : 0
		}
	],
	"version_major" : 1,
	"version_minor" : 0
}
&lt;/denchmark-code&gt;

I'm trying to debug your source to resolve this issue but to no luck so far. I thought I'd report here as having to detect is the matrix is the same with a sign flipped is a poor workaround.
Thanks!
	</description>
	<comments>
		<comment id='1' author='JWHennessey' date='2018-04-05T18:27:37Z'>
		Hi &lt;denchmark-link:https://github.com/JWHennessey&gt;@JWHennessey&lt;/denchmark-link&gt;

Can you share code snippet and data (json files and point cloud) so that I can regenerate the issue? Based on the provided information, it is hard to figure out. Thanks!
		</comment>
		<comment id='2' author='JWHennessey' date='2018-04-05T19:00:15Z'>
		Thanks for getting back to me so quickly.
Here is a python script that reads in the Pose Graph I have created, runs the global optimization, first visualizes the edge that was input to the optimization (correct alignment). Once that window is closed it then visualizes the final registration post optimization (incorrect alignment).
If you look at the output optimized pose graph you'll notice that the rotation part of the transformation is incorrect. The sign needs to be changes or needs to be inverted to have the correct alignment.
I have also included the output optimized pose graph for reference. The data directory also has the two point clouds.
Thanks for looking into it.
[link deleted]
		</comment>
		<comment id='3' author='JWHennessey' date='2018-04-05T21:23:06Z'>
		Thanks &lt;denchmark-link:https://github.com/JWHennessey&gt;@JWHennessey&lt;/denchmark-link&gt;
. I am looking at the issue you mentioned. Let me do some basic test with this data and script. Will post my findings soon!
		</comment>
		<comment id='4' author='JWHennessey' date='2018-04-05T22:55:24Z'>
		Hi
Maybe the problem comes from the estimation of R,T  ?
&lt;denchmark-link:https://igl.ethz.ch/projects/ARAP/svd_rot.pdf&gt;https://igl.ethz.ch/projects/ARAP/svd_rot.pdf&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='JWHennessey' date='2018-04-05T23:06:58Z'>
		Thanks I'll look at the paper and look into my estimation pipeline again. My reasoning to think the error is with is the Open3d optimisation  is because when viewing the single edge that is input into the scene graph,  the alignment is correct. The high level purpose of the optimisation -  as I understand it - is to remove false positive edges to create a consistent scene graph. The one edge I provide is a true positive yet the output is different.
Thanks again for your help. I'll report back if I find anything.
		</comment>
		<comment id='6' author='JWHennessey' date='2018-04-06T07:09:20Z'>
		I think we are looking at a local minima of the pose graph energy function.
As a sanity check, I tried this code snippet.
&lt;denchmark-code&gt;filenames = ["data/Hall-1.raw.xyz", "data/Hall-2.raw.xyz"]

pose_graph = read_pose_graph("data/global_registration.json")
pose_graph = read_pose_graph("data/global_registration.json")
correct_transformation = pose_graph.edges[0].transformation
source = read_point_cloud(filenames[0])
target = read_point_cloud(filenames[1])
draw_registration_result(source, target, correct_transformation)

information_matrix = get_information_matrix_from_point_clouds(
		source, target, 0.03, correct_transformation)

pose_graph = PoseGraph()
pose_graph.nodes.append(PoseGraphNode(np.identity(4)))
pose_graph.nodes.append(PoseGraphNode(np.linalg.inv(correct_transformation)))
pose_graph.edges.append(PoseGraphEdge(0, 1, correct_transformation,
	information_matrix, uncertain = False))

method = GlobalOptimizationLevenbergMarquardt()
criteria = GlobalOptimizationConvergenceCriteria()
option = GlobalOptimizationOption(
	max_correspondence_distance = 0.03,
	edge_prune_threshold = 0.25,
	reference_node = 0)

set_verbosity_level(VerbosityLevel.Debug)
global_optimization(pose_graph, method, criteria, option)
source.transform(pose_graph.nodes[0].pose)
target.transform(pose_graph.nodes[1].pose)
draw_registration_result(source, target, np.identity(4))
&lt;/denchmark-code&gt;

global_optimization immediately stops as the script made ideal pose graph. This script does not flip sign of the transformation matrix.
However if I replace
&lt;denchmark-code&gt;pose_graph.nodes.append(PoseGraphNode(np.linalg.inv(correct_transformation)))
&lt;/denchmark-code&gt;

with this (like your example)
&lt;denchmark-code&gt;pose_graph.nodes.append(PoseGraphNode(np.identity(4)))
&lt;/denchmark-code&gt;

I see the same problem you had.  I think this also related to the mathematical assumption we have. You can check &lt;denchmark-link:https://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Choi_Robust_Reconstruction_of_2015_CVPR_paper.pdf&gt;Eq 6 in this literature&lt;/denchmark-link&gt;
. The approximation form of the transformation matrix does not hold if X^{-1} x T^{−1}_j x T_i is too far from identity.
In &lt;denchmark-link:http://open3d.org/docs/tutorial/ReconstructionSystem/index.html&gt;Reconstruction system&lt;/denchmark-link&gt;
, we haven't see this issue as the initial pose of nodes are not set as identity matrix. Instead, we used odometries. If you can put rough alignment as a initial pose of nodes, it will help to relieve this issue.
		</comment>
		<comment id='7' author='JWHennessey' date='2018-04-06T07:28:27Z'>
		I think this is a better explanation than my previous answer.
In general, there are two solutions in pose graph optimization.
 Misalignment of two node is parameterized as zeta = [alpha beta gamma a b c]^T. The objective for pose graph optimization is to make ||zeta^T x InformationMatrix x zeta||_2 as small as possible. See &lt;denchmark-link:https://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Choi_Robust_Reconstruction_of_2015_CVPR_paper.pdf&gt;Eq 8 in this literature.&lt;/denchmark-link&gt;
 However, depending on the starting point, ||-zeta^T x InformationMatrix x -zeta||_2 can achieve the same objective. If the zeta_init is near to the zeta, there is much less chance to get -zeta as a final solution.
		</comment>
		<comment id='8' author='JWHennessey' date='2018-04-06T07:39:24Z'>
		Thanks for looking into it and the explanation makes sense. In this simple case I can provide an initial pose but other examples it may not be possible. I'll read more into the papers and see if there is a workaround.
As a side note I've really enjoyed working with Open3D as it's so lightweight and easy to extend. Thanks for open sourcing!
		</comment>
		<comment id='9' author='JWHennessey' date='2018-04-06T07:46:23Z'>
		My pleasure! Please share or contribute if you have any idea for this issue. 👍
		</comment>
	</comments>
</bug>