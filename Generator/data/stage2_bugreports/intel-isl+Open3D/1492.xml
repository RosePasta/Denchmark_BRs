<bug id='1492' author='jravert88' open_date='2020-02-04T23:19:44Z' closed_time='2020-02-10T19:30:18Z'>
	<summary>examples/Python/Advanced/remove_geometry.py doesn't run</summary>
	<description>
I attempted to run examples/Python/Advanced/remove_geometry.py in python3
I get the following errors:
`Adding 0
Traceback (most recent call last):
File "remove_geometry.py", line 53, in 
visualize_non_blocking(vis)
File "remove_geometry.py", line 14, in visualize_non_blocking
vis.update_geometry()
TypeError: update_geometry(): incompatible function arguments. The following argument types are supported:
1. (self: open3d.open3d.visualization.Visualizer, arg0: open3d.open3d.geometry.Geometry) -&gt; bool
Invoked with: Visualizer with name Open3D`
To Reproduce
Steps to reproduce the behavior:

cd examples/Python/Advanced/remove_geometry.py
python3 remove_geometry.py
See error

Expected behavior
Example should run displaying points being added and removed
Environment (please complete the following information):

OS: Ubuntu 18.04
Python version: 3.6.9
Open3D version: 0.9.0? from CHANGELOG.md
Is this remote workstation?: no
How did you install Open3D?: build_from_source GCC 8.3.0

	</description>
	<comments>
		<comment id='1' author='jravert88' date='2020-02-05T15:28:45Z'>
		Examples  should "just run".
This code works:
&lt;denchmark-code&gt;# Open3D: www.open3d.org
# The MIT License (MIT)
# See license file or visit www.open3d.org for details

# examples/Python/Advanced/remove_geometry.py

import open3d as o3d
import numpy as np
import time
import copy


def visualize_non_blocking(vis,pcd):
    vis.update_geometry(pcd)
    vis.poll_events()
    vis.update_renderer()


pcd_orig = o3d.io.read_point_cloud("../../TestData/fragment.pcd")
flip_transform = [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]]
pcd_orig.transform(flip_transform)
n_pcd = 5
pcds = []
for i in range(n_pcd):
    pcds.append(copy.deepcopy(pcd_orig))
    trans = np.identity(4)
    trans[:3, 3] = [3 * i, 0, 0]
    pcds[i].transform(trans)

vis = o3d.visualization.Visualizer()
vis.create_window()
start_time = time.time()
added = [False] * n_pcd

curr_sec = int(time.time() - start_time)
prev_sec = curr_sec - 1

while True:
    curr_sec = int(time.time() - start_time)
    if curr_sec - prev_sec == 1:
        prev_sec = curr_sec

        for i in range(n_pcd):
            if curr_sec % (n_pcd * 2) == i and not added[i]:
                vis.add_geometry(pcds[i])
                added[i] = True
                print("Adding %d" % i)
                visualize_non_blocking(vis,pcds[i])
                
            if curr_sec % (n_pcd * 2) == (i + n_pcd) and added[i]:
                vis.remove_geometry(pcds[i])
                added[i] = False
                print("Removing %d" % i)
                visualize_non_blocking(vis,pcds[i])
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>