<bug id='1103' author='kings-landing' open_date='2019-08-06T02:34:03Z' closed_time='2019-10-29T14:51:57Z'>
	<summary>KDTreeFlann / Flann memory leak</summary>
	<description>
IMPORTANT: Please use the following template to report the bug.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Describe the bug
Flann memory leak when running the C++ PointCloud example with valgrind
To Reproduce
Steps to reproduce the behavior:

cd Open3D/build/bin/examples
valgrind --leak-check=yes ./PointCloud DATA

Expected behavior
memory leak
Screenshots
If applicable, add screenshots to help explain your problem.
Environment (please complete the following information):

OS: Ubuntu 16.04
Open3D version: 0.7.0, C++
Is this remote workstation?: no
How did you install Open3D?: build_from_source (gcc)


Detailed error log: &lt;denchmark-link:https://github.com/intel-isl/Open3D/files/3470112/log.txt&gt;log.txt&lt;/denchmark-link&gt;

Partial log:
==29937== Memcheck, a memory error detector
==29937== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==29937== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==29937== Command: ./PointCloud DATA.pcd
==29937==
==29937== Conditional jump or move depends on uninitialised value(s)
==29937==    at 0x4F8C667: flann::Index&lt;flann::L2 &gt;::Index(flann::Matrix const&amp;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits, std::allocator &gt;, flann::any, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits, std::allocator &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits, std::allocator &gt; const, flann::any&gt; &gt; &gt; const&amp;, flann::L2) (in open3d/build/Open3D/lib/libOpen3D.so)
==29937==    by 0x4F88990: open3d::geometry::KDTreeFlann::SetRawData(Eigen::Map&lt;Eigen::Matrix&lt;double, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&amp;) (in open3d/build/Open3D/lib/libOpen3D.so)
==29937==    by 0x4F88763: open3d::geometry::KDTreeFlann::SetGeometry(open3d::geometry::Geometry const&amp;) (in open3d/build/Open3D/lib/libOpen3D.so)
==29937==    by 0x4F5D738: open3d::geometry::PointCloud::EstimateNormals(open3d::geometry::KDTreeSearchParam const&amp;, bool) (in open3d/build/Open3D/lib/libOpen3D.so)
==29937==    by 0x4022B9: main (in open3d/build/Open3D/bin/examples/PointCloud)
==29937==
==29937== Conditional jump or move depends on uninitialised value(s)
==29937==    at 0x4F8D982: flann::NNIndex&lt;flann::L2 &gt;* flann::create_index_by_type&lt;flann::L2 &gt;(flann::flann_algorithm_t, flann::Matrix&lt;flann::L2::ElementType&gt; const&amp;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits, std::allocator &gt;, flann::any, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits, std::allocator &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits, std::allocator &gt; const, flann::any&gt; &gt; &gt; const&amp;, flann::L2 const&amp;) (in open3d/build/Open3D/lib/libOpen3D.so)
==29937==    by 0x4F8C727: flann::Index&lt;flann::L2 &gt;::Index(flann::Matrix const&amp;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits, std::allocator &gt;, flann::any, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits, std::allocator &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits, std::allocator &gt; const, flann::any&gt; &gt; &gt; const&amp;, flann::L2) (in open3d/build/Open3D/lib/libOpen3D.so)
...
�[0;34mEnd of the test.
�[0;m==29937==
==29937== HEAP SUMMARY:
==29937==     in use at exit: 72,736 bytes in 2 blocks
==29937==   total heap usage: 735,000 allocs, 734,998 frees, 159,001,214 bytes allocated
==29937==
==29937== LEAK SUMMARY:
==29937==    definitely lost: 0 bytes in 0 blocks
==29937==    indirectly lost: 0 bytes in 0 blocks
==29937==      possibly lost: 0 bytes in 0 blocks
==29937==    still reachable: 72,736 bytes in 2 blocks
==29937==         suppressed: 0 bytes in 0 blocks
==29937== Reachable blocks (those to which a pointer was found) are not shown.
==29937== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==29937==
==29937== For counts of detected and suppressed errors, rerun with: -v
==29937== Use --track-origins=yes to see where uninitialised values come from
==29937== ERROR SUMMARY: 122660 errors from 17 contexts (suppressed: 0 from 0)
	</description>
	<comments>
		<comment id='1' author='kings-landing' date='2019-09-09T18:59:23Z'>
		Any update on this issue? Thanks!
		</comment>
		<comment id='2' author='kings-landing' date='2019-09-23T10:11:12Z'>
		I do not think there is a proper memory leak. Your log shows only still reachable blocks that do not really hurt. Also, I am not certain that flann is the main reason for those. Can you rerun valgrind with --show-reachable=yes.  I guess most/all of them either come from X (visualizer), or OpenMP. In any case they would be beyond our scope.
		</comment>
		<comment id='3' author='kings-landing' date='2019-10-29T14:51:57Z'>
		Closing due to inactivity. If you still think that there is a memory issue, feel free to reopen it.
		</comment>
	</comments>
</bug>