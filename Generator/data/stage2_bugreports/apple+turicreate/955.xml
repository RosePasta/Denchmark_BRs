<bug id='955' author='Benjamin-Lee' open_date='2018-08-09T06:31:59Z' closed_time='2018-08-24T20:19:03Z'>
	<summary>SFrame.save() takes a really long time</summary>
	<description>
For context, I am trying to save a 395071 row x 1094 column SFrame. This process is taking hours on my 2015 MacBook Pro. Is there anything I can do to speed up saving?
	</description>
	<comments>
		<comment id='1' author='Benjamin-Lee' date='2018-08-09T06:45:23Z'>
		For comparison, converting the SFrame to a DataFrame and then using to_hdf() takes a matter of seconds.
		</comment>
		<comment id='2' author='Benjamin-Lee' date='2018-08-09T06:46:29Z'>
		That's very unusual. By any chance was this SFrame created by doing a lot of appends. Have you tried saving to a csv? to see if its faster?
		</comment>
		<comment id='3' author='Benjamin-Lee' date='2018-08-09T06:48:59Z'>
		I will definitely try that out. In the mean time, here is the code I used to generate and save the SFrame:
import turicreate as tc
import freqgen
from itertools import product
import pandas as pd

sf = tc.SFrame.read_csv(f"../data/condo-0.1.3.csv", column_type_hints=[str, bool, str, int, str, str])
k = 5
print("applying kmer counter")
sf[f"{k}mers"] = sf["sequence"].apply(lambda x: freqgen.k_mer_frequencies(x, k))
sf = sf.unpack(f"{k}mers", column_name_prefix="")

print("applying codon counter")
sf["cub"] = sf["sequence"].apply(lambda x: freqgen.codon_frequencies(x))
sf = sf.unpack("cub", column_name_prefix="")

print("saving")
sf.save(f"./cub-{k}mer-0.1.3.sframe")
		</comment>
		<comment id='4' author='Benjamin-Lee' date='2018-08-09T06:49:53Z'>
		Where can I get ../data/condo-0.1.3.csv to repro this?
		</comment>
		<comment id='5' author='Benjamin-Lee' date='2018-08-09T07:31:47Z'>
		&lt;denchmark-link:https://github.com/Benjamin-Lee&gt;@Benjamin-Lee&lt;/denchmark-link&gt;
 can you please try replacing the  line with  and see if also takes long time? Does it create some significant CPU load?
SFrame operations are lazily evaluated - there's a good chance that the save() clause is the first time that all of the calculations above are actually being calculated.
		</comment>
		<comment id='6' author='Benjamin-Lee' date='2018-08-24T20:19:03Z'>
		Did not get a repro for this and it's unclear whether there is a bug here. Closing. &lt;denchmark-link:https://github.com/Benjamin-Lee&gt;@Benjamin-Lee&lt;/denchmark-link&gt;
, if you can repro this consistently, please provide the data and repro steps and reopen, thanks!
		</comment>
	</comments>
</bug>