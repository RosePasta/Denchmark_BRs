<bug id='588' author='Leon16' open_date='2018-05-14T08:51:49Z' closed_time='2018-06-12T16:59:25Z'>
	<summary>Object Detection produces error while training the model using train_data</summary>
	<description>
I was following up the steps in the&lt;denchmark-link:https://apple.github.io/turicreate/docs/userguide/object_detection/&gt; Object Detection section&lt;/denchmark-link&gt;
 and got error at the following steps:
import turicreate as tc
data =  tc.SFrame('ig02.sframe')
train_data, test_data = data.random_split(0.8)
model = tc.object_detector.create(train_data)
The error is shown as the following:



model = tc.object_detector.create(train_data)
Using 'image' as feature column
Using 'annotations' as annotations column
Downloading https://docs-assets.developer.apple.com/turicreate/models/darknet.params
Download completed: /var/tmp/model_cache/darknet.params
2018-05-14 16:33:18  Training    1/6000  Loss  7.437
2018-05-14 16:33:40  Training    2/6000  Loss  7.391
2018-05-14 16:34:01  Training    3/6000  Loss  7.428
2018-05-14 16:34:21  Training    4/6000  Loss  7.427
2018-05-14 16:34:41  Training    5/6000  Loss  7.402
2018-05-14 16:35:02  Training    6/6000  Loss  7.401
2018-05-14 16:35:30  Training    7/6000  Loss  7.335
2018-05-14 16:35:50  Training    8/6000  Loss  7.270
2018-05-14 16:36:10  Training    9/6000  Loss  7.226
2018-05-14 16:36:29  Training   10/6000  Loss  7.224
2018-05-14 16:36:49  Training   11/6000  Loss  7.220
2018-05-14 16:37:08  Training   12/6000  Loss  7.224
Traceback (most recent call last):
File "", line 1, in 
File "/Users/leonchen/venv/lib/python3.6/site-packages/turicreate/toolkits/object_detector/object_detector.py", line 336, in create
for batch in loader:
File "/Users/leonchen/venv/lib/python3.6/site-packages/turicreate/toolkits/object_detector/_sframe_loader.py", line 120, in next
return self._next()
File "/Users/leonchen/venv/lib/python3.6/site-packages/turicreate/toolkits/object_detector/_sframe_loader.py", line 178, in _next
] for ann in label if is_valid(ann)]).reshape(-1, 4)
File "/Users/leonchen/venv/lib/python3.6/site-packages/turicreate/toolkits/object_detector/_sframe_loader.py", line 178, in 
] for ann in label if is_valid(ann)]).reshape(-1, 4)
File "/Users/leonchen/venv/lib/python3.6/site-packages/turicreate/toolkits/object_detector/_sframe_loader.py", line 168, in is_valid
raise _ToolkitError("Detected an bounding box annotation with improper format: {}".format(ann))
turicreate.toolkits._main.ToolkitError: Detected an bounding box annotation with improper format: {'label': 'carsgraz'}



appreciate if anyone could help point out what might went wrong.
	</description>
	<comments>
		<comment id='1' author='Leon16' date='2018-05-14T13:30:38Z'>
		I think you have one particular bounding box in your dataset that doesn't quite have the right format. It seems it only has the label but not any bounding boxes.
You can isolate that particular issue by doing:
&lt;denchmark-code&gt;bad_data = data['annotation'].apply(lambda x: x == {'label': 'carsgraz'})
print data[bad_data]
&lt;/denchmark-code&gt;

If that's the case, then remove the data point using
&lt;denchmark-code&gt;data_good = data[1 - bad_data]
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/gustavla&gt;@gustavla&lt;/denchmark-link&gt;
 It might be worth skipping the odd bad data in the middle.
		</comment>
		<comment id='2' author='Leon16' date='2018-05-17T02:03:17Z'>
		I digged into the reporting source code and finally found the problematic data row as the following:
{‘image’: Height: 480px
Width: 640px
Channels: 3,
‘name': 'carsgraz_335',
'label': 'carsgraz',
'annotations': [{'label': 'carsgraz', 'coordinates': {'x': 237.0, 'width': 46, 'y': 277.0, 'height': 32}}, {'label': 'carsgraz'}]}
it looks like column 'annotations' contains a list with multiple dict types. one of the dict is not complete"
{'label': 'carsgraz'}
Therefore I have to copy the reporting source code's segment and make it a fn before calling the lamba:
def is_valid(ann_list):
class_to_index = ['person', 'bike', 'carsgraz']
for ann in ann_list:
is_rect = ('type' not in ann or ann['type'] == 'rectangle')
if not is_rect:
# Not valid, but we bypass stricter checks (we simply
# do not care about non rectangle types)
return False
ok_required = ('coordinates' in ann and
isinstance(ann['coordinates'], dict) and
set(ann['coordinates'].keys()) == {'x', 'y', 'width', 'height'} and
'label' in ann)
if not ok_required:
print ("Detected an bounding box annotation with improper format:", ann)
return False
ok_optional = ann['label'] in class_to_index
return ok_optional
good_data = data['annotation'].apply(lambda x: is_valid(x))
bad_data = [1 - good_data]
Then I could see the above problematic row and why the source code is reporting the problem.
I would agree with &lt;denchmark-link:https://github.com/srikris&gt;@srikris&lt;/denchmark-link&gt;
 that it is better to skip the bad data instead of raise an exception;
		</comment>
	</comments>
</bug>