<bug id='872' author='thedashdude' open_date='2018-07-20T11:12:05Z' closed_time='2020-10-09T18:26:11Z'>
	<summary>Large loss in style transfer</summary>
	<description>
Output of running model = tc.style_transfer.create(styles, content)
&lt;denchmark-code&gt;+--------------+--------------+--------------+
| Iteration    | Loss         | Elapsed Time |
+--------------+--------------+--------------+
| 1            | 18.153       | 13.9         |
| 2            | 39867919840067.539| 51.0         |
| 3            | 35881127856061.688| 87.8         |
| 4            | 32293015070456.355| 124.1        |
| 5            | 29063713563426.012| 162.7        |
| 6            | 26157342207084.680| 201.3        |
| 7            | 23541607986377.094| 238.2        |
| 8            | 61055367027790.594| 276.1        |
| 9            | 54949830325012.773| 315.1        |
| 10           | 49454847292512.406| 354.6        |
| 11           | 44509362563262.000| 392.4        |
| 12           | 40058426306950.875| 430.9        |
&lt;/denchmark-code&gt;

This has happened with several configurations of data, all with similar results.
As far as I can remember, with all possible combinations of:
Using either 8 or 4 style images
Using 1000 or 20 content images
Using 150 or 50 training iterations, can't use 5000 because I am on CPU, although it yields the same results when run for a while before I stopped it.
I also did one run with 20 content images scaled down to see if RAM was an issue, as I have been running low, but no change in behavior.
Upon training completion, running the model with any style yields (with very minor variation) the following result:
&lt;denchmark-link:https://user-images.githubusercontent.com/17187253/42999015-de95377c-8c39-11e8-85d7-479d72786b9f.jpg&gt;&lt;/denchmark-link&gt;

Turns to
&lt;denchmark-link:https://user-images.githubusercontent.com/17187253/42999032-ec8c9438-8c39-11e8-879c-e1083d1dc6be.jpg&gt;&lt;/denchmark-link&gt;

While I wasn't expecting great results for the amount of training, this doesn't seem like its working right. Also, if I try to do more than one style transfer for an image, I run out of RAM.
However, all that seems secondary, as the first thing that doesn't work is the loss. Any ideas what that is about?
Ubuntu 16.04
Using venv
Running on CPU
&lt;denchmark-code&gt;&gt;&gt;&gt; tc.__version__
'5.0b2'
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='thedashdude' date='2018-07-20T11:14:56Z'>
		For the record, the results don't look a like any style.
Here are the two that look the most similar to the result, but many different things give a nearly identical result.
&lt;denchmark-link:https://user-images.githubusercontent.com/17187253/42999623-18284a90-8c3c-11e8-8080-3ebafb7d1531.jpg&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/17187253/42999602-03435c46-8c3c-11e8-93a2-e6422588adc7.jpg&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='thedashdude' date='2018-07-20T18:35:56Z'>
		Hi &lt;denchmark-link:https://github.com/thedashdude&gt;@thedashdude&lt;/denchmark-link&gt;
,
Definitely, the model is diverging and this is not expected. Thanks for bringing up the issue.
Can you provide the exact style and content images that led to this divergence?
		</comment>
		<comment id='3' author='thedashdude' date='2018-07-23T06:23:06Z'>
		&lt;denchmark-link:https://github.com/apple/turicreate/files/2218054/sdata.zip&gt;sdata.zip&lt;/denchmark-link&gt;

Here are the style and content images I was using. The issue persisted when I used other styles and content, so I don't think the images were the issue.
Nor do I think my code is the issue, as its pretty basic:
import turicreate as tc

styles = tc.load_images('sdata/styles/')
content = tc.load_images('sdata/content/')

model = tc.style_transfer.create(styles, content, max_iterations=150)

model.save('stylize0.model')

model.export_coreml('stylize0.mlmodel')
Hardware isn't great, but I think should work slowly:
Intel i5-6402P CPU @ 2.80GHz x 4
8 GB Memory
64-Bit Ubuntu 16.04
Output of pip freeze, which I think has all the right versions for turicreate:
&lt;denchmark-code&gt;certifi==2018.4.16
chardet==3.0.4
coremltools==2.0b1
decorator==4.3.0
graphviz==0.8.4
idna==2.7
mxnet==1.1.0.post0
numpy==1.14.5
opencv-python==3.4.1.15
pandas==0.23.3
Pillow==5.2.0
prettytable==0.7.2
protobuf==3.6.0
python-dateutil==2.7.3
pytz==2018.5
requests==2.19.1
six==1.10.0
turicreate==5.0b2
urllib3==1.23
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='thedashdude' date='2018-07-25T19:09:47Z'>
		Hi &lt;denchmark-link:https://github.com/thedashdude&gt;@thedashdude&lt;/denchmark-link&gt;
 ,
I was able to reproduce your issue on Ubuntu CPU,
Unfortunately, it doesn't reproduce on Mac or Ubuntu GPU.
For now, here is a workaround to unblock you.
pip uninstall mxnet
pip install mxnet==1.2.1
import turicreate as tc
tc.config.set_runtime_config('TURI_DEFAULT_NUM_PYLAMBDA_WORKERS', 1)
Let us know if you are still blocked.
We are planning to update mxnet to 1.2 (see &lt;denchmark-link:https://github.com/apple/turicreate/issues/670&gt;#670&lt;/denchmark-link&gt;
). Once we do that, this issue should be resolved.
		</comment>
		<comment id='5' author='thedashdude' date='2018-07-27T05:47:45Z'>
		All good. Thanks!
		</comment>
		<comment id='6' author='thedashdude' date='2020-09-01T21:22:32Z'>
		We have made significant changes to our Style Transfer Toolkit since the last correspondence in this issue. Is this still an issue in TuriCreate 6.4?
		</comment>
	</comments>
</bug>