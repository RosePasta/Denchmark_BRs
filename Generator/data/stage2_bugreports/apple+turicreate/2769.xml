<bug id='2769' author='guihao-liang' open_date='2019-12-02T23:02:25Z' closed_time='2019-12-04T23:47:09Z'>
	<summary>od 6.0 consumes weights exported from 5.8 but has inconsistent evaluation result</summary>
	<description>
&lt;denchmark-h:h1&gt;result&lt;/denchmark-h&gt;

using same dataset and same weights, but
metrics from 6.0
&lt;denchmark-code&gt;{'average_precision': {'bike': 0.012347009032964706, 'carsgraz': 0.015508192591369152}, 'average_precision_50': {'bike': 0.069046750664711, 'carsgraz': 0.060742706060409546}, 'mean_average_precision': 0.013927601277828217, 'mean_average_precision_50': 0.06489472836256027}
&lt;/denchmark-code&gt;

metrics from 5.8:
&lt;denchmark-code&gt;{'average_precision_50': {'bike': 0.09294442373851787, 'carsgraz': 0.06547559906557089}, 'average_precision': {'bike': 0.015251833463317571, 'carsgraz': 0.019742030947649234}, 'mean_average_precision_50': 0.07921001140204438, 'mean_average_precision': 0.017496932205483408}
&lt;/denchmark-code&gt;

are different.
&lt;denchmark-h:h1&gt;minimum reproduction:&lt;/denchmark-h&gt;


train over data ig02 using 5.8 and export weights to the disk

&lt;denchmark-code&gt;import turicreate as tc
import sys
import os
import pickle

tc_version = tc.__version__
dir_out = "./output"
name_out = "ig02-{}-{}".format(sys.platform, tc_version)

data = tc.SFrame('/Users/&lt;yourname&gt;/Work/tc-testing/'
                 'tc_test_dataset/Object_Detection/ig02.sframe')

train_data, test_data = data.random_split(0.8, seed=1)

# Create a model
model = tc.object_detector.create(train_data, max_iterations=20)

# Save predictions to an SArray
predictions = model.predict(test_data)
predictions.save(os.path.join(dir_out, "%s-predictions.sarray" % name_out))

# Evaluate the model and save the results into a dictionary
evaluations = model.evaluate(test_data, metric='all')
to_serialize = {}
for key, val in evaluations.items():
    if isinstance(val, tc.SFrame):
        print("save sframe")
        val.save(os.path.join(dir_out,
                              "{}-evaluations-{}.sframe".format(name_out,
                                                                key)))
    else:
        to_serialize[key] = val

if len(to_serialize) &gt; 0:
    print("dump evaluation dictionary:\n", to_serialize)
    with open(os.path.join(dir_out, "{}-evaluations.dict".format(name_out)),
              'wb') as f:
        pickle.dump(to_serialize, f)

# Save the model for later use in Turi Create
model.save('output/%s.model' % name_out)

# Export for use in Core ML
model.export_coreml('output/%s.mlmodel' % name_out)
&lt;/denchmark-code&gt;


load the model to 6.0

&lt;denchmark-code&gt;import turicreate as tc
import sys
import os

tc_version = sys.argv[1]
dir_out = "./output"
name_out = "ig02-{}-{}".format(sys.platform, tc_version)

data = tc.SFrame('/Users/&lt;yourname&gt;/Work/tc-testing/'
                 'tc_test_dataset/Object_Detection/ig02.sframe')

train_data, test_data = data.random_split(0.8, seed=1)

# Create a model
model = tc.load_model(os.path.join(dir_out, "%s.model" % name_out))

# Save predictions to an SArray
predictions = model.predict(test_data)
print(predictions)

evaluations = model.evaluate(test_data, metric="all")
print(evaluations)
&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>