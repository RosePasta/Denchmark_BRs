<bug id='2799' author='TobyRoseman' open_date='2019-12-05T01:35:41Z' closed_time='2020-01-03T00:12:17Z'>
	<summary>Style Transfer model loads lazily</summary>
	<description>
&lt;denchmark-link:https://github.com/apple/turicreate/blob/4e9fe88dc634fa3d694fbfd48427c9eddbe99902/src/python/turicreate/test/test_style_transfer.py#L306&gt;This unit test&lt;/denchmark-link&gt;
 is disabled unless you have a CUDA GPU. Running this unit test with a CUDA GPU fails:
&lt;denchmark-code&gt;_________________________________________________________________ StyleTransferGPUTest.test_gpu_save_load_export _________________________________________________________________

self = &lt;turicreate.test.test_style_transfer.StyleTransferGPUTest testMethod=test_gpu_save_load_export&gt;

    def test_gpu_save_load_export(self):
        old_num_gpus = tc.config.get_num_gpus()
        gpu_options = set([old_num_gpus, 0, 1])
        for in_gpus in gpu_options:
            tc.config.set_num_gpus(in_gpus)
            model = tc.style_transfer.create(self.style_sf, self.content_sf, max_iterations=1)
            for out_gpus in gpu_options:
                with test_util.TempDirectory() as path:
&gt;                   model.save(path)

test_style_transfer.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../toolkits/_model.py:491: in save
    return glconnect.get_unity().save_model(self, _make_internal_url(location))
cy_unity.pyx:96: in turicreate._cython.cy_unity.UnityGlobalProxy.save_model
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

&gt;   ???
E   OSError: Cannot open /tmp/tmpcv6jm96j/m_bb1b7ed44da663f6.0000 for read. Cannot open /tmp/tmpcv6jm96j/m_bb1b7ed44da663f6.0000 for reading

cy_unity.pyx:102: OSError
&lt;/denchmark-code&gt;

It always fails with the same error message. It also always fails on the first iteration of the outer for-loop and the second iteration of the inner for-loop.
Preventing  from deleting files (i.e. making &lt;denchmark-link:https://github.com/apple/turicreate/blob/4e9fe88dc634fa3d694fbfd48427c9eddbe99902/src/python/turicreate/test/util.py#L89&gt;this method&lt;/denchmark-link&gt;
 a no-op) causes the test to pass.
The test itself should also be refactored. It's saving the TuriCreate model to path and exporting the CoreML model to os.path.join(path, 'model.mlmodel'). So it essentially writing a Core ML model to disk inside of a Turi Create model folder. However after fixing this issue, the unit test still fails.
	</description>
	<comments>
		<comment id='1' author='TobyRoseman' date='2019-12-11T19:49:06Z'>
		This unit test should be refactored but there is a real issue here and it's quite strange. The following happens both with a GPU and without a GPU:
In [1]: import turicreate as tc                                                                                                                                                   

In [2]: my_st_model = tc.load_model('/tmp/my_st_model/')                                                                                                                          

In [3]: ! mv /tmp/my_st_model /tmp/my_st_model2                                                                                                                                   

In [4]: my_st_model.save('/tmp/new_st_model')                                                                                                                                     
---------------------------------------------------------------------------
OSError                                   Traceback (most recent call last)
&lt;ipython-input-4-6c3f9791082b&gt; in &lt;module&gt;
----&gt; 1 my_st_model.save('/tmp/new_st_model')

~/anaconda3/envs/rc-test/lib/python3.7/site-packages/turicreate/toolkits/_model.py in save(self, location)
    489         &gt;&gt;&gt; loaded_model = turicreate.load_model('my_model_file')
    490         """
--&gt; 491         return glconnect.get_unity().save_model(self, _make_internal_url(location))
    492 
    493     def summary(self, output=None):

cy_unity.pyx in turicreate._cython.cy_unity.UnityGlobalProxy.save_model()

cy_unity.pyx in turicreate._cython.cy_unity.UnityGlobalProxy.save_model()

OSError: Cannot open /tmp/my_st_model/m_6e157881b6619fe.0000 for read. Cannot open /tmp/my_st_model/m_6e157881b6619fe.0000 for reading
Note: that it's trying to read from the old location. It seems some aspect of loading a style transfer model is evaluated lazily.
Calling other methods on my_st_model works fine. It's something about calling save.
		</comment>
		<comment id='2' author='TobyRoseman' date='2019-12-11T21:20:19Z'>
		The error happens when it tries to access the styles SFrame in its' state.
		</comment>
		<comment id='3' author='TobyRoseman' date='2019-12-13T18:14:21Z'>
		The above behavior is expected due to the move -- sframes are disk backed data structures, so once loaded, they are assumed to exist on disk for the duration of when people access them.  You'd have the same issues if you moved a file being read in any other way while it was being read.
The behavior should be:

Once loaded, the SFrame is assumed to be present on disk for the duration of use.
When a model is saved, the relevant SFrames are present in the directory of saving (sometimes by hardlink, sometimes by writing, but it always exists in that directory).

Do you see behavior different to this?
		</comment>
		<comment id='4' author='TobyRoseman' date='2019-12-13T20:58:25Z'>
		Thanks &lt;denchmark-link:https://github.com/hoytak&gt;@hoytak&lt;/denchmark-link&gt;
. That the behavior I see.
I think having disk based model makes a lot sense for some models (ex: Image Similarity, Item Similarity, K-Means, etc). However I don't think it makes a lot of sense for Style Transfer. That SFrame only contains the style images. So that SFrame is very small, likely less than 10 rows.
		</comment>
	</comments>
</bug>