<bug id='765' author='hoytak' open_date='2018-06-25T22:59:20Z' closed_time='2018-07-06T20:05:09Z'>
	<summary>Malformed JSON error message should be more interpretable.</summary>
	<description>
With the following JSON file, the parsing was really weird:
&lt;denchmark-code&gt; [
  {
  "text": "["I", "have", "an", "atlas"]",
  "label": ["NONE", "NONE", "NONE", "NONE"]
  },
  {
  "text": ["These", "are", "my", "dogs"],
  "label": ["NONE", "NONE", "NONE", "PLN"]
  },
  {
  "text": ["The", "sheep", "are", "fluffy"],
  "label": ["NONE","PLN","NONE","NONE"]
  },
  {
  "text": ["Billiards", "is", "my", "favourite", "game"],
  "label": ["NONE", "NONE", "NONE", "NONE", "NONE"]
  },
  {
  "text": ["I", "went", "to", "five", "sessions", "today"],
  "label": ["NONE", "NONE", "NONE", "NONE", "PLN", "NONE"]
  }
 ]
&lt;/denchmark-code&gt;

It should say this is malformed.
&lt;denchmark-code&gt;In [2]: import turicreate as tc

In [3]: X = tc.SFrame.read_json("/Users/hoytak/Desktop/malformed.json")
Parsing JSON records from /Users/hoytak/Desktop/malformed.json
Unable to parse /Users/hoytak/Desktop/malformed.json. It does not appear to be in JSON record format. A list of dictionaries is expected
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
&lt;ipython-input-3-e50252d77059&gt; in &lt;module&gt;()
----&gt; 1 X = tc.SFrame.read_json("/Users/hoytak/Desktop/malformed.json")

/Users/hoytak/venv-4/lib/python2.7/site-packages/turicreate/data_structures/sframe.pyc in read_json(cls, url, orient)
   1561             g = SArray.read_json(url)
   1562             g = SFrame({'X1':g})
-&gt; 1563             return g.unpack('X1','')
   1564         elif orient == "lines":
   1565             g = cls.read_csv(url, header=False)

/Users/hoytak/venv-4/lib/python2.7/site-packages/turicreate/data_structures/sframe.pyc in unpack(self, column_name, column_name_prefix, column_types, na_value, limit)
   4935             column_name_prefix = column_name
   4936
-&gt; 4937         new_sf = self[column_name].unpack(column_name_prefix, column_types, na_value, limit)
   4938
   4939         # construct return SFrame, check if there is conflict

/Users/hoytak/venv-4/lib/python2.7/site-packages/turicreate/data_structures/sarray.pyc in unpack(self, column_name_prefix, column_types, na_value, limit)
   3463             lengths = [len(i) for i in head_rows]
   3464             if len(lengths) == 0 or max(lengths) == 0:
-&gt; 3465                 raise RuntimeError("Cannot infer number of items from the SArray, SArray may be empty. please explicitly provide column types")
   3466
   3467             # infer column types for dict type at server side, for list and array, infer from client side

RuntimeError: Cannot infer number of items from the SArray, SArray may be empty. please explicitly provide column types

In [4]: X = tc.SArray.read_json("/Users/hoytak/Desktop/malformed.json")
Parsing JSON records from /Users/hoytak/Desktop/malformed.json
Unable to parse /Users/hoytak/Desktop/malformed.json. It does not appear to be in JSON record format. A list of dictionaries is expected

In [5]: X = tc.SFrame.read_csv("/Users/hoytak/Desktop/malformed.json", header=False, line_terminator="")
Finished parsing file /Users/hoytak/Desktop/malformed.json
Parsing completed. Parsed 1 lines in 0.028449 secs.
------------------------------------------------------
Inferred types from first 100 line(s) of file as
column_type_hints=[str,str,str,str,str,str,str,str,dict,dict,dict,str,str,str,str,str,str,str,str,str,str,str,str]
If parsing fails due to incorrect types, you can correct
the inferred type list above and pass it to read_csv in
the column_type_hints argument
------------------------------------------------------
Finished parsing file /Users/hoytak/Desktop/malformed.json
Parsing completed. Parsed 1 lines in 0.00771 secs.

In [6]: X
Out[6]:
Columns:
	X1	str
	X2	str
	X3	str
	X4	str
	X5	str
	X6	str
	X7	str
	X8	str
	X9	dict
	X10	dict
	X11	dict
	X12	str
	X13	str
	X14	str
	X15	str
	X16	str
	X17	str
	X18	str
	X19	str
	X20	str
	X21	str
	X22	str
	X23	str

Rows: 1

Data:
+-------------------------+------+----+---------+----------------+------+------+
|            X1           |  X2  | X3 |    X4   |       X5       |  X6  |  X7  |
+-------------------------+------+----+---------+----------------+------+------+
| [\n  {\n  "text": "["I" | have | an | atlas"] | label": ["NONE | NONE | NONE |
+-------------------------+------+----+---------+----------------+------+------+
+--------------+-------------------------------+-------------------------------+
|      X8      |               X9              |              X10              |
+--------------+-------------------------------+-------------------------------+
| "NONE"]\n  } | {'text': ['These', 'are', ... | {'text': ['The', 'sheep', ... |
+--------------+-------------------------------+-------------------------------+
+-------------------------------+-------------------+------+-----+------+
|              X11              |        X12        | X13  | X14 | X15  |
+-------------------------------+-------------------+------+-----+------+
| {'text': ['Billiards', 'is... | {\n  "text": ["I" | went |  to | five |
+-------------------------------+-------------------+------+-----+------+
+----------+----------+----------------+------+------+-----+
|   X16    |   X17    |      X18       | X19  | X20  | ... |
+----------+----------+----------------+------+------+-----+
| sessions | "today"] | label": ["NONE | NONE | NONE | ... |
+----------+----------+----------------+------+------+-----+
[1 rows x 23 columns]
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='hoytak' date='2018-06-25T23:45:36Z'>
		The issue is that the good user-facing message:
&lt;denchmark-code&gt;Unable to parse /Users/hoytak/Desktop/malformed.json. It does not appear to be in JSON record format. A list of dictionaries is expected
&lt;/denchmark-code&gt;

Just gets printed out, prior to the exception being thrown, so it's lost in the sea of output. Instead, we should use this as the thrown exception message.
		</comment>
		<comment id='2' author='hoytak' date='2018-06-27T00:24:54Z'>
		&lt;denchmark-link:https://github.com/znation&gt;@znation&lt;/denchmark-link&gt;
 -- good catch.  Yes.
		</comment>
		<comment id='3' author='hoytak' date='2018-07-05T19:03:08Z'>
		I can't reproduce this issue. Here is what I get with the current master:
In [3]: tc.SFrame.read_json('/tmp/malformed.json')
Parsing JSON records from /tmp/malformed.json
Unable to parse /tmp/malformed.json. It does not appear to be in JSON record format. A list of dictionaries is expected
Out[3]: 
Columns:
	None

Rows: 0

Data:
	[]
In [7]: tc.SArray.read_json('/tmp/malformed.json')
Parsing JSON records from /tmp/malformed.json
Unable to parse /tmp/malformed.json. It does not appear to be in JSON record format. A list of dictionaries is expected
Out[7]: 
dtype: dict
Rows: 0
[]
This looks good to me. Although it should probably return None, rather than an empty SFrame/SArray.
&lt;denchmark-link:https://github.com/hoytak&gt;@hoytak&lt;/denchmark-link&gt;
 - can you verify that this is no longer an issues or let me know if there are additional repro steps.
		</comment>
		<comment id='4' author='hoytak' date='2018-07-05T22:47:53Z'>
		&lt;denchmark-link:https://github.com/TobyRoseman&gt;@TobyRoseman&lt;/denchmark-link&gt;
 I think the desired behavior is to have it throw a runtime error in this case, with the error message containing the text about malformed JSON. I don't think it should return either an empty SFrame, or None, when the parsing encountered an error.
		</comment>
		<comment id='5' author='hoytak' date='2018-07-05T23:58:12Z'>
		&lt;denchmark-link:https://github.com/TobyRoseman&gt;@TobyRoseman&lt;/denchmark-link&gt;
 I see this message is coming from C++:
&lt;denchmark-code&gt;src/unity/lib/unity_sarray.cpp:                                  &lt;&lt; "It does not appear to be in JSON record format. "
&lt;/denchmark-code&gt;

I think we just need to log_and_throw for this case, instead of printing the message and continuing.
		</comment>
	</comments>
</bug>