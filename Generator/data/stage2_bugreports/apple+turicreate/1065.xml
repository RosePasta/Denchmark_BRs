<bug id='1065' author='nickjong' open_date='2018-09-05T20:41:54Z' closed_time='2018-09-10T21:01:33Z'>
	<summary>Image deep feature extractor vulnerable to invalid model cache</summary>
	<description>
I finally reproduced the error we've been seeing in some CI tests:
&lt;denchmark-code&gt;RuntimeError: CoreML Error: Unable to extract model type from stream in compiled model: Error opening file stream: /var/folders/y5/9ghgwpqs77s9k8s7s881ng_m0000gn/T/model_cache/squeezenet_v1.1_modified.mlmodelc/coremldata.bin: unspecified iostream_category error
&lt;/denchmark-code&gt;

Inspection of this file reveals that it doesn't exist: there's an empty squeezenet_v1.1_modified.mlmodelc directory in the model cache. (Well, the directory contains some empty subdirectories.)
I don't know whether this invalid compiled model is the result of ordinary cleanup within a temp directory (returned by NSTemporaryDirectory) or something like a crash while writing the model in a previous run.
Regardless, we should make this code path robust to model cache corruption. For example, if the cached model cannot be loaded, follow the no-cache path (and regenerate the model).
	</description>
	<comments>
		<comment id='1' author='nickjong' date='2018-09-06T17:29:36Z'>
		The baseline logic should be write_model &amp;&amp; read_model.
The current logic is (model_exists || write_model) &amp;&amp; read_model.
The cached version should be read_model || (write_model &amp;&amp; read_model), cleaned up slightly to (model_exists &amp;&amp; read_model) || (write_model &amp;&amp; read_model).
(In theory, it's probably actually more efficient not to check for model_exists, but currently we might spew some confusing logging when the read fails the first time.)
		</comment>
		<comment id='2' author='nickjong' date='2018-09-06T17:35:23Z'>
		This should be P1, since any customer who gets their system into this state will be unable to use any image-feature-extractor-based toolkit until they remove the corrupted model cache from their temp directory. The failure state is somewhat persistent.
		</comment>
	</comments>
</bug>