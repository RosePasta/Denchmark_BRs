<bug id='1560' author='shantanuchhabra' open_date='2019-03-08T03:48:09Z' closed_time='2020-10-09T18:30:17Z'>
	<summary>gl_sframe::apply leads to an invalid free() on Linux</summary>
	<description>
For an example of a failed build, see &lt;denchmark-link:https://travis-ci.com/apple/turicreate/jobs/182839529&gt;https://travis-ci.com/apple/turicreate/jobs/182839529&lt;/denchmark-link&gt;

I was also able to repro this on a Linux machine running Ubuntu 18.04.2.
Repro steps:

In src/unity/toolkits/drawing_classifier/data_preparation.cpp, replace the following code snippet in the _drawing_classifier_prepare_data function:

for (int row_number = 0; row_number &lt; (int)data.size(); row_number++) {
    const flexible_type &amp;strokes = data[feature][row_number];
    flex_list current_stroke_based_drawing = strokes.to&lt;flex_list&gt;();
    bitmaps.push_back(
        convert_stroke_based_drawing_to_bitmap(
            current_stroke_based_drawing, row_number));
}
gl_sarray bitmaps_sarray(bitmaps);
gl_sframe converted_sframe = gl_sframe(data);
converted_sframe[feature] = bitmaps_sarray;
converted_sframe.materialize();
return converted_sframe;
with the following code snippet:
gl_sframe selected_sframe = data.select_columns({feature});
selected_sframe = selected_sframe.add_row_number();
gl_sarray bitmaps_sarray = selected_sframe.apply([](
    const sframe_rows::row&amp; sframe_row) {
    const flexible_type &amp;strokes = sframe_row[0];
    int row_number = sframe_row[1];
    flex_list current_stroke_based_drawing = strokes.to&lt;flex_list&gt;();
    flex_image current_bitmap = convert_stroke_based_drawing_to_bitmap(
        current_stroke_based_drawing, row_number);
    return current_bitmap;
}, flex_type_enum::IMAGE);

gl_sframe converted_sframe = gl_sframe(data);
converted_sframe.replace_add_column(bitmaps_sarray, feature);
    
converted_sframe.materialize();
return converted_sframe;


Next, build Turi Create from source.


Activate the virtual environment used for the build, and run the following Python script:


import turicreate as tc
sf = tc.SFrame({"drawing": [ [[{"x":1,"y":1},{"x":2,"y":2}], [{"x":5,"y":5},{"x":10,"y":10}]] ], "label": [1]})
model = tc.drawing_classifier.create(sf, feature="drawing", target="label", num_epochs=1)
	</description>
	<comments>
		<comment id='1' author='shantanuchhabra' date='2019-03-11T18:38:29Z'>
		The code in turicreate/src/unity/toolkits/drawing_classifier/data_preparation.cpp has a lot of inefficiences. Most functions ought to take const ref instead of copy. For instance
&lt;denchmark-code&gt;flex_list simplify_drawing(flex_list raw_drawing, int row_number);
flex_nd_vec paint_stroke(flex_nd_vec bitmap ...)
&lt;/denchmark-code&gt;

should be
&lt;denchmark-code&gt;flex_list simplify_drawing(const flex_list&amp; raw_drawing, int row_number) 
flex_nd_vec paint_stroke(const flex_nd_vec&amp; bitmap ...)
&lt;/denchmark-code&gt;

And so on.
My first suspicion is an out of bounds access.
Can we begin by adding some bounds check asserts to all the code here?
It will also be helpful to have  C++ tests for these code paths too.
		</comment>
		<comment id='2' author='shantanuchhabra' date='2019-03-11T18:42:32Z'>
		Well... From a quick code review I see the bug immediately.
Line 312 in data_preparation.cpp returns a pointer to the stack.
		</comment>
		<comment id='3' author='shantanuchhabra' date='2019-03-11T18:56:18Z'>
		Nope I was wrong here. flex_image does copy.
		</comment>
		<comment id='4' author='shantanuchhabra' date='2019-06-26T21:35:34Z'>
		Let's get &lt;denchmark-link:https://github.com/apple/turicreate/pull/1607&gt;#1607&lt;/denchmark-link&gt;
 done before we look at this more.  I'm very skeptical this is an issue with lambda apply.
		</comment>
		<comment id='5' author='shantanuchhabra' date='2020-08-31T23:33:44Z'>
		&lt;denchmark-link:https://github.com/apple/turicreate/pull/1607&gt;#1607&lt;/denchmark-link&gt;
 has been merged long ago. Is this issue still relevant?
		</comment>
		<comment id='6' author='shantanuchhabra' date='2020-10-09T18:30:17Z'>
		Sounds like this is no longer relevant. So I'm going to close this issue. If anyone thinks it's still relevant, feel free to reopen.
		</comment>
	</comments>
</bug>