<bug id='7365' author='beam2d' open_date='2019-06-03T05:51:35Z' closed_time='2019-06-14T07:09:20Z'>
	<summary>AdamW behavior on CPU changed at v6.0.0 and is now inconsistent to GPU logic</summary>
	<description>
I just found that there is a code path in Adam (AdamW) on CPU that changes the behavior between v5.4.0 and v6.0.0.
(The problem has been originally reported by &lt;denchmark-link:https://github.com/harujoh&gt;@harujoh&lt;/denchmark-link&gt;
 on Twitter. Thank you!)
Code to reproduce:
import chainer as ch
import numpy as np  # s/numpy/cupy/ for cupy case

n = ch.Link(x=(2,))
x = n.x

o = ch.optimizers.Adam(eta=0.5, weight_decay_rate=0.1)
o.setup(n)

x.data.fill(1)
x.grad = np.ones_like(x.data)
o.update()

print(x.data)
chainer==5.4.0 (numpy): [0.9495 0.9495]
chainer==6.0.0 (numpy): [0.89949995 0.89949995]
chainer==6.0.0 (cupy): [0.9495 0.9495]

&lt;denchmark-link:https://github.com/chainer/chainer/blob/v5/chainer/optimizers/adam.py#L132-L133&gt;Original logic&lt;/denchmark-link&gt;
 multiplies  to  while &lt;denchmark-link:https://github.com/chainer/chainer/blob/master/chainer/optimizers/adam.py#L219-L220&gt;new logic&lt;/denchmark-link&gt;
 does not. It looks intel64 path in v5 is also inconsistent to the original CPU logic.
As the above result tells, &lt;denchmark-link:https://github.com/chainer/chainer/blob/master/chainer/optimizers/adam.py#L303-L304&gt;the GPU logic&lt;/denchmark-link&gt;
 behaves same as the "original" logic.
	</description>
	<comments>
	</comments>
</bug>