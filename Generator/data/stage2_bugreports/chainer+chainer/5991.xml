<bug id='5991' author='niboshi' open_date='2019-01-14T06:52:53Z' closed_time='2019-02-04T02:22:02Z'>
	<summary>CUDA memory pool thread safety</summary>
	<description>
Memory pool in CUDA backend seems to have thread safety issues:

FreeUnusedBlocks is not protected by a mutex. This can be easily fixed.
Malloc-Free cycle also causes errors.

The test shown below would fail. (note that it would fail even if FreeUnusedBlocks is commented out).
TEST(MemoryPoolTest, FreeUnusedBlocksThreadSafe) {
    static constexpr size_t kRepeat = 100U;
    MemoryPool memory_pool{0, std::make_unique&lt;FixedCapacityDummyAllocator&gt;(0xffffffffU)};

    testing::RunThreads(3, [&amp;memory_pool](size_t thread_index) {
        for (size_t i = 0; i &lt; kRepeat; ++i) {
            switch (thread_index) {
                case 0: {
                    void* ptr = memory_pool.Malloc(1U);
                    memory_pool.Free(ptr);
                } break;
                case 1: {
                    void* ptr = memory_pool.Malloc(1U);
                    memory_pool.Free(ptr);
                } break;
                case 2:
                    // memory_pool.FreeUnusedBlocks();
                    break;
            }
        }
    });
}
Error:
&lt;denchmark-code&gt;[ RUN      ] MemoryPoolTest.FreeUnusedBlocksThreadSafe
unknown file: Failure
C++ exception with description "Cannot free out-of-pool memory" thrown in the test body.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='niboshi' date='2019-01-14T08:02:46Z'>
		As for the second problem, it seems FixedCapacityDummyAllocator was the cause.
As the allocation sizes are encoded in the pointer values, it returned the same pointer for different allocations. That was the cause.
		</comment>
	</comments>
</bug>