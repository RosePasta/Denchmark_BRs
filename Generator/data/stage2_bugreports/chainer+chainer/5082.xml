<bug id='5082' author='gwichern' open_date='2018-07-11T01:11:34Z' closed_time='2018-11-01T14:32:52Z'>
	<summary>Numpy LSTM very slow in chainer 4</summary>
	<description>
I recently upgraded from v3.4, and the following code runs about 20x slower in v4.2.
&lt;denchmark-code&gt;import numpy as np
import chainer.links as L

n_inputs = 120
n_steps = 500
n_out = 600
dropout = 0.0
n_layers = 3

x = [np.random.rand(n_steps, n_inputs).astype(np.float32)]
net = L.NStepLSTM(n_layers, n_inputs, n_out, dropout)
h, c, y = net(None, None, x)
&lt;/denchmark-code&gt;

With a quick profile it seems like the stacking of the weight matrices for the different LSTM gates is now happening in the inner time-step loop, instead of once per batch as in v3.4.
&lt;denchmark-link:https://github.com/chainer/chainer/blob/master/chainer/functions/connection/n_step_lstm.py#L450-L457&gt;https://github.com/chainer/chainer/blob/master/chainer/functions/connection/n_step_lstm.py#L450-L457&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='gwichern' date='2018-08-14T14:40:19Z'>
		Thank you for reporting.
It might be (partly) caused by ideep4py.
How about updating to ideep4py&gt;=2.0.0, if it's installed?
&lt;denchmark-h:h3&gt;Some more detail&lt;/denchmark-h&gt;

The problem started in &lt;denchmark-link:https://github.com/chainer/chainer/pull/4276&gt;#4276&lt;/denchmark-link&gt;
.
After this PR, this simple code takes ~100 times slower in my environment.
&lt;denchmark-code&gt;import chainer
import numpy as np
X = np.ones((1, 50), 'f')
W = np.ones((200, 50), 'f')
X.dot(W.T)
&lt;/denchmark-code&gt;

Note that in this code neither ideep4py nor chainer is actually used.
Conditions of slowdown:

ideep4py 1.0.3 or 1.0.4 is installed
import chainer - This is the mysterious part. If ideep4py is directly imported as import ideep4py without chainer, performance degradation is not observed.

		</comment>
		<comment id='2' author='gwichern' date='2018-08-15T03:39:29Z'>
		It seems iDeep v1.x overwrites the default thread number to the number of cores upon initialization.
&lt;denchmark-link:https://github.com/intel/ideep/blob/v1.0.4/python/ideep4py/common/cpu_info.cc#L408-L411&gt;https://github.com/intel/ideep/blob/v1.0.4/python/ideep4py/common/cpu_info.cc#L408-L411&lt;/denchmark-link&gt;

The code does not exist in iDeep v2.x.
Setting environment variable export OMP_NUM_THREADS=1 seems to resolve the issue on my environment.

How about updating to ideep4py&gt;=2.0.0, if it's installed?

Please do not do this, as iDeep4py v2.0 is incompatible with the current Chainer.
It will be supported (possibly) in the next release.
		</comment>
		<comment id='3' author='gwichern' date='2018-11-01T14:32:52Z'>
		Chainer v5 is stable.  Feel free to open a new issue if it's slow in v5+.
		</comment>
	</comments>
</bug>