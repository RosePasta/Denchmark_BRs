<bug id='4333' author='soskek' open_date='2018-02-14T14:00:58Z' closed_time='2018-03-20T01:59:22Z'>
	<summary>split_axis in backward of concat when 0-size array exists at the tail</summary>
	<description>
For example, functions.concating variables with shape (2, 5) and (0, 5) over axis=0, backward causes an error even though its forward path did not case any error. It is due to functions.split_axis, which is used in the backward and cannot accept indices from the shapes of such inputs.



chainer/chainer/functions/array/concat.py


        Lines 50 to 54
      in
      d633f11






 sizes = numpy.array( 



     [v.shape[self.axis] for v in self.inputs[:-1]] 



 ).cumsum() 



 gx, = grad_outputs 



 return chainer.functions.split_axis(gx, sizes, self.axis) 





This is a reproduction code.
&lt;denchmark-code&gt;import chainer
from chainer import functions as F
import numpy as np

x = chainer.Variable(np.random.rand(2, 5))
empty = chainer.Variable(np.random.rand(0, 5))
print(x.shape)
print(empty.shape)

F.sum(F.concat([x, empty], axis=0))
# forward only passes

F.sum(F.concat([x, empty], axis=0)).backward()
# backward causes an error
&lt;/denchmark-code&gt;

error
&lt;denchmark-code&gt;  File "/home/usr/.pyenv/versions/anaconda3-2.4.0/lib/python3.5/site-packages/chainer/functions/array/split_axis.py", line 37, in check_type_forward
    type_check.expect(in_types[0].shape[self.axis] &gt; max_index)
  File "/home/usr/.pyenv/versions/anaconda3-2.4.0/lib/python3.5/site-packages/chainer/utils/type_check.py", line 524, in expect
    expr.expect()
  File "/home/usr/.pyenv/versions/anaconda3-2.4.0/lib/python3.5/site-packages/chainer/utils/type_check.py", line 482, in expect
    '{0} {1} {2}'.format(left, self.inv, right))
chainer.utils.type_check.InvalidType:
Invalid operation is performed in: SplitAxis (Forward)

Expect: in_types[0].shape[0] &gt; max_index
Actual: 2 &lt;= 2
&lt;/denchmark-code&gt;

For split_axis, you can see such an error directly with the code below
&lt;denchmark-code&gt;x = chainer.Variable(np.random.rand(2, 5))
F.split_axis(x, [1, 2], axis=0)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='soskek' date='2018-02-14T14:41:12Z'>
		If forward works, backward should work too. For making consistency, we have two options.

Add an assertion for such 0-size arrays in check_type_forward of functions.concat
Relax the assertion in check_type_forward of functions.split_axis

I like the 2nd idea that the existing assertion is relaxed. We can change it as follows:
&lt;denchmark-code&gt;                # type_check.expect(in_types[0].shape[self.axis] &gt; max_index)
                type_check.expect(in_types[0].shape[self.axis] &gt;= max_index)
&lt;/denchmark-code&gt;

Even with this relaxed assertion, the function works well for several cases in my environments. And, this relaxed behavior is consistent to numpy.split.



chainer/chainer/functions/array/split_axis.py


         Line 37
      in
      d633f11






 type_check.expect(in_types[0].shape[self.axis] &gt; max_index) 





		</comment>
		<comment id='2' author='soskek' date='2018-02-15T08:55:36Z'>
		I found that this issue is being fixed by &lt;denchmark-link:https://github.com/chainer/chainer/pull/4153&gt;#4153&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='soskek' date='2018-02-15T09:02:45Z'>
		Let's keep it open until it's merged.
Thank you for reporting, by the way!
		</comment>
		<comment id='4' author='soskek' date='2018-03-20T01:59:22Z'>
		This bug was fixed.
		</comment>
	</comments>
</bug>