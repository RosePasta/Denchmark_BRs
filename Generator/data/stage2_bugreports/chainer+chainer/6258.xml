<bug id='6258' author='niboshi' open_date='2019-02-16T10:10:27Z' closed_time='2019-09-27T04:37:30Z'>
	<summary>`type_check` can cause assertion failure</summary>
	<description>
Version: current master
&lt;denchmark-h:h3&gt;Problem&lt;/denchmark-h&gt;

# Note that dtype of the second argument is int64.
F.where(y.array &lt; 0, numpy.array(0), y)
This code causes an error like this:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/niboshi/t/a.py", line 12, in &lt;module&gt;
    y = F.where(y.array == 0, numpy.array(0), y)
  File "/data2/work/w/repos/chainer/chainer/functions/array/where.py", line 87, in where
    z, = Where(condition).apply((x, y))
  File "/data2/work/w/repos/chainer/chainer/function_node.py", line 297, in apply
    self._check_data_type_forward(in_data)
  File "/data2/work/w/repos/chainer/chainer/function_node.py", line 400, in _check_data_type_forward
    self.check_type_forward(in_type)
  File "/data2/work/w/repos/chainer/chainer/functions/array/where.py", line 23, in check_type_forward
    x_type.dtype == y_type.dtype,
  File "/data2/work/w/repos/chainer/chainer/utils/type_check.py", line 545, in expect
    assert isinstance(expr, Testable)
AssertionError
&lt;/denchmark-code&gt;

&lt;denchmark-h:h4&gt;Cause&lt;/denchmark-h&gt;

F.where's forward type check:
        type_check.expect(
            condition.dtype == numpy.bool_,
            x_type.dtype == y_type.dtype,
        )
The above code fails at the second condition, causing InvalidType in the light-mode type check.
FunctionNode then catches the error and triggeres the non-light-mode type checking. The assert statement is evaluated only in this mode, and it fails because the first condition, condition.dtype == numpy.bool_ is of type bool.
	</description>
	<comments>
		<comment id='1' author='niboshi' date='2019-02-21T10:44:32Z'>
		Let me clarify the example.  type_check.expect does not support testing condition.dtype == numpy.bool_ where condition is not type but an array, which is an argument of Where.__init__.  At the moment:

F.where has a bug;

bugs of this kind are hardly found by the available tests; and


Chainer does not seem to provide a way to check condition.dtype == numpy.bool_ and raise InvalidType on failure.  (Instead some functions additionally check the arguments if is_debug, in __init__ or in forward.)

		</comment>
		<comment id='2' author='niboshi' date='2019-02-21T14:41:00Z'>
		&lt;denchmark-link:https://github.com/toslunar&gt;@toslunar&lt;/denchmark-link&gt;
 That's correct.
IMO we can simply support  expressions in .
		</comment>
		<comment id='3' author='niboshi' date='2019-03-01T01:34:57Z'>
		can I be assigned this issue?
Proposed changes:
I think adding .item() to the condition variable will change its dtype from ndarray to int.
		</comment>
		<comment id='4' author='niboshi' date='2019-05-30T03:08:10Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed after 30 days if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='5' author='niboshi' date='2019-08-28T03:58:20Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed after 30 days if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='6' author='niboshi' date='2019-09-27T04:37:28Z'>
		This issue is closed as announced. Feel free to re-open it if needed.
		</comment>
	</comments>
</bug>