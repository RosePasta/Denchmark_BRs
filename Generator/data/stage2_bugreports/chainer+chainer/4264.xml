<bug id='4264' author='mogami290' open_date='2018-02-01T01:45:27Z' closed_time='2018-02-16T08:51:28Z'>
	<summary>2nd order derivative of ELU should not give NaN</summary>
	<description>
The 2nd order derivative of ELU gives off NaN about once out of hundreds of iterations.  Then the entire network will instantly contaminated with NaN.
I tracked the cause and the following code in backward() of class ELUGrad in chainer/chainer/functions/activation/elu.py is the cause
&lt;denchmark-code&gt;        if 1 in indexes:
            ret.append(ggxgx / gy)
&lt;/denchmark-code&gt;

It is natural that this division will give NaN if some element of gy is zero.  Zero will occur when the single-precision floating point subtraction underflows.
For your information, I am circumventing the issue by making minor modification to elu.py as in the attached file, which uses the same way to calculate derivative as the mathematical functions like F.exp.
&lt;denchmark-link:https://github.com/chainer/chainer/files/1683829/elu.py.txt&gt;elu.py.txt&lt;/denchmark-link&gt;

How to reproduce:
I am using Chainer 3.2.0, but that part of the ELU source code is not different in v4.0, therefore I think this issue persists over the versions.
&lt;denchmark-code&gt;&gt;&gt;&gt; import chainer
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = chainer.Variable(np.array([[0, 0]],dtype=np.float32))
&gt;&gt;&gt; y = chainer.functions.elu(x)
&gt;&gt;&gt; y
variable([[ 0.,  0.]])
&gt;&gt;&gt; 
&gt;&gt;&gt; y.grad = (np.array([[0, 1e-30]],dtype=np.float32))
&gt;&gt;&gt; y.backward(enable_double_backprop=True)
&gt;&gt;&gt; 
&gt;&gt;&gt; x.grad_var.grad = np.array([[1, 1]],dtype=np.float32)
&gt;&gt;&gt; x.grad_var.backward()
/home/mogami/.pyenv/versions/anaconda3-4.2.0/lib/python3.5/site-packages/chainer/functions/math/basic_math.py:322: RuntimeWarning: invalid value encountered in true_divide
  return utils.force_array(x[0] / x[1]),
&gt;&gt;&gt; y.grad_var
variable([[  0.00000000e+00,   1.00000000e-30]])
&gt;&gt;&gt; y.grad_var.grad
array([[ nan,   1.]], dtype=float32)
&lt;/denchmark-code&gt;

The first element is nan, though it should be 1.0 in this case.  This example may seem silly when considering ELU only, but having zero for some of elements often happens when dy is back propagated from somewhere else because of underflow.
	</description>
	<comments>
	</comments>
</bug>