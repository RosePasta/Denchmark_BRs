<bug id='6955' author='nattochaduke' open_date='2019-04-17T06:25:55Z' closed_time='2020-03-19T05:37:36Z'>
	<summary>SpectralNormalization causes error when gpu != 0</summary>
	<description>
Link with SpectralNormalization, transferred to gpu by .to_gpu(device) and device is other than 0, causes cuda error when called.
Reproducing code and error message are as follows.
&lt;denchmark-code&gt;import chainer
import chainer.links as L
from chainer import Variable
from chainer.link_hooks import SpectralNormalization
import numpy as np

class ConvSpec(chainer.Chain):
    def __init__(self):
        super(ConvSpec, self).__init__()
        with self.init_scope():
            self.conv = L.Convolution2D(None, 12, 3, 1, 1).add_hook(SpectralNormalization())
    def forward(self, x):
        x = self.conv(x)
        return x

device = 1
convspec = ConvSpec()
convspec.to_gpu(device)
arr = np.random.rand(3, 3, 128, 128).astype(np.float32)
arr = Variable(arr)
arr.to_gpu(device)
convspec(arr)
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;---------------------------------------------------------------------------
CUDADriverError                           Traceback (most recent call last)
&lt;ipython-input-1-f40751ce3f62&gt; in &lt;module&gt;
     20 arr = Variable(arr)
     21 arr.to_gpu(device)
---&gt; 22 convspec(arr)

/usr/local/lib/python3.6/dist-packages/chainer/link.py in __call__(self, *args, **kwargs)
    292             # forward is implemented in the child classes
    293             forward = self.forward  # type: ignore
--&gt; 294         out = forward(*args, **kwargs)
    295 
    296         # Call forward_postprocess hook

&lt;ipython-input-1-f40751ce3f62&gt; in forward(self, x)
     11             self.conv = L.Convolution2D(None, 12, 3, 1, 1).add_hook(SpectralNormalization())
     12     def forward(self, x):
---&gt; 13         x = self.conv(x)
     14         return x
     15 

/usr/local/lib/python3.6/dist-packages/chainer/link.py in __call__(self, *args, **kwargs)
    282                 self, 'forward', args, kwargs)
    283             for hook in hooks:
--&gt; 284                 hook.forward_preprocess(pre_cb_args)
    285 
    286         # Call the forward function

/usr/local/lib/python3.6/dist-packages/chainer/link_hooks/spectral_normalization.py in forward_preprocess(self, cb_args)
    193         self.original_weight = weight
    194         # note: `normalized_weight` is ~chainer.Variable
--&gt; 195         normalized_weight = self.normalize_weight(link, weight)
    196         setattr(link, self.weight_name, normalized_weight)
    197 

/usr/local/lib/python3.6/dist-packages/chainer/link_hooks/spectral_normalization.py in normalize_weight(self, link, *args, **kwargs)
    239         if not configuration.config.in_recomputing:
    240             u, v = update_approximate_vectors(
--&gt; 241                 weight_matrix, u, self.n_power_iteration, self.eps)
    242         else:
    243             v = self.v

/usr/local/lib/python3.6/dist-packages/chainer/link_hooks/spectral_normalization.py in update_approximate_vectors(weight_matrix, u, n_power_iteration, eps)
     47     xp = backend.get_array_module(weight_matrix)
     48     for _ in range(n_power_iteration):
---&gt; 49         v = l2normalize(xp, xp.dot(u, weight_matrix), eps)
     50         u = l2normalize(xp, xp.dot(weight_matrix, v), eps)
     51     return u, v

/usr/local/lib/python3.6/dist-packages/chainer/link_hooks/spectral_normalization.py in l2normalize(xp, v, eps)
     19 
     20     """
---&gt; 21     return v / (xp.linalg.norm(v) + eps)
     22 
     23 

/usr/local/lib/python3.6/dist-packages/cupy/linalg/norms.py in norm(x, ord, axis, keepdims)
     45                 ret = cupy.sqrt(s.sum())
     46             else:
---&gt; 47                 ret = cupy.sqrt((x.ravel() ** 2).sum())
     48             if keepdims:
     49                 ret = ret.reshape((1,) * ndim)

cupy/core/core.pyx in cupy.core.core.ndarray.__pow__()

cupy/core/_kernel.pyx in cupy.core._kernel.ufunc.__call__()

cupy/core/_kernel.pyx in cupy.core._kernel.ufunc._get_ufunc_kernel()

cupy/core/_kernel.pyx in cupy.core._kernel._get_ufunc_kernel()

cupy/core/_kernel.pyx in cupy.core._kernel._get_simple_elementwise_kernel()

cupy/core/carray.pxi in cupy.core.core.compile_with_cache()

/usr/local/lib/python3.6/dist-packages/cupy/cuda/compiler.py in compile_with_cache(source, options, arch, cache_dir, extra_source)
    160             cubin_hash = six.b(hashlib.md5(cubin).hexdigest())
    161             if hash == cubin_hash:
--&gt; 162                 mod.load(cubin)
    163                 return mod
    164 

cupy/cuda/function.pyx in cupy.cuda.function.Module.load()

cupy/cuda/function.pyx in cupy.cuda.function.Module.load()

cupy/cuda/driver.pyx in cupy.cuda.driver.moduleLoadData()

cupy/cuda/driver.pyx in cupy.cuda.driver.check_status()

CUDADriverError: CUDA_ERROR_ILLEGAL_ADDRESS: an illegal memory access was encountered
&lt;/denchmark-code&gt;

When device == 0, that snippet does not raise error.
Further,
&lt;denchmark-code&gt;import chainer
import chainer.links as L
from chainer import Variable
from chainer.link_hooks import SpectralNormalization
import numpy as np

class ConvSpec(chainer.Chain):
    def __init__(self):
        super(ConvSpec, self).__init__()
        with self.init_scope():
            self.conv = L.Convolution2D(None, 12, 3, 1, 1).add_hook(SpectralNormalization())
    def forward(self, x):
        x = self.conv(x)
        return x

device = 1
chainer.cuda.get_device(device).use()
convspec = ConvSpec()
convspec.to_gpu()
arr = np.random.rand(3, 3, 128, 128).astype(np.float32)
arr = Variable(arr)
arr.to_gpu()
convspec(arr)
&lt;/denchmark-code&gt;

This neither raises error.
Platform: Linux-3.10.0-957.10.1.el7.x86_64-x86_64-with-Ubuntu-18.04-bionic
Chainer: 6.0.0rc1
NumPy: 1.16.2
CuPy:
CuPy Version          : 6.0.0rc1
CUDA Root             : /usr/local/cuda
CUDA Build Version    : 9020
CUDA Driver Version   : 9020
CUDA Runtime Version  : 9020
cuDNN Build Version   : 7402
cuDNN Version         : 7402
NCCL Build Version    : 2402
NCCL Runtime Version  : 2402
iDeep: Not Available
This ubuntu platform is on a docker.
GPU device 0 and 1 are both nvidia P100.
chainer v6.0.0b3 also has this bug.
	</description>
	<comments>
		<comment id='1' author='nattochaduke' date='2019-04-17T06:51:10Z'>
		Thank you for reporting, and I appreciate your great observation with the current device setting especially.
Also, I really feel sorry to bother you. ðŸ˜¢
As a matter of fact, I already worked on this problem in &lt;denchmark-link:https://github.com/chainer/chainer/pull/6655&gt;#6655&lt;/denchmark-link&gt;
, and the PR will be in the next releases: v7.0.0a and v6.0.
Fortunately(?), SpectralNormalization linkhook is implemented in one file, so  till the release is to download the file and import the hook from it.
&lt;denchmark-link:https://github.com/chainer/chainer/blob/master/chainer/link_hooks/spectral_normalization.py&gt;https://github.com/chainer/chainer/blob/master/chainer/link_hooks/spectral_normalization.py&lt;/denchmark-link&gt;

Best regards
		</comment>
		<comment id='2' author='nattochaduke' date='2019-04-17T07:04:05Z'>
		&lt;denchmark-link:https://github.com/crcrpar&gt;@crcrpar&lt;/denchmark-link&gt;
  Does the issue already be solved? I still see the same issue using the latest master branch.
I think we should trigger link hook functions in context of its Link.device which owns the hook.
		</comment>
		<comment id='3' author='nattochaduke' date='2019-04-18T21:45:47Z'>
		As this change shows, functions that directly manipulate s are invoked in the context.
&lt;denchmark-link:https://github.com/chainer/chainer/pull/6655/files&gt;https://github.com/chainer/chainer/pull/6655/files&lt;/denchmark-link&gt;


I think we should trigger link hook functions in context of its Link.device which owns the hook.

Do you mean something like this?
&lt;denchmark-link:https://github.com/chainer/chainer/compare/master...crcrpar:z-call-hooks-on-device?expand=1&gt;https://github.com/chainer/chainer/compare/master...crcrpar:z-call-hooks-on-device?expand=1&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='nattochaduke' date='2019-07-22T08:33:14Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed after 30 days if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='5' author='nattochaduke' date='2019-07-22T09:03:44Z'>
		The issue hasn't been solved.
		</comment>
		<comment id='6' author='nattochaduke' date='2019-10-20T09:43:08Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed after 30 days if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='7' author='nattochaduke' date='2019-11-19T10:14:50Z'>
		This issue is closed as announced. Feel free to re-open it if needed.
		</comment>
		<comment id='8' author='nattochaduke' date='2020-02-18T05:29:04Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed after 30 days if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='9' author='nattochaduke' date='2020-03-19T05:37:35Z'>
		This issue is closed as announced. Feel free to re-open it if needed.
		</comment>
	</comments>
</bug>