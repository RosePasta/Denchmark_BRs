<bug id='1691' author='unnonouno' open_date='2016-09-23T01:25:35Z' closed_time='2016-10-17T07:06:10Z'>
	<summary>Imagenet example failed to evaluate the model</summary>
	<description>
I couldn't run imagenet example. It failed to evaluate the model.
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "examples/imagenet/train_imagenet.py", line 166, in &lt;module&gt;
    main()
  File "examples/imagenet/train_imagenet.py", line 162, in main
    trainer.run()
  File "/home/unno/git/chainer/chainer/training/trainer.py", line 269, in run
    entry.extension(self)
  File "/home/unno/git/chainer/chainer/training/extensions/evaluator.py", line 134, in __call__
    result = self.evaluate()
  File "/home/unno/git/chainer/chainer/training/extensions/evaluator.py", line 169, in evaluate
    eval_func(*in_vars)
  File "/home/unno/git/chainer/examples/imagenet/nin.py", line 29, in __call__
    h = F.max_pooling_2d(F.relu(self.mlpconv1(x)), 3, stride=2)
  File "/home/unno/git/chainer/chainer/links/connection/mlp_convolution_2d.py", line 73, in __call__
    x = f(l(x))
  File "/home/unno/git/chainer/chainer/links/connection/convolution_2d.py", line 101, in __call__
    x, self.W, self.b, self.stride, self.pad, self.use_cudnn)
AttributeError: 'Convolution2D' object has no attribute 'W'
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='unnonouno' date='2016-10-03T07:30:46Z'>
		I think it is caused by Link.copy not handling the uninitialized parameters. The image net example currently copies the model before running the training to run evaluations in test mode. In order to fix it, we have to make Link.copy also copy the information of uninitialized parameters (_uninitialized_params) and catch up with the actual initialization of these variables. One solution is to add a reference that points to the original link as an attribute of the copied link, and use this reference to check in add_params whether the original parameter is already initialized, and if so use a shallow copy of the initialized parameter instead of initializing a new one.
		</comment>
		<comment id='2' author='unnonouno' date='2016-10-03T08:05:12Z'>
		This problem seems to be essentially same as &lt;denchmark-link:https://github.com/chainer/chainer/issues/1615&gt;#1615&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='3' author='unnonouno' date='2016-10-05T08:21:00Z'>
		How about to abstract parameters to have the states of initialized and uninitialized?
&lt;denchmark-code&gt;original_link - W attribute -----&gt; parameter (initialized or uninitialized)
                              |
copied_link - W attribute ----+
&lt;/denchmark-code&gt;

Alghtough this change may have effect to the internal implementation of links that already support uninitialized parameters, we should be able to keep external APIs of Link and such links.
To hide the extra abstraction layer when accessing link attributes, e.g. link.W and link.W = some_array, we may need to implement getter and setter methods to Link.
		</comment>
		<comment id='4' author='unnonouno' date='2016-10-05T11:11:40Z'>
		Ah-, I find that shared is only Variable's data and parameter Variables are independent, it is more complicated than what I wrote, where Variables would need (shape-)uninitialized state.
		</comment>
		<comment id='5' author='unnonouno' date='2016-12-03T09:08:15Z'>
		I note a possible design of Variable's uninitialized state:
&lt;denchmark-code&gt;Link -&gt; Variable ---&gt; VariableData -&gt; xp.ndarray or None
                  |
Link -&gt; Variable -+
&lt;/denchmark-code&gt;

Here I add VariableData abstraction, through which Variable indirectly has parameter array. VariableData actually has initialized/uninitialized state. If it is initialized, it has xp.ndarray. If it is uninitialized, it has, for example, None as its uninitialized representation.
VariableData make Variable possible to have uninitialized state as well as to share parameter array with other Variables. VariableData would be hidden from users and Variable would be able to transparently access parameter array.
Link and Variable would have shared_copy method to copy them with sharing VariableData, copy which is deeper than shallow copy and shallower than deep copy.
		</comment>
	</comments>
</bug>