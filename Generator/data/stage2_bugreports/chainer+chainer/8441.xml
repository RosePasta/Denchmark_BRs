<bug id='8441' author='mmaciej2' open_date='2019-11-13T19:31:56Z' closed_time='2019-11-14T12:16:47Z'>
	<summary>Serialization of BatchNormalization statistics fails when layer is initialized using batch axis</summary>
	<description>
BatchNormalization serialization fails to load the stored statistics  and  when the layer is initialized using the  parameter rather than  parameter. As a result, at test time the BatchNorm layer uses default initialization of 0 and 1 for mean and variance rather than the saved statistics. This is because the  and  attributes are initialized and registered as persistent in the  method (&lt;denchmark-link:https://github.com/chainer/chainer/blob/master/chainer/links/normalization/batch_normalization.py#L238&gt;link&lt;/denchmark-link&gt;
) which is only called on the first forward pass, since the feature dimensions must be inferred from the data. As a result they are skipped by the serializer when loading parameters into a new test-time model prior to passing any data through the model.
To be fixed, the  and  attributes would need to be registered as persistent in the BatchNormalization  method. In addition, in the loop over persistent attributes in chainer.Link located &lt;denchmark-link:https://github.com/chainer/chainer/blob/master/chainer/link.py#L663&gt;here&lt;/denchmark-link&gt;
, there would need to be a case handling unitialized persistent attributes that can read the dimension from the serializer in a similar manner to how it is done for parameters.
Here is an example script that demonstrates the problem:
&lt;denchmark-code&gt;import chainer
import numpy as np
from chainer.links import BatchNormalization
from chainer.serializers import load_npz, save_npz

batch_sample = np.random.rand(5, 4, 3, 2).astype(np.float32)

norm_1 = BatchNormalization(axis=(0, 1))

print('norm_1 pre-call persistent values:', norm_1._persistent)
print('norm_1 avg_mean:')
print(norm_1.avg_mean)

norm_1(batch_sample)

print('norm_1 post-call persistent values:', norm_1._persistent)
print('norm_1 avg_mean:')
print(norm_1.avg_mean)
print('')

save_npz('norm.npz', norm_1)

npz = np.load('norm.npz')

print('norm.npz files:', npz.files)
print('norm.npz avg_mean:')
print(npz['avg_mean'])
print('')

chainer.config.train = False

norm_2 = BatchNormalization(axis=(0, 1))
load_npz('norm.npz', norm_2)

print('norm_2 pre-call persistent values:', norm_2._persistent)
print('norm_2 avg_mean:')
print(norm_2.avg_mean)

norm_2(batch_sample)

print('norm_2 post-call persistent values:', norm_2._persistent)
print('norm_2 avg_mean:')
print(norm_2.avg_mean)
&lt;/denchmark-code&gt;

along with its output:
&lt;denchmark-code&gt;norm_1 pre-call persistent values: {'N'}
norm_1 avg_mean:
None
norm_1 post-call persistent values: {'N', 'avg_mean', 'avg_var'}
norm_1 avg_mean:
[[0.04254831 0.0445514 ]
 [0.04263044 0.04522393]
 [0.05117331 0.05540558]]

norm.npz files: ['gamma', 'beta', 'N', 'avg_mean', 'avg_var']
norm.npz avg_mean:
[[0.04254831 0.0445514 ]
 [0.04263044 0.04522393]
 [0.05117331 0.05540558]]

norm_2 pre-call persistent values: {'N'}
norm_2 avg_mean:
None
norm_2 post-call persistent values: {'N', 'avg_mean', 'avg_var'}
norm_2 avg_mean:
[[0. 0.]
 [0. 0.]
 [0. 0.]]
&lt;/denchmark-code&gt;

We can see that the avg_mean attribute only exists after a call, and thus even though it is correctly present in the npz archive, those attributes only get created after the parameters have been loaded and use the default initialization values of 0.
And finally, in case it matters, here's the output of print_runtime_info().
&lt;denchmark-code&gt;&gt;&gt;&gt; chainer.print_runtime_info()
Platform: Linux-4.4.0-72-generic-x86_64-with-debian-stretch-sid
Chainer: 6.5.0
ChainerX: Not Available
NumPy: 1.17.1
CuPy:
  CuPy Version          : 6.5.0
  CUDA Root             : /cm/shared/apps/cuda10.0/toolkit/10.0.130
  CUDA Build Version    : 10000
  CUDA Driver Version   : 10010
  CUDA Runtime Version  : 10000
  cuDNN Build Version   : 7603
  cuDNN Version         : 7603
  NCCL Build Version    : 2402
  NCCL Runtime Version  : 2402
iDeep: Not Available
&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>