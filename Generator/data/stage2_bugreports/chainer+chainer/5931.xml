<bug id='5931' author='muupan' open_date='2018-12-25T09:29:01Z' closed_time='2020-04-23T04:39:41Z'>
	<summary>Calling chainerx.frombuffer with multiprocessing.RawArray causes segmentation fault</summary>
	<description>
I want to make a chainerx.ndarray from multiprocessing.RawArray so that it can be shared among processes, but calling chainerx.frombuffer causes segmentation fault, while numpy.frombuffer does not.
&lt;denchmark-code&gt;Python 3.5.2 (default, Nov 23 2017, 16:37:01)
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
&gt;&gt;&gt; import chainerx
&gt;&gt;&gt; chainerx.is_available()
True
&gt;&gt;&gt; import multiprocessing as mp
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; shared_array = mp.RawArray('f', 1)
&gt;&gt;&gt; np.frombuffer(shared_array, dtype='f')
array([0.], dtype=float32)
&gt;&gt;&gt; chainerx.frombuffer(shared_array, dtype='f')
Segmentation fault (core dumped)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='muupan' date='2018-12-25T09:42:30Z'>
		Stack trace
&lt;denchmark-code&gt;Thread 1 "python" received signal SIGSEGV, Segmentation fault.
__memmove_avx_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-avx-unaligned.S:136
136     ../sysdeps/x86_64/multiarch/memcpy-avx-unaligned.S: No such file or directory.
(gdb) bt
#0  __memmove_avx_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-avx-unaligned.S:136
#1  0x00007fffc9ca70d2 in std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;long&gt; (__first=0x0, __last=0x8, __result=0x555556429a40) at /usr/include/c++/5/bits/stl_algobase.h:384
#2  0x00007fffc9cb55d6 in std::__copy_move_a&lt;false, long*, long*&gt; (__first=0x0, __last=0x8, __result=0x555556429a40) at /usr/include/c++/5/bits/stl_algobase.h:402
#3  0x00007fffc9cb4b1e in std::__copy_move_a2&lt;false, long*, long*&gt; (__first=0x0, __last=0x8, __result=0x555556429a40) at /usr/include/c++/5/bits/stl_algobase.h:440
#4  0x00007fffc9cb3f08 in std::copy&lt;long*, long*&gt; (__first=0x0, __last=0x8, __result=0x555556429a40) at /usr/include/c++/5/bits/stl_algobase.h:472
#5  0x00007fffc9cb2462 in std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;long*, long*&gt; (__first=0x0, __last=0x8, __result=0x555556429a40) at /usr/include/c++/5/bits/stl_uninitialized.h:93
#6  0x00007fffc9cafe27 in std::uninitialized_copy&lt;long*, long*&gt; (__first=0x0, __last=0x8, __result=0x555556429a40) at /usr/include/c++/5/bits/stl_uninitialized.h:126
#7  0x00007fffc9ca9a09 in std::__uninitialized_copy_a&lt;long*, long*, long&gt; (__first=0x0, __last=0x8, __result=0x555556429a40) at /usr/include/c++/5/bits/stl_uninitialized.h:281
#8  0x00007fffc9ca588e in std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_range_initialize&lt;long*&gt; (this=0x7fffffffd8a0, __first=0x0, __last=0x8) at /usr/include/c++/5/bits/stl_vector.h:1290
#9  0x00007fffc9c9ec7a in std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_initialize_dispatch&lt;long*&gt; (this=0x7fffffffd8a0, __first=0x0, __last=0x8) at /usr/include/c++/5/bits/stl_vector.h:1263
#10 0x00007fffc9c9a021 in std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector&lt;long*, void&gt; (this=0x7fffffffd8a0, __first=0x0, __last=0x8, __a=...) at /usr/include/c++/5/bits/stl_vector.h:404
#11 0x00007fffc9c95ee2 in pybind11::detail::any_container&lt;long&gt;::any_container&lt;long*, void&gt; (this=0x7fffffffd8a0, first=0x0, last=0x8)
    at /w/repos/chainer/build/temp.linux-x86_64-3.6/pybind11/include/pybind11/detail/common.h:773
#12 0x00007fffc9c8de9f in pybind11::buffer_info::buffer_info (this=0x7fffffffda90, view=0x5555568782c0, ownview=true)
    at /w/repos/chainer/build/temp.linux-x86_64-3.6/pybind11/include/pybind11/buffer_info.h:51
#13 0x00007fffc9c8eec8 in pybind11::buffer::request (this=0x7fffffffdb80, writable=false) at /w/repos/chainer/build/temp.linux-x86_64-3.6/pybind11/include/pybind11/pytypes.h:1236
#14 0x00007fffc9d091a0 in chainerx::python::python_internal::(anonymous namespace)::MakeArrayFromBuffer (buffer=..., dtype=..., count=-1, offset=0, device=...)
    at /w/repos/chainer/chainerx_cc/chainerx/python/routines.cc:54
#15 0x00007fffc9d484d8 in pybind11::detail::argument_loader&lt;pybind11::buffer, pybind11::handle, long, long, pybind11::handle&gt;::call_impl&lt;std::shared_ptr&lt;chainerx::internal::ArrayBody&gt;, std::shared_ptr&lt;chainerx::
internal::ArrayBody&gt; (*&amp;)(pybind11::buffer, pybind11::handle, long, long, pybind11::handle), 0ul, 1ul, 2ul, 3ul, 4ul, pybind11::detail::void_type&gt;(std::shared_ptr&lt;chainerx::internal::ArrayBody&gt; (*&amp;)(pybind11::bu
ffer, pybind11::handle, long, long, pybind11::handle), std::integer_sequence&lt;unsigned long, 0ul, 1ul, 2ul, 3ul, 4ul&gt;, pybind11::detail::void_type&amp;&amp;) (this=0x7fffffffdc80, 
    f=@0x5555560b6268: 0x7fffc9d09135 &lt;chainerx::python::python_internal::(anonymous namespace)::MakeArrayFromBuffer(pybind11::buffer, pybind11::handle, int64_t, int64_t, pybind11::handle)&gt;)
    at /w/repos/chainer/build/temp.linux-x86_64-3.6/pybind11/include/pybind11/cast.h:1874
#16 0x00007fffc9d444ea in pybind11::detail::argument_loader&lt;pybind11::buffer, pybind11::handle, long, long, pybind11::handle&gt;::call&lt;std::shared_ptr&lt;chainerx::internal::ArrayBody&gt;, pybind11::detail::void_type, st
d::shared_ptr&lt;chainerx::internal::ArrayBody&gt; (*&amp;)(pybind11::buffer, pybind11::handle, long, long, pybind11::handle)&gt;(std::shared_ptr&lt;chainerx::internal::ArrayBody&gt; (*&amp;)(pybind11::buffer, pybind11::handle, long, 
long, pybind11::handle)) &amp;&amp; (this=0x7fffffffdc80, 
    f=@0x5555560b6268: 0x7fffc9d09135 &lt;chainerx::python::python_internal::(anonymous namespace)::MakeArrayFromBuffer(pybind11::buffer, pybind11::handle, int64_t, int64_t, pybind11::handle)&gt;)
    at /w/repos/chainer/build/temp.linux-x86_64-3.6/pybind11/include/pybind11/cast.h:1851
#17 0x00007fffc9d4026a in void pybind11::cpp_function::initialize&lt;std::shared_ptr&lt;chainerx::internal::ArrayBody&gt; (*&amp;)(pybind11::buffer, pybind11::handle, long, long, pybind11::handle), std::shared_ptr&lt;chainerx::
internal::ArrayBody&gt;, pybind11::buffer, pybind11::handle, long, long, pybind11::handle, pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybin
d11::arg_v&gt;(std::shared_ptr&lt;chainerx::internal::ArrayBody&gt; (*&amp;)(pybind11::buffer, pybind11::handle, long, long, pybind11::handle), std::shared_ptr&lt;chainerx::internal::ArrayBody&gt; (*)(pybind11::buffer, pybind11::h
andle, long, long, pybind11::handle), pybind11::name const&amp;, pybind11::scope const&amp;, pybind11::sibling const&amp;, pybind11::arg const&amp;, pybind11::arg_v const&amp;, pybind11::arg_v const&amp;, pybind11::arg_v const&amp;, pybind
11::arg_v const&amp;)::{lambda(pybind11::detail::function_call&amp;)#3}::operator()(pybind11::detail::function_call&amp;) const (__closure=0x0, call=...)
    at /w/repos/chainer/build/temp.linux-x86_64-3.6/pybind11/include/pybind11/pybind11.h:154
#18 0x00007fffc9d40555 in void pybind11::cpp_function::initialize&lt;std::shared_ptr&lt;chainerx::internal::ArrayBody&gt; (*&amp;)(pybind11::buffer, pybind11::handle, long, long, pybind11::handle), std::shared_ptr&lt;chainerx::
internal::ArrayBody&gt;, pybind11::buffer, pybind11::handle, long, long, pybind11::handle, pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybin
d11::arg_v&gt;(std::shared_ptr&lt;chainerx::internal::ArrayBody&gt; (*&amp;)(pybind11::buffer, pybind11::handle, long, long, pybind11::handle), std::shared_ptr&lt;chainerx::internal::ArrayBody&gt; (*)(pybind11::buffer, pybind11::h
andle, long, long, pybind11::handle), pybind11::name const&amp;, pybind11::scope const&amp;, pybind11::sibling const&amp;, pybind11::arg const&amp;, pybind11::arg_v const&amp;, pybind11::arg_v const&amp;, pybind11::arg_v const&amp;, pybind
11::arg_v const&amp;)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN(pybind11::detail::function_call&amp;) () at /w/repos/chainer/build/temp.linux-x86_64-3.6/pybind11/include/pybind11/pybind11.h:132
#19 0x00007fffc9c48052 in pybind11::cpp_function::dispatcher (self=0x7fffca2dcab0, args_in=0x7fff9f1b9b70, kwargs_in=0x7fffe1d9f948)
    at /w/repos/chainer/build/temp.linux-x86_64-3.6/pybind11/include/pybind11/pybind11.h:627
#20 0x00005555556639e4 in _PyCFunction_FastCallDict ()
#21 0x0000555555691654 in _PyCFunction_FastCallKeywords ()
#22 0x00005555556f0dfc in call_function ()
#23 0x0000555555716715 in _PyEval_EvalFrameDefault ()
#24 0x00005555556ebcb9 in PyEval_EvalCodeEx ()
#25 0x00005555556eca4c in PyEval_EvalCode ()
#26 0x0000555555768c44 in run_mod ()
#27 0x0000555555769041 in PyRun_FileExFlags ()
#28 0x0000555555769244 in PyRun_SimpleFileExFlags ()
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='muupan' date='2018-12-25T09:48:34Z'>
		At the frame #12:
&lt;denchmark-code&gt;#12 0x00007fffc9c8de9f in pybind11::buffer_info::buffer_info (this=0x7fffffffda90, view=0x5555568782c0, ownview=true)
    at /w/repos/chainer/build/temp.linux-x86_64-3.6/pybind11/include/pybind11/buffer_info.h:51
51                  {view-&gt;shape, view-&gt;shape + view-&gt;ndim}, {view-&gt;strides, view-&gt;strides + view-&gt;ndim}) {
(gdb) p view-&gt;strides
$1 = (Py_ssize_t *) 0x0
&lt;/denchmark-code&gt;

Perhaps pybind11 does not handle a corner case of the buffer protocol correctly?
		</comment>
		<comment id='3' author='muupan' date='2019-04-08T09:08:11Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed after 30 days if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='4' author='muupan' date='2019-04-15T08:28:56Z'>
		It's Python's bug. &lt;denchmark-link:https://bugs.python.org/issue12851&gt;https://bugs.python.org/issue12851&lt;/denchmark-link&gt;
 PyBind11 requests  field by , but the  is ignored.
		</comment>
		<comment id='5' author='muupan' date='2019-07-14T08:35:43Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed after 30 days if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='6' author='muupan' date='2019-10-14T03:08:00Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed after 30 days if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='7' author='muupan' date='2019-11-13T03:16:21Z'>
		This issue is closed as announced. Feel free to re-open it if needed.
		</comment>
		<comment id='8' author='muupan' date='2020-03-23T08:21:02Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed after 30 days if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='9' author='muupan' date='2020-04-23T04:39:36Z'>
		This issue is closed as announced. Feel free to re-open it if needed.
		</comment>
	</comments>
</bug>