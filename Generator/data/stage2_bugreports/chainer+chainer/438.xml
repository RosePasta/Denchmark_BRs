<bug id='438' author='delta2323' open_date='2015-09-25T15:55:59Z' closed_time='2015-09-30T05:22:15Z'>
	<summary>MemoryPointer.copy_from_peer is missing</summary>
	<description>
 uses  to copy an array from the device other than current one (See the &lt;denchmark-link:https://github.com/pfnet/chainer/blob/9f6fa3a43cd8f6718a25bf6b3cbec8fae34854da/cupy/creation/from_data.py#L144&gt;corresponding code&lt;/denchmark-link&gt;
). But,  is not implemented and cross-device copy is impossible if we solely use cupy module.
Note: We can do cross-device copy if we are allowed to use chainer module because chainer.cuda.copy supports it.
	</description>
	<comments>
		<comment id='1' author='delta2323' date='2015-09-26T09:11:38Z'>
		After the investigation, I found that cross-device copy is realized by undocumented behavior of cupy. To be concrete, we can copy arrays across devices by chainer.cuda.cupy, cupy.copy or cupy.copyto. All of three methods realize cross-device copy by MemoryPointer.copy_from_device. But its document says this API is for the copy of GPU array within single device.
The followings items are notes for myself.

chainer.cuda.copy invokes cupy.copyto, which is an alias of cupy.manipulation.basic.copyto (Link).
cupy.copyto invokes cupy.elementwise.copy, cupy.elementwise.copy_where, or MemoryPointer.copy_from depending on the arguments (Link). The former two element-wise methods cannot operate cross-device copy. So the only way to do cross-device copy is to invoke MemoryPointer.copy_from.
Likewise, cupy.copy, which is an alias of cupy.creation.from_data.copy invokes one of cupy.elementwise.copy, MemoryPointer.copy_from_peer, or  MemoryPointer.copy_from (Link). First one cannot do cross-device copy and second one is not implemented. So the situation is same as cupy.copy and we do cross-device copy by means of MemoryPointer.copy_from.
If source array is allocated in the device, MemoryPointer.copy_from is same as MemoryPoint.copy_from_device (Link).

Possible solutions are:

to change the role of copy_from_device so that it admits cross-device copy.

I guess UVA enables copy_from_device to do cross-device copy. Since UVA is a feature of GPUs with compute capability &gt;= 2.0 (Fermi series or later), I am not sure we can do the same thing in older series. Chainer officially support CUDA &gt;= 6.5. I am searching for the correspondence of CUDA versions and their supported devices.


to implement copy_from_peer for cross-device copy. The role of copy_from_device remains as it is (copy within single device).

		</comment>
		<comment id='2' author='delta2323' date='2015-09-28T04:58:39Z'>
		Thank you for the investigation. It seems a bug of cupy.copy that it tries to call copy_from_peer. Peer device copy is allowed by copy_from_device on UVA-enabled device as you noted, and I think our implementation depends on UVA, so we cannot support pre-UVA devices.
Here is a summary of the CuPy APIs' behavior that I expected:

APIs basically run on the current device.
cupy.copyto is an exception. It should run correctly if the given target array is contiguous and on a non-current device.
chainer.cuda APIs should run on any devices as much as possible.

		</comment>
		<comment id='3' author='delta2323' date='2015-09-28T06:42:57Z'>
		&lt;denchmark-link:https://github.com/beam2d&gt;@beam2d&lt;/denchmark-link&gt;
 Thank you for verifying my understanding and writing the expected behavior.
The plan for the fix is as follows.

Remove dependency of cupy.copy on copy_from_peer.
Fix the document of copy_from_device to support copy from non-current device.
CuPy supports UVA-enabled device only for now.

		</comment>
	</comments>
</bug>