<bug id='2418' author='yuyu2172' open_date='2017-03-17T04:49:18Z' closed_time='2017-03-22T02:16:53Z'>
	<summary>Bugs in advanced indexing of Cupy's __getitem__ when indexes are list</summary>
	<description>
There is a inconsistency between NumPy and CuPy's advanced indexing when input is a list.
import numpy
import cupy
x = numpy.arange(24).reshape(2, 3, 4)
x_gpu = cupy.arange(24).reshape(2, 3, 4)
print(x[[1]].shape)   # (1, 3, 4)
print(x[[[1]]].shape)   # (1, 3, 4)

print(x_gpu[[1]].shape)  # (1, 3, 4)
print(x_gpu[[[1]]].shape)  # (1, 1, 3, 4)
This happens because NumPy handles list type indices differently based on its contents.
When indexes = [int_1, ..., int_n], the indexing is equivalent to the case when eq_indexes = (indexes,).
However, when indexes contain anything other than integers (e.g. indexes=[[1]], which is isinstance(indexes[0], list) == True), the indexing is equivalent to the case when eq_indexes = (indexes[0], indexes[1], ..., indexes[n-1]).
	</description>
	<comments>
		<comment id='1' author='yuyu2172' date='2017-03-22T02:16:53Z'>
		Solved &lt;denchmark-link:https://github.com/chainer/chainer/pull/2419&gt;#2419&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/chainer/chainer/pull/2420&gt;#2420&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>