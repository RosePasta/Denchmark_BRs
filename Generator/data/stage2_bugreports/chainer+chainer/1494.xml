<bug id='1494' author='cycentum' open_date='2016-08-12T06:55:35Z' closed_time='2016-08-18T07:24:56Z'>
	<summary>Bug in cupy.sum?</summary>
	<description>
I found a case in which the results of cupy.sum largely differ from those of numpy.sum.
Here is an example:
import numpy
from chainer import cuda
import cupy

numpy.random.seed(0)

x_cpu=numpy.random.rand(69,64,2,947).astype(numpy.float32)
sum_cpu=numpy.sum(x_cpu, axis=2)

x_gpu=cupy.asarray(x_cpu)
sum_gpu=cupy.sum(x_gpu, axis=2)

sum_gpu_cpu=cuda.to_cpu(sum_gpu)
diff=numpy.abs(sum_gpu_cpu-sum_cpu)

print(numpy.max(diff))



x_cpu=numpy.random.rand(68,64,2,947).astype(numpy.float32)
sum_cpu=numpy.sum(x_cpu, axis=2)

x_gpu=cupy.asarray(x_cpu)
sum_gpu=cupy.sum(x_gpu, axis=2)

sum_gpu_cpu=cuda.to_cpu(sum_gpu)
diff=numpy.abs(sum_gpu_cpu-sum_cpu)

print(numpy.max(diff))
output:
&lt;denchmark-code&gt;3.90482
0.0
&lt;/denchmark-code&gt;

I found the shape of the input array (x_cpu) matters, but could not find what kind of shapes will cause this strange behavior. Large array size seems to cause the problem?
Chainer version: 1.13.0
Cuda version: 7.5
GPU: GeForce GTX TIT
Linux: Ubuntu 14.04.4 LTS
	</description>
	<comments>
	</comments>
</bug>