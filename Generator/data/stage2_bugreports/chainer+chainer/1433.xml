<bug id='1433' author='tscohen' open_date='2016-07-26T13:38:02Z' closed_time='2017-03-29T03:37:30Z'>
	<summary>Indexing cupy with list of slices fails where tuple of slices works</summary>
	<description>
Cupy doesn't like indexing with lists of slices, but is ok with tuples of slices. Numpy works with either one.
&lt;denchmark-code&gt;import numpy as np
import cupy as cp
a = cp.ones((2,3))
b = np.ones((2,3))
l = [slice(None), slice(None)]
a[l]  # TypeError: Invalid index type: &lt;type 'list'&gt;
b[l]  # ok
l = (slice(None), slice(None))
a[l] # ok
b[l] # ok
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='tscohen' date='2016-08-22T07:42:59Z'>
		Thank you for reporting the issue. Currently, CuPy automatically triggers basic indexing when the indexing object of __getitem__ is a list. But actually, there are cases in which NumPy triggers basic indexing although the indexing object is a list. So, we should support such cases.
By the way, according to the &lt;denchmark-link:http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#advanced-indexing&gt;NumPy document&lt;/denchmark-link&gt;
, non-tuple sequence objects should trigger basic indexing. Is it the inconsistency between the document and the implementation?
		</comment>
		<comment id='2' author='tscohen' date='2017-03-29T03:37:30Z'>
		It seems already resolved.
		</comment>
	</comments>
</bug>