<bug id='2394' author='muupan' open_date='2017-03-10T10:41:35Z' closed_time='2017-03-21T02:24:39Z'>
	<summary>cuda.Device should not be created in Variable.backward when cupy is not used</summary>
	<description>
From chainer==1.21.0, cuda.Device() is created always in Variable.backward whenever cuda.available, even when Variable.data is numpy.ndarray.
&lt;denchmark-link:https://github.com/pfnet/chainer/blob/d91ba89da9bbef0b316006648b162d9f4bffbce9/chainer/variable.py#L357&gt;https://github.com/pfnet/chainer/blob/d91ba89da9bbef0b316006648b162d9f4bffbce9/chainer/variable.py#L357&lt;/denchmark-link&gt;

Not only being unnecessary, it can result in an error when Variable.backward is called by another process.
The code below runs without problem with chainer==1.20.0.1, but raises cupy.cuda.runtime.CUDARuntimeError: cudaErrorInitializationError: initialization error at cuda.Device() with chainer==1.21.0.
&lt;denchmark-code&gt;import multiprocessing as mp
import chainer
print(chainer.__version__)
import numpy as np
chainer.cuda.get_device(0).use()

def hoge():
    # Note that this function uses numpy, not cupy, but still it results in an error
    x = chainer.Variable(np.asarray([0], dtype=np.float32)) + 1
    x.backward()

p = mp.Process(target=hoge)
p.start()
p.join()
&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>