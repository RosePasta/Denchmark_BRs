<bug id='6027' author='toslunar' open_date='2019-01-18T05:08:25Z' closed_time='2019-04-16T07:15:40Z'>
	<summary>`Variable.unchain` is not reliable if the creator has multiple outputs</summary>
	<description>
The documentation of the method Variable.unchain is correct:

Deletes the reference to the creator of this variable.

This does not always stop the creator from collecting the grad of the variable.

Code to reproduce

&lt;denchmark-code&gt;&gt;&gt;&gt; import numpy as np; import chainer; import chainer.functions as F
&gt;&gt;&gt; x = chainer.Variable(np.arange(4).astype('f').reshape(2, 2)); x
variable([[0., 1.],
          [2., 3.]])
&gt;&gt;&gt; h0, h1 = F.split_axis(x, [1], axis=0); h0, h1
(variable([[0., 1.]]), variable([[2., 3.]]))
&gt;&gt;&gt; y = F.sum(h0 + h1)
&gt;&gt;&gt; h0.unchain()
&gt;&gt;&gt; y.backward()
&gt;&gt;&gt; x.grad, h0.grad, h1.grad
(array([[1., 1.],
       [1., 1.]], dtype=float32), None, None)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='toslunar' date='2019-03-31T19:53:01Z'>
		This issue arises as the backward pass gathers gradients &lt;denchmark-link:https://github.com/chainer/chainer/blob/1130eea1fe018eb3b61d112cade283ea2ccf5731/chainer/variable.py#L1030-L1031&gt;from all output nodes&lt;/denchmark-link&gt;
, even from output nodes on whom unchain() have been called. In order to curb this behavior, I think we can zero out gradients in &lt;denchmark-link:https://github.com/chainer/chainer/blob/1130eea1fe018eb3b61d112cade283ea2ccf5731/chainer/variable.py#L1031&gt;this line&lt;/denchmark-link&gt;
 (without poping from ) for nodes that have no  (i.e. have been unchained).
		</comment>
		<comment id='2' author='toslunar' date='2019-04-02T05:25:31Z'>
		&lt;denchmark-link:https://github.com/Rishav1&gt;@Rishav1&lt;/denchmark-link&gt;
 Thanks for the investigation and the concrete suggestion.  Are you interested in making it a pull request?

Because my example is artificial, could you show your example where the issue matters, if you found the issue somewhere else?  A realistic example would raise the priority of the issue.
In fact, I'm waiting for PRs to fix other backprop issues are merged.  The PRs #6348, #5952, #5722 might be relevant.  #5274 and #5724 are probably not.  If I fix the issue, I'll work after all of these.

		</comment>
		<comment id='3' author='toslunar' date='2019-04-03T17:11:30Z'>
		&lt;denchmark-link:https://github.com/toslunar&gt;@toslunar&lt;/denchmark-link&gt;
 Thanks for responding to my comment. Take a look at this example similar to yours.
&gt;&gt;&gt; import numpy as np; import chainer; import chainer.functions as F
&gt;&gt;&gt; x = chainer.Variable(np.arange(4).astype('f').reshape(2, 2)); x
variable([[0., 1.],
          [2., 3.]])
&gt;&gt;&gt; h0, h1 = F.split_axis(x, [1], axis=0); h0, h1
(variable([[0., 1.]]), variable([[2., 3.]]))
&gt;&gt;&gt; y = F.sum(h0)
&gt;&gt;&gt; z = F.sum(h1)
&gt;&gt;&gt; h0.unchain()
&gt;&gt;&gt; x.grad, h0.grad, h1.grad
(None, None, None)
&gt;&gt;&gt; y.backward()
&gt;&gt;&gt; x.grad, h0.grad, h1.grad
(None, array([[1., 1.]], dtype=float32), None)
&gt;&gt;&gt; z.backward()
&gt;&gt;&gt; x.grad, h0.grad, h1.grad
(array([[1., 1.],
       [1., 1.]], dtype=float32), None, None)
Calling backward() on y correctly accumulates the gradient at the root h0 which means unchain is not the issue. But on calling backward() on z, the backward pass on reaching SplitAxis pulls the gradients from both the node outputs h0 and h1 into the input x. As I mentioned, I believe this behavior can be corrected by ensuring that if the child node is unchained(like h0), instead of pulling the gradient, use a dummy zeroed out gradient of same dimension as the child node input.
If you agree on the fix, I would be glad to raise a PR. If you have a better alternative for the solution (like perhaps adding a fix in SplitAxis) please let me know and I would raise a request accordingly.
		</comment>
		<comment id='4' author='toslunar' date='2019-04-08T09:47:36Z'>
		Thank you, &lt;denchmark-link:https://github.com/Rishav1&gt;@Rishav1&lt;/denchmark-link&gt;
.
Your example is more realistic than mine.  It's sad to say it doesn't prove the importance of this issue, because your example would run as expected if &lt;denchmark-link:https://github.com/chainer/chainer/pull/5722&gt;#5722&lt;/denchmark-link&gt;
 is merged (and the compatibility option is turned off).  If you found the issue from a code like your example, you might be interested in &lt;denchmark-link:https://github.com/chainer/chainer/issues/5709&gt;#5709&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='5' author='toslunar' date='2019-04-08T10:26:30Z'>
		I welcome &lt;denchmark-link:https://github.com/Rishav1&gt;@Rishav1&lt;/denchmark-link&gt;
 to raise a PR.  Let me revert my previous comment.
If this issue is resolved soon, the fix will be available in version 6.x as a backport, because the issue is purely a bug.  I don't expect the same for &lt;denchmark-link:https://github.com/chainer/chainer/issues/5709&gt;#5709&lt;/denchmark-link&gt;
, which has a difficult status as non-negligible number of users rely on the current behavior.
		</comment>
		<comment id='6' author='toslunar' date='2019-04-08T22:22:43Z'>
		&lt;denchmark-link:https://github.com/toslunar&gt;@toslunar&lt;/denchmark-link&gt;
, I raised a PR and added a test that fails without the change.
		</comment>
		<comment id='7' author='toslunar' date='2019-04-16T07:15:39Z'>
		The issue is fixed by &lt;denchmark-link:https://github.com/chainer/chainer/pull/6804&gt;#6804&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>