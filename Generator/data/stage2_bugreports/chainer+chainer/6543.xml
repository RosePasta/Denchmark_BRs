<bug id='6543' author='ir5' open_date='2019-03-16T07:09:55Z' closed_time='2020-01-09T08:37:59Z'>
	<summary>`to_dense` in `CooMatrix` does not take duplicate indices into account</summary>
	<description>
It seems that to_dense method in CooMatrix does not handle a sparse matrix with duplicate indices appropriately.
from chainer.utils import CooMatrix
import numpy as np

data = np.array([[10, 20, 30]], dtype='f')
row = np.array([[0, 0, 0]])
col = np.array([[0, 0, 0]])
shape = (2, 3)
sp = CooMatrix(data, row, col, shape)
print(sp.to_dense())
Output:
&lt;denchmark-code&gt;[[[30.  0.  0.]             # &lt;-- "30." should be "60."
  [ 0.  0.  0.]]]
&lt;/denchmark-code&gt;

Note that  can handle duplicate indices. &lt;denchmark-link:https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.html&gt;https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.html&lt;/denchmark-link&gt;

Further, current  takes non-zero elements as somewhat special thing. &lt;denchmark-link:https://github.com/chainer/chainer/blob/master/chainer/utils/sparse.py#L60&gt;https://github.com/chainer/chainer/blob/master/chainer/utils/sparse.py#L60&lt;/denchmark-link&gt;

But I believe that this implementation outputs wrong result when zero element is placed at the intermediate of an array .
	</description>
	<comments>
		<comment id='1' author='ir5' date='2019-06-17T08:03:52Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed after 30 days if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='2' author='ir5' date='2019-07-17T08:21:40Z'>
		This issue is closed as announced. Feel free to re-open it if needed.
		</comment>
		<comment id='3' author='ir5' date='2019-07-17T08:34:20Z'>
		Reopening as this is still an issue.
		</comment>
		<comment id='4' author='ir5' date='2019-09-27T09:11:12Z'>
		Thanks &lt;denchmark-link:https://github.com/ir5&gt;@ir5&lt;/denchmark-link&gt;
 for the report and sorry for dragging out so tremendously, this issue along with the problem of intermediate 0s should be fixed by &lt;denchmark-link:https://github.com/chainer/chainer/pull/8187&gt;#8187&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='5' author='ir5' date='2019-12-19T11:15:34Z'>
		I want to contribute on this issue, can I start with it?
		</comment>
	</comments>
</bug>