<bug id='5682' author='koreyou' open_date='2018-11-19T16:24:57Z' closed_time='2018-11-26T07:21:11Z'>
	<summary>BatchNormalization with lazy initialization fail on GPU</summary>
	<description>
&lt;denchmark-h:h1&gt;Problem description&lt;/denchmark-h&gt;

import chainer
import numpy as np

x = np.arange(12).reshape(4, 3).astype(np.float32) ** 2
x = chainer.cuda.to_gpu(x)
x = chainer.Variable(x)

# lazy initialization by not providing size
bn = chainer.links.BatchNormalization(axis=0)
bn.to_gpu()

bn(x)
This fails with following error:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-16-3375da8069af&gt; in &lt;module&gt;()
----&gt; 1 bn(x)

/usr/local/lib/python3.6/dist-packages/chainer/link.py in __call__(self, *args, **kwargs)
    240         if forward is None:
    241             forward = self.forward
--&gt; 242         out = forward(*args, **kwargs)
    243 
    244         # Call forward_postprocess hook

/usr/local/lib/python3.6/dist-packages/chainer/links/normalization/batch_normalization.py in forward(self, x, **kwargs)
    297             ret = functions.batch_normalization(
    298                 x, gamma, beta, eps=self.eps, running_mean=self.avg_mean,
--&gt; 299                 running_var=self.avg_var, decay=decay, axis=self.axis)
    300         else:
    301             # Use running average statistics or fine-tuned statistics.

/usr/local/lib/python3.6/dist-packages/chainer/functions/normalization/batch_normalization.py in batch_normalization(x, gamma, beta, **kwargs)
    830 
    831     return BatchNormalization(eps, running_mean, running_var, decay,
--&gt; 832                               axis).apply((x, gamma, beta))[0]
    833 
    834 

/usr/local/lib/python3.6/dist-packages/chainer/function_node.py in apply(self, inputs)
    261                 outputs = static_forward_optimizations(self, in_data)
    262             else:
--&gt; 263                 outputs = self.forward(in_data)
    264 
    265         # Check for output array types

/usr/local/lib/python3.6/dist-packages/chainer/functions/normalization/batch_normalization.py in forward(self, inputs)
    222                 x_desc.value, x.data.ptr, x_desc.value,
    223                 y.data.ptr, derivedBnDesc.value, gamma.data.ptr,
--&gt; 224                 beta.data.ptr, factor, running_mean.data.ptr,
    225                 running_var.data.ptr, self.eps,
    226                 self.mean.data.ptr, self.inv_std.data.ptr)

AttributeError: 'memoryview' object has no attribute 'ptr'
&lt;/denchmark-code&gt;

Environment
&lt;denchmark-code&gt;Platform: Linux-4.14.65+-x86_64-with-Ubuntu-18.04-bionic
Chainer: 5.0.0
NumPy: 1.14.6
CuPy:
  CuPy Version          : 5.0.0
  CUDA Root             : /usr/local/cuda
  CUDA Build Version    : 9020
  CUDA Driver Version   : 9020
  CUDA Runtime Version  : 9020
  cuDNN Build Version   : 7201
  cuDNN Version         : 7201
  NCCL Build Version    : 2213
iDeep: Not Available
&lt;/denchmark-code&gt;

&lt;denchmark-h:h1&gt;Reason for failure&lt;/denchmark-h&gt;

The problem was that running_mean was numpy array where it should've been a cupy array.
I figured out the problem lies in BatchNormalization's initializer. &lt;denchmark-link:https://github.com/chainer/chainer/blob/v5.0.0/chainer/links/normalization/batch_normalization.py#L323&gt;https://github.com/chainer/chainer/blob/v5.0.0/chainer/links/normalization/batch_normalization.py#L323&lt;/denchmark-link&gt;

def _init_array(initializer, default_value, size, dtype):
    if initializer is None:
        initializer = default_value
    initializer = initializers._get_initializer(initializer)
    return initializers.generate_array(initializer, size, numpy, dtype=dtype)
As you can see, numpy is hard coded in initializer.
I will send a pull request shortly.
	</description>
	<comments>
	</comments>
</bug>