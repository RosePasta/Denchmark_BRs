<bug id='507' author='tscohen' open_date='2015-10-13T12:39:47Z' closed_time='2015-11-15T16:32:04Z'>
	<summary>Cupy indexing bug</summary>
	<description>
Cupy indexing does not match numpy indexing for the following expression:
&lt;denchmark-code&gt;import numpy as np
import cupy as cp
a = np.zeros((3, 48, 288, 1))
a[..., None, -4:, 0].shape
# Out[4]: (3, 48, 1, 4)
a = cp.zeros((3, 48, 288, 1))
a[..., None, -4:, 0].shape
# Out[6]: (3, 48, 1, 288)
&lt;/denchmark-code&gt;

It would be good to have a really elaborate set of test cases for cupy's indexing. Try all combinations of axes transpositions, None indexing, integer indexing, list of int indexing, bool indexing, range indexing, negative indexing, etc. along all axes.
	</description>
	<comments>
		<comment id='1' author='tscohen' date='2015-10-15T01:25:02Z'>
		Thank you for reporting the bug! It seems indexing by negative integers and negative slicing does not work correctly. We should fix it with tests. Exhaustive testing is needed as you suggest, while I want to keep the test moderately fast for quick development, so we might have to seek the balance of coverage and speed. BTW, we do not support list of int indexing and bool indexing (a.k.a. advanced indexing of NumPy).
		</comment>
	</comments>
</bug>