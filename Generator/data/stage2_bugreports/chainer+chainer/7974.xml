<bug id='7974' author='keisukefukuda' open_date='2019-08-20T04:05:52Z' closed_time='2019-08-26T04:29:42Z'>
	<summary>chainerx.array is not picklable</summary>
	<description>
It is often convenient if we can pickle chainerx arrays when we save/restore/communicate them.
&lt;denchmark-code&gt;&gt;&gt;&gt; import pickle
&gt;&gt;&gt; import chainerx as chx
&gt;&gt;&gt; a = chx.array(10)
&gt;&gt;&gt; a
array(10, shape=(), dtype=int64, device='native:0')
&gt;&gt;&gt; pickle.dumps
&lt;built-in function dumps&gt;
&gt;&gt;&gt; pickle.dumps(a)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
RuntimeError: return_value_policy = copy, but the object is non-copyable!
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='keisukefukuda' date='2019-08-20T05:33:24Z'>
		There's a test to ensure  is picklable:
&lt;denchmark-link:https://github.com/chainer/chainer/blob/v7.0.0b2/tests/chainerx_tests/unit_tests/test_array.py#L695&gt;https://github.com/chainer/chainer/blob/v7.0.0b2/tests/chainerx_tests/unit_tests/test_array.py#L695&lt;/denchmark-link&gt;

But I confirmed the error as reported, and the test passes as well.
		</comment>
		<comment id='2' author='keisukefukuda' date='2019-08-20T06:02:27Z'>
		&lt;denchmark-h:h3&gt;Works:&lt;/denchmark-h&gt;

device = chainerx.get_device('cuda:0')
arr = chainerx.array([1, 2], chainerx.float32, device=device)
s = pickle.dumps(arr)
&lt;denchmark-h:h3&gt;Does not work:&lt;/denchmark-h&gt;

arr = chainerx.array([1, 2], chainerx.float32, device='cuda:0')
s = pickle.dumps(arr)
arr = chainerx.array([1, 2], chainerx.float32, device=chainerx.get_device('cuda:0'))
s = pickle.dumps(arr)
		</comment>
		<comment id='3' author='keisukefukuda' date='2019-08-20T08:51:11Z'>
		Why make it device dependent. In the early days, torch (lua) and mxnet dumps a array with their device by default. Some times paper author dumps their weights originally live on GPU8, which make it very hard (if not impossible) to load if you are not rich enough $$$. IIRC, this also makes a deadlock/hang when you want to get a GPU mxnet's ndarray from a multiprocessing queue.
		</comment>
		<comment id='4' author='keisukefukuda' date='2019-08-20T10:28:40Z'>
		This works
&lt;denchmark-code&gt;arr = chainerx.array([1, 2], chainerx.float32, device='cuda:0')
dev = arr.device
s = pickle.dumps(arr)
&lt;/denchmark-code&gt;

Seems like if the device object is directly created on C++ from a string is not being binded to the &lt;denchmark-link:https://github.com/chainer/chainer/blob/master/chainerx_cc/chainerx/python/device.cc#L58&gt;python device wrapper&lt;/denchmark-link&gt;
 which defines the pickle serialization function
		</comment>
		<comment id='5' author='keisukefukuda' date='2019-08-20T10:39:38Z'>
		I assume the associated device is bound to a Python wrapper here, but I'm not sure:
&lt;denchmark-link:https://github.com/chainer/chainer/blob/master/chainerx_cc/chainerx/python/array.cc#L196&gt;https://github.com/chainer/chainer/blob/master/chainerx_cc/chainerx/python/array.cc#L196&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='keisukefukuda' date='2019-08-20T10:42:43Z'>
		The problem seems to be this &lt;denchmark-link:https://github.com/chainer/chainer/blob/master/chainerx_cc/chainerx/python/array.cc#L639&gt;py::return_value_policy::reference&lt;/denchmark-link&gt;
, probably is setting something in the python side of the wrapper the first time the corresponding python object is created.
A simple solution to this problem is to return the name of the device when serializing, and reconstruct the device from the name upon deserialization. I quickly tested this and worked.
But if we can find a way to make the C++ to be directly pickable it will be better.
		</comment>
		<comment id='7' author='keisukefukuda' date='2019-08-20T11:29:12Z'>
		Introducing a Python wrapper class (&lt;denchmark-link:https://github.com/chainer/chainer/pull/7983&gt;#7983&lt;/denchmark-link&gt;
) does seem to fix the problem.
arr = chainerx.array([1, 2], chainerx.float32, device='cuda:0')
s = pickle.dumps(arr)
Now this variant works with the patch.
		</comment>
	</comments>
</bug>