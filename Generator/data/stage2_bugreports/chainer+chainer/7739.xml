<bug id='7739' author='niboshi' open_date='2019-07-10T04:33:07Z' closed_time='2019-11-13T20:06:51Z'>
	<summary>`use_fp32_update` does not use the current data</summary>
	<description>
&lt;denchmark-link:https://github.com/chainer/chainer/blob/v7.0.0b1/chainer/optimizer.py#L200&gt;https://github.com/chainer/chainer/blob/v7.0.0b1/chainer/optimizer.py#L200&lt;/denchmark-link&gt;

fp32_param.array is not set except for the first call.
Code to reproduce:
import chainer
import numpy

param = chainer.Parameter(numpy.array([2, 3], dtype='float16'))
param.grad = numpy.array([1, 2], dtype='float16')

class MyUpdateRule(chainer.UpdateRule):
    def update_core(self, param):
        print("update_core: ", param)
        param.array[...] += 1

update_rule = MyUpdateRule()
update_rule.use_fp32_update()

# First update
update_rule.update(param)

# Modify parameter manually
param.array = numpy.array([20, 30], dtype='float16')

# Second update
update_rule.update(param)  # The modification is lost
print(param)
Result
&lt;denchmark-code&gt;update_core:  variable([2. 3.])
update_core:  variable([3. 4.])
variable([4. 5.])
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='niboshi' date='2019-07-16T08:53:44Z'>
		With the current design, it needs readonly cupy array to detect if the array diverges from the cached version. Even if cupy supports it, the error message might be confusing.
One idea to avoid this problem is to adopt a completely different approach of fp32 update. This is actually used by other frameworks like Apex. In this design, models keep fp32 parameters directly, and whenever using them, these parameters are automatically cast to fp16. The cast is done in a differentiable manner. There is no cache mechanism in this case, so we don't need to deal with the cache coherency problem.
		</comment>
		<comment id='2' author='niboshi' date='2019-10-14T11:37:32Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed after 30 days if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='3' author='niboshi' date='2019-11-13T20:06:47Z'>
		This issue is closed as announced. Feel free to re-open it if needed.
		</comment>
	</comments>
</bug>