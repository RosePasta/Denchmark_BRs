<bug id='7096' author='kwasnydam' open_date='2019-05-09T05:23:18Z' closed_time='2019-05-28T06:39:44Z'>
	<summary>[BUG] Wrong initialization of the Linear link weights when called with n_batch_axes&amp;gt;1</summary>
	<description>
&lt;denchmark-h:h1&gt;Overview&lt;/denchmark-h&gt;

When creating the Linear link without specifying the input_size in the constructor and then calling the link with the parameter n_batch_axes &gt; 1, the weight matrix is initialized with a wrong shape and causes an error.
&lt;denchmark-h:h1&gt;Conditions&lt;/denchmark-h&gt;

Platform: Windows-7-6.1.7601-SP1
Chainer: 5.4.0
NumPy: 1.15.4
CuPy: Not Available
iDeep: Not Available
&lt;denchmark-h:h1&gt;Code to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import numpy as np
import chainer
batch_size, seq_len, num_of_features, out_features = (1, 4, 3, 8)
linear_layer_chainer = chainer.links.Linear(out_features)
data = chainer.Variable(np.ones((batch_size, seq_len, num_of_features), dtype=np.float32))
results = linear_layer_chainer (data, n_batch_axes=2)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h1&gt;Error messages, stack traces, or logs&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Traceback (most recent call last):
  File "C:\Users\ntt\Anaconda3\lib\site-packages\IPython\core\interactiveshell.py", line 3267, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "&lt;ipython-input-9-9df2914c2f5a&gt;", line 1, in &lt;module&gt;
    results = linear_layer_chainer_2_axes(data, n_batch_axes=2)
  File "C:\Users\ntt\Anaconda3\lib\site-packages\chainer\link.py", line 242, in __call__
    out = forward(*args, **kwargs)
  File "C:\Users\ntt\Anaconda3\lib\site-packages\chainer\links\connection\linear.py", line 138, in forward
    return linear.linear(x, self.W, self.b, n_batch_axes=n_batch_axes)
  File "C:\Users\ntt\Anaconda3\lib\site-packages\chainer\functions\connection\linear.py", line 288, in linear
    y, = LinearFunction().apply(args)
  File "C:\Users\ntt\Anaconda3\lib\site-packages\chainer\function_node.py", line 245, in apply
    self._check_data_type_forward(in_data)
  File "C:\Users\ntt\Anaconda3\lib\site-packages\chainer\function_node.py", line 330, in _check_data_type_forward
    self.check_type_forward(in_type)
  File "C:\Users\ntt\Anaconda3\lib\site-packages\chainer\functions\connection\linear.py", line 27, in check_type_forward
    x_type.shape[1] == w_type.shape[1],
  File "C:\Users\ntt\Anaconda3\lib\site-packages\chainer\utils\type_check.py", line 546, in expect
    expr.expect()
  File "C:\Users\ntt\Anaconda3\lib\site-packages\chainer\utils\type_check.py", line 483, in expect
    '{0} {1} {2}'.format(left, self.inv, right))
chainer.utils.type_check.InvalidType: 
Invalid operation is performed in: LinearFunction (Forward)
Expect: x.shape[1] == W.shape[1]
Actual: 3 != 12
&lt;/denchmark-code&gt;

&lt;denchmark-h:h1&gt;Others&lt;/denchmark-h&gt;

If you create the Linear layer link with in_size passed explicitly to the correct shape, it works:
&lt;denchmark-code&gt;working_linear = chainer.links.Linear(num_of_features, out_features)
working_results = working_linear(data,  n_batch_axes=2)
working_results.shape
&lt;/denchmark-code&gt;

Output : (1, 4, 8)
&lt;denchmark-h:h1&gt;Solution&lt;/denchmark-h&gt;

I believe the culprit lays in the Linear link forward method:
&lt;denchmark-code&gt;    def forward(self, x, n_batch_axes=1):
        """Applies the linear layer.

        Args:
            x (~chainer.Variable): Batch of input vectors.
            n_batch_axes (int): The number of batch axes. The default is 1. The
                input variable is reshaped into
                (:math:`{\\rm n\\_batch\\_axes} + 1`)-dimensional tensor.
                This should be greater than 0.

        Returns:
            ~chainer.Variable: Output of the linear layer.

        """
        if self.W.array is None:
            in_size = functools.reduce(operator.mul, x.shape[1:], 1)
            self._initialize_params(in_size)
        return linear.linear(x, self.W, self.b, n_batch_axes=n_batch_axes)
&lt;/denchmark-code&gt;

If I interpret this part correctly, it does not take into account the n_batch_axes parameter when initializing the weight matrix.
	</description>
	<comments>
		<comment id='1' author='kwasnydam' date='2019-05-20T06:16:05Z'>
		Thanks for reporting this issue! It will be addressed in &lt;denchmark-link:https://github.com/chainer/chainer/pull/7167&gt;#7167&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>