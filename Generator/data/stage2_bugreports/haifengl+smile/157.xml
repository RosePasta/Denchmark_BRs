<bug id='157' author='DataOmbudsman' open_date='2017-02-22T10:53:59Z' closed_time='2017-03-09T14:25:11Z'>
	<summary>AUC calculation issue</summary>
	<description>
As I was evaluating the predictions of algorithms in Smile, it occurred to me that the calculated AUC is not always bounded between 0 and 1.
Here's a snippet of Scala that reproduces the issue:
&lt;denchmark-code&gt;val n = 100000
val trueLabels = Seq.fill(n)(Random.nextInt(2)).toArray
val probabilities = Seq.fill(n)(Random.nextDouble).toArray

println(AUC.measure(trueLabels, probabilities)) // -1.89...
&lt;/denchmark-code&gt;

I observed it using only longer arrays. So my guess is that it is an integer overflow problem, probably in this line of AUC.scala:
auc = (auc - (pos * (pos+1) / 2.0)) / (pos * neg);
	</description>
	<comments>
		<comment id='1' author='DataOmbudsman' date='2017-02-27T14:39:58Z'>
		I cannot run your code in smile shell. Which "Random" object do you refer? BTW, the double value 2.0 is used in the line you talked about. All calculation will be lifted to double. So there is no integer overflow. Thanks!
		</comment>
		<comment id='2' author='DataOmbudsman' date='2017-03-08T12:05:39Z'>
		I used scala.util.Random. Here is the complete Scala code with imports:
&lt;denchmark-code&gt;object AUCIssue extends App {
  import scala.util.Random
  import smile.validation.AUC

  val n = 100000
  val trueLabels = Seq.fill(n)(Random.nextInt(2)).toArray
  val probabilities = Seq.fill(n)(Random.nextDouble).toArray

  println(AUC.measure(trueLabels, probabilities)) // -1.89...
}
&lt;/denchmark-code&gt;

Maybe (pos * neg) is lifted to double after the overflow?
		</comment>
		<comment id='3' author='DataOmbudsman' date='2017-03-08T14:44:55Z'>
		Thanks! I change pos and neg to double. It reports 0.50 now.
		</comment>
	</comments>
</bug>