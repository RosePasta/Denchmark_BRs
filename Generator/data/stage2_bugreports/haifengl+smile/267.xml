<bug id='267' author='meyerjp3' open_date='2018-02-08T03:25:13Z' closed_time='2018-02-09T00:42:51Z'>
	<summary>MultivariateGaussianDistribution provides incorrect value</summary>
	<description>
&lt;denchmark-h:h2&gt;Issue&lt;/denchmark-h&gt;

I ran a few tests with MultivariateGaussianDistribution  and compared the results to R. Several test cases failed. Looking into the code and comparing it to Alan Genz 1992 article, it seems there is a coding error in your algorithm. It's small, but it's there. However, please double check. A test case below shows the error. I was not able to create a pull request, but the correct code is shown below. The new and revised lines are commented to show you the changes.
&lt;denchmark-h:h2&gt;Test Case&lt;/denchmark-h&gt;

import smile.math.matrix.Cholesky;
import smile.math.matrix.DenseMatrix;
import smile.math.matrix.Matrix;
import smile.stat.distribution.MultivariateGaussianDistribution;
public class MultivariateNormalStuff {
&lt;denchmark-code&gt;/**
 * Tested against R
 * library(mvtnorm)
 * X&lt;-c(0.713919336274493, 0.584408785741822, 0.263119200077829, 0.732513610871908)
 * M&lt;-c(-0.683477474844462, 1.480296478403701, 1.008431991316523,0.448404211078558)
 * S&lt;-matrix(c(
 * 3.260127902272362, 2.343938296424249, 0.1409050254343716, -0.1628775438743266,
 * 2.343938296424249, 4.213034991388330, 1.3997210599608563,  0.3373448510018783,
 * 0.1409050254343716, 1.3997210599608563, 4.6042485263677939,  0.0807267064408651,
 * -0.1628775438743266, 0.3373448510018783, 0.0807267064408651,  5.4950949215890672), nrow=4, byrow=TRUE)
 * pmvnorm(upper=X, mean=M, sigma=S)
 */
public void test1(){

    double[][] S = {
            {3.260127902272362, 2.343938296424249, 0.1409050254343716, -0.1628775438743266},
            {2.343938296424249, 4.213034991388330, 1.3997210599608563,  0.3373448510018783},
            {0.1409050254343716, 1.3997210599608563, 4.6042485263677939,  0.0807267064408651},
            {-0.1628775438743266, 0.3373448510018783, 0.0807267064408651,  5.4950949215890672}
    };

    double[] M = {-0.683477474844462,  1.480296478403701,  1.008431991316523,  0.448404211078558};
    double[] X = {0.713919336274493, 0.584408785741822, 0.263119200077829, 0.732513610871908};

    MultivariateGaussianDistribution mvn = new MultivariateGaussianDistribution(M, S);
    double prob = mvn.cdf(X);

    //According to R, the result should be 0.0904191282120575
    double tol = 0.001;
    System.out.println("Prob = " + prob + " Accurate = " + ((prob-0.0904191282120575)&lt;=tol));

}

public static void main(String[] args){
    MultivariateNormalStuff mvn = new MultivariateNormalStuff();
    mvn.test1();
}
&lt;/denchmark-code&gt;

}
&lt;denchmark-h:h2&gt;Revised Code&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;public double cdf(double[] x) {
    if (x.length != dim) {
        throw new IllegalArgumentException("Sample has different dimension.");
    }

    int Nmax = 10000;
    double alph = GaussianDistribution.getInstance().quantile(0.999);
    double errMax = 0.001;

    double[] v = x.clone();
    Math.minus(v, mu);

    double p = 0.0;
    double varSum = 0.0;

    // d is always zero
    double[] f = new double[dim];

double[] e = new double[dim];//NEW CODE
    e[0]  = GaussianDistribution.getInstance().cdf(v[0] / sigmaL.get(0, 0)); //NEW CODE
    f[0] = e[0]; //REVISED CODE

    double[] y = new double[dim];

    double err = 2 * errMax;
    int N;
    for (N = 1; err &gt; errMax &amp;&amp; N &lt;= Nmax; N++) {
        double[] w = Math.random(dim - 1);
        for (int i = 1; i &lt; dim; i++) {
            //y[i - 1] = GaussianDistribution.getInstance().quantile(w[i - 1] * f[i - 1]);//THIS WAS THE PROBLEMATIC CODE
            y[i - 1] = GaussianDistribution.getInstance().quantile(w[i - 1] * e[i - 1]);//REVISED CODE
            double q = 0.0;
            for (int j = 0; j &lt; i; j++) {
                q += sigmaL.get(i, j) * y[j];
            }
            e[i] = GaussianDistribution.getInstance().cdf((v[i] - q) / sigmaL.get(i, i));//NEW CODE
            f[i] = e[i] * f[i-1]; //REVISED CODE
        }

        double del = (f[dim - 1] - p) / N;
        p += del;
        varSum = (N - 2) * varSum / N + del * del;
        err = alph * Math.sqrt(varSum);
    }

    return p;
}
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='meyerjp3' date='2018-02-09T00:42:41Z'>
		Thank you very much! We fixed the bug as you suggest.
		</comment>
		<comment id='2' author='meyerjp3' date='2018-02-09T18:03:07Z'>
		Thanks. I really appreciate all the work you do for this library. It is an excellent resource!
		</comment>
	</comments>
</bug>