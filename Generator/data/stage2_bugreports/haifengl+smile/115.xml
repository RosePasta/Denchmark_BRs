<bug id='115' author='stuz5000' open_date='2016-09-16T04:03:02Z' closed_time='2016-09-21T14:51:11Z'>
	<summary>posteriori probability interpretation disagreement -- DT vs LR</summary>
	<description>
SoftClassifier take a double[] posteriori parameter which is filled out by predict.
My assumption is that this is filled with the predicted class probability: posteriori(1) is the class probability if class 1 is correct, posteriori(0) if class 0 if correct. However, DecisionTree and LogisticRegression seem disagree on interpretation. DT seems to be the class probability. For  LogisticRegression it seems to be 1-prob.
In the following test, I reliably get the following output:

DT: expected: 1   classification: 1    prob: 0.9999999999997353, 2.646771690706373E-13
LR expected: 1   classification: 1    prob: 0.125, 0.875

Is the probability backwards for LR?
&lt;denchmark-code&gt;  @Test
  def testDT() {
    def eval(x:Array[Array[Double]],
             y:Array[Int],
             model:smile.classification.SoftClassifier[Array[Double]])={

      var errors = 0
      for (i &lt;- 0 until x.length) {
        val classification = model.predict(x(i))
        val posteriori = Array(0.0, 0.0)
        val prob = model.predict(x(i), posteriori)
        println(s"expected: ${y(i)}   classification: ${classification}    prob: ${posteriori(0)}, ${posteriori(1)}")
        val c = if (posteriori(1)&gt;0.5) 1 else 0  // Naive.
        if (y(i)!=c) errors += 1
      }
      errors.toDouble / y.size
    }

    val rnd = new Random(1234)
    val size = 20
    val y = (0 until size).map{_=&gt;rnd.nextInt(2)}.toArray
    val x = y.map{r=&gt;; Array(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, rnd.nextFloat()+2*r)}

    println("LR")
    val lr = eval( x,y, new LogisticRegression(x,y,0) )
    println("DT")
    val dt = eval( x,y, new DecisionTree(x,y,10) )
    println(s"dt=${dt}  lr=${lr}")
  }
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='stuz5000' date='2016-09-20T17:31:06Z'>
		Thank you very much! It is a bug with logistic regression. Now it is fixed and pushed to the master branch.
		</comment>
	</comments>
</bug>