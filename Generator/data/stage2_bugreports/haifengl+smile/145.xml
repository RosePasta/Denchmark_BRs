<bug id='145' author='softignition' open_date='2017-01-20T14:45:55Z' closed_time='2017-02-07T17:20:19Z'>
	<summary>Wavelet Transform gives incorrect results</summary>
	<description>
I have noticed that discrete wavelet transform using Haar wavelet does not really match up results given by Mathematica.
For example Haar DWT of sequence {1,2,3,4} gives {3.5355, 3.5355, -0.7071, 2.1213} in your library, while Mathematica gives {5, -2, -0.7071, -0.7071}. I have reproduced your library result in Mathematica by rotating input data to {2,3,4,1} and specifying 1 level of refinement in DiscreteWaveletTransform function.
Differences exist for other wavelets too.
Please correct your algorithm implementation.
	</description>
	<comments>
		<comment id='1' author='softignition' date='2017-01-20T15:57:06Z'>
		Thanks! We did test our implementation against Matlab. I think that the difference is because of the data format. Mathematica assumes that the "Periodic" padding, that is how to extend data beyond boundaries. It is why if you rotate the 1 to back, we get the same results. Also, the input is only 4 elements, we use 1 level here.
		</comment>
		<comment id='2' author='softignition' date='2017-01-21T22:35:35Z'>
		Padding is never a problem for Haar wavelets.
Please visit the following page:
&lt;denchmark-link:https://en.wikipedia.org/wiki/Haar_wavelet#Example&gt;https://en.wikipedia.org/wiki/Haar_wavelet#Example&lt;/denchmark-link&gt;

It explains Haar transform of the vector {1,2,3,4} using matrix multiplication and it proofs that the result computed by your library is incorrect.
		</comment>
		<comment id='3' author='softignition' date='2017-01-25T15:30:43Z'>
		You are right. Padding is not the issue here. But there are two other things that may cause the difference.


In the example of Wiki, H4 matrix is used, which means two stage transformation. As you already noticed, we are doing only level transformation with Haar. It means that we are using H2 matrix in that wiki page.


In fact, we are not using the exact same H2 matrix. Most wavelet documents use [1, 1] as coefficients in Haar because it is simple. However, its norm is 2, not 1. In our implementation, we use the coefficient 0.7071067811865475. Similarly, we normalize all other wavelet coefficients to norm 1. You can check these coefficients in smile.wavelet.DaubechiesWavelet, for example. They are different from what you will find in wiki (https://en.wikipedia.org/wiki/Daubechies_wavelet), where they explicitly states that the norm is 2. Some people normalize them to of norm sqrt(2), too. It is mainly a matter of scaling.


I don't have Mathematica. Can you please do me a favor by calculating
DiscreteWaveletTransform([1,2,3,4]) with one level refinement and then scale the result with 0.7071067811865475. I hope this will match our result.
BTW, we have unit tests that all can transform a signal back and forth without errors. And the wavelet shrinkage also works fine. If our DWT is wrong, i cannot image that we can transform the signal back without errors. Thanks!
		</comment>
		<comment id='4' author='softignition' date='2017-01-31T15:52:42Z'>
		@bernacek any updates? can we match the results after scaling? Thanks a lot!
		</comment>
		<comment id='5' author='softignition' date='2017-02-01T14:01:00Z'>
		No, scaling won't help. The signs in output does not match.
I think there are two problems with your implementations:

Haar filter is misaligned with the input signal. Thats why rotating input gives correct result for the first level of DWT.
For a 4-element vector should be 2 levels of DWT, not 1; 3 levels for 8-element vector, etc.
Additionally I think that coiflet wavelet filter coefficients are in reverse order.

		</comment>
		<comment id='6' author='softignition' date='2017-02-01T14:57:43Z'>
		Most wavelet's coefficients are at least 4. It is why the generic wavelet.transform() method stops at that level. Haar is special with only 2 coefficients. I will add special handling to it in transform().
Can you post the result from Mathematica with one level pass and scaling here? I want check if the sign difference is systematic or not. Thanks!
		</comment>
		<comment id='7' author='softignition' date='2017-02-01T15:11:32Z'>
		I checked [JWave] (&lt;denchmark-link:https://github.com/cscheiblich/JWave/blob/master/src/jwave/transforms/wavelets/coiflet/Coiflet1.java&gt;https://github.com/cscheiblich/JWave/blob/master/src/jwave/transforms/wavelets/coiflet/Coiflet1.java&lt;/denchmark-link&gt;
). Our coiflet coefficients match theirs. Which doc/software do you refer about coif let coefficients? Thanks!
		</comment>
		<comment id='8' author='softignition' date='2017-02-01T15:45:55Z'>
		Can you confirm that this issue is only with Haar wavelet? After scaling, can other wavelets match Mathematica (let's leave coiflet alone now). This will help me to locate the issues. Thanks!
		</comment>
		<comment id='9' author='softignition' date='2017-02-01T17:01:33Z'>
		In Mathematica DWT of the vector {1,2,3,4} with one level of refinement, scaled by 0.7071067811865475, gives:
{1.5, 3.5, -0.5, -0.5}. But again - you are missing one level of decomposition here. You confused number of levels in DWT (algorithm passes - in case of full decomposition) with the minimum data length required to perform wavelet transform - these are not related to each other. The full decomposition stops at the deepest level when LAST PAIR of samples is convoluted with a filter. It's always last two samples regardless how long the filter is. But the longer the filter is, the largest minimal data length is required. Obviously you cannot transform signal shorter than a filter length.
Regarding the coiflet coefficients, I may point you to a Wikipedia: &lt;denchmark-link:https://en.wikipedia.org/wiki/Coiflet#Coiflet_coefficients&gt;https://en.wikipedia.org/wiki/Coiflet#Coiflet_coefficients&lt;/denchmark-link&gt;

Mathematica also gives coefficients matching the ones mentioned in this Wikipedia article.
Other wavelets probably would work fine, expect the missing last level of decomposition.
And one more small thing: "Symmlet" wavelets are misspelled, it's "Symlet".
		</comment>
		<comment id='10' author='softignition' date='2017-02-01T17:11:38Z'>
		Some people call it Symmlet, for example &lt;denchmark-link:http://www.colorado.edu/engineering/CAS/courses.d/ASEN5519.d/kaist.lecture.11.pdf&gt;http://www.colorado.edu/engineering/CAS/courses.d/ASEN5519.d/kaist.lecture.11.pdf&lt;/denchmark-link&gt;

Not sure which one is "officially" correct spelling :)
For sure, I will make  transform() working until the last pair.
Not sure the coefficients (not matter coiflet and others). I found many different definitions. Don't know how they come up and which one is (absolutely) correct. Coiflet is almost symmetric. Maybe some people don't care if it is reversed?
		</comment>
		<comment id='11' author='softignition' date='2017-02-01T17:40:50Z'>
		I'm not so sure either about the spelling, however both Mathematica and Matlab, and most academic papers refer it as "symlet".
I'm sure that most people don't care if the coeffs are reversed, but you might wish to have it in pair with other software.
		</comment>
		<comment id='12' author='softignition' date='2017-02-02T02:10:42Z'>
		In the book Numerical Recipes (&lt;denchmark-link:http://cacs.usc.edu/education/cs653/NRC-c13.10-Wavelets.pdf&gt;http://cacs.usc.edu/education/cs653/NRC-c13.10-Wavelets.pdf&lt;/denchmark-link&gt;
), the DWT stops at last four samples (not 2). See the wt1 function there. Do I miss something here? Or Haar is special?
		</comment>
		<comment id='13' author='softignition' date='2017-02-02T02:41:39Z'>
		In this web page, the order of coiflet coefficients is same as in my code. Does the order really matter in coiflet?
		</comment>
		<comment id='14' author='softignition' date='2017-02-02T03:21:05Z'>
		Find the bug with HaarWavelet. It is fixed now and we match the results with Mathematica on [1,2,34] input. Thanks!
		</comment>
		<comment id='15' author='softignition' date='2017-02-03T15:03:05Z'>
		Matlab uses this function to calculate how many levels of wavelet transform.
&lt;denchmark-link:http://www.codeforge.com/read/200483/wmaxlev.m__html&gt;http://www.codeforge.com/read/200483/wmaxlev.m__html&lt;/denchmark-link&gt;

We follow the same rule now.
		</comment>
		<comment id='16' author='softignition' date='2017-02-03T16:14:30Z'>
		all changes are pushed to repo. you can try it by clone this project and then run ./smile.sh in the repo. Thanks!
		</comment>
	</comments>
</bug>