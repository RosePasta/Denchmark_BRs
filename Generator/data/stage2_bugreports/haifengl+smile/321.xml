<bug id='321' author='rbouadjenek' open_date='2018-06-13T18:47:36Z' closed_time='2018-06-14T02:31:23Z'>
	<summary>Bug in XMeans line 116-121</summary>
	<description>
&lt;denchmark-h:h1&gt;Problem&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/haifengl&gt;@haifengl&lt;/denchmark-link&gt;
 could you please check the following code in  in:
&lt;denchmark-link:https://github.com/haifengl/smile/blob/master/core/src/main/java/smile/clustering/XMeans.java&gt;https://github.com/haifengl/smile/blob/master/core/src/main/java/smile/clustering/XMeans.java&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/7735263/41370531-e4fe7434-6f15-11e8-8211-4d5cb1d9e4fc.png&gt;&lt;/denchmark-link&gt;


In line 116, you are ordering the score array. However, according to the documentation of this function, it orders the array given in parameter, and returns the original index of elements after sorting.

&lt;denchmark-link:https://user-images.githubusercontent.com/7735263/41370815-9a278da0-6f16-11e8-8074-2110ea26f3fc.png&gt;&lt;/denchmark-link&gt;


The problem is that in line 118, you use the index obtained in line 116 to access elements in the ordred array and not the original array. We have observed (with @Suri-Xiang, @Nhrishti, @ssanner) abnormal behavior of the XMeans algorithm.

&lt;denchmark-h:h1&gt;Solution&lt;/denchmark-h&gt;


The solution we propose is to copy the array score and sort that new copied array. Then, you can use the index obtained on the score array.
double[] score_sorted = score.clone();
int[] index = QuickSort.sort(score_sorted);
 for (int i = 0; i &lt; k; i++) {
if (score[index[i]] &lt;= 0.0) {
centers.add(centroids[index[i]]);
}
}

	</description>
	<comments>
		<comment id='1' author='rbouadjenek' date='2018-06-13T19:56:34Z'>
		What abnormal behavior do you observe? Thanks.
		</comment>
		<comment id='2' author='rbouadjenek' date='2018-06-13T20:01:14Z'>
		If the minimum number of clusters is set to kmin=10 (we modified a little bit the original algorithm), the algorithm may return a lower number of clusters. This is due to this sorting bug.
		</comment>
		<comment id='3' author='rbouadjenek' date='2018-06-13T20:35:13Z'>
		I think that we just change line 118 to
&lt;denchmark-code&gt;if (score[i] &lt;= 0.0)
&lt;/denchmark-code&gt;

The lines 116 - 121 are to keep old clusters without split.
		</comment>
		<comment id='4' author='rbouadjenek' date='2018-06-13T21:17:47Z'>
		yes, you can also change line 118 to
if (score[i] &lt;= 0.0)
thanks.
		</comment>
		<comment id='5' author='rbouadjenek' date='2018-06-14T01:42:28Z'>
		I fixed the bug in X-Means and G-Means. The fix is available in master branch now.
		</comment>
		<comment id='6' author='rbouadjenek' date='2018-06-14T02:31:16Z'>
		Thank you very much :)
On behalf of: &lt;denchmark-link:https://github.com/Suri-Xiang&gt;@Suri-Xiang&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/Nhrishti&gt;@Nhrishti&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/ssanner&gt;@ssanner&lt;/denchmark-link&gt;

best,
reda
		</comment>
	</comments>
</bug>