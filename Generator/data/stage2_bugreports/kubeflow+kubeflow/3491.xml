<bug id='3491' author='yanniszark' open_date='2019-06-18T22:27:07Z' closed_time='2019-07-22T01:47:31Z'>
	<summary>kfctl: kustomize component discovery logic is flawed</summary>
	<description>
kfctl uses a function called mapDirs to discover the components available and map each component's name to its path.
However, the logic it uses for discovery is flawed and can lead to perplexing errors.



kubeflow/bootstrap/v2/pkg/kfapp/kustomize/kustomize.go


        Lines 522 to 523
      in
      24c39e3






 // package is component, stop here 



 if depth == 1 &amp;&amp; kustomize.packageMap[dirName] != nil &amp;&amp; kustomize.componentMap[dirName] { 





In the above check, to check if a folder is a component, we check if the folder is a package name and a component name.
This makes the discovery's results depend on what the user has asked.
The component discovery should yield the same results no matter what components the user asks for.
eg.
For a structure like:
&lt;denchmark-code&gt;|-- admission-webhook
    |-- bootstrap
        |-- base
    |-- webhook
        |-- base
&lt;/denchmark-code&gt;

If the KfDef is wrong like the following, the discovery code will think that the admission-webhook folder is a component, because of the check above.
packages:
  - admission-webhook
components:
  - admission-webhook
If instead the KfDef is like the following, the components bootstrap and webhook will be discovered correctly.
packages:
  - admission-webhook
components:
  - bootstrap
  - webhook
	</description>
	<comments>
		<comment id='1' author='yanniszark' date='2019-06-18T22:27:09Z'>
		Issue-Label Bot is automatically applying the label kind/bug to this issue, with a confidence of 0.70. Please mark this comment with üëç or üëé to give our bot feedback!
Links: &lt;denchmark-link:https://github.com/marketplace/issue-label-bot&gt;app homepage&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://mlbot.net/data/kubeflow/kubeflow&gt;dashboard&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/hamelsmu/MLapp&gt;code&lt;/denchmark-link&gt;
 for this bot.
		</comment>
		<comment id='2' author='yanniszark' date='2019-06-18T22:27:47Z'>
		/assign &lt;denchmark-link:https://github.com/kkasravi&gt;@kkasravi&lt;/denchmark-link&gt;

/cc &lt;denchmark-link:https://github.com/jlewi&gt;@jlewi&lt;/denchmark-link&gt;
 for ksonnet turndown
		</comment>
		<comment id='3' author='yanniszark' date='2019-06-21T05:03:02Z'>
		Should we refactor the spec and get rid of components, packages, and componentParams?
This terminology no longer really makes sense now that we are using ksonnet.
Should we just refactor this into a list of applications
&lt;denchmark-code&gt;Applications:
   -  name: central-dashboard
      repoName:
      repoPath: 
      overlays:
         - overlay1 
         - overlay2
     parameters:
         - name: 
           value
&lt;/denchmark-code&gt;

For each application we can no specify its relative path within the repo so there's no more magic discovery going on.
		</comment>
		<comment id='4' author='yanniszark' date='2019-06-26T14:18:19Z'>
		&lt;denchmark-link:https://github.com/yanniszark&gt;@yanniszark&lt;/denchmark-link&gt;
 Can you help me understand what is release blocking? Unfortunately I think &lt;denchmark-link:https://github.com/kkasravi&gt;@kkasravi&lt;/denchmark-link&gt;
 is OOO this rest of the week.
Why do we have packages and components? These concepts don't really make sense to me in the context of kustomize?
Should we pick one maybe packages and treat the value as a path to a kusotmization.yaml file.
So instead of
&lt;denchmark-code&gt;packages:
  - admission-webhook
components:
  - bootstrap
  - webhook
&lt;/denchmark-code&gt;

We just do
&lt;denchmark-code&gt;components:
  - admission-webhook/bootstrap
  - admission-webhook/webhook
&lt;/denchmark-code&gt;

And treat the value as the relative path to the kustomization file?
Alternatively we could add something like application_types
&lt;denchmark-code&gt;Applications:
   -  name: central-dashboard
      repoName:
      repoPath: 
      overlays:
         - overlay1 
         - overlay2
      parameters:
          - name: 
             value
&lt;/denchmark-code&gt;

And then add a method to try to auto populate Applications from packages/componentParams/componets perhaps by using the existing logic.
The advantage of this approach is that its much closer to a long term fix which decreases the likelihood that we run into other problems.
Providing a method to auto-populate Applications from packages/componentParams/componets means we don't have to update all existing usages in one go.
We can also write a unittest to verify the mapping happens correctly.
Another advantage of this approach is that if need be we can just hardcode specific paths to use for existing components because any future changes should be using the new spec.
I think I favor this approach.
		</comment>
		<comment id='5' author='yanniszark' date='2019-06-26T14:32:06Z'>
		cc &lt;denchmark-link:https://github.com/jlewi&gt;@jlewi&lt;/denchmark-link&gt;


Why do we have packages and components? These concepts don't really make sense to me in the context of kustomize?

Agreed

Should we pick one maybe packages and treat the value as a path to a kusotmization.yaml file.

Do you mean the path to the directory of kustomization.yaml?
If yes, I agree.
Making the package references explicit will remove the (flawed) magic discovery and also provide namespaces for packages.
eg now you can't have two packages with the same name. With this approach you can, because they are separated by the parent path.
Regarding the application_types approach:
I believe this and fixing the package referencing are interconnected.
Adding a function to generate Applications from components + componentParams seems logical if we want to go towards Applications in the future.
My suggestion is:

Drop packages and fix components (or vice versa) so that they reference with a full path (with the root of the path being the manifest repo).
Add the auto-generate function for Applications.

In any case, I don't think we have anything to gain by keeping the current discovery logic.
It is easy to get wrong and also doesn't allow for namespacing of components.
		</comment>
		<comment id='6' author='yanniszark' date='2019-06-26T15:47:32Z'>
		great summary &lt;denchmark-link:https://github.com/yanniszark&gt;@yanniszark&lt;/denchmark-link&gt;
 - thank you.
&lt;denchmark-link:https://github.com/jlewi&gt;@jlewi&lt;/denchmark-link&gt;
 - the original driver for this (flawed) logic was to keep compatibility with ksonnet.
Since that isn't a concern anymore, providing full paths as suggested is the best solution.
Note: This will probably be a XL PR since it impacts application_types, zz_* and a number of methods
in kustomize.
		</comment>
		<comment id='7' author='yanniszark' date='2019-06-27T08:21:19Z'>
		&lt;denchmark-link:https://github.com/jlewi&gt;@jlewi&lt;/denchmark-link&gt;
 is this really fixed in &lt;denchmark-link:https://github.com/kubeflow/kubeflow/pull/3548&gt;#3548&lt;/denchmark-link&gt;
 ?
It seems to me that you still can't specify full path to components:
eg.  vs 
		</comment>
		<comment id='8' author='yanniszark' date='2019-06-30T17:31:54Z'>
		&lt;denchmark-link:https://github.com/yanniszark&gt;@yanniszark&lt;/denchmark-link&gt;
 not fixed; I meant to merely say it was related.
		</comment>
		<comment id='9' author='yanniszark' date='2019-06-30T19:23:45Z'>
		I considered a variety of temporary fixes. For example, I considered prepending a "/" to the componentName to indicate it was an actual path and discovery logic shouldn't apply.
My conclusion though is that this would be roughly as much work as updating the code to use KfDef.Spec.Applications and be more brittle.
So I will take a stab at

defining KfDef.Spec.Applications
Updating the code to use it
Providing a backFill method to compute .Applications from components, packages, and componentParams so that existing manifests continue to work.

		</comment>
		<comment id='10' author='yanniszark' date='2019-07-01T17:27:49Z'>
		&lt;denchmark-link:https://github.com/jlewi&gt;@jlewi&lt;/denchmark-link&gt;
 sounds good, I just got confused at this part:

Providing a backFill method to compute .Applications from components, packages, and componentParams so that existing manifests continue to work.

Do you mean that you will backfill using the existing broken discovery logic?
		</comment>
		<comment id='11' author='yanniszark' date='2019-07-02T04:53:03Z'>
		Yeas. If KfDef doesn't have Applications defined; but still uses components, packages, componentParams then we will use the existing logic to locate the packages. We will then convert it to Applications and update KfDef.
		</comment>
		<comment id='12' author='yanniszark' date='2019-07-08T17:34:56Z'>
		I have fixes pending
First PR is &lt;denchmark-link:https://github.com/kubeflow/kubeflow/pull/3594&gt;#3594&lt;/denchmark-link&gt;
 but more PRs will be coming based on &lt;denchmark-link:https://github.com/kubeflow/kubeflow/pull/3534&gt;#3534&lt;/denchmark-link&gt;
.
I don't think we will block 0.6.0 on this fix. So I'm going to downgrade this to P1 since its not-blocking.
The fix will be based on using the new KfDef.Applications which allows each Application to specify the path of the application.
So to get the fix people will need to migrate to the new spec.
		</comment>
		<comment id='13' author='yanniszark' date='2019-07-22T01:43:42Z'>
		All of the changes to support KfDef.Applications are merged.  They should also be included in the v0.6.0 release.
Remaining work would be to upgrade the specs and tests to use it. We should file additional bugs for that.
		</comment>
	</comments>
</bug>