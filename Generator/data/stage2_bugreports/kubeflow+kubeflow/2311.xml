<bug id='2311' author='xyhuang' open_date='2019-01-22T08:54:48Z' closed_time='2019-11-16T11:49:29Z'>
	<summary>Katib job and Katib services cannot be in different namespaces due to metrics collector service account</summary>
	<description>
every katib job comes with its own metrics collector, which is supposed to be in the same name space as the job. However the metrics collectors rely on a service account that is created at the time of katib service installation, which is bound to the namespace of katib services. This prevents katib job from running in a namespace that's different from katib services.
	</description>
	<comments>
		<comment id='1' author='xyhuang' date='2019-01-22T08:57:53Z'>
		
do we assume that Katib is namespace scoped and jobs only work in same namespace
or shall we create a separate service account for each metrics collector/namespace?
any other possible solutions?
WDYT @YujiOshima @johnugeorge

		</comment>
		<comment id='2' author='xyhuang' date='2019-01-22T10:46:24Z'>
		From a technical perspective I cannot contribute but for our use case splitting these up would be very benificial
		</comment>
		<comment id='3' author='xyhuang' date='2019-01-22T16:44:55Z'>
		Do we have a design doc that covers how metrics will be collected from Jobs?
		</comment>
		<comment id='4' author='xyhuang' date='2019-01-22T17:40:18Z'>
		&lt;denchmark-link:https://github.com/YujiOshima&gt;@YujiOshima&lt;/denchmark-link&gt;
 Do you have some version of Katib design doc? I will help you to make it up-to-date
		</comment>
		<comment id='5' author='xyhuang' date='2019-01-22T21:09:10Z'>
		here is a doc that i am aware of: &lt;denchmark-link:https://docs.google.com/document/d/1ZEKhou4z1utFTOgjzhSsnvysJFNEJmygllgDCBnYvm8/edit#heading=h.7fzqir88ovr&gt;https://docs.google.com/document/d/1ZEKhou4z1utFTOgjzhSsnvysJFNEJmygllgDCBnYvm8/edit#heading=h.7fzqir88ovr&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/YujiOshima&gt;@YujiOshima&lt;/denchmark-link&gt;
 do you have a newer version? would love to help update it too.
		</comment>
		<comment id='6' author='xyhuang' date='2019-01-23T02:09:24Z'>
		&lt;denchmark-link:https://github.com/xyhuang&gt;@xyhuang&lt;/denchmark-link&gt;
 when you try to create a studyjob in non-kubeflow namespace, you need run below command. I will update user doc for this guideline
&lt;denchmark-code&gt;$ cat mcrbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-collector
  namespace: nonkubeflow
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: metrics-collector
  namespace: nonkubeflow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: metrics-collector
subjects:
- kind: ServiceAccount
  name: metrics-collector
  namespace: nonkubeflow
$ kubeflow apply -f  mcrbac.yaml
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='xyhuang' date='2019-01-23T02:43:50Z'>
		thanks &lt;denchmark-link:https://github.com/hougangliu&gt;@hougangliu&lt;/denchmark-link&gt;
! this is a valid workaround, though i wonder if there could be a "cleaner" way to fix that :) because running a separate RBAC creation file might potentially make it inconsistent with the codes &lt;denchmark-link:https://github.com/kubeflow/kubeflow/blob/c416045fb4b1458d5cd6bb4f28146d31a476a793/kubeflow/katib/studyjobcontroller.libsonnet#L29&gt;here&lt;/denchmark-link&gt;
 if future changers are not careful enough to keep both places synced, in that case we might end up using different RBAC rules in different namespace.
		</comment>
		<comment id='8' author='xyhuang' date='2019-01-23T03:20:08Z'>
		Because we cannot know in advance which namespace user will run a studyjob, so I am afraid we cannot create a complete RBAC when install.
As you mentioned, this is indeed a problem to keep sync. Maybe we can assign create permission of serviceaccount and RoleBinding to  serviceaccount  studyjob-controller when install katib. Then when create a studyjob, study-controller try to create resources like mcrbac.yaml above if in need.
&lt;denchmark-link:https://github.com/YujiOshima&gt;@YujiOshima&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/gaocegege&gt;@gaocegege&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/richardsliu&gt;@richardsliu&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/johnugeorge&gt;@johnugeorge&lt;/denchmark-link&gt;
 WDYT?
		</comment>
		<comment id='9' author='xyhuang' date='2019-01-24T12:41:07Z'>
		Yes.  it is difficult to support metrics collector service account creation(during katib install) in this architecture design.  I feel that this metric collector architecture is little complex.
		</comment>
		<comment id='10' author='xyhuang' date='2019-03-10T23:02:33Z'>
		What is the remaining work to be done with this issue? Is there work we plan on completing in 0.5?
		</comment>
		<comment id='11' author='xyhuang' date='2019-03-11T03:47:27Z'>
		&lt;denchmark-link:https://github.com/jlewi&gt;@jlewi&lt;/denchmark-link&gt;
 With the current metric collector design, it is difficult to solve.  We have to keep this open till we move into a push based model
/cc &lt;denchmark-link:https://github.com/richardsliu&gt;@richardsliu&lt;/denchmark-link&gt;

		</comment>
		<comment id='12' author='xyhuang' date='2019-03-20T17:13:37Z'>
		Since this involves redesigning the metric collector, it should be part of the v1alpha2 design.
		</comment>
		<comment id='13' author='xyhuang' date='2019-05-24T01:47:22Z'>
		&lt;denchmark-link:https://github.com/johnugeorge&gt;@johnugeorge&lt;/denchmark-link&gt;
 Will we implement the push-based model in v1alpha2?
		</comment>
		<comment id='14' author='xyhuang' date='2019-05-24T02:37:24Z'>
		
@johnugeorge Will we implement the push-based model in v1alpha2?

After integration with &lt;denchmark-link:https://github.com/kubeflow/metadata&gt;metadata&lt;/denchmark-link&gt;
 in v1alpha2, push-based model seems not in need any more
		</comment>
		<comment id='15' author='xyhuang' date='2019-05-24T02:40:28Z'>
		&lt;denchmark-link:https://github.com/hougangliu&gt;@hougangliu&lt;/denchmark-link&gt;
 Can you please explain more about it? I think we still need to get and push metrics although we have metadata as a unified storage backend.
		</comment>
		<comment id='16' author='xyhuang' date='2019-05-24T05:13:07Z'>
		&lt;denchmark-link:https://github.com/gaocegege&gt;@gaocegege&lt;/denchmark-link&gt;
 No. Our earlier plan was to have a push based model when metadata project comes with python api to post metrics.
&lt;denchmark-link:https://github.com/hougangliu&gt;@hougangliu&lt;/denchmark-link&gt;
 Which integration are you talking about?
		</comment>
		<comment id='17' author='xyhuang' date='2019-05-24T05:16:49Z'>
		integration with metadata in v1alpha2 will not be in release 0.6, but I think in long term, we must implement the integration, replacing current metricCollector
		</comment>
		<comment id='18' author='xyhuang' date='2019-05-24T05:23:23Z'>
		I prefer to provide an interface similar to CRI, maybe the name could be MetricsCollectionAPI for early stopping services. Then we could support different backends. Because there are some users maybe not use metadata. We could keep extensibility for the external storage.
		</comment>
		<comment id='19' author='xyhuang' date='2019-05-24T05:23:50Z'>
		We can discuss it after v1alpha2 0.6
		</comment>
		<comment id='20' author='xyhuang' date='2019-06-10T19:54:02Z'>
		&lt;denchmark-link:https://github.com/johnugeorge&gt;@johnugeorge&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/gaocegege&gt;@gaocegege&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/richardsliu&gt;@richardsliu&lt;/denchmark-link&gt;
 Do we need this issue to be fixed for 0.6?
		</comment>
		<comment id='21' author='xyhuang' date='2019-06-10T21:12:24Z'>
		We didn't have a nice way to fix this because we are still using the metrics collector implementation from v1alpha1. We decided to punt this until we can find a different solution for metrics collection (e.g. metadata APIs).
		</comment>
		<comment id='22' author='xyhuang' date='2019-08-10T23:44:05Z'>
		&lt;denchmark-link:https://github.com/xyhuang&gt;@xyhuang&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/johnugeorge&gt;@johnugeorge&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/richardsliu&gt;@richardsliu&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/gaocegege&gt;@gaocegege&lt;/denchmark-link&gt;
 Any plans to fix this is part of 0.7? Do we need to redesign Katib to have better multi-user support?
Starting with 0.6 Katib shared services should be in the kubeflow namespace but users should launch their jobs in their own kubeflow-${USER} namespace? Do we need to make significant changes to Katib in order to support this?
		</comment>
		<comment id='23' author='xyhuang' date='2019-08-11T10:45:28Z'>
		&lt;denchmark-link:https://github.com/jlewi&gt;@jlewi&lt;/denchmark-link&gt;
 yes, 0.7 will resolve this problem (&lt;denchmark-link:https://github.com/kubeflow/katib/issues/685&gt;kubeflow/katib#685&lt;/denchmark-link&gt;
)
		</comment>
		<comment id='24' author='xyhuang' date='2019-11-09T10:52:29Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
	</comments>
</bug>