<bug id='3273' author='jlewi' open_date='2019-05-15T13:23:45Z' closed_time='2019-05-16T03:21:44Z'>
	<summary>test_is_kf_ready fails for iap-enabler with istio</summary>
	<description>
Post submit run
&lt;denchmark-link:https://prow.k8s.io/view/gcs/kubernetes-jenkins/logs/kubeflow_kubeflow/kubeflow-postsubmit/1128463690513780736&gt;https://prow.k8s.io/view/gcs/kubernetes-jenkins/logs/kubeflow_kubeflow/kubeflow-postsubmit/1128463690513780736&lt;/denchmark-link&gt;

The test failed waiting for iap-enabler.
Here's the exception
&lt;denchmark-code&gt;E           kubernetes.client.rest.ApiException: (404)
E           Reason: Not Found
E           HTTP response headers: HTTPHeaderDict({'Content-Type': 'application/json', 'Audit-Id': '58ef169e-f59f-4df7-a8d5-74562f29d334', 'Content-Length': '236', 'Date': 'Wed, 15 May 2019 01:27:28 GMT'})
E           HTTP response body: {"kind":"Status","apiVersion":"v1","metadata":{},"status":"Failure","message":"deployments.extensions \"iap-enabler\" not found","reason":"NotFound","details":{"name":"iap-enabler","group":"extensions","kind":"deployments"},"code":404}
&lt;/denchmark-code&gt;

The calling code is
&lt;denchmark-code&gt;      ingress_namespace = "istio-system" if use_istio else namespace
      for deployment_name in ingress_related_deployments:
        logging.info("Verifying that deployment %s started...", deployment_name)
&gt;       util.wait_for_deployment(api_client, ingress_namespace, deployment_name)

kf_is_ready_test.py:69: 
&lt;/denchmark-code&gt;

I suspect the problem is we are checking the wrong namespace.
It looks like it just started failing.
I suspect this is related to
&lt;denchmark-link:https://github.com/kubeflow/kubeflow/pull/3253&gt;#3253&lt;/denchmark-link&gt;

It looks like that PR changed the ksonnet parameter used for ISTIO.
So I suspect we are no longer actually enabling ISTIO.

kfctl_is_ready should print out the namespace we are checking as well as whether ISTIO is enabled
Why didn't this get caught by presubmit for #3253

	</description>
	<comments>
		<comment id='1' author='jlewi' date='2019-05-15T13:23:48Z'>
		Issue-Label Bot is automatically applying the label kind/bug to this issue, with a confidence of 0.96. Please mark this comment with üëç or üëé to give our bot feedback!
Links: &lt;denchmark-link:https://github.com/marketplace/issue-label-bot&gt;app homepage&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://mlbot.net/data/kubeflow/kubeflow&gt;dashboard&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/hamelsmu/MLapp&gt;code&lt;/denchmark-link&gt;
 for this bot.
		</comment>
		<comment id='2' author='jlewi' date='2019-05-15T13:29:12Z'>
		Here's the presubmit run.
&lt;denchmark-link:https://prow.k8s.io/view/gcs/kubernetes-jenkins/pr-logs/pull/kubeflow_kubeflow/3253/kubeflow-presubmit/1128396796620443649/&gt;https://prow.k8s.io/view/gcs/kubernetes-jenkins/pr-logs/pull/kubeflow_kubeflow/3253/kubeflow-presubmit/1128396796620443649/&lt;/denchmark-link&gt;

My conjecture is that presubmit is not actually testing the manifests at the PR being submitted.
		</comment>
		<comment id='3' author='jlewi' date='2019-05-15T13:36:34Z'>
		Here are the logs for the build deploy step
&lt;denchmark-code&gt;/mnt/test-data-volume/kubeflow-presubmit-kfctl-go-iap-istio-3253-023af41-3649-673e/src/kubeflow/kubeflow/bootstrap/bin/kfctl init /mnt/test-data-volume/kubeflow-presubmit-kfctl-go-iap-istio-3253-023af41-3649-673e/kfctl-673e -V --platform=gcp --version=pull/3253 --skip-init-gcp-project --disable_usage_report --project=kubeflow-ci-deployment --use_istio
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/kubeflow/kubeflow/files/3182718/kubeflow-presubmit-kfctl-go-iap-istio-3253-023af41-3649-673e-2179499500.log.txt&gt;kubeflow-presubmit-kfctl-go-iap-istio-3253-023af41-3649-673e-2179499500.log.txt&lt;/denchmark-link&gt;

Output doesn't indicate whether it actually pulled at that PR or not we could try to rerun the command to reproduce it.
The stackdriver logs indicate the iap-enabler was created in namespace istio-system.
		</comment>
		<comment id='4' author='jlewi' date='2019-05-15T21:15:19Z'>
		there maybe has some changes to kfctl recently that introduces this.  I'm also seeing changed behavior &lt;denchmark-link:https://github.com/kubeflow/kubeflow/issues/3282&gt;#3282&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='jlewi' date='2019-05-15T22:38:10Z'>
		Another failing presubmit
&lt;denchmark-link:https://prow.k8s.io/view/gcs/kubernetes-jenkins/pr-logs/pull/kubeflow_kubeflow/3274/kubeflow-presubmit/1128767443351638016/&gt;https://prow.k8s.io/view/gcs/kubernetes-jenkins/pr-logs/pull/kubeflow_kubeflow/3274/kubeflow-presubmit/1128767443351638016/&lt;/denchmark-link&gt;

I fetched the event logs for "iap-enabler"
&lt;denchmark-code&gt;resource.labels.cluster_name="kfctl-e280"
logName="projects/kubeflow-ci-deployment/logs/events" 
jsonPayload.involvedObject.name="iap-enabler"
&lt;/denchmark-code&gt;


A replica set was created
Logs for the replica set show pod was created
Here are the event logs for the pod

&lt;denchmark-code&gt;resource.labels.cluster_name="kfctl-e280"
logName="projects/kubeflow-ci-deployment/logs/events" 
jsonPayload.involvedObject.name="iap-enabler-99779c66d-54bhw"
&lt;/denchmark-code&gt;

Here are the logs
&lt;denchmark-link:https://github.com/kubeflow/kubeflow/files/3184691/iap-enabler-99779c66d-54bhw.log.txt&gt;iap-enabler-99779c66d-54bhw.log.txt&lt;/denchmark-link&gt;

There are errors connecting to the server; but I'm not sure why that would affect whether the test thinks the deployment started.
		</comment>
		<comment id='6' author='jlewi' date='2019-05-15T22:46:39Z'>
		Code is calling util.wait_for_deployment



kubeflow/testing/kfctl/kf_is_ready_test.py


         Line 69
      in
      a70c866






 util.wait_for_deployment(api_client, ingress_namespace, deployment_name) 





Here's the exception
&lt;denchmark-code&gt;        if not 200 &lt;= r.status &lt;= 299:
&gt;           raise ApiException(http_resp=r)
E           kubernetes.client.rest.ApiException: (404)
E           Reason: Not Found
E           HTTP response headers: HTTPHeaderDict({'Content-Length': '236', 'Audit-Id': 'aec059c2-d192-4cf3-a280-9bb1286037a4', 'Content-Type': 'application/json', 'Date': 'Wed, 15 May 2019 21:31:03 GMT'})
E           HTTP response body: {"kind":"Status","apiVersion":"v1","metadata":{},"status":"Failure","message":"deployments.extensions \"iap-enabler\" not found","reason":"NotFound","details":{"name":"iap-enabler","group":"extensions","kind":"deployments"},"code":404}
&lt;/denchmark-code&gt;

It looks like this is happening immediately.
Hypothesis:

util.wait_for_deployment doesn't treat 404 (Not Found as retryable error)); maybe it should?
It seems weird that the build and deploy step would persist the deployment to the master but then a subsequent read would be inconsistent?

Lets look at timing of log statements
2019-05-15 14:31:04.189 PDT
kf_is_ready_test.py 68 INFO Verifying that deployment iap-enabler started...
Timestamp on the replica set is before that
2019-05-15 14:30:47.000 PDT
Scaled up replica set iap-enabler-99779c66d to 1
So master returning Not Found seems unlikely to be a transient error.
More likely is that we are not checking the namespace where the iap-enabler was actually created.
		</comment>
		<comment id='7' author='jlewi' date='2019-05-15T22:53:26Z'>
		Here's another presubmit failure
&lt;denchmark-link:https://prow.k8s.io/view/gcs/kubernetes-jenkins/pr-logs/pull/kubeflow_kubeflow/3268/kubeflow-presubmit/1128776375902146560/&gt;https://prow.k8s.io/view/gcs/kubernetes-jenkins/pr-logs/pull/kubeflow_kubeflow/3268/kubeflow-presubmit/1128776375902146560/&lt;/denchmark-link&gt;

In this presubmit we should be logging which namespace we are checking.
Logs show its checking istio-namespace
&lt;denchmark-code&gt;kf_is_ready_test.py 70 INFO Verifying that deployment istio-system.iap-enabler started...
&lt;/denchmark-code&gt;

But the kfctl logs show that its created in namespace kubeflow
&lt;denchmark-code&gt;
2019-05-15 15:04:13.538 PDT
util.py 71 INFO time="2019-05-15T22:04:13Z" level=info msg="Applying deployments kubeflow.iap-enabler" filename="cluster/upsert.go:73"
&lt;/denchmark-code&gt;

Event logs show that is actually in namespace kubeflow
&lt;denchmark-code&gt;
2019-05-15 15:04:13.000 PDT
Scaled up replica set iap-enabler-99779c66d to 1
 
Expand all | Collapse all {
 insertId:  "1ei35qofmtn07b"  
 jsonPayload: {
  apiVersion:  "v1"   
  involvedObject: {
   apiVersion:  "apps/v1"    
   kind:  "Deployment"    
   name:  "iap-enabler"    
   namespace:  "kubeflow"    
   resourceVersion:  "3441"    
   uid:  "5fdfa6b3-775d-11e9-8edc-42010af0009d"    
  }
  kind:  "Event"   
  message:  "Scaled up replica set iap-enabler-99779c66d to 1"   
  metadata: {‚Ä¶}   
  reason:  "ScalingReplicaSet"   
  source: {‚Ä¶}   
  type:  "Normal"   
 }
 logName:  "projects/kubeflow-ci-deployment/logs/events"  
 receiveTimestamp:  "2019-05-15T22:04:13.745694196Z"  
 resource: {‚Ä¶}  
 severity:  "INFO"  
 timestamp:  "2019-05-15T22:04:13Z"  
}
&lt;/denchmark-code&gt;

So the problem is test expects iap-enabler in namespace istio-system but it was actually created in namespace kubeflow
		</comment>
		<comment id='8' author='jlewi' date='2019-05-15T23:02:18Z'>
		So the root cause was the result of the combination of two PRs: &lt;denchmark-link:https://github.com/kubeflow/kubeflow/pull/3253&gt;#3253&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/kubeflow/kubeflow/pull/3108&gt;#3108&lt;/denchmark-link&gt;

in &lt;denchmark-link:https://github.com/kubeflow/kubeflow/pull/3253&gt;#3253&lt;/denchmark-link&gt;
 I change the param to be injectIstio and this value is set here:


As you can see only when injectIstio shows up in the list of componentParams that we will set this value.
In &lt;denchmark-link:https://github.com/kubeflow/kubeflow/pull/3108&gt;#3108&lt;/denchmark-link&gt;
 however, there are diffs between the app.yaml generated before the PR and after it.  One of the diffs is  in iap-ingress.  That is why although iap-enabler was deployed, namespace is  instead of .
		</comment>
		<comment id='9' author='jlewi' date='2019-05-16T03:13:02Z'>
		Thanks &lt;denchmark-link:https://github.com/gabrielwen&gt;@gabrielwen&lt;/denchmark-link&gt;

I think the fact that the bug was caused  by the combination of &lt;denchmark-link:https://github.com/kubeflow/kubeflow/pull/3253&gt;#3253&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/kubeflow/kubeflow/pull/3108&gt;#3108&lt;/denchmark-link&gt;
 also explains why this wasn't caught by presubmit.
Both of those PRs were probably testing against a base that didn't include the other. So presubmits weren't testing the combination of those PRs. So it was only in postsubmit and subsequent PRs rebased after those PRs that we started testing the combination.
This also means that after &lt;denchmark-link:https://github.com/kubeflow/kubeflow/pull/3283&gt;#3283&lt;/denchmark-link&gt;
 is submitted folks will need to rebase on master to pick up the fix.
		</comment>
		<comment id='10' author='jlewi' date='2019-05-16T17:24:54Z'>
		Yes, they need to sync to master.
I think the root cause of this is our testing logic as you described.  Say branch tree looks like:
&lt;denchmark-code&gt;---------base----------HEAD
              \
               ...
                 \
                branch
&lt;/denchmark-code&gt;

Our testing workflows take base + branch to test.  However, I think the correct logic should be:

use HEAD + branch
if it's able to patch, use it and run the tests.
if it is not able to patch, returns failure and asks author to rebase and re-run the test.

This is not 100% guarantee as there is consistency issue if a series of PRs run presubmit at the same time and combination of them will break the test.  But in general I think this should help us catch this issue 99% of the time.
		</comment>
	</comments>
</bug>