<bug id='4217' author='yanniszark' open_date='2019-10-01T18:43:12Z' closed_time='2020-04-26T01:40:23Z'>
	<summary>kfam: bindings roleref contain magic string and not real role</summary>
	<description>
/kind bug
What did you expect to happen:
The Binding struct defines a RoleRef.
I expect the RoleRef to contain a K8s role.
What happened:
The RoleRef contains a magic string ("view") instead of the real role ("kubeflow-viewer").
That's because the frontend expects a certain value.
Possible Solutions:

Make it clear that those are magic values and not Roles. Maybe add a separate field called type, or description.
Use the real Role names and fix the UI to fallback to the Role name if it doesn't find the values it expects.

/cc &lt;denchmark-link:https://github.com/jlewi&gt;@jlewi&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/krishnadurai&gt;@krishnadurai&lt;/denchmark-link&gt;

/priority p1
	</description>
	<comments>
		<comment id='1' author='yanniszark' date='2019-10-01T18:43:20Z'>
		Issue Label Bot is not confident enough to auto-label this issue.
See &lt;denchmark-link:https://mlbot.net/data/kubeflow/kubeflow&gt;dashboard&lt;/denchmark-link&gt;
 for more details.
		</comment>
		<comment id='2' author='yanniszark' date='2019-10-02T02:53:12Z'>
		&lt;denchmark-link:https://github.com/yanniszark&gt;@yanniszark&lt;/denchmark-link&gt;
 "view" was the role
&lt;denchmark-code&gt;kubectl  get clusterrole
NAME                                                                   AGE
admin                                                                  2d
...
edit                                                                   2d
...
view                                                                   2d

&lt;/denchmark-code&gt;

kubeflow-viewer is the new name for the role starting in 0.7.
So is this an issue with backwards compatibility?
		</comment>
		<comment id='3' author='yanniszark' date='2019-10-02T10:30:37Z'>
		&lt;denchmark-link:https://github.com/yanniszark&gt;@yanniszark&lt;/denchmark-link&gt;
 Is this about &lt;denchmark-link:https://github.com/kubeflow/kubeflow/pull/4167&gt;#4167&lt;/denchmark-link&gt;
 and the addition in that PR of
components/access-management/kfam/bindings.go
which is mapping "view" to "kubeflow-viewer"
I think that was just for backwards compatibility because in 0.6 the role names were edit, view, admin and we are changing this in 0.7 to kubeflow-edit, kubeflow-view, and kubeflow-admin.
But the central dashboard was still sending the old names to the KFAM backend so the KFAM backend was doing the mapping from the old role names to the new ones.
So I think if we update the front end to use the new role names then we can delete the code doing the mapping in bindings.go
		</comment>
		<comment id='4' author='yanniszark' date='2019-10-02T10:45:08Z'>
		&lt;denchmark-link:https://github.com/jlewi&gt;@jlewi&lt;/denchmark-link&gt;
 This has to do with backwards compatibility.
There are 2 ways to approach this:

ClusterRole names are same the role names shown in the frontend with a 'kubeflow' prefix.
Both are different and are mapped by the backend.

I suggest we retain the names 'admin', 'edit' and 'view' at the frontend and at the backend API level too and role-bindings can be mapped - option 2. This would mean that ClusterRole names are not necessarily the same as shown in the frontend which would contain an unnecessary prefix.
		</comment>
		<comment id='5' author='yanniszark' date='2019-10-05T05:27:22Z'>
		&lt;denchmark-link:https://github.com/krishnadurai&gt;@krishnadurai&lt;/denchmark-link&gt;
  Is option 2 just a temporary solution for backwards compatibility? Would we eventually remove it and surface the actual cluster roles?
What would be the reason long term for introducing a a layer of indirection around the underlying cluster-roles?
In general, I think the principle we are trying to follow with Kubeflow IAM is to reuse RBAC as much as possible. Applying that principle, surfacing actual RBAC role names makes the most sense. One reason for doing this is then its natural for people to switch between using KF tooling (e.g. our UI) and other tooling (e.g. kubectl).
		</comment>
		<comment id='6' author='yanniszark' date='2019-10-07T09:05:21Z'>
		
What would be the reason long term for introducing a a layer of indirection around the underlying cluster-roles?

&lt;denchmark-link:https://github.com/jlewi&gt;@jlewi&lt;/denchmark-link&gt;
 I'm fine with keeping the same names in frontend and backend for RBAC rules, with the thought you've mentioned above. This convention of adding the prefix to role names needs to be ensured if we allow users to define their own roles with future releases. I had initially thought of achieving this through mapping so that users wouldn't have to ensure it, given that their names could clash with existing RBAC roles.
But I think we could avoid that in many other ways.
		</comment>
		<comment id='7' author='yanniszark' date='2020-01-12T22:55:11Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='8' author='yanniszark' date='2020-01-20T00:40:09Z'>
		/reopen
/remove-lifecycle stale
/lifecycle frozen
		</comment>
		<comment id='9' author='yanniszark' date='2020-01-20T00:40:10Z'>
		&lt;denchmark-link:https://github.com/yanniszark&gt;@yanniszark&lt;/denchmark-link&gt;
: Reopened this issue.

In response to this:

/reopen
/remove-lifecycle stale
/lifecycle frozen

Instructions for interacting with me using PR comments are available here.  If you have questions or suggestions related to my behavior, please file an issue against the kubernetes/test-infra repository.

		</comment>
		<comment id='10' author='yanniszark' date='2020-04-19T01:26:05Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
	</comments>
</bug>