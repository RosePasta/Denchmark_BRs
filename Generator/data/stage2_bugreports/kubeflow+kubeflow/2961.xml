<bug id='2961' author='JohnPaton' open_date='2019-04-08T13:11:13Z' closed_time='2019-09-03T01:50:21Z'>
	<summary>Jupyter Server Connect button leads to 404</summary>
	<description>
After creating a new notebook server, the routing doesn't seem to be working properly.
I have created a new notebook server under the kubeflow namespace:
&lt;denchmark-link:https://user-images.githubusercontent.com/18459252/55726265-a7ef5500-5a0f-11e9-9d78-9acc85d908b8.png&gt;&lt;/denchmark-link&gt;

When I click "Actions &gt; Connect", a new tab opens at https://kfapp.endpoints.&lt;project-id&gt;.cloud.goog/notebook/kubeflow/john-test4, but this gives a 404. In the logging on the Jupyter container I can see that I'm trying to access the route /notebook/kubeflow/john-test4:
&lt;denchmark-link:https://user-images.githubusercontent.com/18459252/55726475-251aca00-5a10-11e9-980d-4d8ce7333f3d.png&gt;&lt;/denchmark-link&gt;

Of course this is a 404 since that route should map to /tree on the Jupyter server, but this isn't happening.
The generated svc config is:
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name: notebook_kubeflow_john-test4_mapping
      prefix: /notebook/kubeflow/john-test4
      rewrite: /notebook/kubeflow/john-test4
      timeout_ms: 300000
      service: john-test4.kubeflow
      use_websocket: true
  creationTimestamp: 2019-04-08T12:51:22Z
  name: john-test4
  namespace: kubeflow
  ownerReferences:
  - apiVersion: kubeflow.org/v1alpha1
    blockOwnerDeletion: true
    controller: true
    kind: Notebook
    name: john-test4
    uid: 0359b576-59fd-11e9-ab0e-42010a8e0082
  resourceVersion: "2093285"
  selfLink: /api/v1/namespaces/kubeflow/services/john-test4
  uid: 035e2324-59fd-11e9-ab0e-42010a8e0082
spec:
  clusterIP: 10.31.247.78
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8888
  selector:
    statefulset: john-test4
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
My guess is that the rewrite in the Ambassador config should be /tree and not /notebook/kubeflow/john-test4 (as that doesn't do anything).
	</description>
	<comments>
		<comment id='1' author='JohnPaton' date='2019-04-08T13:11:14Z'>
		Issue-Label Bot is automatically applying the label bug to this issue, with a confidence of 0.58. Please mark this comment with üëç or üëé to give our bot feedback!
Links: &lt;denchmark-link:https://mlbot.net/data/kubeflow/kubeflow&gt;dashboard&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/apps/issue-label-bot&gt;app homepage&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/hamelsmu/MLapp&gt;code&lt;/denchmark-link&gt;
 for this bot.
		</comment>
		<comment id='2' author='JohnPaton' date='2019-04-08T13:28:50Z'>
		It looks like you are running an old version of the UI. Can you try the latest release candidate?
You need to wait for your Jupyter notebook to start. That could explain the 404. The older version of the UI you are using doesn't show the status of the notebook but the newer UI should.
		</comment>
		<comment id='3' author='JohnPaton' date='2019-04-08T13:31:27Z'>
		The server is started, I can use it if I forward the port. It's definitely the url mapping that's broken, else I wouldn't be getting 404s in my Jupyter server logs:
[W 13:02:22.269 NotebookApp] 404 GET /notebook/kubeflow/john-test4 (10.28.1.8) 2.47ms referer=https://kfapp.endpoints.ds-kubeflow-test.cloud.goog/jupyter/notebooks?namespace=kubeflow
&lt;denchmark-link:https://user-images.githubusercontent.com/18459252/55728800-1c78c280-5a15-11e9-9f3a-f5da377195d9.png&gt;&lt;/denchmark-link&gt;

Do you agree that this logging combined with these lines from the service's Ambassador config seem strange?
      prefix: /notebook/kubeflow/john-test4
      rewrite: /notebook/kubeflow/john-test4
I'll try to upgrade my UI. Is there a guide for bumping the version on an existing installation?
		</comment>
		<comment id='4' author='JohnPaton' date='2019-04-08T14:33:12Z'>
		Update: I have upgraded to &lt;denchmark-link:https://github.com/kubeflow/kubeflow/tree/v0.5.0-rc.3&gt;v0.5.0-rc.3&lt;/denchmark-link&gt;
. The situation is now significantly worse: I can't even spawn a new notebook server anymore. The "Spawn" button is now ing to a url that doesn't exist:
POST https://kfapp.endpoints.ds-kubeflow-test.cloud.goog/jupyter/post-notebook 404
&lt;denchmark-link:https://user-images.githubusercontent.com/18459252/55732236-f60a5580-5a1b-11e9-8a6b-d1d14ba022eb.png&gt;&lt;/denchmark-link&gt;

So after the update it is completely impossible to use Jupyter.
		</comment>
		<comment id='5' author='JohnPaton' date='2019-04-08T19:58:07Z'>
		I tried: v0-5-0-rc-3-2-g0515c92 and the notebook could be spawned correctly.
How are you connecting to Kubeflow? Are you connecting over the external endpoint?
&lt;denchmark-link:https://kfapp.endpoints.ds-kubeflow-test.cloud.goog&gt;https://kfapp.endpoints.ds-kubeflow-test.cloud.goog&lt;/denchmark-link&gt;

Or using kubectl port-forwrad?
Can you provide the sha of the Kubeflow docker image that you are using for the UI? (You can just post the output of kubectl get deploy -o yaml jupyter-web-app)?
		</comment>
		<comment id='6' author='JohnPaton' date='2019-04-09T08:21:23Z'>
		I am connecting through the external endpoint. Port forwarding works fine once a notebook server is spawned.
I left the cluster alone overnight and the "spawn" button works again - very mysterious. Probably just some syncing issues with Ambassador after doing the update. However, I'm now back to the original situation that the routing isn't working, so I still can't connect to the notebook server via the UI.
Notebook is created:
&lt;denchmark-link:https://user-images.githubusercontent.com/18459252/55784091-1f74c100-5ab0-11e9-848a-94906f12cdf8.png&gt;&lt;/denchmark-link&gt;

Clicking "Connect" leads to a 404:
&lt;denchmark-link:https://user-images.githubusercontent.com/18459252/55784107-2c91b000-5ab0-11e9-8c11-b49cafbda51c.png&gt;&lt;/denchmark-link&gt;

Matching 404 in the pod logs (yes the server has started):
$ kubectl logs -n kubeflow pod/john-test5-0
Executing the command: jupyter notebook
[...]
[W 08:09:46.580 NotebookApp] 404 GET /notebook/kubeflow/john-test5 (10.28.0.9) 23.46ms referer=https://kfapp.endpoints.ds-kubeflow-test.cloud.goog/jupyter/
[W 08:12:12.381 NotebookApp] 404 GET /notebook/kubeflow/john-test5 (10.28.0.10) 1.44ms referer=https://kfapp.endpoints.ds-kubeflow-test.cloud.goog/jupyter/
&lt;denchmark-link:https://user-images.githubusercontent.com/18459252/55784182-4d5a0580-5ab0-11e9-8fc6-39f007b1dc43.png&gt;&lt;/denchmark-link&gt;

Port forwarding works just fine:
$ kubectl port-forward pod/john-test5-0 -n kubeflow 8888
Forwarding from 127.0.0.1:8888 -&gt; 8888
Forwarding from [::1]:8888 -&gt; 8888
Handling connection for 8888
&lt;denchmark-link:https://user-images.githubusercontent.com/18459252/55784384-c22d3f80-5ab0-11e9-92a0-f4b6740e395c.png&gt;&lt;/denchmark-link&gt;


Can you provide the sha of the Kubeflow docker image that you are using for the UI? (You can just post the output of kubectl get deploy -o yaml jupyter-web-app)?

$ kubectl get deploy -o yaml jupyter-web-app
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    ksonnet.io/managed: '{"pristine":"H4sIAAAAAAAA/5SRzW8aMRDF7/0z3tnLbg65+IZaDlVLitKPSxVFgxmIi7/kj0UI+X+vDJRGbWiV03pn5jfvPfsACvobx6S9gwSFkPrxBgJb7VaQeMfB+L1llyFgOdOKMkEeYGjJJrUThQCJHyXsM8dux8uuVQS2yTvHeaJ9r7wN3rUlfw9WAUeWX1zRGimQat1tWfLa+F0DUmDVpCMHoxUlyBuBxIZV9rE1LGX19PE/FmsVyGyDocxH6BXx6jMXyrtM2nFMkN8PYDcev+dU958+PH6evb2ffXm8m85nEBjJlNZJrCLnLvptdyiJYwMqqrigX98/m17xmorJqA8C2tKm1TYqtuv9dTXdsZ66UJZGq/4Pz3IcJreTAWd8UYxZeKPVHhJTs6N9wj+eIviYT/kucRc+ZsjbYRiap9GbYnnuizvP2XZcUH6CRM9Z9cq7td78Fjn9dycQ9aFtSRxHrXiqVKPvrrk5MRc/a72ZU2hv8bL/7ixdr2vXWt/8BAAA//8BAAD//6M2dWgNAwAA"}'
    kubecfg.ksonnet.io/garbage-collect-tag: gc-tag
  creationTimestamp: 2019-04-08T15:20:29Z
  generation: 1
  labels:
    app: jupyter-web-app
    app.kubernetes.io/deploy-manager: ksonnet
    ksonnet.io/component: jupyter-web-app
  name: jupyter-web-app
  namespace: kubeflow
  resourceVersion: "21229"
  selfLink: /apis/extensions/v1beta1/namespaces/kubeflow/deployments/jupyter-web-app
  uid: d824cdc9-5a11-11e9-8805-42010a8e0111
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: jupyter-web-app
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: jupyter-web-app
    spec:
      containers:
      - env:
        - name: ROK_SECRET_NAME
          value: secret-rok-{username}
        - name: UI
          value: default
        image: gcr.io/kubeflow-images-public/jupyter-web-app:v0.5.0
        imagePullPolicy: Always
        name: jupyter-web-app
        ports:
        - containerPort: 5000
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: jupyter-web-app
      serviceAccountName: jupyter-web-app
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: jupyter-web-app-config
        name: config-volume
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: 2019-04-08T15:20:29Z
    lastUpdateTime: 2019-04-08T15:20:53Z
    message: ReplicaSet "jupyter-web-app-847f4f465c" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  - lastTransitionTime: 2019-04-08T16:35:12Z
    lastUpdateTime: 2019-04-08T16:35:12Z
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  observedGeneration: 1
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1
		</comment>
		<comment id='7' author='JohnPaton' date='2019-04-11T21:56:48Z'>
		&lt;denchmark-link:https://github.com/JohnPaton&gt;@JohnPaton&lt;/denchmark-link&gt;
 (I'm taking wild guess here) I think the issue is with your Notebook's Image. I see it is a custom one.
For 0.5 we have changed the images of the Notebooks. The important change here is that in the new &lt;denchmark-link:https://github.com/kubeflow/kubeflow/blob/master/components/tensorflow-notebook-image/Dockerfile&gt;images&lt;/denchmark-link&gt;
, we set the  flag in the entrypoint in order for the Notebook to respond to data it receives under the prefix ( in this case).
The previous images from 0.4 were not setting this flag themselves. So if your custom image is build from 0.4 then the traffic gets routed to it with the prefix, but since base_url isn't set properly it expects the traffic to be under / and not under /notebook/kubeflow/john-test5. Hence the 404.
As a first step could you launch a Notebook with an image from 0.5 from the UI's dropdown list? If this works then could you rebuild your custom image based from a version from 0.5 and give it another spin?
		</comment>
		<comment id='8' author='JohnPaton' date='2019-04-12T12:30:27Z'>
		Hi &lt;denchmark-link:https://github.com/kimwnasptd&gt;@kimwnasptd&lt;/denchmark-link&gt;
, thanks so much for looking into this with me.
Ah, this is very interesting. Since custom images are supported I just assumed that the most standard images of all, the &lt;denchmark-link:https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html&gt;Jupyter Stacks&lt;/denchmark-link&gt;
 images, would be supported, but that's apparently not the case. I should have noticed this in the &lt;denchmark-link:https://www.kubeflow.org/docs/components/jupyter/#creating-a-custom-jupyter-image&gt;docs&lt;/denchmark-link&gt;
.
Confirmed that the provided images are working, and I will update in once my docker push is done whether the Jupyter Stacks image with a custom CMD works as well.
As a side note, I feel like from a user perspective it would be nice to provide the ability to enter a custom CMD instead of whatever the image's default is. That way these nice prepackaged images from Project Jupyter and others could be used out of the box, instead of users having to host our own versions with only a different CMD. It could be another field in the New Notebook Server form, pre-filled with the standard recommendation from the docs. Then that command would be executed in the container instead of whatever the image was built with. If the CMD is supported by an existing public image (which it should be, since it's just standard Jupyter functionality) then the url mapping and everything else will "just work"‚Ñ¢Ô∏è. And if it's not supported then at least the pod logs will show useful output and the user will be alerted by the pod entering a crash loop. This would also have the added benefit of allowing users to choose for JupyterLab in containers that have it installed, directly from the form.
Thoughts?
		</comment>
		<comment id='9' author='JohnPaton' date='2019-05-29T01:01:04Z'>
		I just encountered a similar problem using Kubeflow v0.5.1.
In my case, the problem seemed like that:

The svc is correctly created. It has annotations for Ambassador routing.
But Ambassador does not seem to update routing information.
So the web UI gives 404
I was using kubeflow v0.5.1, Ambassador 0.37.0 in GKE cluster

The following operation solved the problem.
kubectl delete pods -l service=ambassador
It deletes all Ambassador pods. Then wait until the new pods are available.
I guess the problem is related to the issue &lt;denchmark-link:https://github.com/datawire/ambassador/issues/1039&gt;datawire/ambassador#1039&lt;/denchmark-link&gt;
. If so, we can solve the problem with newer versions of Ambassador (0.50 or later).
		</comment>
		<comment id='10' author='JohnPaton' date='2019-08-27T01:35:29Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
	</comments>
</bug>