<bug id='4757' author='zhenghuiwang' open_date='2020-02-11T23:25:07Z' closed_time='2020-09-26T03:21:58Z'>
	<summary>Notebook ReadWriteMany PVC option doesn't work</summary>
	<description>
/kind bug
What steps did you take and what happened:
[A clear and concise description of what the bug is.]
I'm trying gh-summarization-issue example for KF v1.0-rc4 with gcp_iap_v1.0.0.yaml.
&lt;denchmark-link:https://github.com/kubeflow/examples/blob/master/github_issue_summarization/02_distributed_training.md&gt;Distributed training needs ReadWriteMany PVC&lt;/denchmark-link&gt;
 The notebook UI supports creating ReadWriteMany volume directly but it failed with this message:
&lt;denchmark-code&gt;Name:          gh-issue-sumarization-vol
Namespace:     kubeflow-zhenghui
StorageClass:  standard
Status:        Pending
Volume:        
Labels:        &lt;none&gt;
Annotations:   volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/gce-pd
Finalizers:    [kubernetes.io/pvc-protection]
Capacity:      
Access Modes:  
VolumeMode:    Filesystem
Events:
  Type       Reason              Age                  From                         Message
  ----       ------              ----                 ----                         -------
  Warning    ProvisioningFailed  34s (x9 over 4m17s)  persistentvolume-controller  Failed to provision volume with StorageClass "standard": invalid AccessModes [ReadWriteMany]: only AccessModes [ReadWriteOnce ReadOnlyMany] are supported
Mounted By:  gh-issue-sumarization-0
&lt;/denchmark-code&gt;

What did you expect to happen:
The volume should be created. (Or there is no such option and users can create one using kubectl)
Anything else you would like to add:
[Miscellaneous information that will assist in solving the issue.]
Environment:

Kubeflow version: (version number can be found at the bottom left corner of the Kubeflow dashboard):
kfctl version: (use kfctl version): v1.0-rc4
Kubernetes platform: (e.g. minikube): GCP
Kubernetes version: (use kubectl version):
OS (e.g. from /etc/os-release): MacOS

	</description>
	<comments>
		<comment id='1' author='zhenghuiwang' date='2020-02-11T23:25:22Z'>
		Issue-Label Bot is automatically applying the labels:



Label
Probability




kind/bug
0.98



Please mark this comment with  or  to give our bot feedback!
Links: &lt;denchmark-link:https://github.com/marketplace/issue-label-bot&gt;app homepage&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/marketplace/issue-label-botdata/kubeflow/kubeflow&gt;dashboard&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/hamelsmu/MLapp&gt;code&lt;/denchmark-link&gt;
 for this bot.
		</comment>
		<comment id='2' author='zhenghuiwang' date='2020-02-11T23:27:31Z'>
		&lt;denchmark-link:https://user-images.githubusercontent.com/8263977/74289082-fa119e80-4ce2-11ea-8bc1-e11fc2d2ae5e.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='zhenghuiwang' date='2020-02-13T14:16:21Z'>
		I think there are two separate issues here

The Jupyter web app should not let people mount volumes with ReadWriteMany if that is not supported
Telling people how to run GitHub issue summarization with distributed training

Lets use this option to track the first and use a separate issue for GH issue summarization.
Can the UI query the APIServer to determine what modes a PVC supports? When creating a New volume we are relying on the default storage class. Its not clear that this information is available progrmatically. Here's the storage class for GCP pd.
&lt;denchmark-code&gt;allowVolumeExpansion: true
  apiVersion: storage.k8s.io/v1
  kind: StorageClass
  metadata:
    annotations:
      storageclass.kubernetes.io/is-default-class: "true"
    creationTimestamp: "2020-02-10T19:08:22Z"
    labels:
      addonmanager.kubernetes.io/mode: EnsureExists
      kubernetes.io/cluster-service: "true"
    name: standard
    resourceVersion: "308"
    selfLink: /apis/storage.k8s.io/v1/storageclasses/standard
    uid: b4cf6885-4c38-11ea-86b4-42010a8e01a3
  parameters:
    type: pd-standard
  provisioner: kubernetes.io/gce-pd
  reclaimPolicy: Delete
  volumeBindingMode: Immediate
&lt;/denchmark-code&gt;

Does pd-standard imply that it should only be read write once?
One option would be to map known provisioner types to the mode?
		</comment>
		<comment id='4' author='zhenghuiwang' date='2020-02-13T14:36:55Z'>
		&lt;denchmark-link:https://github.com/kubeflow/examples/issues/734&gt;kubeflow/examples/issues/734&lt;/denchmark-link&gt;
 for GitHub Issue Summarization example
		</comment>
		<comment id='5' author='zhenghuiwang' date='2020-05-13T16:27:09Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='6' author='zhenghuiwang' date='2020-05-18T13:22:08Z'>
		&lt;denchmark-link:https://github.com/kimwnasptd&gt;@kimwnasptd&lt;/denchmark-link&gt;
 WDYT?
		</comment>
		<comment id='7' author='zhenghuiwang' date='2020-06-15T17:54:31Z'>
		ping &lt;denchmark-link:https://github.com/kimwnasptd&gt;@kimwnasptd&lt;/denchmark-link&gt;
  ?
Removing from KF 1.1 because it looks like no one is working on this so I don't think its going to get fixed.
		</comment>
		<comment id='8' author='zhenghuiwang' date='2020-06-17T18:01:59Z'>
		&lt;denchmark-link:https://github.com/jlewi&gt;@jlewi&lt;/denchmark-link&gt;
 forgot to reply to this one,
From what I know, the approach to permit users to create PVCs with a mode that is not supported from a storage class (the default with current JWA) is not feasible. Since with the current k8s API we don't have a way to deduce what access modes a storage class supports.
What I would propose would be the following:

Allow users to select the storage class for their PVCs in JWA
Make sure to always surface Notebook errors with JWA

So if a PVC would not be created then users will see that from the UI and use a proper StorageClass.
&lt;denchmark-link:https://github.com/jlewi&gt;@jlewi&lt;/denchmark-link&gt;
 WDYT?
		</comment>
		<comment id='9' author='zhenghuiwang' date='2020-06-18T21:27:58Z'>
		LGTM
		</comment>
		<comment id='10' author='zhenghuiwang' date='2020-09-17T04:34:10Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
	</comments>
</bug>