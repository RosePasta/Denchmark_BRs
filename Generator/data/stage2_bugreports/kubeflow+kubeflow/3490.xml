<bug id='3490' author='yanniszark' open_date='2019-06-18T17:15:44Z' closed_time='2020-05-03T01:25:25Z'>
	<summary>kfctl: kustomize: patchesStrategicMerge fails if filename of patch doesn't equal original filename</summary>
	<description>
In order to make kustomize more flexible, &lt;denchmark-link:https://github.com/kkasravi&gt;@kkasravi&lt;/denchmark-link&gt;
 added functionality to  that merges 1+ overlays like mixins.
However, it seems that it doesn't handle  correctly.
More specifically, it contains the implicit assumption that filenames in the  field will match filenames in the base directory.
This has caused errors in the CI:
&lt;denchmark-code&gt;util.py                     71 INFO     couldn't generate KfApp:  (kubeflow.error): Code 500 with message: kfApp Generate failed for kustomize: kustomize generate failed Error
:  (kubeflow.error): Code 500 with message: error generating kustomization for pipeline/minio Error open /mnt/test-data-volume/kubeflow-presubmit-kfctl-go-basic-auth-3470-34f0
d8e-7792-a3e8/kfctl-a3e8/.cache/manifests/master/pipeline/minio/base/persistent-volume-claim-patch.yaml: no such file or directory
generated xml file: /mnt/test-data-volume/kubeflow-presubmit-kfctl-go-basic-auth-3470-34f0d8e-7792-a3e8/output/artifacts/junit_kfctl-build-testbasic-auth-istio.xml
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/kkasravi&gt;@kkasravi&lt;/denchmark-link&gt;
 it seems this certain piece of code is for the case where we are looking at a KfDef file.
Can you please help in fixing this?
cc &lt;denchmark-link:https://github.com/jlewi&gt;@jlewi&lt;/denchmark-link&gt;
 for the ksonnet-turndown



kubeflow/bootstrap/v2/pkg/kfapp/kustomize/kustomize.go


        Lines 1005 to 1008
      in
      24c39e3






 if len(kustomization.PatchesStrategicMerge) &gt; 0 { 



 basename := filepath.Base(string(kustomization.PatchesStrategicMerge[0])) 



 basefile := filepath.Join(compDir, "base", basename) 



 def, err := ReadUnstructured(basefile) 





	</description>
	<comments>
		<comment id='1' author='yanniszark' date='2019-06-18T17:15:48Z'>
		Issue-Label Bot is automatically applying the label kind/bug to this issue, with a confidence of 0.94. Please mark this comment with üëç or üëé to give our bot feedback!
Links: &lt;denchmark-link:https://github.com/marketplace/issue-label-bot&gt;app homepage&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://mlbot.net/data/kubeflow/kubeflow&gt;dashboard&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/hamelsmu/MLapp&gt;code&lt;/denchmark-link&gt;
 for this bot.
		</comment>
		<comment id='2' author='yanniszark' date='2019-06-18T23:37:43Z'>
		/assign &lt;denchmark-link:https://github.com/kkasravi&gt;@kkasravi&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='yanniszark' date='2019-09-16T23:47:29Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='4' author='yanniszark' date='2019-09-18T13:04:01Z'>
		&lt;denchmark-link:https://github.com/kkasravi&gt;@kkasravi&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/jbrette&gt;@jbrette&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/yanniszark&gt;@yanniszark&lt;/denchmark-link&gt;
 is this issue still relevant? Will the move to kustomize 3 impact this?
		</comment>
		<comment id='5' author='yanniszark' date='2019-09-18T13:08:36Z'>
		
@kkasravi @jbrette @yanniszark is this issue still relevant? Will the move to kustomize 3 impact this?

it should be fixed - the move to kustomize3 won't impact this
		</comment>
		<comment id='6' author='yanniszark' date='2019-09-18T14:21:35Z'>
		&lt;denchmark-link:https://github.com/kkasravi&gt;@kkasravi&lt;/denchmark-link&gt;
 what version should I check in order to confirm that it is fixed?
Is the fix in master right now?
		</comment>
		<comment id='7' author='yanniszark' date='2019-09-18T20:33:19Z'>
		my bad - yannis - I meant I should fix this bug, not that I fixed the bug
		</comment>
		<comment id='8' author='yanniszark' date='2019-12-25T06:00:03Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='9' author='yanniszark' date='2019-12-25T11:30:09Z'>
		/reopen
/remove-lifecycle stale
/lifecycle frozen
&lt;denchmark-link:https://github.com/kkasravi&gt;@kkasravi&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/gabrielwen&gt;@gabrielwen&lt;/denchmark-link&gt;
 any updates on this?
		</comment>
		<comment id='10' author='yanniszark' date='2020-01-06T23:47:25Z'>
		Does kustomize now have the ability to support multiple overlays?
How is what we need different from &lt;denchmark-link:https://github.com/kubernetes-sigs/kustomize/issues/171&gt;kubernetes-sigs/kustomize#171&lt;/denchmark-link&gt;
 which says multiple overlays are supported?
There's also &lt;denchmark-link:https://github.com/kubernetes-sigs/kustomize/issues/1251&gt;kubernetes-sigs/kustomize#1251&lt;/denchmark-link&gt;
 about diamond patterns
		</comment>
		<comment id='11' author='yanniszark' date='2020-01-07T16:31:45Z'>
		&lt;denchmark-link:https://github.com/jlewi&gt;@jlewi&lt;/denchmark-link&gt;
 kustomize doesn't support multiple overlays as seen in the composition pattern.
This is why we opened &lt;denchmark-link:https://github.com/kubernetes-sigs/kustomize/issues/1251&gt;kubernetes-sigs/kustomize#1251&lt;/denchmark-link&gt;
 and we have seen some great developments. Would be great if folks from the Kubeflow community would also push for it.
/cc &lt;denchmark-link:https://github.com/apyrgio&gt;@apyrgio&lt;/denchmark-link&gt;

This issue is about a bug in the current implementation of kfctl that composes a new kustomization to get around this issue.
We should test to see if this issue still exists.
		</comment>
		<comment id='12' author='yanniszark' date='2020-01-28T18:43:04Z'>
		Should we just refactor our kustomize packages to not depend on combining overlays like mixins/diamond pattern?
I believe kustomize supports the case where an overlay references another overlay.
Right now most of our applications have two overlays istio and application both of which are
referencing base.
But we could restructure this as
base -&gt; istio -&gt; application
Which I believe is supported by kustomize &lt;denchmark-link:https://github.com/kubernetes-sigs/kustomize/issues/171&gt;kubernetes-sigs/kustomize#171&lt;/denchmark-link&gt;

Related thread: &lt;denchmark-link:https://groups.google.com/forum/m/#!topic/kubeflow-discuss/qH56Yoz4SoE&gt;https://groups.google.com/forum/m/#!topic/kubeflow-discuss/qH56Yoz4SoE&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='yanniszark' date='2020-01-31T21:31:36Z'>
		If we "hardwire" overlays, don't we also enforce their usage?
Currently overlays are optional (I can skip istio by omitting the overlay) and this allows a lot of flexibility in deployment configurations. For instance, metadata db is installed as an overlay; if I want to use an existing database I can skip this overlay altogether. Same with istio; I haven't tried it but I suppose I can still use an alternative.
		</comment>
		<comment id='14' author='yanniszark' date='2020-05-03T01:25:25Z'>
		i'm closing this issue because I think the path forward is to remove the kustomization magic as noted in &lt;denchmark-link:https://github.com/kubeflow/manifests/issues/774&gt;kubeflow/manifests#774&lt;/denchmark-link&gt;
.
&lt;denchmark-link:https://github.com/xaniasd&gt;@xaniasd&lt;/denchmark-link&gt;
 you can still optionally use overlays. This functionality is provided by kustomize. So you would just use kustomize rather than relying on kfctl to dynamically generate kustomization.yaml files.
		</comment>
	</comments>
</bug>