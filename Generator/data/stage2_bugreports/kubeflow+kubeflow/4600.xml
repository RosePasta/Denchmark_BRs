<bug id='4600' author='jazzsir' open_date='2019-12-25T14:13:29Z' closed_time='2020-04-02T06:39:05Z'>
	<summary>Unable to apply a insecure registry for fairing</summary>
	<description>
/kind bug
What steps did you take and what happened:
To apply a private registry (self-signed), I pursued procedures below, but as No.8 I got some errors.

Deployed a registry with basic authentication on the node where k8s deployed
Added the self-signed certificate to the node's trusted CA repository.
: update-ca-certificates
Logged in the registry
Created and patched a secret and serviceaccounts

&lt;denchmark-code&gt;$ kubectl create secret generic regcred --from-file=.dockerconfigjson=/home/test/.docker/config.json --type=kubernetes.io/dockerconfigjson -n test
$ kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "regcred"}]}' -n test
$ kubectl patch serviceaccount default-editor -p '{"imagePullSecrets": [{"name": "regcred"}]}' -n test
$ kubectl patch serviceaccount default-viewer -p '{"imagePullSecrets": [{"name": "regcred"}]}' -n test
&lt;/denchmark-code&gt;


Copied .docker/config.json into a nodebook container
Added the self-signed certificate to the notebook container's trusted CA repository by logging in as root.
: update-ca-certificates
Ran codes (https://github.com/mojokb/handson-kubeflow/blob/master/fairing)

&lt;denchmark-code&gt;import os
import tensorflow as tf

from kubeflow import fairing
DOCKER_REGISTRY = 'registry.local:5000'
fairing.config.set_builder(
    'append',
    base_image='gcr.io/kubeflow-images-public/tensorflow-2.0.0a0-notebook-cpu:v0.7.0',
    registry=DOCKER_REGISTRY,
    push=True)
fairing.config.set_deployer('job',
                            namespace='test')

def train():
    tf.print(tf.constant(os.environ['HOSTNAME']))

if __name__ == '__main__':
    train()
    remote_train = fairing.config.fn(train)
    remote_train()
&lt;/denchmark-code&gt;


But finally got some errors as below

&lt;denchmark-code&gt;[I 191225 13:41:49 config:123] Using preprocessor: &lt;kubeflow.fairing.preprocessors.function.FunctionPreProcessor object at 0x7f160709d668&gt;
[I 191225 13:41:49 config:125] Using builder: &lt;kubeflow.fairing.builders.append.append.AppendBuilder object at 0x7f15e6edd668&gt;
[I 191225 13:41:49 config:127] Using deployer: &lt;kubeflow.fairing.builders.append.append.AppendBuilder object at 0x7f15e6edd668&gt;
[W 191225 13:41:49 append:50] Building image using Append builder...
[I 191225 13:41:49 base:105] Creating docker context: /tmp/fairing_context_2__tnlze
[W 191225 13:41:49 base:92] /usr/local/lib/python3.6/dist-packages/kubeflow/fairing/__init__.py already exists in Fairing context, skipping...
[I 191225 13:41:49 docker_creds_:234] Loading Docker credentials for repository 'gcr.io/kubeflow-images-public/tensorflow-2.0.0a0-notebook-gpu:v0.7.0'
remote train()
[W 191225 13:41:50 append:54] Image successfully built in 1.046835118000672s.
[W 191225 13:41:50 append:94] Pushing image registry.local:5000/fairing-job:F83C1076...
[I 191225 13:41:50 docker_creds_:234] Loading Docker credentials for repository 'registry.local:5000/fairing-job:F83C1076'
---------------------------------------------------------------------------
BadStatusLine                             Traceback (most recent call last)
&lt;ipython-input-5-59ee91d83500&gt; in &lt;module&gt;
     22     print('remote train()')
     23     remote_train = fairing.config.fn(train)
---&gt; 24     remote_train()

/usr/local/lib/python3.6/dist-packages/kubeflow/fairing/config.py in ret_fn()
    150             """ return the function"""
    151             self.set_preprocessor('function', function_obj=fn)
--&gt; 152             self.run()
    153         return ret_fn
    154 

/usr/local/lib/python3.6/dist-packages/kubeflow/fairing/config.py in run(self)
    127         logging.info("Using deployer: %s", builder)
    128 
--&gt; 129         builder.build()
    130         pod_spec = builder.generate_pod_spec()
    131         deployer.deploy(pod_spec)

/usr/local/lib/python3.6/dist-packages/kubeflow/fairing/builders/append/append.py in build(self)
     56             self.full_image_name(self.context_hash), strict=False)
     57         if self.push:
---&gt; 58             self.timed_push(transport, src, new_img, dst)
     59         else:
     60             # TODO(r2d4):

/usr/local/lib/python3.6/dist-packages/kubeflow/fairing/builders/append/append.py in timed_push(self, transport, src, img, dst)
     94         logger.warning("Pushing image {}...".format(self.image_tag))
     95         start = timer()
---&gt; 96         self._push(transport, src, img, dst)
     97         end = timer()
     98         logger.warning(

/usr/local/lib/python3.6/dist-packages/kubeflow/fairing/builders/append/append.py in _push(self, transport, src, img, dst)
     78         creds = docker_creds.DefaultKeychain.Resolve(dst)
     79         with docker_session.Push(dst, creds, transport,
---&gt; 80                                  mount=[src.as_repository()]) as session:
     81             logger.warning("Uploading {}".format(self.image_tag))
     82             session.upload(img)

/usr/local/lib/python3.6/dist-packages/containerregistry/client/v2_2/docker_session_.py in __init__(self, name, creds, transport, mount, threads)
     68     self._name = name
     69     self._transport = docker_http.Transport(name, creds, transport,
---&gt; 70                                             docker_http.PUSH)
     71     self._mount = mount
     72     self._threads = threads

/usr/local/lib/python3.6/dist-packages/containerregistry/client/v2_2/docker_http_.py in __init__(self, name, creds, transport, action)
    204     # Ping once to establish realm, and then get a good credential
    205     # for use with this transport.
--&gt; 206     self._Ping()
    207     if self._authentication == _BEARER:
    208       self._Refresh()

/usr/local/lib/python3.6/dist-packages/containerregistry/client/v2_2/docker_http_.py in _Ping(self)
    230         'GET',
    231         body=None,
--&gt; 232         headers=headers)
    233 
    234     # We expect a www-authenticate challenge.

/usr/local/lib/python3.6/dist-packages/containerregistry/transport/transport_pool_.py in request(self, *args, **kwargs)
     59     transport = self._get_transport()
     60     try:
---&gt; 61       return transport.request(*args, **kwargs)
     62     finally:
     63       self._return_transport(transport)

/usr/local/lib/python3.6/dist-packages/httplib2/__init__.py in request(self, uri, method, body, headers, redirections, connection_type)
   1955                         headers,
   1956                         redirections,
-&gt; 1957                         cachekey,
   1958                     )
   1959         except Exception as e:

/usr/local/lib/python3.6/dist-packages/httplib2/__init__.py in _request(self, conn, host, absolute_uri, request_uri, method, body, headers, redirections, cachekey)
   1620 
   1621         (response, content) = self._conn_request(
-&gt; 1622             conn, request_uri, method, body, headers
   1623         )
   1624 

/usr/local/lib/python3.6/dist-packages/httplib2/__init__.py in _conn_request(self, conn, request_uri, method, body, headers)
   1558                 pass
   1559             try:
-&gt; 1560                 response = conn.getresponse()
   1561             except (http.client.BadStatusLine, http.client.ResponseNotReady):
   1562                 # If we get a BadStatusLine on the first try then that means

/usr/lib/python3.6/http/client.py in getresponse(self)
   1329         try:
   1330             try:
-&gt; 1331                 response.begin()
   1332             except ConnectionError:
   1333                 self.close()

/usr/lib/python3.6/http/client.py in begin(self)
    295         # read until we get a non-100 response
    296         while True:
--&gt; 297             version, status, reason = self._read_status()
    298             if status != CONTINUE:
    299                 break

/usr/lib/python3.6/http/client.py in _read_status(self)
    277         if not version.startswith("HTTP/"):
    278             self._close_conn()
--&gt; 279             raise BadStatusLine(line)
    280 
    281         # The status code is a three-digit number

BadStatusLine: �����
&lt;/denchmark-code&gt;

What did you expect to happen:
Pushing a built image to the registry
Environment:

registry version : 2.7
Kubeflow version: 0.7.0
kfctl version: 0.7.0
Kubernetes platform: kubeADM
Kubernetes version: 1.15.5 (Standalone)
OS (e.g. from /etc/os-release): Ubuntu 18.04.3 LTS

	</description>
	<comments>
		<comment id='1' author='jazzsir' date='2019-12-25T14:13:52Z'>
		Issue Label Bot is not confident enough to auto-label this issue.
See &lt;denchmark-link:https://mlbot.net/data/kubeflow/kubeflow&gt;dashboard&lt;/denchmark-link&gt;
 for more details.
		</comment>
		<comment id='2' author='jazzsir' date='2019-12-27T05:13:31Z'>
		It looks like you are using the append builder. Its possible the append builder is not compatible with your registry. You might want to try the kaniko builder.
		</comment>
		<comment id='3' author='jazzsir' date='2020-03-26T06:37:28Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
	</comments>
</bug>