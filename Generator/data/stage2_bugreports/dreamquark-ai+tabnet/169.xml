<bug id='169' author='aishwarya-agrawal' open_date='2020-08-28T12:43:01Z' closed_time='2020-08-28T19:23:39Z'>
	<summary>TabNet for MultiLabel classification</summary>
	<description>
Describe the bug
Hi, I am trying to use this implementation of TabNet for building a model with 20k features and 88 target classes. All one hot encoded.
What is the current behavior?
When I try to pass the same data to model.fit I get following error
&lt;denchmark-code&gt;TypeError                                 Traceback (most recent call last)
&lt;ipython-input-219-976344abca0e&gt; in &lt;module&gt;
----&gt; 1 clf.fit(X_train[x_cols].values, y_train.values, X_valid[x_cols], y_valid.values)

~/anaconda3/envs/tabnet/lib/python3.6/site-packages/pytorch_tabnet/tab_model.py in fit(self, X_train, y_train, X_valid, y_valid, loss_fn, weights, max_epochs, patience, batch_size, virtual_batch_size, num_workers, drop_last)
    168         self.update_fit_params(X_train, y_train, X_valid, y_valid, loss_fn,
    169                                weights, max_epochs, patience, batch_size,
--&gt; 170                                virtual_batch_size, num_workers, drop_last)
    171 
    172         train_dataloader, valid_dataloader = self.construct_loaders(X_train,

~/anaconda3/envs/tabnet/lib/python3.6/site-packages/pytorch_tabnet/tab_model.py in update_fit_params(self, X_train, y_train, X_valid, y_valid, loss_fn, weights, max_epochs, patience, batch_size, virtual_batch_size, num_workers, drop_last)
    572         self.input_dim = X_train.shape[1]
    573 
--&gt; 574         output_dim, train_labels = self.infer_output_dim(y_train, y_valid)
    575         self.output_dim = output_dim
    576         self.classes_ = train_labels

~/anaconda3/envs/tabnet/lib/python3.6/site-packages/pytorch_tabnet/tab_model.py in infer_output_dim(self, y_train, y_valid)
    508                 Sorted list of initial classes
    509         """
--&gt; 510         train_labels = unique_labels(y_train)
    511         output_dim = len(train_labels)
    512 

~/anaconda3/envs/tabnet/lib/python3.6/site-packages/pytorch_tabnet/multiclass_utils.py in unique_labels(*ys)
    124         raise ValueError("Unknown label type: %s" % repr(ys))
    125 
--&gt; 126     ys_labels = set(chain.from_iterable(_unique_labels(y) for y in ys))
    127 
    128     # Check that we don't mix string type with number type

TypeError: 'NoneType' object is not iterable
&lt;/denchmark-code&gt;

If the current behavior is a bug, please provide the steps to reproduce.
For this I am using a simple dataset as mentioned before with 20k features and 88 targets, all 1 hot encoded.

where
&lt;denchmark-link:https://user-images.githubusercontent.com/20723123/91561455-45c32700-e959-11ea-9ff5-18cf09460cd8.png&gt;&lt;/denchmark-link&gt;

and
&lt;denchmark-link:https://user-images.githubusercontent.com/20723123/91561467-4c519e80-e959-11ea-92ee-d9e216b37c96.png&gt;&lt;/denchmark-link&gt;

I tried tracing it to multiclass_utils where this error is coming but not able to understand where I am wrong. Can you please help me in understanding if the input format is wrong or some other mistake I might be doing while trying this out.
Also it works when I am using just one target out of 88
Expected behavior
Screenshots
Other relevant information:
poetry version:
python version:
Operating System:
Additional tools:
Additional context
	</description>
	<comments>
		<comment id='1' author='aishwarya-agrawal' date='2020-08-28T12:48:31Z'>
		Hi,
Tabnet follows scikit-learn paradigm : for multi-class classification you should not one hot encode your targets. You do not need to explicitly name your target 0, 1, 2, ..., 87 Tabnet will do this for you so you just need to provide Y such that Y.shape = (n_examples, 1) you could label encode your targets or just convert them to strings from OHE it should work.
Let me know if you still have a problem after switching to label encoded targets.
		</comment>
		<comment id='2' author='aishwarya-agrawal' date='2020-08-28T12:57:21Z'>
		Thing is it is multi-label classification, so a single row is mapped to multiple targets, that's why the one hot encoded thing.
		</comment>
		<comment id='3' author='aishwarya-agrawal' date='2020-08-28T12:59:55Z'>
		well then you should probably use TabNetRegressor instead of TabNetClassifier, Tabnet allows you to do multi output regression so everything should run just fine, you'll just have to do a bit of post processing in the end to set thresholds.
Please let me know if this worked for you!
		</comment>
		<comment id='4' author='aishwarya-agrawal' date='2020-08-28T13:01:16Z'>
		Cool, I'll try that. Thank you so much!
		</comment>
		<comment id='5' author='aishwarya-agrawal' date='2020-08-28T15:28:54Z'>
		yes, Regressor worked!
		</comment>
		<comment id='6' author='aishwarya-agrawal' date='2020-08-28T19:23:02Z'>
		Cool, let us know if you had good results using Tabnet! Always cheerful when someone does!
		</comment>
		<comment id='7' author='aishwarya-agrawal' date='2020-09-19T08:25:46Z'>
		&lt;denchmark-link:https://github.com/aishwarya-agrawal&gt;@aishwarya-agrawal&lt;/denchmark-link&gt;
 new TabNetMultiTaskClassification is out (in develop branch) check it out
		</comment>
		<comment id='8' author='aishwarya-agrawal' date='2020-09-24T04:30:16Z'>
		Awesome!
		</comment>
	</comments>
</bug>