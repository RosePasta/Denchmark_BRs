<bug id='173' author='ruimashita' open_date='2019-02-27T18:52:07Z' closed_time='2019-06-13T07:57:04Z'>
	<summary>Concat network compile error by invalid type</summary>
	<description>
When run make lm_x86 in generated project with double concat network, the error comes.
&lt;denchmark-code&gt;...
g++ -I./include -O3 -std=c++0x -DUSE_PNG -pthread -g -c mains/main.cpp -o mains/main.o -DFUNC_TIME_MEASUREMENT
src/network.cpp: In member function ‘bool Network::run(float*, float*)’:
src/network.cpp:312:106: error: cannot convert ‘float*’ to ‘uint8_t* {aka unsigned char*}’ in initialization
   QUANTIZED_NOT_PACKED *second_concat_inputs[] = { first_QTZ_linear_mid_tread_half, second_conv2d_Conv2D };
                                                                                                          ^
src/network.cpp:351:86: error: cannot convert ‘float*’ to ‘uint8_t* {aka unsigned char*}’ in initialization
   QUANTIZED_NOT_PACKED *third_concat_inputs[] = { second_concat, third_conv2d_Conv2D };
                                                                                      ^
src/network.cpp:371:96: error: cannot convert ‘uint8_t* {aka unsigned char*}’ to ‘T_FLOAT* {aka float*}’ for argument ‘1’ to ‘void func_Conv2D(T_FLOAT*, T_FLOAT*, T_FLOAT*, convolution_parameters, T_UINT, T_UINT, T_UINT)’
 func_Conv2D(third_concat, fourth_conv2d_kernel, fourth_conv2d_Conv2D, Conv2D_struct, 32, 32, 10);

Makefile:231: recipe for target 'src/network.o' failed
make: *** [src/network.o] Error 1
make: *** Waiting for unfinished jobs....
...
&lt;/denchmark-code&gt;

git branch: &lt;denchmark-link:https://github.com/ruimashita/blueoil/tree/double_concat&gt;https://github.com/ruimashita/blueoil/tree/double_concat&lt;/denchmark-link&gt;

network file: &lt;denchmark-link:https://github.com/ruimashita/blueoil/blob/double_concat/lmnet/lmnet/networks/classification/double_concat.py&gt;https://github.com/ruimashita/blueoil/blob/double_concat/lmnet/lmnet/networks/classification/double_concat.py&lt;/denchmark-link&gt;

config file: &lt;denchmark-link:https://github.com/ruimashita/blueoil/blob/double_concat/lmnet/configs/double_concat.py&gt;https://github.com/ruimashita/blueoil/blob/double_concat/lmnet/configs/double_concat.py&lt;/denchmark-link&gt;

part of generated network.cpp:
&lt;denchmark-code&gt;  float *second_conv2d_Conv2D = first_conv2d_Conv2D;

                    Conv2D_struct.input_height = 32;
                    Conv2D_struct.input_width = 32;
                    Conv2D_struct.kernel_height = 3;
                    Conv2D_struct.kernel_width = 3;
                    Conv2D_struct.kernel_depth = 32;
                    Conv2D_struct.kernel_elements = 288;
                    Conv2D_struct.output_channels = 32;
                    Conv2D_struct.output_height = 32;
                    Conv2D_struct.output_width = 32;
                    Conv2D_struct.padding = 1;
                    Conv2D_struct.stride_along_height = 1;
                    Conv2D_struct.stride_along_width = 1;

                    binConv2D_struct.normal_conv_params = Conv2D_struct;
                    binConv2D_struct.bin_input_extra_bits = 0;
                    binConv2D_struct.bin_input_bitwidth = 2;
                    binConv2D_struct.bin_kernel_ndata = 9;
                    binConv2D_struct.bin_input_nwords = 9;
                    binConv2D_struct.bin_input_ndata = 9*2;
                    binConv2D_struct.device_input_buf = device_input_buf;
                    binConv2D_struct.device_output_buf = device_output_buf;
                    binConv2D_struct.thresholds = second_conv2d_Conv2D_thresholds;
                    binConv2D_struct.n_bit = 2;
                    binConv2D_struct.max_value = 2.0;

                    func_QuantizedConv2DWithThreshold(first_QTZ_linear_mid_tread_half, second_conv2d_kernel_1_QTZ_binary_channel_wise_mean_scaling_new, second_conv2d_Conv2D, scaling_factors::second_conv2d_Conv2D, binConv2D_struct);

  

  
  QUANTIZED_NOT_PACKED *second_concat_inputs[] = { first_QTZ_linear_mid_tread_half, second_conv2d_Conv2D };
T_UINT second_concat_inputs_depth[] = { 32, 32 };
func_ConcatOnDepth(second_concat_inputs, second_concat_inputs_depth, 2, second_concat, 32, 32, 64);
&lt;/denchmark-code&gt;

part of double concat network:
&lt;denchmark-code&gt;    def base(self, images, is_training, *args, **kwargs):
        self.images = images

        with tf.variable_scope("first"):
            x = conv(images, 32, 1)
            x = batch_norm(x, is_training)
            x = self.activation(x)
            stock = x

        with tf.variable_scope("", custom_getter=self.custom_getter):
            with tf.variable_scope("second"):
                x = conv(x, 32, 3)
                x = batch_norm(x, is_training)
                x = self.activation(x)

                x = tf.concat([stock, x], axis=3)

                stock = x

            with tf.variable_scope("third"):
                x = conv(x, 32, 3)
                x = batch_norm(x, is_training)
                x = self.activation(x)

                x = tf.concat([stock, x], axis=3)
&lt;/denchmark-code&gt;

The network.cpp is created by run_generate_project() with
&lt;denchmark-code&gt;    activate_hard_quantization = True
    threshold_skipping = True
&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>