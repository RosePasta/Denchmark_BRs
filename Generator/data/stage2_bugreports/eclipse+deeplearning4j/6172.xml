<bug id='6172' author='AlexDBlack' open_date='2018-08-16T06:07:39Z' closed_time='2018-09-10T15:42:00Z'>
	<summary>Libnd4j: pad op issues</summary>
	<description>
&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/pad&gt;https://www.tensorflow.org/api_docs/python/tf/pad&lt;/denchmark-link&gt;

Some issues here:

There's no way set the contant value for constant mode (always 0?)
I'm getting "Bad size index requested" for the rank 1 input case during execution:

&lt;denchmark-code&gt;    @Test
    public void testPadRank1(){

        INDArray in = Nd4j.valueArrayOf(new long[]{5}, 1.0);
        INDArray pad = Nd4j.create(new double[]{1,1}, new long[]{1,2});
        INDArray value = Nd4j.trueScalar(10.0);

        INDArray out = Nd4j.create(new long[]{7});

        DynamicCustomOp op = DynamicCustomOp.builder("pad")
                .addInputs(in, pad, value)
                //.addInputs(in, pad) //Also doesn't work
                .addOutputs(out)
                .addIntegerArguments(0) //0 = CONSTANT
                .build();

        Nd4j.getExecutioner().exec(op);

        INDArray exp = Nd4j.trueVector(new double[]{10, 1, 1, 1, 1, 1, 10});
        assertEquals(exp, out);
    }
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;o.n.l.f.Nd4jBackend - Loaded [CpuBackend] backend
o.n.n.NativeOpsHolder - Number of threads used for NativeOps: 8
o.n.l.c.n.o.NativeOpExecutioner - Failed to execute op pad. Attempted to execute with 2 inputs, 1 outputs, 0 targs and 1 iargs. Please see above message (printed out from c++) for a possible cause of error.

java.lang.RuntimeException: Bad size index requested
	at org.nd4j.nativeblas.Nd4jCpu$NativeOps.execCustomOpDouble(Native Method)
	at org.nd4j.linalg.cpu.nativecpu.ops.NativeOpExecutioner.exec(NativeOpExecutioner.java:1729)
	at org.nd4j.autodiff.opvalidation.TransformOpValidation.testPad(TransformOpValidation.java:1513)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2018-08-16T06:30:03Z'>
		Also crash on mirror pad:
&lt;denchmark-code&gt;    @Test
    public void testMirrorPad(){

        INDArray in = Nd4j.valueArrayOf(new long[]{5}, 1.0);
        INDArray pad = Nd4j.create(new double[]{1,1}, new long[]{1,2});

        INDArray out = Nd4j.create(new long[]{7});

        DynamicCustomOp op = DynamicCustomOp.builder("mirror_pad")
                .addInputs(in, pad)
                .addOutputs(out)
                .addIntegerArguments(0) //0=reflect, 1=symmetric
                .build();

        Nd4j.getExecutioner().exec(op);

        INDArray exp = Nd4j.trueVector(new double[]{1, 1, 1, 1, 1, 1, 1});
        assertEquals(exp, out);
    }
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;o.n.l.f.Nd4jBackend - Loaded [CpuBackend] backend
o.n.n.NativeOpsHolder - Number of threads used for NativeOps: 8

This application has requested the Runtime to terminate it in an unusual way.
Please contact the application's support team for more information.
terminate called after throwing an instance of 'std::invalid_argument'
  what():  NDArray::operator(i): dinput index is out of array length !

Process finished with exit code 3
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='AlexDBlack' date='2018-09-03T02:41:47Z'>
		Reopening this: Neither of the above test cases are passing.
The ability to specify the constant value is still not implemented.
The mirror pad test case above still crashes the JVM.
		</comment>
		<comment id='3' author='AlexDBlack' date='2018-09-03T14:21:42Z'>
		Reproduces with mirror_pad op.
Not reproduces with pad op.
		</comment>
		<comment id='4' author='AlexDBlack' date='2018-10-10T16:13:09Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>