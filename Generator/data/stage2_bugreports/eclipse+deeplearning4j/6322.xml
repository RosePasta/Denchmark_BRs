<bug id='6322' author='AlexDBlack' open_date='2018-08-31T05:40:20Z' closed_time='2019-04-08T08:13:14Z'>
	<summary>libnd4j: broadcast_dynamic_shape bugs</summary>
	<description>
First issue: rank 1, length 1 are not considered vectors hence fail op validation
&lt;denchmark-code&gt;    @Test
    public void testBroadcastDynamicShape1(){

        //Test case: [2,1] and [4]: expect [2,4]
        INDArray out = Nd4j.create(new long[]{2});
        DynamicCustomOp op = DynamicCustomOp.builder("broadcast_dynamic_shape")
                .addInputs(Nd4j.trueVector(new double[]{2,1}), Nd4j.trueVector(new double[]{4}))
                .addOutputs(out)
                .build();
        Nd4j.getExecutioner().exec(op);
        assertEquals(Nd4j.trueVector(new double[]{2,4}), out);

        //Same thing, reversed input order (expect same output)
        op = DynamicCustomOp.builder("broadcast_dynamic_shape")
                .addInputs(Nd4j.trueVector(new double[]{4}), Nd4j.trueVector(new double[]{2,1}))
                .addOutputs(out)
                .build();
        Nd4j.getExecutioner().exec(op);
        assertEquals(Nd4j.trueVector(new double[]{2,4}), out);
    }
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;Error at [C:/DL4J/Git/deeplearning4j/libnd4j/include/ops/declarable/generic/parity_ops/broadcast_dynamic_shape.cpp:36:0]:
broadcast_dynamic_shape: The second argument should be a vector

java.lang.RuntimeException: Op validation failed

	at org.nd4j.nativeblas.Nd4jCpu$NativeOps.execCustomOpFloat(Native Method)
	at org.nd4j.linalg.cpu.nativecpu.ops.NativeOpExecutioner.exec(NativeOpExecutioner.java:1718)
&lt;/denchmark-code&gt;

Second issue: shape is wrong for both of the following cases:
&lt;denchmark-code&gt;    @Test
    public void testBroadcastDynamicShape2(){

        //Test case: [2,1,4] and [2,2,4]: expect [2,2,4]
        INDArray out = Nd4j.create(new long[]{3});
        DynamicCustomOp op = DynamicCustomOp.builder("broadcast_dynamic_shape")
                .addInputs(Nd4j.trueVector(new double[]{2,1,4}), Nd4j.trueVector(new double[]{2,2,4}))
                .addOutputs(out)
                .build();
        Nd4j.getExecutioner().exec(op);
        assertEquals(Nd4j.trueVector(new double[]{2,2,4}), out);

        //Test case: [1,1,3] and [2,4,1]: expect [2,4,3]
        out = Nd4j.create(new long[]{3});
        op = DynamicCustomOp.builder("broadcast_dynamic_shape")
                .addInputs(Nd4j.trueVector(new double[]{1,1,3}), Nd4j.trueVector(new double[]{2,4,1}))
                .addOutputs(out)
                .build();
        Nd4j.getExecutioner().exec(op);
        assertEquals(Nd4j.trueVector(new double[]{2,4,3}), out);
    }
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;java.lang.AssertionError: 
Expected :[    2.0000,    2.0000,    4.0000]
Actual   :[    2.0000,    2.0000,         0]

java.lang.AssertionError: 
Expected :[    2.0000,    4.0000,    3.0000]
Actual   :[    2.0000,         0,         0]
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2018-09-04T11:22:16Z'>
		Reproduces with input {2.,1} and {4.}
		</comment>
		<comment id='2' author='AlexDBlack' date='2018-09-07T11:38:54Z'>
		The first test case is confirmed as passing.
The second test case is still failing an current master with the same output as before.
		</comment>
		<comment id='3' author='AlexDBlack' date='2019-01-08T09:05:55Z'>
		Update 2019/01/08: both test cases are now failing. First one returns wrong result, second one gives an exception.
&lt;denchmark-code&gt;    @Test
    public void testBroadcastDynamicShape1(){

        //Test case: [2,1] and [4]: expect [2,4]
        INDArray out = Nd4j.create(DataType.INT, 2);
        DynamicCustomOp op = DynamicCustomOp.builder("broadcast_dynamic_shape")
                .addInputs(Nd4j.createFromArray(new int[]{2,1}), Nd4j.createFromArray(new int[]{4}))
                .addOutputs(out)
                .build();
        Nd4j.getExecutioner().exec(op);
        assertEquals(Nd4j.createFromArray(new int[]{2,4}), out);

        //Same thing, reversed input order (expect same output)
        op = DynamicCustomOp.builder("broadcast_dynamic_shape")
                .addInputs(Nd4j.createFromArray(new int[]{4}), Nd4j.createFromArray(new int[]{2,1}))
                .addOutputs(out)
                .build();
        Nd4j.getExecutioner().exec(op);
        assertEquals(Nd4j.createFromArray(new int[]{2,4}), out);
    }

    @Test
    public void testBroadcastDynamicShape2(){

        //Test case: [2,1,4] and [2,2,4]: expect [2,2,4]
        INDArray out = Nd4j.create(DataType.INT, 3);
        DynamicCustomOp op = DynamicCustomOp.builder("broadcast_dynamic_shape")
                .addInputs(Nd4j.createFromArray(new int[]{2,1,4}), Nd4j.createFromArray(new int[]{2,2,4}))
                .addOutputs(out)
                .build();
        Nd4j.getExecutioner().exec(op);
        assertEquals(Nd4j.createFromArray(new int[]{2,2,4}), out);

        //Test case: [1,1,3] and [2,4,1]: expect [2,4,3]
        out = Nd4j.create(DataType.DOUBLE, 3);
        op = DynamicCustomOp.builder("broadcast_dynamic_shape")
                .addInputs(Nd4j.createFromArray(new int[]{1,1,3}), Nd4j.createFromArray(new int[]{2,4,1}))
                .addOutputs(out)
                .build();
        Nd4j.getExecutioner().exec(op);
        assertEquals(Nd4j.createFromArray(new int[]{2,4,3}), out);
    }
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;java.lang.AssertionError: 
Expected :[         2,         4]
Actual   :[         2,         1]
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;broadcast_dynamic_shape: Input shapes should be compatible, but 0.000000 and 2.000000 were given.BDS validation failed!
o.n.l.c.n.o.NativeOpExecutioner - Failed to execute op broadcast_dynamic_shape. Attempted to execute with 2 inputs, 1 outputs, 0 targs and 0 iargs. Inputs: [(INT,[3],c), (INT,[3],c)]. Outputs: [(INT,[3],c)] - Please see above message (printed out from c++) for a possible cause of error.

org.nd4j.linalg.exception.ND4JIllegalStateException: Failed to execute op [broadcast_dynamic_shape] with error code [ND4J_STATUS_VALIDATION]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='AlexDBlack' date='2019-04-08T07:39:58Z'>
		This operation requires int arguments and output. But test used double as output.
		</comment>
		<comment id='5' author='AlexDBlack' date='2019-04-08T08:13:14Z'>
		The tests in the original issue were pre-datatypes changes.
One of the tests here should have been DataType.INT instead of DOUBLE: &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/issues/6322#issuecomment-452224596&gt;https://github.com/deeplearning4j/deeplearning4j/issues/6322#issuecomment-452224596&lt;/denchmark-link&gt;

At any rate - both are more recent tests are now passing, thanks. I'll close this.
		</comment>
		<comment id='6' author='AlexDBlack' date='2019-05-08T09:12:17Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>