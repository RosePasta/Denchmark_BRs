<bug id='4558' author='emc5ud' open_date='2018-01-26T17:23:30Z' closed_time='2018-05-15T07:59:28Z'>
	<summary>DL4J Keras model import with CUDA backend strange behavior (0.9.2-SNAPSHOT)</summary>
	<description>
This issue is a little strange.
So I trained a model in keras with tensorflow as a backend and would like to import it to DL4J. This works when I set my backend to be "nd4j-native", but fails when I set by backend as "nd4j-cuda-8.0".
I create the model in the following way: &lt;denchmark-link:https://gist.github.com/emc5ud/3fd5d22a63bc65e918083a3eff3fdcad&gt;unet.py&lt;/denchmark-link&gt;
 (training omitted). And load it into DL4J as so
  def getModel() = {
    KerasModelImport.importKerasModelAndWeights("src/main/resources/unet.h5", false)
  }
When I load the model in DL4J with GPUs enabled, process hangs at the above step. I've waited for about 10 minutes with no luck, and all the while the process uses a steady 6-7 GB of my GPU's memory.
Now the strange part is that when I create the model in Keras with "tf" ordering (aka channels last) the hang up no longer happens and everything is great (&lt;denchmark-link:https://gist.github.com/emc5ud/6d6b78936e344c600301ec5e82b84cae&gt;unet_tf_ordering.py&lt;/denchmark-link&gt;
). When I use CPU it doesn't care what ordering I use.
Relevant python libraries:

keras==1.2.2
tensorflow-gpu==1.4

Relevant part of my build.sbt:
&lt;denchmark-code&gt;libraryDependencies ++= Seq(
  "org.deeplearning4j" % "deeplearning4j-core" % "0.9.2-SNAPSHOT",
  "org.deeplearning4j" % "deeplearning4j-modelimport" % "0.9.2-SNAPSHOT",
  "org.nd4j" % "nd4j-cuda-8.0" % "0.9.2-SNAPSHOT" classifier "" classifier "linux-x86_64",
  "org.bytedeco.javacpp-presets" % "cuda" % "8.0-6.0-1.3" classifier "" classifier "linux-x86_64"
//  "org.nd4j" % "nd4j-native" % "0.9.2-SNAPSHOT" classifier "" classifier "linux-x86_64",
//  "org.bytedeco.javacpp-presets" % "mkl" % "2017.3-1.3" classifier "" classifier "linux-x86_64",
//  "org.bytedeco.javacpp-presets" % "openblas" % "0.2.20-1.3" classifier "" classifier "linux-x86_64"
)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='emc5ud' date='2018-03-29T14:31:01Z'>
		Hey &lt;denchmark-link:https://github.com/emc5ud&gt;@emc5ud&lt;/denchmark-link&gt;
 we had an HDF5 fix recently (here: &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/pull/4870&gt;https://github.com/deeplearning4j/deeplearning4j/pull/4870&lt;/denchmark-link&gt;
), would you mind checking the import again with CUDA? I have a hunch this will fix it.
		</comment>
		<comment id='2' author='emc5ud' date='2018-04-19T15:59:08Z'>
		&lt;denchmark-link:https://github.com/emc5ud&gt;@emc5ud&lt;/denchmark-link&gt;
 could you please give it a try on your end? thanks
		</comment>
		<comment id='3' author='emc5ud' date='2018-04-19T17:08:07Z'>
		Hi Max, sorry for the delay. I'll give it a try this weekend.
		</comment>
		<comment id='4' author='emc5ud' date='2018-05-15T07:59:28Z'>
		&lt;denchmark-link:https://github.com/emc5ud&gt;@emc5ud&lt;/denchmark-link&gt;
 hey, any feedback for me on this? This seems resolved, but feel free to reopen, OK? Thanks
		</comment>
		<comment id='5' author='emc5ud' date='2018-09-22T01:24:32Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>