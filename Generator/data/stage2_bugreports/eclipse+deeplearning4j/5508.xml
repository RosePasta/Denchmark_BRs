<bug id='5508' author='hohl' open_date='2018-06-07T12:25:51Z' closed_time='2018-06-20T02:50:50Z'>
	<summary>ND4J: 1x1 result of mmul is always zero</summary>
	<description>
The following code snippet always produces 0.0 (instead of 6.0 = 1*0.5+2*2+3*0.5) as a result. In fact the mmul seems to always return 0.0 as long as the result is a scalar. On the other hand, mmul seems to work fine, when the result is a matrix. For example a.transpose().mmul(b) returns a 3x3 matrix with the correct results.
&lt;denchmark-code&gt;val a = Nd4j.create(doubleArrayOf(1.0, 2.0, 3.0))
val b = Nd4j.create(doubleArrayOf(0.5, 2.0, 0.5))
val actual = a.mmul(b.transpose())
assertEquals(1, actual.shape()[0])
assertEquals(1, actual.shape()[1])
assertEquals(6.0, actual.getDouble(0))
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/744417/41099051-a33b937c-6a5d-11e8-9bf6-a873d3fc826d.png&gt;&lt;/denchmark-link&gt;

I already asked in the Gitter chat if that's a known issue, but oddly it seems that this behavior doesn't appear on other machines. So here is my setup:
OS: macOS 10.13.4
Java: 10.0.1 (but also tested with 9.0.1 -&gt; same result)
ND4J-Version: 1.0.0-beta
ND4J-Backend: nd4j-native-platform
And that's the output logged to the console:
&lt;denchmark-code&gt;14:15:49.019 [main] INFO  org.nd4j.linalg.factory.Nd4jBackend - Loaded [CpuBackend] backend
14:15:49.696 [main] INFO  org.nd4j.nativeblas.NativeOpsHolder - Number of threads used for NativeOps: 4
14:15:50.654 [main] INFO  org.nd4j.nativeblas.Nd4jBlas - Number of threads used for BLAS: 4
14:15:50.660 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Mac OS X]
14:15:50.661 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Cores: [8]; Memory: [4,0GB];
14:15:50.661 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='hohl' date='2018-06-07T23:34:10Z'>
		Another data point here, for debugging: I ran the the same code (converted to java) on my machine (Windows 10) on both master and 1.0.0-beta and was getting the correct result.
		</comment>
		<comment id='2' author='hohl' date='2018-06-07T23:35:29Z'>
		MKL + macOS bug?
		</comment>
		<comment id='3' author='hohl' date='2018-06-07T23:41:36Z'>
		Possibly. &lt;denchmark-link:https://github.com/hohl&gt;@hohl&lt;/denchmark-link&gt;
 Are you able to run this without MKL, and see if you get the correct result when OpenBLAS (the default when MKL isn't installed) is used instead?
		</comment>
		<comment id='4' author='hohl' date='2018-06-08T01:47:30Z'>
		&lt;denchmark-link:https://github.com/hohl&gt;@hohl&lt;/denchmark-link&gt;
 Set the "org.bytedeco.javacpp.openblas.nomkl" system property to "true" to run without MKL.
		</comment>
		<comment id='5' author='hohl' date='2018-06-08T05:53:01Z'>
		&lt;denchmark-link:https://github.com/saudet&gt;@saudet&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/AlexDBlack&gt;@AlexDBlack&lt;/denchmark-link&gt;
 When disabling MKL the log says  is used and I get the correct results.
		</comment>
		<comment id='6' author='hohl' date='2018-06-08T05:53:46Z'>
		Wow. So yes, MKL bug then? :)
		</comment>
		<comment id='7' author='hohl' date='2018-06-08T05:56:03Z'>
		Yes, looks like it. &lt;denchmark-link:https://github.com/hohl&gt;@hohl&lt;/denchmark-link&gt;
 Try again with MKL 2018.3, if you're not already using that?
		</comment>
		<comment id='8' author='hohl' date='2018-06-08T06:06:32Z'>
		I'm on MKL 2017.2, so give me a few minutes and I'll try MKL2018.3.
		</comment>
		<comment id='9' author='hohl' date='2018-06-08T06:29:44Z'>
		I get the correct results with MKL2018.3. So it seems that the bug has been caused by my outdated MKL version.
		</comment>
		<comment id='10' author='hohl' date='2018-06-08T08:39:07Z'>
		Huh, that's surprising, but thanks for checking.
I'm not sure there's much we can do about this on our end - so should we close the issue?
		</comment>
		<comment id='11' author='hohl' date='2018-06-10T07:46:51Z'>
		I don't know, docs maybe? Bundle MKL?
		</comment>
		<comment id='12' author='hohl' date='2018-06-10T23:38:34Z'>
		Problem with docs: most affected people simply won't see it.
Bundling MKL would be great, we've had that discussion before. It's non-trivial though, and doesn't solve the problem if we discover an issue after we release a version.
A more general solution: check versions of native libraries (MKL, CUDA, OpenBLAS?), and log a warning if one with known issues is found/loaded.
Edit: though even with that, we can only update it once per release... unless we go as far as having some sort of known issues database that is downloaded from the internet... which is definitely non-trivial to build and maintain.
		</comment>
		<comment id='13' author='hohl' date='2018-09-21T18:58:44Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>