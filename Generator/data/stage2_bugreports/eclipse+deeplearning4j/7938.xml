<bug id='7938' author='AlexDBlack' open_date='2019-06-22T12:11:26Z' closed_time='2019-08-23T09:22:18Z'>
	<summary>libnd4j: size op fails for non-long output type, needs to support floats</summary>
	<description>
Two things:

Only Long dtype works at present
We need to add other dtypes for TF import (trivial)

It's currently supposed to support all integer types:
&lt;denchmark-link:https://github.com/eclipse/deeplearning4j/blob/master/libnd4j/include/ops/declarable/generic/parity_ops/size.cpp#L45&gt;https://github.com/eclipse/deeplearning4j/blob/master/libnd4j/include/ops/declarable/generic/parity_ops/size.cpp#L45&lt;/denchmark-link&gt;

But only long actually works...
&lt;denchmark-code&gt;    @Test
    public void testSizeTypes(){
        List&lt;DataType&gt; failed = new ArrayList&lt;&gt;();
        for(DataType dt : new DataType[]{DataType.LONG, DataType.INT, DataType.SHORT, DataType.BYTE,
                DataType.UINT64, DataType.UINT32, DataType.UINT16, DataType.UBYTE,
                DataType.DOUBLE, DataType.FLOAT, DataType.HALF, DataType.BFLOAT16}) {

            INDArray in = Nd4j.create(DataType.FLOAT, 100);
            INDArray out = Nd4j.scalar(dt, 0);

            DynamicCustomOp op = DynamicCustomOp.builder("size")
                    .addInputs(in)
                    .addOutputs(out)
                    .build();

            try {
                Nd4j.exec(op);
            } catch (Throwable t){
                failed.add(dt);
            }
        }

        if(!failed.isEmpty()){
            fail("Failed datatypes: " + failed.toString());
        }
    }
&lt;/denchmark-code&gt;

Exception for INT datatype:
&lt;denchmark-code&gt;java.lang.RuntimeException: NativeOpExecutioner::execScalar; Expected: [INT32]; Actual: [INT32, INT64]
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;java.lang.AssertionError: Failed datatypes: [INT, SHORT, BYTE, UINT64, UINT32, UINT16, UBYTE, DOUBLE, FLOAT, HALF, BFLOAT16]
&lt;/denchmark-code&gt;

As for what TF does for smaller dtypes: it just overflows... for import compatibility, we'll want this also (or at the very least, exception on overflow, or add an arg
&lt;denchmark-code&gt;tf.reset_default_graph()
x = tf.constant([1], shape=[1000], dtype=tf.float32)
size = tf.size(x, out_type=tf.int8)

sess = tf.Session()
out = sess.run([size])
print(out[0].shape)
print(out[0].dtype)
print(out[0]);
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;()
int8
-24
&lt;/denchmark-code&gt;

or the same test with out_type=tf.bfloat16:
&lt;denchmark-code&gt;()
bfloat16
1000
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2019-08-23T09:22:17Z'>
		Fixed
		</comment>
	</comments>
</bug>