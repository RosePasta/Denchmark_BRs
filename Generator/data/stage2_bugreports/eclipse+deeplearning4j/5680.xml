<bug id='5680' author='AlexDBlack' open_date='2018-06-22T02:59:16Z' closed_time='2018-06-22T03:42:18Z'>
	<summary>SameDiff: gradient calculation wrong after updating</summary>
	<description>
&lt;denchmark-code&gt;    @Test
    public void testUpdatingGradientSimple(){

        SameDiff sd = SameDiff.create();
        SDVariable in = sd.var("in", Nd4j.linspace(1,12,12).reshape(3,4));
        SDVariable out = in.mul(2.0);
        SDVariable loss = out.std("out", true);

        INDArray outArr = sd.execAndEndResult().dup();
        sd.execBackwards();

        Map&lt;String,INDArray&gt; origGrad = new HashMap&lt;&gt;();
        origGrad.put("in", in.gradient().getArr().dup());
        origGrad.put("out", out.gradient().getArr().dup());

        double stdBefore = in.getArr().stdNumber().doubleValue();
        in.getArr().muli(10);
        double stdAfter = in.getArr().stdNumber().doubleValue();
        System.out.println("Before vs. after: " + stdBefore + ", " + stdAfter);
        INDArray outArr2 = sd.execAndEndResult();
        sd.execBackwards();

        assertNotEquals(outArr, outArr2);

        //Ensure gradients are also changed:
        assertNotEquals(origGrad.get("in"), in.gradient().getArr());        //Fails here: same gradient as before updating the array
        assertNotEquals(origGrad.get("out"), out.gradient().getArr());
    }
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2018-06-22T03:42:18Z'>
		Hm... turns out that stdev gradient cancels out the muli(10) here. Assign random values instead and it passes.
So this isn't the root cause of another bug that I'm seeing...
		</comment>
		<comment id='2' author='AlexDBlack' date='2018-09-21T17:59:22Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>