<bug id='5150' author='isearchxsolve' open_date='2018-05-13T14:07:57Z' closed_time='2018-05-15T20:42:03Z'>
	<summary>Memory Mapped Allocation not working in Windows 10</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue Description&lt;/denchmark-h&gt;

I am trying to use memory mapped allocation mentioned in the documentation and I am using both nd4j-1.0.0-alpha and dl4j-1.0.0-alpha.My OS is Windows 10 64bit and processor i7 and RAM 16 GB and hdd 2TB.I am using the below code.
WorkspaceConfiguration mmap = WorkspaceConfiguration.builder().initialSize(10000000000l)
.policyLocation(LocationPolicy.MMAP).build();
MemoryWorkspace ws = Nd4j.getWorkspaceManager().getAndActivateWorkspace(mmap, "M2")

expected behavior: 10 GB Memory should be allocated from HDD to be mapped to virtual address space and ws should be returned
encountered behavior: However memory allocation fails saying
Exception in thread "main" java.lang.RuntimeException: MMAP failed
at org.nd4j.linalg.cpu.nativecpu.workspace.CpuWorkspace.init(CpuWorkspace.java:61)
at org.nd4j.linalg.memory.abstracts.Nd4jWorkspace.(Nd4jWorkspace.java:181)
at org.nd4j.linalg.cpu.nativecpu.workspace.CpuWorkspace.(CpuWorkspace.java:33)
at org.nd4j.linalg.cpu.nativecpu.workspace.CpuWorkspaceManager.getWorkspaceForCurrentThread(CpuWorkspaceManager.java:72)
at org.nd4j.linalg.memory.provider.BasicWorkspaceManager.getAndActivateWorkspace(BasicWorkspaceManager.java:196)

&lt;denchmark-h:h4&gt;Version Information&lt;/denchmark-h&gt;

Please indicate relevant versions, including, if relevant:

dl4j-1.0.0.0-alpha and nd4j-1.0.0-alpha
Windows 10 64bit and processor i7 and RAM 16 GB and hdd 2TB,jdk1.8.0_144
CUDA version, if used-N/A
NVIDIA driver version, if in use-N/A

&lt;denchmark-h:h4&gt;Contributing&lt;/denchmark-h&gt;

If you'd like to help us fix the issue by contributing some code, but would
like guidance or help in doing so, please mention it!
	</description>
	<comments>
		<comment id='1' author='isearchxsolve' date='2018-05-13T16:57:04Z'>
		No man, it's not "MMAP not working". It's more like "MMAP fails to utilize 10GB file". That's different problem.
Please try to allocate, say, 3.5GB and confirm it works.
		</comment>
		<comment id='2' author='isearchxsolve' date='2018-05-13T17:27:05Z'>
		Ye, never mind, looks like value overflow on windows.
		</comment>
		<comment id='3' author='isearchxsolve' date='2018-05-14T04:13:59Z'>
		Can you elaborate more on this.Is there a limitation of MMAP in windows. I want to allocate memory required for large size INDArrays which is beyond RAM capacity. So I thought of using MMAP. How can I go about it.
		</comment>
		<comment id='4' author='isearchxsolve' date='2018-05-14T04:16:02Z'>
		I want that too. Bugs do exist. This one will be fixed i hope.
		</comment>
		<comment id='5' author='isearchxsolve' date='2018-05-14T04:16:38Z'>
		Thanks...any ETA..
		</comment>
		<comment id='6' author='isearchxsolve' date='2018-05-14T04:17:33Z'>
		Sorry, we don't give any ETA estimates for open-source users.
		</comment>
		<comment id='7' author='isearchxsolve' date='2018-05-14T04:18:07Z'>
		ok...Any workaround
		</comment>
		<comment id='8' author='isearchxsolve' date='2018-05-14T04:22:34Z'>
		Not sure what workaround one could imagine here, sorry.
		</comment>
		<comment id='9' author='isearchxsolve' date='2018-05-14T04:27:54Z'>
		Just a suggestion...I know I am not expert enough for this...but we could look at the JDK 1.8 api for memory mapping it should also surely use some native C++ library for mmap...hopefully in jdk it works..thanks
		</comment>
		<comment id='10' author='isearchxsolve' date='2018-05-14T04:29:18Z'>
		If all you need is 2GB mmap (which is java limit), you can just use existing workspace mmap. But since you've tried 10GB, i assume 2GB won't be enough for you?
		</comment>
		<comment id='11' author='isearchxsolve' date='2018-05-14T04:32:06Z'>
		meh, in any way - we need real pointers. Some pointers which won't be moved by jvm eventually.
		</comment>
		<comment id='12' author='isearchxsolve' date='2018-05-14T06:12:49Z'>
		Hm. I'm sorry, but can you show me your full source code and show me your OS version including build number?
&lt;denchmark-code&gt;&lt;/denchmark-code&gt;

		</comment>
		<comment id='13' author='isearchxsolve' date='2018-05-14T08:11:37Z'>
		WorkspaceConfiguration mmap = WorkspaceConfiguration.builder()
.initialSize(10000000000l)
.policyLocation(LocationPolicy.MMAP)
.build();
try (MemoryWorkspace ws = Nd4j.getWorkspaceManager().getAndActivateWorkspace(mmap, "M2")) {
INDArray x = Nd4j.create(10000);
}
OS version and Build number attached
&lt;denchmark-link:https://user-images.githubusercontent.com/23405512/39985507-76874540-577c-11e8-8dd6-76c917932df8.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='14' author='isearchxsolve' date='2018-05-14T08:33:48Z'>
		&lt;denchmark-link:https://user-images.githubusercontent.com/23405512/39986549-9d609290-577f-11e8-9c12-9c5fa838437a.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='15' author='isearchxsolve' date='2018-05-14T21:43:31Z'>
		&lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/issues/5158&gt;https://github.com/deeplearning4j/deeplearning4j/issues/5158&lt;/denchmark-link&gt;

		</comment>
		<comment id='16' author='isearchxsolve' date='2018-05-15T03:17:38Z'>
		Yeah, we basically have to use the Win32 API. BTW, if we're only mapping this for Java, we could use the systems presets and manage all that in Java: &lt;denchmark-link:https://github.com/bytedeco/javacpp-presets/tree/master/systems#javacpp-presets-for-systems&gt;https://github.com/bytedeco/javacpp-presets/tree/master/systems#javacpp-presets-for-systems&lt;/denchmark-link&gt;

		</comment>
		<comment id='17' author='isearchxsolve' date='2018-05-15T03:18:59Z'>
		Basically we were using Win32 API for everything but open()/close() system calls. Now we use Win32 API for those calls as well.
		</comment>
		<comment id='18' author='isearchxsolve' date='2018-05-15T05:00:36Z'>
		will using win32 api for open()/close() fix this issue.Thanks
		</comment>
		<comment id='19' author='isearchxsolve' date='2018-05-15T05:01:53Z'>
		yes, it is. i'm waiting for jenkins to approve the pr, and i'll merge fix.
		</comment>
		<comment id='20' author='isearchxsolve' date='2018-05-15T05:17:42Z'>
		Thanks to all of you guys...you guys rock...great relief for me...it was fast
		</comment>
		<comment id='21' author='isearchxsolve' date='2018-05-15T20:42:03Z'>
		Fix merged. Once snapshot updates - it should work for you.
		</comment>
		<comment id='22' author='isearchxsolve' date='2018-09-22T01:24:22Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>