<bug id='8512' author='AlexDBlack' open_date='2019-12-07T11:54:06Z' closed_time='2019-12-10T01:17:05Z'>
	<summary>SameDiff: (snapshots) imported BERT model producing NaNs (CPU)</summary>
	<description>
When running BERTGraphTest.testBert, I get NaNs in one of two possible locations:

softmax - bert/encoder/layer_3/attention/self/Softmax
add - bert/encoder/layer_2/output/LayerNorm/batchnorm/add_1

In both cases I have confirmed there are no NaNs in the input.
This appears to be related to SameDiff's array reuse memory management strategy, ArrayCacheMemoryMgr.
Using the simpler (but lower performance) ArrayCloseMemoryMgr (INDArray.close() after arrays are no longer needed) and NoOpMemoryMgr (clear references + rely on GC) the test looks ok, no NaNs.
Adding this just before the SameDiff.output call results in correct results:
&lt;denchmark-code&gt;InferenceSession is = new InferenceSession(sd);
is.setMmgr(new ArrayCloseMemoryMgr());
//is.setMmgr(new NoOpMemoryMgr());    //Results also ok with this
sd.getSessions().put(Thread.currentThread().getId(), is);
&lt;/denchmark-code&gt;

Still working to reproduce this in isolation. I don't believe it's a problem with the strategy per-se (incorrectly re-using arrays when they shouldn't be), given the reproducible and isolated nature of the bug (plus, the fact that we use the same array reuse strategy without issues in literally every other SameDiff test, other than DL4J SameDiff layers).
	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2019-12-08T11:07:43Z'>
		should be the same reason as &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/issues/8496&gt;#8496&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='AlexDBlack' date='2019-12-09T04:33:35Z'>
		Looks like the underlying issue is a (recently introduced?) problem with broadcast mul op for some combinations of input shapes.
		</comment>
		<comment id='3' author='AlexDBlack' date='2019-12-10T01:17:05Z'>
		Confirmed fixed and BERT import tests passing for both CPU and CUDA.
Will be merged back to eclipse/deeplearning4j soon (and hence in snapshots soon) and also in the upcoming release.
		</comment>
	</comments>
</bug>