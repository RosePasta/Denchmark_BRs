<bug id='7927' author='AlexDBlack' open_date='2019-06-20T12:53:14Z' closed_time='2019-07-05T11:59:23Z'>
	<summary>ND4J: FlatBuffers serialization issue for String arrays</summary>
	<description>
Looks like there's some issue with serializing String arrays to/from FlatBuffers.
&lt;denchmark-code&gt;    @Test
    public void testStringSameDiffSerialization() throws Exception {

        File f = new File(testDir.newFolder(), "test.bin");

        SameDiff sd = SameDiff.create();
        INDArray arr = Nd4j.scalar("My test string here!");
        sd.constant("s", arr);
        sd.save(f, false);

        SameDiff sd2 = SameDiff.load(f, false);
        INDArray deArr = sd2.getVariable("s").getArr();
        assertEquals(arr, deArr);
    }
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;java.lang.AssertionError: 
Expected :"My test string here!"
Actual   :"�       My test stri"
&lt;/denchmark-code&gt;

Looks like the problem is this Nd4j.create(Buffer, shape) call. The String array header is not being  handled correctly, based on that result, not sure that should be fixed...
&lt;denchmark-link:https://github.com/eclipse/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/factory/Nd4j.java#L6568&gt;https://github.com/eclipse/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/factory/Nd4j.java#L6568&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2019-06-20T21:26:13Z'>
		Maybe FlayBuffers doesn't use UTF-8 by default?
		</comment>
		<comment id='2' author='AlexDBlack' date='2019-06-21T00:55:27Z'>
		No, this isn't a FlatBuffers issue per-se. IIRC from looking at this, dump the INDArray buffer directly into flatbuffers as bytes, then pull it out again into a buffer to recreate the INDArray. So we're not encoding it as a String, we're encoding it as bytes.
		</comment>
		<comment id='3' author='AlexDBlack' date='2019-06-21T03:52:28Z'>
		Strange. We have test for it. &lt;denchmark-link:https://github.com/SkymindIO/deeplearning4j/blob/b5f0ec072f3fd0da566e32f82c0e43ca36553f39/nd4j/nd4j-backends/nd4j-tests/src/test/java/org/nd4j/linalg/mixed/StringArrayTests.java#L88-L104&gt;https://github.com/SkymindIO/deeplearning4j/blob/b5f0ec072f3fd0da566e32f82c0e43ca36553f39/nd4j/nd4j-backends/nd4j-tests/src/test/java/org/nd4j/linalg/mixed/StringArrayTests.java#L88-L104&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='AlexDBlack' date='2019-06-21T04:05:02Z'>
		Might be scalar specific...
&lt;denchmark-code&gt;    @Test
    public void testBasicStrings_4a() {
        val arrayX = Nd4j.scalar("alpha");

        val fb = new FlatBufferBuilder();
        val i = arrayX.toFlatArray(fb);
        fb.finish(i);
        val db = fb.dataBuffer();

        val flat = FlatArray.getRootAsFlatArray(db);
        val restored = Nd4j.createFromFlatArray(flat);

        assertEquals(arrayX, restored);
        assertEquals("alpha", restored.getString(0));
    }
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;java.lang.AssertionError: 
Expected :"alpha"
Actual   :"�    "
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='AlexDBlack' date='2019-06-21T04:18:53Z'>
		quite possible...
		</comment>
		<comment id='6' author='AlexDBlack' date='2019-07-05T11:59:23Z'>
		Fixed in my branch.
		</comment>
	</comments>
</bug>