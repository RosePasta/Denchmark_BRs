<bug id='6165' author='AlexDBlack' open_date='2018-08-15T06:18:23Z' closed_time='2018-08-16T01:07:43Z'>
	<summary>Libnd4j/Nd4j: Scatter ops can't handle scalar index case</summary>
	<description>
scatter ops take 3 input arrays: reference, indices and updates.
&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/scatter_add&gt;https://www.tensorflow.org/api_docs/python/tf/scatter_add&lt;/denchmark-link&gt;

Scalar indices (with 2d reference, 1d updates) should be a legitimate case here, but currently crashes.
&lt;denchmark-code&gt;o.n.l.f.Nd4jBackend - Loaded [CpuBackend] backend
o.n.n.NativeOpsHolder - Number of threads used for NativeOps: 8

This application has requested the Runtime to terminate it in an unusual way.
Please contact the application's support team for more information.
terminate called after throwing an instance of 'std::invalid_argument'
  what():  NDArray::applyPairwiseTransform method - lengths of arrays are mismatched

Process finished with exit code 3
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;    @Test
    public void testScatterOpsScalar(){
        for(String s : new String[]{"add", "sub", "mul", "div"}) {
            INDArray ref = Nd4j.linspace(1, 30, 30).reshape(10, 3);
            INDArray indices = Nd4j.trueScalar(5);
            INDArray upd = Nd4j.trueVector(new double[]{10, 20, 30});

            //The non-scalar case works:
//            INDArray indices = Nd4j.trueVector(new float[]{5});
//            INDArray upd = Nd4j.create(new double[]{10, 20, 30}, new int[]{1, 3});

            INDArray exp = ref.dup();
            switch (s){
                case "add":
                    exp.getRow(5).addi(upd);
                    break;
                case "sub":
                    exp.getRow(5).subi(upd);
                    break;
                case "mul":
                    exp.getRow(5).muli(upd);
                    break;
                case "div":
                    exp.getRow(5).divi(upd);
                    break;
                default:
                    throw new RuntimeException();
            }


            INDArray out = Nd4j.create(10, 3);

            DynamicCustomOp op = DynamicCustomOp.builder("scatter_" + s)
                    .addInputs(ref, indices, upd)
                    .addOutputs(out)
                    .build();

            Nd4j.getExecutioner().exec(op);

            assertEquals(s, exp, out);
        }
    }
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2018-08-15T06:20:41Z'>
		So, basically you want to treat 0D indices as 1D case with length of 1?
		</comment>
		<comment id='2' author='AlexDBlack' date='2018-08-15T06:23:16Z'>
		Essentially, yes. The following cases would give the same result:
ref=[10,3], index=[], update=[3]
ref=[10,3], index=[1], update=[1,3]
Or put another way: for the scalar case, update.rank == ref.rank-1 for the scalar case, and we're updating one TAD
		</comment>
		<comment id='3' author='AlexDBlack' date='2018-08-15T06:25:08Z'>
		cc &lt;denchmark-link:https://github.com/shyrma&gt;@shyrma&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='AlexDBlack' date='2018-08-15T13:05:10Z'>
		Repaired !
		</comment>
		<comment id='5' author='AlexDBlack' date='2018-08-16T01:07:43Z'>
		Confirmed fixed - thanks!
		</comment>
		<comment id='6' author='AlexDBlack' date='2018-09-21T09:21:43Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>