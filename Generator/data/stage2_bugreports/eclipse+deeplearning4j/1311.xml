<bug id='1311' author='joel-odlund' open_date='2016-03-22T18:33:31Z' closed_time='2016-04-19T16:44:51Z'>
	<summary>CNN confusion of rows and columns</summary>
	<description>
In CNN config, there is some confusion around rows and columns of images and filters
images are defined width, height  (columns, rows)
conv kernels are defined the other way around (rows, columns)   (the order is not apparent in the api, but defined in a comment in the source.)
moreover,  there appears to be a bug related to this,  where dimensions are confused somewhere within the code as well.
just defining rows and columns in the same order in both places gives another error,
gist with stack trace in comment :
&lt;denchmark-link:https://gist.github.com/joel-odlund/1e62a239c8b0a2e3f970&gt;https://gist.github.com/joel-odlund/1e62a239c8b0a2e3f970&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='joel-odlund' date='2016-03-23T11:22:09Z'>
		this refers to CNN in Computation graphs by the way,  the setInputType()  method.
		</comment>
		<comment id='2' author='joel-odlund' date='2016-03-24T07:50:45Z'>
		Let me chase this down. It'll help me study the parts related to image processing in the code :)
		</comment>
		<comment id='3' author='joel-odlund' date='2016-03-24T08:22:23Z'>
		&lt;denchmark-link:https://github.com/saudet&gt;@saudet&lt;/denchmark-link&gt;
 Relevant code is the ComputationGraphConfiguration.setInputTypes() method, ConvolutionLayerSetup (for MultiLayerNetwork), and the Convolutional and Subsampling layer configurations. (Plus maybe also various preprocessors - CnnToFeedForward, etc). Would be good to have a consistent order for depth/width/heigh across all of these.
		</comment>
		<comment id='4' author='joel-odlund' date='2016-03-24T08:54:10Z'>
		&lt;denchmark-link:https://github.com/AlexDBlack&gt;@AlexDBlack&lt;/denchmark-link&gt;
 Thanks! The typical order of parameters depends on the name we give them. It's usually "width, height" and "rows, cols". And if we put "depth" last it looks about right. Would that be consistent enough?  Consistent with OpenCV anyway...
		</comment>
		<comment id='5' author='joel-odlund' date='2016-03-24T16:52:07Z'>
		I agree that width, height  and  rows, cols  is probably the standard order .   However, it is a bit confusing using both conventions at the same time, since they are contradictory.
It seems reasonable to represent the dimensions in the same order as they appear in the underlying NDArray. this would help a lot when debugging cofigs, interpreting errors and so on.    For this reason i think it makes sense to have depth first as it is now.
The order is really just a stylistic convention i guess.  the actual bug here is perhaps more interesting, as it seems break configs with non-square filters or filters that span the whole image.
		</comment>
		<comment id='6' author='joel-odlund' date='2016-04-05T07:22:27Z'>
		Ok, I created a fix for this. Please someone merge the PR if it looks alright. But now the example crashes in libnd4j. I checked it out a bit, and the behavior depends on the image and kernel sizes provided, but nothing obvious to me... Will keep looking.
BTW, I don't think we can change the order of things at this point, as it would break backward compatibility. &lt;denchmark-link:https://github.com/AlexDBlack&gt;@AlexDBlack&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='7' author='joel-odlund' date='2016-04-05T09:25:10Z'>
		I'm fine with changes to ComputationGraph stuff (it hasn't made it to a formal release yet), but yeah, backward compatibility for other places is definitely a concern. Perhaps there's some options that don't break backward compatibility (overload + deprecate old method/constructor? replacement class, but keep old class with same signatures, but make it extend the replacement class?).
Also tagging &lt;denchmark-link:https://github.com/nyghtowl&gt;@nyghtowl&lt;/denchmark-link&gt;
 here.
		</comment>
		<comment id='8' author='joel-odlund' date='2016-04-05T18:05:14Z'>
		&lt;denchmark-link:https://github.com/agibsonccc&gt;@agibsonccc&lt;/denchmark-link&gt;
 and I spoke at length on this last summer. It should be rows, cols (like Numpy) which equates to height, width or y, x (like OpenCV if you use coordinates). When working with CNNs the tensor is organized by {num examples, channels, rows, cols} also known as  {num examples, depth, height, width }
This should be true across all repos but its very likely that there are inconsistencies because this is a confusing point and different ones of us have developed and updated different repos.
So for kernel and padding they should match with 0 or 1 - 0 stands for rows|height and 1 for cols|width.
		</comment>
		<comment id='9' author='joel-odlund' date='2016-04-05T20:23:17Z'>
		To help the cause here. I just did a pass to fix height width order in Canova which has been an outstanding issue with Image Base classes in that repo. I'm fine with any changes you guys want to make and agree that consistency is key. I'm ok with breaking compatibility for consistency if that is necessary.
		</comment>
		<comment id='10' author='joel-odlund' date='2016-04-06T14:20:08Z'>
		So, I've merged changes that fixes the original problem, but I'm still getting a crash in libnd4j...
		</comment>
		<comment id='11' author='joel-odlund' date='2016-04-08T03:14:12Z'>
		Looking at this there are a couple issues with how the model is configured. See this gist for fixes to the code: &lt;denchmark-link:https://gist.github.com/nyghtowl/461477a96290a79b213350bebe1a3a89&gt;https://gist.github.com/nyghtowl/461477a96290a79b213350bebe1a3a89&lt;/denchmark-link&gt;

Code issues

nIn should be number of channels for input
kernel sizes should not be larger than the size of the input | feature maps

Strange issues:

nOut on first layer is throwing sig error when less than 3 on a standard list and less than 2 on a CompGraph
cnn handles a kernel the same size of the input even though it's zero numerator but subsampling does not. An error needs to be thrown for cnn and subsampling to warn kernel size =&gt; input.

		</comment>
		<comment id='12' author='joel-odlund' date='2016-04-09T00:17:10Z'>
		Addressed validation issues with pull &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/pull/1383&gt;#1383&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='joel-odlund' date='2016-04-19T16:44:51Z'>
		Closing this and putting the strange issues into something separate
		</comment>
		<comment id='14' author='joel-odlund' date='2019-01-21T06:53:25Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>