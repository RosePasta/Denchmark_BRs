<bug id='6738' author='AlexDBlack' open_date='2018-11-20T02:58:04Z' closed_time='2019-01-10T01:53:39Z'>
	<summary>SameDiff TF import: Fix support for control dependencies</summary>
	<description>
Failing test case: "cond/cond_false"
Tensorflow control dependencies are used to enforce a specific execution order.
This is useful in control flow operations such as cond and while.
Consider the simple graph:
&lt;denchmark-code&gt;var = tf.Variable(tf.zeros(shape=[], dtype=tf.bool), name="boolean_variable")
def ifTrue():
    return tf.lin_space(start=1.0, stop=5.0, num=5)
def ifFalse():
    return tf.ones(shape=[5], dtype=tf.float32)
out = tf.cond(var, ifTrue, ifFalse)
add = out + 1
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/2360237/48748552-63b32080-eccb-11e8-90f6-ddcf636ec446.png&gt;&lt;/denchmark-link&gt;

(Note the lack of a direct dependency between the switch and the ones/linspace/merge: the control dependency is not shown in this graph)
This results in a node in the graph as follows:
&lt;denchmark-code&gt;node {
  name: "cond/ones"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 1.0
      }
    }
  }
}
&lt;/denchmark-code&gt;

Note especially the constant node input: input: "^cond/switch_f"
Clearly, a constant doesn't require an input variable (values are defined in the node). The "input" with the caret (^) here signifies a control flow dependency: i.e., "cond/ones" is only available to be used in the graph if/when "cond/switch_f" is available.
Similarly, the linspace start/stop/num constant nodes have an input on "^conf/switch_t".
As far as I can tell, we don't account for these control dependencies in SameDiff (either import or execution), only "real" dependencies.
Consequently in this merge case, both the "ones" and "LinSpace" nodes are always available to the merge node, regardless of the outcome of the switch.
	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2019-01-10T01:53:39Z'>
		Fixed here: &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/pull/6816&gt;https://github.com/deeplearning4j/deeplearning4j/pull/6816&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='AlexDBlack' date='2019-02-09T02:42:58Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>