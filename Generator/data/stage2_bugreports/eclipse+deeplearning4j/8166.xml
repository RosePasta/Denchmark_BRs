<bug id='8166' author='RobAltena' open_date='2019-08-29T01:30:42Z' closed_time='2019-11-20T17:44:24Z'>
	<summary>ND4J: INDArray.match(INDArray, Condition) issue</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue Description&lt;/denchmark-h&gt;

Having some trouble getting &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/api/ndarray/INDArray.java#L654&gt;INDArray match(INDArray, Condition)&lt;/denchmark-link&gt;
 to run. No usage found, no tests found.
This test:
&lt;denchmark-code&gt;@Test
void testMatch1() {

    INDArray x = Nd4j.ones(DataType.FLOAT, 3,3);
    INDArray y = Nd4j.ones(DataType.FLOAT, 3,3);
    Condition c =  Conditions.lessThan(0.0f);

    INDArray z = x.match(x, c);
}
&lt;/denchmark-code&gt;

throws: java.lang.IllegalArgumentException: Op.Z type must be bool: z.datatype=FLOAT for op class org.nd4j.linalg.api.ops.impl.transforms.bool.MatchConditionTransform
How should the method be used? (Maybe these methods should be removed or deprecated?)
	</description>
	<comments>
		<comment id='1' author='RobAltena' date='2019-08-29T03:08:42Z'>
		As noted in slack, this looks like a bug to me



deeplearning4j/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/api/ndarray/BaseNDArray.java


         Line 2022
      in
      f03b0ee






 return Nd4j.getExecutioner().exec(new MatchConditionTransform(this,comp,condition)); 





That's MatchConditionTransform(x,z,condition), instead of (x,y,condition).
i.e., the comparison array is passed as the result array.
		</comment>
		<comment id='2' author='RobAltena' date='2019-10-24T05:47:23Z'>
		So, there's more to the problem here than just the constructor, and the fact that we need no-arg conditions like Conditions.lessThan() for the pairwise case...
After adding an (x,y,z) constructor and using that in BaseNDArray, I'm getting incorrect values for the pairwise x = y case:
&lt;denchmark-code&gt;    @Test
    public void testMatch1() {

        INDArray x = Nd4j.ones(DataType.FLOAT, 3,3);
        INDArray y = Nd4j.linspace(DataType.FLOAT, -5, 9, 1).reshape(3, 3);
        Condition c =  Conditions.equals(0.0);

        System.out.println("Y:\n" + y);

        INDArray z = x.match(y, c);
        INDArray exp = Nd4j.createFromArray(new boolean[][]{
                {false, false, false},
                {false, false, false},
                {true,  false, false}
        });

        assertEquals(exp, z);
    }
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;Y:
[[   -5.0000,   -4.0000,   -3.0000], 
 [   -2.0000,   -1.0000,         0], 
 [    1.0000,    2.0000,    3.0000]]
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/2360237/67456824-aae52680-f67d-11e9-9660-c96ce5e0ffc3.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='RobAltena' date='2019-11-20T14:22:19Z'>
		Technically this is not a bug.
Originally MatchCondition operation works in Scalar-only mode, so comparable is always an argument, and it belongs to two op groups: TransformBool and ReduceLong. Returning either mask or number of elements that match condition.
		</comment>
		<comment id='4' author='RobAltena' date='2019-11-20T17:44:23Z'>
		Implemented in my branch, will be merged later.
		</comment>
	</comments>
</bug>