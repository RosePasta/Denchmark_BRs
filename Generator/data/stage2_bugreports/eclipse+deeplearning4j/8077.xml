<bug id='8077' author='AlexDBlack' open_date='2019-08-06T12:53:38Z' closed_time='2019-11-25T06:36:38Z'>
	<summary>libnd4j: *pooling2d_bp ops can't handle different stride inputs</summary>
	<description>
See the following test cases. It's failing on the last assertEquals
&lt;denchmark-link:https://gist.github.com/AlexDBlack/f075d26ed51c74270eee8f5472bbf29a&gt;https://gist.github.com/AlexDBlack/f075d26ed51c74270eee8f5472bbf29a&lt;/denchmark-link&gt;

Why?
If input and output (i.e., input to pool2d and gradient at pooling op input - input and gradI args) have different strides, the offsets won't be correct and hence output will be wrong.
i.e., we're only taking into account 2 of the 3 necessary strides here.



deeplearning4j/libnd4j/include/ops/declarable/helpers/cpu/convolutions.cpp


        Lines 1866 to 1873
      in
      923ab15






 const Nd4jLong iStride0 = gradI.stridesOf()[0]; 



 const Nd4jLong iStride1 = gradI.stridesOf()[1]; 



 const Nd4jLong iStride2 = gradI.stridesOf()[2]; 



 const Nd4jLong iStride3 = gradI.stridesOf()[3]; 



 const Nd4jLong oStride0 = gradO.stridesOf()[0]; 



 const Nd4jLong oStride1 = gradO.stridesOf()[1]; 



 const Nd4jLong oStride2 = gradO.stridesOf()[2]; 



 const Nd4jLong oStride3 = gradO.stridesOf()[3]; 





Specifically, I think changes need to occur here:

iStep2 and iStep3 should be based on input stride - not gradI strides
the index calculation for gI (line 1925) needs to be based on gradI strides, not input strides (as it would be once iStep2/3 are updated)

For optimization, it might make sense to detect when input/gradI strides are the same and do what we currently do, and if not, do extra calculation.
I tried fixing it, couldn't get it to pass.
	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2019-08-06T12:55:04Z'>
		cc &lt;denchmark-link:https://github.com/shyrma&gt;@shyrma&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='AlexDBlack' date='2019-08-09T14:02:54Z'>
		OK, so I'm still seeing this after &lt;denchmark-link:https://github.com/shyrma&gt;@shyrma&lt;/denchmark-link&gt;
's changes... looked into it for quite a while and I have no idea why it's not passing:/
What I've checked (and everything looks fine)

The C++ implementation for both average and max pooling (multiple times, thoroughly)
My test cases (original ones posted above had an error in kernel size, but now corrected)
Multi-threading (OMP_NUM_THREADS=1 still fails - and it's consistent)
avgpool2d_bp op
Java side (op context, etc)

I've also checked on 2 different computers, same result on both...
The other weird thing is that average pooling fails with permuted input array... which isn't even used for the average pool backprop op. The strides there should make zero difference, yet somehow they leak in and change the result...
		</comment>
		<comment id='3' author='AlexDBlack' date='2019-08-09T14:52:06Z'>
		Updated test cases:
&lt;denchmark-link:https://gist.github.com/AlexDBlack/a803cb42a225f3d7fa352b5b0a03f1ff&gt;https://gist.github.com/AlexDBlack/a803cb42a225f3d7fa352b5b0a03f1ff&lt;/denchmark-link&gt;

&lt;denchmark-link:https://gist.github.com/AlexDBlack/f76c9bf602de5f3ec19f30a88d967a9f&gt;https://gist.github.com/AlexDBlack/f76c9bf602de5f3ec19f30a88d967a9f&lt;/denchmark-link&gt;

Note image in the second gist... bottom row of expected is bottom right of actual 3x3 blocks... right values, wrong location.
		</comment>
		<comment id='4' author='AlexDBlack' date='2019-11-25T06:36:38Z'>
		Fixed quite a while ago.
		</comment>
	</comments>
</bug>