<bug id='6543' author='treo' open_date='2018-10-06T15:15:32Z' closed_time='2018-10-10T08:23:56Z'>
	<summary>a.mmuli(b, result) produces wrong results in result is a view on an f ordered array</summary>
	<description>
I ran into this issue first when the view was on the whole array like in the following code:
        final INDArray activations = Nd4j.createUninitialized(new long[]{1, 3, 1}, 'f');
        final INDArray z = activations.tensorAlongDimension(0, 1, 2);

        final INDArray a = Nd4j.rand(3, 4);
        final INDArray b = Nd4j.rand(4, 1);
        System.out.println(a.mmuli(b, z));
/*
[1,8806, 
 2,4756, 
 1,2774]
*/
        System.out.println(a.mmul(b));
/*
[1,2774, 
 2,4756, 
 1,8806]
*/
        System.out.println(activations);
/*
[[1,8806, 
  2,4756, 
  1,2774]]
*/
First it looked like it would only happen if the view was on the whole array, but while collecting information for this issue I've got even worse results:
        final INDArray activations = Nd4j.createUninitialized(new long[]{2, 3, 1}, 'f');
        final INDArray z = activations.tensorAlongDimension(0, 1, 2);

        final INDArray a = Nd4j.rand(3, 4);
        final INDArray b = Nd4j.rand(4, 1);
        System.out.println(a.mmuli(b, z));
/*
[0,8462, 
 1,6749e65, 
 1,7817]
*/
        System.out.println(a.mmul(b));
/*
[0,8462, 
 1,7817, 
 1,7691]
*/
        System.out.println(activations);
/*
[[0,8462, 
  1,7817, 
  1,7691], 

 [1,6749e65, 
  1,1927e180, 
  1,2964e219]]
*/
So it looks like the correct result is written to the holding array, but then the view itself contains wrong data.
This appears to work as intended when the last dimension is not 1 even if the view spans the whole array:
        final INDArray activations = Nd4j.createUninitialized(new long[]{1, 3, 2}, 'f');
        final INDArray z = activations.tensorAlongDimension(0, 1, 2);

        final INDArray a = Nd4j.rand(3, 4);
        final INDArray b = Nd4j.rand(4, 2);
        System.out.println(a.mmuli(b, z));
/*
[[    0,3508,    0,9562], 
 [    0,4043,    0,9546], 
 [    0,2221,    0,6694]]
*/
        System.out.println(a.mmul(b));
/*
[[    0,3508,    0,9562], 
 [    0,4043,    0,9546], 
 [    0,2221,    0,6694]]
*/
        System.out.println(activations);
/*
[[[    0,3508,    0,9562], 
  [    0,4043,    0,9546], 
  [    0,2221,    0,6694]]]
*/
However if the target is larger than the required place, the results again get put upside down:
        final INDArray activations = Nd4j.createUninitialized(new long[]{1, 3, 2}, 'f');
        final INDArray z = activations.tensorAlongDimension(0, 1, 2);

        final INDArray a = Nd4j.rand(3, 4);
        final INDArray b = Nd4j.rand(4, 1);
        System.out.println(a.mmuli(b, z));
/*
[[    1,1066,1,1927e180], 
 [    0,7974,2,8534e242], 
 [    0,8920,-1,1968e-248]]
*/
        System.out.println(a.mmul(b));
/*
[0,8920, 
 0,7974, 
 1,1066]
*/
        System.out.println(activations);
/*
[[[    1,1066,1,1927e180], 
  [    0,7974,2,8534e242], 
  [    0,8920,-1,1968e-248]]]
*/
	</description>
	<comments>
		<comment id='1' author='treo' date='2018-11-09T08:26:17Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>