<bug id='3269' author='silvioOlivastri' open_date='2017-04-18T14:38:49Z' closed_time='2017-05-08T12:20:11Z'>
	<summary>Something inside SequenceVectors.fit() remains WAITING</summary>
	<description>
Hi,
my environment is a .jar (that contain Word2Vec class) running inside a docker container.
Starting with train (.fit() method) I looked that at a certain point the process doesn't go forward.
My log was:
&lt;denchmark-code&gt;2017-04-18 14:24:19,199  INFO [main] (LyricsWord2Vec.java:36) - Pre-building...
2017-04-18 14:24:19,249  INFO [main] (Nd4jBackend.java:194) - Loaded [CpuBackend] backend
2017-04-18 14:24:19,341  INFO [main] (NativeOpsHolder.java:49) - Number of threads used for NativeOps: 6
2017-04-18 14:24:19,618  INFO [main] (Reflections.java:229) - Reflections took 237 ms to scan 1 urls, producing 29 keys and 189 values 
2017-04-18 14:24:19,805  INFO [main] (Nd4jBlas.java:36) - Number of threads used for BLAS: 6
2017-04-18 14:24:19,808  INFO [main] (DefaultOpExecutioner.java:544) - Backend used: [CPU]; OS: [Linux]
2017-04-18 14:24:19,809  INFO [main] (DefaultOpExecutioner.java:545) - Cores: [12]; Memory: [5.2GB];
2017-04-18 14:24:19,809  INFO [main] (DefaultOpExecutioner.java:546) - Blas vendor: [OPENBLAS]
2017-04-18 14:24:20,480  INFO [Thread-10] (BasicWordEmbedding.java:88) - Building model...
2017-04-18 14:24:20,544  INFO [Thread-10] (BasicWordEmbedding.java:79) - Fitting model...
2017-04-18 14:24:20,592  INFO [Thread-10] (SequenceVectors.java:127) - Starting vocabulary building...
2017-04-18 14:24:20,593 DEBUG [Thread-10] (VocabConstructor.java:180) - Target vocab size before building: [0]
2017-04-18 14:24:20,632 DEBUG [Thread-10] (VocabConstructor.java:197) - Trying source iterator: [0]
2017-04-18 14:24:20,648 DEBUG [Thread-10] (VocabConstructor.java:198) - Target vocab size before building: [0]
2017-04-18 14:24:25,685 DEBUG [Thread-10] (VocabConstructor.java:286) - Wating till all processes stop...
2017-04-18 14:24:25,687 DEBUG [Thread-10] (VocabConstructor.java:296) - Vocab size before truncation: [58971],  NumWords: [6121974], sequences parsed: [17984], counter: [6121974]
2017-04-18 14:24:25,751 DEBUG [Thread-10] (VocabConstructor.java:389) - Scavenger: Words before: 58971; Words after: 20494;
2017-04-18 14:24:25,751 DEBUG [Thread-10] (VocabConstructor.java:303) - Vocab size after truncation: [20494],  NumWords: [6057454], sequences parsed: [17984], counter: [6121974]
2017-04-18 14:24:28,448  INFO [Thread-10] (VocabConstructor.java:372) - Sequences checked: [17984], Current vocabulary size: [20494]; Sequences/sec: [2289.79];
2017-04-18 14:24:28,461  INFO [Thread-10] (WordVectorSerializer.java:2821) - Projected memory use for model: [46.91 MB]
2017-04-18 14:24:28,530  INFO [Thread-10] (InMemoryLookupTable.java:141) - Initializing syn1...
2017-04-18 14:24:28,594  INFO [Thread-10] (SequenceVectors.java:160) - Building learning algorithms:
2017-04-18 14:24:28,594  INFO [Thread-10] (SequenceVectors.java:162) -           building ElementsLearningAlgorithm: [SkipGram]
2017-04-18 14:24:28,598  INFO [Thread-10] (SequenceVectors.java:273) - Starting learning process...
&lt;/denchmark-code&gt;

For a good part of the initial process (after 2017-04-18 14:24:28,598  INFO [Thread-10] (SequenceVectors.java:273) - Starting learning process... log) the CPUs usage is 1110%, but then it's reduced to 0.7% (RAM usage is 2.5Gb more or less), so I think something went wrong...
Doing CTRL+\ the output was:
&lt;denchmark-code&gt;"C2 CompilerThread0" #5 daemon prio=9 os_prio=0 tid=0x000000000470a000 nid=0x5c waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

"Signal Dispatcher" #4 daemon prio=9 os_prio=0 tid=0x0000000004708800 nid=0x5b waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

"Finalizer" #3 daemon prio=8 os_prio=0 tid=0x00000000046d6800 nid=0x5a in Object.wait() [0x00007f1e383ec000]
   java.lang.Thread.State: WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        - waiting on &lt;0x0000000649dfb948&gt; (a java.lang.ref.ReferenceQueue$Lock)
        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143)
        - locked &lt;0x0000000649dfb948&gt; (a java.lang.ref.ReferenceQueue$Lock)
        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:164)
        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)

"Reference Handler" #2 daemon prio=10 os_prio=0 tid=0x00000000046d2000 nid=0x59 in Object.wait() [0x00007f1e384ed000]
   java.lang.Thread.State: WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        - waiting on &lt;0x0000000649ff8428&gt; (a java.lang.ref.Reference$Lock)
        at java.lang.Object.wait(Object.java:502)
        at java.lang.ref.Reference.tryHandlePending(Reference.java:191)
        - locked &lt;0x0000000649ff8428&gt; (a java.lang.ref.Reference$Lock)
        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)

"main" #1 prio=5 os_prio=0 tid=0x0000000002186000 nid=0x48 runnable [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

"VM Thread" os_prio=0 tid=0x00000000046ca800 nid=0x58 runnable 

"GC task thread#0 (ParallelGC)" os_prio=0 tid=0x0000000002169000 nid=0x4e runnable 

"GC task thread#1 (ParallelGC)" os_prio=0 tid=0x000000000216a800 nid=0x4f runnable 

"GC task thread#2 (ParallelGC)" os_prio=0 tid=0x000000000216c800 nid=0x50 runnable 

"GC task thread#3 (ParallelGC)" os_prio=0 tid=0x000000000216e000 nid=0x51 runnable 

"GC task thread#4 (ParallelGC)" os_prio=0 tid=0x0000000002170000 nid=0x52 runnable 

"GC task thread#5 (ParallelGC)" os_prio=0 tid=0x0000000002171800 nid=0x53 runnable 

"GC task thread#6 (ParallelGC)" os_prio=0 tid=0x0000000002173800 nid=0x54 runnable 

"GC task thread#7 (ParallelGC)" os_prio=0 tid=0x0000000002175000 nid=0x55 runnable 

"GC task thread#8 (ParallelGC)" os_prio=0 tid=0x0000000002177000 nid=0x56 runnable 

"GC task thread#9 (ParallelGC)" os_prio=0 tid=0x0000000002178800 nid=0x57 runnable 

"VM Periodic Task Thread" os_prio=0 tid=0x0000000004716800 nid=0x61 waiting on condition 

JNI global references: 262

Heap
 PSYoungGen      total 1950208K, used 172483K [0x0000000743000000, 0x00000007bff00000, 0x00000007c0000000)
  eden space 1856000K, 6% used [0x0000000743000000,0x000000074aae1ee0,0x00000007b4480000)
  from space 94208K, 49% used [0x00000007b4480000,0x00000007b720ef10,0x00000007ba080000)
  to   space 92672K, 0% used [0x00000007ba480000,0x00000007ba480000,0x00000007bff00000)
 ParOldGen       total 440832K, used 296413K [0x0000000649000000, 0x0000000663e80000, 0x0000000743000000)
  object space 440832K, 67% used [0x0000000649000000,0x000000065b177458,0x0000000663e80000)
 Metaspace       used 17897K, capacity 18120K, committed 18432K, reserved 1067008K
  class space    used 1658K, capacity 1747K, committed 1792K, reserved 1048576K
&lt;/denchmark-code&gt;

What's happened??
Ps:

DL4J version: 0.8
.jar was built into MacOS 10.12 but docker run ubuntu 16.04

	</description>
	<comments>
		<comment id='1' author='silvioOlivastri' date='2017-04-18T16:02:18Z'>
		Try to disable parallel tokenization.
		</comment>
		<comment id='2' author='silvioOlivastri' date='2017-04-19T09:54:32Z'>
		Yes, now all works fine! Thanks! So, when I can't use parallel tokenization? Or it's a bug?
Disable parallel tokenization reduce performance drastically?
		</comment>
		<comment id='3' author='silvioOlivastri' date='2017-05-08T12:20:11Z'>
		Thanks for highlighting this issue. Fixed on current master.
		</comment>
		<comment id='4' author='silvioOlivastri' date='2018-09-28T14:26:42Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>