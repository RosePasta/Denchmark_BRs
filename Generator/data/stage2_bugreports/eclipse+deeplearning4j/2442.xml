<bug id='2442' author='xuzhongxing' open_date='2016-12-06T03:40:39Z' closed_time='2017-02-17T00:17:03Z'>
	<summary>UNK in word2vec is not handled correctly</summary>
	<description>

It's not in huffman tree. Do we need it in huffman tree?
It's not serialized correctly in WordVectorSerializer, because it is not in idxMap.

If we do not need UNK in huffman tree, then here is a fix for WordVectorSerializer.
&lt;denchmark-code&gt;diff --git a/deeplearning4j-nlp-parent/deeplearning4j-nlp/src/main/java/org/deeplearning4j/models/embeddings/loader/WordVectorSerializer.java b/deeplearning4j-nlp-parent/deeplearning4j-nlp/src/main/java/org/deeplearning4j/models/embeddings/loader/WordVectorSerializer.java
index ca619ee..99f20b6 100755
--- a/deeplearning4j-nlp-parent/deeplearning4j-nlp/src/main/java/org/deeplearning4j/models/embeddings/loader/WordVectorSerializer.java
+++ b/deeplearning4j-nlp-parent/deeplearning4j-nlp/src/main/java/org/deeplearning4j/models/embeddings/loader/WordVectorSerializer.java
@@ -68,6 +68,7 @@ import java.nio.file.Files;
 import java.nio.file.Paths;
 import java.nio.file.StandardCopyOption;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.zip.GZIPInputStream;
@@ -404,13 +405,13 @@ public class WordVectorSerializer {
 
         PrintWriter writer = new PrintWriter(new OutputStreamWriter(stream, "UTF-8"));
 
-        for (int x = 0; x &lt; vocabCache.numWords(); x++) {
-            T element = vocabCache.elementAtIndex(x);
+        Collection&lt;String&gt; words = vocabCache.words();
 
+        for (String w : words) {
             StringBuilder builder = new StringBuilder();
 
-            builder.append(encodeB64(element.getLabel())).append(" ");
-            INDArray vec = lookupTable.vector(element.getLabel());
+            builder.append(encodeB64(w)).append(" ");
+            INDArray vec = lookupTable.vector(w);
             for (int i = 0; i &lt; vec.length(); i++) {
                 builder.append(vec.getDouble(i));
                 if (i &lt; vec.length() - 1) builder.append(" ");
@@ -582,6 +583,12 @@ public class WordVectorSerializer {
         // writing out huffman tree
         try (PrintWriter writer = new PrintWriter(new FileWriter(tempFileCodes))) {
             for (int i = 0; i &lt; vectors.getVocab().numWords(); i++) {
+
+                // UNK symbol is not in huffman tree
+                if (vectors.getConfiguration().isUseHierarchicSoftmax() &amp;&amp; (i == vectors.getVocab().numWords() - 1)) {
+                    continue;
+                }
+
                 VocabWord word = vectors.getVocab().elementAtIndex(i);
                 StringBuilder builder = new StringBuilder(encodeB64(word.getLabel())).append(" ");
                 for (int code: word.getCodes()) {
@@ -606,6 +613,12 @@ public class WordVectorSerializer {
         // writing out huffman tree
         try (PrintWriter writer = new PrintWriter(new FileWriter(tempFileHuffman))) {
             for (int i = 0; i &lt; vectors.getVocab().numWords(); i++) {
+
+                // UNK symbol is not in huffman tree
+                if (vectors.getConfiguration().isUseHierarchicSoftmax() &amp;&amp; (i == vectors.getVocab().numWords() - 1)) {
+                    continue;
+                }
+
                 VocabWord word = vectors.getVocab().elementAtIndex(i);
                 StringBuilder builder = new StringBuilder(encodeB64(word.getLabel())).append(" ");
                 for (int point: word.getPoints()) {
@@ -629,6 +642,12 @@ public class WordVectorSerializer {
         // writing out word frequencies
         try (PrintWriter writer = new PrintWriter(new FileWriter(tempFileFreqs))) {
             for (int i = 0; i &lt; vectors.getVocab().numWords(); i++) {
+
+                // UNK symbol is not in huffman tree
+                if (vectors.getConfiguration().isUseHierarchicSoftmax() &amp;&amp; (i == vectors.getVocab().numWords() - 1)) {
+                    continue;
+                }
+
                 VocabWord word = vectors.getVocab().elementAtIndex(i);
                 StringBuilder builder = new StringBuilder(encodeB64(word.getLabel())).append(" ").append(word.getElementFrequency()).append(" ").append(vectors.getVocab().docAppearedIn(word.getLabel()));
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='xuzhongxing' date='2016-12-06T07:08:55Z'>
		You're definitely right here.
As discussed in gitter - huffman tree fix is  incoming
		</comment>
		<comment id='2' author='xuzhongxing' date='2019-01-19T18:06:35Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>