<bug id='5784' author='TheKingDiamond' open_date='2018-07-03T08:31:12Z' closed_time='2018-07-31T12:04:43Z'>
	<summary>Cannot turn off Word2Vec parallel tokenization</summary>
	<description>
When calling fit() on a configured Word2Vec object in Java, it seems that the value set for allowParallelTokenization by the Word2Vec.Builder is not carried through to where it is needed in the code.
Specifically, the following should build a Word2Vec object that does not use parallel threads during the tokenization stage:
&lt;denchmark-code&gt;Word2Vec vec = new Word2Vec.Builder()
                ...set some hyperparameters...
                .allowParallelTokenization(false)
                .build();
&lt;/denchmark-code&gt;

The call to build() creates a new SentenceTransformer object, which is used in the iterator, which correctly contains the value false for the field allowMultithreading.
When fit() is called on the configured Word2Vec object, there is call to the SequenceVectors method buildVocab() - this creates a VocabConstructor object which is then used to construct the vocabulary from the text corpus. The initialization of this object (line 112 of SequenceVectors) is as follows:
&lt;denchmark-code&gt;VocabConstructor&lt;T&gt; constructor = new VocabConstructor.Builder&lt;T&gt;().addSource(iterator, minWordFrequency)
        .setTargetVocabCache(vocab).fetchLabels(trainSequenceVectors).setStopWords(stopWords)
        .enableScavenger(enableScavenger).setEntriesLimit(vocabLimit)
        .setUnk(useUnknown &amp;&amp; unknownElement != null ? unknownElement : null).build();
&lt;/denchmark-code&gt;

This is missing a call to the allowParallelTokenization of VocabConstructor.Builder, thus the default value of true is always used and parallel tokenization is essentially always on!
Version: 1.0.0-beta.
	</description>
	<comments>
		<comment id='1' author='TheKingDiamond' date='2018-07-16T12:35:25Z'>
		Thank you &lt;denchmark-link:https://github.com/raver119&gt;@raver119&lt;/denchmark-link&gt;
 !
		</comment>
		<comment id='2' author='TheKingDiamond' date='2018-07-31T12:04:43Z'>
		Fixed. Thanks for highlighting this problem.
		</comment>
		<comment id='3' author='TheKingDiamond' date='2018-09-12T09:24:58Z'>
		Hi &lt;denchmark-link:https://github.com/raver119&gt;@raver119&lt;/denchmark-link&gt;
 , I see that this fix has gone into 1.0.0-beta2 and I am now able to set parallel tokenization off and this is carried through to the correct place in the code. However, training a model, even on the smallest of text files, does not seem to finish. Have you tested training a model with parallel tokenization turned off? Many thanks!
		</comment>
		<comment id='4' author='TheKingDiamond' date='2018-09-12T19:53:20Z'>
		Yes, it's covered with tests. Got some output to show?
		</comment>
		<comment id='5' author='TheKingDiamond' date='2018-09-12T19:53:28Z'>
		p.s. and threads dump please
		</comment>
		<comment id='6' author='TheKingDiamond' date='2018-10-12T20:33:18Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
		<comment id='7' author='TheKingDiamond' date='2018-10-18T15:53:35Z'>
		Hi &lt;denchmark-link:https://github.com/raver119&gt;@raver119&lt;/denchmark-link&gt;
 , sorry for the delay in my response! I've been away but I am back now.
I have isolated the root of the issue by pausing execution whilst my simple Java program is hanging (it gets stuck during the call to fit() on a Word2Vec object). The program simply sets the parameters on a Word2Vec object and then calls the fit() method, as described in my first post for this issue.
The cause of this issue is in the protected class VocabRunnable within the VocabConstructor file. This class has an instance boolean variable done which is never explicitly assigned a value. It therefore takes the default value of false; this value is never changed anywhere else in the code. This causes the following method (line 571, VocabConstructor$VocabRunnable) to enter an infinite loop, the VocabRunnable is waiting forever:
&lt;denchmark-code&gt;public void awaitDone() throws InterruptedException {
    synchronized (this) {
        while (! done) {
            this.wait();
        }
    }
}
&lt;/denchmark-code&gt;

This awaitDone() method is called in the VocabConstructor method buildJointVocabulary, and is only accessed when allowParallelBuilder is false. Thus, this infinite loop is only entered when calling fit on a Word2Vec object where parallel tokenization has been disallowed.
		</comment>
		<comment id='8' author='TheKingDiamond' date='2018-11-25T09:38:34Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>