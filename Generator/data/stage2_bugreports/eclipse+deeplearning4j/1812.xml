<bug id='1812' author='rasoolims' open_date='2016-07-12T02:59:40Z' closed_time='2016-07-13T23:45:55Z'>
	<summary>FileOutputStream/FileInputStream writeObject/readObject in v0.4.0 does not work for ComputationGraph</summary>
	<description>
I was using the previous version and I was saving and loading ComputationGraph via serialization and it worked without any problem. Now that I change to v0.4.0 it does not work properly. In other words, when I use the ComputationGraph to predict on my data, I get accuracy A1 but when I save and then load the same exact model I get accuracy A2 while A1&gt;&gt;A2 with the exact same function.
	</description>
	<comments>
		<comment id='1' author='rasoolims' date='2016-07-12T03:01:45Z'>
		ModelSerializer functionality hasn't changed from version to version. Would you mind posting code we could reproduce this with?
		</comment>
		<comment id='2' author='rasoolims' date='2016-07-12T03:36:41Z'>
		I have the following func:
private static void evaluate(final ComputationGraph net, MultiDataSetIterator iter) throws Exception {
  iter.reset();
  Evaluation evaluation = new Evaluation(2 * (dependencyRelations.size() + 1));
  while (iter.hasNext()) {
    MultiDataSet t = iter.next();
    INDArray[] features = t.getFeatures();
    INDArray labels = t.getLabels()[0];
    INDArray predicted = net.output(false, features)[0];
    evaluation.eval(labels, predicted);
 }
 System.out.println("acc: " + evaluation.accuracy());
 System.out.println("precision: " + evaluation.precision());
 System.out.println("recall: " + evaluation.recall());
 System.out.println("f1 score: " + evaluation.f1() + "\n");

FileOutputStream fos = new FileOutputStream("/tmp/model.m");
GZIPOutputStream gz = new GZIPOutputStream(fos);
ObjectOutput writer = new ObjectOutputStream(gz);
writer.writeObject(net);
writer.close();

FileInputStream fis = new FileInputStream("/tmp/model.m");
GZIPInputStream gzi = new GZIPInputStream(fis);
ObjectInput reader = new ObjectInputStream(gzi);
ComputationGraph savedNet = (ComputationGraph) reader.readObject();

iter.reset();
evaluation = new Evaluation(2 * (dependencyRelations.size() + 1));
while (iter.hasNext()) {
  MultiDataSet t = iter.next();
  INDArray[] features = t.getFeatures();
  INDArray labels = t.getLabels()[0];
  INDArray predicted =  savedNet.output(false, features)[0];
  evaluation.eval(labels, predicted);
}
 System.out.println("acc: " + evaluation.accuracy());
 System.out.println("precision: " + evaluation.precision());
 System.out.println("recall: " + evaluation.recall());
 System.out.println("f1 score: " + evaluation.f1() + "\n");
}
The output is
&lt;denchmark-code&gt;acc: 0.9878048780487805
precision: 0.9875
recall: 0.9886363636363636
f1 score: 0.9880678550891318

acc: 0.2621951219512195
precision: 0.24879227053140096
recall: 0.28289473684210525
f1 score: 0.26474983561480064
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='rasoolims' date='2016-07-12T04:46:43Z'>
		Can you try with the ModelSerializer functionality? &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/blob/12599e867acec3aad9fb76a04cf33d61e6139431/deeplearning4j-core/src/main/java/org/deeplearning4j/util/ModelSerializer.java&gt;https://github.com/deeplearning4j/deeplearning4j/blob/12599e867acec3aad9fb76a04cf33d61e6139431/deeplearning4j-core/src/main/java/org/deeplearning4j/util/ModelSerializer.java&lt;/denchmark-link&gt;

As a general rule, we encourage people to use that (instead of Java serialization) as Java serialization is brittle to changes to any of the classes between versions.
In theory java serialization should still work, however.
		</comment>
		<comment id='4' author='rasoolims' date='2016-07-12T15:57:23Z'>
		Yeah, it works now. At least I can say in the new version the original java serializer does not work!
		</comment>
		<comment id='5' author='rasoolims' date='2016-07-13T23:45:54Z'>
		Closing this. Thanks much! &lt;denchmark-link:https://github.com/rasoolims&gt;@rasoolims&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='rasoolims' date='2019-01-20T22:53:14Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>