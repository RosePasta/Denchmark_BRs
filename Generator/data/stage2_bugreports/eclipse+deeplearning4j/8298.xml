<bug id='8298' author='guigautier' open_date='2019-10-18T07:34:11Z' closed_time='2019-10-26T01:38:10Z'>
	<summary>Keras model serving for inference with dl4j</summary>
	<description>


I saved a keras model with weights with python and loaded a ComputationGraph in java on DL4j using


model = KerasModelImport.importKerasModelAndWeights(unet, enforceTrainingConfig=false)


I create my input INArray with Nd4j.create(floats)
and run the inference :


INDArray output = model.output(input)


I retrieve the output :


float[][] x = output.reshape(new int[]{floats.length, 256 * 256}).toFloatMatrix();
 There is a output but similar to the input with some different pattern. The result is not correct. 
I tried this model, it works well in python with Keras and in Java with a frozenModel (freezegraph) on Tensorflow.
Does anyone try to use trained keras model on dl4j ?
I expect to reproduce the inference on dl4j as I got on Tensorflow.
Have you ever encountered this issue ? any hints will be helpful, thanks.
&lt;denchmark-link:https://stackoverflow.com/questions/58434187/keras-model-serving-for-inference-with-dl4j&gt;https://stackoverflow.com/questions/58434187/keras-model-serving-for-inference-with-dl4j&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='guigautier' date='2019-10-18T13:58:27Z'>
		Seem to be the same issue : &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/issues/8295&gt;#8295&lt;/denchmark-link&gt;

input : &lt;denchmark-link:https://i.stack.imgur.com/n8DQ5.png&gt;https://i.stack.imgur.com/n8DQ5.png&lt;/denchmark-link&gt;

output : &lt;denchmark-link:https://i.stack.imgur.com/IUHuj.png&gt;https://i.stack.imgur.com/IUHuj.png&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='guigautier' date='2019-10-21T18:58:26Z'>
		Are you using beta4? There is a bug that was fixed in beta5.
		</comment>
		<comment id='3' author='guigautier' date='2019-10-22T14:25:04Z'>
		I'm using beta5
This is my maven dependencies :
&lt;denchmark-code&gt;   &lt;dependency&gt;
        &lt;groupId&gt;org.nd4j&lt;/groupId&gt;
        &lt;artifactId&gt;nd4j-api&lt;/artifactId&gt;
        &lt;version&gt;1.0.0-beta5&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.deeplearning4j&lt;/groupId&gt;
        &lt;artifactId&gt;deeplearning4j-core&lt;/artifactId&gt;
        &lt;version&gt;1.0.0-beta5&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.deeplearning4j&lt;/groupId&gt;
        &lt;artifactId&gt;deeplearning4j-nn&lt;/artifactId&gt;
        &lt;version&gt;1.0.0-beta5&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.deeplearning4j&lt;/groupId&gt;
        &lt;artifactId&gt;deeplearning4j-modelimport&lt;/artifactId&gt;
        &lt;version&gt;1.0.0-beta5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.deeplearning4j&lt;/groupId&gt;
        &lt;artifactId&gt;deeplearning4j-cuda-10.0&lt;/artifactId&gt;
        &lt;version&gt;1.0.0-beta5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.deeplearning4j&lt;/groupId&gt;
        &lt;artifactId&gt;deeplearning4j-parallel-wrapper&lt;/artifactId&gt;
        &lt;version&gt;1.0.0-beta5&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='guigautier' date='2019-10-22T21:46:25Z'>
		Thank you for the update. Will you please upload either your model or the model architecture (json)? Also, what OS and what version of Keras?
		</comment>
		<comment id='5' author='guigautier' date='2019-10-23T08:25:19Z'>
		I'm using Windows 10 and Keras 2.2.4 with tensorflow  backend 1.13.1.
And this is my model
&lt;denchmark-link:https://github.com/eclipse/deeplearning4j/files/3761049/unet.zip&gt;unet.zip&lt;/denchmark-link&gt;

Thank you.
		</comment>
		<comment id='6' author='guigautier' date='2019-10-23T11:56:34Z'>
		Here's my attempt to reproduce this from the provided JSON configuration.
I basically overfit the provided image, then compared results in DL4J vs. Keras.
I am seeing a difference...
Absolute difference over all output pixels:
&lt;denchmark-code&gt;Min diff: 1.1920928955078125E-7
Max diff: 0.4378690719604492
Avg diff: 0.027073459699749947
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/2360237/67390139-c1d93980-f5e7-11e9-90fd-135ca233c9d0.png&gt;&lt;/denchmark-link&gt;

So, not as extreme as your images, but still slightly "washed out" and corner artifact...
Code to reproduce:
&lt;denchmark-link:https://gist.github.com/AlexDBlack/3a4f58edcf243ef4d3faa73ee176eb04&gt;https://gist.github.com/AlexDBlack/3a4f58edcf243ef4d3faa73ee176eb04&lt;/denchmark-link&gt;

So, I'd say this is confirmed as a bug of some description. Will look into it further and try to isolate it.
		</comment>
		<comment id='7' author='guigautier' date='2019-10-23T12:35:15Z'>
		So, it's definitely coming from deconv layers. If I use the same input image as the keras model in DL4J, activation differences are around 1e-8 on average for the conv layers... until the first deconv (conv2d_transpose_1)
Code and output: &lt;denchmark-link:https://gist.github.com/AlexDBlack/abb3bf0a6f4f384863fa467f498447a4&gt;https://gist.github.com/AlexDBlack/abb3bf0a6f4f384863fa467f498447a4&lt;/denchmark-link&gt;

I'm using Keras 2.3.1 btw.
Note difference is a little bigger with NativeImageLoader, not sure why (probably just slightly different resize and/or grayscale conversion algorithms or something).
Will look at this more tomorrow, unless &lt;denchmark-link:https://github.com/eraly&gt;@eraly&lt;/denchmark-link&gt;
 debugs this first.
		</comment>
		<comment id='8' author='guigautier' date='2019-10-23T23:44:53Z'>
		So, a few things I've noticed here
First: this padding calculation is wrong, but it's unused anyway, and will be calculated/replaced in the c++ op instead:
&lt;denchmark-link:https://github.com/eclipse/deeplearning4j/blob/master/deeplearning4j/deeplearning4j-nn/src/main/java/org/deeplearning4j/nn/layers/convolution/Deconvolution2DLayer.java#L202&gt;https://github.com/eclipse/deeplearning4j/blob/master/deeplearning4j/deeplearning4j-nn/src/main/java/org/deeplearning4j/nn/layers/convolution/Deconvolution2DLayer.java#L202&lt;/denchmark-link&gt;

(we end up with "padding" calculated as [24, 24] in this case)
Second: bias add appears to be hardcoded to NCHW format:
&lt;denchmark-link:https://github.com/eclipse/deeplearning4j/blob/master/libnd4j/include/ops/declarable/generic/nn/convo/deconv2d.cpp#L84&gt;https://github.com/eclipse/deeplearning4j/blob/master/libnd4j/include/ops/declarable/generic/nn/convo/deconv2d.cpp#L84&lt;/denchmark-link&gt;

I believe this should be helpers::addBias(block, *output, *bias, *output, isNCHW);
		</comment>
		<comment id='9' author='guigautier' date='2019-10-24T00:13:42Z'>
		The C++ implementation gives incorrect answers. Here is a simple test case. The expected answers are calculated via Keras. Keras code is included in the gist. Attaching the h5 model from Keras if someone wants to debug the java side. For the c++ side you don't need anything else other than what is in the gist since I manually recreate the call to libnd4j
&lt;denchmark-link:https://gist.github.com/eraly/49dfdb401b0347d8183027edae462f3e&gt;https://gist.github.com/eraly/49dfdb401b0347d8183027edae462f3e&lt;/denchmark-link&gt;

Keras Model:
&lt;denchmark-link:https://github.com/eclipse/deeplearning4j/files/3765088/de_conv.h5.zip&gt;de_conv.h5.zip&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='guigautier' date='2019-10-24T00:32:21Z'>
		For a case with biases not set to zero:
&lt;denchmark-link:https://gist.github.com/eraly/0824294d453261c58ef0585d70496464&gt;https://gist.github.com/eraly/0824294d453261c58ef0585d70496464&lt;/denchmark-link&gt;

Keras Model:
&lt;denchmark-link:https://github.com/eclipse/deeplearning4j/files/3765115/de_conv.h5.zip&gt;de_conv.h5.zip&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='guigautier' date='2019-10-24T00:35:29Z'>
		Also of note: With the case here (i.e combination of kernel, stride and input sizes) the output shape with same == output shape with zero padding and not same. This gives the right answer. So it might be an issue only with same mode?
		</comment>
		<comment id='12' author='guigautier' date='2019-10-24T06:48:49Z'>
		Update here: looks like our shape and padding calculation may not be right in c++, in particular the args passed to col2im. I'll go through this and work out what it should be...
Pg24-26 here in case anyone wants to know: &lt;denchmark-link:https://arxiv.org/pdf/1603.07285.pdf&gt;https://arxiv.org/pdf/1603.07285.pdf&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='guigautier' date='2019-10-24T06:50:49Z'>
		addBias being hardcoded to NCHW is fine, since temporary output array is always in NCHW format.
		</comment>
		<comment id='14' author='guigautier' date='2019-10-25T13:15:32Z'>
		Fixed here: &lt;denchmark-link:https://github.com/KonduitAI/deeplearning4j/pull/12&gt;KonduitAI#12&lt;/denchmark-link&gt;

I added a whole lot of test cases pulled from Keras here also &lt;denchmark-link:https://github.com/KonduitAI/dl4j-test-resources/pull/2&gt;KonduitAI/dl4j-test-resources#2&lt;/denchmark-link&gt;

2 test cases left there (valid mode, output size differs; separate issue to same mode problem here).
I should be able to merge that tomorrow, then push that back to Eclipse. New snapshots with the fix will likely be up some time next week.
		</comment>
		<comment id='15' author='guigautier' date='2019-10-26T01:41:54Z'>
		Thanks for reporting this. The fix has been merged here: &lt;denchmark-link:https://github.com/KonduitAI/deeplearning4j/pull/12&gt;KonduitAI#12&lt;/denchmark-link&gt;

This will be merged back to the Eclipse repo shortly, and will be available on snapshots some time next week.
&lt;denchmark-link:https://user-images.githubusercontent.com/2360237/67612357-d25b0100-f7ed-11e9-96be-3fdcffeec816.png&gt;&lt;/denchmark-link&gt;

Keras vs. DL4J layer activations comparison from earlier:
&lt;denchmark-link:https://gist.github.com/AlexDBlack/fc25ead7c88f207fa7ca9f43154014c7&gt;https://gist.github.com/AlexDBlack/fc25ead7c88f207fa7ca9f43154014c7&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>