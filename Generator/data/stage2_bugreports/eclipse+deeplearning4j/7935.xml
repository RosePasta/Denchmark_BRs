<bug id='7935' author='AlexDBlack' open_date='2019-06-22T07:23:12Z' closed_time='2019-11-28T18:08:51Z'>
	<summary>libnd4j: fake_quant_with_min_max_args does not match TF</summary>
	<description>
&lt;denchmark-code&gt;    @Test
    public void testFakeQuant(){
        INDArray in = Nd4j.linspace(DataType.FLOAT, 0, 0.01, 100);
        INDArray min = Nd4j.scalar(0.0f);
        INDArray max = Nd4j.scalar(1.0f);

        INDArray out = in.like();

        System.out.println(in);


        DynamicCustomOp op = DynamicCustomOp.builder("fake_quant_with_min_max_args")
                .addInputs(in, min, max)
                .addOutputs(out)
                .addIntegerArguments(4, 0)      //4 bits, don't narrow
                .build();

        Nd4j.exec(op);

        System.out.println(out);

        INDArray expTF = Nd4j.createFromArray(0.0f, 0.0f, 0.0f, 0.0f, 0.06666667, 0.06666667, 0.06666667, 0.06666667, 0.06666667, 0.06666667, 0.06666667, 0.13333334,
                0.13333334, 0.13333334, 0.13333334, 0.13333334, 0.13333334, 0.20000002, 0.20000002, 0.20000002, 0.20000002, 0.20000002, 0.20000002, 0.20000002,
                0.26666668, 0.26666668, 0.26666668, 0.26666668, 0.26666668, 0.26666668, 0.26666668, 0.33333334, 0.33333334, 0.33333334, 0.33333334, 0.33333334,
                0.33333334, 0.40000004, 0.40000004, 0.40000004, 0.40000004, 0.40000004, 0.40000004, 0.40000004, 0.4666667 , 0.4666667, 0.4666667, 0.4666667,
                0.4666667, 0.4666667, 0.4666667, 0.53333336, 0.53333336, 0.53333336, 0.53333336, 0.53333336, 0.53333336, 0.6, 0.6, 0.6,
                0.6, 0.6, 0.6, 0.6, 0.6666667, 0.6666667, 0.6666667, 0.6666667, 0.6666667, 0.6666667, 0.6666667, 0.73333335,
                0.73333335, 0.73333335, 0.73333335, 0.73333335, 0.73333335, 0.8000001, 0.8000001, 0.8000001, 0.8000001, 0.8000001, 0.8000001, 0.8000001,
                0.86666673, 0.86666673, 0.86666673, 0.86666673, 0.86666673, 0.86666673, 0.86666673, 0.9333334, 0.9333334, 0.9333334, 0.9333334, 0.9333334,
                0.9333334, 1.0f, 1.0f, 1.0f);

        assertEquals(expTF, out);
    }
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;Expected :[         0,         0,         0,         0,    0.0667,    0.0667,    0.0667,    0.0667,    0.0667,    0.0667,    0.0667,    0.1333,    0.1333,    0.1333,    0.1333,    0.1333,    0.1333,    0.2000,    0.2000,    0.2000,    0.2000,    0.2000,    0.2000,    0.2000,    0.2667,    0.2667,    0.2667,    0.2667,    0.2667,    0.2667,    0.2667,    0.3333,    0.3333,    0.3333,    0.3333,    0.3333,    0.3333,    0.4000,    0.4000,    0.4000,    0.4000,    0.4000,    0.4000,    0.4000,    0.4667,    0.4667,    0.4667,    0.4667,    0.4667,    0.4667,    0.4667,    0.5333,    0.5333,    0.5333,    0.5333,    0.5333,    0.5333,    0.6000,    0.6000,    0.6000,    0.6000,    0.6000,    0.6000,    0.6000,    0.6667,    0.6667,    0.6667,    0.6667,    0.6667,    0.6667,    0.6667,    0.7333,    0.7333,    0.7333,    0.7333,    0.7333,    0.7333,    0.8000,    0.8000,    0.8000,    0.8000,    0.8000,    0.8000,    0.8000,    0.8667,    0.8667,    0.8667,    0.8667,    0.8667,    0.8667,    0.8667,    0.9333,    0.9333,    0.9333,    0.9333,    0.9333,    0.9333,    1.0000,    1.0000,    1.0000]
Actual   :[         0,         0,         0,         0,         0,         0,         0,    0.1250,    0.1250,    0.1250,    0.1250,    0.1250,    0.1250,    0.1250,    0.1250,    0.1250,    0.1250,    0.1250,    0.1250,    0.2500,    0.2500,    0.2500,    0.2500,    0.2500,    0.2500,    0.2500,    0.2500,    0.2500,    0.2500,    0.2500,    0.2500,    0.2500,    0.3750,    0.3750,    0.3750,    0.3750,    0.3750,    0.3750,    0.3750,    0.3750,    0.3750,    0.3750,    0.3750,    0.3750,    0.5000,    0.5000,    0.5000,    0.5000,    0.5000,    0.5000,    0.5000,    0.5000,    0.5000,    0.5000,    0.5000,    0.5000,    0.5000,    0.6250,    0.6250,    0.6250,    0.6250,    0.6250,    0.6250,    0.6250,    0.6250,    0.6250,    0.6250,    0.6250,    0.6250,    0.7500,    0.7500,    0.7500,    0.7500,    0.7500,    0.7500,    0.7500,    0.7500,    0.7500,    0.7500,    0.7500,    0.7500,    0.7500,    0.8750,    0.8750,    0.8750,    0.8750,    0.8750,    0.8750,    0.8750,    0.8750,    0.8750,    0.8750,    0.8750,    0.8750,    1.0000,    1.0000,    1.0000,    1.0000,    1.0000,    1.0000]
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;tf.reset_default_graph()
linspace = tf.linspace(start=0.0, stop=0.99, num=100)
op = tf.quantization.fake_quant_with_min_max_vars(inputs=linspace, min=0.0, max=1.0, num_bits=4, narrow_range=False)
sess = tf.Session()
out = sess.run([linspace, op])
print(out[0].shape)
print(out[0]);
print(out[1]);
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;(100,)
[0.         0.01       0.02       0.03       0.04       0.05
 0.06       0.07       0.08       0.09       0.09999999 0.11
 0.12       0.13       0.14       0.14999999 0.16       0.17
 0.17999999 0.19       0.19999999 0.21       0.22       0.22999999
 0.24       0.25       0.26       0.26999998 0.28       0.29
 0.29999998 0.31       0.32       0.32999998 0.34       0.35
 0.35999998 0.37       0.38       0.39       0.39999998 0.41
 0.42       0.42999998 0.44       0.45       0.45999998 0.47
 0.48       0.48999998 0.5        0.51       0.52       0.53
 0.53999996 0.55       0.56       0.57       0.58       0.59
 0.59999996 0.61       0.62       0.63       0.64       0.65
 0.65999997 0.66999996 0.68       0.69       0.7        0.71
 0.71999997 0.72999996 0.74       0.75       0.76       0.77
 0.78       0.78999996 0.79999995 0.81       0.82       0.83
 0.84       0.84999996 0.85999995 0.87       0.88       0.89
 0.9        0.90999997 0.91999996 0.93       0.94       0.95
 0.96       0.96999997 0.97999996 0.98999995]
[0.         0.         0.         0.         0.06666667 0.06666667
 0.06666667 0.06666667 0.06666667 0.06666667 0.06666667 0.13333334
 0.13333334 0.13333334 0.13333334 0.13333334 0.13333334 0.20000002
 0.20000002 0.20000002 0.20000002 0.20000002 0.20000002 0.20000002
 0.26666668 0.26666668 0.26666668 0.26666668 0.26666668 0.26666668
 0.26666668 0.33333334 0.33333334 0.33333334 0.33333334 0.33333334
 0.33333334 0.40000004 0.40000004 0.40000004 0.40000004 0.40000004
 0.40000004 0.40000004 0.4666667  0.4666667  0.4666667  0.4666667
 0.4666667  0.4666667  0.4666667  0.53333336 0.53333336 0.53333336
 0.53333336 0.53333336 0.53333336 0.6        0.6        0.6
 0.6        0.6        0.6        0.6        0.6666667  0.6666667
 0.6666667  0.6666667  0.6666667  0.6666667  0.6666667  0.73333335
 0.73333335 0.73333335 0.73333335 0.73333335 0.73333335 0.8000001
 0.8000001  0.8000001  0.8000001  0.8000001  0.8000001  0.8000001
 0.86666673 0.86666673 0.86666673 0.86666673 0.86666673 0.86666673
 0.86666673 0.9333334  0.9333334  0.9333334  0.9333334  0.9333334
 0.9333334  1.         1.         1.        ]
&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>