<bug id='7737' author='imod' open_date='2019-05-15T07:43:02Z' closed_time='2019-07-05T09:51:08Z'>
	<summary>NL4J: threads failing to stop</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue Description&lt;/denchmark-h&gt;

We use NL4J to do predictions based on a pretrained keras model. We do this from within tomcat (via spring boot). This is working fine, but the Tomcat shutdown does take quite a while because of threads failing to stop. The messages we get while tomcat shutsdown are these:
&lt;denchmark-code&gt;May 15, 2019 7:08:07 AM org.apache.coyote.AbstractProtocol pause
INFO: Pausing ProtocolHandler ["http-nio-8080"]
May 15, 2019 7:08:07 AM org.apache.catalina.core.StandardService stopInternal
INFO: Stopping service [Tomcat]
May 15, 2019 7:08:07 AM org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads
WARNING: The web application [ROOT] appears to have started a thread named [JavaCPP Deallocator] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.2/java.lang.Object.wait(Native Method)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:155)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:176)
 app//org.bytedeco.javacpp.Pointer$DeallocatorThread.run(Pointer.java:302)
May 15, 2019 7:08:07 AM org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads
WARNING: The web application [ROOT] appears to have started a thread named [Workspace deallocator thread] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.2/java.lang.Object.wait(Native Method)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:155)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:176)
 app//org.nd4j.linalg.memory.provider.BasicWorkspaceManager$WorkspaceDeallocatorThread.run(BasicWorkspaceManager.java:292)
May 15, 2019 7:08:07 AM org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads
WARNING: The web application [ROOT] appears to have started a thread named [NativeRandomDeallocator thread 0] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.2/java.lang.Object.wait(Native Method)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:155)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:176)
 app//org.nd4j.rng.deallocator.NativeRandomDeallocator$DeallocatorThread.run(NativeRandomDeallocator.java:96)
May 15, 2019 7:08:07 AM org.apache.coyote.AbstractProtocol stop
INFO: Stopping ProtocolHandler ["http-nio-8080"]
May 15, 2019 7:08:07 AM org.apache.coyote.AbstractProtocol destroy
INFO: Destroying ProtocolHandler ["http-nio-8080"]
&lt;/denchmark-code&gt;

as you can see, there are three different threads causing issues, these are:

NL4J: "Workspace deallocator thread"
NL4J: "NativeRandomDeallocator thread 0"
JavaCPP: "JavaCPP Deallocator"

I understand this might not be an issue in many cases but it really hurts while doing local development and does not give a good feeling about resource handling in general.
If it is not possible to fix this in an easy way, please provide a way to shutdown these threads  programmatically. This would allow to easily solve the issue with the help of some application lifecycle handler by the application itself.
&lt;denchmark-h:h4&gt;Version Information&lt;/denchmark-h&gt;

Please indicate relevant versions, including, if relevant:

Deeplearning4j version: 1.0.0-beta3
platform information (OS, etc): mac

&lt;denchmark-h:h4&gt;Contributing&lt;/denchmark-h&gt;

If you have an idea how to tackle this, please let me know - would love to fix it the way you want it.
	</description>
	<comments>
		<comment id='1' author='imod' date='2019-05-15T07:43:43Z'>
		Please update to 1.0.0-beta4. All these issues should'be been resolved there.
		</comment>
		<comment id='2' author='imod' date='2019-05-15T08:04:12Z'>
		wow &lt;denchmark-link:https://github.com/raver119&gt;@raver119&lt;/denchmark-link&gt;
 that was a really fast reply  - many thanks!!!    
i just did the update and checked the shutdown again. Indeed, two of the warnings are gone, but one still remains: JavaCPP Deallocator
&lt;denchmark-code&gt;WARNING: The web application [ROOT] appears to have started a thread named [JavaCPP Deallocator] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.2/java.lang.Object.wait(Native Method)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:155)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:176)
 app//org.bytedeco.javacpp.Pointer$DeallocatorThread.run(Pointer.java:303)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='imod' date='2019-05-15T09:07:50Z'>
		cc &lt;denchmark-link:https://github.com/saudet&gt;@saudet&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='imod' date='2019-05-15T09:56:29Z'>
		I did an other test, but before I come up with the result, I have to explain or "setup"...
As explained before, we import a trained keras model and use it for prediction, to do so, we do not need a lot of the transitive dependencies which DL4J normally brings.
To reduce the size of our deployed application, we exclude as much as possible (which is quite a pain with DL4J).
With our reduced set of dependencies, I get the last warning above (JavaCPP Deallocator which is not shutting down properly).
But now I also did a test where I do no excludes on the dependencies and what I get now is this:
&lt;denchmark-code&gt;May 15, 2019 9:31:08 AM org.apache.coyote.AbstractProtocol pause
INFO: Pausing ProtocolHandler ["http-nio-8090"]
May 15, 2019 9:31:08 AM org.apache.catalina.core.StandardService stopInternal
INFO: Stopping service [Tomcat]
May 15, 2019 9:31:08 AM org.apache.catalina.core.ApplicationContext log
INFO: Destroying Spring FrameworkServlet 'dispatcherServlet'
May 15, 2019 9:31:08 AM org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads
WARNING: The web application [ROOT] appears to have started a thread named [DeallocatorServiceThread_0] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.2/java.lang.Object.wait(Native Method)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:155)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:176)
 app//org.nd4j.linalg.memory.deallocation.DeallocatorService$DeallocatorServiceThread.run(DeallocatorService.java:117)
May 15, 2019 9:31:08 AM org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads
WARNING: The web application [ROOT] appears to have started a thread named [DeallocatorServiceThread_1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.2/java.lang.Object.wait(Native Method)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:155)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:176)
 app//org.nd4j.linalg.memory.deallocation.DeallocatorService$DeallocatorServiceThread.run(DeallocatorService.java:117)
May 15, 2019 9:31:08 AM org.apache.coyote.AbstractProtocol stop
INFO: Stopping ProtocolHandler ["http-nio-8090"]
May 15, 2019 9:31:08 AM org.apache.coyote.AbstractProtocol destroy
INFO: Destroying ProtocolHandler ["http-nio-8090"]
&lt;/denchmark-code&gt;

So it actually gets worse again. We now have two threads which fail to stop properly.
Looking at the source at &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/memory/deallocation/DeallocatorService.java#L68&gt;https://github.com/deeplearning4j/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/memory/deallocation/DeallocatorService.java#L68&lt;/denchmark-link&gt;
 I see this threads do get started, but there is no way to stop the threads.
Also, there are multiple places where an  is thrown, but there is no call to  when this happens, e.g. &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/memory/deallocation/DeallocatorService.java#L108&gt;https://github.com/deeplearning4j/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/memory/deallocation/DeallocatorService.java#L108&lt;/denchmark-link&gt;

I'm not sure, but maybe adding  would already fix the issue. Please see &lt;denchmark-link:https://www.baeldung.com/java-thread-stop&gt;https://www.baeldung.com/java-thread-stop&lt;/denchmark-link&gt;
 as a little reference.
		</comment>
		<comment id='5' author='imod' date='2019-05-15T10:20:34Z'>
		Upon interruption thread will exit loop and die gracefully. But yea, tagging won't hurt.
		</comment>
		<comment id='6' author='imod' date='2019-05-15T12:25:57Z'>
		Those are daemon threads, they can't prevent the JVM from terminating.
What are your Tomcat processes waiting on exactly?
		</comment>
		<comment id='7' author='imod' date='2019-05-15T15:01:17Z'>
		no idea, I just start tomcat and don't even do a prediction. but it is reproducible every single time
		</comment>
		<comment id='8' author='imod' date='2019-05-15T15:02:34Z'>
		Can you make threads dump with jstack?
		</comment>
		<comment id='9' author='imod' date='2019-05-15T15:03:15Z'>
		I'm off now for a day, but sure will try on friday
		</comment>
		<comment id='10' author='imod' date='2019-05-16T00:03:16Z'>
		Maybe we just need to call  as suggested on this page:
&lt;denchmark-link:https://wiki.apache.org/tomcat/MemoryLeakProtection&gt;https://wiki.apache.org/tomcat/MemoryLeakProtection&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/imod&gt;@imod&lt;/denchmark-link&gt;
 Could you give this a try see what happens?
		</comment>
		<comment id='11' author='imod' date='2019-05-17T05:55:54Z'>
		&lt;denchmark-link:https://github.com/saudet&gt;@saudet&lt;/denchmark-link&gt;
 sure I can, do you already have a SNAPSHOT build I can use?
		</comment>
		<comment id='12' author='imod' date='2019-05-17T08:36:57Z'>
		&lt;denchmark-link:https://github.com/saudet&gt;@saudet&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/raver119&gt;@raver119&lt;/denchmark-link&gt;
 I have tried to build the sources by myself, but unfortunate I was not able to figure out a working maven command :( ...I'm running on a mac, maybe you have a command handy which I can use to build it?
		</comment>
		<comment id='13' author='imod' date='2019-05-18T13:18:50Z'>
		The usual  works just fine. Anyway, I've updated JavaCPP accordingly in commit &lt;denchmark-link:https://github.com/bytedeco/javacpp/commit/655dae21833119a0edd45e1a16dbaa2e585d6455&gt;bytedeco/javacpp@655dae2&lt;/denchmark-link&gt;
 so give it a try with 1.5.1-SNAPSHOT: &lt;denchmark-link:http://bytedeco.org/builds/&gt;http://bytedeco.org/builds/&lt;/denchmark-link&gt;

		</comment>
		<comment id='14' author='imod' date='2019-05-20T08:56:57Z'>
		sorry, I'm really not a maven newby, but I don't get this to work, not all the SNAPSHOT dependencies seem available...
to simply just test the dependencies (and nothing of my project), I created a new pom.xml as follows:
&lt;denchmark-code&gt;&lt;?xml version="1.0"?&gt;
&lt;project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" 
    xmlns="http://maven.apache.org/POM/4.0.0" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;artifactId&gt;ml&lt;/artifactId&gt;
    &lt;groupId&gt;fortysix&lt;/groupId&gt;
    &lt;version&gt;0.1-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;ml&lt;/name&gt;
    &lt;properties&gt;
    &lt;/properties&gt;
    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;sonatype-nexus-snapshots&lt;/id&gt;
            &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;
            &lt;snapshots&gt;
                &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;/snapshots&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.deeplearning4j&lt;/groupId&gt;
            &lt;artifactId&gt;deeplearning4j-core&lt;/artifactId&gt;
            &lt;version&gt;1.0.0-beta4&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.nd4j&lt;/groupId&gt;
            &lt;artifactId&gt;nd4j-native-platform&lt;/artifactId&gt;
            &lt;version&gt;1.0.0-beta4&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.deeplearning4j&lt;/groupId&gt;
            &lt;artifactId&gt;deeplearning4j-modelimport&lt;/artifactId&gt;
            &lt;version&gt;1.0.0-beta4&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.bytedeco&lt;/groupId&gt;
            &lt;artifactId&gt;opencv-platform&lt;/artifactId&gt;
            &lt;version&gt;4.1.0-1.5.1-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/project&gt;

&lt;/denchmark-code&gt;

If I run mvn clean install -DskipTests -U, then I get this:
&lt;denchmark-code&gt;[ERROR] Failed to execute goal on project ml: Could not resolve dependencies for project fortysix:ml:jar:0.1-SNAPSHOT: The following artifacts could not be resolved: org.bytedeco:opencv:jar:android-x86_64:4.1.0-1.5.1-SNAPSHOT, org.bytedeco:opencv:jar:ios-arm64:4.1.0-1.5.1-SNAPSHOT, org.bytedeco:opencv:jar:ios-x86_64:4.1.0-1.5.1-SNAPSHOT, org.bytedeco:opencv:jar:linux-x86:4.1.0-1.5.1-SNAPSHOT, org.bytedeco:opencv:jar:linux-x86_64:4.1.0-1.5.1-SNAPSHOT, org.bytedeco:opencv:jar:linux-armhf:4.1.0-1.5.1-SNAPSHOT, org.bytedeco:opencv:jar:macosx-x86_64:4.1.0-1.5.1-SNAPSHOT, org.bytedeco:opencv:jar:windows-x86_64:4.1.0-1.5.1-SNAPSHOT: Could not find artifact org.bytedeco:opencv:jar:android-x86_64:4.1.0-1.5.1-SNAPSHOT in sonatype-nexus-snapshots (https://oss.sonatype.org/content/repositories/snapshots) -&gt; [Help 1]
[ERROR] 
&lt;/denchmark-code&gt;

ok, so let's follow the advice and only get the stuff I currently need: mvn clean install -DskipTests -U -Djavacpp.platform=macosx-x86_64
still, it fails:
&lt;denchmark-code&gt;[ERROR] Failed to execute goal on project ml: Could not resolve dependencies for project fortysix:ml:jar:0.1-SNAPSHOT: Could not find artifact org.bytedeco:opencv:jar:macosx-x86_64:4.1.0-1.5.1-SNAPSHOT in sonatype-nexus-snapshots (https://oss.sonatype.org/content/repositories/snapshots) -&gt; [Help 1]
[ERROR] 
&lt;/denchmark-code&gt;

I also checked manually and there is no  at &lt;denchmark-link:https://oss.sonatype.org/content/repositories/snapshots/org/bytedeco/opencv/4.1.0-1.5.1-SNAPSHOT/&gt;https://oss.sonatype.org/content/repositories/snapshots/org/bytedeco/opencv/4.1.0-1.5.1-SNAPSHOT/&lt;/denchmark-link&gt;

what am I doing wrong?
		</comment>
		<comment id='15' author='imod' date='2019-05-20T09:04:09Z'>
		This has nothing to do with OpenCV. I only modified how the thread is started in JavaCPP, no need to try to import anything else.
		</comment>
		<comment id='16' author='imod' date='2019-05-20T16:36:47Z'>
		&lt;denchmark-link:https://github.com/saudet&gt;@saudet&lt;/denchmark-link&gt;
 I think this is not yet the fix we are looking for... I still have the same errors when stopping tomcat. Please have a close look at the stacktrace:
&lt;denchmark-code&gt;WARNING: The web application [ROOT] appears to have started a thread named [DeallocatorServiceThread_0] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.2/java.lang.Object.wait(Native Method)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:155)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:176)
 app//org.nd4j.linalg.memory.deallocation.DeallocatorService$DeallocatorServiceThread.run(DeallocatorService.java:117)
May 20, 2019 4:30:45 PM org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads
WARNING: The web application [ROOT] appears to have started a thread named [DeallocatorServiceThread_1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.2/java.lang.Object.wait(Native Method)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:155)
 java.base@11.0.2/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:176)
 app//org.nd4j.linalg.memory.deallocation.DeallocatorService$DeallocatorServiceThread.run(DeallocatorService.java:117)
May 20, 2019 4:30:45 PM org.apache.coyote.AbstractProtocol stop
INFO: Stopping ProtocolHandler ["http-nio-8090"]
&lt;/denchmark-code&gt;

its not org.bytedeco.javacpp.Pointer$DeallocatorThread, but org.nd4j.linalg.memory.deallocation.DeallocatorService$DeallocatorServiceThread
		</comment>
		<comment id='17' author='imod' date='2019-05-21T06:46:25Z'>
		Ok, so it works for , so let's do the same for  &lt;denchmark-link:https://github.com/alexanderst&gt;@alexanderst&lt;/denchmark-link&gt;

		</comment>
		<comment id='18' author='imod' date='2019-06-11T12:35:21Z'>
		DeallocatorServiceThread tagging done. Will be merged soon.
		</comment>
		<comment id='19' author='imod' date='2019-06-20T12:42:36Z'>
		&lt;denchmark-link:https://github.com/raver119&gt;@raver119&lt;/denchmark-link&gt;
 Fix was implemented.
		</comment>
	</comments>
</bug>