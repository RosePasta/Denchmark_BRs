<bug id='8800' author='RobAltena' open_date='2020-03-23T04:48:22Z' closed_time='2020-06-02T11:14:27Z'>
	<summary>Nd4j.rand generates random numbers [0, 1]. convention is [0, 1)</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue Description&lt;/denchmark-h&gt;

Nd4j,rand generates random numbers in the interval [0, 1]. However convention in Numpy and other programing languages is to use [0, 1) excluding 1.9. This will cause problems porting code to Nd4j.
Unit test to show the behavior:
&lt;denchmark-code&gt;@Test
 void testRandomOne() {
    while (true){
        INDArray max = Nd4j.rand(1000).max();// expect [0 - 1).
        if (max.getDouble(0) &gt;= 1.0){
            System.out.println(max.getDouble(0)); // but eventually we get a 1.0
            Assert.isTrue(false);
        }
    }
 }
&lt;/denchmark-code&gt;

This test should loop indefinitely. Nd4j eventually generates a 1.0 and fails the test.
Here is documentation from other languages to show that [0, 1) is convention:

&lt;denchmark-link:https://numpy.org/doc/1.18/reference/generated/numpy.matlib.rand.html?highlight=rand#numpy.matlib.rand&gt;https://numpy.org/doc/1.18/reference/generated/numpy.matlib.rand.html?highlight=rand#numpy.matlib.rand&lt;/denchmark-link&gt;


&lt;denchmark-link:https://docs.oracle.com/javase/8/docs/api/java/util/Random.html#nextDouble--&gt;https://docs.oracle.com/javase/8/docs/api/java/util/Random.html#nextDouble--&lt;/denchmark-link&gt;


&lt;denchmark-link:https://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution&gt;https://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='RobAltena' date='2020-05-26T06:50:12Z'>
		This affects RL4J, as it uses a random value here: &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/blob/master/rl4j/rl4j-core/src/main/java/org/deeplearning4j/rl4j/policy/ACPolicy.java#L80-L86&gt;https://github.com/eclipse/deeplearning4j/blob/master/rl4j/rl4j-core/src/main/java/org/deeplearning4j/rl4j/policy/ACPolicy.java#L80-L86&lt;/denchmark-link&gt;

I'm aware that it can be worked around with &lt;= instead of &lt; in this case, but breaking the generally valid assumption that the number never is going to be exactly 1 makes bugs like this hard to spot.
		</comment>
		<comment id='2' author='RobAltena' date='2020-06-02T11:14:26Z'>
		This is fixed now. After 15 minute loop of trying to get 1.0 out of the random number generator and more than 40 million random numbers, 1.0 didn't happen even once, while before it would usually be encountered even before 1 million random numbers have been drawn.
		</comment>
	</comments>
</bug>