<bug id='5893' author='gordoncaleb' open_date='2018-07-12T16:33:02Z' closed_time='2019-06-20T10:25:28Z'>
	<summary>ND4J: INDArray multiply requiring broadcast not matching expected behaviour</summary>
	<description>
In ND4J I'm trying to multiply a 2x2x2x1 by a 2x2x1x1 INDArray and getting an unexpected result and one that doesn't match what numpy returns.
&lt;denchmark-code&gt;INDArray a = Nd4j.create(new double[]{1, 2, 3, 4}, new int[]{2, 2, 1, 1});
INDArray b = Nd4j.create(new double[]{1, 2, 3, 4, 5, 6, 7, 8}, new int[]{2, 2, 2, 1});
INDArray c = b.mul(a);
System.out.println(c);
&lt;/denchmark-code&gt;

prints:
&lt;denchmark-code&gt;[[[[    1.0000],
   [    6.0000]],

  [[    3.0000],
   [   12.0000]]],


 [[[    5.0000],
   [   18.0000]],

  [[    7.0000],
   [   24.0000]]]]
&lt;/denchmark-code&gt;

And in numpy I have:
&lt;denchmark-code&gt;import numpy as np

a = np.array([1, 2, 3, 4]).reshape(2, 2, 1, 1)
b = np.array([1, 2, 3, 4, 5, 6, 7, 8]).reshape(2, 2, 2, 1)
c = np.multiply(b, a)
print(c)
&lt;/denchmark-code&gt;

prints:
&lt;denchmark-code&gt;[[[[ 1]
   [ 2]]

  [[ 6]
   [ 8]]]


 [[[15]
   [18]]

  [[28]
   [32]]]]
&lt;/denchmark-code&gt;

Which is what I expect. Looks like maybe the broadcast multiply is being done along the wrong dimensions?
This is the behaviour from org.nd4j:nd4j-native-platform:1.0.0-beta
Aha! Link: &lt;denchmark-link:https://skymindai.aha.io/features/ND4J-166&gt;https://skymindai.aha.io/features/ND4J-166&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='gordoncaleb' date='2018-07-12T16:56:37Z'>
		Sorry, auto broadcast wasn't introduced to java level yet. It's only available for new operations or SameDiff graphs yet.
		</comment>
		<comment id='2' author='gordoncaleb' date='2018-07-16T13:50:13Z'>
		No problem. Thanks for getting back to me. I see in BaseNDArray in the INDArray muli(INDArray other, INDArray result) method (line 3935) in the master branch at the moment:
&lt;denchmark-code&gt;        if(!Shape.shapeEquals(this.shape(),other.shape())) {
            int[] broadcastDimensions = Shape.getBroadcastDimensions(this.shape(),other.shape());
            Nd4j.getExecutioner().exec(new BroadcastMulOp(this,other,result,broadcastDimensions),broadcastDimensions);
            return result;
        }
&lt;/denchmark-code&gt;

It looks like maybe the exec is being done along the wrong dimensions. I've wrapped the multiply with another method that calculates the exec along dimensions as the dimensions that match rather than the dimensions that do not match, which is what it looks like the getBroadcastDimensions method does.
&lt;denchmark-code&gt;    private static void broadcastMultiply(INDArray a, INDArray b, INDArray result) {
        int[] broadcastDimensions = Shape.getBroadcastDimensions(a.shape(), b.shape());
        int[] executeAlong = getBroadcastAlongDimensions(a.shape(), b.shape());
        Nd4j.getExecutioner().exec(
            new BroadcastMulOp(a, b, result, broadcastDimensions),
            executeAlong
        );
    }

    private static int[] getBroadcastAlongDimensions(int[] shapeA, int[] shapeB) {
        int minRank = Math.min(shapeA.length, shapeB.length);
        List&lt;Integer&gt; along = new ArrayList&lt;&gt;();
        for (int i = 0; i &lt; minRank; i++) {
            if (shapeA[i] == shapeB[i]) {
                along.add(i);
            }
        }
        return Ints.toArray(along);
    }
&lt;/denchmark-code&gt;

This seems to give me the correct results on all of my test cases. Is this a valid solution? If so, I'd be happy to raise a PR. Thanks!
		</comment>
		<comment id='3' author='gordoncaleb' date='2019-06-20T10:25:28Z'>
		Already implemented in current master, &lt;denchmark-link:https://github.com/alexanderst&gt;@alexanderst&lt;/denchmark-link&gt;
 confirmed that doesn't reproduce issue anymore
		</comment>
		<comment id='4' author='gordoncaleb' date='2019-06-20T11:40:50Z'>
		&lt;denchmark-link:https://github.com/raver119&gt;@raver119&lt;/denchmark-link&gt;
 The issue is not reproduced, result of operation is equivalent to numpy.
		</comment>
	</comments>
</bug>