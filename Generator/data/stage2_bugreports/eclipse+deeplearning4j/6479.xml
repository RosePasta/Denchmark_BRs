<bug id='6479' author='sascha08-15' open_date='2018-09-23T13:47:58Z' closed_time='2019-04-24T15:15:59Z'>
	<summary>Nd4j vstack with single col in rank 2 matrix mixes views on buffer(s) when using CUDA</summary>
	<description>
When I try to vstack 3 matrixes
[[1], [1]]
[[0]]
and
[[3], [3]]
I am receiving [[1],[1],[0],[0],[3]] as result. In a larger context, the 2nd matrix seems to override parts of the resulting matrix (just outside observation, did not debug into Nd4j internals)
The following snippet provides a unit test for the problem.
&lt;denchmark-link:https://gist.github.com/sascha08-15/e1f1eedad55cc1b8bff5b58ba1f1c963&gt;https://gist.github.com/sascha08-15/e1f1eedad55cc1b8bff5b58ba1f1c963&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='sascha08-15' date='2018-09-23T21:07:48Z'>
		Applies for both, 1.0.0-beta2 and 1.0.0-SNAPSHOT
		</comment>
		<comment id='2' author='sascha08-15' date='2018-09-24T14:54:16Z'>
		Seems to be a problem that just occurs with the GPU backend.
Running on Windows 10 with a GT 730 to develop with Java 10, tried Java 8 as well.
Problem also occurs on a 1050 GTX, Win 10, Java 8.
		</comment>
		<comment id='3' author='sascha08-15' date='2018-09-24T15:05:43Z'>
		Can confirm that it happens on my system as well.
CPU version works fine. CUDA version seems to be bugged.
/cc &lt;denchmark-link:https://github.com/raver119&gt;@raver119&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='sascha08-15' date='2018-09-24T15:34:50Z'>
		Seems not to be a driver issue. Happens for Nvidia driver version is 399.24 and 411.63 (latest as of Sept. 24, '18) possibly others.
		</comment>
		<comment id='5' author='sascha08-15' date='2018-11-27T18:32:27Z'>
		Any ETA for that bug to be fixed?
		</comment>
		<comment id='6' author='sascha08-15' date='2019-04-10T21:33:06Z'>
		Can confirm the bug with Unix (Ubuntu 18.04) and Cuda 10.0 on RTX 2080ti
		</comment>
		<comment id='7' author='sascha08-15' date='2019-04-11T01:01:36Z'>
		Looks like this one got missed/forgotten. We should fix this as part of our current QA efforts.
There's actually 2 bugs here:
First, the vstack wrong results (reproducible in test below).
Second: the lack of rank validation (change second to shape [1] and it doesn't complain about mismatched rank; it should IMO).
&lt;denchmark-code&gt;    @Test
    public void testVstack(){
        INDArray first = Nd4j.zeros(DataType.DOUBLE, new long[]{2,1});
        INDArray second = Nd4j.ones(DataType.DOUBLE, new long[]{1,1});
        INDArray third = Nd4j.valueArrayOf(new long[]{2,1}, 2, DataType.DOUBLE);

        INDArray expected = Nd4j.createFromArray(new double[][]{{0},{0},{1},{2},{2}});

        INDArray out = Nd4j.vstack(first, second, third);

        System.out.println(out);
        assertEquals(expected, out);
    }
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/2360237/55923449-f6d3ff00-5c48-11e9-9497-e1a495b5f479.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='sascha08-15' date='2019-04-11T14:10:50Z'>
		&lt;denchmark-link:https://github.com/AlexDBlack&gt;@AlexDBlack&lt;/denchmark-link&gt;
 true, I guess the 2nd scenario you described is then showing as   failed see &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/issues/6663&gt;https://github.com/deeplearning4j/deeplearning4j/issues/6663&lt;/denchmark-link&gt;
 - I tried reconstructing &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/issues/6663&gt;#6663&lt;/denchmark-link&gt;
. Only occurs with shape[1] indeed.
		</comment>
		<comment id='9' author='sascha08-15' date='2019-04-24T15:15:59Z'>
		Fixed.
		</comment>
		<comment id='10' author='sascha08-15' date='2019-05-24T16:11:29Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>