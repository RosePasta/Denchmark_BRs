<bug id='7647' author='AlexDBlack' open_date='2019-05-02T09:03:09Z' closed_time='2019-07-05T11:03:33Z'>
	<summary>ND4J: Add header validation for Nd4j.createFromNpyFile</summary>
	<description>
Not a high priority, but we should probably validate the numpy .npy format header for Nd4j.createFromNpyFile. I didn't expect the code below to actually load, but it does.
(Strictly speaking the first part of the header doesn't matter as long as we don't corrupt the shape information etc, but it's probably better to just throw an exception if header is malformed.)
&lt;denchmark-code&gt;    @Rule
    public TemporaryFolder testDir = new TemporaryFolder();

    @Test
    public void readNumpyCorruptHeader() throws Exception {
        File f = testDir.newFolder();

        File fValid = new ClassPathResource("numpy_arrays/arange_3,4_float32.npy").getFile();
        byte[] numpyBytes = FileUtils.readFileToByteArray(fValid);
        for( int i=0; i&lt;10; i++ ){
            numpyBytes[i] = 0;
        }
        File fCorrupt = new File(f, "corrupt.npy");
        FileUtils.writeByteArrayToFile(fCorrupt, numpyBytes);

        INDArray exp = Nd4j.arange(12).castTo(DataType.FLOAT).reshape(3,4);

        INDArray act1 = Nd4j.createFromNpyFile(fValid);
        assertEquals(exp, act1);

        INDArray probablyShouldntLoad = Nd4j.createFromNpyFile(fCorrupt); //Loads fine

        boolean eq = exp.equals(probablyShouldntLoad); //And is actually equal content
        System.out.println("Corrupt file that shouldn't load is equal: " + eq);
    }
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2019-07-05T11:03:33Z'>
		Implemented in my branch, will be merged later
		</comment>
	</comments>
</bug>