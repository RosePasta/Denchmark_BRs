<bug id='1328' author='elusive-code' open_date='2016-03-28T11:45:11Z' closed_time='2016-08-06T20:26:36Z'>
	<summary>toString methods serialize collections</summary>
	<description>
Version: 0.4-rc3.8
Some classes has toString method implementation that includes collections, which might cause signinficant performance issues, when these collections are big.
It might be an especially nasty problem when third-party libraries involved.
And it is quite common to use toString method for logging.
Not to mention it makes IDE crawl away crying.
In my case I used word2vec on several dictionaries (including morphological: couple hundreds thousands lexemes, several million words).
In particular, when I added hibernate, at some point
org.deeplearning4j.models.embeddings.inmemory.InMemoryLookupTable#toString
was invoked, and took like half an hour, because it writes full vocabulary and all other collections.
(Then it crashed with OutOfMemoryException).
Classes with suspicous looking toString methods:
&lt;denchmark-code&gt;org.deeplearning4j.models.embeddings.inmemory.InMemoryLookupTable (this one definitely has a problem)

org.deeplearning4j.models.word2vec.wordstore.inmemory.InMemoryLookupCache
org.deeplearning4j.text.documentiterator.LabelledDocument

org.deeplearning4j.models.sequencevectors.sequence.Sequence
org.deeplearning4j.models.word2vec.wordstore.VocabularyWord
org.deeplearning4j.models.word2vec.VocabWord

org.deeplearning4j.berkeley.PriorityQueue
org.deeplearning4j.eval.ConfusionMatrix
org.deeplearning4j.nn.conf.MultiLayerConfiguration
org.deeplearning4j.nn.conf.MultiLayerConfiguration.Builder
org.deeplearning4j.nn.layers.BaseLayer
org.deeplearning4j.nn.layers.feedforward.autoencoder.recursive.Tree
org.deeplearning4j.util.Index
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='elusive-code' date='2016-08-04T07:00:10Z'>
		Would it be appropriate to return a subset of the collection from toString? Like when we got less than  1001 elements, return all of them, otherwise return first 1000 and ellipsis.
		</comment>
		<comment id='2' author='elusive-code' date='2016-08-04T19:51:15Z'>
		Nah, just exclude vocabulary itself. There's no sense printing it out.
		</comment>
		<comment id='3' author='elusive-code' date='2016-08-04T19:57:55Z'>
		^^^
That refers to InMemoryLookupTable obviously.
There's no practical sense in printing out vocab and syn0/syn1 fields. They just may be way to big. However, there's not too much sense using toString() on IMLT as well.. :)
		</comment>
		<comment id='4' author='elusive-code' date='2016-08-04T20:01:06Z'>
		&lt;denchmark-link:https://github.com/raver119&gt;@raver119&lt;/denchmark-link&gt;
, well, if I were debugging something in this class, I would have been glad to see all the contents, but if you say so, I have no objections
		</comment>
		<comment id='5' author='elusive-code' date='2016-08-04T20:02:34Z'>
		As said in original issue - it really might be huge. I.e. in google model that's 3m words in vocab, and syn0 is 3m x 300
		</comment>
		<comment id='6' author='elusive-code' date='2019-01-20T21:52:46Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>