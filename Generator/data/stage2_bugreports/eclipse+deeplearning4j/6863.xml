<bug id='6863' author='AlexDBlack' open_date='2018-12-15T01:56:50Z' closed_time='2018-12-17T02:30:06Z'>
	<summary>libnd4j: SpaceToBatch, BatchToSpace crashes</summary>
	<description>
The following code (minus the datatypes) runs fine on 1.0.0-beta3 and was passing on pre dtypes master.
I'm pretty sure the datatypes are correct here (but if not, then this is a validation issue also/instead).
&lt;denchmark-code&gt;    @Test
    public void testSpaceToBatch() {
        Nd4j.getRandom().setSeed(7331);

        int miniBatch = 4;
        int[] inputShape = new int[]{1, 2, 2, 1};

        int M = 2;
        int[] blockShape = new int[]{M, 1};
        int[] paddingShape = new int[]{M, 2};

        INDArray input = Nd4j.randn(inputShape).castTo(DataType.DOUBLE);
        INDArray blocks = Nd4j.create(new float[]{2, 2}, blockShape).castTo(DataType.INT);
        INDArray padding = Nd4j.create(new float[]{0, 0, 0, 0}, paddingShape).castTo(DataType.INT);

        INDArray expOut = Nd4j.create(DataType.DOUBLE, miniBatch, 1, 1, 1);
        DynamicCustomOp op = DynamicCustomOp.builder("space_to_batch")
                .addInputs(input, blocks, padding)
                .addOutputs(expOut).build();
        Nd4j.getExecutioner().exec(op);
}
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;#
# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_INT_DIVIDE_BY_ZERO (0xc0000094) at pc=0x000000006a05b639, pid=9984, tid=0x00000000000046b8
#
# JRE version: Java(TM) SE Runtime Environment (8.0_151-b12) (build 1.8.0_151-b12)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.151-b12 mixed mode windows-amd64 compressed oops)
# Problematic frame:
# C  [libnd4jcpu.dll+0xbdb639]
#
# Failed to write core dump. Minidumps are not enabled by default on client versions of Windows
#
# An error report file with more information is saved as:
# C:\DL4J\Git\deeplearning4j\nd4j\nd4j-backends\nd4j-tests\hs_err_pid9984.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://gist.github.com/AlexDBlack/959844a15ce76b98c1e0e015dd1b9d4d&gt;https://gist.github.com/AlexDBlack/959844a15ce76b98c1e0e015dd1b9d4d&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2018-12-15T01:59:01Z'>
		BatchToSpace has the same thing:
&lt;denchmark-code&gt;    @Test
    public void testBatchToSpace() {
        Nd4j.getRandom().setSeed(1337);

        int miniBatch = 4;
        int[] inputShape = new int[]{miniBatch, 1, 1, 1};

        int M = 2;
        int[] blockShape = new int[]{M, 1};
        int[] cropShape = new int[]{M, 2};

        INDArray input = Nd4j.randn(inputShape).castTo(DataType.DOUBLE);
        INDArray blocks = Nd4j.create(new float[]{2, 2}, blockShape).castTo(DataType.INT);
        INDArray crops = Nd4j.create(new float[]{0, 0, 0, 0}, cropShape).castTo(DataType.INT);

        INDArray expOut = Nd4j.create(DataType.DOUBLE, 1, 2, 2, 1);
        DynamicCustomOp op = DynamicCustomOp.builder("batch_to_space")
                .addInputs(input, blocks, crops)
                .addOutputs(expOut).build();
        Nd4j.getExecutioner().exec(op);
    }
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='AlexDBlack' date='2018-12-17T02:30:06Z'>
		Consolidated to issue: &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/issues/6873&gt;https://github.com/deeplearning4j/deeplearning4j/issues/6873&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='AlexDBlack' date='2019-01-16T02:46:56Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>