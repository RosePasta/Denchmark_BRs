<bug id='8847' author='AlexDBlack' open_date='2020-04-19T09:13:46Z' closed_time='2020-04-19T10:34:54Z'>
	<summary>ND4J CUDA: OpContext + INDArray.data() locality issue?</summary>
	<description>
&lt;denchmark-code&gt;    @Test
    public void testCudaLocalityIssue(){
        DynamicCustomOp dco = new org.nd4j.linalg.api.ops.random.custom.RandomExponential();
        OpContext oc = Nd4j.getExecutioner().buildContext();
        oc.setTArguments(2);
        oc.setDArguments(DataType.DOUBLE);
        oc.setInputArrays(Nd4j.createFromArray(10L));
        oc.setOutputArray(0, Nd4j.create(DataType.DOUBLE, 10));


        oc.setRngStates(1, 101);
        INDArray out = Nd4j.exec(dco, oc)[0];
        out.data().asFloat();      //Comment this out and we get the same thing printed

        oc.setRngStates(2, 102);
        out = Nd4j.exec(dco, oc)[0];

        //Clearly, these should be the same
        System.out.println(out);
        System.out.println(out.add(0));
    }
&lt;/denchmark-code&gt;

Output: (incorrect - should be same)
&lt;denchmark-code&gt;[    1.4059,    0.1750,    0.1694,    0.8209,    0.2118,    0.1191,    0.1958,    0.3275,    0.2440,    0.1456]
[    0.6203,    0.0893,    0.7765,    0.6209,    0.2991,    0.4278,    2.4169,    0.8120,    0.5365,    0.7729]
&lt;/denchmark-code&gt;

Output if I comment out out.data().asFloat() line only (correct)
&lt;denchmark-code&gt;[    0.6203,    0.0893,    0.7765,    0.6209,    0.2991,    0.4278,    2.4169,    0.8120,    0.5365,    0.7729]
[    0.6203,    0.0893,    0.7765,    0.6209,    0.2991,    0.4278,    2.4169,    0.8120,    0.5365,    0.7729]
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2020-04-19T09:19:31Z'>
		Same thing using toString (getDouble internally)
&lt;denchmark-code&gt;    @Test
    public void testCudaLocalityIssue2(){
        DynamicCustomOp dco = new org.nd4j.linalg.api.ops.random.custom.RandomExponential();
        OpContext oc = Nd4j.getExecutioner().buildContext();
        oc.setTArguments(2);
        oc.setDArguments(DataType.DOUBLE);
        oc.setInputArrays(Nd4j.createFromArray(10L));
        oc.setOutputArray(0, Nd4j.create(DataType.DOUBLE, 10));

        Random r = new Random(12345);
        for( int i=0; i&lt;10; i++ ) {
            oc.setRngStates(i, i+1);

            INDArray out = Nd4j.exec(dco, oc)[0];

            String s1 = out.toString();
            String s2 = out.add(0).toString();

            assertEquals(s1, s2);
        }
    }
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;o.n.l.f.Nd4jBackend - Loaded [JCublasBackend] backend
o.n.n.NativeOpsHolder - Number of threads used for linear algebra: 32
o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CUDA]; OS: [Windows 10]
o.n.l.a.o.e.DefaultOpExecutioner - Cores: [64]; Memory: [6.0GB];
o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [CUBLAS]
o.n.l.j.JCublasBackend - ND4J CUDA build version: 10.2.89
o.n.l.j.JCublasBackend - CUDA device 0: [TITAN X (Pascal)]; cc: [6.1]; Total memory: [12884901888]

org.junit.ComparisonFailure: 
Expected :[    0.7875,    0.4004,    0.1059,    0.4021,    0.9232,    0.7538,    0.1577,    0.3388,    0.1407,    0.2391]
Actual   :[    0.0868,    1.0539,    1.1217,    0.3528,    0.3309,    0.1822,    0.5101,    1.3266,    1.2975,    0.5500]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='AlexDBlack' date='2020-04-19T10:34:54Z'>
		Fixed.
		</comment>
	</comments>
</bug>