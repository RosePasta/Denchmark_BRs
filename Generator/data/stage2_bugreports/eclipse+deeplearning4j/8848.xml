<bug id='8848' author='AlexDBlack' open_date='2020-04-19T09:45:01Z' closed_time='2020-04-22T09:12:01Z'>
	<summary>libnd4j: random_exponential op can produce infinity values</summary>
	<description>
As per title, even with double precision.
Note it's very rare - only happens with specific RNG seeds.
Occurs on both CPU and CUDA.
&lt;denchmark-code&gt;    @Test
    public void testRandomExponentialInf2(){
        DynamicCustomOp dco = new org.nd4j.linalg.api.ops.random.custom.RandomExponential();
        OpContext oc = Nd4j.getExecutioner().buildContext();
        oc.setTArguments(2);
        oc.setDArguments(DataType.DOUBLE);
        oc.setInputArrays(Nd4j.createFromArray(100L));
        oc.setOutputArray(0, Nd4j.create(DataType.DOUBLE, 100));

        oc.setRngStates(2716049175077475646L, -6182841917129177862L);

        INDArray out = Nd4j.exec(dco, oc)[0];
        double mean = out.meanNumber().doubleValue();

        if(!Double.isFinite(mean)){
            System.out.println("RNG state: " + oc.getRngStates());
            System.out.println(out);
            fail();
        }
    }
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;RNG state: Pair{key=2716049175077475646, value=-6182841917129177862}
[    0.7039,    0.1170,    0.3405,    0.6002,    0.1681,    0.4026,    0.5383,    0.5300,    0.3294,    1.7023,    0.1545,    0.0243,    0.0990,    0.0658,    0.0551,    0.4226,    0.0339,    0.5033,    0.3994,    0.0390,    0.2032,    0.8447,    0.0954,    0.5449,    0.4647,    0.0776,    1.5056,    0.0474,    0.9580,    0.1987,    0.4153,    0.3497,    0.2168,    0.4724,    0.2412,    1.4656,    0.0887,    0.1531,    0.2435,    0.3753,    0.5621,    1.3261,    0.1511,    0.0592,    1.1092,    0.0039,    0.0792,    0.8876,    0.2606,    1.4367,    0.5890,    0.0793,    0.5680,    0.2127,    1.1907,    1.7097,    0.0007,    0.2165,    0.0142,    1.3290,    0.2629,    0.5986,    0.3258,    0.1809,    0.5862,    0.3177,    0.2498,    0.0681,    0.1474,    1.2090,    0.7387,    1.9208,    1.2320,    0.1141,    0.6982,    0.3218,    0.5868,    0.3628,    0.5390,    0.0467,         âˆž,    0.4960,    1.2148,    0.0465,    0.2373,    0.7061,    0.5064,    0.6886,    0.6283,    0.1302,    0.6489,    0.1112,    0.2893,    0.6694,    0.3192,    0.2591,    0.4803,    0.1078,    0.1675,    0.4013]
&lt;/denchmark-code&gt;

Note the single infinity value towards the end of the array.
Here's another version of the test used to find those specific RNG states - &lt;denchmark-link:https://gist.github.com/AlexDBlack/224e3149464675d1acb361e8559cf62a&gt;https://gist.github.com/AlexDBlack/224e3149464675d1acb361e8559cf62a&lt;/denchmark-link&gt;

Isolated from the following CI failure: &lt;denchmark-link:https://jenkins.konduit.ai/blue/organizations/jenkins/konduitai%2Fdeeplearning4j/detail/PR-367/10/pipeline/1001&gt;https://jenkins.konduit.ai/blue/organizations/jenkins/konduitai%2Fdeeplearning4j/detail/PR-367/10/pipeline/1001&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;[2020-04-19T04:40:34.549Z] Failed tests:   testRandomOpsSDVarShape[0: backend(org.nd4j.linalg.jcublas.JCublasBackend)={1}](org.nd4j.autodiff.opvalidation.RandomOpValidation): [ - Test name: "randomExponential - [100, 10]": Variable random_exponential failed: Failed: exponential: mean=Infinity, std = NaN, min=8.530438644811511E-4] expected:&lt;0&gt; but was:&lt;1&gt;
&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>