<bug id='1207' author='nasa-nccs-cds' open_date='2016-02-29T16:42:27Z' closed_time='2016-03-03T16:41:01Z'>
	<summary>Slice method not working as expected</summary>
	<description>
When working with 4D arrays I was expecting the slice operator to behave as follows:
Given index i and dimension d it should extract a slice through array dimension d at index i. Therefore if you have an array with shape (50,40,30,30) and take slice( index = 0, dim=0) then you will get an array with shape =(40,30,20), i.e. the subspace defined by dim0 = index.
That is not what I get.  Here is an example with initial shape=(50,1,2), d=0, and i=0:
val array = Nd4j.create( Array.fill&lt;denchmark-link:100&gt;Float&lt;/denchmark-link&gt;
(1f), Array(50,1,2))
val s0 = array.slice(0, 0 );
println( "shape = %s".format( s0.shape.mkString(",")) )
The actual result is:
shape = 1,50
The expected result is:
shape = 1,2
	</description>
	<comments>
		<comment id='1' author='nasa-nccs-cds' date='2016-03-03T16:41:01Z'>
		So I didn't have time to explain this in chat, I wanted to  find the time to write a proper response to this.
Tensor along dimension is actually meant to implement a way for us to run along reduction indexes of an array.
What I mean by this is say given:
arr.sum(0) on a 2,3.
INDArray arr = Nd4j.linspace(1,6,6).reshape(2,3);
arr is:
([[ 1.,  2.,  3.],
[ 4.,  5.,  6.]])
sum(0):
([ 5.,  7.,  9.])
So your expectation is that tad(0) would be:
3,1 by your definition.
In reality, if you look closely at the reduction (the sum) it's a 1 x 2.
This is covered by the first element 5 which is composed of 1,4.
A tensor along dimension is meant to be a way of indexing such that we can easily sum and paralllelize array reductions.
The companion to this is element wise stride. Element wise stride is a way of us iterating over the tads efficiently in parallel for loops without worrying about indexing.
This can easily cause confusion with people trying to access some of the lower level components of nd4j.
The logic you are trying to extract is actually how reduction result arrays are created (eg: removing the indexes of the dimensions you specify)
slice(index,dimension) will now work as expected:
&lt;denchmark-link:https://github.com/deeplearning4j/nd4j/pull/636&gt;deeplearning4j/nd4j#636&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='nasa-nccs-cds' date='2019-01-21T09:37:38Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>