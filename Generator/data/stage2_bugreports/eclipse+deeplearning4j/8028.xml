<bug id='8028' author='RobAltena' open_date='2019-07-19T01:41:37Z' closed_time='2019-07-25T14:05:26Z'>
	<summary>checkShapeValues has different implementation for long[] and int[]</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue Description&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/eclipse/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/factory/Nd4j.java#L4701-L4723&gt;one checks for &lt;0, the other for &lt;1&lt;/denchmark-link&gt;

Some code to show the inconsistent consequences:
&lt;denchmark-code&gt;    int [] intShape = new int[] {2,0};
    long [] longShape = new long[] {2,0};

    // This is an ND4JIllegalStateException
    Nd4j.checkShapeValues(intShape);
    //This is ok:
    Nd4j.checkShapeValues(longShape);

    // This is ok
    INDArray x = Nd4j.zeros(intShape);
    // This is an ND4JIllegalStateException
    x = Nd4j.zeros(intShape, 'f');
&lt;/denchmark-code&gt;

The fix in nd4j.java is trivial, but we really should have a more serious look at the tests around these. Hence this issue.
	</description>
	<comments>
		<comment id='1' author='RobAltena' date='2019-07-19T02:12:22Z'>
		Good catch. The long[] methods are all well tested.
&lt;denchmark-link:https://github.com/eclipse/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-tests/src/test/java/org/nd4j/linalg/shape/EmptyTests.java#L247-L284&gt;https://github.com/eclipse/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-tests/src/test/java/org/nd4j/linalg/shape/EmptyTests.java#L247-L284&lt;/denchmark-link&gt;

We should probably just do int[] to long[] conversion and have only the one implementation/check.
		</comment>
	</comments>
</bug>