<bug id='6521' author='treo' open_date='2018-10-04T11:02:41Z' closed_time='2018-10-10T08:23:56Z'>
	<summary>Nd4j.gemm(a, b, result, ...) wrong results</summary>
	<description>
I ran into an issue where Nd4j.gemm will put results in the wrong order into a target array. If I change the order of the target array from 'c' to 'f' it doesn't improve things. If the target is a view and the original array is in f order, then the result is even more wrong with zeros instead of actual results in half of it.
I would expect that all of the following tests should pass, however 1, 2 and 3 fail, while 4, 5 and 6 pass.
This happens with both the native and cuda backends, and with -beta2 and -SNAPSHOT versions.
 @Test
    public void testGemm1(){
        final INDArray a = Nd4j.rand(3, 4);
        final INDArray b = Nd4j.rand(4, 5);

        final INDArray target = Nd4j.zeros(new int[]{2, 3, 5}, 'f');
        final INDArray view = target.tensorAlongDimension(0, 1, 2);

        Nd4j.gemm(a, b, view, false, false, 1.0, 0.0);

        final INDArray result = a.mmul(b);

        assertEquals(result, view);
    }

    @Test
    public void testGemm2(){
        final INDArray a = Nd4j.rand(4, 3);
        final INDArray b = Nd4j.rand(4, 5);

        final INDArray target = Nd4j.zeros(3, 5);

        Nd4j.gemm(a, b, target, true, false, 1.0, 0.0);

        final INDArray result = a.transpose().mmul(b);

        assertEquals(result, target);
    }

    @Test
    public void testGemm3(){
        final INDArray a = Nd4j.rand(4, 3);
        final INDArray b = Nd4j.rand(4, 5);

        final INDArray target = Nd4j.zeros(new int[]{2, 3, 5}, 'f');
        final INDArray view = target.tensorAlongDimension(0, 1, 2);

        Nd4j.gemm(a, b, view, true, false, 1.0, 0.0);

        final INDArray result = a.transpose().mmul(b);

        assertEquals(result, view);
    }

    @Test
    public void testGemm4() {
        final INDArray a = Nd4j.rand(4, 3);
        final INDArray b = Nd4j.rand(4, 5);

        final INDArray result = a.transpose().mmul(b);
        final INDArray result2 = Nd4j.gemm(a, b, true, false);

        assertEquals(result, result2);
    }

    @Test
    public void testGemm5(){
        final INDArray a = Nd4j.rand(4, 3);
        final INDArray b = Nd4j.rand(4, 5);

        final INDArray target = Nd4j.zeros(new int[]{2, 3, 5}, 'f');
        final INDArray view = target.tensorAlongDimension(0, 1, 2);

        a.transpose().mmuli(b, view);

        final INDArray result = a.transpose().mmul(b);

        assertEquals(result, view);
    }

    @Test
    public void testGemm6(){
        final INDArray a = Nd4j.rand(4, 3);
        final INDArray b = Nd4j.rand(4, 5);

        final INDArray target = Nd4j.zeros(new int[]{2, 3, 5}, 'c');
        final INDArray view = target.tensorAlongDimension(0, 1, 2);

        a.transpose().mmuli(b, view);

        final INDArray result = a.transpose().mmul(b);

        assertEquals(result, view);
    }
	</description>
	<comments>
		<comment id='1' author='treo' date='2018-10-04T11:03:58Z'>
		As i remember, Nd4j.gemm supposed to be pretty much raw blas call, so it's not aware of views etc.
		</comment>
		<comment id='2' author='treo' date='2018-10-04T11:07:01Z'>
		Right, so it's a validation issue. We should throw an exception on invalid input (views, c order, etc).
		</comment>
		<comment id='3' author='treo' date='2018-10-04T11:10:17Z'>
		So Test 1 and 3 fail because they are views, and Test 2 fails because the target is in c order?
		</comment>
		<comment id='4' author='treo' date='2018-11-09T08:26:23Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>