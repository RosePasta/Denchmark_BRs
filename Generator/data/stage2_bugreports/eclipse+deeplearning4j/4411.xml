<bug id='4411' author='aldrin233' open_date='2017-12-13T21:44:47Z' closed_time='2018-02-09T04:45:13Z'>
	<summary>Android Long Identification Times</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue Description&lt;/denchmark-h&gt;

Upon Trying to Identify an Image from the gallery, I will start identification with a pre-trained model, everything runs until the
12-14 05:18:34.791 24715-24715/cornhub.com.ricediseaseanalyzer I/o.n.n.Nd4jBlas: Number of threads used for BLAS: 4 12-14 05:18:34.801 24715-24715/cornhub.com.ricediseaseanalyzer I/onlaoe.DefaultOpExecuti: Backend used: [CPU]; OS: [Linux] 12-14 05:18:34.801 24715-24715/cornhub.com.ricediseaseanalyzer I/onlaoe.DefaultOpExecuti: Cores: [8]; Memory: [0.5GB]; 12-14 05:18:34.801 24715-24715/cornhub.com.ricediseaseanalyzer I/onlaoe.DefaultOpExecuti: Blas vendor: [OPENBLAS]
where it either freezes or it goes starts up memory freeing.
While using Native Camera Resolution images

it Usually gets stuck

While Using 200x200 Images of Dogs

Black screen along with a LONG wating time then it proceeds to

12-14 05:25:19.221 24715-24715/cornhub.com.ricediseaseanalyzer W/o.r.Reflections: given scan urls are empty. set urls in the configuration 12-14 05:25:20.001 24715-24715/cornhub.com.ricediseaseanalyzer I/odnm.MultiLayerNetwork: Starting MultiLayerNetwork with WorkspaceModes set to [training: NONE; inference: SEPARATE] 12-14 05:25:20.031 24715-24715/cornhub.com.ricediseaseanalyzer W/o.r.Reflections: given scan urls are empty. set urls in the configuration
Without  android:largeHeap="true" at the manifest i get OutOfMemoryExceptions
Generally, trying to load an image into the method
      public INDArray Identify(String filePath, String modelPath) throws Exception { MultiLayerNetwork network = ModelSerializer.restoreMultiLayerNetwork(modelPath); NativeImageLoader loader = new NativeImageLoader(height, width, channels); INDArray image = loader.asMatrix(filePath); DataNormalization scaler = new ImagePreProcessingScaler(0,1); scaler.transform(image); INDArray output = network.output(image); returnoutput;
}'
Entails a blackscreen of Long load times. after that blackscreen of load time i get a

Attempt to Invoke interface method org.nd4j.linalg.api.ndarray.INDArray org.nd4j.linalg.api.ndarray.INDArray.divi(java.lang.Number)' on a null object reference

&lt;denchmark-h:h4&gt;UPDATE&lt;/denchmark-h&gt;

Changing the Line
NativeImageLoader loader = new NativeImageLoader(height, width, channels);
to
 AndroidNativeImageLoader loader = new AndroidNativeImageLoader(height, width, channels);
Actually Sped Up startup of the Identification but still plagued by the blackscreen.
while debugging the blackscreen starts at
 AndroidNativeImageLoader loader = new AndroidNativeImageLoader(height, width, channels);
&lt;denchmark-h:h4&gt;UPDATE 2&lt;/denchmark-h&gt;

Changed method
      public INDArray Identify(String filePath, String modelPath) throws Exception { MultiLayerNetwork network = ModelSerializer.restoreMultiLayerNetwork(modelPath); NativeImageLoader loader = new NativeImageLoader(height, width, channels); INDArray image = loader.asMatrix(filePath); DataNormalization scaler = new ImagePreProcessingScaler(0,1); scaler.transform(image); INDArray output = network.output(image); returnoutput;
}'
to
       public INDArray Identify(Bitmap img, String modelPath) throws Exception { MultiLayerNetwork network = ModelSerializer.restoreMultiLayerNetwork(modelPath); NativeImageLoader loader = new NativeImageLoader(height, width, channels); INDArray image = loader.asMatrix(img); DataNormalization scaler = new ImagePreProcessingScaler(0,1); scaler.transform(image); INDArray output = network.output(image); return output; }
Still Gives off the black Screen, but,

Background sticky concurrent mark sweep GC

appears more quickly
&lt;denchmark-h:h4&gt;Update 3&lt;/denchmark-h&gt;

i Have great decreased identification time by putting the Model inside the raw folder isntead of getting it in the sdcard, however i am getting

12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410] JNI DETECTED ERROR IN APPLICATION: negative buffer capacity: -30000
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]     in call to NewDirectByteBuffer
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]     from java.nio.ByteBuffer org.bytedeco.javacpp.Pointer.asDirectBuffer()
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410] "main" prio=5 tid=1 Runnable
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   | group="main" sCount=0 dsCount=0 obj=0x75cf3598 self=0xf4b24500
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   | sysTid=18594 nice=0 cgrp=default sched=0/0 handle=0xf72dad54
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   | state=R schedstat=( 0 0 0 ) utm=7984 stm=176 core=4 HZ=100
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   | stack=0xff6fc000-0xff6fe000 stackSize=8MB
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   | held mutexes= "mutator lock"(shared held)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #00 pc 00371e0f  /system/lib/libart.so (_ZN3art15DumpNativeStackERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEEiP12BacktraceMapPKcPNS_9ArtMethodEPv+142)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #1 pc 003513d1  /system/lib/libart.so (_ZNK3art6Thread4DumpERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEP12BacktraceMap+160)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #2 pc 0025b68b  /system/lib/libart.so (ZN3art9JavaVMExt8JniAbortEPKcS2+742)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #3 pc 0025bde3  /system/lib/libart.so (_ZN3art9JavaVMExt9JniAbortFEPKcS2_z+74)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #4 pc 002714cb  /system/lib/libart.so (_ZN3art3JNI19NewDirectByteBufferEP7_JNIEnvPvx+174)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #5 pc 0010eff9  /system/lib/libart.so (_ZN3art8CheckJNI19NewDirectByteBufferEP7_JNIEnvPvx+416)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #6 pc 0398b271  /data/app/cornhub.com.ricediseaseanalyzer-2/oat/arm/base.odex (java.nio.ByteBuffer org.bytedeco.javacpp.Pointer.asDirectBuffer()+76)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #7 pc 0398d385  /data/app/cornhub.com.ricediseaseanalyzer-2/oat/arm/base.odex (java.nio.ByteBuffer org.bytedeco.javacpp.Pointer.asByteBuffer()+1064)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #8 pc 03cb5a25  /data/app/cornhub.com.ricediseaseanalyzer-2/oat/arm/base.odex (java.nio.FloatBuffer org.bytedeco.javacpp.FloatPointer.asBuffer()+48)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #9 pc 03dbdb9b  /data/app/cornhub.com.ricediseaseanalyzer-2/oat/arm/base.odex (org.bytedeco.javacpp.indexer.FloatIndexer org.bytedeco.javacpp.indexer.FloatIndexer.create(org.bytedeco.javacpp.FloatPointer, long[], long[], boolean)+238)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #10 pc 03dbda79  /data/app/cornhub.com.ricediseaseanalyzer-2/oat/arm/base.odex (org.bytedeco.javacpp.indexer.FloatIndexer org.bytedeco.javacpp.indexer.FloatIndexer.create(org.bytedeco.javacpp.FloatPointer, long[], long[])+76)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #11 pc 03f35973  /data/app/cornhub.com.ricediseaseanalyzer-2/oat/arm/base.odex (void org.datavec.image.loader.NativeImageLoader.fillNDArray(org.bytedeco.javacpp.opencv_core$Mat, org.nd4j.linalg.api.ndarray.INDArray)+2110)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #12 pc 03f388eb  /data/app/cornhub.com.ricediseaseanalyzer-2/oat/arm/base.odex (org.nd4j.linalg.api.ndarray.INDArray org.datavec.image.loader.NativeImageLoader.transformImage(org.bytedeco.javacpp.opencv_core$Mat, org.nd4j.linalg.api.ndarray.INDArray)+1886)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #13 pc 03f34033  /data/app/cornhub.com.ricediseaseanalyzer-2/oat/arm/base.odex (org.nd4j.linalg.api.ndarray.INDArray org.datavec.image.loader.NativeImageLoader.asMatrix(org.bytedeco.javacpp.opencv_core$Mat)+78)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #14 pc 0436daa1  /data/app/cornhub.com.ricediseaseanalyzer-2/oat/arm/base.odex (org.nd4j.linalg.api.ndarray.INDArray org.datavec.image.loader.AndroidNativeImageLoader.asMatrix(android.graphics.Bitmap)+228)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #15 pc 00d06ebd  /data/app/cornhub.com.ricediseaseanalyzer-2/oat/arm/base.odex (org.nd4j.linalg.api.ndarray.INDArray cornhub.com.ricediseaseanalyzer.ConvNet.Identifier.Identify(android.graphics.Bitmap, java.io.InputStream)+392)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #16 pc 00d07c81  /data/app/cornhub.com.ricediseaseanalyzer-2/oat/arm/base.odex (void cornhub.com.ricediseaseanalyzer.MainActivity.onActivityResult(int, int, android.content.Intent)+956)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   native: #17 pc 007ad881  /system/framework/arm/boot.oat (???)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at org.bytedeco.javacpp.Pointer.asDirectBuffer(Native method)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at org.bytedeco.javacpp.Pointer.asByteBuffer(Pointer.java:667)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at org.bytedeco.javacpp.FloatPointer.asBuffer(FloatPointer.java:140)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at org.bytedeco.javacpp.indexer.FloatIndexer.create(FloatIndexer.java:76)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at org.bytedeco.javacpp.indexer.FloatIndexer.create(FloatIndexer.java:64)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at org.datavec.image.loader.NativeImageLoader.fillNDArray(NativeImageLoader.java:261)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at org.datavec.image.loader.NativeImageLoader.transformImage(NativeImageLoader.java:472)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at org.datavec.image.loader.NativeImageLoader.asMatrix(NativeImageLoader.java:397)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at org.datavec.image.loader.AndroidNativeImageLoader.asMatrix(AndroidNativeImageLoader.java:65)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at cornhub.com.ricediseaseanalyzer.ConvNet.Identifier.Identify(Identifier.kt:37)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at cornhub.com.ricediseaseanalyzer.MainActivity.onActivityResult(MainActivity.kt:76)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at android.app.Activity.dispatchActivityResult(Activity.java:7165)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at android.app.ActivityThread.deliverResults(ActivityThread.java:5003)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at android.app.ActivityThread.handleSendResult(ActivityThread.java:5050)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at android.app.ActivityThread.access$1600(ActivityThread.java:230)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1876)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at android.os.Handler.dispatchMessage(Handler.java:102)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at android.os.Looper.loop(Looper.java:148)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at android.app.ActivityThread.main(ActivityThread.java:7409)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at java.lang.reflect.Method.invoke!(Native method)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1230)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]   at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1120)
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/java_vm_ext.cc:410]
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/runtime.cc:368] Runtime aborting...
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/art: art/runtime/runtime.cc:368]
12-14 07:53:15.081 18594-18594/cornhub.com.ricediseaseanalyzer A/libc: Fatal signal 6 (SIGABRT), code -6 in tid 18594 (diseaseanalyzer)

&lt;denchmark-h:h4&gt;Version Information&lt;/denchmark-h&gt;

Please indicate relevant versions, including, if relevant:
Dl4J versions
`
&lt;denchmark-code&gt;compile 'org.nd4j:nd4j-native:0.9.1:android-x86'

compile 'org.nd4j:nd4j-native:0.9.1:android-arm'

compile 'org.bytedeco.javacpp-presets:openblas:0.2.19-1.3:android-x86'

compile 'org.bytedeco.javacpp-presets:openblas:0.2.19-1.3:android-arm'

compile 'org.deeplearning4j:deeplearning4j-core:0.9.1'

compile 'org.nd4j:nd4j-native:0.9.1'
&lt;/denchmark-code&gt;

`
Phone : Samsung J7 Prime
Android Version : 6.0.1 - Marshmallow
Using the DL4J Example of ConvNet
&lt;denchmark-h:h4&gt;Contributing&lt;/denchmark-h&gt;

If you'd like to help us fix the issue by contributing some code, but would
like guidance or help in doing so, please mention it!
	</description>
	<comments>
		<comment id='1' author='aldrin233' date='2017-12-14T01:38:25Z'>
		So, what is the issue? You're having speed issues in low memory conditions?
		</comment>
		<comment id='2' author='aldrin233' date='2017-12-14T01:40:26Z'>
		You're probably having issues with "workspaces", so I'll mark this as duplicate of &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/issues/4340&gt;#4340&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='aldrin233' date='2017-12-14T06:13:32Z'>
		But you're right that NativeImageLoader.asMatrix() is probably slow on Android. We'd have to use non-direct indexers in there when running Android...
		</comment>
		<comment id='4' author='aldrin233' date='2017-12-14T07:05:25Z'>
		To be clear here: there's absolute 0 chances you'll be able to use HD/FHD/UHD/QHD images for nn's on your phone in nearest future. Phones just do not have enough RAM for convolutions. And tbh, most of PCs these days do not have either.
Your phone has 3GB of RAM. It means: 1 - 1.5GB of RAM is used by OS/UI itself. Rest is split over active apps. So, in the best ever possible case - your phone has 1.5GB of free RAM for your app. So you should live with that fact. You should pick appropriate architectures, calculate memory requirements and so on. And yes, picture downscaling and/or segmentation is option too.
		</comment>
		<comment id='5' author='aldrin233' date='2017-12-14T07:21:02Z'>
		P.s. mobile development on its own is full of tricks. But when it comes to large matrices and linear algebra - stuff becomes even more tricky...
		</comment>
		<comment id='6' author='aldrin233' date='2017-12-31T10:49:49Z'>
		I've fixed the "Negative Buffer Capacity" issue, details at issue &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/issues/4061&gt;#4061&lt;/denchmark-link&gt;
.
&lt;denchmark-link:https://github.com/aldrin233&gt;@aldrin233&lt;/denchmark-link&gt;
 Please try again with the latest binaries of JavaCPP 1.3.4-SNAPSHOT and let us know how it goes. Thanks for the feedback!
		</comment>
		<comment id='7' author='aldrin233' date='2018-02-09T04:48:31Z'>
		And I've accelerated NativeImageLoader a bit on Android by avoiding direct NIO buffers as per the pull request above, but that does not appear to be the bottleneck. My guess is that using &lt;denchmark-link:https://deeplearning4j.org/workspaces&gt;workspaces&lt;/denchmark-link&gt;
 would solve the remaining performance problems, but please let us know if this isn't the case. Also make sure to use JavaCPP 1.4 to fix the "Negative Buffer Capacity" issue.
		</comment>
		<comment id='8' author='aldrin233' date='2018-09-23T11:26:25Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>