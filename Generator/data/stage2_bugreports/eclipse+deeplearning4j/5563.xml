<bug id='5563' author='AlexDBlack' open_date='2018-06-12T05:24:40Z' closed_time='2019-04-25T09:36:10Z'>
	<summary>Nd4j.shuffle: not consistent between backends, insufficiently random on CUDA</summary>
	<description>
Following test does pass, but look at the strings of sequential elements:
&lt;denchmark-code&gt;    @Test
    public void testShuffle(){
        INDArray arr1 = Nd4j.create(150,4);
        INDArray arr2 = Nd4j.create(150, 3);


        for( int i=0; i&lt;150; i++ ){
            arr1.getRow(i).assign(i);
            arr2.getRow(i).assign(i);
        }

        List&lt;int[]&gt; dimensions = Arrays.asList(new int[]{1}, new int[]{1});
        Nd4j.shuffle(Arrays.asList(arr1, arr2), new Random(12345), dimensions);

        Map&lt;Double,Integer&gt; seen = new HashMap&lt;&gt;();
        for( int i=0; i&lt;150; i++ ){
            INDArray r1 = arr1.getRow(i);
            INDArray r2 = arr2.getRow(i);


            assertEquals(r1.getDouble(0), r2.getDouble(0), 0);
            double d = r1.getDouble(0);
            assertEquals(Nd4j.valueArrayOf(r1.shape(), d), r1);
            assertEquals(Nd4j.valueArrayOf(r2.shape(), d), r2);

            if(seen.containsKey(d)){
                fail("Value " + d + " seen at indices " + seen.get(d) + " and " + i );
            }
            seen.put(d, i);
            System.out.format("%3d,", (int)d);
        }

        assertEquals(150, seen.size());
    }
&lt;/denchmark-code&gt;

Native vs. CUDA:
&lt;denchmark-code&gt;7, 50, 31,148,101,134, 27,  0, 17,138,121, 62,103, 16, 51,140, 13,  8, 61,104, 97, 58,115, 54,133,102,109,  6, 35,112,135,  2, 85, 66, 45, 28,105, 44,145,144,107, 52, 87,130, 37, 34,123, 94, 49, 48,  1, 14, 41, 84, 23,128, 89, 72, 21,114,113, 18, 11, 98,137,132, 33, 86,131,136, 81, 78, 57,142, 91, 96, 77, 76, 71,110,119, 70,125, 90, 53, 32, 67, 42,111, 56, 83, 74,129,108, 47,100, 75, 20, 63,106, 95,  4, 25, 12, 19, 36, 99, 40, 93, 26, 79, 88, 29, 60, 59, 22,143,122,139, 80,149, 10,117, 46,147, 82,127,126, 55, 92, 43, 68, 65, 24,  5, 30, 69, 64,  9,118, 15,146, 73,116, 39, 38,141,124,  3,120,

7,  1, 31,148,101,134, 27,  0, 17,138,121, 11,103, 16, 51,140, 13,  8, 61, 19, 97, 21,115, 23,133, 25,109,  6, 35, 29,135,  2, 32, 33, 34, 28, 36, 37, 38,144, 40, 41, 42,130, 44, 45, 46, 47, 48, 49, 50, 14, 52, 53, 54,128, 56, 57, 58, 59, 60, 18, 62, 63, 64,132, 66, 67, 68,136, 70, 71, 72,142, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 20, 98, 99,100,  4,102, 12,104,105,106,107,108, 26,110,111,112,113,114, 22,116,117,118,119,120, 10,122,123,124,125,126,127, 55,129, 43,131, 65, 24,  5, 30, 69,137,  9,139, 15,146, 73,143, 39,145,141,147,  3,149,
&lt;/denchmark-code&gt;

Aha! Link: &lt;denchmark-link:https://skymindai.aha.io/features/ND4J-169&gt;https://skymindai.aha.io/features/ND4J-169&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2018-06-12T05:50:54Z'>
		Hm, i'm pretty much sure we've been here some time ago. And this problem was considered solved.
		</comment>
		<comment id='2' author='AlexDBlack' date='2018-06-12T06:20:35Z'>
		Yeah, I do recall discussing this issue a while ago. Though seeing the very long stretches of completely non-randomized data has me concerned that our current implementation isn't adequate.
		</comment>
		<comment id='3' author='AlexDBlack' date='2019-04-25T09:36:10Z'>
		Confirmed fixed - CUDA now matches CPU
		</comment>
		<comment id='4' author='AlexDBlack' date='2019-05-25T09:49:22Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>