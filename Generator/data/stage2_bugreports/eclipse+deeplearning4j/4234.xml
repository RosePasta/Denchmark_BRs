<bug id='4234' author='KidCrippler' open_date='2017-11-02T11:36:31Z' closed_time='2019-04-08T08:21:22Z'>
	<summary>K-Means implementation is very slow</summary>
	<description>
I'm trying to use DL4J's (version 0.9.1) K-Means implementation. I set it up as follows:
int CLUSTERS = 5;
int MAX_ITERATIONS = 300;
String DISTANCE_METRIC = "cosinesimilarity";
KMeansClustering KMEANS = KMeansClustering.setup(CLUSTERS, MAX_ITERATIONS, DISTANCE_METRIC);
My data points are vectors of size 300 (doubles), and my test set is comprised of ~ 100 data points each time (give or take). I'm running it on my CPU (4 cores) in a single threaded fashion.
Evaluation takes a very long time (a few seconds per example).
I took a peek inside the algorithm's implementation and it looks like its concurrency level is very high - a lot of tasks (Runnable) are being created (one per data point, to be exact) and executed in parallel. Perhaps this is an overkill? Is there any way I can control it through configuration? Other ways to speed it up?
I've also posted a &lt;denchmark-link:https://stackoverflow.com/questions/46995912/deeplearning4j-k-means-very-slow&gt;question&lt;/denchmark-link&gt;
 regarding this issue in Stackoverflow.
	</description>
	<comments>
		<comment id='1' author='KidCrippler' date='2019-04-08T08:21:22Z'>
		Performance fixed, merged.
		</comment>
		<comment id='2' author='KidCrippler' date='2019-05-08T09:12:07Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>