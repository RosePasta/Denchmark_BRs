<bug id='8147' author='AlexDBlack' open_date='2019-08-26T01:56:58Z' closed_time='2019-08-29T02:36:31Z'>
	<summary>ND4J/SameDiff CUDA Failures</summary>
	<description>
Test failures in ND4J/SameDiff on CUDA:
All tested on Windows, CUDA 10.1 Update 1, GTX 970 (x2)
ND4J:

IndexingTests.testINDArrayIndexingEqualToRank() -&gt; JVM crash only when run as part of full suite
MixedDataTypesTests.testTypesValidation_2 and _3 -&gt; JVM crash
Nd4jTestsC.testNativeSort3_1 - failure (reproducible in isolation)
LapackTest.testCholeskyL, testCholeskyU - org.nd4j.linalg.api.blas.BlasException: cusolverDnDpotrf_bufferSize failed: 3

SameDiff:

TFGraphTestAllSameDiff: assert execution failing (CUDA/Java issue) with https://gist.github.com/AlexDBlack/2b76d02f0435f5842b124e2fe7b3f553

Reproduce with TFGraphTestAllList, "assert_equal/3,4_1,4_int32"


Other TFGraphTestAllSameDiff / TFGraphTestList failures:

"embedding_lookup/rank2_multiple_div_nomaxnorm" - JVM crash - https://gist.github.com/AlexDBlack/1c64de368635c325582ee4945c332130
"emptyArrayTests/count_nonzero/rank2_axis0" - NPE - https://gist.github.com/AlexDBlack/23ec2499467b3b6181cc8f183b328d94
"emptyReduceAxisTests/reduce_all/rank1" - shape issue
"emptyReduceAxisTests/reduce_logsumexp/rank1" - JVM crash - Error at [..\..\include\ops\declarable\generic\boolean\select.cpp:34:0]: Select: X and Y shape should be equal
"emptyArrayTests/scatter_update/rank2_emptyIndices_emptyUpdates" - JVM crash
"histogram_fixed_width/rank1" / "...rank2" - expected vs. actual difference
"reductions/scatter_update_vector" - expected vs. actual difference
"scatter_nd_add/*", "scatter_nd_sub/*" (such as "scatter_nd_add/rank1shape_1indices") - expected vs. actual difference. Passes on CPU... but can't rule out bad test here yet (maybe overlapping indices?)
"segment/segment_mean_rank2"/"_rank3", also min, prod, sum. Max passing for all, others passing for rank 1.
"svd/rank2_3,3_full_noUv" - JVM crash (possibly other svd tests also)
"tensor_dot_misc" - JVM crash (c++ exception) - "Can't assign new value to the array: this shape [36, 3, 4, 5]; other shape: [3, 5, 5, 3]"
"topk/rank1_k1" - JVM crash (c++ exception) - possibly other topk cases also


MiscOpValidation.testGatherGradient - JVM crash (including in isolation)
MiscOpValidation.testCheckNumerics2 (NPE - AtomicAllocator.getAllocationPoint)
MiscOpValidation.testScatterOpGradients (test failure, expected vs. actual, looks like legit failure)
MiscOpValidation.testConfusionMatrix (test failure)
ReductionOpValidation.testIndexAccum (JVM crash, inc. in isolation)
ReductionOpValidation.testReductionGradients2 (JVM crash, inc. in isolation)
ShapeOpValidation.testGather, .testGather2 (JVM crash, former crashes in isolation, second passes in isolation)
ShapeOpValidation, testGatherNd, testGatherNdSingle (failure - expected/actual difference)
TransformOpValidation.testDynamicStitch (grad check failure)
TransformOpValidation.testDynamicPartition (expected/actual difference, maybe dtype only? values look correct...)
FlatBuffersSerdeTest.testSimple (JVM crash, inc. in isolation)
SameDiffTests.testExecutionDifferentShapesIndexAccumAlongDim (JVM crash, inc. in isolation)
SameDiffTests.testArgMax, testArgMin (JVM crash inc. in isolation)
SameDiffTrainingTest.testTrainingMixedDtypes (JVM crash, inc. in isolation)

Related: DL4J failures - &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/issues/8116&gt;#8116&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2019-08-26T05:54:44Z'>
		Isolating these import cases:
"embedding_lookup/rank2_multiple_div_nomaxnorm" -&gt; DynamicPartition wrong (passes on CPU)
&lt;denchmark-code&gt;    @Test
    public void testDynamicPartition(){
        INDArray data = Nd4j.createFromArray(2, 1, 2, 0);
        INDArray partitions = Nd4j.createFromArray(0, 2, 1, 0);
        INDArray[] out = Nd4j.exec(DynamicCustomOp.builder("dynamic_partition")
                .addOutputs(Nd4j.createUninitialized(DataType.INT, 2), Nd4j.createUninitialized(DataType.INT, 1), Nd4j.createUninitialized(DataType.INT, 1))
                .addIntegerArguments(3) //3 partitions
                .addInputs(data, partitions).build());

        INDArray exp0 = Nd4j.createFromArray(2, 0);
        INDArray exp1 = Nd4j.createFromArray(2);
        INDArray exp2 = Nd4j.createFromArray(1);

        assertEquals(exp0, out[0]);     //Usually just gives [0,0]
        assertEquals(exp1, out[1]);
        assertEquals(exp2, out[2]);
    }
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='AlexDBlack' date='2019-08-26T07:27:25Z'>
		CudaGridExecutioner is deprecated and not used. Saved only for possible future reference.
		</comment>
		<comment id='4' author='AlexDBlack' date='2019-08-26T07:50:44Z'>
		"histogram_fixed_width/rank1"
&lt;denchmark-code&gt;    @Test
    public void testHistogramFixedWidth(){
        //Bins: [-inf, 0.2), [0.2, 0.4), [0.4, 0.6), [0.6, 0.8), [0.8, inf]
        INDArray in = Nd4j.createFromArray(0.0, 0.1, 0.1, 0.3, 0.5, 0.5, 0.9);
        INDArray range = Nd4j.createFromArray(0.0, 1.0);
        INDArray n = Nd4j.scalar(5);

        INDArray out = Nd4j.create(DataType.INT, 5);

        Nd4j.exec(DynamicCustomOp.builder("histogram_fixed_width")
                .addInputs(in, range, n)
                .addOutputs(out)
                .build());

        INDArray exp = Nd4j.createFromArray(3, 1, 2, 0, 1);
        assertEquals(exp, out);
    }
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;Expected :[         3,         1,         2,         0,         1]
Actual   :[         3,         0,         1,         0,         2]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='AlexDBlack' date='2019-08-26T08:30:41Z'>
		"segment/segment_mean_rank2"
&lt;denchmark-code&gt;    @Test
    public void testSegmentMean(){
        INDArray x = Nd4j.linspace(DataType.FLOAT, 1, 18, 1).reshape(6, 3);
        INDArray segmentIds = Nd4j.createFromArray(0, 0, 1, 1, 2, 2);

        INDArray out = Nd4j.create(DataType.FLOAT, 3, 3);

        Nd4j.exec(DynamicCustomOp.builder("segment_mean")
                .addInputs(x, segmentIds)
                .addOutputs(out)
                .build());

        INDArray exp = out.like();
        exp.putRow(0, x.getRow(0).add(x.getRow(1)).muli(0.5));
        exp.putRow(1, x.getRow(2).add(x.getRow(3)).muli(0.5));
        exp.putRow(2, x.getRow(4).add(x.getRow(5)).muli(0.5));

        assertEquals(exp, out);
    }
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/2360237/63677072-95937d80-c82f-11e9-90da-59bd2db0f50b.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='AlexDBlack' date='2019-08-27T01:40:16Z'>
		Scatter update test case confirmed fixed today (2019/08/27)
Edit: topk, listdiff, empty reduce cases now passing also.
		</comment>
		<comment id='10' author='AlexDBlack' date='2019-08-28T13:26:43Z'>
		Should be all done by now.
		</comment>
		<comment id='11' author='AlexDBlack' date='2019-08-29T02:36:31Z'>
		Only ones remaining are scatter_nd (which are non-unique indices without locking, test fix incoming), SVD (also test fix incoming) and LapackTest.testCholeskyL/U.
I'll open issue for the latter.
		</comment>
	</comments>
</bug>