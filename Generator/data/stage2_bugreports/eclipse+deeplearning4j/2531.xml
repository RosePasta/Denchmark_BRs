<bug id='2531' author='reidswanson' open_date='2016-12-18T18:33:28Z' closed_time='2018-04-27T23:11:42Z'>
	<summary>MultiLayerNetwork Serialization problem when StatsListener is attached</summary>
	<description>
A StatsListener attached to a MultiLayerNetwork prevents it from being serialized.
The main code snippet that causes this problem is shown here, but the full eclipse/maven project that reproduces the issue is attached:
&lt;denchmark-code&gt;UIServer uiServer = UIServer.getInstance();
StatsStorage storage = new InMemoryStatsStorage();
uiServer.attach(storage);
  
// This iterator just generates random labels and features of the right shape      
RandomIterator itr = new RandomIterator(16, 64, nin, 10, nout);
MultiLayerNetwork nn = new MultiLayerNetwork(configureNetwork(nin, nhidden, nout));
nn.init();
nn.setListeners(new StatsListener(storage));
        
while (itr.hasNext()) {
    nn.fit(itr.next());
    SerializationUtils.saveObject(nn, new File("nn.ser"));
}
&lt;/denchmark-code&gt;

This is the exception that is thrown.
&lt;denchmark-code&gt;Exception in thread "main" java.lang.RuntimeException: java.io.NotSerializableException: sun.management.GarbageCollectorImpl
	at org.deeplearning4j.util.SerializationUtils.saveObject(SerializationUtils.java:116)
	at com.reidswanson.NetworkSerializationTest.main(NetworkSerializationTest.java:52)
Caused by: java.io.NotSerializableException: sun.management.GarbageCollectorImpl
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1184)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)
	at java.util.ArrayList.writeObject(ArrayList.java:762)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:1028)
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548)
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)
	at java.util.ArrayList.writeObject(ArrayList.java:762)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:1028)
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548)
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)
	at java.util.LinkedHashMap.internalWriteEntries(LinkedHashMap.java:333)
	at java.util.HashMap.writeObject(HashMap.java:1362)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:1028)
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548)
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)
	at org.deeplearning4j.util.SerializationUtils.saveObject(SerializationUtils.java:111)
	... 1 more
&lt;/denchmark-code&gt;

See the attached eclipse/maven project to reproduce the problem
&lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/files/659573/dl4j-serialization.tar.gz&gt;dl4j-serialization.tar.gz&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='reidswanson' date='2016-12-18T23:06:46Z'>
		We strongly recommend using ModelSerializer instead of java object serialization:
&lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/blob/master/deeplearning4j-nn/src/main/java/org/deeplearning4j/util/ModelSerializer.java#L79&gt;https://github.com/deeplearning4j/deeplearning4j/blob/master/deeplearning4j-nn/src/main/java/org/deeplearning4j/util/ModelSerializer.java#L79&lt;/denchmark-link&gt;

Java serialization for networks is very brittle anyway with respect to any class changes between version - we tend to keep backward compatibility via the JSON format (used within model serializer).
That said: we can probably make the offending fields transient.
		</comment>
		<comment id='2' author='reidswanson' date='2016-12-19T10:53:14Z'>
		I've implemented some serialization changes (transient) on the offending field here - &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/pull/2538&gt;https://github.com/deeplearning4j/deeplearning4j/pull/2538&lt;/denchmark-link&gt;

That will be merged soon.
Of course, the StatsStorage / StatsStorageRouter may (or may not) be serializable depending on the specific implementation you are using.
Overall, serializing the StatsStorageRouter like that still isn't recommended.
		</comment>
		<comment id='3' author='reidswanson' date='2016-12-30T21:07:47Z'>
		Sorry for the delayed response (and hit wrong keyboard shortcut and submitted too early), but I'm still having problems (after updating to v0.7.2).
My Network is part of another class that I'm trying to serialize and I would like to avoid serializing the network to a separate file that I'd have to maintain.
I've tried making the network transient and instead using the ModelSerializer in the write/read Object methods of my class. However, during loading the model it throws a StreamCorrputedException:
Caused by: java.io.StreamCorruptedException: invalid type code: 00 at java.io.ObjectInputStream$BlockDataInputStream.readBlockHeader(ObjectInputStream.java:2537) at java.io.ObjectInputStream$BlockDataInputStream.refill(ObjectInputStream.java:2571) at java.io.ObjectInputStream$BlockDataInputStream.read(ObjectInputStream.java:2730) at java.io.ObjectInputStream.read(ObjectInputStream.java:868) at java.io.InputStream.read(InputStream.java:101) at java.nio.file.Files.copy(Files.java:2908) at java.nio.file.Files.copy(Files.java:3027) at org.deeplearning4j.util.ModelSerializer.restoreMultiLayerNetwork(ModelSerializer.java:291)
I've attached an eclipse project with 4 test cases in src/test/java

Simply writing the model using ModelSerializer (no problem)
Simply writing the model using standard serialization (no problem)


Writing the model using serialization when a StatsListener with InMemoryStorage is attached (fails due to InMemoryStorage not being serializable)
Writing the model as part of another class using custom serialization in writeObject to use the ModelSerializer (fails due to corrupt stream).

&lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/files/679239/dl4j-serialization.tar.gz&gt;dl4j-serialization.tar.gz&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='reidswanson' date='2018-04-27T18:18:52Z'>
		Is it fixed now?
		</comment>
		<comment id='5' author='reidswanson' date='2018-09-22T07:24:20Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>