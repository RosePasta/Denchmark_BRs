<bug id='7674' author='DrChainsaw' open_date='2019-05-05T20:32:56Z' closed_time='2019-06-20T13:54:14Z'>
	<summary>Matrix multiplication with scalar result does not preserve DataType</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue Description&lt;/denchmark-h&gt;

The following testcase fails in beta4 using both CPU and CUDA 10 backend:
&lt;denchmark-code&gt;@Test
public void mmulToScalar() {
    final INDArray arr1 = Nd4j.create(new float[] {1,2,3}).reshape(1,3);
    final INDArray arr2 = arr1.reshape(3,1);
    assertEquals("Incorrect type!", DataType.FLOAT, arr1.mmul(arr2).dataType());
}
&lt;/denchmark-code&gt;

Reason is that this case is handled using Nd4j.getBlasWrapper().dot which returns a double:
&lt;denchmark-code&gt;if (result.isScalar())
            return Nd4j.scalar(Nd4j.getBlasWrapper().dot(this, other)).reshape(1, 1);
&lt;/denchmark-code&gt;

&lt;denchmark-h:h4&gt;Version Information&lt;/denchmark-h&gt;

Please indicate relevant versions, including, if relevant:

Deeplearning4j version: 1.0.0-beta4
platform information (OS, etc): Windows 10
CUDA version, if used: 10
NVIDIA driver version, if in use: CBA to look it up. Shouldn't matter...

&lt;denchmark-h:h4&gt;Contributing&lt;/denchmark-h&gt;

I guess fixing this is trivial.
	</description>
	<comments>
		<comment id='1' author='DrChainsaw' date='2019-05-06T03:49:12Z'>
		I'm not convinced that's a bug. dot() intentionally returns double. Nd4j.scalar() intentionally creates double scalar out of double primitive.
Want to inherit array datatype? Use Dot op.
		</comment>
		<comment id='2' author='DrChainsaw' date='2019-05-06T03:52:52Z'>
		In general, this issue just raises another question: where we want to draw a line between primitives and INDArray data types.
		</comment>
		<comment id='3' author='DrChainsaw' date='2019-05-06T04:33:29Z'>
		No, this is definitely a bug. The return type of mmul should always match the arg types regardless of input shapes; it doesn't here because of the java shortcut to use dot (which is an internal detail here).
		</comment>
		<comment id='4' author='DrChainsaw' date='2019-06-20T12:54:52Z'>
		Implemented in dev branch.
		</comment>
	</comments>
</bug>