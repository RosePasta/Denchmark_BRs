<bug id='961' author='LukasMasuch' open_date='2015-12-16T00:09:27Z' closed_time='2020-10-06T04:44:13Z'>
	<summary>DeepWalk: problem with huffman tree if graph contains nodes with degree == 0</summary>
	<description>
Applying DeepWalk on a graph (1.7m nodes) containing some nodes with degree == 0 will result in this exception:
java.lang.RuntimeException: Cannot generate code: code length exceeds 64 bits
I assume, the problem is that the huffman tree will get quite unbalanced and deep because adding together two zero-degree nodes will result in zero. Thereby, the code length will be longer than 64bit.
 public void buildTree(int[] vertexDegree) {
        PriorityQueue&lt;Node&gt; pq = new PriorityQueue&lt;&gt;();
        for (int i = 0; i &lt; vertexDegree.length; i++) pq.add(new Node(i, vertexDegree[i], null, null));

        while (pq.size() &gt; 1) {
            Node left = pq.remove();
            Node right = pq.remove();
            Node newNode = new Node(-1, left.count + right.count, left, right);
            pq.add(newNode);
        }
	</description>
	<comments>
		<comment id='1' author='LukasMasuch' date='2015-12-16T00:30:28Z'>
		TODO: Add checking and handling of zero-degree vertices in graph, both for tree construction and for random walks / learning.
Possibly: ignore vertices that have zero degree.
		</comment>
		<comment id='2' author='LukasMasuch' date='2016-06-04T15:04:03Z'>
		Was this done yet?
		</comment>
		<comment id='3' author='LukasMasuch' date='2016-12-06T13:22:29Z'>
		&lt;denchmark-link:https://github.com/agibsonccc&gt;@agibsonccc&lt;/denchmark-link&gt;
 apparently not, I just experienced this issue.
		</comment>
		<comment id='4' author='LukasMasuch' date='2017-02-16T14:04:35Z'>
		&lt;denchmark-link:https://github.com/raver119&gt;@raver119&lt;/denchmark-link&gt;
 how relevant is this for your rewrite?
		</comment>
		<comment id='5' author='LukasMasuch' date='2017-02-16T18:34:50Z'>
		Still relevant, DeepWalk is still pending transfer to SeqVec native code, plus Josh asked for node2vec recently, which, basically, is the same DeepWalk with different walks generator.
		</comment>
		<comment id='6' author='LukasMasuch' date='2017-02-16T18:38:36Z'>
		&lt;denchmark-link:https://github.com/raver119&gt;@raver119&lt;/denchmark-link&gt;
 yes, there are many different algos that uses the same principles but with different walking strategies. However to my experience (with the older DeepWalk code, not the SeqVec transfer you are working on) it is quite easy to just extends DL4J to implement new walk algorithms.
Are Josh or you working on a new lists os walks? If so, is there a list of the ones that will get implemented?
		</comment>
		<comment id='7' author='LukasMasuch' date='2017-02-16T18:42:09Z'>
		it will be the same. the only difference for end-user: DeepWalk will be native, so significantly faster. You can have it right now via SeqVec,  i just need to make DeepWalk an actual wrapper for it.
As for walks: i'm thinking about BFS/DFS.
As for walks extension: yes, that's the idea of extensible interfaces for it. Btw, if you have anything cool implemented - we're welcoming any PRs :)
		</comment>
		<comment id='8' author='LukasMasuch' date='2017-02-16T18:44:33Z'>
		&lt;denchmark-link:https://github.com/raver119&gt;@raver119&lt;/denchmark-link&gt;
 good.
About BFS/DFS they are good. I encountered DFS in at least one DeepWalk paper, but experiencing with differents makes sense for different projects. At that point, the walking method becomes yet another hyperparameter to test and setup.
		</comment>
		<comment id='9' author='LukasMasuch' date='2020-10-06T04:44:13Z'>
		Closing stale issue: cleanup.
		</comment>
	</comments>
</bug>