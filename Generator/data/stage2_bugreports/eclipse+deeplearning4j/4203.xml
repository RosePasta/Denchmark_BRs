<bug id='4203' author='turambar' open_date='2017-10-24T14:37:46Z' closed_time='2017-11-25T04:29:05Z'>
	<summary>PrecisionRecallCurve.getPointAtRecall() returns suboptimal precision</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue Description&lt;/denchmark-h&gt;

The current implementation of getPointAtRecall() can return a point with suboptimal precision when you have multiple points with the same recall (which is possible). This is especially common in settings with severe class imbalance.
Link: &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/blob/master/deeplearning4j-nn/src/main/java/org/deeplearning4j/eval/curves/PrecisionRecallCurve.java#L168&gt;https://github.com/deeplearning4j/deeplearning4j/blob/master/deeplearning4j-nn/src/main/java/org/deeplearning4j/eval/curves/PrecisionRecallCurve.java#L168&lt;/denchmark-link&gt;

&lt;denchmark-h:h4&gt;Version Information&lt;/denchmark-h&gt;

DL4J current master
	</description>
	<comments>
		<comment id='1' author='turambar' date='2017-10-24T14:40:01Z'>
		Fix is likely to check ALL points with recall &gt;= minimum recall and pick one with best precision. This works since we're traversing points in descending order of recall.
		</comment>
		<comment id='2' author='turambar' date='2018-09-24T07:44:00Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>