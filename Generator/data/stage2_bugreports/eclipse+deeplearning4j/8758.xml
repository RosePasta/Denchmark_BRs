<bug id='8758' author='AlexDBlack' open_date='2020-03-05T23:45:52Z' closed_time='2020-04-06T09:45:30Z'>
	<summary>libnd4j: CUDA - pairwise boolean transforms: wrong datatype for shape calculation</summary>
	<description>
&lt;denchmark-link:https://gist.github.com/AlexDBlack/a5fb62467afc5eaf92cb0b00122ba1c6&gt;https://gist.github.com/AlexDBlack/a5fb62467afc5eaf92cb0b00122ba1c6&lt;/denchmark-link&gt;

CPU is correct (bool type). CUDA is wrong (float type).
Seems to impact all boolean ops - greater_equal, greater, not_equals, etc
&lt;denchmark-code&gt;DynamicCustomOp op = DynamicCustomOp.builder("greater_equal")
        .addInputs(Nd4j.create(DataType.FLOAT, 3), Nd4j.create(DataType.FLOAT, 3))
        .build();
List&lt;LongShapeDescriptor&gt; l = op.calculateOutputShape();
&lt;/denchmark-code&gt;

CPU:
&lt;denchmark-code&gt;[1,3,1,524288,1,c]
&lt;/denchmark-code&gt;

CUDA:
&lt;denchmark-code&gt;[1,3,1,8192,1,c]
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2020-03-06T06:21:20Z'>
		It must be Java then.
		</comment>
		<comment id='2' author='AlexDBlack' date='2020-03-20T09:11:33Z'>
		I've stepped through this carefully in the debugger, I'm quite sure it's not a java side problem.
As far as I can tell the shape pointer returned from C++ definitely contains the wrong datatype for the output shape on CUDA only.
&lt;denchmark-link:https://github.com/eclipse/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-backend-impls/nd4j-cuda/src/main/java/org/nd4j/linalg/jcublas/ops/executioner/CudaExecutioner.java#L1946-L1960&gt;https://github.com/eclipse/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-backend-impls/nd4j-cuda/src/main/java/org/nd4j/linalg/jcublas/ops/executioner/CudaExecutioner.java#L1946-L1960&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/eclipse/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-backend-impls/nd4j-native/src/main/java/org/nd4j/linalg/cpu/nativecpu/ops/NativeOpExecutioner.java#L1772&gt;https://github.com/eclipse/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-backend-impls/nd4j-native/src/main/java/org/nd4j/linalg/cpu/nativecpu/ops/NativeOpExecutioner.java#L1772&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='AlexDBlack' date='2020-03-20T09:12:59Z'>
		Yes, it's "same dtype" thing. But I'm sure nd4j CPU overrides this option for this op group.
		</comment>
		<comment id='4' author='AlexDBlack' date='2020-03-20T09:30:19Z'>
		There's no overriding on CPU on the Java side that I can see:
NativeOpExecutioner.getShapeFromPointer has extras arg 524288 right out of c++ - there's no overriding of that between the loop.calculateOutputShapes2 call in NativeOpExecutioner an the LongPointer.get(int) call in getShapeFromPointer to extract shape info values
CudaExecutioner.getShapeFromPointer has extra arg 8192 right out of the pointer.
		</comment>
		<comment id='5' author='AlexDBlack' date='2020-03-20T09:31:13Z'>
		Hmmmmm....
		</comment>
		<comment id='6' author='AlexDBlack' date='2020-04-06T09:45:31Z'>
		Fixed/implemented in my branch. Will merge later.
		</comment>
	</comments>
</bug>