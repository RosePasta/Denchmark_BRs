<bug id='4057' author='tail-island' open_date='2017-09-13T03:09:32Z' closed_time='2018-05-05T05:24:58Z'>
	<summary>ComputationGraph topological sort is not guaranteed to be consistent across platforms</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue Description&lt;/denchmark-h&gt;

I'm writing an Android app using a neural-network imported from Keras 1.2.2.
Returned values from ComputationGraph#outputSingle() varies by CPU. On x86 Android emulator, output values are correct. But on ARM Android device, they are invalid.
Reproducing program is &lt;denchmark-link:https://github.com/tail-island/try-dl4j-android&gt;here&lt;/denchmark-link&gt;
. Please run androidTest with Android emulator and ARM Android device. testWithComputationGraph() will fail on ARM only.
&lt;denchmark-h:h4&gt;Version Information&lt;/denchmark-h&gt;


Deeplearning4j 9.0.1
JavaCPP Presets for OpenBLAS 0.2.19-1.3
Ubuntu 16.04
ASUS ZenFone AR (Android 7.0)
Android Studio 2.3.3 (Android Emulator 26.1.4, Android SDK Plargorm-Tools 26.0.0, Android SDK Tools 26.0.2)

&lt;denchmark-h:h4&gt;Contributing&lt;/denchmark-h&gt;

I think this issue's reason is below:

Result of ComputationGraph#topologicalSortOrder() is different between x86 and ARM. The reason of difference is that HashMap iterating order is different between x86 and ARM.
Neural-network will be initialized with invalid parameters. Because ComputationGraph#init() assigns parameters following topological sort order.
If neural-network parameters are invalid, output values will be invalid.

Below Android app code outputs invalid values on ARM.
&lt;denchmark-code&gt;private void wrongOutputOnARM() throws IOException, ClassNotFoundException {
    // Adding reference. Because the model is imported from Keras and Reflections does not work on Android...
    NeuralNetConfiguration.reinitMapperWithSubtypes(Arrays.asList(new NamedType(TensorFlowCnnToFeedForwardPreProcessor.class)));

    // Loading model.
    ComputationGraph model = getModel(R.raw.model);

    // Prints output values. Correct on x86 but invalid on ARM...
    System.out.println(model.outputSingle(getInput(R.raw.input1), getInput(R.raw.input2), getInput(R.raw.input3), getInput(R.raw.input4)));
}

// Loading model.
private ComputationGraph getModel(int resourceId) throws IOException {
    try (InputStream stream = getResources().openRawResource(resourceId)) {
        return ModelSerializer.restoreComputationGraph(stream);
    }
}

// Loading input.
private INDArray getInput(int resourceId) throws IOException, ClassNotFoundException {
    try (InputStream stream = getResources().openRawResource(resourceId)) {
        return (INDArray)new ObjectInputStream(stream).readObject();
    }
}
&lt;/denchmark-code&gt;

Creating ComputationGraph wrapper that overrides topologicalSortOrder().
&lt;denchmark-code&gt;public class ComputationGraphWrapper extends ComputationGraph {
    public ComputationGraphWrapper(ComputationGraphConfiguration configuration) {
        super(configuration);
    }

    @Override
    public int[] topologicalSortOrder() {
        if (topologicalOrder != null)
            return topologicalOrder;

        (snip)

        // *** Changing the type of inputEdges from HashMap to LinkedHashMap for keeping order. ***
        Map&lt;Integer, Set&lt;Integer&gt;&gt; inputEdges = new LinkedHashMap&lt;&gt;(); //key: vertex. Values: vertices that the key vertex receives input from
        Map&lt;Integer, Set&lt;Integer&gt;&gt; outputEdges = new HashMap&lt;&gt;(); //key: vertex. Values: vertices that the key vertex outputs to

        (snip)

        return out;
    }
}
&lt;/denchmark-code&gt;

Using wrapper. Below code outputs correct values on ARM!
&lt;denchmark-code&gt;private void correctOutputOnX86AndARM() throws IOException, ClassNotFoundException {
    NeuralNetConfiguration.reinitMapperWithSubtypes(Arrays.asList(new NamedType(TensorFlowCnnToFeedForwardPreProcessor.class)));

    // Using ComputationGraphWrapper. Initialization code is copied from ModelSerializer.restoreComputationGraph().
    ComputationGraph model = new ComputationGraphWrapper(ComputationGraphConfiguration.fromJson(getContent(R.raw.configuration)));
    model.init(getCoefficients(R.raw.coefficients), false);

    // Prints output values. Correct on x86 and ARM!
    System.out.println(model.outputSingle(getInput(R.raw.input1), getInput(R.raw.input2), getInput(R.raw.input3), getInput(R.raw.input4)));
}

// Load contents.
private String getContent(int resourceId) throws IOException {
    try (BufferedReader reader = new BufferedReader(new InputStreamReader(getResources().openRawResource(resourceId)))) {
        StringBuilder sb = new StringBuilder();

        String line;
        while ((line = reader.readLine()) != null) {
            sb.append(line).append("\n");
        }

        return sb.toString();
    }
}

// Load parameters.
private INDArray getCoefficients(int resourceId) throws IOException, ClassNotFoundException {
    try (InputStream stream = getResources().openRawResource(resourceId)) {
        return Nd4j.read(new DataInputStream(stream));
    }
}
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='tail-island' date='2017-09-13T22:17:35Z'>
		Thanks for looking into this!! Could you send a pull request with the suggested fix above?
		</comment>
		<comment id='2' author='tail-island' date='2017-09-14T06:37:23Z'>
		thanks &lt;denchmark-link:https://github.com/tail-island&gt;@tail-island&lt;/denchmark-link&gt;
! Let us know if you need help with a PR, in case you have time for this.
&lt;denchmark-link:https://github.com/iRazvan&gt;@iRazvan&lt;/denchmark-link&gt;
 would this help you for your problem? &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/issues/4061&gt;#4061&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='tail-island' date='2017-09-14T06:47:21Z'>
		Thanks for checking my report! I have time and I had forked DL4J. But I'm not a good developer... Long time needed for creating build environment... Please wait a while.
One more. Maybe I cannot add new tests for this issue, because I don't know how to add Android test environment to DL4J. Is it okay?
		</comment>
		<comment id='4' author='tail-island' date='2017-09-14T06:57:57Z'>
		&lt;denchmark-link:https://github.com/tail-island&gt;@tail-island&lt;/denchmark-link&gt;
 Yes that's alright, we don't have a test environment for Android yet...
		</comment>
		<comment id='5' author='tail-island' date='2017-09-14T07:14:23Z'>
		Thanks! I'm creating pull requests now. But I'm newbie; it's my first pull request. Please give me a time.
		</comment>
		<comment id='6' author='tail-island' date='2017-09-14T07:49:51Z'>
		&lt;denchmark-link:https://github.com/tail-island&gt;@tail-island&lt;/denchmark-link&gt;
 don't worry, take your time. we're here to help as well, just ping us if needed.
		</comment>
		<comment id='7' author='tail-island' date='2017-09-14T11:32:56Z'>
		ComputationGraph is getting a substantial refactor here: &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/pull/4050&gt;https://github.com/deeplearning4j/deeplearning4j/pull/4050&lt;/denchmark-link&gt;

I'll look at this at the same time as doing that. I already planned on adding the topological sort order to the JSON.
		</comment>
		<comment id='8' author='tail-island' date='2017-09-14T17:49:18Z'>
		Great! I'm looking forward to your refactored classes. But, may I fix this issue temporally? It's a chance for me contributing such a wonderful project.
		</comment>
		<comment id='9' author='tail-island' date='2017-09-15T03:43:54Z'>
		Any changes there would have to be thoroughly tested to ensure backward compatibility.
You are welcome to submit a pull request, but I'll need to carefully review/test it before merging.
		</comment>
		<comment id='10' author='tail-island' date='2017-09-15T03:48:04Z'>
		Thanks a lot!
		</comment>
		<comment id='11' author='tail-island' date='2018-04-26T21:46:48Z'>
		&lt;denchmark-link:https://github.com/AlexDBlack&gt;@AlexDBlack&lt;/denchmark-link&gt;
                        I guess this issue is fixed now?
		</comment>
		<comment id='12' author='tail-island' date='2018-04-27T01:58:03Z'>
		No, I don't think so...
		</comment>
		<comment id='13' author='tail-island' date='2018-04-27T02:08:02Z'>
		Right, it was fixed as part of an earlier large refactoring PR that wasn't completed.
I've been putting this off with the idea of getting back to that. But we'll probably split that up into a number of smaller/separate PRs instead.
tl;dr yes, it still needs to be fixed.
		</comment>
		<comment id='14' author='tail-island' date='2018-05-05T05:35:18Z'>
		Fixed here: &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/pull/5050&gt;https://github.com/deeplearning4j/deeplearning4j/pull/5050&lt;/denchmark-link&gt;

		</comment>
		<comment id='15' author='tail-island' date='2018-09-22T05:24:18Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>