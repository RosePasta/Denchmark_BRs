<bug id='4766' author='gogo111007' open_date='2018-03-07T06:55:41Z' closed_time='2018-03-22T06:02:37Z'>
	<summary>KMeansClustering cause thread leak</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue Description&lt;/denchmark-h&gt;

i use KMeansClustering like KMeansTest.java
every client request, i get new kmeans object by KMeansClustering.setup()
but there is no way to destroy threads allocate by KMeansClustering
after thousands or more request, too many threads cause crash
&lt;denchmark-h:h4&gt;Version Information&lt;/denchmark-h&gt;


deeplearning4j ver newest
windows 7 and centos 6.x

	</description>
	<comments>
		<comment id='1' author='gogo111007' date='2018-03-09T19:21:19Z'>
		I recently stumbled across this too.  The issue is in BaseClusteringAlgorithm.  It constructs an ExecutorService but provides no way to free it.
&lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/blob/master/deeplearning4j-nearestneighbors-parent/nearestneighbor-core/src/main/java/org/deeplearning4j/clustering/algorithm/BaseClusteringAlgorithm.java#L70&gt;https://github.com/deeplearning4j/deeplearning4j/blob/master/deeplearning4j-nearestneighbors-parent/nearestneighbor-core/src/main/java/org/deeplearning4j/clustering/algorithm/BaseClusteringAlgorithm.java#L70&lt;/denchmark-link&gt;

I would be happy to help provide a PR to solve this if the maintainers give me some direction as to how this should be resolved.
the jdk attempts to implement a finalizer in ThreadPoolExecutor to shutdown the pool if it is garbage collected, however this does not work correctly if threads are started since they also hold a reference to their parent pool (and thus the finalizer is never invoked even if BaseClusteringAlgorithm is garbage collected).
If you wanted to rely on garbage collection I see two possible options:

Selfish plug of using a better thread pool.  Thread pools (PriorityScheduler for example) from my threadly project do not suffer from this issue.  They can be collected normally, or you can use CentralThreadlyPool as a way to avoid needing to manage the lifecycle at all.
You can implement a finalizer in BaseClusteringAlgorithm which invokes a shutdown to it's retained pool.

I personally don't like depending on finalizers.  My personal preference (though potentially unpopular) would be to have people supply an Executor (Executor is way better than ExecutorService if you can), and then put the thread pool management on the user.
If you are willing to depend on threadly, if an executor is not provided using a threadly executor can provide the ability to fall back to garbage collection for releasing the created threads.
		</comment>
		<comment id='2' author='gogo111007' date='2018-03-09T21:51:50Z'>
		I guess after looking at ExecutorServiceProvider maybe the original intention was to set instance (which currently goes unused) and reuse that instance.
		</comment>
		<comment id='3' author='gogo111007' date='2018-03-10T01:05:16Z'>
		&lt;denchmark-link:https://github.com/jentfoo&gt;@jentfoo&lt;/denchmark-link&gt;
 Thanks for the input! Using threadly looks like a good technical solution, but I think the Mozilla license is a problem, &lt;denchmark-link:https://github.com/agibsonccc&gt;@agibsonccc&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='4' author='gogo111007' date='2018-03-12T15:15:05Z'>
		We follow apache legal guidelines: &lt;denchmark-link:https://www.apache.org/legal/resolved.html&gt;https://www.apache.org/legal/resolved.html&lt;/denchmark-link&gt;
 It doesn't appear to conflict with the EPL, I'd be ok with this in that case.
		</comment>
		<comment id='5' author='gogo111007' date='2018-03-12T15:28:57Z'>
		&lt;denchmark-link:https://github.com/agibsonccc&gt;@agibsonccc&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/saudet&gt;@saudet&lt;/denchmark-link&gt;
 Thanks for taking a look.  One of the primary reasons for choosing MPL 2.0 was its compatibility with other licenses.  It seemed like a license that would be a nice fit for a library like threadly.  I want anyone who wants to be able to use threadly, my only reason for not using apache is I want development on the project to remain open source and encourage modifications needed to be merged to the upstream project if possible.
So in short, I don't see any reason it should be a problem either.  I was going to provide a PR for &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/issues/4781&gt;#4781&lt;/denchmark-link&gt;
 as well, so if you wanted I could include adding threadly and any other concurrency cleanup things I might notice (all open for discussion of course, but to give us a starting point for that discussion).
		</comment>
		<comment id='6' author='gogo111007' date='2018-03-13T12:27:15Z'>
		Yes sounds good, go ahead with the PR, thanks!
		</comment>
		<comment id='7' author='gogo111007' date='2018-09-23T02:28:05Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>