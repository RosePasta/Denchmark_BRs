<bug id='5638' author='DrChainsaw' open_date='2018-06-18T22:04:20Z' closed_time='2018-06-22T00:37:19Z'>
	<summary>ND4j#zeros unreliable when used with HOST_ONLY workspace and CUDA backend</summary>
	<description>
The testcase below fails (yeah, I know it can't really "pass" but I'm sure you get it) on my machine when using snapshot from today and CUDA backend (tested 8.0 and 9.0).
Windows 10
GTX 980 ti
Driver version: 391.35
&lt;denchmark-code&gt;@Test
public void testWorkspaceReuse() {
    final WorkspaceConfiguration workspaceConfig = WorkspaceConfiguration.builder()
            .policyMirroring(MirroringPolicy.HOST_ONLY) // Commenting this out makes it so that assert is not triggered (for at least 40 secs or so...)
            .build();
    int cnt = 0;

    // Only fails with CUDA backend
    assertEquals("Incorrect backend", "JCublasBackend", Nd4j.getBackend().getClass().getSimpleName());
    while (true) {
        try (MemoryWorkspace ws = Nd4j.getWorkspaceManager().getAndActivateWorkspace(workspaceConfig, "test")) {
            final INDArray zeros = Nd4j.zeros(4, 'f');
            //final INDArray zeros = Nd4j.create(4, 'f'); // Also fails, but maybe less of an issue as javadoc does not say that one can expect returned array to be all zeros.
            assertEquals("Got non-zero array " + zeros + " after " + cnt + " iterations !", 0d, zeros.sumNumber().doubleValue(), 1e-10);
            zeros.putScalar(0, 1);
            cnt++;
            System.out.println(cnt);
           // ws.notifyScopeLeft(); // Does not help, testcase still fails
           // ws.destroyWorkspace(); // Does help, testcase does not fail (nor end)!
        }
    }

}
&lt;/denchmark-code&gt;

It seems like the "zeros" array gets recycled somehow.
Program output:
1
2
junit.framework.AssertionFailedError: Got non-zero array [[    1,0000,         0,         0,         0]] after 2 iterations !
Expected :0.0
Actual   :1.0
I ran into this issue (assuming thats what it is) when raver119 helped me out with (another) workspace related issue and it might have gotten lost in the chat. I can easily work around this issue by calling workspace#destroyWorkspace so I'm not really in desperate need of a fix. I just it is something you might wanna be aware of since the errors could be hard to spot (in my case the symptom was poor training convergence as I created my labels in the same way as above).
	</description>
	<comments>
		<comment id='1' author='DrChainsaw' date='2018-06-22T00:37:19Z'>
		Issue fixed
		</comment>
		<comment id='2' author='DrChainsaw' date='2018-06-22T00:37:33Z'>
		Thanks for highlighting this one
		</comment>
		<comment id='3' author='DrChainsaw' date='2018-09-21T17:59:24Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>