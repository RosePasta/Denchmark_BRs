<bug id='6873' author='AlexDBlack' open_date='2018-12-17T02:29:36Z' closed_time='2019-01-07T06:47:52Z'>
	<summary>Libnd4j: multiple bugs/issues</summary>
	<description>
I'll use this issue to consolidate multiple smaller issues.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;


Confirmed fixed. Original: &lt;denchmark-link:https://gist.github.com/AlexDBlack/76e8b0339125d0e281e20e38861757b1&gt;https://gist.github.com/AlexDBlack/76e8b0339125d0e281e20e38861757b1&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;


Confirmed fixed. Original: &lt;denchmark-link:https://gist.github.com/AlexDBlack/94608aa7f4e30a94b50f35532ebc8978&gt;https://gist.github.com/AlexDBlack/94608aa7f4e30a94b50f35532ebc8978&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Issue 3: reduce_norm2_bp scalar case - "Not implemented yet"
Fixed.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;


Probably fixed in recent PR - can't reproduce now.
Original: &lt;denchmark-link:https://gist.github.com/AlexDBlack/81594fbccf667bde9b01cd4e5f5b3ad7&gt;https://gist.github.com/AlexDBlack/81594fbccf667bde9b01cd4e5f5b3ad7&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;


Fixed. Original: &lt;denchmark-link:https://gist.github.com/AlexDBlack/7afa15f2f9e830c9209aada6e68b6406&gt;https://gist.github.com/AlexDBlack/7afa15f2f9e830c9209aada6e68b6406&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

**
Both issues now fixed.
Original: &lt;denchmark-link:https://gist.github.com/AlexDBlack/7cc1ce87e2e9525f33a9c5b2a3c57e0a&gt;https://gist.github.com/AlexDBlack/7cc1ce87e2e9525f33a9c5b2a3c57e0a&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Issue 7: im2col_bp JVM crash
Confirmed fixed. Original: &lt;denchmark-link:https://gist.github.com/AlexDBlack/7b32de9247e191a4d772dfae12b3f4da&gt;https://gist.github.com/AlexDBlack/7b32de9247e191a4d772dfae12b3f4da&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Issue 8: change in assumptions/behaviour for reshape
&lt;denchmark-link:https://gist.github.com/AlexDBlack/4bf655ad01f97445458b43ec6c334b0f&gt;https://gist.github.com/AlexDBlack/4bf655ad01f97445458b43ec6c334b0f&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Issue 9: batched_gemm shape function (datatype) is wrong, doesn't validate output array types
If I pass Float result arrays with double inputs, I get a JVM crash - not an exception/error.
&lt;denchmark-link:https://gist.github.com/AlexDBlack/ceb8dec288e97780c98a8338133d048a&gt;https://gist.github.com/AlexDBlack/ceb8dec288e97780c98a8338133d048a&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;


&lt;denchmark-link:https://gist.github.com/AlexDBlack/d70fdcade139e878f43b589ef5b8f708&gt;https://gist.github.com/AlexDBlack/d70fdcade139e878f43b589ef5b8f708&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;


This also appears to be present on 1.0.0-beta3. The "non subset" elements (i.e., those outside of the subset/slice region for forward pass) should always be zeroed.
&lt;denchmark-link:https://gist.github.com/AlexDBlack/b1ad04da34befcfef28b2f552c73b0c2&gt;https://gist.github.com/AlexDBlack/b1ad04da34befcfef28b2f552c73b0c2&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;


Also present on 1.0.0-beta3.
Values that aren't set based on the labels/predictions array contents should be set to 0.
&lt;denchmark-link:https://gist.github.com/AlexDBlack/a9328587c3db2522c05d75a3cbb2a84f&gt;https://gist.github.com/AlexDBlack/a9328587c3db2522c05d75a3cbb2a84f&lt;/denchmark-link&gt;

Edit: sequence_mask op also doesn't zero other elements.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Issue 13: maximum_bp, minimum_bp not reimplemented
&lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/blob/af7155d61dc810d3e7139f15f98810e0255b2e17/libnd4j/include/ops/declarable/generic/broadcastable/maximum.cpp#L58-L137&gt;https://github.com/deeplearning4j/deeplearning4j/blob/af7155d61dc810d3e7139f15f98810e0255b2e17/libnd4j/include/ops/declarable/generic/broadcastable/maximum.cpp#L58-L137&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/blob/af7155d61dc810d3e7139f15f98810e0255b2e17/libnd4j/include/ops/declarable/generic/broadcastable/minimum.cpp#L57-L64&gt;https://github.com/deeplearning4j/deeplearning4j/blob/af7155d61dc810d3e7139f15f98810e0255b2e17/libnd4j/include/ops/declarable/generic/broadcastable/minimum.cpp#L57-L64&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Issue 14: OR/AND/XOR ops broken
&lt;denchmark-link:https://gist.github.com/AlexDBlack/da5ecdb06582e62cda58c33a55ce71a0&gt;https://gist.github.com/AlexDBlack/da5ecdb06582e62cda58c33a55ce71a0&lt;/denchmark-link&gt;

2019/01/07: Confirmed all 3 are still failing.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;


Output should be exclusive of limit. Currently it's returning a scalar for this case.
&lt;denchmark-link:https://gist.github.com/AlexDBlack/3bc0819095ec29756f3380c06e04aefe&gt;https://gist.github.com/AlexDBlack/3bc0819095ec29756f3380c06e04aefe&lt;/denchmark-link&gt;

2019/01/07: Confirmed still failing.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Issue 16: We need a pairwise pow op that supports broadcasting
Needed to import TF pow. The docs don't say it supports broadcasting, but according to my tests it does.
&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/math/pow&gt;https://www.tensorflow.org/api_docs/python/tf/math/pow&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Issue 17: depthwise_conv2d is broken
&lt;denchmark-link:https://gist.github.com/AlexDBlack/037449c2d94d0bcd3954823cd37781c2&gt;https://gist.github.com/AlexDBlack/037449c2d94d0bcd3954823cd37781c2&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Issue 18: listdiff op can (rarely) crash with some inputs
Behaviour here is a bit odd... sometimes it'll run for 10,000 iterations without issue.
Other times it'll crash after very few iterations (not sure exactly how many required).
No JVM crash log seems to be produced here.
&lt;denchmark-link:https://gist.github.com/AlexDBlack/6b27acf5dd1248eb5e17ff55a1cbe056&gt;https://gist.github.com/AlexDBlack/6b27acf5dd1248eb5e17ff55a1cbe056&lt;/denchmark-link&gt;

2019/01/07: Confirmed still failing.
	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2019-01-07T03:49:46Z'>
		I've edited/updated the above list today. A bunch of stuff has been fixed (thanks!) but there's still a few left:

14: or/and/xor
15: Range op should return empty
16: pairwise pow op (not sure if this has been implemented)
18: listdiff crash

		</comment>
		<comment id='2' author='AlexDBlack' date='2019-01-07T06:13:55Z'>
		or/and/xor pass in c++ tests, so it must be something at java side
		</comment>
		<comment id='3' author='AlexDBlack' date='2019-01-07T06:47:51Z'>
		Thanks - I'll close this, and follow up with or/and/xor shortly on java side.
		</comment>
		<comment id='4' author='AlexDBlack' date='2019-02-06T09:47:12Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>