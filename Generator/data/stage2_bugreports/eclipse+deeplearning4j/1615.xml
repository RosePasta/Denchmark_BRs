<bug id='1615' author='mstritt' open_date='2016-05-30T06:13:36Z' closed_time='2016-06-04T14:55:48Z'>
	<summary>JVM Crash while training</summary>
	<description>
not sure if related to &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/issues/1597&gt;#1597&lt;/denchmark-link&gt;
 , but I got several JVM crashes on rc3.9/win64 while training:
&lt;denchmark-code&gt;&gt; #
&gt; # A fatal error has been detected by the Java Runtime Environment:
&gt; #
&gt; #  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ffe45fe1b3a, pid=4100, tid=1028
&gt; #
&gt; # JRE version: Java(TM) SE Runtime Environment (7.0_40-b43) (build 1.7.0_40-b43)
&gt; # Java VM: Java HotSpot(TM) 64-Bit Server VM (24.0-b56 mixed mode windows-amd64 compressed oops)
&gt; # Problematic frame:
&gt; # C  [msvcrt.dll+0x1b3a]
&gt; #
&gt; # Failed to write core dump. Minidumps are not enabled by default on client versions of Windows
&gt; #
&gt; # If you would like to submit a bug report, please visit:
&gt; #   http://bugreport.sun.com/bugreport/crash.jsp
&gt; # The crash happened outside the Java Virtual Machine in native code.
&gt; # See problematic frame for where to report the bug.
&gt; #
&gt; 
&gt; ---------------  T H R E A D  ---------------
&gt; 
&gt; Current thread (0x00000000027ac000):  JavaThread "main" [_thread_in_native, id=1028, stack(0x00000000027b0000,0x00000000028b0000)]
&gt; 
&gt; siginfo: ExceptionCode=0xc0000005, writing address 0x0000000000000000
&gt; 
&gt; Registers:
&gt; RAX=0x0000000000000000, RBX=0x00000000028ae7b0, RCX=0x0000000000000000, RDX=0x0000000000000000
&gt; RSP=0x00000000028ae698, RBP=0x0000000000000000, RSI=0x00000000027ac1e8, RDI=0x0000000000000000
&gt; R8 =0x0000000000c93740, R9 =0x0000000000000000, R10=0x00000000000324dd, R11=0x000000007259ba20
&gt; R12=0x0000000000000000, R13=0x00000005fbda7d18, R14=0x00000000028ae7b0, R15=0x00000000027ac000
&gt; RIP=0x00007ffe45fe1b3a, EFLAGS=0x0000000000010246
&gt; 
&gt; Top of Stack: (sp=0x00000000028ae698)
&gt; 0x00000000028ae698:   00000000645024a9 000000076d8ecc78
&gt; 0x00000000028ae6a8:   000000076d8ecc48 000000076d8ecca8
&gt; 0x00000000028ae6b8:   000000076d8ecca8 00000000028ae6c0
&gt; 0x00000000028ae6c8:   00000005fbda7d18 00000000bf88bb1e
&gt; 0x00000000028ae6d8:   00000000029b60f8 00000000028ae778
&gt; 0x00000000028ae6e8:   00000000029c3090 0000000000000000
&gt; 0x00000000028ae6f8:   00000000028ae728 00000000028ae788
&gt; 0x00000000028ae708:   00000000029b62d3 0000000000c93740
&gt; 0x00000000028ae718:   0000000000000000 0000000000000000
&gt; 0x00000000028ae728:   0000000000000001 000000076d8ecc90
&gt; 0x00000000028ae738:   00000000028ae738 0000000000000000
&gt; 0x00000000028ae748:   00000000028ae7b0 00000005fbda9568
&gt; 0x00000000028ae758:   0000000000000000 00000005fbda7d18
&gt; 0x00000000028ae768:   0000000000000000 00000000028ae798
&gt; 0x00000000028ae778:   00000000028ae7f8 00000000029b62d3
&gt; 0x00000000028ae788:   0000000605fdc118 00000000029bf0db 
&gt; 
&gt; Instructions: (pc=0x00007ffe45fe1b3a)
&gt; 0x00007ffe45fe1b1a:   e1 07 74 1c 49 83 e9 08 4a 8d 0c c9 49 f7 d9 49
&gt; 0x00007ffe45fe1b2a:   ff c2 4c 8d 1d 06 00 00 00 4f 8d 1c 8b 41 ff e3
&gt; 0x00007ffe45fe1b3a:   48 89 11 48 89 51 08 48 89 51 10 48 89 51 18 48
&gt; 0x00007ffe45fe1b4a:   89 51 20 48 89 51 28 48 89 51 30 48 89 51 38 48 
&gt; 
&gt; 
&gt; Register to memory mapping:
&gt; 
&gt; RAX=0x0000000000000000 is an unknown value
&gt; RBX=0x00000000028ae7b0 is pointing into the stack for thread: 0x00000000027ac000
&gt; RCX=0x0000000000000000 is an unknown value
&gt; RDX=0x0000000000000000 is an unknown value
&gt; RSP=0x00000000028ae698 is pointing into the stack for thread: 0x00000000027ac000
&gt; RBP=0x0000000000000000 is an unknown value
&gt; RSI=0x00000000027ac1e8 is an unknown value
&gt; RDI=0x0000000000000000 is an unknown value
&gt; R8 =0x0000000000c93740 is an unknown value
&gt; R9 =0x0000000000000000 is an unknown value
&gt; R10=0x00000000000324dd is an unknown value
&gt; R11=0x000000007259ba20 is an unknown value
&gt; R12=0x0000000000000000 is an unknown value
&gt; R13=0x00000005fbda7d18 is an oop
&gt; {method} 
&gt;  - klass: {other class}
&gt; R14=0x00000000028ae7b0 is pointing into the stack for thread: 0x00000000027ac000
&gt; R15=0x00000000027ac000 is a thread
&gt; 
&gt; 
&gt; Stack: [0x00000000027b0000,0x00000000028b0000],  sp=0x00000000028ae698,  free space=1017k
&gt; Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
&gt; C  [msvcrt.dll+0x1b3a]
&gt; 
&gt; [error occurred during error reporting (printing native stack), id 0xc0000005]
&gt; 
&gt; Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
&gt; j  org.bytedeco.javacpp.Pointer.memset(Lorg/bytedeco/javacpp/Pointer;IJ)Lorg/bytedeco/javacpp/Pointer;+0
&gt; j  org.nd4j.linalg.api.buffer.BaseDataBuffer.fillPointerWithZero()V+15
&gt; j  org.nd4j.linalg.api.buffer.BaseDataBuffer.&lt;init&gt;(J)V+260
&gt; j  org.nd4j.linalg.api.buffer.FloatBuffer.&lt;init&gt;(J)V+2
&gt; j  org.nd4j.linalg.api.buffer.factory.DefaultDataBufferFactory.createFloat(J)Lorg/nd4j/linalg/api/buffer/DataBuffer;+5
&gt; j  org.nd4j.linalg.factory.Nd4j.createBuffer(J)Lorg/nd4j/linalg/api/buffer/DataBuffer;+13
&gt; j  org.nd4j.linalg.api.ndarray.BaseNDArray.&lt;init&gt;([I[IIC)V+5
&gt; j  org.nd4j.linalg.cpu.nativecpu.NDArray.&lt;init&gt;([I[IIC)V+6
&gt; j  org.nd4j.linalg.cpu.nativecpu.CpuNDArrayFactory.create([IC)Lorg/nd4j/linalg/api/ndarray/INDArray;+12
&gt; j  org.nd4j.linalg.factory.Nd4j.create([IC)Lorg/nd4j/linalg/api/ndarray/INDArray;+52
&gt; j  org.deeplearning4j.nn.layers.convolution.subsampling.SubsamplingLayer.backpropGradient(Lorg/nd4j/linalg/api/ndarray/INDArray;)Lorg/deeplearning4j/berkeley/Pair;+297
&gt; j  org.deeplearning4j.nn.multilayer.MultiLayerNetwork.calcBackpropGradients(Lorg/nd4j/linalg/api/ndarray/INDArray;Z)Lorg/deeplearning4j/berkeley/Pair;+330
&gt; j  org.deeplearning4j.nn.multilayer.MultiLayerNetwork.backprop()V+3
&gt; j  org.deeplearning4j.nn.multilayer.MultiLayerNetwork.computeGradientAndScore()V+38
&gt; j  org.deeplearning4j.optimize.solvers.BaseOptimizer.gradientAndScore()Lorg/deeplearning4j/berkeley/Pair;+12
&gt; j  org.deeplearning4j.optimize.solvers.StochasticGradientDescent.optimize()Z+14
&gt; j  org.deeplearning4j.optimize.Solver.optimize()V+19
&gt; j  org.deeplearning4j.nn.multilayer.MultiLayerNetwork.fit(Lorg/nd4j/linalg/api/ndarray/INDArray;Lorg/nd4j/linalg/api/ndarray/INDArray;)V+115
&gt; j  org.deeplearning4j.nn.multilayer.MultiLayerNetwork.fit(Lorg/nd4j/linalg/api/ndarray/INDArray;[I)V+26
...
&gt; v  ~StubRoutines::call_stub
&gt; j  sun.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+0
&gt; j  sun.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+87
&gt; j  sun.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+6
&gt; j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+57
&gt; j  com.intellij.rt.execution.application.AppMain.main([Ljava/lang/String;)V+180
&gt; v  ~StubRoutines::call_stub
&gt; 
&gt; ---------------  P R O C E S S  ---------------
&gt; 
&gt; Java Threads: ( =&gt; current thread )
&gt;   0x000000001cab1800 JavaThread "Java2D Disposer" daemon [_thread_blocked, id=1124, stack(0x000000002ebd0000,0x000000002ecd0000)]
&gt;   0x000000001bfed000 JavaThread "Monitor Ctrl-Break" daemon [_thread_in_native, id=464, stack(0x000000001c4b0000,0x000000001c5b0000)]
&gt;   0x000000001b286000 JavaThread "Service Thread" daemon [_thread_blocked, id=1260, stack(0x000000001ba60000,0x000000001bb60000)]
&gt;   0x000000001927a800 JavaThread "C2 CompilerThread1" daemon [_thread_blocked, id=7088, stack(0x000000001b960000,0x000000001ba60000)]
&gt;   0x0000000019279000 JavaThread "C2 CompilerThread0" daemon [_thread_blocked, id=6940, stack(0x000000001b860000,0x000000001b960000)]
&gt;   0x0000000019278000 JavaThread "Attach Listener" daemon [_thread_blocked, id=6708, stack(0x000000001b760000,0x000000001b860000)]
&gt;   0x000000001b281800 JavaThread "Signal Dispatcher" daemon [_thread_blocked, id=3408, stack(0x000000001b660000,0x000000001b760000)]
&gt;   0x0000000019267800 JavaThread "Finalizer" daemon [_thread_blocked, id=6524, stack(0x000000001b160000,0x000000001b260000)]
&gt;   0x0000000019266800 JavaThread "Reference Handler" daemon [_thread_blocked, id=2204, stack(0x000000001b060000,0x000000001b160000)]
&gt; =&gt;0x00000000027ac000 JavaThread "main" [_thread_in_native, id=1028, stack(0x00000000027b0000,0x00000000028b0000)]
&gt; 
&gt; Other Threads:
&gt;   0x0000000019265000 VMThread [stack: 0x000000001af60000,0x000000001b060000] [id=4748]
&gt;   0x000000001b2ce800 WatcherThread [stack: 0x000000001bb60000,0x000000001bc60000] [id=6952]
&gt; 
&gt; VM state:not at safepoint (normal execution)
&gt; 
&gt; VM Mutex/Monitor currently owned by a thread: None
&gt; 
&gt; Heap
&gt;  PSYoungGen      total 514560K, used 398177K [0x0000000755800000, 0x0000000788400000, 0x0000000800000000)
&gt;   eden space 492544K, 80% used [0x0000000755800000,0x000000076dca0580,0x0000000773900000)
&gt;   from space 22016K, 1% used [0x0000000773900000,0x0000000773938000,0x0000000774e80000)
&gt;   to   space 21504K, 0% used [0x0000000786f00000,0x0000000786f00000,0x0000000788400000)
&gt;  ParOldGen       total 349184K, used 179543K [0x0000000600800000, 0x0000000615d00000, 0x0000000755800000)
&gt;   object space 349184K, 51% used [0x0000000600800000,0x000000060b755ca0,0x0000000615d00000)
&gt;  PSPermGen       total 21504K, used 18474K [0x00000005fb600000, 0x00000005fcb00000, 0x0000000600800000)
&gt;   object space 21504K, 85% used [0x00000005fb600000,0x00000005fc80a930,0x00000005fcb00000)
&gt; 
&gt; Card table byte_map: [0x0000000005a70000,0x0000000006aa0000] byte_map_base: 0x0000000002a95000
&gt; 
&gt; Polling page: 0x0000000000ec0000
&gt; 
&gt; Code Cache  [0x00000000029b0000, 0x0000000002c20000, 0x00000000059b0000)
&gt;  total_blobs=871 nmethods=327 adapters=495 free_code_cache=47839Kb largest_free_block=48950080
&gt; 
&gt; Compilation events (10 events):
&gt; Event: 36.328 Thread 0x0000000019279000  334             java.util.Hashtable::hash (10 bytes)
&gt; Event: 36.329 Thread 0x0000000019279000 nmethod 334 0x0000000002afc550 code [0x0000000002afc6a0, 0x0000000002afc778]
&gt; Event: 37.803 Thread 0x000000001927a800  335  s          java.util.Hashtable::get (70 bytes)
&gt; Event: 37.808 Thread 0x000000001927a800 nmethod 335 0x0000000002af3010 code [0x0000000002af3160, 0x0000000002af36f8]
&gt; Event: 37.838 Thread 0x0000000019279000  336             org.nd4j.linalg.api.ndarray.BaseNDArray::ordering (8 bytes)
&gt; Event: 37.838 Thread 0x000000001927a800  337             org.nd4j.linalg.api.shape.Shape::order (20 bytes)
&gt; Event: 37.839 Thread 0x000000001927a800 nmethod 337 0x0000000002af2c50 code [0x0000000002af2da0, 0x0000000002af2e98]
&gt; Event: 37.839 Thread 0x0000000019279000 nmethod 336 0x0000000002ae3d10 code [0x0000000002ae3e60, 0x0000000002ae3f78]
&gt; Event: 38.948 Thread 0x000000001927a800  338             java.util.Properties::getProperty (46 bytes)
&gt; Event: 38.949 Thread 0x000000001927a800 nmethod 338 0x0000000002afc1d0 code [0x0000000002afc320, 0x0000000002afc3c8]

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='mstritt' date='2016-05-31T00:29:26Z'>
		Actually, you seem to be running out of memory. With JavaCPP 1.2.1, it should throw a proper exception there: &lt;denchmark-link:https://github.com/deeplearning4j/nd4j/issues/960&gt;deeplearning4j/nd4j#960&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='mstritt' date='2016-06-03T19:47:01Z'>
		@mrroots Were you able to resolve this issue and &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/issues/1597&gt;#1597&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='3' author='mstritt' date='2016-06-04T14:55:48Z'>
		Assuming this will be fixed with upcoming release. Re open if necessary.
		</comment>
		<comment id='4' author='mstritt' date='2019-01-21T01:52:44Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>