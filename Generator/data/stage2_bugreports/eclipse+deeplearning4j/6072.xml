<bug id='6072' author='AlexDBlack' open_date='2018-08-03T12:31:02Z' closed_time='2018-08-21T09:40:51Z'>
	<summary>Libnd4j: matrix determinant incorrect for 3x3, 4x4 cases</summary>
	<description>
Seems OK for the 2x2 case. Off by a multiple of -1 for the 3x3 and 4x4 cases
3x3: Expected: 0.0359 Actual: -0.0359&gt;
4x4: Expected: -0.0671 Actual: 0.0671
&lt;denchmark-code&gt;    public void testMatrixDeterminant3(){
        Nd4j.getRandom().setSeed(12345);
        INDArray in = Nd4j.rand(3,3);
        //System.out.println(in.shapeInfoToString());   //Rank: 2,Offset: 0 Order: c Shape: [3,3],  stride: [3,1]
        //System.out.println(Arrays.toString(in.data().asFloat())); //[0.27620894, 0.21801452, 0.062078513, 7.348895E-4, 0.24149609, 0.4948205, 0.93483436, 0.52035654, 0.30292067]

        SameDiff sd = SameDiff.create();
        SDVariable var = sd.var("in", in);
        SDVariable md = sd.f().matrixDeterminant(var);

        double d = new LUDecomposition(CheckUtil.convertToApacheMatrix(in)).getDeterminant();

        //https://en.wikipedia.org/wiki/Determinant
        double[][] a = in.toDoubleMatrix();
        double d2 = a[0][0] * a[1][1] * a[2][2]
                + a[0][1] * a[1][2] * a[2][0]
                + a[0][2] * a[1][0] * a[2][1]
                - a[0][2] * a[1][1] * a[2][0]
                - a[0][1] * a[1][0] * a[2][2]
                - a[0][0] * a[1][2] * a[2][1];
        assertEquals(d, d2, 1e-6);          //Manual calc and Apache commons both match:    0.03589524995561552

        INDArray outExp = Nd4j.trueScalar(d);

        String err = OpValidation.validate(new TestCase(sd)
                .expected(md.getVarName(), outExp));
        assertNull(err);
    }

    @Test
    public void testMatrixDeterminant4(){
        Nd4j.getRandom().setSeed(12345);
        INDArray in = Nd4j.rand(4,4);
        //System.out.println(in.shapeInfoToString());   //Rank: 2,Offset: 0 Order: c Shape: [4,4],  stride: [4,1]
        System.out.println(Arrays.toString(in.data().asFloat())); //[0.27620894, 0.21801452, 0.062078513, 7.348895E-4, 0.24149609, 0.4948205, 0.93483436, 0.52035654, 0.30292067, 0.3289706, 0.7977864, 0.03180518, 0.1455722, 0.90352905, 0.9405744, 0.0048329555]

        SameDiff sd = SameDiff.create();
        SDVariable var = sd.var("in", in);
        SDVariable md = sd.f().matrixDeterminant(var);

        double d = new LUDecomposition(CheckUtil.convertToApacheMatrix(in)).getDeterminant();   //-0.06713878100086641
        //System.out.println(d);

        String err = OpValidation.validate(new TestCase(sd)
                .expected(md.getVarName(), Nd4j.trueScalar(d)));
        assertNull(err);
    }
&lt;/denchmark-code&gt;

edit: the f().matrixDeterminant is new on my branch. It's this op:
&lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/blob/451dd76b50355358dc176f2b704e98c43423c5b8/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/api/ops/impl/transforms/MatrixDeterminant.java&gt;https://github.com/deeplearning4j/deeplearning4j/blob/451dd76b50355358dc176f2b704e98c43423c5b8/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/api/ops/impl/transforms/MatrixDeterminant.java&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2018-08-08T12:19:15Z'>
		there is a matrix for reproduce the case : 3x3 (12.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 13.0)
expected 189, actual -189
		</comment>
		<comment id='2' author='AlexDBlack' date='2018-09-21T09:21:07Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>