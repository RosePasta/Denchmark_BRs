<bug id='5418' author='ilyaivensky' open_date='2018-06-01T03:54:27Z' closed_time='2018-06-06T15:09:59Z'>
	<summary>DL4J - Keras import: unreasonable assumptions about layer names in Keras model</summary>
	<description>
Version: org.deeplearning4j:deeplearning4j-modelimport:jar:1.0.0-beta
KerasModelUtils.importWeights() checks layerName to decide whether to look in Hdf5Archive for layer weights. This imposes unreasonable restrictions on layer names in Keras models.
Suppose that ActivationLayer (let's say Keras LeakyReLU) is named "conv5_activation". The fact that the name contains "conv" causes KerasModelUtils to treat that layer as a convolutional layer and issue a warning when layer's weights are not found.
The opposite situation - when the name of the layer does not reference layer type - is very unlikely but still possible and dangerous because KerasModelUtils will silently skip its weights.
I think that ideally the decision to look for weights has to be based solely on the type of the layer, and then weights should be searched by the actual name of the layer assuming only that name has to be unique and cannot be empty.
	</description>
	<comments>
		<comment id='1' author='ilyaivensky' date='2018-06-06T13:58:17Z'>
		&lt;denchmark-link:https://github.com/ilyaivensky&gt;@ilyaivensky&lt;/denchmark-link&gt;
 you're absolutely right -- and as you've probably seen in the source code as well, this is a long standing todo. I fixed this in &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/pull/5491&gt;#5491&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='ilyaivensky' date='2018-09-21T21:00:00Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>