<bug id='4839' author='reckart' open_date='2018-03-25T21:40:42Z' closed_time='2018-03-27T07:04:13Z'>
	<summary>Lombok dependency should not be transitive</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue Description&lt;/denchmark-h&gt;

According to &lt;denchmark-link:https://github.com/rzwitserloot/lombok/issues/1629#issuecomment-376005025&gt;rzwitserloot/lombok#1629 (comment)&lt;/denchmark-link&gt;
 the lombok dependency should not be leaked out as a transitive dependency to code which makes use of DL4J.
The presence of lombok as a regular dependency exposes the lombok annotation processor to downstream builds which currently causes problems with Java 10. However, as stated in the comment linked above, the problem is more likely a misconfigured lombok dependency in DL4J than an true Java 10 problem.
&lt;denchmark-h:h4&gt;Version Information&lt;/denchmark-h&gt;

Please indicate relevant versions, including, if relevant:

Deeplearning4j version: 0.9.1

	</description>
	<comments>
		<comment id='1' author='reckart' date='2018-03-25T22:20:22Z'>
		We can fix this with the release this week. &lt;denchmark-link:https://github.com/saudet&gt;@saudet&lt;/denchmark-link&gt;
 thoughts here?
		</comment>
		<comment id='2' author='reckart' date='2018-03-25T22:23:12Z'>
		Yeah, that seems reasonable to me. There's an apparent fix at the link &lt;denchmark-link:https://github.com/reckart&gt;@reckart&lt;/denchmark-link&gt;
 provided, so hopefully this should be pretty quick to implement.
		</comment>
		<comment id='3' author='reckart' date='2018-03-26T02:58:48Z'>
		&lt;denchmark-link:https://github.com/reckart&gt;@reckart&lt;/denchmark-link&gt;
 We just need to specify  on the dependency, right? If that's the only thing, that sounds good to me.
		</comment>
		<comment id='4' author='reckart' date='2018-03-26T11:31:47Z'>
		&lt;denchmark-link:https://github.com/saudet&gt;@saudet&lt;/denchmark-link&gt;
 according to &lt;denchmark-link:https://github.com/victorwss&gt;@victorwss&lt;/denchmark-link&gt;
 yes
I guess it should do the trick, although &lt;denchmark-link:https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html&gt;https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html&lt;/denchmark-link&gt;
 says that optional is not the best solution. The "provided" scope could be an alternative.
My understanding is that the lombok JAR provides some annotations that you need during the build process but not afterwards. It also includes the annotation processor. This annotation processor is causing problems for downstream code which inherits it as a transitive dependency via DL4J.
I assume the annotations probably are not retained at runtime? And the annotation processor should also not be needed at runtime, So if this is the case, then the dependency should not be transitive. "optional" and "provided" should both be means of achieving this.
		</comment>
		<comment id='5' author='reckart' date='2018-03-26T18:02:32Z'>
		&lt;denchmark-link:https://github.com/reckart&gt;@reckart&lt;/denchmark-link&gt;
 Lombok removes its annotations at the compile time. The produced JAR/WAR/EAR/whatever should not leave any trace that it used lombok as part of its compilation. Lombok's idea is to just generate boilerplate code that is too boring and error-prone to be manually written down by the user. So, lombok should not pollute the runtime classpath with any unwanted dependency, including itself. The resulting JAR/WAR/EAR/whatever should be the same as if you wrote down all the boilerplate code manually yourself.
About provided vs optional, I'm not a maven specialist. So, it is possible that provided works better.
Note that I'm not a lombok developer. I'm just a lombok user that happened to be lurking into the issues' list.
		</comment>
		<comment id='6' author='reckart' date='2018-03-27T02:41:18Z'>
		Looks like the authors are recommending to use "provided" so I've changed it that way:
&lt;denchmark-link:https://projectlombok.org/mavenrepo/index.html&gt;https://projectlombok.org/mavenrepo/index.html&lt;/denchmark-link&gt;

Thanks for the tip guys! Hopefully, we'll be able to support Java 10 :)
		</comment>
		<comment id='7' author='reckart' date='2018-03-27T02:47:44Z'>
		You're welcome! Thanks for the fix!
		</comment>
		<comment id='8' author='reckart' date='2018-09-23T01:28:10Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>