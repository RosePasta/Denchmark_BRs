<bug id='1829' author='rasoolims' open_date='2016-07-14T23:37:25Z' closed_time='2016-11-30T09:43:14Z'>
	<summary>MultiDataSetIterator Caused by: java.io.FileNotFoundException: .... (Too many open files)</summary>
	<description>
I use MultiDataSetIterator with a complicated structure;
    private static MultiDataSetIterator readMultiDataSetIterator(String[] path, int batchSize, int possibleOutputs)
            throws IOException, InterruptedException {
        int numLinesToSkip = 0;
        String fileDelimiter = ",";
        RecordReader[] featuresReader = new RecordReader[path.length - 1];
        for (int i = 0; i &lt; featuresReader.length; i++) {
            featuresReader[i] = new CSVRecordReader(numLinesToSkip, fileDelimiter);
            featuresReader[i].initialize(new FileSplit(new File(path[i])));
        }

        RecordReader labelsReader = new CSVRecordReader(numLinesToSkip, fileDelimiter);
        String labelsCsvPath = path[path.length - 1];
        labelsReader.initialize(new FileSplit(new File(labelsCsvPath)));

        int ind = 0;
        MultiDataSetIterator iterator = new RecordReaderMultiDataSetIterator.Builder(batchSize)
                .addReader("s0w", featuresReader[ind++])
                .addReader("s1w", featuresReader[ind++])
                .addReader("s2w", featuresReader[ind++])
                .addReader("s3w", featuresReader[ind++])
                .addReader("b0w", featuresReader[ind++])
                .addReader("b1w", featuresReader[ind++])
                .addReader("b2w", featuresReader[ind++])
                .addReader("b3w", featuresReader[ind++])
                .addReader("b0l1w", featuresReader[ind++])
                .addReader("b0l2w", featuresReader[ind++])
                .addReader("s0l1w", featuresReader[ind++])
                .addReader("s0l2w", featuresReader[ind++])
                .addReader("sr1w", featuresReader[ind++])
                .addReader("s0r2w", featuresReader[ind++])
                .addReader("sh0w", featuresReader[ind++])
                .addReader("sh1w", featuresReader[ind++])
                .addReader("b0llw", featuresReader[ind++])
                .addReader("s0llw", featuresReader[ind++])
                .addReader("s0rrw", featuresReader[ind++])

                .addReader("s0p", featuresReader[ind++])
                .addReader("s1p", featuresReader[ind++])
                .addReader("s2p", featuresReader[ind++])
                .addReader("s3p", featuresReader[ind++])
                .addReader("b0p", featuresReader[ind++])
                .addReader("b1p", featuresReader[ind++])
                .addReader("b2p", featuresReader[ind++])
                .addReader("b3p", featuresReader[ind++])
                .addReader("b0l1p", featuresReader[ind++])
                .addReader("b0l2p", featuresReader[ind++])
                .addReader("s0l1p", featuresReader[ind++])
                .addReader("s0l2p", featuresReader[ind++])
                .addReader("sr1p", featuresReader[ind++])
                .addReader("s0r2p", featuresReader[ind++])
                .addReader("sh0p", featuresReader[ind++])
                .addReader("sh1p", featuresReader[ind++])
                .addReader("b0llp", featuresReader[ind++])
                .addReader("s0llp", featuresReader[ind++])
                .addReader("s0rrp", featuresReader[ind++])

                .addReader("s0l", featuresReader[ind++])
                .addReader("sh0l", featuresReader[ind++])
                .addReader("s0l1l", featuresReader[ind++])
                .addReader("sr1l", featuresReader[ind++])
                .addReader("s0l2l", featuresReader[ind++])
                .addReader("s0r2l", featuresReader[ind++])
                .addReader("b0l1l", featuresReader[ind++])
                .addReader("b0l2l", featuresReader[ind++])
                .addReader("b0lll", featuresReader[ind++])
                .addReader("s0lll", featuresReader[ind++])
                .addReader("s0rrl", featuresReader[ind++])
                .addReader("csvLabels", labelsReader)
                .addInput("s0w")
                .addInput("s1w")
                .addInput("s2w")
                .addInput("s3w")
                .addInput("b0w")
                .addInput("b1w")
                .addInput("b2w")
                .addInput("b3w")
                .addInput("b0l1w")
                .addInput("b0l2w")
                .addInput("s0l1w")
                .addInput("s0l2w")
                .addInput("sr1w")
                .addInput("s0r2w")
                .addInput("sh0w")
                .addInput("sh1w")
                .addInput("b0llw")
                .addInput("s0llw")
                .addInput("s0rrw")

                .addInput("s0p")
                .addInput("s1p")
                .addInput("s2p")
                .addInput("s3p")
                .addInput("b0p")
                .addInput("b1p")
                .addInput("b2p")
                .addInput("b3p")
                .addInput("b0l1p")
                .addInput("b0l2p")
                .addInput("s0l1p")
                .addInput("s0l2p")
                .addInput("sr1p")
                .addInput("s0r2p")
                .addInput("sh0p")
                .addInput("sh1p")
                .addInput("b0llp")
                .addInput("s0llp")
                .addInput("s0rrp")

                .addInput("s0l")
                .addInput("sh0l")
                .addInput("s0l1l")
                .addInput("sr1l")
                .addInput("s0l2l")
                .addInput("s0r2l")
                .addInput("b0l1l")
                .addInput("b0l2l")
                .addInput("b0lll")
                .addInput("s0lll")
                .addInput("s0rrl")
                .addOutputOneHot("csvLabels", 0, possibleOutputs)
                .build();
        return iterator;
    }

Then
Collections.shuffle(trainDataSet);
String[] trainFiles = trainer.createStaticTrainingDataForNeuralNet(trainDataSet, options.inputFile + ".csv", -1);
MultiDataSetIterator trainIter = readMultiDataSetIterator(trainFiles, batchSize, possibleOutputs);
After every round, I reshuffle the original data and call the method again.
for (int iter = 0; iter &lt; options.trainingIter; iter++) {
            trainIter.reset();
            while (trainIter.hasNext()) {
                 net.fit(trainIter.next());
            }


   System.out.println("Reshuffling the data!");
   Collections.shuffle(trainDataSet);
  trainFiles = trainer.createStaticTrainingDataForNeuralNet(trainDataSet, options.inputFile + ".csv", 0.1);

    trainIter = readMultiDataSetIterator(trainFiles, batchSize, possibleOutputs);
}
After it runs for many iterations; i faced the following exception:
Exception in thread "main" java.lang.RuntimeException: Error during LineRecordReader reset
    at org.canova.api.records.reader.impl.LineRecordReader.reset(LineRecordReader.java:158)
    at org.canova.api.records.reader.impl.CSVRecordReader.reset(CSVRecordReader.java:107)
    at org.deeplearning4j.datasets.canova.RecordReaderMultiDataSetIterator.reset(RecordReaderMultiDataSetIterator.java:379)
    at YaraParser.TransitionBasedSystem.Trainer.StaticNeuralTrainer.trainStaticNeural(StaticNeuralTrainer.java:113)
    at YaraParser.Parser.YaraParser.createTrainData(YaraParser.java:216)
    at YaraParser.Parser.YaraParser.main(YaraParser.java:51)
Caused by: java.io.FileNotFoundException: /tmp/wsj-stanford-3.3/train.small.conll.csv.feat35 (Too many open files)
    at java.io.FileInputStream.open(Native Method)
    at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:146)
    at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:101)
    at sun.net.www.protocol.file.FileURLConnection.connect(FileURLConnection.java:90)
    at sun.net.www.protocol.file.FileURLConnection.getInputStream(FileURLConnection.java:188)
    at java.net.URL.openStream(URL.java:1048)
    at org.canova.api.records.reader.impl.LineRecordReader.initialize(LineRecordReader.java:65)
    at org.canova.api.records.reader.impl.LineRecordReader.reset(LineRecordReader.java:156)
	</description>
	<comments>
		<comment id='1' author='rasoolims' date='2016-07-15T01:37:32Z'>
		The InputStream created in LineRecordReader.java are not being closed... We'll need to do something about that.
		</comment>
		<comment id='2' author='rasoolims' date='2016-07-16T00:52:32Z'>
		Try to call System.gc() after each of your options.trainingIter, that should help.
		</comment>
		<comment id='3' author='rasoolims' date='2016-07-21T10:00:19Z'>
		We aren't calling recordreader.close() is likely the issue. The internal iterator wraps the input stream and close is called there.
		</comment>
		<comment id='4' author='rasoolims' date='2016-11-30T09:43:14Z'>
		We fixed this.
		</comment>
		<comment id='5' author='rasoolims' date='2019-01-20T07:57:35Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>