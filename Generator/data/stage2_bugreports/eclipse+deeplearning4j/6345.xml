<bug id='6345' author='AlexDBlack' open_date='2018-09-03T03:26:58Z' closed_time='2018-09-05T15:53:02Z'>
	<summary>Libnd4j: "Where" op not setting output array values</summary>
	<description>
Looks like it's simply not writing to the output array - i.e., original values for array "out" are simply not set after execution.
This failure mode is something I've seen multiple times before - for example &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/issues/6182&gt;https://github.com/deeplearning4j/deeplearning4j/issues/6182&lt;/denchmark-link&gt;
 where the tests pass on the libnd4j side - but I don't know what the cause or fix is.
&lt;denchmark-code&gt;    @Test
    public void testWhere_Rank1(){

        INDArray arr = Nd4j.trueVector(new double[]{1,0,2,3,4});
        DynamicCustomOp op = DynamicCustomOp.builder("Where")
                .addInputs(arr)
                .build();

        List&lt;long[]&gt; shapes = Nd4j.getExecutioner().calculateOutputShape(op);
        assertEquals(1, shapes.size());
        long[] actual = shapes.get(0);
        assertArrayEquals(Arrays.toString(actual), new long[]{4,1}, actual);

        INDArray out = Nd4j.createUninitialized(actual);
        op.addOutputArgument(out);

        Nd4j.getExecutioner().exec(op);
        INDArray exp = Nd4j.create(new double[][]{{0},{2},{3},{4}});

        assertEquals(exp, out);
    }

    @Test
    public void testWhere_Rank2(){

        INDArray arr = Nd4j.create(new double[]{1,0,2,3,4}, new int[]{5,1});
        DynamicCustomOp op = DynamicCustomOp.builder("Where")
                .addInputs(arr)
                .build();

        List&lt;long[]&gt; shapes = Nd4j.getExecutioner().calculateOutputShape(op);
        assertEquals(1, shapes.size());
        long[] actual = shapes.get(0);
        assertArrayEquals(Arrays.toString(actual), new long[]{4,2}, actual);

        INDArray out = Nd4j.createUninitialized(actual);
        op.addOutputArgument(out);

        Nd4j.getExecutioner().exec(op);
        INDArray exp = Nd4j.create(new double[][]{{0,0},{0,2},{0,3},{0,4}});

        assertEquals("", exp, out);
    }
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2018-09-03T08:56:16Z'>
		the first test is passes. The second returns the same as
INDArray exp = Nd4j.create(new double[][]{{0,0},{2,0},{3,0},{4, 0}});
Tensorflow output the follows:



import tensorflow as tf
x = tf.constant((1, 0, 2, 3, 4), shape=(5, 1))
z = tf.where(x)
with tf.Session() as sess:
...     print z.eval()
...
2018-09-03 11:58:06.481050: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
[[0 0]
[2 0]
[3 0]
[4 0]]



		</comment>
		<comment id='2' author='AlexDBlack' date='2018-09-03T10:09:28Z'>
		Ah, I've transposed the columns. The expected result you quote is correct.
Now, when you say it passes - do you mean at the java level or the libnd4j (c++) level?
Because we've seen a number of times where ops will pass libnd4j tests but return 0s (i.e., not use the output array) when called from Java.
		</comment>
		<comment id='3' author='AlexDBlack' date='2018-09-03T12:32:43Z'>
		Also a bug with empty output will be fixed.
		</comment>
		<comment id='4' author='AlexDBlack' date='2018-10-05T16:07:24Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>