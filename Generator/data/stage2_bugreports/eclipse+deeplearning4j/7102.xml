<bug id='7102' author='AlexDBlack' open_date='2019-02-01T01:16:03Z' closed_time='2019-04-18T18:22:28Z'>
	<summary>ND4J: Nd4j.pullRows issue with views</summary>
	<description>
New issue since recent PR/fix was merged.
&lt;denchmark-code&gt;    @Test
    public void testRowsEdgeCaseView(){

        INDArray arr = Nd4j.linspace(0, 9, 10, DataType.DOUBLE).reshape('f', 5, 2).dup('c');    //0,1,2... along columns
        INDArray view = arr.getColumn(0);
        assertEquals(Nd4j.createFromArray(0.0, 1.0, 2.0, 3.0, 4.0).reshape(5,1), view);
        int[] idxs = new int[]{0,2,3,4};

        INDArray out = Nd4j.pullRows(view, 1, idxs);
        INDArray exp = Nd4j.createFromArray(new double[]{0,2,3,4}).reshape(4,1);

        assertEquals(exp, out);   //Failing here
    }
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/2360237/52096472-061c4800-261b-11e9-9a3a-04950d1d19fc.png&gt;&lt;/denchmark-link&gt;

Aha! Link: &lt;denchmark-link:https://skymindai.aha.io/features/ND4J-129&gt;https://skymindai.aha.io/features/ND4J-129&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2019-04-11T14:42:59Z'>
		hi, Alex
corresponding c++ test is ok:
&lt;denchmark-code&gt;TEST_F(DeclarableOpsTests12, pullRows_1) {
    
    NDArray x('c', {5, 1}, {0,1,2,3,4});
    NDArray z('c', {4, 1}, nd4j::DataType::DOUBLE);
    NDArray exp('c', {4, 1}, {0,2,3,4});

    Nd4jLong indexes[] = {0,2,3,4};

    std::vector&lt;int&gt; dims = {1};

    auto xTadPack = nd4j::ConstantTadHelper::getInstance()-&gt;tadForDimensions(x.getShapeInfo(), dims);
    auto zTadPack = nd4j::ConstantTadHelper::getInstance()-&gt;tadForDimensions(z.getShapeInfo(), dims);
 
    NativeOps op;
    op.pullRows(nullptr, x.buffer(), x.getShapeInfo(), nullptr, nullptr,
                         z.buffer(), z.getShapeInfo(), nullptr, nullptr,
                         4, indexes,
                         xTadPack.primaryShapeInfo(), xTadPack.primaryOffsets(),
                         zTadPack.primaryShapeInfo(), zTadPack.primaryOffsets());
 
    ASSERT_TRUE(z.equalsTo(exp));    
}
&lt;/denchmark-code&gt;

so looks like problem is on java side
		</comment>
		<comment id='2' author='AlexDBlack' date='2019-04-12T01:50:06Z'>
		&lt;denchmark-link:https://github.com/shyrma&gt;@shyrma&lt;/denchmark-link&gt;
 Thanks for looking at this. But your test does not appear to be equivalent to mine.
In my test,  (equivalent to your ) is a view of a larger array; in your test, it is not.
If I modify my test so that it is equivalent to yours (no view) it passes in Java.
'arr' shape info: Rank: 2, DataType: DOUBLE, Offset: 0, Order: c, Shape: [5,2],  Stride: [2,1]
'view' shape info: Rank: 2, DataType: DOUBLE, Offset: 0, Order: c, Shape: [5,1],  Stride: [2,1]
		</comment>
		<comment id='3' author='AlexDBlack' date='2019-04-16T18:29:06Z'>
		my fault, sorry
Indeed array-view caused fail.
And a reason of fail was in old TAD stuff which is buggy for certain cases.
So we decided do not use old stuff any more and migrate to new (already available) sub-array stuff.
It took us some time to complete migration and to repair a bit of tests (hence the notable delay).
Corresponding pr is merged.
		</comment>
		<comment id='4' author='AlexDBlack' date='2019-04-17T02:34:24Z'>
		Thanks &lt;denchmark-link:https://github.com/shyrma&gt;@shyrma&lt;/denchmark-link&gt;

Looks like this is still producing wrong result (same as before) on master when run from Java on CUDA backend. It may be a Java issue at this point, not sure.
		</comment>
		<comment id='5' author='AlexDBlack' date='2019-04-17T09:40:22Z'>
		Hi, Alex
Below is corresponding c++ test (this time I hope it is the same as in java :-) ) and there is no fail there.
&lt;denchmark-code&gt;TEST_F(DeclarableOpsTests12, pullRows_2) {

    NDArray* arr = NDArray('f', {5, 2}, {0,1,2,3,4,5,6,7,8,9}).dup('c');
    NDArray view = (*arr)({0,0, 0,1}, true);     // view, points on first column of arr, shape is {5,1}, true means leave unities in shape
    NDArray out('c', {4, 1}, nd4j::DataType::DOUBLE);
    NDArray exp('c', {4, 1}, {0,2,3,4});

    Nd4jLong indexes[] = {0,2,3,4};
    std::vector&lt;int&gt; dims = {1};

    auto viewTadPack = nd4j::ConstantTadHelper::getInstance()-&gt;tadForDimensions(view.getShapeInfo(), dims);
    auto outTadPack  = nd4j::ConstantTadHelper::getInstance()-&gt;tadForDimensions(out.getShapeInfo(), dims);
 
    NativeOps op;
    op.pullRows(nullptr, view.buffer(), view.getShapeInfo(), nullptr, nullptr,
                         out.buffer(), out.getShapeInfo(), nullptr, nullptr,
                         4, indexes,
                         viewTadPack.primaryShapeInfo(), viewTadPack.primaryOffsets(),
                         outTadPack.primaryShapeInfo(),  outTadPack.primaryOffsets());

    ASSERT_TRUE(out.equalsTo(exp));    

    delete arr;
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='AlexDBlack' date='2019-04-17T09:45:31Z'>
		Yes, that test looks equivalent to the Java version...
		</comment>
		<comment id='7' author='AlexDBlack' date='2019-04-18T18:22:28Z'>
		Fixed
		</comment>
		<comment id='8' author='AlexDBlack' date='2019-05-18T18:56:14Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>