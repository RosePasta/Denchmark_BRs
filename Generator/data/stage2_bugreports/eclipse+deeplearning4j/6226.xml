<bug id='6226' author='AlexDBlack' open_date='2018-08-21T08:40:51Z' closed_time='2018-08-23T06:35:03Z'>
	<summary>libnd4j: where_np shape function needs proper implementation</summary>
	<description>
&lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/blob/master/libnd4j/include/ops/declarable/generic/boolean/where_np.cpp#L121-L145&gt;https://github.com/deeplearning4j/deeplearning4j/blob/master/libnd4j/include/ops/declarable/generic/boolean/where_np.cpp#L121-L145&lt;/denchmark-link&gt;

Currently hard-coded to [10,10] output.
I believe it should have shape [numMatches, rank(input)], where numMatches is the number of non-zero elements.
	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2018-08-21T09:49:29Z'>
		Numpy behave the next way:

if only one param used (condition matrix), then "If only condition is given, return the tuple condition.nonzero(), the indices where condition is True."
if two params uses - error occurs (ValueError: either both or neither of x and y should be given).

		</comment>
		<comment id='2' author='AlexDBlack' date='2018-08-21T10:07:54Z'>
		The TF behave as follow:

A Tensor with the same type and shape as x, y if they are non-None. A Tensor with shape (num_true, dim_size(condition)).

the Where op behave as TF.
		</comment>
		<comment id='3' author='AlexDBlack' date='2018-08-21T10:12:42Z'>
		Right, that was my conclusion. The op implementation seems correct, but the shape function is wrong.
		</comment>
		<comment id='4' author='AlexDBlack' date='2018-09-22T07:24:02Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>