<bug id='8012' author='eraly' open_date='2019-07-16T05:04:58Z' closed_time='2019-08-14T15:01:39Z'>
	<summary>Core dump from benchmark repo with v100 snapshots, CPU</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue Description&lt;/denchmark-h&gt;

Core dumps when running the BenchmarkCustom class from the benchmarking repo &lt;denchmark-link:https://github.com/deeplearning4j/dl4j-benchmark&gt;here&lt;/denchmark-link&gt;
. Running profile v100snapshots and CPU. Attaching the made up images I was using to test.
&lt;denchmark-link:https://github.com/eclipse/deeplearning4j/files/3395385/images.tar.gz&gt;images.tar.gz&lt;/denchmark-link&gt;

&lt;denchmark-h:h4&gt;Additional Information&lt;/denchmark-h&gt;

StdOut: &lt;denchmark-link:https://gist.github.com/eraly/8336c076ddd0fc76f8bd35200b1c0e53&gt;https://gist.github.com/eraly/8336c076ddd0fc76f8bd35200b1c0e53&lt;/denchmark-link&gt;

pid log file: &lt;denchmark-link:https://gist.github.com/eraly/95d327b257e759f160c83b645271fc83&gt;https://gist.github.com/eraly/95d327b257e759f160c83b645271fc83&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='eraly' date='2019-07-16T05:10:42Z'>
		&lt;denchmark-link:https://github.com/sshepel&gt;@sshepel&lt;/denchmark-link&gt;
 Can you check if we can reproduce that on the Mac machine used by Jenkins?
		</comment>
		<comment id='2' author='eraly' date='2019-07-17T05:09:41Z'>
		I tried locally (Windows) - with the provided dataset - no issues.
This was locally built (SkymindIO/deeplearning4j master), not using sonatype snapshots.
--datasetPath c:/Temp/benchmark/images --numLabels 3 --trainBatchSize 64
&lt;denchmark-link:https://github.com/eraly&gt;@eraly&lt;/denchmark-link&gt;
 Was this locally built, or with snapshots?
		</comment>
		<comment id='3' author='eraly' date='2019-07-17T05:34:05Z'>
		
@sshepel Can you check if we can reproduce that on the Mac machine used by Jenkins?

yeap
		</comment>
		<comment id='4' author='eraly' date='2019-07-17T15:47:01Z'>
		I build with snapshots.
		</comment>
		<comment id='5' author='eraly' date='2019-07-18T00:30:35Z'>
		&lt;denchmark-link:https://github.com/sshepel&gt;@sshepel&lt;/denchmark-link&gt;
 Any updates, what does it look like?
		</comment>
		<comment id='6' author='eraly' date='2019-07-18T21:09:18Z'>
		How often do we release snapshots now? Wondering when current master will make it into snapshots.
		</comment>
		<comment id='7' author='eraly' date='2019-07-18T21:12:28Z'>
		&lt;denchmark-link:https://github.com/eraly&gt;@eraly&lt;/denchmark-link&gt;
 we doing this on a daily basis...
		</comment>
		<comment id='8' author='eraly' date='2019-07-19T00:56:36Z'>
		Yes, snapshots go out daily (at least) but at present a lot of our work is on the SkymindIO/deeplearning4j fork. That means snapshots are based on when we last merged back, not on the latest work.
		</comment>
		<comment id='9' author='eraly' date='2019-07-19T16:36:33Z'>
		&lt;denchmark-link:https://github.com/eraly&gt;@eraly&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/saudet&gt;@saudet&lt;/denchmark-link&gt;
 I have managed to run benchmark on MacOS for native backend, without any crash...
&lt;denchmark-code&gt;o.d.b.BaseBenchmark - ===== Benchmarking forward/backward pass =====
o.d.b.BaseBenchmark - Completed 100 iterations
o.d.b.BaseBenchmark - Completed 200 iterations
o.d.b.BaseBenchmark - =============================
o.d.b.BaseBenchmark - ===== Benchmark Results =====
o.d.b.BaseBenchmark - =============================

==========================================================================================
LayerName (LayerType)                 nIn,nOut    TotalParams   ParamsShape               
==========================================================================================
cnn1 (ConvolutionLayer)               3,96        34944         b:{1,96}, W:{96,3,11,11}  
layer1 (LocalResponseNormalization)   -,-         0             -                         
maxpool1 (SubsamplingLayer)           -,-         0             -                         
cnn2 (ConvolutionLayer)               96,256      614656        b:{1,256}, W:{256,96,5,5} 
maxpool2 (SubsamplingLayer)           -,-         0             -                         
layer5 (LocalResponseNormalization)   -,-         0             -                         
cnn3 (ConvolutionLayer)               256,384     885120        b:{1,384}, W:{384,256,3,3}
cnn4 (ConvolutionLayer)               384,384     1327488       b:{1,384}, W:{384,384,3,3}
cnn5 (ConvolutionLayer)               384,256     884992        b:{1,256}, W:{256,384,3,3}
maxpool3 (SubsamplingLayer)           -,-         0             -                         
ffn1 (DenseLayer)                     9216,4096   37752832      W:{9216,4096}, b:{1,4096} 
ffn2 (DenseLayer)                     4096,4096   16781312      W:{4096,4096}, b:{1,4096} 
output (OutputLayer)                  4096,1000   4097000       W:{4096,1000}, b:{1,1000} 
------------------------------------------------------------------------------------------
            Total Parameters:  62378344
        Trainable Parameters:  62378344
           Frozen Parameters:  0
==========================================================================================

Version                                    1.0.0-beta3                                  
Name                                       ALEXNET                                      
Description                                SIMULATEDCNN 32x3x224x224                    
Operating System                           Apple macOS 10.12.6                          
Devices                                    Intel(R) Core(TM) i7-3615QM CPU @ 2.30GHz    
CPU Cores                                  8                                            
CPU                                        Intel(R) Core(TM) i7-3615QM CPU @ 2.30GHz    
System Memory                              17179869184 - 16 G                           
Memory Config - XMX                        3817865216 - 3.56 G                          
Memory Config - JavaCPP MaxPhysicalBytes   7635730432 - 7.11 G                          
Backend                                    CPU                                          
ND4J DataType                              FLOAT                                        
BLAS Vendor                                MKL                                          
CUDA Version                               n/a                                          
CUDNN Version                              n/a                                          
Periodic GC enabled                        true                                         
Periodic GC frequency                      5000                                         
Occasional GC Freq                         0                                            
Parallel Wrapper                           false                                        
Total Params                               62378344                                     
Total Layers                               13                                           
Avg Feedforward (ms)                       1065.35                                      
Avg Backprop (ms)                          2111.14                                      
Avg Fit (ms)                               3386.84                                      
Avg Iteration (ms)                         3370.25                                      
Avg Samples/sec                            9.41                                         
Avg Batches/sec                            0.3                                          
Batch size                                 32     
&lt;/denchmark-code&gt;

		</comment>
		<comment id='10' author='eraly' date='2019-07-19T19:03:33Z'>
		&lt;denchmark-link:https://github.com/sshepel&gt;@sshepel&lt;/denchmark-link&gt;
 The core dump is from the v100 snapshot profile. The run log says the profile run was with 1.0.0-beta3. Can you rerun with the snapshot profile? I see it crash pretty consistently on my mac.
		</comment>
		<comment id='11' author='eraly' date='2019-07-19T19:04:28Z'>
		Also Intel is reporting this same crash during their runs. I am not sure what linux they are running on.
		</comment>
		<comment id='12' author='eraly' date='2019-07-21T08:14:49Z'>
		I know &lt;denchmark-link:https://github.com/sshepel&gt;@sshepel&lt;/denchmark-link&gt;
 decided to upgrade to GCC 8 on Mac recently, but I doubt that works well with Xcode 8.3. We'll probably need to upgrade Xcode to something more recent as well.
		</comment>
		<comment id='13' author='eraly' date='2019-07-29T18:37:19Z'>
		&lt;denchmark-link:https://github.com/sshepel&gt;@sshepel&lt;/denchmark-link&gt;
 Intel got back to us to let us know they are running on  Ubuntu 18.04.2 LTS when they see the coredump. This is a zip of what they are running.
&lt;denchmark-link:https://github.com/eclipse/deeplearning4j/files/3443796/Without_MKLDNN.zip&gt;Without_MKLDNN.zip&lt;/denchmark-link&gt;

		</comment>
		<comment id='14' author='eraly' date='2019-07-30T10:35:44Z'>
		Rebuilt it couple of times, manually and through maven. The only issue i see here is suspicious memory fluctuation. Also, i wasn't able to run with batch size of 128 - just not enough memory. For batch sizes 16 and 32 there's no issues for me on Ubuntu 18.04
		</comment>
		<comment id='15' author='eraly' date='2019-08-06T05:44:16Z'>
		New snapshots with a bunch of fixes should have gone up yesterday (we merged the Skymind fork back to eclipse master). It's quite possible this was been fixed in that round, so it's worth re-running/re-testing with the latest snapshots.
		</comment>
		<comment id='16' author='eraly' date='2019-08-07T17:25:24Z'>
		I'll update issue when Intel gets back to us.
		</comment>
		<comment id='17' author='eraly' date='2019-08-08T18:23:26Z'>
		They are still seeing the issue. They are running on an "Intel Xeon scalable processor powered CPU cluster on Colfax."
		</comment>
		<comment id='18' author='eraly' date='2019-08-08T18:25:01Z'>
		Okay. Let's spin up F-class machine on Azure, and try to reproduce there.
		</comment>
		<comment id='19' author='eraly' date='2019-08-13T22:54:30Z'>
		We reproduced this on the azure instance.
		</comment>
		<comment id='20' author='eraly' date='2019-08-14T15:01:39Z'>
		Issue resolved and fixed in dl4j-benchmarks.
		</comment>
	</comments>
</bug>