<bug id='3275' author='neutralino' open_date='2017-04-19T15:37:17Z' closed_time='2017-09-13T14:05:27Z'>
	<summary>Error importing Keras LSTM model -- "Invalid input for RNN layer"</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue Description&lt;/denchmark-h&gt;

I'm trying to import a basic Keras LSTM model:
(X_train, y_train), (X_test, y_test) = imdb.load_data(nb_words=5000)
X_train = sequence.pad_sequences(X_train, maxlen=500)
X_test = sequence.pad_sequences(X_test, maxlen=500)
model = Sequential()
model.add(Embedding(5000, 32, input_length=500))
model.add(LSTM(100))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(X_train, y_train, nb_epoch=1, batch_size=64)
model.save_weights("model_weights_file.h5")
with open("model_file.json", "w") as f_out:
    f_out.write(model.to_json())
When importing via:
MultiLayerNetwork model = KerasModelImport.importKerasSequentialModelAndWeights(modelJsonPath, weightsH5Path, false);
I get this error:
&lt;denchmark-code&gt;Exception in thread "main" java.lang.IllegalStateException: Invalid input for RNN layer (layer index = -1, layer name = "lstm_1"): expect RNN input type with size &gt; 0. Got: InputTypeFeedForward(32)
	at org.deeplearning4j.nn.conf.layers.BaseRecurrentLayer.getOutputType(BaseRecurrentLayer.java:21)
	at org.deeplearning4j.nn.modelimport.keras.layers.KerasLstm.getOutputType(KerasLstm.java:119)
	at org.deeplearning4j.nn.modelimport.keras.KerasModel.helperInferOutputTypes(KerasModel.java:286)
	at org.deeplearning4j.nn.modelimport.keras.KerasSequentialModel.&lt;init&gt;(KerasSequentialModel.java:129)
	at org.deeplearning4j.nn.modelimport.keras.KerasSequentialModel.&lt;init&gt;(KerasSequentialModel.java:56)
	at org.deeplearning4j.nn.modelimport.keras.KerasModel$ModelBuilder.buildSequential(KerasModel.java:581)
	at org.deeplearning4j.nn.modelimport.keras.KerasModelImport.importKerasSequentialModelAndWeights(KerasModelImport.java:216)
&lt;/denchmark-code&gt;

Thanks for any help.
&lt;denchmark-h:h4&gt;Version Information&lt;/denchmark-h&gt;


Deeplearning4j version: 0.8.0
Keras version: 1.2.2

	</description>
	<comments>
		<comment id='1' author='neutralino' date='2017-05-05T16:54:04Z'>
		Any updates on this? I'm running into the exact same type of error when trying to use an LSTM model that we trained.
		</comment>
		<comment id='2' author='neutralino' date='2017-07-24T07:50:42Z'>
		I have the same problem trying to import an LSTM model. Any updates on this ?
		</comment>
		<comment id='3' author='neutralino' date='2017-07-24T22:57:26Z'>
		&lt;denchmark-link:https://github.com/turambar&gt;@turambar&lt;/denchmark-link&gt;
 do you have any insight on this?
		</comment>
		<comment id='4' author='neutralino' date='2017-07-24T23:24:29Z'>
		&lt;denchmark-link:https://github.com/tomthetrainer&gt;@tomthetrainer&lt;/denchmark-link&gt;
 best guess: we're having trouble inferring the input type and shape from the Embedding layer. I need someone &lt;denchmark-link:https://github.com/neutralino&gt;@neutralino&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/neil-boyette-ibm&gt;@neil-boyette-ibm&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/ChrisYohann&gt;@ChrisYohann&lt;/denchmark-link&gt;
) to post a simple model config JSON so I can step through this in a debugger.
Context: for Keras Sequential models, we have to infer the input shape based on the configuration of the first Keras layer, in this case an Embedding. Keras Embedding layers behave a little differently from other Keras layers (in terms of defining their input shape, etc.), and we've previously had some problems with that.
FYI, easiest potential fix: just use the Keras Functional API. The Functional API forces you to explicitly define your input layer shapes, and that makes import WAY easier.
		</comment>
		<comment id='5' author='neutralino' date='2017-07-25T10:54:25Z'>
		&lt;denchmark-link:https://github.com/turambar&gt;@turambar&lt;/denchmark-link&gt;
 - thanks for the tip.  Here's the JSON for the above model:
&lt;denchmark-code&gt;{
  "class_name": "Sequential",
  "keras_version": "1.2.2",
  "config": [
    {
      "class_name": "Embedding",
      "config": {
        "trainable": true,
        "name": "embedding_1",
        "activity_regularizer": null,
        "W_constraint": null,
        "init": "uniform",
        "input_dtype": "int32",
        "mask_zero": false,
        "input_dim": 5000,
        "batch_input_shape": [
          null,
          500
        ],
        "W_regularizer": null,
        "dropout": 0,
        "output_dim": 32,
        "input_length": 500
      }
    },
    {
      "class_name": "LSTM",
      "config": {
        "U_regularizer": null,
        "name": "lstm_1",
        "inner_activation": "hard_sigmoid",
        "go_backwards": false,
        "activation": "tanh",
        "trainable": true,
        "unroll": false,
        "consume_less": "cpu",
        "stateful": false,
        "init": "glorot_uniform",
        "inner_init": "orthogonal",
        "dropout_U": 0,
        "dropout_W": 0,
        "input_dim": 32,
        "return_sequences": false,
        "b_regularizer": null,
        "W_regularizer": null,
        "output_dim": 100,
        "forget_bias_init": "one",
        "input_length": null
      }
    },
    {
      "class_name": "Dense",
      "config": {
        "W_constraint": null,
        "b_constraint": null,
        "name": "dense_1",
        "activity_regularizer": null,
        "trainable": true,
        "init": "glorot_uniform",
        "bias": true,
        "input_dim": 100,
        "b_regularizer": null,
        "W_regularizer": null,
        "activation": "sigmoid",
        "output_dim": 1
      }
    }
  ]
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='neutralino' date='2017-08-01T09:45:50Z'>
		&lt;denchmark-link:https://github.com/neutralino&gt;@neutralino&lt;/denchmark-link&gt;
 so, does the import work following &lt;denchmark-link:https://github.com/turambar&gt;@turambar&lt;/denchmark-link&gt;
 's tip?
		</comment>
		<comment id='7' author='neutralino' date='2017-09-13T14:05:27Z'>
		we fixed this with &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/pull/4053&gt;https://github.com/deeplearning4j/deeplearning4j/pull/4053&lt;/denchmark-link&gt;
 and have unit test for it. closing this. let me know in case you still have problems, thanks!
		</comment>
		<comment id='8' author='neutralino' date='2017-12-10T20:16:41Z'>
		&lt;denchmark-link:https://github.com/turambar&gt;@turambar&lt;/denchmark-link&gt;
 's solution with Functional API didn't work for me. Waiting to see this patch in stable release!
		</comment>
		<comment id='9' author='neutralino' date='2018-09-24T02:43:54Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>