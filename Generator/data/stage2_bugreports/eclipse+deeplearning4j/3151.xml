<bug id='3151' author='xvolks' open_date='2017-03-29T21:34:49Z' closed_time='2018-04-26T23:19:22Z'>
	<summary>JVM Crash when training CNN</summary>
	<description>
Kotlin code:
&lt;denchmark-code&gt;        for (i in 1..convolutionLayers) {
            conf.layer(layerCount++, ConvolutionLayer.Builder()
                    .name("conv_n$i")
                    .kernelSize(3, 3)
                    .nOut(8 * (1 shl i))
                    .stride(1, 1)
                    .padding(1, 1)
                    .build())
                    .layer(layerCount++, SubsamplingLayer.Builder(PoolingType.MAX)
                            .name("subs_n$i")
                            .build())
//                    .layer(layerCount++, BatchNormalization.Builder(0.99, true)
//                            .name("norm_n$i")
//                            .build())
                    .build()
        }
&lt;/denchmark-code&gt;

If convolutionLayers is 4 or less the program works as expected. With 5+ it crashes.
This trace was created with convolutionLayers set to 10.
Note: if I remove the * (1 lsh i) on the nOut line (so the line is .nOut(8))
it crashes with:
java(5776,0x70000f1fc000) malloc: *** error for object 0x7fabfe4d7200: incorrect checksum for freed object - object was probably modified after being freed. *** set a breakpoint in malloc_error_break to debug
The logs
Learning...
o.d.u.p.PlayUIServer - UI Server started at http://localhost:9000
o.d.u.p.PlayUIServer - StatsStorage instance attached to UI: InMemoryStatsStorage(uid=bbb915c2)
**** Build Model ****
o.n.l.f.Nd4jBackend - Skipped [JCublasBackend] backend (unavailable): java.lang.RuntimeException: CUDA backend can't find NVCC within PATH environment variable
o.n.l.f.Nd4jBackend - Loaded [CpuBackend] backend
o.n.n.NativeOpsHolder - Number of threads used for NativeOps: 4
o.n.n.Nd4jBlas - Number of threads used for BLAS: 4
o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Mac OS X]
o.n.l.a.o.e.DefaultOpExecutioner - Cores: [8]; Memory: [7,1GB];
o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [OPENBLAS]
*****TRAIN MODEL********
Epoch #0
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000110352a90, pid=5465, tid=0x000000000000150b
#
# JRE version: Java(TM) SE Runtime Environment (8.0_112-b16) (build 1.8.0_112-b16)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.112-b16 mixed mode bsd-amd64 compressed oops)
# Problematic frame:
# C  [libnd4jcpu.dylib+0x51a90]  simdOps::Im2col::execSpecial(float*, int*, float*, int*, float*, int*, int*) (._omp_fn.987)+0x3b0
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# /Users/xvolks/Google Drive/Cours/machine-learning/SelfTraining/hs_err_pid5465.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#

Process finished with exit code 134 (interrupted by signal 6: SIGABRT)

&lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/files/880405/hs_err_pid5465.log.zip&gt;hs_err_pid5465.log.zip&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='xvolks' date='2017-04-25T06:55:09Z'>
		What is the size of the input? Does this happen, for example, with LenetMnistExample? The more convolution layers we add, the smaller the output gets, unless we're using ConvolutionMode.Same. In any case, it shouldn't crash, but it would be good to know if it's just the inputs getting too small.
		</comment>
		<comment id='2' author='xvolks' date='2017-04-25T08:06:01Z'>
		The image is 13x24x1 (gray level OCR).
You may be right, the output seems to be too small.

Envoyé de mon iPhone
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


 Le 25 avr. 2017 à 08:55, Samuel Audet ***@***.***&gt; a écrit :

 What is the size of the input? Does this happen, for example, with LenetMnistExample? The more convolution layers we add, the smaller the output gets, unless we're using ConvolutionMode.Same. In any case, it shouldn't crash, but it would be good to know if it's just the inputs getting too small.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or mute the thread.



		</comment>
		<comment id='3' author='xvolks' date='2017-04-25T08:13:14Z'>
		Yes, that's definitively what is happening. We're most likely missing some checks for that somewhere. If you could provide a small piece of code to reproduce that easily, it would help. Thanks!
		</comment>
		<comment id='4' author='xvolks' date='2017-04-25T10:28:30Z'>
		&lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/files/954709/CrashDl4j.zip&gt;CrashDl4j.zip&lt;/denchmark-link&gt;

Here is a test case crashing the JVM (seems to not give exact same crash, sorry).
		</comment>
		<comment id='5' author='xvolks' date='2017-04-27T02:35:37Z'>
		Thanks! It crashes with 0.8.0, but I am unable to make it crash with 0.8.1-SNAPSHOT, so it looks like this issue has already been fixed. Can you confirm?
		</comment>
		<comment id='6' author='xvolks' date='2017-04-27T09:47:33Z'>
		Just upgrading from 0.8.0 to 0.8.1-SNAPSHOT fail with:
&lt;denchmark-code&gt;11:31:39.354 [main] INFO  org.nd4j.linalg.factory.Nd4jBackend - Loaded [CpuBackend] backend
Exception in thread "main" java.lang.ExceptionInInitializerError
	at org.nd4j.linalg.cpu.nativecpu.ops.NativeOpExecutioner.&lt;init&gt;(NativeOpExecutioner.java:43)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at java.lang.Class.newInstance(Class.java:442)
	at org.nd4j.linalg.factory.Nd4j.initWithBackend(Nd4j.java:5965)
	at org.nd4j.linalg.factory.Nd4j.initContext(Nd4j.java:5869)
	at org.nd4j.linalg.factory.Nd4j.&lt;clinit&gt;(Nd4j.java:196)
	at org.deeplearning4j.nn.conf.NeuralNetConfiguration$Builder.seed(NeuralNetConfiguration.java:684)
	at com.xvolks.nn.cniDigits.networks.ConvolutionModel.createNetwork(ConvolutionModel.kt:55)
	at com.xvolks.nn.cniDigits.MainKt.main(Main.kt:70)
Caused by: java.lang.RuntimeException: ND4J is probably missing dependencies. For more information, please refer to: http://nd4j.org/getstarted.html
	at org.nd4j.nativeblas.NativeOpsHolder.&lt;init&gt;(NativeOpsHolder.java:51)
	at org.nd4j.nativeblas.NativeOpsHolder.&lt;clinit&gt;(NativeOpsHolder.java:19)
	... 12 more
Caused by: java.lang.UnsatisfiedLinkError: no jnind4jcpu in java.library.path
	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1867)
	at java.lang.Runtime.loadLibrary0(Runtime.java:870)
	at java.lang.System.loadLibrary(System.java:1122)
	at org.bytedeco.javacpp.Loader.loadLibrary(Loader.java:963)
	at org.bytedeco.javacpp.Loader.load(Loader.java:764)
	at org.bytedeco.javacpp.Loader.load(Loader.java:671)
	at org.nd4j.nativeblas.Nd4jCpu.&lt;clinit&gt;(Nd4jCpu.java:10)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:348)
	at org.bytedeco.javacpp.Loader.load(Loader.java:726)
	at org.bytedeco.javacpp.Loader.load(Loader.java:671)
	at org.nd4j.nativeblas.Nd4jCpu$NativeOps.&lt;clinit&gt;(Nd4jCpu.java:63)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:264)
	at org.nd4j.nativeblas.NativeOpsHolder.&lt;init&gt;(NativeOpsHolder.java:29)
	... 13 more
Caused by: java.lang.UnsatisfiedLinkError: no nd4jcpu in java.library.path
	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1867)
	at java.lang.Runtime.loadLibrary0(Runtime.java:870)
	at java.lang.System.loadLibrary(System.java:1122)
	at org.bytedeco.javacpp.Loader.loadLibrary(Loader.java:963)
	at org.bytedeco.javacpp.Loader.load(Loader.java:752)
	... 23 more

&lt;/denchmark-code&gt;

I'm probably missing some lib update.
		</comment>
		<comment id='7' author='xvolks' date='2017-04-27T22:58:40Z'>
		Try to use the nd4j-native and nd4j-cuda artifacts instead of the nd4j-native-platform and nd4j-cuda-platform ones.
		</comment>
		<comment id='8' author='xvolks' date='2017-04-28T07:25:24Z'>
		Seems to be a problem with our Nexus that has cached only the Linux version, so it cannot work on my Mac.
EDIT: I've refreshed the Nexus cache, still the same problem. It's like the artifact for macOS was not existant.
		</comment>
		<comment id='9' author='xvolks' date='2018-04-26T23:19:22Z'>
		This issue was fixed long ago.
		</comment>
		<comment id='10' author='xvolks' date='2018-09-22T12:13:48Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>