<bug id='7354' author='treo' open_date='2019-03-26T05:32:24Z' closed_time='2019-03-29T08:08:50Z'>
	<summary>SameDiff: Serialization / Deserialization not returning inputs in same order</summary>
	<description>
While trying to figure out what is going on with &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/issues/7346&gt;#7346&lt;/denchmark-link&gt;
, I've found that the following case results in a Serialization Check Failing:
@Test
    public void testStridedAccessSerilization(){
        final INDArray input = Nd4j.rand(DataType.DOUBLE, new int[]{3, 4, 5});
        final INDArray[] output = new INDArray[(int) input.size(2)];
        for (int i = 0; i &lt; input.size(2); i++) {
            final INDArray x_i = input.get(NDArrayIndex.all(), NDArrayIndex.all(), NDArrayIndex.point(i));
            output[i] = Nd4j.expandDims(x_i, 2);
        }
        final INDArray out = Nd4j.concat(2, output).norm2();


        SameDiff sd = SameDiff.create();
        final SDVariable sdInput = sd.var("input", input);

        final long timeSteps = sdInput.getShape()[2];
        SDVariable[] outputSlices = new SDVariable[(int) timeSteps];

        for (int i = 0; i &lt; timeSteps; i++) {
            final val x_i = sdInput.get(all(), all(), point(i));
            
            outputSlices[i] = sd.expandDims(x_i, 2);
        }

        SDVariable t = sd.concat(2, outputSlices);
        t.norm2("out");
        String err = OpValidation.validate(new TestCase(sd)
                .testFlatBufferSerialization(TestCase.TestSerialization.BOTH)
                .expectedOutput("out", out)
                .gradientCheck(true));

        assertNull(err, err);
    }
with
&lt;denchmark-code&gt;java.lang.IllegalStateException: Inputs differ: [stridedslice, stridedslice:1, stridedslice:2, stridedslice:3, stridedslice:4] vs. [stridedslice:2, stridedslice:1, stridedslice:4, stridedslice, stridedslice:3]

	at org.nd4j.base.Preconditions.throwStateEx(Preconditions.java:641)
	at org.nd4j.base.Preconditions.checkState(Preconditions.java:340)
	at org.nd4j.autodiff.validation.OpValidation.checkDeserializedEquality(OpValidation.java:284)
	at org.nd4j.autodiff.validation.OpValidation.validateHelper(OpValidation.java:191)
	at org.nd4j.autodiff.validation.OpValidation.validate(OpValidation.java:126)
	at org.nd4j.autodiff.validation.OpValidation.validate(OpValidation.java:121)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='treo' date='2019-03-26T07:01:19Z'>
		&lt;denchmark-link:https://github.com/AlexDBlack&gt;@AlexDBlack&lt;/denchmark-link&gt;

This issue is due to iteration over  in &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/autodiff/samediff/SameDiff.java#L3656&gt;https://github.com/deeplearning4j/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/autodiff/samediff/SameDiff.java#L3656&lt;/denchmark-link&gt;
, with  being a HashMap. When a LinkedHashMap is used, the issue goes away. But I'm not sure if that is a good solution here as it adds additional overhead
		</comment>
		<comment id='2' author='treo' date='2019-03-27T12:28:19Z'>
		So after looking into this for a while, it's not as simple as the iteration order (though, that is a legitimate but separate issue - I opted to use LinkedHashMap to ensure iteration order for that... if that's too high an overhead, we can replace it, but I think it should be ok).
Seems like it's a FlatBuffers deserialization issue, not sure why yet.
		</comment>
		<comment id='3' author='treo' date='2019-04-28T08:25:39Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>