<bug id='4167' author='wanjizheng' open_date='2017-10-13T00:57:34Z' closed_time='2019-11-10T13:35:00Z'>
	<summary>Random Results</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue Description&lt;/denchmark-h&gt;

Try to use the DeepLearning4j Word2Vec to do the most basic task: calculate the cosine-similarity between two words in a document. The key code is:
`  public Word2VecBuilder(String _content, int _minwordfreq, int _layersize, int _iterations, int _seed, int _windowsize, int _type)
{
strContent = _content;
intMinWordFreq = _minwordfreq;
intLayerSize = _layersize;
intIterations = _iterations;
intSeed = _seed;
intWindowSize = _windowsize;
intType = _type;
}
&lt;denchmark-code&gt;@Override
public void run()
{
    XYZ.fmO.Log("Start to build the Word2Vec model.", Color.BLUE);
    InputStream inputStream_Content = new ByteArrayInputStream(strContent.getBytes(StandardCharsets.UTF_8));
    SentenceIterator sentenceIter = new BasicLineIterator(inputStream_Content);
    TokenizerFactory tokenFactor = new DefaultTokenizerFactory();
    tokenFactor.setTokenPreProcessor(new CommonPreprocessor());
    Word2Vec word2Vec = null;
    try
    {
        Nd4j.getRandom().setSeed(intSeed);
        word2Vec = new Word2Vec.Builder()
                .minWordFrequency(intMinWordFreq)
                .iterations(intIterations)
                .layerSize(intLayerSize)
                .seed(intSeed)
                .workers(1)
                .windowSize(intWindowSize)
                .iterate(sentenceIter)
                .tokenizerFactory(tokenFactor)
                .build();
        word2Vec.fit();

        switch (intType)
        {
            case 0:
                XYZ.myWord2Vec_Y = word2Vec;
                break;
            case 1:
                XYZ.myWord2Vec_X = word2Vec;
                break;
            case 2:
                XYZ.myWord2Vec_XY = word2Vec;
                break;
            case 3:
                XYZ.myWord2Vec_Temp = word2Vec;
                break;
        }

        //WordVectorSerializer.writeWordVectors(word2Vec, "myWord2Vec.txt");
        if (intType &lt; 3)
        {
            XYZ.fmO.Log("The model is ready!.", Color.RED);
            XYZ.fmO.Log("Evaluating the model...", Color.orange);

            Collection&lt;String&gt; listWord = word2Vec.getVocab().words();
            List&lt;String&gt; listMissingEntity = new ArrayList&lt;String&gt;();
            for (String strEntity : XYZ.listCorpusEntity)
            {
                if (!listWord.contains(strEntity.replace(" ", "_").toLowerCase()))
                {
                    listMissingEntity.add(strEntity);
                }
            }

            if (listMissingEntity.size() &gt; 0)
            {
                StringBuilder mySB_MissingEntity = new StringBuilder();
                Memo myMemo = new Memo();

                JSONObject jsonMemo = new JSONObject();

                if (intType == 1)
                {
                    myMemo.setTitle("DbO X: Missing Entities from Word2Vec");
                    jsonMemo.put("Type", "DbO X: Missing Entities from Word2Vec");
                }
                else if (intType == 0)
                {
                    myMemo.setTitle("DbO Y: Missing Entities from Word2Vec");
                    jsonMemo.put("Type", "DbO Y: Missing Entities from Word2Vec");
                }
                else
                {
                    //Both TBD
                }

                JSONArray jsonArray = new JSONArray();

                for (String strMissing : listMissingEntity)
                {
                    mySB_MissingEntity.append(strMissing).append("\r\n");
                    jsonArray.put(strMissing);
                }
                XYZ.fmO.Log("The following Entities (" + listMissingEntity.size() + ") are missing from the Word2Vec Model \r\n" + mySB_MissingEntity.toString(), Color.red);
                jsonMemo.put("Memo", jsonArray);
                myMemo.setMemo(jsonMemo);
                XYZ.listMemo.add(myMemo);

            }

            XYZ.fmM.myJIF_DbO.jButton_Export.setEnabled(true);
            XYZ.fmM.myJIF_DbO.jButton_Run.setEnabled(true);
            XYZ.fmM.myJIF_DbO.jPanel_W2VOutcome.setVisible(true);
        }
    }
    catch (Exception e)
    {
        System.out.println(e.getMessage());
        XYZ.fmO.Log(e.getMessage(), Color.RED);
    }

}
&lt;/denchmark-code&gt;

`
I use the same parameter (int _minwordfreq, int _layersize, int _iterations, int _seed, int _windowsize) and the same document, but each time the cosine-similarity is different from each other.  I understand that if I increase the iteration, I can make the difference smaller, but is there a way to eliminate the randomness?
	</description>
	<comments>
		<comment id='1' author='wanjizheng' date='2018-03-09T20:25:42Z'>
		Did you come across any explanation regarding the random-like behaviour?
		</comment>
		<comment id='2' author='wanjizheng' date='2018-03-09T21:45:33Z'>
		Nope.
		</comment>
		<comment id='3' author='wanjizheng' date='2018-04-27T18:37:20Z'>
		It shouldn't be different, otherwise tests would be failing. Can i have any text which reproduces this behavior?
Also, can you please post actual values for variables used there?
		</comment>
	</comments>
</bug>