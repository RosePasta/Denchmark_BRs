<bug id='2878' author='saudet' open_date='2017-02-17T14:45:50Z' closed_time='2018-03-14T02:01:14Z'>
	<summary>"OutOfMemoryError: GC overhead limit exceeded" in BarnesHutTsne on large datasets</summary>
	<description>
Sample code plotting 50000 random points with BarnesHutTsne:
&lt;denchmark-link:https://gist.github.com/saudet/be8c695b447e7f0fc296e2347ec596b1&gt;https://gist.github.com/saudet/be8c695b447e7f0fc296e2347ec596b1&lt;/denchmark-link&gt;

The equivalent code using &lt;denchmark-link:https://github.com/lejon/T-SNE-Java&gt;https://github.com/lejon/T-SNE-Java&lt;/denchmark-link&gt;
 in the sample above runs fine in a couple of minutes, but BarnesHutTsne from Deeplearning4j eventually throws an OutOfMemoryError. Sample log:
&lt;denchmark-code&gt;o.n.l.f.Nd4jBackend - Loaded [CpuBackend] backend
o.n.n.NativeOpsHolder - Number of threads used for NativeOps: 8
o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Linux]
o.n.l.a.o.e.DefaultOpExecutioner - Cores: [16]; Memory: [14.0GB];
o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [OPENBLAS]
Exception in thread "main" java.lang.OutOfMemoryError: GC overhead limit exceeded
	at org.nd4j.linalg.cpu.nativecpu.ops.NativeOpExecutioner.exec(NativeOpExecutioner.java:870)
	at org.nd4j.linalg.cpu.nativecpu.ops.NativeOpExecutioner.exec(NativeOpExecutioner.java:95)
	at org.nd4j.linalg.api.ops.executioner.DefaultOpExecutioner.execAndReturn(DefaultOpExecutioner.java:221)
	at org.deeplearning4j.clustering.sptree.DataPoint.distance(DataPoint.java:75)
	at org.deeplearning4j.clustering.vptree.VPTree.getDistance(VPTree.java:151)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:172)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:200)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:200)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:200)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:199)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:200)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:200)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:200)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:200)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:200)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:199)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:199)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:199)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:199)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:199)
	at org.deeplearning4j.clustering.vptree.VPTree.buildFromPoints(VPTree.java:199)
	at org.deeplearning4j.clustering.vptree.VPTree.&lt;init&gt;(VPTree.java:72)
	at org.deeplearning4j.plot.BarnesHutTsne.computeGaussianPerplexity(BarnesHutTsne.java:182)
	at org.deeplearning4j.plot.BarnesHutTsne.fit(BarnesHutTsne.java:457)
	at org.deeplearning4j.plot.BarnesHutTsne.fit(BarnesHutTsne.java:669)
	at org.deeplearning4j.plot.BarnesHutTsne.plot(BarnesHutTsne.java:577)
	at TSnePlot.main(TSnePlot.java:74)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='saudet' date='2018-03-14T02:01:14Z'>
		This seems to be fixed now in 0.9.2-SNAPSHOT, but performance continues to suffer (issue &lt;denchmark-link:https://github.com/eclipse/deeplearning4j/issues/2890&gt;#2890&lt;/denchmark-link&gt;
).
		</comment>
		<comment id='2' author='saudet' date='2018-09-23T03:28:10Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>