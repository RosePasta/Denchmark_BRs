<bug id='8058' author='AlexDBlack' open_date='2019-07-29T05:18:25Z' closed_time='2019-08-23T05:41:30Z'>
	<summary>libnd4j: mergemax input shape validation not working</summary>
	<description>
&lt;denchmark-code&gt;    @Test
    public void testInputValidationMergeMax(){
        INDArray[] inputs = new INDArray[]{
                Nd4j.createFromArray(0.0f, 1.0f, 2.0f).reshape('c', 1, 3),
                Nd4j.createFromArray(1.0f).reshape('c', 1, 1)};

        INDArray out = Nd4j.create(DataType.FLOAT, 1, 3).assign(Double.NaN);
        CustomOp op = DynamicCustomOp.builder("mergemax")
                .addInputs(inputs)
                .addOutputs(out)
                .callInplace(false)
                .build();

        Nd4j.exec(op);
        System.out.println(out);
    }
&lt;/denchmark-code&gt;

Result: no exception, and no outputs written/modified (all NaNs as set before exec).
This should fail validation here:
&lt;denchmark-link:https://github.com/eclipse/deeplearning4j/blob/master/libnd4j/include/ops/declarable/generic/transforms/merge_max.cpp#L32&gt;https://github.com/eclipse/deeplearning4j/blob/master/libnd4j/include/ops/declarable/generic/transforms/merge_max.cpp#L32&lt;/denchmark-link&gt;

Also likely impacts the other merge* ops.
I'm assuming we're following TF conventions (i.e., no broadcast support) for these merge ops...
&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/math/add_n&gt;https://www.tensorflow.org/api_docs/python/tf/math/add_n&lt;/denchmark-link&gt;

Alternatively, if we do want to support broadcasting (would be nice) then this is a bug int applying broadcasting for this op.
	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2019-08-23T05:41:30Z'>
		Fixed
		</comment>
	</comments>
</bug>