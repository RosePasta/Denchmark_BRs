<bug id='7281' author='AlexDBlack' open_date='2019-03-12T04:12:31Z' closed_time='2019-04-04T05:47:25Z'>
	<summary>Libnd4j: conv2d_bp crash with size 1 kernel edge case</summary>
	<description>
See below for a case that crashes with:
(a) Float datatype (I've seen similar failures with double precision, but can't reproduce in isolation)
(b) When MKL-DNN is not used (passes with MKL-DNN)
I suspect the kernel width of 1 combined with the input width of 1 is the problem here. Other cases (without this size 1 edge case for the kernel/input width) run fine and provide correct output.
No JVM crash log is produced; the only output is the JVM crash exit code:
&lt;denchmark-code&gt;Process finished with exit code -1073740940 (0xC0000374)
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;    @Test
    public void debugConv(){
        Nd4j.setDataType(DataType.FLOAT);
        Nd4jCpu.Environment.getInstance().setUseMKLDNN(false);


        INDArray in = Nd4j.create(1,2,7,1);     //NCHW
        INDArray w = Nd4j.create(2,1,2,3);      //kH, kW, iC, oC
        INDArray b = Nd4j.create(1,3);
        INDArray g = Nd4j.create(1,3,7,1);      //NCHW

        INDArray og = in.like();                //gradient at input - NCHW
        INDArray wg = w.like();                 //Weight gradient
        INDArray bg = b.like();


        DynamicCustomOp op = DynamicCustomOp.builder("conv2d_bp")
                .addInputs(in, w, b, g)
                .addOutputs(og, wg, bg)
                .addIntegerArguments(
                        2,1,   //kernel
                        1,1,    //stride
                        0,0,    //Pad
                        1,1,    //Dilation
                        1,      //Same
                        0       //0 = NCHW
                )
                .build();

        Nd4j.exec(op);
    }
&lt;/denchmark-code&gt;

Aha! Link: &lt;denchmark-link:https://skymindai.aha.io/features/ND4J-96&gt;https://skymindai.aha.io/features/ND4J-96&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2019-03-12T04:14:38Z'>
		Is it reproducible on linux?
		</comment>
		<comment id='2' author='AlexDBlack' date='2019-03-12T04:16:54Z'>
		I haven't checked yet. Can reboot soon and check.
		</comment>
		<comment id='3' author='AlexDBlack' date='2019-03-12T06:42:51Z'>
		Confirmed present on linux also:
&lt;denchmark-code&gt;o.n.l.f.Nd4jBackend - Loaded [CpuBackend] backend
o.n.n.NativeOpsHolder - Number of threads used for NativeOps: 6
o.n.n.Nd4jBlas - Number of threads used for BLAS: 6
o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Linux]
o.n.l.a.o.e.DefaultOpExecutioner - Cores: [12]; Memory: [7.0GB];
o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
*** Error in `/usr/lib/jvm/java-8-oracle/bin/java': free(): invalid pointer: 0x00007f2f48de3690 ***

Process finished with exit code 134 (interrupted by signal 6: SIGABRT)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='AlexDBlack' date='2019-04-03T15:55:07Z'>
		Hi, Alex
Problem has been solved, it had to do to with wrong reshape of permuted arrays that have unity-dimensions. Corresponding pr is merged
		</comment>
		<comment id='5' author='AlexDBlack' date='2019-04-04T05:47:24Z'>
		Confirmed passing now - thanks!
		</comment>
		<comment id='6' author='AlexDBlack' date='2019-05-04T05:48:31Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>