<bug id='1139' author='marbon87' open_date='2016-02-12T09:36:06Z' closed_time='2016-02-13T07:07:44Z'>
	<summary>TruncatedBPTT - IllegalArgumentException</summary>
	<description>
When i try the Word2VecSentimentRNN-Example and activat TruncatedBPTT, i get the following exception:
&lt;denchmark-code&gt;Exception in thread "main" java.lang.IllegalArgumentException: Shapes do not match: x.shape=[500, 2], y.shape=[15000, 1], y should be vector with length=x.size([I@609bcfb6)
    at org.nd4j.linalg.api.parallel.tasks.cpu.CPUTaskFactory.getBroadcastOpAction(CPUTaskFactory.java:267)
    at org.nd4j.linalg.api.ops.executioner.DefaultOpExecutioner.doBroadcastOp(DefaultOpExecutioner.java:515)
    at org.nd4j.linalg.api.ops.executioner.DefaultOpExecutioner.exec(DefaultOpExecutioner.java:70)
    at org.nd4j.linalg.api.ndarray.BaseNDArray.applyBroadcastOp(BaseNDArray.java:2022)
    at org.nd4j.linalg.api.ndarray.BaseNDArray.doColumnWise(BaseNDArray.java:1930)
    at org.nd4j.linalg.api.ndarray.BaseNDArray.muliColumnVector(BaseNDArray.java:2207)
    at org.deeplearning4j.nn.layers.recurrent.RnnOutputLayer.output(RnnOutputLayer.java:151)
    at org.deeplearning4j.nn.layers.BaseOutputLayer.activate(BaseOutputLayer.java:221)
    at org.deeplearning4j.nn.multilayer.MultiLayerNetwork.rnnActivateUsingStoredState(MultiLayerNetwork.java:2247)
    at org.deeplearning4j.nn.multilayer.MultiLayerNetwork.computeGradientAndScore(MultiLayerNetwork.java:1748)
    at org.deeplearning4j.optimize.solvers.BaseOptimizer.gradientAndScore(BaseOptimizer.java:132)
    at org.deeplearning4j.optimize.solvers.StochasticGradientDescent.optimize(StochasticGradientDescent.java:56)
    at org.deeplearning4j.optimize.Solver.optimize(Solver.java:52)
    at org.deeplearning4j.nn.multilayer.MultiLayerNetwork.doTruncatedBPTT(MultiLayerNetwork.java:1299)
    at org.deeplearning4j.nn.multilayer.MultiLayerNetwork.fit(MultiLayerNetwork.java:1157)
    at org.deeplearning4j.examples.word2vec.sentiment.Word2VecSentimentRNN.main(Word2VecSentimentRNN.java:97)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)

&lt;/denchmark-code&gt;

The MultiLayerConfiguration is the following:
&lt;denchmark-code&gt;
        //Set up network configuration
        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
                .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(1)
                .updater(Updater.RMSPROP)
                .regularization(true).l2(1e-5)
                .weightInit(WeightInit.XAVIER)
                .gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue).gradientNormalizationThreshold(1.0)
                .learningRate(0.0018)
                .list(2)
                .layer(0, new GravesLSTM.Builder().nIn(vectorSize).nOut(200)
                        .activation("softsign").build())
                .layer(1, new RnnOutputLayer.Builder().activation("softmax")
                        .lossFunction(LossFunctions.LossFunction.MCXENT).nIn(200).nOut(2).build())
                .pretrain(false).backprop(true)

                .backpropType(BackpropType.TruncatedBPTT)
                .tBPTTForwardLength(10)
                .tBPTTBackwardLength(10)
                .build();
&lt;/denchmark-code&gt;

It happens on 0.4-rc3.8 and 0.4-rc3.9-SNAPSHOT
	</description>
	<comments>
		<comment id='1' author='marbon87' date='2016-02-13T07:10:15Z'>
		Fixed here: &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/pull/1140&gt;https://github.com/deeplearning4j/deeplearning4j/pull/1140&lt;/denchmark-link&gt;

Issue here was the combination of mask arrays and truncated bptt. The required subset of the mask arrays was not being extracted for each truncated bptt step (instead, network was attempting to use full length mask arrays).
		</comment>
		<comment id='2' author='marbon87' date='2019-01-21T10:37:36Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>