<bug id='8062' author='AlexDBlack' open_date='2019-07-30T05:38:46Z' closed_time='2019-08-01T13:07:08Z'>
	<summary>libnd4j: multiple CNN ops - std::exception</summary>
	<description>
Not sure what's up here. I've looked through max pooling 2d code, everything looks fine.
Shapes and input/output arrays look fine. (And this is pulled from something that I know used to work with exactly the same inputs/shapes).
&lt;denchmark-link:https://gist.github.com/AlexDBlack/366568ae453efcb75dbcbf6741e25ec4&gt;https://gist.github.com/AlexDBlack/366568ae453efcb75dbcbf6741e25ec4&lt;/denchmark-link&gt;

Either this is a bug, or I've missed the invalid arguments - and it's just a case of bad validation/error messages.
Whenever I execute maxpool2d op, I get this:
&lt;denchmark-code&gt;o.n.l.f.Nd4jBackend - Loaded [CpuBackend] backend
o.n.n.NativeOpsHolder - Number of threads used for NativeOps: 8
o.n.n.Nd4jBlas - Number of threads used for BLAS: 8
o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Windows 10]
o.n.l.a.o.e.DefaultOpExecutioner - Cores: [16]; Memory: [7.1GB];
o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
o.n.l.c.n.o.NativeOpExecutioner - Failed to execute op maxpool2d. Attempted to execute with 1 inputs, 1 outputs, 0 targs,0 bargs and 11 iargs. Inputs: [(FLOAT,[50,80,24,24],c)]. Outputs: [(FLOAT,[50,80,12,12],c)]. tArgs: -. iArgs: [2, 2, 2, 2, 0, 0, 1, 1, 1, 0, 0]. bArgs: -. Op own name: "66ff03c8-b0ad-443b-820a-f42160b4dc2c" - Please see above message (printed out from c++) for a possible cause of error.

java.lang.RuntimeException: Op [maxpool2d] execution failed

	at org.nd4j.linalg.cpu.nativecpu.ops.NativeOpExecutioner.exec(NativeOpExecutioner.java:1672)
	at org.nd4j.linalg.factory.Nd4j.exec(Nd4j.java:7786)
	at org.deeplearning4j.Temp.tempPool2d(Temp.java:103)
...
Caused by: java.lang.RuntimeException: std::exception
	at org.nd4j.nativeblas.Nd4jCpu.execCustomOp2(Native Method)
	at org.nd4j.linalg.cpu.nativecpu.ops.NativeOpExecutioner.exec(NativeOpExecutioner.java:2076)
	at org.nd4j.linalg.cpu.nativecpu.ops.NativeOpExecutioner.exec(NativeOpExecutioner.java:1664)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2019-07-30T09:55:37Z'>
		This is definitely new. I'm seeing it in a whole lot of tests in DL4J, such as multiple in DTypeTests, ConvolutionLayerTest, SubsamplingLayerTest, etc.
Also impacted: avgpool3dnew and batchnorm_new ops - similar sort of std::exception error with no additional information.
Perhaps this is somehow mkl-dnn related?
		</comment>
		<comment id='2' author='AlexDBlack' date='2019-07-31T02:43:03Z'>
		Working fine for me on CentOS 7 with these 2 tests added as part of  from the master branch at &lt;denchmark-link:https://github.com/SkymindIO/deeplearning4j/&gt;https://github.com/SkymindIO/deeplearning4j/&lt;/denchmark-link&gt;
:
&lt;denchmark-code&gt;$ mvn test -Ptestresources -Ptest-nd4j-native -Dtest=ValidateMKLDNN
...
Results :

Failed tests: 
  ValidateMKLDNN.validateConvSubsampling:158 Gradients are not equal: 0_W - highest relative error = 1.0 &gt; max relative error = 1.0E-5

Tests run: 5, Failures: 1, Errors: 0, Skipped: 1
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='AlexDBlack' date='2019-07-31T02:44:45Z'>
		nd4j-tests also seems to be mostly fine:
&lt;denchmark-code&gt;mvn test -Ptestresources -Pnd4j-tests-cpu
...
Results :

Failed tests:   testBatchToSpace[0: backend(org.nd4j.linalg.cpu.nativecpu.CpuBackend)={1}](org.nd4j.linalg.Nd4jTestsC): expected:&lt;[    1.0000,    3.0000,    4.0000]&gt; but was:&lt;[[[    0.2916,    0.3563,    0.7324,    0.5458,    0.4937], (..)
  testConv2d[0: backend(org.nd4j.linalg.cpu.nativecpu.CpuBackend)={1}](org.nd4j.autodiff.opvalidation.LayerOpValidation): [7 - upsampling2d, NCHW, 2x2 - [1, 3, 8, 8]] expected:&lt;0&gt; but was:&lt;1&gt;

Tests in error: 
  when_dataSetIs15wx10h_expect_3wx4hDataSet(org.nd4j.linalg.dataset.api.preprocessor.CropAndResizeDataSetPreProcessorTest): Op [crop_and_resize] execution failed

Tests run: 3602, Failures: 2, Errors: 1, Skipped: 164
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='AlexDBlack' date='2019-07-31T03:40:47Z'>
		Right, nd4j tests are fine for me (other than those you flagged, some already fixed on my branch)
DL4J tests are the problem here, and specifically only those that run with float precision. Anything running with double precision doesn't use conv2d op or MLKDNN
		</comment>
		<comment id='5' author='AlexDBlack' date='2019-07-31T03:49:51Z'>
		Still works fine after adding this before the test code:
        //Only run test if using nd4j-native backend
        assumeTrue(Nd4j.getBackend().getClass().getName().toLowerCase().contains("native"));
        Nd4j.setDefaultDataTypes(DataType.FLOAT, DataType.FLOAT);
        Nd4j.getRandom().setSeed(12345);
		</comment>
		<comment id='6' author='AlexDBlack' date='2019-07-31T03:51:58Z'>
		Also outputs a lot of stuff with export MKLDNN_VERBOSE=1, so it's definitively getting used.
		</comment>
		<comment id='7' author='AlexDBlack' date='2019-07-31T07:46:43Z'>
		And I get exactly the same results on Windows as well, so it's not something related to the OS...
		</comment>
		<comment id='8' author='AlexDBlack' date='2019-08-01T13:07:07Z'>
		Looks like this is no longer reproducible.
I didn't change anything on my end. I did rebuild between the last run and now, but I'm pretty sure I had already tried rebuilding to debug this.
Anyway - closing this. Will re-open if it crops up again.
		</comment>
	</comments>
</bug>