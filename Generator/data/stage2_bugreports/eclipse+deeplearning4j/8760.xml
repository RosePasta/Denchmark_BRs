<bug id='8760' author='AlexDBlack' open_date='2020-03-06T02:06:09Z' closed_time='2020-03-31T10:17:39Z'>
	<summary>libnd4j: sequence_mask op should zero mask 0 entries</summary>
	<description>
Tested on CPU backend.
&lt;denchmark-code&gt;    @Test
    public void testSeqMask(){
        INDArray arr = Nd4j.createFromArray(1,2,3);
        INDArray maxLen = Nd4j.scalar(4);

        INDArray out = Nd4j.create(DataType.INT32, 3, 4);
        out.assign(Integer.MAX_VALUE);

        Nd4j.exec(DynamicCustomOp.builder("sequence_mask")
                .addInputs(arr, maxLen)
                .addOutputs(out)
                .build()
        );

        INDArray exp = Nd4j.createFromArray(new int[][]{
                {1, 0, 0, 0},
                {1, 1, 0, 0},
                {1, 1, 1, 0}});

        assertEquals(exp, out);
    }
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/2360237/76043297-31eec780-5fab-11ea-9ebd-4386fc5ae506.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='AlexDBlack' date='2020-03-10T13:56:34Z'>
		That's easy fix, i.e. NDArray::nullify called on outputs. But it also overlaps with the other thing we're looking into now: general outputs nullification issue. Some ops do need nullified outputs, others - don't. So we need to draw a line, and nullify outputs in ops that require nullification, and do not nullify outputs in other ops. That will also improve Graph execution performance.
		</comment>
		<comment id='2' author='AlexDBlack' date='2020-03-31T10:17:38Z'>
		Confirmed fixed - thanks
		</comment>
	</comments>
</bug>