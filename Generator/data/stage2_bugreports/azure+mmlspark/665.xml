<bug id='665' author='telmoluismarques' open_date='2019-08-25T17:01:52Z' closed_time='2019-09-11T15:19:04Z'>
	<summary>Categorical features not being used correctly by the LightGBM classification model.</summary>
	<description>
Describe the bug
We are trying to migrate a setup of LightGBM running locally to MMLSpark. When running the final validations on a dataset we are familiar with we got some discrepancies in results between the local LightGBM model and the MMLSpark LightGBM model.
This seems to arise from the fact that MMLSpark is not using the categorical features  as categoricals for the model. These findings are based on:


If we retrain the local LightGBM model with the categorical (indexed) features as numericals the results match those of MMLSpark LightGBM Model


In the model trained locally we see num_cat &gt; 0 on each tree as seen below
Tree=199 num_leaves=50 num_cat=42 split_feature=190 29 207 87 200 228 200 201 228 201 224 201 199 225 224 199 199 13 217 225 199 217 228 224 224 203 31 226 157 225 228 228 201 6 225 224 259 228 259 224 228 201 203 224 203 228 203 228 224


In the MMLSpark model we see num_cat always equals to 0 on each tree as seen below
Tree=199 num_leaves=50 num_cat=0 split_feature=188 250 117 200 240 0 199 227 193 10 202 111 27 251 87 217 25 199 259 186 187 148 173 250 0 248 219 206 79 224 223 198 119 212 29 111 218 225 208 250 199 187 4 217 217 41 259 228 203


Nevertheless, when we open the LightGBM model file, trained with MMLSpark, we see that the categorical indexes are correctly populated in the model parameters as seen below
[categorical_feature: 198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259]


It seems that although the model is receiving the correct categorical indexes, it is not using those to train those features as categoricals, taking a toll on model performance.
To Reproduce


Loaded a csv dataset into a dataframe, this dataset consists of numerical features (doubles) and categorical features (integers, indexed)
dataset = spark.read.csv(filepath, header=True, inferSchema=True)


Create the Spark vectorAssembler


&lt;denchmark-code&gt;assembler = VectorAssembler(
    inputCols = numerical_features + categorical_list_indexed,
    outputCol="features",
    handleInvalid="skip")
&lt;/denchmark-code&gt;


Transform the initial dataset to produce the features vector

&lt;denchmark-code&gt;output = assembler.transform(dataset)
train = output.select("features", "label")
&lt;/denchmark-code&gt;


Create the LightGBMClassifier, fit the training set and save the model to HDFS

&lt;denchmark-code&gt;model = LightGBMClassifier(numLeaves=50, maxBin=50, learningRate=0.01, numIterations=200, categoricalSlotNames=categorical_list_indexed)

model_obj = model.fit(train)

model_obj.saveNativeModel('test_model')
&lt;/denchmark-code&gt;

After this we would evaluate the predictions and open the model file in disk where we had the findings presented on the bug description
Info (please complete the following information):

MMLSpark Version: v0.17
Spark Version 2.4.3
Running on a Cloudera cluster

	</description>
	<comments>
		<comment id='1' author='telmoluismarques' date='2019-08-25T17:01:54Z'>
		üëã Thanks for opening your first issue here! If you're reporting a üêû bug, please make sure you include steps to reproduce it.
		</comment>
		<comment id='2' author='telmoluismarques' date='2019-08-26T03:56:09Z'>
		&lt;denchmark-link:https://github.com/telmoluismarques&gt;@telmoluismarques&lt;/denchmark-link&gt;
 sorry about the trouble you are having, in the code above what is categorical_list_indexed?  If those are indexes make sure to use categoricalSlotIndexes instead of categoricalSlotNames.
		</comment>
		<comment id='3' author='telmoluismarques' date='2019-08-26T07:26:34Z'>
		categorical_list_indexed is a python list with the categorical feature names. We've validated those are being mapped correctly internally by LightGBM as the list of indexes that then shows up in the model .txt saved to disk, shown below, corresponds to the correct indexes in the feature vector:
[categorical_feature: 198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259]
We've also tried using categorical_list_indexed but got the same output/results
		</comment>
		<comment id='4' author='telmoluismarques' date='2019-08-29T18:18:41Z'>
		I had not noticed before, but I see the same problem when training LightGBMRanker models.
		</comment>
		<comment id='5' author='telmoluismarques' date='2019-09-11T05:06:52Z'>
		thanks &lt;denchmark-link:https://github.com/telmoluismarques&gt;@telmoluismarques&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/tyler-romero&gt;@tyler-romero&lt;/denchmark-link&gt;
 for reporting the issue, sent PR here:
&lt;denchmark-link:https://github.com/Azure/mmlspark/pull/685&gt;#685&lt;/denchmark-link&gt;

it looks like the categorical indexes need to be on the dataset instead of the booster parameters for lightgbm.  I've opened a doc defect for lightgbm repo as well to clear up which parameters belong where.
		</comment>
		<comment id='6' author='telmoluismarques' date='2019-09-11T15:20:06Z'>
		&lt;denchmark-link:https://github.com/telmoluismarques&gt;@telmoluismarques&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/tyler-romero&gt;@tyler-romero&lt;/denchmark-link&gt;
 closing as fix has been merged
&lt;denchmark-link:https://github.com/Azure/mmlspark/pull/685&gt;#685&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='telmoluismarques' date='2019-11-13T18:48:26Z'>
		Hi! Is this fix in the latest release? If not can you give me a version of the code with this fix?
		</comment>
	</comments>
</bug>