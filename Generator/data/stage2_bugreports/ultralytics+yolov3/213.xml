<bug id='213' author='LinSHP' open_date='2019-04-14T10:05:49Z' closed_time='2019-04-14T21:25:30Z'>
	<summary>Different default value in parser and function in test.py</summary>
	<description>
Describe the bug
I found the map, precision and recall is different using same weights for python train.py and python test.py.
I debug for a long time and find is that the default value for conf threshold if different in parser which is 0.001 and in function test which is 0.1. So it produce different results.
why?..
	</description>
	<comments>
		<comment id='1' author='LinSHP' date='2019-04-14T12:12:34Z'>
		&lt;denchmark-link:https://github.com/LinSHP&gt;@LinSHP&lt;/denchmark-link&gt;
 yes. This is not a bug, this is a feature we implemented on purpose to save time during training. Testing coco after each epoch would take almost 10 times longer at the lower confidence threshold, so we only use it when test.py is called directly to get the official mAPs you see in the README.
detect.py has its own seperate conf_thres also of 0.5. All of these values are by design.
		</comment>
		<comment id='2' author='LinSHP' date='2019-04-14T12:17:40Z'>
		Another option though would be to align the values in test.py at 0.001 and then pass the conf_thres=0.1 from train.py during testing after each epoch. This might be clearer?
		</comment>
		<comment id='3' author='LinSHP' date='2019-04-14T14:40:57Z'>
		
Another option though would be to align the values in test.py at 0.001 and then pass the conf_thres=0.1 from train.py during testing after each epoch. This might be clearer?

Ok, I understand now. Thanks for your explanation.
Yes, I think that will be clearer. Use default value 0.001 in test.py for both parser and function and pass the conf_thres value 0.1 in train.py will help to understand the intention you described.
thx again.
		</comment>
		<comment id='4' author='LinSHP' date='2019-04-14T21:25:30Z'>
		Yes, this is probably a good idea! I've placed this update in commit &lt;denchmark-link:https://github.com/ultralytics/yolov3/commit/3c6b168a0a3b799962bb06586e4c84e507af5c85&gt;3c6b168&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>