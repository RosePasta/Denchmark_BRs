<bug id='555' author='fromm1990' open_date='2019-10-14T13:33:22Z' closed_time='2019-10-25T17:31:56Z'>
	<summary>Mirrored images and image padding</summary>
	<description>
Hi, I'm trying to detect traffic signs using this great YOLOv3 implementation. However, I have stumbled upon something I would categorize a bug.
My pictures are fairly large (4000px * 3000px). I, therefore, tile the images to avoid downscaling the pictures (and thereby risking labels being 2px * 2px in some cases). Each tile will contain at least one sign and typically be 608 * 608 pixels.
The problem appears when i start training on these tiles/images. In commits from &lt;denchmark-link:https://github.com/ultralytics/yolov3/commit/cfc562c2c889cc7a4cb7e6c3b020ec6e36ce6bc4&gt;cfc562c&lt;/denchmark-link&gt;
 and older, some of the images will be mirrored. As seen in the picture below the two images in the first column is mirrored where the two pictures in the second column are unmodified. This is suboptimal for traffic sign detection, as some of the signs may mean something different when mirrored.
&lt;denchmark-link:https://user-images.githubusercontent.com/7311836/66754447-431d2780-ee96-11e9-889d-50248a3d9115.jpg&gt;&lt;/denchmark-link&gt;

Newer commits (from &lt;denchmark-link:https://github.com/ultralytics/yolov3/commit/88ba61505fa07b12b608f598ed9d2cf91ff872c2&gt;88ba615&lt;/denchmark-link&gt;
), however, are not only mirroring the images but are also padding them with other images found in the dataset. The bottom row of the below image are both mirrored and padded, where the first row is only padded.
&lt;denchmark-link:https://user-images.githubusercontent.com/7311836/66754781-07cf2880-ee97-11e9-8402-fbdd70824d59.jpg&gt;&lt;/denchmark-link&gt;

In case this is a feature rather than a bug, is there anyway to turn this behaviour off?
Thanks in advance.
	</description>
	<comments>
		<comment id='1' author='fromm1990' date='2019-10-14T16:49:01Z'>
		I have the same problems about that when I started training.
Thanks in advance, too.
&lt;denchmark-link:https://user-images.githubusercontent.com/41175965/66768360-fa408f80-eee4-11e9-8c65-bda1b44e16a9.jpg&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='fromm1990' date='2019-10-25T17:28:51Z'>
		&lt;denchmark-link:https://github.com/fromm1990&gt;@fromm1990&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/ykhsiao25&gt;@ykhsiao25&lt;/denchmark-link&gt;
 this is the correct default behavior. We call this a mosaic dataloader. It improves training results on COCO.
Our current results exceed darknet results in the two primary metrics, mAP@0.5 and mAP@0.5...0.95. See &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/310#issuecomment-546435541&gt;#310 (comment)&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='fromm1990' date='2019-10-25T17:31:23Z'>
		&lt;denchmark-link:https://github.com/fromm1990&gt;@fromm1990&lt;/denchmark-link&gt;
 you can disable left-right flips here:



yolov3/utils/datasets.py


        Lines 472 to 479
      in
      8d1ab54






 if self.augment: 



 # random left-right flip 



 lr_flip = True 



 if lr_flip and random.random() &lt; 0.5: 



 img = np.fliplr(img) 



 if nL: 



 labels[:, 1] = 1 - labels[:, 1] 



 





		</comment>
		<comment id='4' author='fromm1990' date='2020-03-31T06:32:26Z'>
		
Hi, I'm trying to detect traffic signs using this great YOLOv3 implementation. However, I have stumbled upon something I would categorize a bug.
My pictures are fairly large (4000px * 3000px). I, therefore, tile the images to avoid downscaling the pictures (and thereby risking labels being 2px * 2px in some cases). Each tile will contain at least one sign and typically be 608 * 608 pixels.
The problem appears when i start training on these tiles/images. In commits from cfc562c and older, some of the images will be mirrored. As seen in the picture below the two images in the first column is mirrored where the two pictures in the second column are unmodified. This is suboptimal for traffic sign detection, as some of the signs may mean something different when mirrored.

Newer commits (from 88ba615), however, are not only mirroring the images but are also padding them with other images found in the dataset. The bottom row of the below image are both mirrored and padded, where the first row is only padded.

In case this is a feature rather than a bug, is there anyway to turn this behaviour off?
Thanks in advance.

Can you share how you tile the images.  I am in the same situation.
		</comment>
		<comment id='5' author='fromm1990' date='2020-03-31T07:47:35Z'>
		Hi &lt;denchmark-link:https://github.com/robisen1&gt;@robisen1&lt;/denchmark-link&gt;
 a paper regarding this subject is available here &lt;denchmark-link:http://openaccess.thecvf.com/content_CVPRW_2019/papers/UAVision/Unel_The_Power_of_Tiling_for_Small_Object_Detection_CVPRW_2019_paper.pdf&gt;http://openaccess.thecvf.com/content_CVPRW_2019/papers/UAVision/Unel_The_Power_of_Tiling_for_Small_Object_Detection_CVPRW_2019_paper.pdf&lt;/denchmark-link&gt;

I personally tilled the images with a fixed width 608 x 608  e.g. If the tile intersected a label bbox i would expand the tile to include that label. This procedure is done until no label intersects the tile, then move to the next tile and perform the exact same procedure. The drawback of this approach is that you risk having large tiles on pictures with many labels, I did not so it worked for me.
During my experiment, I found that the tiling approach is outperforming the full-size approach only if you are willing to infer on tiled images. This results in longer processing time per full-size image as it is divided into several small images. The gain was not worth it in my case, but this would vary based on use case and domain, I would suspect.
Hope it helped, have a good one.
		</comment>
		<comment id='6' author='fromm1990' date='2020-03-31T17:47:23Z'>
		&lt;denchmark-link:https://github.com/robisen1&gt;@robisen1&lt;/denchmark-link&gt;
 this is called mosaic augmentation. You can disable this by running
python3 train.py --rect
&lt;denchmark-link:https://github.com/fromm1990&gt;@fromm1990&lt;/denchmark-link&gt;
 thanks for the article, interesting!
		</comment>
	</comments>
</bug>