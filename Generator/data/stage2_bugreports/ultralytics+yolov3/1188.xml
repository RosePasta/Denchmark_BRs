<bug id='1188' author='Chris7911' open_date='2020-05-18T05:49:23Z' closed_time='2020-06-03T06:59:12Z'>
	<summary>Multiple bounding boxes to detect the same object when using webcam or RTSP stream</summary>
	<description>
Before submitting a bug report, please ensure that you are using the latest versions of:

Python
PyTorch
This repository (run git fetch &amp;&amp; git status -uno to check and git pull to update)

Your issue must be reproducible on a public dataset (i.e COCO) using the latest version of the repository, and you must supply code to reproduce, or we can not help you.
If this is a custom training question we suggest you include your train*.jpg, test*.jpg and results.png figures.
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

In view-img, there is a bbox within previous one in a row, so it ends up with multiple bboxes to detect the same object when using webcam or RTSP stream. I'm pretty sure there is nothing wrong with iou-thres. Accordingly, this issue started after the commit &lt;denchmark-link:https://github.com/ultralytics/yolov3/commit/6daebd39798c593bf68a2a207d9f1e403aefb73a&gt;6daebd3&lt;/denchmark-link&gt;
 on Sep 25, 2019. It seems like something changed in the /utils/datasets.py.
&lt;denchmark-link:https://user-images.githubusercontent.com/26669367/82177830-3c173580-990d-11ea-944e-4bf68757a56e.JPG&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

REQUIRED: Code to reproduce your issue below
&lt;denchmark-code&gt;python detect.py --source 0
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

An object is only detected by a bounding box.
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;

Test1:

OS: [Ubuntu 18.04]
GPU [2080 Ti]

Test2:

OS: [Windows 10]
GPU [1080 Ti]

&lt;denchmark-h:h2&gt;Additional context&lt;/denchmark-h&gt;

Add any other context about the problem here.
	</description>
	<comments>
		<comment id='1' author='Chris7911' date='2020-05-18T05:49:59Z'>
		Hello &lt;denchmark-link:https://github.com/Chris7911&gt;@Chris7911&lt;/denchmark-link&gt;
, thank you for your interest in our work! Please visit our &lt;denchmark-link:https://github.com/ultralytics/yolov3/wiki/Train-Custom-Data&gt;Custom Training Tutorial&lt;/denchmark-link&gt;
 to get started, and see our &lt;denchmark-link:https://github.com/ultralytics/yolov3/blob/master/tutorial.ipynb&gt;Google Colab Notebook&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://hub.docker.com/r/ultralytics/yolov3&gt;Docker Image&lt;/denchmark-link&gt;
, and &lt;denchmark-link:https://github.com/ultralytics/yolov3/wiki/GCP-Quickstart&gt;GCP Quickstart Guide&lt;/denchmark-link&gt;
 for example environments.
If this is a bug report, please provide screenshots and minimum viable code to reproduce your issue, otherwise we can not help you.
		</comment>
		<comment id='2' author='Chris7911' date='2020-05-18T18:59:33Z'>
		&lt;denchmark-link:https://github.com/Chris7911&gt;@Chris7911&lt;/denchmark-link&gt;
 do these accumulate over multiple frames or does this happen in each frame?
		</comment>
		<comment id='3' author='Chris7911' date='2020-05-18T19:02:21Z'>
		If you run this command do you also see multiple boxes? This works correctly on MacOS, we do not have any local linux machines to test on unfortunately.
python3 detect.py --source http://112.50.243.8/PLTV/88888888/224/3221225900/1.m3u8
		</comment>
		<comment id='4' author='Chris7911' date='2020-05-19T11:20:34Z'>
		
If you run this command do you also see multiple boxes? This works correctly on MacOS, we do not have any local linux machines to test on unfortunately.
python3 detect.py --source http://112.50.243.8/PLTV/88888888/224/3221225900/1.m3u8

Running above command on my MacBook Pro works correctly most of the time, but if you pay attention to see the output, it sometimes shows up the problem I mentioned. After several tests, I found it running on MacOS works much much better than ubuntu 18.04 and Windows 10 in which accumulated boxes on the same object happen almost every second.
		</comment>
		<comment id='5' author='Chris7911' date='2020-05-19T11:39:49Z'>
		
@Chris7911 do these accumulate over multiple frames or does this happen in each frame?

It looks like boxes accumulate over multiple frames as shown below:
frame0:
&lt;denchmark-link:https://user-images.githubusercontent.com/26669367/82321868-1fabf380-9a08-11ea-84a4-f5b003e3f032.jpg&gt;&lt;/denchmark-link&gt;

frame1:
&lt;denchmark-link:https://user-images.githubusercontent.com/26669367/82321902-32262d00-9a08-11ea-8716-699d643d4cba.jpg&gt;&lt;/denchmark-link&gt;

frame2:
&lt;denchmark-link:https://user-images.githubusercontent.com/26669367/82321928-3d795880-9a08-11ea-8753-8f57235fda55.jpg&gt;&lt;/denchmark-link&gt;

Thank you for your help!!
		</comment>
		<comment id='6' author='Chris7911' date='2020-05-19T18:58:01Z'>
		&lt;denchmark-link:https://github.com/Chris7911&gt;@Chris7911&lt;/denchmark-link&gt;
 hmm, this seems to be OS specific then as it is not reproducible on macos.
We are extremely limited on resources so we can not look into this, but if you find the cause of the problem and implement a fix please submit a PR! I will leave this open.
		</comment>
		<comment id='7' author='Chris7911' date='2020-06-01T07:00:33Z'>
		
@Chris7911 hmm, this seems to be OS specific then as it is not reproducible on macos.
We are extremely limited on resources so we can not look into this, but if you find the cause of the problem and implement a fix please submit a PR! I will leave this open.

In the function "update" of the class "LoadStreams", we found that you read every 4th frame by tuning the variable n to "4" in order to fit the threads of streams to the thread of detection. Accordingly, since you said it seems to be OS specific, we changed the variable n from "4" to "2" to fix the problem on our Windows 10.
		</comment>
		<comment id='8' author='Chris7911' date='2020-06-02T09:38:55Z'>
		&lt;denchmark-link:https://github.com/glenn-jocher&gt;@glenn-jocher&lt;/denchmark-link&gt;
 Thank you for your incredible work!
I want to confirm the network behavior that &lt;denchmark-link:https://github.com/Chris7911&gt;@Chris7911&lt;/denchmark-link&gt;
  described. When outputting a video stream from a webcam, I get a huge number of bounding box for one object, which accumulate over several frames, then are reset and accumulate again.
OS: Ubuntu 18.04.4 LTS
I observe this kind of network behavior when using a webcam. Also, this behavior is observed when using the command you proposed for verification:

python3 detect.py --source http://112.50.243.8/PLTV/88888888/224/3221225900/1.m3u8

&lt;denchmark-link:https://user-images.githubusercontent.com/38979060/83504088-bda1c280-a4cc-11ea-9cbe-ea52a893ea71.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='Chris7911' date='2020-06-02T13:41:11Z'>
		Examining your project and the detect.py file, I found that to get frames from the video stream, you use the LoadStreams class from the datasets.py file.
Also in datasets.py a LoadWebcam class is implemented. However, I did not find a place in the code where it was used.
If change:
&lt;denchmark-code&gt;if webcam:
  view_img = True
  torch.backends.cudnn.benchmark = True  # set True to speed up constant image size inference
  dataset = LoadStreams(source, img_size=imgsz)
&lt;/denchmark-code&gt;

to:
&lt;denchmark-code&gt;if webcam:
  view_img = True
  torch.backends.cudnn.benchmark = True  # set True to speed up constant image size inference
  dataset = LoadWebcam(source, img_size=imgsz) 
&lt;/denchmark-code&gt;

and
&lt;denchmark-code&gt;        for i, det in enumerate(pred):  # detections for image i
            if webcam:  # batch_size &gt;= 1
                p, s, im0 = path[i], '%g: ' % i, im0s[0]
&lt;/denchmark-code&gt;

to:
&lt;denchmark-code&gt;        for i, det in enumerate(pred):  # detections for image i
            if webcam:  # batch_size &gt;= 1
                p, s, im0 = path[i], '%g: ' % i, im0s
&lt;/denchmark-code&gt;

I get the correct output as expected:
&lt;denchmark-link:https://user-images.githubusercontent.com/38979060/83525569-da9abd80-a4ed-11ea-9658-84b5e02198e6.png&gt;&lt;/denchmark-link&gt;

For my webcam, this fixes the situation. Although it seems that FPS is not the maximum.
However, for the HTTP stream, this change is critical, turning the video into a slide show.
An attempt to examine the LoadStreams class indicates that this might be threading.thread related. Is it possible that streams can layer information on each other when outputting to cv2?
Because the debugging of the detector shows the correct change in all data and images.
Unfortunately, I don‚Äôt understand well in threading, so I ask perhaps naive or stupid questions.
		</comment>
		<comment id='10' author='Chris7911' date='2020-06-02T18:18:26Z'>
		&lt;denchmark-link:https://github.com/droogg&gt;@droogg&lt;/denchmark-link&gt;
 yes, these are simply two different dataloaders. LoadWebcam() is single-thread, while LoadStreams() is multithreaded.
I ran the test code again:
python3 detect.py --source http://112.50.243.8/PLTV/88888888/224/3221225900/1.m3u8 
It normally works well, but when the stream freezes the boxes do begin to pile up, I'm not sure exactly why. It could be that inference is being run on a loop on older frames in the absence of updates.
LoadStreams() runs inference 100% of the time, irrespective of whether the batch contains new frames or not.
		</comment>
		<comment id='11' author='Chris7911' date='2020-06-03T06:33:29Z'>
		&lt;denchmark-link:https://github.com/glenn-jocher&gt;@glenn-jocher&lt;/denchmark-link&gt;
 Thank you very much for your quick and clear answer!
Yes, I understand what you are talking about. Also, your words about output on old frames have some meaning for me. Moreover, each new bounding box appears inside the old one, which indicates that the detector receives not the previous frame, but its modified version, on which the bounding box is already drawn using cv2.
The function plot_one_box changes the image itself, not its copy. Therefore, if we pass this function not the image itself, but a copy of it, and draw this copy, then the original will not be changed.
Indeed, if I change part of the code:
&lt;denchmark-code&gt;            if webcam:  # batch_size &gt;= 1
                p, s, im0 = path[i], '%g: ' % i, im0s[0]
&lt;/denchmark-code&gt;

to:
&lt;denchmark-code&gt;            if webcam:  # batch_size &gt;= 1
                p, s, im0 = path[i], '%g: ' % i, im0s[0].copy()
&lt;/denchmark-code&gt;

I get output as expected using the LoadStreams class and threads. This solves the output problem for me. Perhaps this will be useful for the project or people who are facing the same problem as me.
It is well known that threads are not an absolutely good solution in all cases. I also notice that the LoadWebcam class works much better on my webcam, and the LoadStreams class works better on the HTTP stream. With what it can be connected? And wouldn‚Äôt it be the best option to suggest the user to choose a method of loading a video stream?
		</comment>
		<comment id='12' author='Chris7911' date='2020-06-03T06:53:17Z'>
		&lt;denchmark-link:https://github.com/droogg&gt;@droogg&lt;/denchmark-link&gt;
 ah of course, that makes perfect sense! We are modifying the original, and then if it is not replaced, inference runs on the modified image, which also explains the reason the box shifts slightly each new frame. It keeps happening until the stream finally downloads a new frame.
About your last comment, theoretically the multithread solution should have a higher throuput capability, as it loads and preprocesses images in background threads rather than in the main thread, but yes as you see it adds complication as well so in some situations the simple loadwebcam() method is better.
		</comment>
	</comments>
</bug>