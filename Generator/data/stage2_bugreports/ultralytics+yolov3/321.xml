<bug id='321' author='marsggbo' open_date='2019-06-07T07:55:35Z' closed_time='2019-06-07T09:53:14Z'>
	<summary>how to plot the predicted anchor box?</summary>
	<description>
It seems that the code can only plot the ground truth anchor box. Where can I get the prediction (x, y, w, h)?
	</description>
	<comments>
		<comment id='1' author='marsggbo' date='2019-06-07T09:53:14Z'>
		&lt;denchmark-link:https://github.com/marsggbo&gt;@marsggbo&lt;/denchmark-link&gt;
 run detect.py to show predictions on images. Read the readme.
		</comment>
		<comment id='2' author='marsggbo' date='2019-06-07T12:58:21Z'>
		
@marsggbo run detect.py to show predictions on images. Read the readme.

Sorry, I didn't make it clear. I mean I want to plot the anchor box during the training procedure. Is it possible to do that?
		</comment>
		<comment id='3' author='marsggbo' date='2019-06-07T13:38:34Z'>
		&lt;denchmark-link:https://github.com/marsggbo&gt;@marsggbo&lt;/denchmark-link&gt;
 you can use the  function, though you may need to transform the predicted bounding box coordinates into the target box format:
For example in train.py this plots the target boxes:



yolov3/train.py


        Lines 206 to 209
      in
      d7a28bd






 # Plot images with bounding boxes 



 if epoch == 0 and i == 0: 



 plot_images(imgs=imgs, targets=targets, fname='train_batch0.jpg') 



 





		</comment>
		<comment id='4' author='marsggbo' date='2019-06-07T13:55:11Z'>
		Thanks, I've modified the code according to the utils.py as follows. Because I think the output (x, y) is just the shift relative to central point, I add gridx and gridy. Is there any error in the following codes?
In train.py:
def train():
           ...
            # Run model
            pred = model(imgs)  # list
            if epoch &lt;= 2 and i &lt;= 1:
                txy, twh, tcls, indices = build_targets(model, targets)
                for index, pi0 in enumerate(pred):  # layer i predictions, i
                    b, a, gj, gi = indices[index]  # image, anchor, gridy, gridx
                    if len(b):  # number of targets
                        pi = pi0[b, a, gj, gi]  # n*105
                        float_gi, float_gj = gi.float()/(2**index*13), gj.float()/(2**index*13)
                        pi[:, 0] += float_gi # x
                        pi[:, 1] += float_gj # y
                        plot_pred_images(imgs=imgs, pred=pi, fname=f'pred_train_batch{i}_{index}.jpg')
utils.py
def plot_pred_images(imgs, pred, fname='pred_images.jpg'):
    # Plots training images overlaid with pred
    imgs = imgs.cpu().numpy()
    pred = pred.detach().cpu().numpy()

    fig = plt.figure(figsize=(10, 10))
    bs, _, h, w = imgs.shape  # batch size, _, height, width
    ns = np.ceil(bs ** 0.5)  # number of subplots

    for i in range(bs):
        boxes = xywh2xyxy(pred).T
        boxes[[0, 2]] *= w
        boxes[[1, 3]] *= h
        plt.subplot(ns, ns, i + 1).imshow(imgs[i].transpose(1, 2, 0))
        plt.plot(boxes[[0, 2, 2, 0, 0]], boxes[[1, 1, 3, 3, 1]], '.-')
        plt.axis('off')
    fig.tight_layout()
    fig.savefig(fname, dpi=300)
    plt.close()
		</comment>
	</comments>
</bug>