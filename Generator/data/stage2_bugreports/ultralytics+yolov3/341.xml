<bug id='341' author='rlewkowicz' open_date='2019-06-20T20:19:19Z' closed_time='2019-06-20T22:17:18Z'>
	<summary>What does "normalized xywh" mean?</summary>
	<description>
I use Microsoft VoTT to do my image annotation and their V2 product is amazing. I can't live without it now. The only real export they provide though is Pascal VOC format which is that xml style format. There's converters out there, but they either don't work at all or are just wrong in some cases. If I was taking a format like:
&lt;denchmark-code&gt;    &lt;bndbox&gt;
        &lt;xmin&gt;814.3226424126376&lt;/xmin&gt;
        &lt;ymin&gt;376.42021276595744&lt;/ymin&gt;
        &lt;xmax&gt;941.1584490186692&lt;/xmax&gt;
        &lt;ymax&gt;455.46702127659574&lt;/ymax&gt;
    &lt;/bndbox&gt;

&lt;/denchmark-code&gt;

And try to "Normalize" that, what does that mean?
	</description>
	<comments>
		<comment id='1' author='rlewkowicz' date='2019-06-20T22:16:41Z'>
		Alright, so I'm leaving this here, but at somepoint I really should just build an actual toolchain because there's not a good one out there. I stole most of this from the darknet repo.
&lt;denchmark-code&gt;import xml.etree.ElementTree as ET
import pickle
import os
from os import listdir, getcwd
from os.path import isfile, join
from pathlib import Path
import re

classes = ["doot"]

#This should just be a folder of xmls
annotations = "/home/ryan/Repos/newanno/thedoots/Annotations"
#Then you have a folder of txts.
modified_annotations = "/home/ryan/Repos/newanno/thedoots/converted_labels"

def convert(size, box):
    dw = 1./(size[0])
    dh = 1./(size[1])
    x = (box[0] + box[1])/2.0 - 1
    y = (box[2] + box[3])/2.0 - 1
    w = box[1] - box[0]
    h = box[3] - box[2]
    x = x*dw
    w = w*dw
    y = y*dh
    h = h*dh
    return (x,y,w,h)

def convert_annotation():

    filepaths=[]
    for f in listdir(annotations):
        filepaths.append(join(annotations, f))

    for filepath in filepaths:
        txtpath = join(modified_annotations,re.sub(r"\.xml$", ".txt", os.path.basename(filepath)))
    
        in_file = open(filepath, 'r')
        Path(txtpath).touch()
        out_file = open(txtpath, 'w')
        
        tree=ET.parse(in_file)
        root = tree.getroot()
        size = root.find('size')
        w = int(size.find('width').text)
        h = int(size.find('height').text)

        for obj in root.iter('object'):
            difficult = obj.find('difficult').text
            cls = obj.find('name').text
            if cls not in classes or int(difficult)==1:
                continue
            cls_id = classes.index(cls)
            xmlbox = obj.find('bndbox')
            b = (float(xmlbox.find('xmin').text), float(xmlbox.find('xmax').text), float(xmlbox.find('ymin').text), float(xmlbox.find('ymax').text))
            bb = convert((w,h), b)
            out_file.write(str(cls_id) + " " + " ".join([str(a) for a in bb]) + '\n')

convert_annotation()
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='rlewkowicz' date='2019-06-21T09:03:47Z'>
		Great! You can examine train_batch0.jpg and test_batch0.jpg to check your bounding boxes on your training and testing data (once you start training).
		</comment>
		<comment id='3' author='rlewkowicz' date='2019-07-09T15:12:26Z'>
		&lt;denchmark-link:https://github.com/glenn-jocher&gt;@glenn-jocher&lt;/denchmark-link&gt;
 why did you give us one exactly example about "normalized xywh "
		</comment>
		<comment id='4' author='rlewkowicz' date='2019-07-11T17:34:45Z'>
		&lt;denchmark-link:https://github.com/Ai-is-light&gt;@Ai-is-light&lt;/denchmark-link&gt;
 normalized means the range of the values is between 0 and 1.
xywh means x and y centers of the objects and the widths w and heights h.
		</comment>
		<comment id='5' author='rlewkowicz' date='2020-01-21T02:15:21Z'>
		x = (box[0] + box[1])/2.0 - 1  &amp;  y = (box[2] + box[3])/2.0 - 1
why x &amp; y (center) values have to minus 1?
		</comment>
		<comment id='6' author='rlewkowicz' date='2020-10-06T09:16:05Z'>
		&lt;denchmark-link:https://github.com/yoga-0125&gt;@yoga-0125&lt;/denchmark-link&gt;

I have the same question about this.
Do you solve this problem?
		</comment>
		<comment id='7' author='rlewkowicz' date='2020-10-06T09:51:42Z'>
		&lt;denchmark-link:https://github.com/yoga-0125&gt;@yoga-0125&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/whale-yf&gt;@whale-yf&lt;/denchmark-link&gt;
 see &lt;denchmark-link:https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data#2-create-labels&gt;https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data#2-create-labels&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='rlewkowicz' date='2020-10-06T09:52:36Z'>
		&lt;denchmark-link:https://user-images.githubusercontent.com/26833433/95186511-5bcecd80-07ca-11eb-911a-9e6aa5d137e2.jpg&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='rlewkowicz' date='2020-10-06T10:32:56Z'>
		&lt;denchmark-link:https://github.com/glenn-jocher&gt;@glenn-jocher&lt;/denchmark-link&gt;

Thanks for sharing.
I understand the reason why xywh should be normalized, but i got different answers from google

x = (box[0] + box[1])/2.0 &amp; y = (box[2] + box[3])/2.0
x = (box[0] + box[1])/2.0 - 1  &amp; y = (box[2] + box[3])/2.0 -1
I have known where the (x,y) here equal to the center of box, why the center values should be minus 1?

		</comment>
		<comment id='10' author='rlewkowicz' date='2020-10-06T11:40:25Z'>
		&lt;denchmark-link:https://github.com/whale-yf&gt;@whale-yf&lt;/denchmark-link&gt;
 I have nothing to add other than the info I've provided above.
		</comment>
		<comment id='11' author='rlewkowicz' date='2020-10-06T13:09:53Z'>
		Thanks :)
		</comment>
	</comments>
</bug>