<bug id='1037' author='scaramouche88' open_date='2020-04-10T15:44:11Z' closed_time='2020-04-10T19:07:57Z'>
	<summary>Bug/question about multichannel imagery</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

My dataset are 4-dimentional .tiff files. On each channels I have different physical informations (not the RGB channels of a classic image). I'm trying to adapt this repo, but it seems that the keyword [channels] in the .cfg file do not works properly. Or I am doing something wrong, but what?
(and btw great repo! well written and well benchmarked!)
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

Steps to reproduce the behavior:

set [channels] = 4 in the .cfg
since I don't need HSV augmentation, change hyper in train.py to hsv_h: 0.00; hsv_s: 1.0, hsv_v: 1.0
I need to load data as they are, so I add the flag
img = cv2.imread(img_path,cv2.IMREAD_UNCHANGED) at line



yolov3/utils/datasets.py


         Line 506
      in
      b98ce11






 img = cv2.imread(img_path)  # BGR 





the function load_mosaic works only with 3 channels images, so I change to 4 the shape of img4 at line: 


yolov3/utils/datasets.py


         Line 531
      in
      b98ce11






 img4 = np.full((s * 2, s * 2, 3), 114, dtype=np.uint8)  # base image with 4 tiles 





With such changes I have the following error at the first epoch:
/torch/nn/modules/conv.py", line 342, in conv2d_forward self.padding, self.dilation, self.groups) RuntimeError: Given groups=1, weight of size 32 3 3 3, expected input[32, 4, 416, 416] to have 3 channels, but got 4 channels instead 

Desktop (please complete the following information):

OS: Ubuntu 18.04

	</description>
	<comments>
		<comment id='1' author='scaramouche88' date='2020-04-10T15:44:49Z'>
		Hello &lt;denchmark-link:https://github.com/scaramouche88&gt;@scaramouche88&lt;/denchmark-link&gt;
, thank you for your interest in our work! Please visit our &lt;denchmark-link:https://github.com/ultralytics/yolov3/wiki/Train-Custom-Data&gt;Custom Training Tutorial&lt;/denchmark-link&gt;
 to get started, and see our &lt;denchmark-link:https://colab.research.google.com/drive/1G8T-VFxQkjDe4idzN8F-hbIBqkkkQnxw&gt;Google Colab Notebook&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://hub.docker.com/r/ultralytics/yolov3&gt;Docker Image&lt;/denchmark-link&gt;
, and &lt;denchmark-link:https://github.com/ultralytics/yolov3/wiki/GCP-Quickstart&gt;GCP Quickstart Guide&lt;/denchmark-link&gt;
 for example environments.
If this is a bug report, please provide screenshots and minimum viable code to reproduce your issue, otherwise we can not help you.
		</comment>
		<comment id='2' author='scaramouche88' date='2020-04-10T18:00:42Z'>
		&lt;denchmark-link:https://github.com/scaramouche88&gt;@scaramouche88&lt;/denchmark-link&gt;
 that's close. We don't have this parameterized since 99% of the use cases are RGB images. Do this instead:


Set all HSV hyperparameters to 0 if you want to disable them completely. 1.0 means up to 100% variation.


Your dataloader changes look good.


Set the input channels here. We do not actually use any of the cfg parameters in the header, just the model architecture after the header.



yolov3/models.py


         Line 13
      in
      b98ce11






 output_filters = [3]  # input channels 







		</comment>
		<comment id='3' author='scaramouche88' date='2020-04-10T19:07:57Z'>
		&lt;denchmark-link:https://github.com/glenn-jocher&gt;@glenn-jocher&lt;/denchmark-link&gt;
 works like a charm, thanks a lot!
(At least the training has started...  the results we will see, but it's a different topic)
If I have other issues on this topic I will come back here, but I close for now.
		</comment>
		<comment id='4' author='scaramouche88' date='2020-04-10T20:02:46Z'>
		&lt;denchmark-link:https://github.com/scaramouche88&gt;@scaramouche88&lt;/denchmark-link&gt;
 great! I should probably make a quick tutorial for this in the future. One problem is black and white probably needs different changes than 4 channel.
Maybe at least I can update the mosaic builder to compute the channels every time it runs rather than defaulting to 3.
		</comment>
		<comment id='5' author='scaramouche88' date='2020-04-10T23:30:13Z'>
		mosaic loader now automatically resizes based on image channels in &lt;denchmark-link:https://github.com/ultralytics/yolov3/commit/aa8b1098dd4a3776e2f3ce588d7047932f2f7d74&gt;aa8b109&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='scaramouche88' date='2020-07-18T16:13:22Z'>
		Hi &lt;denchmark-link:https://github.com/glenn-jocher&gt;@glenn-jocher&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/scaramouche88&gt;@scaramouche88&lt;/denchmark-link&gt;
 I try to load 4 channel images by combining a RGB image + an infrared image. I have followed the steps above. What I did is:

Change output filters to be 4 at model.py
Add functions to load IR images

&lt;denchmark-code&gt;def load_image_ir(self, index):
    img = self.imgs[index]
    if img is None:
        path = self.img_files_ir[index]
        img = cv2.imread(path, cv2.IMREAD_UNCHANGED) #reading grayscale
        assert img is not None, 'Image Not Found ' + path
        h0, w0 = img.shape[:]  # orig hw #only 2 values, since grayscale
        r = self.img_size / max(h0, w0)  # resize image to img_size
        if r != 1:  # always resize down, only resize up if training with augmentation
            interp = cv2.INTER_AREA if r &lt; 1 and not self.augment else cv2.INTER_LINEAR
            img = cv2.resize(img, (int(w0 * r), int(h0 * r)), interpolation=interp)
            print(f"Image after resize {img.shape}")
        return img, (h0, w0), img.shape[:2]  # img, hw_original, hw_resized
    else:
        return self.imgs[index], self.img_hw0[index], self.img_hw[index]  # img, hw_original, hw_resized
&lt;/denchmark-code&gt;

For the above part, I refer to  load_image function at LoadImagesAndLabels class. I only changed how to read the grayscale or 1 channel image using  img = cv2.imread(path, cv2.IMREAD_UNCHANGED). Also, since this is 4 channels, the image shape has only 2 values, so I change h0,w0 = img.shape[:].

In the def__getitem__(self, index) I add these lines:

&lt;denchmark-code&gt; # Load image
img_rgb, (h0, w0), (h, w) = load_image(self, index) #rgb
img_ir, (h0_ir, w0_ir), (h_ir, w_ir) = load_image_ir(self, index) #ir

#split rgb
b, g, r = cv2.split(img_rgb)
img = cv2.merge((img_rgb, img_ir)) #combine the channel
&lt;/denchmark-code&gt;

However, I still got this error:
RuntimeError: Given groups=1, weight of size [32, 4, 3, 3], expected input[2, 3, 512, 512] to have 4 channels, but got 3 channels instead
Any other lines I should change? Is this because of this line so the image always becomes 3 channels?



yolov3/utils/datasets.py


         Line 514
      in
      8241bf6






 img = img[:, :, ::-1].transpose(2, 0, 1)  # BGR to RGB, to 3x416x416 





		</comment>
		<comment id='7' author='scaramouche88' date='2020-07-18T18:02:14Z'>
		&lt;denchmark-link:https://github.com/jas-nat&gt;@jas-nat&lt;/denchmark-link&gt;
 I'd recommend &lt;denchmark-link:https://github.com/ultralytics/yolov5&gt;https://github.com/ultralytics/yolov5&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>