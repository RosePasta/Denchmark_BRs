<bug id='1368' author='winnerCR7' open_date='2020-07-03T07:55:24Z' closed_time='2020-08-08T00:24:21Z'>
	<summary>After interrupting training, load weights/last.pt to continue training</summary>
	<description>
I stopped after training 95 epochs. I entered python train.py --batch-size 16 --img-size 416 --weights weights/last.pt --data data/bdd100k/bdd100k.data --cfg cfg/yolov3-spp-bdd100k.cfg in the terminal to continue training, and after running a epoch on training set, I reported this error, but I can normally continue training in VScode using the same args. Why is this?
BTW, after resuming training, how should the training record of TensorBoard be restored? I opened the URL and found that it was always the training record before the training was interrupted, it does not seem to be updated.
Namespace(adam=False, batch_size=16, bucket='', cache_images=False, cfg='cfg/yolov3-spp-bdd100k.cfg', data='data/bdd100k/bdd100k.data', device='', epochs=300, evolve=False, freeze_layers=False, img_size=[416], multi_scale=False, name='', nosave=False, notest=False, rect=False, resume=False, single_cls=False, weights='weights/last.pt')
Using CUDA Apex device0 _CudaDeviceProperties(name='GeForce RTX 2070', total_memory=7979MB)
device1 _CudaDeviceProperties(name='GeForce GTX 1060 6GB', total_memory=6078MB)
Start Tensorboard with "tensorboard --logdir=runs", view at &lt;denchmark-link:http://localhost:6006/&gt;http://localhost:6006/&lt;/denchmark-link&gt;

Model Summary: 225 layers, 6.26218e+07 parameters, 6.26218e+07 gradients
Optimizer groups: 76 .bias, 76 Conv2d.weight, 73 other
Caching labels data/bdd100k/labels/train.npy (69863 found, 0 missing, 0 empty, 1 duplicate, for 69863 images): 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 69863/69863 [00:02&lt;00:00, 26837.25it/s]
Caching labels data/bdd100k/labels/val.npy (10000 found, 0 missing, 0 empty, 0 duplicate, for 10000 images): 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 10000/10000 [00:00&lt;00:00, 26744.37it/s]
Image sizes 416 - 416 train, 416 test
Using 8 dataloader workers
Starting training for 300 epochs...
&lt;denchmark-code&gt; Epoch   gpu_mem      GIoU       obj       cls     total   targets  img_size
96/299     4.62G      1.88      1.16     0.383      3.42       329       416: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉| 4366/4367 [23:23&lt;00:00,  3.17it/s]Traceback (most recent call last):
&lt;/denchmark-code&gt;

File "train.py", line 497, in 
train(hyp)  # train normally
File "train.py", line 322, in train
scaled_loss.backward()
File "/home/cr7/anaconda3/lib/python3.7/site-packages/torch/tensor.py", line 198, in backward
torch.autograd.backward(self, gradient, retain_graph, create_graph)
File "/home/cr7/anaconda3/lib/python3.7/site-packages/torch/autograd/.py", line 100, in backward
allow_unreachable=True)  # allow_unreachable flag
RuntimeError: CUDA out of memory. Tried to allocate 1.56 GiB (GPU 0; 7.79 GiB total capacity; 2.27 GiB already allocated; 1.57 GiB free; 4.26 GiB reserved in total by PyTorch) (malloc at /opt/conda/conda-bld/pytorch_1591914880026/work/c10/cuda/CUDACachingAllocator.cpp:289)
frame #0: c10::Error::Error(c10::SourceLocation, std::string const&amp;) + 0x4e (0x7f1a3129ab5e in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libc10.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/1&gt;#1&lt;/denchmark-link&gt;
:  + 0x1f39d (0x7f1a314e639d in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libc10_cuda.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/2&gt;#2&lt;/denchmark-link&gt;
: c10::cuda::CUDACachingAllocator::raw_alloc(unsigned long) + 0x5b (0x7f1a314e098b in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libc10_cuda.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/3&gt;#3&lt;/denchmark-link&gt;
:  + 0xd767c6 (0x7f1a3246a7c6 in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cuda.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/4&gt;#4&lt;/denchmark-link&gt;
:  + 0xd7af6d (0x7f1a3246ef6d in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cuda.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/5&gt;#5&lt;/denchmark-link&gt;
:  + 0xd6dc9a (0x7f1a32461c9a in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cuda.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/6&gt;#6&lt;/denchmark-link&gt;
:  + 0xd6f07f (0x7f1a3246307f in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cuda.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/7&gt;#7&lt;/denchmark-link&gt;
:  + 0xd72cd0 (0x7f1a32466cd0 in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cuda.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/8&gt;#8&lt;/denchmark-link&gt;
: at::native::cudnn_convolution_backward_weight(c10::ArrayRef, at::Tensor const&amp;, at::Tensor const&amp;, c10::ArrayRef, c10::ArrayRef, c10::ArrayRef, long, bool, bool) + 0x49 (0x7f1a32466f29 in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cuda.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/9&gt;#9&lt;/denchmark-link&gt;
:  + 0xdd9880 (0x7f1a324cd880 in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cuda.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/10&gt;#10&lt;/denchmark-link&gt;
:  + 0xe1daf8 (0x7f1a32511af8 in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cuda.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/11&gt;#11&lt;/denchmark-link&gt;
: at::native::cudnn_convolution_backward(at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, c10::ArrayRef, c10::ArrayRef, c10::ArrayRef, long, bool, bool, std::array&lt;bool, 2ul&gt;) + 0x2fc (0x7f1a32467bdc in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cuda.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/12&gt;#12&lt;/denchmark-link&gt;
:  + 0xdd958b (0x7f1a324cd58b in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cuda.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/13&gt;#13&lt;/denchmark-link&gt;
:  + 0xe1db54 (0x7f1a32511b54 in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cuda.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/14&gt;#14&lt;/denchmark-link&gt;
:  + 0x29dee26 (0x7f1a5b288e26 in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cpu.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/15&gt;#15&lt;/denchmark-link&gt;
:  + 0x2a2e634 (0x7f1a5b2d8634 in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cpu.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/16&gt;#16&lt;/denchmark-link&gt;
: torch::autograd::generated::CudnnConvolutionBackward::apply(std::vector&lt;at::Tensor, std::allocatorat::Tensor &gt;&amp;&amp;) + 0x378 (0x7f1a5aea0ff8 in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cpu.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/17&gt;#17&lt;/denchmark-link&gt;
:  + 0x2ae7df5 (0x7f1a5b391df5 in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cpu.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/18&gt;#18&lt;/denchmark-link&gt;
: torch::autograd::Engine::evaluate_function(std::shared_ptrtorch::autograd::GraphTask&amp;, torch::autograd::Node*, torch::autograd::InputBuffer&amp;) + 0x16f3 (0x7f1a5b38f0f3 in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cpu.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/19&gt;#19&lt;/denchmark-link&gt;
: torch::autograd::Engine::thread_main(std::shared_ptrtorch::autograd::GraphTask const&amp;, bool) + 0x3d2 (0x7f1a5b38fed2 in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cpu.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/20&gt;#20&lt;/denchmark-link&gt;
: torch::autograd::Engine::thread_init(int) + 0x39 (0x7f1a5b388549 in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_cpu.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/21&gt;#21&lt;/denchmark-link&gt;
: torch::autograd::python::PythonEngine::thread_init(int) + 0x38 (0x7f1a5e8d8638 in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/libtorch_python.so)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/22&gt;#22&lt;/denchmark-link&gt;
:  + 0xc819d (0x7f1a613f919d in /home/cr7/anaconda3/lib/python3.7/site-packages/torch/lib/../../../.././libstdc++.so.6)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/23&gt;#23&lt;/denchmark-link&gt;
:  + 0x76db (0x7f1a7a1d86db in /lib/x86_64-linux-gnu/libpthread.so.0)
frame &lt;denchmark-link:https://github.com/ultralytics/yolov3/issues/24&gt;#24&lt;/denchmark-link&gt;
: clone + 0x3f (0x7f1a79f0188f in /lib/x86_64-linux-gnu/libc.so.6)
	</description>
	<comments>
		<comment id='1' author='winnerCR7' date='2020-07-03T07:56:05Z'>
		Hello &lt;denchmark-link:https://github.com/winnerCR7&gt;@winnerCR7&lt;/denchmark-link&gt;
, thank you for your interest in our work! Ultralytics has open-sourced YOLOv5 at &lt;denchmark-link:https://github.com/ultralytics/yolov5&gt;https://github.com/ultralytics/yolov5&lt;/denchmark-link&gt;
, featuring faster, lighter and more accurate object detection. YOLOv5 is recommended for all new projects.


&lt;denchmark-link:https://user-images.githubusercontent.com/26833433/85340570-30360a80-b49b-11ea-87cf-bdf33d53ae15.png&gt;&lt;/denchmark-link&gt;

To continue with this repo, please visit our &lt;denchmark-link:https://github.com/ultralytics/yolov3/wiki/Train-Custom-Data&gt;Custom Training Tutorial&lt;/denchmark-link&gt;
 to get started, and see our &lt;denchmark-link:https://github.com/ultralytics/yolov3/blob/master/tutorial.ipynb&gt;Google Colab Notebook&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://hub.docker.com/r/ultralytics/yolov3&gt;Docker Image&lt;/denchmark-link&gt;
, and &lt;denchmark-link:https://github.com/ultralytics/yolov3/wiki/GCP-Quickstart&gt;GCP Quickstart Guide&lt;/denchmark-link&gt;
 for example environments.
If this is a bug report, please provide screenshots and minimum viable code to reproduce your issue, otherwise we can not help you.
If this is a custom model or data training question, please note that Ultralytics does not provide free personal support. As a leader in vision ML and AI, we do offer professional consulting, from simple expert advice up to delivery of fully customized, end-to-end production solutions for our clients, such as:

Cloud-based AI systems operating on hundreds of HD video streams in realtime.
Edge AI integrated into custom iOS and Android apps for realtime 30 FPS video inference.
Custom data training, hyperparameter evolution, and model exportation to any destination.

For more information please visit &lt;denchmark-link:https://www.ultralytics.com&gt;https://www.ultralytics.com&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='winnerCR7' date='2020-08-03T00:24:00Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
	</comments>
</bug>