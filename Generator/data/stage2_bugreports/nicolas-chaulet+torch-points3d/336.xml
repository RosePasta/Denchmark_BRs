<bug id='336' author='Tieftaucher' open_date='2020-07-10T09:38:54Z' closed_time='2020-09-25T08:48:32Z'>
	<summary>Batchnorm with DENSE conv_type</summary>
	<description>
Hi,
Thank you for the awesome library =)
I'm trying to use it to run a PointNet as a regression network together with pytorch lightning. At the moment I'm stuck and would appreciate help.
My problem is, that I get the format SimpleBatch(pos=[8, 500, 3], rgb=[8, 500, 3], y=[8, 500]) for my batch objects (at the moment creating the data with torch_points3d.datasets.segmentation.scannet., later I want to use my own data)
When I now try to use MLP([3, 64, 128, 1024]), the linear layer outputs objects of shape torch.Size([8, 500, 64]) (as expected)
But the Batchnormlization in MLP expects the format [8,64,500].
When I look in the documentation of torch Batchnorm, it also says, that the channel must be on the second position.
I get the error message:
&lt;denchmark-code&gt;.....
    result = self.forward(*input, **kwargs)
  File "/work/scratch/laube/miniconda3/envs/embryoalignment/lib/python3.7/site-packages/torch/nn/modules/batchnorm.py", line 108, in forward
    exponential_average_factor, self.eps)
  File "/work/scratch/laube/miniconda3/envs/embryoalignment/lib/python3.7/site-packages/torch/nn/functional.py", line 1924, in batch_norm
    training, momentum, eps, torch.backends.cudnn.enabled
RuntimeError: running_mean should contain 500 elements not 64
&lt;/denchmark-code&gt;

I can't imagine this to be a bug in the library, but I'm not sure what I do wrong either.
Minimal example for error:
&lt;denchmark-code&gt;import os
import torch
from torch_points3d.datasets.segmentation.scannet import ScannetDataset
import pytorch_lightning as pl
from pytorch_lightning import loggers
from torch_points3d.models.segmentation.pointnet import PointNetSeg, PointNet
import torch_points3d
from omegaconf import OmegaConf

wrappedDataset = ScannetDataset(OmegaConf.create({'dataroot': 'datasets', 'version': 'v1', 'conv_type': 'DENSE', 'train_transform': [OmegaConf.create({'transform': 'FixedPoints', 'params': {'num': 500}})]}))

class EnzymeModel(pl.LightningModule):
    def __init__(self):
        super(EnzymeModel, self).__init__()

        self.pointNet = PointNet(OmegaConf.create({'conv_type': 'DENSE', 'batch_size': 8}), 'classification', wrappedDataset, None)

    def forward(self, data ):
        self.pointNet.set_input(data, 'cuda')
        return self.pointNet()


    def training_step(self, data, data_btn):
        print(data)
        out = self(data)       
        tensorboard_logs = {'train_loss': 1}
        return {'loss': 1, 'log': tensorboard_logs}

    def transfer_batch_to_device(self,batch, device):
        return batch.to(device)

    def train_dataloader(self):
        wrappedDataset.create_dataloaders(batch_size=8, model=self.pointNet, shuffle=False, num_workers=1, precompute_multi_scale=False)
        return wrappedDataset.train_dataloader

    def configure_optimizers(self):
        return torch.optim.Adam(self.parameters(), lr=0.02)



enzyme_model = EnzymeModel()

tb_logger = loggers.TensorBoardLogger(save_dir='logs')
trainer = pl.Trainer(gpus=1, progress_bar_refresh_rate=20, max_epochs=200, logger=tb_logger)    
trainer.fit(enzyme_model)
&lt;/denchmark-code&gt;

Thank you for your time =)
	</description>
	<comments>
		<comment id='1' author='Tieftaucher' date='2020-07-13T10:42:57Z'>
		Hey! Looks like a bug in our PointNet. Not sure what is happening though...
		</comment>
		<comment id='2' author='Tieftaucher' date='2020-08-12T19:37:10Z'>
		Dear &lt;denchmark-link:https://github.com/Tieftaucher&gt;@Tieftaucher&lt;/denchmark-link&gt;
,
Sorry for the late due update on this issue. I have opened a PR with fixed associated to "DENSE" format.
PR: &lt;denchmark-link:https://github.com/nicolas-chaulet/torch-points3d/pull/406/files&gt;https://github.com/nicolas-chaulet/torch-points3d/pull/406/files&lt;/denchmark-link&gt;

And here you can find an example: &lt;denchmark-link:https://github.com/nicolas-chaulet/torch-points3d/blob/acf2ce7498115aef975478465571b423f13e0d19/examples/pointnet_segmentation_forward.py&gt;https://github.com/nicolas-chaulet/torch-points3d/blob/acf2ce7498115aef975478465571b423f13e0d19/examples/pointnet_segmentation_forward.py&lt;/denchmark-link&gt;

I will open a second PR with a PointNet API class.
Best regards,
T.C
		</comment>
	</comments>
</bug>