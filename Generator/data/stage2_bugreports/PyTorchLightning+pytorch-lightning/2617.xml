<bug id='2617' author='feiwofeifeixiaowo' open_date='2020-07-15T17:26:53Z' closed_time='2020-07-16T12:35:30Z'>
	<summary>resume_from_checkpoint got RuntimeError: Error(s) in loading state_dict for EfficientNet: 	Unexpected key(s) in state_dict: "criterion.pos_weight".</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;To Reproduce&lt;/denchmark-h&gt;

Steps to reproduce the behavior:

train efficient net with pos_weight

&lt;denchmark-code&gt;    def get_criterion(self):
        if not hasattr(self, 'criterion'):
            pos_weight = 3.2
            self.criterion = torch.nn.BCEWithLogitsLoss(pos_weight=torch.tensor(pos_weight))
        return self.criterion
&lt;/denchmark-code&gt;


save weight with pl chpt callback

checkpoint_callback = pl.callbacks.ModelCheckpoint(filepath='../chkpt/-{epoch:02d}-{avg_val_auc:.4f}', prefix=hparams.model_name)


call load_from_checkpoint got error
model.load_from_checkpoint('path')


error msg


&lt;denchmark-code&gt;    self.__class__.__name__, "\n\t".join(error_msgs)))
RuntimeError: Error(s) in loading state_dict for EfficientNet:
	Unexpected key(s) in state_dict: "criterion.pos_weight". 

&lt;/denchmark-code&gt;

&lt;denchmark-h:h4&gt;Code sample&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;


CUDA:

GPU:

GeForce GTX 1080 Ti


available:         True
version:           10.1


Packages:

numpy:             1.18.1
pyTorch_debug:     False
pyTorch_version:   1.7.0.dev20200701+cu101
pytorch-lightning: 0.8.5
tensorboard:       2.2.2
tqdm:              4.42.1


System:

OS:                Linux
architecture:

64bit



processor:         x86_64
python:            3.7.6
version:           #56~18.04.1-Ubuntu SMP Wed Jun 24 16:17:03 UTC 2020



&lt;denchmark-h:h3&gt;Additional context&lt;/denchmark-h&gt;

	</description>
	<comments>
		<comment id='1' author='feiwofeifeixiaowo' date='2020-07-15T17:27:42Z'>
		Hi! thanks for your contribution!, great first issue!
		</comment>
		<comment id='2' author='feiwofeifeixiaowo' date='2020-07-15T20:41:20Z'>
		This happens when you build model differently, criterion is not instantiated at all or weights are not instantiated when you are trying to load from checkpoint. In model __init__ make sure you always have pos_weight tensor (e.g. you can use torch.tensor(1, dtype=torch.float) for the case when you don't care).
To be fair, there is a strict argument for torch.load() which solves this when strict=False but I haven't seen Lightning supporting that argument i.e. no way to affect torch.load() used inside Lightning implementation of model loading.
		</comment>
		<comment id='3' author='feiwofeifeixiaowo' date='2020-07-16T06:43:11Z'>
		Thanks &lt;denchmark-link:https://github.com/dlrac&gt;@dlrac&lt;/denchmark-link&gt;
 , i will try this.

In model init make sure you always have pos_weight tensor (e.g. you can use torch.tensor(1, dtype=torch.float) for the case when you don't care).

		</comment>
		<comment id='4' author='feiwofeifeixiaowo' date='2020-07-16T09:31:10Z'>
		&lt;denchmark-link:https://github.com/feiwofeifeixiaowo&gt;@feiwofeifeixiaowo&lt;/denchmark-link&gt;
 Let me know if it works (it is how I solved it in my case).
		</comment>
		<comment id='5' author='feiwofeifeixiaowo' date='2020-07-16T12:35:21Z'>
		hi &lt;denchmark-link:https://github.com/dlrac&gt;@dlrac&lt;/denchmark-link&gt;
 ,  it doesn't work in my case. Through your insight, I initialize the criterion in the init function, then fix this.
thanks .
		</comment>
	</comments>
</bug>