<bug id='2027' author='williamFalcon' open_date='2020-05-31T12:33:44Z' closed_time='2020-06-08T11:19:35Z'>
	<summary>Support DictConfig</summary>
	<description>
We need to add DictConfig support for Omegaconf &lt;denchmark-link:https://github.com/Borda&gt;@Borda&lt;/denchmark-link&gt;
 to the auto hparam save
	</description>
	<comments>
		<comment id='1' author='williamFalcon' date='2020-05-31T19:28:03Z'>
		Yes, I agree. Users should have other options besides argument parser to set up their configuration. Personally speaking, I don't like typing too much on the command line b/c that is error-prone. A dictionary-like configuration system would be great. One example would be Ross's &lt;denchmark-link:https://github.com/rbgirshick/yacs&gt;yacs&lt;/denchmark-link&gt;
 which works pretty well.
		</comment>
		<comment id='2' author='williamFalcon' date='2020-06-01T19:02:26Z'>
		OmegaConf is along the same lines as Yacs, but with more features (might as well support YACS too, but just saying).
		</comment>
		<comment id='3' author='williamFalcon' date='2020-06-01T22:00:59Z'>
		&lt;denchmark-link:https://github.com/DKandrew&gt;@DKandrew&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/Darktex&gt;@Darktex&lt;/denchmark-link&gt;
 you would keep passing one eg  argument which is used internally? Kind of pseudocode...


 conf = OmegaConf(...)
 model = MyModel(conf)



 conf = OmegaConf(...)
 model = MyModel(**vars(conf))



assuming that the conf can be also loaded from a file...
		</comment>
		<comment id='4' author='williamFalcon' date='2020-06-02T20:22:53Z'>
		Hi &lt;denchmark-link:https://github.com/Borda&gt;@Borda&lt;/denchmark-link&gt;

I am not sure if I understand your question correctly, are you asking which approach you listed above is better?
		</comment>
		<comment id='5' author='williamFalcon' date='2020-06-02T22:19:50Z'>
		
I am not sure if I understand your question correctly, are you asking which approach you listed above is better?

I am trying to understand your use-case, mind draw your use case?
		</comment>
		<comment id='6' author='williamFalcon' date='2020-06-02T23:42:38Z'>
		Sure. My use-case is the first one
&lt;denchmark-code&gt;conf = OmegaConf(...)
model = MyModel(conf)
&lt;/denchmark-code&gt;

I don't want to use the second case because conf contains too many entries: entries for network layers, dataloader, training, optimizer/scheduler, etc. I don't want to expand all of them into my __init__() because that would be too long. After all, MyModel is just an nn.Module with additional features, so internally I have a self.conf to store the entire config and use it whenever I need it.
&lt;denchmark-code&gt;class MyModel(LightningModule)
    def __init__(self, conf):
        self.conf = conf
        # Normal network parameters like in_features, out_features
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='williamFalcon' date='2020-06-02T23:49:42Z'>
		let’s do this:
&lt;denchmark-h:h2&gt;case 1&lt;/denchmark-h&gt;

User explicitly says what they want to save.
class LitModel(...):

    def __init__(self, conf):
        self.save_hyperparameters(conf)
&lt;denchmark-h:h2&gt;Case 2:&lt;/denchmark-h&gt;

User wants to save all the init stuff.
They can do it all manually or ask us to do it automatically
class LitModel(...):

    def __init__(self, arg1, arg2, arg3):
        # manually
        self.save_hyperparameters(arg_name=arg1, arg_name=arg2, arg_name=arg3)
        
        # equivalent automatic
        self.save_hyperparameters()
&lt;denchmark-h:h2&gt;Case 3:&lt;/denchmark-h&gt;

They want to save ONLY some of the init stuff
class LitModel(...):

    def __init__(self, arg1, arg2, arg3):
        # manually
        self.save_hyperparameters(arg_name=arg2)
&lt;denchmark-h:h2&gt;Special cases:&lt;/denchmark-h&gt;


namespace

    def __init__(self, hparams):
        # manually
        self.save_hyperparameters(hparams)

dict

    def __init__(self, some_dict):
        # manually
        self.save_hyperparameters(some_dict)

omniconf

    def __init__(self, conf):
        # manually
        self.save_hyperparameters(conf)

anything they want

    def __init__(self, some_random_alternative_to_config):
        # manually
        self.save_hyperparameters(some_random_alternative_to_config)
&lt;denchmark-link:https://github.com/orgs/PyTorchLightning/teams/core-contributors&gt;@PyTorchLightning/core-contributors&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='williamFalcon' date='2020-06-04T03:10:30Z'>
		
let’s do this:

Sounds good to me. Looking forward to it!
		</comment>
		<comment id='9' author='williamFalcon' date='2020-06-04T12:12:14Z'>
		
case 1
User explicitly says what they want to save.
class LitModel(...):

    def __init__(self, conf):
        self.save_hyperparameters(conf)

is very tricky as we would need to do some pairing from init frame and hope none of the conf1, conf2, ... has the same value so I would skip this case...

Special cases:

namespace
dict

    def __init__(self, conf):
        # manually
        self.save_hyperparameters(conf)

here you want to unroll all elements?
assume you have some_dict=dict(a=1, b=3) then you would in fact do something similar like self.save_hyperparameters(**some_dict)
if fact
&lt;denchmark-code&gt;def save_hyperparameters(**kwargs):
    ...
    for elms in kwargs:
        if isisntance(conf, (dict, OmegaConf)):
            self.save_hyperparameters(**conf)
        if isisntance(conf, Namespace):
            self.save_hyperparameters(**vars(conf))
       ...
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>