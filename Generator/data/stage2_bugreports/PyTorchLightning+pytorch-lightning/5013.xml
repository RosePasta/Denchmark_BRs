<bug id='5013' author='luzuku' open_date='2020-12-08T10:28:16Z' closed_time='2020-12-08T10:49:07Z'>
	<summary>Accuracy metric for preds at half precision is zero with pl=1.0.8</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

The accuracy metric is wrong if preds are given with half precision. See example.
&lt;denchmark-h:h3&gt;To Reproduce&lt;/denchmark-h&gt;

import torch
from pytorch_lightning.metrics import Accuracy

acc = Accuracy(threshold=0.5)
target = torch.Tensor([1, 1, 0, 0])
preds = torch.Tensor([0.7, 0.4, 0.8, 0.4])

print(acc(preds, target))  -&gt; 0.5
print(acc(preds.half(), target))  -&gt; 0.0
&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

The accuracy metric should not fail silently. Either an Error needs to be raised when preds are half precision or it should work correctly.
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;


PyTorch Version (e.g., 1.0): 1.7.0
OS (e.g., Linux): Linux
How you installed PyTorch (conda, pip, source): conda
Build command you used (if compiling from source):
Python version: 3.8
CUDA/cuDNN version: 10.2
GPU models and configuration: ...
Any other relevant information:

&lt;denchmark-h:h3&gt;Additional context&lt;/denchmark-h&gt;

This might already be fixed in master. I filed the issue regardless because I don't have time to check.
	</description>
	<comments>
		<comment id='1' author='luzuku' date='2020-12-08T10:29:01Z'>
		Hi! thanks for your contribution!, great first issue!
		</comment>
		<comment id='2' author='luzuku' date='2020-12-08T10:48:58Z'>
		It is indeed fixed in  with the change from  to . It is also a duplicate of &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/issues/4840&gt;#4840&lt;/denchmark-link&gt;
. Sorry, my bad.
		</comment>
		<comment id='3' author='luzuku' date='2020-12-08T10:54:29Z'>
		It is fixed in master but would be broken again in &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/pull/4838&gt;#4838&lt;/denchmark-link&gt;
, so thanks for catching this :)
		</comment>
		<comment id='4' author='luzuku' date='2020-12-08T11:36:10Z'>
		&lt;denchmark-link:https://github.com/luzuku&gt;@luzuku&lt;/denchmark-link&gt;
 And one small note: if you create tensors with , the created tensor will be a float tensor. Targets as floats will not be supported as inputs in classification functions anymore. If you want to preserve dtypes, create the tensor with  (note that  is not capitalized)
		</comment>
	</comments>
</bug>