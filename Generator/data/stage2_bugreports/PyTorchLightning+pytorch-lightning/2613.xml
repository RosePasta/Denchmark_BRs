<bug id='2613' author='Guitaricet' open_date='2020-07-15T02:06:08Z' closed_time='2020-07-15T18:34:41Z'>
	<summary>Trainer(resume_from_checkpoint=...) does not load optimizer state</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

The optimizer state is not loaded from the checkpoint. This is important if you want to correctly continue training. In practice, I had serious convergence issues if the optimizer state wasn't loaded.
&lt;denchmark-h:h3&gt;To Reproduce&lt;/denchmark-h&gt;

See code sample
&lt;denchmark-h:h4&gt;Code sample&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import os

import torch
from torch.nn import functional as F
from torch.utils.data import DataLoader
from torchvision.datasets import MNIST
from torchvision import transforms

import pytorch_lightning as pl
from pytorch_lightning.core.lightning import LightningModule

class LitModel(LightningModule):

    def __init__(self):
        super().__init__()
        self.l1 = torch.nn.Linear(28 * 28, 10)

    def forward(self, x):
        return torch.relu(self.l1(x.view(x.size(0), -1)))

    def training_step(self, batch, batch_idx):
        x, y = batch
        y_hat = self(x)
        loss = F.cross_entropy(y_hat, y)
        tensorboard_logs = {'train_loss': loss}
        return {'loss': loss, 'log': tensorboard_logs}

    def configure_optimizers(self):
        return torch.optim.Adam(self.parameters(), lr=0.001)

    def train_dataloader(self):
        dataset = MNIST(os.getcwd(), train=True, download=True, transform=transforms.ToTensor())
        loader = DataLoader(dataset, batch_size=32, num_workers=4, shuffle=True)
        return loader


model = LitModel()
trainer = pl.Trainer(fast_dev_run=True)
trainer.fit(model)

old_state = trainer.optimizers[0].state

trainer.save_checkpoint('checkpoint.pl')
new_trainer = pl.Trainer(resume_from_checkpoint='checkpoint.pl')

# currently new_trainer does not have optimizers, but inside it uses .init_optimizers to load them

new_optimizers, _, _ = new_trainer.init_optimizers(model)
new_state = new_optimizers[0].state

# new state is empty
old_state == new_state
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

Initializing Trainer from checkpoint loads optimizer state.
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;


PyTorch Version (e.g., 1.0): 1.5.0
OS (e.g., Linux): Linux
How you installed PyTorch (conda, pip, source): pip
Build command you used (if compiling from source):
Python version: 3.7.6
CUDA/cuDNN version: N/A
GPU models and configuration: CPU
Any other relevant information:

&lt;denchmark-h:h3&gt;Additional context&lt;/denchmark-h&gt;

What workaround can you use to load the optimizer state before the fix? The issue is that .init_optimizers is called inside .fit and even if you manually set trainer.optimizers is will be overwritten.
	</description>
	<comments>
		<comment id='1' author='Guitaricet' date='2020-07-15T02:25:57Z'>
		shouldn't it be handled here: 


pytorch-lightning/pytorch_lightning/trainer/training_io.py


         Line 182
      in
      aaa1553






 self.restore(self.resume_from_checkpoint, on_gpu=self.on_gpu) 





		</comment>
		<comment id='2' author='Guitaricet' date='2020-07-15T18:34:41Z'>
		Hi! Thank you for helping! I was able to verify it via.
(Wasn't able to use .restore directly, it throws an error)
&lt;denchmark-code&gt;trainer.save_checkpoint('checkpoint.pl')
new_trainer = pl.Trainer(resume_from_checkpoint='checkpoint.pl')

checkpoint = torch.load('checkpoint.pl')
new_trainer.optimizers, _, _ = new_trainer.init_optimizers(model)
new_trainer.restore_training_state(checkpoint)

new_state = new_trainer.optimizers[0].state

str(new_state) == str(old_state)
&lt;/denchmark-code&gt;

It would be great though if the optimizer state was more easier accessible before the start of training.
		</comment>
	</comments>
</bug>