<bug id='3953' author='jloveric' open_date='2020-10-07T18:47:09Z' closed_time='2020-10-07T21:38:23Z'>
	<summary>non intuitive batch_size in ddp</summary>
	<description>
Is there a way in PyTorchLightning to set your desired batch size, say 512 and then have the effective batch size per processor (which is normally batch_size*num_gpus) be computed automatically?  Right now your effective batch size scales with the number of gpus so these calculations must be computed outside of pytorchlightning (as far as my tests have shown)...  This seems like something that PL could/should be able to handle.  You'd likely also have to set a maximum processor batch_size so that it could determine an accumulate_grad_batches so as not to use too much memory.
	</description>
	<comments>
		<comment id='1' author='jloveric' date='2020-10-07T19:35:59Z'>
		great suggestion!
as a researcher this kind of magic scares me... i'd prefer to be explicit. but would love to hear from the community
&lt;denchmark-link:https://github.com/ananthsub&gt;@ananthsub&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/tullie&gt;@tullie&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='jloveric' date='2020-10-07T19:52:38Z'>
		I find the current way more intuitive and super helpful actually.
I can easly choose the right batch size by training initially on only one gpu to figure out which size fills the memory nicely (or use the automatic batch size finder).
Then, if I want to train on X gpus, I can just set gpus=X in the trainer and scale the learning rate roughly by X.
		</comment>
	</comments>
</bug>