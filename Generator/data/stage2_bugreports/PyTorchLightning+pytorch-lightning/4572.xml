<bug id='4572' author='quinor' open_date='2020-11-07T21:13:42Z' closed_time='2020-11-16T14:21:27Z'>
	<summary>Native AMP effectively broken when rewriting the optimizer_step function</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

If I turn on the native AMP () and modify  like it's recommended in the docs (&lt;denchmark-link:https://pytorch-lightning.readthedocs.io/en/latest/optimizers.html#step-optimizers-at-arbitrary-intervals&gt;https://pytorch-lightning.readthedocs.io/en/latest/optimizers.html#step-optimizers-at-arbitrary-intervals&lt;/denchmark-link&gt;
), the training stops converging. The issue is caused by 
 not being called since the entire  function is getting overridden.
&lt;denchmark-h:h3&gt;To Reproduce&lt;/denchmark-h&gt;

Turn on native AMP and overwrite optimizer_step function (can be with "default" implementation from the docs) and start training. NANs should appear given complex enough network.
&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

The training should converge correctly.
&lt;denchmark-h:h3&gt;Additional context&lt;/denchmark-h&gt;

It appears that &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/issues/1759&gt;#1759&lt;/denchmark-link&gt;
 has not properly been fixed. I had encountered this bug trying to hotfix &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/issues/4524&gt;#4524&lt;/denchmark-link&gt;
.
I'm not sure what a correct fix is, my guess is either 1) a proper support for closures in AMP (possibly with some type of middleware) or 2) disabling the possibility of overwriting optimizer_step when using automatic optimization completely. One way or another, the solution will probably have to deal with &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/issues/4524&gt;#4524&lt;/denchmark-link&gt;
 and this bug at the same time.
	</description>
	<comments>
		<comment id='1' author='quinor' date='2020-11-07T21:35:30Z'>
		Hey &lt;denchmark-link:https://github.com/quinor&gt;@quinor&lt;/denchmark-link&gt;
,
Would you mind reproduce the bug with &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/blob/master/pl_examples/bug_report_model.py&gt;https://github.com/PyTorchLightning/pytorch-lightning/blob/master/pl_examples/bug_report_model.py&lt;/denchmark-link&gt;
.
It would help us a lot resolve this bug faster !
Best regards,
Thomas Chaton.
		</comment>
		<comment id='2' author='quinor' date='2020-11-10T23:29:58Z'>
		&lt;denchmark-link:https://github.com/tchaton&gt;@tchaton&lt;/denchmark-link&gt;
 found a bit of time to do that. The model terminates on NaNs while it shouldn't:
Key features:

uses GPUs
uses native AMP (precision=16)
deep model so that NaNs actually appear
rewrites optimizer_step(...)

# Copyright The PyTorch Lightning team.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# --------------------------------------------
# --------------------------------------------
# --------------------------------------------
# USE THIS MODEL TO REPRODUCE A BUG YOU REPORT
# --------------------------------------------
# --------------------------------------------
# --------------------------------------------
import os
import torch
from torch.utils.data import Dataset
from pytorch_lightning import Trainer, LightningModule


class RandomDataset(Dataset):
    def __init__(self, size, length):
        self.len = length
        self.data = torch.randn(length, *size)

    def __getitem__(self, index):
        return self.data[index]

    def __len__(self):
        return self.len


class BoringModel(LightningModule):

    def __init__(self):
        """
        Testing PL Module

        Use as follows:
        - subclass
        - modify the behavior for what you want

        class TestModel(BaseTestModel):
            def training_step(...):
                # do your own thing

        or:

        model = BaseTestModel()
        model.training_epoch_end = None

        """
        super().__init__()
        
        block = lambda f1, f2: torch.nn.Sequential(
            torch.nn.Conv2d(f1, f2, kernel_size=3, padding=1),
            torch.nn.ReLU(),
            torch.nn.BatchNorm2d(f2),
        )

        self.layer = torch.nn.Sequential(block(4, 16), *[block(16, 16) for _ in range(64)])

    def forward(self, x):
        return self.layer(x)

    def loss(self, batch, prediction):
        # An arbitrary loss to have a loss that updates the model weights during `Trainer.fit` calls
        return torch.nn.functional.mse_loss(prediction, torch.ones_like(prediction))

    def step(self, x):
        x = self.layer(x)
        out = torch.nn.functional.mse_loss(x, torch.ones_like(x))
        return out

    def training_step(self, batch, batch_idx):
        output = self.layer(batch)
        loss = self.loss(batch, output)
        return {"loss": loss}

    def optimizer_step(
        self, epoch, batch_idx, optimizer, optimizer_idx,
        optimizer_closure, on_tpu, using_native_amp, using_lbfgs,
    ):
        optimizer.step(closure=optimizer_closure)
        optimizer.zero_grad()

    def training_step_end(self, training_step_outputs):
        return training_step_outputs

    def training_epoch_end(self, outputs) -&gt; None:
        torch.stack([x["loss"] for x in outputs]).mean()

    def validation_step(self, batch, batch_idx):
        output = self.layer(batch)
        loss = self.loss(batch, output)
        return {"x": loss}

    def validation_epoch_end(self, outputs) -&gt; None:
        torch.stack([x['x'] for x in outputs]).mean()

    def test_step(self, batch, batch_idx):
        output = self.layer(batch)
        loss = self.loss(batch, output)
        return {"y": loss}

    def test_epoch_end(self, outputs) -&gt; None:
        torch.stack([x["y"] for x in outputs]).mean()

    def configure_optimizers(self):
        optimizer = torch.optim.SGD(self.layer.parameters(), lr=0.1)
        lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=1)
        return [optimizer], [lr_scheduler]


#  NOTE: If you are using a cmd line to run your script,
#  provide the cmd line as below.
#  opt = "--max_epochs 1 --limit_train_batches 1".split(" ")
#  parser = ArgumentParser()
#  args = parser.parse_args(opt)

def run_test():

    class TestModel(BoringModel):

        def on_train_epoch_start(self) -&gt; None:
            print('override any method to prove your bug')

    # fake data
    train_data = torch.utils.data.DataLoader(RandomDataset([4, 16, 16], 64))
    val_data = torch.utils.data.DataLoader(RandomDataset([4, 16, 16], 64))
    test_data = torch.utils.data.DataLoader(RandomDataset([4, 16, 16], 64))

    # model
    model = TestModel()
    trainer = Trainer(
        default_root_dir=os.getcwd(),
        limit_train_batches=4,
        limit_val_batches=4,
        max_epochs=1,
        weights_summary=None,
        gpus=1,
        precision=16,
        terminate_on_nan=True,
    )
    trainer.fit(model, train_data, val_data)
    trainer.test(test_dataloaders=test_data)


if __name__ == '__main__':
    run_test()
		</comment>
		<comment id='3' author='quinor' date='2020-11-10T23:36:51Z'>
		A possible (though ugly) fix is to just ask the user in the documentation to call super().optimizer_step(...) with the right parameters whenever they rewrite optimizer_step with automatic optimization on.
		</comment>
		<comment id='4' author='quinor' date='2020-11-13T14:41:42Z'>
		&lt;denchmark-link:https://github.com/tchaton&gt;@tchaton&lt;/denchmark-link&gt;
 please update what is still left TODO here
		</comment>
		<comment id='5' author='quinor' date='2020-11-16T14:01:28Z'>
		Hey &lt;denchmark-link:https://github.com/quinor&gt;@quinor&lt;/denchmark-link&gt;
,
Thanks a lot for taking time to reproduce the bug. I am currently working on cleaning up the optimization step. I will try to address this bug asap.
Best regards,
T.C
		</comment>
		<comment id='6' author='quinor' date='2020-11-16T14:21:20Z'>
		Hey &lt;denchmark-link:https://github.com/quinor&gt;@quinor&lt;/denchmark-link&gt;
,
If you don't override optimizer_step, it works fine. We recommend not to override this function anymore.
You can also use automatic_optimization=False with manual_backward and manual_optimizer_step from master branch.
&lt;denchmark-code&gt;# Copyright The PyTorch Lightning team.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# --------------------------------------------
# --------------------------------------------
# --------------------------------------------
# USE THIS MODEL TO REPRODUCE A BUG YOU REPORT
# --------------------------------------------
# --------------------------------------------
# --------------------------------------------
import os
import torch
from torch.utils.data import Dataset
from pytorch_lightning import Trainer, LightningModule


class RandomDataset(Dataset):
    def __init__(self, size, length):
        self.len = length
        self.data = torch.randn(length, *size)

    def __getitem__(self, index):
        return self.data[index]

    def __len__(self):
        return self.len


class BoringModel(LightningModule):

    def __init__(self):
        """
        Testing PL Module

        Use as follows:
        - subclass
        - modify the behavior for what you want

        class TestModel(BaseTestModel):
            def training_step(...):
                # do your own thing

        or:

        model = BaseTestModel()
        model.training_epoch_end = None

        """
        super().__init__()
        
        block = lambda f1, f2: torch.nn.Sequential(
            torch.nn.Conv2d(f1, f2, kernel_size=3, padding=1),
            torch.nn.ReLU(),
            torch.nn.BatchNorm2d(f2),
        )

        self.layer = torch.nn.Sequential(block(4, 16), *[block(16, 16) for _ in range(64)])

    def forward(self, x):
        return self.layer(x)

    def loss(self, batch, prediction):
        # An arbitrary loss to have a loss that updates the model weights during `Trainer.fit` calls
        return torch.nn.functional.mse_loss(prediction, torch.ones_like(prediction))

    def step(self, x):
        x = self.layer(x)
        out = torch.nn.functional.mse_loss(x, torch.ones_like(x))
        return out

    def training_step(self, batch, batch_idx):
        opt = self.optimizers()
        output = self.layer(batch)
        loss = self.loss(batch, output)
        self.manual_backward(loss, opt)
        self.manual_optimizer_step(opt)

    def training_step_end(self, training_step_outputs):
        return training_step_outputs

    def validation_step(self, batch, batch_idx):
        output = self.layer(batch)
        loss = self.loss(batch, output)
        return {"x": loss}

    def validation_epoch_end(self, outputs) -&gt; None:
        torch.stack([x['x'] for x in outputs]).mean()

    def test_step(self, batch, batch_idx):
        output = self.layer(batch)
        loss = self.loss(batch, output)
        return {"y": loss}

    def test_epoch_end(self, outputs) -&gt; None:
        torch.stack([x["y"] for x in outputs]).mean()

    def configure_optimizers(self):
        optimizer = torch.optim.SGD(self.layer.parameters(), lr=0.1)
        lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=1)
        return [optimizer], [lr_scheduler]


#  NOTE: If you are using a cmd line to run your script,
#  provide the cmd line as below.
#  opt = "--max_epochs 1 --limit_train_batches 1".split(" ")
#  parser = ArgumentParser()
#  args = parser.parse_args(opt)

def run_test():

    class TestModel(BoringModel):

        def on_train_epoch_start(self) -&gt; None:
            print('override any method to prove your bug')

    # fake data
    train_data = torch.utils.data.DataLoader(RandomDataset([4, 16, 16], 64))
    val_data = torch.utils.data.DataLoader(RandomDataset([4, 16, 16], 64))
    test_data = torch.utils.data.DataLoader(RandomDataset([4, 16, 16], 64))

    # model
    model = TestModel()
    trainer = Trainer(
        default_root_dir=os.getcwd(),
        limit_train_batches=4,
        limit_val_batches=4,
        max_epochs=1,
        weights_summary=None,
        gpus=1,
        precision=16,
        terminate_on_nan=True,
        automatic_optimization=False,
    )
    trainer.fit(model, train_data, val_data)
    trainer.test(test_dataloaders=test_data)


if __name__ == '__main__':
    run_test()
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>