<bug id='4272' author='alyashgo' open_date='2020-10-21T05:51:05Z' closed_time='2020-10-22T07:26:28Z'>
	<summary>SimCLR init_encoder should have an *if* condition to replace first conv block</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

In the init_encoder of simclr_module.py , the method replaces the first convolution block regardless of the image size. This is only useful when image size is small(eg 32 for CIFAR10), however this is undesirable for large image sizes(eg. 256) as it doesn't allow the image to shrink and creates unnecessary computational overhead making training difficult.
Here is the relevant code block from the lightning repo :
def init_encoder(self):
        encoder = resnet50_bn(return_all_feature_maps=False)

        #when using cifar10, replace the first conv so image doesn't shrink away
        encoder.conv1 = nn.Conv2d(
            3, 64,
            kernel_size=3,
            stride=1,
            padding=1,
            bias=False
        )
        return encoder
&lt;denchmark-h:h2&gt;Possible solution&lt;/denchmark-h&gt;

Please add an if statement taking into account the image size, or additionally pass an argument in the main function to do so. It would give user more flexibility according to their dataset instead of copying whole module and replacing this line in their own system (like I am doing so now).
	</description>
	<comments>
		<comment id='1' author='alyashgo' date='2020-10-21T22:00:31Z'>
		&lt;denchmark-link:https://github.com/alyashgo&gt;@alyashgo&lt;/denchmark-link&gt;
 This is being updated as a part of Simclr update, we are ensuring that simclr will run on TPUs on colab and also sync negative samples with gradients across accelerators.
Also, can you keep the simclr issue to bolts, we are focussing on bolts actively after v1 release of lightning.
		</comment>
		<comment id='2' author='alyashgo' date='2020-10-22T07:25:50Z'>
		Thanks! It'll also be helpful if you can add custom encoder support like the moco repo.
Sure, will close this and redirect to bolts.
		</comment>
	</comments>
</bug>