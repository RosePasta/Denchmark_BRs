<bug id='4237' author='ddrevicky' open_date='2020-10-19T16:52:50Z' closed_time='2020-10-25T09:26:41Z'>
	<summary>[Metrics] AUC reorder is unstable</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

When auc(x, y, reorder=True) is called (True is the default) it reorders the xs and ys. It uses torch.argsort on x internally, which is unstable and does not take the second key y into account when sorting. In some cases this leads to reordering that changes the order of ys in an undesirable way resulting in incorrect metric computation.
&lt;denchmark-code&gt;fpr = torch.tensor([0.4167, 0.5000, 0.5000,
        0.5000, 0.5833, 0.6667, 0.6667, 0.6667, 0.7500, 0.7500, 0.7500, 0.8333,
        0.9167, 0.9167, 0.9167, 1.0000])
tpr = torch.tensor([0.1111, 0.1111, 0.2222,
        0.3333, 0.3333, 0.3333, 0.4444, 0.5556, 0.5556, 0.6667, 0.7778, 0.7778,
        0.7778, 0.8889, 1.0000, 1.0000])

auc_sk = torch.tensor(sk_auc(fpr, tpr)).float()
auc_reorder = auc(fpr, tpr, reorder=True)
auc_no_reorder = auc(fpr, tpr, reorder=False)

print("Sklearn", auc_sk.item())
print("PTL no reorder", auc_no_reorder.item(), "SK==PTL:", torch.allclose(auc_sk, auc_no_reorder))
print("PTL with reorder", auc_reorder.item(), "SK==PTL:", torch.allclose(auc_sk, auc_reorder))
print("unstable argsort: ", torch.argsort(fpr))

&gt;&gt;&gt; Sklearn 0.324056476354599
&gt;&gt;&gt; PTL no reorder 0.324056476354599 SK==PTL: True
&gt;&gt;&gt; PTL with reorder 0.3240675926208496 SK==PTL: False
&gt;&gt;&gt; unstable argsort:  tensor([ 0,  1,  2,  3,  4,  7,  6,  5,  8,  9, 10, 11, 12, 13, 14, 15])
&lt;/denchmark-code&gt;

See an example &lt;denchmark-link:https://colab.research.google.com/drive/18bG1cqSf-KJOmvZWKUtGUASZagrDqxf6#scrollTo=S9_kfT5fqBpH&gt;colab&lt;/denchmark-link&gt;
. I'm sure there is a more minimal example possible, this is what I encountered when implementing a different issue.
&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

Either a stable way of sorting across both x and y or removing the reorder argument entirely.
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;

Colab.
	</description>
	<comments>
		<comment id='1' author='ddrevicky' date='2020-10-19T18:12:32Z'>
		&lt;denchmark-link:https://github.com/teddykoker&gt;@teddykoker&lt;/denchmark-link&gt;
 mind have look? :]
		</comment>
		<comment id='2' author='ddrevicky' date='2020-10-19T18:23:49Z'>
		Functional metrics... cc. &lt;denchmark-link:https://github.com/justusschock&gt;@justusschock&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/SkafteNicki&gt;@SkafteNicki&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='ddrevicky' date='2020-10-19T18:27:19Z'>
		With PyTorch it is hard to have a more stable sorting. Currently. Not sure, if we should actually implement it manually or remove it.
&lt;denchmark-link:https://github.com/SkafteNicki&gt;@SkafteNicki&lt;/denchmark-link&gt;
 do you think we actually need this?
		</comment>
		<comment id='4' author='ddrevicky' date='2020-10-21T07:32:36Z'>
		IMO we should probably remove it. Moving forward with the metrics package we should only support features that are stable.
		</comment>
		<comment id='5' author='ddrevicky' date='2020-10-21T08:54:03Z'>
		You can assign this to me then. Should I just straight remove it or do you want to deprecate it?
		</comment>
		<comment id='6' author='ddrevicky' date='2020-10-21T08:59:17Z'>
		I think rather deprecate it first and then remove it in 1.1 or 1.2
		</comment>
	</comments>
</bug>