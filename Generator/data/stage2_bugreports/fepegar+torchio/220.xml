<bug id='220' author='GFabien' open_date='2020-07-09T11:58:21Z' closed_time='2020-07-09T16:18:43Z'>
	<summary>Non integer labels in Colin27 2008 version</summary>
	<description>
üêõBug
Class labels in Colin27 dataset, version 2008, are not integer values.
To reproduce
from torchio.datasets import Colin27
colin = Colin27(2008)
label_values = colin['cls']['data'].unique()
print(label_values)

&gt;&gt;&gt; tensor([ 0.0000,  0.9882,  2.0235,  3.0118,  4.0000,  4.9882,  6.0235,  7.0118,
         8.9882, 10.0235, 11.0118, 12.0000])
Expected behavior
Label encoding map should only contain integer values.
TorchIO version
0.17.7
	</description>
	<comments>
		<comment id='1' author='GFabien' date='2020-07-09T12:02:36Z'>
		Thanks for reporting, &lt;denchmark-link:https://github.com/GFabien&gt;@GFabien&lt;/denchmark-link&gt;
. This is weird, and I don't think there's much we can do about this. I tried reading the image with ITK and results are the same. I checked the intercept and slope values in the NIfTI header and I found nothing interesting:
&lt;denchmark-code&gt;scl_slope       : nan
scl_inter       : nan
&lt;/denchmark-code&gt;

I've been googling with no success. I think that the only solution for now is to round the data in the Colin27 class of the torchio.datasets.mni.colin module.
		</comment>
		<comment id='2' author='GFabien' date='2020-07-09T12:05:19Z'>
		I'll check the MINC versions.
		</comment>
		<comment id='3' author='GFabien' date='2020-07-09T12:08:02Z'>
		
I'll check the MINC versions.

I got the same results.
		</comment>
		<comment id='4' author='GFabien' date='2020-07-09T12:13:55Z'>
		Might be related to &lt;denchmark-link:https://bartwronski.com/2017/04/02/small-float-formats-r11g11b10f-precision/&gt;Small float formats ‚Äì R11G11B10F precision&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='5' author='GFabien' date='2020-07-09T12:20:28Z'>
		In the NIfTI header it says int16, but for some reason the data is loaded as float64 even when I do
np.asanyarray(nii.dataobj)
		</comment>
		<comment id='6' author='GFabien' date='2020-07-09T12:27:46Z'>
		mrinfo say there is an intensity scaling
Data type:         signed 16 bit integer (little endian)
Intensity scaling: offset = 0, multiplier = 0.047058824449777603
strange that you do not see the intercept and slope (I thought it was related)
		</comment>
		<comment id='7' author='GFabien' date='2020-07-09T12:29:10Z'>
		&lt;denchmark-link:https://github.com/romainVala&gt;@romainVala&lt;/denchmark-link&gt;
, do you know how/if that multiplier is meant to be used?
		</comment>
		<comment id='8' author='GFabien' date='2020-07-09T12:30:49Z'>
		From nibabel:
image.dataobj.slope
&gt;&gt;&gt; 0.0470588244497776
But also from nibabel:
nib.analyze.get_slope_inter(image)
&gt;&gt;&gt; (1.0, 0.0)
		</comment>
		<comment id='9' author='GFabien' date='2020-07-09T12:34:24Z'>
		Note that this is a NIfTI image, not analyze:
nii.header.get_slope_inter()
&gt;&gt;&gt; (None, None)
		</comment>
		<comment id='10' author='GFabien' date='2020-07-09T12:35:38Z'>
		Some more info about this stuff, for reference: &lt;denchmark-link:https://nipy.org/nibabel/nifti_images.html#data-scaling&gt;https://nipy.org/nibabel/nifti_images.html#data-scaling&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='GFabien' date='2020-07-09T12:38:34Z'>
		
In the NIfTI header it says int16, but for some reason the data is loaded as float64

I suspect this happens because there are values for intercept and slope in the original file, so the data is cast to float when multiplying.
		</comment>
		<comment id='12' author='GFabien' date='2020-07-09T12:39:36Z'>
		Maybe those values shouldn't be there in the first place. I'll try modifying the file directly to remove these values and loading it with nibabel.
		</comment>
		<comment id='13' author='GFabien' date='2020-07-09T14:23:18Z'>
		I removed the slope from the file
In [7]: with open('colin27_cls_tal_hires.nii', 'rb+') as f:
   ...:     f.seek(116)  # address of intercept, which I know is 0
   ...:     data = f.read(4)  # stored in float32 so 4 bytes
   ...:     f.seek(112)  # address of slope
   ...:     f.write(data)  # actually this should have been 1, but it looks like nibabel uses a 1 if it finds a 0
   ...:
and the values are now
In [14]: np.unique(lm)
Out[14]:
array([  0,  21,  43,  64,  85, 106, 128, 149, 191, 213, 234, 255],
      dtype=int16)
Indeed to get 12 from 255 you need to multiply by 12/255 = 0.047058823529411764, which is the intercept stored in the header. However, 234 * 0.047058823529411764 = 11.0118. It looks like, for some reason, someone decided to store the labels from 0 to 255 for some reason, and adding a slope. Maybe this worked with the software they use at the MNI because the labels are rounded after reading.
I think the best for now is just rounding the values ourselves when reading the CLS image.
		</comment>
		<comment id='14' author='GFabien' date='2020-07-09T14:51:20Z'>
		(I edited this comment, forgot to add the returned values: &lt;denchmark-link:https://github.com/fepegar/torchio/issues/220#issuecomment-656100610&gt;#220 (comment)&lt;/denchmark-link&gt;
)
		</comment>
		<comment id='15' author='GFabien' date='2020-07-09T16:20:05Z'>
		Fixed (hacked) in v0.17.9. Thanks for reporting and investigating! I'm going to email the person in charge of the atlas to ask about this.
		</comment>
	</comments>
</bug>