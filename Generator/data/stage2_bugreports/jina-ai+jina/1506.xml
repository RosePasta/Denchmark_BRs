<bug id='1506' author='hanxiao' open_date='2020-12-20T11:58:06Z' closed_time='2020-12-20T16:14:55Z'>
	<summary>RecallEvaluator and PrecisionEvaluator use list for loop to compute score and it is slow</summary>
	<description>
Describe the bug
The following part needs to be numpy-ized.
    def evaluate(self, actual: Sequence[Any], desired: Sequence[Any], *args, **kwargs) -&gt; float:
        """"
        :param actual: the matched document identifiers from the request as matched by jina indexers and rankers
        :param desired: the expected documents matches ids sorted as they are expected
        :return the evaluation metric value for the request document
        """
        ret = 0.0
        for doc_id in actual[:self.eval_at]:
            if doc_id in desired:
                ret += 1.0
    def evaluate(self, actual: Sequence[Any], desired: Sequence[Any], *args, **kwargs) -&gt; float:
        """"
        :param actual: the matched document identifiers from the request as matched by jina indexers and rankers
        :param desired: the expected documents matches ids sorted as they are expected
        :return the evaluation metric value for the request document
        """
        if not desired:
            """TODO: Agree on a behavior"""
            return 0.0

        ret = 0.0
        for doc_id in actual[:self.eval_at]:
            if doc_id in desired:
                ret += 1.0
Related: &lt;denchmark-link:https://github.com/jina-ai/jina/issues/1503&gt;#1503&lt;/denchmark-link&gt;

Describe how you solve it
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Environment
Screenshots
	</description>
	<comments>
		<comment id='1' author='hanxiao' date='2020-12-20T14:17:58Z'>
		Edit: Oh, I see this is exactly what was implemented in PR. Nevermind then :)
&lt;denchmark-link:https://github.com/hanxiao&gt;@hanxiao&lt;/denchmark-link&gt;
 not sure about numpy, but using python sets can give large speedups.
import numpy as np
actual = np.arange(1, 10_000)
np.random.shuffle(actual)
desired = np.arange(1000)
actual, desired = list(actual), list(desired)

def old_fn(actual, desired, eval_at=1000):
    ret = 0.0
    for doc_id in actual[:eval_at]:
        if doc_id in desired:
            ret += 1.0  

    return ret

def new_fn(actual, desired, eval_at=1000):
    return len(set(actual[:eval_at]).intersection(desired))

assert old_fn(actual, desired) == new_fn(actual, desired)
Comparing the performance
%%timeit
old_fn(actual, desired)
I get 100 loops, best of 3: 15.7 ms per loop
%%timeit
new_fn(actual, desired)
I get 10000 loops, best of 3: 83 Âµs per loop
That's almost a 200x speedup!
		</comment>
	</comments>
</bug>