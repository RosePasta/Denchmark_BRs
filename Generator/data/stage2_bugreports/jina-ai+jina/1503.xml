<bug id='1503' author='hanxiao' open_date='2020-12-20T11:04:59Z' closed_time='2020-12-20T16:14:55Z'>
	<summary>evaluate in `jina hello-world` is very inefficient</summary>
	<description>
Describe the bug

Request generator is too slow. (long prefetch time)
Evaluation is too slow, the time is even longer than index + query time in total. On my laptop, evaluation takes 2 minutes and 49 seconds (169.72s), whereas index takes 38s, query takes 4s. It is not usable.
In docker sometimes it just timeout

&lt;denchmark-code&gt;runtime-index-1@148[S]:memmap is enabled for 82087128-42b1-11eb-bc70-0242ac110002/chunk_indexer-1/vec.gz
runtime-index-1@148[I]:indexer size: 30720
runtime-index-2@151[S]:memmap is enabled for 82087128-42b1-11eb-bc70-0242ac110002/chunk_indexer-2/vec.gz
runtime-index-2@151[I]:indexer size: 29280
runtime-index-1@148[I]:indexer size: 30720
runtime-index-2@151[I]:indexer size: 29280
          index@145[I]:recv SearchRequest (1/2 parts) from gateway‚ñ∏encode-head‚ñ∏encode-2‚ñ∏encode-tail‚ñ∏index-head‚ñ∏index-1‚ñ∏index-tail‚ñ∏‚öê
          index@145[I]:recv SearchRequest (2/2 parts) from gateway‚ñ∏encode-head‚ñ∏encode-2‚ñ∏encode-tail‚ñ∏index-head‚ñ∏index-2‚ñ∏index-tail‚ñ∏‚öê
       evaluate@154[I]:recv SearchRequest from gateway‚ñ∏encode-head‚ñ∏encode-2‚ñ∏encode-tail‚ñ∏index-head‚ñ∏index-2‚ñ∏index-1‚ñ∏index-tail‚ñ∏evaluate‚ñ∏‚öê
         encode@128[I]:recv SearchRequest from gateway‚ñ∏encode-head‚ñ∏‚öê
       encode-1@134[I]:recv SearchRequest from gateway‚ñ∏encode-head‚ñ∏encode-1‚ñ∏‚öê
         encode@128[I]:recv ControlRequest from encode‚ñ∏encode-head‚ñ∏‚öê
         encode@131[I]:recv SearchRequest from gateway‚ñ∏encode-head‚ñ∏encode-1‚ñ∏encode-tail‚ñ∏‚öê
          index@142[I]:recv SearchRequest from gateway‚ñ∏encode-head‚ñ∏encode-1‚ñ∏encode-tail‚ñ∏index-head‚ñ∏‚öê
        index-1@148[I]:recv SearchRequest from gateway‚ñ∏encode-head‚ñ∏encode-1‚ñ∏encode-tail‚ñ∏index-head‚ñ∏index-1‚ñ∏‚öê
        index-2@151[I]:recv SearchRequest from gateway‚ñ∏encode-head‚ñ∏encode-1‚ñ∏encode-tail‚ñ∏index-head‚ñ∏index-2‚ñ∏‚öê
    1 minute and 31 seconds (91.77s)
	‚úÖ done in ‚è± 1 minute and 31 seconds üêé 0.0/s
         Client@ 1[E]:gRPC error: StatusCode.UNAVAILABLE Socket closed
the ongoing request is terminated as the server is not available or closed already
          index@145[I]:recv SearchRequest (1/2 parts) from gateway‚ñ∏encode-head‚ñ∏encode-1‚ñ∏encode-tail‚ñ∏index-head‚ñ∏index-1‚ñ∏index-tail‚ñ∏‚öê
          index@145[I]:recv SearchRequest (2/2 parts) from gateway‚ñ∏encode-head‚ñ∏encode-1‚ñ∏encode-tail‚ñ∏index-head‚ñ∏index-2‚ñ∏index-tail‚ñ∏‚öê
       evaluate@154[I]:recv SearchRequest from gateway‚ñ∏encode-head‚ñ∏encode-1‚ñ∏encode-tail‚ñ∏index-head‚ñ∏index-1‚ñ∏index-2‚ñ∏index-tail‚ñ∏evaluate‚ñ∏‚öê
&lt;/denchmark-code&gt;

Describe how you solve it
I'm going to comment out the evaluation part in hello-world to maintain the best ux in hello-world.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Environment
Screenshots
	</description>
	<comments>
		<comment id='1' author='hanxiao' date='2020-12-20T11:06:47Z'>
		the problem is about evaluating against a groundtruth with 6k matches
		</comment>
		<comment id='2' author='hanxiao' date='2020-12-20T11:08:34Z'>
		
the problem is about evaluating against a groundtruth with 6k matches

but it's just id comparision
		</comment>
		<comment id='3' author='hanxiao' date='2020-12-20T11:11:05Z'>
		

the problem is about evaluating against a groundtruth with 6k matches

but it's just id comparision

Sure the implementation is not the most efficient one
		</comment>
		<comment id='4' author='hanxiao' date='2020-12-20T11:46:47Z'>
		note that the query only takes 4s against 60K indexed vectors. There is no reason why simply id-matching-evaluation would take more than that. Unacceptable performance.
		</comment>
	</comments>
</bug>