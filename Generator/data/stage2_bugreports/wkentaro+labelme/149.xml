<bug id='149' author='xikuibin' open_date='2018-05-02T05:27:35Z' closed_time='2018-05-02T07:45:27Z'>
	<summary>command line argument could not work</summary>
	<description>
def get_config(config_from_args=None, config_file=None):  in labelme/labelme/config/init.py do something in wrong order.
The command line arguments is used first
&lt;denchmark-code&gt;    if config_from_args is not None:
        update_dict(config, config_from_args,
                    validate_item=validate_config_item)
&lt;/denchmark-code&gt;

then covered by the values from '.labelmerc
&lt;denchmark-code&gt;    if os.path.exists(config_file):
        with open(config_file) as f:
            user_config = yaml.load(f) or {}
        update_dict(config, user_config, validate_item=validate_config_item)
&lt;/denchmark-code&gt;

So all command lines argument do not work.
It updating config by arguments before return, the command line arguments will work.
After reading the code. I think the flow will confuse the user.
If there is a config file '.labelmerc' in the user home, all command arguments will be overided.  It user want to some new argument, the only we is delete the '.labelmerc' manually or edit the '.labelmerc' directly.
Is this the design?
	</description>
	<comments>
		<comment id='1' author='xikuibin' date='2018-05-02T07:30:30Z'>
		&lt;denchmark-link:https://github.com/xikuibin&gt;@xikuibin&lt;/denchmark-link&gt;
 Thanks for reporting this. Yes, I think you're right, and it is a kind of bug.
I fix this by &lt;denchmark-link:https://github.com/wkentaro/labelme/pull/150&gt;#150&lt;/denchmark-link&gt;
, so could you try that?
		</comment>
	</comments>
</bug>