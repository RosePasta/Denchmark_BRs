<bug id='1412' author='tonyyang-svail' open_date='2019-12-13T05:58:37Z' closed_time='2019-12-17T05:39:01Z'>
	<summary>TestGetPodLogs fails randomly</summary>
	<description>
To reproduce, we can run TestGetPodLogs many times.
Sample script:
&lt;denchmark-code&gt;set -e
for i in {0..100}; do
	echo $i
	go test -run TestGetPodLogs
done
&lt;/denchmark-code&gt;

The test failed at the 17th run.
&lt;denchmark-code&gt;sqlflow/pkg/argo# bash long_test.sh
...
15
PASS
ok  	sqlflow.org/sqlflow/pkg/argo	10.109s
16
PASS
ok  	sqlflow.org/sqlflow/pkg/argo	8.144s
17
--- FAIL: TestGetPodLogs (9.48s)
    fetch_test.go:305:
        	Error Trace:	fetch_test.go:305
        	Error:      	Not equal:
        	            	expected: []string{"hello1", "hello2"}
        	            	actual  : []string{"hello1", "hello2", "hello3"}

        	            	Diff:
        	            	--- Expected
        	            	+++ Actual
        	            	@@ -1,4 +1,5 @@
        	            	-([]string) (len=2) {
        	            	+([]string) (len=3) {
        	            	  (string) (len=6) "hello1",
        	            	- (string) (len=6) "hello2"
        	            	+ (string) (len=6) "hello2",
        	            	+ (string) (len=6) "hello3"
        	            	 }
        	Test:       	TestGetPodLogs
FAIL
exit status 1
FAIL	sqlflow.org/sqlflow/pkg/argo	9.512s
&lt;/denchmark-code&gt;

Related code



sqlflow/pkg/argo/fetch_test.go


        Lines 275 to 302
      in
      a8ac42f






 func TestGetPodLogs(t *testing.T) { 



 if os.Getenv("SQLFLOW_TEST") != "workflow" { 



 t.Skip("argo: skip workflow tests") 



 	} 



 a := assert.New(t) 



 _, err := kubectlDeleteFromYAML(podYAML) 



 a.NoError(err) 



 podID, err := kubectlCreateFromYAML(podYAML) 



 a.NoError(err) 



 



 err = waitUntilPodRunning(podID) 



 a.NoError(err) 



 offset := "" 



 realLogs := []string{} 



 for { 



 logs, newOffset, err := getPodLogs(podID, offset) 



 a.NoError(err) 



 if len(logs) != 0 { 



 realLogs = append(realLogs, logs...) 



 		} 



 if isPodCompleted(podID) &amp;&amp; offset == newOffset { 



 break 



 		} 



 offset = newOffset 



 	} 



 a.Equal(realLogs, []string{"hello1", "hello2", "hello3"}) 



 



 } 





	</description>
	<comments>
	</comments>
</bug>