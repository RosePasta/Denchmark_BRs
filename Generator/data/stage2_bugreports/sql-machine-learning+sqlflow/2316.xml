<bug id='2316' author='weiguoz' open_date='2020-05-20T07:45:43Z' closed_time='2020-05-22T09:39:56Z'>
	<summary>Shall we find a way to specify the external parser</summary>
	<description>

SQLFlow determines the external parser by  which specified in DataSource string. e.g. &lt;denchmark-link:https://github.com/sql-machine-learning/sqlflow/blob/436d4559577ea3f2214f9cf3b8ffd255f399d788/doc/run_with_maxcompute.md#connect-existing-maxcompute-server&gt;maxcompute Datasource string&lt;/denchmark-link&gt;

For dialect maxcompute, we run the unit test well with calcite parser. However, in some company environments, it's more accurate to use the odps parser because of the Non-Open sourced syntax file.



sqlflow/pkg/parser/external/parser.go


        Lines 32 to 46
      in
      436d455






 // NewParser instantiates a parser. 



 func NewParser(dialect string) (Parser, error) { 



 switch dialect { 



 case "mysql", "tidb": 



 return newTiDBParser(), nil 



 case "hive": 



 return newJavaParser("hive"), nil 



 case "calcite", "maxcompute": 



 return newJavaParser("calcite"), nil 



 case "alisa": 



 return newJavaParser("odps"), nil 



 default: 



 return nil, fmt.Errorf("unrecognized dialect %s", dialect) 



 	} 



 } 





Describe the solution you'd like
It looks like we should find a way to specify the external parser.
	</description>
	<comments>
		<comment id='1' author='weiguoz' date='2020-05-20T15:38:41Z'>
		How about this? It seems only maxcompute has the issue.
	case "mysql", "tidb":
 		return newTiDBParser(), nil
 	case "hive":
 		return newJavaParser("hive"), nil
 	case "calcite":
 		return newJavaParser("calcite"), nil
	case "maxcompute":
		if parser := newJavaParser("odps"); parser != nil {
			return parser, nil
		}
		return newJavaParser("maxcompute"), nil
 	case "alisa":
 		return newJavaParser("odps"), nil
		</comment>
		<comment id='2' author='weiguoz' date='2020-05-21T08:57:31Z'>
		Hi &lt;denchmark-link:https://github.com/shendiaomo&gt;@shendiaomo&lt;/denchmark-link&gt;
, thanks for your suggestion.
To test if  is , we need to try to call the Parser firstly.
Let me do some tests.
		</comment>
		<comment id='3' author='weiguoz' date='2020-05-21T23:24:24Z'>
		
To test if newJavaParser("odps") is nil, we need to try to call the Parser firstly.

Maybe we can wrap a new Parser which is something like:
type ComposedParser struct {
    parsers []Parser
} 

func (parser *ComposedParser) Parse(stmt string) {
    for _, p := range parsers {
        ret, err := p.Parse(stmt)
        if err == nil {
            return ret
        }
    }
    return fmt.Errorf("...")
}
		</comment>
		<comment id='4' author='weiguoz' date='2020-05-22T02:10:12Z'>
		If we can't use odps parser, why should we add a maxcompute unit test run? Sorry, I'm not clear about the historical context.
		</comment>
		<comment id='5' author='weiguoz' date='2020-05-22T07:13:04Z'>
		

To test if newJavaParser("odps") is nil, we need to try to call the Parser firstly.

Maybe we can wrap a new Parser which is something like:
type ComposedParser struct {
    parsers []Parser
} 

func (parser *ComposedParser) Parse(stmt string) {
    for _, p := range parsers {
        ret, err := p.Parse(stmt)
        if err == nil {
            return ret
        }
    }
    return fmt.Errorf("...")
}

This approach, each stmt calls multi parsers. I would like to use a fixed parser currently.
		</comment>
	</comments>
</bug>