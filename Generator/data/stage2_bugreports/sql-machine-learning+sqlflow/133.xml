<bug id='133' author='tonyyang-svail' open_date='2018-12-06T23:02:47Z' closed_time='2020-09-14T14:23:42Z'>
	<summary>Determine the ordering of records for a SELECT statement in MySQL</summary>
	<description>
&lt;denchmark-link:https://dba.stackexchange.com/a/6053&gt;In SQL, a select statement does not guarantee consistent ordering between runs&lt;/denchmark-link&gt;
.
Say a user uses
SELECT *
FROM iris.iris
PREDICT iris.predict.class
USING my_dnn_model;
to predict class and store the prediction into table iris.predict, he/she can not directly compare it with ground truth iris.iris.class because the row ordering can be different.
So in order to produce useful prediction, we need to figure out a way to solve the correspondence.
ref: &lt;denchmark-link:https://dba.stackexchange.com/a/6053&gt;SQL doesn't guarantee ordering&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='tonyyang-svail' date='2018-12-06T23:18:32Z'>
		One possible solution: Add keyword ALONG and use id column to solve the correspondence.
First, the training data table has the following schema
&lt;denchmark-code&gt;id | sepal_length | sepal_width | petal_length | petal_width | class
&lt;/denchmark-code&gt;

We still use the original SQL statement to do training, note the id field is neither in COLUMN or LABEL
SELECT *
FROM iris.iris
TRAIN DNNClassifier
WITH
  n_classes = 3,
  hidden_units = [10, 20]
COLUMN sepal_length, sepal_width, petal_length, petal_width
LABEL class
INTO my_dnn_model;
However, during predicting, we use keyword ALONG to store columns other than predicted.
SELECT *
FROM iris.iris
PREDICT iris.predict.class
ALONG id
USING my_dnn_model;
And the predicted table iris.predict has the following schema
&lt;denchmark-code&gt;id | class
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='tonyyang-svail' date='2018-12-07T02:27:03Z'>
		Can we use the ORDER BY keyword instead of inventing the ALONG keyword?
Can we require users to write ORDER BY when they do prediction in verifier.go?
		</comment>
		<comment id='3' author='tonyyang-svail' date='2018-12-07T04:19:38Z'>
		I don't think ORDER BY will work. Say you predicted the data in certain order, then you do
INSERT INTO predTable (pred1)
INSERT INTO predTable (pred2)
INSERT INTO predTable (pred3)
You think the rows should have order pred1, pred2, pred3, however, when you do
SELECT pred
FROM predTable
The rows could come back as pred3, pred2, pred1. There is simple no way to compare two single-column tables. In the SQL world, order is not an inherent property of a set of data.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

As a sidenote, I believe we should add an id field to sqlfs. Something like
CREATE TABLE sqlflow_models.my_dnn_model (id INT AUTO_INCREMENT, block BLOB)
And retrive the blob through
SELECT block
FROM sqlflow_models.my_dnn_model 
ORDER BY id
		</comment>
		<comment id='4' author='tonyyang-svail' date='2018-12-07T04:23:31Z'>
		prediction result是不是不是用insert插入，而是用alter？
确实sqlfs应该有个id。现在bug不知道是不是这个原因
		</comment>
		<comment id='5' author='tonyyang-svail' date='2018-12-10T14:17:36Z'>
		It seems that by writing prediction result together with fields that were used to derive feature columns into a new table, we can avoid the problem that SQL doesn't return data in a certain order?
In particular, I mean, we just read from the prediction data table, row by row, in whatever order. For each row, we call the trained model to predict the class and write the row together with the predicted class as a new row in the result table, which differs from the (input) prediction data table.
What do you think about this approach? &lt;denchmark-link:https://github.com/tonyyang-svail&gt;@tonyyang-svail&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='tonyyang-svail' date='2018-12-10T23:17:12Z'>
		Sounds good to me. This approach doesn't require modification on the current user interface and solves the correspondence.
		</comment>
		<comment id='7' author='tonyyang-svail' date='2018-12-17T09:50:49Z'>
		Thanks to &lt;denchmark-link:https://github.com/Michael-GJJ&gt;@Michael-GJJ&lt;/denchmark-link&gt;
's input, it is common that some  rows are identical. Consider a prediction table that contains 



id
X1
X2
X3




1
1
1
1


2
1
1
1



If we save both X and predicted Y as



X1
X2
X3
Y




1
1
1
0


1
1
1
0



There is no way to tell which row belongs to id 1.
This is important because a data scientist usually uses JOIN to compare the predicted results with ground truth.
		</comment>
		<comment id='8' author='tonyyang-svail' date='2018-12-17T16:21:43Z'>
		It seems that we don’t need the column id in the prediction input table, thus no need to maintain the correspondence between rows and their id ‘s in the prediction output table.
		</comment>
		<comment id='9' author='tonyyang-svail' date='2020-09-14T14:23:39Z'>
		We can output the ID column together with features and predict results to the result table now. See the example here:



sqlflow/go/cmd/sqlflowserver/e2e_pai_maxcompute_test.go


         Line 126
      in
      39a9701






 func CasePAIMaxComputeTrainPredictDiffColumns(t *testing.T) { 





		</comment>
	</comments>
</bug>