<bug id='276' author='Bilal-Yousaf' open_date='2020-04-13T15:03:01Z' closed_time='2020-04-17T08:10:58Z'>
	<summary>Detection Accuracy of the person-vehicle-bike-detection-crossroad-1016 decreases a lot when converted to Openvino IR format</summary>
	<description>
Describe the bug
Steps to Reproduce

I have downloaded the model checkpoint available in the first table of this page: https://github.com/opencv/openvino_training_extensions/blob/develop/pytorch_toolkit/object_detection/person_vehicle_bike_detection.md
Run python ../../external/mmdetection/tools/test.py
$CONFIGURATION_FILE 
CHECKPOINT 
--show
to visualize the output on the sample airport data placed in data folder of openvino_training_extensions
Converted this checkpoint into Onnx format using python ../../external/mmdetection/tools/export.py 
$CONFIGURATION_FILE 
CHECKPOINT 
model.onnx
Converted it to IR format using ython ../../external/mmdetection/tools/convert_to_ir.py 
$CONFIGURATION_FILE 
model.onnx 
EXPORT_FOLDER
Then used python ../../external/mmdetection/tools/test_exported.py  
$CONFIGURATION_FILE 
EXPORT_FOLDER/model.xml 
--with_detection_output 
--show
to visualize output of IR format model.
The output of the converted model is very bad.

Environment:

OS: Ubuntu 18.04.4 LTS
Framework version: PyTorch 1.4.0
Python version: 3.7
OpenVINO version: 2020.1.023
CUDA/cuDNN version: 10.2
GPU model and memory: Nvidia Geforce GTX 1080Ti

Installation:
I have followed the installation steps mentioned in these links:

https://github.com/opencv/openvino_training_extensions
https://github.com/opencv/openvino_training_extensions/tree/develop/pytorch_toolkit/object_detection
https://github.com/opencv/mmdetection/tree/40adcb6418ac661c8edf10833b3b0ceac9ac9dd5

	</description>
	<comments>
		<comment id='1' author='Bilal-Yousaf' date='2020-04-14T07:00:42Z'>
		&lt;denchmark-link:https://github.com/Bilal-Yousaf&gt;@Bilal-Yousaf&lt;/denchmark-link&gt;
 thank you for your issue, but what you described should not work at all. The test_exported.py should throw an exception in described case. Please see the documentation.

If you exported model using export_ssd.py you need to add --with_detection_output option, otherwise you don't need to use such flag.

It is written here:
### 8. Validation of IR

Instead running of `test.py` you need to run `test_exported.py` and then repeat steps listed in [Validation paragraph](#5-validation).

If you exported model using `export_ssd.py` you need to add `--with_detection_output` option, otherwise you don't need to use such flag.

   ```bash
   python ../../external/mmdetection/tools/test_exported.py  \
          $CONFIGURATION_FILE \
          /model.xml \
          --with_detection_output \
          --out results.pkl \
          --eval bbox
   ```

In case of absence of clarification I will close the issue. Thank you.
		</comment>
		<comment id='2' author='Bilal-Yousaf' date='2020-04-14T21:00:52Z'>
		&lt;denchmark-link:https://github.com/Ilya-Krylov&gt;@Ilya-Krylov&lt;/denchmark-link&gt;
 Thanks for checking this. Actually I have tried both result is same.
But as you can see in the documentation the flag --with_detection_output is only needed when pth model is converted into onnx model using export_ssd.py file. And it is not needed when the model is converted from pth to onnx model using export.py. And as I have described I have used export.py in step 3.
But whichever you use model performs very bad even the one which is attached in the readme.
		</comment>
		<comment id='3' author='Bilal-Yousaf' date='2020-04-15T06:58:48Z'>
		&lt;denchmark-link:https://github.com/Bilal-Yousaf&gt;@Bilal-Yousaf&lt;/denchmark-link&gt;
 I can assume that you used wrong mmdetection submodule state (there was a parameter called do_not_normalize in test_exported.py, that affected on quality a lot), because I don't see significant difference between Pytorch model and model that was exported by export.py and model that was exported by export_ssd.py. They are good in detecting people on toy  data.
Also we simplified  our tools so that you don't need to use --with_detection_output. You need to use absolutely the same test_exported.py -related command line for both types of exported models. Please have a look at updated documetation. Please try it again. Don't forget to update submodules.
		</comment>
		<comment id='4' author='Bilal-Yousaf' date='2020-04-17T08:10:57Z'>
		&lt;denchmark-link:https://github.com/Bilal-Yousaf&gt;@Bilal-Yousaf&lt;/denchmark-link&gt;

There is a PR with export related tests &lt;denchmark-link:https://github.com/openvinotoolkit/training_extensions/pull/278&gt;#278&lt;/denchmark-link&gt;

Tests are passed , there is no significant difference between Pytorch model and exported to OpenVINO models. You can see logs here: &lt;denchmark-link:http://134.191.240.124/job/ote/job/precommit/job/pt_object_detection/30/execution/node/42/log/&gt;http://134.191.240.124/job/ote/job/precommit/job/pt_object_detection/30/execution/node/42/log/&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='Bilal-Yousaf' date='2020-04-17T12:00:57Z'>
		&lt;denchmark-link:https://github.com/Ilya-Krylov&gt;@Ilya-Krylov&lt;/denchmark-link&gt;
  Thanks a lot for your help.
Using the latest version solved my problem.
One point to note is that the problem was not in test_export.py but model converted using previous scripts export.py and convert_to_ir.py was not working well.
		</comment>
	</comments>
</bug>