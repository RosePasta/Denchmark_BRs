<bug id='27' author='LeoHSRodrigues' open_date='2019-06-11T14:33:16Z' closed_time='2019-06-18T23:20:09Z'>
	<summary>Persistable SVC Model</summary>
	<description>
Hi,
I'm currently trying to classify some text using the SVC classifier, i'm able to predict using the original object that i trained, but the problem occurs when i try to load the model, i get an error saying:
PHP Fatal error:  Uncaught svmexception: No model available to classify with in /var/www/html/rubix/vendor/rubix/ml/src/Classifiers/SVC.php:194
Stack trace:
#0 /var/www/html/rubix/vendor/rubix/ml/src/Classifiers/SVC.php(194): svmmodel-&gt;predict(Array)
&lt;denchmark-link:https://github.com/RubixML/ML/issues/1&gt;#1&lt;/denchmark-link&gt;
 /var/www/html/rubix/vendor/rubix/ml/src/Pipeline.php(178): Rubix\ML\Classifiers\SVC-&gt;predict(Object(Rubix\ML\Datasets\Unlabeled))
&lt;denchmark-link:https://github.com/RubixML/ML/issues/2&gt;#2&lt;/denchmark-link&gt;
 /var/www/html/rubix/vendor/rubix/ml/src/PersistentModel.php(129): Rubix\ML\Pipeline-&gt;predict(Object(Rubix\ML\Datasets\Unlabeled))
&lt;denchmark-link:https://github.com/RubixML/ML/issues/3&gt;#3&lt;/denchmark-link&gt;
 /var/www/html/rubix/teste2.php(26): Rubix\ML\PersistentModel-&gt;predict(Object(Rubix\ML\Datasets\Unlabeled))
&lt;denchmark-link:https://github.com/RubixML/ML/issues/4&gt;#4&lt;/denchmark-link&gt;
 {main}
thrown in /var/www/html/rubix/vendor/rubix/ml/src/Classifiers/SVC.php on line 194
There's something i didn't catch up?
	</description>
	<comments>
		<comment id='1' author='LeoHSRodrigues' date='2019-06-12T20:21:41Z'>
		Hi @leo23fla thank you for the great bug report
Rubix uses the &lt;denchmark-link:https://www.php.net/manual/en/book.svm.php&gt;svm&lt;/denchmark-link&gt;
 (libsvm) extension to power the &lt;denchmark-link:https://github.com/RubixML/RubixML#svc&gt;SVC&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/RubixML/RubixML#svr&gt;SVR&lt;/denchmark-link&gt;
, and &lt;denchmark-link:https://github.com/RubixML/RubixML#one-class-svm&gt;One Class SVM&lt;/denchmark-link&gt;
 estimators. It's entirely possible that the 'model' (created by the extension) is not being preserved through serialization.
I have a couple questions before I start working on this bug
Are you using the &lt;denchmark-link:https://github.com/RubixML/RubixML#native&gt;Native&lt;/denchmark-link&gt;
 Serializer or the &lt;denchmark-link:https://github.com/RubixML/RubixML#binary-serializer&gt;Binary&lt;/denchmark-link&gt;
 Serializer?
Also, are you using the &lt;denchmark-link:https://github.com/RubixML/RubixML#persistent-model&gt;Persistent Model&lt;/denchmark-link&gt;
 meta estimator as a wrapper around SVC or are you using a &lt;denchmark-link:https://github.com/RubixML/RubixML#persisters&gt;Persister&lt;/denchmark-link&gt;
 object directly?
		</comment>
		<comment id='2' author='LeoHSRodrigues' date='2019-06-12T21:22:06Z'>
		Hi, I'm currently using the Native Serializer and using the Persistent Model.
The train code:
const MODEL_FILE = 'SVC.model';
const PROGRESS_FILE = 'progress.csv';

set_time_limit(0);
ini_set('memory_limit', '-1');

$training = Labeled::build($samples, $labels);

$estimator = new PersistentModel(
    new Pipeline([
        new HTMLStripper(),
        new TextNormalizer(),
        new WordCountVectorizer(1000, 3, new NGram(1, 3)),
        new TfIdfTransformer(),
        new ZScaleStandardizer(),
    ], new SVC(1.0, new Linear(), true, 1e-3, 100.)),
    new Filesystem(MODEL_FILE, true , new Native())
);

$estimator-&gt;setLogger(new Screen('sentiment'));

$estimator-&gt;train($training);

$estimator-&gt;save();
and my load model code:
const MODEL_FILE = 'SVC.model';

set_time_limit(0);
ini_set('memory_limit', '-1');

$estimator = PersistentModel::load(new Filesystem(MODEL_FILE));

$result = $estimator-&gt;predict($dataset);

var_dump($result);
		</comment>
		<comment id='3' author='LeoHSRodrigues' date='2019-06-13T00:37:34Z'>
		Thanks @leo23fla
I was able to reproduce the error
It looks like SVM extension has a separate API for saving and loading the model from disk
I will reach out to the author Ian to see if there is a way we can make the Rubix persistable subsystem jive with the way that the libsvm extension saves/loads the model
There may be some things we can do with magic methods, however I will have to see if they will work with the RedisDB persister (not just disk) as well
The worst case will be that libsvm-based learners won't be able to implement the Persistable interface - instead, we'd have a separate save() and load() method that just takes a file path argument (using the svm extension mechanism under the hood)
I'll keep you posted and feel free to respond with any of your thoughts
		</comment>
		<comment id='4' author='LeoHSRodrigues' date='2019-06-13T01:04:24Z'>
		Ok. Hope everything goes well.
		</comment>
		<comment id='5' author='LeoHSRodrigues' date='2019-06-13T01:38:23Z'>
		In the interim, I'd recommend trying out a &lt;denchmark-link:https://github.com/RubixML/RubixML#neural-network&gt;Neural Network&lt;/denchmark-link&gt;
 based learner such as &lt;denchmark-link:https://github.com/RubixML/RubixML#multi-layer-perceptron&gt;Multi Layer Perceptron&lt;/denchmark-link&gt;
 or &lt;denchmark-link:https://github.com/RubixML/RubixML#softmax-classifier&gt;Softmax Classifier&lt;/denchmark-link&gt;
 on your problem
I've persisted/loaded those many times and works without fault
		</comment>
		<comment id='6' author='LeoHSRodrigues' date='2019-06-18T23:19:18Z'>
		@leo23fla
As a preliminary fix to this bug we've gone ahead and dropped the Persistable contract between all SVM-based learners
Instead, we've put a save() and load() method on each class that allows you to save model data to a file and subsequently load the model data in another process
Documentation can be found here &lt;denchmark-link:https://github.com/RubixML/RubixML#svc&gt;https://github.com/RubixML/RubixML#svc&lt;/denchmark-link&gt;

These operations are independent of the Rubix Persistable subsystem as the php-svm extension is not compatible with it (does not implement serialization of the model data itself)
I've reached out to the author to coordinate a fix the issue, however, I have not had a response yet
If warranted, I will use a separate issue to address getting the SVM-based learners back on the Persistable system
One way that this could work is to use __sleep() and __wakeup() magic methods to essentially save the model params to a file first, read it back, and store it in the learner prior to serialization - however, this sounds janky to me and will probably not implement this (but it's an example of what can be done)
I'm closing the issue, as the bug is technically fixed but feel free to continue the conversation by way of your thoughts and/or questions
Thank you again for the great bug report
		</comment>
	</comments>
</bug>