<bug id='19' author='gdesoto-lhs' open_date='2019-03-26T15:55:45Z' closed_time='2019-04-11T04:11:04Z'>
	<summary>Load from Binary Serializer causes "Object Not Found" error on partial training</summary>
	<description>
Describe the bug
When loading a model using the binary serializer and doing a partial train on the model, an error is thrown. "UnexpectedValueException: Object not found". The exact line that throws the error is line 119 of Optimizers\Adam.php.
[$velocity, $g2] = $this-&gt;cache[$param];
This does not occur when using the native serializer. My guess is that the binary serializer is not restoring the protected properties in Adam.php
To Reproduce
Steps to reproduce the behavior:

Create MLP estimator using Adam optimizer
Train MLP
Save model to Filesystem or Redis using Binary serializer
Load model
Do a partial train on the model.
See error

Expected behavior
No error. The model should train successfully after being reloaded.
Additional context
I'm basing the MLP based on the one used in the Text Sentiment repo which uses a Pipeline to initialize the estimator. Below is a stack trace. On a side note, seriously great project. Thanks for your effort. It motivated me to learn more about ML.
Stacktrace
&lt;denchmark-code&gt;[2019-03-26 09:45:59] local.ERROR: Object not found {"userId":1,"exception":"[object] (UnexpectedValueException(code: 0): Object not found at C:\\[path]\\vendor\
ubix\\ml\\src\\NeuralNet\\Optimizers\\Adam.php:119):
[stacktrace]
0. C:\\[path]\\vendor\
ubix\\ml\\src\\NeuralNet\\Optimizers\\Adam.php(119): SplObjectStorage-&gt;offsetGet(Object(Rubix\\ML\\NeuralNet\\Parameter))
1. C:\\[path]\\vendor\
ubix\\ml\\src\\NeuralNet\\Layers\\Multiclass.php(266): Rubix\\ML\\NeuralNet\\Optimizers\\Adam-&gt;step(Object(Rubix\\ML\\NeuralNet\\Parameter), Object(Rubix\\Tensor\\Matrix))
2. C:\\[path]\\vendor\
ubix\\ml\\src\\NeuralNet\\FeedForward.php(212): Rubix\\ML\\NeuralNet\\Layers\\Multiclass-&gt;back(Array, Object(Rubix\\ML\\NeuralNet\\Optimizers\\Adam))
3. C:\\[path]\\vendor\
ubix\\ml\\src\\NeuralNet\\FeedForward.php(169): Rubix\\ML\\NeuralNet\\FeedForward-&gt;backpropagate(Array)
4. C:\\[path]\\vendor\
ubix\\ml\\src\\Classifiers\\MultiLayerPerceptron.php(373): Rubix\\ML\\NeuralNet\\FeedForward-&gt;roundtrip(Object(Rubix\\ML\\Datasets\\Labeled))
5. C:\\[path]\\vendor\
ubix\\ml\\src\\Pipeline.php(164): Rubix\\ML\\Classifiers\\MultiLayerPerceptron-&gt;partial(Object(Rubix\\ML\\Datasets\\Labeled))
6. C:\\[path]\\app\\Http\\Controllers\\TestController.php(286): Rubix\\ML\\Pipeline-&gt;partial(Object(Rubix\\ML\\Datasets\\Labeled))
7. C:\\[path]\\app\\Http\\Controllers\\TestController.php(98): App\\Http\\Controllers\\TestController-&gt;tweetSentiment()
8. [internal function]: `App\\Http\\Controllers\\TestController-&gt;test()
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='gdesoto-lhs' date='2019-03-27T01:32:06Z'>
		Thank you for the great bug report
This is an interesting one
The bug appears after reconstituting a binary serialized neural network based estimator such as MLP or Logistic Regression with an Adaptive Optimizer (Adam, Momentum, etc.)
Indeed, everything works fine using the Native serializer, and a non-adaptive optimizer (Stochastic, Cyclical, etc.) work ok as well
My gut says that it's something with the igbinary extension (the extension doing the work under the hood)
Specifically, it might have a problem serializing/unserializing the \SplObjectStorage (a hash map structure that uses object hashes as keys)
For example, maybe the object hashes are not being preserved through the deep freeze
That cache you see on line 119 is an \SplObjectStorage that holds the per parameter running velocities and squared gradients needed for the adaptive calculation
\SplObjectStorage is one thing that all the Adaptive Optimizers have in common
I'm going to continue doing some research
		</comment>
		<comment id='2' author='gdesoto-lhs' date='2019-04-11T04:11:04Z'>
		This was a curious issue
It looked as if after the Parameter objects were deserialized from persistence they hashed to a slightly different value even with the Native serializer (off by 1ish) and a more different value with the Binary serializer (off by 7ish)
Rather than having to go through the igbinary guys to see if it was a bug with their extension, I just designed the cache differently and now we don't have to worry about object hashes at all
You can try it out using the current dev-master branch, or you can wait for the next beta release in a few days
Thanks again for the great bug report
		</comment>
	</comments>
</bug>