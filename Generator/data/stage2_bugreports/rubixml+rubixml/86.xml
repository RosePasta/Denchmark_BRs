<bug id='86' author='samuraya' open_date='2020-07-16T10:42:28Z' closed_time='2020-07-20T17:07:08Z'>
	<summary>PHP Warning:  Division by zero in MulticlassBreakdown class. This warning eventually ends up breaking report generation</summary>
	<description>
Hi Andrew! I am aware that you updated the MulticlassBreakdown class with comments mentioning removal of division by zero checks. Curios to know if you caught any warnings or errors up until now after your recent update.
This ends up giving a warning and empty json report when calling $report-&gt;generate($predictions, $testing-&gt;labels()).
Thanks for the cool library by the way! I am using this for my research project
	</description>
	<comments>
		<comment id='1' author='samuraya' date='2020-07-16T11:43:32Z'>
		Hey &lt;denchmark-link:https://github.com/samuraya&gt;@samuraya&lt;/denchmark-link&gt;
 that's awesome what is your research project about?
Can you please post your code? Can you also post the full exception including line numbers? Can you also do a count() or empty() on the predictions and/or labels array to make sure it's not empty?
Once we get these key details I can start troubleshooting the issue you encountered.
		</comment>
		<comment id='2' author='samuraya' date='2020-07-16T15:32:42Z'>
		&lt;denchmark-link:https://github.com/andrewdalpino&gt;@andrewdalpino&lt;/denchmark-link&gt;
, here you go. FYI, I have tried data pre-processing with $data-&gt;apply method too, instead of doing it through Pipeline. Same outcome. Attached is the screenshot of the error
&lt;denchmark-link:https://user-images.githubusercontent.com/61466437/87690121-3cb83500-c7b3-11ea-99dd-e8976bf103ee.png&gt;&lt;/denchmark-link&gt;

Here is the code:
`&lt;?php
include DIR . '/../vendor/autoload.php';
use Rubix\ML\Datasets\Labeled;
use Rubix\ML\Extractors\CSV;
use Rubix\ML\Classifiers\KNearestNeighbors;
use Rubix\ML\Transformers\NumericStringConverter;
use Rubix\ML\Transformers\RobustStandardizer;
use Rubix\ML\Pipeline;
use Rubix\ML\CrossValidation\Reports\AggregateReport;
use Rubix\ML\CrossValidation\Reports\ConfusionMatrix;
use Rubix\ML\CrossValidation\Reports\MulticlassBreakdown;
$dataset = Labeled::fromIterator(new CSV('dataset.csv', true,';'));
[$training, $testing] = $dataset-&gt;stratifiedSplit(0.80);
$estimator = new Pipeline(
[new NumericStringConverter(),new RobustStandardizer()],
new KNearestNeighbors(19)
);
$estimator-&gt;train($training);
$predictions = $estimator-&gt;predict($testing);
$report = new AggregateReport([
new MulticlassBreakdown(),
new ConfusionMatrix(),
]);
echo "number of items in predictions = ".count($predictions);
echo "
number of items in test labels = ".count($testing-&gt;labels());
$results = $report-&gt;generate($predictions, $testing-&gt;labels());
?&gt;
`
in regard to my research, I am integrating machine learning services into existing opensource ERP systems. Maybe it will help small and medium sized businesses to realize some savings during current economic gloom
		</comment>
		<comment id='3' author='samuraya' date='2020-07-17T02:42:19Z'>
		Thanks &lt;denchmark-link:https://github.com/samuraya&gt;@samuraya&lt;/denchmark-link&gt;
 sounds like you have a great project on your hands, keep it up!
So here is the failing code - for it to divide by zero both true positives and false positives have to be 0. It's a valid condition so I think I'll go ahead and put those checks back in.
&lt;denchmark-link:https://user-images.githubusercontent.com/18690561/87742483-75084500-c7ac-11ea-8924-15773496f8d7.png&gt;&lt;/denchmark-link&gt;

As a side note, in order to obtain 0 true and false positives for a class that would mean the estimator never predicted that class yet there were at least 1 samples from the testing set that was labeled that class. How does your model perform on other classes or have you not gotten to that point yet?
		</comment>
		<comment id='4' author='samuraya' date='2020-07-17T05:08:04Z'>
		Ok I reverted to the old method of substituting EPSILON for 0 to avoid the division by 0. Should be fixed in &lt;denchmark-link:https://github.com/RubixML/ML/commit/ed6e7cf1959febb348629bc9895336f32fb5bdb5&gt;ed6e7cf&lt;/denchmark-link&gt;
. You can download the latest dev-master from composer to try it out.
While I was working on this, I took a look at Scikit Learn to see how they handled this situation. It looks like they set the metric to 0 by default.
&lt;denchmark-link:https://user-images.githubusercontent.com/18690561/87750364-ddf9b800-c7c0-11ea-8d66-6b766228a510.png&gt;&lt;/denchmark-link&gt;

This is roughly equivalent to what we're doing with EPSILON substitution as 0 / EPSILON is still 0. This would not be true, however, if true positives didn't appear in both the numerator and denominator. Just making a note of that here for future reference.
Let me know if that solved the problem and thank you for the great bug report! Feel free to join our channel on Telegram &lt;denchmark-link:https://t.me/RubixML&gt;https://t.me/RubixML&lt;/denchmark-link&gt;
 :)
P.S. Have you tried &lt;denchmark-link:https://docs.rubixml.com/en/latest/classifiers/kd-neighbors.html&gt;KD Neighbors&lt;/denchmark-link&gt;
 yet? It's a binary spatial tree-accelerated version of K Nearest Neighbors and it's way faster than brute-force KNN.
		</comment>
		<comment id='5' author='samuraya' date='2020-07-18T14:02:13Z'>
		glad to be of help. I will try the new version out.
I am using KNN for a demo example as it is easier to understand intuitively for readers. Otherwise, what you are saying completely makes sense.
		</comment>
		<comment id='6' author='samuraya' date='2020-07-20T17:29:56Z'>
		Ok, issue fixed!
		</comment>
	</comments>
</bug>