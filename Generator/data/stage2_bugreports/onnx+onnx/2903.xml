<bug id='2903' author='dtch1997' open_date='2020-07-15T18:33:04Z' closed_time='2020-07-22T19:06:22Z'>
	<summary>ONNX shape inference does not infer shapes</summary>
	<description>
&lt;denchmark-h:h1&gt;Bug Report&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Describe the bug&lt;/denchmark-h&gt;

onnx.shape_inference.infer_shapes does not correctly infer shape of each layer.
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution: Windows 10
ONNX version: 1.7.0
Python version: 3.7.4

&lt;denchmark-h:h3&gt;Reproduction instructions&lt;/denchmark-h&gt;


Describe the code to reproduce the behavior.

&lt;denchmark-code&gt;model = onnx.load("models/conv_dummy.onnx")
onnx.checker.check_model(model)
inferred_model = onnx.shape_inference.infer_shapes(model)
print(inferred_model.graph.value_info)
&lt;/denchmark-code&gt;

output:
&lt;denchmark-code&gt;[name: "9"
type {
  tensor_type {
    elem_type: 1
  }
}
, name: "10"
type {
  tensor_type {
    elem_type: 1
  }
}
, name: "11"
type {
  tensor_type {
    elem_type: 1
  }
}
, name: "12"
type {
  tensor_type {
    elem_type: 1
  }
}
, name: "13"
type {
  tensor_type {
    elem_type: 1
  }
}
, name: "14"
type {
  tensor_type {
    elem_type: 1
  }
}
]
&lt;/denchmark-code&gt;

Model file: &lt;denchmark-link:https://github.com/onnx/onnx/files/4927215/models.zip&gt;models.zip&lt;/denchmark-link&gt;

&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

Expected each entry in model.graph.value_info to have tensor shape field which tells me the shape of that layer.
&lt;denchmark-h:h3&gt;Notes&lt;/denchmark-h&gt;

Model was exported from PyTorch using torch.onnx.export
	</description>
	<comments>
		<comment id='1' author='dtch1997' date='2020-07-15T20:25:54Z'>
		Hi &lt;denchmark-link:https://github.com/dtch1997&gt;@dtch1997&lt;/denchmark-link&gt;
,
It seems like a IR gap issue. It should be fixed by &lt;denchmark-link:https://github.com/onnx/onnx/pull/2901&gt;#2901&lt;/denchmark-link&gt;
.
I got the following result by this PR:
&lt;denchmark-code&gt;[name: "9"
type {
  tensor_type {
    elem_type: 1
    shape {
      dim {
        dim_value: 10
      }
      dim {
        dim_value: 32
      }
      dim {
        dim_value: 128
      }
      dim {
        dim_value: 128
      }
    }
  }
}
, name: "10"
type {
  tensor_type {
    elem_type: 1
    shape {
      dim {
        dim_value: 10
      }
      dim {
        dim_value: 32
      }
      dim {
        dim_value: 128
      }
      dim {
        dim_value: 128
      }
    }
  }
}
, name: "11"
type {
  tensor_type {
    elem_type: 1
    shape {
      dim {
        dim_value: 10
      }
      dim {
        dim_value: 32
      }
      dim {
        dim_value: 128
      }
      dim {
        dim_value: 128
      }
    }
  }
}
, name: "12"
type {
  tensor_type {
    elem_type: 1
    shape {
      dim {
        dim_value: 10
      }
      dim {
        dim_value: 32
      }
      dim {
        dim_value: 128
      }
      dim {
        dim_value: 128
      }
    }
  }
}
, name: "13"
type {
  tensor_type {
    elem_type: 1
    shape {
      dim {
        dim_value: 10
      }
      dim {
        dim_value: 32
      }
      dim {
        dim_value: 1
      }
      dim {
        dim_value: 1
      }
    }
  }
}
, name: "14"
type {
  tensor_type {
    elem_type: 1
    shape {
      dim {
        dim_value: 10
      }
      dim {
        dim_value: 32
      }
    }
  }
}
]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='dtch1997' date='2020-07-22T10:50:56Z'>
		&lt;denchmark-link:https://github.com/jcwchen&gt;@jcwchen&lt;/denchmark-link&gt;
 I'm having trouble building from source (as seen in &lt;denchmark-link:https://github.com/onnx/onnx/issues/2916&gt;#2916&lt;/denchmark-link&gt;
). is there any workaround I can use while I wait for this to be fixed? E.g. use an older ONNX version or older opset, or manually add all initializer to model input
		</comment>
		<comment id='3' author='dtch1997' date='2020-07-22T16:20:43Z'>
		For temporary solution, you could manually add all initializer to model input like &lt;denchmark-link:https://github.com/TMVector&gt;@TMVector&lt;/denchmark-link&gt;
 mentioned &lt;denchmark-link:https://github.com/onnx/onnx/issues/2660#issuecomment-605874784&gt;here&lt;/denchmark-link&gt;
. Thanks.
		</comment>
		<comment id='4' author='dtch1997' date='2020-07-22T19:06:22Z'>
		Good workaround. Adding a line add_value_info_for_constants(model) before shape inference runs correctly.
		</comment>
		<comment id='5' author='dtch1997' date='2020-08-11T17:12:18Z'>
		Hi &lt;denchmark-link:https://github.com/dtch1997&gt;@dtch1997&lt;/denchmark-link&gt;
,
The PR &lt;denchmark-link:https://github.com/onnx/onnx/pull/2901&gt;#2901&lt;/denchmark-link&gt;
 has been merged. Now you can solve this issue by using the master branch of onnx. Thanks.
		</comment>
		<comment id='6' author='dtch1997' date='2020-12-28T10:33:02Z'>
		Hi &lt;denchmark-link:https://github.com/jcwchen&gt;@jcwchen&lt;/denchmark-link&gt;
 ,
I'm on the latest branch of onnx but I'm still facing this issue. I'm using shufflenet onnx model which you can get from &lt;denchmark-link:https://github.com/onnx/models/blob/master/vision/classification/shufflenet/model/shufflenet-v2-10.onnx&gt;here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='7' author='dtch1997' date='2020-12-28T15:49:06Z'>
		Hi &lt;denchmark-link:https://github.com/deepak0896&gt;@deepak0896&lt;/denchmark-link&gt;
,
Did you use onnx 1.8? I can successfully shape infer with shufflenet.
		</comment>
		<comment id='8' author='dtch1997' date='2020-12-28T16:59:59Z'>
		Hi &lt;denchmark-link:https://github.com/jcwchen&gt;@jcwchen&lt;/denchmark-link&gt;
,
yes I'm using onnx 1.8. And I'm getting inferred shapes for some of the nodes not all.
For example, a part of output  is :
name: "377"
type {
tensor_type {
elem_type: 1
shape {
dim {
dim_value: 1
}
dim {
dim_value: 116
}
dim {
dim_value: 28
}
dim {
dim_value: 28
}
}
}
}
, name: "378"
type {
tensor_type {
elem_type: 1
}
}
, name: "379"
type {
tensor_type {
elem_type: 1
}
}
, name: "380"
type {
tensor_type {
elem_type: 1
}
}
, name: "381"
type {
tensor_type {
elem_type: 1
}
}
, name: "382"
type {
tensor_type {
elem_type: 1
}
}
, name: "383"
type {
tensor_type {
elem_type: 1
}
}
, name: "384"
type {
tensor_type {
elem_type: 1
}
}
, name: "385"
type {
tensor_type {
elem_type: 1
}
}
, name: "386"
type {
tensor_type {
elem_type: 1
}
}
, name: "387"
type {
tensor_type {
elem_type: 1
}
}
, name: "388"
type {
tensor_type {
elem_type: 1
}
}
, name: "389"
type {
tensor_type {
elem_type: 7
shape {
dim {
dim_value: 5
}
}
}
}
, name: "390"
type {
tensor_type {
elem_type: 1
shape {
dim {
dim_value: 1
}
dim {
dim_value: 2
}
dim {
dim_value: 58
}
dim {
dim_value: 28
}
dim {
dim_value: 28
}
}
}
}
		</comment>
		<comment id='9' author='dtch1997' date='2020-12-28T18:27:12Z'>
		Thank you for the details. I found the shapes of nodes after every Split node will be missing... There might be a shape inference bug for Split-10... Perhaps &lt;denchmark-link:https://github.com/onnx/onnx/pull/2549&gt;#2549&lt;/denchmark-link&gt;
 can help
		</comment>
		<comment id='10' author='dtch1997' date='2020-12-28T18:36:25Z'>
		I have confirmed that PR can help and you can try that first. I will push that PR forward. Thanks.
		</comment>
	</comments>
</bug>