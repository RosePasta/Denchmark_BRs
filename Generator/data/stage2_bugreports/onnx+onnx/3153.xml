<bug id='3153' author='jiafatom' open_date='2020-12-08T03:01:11Z' closed_time='2021-01-07T05:47:48Z'>
	<summary>Suggest Conv, ConvTranspose spec update for auto_pad=SAME_UPPER/LOWER</summary>
	<description>
&lt;denchmark-h:h1&gt;Bug Report&lt;/denchmark-h&gt;

I would suggest that we do
a spec update for ONNX Conv, and ConvTranspose,
to align the keras/tensorflow Conv/ConvTranspose when padding=same, strides &gt;1.
We have four real github keras models that depend on this change.
Current:
Conv auto_pad='SAME_LOWER'/'SAME_UPPER',
output_shape[i] = input_shape[i]
ConvTranspose auto_pad='SAME_LOWER'/'SAME_UPPER',
output_shape[i] = input_shape[i]
Proposed change:
Conv auto_pad='SAME_LOWER'/'SAME_UPPER',
output_shape[i] = ceil(input_shape[i] / strides[i])
ConvTranspose auto_pad='SAME_LOWER'/'SAME_UPPER',
output_shape[i] = input_shape[i] * strides[i]
This is a reasonable change if we are standing from machine learning algorithm perspective:
'SAME_LOWER'/'SAME_UPPER' padding should be close to no padding, so the strides does make effect.
In addition, dilation&gt;1 for padding=same may also have similar issue. Since dilation&gt;1 and strides&gt;1 does not coexist, we may also consider this.
&lt;denchmark-h:h3&gt;Is the issue related to model conversion?&lt;/denchmark-h&gt;

No
&lt;denchmark-h:h3&gt;Describe the bug&lt;/denchmark-h&gt;

I have a keras model and wants to convert to ONNX. (tensorflow model has same issue)
This model has a dynamic input shape to keras Conv2DTranspose, and padding='same'.
The current converter convert to onnx op ConvTranspose, and set attribute auto_pad='SAME_LOWER' ('SAME_UPPER' the same) which is the closest I can get.
However, it does not align to keras output shape, as you can see,
the keras output shape is (2,6,4,8), onnx output shape is (2,2,2,8) according to spec.
The difference is because onnx shape is inconsistent when .
See here tensorflow conv2d_transpose,
&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/nn/conv2d_transpose&gt;https://www.tensorflow.org/api_docs/python/tf/nn/conv2d_transpose&lt;/denchmark-link&gt;

It uses a padding algorithm that is in
&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/nn/convolution&gt;https://www.tensorflow.org/api_docs/python/tf/nn/convolution&lt;/denchmark-link&gt;

See the description,
If padding == "SAME": output_spatial_shape[i] = ceil(input_spatial_shape[i] / strides[i])
So strides does make effect here. Note here is the case for conv, so conv2dtranspose is opposite that
output_spatial_shape[i] = input_spatial_shape[i] * strides[i]
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


ONNX version (e.g. 1.7):  1.8

&lt;denchmark-h:h3&gt;Reproduction instructions&lt;/denchmark-h&gt;


Describe the code to reproduce the behavior.

Lambda = keras.layers.Lambda
Conv2DTranspose = keras.layers.Conv2DTranspose

def my_func(x):
    frame_dim = tf.shape(x)[2]
    return x[:, :-1, 1:frame_dim - 1, :]

model = Sequential()
filters = 8
kernel_size = (2, 5)
strides = (3, 2)
model.add(Lambda(my_func, input_shape=[3, 4, 5]))
model.add(Conv2DTranspose(filters, kernel_size, strides=strides, use_bias=False,
                            padding="same", name='conv2d_transpose'))
data1 = np.random.rand(2 * 3 * 4 * 5).astype(np.float32).reshape(2, 3, 4, 5)
expected = model.predict(data1)
onnx_model = keras2onnx.convert_keras(model, 'test_conv_transpose_dynamic')
	</description>
	<comments>
		<comment id='1' author='jiafatom' date='2020-12-08T03:12:15Z'>
		@onnx/sig-operators
		</comment>
		<comment id='2' author='jiafatom' date='2021-01-07T05:47:48Z'>
		spec update done in &lt;denchmark-link:https://github.com/onnx/onnx/pull/3188&gt;PR&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>