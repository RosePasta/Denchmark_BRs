<bug id='2881' author='buddhapuneeth' open_date='2020-07-06T19:21:27Z' closed_time='2020-09-03T19:32:35Z'>
	<summary>Backward LSTM results mismatch between TF and ONNXRuntime</summary>
	<description>
&lt;denchmark-h:h1&gt;Bug Report&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Describe the bug&lt;/denchmark-h&gt;

Backward LSTM results mismatch between TF and ONNXRuntime.
in TF runtime (tf.keras), say 1,2,3 are time frames.. output of reverse LSTM will be op3 op2 op1. where as in ONNXRuntime it will be op1 op2 op3. Either ONNX converters need to add a reverseV2 operator after backward LSTM or need to handle on the ONNXRuntime.
I hack this with change in keras2onnx, but I would like to get confirmation on the expected behavior.
(refer to &lt;denchmark-link:https://github.com/onnx/keras-onnx/issues/523&gt;onnx/keras-onnx#523&lt;/denchmark-link&gt;
)
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution (e.g. Linux Ubuntu 16.04):  MacOS mojave
ONNX version (e.g. 1.7):  1.6
Python version: 3.6
GCC/Compiler version (if compiling from source): fcc 11
CMake version:
Protobuf version:
Visual Studio version (if applicable):

&lt;denchmark-h:h3&gt;Reproduction instructions&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/onnx/onnx/files/4880846/simple_lstm.txt&gt;simple_lstm.txt&lt;/denchmark-link&gt;

-rename the above file to .h5
Converted ONNX file
&lt;denchmark-link:https://drive.google.com/file/d/1PnvQ5TAR20OWQFfLj8VeVBdpOU6wTMBA/view?usp=sharing&gt;https://drive.google.com/file/d/1PnvQ5TAR20OWQFfLj8VeVBdpOU6wTMBA/view?usp=sharing&lt;/denchmark-link&gt;

-run with some random input on tf.keras backend and on onnxruntime and compare results.
-outputs are just reverse to each other.
Alternatively, you can try this:
code for reverse LSTM:
&lt;denchmark-code&gt;max_features = 10
maxlen = 10
model = Sequential()
model.add(Embedding(max_features, 128, input_length=maxlen))

model.add(LSTM(64, go_backwards=True, return_sequences = True))
model.add(Dense(1, activation='sigmoid'))
model.compile('adam', 'binary_crossentropy', metrics=['accuracy'])


from keras.models import load_model
model.save('simple_rev_lstm.h5')
&lt;/denchmark-code&gt;

To compare results with other inference engines and ONNXRuntime
&lt;denchmark-code&gt;# pip install onnxruntime
#env TF_KERAS=1
import numpy as np
import onnxruntime
from tensorflow.keras.models import load_model as load_model_tf_keras
np.random.seed(0)
input_data = np.random.randint(10, size=(2, 10))
# with CustomObjectScope({'GlorotUniform': glorot_uniform()}):
sess = onnxruntime.InferenceSession("simple_rev_lstm.onnx")
result = sess.run(["dense_1"], {'embedding_1_input': input_data.astype(np.float32)})
print("ONNX Runtime")
print(np.asarray(result[0]))

model = load_model_tf_keras('simple_rev_lstm.h5')
result = model.predict(input_data)
print("TF Runtime")
print(result)
&lt;/denchmark-code&gt;

OUTPUT:
&lt;denchmark-code&gt;ONNX Runtime
[[[0.5028585 ]
  [0.51010513]
  [0.5096171 ]
  [0.50567615]
  [0.50046337]
  [0.50202006]
  [0.5010086 ]
  [0.49436894]
  [0.4989641 ]
  [0.50032514]]

 [[0.50235206]
  [0.5045772 ]
  [0.504677  ]
  [0.5032916 ]
  [0.5016299 ]
  [0.50043035]
  [0.4991624 ]
  [0.50064933]
  [0.5028503 ]
  [0.5012636 ]]]

TF Runtime
[[[0.50032514]
  [0.4989641 ]
  [0.49436894]
  [0.5010086 ]
  [0.50202006]
  [0.50046337]
  [0.50567615]
  [0.5096171 ]
  [0.51010513]
  [0.5028585 ]]

 [[0.5012636 ]
  [0.5028503 ]
  [0.50064933]
  [0.4991624 ]
  [0.50043035]
  [0.5016299 ]
  [0.5032916 ]
  [0.504677  ]
  [0.5045773 ]
  [0.50235206]]]
&lt;/denchmark-code&gt;

Observation:
The values are in reverse to each other on axis 1.
Not sure which is correct behavior.
Expected behavior
outputs should be same
&lt;denchmark-h:h3&gt;Notes&lt;/denchmark-h&gt;

Any additional information
	</description>
	<comments>
		<comment id='1' author='buddhapuneeth' date='2020-09-03T19:30:09Z'>
		We had a fix in keras-onnx side, see the reference issue above. So this issue can be closed.
		</comment>
	</comments>
</bug>