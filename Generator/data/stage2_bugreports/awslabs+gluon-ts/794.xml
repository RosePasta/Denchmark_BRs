<bug id='794' author='stellaywu' open_date='2020-04-28T18:00:51Z' closed_time='2020-05-05T11:34:35Z'>
	<summary>deepstate asks for cardinality while use_feat_static_cat is set to False</summary>
	<description>
Using gluonts 0.4.2 got error message when trying
estimator = DeepStateEstimator( freq='D', prediction_length=prediction_length, past_length=context_length, use_feat_static_cat=False, use_feat_dynamic_real=True, trainer=Trainer(ctx="cpu",  epochs=50,   learning_rate=1e-3,  num_batches_per_epoch=100 ) ) 
error message as follows. What makes sense to put for cardinality when use_feat_static_cat is set to False? Thank you!
&lt;denchmark-code&gt;--------------------------------------------------------------------------
ValidationError                           Traceback (most recent call last)
&lt;ipython-input-454-045457f005f5&gt; in &lt;module&gt;
      9                     epochs=50,
     10                     learning_rate=1e-3,
---&gt; 11                     num_batches_per_epoch=100
     12                    )
     13 )

/anaconda3/lib/python3.7/site-packages/gluonts/core/component.py in init_wrapper(*args, **kwargs)
    422                 if name != "self"
    423             }
--&gt; 424             model = PydanticModel(**{**nmargs, **kwargs})
    425 
    426             # merge nmargs, kwargs, and the model fields into a single dict

/anaconda3/lib/python3.7/site-packages/pydantic/main.py in __init__(__pydantic_self__, **data)
    281         values, fields_set, validation_error = validate_model(__pydantic_self__.__class__, data)
    282         if validation_error:
--&gt; 283             raise validation_error
    284         object.__setattr__(__pydantic_self__, '__dict__', values)
    285         object.__setattr__(__pydantic_self__, '__fields_set__', fields_set)

ValidationError: 1 validation error for DeepStateEstimatorModel
cardinality
  field required (type=value_error.missing)
```
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='stellaywu' date='2020-04-30T07:17:59Z'>
		This may be a bug: I think the intended behavior is that if you disable categorical features then the cardinality is automatically set (to 1). Will get back to you about this, thanks for reporting it!
		</comment>
		<comment id='2' author='stellaywu' date='2020-05-04T21:04:35Z'>
		&lt;denchmark-link:https://github.com/stellaywu&gt;@stellaywu&lt;/denchmark-link&gt;
 for the moment, you can just set  together with 
		</comment>
		<comment id='3' author='stellaywu' date='2020-05-05T11:34:34Z'>
		thanks for the quick fix! &lt;denchmark-link:https://github.com/lostella&gt;@lostella&lt;/denchmark-link&gt;

Does cardinality= [1]  do anything? the results looks different with different cardinality value.
Another somewhat related question - If I want to predict multiple time series at the same time, is it correct to just feed them all at once in one model?
		</comment>
		<comment id='4' author='stellaywu' date='2020-05-05T20:21:23Z'>
		
thanks for the quick fix! @lostella

You're welcome, but no fix was involved :-) this is just the way to make it work when you set , currently. We should either improve the documentation there, or improve the API of this estimator in some way (see &lt;denchmark-link:https://github.com/awslabs/gluon-ts/pull/799&gt;#799&lt;/denchmark-link&gt;
 for related discussion)

Does cardinality= [1] do anything? the results looks different with different cardinality value.

When you set feat_static_cat=False, the model injects fake categorical features in the data, all equal to zero. So there is one categorical feature with cardinality 1, so you should set it to [1]. Other settings may also work (in the sense that the model runs) but I'm not sure how that will affect the quality of the model.

Another somewhat related question - If I want to predict multiple time series at the same time, is it correct to just feed them all at once in one model?

That's correct, once you've trained a predictor, you can use it to predict a whole dataset of time series at once, and it will return to you an iterator over the forecast objects, one for each element in the input dataset.
		</comment>
	</comments>
</bug>