<bug id='547' author='oliver5x' open_date='2020-01-03T08:52:27Z' closed_time='2020-01-03T09:00:09Z'>
	<summary>Run tutorial.ipynb,  MXNetError: vector&amp;lt;T&amp;gt; too long</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

When I run the tuorial.ipynb ,a error ("MXNetError: vector too long" ) happened.
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

Training an existing model (Estimator):
from gluonts.evaluation.backtest import make_evaluation_predictions
forecast_it, ts_it = make_evaluation_predictions(
dataset=dataset.test,  # test dataset
predictor=predictor,  # predictor
num_samples=100,  # number of sample paths we want for evaluation
)
forecasts = list(forecast_it)
link:[https://gluon-ts.mxnet.io/_downloads/basic_forecasting_tutorial.zip]
&lt;denchmark-h:h2&gt;Error Message&lt;/denchmark-h&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

MXNetError                                Traceback (most recent call last)
 in 
----&gt; 1 forecasts = list(forecast_it)
D:\ProgramData\Anaconda3\lib\site-packages\gluonts\model\predictor.py in predict(self, dataset, num_samples)
307             freq=self.freq,
308             output_transform=self.output_transform,
--&gt; 309             num_samples=num_samples,
310         )
311
D:\ProgramData\Anaconda3\lib\site-packages\gluonts\model\forecast_generator.py in call(self, inference_data_loader, prediction_net, input_names, freq, output_transform, num_samples, **kwargs)
195         for batch in inference_data_loader:
196             inputs = [batch[k] for k in input_names]
--&gt; 197             outputs = prediction_net(*inputs).asnumpy()
198             if output_transform is not None:
199                 outputs = output_transform(batch, outputs)
D:\ProgramData\Anaconda3\lib\site-packages\mxnet\gluon\block.py in call(self, *args)
546             hook(self, args)
547
--&gt; 548         out = self.forward(*args)
549
550         for hook in self._forward_hooks.values():
D:\ProgramData\Anaconda3\lib\site-packages\mxnet\gluon\block.py in forward(self, x, *args)
923                     params = {i: j.data(ctx) for i, j in self._reg_params.items()}
924
--&gt; 925                 return self.hybrid_forward(ndarray, x, *args, **params)
926
927         assert isinstance(x, Symbol), \
D:\ProgramData\Anaconda3\lib\site-packages\gluonts\model\simple_feedforward_network.py in hybrid_forward(self, F, past_target)
185
186         # (num_samples, batch_size, prediction_length)
--&gt; 187         samples = distr.sample(self.num_parallel_samples)
188
189         # (batch_size, num_samples, prediction_length)
D:\ProgramData\Anaconda3\lib\site-packages\gluonts\distribution\transformed_distribution.py in sample(self, num_samples, dtype)
87         with autograd.pause():
88             s = self.base_distribution.sample(
---&gt; 89                 num_samples=num_samples, dtype=dtype
90             )
91             for t in self.transforms:
D:\ProgramData\Anaconda3\lib\site-packages\gluonts\distribution\student_t.py in sample(self, num_samples, dtype)
116             sigma=self.sigma,
117             nu=self.nu,
--&gt; 118             num_samples=num_samples,
119         )
120
D:\ProgramData\Anaconda3\lib\site-packages\gluonts\distribution\distribution.py in _sample_multiple(sample_func, num_samples, *args, **kwargs)
300         k: _expand_param(v, num_samples) for k, v in kwargs.items()
301     }
--&gt; 302     samples = sample_func(*args_expanded, **kwargs_expanded)
303     return samples
D:\ProgramData\Anaconda3\lib\site-packages\gluonts\distribution\student_t.py in s(mu, sigma, nu)
104             F = self.F
105             gammas = F.sample_gamma(
--&gt; 106                 alpha=nu / 2.0, beta=2.0 / (nu * F.square(sigma)), dtype=dtype
107             )
108             normal = F.sample_normal(
D:\ProgramData\Anaconda3\lib\site-packages\mxnet\ndarray\register.py in sample_gamma(alpha, beta, shape, dtype, out, name, **kwargs)
D:\ProgramData\Anaconda3\lib\site-packages\mxnet_ctypes\ndarray.py in _imperative_invoke(handle, ndargs, keys, vals, out)
90         c_str_array(keys),
91         c_str_array([str(s) for s in vals]),
---&gt; 92         ctypes.byref(out_stypes)))
93
94     if original_output is not None:
D:\ProgramData\Anaconda3\lib\site-packages\mxnet\base.py in check_call(ret)
251     """
252     if ret != 0:
--&gt; 253         raise MXNetError(py_str(_LIB.MXGetLastError()))
254
255
MXNetError: vector too long
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


Operating system:Windows7
Python version:3.7.4,run in jupyter-lab
GluonTS version:0.4.2

(Add as much information about your environment as possible, e.g. dependencies versions.)
	</description>
	<comments>
		<comment id='1' author='oliver5x' date='2020-01-03T12:18:53Z'>
		Hello &lt;denchmark-link:https://github.com/oliver5x&gt;@oliver5x&lt;/denchmark-link&gt;
, did you mean to close the issue?
		</comment>
		<comment id='2' author='oliver5x' date='2020-01-12T07:39:14Z'>
		yes,thanks ,I found the same issue that solved my problem.
		</comment>
	</comments>
</bug>