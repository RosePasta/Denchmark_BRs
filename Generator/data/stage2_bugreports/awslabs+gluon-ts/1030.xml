<bug id='1030' author='MaximilianPavon' open_date='2020-09-10T08:32:17Z' closed_time='2020-10-14T10:22:31Z'>
	<summary>Usage of DateSplitter with max_history</summary>
	<description>
Hi,
I am trying to use the DateSplitter together with max_history in order to make the test data shorter and would love to get some help.
The documentation &lt;denchmark-link:https://gluon-ts.mxnet.io/api/gluonts/gluonts.dataset.split.splitter.html&gt;here&lt;/denchmark-link&gt;
 says the following about :
&lt;denchmark-code&gt;If given, all entries in the test-set have a max-length of max_history. 
This can be sued to produce smaller file-sizes.
&lt;/denchmark-code&gt;

But when I set this value to e.g. 3 weeks of hourly data () I am getting AssertionErrors from &lt;denchmark-link:https://github.com/awslabs/gluon-ts/blob/18ab342a3abd7cfb1b6460dacfffd42b64fbefde/src/gluonts/dataset/split/splitter.py#L228&gt;this&lt;/denchmark-link&gt;
 line, here is the relevant code block:
def split(self, items: List[DataEntry]) -&gt; TrainTestSplit:
    split = TrainTestSplit()

    for item in map(TimeSeriesSlice.from_data_entry, items):

        train = self._train_slice(item)
        test = self._trim_history(self._test_slice(item))

        split._add_train_slice(train)

        assert len(test) - len(train) &gt;= getattr(self, "prediction_length")
        split._add_test_slice(test)

    return split
So the length of the test slice minus the length of the train slice is not greater or equal to the defined prediction length.
When debugging this code line by line, the problem seems to originate from the function , implemented a few &lt;denchmark-link:https://github.com/awslabs/gluon-ts/blob/18ab342a3abd7cfb1b6460dacfffd42b64fbefde/src/gluonts/dataset/split/splitter.py#L212-L216&gt;lines&lt;/denchmark-link&gt;
 above:
def _trim_history(self, item: TimeSeriesSlice) -&gt; TimeSeriesSlice:
    if getattr(self, "max_history") is not None:
        return item[: -getattr(self, "max_history")]
    else:
        return item
Currently _trim_history() disregards the last max_history data points from the test slice. Considering that the test slice is exactly prediction_length data points longer than the training slice, this is bound to run into the mentioned AssertionError.
Is this the expected behaviour of this parameter or am I doing something wrong?
Here is some example code to replicate this:
import gluonts
from gluonts.dataset.field_names import FieldName
from gluonts.dataset.split import DateSplitter
import numpy as np
import pandas as pd

print(f"gluonts version: {gluonts.__version__}")  # gluonts version: 0.5.2

prediction_length = 72

start_date = pd.Timestamp("2020-01-01", freq="1H")
split_date = start_date + 30 * pd.Timedelta("1D")
print(f"start_date: {start_date}\nsplit_date: {split_date}")
# start_date: 2020-01-01 00:00:00
# split_date: 2020-01-31 00:00:00

toy_data = [
    {
        FieldName.START: start_date,
        FieldName.TARGET: np.arange(0, 10000),
        "item": "my_item",
        # FieldName.ITEM_ID unfortunately does not work, since the TimeSeriesSlice expects 'item' and not 'item_id':
        # https://github.com/awslabs/gluon-ts/blob/18ab342a3abd7cfb1b6460dacfffd42b64fbefde/src/gluonts/dataset/split/splitter.py#L100
    }
]


for max_history in (None, 1, 2, 10, 20, 30):
    try:
        splitter = DateSplitter(prediction_length=prediction_length, split_date=split_date, max_history=max_history)
        train_validation_split = splitter.split(items=toy_data)
        print(f"\tNo problems when splitting with max_history={max_history}")
    except AssertionError as err:
        print(f"\tWhoopsie, something went wrong when splitting with max_history={max_history}")

# 	No problems when splitting with max_history=None
# 	Whoopsie, something went wrong when splitting with max_history=1
# 	Whoopsie, something went wrong when splitting with max_history=2
# 	Whoopsie, something went wrong when splitting with max_history=10
# 	Whoopsie, something went wrong when splitting with max_history=20
# 	Whoopsie, something went wrong when splitting with max_history=30
	</description>
	<comments>
		<comment id='1' author='MaximilianPavon' date='2020-10-13T09:04:45Z'>
		Hey &lt;denchmark-link:https://github.com/MaximilianPavon&gt;@MaximilianPavon&lt;/denchmark-link&gt;
,
thank you for the detailed report and sorry for leaving this open for so long. You are using the  parameter as intended but there are two bugs:

_trim_history needs to return item[-getattr(self, "max_history"):]
instead of item[:-getattr(self, "max_history")]
the assertion needs be guarded:

if getattr(self, "max_history") is None:
    assert len(test) - len(train) &gt;= getattr(self, "prediction_length")
		</comment>
		<comment id='2' author='MaximilianPavon' date='2020-10-14T10:22:05Z'>
		&lt;denchmark-link:https://github.com/MaximilianPavon&gt;@MaximilianPavon&lt;/denchmark-link&gt;
 the fix for this was merge to , and will be included in the next release 0.6.0 (coming soon)
		</comment>
		<comment id='3' author='MaximilianPavon' date='2020-10-14T10:52:42Z'>
		Thanks a lot &lt;denchmark-link:https://github.com/PascalIversen&gt;@PascalIversen&lt;/denchmark-link&gt;
  and &lt;denchmark-link:https://github.com/lostella&gt;@lostella&lt;/denchmark-link&gt;
!
We managed to get around this issue by over-writing the problematic functions in a similar way, but still had to ditch the use of the  due to &lt;denchmark-link:https://github.com/awslabs/gluon-ts/issues/997&gt;#997&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>