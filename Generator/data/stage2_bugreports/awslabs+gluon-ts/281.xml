<bug id='281' author='sanzgiri' open_date='2019-09-04T01:18:59Z' closed_time='2019-09-04T14:28:31Z'>
	<summary>Extended Tutorial: when creating a custom dataset, first time series gets repeated in train dataset</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

If you follow the steps in Sec. 1.3 to create a custom dataset using your own time series, the first time series is repeated in the train dataset. Each dictionary in the array is the same.
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;def create_dataset(num_series, num_steps, period=24, mu=1, sigma=0.3):
    # create target: noise + pattern    
    # noise
    noise = np.random.normal(mu, sigma, size=(num_series, num_steps))
    
    # pattern - sinusoid with different phase
    sin_minumPi_Pi = np.sin(np.tile(np.linspace(-np.pi, np.pi, period), int(num_steps / period)))
    sin_Zero_2Pi = np.sin(np.tile(np.linspace(0, 2 * np.pi, 24), int(num_steps / period)))
    
    pattern = np.concatenate((np.tile(sin_minumPi_Pi.reshape(1, -1), 
                                      (int(np.ceil(num_series / 2)),1)), 
                              np.tile(sin_Zero_2Pi.reshape(1, -1), 
                                      (int(np.floor(num_series / 2)), 1))
                             ),
                             axis=0
                            )
    
    target = noise + pattern
    
    # create time features: use target one period earlier, append with zeros
    feat_dynamic_real = np.concatenate((np.zeros((num_series, period)), 
                                        target[:, :-period]
                                       ), 
                                       axis=1
                                      )
    
    # create categorical static feats: use the sinusoid type as a categorical feature
    feat_static_cat = np.concatenate((np.zeros(int(np.ceil(num_series / 2))), 
                                      np.ones(int(np.floor(num_series / 2)))
                                     ),
                                     axis=0
                                    )
    
    return target, feat_dynamic_real, feat_static_cat
    
executed in 6ms, finished 18:02:20 2019-09-03
24

# define the parameters of the dataset
custom_ds_metadata = {'num_series': 10,
                      'num_steps': 24 * 2,
                      'prediction_length': 24,
                      'freq': '1H',
                      'start': [pd.Timestamp("01-01-2019", freq='1H') 
                                for _ in range(10)]
                     }
executed in 3ms, finished 18:02:21 2019-09-03
data_out = create_dataset(custom_ds_metadata['num_series'], 
                          custom_ds_metadata['num_steps'],                                                      
                          custom_ds_metadata['prediction_length']
                         )
â€‹
target, feat_dynamic_real, feat_static_cat = data_out
executed in 3ms, finished 18:02:21 2019-09-03
We can easily create the train and test datasets by simply filling in the correct fields. Remember that for the train dataset we need to cut the last window.

target[:, :-custom_ds_metadata['prediction_length']]
train_ds = ListDataset([{FieldName.TARGET: target, 
                         FieldName.START: start,
                         FieldName.FEAT_DYNAMIC_REAL: fdr,
                         FieldName.FEAT_STATIC_CAT: fsc} 
                        for (target, start, fdr, fsc) in zip(target[:, :-custom_ds_metadata['prediction_length']], 
                                                             custom_ds_metadata['start'], 
                                                             feat_dynamic_real[:, :-custom_ds_metadata['prediction_length']], 
                                                             feat_static_cat)],
                      freq=custom_ds_metadata['freq'])
executed in 3ms, finished 18:02:25 2019-09-03

### check what is in train_ds
### the target arrays are the same for all 10 time series

for j in range(len(train_ds)):
    t1 = next(iter(train_ds))
    print(t1)

executed in 8ms, finished 18:02:26 2019-09-03
{'target': array([ 8.9033467e-01,  1.0116310e+00,  5.6943601e-01,  5.1815987e-01,
       -3.6715917e-02, -1.5255825e-03,  6.0008257e-03,  5.2851695e-01,
        3.9015880e-01,  6.0791367e-01,  4.0422109e-01,  1.1544981e+00,
        1.2038411e+00,  1.8151447e+00,  2.2353060e+00,  1.7249402e+00,
        1.8203700e+00,  1.7384553e+00,  1.9360102e+00,  1.7732776e+00,
        1.8386873e+00,  1.4762139e+00,  1.1613170e+00,  1.3193755e+00],
      dtype=float32), 'start': Timestamp('2019-01-01 00:00:00', freq='H'), 'feat_dynamic_real': array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32), 'feat_static_cat': array([0], dtype=int32), 'source': SourceContext(source='list_data', row=1)}
{'target': array([ 8.9033467e-01,  1.0116310e+00,  5.6943601e-01,  5.1815987e-01,
       -3.6715917e-02, -1.5255825e-03,  6.0008257e-03,  5.2851695e-01,
        3.9015880e-01,  6.0791367e-01,  4.0422109e-01,  1.1544981e+00,
        1.2038411e+00,  1.8151447e+00,  2.2353060e+00,  1.7249402e+00,
        1.8203700e+00,  1.7384553e+00,  1.9360102e+00,  1.7732776e+00,
        1.8386873e+00,  1.4762139e+00,  1.1613170e+00,  1.3193755e+00],
      dtype=float32), 'start': Timestamp('2019-01-01 00:00:00', freq='H'), 'feat_dynamic_real': array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32), 'feat_static_cat': array([0], dtype=int32), 'source': SourceContext(source='list_data', row=1)}
{'target': array([ 8.9033467e-01,  1.0116310e+00,  5.6943601e-01,  5.1815987e-01,
       -3.6715917e-02, -1.5255825e-03,  6.0008257e-03,  5.2851695e-01,
        3.9015880e-01,  6.0791367e-01,  4.0422109e-01,  1.1544981e+00,
        1.2038411e+00,  1.8151447e+00,  2.2353060e+00,  1.7249402e+00,
        1.8203700e+00,  1.7384553e+00,  1.9360102e+00,  1.7732776e+00,
        1.8386873e+00,  1.4762139e+00,  1.1613170e+00,  1.3193755e+00],
      dtype=float32), 'start': Timestamp('2019-01-01 00:00:00', freq='H'), 'feat_dynamic_real': array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32), 'feat_static_cat': array([0], dtype=int32), 'source': SourceContext(source='list_data', row=1)}
{'target': array([ 8.9033467e-01,  1.0116310e+00,  5.6943601e-01,  5.1815987e-01,
       -3.6715917e-02, -1.5255825e-03,  6.0008257e-03,  5.2851695e-01,
        3.9015880e-01,  6.0791367e-01,  4.0422109e-01,  1.1544981e+00,
        1.2038411e+00,  1.8151447e+00,  2.2353060e+00,  1.7249402e+00,
        1.8203700e+00,  1.7384553e+00,  1.9360102e+00,  1.7732776e+00,
        1.8386873e+00,  1.4762139e+00,  1.1613170e+00,  1.3193755e+00],
      dtype=float32), 'start': Timestamp('2019-01-01 00:00:00', freq='H'), 'feat_dynamic_real': array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32), 'feat_static_cat': array([0], dtype=int32), 'source': SourceContext(source='list_data', row=1)}
{'target': array([ 8.9033467e-01,  1.0116310e+00,  5.6943601e-01,  5.1815987e-01,
       -3.6715917e-02, -1.5255825e-03,  6.0008257e-03,  5.2851695e-01,
        3.9015880e-01,  6.0791367e-01,  4.0422109e-01,  1.1544981e+00,
        1.2038411e+00,  1.8151447e+00,  2.2353060e+00,  1.7249402e+00,
        1.8203700e+00,  1.7384553e+00,  1.9360102e+00,  1.7732776e+00,
        1.8386873e+00,  1.4762139e+00,  1.1613170e+00,  1.3193755e+00],
      dtype=float32), 'start': Timestamp('2019-01-01 00:00:00', freq='H'), 'feat_dynamic_real': array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32), 'feat_static_cat': array([0], dtype=int32), 'source': SourceContext(source='list_data', row=1)}
{'target': array([ 8.9033467e-01,  1.0116310e+00,  5.6943601e-01,  5.1815987e-01,
       -3.6715917e-02, -1.5255825e-03,  6.0008257e-03,  5.2851695e-01,
        3.9015880e-01,  6.0791367e-01,  4.0422109e-01,  1.1544981e+00,
        1.2038411e+00,  1.8151447e+00,  2.2353060e+00,  1.7249402e+00,
        1.8203700e+00,  1.7384553e+00,  1.9360102e+00,  1.7732776e+00,
        1.8386873e+00,  1.4762139e+00,  1.1613170e+00,  1.3193755e+00],
      dtype=float32), 'start': Timestamp('2019-01-01 00:00:00', freq='H'), 'feat_dynamic_real': array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32), 'feat_static_cat': array([0], dtype=int32), 'source': SourceContext(source='list_data', row=1)}
{'target': array([ 8.9033467e-01,  1.0116310e+00,  5.6943601e-01,  5.1815987e-01,
       -3.6715917e-02, -1.5255825e-03,  6.0008257e-03,  5.2851695e-01,
        3.9015880e-01,  6.0791367e-01,  4.0422109e-01,  1.1544981e+00,
        1.2038411e+00,  1.8151447e+00,  2.2353060e+00,  1.7249402e+00,
        1.8203700e+00,  1.7384553e+00,  1.9360102e+00,  1.7732776e+00,
        1.8386873e+00,  1.4762139e+00,  1.1613170e+00,  1.3193755e+00],
      dtype=float32), 'start': Timestamp('2019-01-01 00:00:00', freq='H'), 'feat_dynamic_real': array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32), 'feat_static_cat': array([0], dtype=int32), 'source': SourceContext(source='list_data', row=1)}
{'target': array([ 8.9033467e-01,  1.0116310e+00,  5.6943601e-01,  5.1815987e-01,
       -3.6715917e-02, -1.5255825e-03,  6.0008257e-03,  5.2851695e-01,
        3.9015880e-01,  6.0791367e-01,  4.0422109e-01,  1.1544981e+00,
        1.2038411e+00,  1.8151447e+00,  2.2353060e+00,  1.7249402e+00,
        1.8203700e+00,  1.7384553e+00,  1.9360102e+00,  1.7732776e+00,
        1.8386873e+00,  1.4762139e+00,  1.1613170e+00,  1.3193755e+00],
      dtype=float32), 'start': Timestamp('2019-01-01 00:00:00', freq='H'), 'feat_dynamic_real': array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32), 'feat_static_cat': array([0], dtype=int32), 'source': SourceContext(source='list_data', row=1)}
{'target': array([ 8.9033467e-01,  1.0116310e+00,  5.6943601e-01,  5.1815987e-01,
       -3.6715917e-02, -1.5255825e-03,  6.0008257e-03,  5.2851695e-01,
        3.9015880e-01,  6.0791367e-01,  4.0422109e-01,  1.1544981e+00,
        1.2038411e+00,  1.8151447e+00,  2.2353060e+00,  1.7249402e+00,
        1.8203700e+00,  1.7384553e+00,  1.9360102e+00,  1.7732776e+00,
        1.8386873e+00,  1.4762139e+00,  1.1613170e+00,  1.3193755e+00],
      dtype=float32), 'start': Timestamp('2019-01-01 00:00:00', freq='H'), 'feat_dynamic_real': array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32), 'feat_static_cat': array([0], dtype=int32), 'source': SourceContext(source='list_data', row=1)}
{'target': array([ 8.9033467e-01,  1.0116310e+00,  5.6943601e-01,  5.1815987e-01,
       -3.6715917e-02, -1.5255825e-03,  6.0008257e-03,  5.2851695e-01,
        3.9015880e-01,  6.0791367e-01,  4.0422109e-01,  1.1544981e+00,
        1.2038411e+00,  1.8151447e+00,  2.2353060e+00,  1.7249402e+00,
        1.8203700e+00,  1.7384553e+00,  1.9360102e+00,  1.7732776e+00,
        1.8386873e+00,  1.4762139e+00,  1.1613170e+00,  1.3193755e+00],
      dtype=float32), 'start': Timestamp('2019-01-01 00:00:00', freq='H'), 'feat_dynamic_real': array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32), 'feat_static_cat': array([0], dtype=int32), 'source': SourceContext(source='list_data', row=1)}
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Error Message&lt;/denchmark-h&gt;

No error messahe
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


Operating system:Ubuntu 16.04
Python version:3.6
GluonTS version:0.3.2
MXNET: 1.4.1

(Add as much information about your environment as possible, e.g. dependencies versions.)
	</description>
	<comments>
		<comment id='1' author='sanzgiri' date='2019-09-04T08:22:24Z'>
		Hi sanzgiri,
A dataset is an iterable collection and not a generator. This means that next(iter(train_ds)) always gives you the first element of the dataset. Therefore the issue is in this for loop
&lt;denchmark-code&gt;for j in range(len(train_ds)):
    t1 = next(iter(train_ds))
    print(t1)
&lt;/denchmark-code&gt;

that prints always the first component of the dataset.
SInce a dataset is an iterable object you can do the following directly:
&lt;denchmark-code&gt;for d in train_ds: 
    print(d)
&lt;/denchmark-code&gt;

which solves your issue.
		</comment>
		<comment id='2' author='sanzgiri' date='2019-09-04T14:28:31Z'>
		Hi &lt;denchmark-link:https://github.com/benidis&gt;@benidis&lt;/denchmark-link&gt;
 - thanks for clarifying!
		</comment>
	</comments>
</bug>