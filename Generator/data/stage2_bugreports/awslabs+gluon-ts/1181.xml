<bug id='1181' author='chendhui' open_date='2020-11-30T11:54:05Z' closed_time='2020-12-04T21:50:22Z'>
	<summary>Why does the PyTorchPredictor still need to import MXNet</summary>
	<description>
&lt;denchmark-link:https://github.com/awslabs/gluon-ts/tree/master/src/gluonts/torch&gt;https://github.com/awslabs/gluon-ts/tree/master/src/gluonts/torch&lt;/denchmark-link&gt;

This sub-package reimplements the Predictor method using Pytorch. I think the goal is to become irrelevant to the MXNet during the inference stage, and we can also use the Predictor API in a Pytorch-only environment.
However, when I trained a model and saved it. I use the PyTorchPredictor API as Predictor. But the runtime environment also needs to import the MXNet. I am wondering what is the significance of PyTorchPredictor.
	</description>
	<comments>
		<comment id='1' author='chendhui' date='2020-11-30T12:11:33Z'>
		
But the runtime environment also needs to import the MXNet.

&lt;denchmark-link:https://github.com/chendhui&gt;@chendhui&lt;/denchmark-link&gt;
 what do you mean by that? There's an &lt;denchmark-link:https://github.com/awslabs/gluon-ts/blob/master/examples/pytorch_predictor_example.ipynb&gt;example notebook&lt;/denchmark-link&gt;
 using this class, which runs fine without having MXNet installed, if I remember correctly
		</comment>
		<comment id='2' author='chendhui' date='2020-11-30T12:18:10Z'>
		Hey &lt;denchmark-link:https://github.com/chendhui&gt;@chendhui&lt;/denchmark-link&gt;
, thanks for opening the issue.
Just checked, there is some dependency left:
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-1-602532f91f38&gt; in &lt;module&gt;
      1 from gluonts.dataset.field_names import FieldName
----&gt; 2 from gluonts.dataset.loader import TrainDataLoader
      3 print(sys.modules.keys())
      4 print()
      5 print()

~/Projects/gts/gluon-ts/src/gluonts/dataset/loader.py in &lt;module&gt;
     26 from gluonts.dataset.util import MPWorkerInfo
     27 from gluonts.itertools import batcher, cyclic, pseudo_shuffled
---&gt; 28 from gluonts.transform import Transformation, TransformedDataset
     29 
     30 logger = logging.getLogger(__name__)

~/Projects/gts/gluon-ts/src/gluonts/transform/__init__.py in &lt;module&gt;
     64 ]
     65 
---&gt; 66 from ._base import (
     67     AdhocTransform,
     68     Chain,

~/Projects/gts/gluon-ts/src/gluonts/transform/_base.py in &lt;module&gt;
     17 
     18 # First-party imports
---&gt; 19 from gluonts.core.component import validated
     20 from gluonts.dataset.common import DataEntry
     21 from gluonts.runtime_params import GLUONTS_MAX_IDLE_TRANSFORMS

~/Projects/gts/gluon-ts/src/gluonts/core/component.py in &lt;module&gt;
    178 
    179 
--&gt; 180 @equals.register(mx.gluon.HybridBlock)
    181 def equals_representable_block(
    182     this: mx.gluon.HybridBlock, that: mx.gluon.HybridBlock

AttributeError: module 'mxnet' has no attribute 'gluon'
		</comment>
		<comment id='3' author='chendhui' date='2020-11-30T12:47:29Z'>
		Right! I think I have a local branch where I had started reorganizing code and imports to get rid of these things. I'll try to rebase it, hopefully not much changed since then
		</comment>
		<comment id='4' author='chendhui' date='2020-11-30T12:48:52Z'>
		&lt;denchmark-link:https://github.com/chendhui&gt;@chendhui&lt;/denchmark-link&gt;
 the desired goal, as you say, is to have the package independent of MXNet unless MXNet-based models are used -- however this is still in progress, so thanks for pointing that out 
		</comment>
		<comment id='5' author='chendhui' date='2020-12-03T11:16:09Z'>
		&lt;denchmark-link:https://github.com/chendhui&gt;@chendhui&lt;/denchmark-link&gt;
 this should be fixed in the  branch now, please let me know if you keep seeing the issue
		</comment>
	</comments>
</bug>