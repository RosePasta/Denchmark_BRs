<bug id='332' author='dai-ichiro' open_date='2019-09-21T16:47:57Z' closed_time='2019-10-08T08:10:42Z'>
	<summary>copy_dim method in gluonts.model.forecast.Forecast class.</summary>
	<description>
I installed GluonTS from source code on 2019/9/21. I am trying to use DeepAR for multivariate time series forecasting.
After the fix of &lt;denchmark-link:https://github.com/awslabs/gluon-ts/pull/330#&gt;#330&lt;/denchmark-link&gt;
, 'make_evaluation_predictionsthe' returns the object in whichi shape of result array is (num_eval_samples, prediction_length, number of targets).
I think it is better for copy_dim method to be changed along with this change.
I want to use 'copy_dim' method as below, but now I can't.
&lt;denchmark-code&gt;import pandas as pd
import numpy as np
from matplotlib import pyplot as plt

from gluonts.dataset.common import ListDataset
from gluonts.model.deepar import DeepAREstimator
from gluonts.distribution.multivariate_gaussian import MultivariateGaussianOutput
from gluonts.trainer import Trainer

N = 20  # number of time series
T = 100  # number of timesteps
prediction_length = 10
freq = '1H'

custom_datasetx = np.random.normal(size=(N, 2, T))
custom_datasetx[:,1,:] = custom_datasetx[:,1,:]*10
start = pd.Timestamp("01-01-2019", freq=freq)

train_ds = ListDataset(
    [
        {'target': x, 'start': start}
        for x in custom_datasetx[0:19, :, :]
    ],
    freq=freq,
    one_dim_target=False,
)

test_ds = ListDataset(
    [
        {'target': x, 'start': start}
        for x in custom_datasetx[19:, :, :]
    ],
    freq=freq,
    one_dim_target=False,
)

estimator = DeepAREstimator(
    prediction_length=prediction_length,
    freq=freq,
    trainer=Trainer(epochs=5),
    distr_output=MultivariateGaussianOutput(dim=2),
)

predictor = estimator.train(train_ds)

from gluonts.evaluation.backtest import make_evaluation_predictions

forecast_it, ts_it = make_evaluation_predictions(
    dataset=test_ds,  
    predictor=predictor,  
    num_eval_samples=100
    )

for x, y  in zip(ts_it, forecast_it):
    for i in range(2):
        plt.subplot(2,1,i+1)
        x[i].plot()
        y.copy_dim(i).plot(color='g', prediction_intervals=(50.0, 90.0))

plt.show()
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='dai-ichiro' date='2019-10-02T01:47:13Z'>
		Hello, i studying the deepAR algorithm, i will like understand the output of model. The percentile value are confidence interval? or credibility interval? why the first is a approach frequentist and second a approa ch bayesian. The second question is about if i can get the value of variable that are predicting or just i can see information of the probability distribucion
		</comment>
	</comments>
</bug>