<bug id='563' author='lostella' open_date='2020-01-16T17:31:10Z' closed_time='2020-01-20T15:10:43Z'>
	<summary>PiecewiseLinear gives wrong CRPS outside of distribution support</summary>
	<description>
It seems like the PiecewiseLinear's CRPS method does not compute correct results when the input falls outside of the distribution's support. The following example is for a uniform distribution between -1 and 1: I would expect CRPS(-2) = CRPS(2), but that's not the case.
gamma = mx.nd.array([-1.0])
slopes = mx.nd.array([
    [2.0, 2.0]]
)
knot_spacings = mx.nd.array([[0.5, 0.5]])

distr = PiecewiseLinear(
    gamma=gamma,
    slopes=slopes,
    knot_spacings=knot_spacings,
)

print(distr.crps(mx.nd.array([-2.0])))
print(distr.crps(mx.nd.array([2.0])))
yields
&lt;denchmark-code&gt;[1.6666667]
&lt;NDArray 1 @cpu(0)&gt;

[2.1666667]
&lt;NDArray 1 @cpu(0)&gt;
&lt;/denchmark-code&gt;

With more complex example one can also get negative values of CRPS.
gamma = mx.nd.array([-82.70746])
slopes = mx.nd.array([
    [1.8083544e+01, 2.9134894e-02, 6.3528619e+00, 4.8505863e-05, 4.9647682e+01, 3.9714784e-16, 1.3027676e+01, 1.8006723e-14]]
)
knot_spacings = mx.nd.array([[0.001, 0.009, 0.09, 0.4, 0.4, 0.09, 0.009, 0.001]])
x = mx.nd.array([-70.8735308])

distr = PiecewiseLinear(
    gamma=gamma,
    slopes=slopes,
    knot_spacings=knot_spacings,
)

print(distr.crps(x))
yields
&lt;denchmark-code&gt;[-79.25251]
&lt;NDArray 1 @cpu(0)&gt;
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='lostella' date='2020-01-16T17:37:09Z'>
		We could consider implement the computation of CRPS in its more intuitive form, see first equation in &lt;denchmark-link:https://journals.ametsoc.org/doi/pdf/10.1175/1520-0434%282000%29015%3C0559%3ADOTCRP%3E2.0.CO%3B2&gt;https://journals.ametsoc.org/doi/pdf/10.1175/1520-0434%282000%29015%3C0559%3ADOTCRP%3E2.0.CO%3B2&lt;/denchmark-link&gt;

If all slopes are strictly positive then the quantile function is invertible and maybe things are easier to compute in the CDF domain instead of the quantile level domain.
		</comment>
		<comment id='2' author='lostella' date='2020-01-16T19:14:21Z'>
		Well, one should probably end up with the same formula for the integral no matter what (equivalent) formulation one starts from. It looks like some summands are missing when x falls off of the support.
		</comment>
		<comment id='3' author='lostella' date='2020-01-20T15:10:43Z'>
		fixed by &lt;denchmark-link:https://github.com/awslabs/gluon-ts/pull/564&gt;#564&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>