<bug id='160' author='lostella' open_date='2019-07-01T11:31:36Z' closed_time='2019-08-23T14:49:15Z'>
	<summary>Multivariate time series raise an error</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

I'm trying to model 4-dimensional time series using MultivariateGaussianOutput, but training fails due to some invalid loss value.
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import numpy as np

from gluonts.dataset.common import ListDataset
from gluonts.distribution import MultivariateGaussianOutput
from gluonts.model.deepar import DeepAREstimator
from gluonts.trainer import Trainer

train_dataset = ListDataset(
    data_iter=[
        {
            "start": "2019-01-01 00:00:00",
            "target": np.ones(shape=(4, 100)).tolist(),
        },
    ],
    freq="5min",
)

estimator = DeepAREstimator(
    'H', prediction_length=5, trainer=Trainer(epochs=3, hybridize=False),
    distr_output=MultivariateGaussianOutput(dim=4),
)

predictor = estimator.train(train_dataset)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Error Message&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/Users/stellalo/gluon-ts/examples/run_multivariate.py", line 15, in &lt;module&gt;
    freq="5min",
  File "/Users/stellalo/gluon-ts/src/gluonts/dataset/common.py", line 259, in __init__
    self.list_data = [process(data) for data in data_iter]
  File "/Users/stellalo/gluon-ts/src/gluonts/dataset/common.py", line 259, in &lt;listcomp&gt;
    self.list_data = [process(data) for data in data_iter]
  File "/Users/stellalo/gluon-ts/src/gluonts/dataset/common.py", line 435, in __call__
    data = t(data)
  File "/Users/stellalo/gluon-ts/src/gluonts/dataset/common.py", line 374, in __call__
    f"JSON array has bad shape - expected {self.req_ndim} "
gluonts.core.exception.GluonTSDataError: JSON array has bad shape - expected 1 dimensions, got -1
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


Operating system: macOS
Python version: 3.6.6
GluonTS version: master (35cc49b)

(Add as much information about your environment as possible, e.g. dependencies versions.)
	</description>
	<comments>
		<comment id='1' author='lostella' date='2019-08-22T12:14:31Z'>
		I have done some investigation based on the code above.
When L, the Lower triangular Cholesky factor of covariance matrix has negative diagonal values, the log_prob will become undefined and therefore the weighted average loss become nan.
The domain_map function from MultivariateGaussianOutput seems not working as expected.
&lt;denchmark-code&gt;    def domain_map(self, F, mu_vector, L_vector):
        # apply softplus to the diagonal of L and mask upper coefficient to make it lower-triangular
        # diagonal matrix whose elements are diagonal elements of L mapped through a softplus
        d = self.dim

        # reshape from vector form (..., d * d) to matrix form(..., d, d)
        L_matrix = L_vector.reshape((-2, d, d, -4), reverse=1)

        L_diag = F.broadcast_mul(
            F.Activation(
                F.broadcast_mul(L_matrix, F.eye(d)), act_type="softrelu"
            ),
            F.eye(d),
        )

        mask = self.lower_triangular_ones(F, d)

        L_low = F.broadcast_mul(L_matrix, mask)

        return mu_vector, L_diag + L_low
&lt;/denchmark-code&gt;

The mask from lower_triangular_ones will include the diagonal itself, instead of just the lower triangular part of matrix.
Example:
L_matrix:
[[-1, 2, 3],
[4, -5, 6],
[7, 8, -9]]
L_diag:
[[relu(-1), 0, 0],
[0, relu(-5), 0],
[0, 0, relu(-9)]]
mask:
[[1, 0, 0],
[1, 1, 0],
[1, 1, 1]]
L_low:
[[-1, 0, 0],
[4, -5, 0],
[7, 8, -9]]
Therefore negative values may exist in L_diag + L_low and cause errors.
&lt;denchmark-h:h3&gt;Suggested change&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;    def lower_triangular_ones(self, F, d: int) -&gt; Tensor:
        mask = F.zeros_like(F.eye(d))
        for k in range(d):
            mask = mask + F.eye(d, d, -(k+1))
        return mask
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='lostella' date='2019-08-23T12:41:07Z'>
		&lt;denchmark-link:https://github.com/davidlkl&gt;@davidlkl&lt;/denchmark-link&gt;
 thanks for looking into this. I think having
&lt;denchmark-code&gt;    def lower_triangular_ones(self, F, d: int) -&gt; Tensor:
        mask = F.zeros_like(F.eye(d))
        for k in range(1, d):
            mask = mask + F.eye(d, d, -k)
        return mask
&lt;/denchmark-code&gt;

would be more precise, and letting the offset 1 be customizable even better. I'm opening a PR where this utility function is moved to a more appropriate place, and implement the fix. Thanks!
		</comment>
	</comments>
</bug>