<bug id='525' author='wizcheu' open_date='2019-12-13T15:42:57Z' closed_time='2019-12-17T16:37:44Z'>
	<summary>Invalid Frequency For Monthly Data</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

When I use monthly frequency data(freq=, which is a &lt;denchmark-link:https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases&gt;valid time series frequency unit&lt;/denchmark-link&gt;
), DeepAREstimator and GaussianProcessEstimator will throw Exception but SimpleFeedForwardEstimator can work well.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

For DeepAREstimator
import numpy as np
import pandas as pd
from gluonts.dataset.common import ListDataset
from gluonts.model.deepar import DeepAREstimator
from gluonts.trainer import Trainer
from gluonts.evaluation.backtest import make_evaluation_predictions

N = 10  # number of time series
T = 100  # number of timesteps
prediction_length = 24
freq = "MS"
custom_dataset = np.random.normal(size=(N, T))
start = pd.Timestamp("01-01-2019", freq=freq)  # can be different for each time series
# train dataset: cut the last window of length "prediction_length", add "target" and "start" fields
train_ds = ListDataset([{'target': x, 'start': start}
                        for x in custom_dataset[:, :-prediction_length]],
                       freq=freq)
# test dataset: use the whole dataset, add "target" and "start" fields
test_ds = ListDataset([{'target': x, 'start': start}
                       for x in custom_dataset],
                      freq=freq)
estimator = DeepAREstimator(
    prediction_length=prediction_length,
    freq=freq,
    trainer=Trainer(ctx="cpu",
                    epochs=5,
                    learning_rate=1e-3,
                    num_batches_per_epoch=100)
)
predictor = estimator.train(train_ds)
forecast_it, ts_it = make_evaluation_predictions(
    dataset=test_ds,  # test dataset
    predictor=predictor,  # predictor
    num_samples=100,  # number of sample paths we want for evaluation
)
For GaussianProcessEstimator
import numpy as np
import pandas as pd
from gluonts.dataset.common import ListDataset
from gluonts.model.gp_forecaster import GaussianProcessEstimator
from gluonts.trainer import Trainer
from gluonts.evaluation.backtest import make_evaluation_predictions

N = 10  # number of time series
T = 100  # number of timesteps
prediction_length = 24
freq = "MS"
custom_dataset = np.random.normal(size=(N, T))
start = pd.Timestamp("01-01-2019", freq=freq)  # can be different for each time series
# train dataset: cut the last window of length "prediction_length", add "target" and "start" fields
train_ds = ListDataset([{'target': x, 'start': start}
                        for x in custom_dataset[:, :-prediction_length]],
                       freq=freq)
# test dataset: use the whole dataset, add "target" and "start" fields
test_ds = ListDataset([{'target': x, 'start': start}
                       for x in custom_dataset],
                      freq=freq)
estimator = GaussianProcessEstimator(
    cardinality=N,
    prediction_length=prediction_length,
    freq=freq,
    trainer=Trainer(ctx="cpu",
                    epochs=5,
                    learning_rate=1e-3,
                    num_batches_per_epoch=100)
)
predictor = estimator.train(train_ds)
forecast_it, ts_it = make_evaluation_predictions(
    dataset=test_ds,  # test dataset
    predictor=predictor,  # predictor
    num_samples=100,  # number of sample paths we want for evaluation
)
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h2&gt;Error Message&lt;/denchmark-h&gt;

For DeepAREstimator
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "&lt;stdin&gt;", line 7, in &lt;module&gt;
  File "/usr/local/lib/python3.6/dist-packages/gluonts/core/component.py", line 443, in init_wrapper
    return init(self, **all_args)
  File "/usr/local/lib/python3.6/dist-packages/gluonts/model/deepar/_estimator.py", line 188, in __init__
    else get_lags_for_frequency(freq_str=freq)
  File "/usr/local/lib/python3.6/dist-packages/gluonts/time_feature/lag.py", line 115, in get_lags_for_frequency
    raise Exception("invalid frequency")
Exception: invalid frequency
&lt;/denchmark-code&gt;

For GaussianProcessEstimator
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python3.6/dist-packages/gluonts/model/estimator.py", line 223, in train
    return self.train_model(training_data, validation_data).predictor
  File "/usr/local/lib/python3.6/dist-packages/gluonts/model/estimator.py", line 208, in train_model
    validation_iter=validation_data_loader,
  File "/usr/local/lib/python3.6/dist-packages/gluonts/trainer/_base.py", line 297, in __call__
    epoch_loss = loop(epoch_no, train_iter)
  File "/usr/local/lib/python3.6/dist-packages/gluonts/trainer/_base.py", line 230, in loop
    for batch_no, data_entry in enumerate(it, start=1):
  File "/usr/local/lib/python3.6/dist-packages/tqdm/_tqdm.py", line 1060, in __iter__
    for obj in iterable:
  File "/usr/local/lib/python3.6/dist-packages/gluonts/dataset/loader.py", line 192, in __iter__
    data_entry = next(self._cur_iter)
  File "/usr/local/lib/python3.6/dist-packages/gluonts/transform.py", line 324, in __call__
    for data_entry in data_it:
  File "/usr/local/lib/python3.6/dist-packages/gluonts/transform.py", line 275, in __call__
    for data_entry in data_it:
  File "/usr/local/lib/python3.6/dist-packages/gluonts/transform.py", line 275, in __call__
    for data_entry in data_it:
  File "/usr/local/lib/python3.6/dist-packages/gluonts/transform.py", line 279, in __call__
    raise e
  File "/usr/local/lib/python3.6/dist-packages/gluonts/transform.py", line 277, in __call__
    yield self.map_transform(data_entry.copy(), is_train)
  File "/usr/local/lib/python3.6/dist-packages/gluonts/transform.py", line 851, in map_transform
    self._update_cache(start, length)
  File "/usr/local/lib/python3.6/dist-packages/gluonts/transform.py", line 829, in _update_cache
    shift_timestamp(end, 50), self._max_time_point
  File "/usr/local/lib/python3.6/dist-packages/gluonts/transform.py", line 62, in shift_timestamp
    return _shift_timestamp_helper(ts, ts.freq, offset)
  File "/usr/local/lib/python3.6/dist-packages/gluonts/transform.py", line 83, in _shift_timestamp_helper
    return ts + offset * ts.freq
TypeError: unsupported operand type(s) for *: 'int' and 'NoneType'
&lt;/denchmark-code&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


Operating system: Ubuntu 18.04 LTS
Python version: Python 3.6.9
GluonTS version: 0.4.2

	</description>
	<comments>
		<comment id='1' author='wizcheu' date='2019-12-16T10:13:35Z'>
		Hello,
We do not currently support all pandas frequencies. See &lt;denchmark-link:https://github.com/awslabs/gluon-ts/issues/264&gt;#264&lt;/denchmark-link&gt;

I would suggest to use M as the monthly frequency. Or, if you really need MS, we are happy to accept contributions.
		</comment>
		<comment id='2' author='wizcheu' date='2019-12-16T12:34:51Z'>
		The error still occurs when I change freq = "MS" to freq = "M".
		</comment>
		<comment id='3' author='wizcheu' date='2019-12-16T12:55:09Z'>
		Both your examples work for me, using gluonts==0.4.2. In fact, the gaussian one does also work with MS for me.
		</comment>
		<comment id='4' author='wizcheu' date='2019-12-16T17:19:07Z'>
		&lt;denchmark-link:https://github.com/wizcheu&gt;@wizcheu&lt;/denchmark-link&gt;
 what pandas version are you using? I remember us having issue with an older version.
		</comment>
		<comment id='5' author='wizcheu' date='2019-12-17T16:32:03Z'>
		&lt;denchmark-link:https://github.com/jaheba&gt;@jaheba&lt;/denchmark-link&gt;
 . When I update the pandas to , it works! Thanks for your reply~
		</comment>
	</comments>
</bug>