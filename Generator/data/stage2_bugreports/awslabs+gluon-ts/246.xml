<bug id='246' author='sanzgiri' open_date='2019-08-14T22:03:27Z' closed_time='2019-08-15T07:41:52Z'>
	<summary>MXNetError while running tutorial examples</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

Running into an error on cell 37 of Quick Start Tutorial and cell 47 of Extended Tutorial notebooks
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

Run jupyter notebook with a Python 3.6 kernel, MXNet version 1.4.1 or 1.5.0, gluon-ts version 1.3.2
&lt;denchmark-h:h2&gt;Error Message&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;---------------------------------------------------------------------------
MXNetError                                Traceback (most recent call last)
&lt;ipython-input-32-19e7d512cf80&gt; in &lt;module&gt;
----&gt; 1 forecasts = list(forecast_it)
      2 tss = list(ts_it)

/usr/local/lib/python3.6/dist-packages/gluonts/model/predictor.py in predict(self, dataset, num_eval_samples)
    288         for batch in inference_data_loader:
    289             inputs = [batch[k] for k in self.input_names]
--&gt; 290             outputs = self.prediction_net(*inputs).asnumpy()
    291             if self.output_transform is not None:
    292                 outputs = self.output_transform(batch, outputs)

/usr/local/lib/python3.6/dist-packages/mxnet/gluon/block.py in __call__(self, *args)
    546 
    547     def forward(self, *args):
--&gt; 548         """Overrides to implement forward computation using :py:class:`NDArray`. Only
    549         accepts positional arguments.
    550 

/usr/local/lib/python3.6/dist-packages/mxnet/gluon/block.py in forward(self, x, *args)
    923         with self.name_scope():
    924             return self.hybrid_forward(symbol, x, *args, **params)
--&gt; 925 
    926     def hybrid_forward(self, F, x, *args, **kwargs):
    927         """Overrides to construct symbolic graph for this `Block`.

/usr/local/lib/python3.6/dist-packages/gluonts/model/simple_feedforward/_network.py in hybrid_forward(self, F, past_target)
    185 
    186         # (num_samples, batch_size, prediction_length)
--&gt; 187         samples = distr.sample(self.num_parallel_samples)
    188 
    189         # (batch_size, num_samples, prediction_length)

/usr/local/lib/python3.6/dist-packages/gluonts/distribution/transformed_distribution.py in sample(self, num_samples)
     80     def sample(self, num_samples: Optional[int] = None) -&gt; Tensor:
     81         with autograd.pause():
---&gt; 82             s = self.base_distribution.sample(num_samples=num_samples)
     83             for t in self.transforms:
     84                 s = t.f(s)

/usr/local/lib/python3.6/dist-packages/gluonts/distribution/student_t.py in sample(self, num_samples)
    107             sigma=self.sigma,
    108             nu=self.nu,
--&gt; 109             num_samples=num_samples,
    110         )
    111 

/usr/local/lib/python3.6/dist-packages/gluonts/distribution/distribution.py in _sample_multiple(sample_func, num_samples, *args, **kwargs)
    245         k: _expand_param(v, num_samples) for k, v in kwargs.items()
    246     }
--&gt; 247     samples = sample_func(*args_expanded, **kwargs_expanded)
    248     return samples

/usr/local/lib/python3.6/dist-packages/gluonts/distribution/student_t.py in s(mu, sigma, nu)
     97             F = self.F
     98             gammas = F.sample_gamma(
---&gt; 99                 alpha=nu / 2.0, beta=2.0 / (nu * F.square(sigma))
    100             )
    101             normal = F.sample_normal(mu=mu, sigma=1.0 / F.sqrt(gammas))

/usr/local/lib/python3.6/dist-packages/mxnet/ndarray/register.py in sample_gamma(alpha, beta, shape, dtype, out, name, **kwargs)

/usr/local/lib/python3.6/dist-packages/mxnet/_ctypes/ndarray.py in _imperative_invoke(handle, ndargs, keys, vals, out)
     90         c_str_array(keys),
     91         c_str_array([str(s) for s in vals]),
---&gt; 92         ctypes.byref(out_stypes)))
     93 
     94     if original_output is not None:

/usr/local/lib/python3.6/dist-packages/mxnet/base.py in check_call(ret)
    251     if ret != 0:
    252         raise MXNetError(py_str(_LIB.MXGetLastError()))
--&gt; 253 
    254 
    255 if sys.version_info[0] &lt; 3:

MXNetError: vector::_M_range_insert```

## Environment
- Operating system: Ubuntu 16.04
- Python version: 3.6
- GluonTS version: 0.3.2

(Add as much information about your environment as possible, e.g. dependencies versions.)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='sanzgiri' date='2019-08-15T07:11:44Z'>
		I can reproduce the error for mxnet 1.5, which is not yet supported.
Can you double check with mxnet 1.4.1 by reinstalling it?
&lt;denchmark-code&gt;pip install --upgrade "mxnet==1.4.1"
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='sanzgiri' date='2019-08-15T07:29:23Z'>
		I reinstalled mxnet 1.4.1 and both notebooks now run correctly. Thanks!
		</comment>
		<comment id='3' author='sanzgiri' date='2020-04-03T03:41:12Z'>
		
I can reproduce the error for mxnet 1.5, which is not yet supported.
Can you double check with mxnet 1.4.1 by reinstalling it?
pip install --upgrade "mxnet==1.4.1"


Now, the project is supporting mxnet 1.6. Why mxnet 1.5 is not yet supported? I haven't try to use mxnet 1.4
		</comment>
		<comment id='4' author='sanzgiri' date='2020-04-03T09:11:32Z'>
		
Now, the project is supporting mxnet 1.6. Why mxnet 1.5 is not yet supported? I haven't try to use mxnet 1.4

&lt;denchmark-link:https://github.com/lfywork&gt;@lfywork&lt;/denchmark-link&gt;
 mxnet 1.5 had a weird bug on Linux, that prevented some sampling operators from working. You can use gluonts with mxnet 1.5 on other platforms if that works for you (should be working fine on macOS for example).
Note: the project supports mxnet 1.6 now in the sense that tests are run with mxnet 1.6. This doesnâ€™t exclude that other versions will also work, but if any component starts using features that were introduced in 1.6, then older versions will be naturally discouraged.
Hope that helps!
		</comment>
		<comment id='5' author='sanzgiri' date='2020-05-19T15:52:10Z'>
		This bug still exists under mxnet 1.6. The environment is  TLJH running on Ubuntu (downloaded the latest updates as of May 2020).    Another 'bug' experienced was the need to install opencv and then mxnet again -- otherwise, import mxnet  would core dump.
		</comment>
	</comments>
</bug>