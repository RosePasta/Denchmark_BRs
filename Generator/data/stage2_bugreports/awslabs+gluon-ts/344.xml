<bug id='344' author='xiehust' open_date='2019-09-27T07:34:52Z' closed_time='2019-09-27T08:03:44Z'>
	<summary>Error using feat_static_cat feature in DeepAREstimator</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

(A clear and concise description of what the bug is.)
Hi,
I am trying to use DeepAREstimator by adding feat_static_cat feature, how every it seems not work.
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

(Please provide minimal example of code snippet that reproduces the error. For existing examples, please provide link.)
I used the exact same dataset in chapter 1.3 from the tutorial.
&lt;denchmark-link:https://gluon-ts.mxnet.io/examples/extended_forecasting_tutorial/extended_tutorial.html&gt;https://gluon-ts.mxnet.io/examples/extended_forecasting_tutorial/extended_tutorial.html&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;import mxnet as mx
from mxnet import gluon
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import json
import random
import os,datetime
from itertools import islice
from pathlib import Path
from gluonts.dataset.repository.datasets import get_dataset, dataset_recipes
from gluonts.dataset.util import to_pandas
from gluonts.transform import FieldName
from gluonts.dataset.common import ListDataset
from gluonts.model.deepar import DeepAREstimator
from gluonts.model.simple_feedforward import SimpleFeedForwardEstimator
from gluonts.trainer import Trainer

def create_dataset(num_series, num_steps, period=24, mu=1, sigma=0.3):
    # create target: noise + pattern
    # noise
    noise = np.random.normal(mu, sigma, size=(num_series, num_steps))

    # pattern - sinusoid with different phase
    sin_minumPi_Pi = np.sin(np.tile(np.linspace(-np.pi, np.pi, period), int(num_steps / period)))
    sin_Zero_2Pi = np.sin(np.tile(np.linspace(0, 2 * np.pi, 24), int(num_steps / period)))

    pattern = np.concatenate((np.tile(sin_minumPi_Pi.reshape(1, -1),
                                      (int(np.ceil(num_series / 2)),1)),
                              np.tile(sin_Zero_2Pi.reshape(1, -1),
                                      (int(np.floor(num_series / 2)), 1))
                             ),
                             axis=0
                            )

    target = noise + pattern

    # create time features: use target one period earlier, append with zeros
    feat_dynamic_real = np.concatenate((np.zeros((num_series, period)),
                                        target[:, :-period]
                                       ),
                                       axis=1
                                      )

    # create categorical static feats: use the sinusoid type as a categorical feature
    feat_static_cat = np.concatenate((np.zeros(int(np.ceil(num_series / 2)))+1,
                                      np.ones(int(np.floor(num_series / 2)))+1
                                     ),
                                     axis=0
                                    )

    return target, feat_dynamic_real, feat_static_cat

custom_ds_metadata = {'num_series': 100,
                      'num_steps': 24 * 7,
                      'prediction_length': 24,
                      'freq': '1H',
                      'start': [pd.Timestamp("01-01-2019", freq='1H')
                                for _ in range(100)]
                     }

data_out = create_dataset(custom_ds_metadata['num_series'],
                          custom_ds_metadata['num_steps'],
                          custom_ds_metadata['prediction_length']
                         )

target, feat_dynamic_real, feat_static_cat = data_out

train_ds = ListDataset([{FieldName.TARGET: target,
                         FieldName.START: start,
                         FieldName.FEAT_DYNAMIC_REAL: fdr,
                         FieldName.FEAT_STATIC_CAT: [fsc]}
                        for (target, start, fdr, fsc) in zip(target[:, :-custom_ds_metadata['prediction_length']],
                                                             custom_ds_metadata['start'],
                                                             feat_dynamic_real[:, :-custom_ds_metadata['prediction_length']],
                                                             feat_static_cat)],
                      freq=custom_ds_metadata['freq'])

estimator = DeepAREstimator(freq=custom_ds_metadata['freq'], 
                            use_feat_dynamic_real = True,
                           use_feat_static_cat = True,
                            cardinality =  [1,2],
                          prediction_length=24, 
                         context_length=24*2,
                            trainer=Trainer(epochs=10,ctx='cpu',
                                            hybridize = False,
                                            batch_size = 32,
                            num_batches_per_epoch=100))

estimator.train(train_ds)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Error Message&lt;/denchmark-h&gt;

(Paste the complete error message, including stack trace.)
&lt;denchmark-code&gt;MXNetError                                Traceback (most recent call last)
&lt;ipython-input-127-17fe6320bbf1&gt; in &lt;module&gt;
----&gt; 1 estimator.train(train_ds)

~/anaconda3/lib/python3.7/site-packages/gluonts/model/estimator.py in train(self, training_data)
    201     def train(self, training_data: Dataset) -&gt; Predictor:
    202 
--&gt; 203         return self.train_model(training_data).predictor

~/anaconda3/lib/python3.7/site-packages/gluonts/model/estimator.py in train_model(self, training_data)
    187             net=trained_net,
    188             input_names=get_hybrid_forward_input_names(trained_net),
--&gt; 189             train_iter=training_data_loader,
    190         )
    191 

~/anaconda3/lib/python3.7/site-packages/gluonts/trainer/_base.py in __call__(self, net, input_names, train_iter)
    250 
    251                             with mx.autograd.record():
--&gt; 252                                 output = net(*inputs)
    253 
    254                                 # network can returns several outputs, the first being always the loss

~/anaconda3/lib/python3.7/site-packages/mxnet/gluon/block.py in __call__(self, *args)
    538             hook(self, args)
    539 
--&gt; 540         out = self.forward(*args)
    541 
    542         for hook in self._forward_hooks.values():

~/anaconda3/lib/python3.7/site-packages/mxnet/gluon/block.py in forward(self, x, *args)
    915                     params = {i: j.data(ctx) for i, j in self._reg_params.items()}
    916 
--&gt; 917                 return self.hybrid_forward(ndarray, x, *args, **params)
    918 
    919         assert isinstance(x, Symbol), \

~/anaconda3/lib/python3.7/site-packages/gluonts/model/deepar/_network.py in hybrid_forward(self, F, feat_static_cat, past_time_feat, past_target, past_observed_values, future_time_feat, future_target, future_observed_values)
    367             future_time_feat=future_time_feat,
    368             future_target=future_target,
--&gt; 369             future_observed_values=future_observed_values,
    370         )
    371 

~/anaconda3/lib/python3.7/site-packages/gluonts/model/deepar/_network.py in distribution(self, feat_static_cat, past_time_feat, past_target, past_observed_values, future_time_feat, future_target, future_observed_values)
    322             past_observed_values=past_observed_values,
    323             future_time_feat=future_time_feat,
--&gt; 324             future_target=future_target,
    325         )
    326 

~/anaconda3/lib/python3.7/site-packages/gluonts/model/deepar/_network.py in unroll_encoder(self, F, feat_static_cat, past_time_feat, past_target, past_observed_values, future_time_feat, future_target)
    229 
    230         # (batch_size, num_features)
--&gt; 231         embedded_cat = self.embedder(feat_static_cat)
    232 
    233         # in addition to embedding features, use the log scale as it can help prediction too

~/anaconda3/lib/python3.7/site-packages/mxnet/gluon/block.py in __call__(self, *args)
    538             hook(self, args)
    539 
--&gt; 540         out = self.forward(*args)
    541 
    542         for hook in self._forward_hooks.values():

~/anaconda3/lib/python3.7/site-packages/mxnet/gluon/block.py in forward(self, x, *args)
    915                     params = {i: j.data(ctx) for i, j in self._reg_params.items()}
    916 
--&gt; 917                 return self.hybrid_forward(ndarray, x, *args, **params)
    918 
    919         assert isinstance(x, Symbol), \

~/anaconda3/lib/python3.7/site-packages/gluonts/block/feature.py in hybrid_forward(self, F, features)
     92             # we slice the last dimension, giving an array of length self.__num_features with shape (N,T) or (N)
     93             cat_feature_slices = F.split(
---&gt; 94                 features, axis=-1, num_outputs=self.__num_features
     95             )
     96         else:

~/anaconda3/lib/python3.7/site-packages/mxnet/ndarray/register.py in split(data, num_outputs, axis, squeeze_axis, out, name, **kwargs)

~/anaconda3/lib/python3.7/site-packages/mxnet/_ctypes/ndarray.py in _imperative_invoke(handle, ndargs, keys, vals, out)
     90         c_str_array(keys),
     91         c_str_array([str(s) for s in vals]),
---&gt; 92         ctypes.byref(out_stypes)))
     93 
     94     if original_output is not None:

~/anaconda3/lib/python3.7/site-packages/mxnet/base.py in check_call(ret)
    250     """
    251     if ret != 0:
--&gt; 252         raise MXNetError(py_str(_LIB.MXGetLastError()))
    253 
    254 

MXNetError: [15:33:17] src/operator/./slice_channel-inl.h:208: Check failed: dshape[real_axis] % param_.num_outputs == 0U (1 vs. 0) You are trying to split the 1-th axis of input tensor with shape [32,1] into num_outputs=2 evenly sized chunks, but this is not possible because 2 does not evenly divide 1
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


Operating system: Macos
Python version: 3.7.1
GluonTS version: 0.3.3

(Add as much information about your environment as possible, e.g. dependencies versions.)
	</description>
	<comments>
		<comment id='1' author='xiehust' date='2019-09-27T08:03:44Z'>
		Hi, by inspection, the "feat_static_cat" field in your dataset has length 1. The cardinality hyperparameter of the DeepAREstimator must have the same length, but it has length 2 instead. In particular, each entry in the cardinality list should indicate how many different values each element "feat_static_cat" field can get. Can you try to fix this? For example, setting
cardinality=[2]
Feel free to reopen in case the problem persist.
		</comment>
	</comments>
</bug>