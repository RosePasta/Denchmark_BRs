<bug id='1325' author='javithe7' open_date='2020-09-03T11:44:02Z' closed_time='2020-09-23T15:25:20Z'>
	<summary>Using cortex inside a docker</summary>
	<description>
Hi everyone
We have installed cortex into an alpine docker using RUN bash -c "$(curl -sS https://raw.githubusercontent.com/cortexlabs/cortex/0.18/get-cli.sh)"and its installed well, but when we try to connect to our pre-existing cluster using "cortex cluster info --config my_cluster.yaml -env aws" it gives this error:
&lt;denchmark-code&gt;foqum-read-cortex-api_1  | fetching cluster status ...
foqum-read-cortex-api_1  | 
foqum-read-cortex-api_1  | panic: runtime error: invalid memory address or nil pointer dereference [recovered]
foqum-read-cortex-api_1  |      panic: runtime error: invalid memory address or nil pointer dereference
foqum-read-cortex-api_1  | [signal SIGSEGV: segmentation violation code=0x1 addr=0x8 pc=0x13793f2]
foqum-read-cortex-api_1  | 
foqum-read-cortex-api_1  | goroutine 1 [running]:
foqum-read-cortex-api_1  | github.com/cortexlabs/cortex/pkg/lib/exit.Panic(0x299c940, 0xc000845b40, 0x0, 0x0, 0x0)
foqum-read-cortex-api_1  |      /home/circleci/project/pkg/lib/exit/exit.go:60 +0x1c0
foqum-read-cortex-api_1  | github.com/cortexlabs/cortex/pkg/lib/exit.RecoverAndExit(0x0, 0x0, 0x0)
foqum-read-cortex-api_1  |      /home/circleci/project/pkg/lib/exit/exit.go:66 +0x9d
foqum-read-cortex-api_1  | panic(0x21a2080, 0x3d3e440)
foqum-read-cortex-api_1  |      /usr/local/go/src/runtime/panic.go:969 +0x166
foqum-read-cortex-api_1  | github.com/cortexlabs/cortex/pkg/types/clusterconfig.(*Config).UserTable(0xc00036c390, 0x0, 0x0, 0x0)
foqum-read-cortex-api_1  |      /home/circleci/project/pkg/types/clusterconfig/clusterconfig.go:1032 +0xe2
foqum-read-cortex-api_1  | github.com/cortexlabs/cortex/pkg/types/clusterconfig.(*InternalConfig).UserTable(0xc00036c390, 0x0, 0x0, 0x0)
foqum-read-cortex-api_1  |      /home/circleci/project/pkg/types/clusterconfig/clusterconfig.go:1020 +0xc9
foqum-read-cortex-api_1  | github.com/cortexlabs/cortex/cli/cmd.printInfoClusterConfig(0xc00036c380)
foqum-read-cortex-api_1  |      /home/circleci/project/cli/cmd/cluster.go:501 +0xc6
foqum-read-cortex-api_1  | github.com/cortexlabs/cortex/cli/cmd.printInfoOperatorResponse(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)
foqum-read-cortex-api_1  |      /home/circleci/project/cli/cmd/cluster.go:491 +0x220
foqum-read-cortex-api_1  | github.com/cortexlabs/cortex/cli/cmd.cmdInfo(0xc0005659a0, 0x14, 0xc00030fe00, 0x28, 0xc00055e040, 0x14, 0xc00030fe30, 0x28, 0xc00009c140, 0xc00055e000)
foqum-read-cortex-api_1  |      /home/circleci/project/cli/cmd/cluster.go:441 +0x415
foqum-read-cortex-api_1  | github.com/cortexlabs/cortex/cli/cmd.glob..func3(0x3d558e0, 0xc00011d100, 0x0, 0x4)
foqum-read-cortex-api_1  |      /home/circleci/project/cli/cmd/cluster.go:272 +0x1df
foqum-read-cortex-api_1  | github.com/spf13/cobra.(*Command).execute(0x3d558e0, 0xc00011d080, 0x4, 0x4, 0x3d558e0, 0xc00011d080)
foqum-read-cortex-api_1  |      /home/circleci/go/pkg/mod/github.com/spf13/cobra@v1.0.0/command.go:846 +0x29d
foqum-read-cortex-api_1  | github.com/spf13/cobra.(*Command).ExecuteC(0x3d56600, 0xc00069ff40, 0x1, 0x1)
foqum-read-cortex-api_1  |      /home/circleci/go/pkg/mod/github.com/spf13/cobra@v1.0.0/command.go:950 +0x349
foqum-read-cortex-api_1  | github.com/spf13/cobra.(*Command).Execute(...)
foqum-read-cortex-api_1  |      /home/circleci/go/pkg/mod/github.com/spf13/cobra@v1.0.0/command.go:887
foqum-read-cortex-api_1  | github.com/cortexlabs/cortex/cli/cmd.Execute()
foqum-read-cortex-api_1  |      /home/circleci/project/cli/cmd/root.go:152 +0x300
foqum-read-cortex-api_1  | main.main()
foqum-read-cortex-api_1  |      /home/circleci/project/cli/main.go:24 +0x20 
&lt;/denchmark-code&gt;

We have solved this error by mapping our host  /root/.cortex to the /root/.cortex of our docker, inside the docker-compose file.
The thing is, we don't want to have to need to do that mapping . We want to know why after installing the cortex cli using the command mentioned at the beginning of this text, the .cortex folder is not created directly within our docker root folder.
To sum up, when we install the cortex client, the .cortex folder is not created
Thanks for advance
	</description>
	<comments>
		<comment id='1' author='javithe7' date='2020-09-03T23:41:34Z'>
		&lt;denchmark-link:https://github.com/javithe7&gt;@javithe7&lt;/denchmark-link&gt;
 I will see if I can reproduce this, thank you for creating the issue.
In the meantime, one thing you can try (although I have not tried this so I don't know for sure that it will work), is that you can run cortex env configure if you have access to all of the necessary information. You can either let it prompt you for the information it needs, or you can pass it in as flags, e.g.
&lt;denchmark-code&gt;cortex env configure aws --provider aws --operator-endpoint &lt;&gt; --aws-access-key-id &lt;&gt; --aws-secret-access-key &lt;&gt;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='javithe7' date='2020-09-04T00:51:56Z'>
		&lt;denchmark-link:https://github.com/javithe7&gt;@javithe7&lt;/denchmark-link&gt;
 I was not able to reproduce the error, do you mind replying with  (with any sensitive information hidden), a minimal version of your Dockerfile that will reproduce the error, the command that you are using to run your Docker image, and anything else that might be helpful as I try to reproduce it? Also, how many clusters are running on your AWS account when you run the  command?
		</comment>
		<comment id='3' author='javithe7' date='2020-09-15T03:20:54Z'>
		&lt;denchmark-link:https://github.com/javithe7&gt;@javithe7&lt;/denchmark-link&gt;
 I just wanted to follow up on this; were you able to resolve your issue?
		</comment>
		<comment id='4' author='javithe7' date='2020-09-17T18:20:45Z'>
		&lt;denchmark-link:https://github.com/javithe7&gt;@javithe7&lt;/denchmark-link&gt;
 We think we've identified the cause of this issue, and are working on fixing it in time for our next release
		</comment>
		<comment id='5' author='javithe7' date='2020-09-30T01:44:30Z'>
		This has now been released in v0.20
		</comment>
	</comments>
</bug>