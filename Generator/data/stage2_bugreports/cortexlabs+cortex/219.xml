<bug id='219' author='deliahu' open_date='2019-07-08T20:54:46Z' closed_time='2019-08-07T14:57:58Z'>
	<summary>Pods stuck in ContainerCreating (AWS CNI pod limit)</summary>
	<description>
&lt;denchmark-h:h3&gt;Description&lt;/denchmark-h&gt;

Pod limits per node have been reached (17 for t3.medium, 11 for t3.small). The limits exist due to IP address allocation from the &lt;denchmark-link:https://github.com/aws/amazon-vpc-cni-k8s&gt;AWS cni plugin&lt;/denchmark-link&gt;
, see &lt;denchmark-link:https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI&gt;here&lt;/denchmark-link&gt;
. Once the limit is reached, cluster autoscaling is triggered, and pods that are scheduled on the new node get stuck in .
Update: this was fixed in v1.5.2 of the AWS CNI.
&lt;denchmark-h:h2&gt;Things that will fix:&lt;/denchmark-h&gt;


AWS fixing the bug in their CNI

aws/amazon-vpc-cni-k8s#282
aws/amazon-vpc-cni-k8s#525
aws/amazon-vpc-cni-k8s#330


Replace AWS cni plugin

aws/containers-roadmap#71
awslabs/amazon-eks-ami#117
aws/containers-roadmap#138
aws/amazon-vpc-cni-k8s#214
aws/amazon-vpc-cni-k8s#59



&lt;denchmark-h:h2&gt;Alternative CNI plugins&lt;/denchmark-h&gt;


weave-net

Running Weave Net on EKS
By far the simplest installation process
metrics-server and istio seem to not work out of the box

kubernetes-sigs/metrics-server#166
kubernetes-sigs/metrics-server#188
kubernetes-sigs/metrics-server#157
kubernetes-sigs/metrics-server#131
kubernetes-sigs/metrics-server#45




calico

Running Calico on EKS
GKE uses it?
EKS supports running Calico alongside AWS CNI


flannel

Running Flannel on EKS


istio

is not be a replacement, but in addition to the aws cni plugin; see here or here and search "chained"


cni-genie (to install other CNIs)

install it on the master node and configure the default to a different CNI before creating the ec2 worker nodes
Example project of using cni-genie to install weave on EKS



May need to run  before adding worker nodes to uninstall the AWS cni. May also need to start kubelet without  - otherwise kubelet may refuse to start because the configured CNI plugin cannot be brought up (aws-node container is not running). Another way to remove the AWS cni is to build a custom AMI with the desired CNI plugin prefixed with 00 instead of the standard 10 so that it circumvents the loading of the AWS VPC CNI plugin. &lt;denchmark-link:https://github.com/awslabs/amazon-eks-ami/issues/117&gt;source&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;Things that will help:&lt;/denchmark-h&gt;


 Increase default node size
 Increase default CPU request (to reach CPU limits before pod limits)
 Replace argo with custom DAG management

	</description>
	<comments>
	</comments>
</bug>