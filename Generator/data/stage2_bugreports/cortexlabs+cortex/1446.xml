<bug id='1446' author='dakshvar22' open_date='2020-10-14T21:56:37Z' closed_time='2020-11-11T18:00:24Z'>
	<summary>Problems with autoscaling</summary>
	<description>
&lt;denchmark-h:h4&gt;Version&lt;/denchmark-h&gt;

0.20.0
&lt;denchmark-h:h4&gt;Description&lt;/denchmark-h&gt;

The number of replicas do not scale with increase in number of in-flight requests. New replicas are requested, but they never come up.
&lt;denchmark-h:h4&gt;Configuration&lt;/denchmark-h&gt;

cortex.yaml
&lt;denchmark-code&gt;- name: ###
  kind: RealtimeAPI
  predictor:
    type: python
    path: predictor.py
    processes_per_replica: 3
    threads_per_process: 1
    image: dakshvar22/cortex_custom:hub
  compute:
    cpu: 1
    gpu: 1 # this is optional, since the api can also run on cpu
    mem: 14G
  autoscaling:  # (aws only)
    min_replicas: 1  # minimum number of replicas (default: 1)
    max_replicas: 3  # maximum number of replicas (default: 100)
    init_replicas: 1  # initial number of replicas (default: &lt;min_replicas&gt;)
    window: 10s
    upscale_stabilization_period: 10s
    max_upscale_factor: 2
  update_strategy:
    max_surge: 0
&lt;/denchmark-code&gt;

Cluster info produced from cortex cluster info
&lt;denchmark-code&gt;fetching cluster status ...

aws access key id:             ****************7ELA
cluster version:               0.20.0
cluster name:                  test
aws region:                    us-east-1
availability zones:            [us-east-1a, us-east-1b]
s3 bucket:                     test-12d2cd140a
instance type:                 g4dn.xlarge
min instances:                 1
max instances:                 3
tags:                          {"cortex.dev/cluster-name": "test"}
instance volume size (Gi):     50
instance volume type:          gp2
instance volume iops:          &lt;null&gt;
use spot instances:            no
cloudwatch log group:          cortex
subnet visibility:             public
nat gateway:                   none
api load balancer scheme:      internet-facing
operator load balancer scheme: internet-facing
api gateway:                   public
telemetry:                     true
operator image:                cortexlabs/operator:0.20.0
manager image:                 cortexlabs/manager:0.20.0
downloader image:              cortexlabs/downloader:0.20.0
request monitor image:         cortexlabs/request-monitor:0.20.0
cluster autoscaler image:      cortexlabs/cluster-autoscaler:0.20.0
metrics server image:          cortexlabs/metrics-server:0.20.0
inferentia image:              cortexlabs/inferentia:0.20.0
neuron rtd image:              cortexlabs/neuron-rtd:0.20.0
nvidia image:                  cortexlabs/nvidia:0.20.0
fluentd image:                 cortexlabs/fluentd:0.20.0
statsd image:                  cortexlabs/statsd:0.20.0
istio proxy image:             cortexlabs/istio-proxy:0.20.0
istio pilot image:             cortexlabs/istio-pilot:0.20.0
istio citadel image:           cortexlabs/istio-citadel:0.20.0
istio galley image:            cortexlabs/istio-galley:0.20.0

your cluster currently costs $0.72 per hour

aws resource                            cost per hour
1 eks cluster                           $0.10
1 instance for your apis                $0.526 total
1 50gb ebs volume for your apis         $0.007 total
1 t3.medium instance for the operator   $0.0416
1 20gb ebs volume for the operator      $0.003
2 network load balancers                $0.045 total

your cluster has 1 API replica running across 1 instance, and 2 unscheduled replicas

instance type   lifecycle   replicas   CPU (requested / total allocatable)   memory (requested / total allocatable)   GPU (requested / total allocatable)
g4dn.xlarge     on-demand   1          1000m / 3190m                         14G / 14893392Ki                         1 / 1
&lt;/denchmark-code&gt;

I am testing my API with K6 cloud. I am using 10 virtual users each firing a request in one second for a total of 5 minutes. The approx response time for each request should be around 10s which is validated separately by firing just one request. Since the value for target_replica_concurrency is unchanged, it should be 3 to start with since i am using 3 processes per replica. Once, the number of concurrent calls goes up the target concurrency I can see that cortex has requested for more replicas, but they never spin up and the number of live instances is always 1 resulting in the very high response times for in-flight requests in the back of the queue.
Am i doing anything wrong?
&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;

I would expect it to be reproducible with the configurations given above.
&lt;denchmark-h:h4&gt;Expected behavior&lt;/denchmark-h&gt;

Cortex brings up new instances as they are requested.
&lt;denchmark-h:h4&gt;Actual behavior&lt;/denchmark-h&gt;

New instances are requested but they never come up.
&lt;denchmark-h:h4&gt;Stack traces&lt;/denchmark-h&gt;

No errors. cortex logs &lt;api&gt; is correctly showing the logs from only one replica.
	</description>
	<comments>
		<comment id='1' author='dakshvar22' date='2020-10-14T22:07:59Z'>
		&lt;denchmark-link:https://github.com/dakshvar22&gt;@dakshvar22&lt;/denchmark-link&gt;
 Thank you for reaching out.
I will try to reproduce this. In the meantime, do you mind sending the zip file which is generated by running  to us at &lt;denchmark-link:mailto:dev@cortex.dev&gt;dev@cortex.dev&lt;/denchmark-link&gt;
? This will include the cluster autoscaler logs and some AWS logs, which will be helpful while we're debugging.
Also, I am assuming that this is true, but would like to confirm: If you run cortex get do you see that there are 3 replicas requested (but only 1 is "live")?
Lastly, how long was / has been the cluster been in the state where it requests 3 API replicas but has only 1 instance?
		</comment>
		<comment id='2' author='dakshvar22' date='2020-10-14T22:09:21Z'>
		&lt;denchmark-link:https://github.com/dakshvar22&gt;@dakshvar22&lt;/denchmark-link&gt;
 I'd also be happy to jump on a call to research this if you're interested, feel free to email me at &lt;denchmark-link:mailto:david@cortex.dev&gt;david@cortex.dev&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='dakshvar22' date='2020-10-14T22:11:54Z'>
		&lt;denchmark-link:https://github.com/deliahu&gt;@deliahu&lt;/denchmark-link&gt;
 Thanks for the quick response. I am attaching logs of the command  command -
&lt;denchmark-code&gt;$ cortex get paraphraser --env aws                                                                                                   12:10:54am CEST

status   up-to-date   requested   last update   avg request   2XX
live     1            3           11m           35.2452 s     70

metrics dashboard: https://us-east-1.console.aws.amazon.com/cloudwatch/home#dashboards:name=test

endpoint: https://g0v3cy2m69.execute-api.us-east-1.amazonaws.com/paraphraser
example curl: curl https://g0v3cy2m69.execute-api.us-east-1.amazonaws.com/paraphraser -X POST -H "Content-Type: application/json" -d @sample.json

configuration
name: paraphraser
kind: RealtimeAPI
predictor:
  type: python
  path: predictor.py
  processes_per_replica: 3
  threads_per_process: 1
  image: dakshvar22/cortex_custom:hub
networking:
  endpoint: /paraphraser
  api_gateway: public
compute:
  cpu: 200m
  gpu: 1
  mem: 14G
autoscaling:
  min_replicas: 1
  max_replicas: 4
  init_replicas: 1
  target_replica_concurrency: 3.0
  max_replica_concurrency: 1024
  window: 10s
  downscale_stabilization_period: 5m0s
  upscale_stabilization_period: 10s
  max_downscale_factor: 0.75
  max_upscale_factor: 2.0
  downscale_tolerance: 0.05
  upscale_tolerance: 0.05
update_strategy:
  max_surge: 0
  max_unavailable: 25%

&lt;/denchmark-code&gt;


how long was / has been the cluster been in the state where it requests 3 API replicas but has only 1 instance?

it stays the same for the whole 5 mins of when the requests are triggered.
		</comment>
		<comment id='4' author='dakshvar22' date='2020-10-14T22:16:54Z'>
		&lt;denchmark-link:https://github.com/dakshvar22&gt;@dakshvar22&lt;/denchmark-link&gt;
 Depending on a few factors, it is possible that it could take &gt; 5 minutes for the new instances to be ready and for the replicas to be live (see &lt;denchmark-link:https://docs.cortex.dev/deployments/realtime-api/autoscaling#a-note-about-autoscaling-responsiveness&gt;here&lt;/denchmark-link&gt;
).
In your AWS EC2 dashboard, do are there multiple instances that are initializing (or running)? If not, the other thing I would check is the activity history of the autoscaling group (see &lt;denchmark-link:https://docs.cortex.dev/troubleshooting/stuck-updating#check-your-aws-auto-scaling-group-activity-history&gt;here&lt;/denchmark-link&gt;
 for instructions)
		</comment>
		<comment id='5' author='dakshvar22' date='2020-10-14T22:29:45Z'>
		&lt;denchmark-link:https://github.com/deliahu&gt;@deliahu&lt;/denchmark-link&gt;
 I think I now spot the problem in the activity history of the autoscaling group. I see the following description in a lot of  events -
&lt;denchmark-code&gt;Launching a new EC2 instance. Status Reason: You have requested more vCPU capacity than your current vCPU limit of 5 allows for the instance bucket that the specified instance type belongs to. Please visit http://aws.amazon.com/contact-us/ec2-request to request an adjustment to this limit. Launching EC2 instance failed.
&lt;/denchmark-code&gt;

However, I am not sure what to do now, bc when i go to http://aws.amazon.com/contact-us/ec2-request and select G type instances, it only lets me configure the instance limit which is set to 5 right now. How do I increase the vCPU limit?
In the meantime, I have also sent you the cluster logs via email.
		</comment>
		<comment id='6' author='dakshvar22' date='2020-10-14T22:34:54Z'>
		Are the instance limits that I enter in the form actually vCPU limits? I guess one G4DN.xlarge machine takes up 4vCPU, so my current limit is being reached whenever a new instance is to be spawned.
		</comment>
		<comment id='7' author='dakshvar22' date='2020-10-14T22:34:54Z'>
		&lt;denchmark-link:https://github.com/dakshvar22&gt;@dakshvar22&lt;/denchmark-link&gt;
 my understanding is that this is just poorly worded by AWS, and that it actually is the vCPU limit. Since your limit is 5, this is in line with the behavior we are seeing (since 1 g4dn.xlarge has 4 vCPU)
		</comment>
		<comment id='8' author='dakshvar22' date='2020-10-14T22:35:54Z'>
		Exactly! I've requested more vCPU limit now. Thanks for your time. i'll test this again once I have the limits approved.
		</comment>
		<comment id='9' author='dakshvar22' date='2020-10-14T22:43:52Z'>
		No problem, keep us posted on whether this fixes it.
Also, we are tracking this in &lt;denchmark-link:https://github.com/cortexlabs/cortex/issues/936&gt;#936&lt;/denchmark-link&gt;
, which when resolved, will have cortex surface this kind of issue directly to the user.
		</comment>
	</comments>
</bug>