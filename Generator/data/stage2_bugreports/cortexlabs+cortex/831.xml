<bug id='831' author='RobertLucian' open_date='2020-02-29T04:05:40Z' closed_time='2020-03-10T05:36:30Z'>
	<summary>AttributeError _thread._local error on inference when using Keras + Tensorflow</summary>
	<description>
&lt;denchmark-h:h4&gt;Version&lt;/denchmark-h&gt;

On version 0.13.x.
&lt;denchmark-h:h4&gt;Description&lt;/denchmark-h&gt;

When using the latest version of Keras (2.3.1) and Tensorflow as its backend (2.x), the AttributeError: '_thread._local' object has no attribute 'value' error is encountered because _SYMBOLIC_SCOPE.value does not exist within the Tensorflow backend. The error is encountered when making the prediction and not when the model is loaded.
It must be noted that this specifically happens if the keras.models.load_model function is used.
It appears to be due to a conflict between keras/tensorflow and flask (the underlying web framework used in cortex). More on that here:
&lt;denchmark-link:https://github.com/keras-team/keras/issues/13353&gt;keras-team/keras#13353&lt;/denchmark-link&gt;

&lt;denchmark-h:h4&gt;Alternatives&lt;/denchmark-h&gt;

&lt;denchmark-h:h5&gt;Alt. 1&lt;/denchmark-h&gt;

One very good way of circumventing this is to replace the
from keras.models import load_model # the one getting the error with
with
from tensorflow.keras.models import load_model # the one with which no error is thrown
&lt;denchmark-h:h5&gt;Alt. 2&lt;/denchmark-h&gt;

Another possible way to circumvent this is to switch to theano backend by adding KERAS_BACKEND=theano environment variable inside the cortex.yaml configuration file. But this only works for the CPU inferencing. With this backend, to make it work on the GPU too, pygpu has to be installed and this dependecy can only be installed with conda or by building it from source, which is anyway riddled with bugs. Don't forget the theano project is no longer maintained, which means it's only a temporary fix.
&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;


Deploy an API that loads a keras model (built on 2.3.x) with tensorflow (2.x) using the keras.models.load_model function.
Make a prediction.
See the error using cortex logs &lt;api name&gt;.

&lt;denchmark-h:h4&gt;Stack traces&lt;/denchmark-h&gt;

(error output from cortex logs &lt;api name&gt;)
Traceback (most recent call last):
  File "/src/cortex/serve/serve.py", line 86, in predict
    output = predictor_impl.predict(payload)
  File "/mnt/project/predictor.py", line 61, in predict
    pred = self.make_prediction(image)
  File "/mnt/project/predictor.py", line 79, in make_prediction
    pred = self.model.predict(processed)
  File "/usr/local/lib/python3.6/dist-packages/keras/engine/training.py", line 1452, in predict
    if self._uses_dynamic_learning_phase():
  File "/usr/local/lib/python3.6/dist-packages/keras/engine/training.py", line 382, in _uses_dynamic_learning_phase
    not isinstance(K.learning_phase(), int))
  File "/usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py", line 73, in symbolic_fn_wrapper
    if _SYMBOLIC_SCOPE.value:
AttributeError: '_thread._local' object has no attribute 'value'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/src/cortex/serve/serve.py", line 88, in predict
    raise UserRuntimeException(api.predictor.path, "predict", str(e)) from e
	</description>
	<comments>
		<comment id='1' author='RobertLucian' date='2020-02-29T07:11:50Z'>
		Thanks for bringing this to our attention! We will be switching from Flask to FastAPI soon (hopefully merging into master in the next few days, and releasing shortly thereafter). Letâ€™s see what happens when that gets in, hopefully the issue will just go away
		</comment>
		<comment id='2' author='RobertLucian' date='2020-03-05T21:17:32Z'>
		&lt;denchmark-link:https://github.com/RobertLucian&gt;@RobertLucian&lt;/denchmark-link&gt;
 I wonder if this has been resolved now that 0.14 is released, is it easy for you to check this?
		</comment>
		<comment id='3' author='RobertLucian' date='2020-03-05T23:45:30Z'>
		&lt;denchmark-link:https://github.com/deliahu&gt;@deliahu&lt;/denchmark-link&gt;
 yeah, I'm adding this to my list of things to do. I will be back with an answer.
		</comment>
		<comment id='4' author='RobertLucian' date='2020-03-06T04:21:30Z'>
		&lt;denchmark-link:https://github.com/deliahu&gt;@deliahu&lt;/denchmark-link&gt;
 just tried this on  and it still doesn't work. Same error. Using  still seems to be the best alternative.
		</comment>
		<comment id='5' author='RobertLucian' date='2020-03-09T23:10:53Z'>
		&lt;denchmark-link:https://github.com/RobertLucian&gt;@RobertLucian&lt;/denchmark-link&gt;
 thank you for checking. Should we close this issue since  is working, or is the a change that you would suggest to be implemented in Cortex?
		</comment>
		<comment id='6' author='RobertLucian' date='2020-03-10T03:18:34Z'>
		&lt;denchmark-link:https://github.com/deliahu&gt;@deliahu&lt;/denchmark-link&gt;
 I'm thinking the users will most likely look at the examples directory in cortex and see how &lt;denchmark-link:https://github.com/cortexlabs/cortex/pull/834&gt;#834&lt;/denchmark-link&gt;
 loads the model with Keras or they'll see this ticket. I think it's okay to close this issue.
		</comment>
		<comment id='7' author='RobertLucian' date='2020-03-10T05:36:30Z'>
		&lt;denchmark-link:https://github.com/RobertLucian&gt;@RobertLucian&lt;/denchmark-link&gt;
 sounds good, thank you!
		</comment>
		<comment id='8' author='RobertLucian' date='2020-05-13T00:09:26Z'>
		Hi &lt;denchmark-link:https://github.com/RobertLucian&gt;@RobertLucian&lt;/denchmark-link&gt;
 Thank you so much!!
		</comment>
	</comments>
</bug>