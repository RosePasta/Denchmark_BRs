<bug id='519' author='George3d6' open_date='2020-06-25T15:37:38Z' closed_time='2020-07-06T02:14:09Z'>
	<summary>Add locking mechanism</summary>
	<description>
Not a priority until we roll out the new minsdb server AND have the test suite in place
We'll need a locking mechanism when accessing the datasource through the DataStore and mindsdb through the upcoming mindsdb interface.
This will need to support locking between processes and ideally it can also be implemented in mindsdb native such that users can use all the APIs in paralle.
At the moment the way mindsdb_server operates with datasources is not, in theory, "concurrency safe" but (especially provided it's run on a linux machine) this should never be an issue in practice.
I don't expect this to b here either BUT at some point we might encounter it and it's better to prepare for these things in advance.
A good candidate for this is Ilock:
&lt;denchmark-link:https://github.com/symonsoft/ilock&gt;https://github.com/symonsoft/ilock&lt;/denchmark-link&gt;

Which seems to be a very well implemented OS-neutral file-system based lock. I've read through the code and tbh I'm not sure the implementation would work out perfectly on all OS-es (i.e. I can see weird edge cases) but it seems to be more than good enough.
	</description>
	<comments>
		<comment id='1' author='George3d6' date='2020-07-02T09:26:57Z'>
		Added to mindsdb_native instead of usin portalocker.
Still need to add it to the config &amp; the datastore though.
That being said, the config should have it by default once we switch to an ORM and start using a database and the datastore will at some point be replaced by data skillet (and hopefully that will be thread safe).
So I'm not sure it's worth adding it right now to those 2 modules, after all the chance of multi-threaded conflict there, looking at it realistically, is insignificant.
		</comment>
	</comments>
</bug>