<bug id='479' author='itayalfia' open_date='2020-04-24T19:50:22Z' closed_time='2020-04-28T13:18:33Z'>
	<summary>Summary fails for subclassed keras models</summary>
	<description>
&lt;denchmark-h:h3&gt;Describe the bug&lt;/denchmark-h&gt;

When using subclassed Keras models, calling larq.models.summary fails and expects calling
model.build first.
Even if build is called, it fails with another less obvious error (seems to be a problem with output_shape)
&lt;denchmark-h:h3&gt;To Reproduce&lt;/denchmark-h&gt;

import larq
import tensorflow as tf
from tensorflow import keras
from larq_zoo.sota import QuickNet
from zookeeper import cli, task
from typing import Callable, Optional


class EmbedderWrapperModel(keras.Model):
    def __init__(self, zoo_class: Callable[..., keras.Model],
                 input_shape: int, num_classes: int, dynamic=False,
                 finetune_basenet=True, pretrained_basenet=True, cut_layer_name: Optional[str] = None):
        super(EmbedderWrapperModel, self).__init__(dynamic=dynamic)

        self.basenet = self._get_basenet(zoo_class, input_shape, finetune_basenet, pretrained_basenet, cut_layer_name)
        global_pool_shape = self.basenet.output_shape[1], self.basenet.output_shape[2]

        self.batch_norm = keras.layers.BatchNormalization(momentum=0.9, epsilon=1e-5)
        self.global_pool = keras.layers.AveragePooling2D(pool_size=global_pool_shape)
        self.dense_softmax = keras.layers.Dense(num_classes, activation=tf.nn.softmax)

    def _get_basenet(self, zoo_class: Callable[..., keras.Model], input_shape: int,
                     finetune_basenet: bool, pretrained_basenet: bool, cut_layer_name: Optional[str]) -&gt; keras.Model:
        weights = "imagenet" if pretrained_basenet else None

        if not cut_layer_name:
            basenet = zoo_class(input_shape=(input_shape, input_shape, 3), include_top=False, weights=weights)
        else:
            full_zoo_model = zoo_class(input_shape=(input_shape, input_shape, 3), include_top=True, weights=weights)
            inputs, outputs = full_zoo_model.inputs, full_zoo_model.get_layer(cut_layer_name).output
            basenet = keras.Model(inputs=inputs, outputs=outputs)

        basenet.trainable = finetune_basenet

        return basenet

    def call(self, inputs, training=False, mask=None):
        x = self.basenet(inputs, training=training)
        x = self.batch_norm(x, training=training)
        x = self.global_pool(x)
        x = keras.layers.Flatten()(x)
        x = self.dense_softmax(x)

        return x


@task
class BugTest:
    INPUT_SHAPE = 224
    CLASSES_NUM = 10

    FINETUNE_BASENET = False
    PRETRAINED_BASENET = True

    def run(self):
        cut_layer_name = "activation"  # `activation` is last relu layer before global pooling

        model = EmbedderWrapperModel(QuickNet, self.INPUT_SHAPE, self.CLASSES_NUM,
                                     finetune_basenet=self.FINETUNE_BASENET, pretrained_basenet=self.PRETRAINED_BASENET,
                                     cut_layer_name=cut_layer_name)

        model.build(input_shape=(None, 224, 224, 3))

        larq.models.summary(model)


if __name__ == "__main__":
    cli()
&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

Expected model.build to solve the problem, instead got:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "C:/Users/User/PycharmProjects/BNN-Playground/summary_bug.py", line 68, in &lt;module&gt;
    cli()
  File "C:\Users\User\Anaconda3\lib\site-packages\click\core.py", line 829, in __call__
    return self.main(*args, **kwargs)
  File "C:\Users\User\Anaconda3\lib\site-packages\click\core.py", line 782, in main
    rv = self.invoke(ctx)
  File "C:\Users\User\Anaconda3\lib\site-packages\click\core.py", line 1259, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
  File "C:\Users\User\Anaconda3\lib\site-packages\click\core.py", line 1066, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "C:\Users\User\Anaconda3\lib\site-packages\click\core.py", line 610, in invoke
    return callback(*args, **kwargs)
  File "C:\Users\User\Anaconda3\lib\site-packages\zookeeper\core\task.py", line 59, in command
    task_instance.run()
  File "C:/Users/User/PycharmProjects/BNN-Playground/summary_bug.py", line 64, in run
    larq.models.summary(model)
  File "C:\Users\User\Anaconda3\lib\site-packages\larq\models.py", line 466, in summary
    model_profile = ModelProfile(model)
  File "C:\Users\User\Anaconda3\lib\site-packages\larq\models.py", line 261, in __init__
    self.layer_profiles = [LayerProfile(l) for l in model.layers]
  File "C:\Users\User\Anaconda3\lib\site-packages\larq\models.py", line 261, in &lt;listcomp&gt;
    self.layer_profiles = [LayerProfile(l) for l in model.layers]
  File "C:\Users\User\Anaconda3\lib\site-packages\larq\models.py", line 158, in __init__
    n=p.count * self.output_pixels,
  File "C:\Users\User\Anaconda3\lib\site-packages\larq\models.py", line 227, in output_pixels
    if len(self.output_shape) == 4:
TypeError: object of type 'NoneType' has no len()
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;

TensorFlow version: 2.2.0rc3
Larq version: 0.9.4
	</description>
	<comments>
		<comment id='1' author='itayalfia' date='2020-04-24T22:51:53Z'>
		
When using subclassed Keras models, calling larq.models.summary fails and expects calling
model.build first.

This is unfortunately something we cannot easily fix. This is also how Keras handles it when model.summary() is called.

Even if build is called, it fails with another less obvious error (seems to be a problem with output_shape)

I submitted a fix for this in &lt;denchmark-link:https://github.com/larq/larq/pull/480&gt;#480&lt;/denchmark-link&gt;

Unfortunately due to the way subclassed models are constructed we cannot display all the information that we can extract from a statically built Functional or Sequential model so statistics that rely on the activation sizes won't be displayed in the summary.
		</comment>
	</comments>
</bug>