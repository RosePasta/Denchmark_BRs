<bug id='388' author='MariaHeuss' open_date='2020-01-17T15:04:52Z' closed_time='2020-02-27T21:50:13Z'>
	<summary>Flip-ratio does not work on Multi GPU</summary>
	<description>
&lt;denchmark-h:h3&gt;Describe the bug&lt;/denchmark-h&gt;

Trying to use the flip ratio metric on multi GPU gives me an error.
&lt;denchmark-h:h3&gt;To Reproduce&lt;/denchmark-h&gt;

import contextlib
import numpy as np
import tensorflow.keras as keras
import larq as lq
import tensorflow as tf


def get_model():
    model = keras.Sequential()
    model.add(keras.layers.Flatten(input_shape=(28, 28)))
    model.add(
        lq.layers.QuantDense(
            10,
            input_quantizer="ste_sign",
            kernel_quantizer="ste_sign",
            kernel_constraint="weight_clip",
        )
    )

    model.compile(
        optimizer=tf.keras.optimizers.Adam(), loss="sparse_categorical_crossentropy"
    )
    return model


def attempt_fit_with_metric(metrics=[], distributed_training=False):
    fashion_mnist = keras.datasets.fashion_mnist
    (train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()
    train_images = train_images / 255.0
    test_images = test_images / 255.0

    with strategy.scope() if distributed_training else contextlib.nullcontext():
        with lq.metrics.scope(metrics):
            model = get_model()
        model.fit(train_images, train_labels, epochs=1)


if __name__ == "__main__":
    strategy = tf.distribute.MirroredStrategy()
    for distributed_training in [False, True]:
        for metrics in [[], ["flip_ratio"]]:
            print("distributed training: ", distributed_training)
            print("metric:", metrics)
            try:
                attempt_fit_with_metric(metrics, distributed_training)
                print(
                    "Successfully fittet model with metric ",
                    metrics,
                    ", and distributed training = ",
                    distributed_training,
                )
            except Exception as e:
                print("Exception raised: \n", e)
            print()
&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

I get the following error, while I would expect the flip ratio to work on both single and multi GPU.
&lt;denchmark-code&gt;INFO:tensorflow:Using MirroredStrategy with devices ('/job:localhost/replica:0/task:0/device:GPU:0', '/job:localhost/replica:0/task:0/device:GPU:1', '/job:localhost/replica:0/task:0/device:GPU:2', '/job:localhost/replica:0/task:0/device:GPU:3')
distributed training:  False
metric: []
Train on 60000 samples
60000/60000 [==============================] - 3s 56us/sample - loss: 11.0572
Successfully fittet model with metric  [] , and distributed training =  False

distributed training:  False
metric: ['flip_ratio']
Train on 60000 samples
60000/60000 [==============================] - 4s 64us/sample - loss: 12.3813 - flip_ratio/quant_dense_1: 5.9605e-08
Successfully fittet model with metric  ['flip_ratio'] , and distributed training =  False

distributed training:  True
metric: []
Train on 60000 samples
INFO:tensorflow:batch_all_reduce: 2 all-reduces with algorithm = nccl, num_packs = 1, agg_small_grads_max_bytes = 0 and agg_small_grads_max_group = 10
INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).
INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).
INFO:tensorflow:batch_all_reduce: 2 all-reduces with algorithm = nccl, num_packs = 1, agg_small_grads_max_bytes = 0 and agg_small_grads_max_group = 10
INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).
INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).
60000/60000 [==============================] - 9s 156us/sample - loss: 11.0572
Successfully fittet model with metric  [] , and distributed training =  True

distributed training:  True
metric: ['flip_ratio']
Train on 60000 samples
WARNING:tensorflow:Gradients do not exist for variables ['quant_dense_3/kernel:0'] when minimizing the loss.
INFO:tensorflow:batch_all_reduce: 1 all-reduces with algorithm = nccl, num_packs = 1, agg_small_grads_max_bytes = 0 and agg_small_grads_max_group = 10
INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).
INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).
INFO:tensorflow:batch_all_reduce: 1 all-reduces with algorithm = nccl, num_packs = 1, agg_small_grads_max_bytes = 0 and agg_small_grads_max_group = 10
INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).
INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).
   32/60000 [..............................] - ETA: 1:44:14Exception raised: 
 An op outside of the function building code is being passed
a "Graph" tensor. It is possible to have Graph tensors
leak out of the function building context by including a
tf.init_scope in your function building code.
For example, the following function will fail:
  @tf.function
  def has_init_scope():
    my_constant = tf.constant(1.)
    with tf.init_scope():
      added = my_constant * 2
The graph tensor has name: replica_2/sequential_3/quant_dense_3/IdentityN_1:0
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;

TensorFlow version: 2.1.0
Larq version: 0.8.2
	</description>
	<comments>
		<comment id='1' author='MariaHeuss' date='2020-01-17T16:24:07Z'>
		I can reproduce it in &lt;denchmark-link:https://colab.research.google.com/drive/168lbGqwZMYSTwHVlR1IjAlmb5yl8TFkx&gt;this colab&lt;/denchmark-link&gt;
.
I'll take a closer look at this next week.
		</comment>
		<comment id='2' author='MariaHeuss' date='2020-01-17T17:30:32Z'>
		&lt;denchmark-link:https://github.com/MariaHeuss&gt;@MariaHeuss&lt;/denchmark-link&gt;
 I just retested this and cannot reproduce this with larq installed from . For now I don't know a workaround other than installing larq from  (which unfortunately includes some breaking changes).
		</comment>
		<comment id='3' author='MariaHeuss' date='2020-02-13T16:46:20Z'>
		I can confirm that this is still broken on 0.8.4. When installing larq from master, I get some interesting warnings:
&lt;denchmark-code&gt;2020-02-13 16:41:40 UTC -- WARNING:tensorflow:5 out of the last 5 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe23859d7d0&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:40 UTC -- WARNING:tensorflow:5 out of the last 5 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe23859d7d0&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:40 UTC -- WARNING:tensorflow:6 out of the last 6 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe23859d7d0&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:40 UTC -- WARNING:tensorflow:6 out of the last 6 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe23859d7d0&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:7 out of the last 7 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe23859d7d0&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:7 out of the last 7 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe23859d7d0&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:8 out of the last 8 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe23859d7d0&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:8 out of the last 8 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe23859d7d0&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:5 out of the last 5 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2381adb50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:5 out of the last 5 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2381adb50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:6 out of the last 6 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2381adb50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:6 out of the last 6 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2381adb50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:7 out of the last 7 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2381adb50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:7 out of the last 7 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2381adb50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:8 out of the last 8 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2381adb50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:8 out of the last 8 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2381adb50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:5 out of the last 5 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2006fac50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:5 out of the last 5 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2006fac50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:6 out of the last 6 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2006fac50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:6 out of the last 6 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2006fac50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:7 out of the last 7 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2006fac50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:7 out of the last 7 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2006fac50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:8 out of the last 8 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2006fac50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.

2020-02-13 16:41:41 UTC -- WARNING:tensorflow:8 out of the last 8 calls to &lt;bound method FlipRatio.update_state of &lt;larq.metrics.FlipRatio object at 0x7fe2006fac50&gt;&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/beta/tutorials/eager/tf_function#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.
&lt;/denchmark-code&gt;

Other than that, it does work 👍
		</comment>
		<comment id='4' author='MariaHeuss' date='2020-02-13T17:02:13Z'>
		Can you see if it still happens on &lt;denchmark-link:https://github.com/larq/larq/pull/402&gt;#402&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='5' author='MariaHeuss' date='2020-02-13T17:08:22Z'>
		
Can you see if it still happens on #402?

Yeah remind me tomorrow 👍
		</comment>
		<comment id='6' author='MariaHeuss' date='2020-02-14T09:08:36Z'>
		Remind!
		</comment>
		<comment id='7' author='MariaHeuss' date='2020-02-14T11:39:56Z'>
		
Remind!

It works and the warnings are gone 🎉
		</comment>
	</comments>
</bug>