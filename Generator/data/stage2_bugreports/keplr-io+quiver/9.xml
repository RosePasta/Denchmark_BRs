<bug id='9' author='AStrangeQuark' open_date='2016-11-15T21:36:09Z' closed_time='2016-11-19T08:55:13Z'>
	<summary>input_path is truncated before being passed to get_layer_outputs in server.py</summary>
	<description>
We are running Quiver on Keras' default VGG16 model. Running the application works until we try to click on a layer and try to see the selected image's activations.
After numerous inserted print() statements, it appears that the code that asks for a generated prediction is giving only the image file name rather than the full path to the image; consequently we were able to see the predictions from VGG when we were in the images' own directory. The error seems to lie with whatever is processing requests from the HTML interface.
Thank you for producing this tool! We've been trying to find something like this for awhile (and/or write our own much more simplistic version).
	</description>
	<comments>
		<comment id='1' author='AStrangeQuark' date='2016-11-15T22:26:54Z'>
		Yes for now it only supports a flat file structure, but should be very simple to make it read a full path, just need to test it thoroughly, I'll figure it out!
		</comment>
		<comment id='2' author='AStrangeQuark' date='2016-11-15T22:53:03Z'>
		I guess the issue is not about a recursive traversing (which is a nice enhancement indeed) but about the fact that the only way it works is when you keep the 'input_folder' param default. otherwise it fails to generate layer visualization. in my case I have this stack trace:
&lt;denchmark-code&gt;[2016-11-15 22:50:49,458] ERROR in app: Exception on /layer/convolution2d_1/20161112121516_52.15927_21.06563_1000006.jpg [GET]
Traceback (most recent call last):
  File "/opt/conda/lib/python2.7/site-packages/flask/app.py", line 1988, in wsgi_app
    response = self.full_dispatch_request()
  File "/opt/conda/lib/python2.7/site-packages/flask/app.py", line 1641, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/opt/conda/lib/python2.7/site-packages/flask_cors/extension.py", line 161, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "/opt/conda/lib/python2.7/site-packages/flask/app.py", line 1544, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/opt/conda/lib/python2.7/site-packages/flask/app.py", line 1639, in full_dispatch_request
    rv = self.dispatch_request()
  File "/opt/conda/lib/python2.7/site-packages/flask/app.py", line 1625, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/opt/conda/lib/python2.7/site-packages/quiver_engine/server.py", line 74, in get_layer_outputs
    input_img = load_img(input_path, single_input_shape)
  File "/opt/conda/lib/python2.7/site-packages/quiver_engine/util.py", line 25, in load_img
    img = image.load_img(input_path, target_size=target_shape)
  File "/opt/conda/lib/python2.7/site-packages/keras/preprocessing/image.py", line 173, in load_img
    img = Image.open(path)
  File "/opt/conda/lib/python2.7/site-packages/PIL/Image.py", line 2282, in open
    fp = builtins.open(filename, "rb")
IOError: [Errno 2] No such file or directory: u'20161112121516_52.15927_21.06563_1000006.jpg'
&lt;/denchmark-code&gt;

and the path should be img/....jpg because I stated input_folder='./img' when starting server.
workaround for now is just to put all your images in . when running quiver
		</comment>
		<comment id='3' author='AStrangeQuark' date='2016-11-16T20:00:44Z'>
		Came here to report same issue.  When you change the path from the default, it never gets os.path.join'ed with the files so nothing can be found.  I am using windows 7, python 3.4.
		</comment>
		<comment id='4' author='AStrangeQuark' date='2016-11-18T21:55:44Z'>
		I have this same problem. The images load, but forward prop fails. Images must be in the 'cwd' for this to function, as of now.
		</comment>
		<comment id='5' author='AStrangeQuark' date='2016-11-19T05:05:02Z'>
		Fixed &lt;denchmark-link:https://github.com/jakebian/quiver/commit/798f98fc8292c2b61d9c20394434875462a5c370&gt;jakebian@798f98f&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='AStrangeQuark' date='2016-11-19T08:53:52Z'>
		For me it works now - shows output of a layer.
I fixed the same for predictions in &lt;denchmark-link:https://github.com/jakebian/quiver/pull/27&gt;https://github.com/jakebian/quiver/pull/27&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>