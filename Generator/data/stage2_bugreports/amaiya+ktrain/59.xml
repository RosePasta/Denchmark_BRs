<bug id='59' author='yonatanbitton' open_date='2020-02-07T15:51:14Z' closed_time='2020-02-11T20:38:26Z'>
	<summary>images_from_array Bug - tuple assignment</summary>
	<description>
Hello.
I'm looking at the source code of data.py
&lt;denchmark-code&gt;
def images_from_array(x_train, y_train, 
                      validation_data=None,
                      data_aug=None):

    """
    Returns image generator (Iterator instance) from training
    and validation data in the form of NumPy arrays
    Assumes output will be 2D one-hot-encoded labels for categorization.
    Note: This function preprocesses the input in preparation
          for a ResNet50 model.
	
    Args:
    x_train(numpy.ndarray):  training gdata
    y_train(numpy.ndarray):  labels
    validation_data (tuple): tuple of numpy.ndarrays for validation data
    data_aug(ImageDataGenerator):  a keras.preprocessing.image.ImageDataGenerator
    Returns:
    batches: a tuple of two image.Iterator - one for train and one for test

    """

    # one-hot-encode if necessary
    if isinstance(y_train[0], int):
        y_train = to_categorical(y_train)
    if validation_data and isinstance(validation_data[1][0], int):
        validation_data[1] = to_categorical(validation_data[1])

&lt;/denchmark-code&gt;

I got the following error:
&lt;denchmark-code&gt;
  File "...site-packages\ktrain\vision\data.py", line 620, in images_from_array
    validation_data[1] = to_categorical(validation_data[1])
TypeError: 'tuple' object does not support item assignment

&lt;/denchmark-code&gt;

You say that the validation_data is a tuple (at the args) so there is a conflict here.
In addition, I've seen that there is a difference when the y_train[0] is int or np.int32 and you don't relate to it (you consider only int, what if it's np.int32?)
Thank you very much
	</description>
	<comments>
		<comment id='1' author='yonatanbitton' date='2020-02-07T16:58:30Z'>
		Yes, these are bugs.  The images_from_array function isn't used often except for toy examples like cifar10 and mnist, which typically call to_categorical on the labels before they are fed to images_from_array.   Both issues can be fixed for a future release.
In the meantime, it should work if you invoke to_categorical on the labels beforehand, as shown below.
Example:
&lt;denchmark-code&gt;# load cifar10 and manually standardize
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.utils import to_categorical
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
x_train = x_train.astype('float32')
x_train = (x_train - x_train.mean(axis=0)) / (x_train.std(axis=0))
x_test = x_test.astype('float32')
x_test = (x_test - x_test.mean(axis=0)) / (x_test.std(axis=0))
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='yonatanbitton' date='2020-02-11T20:38:26Z'>
		This should be resolved now in v0.9.3.
		</comment>
	</comments>
</bug>