<bug id='285' author='lucala' open_date='2020-12-04T13:24:05Z' closed_time='2020-12-04T21:20:17Z'>
	<summary>Predictor load fails when model is compiled manually</summary>
	<description>
I can't load the predictor using the following code snippet:
import tensorflow as tf
from tensorflow.keras import activations
import ktrain
import ktrain.text as txt
def focal_loss(gamma=2., alpha=4., from_logits=False):

    gamma = float(gamma)
    alpha = float(alpha)

    def focal_loss_fixed(y_true, y_pred):
        epsilon = 1e-9
        y_true = tf.cast(y_true, dtype=tf.float32)
        y_pred = tf.cast(y_pred, dtype=tf.float32)
        if from_logits:
            y_pred = activations.softmax(y_pred)

        model_out = tf.add(y_pred, epsilon)
        ce = tf.multiply(y_true, -tf.math.log(model_out))
        weight = tf.multiply(y_true, tf.pow(tf.subtract(1., model_out), gamma))
        fl = tf.multiply(alpha, tf.multiply(weight, ce))
        reduced_fl = tf.reduce_max(fl, axis=1)
        return tf.reduce_mean(reduced_fl)
    return focal_loss_fixed

(x_train, y_train), (x_test, y_test), preproc = txt.texts_from_df(data,
                                                                  text_column='body',
                                                                  label_columns=['x'],
                                                                  maxlen=256, 
                                                                  preprocess_mode='bert')

model = txt.text_classifier('bert', (x_train, y_train), preproc=preproc)

model.compile(loss=focal_loss(alpha=1, from_logits=False),
              optimizer='adam',
              metrics=['accuracy'])

learner = ktrain.get_learner(model, 
                             train_data=(x_train, y_train), 
                             val_data=(x_test, y_test), 
                             batch_size=12)

predictor = ktrain.get_predictor(learner.model, preproc=preproc)
predictor.save('./predictor/test')
predictor = ktrain.load_predictor('./predictor/test')
gives the following error:
Call to keras.models.load_model failed.  Try using the learner.model.save_weights and learner.model.load_weights instead.
Error was: SavedModel file does not exist at: ./predictor/test/{saved_model.pbtxt|saved_model.pb}
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-4-b82c696f6fc5&gt; in &lt;module&gt;
     43 predictor = ktrain.get_predictor(learner.model, preproc=preproc)
     44 predictor.save('./predictor/test')
---&gt; 45 predictor = ktrain.load_predictor('./predictor/test')

~/anaconda3/lib/python3.7/site-packages/ktrain/core.py in load_predictor(fpath, batch_size)
   1481     # return the appropriate predictor
   1482     if not isinstance(model, Model):
-&gt; 1483         raise ValueError('model must be of instance Model')
   1484     if not isinstance(preproc, (ImagePreprocessor, TextPreprocessor, NERPreprocessor, NodePreprocessor, LinkPreprocessor, TabularPreprocessor)):
   1485         raise ValueError('preproc must be instance of ktrain.preprocessor.Preprocessor')

ValueError: model must be of instance Model
If I comment out the model.compile line it works.
	</description>
	<comments>
		<comment id='1' author='lucala' date='2020-12-04T19:52:03Z'>
		This is fixed in the develop branch by adding a custom_objects argument to load_predictor, but is not released yet:
predictor = ktrain.load_predictor('/predictor/test', custom_objects={'focal_loss_fixed': focal_loss_fixed})
You can install develop branch with: pip3 install git+https://github.com/amaiya/ktrain@develop.
However, in order for the above to work, you'll need to redefine the inner loss function (focal_loss_fixed)  to be outside and hardcode variables like gamma and alpha. This can simply be copied outside the function.
If using a custom loss function like this, it's probably easier to use the  version of BERT (or DistilBERT), as &lt;denchmark-link:https://github.com/amaiya/ktrain/blob/master/FAQ.md#how-do-i-use-custom-loss-functions-or-optimizers&gt;shown in the  FAQ&lt;/denchmark-link&gt;
.  Unlike vanilla keras models like  (which you're using),  models are not saved with compiled loss functions and optimizers, so this issue is completely avoided.
		</comment>
		<comment id='2' author='lucala' date='2020-12-04T21:20:14Z'>
		Got it. Thanks!
		</comment>
	</comments>
</bug>