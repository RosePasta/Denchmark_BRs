<bug id='272' author='ztangent' open_date='2020-06-20T23:00:04Z' closed_time='2020-06-25T17:46:02Z'>
	<summary>Improper module scoping in SML code generation</summary>
	<description>
Noticed this bug while implementing the fixes in &lt;denchmark-link:https://github.com/probcomp/Gen.jl/pull/223&gt;#223&lt;/denchmark-link&gt;
 -- code generation for the static modeling language incorrectly assumes sometimes that static Gen functions will only be written in a namespace that is , and sometimes that the  module is available (through ). For example the following code:
import Gen
Gen.@gen (static) function foo()
    x = Gen.@trace(Gen.normal(0, 1), :x)
    return x
end
gives the error:
julia&gt; foo()
ERROR: UndefVarError: propose not defined
because during code generation propose is not defined with the correct module scope. This should be easily fixed, so I'll open a PR to address it.
	</description>
	<comments>
		<comment id='1' author='ztangent' date='2020-06-21T01:25:48Z'>
		Not adding test cases as part of &lt;denchmark-link:https://github.com/probcomp/Gen.jl/pull/273&gt;#273&lt;/denchmark-link&gt;
  because they require  instead of , but here's a minimal example with nested imports that only works after PR &lt;denchmark-link:https://github.com/probcomp/Gen.jl/pull/273&gt;#273&lt;/denchmark-link&gt;
.
module A import Gen end
A.Gen.@gen (static) function f()
    x = A.Gen.@trace(A.Gen.normal(0, 0), :x)
    return x
end

A.Gen.@gen (static) function g()
    y = A.Gen.@trace(f(), :y) + 10
    return y
end

@assert f() == 0
@assert g() == 10

tr = A.Gen.simulate(g, ())
@assert tr[] == 10
@assert tr[:y] == 0
		</comment>
		<comment id='2' author='ztangent' date='2020-06-25T17:46:02Z'>
		Resolved by &lt;denchmark-link:https://github.com/probcomp/Gen.jl/pull/273&gt;#273&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>