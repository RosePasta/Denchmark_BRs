<bug id='138' author='ElliotWay' open_date='2017-08-17T19:43:37Z' closed_time='2017-10-20T07:24:54Z'>
	<summary>Performance of ACER compared to A3C</summary>
	<description>
(Opening a separate issue since it's not relevant to &lt;denchmark-link:https://github.com/chainer/chainerrl/issues/125&gt;#125&lt;/denchmark-link&gt;
.)
The performance of ACER isn't what it should be, compared to A3C. I've run them both on a variety of games, and while ACER doesn't perform poorly per se, it doesn't improve on the sample efficiency of A3C.*
I cloned a fresh copy of chainerrl to be sure I hadn't changed anything, then downloaded the PyPI version in case there was a recent change causing problems, but I didn't see any noticeable change in either case.
I'll search through agents/acer.py for bugs just in case, but there might easily be something wrong on my end. Any guess whether the underlying system might affect performance to this degree?
I've been using a Debian 8.8 machine with two 8-core processors. I used 16 worker threads and didn't use an LSTM layer. My Python libraries are installed in a Conda environment. I'd expect more catastrophic failures from incorrectly installed dependencies, so I don't think that could be the problem.
*(Which is important to me because I need an efficient off-policy algorithm.)
	</description>
	<comments>
		<comment id='1' author='ElliotWay' date='2017-08-17T22:06:14Z'>
		Can you share the settings and the resulting scores.txt?
		</comment>
		<comment id='2' author='ElliotWay' date='2017-08-18T05:45:17Z'>
		I reproduced the issue by running python train_acer_ale.py 16 breakout. These scores are almost the same with A3C's. It is real performance regression.
The cause seems like because  has changed (&lt;denchmark-link:https://github.com/chainer/chainerrl/commit/3ff4158be0ba11e444fa6c8cf2be32ef98393d06&gt;3ff4158&lt;/denchmark-link&gt;
) so that it counts the number of episodes instead of transitions, preventing replay from happening (since you need 10000 episodes by default, which would be hardly satisfied).
This needs to be fixed. As a workaround, you can specify a smaller value to --replay-start-size to make replay happen, but I've not confirmed it yet.
Thank you for reporting the issue!
&lt;denchmark-code&gt;steps   episodes        elapsed mean    median  stdev   max     min     average_value   average_entropy average_kl
1000029 25544   1346.100342988968       2.2     1.0     3.22490309931942        10.0    0.0     0.16120513181680707     1.377143882764863       8.162629942132597e-05
2000059 49279   2785.960695505142       2.1     1.5     2.6012817353502227      8.0     0.0     0.36934208267094665     1.349010539627861       0.00015375204197073426
3000059 72544   4229.976338386536       2.2     1.0     2.616188916046478       6.0     0.0     0.30270467809112767     1.3475033588955214      0.00012288710241590507
4000003 95013   5658.931821107864       3.2     2.5     2.8596814119369625      9.0     0.0     0.45131285921677766     1.32892008967322        0.00044535057279215497
5000021 114772  7086.509353160858       2.5     2.0     2.41522945769824        8.0     0.0     0.5295530440954892      1.3036335380160262      0.0008630345236490982
6000008 132907  8512.46481847763        5.3     4.0     2.7908580918579307      10.0    2.0     0.5976088909727667      1.24159265357227        0.0013336436699391044
7000171 148068  9952.43249297142        6.2     6.0     2.699794230842212       10.0    3.0     0.7029482390887892      1.2328881289204427      0.0008926499676104026
8000127 161099  11388.78796339035       12.1    12.0    4.954235000930461       21.0    5.0     0.9469019333579891      1.2016705471745515      0.003853515300483895
9000325 170866  12819.275496006012      13.9    13.0    5.342700108039422       24.0    5.0     1.1615241706152637      1.1665769965957433      0.006196272820714262
10000280        178657  14260.414740800858      20.5    20.0    5.233439489369194       28.0    10.0    1.3005365847845463      1.1293733113425277      0.0204555180449233
11000038        184939  15686.457891225815      25.4    25.0    12.348639151294725      45.0    6.0     1.6013617930269497      1.031944046295918       0.024116619599289738
12000172        189983  17071.704581022263      37.6    38.5    7.501111028818776       46.0    23.0    1.8697401845259902      0.9836626251867424      0.019183164755663472
13000233        194393  18418.85107088089       64.4    35.5    77.3408042368322        281.0   22.0    2.2318973066327907      0.9389810740495996      0.013596760366180948
14000043        198388  19783.36287879944       129.0   104.5   81.40024569987489       299.0   47.0    2.3102467231199264      0.9102067663611274      0.011765631497231905
15000457        201922  21131.018068552017      178.6   182.0   100.60174506990975      324.0   39.0    2.549804942084857       0.8045321449688588      0.011100357300096435
16000174        205048  22502.08351969719       284.7   318.0   94.41286400109303       372.0   105.0   3.1575630637664656      0.7707935815742991      0.019702850321766937
17000042        207766  23842.342838525772      351.2   352.0   38.47019047984498       413.0   270.0   3.7399560142527815      0.7489560001346983      0.011007547792817776
18000066        210363  25201.236167430878      382.5   394.0   34.741105976126384      418.0   322.0   3.1674544779760097      0.7337132386457472      0.007970968428779094
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='ElliotWay' date='2017-08-20T03:10:26Z'>
		Thanks for finding the problem! You're suggested workaround gives me much better efficiency from ACER.
		</comment>
		<comment id='4' author='ElliotWay' date='2017-08-20T04:59:34Z'>
		Good! I'll close this issue once it is fixed.
		</comment>
	</comments>
</bug>