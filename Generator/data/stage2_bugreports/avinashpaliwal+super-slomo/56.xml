<bug id='56' author='FC-Jason' open_date='2019-08-23T16:31:12Z' closed_time='2019-12-03T16:30:47Z'>
	<summary>CPU Mode only using 2 threads on Mac</summary>
	<description>
Describe the bug
When running the slo mo conversion on a MAC, I'm only able to get 2 threads to process the video using CPU mode (no CUDA). RAM sits around 12 gigabytes used for processing, but I have 32 available.
To Reproduce

Running this script to convert: python video_to_slomo.py --ffmpeg /Users/user/slomo/ffmpeg/bin/ --video /Users/user/slomo/input/mountain_timelapse.mp4 --sf 4 --checkpoint /Users/user/slomo/superslomo/SuperSloMo.ckpt --fps 119.880 --output /Users/user/slomo/output/mountain120.mp4 --batch_size 2
No matter what I change the batch_size to, it doesn't change the amount of CPU usage or RAM.  I've tried changing it to 10 and nothing happens.  If I run the same thing on Windows (no CUDA) a value of 2 eats up 32 gigs of ram and runs the processor on multiple cores.

Expected behavior
I would expect that as I increase the value of the batch_size on a Mac, that the CPU usage would go up and the process would complete faster.
Interpolated results/error output
(base) MacBook:superslomo user$ python video_to_slomo.py --ffmpeg /Users/user/slomo/ffmpeg/bin/ --video /Users/user/slomo/input/mountain_timelapse.mp4 --sf 4 --checkpoint /Users/user/slomo/superslomo/SuperSloMo.ckpt --fps 119.880 --output /Users/user/slomo/output/mountain120.mp4 --batch_size 2
/Users/user/slomo/ffmpeg/bin/ffmpeg -i /Users/user/slomo/input/mountain_timelapse.mp4 -vsync 0 -qscale:v 2 .tmpSuperSloMo/input/%06d.jpg
ffmpeg version 4.2 Copyright (c) 2000-2019 the FFmpeg developers
built with Apple LLVM version 10.0.1 (clang-1001.0.46.4)
configuration: --enable-gpl --enable-version3 --enable-sdl2 --enable-fontconfig --enable-gnutls --enable-iconv --enable-libass --enable-libdav1d --enable-libbluray --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libopus --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libtheora --enable-libtwolame --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libzimg --enable-lzma --enable-zlib --enable-gmp --enable-libvidstab --enable-libvorbis --enable-libvo-amrwbenc --enable-libmysofa --enable-libspeex --enable-libxvid --enable-libaom --enable-appkit --enable-avfoundation --enable-coreimage --enable-audiotoolbox
libavutil      56. 31.100 / 56. 31.100
libavcodec     58. 54.100 / 58. 54.100
libavformat    58. 29.100 / 58. 29.100
libavdevice    58.  8.100 / 58.  8.100
libavfilter     7. 57.100 /  7. 57.100
libswscale      5.  5.100 /  5.  5.100
libswresample   3.  5.100 /  3.  5.100
libpostproc    55.  5.100 / 55.  5.100
Input #0, mov,mp4,m4a,3gp,3g2,mj2, from '/Users/user/slomo/input/mountain_timelapse.mp4':
Metadata:
major_brand     : avc1
minor_version   : 538182144
compatible_brands: avc1isom
creation_time   : 2019-07-21T19:08:34.000000Z
comment         : DE=None, Type=Timelapse, HQ=Normal, Mode=P
Duration: 00:00:10.04, start: 0.000000, bitrate: 35507 kb/s
Stream #0:0(eng): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, bt709), 1920x1080 [SAR 1:1 DAR 16:9], 35334 kb/s, 29.97 fps, 29.97 tbr, 30k tbn, 59.94 tbc (default)
Metadata:
creation_time   : 2019-07-21T19:08:34.000000Z
handler_name    : ?DJI.AVC
encoder         : AVC encoder
Stream #0:1(eng): Data: none (priv / 0x76697270), 1690 kb/s
Metadata:
creation_time   : 2019-07-21T19:08:34.000000Z
handler_name    : ?DJI.Meta
Stream mapping:
Stream #0:0 -&gt; #0:0 (h264 (native) -&gt; mjpeg (native))
Press [q] to stop, [?] for help
[swscaler @ 0x7f7f58cb8000] deprecated pixel format used, make sure you did set range correctly
Output #0, image2, to '.tmpSuperSloMo/input/%06d.jpg':
Metadata:
major_brand     : avc1
minor_version   : 538182144
compatible_brands: avc1isom
comment         : DE=None, Type=Timelapse, HQ=Normal, Mode=P
encoder         : Lavf58.29.100
Stream #0:0(eng): Video: mjpeg, yuvj420p(pc), 1920x1080 [SAR 1:1 DAR 16:9], q=2-31, 200 kb/s, 29.97 fps, 29.97 tbn, 29.97 tbc (default)
Metadata:
creation_time   : 2019-07-21T19:08:34.000000Z
handler_name    : ?DJI.AVC
encoder         : Lavc58.54.100 mjpeg
Side data:
cpb: bitrate max/min/avg: 0/0/200000 buffer size: 0 vbv_delay: -1
frame=  301 fps=206 q=2.0 Lsize=N/A time=00:00:10.04 bitrate=N/A speed=6.89x
video:140142kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: unknown
0%|                                                                                                               | 0/150 [00:00&lt;?, ?it/s]^[/Users/user/anaconda3/lib/python3.7/site-packages/torch/nn/functional.py:2479: UserWarning: Default upsampling behavior when mode=bilinear is changed to align_corners=False since 0.4.0. Please specify align_corners=True if the old behavior is desired. See the documentation of nn.Upsample for details.
"See the documentation of nn.Upsample for details.".format(mode))
/Users/user/anaconda3/lib/python3.7/site-packages/torch/nn/functional.py:1350: UserWarning: nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.
warnings.warn("nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.")
Desktop (please complete the following information):

OS: MacOS Mojave 10.14.6
Using CPU
2.2 GHz Intel Core i7 6 cores, 32 Gig RAM
Setup Info


Installed Python 3.7 using Anaconda
Using ffmpeg 4.2
Using provided model
Using stable Pytorch 1.2 for Mac, Conda, Python 3.7, CUDA None

Additional context
The video processed fine using CUDA on a Windows machine. Was just trying to get it to work on a Mac using CPU only.
	</description>
	<comments>
		<comment id='1' author='FC-Jason' date='2019-12-03T15:15:43Z'>
		Hi &lt;denchmark-link:https://github.com/FC-Jason&gt;@FC-Jason&lt;/denchmark-link&gt;

Since I don't have a Mac, I don't know how I'll be able to help you on this. The code was written and tested on a specific system and trying to get it to work on other systems is not feasible for me. Google colab would be a good alternative if you are just evaluating the model. It offers powerful GPUs with large memory.
		</comment>
	</comments>
</bug>