<bug id='183' author='gasgallo' open_date='2019-06-19T03:58:25Z' closed_time='2020-07-20T13:23:28Z'>
	<summary>Inference hangs if ExecutableNetwork is defined as global</summary>
	<description>
I'm using OPENVINO 2019 R1.1 on Ubuntu 18.04.
I'm building a C++ API that will be called by and external application, so my code doesn't have a main function. I currently need at least two functions: one to initialize and load the model and one to run the inference.
The function calling the inference must be as fast as possible, so I'm trying to move all the time-consuming operations to the initialize function.
The issue rises when I try to move the ExecutableNetwork definition from the inference function to the initialize function and share its object between my two functions using a global variable. When doing so, the inference hangs and doesn't return (need to use CTRL+C), if the ExecutableNetwork definition is within the inference function, then everything runs smoothly.
What's the right way to share the ExecutableNetwork between my functions?
Thanks.
	</description>
	<comments>
		<comment id='1' author='gasgallo' date='2019-06-19T05:07:28Z'>
		You probably catched one of the problems from "static initialization order fiasco".

so I'm trying to move all the time-consuming operations to the initialize function.

Avoid doing that before the "main()" call. The same note is about threads creation before main() call.
There are several workarounds for that:

Initialization on-demand (but cleanup/termination stage may hang again):

&lt;denchmark-code&gt;ExecutableNetwork&amp; getMyNetwork()
{
    static ExecutableNetwork global_net;
    return global_net;
}

// replace usage: "global_net." =&gt; "getMyNetwork()."
&lt;/denchmark-code&gt;


Share via smart pointers (std:shared_ptr), but this would not work with ExecutableNetwork (it is already smart pointer by implementation).

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Proper solution is to return ExecutableNetwork as function result. And pass network as a parameter to inference functions.
It is very important in C++ to control object lifetimes. Local "scope"-based variables can do that perfectly.
		</comment>
		<comment id='2' author='gasgallo' date='2019-06-19T07:12:58Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 Thanks for the suggestions.
Unfortunately, for this project I have many constraints:

my code is built as a library that is then linked to an executable
main() function is located in the executable where my library functions get called. I have no power other the content of main()
my functions inputs/outputs are fixed, then I cannot feed my inference function with the ExecutableNetwork object

The initialization on demand is useful (the model is loaded once only, but if I have small batches to feed my model, then the time needed for loading is still not acceptable).
		</comment>
		<comment id='3' author='gasgallo' date='2019-07-02T02:56:40Z'>
		Any idea?
		</comment>
		<comment id='4' author='gasgallo' date='2020-05-27T10:50:16Z'>
		&lt;denchmark-link:https://github.com/gasgallo&gt;@gasgallo&lt;/denchmark-link&gt;
 Can you try to use the last OpenVINO package?
		</comment>
		<comment id='5' author='gasgallo' date='2020-07-20T13:23:28Z'>
		It seems that the issues is not actual anymore as no response. Closing it. Feel free to reopen it or create a new one.
		</comment>
	</comments>
</bug>