<bug id='577' author='junluan' open_date='2020-05-26T05:29:10Z' closed_time='2020-06-02T10:03:58Z'>
	<summary>Intel® Distribution of OpenVINO™ toolkit On macOS: ngraph static link with protobuf 3.7.1</summary>
	<description>
Intel® Distribution of OpenVINO™ toolkit On macOS
ngraph lib in m_openvino_toolkit_p_2020.2.117.dmg (2020.2) static link with protobuf 3.7.1, this cause protobuf version conflict when user's project already use another version of protobuf
The output error message like this below:
&lt;denchmark-code&gt;[libprotobuf FATAL google/protobuf/stubs/common.cc:75] This program requires version 3.12.0 of the Protocol Buffer runtime library, but the installed version is 3.7.1.  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in "xxx.pb.cc".)
libc++abi.dylib: terminating with uncaught exception of type google::protobuf::FatalException: This program requires version 3.12.0 of the Protocol Buffer runtime library, but the installed version is 3.7.1.  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in "xxx.pb.cc".)
&lt;/denchmark-code&gt;

I also checked m_openvino_toolkit_p_2020.1.023.dmg. This 2020.1 version's ngraph did not compiled with protobuf.
I think maybe 2020.2 version is compiled with enable onnx, but 2020.1 version disable it.
Is this possible to disable protobuf in ngraph in the future release?
	</description>
	<comments>
		<comment id='1' author='junluan' date='2020-05-26T08:49:05Z'>
		&lt;denchmark-link:https://github.com/junluan&gt;@junluan&lt;/denchmark-link&gt;


ONNX importer in 2020.2 is compiled into ngraph shared library, so protobuf is compiler as well.
Currently in master branch, onnx importer is already a separate dynamic library. So, if you don't use this library, you don't have any conflicts.
In this PR onnx importer is wrapped into plugin when is automatically loaded when a user try to call Core::ReadNetwork

&lt;denchmark-link:https://github.com/ilyachur&gt;@ilyachur&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 do you know how we can use 2 protobufs in a single application?
		</comment>
		<comment id='2' author='junluan' date='2020-05-26T10:59:00Z'>
		I think that different namespaces should be used. Otherwise there is a mess with symbols. In example, for OpenCV we use  instead of origin :  &lt;denchmark-link:https://github.com/opencv/opencv/blob/0c8590027f3c1b9f1f6b50d71b42ba3bbfbaa11c/modules/dnn/misc/onnx/opencv-onnx.pb.h#L82&gt;https://github.com/opencv/opencv/blob/0c8590027f3c1b9f1f6b50d71b42ba3bbfbaa11c/modules/dnn/misc/onnx/opencv-onnx.pb.h#L82&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='junluan' date='2020-05-26T12:26:53Z'>
		Thank you &lt;denchmark-link:https://github.com/ilya-lavrenov&gt;@ilya-lavrenov&lt;/denchmark-link&gt;

In &lt;denchmark-link:https://github.com/openvinotoolkit/openvino/pull/532&gt;this&lt;/denchmark-link&gt;
 PR you said the plugin is automatically loaded. I see registerReaders() both register onnx (inference_engine_onnx_reader) and xml (inference_engine_ir_readers) readers.
Is it possible to add some flag to control whether enable onnx reader. Because up to now, in most situations we use MO to generate xml model. So Core::ReadNetwork is commonly used by default.
		</comment>
		<comment id='4' author='junluan' date='2020-05-26T12:39:07Z'>
		&lt;denchmark-link:https://github.com/junluan&gt;@junluan&lt;/denchmark-link&gt;
  registers the path to the libraries, but it does not mean that they are loaded at this time. They are lazy loaded only if user passed IR or ONNX and only single reader is loaded depending on model type.
		</comment>
		<comment id='5' author='junluan' date='2020-05-26T12:40:10Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 we also use different namespace for ONNX &lt;denchmark-link:https://github.com/openvinotoolkit/openvino/blob/master/ngraph/cmake/external_onnx.cmake#L38&gt;https://github.com/openvinotoolkit/openvino/blob/master/ngraph/cmake/external_onnx.cmake#L38&lt;/denchmark-link&gt;
, but what is about protobuf?
CC &lt;denchmark-link:https://github.com/tomdol&gt;@tomdol&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='junluan' date='2020-05-26T12:50:30Z'>
		&lt;denchmark-link:https://github.com/ilya-lavrenov&gt;@ilya-lavrenov&lt;/denchmark-link&gt;
  That will be ok. Thank you!
		</comment>
		<comment id='7' author='junluan' date='2020-05-26T13:00:42Z'>
		Here some of the related issues:
&lt;denchmark-link:https://github.com/opencv/opencv/issues/13328&gt;opencv/opencv#13328&lt;/denchmark-link&gt;
 (the most complete)
&lt;denchmark-link:https://github.com/opencv/opencv/issues/10747&gt;opencv/opencv#10747&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/opencv/opencv/issues/12429&gt;opencv/opencv#12429&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/opencv/opencv/issues/10949&gt;opencv/opencv#10949&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/opencv/opencv/issues/10027&gt;opencv/opencv#10027&lt;/denchmark-link&gt;

Cannot find a universal solution from it. Maybe &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 can comment?
		</comment>
		<comment id='8' author='junluan' date='2020-05-26T14:17:27Z'>
		Linking statically is recommended and this is why we do it this way in onnx_importer &lt;denchmark-link:https://github.com/protocolbuffers/protobuf/blob/master/cmake/README.md#dlls-vs-static-linking&gt;https://github.com/protocolbuffers/protobuf/blob/master/cmake/README.md#dlls-vs-static-linking&lt;/denchmark-link&gt;

As mentioned, it's now a separate library and ngraph doesn't depend on protobuf any more.
		</comment>
		<comment id='9' author='junluan' date='2020-05-26T14:19:28Z'>
		&lt;denchmark-link:https://github.com/tomdol&gt;@tomdol&lt;/denchmark-link&gt;
 but will we have issues if user uses both ONNX importer and other library with protobuf inside?
		</comment>
		<comment id='10' author='junluan' date='2020-05-26T14:28:19Z'>
		This depends a lot on how protobuf is used in this other app. We've had a problem with 2 protobuf versions in ONNXRuntime and UEP and the solution was to use a custom namespace for ONNX ilbrary used by onnx_importer.
There was another problem when ngraph was loaded globally in our python API which was fixed by changing the way it's loaded &lt;denchmark-link:https://github.com/NervanaSystems/ngraph/pull/4769&gt;NervanaSystems/ngraph#4769&lt;/denchmark-link&gt;

In general I think at this point it should be safe to use protobuf in user's app and at the same time onnx_importer using its API that relies on std::istream (this is the setup used in UEP). If there are any actual problems - please report them and we'll definitely have a look.
		</comment>
		<comment id='11' author='junluan' date='2020-05-27T01:56:26Z'>
		&lt;denchmark-link:https://github.com/ilya-lavrenov&gt;@ilya-lavrenov&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/tomdol&gt;@tomdol&lt;/denchmark-link&gt;

I just find the reason which caused this problem.
**.pb.cc call's macro GOOGLE_PROTOBUF_VERIFY_VERSION which is
&lt;denchmark-code&gt;#define GOOGLE_PROTOBUF_VERIFY_VERSION                                    \
  ::google::protobuf::internal::VerifyVersion(                            \
    GOOGLE_PROTOBUF_VERSION, GOOGLE_PROTOBUF_MIN_LIBRARY_VERSION,         \
    __FILE__)
&lt;/denchmark-code&gt;

I link ngraph first then protobuf. The linker in macOS use the symble in ngraph instead of protobuf. When I changed the order to link protobuf first, I work's fine. But this problem does not happen in Linux, gcc link the correct symble.
Thank you.
		</comment>
		<comment id='12' author='junluan' date='2020-06-02T09:12:34Z'>
		&lt;denchmark-link:https://github.com/junluan&gt;@junluan&lt;/denchmark-link&gt;
 is it ok to close this issue? Can we consider this resolved?
		</comment>
		<comment id='13' author='junluan' date='2020-06-02T09:57:44Z'>
		&lt;denchmark-link:https://github.com/tomdol&gt;@tomdol&lt;/denchmark-link&gt;
 It's ok.
		</comment>
	</comments>
</bug>