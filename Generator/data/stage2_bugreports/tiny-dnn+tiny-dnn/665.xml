<bug id='665' author='kokostek' open_date='2017-04-21T10:24:25Z' closed_time='2017-06-20T14:30:40Z'>
	<summary>Turning off bias on conv layer leads to access violation</summary>
	<description>
Actually, I get this error message while debugging with Visual Studio:
&lt;denchmark-code&gt;Debug Assertion Failed!

Program: C:\Windows\system32\MSVCP140D.dll
File: c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
Line: 1218

Expression: vector subscript out of range

For information on how your program can cause an assertion
failure, see the Visual C++ documentation on asserts.

(Press Retry to debug the application)
&lt;/denchmark-code&gt;

It happens in conv2d_op.h at this line:
&lt;denchmark-code&gt;    const tensor_t &amp;bias    = context.input(2);
&lt;/denchmark-code&gt;

Seems like it is still trying to access bias vector even if its off.
Here is my code with nn initalization, feature loading and prediction:
&lt;denchmark-code&gt;    network&lt;sequential&gt; net;

    net 
        &lt;&lt; conv(64, 64, 9, 1, 3, padding::valid, false) &lt;&lt; relu()
        &lt;&lt; max_pool(56, 56, 3, 2)

        &lt;&lt; conv(28, 28, 5, 3, 9, padding::same) &lt;&lt; relu()
        &lt;&lt; max_pool(28, 28, 9, 2)

        &lt;&lt; conv(14, 14, 3, 9, 27, padding::same) &lt;&lt; relu()
        &lt;&lt; max_pool(14, 14, 27, 2)

        &lt;&lt; fc(7 * 7 * 27, 300) &lt;&lt; relu()
        &lt;&lt; fc(300, 30) &lt;&lt; relu()
        &lt;&lt; fc(30, 3) &lt;&lt; softmax();

    vec_t x = convert_image("d:\\work\\video\\dataset\\1\\0000.png", 1.0, 64, 64);  // load features
    vec_t y = net.predict(x);  // predict with with random weights (error happens here)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='kokostek' date='2017-04-30T08:24:37Z'>
		Same code with biases works, right?
		</comment>
		<comment id='2' author='kokostek' date='2017-04-30T08:34:49Z'>
		Yes, it does.
		</comment>
		<comment id='3' author='kokostek' date='2017-05-13T14:47:00Z'>
		Can you provide sample image and also full compiling example?
		</comment>
		<comment id='4' author='kokostek' date='2017-05-24T12:49:00Z'>
		There is really no need for a sample image. It can just be a random vec_t object.
This code runs fine:
#include &lt;tiny_dnn/tiny_dnn.h&gt;

using namespace tiny_dnn;

int main()
{
    network&lt;sequential&gt; net;
    
    net &lt;&lt; conv(32, 32, 3, 1, 1, padding::same, true);
    vec_t input(32 * 32);
    net.predict(input);

    return 0;
}
and this asserts:
#include &lt;tiny_dnn/tiny_dnn.h&gt;

using namespace tiny_dnn;

int main()
{
    network&lt;sequential&gt; net;
    
    net &lt;&lt; conv(32, 32, 3, 1, 1, padding::same, false);
    vec_t input(32 * 32);
    net.predict(input);

    return 0;
}
I'm running it under Visual Studio 2015 debugger. In order to detect access violation, you may have to use valgrind or something like that on your OS.
		</comment>
		<comment id='5' author='kokostek' date='2017-05-24T17:36:26Z'>
		&lt;denchmark-link:https://github.com/kokostek&gt;@kokostek&lt;/denchmark-link&gt;
 Just verified that we do not have proper tests for this. We should add it and so that we can fix the issue.
		</comment>
		<comment id='6' author='kokostek' date='2017-05-25T16:23:38Z'>
		&lt;denchmark-link:https://github.com/tiny-dnn/tiny-dnn/pull/730&gt;#730&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>