<bug id='29' author='wdx04' open_date='2015-06-15T04:12:06Z' closed_time='2015-09-23T14:25:22Z'>
	<summary>memory leak in network class</summary>
	<description>
Here is the code in network.h to add a temporarily-constructed layer to the network:
template &lt;typename L, typename O, typename Layer&gt;
network&lt;L, O&gt;&amp; operator &lt;&lt; (network&lt;L, O&gt;&amp; n, const Layer&amp;&amp; l) {
    n.add(new Layer(l));
    return n;
}
The "new"ed layer is not deleted when the network object is destructed, causing memory leak.
Please consider storing shared smart pointers of layers instead of raw pointers inside a network object.
	</description>
	<comments>
	</comments>
</bug>