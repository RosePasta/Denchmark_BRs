<bug id='247' author='CaoZhongZ' open_date='2018-05-29T04:44:34Z' closed_time='2018-06-06T21:17:15Z'>
	<summary>Add 'vzeroupper' at the end of primitives?</summary>
	<description>
We encountered several AVX/SSE transitional penalty when switch from MKL-DNN to NumPy (called libm). The SSE performance is 3x worse when upper bits of registers is non-zero. We are covering these operations with new implementations but it requires time. We can also add OpenMP regions to execute the instruction after called MKL-DNN. But it seems much cheaper to just add it to the end of OpenMP region of every primitives, left SIMD registers a clean state when leaving MKL-DNN. Is that feasible?
	</description>
	<comments>
		<comment id='1' author='CaoZhongZ' date='2018-05-29T17:26:24Z'>
		Can you please check if &lt;denchmark-link:https://gist.github.com/rsdubtso/baf6e359f98baceedb490de46d8c545c&gt;this patch &lt;/denchmark-link&gt;
 fixes your problem?
		</comment>
		<comment id='2' author='CaoZhongZ' date='2018-05-29T23:39:08Z'>
		If I'm reading the patch correctly, vzeroupper would be generated for all Intel architectures that support AVX ISA. But, vzeroupper is not needed on Xeon Phi (KNL) and adds significant overhead. Related discussion here, &lt;denchmark-link:https://software.intel.com/en-us/forums/intel-isa-extensions/topic/704023&gt;https://software.intel.com/en-us/forums/intel-isa-extensions/topic/704023&lt;/denchmark-link&gt;

We could protect vzeroupper generation on KNL by modifying the conditional from:
if(mayiuse(avx)) -&gt; if(!mayiuse(avx512_mic) &amp;&amp; mayiuse(avx))
		</comment>
		<comment id='3' author='CaoZhongZ' date='2018-05-30T06:42:38Z'>
		Hi Vamsi, you are right, the KNL should be excluded.
		</comment>
		<comment id='4' author='CaoZhongZ' date='2018-05-30T08:10:31Z'>
		Thank you! I'll try this patch and come back here later.
		</comment>
		<comment id='5' author='CaoZhongZ' date='2018-05-31T05:51:33Z'>
		Ah, one case left after the patch. It might caused by MKL gemm path or reorder. Do MKL take care of AVX registers?
		</comment>
		<comment id='6' author='CaoZhongZ' date='2018-06-02T00:50:11Z'>
		I've updated the gist. The (closed-source) MKL should be fine. @4pao, can you please try again?
		</comment>
		<comment id='7' author='CaoZhongZ' date='2018-06-05T03:25:02Z'>
		I'll try it. wait for a while.
		</comment>
		<comment id='8' author='CaoZhongZ' date='2018-06-06T02:44:04Z'>
		The patch is necessary. Further more, we did a investigation found out that large number of slow down cases resulted from "C/C++" parts of MKL-DNN. Because when we compiled MKL-DNN with '-march=native', the performance of SSE is down. If we don't, no performance loss. So I might be wrong about adding vzeroupper might solve this problem, it scattered everywhere if compiled with certain flags.
		</comment>
		<comment id='9' author='CaoZhongZ' date='2018-06-06T21:17:15Z'>
		All the compilers should be adding vzeroupper on transitions. I would suggest trying a newer gcc (guessing from the -march=native). I will still push this patch to the master, but will close this issue as resolved. Feel free to reopen it if necessary.
		</comment>
	</comments>
</bug>