<bug id='692' author='nabroyan' open_date='2020-04-09T09:07:31Z' closed_time='2020-04-12T18:38:54Z'>
	<summary>binary primitive crashes in the newer version</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

binary primitive causes heap corruption/memory access violation after upgrading from 1.1.2 to 1.3.
&lt;denchmark-h:h1&gt;Version&lt;/denchmark-h&gt;

DNNL 1.3
&lt;denchmark-h:h1&gt;Environment&lt;/denchmark-h&gt;


CPU Intel i7 9750H
OS version Windows 10 and Windows WSL Ubuntu 18.04
Compiler Visual Studio 2019 and WSL gcc 7.4
CMake version 3.17

&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;

Here is the code, which causes the problem.
&lt;denchmark-code&gt;auto src0_md = src0_memory.get_desc();
auto src1_md = src1_memory.get_desc();
auto binary_desc = dnnl::binary::desc(dnnl::algorithm::binary_mul, src0_md, src1_md, src0_md);

dnnl::binary::primitive_desc binary_pd = dnnl::binary::primitive_desc(binary_desc, eng);
dnnl::binary bin(binary_pd);
bin.execute(strm,
{
	{DNNL_ARG_SRC_0, src0_memory},
	{DNNL_ARG_SRC_1, src1_memory},
	{DNNL_ARG_DST, src0_memory}
});
strm.wait();
&lt;/denchmark-code&gt;

&lt;denchmark-h:h1&gt;Observed behavior&lt;/denchmark-h&gt;

This code was working fine with the 1.1.2 version, but with 1.3 version it either crashes on bin.execute or causing Access violation reading location 0x0000080FFFFFFFFC. exception while the scope ends.
I have also tried to use a new memory for destination (instead of in-place), but results were the same.
&lt;denchmark-h:h1&gt;Expected behavior&lt;/denchmark-h&gt;

Not to crash.
	</description>
	<comments>
		<comment id='1' author='nabroyan' date='2020-04-09T14:34:41Z'>
		Hi &lt;denchmark-link:https://github.com/nabroyan&gt;@nabroyan&lt;/denchmark-link&gt;
,
Could you please run the code with environment variable DNNL_VERBOSE=1 and post the resulting log here?
Vadim
		</comment>
		<comment id='2' author='nabroyan' date='2020-04-09T14:43:37Z'>
		Hi &lt;denchmark-link:https://github.com/vpirogov&gt;@vpirogov&lt;/denchmark-link&gt;

Thank you for quick reply.
Here is the log of my test:

dnnl_verbose,info,DNNL v1.3.0 (commit 07579e6)
dnnl_verbose,info,cpu,runtime:OpenMP
dnnl_verbose,info,cpu,isa:Intel AVX2
dnnl_verbose,info,gpu,runtime:none
dnnl_verbose,exec,cpu,inner_product,gemm:jit,forward_inference,src_f32::blocked🆎f0 wei_f32::blocked🆎f0 bia_f32::blocked🅰️f0 dst_f32::blocked🆎f0,,,mb1ic12oc12,16.2939
dnnl_verbose,exec,cpu,binary,jit:uni,undef,src_f32::blocked🆎f0 src_f32::blocked🆎f0 dst_f32::blocked🆎f0,,alg:binary_mul,12x12:1x12 12x12,0.0389

It seems, that there is undefined behavior, as it crashes on different statements on each run.
		</comment>
		<comment id='3' author='nabroyan' date='2020-04-09T15:00:31Z'>
		Thanks, &lt;denchmark-link:https://github.com/nabroyan&gt;@nabroyan&lt;/denchmark-link&gt;
. I can reproduce segfault with benchdnn on v1.3 and master.
		</comment>
		<comment id='4' author='nabroyan' date='2020-04-09T22:57:43Z'>
		Hi! This is indeed a mistake in how spatial was computed.
&lt;denchmark-link:https://github.com/nabroyan&gt;@nabroyan&lt;/denchmark-link&gt;
, could you try &lt;denchmark-link:https://gist.github.com/dzarukin/c4fc3d41e3dcb28b01b557c59e7bb887&gt;this patch&lt;/denchmark-link&gt;
 to check if it fixes for you?
		</comment>
		<comment id='5' author='nabroyan' date='2020-04-10T06:28:53Z'>
		&lt;denchmark-link:https://github.com/dzarukin&gt;@dzarukin&lt;/denchmark-link&gt;
 , yes the patch fixes for me. Thank you for prompt reply and fix!
		</comment>
	</comments>
</bug>