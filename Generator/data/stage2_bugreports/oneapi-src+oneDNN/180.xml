<bug id='180' author='thefiddler' open_date='2018-01-11T11:22:56Z' closed_time='2018-02-08T18:54:20Z'>
	<summary>Crash when running on 32bit Windows inside VMWare virtual machine</summary>
	<description>
&lt;denchmark-h:h3&gt;Description&lt;/denchmark-h&gt;

I am getting a crash when trying to run mkl-dnn inside a VMWare virtual machine. I have successfully compiled the source for Windows 32bits using Visual Studio 2015, but all examples and tests fail with an error.
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;

Intel MKL-DNN includes hardware-specific optimizations and may behave
differently on depending on the compiler and build environment. Include
the following information to help reproduce the issue:

CPU make and model (try lscpu): Intel Core i7-4870HQ CPU @ 2.5GHz
OS version (uname -a): Windows 10 32bit
Compiler version (gcc --version): Microsoft (R) C/C++ Optimizing Compiler Version 19.00.23506 for x86
MKLROOT value (echo MKLROOT=$MKLROOT): not installed
CMake version (cmake --version): cmake version 3.10.1
CMake output log: CMakeOutput.log and CMakeError.log

&lt;denchmark-h:h3&gt;Steps to reproduce&lt;/denchmark-h&gt;

Run the "simple-net-c" example. It fails in the mkldnn_primitive_create() call on line 245.
&lt;denchmark-h:h3&gt;Actual behavior&lt;/denchmark-h&gt;

The application crashes with the following error:
&lt;denchmark-code&gt;Unhandled exception at 0x7523DB18 in simple-net-c.exe: Microsoft C++ exception: Xbyak::Error at memory location 0x004FD750.
&lt;/denchmark-code&gt;

The stacktrace is pointing to xbyak.h, line 1553:
&lt;denchmark-code&gt; 	KernelBase.dll!7523db18()	Unknown
 	[Frames below may be incorrect and/or missing, no symbols loaded for KernelBase.dll]	
 	[External Code]	
&gt;	mkldnn.dll!Xbyak::CodeGenerator::setSIB(const Xbyak::RegExp &amp; e, int reg, int disp8N) Line 1553	C++
 	mkldnn.dll!Xbyak::CodeGenerator::opAddr(const Xbyak::Address &amp; addr, int reg, int immSize, int disp8N) Line 1670	C++
 	mkldnn.dll!Xbyak::CodeGenerator::opModM(const Xbyak::Address &amp; addr, const Xbyak::Reg &amp; reg, int code0, int code1, int code2, int immSize) Line 1615	C++
 	mkldnn.dll!Xbyak::CodeGenerator::movdqu(const Xbyak::Address &amp; addr, const Xbyak::Xmm &amp; xmm) Line 494	C++
 	mkldnn.dll!mkldnn::impl::cpu::jit_generator::preamble() Line 281	C++
 	mkldnn.dll!mkldnn::impl::cpu::jit_avx2_conv_fwd_kernel_f32::generate() Line 319	C++
 	mkldnn.dll!mkldnn::impl::cpu::jit_avx2_conv_fwd_kernel_f32::jit_avx2_conv_fwd_kernel_f32(mkldnn::impl::cpu::jit_conv_conf_t ajcp, const mkldnn_primitive_attr &amp; attr) Line 33	C++
 	mkldnn.dll!mkldnn::impl::cpu::_jit_avx2_convolution_fwd_t&lt;0&gt;::_jit_avx2_convolution_fwd_t&lt;0&gt;(const mkldnn::impl::cpu::_jit_avx2_convolution_fwd_t&lt;0&gt;::pd_t * pd, const mkldnn::impl::nstl::vector&lt;mkldnn_primitive_at_t&gt; &amp; inputs, const mkldnn::impl::nstl::vector&lt;mkldnn_primitive const *&gt; &amp; outputs) Line 91	C++
 	mkldnn.dll!mkldnn::impl::cpu::_jit_avx2_convolution_fwd_t&lt;0&gt;::pd_t::create_primitive(mkldnn_primitive * * primitive, const mkldnn_primitive_at_t * inputs, const mkldnn_primitive * * outputs) Line 43	C++
 	mkldnn.dll!mkldnn_primitive_create(mkldnn_primitive * * primitive, const mkldnn_primitive_desc * primitive_desc, const mkldnn_primitive_at_t * inputs, const mkldnn_primitive * * outputs) Line 45	C++
 	simple-net-c.exe!simple_net(...) Line 245	C
 	simple-net-c.exe!main(int argc, char * * argv) Line 488	C
 	[External Code]	
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

The example should probably run.
Is there any way to change the AVX level for the JIT, or disable it completely, to see whether it works then?
	</description>
	<comments>
		<comment id='1' author='thefiddler' date='2018-01-12T16:45:13Z'>
		Intel MKL-DNN does not support 32-bit operating systems and so far we do not have plan to do that. The diagnostics we provide in that case can definitely be improved though.
		</comment>
		<comment id='2' author='thefiddler' date='2018-02-08T18:54:19Z'>
		Closing as invalid (MKL-DNN does not support 32-bit mode).
		</comment>
	</comments>
</bug>