<bug id='125' author='ehteqx' open_date='2017-09-17T15:52:11Z' closed_time='2017-10-30T17:49:49Z'>
	<summary>Test failure for test_inner_product_forward</summary>
	<description>
Hello,
I just tried to compile and test MKL-DNN. The build was successful, but the test_inner_product_forward validation test (and it was the only one) failed.
The version was git master
Some information on my setup:


uname --all: Linux ... 4.4.0-93-generic #116-Ubuntu SMP Fri Aug 11 21:17:51 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux


lscpu:


&lt;denchmark-code&gt;Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                8
On-line CPU(s) list:   0-7
Thread(s) per core:    2
Core(s) per socket:    4
Socket(s):             1
NUMA node(s):          1
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 94
Model name:            Intel(R) Core(TM) i7-6820HQ CPU @ 2.70GHz
Stepping:              3
CPU MHz:               3344.203
CPU max MHz:           3600.0000
CPU min MHz:           800.0000
BogoMIPS:              5423.91
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              8192K
NUMA node0 CPU(s):     0-7
Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch epb intel_pt tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx rdseed adx smap clflushopt xsaveopt xsavec xgetbv1 dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp
&lt;/denchmark-code&gt;



gcc --version, which is the same as cc --version: gcc-7 (Ubuntu 7.2.0-1ubuntu1~16.04) 7.2.0


some relevant flags:


&lt;denchmark-code&gt;export OMP_NUM_THREADS=4
export KMP_AFFINITY=verbose,granularity=fine,proclist=[0-4],explicit
&lt;/denchmark-code&gt;



cmake --version: cmake version 3.9.0


full test output: see file attached fulltest.txt


I am obviously available for further testing/providing more info if needed.
Thanks for your support. Regards,
Emanuele
	</description>
	<comments>
		<comment id='1' author='ehteqx' date='2017-09-18T14:56:49Z'>
		Thanks for the report. I was not able to reproduce the issue on the spot. Could you please post CMake output?
		</comment>
		<comment id='2' author='ehteqx' date='2017-09-22T00:41:25Z'>
		Here we are (and sorry for the delay...).!
As before, I attach a textfile with the log inside, to avoid endless comments.
&lt;denchmark-link:https://github.com/01org/mkl-dnn/files/1323140/cmake-output.txt&gt;cmake-output.txt&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='ehteqx' date='2017-09-22T01:38:57Z'>
		Thanks for the log. I see that you are building Intel MKL-DNN with Intel MKL 2017 Update 1. I was not able to do this out of the box, as build system complains about libiomp5. However I was able to reproduce the failures you see when I hacked the build system to use libgomp. So the current assumption is that what's going on is infamous OpenMP runtimes conflict. To verify that could you please get me ldd output for libmkldnn.so? Also is this is the case MKL_THREADING_LAYER=GNU should fix the problem.
		</comment>
		<comment id='4' author='ehteqx' date='2017-09-22T12:51:32Z'>
		Thank you very much for the support!
As you assumed, OpenMP is to blame: the output of ldd libmkldnn.so | grep mp contains: libgomp.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libgomp.so.1 (0x00002ae752596000).
Honestly, I did believe to have put MKL_THREADING_LAYER=GNU in my /etc/bash.bashrc (as it solved some other compile-time problems for i.e. Cray Chapel) and I did not check.
Now the problem seems to be solved and all the test passed. Thank you again and sorry for that.
		</comment>
		<comment id='5' author='ehteqx' date='2017-09-22T15:45:19Z'>
		Good to know it works now. You actually helped to find an issue in how Intel MKL-DNN build system handles full Intel MKL distribution. In production I would recommend sticking to libiomp5 as threading runtime for performance reasons. There are two ways to accomplish that.
The easiest way to get it work is using Intel MKL small libraries distribution. &lt;denchmark-link:https://github.com/01org/mkl-dnn#installation&gt;Installation section&lt;/denchmark-link&gt;
 in the project readme explains how to build the library with the small libraries distribution. If your application relies on OpenMP in places other than Intel MKL-DNN you'll also need to modify the linkline as described in the &lt;denchmark-link:https://github.com/01org/mkl-dnn#linking-your-application&gt;section of the readme on linking&lt;/denchmark-link&gt;
.
If you want to stick with full Intel MKL distribution you'll need to either hack the build system to locate libiomp5 correctly with full distribution or wait for us to get this fixed.
		</comment>
		<comment id='6' author='ehteqx' date='2017-09-22T16:07:25Z'>
		I'm happy to know that at least it helped at something.
I am not actually in production (much of my system relies on rough hack-togethers and I'm experimenting with Intel Nervana-related frameworks rather then producing something useful), but using IntelMP was my first intention. I have always tried to compile MKL-DNN with MKL small libraries as described, but the full MKL shipped together with Parallel Studio XE always took precedence (I supposed purposefully, without further research).
Right now I am not able to access the same system, but at least tomorrow I will probably try to just add at the beginning of the CMake cache file an LD specification to prioritize the directory with libiomp5 in it (or symlink libiomp5 in /usr/local/lib) and I will update you on the matter.
		</comment>
		<comment id='7' author='ehteqx' date='2017-09-22T16:19:14Z'>
		The reason Intel MKL takes precedence is likely because MKLROOT environment variable is set before CMake build. If you will drop it CMake will pickup the small distribution from external/ folder.
		</comment>
		<comment id='8' author='ehteqx' date='2017-09-23T10:35:11Z'>
		OK, I finally managed to make the whole thing work as expected by:
&lt;denchmark-code&gt;unset MKLROOT      # It was in fact set to the whole MKL distribution
export MKL_THREADING_LAYER=INTEL   # Don't know if strictly necessary at this point
&lt;/denchmark-code&gt;

and then following the installation procedure with the external MKL small libraries.
Now the output of ldd /usr/local/lib/libmkldnn.so | grep mp is:
&lt;denchmark-code&gt;libgomp.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libgomp.so.1 (0x00002b94b2e5f000)
libiomp5.so =&gt; /opt/intel/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64_lin/libiomp5.so (0x00002b94b3670000)
&lt;/denchmark-code&gt;

All the test pass and the MKLDNN behaves as expected.
Thank you again for everything!
		</comment>
		<comment id='9' author='ehteqx' date='2017-09-25T18:14:24Z'>
		Glad that it works, but the fact that you see both libgomp and libiomp5 in the ldd output is a problem. I believe the root cause is modification to CMakeList.txt. Could you please roll back any changes you did there?
With the small libraries distribution you don't need MKL_THREADING_LAYER setting, as the runtime is selected by linking to either libmklml_intel or libmklml_gnu.
		</comment>
		<comment id='10' author='ehteqx' date='2017-09-26T14:03:13Z'>
		Unfortunately, I did not change any parameter in CMakeList.txt, I just - and only - followed the commands I reported over a fresh git/master clone.
I have no idea why both the GNU and Intel MP libraries are being linked: I can try to recompile without the MKL_THREADING_LAYER setting, or (down the tweak-ish way) to manually rename libgomp just for the compile and see what happens to the resulting libmkldnn.so.
		</comment>
		<comment id='11' author='ehteqx' date='2017-09-28T19:57:48Z'>
		That's very odd and this is something I cannot reproduce with GCC 7.2.
		</comment>
		<comment id='12' author='ehteqx' date='2017-10-30T17:49:49Z'>
		Closing as outdated.
		</comment>
	</comments>
</bug>