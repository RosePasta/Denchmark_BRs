<bug id='405' author='szha' open_date='2019-02-05T02:26:52Z' closed_time='2019-02-11T21:06:20Z'>
	<summary>OSX Version Requirement</summary>
	<description>
At Apache MXNet (Incubating) we want to make sure that it's easy for users to install our framework. On the other hand, the recent requirement on OSX 10.13 prevents us from offering hassle-free binary distribution on Mac with MKL-DNN option. Would it be feasible to extend the compatibility to earlier OSX/Xcode? (xcode 8, OSX 10.11 is what we currently offer)
	</description>
	<comments>
		<comment id='1' author='szha' date='2019-02-06T00:26:00Z'>
		We don't have a requirement for OSX 10.13, but it is the version we validate against. Are you seeing errors with 10.11? If so, this is unexpected from our end.
		</comment>
		<comment id='2' author='szha' date='2019-02-07T07:04:13Z'>
		...

Downloaded and unpacked Intel(R) MKL small libraries to /Users/travis/build/dmlc/mxnet-distro/mxnet-build/3rdparty/mkldnn/external

-- CMAKE_BUILD_TYPE is unset, defaulting to Release

-- Detecting Intel(R) MKL: trying mklml_intel

-- Intel(R) MKL: include /Users/travis/build/dmlc/mxnet-distro/mxnet-build/3rdparty/mkldnn/build/install/include

-- Intel(R) MKL: lib /Users/travis/build/dmlc/mxnet-distro/mxnet-build/3rdparty/mkldnn/build/install/lib/libmklml.dylib

-- Try OpenMP C flag = [-fopenmp=libomp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP C flag = [ ]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP C flag = [-fopenmp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP C flag = [/openmp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP C flag = [-Qopenmp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP C flag = [-openmp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP C flag = [-xopenmp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP C flag = [+Oopenmp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP C flag = [-qsmp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP C flag = [-mp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP CXX flag = [-fopenmp=libomp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP CXX flag = [ ]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP CXX flag = [-fopenmp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP CXX flag = [/openmp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP CXX flag = [-Qopenmp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP CXX flag = [-openmp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP CXX flag = [-xopenmp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP CXX flag = [+Oopenmp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP CXX flag = [-qsmp]

-- Performing Test OpenMP_FLAG_DETECTED

clang: warning: optimization flag '-finline-functions' is not supported

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Try OpenMP CXX flag = [-mp]

-- Performing Test OpenMP_FLAG_DETECTED

-- Performing Test OpenMP_FLAG_DETECTED - Failed

-- Could NOT find OpenMP (missing:  OpenMP_C_FLAGS OpenMP_CXX_FLAGS) 

CMake Warning at cmake/OpenMP.cmake:107 (message):

  OpenMP library could not be found.  Proceeding might lead to highly

  sub-optimal performance.

Call Stack (most recent call first):

  CMakeLists.txt:69 (include)





CMake Error at cmake/OpenMP.cmake:39 (set_if):

  set_if Macro invoked with incorrect arguments for macro named: set_if

Call Stack (most recent call first):

  cmake/OpenMP.cmake:57 (forbid_link_compiler_omp_rt)

  cmake/OpenMP.cmake:115 (use_intel_omp_rt)

  CMakeLists.txt:69 (include)





CMake Error at cmake/OpenMP.cmake:40 (set_if):

  set_if Macro invoked with incorrect arguments for macro named: set_if

Call Stack (most recent call first):

  cmake/OpenMP.cmake:57 (forbid_link_compiler_omp_rt)

  cmake/OpenMP.cmake:115 (use_intel_omp_rt)

  CMakeLists.txt:69 (include)





-- OpenMP lib: /Users/travis/build/dmlc/mxnet-distro/mxnet-build/3rdparty/mkldnn/build/install/lib/libiomp5.dylib

-- Could NOT find Doxygen (missing:  DOXYGEN_EXECUTABLE) 

-- VTune profiling environment is unset

-- Configuring incomplete, errors occurred!

See also "/Users/travis/build/dmlc/mxnet-distro/mxnet-build/3rdparty/mkldnn/build/CMakeFiles/CMakeOutput.log".

See also "/Users/travis/build/dmlc/mxnet-distro/mxnet-build/3rdparty/mkldnn/build/CMakeFiles/CMakeError.log".
		</comment>
		<comment id='3' author='szha' date='2019-02-07T21:27:37Z'>
		Can you help me with steps leading up to this output? are you following the "build from source" section of &lt;denchmark-link:https://software.intel.com/en-us/articles/apache-mxnet-v120-released-with-intel-optimized-cpu-backend&gt;https://software.intel.com/en-us/articles/apache-mxnet-v120-released-with-intel-optimized-cpu-backend&lt;/denchmark-link&gt;

In the meantime, I will look for a machine with 10.11 OS to try and reproduce.
		</comment>
		<comment id='4' author='szha' date='2019-02-07T22:11:37Z'>
		Also, can you please share cmake version? I tried 3.9.4 (the oldest I have on our mac machine) and it seems to work...
		</comment>
		<comment id='5' author='szha' date='2019-02-08T05:15:33Z'>
		The environment is on the &lt;denchmark-link:https://docs.travis-ci.com/user/reference/osx/#macos-version&gt;travis-ci&lt;/denchmark-link&gt;
, , with cmake version is 3.6.1. Though maybe not relevant, I have the following before_install/install steps:
before_install: |
  if [[ $TRAVIS_OS_NAME == 'osx' ]]; then
    travis_wait rvm get head --auto-dotfiles;
    travis_wait brew update;
    travis_wait brew install pyenv openssl automake pkg-config nasm;
    travis_wait brew upgrade pyenv openssl automake pkg-config nasm --quiet;
    pyenv --version
    travis_wait pyenv install -s $PYTHON_VERSION
    export PATH=$HOME/.pyenv/versions/$PYTHON_VERSION/bin:$PATH
    python --version
    if [[ -z $(command -v pip) ]]; then
      travis_wait curl -L -O https://bootstrap.pypa.io/get-pip.py
      travis_wait python get-pip.py
    fi
    pip --version
  fi

install: |
  travis_wait sudo -H pip install -U pip "setuptools==36.2.0" wheel pypandoc twine nose numpy mock
I'm simply building mxnet with  using make. MKLDNN related build logic is &lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/mkldnn.mk&gt;here&lt;/denchmark-link&gt;
. If you need other details on how building mkldnn works in mxnet, &lt;denchmark-link:https://github.com/pengzhao-intel&gt;@pengzhao-intel&lt;/denchmark-link&gt;
 and team should have it.
		</comment>
		<comment id='6' author='szha' date='2019-02-08T10:25:55Z'>
		thanks the helps &lt;denchmark-link:https://github.com/nathan-greeneltch-intel&gt;@nathan-greeneltch-intel&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/rsdubtso&gt;@rsdubtso&lt;/denchmark-link&gt;

The build cmd for MKL-DNN as below:
&lt;denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/mkldnn.mk#L40&gt;https://github.com/apache/incubator-mxnet/blob/master/mkldnn.mk#L40&lt;/denchmark-link&gt;

build from source:
&lt;denchmark-code&gt;git clone --recursive https://github.com/apache/incubator-mxnet/
cd incubator-mxnet
make USE_OPENCV=1 USE_MKLDNN=1 USE_BLAS=apple 
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='szha' date='2019-02-11T16:45:35Z'>
		This is a bug in our build system that seems to be only triggered with some versions of CMake (like 3.6.1 in the travis configuraiton mentioned above) when the compiler does not support OpenMP (like the Apple's version of Clang). The fix is to quote macro arguments. It is working its way through the system and probably be in all the relevant branches by the end of the day today.
		</comment>
		<comment id='8' author='szha' date='2019-02-11T16:47:53Z'>
		&lt;denchmark-link:https://github.com/szha&gt;@szha&lt;/denchmark-link&gt;
, Considering that we have v0.18 with this fix coming in 1-2 weeks do you need it backported to v0.17 branch?
		</comment>
		<comment id='9' author='szha' date='2019-02-11T17:14:07Z'>
		Backport would be great. Iâ€™d love to get the fix into 1.4 release of mxnet is which will need the fix immediately.
		</comment>
		<comment id='10' author='szha' date='2019-02-12T00:53:05Z'>
		&lt;denchmark-link:https://github.com/szha&gt;@szha&lt;/denchmark-link&gt;
, the fix is now available in &lt;denchmark-link:https://github.com/intel/mkl-dnn/commit/61f953e079a6fdec9ef123d6fa7d36242fe797f1&gt;v0.17&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/intel/mkl-dnn/commit/f24731ab8be53db5784eb3fce708489416511306&gt;v0.18&lt;/denchmark-link&gt;
 and master.
		</comment>
		<comment id='11' author='szha' date='2019-02-12T22:01:38Z'>
		&lt;denchmark-link:https://github.com/intel/mkl-dnn/releases/tag/v0.17.4&gt;v0.17.4&lt;/denchmark-link&gt;
 with this fix for v0.17 branch is released.
		</comment>
	</comments>
</bug>