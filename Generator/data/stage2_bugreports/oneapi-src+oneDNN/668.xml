<bug id='668' author='kruus' open_date='2020-03-11T20:41:21Z' closed_time='2020-03-13T14:45:34Z'>
	<summary>Segfault on master</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

segfaults on master
&lt;denchmark-h:h1&gt;Version&lt;/denchmark-h&gt;

dnnl_verbose,info,DNNL v1.3.0 (commit &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/018c3f5494ee3ee163a43aecc45671f9abb3543f&gt;018c3f5&lt;/denchmark-link&gt;
)
git log --&gt; Date:   Tue Mar 10 11:23:30 2020 -0700
git remote --&gt; &lt;denchmark-link:https://github.com/intel/mkl-dnn.git&gt;https://github.com/intel/mkl-dnn.git&lt;/denchmark-link&gt;

git status --&gt; Your branch is up-to-date with 'origin/master'
&lt;denchmark-h:h1&gt;Environment&lt;/denchmark-h&gt;

kruus@snake10$ lscpu
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                12
On-line CPU(s) list:   0-11
Thread(s) per core:    2
Core(s) per socket:    6
Socket(s):             1
NUMA node(s):          1
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 79
Model name:            Intel(R) Core(TM) i7-6850K CPU @ 3.60GHz
Stepping:              1
CPU MHz:               1394.121
CPU max MHz:           3500.0000
CPU min MHz:           1200.0000
BogoMIPS:              6999.88
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              15360K
NUMA node0 CPU(s):     0-11
Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch epb invpcid_single intel_pt ssbd ibrs ibpb stibp kaiser tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdseed adx smap xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts md_clear flush_l1d
kruus@snake10$ uname -a
Linux snake10 4.4.0-173-generic &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/pull/203&gt;#203&lt;/denchmark-link&gt;
-Ubuntu SMP Wed Jan 15 02:55:01 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609
cmake version 3.5.1
DNNL includes hardware-specific optimizations and may behave
differently on depending on the compiler and build environment. Include
the following information to help reproduce the issue:

CPU make and model (try lscpu; if your lscpu does not list CPU flags,
try running cat /proc/cpuinfo | grep flags | sort -u)
OS version (uname -a)
Compiler version (gcc --version)
CMake version (cmake --version)
CMake output log
verbose output here:
git hash (git log -1 --format=%H)
(base) kruus@snake10:/local/kruus/sx/dnnl$ git log -1 --format="%H"
018c3f5

&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;

Please check that the issue is reproducible with the latest revision on
master. Include all the steps to reproduce the issue.
build, then run all benchdnn targets, perhaps something like:
&lt;denchmark-code&gt;if [ $DOTEST -ge 4 ]; then # full battery of tests/benchdnn/CMakeLists.txt targets
   (cd ${BUILDDIR} &amp;&amp; make help | grep test_benchdnn | sed s/....// | sort)
   (cd ${BUILDDIR} &amp;&amp; make help | grep test_benchdnn | sed s/....// | sort) &gt; ${BUILDDIR}/bench.targets                                                                     
   { while read -r benchdnn_target; do
        make -C ${BUILDDIR} ${benchdnn_target}; # note default is --mode=C (correctness check)
      done &lt; ${BUILDDIR}/bench.targets; }
fi
&lt;/denchmark-code&gt;

and grep for 'Segmentation'
rerun single test:
DNNL_VERBOSE=2 make VERBOSE=1 -C build-jit-ALL test_benchdnn_concat
ends with:
&lt;denchmark-code&gt;47:PASSED __REPRO: --concat --sdt=s32 --ddt=u8 --dtag=aBx16b --axis=3 3x4x5x13:3x4x5x17
run: --concat --sdt=s8 --axis=3 3x4x5x13:3x4x5x17
dnnl_verbose,create,cpu,concat,simple:any,undef,src_s8::blocked:abcd:f0 src_s8::blocked:abcd:f0 dst_s8::blocked:abcd:f0,,axis:3,3x4x5x13:3x4x5x17 3x4x5x30,0.00390625
dnnl_verbose,create,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_s8::blocked:abcd:f0,,,3x4x5x13,0.0549316
dnnl_verbose,exec,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_s8::blocked:abcd:f0,,,3x4x5x13,0.000976562
dnnl_verbose,create,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_s8::blocked:abcd:f0,,,3x4x5x17,0.0649414
dnnl_verbose,exec,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_s8::blocked:abcd:f0,,,3x4x5x17,0.0012207
Segmentation fault (core dumped)
&lt;/denchmark-code&gt;

run gdb (sorry, release mode).
kruus@snake10$ DNNL_VERBOSE=2 gdb -d src/common -d src/cpu -d include -d examples -s build-jit-ALL/src/libdnnl.so --args build-jit-ALL/tests/benchdnn/benchdnn --concat --sdt=s8 --axis=3 3x4x5x13:3x4x5x17
&lt;denchmark-code&gt;GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
... blah-blah-blah ...
Reading symbols from build-jit-ALL/tests/benchdnn/benchdnn...(no debugging symbols found)...done.
(gdb) run
Starting program: /local/kruus/sx/dnnl/build-jit-ALL/tests/benchdnn/benchdnn --concat --sdt=s8 --axis=3 3x4x5x13:3x4x5x17
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
dnnl_verbose,info,DNNL v1.3.0 (commit 018c3f5494ee3ee163a43aecc45671f9abb3543f)
dnnl_verbose,info,cpu,runtime:OpenMP
dnnl_verbose,info,cpu,isa:Intel AVX2
dnnl_verbose,info,gpu,runtime:none
dnnl_verbose,create,cpu,concat,simple:any,undef,src_s8::blocked:abcd:f0 src_s8::blocked:abcd:f0 dst_s8::blocked:abcd:f0,,axis:3,3x4x5x13:3x4x5x17 3x4x5x30,0.0090332
[New Thread 0x7ffff51c1700 (LWP 9892)]
[New Thread 0x7ffff49c0700 (LWP 9893)]
[New Thread 0x7ffff41bf700 (LWP 9894)]
[New Thread 0x7ffff39be700 (LWP 9895)]
[New Thread 0x7ffff31bd700 (LWP 9896)]
[New Thread 0x7ffff29bc700 (LWP 9897)]
[New Thread 0x7ffff21bb700 (LWP 9898)]
[New Thread 0x7ffff19ba700 (LWP 9899)]
[New Thread 0x7ffff11b9700 (LWP 9900)]
[New Thread 0x7ffff09b8700 (LWP 9901)]
[New Thread 0x7ffff01b7700 (LWP 9902)]
dnnl_verbose,create,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_s8::blocked:abcd:f0,,,3x4x5x13,0.403076
dnnl_verbose,exec,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_s8::blocked:abcd:f0,,,3x4x5x13,0.00195312
dnnl_verbose,create,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_s8::blocked:abcd:f0,,,3x4x5x17,0.170898
dnnl_verbose,exec,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_s8::blocked:abcd:f0,,,3x4x5x17,0.00195312

Thread 3 "benchdnn" received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0x7ffff49c0700 (LWP 9893)]
0x00007ffff753d0ca in void dnnl::impl::for_nd&lt;long, long, long, long, long, int, dnnl::impl::cpu::simple_concat_t&lt;(dnnl_data_type_t)5&gt;::execute(dnnl::impl::exec_ctx_t const&amp;) const::{lambda(long, long, long, long, long, int)#2}&gt;(int, int, long const&amp;, long const&amp;, long const&amp;, long const&amp;, long const&amp;, int const&amp;, dnnl::impl::cpu::simple_concat_t&lt;(dnnl_data_type_t)5&gt;::execute(dnnl::impl::exec_ctx_t const&amp;) const::{lambda(long, long, long, long, long, int)#2}) () from /local/kruus/sx/dnnl/build-jit-ALL/src/libdnnl.so.1
(gdb) bt
#0  0x00007ffff753d0ca in void dnnl::impl::for_nd&lt;long, long, long, long, long, int, dnnl::impl::cpu::simple_concat_t&lt;(dnnl_data_type_t)5&gt;::execute(dnnl::impl::exec_ctx_t const&amp;) const::{lambda(long, long, long, long, long, int)#2}&gt;(int, int, long const&amp;, long const&amp;, long const&amp;, long const&amp;, long const&amp;, int const&amp;, dnnl::impl::cpu::simple_concat_t&lt;(dnnl_data_type_t)5&gt;::execute(dnnl::impl::exec_ctx_t const&amp;) const::{lambda(long, long, long, long, long, int)#2}) () from /local/kruus/sx/dnnl/build-jit-ALL/src/libdnnl.so.1
#1  0x00007ffff753d2a5 in void dnnl::impl::parallel_nd&lt;long&amp;, long&amp;, long&amp;, long&amp;, long&amp;, int const&amp;, dnnl::impl::cpu::simple_concat_t&lt;(dnnl_data_type_t)5&gt;::execute(dnnl::impl::exec_ctx_t const&amp;) const::{lambda(long, long, long, long, long, int)#2}&gt;(long&amp;, long&amp;, long&amp;, long&amp;, long&amp;, int const&amp;, dnnl::impl::cpu::simple_concat_t&lt;(dnnl_data_type_t)5&gt;::execute(dnnl::impl::exec_ctx_t const&amp;) const::{lambda(long, long, long, long, long, int)#2}&amp;&amp;) [clone ._omp_fn.5] () from /local/kruus/sx/dnnl/build-jit-ALL/src/libdnnl.so.1
#2  0x00007ffff5bdadfe in gomp_thread_start (xdata=&lt;optimized out&gt;) at ../../../src/libgomp/team.c:120
#3  0x00007ffff53cd6ba in start_thread (arg=0x7ffff49c0700) at pthread_create.c:333
#4  0x00007ffff56ea41d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
&lt;/denchmark-code&gt;

Similar failure point for test_benchdnn_concat_cpu.
&lt;denchmark-h:h1&gt;Observed behavior&lt;/denchmark-h&gt;

Segmentation fault (core dumped)
&lt;denchmark-h:h1&gt;Expected behavior&lt;/denchmark-h&gt;

No Segmentation fault.
	</description>
	<comments>
		<comment id='1' author='kruus' date='2020-03-11T21:18:59Z'>
		Reproduced. Thanks for the report!
So far seems like a bug in a compiler: gcc 5.5.0 and gcc 6.5.0. Looking into that.
		</comment>
		<comment id='2' author='kruus' date='2020-03-11T21:24:28Z'>
		(sigh of relief) I was extremely concerned when I noticed it in my vanilla-pull branch.
		</comment>
		<comment id='3' author='kruus' date='2020-03-11T22:22:29Z'>
		Actually, I now tend to think the bug is on our side :)
&lt;denchmark-link:https://github.com/kruus&gt;@kruus&lt;/denchmark-link&gt;
, could you please validate &lt;denchmark-link:https://gist.github.com/emfomenk/f09af81390e0154842798b40c76366ab&gt;the following fix&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='4' author='kruus' date='2020-03-12T01:11:27Z'>
		Bingo! Bug located.  Cast to larger pointer type with incorrect alignment can yield undefined behavior, so if the u8 pointers weren't aligned enough it could theoretically be a code bug.
Anyhow, the memcpy fix should be optimized well and may be more portable than the PRAGMA_OMP_SIMD option that follows it.
&lt;denchmark-code&gt;+ make -C build-jit-ALL test_benchdnn_concat
...
1903:PASSED __REPRO: --concat --sdt=bf16 --ddt=bf16 --stag=aBx16b:abx:aBx16b:axb --dtag=aBx16b 6x0x3x4:6x3x3x4:6x5x3x4:6x5x3x4
tests:1904 passed:1904 skipped:0 mistrusted:0 unimplemented:0 failed:0 listed:0
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Checked ptr alignments in original code:&lt;/denchmark-h&gt;

At point of error, alignments 1, 2 and 4 were common.
Scratchpad memory alignments were 32, but base pointers in &lt;denchmark-link:https://github.com/intel/mkl-dnn/blob/018c3f5494ee3ee163a43aecc45671f9abb3543f/src/cpu/simple_concat.cpp#L44-L46&gt;https://github.com/intel/mkl-dnn/blob/018c3f5494ee3ee163a43aecc45671f9abb3543f/src/cpu/simple_concat.cpp#L44-L46&lt;/denchmark-link&gt;
 could indeed have low alignment
&lt;denchmark-code&gt; a=0, al(iptrs[a])=4, al(optrs[a])=8 ptrs 0x55f9e4e71cf4 0x55f9e4e688f8
 a=1, al(iptrs[a])=4, al(optrs[a])=1 ptrs 0x55f9e4e77c04 0x55f9e4e68905
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='kruus' date='2020-03-12T17:51:17Z'>
		
Cast to larger pointer type with incorrect alignment can yield undefined behavior, so if the u8 pointers weren't aligned enough it could theoretically be a code bug.

Yeah, this is my understanding too. The original code was implemented to have an optimized copy w/o relying on memcpy. However, recent version of compiler/libc/libc++ are pretty good at optimizing memcpy on their side, so there is almost [*] nothing wrong with using it instead manual attempts to optimize copy.
We promoted the patch to the internal master. We will soon update github branches and releases as well.
As usual, thanks a lot for finding the issue! :)
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

[*] almost, because with Intel Compiler the for loop with pragma omp simd still could noticeably outperform std::memcpy for some data types...
		</comment>
	</comments>
</bug>