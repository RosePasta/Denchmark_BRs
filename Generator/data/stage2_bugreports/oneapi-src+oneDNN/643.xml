<bug id='643' author='smartnet-club' open_date='2020-01-22T13:17:01Z' closed_time='2020-02-03T17:23:40Z'>
	<summary>Incorrect generation of mkldnn cmake config files</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

CMake configuration failed with TBB backend
&lt;denchmark-h:h1&gt;Version&lt;/denchmark-h&gt;

1.2.0
&lt;denchmark-h:h1&gt;Environment&lt;/denchmark-h&gt;


Linux 4.15.0-74-generic ~16.04.1-Ubuntu
CMake version 3.16.2
CMake output log
CMake Error at ./DNNL/master/lib/cmake/mkldnn/FindTBB.cmake:173 (elseif): given arguments: "TBB_FIND_REQUIRED" "AND" "TBB_FIND_REQUIRED_tbb" "tbbmalloc" "tbbmalloc_proxy" Unknown arguments specified

&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;

build DNNL with -DDNNL_CPU_RUNTIME:STRING=TBB
use find_package(mkldnn REQUIRED CONFIG) from external project
&lt;denchmark-h:h1&gt;The error&lt;/denchmark-h&gt;

In FindTBB.cmake incorrect list declaration
set(TBB_FIND_COMPONENTS "tbb\;tbbmalloc\;tbbmalloc_proxy")
foreach (_tbb_component ${TBB_FIND_COMPONENTS}) can't parse it:
_tbb_component ---&gt;&gt;&gt;&gt;------&gt; tbb;tbbmalloc;tbbmalloc_proxy
&lt;denchmark-h:h1&gt;To fix&lt;/denchmark-h&gt;

in TBBConfig.cmake
set(TBB_FIND_COMPONENTS tbb tbbmalloc tbbmalloc_proxy)
	</description>
	<comments>
		<comment id='1' author='smartnet-club' date='2020-01-23T21:58:50Z'>
		There must be something else going on. I've grabbed an Ubuntu 16.04 image, did a clean checkout of the github master (&lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/033f5a7adcb056dfd06ea306afc8d68154b647d8&gt;033f5a7&lt;/denchmark-link&gt;
), downloaded the latest CMake (&lt;denchmark-link:https://github.com/Kitware/CMake/releases/download/v3.16.3/cmake-3.16.3-Linux-x86_64.tar.gz&gt;3.16.3&lt;/denchmark-link&gt;
) and the latest TBB (&lt;denchmark-link:https://github.com/intel/tbb/releases/download/v2020.1/tbb-2020.1-lin.tgz&gt;2020.1&lt;/denchmark-link&gt;
; this is required because the version from the package manger is too old -- DNNL requires at least TBB 2017), and did not run into any issues:

CMake output
$ cmake --version
cmake version 3.16.3

CMake suite maintained and supported by Kitware (kitware.com/cmake).

$ cmake -DDNNL_CPU_RUNTIME:STRING=TBB -DTBBROOT=/home/rsdubtso/work/tools/linux/tbb/2020.1/tbb ..
-- CMAKE_BUILD_TYPE is unset, defaulting to Release
-- The C compiler identification is GNU 5.4.0
-- The CXX compiler identification is GNU 5.4.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE
-- Found OpenMP_C: -fopenmp (found version "4.0")
-- Found OpenMP_CXX: -fopenmp (found version "4.0")
-- Found OpenMP: TRUE (found version "4.0")
-- TBB: /home/rsdubtso/work/tools/linux/tbb/2020.1/tbb
-- GPU support is disabled
-- Could NOT find Doxygen (missing: DOXYGEN_EXECUTABLE)
-- Found Git: /usr/bin/git (found version "2.7.4")
-- Configuring done
-- Generating done
-- Build files have been written to: /home/rsdubtso/work/ml/mkl-dnn/mkl-dnn/build

		</comment>
		<comment id='2' author='smartnet-club' date='2020-01-23T23:02:16Z'>
		I missed the part about the external project...
First, there is a bug in the install part: we do not install FindTBB.cmake to the lib/cmake/mkldnn, only to lib/cmake/dnnl. With that sorted out, the following project works just fine:
cmake_minimum_required(VERSION 2.8.11)
project(Project)
find_package(mkldnn REQUIRED CONFIG)
CMake output:
$ cmake ..
-- CMAKE_BUILD_TYPE is unset, defaulting to Release
-- The C compiler identification is GNU 5.4.0
-- The CXX compiler identification is GNU 5.4.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE
-- Found OpenMP_C: -fopenmp (found version "4.0")
-- Found OpenMP_CXX: -fopenmp (found version "4.0")
-- Found OpenMP: TRUE (found version "4.0")
-- GPU support is disabled
-- Could NOT find Doxygen (missing: DOXYGEN_EXECUTABLE)
-- Found Git: /usr/bin/git (found version "2.7.4")
-- Configuring done
-- Generating done
-- Build files have been written to: /home/rsdubtso/work/ml/mkl-dnn/mkl-dnn/tmp

		</comment>
		<comment id='3' author='smartnet-club' date='2020-01-24T06:10:06Z'>
		the problem with cmake's FILE WRITE command (affects mkldnn)
it incorrectly generates lists.
Example: see gen_mkldnn_compat_cmakes.cmake
Result: see genedated mkldnn-targets.cmake
line 58: INTERFACE_LINK_LIBRARIES "-lpthread\;TBB::tbb\;OpenCL::OpenCL\;dl"
delimeter \; can not be parsed by CMake as list items delimeter
and in commit &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/e1517b3cf9bf8426c78c0ed3ff0302ae6386a20b&gt;e1517b3&lt;/denchmark-link&gt;
 in installed folder lib/cmake/mkldnn
there are no FindTBB.cmake and FindOpenCL.cmake
		</comment>
		<comment id='4' author='smartnet-club' date='2020-01-24T06:26:37Z'>
		Ack. Will look into this.
		</comment>
		<comment id='5' author='smartnet-club' date='2020-01-24T06:49:41Z'>
		and in dnnl-config.cmake it's better instead
list(APPEND CMAKE_MODULE_PATH ${PACKAGE_PREFIX_DIR}/lib/cmake/dnnl)
write
list(INSERT 0 CMAKE_MODULE_PATH ${PACKAGE_PREFIX_DIR}/lib/cmake/dnnl)
because may be other FindTBB.cmake on CMAKE_MODULE_PATH with incorrect TBB::tbb target definition
		</comment>
		<comment id='6' author='smartnet-club' date='2020-01-24T07:43:48Z'>
		Can you please check that the following patch works for you?
diff --git a/cmake/config.cmake.in b/cmake/config.cmake.in
index cc63a00..a1cdcc0 100644
--- a/cmake/config.cmake.in
+++ b/cmake/config.cmake.in
@@ -20,7 +20,7 @@ set(DNNL_GPU_RUNTIME "@DNNL_GPU_RUNTIME@")

 # Use a custom find module for transitive dependencies
 set(DNNL_ORIGINAL_CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH})
-list(APPEND CMAKE_MODULE_PATH ${PACKAGE_PREFIX_DIR}/@LIB_CONFIG_INSTALL_DIR@)
+list(INSERT CMAKE_MODULE_PATH 0 ${PACKAGE_PREFIX_DIR}/@LIB_CONFIG_INSTALL_DIR@)

 if(DNNL_CPU_RUNTIME STREQUAL "TBB")
     find_package(TBB REQUIRED)
diff --git a/cmake/gen_mkldnn_compat_cmakes.cmake b/cmake/gen_mkldnn_compat_cmakes.cmake
index 007d166..eb31422 100644
--- a/cmake/gen_mkldnn_compat_cmakes.cmake
+++ b/cmake/gen_mkldnn_compat_cmakes.cmake
@@ -42,5 +42,5 @@ foreach(f ${fs})
     string(REGEX REPLACE "lmkldnn" "ldnnl" contents "${contents}")

     # store the result
-    file(WRITE ${dest} "${contents}")
+    file(WRITE ${dest} ${contents})
 endforeach()
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 5c166c6..491a457 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -179,6 +179,7 @@ else()
 endif()

 # Install custom find modules for transitive dependencies
+set(LIB_CONFIG_INSTALL_DIR_COMPAT "${CMAKE_INSTALL_LIBDIR}/cmake/mkldnn")
 if(DNNL_CPU_RUNTIME STREQUAL "TBB")
     if(WIN32)
         install(FILES "../cmake/win/TBBConfig.cmake" RENAME "FindTBB.cmake"
@@ -190,7 +191,6 @@ if(DNNL_CPU_RUNTIME STREQUAL "TBB")
         install(FILES "../cmake/lnx/TBBConfig.cmake" RENAME "FindTBB.cmake"
             DESTINATION ${LIB_CONFIG_INSTALL_DIR})
     endif()
-    set(LIB_CONFIG_INSTALL_DIR_COMPAT "${CMAKE_INSTALL_LIBDIR}/cmake/mkldnn")
     install(FILES "${CMAKE_INSTALL_PREFIX}/${LIB_CONFIG_INSTALL_DIR}/FindTBB.cmake"
             DESTINATION ${LIB_CONFIG_INSTALL_DIR_COMPAT})
 endif()
@@ -199,6 +199,8 @@ if(DNNL_GPU_RUNTIME STREQUAL "OCL")
     install(FILES
         "../cmake/FindOpenCL.cmake"
         DESTINATION ${LIB_CONFIG_INSTALL_DIR})
+    install(FILES "${CMAKE_INSTALL_PREFIX}/${LIB_CONFIG_INSTALL_DIR}/FindOpenCL.cmake"
+            DESTINATION ${LIB_CONFIG_INSTALL_DIR_COMPAT})
 endif()

 # On Windows we need to add dnnl.dll path to CTESTCONFIG_PATH which is later
FWIW, I still need to specify TBBROOT for FindTBB.cmake to work, but this is probably expected.
		</comment>
		<comment id='7' author='smartnet-club' date='2020-01-26T09:08:48Z'>
		the following patch applied to master works
&lt;denchmark-link:https://github.com/intel/mkl-dnn/files/4113285/patch.txt&gt;patch.txt&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='smartnet-club' date='2020-01-26T17:27:22Z'>
		Thanks, that is exactly what soon will be in master. Thanks for the confirmation.
		</comment>
	</comments>
</bug>