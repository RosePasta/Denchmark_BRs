<bug id='515' author='kruus' open_date='2019-07-18T15:34:11Z' closed_time='2019-07-23T16:58:08Z'>
	<summary>non-gemm_driver extended_sgemm --&amp;gt; wrong results</summary>
	<description>
It is possible that extended_sgemm invoke cblas_sgemm or ref_gemm with
unsupported (integer/packed) formats, leading to test failures.
Incorrect extended_sgemm implementations can occur in 2 cases:

compile with USE_CBLAS --&gt; cblas_sgemm
or mayiuse(sse41) is false, so ref_gemm&lt;float&gt; is used.

A poor solution might be to fail primitive creation in one of the incompletely handled cases.
I would prefer that alternate code paths detect and handle the inappropriate extended_sgemm calls with a correct 'C' impl.  This could be via a non-JIT gemm_driver call, or maybe some appropriate ref_gemm&lt;T&gt; call or some other specialty reference impl.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;

mkl-dnn v1.0
&lt;denchmark-h:h3&gt;Steps to reproduce&lt;/denchmark-h&gt;

Either compiled with USE_CBLAS or modify extended_sgemm to push
everything through ref_gemm&lt;float&gt; instead of gemm_driver or run on some
very old x86 machine [I guess].
&lt;denchmark-h:h3&gt;Actual behavior&lt;/denchmark-h&gt;

Tests fail.  Wrong results frequently occur for 'Packed' [integer] formats when extended_sgemm chooses to invoke cblas_sgemm or ref_gemm&lt;float&gt; instead of gemm_driver
&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

Tests pass
Original [longer] outputs in &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/issues/415&gt;#415&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='kruus' date='2019-07-19T18:47:16Z'>
		Hi &lt;denchmark-link:https://github.com/kruus&gt;@kruus&lt;/denchmark-link&gt;
 .
These two issues are separate. The item 1. should be addressed as part of the &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/issues/514&gt;#514&lt;/denchmark-link&gt;
 .
Regarding item number 2, we should be returning unimplemented as we have absolutely no support for those as of now.
It can be fixed by applying the following patch:
diff --git a/src/cpu/gemm/f32/ref_gemm_f32.cpp b/src/cpu/gemm/f32/ref_gemm_f32.cpp
index 183486b..b103b15 100644
--- a/src/cpu/gemm/f32/ref_gemm_f32.cpp
+++ b/src/cpu/gemm/f32/ref_gemm_f32.cpp
@@ -185,6 +185,10 @@ mkldnn_status_t ref_gemm(
         const int *lda_, const data_t *B, const int *ldb_, const data_t *beta_,
         data_t *C, const int *ldc_, const data_t *bias) {

+    if (!( utils::one_of(*transa_, 'n', 'N', 't', 'T')
+           &amp;&amp; utils::one_of(*transb_, 'n', 'N', 't', 'T')))
+        return mkldnn_unimplemented;
+
     bool isTransA = (*transa_ == 'T' || *transa_ == 't');
     bool isTransB = (*transb_ == 'T' || *transb_ == 't');
     const int M = *M_, N = *N_, K = *K_;
diff --git a/src/cpu/gemm/s8x8s32/ref_gemm_s8x8s32.cpp b/src/cpu/gemm/s8x8s32/ref_gemm_s8x8s32.cpp
index ae3ca7f..9c53886 100644
--- a/src/cpu/gemm/s8x8s32/ref_gemm_s8x8s32.cpp
+++ b/src/cpu/gemm/s8x8s32/ref_gemm_s8x8s32.cpp
@@ -39,6 +39,10 @@ mkldnn_status_t ref_gemm_s8x8s32(const char *transa, const char *transb,
     if (*M == 0 || *N == 0 || *K == 0)
         return mkldnn_success;

+    if (!( utils::one_of(*transa, 'n', 'N', 't', 'T')
+           &amp;&amp; utils::one_of(*transb, 'n', 'N', 't', 'T')))
+        return mkldnn_unimplemented;
+
     bool OCisR = (*offsetc == 'R' || *offsetc == 'r');
     bool OCisC = (*offsetc == 'C' || *offsetc == 'c');
     bool AisN = (*transa == 'N' || *transa == 'n');

``

		</comment>
		<comment id='2' author='kruus' date='2019-07-19T20:34:20Z'>
		Still a tiny crack in USE_CBLAS case, after applying &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/issues/514&gt;#514&lt;/denchmark-link&gt;
 and this patch.

Tested with USE_CBLAS [and without SSE] so ref_gemm&lt;float&gt; is a backup method.
Only one test fails

&lt;denchmark-code&gt;45: [ RUN      ] TestGEMM_fp32/gemm_test.TestGEMM/19
45: [  SKIPPED ] CPU does not support non-zero offsets.
45: [       OK ] TestGEMM_fp32/gemm_test.TestGEMM/19 (0 ms)
45: [ RUN      ] TestGEMM_fp32/gemm_test.TestGEMM/20
45: [  SKIPPED ] CPU does not support non-zero offsets.
45: [       OK ] TestGEMM_fp32/gemm_test.TestGEMM/20 (0 ms)
45: [ RUN      ] TestGEMM_fp32/gemm_test.TestGEMM/21
45: /local/kruus/mkl-dnn/tests/gtests/test_gemm_common.hpp:445: Failure
45: e evaluates to 3.8084843158721924,
&lt;/denchmark-code&gt;

--&gt; 97% tests passed, 1 tests failed out of 37

Tested without USE_CBLAS and with ref_gemm always (gemm_driver disabled), test 45:../21+ are all UNIMPL:

&lt;denchmark-code&gt;45: [ RUN      ] TestGEMM_packed_fp32/gemm_test.TestGEMM/21
45: ref_gemm&lt;float&gt;(P,t;MNK=2000,2000,2000;alpha=1.000000,A@ld=2000,B@ld=2000,beta=0.000000,C@ld=2000,bias)
45: [  UNIMPL  ] Implementation not found
45: [       OK ] TestGEMM_packed_fp32/gemm_test.TestGEMM/21 (116 ms)
&lt;/denchmark-code&gt;

---&gt; "100% test passed, 0 tests failed out of 37"

Not sure what condition ref_gemm is catching that USE_CBLAS still needs to check.

		</comment>
		<comment id='3' author='kruus' date='2019-07-19T20:42:12Z'>
		Trying  instead of &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/issues/514&gt;#514&lt;/denchmark-link&gt;
 suggestion...
		</comment>
		<comment id='4' author='kruus' date='2019-07-19T20:48:58Z'>
		Isn't
!force_jit_nocopy_gemm &amp;&amp; !(packed_A || packed_B)
the same as
!(force_jit_nocopy_gemm || packed_A || packed_B)?
		</comment>
		<comment id='5' author='kruus' date='2019-07-19T20:51:12Z'>
		This should be completely equivalent:
!( A || B) &lt;-&gt; !A &amp;&amp; !B.
Here I suspect something else is going on.
		</comment>
		<comment id='6' author='kruus' date='2019-07-19T21:11:28Z'>
		duh, same.  I'm ready for the weekend.
&lt;denchmark-code&gt;...
45: [  FAILED  ] TestGEMM_fp32/gemm_test.TestGEMM/21, where GetParam() = 104-byte object &lt;6E-6E 00-00 00-00 00-00 D0-07 00-00 00-00 00-00 D0-07 00-00 00-00 00-00 D0-07 00-00 00-00 00-00 00-00 80-3F 00-00 00-00 D0-07 00-00 00-00 00-00 D0-07 00-00 00-00 00-00 D0-07 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00&gt; (617 ms)
45: [ RUN      ] TestGEMM_fp32/gemm_test.TestGEMM/22
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='kruus' date='2019-07-19T21:16:20Z'>
		So I ran the test and with the patches applied, it will end up with a call to cblas_sgemm (it will not fallback to ref_gemm) as inputs are not packed, and force_no_copy = false.
So here I suspect that the issue might be in the library you are using for cblas functions
		</comment>
		<comment id='8' author='kruus' date='2019-07-22T15:50:30Z'>
		Got identical wrong result from

Blas from intel-mkl-64bit-2018.2-046 and
"Fortran 77 reference implementation".

So I tried with export OMP_NUM_THREADS=1, and everything is correct.
Maybe it's yet another case of omp library mismatch on x86.  I'm going to use ref_gemm on x86, and only USE_CBLAS on my VE Aurora platform (only a single openmp available).
Your patches completely fix the packed-format bugs, &lt;denchmark-link:https://github.com/mgouicem&gt;@mgouicem&lt;/denchmark-link&gt;
.  Many thanks.
		</comment>
		<comment id='9' author='kruus' date='2019-07-22T17:09:21Z'>
		Glad to hear that the patches fixed your issues.
Yes it seems to be an issue with mixing OMP runtimes.
I build MKL-DNN with gcc 4.8.3. I ran it with MKL 2019.4 on an AVX2 system (Xeon E5 E5-2699) and OMP_NUM_THREADS=22 and it indeed fails. However, if I force load libiomp5 by using LD_PRELOAD=libiomp5.so the test passes.
If you can use MKL for cblas calls, you have 3 options to not face this omp runtime issue:

use clang compiler
explicitly link to libiomp5.so (using LD_PRELOAD for example)
set the MKL_THREADING_LAYER=GNU environment variable to make MKL use the GNU OMP runtime.

The two first options are preferred since libiomp generally provides better performance.
Hope this helps.
		</comment>
	</comments>
</bug>