<bug id='525' author='WilliamTambellini' open_date='2019-08-06T21:37:11Z' closed_time='2020-01-16T22:25:28Z'>
	<summary>inner product bad performance when 1 &amp;lt; M &amp;lt; K/4</summary>
	<description>
Hello
This is a call for review to check some strange performance for the inner product fwd when K=1024 and 1 &lt; M &lt; K/4, given

M = number of rows of src
K = N = number of rows/cols of the weights

Note : The perf is good for M = 1 and M &gt; K/4
GCC: 6.1.0
Eigen version: 3.3.90
Simd: AVX512, FMA, AVX2, AVX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
EIGEN_IDEAL_MAX_ALIGN_BYTES=64
EIGEN_MAX_ALIGN_BYTES=64
EIGEN_VECTORIZE_AVX2
EIGEN_VECTORIZE_FMA
EIGEN_VECTORIZE_AVX512
TopLevel cache size: 25344 KB
L1 cache size: 32 KB
L2 cache size: 1024 KB
L3 cache size: 25344 KB
Eigen::nbThreads: 1
_OPENMP: 201511
omp_get_num_threads: 1
omp_get_max_threads: 1
MKL-DNN version: 1.0.0 &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/01206f3fc3eb9355d6a1d05cbd054f232306113b&gt;01206f3&lt;/denchmark-link&gt;

inner product fwd: type=f repeat=600
M         K=N     ETensor      MKLDNN
1        1024         642         194
2        1024         759        1327 &lt;-
4        1024         950        1329 &lt;-
8        1024         965        1378 &lt;-
16        1024         976        1491 &lt;-
32        1024        1021        1682 &lt;-
64        1024        1611        2062 &lt;-
128        1024        2389        2838 &lt;-
256        1024        4594        4515
512        1024        8369        8030
1024        1024       16376       12998
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;



CPU make and model
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                16
On-line CPU(s) list:   0-15
Thread(s) per core:    2
Core(s) per socket:    8
Socket(s):             1
NUMA node(s):          1
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 85
Model name:            Intel(R) Xeon(R) Platinum 8124M CPU @ 3.00GHz
Stepping:              3
CPU MHz:               3000.000
BogoMIPS:              6000.00
Hypervisor vendor:     KVM
Virtualization type:   full
L1d cache:             32K
L1i cache:             32K
L2 cache:              1024K
L3 cache:              25344K
NUMA node0 CPU(s):     0-15
Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc aperfmperf tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single kaiser fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx avx512f rdseed adx smap clflushopt clwb avx512cd xsaveopt xsavec xgetbv1 ida arat pku


OS version (uname -a)
Linux awsc5 4.4.0-1088-aws #99-Ubuntu SMP Thu Jul 4 14:25:53 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux


Compiler version (gcc --version)
6.1


CMake version (cmake --version)
3.5.1


CMake command
cmake ..
-DCMAKE_BUILD_TYPE=RELEASE
-DCMAKE_INSTALL_PREFIX=install
-DMKLDNN_LIBRARY_TYPE=SHARED
-DMKLDNN_CPU_RUNTIME=OMP
-DMKLDNN_BUILD_TESTS=ON
-DMKLDNN_BUILD_EXAMPLES=ON
-DMKLDNN_ENABLE_JIT_PROFILING=OFF
-DMKLDNN_ARCH_OPT_FLAGS=""


CMake output log
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - not found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE
-- Try OpenMP C flag = [-fopenmp]
-- Performing Test OpenMP_FLAG_DETECTED
-- Performing Test OpenMP_FLAG_DETECTED - Success
-- Try OpenMP CXX flag = [-fopenmp]
-- Performing Test OpenMP_FLAG_DETECTED
-- Performing Test OpenMP_FLAG_DETECTED - Success
-- Found OpenMP: -fopenmp
-- GPU support is disabled
-- Could NOT find Doxygen (missing:  DOXYGEN_EXECUTABLE)
-- Found Git: /usr/bin/git (found version "2.7.4")
VTuneel Amplifier JIT profiling disabled
-- Configuring done
-- Generating done


git hash (git log -1 --format=%H)
01206f3


&lt;denchmark-h:h3&gt;Steps to reproduce&lt;/denchmark-h&gt;

Build and run the program there:
&lt;denchmark-link:https://gist.github.com/WilliamTambellini/8294f211800e16791d47f3cf59472a49&gt;https://gist.github.com/WilliamTambellini/8294f211800e16791d47f3cf59472a49&lt;/denchmark-link&gt;

g++ -std=c++11 -mavx512 -mfma -DEIGEN_NO_DEBUG -DNDEBUG -fopenmp -O3
-I eigen-eigen-9f48e814419e  -I $mkldir/include -L $mkldir/lib64 -l mkldnn
eigen_vs_mkldnn.cpp -o eigen_vs_mkldnn
OMP_NUM_THREADS=1 ./eigen_vs_mkldnn
&lt;denchmark-h:h3&gt;Actual behavior&lt;/denchmark-h&gt;

mkldnn slower than eigenTensor for 1 &lt; M &lt; K/4
&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

same speed (or faster)
Tks.
	</description>
	<comments>
		<comment id='1' author='WilliamTambellini' date='2019-08-08T16:13:26Z'>
		Adding &lt;denchmark-link:https://github.com/aaraujom&gt;@aaraujom&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='WilliamTambellini' date='2019-08-09T21:12:32Z'>
		Hi &lt;denchmark-link:https://github.com/WilliamTambellini&gt;@WilliamTambellini&lt;/denchmark-link&gt;
,
Thank you for reporting and submitting a reproducer. I was able to reproduce the issue with your instructions. It seems that we can improve performance by using a different GEMM algorithm for the sizes you are interested. Hopefully we can get this fixed for you soon in master branch.
		</comment>
		<comment id='3' author='WilliamTambellini' date='2019-08-09T21:48:28Z'>
		Thank you &lt;denchmark-link:https://github.com/aaraujom&gt;@aaraujom&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='WilliamTambellini' date='2020-01-13T19:54:57Z'>
		Hello &lt;denchmark-link:https://github.com/aaraujom&gt;@aaraujom&lt;/denchmark-link&gt;

Here is the speed of my benchmark when using DNNL 1.1 on AWS C5 :
OMP_NUM_THREADS=1 LD_LIBRARY_PATH=. ./eigen_vs_dnnl
GCC: 6.1.0
Eigen version: 3.3.90
Simd: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
EIGEN_IDEAL_MAX_ALIGN_BYTES=32
EIGEN_MAX_ALIGN_BYTES=32
EIGEN_VECTORIZE_AVX2
EIGEN_VECTORIZE_FMA
TopLevel cache size: 25344 KB
L1 cache size: 32 KB
L2 cache size: 1024 KB
L3 cache size: 25344 KB
Eigen::nbThreads: 1
_OPENMP: 201511
omp_get_num_threads: 1
omp_get_max_threads: 1
DNNL version: 1.1.1 &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/28f4c96d2626e36e7196eb53d9299f9b6bd70961&gt;28f4c96&lt;/denchmark-link&gt;

Gemm+add: type=f repeat=600
M         K=N     ETensor        DNNL
1         512          63          22
2         512          85         210
4         512         104         210
8         512         108         220
16         512         144         248
32         512         282         295
64         512         474         386
1        1024         318         166
2        1024         403        1305
4        1024         473        1311
8        1024         482        1338
16        1024         614        1439
32        1024        1117        1625
64        1024        1806        1997
1        2048        1495         696
2        2048        1808        5777
4        2048        2032        5793
8        2048        2091        5911
16        2048        2579        6296
32        2048        4610        7030
64        2048        7038        8526
Would you know if 1.2 is fixing that issue ?
Kind
WT.
		</comment>
		<comment id='5' author='WilliamTambellini' date='2020-01-14T18:02:50Z'>
		Hi William,
A fix is currently under code review.  It might not be a part of v1.2.  I will look into if it can be included and report back.
&lt;denchmark-link:https://github.com/intel/mkl-dnn/files/4060601/1483.diff.txt&gt;1483.diff.txt&lt;/denchmark-link&gt;

It is a small change in which kernel is chosen for the sequential case; a copy vs nocopy kernel.
Aaron
		</comment>
		<comment id='6' author='WilliamTambellini' date='2020-01-14T19:01:00Z'>
		ok thanks &lt;denchmark-link:https://github.com/aaraujom&gt;@aaraujom&lt;/denchmark-link&gt;

Trying on my side to move forward faster. TBC.
		</comment>
		<comment id='7' author='WilliamTambellini' date='2020-01-14T22:01:28Z'>
		Yes, &lt;denchmark-link:https://github.com/WilliamTambellini&gt;@WilliamTambellini&lt;/denchmark-link&gt;
 this change will be in v1.2
		</comment>
		<comment id='8' author='WilliamTambellini' date='2020-01-14T22:56:59Z'>
		Tks.
Using today's master WITHOUT the patch :
GCC: 6.1.0
Eigen version: 3.3.90
Simd: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
EIGEN_IDEAL_MAX_ALIGN_BYTES=32
EIGEN_MAX_ALIGN_BYTES=32
EIGEN_VECTORIZE_AVX2
EIGEN_VECTORIZE_FMA
TopLevel cache size: 25344 KB
L1 cache size: 32 KB
L2 cache size: 1024 KB
L3 cache size: 25344 KB
Eigen::nbThreads: 1
_OPENMP: 201511
omp_get_num_threads: 1
omp_get_max_threads: 1
DNNL version: 1.2.0 &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/7832294c6f81f897150762dfafb6de601fca93fc&gt;7832294&lt;/denchmark-link&gt;

Gemm+add: type=f repeat=600
M         K=N     ETensor        DNNL
1         512          66          24
2         512          85         208
4         512         104         208
8         512         107         215
16         512         146         243
32         512         297         291
64         512         485         385
128         512         917         575
256         512        1753         965
512         512        4413        1772
1024         512        7270        3714
1        1024         340         194
2        1024         430        1313
4        1024         495        1318
8        1024         505        1344
16        1024         635        1451
32        1024        1154        1638
64        1024        1851        2018
128        1024        3447        2801
256        1024        6627        4491
512        1024       13350        8018
1024        1024       27797       13616
1        2048        1771         846
2        2048        2188        5941
4        2048        2479        5971
8        2048        2484        6095
16        2048        3050        6502
32        2048        5143        7279
64        2048        7874        8831
128        2048       14434       12010
256        2048       26532       18397
512        2048       51551       33212
1024        2048      111513       54185
Patching and retesting ...
		</comment>
		<comment id='9' author='WilliamTambellini' date='2020-01-14T23:29:00Z'>
		The perf seems indeed better with the patch :
GCC: 6.1.0
Eigen version: 3.3.90
Simd: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
EIGEN_IDEAL_MAX_ALIGN_BYTES=32
EIGEN_MAX_ALIGN_BYTES=32
EIGEN_VECTORIZE_AVX2
EIGEN_VECTORIZE_FMA
TopLevel cache size: 25344 KB
L1 cache size: 32 KB
L2 cache size: 1024 KB
L3 cache size: 25344 KB
Eigen::nbThreads: 1
_OPENMP: 201511
omp_get_num_threads: 1
omp_get_max_threads: 1
DNNL version: 1.2.0 &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/7832294c6f81f897150762dfafb6de601fca93fc&gt;7832294&lt;/denchmark-link&gt;
 (with &lt;denchmark-link:https://github.com/aaraujom&gt;@aaraujom&lt;/denchmark-link&gt;
 patch)
Gemm+add: type=f repeat=600
M         K=N     ETensor        DNNL
1         512          68          27
2         512          88          86
4         512         108          88
8         512         108          94
16         512         149         121
32         512         290         172
64         512         484         271
128         512         923         469
256         512        1775         864
512         512        4535        1702
1024         512        7506        3487
1        1024         359         195
2        1024         438         539
4        1024         509         546
8        1024         519         578
16        1024         656         679
32        1024        1140         866
64        1024        1850        1252
128        1024        3511        2037
256        1024        6747        3693
512        1024       13582        7228
1024        1024       28542       13823
1        2048        1875         896
2        2048        2282        2903
4        2048        2584        2775
8        2048        2669        3035
16        2048        3146        3462
32        2048        5219        4456
64        2048        8049        6216
128        2048       14571        9467
256        2048       26776       15827
512        2048       52436       28982
1024        2048      113111       54041
Let me rerun the full unittest suite...
		</comment>
		<comment id='10' author='WilliamTambellini' date='2020-01-14T23:50:21Z'>
		All unit tests passed using:

GCC 6.1
-DDNNL_CPU_RUNTIME=OMP
-DDNNL_ARCH_OPT_FLAGS=""

Any thing you d like me to do to test further this change ?
Kind
		</comment>
		<comment id='11' author='WilliamTambellini' date='2020-01-15T00:03:51Z'>
		Nothing further.  Thank you for confirming the fix.
		</comment>
		<comment id='12' author='WilliamTambellini' date='2020-01-16T22:25:28Z'>
		The fix is promoted to master (&lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/ae61165d68ee73ab6a57380ba7c33bc6cdece0e5&gt;ae61165&lt;/denchmark-link&gt;
) and rls-v1.2 (&lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/cf7edb6575b255a2fee54d99d0f2eef0e761939a&gt;cf7edb6&lt;/denchmark-link&gt;
).
		</comment>
		<comment id='13' author='WilliamTambellini' date='2020-01-16T22:30:51Z'>
		Thank you gentlemen.
		</comment>
	</comments>
</bug>