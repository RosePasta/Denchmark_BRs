<bug id='598' author='pinzhenx' open_date='2019-11-20T08:06:57Z' closed_time='2019-12-04T15:54:15Z'>
	<summary>Int8 Pooling not preserving NHWC format</summary>
	<description>
In MKLDNN 0.x, given that the src format is NHWC, the queried dst format would be NHWC as well. However, in DNNL 1.x, the queried dst format becomes NCHW.
&lt;denchmark-code&gt;dnnl_verbose,exec,cpu,pooling,ref:any,forward_inference,src_u8::blocked:acbd:f0 dst_u8::blocked:abcd:f0 ws_undef::undef::f0,,alg:pooling_max,mb1ic1_ih7oh5kh3sh1ph0_iw7ow5kw3sw1pw0,0.0290527
&lt;/denchmark-code&gt;

Even though I have a way of fixing  format, it goes against the design philosophy of DNNL, and it could probably lead to serious performance issue (&lt;denchmark-link:https://github.com/oneapi-src/oneDNN/issues/588&gt;#588&lt;/denchmark-link&gt;
).
Consider this scenario, if this pool is followed by a conv, this requires an extra reorder before the next quantized conv that requires an NHWC input, but in the old MKLDNN, this reorder is not necessary.
So I'm wondering whether it is an intentional change in this behavior.
	</description>
	<comments>
		<comment id='1' author='pinzhenx' date='2019-11-20T16:11:14Z'>
		Hi &lt;denchmark-link:https://github.com/pinzhenx&gt;@pinzhenx&lt;/denchmark-link&gt;
,
No, this is not the intentional behavior... Looks like a bug.
I would expect the library to behave similarly to MKL-DNN 0.x version.
Do you happen to have a standalone reproducer?
		</comment>
		<comment id='2' author='pinzhenx' date='2019-11-20T18:27:34Z'>
		bench_string="benchdnn --pool --tag=acdb --dir=FWD_I --cfg=u8 --alg=MAX ";
${bench_string} mb1ic1_ih7oh5kh3sh1ph0_iw7ow5kw3sw1pw0  -- this one is wrong.
dnnl_verbose,exec,cpu,pooling,ref:any,forward_inference,src_u8::blocked:acbd:f0 dst_u8::blockedðŸ”¡f0 ws_undef::undef::f0,,alg:pooling_max,mb1ic1_ih7oh5kh3sh1ph0_iw7ow5kw3sw1pw0
${bench_string} mb1ic2_ih7oh5kh3sh1ph0_iw7ow5kw3sw1pw0  -- this one is correct.
dnnl_verbose,exec,cpu,pooling,jit_int:avx2,forward_inference,src_u8::blocked:acdb:f0 dst_u8::blocked:acdb:f0 ws_undef::undef::f0,,alg:pooling_max,mb1ic2_ih7oh5kh3sh1ph0_iw7ow5kw3sw1pw0
The problem is memory_desc_init_by_blocking_desc() doesn't distinguish well acdb format from acbd in case when channels = 1, thus, strides for b and d are same.
It's also observed by verbose itself: src_u8::blocked:acbd:f0. So, indeed, there's a problem.
		</comment>
	</comments>
</bug>