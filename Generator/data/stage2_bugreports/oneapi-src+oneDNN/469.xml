<bug id='469' author='ChipKerchner' open_date='2019-04-30T18:02:38Z' closed_time='2019-05-03T04:38:42Z'>
	<summary>Broken unit tests for older and non-Intel systems</summary>
	<description>
I found 4 unit tests that are broken on older (tested on a Nehalem system) and non-Intel (Power9) systems.
tests/gtests/test_sum --gtest_filter=TestSum_CPU/sum_test_float.TestsSum_CPU/15
tests/gtests/test_sum --gtest_filter=TestSum_CPU/sum_test_float_omit_output.TestsSum_CPU/15
tests/gtests/test_reorder --gtest_filter=Data_CPU/reorder_simple_test_f32_f32.TestsReorder/12
tests/gtests/test_reorder --gtest_filter=Data_CPU/reorder_simple_test_f32_f32.TestsReorder/13
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Older HW:
Architecture:        x86_64
CPU op-mode(s):      32-bit, 64-bit
Byte Order:          Little Endian
CPU(s):              16
On-line CPU(s) list: 0-15
Thread(s) per core:  1
Core(s) per socket:  4
Socket(s):           4
NUMA node(s):        1
Vendor ID:           GenuineIntel
CPU family:          6
Model:               15
Model name:          Genuine Intel(R) CPU                  @ 2.93GHz
Stepping:            11
CPU MHz:             1642.102
BogoMIPS:            5863.95
Virtualization:      VT-x
L1d cache:           32K
L1i cache:           32K
L2 cache:            4096K
NUMA node0 CPU(s):   0-15
Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good nopl cpuid aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca lahf_lm pti tpr_shadow vnmi flexpriority dtherm
Linux xxxxxx 4.15.10-300.fc27.x86_64 &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/issues/1&gt;#1&lt;/denchmark-link&gt;
 SMP Thu Mar 15 17:13:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
gcc (GCC) 7.3.1 20180303 (Red Hat 7.3.1-5)
cmake version 3.11.2
MKLROOT=
git log -1 --format=%H
&lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/425c2bfbb5aa40ae671dfe20a8c9083285385888&gt;425c2bf&lt;/denchmark-link&gt;

Non Intel-HW:
Architecture:        ppc64le
Byte Order:          Little Endian
CPU(s):              160
On-line CPU(s) list: 0-159
Thread(s) per core:  4
Core(s) per socket:  20
Socket(s):           2
NUMA node(s):        2
Model:               2.2 (pvr 004e 1202)
Model name:          POWER9 (raw), altivec supported
CPU max MHz:         3800.0000
CPU min MHz:         2300.0000
L1d cache:           32K
L1i cache:           32K
L2 cache:            512K
L3 cache:            10240K
NUMA node0 CPU(s):   0-79
NUMA node8 CPU(s):   80-159
Linux xxxxxx 4.15.0-46-generic &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/issues/49&gt;#49&lt;/denchmark-link&gt;
-Ubuntu SMP Wed Feb 6 09:32:48 UTC 2019 ppc64le ppc64le
ppc64le GNU/Linux
cmake version 3.10.2
gcc (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0
MKLROOT=
git log -1 --format=%H
&lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/425c2bfbb5aa40ae671dfe20a8c9083285385888&gt;425c2bf&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='ChipKerchner' date='2019-04-30T23:59:41Z'>
		We validate on Nehalem systems and there's currently no failures in validation. The one you are using seems to be something older, as it does not have sse4_1 flag. Might be a bug in reference code.
		</comment>
		<comment id='2' author='ChipKerchner' date='2019-05-01T00:25:24Z'>
		I can reproduce it. The bug seems indeed happen in simple_reorder... I will take a look on that.
		</comment>
		<comment id='3' author='ChipKerchner' date='2019-05-01T14:14:58Z'>
		
We validate on Nehalem systems and there's currently no failures in validation. The one you are using seems to be something older, as it does not have sse4_1 flag. Might be a bug in reference code.

Yes, it looks like it is a Merom system.  Someone must have labeled it wrong in the server list.
		</comment>
		<comment id='4' author='ChipKerchner' date='2019-05-01T15:10:44Z'>
		Yep, reproduced on a Merom.
		</comment>
		<comment id='5' author='ChipKerchner' date='2019-05-01T16:49:32Z'>
		&lt;denchmark-link:https://github.com/ChipKerchner&gt;@ChipKerchner&lt;/denchmark-link&gt;
,
Thanks for reporting the issue. I seem to fix the issue.
If you have some free time could you please apply the patch and validate on your side?
Once the full internal validation passes I will promote it to master.
diff --git a/src/cpu/simple_reorder.hpp b/src/cpu/simple_reorder.hpp
index ebca9d321..6a653e7d0 100644
--- a/src/cpu/simple_reorder.hpp
+++ b/src/cpu/simple_reorder.hpp
@@ -416,6 +416,9 @@ typename utils::enable_if&lt;false
         const auto &amp;pdims = order_keep ? output_d.padded_dims()
                                        : input_d.padded_dims();

+        const auto &amp;nchw8c_d = order_keep ? input_d : output_d;
+        const auto stride_C_in_8c = nchw8c_d.blocking_desc().strides[1];
+
         const int C = dims[1];
         const int D = is_3d ? dims[2] : 1;
         const int H = is_1d ? 1 : dims[2 + is_3d];
@@ -426,8 +429,10 @@ typename utils::enable_if&lt;false
             const int nb = (block_16 - 1) / blksize_8 + 1;
             if (alpha == 1.0 &amp;&amp; beta == 0.0) {
                 for (int b = 0; b &lt; nb; ++b) {
-                    const ptrdiff_t i_off = order_keep ? b : b * blksize_8;
-                    const ptrdiff_t o_off = order_keep ? b * blksize_8 : b;
+                    const ptrdiff_t i_off = b
+                        * (order_keep ? stride_C_in_8c : blksize_8);
+                    const ptrdiff_t o_off = b
+                        * (order_keep ? blksize_8 : stride_C_in_8c);
                     const int block_8 = nstl::min(blksize_8,
                                                   block_16 - b * blksize_8);
                     for (int c = 0; c &lt; block_8; ++c) {
@@ -437,8 +442,10 @@ typename utils::enable_if&lt;false
                 }
             } else {
                 for (int b = 0; b &lt; nb; ++b) {
-                    const ptrdiff_t i_off = order_keep ? b : b * blksize_8;
-                    const ptrdiff_t o_off = order_keep ? b * blksize_8 : b;
+                    const ptrdiff_t i_off = b
+                        * (order_keep ? stride_C_in_8c : blksize_8);
+                    const ptrdiff_t o_off = b
+                        * (order_keep ? blksize_8 : stride_C_in_8c);
                     const int block_8 = nstl::min(blksize_8,
                                                   block_16 - b * blksize_8);
                     for (int c = 0; c &lt; block_8; ++c) {
		</comment>
		<comment id='6' author='ChipKerchner' date='2019-05-01T17:45:52Z'>
		All the unit tests pass on the Merom and Power9 systems with the above patch.
Thanks for your quick response!
		</comment>
		<comment id='7' author='ChipKerchner' date='2019-05-01T17:46:56Z'>
		Thank you very much for a quick turnaround!
I will promote the fix soon.
		</comment>
		<comment id='8' author='ChipKerchner' date='2019-05-01T17:57:55Z'>
		One thing I did notice is the Merom system only had 45 unit tests vs 46 in the Power 9 and advanced x86_64 system.
It doesn't run the unit test - test_rnn_forward
I can run it manually but ctest doesn't include it in its list.
		</comment>
		<comment id='9' author='ChipKerchner' date='2019-05-01T18:57:20Z'>
		This is really weird. I don't see any reason why the test should disappear from the cmake/ctest system...
		</comment>
		<comment id='10' author='ChipKerchner' date='2019-05-01T20:12:09Z'>
		That's STRANGE!  When I run 'scripts/prepare_mkl,sh', it no longer produces 'test_rnn_forward'.  Without it, it does produce it (from a clean clone).
		</comment>
		<comment id='11' author='ChipKerchner' date='2019-05-01T20:37:21Z'>
		oK, I've figured that out. The reason is &lt;denchmark-link:https://github.com/intel/mkl-dnn/blob/master/tests/gtests/CMakeLists.txt#L74-L79&gt;these lines&lt;/denchmark-link&gt;
.
But they are gone in the latest internal master. Once the recent changes would be promoted to github the number of test would be constant no matter whether you build Intel MKL-DNN w/ Intel MKL or not.
So no worries :)
		</comment>
	</comments>
</bug>