<bug id='707' author='andrew-wja' open_date='2020-04-18T10:10:46Z' closed_time='2020-04-21T20:53:42Z'>
	<summary>Many releases do not build</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

onednn/dnnl/mkl-dnn versions 0.X.Y are used by many projects, including the Intel Caffe distribution. However, the vast majority of these tagged releases are broken, and do not build. It appears that someone enabled warnings-as-errors by default long ago, and since every release I have tried on the 0.17, 0.18, 0.19 and 0.20 branches has at least one warning during build, there are no releases for those versions which actually can be built!
&lt;denchmark-h:h1&gt;Version&lt;/denchmark-h&gt;

v0.19 &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/41bee20d7eb4a67feeeeb8d597b3598994eb1959&gt;41bee20&lt;/denchmark-link&gt;

v0.18.1 &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/7de7e5d02bf687f971e7668963649728356e0c20&gt;7de7e5d&lt;/denchmark-link&gt;

v0.18 &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/863ff6e7042cec7d2e29897fe9f0872e0888b0fc&gt;863ff6e&lt;/denchmark-link&gt;

v0.17.{4,3,2,1}
etc.
&lt;denchmark-h:h1&gt;Environment&lt;/denchmark-h&gt;

n/a
&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;

Just download any of the relevant release archives and run the build script with default options
&lt;denchmark-h:h1&gt;Observed behavior&lt;/denchmark-h&gt;

None of these releases build because they have warnings, and -Werror is turned on. For some of them, there is just one single trivial warning that is causing the build to be broken!
&lt;denchmark-h:h1&gt;Expected behavior&lt;/denchmark-h&gt;

Released archives should build if the default build options are used. Otherwise, they are not functional releases.
Is it possible to fix this issue by disabling -Werror in release archives? There is no point in having "releases" which do not build due to a misconfiguration of the build system. Many of these releases work just fine if -Werror is disabled, but that requires the build systems of many downstream pieces of software to be changed.
	</description>
	<comments>
		<comment id='1' author='andrew-wja' date='2020-04-18T10:21:04Z'>
		Just an example, trying to build &lt;denchmark-link:https://github.com/intel/mkl-dnn/releases/download/v0.17-rc/mklml_lnx_2019.0.1.20180928.tgz&gt;https://github.com/intel/mkl-dnn/releases/download/v0.17-rc/mklml_lnx_2019.0.1.20180928.tgz&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;In file included from /usr/include/string.h:495,
                 from /home/andrew/.cache/yay/intel-caffe-git/src/intel-caffe/external/mkldnn/src/src/common/utils.cpp:17:
In function ‘char* strncpy(char*, const char*, size_t)’,
    inlined from ‘int mkldnn::impl::mkldnn_getenv(char*, const char*, int)’ at /home/andrew/.cache/yay/intel-caffe-git/src/intel-caffe/external/mkldnn/src/src/common/utils.cpp:49:24:
/usr/include/bits/string_fortified.h:106:34: error: ‘char* __builtin_strncpy(char*, const char*, long unsigned int)’ output truncated before terminating nul copying as many bytes from a string as its length [-Werror=stringop-truncation]
  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
      |          ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/andrew/.cache/yay/intel-caffe-git/src/intel-caffe/external/mkldnn/src/src/common/utils.cpp: In function ‘int mkldnn::impl::mkldnn_getenv(char*, const char*, int)’:
/home/andrew/.cache/yay/intel-caffe-git/src/intel-caffe/external/mkldnn/src/src/common/utils.cpp:45:34: note: length computed here
   45 |             value_length = strlen(buffer);
      |                            ~~~~~~^~~~~~~~
In file included from /usr/include/string.h:495,
                 from /home/andrew/.cache/yay/intel-caffe-git/src/intel-caffe/external/mkldnn/src/src/common/utils.cpp:17:
In function ‘char* strncpy(char*, const char*, size_t)’,
    inlined from ‘int mkldnn::impl::mkldnn_getenv(char*, const char*, int)’ at /home/andrew/.cache/yay/intel-caffe-git/src/intel-caffe/external/mkldnn/src/src/common/utils.cpp:49:24,
    inlined from ‘bool mkldnn::impl::mkldnn_jit_dump()’ at /home/andrew/.cache/yay/intel-caffe-git/src/intel-caffe/external/mkldnn/src/src/common/utils.cpp:68:26:
/usr/include/bits/string_fortified.h:106:34: error: ‘char* __builtin___strncpy_chk(char*, const char*, long unsigned int, long unsigned int)’ output truncated before terminating nul copying as many bytes from a string as its length [-Werror=stringop-truncation]
  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
      |          ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/andrew/.cache/yay/intel-caffe-git/src/intel-caffe/external/mkldnn/src/src/common/utils.cpp: In function ‘bool mkldnn::impl::mkldnn_jit_dump()’:
/home/andrew/.cache/yay/intel-caffe-git/src/intel-caffe/external/mkldnn/src/src/common/utils.cpp:45:34: note: length computed here
   45 |             value_length = strlen(buffer);
      |                            ~~~~~~^~~~~~~~
cc1plus: all warnings being treated as errors
&lt;/denchmark-code&gt;

This same behaviour is observed for all 0.17.X, 0.18.X, 0.19.X release archives, just with slightly different warnings.
		</comment>
		<comment id='2' author='andrew-wja' date='2020-04-19T23:43:21Z'>
		Thanks for the report. It is unfortunate that packages do not build. I can retroactively disable the -Werror in the old branches, but I cannot do this for releases because they are tied to a hash and re-tagging releases does not seem like a particularly good idea since it also may break things.
Additionally, IntelCaffe uses a particular dnnl commit (&lt;denchmark-link:https://github.com/intel/caffe/blob/master/mkldnn.commit&gt;https://github.com/intel/caffe/blob/master/mkldnn.commit&lt;/denchmark-link&gt;
) and thus won't be affected at all. Hence, package mainteiners (AUR?) need to work around this.
		</comment>
		<comment id='3' author='andrew-wja' date='2020-04-20T08:16:41Z'>
		Thanks for the reply! Sure, it is straightforward to work around the issue on the maintainer side, for example, I can add a line to the package build that replaces the contents of mkldnn.commit with rls-v0.19, which is where that hash should be pointing (development on Intel Caffe seems to have stopped).
However, the bigger issue is that if I git checkout rls-v0.19 in oneDNN, it doesn't build!
Modifying the release tarballs would indeed be a bit dangerous. Would it be possible to add a commit to the top of the rls-vY.XX branches disabling -Werror though?
		</comment>
		<comment id='4' author='andrew-wja' date='2020-04-20T17:29:13Z'>
		
However, the bigger issue is that if I git checkout rls-v0.19 in oneDNN, it doesn't build!

I need more info. Works for me with gcc-9.1 and gcc-9.3.

Would it be possible to add a commit to the top of the rls-vY.XX branches disabling -Werror though?

Yes, I'll 'fix' everything dating back to 0.17. The warning above is actually a bug that was fixed in rls-v0.19, so you already can go ahead and fix the hash in intel-caffe to point to &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/027de7603662a569366e15132ac80298902b96b8&gt;027de76&lt;/denchmark-link&gt;
. The fix just have not been backported far enough...
		</comment>
		<comment id='5' author='andrew-wja' date='2020-04-21T09:52:44Z'>
		

However, the bigger issue is that if I git checkout rls-v0.19 in oneDNN, it doesn't build!

I need more info. Works for me with gcc-9.1 and gcc-9.3.

Would it be possible to add a commit to the top of the rls-vY.XX branches disabling -Werror though?

Yes, I'll 'fix' everything dating back to 0.17. The warning above is actually a bug that was fixed in rls-v0.19, so you already can go ahead and fix the hash in intel-caffe to point to 027de76. The fix just have not been backported far enough...

Apologies, I mistyped: the rls-v0.19 branch specifically  build correctly. I have managed to get Intel Caffe to build and run again against rls-v0.19 with only minor changes (see &lt;denchmark-link:https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=intel-caffe-git&gt;https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=intel-caffe-git&lt;/denchmark-link&gt;
)
Since rls-v0.19 has the fix, the issue is fixed-for-me at this point, so feel free to close this issue when you need to!
		</comment>
		<comment id='6' author='andrew-wja' date='2020-04-21T20:53:42Z'>
		Fixed
		</comment>
	</comments>
</bug>