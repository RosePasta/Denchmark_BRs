<bug id='143' author='martin-laurent' open_date='2018-06-21T14:48:17Z' closed_time='2018-06-22T19:12:11Z'>
	<summary>Feature transformations order lost after filtering on a MultiFeatureSpec</summary>
	<description>
We have noticed something strange when using the filter method of the MultiFeatureSpec: we are losing the order of the features as they were defined in the original FeatureSpec objects. We had a part of our pipeline that was actually refering explicitely to the feature number 0 and the feature number 2 of a resulting SparseVector:
&lt;denchmark-code&gt;val featureSpecs: FeatureSpec[AllFeatures] = FeatureSpec.of[AllFeatures]
    // ... Many feature transformations

val labelSpecs: FeatureSpec[AllFeatures] = FeatureSpec.of[AllFeatures]
    .optional(i =&gt; i.map(_.weight))(Identity("weight"))
    .optional(i =&gt; i.map(_.label))(Identity("label"))

val featureExtractor = MultiFeatureSpec(labelSpecs, featureSpecs)
           .filter{ f =&gt;
            includedFeaturesWithLabels.contains(f.transformer.name)
          }
          .extract(rawFeatures)

def toTFTrainingExample(data: Seq[SparseVector[Float]]): Example = {
    // data is the list of the featurized raw features in the order of the FeatureSpec given
    // to multiSpecs
    val labels = data(0).data
    val features: SparseVector[Float] = data(1)
    val label = labels.headOption
    val weight = labels.length match {
      case 2 =&gt; Some(labels(1))
      case 1 =&gt; Some(1f)
      case _ =&gt; None
    }
    TensorFlowType[TrainingExample].toExample(
      TrainingExample(
        features.index.toList,
        features.data.toList,
        label,
        weight
      ))
}
&lt;/denchmark-code&gt;

But when the filtering is done, it seems the  are moved to a HashMap (losing the order at this point: &lt;denchmark-link:https://github.com/spotify/featran/blob/master/core/src/main/scala/com/spotify/featran/MultiFeatureSpec.scala#L72-L76&gt;https://github.com/spotify/featran/blob/master/core/src/main/scala/com/spotify/featran/MultiFeatureSpec.scala#L72-L76&lt;/denchmark-link&gt;
 then converted back to arrays.
That means we cannot assume the order of the features in the resulting SparseVector.
This looks like an unwanted behavior and definitely unexpected from the user point of view.
	</description>
	<comments>
		<comment id='1' author='martin-laurent' date='2018-06-22T18:30:40Z'>
		Should be an easy fix by using a LinkedHashMap.
		</comment>
	</comments>
</bug>