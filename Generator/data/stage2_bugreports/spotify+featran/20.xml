<bug id='20' author='slhansen' open_date='2017-07-24T13:41:45Z' closed_time='2017-07-27T17:43:35Z'>
	<summary>one hot encoder for large N</summary>
	<description>
The one hot encoder takes a long time to run when the number of tokens is large. I believe the problem lies in the fact that the current implementation iterates over each element in the dictionary:
&lt;denchmark-link:https://github.com/spotify/featran/blob/master/core/src/main/scala/com/spotify/featran/transformers/OneHotEncoder.scala#L45&gt;https://github.com/spotify/featran/blob/master/core/src/main/scala/com/spotify/featran/transformers/OneHotEncoder.scala#L45&lt;/denchmark-link&gt;

I tried writing an implementation that uses a hash map instead of a list to store the tokens (plus their index), but it is still necessary to "inflate" the feature with the empty elements.
&lt;denchmark-link:https://github.com/slhansen/featran/blob/master/core/src/main/scala/com/spotify/featran/transformers/OneHotEncoder.scala#L57-#L68&gt;https://github.com/slhansen/featran/blob/master/core/src/main/scala/com/spotify/featran/transformers/OneHotEncoder.scala#L57-#L68&lt;/denchmark-link&gt;

Since we can assume that only one element will be added it would be preferable to have the default be an empty feature vector and just add one element to it given the index.
	</description>
	<comments>
		<comment id='1' author='slhansen' date='2017-07-24T13:45:26Z'>
		&lt;denchmark-link:https://github.com/nevillelyh&gt;@nevillelyh&lt;/denchmark-link&gt;
 ^
		</comment>
		<comment id='2' author='slhansen' date='2017-07-24T15:06:36Z'>
		Makes sense, in the skip function you can already specify N.  So we could be smarter about overriding this in the implementation functions as to not loop over the empty elements.
So we could find the index into the one hot encoding list, skip up that, fill in the zero, then skip to the end.
		</comment>
		<comment id='3' author='slhansen' date='2017-07-24T17:20:22Z'>
		&lt;denchmark-link:https://github.com/richwhitjr&gt;@richwhitjr&lt;/denchmark-link&gt;
 I tried the approach of making use of the the skip function n-1 times (see second link in original comment) but it is still slow. My use case is for encoding user IDs so n is ~10^7.
		</comment>
		<comment id='4' author='slhansen' date='2017-07-25T00:52:08Z'>
		I think the issue here is that the subclasses don't implement skip(n) in an efficient way.  It may make sense to implement it in each subclass as needed for performance.  Right now with the default implementation I believe it is doing O(n) still even with the skipping.
&lt;denchmark-link:https://github.com/spotify/featran/blob/master/core/src/main/scala/com/spotify/featran/FeatureBuilder.scala#L43&gt;https://github.com/spotify/featran/blob/master/core/src/main/scala/com/spotify/featran/FeatureBuilder.scala#L43&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='slhansen' date='2017-07-26T18:06:03Z'>
		Does either of you wanna submit a PR? Otherwise we can look into it.
		</comment>
	</comments>
</bug>