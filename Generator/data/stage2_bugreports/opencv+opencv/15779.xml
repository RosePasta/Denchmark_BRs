<bug id='15779' author='oleg-alexandrov' open_date='2019-10-25T20:21:26Z' closed_time='2019-11-04T13:30:00Z'>
	<summary>Bug in stereo_match.cpp</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; ❔
Operating System / Platform =&gt; ❔
Compiler =&gt; ❔

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

The stereo_match.cpp code (&lt;denchmark-link:https://github.com/opencv/opencv/blob/master/samples/cpp/stereo_match.cpp&gt;https://github.com/opencv/opencv/blob/master/samples/cpp/stereo_match.cpp&lt;/denchmark-link&gt;
) has a scaling issue that took me 2 days to track down. The computed disparity is a signed int16, and is scaled by a factor of 16 compared to the true disparity, as per the documentation. The disparity thus must be converted to float and divided by 16.0 before invoking reprojectImageTo3D(). As it is now, since this division is not done, the result of reprojectImageTo3D() is wrong, as is at 1/16-the the scale.
Suggested fix:
&lt;denchmark-code&gt;Mat float_disp;
disp.convertTo(float_disp, CV_32F, 1.0f/16.0f);
reprojectImageTo3D(float_disp, xyz, Q, true);
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

	</description>
	<comments>
		<comment id='1' author='oleg-alexandrov' date='2019-10-28T15:42:59Z'>
		Investigation notes:



Previous &lt;denchmark-link:https://github.com/opencv/opencv/blame/4.1.2/modules/calib3d/include/opencv2/calib3d.hpp#L2378-L2407&gt;reprojectImageTo3D()&lt;/denchmark-link&gt;
 documentation note about 16-bit has been added in &lt;denchmark-link:https://github.com/opencv/opencv/pull/5449&gt;#5449&lt;/denchmark-link&gt;
:

If 16-bit signed format is used, the values are assumed to have no
fractional bits.




 and  are both implements &lt;denchmark-link:https://github.com/opencv/opencv/blame/4.1.2/modules/calib3d/include/opencv2/calib3d.hpp#L2648&gt;StereoMatcher&lt;/denchmark-link&gt;
  algorithm with the following documentation:

Some algorithms, like StereoBM or StereoSGBM compute 16-bit fixed-point disparity map (where each disparity value has 4 fractional bits), whereas other algorithms output 32-bit floating-point disparity map.




There is function &lt;denchmark-link:https://github.com/opencv/opencv/blame/4.1.2/modules/calib3d/include/opencv2/calib3d.hpp#L2352-L2366&gt;filterSpeckles()&lt;/denchmark-link&gt;
: note about  parameter:

Note that since StereoBM, StereoSGBM and may be other algorithms return a fixed-point disparity map, where disparity values are multiplied by 16, this scale factor should be taken into account when specifying this parameter value"




One more related function &lt;denchmark-link:https://github.com/opencv/opencv/blame/4.1.2/modules/calib3d/include/opencv2/calib3d.hpp#L2374&gt;validateDisparity()&lt;/denchmark-link&gt;
 has no documentation about 16-bit handling (but disparity are &lt;denchmark-link:https://github.com/opencv/opencv/blame/4.1.2/modules/calib3d/src/stereosgbm.cpp#L2472&gt;divided by its implementation&lt;/denchmark-link&gt;
).



stereo module from opencv_contrib uses 4-bit fractional part in their algorithms too.



StereoBM may provide 32S output (&lt;denchmark-link:https://github.com/opencv/opencv/blame/4.1.2/modules/calib3d/src/stereobm.cpp#L279&gt;8-bit fraction part&lt;/denchmark-link&gt;
, see &lt;denchmark-link:https://github.com/opencv/opencv/pull/6959&gt;#6959&lt;/denchmark-link&gt;
)
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

So only reprojectImageTo3D() has consistency conflict with 16S (and obviously 32S) disparity handling. Also I don't see users for 8U disparity maps.
		</comment>
		<comment id='2' author='oleg-alexandrov' date='2019-10-28T16:20:33Z'>
		

reprojectImageTo3D from cudastereo module assumes 16S image have no fractional bits.


8U disparity is used in the sample in opencv_contrib/stereo module


		</comment>
		<comment id='3' author='oleg-alexandrov' date='2019-10-31T10:28:16Z'>
		Well, lets keep current behavior of reprojectImageTo3D().
(scaled 16S input can't be passed here, so user should pre-scale input and convert it into 32F)
		</comment>
	</comments>
</bug>