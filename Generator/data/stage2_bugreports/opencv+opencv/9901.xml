<bug id='9901' author='thewoz' open_date='2017-10-21T17:43:49Z' closed_time='2019-04-12T10:56:11Z'>
	<summary>waitKey() fail to capturing arrow key</summary>
	<description>
&lt;denchmark-h:h5&gt;System information&lt;/denchmark-h&gt;


OpenCV =&gt; 3.3.0
Operating System / Platform =&gt; macOS 10.12.6 (Sierra)
Compiler =&gt; Xcode 9.0.1
QT =&gt; 5.9.2

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

waitKey() fail to capturing arrow keys.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Build and run the following code:
&lt;denchmark-code&gt;#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;

#include &lt;opencv2/opencv.hpp&gt;

 int main (int argc, char * const argv[]) {

      cv::namedWindow("window");

      cv::Mat image(320, 240, CV_8UC3, cv::Scalar(0,0,0));

      cv::imshow("window", image);

      while(1){

           int key = cv::waitKey(0);
    
           printf("DEGUG pressed key %d (%c)\n", key, key);

    }

}
&lt;/denchmark-code&gt;

Press some random keys with the window focused and not. At a certain point the arrow keys are no more capturing. It's like a random bug so sometimes the above procedure has to be executed several times.
	</description>
	<comments>
		<comment id='1' author='thewoz' date='2017-10-21T18:56:39Z'>
		Try cv::waitKeyEx() instead, but expect that such key-codes are not platform independent at all.
		</comment>
		<comment id='2' author='thewoz' date='2017-10-21T21:19:34Z'>
		I've already tried using cv::waitKeyEx function.
But when I press the arrow key the program remains locked on the waitKeyEx function.
		</comment>
		<comment id='3' author='thewoz' date='2017-10-22T07:15:20Z'>
		
QT =&gt; 5.9.2

Try to check build without QT.
Please dump build configuration about GUI (cv::getBuildInformation()):
&lt;denchmark-code&gt;--   GUI: 
--     QT:                          NO
--     Cocoa:                       YES
--     OpenGL support:              NO
--     VTK support:                 YES (ver 8.0.0)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='thewoz' date='2017-10-22T10:58:15Z'>
		My build configuration about GUI are:
&lt;denchmark-code&gt;GUI: 
QT 5.x:                      YES (ver 5.9.2)
QT OpenGL support:           YES (Qt5::OpenGL 5.9.2)
OpenGL support:              YES (/System/Library/Frameworks/OpenGL.framework)
VTK support:                 NO
&lt;/denchmark-code&gt;

I also try with QT 5.8/5.7/5.6.3/5.1.1 and I have the same behaviour.
If I build without QT everything works.
		</comment>
		<comment id='5' author='thewoz' date='2017-10-24T21:40:16Z'>
		What I can do about this?
		</comment>
		<comment id='6' author='thewoz' date='2017-10-24T22:54:33Z'>
		Thanks for update.
Looks like there is already &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.3.1/modules/highgui/src/window_QT.cpp#L1626&gt;some workaround&lt;/denchmark-link&gt;
 for "arrow keys", but looks like it doesn't work well.
Could you try to debug &lt;denchmark-link:https://github.com/opencv/opencv/blame/3.3.1/modules/highgui/src/window_QT.cpp#L2132&gt;this part of code&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='7' author='thewoz' date='2017-10-25T07:07:36Z'>
		ok I try
		</comment>
		<comment id='8' author='thewoz' date='2017-12-07T03:11:06Z'>
		Below is a temporary work around.
&lt;denchmark-code&gt;#ifndef _WIN32
int myWaitKey(int wait) {
    int c = cv::waitKey(wait);
    return c;
}
#pragma message("linux..")
#else
#include &lt;conio.h&gt; // to support _getch
int myWaitKey(int wait) {
    int c = cvWaitKey(wait);
    if (c == 0) {
        int c = _getch();   //capture the key code and insert into c
        if (c == 0 || c == 224)
            c = _getch();
    }
    //if (c!=-1) printf("%d\n",c);
    return c;
}
#endif

&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='thewoz' date='2019-01-18T19:57:24Z'>
		I have a similar issue with opencv 4.0.0 in python3.  The arrow keys work fine UNTIL I press the TAB key, then they stop working.  Another clue is that the 1st time I press the TAB key, it DOES NOT print out a 9, so it is somehow processing the tab character differently.   Subsequent presses of the TAB key cause a 9 to be printed.   I'm working on a Dell XPS 15.   Here's the code showing the behavior:
&lt;denchmark-code&gt;import cv2
import numpy as np

blank = np.zeros((704,1104,3),np.uint8)
cv2.imshow("Window",blank)
kp = -1
while kp != 27:
   kp = cv2.waitKey(100)
   if kp != -1:
      print (kp)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='10' author='thewoz' date='2019-01-18T22:08:32Z'>
		&lt;denchmark-link:https://github.com/tpmeyer1&gt;@tpmeyer1&lt;/denchmark-link&gt;
 It is different issue , so fill/check new issue

Dell XPS 15

Used OS?
Ensure that you are not using any Python IDEs - they hack/intercept many aspects of normal program flow.
		</comment>
		<comment id='11' author='thewoz' date='2019-01-18T23:21:06Z'>
		I don't use any python IDEs (for exactly the reason you state).  I edit in vi and run on the command line using Terminal.   But now that you mention it, my Terminal does have more of a "GUI" aspect to it that I'd like.   I can zoom images (which I don't want to), buttons (pan and zoom) sort of appear at the top, and there is an info line at the bottom.  I don't have the problem on my older computer, which has version 3.4, and I compiled that myself.  The version 4.0.0 which is having this problem I installed using pip.   Do you think if I compiled from source the problem would go away?
Here is my OS info:
uname -ra
Linux XPS 4.15.0-29-generic &lt;denchmark-link:https://github.com/opencv/opencv/pull/31&gt;#31&lt;/denchmark-link&gt;
-Ubuntu SMP Tue Jul 17 15:39:52 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
		</comment>
		<comment id='12' author='thewoz' date='2019-01-18T23:39:17Z'>
		Looks like "QT" UI backend has been enabled in your OpenCV build. TAB can be preserved to switch between "UI elements" in that case.
Check build configuration about GUI (cv::getBuildInformation()) (see comments above).
		</comment>
		<comment id='13' author='thewoz' date='2019-01-18T23:58:59Z'>
		That must be it.   I didn't realize the pip version had QT included.   Thanks for your help!
		</comment>
	</comments>
</bug>