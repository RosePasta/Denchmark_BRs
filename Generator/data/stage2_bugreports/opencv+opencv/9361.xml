<bug id='9361' author='mikeroberts3000' open_date='2017-08-14T01:27:26Z' closed_time='2017-08-15T09:17:23Z'>
	<summary>Reading EXR files using the Python cv2 bindings fails on Mac due to a build configuration issue. Fix included.</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.3.3 (see cv2.getBuildInformation() string below)
Operating System / Platform =&gt; macOS Sierra 10.12.5
Compiler =&gt; Apple Clang (see gcc --version string below)

&lt;denchmark-code&gt;&gt;&gt;&gt; print cv2.getBuildInformation()

General configuration for OpenCV 3.3.0 =====================================
  Version control:               unknown

  Platform:
    Timestamp:                   2017-08-14T00:41:18Z
    Host:                        Darwin 16.6.0 x86_64
    CMake:                       3.9.1
    CMake generator:             Unix Makefiles
    CMake build tool:            /usr/bin/make
    Configuration:               Release

  CPU/HW features:
    Baseline:                    SSE SSE2 SSE3
      requested:                 SSE3
    Dispatched code generation:  SSE4_1 SSE4_2 FP16 AVX AVX2
      requested:                 SSE4_1 SSE4_2 AVX FP16 AVX2
      SSE4_1 (2 files):          + SSSE3 SSE4_1
      SSE4_2 (1 files):          + SSSE3 SSE4_1 POPCNT SSE4_2
      FP16 (1 files):            + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 AVX
      AVX (5 files):             + SSSE3 SSE4_1 POPCNT SSE4_2 AVX
      AVX2 (7 files):            + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 FMA3 AVX AVX2

  C/C++:
    Built as dynamic libs?:      YES
    C++ Compiler:                /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++  (ver 8.1.0.8020042)
    C++ flags (Release):         -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-unnamed-type-template-args -Wno-comment -fdiagnostics-show-option -Wno-long-long -Qunused-arguments -Wno-semicolon-before-method-body -fno-omit-frame-pointer -ffunction-sections  -msse -msse2 -msse3 -fvisibility=hidden -fvisibility-inlines-hidden -O3 -DNDEBUG  -DNDEBUG
    C++ flags (Debug):           -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-unnamed-type-template-args -Wno-comment -fdiagnostics-show-option -Wno-long-long -Qunused-arguments -Wno-semicolon-before-method-body -fno-omit-frame-pointer -ffunction-sections  -msse -msse2 -msse3 -fvisibility=hidden -fvisibility-inlines-hidden -g  -O0 -DDEBUG -D_DEBUG
    C Compiler:                  /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc
    C flags (Release):           -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-unnamed-type-template-args -Wno-comment -fdiagnostics-show-option -Wno-long-long -Qunused-arguments -Wno-semicolon-before-method-body -fno-omit-frame-pointer -ffunction-sections  -msse -msse2 -msse3 -fvisibility=hidden -fvisibility-inlines-hidden -O3 -DNDEBUG  -DNDEBUG
    C flags (Debug):             -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-unnamed-type-template-args -Wno-comment -fdiagnostics-show-option -Wno-long-long -Qunused-arguments -Wno-semicolon-before-method-body -fno-omit-frame-pointer -ffunction-sections  -msse -msse2 -msse3 -fvisibility=hidden -fvisibility-inlines-hidden -g  -O0 -DDEBUG -D_DEBUG
    Linker flags (Release):
    Linker flags (Debug):
    ccache:                      NO
    Precompiled headers:         NO
    Extra dependencies:          -framework OpenCL /System/Library/Frameworks/Accelerate.framework -framework Accelerate -framework AVFoundation -framework CoreGraphics -framework CoreMedia -framework CoreVideo -framework QuartzCore vtkRenderingOpenGL2 vtkCommonCore vtksys vtkCommonDataModel vtkCommonMath vtkCommonMisc vtkCommonSystem vtkCommonTransforms vtkCommonExecutionModel vtkRenderingCore vtkCommonColor vtkCommonComputationalGeometry vtkFiltersCore vtkFiltersGeneral vtkFiltersGeometry vtkFiltersSources vtkglew vtkInteractionStyle vtkFiltersExtraction vtkFiltersStatistics vtkImagingFourier vtkImagingCore vtkalglib vtkRenderingLOD vtkFiltersModeling vtkIOPLY vtkIOCore vtklz4 /usr/lib/libz.dylib vtkFiltersTexture vtkRenderingFreeType vtkfreetype vtkIOExport vtkIOImage vtkDICOMParser vtkmetaio /usr/local/lib/libjpeg.dylib /usr/local/lib/libpng.dylib /usr/local/lib/libtiff.dylib vtkRenderingContext2D vtkRenderingGL2PSOpenGL2 vtkgl2ps vtklibharu vtkIOGeometry vtkIOLegacy -framework Cocoa
    3rdparty dependencies:

  OpenCV modules:
    To be built:                 core flann imgproc ml objdetect photo video viz dnn imgcodecs shape videoio highgui superres ts features2d calib3d stitching videostab python2
    Disabled:                    world
    Disabled by dependency:      -
    Unavailable:                 cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev java python3

  GUI: 
    QT:                          NO
    Cocoa:                       YES
    OpenGL support:              NO
    VTK support:                 YES (ver 8.0.0)

  Media I/O: 
    ZLib:                        build (ver 1.2.8)
    JPEG:                        build (ver 90)
    WEBP:                        build (ver encoder: 0x020e)
    PNG:                         build (ver 1.6.24)
    TIFF:                        build (ver 42 - 4.0.2)
    JPEG 2000:                   build (ver 1.900.1)
    OpenEXR:                     build (ver 1.7.1)
    GDAL:                        NO
    GDCM:                        NO

  Video I/O:
    DC1394 1.x:                  NO
    DC1394 2.x:                  NO
    FFMPEG:                      NO
      avcodec:                   NO
      avformat:                  NO
      avutil:                    NO
      swscale:                   NO
      avresample:                NO
    GStreamer:                   NO
    OpenNI:                      NO
    OpenNI PrimeSensor Modules:  NO
    OpenNI2:                     NO
    PvAPI:                       NO
    GigEVisionSDK:               NO
    Aravis SDK:                  NO
    AVFoundation:                YES
    V4L/V4L2:                    NO/NO
    XIMEA:                       NO
    Intel Media SDK:             NO
    gPhoto2:                     NO

  Parallel framework:            GCD

  Trace:                         YES (with Intel ITT)

  Other third-party libraries:
    Use Intel IPP:               2017.0.2 [2017.0.2]
               at:               /Users/mike/Code/Local/OpenCV/opencv-3.3.0/BUILD/3rdparty/ippicv/ippicv_mac
    Use Intel IPP IW:            prebuilt binaries (2017.0.2)
    Use Intel IPP Async:         NO
    Use VA:                      NO
    Use Intel VA-API/OpenCL:     NO
    Use Lapack:                  YES (/System/Library/Frameworks/Accelerate.framework /System/Library/Frameworks/Accelerate.framework)
    Use Eigen:                   YES (ver 3.3.4)
    Use Cuda:                    NO
    Use OpenCL:                  YES
    Use OpenVX:                  NO
    Use custom HAL:              NO

  OpenCL:                        &lt;Link with OpenCL library&gt;
    Link libraries:              -framework OpenCL
    Use AMDFFT:                  NO
    Use AMDBLAS:                 NO

  Python 2:
    Interpreter:                 /Users/mike/Library/Enthought/Canopy_64bit/User/bin/python (ver 2.7.11)
    Libraries:                   /Users/mike/Library/Enthought/Canopy_64bit/User/lib/libpython2.7.dylib (ver 2.7.11)
    numpy:                       /Users/mike/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/numpy/core/include (ver 1.11.3)
    packages path:               lib/python2.7/site-packages

  Python 3:
    Interpreter:                 NO

  Python (for build):            /Users/mike/Library/Enthought/Canopy_64bit/User/bin/python

  Java:
    ant:                         NO
    JNI:                         /System/Library/Frameworks/JavaVM.framework/Headers /System/Library/Frameworks/JavaVM.framework/Headers /System/Library/Frameworks/JavaVM.framework/Headers
    Java wrappers:               NO
    Java tests:                  NO

  Matlab:
    mex:                         /Applications/MATLAB_R2016b.app/bin/mex
    Compiler/generator:          Not working (bindings will not be generated)

  Documentation:
    Doxygen:                     /usr/local/bin/doxygen (ver 1.8.13)

  Tests and samples:
    Tests:                       YES
    Performance tests:           YES
    C/C++ Examples:              NO

  Install path:                  /usr/local

  cvconfig.h is in:              /Users/mike/Code/Local/OpenCV/opencv-3.3.0/BUILD
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;Mikes-MacBook-Pro:lib mike$ gcc --version
Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1
Apple LLVM version 8.1.0 (clang-802.0.42)
Target: x86_64-apple-darwin16.6.0
Thread model: posix
InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Reading EXR files using the Python cv2 bindings fails on Mac due to a build configuration issue.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;


Download the OpenCV 3.3.0 source code.
Run the CMake GUI to generate a makefile. Set the BUILD_EXR option to true, and to configure the Python 2.7 bindings appropriately for your system.
Run make to build OpenCV.
Navigate to the folder where the the cv2.so library was built, start Python from the terminal, and execute the following program to read this EXR file:

&lt;denchmark-code&gt;import cv2
print cv2.getBuildInformation()
d = cv2.imread("depth.exr", cv2.IMREAD_UNCHANGED)[:,:,0] # "depth.exr" is included in this post
&lt;/denchmark-code&gt;

I get the following error when attempting to read the EXR file:
&lt;denchmark-code&gt;libc++abi.dylib: terminating with uncaught exception of type Iex::EnosysExc: Cannot initialize semaphore (Function not implemented).
Abort trap: 6
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Fix&lt;/denchmark-h&gt;

I was inspired by &lt;denchmark-link:https://stackoverflow.com/questions/14368647/opencv-2-4-3-throws-error-when-reading-or-writing-openexr-on-osx-10-7&gt;this StackOverflow post&lt;/denchmark-link&gt;
, which basically contains the fix.
So I changed opencv-3.3.0/3rdparty/openexr/IlmBaseConfig.h.cmakein as follows. I changed the line that says #cmakedefine01 HAVE_POSIX_SEMAPHORES to say #undef HAVE_POSIX_SEMAPHORES. I ran make again, which did a minimal rebuild, and then I was able to successfully read the EXR file.
It is worth mentioning that  seems to be the default configuration option in the OpenEXR GitHub repository (see &lt;denchmark-link:https://github.com/openexr/openexr/blob/20d043d017d4b752356bb76946ffdffaa9c15c72/IlmBase/config/IlmBaseConfig.h.in#L14&gt;here&lt;/denchmark-link&gt;
). So the version of OpenEXR that gets distributed with OpenCV, seems to contain a non-default configuration option that causes problems on Mac.
I hope this bug report is useful for others. I tried to search for duplicate issues on GitHub and couldn't find any, and I also tried to conform to the recommended OpenCV issue template. Cheers 😄
	</description>
	<comments>
		<comment id='1' author='mikeroberts3000' date='2017-08-14T21:03:49Z'>
		&lt;denchmark-link:https://github.com/mikeroberts3000&gt;@mikeroberts3000&lt;/denchmark-link&gt;
 Thank you for report!
Could you check this patch: &lt;denchmark-link:https://github.com/opencv/opencv/pull/9368&gt;#9368&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='2' author='mikeroberts3000' date='2017-08-14T23:44:22Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
, based on a quick visual inspection, that change looks good to me. I also double-checked in the OpenEXR codebase that defining HAVE_POSIX_SEMAPHORES to 0 is functionally equivalent to not defining it at all. All the usages in the OpenEXR codebase are of the form #if HAVE_POSIX_SEMAPHORES, rather than #ifdef HAVE_POSIX_SEMAPHORES, so defining HAVE_POSIX_SEMAPHORES to 0 appears to be a valid fix.
		</comment>
	</comments>
</bug>