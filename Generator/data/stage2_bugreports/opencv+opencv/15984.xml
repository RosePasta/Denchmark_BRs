<bug id='15984' author='ZTFtrue' open_date='2019-11-24T06:16:30Z' closed_time='2019-11-29T18:03:09Z'>
	<summary>SVM-&amp;gt;trainAuto() Segmentation fault (core dumped)</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.1.2-dev
Operating System / Platform =&gt; ArchLinux 5.3.11-arch1-1 x86_64 GNU/Linux (31.0Â GiB)
Compiler =&gt; Eclipse/Cmake

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

The outSVM-&gt;train(pt) can run , but the trainAuto(pt) can't work .
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Code:
outSVM = cv::ml::SVM::create();
outSVM-&gt;setType(SVM::C_SVC);
outSVM-&gt;setKernel(SVM::CHI2);
Ptr&lt;TrainData&gt; pt = ml::TrainData::create(samples, ml::ROW_SAMPLE,
        labels);
// bool result = outSVM-&gt;train(pt);
bool result = outSVM-&gt;trainAuto(pt);
&lt;denchmark-h:h5&gt;Debug informetion:&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;#0  0x00007fffee4b7707 in __memmove_avx_unaligned_erms ()
    at /usr/lib/libc.so.6
#1  0x00007ffff2e41db9 in cv::ml::SVMImpl::do_train(cv::Mat const&amp;, cv::Mat const&amp;) () at /usr/local/lib/libopencv_ml.so.4.1
#2  0x00007ffff2e4691d in cv::ml::SVMImpl::TrainAutoBody::operator()(cv::Range const&amp;) const () at /usr/local/lib/libopencv_ml.so.4.1
#3  0x00007fffeeb726d7 in (anonymous namespace)::ParallelLoopBodyWrapper::operator()(cv::Range const&amp;) const ()
    at /usr/local/lib/libopencv_core.so.4.1
#4  0x00007fffeeb7358d in cv::ParallelJob::execute(bool) ()
    at /usr/local/lib/libopencv_core.so.4.1
#5  0x00007fffeeb739d9 in cv::WorkerThread::thread_body() ()
    at /usr/local/lib/libopencv_core.so.4.1
#6  0x00007fffeeb73bf9 in cv::WorkerThread::thread_loop_wrapper(void*)
    () at /usr/local/lib/libopencv_core.so.4.1
#7  0x00007fffee3354cf in start_thread () at /usr/lib/libpthread.so.0
#8  0x00007fffee4522d3 in clone () at /usr/lib/libc.so.6
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ZTFtrue' date='2019-11-24T08:39:49Z'>
		Please provide complete minimal reproducer including input data.
		</comment>
		<comment id='2' author='ZTFtrue' date='2019-11-24T09:27:49Z'>
		&lt;denchmark-code&gt;bool trainSVM(const cv::Mat &amp;samples, vector&lt;int&gt; &amp;labels,
		cv::Ptr&lt;cv::ml::SVM&gt; &amp;outSVM) {
	CV_Assert(!samples.empty() &amp;&amp; samples.type() == CV_32FC1);
	CV_Assert(!labels.empty());
	outSVM = cv::ml::SVM::create();
	outSVM-&gt;setType(SVM::C_SVC);
 	outSVM-&gt;setKernel(SVM::CHI2);
	Ptr&lt;TrainData&gt; pt = ml::TrainData::create(samples, ml::ROW_SAMPLE, labels);
	bool result = outSVM-&gt;trainAuto(pt, labels.size()/5);
	outSVM-&gt;save("svm.xml");
	return result;
}
&lt;/denchmark-code&gt;

input data:
&lt;denchmark-link:https://drive.google.com/file/d/1Omy32EmH7IHtn3zUmpMkPx39TYSL7HID/view?usp=sharing&gt; labels Download form google driver&lt;/denchmark-link&gt;

&lt;denchmark-link:https://drive.google.com/file/d/1RFuF5NZ1Ap0QsfU2h12NK39bZ3CYajD5/view?usp=sharing&gt; samples Download form google driver&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='ZTFtrue' date='2019-11-27T04:59:36Z'>
		Other data consumption refer to &lt;denchmark-link:https://github.com/opencv/opencv_contrib/issues/2351#issuecomment-557538793&gt;issuecomment-557538793&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='ZTFtrue' date='2019-11-28T06:17:58Z'>
		Thank you for update!
I can't reproduce this crash exactly, but some problem has been detected with out of buffer (OOB) access with your data on this &lt;denchmark-link:https://github.com/opencv/opencv/blame/4.1.2/modules/ml/src/svm.cpp#L1454&gt;line&lt;/denchmark-link&gt;
:
&lt;denchmark-code&gt;[ INFO:0] global /home/alalek/projects/opencv/dev/modules/ml/src/svm.cpp (1457) do_train class_count=261   class_ranges.size=257
/usr/include/c++/8/debug/vector:417:
Error: attempt to subscript container with out-of-bounds index 261, but 
container only holds 257 elements.

Objects involved in the operation:
    sequence "this" @ 0x0x7fffffffbd00 {
      type = std::__debug::vector&lt;int, std::allocator&lt;int&gt; &gt;;
    }
...
(gdb) bt
#0  0x00007ffff40f857f in raise () at /lib64/libc.so.6
#1  0x00007ffff40e2895 in abort () at /lib64/libc.so.6
#2  0x00007ffff44b9e11 in  () at /lib64/libstdc++.so.6
#3  0x0000000000431789 in std::__debug::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[](unsigned long) (this=0x7fffffffbd00, __n=261) at /usr/include/c++/8/debug/vector:417
#4  0x00007ffff7f3f238 in cv::ml::SVMImpl::do_train(cv::Mat const&amp;, cv::Mat const&amp;) (this=0x59d9b0, _samples=..., _responses=...) at /home/alalek/projects/opencv/dev/modules/ml/src/svm.cpp:1458
#5  0x00007ffff7f40e88 in cv::ml::SVMImpl::TrainAutoBody::operator()(cv::Range const&amp;) const (this=0x7fffffffcbc0, range=...) at /home/alalek/projects/opencv/dev/modules/ml/src/svm.cpp:1703
#6  0x00007ffff4a17836 in (anonymous namespace)::ParallelLoopBodyWrapper::operator()(cv::Range const&amp;) const (this=0x7fffffffc9f0, sr=...) at /home/alalek/projects/opencv/dev/modules/core/src/parallel.cpp:327
&lt;/denchmark-code&gt;

(line numbers are not exact due extra logging messages, build is prepared with -DENABLE_GNU_STL_DEBUG=ON CMake option)
		</comment>
		<comment id='5' author='ZTFtrue' date='2019-11-28T09:29:53Z'>
		(gdb) bt
#0  0x00007fffee4b5707 in __memmove_avx_unaligned_erms ()
    at /usr/lib/libc.so.6
#1  0x00007ffff2e3fdb9 in cv::ml::SVMImpl::do_train(cv::Mat const&amp;, cv::Mat const&amp;) () at /usr/local/lib/libopencv_ml.so.4.1
#2  0x00007ffff2e4491d in cv::ml::SVMImpl::TrainAutoBody::operator()(cv::Range const&amp;) const () at /usr/local/lib/libopencv_ml.so.4.1
#3  0x00007fffeeb70827 in (anonymous namespace)::ParallelLoopBodyWrapper::operator()(cv::Range const&amp;) const ()
    at /usr/local/lib/libopencv_core.so.4.1
#4  0x00007fffeeb716dd in cv::ParallelJob::execute(bool) ()
    at /usr/local/lib/libopencv_core.so.4.1
#5  0x00007fffeeb741b1 in cv::parallel_for_pthreads(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) ()
    at /usr/local/lib/libopencv_core.so.4.1
#6  0x00007fffeeb70b6c in cv::parallel_for_(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) () at /usr/local/lib/libopencv_core.so.4.1
#7  0x00007ffff2e43513 in cv::ml::SVMImpl::trainAuto(cv::Ptr&lt;cv::ml::TrainData&gt; const&amp;, int, cv::ml::ParamGrid, cv::ml::ParamGrid, cv::ml::ParamGrid, cv::ml::ParamGrid, cv::ml::ParamGrid, cv::ml::ParamGrid, bool) ()
    at /usr/local/lib/libopencv_ml.so.4.1
#8  0x000055555556308f in trainSVM(cv::Mat const&amp;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;&amp;, cv::Ptr&lt;cv::ml::SVM&gt;&amp;)
    (samples=..., labels=..., outSVM=...)
    at /usr/local/include/opencv4/opencv2/core/cvstd_wrapper.hpp:124
#9  0x000055555555f1ff in main() ()
    at /home/ztftrue/Documents/cpp-workspace/surf_svm/surf_svm.cpp:432
(gdb) 
		</comment>
		<comment id='6' author='ZTFtrue' date='2019-11-28T09:46:41Z'>
		Yes, I saw this stack trace in issue's description.
But used binaries are built without debug information (no lines information), so it is hard to say is problem on my side the same or not.
		</comment>
		<comment id='7' author='ZTFtrue' date='2019-11-28T18:16:07Z'>
		imho, the condition here is wrong:



opencv/modules/ml/src/svm.cpp


         Line 1454
      in
      4c71dbf






 if( class_ranges[class_count] &lt;= 0 ) 





instead it might be:
&lt;denchmark-code&gt;   //check that while cross-validation there were the samples from all the classes
   if( class_ranges.size() == class_count+1 )
&lt;/denchmark-code&gt;

it is a leftover from 2.4, which behaved differently:



opencv/modules/ml/src/svm.cpp


        Lines 1391 to 1400
      in
      82f8176






 CV_CALL( class_ranges = (int*)cvMemStorageAlloc( temp_storage, 



                     (class_count + 1)*sizeof(class_ranges[0]))); 



 CV_CALL( temp_samples = (const float**)cvMemStorageAlloc( temp_storage, 



                     sample_count*sizeof(temp_samples[0]))); 



 CV_CALL( temp_y = (schar*)cvMemStorageAlloc( temp_storage, sample_count)); 



 



 class_ranges[class_count] = 0; 



 cvSortSamplesByClasses( samples, responses, class_ranges, 0 ); 



 //check that while cross-validation there were the samples from all the classes 



 if( class_ranges[class_count] &lt;= 0 ) 





		</comment>
		<comment id='8' author='ZTFtrue' date='2019-11-28T19:26:06Z'>
		Right, condition seems kept old, while other code parts were changed.
&lt;denchmark-code&gt;if ((int)class_ranges.size() &lt; class_count + 1)
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/berak&gt;@berak&lt;/denchmark-link&gt;
 Could you propose PR onto 3.4 branch?
		</comment>
		<comment id='9' author='ZTFtrue' date='2019-11-28T19:43:55Z'>
		&lt;denchmark-link:https://github.com/ZTFtrue&gt;@ZTFtrue&lt;/denchmark-link&gt;
 Anyway provided ML input is strange:

261 samples
261 different labels (261 classes).

		</comment>
	</comments>
</bug>