<bug id='12750' author='tomoaki0705' open_date='2018-10-05T09:51:21Z' closed_time='2018-10-12T16:49:43Z'>
	<summary>imgproc: program crashes after test of imgproc "OCL_ImgProc/CvtColor8u32f"</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4 branch ( 0101fa7 )
Operating System / Platform =&gt; Windows 10 64bit
Compiler =&gt; Visual Studio 2015
CUDA =&gt; 10.0

&lt;denchmark-h:h5&gt;Summarized description&lt;/denchmark-h&gt;


The opencv_test_imgproc passes, but when I ran it from target RUN_TESTS, it says Segfault

&lt;denchmark-code&gt;    Start 9: opencv_test_imgproc
1/1 Test #9: opencv_test_imgproc ..............***Exception: SegFault137.81 sec
&lt;/denchmark-code&gt;


I ran opencv_test_imgproc separately, but all the test passes (!)
To reproduce what gtest was seeing, I need to ran it in Debug mode
When running opencv_test_imgproc with "Start debug" on Visual Studio 2015, the test passed but at the end, it did cause an Segfault at ocl.cpp



opencv/modules/core/src/ocl.cpp


        Lines 4322 to 4329
      in
      0101fa7






 void _releaseBufferEntry(const BufferEntry&amp; entry) 



 { 



 CV_Assert(entry.capacity_ != 0); 



 CV_Assert(entry.clBuffer_ != NULL); 



 LOG_BUFFER_POOL("OpenCL release buffer: %p, %lld (0x%llx) bytes\n", 



             entry.clBuffer_, (long long)entry.capacity_, (long long)entry.capacity_); 



 CV_OCL_DBG_CHECK(clReleaseMemObject(entry.clBuffer_)); 



 } 






&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;



I narrowed down the test case, and the test case was from OCL_ImgProc/CvtColor8u32f


Furthermore, it was related to test of either HSV/Lab/Luv conversion.


Also, although I put a break point at where it causes Segfault, it doesn't reproduce the situation.


I have to exit from the main routine call and it was happening after that exit call.  Mysterious...


After watching the source code, I realized that some of the static UMat was used in a wrong scope, such like here 



opencv/modules/imgproc/src/color_hsv.cpp


        Lines 1483 to 1486
      in
      0101fa7






 { 



 static UMat sdiv_data; 



 static UMat hdiv_data180; 



 static UMat hdiv_data256; 







These UMat were passed as a parameter of the OpenCL kernel but the scope was closed before it was actually used



opencv/modules/imgproc/src/color_hsv.cpp


        Lines 1516 to 1521
      in
      0101fa7






     h.setArg(ocl::KernelArg::PtrReadOnly(sdiv_data)); 



     h.setArg(hrange == 256 ? ocl::KernelArg::PtrReadOnly(hdiv_data256) : 



 ocl::KernelArg::PtrReadOnly(hdiv_data180)); 



 } 



 



 return h.run(); 







Looking back the history, it seems that color convert was splitted in early 2018, and before the split, the scope was aligned with the actual use.


I moved the UMat declarations and also, I removed the static


Now the test passed without Segfault


&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;



Build under environment explained above.


Run with CUDA 10.0 and run the OpenCL kernel on dGPU


OPENCV_OPENCL_DEVICE=:dgpu opencv_test_imgproc --gtest_filter=OCL_ImgProc/CvtColor8u32f*


Also, there I'm not sure why this doesn't happen on CPU and igpu on my laptop.


Still, the scope difference seems bad, so I think it has meaning to fix the scope.


	</description>
	<comments>
		<comment id='1' author='tomoaki0705' date='2018-10-05T09:53:12Z'>
		&lt;denchmark-link:https://user-images.githubusercontent.com/3737315/46528891-df017400-c8cf-11e8-97ba-2335ef2c897f.png&gt;&lt;/denchmark-link&gt;

I just had a screenshot, so I'll attach it for reference.
		</comment>
		<comment id='2' author='tomoaki0705' date='2018-10-05T10:18:28Z'>
		
I have to exit from the main routine call and it was happening after that exit call. Mysterious...

Looks like you catched:

termination order fiasco: OpenCL context is destroyed / corrupted before allocated buffers.
or Win32 ExitProcess terrible behavior - it terminates all non-main threads unconditionally - this usually corrupt multi-threading processes / libraries (deadlock is one way).

There is cv::__termination flag in core module of OpenCV. Please check its value during crash.
Also please check existence of other threads.
		</comment>
		<comment id='3' author='tomoaki0705' date='2018-10-06T14:29:26Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
, you really know everything.
Thank you for your suggestion.
I checked the cv::__termination when the crash happened.  It was false.
Also, when the crash happened there was only one thread running.  According to the Visual Studio, the name of the thread was "Main Thread" (as expected)
Regarding these information, is &lt;denchmark-link:https://github.com/opencv/opencv/pull/12751&gt;#12751&lt;/denchmark-link&gt;
 enough fix against the cause ?
		</comment>
		<comment id='4' author='tomoaki0705' date='2018-10-06T14:46:48Z'>
		Please capture stack trace ("call stack" at crash point).


static UMat sdiv_data;


There is "static" modifier. It means that these variables has "global" lifetime.
These "static" vars should not be get cleared on closing scope.
These vars are trying to be cleared during process termination.
These vars should store "initialized" tables for next similar calls. Try --gtest_repeat=2 option with your fix (additionally disable buffer pool cache: OPENCV_OPENCL_BUFFERPOOL_LIMIT=0).

It was false

Could you check this with opencv_world build?
Looks like opencv_imgproc is unloaded before opencv_core (this flag is raised by opencv_core DllMain() only).
		</comment>
		<comment id='5' author='tomoaki0705' date='2018-10-06T15:35:41Z'>
		
Please capture stack trace ("call stack" at crash point).

&lt;denchmark-code&gt; 	nvopencl.dll!00007ffbba464c60()	Unknown
 	nvopencl.dll!00007ffbba23aee1()	Unknown
 	nvopencl.dll!00007ffbba03c36a()	Unknown
 	nvopencl.dll!00007ffbba02d6b5()	Unknown
 	nvopencl.dll!00007ffbba02db65()	Unknown
 	nvopencl.dll!00007ffbba040808()	Unknown
&gt;	opencv_core343d.dll!OPENCL_FN_clReleaseMemObject_switch_fn(_cl_mem * p1) Line 526	C++
 	opencv_core343d.dll!cv::ocl::OpenCLBufferPoolImpl::_releaseBufferEntry(const cv::ocl::CLBufferEntry &amp; entry) Line 4328	C++
 	opencv_core343d.dll!cv::ocl::OpenCLBufferPoolBaseImpl&lt;cv::ocl::OpenCLBufferPoolImpl,cv::ocl::CLBufferEntry,_cl_mem * __ptr64&gt;::release(_cl_mem * buffer) Line 4237	C++
 	opencv_core343d.dll!cv::ocl::OpenCLAllocator::deallocate_(cv::UMatData * u) Line 4905	C++
 	opencv_core343d.dll!cv::ocl::OpenCLAllocator::deallocate(cv::UMatData * u) Line 4778	C++
 	opencv_core343d.dll!cv::UMat::deallocate() Line 491	C++
 	opencv_core343d.dll!cv::UMat::release() Line 3828	C++
 	opencv_core343d.dll!cv::UMat::~UMat() Line 481	C++
 	[External Code]	
&lt;/denchmark-code&gt;

Here's the copy of the call stack.
As you can see, the beginning is [External Code] which is making trace difficult.
One thing additional, I forgot to mention that when the crash happens, it sometime happens &lt;denchmark-link:https://github.com/opencv/opencv/blob/0101fa789cde6c03bc58288a56e1d6ce7175cd48/modules/core/src/opencl/runtime/autogenerated/opencl_core_impl.hpp#L526&gt;here&lt;/denchmark-link&gt;



It depends on which test to run.
I feel the cause is same.

Could you check this with opencv_world build?

I'll get back to you once it's done
		</comment>
		<comment id='6' author='tomoaki0705' date='2018-10-06T15:37:42Z'>
		
There is "static" modifier. It means that these variables has "global" lifetime.
These "static" vars should not be get cleared on closing scope.
These vars are trying to be cleared during process termination.
These vars should store "initialized" tables for next similar calls. Try --gtest_repeat=2 option with your fix (additionally disable buffer pool cache: OPENCV_OPENCL_BUFFERPOOL_LIMIT=0).

I start to feel that just removing static causes same computation multiple times, which is also wrong.
Let's see what's really happening.
		</comment>
		<comment id='7' author='tomoaki0705' date='2018-10-06T16:48:46Z'>
		With world build, the crash happened at exactly &lt;denchmark-link:https://github.com/opencv/opencv/blob/0101fa789cde6c03bc58288a56e1d6ce7175cd48/modules/core/src/opencl/runtime/autogenerated/opencl_core_impl.hpp#L526&gt;same place&lt;/denchmark-link&gt;



At this time, cv::__termination was true
&lt;denchmark-code&gt;cv::__termination	true	bool
&lt;/denchmark-code&gt;

Also, call stack seems same
&lt;denchmark-code&gt; 	ntdll.dll!00007ffc2dd0024e()	Unknown
 	nvopencl.dll!00007ffbb8bd4c60()	Unknown
 	nvopencl.dll!00007ffbb89aaee1()	Unknown
 	nvopencl.dll!00007ffbb87ac36a()	Unknown
 	nvopencl.dll!00007ffbb879d6b5()	Unknown
 	nvopencl.dll!00007ffbb879db65()	Unknown
 	nvopencl.dll!00007ffbb87b0808()	Unknown
&gt;	opencv_world343d.dll!OPENCL_FN_clReleaseMemObject_switch_fn(_cl_mem * p1) Line 526	C++
 	opencv_world343d.dll!cv::ocl::OpenCLBufferPoolImpl::_releaseBufferEntry(const cv::ocl::CLBufferEntry &amp; entry) Line 4328	C++
 	opencv_world343d.dll!cv::ocl::OpenCLBufferPoolBaseImpl&lt;cv::ocl::OpenCLBufferPoolImpl,cv::ocl::CLBufferEntry,_cl_mem * __ptr64&gt;::release(_cl_mem * buffer) Line 4237	C++
 	opencv_world343d.dll!cv::ocl::OpenCLAllocator::deallocate_(cv::UMatData * u) Line 4905	C++
 	opencv_world343d.dll!cv::ocl::OpenCLAllocator::deallocate(cv::UMatData * u) Line 4778	C++
 	opencv_world343d.dll!cv::UMat::deallocate() Line 491	C++
 	opencv_world343d.dll!cv::UMat::release() Line 3828	C++
 	opencv_world343d.dll!cv::UMat::~UMat() Line 481	C++
 	[External Code]	
&lt;/denchmark-code&gt;

		</comment>
		<comment id='8' author='tomoaki0705' date='2018-10-06T20:13:18Z'>
		
Here's the copy of the call stack.

Thank you!
As expected this looks like cleanup of objects with global "module" lifetime.

At this time, cv::__termination was true

Thank you!
In world modules there is single DllMain (from core/src/system.cpp) which triggers __termination flag.
Separate modules has own DllMain() functions. And opencv_imgproc has just a stub. opencv_core's DllMain is not called until opencv_imgproc is unloaded. But code is crashed during opencv_imgproc cleanup.
Current OpenCV detection of process shutdown is not reliable (relates &lt;denchmark-link:https://github.com/opencv/opencv/pull/1490&gt;#1490&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/opencv/opencv/pull/1972&gt;#1972&lt;/denchmark-link&gt;
).
As you can see, there are similar problems before. Problem comes from Win32 API design...
Please try this workaround with opencv_world build:
     void _releaseBufferEntry(const BufferEntry&amp; entry)
     {
         CV_Assert(entry.capacity_ != 0);
         CV_Assert(entry.clBuffer_ != NULL);
         LOG_BUFFER_POOL("OpenCL release buffer: %p, %lld (0x%llx) bytes\n",
                 entry.clBuffer_, (long long)entry.capacity_, (long long)entry.capacity_);
+#ifdef _WIN32
+        if (cv::__termination)
+            return;  // don't call any OpenCL runtime functions during termination, they may behave incorrectly during process termination
+#endif
         CV_OCL_DBG_CHECK(clReleaseMemObject(entry.clBuffer_));
     }
Perhaps this workaround is required for other places too (OpenCLAllocator::deallocate_()).
P.S. I will add DllMain() for other OpenCV modules later, but this would not help if some another "DLL" (not .exe, its cleanup calls are always done before ExitProcess()'s corruption) will try to use UMat with global lifetime.
		</comment>
		<comment id='9' author='tomoaki0705' date='2018-10-07T14:26:36Z'>
		&lt;denchmark-h:h3&gt;using world module&lt;/denchmark-h&gt;

I updated &lt;denchmark-link:https://github.com/opencv/opencv/pull/12751&gt;#12751&lt;/denchmark-link&gt;
 trying suggested workaround.
The test passed successfully.
&lt;denchmark-h:h3&gt;w/o using world module (normal build)&lt;/denchmark-h&gt;

Unfortunately, the test failed at &lt;denchmark-link:https://github.com/opencv/opencv/blob/e2bda7e1bcd989d8d485d80144eef13190a0f46e/modules/core/src/opencl/runtime/autogenerated/opencl_core_impl.hpp#L526&gt;here &lt;/denchmark-link&gt;



The __termination was false
&lt;denchmark-code&gt;cv::__termination	false	bool
&lt;/denchmark-code&gt;

Here's the call stack
&lt;denchmark-code&gt; 	ntdll.dll!00007ffc2dd0024e()	Unknown
 	nvopencl.dll!00007ffba1dd4c60()	Unknown
 	nvopencl.dll!00007ffba1baaee1()	Unknown
 	nvopencl.dll!00007ffba19ac36a()	Unknown
 	nvopencl.dll!00007ffba199d6b5()	Unknown
 	nvopencl.dll!00007ffba199db65()	Unknown
 	nvopencl.dll!00007ffba19b0808()	Unknown
&gt;	opencv_core343d.dll!OPENCL_FN_clReleaseMemObject_switch_fn(_cl_mem * p1) Line 526	C++
 	opencv_core343d.dll!cv::ocl::OpenCLBufferPoolImpl::_releaseBufferEntry(const cv::ocl::CLBufferEntry &amp; entry) Line 4332	C++
 	opencv_core343d.dll!cv::ocl::OpenCLBufferPoolBaseImpl&lt;cv::ocl::OpenCLBufferPoolImpl,cv::ocl::CLBufferEntry,_cl_mem * __ptr64&gt;::release(_cl_mem * buffer) Line 4237	C++
 	opencv_core343d.dll!cv::ocl::OpenCLAllocator::deallocate_(cv::UMatData * u) Line 4917	C++
 	opencv_core343d.dll!cv::ocl::OpenCLAllocator::deallocate(cv::UMatData * u) Line 4782	C++
 	opencv_core343d.dll!cv::UMat::deallocate() Line 491	C++
 	opencv_core343d.dll!cv::UMat::release() Line 3828	C++
 	opencv_core343d.dll!cv::UMat::~UMat() Line 481	C++
 	[External Code]	
&lt;/denchmark-code&gt;

There was the workaround just before this function call in &lt;denchmark-link:https://github.com/opencv/opencv/blob/e2bda7e1bcd989d8d485d80144eef13190a0f46e/modules/core/src/ocl.cpp#L4328-L4332&gt;_releaseBufferEntry&lt;/denchmark-link&gt;



But the cv::__termination was false, so return was not taken.
At least, the world build version got improved.
		</comment>
	</comments>
</bug>