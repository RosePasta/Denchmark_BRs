<bug id='17840' author='jacobideum' open_date='2020-07-14T19:26:00Z' closed_time='2020-07-23T09:26:02Z'>
	<summary>In-place flip of GpuMat produces image artifacs</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.3.0
Operating System / Platform =&gt; Windows 64 Bit
Compiler =&gt; Visual Studio 2019/NVCC

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

When uploading an Mat to a GpuMat called x, using cv::cuda::resize to downscale x into a new GpuMat called y, and finally flipping that image along the vertical axis by passing y as both the src and dst argument of cv::cuda::flip, major image fragmentation is produced on the right side of the y.
Here's a code example:
#include &lt;opencv2/opencv.hpp&gt;
#include &lt;opencv2/cudaarithm.hpp&gt;
#include &lt;opencv2/cudawarping.hpp&gt;
#include &lt;iostream&gt;

using namespace cv;

const int kDownscaleFactor = 3;

int main(int argc, char** argv) {
	Mat image;
	image = imread("img.jpg", IMREAD_COLOR);

	cuda::GpuMat downscaled;
	cuda::GpuMat flipped;
	downscaled.upload(image);
	cuda::resize(downscaled, flipped, Size(image.size[0] / kDownscaleFactor, image.size[1] / kDownscaleFactor));
	cuda::flip(flipped, flipped, 1);
	flipped.download(image);

	namedWindow("Glitchy Image", WINDOW_AUTOSIZE);
	imshow("Glitchy Image", image);
	waitKey(0);

	return 0;
}
&lt;denchmark-link:https://user-images.githubusercontent.com/51128994/87467974-083b5200-c5d6-11ea-9aff-088c7aab32cb.PNG&gt;&lt;/denchmark-link&gt;

However, using a new GpuMat variable as the argument for the dst parameter of cv::cuda::flip (not the same one as src), this error is not produced.
&lt;denchmark-link:https://github.com/opencv/opencv/files/4920841/cvCudaFlip.zip&gt;Here&lt;/denchmark-link&gt;
 is a zip file containing an executable demonstrating this error and the source code needed to reproduce it.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;


Upload a Mat object to the GPU into a GpuMat x.
Downscale x into a GpuMat y by calling cv::cuda::resize(x, y, Size(...));
Flip y along the vertical axis by calling cv::cuda::flip(y, y, 1); noting that y is passed as both the source and destination matrix to cv::cuda::flip.
Calling y.download(...) and displaying the results demonstrates significant image fragmentation.

&lt;denchmark-h:h5&gt;Issue submission checklist&lt;/denchmark-h&gt;


 I report the issue, it's not a question
 I checked the problem with documentation, FAQ, open issues,
answers.opencv.org, Stack Overflow, etc and have not found solution
 I updated to latest OpenCV version and the issue is still there
 There is reproducer code and related data files: videos, images, onnx, etc

	</description>
	<comments>
		<comment id='1' author='jacobideum' date='2020-07-17T06:52:28Z'>
		&lt;denchmark-link:https://github.com/jacobideum&gt;@jacobideum&lt;/denchmark-link&gt;
 Thanks for the issue report. I reproduced the problem on Ubuntu 18.04 with CUDA 10.2 and GeForce 1080ti card.
		</comment>
		<comment id='2' author='jacobideum' date='2020-07-17T06:56:01Z'>
		BTW, the issue is reproducible for in-place flip only. I replaced cuda::flip(flipped, flipped, 1); with cuda::flip(flipped, flipped2, 1); and the issue disappear. Probably flip operation is not designed for in-place processing or has some data raise in this case.
		</comment>
		<comment id='3' author='jacobideum' date='2020-07-17T08:07:05Z'>
		
in-place processing

Acceptable fix is raising an exception on such calls (there are several issues similar to this).
		</comment>
		<comment id='4' author='jacobideum' date='2020-07-20T02:02:05Z'>
		The underlying npp seems to have in-place and non-in-place API. The current implementation uses non-in-place ones only. How about using the in-place API in such cases?
Example of an in-place API: nppiMirror_8u_C1IR
Example of a non-in-place API: nppiMirror_8u_C1R
		</comment>
		<comment id='5' author='jacobideum' date='2020-07-20T03:22:29Z'>
		
using the in-place API in such cases

Looks good.
		</comment>
		<comment id='6' author='jacobideum' date='2020-07-23T09:25:39Z'>
		Contrib: &lt;denchmark-link:https://github.com/opencv/opencv_contrib/pull/2612&gt;opencv/opencv_contrib#2612&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='jacobideum' date='2020-07-23T09:25:57Z'>
		3.4: &lt;denchmark-link:https://github.com/opencv/opencv/pull/17863&gt;#17863&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>