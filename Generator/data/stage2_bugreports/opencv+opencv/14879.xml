<bug id='14879' author='mikecat' open_date='2019-06-24T17:43:46Z' closed_time='2019-07-07T08:44:23Z'>
	<summary>Assertion failed is thrown from GrabCut with small initial GC_PR_FGD region</summary>
	<description>
My program stopped working after invoking grabCut function with a mask with most pixels are initialized with GC_PR_BGD and a few pixels (4 pixels in my example) are initialized with GC_PR_FGD.
My program worked well when I used larger (100 pixels in my example) GC_PR_FGD region.
Is this behavior a bug, or just an incorrect usage of the library?
&lt;denchmark-h:h3&gt;The code used in my experiment&lt;/denchmark-h&gt;

import cv2
import numpy as np
import base64

# configuration
# whether to print HTML for viewing images on paiza.io
enablePrintHTML = False
# whether to reproduce error (use small "maybe foreground" region)
enableReproduceError = True

# output an image as HTML for viewing images on paiza.io
def printHTML(fileName):
	if not enablePrintHTML:
		return
	file = open(fileName, "rb")
	data = file.read()
	file.close()
	print('&lt;img src="data:image/png;base64,%s"&gt;&lt;br&gt;'
		% base64.b64encode(data).decode())

# visualize mask data for GrabCut
def visualizeGrabCut(mask):
	prFgd = cv2.compare(mask, cv2.GC_PR_FGD, cv2.CMP_EQ)
	prBgd = cv2.compare(mask, cv2.GC_PR_BGD, cv2.CMP_EQ)
	fgd = cv2.compare(mask, cv2.GC_FGD, cv2.CMP_EQ)
	bgd = cv2.compare(mask, cv2.GC_BGD, cv2.CMP_EQ)
	pr = cv2.bitwise_or(prFgd, prBgd)
	fgd = cv2.bitwise_or(fgd, prFgd)
	bgd = cv2.bitwise_or(bgd, prBgd)
	return cv2.merge([pr, bgd, fgd])

# create an image with a circle
img = np.zeros((480, 640, 3), np.uint8)
cv2.circle(img, (400, 300), 64, (255, 255, 255), -1, cv2.LINE_AA)
# output the image
cv2.imwrite("image.png", img)
printHTML("image.png")

# create mask for GrabCut
# all pixels are "maybe background"
mask = np.ones((480, 640), np.uint8) * cv2.GC_PR_BGD
if enableReproduceError:
	# except for 4 "maybe foreground" pixels inside the circle
	mask[300, 400] = cv2.GC_PR_FGD
	mask[300, 401] = cv2.GC_PR_FGD
	mask[301, 400] = cv2.GC_PR_FGD
	mask[301, 401] = cv2.GC_PR_FGD
else:
	# except for 100 "maybe foreground" pixels inside the circle
	for y in range(295, 305):
		for x in range(395, 405):
			mask[y, x] = cv2.GC_PR_FGD

# output initial status
cv2.imwrite("init_mask.png", visualizeGrabCut(mask))
printHTML("init_mask.png")

# execute GrabCut
rect = (0, 0, 640, 480)
bgdModel = np.zeros((1, 65), np.float64)
fgdModel = np.zeros((1, 65), np.float64)
cv2.grabCut(img, mask, rect, bgdModel, fgdModel, 1, cv2.GC_INIT_WITH_MASK)

# output result
cv2.imwrite("result_mask.png", visualizeGrabCut(mask))
printHTML("result_mask.png")
&lt;denchmark-h:h3&gt;Tested environment 1 (local)&lt;/denchmark-h&gt;


Windows 7 Home Premium Service Pack 1 (x64)
Python 3.5.1

Emitted message:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "grabcuttest.py", line 62, in &lt;module&gt;
    cv2.grabCut(img, mask, rect, bgdModel, fgdModel, 1, cv2.GC_INIT_WITH_MASK)
cv2.error: OpenCV(3.4.2) C:\projects\opencv-python\opencv\modules\core\src\kmeans.cpp:240: error: (-215:Assertion failed) N &gt;= K in function 'cv::kmeans'

&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Tested environment 2 (paiza.IO)&lt;/denchmark-h&gt;


Python3 (Python 3.6.8)

Emitted message:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "Main.py", line 62, in &lt;module&gt;
    cv2.grabCut(img, mask, rect, bgdModel, fgdModel, 1, cv2.GC_INIT_WITH_MASK)
cv2.error: OpenCV(4.1.0) /io/opencv/modules/core/src/kmeans.cpp:241: error: (-215:Assertion failed) N &gt;= K in function 'kmeans'
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='mikecat' date='2019-06-25T10:50:13Z'>
		&lt;denchmark-link:https://github.com/mikecat&gt;@mikecat&lt;/denchmark-link&gt;
 Could you try this patch: &lt;denchmark-link:https://github.com/opencv/opencv/pull/14886&gt;#14886&lt;/denchmark-link&gt;
 ?
		</comment>
	</comments>
</bug>