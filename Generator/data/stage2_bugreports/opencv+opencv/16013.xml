<bug id='16013' author='Dspade0' open_date='2019-11-28T10:28:39Z' closed_time='2020-06-19T09:28:05Z'>
	<summary>Corrupted optical flow using cuda::DenseOpticalFlow asynchronously in multithreaded environment</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.0
Operating System / Platform =&gt; Windows 64 Bit
Compiler =&gt; Visual Studio 2015
Cuda =&gt; 10.1

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

I will duplicate the problem described here:
&lt;denchmark-link:https://stackoverflow.com/questions/59075944/why-do-i-get-corrupted-results-if-i-run-gpu-dense-optical-flow-algorithm-concurr&gt;https://stackoverflow.com/questions/59075944/why-do-i-get-corrupted-results-if-i-run-gpu-dense-optical-flow-algorithm-concurr&lt;/denchmark-link&gt;


While using OpenCV CUDA dense optical flow in parallel I noticed that sometimes I get corrupted optical flow results, though I run it on different cuda::GpuMats and in separate cuda::Streams with separate Algorithm instances.
After some experiments with the code I found out that if I protect DenseOpticalFlow::calc() call with mutex or run only one thread, I always get correct (not corrupted) results.
I reduced my code to minimum reproducible example where I run optical flow algorithm on same input images multiple times in multiple threads

Furthermore, I checked that calling cuda::Stream::waitForCompletion() before calling DenseOpticalFlow::calc() asynchronously still causes the corruption.
However, if i use default stream cuda::Stream::Null() or use only DenseOpticalFlow::calc() synchronously, no corruption occurs.
Seems like using DenseOpticalFlow::calc() asynchronously causes data races.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

To reproduce the problem, you can use the example provided by the link above.
	</description>
	<comments>
		<comment id='1' author='Dspade0' date='2019-11-28T12:33:33Z'>
		
However, if i use default stream cuda::Stream::Null() or use only DenseOpticalFlow::calc() synchronously, no corruption occurs.

This is not true anymore. I have a corruption even with default cuda stream.
		</comment>
		<comment id='2' author='Dspade0' date='2020-06-14T06:50:23Z'>
		We might be able to apply solution similar to &lt;denchmark-link:https://github.com/opencv/opencv/pull/11483&gt;#11483&lt;/denchmark-link&gt;
.
May I work on this issue? &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>