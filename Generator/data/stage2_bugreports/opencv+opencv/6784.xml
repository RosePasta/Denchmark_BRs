<bug id='6784' author='tomoaki0705' open_date='2016-07-07T09:25:14Z' closed_time='2016-12-01T01:31:02Z'>
	<summary>test Calib3d_SolvePnPRansac.input_type fails on 64bit ARM</summary>
	<description>
&lt;denchmark-h:h3&gt;Please state the information for your system&lt;/denchmark-h&gt;


OpenCV version: master (da69cd0)
Host OS: Linux (Ubuntu 16.04)
PINE64/ODROID-C2
GCC  5.3.1 &amp; CMake 3.5.1

&lt;denchmark-h:h3&gt;In which part of the OpenCV library you got the issue?&lt;/denchmark-h&gt;


calib3d

&lt;denchmark-h:h3&gt;Expected behaviour&lt;/denchmark-h&gt;


pass the test
following is a screenshot when it passes (from Jetson TK1, 32bit OS)

&lt;denchmark-code&gt;[ RUN      ] Calib3d_SolvePnPRansac.input_type
[       OK ] Calib3d_SolvePnPRansac.input_type (48 ms)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Actual behaviour&lt;/denchmark-h&gt;


fails the test by following error message
following is a screenshot from ODROID-C2, 64bit OS

&lt;denchmark-code&gt;[ RUN      ] Calib3d_SolvePnPRansac.input_type
/home/odroid/opencv-fork/modules/calib3d/test/test_solvepnp_ransac.cpp:332: Failure
Value of: solvePnPRansac(points3d, points2d, intrinsics, cv::Mat(), R1, t1)
  Actual: false
Expected: true
/home/odroid/opencv-fork/modules/calib3d/test/test_solvepnp_ransac.cpp:336: Failure
Value of: solvePnPRansac(points3dMat, points2dMat, intrinsics, cv::Mat(), R2, t2)
  Actual: false
Expected: true
/home/odroid/opencv-fork/modules/calib3d/test/test_solvepnp_ransac.cpp:340: Failure
Value of: solvePnPRansac(points3dMat, points2dMat, intrinsics, cv::Mat(), R3, t3)
  Actual: false
Expected: true
/home/odroid/opencv-fork/modules/calib3d/test/test_solvepnp_ransac.cpp:344: Failure
Value of: solvePnPRansac(points3dMat, points2dMat, intrinsics, cv::Mat(), R4, t4)
  Actual: false
Expected: true
[  FAILED  ] Calib3d_SolvePnPRansac.input_type (122 ms)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Additional description&lt;/denchmark-h&gt;


I traced this problem a bit by myself, and I reached to epnp.cpp

&lt;denchmark-code&gt;  cvSVD(&amp;MtM, &amp;D, &amp;Ut, 0, CV_SVD_MODIFY_A | CV_SVD_U_T);
&lt;/denchmark-code&gt;


Here, I dumped MtM and Ut (i.e., input and output of cvSVD)
There seems it has a slight difference here.
when test fails

&lt;denchmark-code&gt;0.553865        0.48194 -0.342032       -0.265765       -0.297325       0.430057        0       0       0       0       0       0
-0.521499       -0.000686773    0.322269        -0.415374       4.30616e-05     0.672045        0       0       0       0       0       0
0.340488        0.297291        0.553207        0.434525        0.478678        0.267775        0       0       0       0       0       0
-0.323922       -0.00144852     -0.525722       0.668751        0.000180403     0.414079        0       0       0       0       0       0
0.317938        -0.581725       -0.314081       -0.245862       0.584398        0.244736        0       0       0       0       0       0
-0.315168       0.583906        -0.31319        -0.245653       0.583904        -0.245653        0       0       0       0       0       0
&lt;/denchmark-code&gt;


when test passes

&lt;denchmark-code&gt;0.553865        0.48194 -0.342032       -0.265765       -0.297325       0.430057        0       0       0       0       0       0
-0.521499       -0.000686773    0.322269        -0.415374       4.30616e-05     0.672045        0       0       0       0       0       0
0.340488        0.297291        0.553207        0.434525        0.478678        0.267775        0       0       0       0       0       0
-0.323922       -0.00144852     -0.525722       0.668751        0.000180403     0.414079        0       0       0       0       0       0
0.317938        -0.581725       -0.314081       -0.245862       0.584398        0.244736        0       0       0       0       0       0
0.315168        -0.583906       0.31319 0.245653        -0.583904       0.245653        0       0       0       0       0       0
&lt;/denchmark-code&gt;


If you look closely on the last line, you could realize that they have opposite signal.
If anyone knows the cause, I'm happy to fix it.
I had an experience that gcc 5.3.1 on 64bit ARM tries to use FMA (Fused Multiply and Add) instruction much aggressive than gcc 4 series.  This could be the cause, but I haven't identified it yet.
I'll try to find the cause by trying time to time.
Just to note it, the test of SVD it self passes correctly.

&lt;denchmark-code&gt;odroid@odroid64:~/opencv-fork/build$ ./bin/opencv_test_core --gtest_filter=Core_SVD*
CTEST_FULL_OUTPUT
OpenCV version: 3.1.0-dev
OpenCV VCS version: 3.1.0-770-ge032cb6
Build type: release
Parallel framework: pthreads
CPU features: neon
OpenCL is disabled
Note: Google Test filter = Core_SVD*
[==========] Running 3 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 3 tests from Core_SVD
[ RUN      ] Core_SVD.accuracy
[       OK ] Core_SVD.accuracy (1956 ms)
[ RUN      ] Core_SVD.flt
[       OK ] Core_SVD.flt (0 ms)
[ RUN      ] Core_SVD.orthogonality
[       OK ] Core_SVD.orthogonality (0 ms)
[----------] 3 tests from Core_SVD (1957 ms total)

[----------] Global test environment tear-down
[==========] 3 tests from 1 test case ran. (1959 ms total)
[  PASSED  ] 3 tests.
&lt;/denchmark-code&gt;


Also, this test passes successfully on OpenCV 3.1.
Some commit between OpenCV 3.1 and master (da69cd0)
seems to be the cause of this issue.

	</description>
	<comments>
		<comment id='1' author='tomoaki0705' date='2016-07-08T03:59:06Z'>
		Two bad news, and no good news.
For the result of cvSVD, I think I dumped too much values.
The array of mtm is reserved for 12*12, but the actual number of elements depends on the input data.
Thus, it seems the data is only valid for first 9 elements, and the other was just a garbage.
So, the cause may not be SVD.  I need to trace this.
Second bad news is that, this error may existed even before 3.1.
I tried the test  Calib3d_SolvePnPRansac on 3.1 and it passed so I believed it was OK on 3.1.
Actually, I realized that the failing test is  Calib3d_SolvePnPRansac. which didn't exist on 3.1. It was added in &lt;denchmark-link:https://github.com/opencv/opencv/commit/0c9c7d5f3b79218edf2f4352e7ffb574e7f81483&gt;0c9c7d5&lt;/denchmark-link&gt;

test screenshot from &lt;denchmark-link:https://github.com/opencv/opencv/commit/0c9c7d5f3b79218edf2f4352e7ffb574e7f81483&gt;0c9c7d5&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;CTEST_FULL_OUTPUT
OpenCV version: 3.1.0-dev
OpenCV VCS version: 3.1.0-51-g0c9c7d5
Build type: release
Parallel framework: pthreads
CPU features: neon
OpenCL is disabled
Note: Google Test filter = Calib3d_SolvePnPRansac.input_type
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from Calib3d_SolvePnPRansac
[ RUN      ] Calib3d_SolvePnPRansac.input_type
/home/odroid/opencv-fork/modules/calib3d/test/test_solvepnp_ransac.cpp:332: Failure
Value of: solvePnPRansac(points3d, points2d, intrinsics, cv::Mat(), R1, t1)
  Actual: false
Expected: true
[  FAILED  ] Calib3d_SolvePnPRansac.input_type (31 ms)
[----------] 1 test from Calib3d_SolvePnPRansac (31 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (31 ms total)
[  PASSED  ] 0 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] Calib3d_SolvePnPRansac.input_type
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='tomoaki0705' date='2016-07-15T09:39:33Z'>
		Now I found the cause of the cause of this issue.
Same as the 64bit Ubuntu series, it was coming from FMA.
The cause WAS inside the &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/core/src/lapack.cpp&gt;cvSVD&lt;/denchmark-link&gt;
.
In my case, the difference came from &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/core/src/lapack.cpp#L455-L456&gt;here&lt;/denchmark-link&gt;
.
It's doing a multiplication of two pairs of double and add/sub the products.
_Tp t0 = c*Ai[k] + s*Aj[k];
_Tp t1 = -s*Ai[k] + c*Aj[k];
I modified to dump the values like &lt;denchmark-link:https://github.com/tomoaki0705/opencv/blob/fixSolvePnPAarch64/modules/core/src/lapack.cpp#L507-L523&gt;this&lt;/denchmark-link&gt;
, and this was the result

64bit OS

&lt;denchmark-code&gt;======/home/odroid/opencv-fork/modules/core/src/lapack.cpp(454)======
i:4 j:5 At:-17845.8     -10634.2        -14181.5        14760.3 4954.42 10076.6
i:4 j:5 0xbf61acf7bc57cb9f      0x3feffffb1e488d4b
        4 5 0   0x404423771e1d6156      0xc0d16d70219b1cca      0.999998        -0.00215767
        4 5 1   0x40267b63f62b3058      0xc0c4c5177d95f38e      0.999998        -0.00215767
        4 5 2   0x4040be84544d220f      0xc0cbb2bb2273c91f      0.999998        -0.00215767
        4 5 3   0xc040f6855772a2de      0x40ccd422a00ade11      0.999998        -0.00215767
        4 5 4   0xc01108b8134a66a2      0x40b35a6b540f662b      0.999998        -0.00215767
        4 5 5   0xc03b0208cab29aa3      0x40c3ae49325881ef      0.999998        -0.00215767
i:4 j:5 At:-1.77169     11.7041 -2.88938        2.07803 -6.43151        5.26594
i:4 j:5 At:2.53992      1.95511 -4.64658        -2.50902        -1.96404        4.66802
i:4 j:5 0x3fe6b0806026e646      0x3fe690b13efb1759
        4 5 0   0x400548d7a573d355      0x400451bfb7d03607      0.705163        0.709046
        4 5 1   0x400047006d17bc91      0x3fff4825ebe8e65d      0.705163        0.709046
        4 5 2   0xc012551590fd7e81      0xc012961a384e1f66      0.705163        0.709046
        4 5 3   0xc004de31f7187b6e      0xc0041276fc82e78c      0.705163        0.709046
        4 5 4   0xc000436a19d82c25      0xbfff6cb9f8866d11      0.705163        0.709046
        4 5 5   0x40127bae1a15c4f8      0x4012ac0c7f895db8      0.705163        0.709046
i:4 j:5 At:-0.0752163   -0.0485073      -0.0628163      0.0604056       0.0409402       0.0514341
i:4 j:5 At:0.000564759  0.000434729     -0.00103333     -0.000557909    -0.00043673     0.00103808
i:4 j:5 0x3feffffff965afe6      0x3f248e846144bf02
        4 5 0   0x400cceca85a459fe      0x3f42818b574ceca1      0.000156835     1
        4 5 1   0x40062cd191c81ec0      0x3f3c7d8b20b823f2      0.000156835     1
        4 5 2   0xc01a5ac3223c0827      0xbf50ee19b31a4055      0.000156835     1
        4 5 3   0xc00c75557ade72ea      0xbf424813e59e3fca      0.000156835     1
        4 5 4   0xc00646f28863f8cb      0xbf3c9f1d41818dd9      0.000156835     1
        4 5 5   0x401a79c39b157f27      0x3f5102042d61deec      0.000156835     1
i:4 j:5 At:-2.78568e-11 -2.17166e-11    5.16442e-11     -2.77034e-11    -2.17268e-11    5.16281e-11
i:4 j:5 At:-2.787e-11   -2.17229e-11    5.16343e-11     -2.76952e-11    -2.17229e-11    5.16342e-11
i:4 j:5 0x3ff0000000000000      0xbbca164b1a4da688
        4 5 0   0x400cceca8b960b39      0xbdbea4b6f1401af4      -1.10483e-20    1
        4 5 1   0x40062cd1965b7537      0xbdb7e275835154e8      -1.10483e-20    1
        4 5 2   0xc01a5ac327ac2379      0x3dcc62e317130cb4      -1.10483e-20    1
        4 5 3   0xc00c755580bdaee4      0xbdbe737fc091ff13      -1.10483e-20    1
        4 5 4   0xc00646f28cfcb380      0xbdb7e27181aafda7      -1.10483e-20    1
        4 5 5   0x401a79c3a08c0022      0x3dcc62de541d49db      -1.10483e-20    1
i:4 j:5 At:-2.787e-11   -2.17229e-11    5.16343e-11     -2.76952e-11    -2.17229e-11    5.16342e-11
&lt;/denchmark-code&gt;


32bit OS

&lt;denchmark-code&gt;======/home/ubuntu/opencv-fork/modules/core/src/lapack.cpp(454)======
i:4 j:5 At:-17845.8     -10634.2        -14181.5        14760.3 4954.42 10076.6
i:4 j:5 0xbf61acf7bc57cae2      0x3feffffb1e488d4b
        4 5 0   0x404423771e1cfadc      0xc0d16d70219b1cac      0.999998        -0.00215767
        4 5 1   0x40267b63f62a25fa      0xc0c4c5177d95f34a      0.999998        -0.00215767
        4 5 2   0x4040be84544d9813      0xc0cbb2bb2273c8cd      0.999998        -0.00215767
        4 5 3   0xc040f6855772d5f2      0x40ccd422a00addba      0.999998        -0.00215767
        4 5 4   0xc01108b8134bdd43      0x40b35a6b540f65bd      0.999998        -0.00215767
        4 5 5   0xc03b0208cab27752      0x40c3ae49325881d0      0.999998        -0.00215767
i:4 j:5 At:-1.77169     11.7041 -2.88938        2.07803 -6.43151        5.26594
i:4 j:5 At:2.53992      1.95511 -4.64658        -2.50902        -1.96404        4.66802
i:4 j:5 0x3fe6b080602627cd      0x3fe690b13efbd6e0
        4 5 0   0x400548d7a5736100      0x400451bfb7d4db05      0.705163        0.709046
        4 5 1   0x400047006d176600      0x3fff4825ebf01bf2      0.705163        0.709046
        4 5 2   0xc012551590fd2234      0xc012961a38526824      0.705163        0.709046
        4 5 3   0xc004de31f7195400      0xc0041276fc816cbe      0.705163        0.709046
        4 5 4   0xc000436a19d8da00      0xbfff6cb9f8841993      0.705163        0.709046
        4 5 5   0x40127bae1a169c08      0x4012ac0c7f87fbd6      0.705163        0.709046
i:4 j:5 At:-0.0752163   -0.0485073      -0.0628163      0.0604056       0.0409402       0.0514341
i:4 j:5 At:0.000564759  0.000434729     -0.00103333     -0.000557909    -0.00043673     0.00103808
i:4 j:5 0x3feffffff965afe6      0x3f248e846140e16b
        4 5 0   0x400cceca85a75732      0x3f42818b81589e0e      0.000156835     1
        4 5 1   0x40062cd191ca6ff4      0x3f3c7d8b62436d98      0.000156835     1
        4 5 2   0xc01a5ac3223ec934      0xbf50ee19da0d23ae      0.000156835     1
        4 5 3   0xc00c75557ade08b9      0xbf424813bbd0d4fd      0.000156835     1
        4 5 4   0xc00646f28863a501      0xbf3c9f1cffee2114      0.000156835     1
        4 5 5   0x401a79c39b151b8f      0x3f510204066a2518      0.000156835     1
i:4 j:5 At:4.8635e-11   3.79038e-11     -9.00707e-11    4.83084e-11     3.78935e-11     -9.00865e-11
i:4 j:5 At:4.86217e-11  3.78975e-11     -9.00806e-11    4.83167e-11     3.78974e-11     -9.00804e-11
i:4 j:5 0x3ff0000000000000      0xbbd0b193f2049d1f
        4 5 0   0x400cceca8b990889      0x3dcabae4fe249f97      -1.41401e-20    1
        4 5 1   0x40062cd1965dc680      0x3dc4d59a8570005a      -1.41401e-20    1
        4 5 2   0xc01a5ac327aee49f      0xbdd8c2dbf5ddcce0      -1.41401e-20    1
        4 5 3   0xc00c755580bd4498      0x3dca8ff6cee6dcc2      -1.41401e-20    1
        4 5 4   0xc00646f28cfc5fa1      0x3dc4d597087def89      -1.41401e-20    1
        4 5 5   0x401a79c3a08b9c71      0xbdd8c2d7d09f4440      -1.41401e-20    1
i:4 j:5 At:4.86217e-11  3.78975e-11     -9.00806e-11    4.83167e-11     3.78974e-11     -9.00804e-11
&lt;/denchmark-code&gt;


cause

So, what's happening inside cvSVD is explained as following.
&lt;denchmark-code&gt;s = 0.000156835;
c = 1;
A = 3.600972217;
B = 0.000564759;
t1 = -s*A + c*B; // = -0.000156835 * 3.600972217 + 1 * 0.000564759
                 // = -0.000564758 + 0.000564759 (which is almost equal to zero)
&lt;/denchmark-code&gt;

In some case, the result becomes very similar, and the result becomes almost equal to zero.
I always thought that this will cause only small difference, but it seems that in this condition, the signal of the result changes.
Since the 'signal' changes, the result of multiplication becomes different.
I think this difference propagate and got accumulated and affects to the final result.
There could be other possible bugs in latter part so I can't conclude this issue yet, but at least this place is a candidate to fix.
I'll come back with a report how it changed if I put volatile to t0 and t1 and prevent using FMA.
Hope there is a good work around for this, but I haven't figured it out yet.
		</comment>
		<comment id='3' author='tomoaki0705' date='2016-07-15T22:41:56Z'>
		You can try to use:
&lt;denchmark-code&gt;#ifdef __GNUC__
#pragma GCC optimize ("-ffp-contract=off")
#endif
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='tomoaki0705' date='2016-07-19T00:08:39Z'>
		&lt;denchmark-link:https://github.com/ilya-lavrenov&gt;@ilya-lavrenov&lt;/denchmark-link&gt;
 , thanks for your suggestion.
Indeed, I tried that, but still the result from cvSVD doesn't match on both platform.
&lt;denchmark-code&gt;======/home/odroid/opencv-fork/modules/core/src/lapack.cpp(456)======
i:4 j:5 At:-17845.8     -10634.2        -14181.5        14760.3 4954.42 10076.6
i:4 j:5 0xbf61acf7bc56e5e0      0x3feffffb1e488d4c
        4 5 0   0x404423771e1c83ef      0xc0d16d70219b1ce3      0.999998        -0.00215767
        4 5 1   0x40267b63f62807e8      0xc0c4c5177d95f3e8      0.999998        -0.00215767
        4 5 2   0x4040be84544c4f9c      0xc0cbb2bb2273c96d      0.999998        -0.00215767
        4 5 3   0xc040f6855771ca58      0x40ccd422a00ade32      0.999998        -0.00215767
        4 5 4   0xc01108b813468129      0x40b35a6b540f6631      0.999998        -0.00215767
        4 5 5   0xc03b0208cab1fe71      0x40c3ae4932588241      0.999998        -0.00215767
i:4 j:5 At:-1.77169     11.7041 -2.88938        2.07803 -6.43151        5.26594
i:4 j:5 At:2.53992      1.95511 -4.64658        -2.50902        -1.96404        4.66802
i:4 j:5 0x3fe6b0806026d95a      0x3fe690b13efb2458
        4 5 0   0x400548d7a5742500      0x400451bfb7d01b39      0.705163        0.709046
        4 5 1   0x400047006d180400      0x3fff4825ebe8b7aa      0.705163        0.709046
        4 5 2   0xc012551590fdc533      0xc012961a384e0397      0.705163        0.709046
        4 5 3   0xc004de31f719f800      0xc0041276fc84fef5      0.705163        0.709046
        4 5 4   0xc000436a19d95a00      0xbfff6cb9f889b430      0.705163        0.709046
        4 5 5   0x40127bae1a172b84      0x4012ac0c7f8b5051      0.705163        0.709046
i:4 j:5 At:-0.0752163   -0.0485073      -0.0628163      0.0604056       0.0409402       0.0514341
i:4 j:5 At:0.000564759  0.000434729     -0.00103333     -0.000557909    -0.00043673     0.00103808
i:4 j:5 0x3feffffff965afe6      0x3f248e8461431808
        4 5 0   0x400cceca85a480e9      0x3f42818b517c72ce      0.000156835     1
        4 5 1   0x40062cd191c839b8      0x3f3c7d8b17a7ce62      0.000156835     1
        4 5 2   0xc01a5ac3223c2836      0xbf50ee19adb76b84      0.000156835     1
        4 5 3   0xc00c75557ae0fce7      0xbf424813eb642b3d      0.000156835     1
        4 5 4   0xc00646f28865f610      0xbf3c9f1d4a8ffc1d      0.000156835     1
        4 5 5   0x401a79c39b17dc69      0x3f51020432c391cc      0.000156835     1
i:4 j:5 At:-3.84231e-11 -2.99525e-11    7.12204e-11     -3.82035e-11    -2.99626e-11    7.12042e-11
i:4 j:5 At:-3.84364e-11 -2.99588e-11    7.12105e-11     -3.81953e-11    -2.99587e-11    7.12103e-11
i:4 j:5 0x3ff0000000000000      0x3b982a2a446e85e0
        4 5 0   0x400cceca8b963221      0xbdc52171b3d0dffc      1.27927e-21     1
        4 5 1   0x40062cd1965b902c      0xbdc07851d6c6cc58      1.27927e-21     1
        4 5 2   0xc01a5ac327ac4384      0x3dd392fe8665e2d7      1.27927e-21     1
        4 5 3   0xc00c755580c038e4      0xbdc4ff81bd8c3752      1.27927e-21     1
        4 5 4   0xc00646f28cfeb0c8      0xbdc0784f145d6d4a      1.27927e-21     1
        4 5 5   0x401a79c3a08e5d67      0x3dd392fb3ed84749      1.27927e-21     1
i:4 j:5 At:-3.84364e-11 -2.99588e-11    7.12105e-11     -3.81953e-11    -2.99587e-11    7.12103e-11
&lt;/denchmark-code&gt;

I'm talking about this line particularly,
&lt;denchmark-code&gt;i:4 j:5 At:-3.84231e-11 -2.99525e-11    7.12204e-11     -3.82035e-11    -2.99626e-11    7.12042e-11
&lt;/denchmark-code&gt;

compared to this line from 32bit version
&lt;denchmark-code&gt;i:4 j:5 At:4.8635e-11   3.79038e-11     -9.00707e-11    4.83084e-11     3.78935e-11     -9.00865e-11
&lt;/denchmark-code&gt;

I still need to dig in for while.....
		</comment>
		<comment id='5' author='tomoaki0705' date='2016-12-01T01:31:02Z'>
		solved by &lt;denchmark-link:https://github.com/opencv/opencv/pull/7526&gt;#7526&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>