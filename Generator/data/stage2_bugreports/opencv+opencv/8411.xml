<bug id='8411' author='csukuangfj' open_date='2017-03-17T16:30:25Z' closed_time='2017-05-03T12:41:43Z'>
	<summary>InputArray::getMat crashes on data of type std::vector&amp;lt;std::vector&amp;lt;bool&amp;gt;&amp;gt;</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.1
Operating System / Platform =&gt; Windows 64 Bit
Compiler =&gt; Visual Studio 2015

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

The following program causes segmentation fault:
std::vector&lt;std::vector&lt;bool&gt;&gt; vec{ {false,true}, {true,false,true} };
cv::InputArray input(vec);
std::cout &lt;&lt; input.getMat(0) &lt;&lt; std::endl;
std::cout &lt;&lt; input.getMat(1) &lt;&lt; std::endl;
It works fine for type of  std::vector&lt;std::vector&lt;char&gt;&gt;.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Execute the above program.
	</description>
	<comments>
		<comment id='1' author='csukuangfj' date='2017-03-20T01:23:20Z'>
		Hi,
I have not previously contributed to OpenCV, but I am interesting in doing so and I believe I have found a solution to the above issue. While my solution passes all the tests, I am unsure whether it is up to OpenCV standards or not. I was wondering if a more experienced contributor could take a look at my code and quickly approve it. I understand if no one is available, and so if I don't hear back by tomorrow, I will just go ahead and submit a pull request anyway and let the reviewer there decide.
The cause of this crash was in Mat _InputArray::getMat_(int i) in matrix.cpp, specifically, it was failing the assert statement on line 1244 because the size of the std::vector&lt;std::vector&lt;uchar&gt; &gt; vv it was casting the inputted object to had a negative size. So, I added code that instead cast it to std::vector&lt;std::vector&lt;bool&gt; &gt; if size was less than zero and then did the proper processing. I feel that it is improper to simply assume that if vv.size() is negative vv should be recast to std::vector&lt;std::vector&lt;bool&gt; &gt;, but it is all I could come up with.
Here is a link to my &lt;denchmark-link:https://github.com/Vedranh13/opencv&gt;fork&lt;/denchmark-link&gt;
 and attached is a patch with my added code.
Thanks
&lt;denchmark-link:https://github.com/opencv/opencv/files/853749/patch.txt&gt;patch.txt&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='csukuangfj' date='2017-03-20T23:07:53Z'>
		Disregard the above, I believe I have found a real, robust solution and will be submitting a pull request shortly.
		</comment>
		<comment id='3' author='csukuangfj' date='2017-03-21T05:04:36Z'>
		Problem is related to invalid default type traits: &lt;denchmark-link:https://github.com/opencv/opencv/issues/7599&gt;#7599&lt;/denchmark-link&gt;

Related: &lt;denchmark-link:https://github.com/opencv/opencv/issues/8189&gt;#8189&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='csukuangfj' date='2017-03-22T20:23:41Z'>
		In my opinion, it has nothing to do with the default type traits.  Because DataType&lt;bool&gt; is well defined.
If we have a variable v:
std::vector&lt;bool&gt; v{1, 1, 1, 1, 0, 0, 0, 0};
According to the &lt;denchmark-link:http://en.cppreference.com/w/cpp/container/vector_bool#firstHeading&gt;cppreference.com&lt;/denchmark-link&gt;
, the number of bytes of  is implementation defined,  it may occupy only 1 byte, instead of  bytes! This explains why it caused the segmentation fault.
The developer who implemented the _InputArray class must be aware of this special case and
handled std::vector&lt;bool&gt; explicitly. (But for some unknown reason, he/she forgot to process the casestd::vector&lt;std::vector&lt;bool&gt;&gt;.)
Therefore, the easiest workaround is to forbid the user instantiating std::vector&lt;std::vector&lt;bool&gt;&gt;.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Perhaps that is why _OutputArray forbids accepting std::vector&lt;bool&gt;.
		</comment>
	</comments>
</bug>