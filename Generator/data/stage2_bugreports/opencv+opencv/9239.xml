<bug id='9239' author='haiwangcat' open_date='2017-07-26T17:40:59Z' closed_time='2017-07-30T09:56:18Z'>
	<summary>TlsStorage::getData and TlsStorage::setData are not thread safe</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.2

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

TlsStorage::getData and TlsStorage::setData are not thread safe. Access to tlsSlots in CVX_Assert is not protected by a mutex lock.
&lt;denchmark-code&gt;void* getData(size_t slotIdx) const
{
    CVX_Assert(tlsSlots.size() &gt; slotIdx);
    ...
}

void setData(size_t slotIdx, void* pData)
{
    CVX_Assert(tlsSlots.size() &gt; slotIdx &amp;&amp; pData != NULL);
    ...
}
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

This bug can lead to data race if we concurrently call two CV functions in which parallel_for_ is used with pthread implementation.
	</description>
	<comments>
		<comment id='1' author='haiwangcat' date='2017-07-26T18:06:06Z'>
		BTW, tlsSlots.size() doesn't decrease during process lifetime.
		</comment>
		<comment id='2' author='haiwangcat' date='2017-07-26T18:37:16Z'>
		If we call two OpenCVX functions in parallel, then one thread may call the c'tor of TLSDataContainer while the other one calls getData():
TLSDataContainer::TLSDataContainer()
{
key_ = (int)getTlsStorage().reserveSlot(); // Reserve key from TLS storage
}
Here reserveSlot() is called, which modifies tlsSlots.
		</comment>
		<comment id='3' author='haiwangcat' date='2017-07-26T19:21:42Z'>
		Theoretically I agree. But size of tlsSlots should not be decreased anywhere practically, so this mentioned assertions should not be raised.
Do you use some thread sanitizer tool to detect this case?
		</comment>
		<comment id='4' author='haiwangcat' date='2017-07-26T20:22:40Z'>
		&lt;denchmark-link:https://github.com/haiwangcat&gt;@haiwangcat&lt;/denchmark-link&gt;
 Please check this patch: &lt;denchmark-link:https://github.com/opencv/opencv/pull/9241&gt;#9241&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='haiwangcat' date='2017-07-26T22:23:07Z'>
		Yes, we found this issue from a thread sanitizer. Do you think if this is a false alarm?
In reserveSlot(), the size of tlsSlots is actually increased as there is a push_back operation.
		</comment>
		<comment id='6' author='haiwangcat' date='2017-07-26T22:25:33Z'>
		The patch &lt;denchmark-link:https://github.com/opencv/opencv/pull/9241&gt;#9241&lt;/denchmark-link&gt;
 could still lead to data race when one thread is increasing tlsSlotsSize and the other one is reading it. Can we make is an atomic variable?
		</comment>
		<comment id='7' author='haiwangcat' date='2017-07-27T05:25:05Z'>
		Yes, I believe this is false alarm.
Condition in this assertion expression should be true in valid program (with valid slotIdx value):
&lt;denchmark-code&gt;CV_Assert(tlsSlotsSize &gt; slotIdx);
&lt;/denchmark-code&gt;

So increasing (only) it in separate thread in reserveSlot() (under locks) and reading it in getData()/setData() (without locks) will not change "true" result of this condition value.
There is may be an issue with handling of invalid slotIdx (result of condition is changed from "false to true") - but locks doesn't help here too.
Additional locks will just introduce unnecessary performance impact.
Does this tool detects an issue if we just remove CV_Assert() statements from getData/setData()?
		</comment>
		<comment id='8' author='haiwangcat' date='2017-07-27T07:42:32Z'>
		I understand that even there is data race on slotIdx, the result of the assertion may not be affected. But this data race will be detected by our thread sanitizer, which will consistently emit warnings. So it is better to eliminate this data race. Removing the CV_Assert() should fix it. Thanks!
		</comment>
		<comment id='9' author='haiwangcat' date='2017-07-27T15:16:02Z'>
		&lt;denchmark-link:https://github.com/haiwangcat&gt;@haiwangcat&lt;/denchmark-link&gt;
 Could you check patch again (added CV_Assert hiding from thread sanitizer): &lt;denchmark-link:https://github.com/opencv/opencv/pull/9241&gt;#9241&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='10' author='haiwangcat' date='2017-07-27T19:01:44Z'>
		The updated patch looks good to me. Thanks a lot!
		</comment>
	</comments>
</bug>