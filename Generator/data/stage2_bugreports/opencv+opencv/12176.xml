<bug id='12176' author='airbak' open_date='2018-08-08T01:31:00Z' closed_time='2018-08-09T01:14:33Z'>
	<summary>[v3.4.0] cv::cvtColor memory overflow</summary>
	<description>

OpenCV =&gt; 3.4.0
Operating System / Platform =&gt; ubuntu14 or ubuntu16 x86_64
Compiler =&gt; gcc 4.8.5 or gcc 5.4

Valgrind report  memory overflow in opencv 3.4.0.
(This issue is not  found in opencv 3.0.0)

Sample code:

&lt;denchmark-code&gt;#include &lt;opencv2/core/core.hpp&gt;
#include &lt;opencv2/imgproc/imgproc.hpp&gt;
#include &lt;opencv2/highgui/highgui.hpp&gt;

int main()
{
    cv::Mat img = cv::imread("0_0.bmp", -1);
    cv::Mat transfer;
    cv::cvtColor(img, transfer, cv::COLOR_GRAY2BGR);

    printf("-------- end \n");
    return 0;
}
&lt;/denchmark-code&gt;


Compile:

&lt;denchmark-code&gt;g++ opencv_test.c \
    -Iopencv-3.4.0/CXX_5.4.0/include \
    -Iopencv-3.4.0/CXX_5.4.0/include/opencv \
    -lopencv_core -lopencv_imgproc -lopencv_imgcodecs \
    -Lopencv-3.4.0/CXX_5.4.0/lib \
    -o opencv_test
&lt;/denchmark-code&gt;


Run:

&lt;denchmark-code&gt;$&gt; valgrind opencv_test
&lt;/denchmark-code&gt;


Result:

&lt;denchmark-code&gt;==76154== Invalid read of size 16
==76154==    at 0x772763F: icv_y8_innerGrayToRGB_8u_C1C3R (in opencv-3.4.0/lib/libopencv_imgproc.so.3.4.0)
==76154==    by 0x645827A: icv_y8_ippiGrayToRGB_8u_C1C3R (in opencv-3.4.0/lib/libopencv_imgproc.so.3.4.0)
==76154==    by 0x5EDDB2C: cv::CvtColorIPPLoop_Invoker&lt;cv::IPPGray2BGRFunctor&lt;unsigned char&gt; &gt;::operator()(cv::Range const&amp;) const (in opencv-3.4.0/lib/libopencv_imgproc.so.3.4.0)
==76154==    by 0x510B9ED: cv::parallel_for_(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) (in opencv-3.4.0/lib/libopencv_core.so.3.4.0)
==76154==    by 0x5EF4657: cv::hal::cvtGraytoBGR(unsigned char const*, unsigned long, unsigned char*, unsigned long, int, int, int, int) (in opencv-3.4.0/lib/libopencv_imgproc.so.3.4.0)
==76154==    by 0x5F0B3E1: cv::cvtColor(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int, int) (in opencv-3.4.0/lib/libopencv_imgproc.so.3.4.0)
==76154==    by 0x400D4C: main (in /home/Wukong2/l00176142/test/opencv_test)
==76154==  Address 0xb9e2fa4 is 2,340 bytes inside a block of size 2,352 alloc'd
==76154==    at 0x4C2FC75: memalign (vg_replace_malloc.c:857)
==76154==    by 0x4C2FD3D: posix_memalign (vg_replace_malloc.c:1020)
==76154==    by 0x4F4284A: cv::fastMalloc(unsigned long) (in opencv-3.4.0/lib/libopencv_core.so.3.4.0)
==76154==    by 0x4F74D3B: cv::Mat::create(int, int const*, int) (in opencv-3.4.0/lib/libopencv_core.so.3.4.0)
==76154==    by 0x4FA4BD3: cv::_OutputArray::create(cv::Size_&lt;int&gt;, int, int, bool, int) const (in opencv-3.4.0/lib/libopencv_core.so.3.4.0)
==76154==    by 0x5F0B363: cv::cvtColor(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int, int) (in opencv-3.4.0/lib/libopencv_imgproc.so.3.4.0)
==76154==    by 0x400D4C: main (in /home/Wukong2/l00176142/test/opencv_test)
==76154==
==76154== Invalid write of size 8
==76154==    at 0x772763F: icv_y8_innerGrayToRGB_8u_C1C3R (in opencv-3.4.0/lib/libopencv_imgproc.so.3.4.0)
==76154==    by 0x645827A: icv_y8_ippiGrayToRGB_8u_C1C3R (in opencv-3.4.0/lib/libopencv_imgproc.so.3.4.0)
==76154==    by 0x5EDDB2C: cv::CvtColorIPPLoop_Invoker&lt;cv::IPPGray2BGRFunctor&lt;unsigned char&gt; &gt;::operator()(cv::Range const&amp;) const (in opencv-3.4.0/lib/libopencv_imgproc.so.3.4.0)
==76154==    by 0x510B9ED: cv::parallel_for_(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) (in opencv-3.4.0/lib/libopencv_core.so.3.4.0)
==76154==    by 0x5EF4657: cv::hal::cvtGraytoBGR(unsigned char const*, unsigned long, unsigned char*, unsigned long, int, int, int, int) (in opencv-3.4.0/lib/libopencv_imgproc.so.3.4.0)
==76154==    by 0x5F0B3E1: cv::cvtColor(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int, int) (in opencv-3.4.0/lib/libopencv_imgproc.so.3.4.0)
==76154==    by 0x400D4C: main (in /home/Wukong2/l00176142/test/opencv_test)
==76154==  Address 0xb9e2fac is 2,348 bytes inside a block of size 2,352 alloc'd
==76154==    at 0x4C2FC75: memalign (vg_replace_malloc.c:857)
==76154==    by 0x4C2FD3D: posix_memalign (vg_replace_malloc.c:1020)
==76154==    by 0x4F4284A: cv::fastMalloc(unsigned long) (in opencv-3.4.0/lib/libopencv_core.so.3.4.0)
==76154==    by 0x4F74D3B: cv::Mat::create(int, int const*, int) (in opencv-3.4.0/lib/libopencv_core.so.3.4.0)
==76154==    by 0x4FA4BD3: cv::_OutputArray::create(cv::Size_&lt;int&gt;, int, int, bool, int) const (in opencv-3.4.0/lib/libopencv_core.so.3.4.0)
==76154==    by 0x5F0B363: cv::cvtColor(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int, int) (in opencv-3.4.0/lib/libopencv_imgproc.so.3.4.0)
==76154==    by 0x400D4C: main (in /home/Wukong2/l00176142/test/opencv_test)
==76154==
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='airbak' date='2018-08-08T05:43:43Z'>
		
3.4.0

It is not supported anymore.
Try to reproduce problem with OpenCV 3.4.2 or head of 3.4 branch.
Reproducer should be complete:

attach input image
or try to replace imread() with cv::Mat(Size(width, height), type, Scalar::all(0)):

you should dump params of loaded cv::Mat(): type, width(cols), height(rows), dims (must be equal to 2), data (check ptr alignment on 32 bytes).



		</comment>
		<comment id='2' author='airbak' date='2018-08-08T08:24:13Z'>
		
OpenCV 3.4.2 release version also has this issue.
0_0.bmp is one image of mnist. It is a gray image,  28x28. (Sorry, I could not upload this image)
I don't know how to dump cv::Mat().

Though valgrind report memory overflow, but the program is running normally without any impact.
May be it is a misdetection.
		</comment>
		<comment id='3' author='airbak' date='2018-08-08T09:00:44Z'>
		Reproduced with zero-filled image:
#include &lt;opencv2/imgproc/imgproc.hpp&gt;

int main()
{
    using namespace cv;
    Mat img(Size(28, 28), CV_8UC1, Scalar::all(0)), dst;
    cvtColor(img, dst, COLOR_GRAY2BGR);
    return 0;
}
valgrind logs:
&lt;denchmark-code&gt;==17884== Invalid read of size 16
==17884==    at 0x766571F: icv_l9_innerGrayToRGB_8u_C1C3R (in &lt;libdir&gt;/libopencv_imgproc.so.3.4.2)
==17884==    by 0x7665559: icv_l9_ippiGrayToRGB_8u_C1C3R (in &lt;libdir&gt;/libopencv_imgproc.so.3.4.2)
==17884==    by 0x60518EC: cv::ippiGrayToRGB_C1C3R(unsigned char const*, int, unsigned char*, int, IppiSize) (color_rgb.cpp:1233)
==17884==    by 0x605EBF0: cv::IPPGray2BGRFunctor&lt;unsigned char&gt;::operator()(void const*, int, void*, int, int, int) const (color_rgb.cpp:1282)
==17884==    by 0x605D9DE: cv::CvtColorIPPLoop_Invoker&lt;cv::IPPGray2BGRFunctor&lt;unsigned char&gt; &gt;::operator()(cv::Range const&amp;) const (color.hpp:455)
==17884==    by 0x51D3F9A: parallel_for_impl(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) (parallel.cpp:509)
==17884==    by 0x51D3E1D: cv::parallel_for_(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) (parallel.cpp:482)
==17884==    by 0x60562B2: bool cv::CvtColorIPPLoop&lt;cv::IPPGray2BGRFunctor&lt;unsigned char&gt; &gt;(unsigned char const*, unsigned long, unsigned char*, unsigned long, int, int, cv::IPPGray2BGRFunctor&lt;unsigned char&gt; const&amp;) (color.hpp:480)
==17884==    by 0x6052C08: cv::hal::cvtGraytoBGR(unsigned char const*, unsigned long, unsigned char*, unsigned long, int, int, int, int) (color_rgb.cpp:1519)
==17884==    by 0x60549B0: cv::cvtColorGray2BGR(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int) (color_rgb.cpp:1771)
==17884==    by 0x601BCB1: cv::cvtColor(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int, int) (color.cpp:217)
==17884==    by 0x10901A: main (test.cpp:7)
==17884==  Address 0x9da5a64 is 2,340 bytes inside a block of size 2,352 alloc'd
==17884==    at 0x4C31E76: memalign (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==17884==    by 0x4C31F91: posix_memalign (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==17884==    by 0x4F7652A: cv::fastMalloc(unsigned long) (alloc.cpp:63)
==17884==    by 0x510D82A: cv::StdMatAllocator::allocate(int, int const*, int, void*, unsigned long*, int, cv::UMatUsageFlags) const (matrix.cpp:147)
==17884==    by 0x510E79F: cv::Mat::create(int, int const*, int) (matrix.cpp:360)
==17884==    by 0x109432: cv::Mat::create(int, int, int) (mat.inl.hpp:788)
==17884==    by 0x5043173: cv::Mat::create(cv::Size_&lt;int&gt;, int) (mat.inl.hpp:794)
==17884==    by 0x51631C0: cv::_OutputArray::create(cv::Size_&lt;int&gt;, int, int, bool, int) const (matrix_wrap.cpp:1187)
==17884==    by 0x605B4D1: cv::CvtHelper&lt;cv::Set&lt;1, -1, -1&gt;, cv::Set&lt;3, 4, -1&gt;, cv::Set&lt;0, 2, 5&gt;, (cv::SizePolicy)2&gt;::CvtHelper(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int) (color.hpp:275)
==17884==    by 0x6054941: cv::cvtColorGray2BGR(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int) (color_rgb.cpp:1769)
==17884==    by 0x601BCB1: cv::cvtColor(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int, int) (color.cpp:217)
==17884==    by 0x10901A: main (test.cpp:7)
==17884== 
==17884== Invalid write of size 8
==17884==    at 0x766571F: icv_l9_innerGrayToRGB_8u_C1C3R (in &lt;libdir&gt;/libopencv_imgproc.so.3.4.2)
==17884==    by 0x7665559: icv_l9_ippiGrayToRGB_8u_C1C3R (in &lt;libdir&gt;/libopencv_imgproc.so.3.4.2)
==17884==    by 0x60518EC: cv::ippiGrayToRGB_C1C3R(unsigned char const*, int, unsigned char*, int, IppiSize) (color_rgb.cpp:1233)
==17884==    by 0x605EBF0: cv::IPPGray2BGRFunctor&lt;unsigned char&gt;::operator()(void const*, int, void*, int, int, int) const (color_rgb.cpp:1282)
==17884==    by 0x605D9DE: cv::CvtColorIPPLoop_Invoker&lt;cv::IPPGray2BGRFunctor&lt;unsigned char&gt; &gt;::operator()(cv::Range const&amp;) const (color.hpp:455)
==17884==    by 0x51D3F9A: parallel_for_impl(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) (parallel.cpp:509)
==17884==    by 0x51D3E1D: cv::parallel_for_(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) (parallel.cpp:482)
==17884==    by 0x60562B2: bool cv::CvtColorIPPLoop&lt;cv::IPPGray2BGRFunctor&lt;unsigned char&gt; &gt;(unsigned char const*, unsigned long, unsigned char*, unsigned long, int, int, cv::IPPGray2BGRFunctor&lt;unsigned char&gt; const&amp;) (color.hpp:480)
==17884==    by 0x6052C08: cv::hal::cvtGraytoBGR(unsigned char const*, unsigned long, unsigned char*, unsigned long, int, int, int, int) (color_rgb.cpp:1519)
==17884==    by 0x60549B0: cv::cvtColorGray2BGR(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int) (color_rgb.cpp:1771)
==17884==    by 0x601BCB1: cv::cvtColor(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int, int) (color.cpp:217)
==17884==    by 0x10901A: main (test.cpp:7)
==17884==  Address 0x9da5a6c is 2,348 bytes inside a block of size 2,352 alloc'd
==17884==    at 0x4C31E76: memalign (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==17884==    by 0x4C31F91: posix_memalign (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==17884==    by 0x4F7652A: cv::fastMalloc(unsigned long) (alloc.cpp:63)
==17884==    by 0x510D82A: cv::StdMatAllocator::allocate(int, int const*, int, void*, unsigned long*, int, cv::UMatUsageFlags) const (matrix.cpp:147)
==17884==    by 0x510E79F: cv::Mat::create(int, int const*, int) (matrix.cpp:360)
==17884==    by 0x109432: cv::Mat::create(int, int, int) (mat.inl.hpp:788)
==17884==    by 0x5043173: cv::Mat::create(cv::Size_&lt;int&gt;, int) (mat.inl.hpp:794)
==17884==    by 0x51631C0: cv::_OutputArray::create(cv::Size_&lt;int&gt;, int, int, bool, int) const (matrix_wrap.cpp:1187)
==17884==    by 0x605B4D1: cv::CvtHelper&lt;cv::Set&lt;1, -1, -1&gt;, cv::Set&lt;3, 4, -1&gt;, cv::Set&lt;0, 2, 5&gt;, (cv::SizePolicy)2&gt;::CvtHelper(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int) (color.hpp:275)
==17884==    by 0x6054941: cv::cvtColorGray2BGR(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int) (color_rgb.cpp:1769)
==17884==    by 0x601BCB1: cv::cvtColor(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int, int) (color.cpp:217)
==17884==    by 0x10901A: main (test.cpp:7)
&lt;/denchmark-code&gt;

Note: many other sizes e.g. 32x32 works fine
 &lt;denchmark-link:https://github.com/lupustr3&gt;@lupustr3&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='airbak' date='2018-08-08T09:41:42Z'>
		Thanks, we will investigate it.
		</comment>
		<comment id='5' author='airbak' date='2018-08-08T10:17:50Z'>
		
Using size 1
Using size 2
Using size 3
Using size 4  - FAILED
Using size 5  - FAILED
Using size 6
Using size 7
Using size 8
Using size 9
Using size 10
Using size 11
Using size 12 - FAILED
Using size 13 - FAILED
Using size 14
Using size 15
Using size 16
Using size 17
Using size 18
Using size 19
Using size 20 - FAILED
Using size 21 - FAILED
Using size 22
Using size 23
Using size 24
Using size 25
Using size 26
Using size 27
Using size 28 - FAILED
Using size 29 - FAILED
Using size 30
Using size 31
Using size 32
Using size 33
Using size 34
Using size 35
Using size 36 - FAILED
Using size 37 - FAILED
Using size 38
Using size 39
Using size 40
Using size 41
Using size 42
Using size 43
Using size 44 - FAILED
Using size 45 - FAILED
Using size 46
Using size 47
Using size 48
Using size 49
Using size 50
Using size 51
Using size 52 - FAILED
Using size 53 - FAILED
Using size 54
Using size 55
Using size 56
Using size 57
Using size 58
Using size 59
Using size 60 - FAILED
Using size 61 - FAILED
Using size 62
Using size 63
Using size 64


		</comment>
		<comment id='6' author='airbak' date='2018-08-08T10:51:24Z'>
		With dst roi condition become more complex.
Size(4,1) is in scope too.
Both AVX and SSE4.2 modes.
		</comment>
		<comment id='7' author='airbak' date='2018-08-09T01:14:33Z'>
		Thanks,  the patch fix v3.4.2, it could be closed.
		</comment>
	</comments>
</bug>