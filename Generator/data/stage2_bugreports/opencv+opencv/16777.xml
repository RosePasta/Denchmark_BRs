<bug id='16777' author='alalek' open_date='2020-03-10T23:20:18Z' closed_time='2020-03-17T12:58:12Z'>
	<summary>core: getNumThreads() result is wrong on Win32/Concurrency backend</summary>
	<description>
getNumThreads() returns nCPUs+1 by default:

4 cores: getNumThreads() =&gt; 5
4 cores + HT: getNumThreads() =&gt; 9

relates &lt;denchmark-link:https://github.com/opencv/opencv/commit/460644b8a4325558414f1d30ba15138857434875&gt;460644b&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='alalek' date='2020-03-11T05:44:33Z'>
		OpenCV doc for &lt;denchmark-link:https://docs.opencv.org/3.4/db/de0/group__core__utils.html#ga2db334ec41d98da3129ef4a2342fc4d4&gt;getNumThreads:Concurrency&lt;/denchmark-link&gt;
 says ""
Offending code is below: I can't imagine why 1 would be added to whatever's returned by GetNumberOfVirtualProcessors().
&lt;denchmark-code&gt;#elif defined HAVE_CONCURRENCY

    return 1 + (pplScheduler == 0
        ? Concurrency::CurrentScheduler::Get()-&gt;GetNumberOfVirtualProcessors()
        : pplScheduler-&gt;GetNumberOfVirtualProcessors());
&lt;/denchmark-code&gt;

There's no reason a parallelized implementation should use more than number of vCPUs than system. I can't seem to find anything in the MS Concurrency runtime's documentation that says a task will be more optimal if a scheduler is configured to use 1 plus number of vCPUs. Interesting find.
		</comment>
		<comment id='2' author='alalek' date='2020-03-11T07:05:45Z'>
		1 + is from setNumThreads() implementation:



opencv/modules/core/src/parallel.cpp


        Lines 726 to 731
      in
      3befdb4






 else if (pplScheduler == 0 || 1 + pplScheduler-&gt;GetNumberOfVirtualProcessors() != (unsigned int)threads) 



 { 



     pplScheduler = Concurrency::Scheduler::Create(Concurrency::SchedulerPolicy(2, 



                    Concurrency::MinConcurrency, threads-1, 



                    Concurrency::MaxConcurrency, threads-1)); 



 } 





Probably 1 here is for the "caller" thread.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

setNumThreads(2) + getNumThreads() should be checked too.
		</comment>
		<comment id='3' author='alalek' date='2020-03-12T05:31:43Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 , thanks for pointing that out. I
If I have understood correctly, for setNumThreads, then I propose patch below. Not sure what you mean by getNumThreads() should be checked too as the PR contains patch for that.
diff --git a/modules/core/src/parallel.cpp b/modules/core/src/parallel.cpp
index af520633ae..f967953643 100644
--- a/modules/core/src/parallel.cpp
+++ b/modules/core/src/parallel.cpp
@@ -701,11 +701,11 @@ void setNumThreads( int threads_ )
         // Concurrency always uses &gt;=2 threads, so we just disable it if 1 thread is requested
         numThreads = 0;
     }
-    else if (pplScheduler == 0 || 1 + pplScheduler-&gt;GetNumberOfVirtualProcessors() != (unsigned int)threads)
+    else if (pplScheduler == 0 || pplScheduler-&gt;GetNumberOfVirtualProcessors() != (unsigned int)threads)
     {
         pplScheduler = Concurrency::Scheduler::Create(Concurrency::SchedulerPolicy(2,
-                       Concurrency::MinConcurrency, threads-1,
-                       Concurrency::MaxConcurrency, threads-1));
+                       Concurrency::MinConcurrency, threads,
+                       Concurrency::MaxConcurrency, threads));
     }

 #elif defined HAVE_PTHREADS_PF

Quick test with on 4 core system:
&lt;denchmark-code&gt;    cout &lt;&lt; endl &lt;&lt; getNumThreads();
    cv::setNumThreads(3); //scheduler is created
    cout &lt;&lt; endl &lt;&lt; cv::getNumThreads(); //scheduler is queried for vCPU count
&lt;/denchmark-code&gt;

returns:
&lt;denchmark-code&gt;4

3
&lt;/denchmark-code&gt;

This is good?
		</comment>
		<comment id='4' author='alalek' date='2020-03-17T12:58:11Z'>
		
threads-1

Check actual CPU load and number of active threads.
threads-1 is correct, because the current thread is attached into thread pool before running job.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Fixed by &lt;denchmark-link:https://github.com/opencv/opencv/pull/16779&gt;#16779&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>