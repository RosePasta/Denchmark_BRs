<bug id='9732' author='tarasvinnik' open_date='2017-09-27T15:22:24Z' closed_time='2017-10-09T12:48:54Z'>
	<summary>Memory leak in rowRange ?</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; ❔
Operating System / Platform =&gt; ❔
Compiler =&gt; ❔

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

If the final rowRange parameter is less than then "start rowRange" an exception occurs (in the constructor of the Mat object). For this, not properly created Mat object destructor is not called. But refCount is already increased. As a result, we get a memory leak, see sample code below. Is it a bug or desired behavior? Thanks.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;  for (int k = 0; k &lt; 500; k++)
  {
    try
    {
      std::cout &lt;&lt; k &lt;&lt; std::endl;
      Sleep(200);
      cv::Mat sourceMat(2000, 2000, CV_8UC1,cv::Scalar(0));
      cv::Mat copyheader = sourceMat.rowRange(19, 9);

    }
    catch (...)
    {
      std::cout &lt;&lt; "error " &lt;&lt; k &lt;&lt; std::endl;

    }
  }    
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='tarasvinnik' date='2017-10-02T22:44:14Z'>
		I managed to recreate this bug. I built opencv from the master branch.
Valgrind output:
&lt;denchmark-code&gt;==3335== LEAK SUMMARY:
==3335==    definitely lost: 44,000 bytes in 500 blocks
==3335==    indirectly lost: 1,676,000,000 bytes in 419 blocks
==3335==      possibly lost: 324,000,000 bytes in 81 blocks
==3335==    still reachable: 628 bytes in 9 blocks
==3335==         suppressed: 0 bytes in 0 blocks
&lt;/denchmark-code&gt;

I'll give it a go and try to fix.
		</comment>
		<comment id='2' author='tarasvinnik' date='2017-10-03T22:32:10Z'>
		I found out there are more cases that can cause a memory leak. There are few coying constructors in the matrix.cpp that call CV_Assert macro. Unfortunatelly this macro only throws the excpetion without cleaning up hence the memory leak. The simplest solution I can think of is to first check for the condition, then clean up everyting and throw the excpetion at the end.
Here is a example of solution fixing problem reported in this issue:
if( !( 0 &lt;= _rowRange.start &amp;&amp; _rowRange.start &lt;= _rowRange.end &amp;&amp; _rowRange.end &lt;= m.rows ) )
{
    this-&gt;~Mat();
    CV_Assert( 0 &lt;= _rowRange.start &amp;&amp; _rowRange.start &lt;= _rowRange.end &amp;&amp; _rowRange.end &lt;= m.rows );
}
Replacing every CV_Assert macro in every constructor with a similar chunk of code seems a bit redundant. I think this should be extracted as a function. I'm not sure if it should be a private function inside Mat or something more generic somewhere else (where tho?)
I'll submit a pull request within 1-2 days with some solution, but in the meantime I open for suggestions.
		</comment>
		<comment id='3' author='tarasvinnik' date='2017-10-04T05:08:06Z'>
		There is &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.3.0/modules/core/src/matrix.cpp#L470-L512&gt;link&lt;/denchmark-link&gt;
 to related code.
Proposed solution is not robust (additional checks may be added in the future without such tricks) and doesn't look good (direct call of destructor).
Also there are lot of other places with the same problem. So we do not want to add such tricks into many places.
Problem is related to increased "refcount" (via pointer) without proper cleanup (because it is just a C pointer and there is no destructor).
It should be wrapped into some class with destructor which would be called by C++ &lt;denchmark-link:https://stackoverflow.com/a/32323458&gt;automatically&lt;/denchmark-link&gt;
 on exception in constructor body:

If the ctor throws, then the dtor is not called.
(But dtors of any member variable objects, whose ctors already ran to completion before this ctor ran, are called.)

Unfortunately approach with wrapper class can't be applied safe right now (we should preserve binary and source compatibility until OpenCV 4.0).
Probably this workaround should work too:
&lt;denchmark-code&gt;Mat::Mat(...)
{
    *this = m; // original line: refcount increased here

    try {
        ... just move original body here without "*this = m" line ...
    }
    catch (...)
    {
        release(); // decrease refcounter
        throw;
    }
}
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>