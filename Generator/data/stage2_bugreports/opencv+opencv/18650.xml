<bug id='18650' author='dave-andersen' open_date='2020-10-23T20:01:02Z' closed_time='2020-11-13T11:21:00Z'>
	<summary>incorrect sorting in stitching_detailed.py</summary>
	<description>
In samples/python/stitching_detailed.py, this code is supposed to grab the median focal value:
&lt;denchmark-code&gt;    focals = []
    for cam in cameras:
        focals.append(cam.focal)
    sorted(focals)
    if len(focals) % 2 == 1:
        warped_image_scale = focals[len(focals) // 2]
    else:
        warped_image_scale = (focals[len(focals) // 2] + focals[len(focals) // 2 - 1]) / 2
&lt;/denchmark-code&gt;

But it doesn't - sorted(focals) returns a copy of the array focals, but does not modify the original.
The code should instead read:
&lt;denchmark-code&gt;  focals.sort()
&lt;/denchmark-code&gt;

I assume it's better to keep this code as parallel as possible to the C++ version, but if someone wants to make a bigger change beyond fixing the bug, the initialization of focals here is non-pythonic, and would read better to me as,
&lt;denchmark-code&gt;  focals = sorted([cam.focal for cam in cameras])
&lt;/denchmark-code&gt;

which has the added benefit of making it harder to introduce the bug above.
(Or letting np do it, which exposes the idea it's looking for a median:
warped_image_scale = float(np.median([c.focal for c in cameras]))
Thanks as always for a fantastic framework!
	</description>
	<comments>
		<comment id='1' author='dave-andersen' date='2020-10-24T16:54:09Z'>
		Did you tried C++ version of this sample on your data?
/cc @&lt;denchmark-link:https://github.com/LaurentBerger&gt;@LaurentBerger&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='dave-andersen' date='2020-10-24T18:30:57Z'>
		Yup, the C++ version works well, and the code is correct.  It does an in-place sort of the focals:
&lt;denchmark-code&gt;    sort(focals.begin(), focals.end());
    float warped_image_scale;
    if (focals.size() % 2 == 1)
        warped_image_scale = static_cast&lt;float&gt;(focals[focals.size() / 2]);
    else
        warped_image_scale = static_cast&lt;float&gt;(focals[focals.size() / 2 - 1] + focals[focals.size() / 2]) * 0.5f;
&lt;/denchmark-code&gt;

(This sort(...) modifies focals, so the next part of the code correctly gets the median focal.)  The bug is just in the translation of the C++ to the Python version of the sample.
Tl;dr:  sort(focals.begin(), focals.end()) in C++ modifies focals so that it is sorted;  sorted(focals) in Python does NOT modify focals;  the correct code to do the same as the C++ version is focals.sort()
		</comment>
	</comments>
</bug>