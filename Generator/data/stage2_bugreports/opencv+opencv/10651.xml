<bug id='10651' author='jdavidberger' open_date='2018-01-20T06:34:22Z' closed_time='2020-08-21T22:18:56Z'>
	<summary>Call chain possible problem warnings when calling into cv::remap with a cv::Mat</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4.0
Operating System / Platform =&gt; Ubuntu 17.10
Compiler =&gt; : GCC 7.2.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Due to how the deferred deallocation queues work / are tracked with UMats, it is possible to get flooded with (what I believe to be) erroneous warning messages:

! OPENCV warning: getUMat()/getMat() call chain possible problem.
!                 Base object is dead, while nested/derived object is still alive or processed.
!                 Please check lifetime of UMat/Mat objects!

In particular, I am finding this issue with cv::remap. See code below. I don't think this is just with remap though; it seems like it can happen if an OCL function calls getUMat on a cv::Mat which doesn't outlive the next UMat alloc call after the OCL function finishes and adds itself to the cleanup queue.
This makes it somewhat difficult to diagnose actual aliasing issues. It seems like UMats that just point to cv::Mats could be made to never enter the dealloc queue (I assume the deferment behavior is for performance, but I also sort of assume there isn't really a performance improvement in this case?). If those deallocations happened at the end of the CL call; it would necessarily be before any cv::Mats passed in had a chance to get dtored.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

#include &lt;opencv2/opencv.hpp&gt;

int main(int argc, char** argv) {
    cv::UMat image(1, 1, CV_8UC3);
    cv::UMat next;

    for(size_t i = 0;i &lt; 50;i++) {
        cv::Mat map(image.size(), CV_32FC2); // Note: Change this to cv::UMat and the warnings stop.
        cv::remap(image, next, map, cv::UMat(), cv::INTER_LINEAR, cv::BORDER_CONSTANT, cv::Scalar(0, 0, 0));
    }

    return 0;
}

	</description>
	<comments>
	</comments>
</bug>