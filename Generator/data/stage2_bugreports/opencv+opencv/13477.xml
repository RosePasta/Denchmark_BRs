<bug id='13477' author='dog-fox' open_date='2018-12-19T07:34:30Z' closed_time='2019-03-15T08:00:15Z'>
	<summary>cuda::createTemplateMatching not work with CUDA10.0</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;- OpenCV =&gt; 3.3.1,  3.4.4,  4.0.0
- Operating System / Platform =&gt; Jetson Xavier (Ubuntu 18.04, CUDA 10)
- Compiler =&gt; g++ 7.3.0
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

"cuda::createTemplateMatching" not work with CUDA10.0.
Although compiling the program works well, if you execute it,
the process stops while the process is activated.
&lt;denchmark-code&gt;cv::Ptr&lt;cv::cuda::TemplateMatching&gt; alg;
alg = cv::cuda::createTemplateMatching(templ_h.type(), CV_TM_CCOEFF_NORMED);
alg-&gt;match(image_h, templ_h, result);
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='dog-fox' date='2019-01-29T00:09:43Z'>
		With CUDA 10.0 on a Pascal GPU(1080 Ti), the problem is not reproduced with this code.
&lt;denchmark-code&gt;#include &lt;opencv2/opencv.hpp&gt;
#include &lt;cuda_runtime.h&gt;

int main()
{
    cv::cuda::GpuMat image_h(1080, 1920, CV_8UC1);
    cv::cuda::GpuMat templ_h(64, 64, CV_8UC1);
    cv::cuda::GpuMat result(1080-64+1, 1920-64+1, CV_32FC1);

    cv::Ptr&lt;cv::cuda::TemplateMatching&gt; alg;
    alg = cv::cuda::createTemplateMatching(templ_h.type(), CV_TM_CCOEFF_NORMED);
    alg-&gt;match(image_h, templ_h, result);

    cudaDeviceSynchronize();
}
&lt;/denchmark-code&gt;

Since Jetson Xavier includes a Volta GPU, the problem might be reproducible only on Volta and later architecture. I will test with a Turing GPU as soon as possible.
Tested on 3.4 branch.
		</comment>
		<comment id='2' author='dog-fox' date='2019-01-29T07:53:22Z'>
		Tested with a Turing GPU(2080 Ti) and CUDA 10.0 but the problem is still not reproducible. &lt;denchmark-link:https://github.com/dog-fox&gt;@dog-fox&lt;/denchmark-link&gt;
 Could you provide a compilable code that reproduces the behavior?
Tested on 3.4 branch.
		</comment>
		<comment id='3' author='dog-fox' date='2019-01-31T14:25:49Z'>
		Hi &lt;denchmark-link:https://github.com/nglee&gt;@nglee&lt;/denchmark-link&gt;
 ,
Below is my code:
&lt;denchmark-link:https://devtalk.nvidia.com/default/topic/1046033/jetson-agx-xavier/when-does-jetpack-support-openvx-1-2-/post/5308404/#5308404&gt;https://devtalk.nvidia.com/default/topic/1046033/jetson-agx-xavier/when-does-jetpack-support-openvx-1-2-/post/5308404/#5308404&lt;/denchmark-link&gt;

thanks.
		</comment>
		<comment id='4' author='dog-fox' date='2019-02-01T02:27:16Z'>
		Hi &lt;denchmark-link:https://github.com/dog-fox&gt;@dog-fox&lt;/denchmark-link&gt;
 , thanks for your test code.
The problem seems to be already solved by &lt;denchmark-link:https://github.com/opencv/opencv/pull/13658&gt;#13658&lt;/denchmark-link&gt;
. After reverting the PR, I was able to reproduce the problem on RTX 2080 Ti, and confirmed that &lt;denchmark-link:https://github.com/opencv/opencv/pull/13658&gt;#13658&lt;/denchmark-link&gt;
 fixed this issue.
It seems that the reason I wasn't able to reproduce the problem before was because I was testing on the latest 3.4 branch.
Would you please try latest 3.4 or master branch?
		</comment>
		<comment id='5' author='dog-fox' date='2019-07-05T11:24:00Z'>
		Hi! I have tried templateMatching in opencv3.4.5  on my computer, which is with cuda10.0 and 2080Ti. I found that the input images must be 32F, and of course the matching method must be changed. But it works! However, I am not quite clear why. Hope this can help you and others!
		</comment>
	</comments>
</bug>