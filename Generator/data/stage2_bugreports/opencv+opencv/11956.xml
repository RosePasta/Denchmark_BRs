<bug id='11956' author='PhilLab' open_date='2018-07-12T16:52:19Z' closed_time='2018-07-17T12:56:08Z'>
	<summary>cv::Matx33f tmp = true compiles</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt;3.20
Operating System / Platform =&gt;Windows 64 Bit
Compiler =&gt; Visual Studio 2013

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;cv::Matx33f tmp = true
&lt;/denchmark-code&gt;

compiles because it uses the single-parameter constructor Matx(_Tp v0); //!&lt; 1x1 matrix.
This is especially a problem here:
&lt;denchmark-code&gt;bool foo(std::string, cv::Matx33f bar, bool foobar = true) {}

foo("awesome", true); // You are not warned that you forgot a parameter
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='PhilLab' date='2018-07-12T17:18:36Z'>
		&lt;denchmark-link:https://github.com/PhilLab&gt;@PhilLab&lt;/denchmark-link&gt;
 Could you check &lt;denchmark-link:https://github.com/opencv/opencv/pull/11957&gt;#11957&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='2' author='PhilLab' date='2018-07-12T19:17:14Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 Thank you, this worked.
Maybe we need the same for  as well? 

		</comment>
		<comment id='3' author='PhilLab' date='2018-07-12T19:34:25Z'>
		It would be nice to have, but it breaks code like this:
&lt;denchmark-code&gt;cv::Mat(cv::Size(10,10), CV_32FC1, 0.0f);
&lt;/denchmark-code&gt;

Please note about "0.0f" instead of "0", because cv::Mat(cv::Size(10,10), CV_32FC1, 0); calls this overload:
&lt;denchmark-code&gt;Mat(Size size, int type, void* data, size_t step=AUTO_STEP);
&lt;/denchmark-code&gt;

So currently I'm always using this safe form:
&lt;denchmark-code&gt;cv::Mat(cv::Size(10,10), CV_32FC1, cv::Scalar::all(0));
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>