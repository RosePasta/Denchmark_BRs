<bug id='6120' author='flx42' open_date='2016-02-16T00:27:08Z' closed_time='2016-02-17T10:13:03Z'>
	<summary>OpenCV 3.1.0 sets errno on successful imdecode</summary>
	<description>
Consider the following simple code where a cv::Mat object is created, encoded to a buffer and then decoded back again:
&lt;denchmark-code&gt;#include &lt;errno.h&gt;
#include &lt;iostream&gt;
#include &lt;opencv2/highgui/highgui.hpp&gt;

int main(int argc, char** argv)
{
    cv::Mat img1(64, 64, CV_8UC3, cv::Scalar(0,0,255));
    std::vector&lt;uint8_t&gt; buf;
    bool b = cv::imencode(".jpg", img1, buf);
    std::cout &lt;&lt; "imencode: " &lt;&lt; b &lt;&lt; std::endl;

    std::cout &lt;&lt; "errno before imdecode: " &lt;&lt; errno &lt;&lt; std::endl;
    cv::Mat img2 = cv::imdecode(buf, -1);
    std::cout &lt;&lt; "errno after imdecode: " &lt;&lt; errno &lt;&lt; std::endl;
    std::cout &lt;&lt; "img2: " &lt;&lt; img2.rows &lt;&lt; "x" &lt;&lt; img2.cols &lt;&lt; std::endl;
}
&lt;/denchmark-code&gt;

Compiled with:
&lt;denchmark-code&gt;g++ opencv.cc `pkg-config opencv --cflags --libs`
&lt;/denchmark-code&gt;

With OpenCV current master (&lt;denchmark-link:https://github.com/opencv/opencv/commit/d1a2c73228bde6b9b678d07460ad71586b8659dc&gt;d1a2c73&lt;/denchmark-link&gt;
) and with tag ,  is set to  ("No such file or directory") after the call to . But the image is not empty, so the calls probably succeeded. This is the output:
&lt;denchmark-code&gt;imencode: 1
errno before imdecode: 0
errno after imdecode: 2
img2: 64x64
&lt;/denchmark-code&gt;

This code works fine with tag 3.0.0.
How I compiled OpenCV:
&lt;denchmark-code&gt;git clone --depth 1 -b 3.1.0 https://github.com/Itseez/opencv.git opencv-3.1/
cd opencv-3.1/
cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON \
      -DWITH_JPEG=ON -DBUILD_JPEG=ON -DWITH_PNG=ON -DBUILD_PNG=ON \
      -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DWITH_FFMPEG=OFF -DWITH_GTK=OFF \
      -DWITH_OPENCL=OFF -DWITH_QT=OFF -DWITH_V4L=OFF -DWITH_JASPER=OFF \
      -DWITH_1394=OFF -DWITH_TIFF=OFF -DWITH_OPENEXR=OFF -DWITH_IPP=OFF -DWITH_WEBP=OFF \
      -DBUILD_opencv_superres=OFF -DBUILD_opencv_java=OFF -DBUILD_opencv_python2=OFF \
      -DBUILD_opencv_videostab=OFF -DBUILD_opencv_apps=OFF -DBUILD_opencv_flann=OFF \
      -DBUILD_opencv_ml=OFF -DBUILD_opencv_photo=OFF -DBUILD_opencv_shape=OFF
sudo make install
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='flx42' date='2016-02-16T08:13:31Z'>
		Is it a problem? As stated in &lt;denchmark-link:http://man7.org/linux/man-pages/man3/errno.3.html&gt;errno documentation&lt;/denchmark-link&gt;
:

Its value is significant only when the return value of the call indicated an error

And from &lt;denchmark-link:http://docs.opencv.org/master/d4/da8/group__imgcodecs.html#ga26a67788faa58ade337f8d28ba0eb19e&amp;gsc.tab=0&gt;imdecode documentation&lt;/denchmark-link&gt;
:

If the buffer is too short or contains invalid data, the function returns an empty matrix (Mat::data==NULL)

		</comment>
		<comment id='2' author='flx42' date='2016-02-16T08:51:26Z'>
		The cause of the problem is in the ExifReader which does not support working with images in memory.
		</comment>
		<comment id='3' author='flx42' date='2016-02-16T17:59:54Z'>
		Thank you for your quick response &lt;denchmark-link:https://github.com/mshabunin&gt;@mshabunin&lt;/denchmark-link&gt;


Is it a problem? As stated in errno documentation: [...]

Sure, but I was not expecting a C++ API call to set errno. We already have two ways to signal errors: return an empty matrix or raise an exception. Since errno is sticky, this can mess up with any code downstream.

And from imdecode documentation:
If the buffer is too short or contains invalid data, the function returns an empty matrix (Mat::data==NULL)

But the returned matrix is actually not empty. And if I examine the matrix it's perfectly valid, as expected. I updated the original description with the output of my program, the result has the proper dimensions: 64x64

The cause of the problem is in the ExifReader which does not support working with images in memory.

I'm confused, so why does the returned matrix looks perfectly fine then?
		</comment>
		<comment id='4' author='flx42' date='2016-02-17T10:13:03Z'>
		&lt;denchmark-link:https://github.com/flx42&gt;@flx42&lt;/denchmark-link&gt;
 , the issue should be fixed now, please check the latest master branch version.

I'm confused, so why does the returned matrix looks perfectly fine then?

Because ExifReader is needed only for orientation tag handling and your image does not have one. I guess if you try to decode jpeg with a valid orientation tag from memory, the image will be rotated.
		</comment>
		<comment id='5' author='flx42' date='2016-02-18T04:54:26Z'>
		It works, thank you for the quick fix! And thank you for educating me üëç
		</comment>
	</comments>
</bug>