<bug id='5243' author='andreygursky' open_date='2015-08-24T16:57:32Z' closed_time='2015-09-04T11:16:35Z'>
	<summary>samples/android/tutorial-4-opencl: compilation and runtime issues</summary>
	<description>
tutorial-4-opencl is great! &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/apavlenko&gt;@apavlenko&lt;/denchmark-link&gt;
 thanks for writing and documenting it!
Compilation/Linking issue
If Android's libOpenCL.so is 1.1, it is missing:

clCreateFromGLTexture()
clReleaseDevice()
clRetainDevice()

While on the desktop one can assume 1.2 is available, on the Android platform one is happy if at least 1.1 is on the board. And it seems that even on the desktop one should count on 1.1 support (issue &lt;denchmark-link:https://github.com/opencv/opencv/issues/5209&gt;#5209&lt;/denchmark-link&gt;
).
I thought, one could workaround this with just:
diff -rupN opencv.orig/modules/core/src/ocl.cpp opencv/modules/core/src/ocl.cpp
--- opencv.orig/modules/core/src/ocl.cpp    2015-08-17 17:43:48.000000000 +0200
+++ opencv/modules/core/src/ocl.cpp 2015-08-24 18:09:01.638202410 +0200
@@ -1344,8 +1344,8 @@ OCL_FUNC(cl_int, clReleaseEvent, (cl_eve

 #endif

-#ifndef CL_VERSION_1_2
-#define CL_VERSION_1_2
+#ifndef CL_VERSION_1_1
+#define CL_VERSION_1_1
 #endif

 #endif // HAVE_OPENCL
but it didn't work out, since then the definition CV_REQUIRE_OPENCL_1_2_ERROR is missing, because also 3rdparty/include/opencl/1.2/CL/cl.h includes #define CL_VERSION_1_2. Thus including 1.2 per default doesn't mean the code can't run on 1.1, but all calls to 1.2-only functions should be checked in runtime not by macros in OpenCV.
So I've patched samples/android/tutorial-4-opencl/jni/CLprocessor.cpp:
diff -rupN opencv.orig/samples/android/tutorial-4-opencl/jni/CLprocessor.cpp opencv/samples/android/tutorial-4-opencl/jni/CLprocessor.cpp
--- opencv.orig/samples/android/tutorial-4-opencl/jni/CLprocessor.cpp   2015-08-15 17:45:09.000000000 +0200
+++ opencv/samples/android/tutorial-4-opencl/jni/CLprocessor.cpp    2015-08-24 18:22:52.518198282 +0200
@@ -211,3 +211,28 @@ void procOCL_OCV(int tex, int w, int h)
     cv::ocl::finish();
     LOGD("uploading results to texture costs %d ms", getTimeInterval(t));
 }
+
+cl_mem
+clCreateFromGLTexture(cl_context   context,
+                      cl_mem_flags flags,
+                      cl_GLenum    target,
+                      cl_GLint     miplevel,
+                      cl_GLuint    texture,
+                      cl_int *     errcode_ret)
+{
+        LOGD("clCreateFromGLTexture tex=%d, context=0x%x", texture, context);
+        return clCreateFromGLTexture2D(context, flags, target, miplevel, texture, errcode_ret);
+        LOGD("clCreateFromGLTexture err=%d", *errcode_ret);
+}
+
+cl_int
+clReleaseDevice(cl_device_id device)
+{
+        return CL_SUCCESS;
+}
+
+cl_int
+clRetainDevice(cl_device_id device)
+{
+        return CL_SUCCESS;
+}
Runtime issue
Now I could run the app on the Samsung Galaxy Alpha (Mali-T628), but there was nothing to see&gt; black screen. In log I found following:
&lt;denchmark-code&gt;D/JNIRenderer( 8604): makeShaderProg: setup GL_VERTEX_SHADER
E/JNIRenderer( 8604): Could not compile shader/program: 0:6: L0002: Undeclared variable 'f'
D/JNIRenderer( 8604): makeShaderProg: setup GL_FRAGMENT_SHADER
D/JNIRenderer( 8604): makeShaderProg: glCreateProgram
E/JNIRenderer( 8604): Could not compile shader/program: Link failed because of missing vertex shader.
&lt;/denchmark-code&gt;

I've patched it as follows:
diff -rupN opencv.orig/samples/android/tutorial-4-opencl/jni/GLrender.cpp opencv/samples/android/tutorial-4-opencl/jni/GLrender.cpp
--- opencv.orig/samples/android/tutorial-4-opencl/jni/GLrender.cpp  2015-08-15 17:45:09.000000000 +0200
+++ opencv/samples/android/tutorial-4-opencl/jni/GLrender.cpp   2015-08-24 18:43:13.538192217 +0200
@@ -1,5 +1,6 @@
-#include &lt;GLES2/gl2.h&gt;
-#include &lt;GLES2/gl2ext.h&gt;
+#include &lt;GLES3/gl3.h&gt;
+#include &lt;GLES3/gl3ext.h&gt;
+#define GL_TEXTURE_EXTERNAL_OES           0x8D65

 #include &lt;opencv2/core.hpp&gt;
 #include &lt;opencv2/imgproc.hpp&gt;
@@ -31,7 +32,7 @@ const char vss[] = \
             "varying vec2 texCoord;\n" \
             "void main() {\n" \
             "  texCoord = vTexCoord;\n" \
-            "  gl_Position = vec4 ( vPosition, 0.0f, 1.0f );\n" \
+            "  gl_Position = vec4 ( vPosition, 0.0, 1.0 );\n" \
             "}";

 const char fssOES[] = \
and now it started to work in CPU mode. By the way, is GLES 2 being used in the code? I thought that arbitrary size textures (not only power of 2) are supported since GLES 3. And camera resolution of 1280x720 results in such unpleasant texture size. Or though the code is GLES 2, but it wouldn't really work on GLES 2 hardware?
More over is the issue with using GL_TEXTURE_EXTERNAL_OES not already obsolete in GLES3?
Now to OpenCL mode. It crashes in clCreateFromGLTexture2D. The reason is failing clCreateContextFromType:
&lt;denchmark-code&gt;D/JNIRenderer( 8604): *** OpenCL info ***
D/JNIRenderer( 8604): OpenCL info: Found 1 OpenCL platforms
D/JNIRenderer( 8604): OpenCL info: Platform[0] = ARM Platform, ver = OpenCL 1.1 , prof = FULL_PROFILE, ext = cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int
32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_byte_addressable_store cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics cl_khr_gl_sharing cl_khr_icd cl_khr_egl_event
 cl_khr_egl_image cl_arm_core_id cl_arm_printf
D/JNIRenderer( 8604): OpenCL info: Device[0] = Mali-T628 (GPU), ext = cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_exte
nded_atomics cl_khr_byte_addressable_store cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics cl_khr_gl_sharing cl_khr_icd cl_khr_egl_event cl_khr_egl_image cl_arm_core_id cl_arm
_printf
D/JNIRenderer( 8604): OpenCL info: Device[1] = Mali-T628 (GPU), ext = cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_exte
nded_atomics cl_khr_byte_addressable_store cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics cl_khr_gl_sharing cl_khr_icd cl_khr_egl_event cl_khr_egl_image cl_arm_core_id cl_arm
_printf
D/JNIRenderer( 8604): *******************
E/JNIRenderer( 8604): cl::Error: clCreateContextFromType (-1000)
D/JNIRenderer( 8604): initCL completed
&lt;/denchmark-code&gt;

Here is a corresponding define:
CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR -1000
which suppose to mean (&lt;denchmark-link:http://streamcomputing.eu/blog/2013-04-28/opencl-1-2-error-codes/&gt;http://streamcomputing.eu/blog/2013-04-28/opencl-1-2-error-codes/&lt;/denchmark-link&gt;
):
&lt;denchmark-code&gt;CL and GL not on the same device (only when using a GPU).
&lt;/denchmark-code&gt;

Hm, what could be here different to Adreno 330 on Sony?
I've checked another CL-GL-interop app &lt;denchmark-link:https://github.com/amirchohan/HDR&gt;https://github.com/amirchohan/HDR&lt;/denchmark-link&gt;
. It passes successfully clCreateContext (&lt;denchmark-link:https://github.com/amirchohan/HDR/blob/master/src/Filter.cpp#L87&gt;https://github.com/amirchohan/HDR/blob/master/src/Filter.cpp#L87&lt;/denchmark-link&gt;
). I've tried to replace clCreateContextFromType by clCreateContext in OpenCV, but it fails also. It's a pity in HDR there are image2d_t &lt;-&gt; texture reading/writing issues (wrong values) in opencl kernels.
	</description>
	<comments>
		<comment id='1' author='andreygursky' date='2015-08-27T10:44:23Z'>
		&lt;denchmark-link:https://github.com/andreygursky&gt;@andreygursky&lt;/denchmark-link&gt;
 , thanks for the feedback.
The GLES20 (but not GLES30) is used in order to support as early Android version as possible, now it's Android-14 (v4.0); and this code really works even on GLES20 (not 30) devices.
		</comment>
		<comment id='2' author='andreygursky' date='2015-08-27T11:13:12Z'>
		partially addressed in &lt;denchmark-link:https://github.com/opencv/opencv/pull/5261&gt;#5261&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='3' author='andreygursky' date='2015-11-21T04:49:28Z'>
		Hi, I've missed a point, as this bug has been closed, since I haven't noticed a corresponding commit with a message containing "fixes #...". So the bug is not really fixed, could you reopen it?
...
Indeed, I was building it and it still can't be linked due to missing OpenCL 1.2 symbols. After workarounding it by introducing wrappers, the same (described in the original report) error occurs during runtime. Meanwhile I've found the solution also for it and only after it the app started working (except of the TAPI mode: last drawn picture before switching remains or just black screen).
I believe it's generally impossible to build an OpenCL 1.2 program and use it with OpenCL 1.1 library.
&lt;denchmark-code&gt;#define CL_USE_DEPRECATED_OPENCL_1_1_APIS /*let's give a chance for OpenCL 1.1 devices*/
&lt;/denchmark-code&gt;

This is intended for OpenCL 1.1 programs to be compiled without rewrite for OpenCL 1.2. And after
&lt;denchmark-code&gt;#define CL_VERSION_1_2
&lt;/denchmark-code&gt;

that's it, it's unlikely to run with OpenCL 1.1 lib.
In order to support both, I believe, one should pack only general code into OpenCV main lib while all differences should go into 1.1 and 1.2 specific libs and decide in runtime which of them to load, e.g. by dlopen() a 1.2 symbol in libOpenCL and if it is missing, load a 1.1 part lib.
		</comment>
		<comment id='4' author='andreygursky' date='2015-11-21T08:11:28Z'>
		
I was building it and it still can't be linked due to missing OpenCL 1.2 symbols.

Did you try to get the Android OpenCL SDK for your device and specify correct OpenCL includes/libraries via CMake &lt;denchmark-link:https://github.com/Itseez/opencv/blob/master/cmake/OpenCVDetectOpenCL.cmake&gt;parameters (with HAVE_OPENCL_STATIC=1)&lt;/denchmark-link&gt;
 for OpenCV and Android application.
What is OpenCL section of CMake output?
		</comment>
		<comment id='5' author='andreygursky' date='2015-11-21T15:34:57Z'>
		
Did you try to get the Android OpenCL SDK for your device

Searching for OpenCL SDK "Samsung Galaxy Alpha" does't reveals anything useful. So I've used a official OpenCL headers and pulled OpenCL lib from the device.

and specify correct OpenCL includes/libraries via CMake parameters (with HAVE_OPENCL_STATIC=1) for OpenCV and Android application.

I haven't specified HAVE_OPENCL_STATIC=1, since I see it for the first time (the importance of this). I've configured the build as follows (using ANDROID_OPENCL_SDK):
&lt;denchmark-code&gt;ANDROID_NDK=/media/portable2/progs/android/android-ndk-r10e ANDROID_SDK=/media/portable2/progs/android/android-sdk-linux cmake -Wno-dev -GNinja -DCMAKE_MAKE_PROGRAM="/usr/bin/ninja" -DCMAKE_TOOLCHAIN_FILE=../opencv-git-master/platforms/android/android.toolchain.cmake -DANDROID_ABI="armeabi-v7a with NEON" -DANDROID_SDK_TARGET=19 -DANDROID_NATIVE_API_LEVEL=14 -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON -DBUILD_ANDROID_EXAMPLES=ON -DINSTALL_ANDROID_EXAMPLES=ON -DWITH_OPENCL=YES -DANDROID_OPENCL_SDK=/media/portable2/progs/android/android-opencl-sdk ../opencv-git-master
&lt;/denchmark-code&gt;

and received:
&lt;denchmark-code&gt;...
--   OpenCL:
--     Version:                     dynamic
--     Include path:                /home/andrey/projects/opencv/opencv-git-master/3rdparty/include/opencl/1.2
--     Use AMDFFT:                  NO
--     Use AMDBLAS:                 NO
...
&lt;/denchmark-code&gt;

I believe the showed path is not really used while building, since all errors I got, pointed to the one in ANDROID_OPENCL_SDK.
		</comment>
		<comment id='6' author='andreygursky' date='2015-11-21T15:55:42Z'>
		&lt;denchmark-link:http://malideveloper.arm.com/resources/sdks/mali-opencl-sdk/&gt;http://malideveloper.arm.com/resources/sdks/mali-opencl-sdk/&lt;/denchmark-link&gt;

(and other links via google search for "Mali-T628 OpenCL SDK")
Try "to play" with CMake parameters, OpenCL: Include path should point to OpenCL 1.1 header.
ANDROID_OPENCL_SDK should point to the same OpenCL SDK which was used for OpenCV build.
		</comment>
		<comment id='7' author='andreygursky' date='2015-11-21T16:00:15Z'>
		Yes, I saw this. Just missed to register to be able to receive it.
You're right, I've used 1.2 official headers. Why? Because in the case of 1.1 headers, I didn't even get to linking and ended with compile time error: unknown function declaration.
		</comment>
		<comment id='8' author='andreygursky' date='2015-11-21T16:09:56Z'>
		Right, registration is optional there.
Could you add a part of build log with error message (with some file names)?
Also force OpenCV "static" link with OpenCL 1.1, dynamic mode will not work.
		</comment>
		<comment id='9' author='andreygursky' date='2015-11-22T02:48:01Z'>
		Yes, sorry, I've confused it with Adreno. I wanted to look into how the made it so well (that you didn't have the problems I'm facing with mali). I'm wondering, why Mali's SDK archive is dated: Jan 31  2013 Mali_OpenCL_SDK_v1.1.0.0a36a7_Linux.tgz (3677260 bytes). It's almost 3 years. mali 4xx, 6xx, 7xx. Strange.
Alexander, are you're sure this forcing is necessary? It's not mentioned in android_ocl_intro.markdown and you with Andrey built it successfully without it, doesn't it? Ok, I gave it a try (-DHAVE_OPENCL_STATIC=1) and the result is the same (dynamic). Looking into &lt;denchmark-link:https://github.com/Itseez/opencv/blob/f019de6900ab66a222f475636942dcb37e98a1af/cmake/OpenCVDetectOpenCL.cmake&gt;https://github.com/Itseez/opencv/blob/f019de6900ab66a222f475636942dcb37e98a1af/cmake/OpenCVDetectOpenCL.cmake&lt;/denchmark-link&gt;

if(APPLE)
...
 set(HAVE_OPENCL_STATIC ON)
...
else(APPLE)
...
  set(HAVE_OPENCL_STATIC OFF)
...
endif(APPLE)
reveals, that HAVE_OPENCL_STATIC is overwritten unconditionally.
Andrey stated that you'd like to support all platforms since 14. But your suggestion to use OpenCL 1.1 for compilation would make libOpenCV.so not 1.2 compatible. That means with new OpenCV release you will provide not only separate Manager's app for different architectures but additionally a separate Manager app for different OpenCL implementations? Writing my &lt;denchmark-link:https://github.com/Itseez/opencv/issues/5243#issuecomment-158652658&gt;&lt;/denchmark-link&gt;
 I thought, you'd like to continue to manage it in one library visible to programmer (that though would use dlopen() libOpenCL,..).
		</comment>
		<comment id='10' author='andreygursky' date='2015-11-22T10:00:33Z'>
		CMake command-line variables are placed directly into "cache" and CMake doesn't override them by simple "set" statement, so it is not a problem (possible problems may become from CMakeCache.txt build file, so build from scratch is preferable).
You need to specify these variables manually, because OpenCVDetectOpenCL.cmake doesn't work properly in case of most part of cross-compilation builds ("Linux host" -&gt; "Android target" is cross-compilation)
OpenCV Manager should not be used in your Android application, you need to place OpenCV custom binaries into application .apk directly and load them from there (try to build OpenCV Android examples  with ANDROID_EXAMPLES_WITH_LIBS=ON CMake parameter and see how in works without OpenCV Manager).
Static OpenCL linkage will still use "dlopen(libOpenCL)" by the system runtime implicitly, so there is no a big problem to share one libOpenCL. "Dynamic" dlopen is used in OpenCV only for cases where libOpenCL.so is missing, and this case should not prevent OpenCV loading by the system.
		</comment>
		<comment id='11' author='andreygursky' date='2015-11-22T14:42:20Z'>
		What I did, was a clean rebuild. CMakeCache.txt contains:
&lt;denchmark-code&gt;//No help, variable specified on the command line.
HAVE_OPENCL_STATIC:UNINITIALIZED=1
&lt;/denchmark-code&gt;

and it seems to be used only for setting opencl library on the Apple platform, since  is included in &lt;denchmark-link:https://github.com/Itseez/opencv/blob/f019de6900ab66a222f475636942dcb37e98a1af/samples/android/tutorial-4-opencl/CMakeLists.txt&gt;https://github.com/Itseez/opencv/blob/f019de6900ab66a222f475636942dcb37e98a1af/samples/android/tutorial-4-opencl/CMakeLists.txt&lt;/denchmark-link&gt;
 unconditionally. ...But also in  and .

You need to specify these variables manually, because...

But if this a requirement for an android crosscompilation, why is this missing in the documentation &lt;denchmark-link:https://github.com/Itseez/opencv/blob/f019de6900ab66a222f475636942dcb37e98a1af/doc/tutorials/introduction/android_binary_package/android_ocl_intro.markdown&gt;https://github.com/Itseez/opencv/blob/f019de6900ab66a222f475636942dcb37e98a1af/doc/tutorials/introduction/android_binary_package/android_ocl_intro.markdown&lt;/denchmark-link&gt;
 and also in this commit message: &lt;denchmark-link:https://github.com/opencv/opencv/commit/24ca6aaadab50aeab8cbe5e4a19a17ae75bd7a38&gt;24ca6aa&lt;/denchmark-link&gt;
?

OpenCV Manager should not be used in your Android application

Yes, I don't using it, I referred to the coming OpenCV release, or this tutorial will remain a special case? By the way prior to the mentioned commit I had to manually copy the library lib/armeabi-v7a/libopencv_java3.so into samples/android/tutorial-4-opencl/.build/libs/armeabi-v7a/, in order it will be included in the .apk.
Despite of CMakeCache.txt containing ANDROID_EXAMPLES_WITH_LIBS:BOOL=OFF I succeeded to build this tutorial (with described workarounds).
Further the build complains there is no cl.hpp. So there is no chance to build with the arm mali sdk, since it is indeed missing cl.hpp. So I really have to use official OpenCL headers.

Static OpenCL linkage will still use "dlopen(libOpenCL)"...

This is a little bit confusing for me, since a common static linkage means all code is included in the binary, while dynamic means a .so file is supplied and must be present at runtime. And dlopen() is a 3rd option, when no linking is needed at all. So OpenCV is using another meanings for this?
		</comment>
		<comment id='12' author='andreygursky' date='2015-11-22T15:19:56Z'>
		
Please don't mix OpenCV build and Android app build. They are different processes which synthetically integrated into one build flow via CMake. HAVE_OPENCL_STATIC is OpenCV only variable, it is not used in this Android app.
Because your special case is not supported from the box, but there are ways to configure it.
This sample has "COPY_LIBS YES", so ANDROID_EXAMPLES_WITH_LIBS is not required here (it is more global option for all samples).
Try to get only cl.hpp (C++ wrappers) from Khronos registry and put in into Mali SDK.
Right, misnamed OpenCL mode is bad thing ("static" means compile-time OpenCL linkage, "dynamic" means - runtime-based OpenCL load). Runtime-based OpenCL loading have been added for OpenCL 1.2 only, so you should to disable it to use somehow OpenCL 1.1.

		</comment>
		<comment id='13' author='andreygursky' date='2016-01-12T10:04:43Z'>
		&lt;denchmark-link:https://github.com/cudnn&gt;@cudnn&lt;/denchmark-link&gt;
, as stated in &lt;denchmark-link:http://docs.opencv.org/master/d7/dbd/tutorial_android_ocl_intro.html&gt;http://docs.opencv.org/master/d7/dbd/tutorial_android_ocl_intro.html&lt;/denchmark-link&gt;
, "To build this JNI code you need OpenCL 1.2 headers from Khronos web site and the libOpenCL.so downloaded from the device you'll run the application."
Snapdragon 810 SOC has Adreno 430 GPU inside, so the OpenCL lib probably can be downloaded from &lt;denchmark-link:https://developer.qualcomm.com/software/adreno-gpu-sdk/tools&gt;https://developer.qualcomm.com/software/adreno-gpu-sdk/tools&lt;/denchmark-link&gt;
 (not sure)/
		</comment>
		<comment id='14' author='andreygursky' date='2016-04-04T20:40:09Z'>
		We had the same problem with android/tutorial-4-opencl, when trying to build the android app for Samsung Galaxy S6 with Mali GPU. The problem, as &lt;denchmark-link:https://github.com/andreygursky&gt;@andreygursky&lt;/denchmark-link&gt;
 mentioned, is that Mali's OpenCL SDK is so outdated, which is incompatible with OpenCV 3.1.0. I tried adding opencl 1.2 header files to Mali OpenCL SDK, and rewrite the 1.2 exclusive function calls into 1.1 compatible ones, neither could be compiled successfully.
Unless ARM releases new OpenCL SDK that supports OpenCL 1.2, it is unlikely to make the tutorial-4-opencl code working on Exynos/Mali devices.
		</comment>
		<comment id='15' author='andreygursky' date='2016-04-04T20:52:18Z'>
		Unfortunately, ARM has no intend to release OpenCL 1.2 support.
&lt;denchmark-link:https://community.arm.com/thread/8223&gt;https://community.arm.com/thread/8223&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='16' author='andreygursky' date='2016-04-05T02:58:15Z'>
		&lt;denchmark-link:https://github.com/chengguo1987&gt;@chengguo1987&lt;/denchmark-link&gt;
:

Unfortunately, ARM has no intend to release OpenCL 1.2 support.
It's almost 3 years. mali 4xx, 6xx, 7xx

And now already 8xx. Incredible, that OpenCL 1.2 support is not even considered (while OpenCL 2.1 is already available).

Unless ARM releases new OpenCL SDK that supports OpenCL 1.2, it is unlikely to make the tutorial-4-opencl code working on Exynos/Mali devices.

Actually I was able to run the demo (&lt;denchmark-link:https://github.com/opencv/opencv/issues/5243#issuecomment-158590430&gt;#5243 (comment)&lt;/denchmark-link&gt;
). Few workarounds and it runs. After considering &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 suggestions (thanks once again!) I could reduce the necessary intervention. Due to lack of interest from itseez (bug not fixed but closed) and no more complaining people it was not worth to describe in detail how to build this.
By the way, recently there has been a related commit (&lt;denchmark-link:https://github.com/opencv/opencv/commit/c35ddcba1a99409aa5bb01e83fa2c1d667d8e085&gt;c35ddcb&lt;/denchmark-link&gt;
), which PR unfortunately didn't mention this issue. I think, it's time to try it out.
		</comment>
		<comment id='17' author='andreygursky' date='2016-04-08T20:05:41Z'>
		So I talked with my co-workers about this and I suggested that we use opencv 2.4 for mali and opencv3.1 for adreno. I know it is ugly but theoretically it will work fine.
		</comment>
		<comment id='18' author='andreygursky' date='2016-12-18T17:24:55Z'>
		Hello everybody, I've read the tutorial and I'm agree with &lt;denchmark-link:https://github.com/andreygursky&gt;@andreygursky&lt;/denchmark-link&gt;
 that &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/apavlenko&gt;@apavlenko&lt;/denchmark-link&gt;
  have done a great job. However, trying to compile the sample on linux I've found some problems:
I've yet compiled OpenCV for android with the following command:
cmake -Wno-dev \
    -DCMAKE_TOOLCHAIN_FILE=../android/android.toolchain.cmake \
    -DANDROID_ABI="armeabi-v7a with NEON" \
    -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON \
    -DBUILD_ANDROID_EXAMPLES=ON \
    -DINSTALL_ANDROID_EXAMPLES=ON \
    -DWITH_OPENCL=YES \
    -DANDROID_OPENCL_SDK=/home/iago/Escritorio/OpenCL/OpenCLv1.2 \
    -DANDROID_NATIVE_API_LEVEL=14 ../..
Where  is a directory which I've been created using the OpenCV headers placed in &lt;denchmark-link:https://github.com/opencv/opencv/tree/master/3rdparty/include/opencl/1.2/CL&gt;https://github.com/opencv/opencv/tree/master/3rdparty/include/opencl/1.2/CL&lt;/denchmark-link&gt;
 and the library extracted from my mobile (/system/vendor/lib/libOpenCL.so).
&lt;denchmark-code&gt;OpenCLv1.2
├── include
│   ├── CL
│   │   ├── cl.hpp
│   │   ├ ...
└── lib
    └── armeabi-v7a
        └── libOpenCL.so
&lt;/denchmark-code&gt;

After that comes the problems:

The headers of OpenCL v1.2 provided by OpenCV make use of the #include &lt;GL/gl.h&gt; which is not avaliable on Android, I should use &lt;GLES/gl.h&gt;
And other added problem is that the SIMD instructions imported with #include &lt;emmintrin.h&gt; are also not available on Android and I should use NEON instructions.

So, I'd be really grateful if you could explain me what do you have in your ANDROID_OPENCL_SDK. I've also checked my &lt;denchmark-link:https://developer.qualcomm.com/software/adreno-gpu-sdk/tools&gt;Adreno 320 SDK&lt;/denchmark-link&gt;
 but it only contains Graphic utilities and demos, no OpenCL tools.
Thank you in advance, Iago.
		</comment>
		<comment id='19' author='andreygursky' date='2016-12-19T12:24:11Z'>
		Hi, I'm glad, you've found this issue.
I'm not sure I can help, but in any case it would be helpful if you specify what version of OpenCV you are using (particular release or recent git) and what version of Android NDK.
		</comment>
		<comment id='20' author='andreygursky' date='2016-12-19T13:05:56Z'>
		Yes, of course:

OpenCV version: 3.1.0 - Commit: 36b5abf
NDK: r10d
OS: Ubuntu 16.04.1 LTS

I've also found this interesting tutorial about &lt;denchmark-link:https://www.khronos.org/registry/cl/specs/opencl-cplusplus-1.2.pdf&gt;The OpenCL C++ Wrapper API&lt;/denchmark-link&gt;
, and thank of it I've found a this other (official) and more recent &lt;denchmark-link:https://www.khronos.org/registry/cl/api/1.2/cl.hpp&gt;cl.hpp file&lt;/denchmark-link&gt;
.
I'm trying to remplace the current OpenCV cl.hpp file by the newer but unfortunately I have not been able to compile the example yet.
		</comment>
		<comment id='21' author='andreygursky' date='2016-12-29T09:21:15Z'>
		Finally got it, compiling with the &lt;denchmark-link:https://gist.github.com/iago-suarez/13c82b416ce6b07a93b5b6eee6bd29f3&gt;following instructions&lt;/denchmark-link&gt;

		</comment>
		<comment id='22' author='andreygursky' date='2016-12-30T12:13:37Z'>
		&lt;denchmark-link:https://github.com/iago-suarez&gt;@iago-suarez&lt;/denchmark-link&gt;
  Finally got it, compiling with the following instructions,i can't open
		</comment>
		<comment id='23' author='andreygursky' date='2016-12-30T14:11:21Z'>
		&lt;denchmark-link:https://github.com/cudnn&gt;@cudnn&lt;/denchmark-link&gt;
 I don't know what can be happening, the link works fine to me. I paste here the full gist:
&lt;denchmark-h:h1&gt;Setting Up OpenCL for OpenCV on Android, the full story&lt;/denchmark-h&gt;

The tutorial &lt;denchmark-link:http://docs.opencv.org/trunk/d7/dbd/tutorial_android_ocl_intro.html&gt;Use OpenCL in Android camera preview based CV application&lt;/denchmark-link&gt;
 show us how we can use the Transparent API to dramatically increase the performance of some expensive operations.
The first step in order to be able to execute the &lt;denchmark-link:https://github.com/opencv/opencv/tree/73a8fa8e6e50660a671620563156b8d7cddecf82/samples/android/tutorial-4-opencl&gt;tutorial example&lt;/denchmark-link&gt;
 is to re-compile opencv with the correct flags:
# Download the necessary code
cd graffter/libs/
mkdir contrib_release_armv7a &amp;&amp; contrib_release_armv7a
git clone git@github.com:opencv/opencv.git
mv opencv opencv-3.1.0
git clone git@github.com:opencv/opencv_contrib.git

# Creating our custom OpenCL SDK
export OPENCL_SDK=~/graffter/libs/MotoX_OpenCL_SDK
mkdir $OPENCL_SDK &amp;&amp; cd $OPENCL_SDK
mkdir lib include
# Copy the OpenCL headers used to compile OpenCV 
cp -r ~/graffter/libs/opencv-3.1.0/3rdparty/include/opencl/1.2/CL/ include/
# Download the multiplattaform version of the C++ OpenCL Wrapper
cd include/CL/ &amp;&amp; wget https://www.khronos.org/registry/cl/api/1.2/cl.hpp &amp;&amp; cd ../..
# Connect you OpenCL supported android device and use adb to get the library 
adb pull /system/vendor/lib/libOpenCL.so lib
# Set the folder where we are going to compile opencv, it will be used when we run the ndk-build of the project
export OPENCV_ANDROID_SDK=~/graffter/libs/contrib_release_armv7a
cd $OPENCV_ANDROID_SDK

# Now configure and compile opencv
cmake -Wno-dev \
-DCMAKE_TOOLCHAIN_FILE=../opencv-3.1.0/platforms/android/android.toolchain.cmake \
-DANDROID_ABI="armeabi-v7a with NEON" \
-DCMAKE_BUILD_WITH_INSTALL_RPATH=ON \
-DBUILD_ANDROID_EXAMPLES=ON \
-DINSTALL_ANDROID_EXAMPLES=ON \
-DWITH_OPENCL=YES \
-DANDROID_OPENCL_SDK=$OPENCL_SDK \
-DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules \
-DANDROID_NATIVE_API_LEVEL=14 \
-DANDROID_SDK_TARGET=24 \
../opencv-3.1.0
make -j8

# Now you would be able to install the generated APK with:
adb install samples/android/tutorial-4-opencl/.build/bin/example-tutorial-4-opencl-debug.apk
Notes:

Here I'm compiling with the contrib modules, but if you don't need them just remove the line "-DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules "
Here I'm only building the library for ARMv7a devices with NEON support, but you should add other architectures in the string. The full list is:


armeabi-v7a; armeabi; armeabi-v7a with NEON; armeabi-v7a-hard with NEON; armeabi-v7a with VFPV3; armeabi-v6 with VFP; arm64-v8a x86 x86_64 mips mips64"


-DANDROID_NATIVE_API_LEVEL=14 Is necessary because lower API_LEVEL will cause problems compiling the tutorial-4-opencl here.

		</comment>
		<comment id='24' author='andreygursky' date='2016-12-31T03:56:43Z'>
		thanks vary mach
		</comment>
		<comment id='25' author='andreygursky' date='2018-09-30T20:13:43Z'>
		&lt;denchmark-link:https://github.com/iago-suarez&gt;@iago-suarez&lt;/denchmark-link&gt;
 why do we need to recompile opencv?
		</comment>
		<comment id='26' author='andreygursky' date='2018-10-01T09:30:27Z'>
		Because the flag -DWITH_OPENCL is by default false for Android.
See:
&lt;denchmark-link:https://github.com/opencv/opencv/blob/master/platforms/android/build_sdk.py&gt;https://github.com/opencv/opencv/blob/master/platforms/android/build_sdk.py&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>