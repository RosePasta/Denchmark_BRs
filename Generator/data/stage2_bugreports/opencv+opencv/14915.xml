<bug id='14915' author='JoogsWasTaken' open_date='2019-06-27T11:01:51Z' closed_time='2019-10-30T07:07:44Z'>
	<summary>JavaCamera2View incorrect camera output caused by wrong preview size</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.1.0
Operating System / Platform =&gt; Android API Level 28 (Patch: June 1st, 2019)
Compiler =&gt; clang++ 7.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Using JavaCamera2View will output a faulty camera image as shown below if the aspect ratio of the preview size, calculated by calcPreviewSize, does not match up with the actual screen aspect ratio.



For reference, the device I tested this on is a Xiaomi Mi A1 with the latest patches installed. It has a device screen size of 1920x1080. The calculated preview size, which is also being used in the image above, is 1440x1080. This results in an aspect ratio of 4:3 as opposed to the screen aspect ratio of 16:9. The highest preview size with the same aspect ratio as provided by the device is 1280x720. Here's a small snippet of the device's reported available preview sizes:

1440x1080 (automatically picked as "best")
1280x960
1280x720 (should be picked as "best")
1280x640
864x480
...

This behavior is due to  assuming that the first output size provided by  &lt;denchmark-link:https://github.com/opencv/opencv/blob/b95e93c20ab3df34c110385539952e5abcff3715/modules/java/generator/android-21/java/org/opencv/android/JavaCamera2View.java#L264&gt;can be assumed as the "best" preview size from the start&lt;/denchmark-link&gt;
. Deleting the two lines before looping over all available preview sizes fixes this behavior. Just for reference, the image below is the same scene as above but with the two lines deleted.



I'm willing to submit a PR since this fix is just deleting two lines of code. However I'd like to see if someone is able to confirm this behavior.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Haven't found a way to reproduce it yet because it seems to be an issue that heavily depends on the device (and I only have one device to test it on). However overriding the call to calcPreviewSize in connectCamera with dimensions smaller than the device's screen dimensions should evoke this behavior.
	</description>
	<comments>
		<comment id='1' author='JoogsWasTaken' date='2019-06-27T11:10:50Z'>
		
What if nothing pass inner check condition? Currently it tries to pick "the first" from Android system.
The first image is broken completely. All mentioned resolutions should work without image corruption. What is your device? Android version?

		</comment>
		<comment id='2' author='JoogsWasTaken' date='2019-06-27T11:38:58Z'>
		

What if nothing pass inner check condition? Currently it tries to pick "the first" from Android system.


I believe it's unlikely that none of the provided preview sizes will somewhat match the device screen size. However, I guess you can assign the first size as the "best" size if none of the preview sizes pass the inner checks.


The first image is broken completely. All mentioned resolutions should work without image corruption. What is your device? Android version?


As stated above, the device is a Xiaomi Mi A1 running on Android 9, API level 28.
		</comment>
		<comment id='3' author='JoogsWasTaken' date='2019-06-27T14:39:34Z'>
		I dug around some more and I found out about a few more quirks.

The camera output will be just as broken if the grayscale image is requested.
I went through all preview sizes manually to see if there's a correlation between preview size and a broken camera output. Unfortunately I can't seem to find a pattern. Table will be provided further below.
Green, diagonal lines become apparent as the resolution is being lowered. They also appear in higher resolutions but just aren't that noticeable.

&lt;denchmark-link:https://user-images.githubusercontent.com/22560425/60274739-e30b7100-98f8-11e9-881e-0b2fcf46e266.png&gt;&lt;/denchmark-link&gt;

Here you can see the green lines at one of the lower resolutions. Digging around some more, I found &lt;denchmark-link:https://github.com/opencv/opencv/issues/11261&gt;issue #11261&lt;/denchmark-link&gt;
 which points at the same bug at the same line. A possible fix could look something like this.
bestWidth = -1;
bestHeight = -1;
for (android.util.Size sz : sizes) {
	int w = sz.getWidth(), h = sz.getHeight();
	Log.d(LOGTAG, "trying size: " + w + "x" + h);
	if (width &gt;= w &amp;&amp; height &gt;= h &amp;&amp; bestWidth &lt;= w &amp;&amp; bestHeight &lt;= h
			&amp;&amp; Math.abs(aspect - (float) w / h) &lt; 0.001) {
		bestWidth = w;
		bestHeight = h;
	}
}
// Fallback for when no sizes pass the checks.
if (bestWidth == -1 &amp;&amp; bestHeight == -1) {
	bestWidth = sizes[0].getWidth();
	bestHeight = sizes[0].getHeight();
}
That doesn't fix the broken preview on some resolutions but it fixes the behavior of calcPreviewSize. I'm attaching my findings for preview sizes and broken previews below. Maybe someone else can spot a pattern.



Preview size
Preview broken?




1440x1080
yes


1280x960
no


1280x720
no


1280x640
no


864x480
yes


640x640
no


800x480
yes


720x480
yes


768x432
no


640x480
no


480x640
yes


576x432
no


640x360
no


480x360
yes


480x320
yes


384x288
no


352x288
yes


320x240
no


240x320
yes


240x160
yes


176x144
yes


144x176
yes


160x120
yes



		</comment>
		<comment id='4' author='JoogsWasTaken' date='2019-08-23T14:17:56Z'>
		My JavaCamera2View output still broken with some special preview size.My device is XiaoMi Mi 8,Android 8.
Any progress?
		</comment>
		<comment id='5' author='JoogsWasTaken' date='2019-08-23T14:21:14Z'>
		And I found if I use Google Camera2 Sample Code,like Camera2Basic,the output will not broken.
Why JavaCamera2View output broken? What is the reason for this?
		</comment>
		<comment id='6' author='JoogsWasTaken' date='2019-08-26T14:14:35Z'>
		I haven't found time to look further into this issue yet. I'm suspecting that it has something to do with Utils.matToBitmap() and furthermore the native call to nMatToBitmap2(). However I'm no expert in image processing. Android is my domain.
		</comment>
		<comment id='7' author='JoogsWasTaken' date='2019-08-27T09:50:20Z'>
		Try to add more logging to rgba() and gray() methods of JavaCamera2Frame class (


opencv/modules/java/generator/android-21/java/org/opencv/android/JavaCamera2View.java


        Lines 329 to 407
      in
      a7b954f






 private class JavaCamera2Frame implements CvCameraViewFrame { 



 @Override 



 public Mat gray() { 



 Image.Plane[] planes = mImage.getPlanes(); 



 int w = mImage.getWidth(); 



 int h = mImage.getHeight(); 



 ByteBuffer y_plane = planes[0].getBuffer(); 



         mGray = new Mat(h, w, CvType.CV_8UC1, y_plane); 



 return mGray; 



     } 



 



 @Override 



 public Mat rgba() { 



 Image.Plane[] planes = mImage.getPlanes(); 



 int w = mImage.getWidth(); 



 int h = mImage.getHeight(); 



 int chromaPixelStride = planes[1].getPixelStride(); 



 



 



 if (chromaPixelStride == 2) { // Chroma channels are interleaved 



             assert(planes[0].getPixelStride() == 1); 



             assert(planes[2].getPixelStride() == 2); 



 ByteBuffer y_plane = planes[0].getBuffer(); 



 ByteBuffer uv_plane1 = planes[1].getBuffer(); 



 ByteBuffer uv_plane2 = planes[2].getBuffer(); 



 Mat y_mat = new Mat(h, w, CvType.CV_8UC1, y_plane); 



 Mat uv_mat1 = new Mat(h / 2, w / 2, CvType.CV_8UC2, uv_plane1); 



 Mat uv_mat2 = new Mat(h / 2, w / 2, CvType.CV_8UC2, uv_plane2); 



 long addr_diff = uv_mat2.dataAddr() - uv_mat1.dataAddr(); 



 if (addr_diff &gt; 0) { 



                 assert(addr_diff == 1); 



 Imgproc.cvtColorTwoPlane(y_mat, uv_mat1, mRgba, Imgproc.COLOR_YUV2RGBA_NV12); 



             } else { 



                 assert(addr_diff == -1); 



 Imgproc.cvtColorTwoPlane(y_mat, uv_mat2, mRgba, Imgproc.COLOR_YUV2RGBA_NV21); 



             } 



 return mRgba; 



         } else { // Chroma channels are not interleaved 



 byte[] yuv_bytes = new byte[w*(h+h/2)]; 



 ByteBuffer y_plane = planes[0].getBuffer(); 



 ByteBuffer u_plane = planes[1].getBuffer(); 



 ByteBuffer v_plane = planes[2].getBuffer(); 



 



             y_plane.get(yuv_bytes, 0, w*h); 



 



 int chromaRowStride = planes[1].getRowStride(); 



 int chromaRowPadding = chromaRowStride - w/2; 



 



 int offset = w*h; 



 if (chromaRowPadding == 0){ 



 // When the row stride of the chroma channels equals their width, we can copy 



 // the entire channels in one go 



                 u_plane.get(yuv_bytes, offset, w*h/4); 



                 offset += w*h/4; 



                 v_plane.get(yuv_bytes, offset, w*h/4); 



             } else { 



 // When not equal, we need to copy the channels row by row 



 for (int i = 0; i &lt; h/2; i++){ 



                     u_plane.get(yuv_bytes, offset, w/2); 



                     offset += w/2; 



 if (i &lt; h/2-1){ 



                         u_plane.position(u_plane.position() + chromaRowPadding); 



                     } 



                 } 



 for (int i = 0; i &lt; h/2; i++){ 



                     v_plane.get(yuv_bytes, offset, w/2); 



                     offset += w/2; 



 if (i &lt; h/2-1){ 



                         v_plane.position(v_plane.position() + chromaRowPadding); 



                     } 



                 } 



             } 



 



 Mat yuv_mat = new Mat(h+h/2, w, CvType.CV_8UC1); 



             yuv_mat.put(0, 0, yuv_bytes); 



 Imgproc.cvtColor(yuv_mat, mRgba, Imgproc.COLOR_YUV2RGBA_I420, 4); 



 return mRgba; 



         } 



     } 




) to determine which parameters and cases cause problems.
As I can see the  object has &lt;denchmark-link:https://developer.android.com/reference/android/media/Image.Plane.html#getRowStride()&gt;getRowStride()&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://developer.android.com/reference/android/media/Image.Plane.html#getPixelStride()&gt;getPixelStride()&lt;/denchmark-link&gt;
 methods which are not taken in account when Mat object is created.
		</comment>
		<comment id='8' author='JoogsWasTaken' date='2019-08-27T14:01:51Z'>
		Will do. I'm a bit preoccupied at the moment but I'll try and get to the root of this as soon as possible and return my findings.
		</comment>
		<comment id='9' author='JoogsWasTaken' date='2019-10-22T19:45:25Z'>
		Is there any way to solve this?
		</comment>
		<comment id='10' author='JoogsWasTaken' date='2019-10-25T13:21:49Z'>
		Continuing on this, i have tested the JavaCamera2View on couple of android phones.
In a xperia z5 i got this issue, on a samsung A10 it works fine.
Might it be related to resolution or image format related?
How could i diagnose the problem?
		</comment>
		<comment id='11' author='JoogsWasTaken' date='2019-10-26T10:10:14Z'>
		Sorry for the delay on this one. I haven't forgotten about this issue. In the meanwhile I updated OpenCV for Android to 4.1.1 locally (and finished up my thesis, hence the delay) to see if this issue persists. And I found that the same code I used to assemble the data in the table above broke, as in the camera preview turns black and the view is stuck in a "stopped" state. I reverted it back to 4.1.0 because that might be deserving of its own separate issue. However I copied the code for the JavaCamera2Frame from the current master into the 4.1.0 version to make sure there's no difference when logging the image plane properties.
Long story short, I extended the table above and there is a pattern. All images have three planes. The first plane has a pixel stride of 1, the second and the third 2 each. Makes sense and lines up with the raw image consisting of interleaved YUV planes. However the camera preview breaks when the image width doesn't line up with the row stride. I found that the row stride is always a multiple of 64 and doesn't always match all available preview widths. The following table shows the row strides for all planes of each preview size.



Preview size
Preview broken?
Row stride




1440x1080
yes
1472


1280x960
no
1280


1280x720
no
1280


1280x640
no
1280


864x480
yes
896


640x640
no
640


800x480
yes
832


720x480
yes
768


768x432
no
768


640x480
no
640


480x640
yes
512


576x432
no
576


640x360
no
640


480x360
yes
512


480x320
yes
512


384x288
no
384


352x288
yes
384


320x240
no
320


240x320
yes
256


240x160
yes
256


176x144
yes
192


144x176
yes
192


160x120
yes
192



The Android docs say this about the function getRowStride.

This is the distance between the start of two consecutive rows of pixels in the image.

Now does that mean that the planes are actually larger than the image size suggests? Because if so, the JavaCamera2Frame uses the image dimensions instead of the plane dimensions and that may screw up the conversion from YUV to RGBA.
		</comment>
		<comment id='12' author='JoogsWasTaken' date='2019-10-27T12:39:07Z'>
		@DorJoogl Thank you for investigation!
I have prepared patch &lt;denchmark-link:https://github.com/opencv/opencv/issues/15732&gt;#15732&lt;/denchmark-link&gt;
 . Unfortunately, I can't validate it because I don't have these devices in my hands.
Could you please take a look on this patch? It requires updated libopencv_java.so - you need to build from sources or get from OpenCV CI (link is available on PR page - 218Mb)
/cc &lt;denchmark-link:https://github.com/floe&gt;@floe&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/Victorlouisdg&gt;@Victorlouisdg&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='JoogsWasTaken' date='2019-10-28T08:30:53Z'>
		Seems to be working on my end. The view now properly shows the camera preview for the sizes that used to be broken. Haven't gotten to test out all the sizes yet but I'm confident that it works.
Edit: I also found out that the camera view being stuck was caused by me not calling setCameraPermissionGranted() on the view. Just for reference in case anyone stumbles upon this issue.
		</comment>
		<comment id='14' author='JoogsWasTaken' date='2019-10-28T20:49:32Z'>
		I tested it in the device affected. It works!
Now when the fix arrives on stable branch :)
		</comment>
	</comments>
</bug>