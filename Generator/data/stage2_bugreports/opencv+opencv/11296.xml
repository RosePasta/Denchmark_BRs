<bug id='11296' author='hovnatan' open_date='2018-04-11T12:07:01Z' closed_time='2018-04-23T19:03:02Z'>
	<summary>segmentation fault on cv::morphologyEx on large images</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4.1
Operating System / Platform =&gt; Ubuntu 18.04 x64
Compiler =&gt; gcc 7.3.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Segmentation fault on cv::morphologyEx on large, e.g., 25000x25000, image.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

This program
&lt;denchmark-code&gt;int main() {
  cv::Mat1f m(cv::Size(25000, 25000), 0);
  cv::Mat kernel_closing = cv::getStructuringElement(cv::MORPH_RECT, cv::Size(5, 5));
  cv::Mat result_mask;
  cv::morphologyEx(m, result_mask, cv::MORPH_CLOSE, kernel_closing);
  return 0;
}
&lt;/denchmark-code&gt;

segmentation faults with this stack:
&lt;denchmark-link:https://user-images.githubusercontent.com/8426582/38615498-efa3aa62-3da1-11e8-9f3c-29f07c9c3526.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='hovnatan' date='2018-04-11T12:32:39Z'>
		Confirmed.
Workaround is to turn off IPP AVX optimizations via environment variable OPENCV_IPP=sse42 or disable IPP completely: OPENCV_IPP=disabled
/cc &lt;denchmark-link:https://github.com/lupustr3&gt;@lupustr3&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='hovnatan' date='2018-04-11T13:22:58Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 Thanks for the reply. Now our program (commercial, cannot share) works with both  and , but gives differing results. Any idea why can this happen?
		</comment>
		<comment id='3' author='hovnatan' date='2018-04-11T13:37:43Z'>
		Morphology operations itself must be bit-exact (result should not be affected by optimization libraries or running on different platforms like x86/ARM).
But in general, the most part of computer vision operations are not bit-exact, if they uses somehow floating-points internally (rounding rules, errors).
Examples of such operations are: resize, floating-point filters, cvtColor (especially Lab, XYZ and other color spaces) and many others.
Also you could try to disable IPP for this call only (thread-local change):
&lt;denchmark-code&gt;bool useIPP = cv::ipp::useIPP();
cv::ipp::setUseIPP(false);
... morphology call ...
if (useIPP) cv::ipp::setUseIPP(true);
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='hovnatan' date='2018-04-11T14:33:56Z'>
		&lt;denchmark-link:https://github.com/hovnatan&gt;@hovnatan&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 Thanks for the report. We will investigate this issue in IPP.
		</comment>
		<comment id='5' author='hovnatan' date='2018-04-12T06:11:00Z'>
		System information (version)
OpenCV =&gt; 3.4.1
Operating System / Platform =&gt; Windows 10 64bit
Compiler =&gt; MSVC
Is mine the same error ? I get a similar segmentation fault at morphology operation, my call stack is as follows,
&lt;denchmark-code&gt;bulls-eye.exe!cv::error(class cv::Exception const &amp;)	C++
bulls-eye.exe!cv::error(int,class cv::String const &amp;,char const *,char const *,int)	C++
bulls-eye.exe!cv::MorphFilter&lt;struct cv::MinOp&lt;unsigned char&gt;,struct cv::MorphIVec&lt;struct cv::VMin8u&gt; &gt;::MorphFilter&lt;struct cv::MinOp&lt;unsigned char&gt;,struct cv::MorphIVec&lt;struct cv::VMin8u&gt; &gt;(class cv::Mat const &amp;,class cv::Point_&lt;int&gt;)	C++
bulls-eye.exe!cv::getMorphologyFilter(int,int,class cv::_InputArray const &amp;,class cv::Point_&lt;int&gt;)	C++
bulls-eye.exe!cv::createMorphologyFilter(int,int,class cv::_InputArray const &amp;,class cv::Point_&lt;int&gt;,int,int,class cv::Scalar_&lt;double&gt; const &amp;)	C++
bulls-eye.exe!cv::morphologyEx(class cv::_InputArray const &amp;,class cv::_OutputArray const &amp;,int,class cv::_InputArray const &amp;,class cv::Point_&lt;int&gt;,int,int,class cv::Scalar_&lt;double&gt; const &amp;)	C++
bulls-eye.exe!cv::hal::morph(int,int,int,unsigned char *,unsigned __int64,unsigned char *,unsigned __int64,int,int,int,int,int,int,int,int,int,int,int,unsigned char *,unsigned __int64,int,int,int,int,int,double const * const,int,bool)	C++
bulls-eye.exe!cv::erode(class cv::_InputArray const &amp;,class cv::_OutputArray const &amp;,class cv::_InputArray const &amp;,class cv::Point_&lt;int&gt;,int,int,class cv::Scalar_&lt;double&gt; const &amp;)	C++
bulls-eye.exe!using_HSV_color_space(cv::Mat image, bool display, bool save) Line 629	C++
bulls-eye.exe!fit_circles_check(cv::Mat image) Line 1305	C++
bulls-eye.exe!option8(std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; _path) Line 2871	C++
bulls-eye.exe!test_fit_circles() Line 3005	C++
bulls-eye.exe!main() Line 3023	C++
[External Code]
&lt;/denchmark-code&gt;

The error on the console is OpenCV(3.4.1) Error: Assertion failed (_kernel.type() == 0) in cv::MorphFilter&lt;struct cv::MinOp&lt;unsigned char&gt;,struct cv::MorphIVec&lt;struct cv::VMin8u&gt; &gt;::MorphFilter, file c:\opencv\opencv-3.4.1\modules\imgproc\src\morph.cpp, line 787
I am not able to solve the error by using the solution provided in this thread
		</comment>
		<comment id='6' author='hovnatan' date='2018-04-12T09:36:14Z'>
		&lt;denchmark-link:https://github.com/madhusudangr&gt;@madhusudangr&lt;/denchmark-link&gt;
 No, your problem is not related to this issue. Error massage says that you should pass kernel with CV_8UC1 type.
Usage questions should go to Users OpenCV Q/A forum: &lt;denchmark-link:http://answers.opencv.org&gt;http://answers.opencv.org&lt;/denchmark-link&gt;

P.S. I will remove these two last messages from this issue tomorrow.
		</comment>
		<comment id='7' author='hovnatan' date='2018-04-12T11:07:04Z'>
		I also was faced with the same problem.
Python code sample:
&lt;denchmark-code&gt;import cv2
import numpy as np

mask1 = np.zeros((46341, 46341), np.uint8)
mask2 = np.zeros((46342, 46342), np.uint8)
kernel = np.ones((3, 3), np.uint8)

mask1 = cv2.erode(mask1, kernel, iterations=1)
# works well
print("erode 1 complete") 

mask2 = cv2.erode(mask2, kernel, iterations=1)
# Segmentation fault
print("erode 2 complete")
&lt;/denchmark-code&gt;

Compiling opencv without IPP solved problem for me.
		</comment>
	</comments>
</bug>