<bug id='6614' author='LinkHS' open_date='2016-06-01T03:15:41Z' closed_time='2017-01-31T12:20:15Z'>
	<summary>[keans] "best_compactness" will not be updated in last iteration of for loop</summary>
	<description>
&lt;denchmark-h:h3&gt;Please state the information for your system&lt;/denchmark-h&gt;


OpenCV version: 3.1

&lt;denchmark-h:h3&gt;In which part of the OpenCV library you got the issue?&lt;/denchmark-h&gt;


core
kmeans

&lt;denchmark-h:h3&gt;Additional description&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;double cv::kmeans( InputArray _data, int K,
                   InputOutputArray _bestLabels,
                   TermCriteria criteria, int attempts,
                   int flags, OutputArray _centers )
&lt;/denchmark-code&gt;

the fucntion double cv::kmeans( InputArray _data, int K...) in modules\core\src\kmeans.cpp returns best_compactness at the end as shown below:
&lt;denchmark-code&gt;        if( compactness &lt; best_compactness )
        {
            best_compactness = compactness;
            if( _centers.needed() )
                centers.copyTo(_centers);
            _labels.copyTo(best_labels);
        }
    }

    return best_compactness;
&lt;/denchmark-code&gt;

But compactness will not be updated in last iteration if  meet the condition ++iter == MAX(criteria.maxCount, 2) || max_center_shift &lt;= criteria.epsilon.
&lt;denchmark-code&gt;            if( ++iter == MAX(criteria.maxCount, 2) || max_center_shift &lt;= criteria.epsilon )
                break;

            // assign labels
            Mat dists(1, N, CV_64F);
            double* dist = dists.ptr&lt;double&gt;(0);
            parallel_for_(Range(0, N),
                         KMeansDistanceComputer(dist, labels, data, centers));
            compactness = 0;
            for( i = 0; i &lt; N; i++ )
            {
                compactness += dist[i];
            }
&lt;/denchmark-code&gt;

I think KMeansDistanceComputer(dist, labels, data, centers)); is needed because the centers of each clusters has been re-computed before checking the if condition.
To make best_compactness be more accuate, should we move the condition check after updating compactness?
Dawei
	</description>
	<comments>
		<comment id='1' author='LinkHS' date='2016-08-25T12:18:46Z'>
		Hi mshabunin maked the required changes for' [keans] "best_compactness" ',please review and merge my RFC  PR &lt;denchmark-link:https://github.com/opencv/opencv/pull/7319&gt;#7319&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='LinkHS' date='2016-09-28T07:52:32Z'>
		As far as I could see algorithm do the following(for each attempt):
Stage 0: Prepare initial locations c(0) for cluster centers(randomly or in accordance with a-priory labels)
Stage 1a(KMeansDistanceComputer): Prepare new label set l(1) in accordance with distances to c(0) and measure best compactness as f( l(1), c(0) )
Stage 1b: Update cluster center locations to c(1) in accordance with l(1) and ensure that all K clusters are not empty(since caller requested K clusters)
Stage i(i = 2 to n, applicable if termination criteria for iteration is higher than 2): repeat actions from 1a,1b producing l(i), f( l(i), c(i-1) ) and c(i)
Original implementation stops after evaluating Stage ib. That will be exactly the right result if it stops due to accuracy criteria(so c(i) is equal to c(i-1) and compactness measure is the same). On the other hand if we stop due to iteration limit the result is just an approximation to the right one and evaluated measure is some approximation to the within-cluster sum of squares so the decision to return f( l(i+1), c(i) ) instead of f( l(i), c(i-1) ) is rather a question of iteration counting agreement.
Of course we could update the function to evaluate the compactness measure strictly as within-cluster sum of squares f( l(i), c(i) ) but that will require additional processing time and provide improvement for iteration terminated evaluations only which anyway produce approximated result.
IMO it would be better to retain the function as is and add a note to function documentation stating how the compactness measure is evaluated in case of iteration based termination.
		</comment>
	</comments>
</bug>