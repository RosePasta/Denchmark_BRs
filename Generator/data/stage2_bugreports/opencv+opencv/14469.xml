<bug id='14469' author='nightgryphon' open_date='2019-05-02T02:18:14Z' closed_time='2019-09-04T16:12:54Z'>
	<summary>calibrateCameraRO fails with iFixedPoint&amp;gt;0 (new method for imperfect target)</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.1.0
Operating System / Platform =&gt; Windows 64 Bit
Compiler =&gt; Python 2.7.16 (v2.7.16:413a49145e, Mar  4 2019, 01:37:19) [MSC v.1500 64 bit (AMD64)] on win32

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Possible bug in calib3d calibrateCameraRO.
I'm trying to use the new more accurate camera calibration method [182] "More accurate pinhole camera calibration with imperfect planar target." as described in documentation and camera calibration tutorial. When i use calibrateCameraRO for old slyle camera calibration with iFixedPoint = -1 everything work fine. But the same with iFixedPoint = pattern_width-1 fails with an error:
&lt;denchmark-code&gt;cv2.error: OpenCV(4.1.0) C:\projects\opencv-python\opencv\modules\core\src\matmul.dispatch.cpp:337: error: (-215:Assertion failed) type == B.type() in function 'cv::gemm'
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Using samples code samples/python/calibrate.py add this line after call to calibrateCamera at line 100:
&lt;denchmark-code&gt;    rms, camera_matrix, dist_coefs, rvecs, tvecs, newObjPoints2  = cv.calibrateCameraRO(
                        obj_points, img_points, (w, h), int(pattern_size[0]-1),
                        camera_matrix, dist_coefs, rvecs, tvecs, None, cv.CALIB_USE_INTRINSIC_GUESS | cv.CALIB_USE_LU, 
                        (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30,  2.2204460492503131e-16)  );
&lt;/denchmark-code&gt;

Run with opencv sample data set.
Throws error:
&lt;denchmark-code&gt;cv2.error: OpenCV(4.1.0) C:\projects\opencv-python\opencv\modules\core\src\matmul.dispatch.cpp:337: error: (-215:Assertion failed) type == B.type() in function 'cv::gemm'
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='nightgryphon' date='2019-05-02T16:07:57Z'>
		This function become available in 4.0.0. Is milestone 3.4.7 ok?
		</comment>
		<comment id='2' author='nightgryphon' date='2019-07-11T13:18:19Z'>
		Same issue on the C/C++ code.
whit iFixedPoint &gt; 0 I get:
libc++abi.dylib: terminating with uncaught exception of type cv::Exception: OpenCV(4.1.0) /tmp/opencv-20190505-12101-14vk1fh/opencv-4.1.0/modules/core/src/matmul.dispatch.cpp:337: error: (-215:Assertion failed) type == B.type() in function 'gemm'
		</comment>
		<comment id='3' author='nightgryphon' date='2019-09-04T14:44:21Z'>
		This can currently be resolved by always providing at least one non-null standard deviation output array to calibrateCameraRO() (even if you have no need to otherwise).
So for C++ use &lt;denchmark-link:https://docs.opencv.org/master/d9/d0c/group__calib3d.html#ga11eeb16e5a458e1ed382fb27f585b753&gt;full parameter calibrateCameraRO&lt;/denchmark-link&gt;
 with one of ,  or  being a predefined cv::Mat (the others can be noArray()). For python, I think the equivalent is to use cv.calibrateCameraROExtended() and specify at least one standard deviation parameter.
This works because of what I think is a bug in  that causes the line &lt;denchmark-link:https://github.com/opencv/opencv/blob/61cc85556456bdddec769afbe9dfba21228348ca/modules/calib3d/src/calibration.cpp#L1762&gt;here&lt;/denchmark-link&gt;
 to try and multiply an empty matrix  when  is true but  is false. Defining at least one non-null standard deviation OutputArray always causes  to be true (see &lt;denchmark-link:https://github.com/opencv/opencv/blob/61cc85556456bdddec769afbe9dfba21228348ca/modules/calib3d/src/calibration.cpp#L1591&gt;here&lt;/denchmark-link&gt;
).
The error occurs when solver.state does not equal CvLevMarq::CALC_J when setting the allocJo flag (making it false), but the solver state later switches to CvLevMarq::CALC_J making calcJ true and subsequently trying to multiply the unallocated _Jo.
This can be patched by always setting 'allocJo' true when using the RO version of calibrateCamera since it appears _Jo should always be allocated for the expected RO behaviour, but is rightly not always needed in the non-RO mode.
I've submitted a pull request &lt;denchmark-link:https://github.com/opencv/opencv/pull/15451&gt;#15451&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='nightgryphon' date='2019-09-07T23:47:55Z'>
		I also have problems using calibrateCameraRO in Python. I wait for more than five minutes and it does nothing. It does not return anything or any error arises, only stay running infinitely.
My system details:

OpenCV: 4.0.1
OS: Windows 10 (64 Bit)
Python 3.7.3

Function presents the same behavior if I provide a standard deviation parameter as suggested.
		</comment>
		<comment id='5' author='nightgryphon' date='2019-09-29T05:14:27Z'>
		Is the problem solved? I have encountered the same problem.
		</comment>
		<comment id='6' author='nightgryphon' date='2020-04-14T20:58:45Z'>
		Ya, same problem here. Is this resolved? I can use either c++ or python.
		</comment>
		<comment id='7' author='nightgryphon' date='2020-04-15T08:31:58Z'>
		For sure the problem was fixed in the last version of the code
		</comment>
	</comments>
</bug>