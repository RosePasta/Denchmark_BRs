<bug id='7992' author='nishantb21' open_date='2017-01-11T15:25:48Z' closed_time='2017-04-24T18:13:44Z'>
	<summary>Opencv 3.2 failing to build with CUDA 8.0</summary>
	<description>

OpenCV =&gt; 3.2.0 Release
Operating System / Platform =&gt; Windows 10 64 bit
Compiler =&gt; Visual Studio 2015 Community

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

I have searched on a lot of forums and no one seems to have a solution to this peculiar problem. The compilation of OpenCV 3.2 works fine unless WITH_CUDA is set to ON. I tried building OpenCV 3.2.0 with CUDA support, giving the appropriate architecture and giving the OPENCV_EXTRA_MODULES_PATH. While Cmake is able to both configure the project and generate it without any issues, the ALL_BUILD fails to build 4 files. Which inclusion of CUDA libraries works just fine, during runtime errors arise. The errors in particular are:
1.opencv\modules\core\include\opencv2/core/base.hpp(365): warning : function declared with "noreturn" does return
2.opencv\modules\core\include\opencv2/core/types.hpp(491): warning : field of class type without a DLL interface used in a class with a DLL interface
These are warnings, granted. However, these eventually lead to runtime errors while executing programs. One of these errors include the program unable to find entry points into cuda dlls.
	</description>
	<comments>
		<comment id='1' author='nishantb21' date='2017-01-11T15:38:22Z'>
		
False positive. error() throws an exception so it never returns.
Windows specific problem. Real problems are not observed yet.


these eventually lead to runtime errors while executing programs

What kind of errors?
		</comment>
		<comment id='2' author='nishantb21' date='2017-01-11T16:31:50Z'>
		I shall post the entire build log, the exact runtime errors and my source code I used for testing the library in a couple of hours. It's compiling right now and as usual its through a bunch of warnings which you, along with some other people, have attributed to the OS and not an inherent problem with the library.
		</comment>
		<comment id='3' author='nishantb21' date='2017-01-13T13:48:27Z'>
		Sorry for the delay in posting this. Just wanted to make sure I am not wasting anybody's time here.
So here are the build and install log files from the compilation of OpenCV using Visual Studio 2015. As you will see the build log for both Debug and Release configurations are pretty useless because like you pointed out, the problem is with the compiler on Windows platform. Interesting thing however comes to light when we inspect the install logs for Debug and Release configuration. As we see the error is as follows:
1. error C2610: 'std::tuplecv::Size,perf::`anonymous-namespace'::MatDepth,perf::`anonymous-namespace'::MatCn::tuple(std::tuplecv::Size,perf::`anonymous-namespace'::MatDepth,perf::`anonymous-namespace'::MatCn &amp;&amp;)': is not a special member function which can be defaulted (compiling source file C:\Users\ANONYMOUS-PC\Desktop\CCBD Poject\cmake_opencv_cuda\opencv\modules\cudaarithm\perf\perf_reductions.cpp)
2. error C2535: 'std::tuplecv::Size,perf::`anonymous-namespace'::MatDepth,perf::`anonymous-namespace'::MatCn &amp;std::tuplecv::Size,perf::`anonymous-namespace'::MatDepth,perf::`anonymous-namespace'::MatCn::operator =(const std::tuplecv::Size,perf::`anonymous-namespace'::MatDepth,perf::`anonymous-namespace'::MatCn &amp;)': member function already defined or declared (compiling source file C:\Users\ANONYMOUS-PC\Desktop\CCBD Poject\cmake_opencv_cuda\opencv\modules\cudaarithm\perf\perf_reductions.cpp)
Don't know if this is actually the issue or not. After all of this it says that opencv was compiled without CUDA support whenever I use the cv::cuda::setDevice function even though I clearly have enabled the WITH_CUDA flag. cv::cuda::getCudaEnabledDeviceCount returns 0 even though I have a GT 740m CUDA enabled GPU on my system. I have also tried this with a laptop containing a 960m and the build is failing there too.
&lt;denchmark-link:https://github.com/opencv/opencv/files/704400/Install-log-debug.txt&gt;Install-log-debug.txt&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/opencv/opencv/files/704401/Install-log-release.txt&gt;Install-log-release.txt&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/opencv/opencv/files/704402/Build-log-debug.txt&gt;Build-log-debug.txt&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/opencv/opencv/files/704403/Build-log-release.txt&gt;Build-log-release.txt&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='nishantb21' date='2017-01-14T10:36:20Z'>
		This is the peculiar runtime error I was talking about! Hopefully you can shed some light on this!
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/19548448/21954313/53df4b14-da73-11e6-99e3-5b36ce11cbcb.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='nishantb21' date='2017-01-14T12:36:04Z'>
		mute the thread
----- 原始邮件 -----
发件人：Nishant Bhattacharya &lt;notifications@github.com&gt;
收件人：opencv/opencv &lt;opencv@noreply.github.com&gt;
抄送人：Subscribed &lt;subscribed@noreply.github.com&gt;
主题：Re: [opencv/opencv] Opencv 3.2 failing to build with CUDA 8.0 (&lt;denchmark-link:https://github.com/opencv/opencv/issues/7992&gt;#7992&lt;/denchmark-link&gt;
)
日期：2017年01月14日 18点36分

This is the peculiar runtime error I was talking about! Hopefully you can shed some light on this!


&amp;mdash;
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub, or mute the thread.
		</comment>
		<comment id='6' author='nishantb21' date='2017-01-18T02:27:08Z'>
		I am also getting the same compilation error when building OpenCV from source on Windows 10 with Visual Studio 2015.
C2610 and C2535 error for file tuple in the opencv_perf_cudawarping project.
C2382 error for file cuda_perf.hpp in the opencv_perf_cudawarping project.
And lot more similar errors related to opencv_perf. Would be appreciated if this could be fixed
A side question is is it possible to provide pre-built OpenCV on windows with CUDA? From my experience the compilation fail on windows happens way often then on Ubuntu, and I need the CUDA version of OpenCV for my code.
		</comment>
		<comment id='7' author='nishantb21' date='2017-01-18T13:39:14Z'>
		Okay so apparently if you switch off tests(both performance and normal) the error in the build log goes away. The .dll issue however persists. Still no solution for that.
		</comment>
		<comment id='8' author='nishantb21' date='2017-01-18T14:45:45Z'>
		&lt;denchmark-link:https://github.com/nishantb21&gt;@nishantb21&lt;/denchmark-link&gt;

Text error messages via screenshots must be avoided, because they are useless to search related information.
Please add these logs:

CMake stdout (from clean build)
files from build folder: CMakeCache.txt and CMakeVars.txt (as attachment or use "grep" with CUDA/CXX keywords)

Current MSVC error messages doesn't help a lot. There is related issue &lt;denchmark-link:https://github.com/opencv/opencv/issues/6716&gt;#6716&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/jasjuang&gt;@jasjuang&lt;/denchmark-link&gt;


provide pre-built OpenCV on windows with CUDA

There are several problems:

CUDA library/runtime version dependency
there is large set of possible GPU architectures, so resulting binary size is very large

		</comment>
		<comment id='9' author='nishantb21' date='2017-01-18T17:03:24Z'>
		Okay so a couple of updates on my part:

I tried compiling OpenCV on Ubuntu. Worked perfectly fine with CUDA 8.0, the same version which I was using on Windows. So as you pointed out there is definitely an issue with Windows.
As for the large set of possible GPU Architectures, I changed CUDA_ARCH to only 3.0 so it doesn't build for unnecessary architectures which my GPU doesn't support.
As for the suggestion of going through #6716, I will surely try disabling OPENCL and then trying. If it still exists I shall report back with the logs you requested.
Cheers!

		</comment>
		<comment id='10' author='nishantb21' date='2017-01-18T17:35:23Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 I don't mind having to download a large binary at all. Downloading is way easier then figuring out various compilation error on windows. And yes the compilation error I am getting is exactly the same as what &lt;denchmark-link:https://github.com/opencv/opencv/issues/6716&gt;#6716&lt;/denchmark-link&gt;
 is showing.
		</comment>
		<comment id='11' author='nishantb21' date='2017-01-19T14:04:41Z'>
		Update 2:

I tried compiling with OpenCL switched off and it still didn't work. Same errors.
I am attaching the requested files so you maybe able to figure out what the error is!
Cmake-stdout.txt
CMakeVars.txt
CMakeCache.txt

		</comment>
		<comment id='12' author='nishantb21' date='2017-01-19T14:42:44Z'>
		Thank you for update!
MSVS 2015 version is fresh (update 3), but there are &lt;denchmark-link:https://devtalk.nvidia.com/default/topic/883704/cuda-setup-and-installation/when-will-visual-studio-2015-be-supported-/post/4986548/#4986548&gt;some reports&lt;/denchmark-link&gt;
 about unsupported compiler versions by CUDA. Please check you have the latest version of CUDA SDK.
BTW, please avoid using non alphanumeric symbols in paths (you have a space in "CCBD Poject").
		</comment>
		<comment id='13' author='nishantb21' date='2017-01-21T17:43:37Z'>
		Okay so I checked. I do happen to have the latest version CUDA SDK (v8.0.44, which is the same one I have on my Ubuntu machine). And as for the point about the inclusion of non alphanumeric characters, duly noted. So this error is because Visual Studio 2015 is misbehaving with the CUDA SDK? Well if that's the case then we cannot really do anything till the fix comes up I guess? One possible solution seems to be to use VS 2017. But don't know if I will be able to try that out until later because I am quite busy.
Thanks for the help anyways! Cheers!
		</comment>
		<comment id='14' author='nishantb21' date='2017-01-29T13:49:11Z'>
		
Windows specific problem. Real problems are not observed yet.
these eventually lead to runtime errors while executing programs

CUDA 8.0 does not have a cuda toolkit so it might be a problem however i got it working on my ubuntu machine with opencv 3.1 and cuda 8.0. Can't say for sure about windows.
🔹 🔸 😸
		</comment>
		<comment id='15' author='nishantb21' date='2017-02-01T18:20:15Z'>
		&lt;denchmark-link:https://github.com/nishantb21&gt;@nishantb21&lt;/denchmark-link&gt;
:
Have you gotten any further on this issue? I am getting the samme errors with the same setup (except im using a GTX960,  so 5.2 CC and Maxwell architecture in the CMake). I am trying to build OpenCV 3.2 with opencv_contrib  and CUDA support. The Cmake seems to configure and generate the solution just fine, but when I try to build the OpenCV.sln project I get the same "noreturn" and DLL warnings as you do. The solution completes it's build both in Debug and Release, but when I try to use the cuda modules in my example program I get an error saying that OpenCV was not built with CUDA support.
		</comment>
		<comment id='16' author='nishantb21' date='2017-02-02T14:32:59Z'>
		&lt;denchmark-link:https://github.com/thorbjornsomod&gt;@thorbjornsomod&lt;/denchmark-link&gt;

I am sorry to inform you that I have been really busy with work and have not gotten around to try and fix the issue. I haven't used OpenCV from the time of my last comment on this thread so I really don't know if the latest commits to this repo have fixed it or not. Could you tell me if you tried compiling on VS 2017? It seems to be a possible solution. The "noreturn" as &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 mentioned is simply a warning which is not to be worried about. I am inclined to think that the latest NVidia drivers may be a possible issue but I am not sure. On Ubuntu 16.04 on which I installed OpenCV with CUDA support successfully without any errors, I used Nvidia Driver version 367.57 which is not the latest one. In fact some threads out there also tell you to NOT install the latest NVidia drivers as they have not been tested very well on Ubuntu. With Windows you could try installing an older driver and trying it but that would be a pain. I suggest you just natively install Ubuntu on your machine if you really want it that much and try compilation there. Cheers!
EDIT: Turns out at the time of writing this Microsoft Visual Studio 2017 is in Release Candidate. The results of compiling on such a software should not be trusted as this is not the final product.
		</comment>
		<comment id='17' author='nishantb21' date='2017-02-08T21:18:53Z'>
		I have the same problem (building OpenCV 3.2 with CUDA v8 for Win10). I asked on stackoverflow (&lt;denchmark-link:http://stackoverflow.com/questions/42122634/building-opencv-3-cuda-errors&gt;link&lt;/denchmark-link&gt;
).
Could it work with Cuda 7.5 instead of 8??
Edit: Tried with 7.5, did not work.
		</comment>
		<comment id='18' author='nishantb21' date='2017-02-09T07:53:34Z'>
		&lt;denchmark-link:https://github.com/nishantb21&gt;@nishantb21&lt;/denchmark-link&gt;
 &amp; &lt;denchmark-link:https://github.com/blackTay&gt;@blackTay&lt;/denchmark-link&gt;
 : I actually got it to work both on my laptop and my desktop (GTX960M and GTX970 respectively) running with OpenCV 3.2 and the latest version of CUDA 8.0 for Win10 in Visual Studio 15 Community! What I did was to enable WITH_CUBLAS aswell as WITH_CUDA. I also turned off BUILD_PERF_TESTS and BUILD_TESTS. The configuration was built using the Visual Studio 14 2015 C++ compiler.
		</comment>
		<comment id='19' author='nishantb21' date='2017-02-10T15:20:27Z'>
		&lt;denchmark-link:https://github.com/thorbjornsomod&gt;@thorbjornsomod&lt;/denchmark-link&gt;
 Thank you! This is a good work-around until it's fixed. Do you know the reason for this problem?
		</comment>
		<comment id='20' author='nishantb21' date='2017-02-10T15:30:48Z'>
		I think that some version of BLAS (found &lt;denchmark-link:http://www.openblas.net/&gt;here&lt;/denchmark-link&gt;
) is needed to correctly build the CUDA interface. If you enable WITH_BLAS you are basicly saying that you dont have BLAS installed natively and would like OpenCV to be build with their version of it. Or something like this?
		</comment>
		<comment id='21' author='nishantb21' date='2017-02-15T14:16:27Z'>
		&lt;denchmark-link:https://github.com/thorbjornsomod&gt;@thorbjornsomod&lt;/denchmark-link&gt;
 So are you saying that to build OpenCV 3.2 with CUDA you either need BLAS installed on your system or check the WITH_BLAS flag so that OpenCV can build BLAS on your system? Well according to this reasoning shouldn't it only affect WITH_CUBLAS only and not WITH_CUDA? Also could you share your Cmake log files as I have shared on this forum before? I would like to see if any other settings need to be met by my build. I will try to replicate your environment and build OpenCV 3.2 with CUDA support on my system. Thank you!
		</comment>
		<comment id='22' author='nishantb21' date='2017-04-24T18:13:44Z'>
		Okay so I know its has been a couple of months since my last update but turns out this issue has been fixed. I just recently cloned the repo and tried building it on my new laptop. I got the same warnings as before. But somehow it seems to work just fine on my laptop now. The cudaEnabledDeviceCount returns 1. Finally. I am going to attach my new build logs for people who would like to investigate what was different from the point of view of my hardware and software.
&lt;denchmark-link:https://github.com/opencv/opencv/files/952699/CMakeCache.txt&gt;CMakeCache.txt&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/opencv/opencv/files/952700/CMakeVars.txt&gt;CMakeVars.txt&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>