<bug id='13462' author='yuril123' open_date='2018-12-17T14:13:28Z' closed_time='2020-02-04T17:13:16Z'>
	<summary>Darknet/YoloV3, changing input resolution cause the "Inconsistent shape for ConcatLayer" error</summary>
	<description>
OpenCV 4.0.0
I have a problem with running Darknet/YoloV3 network with different input resolutions on the same network. If I do not change input resolution I can process images with same resolution without problems.

WORKS OK

cv::dnn::Net net = cv::dnn::readNetFromDarknet(....)
cv::dnn::blobFromImage(image, blob, 1 / 255.F, cv::Size(416, 416));
net.setInput(blob);
net.forward(outs, this-&gt;net_output_names);
cv::dnn::blobFromImage(image, blob, 1 / 255.F, cv::Size(416, 416));
net.setInput(blob);
net.forward(outs, this-&gt;net_output_names);

WORKS OK

cv::dnn::Net net = cv::dnn::readNetFromDarknet(....)
cv::dnn::blobFromImage(image, blob, 1 / 255.F, cv::Size(448, 448));
net.setInput(blob);
net.forward(outs, this-&gt;net_output_names);
cv::dnn::blobFromImage(image, blob, 1 / 255.F, cv::Size(448, 448));
net.setInput(blob);
net.forward(outs, this-&gt;net_output_names);

"Inconsistent shape for ConcatLayer" exception

cv::dnn::Net net = cv::dnn::readNetFromDarknet(....)
cv::dnn::blobFromImage(image, blob, 1 / 255.F, cv::Size(416, 416));
net.setInput(blob);
net.forward(outs, this-&gt;net_output_names);
cv::dnn::blobFromImage(image, blob, 1 / 255.F, cv::Size(448, 448)); // &lt;=== resulution changed
net.setInput(blob);
net.forward(outs, this-&gt;net_output_names); // &lt;=== "Inconsistent shape for ConcatLayer" exception
	</description>
	<comments>
		<comment id='1' author='yuril123' date='2018-12-17T14:16:35Z'>
		&lt;denchmark-link:https://github.com/yuril123&gt;@yuril123&lt;/denchmark-link&gt;
, Does it should work with 448x448 input sizes? Have you tried to run Darknet with this resolution?
		</comment>
		<comment id='2' author='yuril123' date='2018-12-17T14:19:33Z'>
		Yes, it work good on both resolutions 416 and 448. Problem when changing resolution.
		</comment>
		<comment id='3' author='yuril123' date='2018-12-17T14:20:41Z'>
		Create separate "Net" objects for different input sizes.
		</comment>
		<comment id='4' author='yuril123' date='2018-12-17T14:28:40Z'>
		I understand that I can create multiple Nets, but I need wide range of resolutions, and creating multiple networks will cause memory using.
It looks that some shapes not relocated correctly.
&lt;denchmark-link:https://user-images.githubusercontent.com/45941536/50093077-63e60380-0218-11e9-8057-aa96a1fc8248.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='yuril123' date='2018-12-17T14:35:48Z'>
		Btw, this works with YoloV2 model. I can change resolution many times without problem.  But no with YoloV3.
May be this related that YoloV3 have 2 outputs?
		</comment>
		<comment id='6' author='yuril123' date='2018-12-17T14:43:21Z'>
		Dynamic changing of input size definitely will cause memory buffers reallocation, processing graph recompilation (for some backends) =&gt; very terrible performance.
This can't be fixed without unpredictable performance loss.
		</comment>
		<comment id='7' author='yuril123' date='2018-12-17T14:56:26Z'>
		May be is possible to somehow to reset Net without calling cv::dnn::readNetFromDarknet, to avoid loading net structure and weights?
		</comment>
		<comment id='8' author='yuril123' date='2018-12-17T15:45:10Z'>
		I did small fix in clear() function, and now I can change input resolution for network. The incorrect shape comes from previous layer instance.
void clear()
{
CV_TRACE_FUNCTION();
&lt;denchmark-code&gt;    MapIdToLayerData::iterator it;
    for (it = layers.begin(); it != layers.end(); it++)
    {
        if (it-&gt;second.id != 0) {
            it-&gt;second.inputBlobs.clear();
            it-&gt;second.outputBlobs.clear();
            it-&gt;second.internals.clear();
           it-&gt;second.layerInstance = NULL; // &lt;=== Added
        }
        it-&gt;second.skip = false;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='yuril123' date='2019-03-14T14:07:43Z'>
		Hi, Can I take this up?
		</comment>
		<comment id='10' author='yuril123' date='2020-02-03T16:28:55Z'>
		Please try &lt;denchmark-link:https://github.com/opencv/opencv/pull/16490&gt;#16490&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='yuril123' date='2020-04-15T20:53:39Z'>
		&lt;denchmark-link:https://github.com/yuril123&gt;@yuril123&lt;/denchmark-link&gt;
 has &lt;denchmark-link:https://github.com/opencv/opencv/pull/16490&gt;#16490&lt;/denchmark-link&gt;
 fixed your issue? Have you found a workaround?
		</comment>
	</comments>
</bug>