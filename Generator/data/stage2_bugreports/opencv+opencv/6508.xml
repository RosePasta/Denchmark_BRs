<bug id='6508' author='jzee' open_date='2016-05-05T09:36:55Z' closed_time='2016-05-11T13:42:11Z'>
	<summary>cross-platform build fails with msys2</summary>
	<description>
&lt;denchmark-h:h3&gt;Please state the information for your system&lt;/denchmark-h&gt;

OpenCV version: 3.1 (verified with 3.0)
Host OS: Windows 7 and Windows Server 2012R2
Target OS: ARM board
Compiler &amp; CMake: GCC 4.9.3 (linaro 2015.05) &amp; CMake 3.4.1
&lt;denchmark-h:h3&gt;In which part of the OpenCV library you got the issue?&lt;/denchmark-h&gt;

Cross-building of core
&lt;denchmark-h:h3&gt;Expected behaviour&lt;/denchmark-h&gt;

Build works irrespective of msys environment
&lt;denchmark-h:h3&gt;Actual behaviour&lt;/denchmark-h&gt;

Build works fine using the much older msys1 (make 3.81 / 2006) but fails with msys2 (make 4.1-4 / 2014)
&lt;denchmark-h:h3&gt;Additional description&lt;/denchmark-h&gt;

building with msys2 fails while attempting to generate precomp.hpp.
&lt;denchmark-h:h3&gt;Code example to reproduce the issue / Steps to reproduce the issue&lt;/denchmark-h&gt;

Configuration:
&lt;denchmark-code&gt;c:\jenkins\tools\hudson.plugins.cmake.CmakeTool\3.4.1\bin\cmake -G "MSYS Makefiles" -D CMAKE_BUILD_TYPE=Release -Wno-dev -DCMAKE_INSTALL_PREFIX=c:\jenkins\workspace\libopencv\838c53df -DCMAKE_TOOLCHAIN_FILE=c:\jenkins\workspace\libopencv\838c53df/cmake-scripts/arm-linaro.cmake -DEXECUTABLE_OUTPUT_PATH=c:/jenkins/workspace/libopencv/838c53df/bin -DWITH_CUDA=OFF -DWITH_OPENEXR=OFF -DWITH_TIFF=OFF -DBUILD_TIFF=OFF -DWITH_JPEG=OFF -DBUILD_JPEG=OFF -DWITH_PNG=OFF -DBUILD_PNG=OFF -DWITH_WEBP=OFF -DBUILD_WEBP=OFF -DWITH_FFMPEG=OFF -DWITH_IPP=OFF -DWITH_JASPER=OFF -DBUILD_JASPER=OFF -DWITH_VTK=OFF -DWITH_V4L=OFF -DWITH_OPENCL=OFF -DBUILD_opencv_video=OFF -DBUILD_opencv_videostab=OFF -DBUILD_opencv_videolo=OFF -DBUILD_opencv_apps=OFF -DBUILD_opencv_stitching=OFF -DBUILD_DOCS=OFF -DBUILD_JASPER=OFF -DBUILD_TESTS=ON -DINSTALL_TESTS=ON -DBUILD_PERF_TESTS=OFF -DBUILD_SHARED_LIBS=OFF -DBUILD_TBB=OFF -DEIGEN_INCLUDE_PATH=c:\jenkins\workspace\libopencv\838c53df/libeigen c:\jenkins\workspace\libopencv\838c53df\repository
&lt;/denchmark-code&gt;

and running the build with
&lt;denchmark-code&gt;c:\jenkins\tools\hudson.plugins.cmake.CmakeTool\3.4.1\bin\cmake --build c:\jenkins\workspace\libopencv\838c53df\jenkins-build --target install --config Release
&lt;/denchmark-code&gt;

This generates the offending command:
&lt;denchmark-code&gt;cd /C/jenkins/workspace/libopencv/838c53df/jenkins-build/modules/core &amp;&amp; /c/jenkins/tools/hudson.plugins.cmake.CmakeTool/3.4.1/bin/cmake.exe -E make_directory C:/jenkins/workspace/libopencv/838c53df/jenkins-build/modules/core/precomp.hpp.gch
cd /C/jenkins/workspace/libopencv/838c53df/jenkins-build/modules/core &amp;&amp; /C/linaro/gcc-4.9-2015.05-x86_64_arm-linux-gnueabi/bin/arm-linux-gnueabi-g++.exe -O3 -DNDEBUG -DNDEBUG "-D_ARM" "-D_ARM" "-D__OPENCV_BUILD=1" -isystem"C:/jenkins/workspace/libopencv/838c53df/jenkins-build" -isystem"C:/jenkins/workspace/libopencv/838c53df/libeigen" -isystem"C:/jenkins/workspace/libopencv/838c53df/jenkins-build" -isystem"C:/jenkins/workspace/libopencv/838c53df/libeigen" -I"C:/jenkins/workspace/libopencv/838c53df/repository/modules/core/include" -I"C:/jenkins/workspace/libopencv/838c53df/repository/modules/core/src" -isystem"C:/jenkins/workspace/libopencv/838c53df/jenkins-build/modules/core" -I"C:/jenkins/workspace/libopencv/838c53df/repository/modules/core/include" -isystem"C:/jenkins/workspace/libopencv/838c53df/repository/3rdparty/zlib" -isystem"C:/jenkins/workspace/libopencv/838c53df/jenkins-build/3rdparty/zlib" -std=c++11 -O3 -DNDEBUG -mvectorize-with-neon-quad -mcpu=cortex-a9 -mfloat-abi=softfp -mfpu=neon -ffast-math -funroll-loops -fomit-frame-pointer -mthumb -fdata-sections -fsigned-char -Wno-psabi -mthumb -fdata-sections -fsigned-char -Wno-psabi -fPIC -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wno-narrowing -Wno-delete-non-virtual-dtor -fdiagnostics-show-option -pthread -fomit-frame-pointer -ffunction-sections -fvisibility=hidden -fvisibility-inlines-hidden -x c++-header -o C:/jenkins/workspace/libopencv/838c53df/jenkins-build/modules/core/precomp.hpp.gch/opencv_core_Release.gch C:/jenkins/workspace/libopencv/838c53df/jenkins-build/modules/core/precomp.hpp
C:/jenkins/workspace/libopencv/838c53df/jenkins-build/modules/core/precomp.hpp:46:38: fatal error: opencv2/opencv_modules.hpp: No such file or directory
 #include "opencv2/opencv_modules.hpp"
&lt;/denchmark-code&gt;

the problem being that the build system generates two pairs of -isystem includes for the project root instead of generating one -isystem and one standard -I include pair:
generated include statements (extracted from above, breaks the build):
&lt;denchmark-code&gt;-isystem"C:/jenkins/workspace/libopencv/838c53df/jenkins-build" -isystem"C:/jenkins/workspace/libopencv/838c53df/libeigen" -isystem"C:/jenkins/workspace/libopencv/838c53df/jenkins-build" -isystem"C:/jenkins/workspace/libopencv/838c53df/libeigen" 
&lt;/denchmark-code&gt;

manually corrected include statements (fixes the build):
&lt;denchmark-code&gt;-isystem"C:/jenkins/workspace/libopencv/838c53df/jenkins-build" -isystem"C:/jenkins/workspace/libopencv/838c53df/libeigen" -I"C:/jenkins/workspace/libopencv/838c53df/jenkins-build" -I"C:/jenkins/workspace/libopencv/838c53df/libeigen" 
&lt;/denchmark-code&gt;

Everything else being the same, this build runs fine with msys1. The infrastructure however runs on msys2. I would very much appreciate a hint on how to fix or workaround the issue.
	</description>
	<comments>
		<comment id='1' author='jzee' date='2016-05-05T09:58:00Z'>
		
instead of generating one -isystem and one standard -I include pair

Only "one"? Could you add link with information about this?
		</comment>
		<comment id='2' author='jzee' date='2016-05-05T10:16:02Z'>
		

instead of generating one -isystem and one standard -I include pair
Only "one"? Could you add link with information about this?


I deducted that this is the root cause of the problem based on

-isystem-including the same paths twice doesn't make a difference
the paths that are -isystem-included twice are missing in the include-search path and the cause of the build failure
manually fixing it fixes the build.

I wouldn't want to rule out that the root cause is at a deeper level so when I said "instead of only one" I refered to what I believe would be a working set of arguments. I will verify however the exact build string with the msys1 build and follow up with it.
		</comment>
		<comment id='3' author='jzee' date='2016-05-05T10:27:08Z'>
		AFAIK, -isystem affects include search order and disables some warnings for headers under this path.
BTW, take a look on this issue (related to ): &lt;denchmark-link:https://github.com/opencv/opencv/issues/6403&gt;#6403&lt;/denchmark-link&gt;

There is gcc command sample to debug order of included headers
		</comment>
		<comment id='4' author='jzee' date='2016-05-05T11:16:08Z'>
		Thanks for your replies. There appears to be a culprit in the -isystem include handling. Calling g++ with -v makes it clear:
&lt;denchmark-code&gt;GNU C++ (Linaro GCC 4.9-2015.05) version 4.9.3 20150413 (prerelease) (arm-linux-gnueabi)
        compiled by GNU C version 4.9.1, GMP version 5.1.3, MPFR version 3.1.2, MPC version 1.0.1
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "C:C:/msys64/jenkins/workspace/libopencv/838c53df/jenkins-build"
ignoring nonexistent directory "C:C:/msys64/jenkins/workspace/libopencv/838c53df/libeigen"
ignoring nonexistent directory "C:C:/msys64/jenkins/workspace/libopencv/838c53df/jenkins-build"
ignoring nonexistent directory "C:C:/msys64/jenkins/workspace/libopencv/838c53df/libeigen"
ignoring nonexistent directory "C:C:/msys64/jenkins/workspace/libopencv/838c53df/jenkins-build/modules/core"
ignoring nonexistent directory "C:C:/msys64/jenkins/workspace/libopencv/838c53df/repository/3rdparty/zlib"
ignoring nonexistent directory "C:C:/msys64/jenkins/workspace/libopencv/838c53df/jenkins-build/3rdparty/zlib"
ignoring duplicate directory "c:/linaro/gcc-4.9-2015.05-x86_64_arm-linux-gnueabi/lib/gcc/../../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include/c++/4.9.3"
ignoring duplicate directory "c:/linaro/gcc-4.9-2015.05-x86_64_arm-linux-gnueabi/lib/gcc/../../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include/c++/4.9.3/arm-linux-gnueabi/."
ignoring duplicate directory "c:/linaro/gcc-4.9-2015.05-x86_64_arm-linux-gnueabi/lib/gcc/../../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include/c++/4.9.3/backward"
ignoring duplicate directory "c:/linaro/gcc-4.9-2015.05-x86_64_arm-linux-gnueabi/lib/gcc/../../lib/gcc/arm-linux-gnueabi/4.9.3/include"
ignoring nonexistent directory "c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../arm-linux-gnueabi/libc/home/tcwg-buildslave/workspace/tcwg-make-release/label/tcwg-x86_64/target/arm-linux-gnueabi/_build/builds/destdir/i686-w64-mingw32/lib/gcc/arm-linux-gnueabi/4.9.3/../../../../include/arm-linux-gnueabi"
ignoring nonexistent directory "c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../arm-linux-gnueabi/libc/home/tcwg-buildslave/workspace/tcwg-make-release/label/tcwg-x86_64/target/arm-linux-gnueabi/_build/builds/destdir/i686-w64-mingw32/lib/gcc/arm-linux-gnueabi/4.9.3/../../../../include"
ignoring duplicate directory "c:/linaro/gcc-4.9-2015.05-x86_64_arm-linux-gnueabi/lib/gcc/../../lib/gcc/arm-linux-gnueabi/4.9.3/include-fixed"
ignoring duplicate directory "c:/linaro/gcc-4.9-2015.05-x86_64_arm-linux-gnueabi/lib/gcc/../../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include"
ignoring nonexistent directory "c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../arm-linux-gnueabi/libc/usr/include/arm-linux-gnueabi"
ignoring duplicate directory "C:/jenkins/workspace/libopencv/838c53df/repository/modules/core/include"
#include "..." search starts here:
#include &lt;...&gt; search starts here:
 C:/jenkins/workspace/libopencv/838c53df/repository/modules/core/include
 C:/jenkins/workspace/libopencv/838c53df/repository/modules/core/src
 c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include/c++/4.9.3
 c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include/c++/4.9.3/arm-linux-gnueabi/.
 c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include/c++/4.9.3/backward
 c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../lib/gcc/arm-linux-gnueabi/4.9.3/include
 c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../lib/gcc/arm-linux-gnueabi/4.9.3/include-fixed
 c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include
 c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../arm-linux-gnueabi/libc/usr/include
End of search list.

&lt;/denchmark-code&gt;

note the weird intejection of "C:/msys64" which causes the include path to be ignored and the file to not be found.
Changing the two -isystem includes mentioned in the original report to -I, this changes the search list to the following, which causes the builds to be found.
&lt;denchmark-code&gt;GNU C++ (Linaro GCC 4.9-2015.05) version 4.9.3 20150413 (prerelease) (arm-linux-gnueabi)
        compiled by GNU C version 4.9.1, GMP version 5.1.3, MPFR version 3.1.2, MPC version 1.0.1
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "C:C:/msys64/jenkins/workspace/libopencv/838c53df/jenkins-build"
ignoring nonexistent directory "C:C:/msys64/jenkins/workspace/libopencv/838c53df/libeigen"
ignoring nonexistent directory "C:C:/msys64/jenkins/workspace/libopencv/838c53df/jenkins-build/modules/core"
ignoring nonexistent directory "C:C:/msys64/jenkins/workspace/libopencv/838c53df/repository/3rdparty/zlib"
ignoring nonexistent directory "C:C:/msys64/jenkins/workspace/libopencv/838c53df/jenkins-build/3rdparty/zlib"
ignoring duplicate directory "c:/linaro/gcc-4.9-2015.05-x86_64_arm-linux-gnueabi/lib/gcc/../../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include/c++/4.9.3"
ignoring duplicate directory "c:/linaro/gcc-4.9-2015.05-x86_64_arm-linux-gnueabi/lib/gcc/../../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include/c++/4.9.3/arm-linux-gnueabi/."
ignoring duplicate directory "c:/linaro/gcc-4.9-2015.05-x86_64_arm-linux-gnueabi/lib/gcc/../../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include/c++/4.9.3/backward"
ignoring duplicate directory "c:/linaro/gcc-4.9-2015.05-x86_64_arm-linux-gnueabi/lib/gcc/../../lib/gcc/arm-linux-gnueabi/4.9.3/include"
ignoring nonexistent directory "c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../arm-linux-gnueabi/libc/home/tcwg-buildslave/workspace/tcwg-make-release/label/tcwg-x86_64/target/arm-linux-gnueabi/_build/builds/destdir/i686-w64-mingw32/lib/gcc/arm-linux-gnueabi/4.9.3/../../../../include/arm-linux-gnueabi"
ignoring nonexistent directory "c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../arm-linux-gnueabi/libc/home/tcwg-buildslave/workspace/tcwg-make-release/label/tcwg-x86_64/target/arm-linux-gnueabi/_build/builds/destdir/i686-w64-mingw32/lib/gcc/arm-linux-gnueabi/4.9.3/../../../../include"
ignoring duplicate directory "c:/linaro/gcc-4.9-2015.05-x86_64_arm-linux-gnueabi/lib/gcc/../../lib/gcc/arm-linux-gnueabi/4.9.3/include-fixed"
ignoring duplicate directory "c:/linaro/gcc-4.9-2015.05-x86_64_arm-linux-gnueabi/lib/gcc/../../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include"
ignoring nonexistent directory "c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../arm-linux-gnueabi/libc/usr/include/arm-linux-gnueabi"
ignoring duplicate directory "C:/jenkins/workspace/libopencv/838c53df/repository/modules/core/include"
#include "..." search starts here:
#include &lt;...&gt; search starts here:
 C:/jenkins/workspace/libopencv/838c53df/jenkins-build
 C:/jenkins/workspace/libopencv/838c53df/libeigen
 C:/jenkins/workspace/libopencv/838c53df/repository/modules/core/include
 C:/jenkins/workspace/libopencv/838c53df/repository/modules/core/src
 c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include/c++/4.9.3
 c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include/c++/4.9.3/arm-linux-gnueabi/.
 c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include/c++/4.9.3/backward
 c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../lib/gcc/arm-linux-gnueabi/4.9.3/include
 c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../lib/gcc/arm-linux-gnueabi/4.9.3/include-fixed
 c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../lib/gcc/arm-linux-gnueabi/4.9.3/../../../../arm-linux-gnueabi/include
 c:\linaro\gcc-4.9-2015.05-x86_64_arm-linux-gnueabi\bin\../arm-linux-gnueabi/libc/usr/include
End of search list.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='jzee' date='2016-05-05T11:35:37Z'>
		Would you agree when I say that this looks like a gcc issue? Since it's unlikely that the linaro guys will fix this (quickly), would you know of a way how&amp;where I could patch the cmakefiles in such a way that cmake would issue -I directives (instead of -isystem) for the paths, as workaround on my side?
I have already grepped the repository for include_directories(SYSTEM to find clear indications for declaration of system includes but the only occurences appear to be in
&lt;denchmark-code&gt;./cmake/OpenCVDetectTBB.cmake:  include_directories(SYSTEM ${TBB_INCLUDE_DIRS})
./modules/imgcodecs/CMakeLists.txt:  include_directories(SYSTEM ${OPENEXR_INCLUDE_PATHS})
./modules/imgcodecs/CMakeLists.txt:  include_directories(SYSTEM ${GDAL_INCLUDE_DIR})
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='jzee' date='2016-05-05T11:58:09Z'>
		
C:C:

Yes, this looks like a GCC bug.
To workaround this add these two "set" statements into main CMakeLists.txt after the project() statement:
&lt;denchmark-code&gt;project(OpenCV CXX C)
set(CMAKE_INCLUDE_SYSTEM_FLAG_CXX "-I")
set(CMAKE_INCLUDE_SYSTEM_FLAG_C "-I")
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='jzee' date='2016-05-09T12:38:44Z'>
		It might however be a good idea to report this at the gcc repo, so that they can consider it for any future releases
		</comment>
		<comment id='8' author='jzee' date='2016-05-09T15:47:13Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 thanks again for your response.
I dabbled with these settings, inserting it into the cmakefile and doing a clean rebuild but keep getting the same build failure - it appears those switches do not influence the construction of the gcc invocation in that very place.
setting them to something that will fail (-ifoobar) does however show that they are being interpreted - just not at the point of pre-compiling the headers. Could you please point me in a good direction in where to look to fix this?
&lt;denchmark-link:https://github.com/StevenPuttemans&gt;@StevenPuttemans&lt;/denchmark-link&gt;
 agreed
		</comment>
		<comment id='9' author='jzee' date='2016-05-11T13:42:11Z'>
		thanks a bunch for the reference - patching OpenCVPCHSupport.cmake resolves it for me.
		</comment>
	</comments>
</bug>