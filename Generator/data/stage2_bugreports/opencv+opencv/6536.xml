<bug id='6536' author='tomoaki0705' open_date='2016-05-12T21:56:54Z' closed_time='2016-05-20T19:45:02Z'>
	<summary>test Core_MulSpectrum fails only under release mode on 64bit ARM</summary>
	<description>
&lt;denchmark-h:h3&gt;Please state the information for your system&lt;/denchmark-h&gt;


OpenCV version: master / 3.1
Host OS: Linux (Ubuntu 16.04 ARM 64bit ODROID-C2)
Compiler &amp; CMake: GCC 5.3.1 &amp; CMake 3.5.1

&lt;denchmark-h:h3&gt;In which part of the OpenCV library you got the issue?&lt;/denchmark-h&gt;


in test of core module, Core_MulSpectrums.accuracy fails with "Bard accuracy"
only on release mode, not in debug mode

&lt;denchmark-h:h3&gt;Expected behaviour&lt;/denchmark-h&gt;


The test passes on debug mode
Following is the output of the test on debug mode

&lt;denchmark-code&gt;odroid@odroid64:~/opencv-fork/testMulSpectrumDebug$ ./bin/opencv_test_core --gtest_filter=Core_MulSpec*
CTEST_FULL_OUTPUT
OpenCV version: 3.1.0-dev
OpenCV VCS version: 3.1.0-424-g9ebe29a-dirty
Build type: debug
Parallel framework: pthreads
CPU features: neon
OpenCL is disabled
Note: Google Test filter = Core_MulSpec*
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from Core_MulSpectrums
[ RUN      ] Core_MulSpectrums.accuracy
[       OK ] Core_MulSpectrums.accuracy (2168 ms)
[----------] 1 test from Core_MulSpectrums (2169 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (2175 ms total)
[  PASSED  ] 1 test.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Actual behaviour&lt;/denchmark-h&gt;


Fails on test
Following is the result from test on release mode

&lt;denchmark-code&gt;odroid@odroid64:~/opencv-fork/testMulSpectrumRelease$ ./bin/opencv_test_core --gtest_filter=Core_MulSpec*
CTEST_FULL_OUTPUT
OpenCV version: 3.1.0-dev
OpenCV VCS version: 3.1.0-424-g9ebe29a-dirty
Build type: release
Parallel framework: pthreads
CPU features: neon
OpenCL is disabled
Note: Google Test filter = Core_MulSpec*
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from Core_MulSpectrums
[ RUN      ] Core_MulSpectrums.accuracy
/home/odroid/opencv-fork/modules/ts/src/ts.cpp:518: Failure
Failed

        failure reason: Bad accuracy
        test case #65
        seed: a7e10895f4ac9826
-----------------------------------
        LOG:
output: Too big difference (=1.26238e-12) at (34, 112)
input array 0 type=64fC1, size=(186, 57)
input array 1 type=64fC1, size=(186, 57)
ref output array 0 type=64fC2, size=(186, 57)

-----------------------------------
        CONSOLE: ........
-----------------------------------

[  FAILED  ] Core_MulSpectrums.accuracy (43 ms)
[----------] 1 test from Core_MulSpectrums (43 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (45 ms total)
[  PASSED  ] 0 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] Core_MulSpectrums.accuracy

 1 FAILED TEST
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Additional description&lt;/denchmark-h&gt;


The test passes successfully on other platforms, x86_64 and 32bit ARM
I'm trying to trace the reason why, but the point that it only happens under release mode is making things difficult
Folliwings are some information from cmake output

&lt;denchmark-code&gt;  Platform:
    Host:                        Linux 3.14.29-56 aarch64
    CMake:                       3.5.1
    CMake generator:             Unix Makefiles
    CMake build tool:            /usr/bin/make
    Configuration:               debug

  C/C++:
    Built as dynamic libs?:      YES
    C++ Compiler:                /usr/bin/c++  (ver 5.3.1)
    C++ flags (Release):         -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wno-narrowing -Wno-delete-non-virtual-dtor -fdiagnostics-show-option -pthread -fomit-frame-pointer -ffunction-sections -fvisibility=hidden -fvisibility-inlines-hidden -O3 -DNDEBUG  -DNDEBUG
    C++ flags (Debug):           -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wno-narrowing -Wno-delete-non-virtual-dtor -fdiagnostics-show-option -pthread -fomit-frame-pointer -ffunction-sections -fvisibility=hidden -fvisibility-inlines-hidden -g  -O0 -DDEBUG -D_DEBUG
    C Compiler:                  /usr/bin/cc
    C flags (Release):           -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wno-narrowing -fdiagnostics-show-option -pthread -fomit-frame-pointer -ffunction-sections -fvisibility=hidden -O3 -DNDEBUG  -DNDEBUG
    C flags (Debug):             -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wno-narrowing -fdiagnostics-show-option -pthread -fomit-frame-pointer -ffunction-sections -fvisibility=hidden -g  -O0 -DDEBUG -D_DEBUG
    Linker flags (Release):
    Linker flags (Debug):
    Precompiled headers:         YES
    Extra dependencies:          /usr/lib/aarch64-linux-gnu/libpng.so /usr/lib/aarch64-linux-gnu/libz.so gtk-x11-2.0 gdk-x11-2.0 pangocairo-1.0 atk-1.0 cairo gdk_pixbuf-2.0 gio-2.0 pangoft2-1.0 pango-1.0 gobject-2.0 fontconfig freetype gthread-2.0 glib-2.0 dl m pthread rt
    3rdparty dependencies:       libjpeg libwebp libtiff libjasper IlmImf

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='tomoaki0705' date='2016-05-16T23:57:24Z'>
		I traced back from comparing part.
It seems that comparison is OK, and multiply is OK, but the input it already different between Debug and Release mode.
I dumped the src1 and src2 in test_dxt.cpp as bmp.
They already differ.
&lt;denchmark-code&gt;odroid@odroid64:~/opencv-fork$ md5sum testMulSpectrumDebug/src1.bmp  testMulSpectrumRelease/src1.bmp  testMulSpectrumDebug/src2.bmp testMulSpectrumRelease/src2.bmp
aa99dd4ce33dae0f1d0ec35b7549d982  testMulSpectrumDebug/src1.bmp
e324953bf714e4ae7c0ecd068171a363  testMulSpectrumRelease/src1.bmp
2b3cf84726244e09e486704c8149203b  testMulSpectrumDebug/src2.bmp
9f592656d242e778c7d32e61ed72c542  testMulSpectrumRelease/src2.bmp
&lt;/denchmark-code&gt;

I need to dig in more.
		</comment>
		<comment id='2' author='tomoaki0705' date='2016-05-19T00:17:00Z'>
		&lt;denchmark-h:h3&gt;abstract&lt;/denchmark-h&gt;

Now I found the cause of difference between src1 and src2, but still the test fails.
&lt;denchmark-h:h3&gt;detail&lt;/denchmark-h&gt;

The difference of the src1 and src2 in test_dxt.cpp comes from the optimization of following line in ts_func.cpp
template&lt;typename _Tp&gt; static void
randUniFlt_(RNG&amp; rng, _Tp* data, size_t total, int cn, const Scalar&amp; scale, const Scalar&amp; delta)
{
    for( size_t i = 0; i &lt; total; i += cn )
        for( int k = 0; k &lt; cn; k++ )
        {
            double val = randReal(rng)*scale[k] + delta[k]; /* this line */
            data[i + k] = saturate_cast&lt;_Tp&gt;(val);
        }
}
Now, this multiplication of scale and addition of delta happens separately under debug mode,
fmul d1, d1, d0
fadd d0, d1, d2
Under the release mode, optimization packs this two operation in to fmadd (fused multiply and add)
fmadd   d8, d8, d10, d9
Now, this makes the result slightly different.
Here's some experiment result of fmul+fadd and fmadd
&lt;denchmark-code&gt;debug mode (w/ -g  -O0)
randomNumber       asm(FMADD)         asm(FMUL+FADD)
0x4080b94a0b6532aa 0x4080b94a0b6532a9 0x4080b94a0b6532aa
0xc0780b37385ca5b2 0xc0780b37385ca5b3 0xc0780b37385ca5b2
0xc06f718e8ca69298 0xc06f718e8ca69299 0xc06f718e8ca69298
0xc070ed13f8dbb0ea 0xc070ed13f8dbb0e9 0xc070ed13f8dbb0ea
0x408113091f06da4e 0x408113091f06da4d 0x408113091f06da4e
0xc05c12b0fbcdd770 0xc05c12b0fbcdd770 0xc05c12b0fbcdd770
0x406fe5798351d860 0x406fe5798351d861 0x406fe5798351d860
0x4081cbb8843165ca 0x4081cbb8843165cb 0x4081cbb8843165ca
0x408aef6b1604b714 0x408aef6b1604b713 0x408aef6b1604b714
0xc08db5386386d81e 0xc08db5386386d81e 0xc08db5386386d81e
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;release mode (w/ -O3)
randomNumber       asm(FMADD)         asm(FMUL+FADD)
0x4080b94a0b6532a9 0x4080b94a0b6532a9 0x4080b94a0b6532aa
0xc0780b37385ca5b3 0xc0780b37385ca5b3 0xc0780b37385ca5b2
0xc06f718e8ca69299 0xc06f718e8ca69299 0xc06f718e8ca69298
0xc070ed13f8dbb0e9 0xc070ed13f8dbb0e9 0xc070ed13f8dbb0ea
0x408113091f06da4d 0x408113091f06da4d 0x408113091f06da4e
0xc05c12b0fbcdd770 0xc05c12b0fbcdd770 0xc05c12b0fbcdd770
0x406fe5798351d861 0x406fe5798351d861 0x406fe5798351d860
0x4081cbb8843165cb 0x4081cbb8843165cb 0x4081cbb8843165ca
0x408aef6b1604b713 0x408aef6b1604b713 0x408aef6b1604b714
0xc08db5386386d81e 0xc08db5386386d81e 0xc08db5386386d81e
&lt;/denchmark-code&gt;

From the left column result, each hex number shows the hex express of double of

operation in C
operation in asm using fmadd
operation in asm using fmul+fadd

The result from debug mode shows same result as FMUL+FADD, and release mode shows same result as FMADD.
I confirmed in the .s file that fmadd was only used in release mode.
So, the cause of the different input was because of fmadd.
I modified just this part using asm and confirmed that src1 and src2 becomes identical.
Still, this test ends up in error in another test case.
&lt;denchmark-code&gt;CTEST_FULL_OUTPUT
OpenCV version: 3.1.0-dev
OpenCV VCS version: 3.1.0-424-g9ebe29a-dirty
Build type: release
Parallel framework: pthreads
CPU features: neon
OpenCL is disabled
Note: Google Test filter = Core_MulSpec*
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from Core_MulSpectrums
[ RUN      ] Core_MulSpectrums.accuracy
/home/odroid/opencv-fork/modules/ts/src/ts.cpp:518: Failure
Failed

    failure reason: Bad accuracy
    test case #161
    seed: 587aab954e525c23
-----------------------------------
    LOG:
output: Too big difference (=1.86391e-12) at (20, 96)
input array 0 type=64fC2, size=(94, 69)
input array 1 type=64fC2, size=(94, 69)
ref output array 0 type=64fC2, size=(94, 69)

-----------------------------------
    CONSOLE: ...................
-----------------------------------

[  FAILED  ] Core_MulSpectrums.accuracy (158 ms)
[----------] 1 test from Core_MulSpectrums (158 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (160 ms total)
[  PASSED  ] 0 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] Core_MulSpectrums.accuracy
&lt;/denchmark-code&gt;

I need to dig in cvtest::mulComplex and cv::muilSpectrum.
It seemed OK, but I guess it's different in asm level.
		</comment>
		<comment id='3' author='tomoaki0705' date='2016-05-19T23:57:13Z'>
		&lt;denchmark-h:h4&gt;Summary&lt;/denchmark-h&gt;

I think I found the cause of this problem, but I need to ask a help before fixing
&lt;denchmark-h:h4&gt;source code of expected and actual&lt;/denchmark-h&gt;

In cv::mulSpectrum, the most core part is following ( &lt;denchmark-link:https://github.com/Itseez/opencv/blob/master/modules/core/src/dxt.cpp#L3555-L3557&gt;https://github.com/Itseez/opencv/blob/master/modules/core/src/dxt.cpp#L3555-L3557&lt;/denchmark-link&gt;
 ).
double re = dataA[j]*dataB[j] - dataA[j+1]*dataB[j+1]; // this line is the cause
double im = dataA[j+1]*dataB[j] + dataA[j]*dataB[j+1];
dataC[j] = re; dataC[j+1] = im;
Also, in test_dxt.cpp, cvtest::mulComplex is called and inside, it's also doing following ( &lt;denchmark-link:https://github.com/Itseez/opencv/blob/master/modules/core/test/test_dxt.cpp#L469-L473&gt;https://github.com/Itseez/opencv/blob/master/modules/core/test/test_dxt.cpp#L469-L473&lt;/denchmark-link&gt;
 ).
double re = a[j]*b[j] - a[j+1]*b[j+1]; // this line is the cause
double im = a[j+1]*b[j] + a[j]*b[j+1];

c[j] = re;
c[j+1] = im;
The line which is doing the subtraction is the cause of the difference.
Both of the lines are doing ''double * double - double * double''.
&lt;denchmark-h:h4&gt;debug mode&lt;/denchmark-h&gt;

It seems that in debug mode, these operations are done separately.
Two fmul instructions and one fsub instruction.
&lt;denchmark-h:h4&gt;release mode&lt;/denchmark-h&gt;

In only in dxt.cpp, the operations is performed by fmsub instruction.
(Fused Multiply and Subtract)
$ make test/test_dxt.cpp.s
Compiling CXX source to assembly CMakeFiles/opencv_test_core.dir/test/test_dxt.cpp.s
$ make src/dxt.cpp.s
Compiling CXX source to assembly CMakeFiles/opencv_core_object.dir/src/dxt.cpp.s
Compiling CXX source to assembly CMakeFiles/opencv_core.dir/src/dxt.cpp.s
$ grep fmsub CMakeFiles/opencv_test_core.dir/test/test_dxt.cpp.s | wc -l
0
$ grep fmsub CMakeFiles/opencv_core.dir/src/dxt.cpp.s | wc -l
28
&lt;denchmark-h:h4&gt;corner case&lt;/denchmark-h&gt;

This usually doesn't matter.
There will be a slight difference, but relatively small.
The worst case comes when both product of the double becomes very similar value.
Then the difference of fsub and fmsub becomes larger, due to the rounding error.
I just wrote a simple code to reproduce the corner case.
double a = 3300.4555;
double b = 3200.3456;
double c = 3300.4554;
double d = 3200.3421;
double product;
double diffFSUB;
double diffFMSUB;
asm(
    "fmov  d1, %2     \n"
    "fmov  d2, %3     \n"
    "fmul  d1, d1, d2 \n"
    "fmov  %1, d1     \n"
    "fmov  d2, %4     \n"
    "fmov  d3, %5     \n"
    "fmul  d2, d2, d3 \n"
    "fsub  d1, d1, d2 \n"
    "fmov  %0, d1     \n"
    :"=r"(diffFSUB), "=r"(product)
    :"r"(a),"r"(b),"r"(c),"r"(d)
    :"d1", "d2", "d3"
    );
asm(
    "fmov  d1, %2         \n"
    "fmov  d2, %3         \n"
    "fmul  d3, d1, d2     \n"
    "fmov  %1, d3         \n"
    "fmov  d1, %4         \n"
    "fmov  d2, %5         \n"
    "fmsub d1, d1, d2, d3 \n"
    "fmov  %0, d1         \n"
    :"=r"(diffFMSUB), "=r"(product)
    :"r"(a),"r"(b),"r"(c),"r"(d)
    :"d1", "d2", "d3"
    );
std::cout &lt;&lt; "diffFSUB  " &lt;&lt; diffFSUB  &lt;&lt; std::hex &lt;&lt; "  0x" &lt;&lt; *(long long int*)&amp;diffFSUB  &lt;&lt; std::dec &lt;&lt; std::endl;
std::cout &lt;&lt; "diffFMSUB " &lt;&lt; diffFMSUB &lt;&lt; std::hex &lt;&lt; "  0x" &lt;&lt; *(long long int*)&amp;diffFMSUB &lt;&lt; std::dec &lt;&lt; std::endl;
std::cout &lt;&lt; "product   " &lt;&lt; product   &lt;&lt; std::hex &lt;&lt; "  0x" &lt;&lt; *(long long int*)&amp;product   &lt;&lt; std::dec &lt;&lt; std::endl;
result
&lt;denchmark-code&gt;diffFSUB  11.8716  0x4027be4615f00000
diffFMSUB 11.8716  0x4027be4615f6476c
product   1.05626e+07  0x41642584c798f382
&lt;/denchmark-code&gt;

You can see that the result of diffFSUB has almost 20bits of rounding error compared to the diffFMSUB.
So, the cause of the error is that

in Release mode,

fmsub is used for dxt.cpp
fsub is used for test_dxt.cpp


in Debug mode,

both of the code uses fsub
and this only happens few pixel per test



&lt;denchmark-h:h4&gt;question&lt;/denchmark-h&gt;

Now I have an idea about 3 types of solutions.

force to use fmsub at this place
use volatile for the inter medium value, (i.e. force ''NOT'' to use fmsub at this place)
loosen the error threshold

But I'm not sure which way to go, since they all have pros/cons

force to use fmsub at this place

pros: fmsub is good for accuracy
cons: we can't rely on optimization of the compiler, so we need to use either asm or intrinsic, which will conflict with other platforms, so we need to mess the code with #ifdef, here


use volatile for the  inter medium value, (i.e. force ''NOT'' to use fmsub at this place)

pros: volatile will prevent the use of fmsub, so result accuracy doesn't rely on optimization of the compiler
cons: performance might slow down, due to the memory access from volatile


loosen the error threshold

pros: Keep the code consistent with other platforms
cons: This will affect whole test_core module, so I don't think it's a good idea



I can try to fix this but before that, I'd like to hear the opinion from everyone.
		</comment>
		<comment id='4' author='tomoaki0705' date='2016-05-20T01:47:15Z'>
		Nice investigation!
My suggestion is to increase threshold for "ARM + release" mode for this test/tests (proposal 3) or "fix" input test data (generate/use another set of values).
		</comment>
		<comment id='5' author='tomoaki0705' date='2016-05-20T09:34:40Z'>
		Thank you for the advice, &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;

I pushed some commits, and hope it'll help OpenCV.
		</comment>
	</comments>
</bug>