<bug id='14521' author='andreatta-deltamax' open_date='2019-05-09T09:14:53Z' closed_time='2020-02-21T19:56:20Z'>
	<summary>integer overflow in convexHull</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4.3
Operating System / Platform =&gt; Windows 64 Bit
Compiler =&gt; Visual Studio 2015

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

I was testing convexHull alternative algorithms, and I had different results unsing convexHull with Point and Point2f with the same data.
I looks like there is a potential overflow in
template&lt;typename _Tp&gt; static int Sklansky_( Point_&lt;_Tp&gt;** array, int start, int end, int* stack, int nsign, int sign2 )
convhull.cpp:82
 _Tp convexity = ay*bx - ax*by; // if &gt;0 then convex angle
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;  std::vector&lt;cv::Point&gt; points;
  std::vector&lt;cv::Point2f&gt; pointsf;

  points.push_back(cv::Point(14763, 2890));
  points.push_back(cv::Point(14388, 72088));
  points.push_back(cv::Point(62810, 72274));
  points.push_back(cv::Point(63166, 3945));
  points.push_back(cv::Point(56782, 3945));
  points.push_back(cv::Point(56763, 3077));
  points.push_back(cv::Point(34666, 2965));
  points.push_back(cv::Point(34547, 2953));
  points.push_back(cv::Point(34508, 2866));
  points.push_back(cv::Point(34429, 2965));
  
  for (auto it = points.begin(); it != points.end(); ++it) pointsf.push_back(*it);

  std::vector&lt;int&gt; hull;
  std::vector&lt;int&gt; hullf;

  cv::convexHull(points, hull, false, false);
  cv::convexHull(pointsf, hullf, false, false);

  if (hull != hullf) throw std::runtime_error("error!");

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='andreatta-deltamax' date='2020-02-16T23:07:49Z'>
		&lt;denchmark-link:https://github.com/andreatta-deltamax&gt;@andreatta-deltamax&lt;/denchmark-link&gt;
, thank you! fixed
		</comment>
	</comments>
</bug>