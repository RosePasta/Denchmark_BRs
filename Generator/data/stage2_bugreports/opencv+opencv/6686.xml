<bug id='6686' author='schenker' open_date='2016-06-15T14:57:51Z' closed_time='2016-08-17T15:14:45Z'>
	<summary>cv::MSER_Impl::detectRegions crashes on 1x1 pixel input image</summary>
	<description>
MSER::detectRegions crashes when i pass an 1x1 image.
&lt;denchmark-h:h3&gt;Please state the information for your system&lt;/denchmark-h&gt;


OpenCV version: 3
Host OS: Linux Mint and Windows7

&lt;denchmark-h:h3&gt;In which part of the OpenCV library you got the issue?&lt;/denchmark-h&gt;

features2d mser
&lt;denchmark-h:h3&gt;Valgrind Output&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;==15196== Memcheck, a memory error detector
==15196== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==15196== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==15196== Command: ./mser /home/tschenker/Desktop/Untitled.png
==15196== 
==15196== Warning: noted but unhandled ioctl 0x30000001 with no size/direction hints.
==15196==    This could cause spurious value errors to appear.
==15196==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
==15196== Warning: set address range perms: large range [0x200000000, 0x700000000) (noaccess)
==15196== Warning: set address range perms: large range [0x900000000, 0xb00000000) (noaccess)
==15196== Warning: set address range perms: large range [0xb00000000, 0xd00000000) (noaccess)
==15196== Invalid read of size 4
==15196==    at 0x4DEDBE: cv::MSER_Impl::Pixel::setDir(int) (mser.cpp:118)
==15196==    by 0x4E001E: cv::MSER_Impl::pass(cv::Mat const&amp;, std::vector&lt;std::vector&lt;cv::Point_&lt;int&gt;, std::allocator&lt;cv::Point_&lt;int&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;cv::Point_&lt;int&gt;, std::allocator&lt;cv::Point_&lt;int&gt; &gt; &gt; &gt; &gt;&amp;, std::vector&lt;cv::Rect_&lt;int&gt;, std::allocator&lt;cv::Rect_&lt;int&gt; &gt; &gt;&amp;, cv::Size_&lt;int&gt;, int const*, int) (mser.cpp:432)
==15196==    by 0x4E06FB: cv::MSER_Impl::detectRegions(cv::_InputArray const&amp;, std::vector&lt;std::vector&lt;cv::Point_&lt;int&gt;, std::allocator&lt;cv::Point_&lt;int&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;cv::Point_&lt;int&gt;, std::allocator&lt;cv::Point_&lt;int&gt; &gt; &gt; &gt; &gt;&amp;, std::vector&lt;cv::Rect_&lt;int&gt;, std::allocator&lt;cv::Rect_&lt;int&gt; &gt; &gt;&amp;) (mser.cpp:561)
==15196==    by 0x49720D: mserExtractor(cv::Mat const&amp;, cv::Mat&amp;) (mser.cpp:236)
==15196==    by 0x497354: update() (mser.cpp:247)
==15196==    by 0x497B0E: main (mser.cpp:309)
==15196==  Address 0x177681f8 is 4 bytes after a block of size 4 alloc'd
==15196==    at 0x4C2B0E0: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==15196==    by 0x4E572F: __gnu_cxx::new_allocator&lt;cv::MSER_Impl::Pixel&gt;::allocate(unsigned long, void const*) (new_allocator.h:104)
==15196==    by 0x4E4BEE: std::_Vector_base&lt;cv::MSER_Impl::Pixel, std::allocator&lt;cv::MSER_Impl::Pixel&gt; &gt;::_M_allocate(unsigned long) (in /home/tschenker/workspace/sandbox/mser/build/mser)
==15196==    by 0x4E34DD: std::vector&lt;cv::MSER_Impl::Pixel, std::allocator&lt;cv::MSER_Impl::Pixel&gt; &gt;::_M_fill_insert(__gnu_cxx::__normal_iterator&lt;cv::MSER_Impl::Pixel*, std::vector&lt;cv::MSER_Impl::Pixel, std::allocator&lt;cv::MSER_Impl::Pixel&gt; &gt; &gt;, unsigned long, cv::MSER_Impl::Pixel const&amp;) (vector.tcc:483)
==15196==    by 0x4E213D: std::vector&lt;cv::MSER_Impl::Pixel, std::allocator&lt;cv::MSER_Impl::Pixel&gt; &gt;::insert(__gnu_cxx::__normal_iterator&lt;cv::MSER_Impl::Pixel*, std::vector&lt;cv::MSER_Impl::Pixel, std::allocator&lt;cv::MSER_Impl::Pixel&gt; &gt; &gt;, unsigned long, cv::MSER_Impl::Pixel const&amp;) (stl_vector.h:1024)
==15196==    by 0x4E0EDC: std::vector&lt;cv::MSER_Impl::Pixel, std::allocator&lt;cv::MSER_Impl::Pixel&gt; &gt;::resize(unsigned long, cv::MSER_Impl::Pixel) (stl_vector.h:707)
==15196==    by 0x4DF9B5: cv::MSER_Impl::preprocess1(cv::Mat const&amp;, int*) (mser.cpp:356)
==15196==    by 0x4E0635: cv::MSER_Impl::detectRegions(cv::_InputArray const&amp;, std::vector&lt;std::vector&lt;cv::Point_&lt;int&gt;, std::allocator&lt;cv::Point_&lt;int&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;cv::Point_&lt;int&gt;, std::allocator&lt;cv::Point_&lt;int&gt; &gt; &gt; &gt; &gt;&amp;, std::vector&lt;cv::Rect_&lt;int&gt;, std::allocator&lt;cv::Rect_&lt;int&gt; &gt; &gt;&amp;) (mser.cpp:556)

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='schenker' date='2016-06-28T07:40:06Z'>
		Well not that I agree with MSER not catching this itself, but why would you wanna pass a 1x1 pixel image to MSER. In my opinion this is a case of faulty reasoning, since if you look at the MSER algorithm, you would notice that performing it on a 1x1pixel images is impossible and completely not how it should be used.
Please reopen if you disagree.
		</comment>
		<comment id='2' author='schenker' date='2016-06-28T09:21:16Z'>
		&lt;denchmark-link:https://github.com/StevenPuttemans&gt;@StevenPuttemans&lt;/denchmark-link&gt;
, I would disagree. OpenCV functions must not crash. They may report an error in the case of weird parameters, but should not crash.
		</comment>
		<comment id='3' author='schenker' date='2016-06-28T09:27:24Z'>
		&lt;denchmark-link:https://github.com/vpisarev&gt;@vpisarev&lt;/denchmark-link&gt;
 okay seems reasonable :) then we should take a minimal size as prerequisite.
		</comment>
	</comments>
</bug>