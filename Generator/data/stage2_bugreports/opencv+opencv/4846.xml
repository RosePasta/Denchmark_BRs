<bug id='4846' author='opencv-pushbot' open_date='2015-07-27T10:48:31Z' closed_time='2017-02-09T10:40:25Z'>
	<summary>crash in cv::kmeans() called from saliency::StaticSaliency::computeBinaryMap()</summary>
	<description>
Transferred from &lt;denchmark-link:http://code.opencv.org/issues/3954&gt;http://code.opencv.org/issues/3954&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;|| Craig Henderson on 2014-10-14 07:50
|| Priority: Normal
|| Affected: branch 'master' (3.0-dev)
|| Category: core
|| Tracker: Bug
|| Difficulty: 
|| PR: 
|| Platform: x64 / Windows
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;crash in cv::kmeans() called from saliency::StaticSaliency::computeBinaryMap()&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;I am getting a crash (assert in Debug build) calculating the binary map of the saliency of an image. Many images work without a problem, but the attached one causes the problem (also at http://pbrd.co/11hJBvH)

The assert message is
??OpenCV Error: Assertion failed (y == 0 || (data &amp;&amp; dims &gt;= 1 &amp;&amp; (unsigned)y &lt; (unsigned)size.p[0])) in cv::Mat::ptr, file &lt;opencv_source&gt;\modules\core\include\opencv2/core/mat.inl.hpp, line 750??

Here's my code:
&lt;pre&gt;
cv::Mat image = imread(...); // image is at http://pbrd.co/11hJBvH
cv::Ptr&lt;cv::saliency::Saliency&gt; saliencyAlgorithm = cv::saliency::Saliency::create("SPECTRAL_RESIDUAL");
cv::Mat saliencyMap;
if (saliencyAlgorithm-&gt;computeSaliency(image, saliencyMap))
{
    cv::Mat binaryMap;
    cv::saliency::StaticSaliencySpectralResidual spec;
    spec.computeBinaryMap(saliencyMap, binaryMap);     &lt;-- call that fails
}
&lt;/pre&gt;

and here's the callstack:
&lt;pre&gt;
opencv_core300d.dll!cv::error(const cv::Exception &amp; exc) Line 557   C++
opencv_core300d.dll!cv::error(int _code, const cv::String &amp; _err, const char * _func, const char * _file, int _line) Line 565   C++
opencv_core300d.dll!cv::Mat::ptr&lt;float&gt;(int y) Line 750 C++
opencv_core300d.dll!cv::kmeans(const cv::_InputArray &amp; _data, int K, const cv::_InputOutputArray &amp; _bestLabels, cv::TermCriteria criteria, int attempts, int flags, const cv::_OutputArray &amp; _centers) Line 400 C++
opencv_saliency300d.dll!cv::saliency::StaticSaliency::computeBinaryMap(const cv::Mat &amp; saliencyMap, cv::Mat &amp; BinaryMap) Line 74    C++
&lt;/pre&gt;

The problem in @cv::kmeans()@ is in calculating @farthest_i@. It's initialised to -1 on line 375 and conditionally set to a distance value on line 393. In the case of this image, it seems the condition is never met, and @farthest_i@ is still @-1@ when it is used as an index at line 399 silently causing memory corruption and then in line 400 when the @ptr()@ asserts.

I think there's a problem with the robustness of @cv::kmeans@, but I don't know if there is a problem with the way Saliency is using @kmeans@ or if @kmeans@ is the root cause. I'm using the latest master branch from git (last commit was 37c503d462a72fe7ff1f7abfb626fab5a73ff947 on 10/10/2014)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;History&lt;/denchmark-h&gt;

&lt;denchmark-h:h5&gt;Craig Henderson on 2014-10-14 07:53&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;-   File 2007_004052.jpg added
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Vadim Pisarevsky on 2015-04-27 15:21&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;-   Category set to core
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='opencv-pushbot' date='2017-02-09T08:22:46Z'>
		Putting this
if (farthest_i &lt; 0) return -1.0;
at line 397 will solve the issue.
However, please note that because the bug is of the ill-formed data coming in, you might need to know when to bypass kmeans result by checking the return value of cv::kmeans higher than 0.
There is no way that the return value is &lt;= 0 unless data is ill-formed.
		</comment>
		<comment id='2' author='opencv-pushbot' date='2017-02-09T10:40:24Z'>
		Can't reproduce crash with the latest OpenCV code and this image:
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/4981219/22779690/d158ee2a-eecc-11e6-8bdf-416bcb5bc261.jpg&gt;&lt;/denchmark-link&gt;

Probably it is fixed by &lt;denchmark-link:https://github.com/opencv/opencv/commits/master/modules/core/src/kmeans.cpp&gt;these commits&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>