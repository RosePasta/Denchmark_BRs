<bug id='5882' author='arkhivania' open_date='2015-12-25T12:48:18Z' closed_time='2015-12-25T16:44:06Z'>
	<summary>Windows Multithreaded environment vc12 build configuration</summary>
	<description>
Hello! I have not very nice situation with my little test:
There is a metacode from c# project
[Test]
        [TestCase(1024, 1024, 256, 256, NativePixelFormat.Y, Interpolation.Nearest)]
        [TestCase(1024, 1024, 256, 256, NativePixelFormat.Y, Interpolation.Linear)]
        [TestCase(1024, 1024, 256, 256, NativePixelFormat.Y2, Interpolation.Nearest)]
        [TestCase(1024, 1024, 256, 256, NativePixelFormat.Y2, Interpolation.Linear)]
        public void Resize(int sourceWidth, int sourceHeight, int destWidth, int destHeight, NativePixelFormat format, Interpolation interpolation)
        {
            Parallel.For(0, 1000, i =&gt; {
                using (var source = new ImageBuffer(new StoreInfo { Width = sourceWidth, Height = sourceHeight, Format = format }, new Framework.HeapMemoryPool()))
                using (var dest = new ImageBuffer(new StoreInfo { Width = destWidth, Height = destHeight, Format = format }, new Framework.HeapMemoryPool()))
                    ImageMath.Resize.Process(source.ToNativeImageBuffer(), dest.ToNativeImageBuffer(), interpolation);
            });
        }
Resize.Process - it's PInvoke to cv::resize method
Unfortunately, there are access violation memory exceptions fired. The situation appears only with parallel execution.
cv::warpAffine have the same trouble. I didn't compile opencv myself, it's vc12 build from OpenCV 3.0 public distr. I examined some code, and have only one idea. WarpAffine use AutoBuffer in function, maby some strange compiler optimization crash the stack in multithreaded environment.
	</description>
	<comments>
		<comment id='1' author='arkhivania' date='2015-12-25T13:14:09Z'>
		More details are definitely required: configuration dump (see cv::getBuildInformation()), stack traces (use Debug build).
It will be great to have reproducer with C++ code only (you may use std::thread to minimize code) to eliminate possible errors in C# bindings.
		</comment>
		<comment id='2' author='arkhivania' date='2015-12-25T16:01:29Z'>
		&lt;denchmark-link:https://github.com/Itseez/opencv/files/72212/out.txt&gt;out.txt&lt;/denchmark-link&gt;

&lt;denchmark-link:https://cloud.githubusercontent.com/assets/5111153/12003645/34c2faa6-ab39-11e5-8321-25ffaed5222b.png&gt;&lt;/denchmark-link&gt;

Is there something wrong with OpenCL initialization in diffrent threads?
&lt;denchmark-link:https://github.com/Itseez/opencv/files/72215/OcvTroubles.zip&gt;OcvTroubles.zip&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='arkhivania' date='2015-12-25T16:24:48Z'>
		Ok! Workaround it's initialize opencl singletons and other stuff in main application thread on startup.
#include "stdafx.h"

#include "opencv2/imgproc/imgproc.hpp"
#include &lt;ppl.h&gt;
#include &lt;ostream&gt;

using namespace concurrency;

void TestImageResize()
{
    cv::Mat sm1(1024, 1024, CV_8U);
    cv::Mat sm2(1024, 1024, CV_8U);

    cv::Mat tm1(128, 128, CV_8U);
    cv::Mat tm2(128, 128, CV_8U);

    cv::resize(sm1, tm1, tm1.size());
    cv::resize(sm2, tm2, tm2.size());
}

int _tmain(int argc, _TCHAR* argv[])
{
    auto bc = cv::getBuildInformation();
    printf(bc.c_str());

    TestImageResize();

    parallel_for(0, 10000, [&amp;](int index)
    {
        TestImageResize();
    });

    return 0;
}
		</comment>
		<comment id='4' author='arkhivania' date='2015-12-25T16:42:07Z'>
		I'm able to reproduce this issue with 3.0.0.
Also this line helps to workaround this issue:
&lt;denchmark-code&gt;auto useOpenCL = cv::ocl::useOpenCL();
&lt;/denchmark-code&gt;

This bug should be fixed in 3.1.0 (PR &lt;denchmark-link:https://github.com/opencv/opencv/pull/4150&gt;#4150&lt;/denchmark-link&gt;
)
		</comment>
		<comment id='5' author='arkhivania' date='2015-12-25T16:43:54Z'>
		Thanks!
		</comment>
	</comments>
</bug>