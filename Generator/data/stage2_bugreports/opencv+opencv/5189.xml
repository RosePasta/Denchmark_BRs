<bug id='5189' author='berak' open_date='2015-08-14T05:36:00Z' closed_time='2018-07-17T18:35:16Z'>
	<summary>3.0 java calib3d wrappers call fisheye functions</summary>
	<description>
projectPoints, distortPoints, undistortPoints, initUndistortRectifyMap, undistortImage, estimateNewCameraMatrixForUndistortRectify, calibrate, stereoRectify, stereoCalibrate all call c++ functions from the fisheye namespace, while the pinhole model should be used.
example wrapper (from build/modules/java/calib3d.cpp): &lt;denchmark-link:https://gist.github.com/berak/f5c0662b7538fee67f87&gt;https://gist.github.com/berak/f5c0662b7538fee67f87&lt;/denchmark-link&gt;

this leads to weird errors: &lt;denchmark-link:http://answers.opencv.org/question/68575/initundistortrectifymap-assert-error/&gt;http://answers.opencv.org/question/68575/initundistortrectifymap-assert-error/&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='berak' date='2018-02-22T12:41:11Z'>
		problem is still present in current 3.4
		</comment>
		<comment id='2' author='berak' date='2018-02-22T13:30:48Z'>
		I agree that nested namespace should be supported in bindings (but currently can't be done universally without breaking of existed code due cv::ml / cv::dnn namespaces).
Problem investigation is not very accurate:

projectPoints() - different signatures. No conflict.
distortPoints() - fisheye only
"normal" undistortPoints() is imgproc function
"normal" initUndistortRectifyMap() is imgproc function
undistortImage() -&gt; fisheye only
estimateNewCameraMatrixForUndistortRectify - fisheye only
calibrate() - fisheye only. "normal" has names: calibrateCamera() / calibrateCameraExtended()
stereoRectify() - different signatures. No conflict.
stereoCalibrate() - different signatures. No conflict.

Currently there are no conflicts observed. But current code is very confusing and should be fixed.
		</comment>
	</comments>
</bug>