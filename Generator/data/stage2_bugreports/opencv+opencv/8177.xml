<bug id='8177' author='claudiofantacci' open_date='2017-02-10T12:39:26Z' closed_time='2017-04-03T09:59:59Z'>
	<summary>cuda::HOG::compute does not support non-default cuda::Stream</summary>
	<description>
This issue is about the use of non-default cuda::Stream in &lt;denchmark-link:http://docs.opencv.org/3.2.0/de/da6/classcv_1_1cuda_1_1HOG.html#ab4287267081959ec77c01269dbfcd373&gt;cuda::HOG::compute&lt;/denchmark-link&gt;
.
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.2
Operating System / Platform =&gt; macOS 10.12
Compiler =&gt; clang

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

From the method signature, it seems that it is possible to use any cuda::Stream of choice. However, if a non-default cuda::Stream is used the &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/cudaobjdetect/src/hog.cpp#L461&gt;cvAssert(!stream) (in hog.cpp, L461)&lt;/denchmark-link&gt;
 fails and the execution is interrupted.
I &lt;denchmark-link:http://answers.opencv.org/question/124715/is-cudahog-working-with-cudastream/&gt;posted a question&lt;/denchmark-link&gt;
 about this in answers.opencv.org, but I got no answers.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Here is a sample code to reproduce the issue.
    #include &lt;iostream&gt;

#include &lt;opencv2/core/core.hpp&gt;
#include &lt;opencv2/core/cuda.hpp&gt;
#include &lt;opencv2/imgcodecs.hpp&gt;
#include &lt;opencv2/cudaobjdetect.hpp&gt;
#include &lt;opencv2/cudaimgproc.hpp&gt;

using namespace cv;

int main()
{
    /* Source image of choice */
    /* Change path to get another image */
    Mat src;
    src = imread("../../img/camera2.ppm", IMREAD_COLOR);

    /* CUDA HOG Descriptor */
    /* Change Size() parameters to accomodate to the used image */
    Ptr&lt;cuda::HOG&gt; hog = cuda::HOG::create(Size(320, 240),  /* winSize */
                                           Size(16, 16),    /* blockSize */
                                           Size(8, 8),      /* blockStride */
                                           Size(8, 8),      /* cellSize */
                                           9);              /* nbins */

    /* CUDA Stream and GpuMat */
    cuda::Stream stream;
    cuda::GpuMat cuda_src;
    cuda::GpuMat cuda_src_alpha;
    cuda::GpuMat cuda_descriptors;
    Mat          descriptors;

    /* Uploading src to GPU using default stream */
    std::cout &lt;&lt; "Running HOG on deafult Stream" &lt;&lt; std::endl;
    cuda_src.upload(src);
    cuda::cvtColor(cuda_src, cuda_src_alpha, COLOR_BGR2BGRA, 4);
    hog-&gt;compute(cuda_src_alpha, cuda_descriptors);
    cuda_descriptors.download(descriptors);

    /* Uploading src to GPU using non-default Stream */
    std::cout &lt;&lt; "Running HOG on non-deafult Stream" &lt;&lt; std::endl;
    cuda_src.upload(src, stream);
    cuda::cvtColor(cuda_src, cuda_src_alpha, COLOR_BGR2BGRA, 4, stream);
    hog-&gt;compute(cuda_src_alpha, cuda_descriptors, stream);
    cuda_descriptors.download(descriptors, stream);

    return EXIT_SUCCESS;
}
The output is:
&lt;denchmark-code&gt;Running HOG on deafult Stream
Running HOG on non-deafult Stream
OpenCV Error: Assertion failed (!stream) in compute, file /tmp/opencv3-20170201-80029-q1jvsi/opencv-3.2.0/modules/cudaobjdetect/src/hog.cpp, line 461
libc++abi.dylib: terminating with uncaught exception of type cv::Exception: /tmp/opencv3-20170201-80029-q1jvsi/opencv-3.2.0/modules/cudaobjdetect/src/hog.cpp:461: error: (-215) !stream in function compute
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Possible solution&lt;/denchmark-h&gt;

I went through the cuda::HOG implementation and I made changes to address this issue.
I forked OpenCV, made a new branch and &lt;denchmark-link:https://github.com/claudiofantacci/opencv/commit/a1e2282fcf92d13445343042a0806119c466da59&gt;committed such changes&lt;/denchmark-link&gt;
.
It is not yet in a shape that I feel it could be used to do a PR (I intentionally deleted some checks/asserts to test and profile the code), but it's really close to a final version.
As a proof of concept, please find herewith a picture of Nsight profiling results showing cuda::HOG running on 2 streams with a bit of parallelism while loading data on the device while running another kernel (which is the capability I have on my laptop).
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/14168673/22827071/3e074a8e-ef96-11e6-8b9b-b3919fe0e66b.png&gt;&lt;/denchmark-link&gt;

I'm looking forward to having feedback!
	</description>
	<comments>
	</comments>
</bug>