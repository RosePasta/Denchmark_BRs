<bug id='16373' author='Palmitoxico' open_date='2020-01-17T11:18:39Z' closed_time='2020-01-20T12:09:39Z'>
	<summary>Bus fault when importing ONNX model on Android</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 1a74de1 (4.2)
Operating System / Platform =&gt; Android 4.4.4 amv7l
Compiler =&gt; Android NDK r18b (clang, Android API level = 16)
Optmization =&gt; -DCMAKE_BUILD_TYPE=Release (-Oz)

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

I'm getting a SIGBUS when loading an ONNX model on Android (armv7l), this problem only occurs when building with optimizations enabled, -O0 doesn't trigger the issue. I've nailed down the problem to these specific lines:



opencv/modules/dnn/src/onnx/onnx_importer.cpp


        Lines 149 to 153
      in
      d85e67d






 { 



 char* val = const_cast&lt;char*&gt;(tensor_proto.raw_data().c_str()); 



 int64_t* src = reinterpret_cast&lt;int64_t*&gt;(val); 



 convertInt64ToInt32(src, dst, blob.total()); 



 } 





The problem is that the pointer returned by std::string::c_str() doesn't have any guarantee that it is 8 bytes aligned, and sure enough when inspecting with GDB the val pointer isn't aligned, thus src.
I've workaround this by allocating a intermediate buffer and copying the data pointed by val:
{
    char* val = const_cast&lt;char*&gt;(tensor_proto.raw_data().c_str());
    int size = tensor_proto.raw_data().size();
    int64_t* src = new int64_t[size];
    memcpy(src, val, size);
    convertInt64ToInt32(src, dst, blob.total());
    delete[] src;
}
I don't known if this is an good solution, please let me known.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Build for Android armv7l, NDK r18b with optimizations. Call cv::dnn::readNetFromONNX() with a valid ONNX file.
Thanks,
Augusto.
	</description>
	<comments>
		<comment id='1' author='Palmitoxico' date='2020-01-17T11:37:03Z'>
		Right, ARMv7 doesn't tolerate unaligned memory access (unchecked char* =&gt; int64_t*).
		</comment>
		<comment id='2' author='Palmitoxico' date='2020-01-17T13:44:56Z'>
		&lt;denchmark-link:https://github.com/Palmitoxico&gt;@Palmitoxico&lt;/denchmark-link&gt;
 Thank you for the report and investigation!
Could you please try this patch: &lt;denchmark-link:https://github.com/opencv/opencv/pull/16377&gt;#16377&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='3' author='Palmitoxico' date='2020-01-17T15:56:17Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 The &lt;denchmark-link:https://github.com/opencv/opencv/pull/16377&gt;#16377&lt;/denchmark-link&gt;
 patch doesn't solve the issue, still getting SIGBUS when deferencing the src pointer. Are the  type supposed to force the compiler to access the data in a byte-per-byte basis?
		</comment>
		<comment id='4' author='Palmitoxico' date='2020-01-17T16:07:18Z'>
		Thank you! This doesn't work because templates can't handle attributes properly.
Please validate updated patch.
		</comment>
		<comment id='5' author='Palmitoxico' date='2020-01-17T16:25:27Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/opencv/opencv/pull/16377&gt;#16377&lt;/denchmark-link&gt;
 works now, thanks!
		</comment>
		<comment id='6' author='Palmitoxico' date='2020-04-01T10:47:34Z'>
		Hi. This issue occurs also with version 4.1.0
		</comment>
	</comments>
</bug>