<bug id='18695' author='JulienMaille' open_date='2020-10-29T14:55:38Z' closed_time='2020-11-20T19:13:43Z'>
	<summary>onnx 12: Inconsistent shape for ConcatLayer in function 'cv::dnn::ConcatLayerImpl::getMemoryShapes'</summary>
	<description>
I'm working on a Unet model and the upsampling layers will trigger an exception when infering on an image with a different size than the training dataset: 
When exporting to onnx opset 9, inference work for any input size. The upsampling layer is defined as 
&lt;denchmark-link:https://user-images.githubusercontent.com/182520/97590329-c6a4aa80-19fe-11eb-9fb7-59f4b9339a4f.png&gt;&lt;/denchmark-link&gt;

When exporting to onnx opset &gt;9, inference work on 256Â² only. The upsampling layer is defined as 
&lt;denchmark-link:https://user-images.githubusercontent.com/182520/97588931-43368980-19fd-11eb-9ba6-e72b687ce29a.png&gt;&lt;/denchmark-link&gt;

I can provide both onnx by email if needed
	</description>
	<comments>
		<comment id='1' author='JulienMaille' date='2020-10-29T21:31:10Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 wasn't that PR &lt;denchmark-link:https://github.com/opencv/opencv/pull/16490&gt;#16490&lt;/denchmark-link&gt;
 supposed to handle this? &lt;denchmark-link:https://github.com/opencv/opencv/pull/16490/files&gt;https://github.com/opencv/opencv/pull/16490/files&lt;/denchmark-link&gt;

Scales seems to be taken from zoom_factor_x &amp; zoom_factor_y



opencv/modules/dnn/src/layers/resize_layer.cpp


        Lines 32 to 34
      in
      691c3d1






 ResizeLayerImpl(const LayerParams&amp; params) : zoomFactorWidth(params.get&lt;float&gt;("zoom_factor_x", params.get&lt;float&gt;("zoom_factor", 0))), 



 zoomFactorHeight(params.get&lt;float&gt;("zoom_factor_y", params.get&lt;float&gt;("zoom_factor", 0))), 



                                              scaleWidth(0), scaleHeight(0) 





Would it work to get them from scales[2] &amp; scales[3]?
		</comment>
		<comment id='2' author='JulienMaille' date='2020-10-30T09:12:06Z'>
		I confirm that editing my onnx and adding "zoom_factor_x", "zoom_factor_y" will make it work. So what we would need is to read from scales input instead
EDIT: which seems to be done here:



opencv/modules/dnn/src/onnx/onnx_importer.cpp


        Lines 1689 to 1700
      in
      199687a






 int height = shapes.at&lt;int&gt;(2); 



 int width  = shapes.at&lt;int&gt;(3); 



 if (node_proto.input_size() == 3) 



 { 



     IterShape_t shapeIt = outShapes.find(node_proto.input(0)); 



 CV_Assert(shapeIt != outShapes.end()); 



     MatShape scales = shapeIt-&gt;second; 



     height *= scales[2]; 



     width  *= scales[3]; 



 } 



 layerParams.set("width", width); 



 layerParams.set("height", height); 





		</comment>
		<comment id='3' author='JulienMaille' date='2020-10-30T13:28:39Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 I'd be glad to help but I don't understand why the code quoted from onnx_importer doesn't already fix the bug?
EDIT: I think that when scales are present, the w/h should not be set on import, it should be kept dynamic in case the input size is not the default one, so maybe something like this:
 int height = shapes.at&lt;int&gt;(2); 
 int width  = shapes.at&lt;int&gt;(3); 
 if (node_proto.input_size() == 3) 
 { 
     IterShape_t shapeIt = outShapes.find(node_proto.input(0)); 
     CV_Assert(shapeIt != outShapes.end()); 
     MatShape scales = shapeIt-&gt;second; 
     height = width = 0; 
     layerParams.set("zoom_factor_y", scales[2]);
     layerParams.set("zoom_factor_x", scales[3]);
 } 
 layerParams.set("width", width); 
 layerParams.set("height", height);
		</comment>
		<comment id='4' author='JulienMaille' date='2020-10-31T20:32:24Z'>
		&lt;denchmark-link:https://github.com/l-bat&gt;@l-bat&lt;/denchmark-link&gt;
 I do not want to break your code, but going step by step trough onnw_importer for the  layer I find strange things.
As you can see above, the node has 3 inputs: the , a , the  (in that order)
So when you retrieve the last input here, you get the scales, not the cv::Mat


And later when you retrieve the first input, you get the cv::Mat shape, not the scales


Am I wrong?
I would suggest something like this instead
        else if (layer_type == "Resize")
        {
            [...]
            if (node_proto.input_size() == 3)
            {
                Mat scales = getBlob(node_proto, 2);
                CV_Assert(scales.total() == 4);
                layerParams.set("zoom_factor_y", scales.at&lt;float&gt;(2));
                layerParams.set("zoom_factor_x", scales.at&lt;float&gt;(3));
            }
            else
            {
                MatShape shapes = outShapes[node_proto.input(0)];
                CV_Assert(shapes.size() == 4);
                layerParams.set("width", shapes[2]);
                layerParams.set("height", shapes[3]);
            }
            [...]
        }
		</comment>
		<comment id='5' author='JulienMaille' date='2020-11-04T19:09:13Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 looking at the code, it seems it's more a bug than a feature request. I'm really willing to help fixing it. Can I go ahead with suggestion above?
		</comment>
		<comment id='6' author='JulienMaille' date='2020-11-16T14:27:35Z'>
		&lt;denchmark-link:https://github.com/JulienMaille&gt;@JulienMaille&lt;/denchmark-link&gt;
 you are right. We don't consider that only one of 'scales' and 'sizes' can be specified. Could you please to add  block to your pull request?
		</comment>
		<comment id='7' author='JulienMaille' date='2020-11-16T14:51:41Z'>
		Hello, thank you &lt;denchmark-link:https://github.com/l-bat&gt;@l-bat&lt;/denchmark-link&gt;
 Just to make it clear, do you mean I should push this code to my PR?
if (node_proto.input_size() == 3)
{
    Mat scales = getBlob(node_proto, 2);
    CV_Assert(scales.total() == 4);
    layerParams.set("zoom_factor_y", scales.at&lt;float&gt;(2));
    layerParams.set("zoom_factor_x", scales.at&lt;float&gt;(3));
}
else
{
    MatShape shapes = outShapes[node_proto.input(0)];
    CV_Assert(shapes.size() == 4);
    layerParams.set("width", shapes[2]);
    layerParams.set("height", shapes[3]);
}
In the mean time I found your test model: &lt;denchmark-link:https://github.com/opencv/opencv_extra/blob/master/testdata/dnn/onnx/models/dynamic_resize.onnx&gt;https://github.com/opencv/opencv_extra/blob/master/testdata/dnn/onnx/models/dynamic_resize.onnx&lt;/denchmark-link&gt;

it has 4 inputs, not 3, which means, "scale" should be selected by name, instead of assuming it is the last one
&lt;denchmark-link:https://user-images.githubusercontent.com/182520/99260068-36969b80-281b-11eb-93f4-f26fccb5f362.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='JulienMaille' date='2020-11-16T14:54:17Z'>
		Yes, I think it's easier to understand. But you need a change:
layerParams.set("width", shapes[3]);
layerParams.set("height", shapes[2]);
		</comment>
		<comment id='9' author='JulienMaille' date='2020-11-16T14:56:07Z'>
		Sorry I edited in the mean time, with an additional question.
		</comment>
		<comment id='10' author='JulienMaille' date='2020-11-16T14:57:10Z'>
		This is strange because official ONNX docs &lt;denchmark-link:https://github.com/onnx/onnx/blob/master/docs/Changelog.md#Resize-13&gt;https://github.com/onnx/onnx/blob/master/docs/Changelog.md#Resize-13&lt;/denchmark-link&gt;
 say that 
		</comment>
		<comment id='11' author='JulienMaille' date='2020-11-16T14:58:17Z'>
		Well, this onnx comes from your commit, and was sent to netron.app to look at the inputs.
Is there a way to getBlob()` by its name, not position?
		</comment>
		<comment id='12' author='JulienMaille' date='2020-11-16T15:10:13Z'>
		If we have 3 inputs, then we need to determine the last input of the scale or sizes. I think we can determine this by the data type, integer for sizes and float for scales.
		</comment>
		<comment id='13' author='JulienMaille' date='2020-11-16T15:15:27Z'>
		According to doc &lt;denchmark-link:https://github.com/opencv/opencv_extra/blob/master/testdata/dnn/onnx/models/dynamic_resize.onnx&gt;our model&lt;/denchmark-link&gt;
 is incorrect ( we are generating them for a different opset), because   Could you please generate a new model for tests?
		</comment>
		<comment id='14' author='JulienMaille' date='2020-11-16T15:16:09Z'>
		
If we have 3 inputs, then we need to determine the last input of the scale or sizes. I think we can determine this by the data type, integer for sizes and float for scales.

Do you mean the input name (shown by netron) is not available in opencv onnx importer?
		</comment>
		<comment id='15' author='JulienMaille' date='2020-11-16T15:23:26Z'>
		Yes, in opencv we extract all inputs to CV::Mat
		</comment>
		<comment id='16' author='JulienMaille' date='2020-11-16T16:01:35Z'>
		
According to doc our model is incorrect  Could you please generate a new model for tests?

Can you provide some guidance on how to do this? I tried to edit the current one using onnx.helper but failed.
    original_model = onnx.load('dynamic_resize.onnx')

    for node in original_model.graph.node:
        if node.op_type == 'Resize':
            del node.input[-1]

    # save fixed ONNX
    onnx.save(original_model, 'dynamic_resize_fix.onnx')
		</comment>
		<comment id='17' author='JulienMaille' date='2020-11-16T17:51:30Z'>
		&lt;denchmark-link:https://github.com/JulienMaille&gt;@JulienMaille&lt;/denchmark-link&gt;
 Please use this script used for generation of .onnx test files: &lt;denchmark-link:https://github.com/opencv/opencv_extra/blob/4.5.0/testdata/dnn/onnx/generate_onnx_models.py&gt;https://github.com/opencv/opencv_extra/blob/4.5.0/testdata/dnn/onnx/generate_onnx_models.py&lt;/denchmark-link&gt;

		</comment>
		<comment id='18' author='JulienMaille' date='2020-11-16T18:53:27Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 it's weird the python file has missing includes and wrong indenting, is it in use?
Anyway, without change, the script will pass the final size to Upsample, and generate a model with inputs [X, roi, scales, sizes] so an incorrect model according to &lt;denchmark-link:https://github.com/l-bat&gt;@l-bat&lt;/denchmark-link&gt;

I would suggest to add a model passing scales to Upsample like this:
class DynamicResizeScale(nn.Module):
    def __init__(self):
        super(DynamicResizeScale, self).__init__()

    def forward(self, x, y):
        h = y.size(2)
        w = y.size(3)
        up = nn.Upsample(scale_factor=(0.5, 0.5), mode='bilinear')
        return up(x) + y

input_0 = Variable(torch.randn(1, 3, 8, 6))
input_1 = Variable(torch.randn(1, 3, 4, 3))
model = DynamicResizeScale()
save_data_and_model_multy_inputs("dynamic_resize_scale", model, input_0, input_1, version=11)
&lt;denchmark-link:https://user-images.githubusercontent.com/182520/99295127-4f1bab80-2845-11eb-8d9f-e30899749686.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='19' author='JulienMaille' date='2020-11-16T19:04:28Z'>
		
we are generating them for a different opset

It is possible to generate testdata for different opset versions (see version=).
Also it is possible to check &lt;denchmark-link:https://github.com/opencv/opencv/blob/4.5.0/modules/dnn/src/onnx/onnx_importer.cpp#L386&gt;ONNX version of the model&lt;/denchmark-link&gt;
 during loading process and adjust layers interpretation.
		</comment>
		<comment id='20' author='JulienMaille' date='2020-11-16T19:12:09Z'>
		With an up-to-date onnx package (1.8.0) highest opset is 12 and when exporting in 12 I still have 4 inputs with both scales and sizes
save_data_and_model_multy_inputs("dynamic_resize", model, input_0, input_1, version=12)
		</comment>
		<comment id='21' author='JulienMaille' date='2020-11-16T19:15:55Z'>
		In opset 11 resize has 3 or 4 parameters according to the manual:
X : T1

N-D tensor

roi : T2

1-D tensor given as [start1, ..., startN, end1, ..., endN], where N is the rank of X. The RoIs' coordinates are normalized in the coordinate system of the input image. It only takes effect when coordinate_transformation_mode is "tf_crop_and_resize"

scales : tensor(float)

The scale array along each dimension. It takes value greater than 0. If it's less than 1, it's sampling down, otherwise, it's upsampling. The number of elements of 'scales' should be the same as the rank of input 'X'. Only one of 'scales' and 'sizes' can be specified. If 'size' is needed, the user can use an empty string as the name of 'scales' in this operator's input list.

sizes (optional) : tensor(int64)

The size of the output tensor. The number of elements of 'sizes' should be the same as the rank of input 'X'. Only one of 'scales' and 'sizes' can be specified.

		</comment>
		<comment id='22' author='JulienMaille' date='2020-11-16T19:30:20Z'>
		Ok so I exported both models with different opset, this is what I got
&lt;denchmark-code&gt;when giving size &amp; opset  9 -&gt; Upsample [X, scales]
when giving size &amp; opset 10 -&gt; Resize   [X, scales]
when giving size &amp; opset 11 -&gt; Resize   [X, roi, scales, sizes]

when giving scales &amp; opset  9 -&gt; Upsample [X, scales]
when giving scales &amp; opset 10 -&gt; Resize   [X, scales]
when giving scales &amp; opset 11 -&gt; Resize   [X, roi, scales]
&lt;/denchmark-code&gt;

So I could change my PR to this:
            int opset = model_proto.has_ir_version() ? (int)model_proto.ir_version() : -1;
            Mat scales;
            switch (opset)
            {
                case 12:
                case 11: scales = getBlob(node_proto, 2); break;
                default: scales = getBlob(node_proto, 1); break;
            }
		</comment>
	</comments>
</bug>