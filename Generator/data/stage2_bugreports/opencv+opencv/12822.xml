<bug id='12822' author='nerdfever' open_date='2018-10-13T19:06:01Z' closed_time='2020-02-11T10:06:17Z'>
	<summary>Video capture resolution stuck in Windows MSMF backend</summary>
	<description>
Open CV 3.4.2
Windows 64 Bit
Python 3.6
See &lt;denchmark-link:http://answers.opencv.org/question/195388/video-capture-resolution-issue-on-windows/&gt;http://answers.opencv.org/question/195388/video-capture-resolution-issue-on-windows/&lt;/denchmark-link&gt;

The poster found the problem on a Logitech HD Webcam C615; I'm seeing the same thing on a Logitech QuickCam Pro 9000.
On Windows 10 x64 with the MSMF backend, if you change video resolution like so:
&lt;denchmark-code&gt;camera.set(cv2.CAP_PROP_FRAME_WIDTH, x)
camera.set(cv2.CAP_PROP_FRAME_HEIGHT, y)
&lt;/denchmark-code&gt;

The result is that you'll get a frame of size x,y pixels (if x,y is one of the resolutions supported by the webcam), but that image is in fact a 640x480 image rescaled to size x,y.
The poster at answers.opencv.org above claims that on the DirectShow backend it appears to work correctly (I've only tried the MSMF backend so far).
For example, below are 3 images captured identically at 640x480, 960x720, and 1600x1200 resolution with the MSMF backend from a Logitech QuickCam Pro 9000 (all those are reported by the camera as supported modes). It's pretty obvious they were all captured at the same resolution, then scaled.
&lt;denchmark-link:https://user-images.githubusercontent.com/9833299/46908971-00c6b080-cef9-11e8-887c-e0f7610e8684.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/9833299/46908973-04f2ce00-cef9-11e8-989a-e2bad3263952.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/9833299/46908980-18059e00-cef9-11e8-9c0e-b2ff118403dc.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='nerdfever' date='2018-10-21T20:06:34Z'>
		I confirm that switching to the DirectShow backend fixes this.
It's the MSMF backend that has this problem.
		</comment>
		<comment id='2' author='nerdfever' date='2019-05-31T09:18:53Z'>
		I am experiencing the same with OpenCV 3.4.3. The default cv::VideoCapture::open()  selects MSMF backend and is not able to change the resolution.
Explicitly requesting cv::CAP_DSHOW works
&lt;denchmark-code&gt;Video I/O:
  Video for Windows:           YES
  DC1394:                      NO
  FFMPEG:                      YES (prebuilt binaries)
    avcodec:                   YES (ver 57.107.100)
    avformat:                  YES (ver 57.83.100)
    avutil:                    YES (ver 55.78.100)
    swscale:                   YES (ver 4.8.100)
    avresample:                YES (ver 3.7.0)
  GStreamer:                   NO
  DirectShow:                  YES
  Media Foundation:            YES
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='nerdfever' date='2019-12-11T03:00:26Z'>
		I can confirm that this is still an issue using OpenCV 4.1.2 and that switching to the DirectShow back-end resolves the issue.
Also if you try using a non 4:3 aspect ratio width and height you will get black boarders.
		</comment>
		<comment id='4' author='nerdfever' date='2020-04-01T16:46:40Z'>
		This issue has not been resolved and it still exists with MSMF backend.
		</comment>
		<comment id='5' author='nerdfever' date='2020-04-02T07:49:14Z'>
		&lt;denchmark-link:https://github.com/dmardanbeigi&gt;@dmardanbeigi&lt;/denchmark-link&gt;
 , please provide more details: platform, OpenCV version, camera model, reproducer code.
Please note that the fix for this issue is available only on master and 3.4 branches and has not been released yet.
		</comment>
		<comment id='6' author='nerdfever' date='2020-04-08T16:34:00Z'>
		Isn't 3.4 branch already included in opencv-python 4.0?
It only works with DSHOW backend and not MSMF.
Python 3.7.4 (64 bit)
Windows 10
opencv-python==4.0.0.21
opencv-contrib-python==4.0.0.21
Camera: I tried on both a Quanta UVC camera and the webcam on my HP Spectre x360 (I don't know the details). The resolutions is supported by both cameras.
Here is the code I use:
import cv2
_capture = cv2.VideoCapture(0)# cv2.CAP_DSHOW)
print(_capture.getBackendName())
size=(1920, 1080)
print(_capture.set(cv2.CAP_PROP_FRAME_WIDTH, size[0]))
print(_capture.set(cv2.CAP_PROP_FRAME_HEIGHT, size[1]))
_ret, img = _capture.read()
_ret = True
cv2.namedWindow("img")
cv2.resizeWindow('img', size[0],size[1])
cv2.imshow("img", img)
while _ret:
    _ret, img = _capture.read()
    key_code = cv2.waitKey(1)
    if (key_code == 27) or (key_code == ord('q')):
        break
    cv2.imshow("calibration", img)
		</comment>
		<comment id='7' author='nerdfever' date='2020-04-08T16:42:29Z'>
		
Isn't 3.4 branch already included in opencv-python 4.0?

Not exactly.
See release dates instead: &lt;denchmark-link:https://github.com/opencv/opencv/releases&gt;https://github.com/opencv/opencv/releases&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Order of changing capturing parameters should be:

width
height
fps
[optional] native backend modes / formats.

You have missed fps.
For MSMF mode responds for H/W acceleration.
		</comment>
		<comment id='8' author='nerdfever' date='2020-04-08T16:45:15Z'>
		 is an old version, latest version in pip is &lt;denchmark-link:https://pypi.org/project/opencv-python/&gt;4.2.0.34&lt;/denchmark-link&gt;
 The fix for this issue have not been included there yet. You should either build OpenCV for python by yourself (tag 4.3.0) either wait until new version will be available on pip.
		</comment>
		<comment id='9' author='nerdfever' date='2020-04-08T16:54:42Z'>
		Thanks!
		</comment>
	</comments>
</bug>