<bug id='8149' author='schwittmann' open_date='2017-02-08T12:43:43Z' closed_time='2017-07-03T16:09:01Z'>
	<summary>Race condition in Canny(), opencv 3</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.1.0-7
Operating System / Platform =&gt; 4.9.2-1-MANJARO x86-64
Compiler =&gt; 6.3.1 20170109 (GCC)
No OpenCl, Tegra or IPP

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

We wanted our opencv based source code to be compatible with both opencv 2.4 and 3.x. However, our program yielded unexpected results with 3.x. After some rigorous debugging we discovered the bug in Canny(). While the documentation states that the output matrix &lt;denchmark-link:http://docs.opencv.org/3.0-beta/doc/tutorials/imgproc/imgtrans/canny_detector/canny_detector.html&gt;"can be the same as the input"&lt;/denchmark-link&gt;
 this causes the problem. If we use a dedicated output matrix the results are as expected.
We assume that parallelization optimizations in 3.x causes this problem. Multiple threads operate read and write on the same matrix causing race conditions.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;```.cpp
Canny( detected_edges, detected_edges, lowThreshold, lowThreshold*ratio, kernel_size );
```
&lt;/denchmark-code&gt;

On a machine with multiple cpu cores
&lt;denchmark-h:h5&gt;Workaround&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;```.cpp
Canny( detected_edges, tmp, lowThreshold, lowThreshold*ratio, kernel_size );
```
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='schwittmann' date='2017-02-08T18:42:36Z'>
		Can you localize the problem a bit more. What exactly happens when src and dst are the same? What happens if you set the number of threads to 1.
At first view there is no read in src and write in dst at the same time. All intermediate image buffers are allocated without affecting them.
		</comment>
		<comment id='2' author='schwittmann' date='2017-02-09T10:59:18Z'>
		Thank you for your fast response. I was able to reproduce the bug on a second machine (compiled current master branch, Xubuntu 16.04, &lt;denchmark-link:https://github.com/opencv/opencv/files/763370/buildinfo.txt&gt;buildinfo.txt&lt;/denchmark-link&gt;
).
SetNumThreads(1) and SetUseOptimized(false) didn't have an impact, the bug persists. So contrary to our initial assumption threading doesn't seems to be the problem here. However, we found another clue. Canny(tmp,tmp..) yields the following valgrind output:
&lt;denchmark-code&gt;==14327== Conditional jump or move depends on uninitialised value(s)
==14327==    at 0x51DA0F3: cv::SymmColumnSmallFilter&lt;cv::Cast&lt;int, short&gt;, cv::SymmColumnSmallVec_32s16s&gt;::operator()(unsigned char const**, unsigned char*, int, int, int) (in /usr/local/lib/libopencv_imgproc.so.3.2.0)
==14327==    by 0x51CC714: cv::FilterEngine::proceed(unsigned char const*, int, int, unsigned char*, int) (in /usr/local/lib/libopencv_imgproc.so.3.2.0)
==14327==    by 0x51CA33C: cv::FilterEngine::apply(cv::Mat const&amp;, cv::Mat&amp;, cv::Size_&lt;int&gt; const&amp;, cv::Point_&lt;int&gt; const&amp;) (in /usr/local/lib/libopencv_imgproc.so.3.2.0)
==14327==    by 0x51CD7D1: OcvSepFilter::apply(unsigned char*, unsigned long, unsigned char*, unsigned long, int, int, int, int, int, int) (in /usr/local/lib/libopencv_imgproc.so.3.2.0)
==14327==    by 0x51EC436: cv::sepFilter2D(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int, cv::_InputArray const&amp;, cv::_InputArray const&amp;, cv::Point_&lt;int&gt;, double, int) (in /usr/local/lib/libopencv_imgproc.so.3.2.0)
==14327==    by 0x531D1E5: cv::Sobel(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int, int, int, int, double, double, int) (in /usr/local/lib/libopencv_imgproc.so.3.2.0)
==14327==    by 0x5277BEA: cv::parallelCanny::operator()(cv::Range const&amp;) const (in /usr/local/lib/libopencv_imgproc.so.3.2.0)
==14327==    by 0x57D3637: cv::parallel_for_(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) (in /usr/local/lib/libopencv_core.so.3.2.0)
==14327==    by 0x5272BAC: cv::Canny(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, double, double, int, bool) (in /usr/local/lib/libopencv_imgproc.so.3.2.0)
==14327==    by 0x4055CD: RectDetect::filterImage(cv::Mat&amp;, cv::Mat&amp;) (rectdetect.cpp:16)
==14327==    by 0x404200: prepareImage(CutFile&amp;, cv::Mat&amp;) (main.cpp:27)
==14327==    by 0x402D8D: main (main.cpp:146)
==14327==  Uninitialised value was created by a heap allocation
==14327==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==14327==    by 0x56F8921: cv::fastMalloc(unsigned long) (in /usr/local/lib/libopencv_core.so.3.2.0)
==14327==    by 0x5796A13: cv::Mat::create(int, int const*, int) (in /usr/local/lib/libopencv_core.so.3.2.0)
==14327==    by 0x526F578: cv::Mat::create(int, int, int) (in /usr/local/lib/libopencv_imgproc.so.3.2.0)
==14327==    by 0x57BB7AB: cv::_OutputArray::create(cv::Size_&lt;int&gt;, int, int, bool, int) const (in /usr/local/lib/libopencv_core.so.3.2.0)
==14327==    by 0x527263A: cv::Canny(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, double, double, int, bool) (in /usr/local/lib/libopencv_imgproc.so.3.2.0)
==14327==    by 0x4055CD: RectDetect::filterImage(cv::Mat&amp;, cv::Mat&amp;) (rectdetect.cpp:16)
==14327==    by 0x404200: prepareImage(CutFile&amp;, cv::Mat&amp;) (main.cpp:27)
==14327==    by 0x402D8D: main (main.cpp:146)
==14327== 
==14327== 
==14327== More than 10000000 total errors detected.  I'm not reporting any more.
==14327== Final error counts will be inaccurate.  Go fix your program!
==14327== Rerun with --error-limit=no to disable this cutoff.  Note
==14327== that errors may occur in your program without prior warning from
==14327== Valgrind, because errors are no longer being displayed.
&lt;/denchmark-code&gt;

This does not occur on Canny(tmp, tmp2..). Might still be a false positive, though.
		</comment>
		<comment id='3' author='schwittmann' date='2017-02-09T17:11:47Z'>
		I think I could localize the problem. This will only occur if a multichannel image is the input. In this case the output will be created as 1 channel Mat before the source image is processed and the input image is then interpreted as 1 channel image (&lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/imgproc/src/canny.cpp#L846&gt;here&lt;/denchmark-link&gt;
). The fix should be very easy I think. Just putting the create function somewhere between line 932 and 950.
But can you give some more information if you use a multichannel image and if it occurs when you use a 1 channel image.
		</comment>
		<comment id='4' author='schwittmann' date='2017-02-09T17:38:44Z'>
		The input image is indeed a multichannel one (channels = 3). Loading it with CV_LOAD_IMAGE_GRAYSCALE "fixes" the problem. However, moving the create call &lt;denchmark-link:https://github.com/opencv/opencv/files/764483/patch0001.txt&gt;patch0001.txt&lt;/denchmark-link&gt;
 doesn't get rid of the problem or the valgrind warnings, unfortunately.
		</comment>
	</comments>
</bug>