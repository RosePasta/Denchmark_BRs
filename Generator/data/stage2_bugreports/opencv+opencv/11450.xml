<bug id='11450' author='tjom' open_date='2018-05-03T13:49:04Z' closed_time='2018-05-11T11:48:13Z'>
	<summary>setAlgorithmType in KNearest unsets all parameters</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.2 / 3.4
Operating System / Platform =&gt; Ubuntu 16.04 64 Bit
Compiler =&gt; gcc 5.4.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

It took me some time to figure out why my trained kNN classifier seemed to forget all parameters I set until I saw that setAlgorithmType calls initImpl which instantiates the corresponding implementation with default parameters. In my opinion this should not be hidden in a setter function, so this should either happen on create() (which requires refactoring of the whole Algorithm interface) or simply when train() is called.
In any case this behaviour should be explicitly specified in the documantation!
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Ptr&lt;KNearest&gt; knn = KNearest::create();
knn-&gt;setDefaultK(3);
knn-&gt;setIsClassifier(false);
knn-&gt;setAlgorithmType(KNearest::Types::BRUTE_FORCE)

std::cout &lt;&lt; knn-&gt;getDefaultK() &lt;&lt; std::endl; // will print 10 -- should print 3
std::cout &lt;&lt; knn-&gt;getIsClassifier() &lt;&lt; std::endl; // will print 1 -- should print 0

// train knn with some data ...
	</description>
	<comments>
		<comment id='1' author='tjom' date='2018-05-11T10:18:22Z'>
		it's not possible to change the algorithmtype on an already trained classifier here, because that involves creating a new impl object (which is initially un-trained. and we can't keep the old train data, because this differs between brute-force and kdtree impls)
but we can at least make sure it does not forget the state variables, and that the order of the set() calls does not matter.
		</comment>
	</comments>
</bug>