<bug id='6131' author='AndreiVF' open_date='2016-02-17T12:15:34Z' closed_time='2016-07-12T10:49:26Z'>
	<summary>Memory leak detected in the OpenCV unit test Flann_LshTable.badarg</summary>
	<description>
In the unit test Flann_LshTable.badarg the index memory of the lsh Index instance gets lost due to a thrown C++ exception in the Index class constructor.
STEPS TO REPRODUCE:
Git:
&lt;denchmark-code&gt;branch: master
commit: 6f51dd12589343e567ffd615a9bad3900ed4228b

&lt;/denchmark-code&gt;

Machine:
&lt;denchmark-code&gt;$ uname -a
Linux andrei 3.16.0-60-generic #80~14.04.1-Ubuntu SMP Wed Jan 20 13:37:48 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
$ g++ --version
g++ (Ubuntu 4.8.5-2ubuntu1~14.04.1) 4.8.5
$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.3 LTS
Release:        14.04
Codename:       trusty
&lt;/denchmark-code&gt;

Build and run the OpenCV test:
&lt;denchmark-code&gt;$ cmake ../opencv -DCMAKE_BUILD_TYPE=Debug -DENABLE_SSE=OFF -DENABLE_SSE2=OFF -DENABLE_SSE3=OFF -DENABLE_SSSE3=OFF -DWITH_OPENCL=OFF
$ make -j8
$ ./bin/opencv_test_flann --gtest_output=xml:opencv_test_flann.xml
CTEST_FULL_OUTPUT
OpenCV version: 3.1.0-dev
OpenCV VCS version: 6f51dd1-dirty
Build type: debug
Parallel framework: pthreads
CPU features: 
OpenCL is disabled
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from Flann_LshTable
[ RUN      ] Flann_LshTable.badarg
[       OK ] Flann_LshTable.badarg (5 ms)
[----------] 1 test from Flann_LshTable (5 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (5 ms total)
[  PASSED  ] 1 test.
&lt;/denchmark-code&gt;

OBSERVED BEHAVIOR:
The test is happy. However, during the construction of the  instance in  an exception throw is provoked to test bad argument passing. In particular, at  throws an exception. Unfortunately, the  destructor is consequently not invoked then and the allocated index is leaked. If this exception is used in a "happy flow" of the program, it may lead to a bigger loss of memory. Below is a detailed report from the dynamic analysis tool Pareon Verify (&lt;denchmark-link:http://pareonverify.com/&gt;http://pareonverify.com/&lt;/denchmark-link&gt;
), including source locations for the allocation, last access and last reference, as well as call stacks for each of them.
EXPECTED BEHAVIOR:
When throwing the Error::StsBadArg exception, the allocated index is deleted, for example, using Index::release().
PAREON VERIFY REPORT:
&lt;denchmark-code&gt;[M0181] Memory leak detected:
  the heap object of size 72 allocated through a call to `operator new(unsigned long)' in
    function void cv::flann::buildIndex_&lt;cvflann::HammingLUT, cvflann::Index&lt;cvflann::HammingLUT&gt; &gt;(void*&amp;, cv::Mat const&amp;, cv::flann::IndexParams const&amp;, cvflann::HammingLUT const&amp;) at /opencv/modules/flann/src/miniflann.cpp:320
    called from function void cv::flann::buildIndex&lt;cvflann::HammingLUT&gt;(void*&amp;, cv::Mat const&amp;, cv::flann::IndexParams const&amp;, cvflann::HammingLUT const&amp;) at /opencv/modules/flann/src/miniflann.cpp:328
    called from function cv::flann::Index::build(cv::_InputArray const&amp;, cv::flann::IndexParams const&amp;, cvflann::flann_distance_t) at /opencv/modules/flann/src/miniflann.cpp:377
    called from function cv::flann::Index::Index(cv::_InputArray const&amp;, cv::flann::IndexParams const&amp;, cvflann::flann_distance_t) at /opencv/modules/flann/src/miniflann.cpp:351
    called from function CV_LshTableBadArgTest::Caller::operator()() const at /opencv/modules/flann/test/test_lshtable_badarg.cpp:60
    called from function int cvtest::BadArgTest::run_test_case&lt;CV_LshTableBadArgTest::Caller&gt;(int, std::string const&amp;, CV_LshTableBadArgTest::Caller) at /opencv/modules/ts/include/opencv2/ts.hpp:501
    called from function CV_LshTableBadArgTest::run(int) at /opencv/modules/flann/test/test_lshtable_badarg.cpp:77
    called from function cvtest::BaseTest::safe_run(int) at /opencv/modules/ts/src/ts.cpp:216
    called from function Flann_LshTable_badarg_Test::Body() at /opencv/modules/flann/test/test_lshtable_badarg.cpp:91
    called from function Flann_LshTable_badarg_Test::TestBody() at /opencv/modules/flann/test/test_lshtable_badarg.cpp:91
    called from function void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*) at /opencv/modules/ts/src/ts_gtest.cpp:3578
    called from function void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*) at /opencv/modules/ts/src/ts_gtest.cpp:3614
    called from function testing::Test::Run() at /opencv/modules/ts/src/ts_gtest.cpp:3650
    called from function testing::TestInfo::Run() at /opencv/modules/ts/src/ts_gtest.cpp:3826
    called from function testing::TestCase::Run() at /opencv/modules/ts/src/ts_gtest.cpp:3944
    called from function testing::internal::UnitTestImpl::RunAllTests() at /opencv/modules/ts/src/ts_gtest.cpp:5823
    called from function bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) at /opencv/modules/ts/src/ts_gtest.cpp:3578
    called from function bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) at /opencv/modules/ts/src/ts_gtest.cpp:3614
    called from function testing::UnitTest::Run() at /opencv/modules/ts/src/ts_gtest.cpp:5434
    called from function RUN_ALL_TESTS() at /opencv/modules/ts/include/opencv2/ts/ts_gtest.h:20122
    called from function main at /opencv/modules/flann/test/test_main.cpp:3
    ^^^ application start ^^^
  together with a cyclic connected group of objects (17 objects, 2592 bytes)
  have become unreachable.
  This object was last accessible as the result of the call to function `operator new(unsigned long)' in
    function void cv::flann::buildIndex_&lt;cvflann::HammingLUT, cvflann::Index&lt;cvflann::HammingLUT&gt; &gt;(void*&amp;, cv::Mat const&amp;, cv::flann::IndexParams const&amp;, cvflann::HammingLUT const&amp;) at /opencv/modules/flann/src/miniflann.cpp:320
    called from function void cv::flann::buildIndex&lt;cvflann::HammingLUT&gt;(void*&amp;, cv::Mat const&amp;, cv::flann::IndexParams const&amp;, cvflann::HammingLUT const&amp;) at /opencv/modules/flann/src/miniflann.cpp:328
    called from function cv::flann::Index::build(cv::_InputArray const&amp;, cv::flann::IndexParams const&amp;, cvflann::flann_distance_t) at /opencv/modules/flann/src/miniflann.cpp:377
    called from function cv::flann::Index::Index(cv::_InputArray const&amp;, cv::flann::IndexParams const&amp;, cvflann::flann_distance_t) at /opencv/modules/flann/src/miniflann.cpp:351
    called from function CV_LshTableBadArgTest::Caller::operator()() const at /opencv/modules/flann/test/test_lshtable_badarg.cpp:60
    called from function int cvtest::BadArgTest::run_test_case&lt;CV_LshTableBadArgTest::Caller&gt;(int, std::string const&amp;, CV_LshTableBadArgTest::Caller) at /opencv/modules/ts/include/opencv2/ts.hpp:501
    called from function CV_LshTableBadArgTest::run(int) at /opencv/modules/flann/test/test_lshtable_badarg.cpp:77
    called from function cvtest::BaseTest::safe_run(int) at /opencv/modules/ts/src/ts.cpp:216
    called from function Flann_LshTable_badarg_Test::Body() at /opencv/modules/flann/test/test_lshtable_badarg.cpp:91
    called from function Flann_LshTable_badarg_Test::TestBody() at /opencv/modules/flann/test/test_lshtable_badarg.cpp:91
    called from function void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*) at /opencv/modules/ts/src/ts_gtest.cpp:3578
    called from function void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*) at /opencv/modules/ts/src/ts_gtest.cpp:3614
    called from function testing::Test::Run() at /opencv/modules/ts/src/ts_gtest.cpp:3650
    called from function testing::TestInfo::Run() at /opencv/modules/ts/src/ts_gtest.cpp:3826
    called from function testing::TestCase::Run() at /opencv/modules/ts/src/ts_gtest.cpp:3944
    called from function testing::internal::UnitTestImpl::RunAllTests() at /opencv/modules/ts/src/ts_gtest.cpp:5823
    called from function bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) at /opencv/modules/ts/src/ts_gtest.cpp:3578
    called from function bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) at /opencv/modules/ts/src/ts_gtest.cpp:3614
    called from function testing::UnitTest::Run() at /opencv/modules/ts/src/ts_gtest.cpp:5434
    called from function RUN_ALL_TESTS() at /opencv/modules/ts/include/opencv2/ts/ts_gtest.h:20122
    called from function main at /opencv/modules/flann/test/test_main.cpp:3
    ^^^ application start ^^^
  This object was last accessed by:
  the read in
    function cvflann::Index&lt;cvflann::HammingLUT&gt;::buildIndex() at /opencv/modules/flann/include/opencv2/flann/flann_base.hpp:132
    called from function void cv::flann::buildIndex_&lt;cvflann::HammingLUT, cvflann::Index&lt;cvflann::HammingLUT&gt; &gt;(void*&amp;, cv::Mat const&amp;, cv::flann::IndexParams const&amp;, cvflann::HammingLUT const&amp;) at /opencv/modules/flann/src/miniflann.cpp:321
    called from function void cv::flann::buildIndex&lt;cvflann::HammingLUT&gt;(void*&amp;, cv::Mat const&amp;, cv::flann::IndexParams const&amp;, cvflann::HammingLUT const&amp;) at /opencv/modules/flann/src/miniflann.cpp:328
    called from function cv::flann::Index::build(cv::_InputArray const&amp;, cv::flann::IndexParams const&amp;, cvflann::flann_distance_t) at /opencv/modules/flann/src/miniflann.cpp:377
    called from function cv::flann::Index::Index(cv::_InputArray const&amp;, cv::flann::IndexParams const&amp;, cvflann::flann_distance_t) at /opencv/modules/flann/src/miniflann.cpp:351
    called from function CV_LshTableBadArgTest::Caller::operator()() const at /opencv/modules/flann/test/test_lshtable_badarg.cpp:60
    called from function int cvtest::BadArgTest::run_test_case&lt;CV_LshTableBadArgTest::Caller&gt;(int, std::string const&amp;, CV_LshTableBadArgTest::Caller) at /opencv/modules/ts/include/opencv2/ts.hpp:501
    called from function CV_LshTableBadArgTest::run(int) at /opencv/modules/flann/test/test_lshtable_badarg.cpp:77
    called from function cvtest::BaseTest::safe_run(int) at /opencv/modules/ts/src/ts.cpp:216
    called from function Flann_LshTable_badarg_Test::Body() at /opencv/modules/flann/test/test_lshtable_badarg.cpp:91
    called from function Flann_LshTable_badarg_Test::TestBody() at /opencv/modules/flann/test/test_lshtable_badarg.cpp:91
    called from function void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*) at /opencv/modules/ts/src/ts_gtest.cpp:3578
    called from function void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*) at /opencv/modules/ts/src/ts_gtest.cpp:3614
    called from function testing::Test::Run() at /opencv/modules/ts/src/ts_gtest.cpp:3650
    called from function testing::TestInfo::Run() at /opencv/modules/ts/src/ts_gtest.cpp:3826
    called from function testing::TestCase::Run() at /opencv/modules/ts/src/ts_gtest.cpp:3944
    called from function testing::internal::UnitTestImpl::RunAllTests() at /opencv/modules/ts/src/ts_gtest.cpp:5823
    called from function bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) at /opencv/modules/ts/src/ts_gtest.cpp:3578
    called from function bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) at /opencv/modules/ts/src/ts_gtest.cpp:3614
    called from function testing::UnitTest::Run() at /opencv/modules/ts/src/ts_gtest.cpp:5434
    called from function RUN_ALL_TESTS() at /opencv/modules/ts/include/opencv2/ts/ts_gtest.h:20122
    called from function main at /opencv/modules/flann/test/test_main.cpp:3
    ^^^ application start ^^^
This message was produced for run 1.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='AndreiVF' date='2016-02-23T16:13:09Z'>
		I took a look at this bug hoping it would be easy to fix as I am new to the project. The problem is that the exception prevents a destructor containing delete from executing. I doubt there is a simple way to fix this without refactoring or using smart pointers.
		</comment>
		<comment id='2' author='AndreiVF' date='2016-02-24T11:02:56Z'>
		Thanks for looking into this bug report, &lt;denchmark-link:https://github.com/bryanjp3&gt;@bryanjp3&lt;/denchmark-link&gt;
 !
Since the destructor is not invoked, perhaps, a fix should catch the exception, delete the index to avoid the memory leak and re-throw the exception in the constructor itself:
&lt;denchmark-code&gt;diff --git a/modules/flann/src/miniflann.cpp b/modules/flann/src/miniflann.cpp
index 7d81438..790a8db 100644
--- a/modules/flann/src/miniflann.cpp
+++ b/modules/flann/src/miniflann.cpp
@@ -318,7 +318,16 @@ buildIndex_(void*&amp; index, const Mat&amp; data, const IndexParams&amp; params, const Dist

     ::cvflann::Matrix&lt;ElementType&gt; dataset((ElementType*)data.data, data.rows, data.cols);
     IndexType* _index = new IndexType(dataset, get_params(params), dist);
-    _index-&gt;buildIndex();
+    try
+    {
+      _index-&gt;buildIndex();
+    }
+    catch (const cv::Exception &amp;e)
+      {
+        // Building _index failed, deallocate the _index memory, because no destructor will be called
+        delete _index;
+        throw;
+      }
     index = _index;
 }

&lt;/denchmark-code&gt;

As a side remark, I believe that the exception cv::Exception is thrown in modules/flann/include/opencv2/flann/lsh_table.h:271 in LshTable::initialize().
With this patch applied I do not get this memory leak error message from Pareon Verify.
		</comment>
		<comment id='3' author='AndreiVF' date='2016-02-25T20:32:54Z'>
		HI &lt;denchmark-link:https://github.com/AndreiVF&gt;@AndreiVF&lt;/denchmark-link&gt;
 I verified that your patch works with Visual Leak Detector. I can post the outputs if desired but it's a mess. I was thinking about replacing the dynamically allocated pointers with  but the nested try and catch block is a valid solution and might be worth a pull request.
Just a note my compiler gives me a warning about e in the catch block being an unreferenced local variable. This can be easily fixed by changing throw; to throw e; which do the same thing.
		</comment>
		<comment id='4' author='AndreiVF' date='2016-02-25T21:03:43Z'>
		Sounds good, &lt;denchmark-link:https://github.com/bryanjp3&gt;@bryanjp3&lt;/denchmark-link&gt;
!  is indeed a better choice.
		</comment>
		<comment id='5' author='AndreiVF' date='2016-03-02T14:35:01Z'>
		&lt;denchmark-link:https://github.com/bryanjp3&gt;@bryanjp3&lt;/denchmark-link&gt;
 , do you plan to make a pull request? I myself cannot do it because I'm not familiar with the OpenCV development flow. Thanks in advance!
		</comment>
		<comment id='6' author='AndreiVF' date='2016-07-12T08:55:58Z'>
		&lt;denchmark-link:https://github.com/AndreiVF&gt;@AndreiVF&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/bryanjp3&gt;@bryanjp3&lt;/denchmark-link&gt;
, thanks for your help in finding this bug. I've incorporated your suggestions in MR &lt;denchmark-link:https://github.com/opencv/opencv/pull/6882&gt;#6882&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>