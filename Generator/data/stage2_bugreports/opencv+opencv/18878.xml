<bug id='18878' author='deanranderson' open_date='2020-11-20T15:51:01Z' closed_time='2020-12-18T22:30:53Z'>
	<summary>cv::COLOR_YUV2BGR and cv::COLOR_YUV2RGB are not handled in color.hpp dstChannels</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.5
Operating System / Platform =&gt; Ubuntu 18.04
Compiler =&gt; gcc 7.5

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

While doing some performance comparisons between cv::Mat and cv::UMat (OpenCL), I noticed that OpenCL was taking a lot longer (8x) when performing color conversions from YUV to BGR or RGB.
I compared my benchmarking code to the perf tests, and I was not populating the optional dstCn parameter in my calls to cv::cvtColor().  When I did pass that parameter, my performance greatly improved!
I think I tracked it down to the function dstChannels() in color.hpp 


opencv/modules/imgproc/src/color.hpp


         Line 109
      in
      049b50d






 case COLOR_YUV2BGR_NV21: case COLOR_YUV2RGB_NV21: case COLOR_YUV2BGR_NV12: case COLOR_YUV2RGB_NV12: 




 .  The cv::COLOR_YUV2RGB and cv::COLOR_YUV2BGR codes are not in the switch-case list, so the default value of 0 is returned.  This then gets passed to oclCvtColorYUV2BGR();
I don't fully understand why passing 0 as the value for dcn to the OpenCL kernel results in such poor performance, but seems like a simple fix.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;```.cpp
cv::UMat yuv = cv::UMat::zeros(1920, 1080, CV_8UC3);
cv::UMat rgb;
cv::cvtColor(yuv, rgb, cv::COLOR_YUV2RGB); /// This is slow :-(
cv::cvtColor(yuv, rgb, cv::COLOR_YUV2RGB, 3); /// This is fast!
```
&lt;/denchmark-code&gt;

I can whip up a complete test case/perf test if that's helpful.
&lt;denchmark-h:h5&gt;Issue submission checklist&lt;/denchmark-h&gt;


 I report the issue, it's not a question
 I checked the problem with documentation, FAQ, open issues,
answers.opencv.org, Stack Overflow, etc and have not found solution
 I updated to latest OpenCV version and the issue is still there
 There is reproducer code and related data files: videos, images, onnx, etc

	</description>
	<comments>
		<comment id='1' author='deanranderson' date='2020-12-17T18:50:12Z'>
		&lt;denchmark-link:https://github.com/deanranderson&gt;@deanranderson&lt;/denchmark-link&gt;
, thank you! I've reproduced the issue and correction of switch works fine. For example, reading the input 4664x5830 image into  and its conversion with    gives the following results:
no fix:
&lt;denchmark-code&gt;YUV2RGB
0.19270s | 0.17835s | 0.20722s | 0.19647s

YUV2BGR
0.19586s | 0.19144s | 0.20094s | 0.19670s
&lt;/denchmark-code&gt;

fix applied:
&lt;denchmark-code&gt;YUV2RGB
0.00818s | 0.00822s | 0.00815s | 0.00826s

YUV2BGR
0.00816s | 0.00815s | 0.00818s | 0.00814s
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='deanranderson' date='2020-12-17T19:36:47Z'>
		OpenCV performance tests doesn't show improvements (i5-6600, iGPU):
&lt;denchmark-code&gt;./bin/opencv_perf_imgproc --gtest_filter=OCL*CvtColor* --gtest_param_filter=*COLOR_YUV2RGB,* --perf_threads=1
&lt;/denchmark-code&gt;




Name of Test
base
fix
x-factor




CvtColor::OCL_CvtColorFixture::(640x480, (COLOR_YUV2RGB, 3, 3))
0.172
0.169
1.02


CvtColor::OCL_CvtColorFixture::(1280x720, (COLOR_YUV2RGB, 3, 3))
0.542
0.526
1.03


CvtColor::OCL_CvtColorFixture::(1920x1080, (COLOR_YUV2RGB, 3, 3))
1.360
1.359
1.00


CvtColor::OCL_CvtColorFixture::(3840x2160, (COLOR_YUV2RGB, 3, 3))
5.184
5.190
1.00



		</comment>
		<comment id='3' author='deanranderson' date='2020-12-18T09:25:56Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
, in &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/imgproc/perf/opencl/perf_color.cpp#L72&gt;perf_color.cpp&lt;/denchmark-link&gt;
  param is set into the correct value explicitly. Here the performance problem occurs when the  parameter is empty - then it by default is set into 0. Thus, changing the original line in perf test in the following way:

gives us the below results:

fix applied:

&lt;denchmark-code&gt;[ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/3, where GetParam() = (640x480, (COLOR_YUV2RGB, 3, 0))
[       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/3 (7 ms)

[ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/29, where GetParam() = (1280x720, (COLOR_YUV2RGB, 3, 0))
[       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/29 (9 ms)

[ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/55, where GetParam() = (1920x1080, (COLOR_YUV2RGB, 3, 0))
[       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/55 (14 ms)

[ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/81, where GetParam() = (3840x2160, (COLOR_YUV2RGB, 3, 0))
[       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/81 (54 ms)
&lt;/denchmark-code&gt;


no fix applied:

&lt;denchmark-code&gt;[ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/3, where GetParam() = (640x480, (COLOR_YUV2RGB, 3, 0))
[       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/3 (14 ms)


[ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/29, where GetParam() = (1280x720, (COLOR_YUV2RGB, 3, 0))
[       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/29 (28 ms)


[ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/55, where GetParam() = (1920x1080, (COLOR_YUV2RGB, 3, 0))
[       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/55 (64 ms)


[ RUN      ] OCL_CvtColorFixture_CvtColor.CvtColor/81, where GetParam() = (3840x2160, (COLOR_YUV2RGB, 3, 0))
[       OK ] OCL_CvtColorFixture_CvtColor.CvtColor/81 (255 ms)
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>