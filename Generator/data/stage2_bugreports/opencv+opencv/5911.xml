<bug id='5911' author='amroamroamro' open_date='2016-01-02T09:00:56Z' closed_time='2016-01-06T16:28:41Z'>
	<summary>[ML] NormalBayesClassifier::predictProb with nsamples&amp;gt;1</summary>
	<description>
Using &lt;denchmark-link:http://docs.opencv.org/3.1.0/d4/d8e/classcv_1_1ml_1_1NormalBayesClassifier.html&gt;cv::NormalBayesClassifier&lt;/denchmark-link&gt;
, if  is called with more than one sample, the output probabilities matrix is not filled correctly.
On the other hand, calling predictProb in a loop with one sample at a time returns the correct probabilities.
Here is an example to illustrate the problem, tested using the OpenCV 3.1.0 Python bindings:
import numpy as np
import cv2

def check_prob(prob, Yhat):
    # the max-probability class should match the predicted class
    idx = np.argmax(prob, axis=1)
    labels = np.array([-1,1], dtype=np.int32)
    YY = labels[idx].reshape(len(idx),1)
    assert(np.all(YY == Yhat))

#2-class data: 10x3 samples and corresponding 10x1 labels
X = np.r_[np.random.randn(5,3)+1, np.random.randn(5,3)-1]
Y = np.r_[np.ones((5,1))*1, np.ones((5,1))*-1]
X = np.array(X, dtype=np.float32)
Y = np.array(Y, dtype=np.int32)
nsamples, nvars = X.shape
nclasses = 2

# train naive bayes
nb = cv2.ml.NormalBayesClassifier_create()
nb.train(X, cv2.ml.ROW_SAMPLE, Y)

# option 1: all samples at once
_, Yhat1, prob1 = nb.predictProb(X)
print "prob1:\n", prob1
#check_prob(prob1, Yhat1)  # assertion fails!

# option 2: one sample at a time
Yhat2 = np.zeros((nsamples,1), dtype=np.int32)
prob2 = np.zeros((nsamples,nclasses), dtype=np.float32)
for i in range(nsamples):
    _, Yhat2[i], prob2[i,:] = nb.predictProb(X[[i],:])
print "prob2:\n", prob2
check_prob(prob2, Yhat2)
which returns something like:
&lt;denchmark-code&gt;# wrong
prob1:
[[ 0.          0.        ]
 [ 0.          0.        ]
 [ 9.97242737  1.19055212]
 [ 1.16158712  1.8470248 ]
 [ 0.          0.        ]
 [ 0.         -1.875     ]
 [ 0.         -1.875     ]
 [ 0.         -1.875     ]
 [ 0.         -1.875     ]
 [ 0.         -1.875     ]]

# correct
prob2:
[[  0.00000000e+00   9.55418301e+00]
 [  0.00000000e+00   2.40665112e+01]
 [  0.00000000e+00   2.40688496e+01]
 [  0.00000000e+00   9.97242737e+00]
 [  0.00000000e+00   9.42004585e+00]
 [  1.19055212e+00   0.00000000e+00]
 [  1.16158712e+00   2.21222991e-26]
 [  1.84702480e+00   0.00000000e+00]
 [  9.19010341e-01   0.00000000e+00]
 [  1.06254220e+00   0.00000000e+00]]
&lt;/denchmark-code&gt;

Note that the assert in the first case fails, i.e predicting the class with the max probability for each row of prob1 does not match the prediction returned in Yhat1...
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Looking at the &lt;denchmark-link:https://github.com/Itseez/opencv/blob/3.1.0/modules/ml/src/nbayes.cpp#L279&gt;source code&lt;/denchmark-link&gt;
, I believe it is accessing the matrix  incorrectly; Assuming continuous storage, I think the indexing should be  right? ( being the row sample index, and  being the column class index)
if( results_prob )
{
    if ( rptype == CV_32FC1 )
        results_prob-&gt;ptr&lt;float&gt;()[k*rpstep + i] = (float)probability;
    else
        results_prob-&gt;ptr&lt;double&gt;()[k*rpstep + i] = probability;
}
when called with one sample, k=0 which is why the bug doesn't show up..
	</description>
	<comments>
		<comment id='1' author='amroamroamro' date='2016-01-06T16:28:41Z'>
		closing as fixed, thanks to berak.
		</comment>
	</comments>
</bug>