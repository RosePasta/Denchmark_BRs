<bug id='17453' author='D-Alex' open_date='2020-06-02T14:31:34Z' closed_time='2020-06-04T20:50:12Z'>
	<summary>countNonZero returns wrong counts for unit8_t arrays with large dimensions (IPP)</summary>
	<description>

OpenCV =&gt; 4.3
Operating System / Platform =&gt;Mac OS Catalina + OpenCL + IPP
Compiler =&gt; clang

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

countNonZero is returning wrong counts for large unit8_t arrays.
The issue seems to be related to ippiCountInRange_8u_C1R which is called behind the scene returning a wrong inverse count.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

std::cout &lt;&lt; cv::countNonZero(cv::Mat::zeros(1,524190-1,CV_8UC1));     // returns 0
std::cout &lt;&lt; cv::countNonZero(cv::Mat::zeros(1,524190,CV_8UC1));        // returns 65536
std::cout &lt;&lt; cv::countNonZero(cv::Mat::zeros(1,524190+1,CV_8UC1));    // returns 65536
	</description>
	<comments>
		<comment id='1' author='D-Alex' date='2020-06-02T19:51:03Z'>
		Looks like this problem can be reproduced only on OSX and Win32. Perhaps we can disable IPP path for these platforms temporarily.
		</comment>
		<comment id='2' author='D-Alex' date='2020-12-01T10:34:05Z'>
		Hi all. I can reproduce this exact fail using the current 4.5.x master branch &lt;denchmark-link:https://github.com/opencv/opencv/commit/e726ff3296b9e382371a778ad807d37a2e49b979&gt;e726ff3&lt;/denchmark-link&gt;
 with VS2019 and a  compile target.
I think the #ifdef added in the PR is too narrow to fully resolve this issue.
Test case  fails.
&lt;denchmark-h:h4&gt;Cause&lt;/denchmark-h&gt;




opencv/modules/core/src/count_non_zero.dispatch.cpp


         Line 65
      in
      e726ff3






 #if defined __APPLE__ || (defined _MSC_VER &amp;&amp; defined _M_IX86) 





That code is looking for Apple  (Microsoft MSVC compiler with 32-bit compile target).  is  defined for Windows 64-bit compile target. &lt;denchmark-link:https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=msvc-160&gt;https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=msvc-160&lt;/denchmark-link&gt;

The original report above is broader. It is all of Windows. Or perhaps all of MSVC compiling for Windows. I don't see anything in the bug report distinguishing that it is only Windows 32-bit compile targets. &lt;denchmark-link:https://github.com/mshabunin&gt;@mshabunin&lt;/denchmark-link&gt;
, you investigated the affected groups. Is this true?
&lt;denchmark-h:h4&gt;Recommendation&lt;/denchmark-h&gt;

Therefore, I recommend the #ifdef be broader to cover all Windows x86 and x64 targets. It is unsafe to use only  because the MSVC compiler also targets Windows ARM compile targets. Therefore, I recommend  or  those two are equivalent &lt;denchmark-link:https://docs.microsoft.com/en-us/archive/blogs/reiley/macro-revisited&gt;https://docs.microsoft.com/en-us/archive/blogs/reiley/macro-revisited&lt;/denchmark-link&gt;

Leading to a suggested ifdef of...
#if defined __APPLE__ || (defined _MSC_VER &amp;&amp; (defined _M_IX86 || defined _M_X64))
Using that suggested change, the master branch compile and the all test cases pass [  PASSED  ] 11609 tests
If everyone agrees, I can make another PR.
		</comment>
		<comment id='3' author='D-Alex' date='2020-12-01T10:50:21Z'>
		&lt;denchmark-link:http://pullrequest.opencv.org/buildbot/builders/master-win64-vc16/builds/555&gt;Can't reproduce&lt;/denchmark-link&gt;
 (nightly build, Dec 1 2020, CPU is i7-6700K).
Please collect extra information from test run ():
&lt;denchmark-code&gt;...
CPU features: SSE SSE2 SSE3 *SSE4.1 *SSE4.2 *FP16 *AVX *AVX2 *AVX512-SKX?
Intel(R) IPP version: ippIP AVX2 (l9) 2020.0.0 Gold (-) Oct 21 2019
...
[----------] 6 tests from Core/CountNonZeroBig
[ RUN      ] Core/CountNonZeroBig./0, where GetParam() = (0, 1x524190)
[       OK ] Core/CountNonZeroBig./0 (4 ms)
[ RUN      ] Core/CountNonZeroBig./1, where GetParam() = (0, 524190x1)
[       OK ] Core/CountNonZeroBig./1 (0 ms)
[ RUN      ] Core/CountNonZeroBig./2, where GetParam() = (0, 3840x2160)
[       OK ] Core/CountNonZeroBig./2 (5 ms)
[ RUN      ] Core/CountNonZeroBig./3, where GetParam() = (5, 1x524190)
[       OK ] Core/CountNonZeroBig./3 (3 ms)
[ RUN      ] Core/CountNonZeroBig./4, where GetParam() = (5, 524190x1)
[       OK ] Core/CountNonZeroBig./4 (1 ms)
[ RUN      ] Core/CountNonZeroBig./5, where GetParam() = (5, 3840x2160)
[       OK ] Core/CountNonZeroBig./5 (26 ms)
[----------] 6 tests from Core/CountNonZeroBig (39 ms total)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='D-Alex' date='2020-12-01T11:07:21Z'>
		info below
&lt;denchmark-h:h4&gt;Setup&lt;/denchmark-h&gt;


master e726ff3
MSVS2019 Community v16.8.2
windows amd64 (x64) compile target
Debug build

&lt;denchmark-h:h4&gt;Repro&lt;/denchmark-h&gt;


Build opencv
Run opencv_test_cored.exe --gtest_filter=*CountNonZeroBig*

&lt;denchmark-h:h4&gt;Result&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;CTEST_FULL_OUTPUT
OpenCV version: 4.5.1-pre
OpenCV VCS version: 4.5.0-254-ge726ff3296-dirty
Build type: Debug
Compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.28.29333/bin/Hostx64/x64/cl.exe  (ver 19.28.29334.0)
Parallel framework: ms-concurrency (nthreads=8)
CPU features: SSE SSE2 SSE3 SSSE3 SSE4.1 POPCNT SSE4.2 AVX *FP16 *AVX2? *AVX512-SKX?
Intel(R) IPP version: ippIP SSE4.2 (y8) 2020.0.0 Gold (-) Oct 21 2019
[ INFO:0] global ..\modules\core\src\ocl.cpp (1176) cv::ocl::haveOpenCL Initialize OpenCL runtime...
[ INFO:0] global ..\modules\core\src\ocl.cpp (1182) cv::ocl::haveOpenCL OpenCL: found 2 platforms
[ INFO:0] global ..\modules\core\src\ocl.cpp (974) cv::ocl::OpenCLExecutionContext::Impl::getInitializedExecutionContext OpenCL: initializing thread execution context
[ INFO:0] global ..\modules\core\src\ocl.cpp (984) cv::ocl::OpenCLExecutionContext::Impl::getInitializedExecutionContext OpenCL: creating new execution context...
[ INFO:0] global ..\modules\core\src\ocl.cpp (1012) cv::ocl::OpenCLExecutionContext::Impl::getInitializedExecutionContext OpenCL: context is not available/disabled
OpenCL is disabled
TEST: Skip tests with tags: 'mem_6gb', 'verylong', 'debug_verylong'
Note: Google Test filter = *CountNonZeroBig*
[==========] Running 6 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 6 tests from Core/CountNonZeroBig
[ RUN      ] Core/CountNonZeroBig./0, where GetParam() = (0, 1x524190)
[       OK ] Core/CountNonZeroBig./0 (4 ms)
[ RUN      ] Core/CountNonZeroBig./1, where GetParam() = (0, 524190x1)
..\modules\core\test\test_countnonzero.cpp(287): error: Expected equality of these values:
  0
  cv::countNonZero(cv::Mat::zeros(sz, type))
    Which is: 65536
[  FAILED  ] Core/CountNonZeroBig./1, where GetParam() = (0, 524190x1) (2 ms)
[ RUN      ] Core/CountNonZeroBig./2, where GetParam() = (0, 3840x2160)
[       OK ] Core/CountNonZeroBig./2 (14 ms)
[ RUN      ] Core/CountNonZeroBig./3, where GetParam() = (5, 1x524190) 
[       OK ] Core/CountNonZeroBig./3 (7 ms)
[ RUN      ] Core/CountNonZeroBig./4, where GetParam() = (5, 524190x1) 
[       OK ] Core/CountNonZeroBig./4 (4 ms)
[ RUN      ] Core/CountNonZeroBig./5, where GetParam() = (5, 3840x2160)
[       OK ] Core/CountNonZeroBig./5 (64 ms)
[----------] 6 tests from Core/CountNonZeroBig (128 ms total)

[----------] Global test environment tear-down
[==========] 6 tests from 1 test case ran. (136 ms total)    
[  PASSED  ] 5 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] Core/CountNonZeroBig./1, where GetParam() = (0, 524190x1)

 1 FAILED TEST
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='D-Alex' date='2020-12-01T11:21:46Z'>
		Two differences I notice in our logs....

I build debug and you release
I build IPP ippIP SSE4.2 and you ippIP AVX2. The build system likely chose mine to be only SSE4.2 because my build machine doesn't have a cpu with AVX2.

I suggest setting your environment variable OPENCV_IPP=sse42 before running that test. From system.cpp, that will force IPP to use the sse4.2 codepath. And then you might see the issue. I can't force avx2 as my cpu doesn't have it...yet...it should be delivered sometime in december ;-)
More thought. If this is an SSE4.2 issue, that would explain some behavior we see. When building for Windows 32-bit, opencv IPP only supports SSE4.2. This aligns with the result of the existing #ifdef which disables IPP on 32-bit....because 32-bit can only run SSE4.2. It is not possible to test 32-bit AVX2. My CPU only supports AVX, therefore it runs IPP SSE4.2 and can't test AVX2. I suspect the automated build/test pipeline for opencv isn't testing IPP SSE4.2 on Windows across a range of CPUs. Therefore, this specific issue wasn't caught. And continuing this thinking, the #ifdef could be simplified to only test for the compilers and add code to the if() under it to check for (cv::ipp::getIppTopFeatures() == ippCPUID_SSE42)
		</comment>
		<comment id='6' author='D-Alex' date='2020-12-01T14:08:19Z'>
		&lt;denchmark-link:https://github.com/diablodale&gt;@diablodale&lt;/denchmark-link&gt;
 Thank you!
You are right, both Win32 and Mac platforms run SSE4.2 IPP optimizations only (no AVX2).
Problem is reproduced on Linux with OPENCV_IPP=sse42.
&lt;denchmark-code&gt;[ RUN      ] Core/CountNonZeroBig./1, where GetParam() = (0, 524190x1)
/home/alalek/projects/opencv/dev/modules/core/test/test_countnonzero.cpp:287: Failure
Expected equality of these values:
  0
  cv::countNonZero(cv::Mat::zeros(sz, type))
    Which is: 65536
[  FAILED  ] Core/CountNonZeroBig./1, where GetParam() = (0, 524190x1) (1 ms)
&lt;/denchmark-code&gt;

Prepared fix here: &lt;denchmark-link:https://github.com/opencv/opencv/pull/18986&gt;#18986&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>