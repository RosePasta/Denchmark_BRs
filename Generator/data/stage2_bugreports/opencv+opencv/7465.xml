<bug id='7465' author='kesinger' open_date='2016-10-11T22:20:58Z' closed_time='2016-10-18T11:32:48Z'>
	<summary>Segfault when releasing VideoCapture if CONVERT_RGB is false</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.1, top of master, 73a8fa
Operating System / Platform =&gt; linux, ubuntu 16.04
Compiler =&gt; g++ 5.4.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

After profiling our code, we've found that a significant component of the runtime is in YUV-&gt;RGB conversion, which we don't need.  Trying to turn this off with "set(cv::CAP_PROP_CONVERT_RGB, 0);" worked but would produce a segfault on exit (sometimes just a coredump, sometimes an internal glibc error).   Examining with valgrind, it appears that the problem is somewhere in a cvFree call, and in particular something called in a destructor triggered by the "delete *pcapture" on line 80 in cap.cpp.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

This code will segfault:
&lt;denchmark-code&gt;#include &lt;opencv2/highgui/highgui.hpp&gt;
#include &lt;opencv2/imgproc/imgproc.hpp&gt;
#include &lt;memory&gt;
#include &lt;chrono&gt;
#include &lt;thread&gt;
#include &lt;iostream&gt;
#include &lt;unistd.h&gt;


int main(void) {

  std::shared_ptr&lt;cv::VideoCapture&gt; camera{nullptr};
  camera.reset(new cv::VideoCapture(0));

  camera-&gt;set(cv::CAP_PROP_CONVERT_RGB, 0);
  std::cout &lt;&lt; "Ready to go" &lt;&lt; std::endl;
  const size_t nreads{10};
  for(size_t i=0; i &lt; nreads; i++) {
    cv::Mat frame;
    camera-&gt;read(frame);
    std::cout &lt;&lt; "Read image " &lt;&lt; i &lt;&lt; " of size " &lt;&lt; frame.rows &lt;&lt; " " &lt;&lt; frame.cols &lt;&lt; std::endl;
    usleep(100);
  }
  std::cout &lt;&lt; "Finished " &lt;&lt; nreads &lt;&lt; " reads" &lt;&lt; std::endl;
  std::this_thread::sleep_for(std::chrono::seconds(1));
  std::cout &lt;&lt; "Finished sleep..." &lt;&lt; std::endl;
  camera-&gt;release();
  std::cout &lt;&lt; "Camera released" &lt;&lt; std::endl;
  camera.reset();
  std::cout &lt;&lt; "Camera reset" &lt;&lt; std::endl;
}
&lt;/denchmark-code&gt;

The valgrind output looks like:
&lt;denchmark-code&gt;
==366== Invalid read of size 8
==366==    at 0x762025: cv::fastFree(void*) (in /home/jake/work/bin/minimumExample)
==366==    by 0x43CE71: cv::CvCaptureCAM_V4L::~CvCaptureCAM_V4L() (in /home/jake/work/bin/minimumExample)
==366==    by 0x428041: cvReleaseCapture (in /home/jake/work/bin/minimumExample)
==366==    by 0x428062: cv::DefaultDeleter&lt;CvCapture&gt;::operator()(CvCapture*) const (in /home/jake/work/bin/minimumExample)
==366==    by 0x428080: cv::detail::PtrOwnerImpl&lt;CvCapture, cv::DefaultDeleter&lt;CvCapture&gt; &gt;::deleteSelf() (in /home/jake/work/bin/minimumExample)
==366==    by 0x427E75: cv::VideoCapture::release() (in /home/jake/work/bin/minimumExample)
==366==    by 0x426791: main (in /home/jake/work/bin/minimumExample)
==366==  Address 0x132bf858 is 8 bytes before a block of size 614,400 free'd
==366==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==366==    by 0x43CE48: cv::CvCaptureCAM_V4L::~CvCaptureCAM_V4L() (in /home/jake/work/bin/minimumExample)
==366==    by 0x428041: cvReleaseCapture (in /home/jake/work/bin/minimumExample)
==366==    by 0x428062: cv::DefaultDeleter&lt;CvCapture&gt;::operator()(CvCapture*) const (in /home/jake/work/bin/minimumExample)
==366==    by 0x428080: cv::detail::PtrOwnerImpl&lt;CvCapture, cv::DefaultDeleter&lt;CvCapture&gt; &gt;::deleteSelf() (in /home/jake/work/bin/minimumExample)
==366==    by 0x427E75: cv::VideoCapture::release() (in /home/jake/work/bin/minimumExample)
==366==    by 0x426791: main (in /home/jake/work/bin/minimumExample)
==366==  Block was alloc'd at
==366==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==366==    by 0x43DE1A: cv::_capture_V4L2(cv::CvCaptureCAM_V4L*) (in /home/jake/work/bin/minimumExample)
==366==    by 0x441FC6: cv::CvCaptureCAM_V4L::open(int) (in /home/jake/work/bin/minimumExample)
==366==    by 0x4421F3: cvCreateCameraCapture_V4L(int) (in /home/jake/work/bin/minimumExample)
==366==    by 0x428711: cvCreateCameraCapture (in /home/jake/work/bin/minimumExample)
==366==    by 0x428A17: cv::VideoCapture::open(int) (in /home/jake/work/bin/minimumExample)
==366==    by 0x429F8B: cv::VideoCapture::VideoCapture(int) (in /home/jake/work/bin/minimumExample)
==366==    by 0x426536: main (in /home/jake/work/bin/minimumExample)
&lt;/denchmark-code&gt;

A previous debugging run suggested a problem in icvCloseCAM_V4L, in particular a call to "cvFree(&amp;capture-&gt;frame.imageData)", but I don't consider that reliable enough to do anything more than mention.
	</description>
	<comments>
	</comments>
</bug>