<bug id='11944' author='williamvanderkamp' open_date='2018-07-11T23:09:05Z' closed_time='2018-07-17T18:37:20Z'>
	<summary>Python3 getPerspectiveTransform gives incorrect result on some input</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4.1.15
Operating System / Platform =&gt; Ubuntu 16.04 64 Bit
Compiler: Unknown -- I'm using the standard pip install opencv-python Python binding.
Python =&gt; 3.6.6
numpy =&gt; 1.14.2

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

I'm using the python3 binding. I couldn't find anywhere Python-specific to report this bug, so I opted to report it here.
getPerspectiveTransform and findHomography should both give the same correct result when given 4 coordinate pairs. But when testing with my data, findHomography returns a correct homography matrix, but getPerspectiveTransform returns a completely different (and incorrect) matrix.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

import cv2
import numpy as np

utm = np.float32([[ 396388.56, 5782566.  ],
                  [ 396477. ,  5782564.  ],
                  [ 396475.  , 5782467.5 ],
                  [ 396386.56 ,5782469.5 ]])
px = np.float32([[    0.   ,  0.],
                 [22992. ,    0.],
                 [22992., 25095.],
                 [    0., 25095.]])
print(str(cv2.getPerspectiveTransform(utm,px)))
# This one is incorrect.
# array([[-2.03567784e-03,  1.39543393e-04, -2.06672399e-11],
#        [-9.74034793e-05,  6.67847650e-06,  3.51683667e-10],
#        [-1.20329423e-08, -1.72111512e-07,  1.00000000e+00]])
print(str(cv2.findHomography(utm, px)))
# This one is correct.
# (array([[ 2.59858416e+02, -5.38566665e+00, -7.18619311e+07],
#        [-5.87827526e+00, -2.59929984e+02,  1.50539237e+09],
#        [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]]), array([[1],
#        [1],
#        [1],
#        [1]], dtype=uint8))
	</description>
	<comments>
		<comment id='1' author='williamvanderkamp' date='2018-07-12T16:54:31Z'>
		Confirmed.
Check code:
&lt;denchmark-code&gt;import cv2 as cv
import numpy as np

utm = np.float32([[[ 396388.56, 5782566.  ],
                  [ 396477. ,  5782564.  ],
                  [ 396475.  , 5782467.5 ],
                  [ 396386.56 ,5782469.5 ]]])
px = np.float32([[[    0.   ,  0.],
                 [22992. ,    0.],
                 [22992., 25095.],
                 [    0., 25095.]]])

print('src='); print(utm)
print('dst='); print(px)

m1 = cv.getPerspectiveTransform(utm, px)
print('getPerspectiveTransform='); print(m1)
m2, mask2 = cv.findHomography(utm, px)
print('findHomography='); print(m2)

print("Checking (should equal to dst)....")

dst1 = cv.perspectiveTransform(utm, m1);
print('perspectiveTransform(getPerspectiveTransform)='); print(dst1)
dst2 = cv.perspectiveTransform(utm, m2);
print('perspectiveTransform(findHomography)='); print(dst2)
&lt;/denchmark-code&gt;

Looks like there are problem with  &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.4.2/modules/imgproc/src/imgwarp.cpp#L3064&gt;here&lt;/denchmark-link&gt;
:
&lt;denchmark-code&gt;perspectiveTransform(getPerspectiveTransform)=
[[[    33.545692   -572.67755 ]
  [ 10880.563       -28.791756]
  [     0.            0.      ]
  [-13561.854     11824.772   ]]]
perspectiveTransform(findHomography)=
[[[-1.4901161e-08  0.0000000e+00]
  [ 2.2992000e+04 -2.3841858e-07]
  [ 2.2992000e+04  2.5095000e+04]
  [-1.4901161e-08  2.5095000e+04]]]
&lt;/denchmark-code&gt;

solve(DECOMP_LU) produces these results:
&lt;denchmark-code&gt;getPerspectiveTransform=
[[ 2.59858416e+02 -5.38566665e+00 -7.18619311e+07]
 [-5.87827526e+00 -2.59929984e+02  1.50539237e+09]
 [ 9.81865092e-18 -6.13476804e-19  1.00000000e+00]]
findHomography=
[[ 2.59858416e+02 -5.38566665e+00 -7.18619311e+07]
 [-5.87827526e+00 -2.59929984e+02  1.50539237e+09]
 [ 0.00000000e+00  0.00000000e+00  1.00000000e+00]]
Checking ....
perspectiveTransform(getPerspectiveTransform)=
[[[    0.     0.]
  [22992.     0.]
  [22992. 25095.]
  [    0. 25095.]]]
perspectiveTransform(findHomography)=
[[[-1.4901161e-08  0.0000000e+00]
  [ 2.2992000e+04 -2.3841858e-07]
  [ 2.2992000e+04  2.5095000e+04]
  [-1.4901161e-08  2.5095000e+04]]]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='williamvanderkamp' date='2018-07-13T12:28:21Z'>
		getPerspectiveTransform() builds 8x8 linear system via solve(DECOMP_SVD).
Looks like, input above is not good for this approach. It is mathematically correct (in theory), but sometimes it may be numerically unstable (in practice).
Perhaps inputs should be "normalized" somehow (utx points are shifted and they are located very close).
Also you could add sanity check for received results (for example, via perspectiveTransform()) into your application to estimate reliability of results.
However, it seems work with DECOMP_LU or DECOMP_QR methods.
&lt;denchmark-link:https://github.com/williamvanderkamp&gt;@williamvanderkamp&lt;/denchmark-link&gt;
 Could you try &lt;denchmark-link:https://github.com/opencv/opencv/pull/11965&gt;#11965&lt;/denchmark-link&gt;
 with other your data?
		</comment>
		<comment id='3' author='williamvanderkamp' date='2018-07-18T04:06:47Z'>
		Thanks for your help. Your suggestions seem like they will work; sorry, I haven't had a chance to try it on other data yet.
		</comment>
	</comments>
</bug>