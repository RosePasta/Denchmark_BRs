<bug id='5636' author='nilocFluid' open_date='2015-11-05T15:02:25Z' closed_time='2015-12-11T09:53:40Z'>
	<summary>Fix of Bug #1784 causes erroneous checkIntegerRange() return</summary>
	<description>
In mathfuncs.cpp, checkIntegerRange() is maxVal inclusive, but the change to checkRange() for bug &lt;denchmark-link:http://code.opencv.org/issues/1784&gt;#1784&lt;/denchmark-link&gt;
 causes checkIntegerRange() to act maxVal exclusive :
&lt;denchmark-code&gt;// see "Bug #1784
int minVali = minVal&lt;(-INT_MAX - 1) ? (-INT_MAX - 1) : cvFloor(minVal);
int maxVali = maxVal&gt;INT_MAX ? INT_MAX : cvCeil(maxVal) - 1; // checkIntegerRang() use inclusive maxVal
&lt;/denchmark-code&gt;

Subtracting 1 from cvCeil(maxVal) causes checkIntegerRange() to return false if a value is equivalent to maxVal.
	</description>
	<comments>
		<comment id='1' author='nilocFluid' date='2015-12-09T13:01:52Z'>
		&lt;denchmark-link:https://github.com/vpisarev&gt;@vpisarev&lt;/denchmark-link&gt;
 Is this test valid?
&lt;denchmark-link:https://github.com/Itseez/opencv/blob/d19897b734aab68d19d784f53836b48ed6098a34/modules/core/test/test_math.cpp#L2533-L2534&gt;https://github.com/Itseez/opencv/blob/d19897b734aab68d19d784f53836b48ed6098a34/modules/core/test/test_math.cpp#L2533-L2534&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='nilocFluid' date='2015-12-09T13:44:33Z'>
		Well, test is valid, because maxVal is "exclusive" (see docs):

maxVal - exclusive upper boundary of valid values range

Also,

return false if a value is equivalent to maxVal.

It is fine. Valid values are [minVal; maxVal).
		</comment>
		<comment id='3' author='nilocFluid' date='2015-12-09T14:17:35Z'>
		but checkIntegerRange() is maxVal inclusive
		</comment>
		<comment id='4' author='nilocFluid' date='2015-12-09T14:57:33Z'>
		Could you provide a testcase which fails? (like above, for example)
		</comment>
		<comment id='5' author='nilocFluid' date='2015-12-09T19:26:54Z'>
		Lets say we have an array of length 10 (10 rows) and depth &lt; CV_32F called samples.
We want to create a TrainData object with :
&lt;denchmark-code&gt;cv::ml::TrainData::create(InputArray samples, 
                        int layout, 
                        InputArray responses, 
                        InputArray varIdx = noArray(), 
                        InputArray  sampleIdx = noArray(), 
                        InputArray  sampleWeights = noArray(), 
                        InputArray  varType = noArray() 
                        )   
&lt;/denchmark-code&gt;

The above function calls TrainDataImpl::setData(), which passes (samples.rows - 1) as maxVal in it's call to checkRange :
&lt;denchmark-code&gt;CV_Assert( (sampleIdx.checkVector(1, CV_32S, true) &gt; 0 &amp;&amp;
                   checkRange(sampleIdx, true, 0, 0, nsamples-1)) ||
                   sampleIdx.checkVector(1, CV_8U, true) == nsamples );
&lt;/denchmark-code&gt;

So, maxVal == 9 inside checkRange().  Then checkRange() passes (cvCeil(maxVal) - 1) as maxVal to checkIntegerRange() :
&lt;denchmark-code&gt;if (depth &lt; CV_32F)
{
    // see "Bug #1784"
    int minVali = minVal&lt;(-INT_MAX - 1) ? (-INT_MAX - 1) : cvFloor(minVal);
    int maxVali = maxVal&gt;INT_MAX ? INT_MAX : cvCeil(maxVal) - 1; // checkIntegerRang() use inclusive maxVal

    (check_range_functions[depth])(src, badPt, minVali, maxVali, badValue);
}
&lt;/denchmark-code&gt;

Now, maxVal == 8 inside checkIntegerRange().  If the array sampleIdx contains 9, checkRange() will return false, which causes the assertion in TrainDataImpl::setData() to fail.
		</comment>
		<comment id='6' author='nilocFluid' date='2015-12-09T20:44:03Z'>
		Documentation of checkRange says, that maxVal parameter is "exclusive upper boundary of valid values range".
So check for elements is (by definition from docs): "minVal &lt;= element[i] &lt; maxVal" (there are &lt;= and &lt;). So checkRange({1,2,3,9,5,4}, true, NULL, 0, 9) returns false because relation elem[3] &lt; maxVal is failed. But checkRange({1,2,3,9,5,4}, true, NULL, 0, 9+1) or checkRange({1,2,3,9,5,4}, true, NULL, 0, 9 + 0.1f) return true as expected.
I believe for your task you can try to use cv::inRange somehow.
		</comment>
		<comment id='7' author='nilocFluid' date='2015-12-09T21:44:49Z'>
		I see your point.  From the point of view of checkRange everything is behaving appropriately.
However, if checkRange is behaving appropriately, then TrainDataImpl::setData() isn't using checkRange appropriately.  In the case I illustrated above 9 is a valid index.  The range being checked should be [0,10), but because the maxVal parameter to checkRange is nsamples - 1 the range being checked is [0,9), which is inappropriate.
Should I change the title of this issue?
		</comment>
		<comment id='8' author='nilocFluid' date='2015-12-10T06:54:43Z'>
		I believe, new ticket about ml code will be fine.
		</comment>
		<comment id='9' author='nilocFluid' date='2015-12-11T09:53:40Z'>
		Problem in ML module has been fixed in &lt;denchmark-link:https://github.com/opencv/opencv/pull/5783&gt;#5783&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>