<bug id='8702' author='cbraley' open_date='2017-05-06T01:30:19Z' closed_time='2017-07-12T19:50:12Z'>
	<summary>Potential thread safety issue (data race) in getDefaultAllocator</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.2
Operating System / Platform =&gt; Ubuntu 14.04

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

There may be a data race in getDefaultAllocator. If you have 2 threads create cv::Mats they can race on g_matAllocator at matrix.cpp:231. I discovered this using the "thread sanitizer" tool:
&lt;denchmark-link:https://github.com/google/sanitizers&gt;https://github.com/google/sanitizers&lt;/denchmark-link&gt;

Read of size 8 at 0x7f02079ceba0 by thread T12:
#0 getDefaultAllocator third_party/OpenCV/v3_2_0/modules/core/src/matrix.cpp:231:9 (libthird_Uparty_SOpenCV_Sv3_U2_U0_Slibcore.so+0x219ebf)
I haven't read through the code in enough detail to be totally sure that this is a race.
I don't know why the initialization of a global singleton static pointer here is so complex. I think this simpler code would work correctly with a modern C++11 compiler:
&lt;denchmark-code&gt;MatAllocator* Mat::getDefaultAlloctor() {
  // Function-scope static variable g_matAllocator will only be initialized by the first thread to reach here.
  // This will be done in a thread safe manner.
  static g_matAllocator* = new StdMatAllocator();
  return g_matAllocator;
}
&lt;/denchmark-code&gt;

The above is thread safe for modern &gt;= C++11 compilers. g_matAllocator will only be initialized on the first call to getDefaultAllocator.
&lt;denchmark-link:http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2660.htm&gt;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2660.htm&lt;/denchmark-link&gt;

However, some older compilers (MSVC versions) apparently didn't implement this properly. I don't know what old compilers OpenCV wishes to be compatible with.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Unfortunately I don't have detailed instructions on how to repro this since I'm not using OpenCV's typical CMake-based build system. If someone really wants, I'll look into reproducing this with CMake.
	</description>
	<comments>
		<comment id='1' author='cbraley' date='2017-07-12T19:50:12Z'>
		Looks like this was fixed in &lt;denchmark-link:https://github.com/opencv/opencv/pull/8713&gt;#8713&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>