<bug id='4862' author='opencv-pushbot' open_date='2015-07-27T10:52:19Z' closed_time='2015-10-06T12:25:06Z'>
	<summary>getUMat does not work properly with Mat on user data</summary>
	<description>
Transferred from &lt;denchmark-link:http://code.opencv.org/issues/4006&gt;http://code.opencv.org/issues/4006&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;|| Konstantin Rodyushkin on 2014-11-13 15:13
|| Priority: Normal
|| Affected: branch 'master' (3.0-dev)
|| Category: t-api
|| Tracker: Bug
|| Difficulty: 
|| PR: 
|| Platform: Any / Any
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;getUMat does not work properly with Mat on user data&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;1. The following code raises a exception
void* user_data = malloc(1024*1024);
UMat m = Mat(1024,1024,CV_8U,user_data).getUMat(ACCESS_RW);    
{
   Mat t = m.getMat(ACCESS_RW);
}
*m.setTo(0); //exception*

2. the Mat.getUMat in case of Mat.u==NULL creates umatdata with refcount=1 but without reference from any Mat object. So the created umatdata at least !!will never be released.
UMat Mat::getUMat(int accessFlags, UMatUsageFlags usageFlags) const
{
    UMat hdr;
    if(!data)
        return hdr;
    UMatData* temp_u = u;
    *if(!temp_u) // true for Mat(,,,user_data)*
    {
        MatAllocator *a = allocator, *a0 = getStdAllocator();
        if(!a)
            a = a0;
        temp_u = a-&gt;allocate(dims, size.p, type(), data, step.p, accessFlags, usageFlags);
        *temp_u-&gt;refcount = 1; //temp_u is not referenced from any Mat but refcount=1*
    }
    UMat::getStdAllocator()-&gt;allocate(temp_u, accessFlags, usageFlags);
    hdr.flags = flags;
    setSize(hdr, dims, size.p, step.p);
    finalizeHdr(hdr);
    hdr.u = temp_u;
    hdr.offset = data - datastart;
    hdr.addref();
    return hdr;
}
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;History&lt;/denchmark-h&gt;

&lt;denchmark-h:h5&gt;Ilya Lavrenov on 2014-11-16 23:00&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Hi Konstantin,
The first example is incorrect, since life time of UMat must be longer than Mat. But in your example Mat is temp object and so UMat is invalid and you have a strange behaviour.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Ilya Lavrenov on 2014-12-01 10:55&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;-   Priority changed from Normal to High
-   Status changed from New to Open
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Konstantin Rodyushkin on 2014-12-11 15:14&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Ilya Lavrenov wrote:
&gt; Hi Konstantin,
&gt; The first example is incorrect, since life time of UMat must be longer than Mat. But in your example Mat is temp object and so UMat is invalid and you have a strange behaviour.

Then it make sense to report about this in the incorrect line "UMat m = Mat(1024,1024,CV_8U,user_data).getUMat(ACCESS_RW);"
but not in "m.setTo(0);" Isn't it?
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Vadim Pisarevsky on 2015-04-27 15:20&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;-   Priority changed from High to Normal
-   Category set to t-api
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Konstantin Rodyushkin on 2015-06-05 08:02&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Ilya Lavrenov wrote:
&gt; Hi Konstantin,
&gt; The first example is incorrect, since life time of UMat must be longer than Mat. But in your example Mat is temp object and so UMat is invalid and you have a strange behaviour.

I am sorry for late comment but I just found similar example in the test code
TEST(Core_UMat, getUMat)
{
    {
        Mat m(10, 10, CV_8UC1), ref;
        Rect r(1, 1, 8, 8);
        {
            UMat um = m(r).getUMat(ACCESS_WRITE);
            um.setTo(17);
        }
    }
}

m(r) is also temporal object.
Does it mean that getUMat is incorrectly used in TEST(Core_UMat, getUMat)?
&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>