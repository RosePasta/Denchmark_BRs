<bug id='9589' author='chacha21' open_date='2017-09-08T09:30:16Z' closed_time='2017-09-13T15:00:41Z'>
	<summary>Crash in Cuda Laplacian filter</summary>
	<description>
OpenCV =&gt; 3.2 and 3.3
Operating System / Platform =&gt; Windows 64 Bit
Compiler =&gt; Visual Studio 2017 + cuda 8 and cuda 9
When using cv::cuda::createLaplacianFilter(), the only supported "scale" parameter seems to be 1, otherwise a crash occurs.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;try {
    int type = CV_32FC1;//same crash with 8UC1
    cv::Mat src(cv::Size(640, 480), type);
    cv::Mat dst(cv::Size(640, 480), type);
    int dx = 1;
    int dy = 0;
    int k = 1;
    double scale = 2;

    cv::Laplacian(src, dst, dst.depth(), k, scale);
    printf("ok\n");

    cv::cuda::GpuMat srcGpu(cv::Size(640, 480), type);
    cv::cuda::GpuMat dstGpu(cv::Size(640, 480), type);
    cv::cuda::Stream stream;

    cv::Ptr&lt;cv::cuda::Filter&gt; filter = cv::cuda::createLaplacianFilter(srcGpu.type(), dstGpu.type(), k, scale);//won't crash with scale = 1
    filter-&gt;apply(srcGpu, dstGpu, stream);//crash in cvtScale_SIMD&lt;float, float, float&gt; for OpenCV 3.2, iwiScale() for OpenCV 3.3
    printf("gpu : ok\n");//not reached

}
catch(std::exception&amp; e){
    printf("%s\n", e.what());
}
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='chacha21' date='2017-09-08T09:41:25Z'>
		
cvtScale_SIMD

This is CPU-based function. Could you provide reproducer without CUDA calls?
		</comment>
		<comment id='2' author='chacha21' date='2017-09-08T09:47:30Z'>
		I am sorry I don't understand your request.
With OpenCV 3.2 compiled with Cuda 8, the call to createLaplacianFilter() crash at
&lt;denchmark-code&gt;opencv_core320d.dll!cv::cvtScale_SIMD&lt;float,float,float&gt;::operator()(const float * src, float * dst, int width, float scale, float shift) Line 2554
opencv_core320d.dll!cv::cvtScale_&lt;float,float,float&gt;(const float * src, unsigned __int64 sstep, float * dst, unsigned __int64 dstep, cv::Size_&lt;int&gt; size, float scale, float shift) Line 3531
opencv_core320d.dll!cv::cvtScale32f(const float * src, unsigned __int64 sstep, const unsigned char * __formal, unsigned __int64 __formal, float * dst, unsigned __int64 dstep, cv::Size_&lt;int&gt; size, double * scale) Line 4946
opencv_core320d.dll!cv::Mat::convertTo(const cv::_OutputArray &amp; _dst, int _type, double alpha, double beta) Line 5293
opencv_cudafilters320d.dll!cv::operator*=(cv::Mat &amp; a, const double &amp; b) Line 254
&lt;/denchmark-code&gt;


opencv_cudafilters320d.dll!cv::cuda::createLaplacianFilter(int srcType, int dstType, int ksize, double scale, int borderMode, cv::Scalar_ borderVal)

		</comment>
		<comment id='3' author='chacha21' date='2017-09-08T10:42:37Z'>
		Problem is confirmed.
I mean reproducer without CUDA code, something like this (&lt;denchmark-link:https://github.com/opencv/opencv/blob/3.3.0/modules/cudafilters/src/filtering.cpp#L309-L317&gt;original code&lt;/denchmark-link&gt;
):
&lt;denchmark-code&gt;    int ksize = 3;
    float scale = 2;
    static const float K[2][9] =
    {
        {0.0f, 1.0f, 0.0f, 1.0f, -4.0f, 1.0f, 0.0f, 1.0f, 0.0f},
        {2.0f, 0.0f, 2.0f, 0.0f, -8.0f, 0.0f, 2.0f, 0.0f, 2.0f}
    };

    Mat kernel(3, 3, CV_32FC1, (void*)K[ksize == 3]);
    if (scale != 1)
        kernel *= scale;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='chacha21' date='2017-09-08T10:54:23Z'>
		Finally, there is problem with CUDA code itself.
It tries to modify "const" data.
		</comment>
		<comment id='5' author='chacha21' date='2017-09-08T11:22:48Z'>
		Please try this fix: &lt;denchmark-link:https://github.com/opencv/opencv/pull/9592&gt;#9592&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='chacha21' date='2017-09-26T13:20:45Z'>
		Could not try before, but fixed indeed.
		</comment>
	</comments>
</bug>