<bug id='6258' author='polevoy-d-v' open_date='2016-03-14T13:16:33Z' closed_time='2016-03-14T14:46:29Z'>
	<summary>cv::Ptr and cv::Mat move semantics self-assignement bug</summary>
	<description>
&lt;denchmark-h:h3&gt;Please state the information for your system&lt;/denchmark-h&gt;


OpenCV version:  3.1
Host OS: Windows 7 64-bit
Compiler &amp; CMake: MS Visual Studio 2012 64-bit &amp; CMake 3.3.0

&lt;denchmark-h:h3&gt;In which part of the OpenCV library you got the issue?&lt;/denchmark-h&gt;


core

&lt;denchmark-h:h3&gt;Actual behaviour&lt;/denchmark-h&gt;

cv::Ptr releases itself in case of self rvalue assignment (cv::Ptr p; p = std::move(p);)
&lt;denchmark-h:h3&gt;Additional description&lt;/denchmark-h&gt;

The problem was encountered when std::stable_sort -ing a vector of cv::Ptr pointers. Some pointers became empty after that.
Self assignment check should be performed before releasing *this in implementation of CXX move semantics that was added for cv::Ptr, cv::Mat and cv::UMat in OpenCV 3.1.
Source investigation resulted in 3 places where this check should be added. (rvalue operator = for cv::Ptr in ptr.inl.hpp, rvalue operator = for cv::Mat and cv::UMat on mat.inl.hpp). Other assignments don't explicitly release *this ptr.
&lt;denchmark-h:h3&gt;Code example to reproduce the issue / Steps to reproduce the issue&lt;/denchmark-h&gt;

The most simple way is to reproduce the error is to explicitly call std::move
&lt;denchmark-code&gt;#include &lt;opencv2/core/core.hpp&gt;
#include &lt;iostream&gt;
#include &lt;memory&gt;

int main()
{
  std::shared_ptr&lt;int&gt; stdPtr(new int(5));
  stdPtr = std::move(stdPtr);
  std::cout &lt;&lt; "std::shared_ptr is " &lt;&lt; *stdPtr &lt;&lt; std::endl;

  cv::Ptr&lt;int&gt; cvPtr(new int(10));
  cvPtr = std::move(cvPtr);
  std::cout &lt;&lt; "cv::Ptr is " &lt;&lt; *cvPtr &lt;&lt; std::endl;
  return 0;
}
&lt;/denchmark-code&gt;

We encountered this error while performing std::stable_sort of cv::Ptr array. It can be reproduced like this:
&lt;denchmark-code&gt;#include &lt;opencv2/core/core.hpp&gt;
#include &lt;iostream&gt;
#include &lt;memory&gt;

bool CVPtrIntLess(const cv::Ptr&lt;int&gt; &amp;lhs, const cv::Ptr&lt;int&gt; &amp;rhs) {return *lhs &lt; *rhs;}

bool SharedPtrIntLess(const std::shared_ptr&lt;int&gt; &amp;lhs, const std::shared_ptr&lt;int&gt; &amp;rhs) {return *lhs &lt; *rhs;}

int main()
{
  size_t num_pts = 20000;

  //ok for shared_ptr
  std::vector&lt;std::shared_ptr&lt;int&gt; &gt; stdPtrVec;
  for (unsigned int i = 0; i &lt; num_pts; ++i)
  {
    stdPtrVec.push_back(std::make_shared&lt;int&gt;(rand()));
  }
  std::cout &lt;&lt; "std::shared_ptr vec filled with data" &lt;&lt; std::endl;
  std::stable_sort(stdPtrVec.begin(), stdPtrVec.end(), SharedPtrIntLess);
  std::cout &lt;&lt; "std::shared_ptr vec sorted" &lt;&lt; std::endl;
  std::cout &lt;&lt; "std vec sort check" &lt;&lt; std::endl;
  for (const auto &amp;p : stdPtrVec)
  {
    if (p == nullptr)
      std::cout &lt;&lt; "empty pointer detected!" &lt;&lt; std::endl;
  }
  std::cout &lt;&lt; std::endl;

  //fails for cv::Ptr
  std::vector&lt;cv::Ptr&lt;int&gt; &gt; cvPtrVec;
  for (unsigned int i = 0; i &lt; num_pts; ++i)
  {
    cv::Ptr&lt;int&gt; newint(new int(rand()));
    if (!newint.empty())
      cvPtrVec.push_back(newint);
  }
  std::cout &lt;&lt; "cv::Ptr vec filled with data" &lt;&lt; std::endl;
  std::stable_sort(cvPtrVec.begin(), cvPtrVec.end(), CVPtrIntLess);
  std::cout &lt;&lt; "cv::Ptr vec sorted" &lt;&lt; std::endl;
  std::cout &lt;&lt; "cv::Ptr vec check" &lt;&lt; std::endl;
  for (const auto &amp;p : cvPtrVec)
  {
    if (p == nullptr)
      std::cout &lt;&lt; "empty pointer detected!" &lt;&lt; std::endl;
  }

  return 0;
} 
&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>