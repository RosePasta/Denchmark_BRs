<bug id='10044' author='ttencate' open_date='2017-11-08T10:04:53Z' closed_time='2017-11-09T11:08:57Z'>
	<summary>intersectConvexConvex sometimes returning one of the input polygons in case of empty intersection</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.3.0, 3.1.0
Operating System / Platform =&gt; Arch Linux
Compiler =&gt; gcc 7.2.0, clang 5.0.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

With some inputs of convex polygons that are entirely disjoint, intersectConvexConvex does not return an empty polygon as one would expect, but rather one of the input polygons.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

intersection.cpp
#include &lt;opencv2/opencv.hpp&gt;

#include &lt;iostream&gt;
#include &lt;vector&gt;

std::ostream &amp;operator&lt;&lt;(std::ostream &amp;out, std::vector&lt;cv::Point&gt; const &amp;v) {
  bool first = true;
  for (auto p : v) {
    if (!first) {
      out &lt;&lt; ' ';
    }
    out &lt;&lt; p;
    first = false;
  }
  return out;
}

int main() {
  std::vector&lt;cv::Point&gt; a = {{290, 126}, {284, 132}, {281, 133}, {256, 124}, {249, 116}, {234, 91}, {232, 86}, {232, 79}, {251, 69}, {257, 68}, {297, 85}, {299, 87}};
  std::vector&lt;cv::Point&gt; b = {{192, 236}, {190, 245}, {177, 260}, {154, 271}, {142, 270}, {135, 263}, {131, 254}, {132, 240}, {172, 213}, {176, 216}};
  std::vector&lt;cv::Point&gt; i;
  cv::intersectConvexConvex(a, b, i);

  std::cout &lt;&lt; "A: " &lt;&lt; cv::isContourConvex(a) &lt;&lt; ' ' &lt;&lt; a &lt;&lt; '\n';
  std::cout &lt;&lt; "B: " &lt;&lt; cv::isContourConvex(b) &lt;&lt; ' ' &lt;&lt; b &lt;&lt; '\n';
  std::cout &lt;&lt; "I: " &lt;&lt; "  " &lt;&lt; i &lt;&lt; '\n';

  cv::Mat image(360, 640, CV_8UC3);
  cv::polylines(image, { a }, true, cv::Scalar(0, 0, 255), 2);
  cv::polylines(image, { b }, true, cv::Scalar(0, 255, 0), 2);
  cv::polylines(image, { i }, true, cv::Scalar(255, 0, 0));

  cv::namedWindow("Intersection");
  cv::imshow("Intersection", image);
  cv::waitKey(0);
}
Compile and run with:
$ g++ -Wall -ointersect intersect.cc -lopencv_imgproc -lopencv_highgui -lopencv_core &amp;&amp; ./intersect 
Output:
&lt;denchmark-code&gt;A: 1 [290, 126] [284, 132] [281, 133] [256, 124] [249, 116] [234, 91] [232, 86] [232, 79] [251, 69] [257, 68] [297, 85] [299, 87]
B: 1 [192, 236] [190, 245] [177, 260] [154, 271] [142, 270] [135, 263] [131, 254] [132, 240] [172, 213] [176, 216]
I:   [290, 126] [284, 132] [281, 133] [256, 124] [249, 116] [234, 91] [232, 86] [232, 79] [251, 69] [257, 68] [297, 85] [299, 87]
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/90930/32542904-5c28cee4-c474-11e7-98c6-a46a6251e7bd.png&gt;&lt;/denchmark-link&gt;

Note how the blue line of the intersection is on top of the red line of polygon A.
Expected output:
&lt;denchmark-code&gt;A: 1 [290, 126] [284, 132] [281, 133] [256, 124] [249, 116] [234, 91] [232, 86] [232, 79] [251, 69] [257, 68] [297, 85] [299, 87]
B: 1 [192, 236] [190, 245] [177, 260] [154, 271] [142, 270] [135, 263] [131, 254] [132, 240] [172, 213] [176, 216]
I:   
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/90930/32542949-8449638e-c474-11e7-9ead-9ba0d569f405.png&gt;&lt;/denchmark-link&gt;

Note how there is no blue line now, as the intersection polygon is empty.
It works correctly if I swap the order of the input arguments, as in:
  cv::intersectConvexConvex(b, a, i);
	</description>
	<comments>
		<comment id='1' author='ttencate' date='2017-11-09T11:32:18Z'>
		Wow, that was quick, thanks &lt;denchmark-link:https://github.com/terfendail&gt;@terfendail&lt;/denchmark-link&gt;
 ! Glad that it was literally only a 1-character change :)
		</comment>
		<comment id='2' author='ttencate' date='2019-08-05T09:23:22Z'>
		Is it possible to reopen this issue? I seem to have run into a similar bag using Opencv 4.1.1.
Given two entirely disjoint polygons A and B, sharing a single point, A is returned from intersectConvexConvex, even If I swap the order of arguments.
#include &lt;opencv2/opencv.hpp&gt;

#include &lt;iostream&gt;
#include &lt;vector&gt;

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out,
                         std::vector&lt;cv::Point&gt; const&amp; v) {
  bool first = true;
  for (auto p : v) {
    if (!first) {
      out &lt;&lt; ' ';
    }
    out &lt;&lt; p;
    first = false;
  }
  return out;
}

int main() {
  std::vector&lt;cv::Point2f&gt; a = {{3.26859117, 1.22859347},
                                {3.20524168, 1.52296472},
                                {2.51474833, 1.36141539}};

  std::vector&lt;cv::Point2f&gt; b = {{3.36058354, 0.80112344},
                                {3.61743402, 1.16712976},
                                {3.26859117, 1.22859347}};

  std::vector&lt;cv::Point2f&gt; i1;
  cv::intersectConvexConvex(a, b, i1);

  std::vector&lt;cv::Point2f&gt; i2;
  cv::intersectConvexConvex(b, a, i2);

  std::cout &lt;&lt; "A: " &lt;&lt; cv::isContourConvex(a) &lt;&lt; ' ' &lt;&lt; a &lt;&lt; '\n';
  std::cout &lt;&lt; "B: " &lt;&lt; cv::isContourConvex(b) &lt;&lt; ' ' &lt;&lt; b &lt;&lt; '\n';
  std::cout &lt;&lt; "I1: " &lt;&lt; "  " &lt;&lt; i1 &lt;&lt; '\n'; // Outputs A
  std::cout &lt;&lt; "I1: " &lt;&lt; "  " &lt;&lt; i2 &lt;&lt; '\n'; // Outputs A
}
		</comment>
	</comments>
</bug>