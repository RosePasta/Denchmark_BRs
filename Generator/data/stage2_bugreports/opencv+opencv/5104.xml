<bug id='5104' author='alaamub' open_date='2015-07-31T17:56:48Z' closed_time='2015-08-10T17:04:36Z'>
	<summary>null pointer dereference openCV</summary>
	<description>
There is a null pointer dereference in openCV
Details:
platform: Linux x86/x64
Version: opencv-3.0.0
OpenCV version 3.0.0 is vulnerable to null pointer dereference, the vulnerability can be triggered through the use of opencv_annotation from the command line. this vulnerability will cause a crash in openCV and In a very rare circumstances and environments, code execution is possible.
when running opencv_annotation with any parameter (i used this as P388Ù8888888888 a parameter) it crashes because opencv2/core/cvstd.hpp at line 942 is dereferencing "i" which is out of bound .
&lt;denchmark-code&gt;-bash-4.2$ gdb /opt/opencv/bin/opencv_annotation 
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-51.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
&lt;http://www.gnu.org/software/gdb/bugs/&gt;...
Reading symbols from /opt/opencv/bin/opencv_annotation...done.
(gdb) r P388Ù8888888888
Starting program: /opt/opencv/bin/opencv_annotation P388Ù8888888888
[Thread debugging using libthread_db enabled]

Program received signal SIGSEGV, Segmentation fault.
find_last_of (pos=18446744073709551615, s=0x7ffff7360a5e &lt;dir_separators&gt; "/", this=0x7fffffffe0a0)
    at /home/alaamub/opencv-3.0.0/modules/core/include/opencv2/core/cvstd.hpp:942
942             if (s[j] == *i)

(gdb) bt full
#0  find_last_of (pos=18446744073709551615, s=0x7ffff7360a5e &lt;dir_separators&gt; "/", this=0x7fffffffe0a0)
    at /home/alaamub/opencv-3.0.0/modules/core/include/opencv2/core/cvstd.hpp:942
        j = 0
        i = 0xffffffffffffffff &lt;Address 0xffffffffffffffff out of bounds&gt;
#1  cv::glob (pattern=..., result=std::vector of length 0, capacity 0, recursive=recursive@entry=false) at /home/alaamub/opencv-3.0.0/modules/core/src/glob.cpp:278
        path = {static npos = 18446744073709551615, cstr_ = 0x0, len_ = 0}
        wildchart = {static npos = 18446744073709551615, cstr_ = 0x0, len_ = 0}
#2  0x0000000000402707 in main (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at /home/alaamub/opencv-3.0.0/apps/annotation/opencv_annotation.cpp:187
        image_folder = ""
        folder = {static npos = 18446744073709551615, cstr_ = 0x0, len_ = 0}
        annotations = ""
        output = &lt;incomplete type&gt;
        filenames = std::vector of length 0, capacity 0
&lt;/denchmark-code&gt;

please note that i already sent a request to assign a CVE for it.
	</description>
	<comments>
		<comment id='1' author='alaamub' date='2015-08-01T06:46:56Z'>
		thanks for the report, it can be reproduced as simple as:
&lt;denchmark-code&gt;cv::String s = ""; //empty
size_t pos = s.find_last_of("x");
&lt;/denchmark-code&gt;

there seems to be a check for len_==0 missing here:
&lt;denchmark-link:https://github.com/Itseez/opencv/blob/master/modules/core/include/opencv2/core/cvstd.hpp#L938&gt;https://github.com/Itseez/opencv/blob/master/modules/core/include/opencv2/core/cvstd.hpp#L938&lt;/denchmark-link&gt;
  / #L913
		</comment>
		<comment id='2' author='alaamub' date='2015-08-01T20:04:05Z'>
		As I am the author of the tool, is there any way that I could adapt the tool so that it doesn't suffer from this problem anymore? Then I can include it in the next update.
		</comment>
		<comment id='3' author='alaamub' date='2015-08-02T06:15:22Z'>
		Hi, the fix is simple, before using the pointer, ensure that it is not equal to NULL here,
&lt;denchmark-link:https://github.com/Itseez/opencv/blob/master/modules/core/include/opencv2/core/cvstd.hpp#L942&gt;https://github.com/Itseez/opencv/blob/master/modules/core/include/opencv2/core/cvstd.hpp#L942&lt;/denchmark-link&gt;

also as &lt;denchmark-link:https://github.com/berak&gt;@berak&lt;/denchmark-link&gt;
 said, you need to check for len_==0 which is missing here:
&lt;denchmark-link:https://github.com/Itseez/opencv/blob/master/modules/core/include/opencv2/core/cvstd.hpp#L938&gt;https://github.com/Itseez/opencv/blob/master/modules/core/include/opencv2/core/cvstd.hpp#L938&lt;/denchmark-link&gt;
 / #L913
		</comment>
		<comment id='4' author='alaamub' date='2015-08-02T19:17:54Z'>
		Ow okay, then the fix is not directly inside the tool itself, but rather in functions it uses. Could you open up a PR with the fix?
		</comment>
		<comment id='5' author='alaamub' date='2015-08-02T22:18:27Z'>
		Reply from CVE assignment team:
We do not agree that this is, in general, a NULL pointer dereference
issue. The mistake that exists directly in the referenced source code
is an attempt to assign the value of -1 to an unsigned integer (pos).
This causes pos to have a huge positive value. Then, "i = cstr_ + pos"
causes i to be an invalid pointer, and *i is an invalid pointer
dereference that causes a crash.
However, the original problem might be elsewhere in the
opencv_annotation source code. You are reporting that the value of
cstr_ is 0x0. In that situation, find_last_of should not have been
called at all, regardless of whether find_last_of was correctly
implemented. If cstr_ is 0x0, find_last_of would typically be
searching in memory locations that have small positive values (e.g.,
memory location 1), and this is obviously not useful. The original
problem that you discovered may be a cv::String object that
unintentionally was constructed with 0x0 as both the len_ value and
the cstr_ value.
The "berak" example of:
cv::String s = ""; //empty
may help to illustrate the source-code problem; however, it is unclear
whether any possible use of the opencv_annotation program would result
in a cv::String object where cstr_ was nonzero but len_ was zero.
Thus, we can divide this into two cases, A and B.
A. Your discovery is a chain of issues in which:

cstr_ is, for an unknown reason, equal to 0x0 but find_last_of is
called anyway
because len_ is also 0x0, there is an incorrect attempt to associate -1
with an unsigned data type
this later leads to an invalid pointer dereference

Use CVE-2015-5710 to refer to the vulnerability defined by this chain
of issues.
B. The "berak" discovery shows a source-code error, but it is not
known whether this error is reachable during use of the
opencv_annotation program. Thus, the "berak" discovery does not
currently have a CVE ID. If there is future research that
identifies a call to find_last_of in which len_ is 0x0 but cstr_ is
not 0x0, then that case could have a different CVE ID.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

CVE assignment team
		</comment>
		<comment id='6' author='alaamub' date='2015-08-03T07:35:19Z'>
		once the String::find_last_of issue gets fixed, glob() tries to get smart, if given an empty folder string, and tries to search the current dir (".") . it would still need a default for the txtfile.
&lt;denchmark-link:https://github.com/StevenPuttemans&gt;@StevenPuttemans&lt;/denchmark-link&gt;
 , maybe you could use the CmdLineParser:
&lt;denchmark-link:https://gist.github.com/berak/53d1c0f1c67074168789&gt;https://gist.github.com/berak/53d1c0f1c67074168789&lt;/denchmark-link&gt;

drawback is the different syntax: annotate --images=some/path/ --annotation=my.txt  (which is not very intuitive) , but at least this makes sure there's a valid folder and a sensible default for the textfile (also it won't get fooled by dummy params like in the issue above)
last, but not least, it might need checking the imread() output (there might be non-images in the path)
		</comment>
		<comment id='7' author='alaamub' date='2015-08-03T15:14:52Z'>
		&lt;denchmark-link:https://github.com/alaamub&gt;@alaamub&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/berak&gt;@berak&lt;/denchmark-link&gt;

if I understand it correctly, the only time stuff like this is happening is when people supply wrong parameters? How does train_cascade or create_samples cope with that then? Because that seems to be identical.
For me, if this is pure the case of people needing to pay attention, then I am not really up to changing the complete interface. The syntax is now straightforward and identical for all tools.
As for
--&gt; checking the input, seems fair and reasonable
--&gt; checking if the path actually exists on the system can be done also
Will apply those fixes asap!
		</comment>
		<comment id='8' author='alaamub' date='2015-08-03T18:14:24Z'>
		As i mentioned in the post earlier, two issues need to be tackled here,

cstr_ is, for an unknown reason, equal to 0x0 but find_last_of is called anyway (you may need to fix this)
because len_ is also 0x0, there is an incorrect attempt to associate -1 with an unsigned data type (making len_ 0x0 makes the unsigned "pos" negative and that leads to the crash and this is something you need to fix) so check for the length first to avoid "pos" to be negative. and then check to see why cstr_ for an unknown reason is equal to 0x0. you can also implement the two things you mentioned (checking the input, checking if the path actually exists). thanks

		</comment>
		<comment id='9' author='alaamub' date='2015-08-04T12:05:34Z'>
		Like you can see, I added checks for a correct input image read, the existance of the folder and the fact that the output stream is actually created or not. This for both 2.4 and master branch!
		</comment>
		<comment id='10' author='alaamub' date='2015-08-04T17:23:54Z'>
		this should make it to work, once you release it i will test it again . thanks
		</comment>
		<comment id='11' author='alaamub' date='2015-08-05T06:45:07Z'>
		All bugfixes seem processed, lets wait and see if it gets merged now :)
		</comment>
		<comment id='12' author='alaamub' date='2015-08-10T07:53:04Z'>
		Both fixes were merged, so this can be closed down.
		</comment>
		<comment id='13' author='alaamub' date='2015-08-10T17:04:36Z'>
		Thanks.
		</comment>
	</comments>
</bug>