<bug id='11544' author='petercheng00' open_date='2018-05-18T18:55:45Z' closed_time='2018-06-04T19:31:18Z'>
	<summary>calcHist produces incorrect results with IPP</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4.1
Operating System / Platform =&gt; Ubuntu 18.04 64 Bit
Compiler =&gt; gcc 7.3.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

cv::calcHist produces incorrect results for certain inputs, if the input images are CV_8U or CV_16U, and if IPP is enabled. The below code snippet reliably reveals the problem, which goes away if image type is changed to float, or if IPP is disabled. From testing other images, it appears as if each bucket index is incorrectly shifted up by one. In the example below, the max_val values are not that important, I found values 990-999 to produce incorrect results, while 1000 produces the correct result.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

    // Regardless of max value, the image is all zeros, so the histogram
    // should have all entries in the first bucket.
    for (float max_val : { 999, 1000 })
    {
        cv::Mat1w m = cv::Mat1w::zeros(10, 10);
        int n_images = 1;
        int channels[] = { 0 };
        cv::Mat mask;
        cv::MatND hist;
        int dims = 1;
        int hist_size[] = { 1000 };
        float range[] = { 0, max_val };
        const float* ranges[] = { range };
        cv::calcHist(&amp;m, n_images, channels, mask, hist, dims, hist_size, ranges);
        for (int i = 0; i &lt; 5; ++i)
        {
            printf("%d: %f\n", i, hist.at&lt;float&gt;(0, i));
        }
    }
Running this, the expected output should be the same for both max_val values, where all 100 elements are in the first bucket. However, with IPP enabled, I get the following:
&lt;denchmark-code&gt;0: 0.000000
1: 100.000000
2: 0.000000
3: 0.000000
4: 0.000000
0: 100.000000
1: 0.000000
2: 0.000000
3: 0.000000
4: 0.000000
&lt;/denchmark-code&gt;

Without IPP, result is as expected:
&lt;denchmark-code&gt;0: 100.000000
1: 0.000000
2: 0.000000
3: 0.000000
4: 0.000000
0: 100.000000
1: 0.000000
2: 0.000000
3: 0.000000
4: 0.000000
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='petercheng00' date='2018-05-31T16:50:19Z'>
		/cc &lt;denchmark-link:https://github.com/lupustr3&gt;@lupustr3&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='petercheng00' date='2018-06-08T09:42:40Z'>
		Hi, thanks for reporting.
Looks like there are two problems:

Integration is not correct: number of levels for IPP function should be specified as range_max-range_min. But this will not solve the problem since:
IPP and OpenCV distribute values differently across histogram bins. If size of histogram is bigger than size of range, then IPP distributes values in the beginning of the histogram, while OpenCV distributes them evenly across histogram bins with gaps in between.

I don't know the reason behind this difference. We will need to investigate if IPP can use OpenCV approach with existing API. In the mean time &lt;denchmark-link:https://github.com/opencv/opencv/pull/11608&gt;#11608&lt;/denchmark-link&gt;
 should do the job.
		</comment>
	</comments>
</bug>