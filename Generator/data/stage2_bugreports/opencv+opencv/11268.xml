<bug id='11268' author='berak' open_date='2018-04-08T12:00:43Z' closed_time='2020-05-31T20:18:49Z'>
	<summary>Mixed raw pointers and Ptr&amp;lt;&amp;gt; in features2d java wrappers</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4.1-dev (master)
Operating System / Platform =&gt; Windows 64 Bit
Compiler =&gt; ming64

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

both FlannBasedMatcher and BFMatcher have a public constructor and a create() method, the 1st constructs a  new FlannBasedMatcher , the 2nd a new Ptr&lt;Ptr&lt;FlannbasedMatcher&gt;&gt;.
since the internal wrapper code expects the latter, using an instance created from a constructor will segfault
when being deferenced like this:
&lt;denchmark-code&gt;  Ptr&lt;cv::DescriptorMatcher&gt;* me = (Ptr&lt;cv::DescriptorMatcher&gt;*) self; 
&lt;/denchmark-code&gt;

a similar problem occurs in the BOWKMeansTrainer  class, which can only be invoked from a constructor, but the internal code uses dereferenced Ptr
java example code:
&lt;denchmark-code&gt;FlannbasedMatcher matcher = new FlannbasedMatcher();
matcher.match(descriptor1, descriptor2, matches); // segfaults

BOWKMeansTrainer trainer = new BOWKMeansTrainer(100);
Mat vocab = trainer.cluster(descriptors); // segfaults
&lt;/denchmark-code&gt;

generated jni code:
&lt;denchmark-code&gt;JNIEXPORT jlong JNICALL Java_org_opencv_features2d_FlannBasedMatcher_FlannBasedMatcher_10
  (JNIEnv* env, jclass )
{
    static const char method_name[] = "features2d::FlannBasedMatcher_10()";
    try {
        LOGD("%s", method_name);
        
        cv::FlannBasedMatcher* _retval_ = new cv::FlannBasedMatcher( makePtr&lt;flann::KDTreeIndexParams&gt;(), makePtr&lt;flann::SearchParams&gt;() );
        return (jlong) _retval_;
    } catch(const std::exception &amp;e) {
        throwJavaException(env, &amp;e, method_name);
    } catch (...) {
        throwJavaException(env, 0, method_name);
    }
    return 0;
}

JNIEXPORT void JNICALL Java_org_opencv_features2d_DescriptorMatcher_knnMatch_11
  (JNIEnv* env, jclass , jlong self, jlong queryDescriptors_nativeObj, jlong trainDescriptors_nativeObj, jlong matches_mat_nativeObj, jint k)
{
    static const char method_name[] = "features2d::knnMatch_11()";
    try {
        LOGD("%s", method_name);
        std::vector&lt; std::vector&lt;DMatch&gt; &gt; matches;
        Mat&amp; matches_mat = *((Mat*)matches_mat_nativeObj);
        Ptr&lt;cv::DescriptorMatcher&gt;* me = (Ptr&lt;cv::DescriptorMatcher&gt;*) self; //TODO: check for NULL
        Mat&amp; queryDescriptors = *((Mat*)queryDescriptors_nativeObj);
        Mat&amp; trainDescriptors = *((Mat*)trainDescriptors_nativeObj);
        (*me)-&gt;knnMatch( queryDescriptors, trainDescriptors, matches, (int)k );
        vector_vector_DMatch_to_Mat( matches, matches_mat );
        return;
    } catch(const std::exception &amp;e) {
        throwJavaException(env, &amp;e, method_name);
    } catch (...) {
        throwJavaException(env, 0, method_name);
    }
    return;
}

&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>