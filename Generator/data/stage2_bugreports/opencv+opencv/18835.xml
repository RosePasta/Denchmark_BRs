<bug id='18835' author='EmperorArthur' open_date='2020-11-17T15:01:13Z' closed_time='2020-12-18T22:30:33Z'>
	<summary>cPython Binding Not Setting Error in cv2.dnn.readNetFromDarknet</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; opencv-python-headless 4.4.0.46
Operating System / Platform =&gt; Ubuntu Linux, x64

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Different from &lt;denchmark-link:https://github.com/opencv/opencv/issues/18821&gt;#18821&lt;/denchmark-link&gt;
 in cause, though the result is the same.  In this case, the error I am causing is because the Python binding can not handle pathlib paths.
The real problem is that the C++ binding to Python does not properly set the error when "CV_Error" is caught.
I suspect the call stack looks like:

Some python binding. Issue may be here



opencv/modules/dnn/src/darknet/darknet_importer.cpp


         Line 184
      in
      b866d0d






 static Net readNetFromDarknet(std::istream &amp;cfgFile, std::istream &amp;darknetModel) 








opencv/modules/dnn/src/darknet/darknet_importer.cpp


         Line 70
      in
      b866d0d






 DarknetImporter(std::istream &amp;cfgStream, std::istream &amp;darknetModelStream) 








opencv/modules/dnn/src/darknet/darknet_io.cpp


         Line 1001
      in
      b866d0d






 void ReadNetParamsFromCfgStreamOrDie(std::istream &amp;ifile, darknet::NetParameter *net) 





Wherever CV_Error lives

&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;


Git clone darknet to a directory via git clone https://github.com/pjreddie/darknet.git
Download YOLO weights from 'https://pjreddie.com/media/files/yolov3.weights'
Run: pip install opencv-python-headless or pip install opencv-python

import cv2
from pathlib import Path
darknet_path = Path('&lt;path to darknet src&gt;')
yolo_cfg_path = darknet_path.joinpath('cfg/yolov3.cfg')
yolo_weights_path = Path('&lt;path to downloaded weights&gt;')
net = cv2.dnn.readNetFromDarknet(yolo_cfg_path, yolo_weights_path)
Should result in:

Traceback (most recent call last):
File "", line 1, in 
SystemError:  returned NULL without setting an error

&lt;denchmark-h:h5&gt;Issue submission checklist&lt;/denchmark-h&gt;


 I report the issue, it's not a question
 I checked the problem with documentation, FAQ, open issues,
answers.opencv.org, Stack Overflow, etc and have not found solution


 I updated to latest OpenCV version and the issue is still there


 There is reproducer code and related data files: videos, images, onnx, etc



	</description>
	<comments>
		<comment id='1' author='EmperorArthur' date='2020-11-17T15:21:29Z'>
		Path is not supported by bindings. Also it will not be automatically converted to strings (due to error prone handling).
Workaround:

yolo_cfg_path, yolo_weights_path

str(yolo_cfg_path), str(yolo_weights_path)
		</comment>
		<comment id='2' author='EmperorArthur' date='2020-11-17T16:35:55Z'>
		What about cv.dnn.readNet(yolo_cfg_path, yolo_weights_path)?
		</comment>
		<comment id='3' author='EmperorArthur' date='2020-11-17T17:04:53Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 It is python bindings bug.
Minimal reproducer:
&lt;denchmark-code&gt;path = Path('.')
print(cv.utils.dumpCString(path))
print(cv.utils.dumpString(path))
print(cv.utils.dumpStdString(path))
&lt;/denchmark-code&gt;

Related code in header (core/bindings_utils.hpp)
&lt;denchmark-code&gt;CV_WRAP static inline
String dumpCString(const char* argument)
{
    return cv::format("String: %s", argument);
}

CV_WRAP static inline
String dumpString(const String&amp; argument)
{
    return cv::format("String: %s", argument.c_str());
}

CV_WRAP static inline
String dumpStdString(const std::string&amp; argument)
{
    return cv::format("String: %s", argument.c_str());
}
&lt;/denchmark-code&gt;

Results:
&lt;denchmark-code&gt;TypeError: dumpCString() argument 1 must be str, not PosixPath

SystemError: &lt;built-in function dumpString&gt; returned NULL without setting an error

SystemError: &lt;built-in function dumpStdString&gt; returned NULL without setting an error
&lt;/denchmark-code&gt;

BTW, OPENCV_PYTHON_DEBUG=1 doesn't emit extra details.
		</comment>
		<comment id='4' author='EmperorArthur' date='2020-11-18T20:39:54Z'>
		Yes.  I just am not familiar enough with the code to know how those bindings are generated.
It's even more annoying than just path issues though.  The C++ readNetFromDarknet code supports buffers, but the python binding does not.  Or at the least it does not return an error.
So, it's impossible to modify a configuration file without writing it out.
		</comment>
		<comment id='5' author='EmperorArthur' date='2020-11-19T07:44:38Z'>
		
The C++ readNetFromDarknet code supports buffers, but the python binding does not.

Please take a look on generated Python binding code - there are 2 overloads processed (pyopencv_generated_funcs.h):

static PyObject* pyopencv_cv_dnn_readNetFromDarknet(PyObject* , PyObject* py_args, PyObject* kw)
{
    using namespace cv::dnn;

    {
    PyObject* pyobj_cfgFile = NULL;
    String cfgFile;
    PyObject* pyobj_darknetModel = NULL;
    String darknetModel;
    Net retval;

    const char* keywords[] = { "cfgFile", "darknetModel", NULL };
    if( PyArg_ParseTupleAndKeywords(py_args, kw, "O|O:readNetFromDarknet", (char**)keywords, &amp;pyobj_cfgFile, &amp;pyobj_darknetModel) &amp;&amp;
        pyopencv_to(pyobj_cfgFile, cfgFile, ArgInfo("cfgFile", 0)) &amp;&amp;
        pyopencv_to(pyobj_darknetModel, darknetModel, ArgInfo("darknetModel", 0)) )
    {
        ERRWRAP2(retval = cv::dnn::readNetFromDarknet(cfgFile, darknetModel));
        return pyopencv_from(retval);
    }
    }
    PyErr_Clear();

    {
    PyObject* pyobj_bufferCfg = NULL;
    vector_uchar bufferCfg;
    PyObject* pyobj_bufferModel = NULL;
    vector_uchar bufferModel=std::vector&lt;uchar&gt;();
    Net retval;

    const char* keywords[] = { "bufferCfg", "bufferModel", NULL };
    if( PyArg_ParseTupleAndKeywords(py_args, kw, "O|O:readNetFromDarknet", (char**)keywords, &amp;pyobj_bufferCfg, &amp;pyobj_bufferModel) &amp;&amp;
        pyopencv_to(pyobj_bufferCfg, bufferCfg, ArgInfo("bufferCfg", 0)) &amp;&amp;
        pyopencv_to(pyobj_bufferModel, bufferModel, ArgInfo("bufferModel", 0)) )
    {
        ERRWRAP2(retval = cv::dnn::readNetFromDarknet(bufferCfg, bufferModel));
        return pyopencv_from(retval);
    }
    }

    return NULL;
}


The second one with std::vector&lt;uchar&gt;() is for in-memory buffers.
You just need to pass arguments of the correct type. Use bytes / bytearray / etc for that.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

These binding bugs are related to "error"-case handling.
Fixing them can't help to run mentioned code, because code itself contains errors / unsupported cases and should be corrected.
		</comment>
		<comment id='6' author='EmperorArthur' date='2020-11-20T15:08:08Z'>
		I really appreciate your quick response.

You just need to pass arguments of the correct type. Use bytes / bytearray / etc for that.

Thank you!  That's a simple thing that I should have tried, but got sidetracked.
On another note, thank you so much for putting that code in there.  I am not familiar with the build process and since it was generated, could not find the file in searching the repository.
It looks like the quick fix is for the generator to end with:
&lt;denchmark-code&gt;PyErr_SetString(PyExc_TypeError, "No Matching C++ function found for the types provided.");
return NULL;
&lt;/denchmark-code&gt;

That's not the most helpful error message, but is probably the easiest to implement.  Another solution would be to re-work the generator so it creates custom error messages based on the allowed types, but I see how it runs through one function prototype, then goes on to the next one.

These binding bugs are related to "error"-case handling.

Yep.  The code submitted was deliberately invalid to trigger the error case.  I never expected it to work, just for the bindings to give a type error.  It would be neat if the bindings automatically handled more types, but that's a feature request, not a bug fix.
		</comment>
	</comments>
</bug>