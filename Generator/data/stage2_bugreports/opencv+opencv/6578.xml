<bug id='6578' author='berak' open_date='2016-05-24T07:55:17Z' closed_time='2016-07-12T11:39:18Z'>
	<summary>hconcat/vconcat throw Exception with UMat</summary>
	<description>
&lt;denchmark-h:h3&gt;Please state the information for your system&lt;/denchmark-h&gt;


OpenCV version: 3.1.0 (master)
Host OS: Windows 10
MingW64

&lt;denchmark-h:h3&gt;In which part of the OpenCV library you got the issue?&lt;/denchmark-h&gt;


core / tapi / ocl

&lt;denchmark-h:h3&gt;Code example to reproduce the issue / Steps to reproduce the issue&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;#include "opencv2/opencv.hpp"
#include "opencv2/core/ocl.hpp"
using namespace cv;

#include &lt;iostream&gt;
using namespace std;

int main(int argc, char **argv)
{
    bool useOCL = (argc&gt;1 &amp;&amp; argv[1][0]=='1');
    ocl::setUseOpenCL(useOCL);
    cout &lt;&lt; "useOCL "  &lt;&lt;  cv::ocl::useOpenCL() &lt;&lt; endl;
    UMat small(64,64,CV_32F);
    randu(small,0,1);
    UMat large = small.clone();
    for (int i=0; i&lt;100; i++)
    {
        cerr &lt;&lt; i &lt;&lt; " " &lt;&lt; large.size() &lt;&lt; endl;
        // vconcat(large,small,large); // same problem
        hconcat(large,small,large);
    }
    return 0;
}
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Output:&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;
C:\p\ocv\demo&gt;demo 0
useOCL 0
0 [64 x 64]
OpenCV Error: Assertion failed (u-&gt;refcount == 0) in deallocate, file C:\p\opencv\modules\core\src\matrix.cpp, line 212
terminate called after throwing an instance of 'cv::Exception'
  what():  C:\p\opencv\modules\core\src\matrix.cpp:212: error: (-215) u-&gt;refcount == 0 in function deallocate


This application has requested the Runtime to terminate it in an unusual way.
Please contact the application's support team for more information.

C:\p\ocv\demo&gt;demo 1
useOCL 1
0 [64 x 64]
OpenCV Error: Assertion failed (u-&gt;refcount == 0 &amp;&amp; "UMat deallocation error: some derived Mat is still alive") in deallocate, file C:\p\opencv\modules\core\src\ocl.cpp, line 4516
terminate called after throwing an instance of 'cv::Exception'
  what():  C:\p\opencv\modules\core\src\ocl.cpp:4516: error: (-215) u-&gt;refcount == 0 &amp;&amp; "UMat deallocation error: some derived Mat is still alive" in function deallocate

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='berak' date='2016-05-25T01:01:51Z'>
		I think that this is not OpenCV's issue.
&lt;denchmark-link:http://docs.opencv.org/master/d2/de8/group__core__array.html#gaab5ceee39e0580f879df645a872c6bf7&gt;cv::hconcat&lt;/denchmark-link&gt;
 concatenates given matrices.
And, there is the following description in documentation.

dst output array. It has the same number of rows and depth as the src1 and src2, and the sum of cols of the src1 and src2.

So, I think that you should set (src1.cols+src2.cols) as dst.rows in this case.
&lt;denchmark-h:h2&gt;fixed code&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;#include "opencv2/opencv.hpp"
#include "opencv2/core/ocl.hpp"
using namespace cv;

#include &lt;iostream&gt;
using namespace std;

int main(int argc, char **argv)
{
    bool useOCL = (argc&gt;1 &amp;&amp; argv[1][0]=='1');
    ocl::setUseOpenCL(useOCL);
    cout &lt;&lt; "useOCL "  &lt;&lt;  cv::ocl::useOpenCL() &lt;&lt; endl;

    UMat small1(64, 64, CV_32F);
    UMat small2(64, 64, CV_32F);
    UMat large(small1.rows, (small1.cols+small2.cols), CV_32F);

    randu(small1, 0, 1);
    randu(small2, 0, 1);

    for (int i=0; i&lt;100; i++)
    {
        cerr &lt;&lt; i &lt;&lt; " " &lt;&lt; large.size() &lt;&lt; endl;
        hconcat(small1, small2, large);
    }
    return 0;
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='berak' date='2016-05-25T01:22:16Z'>
		
hconcat(large,small,large);

Could you try this code?
&lt;denchmark-code&gt;UMat large_next;
hconcat(large,small,large_next);
large = large_next;
&lt;/denchmark-code&gt;

Also I suggest to pre-allocate large matrix and fill it via small.copyTo(large(roi_rect)) calls.
Also you can take a look on cv::repeat function.
		</comment>
		<comment id='3' author='berak' date='2016-05-25T05:36:25Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 ,

Could you try this code?
UMat large_next;
hconcat(large,small,large_next);
large = large_next;


yes, that works..

Also I suggest to pre-allocate large matrix and fill it ...

yes, that's what i'm doing now.
&lt;denchmark-link:https://github.com/atinfinity&gt;@atinfinity&lt;/denchmark-link&gt;
 , so, basically, you're saying, one has to pre-allocate the result for hconcat/vconcat ?
there are (plain Mat) examples, where it is not done, e.g. &lt;denchmark-link:https://github.com/Itseez/opencv/blob/1307bb1d033af3baeb55afb63c3989d3d6791c80/modules/ml/src/svmsgd.cpp#L161&gt;here&lt;/denchmark-link&gt;
 or &lt;denchmark-link:https://github.com/Itseez/opencv/blob/2f4e38c8313ff313de7c41141d56d945d91f47cf/modules/core/test/test_concatenation.cpp#L101&gt;here&lt;/denchmark-link&gt;

(also, my example works perfectly with "normal" Mat's)
		</comment>
		<comment id='4' author='berak' date='2016-05-25T07:24:25Z'>
		
yes, that works

Thanks for the check!
Looks like there is missing check/processing for "inplace" (dst is the same as one of src parameter) operations in case of UMat.
		</comment>
		<comment id='5' author='berak' date='2016-05-25T09:44:37Z'>
		&lt;denchmark-link:http://docs.opencv.org/master/d2/de8/group__core__array.html#ga303cfb72acf8cbb36d884650c09a3a97&gt;compare&lt;/denchmark-link&gt;
 has a similar problem, when src and dst are the same UMat
		</comment>
		<comment id='6' author='berak' date='2016-07-12T10:15:09Z'>
		I think that this behavior is correct and we are not able to fix it in mean time. What happens in the original piece of code? You have the same UMat for input and output operation, but the output array must be recreated in this case (since it has improper size; the same for compare since output should have CV_8U depth). So, inside the vconcat function we have plain CPU processing which operates with Mats and we should convert UMat into Mat:

"Convert" first input argument from UMat into Mat. This conversion means that parent UMat produces children Mat object and the last one must be destroyed when vconcat function exists. NOTE: parent object life time &gt; child object life time.
The same for second argument.
The same for the 3rd argument. BUT: we should recreate output image before. But, we have already produced child object for this UMat and exception says about it when we are trying to deallocate UMat:

&lt;denchmark-code&gt;(-215) u-&gt;refcount == 0 &amp;&amp; "UMat deallocation error: some derived Mat is still alive" in function deallocate
&lt;/denchmark-code&gt;

I think we should recommend not to use UMat for inplace operations.
		</comment>
		<comment id='7' author='berak' date='2016-07-12T11:39:18Z'>
		thanks a lot for all of your explanations !

I think we should recommend not to use UMat for inplace operations.

nice and simple lesson.
		</comment>
	</comments>
</bug>