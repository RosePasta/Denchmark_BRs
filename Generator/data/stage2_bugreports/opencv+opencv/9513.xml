<bug id='9513' author='JDFind' open_date='2017-08-30T05:48:41Z' closed_time='2019-05-04T14:19:52Z'>
	<summary>Building for Android not working with Ninja</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.3.0
Operating System / Platform =&gt; Windows 10 64 Bit
Compiler =&gt; Ninja 1.7.2
Cmake 3.9.1

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Recently I attempted to build OpenCV from sources on a Windows 10 machine, using the Ninja compiler and a modified android.toolchain.cmake (because of &lt;denchmark-link:https://github.com/opencv/opencv/issues/9512&gt;#9512&lt;/denchmark-link&gt;
).
Building with Ninja fails for  because a  for the same reason as &lt;denchmark-link:https://github.com/opencv/opencv/issues/7600&gt;#7600&lt;/denchmark-link&gt;

It seems that there is a "hack" in the android.toolchain.cmake file that forces CMAKE_COMPILER_IS_MINGW to be true:
if( CMAKE_GENERATOR MATCHES "Ninja" AND CMAKE_HOST_WIN32 )
 # it is a bad hack after all
 # CMake generates Ninja makefiles with UNIX paths only if it thinks that we are going to build with MinGW
 set( CMAKE_COMPILER_IS_MINGW TRUE ) # tell CMake that we are MinGW
 set( CMAKE_CROSSCOMPILING TRUE )    # stop recursion
 # unset( CMAKE_COMPILER_IS_MINGW ) # can't unset because CMake does not convert back-slashes in response files without it
 unset( MINGW )
endif()
This causes an issue with identifying the compiler in OpenCVDetectCXXCompiler.cmake, setting  X86_64 instead of AARCH64, even though CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64.*|AARCH64.*)" would have been true. As a result, USING_NEON is not enabled either.
I think a solution might be to remove the "hack" entirely, as it was unnecessary on the system described, or to change the order of the if-else statements in OpenCVDetectCXXCompiler.cmake.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Running
&lt;denchmark-code&gt;cmake -D CMAKE_BUILD_TYPE=Release \
	-D CMAKE_BUILD_WITH_INSTALL_RPATH=ON \
	-D CMAKE_INSTALL_PREFIX="install/opencv" \
        -D CMAKE_TOOLCHAIN_FILE="opencv/platforms/android/cmake/android.toolchain.cmake" \
        -D ANDROID_NDK="${ANDROID_NDK_ROOT}" \
        -D ANDROID_NATIVE_API_LEVEL=21 \
        -D ANDROID_ABI=arm64-v8a \
        -D WITH_CUDA=OFF \
        -D WITH_MATLAB=OFF \
        -D BUILD_ANDROID_EXAMPLES=OFF \
        -D BUILD_DOCS=OFF \
        -D BUILD_PERF_TESTS=OFF \
        -D BUILD_TESTS=OFF \
	-D BUILD_EXAMPLES=OFF \
	-D BUILD_SHARED_LIBS=OFF \
	-G Ninja \
	-D CMAKE_MAKE_PROGRAM=${NINJA_LOCATION}
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='JDFind' date='2017-08-30T10:28:12Z'>
		
to remove the "hack" entirely, as it was unnecessary on the system described

Agreed.
Could you validate hack removal (with enable_language() calls) on your configuration and create Pull Request?
		</comment>
		<comment id='2' author='JDFind' date='2019-05-04T14:19:52Z'>
		Current Android builds on CI works well (using Ninja).
		</comment>
	</comments>
</bug>