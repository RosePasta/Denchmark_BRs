<bug id='4860' author='opencv-pushbot' open_date='2015-07-27T10:51:51Z' closed_time='2015-12-03T09:36:57Z'>
	<summary>NativeCamera still does not work on LG G2</summary>
	<description>
Transferred from &lt;denchmark-link:http://code.opencv.org/issues/3995&gt;http://code.opencv.org/issues/3995&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;|| Martin Tosas on 2014-11-04 14:09
|| Priority: Normal
|| Affected: 2.4.9 (latest release)
|| Category: android
|| Tracker: Bug
|| Difficulty: 
|| PR: 
|| Platform: ARM / Android
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;NativeCamera still does not work on LG G2&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;This is the same device as bug#3353. I'm not sure if it's better to update the old bug so I have filed a new one.

I was looking forward to try the NativeCamera in my LG G2 but still crashes the same way as in bug#3353. 

I updated my OS to Android 4.4.2 (in bug#3353 it was Android 4.2.2) and I tried to run Tutorial 1 sample both with OpenCV-2.4.9-android-sdk and OpenCV-2.4.10-android-sdk. In both cases JavaCamera works but when I switch to NativeCamera it crashes. Logcat shows:

A/libc(9115): Fatal signal 11 (SIGSEGV) at 0x00000000 (code=1), thread 9115 (mples.tutorial1)

I attach the logcat:
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;History&lt;/denchmark-h&gt;

&lt;denchmark-h:h5&gt;Leon Schneiderman on 2014-11-17 19:44&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Hi,

I shared the following findings with OpenCV folks about 2 months ago. The gist of the matter is that pretty much any Qualcomm's Snapdragon based device (which is a mammoth chunk of phones at the moment) is going to experience this type of crash. More details:

Crash happened when executing the following snippet from OpenCV's androidcamera module in camera_wrapper.cpp

# elif defined(ANDROID_r4_4_0)
    void* buffer_queue_obj = operator new(sizeof(BufferQueue) + MAGIC_TAIL);
    handler-&gt;queue = new(buffer_queue_obj) BufferQueue();
    void* consumer_listener_obj = operator new(sizeof(ConsumerListenerStub) + MAGIC_TAIL);
    handler-&gt;listener = new(consumer_listener_obj) ConsumerListenerStub();
    handler-&gt;queue-&gt;consumerConnect(handler-&gt;listener, true);

While an attempt is made to call consumerConnect, instead releaseBuffer is called with bogus things on the stack which causes releaseBuffer to crash.

It is caused by mismatched BufferQueue class between what is OpenCV is compiled against and what is present in Snapdragon based Qualcomm sw.

In particular, Qualcomm introduced a virtual method 
virtual status_t setBuffersSize(int size);

This part is in open source (code aurora)
https://www.codeaurora.org/cgit/quic/la/platform/frameworks/native/tree/include/gui/BufferQueue.h?h=LNX.LA.2.7.3

Note, that "pure" Android source doesn't have this method
https://android.googlesource.com/platform/frameworks/native/+/android-4.4.4_r1.0.1/include/gui/BufferQueue.h

Anyway, if native camera is still to be supported this should be fixed. Unfortunately, I don't have enough time / resources to contribute a "proper" fix for that at the moment. I have a work-around for my project, where I just recompiled libnative_camera* lib of interest to me against against Qualcomm based platform. However, a "proper" solution could include both "pure" Android and "Qualcomm" Android versions of the library and load appropriate ones.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='opencv-pushbot' date='2015-11-24T21:23:58Z'>
		snapdragon is used widely, and this bug still not fixed.....
		</comment>
		<comment id='2' author='opencv-pushbot' date='2015-12-03T09:36:57Z'>
		Native android camera is not supported anymore, legacy libraries are still provided with OpenCVManager, but they will not be updated (and there are no versions for new architectures). Please consider using Java camera interface instead.
		</comment>
	</comments>
</bug>