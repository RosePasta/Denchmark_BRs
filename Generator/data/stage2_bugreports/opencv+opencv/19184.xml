<bug id='19184' author='asmorkalov' open_date='2020-12-21T08:44:46Z' closed_time='2021-01-18T20:36:02Z'>
	<summary>Test ExposureCompensate.SimilarityThreshold fails on Windows 10 in master branch</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.5.1-pre (git 46e275d )
Operating System / Platform =&gt; Windows 10 x64
Compiler =&gt; Visual Studio 2019 Community Editon x64, Ninja

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;C:\Slave\workspace\nightly-master\windows10\opencv\modules\stitching\test\test_exposure_compensate.cpp:66
Expected: (psnr_similarity_mask) &gt; (300), actual: 38.0114 vs 300
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Issue submission checklist&lt;/denchmark-h&gt;


 I report the issue, it's not a question


 I checked the problem with documentation, FAQ, open issues,
answers.opencv.org, Stack Overflow, etc and have not found solution


 I updated to latest OpenCV version and the issue is still there


 There is reproducer code and related data files: videos, images, onnx, etc



	</description>
	<comments>
		<comment id='1' author='asmorkalov' date='2020-12-29T19:34:07Z'>
		The problem was reproduced also on Linux. The PSNR results are calculated twice, &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/stitching/test/test_exposure_compensate.cpp#L52&gt;the first value&lt;/denchmark-link&gt;
 is correct, &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/stitching/test/test_exposure_compensate.cpp#L65&gt;the second one&lt;/denchmark-link&gt;
 is the same, so it doesn't change in accordance with  value, thus we get unexpected behaviour:

It depends on OpenCL implementation. Test failures appear on Nvidia cards when OpenCL is used, in our case:

GeForce RTX 2070 SUPER, OpenCL 1.2 (Ubuntu)
GeForce RTX 2080, OpenCL 1.2 (Win)

Test passes with below configurations:

AMD Radeon RX 5700:


OpenCL 2.0, OpenCL 1.1
OpenCL 1.2 pocl 1.6-1
disabled OpenCL


GeForce RTX 2070 SUPER:


OpenCL 1.2 pocl 1.1-5
disabled OpenCL

		</comment>
		<comment id='2' author='asmorkalov' date='2021-01-13T18:16:59Z'>
		Running the test on Nvidia (1) OpenCL backend, the second test case with &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/stitching/test/test_exposure_compensate.cpp#L64&gt;similarity_threshold=0.1&lt;/denchmark-link&gt;
 returns the &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/stitching/test/test_exposure_compensate.cpp#L63&gt;same result&lt;/denchmark-link&gt;
 as &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/stitching/test/test_exposure_compensate.cpp#L51&gt;the first one&lt;/denchmark-link&gt;
 with &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/stitching/test/test_exposure_compensate.cpp#L41&gt;similarity_threshold=1&lt;/denchmark-link&gt;
:

However, changing backend to (2) OpenCL pocl or running the test on AMD Radeon RX 5700 (with enabled OpenCL) - we get expected test behaviour, different PSNR values.
A possible way of the above-described problem investigation was examination of the appropriate OCL kernels, checking the  value - whether it was changed or cached. However, no kernels for the methods from &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/stitching/src/exposure_compensate.cpp#L336&gt;exposure_compensate&lt;/denchmark-link&gt;
 (especially those where  is used - ) were revealed. Threshold value is correctly set inside  class:  field and used in &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/stitching/src/exposure_compensate.cpp#L343&gt;buildSimilarityMask(...)&lt;/denchmark-link&gt;
 method.
I've compared the execution sequence of the methods running the test on (1) and (2) - it was equivalent. Comparison of the  populated with &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/stitching/src/exposure_compensate.cpp#L336&gt;buildSimilarityMask&lt;/denchmark-link&gt;
 (the values depend on ) showed their equality in both cases, (1) and (2).
&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/vpisarev&gt;@vpisarev&lt;/denchmark-link&gt;
, could you, please, take a look at this issue. Maybe, there are some possible OpenCV-OCL pecularities that can lead to the &lt;denchmark-link:https://github.com/opencv/opencv/issues/19184#issuecomment-752216183&gt;described&lt;/denchmark-link&gt;
 above test behaviour?
		</comment>
		<comment id='3' author='asmorkalov' date='2021-01-17T07:22:48Z'>
		I faced this issues on following platforms

Failed

firefly-rk3399 (Mali-T860 OpenCL 1.2)
odroid-c4 (Mali-G31 OpenCL 2.0)
odroid-n2-plus (Mali-G52 OpenCL 2.0)
odroid-xu4 (Mali-T628 OpenCL 1.2)
tinkerboard (Mali-T760 OpenCL 1.2)
rock-pi-4c (Mali-T860 OpenCL 1.2)


Passes

jetson-nano
jetson-tx1
jetson-tx2
jetson-xavier
jetson-xavier-nx
le-potato
raspberry-pi-3
raspberry-pi-4


The platform that failed has an Arm Mali as a GPU and has an OpenCL capability.
The platform that passed doesn't have an OpenCL capability, so CPU version implementation will be kicked.  (Jetsons have nice GPUs, but they don't have OpenCL capability)
Also, on the failed platforms, if I set environmental variable OPENCV_OPENCL_DEVICES=disabled, then CPU version is kicked and the test passes.
Now, I narrowed down the behavior of the test, and the difference comes from here.




opencv/modules/stitching/src/exposure_compensate.cpp


         Line 157
      in
      63bb2ab






 bitwise_and(intersect, similarity, intersect); 






This bitwise_and function does nothing when OpenCL is enabled.
In another way, if I temporarily disable OpenCL just for this bitwise_and function, the test passes

&lt;denchmark-code&gt;+bool flag = cv::ocl::useOpenCL();
+cv::ocl::setUseOpenCL(false);
 bitwise_and(intersect, similarity, intersect);
+cv::ocl::setUseOpenCL(flag);
&lt;/denchmark-code&gt;


Test result

&lt;denchmark-code&gt;[       OK ] ExposureCompensate.SimilarityThreshold (93847 ms)
[----------] 1 test from ExposureCompensate (93848 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (93849 ms total)
[  PASSED  ] 1 test.
&lt;/denchmark-code&gt;


This passed similarity is UMat and intersect is Mat_&lt;uchar&gt; with size of 32x32 and they contain either 0 or 0xff
Though similarity sometime has 0, the and operation does nothing, and 0xff is kept.  That's where the behavior differs.
Additionally, I tried the same test in opencv_test_core by  kicking OCL_Arithm/Bitwise_and.Mat/0 (8UC1) and fixing the size as 32x32, but the test passed.  So, there's something under the hood which triggers this bitwise_and to do nothing.

		</comment>
		<comment id='4' author='asmorkalov' date='2021-01-17T07:40:51Z'>
		If OpenCL version implementation is kicked, I could trace down the call arrives &lt;denchmark-link:https://github.com/opencv/opencv/blob/63bb2abadab875fc648a572faccafee134f06fc8/modules/core/src/arithm.cpp#L265&gt;here&lt;/denchmark-link&gt;




opencv/modules/core/src/arithm.cpp


        Lines 264 to 265
      in
      63bb2ab






 CV_OCL_RUN(use_opencl, 



 ocl_binary_op(*psrc1, *psrc2, _dst, _mask, bitwise, oclop, haveScalar)) 






The opts passed to the OpenCL kernel here was

&lt;denchmark-code&gt;"-D BINARY_OP -D OP_AND -D DOUBLE_SUPPORT -D dstT=uchar16 -D DEPTH_dst=0 -D dstT_C1=uchar -D workST=uchar16 -D cn=16 -D rowsPerWI=1"
&lt;/denchmark-code&gt;


As I mentioned in the previous post, I modified the opencv_test_core to give same size of UMat in the test.  I could confirm that exactly same opts was passed to OpenCL kernel, and this time, opencv_test_core passes.
I suspected that this error only happens when certain opts was used, but it seems the condition is much more complicated.

		</comment>
		<comment id='5' author='asmorkalov' date='2021-01-17T13:10:03Z'>
		Also, this temporally fix &lt;denchmark-link:https://github.com/opencv/opencv/blob/63bb2abadab875fc648a572faccafee134f06fc8/modules/stitching/src/exposure_compensate.cpp#L157&gt;putting in here&lt;/denchmark-link&gt;
 worked.
&lt;denchmark-code&gt;- bitwise_and(intersect, similarity, intersect);
+ bitwise_and(intersect.clone(), similarity, intersect);
&lt;/denchmark-code&gt;

The combination is still not determined yet, but in this case, this binary operation takes Mat, UMat and written back to Mat.
The Mat are processed in-place and that seems one of the cause.
Now, making a copy every time here is kind of a dirty fix, and may be something should be fixed in memory management side.
		</comment>
		<comment id='6' author='asmorkalov' date='2021-01-17T15:54:28Z'>
		&lt;denchmark-link:https://github.com/tomoaki0705&gt;@tomoaki0705&lt;/denchmark-link&gt;
 Thank you for investigation!

bitwise_and(intersect, similarity, intersect);

OpenCL kernels for operations with "in-place" src/dst buffers should be implemented with another kernels code. This is a bug to be fixed in core module.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Workaround without .clone() (reduced performance impact):
&lt;denchmark-code&gt;Mat_&lt;uchar&gt; intersect_updated;
bitwise_and(intersect, similarity, intersect_updated);
std::swap(intersect, intersect_updated);
&lt;/denchmark-code&gt;

or
&lt;denchmark-code&gt;bitwise_and(intersect, similarity.getMat(ACCESS_READ), intersect);
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='asmorkalov' date='2021-01-17T21:25:32Z'>
		Thanks for the updated fix propose.
I hired the swap approach and created a PR.
The PR is for master, since this test doesn't exists in 3.4 branch
		</comment>
	</comments>
</bug>