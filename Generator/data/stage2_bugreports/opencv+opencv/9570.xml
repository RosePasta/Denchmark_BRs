<bug id='9570' author='azatsman' open_date='2017-09-06T14:29:13Z' closed_time='2017-10-11T15:22:19Z'>
	<summary>Mat::ptr not defined for more than 3 dimensions</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt;  3.3, git repository as of 9/6/17
Operating System / Platform =&gt; probably all, tested on Linux
Compiler =&gt; probably all C++ compilers, tested with g++ 5.4

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

There is no definition for the templated ptr method declared in core/mat.hpp:
template&lt;typename _Tp&gt; const _Tp* ptr(const int* idx) const;
The definition is missing in core/mat.inl.hpp (where it probably belongs), and the example code below generates linker's error:
mat4.cpp:(.text+0x113): undefined reference to float* cv::Mat::ptr(int const*)'`
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Try building an executable for this source code:
#include &lt;opencv2/core.hpp&gt;
int main (int argc, const char *argv[])
{
  int dims4[4] = {2,3,4,5}, idx4[4];
  cv::Mat_&lt;float&gt; m4 (4, dims4, 4.5);
  idx4      [3] = 0;
  for     (int w=0; w&lt;dims4[0]; w++) {
    idx4    [0] = w;
    for     (int z=0; z&lt;dims4[0]; z++) {
      idx4  [1] = z;
      for   (int y=0; y&lt;dims4[1]; y++) {
	idx4[2] = y;
	float* yline = m4.ptr&lt;float&gt;(idx4);
	for (int x=0; x&lt;dims4[2]; x++)
	  yline[x] = x+y+z;
      }
    }
  }
  return 0;
}
	</description>
	<comments>
		<comment id='1' author='azatsman' date='2017-09-06T14:45:05Z'>
		Thank you for the report!
IMHO, Passing pointers to buffers without size information is unsafe coding. These interfaces should be dropped due code safety requirements. Like this template and similar non-template methods (returning "uchar*").
Probably we should switch to "std::array" (C++11) for indexes ("std::vector" has huge overhead).
		</comment>
		<comment id='2' author='azatsman' date='2017-09-06T15:35:11Z'>
		My preference would be to have this method in  Mat_&lt;&gt; instead of Mat. Seems like it would be the most efficient way to iterate over multi-dimensional arrays. (Somehow NAryMatIterator does not look too efficient to me, but I don't claim to know what I am talking about).
		</comment>
		<comment id='3' author='azatsman' date='2017-09-06T15:43:46Z'>
		Oops, seems I was addressing a different problem since size information probably referred to the size of idx4 in the example. In this case I would vote for different templates for different dimensions. There are already templates for 1,2 and 3 dimensions -- what's wrong with adding 4,5,6,... ?
		</comment>
	</comments>
</bug>