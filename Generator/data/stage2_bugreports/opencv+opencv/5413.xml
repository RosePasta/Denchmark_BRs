<bug id='5413' author='afriesen' open_date='2015-09-28T19:04:04Z' closed_time='2015-12-23T10:25:11Z'>
	<summary>predict() function for logistic regression classifier is broken</summary>
	<description>
There are two issues with float LogisticRegressionImpl::predict(InputArray samples, OutputArray results, int) const (in lr.cpp).


This function always returns 0 (there's a TODO at the bottom of the function that is probably about fixing this).


This function always attempts to write to OutputArray results even if results = noArray(), which causes a segfault.


These issues both arise when calling StatModel::calcError( ... ) on a logistic regression classifier, since this function specifies OutputArray results = noArray() and expects the returned value to be meaningful.
	</description>
	<comments>
		<comment id='1' author='afriesen' date='2015-09-29T14:06:23Z'>
		Probably the fastest way to get this fixed is by providing a bugfix yourself and trying to finish the TODO. The second problem can be solved by checking the content of results. Are you up for it?
		</comment>
		<comment id='2' author='afriesen' date='2015-09-30T18:39:35Z'>
		Yes, I can take a stab at this.
A related question in lr.cpp: I see that in compute_batch_gradient, the for loop ranges over params.num_iters whereas in compute_mini_batch_gradient, the for loop ranges over term_crit.maxCount. By default, these have the same value, but they can have different values if specified. Is there a reason that these use different parameters?
Similarly, in my understanding of mini batch gradient descent, one still wants to iterate until convergence or the iteration limit is reached; however, in compute_mini_batch_gradient there's an if-statement at the end (if(j+size_b&gt;_data.rows)) that will terminate this after a single iteration. Does this exist for a reason or is it a bug?
		</comment>
		<comment id='3' author='afriesen' date='2015-09-30T19:49:05Z'>
		Further, the convergence criteria and the learning rate are typically separate parameters, but the LR code here uses the same value for both (by default). Is this the intended behavior?
Actually, convergence doesn't seem to even be checked here, even though TermCriteria is specified as COUNT + EPS.
		</comment>
		<comment id='4' author='afriesen' date='2015-10-01T06:59:10Z'>
		&lt;denchmark-link:https://github.com/afriesen&gt;@afriesen&lt;/denchmark-link&gt;
 I am sorry but my knowledge of the convergence algorithms is rather limited. I assume that if you provide a PR with suggested adaptations that you think are needed, a more knowledged OpenCV developer will get assigned. Then you can fire away all your questions there!
		</comment>
		<comment id='5' author='afriesen' date='2015-12-23T10:23:40Z'>
		can be closed, PR was merged
		</comment>
	</comments>
</bug>