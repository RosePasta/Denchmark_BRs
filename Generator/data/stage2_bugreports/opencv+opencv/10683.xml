<bug id='10683' author='vs-zhehangd' open_date='2018-01-25T01:03:25Z' closed_time='2018-05-28T20:37:31Z'>
	<summary>filter2D does not utilize pixels outside ROI when kernel size &amp;gt; 11</summary>
	<description>
Description
It is said

... now the filtering operations fully support the notion of image ROI, that is, pixels outside of the ROI but inside the image can be used in the filtering operations.

I found when calling filter2D to filter an ROI using a kernel larger than 11x11, the function does not utilize the pixels outside the ROI. Probably related to the fact that filter uses DCT instead of convolution beyond that size? I have tested 3.1, 3.2, 3.3, 3.4. This issue happens since 3.2. 3.1 does not have this issue.
System information
OpenCV 3.2, 3.3, 3.4
Ubuntu 16.04
g++ 5.4.0
Steps to reproduce
The following code produces the problem. It divides an image into blocks and filters each of them.
#include &lt;iostream&gt;
#include &lt;vector&gt;

#include &lt;opencv2/opencv.hpp&gt;

int main(void) {
  
  std::cout &lt;&lt; "OpenCV version : " &lt;&lt; CV_VERSION &lt;&lt; std::endl;
  
  const char* input_file  = "roi_filter_test.jpg";
  const char* output_file = "roi_filter_test_output.jpg";
  
  cv::Mat image  = cv::imread(input_file);
  cv::Mat output = cv::Mat::zeros(image.size(), image.type());
  
  int BLOCK_SIZE = 64; // can be any
  
  std::vector&lt;cv::Rect&gt; regions;
  for (int r = 0; r &lt; image.rows / BLOCK_SIZE; ++r)
    for (int c = 0; c &lt; image.cols / BLOCK_SIZE; ++c)
      regions.emplace_back(c * BLOCK_SIZE, r * BLOCK_SIZE,
                           BLOCK_SIZE, BLOCK_SIZE);
      
  int ksize  = 12; // issue when &gt; 11
  int ksize2 = ksize * ksize;
  cv::Mat kernel = cv::Mat::ones(ksize, ksize, CV_32F) / ksize2;
    
  for (const auto&amp; region: regions) {
    cv::Mat roi_i(image,  region);
    cv::Mat roi_o(output, region);
    cv::filter2D(roi_i, roi_o, -1, kernel);
  }
  
  cv::imwrite(output_file, output); 
  
  return 0;
}

Input Image:
&lt;denchmark-link:https://user-images.githubusercontent.com/29877977/35364356-901f386e-0123-11e8-9373-40990bcea6d8.jpg&gt;&lt;/denchmark-link&gt;

Result @ OpenCV 3.1
&lt;denchmark-link:https://user-images.githubusercontent.com/29877977/35364363-9a283234-0123-11e8-8b7b-fc1cf41f739c.jpg&gt;&lt;/denchmark-link&gt;

Result @ OpoenCV 3.2, 3.3, 3.4
&lt;denchmark-link:https://user-images.githubusercontent.com/29877977/35364369-a3113422-0123-11e8-8c14-00c14623a61d.jpg&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='vs-zhehangd' date='2018-02-04T11:13:59Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 I would like to fix this issue. Can you get me started? What files to look into and the basic way to fix the problem?
		</comment>
		<comment id='2' author='vs-zhehangd' date='2018-02-04T13:50:58Z'>
		&lt;denchmark-link:https://github.com/Riyuzakii&gt;@Riyuzakii&lt;/denchmark-link&gt;
 , probably you should take a look at the function: &lt;denchmark-link:https://github.com/opencv/opencv/blob/e801e336ede0d43cb8e7be698424b7320925b700/modules/imgproc/src/filter.cpp#L4835-L4842&gt;dftFilter2d&lt;/denchmark-link&gt;
 it runs when .
		</comment>
		<comment id='3' author='vs-zhehangd' date='2018-02-07T14:42:50Z'>
		&lt;denchmark-link:https://github.com/mshabunin&gt;@mshabunin&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/vs-zhehangd&gt;@vs-zhehangd&lt;/denchmark-link&gt;
 's your code gives me the following error on executing the executable:
&lt;denchmark-code&gt;OpenCV version : 3.3.1
OpenCV Error: Assertion failed (0 &lt;= roi.x &amp;&amp; 0 &lt;= roi.width &amp;&amp; roi.x + roi.width &lt;= m.cols &amp;&amp; 0 &lt;= roi.y &amp;&amp; 0 &lt;= roi.height &amp;&amp; roi.y + roi.height &lt;= m.rows) in Mat, file /tmp/binarydeb/ros-kinetic-opencv3-3.3.1/modules/core/src/matrix.cpp, line 538
terminate called after throwing an instance of 'cv::Exception'
  what():  /tmp/binarydeb/ros-kinetic-opencv3-3.3.1/modules/core/src/matrix.cpp:538: error: (-215) 0 &lt;= roi.x &amp;&amp; 0 &lt;= roi.width &amp;&amp; roi.x + roi.width &lt;= m.cols &amp;&amp; 0 &lt;= roi.y &amp;&amp; 0 &lt;= roi.height &amp;&amp; roi.y + roi.height &lt;= m.rows in function Mat
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='vs-zhehangd' date='2018-02-07T16:01:32Z'>
		&lt;denchmark-link:https://github.com/Riyuzakii&gt;@Riyuzakii&lt;/denchmark-link&gt;
 , I've been able to reproduce this issue on my machine using the sample provided in the description. Make sure you have read correct image in .
In my previous comment I provided wrong condition. As can be seen from the code:



opencv/modules/imgproc/src/filter.cpp


        Lines 4659 to 4661
      in
      e801e33






 int sdepth = CV_MAT_DEPTH(stype); 



 int ddepth = CV_MAT_DEPTH(dtype); 



 int dft_filter_size = ((sdepth == CV_8U &amp;&amp; (ddepth == CV_8U || ddepth == CV_16S)) || (sdepth == CV_32F &amp;&amp; ddepth == CV_32F)) &amp;&amp; checkHardwareSupport(CV_CPU_SSE3) ? 130 : 50; 





if SSE3 is available, algorithm switches to DFT branch only in case when kernel_w * kernel_h &gt;= 130, that is why kernel size 11 works well and 12 fails.
If you compare two calls:



opencv/modules/imgproc/src/filter.cpp


        Lines 4835 to 4842
      in
      e801e33






 res = dftFilter2D(stype, dtype, kernel_type, 



                   src_data, src_step, 



                   dst_data, dst_step, 



                   width, height, 



                   kernel_data, kernel_step, 



                   kernel_width, kernel_height, 



                   anchor_x, anchor_y, 



                   delta, borderType); 





And:



opencv/modules/imgproc/src/filter.cpp


        Lines 4845 to 4854
      in
      e801e33






 ocvFilter2D(stype, dtype, kernel_type, 



             src_data, src_step, 



             dst_data, dst_step, 



             width, height, 



             full_width, full_height, 



             offset_x, offset_y, 



             kernel_data, kernel_step, 



             kernel_width, kernel_height, 



             anchor_x, anchor_y, 



             delta, borderType); 





You will see that parameters full_width, full_height, offset_x, offset_y are not used in the call to dftFilter2D, thus information about ROI is not available in this function.
You can try to add missing arguments to the function and handle them correctly, so that underlying calls to crossCorr could use this information.
		</comment>
		<comment id='5' author='vs-zhehangd' date='2018-02-07T18:14:54Z'>
		&lt;denchmark-link:https://github.com/mshabunin&gt;@mshabunin&lt;/denchmark-link&gt;
 how did you compile the code? I used a standard CMakeLists.txt and added this line to it:
&lt;denchmark-code&gt;set (CMAKE_CXX_STANDARD 11)
&lt;/denchmark-code&gt;

Otherwise emplace_back gave an error. and then did a make and executed the executable.
		</comment>
		<comment id='6' author='vs-zhehangd' date='2018-02-07T18:27:43Z'>
		&lt;denchmark-link:https://github.com/Riyuzakii&gt;@Riyuzakii&lt;/denchmark-link&gt;

Sorry it is a stupid bug:
for (int r = 0; r &lt; image.cols / BLOCK_SIZE; ++r) {
  for (int c = 0; c &lt; image.rows / BLOCK_SIZE; ++c) {
    regions.emplace_back(c * BLOCK_SIZE, r * BLOCK_SIZE,
                          BLOCK_SIZE, BLOCK_SIZE);
    
  }
}
Please switch image.cols and image.rows. I used to use a square image so I did not notice it. I have updated the code in the first post.
		</comment>
	</comments>
</bug>