<bug id='6288' author='rwiesen' open_date='2016-03-17T14:16:09Z' closed_time='2016-04-13T07:51:48Z'>
	<summary>cv::FileStorage de-serialization of std::vector&amp;lt;cv::KeyPoint&amp;gt; fails</summary>
	<description>
&lt;denchmark-h:h3&gt;OpenCV version and host system&lt;/denchmark-h&gt;


OpenCV version: git b3ac274, but unchanged in HEAD
Host OS: Windows 7

&lt;denchmark-h:h3&gt;In which part of the OpenCV library you got the issue?&lt;/denchmark-h&gt;


core/types.hpp

&lt;denchmark-h:h3&gt;Expected behaviour&lt;/denchmark-h&gt;


Take a cv:KeyPoint kp with kp.octave = 1 and kp.class_id = -1
serialize this keypoint as part of a std::vector to a cv::FileStorage
the entry in the file correctly shows "..., 1, -1, ..."
deserialize the keypoint
kp.octave is 1
kp.class_id is -1

&lt;denchmark-h:h3&gt;Actual behaviour&lt;/denchmark-h&gt;

after deserialization:

kp.octave is 1073741824 (a 1.0f reinterpreted as int)
kp.class_id is -1082130432 (a -1.0f reinterpreted as int)

&lt;denchmark-h:h3&gt;Additional description&lt;/denchmark-h&gt;

cv::Keypoint instances with octave or class_id != 0 are not deserialized correctly.
The cv::KeyPoint class declares octave and class_id as int (in addition to the five float members), but DataType declares a vector of seven floats. When read in, the integer values are converted to float in cvReadRawDataSlice(), but interpreted as int in the datastructure.
&lt;denchmark-h:h3&gt;Code example to reproduce the issue / Steps to reproduce the issue&lt;/denchmark-h&gt;

// File was written with:
// cv::FileStorage fs( featuresFile, cv::FileStorage::WRITE );
// cv::write( fs, "keypoints", keypoints );
// fs.release();

cv::FileStorage fs;
std::vector&lt;cv::KeyPoint&gt; keypoints;

fs.open( featuresFile, cv::FileStorage::READ );
fs["keypoints"] &gt;&gt; keypoints;
	</description>
	<comments>
		<comment id='1' author='rwiesen' date='2016-04-09T08:54:59Z'>
		I'm trying to fix this bug.
After investigation, there is a dedicated function for reading vector&lt;KeyPoint&gt; in persistence.hpp
CV_EXPORTS void read(const FileNode&amp; node, std::vector&lt;KeyPoint&gt;&amp; keypoints);
However, the '&gt;&gt;' operator does not call the function. DMatch may have similar issue.
I am going to overload the '&gt;&gt;' operator so that it calls the dedicated function in persistence.hpp.
		</comment>
		<comment id='2' author='rwiesen' date='2016-04-09T11:11:35Z'>
		I have send a pull request (&lt;denchmark-link:https://github.com/opencv/opencv/pull/6375&gt;#6375&lt;/denchmark-link&gt;
) for the fix.
		</comment>
	</comments>
</bug>