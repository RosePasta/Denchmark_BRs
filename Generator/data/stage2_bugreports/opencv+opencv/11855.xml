<bug id='11855' author='crogrezen' open_date='2018-06-29T11:56:30Z' closed_time='2018-11-16T21:03:10Z'>
	<summary>BFmatcher with crossCheck=True doesn't cross check</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4.0
Operating System / Platform =&gt; Linux Ubuntu 16.04 X86 64 Bit
Compiler =&gt; gcc 5.4

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Running BFmatcher with crossCheck enabled doesn't really cross check. According to the documentation (&lt;denchmark-link:https://docs.opencv.org/trunk/d3/da1/classcv_1_1BFMatcher.html#ac6418c6f87e0e12a88979ea57980c020&gt;https://docs.opencv.org/trunk/d3/da1/classcv_1_1BFMatcher.html#ac6418c6f87e0e12a88979ea57980c020&lt;/denchmark-link&gt;
)

If crossCheck==true, then the knnMatch() method with k=1 will only return pairs (i,j) such that for i-th query descriptor the j-th descriptor in the matcher's collection is the nearest and vice versa, i.e. the BFMatcher will only return consistent pairs.

I read this as, if i is closest to j, then j is also closest to i. I.e. this is symmetrical. However, this does not seem to be the case with the implemented algorithm. Also, if we switch the collections, i.e. queryDescriptors and trainDescriptors, we get different results, which is unexpected.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

To illustrate the first part of the issue, try the following
import numpy
import cv2

sources = numpy.array([[1, 1, 0], [1, 1, 1]], dtype=numpy.uint8)
targets = numpy.array([[1, 1, 1], [0, 0, 0]], dtype=numpy.uint8)
for si, source in enumerate(sources):
    for ti, target in enumerate(targets):
        print('%d -&gt; %d: %d' % (si, ti, cv2.norm(source, target, cv2.NORM_HAMMING)))

bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
matches = bf.knnMatch(sources, targets, k=1)
print('-- crosscheck=True')
for match in matches:
    if match:
        print('%d -&gt; %d: %f' % (match[0].queryIdx, match[0].trainIdx, match[0].distance))

bf_nocc = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=False)
matches_nocc = bf.knnMatch(sources, targets, k=1)
print('-- crosscheck=False')
for match in matches_nocc:
    if match:
        print('%d -&gt; %d: %f' % (match[0].queryIdx, match[0].trainIdx, match[0].distance))
This outputs
&lt;denchmark-code&gt;0 -&gt; 0: 1
0 -&gt; 1: 2
1 -&gt; 0: 0
1 -&gt; 1: 3
-- crossCheck=True
0 -&gt; 1: 2.000000 &lt;= Unexpected
1 -&gt; 0: 0.000000
-- crossCheck=False
0 -&gt; 0: 1.000000
1 -&gt; 0: 0.000000
&lt;/denchmark-code&gt;

Here, the 0 -&gt; 1 match when crossCheck=True is unexpected since source 0 is closer to target 0.
Also, if we switch the sources and targets arrays, we get
&lt;denchmark-code&gt;0 -&gt; 0: 1
0 -&gt; 1: 0
1 -&gt; 0: 2
1 -&gt; 1: 3
-- crossCheck=True
0 -&gt; 1: 0.000000
-- crossCheck=False
0 -&gt; 1: 0.000000
1 -&gt; 0: 2.000000
&lt;/denchmark-code&gt;

Which is correct for crossCheck=True (as well as for crossCheck=False which I don't expect to be symmetrical).
Unless I have misunderstood how cross check is supposed to work, this appears to me to be an issue with the current implementation (there has been no updates on this algorithm since 3.4.0 as far as I can see)
For C++ sample code, see &lt;denchmark-link:http://answers.opencv.org/question/194661/bfmatcher-with-crosscheck-doesnt-crosscheck/&gt;http://answers.opencv.org/question/194661/bfmatcher-with-crosscheck-doesnt-crosscheck/&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='crogrezen' date='2018-09-10T19:02:20Z'>
		Looks like I just entered a bug &lt;denchmark-link:https://github.com/opencv/opencv/issues/12484&gt;#12484&lt;/denchmark-link&gt;
 which is a duplicate of this one.
		</comment>
		<comment id='2' author='crogrezen' date='2018-10-31T20:08:49Z'>
		So, these changes seem to work on the C++ and Python test code, but they fail on 3 of the perf tests. This appears to be because batchdistance with crosscheck == true is now flagging non-ideal pairs not previously found, per this issue. These three tests have an expected_min on ndix as 0, but since some non-ideal pairs were detected, acutal_min is -1 and the tests fail. I regenerated the test data locally following: &lt;denchmark-link:https://github.com/opencv/opencv/wiki/HowToUsePerfTests&gt;HowToUsePerfTests&lt;/denchmark-link&gt;
, should I also submit a PR to opencv_extra with the new test data?
		</comment>
		<comment id='3' author='crogrezen' date='2018-10-31T21:15:12Z'>
		&lt;denchmark-link:https://github.com/alexevans&gt;@alexevans&lt;/denchmark-link&gt;
  may be you should write this comment in your PR send to @ alalek
		</comment>
		<comment id='4' author='crogrezen' date='2018-10-31T22:28:22Z'>
		&lt;denchmark-link:https://github.com/alexevans&gt;@alexevans&lt;/denchmark-link&gt;
 Right! Please create PR into opencv_extra based on 3.4 branch: from the source branch with the same name ("Issue11855" from &lt;denchmark-link:https://github.com/opencv/opencv/pull/12908&gt;#12908&lt;/denchmark-link&gt;
)
		</comment>
		<comment id='5' author='crogrezen' date='2018-11-02T23:23:28Z'>
		&lt;denchmark-link:https://github.com/LaurentBerger&gt;@LaurentBerger&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;

Thanks!
		</comment>
	</comments>
</bug>