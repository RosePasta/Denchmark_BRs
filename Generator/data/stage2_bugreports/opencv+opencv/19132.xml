<bug id='19132' author='diablodale' open_date='2020-12-15T22:46:30Z' closed_time='2020-12-23T12:09:34Z'>
	<summary>conflict assignment of g_isOpenCVActivated in OpenCL subsystem</summary>
	<description>
The variable g_isOpenCVActivated is inconsistently used/assigned and conflicts in its intention. The variable only exists in ocl.cpp on 4 lines. The two lines in conflict are both assigning the value true out-of-order and with conflicting intentions. I also think the variable is misnamed -- if I understand the intention, it should be named g_isOpenCLActivated
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.5.0
Operating System / Platform =&gt; Windows 10 x64
Compiler =&gt; Visual Studio Community 2019 v16.8.3

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

The declaration of the variable is clear on its intention, see below



opencv/modules/core/src/ocl.cpp


        Lines 1148 to 1149
      in
      d5fd2f0






 // true if we have initialized OpenCL subsystem with available platforms 



 static bool g_isOpenCVActivated = false; 





The code then correctly assigned the variable matching that intention, see below



opencv/modules/core/src/ocl.cpp


        Lines 1175 to 1178
      in
      d5fd2f0






 cl_uint n = 0; 



 g_isOpenCLAvailable = ::clGetPlatformIDs(0, NULL, &amp;n) == CL_SUCCESS; 



 g_isOpenCVActivated = n &gt; 0; 



 CV_LOG_INFO(NULL, "OpenCL: found " &lt;&lt; n &lt;&lt; " platforms"); 





A wrapper function then uses the variable as an optimization. Note the mis-naming... it is not a code defect. Instead, it is a readability/comprehension defect. The variable should be named g_isOpenCLActivated



opencv/modules/core/src/ocl.cpp


        Lines 1211 to 1216
      in
      d5fd2f0






 bool isOpenCLActivated() 



 { 



 if (!g_isOpenCVActivated) 



 return false; // prevent unnecessary OpenCL activation via useOpenCL()-&gt;haveOpenCL() calls 



 return useOpenCL(); 



 } 





Finally, the defective code is below. It does not match the intention of the variable and also assigns true to the variable far before it should in the sequence of codepaths. I believe the assignment should be completely removed here.



opencv/modules/core/src/ocl.cpp


        Lines 6346 to 6351
      in
      d5fd2f0






 static OpenCLAllocator* getOpenCLAllocator_() // call once guarantee 



 { 



 static OpenCLAllocator* g_allocator = new OpenCLAllocator(); // avoid destructor call (using of this object is too wide) 



     g_isOpenCVActivated = true; 



 return g_allocator; 



 } 





&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;


Code review as described above

&lt;denchmark-h:h5&gt;Fix&lt;/denchmark-h&gt;


Remove the assignment on line 6349
Rename variable in the 4 places from g_isOpenCVActivated to g_isOpenCLActivated

&lt;denchmark-h:h5&gt;Issue submission checklist&lt;/denchmark-h&gt;


 I report the issue, it's not a question
 I checked the problem with documentation, FAQ, open issues,
answers.opencv.org, Stack Overflow, etc and have not found solution
 I updated to latest OpenCV version and the issue is still there
 There is reproducer code and related data files: videos, images, onnx, etc

	</description>
	<comments>
		<comment id='1' author='diablodale' date='2020-12-16T02:01:40Z'>
		Agreed with OpenCV =&gt; OpenCL typo. Nice catch!
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Not sure about the removed assignment.
See &lt;denchmark-link:https://github.com/opencv/opencv/pull/10180&gt;#10180&lt;/denchmark-link&gt;
 with commit's message:
&lt;denchmark-code&gt;ocl: avoid unnecessary loading/initializing OpenCL subsystem

If there are no OpenCL/UMat methods calls from application.

OpenCL subsystem is initialized:
- haveOpenCL() is called from application
- useOpenCL() is called from application
- access to OpenCL allocator: UMat is created (empty UMat is ignored) or UMat &lt;-&gt; Mat conversions are called

Don't call OpenCL functions if OPENCV_OPENCL_RUNTIME=disabled
(independent from OpenCL linkage type)
&lt;/denchmark-code&gt;

This assignment is about the case "access to OpenCL allocator".
It should handle cases when UMat variable is declared (so users want to use OpenCL). Something like this:
&lt;denchmark-code&gt;Mat src = ...;
UMat result;  // getOpenCLAllocator() should be called here which assigns this activation flag
someProcessing(src, dst, ...);  // internally calls `isOpenCLActivated()` which should call useOpenCL() if this flag is activated
&lt;/denchmark-code&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Unfortunatelly UMat result; do nothing =(
This code should enqueue OpenCL kernel, but it doesn't.
&lt;denchmark-code&gt;int main()
{
    Mat src(10,10,CV_8UC1,Scalar::all(0));
    UMat dst;
    //(void)ocl::getOpenCLAllocator();
    cvtColor(src, dst, COLOR_GRAY2BGR);
    return 0;
}
&lt;/denchmark-code&gt;

Switch #define CV_OPENCL_SHOW_RUN_KERNELS 0 =&gt; 1 in ocl.hpp to see executed kernels.
Expected result is:
&lt;denchmark-code&gt;clEnqueueNDRangeKernel('Gray2RGB', dims=2, globalsize=256x8x1, localsize=NULL) sync=false
&lt;/denchmark-code&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Hmm... Commit message says "(empty UMat is ignored)".
I need to think a bit more about that.
		</comment>
		<comment id='2' author='diablodale' date='2020-12-23T06:29:26Z'>
		
empty UMat is ignored

This is a correct note. We should not activate OpenCL in these cases.
Empty UMat ctor is widely used in implementation classes as fields (and we can't avoid them). These fields should not trigger OpenCL activation.
So sample above with UMat dst; is not correct example.
		</comment>
	</comments>
</bug>