<bug id='16053' author='mcellis33' open_date='2019-12-03T18:23:59Z' closed_time='2019-12-12T12:50:31Z'>
	<summary>approxPolyDP OOMs</summary>
	<description>
&lt;denchmark-h:h3&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4
Operating System / Platform =&gt; Linux 64 Bit
Compiler =&gt; x86_64-linux-gnu-g++-8

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

For certain contours, if approxPolyDP is passed an epsilon of NaN, then it OOMs.
This may simply be a request for input validation in approxPolyDP, because I believe an epsilon of NaN is meaningless.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Here is a fairly minimal repro. Note that this uses the same contour as in the repro of &lt;denchmark-link:https://github.com/opencv/opencv/issues/16051&gt;#16051&lt;/denchmark-link&gt;
. You may need to tweak the headers/namespaces.
&lt;denchmark-code&gt;#include "third_party/OpenCVX/include/opencv2/imgproc/imgproc.hpp"
int main(int argc, char **argv) {
  std::vector&lt;cv::Point&gt; contour(
      {cv::Point(2085, 1415), cv::Point(2087, 1415), cv::Point(2089, 1414),
       cv::Point(2089, 1414), cv::Point(2087, 1412)});
  float epsilon = NAN;
  std::vector&lt;cv::Point&gt; approx;
  cv::approxPolyDP(contour, approx, epsilon,
                    true /* closed curve */);
  // The process will OOM before getting here.
}
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='mcellis33' date='2019-12-04T23:24:42Z'>
		Epsilon is the error "distance" between the approximation and input polyline. So NaN in the Douglas-Peucker algo would cause it to go overboard. I agree,
 CV_Error( Error::StsBadArg, "Epsilon not valid." ) seems like a good response?
		</comment>
		<comment id='2' author='mcellis33' date='2019-12-05T11:17:02Z'>
		&lt;denchmark-link:https://github.com/saskatchewancatch&gt;@saskatchewancatch&lt;/denchmark-link&gt;
 Agreed on error message, like this:
&lt;denchmark-code&gt;if (epsilon &lt; 0 || !(epsilon &lt; 1e30))
    CV_Error(...)
&lt;/denchmark-code&gt;

with simple regression test  with  check (avoid using of legacy testing approach with classes - &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.4.8/modules/imgproc/test/test_contours.cpp#L488-L500&gt;use this as example&lt;/denchmark-link&gt;
)
Target branch is 3.4
		</comment>
		<comment id='3' author='mcellis33' date='2019-12-08T02:33:19Z'>
		PR &lt;denchmark-link:https://github.com/opencv/opencv/pull/16094&gt;#16094&lt;/denchmark-link&gt;
 should take care of this.
&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 as it turns out there was already a test file for polyapprox, so I added a test there.
		</comment>
	</comments>
</bug>