<bug id='4506' author='opencv-pushbot' open_date='2015-07-27T09:27:48Z' closed_time='2016-06-16T22:46:41Z'>
	<summary>VideoCapture "frame grabbing" is blocking using an IP Camera</summary>
	<description>
Transferred from &lt;denchmark-link:http://code.opencv.org/issues/2786&gt;http://code.opencv.org/issues/2786&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;|| Walter Lucetti on 2013-02-08 15:14
|| Priority: Normal
|| Affected: branch 'master' (2.4.9)
|| Category: highgui-camera
|| Tracker: Bug
|| Difficulty: None
|| PR: 
|| Platform: None / None
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;VideoCapture "frame grabbing" is blocking using an IP Camera&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Grabbing a frame using VideoCapture with an IP Camera is blocking if the camera goes disconnected.

I tried the methods:

1) grabber &gt;&gt; frame;

2) grabber.read( frame );

3) grabber.grab(); &lt;- blocks here
   grabber.retrieve( frame );

each one blocks if the camera is disconnected from the network. 

This is very bad because it does not let you understand if there are problems with the connections.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;History&lt;/denchmark-h&gt;

&lt;denchmark-h:h5&gt;Alexandro Picolini on 2014-04-22 13:25&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Hi Vadim,

This freezing occurs in the read method which calls av_read_frame function. So that this function does not freeze in the event of disconnection must be registered to url_set_interrupt_cb callback. 
Exist forecast for this fix?

Tks,
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Alexandro Picolini on 2014-04-27 20:59&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Hello Vadim. 
Following patch to fix this problem. 
You can put this in the official build? 
Thank you.
-   File cap_ffmpeg_impl.hpp_patch added
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Andy Bean on 2014-06-03 19:40&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;I can confirm this issue in 2.4.9 release running on windows 7. This is really a showstopper when using opencv with network cameras.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Corentin Hamel on 2014-08-06 03:21&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Hi Alexandro,
I'm having trouble to see how this patch is gonna work and actually I can't get it work. The _capture.read()_ is still blocking if there is a connection loss.
Even with the patch, the program is getting stuck in the _ while (!valid)_ loop of _CvCapture_FFMPEG::grabFrame()_ line 693 as there is no new frame, the only way to get out of this loop is when _count_errs &gt; max_number_of_attempts_ line 738 but this is taking a while so the _capture.read()_ is blocked.
I thought when the callback function _cvCapture_FFMPEG_Timeout::checkInterrupt_ called with opaque argument and will return 1 (when timeout is reached), the blocking operation will be aborted. But I'm not sure what the blocking operation at this point (I thought it will exist the while loop). 

My knowledge on the openCV code are limited so maybe I'm not understanding something.
Thanks
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Corentin Hamel on 2014-08-06 03:33&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;-   File cap_ffmpeg_impl.hpp added
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='opencv-pushbot' date='2015-09-14T09:33:51Z'>
		Hi all,
I'm afraid that the bug is still there.
I'm using Python 2.7.6 and OpenCV 2.4.11 and when i plug out the cable from camera, during the infinite frame acquire loop, the process stuck.
I try both capture.read() and capture.grab(), but none works.
		</comment>
		<comment id='2' author='opencv-pushbot' date='2015-09-18T17:50:48Z'>
		The problem still exists.
I used OpenCV3.0.0 -with tbb option on OS X Yosemite.
But I got the same blocking condition while wifi was disconnected.
(2015/9/19)
This may be caused from ffmpeg.
&lt;denchmark-link:http://stackoverflow.com/questions/14558172/ffmpeg-av-read-frame-need-very-long-time-to-stop&gt;http://stackoverflow.com/questions/14558172/ffmpeg-av-read-frame-need-very-long-time-to-stop&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='opencv-pushbot' date='2015-11-22T14:28:04Z'>
		Does anyone know if there is a fix for this issue yet? I'm still getting problems running on OSX. I'm running from the latest version of master.
		</comment>
		<comment id='4' author='opencv-pushbot' date='2015-11-23T02:18:32Z'>
		I think the problem is the supporting of the callback function. It need a fix or change to the ffmpeg simply.
		</comment>
		<comment id='5' author='opencv-pushbot' date='2015-11-25T20:44:41Z'>
		How do you mean change to ffmpeg?
		</comment>
		<comment id='6' author='opencv-pushbot' date='2015-11-27T15:17:01Z'>
		Hello guys, I'm facing the same problem. I have just installed the patch available above but my code still freezes at grab(). Anyone got a solution?
		</comment>
		<comment id='7' author='opencv-pushbot' date='2015-12-16T01:42:00Z'>
		This cause from the cap_ffmpeg_impl.hpp. (From OpenCV Source: modules/videoio/src/)
There is no any callback function setting to determine if grabFrame is timeout. (cause by av_read_frame)
In ffmpeg, you need to set like this:
AVFormatContext::interrupt_callback.opaque = (void*)timeout ;
AVFormatContext::interrupt_callback.callback = &amp;SomeTimeoutHandler::checkInterrupt;
if you want to handle the timeout callback.
So I directly use the ffmpeg not the videocapture to handle the timeout and more video io functions in detail.
Hopefully, maybe someone can add the fix for the callback setter one day.
		</comment>
		<comment id='8' author='opencv-pushbot' date='2016-02-06T15:33:30Z'>
		any update on this one?
		</comment>
		<comment id='9' author='opencv-pushbot' date='2016-02-06T16:41:28Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
  are &lt;denchmark-link:https://github.com/opencv/opencv/pull/6053&gt;#6053&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/opencv/opencv/pull/6074&gt;#6074&lt;/denchmark-link&gt;
 related to this issue ?
		</comment>
		<comment id='10' author='opencv-pushbot' date='2016-02-06T18:02:54Z'>
		Interrupt feature was added by &lt;denchmark-link:https://github.com/opencv/opencv/pull/6053&gt;#6053&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='opencv-pushbot' date='2016-04-27T16:07:29Z'>
		&lt;denchmark-link:https://github.com/GJChen919&gt;@GJChen919&lt;/denchmark-link&gt;
 Hello! Could you showed me how you did that? Use directly ffmpeg instead of videocapture? Thanks
		</comment>
		<comment id='12' author='opencv-pushbot' date='2016-05-04T07:19:24Z'>
		&lt;denchmark-link:https://github.com/PatriciaReyes&gt;@PatriciaReyes&lt;/denchmark-link&gt;
 :
The videocapture is a wrapper of ffmpeg.
So I use the ffmpeg library to deal with more options.
If you are interested in the use ffmpeg, you can check the below link:
&lt;denchmark-link:http://plagatux.es/2012/08/skipping-blocking-libav-functions-with-interruption-callbacks/&gt;http://plagatux.es/2012/08/skipping-blocking-libav-functions-with-interruption-callbacks/&lt;/denchmark-link&gt;

I just raise the usage of this callback function to OpenCV dev. team here.
		</comment>
		<comment id='13' author='opencv-pushbot' date='2016-06-16T22:46:41Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
:
I see that you closed this issue but I still have the same problem and I do not know how to fix it.
I'm currently using the python bindings for opencv 3.1.0, with python 3.5.1. on both OS X and linux (ubuntu 15 and also raspbian Jessie).
I have ffmpeg version  3.0.2 installed, and I compiled opencv with cmake flag "-D WITH_FFMPEG=ON".
I set up a simple python script using cv2.VideoCapture on an rtsp stream from an IP camera.
It works fine until I disconnect the camera's network cable. Then it hangs forever on a call to either grab() or read() on the VideoCapture object, with no error message or anything.
Could you please tell me what steps I need to take to solve this problem on either OS X or linux? I am hoping that I just need to update some part of the source code  for opencv or ffmpeg and recompile.
Thanks.
		</comment>
		<comment id='14' author='opencv-pushbot' date='2016-06-20T20:29:33Z'>
		My problem was that I was using the code from 3.1.0. Checking out master and recompiling opencv resolves the problem.
I see that the default duration of 30 seconds is set  in  `/modules/videoio/src/cap_ffmpeg_impl.hpp
#define LIBAVFORMAT_INTERRUPT_OPEN_TIMEOUT_MS 30000
#define LIBAVFORMAT_INTERRUPT_READ_TIMEOUT_MS 30000
Is it possible to control the timeout duration in my python code without changing those definitions in that file and recompiling opencv?
		</comment>
		<comment id='15' author='opencv-pushbot' date='2016-07-11T03:12:16Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
  I encountered this issue while using opencv3.1 in both OSX / Ubuntu. While the IP camera is offline , the video capture hang in read() forever. And even the stream recovered after 11 hours, the capture still works.  But I think the we need a cv_cap_prop to control the waiting time.
		</comment>
		<comment id='16' author='opencv-pushbot' date='2016-12-21T18:13:10Z'>
		Which commit has fixed this issue? Is it present in 3.2.0-rc?
Because checking out 3.1.0 still have this issue.
		</comment>
		<comment id='17' author='opencv-pushbot' date='2017-04-13T23:56:04Z'>
		I am still experiencing this issue in 3.1.0
		</comment>
		<comment id='18' author='opencv-pushbot' date='2019-09-15T16:07:55Z'>
		There is a little known fact about changing those timeouts, and I have just experienced it.  I set
#define LIBAVFORMAT_INTERRUPT_OPEN_TIMEOUT_MS 1000
#define LIBAVFORMAT_INTERRUPT_READ_TIMEOUT_MS 1000
And recompiled my libraries, thinking that 1s was plenty of time to connect and read a frame for my low-latency use case.  The hidden trap though, is that FFMPEG (if you're using it as your cv::VideoCapture backend) sometimes needs to capture enough streaming content before it can construct a whole frame.  These timeouts affect that waiting process, because they "interrupt" FFMPEG.  I set mine too low, and i was getting errors like this in my log for the h264 video stream:
[h264 @ 0x3046b40] co located POCs unavailable
And other similar errors.  I believe the problem is that if the read timeout is too low (not sure about the open timeout), FFMPEG throws everything on the floor when the interrupt timer expires, tries to decode the broken frame fragments, fails, and OpenCV has nothing to use.  The read timeout has to be long enough to allow FFMPEG to construct full keyframes to use to decode subsequent frame data.
So change these timeouts with caution.  30s is probably still too high, depending on the latency of your use case, but don't set them too low.  And if you set them too low and start seeing decoding errors, raise them again.
		</comment>
	</comments>
</bug>