<bug id='15075' author='mrunibe' open_date='2019-07-18T06:00:12Z' closed_time='2020-04-03T04:31:12Z'>
	<summary>Python - cv2.resize with INTER_NEAREST return corrupted slice for channels &amp;gt; 4</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;

OpenCV =&gt; 4.1.0
Operating System / Platform =&gt; Ubuntu 16.04.1, Linux 4.13.0
Python =&gt; 3.6.8
numpy =&gt; 1.16.4
&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

cv2.resize with an array having a 3rd-dimension &gt; 4 (must be an odd number) and nearest-neighbor interpolation returns corrupted data in the last channel. It is not deterministic and looks like memory corruption.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

import numpy as np
import cv2

# up to DIM=4 is OK
DIM = 5
T = np.zeros((12, 12,DIM)).astype(np.uint8)
T[2, 2, DIM-1] = 1
print("Sum: ", T.sum())
print(T[:, :, DIM-1])
R = cv2.resize(T, None, fx=0.9, fy=1,interpolation=cv2.INTER_NEAREST)
# it does not help to supply a pre-allocated array either
#R = np.zeros((12, 11, DIM)).astype(np.uint8)
#R = cv2.resize(T, dsize=R.shape[:2], dst=R, interpolation=cv2.INTER_NEAREST)

print("Sum: ", R.sum())
print(R[:, :, DIM-1])
Output:
Sum:  1
[[0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]]
Sum:  836
[[248 113   0 214 176  85   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0]]
	</description>
	<comments>
		<comment id='1' author='mrunibe' date='2020-02-03T23:06:17Z'>
		Seems problem in resizeNNInvoker class with loop over image.
&lt;denchmark-link:https://github.com/keeper121/opencv/blob/57c99914133bea42b1fd6e176ebf35e210d7163d/modules/imgproc/src/resize.cpp#L1044-L1050&gt;https://github.com/keeper121/opencv/blob/57c99914133bea42b1fd6e176ebf35e210d7163d/modules/imgproc/src/resize.cpp#L1044-L1050&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;for( x = 0; x &lt; dsize.width; x++, D += pix_size )
{
    const int* _tS = (const int*)(S + x_ofs[x]);
    int* _tD = (int*)D;
    for( int k = 0; k &lt; pix_size4; k++ )              // &lt;-------------
        _tD[k] = _tS[k];
}
&lt;/denchmark-code&gt;

The last array's dimension not going through the loop if it has odd size.
Potential fix is replace loop defenition with:
&lt;denchmark-code&gt;for( int k = 0; k &lt;= pix_size4; k++ )
        _tD[k] = _tS[k];
&lt;/denchmark-code&gt;

After that provided code works as expected.
Output:
&lt;denchmark-code&gt;('Sum: ', 1)
[[0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]]
('Sum: ', 1)
[[0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]]
&lt;/denchmark-code&gt;

But I don't know how this change affect on other modules witch uses NN resize.
I create pull request to future investigate what it breaks or not.
&lt;denchmark-link:https://github.com/opencv/opencv/pull/16497&gt;#16497&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>