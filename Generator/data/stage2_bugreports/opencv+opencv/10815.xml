<bug id='10815' author='uartie' open_date='2018-02-08T20:44:29Z' closed_time='2018-02-21T18:26:40Z'>
	<summary>error: redundant redeclaration of 'cv::String cv::format(const char*, ...)'</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; (master) heads/master-0-g090ee46
Operating System / Platform =&gt; Linux
Compiler =&gt; GCC/G++

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Programs fail to compile when -Werror -Wredundant-decls GCC compile options are used and when including &lt;opencv2/core.hpp&gt;
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

// file test.cpp
#include &lt;opencv2/core.hpp&gt;

int main(int argc, char** argv)
{
  return 0;
}
&lt;denchmark-code&gt;$ g++ -Wredundant-decls -Werror `pkg-config --cflags --libs opencv` test.cpp

In file included from /opt/media/install/include/opencv2/core.hpp:3261:0,
                 from test.cpp:1:
/opt/media/install/include/opencv2/core/utility.hpp:191:48: error: redundant redeclaration of 'cv::String cv::format(const char*, ...)' in same scope [-Werror=redundant-decls]
 CV_EXPORTS String format( const char* fmt, ... );
                                                ^
In file included from /opt/media/install/include/opencv2/core.hpp:3259:0,
                 from test.cpp:1:
/opt/media/install/include/opencv2/core/operations.hpp:368:19: error: previous declaration of 'cv::String cv::format(const char*, ...)' [-Werror=redundant-decls]
 CV_EXPORTS String format( const char* fmt, ... );
                   ^
cc1plus: all warnings being treated as errors
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='uartie' date='2018-02-12T23:36:48Z'>
		Hello &lt;denchmark-link:https://github.com/uartie&gt;@uartie&lt;/denchmark-link&gt;
,
I tried to reproduce the same on Ubuntu 17.10 but cannot. Please see the attached picture and let me know if I have missed anything.
I tried with the exact same line also :
$ g++ -Wredundant-decls -Werror pkg-config --cflags --libs opencv test.cpp
but couldn't reproduce it, therefore played around with the -Werror (shown in the attachment)
&lt;denchmark-link:https://user-images.githubusercontent.com/12770322/36125825-f306057a-1055-11e8-9e2b-0f2fdaee5db2.png&gt;&lt;/denchmark-link&gt;

Thanks and Regards
Dipanjan Das
		</comment>
		<comment id='2' author='uartie' date='2018-02-13T00:25:25Z'>
		I just tried in a Ubuntu Artful (17.10) Docker container which has g++ (Ubuntu 7.2.0-8ubuntu3) 7.2.0 and still see this issue.  I also get this issue in Fedora 27 host installation which has g++ (GCC) 7.2.1 20170915 (Red Hat 7.2.1-2).
Are you testing with latest opencv master branch?  Can you try in a clean environment to ensure pkg-config is not picking up some other version of opencv installed on your system (e.g. try inside a Docker container)?
		</comment>
		<comment id='3' author='uartie' date='2018-02-13T00:35:42Z'>
		&lt;denchmark-link:https://github.com/uartie&gt;@uartie&lt;/denchmark-link&gt;
 I tried with the latest opencv master branch.
I didn't try using Docker. I will try inside a Docker container. I am also new to linux world, so I will have to dig up a bit more. Thanks a lot for the details. I will let you know tomorrow.
		</comment>
		<comment id='4' author='uartie' date='2018-02-13T01:47:02Z'>
		Interesting... I just discovered that when I install opencv into the default cmake install prefix (i.e. /usr/local), the test program compiles fine.
But when I install opencv into a custom prefix (e.g. /opt/media/install), the test program fails to compile:
&lt;denchmark-code&gt;$ sudo apt remove libopencv-core-dev
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt/media/install &lt;path to opencv source&gt;/.
  &lt;snip&gt;
$ make -j8
  &lt;snip&gt;
$ make install
  &lt;snip&gt;
$ export PKG_CONFIG_PATH=/opt/media/install/lib/pkgconfig
$ pkg-config --cflags --libs opencv
  -I/opt/media/install/include/opencv -I/opt/media/install/include -L/opt/media/install/lib -lopencv_dnn -lopencv_ml -lopencv_objdetect -lopencv_shape -lopencv_stitching -lopencv_superres -lopencv_videostab -lopencv_calib3d -lopencv_features2d -lopencv_highgui -lopencv_videoio -lopencv_imgcodecs -lopencv_video -lopencv_photo -lopencv_imgproc -lopencv_flann -lopencv_core
$ g++ -Wredundant-decls -Werror `pkg-config --cflags --libs opencv` test.cpp
  &lt;see reported compile errors in issue description&gt;
&lt;/denchmark-code&gt;

NOTE: I did both scenarios in separate Ubuntu Artful Docker containers to ensure one does not affect the other.  I also removed libopencv-core-dev system package in each container, first, to ensure it was not affecting the result.
		</comment>
		<comment id='5' author='uartie' date='2018-02-13T09:37:09Z'>
		Try using GCC "-H" option to check list of included headers. Perhaps there is some mess with system headers.
		</comment>
		<comment id='6' author='uartie' date='2018-02-13T11:34:09Z'>
		The include headers list is the same for both scenarios that I described above (except for opencv install prefix obviously).
The difference becomes obvious if you compare the preprocessor output (g++ -E) for both scenarios.  That is, the opencv headers are treated differently by the preprocessor depending on the install location (see filename flag  at &lt;denchmark-link:https://gcc.gnu.org/onlinedocs/cpp/Preprocessor-Output.html&gt;https://gcc.gnu.org/onlinedocs/cpp/Preprocessor-Output.html&lt;/denchmark-link&gt;
)
If I add -isystem to the g++ compiler command when compiling the test program with opencv installed in custom prefix, the problem disappears.  The -isystem option tells the preprocessor to treat headers as system headers.  The preprocessor suppresses certain warnings when headers are treated as system headers (in this case, redundant-decls is suppressed).
Therefore, when opencv is installed into /usr/local, the headers are treated as system headers by default and the preprocessor suppresses the warnings automatically.
Clearly, the problem is that both opencv2/core/operations.hpp and opencv2/core/utility.hpp declare the same String format(...) method.  This is a bad idea.  One fix could be to place this in it's own header and just include it from operations.hpp and utility.hpp to avoid redefinition.
		</comment>
		<comment id='7' author='uartie' date='2018-02-13T11:43:16Z'>
		Thank you for the clarification!

the problem is that both opencv2/core/operations.hpp and opencv2/core/utility.hpp declare the same String format(...) method

Agreed. I will provide fix for this.
		</comment>
	</comments>
</bug>