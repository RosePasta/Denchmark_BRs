<bug id='5577' author='trentpack' open_date='2015-10-26T19:08:53Z' closed_time='2019-05-22T15:57:22Z'>
	<summary>OpenCV 3.0 Java Regression:  Missing functions in JNI dll.</summary>
	<description>
java.lang.UnsatisfiedLinkError: org.opencv.core.Core.multiply_2(JDDDDJ)V
The function is not compiled into the x86 version of opencv_java300.dll.
I believe there are other Core matrix functions that are broken as well.
	</description>
	<comments>
		<comment id='1' author='trentpack' date='2015-10-28T13:32:41Z'>
		&lt;denchmark-link:https://github.com/trentpack&gt;@trentpack&lt;/denchmark-link&gt;
, please provide more information about your cmake, compiler, java runtime, OpenCV (versions at least). Minimal example reproducing the problem would help solving the issue.
		</comment>
		<comment id='2' author='trentpack' date='2015-10-28T18:01:01Z'>
		import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Scalar;
import org.opencv.core.Size;


public class MissingJNI
{

    /**
     * Prints the matrix.
     *
     * @param mat the mat
     */
    public static void printMat( Mat mat )
    {
        System.out.println( mat );
        for ( int i = 0; i &lt; mat.rows(); i++ )
        {
            for ( int j = 0; j &lt; mat.cols(); j++ )
            {
                double[] data = mat.get( i, j );
                for ( double val : data )
                {
                    System.out.print( " " + val );
                }
                if (j &lt; mat.cols() -1)
                {
                    System.out.print( " :" );
                }
            }
            System.out.println();
        }
    }

    public static void main( String[] args )
    {

        System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
        Mat m = Mat.ones( new Size(3,3), CvType.CV_32F);
        Scalar scale = new Scalar(2.0,2.0,2.0);

        // PRINT OUT OPENCV and JVM INFO
        System.out.println("Java VM: " + System.getProperty( "java.runtime.version" ));
        System.out.println("Using OpenCV lib: " + Core.NATIVE_LIBRARY_NAME);
        System.out.println("Opencv ver: " + Core.VERSION);
        System.out.println();

        // PRINT OUT MATRIX BEFORE SCALING
        System.out.println("Before: ");
        printMat(m);

        // SCALE THE MATRIX
        System.out.println();
        System.out.print( "Multiply by scalar:  " );
        try
        {
            Core.multiply( m, scale, m );
            System.out.println("****PASSED.****");
        }
        catch (Throwable e)
        {
            System.out.println( "****FAILED.****" );
            System.out.println( "Error: " + e.getClass().getName()+ ": " + e.getMessage() );

        }

        // PRINT OUT MATRIX AFTER ATTEMPTING TO SCALE
        System.out.println();
        System.out.println("After: ");
        printMat(m);
        return;
    }

}
&lt;denchmark-h:h1&gt;&lt;/denchmark-h&gt;

Results using OpenCV 2.4.11:
Java VM: 1.7.0_71-b14
Using OpenCV lib: opencv_java2411
Opencv ver: 2.4.11.0
Before:
Mat [ 3_3_CV_32FC1, isCont=true, isSubmat=false, nativeObj=0x563d700, dataAddr=0x56349c0 ]
1.0 : 1.0 : 1.0
1.0 : 1.0 : 1.0
1.0 : 1.0 : 1.0
Multiply by scalar:  _PASSED._
After:
Mat [ 3_3_CV_32FC1, isCont=true, isSubmat=false, nativeObj=0x563d700, dataAddr=0x56349c0 ]
2.0 : 2.0 : 2.0
2.0 : 2.0 : 2.0
2.0 : 2.0 : 2.0
Results using OpenCV 3.0.0:
Java VM: 1.7.0_71-b14
Using OpenCV lib: opencv_java300
Opencv ver: 3.0.0
Before:
Mat [ 3_3_CV_32FC1, isCont=true, isSubmat=false, nativeObj=0x7af150, dataAddr=0x7af120 ]
1.0 : 1.0 : 1.0
1.0 : 1.0 : 1.0
1.0 : 1.0 : 1.0
Multiply by scalar:  _FAILED._
Error: java.lang.UnsatisfiedLinkError: org.opencv.core.Core.multiply_2(JDDDDJ)V
After:
Mat [ 3_3_CV_32FC1, isCont=true, isSubmat=false, nativeObj=0x7af150, dataAddr=0x7af120 ]
1.0 : 1.0 : 1.0
1.0 : 1.0 : 1.0
1.0 : 1.0 : 1.0
		</comment>
		<comment id='3' author='trentpack' date='2019-05-22T12:40:52Z'>
		I guess this is fixed in 4.1.0 and 3.4.6
Java VM: 12.0.1+12
Using OpenCV lib: opencv_java410
Opencv ver: 4.1.0
Before:
Mat [ 33CV_32FC1, isCont=true, isSubmat=false, nativeObj=0x250b46f0, dataAddr=0x250a9640 ]
1.0 : 1.0 : 1.0
1.0 : 1.0 : 1.0
1.0 : 1.0 : 1.0
Multiply by scalar:  PASSED.
After:
Mat [ 33CV_32FC1, isCont=true, isSubmat=false, nativeObj=0x250b46f0, dataAddr=0x250a9640 ]
2.0 : 2.0 : 2.0
2.0 : 2.0 : 2.0
2.0 : 2.0 : 2.0
Java VM: 12.0.1+12
Using OpenCV lib: opencv_java346
Opencv ver: 3.4.6
Before:
Mat [ 33CV_32FC1, isCont=true, isSubmat=false, nativeObj=0x251ea180, dataAddr=0x251cf7c0 ]
1.0 : 1.0 : 1.0
1.0 : 1.0 : 1.0
1.0 : 1.0 : 1.0
Multiply by scalar:  PASSED.
After:
Mat [ 33CV_32FC1, isCont=true, isSubmat=false, nativeObj=0x251ea180, dataAddr=0x251cf7c0 ]
2.0 : 2.0 : 2.0
2.0 : 2.0 : 2.0
2.0 : 2.0 : 2.0
		</comment>
	</comments>
</bug>