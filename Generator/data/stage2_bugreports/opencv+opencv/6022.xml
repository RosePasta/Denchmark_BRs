<bug id='6022' author='nlgranger' open_date='2016-01-27T19:52:39Z' closed_time='2016-02-04T15:11:39Z'>
	<summary>extended detectMultiscale fails when reject levels are requested</summary>
	<description>
When weights and rejection levels are requested, &lt;denchmark-link:http://docs.opencv.org/3.1.0/da/dd5/classcv_1_1BaseCascadeClassifier.html#afa5ead715ec7c9cf0ef71f210ba7715f&gt;detectMultiscale&lt;/denchmark-link&gt;
 is abnormally slow and eventually returns one square detection at the center of the image.
Tested with 3.1.0.r107.g1cd3c6f. It also failed with one of the earlier revisions of 3.1.0.
Bug has been confirmed by another tester on &lt;denchmark-link:http://answers.opencv.org/question/84605/detectmultiscale-fails-when-weights-are-requested/?answer=85636#post-id-85636&gt;answers.opencv.org&lt;/denchmark-link&gt;
 who has reported that it is working mostly correctly on  (more detections than the basic detectMultiScale).
Minimal working example: (the image I used is available &lt;denchmark-link:https://pbs.twimg.com/media/BhxWutnCEAAtEQ6.jpg&gt;here&lt;/denchmark-link&gt;
)
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;opencv2/opencv.hpp&gt;

using namespace std;
using namespace cv;

const string opencvDir = "/usr/share/opencv/haarcascades/";
const string WindowName = "Oscars";

int main() {
    CascadeClassifier faceCascade;
    if (!faceCascade.load(opencvDir + "/haarcascade_frontalface_alt2.xml")) {
        cerr &lt;&lt; "failed to load cascade features" &lt;&lt; endl;
        return -1;
    }

    Mat im = imread("oscar.jpg");
    Mat gray(im.cols, im.rows, CV_8U);
    cvtColor(im, gray, cv::COLOR_BGR2GRAY);

    double scaleFactor = 1.2;
    int minNeighbors = 2;
    int flags = 0;
    Size minSize = Size(50, 50);
    Size maxSize = Size(150, 150);
    bool outputRejectLevels = true;
    vector&lt;Rect&gt; objects;
    vector&lt;int&gt; rejectLevels;
    std::vector&lt;double&gt; levelWeights;

    // Broken version
    faceCascade.detectMultiScale(gray, objects, rejectLevels, levelWeights,
        scaleFactor, minNeighbors, flags,
        minSize, maxSize, outputRejectLevels);

    Mat preview = im.clone();
    for (Rect obj : objects)
            rectangle(preview, obj, Scalar(255, 0, 0));

    namedWindow(WindowName, WINDOW_AUTOSIZE);   
    imshow(WindowName, preview);
    waitKey(0);

    objects.clear();
    rejectLevels.clear();
    levelWeights.clear();

    // Working version
    faceCascade.detectMultiScale(gray, objects, scaleFactor, minNeighbors, 
        flags, minSize, maxSize);

    preview = im.clone();
    for (Rect obj : objects)
            rectangle(preview, obj, Scalar(255, 0, 0));
    namedWindow(WindowName, WINDOW_AUTOSIZE);   
    imshow(WindowName, preview);
    waitKey(0);

    return 0;    
}
	</description>
	<comments>
		<comment id='1' author='nlgranger' date='2016-01-28T10:21:41Z'>
		I confirm that this bug exists, as readable in the Q&amp;A post!
		</comment>
		<comment id='2' author='nlgranger' date='2016-01-28T10:24:45Z'>
		&lt;denchmark-link:https://github.com/Dikay900&gt;@Dikay900&lt;/denchmark-link&gt;
 I guess this might have something to do with this earlier bug and the &lt;denchmark-link:https://github.com/Itseez/opencv/issues/5347&gt;proposed fix&lt;/denchmark-link&gt;
. Could you check if it works at your side?
		</comment>
		<comment id='3' author='nlgranger' date='2016-01-28T12:13:22Z'>
		I just let the software run for a plain hour with the number of neighbors set at 0. Given at the following input image
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/4621239/12644105/d3fbaa90-c5c0-11e5-8b28-115f8ffab9fd.jpg&gt;&lt;/denchmark-link&gt;

the result is as follows
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/4621239/12644089/b1d4db3a-c5c0-11e5-951b-13f26a5f5d2e.png&gt;&lt;/denchmark-link&gt;

I am now trying the parameter at 1 to see if the algorithm does actually something usefull, because it seems now that it detects faces in every image location. If that is so, the error must be in the evaluation of features or in the calculation of the stage thresholds.
		</comment>
		<comment id='4' author='nlgranger' date='2016-01-28T12:48:05Z'>
		Second update:
Tried to take a look at the fact if older models where the cause. But even a newly trained model, trained this morning, doesn't work and keeps running very long.
		</comment>
		<comment id='5' author='nlgranger' date='2016-02-04T11:51:23Z'>
		So with the reverted line of &lt;denchmark-link:https://github.com/opencv/opencv/pull/5362&gt;#5362&lt;/denchmark-link&gt;
 it works again as expected?
		</comment>
		<comment id='6' author='nlgranger' date='2016-02-04T11:55:49Z'>
		These tests are done using the latest master branch, which is older than that PR. You are suggesting to revert that line and try again?
		</comment>
		<comment id='7' author='nlgranger' date='2016-02-04T11:56:44Z'>
		I just want to check that before digging deeper. Yes if you can revert this line and try again that would be great if you got some time.
		</comment>
		<comment id='8' author='nlgranger' date='2016-02-04T11:58:08Z'>
		I will check out in a second :) I will report back in minute or 5!
		</comment>
		<comment id='9' author='nlgranger' date='2016-02-04T12:16:46Z'>
		Good and bad news.

GOOD: I got it working by reverting back that line
BAD: we will have to get back to that PR and try to define a solution for adding the fix and ensuring that the extended function still works. For now I will just revert the line through a PR!

RESULT NOW WITH facemodel.detectMultiScale(temp, faces, rejectLevels, levelWeights, 1.1, 1, 0, Size(), Size(), true);
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/4621239/12814721/869fd45c-cb41-11e5-9a11-b6f8f94c9662.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='nlgranger' date='2016-02-04T12:22:48Z'>
		then can you open that pr reverting that commit simple as that?
We can then not solve the other issue but this is due to ABI_Compatibility in general.
		</comment>
		<comment id='11' author='nlgranger' date='2016-02-04T12:27:52Z'>
		I have no access to PRs so I need to actually submit one also :D I guess &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 or &lt;denchmark-link:https://github.com/vpisarev&gt;@vpisarev&lt;/denchmark-link&gt;
 will take care of the new one and push it in. Then I guess leaving it as it is is still the best way to go. In the near future we might be able to start up a discussion group on an improved cascade classifier interface and make a clone in the contrib repo for that?
		</comment>
		<comment id='12' author='nlgranger' date='2016-02-04T12:31:22Z'>
		yes that was my intention it has to be an own PR.
Yes you are right since the abi is now enforced we need to get a proper interface ourself in the contrib repo if needed.
Maybe i will start this on march since we need a beginning for this anyway. Currently i've got no time doing something here.
		</comment>
		<comment id='13' author='nlgranger' date='2016-02-04T12:33:23Z'>
		Same for me :D Stuff I would like to add, since I desperately need it for my PhD

Making a general feature selection interface. Because limiting it to HAAR and LBP only seems a waste of the power
Adding a better detection certainty calculation, because the numberOfNeighbours and the weights are both not the best and most correct options

		</comment>
		<comment id='14' author='nlgranger' date='2017-02-02T06:26:39Z'>
		Hi,
im using Code:
face_cascade.detectMultiScale(graySacleFrame, faces,rejectLevels,levelWeights,1.1, 2, 0|CASCADE_SCALE_IMAGE, Size(30, 30), Size(80, 80),true);
but it return some noise detection around me  but cant detect my big face in front of webcam :D
what is Solution? im using OpenCv 3.0.0
		</comment>
		<comment id='15' author='nlgranger' date='2017-02-03T12:25:39Z'>
		But what is the size of your face? If it is larger than 80x80 pixels it will not get detected ...
		</comment>
	</comments>
</bug>