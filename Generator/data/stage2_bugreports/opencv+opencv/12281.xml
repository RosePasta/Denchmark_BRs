<bug id='12281' author='cv3d' open_date='2018-08-22T20:35:09Z' closed_time='2018-08-23T21:18:09Z'>
	<summary>`cv::cuda::pow` cannot handle negative values properly</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.0.0-pre
Operating System / Platform =&gt; Windows 64 Bit (perhaps others)
Compiler =&gt; Visual Studio 2013  (perhaps others)
WITH_CUDA

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Results of cv::cuda::pow with negative input and odd powers (e.g. 3) are all zeros (in case of int-type input) or positive value (in case of float-type input).
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

npMat = np.arange(-2, 3) #[-2 -1  0  1  2]
cuMat = cv.cuda_GpuMat()
cuMat.upload(npMat)

print(npMat)
print(npMat**3)
print(cv.cuda.pow(cuMat, 3).download().ravel())
Note that I am using Python wrapper from &lt;denchmark-link:https://github.com/opencv/opencv/pull/12234&gt;#12234&lt;/denchmark-link&gt;
, but the bug should occur in C++ as well
&lt;denchmark-h:h5&gt;Expected result&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;[-2 -1  0  1  2]
[-8 -1  0  1  8]
[-8 -1  0  1  8]
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Actual result&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;[-2 -1  0  1  2]
[-8 -1  0  1  8]
[0 0 0 1 8] #for int64, int32, int16, int8 input types
#OR
[ 8.  1.  0.  1.  8.] #for float32, float64 input types
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='cv3d' date='2018-08-23T06:57:17Z'>
		Input, actual result, expected result?
		</comment>
		<comment id='2' author='cv3d' date='2018-08-23T11:54:22Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 I clarified the problem further.
		</comment>
		<comment id='3' author='cv3d' date='2018-08-23T12:36:18Z'>
		CUDA itself doesn't like negative values for __powf function:

https://devtalk.nvidia.com/default/topic/406489/unsuspected-work-of-pow-function-pow-device-function-works-incorrectly-witn-negative-numbers/
https://devtalk.nvidia.com/default/topic/528493/__powf-x-y-gives-nan/

In OpenCV CUDA code I see &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.4.2/modules/cudaarithm/src/cuda/math.cu#L296-L297&gt;this hack&lt;/denchmark-link&gt;
, but I have no idea where it can zero result values.
What is uploaded GpuMat type?
		</comment>
		<comment id='4' author='cv3d' date='2018-08-23T13:15:28Z'>
		I tried various types (float32, float64, int64, int32, int16, int8), and all of them fail. Please check the comment in fron of the actual result for details.
		</comment>
		<comment id='5' author='cv3d' date='2018-08-23T13:57:23Z'>
		Well, there is a glitch in the hack!! The input needs to be passed as an absolute value to the __pow function, but it was passed as-is, and the absf-value was taken before the call to the pow function.
BTW: Please remove the incomplete tag
		</comment>
		<comment id='6' author='cv3d' date='2018-08-23T21:18:09Z'>
		I am closing this issue as the bot seems confused, and cannot recognize it is already fixed.
		</comment>
		<comment id='7' author='cv3d' date='2018-08-23T21:41:34Z'>
		GitHub closes when patch is merged into master branch (after next "Merge 3.4" patch).
"Closing" keywords doesn't work for non-default branch.
		</comment>
	</comments>
</bug>