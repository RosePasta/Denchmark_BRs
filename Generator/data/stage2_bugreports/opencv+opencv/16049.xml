<bug id='16049' author='vwvw' open_date='2019-12-03T14:44:10Z' closed_time='2020-01-28T16:24:20Z'>
	<summary>solvePnPGeneric Python Binding crash when reprojectionError is not passed as argument</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.1.2
Operating System / Platform =&gt; Linux / Ubuntu 18.04
Compiler =&gt; ‚ùî

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

When running the code below that call  from Python the program crashes because the C++ code expect a different type for   from the one passed by  by default. The argument is however &lt;denchmark-link:https://docs.opencv.org/master/d9/d0c/group__calib3d.html#ga624af8a6641b9bdb487f63f694e8bb90&gt;documented&lt;/denchmark-link&gt;
 as optional. Passing the argument with the correct type avoid the error.
I suspect that the binding of the solvePnPGeneric function do not pass the correct argument type for reprojectionError by default.
The error:
Traceback (most recent call last):
  File "error.py", line 15, in &lt;module&gt;
    obj_points, img_points, cameraMatrix, distCoeffs #, reprojectionError=r
cv2.error: OpenCV(4.1.2) /io/opencv/modules/calib3d/src/solvepnp.cpp:1017: error: (-2:Unspecified error) in function 'int cv::solvePnPGeneric(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, bool, cv::SolvePnPMethod, cv::InputArray, cv::InputArray, cv::OutputArray)'
&gt; Type of reprojectionError must be CV_32FC1 or CV_64FC1!:
&gt;     'type == CV_32FC1 || type == CV_64FC1'
&gt; where
&gt;     'reprojectionError.type()' is 0 (CV_8UC1)
This might be closely linked to &lt;denchmark-link:https://github.com/opencv/opencv/issues/16040&gt;#16040&lt;/denchmark-link&gt;
 which is about Java binding of solvePnPGeneric
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Run this code (OpenCV 4.1.2 / Python 3.6.8)
import numpy as np
import cv2

obj_points = np.array([[0, 0, 0], [0, 1, 0], [1, 1, 0], [1, 0, 0]], dtype=np.float32)
img_points = np.array(
    [[700, 400], [700, 600], [900, 600], [900, 400]], dtype=np.float32
)

cameraMatrix = np.array(
    [[712.0634, 0, 800], [0, 712.540, 500], [0, 0, 1]], dtype=np.float32
)
distCoeffs = np.array([[0, 0, 0, 0]], dtype=np.float32)
#r = np.array([], dtype=np.float32)
x, r, t, e = cv2.solvePnPGeneric(
    obj_points, img_points, cameraMatrix, distCoeffs #, reprojectionError=r
)
print(e)
print(t)
The error can be bypassed by uncommenting the #r = np.array([], dtype=np.float32) lines.
Thanks for the amazing work and happy to help or provide more information!
	</description>
	<comments>
		<comment id='1' author='vwvw' date='2019-12-04T15:26:31Z'>
		Python bindings is not able to pass default value for "OutputArray reprojectionError = noArray()" parameter.
Need to fix bindings generator. Corresponding test check is &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.4.8/modules/python/test/test_misc.py#L53&gt;here&lt;/denchmark-link&gt;
 (commented out).
		</comment>
		<comment id='2' author='vwvw' date='2019-12-04T18:48:58Z'>
		
Python bindings is not able to pass default value for "OutputArray reprojectionError = noArray()" parameter.

i don't quite agree. i could reproduce it from c++:
&lt;denchmark-code&gt;	cv::Mat_&lt;float&gt; obj_points(4,3);   obj_points &lt;&lt; 0, 0, 0,  0, 1, 0,  1, 1, 0,  1, 0, 0;
	cv::Mat_&lt;float&gt; img_points(4,2);   img_points &lt;&lt; 700, 400,  700, 600,  900, 600,  900, 400;
	cv::Mat_&lt;float&gt; cameraMatrix(3,3); cameraMatrix &lt;&lt; 712.0634, 0, 800,  0, 712.540, 500,  0, 0, 1;
	cv::Mat_&lt;float&gt; distCoeffs(1,4);   distCoeffs &lt;&lt; 0, 0, 0, 0;

	Mat rep; // this is the conflicting CV_8UC1 
	vector&lt;Mat&gt; rvecs,tvecs;
        float r = cv::solvePnPGeneric( obj_points, img_points, cameraMatrix, distCoeffs, rvecs, tvecs, false, SOLVEPNP_UPNP, noArray(), noArray(), rep );

&lt;/denchmark-code&gt;

leading to:
&lt;denchmark-code&gt;&gt;     'type == CV_32FC1 || type == CV_64FC1'
&gt; where
&gt;     'reprojectionError.type()' is 0 (CV_8UC1)
) in int cv::solvePnPGeneric(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArrayOfArrays, cv::Output
ArrayOfArrays, bool, cv::SolvePnPMethod, cv::InputArray, cv::InputArray, cv::OutputArray), file C:\p\opencv\modules\calib3d\src\
solvepnp.cpp, line 1017
&lt;/denchmark-code&gt;

it's the very same thing &lt;denchmark-link:https://gist.github.com/berak/7dd8a872b5bc9cf9893f8a1bec9aa201#file-pyopencv_generated_funcs-h-L26&gt;done in the python wrappers&lt;/denchmark-link&gt;

so let's look here:



opencv/modules/calib3d/src/solvepnp.cpp


        Lines 1012 to 1017
      in
      4c71dbf






 if (reprojectionError.needed()) 



 { 



 int type = reprojectionError.type(); 



     reprojectionError.create(solutions, 1, type); 



 CV_CheckType(reprojectionError.type(), type == CV_32FC1 || type == CV_64FC1, 



 "Type of reprojectionError must be CV_32FC1 or CV_64FC1!"); 





the default noArray() won't trigger needed(), but once we pass (a ref to) an empty Mat, we get past that check and it creates the wrong type (still CV_8U).
why not create a Mat of correct type / size like:
&lt;denchmark-code&gt; reprojectionError.create(solutions, 1, CV_64FC1);
&lt;/denchmark-code&gt;

and remove the type check / assertion ?
		</comment>
		<comment id='3' author='vwvw' date='2019-12-04T19:05:27Z'>
		OutputArray param = noArray() is used in meaning of optional output parameter, which should be calculated only if requested. Calculation (which can be heavy) is guarded by .needed() check.
Python bindings is not able to work with OutputArray directly. They using Mat and the problem is in that (bindings generator and wrappers should be fixed).
However removal of type check can unlock calling of this function with empty Mat as OutputArray parameter:

with 64F type by default?
or max(_ipoint.depth(), _opoint.depth()) == CV_64F ? CV_64F : CV_32F

		</comment>
		<comment id='4' author='vwvw' date='2020-01-20T19:29:54Z'>
		Hi &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 , can I look into this issue?
		</comment>
		<comment id='5' author='vwvw' date='2020-01-20T20:17:57Z'>
		You can try to unlock function for empty "Mat".
Start from adding corresponding simple test (modules/calib3d/misc/python/test/test_solvepnp.py) - no need to check accuracy, just check that bindings work (non empty result of "expected" type).
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

But please avoid part of issue about:

OutputArray param = noArray()

Mentor with strong Python bindings experience is required for this task.
		</comment>
		<comment id='6' author='vwvw' date='2020-01-21T06:48:21Z'>
		Sure &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
, I'll do the following:

Add test in modules/calib3d/misc/python/test/test_solvepnp.py
Change this line 


opencv/modules/calib3d/src/solvepnp.cpp


         Line 1015
      in
      4c71dbf






 reprojectionError.create(solutions, 1, type); 





by adding max(_ipoint.depth(), _opoint.depth()) == CV_64F ? CV_64F : CV_32F for default type

		</comment>
	</comments>
</bug>