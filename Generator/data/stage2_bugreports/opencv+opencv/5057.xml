<bug id='5057' author='opencv-pushbot' open_date='2015-07-27T11:39:03Z' closed_time='2015-08-25T14:51:01Z'>
	<summary>OpenCL allocation failures in unit tests</summary>
	<description>
Transferred from &lt;denchmark-link:http://code.opencv.org/issues/4461&gt;http://code.opencv.org/issues/4461&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;|| Fraser Cormack on 2015-07-03 09:44
|| Priority: Normal
|| Affected: branch 'master' (3.0-dev)
|| Category: ocl
|| Tracker: Bug
|| Difficulty: 
|| PR: https://github.com/Itseez/opencv/pull/4176
|| Platform: Any / Any
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;OpenCL allocation failures in unit tests&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Some tests in @OCL_Photo/FastNlMeansDenoising@ and @OCL_Photo/FastNlMeansDenoising_hsep@ try to allocate buffers for their UMatrices of size greater than is required to be supported by an OpenCL implementation. They then fail like so:

&lt;pre&gt;
[ RUN      ] OCL_Photo/FastNlMeansDenoising.Mat/12
unknown file: Failure
C++ exception with description "../modules/core/src/umatrix.cpp:274: error: (-215) u != 0 in function create
" thrown in the test body.
&lt;/pre&gt;

For a full-profile implementation, @CL_DEVICE_MAX_MEM_ALLOC_SIZE@ must be at least 128MB, but @OCL_Photo/FastNlMeansDenoising.Mat/12@ tries to allocate over 141MB.

I'm wondering what OpenCV's policy regarding these sorts of allocations with OpenCL is. The user is entitled to try and fail to allocate that much memory. Should it crash? Should it fall back to host if it can't successfully allocate enough memory? I think that the unit tests should at least accommodate conformant implementations with restricted memory. I appreciate that this idea might not be to everyone's tastes, though.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;History&lt;/denchmark-h&gt;

&lt;denchmark-h:h5&gt;Alexander Alekhin on 2015-07-06 10:51&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;We have support to skip "large" tests, but it is available only in case of performance tests: "checkDeviceMaxMemoryAllocSize".

You may filter out these tests if you run on your hardware: --gtest_filter=*:-*FastNlMeansDenoising*
You may disable OpenCL optimizations.

Test usually should fail if something went wrong.
But T-API should not fail the user code.

Currently we can't reproduce this problem. I reviewed "OpenCLAllocator::allocate" code again and there are several places with fallback code to StdAllocator, so some debugging is required to catch this problem, but it is impossible without more information and/or similar HW setup.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Fraser Cormack on 2015-07-09 08:43&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;What I see is that during the course of the FastNlMeansDenoising test, @UMat::create()@ is called with 14112 rows and 624 cols. At @umatrix.cpp:267@ it then tries to allocate this using @getStdAllocator()@, since @allocator@ is null (I'm not sure if this is bad or not).

@allocate()@ at @ocl.cpp:4186@ works out the total size to be @140894208@. At line 4224 is calls @bufferPool.allocate(total)@.

Eventually at @ocl.cpp:3989@ is calls @clCreateBuffer()@ with the aligned size of @141557760@. This is greater than the minimum required size, but on the very next line it does this:

&lt;pre&gt;
CV_Assert(retval == CL_SUCCESS);
&lt;/pre&gt;

This is what fails the test. There's no chance for an OpenCL implementation to report @CL_INVALID_BUFFER_SIZE@ even though it's conformant to do so in this situtation.

I suppose it should be possible to query the maximum allocation size of the devices you test with, create a matrix with that size, then see what happens.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Alexander Alekhin on 2015-07-09 10:01&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Thanks for update! I will try to fix fallback code path in case of exceptions.
-   Assignee set to Alexander Alekhin
-   Status changed from New to Open
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Alexander Alekhin on 2015-07-15 15:43&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;-   Pull request set to https://github.com/Itseez/opencv/pull/4176
&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>