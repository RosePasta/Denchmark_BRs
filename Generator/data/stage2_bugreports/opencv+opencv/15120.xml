<bug id='15120' author='paulbauriegel' open_date='2019-07-22T13:06:55Z' closed_time='2019-07-31T15:04:49Z'>
	<summary>Issue loading ONNX with Split layer</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.1.1-pre based on latest master
Operating System / Platform =&gt; Ubuntu 19.04 64Bit
Compiler =&gt; gcc 8.3.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

OpenCV fails to load a model that contains a Split layer:
&lt;denchmark-link:https://user-images.githubusercontent.com/20282916/61634654-720e6d80-ac9a-11e9-9715-89255537cea8.png&gt;&lt;/denchmark-link&gt;

Error Message:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
cv2.error: OpenCV(4.1.1-pre) /home/paul/openvino-toolkit/opencv/modules/dnn/src/onnx/onnx_importer.cpp:320: error: (-204:Requested object was not found) Blob 64 not found in const blobs in function 'getBlob'
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;


Model: https://drive.google.com/open?id=1tOKjcP3iJg0vDxq4valpcxliIt5-rm4T

net = cv2.dnn.readNetFromONNX("model_lcnn_29v2.onnx")
	</description>
	<comments>
		<comment id='1' author='paulbauriegel' date='2019-07-27T19:13:45Z'>
		&lt;denchmark-link:https://github.com/paulbauriegel&gt;@paulbauriegel&lt;/denchmark-link&gt;
, Thanks for report! We opened a PR &lt;denchmark-link:https://github.com/opencv/opencv/pull/15168&gt;#15168&lt;/denchmark-link&gt;
 (still requires tests). Can you please test your model? The following code at least can run it:
import cv2 as cv
import numpy as np

net = cv.dnn.readNet('model_lcnn_29v2.onnx')
inp = np.random.standard_normal([2, 1, 128, 128]).astype(np.float32)
net.setInput(inp)
out = net.forward()
print(out.shape)
May I ask you, is it designed to have 2x1x128x128 or this is a problem of ONNX conversion and you expected 1x1x128x128?
		</comment>
		<comment id='2' author='paulbauriegel' date='2019-07-28T13:50:05Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 Thanks a lot for the patch. I did test the PR and loading + inference works perfect.
The resulting output shape is (2, 80013), and that should be correct (I was however more interested in the output of node 212, and that seems to match as well). I also compared the results of some sample images with the output of the onnxruntime and they match also.
The shape of 2x1x128x128 was a workaround, because for the 1x1x128x128 model some inference engines did not want to accept a batch size of 2. And my common use case for this model was to compare the embeddings of two faces.
		</comment>
	</comments>
</bug>