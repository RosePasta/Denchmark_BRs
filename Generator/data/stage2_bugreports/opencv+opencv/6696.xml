<bug id='6696' author='bbogart' open_date='2016-06-17T16:57:06Z' closed_time='2016-07-11T14:01:15Z'>
	<summary>Segfault running merge (merge8u) on very large images.</summary>
	<description>
Merging very large images (60,000 x 10,000) causes a segfault.
&lt;denchmark-h:h3&gt;Please state the information for your system&lt;/denchmark-h&gt;


OpenCV version: 3.0.0
Host OS: Linux (Ubuntu 14.04)

&lt;denchmark-h:h3&gt;In which part of the OpenCV library you got the issue?&lt;/denchmark-h&gt;

Operations on Arrays
&lt;denchmark-h:h3&gt;Expected behaviour&lt;/denchmark-h&gt;

Merge without segfault
&lt;denchmark-h:h3&gt;Actual behaviour&lt;/denchmark-h&gt;

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff6ee7a15 in cv::merge8u(unsigned char const*, unsigned char, int, int) () from /usr/local/lib/libopencv_core.so.3.0
&lt;denchmark-h:h3&gt;Additional description&lt;/denchmark-h&gt;

Changing image size smaller solves the issue. Note the below program only uses 5% of my 32GB of RAM.
&lt;denchmark-h:h3&gt;Code example to reproduce the issue / Steps to reproduce the issue&lt;/denchmark-h&gt;

Please try to give a full example which will compile as is.
&lt;denchmark-code&gt;/*
Bug Example
Build with:   g++ bug.cpp -o bug `pkg-config --libs opencv` -ggdb -std=c++11
*/


#include &lt;vector&gt; // For dynamic arrays.

using namespace std;

#include "opencv2/highgui.hpp"
#include "opencv2/core.hpp"
#include "opencv2/imgproc.hpp"

using namespace cv;

int main(int argc, char *argv[]) {

    int width = 60000; // Segfault in merge8u
    //int width = 10000; // No segfault
    int height = 10000;

    Mat destImageBGR = Mat(height, width, CV_8UC3);
    Mat destImageA = Mat(height, width, CV_8UC1);

    // The following leads to segfault (image size too large?)
    vector&lt;Mat&gt; planes;
    split(destImageBGR, planes);
    planes.push_back(destImageA);
    merge(planes, destImageBGR); // Rebuild BGR image with alpha

    return 0;

}
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='bbogart' date='2016-06-26T21:14:17Z'>
		This problem is occurred by loop-counter-overflow in merge_() function.
len = width * height = 60000*10000 = 600,000,000.
max of j = len * 4 = 2,400,000,000 , which is over INT_MAX.
734                         vmerge(src0 + i, src1 + i, src2 + i, src3 + i, dst + j);
(gdb) p i
$1 = 536870912
(gdb) p j
$2 = -2147483648
Simple solution is to change type of j from int to int64.
( Maybe there is the same problem in split_(). )
		</comment>
	</comments>
</bug>