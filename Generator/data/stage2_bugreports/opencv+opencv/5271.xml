<bug id='5271' author='cwack-letsdev' open_date='2015-08-30T16:12:29Z' closed_time='2015-12-21T12:47:46Z'>
	<summary>iOS: Memory Leak</summary>
	<description>
Hi,
I'm using the version 3.0 of opencv inside an iOS project in c++ classes.
I noticed some huge memory leaks until the app crashes.
Actually I don't know exactly which method produces the memory leak, the only thing I see in the iOS profiler is that cv::fastmalloc is the cause.
My current workaround to avoid this is to create a cv::Mat not as a pointer on the heap but by local reference. But what I want to do is to be able to allocate the cv::Mat on the heap and use it within the app.
Currently I assume that the memory leak is produced by calling the cv::Mat clone() method to a local variable of the Mat.
Finding out if the memory leak still exists I'm using the Xcode profiler and it shows the cv::fastmalloc as provider for the leak.
But that you are able to research for the error I'll list the cv methods I use:
on the heap Mat as pointer:
-cv::resize
-cv::flip
-cv::Mat.clone()
-cv::warpPerspective
-cv::cvtColor
-cv::imencode
-cv::imdecode
on the cloned Mat:

cv::Canny
cv::dilate
cv::findContours
cv::convexHull
cv::GaussianBlur
cv::contourArea

KR Christian Wack
	</description>
	<comments>
		<comment id='1' author='cwack-letsdev' date='2015-08-30T17:36:56Z'>
		cv::fastmalloc is a wrapper for malloc only, so it is not a reason for memory leaks.
		</comment>
		<comment id='2' author='cwack-letsdev' date='2015-08-30T17:58:33Z'>
		ok, but it doesn't help here. The memory leak exists. I'm not an open cv committer, so I don't know where the memory leaks could occur here, when I allocate a Mat on heap.
		</comment>
		<comment id='3' author='cwack-letsdev' date='2015-08-31T08:32:09Z'>
		&lt;denchmark-link:https://github.com/cwack-letsdev&gt;@cwack-letsdev&lt;/denchmark-link&gt;
, can you please provide minmal code example reproducing this issue?
		</comment>
		<comment id='4' author='cwack-letsdev' date='2015-09-17T11:26:16Z'>
		
[the workaround is] to create a cv::Mat not as a pointer on the heap but by local reference. But what I want to do is to be able to allocate the cv::Mat on the heap and use it within the app

Actually, you don't have to (i.e. should not) create a cv::Mat on the heap as it is just a wrapper for data which is already stored on the heap.
So don't do cv::Mat* m = new cv::Mat() but just cv::Mat m and let OpenCV handle the memory for you - does that meet your requirements?
The memory leak you observed could actually occur in your own memory management (because it vanishes when you use cv::Mat instances).
		</comment>
		<comment id='5' author='cwack-letsdev' date='2015-09-17T11:48:16Z'>
		Thanks for your answers. First of all, I'll try to prepare an example project for you. But we have a very memory "expensive" ios / android application and I don't want to copy or clone images so often to safe RAM memory as much as possible as well as the related peaks in the memory. In the application I have the need to be able to create a cv::Mat instance as a pointer on the heap and I assume in the opencv provided jni wrapper of cv::Mat the pointer has been created also on the heap, right?
Actually my assumption is that the leak will occur if I do the following:

Instantiate on the heap: new cv::Mat()
use for further image detection processes a clone of cv::Mat by the clone method to a local variable.
delete the cv::Mat I have created on heap, but the cloned mat will not be destroyed automatically by the cv:Mat 's reference counting then the leak of the image cv::Mat will be created.

But it's only my first assumption, as I said I'm going to build an extra example to further research.
KR Christian
		</comment>
	</comments>
</bug>