<bug id='11356' author='alexionby' open_date='2018-04-20T09:09:54Z' closed_time='2018-05-03T05:50:17Z'>
	<summary>dnn module Unknown layer type Shape in conv2d_transpose/Shape in function populateNet</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4.1
Operating System / Platform =&gt; Ubuntu 17.10
Compiler =&gt; python 3.6.5 Anaconda / gcc version 7.2.0 (Ubuntu 7.2.0-8ubuntu3.2)
Tensorflow =&gt; 1.7.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

I tried to implement Unet with Transposed convolutions and faced some troubles with them.
 error: OpenCV(3.4.1) /feedstock_root/build_artefacts/opencv_1520722599420/work/opencv-3.4.1/modules/dnn/src/tensorflow/tf_importer.cpp:1582: error: (-2) Unknown layer type Shape in op sequential_1/conv2d_transpose_1/Shape in function populateNet
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;# coding: utf-8

# In[10]:
import tensorflow as tf
import numpy as np


# In[11]:
tf.__version__


# In[12]:
x = tf.placeholder(tf.float32, shape=(None, 288, 288, 1))

model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu', padding='same', input_shape=(288,288,1)),
    tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu', padding='same'),
    tf.keras.layers.MaxPool2D(padding='same'),
    tf.keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation='relu', padding='same'),
    tf.keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation='relu', padding='same'),
    tf.keras.layers.Conv2DTranspose(filters=32, kernel_size=(2,2), activation='relu', strides=2, padding='same'),
    tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu', padding='same'),
    tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu', padding='same'),
    tf.keras.layers.Conv2D(filters=1, kernel_size=(1,1), activation='sigmoid')
])


# In[24]:
img = np.random.random((1,288,288,1)).astype('float32')
mask = np.random.random((1,288,288,1)).astype('float32')


# In[14]:
input_img = tf.placeholder(tf.float32, shape=(None, 288, 288, 1), name='input_img')
output = model(input_img)


# In[15]:
labels = tf.placeholder(tf.float32, shape=(None, 288, 288, 1), name='labels')
loss = tf.reduce_mean(tf.losses.sigmoid_cross_entropy(labels, output))


# In[16]:
saver = tf.train.Saver()
train_step = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    output_val = sess.run(output, {input_img: img})
    
    for i in range(10):
        train_step.run(feed_dict = {input_img: img, labels: mask})
    
    saver.save(sess, 'out/graph')
    tf.train.write_graph(sess.graph_def, 'out/', 'graph.pbtxt')


# And then:
# 
# ```
# python freeze_graph.py 
#     --input_graph out/graph.pbtxt  
#     --input_checkpoint out/   
#     --output_graph out/frozen_graph.pb   
#     --output_node_names sequential_1/conv2d_7/Sigmoid, conv2d_1_input
# ```

# In[17]:
get_ipython().run_line_magic('run', 'freeze_graph.py --input_graph out/graph.pbtxt --input_checkpoint out/graph --output_graph out/frozen_graph.pb --output_node_names sequential_1/conv2d_7/Sigmoid,conv2d_1_input')

# In[28]:
import cv2

inputBlob = cv2.dnn.blobFromImage(img[0,:,:,0])
net = cv2.dnn.readNetFromTensorflow('out/frozen_graph.pb')

net.setInput(inputBlob)
result = net.forward()
&lt;/denchmark-code&gt;

ZIP with original notebook:
&lt;denchmark-link:https://github.com/opencv/opencv/files/1931465/unet_test.zip&gt;unet_test.zip&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='alexionby' date='2018-04-20T09:21:20Z'>
		&lt;denchmark-link:https://github.com/alexionby&gt;@alexionby&lt;/denchmark-link&gt;
, can you add a reference to  or at least a python code to make it easier to reproduce?
		</comment>
		<comment id='2' author='alexionby' date='2018-04-20T09:34:09Z'>
		Here is content of my  folder with 
&lt;denchmark-link:https://github.com/opencv/opencv/files/1931557/out_folder.zip&gt;out_folder.zip&lt;/denchmark-link&gt;

Also i recreated my code as a single script to run just  for simplicitty
(there are two files:  and )
&lt;denchmark-link:https://github.com/opencv/opencv/files/1931579/just_python_script.zip&gt;just_python_script.zip&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='alexionby' date='2018-04-20T13:53:58Z'>
		&lt;denchmark-link:https://github.com/alexionby&gt;@alexionby&lt;/denchmark-link&gt;
, Thank you! May I ask you test your model with changes from a pull request &lt;denchmark-link:https://github.com/opencv/opencv/pull/11362&gt;#11362&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='4' author='alexionby' date='2018-04-20T15:36:21Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 , I will try.
		</comment>
		<comment id='5' author='alexionby' date='2018-04-21T13:15:29Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
, Thank you! I've built the library and now it works fine. Now I am able to get an output from  ,  but it's just a random value. So I will try to train model on a real data and make it more sensible.
		</comment>
		<comment id='6' author='alexionby' date='2018-04-24T18:57:32Z'>
		&lt;denchmark-link:https://github.com/alexionby&gt;@alexionby&lt;/denchmark-link&gt;
, Can we close an issue?
		</comment>
		<comment id='7' author='alexionby' date='2018-04-25T08:29:21Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 , yes we can. But i want to show you one more thing.
I found your example here:  &lt;denchmark-link:https://github.com/opencv/opencv/issues/10135#issuecomment-346795778&gt;#10135 (comment)&lt;/denchmark-link&gt;

And with TF_1.7 and opencv_3.4.1 it produces error.
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow import keras as K
import numpy as np

# Define the model in Keras
model = K.models.Sequential()

model.add(K.layers.Conv2D(32,kernel_size=(3,3),input_shape=(28,28,1)))
model.add(K.layers.Activation('relu'))

model.add(K.layers.Conv2D(32,kernel_size=(3,3)))
model.add(K.layers.Activation('relu'))

model.add(K.layers.MaxPooling2D(pool_size=(2,2)))

a,b,c,d = model.output_shape
a = b*c*d

print(model.output_shape)

model.add(K.layers.Permute([1, 2, 3]))  # Indicate NHWC data layout
print(model.output_shape)

model.add(K.layers.Reshape((a,)))
print(model.output_shape)

model.add(K.layers.Dense(128))
model.add(K.layers.Activation('relu'))

model.add(K.layers.Dense(10))
model.add(K.layers.Activation('softmax'))

# Get Keras prediction
inp = np.random.standard_normal([1, 28, 28, 1]).astype(np.float32)
tf_out = model.predict(inp)

# Serialize the graph
sess = K.backend.get_session()

tf.train.write_graph(sess.graph, "", "graph.pbtxt", as_text=True)
constant_graph = tf.graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(), ['activation_3/Softmax'])
tf.train.write_graph(constant_graph, "", "graph.pb", as_text=False)
#tf.train.write_graph(constant_graph, "", "graph.pbtxt", as_text=True)

# Get OpenCV prediction
import cv2 as cv

net = cv.dnn.readNetFromTensorflow('graph.pb')
net.setInput(inp.transpose(0, 3, 1, 2))
cv_out = net.forward()

print(np.max(np.abs(tf_out - cv_out)))

(None, 12, 12, 32)
(None, 12, 12, 32)
(None, 4608)
INFO:tensorflow:Froze 8 variables.
Converted 8 variables to const ops.

---------------------------------------------------------------------------
error                                     Traceback (most recent call last)
&lt;ipython-input-2-98902afc08a0&gt; in &lt;module&gt;()
     46 import cv2 as cv
     47 
---&gt; 48 net = cv.dnn.readNetFromTensorflow('graph.pb')
     49 net.setInput(inp.transpose(0, 3, 1, 2))
     50 cv_out = net.forward()

error: OpenCV(3.4.1) /feedstock_root/build_artefacts/opencv_1520722599420/work/opencv-3.4.1/modules/dnn/src/tensorflow/tf_importer.cpp:1582: error: (-2) Unknown layer type Shape in op reshape/Shape in function populateNet
&lt;/denchmark-code&gt;

But with TF_1.4.1 and opencv_3,3,1 it looks a little bit differ, but works correct:
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow import keras as K
import numpy as np

# Define the model in Keras
model = K.models.Sequential()

model.add(K.layers.Conv2D(32,kernel_size=(3,3),input_shape=(28,28,1)))
model.add(K.layers.Activation('relu'))

model.add(K.layers.Conv2D(32,kernel_size=(3,3)))
model.add(K.layers.Activation('relu'))

model.add(K.layers.MaxPooling2D(pool_size=(2,2)))

a,b,c,d = model.output_shape
a = b*c*d

print(model.output_shape)

model.add(K.layers.Permute([1, 2, 3]))  # Indicate NHWC data layout
print(model.output_shape)

model.add(K.layers.Reshape((a,)))
print(model.output_shape)

model.add(K.layers.Dense(128))
model.add(K.layers.Activation('relu'))

model.add(K.layers.Dense(10))
model.add(K.layers.Activation('softmax'))

# Get Keras prediction
inp = np.random.standard_normal([1, 28, 28, 1]).astype(np.float32)
tf_out = model.predict(inp)

# Serialize the graph
sess = K.backend.get_session()

tf.train.write_graph(sess.graph, "", "graph.pbtxt", as_text=True)
constant_graph = tf.graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(), ['activation_4/Softmax'])
tf.train.write_graph(constant_graph, "", "graph.pb", as_text=False)
#tf.train.write_graph(constant_graph, "", "graph.pbtxt", as_text=True)

# Get OpenCV prediction
import cv2 as cv

net = cv.dnn.readNetFromTensorflow('graph.pb')
net.setInput(inp.transpose(0, 3, 1, 2))
cv_out = net.forward()

print(np.max(np.abs(tf_out - cv_out)))
&lt;/denchmark-code&gt;

Maybe it's important. The only difference is name of output layer : 'activation_3/Softmax' or  'activation_4/Softmax'
		</comment>
		<comment id='8' author='alexionby' date='2018-04-26T06:38:35Z'>
		&lt;denchmark-link:https://github.com/alexionby&gt;@alexionby&lt;/denchmark-link&gt;
, thank you for a well-reproducible code! Tested it with the following versions:
&gt;&gt;&gt; print tf.__version__
1.6.0-rc1
&gt;&gt;&gt; print K.__version__
2.1.4-tf
Maximal absolute difference is 2.2351742e-08.
Did you try release version &lt;denchmark-link:https://github.com/opencv/opencv/tree/3.4.1&gt;OpenCV 3.4.1&lt;/denchmark-link&gt;
 or the latest state of &lt;denchmark-link:https://github.com/opencv/opencv/tree/3.4&gt;3.4 branch&lt;/denchmark-link&gt;
? It might has necessary fixes.
		</comment>
		<comment id='9' author='alexionby' date='2018-04-26T14:02:14Z'>
		&lt;denchmark-link:https://github.com/alexionby&gt;@alexionby&lt;/denchmark-link&gt;
    i also find the same problem :Unknown layer type Shape in op reshape/Shape in function populateNet
		</comment>
		<comment id='10' author='alexionby' date='2018-04-27T07:32:27Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 I run your unet_test.py and got this : cv2.error: C:\projects\opencv-python\opencv\modules\dnn\src\tensorflow\tf_importer.cpp:1296: error: (-2) Unknown layer type Shape in op sequential_1/conv2d_transpose_1/Shape in function cv::dnn::experimental_dnn_v2::`anonymous-namespace'::TFImporter::populateNet
python3.5 + tf1.4 + opencv3.3.1, I also find Tf 1.7+ opencv3.4 don't work.
		</comment>
		<comment id='11' author='alexionby' date='2018-04-27T10:19:06Z'>
		&lt;denchmark-link:https://github.com/lfydegithub&gt;@lfydegithub&lt;/denchmark-link&gt;
, , . Try the latest state of OpenCV source code from &lt;denchmark-link:https://github.com/opencv/opencv/tree/3.4&gt;https://github.com/opencv/opencv/tree/3.4&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='12' author='alexionby' date='2018-04-29T10:26:58Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 , opencv &lt;denchmark-link:https://github.com/opencv/opencv/pull/11362&gt;#11362&lt;/denchmark-link&gt;
 (version from this issue) and TF_1.8-CPU work well.
&lt;denchmark-code&gt;Converted 8 variables to const ops.
[ INFO:0] Initialize OpenCL runtime...
1.4901161e-08
&lt;/denchmark-code&gt;

Previously i tried a release version of openvc-3.4.1. So now it looks like it's fixed.
		</comment>
	</comments>
</bug>