<bug id='18254' author='rilpires' open_date='2020-09-02T15:39:45Z' closed_time='2020-10-02T18:27:16Z'>
	<summary>Proper extrapolation with findHomography</summary>
	<description>

OpenCV =&gt; 4.4.0.42
Operating System / Platform =&gt; Ubuntu 18.04

There is this simple case I plotted, where the source points of the homography is a simple square side==100 and the destination points is a square with side==10
(0,0) are the same in both planes
Inferring the homography matrix with 'findHomography' works fine here
So this is the plot with some other points inferred from 'perspectiveTransform' function:
&lt;denchmark-link:url&gt;

&lt;/denchmark-link&gt;

This is straightforward correct, as the red points is kinda notable solutions
Point is, this system shouldn't be easily extrapolated given 3 points, or am I assuming constraints?
Removing the source point in [100,100] gives this answers:
&lt;denchmark-link:https://user-images.githubusercontent.com/12648211/92003187-1c1e4d00-ed17-11ea-93f8-6f09778b7c31.png&gt;&lt;/denchmark-link&gt;

How can it be so different from the obvious solution from the first case?
It is well documented that if the matchs aren't rigid, its estimation is poor, is this case not rigid?
It would be great if this was properly extrapolated for a rhombus shape
Passing a non-collinear 4th point anywhere gives the clean solution as well
&lt;denchmark-link:https://user-images.githubusercontent.com/12648211/92004116-33116f00-ed18-11ea-9f6f-e99d903285bd.png&gt;&lt;/denchmark-link&gt;

code(python):
&lt;denchmark-code&gt;import numpy as np
import cv2 as cv
import matplotlib.pyplot as plt

anchors = np.array([[0,0],[100,0],[0,100],[100,100]] ,dtype=np.float32)
values = np.array([[0,0],[10,0],[0,10],[10,10]] ,dtype=np.float32)
grid_points = np.array( [[[100,50] , [50,50] , [50,0] , [25,25]]] ,dtype=np.float32)
A,mask = cv.findHomography( anchors , values )
grid_values = cv.perspectiveTransform( grid_points , A )

#PyPlot'ing
plt.figure(figsize=(10,10))
plt.plot( anchors[:,0] , anchors[:,1] , '.' , ms=20 )
for i in range(0,len(anchors)):
    plt.text(anchors[i,0]-1,anchors[i,1]+5, str(values[i]) )

plt.plot( grid_points[0,:,0]   , grid_points[0,:,1]   , '.' , ms=5 )
for i in range(0,len(grid_points[0])):
    plt.text( grid_points[0,i,0]-1 , grid_points[0,i,1]-5 , str('{:.2f},{:.2f}'.format(grid_values[0,i,0],grid_values[0,i,1])) , color='red')

plt.show()

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='rilpires' date='2020-09-02T16:24:56Z'>
		Number of &lt;denchmark-link:http://szeliski.org/Book/drafts/SzeliskiBook_20100903_draft.pdf#subsection.2.1.2&gt;dof of Homography&lt;/denchmark-link&gt;
 (projective transformation) is 8, so you need at least 4 points.
Probably a check should be added in findHomography().
		</comment>
	</comments>
</bug>