<bug id='18937' author='alalek' open_date='2020-11-26T21:04:01Z' closed_time='2020-12-17T22:56:04Z'>
	<summary>DNN: sporadic failures Test_ONNX_layers.GatherMultiOutput (OCV/OCL_FP16)</summary>
	<description>
Test message:
&lt;denchmark-code&gt;[ RUN      ] Test_ONNX_layers.GatherMultiOutput/1, where GetParam() = OCV/OCL_FP16
/build/precommit_linux64-avx2/opencv/modules/dnn/test/test_common.impl.hpp:71: Failure
Expected: (normL1) &lt;= (l1), actual: nan vs 0.004
  |ref| = 0
[  FAILED  ] Test_ONNX_layers.GatherMultiOutput/1, where GetParam() = OCV/OCL_FP16 (1 ms)
&lt;/denchmark-code&gt;

&lt;denchmark-link:http://pullrequest.opencv.org/buildbot/builders/master-win64-vc15/builds/560&gt;Windows build&lt;/denchmark-link&gt;
:
&lt;denchmark-code&gt;[ RUN      ] Test_ONNX_layers.GatherMultiOutput/1, where GetParam() = OCV/OCL_FP16
[ INFO:0] global C:\build\master-win64-vc15\opencv\modules\dnn\src\onnx\onnx_importer.cpp (395) cv::dnn::dnn4_v20201117::ONNXImporter::populateNet DNN/ONNX: loading ONNX v6 model produced by 'pytorch':1.7. Number of nodes = 9, inputs = 1, outputs = 1
c:\build\master-win64-vc15\opencv\modules\dnn\test\test_common.impl.hpp(71): error: Expected: (normL1) &lt;= (l1), actual: nan vs 0.004
  |ref| = 0
[ INFO:0] global C:\build\master-win64-vc15\opencv\modules\ts\src\ts.cpp (847) cvtest::testTearDown Memory_usage (OpenCL): 100 (base=32  current=64)
[  FAILED  ] Test_ONNX_layers.GatherMultiOutput/1, where GetParam() = OCV/OCL_FP16 (2 ms)
&lt;/denchmark-code&gt;

relates &lt;denchmark-link:https://github.com/opencv/opencv/pull/18296&gt;#18296&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='alalek' date='2020-12-14T23:30:01Z'>
		NaN values are sporadically produced by  &lt;denchmark-link:https://github.com/opencv/opencv/blame/3.4.12/modules/dnn/src/opencl/gemm_buffer.cl#L871&gt;kernel&lt;/denchmark-link&gt;
.

_input:__NetInputLayer__ i=0 1 x 2 x 2 of 5
[0, 0, 0, 0]
OpenCV(OpenCL:0): clEnqueueWriteBuffer(q, handle=0x1065440, CL_TRUE, offset=0, sz=16, data=0x12e9740, 0, 0, 0)
OpenCV(OpenCL:0): clCreateKernel('convertFp16')
OpenCV(OpenCL:0): clSetKernelArg('convertFp16', arg_index=0, cl_mem=0x1065440)
OpenCV(OpenCL:0): clSetKernelArg('convertFp16', arg_index=1, step_value=8)
OpenCV(OpenCL:0): clSetKernelArg('convertFp16', arg_index=2, offset_value=0)
OpenCV(OpenCL:0): clSetKernelArg('convertFp16', arg_index=3, cl_mem=0x12e6ba0)
OpenCV(OpenCL:0): clSetKernelArg('convertFp16', arg_index=4, step_value=4)
OpenCV(OpenCL:0): clSetKernelArg('convertFp16', arg_index=5, offset_value=0)
OpenCV(OpenCL:0): clSetKernelArg('convertFp16', arg_index=6, rows_value=2)
OpenCV(OpenCL:0): clSetKernelArg('convertFp16', arg_index=7, cols_value=2)
OpenCV(OpenCL:0): clEnqueueNDRangeKernel('convertFp16', dims=2, globalsize=256x8x1, localsize=NULL) sync=false
OpenCV(OpenCL:0): clSetEventCallback(asyncEvent, CL_COMPLETE, oclCleanupCallback, this)
OpenCV(OpenCL:0): clReleaseEvent_pfn(asyncEvent)
OpenCV(OpenCL:0): clCreateKernel('gemm_buffer_NT_M_2_half')
OpenCV(OpenCL:0): clSetKernelArg('gemm_buffer_NT_M_2_half', arg_index=0, cl_mem=0x1036f70)
OpenCV(OpenCL:0): clSetKernelArg('gemm_buffer_NT_M_2_half', arg_index=1, size=4, value=0 / 0u / 0x00000000 / 0)
OpenCV(OpenCL:0): clSetKernelArg('gemm_buffer_NT_M_2_half', arg_index=2, cl_mem=0x12e6ba0)
OpenCV(OpenCL:0): clSetKernelArg('gemm_buffer_NT_M_2_half', arg_index=3, size=4, value=0 / 0u / 0x00000000 / 0)
OpenCV(OpenCL:0): clSetKernelArg('gemm_buffer_NT_M_2_half', arg_index=4, cl_mem=0xff7900)
OpenCV(OpenCL:0): clSetKernelArg('gemm_buffer_NT_M_2_half', arg_index=5, size=4, value=0 / 0u / 0x00000000 / 0)
OpenCV(OpenCL:0): clSetKernelArg('gemm_buffer_NT_M_2_half', arg_index=6, size=4, value=2 / 2u / 0x00000002 / 2.8026e-45)
OpenCV(OpenCL:0): clReleaseKernel_pfn(handle)
OpenCV(OpenCL:0): clSetKernelArg('gemm_buffer_NT_M_2_half', arg_index=7, size=4, value=2 / 2u / 0x00000002 / 2.8026e-45)
OpenCV(OpenCL:0): clSetKernelArg('gemm_buffer_NT_M_2_half', arg_index=8, size=4, value=2 / 2u / 0x00000002 / 2.8026e-45)
OpenCV(OpenCL:0): clSetKernelArg('gemm_buffer_NT_M_2_half', arg_index=9, size=4, value=1065353216 / 1065353216u / 0x3f800000 / 1)
OpenCV(OpenCL:0): clSetKernelArg('gemm_buffer_NT_M_2_half', arg_index=10, size=4, value=0 / 0u / 0x00000000 / 0)
OpenCV(OpenCL:0): clEnqueueNDRangeKernel('gemm_buffer_NT_M_2_half', dims=2, globalsize=64x1x1, localsize=64x1x1) sync=false
OpenCV(OpenCL:0): clSetEventCallback(asyncEvent, CL_COMPLETE, oclCleanupCallback, this)
OpenCV(OpenCL:0): clReleaseEvent_pfn(asyncEvent)
OpenCV(OpenCL:0): clEnqueueMapBuffer(handle=0xff7900, sz=8) =&gt; 0x1007000OpenCV(OpenCL:
0): clReleaseKernel_pfn(handle)
OpenCV(OpenCL:0): clEnqueueUnmapMemObject(handle=0xff7900, data=0x1007000, [sz=8])
3:InnerProduct i=0 1 x 2 x 2 of 5
[-nan, 0, 0, 0]
WARNING: NaN detected in layer output: id=1 name=3
output id=0 output shape=[ 1 2 2 ]


FP32 code patch doesn't call the similar kernel on Intel iGPU (has own code path).
		</comment>
	</comments>
</bug>