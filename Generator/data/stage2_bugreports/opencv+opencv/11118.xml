<bug id='11118' author='hoonkai' open_date='2018-03-19T18:08:51Z' closed_time='2019-07-31T14:45:38Z'>
	<summary>Camera preview has channels reversed on Android hardware (or emulator)</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4.1
Operating System / Platform =&gt; Linux Mint 18.1 64-bit
Compiler =&gt; GCC 5.4.0
Android API =&gt; 24

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Some straightforward code on Android gives rise to opposite colour channels on emulator and hardware. When onCameraFrame(CvCameraViewFrame inputFrame) is override and inputFrame is converted to as BGR, emulator and hardware show opposite results.
Emulator:
&lt;denchmark-link:https://user-images.githubusercontent.com/14197204/37613533-fa80f92c-2bf3-11e8-86d4-49e40b575e0e.png&gt;&lt;/denchmark-link&gt;

Hardware (Galaxy S7):
&lt;denchmark-link:https://user-images.githubusercontent.com/14197204/37613551-0547c138-2bf4-11e8-89fa-642e34e02ff4.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Example program for reproduction:
public class OpenCVCamera extends AppCompatActivity implements CameraBridgeViewBase.CvCameraViewListener2 {
    private static final String TAG = "OpenCVCamera";

    private CameraBridgeViewBase cameraBridgeViewBase;

    private Mat mRgba;

    private int requestCode;
    private int grantResults[];


    private BaseLoaderCallback baseLoaderCallback = new BaseLoaderCallback(this) {
        @Override
        public void onManagerConnected(int status) {
            switch (status) {
                case LoaderCallbackInterface.SUCCESS:
                    cameraBridgeViewBase.enableView();
                    break;
                default:
                    super.onManagerConnected(status);
                    break;
            }
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getSupportActionBar().hide();

        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        setContentView(R.layout.activity_opencv_camera);
        cameraBridgeViewBase = (CameraBridgeViewBase) findViewById(R.id.camera_view);
        cameraBridgeViewBase.setVisibility(SurfaceView.VISIBLE);
        cameraBridgeViewBase.setCvCameraViewListener(this);

        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
                != PackageManager.PERMISSION_GRANTED) {

            requestCameraPermission();

        }

        if(ContextCompat.checkSelfPermission(this,Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_DENIED ) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, requestCode);
            onRequestPermissionsResult(requestCode, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, grantResults);
        }

    }

    @Override
    public void onPause() {
        super.onPause();
        if (cameraBridgeViewBase != null)
            cameraBridgeViewBase.disableView();
    }

    @Override
    public void onResume(){
        super.onResume();
        if (!OpenCVLoader.initDebug()) {
            Log.d(TAG, "Internal OpenCV library not found. Using OpenCV Manager for initialization");
            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_1_0, this, baseLoaderCallback);
        } else {
            Log.d(TAG, "OpenCV library found inside package. Using it!");
            baseLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);
        }
    }

    public void onDestroy() {
        super.onDestroy();
        if (cameraBridgeViewBase != null)
            cameraBridgeViewBase.disableView();
    }


    @Override
    public void onCameraViewStarted(int width, int height) {
        mRgba = new Mat(height, width, CvType.CV_8UC4);
    }

    @Override
    public void onCameraViewStopped() {

    }


    @Override
    public Mat onCameraFrame(CameraBridgeViewBase.CvCameraViewFrame inputFrame) {
        mRgba = inputFrame.rgba();
        Imgproc.cvtColor(mRgba, mRgba, Imgproc.COLOR_RGBA2BGR);

        return mRgba;
    }

    /**
     * Requests the Camera permission.
     * If the permission has been denied previously, a SnackBar will prompt the user to grant the
     * permission, otherwise it is requested directly.
     */
    private void requestCameraPermission() {
        Log.i(TAG, "CAMERA permission has NOT been granted. Requesting permission.");

        ActivityCompat.requestPermissions(this,
                new String[]{Manifest.permission.CAMERA},
                1);
    }

    @Override // android recommended class to handle permissions
    public void onRequestPermissionsResult(int requestCode,
                                           String permissions[], int[] grantResults) {
        switch (requestCode) {
            case 1: {
                if (grantResults.length &gt; 0
                        &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {

                    Log.d("permission", "granted");
                } else {
                    Toast.makeText(OpenCVCamera.this, "Permission denied to read your External storage", Toast.LENGTH_SHORT).show();
                    onDestroy();
                }
                return;
            }

        }
    }
}
	</description>
	<comments>
		<comment id='1' author='hoonkai' date='2018-03-19T19:13:35Z'>
		
Imgproc.cvtColor(mRgba, mRgba, Imgproc.COLOR_RGBA2BGR);

"Problem" is here (not a problem actually).
		</comment>
		<comment id='2' author='hoonkai' date='2018-03-19T19:19:54Z'>
		Take a look on this &lt;denchmark-link:https://stackoverflow.com/questions/27083097/opencv-android-color-issue-using-camerabridgeviewbase&gt;SO question&lt;/denchmark-link&gt;
. There are some hints for debugging.
Additionally you could take a look on &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.4.1/modules/java/generator/android-21/java/org/opencv/android/JavaCamera2View.java&gt;Camera2 API&lt;/denchmark-link&gt;
 (requires Android 21 / 5.0).
		</comment>
		<comment id='3' author='hoonkai' date='2018-03-20T06:14:44Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 But without the line  the emulator shows BGR whilst the phone shows RGB. The emulator (YV12) and the phone (NV21) give opposite results. Don't these lines give normalised results though?
        @Override
        public Mat rgba() {
            if (mPreviewFormat == ImageFormat.NV21)
                Imgproc.cvtColor(mYuvFrameData, mRgba, Imgproc.COLOR_YUV2RGBA_NV21, 4);
            else if (mPreviewFormat == ImageFormat.YV12)
                Imgproc.cvtColor(mYuvFrameData, mRgba, Imgproc.COLOR_YUV2RGB_I420, 4); // COLOR_YUV2RGBA_YV12 produces inverted colors
            else if (mPreviewFormat == ImageFormat.YUV_420_888) {
                assert (mUVFrameData != null);
                Imgproc.cvtColorTwoPlane(mYuvFrameData, mUVFrameData, mRgba, Imgproc.COLOR_YUV2RGBA_NV21);
            } else
                throw new IllegalArgumentException("Preview Format can be NV21 or YV12");

            return mRgba;
        }
&lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/java/generator/android-21/java/org/opencv/android/JavaCamera2View.java#L332-L344&gt;https://github.com/opencv/opencv/blob/master/modules/java/generator/android-21/java/org/opencv/android/JavaCamera2View.java#L332-L344&lt;/denchmark-link&gt;

Shouldn't the result be in RGB(A) regardless of the preview format?
		</comment>
		<comment id='4' author='hoonkai' date='2018-03-20T06:38:03Z'>
		I should add that if &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/java/generator/android-21/java/org/opencv/android/JavaCamera2View.java#L336&gt;https://github.com/opencv/opencv/blob/master/modules/java/generator/android-21/java/org/opencv/android/JavaCamera2View.java#L336&lt;/denchmark-link&gt;
 was changed from
Imgproc.cvtColor(mYuvFrameData, mRgba, Imgproc.COLOR_YUV2RGB_I420, 4);
to
Imgproc.cvtColor(mYuvFrameData, mRgba, Imgproc.COLOR_YUV2RGBA_YV12, 4);
RGB would be shown in emulator.
		</comment>
		<comment id='5' author='hoonkai' date='2018-03-20T07:42:38Z'>
		AFAIK, NV21 is a default format. And support of this format is required by Android OS (to be conformant to Android API).
&lt;denchmark-link:https://developer.android.com/reference/android/hardware/Camera.PreviewCallback.html&gt;https://developer.android.com/reference/android/hardware/Camera.PreviewCallback.html&lt;/denchmark-link&gt;
:

If setPreviewFormat(int) is never called, the default will be the YCbCr_420_SP (NV21) format.

Please debug &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.4.1/modules/java/generator/android/java/org/opencv/android/JavaCameraView.java#L149-L162&gt;this part of code&lt;/denchmark-link&gt;
 on your device.
		</comment>
		<comment id='6' author='hoonkai' date='2018-03-20T10:34:30Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 Yes, I think the suggested part of the code gives expected results. On the emulator:
&lt;denchmark-code&gt;Build.FINGERPRINT: google/sdk_google_phone_x86/generic_x86:7.1.1/NYC/4316688:user/release-keys

Build.MODEL: Android SDK built for x86
&lt;/denchmark-code&gt;

On the phone:
&lt;denchmark-code&gt;Build.FINGERPRINT: samsung/hero2ltexx/hero2lte:7.0/NRD90M/G935FXXU1DQG1:user/release-keys

Build.MODEL: SM-G935F
&lt;/denchmark-code&gt;

So the emulator is set to YV12 and the phone is set to NV21. But then, is COLOR_YUV2RGB_I420 the right target format for YV12?
		</comment>
		<comment id='7' author='hoonkai' date='2018-03-20T10:49:33Z'>
		I've now tried the following onCameraFrame and the emulator shows BGR:
    @Override
    public Mat onCameraFrame(CameraBridgeViewBase.CvCameraViewFrame inputFrame) {
        Imgproc.cvtColor(((JavaCameraView.JavaCameraFrame) inputFrame).mYuvFrameData, mRgba, Imgproc.COLOR_YUV2RGB_I420, 4);  // COLOR_YUV2RGBA_YV12 produces inverted colors

        return mRgba;
    }
where JavaCameraFrame and mYuvFrameData were made public. Could this be a bug in the handling of YV12?
Do you know why COLOR_YUV2RGB_I420 is used as the target format?
		</comment>
		<comment id='8' author='hoonkai' date='2018-03-20T11:16:07Z'>
		What are values of "mPreviewFormat" on emulator / device?
		</comment>
		<comment id='9' author='hoonkai' date='2018-03-20T11:21:23Z'>
		Emulator (Nexus 5 API: 25) gives 0x32315659 (YV12) and device (Galaxy S7 API 24) gives 0x11 (default?).
		</comment>
		<comment id='10' author='hoonkai' date='2018-03-20T11:48:52Z'>
		 is &lt;denchmark-link:https://developer.android.com/reference/android/graphics/ImageFormat.html#NV21&gt;NV12&lt;/denchmark-link&gt;
 (default).
 value looks valid for both cases.
Does device work without Imgproc.cvtColor call (via normal return inputFrame.rgba() code)?
Emulator?
/cc &lt;denchmark-link:https://github.com/jmgomezpoveda&gt;@jmgomezpoveda&lt;/denchmark-link&gt;
 (author of the latest related patch for this: &lt;denchmark-link:https://github.com/opencv/opencv/pull/8168&gt;#8168&lt;/denchmark-link&gt;
)
		</comment>
		<comment id='11' author='hoonkai' date='2018-03-20T12:20:56Z'>
		Yes, device works without  in  (i.e.,  returns RGB). By the look of things, the problem seems to be   for YV12 (&lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/java/generator/android-21/java/org/opencv/android/JavaCamera2View.java#L336&gt;https://github.com/opencv/opencv/blob/master/modules/java/generator/android-21/java/org/opencv/android/JavaCamera2View.java#L336&lt;/denchmark-link&gt;
). Like I mentioned earlier, changing  to  gives RGB in emulator.
		</comment>
		<comment id='12' author='hoonkai' date='2018-03-20T12:23:20Z'>
		I believe &lt;denchmark-link:https://github.com/jmgomezpoveda&gt;@jmgomezpoveda&lt;/denchmark-link&gt;
  got the code here: &lt;denchmark-link:https://stackoverflow.com/a/27233595/5349476&gt;https://stackoverflow.com/a/27233595/5349476&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='hoonkai' date='2018-03-20T16:02:54Z'>
		I think we should consider labelling this as a bug.
		</comment>
		<comment id='14' author='hoonkai' date='2018-04-02T03:27:25Z'>
		I was poking around at this today. For my device/settings, frames were coming in to JavaCamera2View as . I noticed red/blue channels were switched, so after some sniffing I found that replacing the  value with  on &lt;denchmark-link:https://github.com/opencv/opencv/blob/d5afa8943b094beef09d3ae6f82d09555b5e6545/modules/java/generator/android-21/java/org/opencv/android/JavaCamera2View.java#L339&gt;line 339&lt;/denchmark-link&gt;
 resulted in frames being delivered in the correct color space.
		</comment>
		<comment id='15' author='hoonkai' date='2018-04-08T13:49:56Z'>
		&lt;denchmark-link:https://github.com/tipsmiller&gt;@tipsmiller&lt;/denchmark-link&gt;
 man that did the trick. I noticed the same behaviour on my Galaxy S8 and Nexus 7 (2013)
Indeed seems like a bug in native color conversion
		</comment>
		<comment id='16' author='hoonkai' date='2018-04-08T18:15:04Z'>
		I also noticed later that saving images using imwrite required converting from rgb back to bgr, otherwise the channels were once again reversed. I'm not sure what this means, perhaps android's display channels are flipped?
		</comment>
		<comment id='17' author='hoonkai' date='2018-04-10T20:40:34Z'>
		Update to previous: This was due to saving images in PNG format, which expects BGRA frame ordering. (&lt;denchmark-link:https://docs.opencv.org/3.1.0/d4/da8/group__imgcodecs.html#gabbc7ef1aa2edfaa87772f1202d67e0ce&gt;See docs&lt;/denchmark-link&gt;
]
		</comment>
		<comment id='18' author='hoonkai' date='2019-07-06T09:11:47Z'>
		Please try the latest code from "master" branch.
		</comment>
		<comment id='19' author='hoonkai' date='2019-07-31T01:47:13Z'>
		I just pulled in 3.4.7 and was able to use the JavaCamera2View without this issue. The camera preview displays with the correct channels as expected.
		</comment>
		<comment id='20' author='hoonkai' date='2019-07-31T14:45:38Z'>
		Looks like it have been fixed in &lt;denchmark-link:https://github.com/opencv/opencv/pull/14342&gt;#14342&lt;/denchmark-link&gt;
 and/or &lt;denchmark-link:https://github.com/opencv/opencv/pull/14505&gt;#14505&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>