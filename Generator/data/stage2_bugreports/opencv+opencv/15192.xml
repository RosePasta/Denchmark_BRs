<bug id='15192' author='BoxWizard000000' open_date='2019-07-30T15:18:51Z' closed_time='2019-08-03T23:34:48Z'>
	<summary>Undefined references to various __atomic macros when building opencv 4.1.1</summary>
	<description>
System information (version)

OpenCV =&gt; 4.1.1
Operating System / Platform =&gt; Raspbian Buster armv71
Compiler =&gt; gcc v8.3.0

Output log
&lt;denchmark-code&gt;[ 40%] Linking CXX executable ../../bin/opencv_perf_core
/usr/bin/ld: ../../lib/libopencv_core.so.4.1.1: undefined reference to `__atomic_fetch_add_8'
/usr/bin/ld: ../../lib/libopencv_core.so.4.1.1: undefined reference to `__atomic_fetch_sub_8'
/usr/bin/ld: ../../lib/libopencv_core.so.4.1.1: undefined reference to `__atomic_store_8'
/usr/bin/ld: ../../lib/libopencv_core.so.4.1.1: undefined reference to `__atomic_load_8'
/usr/bin/ld: ../../lib/libopencv_core.so.4.1.1: undefined reference to `__atomic_compare_exchange_8'
&lt;/denchmark-code&gt;

Here's my build config:
&lt;denchmark-code&gt;cmake -D CMAKE_BUILD_TYPE=RELEASE \
   -D CMAKE_INSTALL_PREFIX=/usr/local/ \
   -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-master/modules/ \
   -D ENABLE_NEON=ON \
   -D ENABLE_VFPV3=ON \
   -D ENABLE_LTO=ON \
   -D CPU_BASELINE=NEON \
   -D WITH_TBB=ON \
   -D WITH_OPENCL=ON \
   -D WITH_GSTREAMER=ON \
   -D BUILD_EXAMPLES=OFF \
   -D BUILD_TESTS=OFF \
   -D BUILD_SHARED=OFF ..

make
&lt;/denchmark-code&gt;

Any ideas how I might resolve this issue?
	</description>
	<comments>
		<comment id='1' author='BoxWizard000000' date='2019-07-30T17:37:18Z'>
		It may be a very crude solution, but I solved this adding a  -latomic in the link.txt file of the failing cmake module
		</comment>
		<comment id='2' author='BoxWizard000000' date='2019-07-30T17:40:56Z'>
		Hm alright I'll give a try, but I wonder why opencv isn't detecting libatomic.
		</comment>
		<comment id='3' author='BoxWizard000000' date='2019-07-30T19:42:43Z'>
		
It may be a very crude solution, but I solved this adding a -latomic in the link.txt file of the failing cmake module

I'm not entirely sure where to add it in the file. Can you show me how yours looks? I just put mines by where all the other linkers appear to be.
&lt;denchmark-code&gt;-ldl -lm -lpthread -lrt -latomic
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='BoxWizard000000' date='2019-07-30T19:47:59Z'>
		

It may be a very crude solution, but I solved this adding a -latomic in the link.txt file of the failing cmake module

I'm not entirely sure where to add it in the file. Can you show me how yours looks? I just put mines by where all the other linkers appear to be.
-ldl -lm -lpthread -lrt -latomic


Never mind, I did it in the wrong file.
		</comment>
		<comment id='5' author='BoxWizard000000' date='2019-07-31T08:36:00Z'>
		I added -latomic at the end of the link.txt that you can find in the directory listed after the error it is like modules/some_nwme/some_FOLDER/Cmake_file/some_name.dir/........
		</comment>
		<comment id='6' author='BoxWizard000000' date='2019-07-31T12:52:18Z'>
		As a workaround try to use cmake option: -DOPENCV_EXTRA_EXE_LINKER_FLAGS=-latomic
		</comment>
		<comment id='7' author='BoxWizard000000' date='2019-08-01T08:56:36Z'>
		This bug exists also when compiling code using the OpenCV library, I have to add
set(CMAKE_CXX_FLAGS "-Wl,-latomic") to my program CMakeFile
		</comment>
		<comment id='8' author='BoxWizard000000' date='2019-08-01T16:50:39Z'>
		&lt;denchmark-link:https://github.com/mshabunin&gt;@mshabunin&lt;/denchmark-link&gt;
 the cmake option helped to build opencv successfully. But when I'm using python to import opencv, I'm still getting more or less the same exception:

I had to add -latomic to modules/python3/CMakeFiles/opencv_python3.dir/link.txt to get the python import working
		</comment>
		<comment id='9' author='BoxWizard000000' date='2019-08-01T17:02:34Z'>
		I'm just getting other linker errors now. I got undefined references to Imf_opencv and so I stopped trying to build the module and now I'm getting undefined references to google::protobuf
		</comment>
		<comment id='10' author='BoxWizard000000' date='2019-08-01T17:18:05Z'>
		&lt;denchmark-link:https://github.com/BoxWizard000000&gt;@BoxWizard000000&lt;/denchmark-link&gt;
 for the protobuf problems &lt;denchmark-link:https://github.com/opencv/opencv/issues/13328&gt;#13328&lt;/denchmark-link&gt;
 could help, most likely cmake option  should help
		</comment>
		<comment id='11' author='BoxWizard000000' date='2019-08-01T20:03:26Z'>
		
@BoxWizard000000 for the protobuf problems #13328 could help, most likely cmake option -DENABLE_PRECOMPILED_HEADERS=OFF should help

Nope that didn't do it for me. Here's what it looks like.
&lt;denchmark-code&gt;/usr/bin/ld: ../../lib/libopencv_dnn.so.4.1.1: undefined reference to `google::protobuf::strings::SubstituteAndAppend(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, char const*, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;)'                                        
/usr/bin/ld: ../../lib/libopencv_dnn.so.4.1.1: undefined reference to `google::protobuf::strings::Substitute[abi:cxx11](char const*, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;, google::protobuf::strings::internal::SubstituteArg const&amp;)'
collect2: error: ld returned 1 exit status
make[2]: *** [modules/dnn/CMakeFiles/opencv_perf_dnn.dir/build.make:167: bin/opencv_perf_dnn] Error 1
make[1]: *** [CMakeFiles/Makefile2:3418: modules/dnn/CMakeFiles/opencv_perf_dnn.dir/all] Error 2
make: *** [Makefile:163: all] Error 2
&lt;/denchmark-code&gt;

		</comment>
		<comment id='12' author='BoxWizard000000' date='2019-08-03T23:34:48Z'>
		
@BoxWizard000000 for the protobuf problems #13328 could help, most likely cmake option -DENABLE_PRECOMPILED_HEADERS=OFF should help

Realized I forgot to make clean before I tried again and it seemed to work. Thanks!
		</comment>
		<comment id='13' author='BoxWizard000000' date='2019-09-19T11:04:38Z'>
		Didn't work for me on RPi2 under Buster. A whole slew of atomic errors starting with the follwoing:
&lt;denchmark-code&gt;[ 69%] Linking CXX executable ../../bin/opencv_perf_core
/usr/bin/ld: ../../lib/libopencv_core.a(alloc.cpp.o): in function `cv::utils::(anonymous namespace)::AllocatorStatistics::getPeakUsage() const':
alloc.cpp:(.text._ZNK2cv5utils12_GLOBAL__N_119AllocatorStatistics12getPeakUsageEv+0x8): undefined reference to `__atomic_load_8'

&lt;/denchmark-code&gt;

The command used was:
&lt;denchmark-code&gt;cmake -D CMAKE_BUILD_TYPE=Release \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D INSTALL_C_EXAMPLES=ON \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
-D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3 \
-D WITH_PROTOBUF=OFF \
-D ENABLE_PRECOMPILED_HEADERS=OFF \
-D BUILD_EXAMPLES=ON ..

&lt;/denchmark-code&gt;

Since I have very limited understanding, any guidance here would be appreciated.
Kind regards.
		</comment>
	</comments>
</bug>