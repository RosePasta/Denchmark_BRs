<bug id='16214' author='aarongreig' open_date='2019-12-20T15:10:21Z' closed_time='2020-07-08T23:02:01Z'>
	<summary>Gaussian blur GPU tests not providing correct clBuildProgram flags to pocl</summary>
	<description>

OpenCV =&gt; commit 545f8a8 (tip at time of writing)
Operating System / Platform =&gt; Ubuntu18, pocl version string (from clinfo) OpenCL 1.2 pocl 1.1 None+Asserts, LLVM 6.0.0, SPIR, SLEEF, DISTRO, POCL_DEBUG
Compiler =&gt; gcc 7.4.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

relates &lt;denchmark-link:https://github.com/opencv/opencv/pull/15855&gt;#15855&lt;/denchmark-link&gt;

A number of gaussian blur GPU tests fail when using the pocl OpenCL 1.2 implementation. A bit of digging into how this code works revealed that as of &lt;denchmark-link:https://github.com/opencv/opencv/commit/f4d55d512fe43a31a39f5e40629fa75d66879036#diff-8f5d959f77f1694e973c305d285cd92b&gt;this commit&lt;/denchmark-link&gt;
 the gaussian blur kernel generation code (the various helper functions found in &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/imgproc/src/smooth.dispatch.cpp&gt;smooth.dispatch.cpp&lt;/denchmark-link&gt;
) creates kernels that contain one set of values, but examining the build options being passed to  in &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/core/src/ocl.cpp#L3887&gt;ocl.cpp&lt;/denchmark-link&gt;
 when building the / kernels suggests a different set of values are being handed off to OpenCL. For example in the first test :
adding a print to the effect of
&lt;denchmark-code&gt;        printf("kernel:\n");
        for(auto&amp; fixedPointVal : fkx){
          double floatVal = static_cast&lt;double&gt;(fixedPointVal);
          printf("%f, ", floatVal);
        }
        printf("\n");
&lt;/denchmark-code&gt;

at line 663 of smooth.dispatch.cpp to print the final kernel gives the following output:
&lt;denchmark-code&gt;kernel:
0.332031, 0.335938, 0.332031,
&lt;/denchmark-code&gt;

with fixedpoint16's fixedshift value of 8 you can deduce that the raw 16 bit vals for this kernel are 85, 86, 85. Adding this line
&lt;denchmark-code&gt;printf("build options: %s\n", buildflags.c_str());
&lt;/denchmark-code&gt;

at ocl.cpp:3888 reveals that the build options being passed for both row_filter and col_filter contain the following: -D COEFF=DIG(85)DIG(85)DIG(85). Admittedly I'm not familiar with how these values translate into what the OpenCL kernels do (they're pretty dense) but after making the assumption that these definitions were the kernel values I hard coded the mat_kernel definition in filterSepCol.cl and filterSepRow.cl to be { 85, 86, 85 } instead of { COEFF }. This made the test pass, which I think confirms that something in the OpenCL backend is jumbling the options somehow, so that { 85, 85, 85} ends up in the OpenCL kernel instead of the correct {85, 86, 85}. Interestingly this isn't the case for all of these tests, only nine of the thirty tests fail in this manner. Note also that the intel OpenCL 2.1 drivers don't fail these tests, they get a whole other set of build options.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;


make sure pocl is installed
clone and build opencv, once in the repo I did exactly this:

&lt;denchmark-code&gt;mkdir build &amp;&amp; cd build
cmake
  -DCMAKE_BUILD_TYPE=Release
  -DWITH_CUDA=OFF
  -DWITH_OPENCL=ON
  -DWITH_FFMPEG=OFF
  -DBUILD_TESTS=ON
  -DBUILD_PERF_TESTS=ON
  -DBUILD_EXAMPLES=ON
  -DBUILD_DOCS=OFF
  -DWITH_IPP=OFF
  -DOPENCL_LIBRARY="/path/to/OpenCLICDLoader/libOpenCL.so"
  -DOPENCL_INCLUDE_DIR="/path/to/cl/headers/include"
  -GNinja ..
ninja
git clone https://github.com/opencv/opencv_extra
export OPENCV_TEST_DATA_PATH=/path/to/build/opencv_extra/testdata/
&lt;/denchmark-code&gt;

note:

opencl library can optionally be the pocl .so instead of the loader, I'm just dealing with multiple drivers
again depending on your driver situation you might have to export OPENCV_OPENCL_DEVICE to get the right one


once everything has built run bin/opencv_perf_gapi --gtest_filter=GaussianBlurPerfTestGPU/GaussianBlurPerfTest.TestPerformance*, a number of tests will fail. The output from failing tests will be variations on this theme:

&lt;denchmark-code&gt;[ RUN      ] GaussianBlurPerfTestGPU/GaussianBlurPerfTest.TestPerformance/2, where GetParam() = (compare_f, 8UC1, 3, 1920x1080, { gapi.kernel_package })
AbsSimilarPoints error: err_points=113590  max_err_points=103680 (total=2073600)  diff_tolerance=1
../modules/gapi/perf/common/gapi_imgproc_perf_tests_inl.hpp:273: Failure
Value of: cmpF(out_mat_gapi, out_mat_ocv)
  Actual: false
Expected: true
params    = (compare_f, 8UC1, 3, 1920x1080, { gapi.kernel_package })
termination reason:  unknown
bytesIn   =          0
bytesOut  =          0
samples   =         10 of 100
outliers  =          0
frequency = 1000000000
min       =   11097065 = 11.10ms
median    =   11203118 = 11.20ms
gmean     =   11344524 = 11.34ms
gstddev   = 0.02755336 = 1.88ms for 97% dispersion interval
mean      =   11348445 = 11.35ms
stddev    =     318181 = 0.32ms
&lt;/denchmark-code&gt;

I apologise that I don't have the time to investigate this bug any further myself, the best I can do is give a heads up and dump my notes on the issue.
	</description>
	<comments>
		<comment id='1' author='aarongreig' date='2019-12-20T15:51:27Z'>
		Could you try to capture messages of failed tests with &lt;denchmark-link:https://github.com/opencv/opencv/blame/3.4.9/modules/core/src/ocl.cpp#L73&gt;this enabled option&lt;/denchmark-link&gt;
?
(disable cache through environment )
		</comment>
		<comment id='2' author='aarongreig' date='2019-12-20T16:11:45Z'>
		the output for one of the tests after enabling that option and clearing/disabling the cache is:
&lt;denchmark-code&gt;[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from GaussianBlurPerfTestGPU/GaussianBlurPerfTest
[ RUN      ] GaussianBlurPerfTestGPU/GaussianBlurPerfTest.TestPerformance/2, where GetParam() = (compare_f, 8UC1, 3, 1920x1080, { gapi.kernel_package })
OpenCL program build log: imgproc/filterSepRow
Status 0: CL_SUCCESS
-D RADIUSX=1 -D LSIZE0=16 -D LSIZE1=16 -D CN=1 -D BORDER_REFLECT_101 -D NO_EXTRA_EXTRAPOLATION -D NO_BORDER_ISOLATED -D srcT=uchar -D dstT=int -D convertToDstT=convert_int -D srcT1=uchar -D dstT1=int -D DOUBLE_SUPPORT -D INTEGER_ARITHMETIC -D COEFF=DIG(85)DIG(85)DIG(85)

OpenCL program build log: imgproc/filterSepCol
Status 0: CL_SUCCESS
-D RADIUSY=1 -D LSIZE0=16 -D LSIZE1=16 -D CN=1 -D srcT=int -D dstT=uchar -D convertToDstT=convert_uchar_sat -D srcT1=int -D dstT1=uchar -D SHIFT_BITS=16 -D DOUBLE_SUPPORT -D INTEGER_ARITHMETIC -D COEFF=DIG(85)DIG(85)DIG(85)

AbsSimilarPoints error: err_points=113590  max_err_points=103680 (total=2073600)  diff_tolerance=1
../modules/gapi/perf/common/gapi_imgproc_perf_tests_inl.hpp:273: Failure
Value of: cmpF(out_mat_gapi, out_mat_ocv)
  Actual: false
Expected: true
params    = (compare_f, 8UC1, 3, 1920x1080, { gapi.kernel_package })
termination reason:  reached maximum number of iterations
bytesIn   =          0
bytesOut  =          0
samples   =        100
outliers  =          8
frequency = 1000000000
min       =   12092053 = 12.09ms
median    =   13602101 = 13.60ms
gmean     =   13631519 = 13.63ms
gstddev   = 0.04439534 = 3.64ms for 97% dispersion interval
mean      =   13644789 = 13.64ms
stddev    =     604453 = 0.60ms
[  FAILED  ] GaussianBlurPerfTestGPU/GaussianBlurPerfTest.TestPerformance/2, where GetParam() = (compare_f, 8UC1, 3, 1920x1080, { gapi.kernel_package }) (1488 ms)
[----------] 1 test from GaussianBlurPerfTestGPU/GaussianBlurPerfTest (1488 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (1488 ms total)
[  PASSED  ] 0 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] GaussianBlurPerfTestGPU/GaussianBlurPerfTest.TestPerformance/2, where GetParam() = (compare_f, 8UC1, 3, 1920x1080, { gapi.kernel_package })
&lt;/denchmark-code&gt;

all the tests that fail have a similar output to this, I can paste the whole thing if you think it would be useful
		</comment>
		<comment id='3' author='aarongreig' date='2019-12-28T15:44:46Z'>
		&lt;denchmark-link:https://github.com/aarongreig&gt;@aarongreig&lt;/denchmark-link&gt;
 See &lt;denchmark-link:https://github.com/opencv/opencv/pull/13008&gt;#13008&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/opencv/opencv/issues/13087&gt;#13087&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>