<bug id='14259' author='llschloesser' open_date='2019-04-04T22:58:42Z' closed_time='2019-04-06T21:51:49Z'>
	<summary>cv::estimateAffinePartial2D should not reorder input point sets</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4.5
Operating System / Platform =&gt; Ubuntu 16.04
Compiler =&gt; GCC 5.4.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

cv::estimateAffinePartial2D rearranges both from and to point sets with outliers present (see compressElems()). This violates the expectation that cv::InputArray is const. Additionally, cv::OutputArray inliers corresponds to the original, non-reordered points. This is the expected behavior for this parameter.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Via code inspection or run any example that includes an inlier pair after an outlier.
	</description>
	<comments>
		<comment id='1' author='llschloesser' date='2019-04-05T11:14:20Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 Am I right to expect the input point sets not to change, or does  not make any guarantees?
		</comment>
		<comment id='2' author='llschloesser' date='2019-04-05T11:38:16Z'>
		&lt;denchmark-link:https://github.com/llschloesser&gt;@llschloesser&lt;/denchmark-link&gt;
 Right,  contents should not be changed.
Could you provide some &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.4.5/modules/calib3d/test/test_affine2d_estimator.cpp#L126-L151&gt;simple&lt;/denchmark-link&gt;
 reproducer? (you can use "fixed" point values)
It would help to provide fix faster.
		</comment>
		<comment id='3' author='llschloesser' date='2019-04-05T11:48:01Z'>
		Thanks, yes, I'll provide a minimal example.
		</comment>
		<comment id='4' author='llschloesser' date='2019-04-06T15:25:32Z'>
		Here is a minimal example. Both cv::estimateAffine2D() and cv::estimateAffinePartial2D() change the input and the output is the same. Toggle the comment line to see.
&lt;denchmark-code&gt;#include &lt;iostream&gt;                                                             
                                                                                   
#include &lt;opencv2/calib3d.hpp&gt;                                                     
                                                                                   
int main(int argc, const char** argv)                                              
{                                                                                  
  std::vector&lt;cv::Point2f&gt; pts_0{{0.0, 0.0},                                       
                                 {0.0, 8.0},                                       
                                 {4.0, 0.0}, // outlier                            
                                 {8.0, 8.0},                                       
                                 {8.0, 0.0}};                                      
                                                                                   
  std::vector&lt;cv::Point2f&gt; pts_1{{0.1, 0.1},
                                 {0.1, 8.1},                                       
                                 {0.0, 4.0}, // outlier                            
                                 {8.1, 8.1},                                       
                                 {8.1, 0.1}};                                      
                                                                                   
  auto pts_0_copy = pts_0;                                                         
  auto pts_1_copy = pts_1;                                                         
                                                                                   
  std::vector&lt;uint8_t&gt; match_mask;                                                 
                                                                                   
  cv::Mat A = cv::estimateAffinePartial2D(pts_0, pts_1, match_mask);
  //cv::Mat A = cv::estimateAffine2D(pts_0, pts_1, match_mask);
                                                                                
  std::cout &lt;&lt; "\npts_0:\n";                                                    
  for(size_t i = 0; i &lt; pts_0.size(); ++i)                                      
  {                                                                             
    std::cout &lt;&lt; "Expected " &lt;&lt; pts_0_copy[i] &lt;&lt; ", got " &lt;&lt; pts_0[i] &lt;&lt; "\n";  
  }                                                                             
                                                                                
  std::cout &lt;&lt; "\npts_1:\n";                                                    
  for(size_t i = 0; i &lt; pts_1.size(); ++i)                                      
  {                                                                             
    std::cout &lt;&lt; "Expected " &lt;&lt; pts_1_copy[i] &lt;&lt; ", got " &lt;&lt; pts_1[i] &lt;&lt; "\n";  
  }                                                                             
                                                                                
  return 0;                                                                     
}
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;$ ./test_estimate_affine 

pts_0:
Expected [0, 0], got [0, 0]
Expected [0, 8], got [0, 8]
Expected [4, 0], got [8, 8]
Expected [8, 8], got [8, 0]
Expected [8, 0], got [8, 0]

pts_1:
Expected [0.1, 0.1], got [0.1, 0.1]
Expected [0.1, 8.1], got [0.1, 8.1]
Expected [0, 4], got [8.1, 8.1]
Expected [8.1, 8.1], got [8.1, 0.1]
Expected [8.1, 0.1], got [8.1, 0.1]
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>