<bug id='11303' author='good12guy' open_date='2018-04-12T17:17:17Z' closed_time='2018-04-22T14:00:43Z'>
	<summary>Gaussian Blur with type CV_32FC1 causes invalid memory access inside IPP code</summary>
	<description>
I have a reproducible bug which fails in libippiw.  This seems to be not open source, but a binary library.
I was not aware that "open" cv meant mostly open.  Is there source that can be used to debug this problem?  Here is a gdb stack trace.


(gdb) bt
#0  0x00007fffb629e0ab in icv_l9_ownFilterGaussianRow_MemCom_32f_C1 () from /tmp/cinelerra-5.1/bin/plugins/exotic/findobj.plugin
&lt;denchmark-link:https://github.com/opencv/opencv/pull/1&gt;#1&lt;/denchmark-link&gt;
  0x00007fffb62b460f in icv_l9_ownFilterGaussianRow_Brd_32f_C1 () from /tmp/cinelerra-5.1/bin/plugins/exotic/findobj.plugin
&lt;denchmark-link:https://github.com/opencv/opencv/pull/2&gt;#2&lt;/denchmark-link&gt;
  0x00007fffb62b263e in icv_l9_ownFilterGaussianRowCom_Brd_32f_C1 () from /tmp/cinelerra-5.1/bin/plugins/exotic/findobj.plugin
&lt;denchmark-link:https://github.com/opencv/opencv/pull/3&gt;#3&lt;/denchmark-link&gt;
  0x00007fffb62c16be in icv_l9_ippiFilterGaussian_32f_C1R_L () from /tmp/cinelerra-5.1/bin/plugins/exotic/findobj.plugin
&lt;denchmark-link:https://github.com/opencv/opencv/pull/4&gt;#4&lt;/denchmark-link&gt;
  0x00007fffb53ed91d in llwiFilterGaussian_Process (pSrc=0x7ffd57e6cdc8, srcStep=7448, pDst=0x7ffd1875a088, dstStep=7448, roi=..., 
    border=51, pBorderVal=0x7fff76811b40, pSpec=0x7fff157f96e0)
    at /tmp/cinelerra-5.1/thirdparty/opencv/build/3rdparty/ippicv/ippiw_lnx/src/iw_image_filter_gaussian.c:393
&lt;denchmark-link:https://github.com/opencv/opencv/pull/5&gt;#5&lt;/denchmark-link&gt;
  0x00007fffb53ee094 in llwiFilterGaussian_ProcessWrap (pSrcImage=pSrcImage@entry=0x7fff157f95d0, 
    pDstImage=pDstImage@entry=0x7fff157f9630, border=, pBorderVal=pBorderVal@entry=0x7fff76811b40, pTile=pTile@entry=0x0, 
    pSpec=pSpec@entry=0x7fff157f96e0)
    at /tmp/cinelerra-5.1/thirdparty/opencv/build/3rdparty/ippicv/ippiw_lnx/src/iw_image_filter_gaussian.c:358
&lt;denchmark-link:https://github.com/opencv/opencv/pull/6&gt;#6&lt;/denchmark-link&gt;
  0x00007fffb53edb59 in llwiFilterGaussian_ProcessWrap (pSrcImage=pSrcImage@entry=0x7fff76811dc0, 
    pDstImage=pDstImage@entry=0x7fff76811e30, border=, border@entry=ippBorderMirror, 
    pBorderVal=pBorderVal@entry=0x7fff76811b40, pTile=pTile@entry=0x7fff157f99a0, pSpec=pSpec@entry=0x7fff157f96e0)
    at /tmp/cinelerra-5.1/thirdparty/opencv/build/3rdparty/ippicv/ippiw_lnx/src/iw_image_filter_gaussian.c:249
&lt;denchmark-link:https://github.com/opencv/opencv/pull/7&gt;#7&lt;/denchmark-link&gt;
  0x00007fffb53ee7d0 in iwiFilterGaussian (pSrcImage=0x7fff76811dc0, pDstImage=0x7fff76811e30, kernelSize=, 
    sigma=, pAuxParams=pAuxParams@entry=0x7fff157f9980, border=ippBorderMirror, pBorderVal=0x7fff76811b40, 
    pTile=0x7fff157f99a0) at /tmp/cinelerra-5.1/thirdparty/opencv/build/3rdparty/ippicv/ippiw_lnx/src/iw_image_filter_gaussian.c:121
&lt;denchmark-link:https://github.com/opencv/opencv/pull/8&gt;#8&lt;/denchmark-link&gt;
  0x00007fffb4d1575f in ipp::iwiFilterGaussian (tile=..., border=..., auxParams=..., sigma=, kernelSize=, 
    dstImage=..., srcImage=...)
    at /tmp/cinelerra-5.1/thirdparty/opencv/build/3rdparty/ippicv/ippiw_lnx/include/iw++/iw_image_filter.hpp:290
&lt;denchmark-link:https://github.com/opencv/opencv/pull/9&gt;#9&lt;/denchmark-link&gt;
  cv::ipp_gaussianBlurParallel::operator() (this=0x7fff76811ea0, range=...)
    at /tmp/cinelerra-5.1/thirdparty/opencv/modules/imgproc/src/smooth.cpp:3397
&lt;denchmark-link:https://github.com/opencv/opencv/pull/10&gt;#10&lt;/denchmark-link&gt;
 0x00007fffb4ba2df3 in (anonymous namespace)::ParallelLoopBodyWrapper::operator() (this=0x7fff76811970, sr=...)
    at /tmp/cinelerra-5.1/thirdparty/opencv/modules/core/src/parallel.cpp:276
&lt;denchmark-link:https://github.com/opencv/opencv/pull/11&gt;#11&lt;/denchmark-link&gt;
 0x00007fffb4ba36d1 in cv::ParallelJob::execute (this=this@entry=0x7ffd5474c420, is_worker_thread=is_worker_thread@entry=true)
    at /tmp/cinelerra-5.1/thirdparty/opencv/modules/core/src/parallel_impl.cpp:333
&lt;denchmark-link:https://github.com/opencv/opencv/pull/12&gt;#12&lt;/denchmark-link&gt;
 0x00007fffb4ba3f85 in cv::WorkerThread::thread_body (this=0x7fff607b9b30)
    at /tmp/cinelerra-5.1/thirdparty/opencv/modules/core/src/parallel_impl.cpp:447
&lt;denchmark-link:https://github.com/opencv/opencv/pull/13&gt;#13&lt;/denchmark-link&gt;
 0x00007fffb4ba4059 in cv::WorkerThread::thread_loop_wrapper (thread_object=)
    at /tmp/cinelerra-5.1/thirdparty/opencv/modules/core/src/parallel_impl.cpp:273
&lt;denchmark-link:https://github.com/opencv/opencv/pull/14&gt;#14&lt;/denchmark-link&gt;
 0x00007ffff64fe50b in start_thread () from /lib64/libpthread.so.0
&lt;denchmark-link:https://github.com/opencv/opencv/pull/15&gt;#15&lt;/denchmark-link&gt;
 0x00007ffff408d16f in clone () from /lib64/libc.so.6

Yes, it is a reproducible bug.  If there is a new version of libippiw, or a convenient way to submit a bug to someone who has the source code, I will be happy to describe the build and test procedure.
gg
	</description>
	<comments>
		<comment id='1' author='good12guy' date='2018-04-12T17:45:06Z'>
		I already have built using:
-DWITH_IPP=OFF 
and it does solve the issue, but if this library is not supported as open source,
perhaps the default should be that it is not used unless enabled. Note that:
statically linked with libippiw: ls -l findobj.plugin
-rwxr-xr-x 1 root root 49407672 Mar 31 09:01 findobj.plugin
statiically linked without libippiw: ls -l findobj.plugin
-rwxr-xr-x 1 root root 6299696 Apr 12 07:54 findobj.plugin
There is more that 6 times the obj from ipp than opencv.
That is a serious amount of code to omit.
What else is not really open source?
gg
		</comment>
		<comment id='2' author='good12guy' date='2018-04-12T18:35:31Z'>
		" it is a reproducible bug" without any source code it is difficult to reproduce.
"What else is not really open source" read license :
"&lt;denchmark-link:https://opencv.org/license.html&gt;By downloading, copying, installing or using the software you agree to this license. If you do not agree to this license, do not download, install, copy or use the software...&lt;/denchmark-link&gt;
."
		</comment>
		<comment id='3' author='good12guy' date='2018-04-12T18:41:08Z'>
		I merely am saying that this is not open cv... And I am asking: what is the procedure to debug
a problem with no source in this situation?   Yes, all I have to do to reproduce this is compile
and run a test case, and it happens every time.  I even admit that it may be my code... I simply
can't debug it because the default setup wasted my time, because it can't be debugged.
The license agreement does not repair any of this.  I advocate that the defaults should be
changed to avoid these issues, unless they are deliberately included by the developer.
		</comment>
		<comment id='4' author='good12guy' date='2018-04-12T18:45:48Z'>
		"" it is a reproducible bug"  which test case? give a link in opencv repo.
		</comment>
		<comment id='5' author='good12guy' date='2018-04-12T18:46:13Z'>
		If you want to report problem properly then please provide minimal reproducer for this crash.
		</comment>
		<comment id='6' author='good12guy' date='2018-04-12T20:20:01Z'>
		I am having the same or a similar problem. Here is the a minimal test example which crashes every-time on both computers I tested it on. The purpose of testing it on multiple computers was because I was wondering if it had to do with the number of cores/threads I had. One has four cores and no hyperthreading. The other has four cores and hyperthreading so Windows sees 8 "cores".
&lt;denchmark-code&gt;#include &lt;opencv2/opencv.hpp&gt;

int main(void) {
    cv::Mat dst;
    cv::Mat src(cv::Size(1858, 304), CV_32F);
    const double sigma = 10.1879;
    cv::GaussianBlur(src, dst, cv::Size(), sigma, sigma);
    return 0;
}
&lt;/denchmark-code&gt;

The important thing is that type == CV_32F.
You can use this code to find other matrix sizes and sigma values that cause a crash.
&lt;denchmark-code&gt;#include &lt;opencv2/opencv.hpp&gt;
#include &lt;cstdlib&gt;
#include &lt;ctime&gt;


int main(void) {
    cv::Mat dst;
    std::srand(std::time(NULL));
    for (int i = 0; i &lt; 16384; ++i) {
        int width = std::rand() % 2560 + 16;
        int height = std::rand() % 2048 + 16;
        double sigma = double(std::rand()) / double(RAND_MAX) * 10. + 1.;
        cv::Mat src(cv::Size(width, height), CV_32F); 
        printf("Attempting GaussianBlur with a matrix of %dx%d pixels and a sigma value of %g\n", width, height, sigma);
        cv::GaussianBlur(src, dst, cv::Size(), sigma, sigma);
        printf("GaussianBlur succeed iteration: %d\n", i);
    }
    return 0;
}
&lt;/denchmark-code&gt;

You can then replace the hard-coded values I used in the first example and you will find that they create a crash every-time.
		</comment>
		<comment id='7' author='good12guy' date='2018-04-12T20:22:48Z'>
		I will be happy to describe the build and test procedure.
The following procedure generates a default "user" build for cinelerra-5.1
The install step does not target the system, since it is a user build.
Instead it targets /build-path/bin/ which in this case is /tmp/junk/cin5/cinelerra-5.1/bin

==== build cinelerra-5.1 static with libipp
rm -rf /tmp/junk; cd /tmp; mkdir junk; cd junk/
git clone git://git.cinelerra-cv.org/goodguy/cinelerra.git cin5
cd cin5/cinelerra-5.1
sed -e '/WITH_IPP=OFF/d' -i opencv_build
# uncomment the following for debug opecv build.
# sed -e 's/RELEASE/RELWITHDEBINFO/' -i opencv_build
./autogen.sh
./configure --with-single-user --with-opencv=sta,tar=http://cinelerra-cv.org/five/opencv/opencv-20180401.tgz
make 2&gt;&amp;1 | tee log
make install
mv Makefile Makefile.cfg
cp Makefile.devel Makefile
======
requires approx 8GB storage, and may take some time to build.

This build includes opencv source from a tar dated 20180401.
This is to provide a stable code base for a reference build.

You need to download a short media file, and a session file.
you can access a copy from:
wget -P /tmp/junk https://cinelerra-cv.org/five/opencv/hand.mp4
wget -P /tmp/junk https://cinelerra-cv.org/five/opencv/ipp.xml

To operate the test:

# cd /tmp/junk/
# ls
cin5  hand.mp4  ipp.xml
# cd cin5/cinelerra-5.1/bin
# ./cin /tmp/junk/ipp.xml 
Cinelerra 5.1 - built: Apr 12 2018 13:56:21
git://git.cinelerra-cv.org/goodguy/cinelerra.git
(c) 2006-2018 Heroine Virtual Ltd. by Adam Williams
(c) 2007-2018 cin5 derivative by W.P. Morrow aka goodguy
Cinelerra is free software, covered by the GNU General Public License,
and you are welcome to change it and/or distribute copies of it under
certain conditions. There is absolutely no warranty for Cinelerra.

init plugin index: /tmp/junk/cin5/cinelerra-5.1/bin/plugins
init ladspa index: /tmp/junk/cin5/cinelerra-5.1/bin/ladspa
audio0 pad 4 0 (4)
** segv at 0x7fd296aa1a2b in pid 73673, tid 73775
writing debug data to /tmp/cinelerra_73673.dmp
   mov_sphere=0 jpeg_sphere=0
** dump complete
Segmentation fault (core dumped)


To operate the session from gdb, I suggest changing opencv_build,
by uncommenting this line in the reference build procedure:
# sed -e 's/RELEASE/RELWITHDEBINFO/' -i opencv_build
re-running the build.  Then, rebuild (again) using the devel makefile by:
cd /tmp/junk/cin5/cinelerra-5.1
CFLAGS=-ggdb make -j12 rebuild_all
This will make debug object files so that you can use gdb:
# cd /tmp/junk/cin5/cinelerra-5.1/cinelerra
# gdb ./ci
r /tmp/junk/ipp.xml
&lt;segv&gt;
bt
&lt;produces the referenced backtrace&gt;


If you have any problems, please let me know.
gg
		</comment>
		<comment id='8' author='good12guy' date='2018-04-12T21:38:24Z'>
		Sorry, I forget to mention the bld_prepare script.  This
will apply the build per-requisites.  It is in:
cinelerra-5.1/bld_scripts/
There is a document called Features5.pdf at:
&lt;denchmark-link:https://cinelerra-cv.org/five/Features5.pdf&gt;https://cinelerra-cv.org/five/Features5.pdf&lt;/denchmark-link&gt;

See the 1st section:
How to Build Cinelerra 5.1 from Developer's Git Repository
gg
		</comment>
		<comment id='9' author='good12guy' date='2018-04-12T22:37:53Z'>
		Python-Regius:
Thank you very much for providing an excellent reduced example.
I am pretty sure that the cinelerra compile was too hard for testing.
Additionally, with luck your test case will find all of these outlying cases.
Much appreciated.
gg
PS. I still wish the default was -DWITH_IPP=OFF.  I am not opposed to
using binary libraries, just adding them in a package whose name is "open" cv
is sort of misleading.  I am not sure I really believe in the cisco h264 codecs....
		</comment>
		<comment id='10' author='good12guy' date='2018-04-13T07:45:59Z'>
		&lt;denchmark-link:https://github.com/Python-Regius&gt;@Python-Regius&lt;/denchmark-link&gt;
 I can confirm an exception : *

version vs 201715.6.3  windows 10
&lt;denchmark-code&gt;

General configuration for OpenCV 4.0.0-pre =====================================
  Version control:               3.3.1-1322-g7ae83df8a-dirty

  Extra modules:
    Location (extra):            G:/Lib/opencv_contrib/modules
    Version control (extra):     3.3.0-412-g2aaa67a6-dirty

  Platform:
    Timestamp:                   2018-03-04T09:31:06Z
    Host:                        Windows 10.0.16299 AMD64
    CMake:                       3.11.0
    CMake generator:             Visual Studio 15 2017 Win64
    CMake build tool:            C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/MSBuild/15.0/Bin/MSBuild.exe
    MSVC:                        1913

  CPU/HW features:
    Baseline:                    SSE SSE2 SSE3
      requested:                 SSE3
    Dispatched code generation:  SSE4_1 SSE4_2 FP16 AVX AVX2
      requested:                 SSE4_1 SSE4_2 AVX FP16 AVX2 AVX512_SKX
      SSE4_1 (3 files):          + SSSE3 SSE4_1
      SSE4_2 (1 files):          + SSSE3 SSE4_1 POPCNT SSE4_2
      FP16 (2 files):            + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 AVX
      AVX (5 files):             + SSSE3 SSE4_1 POPCNT SSE4_2 AVX
      AVX2 (9 files):            + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 FMA3 AVX AVX2

  C/C++:
    Built as dynamic libs?:      YES
    C++ Compiler:                C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Tools/MSVC/14.13.26128/bin/Hostx64/x64/cl.exe  (ver 19.13.26129.0)
    C++ flags (Release):         /DWIN32 /D_WINDOWS /W4 /GR  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi      /EHa /wd4127 /wd4251 /wd4324 /wd4275 /wd4512 /wd4589 /MP12   /MD /O2 /Ob2 /DNDEBUG
    C++ flags (Debug):           /DWIN32 /D_WINDOWS /W4 /GR  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi      /EHa /wd4127 /wd4251 /wd4324 /wd4275 /wd4512 /wd4589 /MP12   /MDd /Zi /Ob0 /Od /RTC1
    C Compiler:                  C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Tools/MSVC/14.13.26128/bin/Hostx64/x64/cl.exe
    C flags (Release):           /DWIN32 /D_WINDOWS /W3  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi        /MP12    /MD /O2 /Ob2 /DNDEBUG
    C flags (Debug):             /DWIN32 /D_WINDOWS /W3  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi        /MP12  /MDd /Zi /Ob0 /Od /RTC1
    Linker flags (Release):      /machine:x64  /INCREMENTAL:NO
    Linker flags (Debug):        /machine:x64  /debug /INCREMENTAL
    ccache:                      NO
    Precompiled headers:         NO
    Extra dependencies:
    3rdparty dependencies:

  OpenCV modules:
    To be built:                 aruco bgsegm bioinspired calib3d ccalib core datasets dnn dnn_objdetect dpm face features2d flann fuzzy hfs highgui img_hash imgcodecs imgproc java_bindings_generator line_descriptor ml objdetect optflow phase_unwrapping photo plot python_bindings_generator reg rgbd saliency sfm shape stereo stitching structured_light superres surface_matching text tracking ts video videoio videostab viz world xfeatures2d ximgproc xobjdetect xphoto
    Disabled:                    js
    Disabled by dependency:      -
    Unavailable:                 cnn_3dobj cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev cvv dnn_modern freetype hdf java matlab ovis python2 python3
    Applications:                tests examples apps
    Documentation:               NO
    Non-free algorithms:         NO

  Windows RT support:            NO

  GUI:
    Win32 UI:                    YES
    VTK support:                 YES (ver 8.1.0)

  Media I/O:
    ZLib:                        build (ver 1.2.11)
    JPEG:                        build (ver 90)
    WEBP:                        build (ver encoder: 0x020e)
    PNG:                         build (ver 1.6.34)
    TIFF:                        build (ver 42 - 4.0.9)
    JPEG 2000:                   build (ver 1.900.1)
    OpenEXR:                     build (ver 1.7.1)

  Video I/O:
    Video for Windows:           YES
    DC1394:                      NO
    FFMPEG:                      YES (prebuilt binaries)
      avcodec:                   YES (ver 57.107.100)
      avformat:                  YES (ver 57.83.100)
      avutil:                    YES (ver 55.78.100)
      swscale:                   YES (ver 4.8.100)
      avresample:                YES (ver 3.7.0)
    GStreamer:                   NO
    DirectShow:                  YES

  Parallel framework:            Concurrency

  Other third-party libraries:
    Intel IPP:                   2017.0.3 [2017.0.3]
           at:                   G:/Lib/build/opencv/3rdparty/ippicv/ippicv_win
    Intel IPP IW:                sources (2017.0.3)
              at:                G:/Lib/build/opencv/3rdparty/ippicv/ippiw_win
    Lapack:                      NO
    Eigen:                       YES (ver 3.3.90)
    Custom HAL:                  NO
    Protobuf:                    build (3.5.1)

  OpenCL:                        YES (no extra features)
    Include path:                G:/Lib/opencv/3rdparty/include/opencl/1.2
    Link libraries:              Dynamic load

  Python (for build):

  Java:
    ant:                         NO
    JNI:                         C:/Program Files/Java/jdk1.8.0_152/include C:/Program Files/Java/jdk1.8.0_152/include/win32 C:/Program Files/Java/jdk1.8.0_152/include
    Java wrappers:               NO
    Java tests:                  NO

  Matlab:                        NO

  Install to:                    G:/Lib/install/opencv
-----------------------------------------------------------------

&lt;/denchmark-code&gt;

stack trace :
&lt;denchmark-code&gt; 	opencv_world400d.dll!icv_y8_ippiFilterGaussian_32f_C1R_L�()	Unknown
 	opencv_world400d.dll!icv_y8_ippiFilterGaussian_32f_C1R_L�()	Unknown
 	opencv_world400d.dll!icv_y8_ippiFilterGaussian_32f_C1R_L�()	Unknown
 	opencv_world400d.dll!icv_l9_ippiFilterGaussian_32f_C1R_L�()	Unknown
&gt;	opencv_world400d.dll!llwiFilterGaussian_Process(const void * pSrc, __int64 srcStep, void * pDst, __int64 dstStep, IppiSizeL roi, _IppiBorderType border, const double * pBorderVal, const _IwiFilterGaussianSpec * pSpec) Line 393	C
 	opencv_world400d.dll!llwiFilterGaussian_ProcessWrap(const _IwiImage * pSrcImage, _IwiImage * pDstImage, _IppiBorderType border, const double * pBorderVal, const _IwiTile * pTile, const _IwiFilterGaussianSpec * pSpec) Line 358	C
 	opencv_world400d.dll!llwiFilterGaussian_ProcessWrap(const _IwiImage * pSrcImage, _IwiImage * pDstImage, _IppiBorderType border, const double * pBorderVal, const _IwiTile * pTile, const _IwiFilterGaussianSpec * pSpec) Line 249	C
 	opencv_world400d.dll!iwiFilterGaussian(const _IwiImage * pSrcImage, _IwiImage * pDstImage, int kernelSize, double sigma, const _IwiFilterGaussianParams * pAuxParams, _IppiBorderType border, const double * pBorderVal, const _IwiTile * pTile) Line 121	C
 	opencv_world400d.dll!ipp::iwiFilterGaussian(const ipp::IwiImage &amp; srcImage, ipp::IwiImage &amp; dstImage, int kernelSize, double sigma, const ipp::IwiFilterGaussianParams &amp; auxParams, const ipp::IwiBorderType &amp; border, const ipp::IwiTile &amp; tile) Line 290	C++
 	opencv_world400d.dll!cv::ipp_gaussianBlurParallel::operator()(const cv::Range &amp; range) Line 3397	C++
 	opencv_world400d.dll!`anonymous namespace'::ParallelLoopBodyWrapper::operator()(const cv::Range &amp; sr) Line 332	C++
 	opencv_world400d.dll!`anonymous namespace'::ProxyLoopBody::operator()(int i) Line 400	C++
 	[External Code]	
 	opencv_world400d.dll!parallel_for_impl(const cv::Range &amp; range, const cv::ParallelLoopBody &amp; body, double nstripes) Line 532	C++
 	opencv_world400d.dll!cv::parallel_for_(const cv::Range &amp; range, const cv::ParallelLoopBody &amp; body, double nstripes) Line 475	C++
 	opencv_world400d.dll!cv::ipp_GaussianBlur(const cv::debug_build_guard::_InputArray &amp; _src, const cv::debug_build_guard::_OutputArray &amp; _dst, cv::Size_&lt;int&gt; ksize, double sigma1, double sigma2, int borderType) Line 3460	C++
 	opencv_world400d.dll!cv::GaussianBlur(const cv::debug_build_guard::_InputArray &amp; _src, const cv::debug_build_guard::_OutputArray &amp; _dst, cv::Size_&lt;int&gt; ksize, double sigma1, double sigma2, int borderType) Line 3551	C++
 	testopencl.exe!main() Line 15	C++
&lt;/denchmark-code&gt;

		</comment>
		<comment id='11' author='good12guy' date='2018-04-13T10:08:05Z'>
		Are you able to reproduce crash with OPENCV_FOR_THREADS_NUM=1 (or cv::setNumThreads(1))?
		</comment>
		<comment id='12' author='good12guy' date='2018-04-13T13:28:14Z'>
		No bug with :
&lt;denchmark-code&gt;int main(void) {
    cv::setNumThreads(1);
    cout &lt;&lt; getBuildInformation() &lt;&lt; endl;
    cv::Mat dst;
    cv::Mat src(cv::Size(1858, 304), CV_32F);
    const double sigma = 10;
    cv::GaussianBlur(src, dst, cv::Size(), sigma, sigma);
    return 0;
}
&lt;/denchmark-code&gt;

and  with
&lt;denchmark-code&gt;int main(void) {
    cout &lt;&lt; getBuildInformation() &lt;&lt; endl;
    cv::Mat dst;
    cv::Mat src(cv::Size(1858, 304), CV_32F);
    const double sigma = 10;
    cv::GaussianBlur(src, dst, cv::Size(), sigma, sigma);
    return 0;
}

&lt;/denchmark-code&gt;

Unhandled exception at 0x00007FFE961B4008 (KernelBase.dll) in testopencl.exe: 0xC0000005: Access violation reading location 0x00000140903C4000. 
no bug with
&lt;denchmark-code&gt;    const double sigma = 4.8;
    cv::GaussianBlur(src, dst, cv::Size(37,37), sigma, sigma);

&lt;/denchmark-code&gt;

but bug with
&lt;denchmark-code&gt;    const double sigma = 4.8;
    cv::GaussianBlur(src, dst, cv::Size(39,39), sigma, sigma);

&lt;/denchmark-code&gt;

and no bug too  with
&lt;denchmark-code&gt;    cv::Mat src(cv::Size(1858, 500), CV_32F);
    const double sigma = 4.8;
    cv::GaussianBlur(src, dst, cv::Size(39,39), sigma, sigma);

&lt;/denchmark-code&gt;

No bug with :
&lt;denchmark-code&gt;int main(void) {
    cv::setNumThreads(3);
    cout &lt;&lt; getBuildInformation() &lt;&lt; endl;
    cv::Mat dst;
    cv::Mat src(cv::Size(1858, 304), CV_32F);
    const double sigma = 10;
    cv::GaussianBlur(src, dst, cv::Size(), sigma, sigma);
    return 0;
}

&lt;/denchmark-code&gt;

but bug with
&lt;denchmark-code&gt;int main(void) {
    cv::setNumThreads(4);
    cout &lt;&lt; getBuildInformation() &lt;&lt; endl;
    cv::Mat dst;
    cv::Mat src(cv::Size(1858, 304), CV_32F);
    const double sigma = 10;
    cv::GaussianBlur(src, dst, cv::Size(), sigma, sigma);
    return 0;
}


&lt;/denchmark-code&gt;

		</comment>
		<comment id='13' author='good12guy' date='2018-04-14T09:43:40Z'>
		&lt;denchmark-link:https://github.com/LaurentBerger&gt;@LaurentBerger&lt;/denchmark-link&gt;

Using input image size fixed at width 1858, height 304, type CV_32FC1, I can observe that the crash happens with cv::GaussianBlur with explicit kernel size cv::Size(63, 63), (65, 65), (67, 67), and so on. It does not crash with (61, 61).
Note that the issue does not occur when kernel size width and height are not equal, despite bigger values. For example, if I add the line if (kx == ky) continue; to exclude those cases, I can run the test without any crash up to (77, 75).
Note that I did not verify the data in the output matrices. I just call the function, and repeat the loop if it doesn't crash.
This is my test function. (click to expand)
void test_2()
{
    std::cout &lt;&lt; cv::getBuildInformation() &lt;&lt; std::endl;
    cv::Mat dst;
    cv::Mat src(cv::Size(1858, 304), CV_32FC1);
    const double sigma = 10;
    std::vector ksizes;
    for (int kx = 55; kx &lt;= 77; kx += 2)
    {
        for (int ky = 55; ky &lt;= 77; ky += 2)
        {
            ksizes.emplace_back(kx, ky);
        }
    }
    auto sortSizeByArea = [](const cv::Size&amp; arg0, const cv::Size&amp; arg1) -&gt; bool
    {
        return (arg0.area() &lt; arg1.area());
    };
    std::sort(ksizes.begin(), ksizes.end(), sortSizeByArea);
    for (const cv::Size&amp; ksize : ksizes)
    {
        std::cout &lt;&lt; "Kernel size:  " &lt;&lt; ksize &lt;&lt; std::endl &lt;&lt; std::endl;
        cv::GaussianBlur(src, dst, ksize, sigma, sigma);
        std::cout &lt;&lt; "Kernel size:  " &lt;&lt; ksize &lt;&lt; "  Success" &lt;&lt; std::endl &lt;&lt; std::endl;
    }
}


		</comment>
		<comment id='14' author='good12guy' date='2018-04-14T13:53:08Z'>
		&lt;denchmark-link:https://github.com/kinchungwong&gt;@kinchungwong&lt;/denchmark-link&gt;

You should use this program :
&lt;denchmark-code&gt;#define NBTHREAD 4 
int main(void) {
    cv::setNumThreads(NBTHREAD);
    cout &lt;&lt; getBuildInformation() &lt;&lt; endl;
    cv::Mat dst;
    cv::Mat src(cv::Size(1858, 304), CV_32F);
    const double sigma = 10;
    cv::GaussianBlur(src, dst, cv::Size(63,63), sigma, sigma);
    return 0;
}

&lt;/denchmark-code&gt;

no bug but NBTHREAD =5  bug something is wrong when blur job is split and it depends of image size and number of process
		</comment>
		<comment id='15' author='good12guy' date='2018-04-14T21:48:52Z'>
		Regarding the inclusion of IPP by default at build/install time, this is a build/installation issue. It is also a documentation issue, as users might not know about IPP initially. These can be split off to a new issue.
Users of CMake-GUI will be able to see all settings regarding dependencies. Users who use CMake without the GUI will not be able to see them. Going through and configuring CMake-GUI isn't easy, but this is a CMake-GUI design issue. Currently there is no viable alternative to CMake, due to current project  complexity and cross-platform requirements.
OpenCV is in need of improving documentation. Most focus is on beginner level as many users approach computer vision for the first time as part of educational or hobby project. However, there is need for advanced users to get answers to certain things, such as a "documentation for license lawyers" who need to get an exhaustive list of all dependencies which are loaded into an OpenCV build. For now, familiarity with the list of options via CMake-GUI is the only way to get this information.
The CMake-GUI configuration process cannot be made more intimidating. Beginning users are already intimidated by the large number of options displayed on the configuration page of OpenCV's CMake, even if they usually don't need to change these options. For advanced users who know the existence of IPP (via experience, or improved documentation in the future), they can change the options on CMake as needed.
		</comment>
		<comment id='16' author='good12guy' date='2018-04-22T14:00:43Z'>
		I agree that the segv is gone, but... I would carefully check all of the interfaces that use this library with the addressing strategy used for this kind of kernel function.  I am quite disappointed that you changed the name of the bug report to efface the fact that the real issue is that the code is not available in the default deliverable for object data that represents the vast majority of the load.
gg
		</comment>
	</comments>
</bug>