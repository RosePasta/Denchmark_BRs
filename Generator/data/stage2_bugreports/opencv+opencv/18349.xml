<bug id='18349' author='chacha21' open_date='2020-09-16T07:41:43Z' closed_time='2020-09-19T22:48:45Z'>
	<summary>Guard against const matrix, misleading assert</summary>
	<description>
Consider the following (wrong) code :
&lt;denchmark-code&gt;cv::Mat m1(cv::Size(128, 128), CV_32FC1);
cv::Mat m2(cv::Size(128, 128), CV_32FC1);
const cv::Mat m3;
cv::multiply(m1, m2, m3, 1, m1.type());
&lt;/denchmark-code&gt;

Since m3 is const, it is not allowed to be allocated by cv::multiply() and an assert will be raised.
OpenCV(4.4.0) Error: Unspecified error (&gt;  (expected: 'm.type() == CV_MAT_TYPE(mtype)'), where 'm.type()' is 0 (CV_8UC1) must be equal to 'CV_MAT_TYPE(mtype)' is 5 (CV_32FC1)
If m3 is pre-allocated, the const flag won't be a problem and it will run correctly.
Could it be possible to get a better error message when const prevents attended result ?
In the given example, the "const" flag was obvious, but it is less explicit inside a const method, for instance.
&lt;denchmark-code&gt;
class A
{
  public:
    A(void):m1(cv::Size(128,128), CV_32FC1),m2(cv::Size(128,128), CV_32FC1) {}
  public:
    void f(void) const
    {
      cv::multiply(m1, m2, m3, 1, m1.type());//m3 is const here, so an error is raised as well, and it is not so easy to figure it out
    }
  public:
    cv::Mat m1;
    cv::Mat m2;
    cv::Mat m3;
};
&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>