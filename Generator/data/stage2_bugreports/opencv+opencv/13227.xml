<bug id='13227' author='dan-masek' open_date='2018-11-20T20:34:13Z' closed_time='2018-12-25T14:37:47Z'>
	<summary>drawMatches with CV_8UC4 inputs draws on blank background</summary>
	<description>
Based on the code, seems relevant to all OpenCV versions/platforms.
When I call cv::drawMatches with img1 and img2 being BGRA images and outImg left empty, it doesn't complain. Since the documentation doesn't mention any restrictions on channel count, I assume this is a valid use-case. However, it fails to produce a background that's a composition of the two input images, as happens for 1 and 3 channel images.
The problem seems to be here: &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.4/modules/features2d/src/draw.cpp#L149&gt;https://github.com/opencv/opencv/blob/3.4/modules/features2d/src/draw.cpp#L149&lt;/denchmark-link&gt;

There's no check for invalid image depth as there is in &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.4/modules/features2d/src/draw.cpp#L106&gt;drawKeypoints&lt;/denchmark-link&gt;
, and the  ends up reallocating the ROIs (so the master image is unmodified).
Also, IMHO CV_8UC1 would seem more appropriate than just plain CV_8U when checking the Mat type (it's not entirely obvious that it means a 1-channel image, even though the enum values are the same).
Example script:
&lt;denchmark-code&gt;import numpy as np
import cv2

imageLeft = cv2.cvtColor(cv2.imread('box.png'), cv2.COLOR_BGR2BGRA)
imageRight = cv2.cvtColor(cv2.imread('box_in_scene.png'), cv2.COLOR_BGR2BGRA)

orb = cv2.ORB_create()
kpLeft, desLeft = orb.detectAndCompute(imageLeft, None)
kpRight, desRight = orb.detectAndCompute(imageRight, None)

bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
matches = bf.match(desLeft, desRight)

goodMatches = []
for m in matches:
    if m.distance &lt; 100:
        goodMatches.append(m)
        
output = cv2.drawMatches(imageLeft, kpLeft, imageRight, kpRight, [goodMatches[0]], None, flags=0)

cv2.imwrite('output.png', output)
&lt;/denchmark-code&gt;

Actual output:
&lt;denchmark-link:https://user-images.githubusercontent.com/10824015/48800255-8f54fb80-ed09-11e8-9a1c-12efee75ebe3.png&gt;&lt;/denchmark-link&gt;

Expected output:
&lt;denchmark-link:https://user-images.githubusercontent.com/10824015/48800264-9714a000-ed09-11e8-8298-9c4ee83a89e8.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='dan-masek' date='2018-11-20T20:36:45Z'>
		What would be the preferred solution to this?

Restrict it to just 1 and 3 channel inputs, just like in drawKeypoints, and fix the documentation (of both) to reflect this?
Make it work correctly even with 4 channel images? Potentially also apply this to drawKeypoints.

		</comment>
		<comment id='2' author='dan-masek' date='2018-12-19T15:37:25Z'>
		&lt;denchmark-link:https://github.com/dan-masek&gt;@dan-masek&lt;/denchmark-link&gt;
, please check &lt;denchmark-link:https://github.com/opencv/opencv/pull/13481&gt;#13481&lt;/denchmark-link&gt;
. I got the following image with code above. Perhaps it's different because of different box.png and box_in_scene.png.
&lt;denchmark-link:https://user-images.githubusercontent.com/25801568/50230122-1ce54300-03bd-11e9-8069-313bbb0bed7e.png&gt;&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>