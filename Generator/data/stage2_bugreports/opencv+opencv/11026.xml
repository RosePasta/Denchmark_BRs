<bug id='11026' author='tomoaki0705' open_date='2018-03-07T09:47:06Z' closed_time='2018-03-08T14:28:54Z'>
	<summary>imgproc: test WarpPerspective and WarpPerspectiveNear fail under specific situation</summary>
	<description>
2 days in a row, but another compiler bug issue
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 1393fd9
Operating System / Platform =&gt; Windows 10 Pro 64bit
Compiler =&gt; Visual Studio 2013 Update 5
CMake option =&gt; -DWITH_CUDA=OFF -G"Visual Studio 12 2013 Win64" -DCPU_BASELINE=AVX2
Configuration =&gt;Release / RelWithDebInfo, never on Debug

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;


12 tests fail on opencv_perf_imgproc
The tests are all from TestWarpPerspective_WarpPerspective.WarpPerspective and TestWarpPerspectiveNear_t_WarpPerspectiveNear.WarpPerspectiveNear
All the filed tests were from BORDER_CONSTANT

&lt;denchmark-code&gt;[  FAILED  ] 12 tests, listed below:
[  FAILED  ] TestWarpPerspective_WarpPerspective.WarpPerspective/0, where GetParam() = (640x480, INTER_NEAREST, BORDER_CONSTANT)
[  FAILED  ] TestWarpPerspective_WarpPerspective.WarpPerspective/2, where GetParam() = (640x480, INTER_LINEAR, BORDER_CONSTANT)
[  FAILED  ] TestWarpPerspective_WarpPerspective.WarpPerspective/4, where GetParam() = (1280x720, INTER_NEAREST, BORDER_CONSTANT)
[  FAILED  ] TestWarpPerspective_WarpPerspective.WarpPerspective/6, where GetParam() = (1280x720, INTER_LINEAR, BORDER_CONSTANT)
[  FAILED  ] TestWarpPerspective_WarpPerspective.WarpPerspective/8, where GetParam() = (1920x1080, INTER_NEAREST, BORDER_CONSTANT)
[  FAILED  ] TestWarpPerspective_WarpPerspective.WarpPerspective/10, where GetParam() = (1920x1080, INTER_LINEAR, BORDER_CONSTANT)
[  FAILED  ] TestWarpPerspectiveNear_t_WarpPerspectiveNear.WarpPerspectiveNear/1, where GetParam() = (640x480, INTER_NEAREST, BORDER_CONSTANT, 8UC4)
[  FAILED  ] TestWarpPerspectiveNear_t_WarpPerspectiveNear.WarpPerspectiveNear/5, where GetParam() = (640x480, INTER_LINEAR, BORDER_CONSTANT, 8UC4)
[  FAILED  ] TestWarpPerspectiveNear_t_WarpPerspectiveNear.WarpPerspectiveNear/9, where GetParam() = (1920x1080, INTER_NEAREST, BORDER_CONSTANT, 8UC4)
[  FAILED  ] TestWarpPerspectiveNear_t_WarpPerspectiveNear.WarpPerspectiveNear/13, where GetParam() = (1920x1080, INTER_LINEAR, BORDER_CONSTANT, 8UC4)
[  FAILED  ] TestWarpPerspectiveNear_t_WarpPerspectiveNear.WarpPerspectiveNear/17, where GetParam() = (2592x1944, INTER_NEAREST, BORDER_CONSTANT, 8UC4)
[  FAILED  ] TestWarpPerspectiveNear_t_WarpPerspectiveNear.WarpPerspectiveNear/21, where GetParam() = (2592x1944, INTER_LINEAR, BORDER_CONSTANT, 8UC4)
&lt;/denchmark-code&gt;


I also tried following different cmake configuration / Visual Studio but it only happened when activating AVX optimization on VS2013, both at the same time

test fails: -DWITH_CUDA=OFF -G"Visual Studio 12 2013 Win64" -DCPU_BASELINE=AVX
test fails: -DWITH_CUDA=OFF -G"Visual Studio 12 2013 Win64" -DCPU_BASELINE=AVX2
test passes: -DWITH_CUDA=OFF -G"Visual Studio 12 2013 Win64"
test passes: -DWITH_CUDA=OFF -G"Visual Studio 12 2013 Win64" -DCPU_DISPATCH=SSE2;SSE3;SSSE3;SSE4_1;SSE4_2;POPCNT;AVX;AVX2
test passes: -DWITH_CUDA=OFF -G"Visual Studio 11 2012 Win64" -DCPU_BASELINE=AVX
test passes: -DWITH_CUDA=OFF -G"Visual Studio 14 2015 Win64" -DCPU_BASELINE=AVX2


So it started to sound like a compiler bug.
Also, I dumped one of the result and I got suspicious result from no AVX optimization and wiith AVX optimization
As you can see, the border color should be gray (150, 150, 150) when they are losing red value (0, 150, 150)
I traced the code and strange behavior was coming from here

&lt;denchmark-code&gt;WarpPerspectiveInvoker invoker(src, dst, M, interpolation, borderType, Scalar(borderValue[0], borderValue[1], borderValue[2], borderValue[3]));
&lt;/denchmark-code&gt;


where each element of the last parameter borderValue is 150.0
Also comparing with the assembly, the code was described as following (I removed some parts, but it has enough information for evidence)
AVX optimization (causes error)

&lt;denchmark-code&gt;vmovups     ymm6,ymmword ptr [rax]      ; load borderValue[0-3]
vzeroupper                              ; clear uppper half of ymm6 (which is borderValue[2-3]!)
vmovups     ymmword ptr [rbp+0E8h],ymm6 ; store borderValue[0-3]
&lt;/denchmark-code&gt;


no AVX optimization (test passes)

&lt;denchmark-code&gt;movups      xmm8,xmmword ptr [rax+10h]  ; load borderValue[2-3]
movups      xmm6,xmmword ptr [rax]      ; load borderValue[0-1]
movups      xmmword ptr [rbp+0E8h],xmm6 ; store borderValue[0-1]
movups      xmmword ptr [rbp+0F8h],xmm8 ; store borderValue[2-3]
&lt;/denchmark-code&gt;


So the point was misuse of vzeroupper which was clearing the red value of borderValue
I tweaked a bit of source code and managed to avoid this bug.
I'll send a PR later
Also, there is no more compiler bug that I want to report.

&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;


Run opencv_perf_imgproc under the environment described above

	</description>
	<comments>
		<comment id='1' author='tomoaki0705' date='2018-03-07T11:21:16Z'>
		Does MSVS add this vzeroupper call automatically or it comes from somewhere?
&lt;denchmark-link:https://github.com/tomoaki0705&gt;@tomoaki0705&lt;/denchmark-link&gt;
 May I ask you to comment vzeroupper call &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.4.1/modules/core/include/opencv2/core/cv_cpu_dispatch.h#L125&gt;here&lt;/denchmark-link&gt;
 and try to build broken and check asm code configuration without your patch?
		</comment>
		<comment id='2' author='tomoaki0705' date='2018-03-07T13:00:58Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
, I appreciate your comment.
The vzeroupper comes automatically.
I commented out as you suggested, but the result did not change.  The vzeroupper still appears.
I was working on  so  was defined as 1, thus, &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.4.1/modules/core/include/opencv2/core/cv_cpu_dispatch.h#L120&gt;this ifdef &lt;/denchmark-link&gt;
 disabled the  from the beginning. (correct me if I'm wrong)
&lt;denchmark-code&gt;#if defined CV_CPU_COMPILE_AVX &amp;&amp; !defined CV_CPU_BASELINE_COMPILE_AVX  &lt;&lt;&lt; This ifdef 
struct VZeroUpperGuard {
#ifdef __GNUC__
    __attribute__((always_inline))
#endif
    //inline ~VZeroUpperGuard() { _mm256_zeroupper(); }
};
#define __CV_AVX_GUARD VZeroUpperGuard __vzeroupper_guard; (void)__vzeroupper_guard;
#endif
&lt;/denchmark-code&gt;

I peeked in the cv_cpu_config.h and double checked that CV_CPU_BASELINE_COMPILE_AVX was 1
&lt;denchmark-code&gt;// OpenCV CPU baseline features

#define CV_CPU_COMPILE_SSE 1
#define CV_CPU_BASELINE_COMPILE_SSE 1

#define CV_CPU_COMPILE_SSE2 1
#define CV_CPU_BASELINE_COMPILE_SSE2 1

#define CV_CPU_COMPILE_SSE3 1
#define CV_CPU_BASELINE_COMPILE_SSE3 1

#define CV_CPU_COMPILE_SSSE3 1
#define CV_CPU_BASELINE_COMPILE_SSSE3 1

#define CV_CPU_COMPILE_SSE4_1 1
#define CV_CPU_BASELINE_COMPILE_SSE4_1 1

#define CV_CPU_COMPILE_POPCNT 1
#define CV_CPU_BASELINE_COMPILE_POPCNT 1

#define CV_CPU_COMPILE_SSE4_2 1
#define CV_CPU_BASELINE_COMPILE_SSE4_2 1

#define CV_CPU_COMPILE_AVX 1
#define CV_CPU_BASELINE_COMPILE_AVX 1

#define CV_CPU_BASELINE_FEATURES 0 \
    , CV_CPU_SSE \
    , CV_CPU_SSE2 \
    , CV_CPU_SSE3 \
    , CV_CPU_SSSE3 \
    , CV_CPU_SSE4_1 \
    , CV_CPU_POPCNT \
    , CV_CPU_SSE4_2 \
    , CV_CPU_AVX \


// OpenCV supported CPU dispatched features

#define CV_CPU_DISPATCH_COMPILE_FP16 1
#define CV_CPU_DISPATCH_COMPILE_AVX2 1
&lt;/denchmark-code&gt;

Of course, just in case, I re-ran the program as you suggested, but the vzeroupper was inserted automatically.
&lt;denchmark-code&gt;    WarpPerspectiveInvoker invoker(src, dst, M, interpolation, borderType, Scalar(borderValue[0], borderValue[1], borderValue[2], borderValue[3]));
 mov         rax,qword ptr [rbp+1D0h]  
 vmovups     ymm6,ymmword ptr [rax]             &lt;&lt;&lt;&lt; load of borderValue
 lea         rax,[cv::ParallelLoopBody::`vftable' (07FED04C8E50h)]  
 mov         qword ptr [rbp+10h],rax  
 lea         rax,[cv::WarpPerspectiveInvoker::`vftable' (07FED0512088h)]  
 mov         qword ptr [rbp+10h],rax  
 lea         rdx,[rbp-50h]  
 lea         rcx,[rbp+18h]  
 vzeroupper                                     &lt;&lt;&lt;&lt; here
 call        cv::Mat::Mat (07FECD6375B8h)  
 nop  
 lea         rdx,[dst]  
 lea         rcx,[rbp+78h]  
 call        cv::Mat::Mat (07FECD6375B8h)  
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='tomoaki0705' date='2018-03-07T13:15:47Z'>
		&lt;denchmark-link:https://github.com/tomoaki0705&gt;@tomoaki0705&lt;/denchmark-link&gt;
 Thank you for an update!
		</comment>
	</comments>
</bug>