<bug id='9440' author='vpatilvasu' open_date='2017-08-23T01:24:28Z' closed_time='2017-08-23T19:43:15Z'>
	<summary>Error building 3rdparty/Carotene for arm64-v8a with clang/c++_static</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.3.0
Operating System / Platform =&gt; Ubuntu x86_64
Compiler =&gt; Clang
NDK =&gt; r15c
STL =&gt; c++_static
Android API =&gt; 23
ARCH =&gt; arm64-v8a
cmake: 3.9.1

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

I'm building OpenCV 3.3.0 for Android with above configuration.
I am using toolchain from the NDK ${ANDROID_NDK}/build/cmake/android.toolchain.cmake instead because I couldn't get cmake_android_arm.sh to work with platform/android/android.toolchain.cmake
I see following compiler error:

opencv/3rdparty/carotene/src/colorconvert.cpp:588:38: error: unknown register name 'q4' in asm
register uint8x16_t vc255   asm ("q4") = vmovq_n_u8(255);

&lt;denchmark-link:https://github.com/opencv/opencv/blob/3.3.0/3rdparty/carotene/src/colorconvert.cpp#L588&gt;Line 588&lt;/denchmark-link&gt;
 in colorconvert.cpp is
#if defined(__GNUC__) &amp;&amp; __GNUC__ == 4 &amp;&amp; __GNUC_MINOR__ &lt; 7
register uint8x16_t vc255   asm ("q4") = vmovq_n_u8(255);
aarch64 clang toolchain was compiled with r15c using:
&lt;denchmark-code&gt;python build/tools/make_standalone_toolchain.py \
-v --arch arm64 --api 23 --stl libc++ \
--install-dir toolchains/aarch64-linux-androideabi-clang
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;cmake -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON -DCMAKE_BUILD_TYPE=Release
-DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake
-DANDROID_NATIVE_API_LEVEL=android-23
-DWITH_FFMPEG=OFF -DCV_TRACE=OFF -DBUILD_SHARED_LIBS=OFF
-DENABLE_NEON=ON -DENABLE_CXX11=ON -DANDROID_STL=c++_static -DANDROID_ABI="arm64-v8a" -DANDROID_TOOLCHAIN_NAME=aarch64-linux-androideabi-clang ../..
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='vpatilvasu' date='2017-08-23T06:29:00Z'>
		Is the fix going to be to change all inline assembly code in 3rdparty/carotene from
#if defined(__GNUC__) &amp;&amp; __GNUC__ == 4 &amp;&amp; __GNUC_MINOR__ &lt; 7
to
#if !defined(__aarch64__) &amp;&amp; defined(__GNUC__) &amp;&amp; __GNUC__ == 4 &amp;&amp; __GNUC_MINOR__ &lt; 7
?
		</comment>
		<comment id='2' author='vpatilvasu' date='2017-08-23T08:10:17Z'>
		Perhaps we should guard from clang instead of aarch64: !defined(__clang__)
		</comment>
		<comment id='3' author='vpatilvasu' date='2017-08-23T08:38:13Z'>
		I see. Btw, I didn't have any compile time issues for armeabi-v7a. I haven't done quality analysis with clang+armeabi-v7a+carotene inline assembly yet.
		</comment>
		<comment id='4' author='vpatilvasu' date='2017-08-23T15:06:06Z'>
		Clang tries to simulate GCC 4.2.1:

from 'make VERBOSE=1' on failed source file:
/opt/android/android-ndk-r15c/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++ --target=aarch64-none-linux-android --gcc-toolchain=/opt/android/android-ndk-r15c/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64 --sysroot=/opt/android/android-ndk-r15c/sysroot  -DCAROTENE_NS=carotene_o4t -DWITH_NEON -I/home/alalek/projects/opencv/build/android_cmake -isystem /usr/include/eigen3 -I/home/alalek/projects/opencv/dev/3rdparty/carotene/include -isystem /opt/android/android-ndk-r15c/sources/cxx-stl/llvm-libc++/include -isystem /opt/android/android-ndk-r15c/sources/android/support/include -isystem /opt/android/android-ndk-r15c/sources/cxx-stl/llvm-libc++abi/include -isystem /opt/android/android-ndk-r15c/sources/cxx-stl/llvm-libc++/include -isystem /opt/android/android-ndk-r15c/sources/android/support/include -isystem /opt/android/android-ndk-r15c/sources/cxx-stl/llvm-libc++abi/include -isystem /usr/include -isystem /usr/include/aarch64-linux-android  -fvisibility=hidden -isystem /opt/android/android-ndk-r15c/sysroot/usr/include/aarch64-linux-android -D__ANDROID_API__=23 -g -DANDROID -ffunction-sections -funwind-tables -fstack-protector-strong -no-canonical-prefixes -Wa,--noexecstack -Wformat -Werror=format-security -std=c++11    -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-unnamed-type-template-args -Wno-comment -fdiagnostics-show-option -Qunused-arguments -fomit-frame-pointer    -funwind-tables -fwrapv -O2 -DNDEBUG   -DNDEBUG -fPIC   -mfpu=neon -std=c++11 --param ipcp-unit-growth=100000 --param inline-unit-growth=100000 --param large-stack-frame-growth=5000 -dM -E -x c++ - &lt; /dev/null | grep GNUC

&lt;denchmark-code&gt;#define __GNUC_GNU_INLINE__ 1
#define __GNUC_MINOR__ 2
#define __GNUC_PATCHLEVEL__ 1
#define __GNUC__ 4
&lt;/denchmark-code&gt;

But aarch is the right way to guard "inline" assembly (it is not allowed in C/C++ for aarch64).
Could you try this patch: &lt;denchmark-link:https://github.com/opencv/opencv/pull/9450&gt;#9450&lt;/denchmark-link&gt;
 ?
BTW, I observe additional issues (they should be fixed separately):

-isystem /usr/include/eigen3 - host-based package is involved into Android builds (eigen is headers-only library, but it is a bad practice anyway)
-isystem /usr/include - something is wrong with CMake scripts

Also I didn't run make_standalone_toolchain.py - it is not used with CMake toolchain.
		</comment>
		<comment id='5' author='vpatilvasu' date='2017-08-23T18:32:38Z'>
		I am able to compile for aarch64 with &lt;denchmark-link:https://github.com/opencv/opencv/pull/9450&gt;#9450&lt;/denchmark-link&gt;
. Thanks.
		</comment>
	</comments>
</bug>