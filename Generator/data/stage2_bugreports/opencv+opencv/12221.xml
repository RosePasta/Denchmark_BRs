<bug id='12221' author='NCBee' open_date='2018-08-15T18:02:26Z' closed_time='2018-09-07T19:44:55Z'>
	<summary>RotatedRect fails to calculate correct intersections due to precision</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; master
Operating System / Platform =&gt; Linux 64 Bit
Compiler =&gt; gcc

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

OpenCV RotatedRect intersection calculation currently uses float for intermediate variables. In some edge cases, the limited precision causes assertion problems inside intersection code:
&lt;denchmark-code&gt;   CV_Assert( intersection.size() &lt;= 8 );
&lt;/denchmark-code&gt;

The problem can be mitigated by doing all calculations in double precision as shown below:
&lt;denchmark-code&gt;      float A = -vec2[j].y;
      float B = vec2[j].x;
      float C = -(A * pts2[j].x + B * pts2[j].y);

      float s = A * x + B * y + C;

//Using float: xx = -1990.670654, yy = 1636.783203,A = 200.753662, B = -121.916260, C = 599184.937500, x = -2071.253906, y = 1504.090820, s = 0.000000

      double A = -vec2[j].y;
      double B = vec2[j].x;
      double C = -(A * pts2[j].x + B * pts2[j].y);

      double s = A * x + B * y + C;

//Using double: xx = -1990.670654, yy = 1636.783203,A = 200.753662, B = -121.916260, C = 599184.910076, x = -2071.253906, y = 1504.090820, s = -0.023922
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

See above example.
	</description>
	<comments>
		<comment id='1' author='NCBee' date='2018-08-15T18:02:57Z'>
		Also check &lt;denchmark-link:http://answers.opencv.org/question/74697/cvrotatedrectangleintersection-assertion-failed/&gt;http://answers.opencv.org/question/74697/cvrotatedrectangleintersection-assertion-failed/&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='NCBee' date='2018-08-15T18:17:31Z'>
		Precision switch is just a workaround. It usually just hides real problem more deeper.
Please create minimal reproducer for this problem. Dump "failed" inputs and write simple code, like &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.4.2/modules/core/test/test_operations.cpp#L1366-L1389&gt;this one&lt;/denchmark-link&gt;
)
Update: Thanks! I missed your PR with tests.
		</comment>
		<comment id='3' author='NCBee' date='2018-08-16T04:46:02Z'>
		Does samePointEps increasing can help?



opencv/modules/imgproc/src/intersection.cpp


        Lines 254 to 255
      in
      94758c1






 // If this check fails then it means we're getting dupes, increase samePointEps 



 CV_Assert( intersection.size() &lt;= 8 ); 








opencv/modules/imgproc/src/intersection.cpp


        Lines 231 to 239
      in
      94758c1






 double d2 = dx*dx + dy*dy; // can be a really small number, need double here 



 



 if( d2 &lt; samePointEps*samePointEps ) 



 { 



 // Found a dupe, remove it 



 std::swap(intersection[j], intersection.back()); 



     intersection.pop_back(); 



     j--; // restart check 



 } 





		</comment>
		<comment id='4' author='NCBee' date='2018-08-16T07:19:24Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 I don’t think so. When using float, some calculations result in 0.0f, which no matter how you set the epsilon value it’s still less than that.
I have already submitted a PR that has two unit tests showing the numbers that cause the algorithm to fail when using floats.
		</comment>
	</comments>
</bug>