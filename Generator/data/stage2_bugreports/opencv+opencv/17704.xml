<bug id='17704' author='moooV252' open_date='2020-06-30T11:47:14Z' closed_time='2020-07-08T20:00:19Z'>
	<summary>Fails to build with CUDA enabled</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.3.0-527-ga711e2aa41 (master latest)
Operating System / Platform =&gt; Windows 64 Bit
Compiler =&gt; Visual Studio 2019

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Have cloned latest master branch, as well as opencv-contrib master branch to separate folders.
Cuda version: 11.0RC (latest)
Build fails with an error:
&lt;denchmark-code&gt;Building NVCC (Device) object modules/world/CMakeFiles/cuda_compile_1.dir/__/core/src/cuda/Release/cuda_compile_1_generated_gpu_mat.cu.obj
nvcc fatal   : A single input file is required for a non-link phase when an outputfile is specified
CMake Error at cuda_compile_1_generated_gpu_mat.cu.obj.Release.cmake:220 (message):
Error generating
D:/_UTILS/_deps/opencv_build/modules/world/CMakeFiles/cuda_compile_1.dir/__/core/src/cuda/Release/cuda_compile_1_generated_gpu_mat.cu.obj
&lt;/denchmark-code&gt;

The same exact building process worked fine with opencv-4.2.0 and cuda 10.2
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;


Clone opencv and opencv-contrib from git
init vars for MKL and TBB:

&lt;denchmark-code&gt;"C:\Program Files (x86)\IntelSWTools\compilers_and_libraries\windows\tbb\bin\tbbvars.bat" intel64
"C:\Program Files (x86)\IntelSWTools\compilers_and_libraries\windows\mkl\bin\mklvars.bat" intel64
&lt;/denchmark-code&gt;


Cmake it:

&lt;denchmark-code&gt;cmake ..\opencv -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=C:\opencv -DOPENCV_ENABLE_NONFREE:BOOL=ON -DOPENCV_EXTRA_MODULES_PATH=..\opencv_contrib\modules -DBUILD_opencv_python2:BOOL=OFF -DBUILD_opencv_python3:BOOL=ON -DWITH_NVCUVID=OFF -DWITH_CUDA=ON -DCUDA_FAST_MATH=ON -DWITH_CUBLAS=ON -DWITH_MKL=ON -DMKL_USE_MULTITHREAD=ON -DMKL_WITH_TBB=ON -DWITH_TBB=ON -DINSTALL_TESTS=OFF -DINSTALL_C_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DCUDNN_LIBRARY=C:\cudnn\lib\x64\cudnn.lib -DCUDNN_INCLUDE_DIR=C:\cudnn\include -DWITH_VTK=OFF -DBUILD_JAVA=OFF -DBUILD_opencv_java_bindings_generator=OFF -DBUILD_opencv_world=ON -DBUILD_opencv_gapi=OFF -DCUDA_ARCH_PTX=6.1 -DCUDA_ARCH_BIN=6.1
&lt;/denchmark-code&gt;


Build with:

&lt;denchmark-code&gt;msbuild INSTALL.vcxproj -m -p:Configuration=Release
&lt;/denchmark-code&gt;


It fails. ðŸ˜²

Here's the full console output:
&lt;denchmark-link:https://github.com/opencv/opencv/files/4851519/opencv_build_fail_log.txt&gt;opencv_build_fail_log.txt&lt;/denchmark-link&gt;

&lt;denchmark-h:h5&gt;Issue submission checklist&lt;/denchmark-h&gt;


[v] I report the issue, it's not a question


[v] I checked the problem with documentation, FAQ, open issues,
answers.opencv.org, Stack Overflow, etc and have not found solution


[v] I updated to latest OpenCV version and the issue is still there


[v] There is reproducer code and related data files: videos, images, onnx, etc



	</description>
	<comments>
		<comment id='1' author='moooV252' date='2020-06-30T12:10:30Z'>
		Could you please check code from 3.4 branch?
		</comment>
		<comment id='2' author='moooV252' date='2020-07-01T02:46:02Z'>
		I've checked out opencv 3.4 branch plus opencv-contrib 3.4 branch.
Now it fails to configure with an error:
&lt;denchmark-code&gt;CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
Please set them or make sure they are set and tested correctly in the CMake files:
CUDA_nppicom_LIBRARY (ADVANCED)

&lt;/denchmark-code&gt;

I've taken a look at the cuda folder - the required library is missing indeed. Maybe they've refactored it out in cuda11, who knows. At least, it was a clean cuda installation on my machine.
The full console output is here:
&lt;denchmark-link:https://github.com/opencv/opencv/files/4855347/opencv_3.4_config_fail_log.txt&gt;opencv_3.4_config_fail_log.txt&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='moooV252' date='2020-07-02T05:04:06Z'>
		I'm seeing this now too.
OpenCV =&gt; master latest
Operating System / Platform =&gt; Windows 64 Bit
Compiler =&gt; Visual Studio 2019
set CMAKE_CONFIG_GENERATOR="Visual Studio 14 2015 Win64"
set CMAKE_OPTIONS=-DBUILD_PERF_TESTS:BOOL=OFF -DBUILD_TESTS:BOOL=OFF -DBUILD_DOCS:BOOL=OFF
set CMAKE_OPTIONS=%CMAKE_OPTIONS% -DWITH_CUDA:BOOL=ON
set CMAKE_OPTIONS=%CMAKE_OPTIONS% -DBUILD_EXAMPLES:BOOL=ON -DINSTALL_CREATE_DISTRIB=ON
cmake -G%CMAKE_CONFIG_GENERATOR% %CMAKE_OPTIONS% ..
cmake --build .  --config release
Worked fine about a month ago.  Using CUDA 10.2
		</comment>
		<comment id='4' author='moooV252' date='2020-07-02T05:28:57Z'>
		I've downgraded cuda to 10.2 and tested it.
4.4.0-pre (master latest) fails to build the same way it did with 11RC
4.3.0-release builds fine but does not load to python saying that DLLs are missing. Dependency walker does not show any anomalies.
It's really strage - if it's builds ok then it's able to find everything it needs. But if you load this module into python it can't.
All environment variables are exactly the same.
&lt;denchmark-code&gt;Python 3.8.3 (tags/v3.8.3:6f8c832, May 13 2020, 22:37:02) [MSC v.1924 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import cv2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python38\lib\site-packages\cv2\__init__.py", line 96, in &lt;module&gt;
    bootstrap()
  File "C:\Python38\lib\site-packages\cv2\__init__.py", line 86, in bootstrap
    import cv2
ImportError: DLL load failed while importing cv2: The specified module could not be found.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='moooV252' date='2020-07-03T11:09:26Z'>
		I just comment out the following block of code and it works perfectly.
&lt;denchmark-link:https://user-images.githubusercontent.com/58073628/86463157-2f349100-bd57-11ea-806e-60edc2b7f8d3.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='moooV252' date='2020-07-03T17:04:26Z'>
		&lt;denchmark-link:https://github.com/thangict210&gt;@thangict210&lt;/denchmark-link&gt;
 - I can confirn that commenting out the CMAKE code you pointed out worked for me as well.
		</comment>
		<comment id='7' author='moooV252' date='2020-07-06T11:08:39Z'>
		cuda accelerate image/video decode/encode ,gpuMat need nvidia Video_Codec_SDK and nv-codec-headers(download here: git clone &lt;denchmark-link:https://git.videolan.org/git/ffmpeg/nv-codec-headers.git&gt;https://git.videolan.org/git/ffmpeg/nv-codec-headers.git&lt;/denchmark-link&gt;
)
		</comment>
	</comments>
</bug>