<bug id='12015' author='huaweiping' open_date='2018-07-19T04:26:34Z' closed_time='2018-10-02T21:01:37Z'>
	<summary>A bug in cv::cuda::compare</summary>
	<description>
I find a bug in cv::cuda::Compare. The description for the function said:

@brief Compares elements of two matrices (or of a matrix and scalar).
......
@param dst Destination matrix that has the same size and type as the input array(s).
........

but it performs extremely slow in GPU, so I look at the source code and find:



opencv/modules/cudaarithm/src/element_operations.cpp


        Lines 286 to 295
      in
      3d14128






 // compare 



 



 void cmpMat(const GpuMat&amp; src1, const GpuMat&amp; src2, GpuMat&amp; dst, const GpuMat&amp;, double, Stream&amp; stream, int cmpop); 



 



 void cmpScalar(const GpuMat&amp; src, Scalar val, bool inv, GpuMat&amp; dst, const GpuMat&amp;, double, Stream&amp; stream, int cmpop); 



 



 void cv::cuda::compare(InputArray src1, InputArray src2, OutputArray dst, int cmpop, Stream&amp; stream) 



 { 



 arithm_op(src1, src2, dst, noArray(), 1.0, CV_8U, stream, cmpMat, cmpScalar, cmpop); 



 } 





Actually, the type of the dst is set as CV_8U but not as same as the src.
Compared with the other functions like Add or Subtract:



opencv/modules/cudaarithm/src/element_operations.cpp


        Lines 176 to 185
      in
      3d14128






 // subtract 



 



 void subMat(const GpuMat&amp; src1, const GpuMat&amp; src2, GpuMat&amp; dst, const GpuMat&amp; mask, double, Stream&amp; _stream, int); 



 



 void subScalar(const GpuMat&amp; src, Scalar val, bool inv, GpuMat&amp; dst, const GpuMat&amp; mask, double, Stream&amp; stream, int); 



 



 void cv::cuda::subtract(InputArray src1, InputArray src2, OutputArray dst, InputArray mask, int dtype, Stream&amp; stream) 



 { 



 arithm_op(src1, src2, dst, mask, 1.0, dtype, stream, subMat, subScalar); 



 } 








opencv/modules/cudaarithm/src/element_operations.cpp


        Lines 164 to 173
      in
      3d14128






 // add 



 



 void addMat(const GpuMat&amp; src1, const GpuMat&amp; src2, GpuMat&amp; dst, const GpuMat&amp; mask, double, Stream&amp; _stream, int); 



 



 void addScalar(const GpuMat&amp; src, Scalar val, bool, GpuMat&amp; dst, const GpuMat&amp; mask, double, Stream&amp; stream, int); 



 



 void cv::cuda::add(InputArray src1, InputArray src2, OutputArray dst, InputArray mask, int dtype, Stream&amp; stream) 



 { 



 arithm_op(src1, src2, dst, mask, 1.0, dtype, stream, addMat, addScalar); 



 } 





I'm not sure if it will make the code slow, but I think it's a bug.
	</description>
	<comments>
		<comment id='1' author='huaweiping' date='2018-07-19T06:50:58Z'>
		Result has type CV_8U (with final values 0 or 0xff (255)). Documentation should be fixed.
		</comment>
		<comment id='2' author='huaweiping' date='2018-07-19T07:49:49Z'>
		More questions &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 . If I use the compare() to compare two CV_32F by this function, will it be extremely slow as the result is a CV_8U? It costs me half of the computation time which is far beyond my imagination.
Besides, when I use cv::cuda::GpuMat::convertTo() to convert a CV_32F to a CV_8U like this:
&lt;denchmark-code&gt;	cuda::Stream stream;
	buffer.input.upload(input, stream);
	buffer.output.upload(input, stream);
	buffer.input.convertTo(buffer.input, CV_8UC1);
        buffer.output.setTo(Scalar(0),stream);
&lt;/denchmark-code&gt;

it shows an error:

OpenCV Error: Gpu API call (unspecified launch failure) in cv::cudev::grid_transform_detail::TransformDispatcher&lt;true, Policy&gt;::call, file d:\opencv\opencv\sources\modules\cudev\include\opencv2\cudev\grid\detail/transform.hpp, line 321

When I use cv::cuda::Stream like this, the error will disappear:
&lt;denchmark-code&gt;	cuda::Stream stream;
	buffer.input.upload(input, stream);
	buffer.output.upload(input, stream);
	buffer.input.convertTo(buffer.input, CV_8UC1, stream);
        buffer.output.setTo(Scalar(0),stream);
&lt;/denchmark-code&gt;

However, no matter what the next function is , it will always show an error(setTo() as an example):

OpenCV Error: Gpu API call (unspecified launch failure) in cv::cuda::GpuMat::setTo, file D:/OpenCV/opencv/sources/modules/core/src/cuda/gpu_mat.cu, line 387

Thanks!
		</comment>
		<comment id='3' author='huaweiping' date='2018-07-19T09:26:28Z'>
		Please try to run OpenCV tests from "cudaarithm" module. They should pass.
I don't understand point about convertTo(), it is not necessary to change "input" data type.
Take a look on tests for compare (there no "upload" calls):

accuracy
perfomance

BTW, Before working with GPU/CUDA functions it is better to implement "reference" CPU implementation of your algorithm. At least for testing.
		</comment>
		<comment id='4' author='huaweiping' date='2018-07-20T00:31:23Z'>
		I mean when I use convertTo() to convert a  CV_32F type GpuMat to a CV_8U type, there always be an error.

The "buffer.input" is a CV_32F type. I just upload it from CPU and use convertTo() without any more operation, then the error shows up.
The reason why I use convertTo() is because I want to know if CV_8U will perform better than CV_32
in compare().
BTW, thanks for the advice of tests. But I can't CMake with BUILD_PERF_TESTS and BUILD_TESTS options from this problem &lt;denchmark-link:https://github.com/opencv/opencv/issues/6716&gt;#6716&lt;/denchmark-link&gt;
 with OpenCV 3.4.0+CUDA 8.0.61+Visual Studio 2015. Appearantly still somehthing wrong in the CUDA.
		</comment>
		<comment id='5' author='huaweiping' date='2018-08-15T14:30:03Z'>
		I met the same problem - "convertTo", opencv3.4 + cuda 8.0 + VS 2015 without BUILD_PERF_TESTS &amp; BUILD_TESTs,  Any updated information ?
		</comment>
	</comments>
</bug>