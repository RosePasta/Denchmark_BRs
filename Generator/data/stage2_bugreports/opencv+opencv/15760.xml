<bug id='15760' author='berak' open_date='2019-10-22T13:43:42Z' closed_time='2019-12-15T23:01:02Z'>
	<summary>division with MatExpr</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.1.2-dev
Operating System / Platform =&gt; win7 32bit
Compiler =&gt; mingw64 8.1

assuming X a valid Mat and Y an empty/invalid one, the expression X / Y does not throw an exception, but calculates 1 / X instead.
because here (e.b.data is invalid in our case):



opencv/modules/core/src/matrix_expressions.cpp


        Lines 1340 to 1343
      in
      471b400






 else if( e.flags == '/' &amp;&amp; e.b.data ) 



 cv::divide(e.a, e.b, dst, e.alpha); 



 else if( e.flags == '/' &amp;&amp; !e.b.data ) 



 cv::divide(e.alpha, e.a, dst ); 





why does it have e.a and e.alpha in reverse ?
shouldn't it have thrown Sizes of input arguments do not match , like it does in the Y / X case ?
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Mat x(3,3,CV_32FC3,Scalar(3,2,1));
Mat y; // invalid
Mat r = x / y;
cout &lt;&lt; r &lt;&lt; endl;
&lt;/denchmark-code&gt;

[0.33333334, 0.5, 1, 0.33333334, 0.5, 1, 0.33333334, 0.5, 1;
0.33333334, 0.5, 1, 0.33333334, 0.5, 1, 0.33333334, 0.5, 1;
0.33333334, 0.5, 1, 0.33333334, 0.5, 1, 0.33333334, 0.5, 1]
	</description>
	<comments>
		<comment id='1' author='berak' date='2019-10-22T14:40:17Z'>
		I believe we need check much early than mentioned code (MatOp_Bin::assign()) - somewhere in operator / ()
		</comment>
		<comment id='2' author='berak' date='2019-10-24T05:09:25Z'>
		So in several of the operator / () overloads, in the right places, CV_ERROR will have to be thrown if one of the operands to the expression is invalid.
		</comment>
		<comment id='3' author='berak' date='2019-10-24T06:08:33Z'>
		btw, similar problem for | &amp; ^ operators here
		</comment>
		<comment id='4' author='berak' date='2019-10-25T03:19:13Z'>
		&lt;denchmark-link:https://github.com/berak&gt;@berak&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 , I think more operator overloads may be suffering from the same issue. Here is an example of the boolean compare operator not doing an expected operation.
&lt;denchmark-code&gt;int main()
{
        Mat a = Mat::ones(2, 2, CV_8U);
        Mat b;

        cout &lt;&lt; (a == b) &lt;&lt; endl;
        return 0;
}
&lt;/denchmark-code&gt;

Produces (in 3.4 dev on Ubuntu)
&lt;denchmark-code&gt;[255, 255;
 255, 255]
&lt;/denchmark-code&gt;

which doesn't make sense, unless I've totally overlooked something. Element-wise boolean with "nothing" should not return true values.
		</comment>
		<comment id='5' author='berak' date='2019-11-20T05:56:45Z'>
		A list of more operations that are affected, in addition to the ones above:
&lt;denchmark-code&gt;    Mat ones = Mat::ones(2, 2, CV_8U);
    Mat zeros = Mat::zeros(2, 2, CV_8U);
    Mat empty;
    Mat result;
    int s = 9;
    int alpha = 10;

    ...
    // In each case below, result seems to get an empty matrix
    result = ones &gt; empty;
    result = min(empty, s);
    result = min(s, empty);
    result = s + empty;
    result = empty + s;
    result = s - empty;
    result = empty - s;
    result = empty * alpha;
    result = alpha * empty;
    result = -empty;
    result = abs(empty);
    result = empty.t();
&lt;/denchmark-code&gt;

In other cases where an exception is actually thrown somewhere, it is not graceful and consistent behaviour between the various MatExpr schemes.
		</comment>
		<comment id='6' author='berak' date='2019-11-20T06:40:25Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
  As an example, here is what I propose.... in &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.4/modules/core/src/matrix_expressions.cpp#L1024&gt;MatExpr min&lt;/denchmark-link&gt;
 for example, to error out gracefully.
&lt;denchmark-code&gt;MatExpr min(const Mat&amp; a, const Mat&amp; b)
{
    CV_INSTRUMENT_REGION();

    //Check for emptiness of operands and throw exception if a Mat input is empty.
    if (a.empty() || b.empty())
    {
        CV_Error(Error::StsBadArg, "One or more matrix operands are empty\n");
    }

    MatExpr e;
    MatOp_Bin::makeExpr(e, 'm', a, b);
    return e;
}
&lt;/denchmark-code&gt;

Similarly for other expression handlings. The emptiness checks can be done as a separate function.
I haven't tried this out but I suspect this should work.
I can have a PR for this.
		</comment>
		<comment id='7' author='berak' date='2019-11-20T07:09:46Z'>
		Looks good to me.
Please remove trailing "\n" from the error description.
Also add simple test (in test_operations.cpp) with these checks:
&lt;denchmark-code&gt;TEST(Core_MatExpr, empty_check_15760)
{
    EXPECT_THROW(Mat c = min(Mat(), Mat(), cv::Exception);
    ...
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='8' author='berak' date='2019-11-21T03:41:10Z'>
		&lt;denchmark-link:https://github.com/opencv/opencv/pull/15966&gt;#15966&lt;/denchmark-link&gt;
 created to start work on this. More checks and tests coming.
		</comment>
	</comments>
</bug>