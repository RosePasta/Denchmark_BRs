<bug id='15534' author='harristmv' open_date='2019-09-18T07:25:57Z' closed_time='2020-03-14T13:41:43Z'>
	<summary>eltwise_layer.cpp:116: error: (-215:Assertion failed) inputs[0] == inputs[i]  in function 'getMemoryShapes'</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; : 4.1.1.26
Operating System / Platform =&gt; Ubuntu 18.04
Compiler =&gt; ython3.5

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Hello I am having the following issue. I am trying to freeze &lt;denchmark-link:https://github.com/qubvel/efficientnet/blob/master/efficientnet/model.py&gt;EfficientNet&lt;/denchmark-link&gt;
 taken from this repo and use the  file for using it with OpenCV  module.
The model is a simple classification network. Right after the the Feature Extractor specified in the link, I just try add an extra dense &amp; and an extra classification layer of num_classes.
I have frozen several networks and used them with the dnn library before and I know all the issues that can arise, which I have already tried.
Example code in python (also seen in attached script below):
&lt;denchmark-code&gt;net = cv2.dnn.readNetFromTensorflow('frozen.pb') 
x_cv = np.random.random((224, 224, 3)).astype(np.uint8)
blob = cv2.dnn.blobFromImage(x_cv, 1.0, (224, 224), (0, 0, 0))
net.setInput(blob)
# (1 x 200)
s = net.forward().shape
print(s)
&lt;/denchmark-code&gt;

However life is not that easy. This is the following error:
&lt;denchmark-code&gt;error: OpenCV(4.1.1) /io/opencv/modules/dnn/src/layers/eltwise_layer.cpp:116: error: (-215:Assertion failed) inputs[0] == inputs[i] in function 'getMemoryShapes'
&lt;/denchmark-code&gt;

Eventually I Found out that the problem is caused when using the &lt;denchmark-link:https://github.com/qubvel/efficientnet/blob/master/efficientnet/model.py#L238&gt;Squeeze and excitation module&lt;/denchmark-link&gt;
 . If I disable the flag &amp; remove those modules from the network, the forward pass works.
In my opinion is the flow of the graph of the SE Module that is not acceptable from OpenCV  from going to an average pooling to 1x1 convs and finally multiplying the features.
&lt;denchmark-h:h5&gt;Some remarks:&lt;/denchmark-h&gt;

I had this issue with SE modules in the past, with the difference that the model was using more basic operations such as:


reduce_mean across the features instead of average pooling


fully connected layers instead of 1x1 Convolutions, since they result in the same number of features.


Additionally:


I used the optimize_for_inference_lib tool with no success.


Using the following command: net.getUnconnectedOutLayersNames() gave me the following results:
['block1a_se_squeeze/Mean/flatten', 'block2a_se_squeeze/Mean/flatten', 'block2b_se_squeeze/Mean/flatten', 'block3a_se_squeeze/Mean/flatten', 'block3b_se_squeeze/Mean/flatten', 'block4a_se_squeeze/Mean/flatten', 'block4b_se_squeeze/Mean/flatten', 'block4c_se_squeeze/Mean/flatten', 'block5a_se_squeeze/Mean/flatten', 'block5b_se_squeeze/Mean/flatten', 'block5c_se_squeeze/Mean/flatten', 'block6a_se_squeeze/Mean/flatten', 'block6b_se_squeeze/Mean/flatten', 'block6c_se_squeeze/Mean/flatten', 'block6d_se_squeeze/Mean/flatten', 'block7a_se_squeeze/Mean/flatten', 'avg_pool/Mean/flatten', 'dense_1/Softmax']


&lt;denchmark-h:h5&gt;Follow up&lt;/denchmark-h&gt;

I would like to know if there is a possible way to add the SE Module either by

reshaping the network in a compatible manner
transforming the graph and using a .pbtxt file additionally
register the module as custom &amp; override the getMemoryShapes()

Of course the easiest solution would be preferrable :)
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Running the attached .py (extension currently txt) file, will follow the pipeline:

Initialize EfficientnetB0 (smallest) with SE modules.
Create a dummy training set and run keras training fit() function.
Save the model as keras extension and reset graph
Load &amp; freeze model with standard keras freezing method. You should see 344 variables frozen in the terminal.
Load model for OpenCV, create dummy blob &amp; run net.forward(). It will crash with the aforementioned error.

&lt;denchmark-link:https://github.com/opencv/opencv/files/3624944/opencv_efficientnet.txt&gt;opencv_efficientnet.txt&lt;/denchmark-link&gt;

&lt;denchmark-h:h5&gt;Making the model freezable.&lt;/denchmark-h&gt;

If you jump to line 254 of the attached script, you can override the has_se=True to False. This will make the model compatible with OpenCV, proving the detailed description above that this is the factor that makes it show the assertion error.
	</description>
	<comments>
		<comment id='1' author='harristmv' date='2019-09-18T08:08:24Z'>
		
Load model for OpenCV, create dummy blob &amp; run net.forward(). It will crash with the aforementioned error.

Please provide the frozen model even with dummy weights (frozen.pb). The issue should be reproducible without training steps.

net = cv2.dnn.readNetFromTensorflow('frozen.pb')

		</comment>
		<comment id='2' author='harristmv' date='2019-09-18T08:18:55Z'>
		Hello,
Since I cannot upload the .pb file due to size, even after compressing, I am attaching a google drive link:
&lt;denchmark-link:https://drive.google.com/file/d/1CuNCRfdlNdvoTLoPl_E9bWC0RofuFhAJ/view&gt;https://drive.google.com/file/d/1CuNCRfdlNdvoTLoPl_E9bWC0RofuFhAJ/view&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='harristmv' date='2019-09-20T16:28:10Z'>
		&lt;denchmark-h:h2&gt;Update&lt;/denchmark-h&gt;

By doing some debugging, the layer that causes the problem is this:
&lt;denchmark-code&gt;x = layers.multiply([x, se_tensor], name=prefix + 'se_excite')
&lt;/denchmark-code&gt;

This causes the first SE Module the following:
&lt;denchmark-code&gt;se_tensor is of shape [1, 1, 1, 32]
x is of shape [1, 112, 112, 32]
&lt;/denchmark-code&gt;

Keras allows the element-wise multiplication to happen by using the layers.multiply layer, but not OpenCV. OpenCV complains because the shapes internally are:
&lt;denchmark-code&gt;x = [1, 32, 112, 112] # Channel first 
se_tensor = [1, 32, 1, 1]
&lt;/denchmark-code&gt;

And gives the above error in eltwise_layer.cpp.
Already tried several stuff including:

Reshaping the network to be dense layers.

This complains that internally does an ExpandDims to keep the flow of the graph, resulting in the
following:



&lt;denchmark-code&gt;cv2.error: OpenCV(4.1.1) /io/opencv/modules/dnn/src/dnn.cpp:525: error: (-2:Unspecified error) Can't create layer "ExpandDims" of type "ExpandDims" in function 'getLayerInstance'
&lt;/denchmark-code&gt;


Tiling the se_tensor to become of shape [1, 112, 112, 32] with tf.keras.backend.tile

This complains that internally now doesn't have a Tile Layer and gives the same error as above:



&lt;denchmark-code&gt;cv2.error: OpenCV(4.1.1) /io/opencv/modules/dnn/src/dnn.cpp:525: error: (-2:Unspecified error) Can't create layer "Facenet/lambda/Tile" of type "Tile" in function 'getLayerInstance'
&lt;/denchmark-code&gt;

I tried to write the Tile Layer &amp; register it as a custom layer with the following code:
&lt;denchmark-code&gt;class TileLayer(object):
    def __init__(self, params, blobs):
        self.height = blobs[0][0][1]
        self.width = self.height

    def getMemoryShapes(self, inputs):
        _in, _out = inputs[0], inputs[1]
        return [[_in.shape[0], _in.shape[1], self.height, self.width]]

    def forward(self, inputs):
        return [np.tile(inputs[0], [1, 1, self.height, self.width])]
&lt;/denchmark-code&gt;

I am aware the above code might not be correct completely. However I get the following error which I cannot debug:
&lt;denchmark-code&gt;cv2.error: OpenCV(4.1.1) /io/opencv/modules/dnn/misc/python/pyopencv_dnn.hpp:146: error: (-213:The function/feature is not implemented) Failed to call "getMemoryShapes" method in function 'getMemoryShapes'
&lt;/denchmark-code&gt;

Any leads/recommendations ?
		</comment>
		<comment id='4' author='harristmv' date='2019-12-19T14:05:49Z'>
		I am having the same problem with mobilenetv3 classification models.
		</comment>
		<comment id='5' author='harristmv' date='2019-12-19T15:42:24Z'>
		&lt;denchmark-link:https://github.com/r0l1&gt;@r0l1&lt;/denchmark-link&gt;
, As a workaround you may try to apply this patch:
--- a/modules/dnn/src/tensorflow/tf_importer.cpp
+++ b/modules/dnn/src/tensorflow/tf_importer.cpp
@@ -1574,8 +1574,8 @@ void TFImporter::populateNet(Net dstNet)
             }
             else
             {
-                layerParams.set("operation", "prod");
-                int id = dstNet.addLayer(name, "Eltwise", layerParams);
+                layerParams.set("axis", 0);
+                int id = dstNet.addLayer(name, "Scale", layerParams);
                 layer_id[name] = id;
 
                 for (int ii = 0; ii &lt; layer.input_size(); ii++)
Please note that this is a workaround and may break other networks.
		</comment>
		<comment id='6' author='harristmv' date='2019-12-19T16:45:53Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 thank you for the hint! However my models are ONNX models trained with mxnet. I'll have a look at the onnx importer.
The error logs are slightly different:
&lt;denchmark-code&gt;OpenCV(4.2.0-pre) /tmp/opencv/src/modules/dnn/src/layers/eltwise_layer.cpp:209: error: (-215:Assertion failed) inputs[0][j] == inputs[i][j] in function 'getMemoryShapes'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='harristmv' date='2020-03-05T21:02:14Z'>
		&lt;denchmark-link:https://github.com/r0l1&gt;@r0l1&lt;/denchmark-link&gt;
, for ONNX model please try &lt;denchmark-link:https://github.com/opencv/opencv/pull/16738&gt;#16738&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='harristmv' date='2020-03-07T19:45:42Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 perfect! works now. Thank you!
&lt;denchmark-link:https://github.com/harristmv&gt;@harristmv&lt;/denchmark-link&gt;
 could you please check if this fixes also your problem?
Edit: Still broken for the openvino backend:
&lt;denchmark-code&gt;OpenCV(4.2.0-dev) /tmp/opencv/opencv/modules/dnn/src/layers/scale_layer.cpp:234: error: (-215:Assertion failed) !blobs.empty() in function 'initInfEngine'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='harristmv' date='2020-03-07T20:14:56Z'>
		&lt;denchmark-link:https://github.com/r0l1&gt;@r0l1&lt;/denchmark-link&gt;
, you need build with OpenVINO 2020.1 and see if nGraph backend enabled (see wiki page &lt;denchmark-link:https://github.com/opencv/opencv/wiki/Intel%27s-Deep-Learning-Inference-Engine-backend&gt;https://github.com/opencv/opencv/wiki/Intel%27s-Deep-Learning-Inference-Engine-backend&lt;/denchmark-link&gt;
). And use corresponding backend enum value (we will make it by default in the next release by &lt;denchmark-link:https://github.com/opencv/opencv/pull/16746&gt;#16746&lt;/denchmark-link&gt;
)
		</comment>
		<comment id='10' author='harristmv' date='2020-03-07T20:40:05Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 thanks. I am already using OpenVino 2020.1. Will try if it's compatible with the Myriad VPUs...
Edit: I have set the environment variable to OPENCV_DNN_BACKEND_INFERENCE_ENGINE_TYPE="NGRAPH" and checked if OpenCV is build with ngraph, but the error is still the same. Did I forget a step?
		</comment>
		<comment id='11' author='harristmv' date='2020-03-08T06:32:22Z'>
		Please check if you pulled the changes from &lt;denchmark-link:https://github.com/opencv/opencv/pull/16753&gt;#16753&lt;/denchmark-link&gt;

		</comment>
		<comment id='12' author='harristmv' date='2020-03-08T08:58:44Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 I just pulled from the latest master branch and included also &lt;denchmark-link:https://github.com/opencv/opencv/pull/16746&gt;#16746&lt;/denchmark-link&gt;
 for the default backend change. Now everything works if I use the CPU inference engine backend. I'll test the Myriad target once I am back at work. Thank you for the great work imho. Things are progressing quite fast for OpenCV during the last year.
Edit: Just checked the Myriad target. Works as expected.
		</comment>
		<comment id='13' author='harristmv' date='2020-03-08T18:05:20Z'>
		&lt;denchmark-link:https://github.com/harristmv&gt;@harristmv&lt;/denchmark-link&gt;
, please test &lt;denchmark-link:https://github.com/opencv/opencv/pull/16760&gt;#16760&lt;/denchmark-link&gt;
. It now enables Squeeze &amp; Excite block from MobileNet V3.
		</comment>
		<comment id='14' author='harristmv' date='2020-03-09T09:14:51Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 I Applied the changes on 4.2.0 version, for EfficientNet (which I had issue with).
Forward pass succeeds :)
I will wait for this when this is fully merged, I suppose also on the latest version (4.2.0) right?
Thanks for your efforts! :)
		</comment>
		<comment id='15' author='harristmv' date='2020-03-09T10:21:43Z'>
		
I will wait for this when this is fully merged, I suppose also on the latest version (4.2.0) right?

4.2.0 has been already released: &lt;denchmark-link:https://github.com/opencv/opencv/releases/tag/4.2.0&gt;https://github.com/opencv/opencv/releases/tag/4.2.0&lt;/denchmark-link&gt;

So first we will merge the fix to 3.4 branch then port to master (weekly basis, like this one: &lt;denchmark-link:https://github.com/opencv/opencv/pull/16753&gt;#16753&lt;/denchmark-link&gt;
)
Thanks for experiment!
		</comment>
	</comments>
</bug>