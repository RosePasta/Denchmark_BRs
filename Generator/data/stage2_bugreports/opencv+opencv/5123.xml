<bug id='5123' author='joelteply' open_date='2015-08-04T04:13:28Z' closed_time='2016-10-25T14:24:38Z'>
	<summary>floodFill uses up all memory and loops forever with MASK_ONLY flag</summary>
	<description>
Input with FLOODFILL_MASK_ONLY and either an RGB or BW image will crash an iPhone with an infinite loop that takes up all available memory.
I am able to create this issue every time by calling flood fill with an rgb video frame and hitting this method at 10 frames per second. The input is an rgb or bw image a lowdiff and highdiff as a scalar of 3:3:3
called 10 times per second on VGA video feed:
cv::floodFill(img, mask, position, color, 0,
                                       cv::Scalar::all(2), cv::Scalar::all(4), cv::FLOODFILL_MASK_ONLY | 4);
	</description>
	<comments>
		<comment id='1' author='joelteply' date='2015-08-04T04:15:50Z'>
		The failure could be elsewhere. In an attempt to remedy this issue I took the floodFill code from version 2.4, renamed the methods, and it still had the same issue. Using the previous framework in its entirety did not have this issue, as I have had no trouble using it for a long time in our app.
		</comment>
		<comment id='2' author='joelteply' date='2015-08-04T04:17:38Z'>
		Here is the code I had written using the previous floodfill to no avail:
/*M///////////////////////////////////////////////////////////////////////////////////////
//
//  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.
//
//  By downloading, copying, installing or using the software you agree to this license.
//  If you do not agree to this license, do not download, install,
//  copy or use the software.
//
//
//                           License Agreement
//                For Open Source Computer Vision Library
//
// Copyright (C) 2000, Intel Corporation, all rights reserved.
// Copyright (C) 2013, OpenCV Foundation, all rights reserved.
// Third party copyrights are property of their respective owners.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
//   * Redistribution's of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//
//   * Redistribution's in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//
//   * The name of the copyright holders may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
// This software is provided by the copyright holders and contributors "as is" and
// any express or implied warranties, including, but not limited to, the implied
// warranties of merchantability and fitness for a particular purpose are disclaimed.
// In no event shall the Intel Corporation or contributors be liable for any direct,
// indirect, incidental, special, exemplary, or consequential damages
// (including, but not limited to, procurement of substitute goods or services;
// loss of use, data, or profits; or business interruption) however caused
// and on any theory of liability, whether in contract, strict liability,
// or tort (including negligence or otherwise) arising in any way out of
// the use of this software, even if advised of the possibility of such damage.
//
//M*/

#include "LegacyFloodfill.h"

enum { FLOODFILL_FIXED_RANGE = 1 &lt;&lt; 16, FLOODFILL_MASK_ONLY = 1 &lt;&lt; 17 };

using namespace cv;

void scalarToRawData(const Scalar&amp; s, void* _buf, int type, int unroll_to)
{
    int i, depth = CV_MAT_DEPTH(type), cn = CV_MAT_CN(type);
    CV_Assert(cn &lt;= 4);
    switch(depth)
    {
        case CV_8U:
        {
            uchar* buf = (uchar*)_buf;
            for(i = 0; i &lt; cn; i++)
                buf[i] = saturate_cast&lt;uchar&gt;(s.val[i]);
            for(; i &lt; unroll_to; i++)
                buf[i] = buf[i-cn];
        }
            break;
        case CV_8S:
        {
            schar* buf = (schar*)_buf;
            for(i = 0; i &lt; cn; i++)
                buf[i] = saturate_cast&lt;schar&gt;(s.val[i]);
            for(; i &lt; unroll_to; i++)
                buf[i] = buf[i-cn];
        }
            break;
        case CV_16U:
        {
            ushort* buf = (ushort*)_buf;
            for(i = 0; i &lt; cn; i++)
                buf[i] = saturate_cast&lt;ushort&gt;(s.val[i]);
            for(; i &lt; unroll_to; i++)
                buf[i] = buf[i-cn];
        }
            break;
        case CV_16S:
        {
            short* buf = (short*)_buf;
            for(i = 0; i &lt; cn; i++)
                buf[i] = saturate_cast&lt;short&gt;(s.val[i]);
            for(; i &lt; unroll_to; i++)
                buf[i] = buf[i-cn];
        }
            break;
        case CV_32S:
        {
            int* buf = (int*)_buf;
            for(i = 0; i &lt; cn; i++)
                buf[i] = saturate_cast&lt;int&gt;(s.val[i]);
            for(; i &lt; unroll_to; i++)
                buf[i] = buf[i-cn];
        }
            break;
        case CV_32F:
        {
            float* buf = (float*)_buf;
            for(i = 0; i &lt; cn; i++)
                buf[i] = saturate_cast&lt;float&gt;(s.val[i]);
            for(; i &lt; unroll_to; i++)
                buf[i] = buf[i-cn];
        }
            break;
        case CV_64F:
        {
            double* buf = (double*)_buf;
            for(i = 0; i &lt; cn; i++)
                buf[i] = saturate_cast&lt;double&gt;(s.val[i]);
            for(; i &lt; unroll_to; i++)
                buf[i] = buf[i-cn];
            break;
        }
        default:
            CV_Error(CV_StsUnsupportedFormat,"");
    }
}

namespace cbi
{

struct FFillSegment
{
    short y;
    short l;
    short r;
    short prevl;
    short prevr;
    short dir;
};

enum
{
    UP = 1,
    DOWN = -1
};

#define ICV_PUSH( Y, L, R, PREV_L, PREV_R, DIR )  \
{                                                 \
    tail-&gt;y = (ushort)(Y);                        \
    tail-&gt;l = (ushort)(L);                        \
    tail-&gt;r = (ushort)(R);                        \
    tail-&gt;prevl = (ushort)(PREV_L);               \
    tail-&gt;prevr = (ushort)(PREV_R);               \
    tail-&gt;dir = (short)(DIR);                     \
    if( ++tail == buffer_end )                    \
    {                                             \
        buffer-&gt;resize(buffer-&gt;size() * 3/2);     \
        tail = &amp;buffer-&gt;front() + (tail - head);  \
        head = &amp;buffer-&gt;front();                  \
        buffer_end = head + buffer-&gt;size();       \
    }                                             \
}

#define ICV_POP( Y, L, R, PREV_L, PREV_R, DIR )   \
{                                                 \
    --tail;                                       \
    Y = tail-&gt;y;                                  \
    L = tail-&gt;l;                                  \
    R = tail-&gt;r;                                  \
    PREV_L = tail-&gt;prevl;                         \
    PREV_R = tail-&gt;prevr;                         \
    DIR = tail-&gt;dir;                              \
}

struct ConnectedComp
{
    ConnectedComp();
    Rect rect;
    Point pt;
    int threshold;
    int label;
    int area;
    int harea;
    int carea;
    int perimeter;
    int nholes;
    int ninflections;
    double mx;
    double my;
    Scalar avg;
    Scalar sdv;
};

ConnectedComp::ConnectedComp()
{
    rect = Rect(0, 0, 0, 0);
    pt = Point(-1, -1);
    threshold = -1;
    label = -1;
    area = harea = carea = perimeter = nholes = ninflections = 0;
    mx = my = 0;
    avg = sdv = Scalar::all(0);
}

// Simple Floodfill (repainting single-color connected component)

template&lt;typename _Tp&gt;
static void
legacyFloodFill_CnIR( Mat&amp; image, Point seed,
               _Tp newVal, ConnectedComp* region, int flags,
               std::vector&lt;FFillSegment&gt;* buffer )
{
    _Tp* img = image.ptr&lt;_Tp&gt;(seed.y);
    Size roi = image.size();
    int i, L, R;
    int area = 0;
    int XMin, XMax, YMin = seed.y, YMax = seed.y;
    int _8_connectivity = (flags &amp; 255) == 8;
    FFillSegment* buffer_end = &amp;buffer-&gt;front() + buffer-&gt;size(), *head = &amp;buffer-&gt;front(), *tail = &amp;buffer-&gt;front();

    L = R = XMin = XMax = seed.x;

    _Tp val0 = img[L];
    img[L] = newVal;

    while( ++R &lt; roi.width &amp;&amp; img[R] == val0 )
        img[R] = newVal;

    while( --L &gt;= 0 &amp;&amp; img[L] == val0 )
        img[L] = newVal;

    XMax = --R;
    XMin = ++L;

    ICV_PUSH( seed.y, L, R, R + 1, R, UP );

    while( head != tail )
    {
        int k, YC, PL, PR, dir;
        ICV_POP( YC, L, R, PL, PR, dir );

        int data[][3] =
        {
            {-dir, L - _8_connectivity, R + _8_connectivity},
            {dir, L - _8_connectivity, PL - 1},
            {dir, PR + 1, R + _8_connectivity}
        };

        if( region )
        {
            area += R - L + 1;

            if( XMax &lt; R ) XMax = R;
            if( XMin &gt; L ) XMin = L;
            if( YMax &lt; YC ) YMax = YC;
            if( YMin &gt; YC ) YMin = YC;
        }

        for( k = 0; k &lt; 3; k++ )
        {
            dir = data[k][0];

            if( (unsigned)(YC + dir) &gt;= (unsigned)roi.height )
                continue;

            img = image.ptr&lt;_Tp&gt;(YC + dir);
            int left = data[k][1];
            int right = data[k][2];

            for( i = left; i &lt;= right; i++ )
            {
                if( (unsigned)i &lt; (unsigned)roi.width &amp;&amp; img[i] == val0 )
                {
                    int j = i;
                    img[i] = newVal;
                    while( --j &gt;= 0 &amp;&amp; img[j] == val0 )
                        img[j] = newVal;

                    while( ++i &lt; roi.width &amp;&amp; img[i] == val0 )
                        img[i] = newVal;

                    ICV_PUSH( YC + dir, j+1, i-1, L, R, -dir );
                }
            }
        }
    }

    if( region )
    {
        region-&gt;pt = seed;
        region-&gt;area = area;
        region-&gt;rect.x = XMin;
        region-&gt;rect.y = YMin;
        region-&gt;rect.width = XMax - XMin + 1;
        region-&gt;rect.height = YMax - YMin + 1;
    }
}

/****************************************************************************************\
*                                   Gradient Floodfill                                   *
\****************************************************************************************/

struct Diff8uC1
{
    Diff8uC1(uchar _lo, uchar _up) : lo(_lo), interval(_lo + _up) {}
    bool operator()(const uchar* a, const uchar* b) const
    { return (unsigned)(a[0] - b[0] + lo) &lt;= interval; }
    unsigned lo, interval;
};

struct Diff8uC3
{
    Diff8uC3(Vec3b _lo, Vec3b _up)
    {
        for( int k = 0; k &lt; 3; k++ )
            lo[k] = _lo[k], interval[k] = _lo[k] + _up[k];
    }
    bool operator()(const Vec3b* a, const Vec3b* b) const
    {
        return (unsigned)(a[0][0] - b[0][0] + lo[0]) &lt;= interval[0] &amp;&amp;
               (unsigned)(a[0][1] - b[0][1] + lo[1]) &lt;= interval[1] &amp;&amp;
               (unsigned)(a[0][2] - b[0][2] + lo[2]) &lt;= interval[2];
    }
    unsigned lo[3], interval[3];
};

template&lt;typename _Tp&gt;
struct DiffC1
{
    DiffC1(_Tp _lo, _Tp _up) : lo(-_lo), up(_up) {}
    bool operator()(const _Tp* a, const _Tp* b) const
    {
        _Tp d = a[0] - b[0];
        return lo &lt;= d &amp;&amp; d &lt;= up;
    }
    _Tp lo, up;
};

template&lt;typename _Tp&gt;
struct DiffC3
{
    DiffC3(_Tp _lo, _Tp _up) : lo(-_lo), up(_up) {}
    bool operator()(const _Tp* a, const _Tp* b) const
    {
        _Tp d = *a - *b;
        return lo[0] &lt;= d[0] &amp;&amp; d[0] &lt;= up[0] &amp;&amp;
               lo[1] &lt;= d[1] &amp;&amp; d[1] &lt;= up[1] &amp;&amp;
               lo[2] &lt;= d[2] &amp;&amp; d[2] &lt;= up[2];
    }
    _Tp lo, up;
};

typedef DiffC1&lt;int&gt; Diff32sC1;
typedef DiffC3&lt;Vec3i&gt; Diff32sC3;
typedef DiffC1&lt;float&gt; Diff32fC1;
typedef DiffC3&lt;Vec3f&gt; Diff32fC3;

template&lt;typename _Tp, typename _MTp, typename _WTp, class Diff&gt;
static void
legacyFloodFillGrad_CnIR( Mat&amp; image, Mat&amp; msk,
                   Point seed, _Tp newVal, _MTp newMaskVal,
                   Diff diff, ConnectedComp* region, int flags,
                   std::vector&lt;FFillSegment&gt;* buffer )
{
    int step = (int)image.step, maskStep = (int)msk.step;
    uchar* pImage = image.ptr();
    _Tp* img = (_Tp*)(pImage + step*seed.y);
    uchar* pMask = msk.ptr() + maskStep + sizeof(_MTp);
    _MTp* mask = (_MTp*)(pMask + maskStep*seed.y);
    int i, L, R;
    int area = 0;
    int XMin, XMax, YMin = seed.y, YMax = seed.y;
    int _8_connectivity = (flags &amp; 255) == 8;
    int fixedRange = flags &amp; FLOODFILL_FIXED_RANGE;
    int fillImage = (flags &amp; FLOODFILL_MASK_ONLY) == 0;
    FFillSegment* buffer_end = &amp;buffer-&gt;front() + buffer-&gt;size(), *head = &amp;buffer-&gt;front(), *tail = &amp;buffer-&gt;front();

    L = R = seed.x;
    if( mask[L] )
        return;

    mask[L] = newMaskVal;
    _Tp val0 = img[L];

    if( fixedRange )
    {
        while( !mask[R + 1] &amp;&amp; diff( img + (R+1), &amp;val0 ))
            mask[++R] = newMaskVal;

        while( !mask[L - 1] &amp;&amp; diff( img + (L-1), &amp;val0 ))
            mask[--L] = newMaskVal;
    }
    else
    {
        while( !mask[R + 1] &amp;&amp; diff( img + (R+1), img + R ))
            mask[++R] = newMaskVal;

        while( !mask[L - 1] &amp;&amp; diff( img + (L-1), img + L ))
            mask[--L] = newMaskVal;
    }

    XMax = R;
    XMin = L;

    ICV_PUSH( seed.y, L, R, R + 1, R, UP );

    while( head != tail )
    {
        int k, YC, PL, PR, dir;
        ICV_POP( YC, L, R, PL, PR, dir );

        int data[][3] =
        {
            {-dir, L - _8_connectivity, R + _8_connectivity},
            {dir, L - _8_connectivity, PL - 1},
            {dir, PR + 1, R + _8_connectivity}
        };

        unsigned length = (unsigned)(R-L);

        if( region )
        {
            area += (int)length + 1;

            if( XMax &lt; R ) XMax = R;
            if( XMin &gt; L ) XMin = L;
            if( YMax &lt; YC ) YMax = YC;
            if( YMin &gt; YC ) YMin = YC;
        }

        for( k = 0; k &lt; 3; k++ )
        {
            dir = data[k][0];
            img = (_Tp*)(pImage + (YC + dir) * step);
            _Tp* img1 = (_Tp*)(pImage + YC * step);
            mask = (_MTp*)(pMask + (YC + dir) * maskStep);
            int left = data[k][1];
            int right = data[k][2];

            if( fixedRange )
                for( i = left; i &lt;= right; i++ )
                {
                    if( !mask[i] &amp;&amp; diff( img + i, &amp;val0 ))
                    {
                        int j = i;
                        mask[i] = newMaskVal;
                        while( !mask[--j] &amp;&amp; diff( img + j, &amp;val0 ))
                            mask[j] = newMaskVal;

                        while( !mask[++i] &amp;&amp; diff( img + i, &amp;val0 ))
                            mask[i] = newMaskVal;

                        ICV_PUSH( YC + dir, j+1, i-1, L, R, -dir );
                    }
                }
            else if( !_8_connectivity )
                for( i = left; i &lt;= right; i++ )
                {
                    if( !mask[i] &amp;&amp; diff( img + i, img1 + i ))
                    {
                        int j = i;
                        mask[i] = newMaskVal;
                        while( !mask[--j] &amp;&amp; diff( img + j, img + (j+1) ))
                            mask[j] = newMaskVal;

                        while( !mask[++i] &amp;&amp;
                              (diff( img + i, img + (i-1) ) ||
                               (diff( img + i, img1 + i) &amp;&amp; i &lt;= R)))
                            mask[i] = newMaskVal;

                        ICV_PUSH( YC + dir, j+1, i-1, L, R, -dir );
                    }
                }
            else
                for( i = left; i &lt;= right; i++ )
                {
                    int idx;
                    _Tp val;

                    if( !mask[i] &amp;&amp;
                       (((val = img[i],
                          (unsigned)(idx = i-L-1) &lt;= length) &amp;&amp;
                         diff( &amp;val, img1 + (i-1))) ||
                        ((unsigned)(++idx) &lt;= length &amp;&amp;
                         diff( &amp;val, img1 + i )) ||
                        ((unsigned)(++idx) &lt;= length &amp;&amp;
                         diff( &amp;val, img1 + (i+1) ))))
                    {
                        int j = i;
                        mask[i] = newMaskVal;
                        while( !mask[--j] &amp;&amp; diff( img + j, img + (j+1) ))
                            mask[j] = newMaskVal;

                        while( !mask[++i] &amp;&amp;
                              ((val = img[i],
                                diff( &amp;val, img + (i-1) )) ||
                               (((unsigned)(idx = i-L-1) &lt;= length &amp;&amp;
                                 diff( &amp;val, img1 + (i-1) ))) ||
                               ((unsigned)(++idx) &lt;= length &amp;&amp;
                                diff( &amp;val, img1 + i )) ||
                               ((unsigned)(++idx) &lt;= length &amp;&amp;
                                diff( &amp;val, img1 + (i+1) ))))
                            mask[i] = newMaskVal;

                        ICV_PUSH( YC + dir, j+1, i-1, L, R, -dir );
                    }
                }
        }

        img = (_Tp*)(pImage + YC * step);
        if( fillImage )
            for( i = L; i &lt;= R; i++ )
                img[i] = newVal;
        /*else if( region )
         for( i = L; i &lt;= R; i++ )
         sum += img[i];*/
    }

    if( region )
    {
        region-&gt;pt = seed;
        region-&gt;label = saturate_cast&lt;int&gt;(newMaskVal);
        region-&gt;area = area;
        region-&gt;rect.x = XMin;
        region-&gt;rect.y = YMin;
        region-&gt;rect.width = XMax - XMin + 1;
        region-&gt;rect.height = YMax - YMin + 1;
    }
}

}

/****************************************************************************************\
*                                    External Functions                                  *
\****************************************************************************************/

using namespace cbi;

int legacyFloodFill( InputOutputArray _image, InputOutputArray _mask,
                  Point seedPoint, Scalar newVal, Rect* rect,
                  Scalar loDiff, Scalar upDiff, int flags )
{
    ConnectedComp comp;
    std::vector&lt;FFillSegment&gt; buffer;

    if( rect )
        *rect = Rect();

    int i, connectivity = flags &amp; 255;
    union {
        uchar b[4];
        int i[4];
        float f[4];
        double _[4];
    } nv_buf;
    nv_buf._[0] = nv_buf._[1] = nv_buf._[2] = nv_buf._[3] = 0;

    struct { Vec3b b; Vec3i i; Vec3f f; } ld_buf, ud_buf;
    Mat img = _image.getMat(), mask;
    if( !_mask.empty() )
        mask = _mask.getMat();
    Size size = img.size();

    int type = img.type();
    int depth = img.depth();
    int cn = img.channels();

    if ( (cn != 1) &amp;&amp; (cn != 3) )
    {
        CV_Error( CV_StsBadArg, "Number of channels in input image must be 1 or 3" );
    }

    if ( (cn != 1) &amp;&amp; (cn != 3) )
    {
        CV_Error( CV_StsBadArg, "Number of channels in input image must be 1 or 3" );
        return 0;
    }

    if( connectivity == 0 )
        connectivity = 4;
    else if( connectivity != 4 &amp;&amp; connectivity != 8 )
        CV_Error( CV_StsBadFlag, "Connectivity must be 4, 0(=4) or 8" );

    bool is_simple = mask.empty() &amp;&amp; (flags &amp; FLOODFILL_MASK_ONLY) == 0;

    for( i = 0; i &lt; cn; i++ )
    {
        if( loDiff[i] &lt; 0 || upDiff[i] &lt; 0 )
            CV_Error( CV_StsBadArg, "lo_diff and up_diff must be non-negative" );
        is_simple = is_simple &amp;&amp; fabs(loDiff[i]) &lt; DBL_EPSILON &amp;&amp; fabs(upDiff[i]) &lt; DBL_EPSILON;
    }

    if( (unsigned)seedPoint.x &gt;= (unsigned)size.width ||
       (unsigned)seedPoint.y &gt;= (unsigned)size.height )
        CV_Error( CV_StsOutOfRange, "Seed point is outside of image" );

    scalarToRawData( newVal, &amp;nv_buf, type, 0);
    size_t buffer_size = MAX( size.width, size.height ) * 2;
    buffer.resize( buffer_size );

    if( is_simple )
    {
        size_t elem_size = img.elemSize();
        const uchar* seed_ptr = img.ptr(seedPoint.y) + elem_size*seedPoint.x;

        size_t k = 0;
        for(; k &lt; elem_size; k++)
            if (seed_ptr[k] != nv_buf.b[k])
                break;

        if( k != elem_size )
        {
            if( type == CV_8UC1 )
                legacyFloodFill_CnIR(img, seedPoint, nv_buf.b[0], &amp;comp, flags, &amp;buffer);
            else if( type == CV_8UC3 )
                legacyFloodFill_CnIR(img, seedPoint, Vec3b(nv_buf.b), &amp;comp, flags, &amp;buffer);
            else if( type == CV_32SC1 )
                legacyFloodFill_CnIR(img, seedPoint, nv_buf.i[0], &amp;comp, flags, &amp;buffer);
            else if( type == CV_32FC1 )
                legacyFloodFill_CnIR(img, seedPoint, nv_buf.f[0], &amp;comp, flags, &amp;buffer);
            else if( type == CV_32SC3 )
                legacyFloodFill_CnIR(img, seedPoint, Vec3i(nv_buf.i), &amp;comp, flags, &amp;buffer);
            else if( type == CV_32FC3 )
                legacyFloodFill_CnIR(img, seedPoint, Vec3f(nv_buf.f), &amp;comp, flags, &amp;buffer);
            else
                CV_Error( CV_StsUnsupportedFormat, "" );
            if( rect )
                *rect = comp.rect;
            return comp.area;
        }
    }

    if( mask.empty() )
    {
        Mat tempMask( size.height + 2, size.width + 2, CV_8UC1 );
        tempMask.setTo(Scalar::all(0));
        mask = tempMask;
    }
    else
    {
        CV_Assert( mask.rows == size.height+2 &amp;&amp; mask.cols == size.width+2 );
        CV_Assert( mask.type() == CV_8U );
    }

    memset( mask.ptr(), 1, mask.cols );
    memset( mask.ptr(mask.rows-1), 1, mask.cols );

    for( i = 1; i &lt;= size.height; i++ )
    {
        mask.at&lt;uchar&gt;(i, 0) = mask.at&lt;uchar&gt;(i, mask.cols-1) = (uchar)1;
    }

    if( depth == CV_8U )
        for( i = 0; i &lt; cn; i++ )
        {
            ld_buf.b[i] = saturate_cast&lt;uchar&gt;(cvFloor(loDiff[i]));
            ud_buf.b[i] = saturate_cast&lt;uchar&gt;(cvFloor(upDiff[i]));
        }
    else if( depth == CV_32S )
        for( i = 0; i &lt; cn; i++ )
        {
            ld_buf.i[i] = cvFloor(loDiff[i]);
            ud_buf.i[i] = cvFloor(upDiff[i]);
        }
    else if( depth == CV_32F )
        for( i = 0; i &lt; cn; i++ )
        {
            ld_buf.f[i] = (float)loDiff[i];
            ud_buf.f[i] = (float)upDiff[i];
        }
    else
        CV_Error( CV_StsUnsupportedFormat, "" );

    uchar newMaskVal = (uchar)((flags &amp; ~0xff) == 0 ? 1 : ((flags &gt;&gt; 8) &amp; 255));

    if( type == CV_8UC1 )
        legacyFloodFillGrad_CnIR&lt;uchar, uchar, int, Diff8uC1&gt;(
                img, mask, seedPoint, nv_buf.b[0], newMaskVal,
                Diff8uC1(ld_buf.b[0], ud_buf.b[0]),
                &amp;comp, flags, &amp;buffer);
    else if( type == CV_8UC3 )
        legacyFloodFillGrad_CnIR&lt;Vec3b, uchar, Vec3i, Diff8uC3&gt;(
                img, mask, seedPoint, Vec3b(nv_buf.b), newMaskVal,
                Diff8uC3(ld_buf.b, ud_buf.b),
                &amp;comp, flags, &amp;buffer);
    else if( type == CV_32SC1 )
        legacyFloodFillGrad_CnIR&lt;int, uchar, int, Diff32sC1&gt;(
                img, mask, seedPoint, nv_buf.i[0], newMaskVal,
                Diff32sC1(ld_buf.i[0], ud_buf.i[0]),
                &amp;comp, flags, &amp;buffer);
    else if( type == CV_32SC3 )
        legacyFloodFillGrad_CnIR&lt;Vec3i, uchar, Vec3i, Diff32sC3&gt;(
                img, mask, seedPoint, Vec3i(nv_buf.i), newMaskVal,
                Diff32sC3(ld_buf.i, ud_buf.i),
                &amp;comp, flags, &amp;buffer);
    else if( type == CV_32FC1 )
        legacyFloodFillGrad_CnIR&lt;float, uchar, float, Diff32fC1&gt;(
                img, mask, seedPoint, nv_buf.f[0], newMaskVal,
                Diff32fC1(ld_buf.f[0], ud_buf.f[0]),
                &amp;comp, flags, &amp;buffer);
    else if( type == CV_32FC3 )
        legacyFloodFillGrad_CnIR&lt;Vec3f, uchar, Vec3f, Diff32fC3&gt;(
                img, mask, seedPoint, Vec3f(nv_buf.f), newMaskVal,
                Diff32fC3(ld_buf.f, ud_buf.f),
                &amp;comp, flags, &amp;buffer);
    else
        CV_Error(CV_StsUnsupportedFormat, "");

    if( rect )
        *rect = comp.rect;
    return comp.area;
}


int legacyFloodFill( InputOutputArray _image, Point seedPoint,
                  Scalar newVal, Rect* rect,
                  Scalar loDiff, Scalar upDiff, int flags )
{
    return legacyFloodFill(_image, Mat(), seedPoint, newVal, rect, loDiff, upDiff, flags);
}
/* End of file. */
		</comment>
		<comment id='3' author='joelteply' date='2015-08-04T04:27:20Z'>
		This work around fixes the issue, but as you can see I am not able to use the flag. For the time being I would recommend people use it. I could create a temporary fix in your code by simply cloning the source image when this flag is applied and then stripping the flag out and proceeding as normal.
cv::floodFill(img, mask, position, color, 0,
cv::Scalar::all(2), cv::Scalar::all(4));
		</comment>
		<comment id='4' author='joelteply' date='2015-08-26T11:02:59Z'>
		Try
cv::FLOODFILL_MASK_ONLY | 4 | 1 &lt;&lt; 8
the default is broken due to a bug introduced in 2.4.4
		</comment>
		<comment id='5' author='joelteply' date='2015-08-27T21:16:35Z'>
		Thanks, worked. Can you just implement that in the floodFill source code or would that introduce other issues?
		</comment>
		<comment id='6' author='joelteply' date='2015-08-28T11:05:11Z'>
		The default case can't occur if cv::FLOODFILL_MASK_ONLY is set:
uchar newMaskVal = (uchar)((flags &amp; ~0xff) == 0 ? 1 : ((flags &gt;&gt; 8) &amp; 255));
cv::FLOODFILL_MASK_ONLY | 4    means that flags has the value 0x00020004
=&gt; (flags &amp; ~0xff) != 0   but  ((flags &gt;&gt; 8) &amp; 255) is equal to 0
i.e. newMaskVal = 0, so the algorithm will try to floodFill black on a black background;
a possible fix would be to use the same expression on both sides:
uchar newMaskVal = (uchar)(((flags &gt;&gt; 8) &amp; 255) == 0 ? 1 : ((flags &gt;&gt; 8) &amp; 255));
		</comment>
		<comment id='7' author='joelteply' date='2015-11-03T12:51:03Z'>
		FLOODFILL_FIXED_RANGE | FLOODFILL_MASK_ONLY |  8 | (255&lt;&lt;8)
		</comment>
		<comment id='8' author='joelteply' date='2015-11-16T20:25:45Z'>
		Hitting the same bug with 4 | cv::FLOODFILL_MASK_ONLY | cv::FLOODFILL_FIXED_RANGE
		</comment>
	</comments>
</bug>