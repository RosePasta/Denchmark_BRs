<bug id='18244' author='rgov' open_date='2020-09-02T03:25:00Z' closed_time='2020-12-11T19:08:04Z'>
	<summary>CMake fails to detect NEON, etc. support on ARM processor</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.4.0
Operating System / Platform =&gt; Ubuntu 18.04 / armv7l
Compiler =&gt; gcc 7.5.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

CMake does not detect that my ARM CPU supports NEON instructions or other features. If I compile the example source code from cmake/checks/cpu_neon.cpp with -mfpu=neon, it builds and runs successfully.
&lt;denchmark-code&gt;-- Performing Test HAVE_CXX_MFPU_VFPV3
-- Performing Test HAVE_CXX_MFPU_VFPV3 - Success
-- Performing Test HAVE_CPU_NEON_SUPPORT (check file: cmake/checks/cpu_neon.cpp)
-- Performing Test HAVE_CPU_NEON_SUPPORT - Failed
-- Performing Test HAVE_CXX_MFPU_NEON (check file: cmake/checks/cpu_neon.cpp)
-- Performing Test HAVE_CXX_MFPU_NEON - Success
-- Performing Test HAVE_CPU_FP16_SUPPORT (check file: cmake/checks/cpu_fp16.cpp)
-- Performing Test HAVE_CPU_FP16_SUPPORT - Failed
-- Performing Test HAVE_CXX_MFPU_NEON_FP16_MFP16_FORMAT_IEEE (check file: cmake/checks/cpu_fp16.cpp)
-- Performing Test HAVE_CXX_MFPU_NEON_FP16_MFP16_FORMAT_IEEE - Success
-- Performing Test HAVE_CPU_BASELINE_FLAGS
-- Performing Test HAVE_CPU_BASELINE_FLAGS - Success

...

--   CPU/HW features:
--     Baseline:
--       requested:                 DETECT
--       disabled:                  VFPV3 NEON
&lt;/denchmark-code&gt;


CMakeCache.txt
CMakeError.log
CMakeOutput.log

&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;cmake .. \
    -DCMAKE_BUILD_TYPE=RelWithDebugInfo \
    -DCMAKE_INSTALL_PREFIX="$(cd root; pwd)" \
    -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules \
    -DBUILD_JAVA=OFF \
    -DBUILD_TESTS=OFF \
    -DBUILD_PERF_TESTS=OFF \
    -DBUILD_opencv_java=OFF \
    -DBUILD_opencv_python2=OFF \
    -DBUILD_opencv_python3=ON \
    -DPYTHON_DEFAULT_EXECUTABLE="$(command -v python3.7)" \
    -DPYTHON3_INCLUDE_DIR="$PYTHON_INCLUDE" \
    -DPYTHON3_LIBRARY="$PYTHON_LIBRARY" \
    -DPYTHON3_EXECUTABLE="$(command -v python3.7)" \
    -DPYTHON3_NUMPY_INCLUDE_DIRS="$NUMPY_INCLUDE" \
    -DPYTHON3_PACKAGES_PATH="$PYTHON_PACKAGES" \
    -DOPENCV_SKIP_PYTHON_LOADER=ON
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Issue submission checklist&lt;/denchmark-h&gt;


 I report the issue, it's not a question


 I checked the problem with documentation, FAQ, open issues,
answers.opencv.org, Stack Overflow, etc and have not found solution


 I updated to latest OpenCV version and the issue is still there


 There is reproducer code and related data files: videos, images, onnx, etc



	</description>
	<comments>
		<comment id='1' author='rgov' date='2020-09-02T03:29:56Z'>
		&lt;denchmark-code&gt;Building CXX object CMakeFiles/cmTC_13884.dir/cpu_neon.cpp.o
/usr/bin/c++    -fPIE   -std=c++11 -o CMakeFiles/cmTC_13884.dir/cpu_neon.cpp.o -c /home/ubuntu/opencv-4.4.0/cmake/checks/cpu_neon.cpp
/home/ubuntu/opencv-4.4.0/cmake/checks/cpu_neon.cpp:24:2: error: #error "NEON is not supported"
&lt;/denchmark-code&gt;

It doesn't pass any argument here to test whether the compiler supports NEON. It needs to pass -mfpu=neon to get __ARM_NEON__ defined.
I am not sure why HAVE_CXX_MFPU_NEON_FP16_MFP16_FORMAT_IEEE succeeded when the others failed.
		</comment>
		<comment id='2' author='rgov' date='2020-09-02T03:47:32Z'>
		There are a number of bugs expressing similar confusion, but it seems to me like a bug in the detection code. The CMake script for detecting optimizations is programmed to know that -mfpu=neon is the option it needs to pass to test it, but it somehow fails to.
I tried passing  as  but this did not change the results of the tests. Then I tried passing  which are the options listed on &lt;denchmark-link:https://cryptopp.com/wiki/Arm_%28Command_Line%29&gt;this page&lt;/denchmark-link&gt;
 for the same CPU, which resulted in
&lt;denchmark-code&gt;--   CPU/HW features:
--     Baseline:                    NEON
--       requested:                 DETECT
--       disabled:                  VFPV3 NEON
&lt;/denchmark-code&gt;

I don't understand how the feature could be enabled and disabled at the same time...
		</comment>
		<comment id='3' author='rgov' date='2020-09-02T05:03:24Z'>
		
how the feature could be enabled and disabled at the same time

Always perform clean CMake run due to CMake cached variables (from clean build directory)
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Please attach:

CMakeVars.txt (grep -E 'HAVE|CPU' CMakeVars.txt)

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

In CMakeCache.txt:
&lt;denchmark-code&gt;//Enable NEON instructions
ENABLE_NEON:BOOL=OFF
&lt;/denchmark-code&gt;

Use --trace-expand to detect where and how it is disabled (you may want to comment ocv_cmake_dump_vars statement in the end of root CMakeLists.txt to avoid 100+Mb dump).
		</comment>
		<comment id='4' author='rgov' date='2020-09-02T14:15:22Z'>
		I took the ENABLE_NEON option to be obsolete:



opencv/cmake/OpenCVCompilerOptimizations.cmake


        Lines 101 to 102
      in
      422f802






 ocv_optimization_process_obsolete_option(ENABLE_VFPV3 VFPV3 OFF) 



 ocv_optimization_process_obsolete_option(ENABLE_NEON NEON OFF) 





If you set it to TRUE, the macro here would print a message not to use it anymore and to use CPU_BASELINE instead. Is that accurate?
&lt;denchmark-link:https://github.com/opencv/opencv/files/5162819/CMakeVars.txt&gt;CMakeVars.txt&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='rgov' date='2020-09-02T19:26:07Z'>
		You should not touch obsolete variables (by definition).
Correct state of these variables is undefined.
		</comment>
		<comment id='6' author='rgov' date='2020-09-02T19:28:55Z'>
		I have not touched them, I've run the cmake command above with a clean environment.
		</comment>
		<comment id='7' author='rgov' date='2020-09-02T19:43:07Z'>
		
CMakeVars.txt
CPU_BASELINE_FINAL=

Finally, nothing is enabled.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;


CMake does not detect that my ARM CPU supports NEON instructions or other features.

Compiler by default doesn't enable NEON.
To perform detection of "my ARM CPU" capabilities compiler should receive -march=native flag.
Try to add -DCPU_BASELINE=NATIVE into CMake options.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;


ENABLE_NEON

Probably these flags are disabled through lines here:



opencv/CMakeLists.txt


        Lines 483 to 486
      in
      7a796b2






 if(NOT IOS AND (NOT ANDROID OR OPENCV_ANDROID_USE_LEGACY_FLAGS))  # Use CPU_BASELINE instead 



 OCV_OPTION(ENABLE_NEON                "Enable NEON instructions"                                 (NEON OR ANDROID_ARM_NEON OR AARCH64) IF (CV_GCC OR CV_CLANG) AND (ARM OR AARCH64 OR IOS) ) 



 OCV_OPTION(ENABLE_VFPV3               "Enable VFPv3-D32 instructions" OFF  IF (CV_GCC OR CV_CLANG) AND (ARM OR AARCH64 OR IOS) ) 



 endif() 





If option above does not help, then turn on these flags through command line.
		</comment>
		<comment id='8' author='rgov' date='2020-09-02T20:57:55Z'>
		Argh, I think I figured it out.



opencv/cmake/OpenCVCompilerOptimizations.cmake


        Lines 100 to 101
      in
      225566d






 ocv_optimization_process_obsolete_option(ENABLE_VFPV3 VFPV3 OFF) 



 ocv_optimization_process_obsolete_option(ENABLE_NEON NEON OFF) 





This is called ocv_optimization_process_obsolete_option which looks like it means that these options are obsolete, right? The function even prints out a warning message not to use this option, and tells you to use CPU_BASELINE instead. UNLESS the last argument to the macro is OFF.
The ocv_optimization_process_obsolete_option macro also adds anything that is not enabled with the obsolete -DENABLE_OPT flag to the CPU_BASELINE_DISABLE list. So even though CMake detects that the system supports NEON, it gets implicitly disabled because we didn't pass -DENABLE_NEON.
It seems like the intention of this code is to enable optimizations the hardware supports automatically, so explicitly passing them should not be necessary. Otherwise, the CPU_BASELINE=DETECT option should be removed, since it doesn't enable anything for you. Or at least have DETECT tell you how to enable optimizations your system supports.
		</comment>
		<comment id='9' author='rgov' date='2020-12-09T02:42:57Z'>
		&lt;denchmark-link:https://github.com/rgov&gt;@rgov&lt;/denchmark-link&gt;
 Please try this patch: &lt;denchmark-link:https://github.com/opencv/opencv/pull/19055&gt;#19055&lt;/denchmark-link&gt;
 (from clean build directory)
		</comment>
	</comments>
</bug>