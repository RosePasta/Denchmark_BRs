<bug id='6610' author='tomoaki0705' open_date='2016-05-31T14:37:21Z' closed_time='2016-06-01T10:34:57Z'>
	<summary>performance test Size_Depth_Channels_split fails on 64bit ARM</summary>
	<description>
&lt;denchmark-h:h3&gt;Please state the information for your system&lt;/denchmark-h&gt;


OpenCV version: 3.1 / master
Host OS: Linux (Ubuntu 16.04 aarch64), both ODROID-C2 and PINE64
Compiler &amp; CMake: GCC 5.3.1 &amp; CMake 3.5.1

&lt;denchmark-h:h3&gt;In which part of the OpenCV library you got the issue?&lt;/denchmark-h&gt;


core (opencv_perf_core)
this fails only in 32F tests (32FC2, 32FC3, 32FC4)

&lt;denchmark-h:h3&gt;Expected behaviour&lt;/denchmark-h&gt;


pass the performance test
Following is a passed result on 32bit ARM

&lt;denchmark-code&gt;ubuntu@tegra-ubuntu:~/opencv/build/bin$ ./opencv_perf_core --gtest_filter=*split*
Time compensation is 0
CTEST_FULL_OUTPUT
OpenCV version: 3.1.0
OpenCV VCS version: 3.1.0
Build type: release
Parallel framework: pthreads
CPU features: neon
OpenCL is disabled
Note: Google Test filter = *split*
[==========] Running 48 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 48 tests from Size_Depth_Channels_split
&lt;snip&gt;
[ RUN      ] Size_Depth_Channels_split.split/6
[ PERFSTAT ]    (samples = 13, mean = 1.42, median = 1.42, stddev = 0.01 (0.6%))
[ VALUE    ]    (640x480, 32FC1, 2)
[       OK ] Size_Depth_Channels_split.split/6 (156 ms)
&lt;snip&gt;
[----------] 48 tests from Size_Depth_Channels_split (11785 ms total)

[----------] Global test environment tear-down
[==========] 48 tests from 1 test case ran. (11785 ms total)
[  PASSED  ] 48 tests.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Actual behaviour&lt;/denchmark-h&gt;


fails
same result on both ODROID-C2 and PINE64

&lt;denchmark-code&gt;odroid@odroid64:~/opencv/build/bin$ ./opencv_perf_core --gtest_filter=*split*
Time compensation is 0
CTEST_FULL_OUTPUT
OpenCV version: 3.1.0
OpenCV VCS version: 3.1.0
Build type: release
Parallel framework: pthreads
CPU features: neon
OpenCL is disabled
Note: Google Test filter = *split*
[==========] Running 48 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 48 tests from Size_Depth_Channels_split
&lt;snip&gt;
[ RUN      ] Size_Depth_Channels_split.split/6
/home/odroid/opencv/modules/ts/src/ts_perf.cpp:359: Failure
The difference between expect_min and actual_min is 3.7252902984619141e-06, which exceeds eps, where
expect_min evaluates to 0.0009918212890625,
actual_min evaluates to 0.00099554657936096191, and
eps evaluates to 9.9999999999999998e-13.
mv[0] has unexpected minimal value

params    = (640x480, 32FC1, 2)
termination reason:  unknown
bytesIn   =          0
bytesOut  =          0
samples   =         10 of 100
outliers  =          0
frequency = 1000000000
min       =    1433839 = 1.43ms
median    =    1452826 = 1.45ms
gmean     =    1453996 = 1.45ms
gstddev   = 0.01152209 = 0.10ms for 97% dispersion interval
mean      =    1454083 = 1.45ms
stddev    =      16763 = 0.02ms
[  FAILED  ] Size_Depth_Channels_split.split/6, where GetParam() = (640x480, 32FC1, 2) (126 ms)
&lt;snip&gt;
[----------] 48 tests from Size_Depth_Channels_split (9082 ms total)

[----------] Global test environment tear-down
[==========] 48 tests from 1 test case ran. (9083 ms total)
[  PASSED  ] 36 tests.
[  FAILED  ] 12 tests, listed below:
[  FAILED  ] Size_Depth_Channels_split.split/6, where GetParam() = (640x480, 32FC1, 2)
[  FAILED  ] Size_Depth_Channels_split.split/7, where GetParam() = (640x480, 32FC1, 3)
[  FAILED  ] Size_Depth_Channels_split.split/8, where GetParam() = (640x480, 32FC1, 4)
[  FAILED  ] Size_Depth_Channels_split.split/18, where GetParam() = (1280x720, 32FC1, 2)
[  FAILED  ] Size_Depth_Channels_split.split/19, where GetParam() = (1280x720, 32FC1, 3)
[  FAILED  ] Size_Depth_Channels_split.split/20, where GetParam() = (1280x720, 32FC1, 4)
[  FAILED  ] Size_Depth_Channels_split.split/30, where GetParam() = (1920x1080, 32FC1, 2)
[  FAILED  ] Size_Depth_Channels_split.split/31, where GetParam() = (1920x1080, 32FC1, 3)
[  FAILED  ] Size_Depth_Channels_split.split/32, where GetParam() = (1920x1080, 32FC1, 4)
[  FAILED  ] Size_Depth_Channels_split.split/42, where GetParam() = (127x61, 32FC1, 2)
[  FAILED  ] Size_Depth_Channels_split.split/43, where GetParam() = (127x61, 32FC1, 3)
[  FAILED  ] Size_Depth_Channels_split.split/44, where GetParam() = (127x61, 32FC1, 4)

12 FAILED TESTS
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Additional description&lt;/denchmark-h&gt;


I traced the cause, and realized the situation is similar what I experienced in #6536
For example, the error value is

expected value is 0.0009918212890625 which is 0x3A820000
actual value is 0.00099554657936096191 which is 0x3A827D00


I dumped the array, and the array does have the value 0x3A827D00

&lt;denchmark-code&gt;ubuntu@pine64:~/opencv/build$ xxd -s 1078 -e -g4 original.bmp | grep -i ' 3a82'
00213336: 4291892d 43611081 3a827d00 42c83f23  -..B..aC.}.:#?.B
&lt;/denchmark-code&gt;


I dumped the same array from windows machine, and realized the array already has different value.

&lt;denchmark-code&gt;ubuntu@pine64:~/opencv/build$ xxd -e -g4 -s1078 win32.bmp | grep -i 3a820000
00213336: 4291892c 43611081 3a820000 42c83f23  ,..B..aC...:#?.B
&lt;/denchmark-code&gt;


Now, since the operation is split no operation is applied against the values
Cause of the cause, comes from modules/core/src/rand.cpp

 arr[i+0] = f[0]*p[i+0][0] + p[i+0][1];
 arr[i+1] = f[1]*p[i+1][0] + p[i+1][1];
 arr[i+2] = f[2]*p[i+2][0] + p[i+2][1];
 arr[i+3] = f[3]*p[i+3][0] + p[i+3][1];

When the multiply of f[0]*p[i+0][0] and (-p[i+0][1]) becomes very similar value, rounding error becomes huge.

&lt;denchmark-h:h3&gt;Question&lt;/denchmark-h&gt;


For the fix in #6536, I loosen the threshold for particular tests, but same approach seems difficult for opencv_perf_core, since there is no 'test_case' variable.
I'd like to ask a help to which way to go

loosen the threshold in perf_split.cpp (probably from 1e-12 to 1e-5, which seems huge to me)
use volatile in rand.cpp to avoid using fmadd
force every platform to use fused multiply and add ( I don't think this choise is possible )



Any suggestion ?
	</description>
	<comments>
		<comment id='1' author='tomoaki0705' date='2016-05-31T15:00:24Z'>
		Assuming the suggestion will be "loosen the threshold", I pushed a fix before discussion
		</comment>
	</comments>
</bug>