<bug id='6979' author='richardroberts' open_date='2016-07-24T21:04:47Z' closed_time='2016-08-18T13:12:38Z'>
	<summary>Incorrect calcOpticalFlowPyrLK result on NEON 64-bit ARM</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.0
Operating System / Platform =&gt; Linux ARM 64-bit
Compiler =&gt; GCC 4.9

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

When CV_NEON is defined and compiling for 64-bit ARM, the eigenvalue calculation in calcOpticalFlowPyrLK is incorrect.  For the provided sample images and code, the "pyramid level 0" eigenvalue is a negative number when compiled with CV_NEON, and a positive number if "#undef CV_NEON" is placed before the code in lkpyramid.cpp.  When compiled and run on an Intel desktop computer, the eigenvalue is also computed as a positive number.
The difference comes down to a difference in the calculated "A" matrix.  When CV_NEON is defined, the "A" matrix calculated is:
2048.822266,  -120.389381
-120.389381,  -1765.508301
but when CV_NEON is not defined, the A matrix is calculated as:
2048.832031,  -120.389458
-120.389458,   2330.505615
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/opencv/opencv/files/380490/lkpyr_neon_bug.zip&gt;lkpyr_neon_bug.zip&lt;/denchmark-link&gt;

Compile and run the attached file.  The images are included in the zip file.  Please add the appropriate includes for the "video" module.  Compile for both 64-bit ARM and for x86 and compare the results.
lkpyramid.cpp, around line 496, adding the following line prints out the A matrix:
fprintf(stderr, "Level=%d\n%f,\t%f\n%f,\t%f\n", level, A11, A12, A12, A22);
	</description>
	<comments>
		<comment id='1' author='richardroberts' date='2016-07-24T21:08:00Z'>
		Just to clarify the impact of this, approximately half of the frames in a long video sequence come up with negative eigenvalues calculated with NEON, which causes the LK pyramidal tracker to incorrectly return failure.
		</comment>
		<comment id='2' author='richardroberts' date='2016-07-31T02:26:26Z'>
		&lt;denchmark-link:https://github.com/richardroberts&gt;@richardroberts&lt;/denchmark-link&gt;

I think calculation is wrong.
Please try the following.
&lt;denchmark-h:h2&gt;lkpyramid.cpp L476-L480&lt;/denchmark-h&gt;

original version:
#if CV_NEON
iA11 += (float)(nA11[0] + nA11[1] + nA11[2] + nA11[3]);
iA12 += (float)(nA12[0] + nA12[1] + nA12[2] + nA12[3]);
iA22 += (float)(nA22[0] + nA22[1] + nA22[2] + nA22[3]);
#endif
modified version:
#if CV_NEON
iA11 += ((float)nA11[0] + nA11[1] + nA11[2] + nA11[3]);
iA12 += ((float)nA12[0] + nA12[1] + nA12[2] + nA12[3]);
iA22 += ((float)nA22[0] + nA22[1] + nA22[2] + nA22[3]);
#endif
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h2&gt;lkpyramid.cpp L674-L678&lt;/denchmark-h&gt;

original version:
#if CV_NEON
ib1 += (float)(nB1[0] + nB1[1] + nB1[2] + nB1[3]);
ib2 += (float)(nB2[0] + nB2[1] + nB2[2] + nB2[3]);
#endif
modified version:
#if CV_NEON
ib1 += ((float)nB1[0] + nB1[1] + nB1[2] + nB1[3]);
ib2 += ((float)nB2[0] + nB2[1] + nB2[2] + nB2[3]);
#endif
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

		</comment>
		<comment id='3' author='richardroberts' date='2016-08-03T21:48:30Z'>
		the values nA** and nB* are all integers, so moving float cast shouldn't affect the results really, assuming the additions are not overflowing. In particular I am looking at the difference between the bottom right element, with NEON: -1765.508301, but without: 2330.505615
		</comment>
		<comment id='4' author='richardroberts' date='2016-08-10T07:16:00Z'>
		&lt;denchmark-link:https://github.com/grundman&gt;@grundman&lt;/denchmark-link&gt;

Example:

nA11[0] = MAX_INT(2147483647)
nA11[1] = 1
nA11[2] = 0
nA11[3] = 0
"(float)(nA11[0] + nA11[1] + nA11[2] + nA11[3])" is "-2147483648.0";
"((float)nA11[0] + (float)nA11[1] + (float)nA11[2] + (float)nA11[3])" is "2147483648.0";

		</comment>
		<comment id='5' author='richardroberts' date='2016-08-10T12:04:28Z'>
		Overflow could be caused by nA11 evaluation inside the NEON part of the code as well. So it could be better to store nAxx as int64 or float.
		</comment>
		<comment id='6' author='richardroberts' date='2016-08-10T17:22:38Z'>
		&lt;denchmark-link:https://github.com/richardroberts&gt;@richardroberts&lt;/denchmark-link&gt;

Could you please check whether PR &lt;denchmark-link:https://github.com/opencv/opencv/pull/7087&gt;#7087&lt;/denchmark-link&gt;
 fix the issue?
		</comment>
		<comment id='7' author='richardroberts' date='2016-08-10T18:19:39Z'>
		Thanks all!  I'll be able to test the fix this week, it's taken some time for me to be able to put time towards this.
		</comment>
		<comment id='8' author='richardroberts' date='2016-08-10T22:46:45Z'>
		I can confirm that the casting fix proposed by K-Shinotsuka fixes the calculation.  However, the patch proposed in PR &lt;denchmark-link:https://github.com/opencv/opencv/pull/7087&gt;#7087&lt;/denchmark-link&gt;
 does not compile and I was not able to fix the compile errors.  They are pasted in that PR.
		</comment>
	</comments>
</bug>