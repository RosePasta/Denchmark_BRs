<bug id='6788' author='ggtoyon' open_date='2016-07-07T21:16:19Z' closed_time='2016-07-14T14:29:18Z'>
	<summary>Some cv::cuda:: functions are not thread-safe</summary>
	<description>
I get the following assertion error when running several cv::cuda:: functions on multiple threads in debug:
&lt;denchmark-code&gt;OpenCV Error: Assertion failed (allocSize == allocations.back()) in `anonymo
us-namespace'::MemoryStack::returnMemory, file C:\ExternalPackages\OpenCV-3.1.0-
t1-VC12-CudaStreamDebug\src\opencv\modules\core\src\cuda_stream.cpp, line 110
&lt;/denchmark-code&gt;

My test jig is shown below:
&lt;denchmark-code&gt;//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
void RunSum()
{
  cv::cuda::GpuMat dIsMaximalMask(cv::Mat::ones(100, 1, CV_32S));

  cv::cuda::sum(dIsMaximalMask);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
void RunSqrSum()
{
  cv::cuda::GpuMat Row1(cv::Mat::ones(1, 100, CV_8U));
  cv::cuda::GpuMat Row2(cv::Mat::ones(1, 100, CV_8U));

  cv::cuda::sqrSum(Row1, Row2);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
void RunMinMax()
{
  double MaxVal;

  cv::cuda::minMax(
    cv::cuda::GpuMat(cv::Mat::ones(100, 1, CV_32S)),
    0,
    &amp;MaxVal);
}

//*****************************************************************************
//*****************************************************************************
int main(int argc, const char** argv)
{
  thread Thread1(RunSqrSum);
  thread Thread2(RunMinMax);

  Thread1.join();
  Thread2.join();

  return 0;
}
&lt;/denchmark-code&gt;

The following functions fail this assertion when run on two or more threads:
&lt;denchmark-code&gt;cv::cuda::minMax
cv::cuda::sqrSum
cv::cuda::sum
&lt;/denchmark-code&gt;

The cv::cuda::Stream documentation notes the following disclaimer:
http://docs.opencv.org/master/d9/df3/classcv_1_1cuda_1_1Stream.html#gsc.tab=0
&lt;denchmark-code&gt;Currently, you may face problems if an operation is enqueued twice with different data. Some functions use the constant GPU memory, and next call may update the memory before the previous one has been finished. But calling different operations asynchronously is safe because each operation has its own constant buffer. Memory copy/upload/download/set operations to the buffers you hold are also safe.
&lt;/denchmark-code&gt;

Does this mean it is safe to call different cv::cuda:: functions that contain cv::cuda::Stream objects asynchronously?  I am seeing that this appears to be untrue.
I rebuilt OpenCV 3.1.0 with cout statements around the assert statement in cuda_stream.cpp in the functions requestMemory and returnMemory (beginning on lines 75 and 93, respectively) to generate the following console output:
&lt;denchmark-code&gt;requestMemory: size: requestMemory: size: 6464

requestMemory: freeMem: 10485760
requestMemory: freeMem: 10485760
requestMemory: allocations.size() before: 0
requestMemory: allocations.size() before: 0
requestMemory: tid: 7436
requestMemory: tid: 5656
requestMemory: allocations.size() after: 1
requestMemory: allocations.size() after: 2
returnMemory: allocSize: 128
returnMemory: allocations.back(): 64
returnMemory: allocSize: 64
returnMemory: tid: 7436
retuOpenCV Error: Assertion failed (allocSize == allocations.back()) in `anonymo
us-namespace'::MemoryStack::returnMemory, file C:\ExternalPackages\OpenCV-3.1.0-
t1-VC12-CudaStreamDebug\src\opencv\modules\core\src\cuda_stream.cpp, line 110
rnMemory: allocations.back(): 64
returnMemory: tid: 5656
returnMemory: allocations.size() before: 2
returnMemory: allocations.size() after: 1
&lt;/denchmark-code&gt;

This output appears to demonstrate that multiple processes are asking for GPU memory at the same time, as shown by multiple requestMemory calls back-to-back and in some cases jumbled together.  Is it unsafe to call certain cv::cuda:: functions on multiple threads?
Note: I am using Windows 7 (also tested on Windows 10) Visual Studio 2013 with VC12 compiler and OpenCV 3.1.0 (also tested on 3.0.0).
Note: cv::cuda::SURF_CUDA, cv::cuda::add and multiple other cv::cuda:: functions do not cause this assertion to fail.
UPDATE:
cv::cuda::HostMem appears to be where the issue occurs.  Instantiation of a cv::cuda::HostMem input is found in all of the functions known to cause this issue:  cv::cuda::absSum, cv::cuda::minMax, cv::cuda::sqrSum, cv::cuda::sum.  When substituting HostMem (CodeBlock 1) with GpuMat (CodeBlock 2), no issue is seen and the assertion is not tripped.
CodeBlock 1
HostMem dst;
dst.createMatHeader().convertTo(cv::Mat(dst.size(), CV_64FC(dst.channels()), val.val), CV_64F);
CodeBlock 2
GpuMat dst;
Mat dstMat;
dst.download(dstMat);
dstMat.convertTo(cv::Mat(dst.size(), CV_64FC(dst.channels()), val.val), CV_64F);
	</description>
	<comments>
		<comment id='1' author='ggtoyon' date='2016-07-08T07:06:54Z'>
		Please use different cv::cuda::Stream objects for different CPU threads.
&lt;denchmark-code&gt;void RunSqrSum()
{
    cv::cuda::GpuMat Row1(cv::Mat::ones(1, 100, CV_8U));
    cv::cuda::GpuMat Row2(cv::Mat::ones(1, 100, CV_8U));

    cv::cuda::Stream stream;

    cv::cuda::HostMem dst;
    cv::cuda::calcSqrSum(Row1, dst, cv::noArray, stream);

    stream.waitForCompletion();

    cv::Scalar val;
    dst.createMatHeader().convertTo(cv::Mat(dst.size(), CV_64FC(dst.channels()), val.val), CV_64F);
}

void RunMinMax()
{
    cv::cuda::Stream stream;

    cv::cuda::HostMem dst;
    cv::cuda::findMinMax(cv::cuda::GpuMat(cv::Mat::ones(100, 1, CV_32S)), dst, cv::noArray(), stream);

    stream.waitForCompletion();

    double vals[2];
    dst.createMatHeader().convertTo(Mat(1, 2, CV_64FC1, &amp;vals[0]), CV_64F);
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='ggtoyon' date='2016-07-14T11:23:57Z'>
		Added a note about this to the documentation : &lt;denchmark-link:https://github.com/opencv/opencv/pull/6903&gt;#6903&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='ggtoyon' date='2016-07-14T14:55:58Z'>
		Thanks for the response. Default stream objects are defined inside of cv::cuda::minMax, sqrSum, and others listed above.  Will these functions be changed in a future release?
		</comment>
		<comment id='4' author='ggtoyon' date='2016-07-15T07:38:19Z'>
		There are alternative functions that accept Stream as parameter : findMinMax, calcSqrSum, etc.
		</comment>
	</comments>
</bug>