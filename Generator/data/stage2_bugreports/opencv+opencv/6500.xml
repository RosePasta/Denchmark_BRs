<bug id='6500' author='tommy87' open_date='2016-05-04T09:16:08Z' closed_time='2016-05-26T14:15:35Z'>
	<summary>‘memcpy’ was not declared in this scope (Ubuntu 16.04)</summary>
	<description>
&lt;denchmark-h:h3&gt;Please state the information for your system&lt;/denchmark-h&gt;


OpenCV version:  3.0/3.1/master
Host OS: Linux (Ubuntu 16.04)
Compiler: GCC 4.7/4.8/4.9/5.0
CUDA 7.5 (from synaptic package manager ("nvidia-cuda-toolkit"))

&lt;denchmark-h:h3&gt;In which part of the OpenCV library you got the issue?&lt;/denchmark-h&gt;


cuda

When trying to compile opencv (ubuntu 16.04) i get the following error:
[  9%] Building NVCC (Device) object modules/core/CMakeFiles/cuda_compile.dir/src/cuda/cuda_compile_generated_gpu_mat.cu.o
/usr/include/string.h: In function ‘void* mempcpy_inline(void, const void, size_t)’:
/usr/include/string.h:652:42: error: ‘memcpy’ was not declared in this scope
return (char *) memcpy (__dest, __src, __n) + __n;
^
CMake Error at cuda_compile_generated_gpu_mat.cu.o.cmake:264 (message):
Error generating file
/home/mag/opencv/build_opencv_master/modules/core/CMakeFiles/cuda_compile.dir/src/cuda/./cuda_compile_generated_gpu_mat.cu.o
The problem is known, but you need to make a workaround to support cuda. Here is a link to the same Proplem in the caffe git, but unfortunetly the solution doesnt work for me:
&lt;denchmark-link:https://github.com/BVLC/caffe/issues/4046&gt;BVLC/caffe#4046&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='tommy87' date='2016-05-04T11:30:24Z'>
		Actually I get this error if I try to build all CUDA architectures. Instead I just change 2 CMAKE variables,  and , to only contain the CUDA compute capability supported by my graphics card, which can be found &lt;denchmark-link:https://developer.nvidia.com/cuda-gpus&gt;here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='tommy87' date='2016-05-04T12:21:49Z'>
		i have tried it on two pc's but it doesnt' work for me
Edit:
i have tried it with a Geforce GTX 980 and a Geforce GTX 780. so generation is kepler (and Maxwell) with architecture 3.0 3.5
if nessesary i can try it on other pc too. But for the next two weeks i can let one pc in this configuration, if you need more testing.
		</comment>
		<comment id='3' author='tommy87' date='2016-05-09T08:28:43Z'>
		One fast workaround is to use as "CUDA_HOST_COMPILER" the "clang-3.5"
		</comment>
		<comment id='4' author='tommy87' date='2016-05-15T13:07:31Z'>
		&lt;denchmark-link:https://github.com/StevenEWright&gt;@StevenEWright&lt;/denchmark-link&gt;
 Hey, can you give an example what exactly you changed in  and  ``-DCUDA_ARCH_PTX=xx`? I am using Nvidia 940M and I can't find in the link you posted how to deduce from the product page what version I should include.
		</comment>
		<comment id='5' author='tommy87' date='2016-05-15T13:35:54Z'>
		&lt;denchmark-link:https://developer.nvidia.com/cuda-gpus&gt;https://developer.nvidia.com/cuda-gpus&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='tommy87' date='2016-05-15T13:36:42Z'>
		The Geforce 940m is 5.0 compatible.
		</comment>
		<comment id='7' author='tommy87' date='2016-05-15T13:51:09Z'>
		&lt;denchmark-link:https://github.com/jamesapollo2016&gt;@jamesapollo2016&lt;/denchmark-link&gt;
 I understand it uses CUDA Compute 5.0, but what what should I insert in  and   ?  The options seem to be 20 21 30 35, not 5.
This is what I get if I set no changes:
&lt;denchmark-code&gt;--   NVIDIA CUDA
--     Use CUFFT:                   YES
--     Use CUBLAS:                  NO
--     USE NVCUVID:                 NO
--     NVIDIA GPU arch:             20 21 30 35
--     NVIDIA PTX archs:            30
--     Use fast math:               NO
&lt;/denchmark-code&gt;

I tried all combinations of
cmake -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules/ -DBUILD_opencv_legacy=OFF -DCUDA_ARCH_BIN=2.0 -DCUDA_ARCH_PTX=2.0 .
Where I changed the two 2.0 variables in the examples to 2.0 2.1 3.0 3.5, and no luck
		</comment>
		<comment id='8' author='tommy87' date='2016-05-15T15:37:47Z'>
		Compiled with 5 just fine for me using cmake-gui. Compiling CUDA for a single version is MUCH FASTER.
		</comment>
		<comment id='9' author='tommy87' date='2016-05-15T15:40:18Z'>
		&lt;denchmark-link:https://github.com/Itseez/opencv/blob/2f4e38c8313ff313de7c41141d56d945d91f47cf/cmake/OpenCVDetectCUDA.cmake&gt;https://github.com/Itseez/opencv/blob/2f4e38c8313ff313de7c41141d56d945d91f47cf/cmake/OpenCVDetectCUDA.cmake&lt;/denchmark-link&gt;

See cmake for details.
		</comment>
		<comment id='10' author='tommy87' date='2016-05-15T16:19:46Z'>
		&lt;denchmark-link:https://github.com/jamesapollo2016&gt;@jamesapollo2016&lt;/denchmark-link&gt;


Thats is a cmake file that detects CUDA. CUDA is indeed detected. That is not the issue.
That cmake file is not self-explanatory. It does not relate to the memcpy error in a way I can understand. The cmake command works, its the make that fails.

		</comment>
		<comment id='11' author='tommy87' date='2016-05-16T09:22:48Z'>
		I tried addin 50. I get the exact memcpy error. It might not even be in
those variables.
On May 15, 2016 20:57, "Philip" &lt;denchmark-link:mailto:notifications@github.com&gt;notifications@github.com&lt;/denchmark-link&gt;
 wrote:
Philip's message seems to be deleted, its available here:
&lt;denchmark-code&gt; @guysoft &lt;https://github.com/guysoft&gt; to your question what exactly you
&gt; have to insert here
&gt;
&gt; -DCUDA_ARCH_PTX=xx
&gt; -DCUDA_ARCH_BIN=xx
&gt;
&gt; you can insert 50 for compute capability 5.0 in both options. The defaults
&gt; 20 21 30 and 35 are for the versions 2.0,2.1,3.0 and 3.5 which are included
&gt; in most the gpus where these lines were added
&gt;
&gt; —
&gt; You are receiving this because you were mentioned.
&gt; Reply to this email directly or view it on GitHub
&gt; &lt;https://github.com/Itseez/opencv/issues/6500#issuecomment-219300448&gt;

&lt;/denchmark-code&gt;

		</comment>
		<comment id='12' author='tommy87' date='2016-05-16T09:32:15Z'>
		since my assumption was wrong after testing this i deleted this again. Since you have to state the version with a dot.
cmake-gui output:
&lt;denchmark-code&gt;Commandline options:
-DCUDA_ARCH_BIN:STRING="5.0" -DCUDA_ARCH_PTX:STRING="5.0" 

Cache file:
CUDA_ARCH_BIN:STRING=5.0
CUDA_ARCH_PTX:STRING=5.0
&lt;/denchmark-code&gt;

so this wouldn't change a thing. Seems to be different issue for you
So did you try already the option "5.0" since this has to be compatible with your 940M?
		</comment>
		<comment id='13' author='tommy87' date='2016-05-16T09:45:30Z'>
		&lt;denchmark-link:https://github.com/Dikay900&gt;@Dikay900&lt;/denchmark-link&gt;
 I did it with the dots. I am using the commandline, this is my command:

		</comment>
		<comment id='14' author='tommy87' date='2016-05-16T09:52:10Z'>
		can you try making a build folder for building the source and then build again using the commandline option my gui is stating? So something like this:
&lt;denchmark-code&gt;mkdir build
cd build
cmake -DBUILD_opencv_legacy=OFF -DCUDA_ARCH_BIN:STRING="5.0" -DCUDA_ARCH_PTX:STRING="5.0" -DWITH_CUDA=ON ..
make
&lt;/denchmark-code&gt;

		</comment>
		<comment id='15' author='tommy87' date='2016-05-16T11:25:34Z'>
		&lt;denchmark-link:https://github.com/Dikay900&gt;@Dikay900&lt;/denchmark-link&gt;
 Does not work, get the same error. I should stress, opencv compiles fine if I do . Its quite likely something to do with the CUDA settings/code.
		</comment>
		<comment id='16' author='tommy87' date='2016-05-16T11:43:52Z'>
		I have tried it also on 3 clean installations with ubuntu 16.04 and the "nvidia-cuda-toolkit" isntalled from synaptic. All failed, are you all sure you have the same system?
&lt;denchmark-link:https://github.com/guysoft&gt;@guysoft&lt;/denchmark-link&gt;

as i write above a workaroud was to compile it with CUDA_HOST_COMPILER=clang-3.5 (you need to install the clang 3.5 first and if i remember right, you need to Disable the tests also)
		</comment>
		<comment id='17' author='tommy87' date='2016-05-16T13:27:18Z'>
		&lt;denchmark-link:https://github.com/tommy87&gt;@tommy87&lt;/denchmark-link&gt;
 It works if you disable the nvidia cuda with . But then you wont have GPU acceleration. Also you must make clean and delete all cache cmake files. After I extracted opencv I create a git repo and add all extracted files to it. That way I can do  and delete all the cmake files, they seem to remember settings otherwise.
The reason I don't want to use clang is because I am using the OpenCV installtion to link against Caffe. Correct me if I am wrong, but using different compiles should result in a linking error.
		</comment>
		<comment id='18' author='tommy87' date='2016-05-17T05:28:03Z'>
		Im Not sure if it leeds to a linking error... I want to used it also with Caffe, but i hadn't the time to test it yet. But maybe i will try this today and than i can tell you if it works or not
		</comment>
		<comment id='19' author='tommy87' date='2016-05-17T11:49:14Z'>
		&lt;denchmark-link:https://github.com/guysoft&gt;@guysoft&lt;/denchmark-link&gt;
  i have tried to compile caffe and i didnt get linking errors
So i have compiled openCV with CUDA and clang 3.5 and the NVIDIA version of caffe 0.15 with the cc compiler. To get the cc compiler running you need to follow this &lt;denchmark-link:https://github.com/BVLC/caffe/issues/4046&gt;BVLC/caffe#4046&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/ALL&gt;@ALL&lt;/denchmark-link&gt;

the solution for caffe is to add "set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_FORCE_INLINES")" to the CMakeList.txt i have tried it with opencv also but i was unable to find the right place to insert this. Maybe someone knows better where the line must be insert (if you tell me, i can try it by myself)
		</comment>
		<comment id='20' author='tommy87' date='2016-05-26T02:32:21Z'>
		Simple replace in opencv/cmake/OpencvDetectCuda.cmake
&lt;denchmark-code&gt;  set(NVCC_FLAGS_EXTRA ${NVCC_FLAGS_EXTRA} -gencode arch=compute_${CMAKE_MATCH_2},code=sm_${CMAKE_MATCH_1})
&lt;/denchmark-code&gt;

to
&lt;denchmark-code&gt;  set(NVCC_FLAGS_EXTRA ${NVCC_FLAGS_EXTRA} -D_FORCE_INLINES -gencode arch=compute_${CMAKE_MATCH_2},code=sm_${CMAKE_MATCH_1})
&lt;/denchmark-code&gt;

it's work for me!
		</comment>
		<comment id='21' author='tommy87' date='2016-05-26T08:52:32Z'>
		&lt;denchmark-link:https://github.com/chapaev28&gt;@chapaev28&lt;/denchmark-link&gt;
 's solution works. Added a pull request.
		</comment>
		<comment id='22' author='tommy87' date='2016-05-26T09:13:26Z'>
		👍
		</comment>
		<comment id='23' author='tommy87' date='2016-06-03T12:10:24Z'>
		Similar answer here &lt;denchmark-link:https://github.com/BVLC/caffe/wiki/Ubuntu-16.04-or-15.10-Installation-Guide&gt;https://github.com/BVLC/caffe/wiki/Ubuntu-16.04-or-15.10-Installation-Guide&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>