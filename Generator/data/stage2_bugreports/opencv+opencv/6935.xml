<bug id='6935' author='catree' open_date='2016-07-17T21:34:23Z' closed_time='2016-07-18T08:39:00Z'>
	<summary>Code error in NAryMatIterator code sample in the documentation.</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.1
Operating System / Platform =&gt; Any
Compiler =&gt; Any

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

The NAryMatIterator code sample in the documentation compiles with errors (two variables  has the same name, bad arguments, ...), similar to this &lt;denchmark-link:http://code.opencv.org/issues/3787&gt;issue&lt;/denchmark-link&gt;
.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Compile the following code present in the &lt;denchmark-link:http://docs.opencv.org/3.1.0/d5/dd2/classcv_1_1NAryMatIterator.html&gt;documentation&lt;/denchmark-link&gt;
:
&lt;denchmark-code&gt;void computeNormalizedColorHist(const Mat&amp; image, Mat&amp; hist, int N, double minProb)
{
    const int histSize[] = {N, N, N};
    // make sure that the histogram has a proper size and type
    hist.create(3, histSize, CV_32F);
    // and clear it
    hist = Scalar(0);
    // the loop below assumes that the image
    // is a 8-bit 3-channel. check it.
    CV_Assert(image.type() == CV_8UC3);
    MatConstIterator_&lt;Vec3b&gt; it = image.begin&lt;Vec3b&gt;(),
                             it_end = image.end&lt;Vec3b&gt;();
    for( ; it != it_end; ++it )
    {
        const Vec3b&amp; pix = *it;
        hist.at&lt;float&gt;(pix[0]*N/256, pix[1]*N/256, pix[2]*N/256) += 1.f;
    }
    minProb *= image.rows*image.cols;
    Mat plane;
    NAryMatIterator it(&amp;hist, &amp;plane, 1);
    double s = 0;
    // iterate through the matrix. on each iteration
    // it.planes[*] (of type Mat) will be set to the current plane.
    for(int p = 0; p &lt; it.nplanes; p++, ++it)
    {
        threshold(it.planes[0], it.planes[0], minProb, 0, THRESH_TOZERO);
        s += sum(it.planes[0])[0];
    }
    s = 1./s;
    it = NAryMatIterator(&amp;hist, &amp;plane, 1);
    for(int p = 0; p &lt; it.nplanes; p++, ++it)
        it.planes[0] *= s;
}
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='catree' date='2016-07-18T08:28:37Z'>
		&lt;denchmark-link:https://github.com/mshabunin&gt;@mshabunin&lt;/denchmark-link&gt;
, do we have a lot of code examples in .hpp files? I think it's better to extract all code examples into .cpp files and use  doxygen command. And all .cpp files will be compiled as static library to check that documentation snippets are compilable.
CC &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/vpisarev&gt;@vpisarev&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/apavlenko&gt;@apavlenko&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='catree' date='2016-07-18T09:07:55Z'>
		&lt;denchmark-link:https://github.com/ilya-lavrenov&gt;@ilya-lavrenov&lt;/denchmark-link&gt;
 , yes I agree. But I'd prefer to make executables in  folder. I've created new issue to track this: &lt;denchmark-link:https://github.com/opencv/opencv/issues/6938&gt;#6938&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>