<bug id='14955' author='arnaudbrejeon' open_date='2019-07-01T18:40:02Z' closed_time='2019-07-02T23:01:36Z'>
	<summary>ConnectedComponents crash with Parallel Grana algorithm</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.1.0
Operating System / Platform =&gt; Android
Compiler =&gt; GCC

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

ConnectedComponents will systematically crash due to memory problem (invalid address or address of corrupt block 0xb93180f8 passed to dlfree) when running parallel Grana algorithm on some image sizes on Android. I could reproduce with the following code:
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

auto darkMask = cv::Mat();
darkMask.create(31, 87, CV_8U);
darkMask = 0;

auto labels = cv::Mat();
auto stats = cv::Mat();
auto centroids = cv::Mat();

const auto nbComponents = cv::connectedComponentsWithStats(darkMask, labels, stats, centroids, 8, CV_32S, cv::CCL_GRANA);
I narrowed down to the following code connectedcomponents.cpp line 2563:
for (int i = 0; i &lt; h; i = chunksSizeAndLabels[i]){
    flattenL(P, LabelT((i + 1) / 2) * LabelT((w + 1) / 2) + 1, chunksSizeAndLabels[i + 1], nLabels);
}
Variable i ends up with value h-1, whereas the code accesses chunksSizeAndLabels[i + 1] and chunksSizeAndLabels allocated size is h elements. We access out of bounds element chunksSizeAndLabels[h].
I'm not sure how to fix the code properly.
	</description>
	<comments>
		<comment id='1' author='arnaudbrejeon' date='2019-07-01T21:34:15Z'>
		I think I now have a better understanding of the code. I think chunksSizeAndLabels allocation is not correct. It should never be odd because it stores 2 values (row and #labels) per row.
		</comment>
	</comments>
</bug>