<bug id='6532' author='paroj' open_date='2016-05-11T15:34:08Z' closed_time='2016-07-14T12:24:28Z'>
	<summary>cuda::SparsePyrLKOpticalFlow returns different flow error compared to CPU implementation</summary>
	<description>
the factor of 32 is missing - but it might be as well be related to the fixed point computation
cuda::SparseOpticalFlow
            int errval = 0;

            for (int i = 0; i &lt; c_winSize_y; ++i)
            {
                for (int j = 0; j &lt; c_winSize_x; ++j)
                {
                    int I = I_patch[(threadIdx.y + i) * patchWidth + threadIdx.x + j];
                    int J = tex2D(tex_Jf, nextPt.x - c_halfWin_x + j + 0.5f, nextPt.y - c_halfWin_y + i + 0.5f);

                    errval += ::abs(J - I);
                }
            }

            err(y, x) = static_cast&lt;float&gt;(errval) / (c_winSize_x * c_winSize_y);
resulting in a mean flow error of 0.053374
calcOpticalFlowPyrLK
            float errval = 0.f;

            for( y = 0; y &lt; winSize.height; y++ )
            {
                const uchar* Jptr = J.ptr() + (y + inextPoint.y)*stepJ + inextPoint.x*cn;
                const deriv_type* Iptr = IWinBuf.ptr&lt;deriv_type&gt;(y);

                for( x = 0; x &lt; winSize.width*cn; x++ )
                {
                    int diff = CV_DESCALE(Jptr[x]*iw00 + Jptr[x+cn]*iw01 +
                                          Jptr[x+stepJ]*iw10 + Jptr[x+stepJ+cn]*iw11,
                                          W_BITS1-5) - Iptr[x];
                    errval += std::abs((float)diff);
                }
            }
            err[ptidx] = errval * 1.f/(32*winSize.width*cn*winSize.height);
resulting in a mean flow error of 28.514989
	</description>
	<comments>
		<comment id='1' author='paroj' date='2016-07-04T14:39:22Z'>
		The difference between the errors given by cuda and cpu implementation depends on specializations used in cuda. Namely the specializations of sparse_caller .
For some matrix type/channel combinations that could be fixed relatively easy. All specializations using the function sparseKernel_ however produce an error which is smaller by 25% . Only the combination unsigned 16bit 4-channel image still gives an unusable error.
		</comment>
	</comments>
</bug>