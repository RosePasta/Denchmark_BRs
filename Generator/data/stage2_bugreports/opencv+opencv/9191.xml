<bug id='9191' author='rayryeng' open_date='2017-07-19T17:25:58Z' closed_time='2018-12-18T02:36:08Z'>
	<summary>Providing the GC_EVAL flag to cv::grabcut and providing already trained models always performs GMM learning</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.2.0.dev
Operating System / Platform =&gt; Ubuntu 16.04
Compiler =&gt; g++6

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

This issue originates from this StackOverflow question: &lt;denchmark-link:https://stackoverflow.com/questions/45195532/reusing-models-from-grabcut-in-opencv&gt;Reusing models from grabcut in OpenCV&lt;/denchmark-link&gt;

The issue that the original question poser (OP) asked was to be able to reuse the trained GMM models after performing an initial segmentation with cv::grabcut.  The OP is currently using the Python wrappers.  The OP noticed that the input foreground and background GMM models are supposed to be initialized to zero arrays and are updated once the segmentation is complete.  The OP would like to reuse these foreground and background GMM models so that they do not need to be learned again and the segmentation can be performed without the GMM learning.
The OP has tried to use the GC_EVAL flag without success as the model gets cleared upon invocation of the cv2.grabcut function, which is a wrapper for cv::grabcut.
We investigated the source: &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/imgproc/src/grabcut.cpp#L574&gt;https://github.com/opencv/opencv/blob/master/modules/imgproc/src/grabcut.cpp#L574&lt;/denchmark-link&gt;
 and noticed that the GMM learning is still performed regardless of what flag is provided.  If  is provided, there should not be any GMM learning involved and the models should be used as is.  Additionally, if a pre-trained model is provided, there shouldn't be a requirement to specify a  or mask to denote what the foreground model is as the models are already provided into the function.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

This is the source using Python from the StackOverflow post.  This is a slight modification to the source code seen in the tutorial, but using pre-trained models: &lt;denchmark-link:http://docs.opencv.org/3.2.0/d8/d83/tutorial_py_grabcut.html&gt;http://docs.opencv.org/3.2.0/d8/d83/tutorial_py_grabcut.html&lt;/denchmark-link&gt;
.  I have not made a pull request as I am unsure as to whether the  issue with  is the only thing that needs fixing.  Otherwise, one can simply append a simple  statement checking for  prior to calling .  Someone on StackOverflow experienced this issue in the past however, and this is what they eventually did as well: &lt;denchmark-link:https://stackoverflow.com/questions/23806064/opencv-grabcut-with-custom-foreground-background-models&gt;OpenCV - GrabCut with custom foreground/background models
&lt;/denchmark-link&gt;

from matplotlib import pyplot as plt
import numpy as np
import cv2

img = cv2.imread('usimg1.jpg')
mask = np.zeros(img.shape[:2], np.uint8)
bgdModel = np.load('bgdmodel.npy')
fgdModel = np.load('fgdmodel.npy')

cv2.grabCut(img, mask, None, bgdModel, fgdModel, 5, cv2.GC_EVAL)

mask = np.where((mask==2) | (mask==0), 0, 1).astype('uint8') 
img = img * mask[:, :, np.newaxis]

plt.imshow(img)
plt.show()
	</description>
	<comments>
	</comments>
</bug>