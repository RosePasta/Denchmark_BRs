<bug id='8400' author='avartenkov' open_date='2017-03-16T15:26:42Z' closed_time='2017-03-21T12:01:26Z'>
	<summary>Wrong borders for warping with channels &amp;gt; 4 and BORDER_CONSTANT</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.2
Operating System / Platform =&gt; ubuntu 14.04
Compiler =&gt; GCC 4.8.2

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

When using warpPerspective with images with more than 4 channels, using BORDER_CONSTANT and one of the interpolation methods INTER_NEAREST, INTER_CUBIC or INTER_LANCZOS4, the borders are wrong.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Call the following function using BORDER_CONSTANT and one of the interpolation methods above, pass at least one grayscale image and a nonunit transform:
void test(const std::vector&lt;cv::Mat&gt; &amp;src_images, const cv::Matx33d &amp;transform,
          cv::Size img_size, int num_channels = 100, int interpolation = cv::INTER_NEAREST, 
          int border = cv::BORDER_CONSTANT, const cv::Scalar &amp;value = cv::Scalar(255, 170, 85, 0))
{
    std::vector&lt;cv::Mat&gt; channels(num_channels), channels_true(num_channels);

    for (int i = 0; i &lt; num_channels; ++i) {
        int num = std::rand() % src_images.size();
        channels[i] = src_images[num].clone();
        channels_true[i] = channels[i].clone();
    }
    cv::Mat multichannel;
    cv::merge(channels, multichannel);

    for (size_t i = 0; i &lt; channels_true.size(); ++i) {
        cv::Scalar val = value[i % 4];
        auto ch = channels_true[i];
        cv::warpPerspective(ch, ch, transform, img_size, interpolation, border,
                            val);
    }
    cv::warpPerspective(multichannel, multichannel, transform,
                    img_size, interpolation, border, value);
    cv::split(multichannel, channels);
    for (size_t i = 0; i &lt; channels.size(); ++i) {
        double s = cv::sum(channels[i] != channels_true[i])[0];
        if (s &gt; 0.0) {
            cv::imshow("Error", channels[i]);
            cv::imshow("Should be", channels_true[i]);
            cv::waitKey(0);
        }
    }
}
	</description>
	<comments>
	</comments>
</bug>