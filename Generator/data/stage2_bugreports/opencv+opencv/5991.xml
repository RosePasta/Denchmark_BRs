<bug id='5991' author='amroamroamro' open_date='2016-01-19T14:41:55Z' closed_time='2016-02-04T09:54:35Z'>
	<summary>[CORE] cv::Mat::convertTo issue with ND-arrays</summary>
	<description>
When using Mat::convertTo inplace with an ND-array (dims&gt;2), I get an access violation exception. On the other hand, the same thing using a 2D-array works just fine.
Here is a minimal example tested in OpenCV 3.1.0 to reproduce the problem; first we use a 2D-array (which works), next we use an ND-array (which crashes!):
#include "opencv2/core.hpp"
#include &lt;iostream&gt;
using namespace std;
using namespace cv;

int main()
{
    double data[] = {1,2,3,4,5,6,7,8,9,10,11,12};
    cout &lt;&lt; "data = 0x" &lt;&lt; reinterpret_cast&lt;void*&gt;(data) &lt;&lt; endl;

    // 2D
    int sizes1[] = {2,6};
    Mat mat1(2, sizes1, CV_64FC1, data);
    cout &lt;&lt; "mat1.data = 0x" &lt;&lt; reinterpret_cast&lt;void*&gt;(mat1.data) &lt;&lt; endl;
    mat1.convertTo(mat1, CV_32F);  // &lt;== works
    cout &lt;&lt; "mat1.data = 0x" &lt;&lt; reinterpret_cast&lt;void*&gt;(mat1.data) &lt;&lt; endl;

    // ND
    int sizes2[] = {2,3,2};
    Mat mat2(3, sizes2, CV_64FC1, data);
    cout &lt;&lt; "mat2.data = 0x" &lt;&lt; reinterpret_cast&lt;void*&gt;(mat2.data) &lt;&lt; endl;
    mat2.convertTo(mat2, CV_32F);  // &lt;== crashes!
    cout &lt;&lt; "mat2.data = 0x" &lt;&lt; reinterpret_cast&lt;void*&gt;(mat2.data) &lt;&lt; endl;

    return 0;
}
Obviously if we use a separate output matrix, the function works fine in both 2D and ND cases:
Mat mat3;
mat2.convertTo(mat3, CV_32F);  // &lt;== works
cout &lt;&lt; "mat3.data = 0x" &lt;&lt; reinterpret_cast&lt;void*&gt;(mat3.data) &lt;&lt; endl;
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

In an attempt to figure out the problem, I attached a debugger and followed the execution path:
&lt;denchmark-code&gt;Mat::convertTo &gt; _OutputArray::create &gt; Mat::create
&lt;/denchmark-code&gt;

and this is where the problem occurs. The function calls Mat::release which ends up zeroing the _sizes array {0,0,0} which is subsequently passed to setSize function to fill the header with the correct sizes/steps...
Having zero size, the array doesnt get an allocator in the next part of the code, and the data pointer stays NULL which eventually triggers the access violation from the double-&gt;float conversion routine trying to dereference a null pointer.
Inside the debugger, If I manually overwrite  right after &lt;denchmark-link:https://github.com/Itseez/opencv/blob/3.1.0/modules/core/src/matrix.cpp#L400-404&gt;release()&lt;/denchmark-link&gt;
 is called with the original  sizes, the rest of the code runs fine!
	</description>
	<comments>
	</comments>
</bug>