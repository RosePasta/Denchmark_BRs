<bug id='5934' author='virtuald' open_date='2016-01-08T02:39:49Z' closed_time='2016-11-27T18:02:04Z'>
	<summary>Failure linking to libbz2 when x86 and x64 libraries are present</summary>
	<description>
On Fedora 22, I have x86 and x64 libraries installed for libbz2.so (I think because of wine). OpenCV finds the wrong library and the compile fails because it tries to link against /lib/libbz2.so instead of /lib64/
I suspect the problem is at &lt;denchmark-link:https://github.com/Itseez/opencv/blob/master/cmake/OpenCVFindLibsVideo.cmake#L230&gt;https://github.com/Itseez/opencv/blob/master/cmake/OpenCVFindLibsVideo.cmake#L230&lt;/denchmark-link&gt;
, as it specifies to search for the file at /lib. I changed the value to /lib64 and the compile worked fine.
	</description>
	<comments>
		<comment id='1' author='virtuald' date='2016-01-08T07:37:26Z'>
		Do you have any ideas why the line above with standard way of library search doesn't work?
&lt;denchmark-code&gt;FIND_LIBRARY(BZIP2_LIBRARIES NAMES bz2 bzip2)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='virtuald' date='2016-01-08T07:43:22Z'>
		I'm not very familiar with cmake, so hard to say... but perhaps this is helpful?
&lt;denchmark-code&gt;$ ls -l /lib*
lrwxrwxrwx. 1 root root 7 Aug 16  2014 /lib -&gt; usr/lib
lrwxrwxrwx. 1 root root 9 Aug 16  2014 /lib64 -&gt; usr/lib64

$ ls /lib/*bz2*
/lib/libbz2.so.1  /lib/libbz2.so.1.0.6

$ ls /lib/*bzip2*
ls: cannot access /lib/*bzip2*: No such file or directory

$ ls /lib64/*bzip2*
ls: cannot access /lib64/*bzip2*: No such file or directory

$ ls /lib64/*bz2*
/lib64/libbz2.so  /lib64/libbz2.so.1  /lib64/libbz2.so.1.0.6

$ rpm -qa | grep bzip
mingw32-bzip2-1.0.6-5.fc21.noarch
libzip-0.11.2-5.fc22.x86_64
bzip2-1.0.6-14.fc22.x86_64
bzip2-libs-1.0.6-14.fc22.i686
bzip2-devel-1.0.6-14.fc22.x86_64
bzip2-libs-1.0.6-14.fc22.x86_64
mingw64-bzip2-1.0.6-5.fc21.noarch
bzip2-debuginfo-1.0.6-14.fc22.x86_64

&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='virtuald' date='2016-01-08T08:07:24Z'>
		On my fedora specified command works fine:
&lt;denchmark-code&gt;$ rpm -qa | grep bzip2
bzip2-1.0.6-19.fc23.x86_64
bzip2-libs-1.0.6-19.fc23.x86_64
bzip2-libs-1.0.6-19.fc23.i686
&lt;/denchmark-code&gt;

Do you build from clean build directory? (CMake cache some search results, and if you install packages after the first CMake run in the build dir, then cached results may be wrong)
BTW, current bzip2 library integration is a legacy dirty hack and doesn't follow best practices of CMake configuration. It should be changed.
		</comment>
		<comment id='4' author='virtuald' date='2016-01-08T16:58:43Z'>
		It was a brand new build directory.
Is there an option I can give to cmake to tell it to output debug information that might shed light on why it's missing the file?
		</comment>
		<comment id='5' author='virtuald' date='2016-01-08T21:26:00Z'>
		There are "--debug-output" and "--trace" CMake options. But I'm not sure that they will show a reason of  the problem
		</comment>
		<comment id='6' author='virtuald' date='2016-02-11T07:08:10Z'>
		I can confirm this problem.
I found Fedora 23 system where I can catch this issue.
&lt;denchmark-code&gt;$ ls /lib64/*bz2*
/lib64/libbz2.so.1  /lib64/libbz2.so.1.0.6
&lt;/denchmark-code&gt;

There is no "libbz.so" file, only instances with "soversion" is here, which causes CMake find_library() to fail.
		</comment>
		<comment id='7' author='virtuald' date='2016-02-11T10:00:07Z'>
		&lt;denchmark-link:https://github.com/virtuald&gt;@virtuald&lt;/denchmark-link&gt;
 Could you take a look on &lt;denchmark-link:https://github.com/opencv/opencv/pull/6100&gt;#6100&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='8' author='virtuald' date='2016-02-12T16:59:04Z'>
		I'll look at this during the weekend, thanks!
		</comment>
		<comment id='9' author='virtuald' date='2016-10-21T11:55:58Z'>
		The very similar issue arises again, but this time when "cmake -D WITH_TBB=ON .." is specified:
&lt;denchmark-code&gt;link library [libbz2.so] in /usr/lib64 may be hidden by files in:
  /usr/include/../lib
&lt;/denchmark-code&gt;

It is not bzip2 related so, but it is in cmake/OpenCVDetectTBB.cmake:
&lt;denchmark-code&gt;if(UNIX)
  set(TBB_LIB_DIR "${TBB_INCLUDE_DIRS}/../lib" CACHE PATH "Full path of TBB library directory")
  link_directories("${TBB_LIB_DIR}")
endif()
&lt;/denchmark-code&gt;

For example on CentOS 6.x x86_64 tbb libs (and others 64-bits libs of course) are in /usr/lib64:
&lt;denchmark-code&gt;$ ls -l /usr/lib64/libtbb*
lrwxrwxrwx 1 root root     17 Oct 21 09:58 /usr/lib64/libtbbmalloc.so -&gt; libtbbmalloc.so.2
-rwxr-xr-x 1 root root  37712 Feb 21  2013 /usr/lib64/libtbbmalloc.so.2
lrwxrwxrwx 1 root root     11 Oct 21 09:58 /usr/lib64/libtbb.so -&gt; libtbb.so.2
-rwxr-xr-x 1 root root 143480 Feb 21  2013 `/usr/lib64/libtbb.so.2
&lt;/denchmark-code&gt;

So there should be difference in detecting tbb when building from sources and with system libraries taking in account 32/64-bits arch.
		</comment>
		<comment id='10' author='virtuald' date='2016-11-27T18:02:04Z'>
		
It is not bzip2 related

Also it is not related to ffmpeg from where original problem raises.
Please open a new issue about problem in "TBB" detection
		</comment>
	</comments>
</bug>