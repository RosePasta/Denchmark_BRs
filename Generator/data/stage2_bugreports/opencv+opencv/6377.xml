<bug id='6377' author='LaurentBerger' open_date='2016-04-09T14:40:41Z' closed_time='2016-12-22T12:36:56Z'>
	<summary>Opencl linearpolar and lopolar</summary>
	<description>

OpenCV version: 3.1
Host OS: Windows 10 VS 2013

Method logPolar and linearPolar using opencl
When opencl is activated first and desactivated this program give a wrong result :
&lt;denchmark-code&gt;#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/core/ocl.hpp"
#include &lt;iostream&gt;

using namespace cv;
using namespace std;

int main(int argc, char* argv[])
{
cv::ocl::setUseOpenCL(true);    
UMat u1,u2;
    imread("f:/lib/opencv/samples/data/lena.jpg", CV_LOAD_IMAGE_GRAYSCALE).copyTo(u1);
    imread("f:/lib/opencv/samples/data/chicky_512.png", CV_LOAD_IMAGE_GRAYSCALE).copyTo(u2);

    linearPolar(u1, u2, Point(u1.cols / 2, u1.rows / 2), 61,  CV_INTER_LINEAR);
    imwrite("u2FirstTrytrueAndFalse.png",u2);
    imshow("u2b((ocl=false))",u2);

cv::ocl::setUseOpenCL(false);    
    linearPolar(u1, u2, Point(u1.cols / 2, u1.rows / 2), 25,  CV_INTER_LINEAR);
    imwrite("u2SecondTrytrueAndFalse.png",u2);
    imshow("u2(ocl=true)",u2);

    imshow("src",u1);

    waitKey();
    return 0;
}
&lt;/denchmark-code&gt;

same program with opencl false at begining and true after give a good result
&lt;denchmark-code&gt;int main(int argc, char* argv[])
{
cv::ocl::setUseOpenCL(false);    
UMat u1,u2;
    imread("f:/lib/opencv/samples/data/lena.jpg", CV_LOAD_IMAGE_GRAYSCALE).copyTo(u1);
    imread("f:/lib/opencv/samples/data/chicky_512.png", CV_LOAD_IMAGE_GRAYSCALE).copyTo(u2);

    linearPolar(u1, u2, Point(u1.cols / 2, u1.rows / 2), 61,  CV_INTER_LINEAR);
    imwrite("u2FirstTryFalseAndTrue.png",u2);
    imshow("u2b((ocl=false))",u2);

cv::ocl::setUseOpenCL(true);    
    linearPolar(u1, u2, Point(u1.cols / 2, u1.rows / 2), 25,  CV_INTER_LINEAR);
    imwrite("u2SecondTryFalseAndTrue.png",u2);
    imshow("u2(ocl=true)",u2);

    imshow("src",u1);

    waitKey();
    return 0;
}
&lt;/denchmark-code&gt;

I don't understand
	</description>
	<comments>
		<comment id='1' author='LaurentBerger' date='2016-04-09T15:20:02Z'>
		Could you attach results to issue? (use imwrite into .png files)
Are all OpenCV tests pass (OCL_*)?
		</comment>
		<comment id='2' author='LaurentBerger' date='2016-04-09T18:08:42Z'>
		For first program :
First called
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/3591626/14405403/cec454c6-fe8e-11e5-8ee5-e3874dcef2f3.png&gt;&lt;/denchmark-link&gt;

Second called
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/3591626/14405405/cec9e7ce-fe8e-11e5-81c3-26d2edd62d0f.png&gt;&lt;/denchmark-link&gt;

and second program
First called
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/3591626/14405404/cec6fe24-fe8e-11e5-9d08-48a98e039d66.png&gt;&lt;/denchmark-link&gt;

second called
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/3591626/14405406/cece1740-fe8e-11e5-8b93-5cf32f92bb8d.png&gt;&lt;/denchmark-link&gt;

opencv  test :
&lt;denchmark-link:https://github.com/Itseez/opencv/files/211404/opencv_perf_imgprocd.zip&gt;opencv_perf_imgprocd.zip&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='LaurentBerger' date='2016-04-09T18:49:09Z'>
		&lt;denchmark-code&gt;    linearPolar(u1, u2, Point(u1.cols / 2, u1.rows / 2), 61,  CV_INTER_LINEAR);
    linearPolar(u1, u2, Point(u1.cols / 2, u1.rows / 2), 25,  CV_INTER_LINEAR);
&lt;/denchmark-code&gt;

the parameters is different 61-25
		</comment>
		<comment id='4' author='LaurentBerger' date='2016-04-09T18:52:45Z'>
		Yes there is no problem with these parameters it's only to check called linearpolar give differents results with or without opencl
		</comment>
		<comment id='5' author='LaurentBerger' date='2016-04-14T03:58:50Z'>
		linearPolar internally calls
&lt;denchmark-code&gt;void cvLinearPolar( const CvArr* srcarr, CvArr* dstarr, 
CvPoint2D32f center, double maxRadius, int flags )
&lt;/denchmark-code&gt;

which use a legacy class CvMat.
It looks like there are something wrong in the conversion path UMat&lt;-&gt;Mat&lt;-&gt;CvMat. The function works if cvLinearPolar is rewritten with Mat.
Another thing need to be pointed out is that, there is no OpenCL code in cvLinearPolar except the last line,
cvRemap( src, dst, mapx, mapy, flags, cvScalarAll(0) );
which has a OpenCL branch.
However, even that OpenCL branch in cvRemap is not triggered, because cvLinearPolar pass CvMat to it.
I'm going to rewrite cvLinearPolar/LogPolar with a Mat and a UMat version. The UMat version is to advantage of the OpenCL routine in cv::remap.
		</comment>
		<comment id='6' author='LaurentBerger' date='2016-04-14T09:01:24Z'>
		It turns out that even if the type is change to UMat, the OpenCL branch in remap cannot be triggered.
Because  ocl_remap require mapx &amp; mapy to be CV_16SC1, in the code snippet below
&lt;denchmark-code&gt; if (borderType == BORDER_TRANSPARENT || !(interpolation == INTER_LINEAR || interpolation == INTER_NEAREST)
            || _map1.type() == CV_16SC1 || _map2.type() == CV_16SC1)
        return false;

&lt;/denchmark-code&gt;

but cvLinearPolar/cvLogPolar create them as CV_32F
		</comment>
		<comment id='7' author='LaurentBerger' date='2016-04-14T12:09:09Z'>
		I investigated a problem. Problem code is here:
&lt;denchmark-code&gt;CvMat c_dst = _dst.getMat();
&lt;/denchmark-code&gt;

where
_dst is OutputArray from UMat
_dst.getMat() is temporary Mat which holds mapped data from UMat
after this statement "temporary Mat" is destroyed and data is unmapped. CvMat c_dst holds only invalid pointers after this.
Fix for these functions is:
&lt;denchmark-code&gt;Mat dst = _dst.getMat(); // don't inline this, it holds mapped UMat data for CvMat
CvMat c_dst = dst;
&lt;/denchmark-code&gt;

The main question is how to detect/find and fix other broken functions.
/cc &lt;denchmark-link:https://github.com/vpisarev&gt;@vpisarev&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='LaurentBerger' date='2016-04-16T12:26:11Z'>
		I think we should remove the dependency on CvMat in the master branch.
		</comment>
		<comment id='9' author='LaurentBerger' date='2016-04-18T10:33:48Z'>
		I trying to catch locations with same problem by adding the move constructor:
&lt;denchmark-code&gt;#ifdef CV_CXX_MOVE_SEMANTICS
inline CvMat::CvMat(const cv::Mat&amp;&amp; m)
{
    CV_Assert(false &amp;&amp; "Don't use: CvMat c_mat = _src.getMat();");
}
#endif
&lt;/denchmark-code&gt;

List of failures is here: &lt;denchmark-link:http://pullrequest.opencv.org/buildbot/builders/precommit_windows64/builds/5383&gt;http://pullrequest.opencv.org/buildbot/builders/precommit_windows64/builds/5383&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='LaurentBerger' date='2016-08-05T17:51:12Z'>
		Hi guys it looks you had deeply investigated the functions... your opinion on &lt;denchmark-link:https://github.com/opencv/opencv/issues/7009&gt;#7009&lt;/denchmark-link&gt;
 (docs: exchange rho and phi) it's welcome
		</comment>
	</comments>
</bug>