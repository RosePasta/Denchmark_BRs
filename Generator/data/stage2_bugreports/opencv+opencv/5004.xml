<bug id='5004' author='opencv-pushbot' open_date='2015-07-27T11:26:48Z' closed_time='2016-05-25T09:25:03Z'>
	<summary>Compiler error on alpine linux with 3.0.0-beta and master branch.</summary>
	<description>
Transferred from &lt;denchmark-link:http://code.opencv.org/issues/4368&gt;http://code.opencv.org/issues/4368&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;|| Bodo Kaiser on 2015-05-29 08:31
|| Priority: Normal
|| Affected: branch 'master' (3.0-dev)
|| Category: build/install
|| Tracker: Bug
|| Difficulty: 
|| PR: 
|| Platform: x64 / Linux
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Compiler error on alpine linux with 3.0.0-beta and master branch.&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Hello,

I tried to compile the latest version of opencv in an alpine linux docker container.

&gt; IMDInterpolator&gt;::operator()(const cv::Range&amp;) const [with T = short unsigned int; SIMDInterpolator = cv::SIMDBayerStubInterpolator_&lt;short unsigned int&gt;]':
&gt; /srv/opencv/modules/imgproc/src/demosaicing.cpp:673:18: internal compiler error: in vect_analyze_data_ref_accesses, at tree-vect-data-refs.c:2567
&gt; virtual void operator() (const Range&amp; range) const
&gt; ^
&gt; Please submit a full bug report,
&gt; with preprocessed source if appropriate.
&gt; See &lt;http://gcc.gnu.org/bugs.html&gt; for instructions.
&gt; Preprocessed source stored into /tmp/ccADdKPJ.out file, please attach this to your bugreport.
&gt; modules/imgproc/CMakeFiles/opencv_imgproc.dir/build.make:1038: recipe for target 'modules/imgproc/CMakeFiles/opencv_imgproc.dir/src/demosaicing.cpp.o' failed
&gt; make[2]: *** [modules/imgproc/CMakeFiles/opencv_imgproc.dir/src/demosaicing.cpp.o] Error 1
&gt; CMakeFiles/Makefile2:1711: recipe for target 'modules/imgproc/CMakeFiles/opencv_imgproc.dir/all' failed
&gt; make[1]: *** [modules/imgproc/CMakeFiles/opencv_imgproc.dir/all] Error 2
&gt; Makefile:136: recipe for target 'all' failed
&gt; make: *** [all] Error 2
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;History&lt;/denchmark-h&gt;

&lt;denchmark-h:h5&gt;Bodo Kaiser on 2015-05-30 09:16&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;I now replaced gcc with clang on the Dockerfile:

&gt; RUN apk add -U clang
&gt; 
&gt; ENV CC /usr/local/clang
&gt; ENV CXX /usr/local/clang++

and it now compiles without problems. So I expect that there is either a bug in GCC 4.9 or there are some features used in OpenCV which are not quite supported in that GCC version.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Deepak Kumar on 2015-07-24 03:40&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;I faced the same issue. I added compiler clang as suggested by you.

However, now I am getting error related to PTHREADs. If I forcibly stop PTHREAD being built, I get errors related to &lt;linux/auxvec.h&gt; and then several others.

My current Docker file is:

&gt; FROM alpine:3.2
&gt; 
&gt; RUN apk add --update gcc g++ clang make cmake
&gt; 
&gt; RUN apk add wget tiff-dev libpng-dev jasper-dev libwebp-dev
&gt; 
&gt; ENV CC /usr/bin/clang
&gt; ENV CXX /usr/bin/clang++
&gt; 
&gt; COPY opencv-3.0.0.zip /tmp/
&gt; 
&gt; WORKDIR /tmp/
&gt; 
&gt; RUN unzip opencv-3.0.0.zip
&gt; 
&gt; RUN mkdir /tmp/build/
&gt; 
&gt; WORKDIR /tmp/build/

---------

To build I am running the following:

&gt; cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_FFMPEG=NO \
&gt; -D WITH_IPP=NO -D WITH_OPENEXR=NO /tmp/opencv-3.0.0
&gt; 
&gt; make
&gt; 
-   Assignee changed from Roman Donchenko to Bodo Kaiser
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='opencv-pushbot' date='2015-11-15T22:00:31Z'>
		Hello,
I'm having the same problems with compiling opencv in alpine linux.
Would be great if somebody could create alpine linux opencv package.
Thanks!
		</comment>
		<comment id='2' author='opencv-pushbot' date='2016-01-30T19:21:18Z'>
		I have the same issue.
Are the Alpine Linux developers aware of this? We need a opencv package for many things.
		</comment>
		<comment id='3' author='opencv-pushbot' date='2016-02-05T14:07:19Z'>
		You can use this Image:
&lt;denchmark-link:https://hub.docker.com/r/julianbei/alpine-opencv-microimage/&gt;julianbei/alpine-opencv-microimage&lt;/denchmark-link&gt;

as a template
		</comment>
		<comment id='4' author='opencv-pushbot' date='2016-02-05T14:13:08Z'>
		Could this be packaged so users can "apk add opencv" on alpine linux? I'm having trouble understanding the little details of APKBUILD. &lt;denchmark-link:http://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package#Creating_an_APKBUILD_file&gt;http://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package#Creating_an_APKBUILD_file&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='opencv-pushbot' date='2016-02-05T14:16:54Z'>
		that would be nice but I decided to just build a base Image.
but you can inherit from it...
This is currently the easiest way to do it
		</comment>
		<comment id='6' author='opencv-pushbot' date='2016-02-05T15:36:50Z'>
		&lt;denchmark-link:https://github.com/julianbei&gt;@julianbei&lt;/denchmark-link&gt;
 Awesome! Thanks!
		</comment>
		<comment id='7' author='opencv-pushbot' date='2016-05-03T16:57:57Z'>
		problem still occurs with recent alpine (gcc-5.3.0). any news?
		</comment>
		<comment id='8' author='opencv-pushbot' date='2016-05-24T21:32:10Z'>
		FWIW, I was seeing a linux/auxvec.h error compiling NodeJS on Alpine and solved it by installing linux-headers:
&lt;denchmark-code&gt;apk add linux-headers
&lt;/denchmark-code&gt;

Maybe that will help someone? Apologies if i'm wide of the mark, Google brought me here.
		</comment>
		<comment id='9' author='opencv-pushbot' date='2016-05-25T09:25:02Z'>
		&lt;denchmark-link:https://github.com/neilstuartcraig&gt;@neilstuartcraig&lt;/denchmark-link&gt;
 , it helped, thank you.
I was able to build latest OpenCV with clang using the following Dockerfile:
FROM alpine:3.3

RUN apk add --update bash
RUN apk add --update gcc g++ clang make cmake ninja
RUN apk add --update wget tiff-dev libpng-dev jasper-dev libwebp-dev
RUN apk add --update linux-headers

ENV CC /usr/bin/clang
ENV CXX /usr/bin/clang++

VOLUME /opencv
VOLUME /build

CMD /bin/bash
Commands:
cd /build
cmake -GNinja ../opencv
ninja
gcc-5.3.0 gives an internal compiler error:
&lt;denchmark-code&gt;/opencv/modules/imgproc/src/demosaicing.cpp: In member function 'void cv::Bayer2RGB_Invoker&lt;T, SIMDInterpolator&gt;::operator()(const cv::Range&amp;) const [with T = short unsigned int; SIMDInterpolator = cv::SIMDBayerStubInterpolator_&lt;short unsigned int&gt;]':
/opencv/modules/imgproc/src/demosaicing.cpp:673:18: internal compiler error: in vect_analyze_data_ref_accesses, at tree-vect-data-refs.c:2596
     virtual void operator() (const Range&amp; range) const
                  ^
Please submit a full bug report,
with preprocessed source if appropriate.
See &lt;http://gcc.gnu.org/bugs.html&gt; for instructions.
&lt;/denchmark-code&gt;

Looks like it is not a problem in OpenCV, so I'll close the issue for now.
		</comment>
		<comment id='10' author='opencv-pushbot' date='2017-08-11T18:08:48Z'>
		This is an issue with the GCC that comes with Alpine 3.4. If you do FROM ruby:alpine, it will use the older alpine version with GCC 5.3.0 which doesn't work.
If you don't want to use the workaround, a better solution is to use Alpine 3.6, e.g. FROM ruby:alpine3.6 and that is able to compile opencv.
		</comment>
	</comments>
</bug>