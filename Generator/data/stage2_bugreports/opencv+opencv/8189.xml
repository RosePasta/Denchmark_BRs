<bug id='8189' author='csukuangfj' open_date='2017-02-12T10:15:19Z' closed_time='2017-03-23T20:21:38Z'>
	<summary>_InputArray::getMatVector returns incorrect value for the input std::vector&amp;lt;int&amp;gt;</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.1.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

The return value of _InputArray::getMatVector is unexpected for the input of std::vector&lt;int&gt;.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

int main()
{
  std::vector&lt;int&gt; v{1,2};

  cv::InputArray arr(v);
  std::vector&lt;cv::Mat&gt; planes;
  arr.getMatVector(planes);
  for (size_t i = 0; i &lt; planes.size(); ++i)
  {
    std::cout &lt;&lt; planes[i] &lt;&lt; std::endl ;
  }
}
The output of the above code is
&lt;denchmark-code&gt;[1]
[2]
[1387598225]
[-1879046146]
[141302312]
[1]
[65537]
[0]
&lt;/denchmark-code&gt;

Only the first two values make sense.
&lt;denchmark-h:h5&gt;Possible solution&lt;/denchmark-h&gt;

Change &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/core/src/matrix.cpp#L1367&gt;line 367 of file matrix.cpp&lt;/denchmark-link&gt;

size_t n = v.size();
to
size_t n = size().width;
n should be the number of elements in the vector, not be the number of bytes.
	</description>
	<comments>
		<comment id='1' author='csukuangfj' date='2017-02-12T17:00:19Z'>
		I think your usage is wrong.
getMatVector is for std::vector&lt;cv::Mat&gt; objects. In you case it should be:
&lt;denchmark-code&gt;int main()
{
  std::vector&lt;int&gt; v{1,2};
  cv::InputArray arr(v);

  cv::Mat planes = arr.getMat();
  std::cout &lt;&lt; planes &lt;&lt; std::endl ;
}
&lt;/denchmark-code&gt;

or more simple:
&lt;denchmark-code&gt;int main()
{
  std::vector&lt;int&gt; v{1, 2};
  Mat planes = Mat(v);
  std::cout &lt;&lt; planes &lt;&lt; std::endl;
}
&lt;/denchmark-code&gt;

Using getMatVector() is for something like this:
&lt;denchmark-code&gt;int main()
{
  std::vector&lt;std::vector&lt;int&gt;&gt; v{{1, 2}, {3, 4}};

  cv::InputArrayOfArrays arr(v);
  // Or as 2-D array:
  // cv::InputArray arr(v);
  std::vector&lt;cv::Mat&gt; planes;
  arr.getMatVector(planes);

  for(int i = 0; i &lt; planes.size(); ++i)
  {
      std::cout &lt;&lt; planes[i] &lt;&lt; std::endl;
  }
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='csukuangfj' date='2017-02-12T18:00:35Z'>
		Thank you for the response.
In fact, the method void _InputArray::getMatVector(std::vector&lt;Mat&gt;&amp; mv) const is not documented at all. If its usage is restricted to std::vector&lt;cv::Mat&gt;, why don't we pass it to a function directly, instead of adding an indirection here?
If you look at its &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/core/src/matrix.cpp#L1325&gt;implementation&lt;/denchmark-link&gt;
, you will find that it supports not only , but also types like , ,  and so on.
If the given type is a 2-D matrix, then according to the implementation, each element of the output container contains a row of the matrix. If it is a 3-D matrix, then each element contains a plane of the matrix.
If the given type is STD_VECTOR, it considers that every element of the input container is a pixel. Correspondingly, every element of the output container represents a pixel.
Therefore, for the given code
int main()
{
  std::vector&lt;int&gt; v{1,2};

  cv::InputArray arr(v);
  std::vector&lt;cv::Mat&gt; planes;
  arr.getMatVector(planes);
  for (size_t i = 0; i &lt; planes.size(); ++i)
  {
    std::cout &lt;&lt; planes[i] &lt;&lt; std::endl ;
  }
}
The container v contains 2 pixels, whose depth is CV_32S and the number of channels is 1. Thus the expected output container should contain two elements. But currently, it contains 8 elements, which is exactly the number of bytes v occupies.
		</comment>
		<comment id='3' author='csukuangfj' date='2017-02-20T22:41:09Z'>
		&lt;denchmark-link:https://github.com/csukuangfj&gt;@csukuangfj&lt;/denchmark-link&gt;
 , looking to the code:
if( k == STD_VECTOR )
{
    const std::vector&lt;uchar&gt;&amp; v = *(const std::vector&lt;uchar&gt;*)obj;
The STD_VECTOR handler is implemented for uchar type only. I can see following solutions:

implement all possible vector types in vector&lt;T&gt; and vector&lt;vector&lt;T&gt;&gt; branches (a lot of code)
throw exception if stored type is not uchar
forbid all instantiations of InputArray(const std::vector&lt;T&gt; &amp;vec) except uchar

		</comment>
		<comment id='4' author='csukuangfj' date='2017-02-20T23:51:47Z'>
		There is &lt;denchmark-link:https://github.com/opencv/opencv/blame/3.2.0/modules/core/src/matrix.cpp#L1562-L1569&gt;workaround in _InputArray::size()&lt;/denchmark-link&gt;
 about  to support other types and different STL implementations. IMHO, it looks like a hack with some assumptions. But  (and ) is supported somehow in OpenCV.
Also there is additional special branch for std::vector&lt;bool&gt; (STD_BOOL_VECTOR kind code).
Replacing planes.size() to this-&gt;size().width (or this-&gt;size().area() or this-&gt;total()) should work somehow (and resolve this issue).
BTW, To limit supported types of  in &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.2.0/modules/core/include/opencv2/core/mat.inl.hpp#L76-L78&gt;_InputArray ctor&lt;/denchmark-link&gt;
 we probably need to drop incorrect &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.2.0/modules/core/include/opencv2/core/traits.hpp#L113-L118&gt;default values&lt;/denchmark-link&gt;
 in the  traits to generate compilation errors (related &lt;denchmark-link:https://github.com/opencv/opencv/issues/7599&gt;#7599&lt;/denchmark-link&gt;
).
		</comment>
		<comment id='5' author='csukuangfj' date='2017-03-22T21:42:11Z'>
		&lt;denchmark-link:https://github.com/mshabunin&gt;@mshabunin&lt;/denchmark-link&gt;

if( k == STD_VECTOR )
{
    const std::vector&lt;uchar&gt;&amp; v = *(const std::vector&lt;uchar&gt;*)obj;
does not mean it is implemented for uchar type only.
The purpose of v is to get the starting address of the first element:
(void*)(&amp;v[0])
There are many statements like this one inside . For example, &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/core/src/matrix.cpp#L1599&gt;https://github.com/opencv/opencv/blob/master/modules/core/src/matrix.cpp#L1599&lt;/denchmark-link&gt;

    if( k == STD_VECTOR )
    {
        CV_Assert( i &lt; 0 );
        const std::vector&lt;uchar&gt;&amp; v = *(const std::vector&lt;uchar&gt;*)obj;
        const std::vector&lt;int&gt;&amp; iv = *(const std::vector&lt;int&gt;*)obj;
        size_t szb = v.size(), szi = iv.size();
        return szb == szi ? Size((int)szb, 1) : Size((int)(szb/CV_ELEM_SIZE(flags)), 1);
    }
It uses v to calculate the number of elements in the container:
Size((int)(szb/CV_ELEM_SIZE(flags))
		</comment>
		<comment id='6' author='csukuangfj' date='2017-03-22T21:58:09Z'>
		This is a hack for different STL implementations, like these:
&lt;denchmark-code&gt;// same result for any "T"
template&lt;typename T, ...&gt; size_t std::vector::size() const { return m_sizeInElements; }
&lt;/denchmark-code&gt;

or
&lt;denchmark-code&gt;// result depends on "T"
// so we check size of "uchar" an "int" and extrapolate results to other types
template&lt;typename T, ...&gt; size_t std::vector::size() const { return m_sizeInBytes/sizeof(T); }
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='csukuangfj' date='2017-03-22T22:29:14Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;

Thank you for the reply.
Now I understand the statement
return szb == szi ? Size((int)szb, 1) : Size((int)(szb/CV_ELEM_SIZE(flags)), 1);
üòÉ üòÅ
		</comment>
	</comments>
</bug>