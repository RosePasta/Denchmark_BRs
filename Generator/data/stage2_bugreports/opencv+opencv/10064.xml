<bug id='10064' author='liquidmetal' open_date='2017-11-10T07:52:15Z' closed_time='2017-12-14T11:08:58Z'>
	<summary>Expected behaviour of Mat::copyTo?</summary>
	<description>
&lt;denchmark-h:h3&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.3.0
Operating System / Platform =&gt; Ubuntu 17.10, intel i7
Compiler =&gt; g++6.3.0 (c++14 mode)

&lt;denchmark-h:h3&gt;Detailed description&lt;/denchmark-h&gt;

Copying a small Mat to a larger Mat produces artifacts because of image reshaping.

&lt;denchmark-link:https://user-images.githubusercontent.com/788742/32647783-db7b6c86-c5a7-11e7-91e5-fb8a40da4dd8.png&gt;&lt;/denchmark-link&gt;


&lt;denchmark-link:https://user-images.githubusercontent.com/788742/32647794-ea9f00d8-c5a7-11e7-9de2-93596bef5c13.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;    Mat output_with_content(120, 160, CV_8UC3, CV_RGB(255, 0, 0));
    for(int y=0;y&lt;120;y++) {
        auto col = ((double)rand()/RAND_MAX)*255.0;
        Vec3b color(col, col, col);
        for(int x=0;x&lt;160;x++) {
            output_with_content.at&lt;Vec3b&gt;(y, x) = color;
        }
    }

    imwrite("../expected.png", output_with_content);

    Mat to_paste(119, 159, CV_8UC3, CV_RGB(0, 0, 0));
    for(int y=0;y&lt;119;y++) {
        auto col = ((double)rand()/RAND_MAX)*255.0;
        Vec3b color(col, 0, 0);
        for(int x=0;x&lt;159;x++) {
            to_paste.at&lt;Vec3b&gt;(y, x) = color;
        }
    }
    Mat mask(119, 159, CV_8UC1, Scalar(0));

    // The bug
    to_paste.copyTo(output_with_content, mask);
    imwrite("../bug.png", output_with_content);
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Potential issue&lt;/denchmark-h&gt;


The issues seems like some kind of a memcpy that isn't aligned correct. This is also likely to be some specialized CPU instruction.
I expected the original (output_with_content, larger) image to stay intact and the smaller image (to_paste) to be pasted in the top-left corner of the image. Is this the expected behavior?

&lt;denchmark-h:h5&gt;Potential solutions&lt;/denchmark-h&gt;

This can be solved in one of the following ways:

Enforce the two Mats to be the same dimension and error out if this isn't true
Paste the smaller mat on the top-left corner (and update the docs)

I'd be happy to contribute this fix (if this is something that needs fixing that is)
	</description>
	<comments>
		<comment id='1' author='liquidmetal' date='2017-11-10T09:09:56Z'>
		Could you try to check with reverted patch &lt;denchmark-link:https://github.com/opencv/opencv/pull/9551&gt;#9551&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='2' author='liquidmetal' date='2017-11-12T19:52:17Z'>
		It seems like &lt;denchmark-link:https://github.com/opencv/opencv/pull/9551&gt;#9551&lt;/denchmark-link&gt;
 isn't related to this bug. I found the bug in OpenCV as far back as 2.4.9 - however it would be great if someone else could double-check this.
I used find_package(OpenCV 2.4.9 REQUIRED) in my cmake file. I also ensured that the library symlinks on my machine pointed to libopencv_*.so.2.4.9. Is there anything else i should check to ensure I'm really using v2.4.9?
		</comment>
		<comment id='3' author='liquidmetal' date='2017-11-12T19:57:35Z'>
		Check cv::getBuildInformation() string.
		</comment>
		<comment id='4' author='liquidmetal' date='2017-11-12T21:15:10Z'>
		The build information looks great! I am indeed using v2.4.9.
&lt;denchmark-code&gt;OpenCV Build: 
General configuration for OpenCV 2.4.9 =====================================
  Version control:               2.4.9

  Platform:
    Host:                        Linux 4.10.0-38-generic x86_64
    CMake:                       3.7.2
    CMake generator:             Unix Makefiles
    CMake build tool:            /usr/bin/make
    Configuration:               Release

  C/C++:
    Built as dynamic libs?:      YES
    C++ Compiler:                /usr/bin/c++  (ver 6.3.0)
    C++ flags (Release):         -fsigned-char -W -Wall -Werror=return-type -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wno-narrowing -Wno-delete-non-virtual-dtor -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -msse -msse2 -msse3 -ffunction-sections -O3 -DNDEBUG  -DNDEBUG
    C++ flags (Debug):           -fsigned-char -W -Wall -Werror=return-type -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wno-narrowing -Wno-delete-non-virtual-dtor -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -msse -msse2 -msse3 -ffunction-sections -g  -O0 -DDEBUG -D_DEBUG
    C Compiler:                  /usr/bin/cc
    C flags (Release):           -fsigned-char -W -Wall -Werror=return-type -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wno-narrowing -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -msse -msse2 -msse3 -ffunction-sections -O3 -DNDEBUG  -DNDEBUG
    C flags (Debug):             -fsigned-char -W -Wall -Werror=return-type -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wno-narrowing -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -msse -msse2 -msse3 -ffunction-sections -g  -O0 -DDEBUG -D_DEBUG
    Linker flags (Release):
    Linker flags (Debug):
    Precompiled headers:         NO

  OpenCV modules:
    To be built:                 core flann imgproc highgui features2d calib3d ml objdetect photo stitching ts
    Disabled:                    nonfree video videostab world
    Disabled by dependency:      contrib(deps: video legacy gpu ocl nonfree) gpu(deps: video legacy) legacy(deps: video) ocl(deps: video) python(deps: video legacy gpu ocl nonfree contrib) superres(deps: video legacy gpu ocl)
    Unavailable:                 androidcamera dynamicuda java viz

  GUI: 
    QT:                          NO
    GTK+ 2.x:                    YES (ver 2.24.31)
    GThread :                    YES (ver 2.52.0)
    GtkGlExt:                    NO
    OpenGL support:              NO
    VTK support:                 NO

  Media I/O: 
    ZLib:                        /usr/lib/x86_64-linux-gnu/libz.so (ver 1.2.11)
    JPEG:                        /usr/lib/x86_64-linux-gnu/libjpeg.so (ver )
    PNG:                         /usr/lib/x86_64-linux-gnu/libpng.so (ver 1.6.28)
    TIFF:                        /usr/lib/x86_64-linux-gnu/libtiff.so (ver 42 - 4.0.7)
    JPEG 2000:                   build (ver 1.900.1)
    OpenEXR:                     /usr/lib/x86_64-linux-gnu/libImath.so /usr/lib/x86_64-linux-gnu/libIlmImf.so /usr/lib/x86_64-linux-gnu/libIex.so /usr/lib/x86_64-linux-gnu/libHalf.so /usr/lib/x86_64-linux-gnu/libIlmThread.so (ver 2.2.0)

  Video I/O:
    DC1394 1.x:                  NO
    DC1394 2.x:                  YES (ver 2.2.5)
    FFMPEG:                      NO
      codec:                     NO
      format:                    NO
      util:                      NO
      swscale:                   NO
      gentoo-style:              NO
    GStreamer:                   NO
    OpenNI:                      NO
    OpenNI PrimeSensor Modules:  NO
    PvAPI:                       NO
    GigEVisionSDK:               NO
    UniCap:                      NO
    UniCap ucil:                 NO
    V4L/V4L2:                    NO/YES
    XIMEA:                       NO
    Xine:                        NO

  Other third-party libraries:
    Use IPP:                     NO
    Use Eigen:                   YES (ver 3.3.2)
    Use TBB:                     NO
    Use OpenMP:                  NO
    Use GCD                      NO
    Use Concurrency              NO
    Use C=:                      NO
    Use Cuda:                    NO
    Use OpenCL:                  YES

  OpenCL:
    Version:                     dynamic
    Include path:                /work/software/opencv/3rdparty/include/opencl/1.2
    Use AMD FFT:                 NO
    Use AMD BLAS:                NO

  Python:
    Interpreter:                 /usr/bin/python2 (ver 2.7.13)
    Libraries:                   NO
    numpy:                       /usr/local/lib/python2.7/dist-packages/numpy/core/include (ver 1.13.0)
    packages path:               lib/python2.7/dist-packages

  Java:
    ant:                         NO
    JNI:                         NO
    Java tests:                  NO

  Documentation:
    Build Documentation:         NO
    Sphinx:                      NO
    PdfLaTeX compiler:           /usr/bin/pdflatex

  Tests and samples:
    Tests:                       YES
    Performance tests:           YES
    C/C++ Examples:              NO

  Install path:                  /usr/local

  cvconfig.h is in:              /work/software/opencv/build-2.4.9
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='liquidmetal' date='2017-11-12T22:36:59Z'>
		&lt;denchmark-link:https://github.com/liquidmetal&gt;@liquidmetal&lt;/denchmark-link&gt;
 can i ask a favour unrelated to this issue.
your OpenCV have libpng.so (ver 1.6.28)
could you try to open the png image at &lt;denchmark-link:https://github.com/glennrp/libpng/issues/183&gt;glennrp/libpng#183&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='liquidmetal' date='2017-12-12T15:36:44Z'>
		
Mat mask(119, 159, CV_8UC1, Scalar(0));

Expected output is black image 159 x 119 pixels.
Destination image is re-allocated, but occasionally with the same memory location, so this code doesn't work properly:
&lt;denchmark-code&gt;    if( dst.data != data0 ) // do not leave dst uninitialized
        dst = Scalar(0);
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='liquidmetal' date='2018-01-06T19:25:37Z'>
		This is great - thanks!
		</comment>
	</comments>
</bug>