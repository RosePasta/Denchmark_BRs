<bug id='6438' author='TobyLobster' open_date='2016-04-20T09:13:14Z' closed_time='2016-04-22T18:32:34Z'>
	<summary>minEnclosingCircle broken</summary>
	<description>
&lt;denchmark-h:h3&gt;Please state the information for your system&lt;/denchmark-h&gt;


OpenCV version: 3.1
Host OS: Mac OS X 10.11.4

&lt;denchmark-h:h3&gt;In which part of the OpenCV library you got the issue?&lt;/denchmark-h&gt;


minEnclosingCircle

&lt;denchmark-h:h3&gt;Expected behaviour&lt;/denchmark-h&gt;

Find the minEnclosingCircle of three points:
(0.0, 0.0)
(0.5, 0.01)
(1.0, 0.0)
I expect the result to be the circle of radius 0.5 centred at (0.5, 0.0)
&lt;denchmark-h:h3&gt;Actual behaviour&lt;/denchmark-h&gt;

Circle returned has radius 12.505 centred at (0.5, -12.495)
This is clearly not the minimum circle
&lt;denchmark-h:h3&gt;Additional description&lt;/denchmark-h&gt;

The minEnclosingCircle code claims be implementing the algorithm from "Welzl, Emo. Smallest enclosing disks (balls and ellipsoids). Springer Berlin Heidelberg, 1991." In reality it appears to be a brute force approach that does not take into account the situation where there are three or more non-colinear points but only two points touch the min enclosing circle.
	</description>
	<comments>
		<comment id='1' author='TobyLobster' date='2016-04-22T05:52:03Z'>
		I have tested on following environment and seems that the result is correct, just list run-time environment as a reference.
Please state the information for your system
OpenCV version: master branch
Host OS: Windows 10
Test code:
int main()
{
Point2f center;
float radius;
vector inputPoints;
Point2d p1(0.0, 0.0);
Point2d p2(0.5, 0.01);
Point2d p3(1.0, 0.0);
inputPoints.push_back(p1);
inputPoints.push_back(p3);
inputPoints.push_back(p3);
&lt;denchmark-code&gt;minEnclosingCircle(inputPoints, center, radius);
cout &lt;&lt; "Center: " &lt;&lt; center &lt;&lt; ", Radius: " &lt;&lt; radius &lt;&lt; endl;
return 0;
&lt;/denchmark-code&gt;

}
And after calling minEnclosingCircle, the value of center and radius are "Center: [0.5, 0], Radius: 0.5001"
		</comment>
		<comment id='2' author='TobyLobster' date='2016-04-22T18:32:34Z'>
		My mistake - sorry, I've tried the code on a fresh project and it gives the correct results as expected.
		</comment>
		<comment id='3' author='TobyLobster' date='2017-09-04T08:24:38Z'>
		I have a similar issue with minEnclosingcircle (python opencv2 on mac, installed with brew install opencv@2, version 2.4.13.2_2).
The issue is described here: &lt;denchmark-link:https://stackoverflow.com/questions/46002904/weird-center-from-minenclosingcircle-with-opencv-python&gt;https://stackoverflow.com/questions/46002904/weird-center-from-minenclosingcircle-with-opencv-python&lt;/denchmark-link&gt;

In brief, the center of the circle is clearly wrong. The error occurs with minimal code:
`import cv2
import numpy as np
img = cv2.imread('testodd3.jpg',cv2.CV_LOAD_IMAGE_COLOR)
pic = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
ret,thresh = cv2.threshold(pic,127,255,0)
thresh = cv2.bitwise_not(thresh)
contours,hierarchy = cv2.findContours(thresh, 1, 2)
cnt = contours[0]
(x,y),radius = cv2.minEnclosingCircle(cnt)
center = (int(x),int(y))
radius = int(radius)
cv2.circle(img,center,radius,(0,255,0),3)
cv2.circle(img,center,3,(255,255,0),3)
cv2.drawContours(img, [cnt], 0, (0,0,255), 3)
cv2.imshow('image',img)
cv2.waitKey(0)
cv2.destroyAllWindows()`
The pictures below are the same, rotated 90°. They are horizontal and vertical symmetrical. The center must be the center of the shape. The result is not and, more interestingly, is not the same (rotated 90°) on both pictures. A rotation should not affect the min enclosing circle, right?
&lt;denchmark-link:https://user-images.githubusercontent.com/6160186/30017823-ef103fa0-915a-11e7-85f1-7f7397f1b534.jpg&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/6160186/30017824-ef115cc8-915a-11e7-9537-161ebc229265.jpg&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='TobyLobster' date='2017-09-07T08:17:02Z'>
		Switching to opencv3 solved my problem. The issue stands in opencv2.
&lt;denchmark-link:https://stackoverflow.com/questions/46002904/weird-center-from-minenclosingcircle-with-opencv-python/46034439#46034439&gt;https://stackoverflow.com/questions/46002904/weird-center-from-minenclosingcircle-with-opencv-python/46034439#46034439&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>