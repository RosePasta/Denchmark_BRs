<bug id='15690' author='schnaader' open_date='2019-10-12T07:24:11Z' closed_time='2019-10-15T15:22:44Z'>
	<summary>"Illegal instruction" for debug libraries on non-AVX CPU</summary>
	<description>
&lt;denchmark-h:h5&gt;System information&lt;/denchmark-h&gt;


OpenCV =&gt; 4.1.1, 4.1.2
Operating System / Platform =&gt; Windows 8.1 64 Bit
Compiler =&gt; Visual Studio 2019

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

When I tried to debug an OpenCV application using OpenCV 4.1.1, I got a runtime error in "glfluidimgproc_func.simd.hpp", line 879 - "Unhandled exception at 0x00007FFAA7D35862 (opencv_world412d.dll) in testApp.exe: 0xC000001D: Illegal instruction."
It seems that this is related to the CPU (Intel Core i5 M520) that doesn't support AVX. After some research, I found two StackOverflow posts with the exact same problem:

https://stackoverflow.com/questions/58007793/using-cmake-to-make-a-library-without-sse-support-windows-version/58044006#58044006
https://stackoverflow.com/questions/57959602/trouble-with-setting-up-opencv-4-1-1-on-visual-microsoft-studio-2019-illega

The system information given in the first one completely matches my own (VS 2019, Win 8.1, i5 M520), so the issue might as well be related to those. The second one is for Win 7, but an unspecified i5 CPU, too.
Note that release builds do work, but that isn't really helpful. Also, the first StackOverflow post offers a workaround by compiling from souce with an adjusted OpenCVCompilerOptimizations.cmake. Didn't try that myself yet, I'd prefer a bugfix or workaround that allows using the pre-built libraries.
&lt;denchmark-h:h5&gt;Other things tried that didn't work&lt;/denchmark-h&gt;


Building 4.1.1 libraries myself (using the git-bash and cmake build instructions here)
Using environment variable "OPENCV_CPU_DISABLE" set to "AVX2,AVX,FP16"
Using the just released 4.1.2 pre-built libraries (from the Release section in this repository)

&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;


Downloading 4.1.1 or 4.1.2 pre-built libraries from the releases section (opencv-4.1.x-vc14_vc15.exe)
Using CMake to build the OpenCV samples (in opencv/sources/samples)
Setting opencv_version as startup project
Running as "Debug, x64"

&lt;denchmark-h:h5&gt;Screenshot&lt;/denchmark-h&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/7848769/66696973-634fb980-ecd1-11e9-9bc7-9d3946ffbf0e.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='schnaader' date='2019-10-12T09:26:50Z'>
		Thank you for the report!
OPENCV_CPU_DISABLE runtime option is not necessary.
I can confirm problem (through Intel SDE, log is below).
Need to avoid calling of initializers for global symbols in .simd.hpp and opt_XXX.cpp files.
Direct constants should be used instead (without any computation - you can put related code in comments).
Alternative is lazy initialization (get.../init... functions).
Workaround:

If you don't need OpenCV 4.x specific functionality try OpenCV 3.4.8 binary package.
rebuild OpenCV with reduced CPU-specific instruction set:
cmake -DCPU_BASELINE=SSE4_2 -DCPU_DISPATCH= ....

/cc &lt;denchmark-link:https://github.com/dmatveev&gt;@dmatveev&lt;/denchmark-link&gt;


Intel SDE log
&gt; C:\utils\soft\sde\sde -nhm -- ..\Debug\opencv_version.exe
TID 0 SDE-ERROR: Executed instruction not valid for specified chip (NEHALEM):
0x7fff3db093d2: vmovss xmm0, dword ptr [rcx+rax*1]
Image: D:\test\4.1.2\opencv\build\x64\vc15\bin\opencv_world412d.dll+0x1f293d2
Function: cv::gapi::fluid::opt_AVX2::`dynamic initializer for 'c0''
File Name: c:\build\master_winpack-build-win64-vc15\opencv\modules\gapi\src\backends\fluid\gfluidimgproc_func.simd.hpp:879
Instruction bytes are: c5 fa 10 04 01


		</comment>
		<comment id='2' author='schnaader' date='2019-10-14T18:18:46Z'>
		Looks not bad
		</comment>
		<comment id='3' author='schnaader' date='2019-10-15T10:56:00Z'>
		thanks, we'll look into this
		</comment>
		<comment id='4' author='schnaader' date='2019-10-15T11:04:59Z'>
		There is link above with proposed patch: &lt;denchmark-link:https://github.com/opencv/opencv/pull/15704&gt;#15704&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>