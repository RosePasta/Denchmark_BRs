<bug id='7970' author='tofisa' open_date='2017-01-05T11:57:52Z' closed_time='2017-01-18T13:20:45Z'>
	<summary>libopencv_core.so.3.2.0: undefined reference to `dpotrf_'</summary>
	<description>
I'm installing opencv 3.2 and when I use üëç
cmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON ..
and
make -j4  , this error is showing , how can be solved ?
[ 75%] Linking CXX executable ../../bin/opengl-example-opengl_interop
../../lib/libopencv_core.so.3.2.0: undefined reference to dpotrf_' ../../lib/libopencv_core.so.3.2.0: undefined reference to dgesv_'
../../lib/libopencv_core.so.3.2.0: undefined reference to sgels_' ../../lib/libopencv_core.so.3.2.0: undefined reference to sgesv_'
../../lib/libopencv_core.so.3.2.0: undefined reference to sposv_' ../../lib/libopencv_core.so.3.2.0: undefined reference to dgetrf_'
../../lib/libopencv_core.so.3.2.0: undefined reference to sgetrf_' ../../lib/libopencv_core.so.3.2.0: undefined reference to dgels_'
../../lib/libopencv_core.so.3.2.0: undefined reference to dgeqrf_' ../../lib/libopencv_core.so.3.2.0: undefined reference to spotrf_'
../../lib/libopencv_core.so.3.2.0: undefined reference to sgeqrf_' ../../lib/libopencv_core.so.3.2.0: undefined reference to sgesdd_'
../../lib/libopencv_core.so.3.2.0: undefined reference to dgesdd_' ../../lib/libopencv_core.so.3.2.0: undefined reference to dposv_'
collect2: error: ld returned 1 exit status
make[2]: *** [bin/opencv_version] Error 1
make[1]: *** [apps/version/CMakeFiles/opencv_version.dir/all] Error 2
make[1]: *** Waiting for unfinished jobs....
[ 75%] Built target opencv_annotation
[ 75%] Built target opencv_visualisation
[ 75%] Built target example_opengl_opengl_interop
	</description>
	<comments>
		<comment id='1' author='tofisa' date='2017-01-05T23:15:54Z'>
		i have exactly the same problem while using this script &lt;denchmark-link:https://github.com/milq/scripts-ubuntu-debian/blob/master/install-opencv.sh&gt;https://github.com/milq/scripts-ubuntu-debian/blob/master/install-opencv.sh&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='tofisa' date='2017-01-06T02:01:45Z'>
		More details are required:

CMake stdout (from clean build)
CMakeCache.txt CMakeVars.txt
failed command line via make VERBOSE=1 (without any -j option)

Also try to disable blas/lapack support (-DWITH_LAPACK=OFF) as workaround.
		</comment>
		<comment id='3' author='tofisa' date='2017-01-07T12:32:21Z'>
		I have the same problem
I use Ubuntu 14.04 x64 with cuda
I use CMake-gui, since I am not familiar with cmake command line. (It is more convenient to set values in gui):
&lt;denchmark-link:https://github.com/opencv/opencv/files/691480/CMake.stdout.txt&gt;CMake stdout.txt&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/opencv/opencv/files/691481/CMakeCache.txt&gt;CMakeCache.txt&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/opencv/opencv/files/691482/CMakeVars.txt&gt;CMakeVars.txt&lt;/denchmark-link&gt;

Thanks very much!
		</comment>
		<comment id='4' author='tofisa' date='2017-01-07T21:59:37Z'>
		Encountered the same error running Ubuntu 14.04 x64 with CUDA.
Adding the flag -D WITH_LAPACK=OFF to the cmake command as suggested resolved this issue for me.
		</comment>
		<comment id='5' author='tofisa' date='2017-01-08T02:32:19Z'>
		&lt;denchmark-link:https://github.com/yuanxy92&gt;@yuanxy92&lt;/denchmark-link&gt;
 Thank you! Looks like it is related to OpenBLAS support.
Could someone run  and dump here a failed command line with parameters?
		</comment>
		<comment id='6' author='tofisa' date='2017-01-08T12:04:43Z'>
		I can successfully compile the project after setting WITH_LAPACK=OFF, too. Thank &lt;denchmark-link:https://github.com/chrisabbott&gt;@chrisabbott&lt;/denchmark-link&gt;
.
the following is failed command line with WITH_LAPACK=ON
../../lib/libopencv_core.so.3.2.0: undefined reference to dpotrf_' ../../lib/libopencv_core.so.3.2.0: undefined reference to dgesv_'
../../lib/libopencv_core.so.3.2.0: undefined reference to sgels_' ../../lib/libopencv_core.so.3.2.0: undefined reference to sgesv_'
../../lib/libopencv_core.so.3.2.0: undefined reference to sposv_' ../../lib/libopencv_core.so.3.2.0: undefined reference to dgetrf_'
../../lib/libopencv_core.so.3.2.0: undefined reference to sgetrf_' ../../lib/libopencv_core.so.3.2.0: undefined reference to dgels_'
../../lib/libopencv_core.so.3.2.0: undefined reference to dgeqrf_' ../../lib/libopencv_core.so.3.2.0: undefined reference to spotrf_'
../../lib/libopencv_core.so.3.2.0: undefined reference to sgeqrf_' ../../lib/libopencv_core.so.3.2.0: undefined reference to sgesdd_'
../../lib/libopencv_core.so.3.2.0: undefined reference to dgesdd_' ../../lib/libopencv_core.so.3.2.0: undefined reference to dposv_'
collect2: error: ld returned 1 exit status
make[2]: *** [bin/opencv_traincascade] Error 1
make[1]: *** [apps/traincascade/CMakeFiles/opencv_traincascade.dir/all] Error 2
make: *** [all] Error 2
&lt;denchmark-link:https://github.com/opencv/opencv/files/692073/make_error.txt&gt;make_error.txt&lt;/denchmark-link&gt;

I hope it is useful to you, &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 .
Thanks very much!
		</comment>
		<comment id='7' author='tofisa' date='2017-01-08T19:12:02Z'>
		Thanks , the issue is resolved with  WITH_LAPACK=OFF
		</comment>
		<comment id='8' author='tofisa' date='2017-01-12T11:50:33Z'>
		&lt;denchmark-link:https://github.com/yuanxy92&gt;@yuanxy92&lt;/denchmark-link&gt;
 Could you post  log with failed command line? (build log above is successful, but it uses )
		</comment>
		<comment id='9' author='tofisa' date='2017-01-12T15:00:28Z'>
		Could someone check fix &lt;denchmark-link:https://github.com/opencv/opencv/pull/7999&gt;#7999&lt;/denchmark-link&gt;
 please?
		</comment>
		<comment id='10' author='tofisa' date='2017-01-16T10:38:15Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 I'm facing the same issue on my ubuntu 14.04 machine. I've tested &lt;denchmark-link:https://github.com/opencv/opencv/pull/7999&gt;#7999&lt;/denchmark-link&gt;
 and it works great.
		</comment>
		<comment id='11' author='tofisa' date='2017-01-25T16:53:55Z'>
		I'm getting the same undefined symbols errors when linking the osx framework built on a Mac (macOS 10.12.2, Xcode 8.2.1).
lapack is correctly found (accelerate framework) and enabled by cmake.
It works when I disable lapack as suggested.
&lt;denchmark-code&gt;Undefined symbols for architecture x86_64:
  "_cblas_cgemm", referenced from:
      lapack_gemm32fc(float const*, unsigned long, float const*, unsigned long, float, float const*, unsigned long, float, float*, unsigned long, int, int, int, int) in opencv2(hal_internal.o)
      lapack_gemm64fc(double const*, unsigned long, double const*, unsigned long, double, double const*, unsigned long, double, double*, unsigned long, int, int, int, int) in opencv2(hal_internal.o)
  "_cblas_dgemm", referenced from:
      lapack_gemm64f(double const*, unsigned long, double const*, unsigned long, double, double const*, unsigned long, double, double*, unsigned long, int, int, int, int) in opencv2(hal_internal.o)
  "_cblas_sgemm", referenced from:
      lapack_gemm32f(float const*, unsigned long, float const*, unsigned long, float, float const*, unsigned long, float, float*, unsigned long, int, int, int, int) in opencv2(hal_internal.o)
      lapack_gemm64f(double const*, unsigned long, double const*, unsigned long, double, double const*, unsigned long, double, double*, unsigned long, int, int, int, int) in opencv2(hal_internal.o)
  "_cblas_zgemm", referenced from:
      lapack_gemm64fc(double const*, unsigned long, double const*, unsigned long, double, double const*, unsigned long, double, double*, unsigned long, int, int, int, int) in opencv2(hal_internal.o)
  "_dgels_", referenced from:
      lapack_QR64f(double*, unsigned long, int, int, int, double*, unsigned long, double*, int*) in opencv2(hal_internal.o)
  "_dgeqrf_", referenced from:
      lapack_QR64f(double*, unsigned long, int, int, int, double*, unsigned long, double*, int*) in opencv2(hal_internal.o)
  "_dgesdd_", referenced from:
      lapack_SVD64f(double*, unsigned long, double*, double*, unsigned long, double*, unsigned long, int, int, int) in opencv2(hal_internal.o)
  "_dgesv_", referenced from:
      lapack_LU64f(double*, unsigned long, int, double*, unsigned long, int, int*) in opencv2(hal_internal.o)
  "_dgetrf_", referenced from:
      lapack_LU64f(double*, unsigned long, int, double*, unsigned long, int, int*) in opencv2(hal_internal.o)
  "_dposv_", referenced from:
      lapack_Cholesky64f(double*, unsigned long, int, double*, unsigned long, int, bool*) in opencv2(hal_internal.o)
  "_dpotrf_", referenced from:
      lapack_Cholesky64f(double*, unsigned long, int, double*, unsigned long, int, bool*) in opencv2(hal_internal.o)
  "_sgels_", referenced from:
      lapack_QR32f(float*, unsigned long, int, int, int, float*, unsigned long, float*, int*) in opencv2(hal_internal.o)
      lapack_QR64f(double*, unsigned long, int, int, int, double*, unsigned long, double*, int*) in opencv2(hal_internal.o)
  "_sgeqrf_", referenced from:
      lapack_QR32f(float*, unsigned long, int, int, int, float*, unsigned long, float*, int*) in opencv2(hal_internal.o)
      lapack_QR64f(double*, unsigned long, int, int, int, double*, unsigned long, double*, int*) in opencv2(hal_internal.o)
  "_sgesdd_", referenced from:
      lapack_SVD32f(float*, unsigned long, float*, float*, unsigned long, float*, unsigned long, int, int, int) in opencv2(hal_internal.o)
      lapack_SVD64f(double*, unsigned long, double*, double*, unsigned long, double*, unsigned long, int, int, int) in opencv2(hal_internal.o)
  "_sgesv_", referenced from:
      lapack_LU32f(float*, unsigned long, int, float*, unsigned long, int, int*) in opencv2(hal_internal.o)
      lapack_LU64f(double*, unsigned long, int, double*, unsigned long, int, int*) in opencv2(hal_internal.o)
  "_sgetrf_", referenced from:
      lapack_LU32f(float*, unsigned long, int, float*, unsigned long, int, int*) in opencv2(hal_internal.o)
      lapack_LU64f(double*, unsigned long, int, double*, unsigned long, int, int*) in opencv2(hal_internal.o)
  "_sposv_", referenced from:
      lapack_Cholesky32f(float*, unsigned long, int, float*, unsigned long, int, bool*) in opencv2(hal_internal.o)
      lapack_Cholesky64f(double*, unsigned long, int, double*, unsigned long, int, bool*) in opencv2(hal_internal.o)
  "_spotrf_", referenced from:
      lapack_Cholesky32f(float*, unsigned long, int, float*, unsigned long, int, bool*) in opencv2(hal_internal.o)
      lapack_Cholesky64f(double*, unsigned long, int, double*, unsigned long, int, bool*) in opencv2(hal_internal.o)
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='12' author='tofisa' date='2017-01-27T12:29:59Z'>
		Adding -DWITH_LAPACK=OFF to the cmake solved this issue for me. Thanks &lt;denchmark-link:https://github.com/tofisa&gt;@tofisa&lt;/denchmark-link&gt;
 ^^
		</comment>
		<comment id='13' author='tofisa' date='2017-02-19T06:44:45Z'>
		So OpenCV 3.2.0 has no LAPACK support?
		</comment>
		<comment id='14' author='tofisa' date='2017-02-19T17:13:59Z'>
		In my experience at least the tagged release can not be build against OpenBLAS.
		</comment>
		<comment id='15' author='tofisa' date='2017-03-07T07:19:24Z'>
		If I want to use OpenCV 3.2.0 with LAPACK, what should I do?
		</comment>
		<comment id='16' author='tofisa' date='2017-03-27T04:15:21Z'>
		On Ubuntu 16.04, build OpenCV 3.2.0 with LAPACK is ok. I think you can try Ubuntu 16.04
		</comment>
		<comment id='17' author='tofisa' date='2017-03-27T15:21:45Z'>
		&lt;denchmark-link:https://github.com/DongdongBai&gt;@DongdongBai&lt;/denchmark-link&gt;
 I am not sure if there is a plan to release a 3.2.1 any time soon, so I think you would do best by cherry picking the commits that fixed it (see &lt;denchmark-link:https://github.com/opencv/opencv/pull/7999&gt;#7999&lt;/denchmark-link&gt;
 or &lt;denchmark-link:https://github.com/alalek/opencv/tree/fix_lapack&gt;here&lt;/denchmark-link&gt;
) and applying it to 3.2.0.
		</comment>
		<comment id='18' author='tofisa' date='2017-03-28T04:35:34Z'>
		&lt;denchmark-link:https://github.com/nith02&gt;@nith02&lt;/denchmark-link&gt;
 I try this &lt;denchmark-link:https://github.com/milq/milq/blob/master/scripts/bash/install-opencv.sh&gt;install script&lt;/denchmark-link&gt;
 on ubuntu 16.04 but it still get this error.
--   Other third-party libraries:
--     Use IPP:                     9.0.1 [9.0.1]
--     Use IPP Async:               NO
--     Use VA:                      NO
--     Use Intel VA-API/OpenCL:     NO
--     Use Lapack:                  YES (/usr/lib/libopenblas.so)
--     Use Eigen:                   YES (ver 3.2.92)
--     Use Cuda:                    NO
--     Use OpenCL:                  YES
--     Use OpenVX:                  NO
--     Use custom HAL:              NO
fatal error: LAPACKE_H_PATH-NOTFOUND/lapacke.h: No such file or directory
		</comment>
		<comment id='19' author='tofisa' date='2017-03-28T04:46:21Z'>
		according to this &lt;denchmark-link:http://answers.opencv.org/question/121651/fata-error-lapacke_h_path-notfound-when-building-opencv-32/&gt;forum&lt;/denchmark-link&gt;

install lapacke manually
$ sudo apt-get install liblapacke-dev
and modify the file opencv_lapack.h
from #include "LAPACKE_H_PATH-NOTFOUND/lapacke.h"
to  #include "lapacke.h"
it can solved this problem
		</comment>
		<comment id='20' author='tofisa' date='2017-03-28T09:44:55Z'>
		Will there be a new release with the LAPACK fix? It's working on paster now after fix_lapack branch was merged
		</comment>
		<comment id='21' author='tofisa' date='2017-06-02T11:15:39Z'>
		&lt;denchmark-link:https://github.com/afunTW&gt;@afunTW&lt;/denchmark-link&gt;
 that does not solve this problem.  That is for a different error as shown in the link you provided.
As &lt;denchmark-link:https://github.com/FlorianFranzen&gt;@FlorianFranzen&lt;/denchmark-link&gt;
 has suggested, you may want to cherry pick pull request &lt;denchmark-link:https://github.com/opencv/opencv/pull/7999&gt;#7999&lt;/denchmark-link&gt;
, however if you have downloaded the 3.2.0 release as opposed to cloning the repo (or if you'd just prefer not to mess around with cherry picking), you can apply it via a patch as follows:
&lt;denchmark-code&gt;cd opencv-3.2.0
wget https://patch-diff.githubusercontent.com/raw/opencv/opencv/pull/7999.patch
patch -p1 &lt;7999.patch
&lt;/denchmark-code&gt;

and rebuild.  Works for me,  I'm on ubuntu 14.04.
The alternative, as some have suggested, is to not build with lapack by adding  -DWITH_LAPACK=OFF to your cmake command line.   Of course in that case, your opencv build will not be using lapack.
		</comment>
		<comment id='22' author='tofisa' date='2017-06-02T14:52:33Z'>
		What are the main benefits of using the LaPack extension? Do you see significant improvements on the standard opencv calls..like findContours, morphology etc. or does this only speed up the linear algebra specific stuff like the solvers.
		</comment>
		<comment id='23' author='tofisa' date='2017-06-02T19:59:53Z'>
		&lt;denchmark-link:https://github.com/soulslicer&gt;@soulslicer&lt;/denchmark-link&gt;
 I haven't studied the performance in opencv, however my experience is that the speedup for linear algebra (matrix/vector multiplications) and solvers (SVD, etc) is significant (orders of magnitude) over any other implementations.  In particular as the matrices get large.  Also with MKL having the fastest cpu implementation of blas/lapack.   Nvidia claims that their gpu blas implementation is 10x faster than MKL.
		</comment>
		<comment id='24' author='tofisa' date='2017-06-28T12:02:02Z'>
		&lt;denchmark-link:https://github.com/chrisabbott&gt;@chrisabbott&lt;/denchmark-link&gt;
 Thank you! I solveed
		</comment>
		<comment id='25' author='tofisa' date='2017-06-29T00:05:01Z'>
		The problem is when installing OpenBLAS on fedora f.ex, the includes go into /usr/include/openblas,
if there is a file named cblas.h inside the /usr/include folder then it seems that cmake is unable to spot the correct folder "/usr/include/openblas".
I even changed the order where openblas is searched for inside the OpenCVFindOpenBLAS.cmake file and at one time I remove the /usr/include line from the file, but still it defaults to /usr/include instead of /usr/include/openblas!
By changing the line inside OpenCVFindOpenBLAS.cmake,
FIND_PATH(OpenBLAS_INCLUDE_DIR NAMES cblas.h PATHS ${Open_BLAS_INCLUDE_SEARCH_PATHS})
to
SET(OpenBLAS_INCLUDE_DIR /usr/include/openblas)
DID IT FOR ME, running Fedora 25
.........
TBH. I have not worked much with cmake before, so I am not sure what it
And yes this is only a workaround !!
		</comment>
		<comment id='26' author='tofisa' date='2017-06-29T00:10:06Z'>
		&lt;denchmark-link:https://github.com/afunTW&gt;@afunTW&lt;/denchmark-link&gt;

Please try this,
$ locate cblas.h
or
$ find /usr -name "cblas.h"
if you have this file inside multiple locations then this could be the problem,
if you get a folder named /xxx/xxx/openblas then this workaround above could work.
		</comment>
		<comment id='27' author='tofisa' date='2017-06-29T01:47:48Z'>
		&lt;denchmark-link:https://github.com/netscream&gt;@netscream&lt;/denchmark-link&gt;
 Thanks reply, it solved.
		</comment>
		<comment id='28' author='tofisa' date='2017-06-30T08:33:56Z'>
		Same issue experimented in Ubuntu 14.04.
&lt;denchmark-link:https://github.com/netscream&gt;@netscream&lt;/denchmark-link&gt;
 I've multiple locations of BLAS.
&lt;denchmark-code&gt;/usr/local/MATLAB/R2012b/toolbox/rtw/rtwdemos/crl_demo/cblas.h
/usr/include/atlas/cblas.h
/usr/include/cblas.h
&lt;/denchmark-code&gt;

Is there then any solution to use OpenCV 3.2 with LAPACK and BLAS in Ubuntu 14.04?
		</comment>
		<comment id='29' author='tofisa' date='2017-06-30T08:41:08Z'>
		&lt;denchmark-link:https://github.com/Santi-7&gt;@Santi-7&lt;/denchmark-link&gt;
 I used openblas, but I can see you have atlas, in the cmake folder within the base there should be FindAtlas.cmake or OpenCVFindAtlas.cmake
Then the same solution should apply as I stated above, but instead of /usr/include/openblas you should use /usr/include/atlas
		</comment>
	</comments>
</bug>