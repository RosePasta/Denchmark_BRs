<bug id='4539' author='opencv-pushbot' open_date='2015-07-27T09:35:24Z' closed_time='2020-02-21T19:56:06Z'>
	<summary>Indices from convexHull not monotonic</summary>
	<description>
Transferred from &lt;denchmark-link:http://code.opencv.org/issues/2922&gt;http://code.opencv.org/issues/2922&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;|| Kirt Lillywhite on 2013-03-26 20:47
|| Priority: Normal
|| Affected: 2.4.4
|| Category: imgproc, video
|| Tracker: Bug
|| Difficulty: None
|| PR: 
|| Platform: None / None
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Indices from convexHull not monotonic&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;From a segmented image I find the contour and then try to find the convexity defects from that contour. The largest convexity defect is wrong. Looking through the opencv code I think the reason is the indices from convexHull are in decreasing order except in one spot. This causes the convexityDefects function to mess up. The attached code shows the problem. I'm using 2.4.4 compiled from source on Archlinux x86-64. During compilation I turned off CUDA and enable QT, everything else is set to the default options.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;History&lt;/denchmark-h&gt;

&lt;denchmark-h:h5&gt;Kirt Lillywhite on 2013-03-26 20:56&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;-   File mask.png added
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='opencv-pushbot' date='2017-07-18T20:02:50Z'>
		I submitted this bug originally 4 years ago. I recently updated opencv and code with a fix to deal with this bug no longer worked. It appears that the bug has been solved in 3.2.0.
		</comment>
		<comment id='2' author='opencv-pushbot' date='2019-01-03T12:43:52Z'>
		Hi! I think the issue still exists (or please clarify if it's not) - I use OpenCV 3.4.1, Python interface.
I guess the main matter is that cv2.convexHull returns the hull points ordered differently than in original contour. After that when distances are computed for defects, some of them pass through too many points (instead of checking in-between hull points only). Not sure in this though. Can anyone help?
My reproducible code sample:
import cv2
import numpy as np
import matplotlib.pyplot as plt

contour = np.array([[[26,  9]],
       [[25, 10]],
       [[24, 10]],
       [[23, 10]],
       [[22, 10]],
       [[21, 10]],
       [[20, 11]],
       [[19, 11]],
       [[18, 11]],
       [[17, 12]],
       [[17, 13]],
       [[18, 14]],
       [[18, 15]],
       [[18, 16]],
       [[18, 17]],
       [[19, 18]],
       [[19, 19]],
       [[20, 20]],
       [[21, 21]],
       [[21, 22]],
       [[22, 23]],
       [[22, 24]],
       [[23, 25]],
       [[23, 26]],
       [[24, 27]],
       [[25, 28]],
       [[26, 29]],
       [[27, 30]],
       [[27, 31]],
       [[28, 32]],
       [[29, 32]],
       [[30, 33]],
       [[31, 34]],
       [[30, 35]],
       [[29, 35]],
       [[30, 35]],
       [[31, 34]],
       [[32, 34]],
       [[33, 34]],
       [[34, 33]],
       [[35, 32]],
       [[35, 31]],
       [[35, 30]],
       [[36, 29]],
       [[37, 28]],
       [[37, 27]],
       [[38, 26]],
       [[39, 25]],
       [[40, 24]],
       [[40, 23]],
       [[41, 22]],
       [[42, 21]],
       [[42, 20]],
       [[42, 19]],
       [[43, 18]],
       [[43, 17]],
       [[44, 16]],
       [[45, 15]],
       [[45, 14]],
       [[46, 13]],
       [[46, 12]],
       [[45, 11]],
       [[44, 11]],
       [[43, 11]],
       [[42, 10]],
       [[41, 10]],
       [[40,  9]],
       [[39,  9]],
       [[38,  9]],
       [[37,  9]],
       [[36,  9]],
       [[35,  9]],
       [[34,  9]],
       [[33,  9]],
       [[32,  9]],
       [[31,  9]],
       [[30,  9]],
       [[29,  9]],
       [[28,  9]],
       [[27,  9]]], dtype=np.int32)
print(contour.shape)

canvas = np.zeros((60, 60), dtype=np.uint8)

# Plot the contour in white
canvas_for_contours = np.copy(canvas)
canvas_for_contours = cv2.cvtColor(canvas_for_contours, cv2.COLOR_GRAY2RGB)
canvas_for_contours = cv2.drawContours(canvas_for_contours, [contour], -1, [255,255,255], -1)
plt.imshow(canvas_for_contours)
plt.show()

# Now find the convex hull
hull_ind = cv2.convexHull(contour, returnPoints=False) # Convex hull points indices in original contour array
hull = cv2.convexHull(contour, returnPoints=True) # Convex hull as contour

# The next lines are possible related to https://github.com/opencv/opencv/issues/4954
# Note that there's no matter if convexHull computed clockwise or counterclock-wise - we still see it has non-monotonous indices
print(cv2.convexHull(contour, returnPoints=False, clockwise=False))
print(cv2.convexHull(contour, returnPoints=False, clockwise=True))

# Plot the convex hull points on the image in semi-transparent blue, points in red
canvas_for_convhull = np.copy(canvas_for_contours)
canvas_for_convhull = cv2.drawContours(canvas_for_convhull, [hull], -1, [0,0,255], 1)
canvas_for_convhull = cv2.addWeighted(canvas_for_contours, 0.5, canvas_for_convhull, 0.5, 0)
canvas_for_convhull = cv2.drawContours(canvas_for_convhull, hull, -1, [255,0,0], 1)
plt.imshow(canvas_for_convhull)
plt.show()

# Now compute convexity defects to see the actual bug
defects = cv2.convexityDefects(contour, hull_ind)
print(defects)

# One of the defects found - which is wrong -  [[  34   33   66 6656]]

canvas_for_defects = np.copy(canvas_for_contours)

# Draw all defects, its start and end points and far points
for i in range(defects.shape[0]):
    s, e, f, d = defects[i, 0]
    start = tuple(contour[s][0])
    end = tuple(contour[e][0])
    far = tuple(contour[f][0])

    canvas_for_defects = cv2.line(canvas_for_defects, start, end, [128, 255, 255, ], 1)  # cyan
    canvas_for_defects = cv2.line(canvas_for_defects, start, far, [255, 150, 255], 1)  # pink
    canvas_for_defects = cv2.line(canvas_for_defects, end, far, [255, 150, 255], 1)  # pink
    canvas_for_defects = cv2.circle(canvas_for_defects, start, 0, [255, 0, 0], 1)  # red
    canvas_for_defects = cv2.circle(canvas_for_defects, end, 0, [255, 0, 0], 1)  # red
    canvas_for_defects = cv2.circle(canvas_for_defects, far, 0, [0, 0, 255], 1)  # blue

plt.imshow(canvas_for_defects)
plt.show()
		</comment>
		<comment id='3' author='opencv-pushbot' date='2019-01-03T22:36:06Z'>
		&lt;denchmark-link:https://github.com/hannarud&gt;@hannarud&lt;/denchmark-link&gt;
 you are right. using your points i created the image and test it with the code below.
&lt;denchmark-link:https://user-images.githubusercontent.com/12151541/50664957-fb40aa00-0fbf-11e9-89c7-5a5d22835e9a.png&gt;&lt;/denchmark-link&gt;

program output:
&lt;denchmark-code&gt;Point indexes of convexHull
944
816
640
608
528
544
368
256
224
160
144
128
80
0
1056 **
976
960

Point indexes of convexityDefects
1008
16
96
176
240
288
512
1056 **
576
672
848
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/12151541/50665008-2aefb200-0fc0-11e9-9945-6a7a285f856c.png&gt;&lt;/denchmark-link&gt;

code:
&lt;denchmark-code&gt;#include &lt;opencv2/imgproc.hpp&gt;
#include &lt;opencv2/highgui.hpp&gt;
#include &lt;iostream&gt;

using namespace cv;
using namespace std;

int main(int argc, char** argv)
{
    Mat bw, img = imread("test.png");
    cvtColor(img, bw, COLOR_BGR2GRAY);
    imshow("source", img);

    vector&lt;vector&lt;Point&gt; &gt; contours;

    findContours(bw, contours, RETR_LIST, CHAIN_APPROX_NONE);

    drawContours(img, contours, 0, Scalar(0, 0, 255), 2);

    vector&lt;int&gt; hull;
    convexHull(contours[0], hull);

    vector&lt;Point&gt; hullpts;
    cout &lt;&lt; "\nPoint indexes of convexHull\n";
    for (const auto &amp;e : hull)
    {
        hullpts.push_back(contours[0][e]);
        line(img, contours[0][e], contours[0][e], Scalar(0, 255, 0), 5);
        cout &lt;&lt; e &lt;&lt; endl;
    }
    cv::polylines(img, hullpts, true, Scalar(0, 255, 0), 1);

    vector&lt;Vec4i&gt; defects;
    convexityDefects(contours[0], hull, defects);
    cout &lt;&lt; "\nPoint indexes of convexityDefects\n";
    for (const auto &amp;e : defects)
    {
        line(img, contours[0][e[2]], contours[0][e[2]], Scalar(255, 0, 0), 5);
        cout &lt;&lt; e[2] &lt;&lt; endl;
    }

    imshow("result", img);
    waitKey();
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='opencv-pushbot' date='2019-10-01T01:13:12Z'>
		&lt;denchmark-link:https://github.com/sturkmen72&gt;@sturkmen72&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/hannarud&gt;@hannarud&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/kfrance&gt;@kfrance&lt;/denchmark-link&gt;
 .... the doc for convexHull says that it's an implementation of the algorithm in:
Jack Sklansky. Finding the convex hull of a simple polygon. Pattern Recognition Letters, 1(2):79â€“83, 1982.
Wasn't this algorithm proven wrong? It's been shown to fail in some cases.
BTW, I haven't reviewed the convexHull implementation to see if it is a correct implementation of Sklansky 1982. I'm just speculating that the test cases above are the kinds of polygons that cause Sklansky 1982 to fail, and that this failure is manifesting as the indices returning in the wrong order.
Some interesting readings here: &lt;denchmark-link:http://cgm.cs.mcgill.ca/~athens/cs601/&gt;http://cgm.cs.mcgill.ca/~athens/cs601/&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='opencv-pushbot' date='2019-10-01T01:31:36Z'>
		&lt;denchmark-link:https://github.com/saskatchewancatch&gt;@saskatchewancatch&lt;/denchmark-link&gt;
 thanks for noticing it.
Actually I never checked if algorithm on which the functions are made is correct. But it looked to me that points returned by convexHull in my case were correct, what was incorrect is order of defect points. So I think, this issue still exists no matter Sklansky, 1982 algorithm is correct or not.
But you might file a new issue on what you just wrote
		</comment>
		<comment id='6' author='opencv-pushbot' date='2020-01-08T04:12:35Z'>
		What I think: convexHull implementation is fine, and it's fine for returned indices to not be monotonic.
Why:

For a convex hull, the indices returned do not necessarily have to be in order.

Consider a square with points: (0, 0)@(index 0), (0, 1)@(index 1), (1, 0)@(index 2), (1, 1)@(index 3).
Shuffle these points in a std::vector and pass it to convexHull. The returned indices will not necessarily be monotonic.

In one case, I get 0, 1, 3, 2 back from convexHull, which is not monotonic, but it's still correct.





IMO the inquiry should be into convexityDefects, which should be able to handle the set of inputs it was given in the OP's example above. I think the problem lies entirely in convexityDefects.
&lt;denchmark-link:https://github.com/hannarud&gt;@hannarud&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/sturkmen72&gt;@sturkmen72&lt;/denchmark-link&gt;
  any thoughts? BTW I may be totally off, my tech. background is not Comp. Geometry .
		</comment>
		<comment id='7' author='opencv-pushbot' date='2020-01-08T09:03:12Z'>
		Hi &lt;denchmark-link:https://github.com/saskatchewancatch&gt;@saskatchewancatch&lt;/denchmark-link&gt;
!
You think it right. It is ok for indices to not be monotonic.
But - that's what I point out in my example - this is ok until the points which are marked by the indices really make some convex figure in the end. If you refer back to my code sample when we get the convex hull points they seem to be totally correct:
((46 13), (42 21), (35 32), (33 34), (30 35), (29 35), (23 26), (19 19), (18 17), (17 13), (17 12), (18 11), (21 10), (26  9), (40  9), (45 11), (46 12))
And they really make convex from when plotted.
If we obtain indices from the same function, we get:
(59, 51, 40, 38, 33, 34, 23, 16, 14, 10,  9,  8,  5,  0, 66, 61, 60) (note: 38-33-34! non-monotonous part)
In the original contour, two points have the same value, number 33 and number 35. And instead of 33 in the indices, we should have 35.
&lt;denchmark-code&gt;37 [[32 34]]
36 [[31 34]]
35 [[30 35]] ** - is not present in the output, but should be!
34 [[29 35]] - point of convex hull
33 [[30 35]] ** - outputted as a convex hull point, but this is wrong
32 [[31 34]]
31 [[30 33]]
30 [[29 32]]
29 [[28 32]]
28 [[27 31]]
27 [[27 30]]
26 [[26 29]]
25 [[25 28]]
24 [[24 27]]
23 [[23 26]] - point of convex hull```

Did you get what I mean here?
&lt;/denchmark-code&gt;

		</comment>
		<comment id='8' author='opencv-pushbot' date='2020-01-22T05:30:58Z'>
		&lt;denchmark-link:https://github.com/hannarud&gt;@hannarud&lt;/denchmark-link&gt;
 hannahrud, thank you for your detailed reply.
I get what you mean. But I seem to think that it's fine that convexHull returned the point with index 33 instead of the same point with index 35. The output of the algorithm is supposed to be a convex set.
Whether convexHull returns the point at index 33 or 35, it would be a convex set, and the answer is just as valid.
Any thoughts? Btw thank you for your analysis so far, I think this info will be helpful for whoever is doing the hackathon.
		</comment>
		<comment id='9' author='opencv-pushbot' date='2020-02-03T11:20:53Z'>
		&lt;denchmark-link:https://github.com/saskatchewancatch&gt;@saskatchewancatch&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/hannarud&gt;@hannarud&lt;/denchmark-link&gt;
 thank you for the detailed investigation of the problem. I wrote a small to-do list for Hackathon based on your conversation:

 Add a test for convexityDefects that reproduce the problem with wrong order of input points. Test data can be generated using examples kindly provided by @hannarud. General idea is to have 2 or more equal points in the original contour. The test should fail.
 Adjust convexityDefects function to work with such kind of convexHull output.
 Check that the problem is resolved and the failed test is passed.
 Publish a PR.

You are welcome to resolve this issue if you can.
		</comment>
		<comment id='10' author='opencv-pushbot' date='2020-02-16T00:47:56Z'>
		&lt;denchmark-link:https://github.com/kfrance&gt;@kfrance&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/hannarud&gt;@hannarud&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/sturkmen72&gt;@sturkmen72&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/saskatchewancatch&gt;@saskatchewancatch&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/VadimLevin&gt;@VadimLevin&lt;/denchmark-link&gt;
, the issue is mostly fixed. Without that 1 pixel-wide "hair" on the contour, which can be made more thick or completely eliminated using morphological operations, everything now works well. With this "hair" an exception is now thrown by convexityDefects.  For now I do not have a good solution to produce a good convex hull for such a contour. It's not a problem of Sklansky algorithm, I believe, it's that this particular case can be considered as a contour with self-intersection. A contour with self-intersection is basically not a contour, it's rather a generic point set, and for such a set it's impossible to generate a completely ordered convex hull. But at least such case is now caught by convexityDetects instead of silently producing incorrect results.
		</comment>
		<comment id='11' author='opencv-pushbot' date='2020-02-16T23:52:58Z'>
		BTW, it's said in several places that Sklansky algorithm is incorrect. This is true, but only when we are talking about O(N) Sklansky algorithm that computes convex hulls for polygons. OpenCV does not have a function to compute convex hull for polygons. It computes convex hull for unordered 2D point sets. The complexity is O(N*log(N)), not O(N). And the Sklansky algorithm in OpenCV iterates though the points in a certain sorted order, not in the original order. So, the counter-examples, developed by Toussaint et al, are not applicable to our implementation. I cannot claim, of course, that our implementation is completely bug-free. I'm just saying that OpenCV implementation does not have the same problem as the original Skansky'82 O(N) algorithm.
		</comment>
	</comments>
</bug>