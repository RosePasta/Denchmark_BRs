<bug id='15452' author='cuixing158' open_date='2019-06-14T07:06:05Z' closed_time='2020-04-19T18:21:11Z'>
	<summary>net can't forward again?</summary>
	<description>
my envs: openVINO2019.1.148+win10+VS2015
When I use bvlc_googlenet.xml and the bvlc_googlenet.bin model to extract image features, the network model can only successfully forward only one time. When the second time loop, images length is not the same with the first time,it will go wrong. Why,any idea ? thank you!
OpenCV: terminate handler is called! The last OpenCV error is:
OpenCV(4.1.0-openvino) Error: Assertion failed (!isInitialized()) in cv::dnn::InfEngineBackendNet::initPlugin, file C:\jenkins\workspace\OpenCV\OpenVINO\build\opencv\modules\dnn\src\op_inf_engine.cpp, line 688
The main code that caused the error is：
&lt;denchmark-code&gt;Net net = readNetFromModelOptimizer(xmlFile,model);// 此模式下必须设置为DNN_BACKEND_INFERENCE_ENGINE
	if (net.empty())
	{
		cout &lt;&lt; "net is empty!" &lt;&lt; endl;
	}
	net.setPreferableBackend(DNN_BACKEND_INFERENCE_ENGINE);
	net.setPreferableTarget(DNN_TARGET_CPU);

	int net_size = 224;
	images.clear();
	images.push_back(img);

	while (true)
	{
		Mat blob;
		blobFromImages(images, blob, 1.0, Size(net_size, net_size), Scalar(104, 117, 123), false);
		net.setInput(blob);
		Mat prob = net.forward("pool5/7x7_s1"); // second time, error! (when images length is not the same with the first time)
            images.push_back(img); // for example , add image to images
      }
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/22857777/59490596-b21e4b80-8eb7-11e9-9a6e-9f68f6465bca.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='cuixing158' date='2019-09-04T16:00:49Z'>
		I have reproduced this. It looks like this is a bug in OpenCV: changing the shape of the input blob causes it to reinitialize the backend, which it fails to do. I am thus going to transfer this issue to the OpenCV repository.
		</comment>
		<comment id='2' author='cuixing158' date='2019-12-03T14:24:47Z'>
		Any solution for this?
The same problem with different input size.
After network creation all works good, but only with one input size.
If you need another input size (change in batch numbers, or in image size) - need to recreate networ
		</comment>
		<comment id='3' author='cuixing158' date='2020-04-15T21:28:29Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
  sorry for the mentions, I too have this issue when running inference a second time with a different input shape. I was able to confirm it works with cpu backend, gpu cuda backend but not with cpu OpenVino. Network is a basic Unet.
Reproduced with latest OpenCV but OpenVino 2019.R3

OpenCV(4.3.0-dev) Error: Assertion failed (!isInitialized()) in cv::dnn::InfEngineBackendNet::initPlugin, file D:\Dev\opencv\modules\dnn\src\op_inf_engine.cpp, line 742

With Cuda backend I get this warning

[ INFO:0] global D:\Dev\opencv\modules\dnn\src\dnn.cpp (2353) cv::dnn::dnn4_v20200310::Net::Impl::initCUDABackend CUDA backend will fallback to the CPU implementation for the layer "_input" of type NetInputLayer

		</comment>
		<comment id='4' author='cuixing158' date='2020-04-16T07:31:22Z'>
		&lt;denchmark-link:https://github.com/JulienMaille&gt;@JulienMaille&lt;/denchmark-link&gt;
, please upload the model so we can reproduce it.
		</comment>
		<comment id='5' author='cuixing158' date='2020-04-16T10:30:22Z'>
		Ok, can I send it on a private email? Although I don't think it is specific to any model but rather to the way IE is reinited.
I traced the assert to netWasAllocated being set to false when input size is changed.



opencv/modules/dnn/src/dnn.cpp


         Line 3967
      in
      b8579f1






 impl-&gt;netWasAllocated = impl-&gt;netWasAllocated &amp;&amp; oldShape; 




 Then when calling Net::forward, which calls Net::impl::setUpNet() we end up in



opencv/modules/dnn/src/dnn.cpp


         Line 1452
      in
      b8579f1






 initBackend(blobsToKeep_); 







opencv/modules/dnn/src/dnn.cpp


         Line 1601
      in
      b8579f1






 initInfEngineBackend(blobsToKeep_); 







opencv/modules/dnn/src/dnn.cpp


         Line 1793
      in
      b8579f1






 ieNode-&gt;net-&gt;init((Target)preferableTarget); 




 then in InfEngineBackendNet::init()



opencv/modules/dnn/src/op_inf_engine.cpp


         Line 422
      in
      ca23c0e






 initPlugin(cnn); 




 and this assert will fail



opencv/modules/dnn/src/op_inf_engine.cpp


        Lines 740 to 742
      in
      ca23c0e






 void InfEngineBackendNet::initPlugin(InferenceEngine::CNNNetwork&amp; net) 



 { 



 CV_Assert(!isInitialized()); 





		</comment>
		<comment id='6' author='cuixing158' date='2020-04-16T11:14:13Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
  note that when  is True  is called unconditionally

 while there's a test otherwise


		</comment>
		<comment id='7' author='cuixing158' date='2020-04-16T12:05:43Z'>
		Sure, please find in in the profile
		</comment>
		<comment id='8' author='cuixing158' date='2020-04-17T09:25:05Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 email sent, let me know if there's any approaches I could try by myself.
		</comment>
		<comment id='9' author='cuixing158' date='2020-04-18T16:47:01Z'>
		Thanks everyone! Please try this patch: &lt;denchmark-link:https://github.com/opencv/opencv/pull/17102&gt;#17102&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='cuixing158' date='2020-04-18T18:28:39Z'>
		Hmm I've cherry-picked your commit on top of origin/master and it's still crashing in the assert.



opencv/modules/dnn/src/op_inf_engine.cpp


        Lines 740 to 742
      in
      ca23c0e






 void InfEngineBackendNet::initPlugin(InferenceEngine::CNNNetwork&amp; net) 



 { 



 CV_Assert(!isInitialized()); 




 Are you sure that the ieNode-&gt;net-&gt;init((Target)preferableTarget); call shouldn't be skipped in addition to your patch?
		</comment>
		<comment id='11' author='cuixing158' date='2020-04-18T19:12:20Z'>
		&lt;denchmark-link:https://github.com/JulienMaille&gt;@JulienMaille&lt;/denchmark-link&gt;
, can you please show a code example? I've tried the following one:
#include &lt;iostream&gt;
#include &lt;opencv2/opencv.hpp&gt;

using namespace cv;
using namespace cv::dnn;

Mat runWithReshape(const Mat&amp; inp) {
  Net net = readNet("model.xml", "model.bin");

  Mat inp0(256, 256, CV_32FC1);
  randu(inp0, -1, 1);
  inp0 = blobFromImage(inp0);
  net.setInput(inp0);
  Mat out0 = net.forward();

  net.setInput(inp);
  return net.forward();
}

Mat runWithFixedShape(const Mat&amp; inp) {
  Net net = readNet("model.xml", "model.bin");
  net.setInput(inp);
  return net.forward();
}


int main(int argc, char** argv) {
  Mat inp(312, 312, CV_32FC1);
  inp = blobFromImage(inp);
  Mat ref = runWithFixedShape(inp);
  Mat out = runWithReshape(inp);
  std::cout &lt;&lt; norm(ref, out, NORM_INF) &lt;&lt; std::endl;
  return 0;
}

		</comment>
		<comment id='12' author='cuixing158' date='2020-04-18T19:26:38Z'>
		I'll try to reproduce with your code, but do you agree that our crash has to do with an assert checking we don't call ieNode-&gt;net-&gt;init() twice? And you patch doesn't change this, correct?
		</comment>
		<comment id='13' author='cuixing158' date='2020-04-18T19:30:13Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 I suppose you tried in nGraph mode? Can you check without ?
		</comment>
		<comment id='14' author='cuixing158' date='2020-04-18T20:38:30Z'>
		&lt;denchmark-link:https://github.com/JulienMaille&gt;@JulienMaille&lt;/denchmark-link&gt;
, tried with both nGraph and NNBuilder modes.
Can you please verify that you tested the lates state of the PR? I updated it with symmetric NNBuilder path code. For now they are both aligned for IR models:
old API:



opencv/modules/dnn/src/dnn.cpp


        Lines 1792 to 1794
      in
      b8579f1






 layers[lastLayerId].skip = false; 



 ieNode-&gt;net-&gt;init((Target)preferableTarget); 



 return; 





nGraph API:



opencv/modules/dnn/src/dnn.cpp


        Lines 2085 to 2087
      in
      b8579f1






 layers[lastLayerId].skip = false; 



 ieNode-&gt;net-&gt;init((Target)preferableTarget); 



 return; 





After every input dimensions change we have to call  once again because Inferece Engine backend requires reloading of the network to device: &lt;denchmark-link:https://docs.openvinotoolkit.org/latest/_docs_IE_DG_ShapeInference.html&gt;https://docs.openvinotoolkit.org/latest/_docs_IE_DG_ShapeInference.html&lt;/denchmark-link&gt;
.  first but then  again to get  instance.
		</comment>
		<comment id='15' author='cuixing158' date='2020-04-19T16:41:53Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 This also works fine on my setup. I tried to understand why my code still fails the assert. And after recompiling opencv the failing assert was gone. I must have messed up somewhere. I still don't understand why your patch fixed the assert that I had (and that the OP had too).
Anyway, thanks for that quick patch!
In term of performances, on a gpu, will the openCL code be generated every-time the input size changes?
		</comment>
		<comment id='16' author='cuixing158' date='2020-04-19T18:02:12Z'>
		Thanks! For OpenCL I highly recommend to take look at cl-cache feature - it not just only about deep learning but general the best known method working to avoid resundant OpenCL kernels recompilation.
see &lt;denchmark-link:https://github.com/intel/compute-runtime/blob/19.23.13131/documentation/FAQ.md#feature-cl_cache&gt;https://github.com/intel/compute-runtime/blob/19.23.13131/documentation/FAQ.md#feature-cl_cache&lt;/denchmark-link&gt;

		</comment>
		<comment id='17' author='cuixing158' date='2020-04-19T18:23:39Z'>
		Is it available out of the box with OpenCV? I just create an cl_cache folder next to my executable and I'm good?
		</comment>
		<comment id='18' author='cuixing158' date='2020-04-19T18:29:13Z'>
		&lt;denchmark-link:https://github.com/JulienMaille&gt;@JulienMaille&lt;/denchmark-link&gt;
, it's not only about OpenCV or OpenVINO - it's about OpenCL and supported at the driver. You need to create a folder and setup an environment variable  with an absolute path to it - then after first run it will contain OpenCL cache.
		</comment>
		<comment id='19' author='cuixing158' date='2020-04-19T18:35:20Z'>
		
D:\Dev

cl_cache_dir environment doesn't work on Windows.
cl_cache directory in current working directory (CWD) should work well.
Create directory and run your app - check directory contents (it works if you can see new files there)
		</comment>
		<comment id='20' author='cuixing158' date='2020-04-19T19:11:25Z'>
		What if my app is in /program files (x86)/ ie. with limited write permissions?
		</comment>
		<comment id='21' author='cuixing158' date='2020-04-19T19:15:42Z'>
		You need to configure Windows registry - refer to mentioned document from OpenCL repository.
		</comment>
		<comment id='22' author='cuixing158' date='2020-04-19T20:33:31Z'>
		I tried the cl_cache directory trick in a folder where I have write persmissions but cl_cache stays empty. Do I need to compile OpenCV with a specific intel compiler for this to work?
		</comment>
		<comment id='23' author='cuixing158' date='2020-04-21T19:47:02Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 sorry for this out-of-topic question, but can you confirm if cl_cache requires anything special?
		</comment>
		<comment id='24' author='cuixing158' date='2020-04-22T06:03:32Z'>
		&lt;denchmark-link:https://github.com/JulienMaille&gt;@JulienMaille&lt;/denchmark-link&gt;
 , &lt;denchmark-link:https://github.com/intel/compute-runtime/blob/19.23.13131/documentation/FAQ.md#windows-configuration&gt;https://github.com/intel/compute-runtime/blob/19.23.13131/documentation/FAQ.md#windows-configuration&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>