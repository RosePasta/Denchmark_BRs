<bug id='15056' author='moberweger' open_date='2019-07-16T10:27:38Z' closed_time='2019-07-18T11:06:15Z'>
	<summary>opencv dnn crash when loading tensorflow model with split layer</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV == 4.1.0
python == 2.7.12
Operating System / Platform == Ubuntu 16.04 x86_64
compiler == gcc 7.4.0
tensorflow == 1.14.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Loading a specific configuration of a model from tensorflow to be run in OpenCV triggers an error when running cv2.dnn.readNetFromTensorflow. The cause of the error is related to splitting a tensor. As an example, I have attached a file that can trigger the error for a simple model. The model splits the last channel of the a tensor and outputs both splits.
The code raises the following error:
terminate called after throwing an instance of 'std::bad_alloc'
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

The following python script can be used to trigger the error. Therefore, simply change the flag for the if.
import numpy
import cv2
import tensorflow as tf
from tensorflow.tools.graph_transforms import TransformGraph

if __name__ == '__main__':
    batch_size = 4
    input_shape = [batch_size, 32, 32, 1]
    features = tf.placeholder(tf.float32, input_shape, name='input')

    features0 = tf.layers.conv2d(inputs=features, filters=8, kernel_size=[3, 3], padding='same')
    # CHANGE THIS TO True to TRIGGER CRASH
    if True:
        features1 = tf.split(features0, num_or_size_splits=2, axis=3)[0]
        features2 = tf.split(features0, num_or_size_splits=2, axis=3)[1]
    else:
        features1, features2 = tf.split(features0, num_or_size_splits=2, axis=3)

    in1 = tf.layers.conv2d(inputs=features1, filters=8, kernel_size=[3, 3], strides=(2, 2), padding='same')
    in2 = tf.layers.conv2d(inputs=features2, filters=8, kernel_size=[3, 3], strides=(2, 2), padding='same')

    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
        constant_graph = tf.graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(),
                                                                      ['conv2d_1/BiasAdd', 'conv2d_2/BiasAdd'])
        tf.train.write_graph(constant_graph, "", "graph_final.pb", as_text=False)

    # export
    with tf.gfile.FastGFile("graph_final.pb") as f:
        graph_def = tf.GraphDef()
        graph_def.ParseFromString(f.read())
        graph_def = TransformGraph(graph_def, ['input'], ['conv2d_1/BiasAdd', 'conv2d_2/BiasAdd'],
                                   ['strip_unused_nodes'])
        with tf.gfile.FastGFile('saved_model.pb', 'wb') as f:
            f.write(graph_def.SerializeToString())

    # read model
    cvNet = cv2.dnn.readNetFromTensorflow('./saved_model.pb')
    img = numpy.zeros((32, 32, 1), dtype='uint8')
    cvNet.setInput(cv2.dnn.blobFromImage(img, size=(32, 32), swapRB=False, crop=False).repeat(batch_size, axis=0))
    cvOut = cvNet.forward()
    print len(cvOut)
	</description>
	<comments>
		<comment id='1' author='moberweger' date='2019-07-17T10:31:52Z'>
		In first case, tf.GraphDef look like this:
&lt;denchmark-code&gt;name: "input"
op: "Placeholder"
attr {
  key: "dtype"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "shape"
  value {
    shape {
      dim {
        size: 4
      }
      dim {
        size: 32
      }
      dim {
        size: 32
      }
      dim {
        size: 1
      }
    }
  }
}

name: "conv2d/kernel/read"
op: "Identity"
input: "conv2d/kernel"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "_class"
  value {
    list {
      s: "loc:@conv2d/kernel"
    }
  }
}

name: "conv2d/bias/read"
op: "Identity"
input: "conv2d/bias"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "_class"
  value {
    list {
      s: "loc:@conv2d/bias"
    }
  }
}

name: "conv2d/Conv2D"
op: "Conv2D"
input: "input"
input: "conv2d/kernel/read"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "data_format"
  value {
    s: "NHWC"
  }
}
attr {
  key: "dilations"
  value {
    list {
      i: 1
      i: 1
      i: 1
      i: 1
    }
  }
}
attr {
  key: "padding"
  value {
    s: "SAME"
  }
}
attr {
  key: "strides"
  value {
    list {
      i: 1
      i: 1
      i: 1
      i: 1
    }
  }
}
attr {
  key: "use_cudnn_on_gpu"
  value {
    b: true
  }
}

name: "conv2d/BiasAdd"
op: "BiasAdd"
input: "conv2d/Conv2D"
input: "conv2d/bias/read"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "data_format"
  value {
    s: "NHWC"
  }
}

name: "split"
op: "Split"
input: "split/split_dim"
input: "conv2d/BiasAdd"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "num_split"
  value {
    i: 2
  }
}

name: "split_1"
op: "Split"
input: "split_1/split_dim"
input: "conv2d/BiasAdd"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "num_split"
  value {
    i: 2
  }
}

name: "conv2d_1/kernel/read"
op: "Identity"
input: "conv2d_1/kernel"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "_class"
  value {
    list {
      s: "loc:@conv2d_1/kernel"
    }
  }
}

name: "conv2d_1/bias/read"
op: "Identity"
input: "conv2d_1/bias"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "_class"
  value {
    list {
      s: "loc:@conv2d_1/bias"
    }
  }
}

name: "conv2d_1/Conv2D"
op: "Conv2D"
input: "split"
input: "conv2d_1/kernel/read"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "data_format"
  value {
    s: "NHWC"
  }
}
attr {
  key: "dilations"
  value {
    list {
      i: 1
      i: 1
      i: 1
      i: 1
    }
  }
}
attr {
  key: "padding"
  value {
    s: "SAME"
  }
}
attr {
  key: "strides"
  value {
    list {
      i: 1
      i: 2
      i: 2
      i: 1
    }
  }
}
attr {
  key: "use_cudnn_on_gpu"
  value {
    b: true
  }
}

name: "conv2d_1/BiasAdd"
op: "BiasAdd"
input: "conv2d_1/Conv2D"
input: "conv2d_1/bias/read"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "data_format"
  value {
    s: "NHWC"
  }
}

name: "conv2d_2/kernel/read"
op: "Identity"
input: "conv2d_2/kernel"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "_class"
  value {
    list {
      s: "loc:@conv2d_2/kernel"
    }
  }
}

name: "conv2d_2/bias/read"
op: "Identity"
input: "conv2d_2/bias"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "_class"
  value {
    list {
      s: "loc:@conv2d_2/bias"
    }
  }
}

name: "conv2d_2/Conv2D"
op: "Conv2D"
input: "split_1:1"
input: "conv2d_2/kernel/read"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "data_format"
  value {
    s: "NHWC"
  }
}
attr {
  key: "dilations"
  value {
    list {
      i: 1
      i: 1
      i: 1
      i: 1
    }
  }
}
attr {
  key: "padding"
  value {
    s: "SAME"
  }
}
attr {
  key: "strides"
  value {
    list {
      i: 1
      i: 2
      i: 2
      i: 1
    }
  }
}
attr {
  key: "use_cudnn_on_gpu"
  value {
    b: true
  }
}

name: "conv2d_2/BiasAdd"
op: "BiasAdd"
input: "conv2d_2/Conv2D"
input: "conv2d_2/bias/read"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "data_format"
  value {
    s: "NHWC"
  }
}
&lt;/denchmark-code&gt;

In second case, tf.GraphDef look like this:
&lt;denchmark-code&gt;name: "input"
op: "Placeholder"
attr {
  key: "dtype"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "shape"
  value {
    shape {
      dim {
        size: 1
      }
      dim {
        size: 32
      }
      dim {
        size: 32
      }
      dim {
        size: 1
      }
    }
  }
}

name: "conv2d/kernel/read"
op: "Identity"
input: "conv2d/kernel"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "_class"
  value {
    list {
      s: "loc:@conv2d/kernel"
    }
  }
}

name: "conv2d/bias/read"
op: "Identity"
input: "conv2d/bias"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "_class"
  value {
    list {
      s: "loc:@conv2d/bias"
    }
  }
}

name: "conv2d/Conv2D"
op: "Conv2D"
input: "input"
input: "conv2d/kernel/read"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "data_format"
  value {
    s: "NHWC"
  }
}
attr {
  key: "dilations"
  value {
    list {
      i: 1
      i: 1
      i: 1
      i: 1
    }
  }
}
attr {
  key: "padding"
  value {
    s: "SAME"
  }
}
attr {
  key: "strides"
  value {
    list {
      i: 1
      i: 1
      i: 1
      i: 1
    }
  }
}
attr {
  key: "use_cudnn_on_gpu"
  value {
    b: true
  }
}

name: "conv2d/BiasAdd"
op: "BiasAdd"
input: "conv2d/Conv2D"
input: "conv2d/bias/read"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "data_format"
  value {
    s: "NHWC"
  }
}

name: "split"
op: "Split"
input: "split/split_dim"
input: "conv2d/BiasAdd"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "num_split"
  value {
    i: 2
  }
}

name: "conv2d_1/kernel/read"
op: "Identity"
input: "conv2d_1/kernel"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "_class"
  value {
    list {
      s: "loc:@conv2d_1/kernel"
    }
  }
}

name: "conv2d_1/bias/read"
op: "Identity"
input: "conv2d_1/bias"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "_class"
  value {
    list {
      s: "loc:@conv2d_1/bias"
    }
  }
}

name: "conv2d_1/Conv2D"
op: "Conv2D"
input: "split"
input: "conv2d_1/kernel/read"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "data_format"
  value {
    s: "NHWC"
  }
}
attr {
  key: "dilations"
  value {
    list {
      i: 1
      i: 1
      i: 1
      i: 1
    }
  }
}
attr {
  key: "padding"
  value {
    s: "SAME"
  }
}
attr {
  key: "strides"
  value {
    list {
      i: 1
      i: 2
      i: 2
      i: 1
    }
  }
}
attr {
  key: "use_cudnn_on_gpu"
  value {
    b: true
  }
}

name: "conv2d_1/BiasAdd"
op: "BiasAdd"
input: "conv2d_1/Conv2D"
input: "conv2d_1/bias/read"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "data_format"
  value {
    s: "NHWC"
  }
}

name: "conv2d_2/kernel/read"
op: "Identity"
input: "conv2d_2/kernel"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "_class"
  value {
    list {
      s: "loc:@conv2d_2/kernel"
    }
  }
}

name: "conv2d_2/bias/read"
op: "Identity"
input: "conv2d_2/bias"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "_class"
  value {
    list {
      s: "loc:@conv2d_2/bias"
    }
  }
}

name: "conv2d_2/Conv2D"
op: "Conv2D"
input: "split:1"
input: "conv2d_2/kernel/read"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "data_format"
  value {
    s: "NHWC"
  }
}
attr {
  key: "dilations"
  value {
    list {
      i: 1
      i: 1
      i: 1
      i: 1
    }
  }
}
attr {
  key: "padding"
  value {
    s: "SAME"
  }
}
attr {
  key: "strides"
  value {
    list {
      i: 1
      i: 2
      i: 2
      i: 1
    }
  }
}
attr {
  key: "use_cudnn_on_gpu"
  value {
    b: true
  }
}

name: "conv2d_2/BiasAdd"
op: "BiasAdd"
input: "conv2d_2/Conv2D"
input: "conv2d_2/bias/read"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "data_format"
  value {
    s: "NHWC"
  }
}
&lt;/denchmark-code&gt;

In the first and in the second case were generated a variety of graphs.
		</comment>
		<comment id='2' author='moberweger' date='2019-07-17T15:08:25Z'>
		&lt;denchmark-link:https://github.com/moberweger&gt;@moberweger&lt;/denchmark-link&gt;
, thanks for the report! Please check these changes: &lt;denchmark-link:https://github.com/opencv/opencv/pull/15071&gt;#15071&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='3' author='moberweger' date='2019-07-18T11:06:14Z'>
		Closing this issue. I confirm that it works now with &lt;denchmark-link:https://github.com/opencv/opencv/commit/c12e26ff28b63559a5c529e2b35b33f2e44399e1&gt;c12e26f&lt;/denchmark-link&gt;
 ! Thanks &lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/l-bat&gt;@l-bat&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>