<bug id='12320' author='dimitrijer' open_date='2018-08-27T14:40:01Z' closed_time='2019-02-14T09:59:38Z'>
	<summary>cv::cuda::integral hangs on Titan V</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4.1, 3.4.2
Operating System / Platform =&gt; Linux (Ubuntu) 64 Bit
Compiler =&gt; gcc 5.4.0
CUDA =&gt; 9.0 (CUFFT, CUBLAS)
GPU =&gt; 2 x TITAN V 12064Mb, sm_70, Driver/Runtime ver.9.20/9.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

When I run example_gpu_surf_keypoint_matcher example after building OpenCV (+ contrib modules) from source, the process hangs after invoking cv::cuda::integral. Here's stacktrace from gdb:
&lt;denchmark-code&gt;(gdb) r  --left /data/c2c_30fps/c2c000.jpg --right /data/c2c_30fps/c2c001.jpg
Starting program: /home/dimitrijer/git/opencv/build/bin/example_gpu_surf_keypoint_matcher --left /data/c2c_30fps/c2c000.jpg --right /data/c2c_30fps/c2c001.jpg
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
[New Thread 0x7fffc8a02700 (LWP 3991)]
[New Thread 0x7fffc8201700 (LWP 3992)]
[New Thread 0x7fffc78fe700 (LWP 3993)]
Device 0:  "TITAN V"  12064Mb, sm_70, Driver/Runtime ver.9.20/9.0
^C
Thread 1 "example_gpu_sur" received signal SIGINT, Interrupt.
0x00007ffff7ffab6d in clock_gettime ()
(gdb) bt
#0  0x00007ffff7ffab6d in clock_gettime ()
#1  0x00007ffff4c15876 in __GI___clock_gettime (clock_id=4, tp=0x7fffffffd0f0) at ../sysdeps/unix/clock_gettime.c:115
#2  0x00007fffcee4db1e in ?? () from /usr/lib/x86_64-linux-gnu/libcuda.so.1
#3  0x00007fffceee2b93 in ?? () from /usr/lib/x86_64-linux-gnu/libcuda.so.1
#4  0x00007fffcee0014c in ?? () from /usr/lib/x86_64-linux-gnu/libcuda.so.1
#5  0x00007fffcee002c1 in ?? () from /usr/lib/x86_64-linux-gnu/libcuda.so.1
#6  0x00007fffced3c52a in ?? () from /usr/lib/x86_64-linux-gnu/libcuda.so.1
#7  0x00007fffcee781f8 in cuCtxSynchronize () from /usr/lib/x86_64-linux-gnu/libcuda.so.1
#8  0x00007fffef613c19 in ?? () from /usr/local/cuda/lib64/libcudart.so.9.0
#9  0x00007fffef639f5c in cudaDeviceSynchronize () from /usr/local/cuda/lib64/libcudart.so.9.0
#10 0x00007fffed590eb5 in cv::cuda::integral(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, cv::cuda::Stream&amp;) () from /home/dimitrijer/git/opencv/build/lib/libopencv_cudaarithm.so.3.4
#11 0x00007ffff72651fb in cv::cuda::SURF_CUDA::operator()(cv::cuda::GpuMat const&amp;, cv::cuda::GpuMat const&amp;, cv::cuda::GpuMat&amp;, cv::cuda::GpuMat&amp;, bool) () from /home/dimitrijer/git/opencv/build/lib/libopencv_xfeatures2d.so.3.4
#12 0x0000000000401d70 in main ()
&lt;/denchmark-code&gt;

My cmake build command (OpenCV correctly detects compute capability of 7.0, so removing the last line does not help):
&lt;denchmark-code&gt;cmake \
    -DCMAKE_BUILD_TYPE=RELEASE \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DINSTALL_C_EXAMPLES=OFF \
    -DINSTALL_PYTHON_EXAMPLES=OFF \
    -DBUILD_DOCS=OFF \
    -DBUILD_PERF_TESTS=OFF \
    -DBULD_TESTS=OFF \
    -DOPENCV_EXTRA_MODULES_PATH=/home/dimitrijer/git/opencv_contrib/modules \
    -DBUILD_EXAMPLES=ON \
    -DBUILD_NEW_PYTHON_SUPPORT=ON \
    -DBUILD_opencv_python3=ON \
    -DHAVE_opencv_python3=ON \
    -DPYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3 \
    -DBUILD_PERF_TESTS=OFF \
    -DBUILD_TESTS=OFF \
    -DWITH_FFMPEG=ON \
    -DWITH_TBB=ON \
    -DWITH_V4L=ON \
    -DWITH_OPENGL=ON \
    -DWITH_CUBLAS=ON \
    -DWITH_QT=OFF \
    -DWITH_OPENCL=ON \
    -DWITH_CSTRIPES=ON \
    -DWITH_CUDA=ON \
    -DWITH_NVCUVID=ON \
    -DWITH_TBB=ON \
    -DWITH_OPENMP=ON \
    -DWITH_IPP=ON \
    -DWITH_TESSERACT=OFF \
    -DBUILD_opencv_text=OFF \
    -DENABLE_PRECOMPILED_HEADERS=OFF \
    -DCUDA_GENERATION="Volta" -DCUDA_ARCH_BIN="7.0" -DCUDA_ARCH_PTX="7.0" \
    ..
&lt;/denchmark-code&gt;

strace reports process continuously invoking clock_gettime(CLOCK_MONOTONIC_RAW, {10774, 196212934}) = 0.
When invoked on another box with TITAN X (Pascal) GPUs, process exits normally.
Here's a minimum reproducible example, that only invokes integral:
&lt;denchmark-code&gt;#include &lt;iostream&gt;
#include &lt;opencv2/core.hpp&gt;
#include &lt;opencv2/opencv.hpp&gt;

using namespace std;
using namespace cv;
using namespace cv::cuda;

void cudaIntegral(InputArray m1, OutputArray pts) {
    GpuMat gm1, gm2;
    gm1.upload(m1);
    CV_Assert(!gm1.empty());

    cv::cuda::integral(gm1, gm2);

    gm2.download(pts);
}

int main(int argc, char **argv) {
    Mat in = imread(argv[1], IMREAD_GRAYSCALE);
    Mat *out = new Mat();

    cudaIntegral(in, *out);

    cout &lt;&lt; *out &lt;&lt; endl;
    delete out;
    return 0;
}
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;


Check out latest master, 3.4.1 or 3.4.2 version of OpenCV and contrib modules
Build from source
Run example_gpu_surf_keypoint_matcher on any two images
Process hangs

	</description>
	<comments>
		<comment id='1' author='dimitrijer' date='2018-08-27T15:00:10Z'>
		Thank you for the report!
Unfortunately, we can't reproduce this problem on our side due specific HW requirements.
Feel free to investigate/prepare PR to resolve this issue.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

You can report about this problem on NVIDIA forum too: &lt;denchmark-link:https://devtalk.nvidia.com/&gt;https://devtalk.nvidia.com/&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='dimitrijer' date='2019-02-01T02:28:02Z'>
		I was able to reproduce the problem on RTX 2080 Ti, and confirmed that &lt;denchmark-link:https://github.com/opencv/opencv/pull/13658&gt;#13658&lt;/denchmark-link&gt;
 Fixes this issue.
&lt;denchmark-link:https://github.com/dimitrijer&gt;@dimitrijer&lt;/denchmark-link&gt;
 Would you please try latest 3.4 or master branch?
		</comment>
		<comment id='3' author='dimitrijer' date='2019-02-14T09:59:38Z'>
		Thank you &lt;denchmark-link:https://github.com/nglee&gt;@nglee&lt;/denchmark-link&gt;
 !
		</comment>
		<comment id='4' author='dimitrijer' date='2019-03-13T13:18:22Z'>
		Works for me as well, sorry for the delay. Thanks a bunch!
		</comment>
	</comments>
</bug>