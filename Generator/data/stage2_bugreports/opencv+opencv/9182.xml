<bug id='9182' author='harvv' open_date='2017-07-18T15:58:36Z' closed_time='2017-07-20T15:35:04Z'>
	<summary>Fix OpenCVNativeLoader.java with the correct lib name</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.3.0-rc
Operating System / Platform =&gt; Any
Compiler =&gt; Any (Java generation)

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

The current opencv/modules/java/generator/src/java/osgi+OpenCVNativeLoader.java file hardcodes the library name to opencv_java320.
System.loadLibrary("opencv_java320");
This will be incorrect when 3.3.0 makes actual release, and is incorrect now for anyone building this branch.
This is particularly important because without some code from within the package itself calling loadLibrary, OpenCV cannot be used within most OSGi setups (including part of a Eclipse RCP app) because of the way classloading is segregated therein.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Observe the source file. Note hardcoded - and currently incorrect - libname
When built, cause OpenCVNativeLoader.init() to be invoked and observe the wrong library loaded
(or an exception to be thrown if the older 3.2.0 library isn't found)
	</description>
	<comments>
		<comment id='1' author='harvv' date='2017-07-18T16:16:36Z'>
		(To not spam the issue tracker, I will defer opening a new one for the following topic, for now):
It would be useful to have a way to let Eclipse plugins (which are almost identical to full Eclipse RCP applications in structure and operation) to more easily integrate OpenCV.  I guessed that OpenCVNativeLoader was a step in this direction.  However, Eclipse RCP has diverged somewhat from OSGi - you can see it in the package namings; org.eclipse.osgi vs org.osgi... - in that it has stuck with more classic ways of "activating" and calling various lifecycle methods on plugins.
OSGi proper seems to have moved on to "blueprints" , which is what OpenCVNativeLoader seems to be going after...whereas Eclipse has stuck with BundleActivators.
Granted, I think the right way is to move RCP forward and I'm sure blueprints can work with Eclipse plugins ...but currently , and I speak from recent practical experience - this is not trivial because Eclipse tends to be somewhat opaque as to how it handles things under the covers.
(* disclaimer: I am not an expert in OSGi by any stretch, though I believe I have a decent grasp on it.  This page &lt;denchmark-link:http://blog.knowhowlab.org/2010/10/osgi-tutorial-4-ways-to-activate-code.html&gt;http://blog.knowhowlab.org/2010/10/osgi-tutorial-4-ways-to-activate-code.html&lt;/denchmark-link&gt;
  has a high level summary of what I said above, in case I mis-stated)
I have recently integrated OpenCV 3.3.0-rc into an Eclipse RCP but it involved repackaging up the opencv JAR after adding a new class (to implement BundleActivator) and a modification to the OpenCVNativeLoader to fix the libname.
TL;DR :
It would be great if something came out-of-the-box in the OpenCV source that would allow for Eclipse RCP integrations.  I can appreciate that this might be tricky and troublesome to make optional, as to not get in the way of people not using OpenCV this way  (horrors of huge ifdefs in C++ come to mind...but in Java form)....as it would fail to build if one didn't have org.eclipse.osgi and other random eclipse packages present.
I can think of a couple solutions but both of them are half-baked so I'll just leave this comment as-is and see what others can think up
		</comment>
		<comment id='2' author='harvv' date='2017-07-19T15:47:22Z'>
		Currently we have no experts with Eclipse RCP / OSGi.
&lt;denchmark-link:https://github.com/jtkb&gt;@jtkb&lt;/denchmark-link&gt;
 could you suggest something?
		</comment>
		<comment id='3' author='harvv' date='2017-07-19T21:09:43Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 Sure I can take a look into this.
Just a couple of things that immediately spring to mind. I am very reluctant to make changes specifically to accommodate a particular type of IDE, in this case RCP for Eclipse. That said I am not an expert with Eclipse nor do I use it but I can take a look to see if there is common ground. I am reluctant to deviate from a 'given standard' which I see as coming from OSGi. (One project springs to mind is the OpenHAB project which I think relies on Eclipse plugins to build it.. I possibly could be wrong there though but I recall not having much success building it outside of Eclipse).
The hard coding of the open CV version is a bit of a problem I previously had to tackle in the POM. I'll try to think of a way around this issue but I currently do not know of a way for Maven to substitute values into source code at build time without some rather ugly scripting.
Leave it with me, I'll see what I can do.
		</comment>
		<comment id='4' author='harvv' date='2017-07-20T09:58:19Z'>
		&lt;denchmark-link:https://github.com/harvv&gt;@harvv&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/jtkb&gt;@jtkb&lt;/denchmark-link&gt;
 Did you have a chance to take a look on &lt;denchmark-link:https://github.com/opencv/opencv/pull/9190&gt;#9190&lt;/denchmark-link&gt;
 ?

The hard coding of the open CV version is a bit of a problem

&lt;denchmark-link:https://github.com/jtkb&gt;@jtkb&lt;/denchmark-link&gt;
 I believe CMake can generate Maven  files with proper versions and file paths (from template file).
Suggested pipeline to build Maven package is:

download OpenCV sources / install required packages (JDK / Maven / Ant / etc )
create build directory
run CMake which will configure build scripts and generate .pom files (in this build directory) for Maven. Perhaps with additional target "maven-build".
build OpenCV binaries
run target "maven-build" (make maven-build)

In this pipeline steps 1-4 are regular OpenCV steps. .pom file just creates Maven bundle from existed OpenCV binraies and don't try to run own CMake or compile OpenCV binaries.
Would this scheme work for Maven? What is about different native dependencies required to load OpenCV .so library (libjpeg.so / libpng.so / ffmpeg / gstreamer / etc)?
BTW, Integration of suggested changes would be postponed until OpenCV 3.3 release.
		</comment>
		<comment id='5' author='harvv' date='2017-07-20T11:30:12Z'>
		&lt;denchmark-link:https://github.com/alekcac&gt;@alekcac&lt;/denchmark-link&gt;
 Yes saw your PR last night and I certainly like the solution for dynamically changing the version in source code.
Also if I understand your proposed pipeline for a Maven build correctly it is to trigger it from a CMake build as opposed to how it works currently where Maven triggers the CMake build. Your proposal certainly would allow for the version number to be set in the POM at build time. I'm not against this per se and I think the only way to dynamically change the version is by an external influence and not by Maven itself. One of my reasons for introducing the Maven build was to give a simple way for Java developers to build the native and Java libraries especially if they are not familiar with CMake of C/C++. The Maven build process takes care of ensuing the required dependencies are available (including cmake), which was something I found difficult to do when I started out, so your proposal would change this i.e. Java developers would have to have all the installed dependencies prior to triggering the CMake build and subsequent Maven trigger.
I think I am still keen to keep the build process as a 'Maven-triggers-CMake' and include your changes in  PR &lt;denchmark-link:https://github.com/opencv/opencv/pull/9190&gt;#9190&lt;/denchmark-link&gt;
 . There is also a maven 'version's plug in I might be able to take advantage of to automatically update versions but i would need to investigate if it's suitable.
		</comment>
	</comments>
</bug>