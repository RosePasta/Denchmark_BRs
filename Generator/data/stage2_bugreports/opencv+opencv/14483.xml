<bug id='14483' author='dkurt' open_date='2019-05-05T09:16:11Z' closed_time='2019-05-05T12:12:49Z'>
	<summary>Sporadic crashes of asynchronous dnn</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 03ec1ca
Operating System / Platform =&gt; Ubuntu 16.04
Compiler =&gt; gcc 5.5.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;python: malloc.c:2394: sysmalloc: Assertion `(old_top == initial_top (av) &amp;&amp; old_size == 0) || ((unsigned long) (old_size) &gt;= MINSIZE &amp;&amp; prev_inuse (old_top) &amp;&amp; ((unsigned long) old_end &amp; (pagesize - 1)) == 0)' failed.
Aborted (core dumped)
&lt;/denchmark-code&gt;


backtrace:
Thread 1 "python" received signal SIGSEGV, Segmentation fault.
__memcpy_avx_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-avx-unaligned.S:238
238	../sysdeps/x86_64/multiarch/memcpy-avx-unaligned.S: No such file or directory.
(gdb) bt
#0  __memcpy_avx_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-avx-unaligned.S:238
#1  0x00007ffff0c5c0a1 in cv::Mat::copyTo (this=0x7fffffffc170, _dst=...) at /home/dkurtaev/opencv/modules/core/src/copy.cpp:320
#2  0x00007ffff5b94287 in cv::dnn::InfEngineBackendNet::forward (this=0xf852a0, outBlobsWrappers=std::vector of length 1, capacity 1 = {...}, isAsync=true)
    at /home/dkurtaev/opencv/modules/dnn/src/op_inf_engine.cpp:941
#3  0x00007ffff5b95154 in cv::dnn::forwardInfEngine (outBlobsWrappers=std::vector of length 1, capacity 1 = {...}, node=..., isAsync=true) at /home/dkurtaev/opencv/modules/dnn/src/op_inf_engine.cpp:1051
#4  0x00007ffff5a99975 in cv::dnn::dnn4_v20190430::Net::Impl::forwardLayer (this=0xf84ba0, ld=...) at /home/dkurtaev/opencv/modules/dnn/src/dnn.cpp:2485
#5  0x00007ffff5a9a441 in cv::dnn::dnn4_v20190430::Net::Impl::forwardToLayer (this=0xf84ba0, ld=..., clearFlags=true) at /home/dkurtaev/opencv/modules/dnn/src/dnn.cpp:2541
#6  0x00007ffff5a9c8c3 in cv::dnn::dnn4_v20190430::Net::forwardAsync (this=0x7fffc5992220, outputName="") at /home/dkurtaev/opencv/modules/dnn/src/dnn.cpp:2809
#7  0x00007ffff6732cdf in pyopencv_cv_dnn_dnn_Net_forwardAsync (self=0x7fffc5992210, args=0x7ffff7f7d050, kw=0x0)
    at /home/dkurtaev/opencv/build/modules/python_bindings_generator/pyopencv_generated_types.h:11467
#8  0x00000000004bc4aa in PyEval_EvalFrameEx ()
#9  0x00000000004b9b66 in PyEval_EvalCodeEx ()
#10 0x00000000004eb69f in ?? ()
#11 0x00000000004e58f2 in PyRun_FileExFlags ()
#12 0x00000000004e41a6 in PyRun_SimpleFileExFlags ()
#13 0x00000000004938ce in Py_Main ()
#14 0x00007ffff7810830 in __libc_start_main (main=0x493370 &lt;main&gt;, argc=2, argv=0x7fffffffd338, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=0x7fffffffd328)
    at ../csu/libc-start.c:291
#15 0x0000000000493299 in _start ()


Can reproduce with NCS2 for now (I'll try with CPU as well).
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

python2 script:

import cv2 as cv
import numpy as np

from threading import Thread
import Queue

# Camera frames capture thread
framesQueue = Queue.Queue()
process = True
def framesCaptureThread():
    global framesQueue, process

    cap = cv.VideoCapture(0)
    cap.set(cv.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv.CAP_PROP_FRAME_HEIGHT, 480)
    while process:
        hasFrame, nextFrame = cap.read()
        if not hasFrame:
            break
        framesQueue.put(nextFrame)

# Initialize network.
net = cv.dnn.readNet('vehicle-license-plate-detection-barrier-0106.bin',
                     'vehicle-license-plate-detection-barrier-0106.xml')
net.setPreferableTarget(cv.dnn.DNN_TARGET_MYRIAD)

# Warp up
net.setInput(np.random.standard_normal([1, 3, 300, 300]).astype(np.uint8))
net.forward()

# Start frames capturing thread
thread = Thread(target=framesCaptureThread)
thread.start()

# Skip the first frame to wait for camera readiness
framesQueue.get()

maxNumRequests = 2
futureDetections = []
framesToRender = []

# Main processing loop
while cv.waitKey(1) &lt; 0:
    try:
        if len(futureDetections) &lt; maxNumRequests:
            frame = framesQueue.get()
            blob = cv.dnn.blobFromImage(frame, size=(300, 300), ddepth=cv.CV_8U)
            net.setInput(blob)
            futureDetections.append(net.forwardAsync())
            framesToRender.append(frame)
    except Queue.Empty:
        pass

    # Check for ready detections.
    while futureDetections and futureDetections[0].wait_for(0) == 0:
        frame = framesToRender[0]
        out = futureDetections[0].get()

        cv.imshow('det', frame)

        del framesToRender[0]
        del futureDetections[0]

process = False
thread.join()

Download the following files:
&lt;denchmark-link:https://download.01.org/opencv/2019/open_model_zoo/R1/models_bin/vehicle-license-plate-detection-barrier-0106/FP16/vehicle-license-plate-detection-barrier-0106.bin&gt;vehicle-license-plate-detection-barrier-0106.bin&lt;/denchmark-link&gt;

&lt;denchmark-link:https://download.01.org/opencv/2019/open_model_zoo/R1/models_bin/vehicle-license-plate-detection-barrier-0106/FP16/vehicle-license-plate-detection-barrier-0106.xml&gt;vehicle-license-plate-detection-barrier-0106.xml&lt;/denchmark-link&gt;

relates &lt;denchmark-link:https://github.com/opencv/opencv/pull/13694&gt;#13694&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='dkurt' date='2019-05-05T09:23:55Z'>
		The following example also fails:
import cv2 as cv
import numpy as np

# Initialize network.
net = cv.dnn.readNet('vehicle-license-plate-detection-barrier-0106.bin',
                     'vehicle-license-plate-detection-barrier-0106.xml')

net.setInput(np.random.standard_normal([1, 3, 300, 300]).astype(np.uint8))
net.forwardAsync().get()
FP32 model: &lt;denchmark-link:https://download.01.org/opencv/2019/open_model_zoo/R1/models_bin/vehicle-license-plate-detection-barrier-0106/FP32/&gt;https://download.01.org/opencv/2019/open_model_zoo/R1/models_bin/vehicle-license-plate-detection-barrier-0106/FP32/&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='dkurt' date='2019-05-05T09:28:26Z'>
		Not sure that this code reached callback's code (according to stacktrace).
Try to instrument via valgrind tool and capture stacktraces (valgrind python3 mytest.py).
		</comment>
		<comment id='3' author='dkurt' date='2019-05-05T09:31:59Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
, Looks like the problem is that the following method doesn't consider U8 blob:



opencv/modules/dnn/src/op_inf_engine.cpp


        Lines 956 to 962
      in
      e28e3c9






 Mat infEngineBlobToMat(const InferenceEngine::Blob::Ptr&amp; blob) 



 { 



 // NOTE: Inference Engine sizes are reversed. 



     std::vector&lt;size_t&gt; dims = blob-&gt;dims(); 



     std::vector&lt;int&gt; size(dims.rbegin(), dims.rend()); 



 return Mat(size, CV_32F, (void*)blob-&gt;buffer()); 



 } 





However in this loop for asynchronous mode we copy CV_8U data to CV_32F Mat.
		</comment>
	</comments>
</bug>