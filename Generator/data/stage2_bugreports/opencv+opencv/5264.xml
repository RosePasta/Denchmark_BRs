<bug id='5264' author='willyd' open_date='2015-08-27T18:16:40Z' closed_time='2015-10-02T12:51:17Z'>
	<summary>OpenCV 3.0 links to both Debug and Release external ZLIB library on Windows</summary>
	<description>
Hi, I am trying to build OpenCV on Windows and using my own ZLIB library with my own FindZLIB module. My FindZLIB module does:
set(ZLIB_LIBRARIES optimized ${ZLIB_LIBRARY} debug ${ZLIB_LIBRARY_DEBUG})
however line 469 in &lt;denchmark-link:https://github.com/Itseez/opencv/blob/3.0.0/cmake/OpenCVModule.cmake&gt;OpenCVModule.cmake&lt;/denchmark-link&gt;
 messes up the libraries order. This makes opencv_core depend on both the debug and release libraries of ZLIB and any consuming project that uses OpenCV's exported targets link to both release and debug versions of ZLIB.
I thought of three possible solutions:

Append ${ZLIB_LIBRARIES} to the extra_libs when BUILD_ZLIB=OFF instead of passing it to ocv_add_module.
Preprocess the OPENCV_MODULE_${m}_DEPS_EXT list to merge together the keyword and the library so that a list like:

debug;c:/path/to/zlibd.lib;optimized;c:/path/to/zlib.lib
becomes
"debug c:/path/to/zlibd.lib";"optimized c:/path/to/zlib.lib"
and then split the merged list elements after.

Or, after find_package(ZLIB) succeeds create an imported target named OpenCV::ZLIB from the debug and optimized libraries and use set(ZLIB_LIBRARIES OpenCV::ZLIB). And then extract the proper Release and Debug libs before linking if(${ZLIB_LIBRARIES} EQUAL OpenCV::ZLIB).

All solutions seem a bit hackish. Is there a proper way of handling this use case?
	</description>
	<comments>
		<comment id='1' author='willyd' date='2015-08-28T09:56:39Z'>
		 and  CMake features is not recommended to use with OpenCV. There are many issues and you catch one of them.
Instead of this, try to use  targets and pass to OpenCV target name only. Configurations for IMPORTED targets can be generated by CMake semi-automatically if you have CMake projects for your library (via  command: &lt;denchmark-link:http://www.cmake.org/cmake/help/v2.8.11/cmake.html#command:export&gt;http://www.cmake.org/cmake/help/v2.8.11/cmake.html#command:export&lt;/denchmark-link&gt;
 )
Manual creation of  target is here: &lt;denchmark-link:https://github.com/Itseez/opencv/blob/faa668437357f6433bc1c01508b9eec62827d130/cmake/OpenCVFindIPP.cmake#L143-L147&gt;https://github.com/Itseez/opencv/blob/faa668437357f6433bc1c01508b9eec62827d130/cmake/OpenCVFindIPP.cmake#L143-L147&lt;/denchmark-link&gt;

To split debug and release configurations you can try to use these properties:

IMPORTED_LOCATION_DEBUG
IMPORTED_LOCATION_RELEASE

		</comment>
		<comment id='2' author='willyd' date='2015-08-31T15:48:34Z'>
		&lt;denchmark-link:https://github.com/willyd&gt;@willyd&lt;/denchmark-link&gt;
 Does proposal &lt;denchmark-link:https://github.com/opencv/opencv/pull/5275&gt;#5275&lt;/denchmark-link&gt;
 work for you?
		</comment>
		<comment id='3' author='willyd' date='2015-08-31T16:42:31Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 Let me test this and get back to you.
		</comment>
		<comment id='4' author='willyd' date='2015-08-31T18:43:53Z'>
		After reviewing the changes I would say that this works only partially. With the code above OpenCV should correctly link to the release and debug libraries. But it will also export targets with a dependency on imported target z when building static libraries. Thus I will need to somehow define this imported library in my cmake project.
Maybe the OpenCVConfig.cmake could take care of resolving this dependency via &lt;denchmark-link:http://www.cmake.org/cmake/help/v3.3/module/CMakeFindDependencyMacro.html&gt;find_dependency&lt;/denchmark-link&gt;
?
Otherwise, when opencv_core links to ZLIB maybe it could call &lt;denchmark-link:http://www.cmake.org/cmake/help/v3.3/module/CMakeExpandImportedTargets.html&gt;cmake_expand_imported_targets&lt;/denchmark-link&gt;
 so that the references are absolute paths in the OpenCVConfig.cmake?
		</comment>
		<comment id='5' author='willyd' date='2015-08-31T19:00:10Z'>
		Your ZLIB is static (.lib only) or shared library (.dll+.lib)?
		</comment>
		<comment id='6' author='willyd' date='2015-08-31T19:11:18Z'>
		static
		</comment>
	</comments>
</bug>