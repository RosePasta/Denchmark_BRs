<bug id='10668' author='nightsparc' open_date='2018-01-23T17:34:30Z' closed_time='2018-01-24T13:40:39Z'>
	<summary>OpenBLAS support broken due to extern C linkage</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4.0
Operating System / Platform =&gt; Ubuntu 16.04
Compiler =&gt; GCC 5.4

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Hi!
we build OpenCV with OpenBLAS 0.2.20 (also our own build) ...ah, up to patch &lt;denchmark-link:https://github.com/opencv/opencv/pull/9955&gt;#9955&lt;/denchmark-link&gt;
, LAPACK detection had been working properly.
Starting with the changes in patch &lt;denchmark-link:https://github.com/opencv/opencv/pull/9955&gt;#9955&lt;/denchmark-link&gt;
 in the 3.3.1 release (and 3.4.0 too, to which we're trying to upgrade to atm), the LAPACK cmake detection script outputs

-- LAPACK(OpenBLAS): LAPACK_LIBRARIES: /usr/local/lib/libopenblas.so
-- LAPACK(OpenBLAS): Can't build LAPACK check code. This LAPACK version is not supported.

I was able to track it down to the extern "C" encapsulation of the OpenBLAS headers in the lapack proxy which seems similar to issue &lt;denchmark-link:https://github.com/opencv/opencv/pull/10230&gt;#10230&lt;/denchmark-link&gt;
. Now, if we're removing the  statement, everything works fine again.
I'm just wondering if it this is due to some trouble with our own build version of OpenBLAS as &lt;denchmark-link:https://github.com/opencv/opencv/pull/9955&gt;#9955&lt;/denchmark-link&gt;
 was related to the OpenBLAS support in OpenCV, too. &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 Why did you put the OpenBLAS headers in extern C linkage?
&lt;denchmark-h:h5&gt;Workaround&lt;/denchmark-h&gt;

Atm, I'd removed the extern C linkage from the detection script to build OpenCV with OpenBLAS...
Thanks in advance and regards
	</description>
	<comments>
		<comment id='1' author='nightsparc' date='2018-01-23T20:00:31Z'>
		LAPACK/BLAS is "C" library and it should have "C" LAPACK's symbols (exception here is "Apple"-way with their framework).

our own build

Try to run "nm -g" on your library build and check for names of exported LAPACK symbols.
Some LAPACK libraries/packages doesn't have  at all in headers (like &lt;denchmark-link:https://github.com/xianyi/OpenBLAS/commit/0a45e5495ff3253dd326db9f44cd40e9449e8ef9&gt;OpenBLAS&lt;/denchmark-link&gt;
 many years ago), so it was forced to avoid observed linker error with mangled C++ LAPACK symbols.
Nested  &lt;denchmark-link:http://en.cppreference.com/w/cpp/language/language_linkage&gt;blocks&lt;/denchmark-link&gt;
 are compiled pretty &lt;denchmark-link:https://stackoverflow.com/questions/48099828/what-happens-if-you-nest-extern-c&gt;well&lt;/denchmark-link&gt;
, so it should not be a problem.
Try it &lt;denchmark-link:https://godbolt.org/&gt;here&lt;/denchmark-link&gt;
:

Example
extern "C" {
extern "C" {
int square(int num);
}
}

int square(int num) {
    return num * num;
}


		</comment>
		<comment id='2' author='nightsparc' date='2018-01-23T22:00:40Z'>
		Ah, I'm aware of the LAPACK/BLAS origins and the correct usage of extern "C" :) - sorry if my post was irritating...but thanks for the SA link, the std reference for nested linkage is nice üëç
I already tried nm before posting...all symbols are (as expected) easily readable C-symbols, no C++ name mangling there, sorry, forgot adding it.
I don't know what apple is doing in their framework, I was just guessing from &lt;denchmark-link:https://github.com/opencv/opencv/pull/10230&gt;#10230&lt;/denchmark-link&gt;
 comments and the differences in the CMake detection script.
Ok, I tracked down the error a bit more...fortunately, there was an error output in the OpenCVFindLAPACK.cmake :)
It seems, the error comes from the usage of GCC complex number library:

In file included from /usr/include/c++/5/complex:42:0,
            from /usr/include/c++/5/ccomplex:38,
            from /usr/include/c++/5/complex.h:32,
            from /usr/local/include/openblas/lapacke.h:73,
            from /tmp/opencv-3.4.0/release/opencv_lapack.h:3,
            from /tmp/opencv-3.4.0/cmake/checks/lapack_check.cpp:1:

/usr/include/c++/5/bits/cpp_type_traits.h:72:3: error: template with C linkage
template&lt;typename _Iterator, typename _Container&gt;
...
...

I've set ENABLE_CXX11=ON in my configure options, which forces try_compile to set the compile std to C++11, thus complex.h includes ccomplex which requires templates which are non-existent in C :)

#if __cplusplus &gt;= 201103L
#include &lt;ccomplex&gt;
#endif

So, forcing try_compile to use C++98 for the test compilation fixes the configure bug. But that's a bit of an ugly hack.
So, sorry. I'm still not getting it - why are you putting a library which already has C-linkage for it's symbols into another nested C-linkage layer? And thereby putting the std library headers into extern linkage blocks, from which they're intentionally excluded! See &lt;denchmark-link:https://github.com/xianyi/OpenBLAS/pull/490&gt;xianyi/OpenBLAS#490&lt;/denchmark-link&gt;

I could provide a patch for the OpenCVFindLAPACK.cmake if you want...
Thank you!
		</comment>
		<comment id='3' author='nightsparc' date='2018-01-23T23:21:21Z'>
		Because there are packages with straightforward LAPACK/CBLAS headers without any extern "C" at all.
They can't be used without additional extern "C" because we need to avoid C++ symbols mangling.
Perhaps we could add "include &lt;complex.h&gt;" before include "opencv_lapack.h" (in lapack_check.cpp and modules/core/src/hal_internal.cpp) to workaround this.
BTW, GCC 7 is fine (in Fedora + OpenBLAS): headers list looks the same (use -H compiler option to see them), but there is no error message.
&lt;denchmark-link:https://godbolt.org/&gt;https://godbolt.org/&lt;/denchmark-link&gt;
 works fine with GCC 6.1+ / Clang:
&lt;denchmark-code&gt;#include &lt;complex.h&gt; // comment this to get error with "--std=c++11 -H"
extern "C" {
#include &lt;complex.h&gt;
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='nightsparc' date='2018-01-24T10:30:48Z'>
		
Because there are packages with straightforward LAPACK/CBLAS headers without any extern "C" at all.

Oh, my, fault. Sorry - I didn't really thought about other LAPACK/BLAS impl. besides OpenBLAS (and this strange Apple stuff) :/ my fault, sorry again.

BTW, GCC 7 is fine (in Fedora + OpenBLAS): headers list looks the same (use -H compiler option to see them), but there is no error message.

That's strange...what version of OpenBLAS is Fedora shipped with? I'd assumed a bit more up to date than Ubuntu LTS?
Anyway, your workaround suggestion looks fine for me...I'll test it and provide the patch when it's working.
		</comment>
		<comment id='5' author='nightsparc' date='2018-01-24T11:56:39Z'>
		&lt;denchmark-link:https://github.com/nightsparc&gt;@nightsparc&lt;/denchmark-link&gt;
 Could you take a look on &lt;denchmark-link:https://github.com/opencv/opencv/pull/10677&gt;#10677&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='6' author='nightsparc' date='2018-01-24T13:40:38Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/opencv/opencv/pull/10677&gt;#10677&lt;/denchmark-link&gt;
 looks fine and works for me - thank you!
		</comment>
	</comments>
</bug>