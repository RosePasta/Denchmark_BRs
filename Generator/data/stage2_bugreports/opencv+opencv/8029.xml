<bug id='8029' author='DanOlivier' open_date='2017-01-18T07:25:31Z' closed_time='2018-02-20T13:01:53Z'>
	<summary>error: (-217) all CUDA-capable devices are busy or unavailable in function setDevice</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (versions)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.2-dev (1989d94)
Operating System / Platform =&gt; Ubuntu 16.04.1
Compiler =&gt; gcc 5.4.0 20160609
Cuda-8.0 (and Nvidia drivers 375.26).

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

I am using a dual-GPU configuration (although, I can repeat the results by directing the program to run on only one care, using CUDA_VISIBLE_DEVICES)
&lt;denchmark-code&gt;$ nvidia-smi
Tue Jan 17 23:51:42 2017       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 375.26                 Driver Version: 375.26                    |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+======================|
|   0  GeForce GTX 960     Off  | 0000:01:00.0      On |                  N/A |
| 30%   55C    P0    38W / 130W |    888MiB /  1992MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+
|   1  GeForce GTX 560 Ti  Off  | 0000:03:00.0     N/A |                  N/A |
| 38%   55C    P0    N/A /  N/A |    172MiB /  1984MiB |     N/A      Default |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID  Type  Process name                               Usage      |
|=============================================================================|
|    0     14889    G   /usr/lib/firefox/firefox                         1MiB |
|    0     28967    G   /usr/lib/xorg/Xorg                             537MiB |
|    0     29597    G   compiz                                         347MiB |
|    1                  Not Supported                                         |
+-----------------------------------------------------------------------------+
&lt;/denchmark-code&gt;

I am using the following configuration:
&lt;denchmark-code&gt;$ cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=/usr/local -DOPENCV_EXTRA_MODULES_PATH=/home/daniel/tools/opencv_contrib/modules/ -DWITH_OPENGL=ON -DWITH_GDCM=ON -DWITH_GDAL=ON -DWITH_LAPACK=ON -DBUILD_EXAMPLES=ON -DCUDA_VERBOSE_BUILD:BOOL=ON -DWITH_CUBLAS=ON -DWITH_NVCUVID=ON
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

Here is the failure. Note that I have restricted the scope of the test :
$ CUDA_VISIBLE_DEVICES=0 ./bin/opencv_test_cudaarithm --gtest_filter='CUDA_Arithm/Normalize.WithMask/100:CUDA_Arithm/MeanStdDev.*'

Available options besides google test option: 
Usage: opencv_test_cudaarithm [params] 

	--cuda_device (value:-1)
		CUDA device on which tests will be executed (-1 means all devices)
	-h, --help (value:false)
		Print help info

Run tests on all supported CUDA devices 

[----------]
[ GPU INFO ] 	Run on OS Linux x64.
[----------]
*** CUDA Device Query (Runtime API) version (CUDART static linking) *** 

Device count: 1

Device 0: "GeForce GTX 960"
  CUDA Driver Version / Runtime Version          8.0 / 8.0
  CUDA Capability Major/Minor version number:    5.2
  Total amount of global memory:                 1993 MBytes (2089680896 bytes)
  GPU Clock Speed:                               1.29 GHz
  Max Texture Dimension Size (x,y,z)             1D=(65536), 2D=(65536,65536), 3D=(4096,4096,4096)
  Max Layered Texture Size (dim) x layers        1D=(16384) x 2048, 2D=(16384,16384) x 2048
  Total amount of constant memory:               65536 bytes
  Total amount of shared memory per block:       49152 bytes
  Total number of registers available per block: 65536
  Warp size:                                     32
  Maximum number of threads per block:           1024
  Maximum sizes of each dimension of a block:    1024 x 1024 x 64
  Maximum sizes of each dimension of a grid:     2147483647 x 65535 x 65535
  Maximum memory pitch:                          2147483647 bytes
  Texture alignment:                             512 bytes
  Concurrent copy and execution:                 Yes with 2 copy engine(s)
  Run time limit on kernels:                     Yes
  Integrated GPU sharing Host Memory:            No
  Support host page-locked memory mapping:       Yes
  Concurrent kernel execution:                   Yes
  Alignment requirement for Surfaces:            Yes
  Device has ECC support enabled:                No
  Device is using TCC driver mode:               No
  Device supports Unified Addressing (UVA):      Yes
  Device PCI Bus ID / PCI location ID:           1 / 0
  Compute Mode:
      Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) 

deviceQuery, CUDA Driver = CUDART, CUDA Driver Version  = 8.0, CUDA Runtime Version = 8.0, NumDevs = 1

CTEST_FULL_OUTPUT
OpenCV version: 3.2.0-dev
OpenCV VCS version: 3.2.0-36-g10e639c
Build type: release
Parallel framework: pthreads
CPU features: 
OpenCL is disabled
Note: Google Test filter = CUDA_Arithm/Normalize.WithMask/100:CUDA_Arithm/MeanStdDev.*
[==========] Running 9 tests from 2 test cases.
[----------] Global test environment set-up.
[----------] 1 test from CUDA_Arithm/Normalize
[ RUN      ] CUDA_Arithm/Normalize.WithMask/100
[       OK ] CUDA_Arithm/Normalize.WithMask/100 (241 ms)
[----------] 1 test from CUDA_Arithm/Normalize (241 ms total)

[----------] 8 tests from CUDA_Arithm/MeanStdDev
[ RUN      ] CUDA_Arithm/MeanStdDev.Accuracy/0
[       OK ] CUDA_Arithm/MeanStdDev.Accuracy/0 (260 ms)
[ RUN      ] CUDA_Arithm/MeanStdDev.Accuracy/1
[       OK ] CUDA_Arithm/MeanStdDev.Accuracy/1 (1 ms)
[ RUN      ] CUDA_Arithm/MeanStdDev.Accuracy/2
[       OK ] CUDA_Arithm/MeanStdDev.Accuracy/2 (1 ms)
[ RUN      ] CUDA_Arithm/MeanStdDev.Accuracy/3
[       OK ] CUDA_Arithm/MeanStdDev.Accuracy/3 (1 ms)
[ RUN      ] CUDA_Arithm/MeanStdDev.Async/0
unknown file: Failure
C++ exception with description "/home/daniel/tools/opencv/modules/cudaarithm/src/reductions.cpp:162: error: (-217) NPP_RANGE_ERROR [Code = -7] in function meanStdDev
" thrown in the test body.
[  FAILED  ] CUDA_Arithm/MeanStdDev.Async/0, where GetParam() = (GeForce GTX 960, 128x128, whole matrix) (121 ms)
[ RUN      ] CUDA_Arithm/MeanStdDev.Async/1
unknown file: Failure
C++ exception with description "/home/daniel/tools/opencv/modules/cudaarithm/src/reductions.cpp:162: error: (-217) NPP_RANGE_ERROR [Code = -7] in function meanStdDev
" thrown in the test body.
[  FAILED  ] CUDA_Arithm/MeanStdDev.Async/1, where GetParam() = (GeForce GTX 960, 128x128, sub matrix) (457 ms)
[ RUN      ] CUDA_Arithm/MeanStdDev.Async/2
unknown file: Failure
C++ exception with description "/home/daniel/tools/opencv/modules/core/src/cuda_info.cpp:74: error: (-217) all CUDA-capable devices are busy or unavailable in function setDevice
" thrown in SetUp().
[  FAILED  ] CUDA_Arithm/MeanStdDev.Async/2, where GetParam() = (GeForce GTX 960, 113x113, whole matrix) (0 ms)
[ RUN      ] CUDA_Arithm/MeanStdDev.Async/3
unknown file: Failure
C++ exception with description "/home/daniel/tools/opencv/modules/core/src/cuda_info.cpp:74: error: (-217) all CUDA-capable devices are busy or unavailable in function setDevice
" thrown in SetUp().
[  FAILED  ] CUDA_Arithm/MeanStdDev.Async/3, where GetParam() = (GeForce GTX 960, 113x113, sub matrix) (0 ms)
[----------] 8 tests from CUDA_Arithm/MeanStdDev (841 ms total)

[----------] Global test environment tear-down
[==========] 9 tests from 2 test cases ran. (1083 ms total)
[  PASSED  ] 5 tests.
[  FAILED  ] 4 tests, listed below:
[  FAILED  ] CUDA_Arithm/MeanStdDev.Async/0, where GetParam() = (GeForce GTX 960, 128x128, whole matrix)
[  FAILED  ] CUDA_Arithm/MeanStdDev.Async/1, where GetParam() = (GeForce GTX 960, 128x128, sub matrix)
[  FAILED  ] CUDA_Arithm/MeanStdDev.Async/2, where GetParam() = (GeForce GTX 960, 113x113, whole matrix)
[  FAILED  ] CUDA_Arithm/MeanStdDev.Async/3, where GetParam() = (GeForce GTX 960, 113x113, sub matrix)

 4 FAILED TESTS

The first error that occurs is NPP_RANGE_ERROR, and it triggers a cascade of errors in all the tests that follow in the suite ("all CUDA-capable devices are busy or unavailable in function setDevice").
What is confusing is that, depending on if I filter the GPUs or not (with variations of CUDA_VISIBLE_DEVICES set to "1,0", 1, 0, or nothing), both error messages may appear.
i.e. I think that once the program has alternated to running a test on another GPU, the original (range) error message is lost.
Note, in /usr/local/cuda-8.0/include/cuda.h:
CUDA_ERROR_NO_DEVICE                      = 100
in /usr/local/cuda-8.0/include/driver_types.h:
cudaErrorNoDevice                     =     38,
Any help is appreciated.
	</description>
	<comments>
	</comments>
</bug>