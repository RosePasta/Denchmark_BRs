<bug id='5591' author='tzickel' open_date='2015-10-29T23:53:19Z' closed_time='2015-11-01T18:18:36Z'>
	<summary>Both opencv 2.4.11 and 3.0.0 mess up process affinity in windows when using multi-threaded functions</summary>
	<description>
It seems to be a bug in the windows concurrent runtime which OpenCV uses by default in windows (I assume if not compiled with OpenMP/TBB).
&lt;denchmark-link:https://social.msdn.microsoft.com/Forums/vstudio/en-US/75ad0b56-c1f2-4539-8042-c94de8ff8cb5/process-affinity-mask-and-concurrency-runtime?forum=parallelcppnative&gt;https://social.msdn.microsoft.com/Forums/vstudio/en-US/75ad0b56-c1f2-4539-8042-c94de8ff8cb5/process-affinity-mask-and-concurrency-runtime?forum=parallelcppnative&lt;/denchmark-link&gt;

Says that this issue should be fixed by compiling with VS 2012+ but it seems that the official distribution is doing that, yet in the following example (checked with both cv2 in 2.4.11 and 3.0.0) the process affinity is changed by calling any multi-threaded function in cv2...
&lt;denchmark-link:https://gist.github.com/tzickel/f4f853124fb61d68d8b1&gt;https://gist.github.com/tzickel/f4f853124fb61d68d8b1&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='tzickel' date='2015-10-30T14:31:01Z'>
		BTW, I'm not sure the issue is just in python bindings (it's just that I'm not near a visual studio compiler to check it otherwise). I would assume this is an general issue with OpenCV and the VC Concurrency Runtime.
&lt;denchmark-link:https://msdn.microsoft.com/en-us/library/gg663535.aspx#sec38&gt;https://msdn.microsoft.com/en-us/library/gg663535.aspx#sec38&lt;/denchmark-link&gt;

The bottom section "Ignored Process Affinity Mask".
		</comment>
		<comment id='2' author='tzickel' date='2015-11-01T18:18:33Z'>
		OK, I had a bug in the test script... so the situation is. In the python bindings on CV 2.4.11 (which are compiled with VS2010) the bug exists, and in python bindings on CV 3.0.0 (which are compiled with VS 2013) the bug does not exist (although setnumthreads is not exported in the official release yet).
So I guess that since cv2 2.4.12 isn't going to be compiled with VS2012+ this issue can be closed..
		</comment>
	</comments>
</bug>