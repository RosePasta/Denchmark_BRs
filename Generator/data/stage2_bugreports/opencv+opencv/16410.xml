<bug id='16410' author='arnaudbrejeon' open_date='2020-01-22T19:48:33Z' closed_time='2020-01-31T06:45:05Z'>
	<summary>Crash in connectedComponentsWithStats</summary>
	<description>
OpenCV 4.1.1
OS: OSX
Compiler: clang
I found a crash in connectedComponentsWithStats on very specific images. It is a bit difficult reproduce because it depends on the number of threads (16 on my machine).
See the code below to reproduce systematically.
From my understanding, the problem comes from the colliding labels.
I will try to provide a fix this week.
&lt;denchmark-code&gt;cv::Mat createCrashMat(int numThreads) {
    const int h = numThreads * 4 * 2 + 8;
    const double nParallelStripes = std::max(1, std::min(h / 2, numThreads * 4));
    const int w = 4;

    const int nstripes = cvRound(nParallelStripes &lt;= 0 ? h : MIN(MAX(nParallelStripes, 1.), h));
    const cv::Range stripeRange(0, nstripes);
    const cv::Range wholeRange(0, h);

    cv::Mat m(h, w, CV_8U);
    m = 0;

    // Look for a range that starts with odd value and ends with even value
    cv::Range bugRange;
    for (int s = stripeRange.start; s &lt; stripeRange.end; s++) {
        cv::Range sr(s, s + 1);
        cv::Range r;
        r.start = (int) (wholeRange.start +
                         ((uint64) sr.start * (wholeRange.end - wholeRange.start) + nstripes / 2) / nstripes);
        r.end = sr.end &gt;= nstripes ?
                    wholeRange.end :
                    (int) (wholeRange.start +
                           ((uint64) sr.end * (wholeRange.end - wholeRange.start) + nstripes / 2) / nstripes);

        if (r.start &gt; 0 &amp;&amp; r.start % 2 == 1 &amp;&amp; r.end % 2 == 0 &amp;&amp; r.end &gt;= r.start + 2) {
            bugRange = r;
            break;
        }
    }

    if (bugRange.empty()) {
        std::cout &lt;&lt; "Could not find a buggy range\n";
        return m;
    }

    // Fill in bug Range
    for (int x = 1; x &lt; w; x++) {
        m.at&lt;char&gt;(bugRange.start - 1, x) = 1;
    }

    m.at&lt;char&gt;(bugRange.start + 0, 0) = 1;
    m.at&lt;char&gt;(bugRange.start + 0, 1) = 1;
    m.at&lt;char&gt;(bugRange.start + 0, 3) = 1;
    m.at&lt;char&gt;(bugRange.start + 1, 1) = 1;
    m.at&lt;char&gt;(bugRange.start + 2, 1) = 1;
    m.at&lt;char&gt;(bugRange.start + 2, 3) = 1;
    m.at&lt;char&gt;(bugRange.start + 3, 0) = 1;
    m.at&lt;char&gt;(bugRange.start + 3, 1) = 1;

    return m;
}
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='arnaudbrejeon' date='2020-01-23T00:02:40Z'>
		It may not crash if the label buffer is set with zeros during allocation. The stats, will not be correct, though.
		</comment>
		<comment id='2' author='arnaudbrejeon' date='2020-01-31T05:19:21Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 May I close the ticket?
		</comment>
	</comments>
</bug>