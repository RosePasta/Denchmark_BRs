<bug id='4929' author='opencv-pushbot' open_date='2015-07-27T11:08:56Z' closed_time='2020-01-14T08:11:58Z'>
	<summary>Android Opencv NativeCameraView error in 5.0 lollipop versions</summary>
	<description>
Transferred from &lt;denchmark-link:http://code.opencv.org/issues/4185&gt;http://code.opencv.org/issues/4185&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;|| Nirmalkumar Sathiamurthi on 2015-02-08 17:33
|| Priority: Normal
|| Affected: 2.4.9 (latest release)
|| Category: android
|| Tracker: Bug
|| Difficulty: 
|| PR: 
|| Platform: Any / Android
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Android Opencv NativeCameraView error in 5.0 lollipop versions&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;I am working on Android OpenCV based application. I am not able to run NativeCameraView on my MotoG after 5.0 lollipop update. The JavaCameraView is still working.

In my program I need to use VideoCapture (http://docs.opencv.org/java/2.4.2/index.html?org/opencv/highgui/VideoCapture.html) in my program. I dont know how do I switch to JavaCameraView Source in VideoCapture. [Only NativeCamera works fine for my Application. Using JavaCameraView is just a temporary workaround which I am looking for]

So my question is, Is this a bug on OpenCV to fix the Native Camera for 5.0 ? I did not find anybody raising such an issue. When will this be fixed ?

02-06 13:30:52.794: E/OpenCV::camera(31745): CameraWrapperConnector::connectToLib ERROR: cannot dlopen camera wrapper library 02-06 13:30:52.794: E/OpenCV::camera(31745): Native_camera returned opening error: 4


http://stackoverflow.com/questions/28361300/opencv-native-camera-view-on-android-5-0-not-working
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;History&lt;/denchmark-h&gt;

&lt;denchmark-h:h5&gt;Vadim Pisarevsky on 2015-04-27 12:46&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;-   Category set to android
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Bastien Bourineau on 2015-05-30 23:16&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Most people use Android JavaCameraView but yes using full native camera on Android 5.0+ seems to not be supported yet :/

Please provide a libnative_camera_r5.0.0.so for Native developers like us.
Until now I didn't had to use any java code this is a bit frustrating to do not have this feature ^^

If someone have an environment to build Android already set and build the libnative_camera library...
-   Target version set to 2.4.12
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Bastien Bourineau on 2015-06-08 22:28&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Hello,

I finally get a ride of Android build from sources.
This is built only for arm devices.

you can found the libnative_camera_r5.0.0.so here : https://svn.scolring.org/trunk/dependencies/OpenCV/SDK/android/armeabi-v7a/sdk/native/libs/armeabi-v7a/libnative_camera_r5.0.0.so

the modified camera wrapper :
&lt;pre&gt;
 .../camera_wrapper/camera_wrapper.cpp              | 62 +++++++++++++++++++---
 1 file changed, 55 insertions(+), 7 deletions(-)

diff --git a/modules/androidcamera/camera_wrapper/camera_wrapper.cpp b/modules/androidcamera/camera_wrapper/camera_wrapper.cpp
index 202aa29..dafbe64 100644
--- a/modules/androidcamera/camera_wrapper/camera_wrapper.cpp
+++ b/modules/androidcamera/camera_wrapper/camera_wrapper.cpp
@@ -1,6 +1,6 @@
 #if !defined(ANDROID_r2_2_0) &amp;&amp; !defined(ANDROID_r2_3_3) &amp;&amp; !defined(ANDROID_r3_0_1) &amp;&amp; \
  !defined(ANDROID_r4_0_0) &amp;&amp; !defined(ANDROID_r4_0_3) &amp;&amp; !defined(ANDROID_r4_1_1) &amp;&amp; \
- !defined(ANDROID_r4_2_0) &amp;&amp; !defined(ANDROID_r4_3_0) &amp;&amp; !defined(ANDROID_r4_4_0)
+ !defined(ANDROID_r4_2_0) &amp;&amp; !defined(ANDROID_r4_3_0) &amp;&amp; !defined(ANDROID_r4_4_0) &amp;&amp; !defined(ANDROID_r5_0_0)
 # error Building camera wrapper for your version of Android is not supported by OpenCV.\
  You need to modify OpenCV sources in order to compile camera wrapper for your version of Android.
 #endif
@@ -8,7 +8,7 @@
 #include &lt;camera/Camera.h&gt;
 #include &lt;camera/CameraParameters.h&gt;

-#if defined(ANDROID_r4_0_0) || defined(ANDROID_r4_0_3)
+#if defined(ANDROID_r4_0_0) || defined(ANDROID_r4_0_3) || defined(ANDROID_r5_0_0)
 # include &lt;system/camera.h&gt;
 #endif //defined(ANDROID_r4_0_0) || defined(ANDROID_r4_0_3)

@@ -22,7 +22,7 @@
 #elif defined(ANDROID_r4_1_1) || defined(ANDROID_r4_2_0)
 # include &lt;gui/ISurface.h&gt;
 # include &lt;gui/BufferQueue.h&gt;
-#elif defined(ANDROID_r4_3_0) || defined(ANDROID_r4_4_0)
+#elif defined(ANDROID_r4_3_0) || defined(ANDROID_r4_4_0) || defined(ANDROID_r5_0_0)
 # include &lt;gui/IGraphicBufferProducer.h&gt;
 # include &lt;gui/BufferQueue.h&gt;
 # include &lt;ui/GraphicBuffer.h&gt;
@@ -95,9 +95,25 @@ public:
     {
     }
 };
+#elif defined(ANDROID_r5_0_0)
+class ConsumerListenerStub: public android::BnConsumerListener
+{
+public:
+    virtual void onFrameAvailable()
+    {
+    }
+    virtual void onBuffersReleased()
+    {
+    }
+    virtual void onSidebandStreamChanged()
+    {
+    }
+    virtual ~ConsumerListenerStub()
+    {
+    }
+};   
 #endif

-
 std::string getProcessName()
 {
     std::string result;
@@ -156,6 +172,9 @@ protected:
 #if defined(ANDROID_r4_1_1) || defined(ANDROID_r4_2_0) || defined(ANDROID_r4_3_0) || defined(ANDROID_r4_4_0)
     sp&lt;BufferQueue&gt; queue;
     sp&lt;ConsumerListenerStub&gt; listener;
+#elif defined(ANDROID_r5_0_0)
+    sp&lt;IGraphicBufferProducer&gt; queue;
+    sp&lt;ConsumerListenerStub&gt; listener;
 #endif
     CameraParameters* params;
     CameraCallback cameraCallback;
@@ -344,7 +363,7 @@ public:

     virtual void postData(int32_t msgType, const sp&lt;IMemory&gt;&amp; dataPtr
 #if defined(ANDROID_r4_0_0) || defined(ANDROID_r4_0_3) || defined(ANDROID_r4_1_1) || defined(ANDROID_r4_2_0) \
- || defined(ANDROID_r4_3_0) || defined(ANDROID_r4_4_0)
+ || defined(ANDROID_r4_3_0) || defined(ANDROID_r4_4_0) || defined(ANDROID_r5_0_0)
                           ,camera_frame_metadata_t*
 #endif
                           )
@@ -689,6 +708,21 @@ CameraHandler* CameraHandler::initCameraConnect(const CameraCallback&amp; callback,
     bufferStatus = handler-&gt;camera-&gt;setPreviewTarget(handler-&gt;queue);
     if (bufferStatus != 0)
         LOGE("applyProperties: failed setPreviewTexture call; camera might not work correctly");
+# elif defined(ANDROID_r5_0_0)
+    void* buffer_queue_obj = operator new(sizeof(BufferQueue) + MAGIC_TAIL);
+
+    sp&lt;IGraphicBufferProducer&gt; producer;
+    sp&lt;IGraphicBufferConsumer&gt; consumer;
+    BufferQueue::createBufferQueue(&amp;producer, &amp;consumer);
+
+    consumer-&gt;setConsumerUsageBits(GraphicBuffer::USAGE_HW_TEXTURE);
+    void* consumer_listener_obj = operator new(sizeof(ConsumerListenerStub) + MAGIC_TAIL);
+    handler-&gt;listener = new(consumer_listener_obj) ConsumerListenerStub();
+    consumer-&gt;consumerConnect(handler-&gt;listener, true);
+    handler-&gt;queue = producer;
+    bufferStatus = handler-&gt;camera-&gt;setPreviewTarget(handler-&gt;queue);
+    if (bufferStatus != 0)
+        LOGE("applyProperties: failed setPreviewTexture call; camera might not work correctly");
 # endif

 #if (defined(ANDROID_r2_2_0) || defined(ANDROID_r2_3_3) || defined(ANDROID_r3_0_1))
@@ -730,7 +764,7 @@ void CameraHandler::closeCameraConnect()

     camera-&gt;stopPreview();
 #if defined(ANDROID_r4_0_0) || defined(ANDROID_r4_0_3) || defined(ANDROID_r4_1_1) || defined(ANDROID_r4_2_0) \
- || defined(ANDROID_r4_3_0) || defined(ANDROID_r4_4_0)
+ || defined(ANDROID_r4_3_0) || defined(ANDROID_r4_4_0) || defined(ANDROID_r5_0_0)
     camera-&gt;setPreviewCallbackFlags(CAMERA_FRAME_CALLBACK_FLAG_NOOP);
 #endif
     camera-&gt;disconnect();
@@ -1055,7 +1089,7 @@ void CameraHandler::applyProperties(CameraHandler** ppcameraHandler)
         (*ppcameraHandler)-&gt;params-&gt;setPreviewSize((*ppcameraHandler)-&gt;width, (*ppcameraHandler)-&gt;height);

 #if defined(ANDROID_r4_0_0) || defined(ANDROID_r4_0_3) || defined(ANDROID_r4_1_1) || defined(ANDROID_r4_2_0) \
- || defined(ANDROID_r4_3_0) || defined(ANDROID_r4_4_0)
+ || defined(ANDROID_r4_3_0) || defined(ANDROID_r4_4_0) || defined(ANDROID_r5_0_0)
     CameraHandler* handler=*ppcameraHandler;

     handler-&gt;camera-&gt;stopPreview();
@@ -1092,6 +1126,20 @@ void CameraHandler::applyProperties(CameraHandler** ppcameraHandler)
     bufferStatus = handler-&gt;camera-&gt;setPreviewTarget(handler-&gt;queue);
     if (bufferStatus != 0)
         LOGE("applyProperties: failed setPreviewTexture call; camera might not work correctly");
+# elif defined(ANDROID_r5_0_0)
+    void* buffer_queue_obj = operator new(sizeof(BufferQueue) + MAGIC_TAIL);
+    sp&lt;IGraphicBufferProducer&gt; producer;
+    sp&lt;IGraphicBufferConsumer&gt; consumer;
+    BufferQueue::createBufferQueue(&amp;producer, &amp;consumer);
+
+    consumer-&gt;setConsumerUsageBits(GraphicBuffer::USAGE_HW_TEXTURE);
+    void* consumer_listener_obj = operator new(sizeof(ConsumerListenerStub) + MAGIC_TAIL);
+    handler-&gt;listener = new(consumer_listener_obj) ConsumerListenerStub();
+    consumer-&gt;consumerConnect(handler-&gt;listener, true);
+    handler-&gt;queue = producer;
+    bufferStatus = handler-&gt;camera-&gt;setPreviewTarget(handler-&gt;queue);
+    if (bufferStatus != 0)
+        LOGE("applyProperties: failed setPreviewTexture call; camera might not work correctly");
 # endif

     handler-&gt;camera-&gt;setPreviewCallbackFlags( CAMERA_FRAME_CALLBACK_FLAG_ENABLE_MASK | CAMERA_FRAME_CALLBACK_FLAG_COPY_OUT_MASK);//with copy

&lt;/pre&gt;
-   % Done changed from 0 to 20
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Maksim Shabunin on 2015-06-09 15:50&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Please, note, that native camera support has been removed since OpenCV 3.0. This module depends on private Android headers which can be changed in any Android version and by any device vendor making reliable support almost impossible. Furthermore, it has been reported that Java version works quite well in current popular Android versions.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Bastien Bourineau on 2015-06-21 03:39&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Yes I saw that bad news :/
Is there in simple sample to control the camera and get data from ndk through jni java interface ?
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Maksim Shabunin on 2015-06-22 08:29&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Do you mean something like this: https://github.com/Itseez/opencv/tree/master/samples/android/tutorial-2-mixedprocessing ?
The recommended way is to get frame via Android camera interface and then process it using your native library.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Bastien Bourineau on 2015-06-24 09:07&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Yes something like that :)
Thanks
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Abhijat  Biswas on 2015-07-02 15:15&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Is it enough to add this into the reference library? Do we need to update our OpenCV manager on the phone as well?
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='opencv-pushbot' date='2020-01-14T08:11:58Z'>
		Native camera is not supported on Android any more.
		</comment>
	</comments>
</bug>