<bug id='8275' author='anatoly-spb' open_date='2017-02-26T22:48:41Z' closed_time='2020-04-09T02:51:31Z'>
	<summary>OpenCV 3.2.0 + OpenCL: Intel HD Graphics 4600 driver crashed when haarcascade_eye_tree_eyeglasses.xml is used</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.2
Operating System / Platform =&gt;Windows 10 64 Bit
Compiler =&gt; Visual Studio 2015 x64
Profile =&gt; FULL_PROFILE
OpenCL Version =&gt; OpenCL 1.2
OpenCL Platform =&gt; Intel(R) OpenCL
OpenCL Vendor =&gt; Intel(R) Corporation
OpenCL EXTENSIONS =&gt; cl_intel_dx9_media_sharing cl_khr_3d_image_writes cl_khr_byte_addressable_store cl_khr_d3d11_sharing cl_khr_depth_images cl_khr_dx9_media_sharing cl_khr_gl_sharing cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_icd cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_spir
OpenCL Device =&gt; Intel(R) HD Graphics 4600

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

I try to run example with haarcascade_eye_tree_eyeglasses.xml to detect eyes but when I try to invoke
&lt;denchmark-code&gt;   ed.detectMultiScale(faceROI, eyes, 1.1, 2, 0 | CV_HAAR_SCALE_IMAGE, Size(30, 30)); // HERE IS THE DRIVER CRASHED
&lt;/denchmark-code&gt;

driver crashes
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;#include "opencv2/opencv.hpp"
#include "opencv2/core/ocl.hpp"

using namespace cv;
int main(int, char**)
{
  if (!ocl::haveOpenCL()) {
    std::cout &lt;&lt; "Error: OpenCL is not supported!" &lt;&lt; std::endl;
    return 1;
  }
  ocl::setUseOpenCL(true);
  VideoCapture cap(0);
  if (!cap.isOpened())
    return -1;
  CascadeClassifier fd("C:\\opencv\\build\\etc\\haarcascades\\haarcascade_frontalface_alt2.xml");
  CascadeClassifier ed("C:\\opencv\\build\\etc\\haarcascades\\haarcascade_eye_tree_eyeglasses.xml");
  namedWindow("Face detection", 1);
  std::vector&lt;Rect&gt; faces;
  for (;;)
  {
    UMat frame, frameGray;
    cap &gt;&gt; frame; // get a new frame from camera
    cvtColor(frame, frameGray, COLOR_BGR2GRAY);
    equalizeHist(frameGray, frameGray);
    fd.detectMultiScale(frameGray, faces, 1.1, 2, 0 | CV_HAAR_SCALE_IMAGE, Size(30, 30));
    for (size_t i = 0; i &lt; faces.size(); i++)
    {
      Point center(faces[i].x + faces[i].width*0.5, faces[i].y + faces[i].height*0.5);
      ellipse(frame, center, Size(faces[i].width*0.5, faces[i].height*0.5), 0, 0, 360, Scalar(255, 0, 255), 4, 8, 0);
      auto faceROI = frameGray(faces[i]);
      std::vector&lt;Rect&gt; eyes;
      ed.detectMultiScale(faceROI, eyes, 1.1, 2, 0 | CV_HAAR_SCALE_IMAGE, Size(30, 30)); // HERE IS THE DRIVER CRASHED
      for (size_t j = 0; j &lt; eyes.size(); j++)
      {
        Point center(faces[i].x + eyes[j].x + eyes[j].width*0.5, faces[i].y + eyes[j].y + eyes[j].height*0.5);
        int radius = cvRound((eyes[j].width + eyes[j].height)*0.25);
        circle(frame, center, radius, Scalar(255, 0, 0), 4, 8, 0);
      }
    }
    imshow("Face detection", frame);
    if (((signed char)waitKey(30)) &gt;= 0)
      break;
  }
  return 0;
}

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='anatoly-spb' date='2017-02-26T23:01:44Z'>
		Could you add exact driver version (or link to driver download page from downloadcenter.intel.com)? or add an output of clinfo program?
Did you try to run OpenCV tests (opencv_test_objdetect)?
Is display driver resets device (this my happen for large OpenCL tasks) or is system hangs completely?
		</comment>
		<comment id='2' author='anatoly-spb' date='2017-02-27T00:25:53Z'>
		Alalek, thank you for your response. When I run the program, program is hanged on ed.detectMultiScale(faceROI, eyes, 1.1, 2, 0 | CV_HAAR_SCALE_IMAGE, Size(30, 30)); and after 10-20 seconds Windows shows that "driver has been reset".  Here is clinfo output
&lt;denchmark-code&gt;Number of platforms:				 2
  Platform Profile:				 FULL_PROFILE
  Platform Version:				 OpenCL 1.2 
  Platform Name:				 Intel(R) OpenCL
  Platform Vendor:				 Intel(R) Corporation
  Platform Extensions:				 cl_intel_dx9_media_sharing cl_khr_3d_image_writes cl_khr_byte_addressable_store cl_khr_d3d11_sharing cl_khr_depth_images cl_khr_dx9_media_sharing cl_khr_gl_sharing cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_icd cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_spir
  Platform Profile:				 FULL_PROFILE
  Platform Version:				 OpenCL 1.2 CUDA 8.0.0
  Platform Name:				 NVIDIA CUDA
  Platform Vendor:				 NVIDIA Corporation
  Platform Extensions:				 cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_fp64 cl_khr_byte_addressable_store cl_khr_icd cl_khr_gl_sharing cl_nv_compiler_options cl_nv_device_attribute_query cl_nv_pragma_unroll cl_nv_d3d10_sharing cl_khr_d3d10_sharing cl_nv_d3d11_sharing cl_nv_copy_opts


  Platform Name:				 Intel(R) OpenCL
Number of devices:				 2
  Device Type:					 CL_DEVICE_TYPE_GPU
  Vendor ID:					 8086h
  Max compute units:				 20
  Max work items dimensions:			 3
    Max work items[0]:				 512
    Max work items[1]:				 512
    Max work items[2]:				 512
  Max work group size:				 512
  Preferred vector width char:			 1
  Preferred vector width short:			 1
  Preferred vector width int:			 1
  Preferred vector width long:			 1
  Preferred vector width float:			 1
  Preferred vector width double:		 0
  Native vector width char:			 1
  Native vector width short:			 1
  Native vector width int:			 1
  Native vector width long:			 1
  Native vector width float:			 1
  Native vector width double:			 0
  Max clock frequency:				 1150Mhz
  Address bits:					 64
  Max memory allocation:			 390280806
  Image support:				 Yes
  Max number of images read arguments:		 128
  Max number of images write arguments:		 128
  Max image 2D width:				 16384
  Max image 2D height:				 16384
  Max image 3D width:				 2048
  Max image 3D height:				 2048
  Max image 3D depth:				 2048
  Max samplers within kernel:			 16
  Max size of kernel argument:			 1024
  Alignment (bits) of base address:		 1024
  Minimum alignment (bytes) for any datatype:	 128
  Single precision floating point capability
    Denorms:					 No
    Quiet NaNs:					 Yes
    Round to nearest even:			 Yes
    Round to zero:				 Yes
    Round to +ve and infinity:			 Yes
    IEEE754-2008 fused multiply-add:		 No
  Cache type:					 Read/Write
  Cache line size:				 64
  Cache size:					 262144
  Global memory size:				 1561123226
  Constant buffer size:				 65536
  Max number of constant args:			 8
  Local memory type:				 Scratchpad
  Local memory size:				 65536
  Kernel Preferred work group size multiple:	 32
  Error correction support:			 0
  Unified memory for Host and Device:		 1
  Profiling timer resolution:			 80
  Device endianess:				 Little
  Available:					 Yes
  Compiler available:				 Yes
  Execution capabilities:				 
    Execute OpenCL kernels:			 Yes
    Execute native function:			 No
  Queue on Host properties:				 
    Out-of-Order:				 No
    Profiling :					 Yes
  Platform ID:					 005AFB20
  Name:						 Intel(R) HD Graphics 4600
  Vendor:					 Intel(R) Corporation
  Device OpenCL C version:			 OpenCL C 1.2 
  Driver version:				 20.19.15.4531
  Profile:					 FULL_PROFILE
  Version:					 OpenCL 1.2 
  Extensions:					 cl_intel_accelerator cl_intel_advanced_motion_estimation cl_intel_ctz cl_intel_d3d11_nv12_media_sharing cl_intel_dx9_media_sharing cl_intel_motion_estimation cl_intel_simultaneous_sharing cl_intel_subgroups cl_khr_3d_image_writes cl_khr_byte_addressable_store cl_khr_d3d10_sharing cl_khr_d3d11_sharing cl_khr_depth_images cl_khr_dx9_media_sharing cl_khr_gl_depth_images cl_khr_gl_event cl_khr_gl_msaa_sharing cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_gl_sharing cl_khr_icd cl_khr_image2d_from_buffer cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_spir 


  Device Type:					 CL_DEVICE_TYPE_CPU
  Vendor ID:					 8086h
  Max compute units:				 8
  Max work items dimensions:			 3
    Max work items[0]:				 8192
    Max work items[1]:				 8192
    Max work items[2]:				 8192
  Max work group size:				 8192
  Preferred vector width char:			 1
  Preferred vector width short:			 1
  Preferred vector width int:			 1
  Preferred vector width long:			 1
  Preferred vector width float:			 1
  Preferred vector width double:		 1
  Native vector width char:			 32
  Native vector width short:			 16
  Native vector width int:			 8
  Native vector width long:			 4
  Native vector width float:			 8
  Native vector width double:			 4
  Max clock frequency:				 2400Mhz
  Address bits:					 32
  Max memory allocation:			 536838144
  Image support:				 Yes
  Max number of images read arguments:		 480
  Max number of images write arguments:		 480
  Max image 2D width:				 16384
  Max image 2D height:				 16384
  Max image 3D width:				 2048
  Max image 3D height:				 2048
  Max image 3D depth:				 2048
  Max samplers within kernel:			 480
  Max size of kernel argument:			 3840
  Alignment (bits) of base address:		 1024
  Minimum alignment (bytes) for any datatype:	 128
  Single precision floating point capability
    Denorms:					 Yes
    Quiet NaNs:					 Yes
    Round to nearest even:			 Yes
    Round to zero:				 No
    Round to +ve and infinity:			 No
    IEEE754-2008 fused multiply-add:		 No
  Cache type:					 Read/Write
  Cache line size:				 64
  Cache size:					 262144
  Global memory size:				 2147352576
  Constant buffer size:				 131072
  Max number of constant args:			 480
  Local memory type:				 Global
  Local memory size:				 32768
  Kernel Preferred work group size multiple:	 128
  Error correction support:			 0
  Unified memory for Host and Device:		 1
  Profiling timer resolution:			 427
  Device endianess:				 Little
  Available:					 Yes
  Compiler available:				 Yes
  Execution capabilities:				 
    Execute OpenCL kernels:			 Yes
    Execute native function:			 Yes
  Queue on Host properties:				 
    Out-of-Order:				 Yes
    Profiling :					 Yes
  Platform ID:					 005AFB20
  Name:						 Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz
  Vendor:					 Intel(R) Corporation
  Device OpenCL C version:			 OpenCL C 1.2 
  Driver version:				 5.2.0.10094
  Profile:					 FULL_PROFILE
  Version:					 OpenCL 1.2 (Build 10094)
  Extensions:					 cl_khr_icd cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_byte_addressable_store cl_khr_depth_images cl_khr_3d_image_writes cl_intel_exec_by_local_thread cl_khr_spir cl_khr_dx9_media_sharing cl_intel_dx9_media_sharing cl_khr_d3d11_sharing cl_khr_gl_sharing cl_khr_fp64 


  Platform Name:				 NVIDIA CUDA
Number of devices:				 1
  Device Type:					 CL_DEVICE_TYPE_GPU
  Vendor ID:					 10deh
  Max compute units:				 2
  Max work items dimensions:			 3
    Max work items[0]:				 1024
    Max work items[1]:				 1024
    Max work items[2]:				 64
  Max work group size:				 1024
  Preferred vector width char:			 1
  Preferred vector width short:			 1
  Preferred vector width int:			 1
  Preferred vector width long:			 1
  Preferred vector width float:			 1
  Preferred vector width double:		 1
  Native vector width char:			 1
  Native vector width short:			 1
  Native vector width int:			 1
  Native vector width long:			 1
  Native vector width float:			 1
  Native vector width double:			 1
  Max clock frequency:				 1019Mhz
  Address bits:					 32
  Max memory allocation:			 536870912
  Image support:				 Yes
  Max number of images read arguments:		 256
  Max number of images write arguments:		 16
  Max image 2D width:				 16384
  Max image 2D height:				 16384
  Max image 3D width:				 4096
  Max image 3D height:				 4096
  Max image 3D depth:				 4096
  Max samplers within kernel:			 32
  Max size of kernel argument:			 4352
  Alignment (bits) of base address:		 4096
  Minimum alignment (bytes) for any datatype:	 128
  Single precision floating point capability
    Denorms:					 Yes
    Quiet NaNs:					 Yes
    Round to nearest even:			 Yes
    Round to zero:				 Yes
    Round to +ve and infinity:			 Yes
    IEEE754-2008 fused multiply-add:		 Yes
  Cache type:					 Read/Write
  Cache line size:				 128
  Cache size:					 32768
  Global memory size:				 2147483648
  Constant buffer size:				 65536
  Max number of constant args:			 9
  Local memory type:				 Scratchpad
  Local memory size:				 49152
  Kernel Preferred work group size multiple:	 32
  Error correction support:			 0
  Unified memory for Host and Device:		 0
  Profiling timer resolution:			 1000
  Device endianess:				 Little
  Available:					 Yes
  Compiler available:				 Yes
  Execution capabilities:				 
    Execute OpenCL kernels:			 Yes
    Execute native function:			 No
  Queue on Host properties:				 
    Out-of-Order:				 Yes
    Profiling :					 Yes
  Platform ID:					 006253F8
  Name:						 GeForce GT 755M
  Vendor:					 NVIDIA Corporation
  Device OpenCL C version:			 OpenCL C 1.2 
  Driver version:				 376.54
  Profile:					 FULL_PROFILE
  Version:					 OpenCL 1.2 CUDA
  Extensions:					 cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_fp64 cl_khr_byte_addressable_store cl_khr_icd cl_khr_gl_sharing cl_nv_compiler_options cl_nv_device_attribute_query cl_nv_pragma_unroll cl_nv_d3d10_sharing cl_khr_d3d10_sharing cl_nv_d3d11_sharing cl_nv_copy_opts


&lt;/denchmark-code&gt;

the driver has the latest version:
&lt;denchmark-link:http://files.rsdn.org/12237/4600.PNG&gt;http://files.rsdn.org/12237/4600.PNG&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='anatoly-spb' date='2017-02-27T00:41:20Z'>
		Does NVIDIA GPU device works fine (via environment parameter: OPENCV_OPENCL_DEVICE=NVIDIA:GPU: or =:GPU:1)?
Could you try OpenCL CPU device too (via environment parameter: OPENCV_OPENCL_DEVICE=:CPU:)?
		</comment>
		<comment id='4' author='anatoly-spb' date='2017-02-27T00:56:48Z'>
		When I set OPENCV_OPENCL_DEVICE=NVIDIA CUDA:GPU:GeForce GT 755M, the program works without any problems, but CPU takes about 50%.
When I set OPENCV_OPENCL_DEVICE=:CPU:, I observe the driver crash:
&lt;denchmark-link:http://files.rsdn.org/12237/opencv_opencl_hangs.PNG&gt;screenshot&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='anatoly-spb' date='2017-02-27T01:13:03Z'>
		Thanks for update!
 should not use GPU at all, so driver crash looks very strange.
Could you check that OpenCL device is selected properly?
Device name should be "Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz": &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.2.0/modules/ts/src/ocl_test.cpp#L137&gt;1&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/opencv/opencv/blob/3.2.0/modules/ts/src/ocl_test.cpp#L154&gt;2&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='6' author='anatoly-spb' date='2017-02-27T01:24:40Z'>
		I have added print of current device name:
&lt;denchmark-code&gt;  std::cout &lt;&lt; "OPENCV_OPENCL_DEVICE=" &lt;&lt; getenv("OPENCV_OPENCL_DEVICE") &lt;&lt; std::endl;
  auto&amp; context = ocl::Context::getDefault();
  for (size_t i = 0; i &lt; context.ndevices(); i++) {
    std::cout &lt;&lt; context.device(i).name() &lt;&lt; std::endl;
  }
&lt;/denchmark-code&gt;

And when I set OPENCV_OPENCL_DEVICE=:CPU: I get the following:
&lt;denchmark-link:http://files.rsdn.org/12237/opencv_opencl_cpu.png&gt;access violation&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='anatoly-spb' date='2017-02-27T10:30:20Z'>
		Thank you!
Bug is confirmed on Linux system with CPU OpenCL (Intel) device (lena.jpg image is used - result is crash).
Without OpenCL (device=disabled) detection works good.
		</comment>
		<comment id='8' author='anatoly-spb' date='2017-02-27T11:21:25Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
, thank you for your time!
		</comment>
		<comment id='9' author='anatoly-spb' date='2017-03-03T17:12:50Z'>
		&lt;denchmark-link:https://github.com/anatoly-spb&gt;@anatoly-spb&lt;/denchmark-link&gt;
 Unfortunately, crash on my machine is not related to object detection code.
Could you apply patch &lt;denchmark-link:https://github.com/opencv/opencv/pull/8313&gt;#8313&lt;/denchmark-link&gt;
 and try again OpenCL CPU device?
Could you please add cv::imwrite("frame.png", frame); statement and attach image to this issue?
		</comment>
	</comments>
</bug>