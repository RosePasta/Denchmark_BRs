<bug id='9863' author='homm' open_date='2017-10-16T16:47:51Z' closed_time='2019-11-18T12:06:51Z'>
	<summary>cv2.GaussianBlur produces darker results than input</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.3.0 master
Operating System / Platform =&gt; Ubuntu 16.04 / x86_64
Compiler =&gt; gcc 5.4

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

GaussianBlur produces darker results than the input image.
Original Image:
&lt;denchmark-link:https://user-images.githubusercontent.com/128982/31622948-8c81076c-b2a6-11e7-8b21-dc1803e39556.png&gt;&lt;/denchmark-link&gt;

&gt;&gt;&gt; cv2.imwrite('gaus.30.cv2.png', cv2.GaussianBlur(im, (151, 151), 30))
&lt;denchmark-link:https://user-images.githubusercontent.com/128982/31623282-9ddb3180-b2a7-11e7-96bc-be7b07ec4fc0.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;$ gm convert gaus.0.png -blur 75x30 gaus.30.gm.png
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/128982/31623794-452271be-b2a9-11e7-8d31-848d37be08cc.png&gt;&lt;/denchmark-link&gt;

Images should look the same, but this is obvious, that produced by OpenCV is much darker.
&lt;denchmark-h:h3&gt;Proof that results produced by OpenCV is wrong&lt;/denchmark-h&gt;

In theory, Gaussian blur shouldn't change color distribution or lightness. So, lets calculate lightness of the images:
# Using Pillow
from PIL import Image 

def lightness(im):
    hist = im.histogram()
    return [
        sum(i*v for i, v in enumerate(hist[:256])) / im.width / im.height,
        sum(i*v for i, v in enumerate(hist[256:512])) / im.width / im.height,
        sum(i*v for i, v in enumerate(hist[512:])) / im.width / im.height
    ]

# [59.76, 69.08, 40.2]
print(lighnes(Image.open('gaus.0.png')))

# [59.73, 69.18, 39.94]
print(lighnes(Image.open('gaus.30.gm.png')))

# [53.86, 62.26, 36.22]
print(lighnes(Image.open('gaus.30.cv2.png')))
	</description>
	<comments>
		<comment id='1' author='homm' date='2017-10-16T20:14:54Z'>
		Looks like the discrepancy is only for CV_8U type?
&lt;denchmark-code&gt;diff ImageMagick / GaussianBlur CV_8U
diff_b= 3.72009277344
diff_g= 6.92227783203
diff_r= 5.87456054688

diff ImageMagick / GaussianBlur CV_32F
diff_b= -0.263266247775
diff_g= 0.0798971206896
diff_r= -0.0453944416418

diff ImageMagick / sepFilter2D CV_8U
diff_b= 3.72009277344
diff_g= 6.92227783203
diff_r= 5.87456054688

diff ImageMagick / sepFilter2D CV_32F
diff_b= -0.263266247775
diff_g= 0.0798971206896
diff_r= -0.0453944416418

&lt;/denchmark-code&gt;

More tests with different Gaussian kernel sizes:

ksize=11, sigma=30:

&lt;denchmark-code&gt;diff ImageMagick / GaussianBlur CV_8U
diff_b= 0.469177246094
diff_g= 1.1412109375
diff_r= 0.923785400391

diff ImageMagick / GaussianBlur CV_32F
diff_b= -0.467183839615
diff_g= -0.469239479038
diff_r= -0.469786457056
&lt;/denchmark-code&gt;


ksize=41, sigma=30:

&lt;denchmark-code&gt;diff ImageMagick / GaussianBlur CV_8U
diff_b= -1.40687255859
diff_g= -2.06359863281
diff_r= -1.86463623047

diff ImageMagick / GaussianBlur CV_32F
diff_b= -0.460932953184
diff_g= -0.435742572248
diff_r= -0.456756945207
&lt;/denchmark-code&gt;


ksize=121, sigma=30:

&lt;denchmark-code&gt;diff ImageMagick / GaussianBlur CV_8U
diff_b= -1.57329711914
diff_g= -2.19058837891
diff_r= -2.00388183594

diff ImageMagick / GaussianBlur CV_32F
diff_b= -0.305351354854
diff_g= -0.0147031555618
diff_r= -0.121201964526
&lt;/denchmark-code&gt;


ksize=151, sigma=30:

&lt;denchmark-code&gt;diff ImageMagick / GaussianBlur CV_8U
diff_b= 3.72009277344
diff_g= 6.92227783203
diff_r= 5.87456054688

diff ImageMagick / GaussianBlur CV_32F
diff_b= -0.263266247775
diff_g= 0.0798971206896
diff_r= -0.0453944416418
&lt;/denchmark-code&gt;

Full code:
&lt;denchmark-code&gt;import cv2 as cv
import numpy as np

im = cv.imread('snake.png')
im_blur_gm = cv.imread('gaus.30.gm.png')

im_blur_cv_8u = cv.GaussianBlur(im, (151, 151), 30)

diff_b = im_blur_gm[:,:,0].astype(float) - im_blur_cv_8u[:,:,0].astype(float)
diff_g = im_blur_gm[:,:,1].astype(float) - im_blur_cv_8u[:,:,1].astype(float)
diff_r = im_blur_gm[:,:,2].astype(float) - im_blur_cv_8u[:,:,2].astype(float)

print "diff ImageMagick / GaussianBlur CV_8U"
print "diff_b=", np.mean(diff_b)
print "diff_g=", np.mean(diff_g)
print "diff_r=", np.mean(diff_r)

np.savetxt('diff_b.txt', diff_b)
np.savetxt('diff_g.txt', diff_g)
np.savetxt('diff_r.txt', diff_r)

im_float = np.zeros(im.shape, dtype=np.float32)

for i in xrange(im.shape[0]):
  for j in xrange(im.shape[1]):
    im_float[i,j,0] = im[i,j,0]
    im_float[i,j,1] = im[i,j,1]
    im_float[i,j,2] = im[i,j,2]

im_blur_cv_float = cv.GaussianBlur(im_float, (151, 151), 30)

diff_b = im_blur_gm[:,:,0].astype(float) - im_blur_cv_float[:,:,0]
diff_g = im_blur_gm[:,:,1].astype(float) - im_blur_cv_float[:,:,1]
diff_r = im_blur_gm[:,:,2].astype(float) - im_blur_cv_float[:,:,2]

print "\ndiff ImageMagick / GaussianBlur CV_32F"
print "diff_b=", np.mean(diff_b)
print "diff_g=", np.mean(diff_g)
print "diff_r=", np.mean(diff_r)

np.savetxt('diff_b_float.txt', diff_b)
np.savetxt('diff_g_float.txt', diff_g)
np.savetxt('diff_r_float.txt', diff_r)

kernel = cv.getGaussianKernel(151, 30, cv.CV_32F)

im_sep_cv_8u = cv.sepFilter2D(im, cv.CV_8U, kernel, kernel)

diff_b = im_blur_gm[:,:,0].astype(float) - im_sep_cv_8u[:,:,0].astype(float)
diff_g = im_blur_gm[:,:,1].astype(float) - im_sep_cv_8u[:,:,1].astype(float)
diff_r = im_blur_gm[:,:,2].astype(float) - im_sep_cv_8u[:,:,2].astype(float)

print "\ndiff ImageMagick / sepFilter2D CV_8U"
print "diff_b=", np.mean(diff_b)
print "diff_g=", np.mean(diff_g)
print "diff_r=", np.mean(diff_r)

im_sep_cv_float = cv.sepFilter2D(im, cv.CV_32F, kernel, kernel)

diff_b = im_blur_gm[:,:,0].astype(float) - im_sep_cv_float[:,:,0]
diff_g = im_blur_gm[:,:,1].astype(float) - im_sep_cv_float[:,:,1]
diff_r = im_blur_gm[:,:,2].astype(float) - im_sep_cv_float[:,:,2]

print "\ndiff ImageMagick / sepFilter2D CV_32F"
print "diff_b=", np.mean(diff_b)
print "diff_g=", np.mean(diff_g)
print "diff_r=", np.mean(diff_r)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='homm' date='2019-01-24T16:57:34Z'>
		I had the same issue.
For anyone wondering, you can use getGaussianKernel and sepFilter2D to avoid the issue.
		</comment>
		<comment id='3' author='homm' date='2019-05-04T22:57:28Z'>
		
you can use getGaussianKernel and sepFilter2D to avoid the issue.

What issue to avoid?
Results from experiments above shows the same numbers:
&lt;denchmark-code&gt;diff ImageMagick / GaussianBlur CV_8U
diff_b= 3.72009277344
diff_g= 6.92227783203
diff_r= 5.87456054688

diff ImageMagick / sepFilter2D CV_8U
diff_b= 3.72009277344
diff_g= 6.92227783203
diff_r= 5.87456054688
&lt;/denchmark-code&gt;

Difference is observed between 8U / 32F cases.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Proper way for making of these experiments is to drop pixels affected by borders at least (probably they are handled in a different ways).
		</comment>
		<comment id='4' author='homm' date='2019-05-06T18:43:42Z'>
		I am using OpenCV 3.4.
On a big image:
&lt;denchmark-code&gt;im: (3648, 4864, 3)
im_blur_gm: (3648, 4864, 3)
diff ImageMagick / GaussianBlur CV_8U
diff_b= 11.6140492281
diff_g= 12.2392454725
diff_r= 12.1626385103

diff ImageMagick / GaussianBlur CV_32F
diff_b= -0.498279786766
diff_g= -0.498219731421
diff_r= -0.498563998672

diff ImageMagick / sepFilter2D CV_8U
diff_b= 11.6140573585
diff_g= 12.2392529355
diff_r= 12.1626454272

diff ImageMagick / sepFilter2D CV_32F
diff_b= -0.498279760832
diff_g= -0.498219566537
diff_r= -0.498563828562
&lt;/denchmark-code&gt;

Setting explicitly sigmaX=30, sigmaY=30:
&lt;denchmark-code&gt;im: (3648, 4864, 3)
im_blur_gm: (3648, 4864, 3)
diff ImageMagick / GaussianBlur CV_8U
diff_b= -0.498629633803
diff_g= -0.498437173969
diff_r= -0.498979240853

diff ImageMagick / GaussianBlur CV_32F
diff_b= -0.498289962178
diff_g= -0.498230124242
diff_r= -0.498574525185

diff ImageMagick / sepFilter2D CV_8U
diff_b= 11.6140573585
diff_g= 12.2392529355
diff_r= 12.1626454272

diff ImageMagick / sepFilter2D CV_32F
diff_b= -0.498279760832
diff_g= -0.498219566537
diff_r= -0.498563828562
&lt;/denchmark-code&gt;

On a small image (snake) (old code):
&lt;denchmark-code&gt;im: (320, 512, 3)
im_blur_gm: (320, 512, 3)
diff ImageMagick / GaussianBlur CV_8U
diff_b= 4.4182333754
diff_g= 8.35163664377
diff_r= 7.0989853956

diff ImageMagick / GaussianBlur CV_32F
diff_b= -0.496995073647
diff_g= -0.4971752022
diff_r= -0.498224385727

diff ImageMagick / sepFilter2D CV_8U
diff_b= 4.4182333754
diff_g= 8.35163664377
diff_r= 7.09900178662

diff ImageMagick / sepFilter2D CV_32F
diff_b= -0.496995206189
diff_g= -0.497175293301
diff_r= -0.498224482238
&lt;/denchmark-code&gt;

On a small image (snake) (new code):
&lt;denchmark-code&gt;im: (320, 512, 3)
im_blur_gm: (320, 512, 3)
diff ImageMagick / GaussianBlur CV_8U
diff_b= -0.49654968939
diff_g= -0.496648035536
diff_r= -0.497320067531

diff ImageMagick / GaussianBlur CV_32F
diff_b= -0.497001285997
diff_g= -0.497185361616
diff_r= -0.49823264558

diff ImageMagick / sepFilter2D CV_8U
diff_b= 4.4182333754
diff_g= 8.35163664377
diff_r= 7.09900178662

diff ImageMagick / sepFilter2D CV_32F
diff_b= -0.496995206189
diff_g= -0.497175293301
diff_r= -0.498224482238
&lt;/denchmark-code&gt;

Code:

from __future__ import print_function
import numpy as np
import cv2 as cv
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--image', type=str, help='path to original image file')
parser.add_argument('--blur', type=str, help='path to ImageMagick blurred image file')
args = parser.parse_args()

im = cv.imread(args.image)
im_blur_gm = cv.imread(args.blur)

print("im:", im.shape)
print("im_blur_gm:", im_blur_gm.shape)

im_blur_cv_8u = cv.GaussianBlur(im, (151, 151), sigmaX=30, sigmaY=30)

cv.imwrite("cv_blur.png", im_blur_cv_8u)

diff_b = im_blur_gm[:,:,0].astype(float) - im_blur_cv_8u[:,:,0].astype(float)
diff_g = im_blur_gm[:,:,1].astype(float) - im_blur_cv_8u[:,:,1].astype(float)
diff_r = im_blur_gm[:,:,2].astype(float) - im_blur_cv_8u[:,:,2].astype(float)

diff_b = diff_b[75:-76,75:-76]
diff_g = diff_g[75:-76,75:-76]
diff_r = diff_r[75:-76,75:-76]

print("diff ImageMagick / GaussianBlur CV_8U")
print("diff_b=", np.mean(diff_b))
print("diff_g=", np.mean(diff_g))
print("diff_r=", np.mean(diff_r))

np.savetxt('diff_b.txt', diff_b)
np.savetxt('diff_g.txt', diff_g)
np.savetxt('diff_r.txt', diff_r)

im_float = im.astype(np.float32)
im_blur_cv_float = cv.GaussianBlur(im_float, (151, 151), sigmaX=30, sigmaY=30)

diff_b = im_blur_gm[:,:,0].astype(float) - im_blur_cv_float[:,:,0]
diff_g = im_blur_gm[:,:,1].astype(float) - im_blur_cv_float[:,:,1]
diff_r = im_blur_gm[:,:,2].astype(float) - im_blur_cv_float[:,:,2]

diff_b = diff_b[75:-76,75:-76]
diff_g = diff_g[75:-76,75:-76]
diff_r = diff_r[75:-76,75:-76]

print("\ndiff ImageMagick / GaussianBlur CV_32F")
print("diff_b=", np.mean(diff_b))
print("diff_g=", np.mean(diff_g))
print("diff_r=", np.mean(diff_r))

np.savetxt('diff_b_float.txt', diff_b)
np.savetxt('diff_g_float.txt', diff_g)
np.savetxt('diff_r_float.txt', diff_r)

kernel = cv.getGaussianKernel(151, 30, cv.CV_32F)

im_sep_cv_8u = cv.sepFilter2D(im, cv.CV_8U, kernel, kernel)

diff_b = im_blur_gm[:,:,0].astype(float) - im_sep_cv_8u[:,:,0].astype(float)
diff_g = im_blur_gm[:,:,1].astype(float) - im_sep_cv_8u[:,:,1].astype(float)
diff_r = im_blur_gm[:,:,2].astype(float) - im_sep_cv_8u[:,:,2].astype(float)

diff_b = diff_b[75:-76,75:-76]
diff_g = diff_g[75:-76,75:-76]
diff_r = diff_r[75:-76,75:-76]

print("\ndiff ImageMagick / sepFilter2D CV_8U")
print("diff_b=", np.mean(diff_b))
print("diff_g=", np.mean(diff_g))
print("diff_r=", np.mean(diff_r))

im_sep_cv_float = cv.sepFilter2D(im, cv.CV_32F, kernel, kernel)

diff_b = im_blur_gm[:,:,0].astype(float) - im_sep_cv_float[:,:,0]
diff_g = im_blur_gm[:,:,1].astype(float) - im_sep_cv_float[:,:,1]
diff_r = im_blur_gm[:,:,2].astype(float) - im_sep_cv_float[:,:,2]

diff_b = diff_b[75:-76,75:-76]
diff_g = diff_g[75:-76,75:-76]
diff_r = diff_r[75:-76,75:-76]

print("\ndiff ImageMagick / sepFilter2D CV_32F")
print("diff_b=", np.mean(diff_b))
print("diff_g=", np.mean(diff_g))
print("diff_r=", np.mean(diff_r))


When sigma1==sigma2, it should use IPP, otherwise ocvSepFilter.
The &lt;denchmark-link:https://docs.opencv.org/3.4/d4/d86/group__imgproc__filter.html#gaabe8c836e97159a9193fb0b11ac52cf1&gt;documentation&lt;/denchmark-link&gt;
 says:
sigmaY Gaussian  kernel standard deviation in Y direction; if sigmaY is zero, it is set  to be equal to sigmaX, if both sigmas are zeros, they are computed from  ksize.width and ksize.height, respectively (see getGaussianKernel  for details); to fully control the result regardless of possible future  modifications of all this semantics, it is recommended to specify all  of ksize, sigmaX, and sigmaY. 
I don't think sigmaY==sigmaX when sigmaY=0 is valid anymore.
		</comment>
		<comment id='5' author='homm' date='2019-07-13T07:58:54Z'>
		I had the same issue.
I guess that opencv makes an inaccurate approximation for int type data.
When data type is double, the issue no longer appear.
Python code:
&lt;denchmark-code&gt;img64f = (image/1.0)    
g = cv2.getGaussianKernel(rad, rad)    
img = (cv2.sepFilter2D(img64f, cv2.CV_64FC4, g, g) ).astype(np.uint8)  
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='homm' date='2019-10-23T17:01:04Z'>
		Problem has been introduced in bit-exact computation path.
Computation using floating-point numbers (32F/64F) looks well.
Main inaccurate calculations are performed during kernels conversion:

GaussianBlur =&gt; ufixedpoint16 (8-bit fraction part)
sepFilter2D =&gt; 8-bit fraction part (32-bit total)

For example, bit-exact GaussianBlur kernels may break their main property of sum(k) == 1.0.
There are several options for handling that:

don't call bit-exact code if bit-exact kernel is not a good approximation

"good approximation" should be well defined


try to adjust approximated kernel with saving sum(k) == 1.0 property.

This looks like crazy process (and it is hard to define that), but there is already special cases for sigma=0 and ksize=3,5,7 (these kernels are not accurate approximations from original formula)
Adjusting of approximated kernels in case of sepFilter2D() doesn't look good anyway (it is GaussianBlur approach only)



		</comment>
	</comments>
</bug>