<bug id='14965' author='YashasSamaga' open_date='2019-07-02T19:15:58Z' closed_time='2019-12-12T17:55:33Z'>
	<summary>DNN spews out inaccurate results after a backend/target switch</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 4.1 (master at 2bf8793)
Operating System / Platform =&gt; Windows 10 64-bit
Compiler =&gt; MSVC 19.16

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

Changing the preferable backend/target of a cv::dnn::Net leads to incorrect results on the new backend/target. The expectation is that the network should give similar results after a backend/target switch.
I am not sure if this is a bug or a missing feature. I couldn't find anything in the documentation which states that the backend/target cannot be changed once set.
This doesn't seem to be happening with every model; mobilenet_ssd_v1_coco_2017_11_17 is one model which doesn't work well with these backend/target switches.
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

MCVE:
The code below starts off with the OCV CPU backend. It performs a forward pass and then switches to the OpenCL target where it again performs a forward pass. It switches back to the CPU target and performs a forward pass again. The outputs from the three forward passes do not agree with each other.
Note that the outputs (first_detection and third_detection) are from the same backend-target combination but still give inaccurate results. The results from the OpenCL target are also inaccurate. This appears to happen with other backends and targets as well. Hence, it's a general problem with the cv::Net object.
&lt;denchmark-code&gt;#include &lt;iostream&gt;

#include &lt;opencv2/dnn.hpp&gt;
#include &lt;opencv2/imgproc.hpp&gt;

int main() {
    auto input_size = cv::Size(300, 300);

    cv::Mat image(input_size, CV_32FC3);
    cv::randu(image, cv::Scalar(0, 0, 0), cv::Scalar(255, 255, 255));

    cv::Mat blob = cv::dnn::blobFromImage(image, 1.0f, input_size, 0.0f);

    auto net = cv::dnn::readNetFromTensorflow("data/mobilenet_ssd_v1_coco_2017_11_17/ssd_mobilenet_v1_coco_2017_11_17.pb", "data/mobilenet_ssd_v1_coco_2017_11_17/ssd_mobilenet_v1_coco_2017_11_17.pbtxt");

    net.setPreferableBackend(cv::dnn::DNN_BACKEND_OPENCV);
    net.setPreferableTarget(cv::dnn::DNN_TARGET_CPU);
    net.setInput(blob);
    auto first_detection = net.forward();

    net.setPreferableBackend(cv::dnn::DNN_BACKEND_OPENCV);
    net.setPreferableTarget(cv::dnn::DNN_TARGET_OPENCL);
    net.setInput(blob);
    net.forward();
    auto second_detection = net.forward();

    net.setPreferableBackend(cv::dnn::DNN_BACKEND_OPENCV);
    net.setPreferableTarget(cv::dnn::DNN_TARGET_CPU);
    net.setInput(blob);
    auto third_detection = net.forward();

    std::cout &lt;&lt; "Mismatches: " &lt;&lt; cv::countNonZero(first_detection - third_detection) &lt;&lt; std::endl;

    for (int i = 0; i &lt; 10; i++)
        std::cout &lt;&lt; first_detection.at&lt;float&gt;(i) &lt;&lt; ' ' &lt;&lt; third_detection.at&lt;float&gt;(i) &lt;&lt; std::endl;

    return 0;
}
&lt;/denchmark-code&gt;

Actual Output:
&lt;denchmark-code&gt;Mismatches: 590
0 0
1 1
0.0245883 0.0261505
0.768966 0.849214
-0.00513216 -0.00365399
1.03373 0.998887
0.0901401 0.239716
0 0
1 1
0.0209146 0.0254748
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='YashasSamaga' date='2019-07-02T19:25:37Z'>
		Disabling layer fusion (using Net::enableFusion) solves the problem.
I think the inaccurate results are due to the fusion process wrongly altering the already fused parameters.
		</comment>
		<comment id='2' author='YashasSamaga' date='2019-07-03T04:08:06Z'>
		We just do not consider backends switching. Is it a kind of tuning in your application?
		</comment>
		<comment id='3' author='YashasSamaga' date='2019-07-03T04:48:28Z'>
		I was trying to compare different backends/targets. It had worked for over 10 popular models so it seemed like a bug when it didn't work for one.
Anyway, for the record, the problem is because of a check in  of .
&lt;denchmark-link:https://github.com/opencv/opencv/blame/master/modules/dnn/src/layers/elementwise_layers.cpp#L1012-L1013&gt;https://github.com/opencv/opencv/blame/master/modules/dnn/src/layers/elementwise_layers.cpp#L1012-L1013&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;        if (power != 1.0f &amp;&amp; shift != 0.0f)
              return false;
&lt;/denchmark-code&gt;

Suppose power and shift are 1.0 and 0.0 respectively and a fusion requires shifting by 1.0. On the first call to tryFuse, the condition fails because of both power and shift and hence the fusion continues. On the second call to tryFuse, it fails again because power is still 1.0 even though shift is not 0.0.
		</comment>
	</comments>
</bug>