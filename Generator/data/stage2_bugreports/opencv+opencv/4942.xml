<bug id='4942' author='opencv-pushbot' open_date='2015-07-27T11:12:01Z' closed_time='2015-07-31T13:15:15Z'>
	<summary>KNN returns unexpected class</summary>
	<description>
Transferred from &lt;denchmark-link:http://code.opencv.org/issues/4217&gt;http://code.opencv.org/issues/4217&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;|| Mikulas Krupicka on 2015-02-25 12:28
|| Priority: High
|| Affected: 2.4.9 (latest release)
|| Category: ml
|| Tracker: Bug
|| Difficulty: 
|| PR: 
|| Platform: x64 / Linux
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;KNN returns unexpected class&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Let's assume the following code:

&lt;pre&gt;
KNearest knn;

Mat samples = (Mat_&lt;float&gt;(4,1) &lt;&lt; 1, 1.5, 2, 2.5);
Mat responses = (Mat_&lt;int&gt;(4,1) &lt;&lt; 4, 3, 2, 1);
knn.train(samples, responses);

Mat test_sample = (Mat_&lt;float&gt;(1,1) &lt;&lt; 1.1);
cv::Mat results, neighbours, dists;
knn.find_nearest(test_sample, 4, results, neighbours, dists);

cout &lt;&lt; results &lt;&lt; " - " &lt;&lt; neighbours &lt;&lt; ", " &lt;&lt; dists &lt;&lt; endl;
&lt;/pre&gt;

As the result is displayed class "1". Which is, in fact, the farthest one. I believe, the "4" should be returned instead.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;History&lt;/denchmark-h&gt;

&lt;denchmark-h:h5&gt;Nisarg Thakkar on 2015-02-26 15:26&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;I think this is working according to the algorithm. The output is 1 because on considering k=4, we get, 1 member from each class. And so, we can choose any class as the result for that particular node. We could return the class of the nearest neighbor if there multiple classes have the same count, but that would just lead to extra computation and it is unlikely that such a situation would occur if the data set is large and distributed.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='opencv-pushbot' date='2015-07-31T10:59:41Z'>
		I agree with Nisarg,
A sample is classified by a majority of vote of its k neighbors, not by a distance. So if you add one more train example with response 4 and sample 1.01:
&lt;denchmark-code&gt;cv::Mat samples = (cv::Mat_&lt;float&gt;(1,5) &lt;&lt; 1, 1.5, 2, 2.5, 1.01);
cv::Mat responses = (cv::Mat_&lt;int&gt;(1,5) &lt;&lt; 4,   3, 2,   1,    4);
&lt;/denchmark-code&gt;

the output will be 4 as expected, because four closest samples will be [4,4,3,2]. Tested on 2.4.12 and 3.0
if you want the closest one you can set k to 1.
		</comment>
	</comments>
</bug>