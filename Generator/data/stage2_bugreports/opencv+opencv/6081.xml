<bug id='6081' author='PolarNick239' open_date='2016-02-07T20:29:07Z' closed_time='2016-12-13T10:22:46Z'>
	<summary>Python bindings: ORB is broken</summary>
	<description>
Following code fails:
import cv2
img = cv2.imread('some_image.jpg')
orb = cv2.ORB_create(nfeatures=5000)
ps, descs = orb.detectAndCompute(img, None)
Error output:
&lt;denchmark-code&gt;OpenCV Error: Assertion failed (The data should normally be NULL!) in allocate, file /home/polarnick/coding/forks/opencv_3.1/modules/python/src2/cv2.cpp, line 163
---------------------------------------------------------------------------
error                                     Traceback (most recent call last)
&lt;ipython-input-4-03ae3bc0ea38&gt; in &lt;module&gt;()
----&gt; 1 ps, descs = orb.detectAndCompute(img, None)

error: /home/polarnick/coding/forks/opencv_3.1/modules/python/src2/cv2.cpp:163: error: (-215) The data should normally be NULL! in function allocate
&lt;/denchmark-code&gt;

Environment: Python 3.4, Ubuntu
Affects master and 3.1.0.
 if passing  (see &lt;denchmark-link:https://github.com/opencv/opencv/pull/6078&gt;#6078&lt;/denchmark-link&gt;
) - everything works
Can I pull-request this test case?
UPD:
The better workaround is cv2.ocl.setUseOpenCL(False) before ORB execution
The bug was introduced in commit &lt;denchmark-link:https://github.com/opencv/opencv/commit/190d00ea3e46feedd38a7417c0a5ab08b900a56b&gt;190d00e&lt;/denchmark-link&gt;
 (Pull request: &lt;denchmark-link:https://github.com/opencv/opencv/pull/5317&gt;#5317&lt;/denchmark-link&gt;
)
	</description>
	<comments>
		<comment id='1' author='PolarNick239' date='2016-02-08T00:41:25Z'>
		Looks like it is related to &lt;denchmark-link:https://github.com/opencv/opencv/pull/6009&gt;#6009&lt;/denchmark-link&gt;

Real problem is more general (these fixes violate T-API principles actually).
More accurate fix is to patch somehow allocator for python bindings
I believe you can create pull request with problem reproducer.
		</comment>
		<comment id='2' author='PolarNick239' date='2016-03-06T18:00:36Z'>
		Same problem with python 3.4 Windows 10 x64 using computers with 12 or 16 GB RAM.
The code works using a workstation with 32 GB  RAM
Is there a solution?
		</comment>
		<comment id='3' author='PolarNick239' date='2016-03-11T20:40:09Z'>
		Same problem on python3.5.2 | OSX 10 | opencv3 3.1.0_1
OpenCV Error: Assertion failed (The data should normally be NULL!) in allocate, file /tmp/opencv320160302-5467-cybcsk/opencv-3.1.0/modules/python/src2/cv2.cpp, line 163
Traceback (most recent call last):
File "/Volumes/Data RAID Set 1/Dropbox/python/opencv3/tests/orb.py", line 19, in 
kp, des = orb.detectAndCompute(img, None)
cv2.error: /tmp/opencv320160302-5467-cybcsk/opencv-3.1.0/modules/python/src2/cv2.cpp:163: error: (-215) The data should normally be NULL! in function allocate
		</comment>
		<comment id='4' author='PolarNick239' date='2016-03-12T10:25:21Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 Unfortunately I don't understand the internals of the T-API well enough to really be of help. My previous fix was merely pattern matching on what I was seeing used somewhere else. It seems like when the T-API stuff was introduced either a) the Python bindings were not updated sufficiently to account for the new range of types that can be passed or b) the Python allocators do not properly understand how to marshall data back and forth between the T-API types.
This must be at least the 4th place that I've seen these errors been reported so clearly this is a fairly widespread issue!
		</comment>
		<comment id='5' author='PolarNick239' date='2016-03-18T09:59:34Z'>
		As a temporary working stop-gap till the UMat / T-API issue is resolved, just disabling OpenCL support in run-time works for me: cv2.ocl.setUseOpenCL(False)
		</comment>
		<comment id='6' author='PolarNick239' date='2016-03-22T15:43:34Z'>
		Same problem with OpenCV 3.1, Python 2.7, Windows 10.  This seems to be a general problem with the Python bindings.  I have seen other chatter on the internet about a similar type of error message when using Python, but unrelated to usage of ORB.
# -*- coding: utf-8 -*-
import numpy as np
import cv2
import matplotlib
from matplotlib import pyplot as plt

img = cv2.imread('C:/Dev/bs/data-tools/TestCollateral/Mars3/final0.jpg',cv2.IMREAD_GRAYSCALE)
mask = np.ones(img.shape, np.uint8);

orb = cv2.ORB_create()

# ERROR OCCURS ON NEXT LINE:
kp, des = orb.detectAndCompute(img,None)
In the IPython console I get:
&lt;denchmark-code&gt;Traceback (most recent call last):

  File "&lt;ipython-input-3-906d4ad4cd53&gt;", line 1, in &lt;module&gt;
    runfile('C:/Users/davidi/Desktop/cvplay.py', wdir='C:/Users/davidi/Desktop')

  File "C:\Programs\Anaconda-py-2.7\lib\site-packages\spyderlib\widgets\externalshell\sitecustomize.py", line 685, in runfile
    execfile(filename, namespace)

  File "C:\Programs\Anaconda-py-2.7\lib\site-packages\spyderlib\widgets\externalshell\sitecustomize.py", line 71, in execfile
    exec(compile(scripttext, filename, 'exec'), glob, loc)

  File "C:/Users/davidi/Desktop/cvplay.py", line 13, in &lt;module&gt;
    kp, des = orb.detectAndCompute(img,None)

error: C:\builds\master_PackSlaveAddon-win64-vc12-static\opencv\modules\python\src2\cv2.cpp:163: error: (-215) The data should normally be NULL! in function NumpyAllocator::allocate
&lt;/denchmark-code&gt;

I followed tzickel's suggestion (above).  I added the following line of code to the top of my script and it fixed the problem.
cv2.ocl.setUseOpenCL(False)
		</comment>
		<comment id='7' author='PolarNick239' date='2016-03-22T19:10:14Z'>
		iirc &lt;denchmark-link:https://github.com/opencv/opencv/pull/6078&gt;#6078&lt;/denchmark-link&gt;
 is supposed to fix this issues.
		</comment>
		<comment id='8' author='PolarNick239' date='2016-03-22T19:55:33Z'>
		Same issue on Windows 7, Python 3.4.3 OpenCV 3.1.0
&lt;denchmark-code&gt;descriptor = cv2.ORB_create()
# ERROR OCCURS ON NEXT LINE:
kp1,des1 = descriptor.detectAndCompute(image,None)
&lt;/denchmark-code&gt;

Also same issue in Stitcher.stitch - seems used same code.
		</comment>
		<comment id='9' author='PolarNick239' date='2016-03-22T21:02:17Z'>
		
iirc #6078 is supposed to fix this issues.

Sadly no.
I found this issue, while writing tests for UMat support.
ORB for numpy array images is broken (in that PR too), while new version for UMat thin wrapper in that PR - works.
Workaround cv2.UMat(img) is not a golden bullet, because if image small - CPU implementation will be faster (memory transfer to GPU is quite expensive).
ORB was working before, so someone should make regression testing and find changes in past, that lead to these bugs. I will try to do this soon.
		</comment>
		<comment id='10' author='PolarNick239' date='2016-03-23T13:16:56Z'>
		The bug was introduced in commit &lt;denchmark-link:https://github.com/opencv/opencv/commit/190d00ea3e46feedd38a7417c0a5ab08b900a56b&gt;190d00e&lt;/denchmark-link&gt;
 (Pull request: &lt;denchmark-link:https://github.com/opencv/opencv/pull/5317&gt;#5317&lt;/denchmark-link&gt;
)
If somebody want to test many versions - you can use such minimized build configuration (in such way build takes one minute on my computer):
&lt;denchmark-code&gt;cmake -DWITH_CUDA=0 -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DWITH_FFMPEG=0\
 -DBUILD_opencv_highgui=OFF -DBUILD_opencv_objdetect=OFF -DBUILD_opencv_video=OFF\
 -DBUILD_opencv_videoio=OFF -DBUILD_opencv_calib3d=OFF -DBUILD_opencv_java=OFF\
 -DCMAKE_BUILD_TYPE=RelWithDebInfo PATH/TO/OPENCV/SRC
&lt;/denchmark-code&gt;

		</comment>
		<comment id='11' author='PolarNick239' date='2016-03-24T20:36:53Z'>
		Ok, what happens here (when OpenCL is enabled), the code flow is:

The python wrapper function (auto generated) for ORB's detectAndCompute defines an Mat called descriptors (in C++) and calls pyopencv_to on an input argument for it (which is usually not defined) and thus it set's descriptors allocator to numpy allocator and returns:
https://github.com/Itseez/opencv/blob/master/modules/python/src2/cv2.cpp#L229
afterwards it calls ORB_Impl::detectAndCompute with descriptors as OutputArray.
Because the Mat is empty, it creates it (allocates) inorder to save the data:
https://github.com/Itseez/opencv/blob/master/modules/features2d/src/orb.cpp#L1129
ocl_computeOrbDescriptors needs the input as an UMat, not a Mat, so the error described here occurs when _descriptors is converted to an UMat:
https://github.com/Itseez/opencv/blob/master/modules/features2d/src/orb.cpp#L1170
the Mat::getUMat function calls the Mat allocator (but now since the Mat is created in step 2 already, it has an allocated data pointer):
https://github.com/Itseez/opencv/blob/master/modules/core/src/umatrix.cpp#L292
Remember in the start the Mat allocator is set to be NumpyAllocator, but it does not accept an allocate call with allocated data, and aborts:
https://github.com/Itseez/opencv/blob/master/modules/python/src2/cv2.cpp#L163

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Now someone who understands UMat and Python bindings should figure out how to fix this :)
		</comment>
		<comment id='12' author='PolarNick239' date='2016-03-24T20:58:42Z'>
		These steps were working before, but in &lt;denchmark-link:https://github.com/opencv/opencv/commit/ad70ab404cb6954aa08b4172b32fd40e23100c8d&gt;ad70ab4&lt;/denchmark-link&gt;
 - UMat was changed, and that change (that affects step 4 in your description) leaded to such conflict.
I think &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 could help with this.
		</comment>
		<comment id='13' author='PolarNick239' date='2016-03-24T21:39:16Z'>
		OpenCL code path &lt;denchmark-link:https://github.com/Itseez/opencv/search?utf8=%E2%9C%93&amp;q=CV_OCL_RUN&gt;should not be executed&lt;/denchmark-link&gt;
 in case of non-UMat arguments.
Try to replace &lt;denchmark-link:https://github.com/Itseez/opencv/blob/3942b1f36261b196a264eb35c996222848fe3c93/modules/features2d/src/orb.cpp#L973&gt;here&lt;/denchmark-link&gt;
:
&lt;denchmark-code&gt;bool useOCL = ocl::useOpenCL();
&lt;/denchmark-code&gt;

to
&lt;denchmark-code&gt;bool useOCL = _descriptors.isUMat() &amp;&amp; ocl::useOpenCL();
&lt;/denchmark-code&gt;

I believe this should resolve this issue (but not a real problem)
		</comment>
		<comment id='14' author='PolarNick239' date='2016-03-25T08:06:33Z'>
		I think your solution isn't optimal since there are many code path before the descriptors (like computing the pyramids, etc...) that can be done in OCL and are internal to the function, no ?
Is there any documentation on UMatData implementation and on OCL not running with non UMat args ?
I guess all the python bindings code needs to be auto scanned for stuff like this (in case someone adds such code in the future and/or there currently exists other stuff like this)
		</comment>
		<comment id='15' author='PolarNick239' date='2016-03-25T09:55:52Z'>
		
OpenCL shouldn't be used when running OpenCV via Python

OpenCL should not be used when using non-UMat args.
It is due unexpected performance issues with discrete GPUs (data trasfer) / iGPU (creating/managing/destruction a lot of OpenCL objects).
		</comment>
		<comment id='16' author='PolarNick239' date='2016-03-25T20:34:19Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 Seeing there are quite a few problematic interactions between the python bindings and OpenCL, and there are no tests to figure out what is going on, maybe by default cv2.cpp should disable OpenCL on load, and if a user wants it, he will explicitly enable it ? (I can see bug reports here about stuff like the MOG2 as well, and who knows what else).
		</comment>
		<comment id='17' author='PolarNick239' date='2016-07-08T17:42:13Z'>
		I think there is a fix for this:
&lt;denchmark-link:https://github.com/opencv/opencv/pull/6847&gt;#6847&lt;/denchmark-link&gt;

T-API python support implemented &lt;denchmark-link:https://github.com/opencv/opencv/pull/6847&gt;#6847&lt;/denchmark-link&gt;

		</comment>
		<comment id='18' author='PolarNick239' date='2016-07-08T18:42:13Z'>
		No, that pull request does not contain fix.
It will lead to possibility to workaround the problem by using OpenCL implementation of ORB, but the CPU ORB still broken.
		</comment>
		<comment id='19' author='PolarNick239' date='2016-08-10T17:26:24Z'>
		Hi, I'm facing the same error after doing this:
&lt;denchmark-code&gt;import cv2
stitcher = cv2.createStitcher(False)
a = cv2.imread("image1.jpg")
b = cv2.imread("image2.jpg")
stitcher.stitch((a, b))
&lt;/denchmark-code&gt;

Details:
OpenCV compiled from sources version 3.1.0
Python 2.7.6
I'm setting cv2.ocl.setUseOpenCL(False)
Error mesage:
(...)/opencv/modules/python/src2/cv2.cpp:163: error: (-215) The data should normally be NULL! in function allocate
		</comment>
		<comment id='20' author='PolarNick239' date='2016-08-17T12:57:37Z'>
		same as &lt;denchmark-link:https://github.com/opencv/opencv/issues/6969&gt;#6969&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='21' author='PolarNick239' date='2017-02-17T18:50:44Z'>
		hi. im very new to image processing. When i execute the below line,
cv2.ocl.setUseOpenCL(False)
it shows 'module' object has no attribute 'ocl' .
could anyone please help me..thank you..
		</comment>
		<comment id='22' author='PolarNick239' date='2017-09-13T02:11:37Z'>
		&lt;denchmark-link:https://github.com/Rajashalini&gt;@Rajashalini&lt;/denchmark-link&gt;
  , It's 'oc1' not 'ocl' . Replace 'L' by 'ONE' 1 .
		</comment>
		<comment id='23' author='PolarNick239' date='2020-02-20T22:27:25Z'>
		I am facing the same issue in my Windows 8.1 on Lenovo Y50-70.
"Python has stopped working A problem caused the program to stop working correctly. Windows will close the program and notify you if a solution is available".
It is happening at this line
kp1, des1 = orb.detectAndCompute(cv_image, None)
I am on Anaconda. Setting ocl to false didn't help.
		</comment>
	</comments>
</bug>