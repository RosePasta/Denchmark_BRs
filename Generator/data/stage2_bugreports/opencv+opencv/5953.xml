<bug id='5953' author='mattzzw' open_date='2016-01-12T15:32:23Z' closed_time='2016-04-25T12:50:55Z'>
	<summary>CLAHE filter crashes with pixel values &amp;gt; 12bit and behaves very different compared to 8bit</summary>
	<description>
I am using OpenCV 3.1 with 16bit tiff files (pixel values raning from 0 to 2^16) but any 16bit array with values &gt; 2^12 will do.
Reading the image with imread and flag CV_LOAD_IMAGE_GRAYSCALE works fine. The CLAHE result is comparable to other CLAHE implementations (e.g. jimage).
However, using flag CV_LOAD_IMAGE_UNCHANGED the application crashes in the moment clahe.appy() is being called.
If CLAHE input pixel values are scaled down to 12bit, the application does not crash and some kind of CLAHE filtering is applied but I highly doubt that CLAHE processing is done correctly in this case because the behaviour of the filter is very different compared to 8 bit input data (uint8). E.g. inceasing clip factor or tile number lets the image become way too bright.
The 16bit processing was added with
&lt;denchmark-link:https://github.com/opencv/opencv/pull/3033&gt;#3033&lt;/denchmark-link&gt;
 resulting in &lt;denchmark-link:https://github.com/opencv/opencv/commit/563200fbf63525ad64952a481f896e4551154dc7&gt;563200f&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='mattzzw' date='2016-01-12T21:23:41Z'>
		Here is a python script that shows the problem:
The script creates an input and an output window and a third window with trackers to adjust clip/grid parameters.

PROC_8BIT=1: CLAHE works fine with 8bit data
PROC_8BIT=0, CLAHE_WIDTH=12: CLAHE works with 12bit data but differently
PROC_8BIT=0, CLAHE_WIDTH=16 (or &gt;12): CLAHE crashes

Same is true for c++ or c#.
#!/opt/local/bin/python

import numpy as np
from scipy import misc
from scipy import ndimage
import cv2

PROC_8BIT = 1     # 1|0: Limit CLAHE Processing to 8 bit input data
CLAHE_WIDTH = 12  # bit width for CLAHE algorithm
                  # values &gt; 12 will make clahe crash!    

if (PROC_8BIT):
   clahe_scale = 1
else:
   clahe_scale = 2**(16 - CLAHE_WIDTH)

def on_trackbar(x):
   global rows, cols
   global input_image
   global clip, grid

   # Read trackbar values
   clip = cv2.getTrackbarPos('clip','Params')
   grid = cv2.getTrackbarPos('grid','Params')

   if grid &lt; 1:
       grid = 1

   # CLAHE
   if clip == 0:
       output_image = input_image
   else:
       clahe = cv2.createCLAHE(clip, (grid, grid))
       # sclae input values,
       # limit to CLAHE_WIDTH (more than 12 bit will lead to crash)
       clahe_input = input_image / clahe_scale
       output_image = clahe.apply(clahe_input)
       # clahe_scale back from CLAHE_WIDTH to 16 bit
       output_image = output_image * clahe_scale

   cv2.imshow("Output", output_image)


if __name__ == "__main__":

   input_image =  misc.lena()

   if (PROC_8BIT):
      # force data type
      input_image = input_image.astype(np.uint8)
   else:
      # dito and fake 16 bit data
      input_image = input_image.astype(np.uint16) * 2**8

   print input_image
   rows,cols = input_image.shape
   print "Image is %d x %d, %s" % (cols, rows, input_image.dtype)

   # create windows
   cv2.namedWindow("Input", 1)
   cv2.imshow("Input", input_image) 

   cv2.namedWindow("Output", 1)
   cv2.imshow("Output", input_image) 

   cv2.namedWindow("Params", 1)
   # Hack to set tracker window size:
   blank_image = np.zeros((2,800,1), dtype=np.uint8)
   cv2.imshow("Params", blank_image)

   # add trackbars
   cv2.createTrackbar('grid', 'Params', 16, 64, on_trackbar)
   cv2.createTrackbar('clip', 'Params',3, 64, on_trackbar)

   on_trackbar(0)
   key = cv2.waitKey(0)
   cv2.destroyAllWindows()

		</comment>
	</comments>
</bug>