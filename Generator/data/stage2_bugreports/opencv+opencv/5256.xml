<bug id='5256' author='Cylix' open_date='2015-08-27T06:31:12Z' closed_time='2017-11-28T13:22:29Z'>
	<summary>drawContours, strange behavior</summary>
	<description>
I have a list of contours to draw. Some of these contours intersect themselves.
When I want to draw them with OpenCV, I simply use the cv::drawContours function.
However, the behavior is quite strange.
Here is a quote of the official &lt;denchmark-link:http://docs.opencv.org/modules/imgproc/doc/structural_analysis_and_shape_descriptors.html#drawcontours&gt;documentation&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;C++: void drawContours(InputOutputArray image, InputArrayOfArrays contours, int contourIdx, const Scalar&amp; color, int thickness=1, int lineType=8, InputArray hierarchy=noArray(), int maxLevel=INT_MAX, Point offset=Point() )
Parameters: 
contourIdx â€“ Parameter indicating a contour to draw. If it is negative, all the contours are drawn.
&lt;/denchmark-code&gt;

So, from the documentation, if I want to draw all my areas, filled in black, I just have to do:
&lt;denchmark-code&gt;cv::drawContours(this-&gt;mask.raw,
                 this-&gt;areas, -1,
                 cv::Scalar(0,0,0),
                 cv::FILLED);
&lt;/denchmark-code&gt;

However, this gives me the following ouput:
&lt;denchmark-link:http://i.stack.imgur.com/IwYMe.png&gt;&lt;/denchmark-link&gt;

Here, we can clearly see that all my areas are NOT filled in black.
But if I loop over my areas list and call cv::drawContours for each area:
&lt;denchmark-code&gt;unsigned int i = 0;
for (const auto&amp; area : this-&gt;areas)
  cv::drawContours(this-&gt;mask.raw,
                   this-&gt;areas, i++,
                   cv::Scalar(0,0,0),
                   cv::FILLED);
&lt;/denchmark-code&gt;

I got the good ouput which is quite different from the first one:
&lt;denchmark-link:http://i.stack.imgur.com/6oYV9.png&gt;&lt;/denchmark-link&gt;

Have I missed something from the documentation? Could someone explain me the behavior of cv::drawContours and what is the different of calling it one time for all areas and calling it each time for each area?
	</description>
	<comments>
		<comment id='1' author='Cylix' date='2015-08-27T10:11:49Z'>
		OpenCV version?
		</comment>
		<comment id='2' author='Cylix' date='2015-08-27T12:24:42Z'>
		3.0.0-dev (I'm using the master branch).
		</comment>
		<comment id='3' author='Cylix' date='2015-09-08T13:46:09Z'>
		Using the latest github repo and the following code
#include "opencv2/opencv.hpp"
using namespace std;
using namespace cv;
int main( int argc, char* argv[] )
{
    // Load in test image
    Mat image = imread("/home/spu/Desktop/FindingContours.png", IMREAD_GRAYSCALE);
    imshow("original", image); waitKey(0);
    // Apply contour detection
    vector&lt; vector&lt; Point &gt; &gt; contours;
    findContours(image, contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE);
    // Create empty mask image and draw the contours back
    Mat empty_mask = Mat::ones(image.rows, image.cols, CV_8UC3)*255;
    drawContours(empty_mask, contours, -1, Scalar(0,0,0), FILLED);
    // Show
    imshow("result", empty_mask); waitKey(0);
    return 0;
}

I get on the original image
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/4621239/9736299/9c816e14-5640-11e5-9847-06d9c798243e.png&gt;&lt;/denchmark-link&gt;

The following result
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/4621239/9736305/a37fbe14-5640-11e5-81c7-c8f38b7d38cd.png&gt;&lt;/denchmark-link&gt;

Besides from the fact that I am somehow initializing my colours wrongly and I am not in the mood to go digging for that error, it seems to me that the problem does not re-occur?
		</comment>
		<comment id='4' author='Cylix' date='2015-09-08T14:36:28Z'>
		In my case, areas passed to drawContours may overlap (and they do in the screenshots I've posted).
However, it is not the case in your example.
So, it appears that the bug only occurs when areas intersect between themselves.
		</comment>
		<comment id='5' author='Cylix' date='2017-09-04T07:04:45Z'>
		I have the exact same problem, it would be really helpful to fix the bug.  I am using OpenCV version 3.1.0 on python.
		</comment>
		<comment id='6' author='Cylix' date='2017-10-31T17:30:44Z'>
		Described behavior is rather a feature than a bug. It is intended to draw nested contours as shapes with holes. So for the case of two nested squares one will get a frame rather than just an filled outer square.
&lt;denchmark-link:https://user-images.githubusercontent.com/13571155/32235715-4baedfe4-be71-11e7-9efe-038d81dfb982.png&gt;&lt;/denchmark-link&gt;

To draw contours this way the code avoid to fill areas that are inner to several contours(actually even amount of contours since decision on whether to fill the point is made by &lt;denchmark-link:https://en.wikipedia.org/wiki/Even%E2%80%93odd_rule&gt;even-odd rule&lt;/denchmark-link&gt;
 over all edges of all drew contours ) however this approach have a side effect of not filling contour intersections for not nested contours as well.
&lt;denchmark-link:https://user-images.githubusercontent.com/13571155/32236833-5f96f502-be74-11e7-8740-dfdd65428e47.png&gt;&lt;/denchmark-link&gt;

In order to remove the side effect complex contour matching should be performed prior to drawing.
While separation of nested and intersected contours will definitely ruin the performance it is not always possible without prior knowledge from application domain.
I.e. on the following image it's not obvious whether the hole is in left square, right square, both or it is just intersection of 3 squares.
&lt;denchmark-link:https://user-images.githubusercontent.com/13571155/32238349-97bf3788-be78-11e7-89e7-33c553f9c0d4.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='Cylix' date='2017-11-01T04:54:35Z'>
		&lt;denchmark-code&gt;Described behavior is rather a feature than a bug. It is intended to draw nested contours as shapes with holes. So for the case of two nested squares one will get a frame rather than just an filled outer square.
&lt;/denchmark-code&gt;

You basically said it:  It is intended to draw nested contours as shapes with holes..
This thing is nowhere in the documentation (at least, it was not at the time this issue was posted, but after giving a quick look, seems it is the same).
Your explanation makes sense, but from a user point of view, this is far away from what can be understood by reading the official documentation.
Thus, in my opinion, either the behavior is the right one and the documentation must be clarified because the output is confusing, either implementation should be changed.
Best
		</comment>
	</comments>
</bug>