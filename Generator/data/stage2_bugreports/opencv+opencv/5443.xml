<bug id='5443' author='amroamroamro' open_date='2015-10-02T19:14:41Z' closed_time='2015-12-23T16:15:00Z'>
	<summary>Uninitialized matrix in cv::ml::EM::predict</summary>
	<description>
When using EM from the ML module, calling the predict method throws an exception when the second array outputs is requested (the posterior probabilities of each component given each sample).
Here is a minimal example tested in OpenCV 3.0.0:
#include "opencv2/core.hpp"
#include "opencv2/ml.hpp"
using namespace cv;
using namespace cv::ml;

void main()
{
    // some data
    Mat samples(100, 2, CV_32F);
    randu(samples, 0.0, 1.0);
    Ptr&lt;TrainData&gt; data = TrainData::create(samples, ROW_SAMPLE, Mat());

    // train GMM, then predict
    Ptr&lt;EM&gt; em = EM::create();
    em-&gt;train(data, 0);
    Mat probs;
    float f = em-&gt;predict(samples, probs, 0);
}

The exception thrown:

OpenCV Error: Assertion failed (m.dims &gt;= 2) in cv::Mat::Mat,
file C:\builds\master_PackSlave-win64-vc12-shared\opencv\modules\core\src\matrix.cpp, line 441

The &lt;denchmark-link:https://github.com/Itseez/opencv/blob/master/modules/ml/src/em.cpp#L172&gt;reason&lt;/denchmark-link&gt;
 is that it doesn't properly initialize the output. The fix is easy, just add one line:
float predict(InputArray _inputs, OutputArray _outputs, int) const
{
    bool needprobs = _outputs.needed();
    Mat samples = _inputs.getMat(), probs, probsrow;
    // ...
    if( needprobs )
    {
        if( _outputs.fixedType() )
            ptype = _outputs.type();
        _outputs.create(samples.rows, nclusters, ptype);
        probs = _outputs.getMat();  // &lt;--------- this line is missing! -----------&gt;
    }
    // ...
    for( i = 0; i &lt; nsamples; i++ )
    {
        if( needprobs )
            probsrow = probs.row(i);
        Vec2d res = computeProbabilities(samples.row(i), needprobs ? &amp;probsrow : 0, ptype);
        // ...
    }
    // ...
}
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

I'm aware of the predict2 method, which works fine. I just wanted to report the bug in predict that comes from the StatModel shared interface.
I should also say that predict2 is a bit inconvenient because it only accpets one sample at-a-time, so we are forced to do this:
    Mat probs(samples.rows, em-&gt;getClustersNumber(), CV_32F);
    for (int i=0; i&lt;samples.rows; ++i)
        Vec2d res = em-&gt;predict2(samples.row(i), probs.row(i));
Perhaps the interface can be changed to accept multiple samples, and even improved by using a parallel_for like some of the other classifiers that have threaded predict methods...
	</description>
	<comments>
	</comments>
</bug>