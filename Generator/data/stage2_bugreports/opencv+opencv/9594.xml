<bug id='9594' author='traveller59' open_date='2017-09-08T12:42:37Z' closed_time='2017-09-09T11:15:29Z'>
	<summary>Dnn module unable to use dense layer in tensorflow frozen graph</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.3
Operating System / Platform =&gt; Windows 10 64 Bit
Compiler =&gt; Visual Studio 2015
Tensorflow =&gt; 1.3.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

When I using model with only conv2d layers, model works well, but when I want to add dense layer to model, it always leads to error:
error: D:\Build\OpenCV\opencv-3.3.0\modules\dnn\include\opencv2/dnn/shape_utils.hpp:159: error: (-215) start &lt; (int)shape.size() &amp;&amp; end &lt;= (int)shape.size() &amp;&amp; start &lt;= end in function cv::dnn::experimental_dnn_v1::total
&lt;denchmark-h:h5&gt;Code&lt;/denchmark-h&gt;

import numpy as np
import tensorflow as tf
import cv2
config = tf.ConfigProto()
config.gpu_options.visible_device_list = "0"
config.gpu_options.allow_growth=True
def freeze_graph(sess, model_folder, output_node_names, output_file_name='frozen_model.pb'):
    if not isinstance(output_node_names, list):
        output_node_names = [output_node_names]
    output_graph_path = model_folder + "/" + output_file_name
    clear_devices = True
    graph = tf.get_default_graph()
    input_graph_def = graph.as_graph_def()
    output_graph_def = tf.graph_util.convert_variables_to_constants(
        sess,  # The session is used to retrieve the weights
        input_graph_def,  # The graph_def is used to retrieve the nodes
        output_node_names)  # The output node names are used to select the usefull nodes

    with tf.gfile.GFile(output_graph_path, "wb") as f:
        f.write(output_graph_def.SerializeToString())
    print("Model pb file saved to", output_graph_path)
def dense(input_, name, n_out, act_fn=tf.nn.relu):
    n_in = input_.get_shape().as_list()[1]
    localw = tf.get_variable("weights", [n_in, n_out],
                             initializer=tf.glorot_uniform_initializer())
    localb = tf.get_variable("biases", [n_out],
                             initializer=tf.zeros_initializer())
    input_ = tf.add(tf.matmul(input_, localw), localb)
    input_ = act_fn(input_)
    return input_
tf.reset_default_graph()
sess = tf.InteractiveSession(config = config)
inp = tf.placeholder(tf.float32, [1, 28, 28, 1], 'input_inference')
x = tf.layers.conv2d(inputs=inp, filters=3, kernel_size=[1, 1],
                        activation=tf.nn.relu,
                        bias_initializer=tf.random_normal_initializer())
x  = tf.reshape(x, [1, -1])
x = dense(x, 'dense', 10)
sess.run(tf.global_variables_initializer())
freeze_graph(sess, "I:", x.name[:x.name.rfind(':')])

import cv2
model = 'I:/frozen_model.pb'
net = cv2.dnn.readNetFromTensorflow(model)
img = np.random.randint(0, 255, size=[28, 28, 1], dtype=np.uint8)
img_input = cv2.dnn.blobFromImage(img, 1, (28,28))
net.setInput(img_input, "input_inference");
prob = net.forward(x.name[:x.name.rfind(':')]);
	</description>
	<comments>
		<comment id='1' author='traveller59' date='2017-09-08T13:38:37Z'>
		&lt;denchmark-link:https://github.com/traveller59&gt;@traveller59&lt;/denchmark-link&gt;
, Thank you for the detailed description! I think PR &lt;denchmark-link:https://github.com/opencv/opencv/pull/9517&gt;#9517&lt;/denchmark-link&gt;
 might solve this problem. Could I ask you to try it?
		</comment>
		<comment id='2' author='traveller59' date='2017-09-09T11:15:29Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
 Thanks for your reply, your PR tell me I should use tf.nn.bias_add instead of tf.add and my problem is solved, but I don't know how to merge your pull request to source and test your code. In addition using tf.layers.dense leads to another error:

		</comment>
	</comments>
</bug>