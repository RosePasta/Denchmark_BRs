<bug id='18541' author='neilyoung' open_date='2020-10-08T11:18:27Z' closed_time='2020-12-07T21:53:03Z'>
	<summary>Undefined symbols for architecture x86_64:   "_jpeg_default_qtables"</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4.11
Operating System / Platform =&gt; macOS Catalina 10.15.7
Compiler =&gt;

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

I recently have updated my mac to 10.15.7. I also made a brew update.
I'm able to compile and run OpenCV 3.4.1 from source. At runtime it crashes in a function related to JPEG compression
&lt;denchmark-code&gt;C  [libopencv_imgcodecs.3.4.1.dylib+0x3fd7a]  jpeg_CreateCompress+0x2a
C  [libopencv_imgcodecs.3.4.1.dylib+0x1a5cb]  cv::JpegEncoder::write(cv::Mat const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt; const&amp;)+0xdb
C  [libopencv_imgcodecs.3.4.1.dylib+0x8dd0]   cv::imencode(cv::String const&amp;, cv::_InputArray const&amp;,  std::__1::vector&lt;unsigned char, std::__1::allocator&lt;unsigned  char&gt; &gt;&amp;, std::__1::vector&lt;int,  std::__1::allocator&lt;int&gt; &gt; const&amp;)+0x5d0
&lt;/denchmark-code&gt;

I was downloading 3.4.11 sources and tried the compilation. It fails, again somewhere in the near of JPEG:
&lt;denchmark-code&gt;[ 50%] Linking CXX shared library ../../lib/libopencv_imgcodecs.dylib
Undefined symbols for architecture x86_64:
  "_jpeg_default_qtables", referenced from:
      cv::JpegEncoder::write(cv::Mat const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt; const&amp;) in grfmt_jpeg.cpp.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make[2]: *** [lib/libopencv_imgcodecs.3.4.11.dylib] Error 1
make[1]: *** [modules/imgcodecs/CMakeFiles/opencv_imgcodecs.dir/all] Error 2
make: *** [all] Error 2

&lt;/denchmark-code&gt;

I'm also no longer able to read JPEG files from disk with a simple C++ sample app (OpenCV 3.4.1)
Is there any chance to approach this issue? I suppose it is something in the environment, which is no longer compatible.
	</description>
	<comments>
		<comment id='1' author='neilyoung' date='2020-10-08T11:55:41Z'>
		Found
set(JPEG_LIB_VERSION 62)
in libjpeg-turbo/CMakeList.txt
Set it to
set(JPEG_LIB_VERSION 70)
experimentally.
Now I'm over the link problem, since jpeg_default_qtables is compiled now. To be investigated..
&lt;denchmark-code&gt;[ 50%] Building CXX object modules/imgcodecs/CMakeFiles/opencv_imgcodecs.dir/src/exif.cpp.o
[ 50%] Linking CXX shared library ../../lib/libopencv_imgcodecs.dylib
[ 50%] Built target opencv_imgcodecs
Scanning dependencies of target opencv_videoio
[ 50%] Building CXX object modules/videoio/CMakeFiles/opencv_videoio.dir/src/videoio_registry.cpp.o
[ 50%] Building CXX object modules/videoio/CMakeFiles/opencv_videoio.dir/src/videoio_c.cpp.o
[ 51%] Building CXX object modules/videoio/CMakeFiles/opencv_videoio.dir/src/cap.cpp.o
[ 51%] Building CXX object modules/videoio/CMakeFiles/opencv_videoio.dir/src/cap_images.cpp.o
[ 51%] Building CXX object modules/videoio/CMakeFiles/opencv_videoio.dir/src/cap_mjpeg_encoder.cpp.o
[ 51%] Building CXX object modules/videoio/CMakeFiles/opencv_videoio.dir/src/cap_mjpeg_decoder.cpp.o
[
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='neilyoung' date='2020-10-08T16:53:49Z'>
		No, doesn't compile on macOS 10.15.7.
This time it had problems with some test cases...
&lt;denchmark-code&gt;[ 84%] Building CXX object modules/videoio/CMakeFiles/opencv_test_videoio.dir/test/test_fourcc.cpp.o
[ 84%] Building CXX object modules/videoio/CMakeFiles/opencv_test_videoio.dir/test/test_gstreamer.cpp.o
In file included from /Users/decades/Documents/dragonflyExternal/opencv-3.4.11/modules/videoio/test/test_gstreamer.cpp:5:
In file included from /Users/decades/Documents/dragonflyExternal/opencv-3.4.11/modules/videoio/test/test_precomp.hpp:7:
In file included from /Users/decades/Documents/dragonflyExternal/opencv-3.4.11/modules/ts/include/opencv2/ts.hpp:125:
/Users/decades/Documents/dragonflyExternal/opencv-3.4.11/modules/ts/include/opencv2/ts/ts_gtest.h:1392:53: error: array initializer must be an
      initializer list or string literal
      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3) : f0_(f0), f1_(f1), f2_(f2),
                                                    ^
/Users/decades/Documents/dragonflyExternal/opencv-3.4.11/modules/ts/include/opencv2/ts/ts_gtest.h:1755:10: note: in instantiation of member function
 

&lt;/denchmark-code&gt;

Well, my make is pretty straight forward:
&lt;denchmark-code&gt;mkdir build
cd build
cmake -DCMAKE_BUILD_TYPE=Release ..
make

&lt;/denchmark-code&gt;

What could go wrong?
		</comment>
		<comment id='3' author='neilyoung' date='2020-10-08T16:54:50Z'>
		Well, as long as it is incomplete question (invalid tracker) then rest in peace together...
		</comment>
		<comment id='4' author='neilyoung' date='2020-10-09T09:50:06Z'>
		Have you solved it? I ran into the same problem?
		</comment>
		<comment id='5' author='neilyoung' date='2020-10-09T09:52:04Z'>
		&lt;denchmark-link:https://github.com/liuzhihui2046&gt;@liuzhihui2046&lt;/denchmark-link&gt;
 Yes, reported here &lt;denchmark-link:https://github.com/microsoft/vcpkg/issues/13766#issuecomment-706013096&gt;microsoft/vcpkg#13766 (comment)&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='neilyoung' date='2020-10-09T10:06:48Z'>
		&lt;denchmark-link:https://github.com/neilyoung&gt;@neilyoung&lt;/denchmark-link&gt;
  it works!!! thank you very much! it took me a whole day！！
		</comment>
		<comment id='7' author='neilyoung' date='2020-10-09T10:53:43Z'>
		&lt;denchmark-link:https://github.com/neilyoung&gt;@neilyoung&lt;/denchmark-link&gt;

Although this was compiled and installed successfully, there was a problem when reading a ".jpg" image.the image data is empty. your image  can be read normally?
		</comment>
		<comment id='8' author='neilyoung' date='2020-10-09T11:03:55Z'>
		Yes I can. Did you sudo make install after build?
Here is my test code, and runs.
&lt;denchmark-code&gt;#include &lt;opencv2/opencv.hpp&gt;

using namespace std;

int main( int argc, char** argv )
{
    // Read image
    cv::Mat img = cv::imread("../res/paris.jpg", cv::IMREAD_COLOR);

    cout &lt;&lt; "Input image size: " &lt;&lt; img.size() &lt;&lt; endl;
    cout &lt;&lt; "Input image number of channels: " &lt;&lt; img.channels() &lt;&lt; endl;

    // Convert it to black and white (3-channel BGR to 1-channel grayscale)
    cv::Mat workingImg;
    cv::cvtColor(img, workingImg, cv::COLOR_BGR2GRAY);

    cout &lt;&lt; "Channels after BGR2GRAY conversion: " &lt;&lt; workingImg.channels() &lt;&lt; endl;

    // Convert it back to 3-channel
    cv::cvtColor(workingImg, workingImg, cv::COLOR_GRAY2BGR);

    cout &lt;&lt; "Channels after GRAY2BGR conversion: " &lt;&lt; workingImg.channels() &lt;&lt; endl;

    // Set JPEG parameters to convert the frame to a byte array later
    std::vector&lt;int&gt; vParams(2);
    vParams[0] = cv::IMWRITE_JPEG_QUALITY;
    vParams[1] = 70;

    // Convert this image to a JPEG byte array

    std::cout &lt;&lt; "JPEG conversion..." &lt;&lt; endl;

    std::vector&lt;unsigned char&gt; vBytes;
    cv::imencode(".jpg", workingImg, vBytes, vParams);

    // Display the size of the JPEG byte array
    std::cout &lt;&lt; "JPEG size: " &lt;&lt; vBytes.size() &lt;&lt; " bytes" &lt;&lt; endl;
}
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;./OpenCVTest 
Input image size: [1280 x 853]
Input image number of channels: 3
Channels after BGR2GRAY conversion: 1
Channels after GRAY2BGR conversion: 3
JPEG conversion...
JPEG size: 167690 bytes

&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='neilyoung' date='2020-10-09T11:19:08Z'>
		
make install

It is NOT necessary to run apps, especially with sudo.
(avoid using make install until you have robust process how to uninstall that)
		</comment>
		<comment id='10' author='neilyoung' date='2020-10-09T11:21:30Z'>
		??
I wrote this app test app and of course I don't run it as sudo.
sudo make install is the last step of the OpenCV build after make in order to copy the dylibs to a common place...
		</comment>
		<comment id='11' author='neilyoung' date='2020-11-26T00:35:38Z'>
		There is conflict between 3rdparty libjpeg and external libjpeg (usually comes with VTK).
Try this workaround: cmake -DWITH_VTK=OFF ...
		</comment>
		<comment id='12' author='neilyoung' date='2020-11-26T23:09:01Z'>
		Some cases should be resolved by this commit: &lt;denchmark-link:https://github.com/opencv/opencv/commit/387a76ba598fa1e177f8d79a2760ec75a4e9b0e1&gt;387a76b&lt;/denchmark-link&gt;
 (file  )
		</comment>
	</comments>
</bug>