<bug id='12831' author='laurencedev' open_date='2018-10-15T03:36:54Z' closed_time='2018-11-13T16:18:48Z'>
	<summary>error: 'posix_memalign' was not declared in this scope</summary>
	<description>
&lt;denchmark-h:h1&gt;Env:&lt;/denchmark-h&gt;

OS: Windows 10 , 64 bits
CMake: 3.12.0
Compiler: mingw-w64 with x86_64-8.1.0-posix-seh-rt_v6-rev0
&lt;denchmark-h:h1&gt;Replication:&lt;/denchmark-h&gt;


Git clone OpenCV.git and OpenCV_contrib.git. Here:

OpenCV:  &lt;denchmark-link:https://github.com/opencv/opencv/commit/5115e5decbef657ceb234d21ad8e8e33a6c96ca4&gt;5115e5d&lt;/denchmark-link&gt;

OpenCV_Contrib:  7c619cba3379342aa59461dfb055acdb03b439f1

Build with the command :

&lt;denchmark-code&gt;cmake -DCMAKE_BUILD_TYPE=Release ^
 -DENABLE_PRECOMPILED_HEADERS=OFF ^
 -DWITH_CUDA=OFF ^
 -DWITH_IPP=OFF ^
 -DWITH_MSMF=OFF ^
 -DWITH_OPENCL=OFF ^
 -DOPENCV_EXTRA_MODULES_PATH=c:\OpenCVContrib_GitDir\modules ^
 -G "MinGW Makefiles" ^
 c:\OpenCV_GitDir
&lt;/denchmark-code&gt;

then mingw32-make -j8. This will produce:
&lt;denchmark-code&gt;...\3rdparty\ade\ade-0.1.1c\sources\ade\source\alloc.cpp:31:16: error: 'posix_memalign' was not declared in this scope
     auto res = posix_memalign(&amp;ret, std::max(sizeof(void*), alignment), size);
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Observation:&lt;/denchmark-h&gt;

Maybe the line jas_malloc.c#L106 


opencv/3rdparty/libjasper/jas_malloc.c


         Line 106
      in
      b39cd06






 if (posix_memalign(&amp;ptr, MEMALLOC_ALIGNMENT, size)) { 




 missed the HAVE_POSIX_MEMALIGN checking.
	</description>
	<comments>
		<comment id='1' author='laurencedev' date='2018-10-15T05:46:45Z'>
		mingw (7.2.0) does not find the fallback here:
&lt;denchmark-link:https://github.com/opencv/ade/blob/b9ff79779b552c4e20234fb47f1533d1d1657970/sources/ade/source/alloc.cpp#L22-L35&gt;https://github.com/opencv/ade/blob/b9ff79779b552c4e20234fb47f1533d1d1657970/sources/ade/source/alloc.cpp#L22-L35&lt;/denchmark-link&gt;

because , for weird reasons,  is no more defined.
(it's somewhat a mystery. &lt;denchmark-link:https://github.com/opencv/ade&gt;ade built as a standalone library&lt;/denchmark-link&gt;
 compiles fine with mingw, just not in the gapi/opencv context.)
shouldn't it be  there, &lt;denchmark-link:https://github.com/opencv/ade/blob/b9ff79779b552c4e20234fb47f1533d1d1657970/sources/ade/source/alloc.cpp#L39&gt;and also here&lt;/denchmark-link&gt;
 anyway ?
		</comment>
		<comment id='2' author='laurencedev' date='2018-10-15T09:54:03Z'>
		/cc &lt;denchmark-link:https://github.com/dmatveev&gt;@dmatveev&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/Hardcode84&gt;@Hardcode84&lt;/denchmark-link&gt;

relates &lt;denchmark-link:https://github.com/opencv/opencv/pull/9237&gt;#9237&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

ADE fix: &lt;denchmark-link:https://github.com/opencv/ade/pull/6&gt;opencv/ade#6&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='laurencedev' date='2018-11-13T11:01:26Z'>
		I have this exact problem when attempting to build the just released 4.0.0-rc version. Any suggestions?
		</comment>
		<comment id='4' author='laurencedev' date='2018-11-13T13:26:43Z'>
		&lt;denchmark-link:https://github.com/deadprogram&gt;@deadprogram&lt;/denchmark-link&gt;
 , ade version with the fix have not been released yet. Try to build OpenCV without gapi module: 
		</comment>
		<comment id='5' author='laurencedev' date='2018-11-13T13:30:19Z'>
		Wow, just noticed that. Let's bump the ADE version to address this issue as well
		</comment>
		<comment id='6' author='laurencedev' date='2018-11-13T15:23:18Z'>
		&lt;denchmark-link:https://github.com/mshabunin&gt;@mshabunin&lt;/denchmark-link&gt;
 same error with 
I know it was disabled because:
&lt;denchmark-code&gt;--     Disabled:                    gapi saliency world
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='laurencedev' date='2018-11-13T15:30:45Z'>
		&lt;denchmark-link:https://github.com/deadprogram&gt;@deadprogram&lt;/denchmark-link&gt;
 Please try this fix: &lt;denchmark-link:https://github.com/opencv/opencv/pull/13150&gt;#13150&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='laurencedev' date='2018-11-13T16:17:29Z'>
		Thanks &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 that did fix it.
		</comment>
		<comment id='9' author='laurencedev' date='2018-12-04T17:11:28Z'>
		OS: Windows 10 Pro (64 -bit)
Cygwin: 2.893 (64-bit)
OpenCV: 4.0.0 (ade-0.1.1d)
CMake: 3.6.2
Compiler: gcc 7.3.0
&lt;denchmark-code&gt;$ make
[  3%] Built target ippiw
[ 11%] Built target libprotobuf
[ 12%] Built target quirc
[ 12%] Built target ittnotify
[ 12%] Building CXX object modules/CMakeFiles/ade.dir/__/3rdparty/ade/ade-0.1.1d/sources/ade/source/alloc.cpp.o
/home/asundstrom/downloads/opencv-4.0.0/build/3rdparty/ade/ade-0.1.1d/sources/ade/source/alloc.cpp: In function ‘void* ade::aligned_alloc(std::size_t, std::size_t)’:
/home/asundstrom/downloads/opencv-4.0.0/build/3rdparty/ade/ade-0.1.1d/sources/ade/source/alloc.cpp:31:16: error: ‘posix_memalign’ was not declared in this scope
auto res = posix_memalign(&amp;ret, std::max(sizeof(void*), alignment), size);
           ^~~~~~~~~~~~~~
/home/asundstrom/downloads/opencv-4.0.0/build/3rdparty/ade/ade-0.1.1d/sources/ade/source/alloc.cpp:31:16: note: suggested alternative: ‘memalign’
auto res = posix_memalign(&amp;ret, std::max(sizeof(void*), alignment), size);
           ^~~~~~~~~~~~~~
           memalign
make[2]: *** [modules/CMakeFiles/ade.dir/build.make:63:
modules/CMakeFiles/ade.dir/__/3rdparty/ade/ade-0.1.1d/sources/ade/source/alloc.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:611: modules/CMakeFiles/ade.dir/all] Error 2
make: *** [Makefile:161: all] Error 2
&lt;/denchmark-code&gt;

I'd appreciate any advice. Thanks.
		</comment>
		<comment id='10' author='laurencedev' date='2018-12-04T17:27:12Z'>
		Perhaps try the param mentioned here &lt;denchmark-link:https://github.com/opencv/opencv/pull/13260&gt;#13260&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='laurencedev' date='2018-12-04T20:44:36Z'>
		&lt;denchmark-link:https://github.com/deadprogram&gt;@deadprogram&lt;/denchmark-link&gt;
: Thank you for the tip, but it still doesn't build.
&lt;denchmark-code&gt;.../opencv-4.0.0/build $ cmake -DBUILD_opencv_gapi=OFF -DWITH_ADE=OFF ..
...
.../opencv-4.0.0/build $ make
&lt;/denchmark-code&gt;

This still tries to compile the ade module, so I had to remove all gapi and ade sections from ./Makefile, CMakeFiles/Makefile.cmake, and CMakeFiles/Makefile2.
Now it correctly skips building ade, but I get the same posix_memalign error in a different place:
&lt;denchmark-code&gt;.../opencv-4.0.0/build $ make
[  3%] Built target ippiw
[ 11%] Built target libprotobuf
[ 12%] Built target quirc
[ 12%] Built target ittnotify
[ 12%] Processing OpenCL kernels (core)
Scanning dependencies of target opencv_core
[ 12%] Building CXX object modules/core/CMakeFiles/opencv_core.dir/src/algorithm.cpp.o
[ 12%] Building CXX object modules/core/CMakeFiles/opencv_core.dir/src/alloc.cpp.o
/home/asundstrom/downloads/opencv-4.0.0/modules/core/src/alloc.cpp: In function ‘void* cv::fastMalloc(size_t)’:
/home/asundstrom/downloads/opencv-4.0.0/modules/core/src/alloc.cpp:63:8: error: ‘posix_memalign’ was not declared in this scope
if(posix_memalign(&amp;ptr, CV_MALLOC_ALIGN, size))
   ^~~~~~~~~~~~~~
/home/asundstrom/downloads/opencv-4.0.0/modules/core/src/alloc.cpp:63:8: note: suggested alternative: ‘memalign’
if(posix_memalign(&amp;ptr, CV_MALLOC_ALIGN, size))
   ^~~~~~~~~~~~~~
   memalign
make[2]: *** [modules/core/CMakeFiles/opencv_core.dir/build.make:114: modules/core/CMakeFiles/opencv_core.dir/src/alloc.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:1129: modules/core/CMakeFiles/opencv_core.dir/all] Error 2
make: *** [Makefile:161: all] Error 2
&lt;/denchmark-code&gt;

Any suggestions? Thanks.
		</comment>
		<comment id='12' author='laurencedev' date='2018-12-05T07:56:14Z'>
		Which toolchain do you use? There are several of them available:
Windows:

x86_64-posix-sjlj
x86_64-posix-seh
x86_64-win32-sjlj
x86_64-win32-seh

Ubuntu (update-alternatives --get-selections | grep mingw):

x86_64-w64-mingw32-g++-posix
x86_64-w64-mingw32-g++-win32

		</comment>
		<comment id='13' author='laurencedev' date='2018-12-05T09:42:22Z'>
		
Cygwin: 2.893 (64-bit)

Try MinGW instead.
However it is not supported officially too - on Windows two last MSVS versions (MSVS 2015/MSVS2017) are supported only.
		</comment>
		<comment id='14' author='laurencedev' date='2018-12-05T10:26:11Z'>
		Also, OpenCV 4 is using std::recursive_mutex which is not available in mingw with win32 threading support. So only toolchains with -posix flavour will work.
		</comment>
		<comment id='15' author='laurencedev' date='2018-12-05T14:15:03Z'>
		Cygwin bundles OpenCV 2.4, 3.2, and 3.4, but not yet 4.0. It also bundles mingw64-x86_64-opencv: "Real-time computer vision library for Win64 toolchain".
&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
: From the MinGW homepage: "MinGW compilers provide access to the functionality of the Microsoft C runtime and some language-specific runtimes. MinGW, being Minimalist, does not, and never will, attempt to provide a POSIX runtime environment for POSIX application deployment on MS-Windows. If you want POSIX application deployment on this platform, please consider Cygwin instead."
&lt;denchmark-link:https://github.com/mshabunin&gt;@mshabunin&lt;/denchmark-link&gt;
: Yes, it's clear only toolchains supporting POSIX will work. Is this possible to do in Cygwin? Could I, for example, call cmake with ?
		</comment>
		<comment id='16' author='laurencedev' date='2018-12-05T15:04:34Z'>
		According to &lt;denchmark-link:https://github.com/gmarcais/Jellyfish/issues/99&gt;this&lt;/denchmark-link&gt;
 thread, Cygwin has the same posix_memalign problem compiling other programs, like Jellyfish. The recommended fix for Jellyfish is to configure with . Is it possible to do this with cmake/OpenCV4?
		</comment>
		<comment id='17' author='laurencedev' date='2018-12-05T15:40:06Z'>
		&lt;denchmark-link:https://github.com/aesundstrom&gt;@aesundstrom&lt;/denchmark-link&gt;
 , try  configuration option. Don't forget to make a clean build (purge previous build directory).
		</comment>
		<comment id='18' author='laurencedev' date='2018-12-05T15:51:12Z'>
		&lt;denchmark-link:https://github.com/mshabunin&gt;@mshabunin&lt;/denchmark-link&gt;
: I tried this....
&lt;denchmark-code&gt;.../opencv-4.0.0/build $ cmake -DCMAKE_CXX_FLAGS=-std=gnu++1 ..
-- The CXX compiler identification is unknown
-- The C compiler identification is GNU 7.3.0
-- Check for working CXX compiler: /usr/bin/c++.exe
-- Check for working CXX compiler: /usr/bin/c++.exe -- broken
CMake Error at /usr/share/cmake-3.6.2/Modules/CMakeTestCXXCompiler.cmake:54 (message):
  The C++ compiler "/usr/bin/c++.exe" is not able to compile a simple test
  program.

  It fails with the following output:

   Change Dir: .../opencv-4.0.0/build/CMakeFiles/CMakeTmp

  Run Build Command:"/usr/bin/make.exe" "cmTC_2aff8/fast"

  /usr/bin/make -f CMakeFiles/cmTC_2aff8.dir/build.make
  CMakeFiles/cmTC_2aff8.dir/build

  make[1]: Entering directory
  '.../opencv-4.0.0/build/CMakeFiles/CMakeTmp'

  Building CXX object CMakeFiles/cmTC_2aff8.dir/testCXXCompiler.cxx.o

  /usr/bin/c++.exe -std=gnu++1 -o
  CMakeFiles/cmTC_2aff8.dir/testCXXCompiler.cxx.o -c
  .../opencv-4.0.0/build/CMakeFiles/CMakeTmp/testCXXCompiler.cxx

  c++: error: unrecognized command line option ‘-std=gnu++1’; did you
  mean ‘-std=gnu++11’?

  make[1]: *** [CMakeFiles/cmTC_2aff8.dir/build.make:66:
  CMakeFiles/cmTC_2aff8.dir/testCXXCompiler.cxx.o] Error 1

  make[1]: Leaving directory
  '.../opencv-4.0.0/build/CMakeFiles/CMakeTmp'

  make: *** [Makefile:126: cmTC_2aff8/fast] Error 2

  CMake will not be able to correctly generate this project.
Call Stack (most recent call first):
  CMakeLists.txt:131 (project)

-- Configuring incomplete, errors occurred!
See also ".../opencv-4.0.0/build/CMakeFiles/CMakeOutput.log".
See also ".../opencv-4.0.0/build/CMakeFiles/CMakeError.log".
&lt;/denchmark-code&gt;

		</comment>
		<comment id='19' author='laurencedev' date='2018-12-05T16:08:31Z'>
		1 vs 11
		</comment>
		<comment id='20' author='laurencedev' date='2018-12-05T17:18:44Z'>
		D'oh! Okay, after fixing my typo, unfortunately, the problem persists.
&lt;denchmark-code&gt;.../opencv-4.0.0/build $ cmake -DBUILD_opencv_gapi=OFF -DWITH_ADE=OFF -DCMAKE_CXX_FLAGS=-std=gnu++11 ..
...
.../opencv-4.0.0/build $ make
Scanning dependencies of target ippiw
[  0%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_core.c.o
[  0%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image.c.o
[  0%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_color_convert_all.c.o
[  0%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_color_convert_rgbs.c.o
[  0%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_filter_bilateral.c.o
[  0%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_filter_box.c.o
[  0%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_filter_canny.c.o
[  1%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_filter_gaussian.c.o
[  1%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_filter_general.c.o
[  1%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_filter_laplacian.c.o
[  1%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_filter_morphology.c.o
[  1%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_filter_scharr.c.o
[  1%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_filter_sobel.c.o
[  1%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_op_copy.c.o
[  1%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_op_copy_channel.c.o
[  1%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_op_copy_make_border.c.o
[  1%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_op_copy_merge.c.o
[  2%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_op_copy_split.c.o
[  2%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_op_scale.c.o
[  2%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_op_set.c.o
[  2%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_op_set_channel.c.o
[  2%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_op_swap_channels.c.o
[  2%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_transform_mirror.c.o
[  2%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_transform_resize.c.o
[  2%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_transform_rotate.c.o
[  2%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_image_transform_warpaffine.c.o
[  3%] Building C object 3rdparty/ippiw/CMakeFiles/ippiw.dir/src/iw_own.c.o
[  3%] Linking C static library ../lib/libippiw.a
[  3%] Built target ippiw
Scanning dependencies of target libprotobuf
[  3%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/arena.cc.o
[  3%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/arenastring.cc.o
[  3%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/extension_set.cc.o
[  3%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/generated_message_table_driven_lite.cc.o
[  4%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/generated_message_util.cc.o
[  4%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/io/coded_stream.cc.o
[  4%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/io/zero_copy_stream.cc.o
[  4%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/io/zero_copy_stream_impl_lite.cc.o
[  4%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/message_lite.cc.o
[  4%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/repeated_field.cc.o
[  4%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/atomicops_internals_x86_gcc.cc.o
[  4%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/bytestream.cc.o
[  4%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/common.cc.o
[  4%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/int128.cc.o
[  5%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/io_win32.cc.o
[  5%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/once.cc.o
[  5%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/status.cc.o
[  5%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/statusor.cc.o
[  5%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/stringpiece.cc.o
[  5%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/stringprintf.cc.o
[  5%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/structurally_valid.cc.o
[  5%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/strutil.cc.o
[  5%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/time.cc.o
[  6%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/wire_format_lite.cc.o
[  6%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/any.cc.o
[  6%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/any.pb.cc.o
[  6%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/api.pb.cc.o
[  6%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/descriptor.cc.o
[  6%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/descriptor.pb.cc.o
[  6%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/descriptor_database.cc.o
[  6%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/duration.pb.cc.o
[  6%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/dynamic_message.cc.o
[  7%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/empty.pb.cc.o
[  7%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/extension_set_heavy.cc.o
[  7%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/field_mask.pb.cc.o
[  7%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/generated_message_reflection.cc.o
[  7%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/generated_message_table_driven.cc.o
[  7%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/io/gzip_stream.cc.o
[  7%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/io/printer.cc.o
[  7%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/io/strtod.cc.o
[  7%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/io/tokenizer.cc.o
[  8%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/io/zero_copy_stream_impl.cc.o
[  8%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/map_field.cc.o
[  8%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/message.cc.o
[  8%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/reflection_ops.cc.o
[  8%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/service.cc.o
[  8%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/source_context.pb.cc.o
[  8%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/struct.pb.cc.o
[  8%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/mathlimits.cc.o
[  8%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/substitute.cc.o
[  8%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/text_format.cc.o
[  9%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/timestamp.pb.cc.o
[  9%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/type.pb.cc.o
[  9%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/unknown_field_set.cc.o
[  9%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/delimited_message_util.cc.o
[  9%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/field_comparator.cc.o
[  9%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/field_mask_util.cc.o
[  9%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/internal/datapiece.cc.o
[  9%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/internal/default_value_objectwriter.cc.o
[  9%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/internal/field_mask_utility.cc.o
[ 10%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/internal/json_escaping.cc.o
[ 10%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/internal/json_objectwriter.cc.o
[ 10%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/internal/json_stream_parser.cc.o
[ 10%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/internal/object_writer.cc.o
[ 10%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/internal/proto_writer.cc.o
[ 10%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/internal/protostream_objectsource.cc.o
[ 10%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/internal/protostream_objectwriter.cc.o
[ 10%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/internal/type_info.cc.o
[ 10%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/internal/utility.cc.o
[ 11%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/json_util.cc.o
[ 11%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/message_differencer.cc.o
[ 11%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/time_util.cc.o
[ 11%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/util/type_resolver_util.cc.o
[ 11%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/wire_format.cc.o
[ 11%] Building CXX object 3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/wrappers.pb.cc.o
[ 11%] Linking CXX static library ../lib/liblibprotobuf.a
[ 11%] Built target libprotobuf
Scanning dependencies of target quirc
[ 11%] Building C object 3rdparty/quirc/CMakeFiles/quirc.dir/src/decode.c.o
[ 11%] Building C object 3rdparty/quirc/CMakeFiles/quirc.dir/src/quirc.c.o
[ 11%] Building C object 3rdparty/quirc/CMakeFiles/quirc.dir/src/version_db.c.o
[ 12%] Linking C static library ../lib/libquirc.a
[ 12%] Built target quirc
Scanning dependencies of target ittnotify
[ 12%] Building C object 3rdparty/ittnotify/CMakeFiles/ittnotify.dir/src/ittnotify/ittnotify_static.c.o
[ 12%] Building C object 3rdparty/ittnotify/CMakeFiles/ittnotify.dir/src/ittnotify/jitprofiling.c.o
[ 12%] Linking C static library ../lib/libittnotify.a
[ 12%] Built target ittnotify
Scanning dependencies of target ade
[ 12%] Building CXX object modules/CMakeFiles/ade.dir/__/3rdparty/ade/ade-0.1.1d/sources/ade/source/alloc.cpp.o
/home/asundstrom/downloads/opencv-4.0.0/build/3rdparty/ade/ade-0.1.1d/sources/ade/source/alloc.cpp: In function ‘void* ade::aligned_alloc(std::size_t, std::size_t)’:
/home/asundstrom/downloads/opencv-4.0.0/build/3rdparty/ade/ade-0.1.1d/sources/ade/source/alloc.cpp:31:16: error: ‘posix_memalign’ was not declared in this scope
     auto res = posix_memalign(&amp;ret, std::max(sizeof(void*), alignment), size);
                ^~~~~~~~~~~~~~
/home/asundstrom/downloads/opencv-4.0.0/build/3rdparty/ade/ade-0.1.1d/sources/ade/source/alloc.cpp:31:16: note: suggested alternative: ‘memalign’
     auto res = posix_memalign(&amp;ret, std::max(sizeof(void*), alignment), size);
                ^~~~~~~~~~~~~~
                memalign
make[2]: *** [modules/CMakeFiles/ade.dir/build.make:63: modules/CMakeFiles/ade.dir/__/3rdparty/ade/ade-0.1.1d/sources/ade/source/alloc.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:605: modules/CMakeFiles/ade.dir/all] Error 2
make: *** [Makefile:161: all] Error 2
&lt;/denchmark-code&gt;

		</comment>
		<comment id='21' author='laurencedev' date='2018-12-06T08:55:13Z'>
		There was a change from &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
 preventing building ADE if G-API module is not built - I wonder if it works for this case
		</comment>
		<comment id='22' author='laurencedev' date='2018-12-06T10:44:32Z'>
		&lt;denchmark-link:https://github.com/aesundstrom&gt;@aesundstrom&lt;/denchmark-link&gt;
 , maybe you could try with a different compiler ? i have no problems using
&lt;denchmark-code&gt;mingw x86_64-7.2.0-posix-seh-rt_v5-rev1
&lt;/denchmark-code&gt;

(the original G-API / _WIN32 problem got fixed, and your current problem comes from core, not ADE or G-API. your current compiler thought, it would have posix_memalign, but it isn't  so)
		</comment>
		<comment id='23' author='laurencedev' date='2018-12-06T17:18:17Z'>
		&lt;denchmark-link:https://github.com/berak&gt;@berak&lt;/denchmark-link&gt;
: Thank you for the suggestion. Am I able to use the mingw compiler from within Cygwin, or is it only available within the MinGW environment? I'd prefer to stick with Cygwin, since I do all of my development there.
		</comment>
		<comment id='24' author='laurencedev' date='2018-12-06T17:21:45Z'>
		&lt;denchmark-link:https://github.com/dmatveev&gt;@dmatveev&lt;/denchmark-link&gt;
: If I'm interpreting you correctly, you're saying that if I try to build without ADE/G-API, then it might work. I tried this, which you can see earlier in the thread; the upshot is compiling runs aground on the same posix_memalign error, but in the core.
		</comment>
		<comment id='25' author='laurencedev' date='2020-06-25T12:35:02Z'>
		Hi,
I am getting the "posix_memalign" error as below ----
&lt;denchmark-code&gt;In file included from /home/cig/opencv/opencv/3rdparty/openexr/IlmImf/ImfDwaCompressorSimd.h:48,
                 from /home/cig/opencv/opencv/3rdparty/openexr/IlmImf/ImfDwaCompressor.cpp:131:
/home/cig/opencv/opencv/3rdparty/openexr/IlmImf/ImfSystemSpecific.h: In function ‘void* Imf_opencv::EXRAllocAligned(size_t, size_t)’:
/home/cig/opencv/opencv/3rdparty/openexr/IlmImf/ImfSystemSpecific.h:72:5: error: ‘posix_memalign’ was not declared in this scope
   72 |     posix_memalign(&amp;ptr, alignment, size);
      |     ^~~~~~~~~~~~~~
&lt;/denchmark-code&gt;

i work in cygwin. i get this error when i build opencv library for aarch64-linux-gnu target. Please guide me.
my cmake command is as below --
&lt;denchmark-code&gt;cmake -Wdev -DBUILD_opencv_gapi=OFF -DWITH_ADE=OFF -DCMAKE_CXX_FLAGS=-std=gnu++11 -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DGNU_MACHINE=aarch64-unknown-linux-gnu -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON –DCMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local/opencv –DBUILD_SHARED_LIBRARY=OFF –DINSTALL_C_EXAMPLES=OFF –DCMAKE_C_COMPILER=/home/cig/x-tools/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-gcc –DCMAKE_CXX_COMPILER=/home/cig/x-tools/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-g++ -DBUILD_EXAMPLES=ON -DENABLE_VFPV3=OFF -DENABLE_NEON=OFF -DWITH_TBB=ON  ../../..
&lt;/denchmark-code&gt;

		</comment>
		<comment id='26' author='laurencedev' date='2020-06-25T13:57:14Z'>
		
opencv/3rdparty/openexr/IlmImf/ImfSystemSpecific.h:72:5

Workaround: cmake -DWITH_OPENEXR=OFF ...
		</comment>
		<comment id='27' author='laurencedev' date='2020-06-26T04:45:30Z'>
		Thanks to you Mr. Alexander Alekhin,
I will test this option.
As another work around i replaced posix_memalign with aligned_alloc which worked right.
Regards
		</comment>
	</comments>
</bug>