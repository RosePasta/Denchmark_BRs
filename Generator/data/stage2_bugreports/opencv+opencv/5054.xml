<bug id='5054' author='opencv-pushbot' open_date='2015-07-27T11:38:19Z' closed_time='2016-04-12T15:22:48Z'>
	<summary>SVM write/load problems with kernels other than linear</summary>
	<description>
Transferred from &lt;denchmark-link:http://code.opencv.org/issues/4455&gt;http://code.opencv.org/issues/4455&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;|| Jens Garstka on 2015-07-01 08:32
|| Priority: Normal
|| Affected: branch 'master' (3.0-dev)
|| Category: ml
|| Tracker: Bug
|| Difficulty: Easy
|| PR: 
|| Platform: x64 / Linux
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;SVM write/load problems with kernels other than linear&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Within the implementation of the SVMs write and read methods (modules/ml/src/svm.cpp, lines 2022 ff and 2139 ff), the author makes the assumption, that support vector indices are not required in 2-class problems. That is probably correct if a linear kernel is used (i.e., when you have only one support vector). But with other kernels (in my case with an RBF kernel), the support vector indices are definitly required.

I've added a git diff where this questionable conditions are commented out. Without these lines everything works fine. 

IMHO the lines should be removed.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;History&lt;/denchmark-h&gt;

&lt;denchmark-h:h5&gt;Hyunjun Kim on 2015-07-03 07:35&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Hi, I was able to reproduce the error. I confirmed that cv::Algorithm::load() works well only with SVM::LINEAR kernel.

&lt;pre&gt;
#include &lt;opencv2/core.hpp&gt;
#include &lt;opencv2/imgproc.hpp&gt;
#include "opencv2/imgcodecs.hpp"
#include &lt;opencv2/highgui.hpp&gt;
#include &lt;opencv2/ml.hpp&gt;

using namespace cv;
using namespace cv::ml;

int main(int, char**)
{
    // Data for visual representation
    int width = 512, height = 512;
    Mat image = Mat::zeros(height, width, CV_8UC3);

    // Set up training data
    int labels[4] = {1, -1, -1, -1};
    Mat labelsMat(4, 1, CV_32SC1, labels);

    float trainingData[4][2] = { {501, 10}, {255, 10}, {501, 255}, {10, 501} };
    Mat trainingDataMat(4, 2, CV_32FC1, trainingData);

    // Set up SVM's parameters
    Ptr&lt;ml::SVM&gt; svm = ml::SVM::create();
    svm-&gt;setType(ml::SVM::C_SVC);
    svm-&gt;setKernel(SVM::INTER); // Algorithm::load() works well with SVM::LINEAR
    svm-&gt;setTermCriteria(TermCriteria(TermCriteria::MAX_ITER, 100, 1e-6));

    // Train the SVM
    svm-&gt;train(ml::TrainData::create(trainingDataMat, ml::ROW_SAMPLE, labelsMat));

    // Save and load SVM
    svm-&gt;save("ex_svm.xml");
    svm= cv::Algorithm::load&lt;ml::SVM&gt;("ex_svm.xml"); // something is wrong


    Vec3b green(0,255,0), blue (255,0,0);
    // Show the decision regions given by the SVM
    for (int i = 0; i &lt; image.rows; ++i)
        for (int j = 0; j &lt; image.cols; ++j)
        {
            Mat sampleMat = (Mat_&lt;float&gt;(1,2) &lt;&lt; j,i);
            float response = svm-&gt;predict(sampleMat);

            if (response == 1)
                image.at&lt;Vec3b&gt;(i,j)  = green;
            else if (response == -1)
                image.at&lt;Vec3b&gt;(i,j)  = blue;
        }

    // Show the training data
    int thickness = -1;
    int lineType = 8;
    circle( image, Point(501,  10), 5, Scalar(  0,   0,   0), thickness, lineType );
    circle( image, Point(255,  10), 5, Scalar(255, 255, 255), thickness, lineType );
    circle( image, Point(501, 255), 5, Scalar(255, 255, 255), thickness, lineType );
    circle( image, Point( 10, 501), 5, Scalar(255, 255, 255), thickness, lineType );

    // Show support vectors
    thickness = 2;
    lineType  = 8;

    Mat sv = svm-&gt;getSupportVectors();

    for (int i = 0; i &lt; sv.rows; ++i)
    {
        const float* v = sv.ptr&lt;float&gt;(i);
        circle( image,  Point( (int) v[0], (int) v[1]),   6,  Scalar(128, 128, 128), thickness, lineType);
    }

    imwrite("result.png", image);        // save the image

    imshow("SVM Simple Example", image); // show it to the user
    waitKey(0);

}
&lt;/pre&gt;
&lt;/denchmark-code&gt;

&lt;denchmark-h:h5&gt;Maksim Shabunin on 2015-07-13 08:56&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;-   Assignee set to Maksim Shabunin
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='opencv-pushbot' date='2015-09-04T08:29:31Z'>
		I update where to change in svm.cpp in OpenCV 3.1.
&lt;denchmark-code&gt;    void write( FileStorage&amp; fs ) const
    {
        for( i = 0; i &lt; df_count; i++ )
        {
            const DecisionFunc&amp; df = decision_func[i];
            int sv_count = getSVCount(i);
            fs &lt;&lt; "{" &lt;&lt; "sv_count" &lt;&lt; sv_count
               &lt;&lt; "rho" &lt;&lt; df.rho
               &lt;&lt; "alpha" &lt;&lt; "[:";
            fs.writeRaw("d", (const uchar*)&amp;df_alpha[df.ofs], sv_count*sizeof(df_alpha[0]));
            fs &lt;&lt; "]";
2095        // if( class_count &gt; 2 )
2096        // {
                fs &lt;&lt; "index" &lt;&lt; "[:";
                fs.writeRaw("i", (const uchar*)&amp;df_index[df.ofs], sv_count*sizeof(df_index[0]));
                fs &lt;&lt; "]";
2100        // }
2101        // else
2102        //     CV_Assert( sv_count == sv_total );
            fs &lt;&lt; "}";
        }
    }


    void read( const FileNode&amp; fn )
    {
        for( i = 0; i &lt; df_count; i++, ++df_it )
        {
            FileNode dfi = *df_it;
            DecisionFunc df;
            int sv_count = (int)dfi["sv_count"];
            int ofs = (int)df_index.size();
            df.rho = (double)dfi["rho"];
            df.ofs = ofs;
            df_index.resize(ofs + sv_count);
            df_alpha.resize(ofs + sv_count);
            dfi["alpha"].readRaw("d", (uchar*)&amp;df_alpha[ofs], sv_count*sizeof(df_alpha[0]));
2237        // if( class_count &gt; 2 )
                dfi["index"].readRaw("i", (uchar*)&amp;df_index[ofs], sv_count*sizeof(df_index[0]));
            decision_func.push_back(df);
        }
2241    // if( class_count &lt;= 2 )
2242    //     setRangeVector(df_index, sv_total);
    }
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='opencv-pushbot' date='2015-11-13T14:56:08Z'>
		I'm not sure but, in the SVM class parameters are duplicated. There are inside svm and also inside the SVMKernelImpl class. After autotraining, only the Kernel object has the right parameters so, initially, SVM works because it uses kernel for prediction. But if I save the SVM, the wrong parameters are saved and then, if I tried to reload it for new prediction, it throws bad ones.
&lt;denchmark-code&gt;    cv::Ptr&lt;cv::ml::SVM&gt; mSvm;
    mSvm = cv::ml::SVM::create();
    mSvm-&gt;setType(ml::SVM::Types::C_SVC);
    mSvm-&gt;setKernel(ml::SVM::KernelTypes::RBF);
    mSvm-&gt;trainAuto(trainData, 10)
    mSvm-&gt;save("mode.xml");
    cv::Ptr&lt;cv::ml::SVM&gt; mSvm2;
    mSvm2 = cv::ml::SVM::load&lt;cv::ml::SVM&gt;("mode.xml");
&lt;/denchmark-code&gt;

In this example, mSvm produces good predictions but mSvm2 not.
It's possible to solve the problem by substituting params = best_params at the end of trainAuto(...) with params = ((SVMKernelImpl *)&amp;(*kernel))-&gt;params;
		</comment>
		<comment id='3' author='opencv-pushbot' date='2016-01-20T14:28:57Z'>
		I could reproduce this issue using Java OpenCV. Changed the lines of code he suggested and everything works as expected
		</comment>
		<comment id='4' author='opencv-pushbot' date='2016-02-01T05:25:05Z'>
		Still not fixed in OpenCV 3.1
		</comment>
		<comment id='5' author='opencv-pushbot' date='2016-03-01T02:34:48Z'>
		Is it fixed? I'm trying to reproduce it with current master but I can't.  &lt;denchmark-link:https://github.com/Bardo91/opencvSvmLoadError&gt;https://github.com/Bardo91/opencvSvmLoadError&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='opencv-pushbot' date='2016-03-28T18:41:53Z'>
		I confirm it is still  in OpenCV 3.1 (&lt;denchmark-link:https://github.com/opencv/opencv/commit/46662ccd99acfd0fac385eb9d46e1a084f5f6ec3&gt;46662cc&lt;/denchmark-link&gt;
). I used the sample code the OP provided and it is clear that after loading the XML the SVM provides wrong results, as seen below.
With load:
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/4097245/14086425/69c05e86-f4fb-11e5-9095-f003dda5aabd.png&gt;&lt;/denchmark-link&gt;

Without load:
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/4097245/14086424/69bbb728-f4fb-11e5-8cb7-c611e1adf9f5.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='opencv-pushbot' date='2016-03-29T19:26:41Z'>
		As it turns out the problem was the same as described by the OP: the indexes are required for n&gt;=2 classes when the Kernel is non-linear. Although the commented lines were removed, still, for n=2 the indexes were not being saved, which led to incorrect ordering of the decision functions. The solution was to simply enforce that even for 2 classes classifiers the indexes are saved/loaded.
I have made a patch solving this issue and will submit a pull request later on.
&lt;denchmark-link:https://github.com/Itseez/opencv/files/194172/svm-index-order.patch.txt&gt;svm-index-order.patch.txt&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='opencv-pushbot' date='2016-04-06T14:00:48Z'>
		Is there another way to save the svm model and counter this bug? I have to load a pretrained classifier everytime the application starts... I didn't want to train the SVM everytime a new instance is started...
		</comment>
		<comment id='9' author='opencv-pushbot' date='2016-04-06T14:11:39Z'>
		@Goldesel23 , did you try the fix from PR &lt;denchmark-link:https://github.com/opencv/opencv/pull/6345&gt;#6345&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='10' author='opencv-pushbot' date='2016-04-06T14:36:36Z'>
		Thanks for the answer i'll take a look into it!
		</comment>
		<comment id='11' author='opencv-pushbot' date='2017-02-23T16:14:14Z'>
		This still seems broken for me and I'm using 3.2.0.   I did check that the patch has been applied.  save/load gives same results for linear but not for RBF.
		</comment>
		<comment id='12' author='opencv-pushbot' date='2017-03-10T21:04:20Z'>
		&lt;denchmark-link:https://github.com/animetrics&gt;@animetrics&lt;/denchmark-link&gt;
 I have verified that this issue has been fixed in version &lt;denchmark-link:https://github.com/opencv/opencv/archive/3.2.0.tar.gz&gt;3.2.0&lt;/denchmark-link&gt;
 using the code from &lt;denchmark-link:https://github.com/opencv/opencv/issues/5054#issuecomment-137677682&gt;#5054 (comment)&lt;/denchmark-link&gt;
, and changing the kernel to RBF. I then generated the classification zone images without loading the model (straight from training) and on a second stage I tried loading the saved model. As you can see from the results below the results are identical.
If you believe that there are still errors on this implementation please provide a code of reference showing so.
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/4097245/23812915/3641690c-05bb-11e7-859a-27564a218daa.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://cloud.githubusercontent.com/assets/4097245/23812914/36056b50-05bb-11e7-9a28-bbebd8f53457.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='opencv-pushbot' date='2017-03-31T14:12:43Z'>
		&lt;denchmark-link:https://github.com/eduardohenriquearnold&gt;@eduardohenriquearnold&lt;/denchmark-link&gt;
 thanks.  I must have had some vestige of linkage to my 3.1 version.  All seems to work for me now.
		</comment>
	</comments>
</bug>