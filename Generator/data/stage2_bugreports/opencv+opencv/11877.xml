<bug id='11877' author='Jayhello' open_date='2018-07-03T08:16:50Z' closed_time='2020-09-05T20:50:58Z'>
	<summary>opencv knn train dead loop</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV: 3.3
Operating System / Platform: ubuntu16
Compiler: cmake &amp; gcc5.4

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

opencv knn: dead loop
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

#include &lt;opencv2/imgproc.hpp&gt;
#include &lt;opencv2/ml.hpp&gt;
#include &lt;vector&gt;
#include "opencv2/core/core_c.h"

using namespace std;
using namespace cv;
using namespace cv::ml;

using cv::Ptr;

int main(){

    Mat xTrainData = (Mat_&lt;float&gt;(5,2) &lt;&lt; 1, 1, 1, 1, 2, 2, 2, 2, 2, 2);
    Mat yTrainLabels = (Mat_&lt;float&gt;(5,1) &lt;&lt; 1, 1, 2, 2, 2);

    cout &lt;&lt; "===============xTrainData===================="&lt;&lt; endl;
    cout &lt;&lt; "xTrainData: "  &lt;&lt; xTrainData&lt;&lt; endl;

    cout &lt;&lt; "===============yTrainLabels===================="&lt;&lt; endl;
    cout &lt;&lt; "yTrainLabels: "  &lt;&lt; yTrainLabels &lt;&lt; endl;

    // KNearest KDTree implementation
    Ptr&lt;KNearest&gt; knnKdt = KNearest::create();
    knnKdt-&gt;setAlgorithmType(KNearest::KDTREE);
    knnKdt-&gt;setIsClassifier(true);

   // When runs to this step, it does not run any more.
    knnKdt-&gt;train(xTrainData, ml::ROW_SAMPLE, yTrainLabels);

    float d_test[2][2] = {{1.3, 1.3}, {2.2, 2.4}};

    Mat xTestData = (Mat_&lt;float&gt;(2,1) &lt;&lt; 1.1, 1.1, 2, 2.2);
    Mat zBestLabels;
    cout &lt;&lt; "===============xTestData===================="&lt;&lt; endl;
    cout &lt;&lt; "xTestData: "  &lt;&lt; xTestData &lt;&lt; endl;

    knnKdt-&gt;findNearest(xTestData, 1, zBestLabels);
    cout &lt;&lt; "===============zBestLabels===================="&lt;&lt; endl;
    cout &lt;&lt; "zBestLabels: "  &lt;&lt; zBestLabels &lt;&lt; endl;
}

When I runs it in clion:
&lt;denchmark-link:https://user-images.githubusercontent.com/16144935/42207391-61e4a88a-7edc-11e8-8eb9-7338ae273342.png&gt;&lt;/denchmark-link&gt;

What's wrong?
	</description>
	<comments>
		<comment id='1' author='Jayhello' date='2018-07-03T09:00:13Z'>
		related: &lt;denchmark-link:https://github.com/opencv/opencv/issues/8917&gt;#8917&lt;/denchmark-link&gt;

i could reproduce it with latest 3.4.
the KDTREE implementation seems to have a problem with duplicate (identical) train samples,
like having (2,2) more than once in it. it works with train data like this:
&lt;denchmark-code&gt;    Mat xTrainData = (Mat_&lt;float&gt;(5,2) &lt;&lt; 1, 1.1, 1.1, 1, 2, 2, 2.1, 2, 2.1, 2);
&lt;/denchmark-code&gt;

btw, you did not get that far, but it should be:
&lt;denchmark-code&gt;   Mat xTestData = (Mat_&lt;float&gt;(2,2) &lt;&lt; 1.1, 1.1, 2, 2.2);
&lt;/denchmark-code&gt;

in your sample.
		</comment>
		<comment id='2' author='Jayhello' date='2018-07-04T03:39:31Z'>
		And for the same datasets, when I use kd tree method like knn-&gt;setAlgorithmType(KNearest::KDTREE);.It gets error result, bu if I just use BRUTE_FORCE method it gets correct result.
So can I think the kd tree methods in opencv3 has bug?
		</comment>
		<comment id='3' author='Jayhello' date='2018-07-04T09:59:20Z'>
		
when I use kd tree method like knn-&gt;setAlgorithmType(KNearest::KDTREE);.It gets error result

same here. all results , neighborResponses , dist outputarrays seem to point to uninitialized memory, when using the KDTREE implementation.
there is a &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/ml/test/test_emknearestkmeans.cpp#L295&gt;unit test here&lt;/denchmark-link&gt;
 , but unfortunately it is flawed,  are reused after the brute force test (L317). if we clear it like  before the kdtree test, it will only contain garbage, too (and fail !), same as in your experiment above.
&lt;denchmark-code&gt;(bestLabels, neighbours, dist) :
-------------BFORCE---------------------------
[1;
 2]
[1, 1, 2;
 2, 2, 2]
[0.010000004, 0.010000004, 1.6199999;
 0.020000011, 0.040000018, 0.049999997]
-------------KDTREE---------------------------
[0;
 0]
[1, 1, 1;
 1, 1, 0]
[0, 0, 9.7048882e-035;
 3.8723429e-034, 0, 0]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='Jayhello' date='2018-07-06T07:32:16Z'>
		a couple of problems here:

the KDTree does not do a supervised classification / regression, but clustering.
it's learning to assign cluster(nearest neighbour) indices to samples.
the train responses are never used (never make it into the tree building)
whatever is calculated inside the KDTree, it never makes it back into KDTreeImpl or KNearest.
the preallocated (CV_32F) OutputArrays are reallocated inside KDTree::findNearest:

&lt;denchmark-code&gt;Mat R; // expected result

// entering KDTreeImpl::findNearest()
OutputArray _results(R); 
_results.create(testcount, k, CV_32F);
Mat   res = _results.getMat();
Mat _res = res.row(i); // shallow copy (different Mat header, also a slice only)

// entering KDTree::findNearest()
OutputArray _labels(_res); 
_labels.create(nidx, 1, CV_32S, -1, true); // _results above no more point to the same thing
&lt;/denchmark-code&gt;

could be overcome by a strategy like this:
&lt;denchmark-code&gt;        Mat _res, _nr, _d; // use empty Mat's
        tr.findNearest(test_samples.row(i), k, Emax, _res, _nr, _d, noArray());
        // now copy, convert to our preallocated CV_32F Mat's from KNearest
&lt;/denchmark-code&gt;


 tr.findNearest(test_samples.row(i), k, Emax, _res, _nr, _d, noArray());
this wrongly assigns _res to _neighborsIdx, not _labels. (however, there's no difference, since the KDTree does not know about any class labels)
from the docs: " In case of regression, the predicted result is a mean value of the particular vector's neighbor responses. In case of classification, the class is determined by voting."  -- it does not do any of this currently.
again, the unit test reuses the result from the bruteforce check, and happily reports 100% accuracy

		</comment>
	</comments>
</bug>