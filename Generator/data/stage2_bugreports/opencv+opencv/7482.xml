<bug id='7482' author='mtjrider' open_date='2016-10-13T15:55:23Z' closed_time='2017-01-24T11:45:15Z'>
	<summary>cuda::DensePyrLKOpticalFlow returns empty array</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.1
Operating System / Platform =&gt; Ubuntu 16.04 LTS
Compiler =&gt; nvcc (g++ 5.4.0), cuda 8.0

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

cv::cuda::DensePyrLKOpticalFlow -&gt; calc() returns empty array (array of zeroes).
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;


Build and install the latest opencv from github
Build options: CUDA_FAST_MATH, WITH_CUBLAS, WITH_CUDA, WITH_CUFFT, WITH_OPENGL, WITH_OPENMP, WITH_TBB, WITH_V4L ... all on.
Navigate to /path/to/source/opencv/samples/gpu/
compile 'optical_flow.cpp' via nvcc pkg-config --cflags --libs opencv optical_flow.cpp -o densepyrlktest
execute densepyrlktest with ./densepyrlktest

You should see several windows come up. The one titled "LK" uses DensePyrLKOpticalFlow. To confirm this is a problem with the class, I wrote a simpler routine that pulls images from my webcam and calculates optical flow using this method. The resulting array is empty.
// general project headers                                                                           
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;sstream&gt;

// opencv headers                                                                                    
#include "opencv2/core.hpp"
#include "opencv2/core/utility.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/video.hpp"
#include "opencv2/cudaoptflow.hpp"
#include "opencv2/cudaarithm.hpp"

// establishing namespaces for std, opencv, cuda                                                     
using namespace std;
using namespace cv;
using namespace cv::cuda;

// main pyrlk implementation in opencv cuda                                                                                           
int main(int argc, char **argv){

  // open the default camera (e.g. a webcam)                                                         
  VideoCapture cap(0);
  // check for success                                                                               
  if(!cap.isOpened()){
    return -1;
  };

  // set the camera resolution (note: this is bounded by device specifications)                      
  cap.set(CV_CAP_PROP_FRAME_WIDTH, 1920);
  cap.set(CV_CAP_PROP_FRAME_HEIGHT, 1080);

  // initialize the pyrlk optic flow algorithm                                                   
  Ptr&lt;cuda::DensePyrLKOpticalFlow&gt; d_calc = cuda::DensePyrLKOpticalFlow::create();

  // declare memory for optic flow and the image                                                     
  Mat flowxy, flowx, flowy, image;
  Mat frame_prev, frame_curr, frameP, frameC;
  // declare memory for timers                                                                       
  int64 ti, tf, tdi, tdf;
  // declare memory for boolean checks                                                               
  bool running = true;
  while(running){

    // initial clock cycle count for routine                                                         
    ti = getTickCount();

    // grab two successive frames from the camera                                                    
    cap &gt;&gt; frame_prev;
    cap &gt;&gt; frame_curr;

    // convert color frames to grayscale                                                             
    // each frame must be converted to type CV_32FC1                                                 
    cvtColor(frame_prev, frameP, COLOR_BGR2GRAY);
    cvtColor(frame_curr, frameC, COLOR_BGR2GRAY);

    // declare GPU memory for grayscale frames                                                       
    // "d_" denotes 'device'                                                                         
    // supplying argument "(frameX)" transfers object from cpu to gpu                                
    GpuMat d_frameP(frameP), d_frameC(frameC);
    GpuMat d_flow;

    // get clock cycles for computation                                                              
    // calculate the optic flow and place it in d_flow                                               
    tdi = getTickCount();
    d_calc-&gt;calc(d_frameP, d_frameC, d_flow);
    tdf = getTickCount();

    // split optic flow into x and y components                                                      
    GpuMat planes[2];
    cuda::split(d_flow, planes);

    // transfer x and y components to host (cpu)                                                     
    planes[0].download(flowx);
    planes[1].download(flowy);

    // final clock cyle count for routine                                                            
    tf = getTickCount();

    cout &lt;&lt; flowy &lt;&lt; endl;
    imshow("flow y", flowy);

    // if the waitKey is "escape" change running state to false and end the loop                     
    char ch = (char) waitKey(1);
    if(ch == 27){
      running = false;
    };


	</description>
	<comments>
	</comments>
</bug>