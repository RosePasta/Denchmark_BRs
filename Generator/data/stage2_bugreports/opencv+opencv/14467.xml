<bug id='14467' author='gmedan' open_date='2019-05-01T16:19:15Z' closed_time='2019-07-04T18:10:31Z'>
	<summary>initUndistortRectifyMap handles sensor tilt incorrectly on AVX machine</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4.6
Operating System / Platform =&gt;Windows 64 Bit
Compiler =&gt; Visual Studio 2017

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

When using initUndistortRectifyMap, incorrect results are returned for nonzero sensor tilt distortion parameters. This is evidently due to the implementation of initUndistortRectifyMapLine_AVX which is called by initUndistortRectifyMapComputer if the machine supports it. I'm not familiar with AVX commands enough to find and fix the bug,
&lt;denchmark-link:https://github.com/woodychow&gt;@woodychow&lt;/denchmark-link&gt;
 can you take a look?
&lt;denchmark-link:https://github.com/gmedan/opencv/tree/sensor_tilt_bug&gt;https://github.com/gmedan/opencv/tree/sensor_tilt_bug&lt;/denchmark-link&gt;

&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

The following example achieves meshgrid distortion and undistortion in sequence (using initUndistortRectifyMap and undistortPoints respectively), then checks that the result is a meshgrid.
The test passes for any reasonable combination of distortion parameters, unless the tilt parameters have nonzero value and the machine supports AVX.
The last 3 columns are not handled by AVX and the result is correct.
    cv::Mat k = cv::Mat::eye(cv::Size(3,3), CV_32FC1) * 62e2f;
    cv::Size size_w_h(512 + 3, 512);
    k.at&lt;float&gt;(0, 2) = size_w_h.width / 2.0f;
    k.at&lt;float&gt;(1, 2) = size_w_h.height / 2.0f;
    k.at&lt;float&gt;(2, 2) = 1;

    std::vector&lt;float&gt; x, y;
    for (int i = 0; i &lt; size_w_h.width; i++) x.push_back((float)i);
    for (int i = 0; i &lt; size_w_h.height; i++) y.push_back((float)i);
    cv::Mat X, Y;
    cv::repeat(cv::Mat(x).t(), size_w_h.height, 1, X);
    cv::repeat(cv::Mat(y), 1, size_w_h.width, Y);
    cv::Mat mesh_uv;
    cv::merge(std::vector&lt;cv::Mat&gt;{X, Y}, mesh_uv);

    cv::Matx&lt;double, 1, 14&gt; d
    { 0, 0 ,0, 0, 0,
    0, 0, 0, 0, 0, 0, 0,
    0.09, 0.0 };
    cv::Mat mapxy, dst;
    cv::initUndistortRectifyMap(k, d, cv::noArray(), k, size_w_h, CV_32FC2, mapxy, cv::noArray());
    cv::undistortPoints(mapxy.reshape(2, mapxy.total()), dst, k, d, cv::noArray(), k);
    dst = dst.reshape(2, mapxy.rows) ;
    cv::Mat diff = dst - mesh_uv;
    if (cv::norm(diff) &gt; 1e-5)
    {
        ts-&gt;printf(cvtest::TS::LOG, "Error in initUndistortRectifyMap");
        ts-&gt;set_failed_test_info(cvtest::TS::FAIL_BAD_ACCURACY);
    } 
	</description>
	<comments>
		<comment id='1' author='gmedan' date='2019-05-01T21:58:12Z'>
		&lt;denchmark-link:https://github.com/gmedan&gt;@gmedan&lt;/denchmark-link&gt;
 Thank you for the report!
I can confirm issue with provided reproducer.
Condition EXPECT_LE(cvtest::norm(diff, NORM_INF), 1e-5) shows:

with AVX2:
Expected: (cvtest::norm(diff, NORM_INF)) &lt;= (1e-5), actual: 1.98671 vs 1e-05
without _AVX optimization (replaced to #if 0):
Expected: (cvtest::norm(diff, NORM_INF)) &lt;= (1e-5), actual: 6.10352e-05 vs 1e-05

		</comment>
		<comment id='2' author='gmedan' date='2019-06-26T10:21:45Z'>
		&lt;denchmark-link:https://github.com/terfendail&gt;@terfendail&lt;/denchmark-link&gt;
 Could you take a look on AVX optimized code?
Regression test is here: &lt;denchmark-link:https://github.com/alalek/opencv/commit/issue_14467&gt;alalek@issue_1&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>