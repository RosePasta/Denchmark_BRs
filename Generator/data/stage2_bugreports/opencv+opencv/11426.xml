<bug id='11426' author='IdoWSC' open_date='2018-04-29T11:08:14Z' closed_time='2020-01-14T16:23:54Z'>
	<summary>norm with NORM_HAMMING returns strange results</summary>
	<description>
&lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;


OpenCV =&gt; 3.4.0
Operating System / Platform =&gt; Windows 10 64 bit
Compiler =&gt; Visual Studio 2015

&lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;

when using cv2.norm in python using NORM_HAMMING, the results are strange.
For instance the returned distance between 17 and 8 is 0, while clearly 17 = '00010001' and 8 = '00001000'
The real distance is 3.0
&lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;a = np.array([8], dtype=np.uint8)
b = np.array([17], dtype=np.uint8)
cv2.norm(a, b, cv2.NORM_HAMMING)
0.0
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='IdoWSC' date='2018-05-05T03:36:56Z'>
		The problem is that the Python bindings call the version of norm that takes only one InputArray as an input.
You are expecting to call &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/core/include/opencv2/core.hpp#L691&gt;this&lt;/denchmark-link&gt;
 but you end up calling &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/core/include/opencv2/core.hpp#L678&gt;this&lt;/denchmark-link&gt;
. The call to the version you did not want to call somehow goes through and nonsense is returned.
According to &lt;denchmark-link:https://docs.opencv.org/master/df/da2/tutorial_py_table_of_contents_bindings.html&gt;the doc on Python bindings&lt;/denchmark-link&gt;
, the way to get around this is to utilize the  declaration.
I'm not super familiar with the Python bindings but I think one naive solution might be to do just what that doc suggests. Perhaps CV_EXPORTS_AS(norm2) ...... in core.hpp?
I created a PR to quest this: &lt;denchmark-link:https://github.com/opencv/opencv/pull/11464&gt;#11464&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='IdoWSC' date='2018-05-06T07:59:14Z'>
		Hi  saskatchewancatch, Thx for replying.

The problem is that the Python bindings call the version of norm that takes only one InputArray as an input.
You are expecting to call this but you end up calling this. The call to the version you did not want to call somehow goes through and nonsense is returned.

I'm not sure about this, I found out that when I use it with 2 arrays with shape[0] &gt; 1 then norm behaves as expected.
I'll try your suggestion and see what comes up.
		</comment>
		<comment id='3' author='IdoWSC' date='2018-05-06T16:18:18Z'>
		It was with debugging that I noticed the wrong overload was being called.
I hope the suggestion works out for you.
Good luck.
		</comment>
		<comment id='4' author='IdoWSC' date='2018-05-11T13:11:55Z'>
		&lt;denchmark-link:https://github.com/saskatchewancatch&gt;@saskatchewancatch&lt;/denchmark-link&gt;
 the problem is only in python, and only with 1 element numpy arrays (because those can be converted to a single number and back) so what it sees is like:
&lt;denchmark-code&gt;cv2.norm(a, 17, [cv2.NORM_HAMMING])
&lt;/denchmark-code&gt;

17 == NORM_HAMMING2 | NORM_RELATIVE  (which ofc. returns nonsense results)
you could also try to reverse the argument order:
&lt;denchmark-code&gt; cv2.norm( b, a, cv2.NORM_HAMMING )
&lt;/denchmark-code&gt;

(error: normType 8 not found)
do you have any real world data like that ? or was it just a test ?
it'll also work fine, if the normType is specified explicitly:
&lt;denchmark-code&gt;cv2.norm(a, b, normType=cv2.NORM_HAMMING)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='IdoWSC' date='2018-05-13T07:34:54Z'>
		Hi Berak, Thanks for replaying.

do you have any real world data like that ? or was it just a test ?

It was just a test.
I'll use your suggestion.
Thanks!
		</comment>
	</comments>
</bug>