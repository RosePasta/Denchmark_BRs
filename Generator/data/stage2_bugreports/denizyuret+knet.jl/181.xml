<bug id='181' author='swiesend' open_date='2017-10-23T20:49:39Z' closed_time='2017-11-29T16:44:54Z'>
	<summary>curand.curandCreateGenerator error 203 in notebook examples/softmax.ipynb</summary>
	<description>
When I try to run the MLP with the dropout function at &lt;denchmark-link:https://github.com/denizyuret/Knet.jl/blame/master/examples/softmax.ipynb#L673-L687&gt;MLP with dropout&lt;/denchmark-link&gt;
, then CUDA complains with:
curand.curandCreateGenerator error 203

Stacktrace:
 [1] macro expansion at /home/sebastian/.julia/v0.6/Knet/src/gpu.jl:13 [inlined]
 [2] rng(::Bool) at /home/sebastian/.julia/v0.6/Knet/src/random.jl:13
 [3] rand!(::Knet.KnetArray{Float32,2}) at /home/sebastian/.julia/v0.6/Knet/src/random.jl:4
 [4] dropout(::Knet.KnetArray{Float32,2}, ::Float64) at ./In[71]:4
 [5] #mlp#78(::Tuple{Float64,Int64}, ::Function, ::AutoGrad.Rec{Array{Knet.KnetArray{Float32,2},1}}, ::Knet.KnetArray{Float32,2}) at ./In[71]:11
 [6] (::#kw##mlp)(::Array{Any,1}, ::#mlp, ::AutoGrad.Rec{Array{Knet.KnetArray{Float32,2},1}}, ::Knet.KnetArray{Float32,2}) at ./&lt;missing&gt;:0
 [7] #softloss#5(::Int64, ::Int64, ::Array{Any,1}, ::Function, ::AutoGrad.Rec{Array{Knet.KnetArray{Float32,2},1}}, ::Knet.KnetArray{Float32,2}, ::Knet.KnetArray{Float32,2}, ::#mlp) at ./In[14]:4
 [8] (::#kw##softloss)(::Array{Any,1}, ::#softloss, ::AutoGrad.Rec{Array{Knet.KnetArray{Float32,2},1}}, ::Knet.KnetArray{Float32,2}, ::Knet.KnetArray{Float32,2}, ::Function) at ./&lt;missing&gt;:0
 [9] forward_pass(::Function, ::Tuple{Array{Knet.KnetArray{Float32,2},1},Knet.KnetArray{Float32,2},Knet.KnetArray{Float32,2},#mlp}, ::Array{Any,1}, ::Int64) at /home/sebastian/.julia/v0.6/AutoGrad/src/core.jl:88
 [10] (::AutoGrad.##gradfun#1#3{#softloss,Int64})(::Array{Any,1}, ::Function, ::Array{Knet.KnetArray{Float32,2},1}, ::Vararg{Any,N} where N) at /home/sebastian/.julia/v0.6/AutoGrad/src/core.jl:39
 [11] (::AutoGrad.#kw##gradfun#2)(::Array{Any,1}, ::AutoGrad.#gradfun#2, ::Array{Knet.KnetArray{Float32,2},1}, ::Vararg{Any,N} where N) at ./&lt;missing&gt;:0
 [12] #train#12(::Int64, ::Float64, ::Array{Any,1}, ::Function, ::Array{Knet.KnetArray{Float32,2},1}, ::Array{Any,1}, ::Function) at ./In[32]:6
 [13] (::#kw##train)(::Array{Any,1}, ::#train, ::Array{Knet.KnetArray{Float32,2},1}, ::Array{Any,1}, ::Function) at ./&lt;missing&gt;:0
 [14] include_string(::String, ::String) at ./loading.jl:515
Is this a CUDA configuration problem or maybe even a Hardware issue? Or did I hit some deprecated code/example?
Thank you for making this great library available and the neat examples, which really help me to get started again with NNs in general and Knet in specific!
I develop on  with the offical &lt;denchmark-link:https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1604&amp;target_type=deblocal&gt;.deb&lt;/denchmark-link&gt;
 package installed.
Here some additional info about my device:
&lt;denchmark-code&gt;sebastian@home:~/develop/cuda/samples/NVIDIA_CUDA-9.0_Samples/bin/x86_64/linux/release$ ./deviceQuery
./deviceQuery Starting...

 CUDA Device Query (Runtime API) version (CUDART static linking)

Detected 1 CUDA Capable device(s)

Device 0: "GeForce 940M"
  CUDA Driver Version / Runtime Version          9.0 / 9.0
  CUDA Capability Major/Minor version number:    5.0
  Total amount of global memory:                 2003 MBytes (2100232192 bytes)
  ( 3) Multiprocessors, (128) CUDA Cores/MP:     384 CUDA Cores
  GPU Max Clock rate:                            1176 MHz (1.18 GHz)
  Memory Clock rate:                             900 Mhz
  Memory Bus Width:                              64-bit
  L2 Cache Size:                                 1048576 bytes
  Maximum Texture Dimension Size (x,y,z)         1D=(65536), 2D=(65536, 65536), 3D=(4096, 4096, 4096)
  Maximum Layered 1D Texture Size, (num) layers  1D=(16384), 2048 layers
  Maximum Layered 2D Texture Size, (num) layers  2D=(16384, 16384), 2048 layers
  Total amount of constant memory:               65536 bytes
  Total amount of shared memory per block:       49152 bytes
  Total number of registers available per block: 65536
  Warp size:                                     32
  Maximum number of threads per multiprocessor:  2048
  Maximum number of threads per block:           1024
  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)
  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)
  Maximum memory pitch:                          2147483647 bytes
  Texture alignment:                             512 bytes
  Concurrent copy and kernel execution:          Yes with 1 copy engine(s)
  Run time limit on kernels:                     Yes
  Integrated GPU sharing Host Memory:            No
  Support host page-locked memory mapping:       Yes
  Alignment requirement for Surfaces:            Yes
  Device has ECC support:                        Disabled
  Device supports Unified Addressing (UVA):      Yes
  Supports Cooperative Kernel Launch:            No
  Supports MultiDevice Co-op Kernel Launch:      No
  Device PCI Domain ID / Bus ID / location ID:   0 / 1 / 0
  Compute Mode:
     &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;

deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 9.0, CUDA Runtime Version = 9.0, NumDevs = 1
Result = PASS
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='swiesend' date='2017-10-24T09:22:04Z'>
		According to curand.h error 203 is CURAND_STATUS_INITIALIZATION_FAILED.

One theory is that you may have run out of gpu memory before curand was
initialized (Knet greedily grabs as much gpu memory as it needs).  If that
is the problem, then calling curand (e.g. by using rand!(::KnetArray)) in
the beginning, before running training etc. will initialize the library
when memory is plenty.  Let me know if this solves the problem and I will
try to automate this in Knet initialization.

best,
deniz
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Mon, Oct 23, 2017 at 11:49 PM Sebastian Wiesendahl &lt; ***@***.***&gt; wrote:
 When I try to run the MLP with the dropout function at MLP with *dropout*
 &lt;https://github.com/denizyuret/Knet.jl/blame/master/examples/softmax.ipynb#L673-L687&gt;,
 then CUDA complains with:

 curand.curandCreateGenerator error 203

 Stacktrace:
  [1] macro expansion at /home/sebastian/.julia/v0.6/Knet/src/gpu.jl:13 [inlined]
  [2] rng(::Bool) at /home/sebastian/.julia/v0.6/Knet/src/random.jl:13
  [3] rand!(::Knet.KnetArray{Float32,2}) at /home/sebastian/.julia/v0.6/Knet/src/random.jl:4
  [4] dropout(::Knet.KnetArray{Float32,2}, ::Float64) at ./In[71]:4
  [5] #mlp#78(::Tuple{Float64,Int64}, ::Function, ::AutoGrad.Rec{Array{Knet.KnetArray{Float32,2},1}}, ::Knet.KnetArray{Float32,2}) at ./In[71]:11
  [6] (::#kw##mlp)(::Array{Any,1}, ::#mlp, ::AutoGrad.Rec{Array{Knet.KnetArray{Float32,2},1}}, ::Knet.KnetArray{Float32,2}) at ./&lt;missing&gt;:0
  [7] #softloss#5(::Int64, ::Int64, ::Array{Any,1}, ::Function, ::AutoGrad.Rec{Array{Knet.KnetArray{Float32,2},1}}, ::Knet.KnetArray{Float32,2}, ::Knet.KnetArray{Float32,2}, ::#mlp) at ./In[14]:4
  [8] (::#kw##softloss)(::Array{Any,1}, ::#softloss, ::AutoGrad.Rec{Array{Knet.KnetArray{Float32,2},1}}, ::Knet.KnetArray{Float32,2}, ::Knet.KnetArray{Float32,2}, ::Function) at ./&lt;missing&gt;:0
  [9] forward_pass(::Function, ::Tuple{Array{Knet.KnetArray{Float32,2},1},Knet.KnetArray{Float32,2},Knet.KnetArray{Float32,2},#mlp}, ::Array{Any,1}, ::Int64) at /home/sebastian/.julia/v0.6/AutoGrad/src/core.jl:88
  [10] (::AutoGrad.##gradfun#1#3{#softloss,Int64})(::Array{Any,1}, ::Function, ::Array{Knet.KnetArray{Float32,2},1}, ::Vararg{Any,N} where N) at /home/sebastian/.julia/v0.6/AutoGrad/src/core.jl:39
  [11] (::AutoGrad.#kw##gradfun#2)(::Array{Any,1}, ::AutoGrad.#gradfun#2, ::Array{Knet.KnetArray{Float32,2},1}, ::Vararg{Any,N} where N) at ./&lt;missing&gt;:0
  [12] #train#12(::Int64, ::Float64, ::Array{Any,1}, ::Function, ::Array{Knet.KnetArray{Float32,2},1}, ::Array{Any,1}, ::Function) at ./In[32]:6
  [13] (::#kw##train)(::Array{Any,1}, ::#train, ::Array{Knet.KnetArray{Float32,2},1}, ::Array{Any,1}, ::Function) at ./&lt;missing&gt;:0
  [14] include_string(::String, ::String) at ./loading.jl:515

 Is this a CUDA configuration problem or maybe even a Hardware issue? Or
 did I hit some deprecated code/example?

 Thank you for making this great library available and the neat examples,
 which really help me to get started!

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 &lt;#181&gt;, or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/ABvNpsiFT2k79JrL4rRAYNZm3t8PpXhrks5svPvkgaJpZM4QDeWF&gt;
 .



		</comment>
		<comment id='2' author='swiesend' date='2017-11-01T18:58:51Z'>
		Currently, I am having the same error (in my own LeNet example with dropout). I've also tried to convert MNIST data to KnetArray batch by batch in every individual gradient calculation. However, it also fails in that way, too.
Calling predict function with desired training dropout probability once just before accuracy/lost calculation (where we have zero dropout) solved my problem.
		</comment>
		<comment id='3' author='swiesend' date='2017-11-17T19:40:46Z'>
		
Let me know if this solves the problem and I will try to automate this in Knet initialization.

&lt;denchmark-link:https://github.com/denizyuret&gt;@denizyuret&lt;/denchmark-link&gt;
 doing something like
rand!(KnetArray(ones(10)))
solves the problem in my case
		</comment>
		<comment id='4' author='swiesend' date='2017-11-17T22:48:12Z'>
		Sorry for replying so late.
When opening a new REPL, then everything is fine:
&lt;denchmark-code&gt;julia&gt; using Knet

julia&gt; rand!(KnetArray(ones(10)))
10-element Knet.KnetArray{Float64,1}:
 0.438451 
 0.460365 
 0.250215 
 0.494744 
 0.0530111
 0.337699 
 0.396763 
 0.874419 
 0.482167 
 0.0428398
&lt;/denchmark-code&gt;

When doing rand!(KnetArray(ones(10))) at the beginning of the softmax.ipynb notebook then everything seems to be fine! That trick helped!
I only get errors when initializing too late. I am not sure if this can be reproduced on others machines than mine. Currently I am running a source built version of Julia v0.6, which was not the case, when I initially posted the question.
When I run it immediately before the training of the dropout
rand!(KnetArray(ones(10)))
srand(1)
@time trn5=train(winit(64),dtrn,mlp;lr=0.1,pdrop=(0.2,0))
@time trnloss5 = [ avgloss(w,dtrn,mlp) for w in trn5 ]
@time tstloss5 = [ avgloss(w,dtst,mlp) for w in trn5 ]
@time trnerr5 = [ zeroone(w,dtrn,mlp) for w in trn5 ]
@time tsterr5 = [ zeroone(w,dtst,mlp) for w in trn5 ]
minimum(tstloss5),minimum(tsterr5)
then I get:
&lt;denchmark-code&gt;curand.curandCreateGenerator error 203

Stacktrace:
 [1] macro expansion at /home/sebastian/.julia/v0.6/Knet/src/gpu.jl:13 [inlined]
 [2] rng(::Bool) at /home/sebastian/.julia/v0.6/Knet/src/random.jl:13
 [3] rand!(::Knet.KnetArray{Float64,1}) at /home/sebastian/.julia/v0.6/Knet/src/random.jl:5
 [4] include_string(::String, ::String) at ./loading.jl:515
&lt;/denchmark-code&gt;

And even before defining dropout, then I get this
&lt;denchmark-h:h1&gt;MLP with dropout&lt;/denchmark-h&gt;

rand!(KnetArray(ones(10)))
​# Dropout is another way to address overfitting
function dropout(x,p)
    if p &gt; 0
        x .* (rand!(similar(x)) .&gt; p) ./ (1-p)
    else
        x
    end
end
​
function mlp(w,x; pdrop=(0,0))
    x = dropout(x,pdrop[1])
    for i=1:2:length(w)-2
        x = relu.(w[i]*x .+ w[i+1])
        x = dropout(x,pdrop[2])
    end
    return w[end-1]*x .+ w[end]
end
&lt;denchmark-code&gt;curand.curandGenerateUniformDouble error 202

Stacktrace:
 [1] macro expansion at /home/sebastian/.julia/v0.6/Knet/src/gpu.jl:13 [inlined]
 [2] rand!(::Knet.KnetArray{Float64,1}) at /home/sebastian/.julia/v0.6/Knet/src/random.jl:5
 [3] include_string(::String, ::String) at ./loading.jl:515
&lt;/denchmark-code&gt;

srand(1)
@time trn5=train(winit(64),dtrn,mlp;lr=0.1,pdrop=(0.2,0))
@time trnloss5 = [ avgloss(w,dtrn,mlp) for w in trn5 ]
@time tstloss5 = [ avgloss(w,dtst,mlp) for w in trn5 ]
@time trnerr5 = [ zeroone(w,dtrn,mlp) for w in trn5 ]
@time tsterr5 = [ zeroone(w,dtst,mlp) for w in trn5 ]
minimum(tstloss5),minimum(tsterr5)
&lt;denchmark-code&gt;curand.curandGenerateUniform error 102

Stacktrace:
 [1] macro expansion at /home/sebastian/.julia/v0.6/Knet/src/gpu.jl:13 [inlined]
 [2] rand!(::Knet.KnetArray{Float32,2}) at /home/sebastian/.julia/v0.6/Knet/src/random.jl:4
 [3] dropout(::Knet.KnetArray{Float32,2}, ::Float64) at ./In[127]:4
 [4] #mlp#102(::Tuple{Float64,Int64}, ::Function, ::AutoGrad.Rec{Array{Knet.KnetArray{Float32,2},1}}, ::Knet.KnetArray{Float32,2}) at ./In[127]:11
 [5] (::#kw##mlp)(::Array{Any,1}, ::#mlp, ::AutoGrad.Rec{Array{Knet.KnetArray{Float32,2},1}}, ::Knet.KnetArray{Float32,2}) at ./&lt;missing&gt;:0
 [6] #softloss#30(::Int64, ::Int64, ::Array{Any,1}, ::Function, ::AutoGrad.Rec{Array{Knet.KnetArray{Float32,2},1}}, ::Knet.KnetArray{Float32,2}, ::Knet.KnetArray{Float32,2}, ::#mlp) at ./In[69]:4
 [7] (::#kw##softloss)(::Array{Any,1}, ::#softloss, ::AutoGrad.Rec{Array{Knet.KnetArray{Float32,2},1}}, ::Knet.KnetArray{Float32,2}, ::Knet.KnetArray{Float32,2}, ::Function) at ./&lt;missing&gt;:0
 [8] forward_pass(::Function, ::Tuple{Array{Knet.KnetArray{Float32,2},1},Knet.KnetArray{Float32,2},Knet.KnetArray{Float32,2},#mlp}, ::Array{Any,1}, ::Int64) at /home/sebastian/.julia/v0.6/AutoGrad/src/core.jl:88
 [9] (::AutoGrad.##gradfun#1#3{#softloss,Int64})(::Array{Any,1}, ::Function, ::Array{Knet.KnetArray{Float32,2},1}, ::Vararg{Any,N} where N) at /home/sebastian/.julia/v0.6/AutoGrad/src/core.jl:39
 [10] (::AutoGrad.#kw##gradfun#2)(::Array{Any,1}, ::AutoGrad.#gradfun#2, ::Array{Knet.KnetArray{Float32,2},1}, ::Vararg{Any,N} where N) at ./&lt;missing&gt;:0
 [11] #train#37(::Int64, ::Float64, ::Array{Any,1}, ::Function, ::Array{Knet.KnetArray{Float32,2},1}, ::Array{Any,1}, ::Function) at ./In[84]:6
 [12] (::#kw##train)(::Array{Any,1}, ::#train, ::Array{Knet.KnetArray{Float32,2},1}, ::Array{Any,1}, ::Function) at ./&lt;missing&gt;:0
 [13] include_string(::String, ::String) at ./loading.jl:515
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='swiesend' date='2017-11-29T16:44:54Z'>
		I now initialize curand at startup to avoid this issue.
		</comment>
	</comments>
</bug>