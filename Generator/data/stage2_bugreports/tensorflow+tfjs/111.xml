<bug id='111' author='nsthorat' open_date='2018-04-05T19:51:49Z' closed_time='2019-08-23T21:05:17Z'>
	<summary>TypeScript compile errors with 'strict'</summary>
	<description>
From @ofrobots on January 21, 2018 17:23
I was trying to use this library from a TypeScript project and getting some very hard to digest TypeScript compile errors in deeplearn types. It turns out that the code here is not usable from a project that uses the TypeScript &lt;denchmark-link:https://www.typescriptlang.org/docs/handbook/compiler-options.html&gt;strict compiler option&lt;/denchmark-link&gt;
.
Adding the strict flag to tsconfig.json in this repo and building gives the same errors. Gory details included.

yarn run v1.3.2
$ tsc
src/data/checkpoint_loader.ts(124,21): error TS2345: Argument of type 'Array4D&lt;"float32"&gt; | Array1D&lt;"float32"&gt; | Array3D&lt;"float32"&gt; | Array2D&lt;"float32"&gt; | Scalar&lt;"float...' is not assignable to parameter of type 'NDArray&lt;"float32" | "int32" | "bool", "higher" | "0" | "1" | "2" | "3" | "4"&gt;'.
Type 'Array4D&lt;"float32"&gt;' is not assignable to type 'NDArray&lt;"float32" | "int32" | "bool", "higher" | "0" | "1" | "2" | "3" | "4"&gt;'.
124             resolve(ndarray);
~~~~~~~
src/data/dataset.ts(151,11): error TS2345: Argument of type 'Scalar&lt;"float32"&gt; | Array1D&lt;"float32"&gt; | Array2D&lt;"float32"&gt; | Array3D&lt;"float32"&gt; | Array4D&lt;"float...' is not assignable to parameter of type 'NDArray&lt;"float32" | "int32" | "bool", "higher" | "0" | "1" | "2" | "3" | "4"&gt;'.
Type 'Scalar&lt;"float32"&gt;' is not assignable to type 'NDArray&lt;"float32" | "int32" | "bool", "higher" | "0" | "1" | "2" | "3" | "4"&gt;'.
Types of property 'flatten' are incompatible.
Type '() =&gt; Array1D&lt;"float32"&gt;' is not assignable to type '() =&gt; Array1D&lt;"float32" | "int32" | "bool"&gt;'.
Type 'Array1D&lt;"float32"&gt;' is not assignable to type 'Array1D&lt;"float32" | "int32" | "bool"&gt;'.
151           NDArray.make(example.shape, {values: normalizedValues}, 'float32'));
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data/dataset.ts(206,7): error TS2322: Type 'number | undefined' is not assignable to type 'number | Float32Array'.
Type 'undefined' is not assignable to type 'number | Float32Array'.
206       curLowerBounds = this.normalizationInfo[dataIndex].lowerBound;
~~~~~~~~~~~~~~
src/data/dataset.ts(207,7): error TS2322: Type 'number | undefined' is not assignable to type 'number | Float32Array'.
Type 'undefined' is not assignable to type 'number | Float32Array'.
207       curUpperBounds = this.normalizationInfo[dataIndex].upperBound;
~~~~~~~~~~~~~~
src/data/dataset.ts(236,34): error TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'number | Float32Array'.
Type 'undefined' is not assignable to type 'number | Float32Array'.
236         this.dataset[dataIndex], this.normalizationInfo[dataIndex].lowerBound,
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data/dataset.ts(249,19): error TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'number | Float32Array'.
Type 'undefined' is not assignable to type 'number | Float32Array'.
249         examples, this.normalizationInfo[dataIndex].lowerBound,
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data/dataset_test.ts(48,37): error TS2345: Argument of type '(Array2D&lt;"float32"&gt;[] | Array1D&lt;"float32" | "int32"&gt;[])[]' is not assignable to parameter of type 'NDArray&lt;"float32" | "int32" | "bool", "higher" | "0" | "1" | "2" | "3" | "4"&gt;[][]'.
Type 'Array2D&lt;"float32"&gt;[] | Array1D&lt;"float32" | "int32"&gt;[]' is not assignable to type 'NDArray&lt;"float32" | "int32" | "bool", "higher" | "0" | "1" | "2" | "3" | "4"&gt;[]'.
Type 'Array2D&lt;"float32"&gt;[]' is not assignable to type 'NDArray&lt;"float32" | "int32" | "bool", "higher" | "0" | "1" | "2" | "3" | "4"&gt;[]'.
Type 'Array2D&lt;"float32"&gt;' is not assignable to type 'NDArray&lt;"float32" | "int32" | "bool", "higher" | "0" | "1" | "2" | "3" | "4"&gt;'.
Types of property 'flatten' are incompatible.
Type '() =&gt; Array1D&lt;"float32"&gt;' is not assignable to type '() =&gt; Array1D&lt;"float32" | "int32" | "bool"&gt;'.
Type 'Array1D&lt;"float32"&gt;' is not assignable to type 'Array1D&lt;"float32" | "int32" | "bool"&gt;'.
48     const dataset = new StubDataset(data);
~~~~
src/data/input_provider_test.ts(41,53): error TS2345: Argument of type 'Scalar&lt;"float32"&gt;[][]' is not assignable to parameter of type 'NDArray&lt;"float32" | "int32" | "bool", "higher" | "0" | "1" | "2" | "3" | "4"&gt;[][]'.
Type 'Scalar&lt;"float32"&gt;[]' is not assignable to type 'NDArray&lt;"float32" | "int32" | "bool", "higher" | "0" | "1" | "2" | "3" | "4"&gt;[]'.
...
...
...

To make deeplearn usable as broadly as possible, it would be good to start using the strict compile option in this repo. Looking at tsconfig.json, it seems like the intent is to be strict, but the config might have been written before strict was a thing. It is a bit more strict than the flags in use at the moment. Many of the existing flags are subsumed by strict.
Tangential: I would encourage to take a look at the module gts. It provides the Google TS Style Guide configuration and utilities to apply them on a code-base.
Copied from original issue: tensorflow/tfjs-core#576
	</description>
	<comments>
		<comment id='1' author='nsthorat' date='2018-04-05T19:51:50Z'>
		From @dsmilkov on January 21, 2018 17:38
Good point. Unfortunately, we find strict mode to be strangely prohibitive. For example (omitted quotes for readability):
Array4D&lt;float32&gt; should be assignable to NDArray&lt;float32|int32|bool, higher|0|1|2|3|4&gt; because:

Array4D&lt;float32&gt; actually extends NDArray&lt;float32, 4&gt;, thus
Array4D should be assignable to NDArray
float32 should be assignable to float32|int32|bool
4 should be assignable to 0|1|2|3|4|higher.

but strict mode won't allow that. To fix that, we'll have to make major changes to our library (remove classes that extend NDArray) and break users.
Open to suggestions. Would be great to fix this!
		</comment>
		<comment id='2' author='nsthorat' date='2018-04-05T19:51:50Z'>
		From @ofrobots on January 21, 2018 20:20
I think the problem is due to the following definition of NDArray:
export class NDArray&lt;D extends DataType = DataType, R extends Rank = Rank&gt; { .. }
The default type parameters allow one to omit the type parameters when referring to . Strict mode enables &lt;denchmark-link:https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-6.html&gt;contravariant types&lt;/denchmark-link&gt;
 for function parameters, and a function accepting an  parameter is not type compatible with a function accepting  as D may actually be a type different from 'float32', 'int32', 'bool'.
Example:
// in NDArray constructor
ENV.math.register(this); // &lt;-- type error in strict mode. 
math.register is defined as: register(a: NDArray): void { ... }  (omitting | Variable for brevity). The call to math.register from the NDArray constructor is unsound because this (an NDArray instance) may have been instantiated with a datatype different from the default value of DataType. This can be fixed by changing the definition of register to:  register&lt;D extends DataType, R extends Rank&gt;(a: NDArray&lt;D,R&gt;): void {.
More generally, I think we should omit the default template parameters from the NDArray definition, as it is leading to many instances of such type unsoundness.
With the strict flag I see lots of real type errors in the library that we are not currently catching.
		</comment>
		<comment id='3' author='nsthorat' date='2019-08-23T20:47:50Z'>
		Idea: you could enable most of strict mode, and just disable the --strictFunctionTypes flag, to get the other benefits of strict mode (such a null checking, which is also needed to generate the proper Closure externs from this library).
		</comment>
		<comment id='4' author='nsthorat' date='2019-08-23T21:05:17Z'>
		That's good to know, thanks!
I think fundamentally the problem comes down to:
Why does a third-party typescript project care about the typescript settings of an external dependency?
I think that is fundamentally a typescript problem, and not a problem of the library. I'm happy to reopen this issue if we see a decent number of users that are affected by this limitation.
		</comment>
	</comments>
</bug>