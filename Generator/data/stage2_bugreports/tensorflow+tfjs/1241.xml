<bug id='1241' author='Sparkier' open_date='2019-02-14T07:58:56Z' closed_time='2019-07-22T18:15:15Z'>
	<summary>TypeScript compile error on 0.15.1</summary>
	<description>
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

0.15.1
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

Browser independent, since compilation already fails.
&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

Typescript throws an error, when importing tfjs.
&lt;denchmark-code&gt;node_modules/@tensorflow/tfjs-layers/dist/keras_format/types.d.ts:12:5 - error TS2411: Property 'config' of type 'T' is not assignable to string index type 'PyJsonValue'.

12     config: T;

Found 1 error.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h4&gt;Code to reproduce the bug / link to feature request&lt;/denchmark-h&gt;

Console:
&lt;denchmark-code&gt;npm init
npm i @tensorflow/tfjs
npm i typescript
&lt;/denchmark-code&gt;

index.ts
&lt;denchmark-code&gt;import * as tf from '@tensorflow/tfjs';

// Define a model for linear regression.
const model = tf.sequential();
&lt;/denchmark-code&gt;

Console:
&lt;denchmark-code&gt;tsc --init
tsc
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Sparkier' date='2019-02-14T14:45:29Z'>
		cc &lt;denchmark-link:https://github.com/davidsoergel&gt;@davidsoergel&lt;/denchmark-link&gt;
 I think this can be solved by upgrading the version of typescript. Can you confirm?
		</comment>
		<comment id='2' author='Sparkier' date='2019-02-14T14:56:00Z'>
		Yes, that seems like the likely explanation.  We use mapped types that are available starting in TS 2.9 (&lt;denchmark-link:https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-9.html&gt;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-9.html&lt;/denchmark-link&gt;
).  tfjs-layers currently specifies TS 2.8.3, so I don't understand how things have been working for us.  I'll investigate that out of curiosity, but in any case we need to bring all tfjs packages up to 2.9.2.
		</comment>
		<comment id='3' author='Sparkier' date='2019-02-14T16:08:48Z'>
		I found out that this has to do with the compiler options for TypeScript rather than the compiler version itself. The following flags prevent successful compilation:
&lt;denchmark-code&gt;"strictNullChecks": true
&lt;/denchmark-code&gt;

This is included in:
&lt;denchmark-code&gt;"strict": true
&lt;/denchmark-code&gt;

This flag is included in many tsconfig files, for example also in the default one generated by running:
&lt;denchmark-code&gt;tsc --init
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='Sparkier' date='2019-02-14T20:15:51Z'>
		Aha gotcha.  Thanks for tracking that down.  We don't use strictNullChecks in TFJS, but of course we also don't want to cause errors in dependent projects that do use it.
I'll continue looking into whether we can fix this case on our end.  In the meantime, you can use the  compiler option to turn off the strict checking for dependencies, while leaving it on for your own code.  (See &lt;denchmark-link:https://stackoverflow.com/questions/40164034/typescript-strictnullchecks-with-limited-scope&gt;https://stackoverflow.com/questions/40164034/typescript-strictnullchecks-with-limited-scope&lt;/denchmark-link&gt;
).
		</comment>
		<comment id='5' author='Sparkier' date='2019-02-19T15:31:52Z'>
		Just an FYI we probably won’t ever turn on strictNullChecks, it’s a huge change. We used to do this in old projects but it was more cumbersome than it was worth.
		</comment>
		<comment id='6' author='Sparkier' date='2019-02-19T15:36:11Z'>
		Ok, thank you for the information. Since this is the default config and many projects use it (e.g. Googles Polymer Starter Kit, which made me aware of it), it might be a good idea to include information about the need to include skipLibCheck in the documentation.
		</comment>
		<comment id='7' author='Sparkier' date='2019-07-22T18:15:15Z'>
		This is resolved here #&lt;denchmark-link:https://github.com/tensorflow/tfjs-website/pull/287&gt;287&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>