<bug id='441' author='caisq' open_date='2018-06-18T03:48:18Z' closed_time='2018-06-19T19:06:37Z'>
	<summary>Loading models consisting of LSTM layers leads to incorrect prediction result</summary>
	<description>
To get help from the community, check out our &lt;denchmark-link:https://groups.google.com/a/tensorflow.org/forum/#!forum/tfjs&gt;Google group&lt;/denchmark-link&gt;
.
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

0.11.6
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

Doesn't matter
See original discussion in &lt;denchmark-link:https://groups.google.com/a/tensorflow.org/forum/#!topic/tfjs/nM6NFw_LT3s&gt;https://groups.google.com/a/tensorflow.org/forum/#!topic/tfjs/nM6NFw_LT3s&lt;/denchmark-link&gt;

Code for reproducing this issue:
  const xs = tf.ones([1, 2, 3]);
  const modelSaveLocation = 'file:///tmp/tfjs-node-model-1';

  const model = tf.sequential({layers: [
    tf.layers.lstm({units: 2, inputShape: [2, 3]})
  ]});
  model.predict(xs).print();

  await model.save(modelSaveLocation);
  const model2 = await tf.loadModel(modelSaveLocation + '/model.json');
  model2.predict(xs).print();
The output may look something like:
&lt;denchmark-code&gt;Tensor
     [[0.2161175, 0.4266523],]
(node:234122) Warning: N-API is an experimental feature and could change at any time.
Tensor
     [[-0.3356292, 0.041971],]
&lt;/denchmark-code&gt;

Interesting points:

Interestingly, the topology and weight values of the loaded model all match exactly to the original model.
The issue occurs with GRU as well.
But this issue does not occur with SimpleRNN.

	</description>
	<comments>
	</comments>
</bug>