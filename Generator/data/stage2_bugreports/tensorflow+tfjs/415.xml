<bug id='415' author='tpreusse' open_date='2018-06-10T23:47:24Z' closed_time='2018-09-05T15:17:32Z'>
	<summary>Floating Imprecision in Safari leads to exceeded `maximum` and undermined `minimum`</summary>
	<description>
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

0.11.6
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

Safari Version 11.1 (13605.1.33.1.4)
&lt;denchmark-h:h4&gt;Floating Imprecision in maximum and minimum leads to Fatal Error&lt;/denchmark-h&gt;

Running
await tf.toPixels(
  tf.tensor2d([[0, 1], [3, 4]])
    .maximum(tf.scalar(0))
    .minimum(tf.scalar(1))
)
leads to
&lt;denchmark-code&gt;An error occured
Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [-0.000004730089131044224 - 1.000494122505188].
&lt;/denchmark-code&gt;

in Safari.
Accompanied by WebGL: INVALID_ENUM: readPixels: invalid type. Is the floating imprecision a general limitation of Safari because readPixels doesn't work?
I think maximum and minimum should be precise, even if it comes at a cost. A graceful toPixels could be a workaround but probably leads to similar errors in other places.
&lt;denchmark-h:h4&gt;Other Examples of the Floating Imprecision&lt;/denchmark-h&gt;

Just in case you weren't aware:
const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);
const [a, b] = tf.split(x, 2, 1);
a.print();
b.print();
Example Safari Output
&lt;denchmark-code&gt;Tensor
    [[1.0004941, 1.9997916],
     [5.0000868, 5.9993935]]
Tensor
    [[3.0002904, 3.9995973],
     [6.9998927, 8.000391 ]]
&lt;/denchmark-code&gt;

Chrome Output
&lt;denchmark-code&gt;Tensor
    [[1, 2],
     [5, 6]]
Tensor
    [[3, 4],
     [7, 8]]
&lt;/denchmark-code&gt;

Affects most arithmetic, slicing, padding and joining ops.
	</description>
	<comments>
		<comment id='1' author='tpreusse' date='2018-06-11T15:43:49Z'>
		Just adding some info here for us that clipByValue also does the same in safari.
const res2 = tf.tensor2d([[0, 1], [3, 4]])
    .clipByValue(0, 1)

res2.print()
&lt;denchmark-link:https://github.com/tpreusse&gt;@tpreusse&lt;/denchmark-link&gt;
 I'm not sure if this applies in your actual code but a potential workaround if you know your data are integers is to declare the tensor with an int32 dtype. e.g.
const res = tf.tensor2d([[0, 1], [3, 4]], undefined, 'int32')
    .maximum(tf.scalar(0, 'int32'))
		.minimum(tf.scalar(1, 'int32'))

res.print()

// Or using clipByValue

const res2 = tf.tensor2d([[0, 1], [3, 4]], undefined,'int32')
    .clipByValue(0, 1)

res2.print()
		</comment>
		<comment id='2' author='tpreusse' date='2018-06-11T17:07:43Z'>
		This will be fixed when &lt;denchmark-link:https://github.com/tensorflow/tfjs-core/pull/978&gt;tensorflow/tfjs-core#978&lt;/denchmark-link&gt;
 lands, which means safari desktop gives perfect precision (iOS will use half float).
I will get it in before EOW, but needed to refactor testing infrastructure before I could get it in.
		</comment>
		<comment id='3' author='tpreusse' date='2018-06-11T17:41:12Z'>
		Awesome. Thank you.
&lt;denchmark-link:https://github.com/tafsiri&gt;@tafsiri&lt;/denchmark-link&gt;
 thanks for the workaround! Did the job.
Complete workaround, including mul(255), for toPixels:
const t = tf.tensor2d([[0, 1], [3, 4]])
await tf.toPixels(
  t.clipByValue(0, 1)
    .mul(tf.scalar(255)) // floats automatically are multiplied by toPixels
    .cast('int32')
)
		</comment>
		<comment id='4' author='tpreusse' date='2018-09-05T15:17:32Z'>
		Closing since &lt;denchmark-link:https://github.com/tensorflow/tfjs-core/pull/978&gt;tensorflow/tfjs-core#978&lt;/denchmark-link&gt;
 has been merged.
		</comment>
	</comments>
</bug>