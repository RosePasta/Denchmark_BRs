<bug id='1792' author='ToonTalk' open_date='2019-08-05T14:53:15Z' closed_time='2020-04-03T03:19:00Z'>
	<summary>Error passing tfvis.show.fitCallbacks AND tf.callbacks.earlyStopping as callbacks option to fit</summary>
	<description>
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

1.2.6
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

Version 76.0.3809.87 (Official Build) (64-bit)
&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

I can pass either tfvis.show.fitCallbacks or tf.callbacks.earlyStopping as callbacks option to fit as an Array (with one element) but when I pass both an error results. Depending upon the order of the callbacks the error is either
Uncaught (in promise) TypeError: this.getMonitorValue is not a function
at e. (tfjs@latest:2)
at tfjs@latest:2
at Object.next (tfjs@latest:2)
at o (tfjs@latest:2)
or
tfjs@latest:2 Uncaught (in promise) TypeError: n[e].setParams is not a function
at t.setParams (tfjs@latest:2)
at Pf (tfjs@latest:2)
at tfjs@latest:2
at tfjs@latest:2
at Object.next (tfjs@latest:2)
at tfjs@latest:2
at new Promise ()
at wp (tfjs@latest:2)
at tfjs@latest:2
at tfjs@latest:2
&lt;denchmark-h:h4&gt;Code to reproduce the bug / link to feature request&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;&lt;html&gt;&lt;body&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest"&gt;&lt;/script&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis@latest"&gt;&lt;/script&gt;
&lt;script&gt;
const model = tf.sequential();
model.add(tf.layers.dense({
  units: 3,
  activation: 'softmax',
  kernelInitializer: 'ones',
  inputShape: [2]
}));
const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);
const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);
const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);
const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);
model.compile(
    {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});

const metrics = ['loss', 'val_loss', 'acc', 'val_acc'];
const container = {name: 'Loss and accuracy',
                   tab: 'Training'};
const ftfvis_options = {callbacks: ['onEpochEnd']};

model.fit(xs, ys, {
  epochs: 10,
  validationData: [xsVal, ysVal],
  callbacks: [tfvis.show.fitCallbacks(container, metrics, ftfvis_options), tf.callbacks.earlyStopping({monitor: 'val_acc'}), ]
}).then((history) =&gt; {
// Expect to see a length-2 array.
console.log(history.history.val_acc);  
});
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ToonTalk' date='2019-08-08T23:30:10Z'>
		&lt;denchmark-link:https://github.com/tafsiri&gt;@tafsiri&lt;/denchmark-link&gt;
 was able to reproduce this , any thoughts on this ?
		</comment>
		<comment id='2' author='ToonTalk' date='2019-08-09T15:45:48Z'>
		I'd guess callbacks from the second call are overriding some in the first. It's either a bug in layers or vis. I'll dig deeper.
		</comment>
		<comment id='3' author='ToonTalk' date='2019-09-26T14:25:59Z'>
		Hi, any news on this? I am facing a similar problem. When I try to use early stopping and one of the training callbacks, it does not work. Follows a sniped for reproducibility.
&lt;denchmark-code&gt;const model = tf.sequential();
model.add(tf.layers.dense({
  units: 3,
  activation: 'softmax',
  kernelInitializer: 'ones',
  inputShape: [2]
}));
const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);
const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);
const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);
const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);
model.compile(
    {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});

const onTrainBegin = function onTrainBegin(logs){
     console.log("onTrainBegin");
}


// Without the EarlyStopping callback, the val_acc value would be:
//   0.5, 0.5, 0.5, 0.5, ...
// With val_acc being monitored, training should stop after the 2nd epoch.
const history = await model.fit(xs, ys, {
  epochs: 10,
  validationData: [xsVal, ysVal],
  callbacks: [onTrainBegin, tf.callbacks.earlyStopping({monitor: 'val_acc'})]
});

// Expect to see a length-2 array.
console.log(history.history.val_acc);
&lt;/denchmark-code&gt;

It gives the error message:

An error occured this.getMonitorValue is not a function

		</comment>
		<comment id='4' author='ToonTalk' date='2020-04-01T08:14:44Z'>
		maybe it can help someone ending up here:
you can use tf.CustomCallback to make it work
&lt;denchmark-code&gt;await model.fit(chunkXs, chunkYs, {
  epochs: 1000,
  callbacks: [
    tf.callbacks.earlyStopping({ monitor: 'val_acc' }),
    new tf.CustomCallback({
      onEpochEnd (epoch, logs) {
        // ...
      },
    }),
  ],
})
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='ToonTalk' date='2020-07-31T19:40:23Z'>
		&lt;denchmark-link:https://github.com/joaoahmad&gt;@joaoahmad&lt;/denchmark-link&gt;
 Where can I find docs on ? It seems conspicuously absent from &lt;denchmark-link:https://js.tensorflow.org/api/latest/&gt;https://js.tensorflow.org/api/latest/&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='ToonTalk' date='2020-08-01T08:45:01Z'>
		Look in &lt;denchmark-link:https://js.tensorflow.org/api_vis/1.4.3/&gt;https://js.tensorflow.org/api_vis/1.4.3/&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='ToonTalk' date='2020-08-01T16:41:41Z'>
		Thanks, &lt;denchmark-link:https://github.com/ToonTalk&gt;@ToonTalk&lt;/denchmark-link&gt;
 . Can you give me a little more guidance about where in that doc I'm to find information about ?  Basic searching did not yield anything.
(I'm not using tfvis, nor tf in a browser)
		</comment>
		<comment id='8' author='ToonTalk' date='2020-08-01T19:42:04Z'>
		You are right that tf.CustomCallback isn't documented.
The original problem occurs in tfvis using &lt;denchmark-link:https://js.tensorflow.org/api_vis/1.4.3/#show.fitCallbacks&gt;https://js.tensorflow.org/api_vis/1.4.3/#show.fitCallbacks&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='ToonTalk' date='2020-08-02T16:03:05Z'>
		I see the problem.
The  argument is passed through &lt;denchmark-link:https://github.com/tensorflow/tfjs/blob/550e2c7ced057309533f44f76e692fe28aa7a802/tfjs-layers/src/base_callbacks.ts#L465&gt;standardizeCallbacks()&lt;/denchmark-link&gt;
, which only handles homogeneous arrays of either  or . It does not handle an array containing a mix of these.
After all, that is how the callbacks argument is typed. Had I been using TypeScript instead of javascript, I suppose I would have gotten a compiler error.
		</comment>
	</comments>
</bug>