<bug id='1652' author='msektrier' open_date='2019-06-04T10:26:53Z' closed_time='2019-06-19T13:17:41Z'>
	<summary>COCOSSD: WEBGL_PACK=true leads to different results vs Python</summary>
	<description>
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

Model was converted to Model.JSON via

tb-nightly (1.14.0a20190603)
tensorflow-estimator-2.0-preview (1.14.0.dev2019060300)
tensorflow-hub (0.3.0)
tensorflowjs (1.1.2)
termcolor (1.1.0)
tf-nightly-2.0-preview (2.0.0.dev20190603)

&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

Chrome Version 74.0.3729.169 (Offizieller Build) (64-Bit)
&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

When we execute the model in Python with TF 2.0 we get different results than in TFJS. We use the latest version from &lt;denchmark-link:https://cdn.jsdelivr.net/npm/@tensorflow/tfjs/dist/tf.min.js&gt;TFJS &lt;/denchmark-link&gt;
.
In the output tensor "" it seems everything is screwed. 1st and second row are fine and in between I can find other equal rows.
&lt;denchmark-link:https://user-images.githubusercontent.com/49950048/58872101-9bac0f00-86c3-11e9-9766-2c30f4df0da7.png&gt;&lt;/denchmark-link&gt;

and in Python with TF 2.0 we get
&lt;denchmark-link:https://user-images.githubusercontent.com/49950048/58872238-d9109c80-86c3-11e9-8917-5c129066b57b.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h4&gt;Code to reproduce the bug / link to feature request&lt;/denchmark-h&gt;

I prepared a complete HTML skeleton. By calling the index.html it is loading the model.json and predicts.
&lt;denchmark-link:https://share.infinkon.de/index.php/s/tD9QJ98NwJp2jd6&gt;https://share.infinkon.de/index.php/s/tD9QJ98NwJp2jd6&lt;/denchmark-link&gt;

In the folder "tf/ssdlite_saved_model_u2/Saved_Model_ssdlite_v2_1class" you will also find the original saved model we used as a source for the tensorflowjs_converter.
Please note: only detection_boxes is available.
many thanks
Sebastian
	</description>
	<comments>
		<comment id='1' author='msektrier' date='2019-06-14T18:01:36Z'>
		I think I'm having the same problem hmm... I made a landmark detection model and it works fine in tensorflow but when I use it in the browser (tfjs) it gives me completely wrong results. Like instead of receiving normal coordinate values like [123.3..., 94.2...], I get values around these [-97.64..., 220.22...] like if the video was almost frozen and also giving negative coordinates.
If I only change the string that points to the previous version of the same model it just works. I think I didn't change much of the structure except for BatchNormalization...
		</comment>
		<comment id='2' author='msektrier' date='2019-06-19T12:35:38Z'>
		Hi &lt;denchmark-link:https://github.com/msektrier&gt;@msektrier&lt;/denchmark-link&gt;
, I noticed that the image you used in the app is high resolution (4032x3024). Do the results in Python match if you feed a smaller res image (e.g. 400x300)? This will help us narrow down the problem
		</comment>
		<comment id='3' author='msektrier' date='2019-06-19T12:43:02Z'>
		Update: The problem is due to internals of TF.js. In the meantime, the workaround is to add tf.ENV.set('WEBGL_PACK', false); in the run() method before you load the graph and the results should match Python.
&lt;denchmark-link:https://github.com/annxingyuan&gt;@annxingyuan&lt;/denchmark-link&gt;
 Can you take a look at this problem? Turns out when , the results in the browser match Python, but  leads to different results.
		</comment>
		<comment id='4' author='msektrier' date='2019-06-19T13:17:41Z'>
		I've tested the repo and it looks like this is solved by &lt;denchmark-link:https://github.com/tensorflow/tfjs-core/pull/1796&gt;tensorflow/tfjs-core#1796&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='msektrier' date='2019-06-19T13:23:31Z'>
		Great! For our users, once we release a new version of TF.js you should remove the temporary workaround and use the latest
		</comment>
	</comments>
</bug>