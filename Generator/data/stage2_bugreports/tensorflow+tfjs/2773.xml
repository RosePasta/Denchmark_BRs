<bug id='2773' author='enpinzolas' open_date='2020-02-19T16:09:26Z' closed_time='2020-03-12T17:22:24Z'>
	<summary>[tfjs-react-native] AsyncStorageIO fails to save big GraphModels: "Error: Exception in HostFunction: Malformed calls from JS: field sizes are different"</summary>
	<description>
To get help from the community, we encourage using Stack Overflow and the &lt;denchmark-link:https://stackoverflow.com/questions/tagged/tensorflow.js&gt;tensorflow.js&lt;/denchmark-link&gt;
 tag.
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

All the relevant dependencies:
&lt;denchmark-code&gt;@react-native-community/async-storage: 1.8.0,
@tensorflow/tfjs: 1.5.2,
@tensorflow/tfjs-converter: 1.5.2,
@tensorflow/tfjs-core: 1.5.2,
@tensorflow/tfjs-react-native: 0.2.3,
expo-camera: 8.0.0,
expo-gl: 7.0.0,
expo-image-manipulator: 8.0.0,
react: 16.9.0,
react-native: 0.61.5,
react-native-fs: 2.16.4,
react-native-svg: 11.0.1,
react-native-unimodules: 0.7.0
&lt;/denchmark-code&gt;

&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

React native.
&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

After loading a big model  via loadGraphModel through http (the model is served locally but it should not be a problem once loaded), I try to save it in local storage using an AsyncStorageIO handler it fails, showing the following error:
&lt;denchmark-code&gt;Error: Failed to save model 'mymodel' to AsyncStorage.
            Error info Error: Exception in HostFunction: Malformed calls from JS: field sizes are different.

[[20,34],[5,0],[[296,2000,1582122742037,false]],211]
save$@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:145067:32
tryCatch@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:25666:23
invoke@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:25841:32
tryCatch@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:25666:23
invoke@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:25742:30
http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:25772:19
tryCallTwo@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:27030:9
doResolve@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:27194:25
Promise@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:27053:14
callInvokeWithMethodAndArg@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:25771:29
enqueue@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:25776:157
async@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:25792:69
http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:174620:39
step@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:174457:25
http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:174359:73
tryCallTwo@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:27030:9
doResolve@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:27194:25
Promise@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:27053:14
http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:174336:36
http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:193155:41
step@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:192995:25
http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:192897:73
tryCallTwo@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:27030:9
doResolve@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:27194:25
Promise@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:27053:14
http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:192874:36
componentDidMount$@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:192559:66
tryCatch@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:25666:23
invoke@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:25841:32
tryCatch@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:25666:23
invoke@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:25742:30
http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:25752:21
tryCallOne@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:27021:16
http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:27122:27
_callTimer@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:30576:17
_callImmediatesPass@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:30612:19
callImmediates@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:30831:33
callImmediates@[native code]
__callImmediates@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:2619:35
http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:2396:34
__guard@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:2602:15
flushedQueue@http://localhost:8081/index.bundle?platform=android&amp;dev=true&amp;minify=false:2395:21
flushedQueue@[native code]
callFunctionReturnFlushedQueue@[native code]
&lt;/denchmark-code&gt;

Worth noting that the original SaveModel weights were 200MB, which is way bigger than any example at hand, and since the conversion shards them, the model has 49 shards of 4MB each, besides the model.json.
&lt;denchmark-h:h4&gt;Code to reproduce the bug / link to feature request&lt;/denchmark-h&gt;

import * as tfconv from '@tensorflow/tfjs-converter';
import * as tf from '@tensorflow/tfjs-core';
import {asyncStorageIO} from '@tensorflow/tfjs-react-native';

const model = await tfconv.loadGraphModel('http://xxx.xxx.xxx.xxx:xxxx/model.json')
await this.model.save(asyncStorageIO('mymodel')); // &lt;- This fails.
	</description>
	<comments>
		<comment id='1' author='enpinzolas' date='2020-02-20T14:53:30Z'>
		This might be related to this issue &lt;denchmark-link:https://github.com/facebook/react-native/issues/23835&gt;facebook/react-native#23835&lt;/denchmark-link&gt;
. One potential cause is a (seemingly) unserializable values like  or / in your weights.
Could you check your weights to see if you have any of these values? If you load your model in a browser you can use &lt;denchmark-link:https://js.tensorflow.org/api_vis/1.4.0/#show.layer&gt;https://js.tensorflow.org/api_vis/1.4.0/#show.layer&lt;/denchmark-link&gt;
 to look at counts for these for each layer (you can also just count them directly).
		</comment>
		<comment id='2' author='enpinzolas' date='2020-02-21T12:42:57Z'>
		Thank you for checking in!
Given that my model is a GraphModel, it lacks the layer property, and I am unable to visualize it using tfjs-vis since the method you linked uses layers, and the summary one accepts only LayerModels. However, I manually checked the weights using the model.weights property. Here is the snippet run just after loading it:
var model = await tfconv.loadGraphModel(this.modelPath);
var result = Object.keys(model.model.weights).map(function(key) {
  return  model.model.weights[key][0].dataSync().map(value =&gt; ( value == Infinity || value == -Infinity || value == NaN ));
}); // &lt;-- this takes a long time since the weights are in total 200MB
result.map(a=&gt;(a.length)).reduce((a, b) =&gt; (a+b)) // 50537445
result.map(val =&gt; (val.reduce((a, b) =&gt; (a+b)))).reduce((a, b) =&gt; (a+b)) // 0
My apologies if I made the comparisons wrong, I believe that since all the weights are ints and floats stored in Int32Arrays and Float32Arrays a simple comparison with NaN, Infinity or -Infinity should suffice.
By the way, the loaded model predicts the expected results both in tfjs (browser and RN) and in python, so I'm not sure if the issue is in the model.
		</comment>
		<comment id='3' author='enpinzolas' date='2020-02-21T15:50:38Z'>
		One correction, since NaN === NaN is false, you should use isNaN(value) to test for NaN. (You can also simplify your code a bit &lt;denchmark-link:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&gt;Array.filter&lt;/denchmark-link&gt;

The fact that it is predicting correctly doesn't completely rule out NaNs or Infinities. So just trying to pin down what might cause the serialization issue.
Also what OS/Platform are you running this on?
		</comment>
		<comment id='4' author='enpinzolas' date='2020-02-24T08:32:25Z'>
		Thanks for the correction and suggestion, I checked for NaNs too and there's none.
var result = Object.keys(model.model.weights).filter(function(key) {
  return  model.model.weights[key][0].dataSync().filter(value =&gt; isNaN(value)).length &gt; 0;
});
// Array []
I'm developing it on a linux machine (ubuntu), and running it on an android device, with android 10.
		</comment>
		<comment id='5' author='enpinzolas' date='2020-02-25T18:52:43Z'>
		Though the error produced looks strange for this. It looks like on Android there is a default &lt;denchmark-link:https://github.com/react-native-community/async-storage/blob/c57cbeb25034c4291cc148084ad3933266daf641/android/src/main/java/com/reactnativecommunity/asyncstorage/ReactDatabaseSupplier.java#L46&gt;6MB limit for AsyncStorage&lt;/denchmark-link&gt;
.
This &lt;denchmark-link:https://github.com/react-native-community/async-storage/pull/99&gt;asyncStorage PR suggests&lt;/denchmark-link&gt;
 that it is configurable in a gradle config. &lt;denchmark-link:https://github.com/react-native-community/async-storage/blob/LEGACY/docs/advanced/IncreaseDbSize.md&gt;Configuration is documented here&lt;/denchmark-link&gt;
.
Try that and see if it helps.
		</comment>
		<comment id='6' author='enpinzolas' date='2020-03-12T17:22:24Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
	</comments>
</bug>