<bug id='1032' author='TheNewSound' open_date='2018-12-18T04:43:27Z' closed_time='2019-01-24T20:44:01Z'>
	<summary>Clone() doesn't actually clone?</summary>
	<description>
To get help from the community, check out our &lt;denchmark-link:https://groups.google.com/a/tensorflow.org/forum/#!forum/tfjs&gt;Google group&lt;/denchmark-link&gt;
.
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

Latest (0.14.1)
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

Latest Firefox + Chrome
&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

Clone() doesn't actually clone.
&lt;denchmark-h:h4&gt;Code to reproduce the bug / link to feature request&lt;/denchmark-h&gt;

You can run the following code on the tfjs API console (&lt;denchmark-link:https://js.tensorflow.org/api/0.14.1/#clone&gt;https://js.tensorflow.org/api/0.14.1/#clone&lt;/denchmark-link&gt;
)
const x = tf.tensor([3, 2, 1]);

x.clone().data().then(response =&gt; {
     const sorted = response.sort();
     console.log(sorted); // gets called second
     console.log(x.dataSync()); // gets called last
});
console.log(x.dataSync()); // gets called first
Or seen synchronous:
const x = tf.tensor([3, 2, 1]);
console.log(x.dataSync()); //gets called first
const data = tf.clone(x).dataSync();
const sorted = data.sort();
console.log(sorted); // gets called second
console.log(x.dataSync()); // gets called last
Output:
&lt;denchmark-code&gt;3,2,1
1,2,3
1,2,3
&lt;/denchmark-code&gt;

Expected output:
&lt;denchmark-code&gt;3,2,1
1,2,3
3,2,1
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='TheNewSound' date='2018-12-18T18:37:14Z'>
		I think the problem is this: Tensors are supposed to be immutable, so clone() returns a reference to the existing data without actually copying it-- which should be safe.  However, when using the CPU backend, readSync() just returns the underlying array, which actually is mutable.  In the original example above, data.sort() is sorting the Float32Array in place.
This demonstrates the mutability more directly:
&lt;denchmark-code&gt;const x = tf.tensor([3, 2, 1]);
const data = x.dataSync();
console.log(x.dataSync());
console.log(data instanceof Float32Array);
data[1] = 54;
console.log(x.dataSync());
&lt;/denchmark-code&gt;

Output:
&lt;denchmark-code&gt;3,2,1
true
3,54,1
&lt;/denchmark-code&gt;

So, to produce the expected behavior, I think the CPU  method needs to return a  of the data at &lt;denchmark-link:https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/backend_cpu.ts#L169&gt;backend_cpu.ts:169&lt;/denchmark-link&gt;
.  (The GPU version returns a copy anyway).
&lt;denchmark-link:https://github.com/dsmilkov&gt;@dsmilkov&lt;/denchmark-link&gt;
, WDYT?
		</comment>
		<comment id='2' author='TheNewSound' date='2019-01-09T03:55:41Z'>
		Clone makes a shallow copy of the tensor for performance reasons.
If we do a true copy upon dataSync(), it will come at a cost of memory read/writes and increased garbage collection. We'll have to do it for the WebGL backend as well, for tensors that haven't been uploaded to GPU yet, or have recently been downloaded.
I think we should start with documenting clone() better (emphasize that it does shallow copy) and revisit this if it becomes a more frequent issue.
		</comment>
		<comment id='3' author='TheNewSound' date='2019-01-09T21:10:48Z'>
		So in what other way can one achieve to sort the array / tensor without modifying the original tensor?
Use a variable tensor and clone() it? As variable tensors are regarded as mutable, the expected output of clone() on a variable tensor should be a deep clone?
		</comment>
		<comment id='4' author='TheNewSound' date='2019-01-09T22:58:52Z'>
		Slice the TypedArray using &lt;denchmark-link:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice&gt;TypedArray.slice()&lt;/denchmark-link&gt;
.
In this case:
const myData = x.dataSync().slice();
myData.sort()
		</comment>
	</comments>
</bug>