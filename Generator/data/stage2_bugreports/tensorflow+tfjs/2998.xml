<bug id='2998' author='akineeic' open_date='2020-03-31T04:39:59Z' closed_time='2020-05-27T18:30:49Z'>
	<summary>[WASM] The value of tensor created from TypedArray is incorrect</summary>
	<description>
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;



@tensorflow/tfjs-core@"1.5.2"


@tensorflow/tfjs-backend-wasm@1.5.1-alpha5


&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;


80.0.3987.132 (Official Build) (64-bit)

&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

The issue is shown as the following picture. The data of bias is from a &lt;denchmark-link:https://storage.googleapis.com/download.tensorflow.org/models/tflite/model_zoo/upload_20180427/squeezenet_2018_04_27.tgz&gt;squeezeNet&lt;/denchmark-link&gt;
 tflite model and its value has changed after an add operation. I'm still trying to find a more simple way to reproduce this issue.
&lt;denchmark-link:https://user-images.githubusercontent.com/44738552/77986731-6fe0d080-734a-11ea-8ee8-10d2871eedb7.png&gt;&lt;/denchmark-link&gt;

Do you have any idea of the potential cause, may it cause by the type or the precision of the variable?
Looking forward to you reply.
	</description>
	<comments>
		<comment id='1' author='akineeic' date='2020-04-03T17:27:40Z'>
		&lt;denchmark-h:h4&gt;Code to reproduce the bug&lt;/denchmark-h&gt;

Found a common way to reproduce this issue just now. I reuse the code of the sample of &lt;denchmark-link:https://github.com/tensorflow/tfjs/tree/master/tfjs-backend-wasm/starter/webpack&gt;webpack&lt;/denchmark-link&gt;
, just need to rewrite the function &lt;denchmark-link:https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/starter/webpack/src/index.js#L21-L25&gt;run()&lt;/denchmark-link&gt;
 as follows:
async function run() {
  // Create a tensor from arrayBuffer
 
  var data = [-1132269917, 1028860590, 991861027, 1038002411, -1070382690, 1012508611, 1038155669, 1020400317, 1021993200, 1003353622, -1071122272, 1026564351, 1032339440, 1032425711, 1034563524, 1024892554, 1027299904, 1033349386, 1041155330, 1034166925, 1041501890, -1093047882, -1099473869, -1096050077, -1098527033, -1091974403, -1096862997, 1036731708, 1049547796, 1019814215, 1031452522, 1029429360, -1094537812, 1042169757, 1017258414, 1007595120, -1143345557, 1050487005, -1097259576, -1108488449, -1073552025, -1130910040, 1047248971, 1001644069, 1025110182, 1042517571, 1002539717, 1041357420, 1023918362, -1091949005, 1038927025, -1105753473, -1086086134, -1090195871, 1032900068, 1038858460, 1036881066, -1125031069, 1035177010, 1028151202, 1041087741, 1027650220, 1036019015, -1115176233, 1038089265, -1090045943, 1027957262, 1017695537, 1048773706, -1130922018, 1021999085, 1041367801, 1049640461, -1077502711, -1073198811, 1041359913, 1041133318, 1033359553, 1039185066, -1114848176, 1027660658, -1106981919, 1028790231, 1021494398, 1052030906, 1035564792, 1034262398, -1123659351, 1030045095, 1033315188, 1014507782, -1087299909, 1015958672, -1092315154, -1090311538, 1019947795]
 
  var buffer = new ArrayBuffer(5006664);
  var int32 = new Int32Array(buffer, 4987712, 96);
  for (let i=0; i&lt;96; ++i){
    int32[i] = data[i];
  }
  var b = new Float32Array(buffer, 4987712, 96);
  var bias = tf.tensor(b, [96], 'float32');
  bias.print();
 
  setWasmPath(wasmPath);
  await tf.setBackend('wasm');
 
  var a = new Float32Array(96);
  var input = tf.tensor(a, [96]);
  var output = input.add(bias);
  bias.print();
}
All of the params I used above are from the squeezeNet tflite model. In this example, bias is a tensor create from a Float32Array which is part of a arrayBuffer and the value of bias will change after the add op. And I find that it will use the value of the arrayBuffer without the specified parameter 'byteOffset'. You can test by assign value to the first few bytes of the arrayBuffer.
It seems caused by the use of function tf.setBackend('wasm'), bacause the tensor's value will be incorrect from the beginning if you setBackend before create the tensor. And this issue won't appear if use backend 'webgl'.
		</comment>
		<comment id='2' author='akineeic' date='2020-05-10T19:17:17Z'>
		I'm also experiencing this bug, it makes it difficult to conditionally switch backends as this code works with the webgl backend and not the wasm backend.
		</comment>
		<comment id='3' author='akineeic' date='2020-05-12T03:58:42Z'>
		
I'm also experiencing this bug, it makes it difficult to conditionally switch backends as this code works with the webgl backend and not the wasm backend.

So that seems to be a commont bug when switch the backend from webgl to wasm. I used to investigate that and suspect this issue may caused by &lt;denchmark-link:https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/src/backend_wasm.ts#L87&gt;code here&lt;/denchmark-link&gt;
 since the default byteOffset is 0. But I also found that the typedArray has been processed, so I'm not sure this is the root cause. &lt;denchmark-link:https://github.com/annxingyuan&gt;@annxingyuan&lt;/denchmark-link&gt;
  Do you have time to take a look at this issue, thanks a lot!
		</comment>
		<comment id='4' author='akineeic' date='2020-05-27T18:00:22Z'>
		A simpler way to recreate the issue is:
&lt;denchmark-code&gt;await tf.setBackend('wasm');

const data = [-0.1, 0.2, 0.3];
const buffer = new ArrayBuffer(32);
const view = new Float32Array(buffer, 8, data.length);
for (let i=0; i &lt; data.length; ++i) {
  view[i] = data[i];
}

const t = tf.tensor(view);
t.print();
&lt;/denchmark-code&gt;

This results in:
Tensor [0, 0, -0.1]
From what I see from the link you posted, seems the fix should be as simple as using the TypedArray byteOffset property and not 0.
		</comment>
	</comments>
</bug>