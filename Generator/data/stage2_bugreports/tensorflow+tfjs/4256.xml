<bug id='4256' author='purushothgj' open_date='2020-11-18T14:40:19Z' closed_time='2020-11-18T16:23:29Z'>
	<summary>Error: Argument 'x' passed to 'expandDims' must be a Tensor or TensorLike, but got 'Promise'</summary>
	<description>
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 Desktop
TensorFlow.js installed from (npm or script link): 2.3.0
TensorFlow.js version (use command below): 2.3.0
Browser version: Version 86.0.4240.198 (Official Build) (64-bit)
Tensorflow.js Converter Version: 2.3.0

I am new to Tensor flow and coding as well. I have retrained EfficientDet-D0 model with a custom dataset in colab and now trying to use the saved model after conversion with tfjs-convertor in Angular app
The conversion script used was:
&lt;denchmark-code&gt;!tensorflowjs_converter --input_format=tf_saved_model --output_node_names='MobilenetV1/Predictions/Reshape_1' --saved_model_tags=serve "./12112020_savedmodel/fine_tuned_model/saved_model" "./12112020_savedmodel/web_model"
&lt;/denchmark-code&gt;

After successful conversion and importing the model.json and shard files into into my angular app folder, i'm trying to run inference on a single custom input image(.jpg) after image is converted into a 4D tensor but shows error mentioned in the title.
My code is as follows:
&lt;denchmark-code&gt;import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';
import * as tf from '@tensorflow/tfjs';
import {loadGraphModel} from '@tensorflow/tfjs-converter';

export interface DetectedObject {
  bbox: [number, number, number, number];
  class: string;
  score: number;
}

@Component({
  selector: 'app-home',
  templateUrl: 'home.page.html',
  styleUrls: ['home.page.scss'],
})
export class HomePage implements AfterViewInit{
  @ViewChild('video') video: ElementRef;
  @ViewChild('canvas') canvas: ElementRef;
  @ViewChild('image') image: ElementRef;

  private model;

  constructor() {}

  ngAfterViewInit() {
    this.predictWithModel(); 
  }
async predictWithModel() {
    // Load Model 
    tf.setBackend('webgl');
    const modelURL = '../assets/web/model.json';
    this.model = await loadGraphModel(modelURL);
    console.log('model loaded');

    // Prediction
    const imagetensor = this.getTensorFromImage(this.image.nativeElement);
    const result = await this.model.executeAsync(imagetensor);
    console.log(result);
  }
     // Converting input image into 4D tensor
  getTensorFromImage(imageSrc): tf.Tensor {
    const tfimage = tf.browser.fromPixels(imageSrc);
    const tfcast = tf.cast(tfimage, 'int32');
    const expanded = tf.expandDims(tfcast, 0);
    console.log('Image:', expanded.size, 'bytes with shape:', expanded.shape);
    tf.dispose(tfimage);
    return expanded;
    }
}
&lt;/denchmark-code&gt;

And we get the following in console:
&lt;denchmark-code&gt;model loaded
home-home-module.js:99286 Image: 750000 bytes with shape: Array(4)0: 1 1: 500 2: 500 3: 3 length: 4 __proto__: Array(0)
vendor.js:39108 ERROR Error: Uncaught (in promise): Error: Argument 'x' passed to 'expandDims' must be a Tensor or TensorLike, but got 'Promise'
Error: Argument 'x' passed to 'expandDims' must be a Tensor or TensorLike, but got 'Promise'
    at convertToTensor (home-home-module.js:71910)
    at expandDims_ (home-home-module.js:48521)
    at Module.expandDims (home-home-module.js:54832)
    at Module.executeOp (home-home-module.js:23938)
    at home-home-module.js:27202
    at home-home-module.js:30652
    at Engine.scopedRun (home-home-module.js:30662)
    at Engine.tidy (home-home-module.js:30651)
    at Module.tidy (home-home-module.js:31822)
    at home-home-module.js:27202
    at resolvePromise (polyfills.js:3904)
    at polyfills.js:3811
    at rejected (vendor.js:112961)
    at ZoneDelegate.invoke (polyfills.js:3470)
    at Object.onInvoke (vendor.js:62348)
    at ZoneDelegate.invoke (polyfills.js:3469)
    at Zone.run (polyfills.js:3229)
    at polyfills.js:3963
    at ZoneDelegate.invokeTask (polyfills.js:3505)
    at Object.onInvokeTask (vendor.js:62336)
defaultErrorLogger @ vendor.js:39108
&lt;/denchmark-code&gt;

When i try to use 'predict' instead of 'executeAsync' as follows
&lt;denchmark-code&gt;const result = await this.model.predict(imagetensor);
&lt;/denchmark-code&gt;

the following error occurs after model is loaded and tensor is generated :
&lt;denchmark-code&gt;model loaded
home.page.ts:78 Image: 750000 bytes with shape: (4) [1, 500, 500, 3]
core.js:4197 ERROR Error: Uncaught (in promise): Error: This execution contains the node 'StatefulPartitionedCall/Preprocessor/ResizeToRange/cond/output/_707', which has the dynamic op 'Merge'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [StatefulPartitionedCall/Preprocessor/ResizeToRange/Shape_2]
Error: This execution contains the node 'StatefulPartitionedCall/Preprocessor/ResizeToRange/cond/output/_707', which has the dynamic op 'Merge'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [StatefulPartitionedCall/Preprocessor/ResizeToRange/Shape_2]
    at GraphExecutor.compile (graph_executor.js:121)
    at GraphExecutor.execute (graph_executor.js:156)
    at GraphModel.execute (graph_model.js:264)
    at HomePage.&lt;anonymous&gt; (home.page.ts:65)
    at Generator.next (&lt;anonymous&gt;)
    at fulfilled (tslib.es6.js:71)
    at ZoneDelegate.invoke (zone-evergreen.js:364)
    at Object.onInvoke (core.js:27437)
    at ZoneDelegate.invoke (zone-evergreen.js:363)
    at Zone.run (zone-evergreen.js:123)
    at resolvePromise (zone-evergreen.js:798)
    at zone-evergreen.js:705
    at fulfilled (tslib.es6.js:71)
    at ZoneDelegate.invoke (zone-evergreen.js:364)
    at Object.onInvoke (core.js:27437)
    at ZoneDelegate.invoke (zone-evergreen.js:363)
    at Zone.run (zone-evergreen.js:123)
    at zone-evergreen.js:857
    at ZoneDelegate.invokeTask (zone-evergreen.js:399)
    at Object.onInvokeTask (core.js:27425)
&lt;/denchmark-code&gt;

Similarly for 'execute' instead of 'executeAsync' the following error occurs
&lt;denchmark-code&gt;model loaded
home.page.ts:78 Image: 750000 bytes with shape: (4) [1, 500, 500, 3]0: 11: 5002: 5003: 3length: 4__proto__: Array(0)
core.js:4197 ERROR Error: Uncaught (in promise): Error: This execution contains the node 'StatefulPartitionedCall/Preprocessor/ResizeToRange/cond/output/_707', which has the dynamic op 'Merge'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [StatefulPartitionedCall/Preprocessor/ResizeToRange/Shape_2]
Error: This execution contains the node 'StatefulPartitionedCall/Preprocessor/ResizeToRange/cond/output/_707', which has the dynamic op 'Merge'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [StatefulPartitionedCall/Preprocessor/ResizeToRange/Shape_2]
    at GraphExecutor.compile (graph_executor.js:121)
    at GraphExecutor.execute (graph_executor.js:156)
    at GraphModel.execute (graph_model.js:264)
    at HomePage.&lt;anonymous&gt; (home.page.ts:65)
    at Generator.next (&lt;anonymous&gt;)
    at fulfilled (tslib.es6.js:71)
    at ZoneDelegate.invoke (zone-evergreen.js:364)
    at Object.onInvoke (core.js:27437)
    at ZoneDelegate.invoke (zone-evergreen.js:363)
    at Zone.run (zone-evergreen.js:123)
    at resolvePromise (zone-evergreen.js:798)
    at zone-evergreen.js:705
    at fulfilled (tslib.es6.js:71)
    at ZoneDelegate.invoke (zone-evergreen.js:364)
    at Object.onInvoke (core.js:27437)
    at ZoneDelegate.invoke (zone-evergreen.js:363)
    at Zone.run (zone-evergreen.js:123)
    at zone-evergreen.js:857
    at ZoneDelegate.invokeTask (zone-evergreen.js:399)
    at Object.onInvokeTask (core.js:27425)

&lt;/denchmark-code&gt;

I'm not sure if the problem is with Conversion method/code of saved model or with Image to Tensor conversion or incompatibility of the EfficientDet Model with TFJS based implementation.
Please help.
Thanks.
	</description>
	<comments>
		<comment id='1' author='purushothgj' date='2020-11-18T16:23:29Z'>
		I found the problem. The tensorflowjs converter (python) was of version 2.7.0 and i was using tfjs 2.3.0 in angular and the problem resolved on updating it to 2.7.0.
Thanks.
		</comment>
		<comment id='2' author='purushothgj' date='2020-11-18T16:23:30Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tfjs/issues/4256&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tfjs/issues/4256&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>