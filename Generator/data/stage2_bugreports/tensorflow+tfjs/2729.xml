<bug id='2729' author='robsco-git' open_date='2020-02-04T19:19:10Z' closed_time='2020-02-12T15:27:36Z'>
	<summary>[tfjs-react-native] and managed Expo workflows</summary>
	<description>
With, ,  is using  for the &lt;denchmark-link:https://github.com/tensorflow/tfjs/blob/90f52ddb341d5079925af81000edfe845e40774a/tfjs-react-native/src/bundle_resource_io.ts#L21&gt;bundleResourceIO&lt;/denchmark-link&gt;
 function. To the best of my knowledge, managed  workflows do not work with , instead, the recommended path is to use &lt;denchmark-link:https://docs.expo.io/versions/latest/sdk/filesystem/&gt;expo-file-system&lt;/denchmark-link&gt;
. Attempting to run a managed Expo app results in this error at runtime: .
To work around this, I &lt;denchmark-link:https://github.com/robsco-git/tfjs/tree/expo-react-native&gt;forked the repo&lt;/denchmark-link&gt;
,  and changed the bundle loading code into a stub. I &lt;denchmark-link:https://www.npmjs.com/package/tfjs-react-native-expo-fix&gt;published this code to NPM&lt;/denchmark-link&gt;
, installed it and ran it successfully in the context of a managed Expo workflow. I managed to get the &lt;denchmark-link:https://github.com/tensorflow/tfjs/blob/master/tfjs-react-native/integration_rn59/components/webcam/realtime_demo.tsx&gt;example realtime demo&lt;/denchmark-link&gt;
 working.
Based on the &lt;denchmark-link:https://github.com/tensorflow/tfjs/blob/master/tfjs-react-native/README.md&gt;README&lt;/denchmark-link&gt;
, it appears that managed Expo workflows are within the set of project types supported by , hence this issue.
	</description>
	<comments>
		<comment id='1' author='robsco-git' date='2020-02-04T23:00:04Z'>
		Yep will be looking into an alternative that will work with the managed workflow. Thanks for reporting.
		</comment>
		<comment id='2' author='robsco-git' date='2020-02-10T13:36:15Z'>
		&lt;denchmark-link:https://github.com/robsco-git&gt;@robsco-git&lt;/denchmark-link&gt;
 I am having exactly the same issue so I am excited to see you have published a work around. However I am struggling to get tfjs-react-native-expo-fix to work with my project since I am getting many errors. Could you give some advice on how to use this fix please? Does it need to be imported? Do you still need to install the non-fixed tensoflow? Many thanks.
		</comment>
		<comment id='3' author='robsco-git' date='2020-02-10T16:52:37Z'>
		&lt;denchmark-link:https://github.com/jgough99&gt;@jgough99&lt;/denchmark-link&gt;
  same. &lt;denchmark-link:https://github.com/robsco-git&gt;@robsco-git&lt;/denchmark-link&gt;
 what's the workflow to run with your fix rn?
		</comment>
		<comment id='4' author='robsco-git' date='2020-02-11T22:11:21Z'>
		This was autoclosed by a PR, but the release including it should come out shortly.
		</comment>
		<comment id='5' author='robsco-git' date='2020-02-11T22:44:58Z'>
		&lt;denchmark-link:https://github.com/tafsiri&gt;@tafsiri&lt;/denchmark-link&gt;
 thank you! I was a little mixed up after re-testing when I saw this closed. Looking forward to it!
		</comment>
		<comment id='6' author='robsco-git' date='2020-02-11T23:04:23Z'>
		0.2.2 is out on NPM &lt;denchmark-link:https://www.npmjs.com/package/@tensorflow/tfjs-react-native&gt;https://www.npmjs.com/package/@tensorflow/tfjs-react-native&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/robsco-git&gt;@robsco-git&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/jgough99&gt;@jgough99&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/MichaelMcNeil&gt;@MichaelMcNeil&lt;/denchmark-link&gt;
, give it a whirl and let me know if it doesn't solve the issue.
		</comment>
		<comment id='7' author='robsco-git' date='2020-02-12T08:30:35Z'>
		&lt;denchmark-link:https://github.com/tafsiri&gt;@tafsiri&lt;/denchmark-link&gt;
 I've just had a chance to try it out and it appears to be working well on both Android and iOS in our managed Expo workflow! Thanks a million.
One thing I did have to do was to add a null check for imageTensor as (at least in our component) imageTensor appears to be requested after the component has unmounted (when navigating away) with results in an [Unhandled promise rejection: TypeError: undefined is not an object (evaluating 'input.height')]. Here is what the code looks like for reference:
const handleCameraStream = async images =&gt; {
  const loop = async () =&gt; {
    const imageTensor = images.next().value;
    if (imageTensor) {
      const pose = await posenetModel.estimateSinglePose(imageTensor, {
        flipHorizontal,
      });
      setPose(pose);
      tf.dispose([imageTensor]);
    }
    requestAnimationFrame(loop);
  };
  loop();
};
I moved the platform check for flipHorizonal out of the inner loop and we are using a function component.
		</comment>
		<comment id='8' author='robsco-git' date='2020-02-12T15:27:33Z'>
		Yes, once the component is unmounted the generator will be exhausted and this is expected behaviour. Another way to not have the null check is to cancel the requestAnimationFrame of this parent component. This is how i handled it in the updated demo &lt;denchmark-link:https://github.com/tensorflow/tfjs/blob/master/tfjs-react-native/integration_rn59/components/webcam/realtime_demo.tsx#L126&gt;https://github.com/tensorflow/tfjs/blob/master/tfjs-react-native/integration_rn59/components/webcam/realtime_demo.tsx#L126&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>