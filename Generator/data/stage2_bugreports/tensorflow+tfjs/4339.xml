<bug id='4339' author='zholmes1' open_date='2020-12-02T20:19:12Z' closed_time='2020-12-02T22:19:06Z'>
	<summary>Incorrect predictions for a known precise model (React Native)</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow.js): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): React Native 0.63.3
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: Galaxy S20+
TensorFlow.js installed from (npm or script link): npm
TensorFlow.js version (use command below):
Tensorflow.js Converter Version: 2.7.0

"@tensorflow/tfjs": "^2.7.0",
"@tensorflow/tfjs-react-native": "^0.5.0",
Describe the current behavior
Graph model is predicting incorrectly, but consistently. If I take a picture of a black background, it outputs index 120 with ~.5 confidence. If I take a picture of anything not black, it outputs index 1034 with confidence of 1, and all other indexes are 0.
Describe the expected behavior
Correct predictions. I know this is possible because I uploaded images in the google cloud vision console and this same model was predicting accurately.
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/CodePen/any notebook.
Load model from assets on launch. I did change my metro config to allow loading of .bin assets.
&lt;denchmark-code&gt;useEffect(() =&gt; {
  tfReady()
    .then(async () =&gt; {
      return loadGraphModel(
        bundleResourceIO(
          require('../../../../assets/model.json'),
          require('../../../../assets/model_weights.bin')
        )
      )
    })
    .then(setModel)
    .catch(e =&gt; console.error(e))
}, [])
&lt;/denchmark-code&gt;

After base64 comes in from camera
&lt;denchmark-code&gt;const raw = Uint8Array.from(toByteArray(base64)) // from 'base64-js' npm package
const imageTensor = decodeJpeg(raw)
  .expandDims(0)
  .resizeBilinear([224, 224], false)
const output = model.predict(imageTensor)

// @ts-ignore
const data: number[] = output.dataSync()
console.log(data.length)
&lt;/denchmark-code&gt;

data.length is the correct number of classes. But it always contains incorrect data as I stated in the section above.
I know this model works because after I trained it on Google Cloud AutoML, I was able to upload images (that the model had never seen) of all different classes and it was predicting correctly with high confidence.
	</description>
	<comments>
		<comment id='1' author='zholmes1' date='2020-12-02T22:19:07Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tfjs/issues/4339&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tfjs/issues/4339&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='zholmes1' date='2020-12-02T22:20:12Z'>
		It must have been something to do with the way I was processing my image. I switched to using the ImageClassificationModel from @tensorflow/tfjs-automl and it started classifying the images properly.
		</comment>
	</comments>
</bug>