<bug id='3140' author='capdilla' open_date='2020-04-22T22:11:20Z' closed_time='2020-06-05T20:33:35Z'>
	<summary>tfnode.node.encodeJpeg is returning a black image</summary>
	<description>
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

"^1.7.2"
&lt;denchmark-h:h4&gt;node-js version&lt;/denchmark-h&gt;

12.16.2
&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

i try to convert a Tensor to a image JPEG usingtfjs-node.node.encodeJpeg but when i save the imagen its save as a black image, but if i try the same code but in the browser using browser.toPixels the image is fine
&lt;denchmark-link:https://github.com/reiinakano/arbitrary-image-stylization-tfjs&gt;code reference &lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/reiinakano/arbitrary-image-stylization-tfjs/blob/master/images/chicago.jpg&gt;chicago image&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/reiinakano/arbitrary-image-stylization-tfjs/blob/master/images/seaport.jpg&gt;seaport image&lt;/denchmark-link&gt;

&lt;denchmark-h:h4&gt;Code to reproduce the bug / link to feature request&lt;/denchmark-h&gt;

const tf = require("@tensorflow/tfjs");
const tfnode = require("@tensorflow/tfjs-node");

const fs = require("fs");
let img1 = fs.readFileSync("chicago.jpg");
let img2 = fs.readFileSync("seaport.jpg");

const loadModel = async (path) =&gt; {
  return await tf.loadGraphModel(path);
};

const loadMobileNetStyleModel = async () =&gt; {
  const path = `https://reiinakano.com/arbitrary-image-stylization-tfjs/saved_model_style_js/model.json`;

  return await loadModel(path);
};

const loadTranformModel = async () =&gt; {
  const path = `https://reiinakano.com/arbitrary-image-stylization-tfjs/saved_model_transformer_separable_js/model.json`;

  return await loadModel(path);
};

const start = async (image1, image2) =&gt; {
  const net = await loadMobileNetStyleModel();
  const transformNet = await loadTranformModel();

  const imageToPixel = (img) =&gt;
    tfnode.node.decodeJpeg(img).toFloat().div(tf.scalar(255)).expandDims();

  const pixelImage1 = await imageToPixel(image1);
  const pixelImage2 = await imageToPixel(image2);

  let bottleneck = net.predict(pixelImage2);

  const stylized = await transformNet
    .predict([pixelImage1, bottleneck])
    .squeeze();

  //in the browser works
  //   tf.browser.toPixels(stylized, document.getElementById("canvas"));

  //in nodejs
  const newImg = await tfnode.node.encodeJpeg(stylized);

  fs.writeFileSync("out.jpg", newImg);

  return stylized;
};

start(img1, img2);
	</description>
	<comments>
		<comment id='1' author='capdilla' date='2020-05-12T16:29:29Z'>
		I have no problem generating an output jpeg.
Here my code:
It assumes your input matrix is a float32 matrix with values between 0 and 1. If you have float values higher than 1 or below 0, they will be black.
function tensor2DToImage(matrix, filename)
{
    const file = './output/'+filename;
    tf.node.encodeJpeg(matrix.mul(255).cast('int32').expandDims(2), 'grayscale', 100).then((data) =&gt; {
        /*fs.access(file, fs.constants.W_OK, function(err){
            if(!err){*/
                fs.writeFile(file, Buffer.from(data), function (err) { });
            /*}
        });*/
    });
}
		</comment>
		<comment id='2' author='capdilla' date='2020-06-05T20:33:35Z'>
		Closing this due to lack of activity, feel to reopen. Thank you
		</comment>
	</comments>
</bug>