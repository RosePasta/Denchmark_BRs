<bug id='2029' author='mrqo' open_date='2019-09-12T07:51:34Z' closed_time='2019-09-17T17:47:36Z'>
	<summary>"response.arrayBuffer is not a function" while loadLayersModel (Node.js)</summary>
	<description>
&lt;denchmark-h:h2&gt;TensorFlow.js version&lt;/denchmark-h&gt;

1.2.9
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

any
&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

I have exported a Keras model written in Python, then converted it with tensorflowjs_converter and uploaded it to server. Then, I get error while loading it. I have tried it with @tensorflow/tfjs-node' as well as @tensorflow/tfjs'.
TypeError: response.arrayBuffer is not a function at f:\Developer\x\node_modules\@tensorflow\tfjs-core\dist\io\weights_loader.js:97:90 at Array.map (&lt;anonymous&gt;) at Object.&lt;anonymous&gt; (f:\Developer\x\node_modules\@tensorflow\tfjs-core\dist\io\weights_loader.js:97:48) at step (f:\Developer\x\node_modules\@tensorflow\tfjs-core\dist\io\weights_loader.js:48:23) at Object.next (f:\Developer\x\node_modules\@tensorflow\tfjs-core\dist\io\weights_loader.js:29:53) at fulfilled (f:\Developer\x\node_modules\@tensorflow\tfjs-core\dist\io\weights_loader.js:20:58) at process._tickCallback (internal/process/next_tick.js:68:7)
&lt;denchmark-h:h4&gt;Code to reproduce the bug / link to feature request&lt;/denchmark-h&gt;

File is publicly available, bin file also resides there.
const tf = require('@tensorflow/tfjs-node');
model = await tf.loadLayersModel('https://storage.googleapis.com/valid-ship-252510.appspot.com/1568271407928-tfjs_model_1/model.json');
	</description>
	<comments>
		<comment id='1' author='mrqo' date='2019-09-12T17:15:09Z'>
		@kqtus getting a CORS exception while loading , can you please check.
		</comment>
		<comment id='2' author='mrqo' date='2019-09-12T17:47:31Z'>
		&lt;denchmark-link:https://github.com/rthadur&gt;@rthadur&lt;/denchmark-link&gt;
 hmm, strange. I tried loadLayersModel and through Postman on both model.json and bin on another PC, and files seem to download without CORS exceptions.
-- Edit 1.
IDK if that'll help, but I logged the response I get - no arrayBuffer() indeed.
&lt;denchmark-link:https://user-images.githubusercontent.com/17623375/64808300-42dbf480-d597-11e9-8296-610e356976d7.png&gt;&lt;/denchmark-link&gt;

-- Edit 2.
I bypassed this problem by downloading all files manually and providing file:// url.
		</comment>
		<comment id='3' author='mrqo' date='2019-09-17T10:24:07Z'>
		Any estimations on when it will be fixed?
From what I understand, Node.js doesn't support arrayBuffer(). You'd need to change this:
weights_loader.ts, line 60:
const bufferPromises = responses.map(response =&gt; response.arrayBuffer());
to this:
const bufferPromises = responses.map(response =&gt; response.buffer());
		</comment>
		<comment id='4' author='mrqo' date='2019-09-17T17:21:42Z'>
		&lt;denchmark-link:https://github.com/kangyizhang&gt;@kangyizhang&lt;/denchmark-link&gt;
 any thoughts on above comments from @kqtus ?
		</comment>
		<comment id='5' author='mrqo' date='2019-09-17T17:37:40Z'>
		Ok I think I solved it the proper way, having replaced global fetch.
const nodeFetch = require('node-fetch');
global.fetch = nodeFetch;
It is strange though, because previously I tried passing it as a fetchFunc, but it didn't trigger.
		</comment>
		<comment id='6' author='mrqo' date='2019-09-17T17:47:36Z'>
		thanks for the update , closing this issue.
		</comment>
		<comment id='7' author='mrqo' date='2019-09-17T17:50:35Z'>
		tf.loadLayersModel() should automatically use node-fetch when it's in Node environment. &lt;denchmark-link:https://github.com/dsmilkov&gt;@dsmilkov&lt;/denchmark-link&gt;
 any thoughts why  is not available?
		</comment>
		<comment id='8' author='mrqo' date='2019-09-18T20:09:50Z'>
		@kqtus We'd like to understand why you had to manually do node-fetch. In Node.js, we do override the global fetch internally so the user doesn't have to. I'm unable to reproduce the bug.
Can you provide a bit more info:

What version of node you are using?
We don't seem to have access to the model.json on GCS (Access denied). If you can share the model files publicly, that would be great.
Can you share the error you are getting by simply calling tf.loadLayersModel(url), without specifying any options like fetchFunc?

Thank you!
		</comment>
		<comment id='9' author='mrqo' date='2019-09-18T20:19:03Z'>
		Another idea. Can you double-check the node-fetch version you had installed before? It is possible that you had manually installed node-fetch 1.x which lacks body.arraybuffer(), while tfjs depends on node-fetch 2.x.
		</comment>
		<comment id='10' author='mrqo' date='2019-09-21T10:15:55Z'>
		&lt;denchmark-link:https://github.com/dsmilkov&gt;@dsmilkov&lt;/denchmark-link&gt;


npm version: 6.9.0
I deleted the previous model. I have another one, though:
https://storage.googleapis.com/valid-ship-252510.appspot.com/1568368482017-keras_dogs_cats_model/model.json
Here's the error log https://pastebin.com/z64J4KEj
I didn't have node-fetch installed prior to fixing the problem by manual assignment. Having it installed, without overriding global fetch function still doesn't solve the case.

		</comment>
		<comment id='11' author='mrqo' date='2019-09-21T23:09:14Z'>
		@kqtus can you provide your node version and which operating system you are using?
		</comment>
		<comment id='12' author='mrqo' date='2019-09-22T13:39:05Z'>
		&lt;denchmark-link:https://github.com/kangyizhang&gt;@kangyizhang&lt;/denchmark-link&gt;
 Node v10.16.3, Windows 10 1903. Here's also package.json: &lt;denchmark-link:https://pastebin.com/swpTke2q&gt;https://pastebin.com/swpTke2q&lt;/denchmark-link&gt;
.
One additional thing came to my mind - we are having frontend app and backend in the same project (Express + React). Frontend is being transpiled and backend is run as-is - maybe that causes ambiguity.
		</comment>
	</comments>
</bug>