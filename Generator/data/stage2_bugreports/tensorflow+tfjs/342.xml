<bug id='342' author='caisq' open_date='2018-05-25T14:34:12Z' closed_time='2018-05-29T14:37:37Z'>
	<summary>Loading of tf.Models containing Bidirectoinal RNN layers fails</summary>
	<description>
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

0.11.2
Code for reproduction (in unit test format):
it('Call predict() and fit() after load: Bidirectional LSTM', done =&gt; {
    const model = tfl.sequential();
    const lstmUnits = 3;
    const sequenceLength = 4;
    const inputDims = 5;
    model.add(tfl.layers.bidirectional({
      layer: tfl.layers.lstm({units: lstmUnits}) as tfl.RNN,
      mergeMode: 'concat',
      inputShape: [sequenceLength, inputDims]
    }));

    const x = randomNormal([2, 4, 5]);
    const y = model.predict(x) as Tensor;
    y.print();

    const path = `testModel${new Date().getTime()}_${Math.random()}`;
    const url = `indexeddb://${path}`;
    model.save(url)
        .then(saveResult =&gt; {
          tfl.loadModel(url)
              .then(modelPrime =&gt; {
                // Fails here.
                const yPrime = modelPrime.predict(x) as Tensor;
              })
              .catch(err =&gt; done.fail(err.stack));
        })
        .catch(err =&gt; done.fail(err.stack));
  });
The root cause seems to be in the constructor of Bidirectional, where a shallow copy of the the input RNN layer is not carried out.
	</description>
	<comments>
	</comments>
</bug>