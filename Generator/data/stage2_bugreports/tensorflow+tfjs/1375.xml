<bug id='1375' author='wangtz' open_date='2019-03-13T18:44:33Z' closed_time='2020-06-05T18:35:36Z'>
	<summary>Model accessibility issues in China</summary>
	<description>
Currently for pre-tained models, the weights and model graph is not shipped with NPM and needs to fetched at runtime from GCS. However GCS is not available in China or very slow which hurts user experiences.
Do we have a plan to make pre-trained models available in China?
I would suggest to embed pre-trained weights in a fat NPM (probably new NPMs to avoid breaking existing use cases). But we could definitely find a place to host these content in China as well.
	</description>
	<comments>
		<comment id='1' author='wangtz' date='2019-03-13T18:46:17Z'>
		&lt;denchmark-link:https://github.com/pyu10055&gt;@pyu10055&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/nsthorat&gt;@nsthorat&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/dsmilkov&gt;@dsmilkov&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/caisq&gt;@caisq&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/kangyizhang&gt;@kangyizhang&lt;/denchmark-link&gt;
 Any thoughts?
		</comment>
		<comment id='2' author='wangtz' date='2019-03-13T18:46:47Z'>
		&lt;denchmark-link:https://github.com/huan&gt;@huan&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='wangtz' date='2019-03-14T01:17:01Z'>
		Yes, that's a problem and the developers will be very sad if it could not be solved.
For example, when we want to use the Google Chrome Puppeteer in China, what we expect the developer to do is a npm install puppeteer but it will fail eventually because after installing all the JS files from NPM server then it needs run a post-install script and wants to download the binary from the GCS storage server, which is not accessible in China because of the GFW.
There is a workaround for the puppeteer at &lt;denchmark-link:https://github.com/Chatie/wechaty-puppet-puppeteer#note-for-developers-in-china&gt;here&lt;/denchmark-link&gt;
. I believe we should solve this kind of problem for the developers in China, for spreading the tfjs faster. (at least we should provide a workaround for installing tfjs-models)
		</comment>
		<comment id='4' author='wangtz' date='2019-03-14T02:29:50Z'>
		+1 for solving this for developers in China. Most of our tfjs-models actually download weights from GCS at runtime. So I'm not sure if the puppeteer workaround &lt;denchmark-link:https://github.com/huan&gt;@huan&lt;/denchmark-link&gt;
 pointed out would work here.
		</comment>
		<comment id='5' author='wangtz' date='2019-03-14T03:34:09Z'>
		I think our company can provide the models storage and CDN services in China . may accelerate this.
		</comment>
		<comment id='6' author='wangtz' date='2019-03-14T12:14:56Z'>
		&lt;denchmark-link:https://github.com/chenqing&gt;@chenqing&lt;/denchmark-link&gt;
 That would be great if the  could provide the CDN service for our tfjs models.
Do you know any stakeholders from npm.taobao.com who can make decisions on this issue? If you could introduce a key person for us, then we would be able to solve this issue easier.
		</comment>
		<comment id='7' author='wangtz' date='2019-03-15T04:42:16Z'>
		&lt;denchmark-link:https://github.com/huan&gt;@huan&lt;/denchmark-link&gt;
 I think what's your said is &lt;denchmark-link:https://npm.taobao.org/mirrors&gt;https://npm.taobao.org/mirrors&lt;/denchmark-link&gt;
 .
I have talked with the maintainer. He promised to support it. The next question is what and how to synchronize.
		</comment>
		<comment id='8' author='wangtz' date='2019-03-15T06:12:41Z'>
		That'll be awesome. Thanks Chenqing.
The first one coming out of my mind is probably rsync if that works on GCS?
		</comment>
		<comment id='9' author='wangtz' date='2019-03-15T16:06:35Z'>
		&lt;denchmark-link:https://github.com/chenglu&gt;@chenglu&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='wangtz' date='2019-03-15T16:40:48Z'>
		Thanks &lt;denchmark-link:https://github.com/chenqing&gt;@chenqing&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/huan&gt;@huan&lt;/denchmark-link&gt;
 for the suggestion, as &lt;denchmark-link:https://github.com/caisq&gt;@caisq&lt;/denchmark-link&gt;
 mentioned, our model npms do not have a post install script to download model files from gcs, and people can use jsdelivr directly on their pages, which will download the model files on the fly. Feels like the better way is to mirror GCS bucket, but not sure if that is possible.
		</comment>
		<comment id='11' author='wangtz' date='2019-03-15T17:04:49Z'>
		thanks &lt;denchmark-link:https://github.com/wangtz&gt;@wangtz&lt;/denchmark-link&gt;
,
I was wondering if we could try the feature of "mirror storage"--镜像存储 that alioss or qiniu provided for unblocking the tfjs-models bucket?
e.g.
&lt;denchmark-link:http://tfjs.oss-cn-hongkong.aliyuncs.com/tfjs-models/weights/posenet/mobilenet_v1_075/MobilenetV1_Conv2d_8_pointwise_biases&gt;http://tfjs.oss-cn-hongkong.aliyuncs.com/tfjs-models/weights/posenet/mobilenet_v1_075/MobilenetV1_Conv2d_8_pointwise_biases&lt;/denchmark-link&gt;

		</comment>
		<comment id='12' author='wangtz' date='2019-03-18T14:34:02Z'>
		
Thanks @chenqing and @huan for the suggestion, as @caisq mentioned, our model npms do not have a post install script to download model files from gcs, and people can use jsdelivr directly on their pages, which will download the model files on the fly. Feels like the better way is to mirror GCS bucket, but not sure if that is possible.

I think so .
		</comment>
		<comment id='13' author='wangtz' date='2019-03-19T07:19:25Z'>
		&lt;denchmark-link:https://github.com/wangtz&gt;@wangtz&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/huan&gt;@huan&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/caisq&gt;@caisq&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://cnpmjs.org/mirrors/tfjs-models/&gt;https://cnpmjs.org/mirrors/tfjs-models/&lt;/denchmark-link&gt;
  has sync ok.  and will automatic synchronization when update.
I think may mention this in some parts of the document?
		</comment>
		<comment id='14' author='wangtz' date='2019-03-19T18:45:55Z'>
		&lt;denchmark-link:https://github.com/chenqing&gt;@chenqing&lt;/denchmark-link&gt;
 awesome, good job!
		</comment>
		<comment id='15' author='wangtz' date='2019-04-14T08:51:34Z'>
		I found when installing ttf-node npm will down libtensorflow from googleapis.com too. see &lt;denchmark-link:https://github.com/tensorflow/tfjs-node/blob/master/scripts/install.js#L33&gt;https://github.com/tensorflow/tfjs-node/blob/master/scripts/install.js#L33&lt;/denchmark-link&gt;

Unfortunately, this url can't be visited normally in China.
upload libtensorflow to npm may be a solution.
&lt;denchmark-link:https://github.com/caisq&gt;@caisq&lt;/denchmark-link&gt;

		</comment>
		<comment id='16' author='wangtz' date='2019-09-23T15:35:53Z'>
		I came to ask where we can download those models to load them locally easier, but seeing this issue is very related I'll join here.
As a workaround what I did is opening the network developer tab, and copying the body of all the requests (one JSON, then N "shards"):
&lt;denchmark-link:https://user-images.githubusercontent.com/2801252/65439237-ce8c3580-de61-11e9-83bf-9e17502f4b37.png&gt;&lt;/denchmark-link&gt;

Then put them in your public folder as static file:
&lt;denchmark-link:https://user-images.githubusercontent.com/2801252/65439496-3478bd00-de62-11e9-9c10-812665be8c72.png&gt;&lt;/denchmark-link&gt;

Then you can load them using the option . Does anyone know a better way? Seems like an easy way of downloading these models would help OP as well. I'm looking to improve this for a React Hook I made, &lt;denchmark-link:https://www.npmjs.com/package/use-tensorflow&gt;use-tensorflow&lt;/denchmark-link&gt;
 and currently I'm telling devs &lt;denchmark-link:https://www.npmjs.com/package/use-tensorflow#loading-local-models&gt;this way of loading those manually&lt;/denchmark-link&gt;
 but it is painfully:
import React, { useRef } from "react";
import { useObjects } from "use-tensorflow";
import { Container, Box } from './components';
 
export default () =&gt; {
  const ref = useRef(null);
  const objects = useObjects(ref, { modelUrl: "/objects/model.json" });
  return (
    &lt;Container&gt;
      &lt;img ref={ref} src="/living-room.jpg" /&gt;
      {objects.map(({ left, top, width, height, label, score }) =&gt; (
        ...
      ))}
    &lt;/Container&gt;
  );
};
		</comment>
		<comment id='17' author='wangtz' date='2020-06-05T18:35:36Z'>
		Closing this due to lack of activity, feel to reopen. Thank you
		</comment>
	</comments>
</bug>