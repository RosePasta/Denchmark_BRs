<bug id='2348' author='Ghadjeres' open_date='2019-11-07T16:41:50Z' closed_time='2020-02-13T16:50:31Z'>
	<summary>"Unknown layer: TensorFlowOpLayer" in Python Keras converted model using Python indexing</summary>
	<description>
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

Python: 1.3.1.1
Javascript: 1.3.0
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

Chromium Version 78.0.3904.70 (Official Build) Built on Ubuntu , running on LinuxMint 19.2 (64-bit)
Also tested on Firefox
&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

Failing to load model in tfjs when using a tensorflow keras model converted from Python to tfjs when the python model contains indexing (and more generally basic tensorflow ops).
&lt;denchmark-h:h4&gt;Code to reproduce the bug / link to feature request&lt;/denchmark-h&gt;

from tensorflow.keras import layers
from tensorflow import keras

inputs = keras.Input(shape=[10,])
outputs = layers.Dense(20)(inputs)
outputs = outputs[:, 3]
model = keras.models.Model(inputs=inputs, outputs=outputs)

model.compile(loss='sparse_categorical_crossentropy',
              optimizer=keras.optimizers.RMSprop())

model.summary()
model.save('test_model.h5')
Export done with
&gt; tensorflowjs_converter --input_format keras test_model.h5 jsmodel/
Loading the tfjs model with const model = await tf.loadLayersModel(url); throws the following error:
&lt;denchmark-code&gt;Error: Unknown layer: TensorFlowOpLayer. This may be due to one of the following reasons:
1. The layer is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom layer is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().
    at new t (errors.ts:48)
    at deserializeKerasObject (generic_utils.ts:242)
    at deserialize (serialization.ts:31)
    at l (container.ts:1197)
    at t.fromConfig (container.ts:1225)
    at deserializeKerasObject (generic_utils.ts:277)
    at deserialize (serialization.ts:31)
    at models.ts:295
    at common.ts:14
    at Object.next (common.ts:14)`
&lt;/denchmark-code&gt;

This is due to the tf_op_layer_strided_slice in the model definition:
&lt;denchmark-code&gt;Layer (type)                 Output Shape              Param #   
=================================================================
input_1 (InputLayer)         [(None, 10)]              0         
_________________________________________________________________
dense (Dense)                (None, 20)                220       
_________________________________________________________________
tf_op_layer_strided_slice (T [(None,)]                 0         
=================================================================
Total params: 220
Trainable params: 220
Non-trainable params: 0
&lt;/denchmark-code&gt;

Removing the corresponding line removes the error.
Thanks a lot!
	</description>
	<comments>
		<comment id='1' author='Ghadjeres' date='2019-12-02T18:45:17Z'>
		&lt;denchmark-link:https://github.com/Ghadjeres&gt;@Ghadjeres&lt;/denchmark-link&gt;
 What lines did you remove in what file?
		</comment>
		<comment id='2' author='Ghadjeres' date='2019-12-03T13:10:37Z'>
		Hi &lt;denchmark-link:https://github.com/hadrienj&gt;@hadrienj&lt;/denchmark-link&gt;
 I was referring to the slicing operation  in the Python file.
		</comment>
		<comment id='3' author='Ghadjeres' date='2019-12-04T15:52:44Z'>
		&lt;denchmark-link:https://github.com/Ghadjeres&gt;@Ghadjeres&lt;/denchmark-link&gt;
 I see! Thanks a lot!
		</comment>
		<comment id='4' author='Ghadjeres' date='2020-01-31T18:51:16Z'>
		It looks like outputs = outputs[:, 3] is the problem which adds a TensorFlow strided slice (and thus adds a layer which cannot be serialized automatically). You can either:

Remove the slice, let the output be the full output and slice after.
Register a a custom op with that name and the implementation of that custom layer would be the tensorflow.js version of outputs[:, 3] using tf.slice. See the details of custom layers here: https://www.tensorflow.org/js/guide/models_and_layers#custom_layers

If you don't need the layers model in JavaScript (e.g. you don't need training in the browser or transfer learning) you could convert the model using a graph model during conversion which will be able to serialize that strided slice.
Hope this helps.
		</comment>
		<comment id='5' author='Ghadjeres' date='2020-02-13T16:50:31Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
	</comments>
</bug>