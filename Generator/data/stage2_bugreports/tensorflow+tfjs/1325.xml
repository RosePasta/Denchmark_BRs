<bug id='1325' author='piercus' open_date='2019-03-05T15:46:07Z' closed_time='2019-10-08T21:45:22Z'>
	<summary>values of some pixels changes in `tf.image.cropAndResize`</summary>
	<description>
To get help from the community, we encourage using Stack Overflow and the &lt;denchmark-link:https://stackoverflow.com/questions/tagged/tensorflow.js&gt;tensorflow.js&lt;/denchmark-link&gt;
 tag.
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

Tested in 0.15.3 and 0.14.1
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

node.js v8.10
&lt;denchmark-h:h4&gt;Describe the problem&lt;/denchmark-h&gt;

tf.image.cropAndResize is changing the value of some of the pixels when doing pure cropping
Some pixels stay the same, but some values are changing by a large amount.
&lt;denchmark-h:h5&gt;Example on lenna&lt;/denchmark-h&gt;

Considering a crop of rect =  on &lt;denchmark-link:https://en.wikipedia.org/wiki/Lenna#/media/File:Lenna_(test_image).png&gt;lenna&lt;/denchmark-link&gt;




Actual (Crop made with tensorflowjs)
Expected (Crop made with opencv4nodejs)









The pixel at position [423, 175] has a blue channel which is changing by 30%.
&lt;denchmark-link:https://gist.github.com/piercus/0efbc2a0d0bd09ba15521d8bb9df86d8&gt;source to create images above&lt;/denchmark-link&gt;

&lt;denchmark-h:h5&gt;Distribution&lt;/denchmark-h&gt;

The distribution of pixel values around expected values seems to follow a poisson distribution with lambda = 1.
&lt;denchmark-link:https://user-images.githubusercontent.com/156736/53817112-16e71300-3f65-11e9-8183-a4aa29774483.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://gist.github.com/piercus/ee12d05f99cae58ee1765a875bbe4ad9&gt;source of the diagram&lt;/denchmark-link&gt;

&lt;denchmark-h:h5&gt;Expectation&lt;/denchmark-h&gt;

In the situation where no resizing is needed, I would expect tensorflow to crop without changing the pixel values, or to change it by less than a specific threshold.
&lt;denchmark-h:h4&gt;Code to reproduce the bug&lt;/denchmark-h&gt;

//opencv4nodejs to load a file into a tensorflow tensor
const cv = require('opencv4nodejs');

// lenna.png from https://en.wikipedia.org/wiki/Lenna#/media/File:Lenna_(test_image).png
const mat = cv.imread('./lenna.png')
const size = {w: mat.cols, h: mat.rows}

const tf = require('@tensorflow/tfjs-node');

// rect to be cropped
const rect = {
	x: 171,
	y: 422,
	w: 9,
	h: 8
}

// this is the address in the image of the pixel value followed through the tensors calculation
const address = [
	0,
	422+1,
	171+4,
	0
]

// Some helpers to be able to see what is happening inside tensors 
const fact = function (array) {
	if (array.length === 0) {
		return 1;
	}
	return array[0] * fact(array.slice(1));
};

const addressToIndex = function (address, shape) {
	return address.map((a, index) =&gt; a * fact(shape.slice(index + 1))).reduce((a, b) =&gt; a + b);
};

const logAddress = function(address, tensor){
	console.log(tensor.dataSync()[addressToIndex(address, tensor.shape)])
}

const intTensor = tf.tensor4d(mat.getData(), [1, size.h, size.w, 3])
const floatTensor = intTensor.div(255);

// if i'm logging i get 0.7764706015586853
logAddress(address, floatTensor)

const cropped = tf.image.cropAndResize(floatTensor, [[rect.y/size.h, rect.x/size.w, (rect.y+rect.h)/size.h, (rect.x+rect.w)/size.w]], [0], [rect.h, rect.w], 'nearest');

// if i'm logging here (after translating address), i get 0.47058823704719543
logAddress([address[0], address[1]-rect.y, address[2]-rect.x, address[3]], floatTensor)
After doing some research, i think there is an issue with the tensorflow library here. As i'm expecting to get the same value on pixel before/after the crop.
	</description>
	<comments>
		<comment id='1' author='piercus' date='2019-10-08T21:45:22Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
	</comments>
</bug>