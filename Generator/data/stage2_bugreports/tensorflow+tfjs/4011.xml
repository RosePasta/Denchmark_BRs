<bug id='4011' author='vladmandic' open_date='2020-10-02T14:30:12Z' closed_time='2020-10-09T17:31:05Z'>
	<summary>TFJS-Node inference fails with 'Table not initialized'</summary>
	<description>
Loading specific saved_model using loadSavedModel() later fails during call to predict() with a cryptic error message that comes from within libtensorflow.so:
&lt;denchmark-code&gt;I tensorflow/cc/saved_model/reader.cc:31] Reading SavedModel from: ssd-mobilenet-v2-oi
I tensorflow/cc/saved_model/reader.cc:54] Reading meta graph with tags {  }
I tensorflow/cc/saved_model/loader.cc:202] Restoring SavedModel bundle.
I tensorflow/cc/saved_model/loader.cc:212] The specified SavedModel has no variables; no checkpoints were restored. File does not exist: ssd-mobilenet-v2-oi/variables/variables.index
I tensorflow/cc/saved_model/loader.cc:311] SavedModel load for tags {  }; Status: success. Took 423735 microseconds.
W tensorflow/core/framework/op_kernel.cc:1651] OP_REQUIRES failed at lookup_table_op.cc:809 : Failed precondition: Table not initialized.
W tensorflow/core/framework/op_kernel.cc:1651] OP_REQUIRES failed at lookup_table_op.cc:809 : Failed precondition: Table not initialized.
(node:4245) UnhandledPromiseRejectionWarning: Error: Session fail to run with error: Table not initialized.
         [[{{node hub_input/index_to_string_Lookup}}]]
    at NodeJSKernelBackend.runSavedModel (/home/vlado/dev/detector/node_modules/@tensorflow/tfjs-node/dist/nodejs_kernel_backend.js:1610:43)
    at TFSavedModel.predict (/home/vlado/dev/detector/node_modules/@tensorflow/tfjs-node/dist/saved_model.js:329:43)
&lt;/denchmark-code&gt;

which comes from tensorflow/core/kernels/lookup_util.cc:
  Status GetTable(OpKernelContext* ctx, lookup::LookupInterface** table) {
    if (expected_input_0_ == DT_RESOURCE) {
      return GetResourceLookupTable("table_handle", ctx, table);
    } else {
      return GetReferenceLookupTable("table_handle", ctx, table);
    }
Models that fail are available on TFHub:

https://tfhub.dev/google/openimages_v4/ssd/mobilenet_v2/1
https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1

Gist with full code is at &lt;denchmark-link:https://gist.github.com/vladmandic/b5f42ddbb580008552bc137fa7868d61#file-detect-js&gt;https://gist.github.com/vladmandic/b5f42ddbb580008552bc137fa7868d61#file-detect-js&lt;/denchmark-link&gt;

Environment: Ubuntu 20.04 with NodeJS 14.11.0 and TFJS built from master dated 10/02/2020 (required for newly added uint8 and int64 support)
	</description>
	<comments>
		<comment id='1' author='vladmandic' date='2020-10-07T19:04:52Z'>
		Hi &lt;denchmark-link:https://github.com/vladmandic&gt;@vladmandic&lt;/denchmark-link&gt;
, TF-Hub modules are not directly "servable saved models" in that they do not contain a main_op that initializes them. So to load a TF Hub module and use tfjs-node for inference without conversion, we need to add an extra step to create the main_op. Please create a feature request if needed. Thank you.
		</comment>
		<comment id='2' author='vladmandic' date='2020-10-07T19:12:27Z'>
		What do you mean by "directly servable"? If I download an archive, unpack it and load saved_model.pb, it works for 99% of models (and I never said I try to load it directly from tfhub if that is what you've meant plus gist i've posted refers to locally served models).
I had issues with some models due to unrecognized data types (uint8, int64 and those were resolved) and I have issue with matmul not gracefully handling different batch dimensions (still in progress). This is the only model where I've ever seen table not initialized error.  And we can't say that tfjs doesn't support saved models from tfhub - that would make no sense.
		</comment>
		<comment id='3' author='vladmandic' date='2020-10-07T20:06:34Z'>
		Hi &lt;denchmark-link:https://github.com/vladmandic&gt;@vladmandic&lt;/denchmark-link&gt;
, for this particular model, it requires table initialization. The TF-Hub module doesn't have that in the saved_model.pb. It will require additional step to add the initialization op to the model.
		</comment>
		<comment id='4' author='vladmandic' date='2020-10-07T20:58:31Z'>
		&lt;denchmark-link:https://github.com/lina128&gt;@lina128&lt;/denchmark-link&gt;
 So it's model specific - can you point me to an example if that is something that can be done by user?
		</comment>
		<comment id='5' author='vladmandic' date='2020-10-08T18:48:02Z'>
		Hi &lt;denchmark-link:https://github.com/vladmandic&gt;@vladmandic&lt;/denchmark-link&gt;
, you can try something like below. If it doesn't work, may get help from tensorflow hub community: &lt;denchmark-link:https://github.com/tensorflow/hub&gt;https://github.com/tensorflow/hub&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;import tensorflow_hub as hub
import tensorflow as tf

with tf.Graph().as_default():
    module = hub.load(hub_module)

    new_signature_def_map = {}
    meta_graph_def = module._meta_graph
    for signature_key, signature_def in (
        meta_graph_def.signature_def.iteritems()):
      input_placeholders = _make_input_placeholders(signature_key,
                                                    signature_def)
      output_tensors = module.create_apply_graph(
          signature=signature_key, inputs=input_placeholders)
      new_signature_def_map[signature_key] = _make_signature_def(
          input_placeholders, output_tensors)

    init_op = tf.group(
        tf.local_variables_initializer(),
        resources.initialize_resources(resources.shared_resources()),
        tf.tables_initializer(),
        name="init_op")

    sess = tf.Session()
    sess.run(tf.global_variables_initializer())
    sess.run(init_op)

    builder = tf.saved_model.builder.SavedModelBuilder(model_export_path)
    builder.add_meta_graph_and_variables(
        sess,
        [tf.saved_model.tag_constants.SERVING],
        signature_def_map=new_signature_def_map,
        assets_collection=tf.get_collection(tf.GraphKeys.ASSET_FILEPATHS),

    builder.save()
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='vladmandic' date='2020-10-09T15:26:11Z'>
		python is not my cup of tea, but I've done a quick try - after defining input and output locations, it loads the model, but then immediately fails with:
AttributeError: 'AutoTrackable' object has no attribute 'meta_graph'
		</comment>
		<comment id='7' author='vladmandic' date='2020-10-09T17:31:05Z'>
		FYI, older version of the models that can be found below works out-of-the-box:
&lt;denchmark-link:https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf1_detection_zoo.md#open-images-trained-models&gt;https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf1_detection_zoo.md#open-images-trained-models&lt;/denchmark-link&gt;

I'm closing this issue.
		</comment>
		<comment id='8' author='vladmandic' date='2020-10-09T17:31:07Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tfjs/issues/4011&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tfjs/issues/4011&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>