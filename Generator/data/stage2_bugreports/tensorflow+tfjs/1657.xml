<bug id='1657' author='vadimkantorov' open_date='2019-06-11T09:42:40Z' closed_time='2020-06-05T05:44:11Z'>
	<summary>Slicing with indices &amp;gt; 32768 sometimes doesn't work</summary>
	<description>
To get help from the community, we encourage using Stack Overflow and the &lt;denchmark-link:https://stackoverflow.com/questions/tagged/tensorflow.js&gt;tensorflow.js&lt;/denchmark-link&gt;
 tag.
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

{tfjs-core: "1.1.2", tfjs-data: "1.1.2", tfjs-layers: "1.1.2", tfjs-converter: "1.1.2", tfjs: "1.1.2"}
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

Version 74.0.3729.169 (Official Build) (64-bit), Windows
&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

I have a large tensor that I got from fromPixels, and then did some wrangling to recover a int16 tensor, and then convert it to float32. Tensor's shape is
&lt;denchmark-code&gt;&gt; signal.shape
[224000]
&lt;/denchmark-code&gt;

I want to slice the tensor to get a view without the last element. I do:
&lt;denchmark-code&gt;&gt; signal.slice(0, 10).arraySync() // OK
(10) [-79, -75, -65, -49, -47, -59, -70, -69, -65, -55]

&gt; signal.slice(0, signal.size - 1).slice(0, 10).arraySync() // BAD, elements are doubled
(10) [-79, -75, -75, -65, -65, -49, -49, -47, -47, -59]
&lt;/denchmark-code&gt;

Slicing should not change the elements (they started to double). I started to investigate:
&lt;denchmark-code&gt;&gt; signal.slice(0, 32768).slice(0, 10).arraySync() // OK
(10) [-79, -75, -65, -49, -47, -59, -70, -69, -65, -55]

&gt; signal.slice(0, 32769).slice(0, 10).arraySync() // BAD
(10) [-79, -75, -75, -65, -65, -49, -49, -47, -47, -59]

&gt; signal.strides // suspicious strides
[]
&lt;/denchmark-code&gt;

Note that this is at the boundary of int16 max size.
I found a workaround: doing signal.arraySync() prior to slicing somehow fixes the problem.
I tried to repro it with , but the bug doesn't happen then. You can find my code at: &lt;denchmark-link:https://github.com/vadimkantorov/inferspeech/blob/master/tfjs.html#L37&gt;https://github.com/vadimkantorov/inferspeech/blob/master/tfjs.html#L37&lt;/denchmark-link&gt;
 . Also there were very strange result differences in &lt;denchmark-link:https://github.com/vadimkantorov/inferspeech/blob/master/tfjs.html#L75&gt;https://github.com/vadimkantorov/inferspeech/blob/master/tfjs.html#L75&lt;/denchmark-link&gt;
 , depending on whether  or  is placed first. I think something is broken about strides.
The  with tensor info is attached here for convenience as well:
&lt;denchmark-link:https://user-images.githubusercontent.com/1041752/59262575-c1935f80-8c3f-11e9-8d61-c6c283b2c9e0.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='vadimkantorov' date='2019-06-27T18:27:09Z'>
		Updating to 1.2.2 seems to work somewhat :) Unfortunately every other time Chrome hits errors like:
&lt;denchmark-code&gt;Uncaught (in promise) Error: Requested texture size [0x0] is invalid.
    at Yt (webgl_util.ts:209)
    at ha (gpgpu_util.ts:129)
    at ma (gpgpu_util.ts:181)
    at e.createUnsignedBytesMatrixTexture (gpgpu_context.ts:138)
    at t.acquireTexture (texture_manager.ts:71)
    at e.acquireTexture (backend_webgl.ts:2632)
    at e.uploadToGPU (backend_webgl.ts:2602)
    at e.getTexture (backend_webgl.ts:647)
    at e.fromPixels (backend_webgl.ts:319)
    at t.fromPixels (engine.ts:869)
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;Couldn't parse line number in error: 
webgl_util.ts:118 #version 300 es
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    in vec2 resultUV;
    out vec4 outputColor;
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    #define isnan(value) isnan_custom(value)
    
      bool isnan_custom(float val) {
        return (val &gt; 0. || val &lt; 0. || val == 0.) ? false : true;
      }
    
    bvec4 isnan_custom(vec4 val) {
      return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
    }

    
      const float INFINITY = uintBitsToFloat(uint(0x7f800000));
    
    
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign &lt; 0. &amp;&amp; mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}

    
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}

    
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}

  
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }


    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return texture(textureSampler, uv).r;
    }
  

    void setOutput(vec4 val) {
      outputColor = val;
    }
  
uniform sampler2D A;
uniform int offsetA;

      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(11136, 425));
      }
    

        
      vec4 getA(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(768.0, 850.0);

        return texture(A, uv);
      }
    
        vec4 getA(int b, int row, int col) {
          return getA(row, col);
        }
      

      void main() {
        ivec2 rc = getOutputCoords();

        vec4 result = vec4(0);

        for(int row=0; row&lt;=1; row++) {
          for(int col=0; col&lt;=1; col++) {
            int blockIndex = rc.y + col;
            int pos = rc.x + row;

            if(blockIndex &gt;= 850 || pos &gt;= 22272) continue;

            int offsetY = int(blockIndex / (850)) * 1 - 0;
            int d0 = offsetY + 1 * (pos / 22272);

            if(d0 &gt;= 1 || d0 &lt; 0) continue;

            int offsetX = int(mod(float(blockIndex), 850.) * 1. - 28.);
            int d1 = offsetX + 2 * (int(mod(float(pos), 22272.) / 768.));

            if(d1 &gt;= 850 || d1 &lt; 0) continue;

            vec2 innerDims = vec2(d1, int(mod(float(pos), 768.)));
            result[row * 2 + col] = getChannel(getA(d0, int(innerDims.x),
                                              int(innerDims.y)), innerDims);
          }
        }

        outputColor = result;
      }
    
webgl_util.ts:107 Uncaught (in promise) Error: Failed to compile fragment shader.
    at Vt (webgl_util.ts:107)
    at e.createProgram (gpgpu_context.ts:266)
    at gpgpu_math.ts:83
    at gpgpu_math.ts:18
    at e.getAndSaveBinary (backend_webgl.ts:2473)
    at e.compileAndRun (backend_webgl.ts:2443)
    at e.conv2dWithIm2Row (backend_webgl.ts:1911)
    at e.conv2d (backend_webgl.ts:1932)
    at kt.runKernel.x (conv.ts:205)
    at engine.ts:462
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;engine.ts:303 Initialization of backend webgl failed
t.initializeBackend @ engine.ts:303
t.initializeBackendsAndReturnBest @ engine.ts:351
get @ engine.ts:179
t.registerTensor @ engine.ts:520
t @ tensor.ts:464
t.make @ tensor.ts:478
Je @ tensor_ops.ts:111
Ye @ tensor_ops.ts:57
reader.onload @ tfjs.html:82
load (async)
transcribe @ tfjs.html:75
onclick @ tfjs.html:6
engine.ts:304 Error: WebGL is not supported on this device
    at new e (backend_webgl.ts:246)
    at Object.factory (backend_webgl.ts:2642)
    at t.initializeBackend (engine.ts:270)
    at t.initializeBackendsAndReturnBest (engine.ts:351)
    at t.get [as backend] (engine.ts:179)
    at t.registerTensor (engine.ts:520)
    at new t (tensor.ts:464)
    at Function.t.make (tensor.ts:478)
    at Je (tensor_ops.ts:111)
    at Object.Ye [as tensor] (tensor_ops.ts:57)
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;webgl_util.ts:345 Uncaught (in promise) Error: Unable to create WebGLTexture.
    at se (webgl_util.ts:345)
    at Xt (webgl_util.ts:201)
    at ha (gpgpu_util.ts:131)
    at ga (gpgpu_util.ts:190)
    at e.createPackedMatrixTexture (gpgpu_context.ts:166)
    at t.acquireTexture (texture_manager.ts:57)
    at e.acquireTexture (backend_webgl.ts:2632)
    at e.uploadToGPU (backend_webgl.ts:2602)
    at e.compileAndRun (backend_webgl.ts:2436)
    at e.packedBinaryOp (backend_webgl.ts:1456)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='vadimkantorov' date='2019-06-27T18:59:50Z'>
		Yet the following is pleasing:
&lt;denchmark-link:https://user-images.githubusercontent.com/1041752/60292856-6095a800-991e-11e9-9dfa-3d84f646ad2c.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='vadimkantorov' date='2019-06-27T22:39:16Z'>
		Unfortunately, because of random errors above the speech recognition model is not practical even for demonstration purposes (the fresh code is here: &lt;denchmark-link:https://github.com/vadimkantorov/inferspeech/blob/master/tfjs.html&gt;https://github.com/vadimkantorov/inferspeech/blob/master/tfjs.html&lt;/denchmark-link&gt;
 )
		</comment>
		<comment id='4' author='vadimkantorov' date='2019-06-29T13:43:56Z'>
		Should I file separate issues for the errors above? (they occur even if I used the uint8-quantized model).
		</comment>
		<comment id='5' author='vadimkantorov' date='2019-07-18T13:09:51Z'>
		Hey &lt;denchmark-link:https://github.com/vadimkantorov&gt;@vadimkantorov&lt;/denchmark-link&gt;
 - just wanted to check whether you're still experiencing the issues you listed above? I checked out your repo and it looks like the demo works on my Macbook Pro but not on my Windows laptop - although I'm not seeing the errors you listed.
Thanks for any info!
		</comment>
		<comment id='6' author='vadimkantorov' date='2019-07-18T13:14:02Z'>
		Yes, I still experience them on my Windows laptop. The errors are not reproducible every time, sometimes it works without errors (especially if you step through the code in Console; it takes around 60 seconds too run). But 80% of times I hit one or or combination of these errors. Probably OOM? But how do I confirm this? Would you have any advice on how to rewrite my demo to avoid OOM?
Also the original strides issue was very serious. I hope it was indeed fixed and that I'm not just happily avoiding it by chance.
		</comment>
		<comment id='7' author='vadimkantorov' date='2019-07-18T13:33:49Z'>
		You hit one of these errors after clicking "Transcribe" just once?
tf.memory() will give you a snapshot of your memory usage.
Could you tell us a bit more about your platform? Could you also visit js.tensorflow.org/debug and share the output of tf.ENV.features?
I also noticed you're using v1.2.2 - could you try updating to 1.2.3 and seeing whether that fixes some of the errors?
		</comment>
		<comment id='8' author='vadimkantorov' date='2019-07-18T13:36:00Z'>
		Yes, even after clicking just once. My platform is 5 year-old Acer S7-392 laptop with an updated Windows 10 (with Windows Subsystem for Linux) + updated Chrome.
Thanks for suggestions. I'll try them out and will paste the results.
tf.ENV:
&lt;denchmark-code&gt;navigator.userAgent:
"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36"
tf.ENV.features:
{
  "IS_BROWSER": true,
  "IS_NODE": false,
  "DEBUG": false,
  "WEBGL_VERSION": 2,
  "HAS_WEBGL": true,
  "WEBGL_RENDER_FLOAT32_ENABLED": true,
  "WEBGL_SIZE_UPLOAD_UNIFORM": 4,
  "WEBGL_MAX_TEXTURE_SIZE": 16384,
  "WEBGL_PACK": true,
  "WEBGL_LAZILY_UNPACK": true,
  "WEBGL_DOWNLOAD_FLOAT_ENABLED": true,
  "WEBGL_BUFFER_SUPPORTED": true,
  "WEBGL_FENCE_API_ENABLED": true
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='vadimkantorov' date='2019-07-23T16:04:18Z'>
		this is on v1.2.3:
some memory measurements
&lt;denchmark-code&gt;before stft {unreliable: false, numBytesInGPU: 2179860, numTensors: 4, numDataBuffers: 3, numBytes: 2176000}
demo.html:81 before predict {unreliable: false, numBytesInGPU: 41742624, numTensors: 10231, numDataBuffers: 10230, numBytes: 34824840}
&lt;/denchmark-code&gt;

unfortunately on the other run I hit again the shader problem:
&lt;denchmark-code&gt;Couldn't parse line number in error: 
webgl_util.ts:118 #version 300 es
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    in vec2 resultUV;
    out vec4 outputColor;
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    #define isnan(value) isnan_custom(value)
    
      bool isnan_custom(float val) {
        return (val &gt; 0. || val &lt; 0. || val == 0.) ? false : true;
      }
    
    bvec4 isnan_custom(vec4 val) {
      return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
    }

    
      const float INFINITY = uintBitsToFloat(uint(0x7f800000));
    
    
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign &lt; 0. &amp;&amp; mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}

    
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}

    
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}

  

    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return texture(textureSampler, uv).r;
    }
  

    void setOutput(vec4 val) {
      outputColor = val;
    }
  
uniform sampler2D A;
uniform int offsetA;

    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(1, 129));

      int index = resTexRC.x * 129 + resTexRC.y;
      int r = 2 * (index / 129);
      int c = imod(index, 129) * 2;

      return ivec2(r, c);
    }
  

    float getA(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(257.0, 1.0);
      return sampleTexture(A, uv);
    }
  
    float getAAtOutCoords() {
      ivec2 coords = getOutputCoords();
      
      return getA(coords.x, coords.y);
    }
  

        void main() {
          ivec2 rc = getOutputCoords();

          if(rc.x &gt;= 1||rc.y &gt;= 257) {
            setOutput(vec4(0));
          } else {
            
    int r = rc.x;
    int c = rc.y;
    int rp1 = r + 1;
    int cp1 = c + 1;

    bool cEdge = cp1 &gt;= 257;
    bool rEdge = rp1 &gt;= 1;
  

            setOutput(vec4(getA(r, c),
          cEdge ? 0. : getA(r, cp1),
          rEdge ? 0. : getA(rp1, c),
          rEdge || cEdge ? 0. : getA(rp1, cp1)));
          }
        }
      
webgl_util.ts:107 Uncaught (in promise) Error: Failed to compile fragment shader.
    at jt (webgl_util.ts:107)
    at e.createProgram (gpgpu_context.ts:266)
    at gpgpu_math.ts:83
    at gpgpu_math.ts:111
    at e.getAndSaveBinary (backend_webgl.ts:2487)
    at e.compileAndRun (backend_webgl.ts:2457)
    at e.packTensor (backend_webgl.ts:2317)
    at backend_webgl.ts:2424
    at Array.map (&lt;anonymous&gt;)
    at e.compileAndRun (backend_webgl.ts:2389)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='10' author='vadimkantorov' date='2019-07-23T16:07:08Z'>
		on a lucky run:
&lt;denchmark-code&gt;before stft {unreliable: false, numBytesInGPU: 2179860, numTensors: 4, numDataBuffers: 3, numBytes: 2176000}
pspec.shape (2) [1699, 257]
demo.html:81 before predict {unreliable: false, numBytesInGPU: 41742624, numTensors: 10231, numDataBuffers: 10230, numBytes: 34824840}
demo.html:84 after predict {unreliable: false, numBytesInGPU: 467833984, numTensors: 10273, numDataBuffers: 10270, numBytes: 460872556}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='11' author='vadimkantorov' date='2019-07-23T16:16:07Z'>
		It seems that it's signal/stft that leaks memory and makes 10K tensors. After I put it inside tidy:
&lt;denchmark-code&gt;before stft {unreliable: false, numBytesInGPU: 2179860, numTensors: 4, numDataBuffers: 3, numBytes: 2176000}
demo.html:74 pspec.shape (2) [1699, 257]
demo.html:82 before predict {unreliable: false, numBytesInGPU: 6681264, numTensors: 25, numDataBuffers: 24, numBytes: 6731736}
demo.html:85 after predict {unreliable: false, numBytesInGPU: 432772624, numTensors: 67, numDataBuffers: 64, numBytes: 432779452}
&lt;/denchmark-code&gt;

Though the total number of bytes is more or less same: 450 megabytes.
		</comment>
		<comment id='12' author='vadimkantorov' date='2019-07-23T16:28:18Z'>
		This same shader at times fails to compile during the stft procedure during model predict
		</comment>
		<comment id='13' author='vadimkantorov' date='2019-07-23T16:30:42Z'>
		Also sometimes this happens:
&lt;denchmark-code&gt;engine.ts:303 Initialization of backend webgl failed
t.initializeBackend @ engine.ts:303
t.initializeBackendsAndReturnBest @ engine.ts:351
get @ engine.ts:179
t.registerTensor @ engine.ts:520
t @ tensor.ts:464
t.make @ tensor.ts:483
tn @ tensor_ops.ts:112
Qe @ tensor_ops.ts:58
reader.onload @ demo.html:72
load (async)
transcribe @ demo.html:66
onclick @ demo.html:9
engine.ts:304 Error: WebGL is not supported on this device
    at new e (backend_webgl.ts:247)
    at Object.factory (backend_webgl.ts:2658)
    at t.initializeBackend (engine.ts:270)
    at t.initializeBackendsAndReturnBest (engine.ts:351)
    at t.get [as backend] (engine.ts:179)
    at t.registerTensor (engine.ts:520)
    at new t (tensor.ts:464)
    at Function.t.make (tensor.ts:483)
    at tn (tensor_ops.ts:112)
    at Object.Qe [as tensor] (tensor_ops.ts:58)
&lt;/denchmark-code&gt;

And sometimes the model returns some gibberish (and transcript of ' ') instead of the good prediction
		</comment>
		<comment id='14' author='vadimkantorov' date='2019-07-23T16:31:34Z'>
		Also during these WebGL gpu issues, the Chrome page stops redrawing, existing HTML elements disappear etc. And if the shader issue happens, the screen just turns black.
		</comment>
		<comment id='15' author='vadimkantorov' date='2019-07-23T16:33:49Z'>
		Also sometimes everything just hangs inside fft - probably because WebGL failed to initialize, so it waits within tf.ready() forever
		</comment>
		<comment id='16' author='vadimkantorov' date='2019-07-25T13:23:23Z'>
		&lt;denchmark-link:https://github.com/vadimkantorov&gt;@vadimkantorov&lt;/denchmark-link&gt;
 Are you saying that the issue is within rfft? If you get past stft_abs_sq, does the prediction succeed? Or does it fail within the predict also?
		</comment>
		<comment id='17' author='vadimkantorov' date='2019-07-25T13:29:41Z'>
		&lt;denchmark-link:https://github.com/vadimkantorov&gt;@vadimkantorov&lt;/denchmark-link&gt;
 Could you also try upgrading to 1.2.5? We recently pushed a D3D compilation bugfix - I wonder whether this is related.
		</comment>
		<comment id='18' author='vadimkantorov' date='2019-07-25T20:13:03Z'>
		&lt;denchmark-link:https://github.com/annxingyuan&gt;@annxingyuan&lt;/denchmark-link&gt;
 I'll try 1.2.5, I'll let you know when I have new results. Concerning old results, I think the issue is semi-random and has to do with allocating textures / some other gpu resources (my laptop is 5-year old) like memory.
		</comment>
		<comment id='19' author='vadimkantorov' date='2019-07-26T05:22:34Z'>
		Also I wish tfjs / Chrome failed in nicer ways with clearer error messages (even if out-of-memory is to blame)
		</comment>
		<comment id='20' author='vadimkantorov' date='2019-07-26T05:27:15Z'>
		With 1.2.5 same errors:
&lt;denchmark-code&gt;#version 300 es
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    in vec2 resultUV;
    out vec4 outputColor;
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    #define isnan(value) isnan_custom(value)
    
      bool isnan_custom(float val) {
        return (val &gt; 0. || val &lt; 0. || val == 0.) ? false : true;
      }
    
    bvec4 isnan_custom(vec4 val) {
      return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
    }

    
      const float INFINITY = uintBitsToFloat(uint(0x7f800000));
    
    
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign &lt; 0. &amp;&amp; mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}

    
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}

    
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}

  
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }


    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return texture(textureSampler, uv).r;
    }
  

    void setOutput(vec4 val) {
      outputColor = val;
    }
  
uniform sampler2D A;
uniform int offsetA;

      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(11136, 425));
      }
    

        
      vec4 getA(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(768.0, 850.0);

        return texture(A, uv);
      }
    
        vec4 getA(int b, int row, int col) {
          return getA(row, col);
        }
      

      void main() {
        ivec2 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1;
        vec2 innerDims;

        
          blockIndex = rc.y + 0;
          pos = rc.x + 0;
          
          if(blockIndex &lt; 850 &amp;&amp; pos &lt; 22272) {
            offsetY = int(blockIndex / (850)) * 1 - 0;
            d0 = offsetY + 1 * (pos / 22272);
  
            if(d0 &lt; 1 &amp;&amp; d0 &gt;= 0) {
              offsetX = int(mod(float(blockIndex), 850.) * 1. - 28.);
              d1 = offsetX + 2 * (int(mod(float(pos), 22272.) / 768.));
    
              if(d1 &lt; 850 &amp;&amp; d1 &gt;= 0) {
                innerDims = vec2(d1, int(mod(float(pos), 768.)));
                result[0] = getChannel(getA(d0, int(innerDims.x),
                                                  int(innerDims.y)), innerDims);
              }
            }
  
          }
        
          blockIndex = rc.y + 1;
          pos = rc.x + 0;
          
          if(blockIndex &lt; 850 &amp;&amp; pos &lt; 22272) {
            offsetY = int(blockIndex / (850)) * 1 - 0;
            d0 = offsetY + 1 * (pos / 22272);
  
            if(d0 &lt; 1 &amp;&amp; d0 &gt;= 0) {
              offsetX = int(mod(float(blockIndex), 850.) * 1. - 28.);
              d1 = offsetX + 2 * (int(mod(float(pos), 22272.) / 768.));
    
              if(d1 &lt; 850 &amp;&amp; d1 &gt;= 0) {
                innerDims = vec2(d1, int(mod(float(pos), 768.)));
                result[1] = getChannel(getA(d0, int(innerDims.x),
                                                  int(innerDims.y)), innerDims);
              }
            }
  
          }
        
          blockIndex = rc.y + 0;
          pos = rc.x + 1;
          
          if(blockIndex &lt; 850 &amp;&amp; pos &lt; 22272) {
            offsetY = int(blockIndex / (850)) * 1 - 0;
            d0 = offsetY + 1 * (pos / 22272);
  
            if(d0 &lt; 1 &amp;&amp; d0 &gt;= 0) {
              offsetX = int(mod(float(blockIndex), 850.) * 1. - 28.);
              d1 = offsetX + 2 * (int(mod(float(pos), 22272.) / 768.));
    
              if(d1 &lt; 850 &amp;&amp; d1 &gt;= 0) {
                innerDims = vec2(d1, int(mod(float(pos), 768.)));
                result[2] = getChannel(getA(d0, int(innerDims.x),
                                                  int(innerDims.y)), innerDims);
              }
            }
  
          }
        
          blockIndex = rc.y + 1;
          pos = rc.x + 1;
          
          if(blockIndex &lt; 850 &amp;&amp; pos &lt; 22272) {
            offsetY = int(blockIndex / (850)) * 1 - 0;
            d0 = offsetY + 1 * (pos / 22272);
  
            if(d0 &lt; 1 &amp;&amp; d0 &gt;= 0) {
              offsetX = int(mod(float(blockIndex), 850.) * 1. - 28.);
              d1 = offsetX + 2 * (int(mod(float(pos), 22272.) / 768.));
    
              if(d1 &lt; 850 &amp;&amp; d1 &gt;= 0) {
                innerDims = vec2(d1, int(mod(float(pos), 768.)));
                result[3] = getChannel(getA(d0, int(innerDims.x),
                                                  int(innerDims.y)), innerDims);
              }
            }
  
          }
        

        outputColor = result;
      }
    
webgl_util.ts:107 Uncaught (in promise) Error: Failed to compile fragment shader.
    at jt (webgl_util.ts:107)
    at e.createProgram (gpgpu_context.ts:266)
    at gpgpu_math.ts:83
    at gpgpu_math.ts:111
    at e.getAndSaveBinary (backend_webgl.ts:2487)
    at e.compileAndRun (backend_webgl.ts:2457)
    at e.conv2dWithIm2Row (backend_webgl.ts:1925)
    at e.conv2d (backend_webgl.ts:1946)
    at Tt.runKernel.x (conv.ts:205)
    at engine.ts:462
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>