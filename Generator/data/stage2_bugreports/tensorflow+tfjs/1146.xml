<bug id='1146' author='gr3w2' open_date='2019-01-28T13:40:59Z' closed_time='2019-02-14T19:10:19Z'>
	<summary>Memory leak during loading a model</summary>
	<description>
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

@tensorflow/tfjs: 0.14.2,
@tensorflow/tfjs-node: 0.2.3
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

node v11.7.0
&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

Hi there!
I found that method loadModel creates extra tensor variables, and there is no access to them, so they can't be disposed directly. I can dispose them using disposeVariables, but that function disposes all variables from memory. So if I train another model at the same time when I call disposeVariables, then the training will throw an error, 'cause it also use some variables inside and all of them was removed.
I attached a link to GitHub repo, so you can find a code to reproduce that behavior there
&lt;denchmark-h:h4&gt;Code to reproduce the bug / link to feature request&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/gr3w2/tfjs-bug-report&gt;https://github.com/gr3w2/tfjs-bug-report&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='gr3w2' date='2019-01-28T16:07:28Z'>
		&lt;denchmark-link:https://github.com/gr3w2&gt;@gr3w2&lt;/denchmark-link&gt;
 May I inquire as to what problems the small number of extra tensors created cause to you? In other words, why do you need to get to a state of 0 WebGL tensors in your use case?
Also, does your model involve dropout layers? There is a recent PR that has fixed a memory leak issue in that particular layer type: &lt;denchmark-link:https://github.com/tensorflow/tfjs-layers/pull/428&gt;tensorflow/tfjs-layers#428&lt;/denchmark-link&gt;

There might be similar "leak" issues in other layer types, which we can fix once we know what they are.
		</comment>
		<comment id='2' author='gr3w2' date='2019-01-28T16:20:01Z'>
		&lt;denchmark-link:https://github.com/caisq&gt;@caisq&lt;/denchmark-link&gt;
 thanks for quick response.
long story short, in my case, I need to save/load the models a lot and during that save/load I can see how quickly tensors count is growing. So this is pretty important.
Nope, I'm not using dropout layers, only dense layers.
		</comment>
	</comments>
</bug>