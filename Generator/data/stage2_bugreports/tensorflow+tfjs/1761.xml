<bug id='1761' author='marsiancba' open_date='2019-07-19T11:50:58Z' closed_time='2020-03-17T17:29:07Z'>
	<summary>resizeBilinear problem</summary>
	<description>
There seems to be some problem with resizeBilinear in Chrome when WEBGL_PACK=true.
Running this operation many times (cca 20000) seems to cause browser GPU crash - browser window flashes in black color and after that all tensor operations return 0.
It works OK if you call tf.ENV.set('WEBGL_PACK', false);
Also it works OK in latest Firefox.
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

1.2.2
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

Chrome 75.0.3770.142
&lt;denchmark-h:h4&gt;Code to reproduce the bug&lt;/denchmark-h&gt;

The code below is used to extract square patches (defined by basex,basey,POS_SIZE_PAGE) and resize them to fixed size POS_SIZE=48. All input tensors (page_pixels) are of fixed size 1024x1280.
&lt;denchmark-code&gt;const char_pixels_page = page_pixels.slice([basey, basex], [POS_SIZE_PAGE, POS_SIZE_PAGE]);
const char_pixels = tf.image.resizeBilinear(
    char_pixels_page.expandDims(2) as tf.Tensor3D,
    [POS_SIZE, POS_SIZE],
 ).squeeze([2]) as tf.Tensor2D;
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='marsiancba' date='2019-07-19T22:41:31Z'>
		hi &lt;denchmark-link:https://github.com/marsiancba&gt;@marsiancba&lt;/denchmark-link&gt;

Did you dispose the tensor or wrapped the code with tf.tidy()? It may because of memory leaking.
		</comment>
		<comment id='2' author='marsiancba' date='2019-07-21T17:12:07Z'>
		Yes, it is in tidy() and there is no observable memory leaking (based on tf.memory() results).
		</comment>
		<comment id='3' author='marsiancba' date='2019-07-22T16:34:16Z'>
		Hi &lt;denchmark-link:https://github.com/marsiancba&gt;@marsiancba&lt;/denchmark-link&gt;
 - I suspect this is due to the  followed by  - when  is true, we arrange data within textures following certain constraints such that reshapes require an additional shader to be executed. In the code snippet above, two such reshapes occur.
We need to figure out a way to minimize the cost of these reshapes. In the meantime, you might see a performance improvement from initializing char_pixels_page as a 4D tensor of shape [1, 1024, 1280].
		</comment>
		<comment id='4' author='marsiancba' date='2019-07-31T11:21:31Z'>
		Hi &lt;denchmark-link:https://github.com/annxingyuan&gt;@annxingyuan&lt;/denchmark-link&gt;
 - do you mean that the crash just happens "sooner" because of using more operations? This seems to be true... From my experience using TFJS for training "in the browser" it seems to have some kind of "memory leak" somewhere in graphic pipeline of browser. It crashes also with WEBGL_PACK=false, it just happens later, e.g. after running train several times.
		</comment>
		<comment id='5' author='marsiancba' date='2019-08-07T11:36:33Z'>
		More details about the problem:

It is clearly leaking something to GPU memory. It can be seen in Windows Task Manager as Dedicated GPU memory. It happens with any setting of WEBGL_PACK and in both browsers (Chrome/Firefox), just with different speed of leaking.

Results in Chrome after generating 100k samples:
WEBGL_PACK=true +5.7GB
WEBGL_PACK=false +2GB
(this leaked memory can be freed by closing browser tab).


The leak is not visible in Chrome Task Manager in GPU memory column.


The leak is not visible in tf.memory() output. At the end I get {unreliable: false, numBytesInGPU: 0, numTensors: 0, numDataBuffers: 0, numBytes: 0}.


These results were obtained with slightly changed code (based on &lt;denchmark-link:https://github.com/annxingyuan&gt;@annxingyuan&lt;/denchmark-link&gt;
 suggestion):
const char_pixels_page = page_pixels.slice([basey, basex], [POS_SIZE_PAGE, POS_SIZE_PAGE]);
const char_pixels = tf.image.resizeBilinear(
    char_pixels_page,
    [POS_SIZE, POS_SIZE],
) as tf.Tensor3D;
Note: When I remove resizeBilinear operation from the code, it still "leaks" something, but at much slower rate (+0.6GB with WEBGL_PACK=true).
		</comment>
		<comment id='6' author='marsiancba' date='2019-08-07T11:56:11Z'>
		Hi &lt;denchmark-link:https://github.com/marsiancba&gt;@marsiancba&lt;/denchmark-link&gt;
 - could you include a fuller code snippet? One that specifies basey, basex, POS_SIZE_PAGE, POS_SIZE, etc.?
I'll try to keep investigating. Thank you!
		</comment>
		<comment id='7' author='marsiancba' date='2019-08-07T13:02:07Z'>
		Here is relevant part of the code (full code is too big):
const PAGE_WIDTH = 1024;
const PAGE_HEIGHT = 1280;
...
const POS_SIZE = 48;
...
const canvas = createCanvas();
canvas.width = PAGE_WIDTH;
canvas.height = PAGE_HEIGHT;
...
for (const s of samples) { // loop over sample images (hundreds)
...
    // draw image to canvas
...
    tf.tidy(() =&gt; {
        const page_pixels = getContrastPixels(canvas); // see below
...
        for (const { img_rect, a_chars } of img_fields) { { // loop over locations in the image (cca 10-100 per image)
...
            const POS_SIZE_PAGE = ...; // some expression to calculate size in page, results are roughly between 30-60
...
            for (let r = 0; r &lt; repeat; r++) { // generate multiple samples per each location so we get cca 100000 samples for training
...
                const basex= ...; // some location in the image
                const basey= ...;
                if (basex &lt; 0 || basey &lt; 0 || basex + POS_SIZE_PAGE &gt; PAGE_WIDTH || basey + POS_SIZE_PAGE &gt; PAGE_HEIGHT) continue;
...
                const char_pixels_page = page_pixels.slice([basey, basex], [POS_SIZE_PAGE, POS_SIZE_PAGE]);
                const char_pixels = tf.image.resizeBilinear(
                    char_pixels_page,
                    [POS_SIZE, POS_SIZE],
                ) as tf.Tensor3D;
...
                res.push({
...
                    pixels: tensorToBuffer(char_pixels),
...
                })
            } // end repeat loop
        } // end of loop over locations
    }); // end of tidy
} // end of loop over sample images
...
function getContrastPixels(canvas: HTMLCanvasElement) {
    const img_pixels_raw = tf.browser.fromPixels(canvas, 1).toFloat().mul(tf.scalar(1 / 255)) as tf.Tensor3D;

    const filter_data = [0.036262, 0.051046, 0.067526, 0.083942, 0.098059, 0.107644, 0.111043, 0.107644, 0.098059, 0.083942, 0.067526, 0.051046, 0.036262];

    const filter = tf.tensor1d(filter_data);

    const blur_h = tf.conv2d(
        img_pixels_raw,
        filter.expandDims(0).expandDims(2).expandDims(3),
        1,
        'same',
    ) as tf.Tensor3D;

    const blur_w = tf.conv2d(
        blur_h,
        filter.expandDims(1).expandDims(2).expandDims(3),
        1,
        'same',
    ) as tf.Tensor3D;

    const tf_pixels = tf.scalar(1).sub(img_pixels_raw.div(blur_w)).mul(tf.scalar(3)).clipByValue(0, 1) as tf.Tensor3D;

    return tf_pixels;
}
		</comment>
		<comment id='8' author='marsiancba' date='2019-08-07T13:10:17Z'>
		Here is my system confguration:
Windows 10
NVIDIA GeForce RTX 2070 (2 monitors)
onboard Intel UHD Graphics 630 (2 monitors)
Thank you for looking into this!
		</comment>
		<comment id='9' author='marsiancba' date='2020-03-17T17:29:07Z'>
		Closing this due to lack of activity, feel to reopen. Thank you
		</comment>
	</comments>
</bug>