<bug id='3716' author='arcman7' open_date='2020-08-03T07:35:35Z' closed_time='2020-08-18T18:04:54Z'>
	<summary>Tensor.clipByValue does not work for  tensors of dtype int32 in Node backend</summary>
	<description>
TensorFlow.js version 2.0.1
node version 12.13.0
backend: "tensorflow"
OS: Windows 10
Issue: Tensor.clipByValue does not work for  tensors of dtype int32.
Code to reproduce issue:
&lt;denchmark-code&gt;const x = tf.tensor([-1, 2, -3, 4], undefined, 'int32');
x.clipByValue(-2, 4).print();
&lt;/denchmark-code&gt;

This throws an error with the stack trace:
&lt;denchmark-code&gt;Thrown:
Error: Invalid TF_Status: 3
Message: cannot compute Minimum as input #1(zero-based) was expected to be a int32 tensor but is a float tensor
    at NodeJSKernelBackend.executeSingleOutput (C:\Users\Ryan\projects\pysc2\node_modules\@tensorflow\tfjs-node\dist\nodejs_kernel_backend.js:192:43)
    at NodeJSKernelBackend.minimum (C:\Users\Ryan\projects\pysc2\node_modules\@tensorflow\tfjs-node\dist\nodejs_kernel_backend.js:558:21)
    at NodeJSKernelBackend.clip (C:\Users\Ryan\projects\pysc2\node_modules\@tensorflow\tfjs-node\dist\nodejs_kernel_backend.js:636:25)
    at ENGINE.runKernelFunc.x (C:\Users\Ryan\projects\pysc2\node_modules\@tensorflow\tfjs-node\node_modules\@tensorflow\tfjs-core\dist\tf-core.node.js:6882:27)
    at C:\Users\Ryan\projects\pysc2\node_modules\@tensorflow\tfjs-node\node_modules\@tensorflow\tfjs-core\dist\tf-core.node.js:3229:55
    at C:\Users\Ryan\projects\pysc2\node_modules\@tensorflow\tfjs-node\node_modules\@tensorflow\tfjs-core\dist\tf-core.node.js:3075:22
    at Engine.scopedRun (C:\Users\Ryan\projects\pysc2\node_modules\@tensorflow\tfjs-node\node_modules\@tensorflow\tfjs-core\dist\tf-core.node.js:3085:23)
    at Engine.tidy (C:\Users\Ryan\projects\pysc2\node_modules\@tensorflow\tfjs-node\node_modules\@tensorflow\tfjs-core\dist\tf-core.node.js:3074:21)
    at kernelFunc (C:\Users\Ryan\projects\pysc2\node_modules\@tensorflow\tfjs-node\node_modules\@tensorflow\tfjs-core\dist\tf-core.node.js:3229:29)
&lt;/denchmark-code&gt;

Please note that it appears to work just fine in the browser using the webgl backend.
	</description>
	<comments>
		<comment id='1' author='arcman7' date='2020-08-03T07:52:55Z'>
		I'm not sure exactly where the issue is in the code base, but just writing this helper method gets me around the issue for now-
&lt;denchmark-code&gt;function clipByValue(x, min, max) {
  const minT = tf.fill(x.shape, min, x.dtype);
  const maxT = tf.fill(x.shape, max, x.dtype);
  return x.where(x.greaterEqual(min), minT).where(x.lessEqual(max), maxT);
}
&lt;/denchmark-code&gt;

I noticed that when you rely on broadcasting to add a scalar value to an existing tensor, the resulting tensor dtype can change. For example:
&lt;denchmark-code&gt;const x = tf.tensor([-1, 2, -3, 4], undefined, 'int32');
const y = x.add(4); // tensor y has dtype float32
&lt;/denchmark-code&gt;

I think this may have something to do with the issue I'm experiencing.
		</comment>
		<comment id='2' author='arcman7' date='2020-08-18T18:04:55Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tfjs/issues/3716&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tfjs/issues/3716&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>