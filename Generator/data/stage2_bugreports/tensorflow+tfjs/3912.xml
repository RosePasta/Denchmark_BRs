<bug id='3912' author='yudhiesh' open_date='2020-09-12T08:26:11Z' closed_time='2020-09-13T03:04:30Z'>
	<summary>cameraWithTensor not able to work after adding BlazeFace</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information


Have I written custom code (as opposed to using a stock example script provided in TensorFlow.js):


OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
macOS Catalina Version 10.15.6


Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
Huawei Mate 20
-Dependencies :


&lt;denchmark-code&gt;    "@react-native-community/async-storage": "^1.12.0",
    "@react-native-community/masked-view": "0.1.10",
    "@react-navigation/native": "^5.7.3",
    "@react-navigation/stack": "^5.9.0",
    "@tensorflow-models/mobilenet": "^2.0.4",
    "@tensorflow/tfjs": "^2.0.0",
    "@tensorflow/tfjs-react-native": "^0.3.0",
    "expo": "~38.0.8",
    "expo-camera": "~8.3.1",
    "expo-gl": "^8.4.0",
    "expo-gl-cpp": "~8.3.1",
    "expo-status-bar": "^1.0.2",
    "jpeg-js": "^0.4.2",
    "react": "~16.11.0",
    "react-dom": "~16.11.0",
    "react-native": "https://github.com/expo/react-native/archive/sdk-38.0.2.tar.gz",
    "react-native-fs": "^2.16.6",
    "react-native-gesture-handler": "~1.6.0",
    "react-native-reanimated": "~1.9.0",
    "react-native-safe-area-context": "~3.0.7",
    "react-native-screens": "~2.9.0",
    "react-native-web": "~0.11.7"
&lt;/denchmark-code&gt;

Describe the current behavior
I wanted to incorporate BlazeFace but the moment I installed it TensorCamera stopped working. I uninstalled it and went back to the old dependencies and still won't work. It was working perfectly fine before I installed BlazeFace
Describe the expected behavior
Able to return tensors from Camera Stream.
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/CodePen/any notebook.
&lt;denchmark-code&gt;  useEffect(() =&gt; {
    if (!isTFReady) {
      (async () =&gt; {
        try {
          const { status } = await Camera.requestPermissionsAsync().catch(e =&gt;
            console.log(e)
          );
          setHasPermission(status === "granted");
          await tf.ready().catch(e =&gt; console.log(e));
          setTFReady(true);
          setModelLoaded(await loadModel());
        } catch (e) {
          console.log("Error in 1st useEffect()");
        }
      })();
    }
  }, []);


  const getPrediction = async tensor =&gt; {
    if (!tensor) {
      console.log("Tensor not found!");
      return;
    }
    const model = await loadedModel;
    const prediction = model.predict(tensor.reshape([1, 224, 224, 3]));
    if (!prediction || prediction.length === 0) {
      console.log("No prediction available");
      return;
    }
    // Make predictions.
    const preds = prediction.dataSync();
    let awareness = "";
    preds.forEach((pred, i) =&gt; {
      //console.log(`x: ${i}, pred: ${pred}`);
      if (pred &gt; 0.9) {
        if (i === 0) {
          awareness = "0";
        }
        if (i === 1) {
          awareness = "10";
        }
        if (i === 2) {
          awareness = "5";
        }
        console.log(`Awareness level ${awareness} Probability : ${pred}`);
        setModelPrediction({ prediction: pred, class_: i });
      }
    });

    // Only take the predictions with a probability of 30% and greater //Stop looping
    cancelAnimationFrame(requestAnimationFrameId);
    //setPredictionFound(true);
    //setModelPrediction(prediction[0].className);
    tensor.dispose();
  };

  // Handling the camera input and converting it into tensors to be used in the
  // model for predictions
  const handleCameraStream = imageAsTensors =&gt; {
    const verbose = true;
    //console.log("Tensor input 1");
    if (!imageAsTensors) {
      console.log("Image not found!");
      return;
    }
    const loop = async () =&gt; {
      if (loadedModel !== null) {
        if (frameCount % makePredictionsEveryNFrames === 0) {
          const imageTensor = imageAsTensors.next().value;
          //console.log("Tensor input 2");
          //tf.print(imageTensor, verbose);
          await getPrediction(imageTensor).catch(e =&gt; console.log(e));
        }
      }

      frameCount += 1;
      frameCount = frameCount % makePredictionsEveryNFrames;
      requestAnimationFrameId = requestAnimationFrame(loop);
    };
    //loop infinitely to constantly make predictions
    loop();
  };

  // Load the model from the models folder
  const loadModel = async () =&gt; {
    const model = await tf
      .loadLayersModel(bundleResourceIO(modelJSON, modelWeights))
      .catch(e =&gt; console.log(e));
    console.log("Model loaded!");
    return model;
  };

return (
    &lt;View style={{ flex: 1 }}&gt;
      &lt;TensorCamera
        style={styles.camera}
        type={type}
        cameraTextureHeight={textureDims.height}
        cameraTextureWidth={textureDims.width}
        resizeHeight={224}
        resizeWidth={224}
        resizeDepth={3}
        onReady={images =&gt; handleCameraStream(images)}
        autorender={AUTORENDER}
      /&gt;
)
&lt;/denchmark-code&gt;

Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
Error on console
&lt;denchmark-code&gt;[Unhandled promise rejection: TypeError: func is not a function. (In 'func()', 'func' is false)]
- node_modules/@tensorflow/tfjs-backend-webgl/dist/tf-backend-webgl.node.js:326:0 in callAndCheck
* http://192.168.43.112:19001/node_modules/expo/AppEntry.bundle?platform=android&amp;dev=true&amp;minify=false&amp;hot=false:239732:45 in createProgramObjects
- node_modules/@tensorflow/tfjs-react-native/dist/camera/camera_webgl_util.js:227:49 in drawTextureProgram
- node_modules/@tensorflow/tfjs-react-native/dist/camera/camera_webgl_util.js:108:47 in drawTexture
- node_modules/@tensorflow/tfjs-react-native/dist/camera/camera.js:173:4 in renderToGLView
- node_modules/@tensorflow/tfjs-react-native/dist/camera/camera_stream.js:241:39 in renderFunc
* [native code]:null in renderFunc
- node_modules/@tensorflow/tfjs-react-native/dist/camera/camera_stream.js:195:35 in renderLoop
* http://192.168.43.112:19001/node_modules/expo/AppEntry.bundle?platform=android&amp;dev=true&amp;minify=false&amp;hot=false:240101:30 in onGLContextCreate$
- node_modules/regenerator-runtime/runtime.js:63:36 in tryCatch
- node_modules/regenerator-runtime/runtime.js:293:29 in invoke
- node_modules/regenerator-runtime/runtime.js:63:36 in tryCatch
- node_modules/regenerator-runtime/runtime.js:154:27 in invoke
- node_modules/regenerator-runtime/runtime.js:164:18 in PromiseImpl.resolve.then$argument_0
- node_modules/promise/setimmediate/core.js:37:13 in tryCallOne
- node_modules/promise/setimmediate/core.js:123:24 in setImmediate$argument_0
- node_modules/react-native/Libraries/Core/Timers/JSTimers.js:135:14 in _callTimer
- node_modules/react-native/Libraries/Core/Timers/JSTimers.js:183:16 in _callImmediatesPass
- node_modules/react-native/Libraries/Core/Timers/JSTimers.js:446:30 in callImmediates
* [native code]:null in callImmediates
- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:396:6 in __callImmediates
- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:144:6 in __guard$argument_0
- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:373:10 in __guard
- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:143:4 in flushedQueue
* [native code]:null in flushedQueue
* [native code]:null in invokeCallbackAndReturnFlushedQueue
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='yudhiesh' date='2020-09-13T03:04:30Z'>
		I upgraded Web-gl and it worked
		</comment>
		<comment id='2' author='yudhiesh' date='2020-09-13T03:04:32Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tfjs/issues/3912&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tfjs/issues/3912&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='yudhiesh' date='2020-09-22T18:00:33Z'>
		@yudhiesh1997

I upgraded Web-gl and it worked

Which package specifically did you upgrade?
		</comment>
		<comment id='4' author='yudhiesh' date='2020-09-23T04:32:18Z'>
		
@yudhiesh1997

I upgraded Web-gl and it worked

Which package specifically did you upgrade?

I ran yarn upgrade @tensorflow/tfjs-backend-webgl
It was previously 1.22.5 then got upgraded to 2.0.0.
The latest version is 2.4.0 but I tried it and upgraded all my other dependencies but the same issue persisted. So my tensorflow versions are:
&lt;denchmark-code&gt;        "@tensorflow/tfjs": "^2.0.0",
        "@tensorflow/tfjs-backend-webgl": "2.0.0",
        "@tensorflow/tfjs-converter": "^1.5.2",
        "@tensorflow/tfjs-core": "2.0.0",
        "@tensorflow/tfjs-react-native": "^0.3.0"
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='yudhiesh' date='2020-09-29T10:32:10Z'>
		I had to enforce "@tensorflow/tfjs": "2.0.0" otherwise it throwed warnings about already registered kernel for webgl backend
		</comment>
	</comments>
</bug>