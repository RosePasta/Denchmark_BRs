<bug id='288' author='atanasster' open_date='2018-05-11T14:53:07Z' closed_time='2018-05-14T14:54:58Z'>
	<summary>Activation serialization in production mode minified</summary>
	<description>
When I have 6.0.1 installed, the model.getConfig() serializes the activation function as a single letter character.
ie:
&lt;denchmark-code&gt;"className": "LSTM",
      "config": {
        "units": 4,
        "activation": "p", &lt;- this is sigmoid
        "useBias": true,
        "kernelInitializer": {
          "className": "VarianceScaling",
&lt;/denchmark-code&gt;

the same code on 5.6.0:
&lt;denchmark-code&gt;className": "LSTM",
      "config": {
        "units": 4,
        "activation": "sigmoid",
        "useBias": true,
        "kernelInitializer": {
          "className": "VarianceScaling",
&lt;/denchmark-code&gt;

similar for other activation functions. "activation": "linear", -&gt; "activation": "f",
	</description>
	<comments>
		<comment id='1' author='atanasster' date='2018-05-11T16:01:44Z'>
		Which package are these version numbers referring to?
		</comment>
		<comment id='2' author='atanasster' date='2018-05-11T16:07:35Z'>
		thanks &lt;denchmark-link:https://github.com/davidsoergel&gt;@davidsoergel&lt;/denchmark-link&gt;
 for looking into this:

		</comment>
		<comment id='3' author='atanasster' date='2018-05-11T16:22:41Z'>
		That's the version of npm, not the version of tfjs.  Try
npm list @tensorflow/tfjs
The current version is 0.10.3; if the error manifests there then it's likely a bug.  I'm looking into it here but still it would be helpful to know which tfjs version you see this in.  Thanks!
		</comment>
		<comment id='4' author='atanasster' date='2018-05-11T16:27:37Z'>
		oops, you are right, haven't been sleeping much the last couple of days. Actually I have the same version @tensorflow/tfjs@0.10.3 both on the server and dev machine. No idea what other lib could be the reason, I am mostly synced with my heroku server.
It might help to try it out yourself for this and the issue for WebGL, here is a link to the site:
&lt;denchmark-link:https://crypto-grommet.com/models/playground&gt;https://crypto-grommet.com/models/playground&lt;/denchmark-link&gt;

I have removed the check for Safari, so it should fail running the default model with LSTM
If you do run a model (ie on Chrome) and go to history, and then click on expand button, it gives the getConfig of the full model.
		</comment>
		<comment id='5' author='atanasster' date='2018-05-11T16:40:29Z'>
		another difference I can think of is that the heroku server does not have a GPU, while my dev is a MacBook Pro with a GPU. no idea why this could affect getConfig
		</comment>
		<comment id='6' author='atanasster' date='2018-05-11T17:51:11Z'>
		Let's back up a couple of steps.  What are these two environments?  On your local dev machine, I imagine you build your app with webpack and then load up the resulting html+js in a browser, so TF.js is part of the bundle and runs in the browser.  On the Heroku side, you're rebuilding the app on the server, as opposed to just statically hosting the webpacked app?  Is there some magic happening whereby the TF.js part runs on the Heroku server under Node, not in the browser?
Since there seems to be a mysterious difference, let's a) consider whether you really need two different build environments at all, and b) wipe out node_modules and rebuild from scratch to be sure everything is in sync and up to date.  You can diff the two package_lock.json files (or yarn.lock, if using yarn instead of npm) to be sure there's no discrepancy.
		</comment>
		<comment id='7' author='atanasster' date='2018-05-11T18:01:39Z'>
		Activations use a different code path for serialization than just about anything else, and this sounds like a minification problem.
		</comment>
		<comment id='8' author='atanasster' date='2018-05-11T18:03:56Z'>
		Sorry, I didnt give enough background.
I am building with nextjs(webpack is under the covers) and on my local machine in dev mode and with nextjs with hot reloading
On the server, I am using a production build and then serving from a nodejs 10.0 server
&lt;denchmark-link:https://github.com/ericdnielsen&gt;@ericdnielsen&lt;/denchmark-link&gt;
 might be onto something with the minification
		</comment>
		<comment id='9' author='atanasster' date='2018-05-11T18:06:18Z'>
		and the shortened names seem consistent - always 'p' for sigmoid, 'f' for linear etc.
		</comment>
		<comment id='10' author='atanasster' date='2018-05-11T18:51:23Z'>
		&lt;denchmark-link:https://github.com/ericdnielsen&gt;@ericdnielsen&lt;/denchmark-link&gt;
 was spot on, I tried on my dev machine creating a production build and had the same serialization issue. Sorry for the red herring with the versions, I changed the title of the issue
		</comment>
		<comment id='11' author='atanasster' date='2018-05-11T19:04:18Z'>
		Working on a fix, but probably won't have it until next week.
		</comment>
		<comment id='12' author='atanasster' date='2018-05-11T20:44:50Z'>
		Thanks, since we are just reporting issues here, wanted to tell evveryone what a fantastic job you have done. Its a game changer and is very much appreciated
		</comment>
		<comment id='13' author='atanasster' date='2018-05-14T14:54:58Z'>
		Fix has been merged:
&lt;denchmark-link:https://github.com/tensorflow/tfjs-layers/pull/176&gt;tensorflow/tfjs-layers#176&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>