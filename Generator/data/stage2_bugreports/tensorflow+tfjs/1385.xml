<bug id='1385' author='kedevked' open_date='2019-03-14T23:18:17Z' closed_time='2019-03-19T04:04:56Z'>
	<summary>CosineProximity loss function throwing error</summary>
	<description>
To get help from the community, we encourage using Stack Overflow and the &lt;denchmark-link:https://stackoverflow.com/questions/tagged/tensorflow.js&gt;tensorflow.js&lt;/denchmark-link&gt;
 tag.
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

1.0.1
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

chrome 71
&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

Cosine proximity loss function is throwing a shape mismatch error
&lt;denchmark-h:h4&gt;Code to reproduce the bug / link to feature request&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;(async() =&gt; {
  model = tf.sequential();
model.add(tf.layers.dense({units: 1, inputShape: [1], activation: 'relu', kernelInitializer:'ones'}));

model.compile({loss: 'cosineProximity', optimizer: 'sgd'});

    // Train
    const logs = await model.fit(tf.ones([4, 1]), tf.ones([4, 1]), {epochs: 10});
    console.log(logs)
})()
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='kedevked' date='2019-03-15T13:59:07Z'>
		I took a few minutes looking at this, and I think the issue is that  actually isn't a loss function, but a metric (see &lt;denchmark-link:https://js.tensorflow.org/api/latest/#metrics.cosineProximity&gt;https://js.tensorflow.org/api/latest/#metrics.cosineProximity&lt;/denchmark-link&gt;
 ). Metrics aren't meant to be used as error functions and don't have to be differentiable, I think.
Instead of cosineProximity you can use cosineDistance like so:
&lt;denchmark-code&gt;model.compile({loss: tf.losses.cosineDistance, optimizer: 'sgd'});,
&lt;/denchmark-code&gt;

You can't use it by name (eg loss: "cosineDistance") and I'm not sure why. It feels a bit backwards that using  loss: "cosineProximity" compiles but breaks during fitting, while the cosineDistance works but can't be found by name.
		</comment>
		<comment id='2' author='kedevked' date='2019-03-15T14:54:52Z'>
		Looks like this is a holdover from @keras-team/keras here:
&lt;denchmark-link:https://keras.io/losses/&gt;https://keras.io/losses/&lt;/denchmark-link&gt;

Agreed TFJS should have string-level access to cosineDistance loss.
It would need to be added here:
&lt;denchmark-link:https://github.com/tensorflow/tfjs-layers/blob/1f32448ee4f0b15eccdbe45bbf4d259b5a4ef8d8/src/losses.ts#L305&gt;https://github.com/tensorflow/tfjs-layers/blob/1f32448ee4f0b15eccdbe45bbf4d259b5a4ef8d8/src/losses.ts#L305&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='kedevked' date='2019-03-15T14:55:50Z'>
		cc &lt;denchmark-link:https://github.com/caisq&gt;@caisq&lt;/denchmark-link&gt;
 &amp; &lt;denchmark-link:https://github.com/davidsoergel&gt;@davidsoergel&lt;/denchmark-link&gt;
 for opinion on whether this should be added.
It would also need to be added to the keras_format spec here:
&lt;denchmark-link:https://github.com/tensorflow/tfjs-layers/blob/master/src/keras_format/loss_config.ts&gt;https://github.com/tensorflow/tfjs-layers/blob/master/src/keras_format/loss_config.ts&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='kedevked' date='2019-03-15T17:14:16Z'>
		Hey, I just wanted to point out that the function already exists but is incorrectly implemented. I fixed this issue by myself now, and that the fix can be merged via &lt;denchmark-link:https://github.com/tensorflow/tfjs-layers/pull/499&gt;tensorflow/tfjs-layers#499&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='kedevked' date='2019-03-19T04:04:56Z'>
		The confusion here is that tfjs-core provides some 'losses' (but no 'metrics' per se), and tfjs-layers provides a partly-overlapping set of 'losses' and 'metrics'.  Only the tfjs-layers ones are expected to be referenceable by string names such as .  The allowed names are defined by the Keras API (e.g., &lt;denchmark-link:https://keras.io/losses/&gt;https://keras.io/losses/&lt;/denchmark-link&gt;
).  Many of the tfjs-core losses are actually metrics (in the Keras terminology) so they are re-exported as tfjs-layers .
Thus, while this is all very confusing, I think we should not add cosineDistance to our representation of the Keras spec, since @keras-team/keras doesn't support it.
In combination with &lt;denchmark-link:https://github.com/tensorflow/tfjs-layers/pull/499&gt;tensorflow/tfjs-layers#499&lt;/denchmark-link&gt;
, I think that means this bug is now fixed.
		</comment>
	</comments>
</bug>