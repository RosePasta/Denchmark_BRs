<bug id='1073' author='bertlea' open_date='2019-01-09T09:04:06Z' closed_time='2019-02-04T22:30:34Z'>
	<summary>tf.sqrt() function returns wrong value on Raspberry Pi (3B+) if backend is using "webgl"</summary>
	<description>
To get help from the community, check out our &lt;denchmark-link:https://groups.google.com/a/tensorflow.org/forum/#!forum/tfjs&gt;Google group&lt;/denchmark-link&gt;
.
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

Latest (0.14.1) and also earlier versions.
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

Chromium 60.0 (included in latest Raspbian Stretch)
&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

When testing an portfolio optimization code, it works on all Intel systems but failed when tried to test on Raspberry Pi 3B+ running latest Raspbian with desktops with Chromium browser.   Tracked down the error is the tf.sqrt() function returns a very small value (very close to zero) regardless the value passed in.  This issue only occurs when the back-end is "webgl", which is the default back-end in that environment.  When force to use "cpu", the issue is gone.
Work-around is available as I found I can use tf.pow(tf.scalar(0.5)) instead.  Which gives a value close to the correct value with slightly precision issue compare to using Intel systems or using "cpu" back-end.
&lt;denchmark-h:h4&gt;Code to reproduce the bug / link to feature request&lt;/denchmark-h&gt;

A simple HTML can test that:
&lt;denchmark-code&gt;&lt;html&gt;
&lt;head&gt;
	&lt;script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.14.1/dist/tf.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;script&gt;
		const backend = tf.getBackend();
		console.log('calulation enginee: ' + backend);
		document.write('calulation enginee: ' + backend + '&lt;p&gt;');
		const n = tf.scalar(9);
		const ans = n.sqrt().dataSync()[0];
		console.log('answer of square root of 9 = ' + ans);
		document.write('answer of square root of 9 = ' + ans + '&lt;p&gt;');
	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;/denchmark-code&gt;

If the code is not formatted right, you can see how to reproduce it from a post I posted to Raspberry Pi forum:  &lt;denchmark-link:https://www.raspberrypi.org/forums/viewtopic.php?f=63&amp;t=230632&amp;p=1412807#p1412807&gt;https://www.raspberrypi.org/forums/viewtopic.php?f=63&amp;t=230632&amp;p=1412807#p1412807&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='bertlea' date='2019-01-24T21:28:26Z'>
		&lt;denchmark-link:https://github.com/nkreeger&gt;@nkreeger&lt;/denchmark-link&gt;
, curious if you've experienced similar precision issues with your Raspberry Pi work?
		</comment>
		<comment id='2' author='bertlea' date='2019-01-24T21:29:27Z'>
		&lt;denchmark-link:https://github.com/bertlea&gt;@bertlea&lt;/denchmark-link&gt;
 Can you

visit the http://webglreport.com/ using the browser in the Raspberry Pi, take a screenshot of both tabs ("WebGL1" and "WebGL2") and share it here?
also a screenshot of this page: http://js.tensorflow.org/debug

Thanks!
		</comment>
		<comment id='3' author='bertlea' date='2019-01-25T05:22:21Z'>
		&lt;denchmark-link:https://github.com/bertlea&gt;@bertlea&lt;/denchmark-link&gt;
 are you using the experimental GL driver (enabled in raspi-config)?
		</comment>
		<comment id='4' author='bertlea' date='2019-01-30T11:10:52Z'>
		Sorry for the late reply.
&lt;denchmark-link:https://github.com/nkreeger&gt;@nkreeger&lt;/denchmark-link&gt;
 , no I am using the default "Legacy" non-GL driver.
&lt;denchmark-link:https://github.com/dsmilkov&gt;@dsmilkov&lt;/denchmark-link&gt;
 , I got the screenshots.  Basically it seems only WebGL 1 is supported and your debug link seems returns correct sqrt results.
WebGL1:
&lt;denchmark-link:https://user-images.githubusercontent.com/33945286/51977443-7499c280-24c2-11e9-878f-beb27fed3e1a.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/33945286/51977450-79f70d00-24c2-11e9-8109-70923421d7d1.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/33945286/51977505-a01cad00-24c2-11e9-9118-14aa21044c1d.png&gt;&lt;/denchmark-link&gt;

WebGL2:
&lt;denchmark-link:https://user-images.githubusercontent.com/33945286/51977550-b3c81380-24c2-11e9-8e59-4b4187e84adf.png&gt;&lt;/denchmark-link&gt;

Debug link:
&lt;denchmark-link:https://user-images.githubusercontent.com/33945286/51977567-bcb8e500-24c2-11e9-838a-b2fb40e2b1f2.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='bertlea' date='2019-01-30T12:52:04Z'>
		Just tried to switch to the "experimental" GL driver": OpenGL full KMS and that resolved the issue.  So the bug exists only when using the default Legacy Original non-GL desktop driver.
		</comment>
		<comment id='6' author='bertlea' date='2019-02-04T22:30:34Z'>
		It seems like this is a bug in the driver, which is out of our control, thus closing this issue.
		</comment>
		<comment id='7' author='bertlea' date='2019-02-04T22:52:17Z'>
		&lt;denchmark-link:https://github.com/bertlea&gt;@bertlea&lt;/denchmark-link&gt;
 Yes the legacy driver is software-rendering only. Also note that the experimental driver does not support half-float textures (yet) and most of TF.js will not work w/o the minimum requirement of half-float textures (OES_texture_half_float).
		</comment>
		<comment id='8' author='bertlea' date='2019-02-05T02:08:56Z'>
		Thank you for confirming the cause.  So when tf.js reports it is using 'webgl', it may not actually using the GPU.  The bug in the driver should be a separate issue.
		</comment>
	</comments>
</bug>