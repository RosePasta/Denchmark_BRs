<bug id='1062' author='ghost(ghost)' open_date='2019-01-02T23:51:37Z' closed_time='2019-01-03T01:34:01Z'>
	<summary>Scaling images results in values being clipped to zero</summary>
	<description>
Update:
I tried this on another windows machine and it worked without issues. So, this might be an issue specific to my machine if no one else can replicate.
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

0.14.1
It looks like this bug was introduced from 0.13.1 -&gt; 0.13.2.
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

Chrome and Firefox for Windows 10 (Other operating systems seem to work as expected)
&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

Scaling an image of any size to a size of about 128,128 will clip some values to zero. This happens using tf.image.resizeNearestNeighbor as well as with a model which has any step using tf.layers.upSampling2d or tf.layers.maxPooling2d.
&lt;denchmark-link:https://user-images.githubusercontent.com/835870/50617913-27bbcf80-0eb5-11e9-8931-7559826ba8bf.png&gt;&lt;/denchmark-link&gt;

scaled up to [128,128] becomes:
&lt;denchmark-link:https://user-images.githubusercontent.com/835870/50617923-34402800-0eb5-11e9-84fb-fffab9310314.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h4&gt;Code to reproduce the bug / link to feature request&lt;/denchmark-h&gt;

Scaling up using resizeNearestNeighbor :
&lt;denchmark-code&gt;&lt;canvas id="input" height=200 width=64&gt;&lt;/canvas&gt;
&lt;canvas id="output" height=120 width=120&gt;&lt;/canvas&gt;

&lt;script&gt;
	input_canv = document.getElementById('input');
	
	randPix = tf.randomUniform([200,64,3],0,255, 'int32');
	
	tf.toPixels(randPix,input_canv)
						
	output_canv = document.getElementById('output')
	
	tf.toPixels(randPix.resizeNearestNeighbor([120,120]),output_canv);
&lt;/script&gt;
&lt;/denchmark-code&gt;

Scaling down using maxPooling2d :
&lt;denchmark-code&gt;&lt;canvas id="input" height=256 width=256&gt;&lt;/canvas&gt;
&lt;canvas id="output" height=128 width=128&gt;&lt;/canvas&gt;

&lt;script&gt;
	input_canv = document.getElementById('input');
	
	randPix = tf.randomUniform([256,256,3],0,255, 'int32');
	
	tf.toPixels(randPix,input_canv)

	encoder_model = tf.sequential();
	
	encoder_model.add(tf.layers.maxPooling2d({
		inputShape: [256,256,3],
		size: [2,2]
	}));

	scaled = encoder_model.predict(randPix.expandDims(0));
						
	output_canv = document.getElementById('output')
	
	tf.toPixels(scaled.squeeze().asType('int32'),output_canv);
	
&lt;/script&gt;
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ghost(ghost)' date='2019-01-03T01:34:01Z'>
		I tried this on some other devices and was unable to replicate the issue. I think it's safe to say this is an issue specific to my working laptop, caused by something outside of tfjs. I'll go ahead and close this issue, sorry for any inconvenience.
		</comment>
		<comment id='2' author='ghost(ghost)' date='2019-02-28T06:47:33Z'>
		Have you used four generations of Intel CPUs?
		</comment>
	</comments>
</bug>