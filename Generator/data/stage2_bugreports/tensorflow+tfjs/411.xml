<bug id='411' author='oxxie' open_date='2018-06-09T11:05:10Z' closed_time='2018-10-28T09:39:15Z'>
	<summary>Different results between Safari and Chrome</summary>
	<description>
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

0.11.6
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

Safari 11.1.1 / Chrome 67.0.3396.79
&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

While running the exact same script of a simple XOR-problem on both Safari and Chrome, both browsers display very different losses after Model.fit() was performed multiple times. While Chrome keeps producing smaller losses (around 0.001), Safari gets stuck at a fixed loss (around 0.25).
Suggestion: could this be a precision issue on the Safari platform?
&lt;denchmark-h:h4&gt;Code to reproduce the bug / link to feature request&lt;/denchmark-h&gt;

Nothing fancy here, but just to be sure:
&lt;denchmark-code&gt;async function trainModel() {
  const h = await model.fit(trainingData.X, trainingData.Y, trainingConfig);
  console.log(h.history.loss[0]);
}
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='oxxie' date='2018-06-11T16:38:58Z'>
		Thanks &lt;denchmark-link:https://github.com/oxxie&gt;@oxxie&lt;/denchmark-link&gt;
 ,
Is it possible to share a very small test case, including possibly simulated or hard-coded data, that replicates the problem?
		</comment>
		<comment id='2' author='oxxie' date='2018-06-11T21:13:47Z'>
		Sure, here goes:
&lt;denchmark-code&gt;const model = tf.sequential();

const trainingData = {
  x: tf.tensor2d([[0, 0], [0, 1], [1, 0], [1, 1]]),
  y: tf.tensor2d([[0], [1], [1], [0]])
}

async function trainModel() {
  const h = await model.fit(trainingData.x, trainingData.y);
  console.log(h.history.loss[0]);
}

model.add(tf.layers.dense({units: 2, activation: 'sigmoid', inputShape: [2]}));
model.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));
model.compile({optimizer: tf.train.sgd(0.1), loss: tf.losses.meanSquaredError});

setInterval(trainModel, 100);
&lt;/denchmark-code&gt;

In Chrome, this will result in ever-decreasing losses, while in Safari the loss will 'get stuck' quite fast, around 0.25 in my case.
Also, I discovered today that switching the optimizer to tf.train.adam(0.1) will result in NaN losses in Safari... I didn't check any other optimizers though.
Hope this helps, let me know if you need anything else!
		</comment>
		<comment id='3' author='oxxie' date='2018-10-26T18:17:17Z'>
		This should be fixed now, can you verify &lt;denchmark-link:https://github.com/oxxie&gt;@oxxie&lt;/denchmark-link&gt;
?
In iOS there may still be some small differences because we use float16 under the hood instead of float32, but they shouldn't be huge differences.
		</comment>
		<comment id='4' author='oxxie' date='2018-10-28T09:39:15Z'>
		Verified with TensorFlow.js version 0.13.3. Losses are now consistent between Chrome and Safari ðŸ˜€ Thanks for looking into it and the fix! Will close this issue now.
		</comment>
		<comment id='5' author='oxxie' date='2019-08-21T12:51:44Z'>
		Hi, may I know the root cause of this issue? Thanks.
		</comment>
	</comments>
</bug>