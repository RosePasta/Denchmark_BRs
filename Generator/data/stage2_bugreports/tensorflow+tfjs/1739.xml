<bug id='1739' author='jerrydeng' open_date='2019-07-12T22:06:54Z' closed_time='2019-08-21T18:56:22Z'>
	<summary>Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D</summary>
	<description>
To get help from the community, we encourage using Stack Overflow and the &lt;denchmark-link:https://stackoverflow.com/questions/tagged/tensorflow.js&gt;tensorflow.js&lt;/denchmark-link&gt;
 tag.
&lt;denchmark-h:h4&gt;TensorFlow.js version&lt;/denchmark-h&gt;

1.2.3
&lt;denchmark-h:h4&gt;Browser version&lt;/denchmark-h&gt;

Node 10.15
&lt;denchmark-h:h4&gt;Describe the problem or feature request&lt;/denchmark-h&gt;

When loading in a converted layer model, I get the following error message:
Error: Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.
The model was a variation of Xception.  It contains many SeparableConv2D layer and a few of them uses kernal_initializer.  It appeared that the tfjs version think those fields are invalid.
&lt;denchmark-h:h4&gt;Code to reproduce the bug / link to feature request&lt;/denchmark-h&gt;


You can reproduce by saving the Xception application model into a h5 keras model using model.save.
Convert the model into tfjs_layer_models as describe by tensorflowjs_converter website
Load it back in using tfjs
const tf = require("@tensorflow/tfjs"); const tfn = require("@tensorflow/tfjs-node"); const handler = tfn.io.fileSystem("./layer_model/model.json"); const model = await tf.loadLayersModel(handler);

	</description>
	<comments>
		<comment id='1' author='jerrydeng' date='2019-07-16T14:31:24Z'>
		Until this is resolved, I found a temporary work around.

Save the model in your python code as tensorflow graph
print(model.outputs) tf.saved_model.simple_save( sess, export_path, inputs={'input_image': model.input}, outputs={t.name: t for t in model.outputs})`
Use tensorflowjs==0.8.6 (must be this version for py3 and tf==1.12) to convert the graph model for tensorflow
tensorflowjs_converter \ --input_format=tf_saved_model \ --output_format=tensorflowjs \ --output_node_names="predictions/BiasAdd:0" \ --saved_model_tags=serve \ src \ dest
(you can find the output_node_names by print(model.outputs) from original python model

		</comment>
		<comment id='2' author='jerrydeng' date='2019-07-16T15:56:05Z'>
		It appears that the fields are technically invalid for python Keras as well:
&lt;denchmark-link:https://github.com/keras-team/keras/blob/master/keras/layers/convolutional.py#L1546&gt;https://github.com/keras-team/keras/blob/master/keras/layers/convolutional.py#L1546&lt;/denchmark-link&gt;

Probably what's happening here is that those fields are invalid, but the Python implementation is more permissive.
Proposed solution:
&lt;denchmark-link:https://github.com/pyu10055&gt;@pyu10055&lt;/denchmark-link&gt;
 should we add an option to the converter warn and strip invalid configurations rather than fail on load after conversion?
		</comment>
		<comment id='3' author='jerrydeng' date='2019-07-22T15:02:56Z'>
		The underlying implementation of Xception is directly from tf.keras.applications with no change to any ContNet.  If the use of the attributes are invalid, then the Xception implementation in tf.keras should be fixed as well.
		</comment>
		<comment id='4' author='jerrydeng' date='2019-07-22T15:04:51Z'>
		+1
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Mon, Jul 22, 2019 at 11:02 AM Jerry Deng ***@***.***&gt; wrote:
 The underlying implementation of Xception is directly from
 tf.keras.applications with no change to any ContNet. If the use of the
 attributes are invalid, then the Xception implementation in tf.keras should
 be fixed as well.

 —
 You are receiving this because you commented.


 Reply to this email directly, view it on GitHub
 &lt;#1739?email_source=notifications&amp;email_token=AAEFSTSSJU6NHAWE6GNJKT3QAXD2FA5CNFSM4ICSFLF2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD2QGZSI#issuecomment-513830089&gt;,
 or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/AAEFSTSWANUTJNKA4RC5KALQAXD2FANCNFSM4ICSFLFQ&gt;
 .



		</comment>
		<comment id='5' author='jerrydeng' date='2019-08-21T18:56:22Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='6' author='jerrydeng' date='2020-10-23T11:30:50Z'>
		Should this be closed? This is still an issue now. Is there an update on the progress of this bug?
		</comment>
		<comment id='7' author='jerrydeng' date='2020-11-26T15:12:13Z'>
		maybe this answer about the use of the layers model and graph model clarifies the priority for this issue: &lt;denchmark-link:https://stackoverflow.com/a/63621486/3866264&gt;https://stackoverflow.com/a/63621486/3866264&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>