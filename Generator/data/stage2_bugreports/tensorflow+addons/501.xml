<bug id='501' author='DawyD' open_date='2019-09-11T09:01:25Z' closed_time='2019-09-20T14:46:38Z'>
	<summary>image.rotate - non constant angles - error</summary>
	<description>
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): linux x86_64
TensorFlow version and how it was installed (source or binary): 2.0.0-rc0 (pip)
TensorFlow-Addons version and how it was installed (source or binary): 0.5.0 (pip)
Python version: 3.5
Is GPU used? (yes/no): yes

Describe the bug
When using image.rotate in GradientTape() with non-constant angles, the program fails on:
F tensorflow/core/kernels/cuda_solvers.cc:99] Check failed: cublasCreate(&amp;cublas_handle) == CUBLAS_STATUS_SUCCESS Failed to create cuBlas instance.
or on the similar error for cuDNN.
When using constant angles, or when using for inference only, everything works fine.
Code to reproduce the bug
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
import tensorflow_addons as tfa

class Model:
    def __init__(self):
        tf.keras.backend.clear_session()
        
        inp = tf.keras.layers.Input((32,32,3), name='input_image')
        net = tf.keras.layers.Conv2D(3, 3, padding="same")(inp)

        self.model  = tf.keras.Model(inputs=inp, outputs=net)
        self.optimizer = tf.keras.optimizers.Adam()
        self.loss_obj = tf.keras.losses.MeanSquaredError()
        
    @tf.function
    def train_step(self):        
        angles_rad = tf.random.uniform((), 0, 3.14)
        images = tf.random.uniform((2,32,32,3))

        with tf.GradientTape() as tape:
            features = self.model(images, training=True)

            #angles_rad = tf.constant([0.5,0.4])
            rot_features = tfa.image.rotate(features, angles_rad, interpolation='NEAREST', name="rotate_features")
            
            loss = self.loss_obj(images, rot_features)

        variables = self.model.trainable_variables
        gradients = tape.gradient(loss, variables)
        self.optimizer.apply_gradients(zip(gradients, variables))
        return loss
    
    def train(self, nr_epochs):
        for epoch in range(nr_epochs):
            loss = self.train_step()
            print("Train Epoch {}: {}".format(epoch, loss))

trainer = Model()
trainer.train(5000)
&lt;/denchmark-code&gt;

Other info / logs
&lt;denchmark-code&gt;2019-09-11 11:07:18.766919: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2019-09-11 11:07:18.853782: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2019-09-11 11:07:18.867050: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties:
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.545
pciBusID: 0000:3b:00.0
2019-09-11 11:07:18.867099: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2019-09-11 11:07:18.870401: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2019-09-11 11:07:18.873695: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10.0
2019-09-11 11:07:18.875459: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10.0
2019-09-11 11:07:18.878891: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10.0
2019-09-11 11:07:18.881852: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10.0
2019-09-11 11:07:18.888517: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2019-09-11 11:07:18.889686: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2019-09-11 11:07:18.890002: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 AVX512F FMA
2019-09-11 11:07:18.898492: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 3200000000 Hz
2019-09-11 11:07:18.900413: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x55f5e15ea9b0 executing computations on platform Host. Devices:
2019-09-11 11:07:18.900437: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): Host, Default Version
2019-09-11 11:07:19.018497: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x55f5e164dc00 executing computations on platform CUDA. Devices:
2019-09-11 11:07:19.018550: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): GeForce RTX 2080 Ti, Compute Capability 7.5
2019-09-11 11:07:19.019402: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties:
name: GeForce RTX 2080 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.545
pciBusID: 0000:3b:00.0
2019-09-11 11:07:19.019462: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2019-09-11 11:07:19.019482: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2019-09-11 11:07:19.019493: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10.0
2019-09-11 11:07:19.019504: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10.0
2019-09-11 11:07:19.019515: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10.0
2019-09-11 11:07:19.019526: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10.0
2019-09-11 11:07:19.019538: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2019-09-11 11:07:19.020765: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2019-09-11 11:07:19.039696: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-09-11 11:07:19.039722: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0
2019-09-11 11:07:19.039732: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N
2019-09-11 11:07:19.041010: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 10310 MB memory) -&gt; physical GPU (device: 0, name: GeForce RTX 2080 Ti, pci bus id: 0000:3b:00.0, compute capability: 7.5)
2019-09-11 11:07:21.359264: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2019-09-11 11:07:22.908485: E tensorflow/stream_executor/cuda/ptxas_utils.cc:110] You are using ptxas 8.x, but TF requires ptxas 9.x (and strongly prefers &gt;= 9.2.88).  Compilation of XLA kernels below will likely fail.

You do not need to update CUDA; cherry-picking the ptxas binary is sufficient.
2019-09-11 11:07:22.975660: W tensorflow/stream_executor/cuda/redzone_allocator.cc:312] Internal: ptxas exited with non-zero error code 65280, output: ptxas fatal   : Value 'sm_75' is not defined for option 'gpu-name'

Relying on driver to perform ptx compilation. This message will be only logged once.
2019-09-11 11:07:24.903709: I tensorflow/core/kernels/cuda_solvers.cc:159] Creating CudaSolver handles for stream 0x55f5e17166b0
2019-09-11 11:07:24.903789: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10.0
2019-09-11 11:07:25.231420: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2019-09-11 11:07:25.450486: F tensorflow/core/kernels/cuda_solvers.cc:99] Check failed: cublasCreate(&amp;cublas_handle) == CUBLAS_STATUS_SUCCESS Failed to create cuBlas instance.
Aborted (core dumped)
&lt;/denchmark-code&gt;

Edit:
The solution with the constant angles, however, does not work in tf.map_fn function.
&lt;denchmark-code&gt;@tf.function
def rot_30(features):
        return  tfa.image.rotate(features, tf.constant(m.pi/6), interpolation='BILINEAR', name="rotate_features2")
&lt;/denchmark-code&gt;

The following code in the Model.train_step also leads to the same error:
&lt;denchmark-code&gt;rot_features = tf.map_fn(lambda x: Model.rot_30(x), features,
                                         dtype=features.dtype, parallel_iterations=None, back_prop=True, name="batch_rot_features")
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='DawyD' date='2019-09-19T17:26:39Z'>
		Sorry for the late response. I cannot reproduce the bug. Seems that your CUDA version is too old to execute the code successfully. Feel free to ping us if you have further questions.
&lt;denchmark-link:https://colab.research.google.com/drive/1XTBi5SC79N0yiRClst0-bLjf5I8lCAW8&gt;https://colab.research.google.com/drive/1XTBi5SC79N0yiRClst0-bLjf5I8lCAW8&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='DawyD' date='2019-09-20T14:46:38Z'>
		Closing. Please feel free to re-open if the issue is un-related to CUDA version. We only support CUDA 10.0 at the moment.
		</comment>
		<comment id='3' author='DawyD' date='2019-10-07T13:41:09Z'>
		It truly does seem to be a CUDA related error.
The key to the problem seems to be these two lines:
Successfully opened dynamic library libcudart.so.10.0
You are using ptxas 8.x, but TF requires ptxas 9.x (and strongly prefers &gt;= 9.2.88).
Both the $PATH and $LD_LIBRARY_PATH are set to use cuda 10.0
Typing ptxas --version shows me:
Cuda compilation tools, release 10.0, V10.0.145
Why is it that TF tries to run a ptxas of version 8.0 instead 10.0?
(there is a instalation of cuda 8.0 in my /usr/local/cuda/ which I am not using)
		</comment>
		<comment id='4' author='DawyD' date='2019-10-08T09:11:31Z'>
		Hi, David. Could you open an issue for &lt;denchmark-link:https://github.com/tensorflow/tensorflow&gt;tf&lt;/denchmark-link&gt;
? I believe we could get more help/support about installing environment there.
		</comment>
		<comment id='5' author='DawyD' date='2019-10-15T13:34:55Z'>
		&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/33375&gt;tensorflow/tensorflow#33375&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>