<bug id='250' author='seanpmorgan' open_date='2019-05-17T15:26:19Z' closed_time='2019-05-18T02:21:23Z'>
	<summary>New SelectV2 is causing nightly failures</summary>
	<description>
Since &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/01207a94c627a1bc02e85ab260fcd16c78a0e8da&gt;tensorflow/tensorflow@01207a9&lt;/denchmark-link&gt;
 we're seeing failures across a few modules for things that are not broadcastable.
I will dive in a little deeper, but I was wondering &lt;denchmark-link:https://github.com/yongtang&gt;@yongtang&lt;/denchmark-link&gt;
 if you could advise us to see if there is something obvious that needs to be changed?
&lt;denchmark-link:https://source.cloud.google.com/results/invocations/3e5ada79-f40b-4033-be80-2f52a382bd5d/targets/tensorflow_addons%2Fubuntu%2Fcpu%2Fpy2%2Fcontinuous/log&gt;https://source.cloud.google.com/results/invocations/3e5ada79-f40b-4033-be80-2f52a382bd5d/targets/tensorflow_addons%2Fubuntu%2Fcpu%2Fpy2%2Fcontinuous/log&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;  File "/tmpfs/src/github/tensorflow_addons/tf/local/lib/python2.7/site-packages/tensorflow/python/ops/array_ops.py", line 3312, in where_v2
    return gen_math_ops.select_v2(condition=condition, t=x, e=y, name=name)
  File "/tmpfs/src/github/tensorflow_addons/tf/local/lib/python2.7/site-packages/tensorflow/python/ops/gen_math_ops.py", line 9290, in select_v2
    _six.raise_from(_core._status_to_exception(e.code, message), None)
  File "/tmpfs/src/github/tensorflow_addons/tf/local/lib/python2.7/site-packages/six.py", line 737, in raise_from
    raise value
InvalidArgumentError: condition [5], then [5,7], and else [5,7] must be broadcastable [Op:SelectV2]
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='seanpmorgan' date='2019-05-17T15:37:59Z'>
		&lt;denchmark-link:https://github.com/seanpmorgan&gt;@seanpmorgan&lt;/denchmark-link&gt;
 The new where follows the same broadcast rule as numpy (and other ops in tensorflow):
&lt;denchmark-code&gt;&gt;&gt;&gt; c = np.random.rand(5)
&gt;&gt;&gt; t = np.random.rand(5, 7)
&gt;&gt;&gt; e = np.random.rand(5, 7)
&gt;&gt;&gt; np.where(c, t, e)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: shape mismatch: objects cannot be broadcast to a single shape
&lt;/denchmark-code&gt;

The following will work:
&lt;denchmark-code&gt;&gt;&gt;&gt; c = np.random.rand(7)
&gt;&gt;&gt; t = np.random.rand(5, 7)
&gt;&gt;&gt; e = np.random.rand(5, 7)
&gt;&gt;&gt; np.where(c, t, e)
array([[ 0.04187991,  0.26753897,  0.59514661,  0.79760828,  0.88163072,
         0.76875137,  0.87185519],
       [ 0.49383641,  0.9541652 ,  0.65635514,  0.90680339,  0.01328923,
         0.29056175,  0.60653385],
       [ 0.04124529,  0.2395378 ,  0.36566755,  0.27227543,  0.20361383,
         0.5402641 ,  0.39675447],
       [ 0.9076939 ,  0.66453692,  0.23566607,  0.7891645 ,  0.71989783,
         0.45527365,  0.36589332],
       [ 0.88392814,  0.587176  ,  0.0532821 ,  0.19238287,  0.24158712,
         0.60021316,  0.95759263]])
&gt;&gt;&gt; 
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='seanpmorgan' date='2019-05-20T15:24:06Z'>
		Thanks for the quick fix. I was OOO last Friday, will take a look for the tf.where issue for seq2seq.
		</comment>
	</comments>
</bug>