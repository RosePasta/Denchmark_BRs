<bug id='722' author='dominikroblek' open_date='2019-11-27T20:52:48Z' closed_time='2019-12-21T15:41:20Z'>
	<summary>tfa.layers.WeightNormalization fails with Assert when called by multiple threads</summary>
	<description>
&lt;denchmark-h:h3&gt;Issue description&lt;/denchmark-h&gt;

tfa.layers.WeightNormalization fails with the following Tensorflow assert failure when used by multiple threads (e.g., when the same layer wrapped by tfa.layers.WeightNormalization is part of two parallel execution flows in a Tensorflow graph while reusing the variables):
&lt;denchmark-code&gt;(0) Invalid argument: assertion failed: [The layer has been initialized.] [Condition x == y did not hold element-wise:] [x (discriminator/discriminator_1/n_layer_discriminator/sequential_21/grouped_conv1d_3/weight_normalization_304/cond/assert_equal_1/ReadVariableOp:0) = ] [1] [y (discriminator/discriminator_1/n_layer_discriminator/sequential_21/grouped_conv1d_3/weight_normalization_304/cond/assert_equal_1/y:0) = ] [0]
[[{{node discriminator/discriminator_1/n_layer_discriminator/sequential_21/grouped_conv1d_3/weight_normalization_304/cond/assert_equal_1/Assert/AssertGuard/Assert}}]]
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Proposed solution&lt;/denchmark-h&gt;

Add the following line of code to the tfa.layers.WeightNormalization.build function:
&lt;denchmark-code&gt;self._initialized_critical_section = tf.CriticalSection(name='initialized_mutex')
&lt;/denchmark-code&gt;

Replace g = tf.cond(self._initialized, _do_nothing, _update_weights) in the tfa.layers.WeightNormalization.call function with the following lines of code:
&lt;denchmark-code&gt;def _get_initialized_weights():
    return tf.cond(self._initialized, _do_nothing, _update_weights)
g = self._initialized_critical_section.execute(_get_initialized_weights)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='dominikroblek' date='2019-12-01T04:42:33Z'>
		Hi &lt;denchmark-link:https://github.com/dominikroblek&gt;@dominikroblek&lt;/denchmark-link&gt;
, thanks for the report! Are you willing to fill a PR and add some unittests for it? Thank you again.
		</comment>
		<comment id='2' author='dominikroblek' date='2020-02-04T13:13:05Z'>
		What I see from the assert message ([The layer has been initialized.]) - it has nothing to do with the race conditions of parallel execution. It's a "multiple initializations" problem. CriticalSection won't help. Atomic flag (test-and-set lock mechanism) should have been there. And a piece of code to reproduce the problem, in the first place.
		</comment>
	</comments>
</bug>