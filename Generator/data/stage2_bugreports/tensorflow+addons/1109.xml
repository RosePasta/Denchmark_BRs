<bug id='1109' author='georgesterpu' open_date='2020-02-19T16:13:13Z' closed_time='2020-03-13T09:46:15Z'>
	<summary>BeamSearchDecoder segmentation fault (on GPU)</summary>
	<description>
System information

OS Platform and Distribution: Manjaro Linux testing
TensorFlow version: pypi tf-nightly 2.2.0.dev20200218
TensorFlow-Addons version: pypi tfa-nightly 0.9.0.dev20200219
Python version: 3.7.6
Is GPU used? (yes/no): yes, Nvidia Titan XP

Describe the bug
Calling a BeamSearchDecoder results in a Segmentation fault (core dumped).
Code to reproduce the issue
import tensorflow as tf
import tensorflow_addons as tfa
from tensorflow.python.ops import array_ops
import os

os.environ['CUDA_VISIBLE_DEVICES'] = '0'
# os.environ['AUTOGRAPH_VERBOSITY'] = '10'

cell = tf.keras.layers.LSTMCell(3)
mechanism = tfa.seq2seq.LuongAttention(units=3)
cell = tfa.seq2seq.AttentionWrapper(
    cell=cell,
    attention_mechanism=mechanism)

embedding_layer = tf.keras.layers.Embedding(
            input_dim=3,
            output_dim=3)

decoder = tfa.seq2seq.BeamSearchDecoder(
    cell=cell,
    beam_width=10,
    embedding_fn=embedding_layer,
    maximum_iterations=8)

dataset = tf.data.Dataset.from_tensor_slices(tf.ones((100, 7, 3))).batch(2)
my_iterator = iter(dataset)

@tf.function
def decode(it):

    data = next(it)
    bs = tf.shape(data)[0]

    tiled_memory = tfa.seq2seq.tile_batch(data, multiplier=10)
    mechanism.setup_memory(tiled_memory)

    attention_state = cell.get_initial_state(batch_size=bs*10, dtype=tf.float32)

    return decoder(
        embedding=None,
        start_tokens=array_ops.fill([2], 1),
        end_token=2,
        initial_state=attention_state,
    )
print(10*'=' + ' start ' + 10*'=')
print(decode(my_iterator))
print(10*'=' + ' end ' + 10*'=')
Other info / logs
&lt;denchmark-link:https://colab.research.google.com/drive/1WNMCyMiVK4l9vce2qaWbUm0MZ-n6VJ0g&gt;Code on colab&lt;/denchmark-link&gt;

Not sure if this is related to &lt;denchmark-link:https://github.com/tensorflow/addons/issues/990&gt;#990&lt;/denchmark-link&gt;
, as the issue targets tensorflow-cpu.
In eager mode the code still crashes with the following output:
&lt;denchmark-code&gt;========== start ==========
(FinalBeamSearchDecoderOutput(predicted_ids=&lt;tf.Tensor: shape=(2, 8, 10), dtype=int32, numpy=
[...................]
========== end ==========
corrupted size vs. prev_size
Aborted (core dumped)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='georgesterpu' date='2020-02-19T16:27:29Z'>
		Does it also segfault when using the tagged releases Addons 0.8.2 and TensorFlow 2.1.0?
		</comment>
		<comment id='2' author='georgesterpu' date='2020-02-19T16:44:39Z'>
		&lt;denchmark-link:https://github.com/guillaumekln&gt;@guillaumekln&lt;/denchmark-link&gt;
 This example works (almost) with:
&lt;denchmark-code&gt;tensorflow                2.1.0                    pypi_0    pypi
tensorflow-addons         0.8.2                    pypi_0    pypi
&lt;/denchmark-code&gt;

However the snippet above returns a TypeError
&lt;denchmark-code&gt;beamsearcherror.py:39 decode  *
        return decoder(

    TypeError: __call__() missing 1 required positional argument: 'inputs'
&lt;/denchmark-code&gt;

and can be made to work by having a positional  as the first argument, instead of . &lt;denchmark-link:https://github.com/qlzh727&gt;@qlzh727&lt;/denchmark-link&gt;
 could you please help with some clarifications on this aspect ?
My internal project (soon to be publicly released) doesn't seem to work on tf 2.1, triggering the following error in training:
&lt;denchmark-code&gt;ValueError: Insufficient elements in branch_graphs[0].outputs.
    Expected: 7
    Actual: 6
&lt;/denchmark-code&gt;

which appears to be fixed in the nightlies (probably &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/7f347e6aa489e9e44f78feb4592f50d5d6bf94dc&gt;tensorflow/tensorflow@7f347e6&lt;/denchmark-link&gt;
) since the segfault occurs in evaluation, so unfortunately I cannot fall back to the tagged releases anyway.
		</comment>
		<comment id='3' author='georgesterpu' date='2020-03-13T09:46:15Z'>
		Let's close this issue as TensorFlow Addons is built against TensorFlow stable. In consequence, TensorFlow nightlies are not supported.
&lt;denchmark-link:https://github.com/tensorflow/addons/pull/1281&gt;#1281&lt;/denchmark-link&gt;
 added explicit runtime checks on the required TensorFlow version.
		</comment>
		<comment id='4' author='georgesterpu' date='2020-03-19T16:46:22Z'>
		
Let's close this issue as TensorFlow Addons is built against TensorFlow stable. In consequence, TensorFlow nightlies are not supported.
#1281 added explicit runtime checks on the required TensorFlow version.

&lt;denchmark-link:https://github.com/guillaumekln&gt;@guillaumekln&lt;/denchmark-link&gt;

When are you going to fix this?
Do you have understanding when we can see working version of BeamSearchDecoder?
		</comment>
		<comment id='5' author='georgesterpu' date='2020-03-19T16:58:58Z'>
		The issue only affects the non stable versions of TensorFlow. Can you try with TensorFlow 2.1 instead?
		</comment>
		<comment id='6' author='georgesterpu' date='2020-03-19T17:30:00Z'>
		
The issue only affects the non stable versions of TensorFlow. Can you try with TensorFlow 2.1 instead?

&lt;denchmark-link:https://github.com/guillaumekln&gt;@guillaumekln&lt;/denchmark-link&gt;

As &lt;denchmark-link:https://github.com/georgesterpu&gt;@georgesterpu&lt;/denchmark-link&gt;
 mentioned earlier BeamSearchDecoder with @tf.function doesn't work with TF2.2 nightly neither with TF 2.1.
The only difference is that in the first case error is

In second case:
&lt;denchmark-code&gt;ValueError: Insufficient elements in branch_graphs[0].outputs.
    Expected: 7
    Actual: 6
&lt;/denchmark-code&gt;

I have encountered exactly the same problem as &lt;denchmark-link:https://github.com/georgesterpu&gt;@georgesterpu&lt;/denchmark-link&gt;
 have.
I also want to add that BasicDecoder doesn't work with TF 2.1 either. Error is the same as with BeamSearchDecoder. But BasicDecoder works with TF 2.2 nightly. This makes me happy.
Now the only way to run BeamSearchDecoder as I see is to move to the TF 1, but I don't think that it is a good solution.
		</comment>
		<comment id='7' author='georgesterpu' date='2020-03-20T08:57:42Z'>
		Ok, I thought you were referring to the Segmentation fault issue. Do you mind opening a separate issue for the Insufficient elements error along with a code snippet to reproduce it?
		</comment>
	</comments>
</bug>