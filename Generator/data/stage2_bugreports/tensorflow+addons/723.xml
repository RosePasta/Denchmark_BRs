<bug id='723' author='lan2720' open_date='2019-11-28T03:23:09Z' closed_time='2019-12-20T20:35:40Z'>
	<summary>crf_log_likelihood for unsure length of inputs</summary>
	<description>
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): centos
TensorFlow version and how it was installed (source or binary): pip install tensorflow-gpu       2.0.0
TensorFlow-Addons version and how it was installed (source or binary): pip install, 0.6.0
Python version: 3.6.8
Is GPU used? (yes/no): yes

Describe the bug
Here is the code. When max_len is a specific value like 5, the running is ok. When max_len is None for unsure length, it will meet an error. My question is how to use crf_log_likelihood for unsure length input in Keras model?
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow.keras as keras
import tensorflow_addons as tfa
import tensorflow as tf

max_len = None
n_tags = 3
x = keras.layers.Input((max_len, n_tags), dtype='float32') # [batch_size, max_len, n_tags]
tag_indices = keras.layers.Input(shape=(max_len,), dtype='int32') # [batch_size, max_len]
seq_len = keras.layers.Input(shape=(1,), dtype='int32') # [batch_size, 1]
tfa.text.crf.crf_log_likelihood(inputs=x,
                                tag_indices=tag_indices,
                                sequence_lengths=tf.squeeze(seq_len, -1))
&lt;/denchmark-code&gt;

Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='lan2720' date='2019-11-28T03:27:00Z'>
		&lt;denchmark-link:https://github.com/Squadrick&gt;@Squadrick&lt;/denchmark-link&gt;
 could you check for this? Thanks!
		</comment>
		<comment id='2' author='lan2720' date='2019-11-28T04:45:32Z'>
		There's currently an open PR &lt;denchmark-link:https://github.com/tensorflow/addons/pull/697&gt;#697&lt;/denchmark-link&gt;

I'll get it up and running soon, sorry about the delay.
		</comment>
		<comment id='3' author='lan2720' date='2019-11-28T06:02:29Z'>
		&lt;denchmark-link:https://github.com/Squadrick&gt;@Squadrick&lt;/denchmark-link&gt;
 Thank you! And how about crf_loss?
The &lt;denchmark-link:https://www.tensorflow.org/guide/keras/train_and_evaluate#custom_losses&gt;custom loss&lt;/denchmark-link&gt;
 function only accepts inputs y_true and y_pred. Is any way to pass sent_length in loss in order to get log_likelihood?
&lt;denchmark-code&gt;def loss_func(y_true, y_pred, sent_length):
    log_likelihood, _ = tfa.text.crf_log_likelihood(y_pred, y_true, sent_length)
    return tf.math.reduce_mean(-log_likelihood)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='lan2720' date='2019-11-29T02:12:17Z'>
		&lt;denchmark-code&gt;import tensorflow.keras as keras
import tensorflow_addons as tfa
import tensorflow as tf
import numpy as np


class MyModel(keras.Model):
    def __init__(self, max_len, n_tags):
        super(MyModel, self).__init__()
        self.x = keras.layers.Input((max_len, n_tags), dtype='float32')  # [batch_size, max_len, n_tags]
        self.tag_indices = keras.layers.Input(shape=(max_len,), dtype='int32')  # [batch_size, max_len]
        self.seq_len = keras.layers.Input(shape=(1,), dtype='int32')  # [batch_size, 1]

        initializer = keras.initializers.GlorotUniform()
        self.transition_matrix = tf.Variable(initializer([n_tags, n_tags]), trainable=True, name="transitions")

    def call(self, inputs, training=None, mask=None):
        log_likelihood, self.transition_matrix = tfa.text.crf.crf_log_likelihood(inputs=self.x,
                                                                                 tag_indices=self.tag_indices,
                                                                                 sequence_lengths=tf.squeeze(self.seq_len, -1),
                                                                                 transition_params=self.transition_matrix)
        loss = tf.math.reduce_mean(-log_likelihood)
        self.add_loss(loss)
        return log_likelihood


class DataGenerator:
    def __init__(self, max_len, n_tags, batch_size):
        self.max_len = max_len
        self.n_tags = n_tags
        self.batch_size = batch_size

    def __iter__(self):
        while True:
            x = np.random.rand(self.batch_size, self.max_len, self.n_tags)
            tag_indices = np.zeros((self.batch_size, self.max_len)).astype('int32')
            seq_len = np.random.randint(low=1, high=self.max_len + 1, size=self.batch_size).astype('int32')
            for i in range(tag_indices.shape[0]):
                tag_indices[i][:seq_len[i]] = np.random.randint(low=self.n_tags, size=seq_len[i])
            seq_len = seq_len.reshape(-1, 1)
            yield [x, tag_indices, seq_len], None


max_len = 5
n_tags = 3
batch_size=2
dg = DataGenerator(max_len, n_tags, batch_size)
a = MyModel(max_len, n_tags)
a.compile(optimizer=keras.optimizers.Adam(), loss=None)
a.fit_generator(dg.__iter__(),
                steps_per_epoch=100,
                epochs=10)
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/Squadrick&gt;@Squadrick&lt;/denchmark-link&gt;
 Could you please check this way to get crf_loss? It meets an AttributeError: 'Tensor' object has no attribute 'numpy'. I don't know why the tensor is not EagerTensor after crf_log_likelihood.
		</comment>
		<comment id='5' author='lan2720' date='2019-12-01T15:30:05Z'>
		&lt;denchmark-link:https://github.com/lan2720&gt;@lan2720&lt;/denchmark-link&gt;
 Without seeing the stack trace I'm unsure of where  is being called... but as a quick suggestion to unblock you, try running 
When a Keras model compiles it attempts to run in graph mode for performance benefits. This is likely the reason you're seeing a non EagerTensor.
		</comment>
		<comment id='6' author='lan2720' date='2019-12-02T01:50:31Z'>
		&lt;denchmark-link:https://github.com/seanpmorgan&gt;@seanpmorgan&lt;/denchmark-link&gt;
 Thank you for your suggestion! But adding  cannot fix.
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/data/jarvixwang/Project/tf2keras/test.py", line 53, in &lt;module&gt;
    epochs=10)
  File "/data/jarvixwang/venv/tf2keras/lib64/python3.6/site-packages/tensorflow_core/python/keras/engine/training.py", line 1297, in fit_generator
    steps_name='steps_per_epoch')
  File "/data/jarvixwang/venv/tf2keras/lib64/python3.6/site-packages/tensorflow_core/python/keras/engine/training_generator.py", line 265, in model_iteration
    batch_outs = batch_function(*batch_data)
  File "/data/jarvixwang/venv/tf2keras/lib64/python3.6/site-packages/tensorflow_core/python/keras/engine/training.py", line 973, in train_on_batch
    class_weight=class_weight, reset_metrics=reset_metrics)
  File "/data/jarvixwang/venv/tf2keras/lib64/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py", line 264, in train_on_batch
    output_loss_metrics=model._output_loss_metrics)
  File "/data/jarvixwang/venv/tf2keras/lib64/python3.6/site-packages/tensorflow_core/python/keras/engine/training_eager.py", line 311, in train_on_batch
    output_loss_metrics=output_loss_metrics))
  File "/data/jarvixwang/venv/tf2keras/lib64/python3.6/site-packages/tensorflow_core/python/keras/engine/training_eager.py", line 268, in _process_single_batch
    grads = tape.gradient(scaled_total_loss, trainable_weights)
  File "/data/jarvixwang/venv/tf2keras/lib64/python3.6/site-packages/tensorflow_core/python/eager/backprop.py", line 1014, in gradient
    unconnected_gradients=unconnected_gradients)
  File "/data/jarvixwang/venv/tf2keras/lib64/python3.6/site-packages/tensorflow_core/python/eager/imperative_grad.py", line 76, in imperative_grad
    compat.as_str(unconnected_gradients.value))
  File "/data/jarvixwang/venv/tf2keras/lib64/python3.6/site-packages/tensorflow_core/python/eager/backprop.py", line 138, in _gradient_function
    return grad_fn(mock_op, *out_grads)
  File "/data/jarvixwang/venv/tf2keras/lib64/python3.6/site-packages/tensorflow_core/python/ops/math_grad.py", line 199, in _SumGrad
    output_shape_kept_dims = math_ops.reduced_shape(input_shape, op.inputs[1])
  File "/data/jarvixwang/venv/tf2keras/lib64/python3.6/site-packages/tensorflow_core/python/ops/math_ops.py", line 3490, in reduced_shape
    input_shape = input_shape.numpy()
AttributeError: 'Tensor' object has no attribute 'numpy'

Process finished with exit code 1
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='lan2720' date='2019-12-20T20:35:40Z'>
		Closing this issue, since it's a duplicate of &lt;denchmark-link:https://github.com/tensorflow/addons/issues/694&gt;#694&lt;/denchmark-link&gt;
. &lt;denchmark-link:https://github.com/lan2720&gt;@lan2720&lt;/denchmark-link&gt;
 Please create a separate issue for the problem you are facing.
		</comment>
	</comments>
</bug>