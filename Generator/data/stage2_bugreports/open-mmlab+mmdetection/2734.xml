<bug id='2734' author='mangdian' open_date='2020-05-16T03:21:42Z' closed_time='2020-05-19T07:53:44Z'>
	<summary>IndexError in pycocotools</summary>
	<description>
Thanks for your error report and we appreciate it a lot.
Describe the bug
When running the image_demo.py, I get an error about numpy index.
Reproduction
&lt;denchmark-code&gt;python demo/image_demo.py demo/demo.jpg configs/mask_rcnn/mask_rcnn_r50_fpn_1x_coco.py     checkpoints/mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth --device cpu

&lt;/denchmark-code&gt;

Environment
`ys.platform: linux
Python: 3.7.4 (default, Aug 13 2019, 20:35:49) [GCC 7.3.0]
CUDA available: True
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.0, V10.0.130
GPU 0: GeForce GTX 1080 Ti
GCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609
PyTorch: 1.4.0
PyTorch compiling details: PyTorch built with:

GCC 7.3
Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)
OpenMP 201511 (a.k.a. OpenMP 4.5)
NNPACK is enabled
CUDA Runtime 10.1
NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
CuDNN 7.6.3
Magma 2.5.1
Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF,

TorchVision: 0.5.0
OpenCV: 4.2.0
MMCV: 0.5.4
MMDetection: 2.0.0+unknown
MMDetection Compiler: GCC 5.4
MMDetection CUDA Compiler: 10.0
Error traceback
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "demo/image_demo.py", line 26, in &lt;module&gt;
    main()
  File "demo/image_demo.py", line 22, in main
    show_result_pyplot(model, args.img, result, score_thr=args.score_thr)
  File "/root/mmdetection-master/mmdet/apis/inference.py", line 146, in show_result_pyplot
    img = model.show_result(img, result, score_thr=score_thr, show=False)
  File "/root/mmdetection-master/mmdet/models/detectors/base.py", line 211, in show_result
    mask = maskUtils.decode(segms[i]).astype(np.bool)
  File "/root/anaconda3/lib/python3.7/site-packages/pycocotools-2.0-py3.7-linux-x86_64.egg/pycocotools/mask.py", line 91, in decode
    return _mask.decode([rleObjs])[:,:,0]
  File "pycocotools/_mask.pyx", line 146, in pycocotools._mask.decode
  File "pycocotools/_mask.pyx", line 128, in pycocotools._mask._frString
IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='mangdian' date='2020-05-16T03:38:55Z'>
		Please try to install pycocotools through pip:
pip install "git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI".
Sometimes the numpy version can also cause some problem. If the error still exist when you have installed the right pycocotools, you may try numpy=1.17
		</comment>
		<comment id='2' author='mangdian' date='2020-05-16T03:54:48Z'>
		&lt;denchmark-link:https://github.com/Johnson-Wang&gt;@Johnson-Wang&lt;/denchmark-link&gt;
 I did install pycocotools from github, and the numpy version is 1.17, but the problem is not solved.
		</comment>
		<comment id='3' author='mangdian' date='2020-05-16T04:08:43Z'>
		&lt;denchmark-link:https://github.com/Johnson-Wang&gt;@Johnson-Wang&lt;/denchmark-link&gt;
 and I also tried lowering the numpy version, it just doesn't work
		</comment>
		<comment id='4' author='mangdian' date='2020-05-16T05:04:10Z'>
		Maybe try numpy&gt;=1.18 ?
		</comment>
		<comment id='5' author='mangdian' date='2020-05-16T05:05:43Z'>
		&lt;denchmark-link:https://github.com/ZwwWayne&gt;@ZwwWayne&lt;/denchmark-link&gt;
  Yes, I also try numpy 1.18, but it still doesn't work
		</comment>
		<comment id='6' author='mangdian' date='2020-05-16T05:39:46Z'>
		Did you install pycocotools from pip before you install from github using pip install "git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI", it might because the environment already have one and the new installation does not work. In this case you need to uninstall all pycocotools in your environment and re-install a new one.
		</comment>
		<comment id='7' author='mangdian' date='2020-05-16T07:31:36Z'>
		&lt;denchmark-link:https://github.com/ZwwWayne&gt;@ZwwWayne&lt;/denchmark-link&gt;
 Before install from github, I uninstalled pycocotools and make sure that there is no pycocotools libarary files in the system, but it just can't work.
		</comment>
		<comment id='8' author='mangdian' date='2020-05-16T09:17:38Z'>
		Then how about numpy? Did you do the same thing?
		</comment>
		<comment id='9' author='mangdian' date='2020-05-16T09:19:08Z'>
		Yes, I did everythingk, I even uninstall conda and clean all python environment, it doesn't work
		</comment>
		<comment id='10' author='mangdian' date='2020-05-16T13:21:57Z'>
		In object detection, try to rewrite the def show_result(self, data, result, **kwargs) in your detector.py and add self.CLASSES = tuple('A','B', ... , 'Z') before super(detector_name, self).show_result(data, result, **kwargs).
There may be similar labels in segm
		</comment>
		<comment id='11' author='mangdian' date='2020-05-16T14:10:24Z'>
		&lt;denchmark-link:https://github.com/aimhabo&gt;@aimhabo&lt;/denchmark-link&gt;
 Actually I am doing something about instance segmentation, so I have to call the pycocotools , otherwise I will delete the segmentation part. But I don't understand how could similar labels cause an error in numpy?
		</comment>
		<comment id='12' author='mangdian' date='2020-05-16T14:28:55Z'>
		&lt;denchmark-link:https://github.com/mangdian&gt;@mangdian&lt;/denchmark-link&gt;
 I mean the similar ground-truth information like labels.
In the dataset settings, it will load MS-COCO's information automatically while you use other dataset with .
In my similar situation, I force the detector's  in  (In () the forcement is failed because of any rewriting I haven't found yet).
		</comment>
		<comment id='13' author='mangdian' date='2020-05-19T07:53:39Z'>
		The problem is that the segmentation returned by the models is numpy boolean arrays instead of undecoded bytes data, so there is no need to decode the result. I finally solve this problem by modifying mmdet/apis/inference.py (delete the decode part). However, it is very strange that the code works well on another linux server of mine, no need to modify inference.py. Anyway, modifying inference.py can be a temporal solution to solve this problem.
		</comment>
		<comment id='14' author='mangdian' date='2020-05-19T09:45:30Z'>
		Hi &lt;denchmark-link:https://github.com/mangdian&gt;@mangdian&lt;/denchmark-link&gt;
 ,
Thanks for your bug report. Do you use the newest version when you meet the bug? It seems that we did not change inference.py after changing the test logic. Would you like to create a PR to fix that?
		</comment>
		<comment id='15' author='mangdian' date='2020-05-19T14:18:53Z'>
		&lt;denchmark-link:https://github.com/ZwwWayne&gt;@ZwwWayne&lt;/denchmark-link&gt;
 Yes, I am using the newest version of mmdetection. What confuses me is that I tried the demo in two linux server. On one machine the demo code works, while on the other it doesn't work. I am not sure if it is a bug, or it is something related the numpy version or Cython version (if it is related to version, modifying the code may not be a good choice). But the reason that leads to the error is clear. The segmentation result returned by the model is numpy boolean array, insead of encoded bytes, so the cocotools failed to decode the results. It seems that some other people also meet this problem. Should I create a PR?
		</comment>
		<comment id='16' author='mangdian' date='2020-05-20T06:16:36Z'>
		Met the same problem here.
I install the newest version mmdetection following the guide,  it very annoying to met this error while testingmask rcnn with the demo code:
&lt;denchmark-code&gt;IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices
&lt;/denchmark-code&gt;

What's more, the model download urls for aliyun was not work
		</comment>
		<comment id='17' author='mangdian' date='2020-05-20T06:34:47Z'>
		&lt;denchmark-link:https://github.com/FantasyJXF&gt;@FantasyJXF&lt;/denchmark-link&gt;
 Please try my solution:
replace line 213 in mmdet/models/detectors/base.py:
               mask = maskUtils.decode(segms[i]).astype(np.bool)
with
mask = segms[i]
		</comment>
		<comment id='18' author='mangdian' date='2020-05-20T06:42:48Z'>
		
@FantasyJXF Please try my solution:
replace line 213 in mmdet/models/detectors/base.py:
 mask = maskUtils.decode(segms[i]).astype(np.bool)
with
mask = segms[i]

Very useful, thanks for your contribution.
So there is no need to do the extra decode to get boolean array, the model already do that, maybe that's because the developer didn't check the segmentation model while release.
First day using mmdetection, almost  turn to dedectron2.
Thank you again.
		</comment>
		<comment id='19' author='mangdian' date='2020-05-20T07:06:21Z'>
		&lt;denchmark-link:https://github.com/mangdian&gt;@mangdian&lt;/denchmark-link&gt;
 Thanks for the fix, it will be appreciated if you could create a PR for it.
		</comment>
		<comment id='20' author='mangdian' date='2020-05-20T07:10:06Z'>
		&lt;denchmark-link:https://github.com/hellock&gt;@hellock&lt;/denchmark-link&gt;
  OK， I will create a PR for it. Glad to do it.
		</comment>
		<comment id='21' author='mangdian' date='2020-05-20T07:11:19Z'>
		Two things to fix:

Change https://github.com/open-mmlab/mmdetection/blob/master/mmdet/models/detectors/base.py#L213 to mask = segms[i].
Change https://github.com/open-mmlab/mmdetection/blob/master/mmdet/models/detectors/cascade_rcnn.py#L34 to return xxxx

		</comment>
		<comment id='22' author='mangdian' date='2020-05-20T07:12:25Z'>
		&lt;denchmark-link:https://github.com/open-mmlab/mmdetection/issues/2697&gt;#2697&lt;/denchmark-link&gt;

		</comment>
		<comment id='23' author='mangdian' date='2020-05-20T07:14:59Z'>
		&lt;denchmark-link:https://github.com/hellock&gt;@hellock&lt;/denchmark-link&gt;
  Hi, anthor not related problem in &lt;denchmark-link:https://github.com/open-mmlab/mmdetection/blob/master/docs/model_zoo.md&gt;model zoo&lt;/denchmark-link&gt;

It seems the mirror sites for ALIYUN was not work, and the AWS mirror url postfix open-mmlab seems changed to mmdetection.
		</comment>
		<comment id='24' author='mangdian' date='2020-05-20T07:17:44Z'>
		Yes, the aliyun mirror site has not been updated to host v2.0 models. It will be updated later.
		</comment>
	</comments>
</bug>