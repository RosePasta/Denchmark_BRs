<bug id='3035' author='dsuess' open_date='2020-06-16T06:24:52Z' closed_time='2020-08-22T09:51:39Z'>
	<summary>scale_factor array breaks FCNMaskHead</summary>
	<description>
Thanks for your error report and we appreciate it a lot.

FCNMaskHead raises an error if the model is run with  and  being an array (instead of just a scalar). The error is raised in &lt;denchmark-link:https://github.com/open-mmlab/mmdetection/blob/master/mmdet/models/roi_heads/mask_heads/fcn_mask_head.py#L200&gt;this line&lt;/denchmark-link&gt;
 and reads:
&lt;denchmark-code&gt;TypeError: only size-1 arrays can be converted to Python scalars
&lt;/denchmark-code&gt;

Reproduction
Jupyter notebook running inference on custom dataset.
Error traceback
&lt;denchmark-code&gt;../../.cache/pypoetry/virtualenvs/mmpond-6xAyU5_O-py3.7/lib/python3.7/site-packages/torch/nn/modules/module.py:550: in __call__
    result = self.forward(*input, **kwargs)
../../.cache/pypoetry/virtualenvs/mmpond-6xAyU5_O-py3.7/lib/python3.7/site-packages/torch/nn/parallel/data_parallel.py:153: in forward
    return self.module(*inputs[0], **kwargs[0])
../../.cache/pypoetry/virtualenvs/mmpond-6xAyU5_O-py3.7/lib/python3.7/site-packages/torch/nn/modules/module.py:550: in __call__
    result = self.forward(*input, **kwargs)
../../.cache/pypoetry/virtualenvs/mmpond-6xAyU5_O-py3.7/lib/python3.7/site-packages/mmdet/core/fp16/decorators.py:51: in new_func
    return old_func(*args, **kwargs)
../../.cache/pypoetry/virtualenvs/mmpond-6xAyU5_O-py3.7/lib/python3.7/site-packages/mmdet/models/detectors/base.py:150: in forward
    return self.forward_test(img, img_metas, **kwargs)
../../.cache/pypoetry/virtualenvs/mmpond-6xAyU5_O-py3.7/lib/python3.7/site-packages/mmdet/models/detectors/base.py:131: in forward_test
    return self.simple_test(imgs[0], img_metas[0], **kwargs)
../../.cache/pypoetry/virtualenvs/mmpond-6xAyU5_O-py3.7/lib/python3.7/site-packages/mmdet/models/detectors/two_stage.py:192: in simple_test
    x, proposal_list, img_metas, rescale=rescale)
../../.cache/pypoetry/virtualenvs/mmpond-6xAyU5_O-py3.7/lib/python3.7/site-packages/mmdet/models/roi_heads/standard_roi_head.py:253: in simple_test
    x, img_metas, det_bboxes, det_labels, rescale=rescale)
../../.cache/pypoetry/virtualenvs/mmpond-6xAyU5_O-py3.7/lib/python3.7/site-packages/mmdet/models/roi_heads/test_mixins.py:172: in simple_test_mask
    ori_shape, scale_factor, rescale)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = FCNMaskHead(
  (loss_mask): CrossEntropyLoss()
  (convs): ModuleList(
    (0): ConvModule(
      (conv): Conv2d(256, 2...2, 2), stride=(2, 2))
  (conv_logits): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
  (relu): ReLU(inplace=True)
)
mask_pred = tensor([[[[0.3319, 0.4184, 0.3217,  ..., 0.4381, 0.4519, 0.6086],
          [0.8833, 0.7837, 0.9758,  ..., 0.8660, 0.9..., 0.8995, 0.6574, 0.7129],
          [0.5393, 0.4447, 0.4772,  ..., 0.8042, 0.5884, 0.8338]]]],
       device='cuda:0')
det_bboxes = tensor([[6.6717e+01, 0.0000e+00, 4.9932e+02, 5.0000e+02, 1.3252e-01],
        [2.8945e+02, 0.0000e+00, 4.9981e+02, 2.5...5.0000e+02, 5.8171e-02],
        [7.6896e+01, 3.5935e+02, 4.3908e+02, 5.0000e+02, 5.5708e-02]],
       device='cuda:0')
det_labels = tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0], device='cuda:0')
rcnn_test_cfg = {'score_thr': 0.05, 'nms': {'type': 'nms', 'iou_thr': 0.5}, 'max_per_img': 100, 'mask_thr_binary': 0.5}
ori_shape = (416, 416, 3), scale_factor = 1.0, rescale = False

    def get_seg_masks(self, mask_pred, det_bboxes, det_labels, rcnn_test_cfg,
                      ori_shape, scale_factor, rescale):
        """Get segmentation masks from mask_pred and bboxes.

        Args:
            mask_pred (Tensor or ndarray): shape (n, #class, h, w).
                For single-scale testing, mask_pred is the direct output of
                model, whose type is Tensor, while for multi-scale testing,
                it will be converted to numpy array outside of this method.
            det_bboxes (Tensor): shape (n, 4/5)
            det_labels (Tensor): shape (n, )
            img_shape (Tensor): shape (3, )
            rcnn_test_cfg (dict): rcnn testing config
            ori_shape: original image size

        Returns:
            list[list]: encoded masks
        """
        if isinstance(mask_pred, torch.Tensor):
            mask_pred = mask_pred.sigmoid()
        else:
            mask_pred = det_bboxes.new_tensor(mask_pred)

        device = mask_pred.device
        cls_segms = [[] for _ in range(self.num_classes)
                     ]  # BG is not included in num_classes
        bboxes = det_bboxes[:, :4]
        labels = det_labels

        if rescale:
            img_h, img_w = ori_shape[:2]
        else:
            img_h = np.round(ori_shape[0] * scale_factor).astype(np.int32)
            img_w = np.round(ori_shape[1] * scale_factor).astype(np.int32)
            scale_factor = 1.0

        if not isinstance(scale_factor, (float, torch.Tensor)):
            scale_factor = bboxes.new_tensor(scale_factor)
        bboxes = bboxes / scale_factor

        N = len(mask_pred)
        # The actual implementation split the input into chunks,
        # and paste them chunk by chunk.
        if device.type == 'cpu':
            # CPU is most efficient when they are pasted one by one with
            # skip_empty=True, so that it performs minimal number of
            # operations.
            num_chunks = N
        else:
            # GPU benefits from parallelism for larger chunks,
            # but may have memory issue
            num_chunks = int(
&gt;               np.ceil(N * img_h * img_w * BYTES_PER_FLOAT / GPU_MEM_LIMIT))
E           TypeError: only size-1 arrays can be converted to Python scalars

../../.cache/pypoetry/virtualenvs/mmpond-6xAyU5_O-py3.7/lib/python3.7/site-packages/mmdet/models/roi_heads/mask_heads/fcn_mask_head.py:201: TypeError
&lt;/denchmark-code&gt;

Bug fix
The calculation of  and  for  (see &lt;denchmark-link:https://github.com/open-mmlab/mmdetection/blob/master/mmdet/models/roi_heads/mask_heads/fcn_mask_head.py#L181&gt;this&lt;/denchmark-link&gt;
) hasn't been ported to work with scale_factor being a  dim array. I'll try to submit a PR ASAP
	</description>
	<comments>
		<comment id='1' author='dsuess' date='2020-06-18T12:39:49Z'>
		Hi &lt;denchmark-link:https://github.com/dsuess&gt;@dsuess&lt;/denchmark-link&gt;
 ,
Thanks for your bug report, this bug is caused by this &lt;denchmark-link:https://github.com/open-mmlab/mmdetection/blob/master/mmdet/datasets/pipelines/transforms.py#L138&gt;line&lt;/denchmark-link&gt;
. Your contributions are welcomed.
		</comment>
	</comments>
</bug>