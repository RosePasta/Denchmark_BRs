<bug id='824' author='jylins' open_date='2019-06-18T05:14:02Z' closed_time='2019-06-21T04:53:41Z'>
	<summary>Question about losses in the latest version</summary>
	<description>
In the latest version, the losses set the mode of 'reduction' since initialization and it would result in some problems when we need sort losses, such as OHEM.
@LOSSES.register_module
class CrossEntropyLoss(nn.Module):

    def __init__(self,
                 use_sigmoid=False,
                 use_mask=False,
                 reduction='mean',
                 loss_weight=1.0):
        super(CrossEntropyLoss, self).__init__()
        ...

    def forward(self, cls_score, label, weight=None, avg_factor=None,
                **kwargs):
        loss_cls = self.loss_weight * self.cls_criterion(
            cls_score,
            label,
            weight,
            reduction=self.reduction,  # it would result in some problems 
            avg_factor=avg_factor,
            **kwargs)
        return loss_cls
And I also find a bug in mmdet/models/bbox_heads/bbox_head.py.
def loss(self,
         cls_score,
         bbox_pred,
         labels,
         label_weights,
         bbox_targets,
         bbox_weights,
         reduce=True):
    losses = dict()
    if cls_score is not None:
        # TODO: when reduce == False
        avg_factor = max(torch.sum(label_weights &gt; 0).float().item(), 1.)
        losses['loss_cls'] = self.loss_cls(
            cls_score, labels, label_weights, avg_factor=avg_factor)
        losses['acc'] = accuracy(cls_score, labels)
	</description>
	<comments>
		<comment id='1' author='jylins' date='2019-06-18T06:45:04Z'>
		Thanks for reporting the bug. As stated in TO DO, We will fix it soon.
		</comment>
		<comment id='2' author='jylins' date='2019-06-19T02:04:25Z'>
		&lt;denchmark-link:https://github.com/yhcao6&gt;@yhcao6&lt;/denchmark-link&gt;
 Thanks!
		</comment>
		<comment id='3' author='jylins' date='2019-06-21T04:53:41Z'>
		should have been fixed in &lt;denchmark-link:https://github.com/open-mmlab/mmdetection/pull/839&gt;#839&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='jylins' date='2019-06-21T16:26:18Z'>
		Hi, &lt;denchmark-link:https://github.com/yhcao6&gt;@yhcao6&lt;/denchmark-link&gt;

 still exists bugs.
&lt;denchmark-code&gt;@weighted_loss
def iou_loss(pred, target, eps=1e-6):
    """IoU loss.

    Computing the IoU loss between a set of predicted bboxes and target bboxes.
    The loss is calculated as negative log of IoU.

    Args:
        pred (Tensor): Predicted bboxes of format (x1, y1, x2, y2),
            shape (n, 4).
        target (Tensor): Corresponding gt bboxes, shape (n, 4).
        eps (float): Eps to avoid log(0).

    Return:
        Tensor: Loss tensor.
    """
    ious = bbox_overlaps(pred, target, is_aligned=True).clamp(min=eps)
    # loss = -ious.log()  # shape: [n]
    loss = -ious.log().unsqueeze(dim=-1)  # shape: [n, 1]
    return loss
&lt;/denchmark-code&gt;

And you did not add reduction_override for BoundedIoULoss.
		</comment>
	</comments>
</bug>