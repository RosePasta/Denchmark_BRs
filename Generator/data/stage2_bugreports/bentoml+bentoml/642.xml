<bug id='642' author='fernandocamargoti' open_date='2020-05-08T16:56:49Z' closed_time='2020-05-15T00:33:06Z'>
	<summary>The Handlers are overwriting pip_dependencies specified through @env</summary>
	<description>
Describe the bug
In my use-case, I have a Tensorflow model and I'm using TensorflowSavedModelArtifact. If I'm not wrong, it automatically adds "tensorflow" to the requirements.txt. But I want to specify the tensorflow version, so I have:
@env(pip_dependencies=["tensorflow=1.15.0", "numpy=1.17.2", "pillow=6.1.0", "scikit-image=0.16.2"])
I was expecting my definition to take precedence, but instead, only "tensorflow" is put in requirements.txt.
To Reproduce
Create any BentoService with TensorflowSavedModelArtifact and use @env as above. Pack, save and open the folder to check requirements.txt.
Expected behavior
My pip_dependency to take precedence.
Environment:

OS: Manjaro 20.0
Python/BentoML Version: Python 3.6.10, BentoML 0.7.4

	</description>
	<comments>
		<comment id='1' author='fernandocamargoti' date='2020-05-08T18:33:08Z'>
		Thanks for reporting the issue &lt;denchmark-link:https://github.com/fernandocamargoti&gt;@fernandocamargoti&lt;/denchmark-link&gt;

It's indeed an issue on our side, BentoHandler's optional dependency have the exact same issue, I will work on a fix.
		</comment>
		<comment id='2' author='fernandocamargoti' date='2020-05-13T21:11:37Z'>
		I have the same issue. I also tried to set the dependencies using @env(requirements_txt_file='./requirements.txt') in which I have set the Tensorflow version explicitely but to no avail. For some reason a new "requirements.txt" file is produced without the version of the tensorflow library (and only for tensorflow, other libraries are left untouched).
EDIT
In my case the issue doesn't come from the BentoHandler but rather from the KerasModelArtifact.pip_dependencies property:



BentoML/bentoml/artifact/keras_model_artifact.py


        Lines 99 to 107
      in
      f43fc20






 @property 



 def pip_dependencies(self): 



 # Note that keras module is not required, user can use tf.keras as an 



 # replacement for the keras module. Although tensorflow module is required to 



 #  be used as the default Keras backend 



 deps = ['tensorflow'] 



 if self._keras_module_name == 'keras': 



 deps.append('keras') 



 return deps 





This adds tensorflow without any version.
A workaround could be to make a custom KerasModelArtifact that overrides that property. Otherwise, I think it's possible to handle this issue by checking explicitly provided dependencies (i.e., when auto_pip_dependencies=False) in here:



BentoML/bentoml/service.py


        Lines 479 to 488
      in
      570b4b7






 self._init_env() 



 



 def _init_env(self): 



 self._env = self.__class__._env or BentoServiceEnv(self.name) 



 



 for api in self._service_apis: 



 self._env._add_pip_dependencies(api.handler.pip_dependencies) 



 



 for artifact in self._artifacts: 



 self._env._add_pip_dependencies(artifact.pip_dependencies) 





I'd be happy to give it a try if you want...
		</comment>
		<comment id='3' author='fernandocamargoti' date='2020-05-14T02:45:34Z'>
		Thanks &lt;denchmark-link:https://github.com/spotter&gt;@spotter&lt;/denchmark-link&gt;
, yes exactly we were planning to do this explicit check within  function but haven't got to it yet.
I think we can add a new method add_pip_dependencies_if_missing to the BentoServiceEnv, which will only append the package if it's not already listed in self.pip_dependencies.  The BentoServiceEnv class does not currently parse the pip requirements which might be tricky to implement. If you want to give it a try that'd be great!
		</comment>
		<comment id='4' author='fernandocamargoti' date='2020-05-14T22:48:22Z'>
		&lt;denchmark-link:https://github.com/spotter&gt;@spotter&lt;/denchmark-link&gt;
 I submitted a quick fix here since this was blocking too many users - sorry if you have spent time on this. BentoML's pip module management code still has lots of room for improvements tho, happy to chat more if you are interested in contributing, feel free to ping me in the community slack.
		</comment>
		<comment id='5' author='fernandocamargoti' date='2020-05-15T00:33:06Z'>
		The fix has been merged with PR &lt;denchmark-link:https://github.com/bentoml/BentoML/pull/657&gt;#657&lt;/denchmark-link&gt;
,  it will be available in BentoML version 0.7.6 (scheduled for release later today)
		</comment>
	</comments>
</bug>