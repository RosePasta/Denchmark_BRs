<bug id='998' author='gregd33' open_date='2020-08-19T16:57:46Z' closed_time='2020-09-20T21:27:19Z'>
	<summary>Unexpected / undesirable behaviour with conda env settings</summary>
	<description>
Describe the bug
Essentially, an environment.yml file will be produced no matter what (even if conda_dependencies=None). If this is used in conjunction with a base docker image that has conda installed + some packages, this can make dockerizing much slower (10x).
Further, even if conda packages are specified, the inclusion of python and pip in the specification can have similar issues
To Reproduce
Steps to reproduce the behavior:

Create a base docker image on top of bentoml/model-server that has conda installed some packages (e.g. tensorflow)
Create a bentoml service that uses this base docker image via docker_base_image and set conda_dependencies=None
make the service and build the resulting docker image

Expected behavior
When the docker build gets to the conda step, it will have conflicts. It will eventually resolve and move on, but will greatly slow down the build time (from seconds to many minutes)

Example of the docker output
&lt;denchmark-link:https://user-images.githubusercontent.com/62316076/90665325-e1e28500-e219-11ea-8de2-3aefe18167ff.png&gt;&lt;/denchmark-link&gt;

Environment:

CentOS 8:
Python/BentoML Version [e.g. Python 3.7.6, BentoML-0.8.3]

Additional Context
It also seems that CONDA_ENV_DEFAULT_NAME is unused.  I don't see the need for the name of the environment anyways since it is installed into base
Potential Fixes
For one, if no conda_dependencies are passed then don't create the YAML file. I've tested this quickly and it will work - it will skip the step in the same way it would if there is no conda environment. Or, don't include python in the file as that is what causes the conflict (having just pip is fine).
Even when we do specify  conda_dependencies, including python in the environment is not ideal and cause the same issues. Presumably if someone is using a specific base image, they have chosen the version of python and overriding it could be problematic. Or if the version of python is important, they could specify it in the conda_dependencies
In short, excluding python from the environment.yml would be a reasonable fix. The downside is no explicit python version a) users can put that in their conda_dependencies if its important.
	</description>
	<comments>
		<comment id='1' author='gregd33' date='2020-08-27T14:51:32Z'>
		A couple other comments about this:


If the user does specify a specific version of python in the conda_dependencies this will cause issues since it will have now have python specified twice. So even more of a reason to remove python from this list.


I also think that the default channel should be removable or removed if there is another channel present. The context for this if images are being built without access to the default conda channel, this will fail even if reachable repos are given as channels.


		</comment>
		<comment id='2' author='gregd33' date='2020-08-27T14:54:46Z'>
		Also I'm happy to start a branch/PR for this if that would be helpful
		</comment>
		<comment id='3' author='gregd33' date='2020-08-27T20:15:40Z'>
		&lt;denchmark-link:https://github.com/gregd33&gt;@gregd33&lt;/denchmark-link&gt;
 That would be great if you can help out and create a PR for this!
		</comment>
		<comment id='4' author='gregd33' date='2020-08-27T20:45:33Z'>
		Please also see the discussion here &lt;denchmark-link:https://github.com/bentoml/BentoML/issues/1004&gt;#1004&lt;/denchmark-link&gt;

We are currently using conda to ensure the exact same python version is being used when deploying to production. So removing environment.yml when no conda_dependency is specified will cause problem there.
As part of the discussion in &lt;denchmark-link:https://github.com/bentoml/BentoML/issues/1004&gt;#1004&lt;/denchmark-link&gt;
, we could change the default behavior on python version to match just the major/minor version number and ignore the  version. e.g. when model packaged from python 3.7.1, the bundle will have  instead of .
In that case, we would want to provide a base image for each python major version that we support(3.6, 3.7, 3.8). Which is gonna be a larger change.  &lt;denchmark-link:https://github.com/gregd33&gt;@gregd33&lt;/denchmark-link&gt;
 let us know if you are interested in taking on this change, happy to discuss more and feel free to ping us in the slack channel.
		</comment>
		<comment id='5' author='gregd33' date='2020-08-28T17:41:56Z'>
		I think that the major/minor version only would be sensible. Just did some tests and that helped in terms of the build performance.
I can try to tackle it and the major/minor thing should be a quick fix. But I'll also add the additional base images for the conda-based images - if you can point me to where the base images are handled that would save me some time searching.
		</comment>
		<comment id='6' author='gregd33' date='2020-08-28T17:51:32Z'>
		&lt;denchmark-link:https://github.com/gregd33&gt;@gregd33&lt;/denchmark-link&gt;
 sure thing, here is the code we use to build and publish the model-server base image:
&lt;denchmark-link:https://github.com/bentoml/BentoML/tree/master/docker/model-server&gt;https://github.com/bentoml/BentoML/tree/master/docker/model-server&lt;/denchmark-link&gt;

I think we could do something similar to the slim image, making it generate image tags for each python minor version we support: bentoml/model-server:0.8.6-py36, bentoml/model-server:0.8.6-py37, bentoml/model-server:0.8.6-py38, and in our code that generates the default docker base image, we can pick the right one based on current python version: 


BentoML/bentoml/service_env.py


         Line 177
      in
      599a465






 self._docker_base_image = config('core').get('default_docker_base_image') 





		</comment>
		<comment id='7' author='gregd33' date='2020-09-09T00:09:37Z'>
		I almost have a PR ready to go. There are a couple things I'm unsure about.
Suppose a user builds with python 3.5 which is unsupported. Should we raise an error or warning? Should we not raise anything and when they try to containerize it will be unable to find the image? Or should we add python==3.5 to the conda environment (possibly raising a warning as well)?
In any case, we also need to have a list of supported python versions. This is needed in both the service_env.py file and and the release script (it is currently hardcoded there). Is there a place to put it that can be used by both?
		</comment>
		<comment id='8' author='gregd33' date='2020-09-09T00:19:19Z'>
		Also I did implement the changes from &lt;denchmark-link:https://github.com/bentoml/BentoML/pull/1043&gt;#1043&lt;/denchmark-link&gt;
 into this one, with one addition: I defined a PYTHON_LATEST variable, which is basically which version gets the latest tag (currently, it is 3.7 since its the only image).
That is, the image for 3.8 will get the tag 0.8.6-py38 and latest-py38 (like currently) whereas 3.7 will also get just the latest tag too.
		</comment>
		<comment id='9' author='gregd33' date='2020-09-16T16:53:33Z'>
		Hi &lt;denchmark-link:https://github.com/gregd33&gt;@gregd33&lt;/denchmark-link&gt;
  - sorry about the delayed reply, I think it is ok to skip python 3.5 for now, since we don't officially support it or test it.  I think it is ok to put the list of supported python version separately for now since it's a bit tricky to share it between shell files and python files, we will make sure to keep them updated when we add support for a new python version(which probably happens rarely).
I recently did a bunch of fixes in &lt;denchmark-link:https://github.com/bentoml/BentoML/pull/1084&gt;#1084&lt;/denchmark-link&gt;
  to make BentoML skip re-install Python with Conda, if the python version differences is only in the "PATCH" version number. E.g. a bentoservice requires python 3.7.5 but base image has 3.7.8, it will skip re-installing python. It should make the docker base image part even more useful, since we only need to build the latest version for each "MINOR" release, and all users will benefit from it.  Let me know if you'd still be interested in contributing the per-python-version docker base image part, or have ran in to any problem.
		</comment>
		<comment id='10' author='gregd33' date='2020-09-16T18:26:36Z'>
		I will contribute a PR for that yep.
		</comment>
		<comment id='11' author='gregd33' date='2020-09-20T21:27:19Z'>
		Closed in &lt;denchmark-link:https://github.com/bentoml/BentoML/pull/1096&gt;#1096&lt;/denchmark-link&gt;
, thank you &lt;denchmark-link:https://github.com/gregd33&gt;@gregd33&lt;/denchmark-link&gt;
!
		</comment>
		<comment id='12' author='gregd33' date='2020-12-22T01:18:58Z'>
		I also think that the default channel should be removable or removed if there is another channel present. The context for this if images are being built without access to the default conda channel, this will fail even if reachable repos are given as channels.
I realized that one issue related to the conda channels wasn't addressed by this. There are two different approaches to fixing it so I did a PR for each and you can see which one is more sensible:
&lt;denchmark-link:https://github.com/bentoml/BentoML/pull/1353&gt;#1353&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/bentoml/BentoML/pull/1354&gt;#1354&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>