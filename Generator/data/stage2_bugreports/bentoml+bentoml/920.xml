<bug id='920' author='hechangqin' open_date='2020-07-21T07:57:47Z' closed_time='2020-08-05T20:58:11Z'>
	<summary>When I built a H2O-based image, the following error occurred</summary>
	<description>
Describe the bug
When I built a H2O-based image, the following error occurred. From the Dockerfile generated by BentoML, the base image is bentoml/model-server:0.8.1, and JRE is indeed not installed
I used service.py to build a bentoML bundle
import bentoml
from bentoml.adapters import DataframeInput
from bentoml.artifact import H2oModelArtifact
from customize import preprocessing, postprocessing


@bentoml.env(auto_pip_dependencies=True)
@bentoml.artifacts([H2oModelArtifact('model')])
class LoanDefaultPrediction(bentoml.BentoService):
    @bentoml.api(input=DataframeInput())
    def predict(self, df):
        model_input = preprocessing(df)
        model_output = self.artifacts.model.predict(model_input)
        return postprocessing(model_output)


if __name__ == "__main__":
    import h2o
    h2o.init(strict_version_check=False)
    model = h2o.load_model('H2O_AutoML_20200720_153457')

    model_service = LoanDefaultPrediction()
    model_service.pack("model", model)

    saved_path = model_service.save()
And another customize.py to pre process
import h2o

def preprocessing(model_input):
    return h2o.H2OFrame(model_input, na_strings=['NaN'])


def postprocessing(model_output):
    return model_output.as_data_frame()
Finally, After I build service image with this bundle, I run this docker image with below log:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/opt/conda/lib/python3.7/site-packages/gunicorn/arbiter.py", line 583, in spawn_worker
    worker.init_process()
  File "/opt/conda/lib/python3.7/site-packages/gunicorn/workers/base.py", line 119, in init_process
    self.load_wsgi()
  File "/opt/conda/lib/python3.7/site-packages/gunicorn/workers/base.py", line 144, in load_wsgi
    self.wsgi = self.app.wsgi()
  File "/opt/conda/lib/python3.7/site-packages/gunicorn/app/base.py", line 67, in wsgi
    self.callable = self.load()
  File "/opt/conda/lib/python3.7/site-packages/bentoml/server/gunicorn_server.py", line 92, in load
    bento_service = load(self.bento_service_bundle_path)
  File "/opt/conda/lib/python3.7/site-packages/bentoml/saved_bundle/loader.py", line 179, in load
    svc = svc_cls()
  File "/opt/conda/lib/python3.7/site-packages/bentoml/service.py", line 526, in __init__
    self._load_artifacts(self._bento_service_bundle_path)
  File "/opt/conda/lib/python3.7/site-packages/bentoml/service.py", line 734, in _load_artifacts
    packed_artifact = artifact.load(artifacts_path)
  File "/opt/conda/lib/python3.7/site-packages/bentoml/artifact/h2o_model_artifact.py", line 79, in load
    h2o.init()
  File "/opt/conda/lib/python3.7/site-packages/h2o/h2o.py", line 307, in init
    bind_to_localhost=bind_to_localhost)
  File "/opt/conda/lib/python3.7/site-packages/h2o/backend/server.py", line 143, in start
    bind_to_localhost=bind_to_localhost, log_dir=log_dir, log_level=log_level, max_log_file_size=max_log_file_size)
  File "/opt/conda/lib/python3.7/site-packages/h2o/backend/server.py", line 276, in _launch_server
    java = self._find_java()
  File "/opt/conda/lib/python3.7/site-packages/h2o/backend/server.py", line 441, in _find_java
    raise H2OStartupError("Cannot find Java. Please install the latest JRE from\n"
h2o.exceptions.H2OStartupError: Cannot find Java. Please install the latest JRE from
http://www.oracle.com/technetwork/java/javase/downloads/index.html
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='hechangqin' date='2020-07-21T08:07:20Z'>
		Hi &lt;denchmark-link:https://github.com/hechangqin&gt;@hechangqin&lt;/denchmark-link&gt;
 - you will need to add h2o conda dependency for the docker build to install h2o properly. You may refer to the h2o example notebooks found in the BentoML gallery: &lt;denchmark-link:https://github.com/bentoml/gallery#h2o&gt;https://github.com/bentoml/gallery#h2o&lt;/denchmark-link&gt;

e.g.:
import h2o

from bentoml import api, env, artifacts, BentoService
from bentoml.artifact import H2oModelArtifact
from bentoml.adapters import DataframeInput

@env(
    pip_dependencies=['h2o==3.24.0.2', 'pandas'],
    conda_channels=['h2oai'],
    conda_dependencies=['h2o==3.24.0.2']
)
@artifacts([H2oModelArtifact('model')])
class LoanPrediction(BentoService):
    
    @api(input=DataframeInput())
    def predict(self, df):
        h2o_frame = h2o.H2OFrame(df, na_strings=['NaN'])
        predictions = self.artifacts.model.predict(h2o_frame)
        return predictions.as_data_frame()
Related documentation on conda dependencies:
&lt;denchmark-link:https://docs.bentoml.org/en/latest/concepts.html#conda-packages&gt;https://docs.bentoml.org/en/latest/concepts.html#conda-packages&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='hechangqin' date='2020-07-22T02:10:13Z'>
		&lt;denchmark-link:https://github.com/parano&gt;@parano&lt;/denchmark-link&gt;
 I add h2o conda dependency for the docker build and the problem still exists. The Dockerfile generated by BentoML as below. I think it is caused by the absence of jdk in the  base image.
&lt;denchmark-code&gt;FROM bentoml/model-server:0.8.1

# copy over model files
COPY . /bento
WORKDIR /bento

# Configuring PyPI index
ARG PIP_INDEX_URL=https://pypi.python.org/simple/
ARG PIP_TRUSTED_HOST=pypi.python.org
ENV PIP_INDEX_URL $PIP_INDEX_URL
ENV PIP_TRUSTED_HOST $PIP_TRUSTED_HOST

# Install conda, pip dependencies and run user defined setup script
RUN if [ -f /bento/bentoml-init.sh ]; then bash -c /bento/bentoml-init.sh; fi

# the env var $PORT is required by heroku container runtime
ENV PORT 5000
EXPOSE $PORT

COPY docker-entrypoint.sh /usr/local/bin/
ENTRYPOINT [ "docker-entrypoint.sh" ]
CMD ["bentoml", "serve-gunicorn", "/bento"]

&lt;/denchmark-code&gt;

Error log as below:
&lt;denchmark-code&gt;[2020-07-22 02:04:07 +0000] [14] [ERROR] Exception in worker process
Traceback (most recent call last):
  File "/opt/conda/lib/python3.7/site-packages/h2o/h2o.py", line 266, in init
    _msgs=("Checking whether there is an H2O instance running at {url} ",
  File "/opt/conda/lib/python3.7/site-packages/h2o/backend/connection.py", line 323, in open
    conn._cluster = conn._test_connection(retries, messages=_msgs)
  File "/opt/conda/lib/python3.7/site-packages/h2o/backend/connection.py", line 603, in _test_connection
    % (self._base_url, max_retries, "\n".join(errors)))
h2o.exceptions.H2OConnectionError: Could not establish link to the H2O cloud http://localhost:54321 after 5 retries
[04:06.36] H2OConnectionError: Unexpected HTTP error: HTTPConnectionPool(host='localhost', port=54321): Max retries exceeded with url: /3/Cloud (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fa02c5d9850&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))
[04:06.56] H2OConnectionError: Unexpected HTTP error: HTTPConnectionPool(host='localhost', port=54321): Max retries exceeded with url: /3/Cloud (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fa02c5d9610&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))
[04:06.76] H2OConnectionError: Unexpected HTTP error: HTTPConnectionPool(host='localhost', port=54321): Max retries exceeded with url: /3/Cloud (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fa02c291bd0&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))
[04:06.97] H2OConnectionError: Unexpected HTTP error: HTTPConnectionPool(host='localhost', port=54321): Max retries exceeded with url: /3/Cloud (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fa02c2bb510&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))
[04:07.17] H2OConnectionError: Unexpected HTTP error: HTTPConnectionPool(host='localhost', port=54321): Max retries exceeded with url: /3/Cloud (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fa02c242310&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/conda/lib/python3.7/site-packages/gunicorn/arbiter.py", line 583, in spawn_worker
    worker.init_process()
  File "/opt/conda/lib/python3.7/site-packages/gunicorn/workers/base.py", line 119, in init_process
    self.load_wsgi()
  File "/opt/conda/lib/python3.7/site-packages/gunicorn/workers/base.py", line 144, in load_wsgi
    self.wsgi = self.app.wsgi()
  File "/opt/conda/lib/python3.7/site-packages/gunicorn/app/base.py", line 67, in wsgi
    self.callable = self.load()
  File "/opt/conda/lib/python3.7/site-packages/bentoml/server/gunicorn_server.py", line 92, in load
    bento_service = load(self.bento_service_bundle_path)
  File "/opt/conda/lib/python3.7/site-packages/bentoml/saved_bundle/loader.py", line 179, in load
    svc = svc_cls()
  File "/opt/conda/lib/python3.7/site-packages/bentoml/service.py", line 526, in __init__
    self._load_artifacts(self._bento_service_bundle_path)
  File "/opt/conda/lib/python3.7/site-packages/bentoml/service.py", line 734, in _load_artifacts
    packed_artifact = artifact.load(artifacts_path)
  File "/opt/conda/lib/python3.7/site-packages/bentoml/artifact/h2o_model_artifact.py", line 79, in load
    h2o.init()
  File "/opt/conda/lib/python3.7/site-packages/h2o/h2o.py", line 279, in init
    bind_to_localhost=bind_to_localhost)
  File "/opt/conda/lib/python3.7/site-packages/h2o/backend/server.py", line 138, in start
    bind_to_localhost=bind_to_localhost, log_dir=log_dir, log_level=log_level)
  File "/opt/conda/lib/python3.7/site-packages/h2o/backend/server.py", line 271, in _launch_server
    java = self._find_java()
  File "/opt/conda/lib/python3.7/site-packages/h2o/backend/server.py", line 410, in _find_java
    raise H2OStartupError("Cannot find Java. Please install the latest JRE from\n"
h2o.exceptions.H2OStartupError: Cannot find Java. Please install the latest JRE from
http://www.oracle.com/technetwork/java/javase/downloads/index.html
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='hechangqin' date='2020-07-22T04:54:19Z'>
		&lt;denchmark-link:https://github.com/hechangqin&gt;@hechangqin&lt;/denchmark-link&gt;
 could you share the  file in your saved bundle directory?
		</comment>
		<comment id='4' author='hechangqin' date='2020-07-22T06:35:01Z'>
		&lt;denchmark-link:https://github.com/parano&gt;@parano&lt;/denchmark-link&gt;
 As below
&lt;denchmark-code&gt;name: bentoml-LoanDefaultPrediction
channels:
- defaults
- h2oai
dependencies:
- python=3.7.6
- pip
- h2o==3.24.0.2

&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='hechangqin' date='2020-07-28T21:23:31Z'>
		&lt;denchmark-link:https://github.com/hechangqin&gt;@hechangqin&lt;/denchmark-link&gt;
 I had a chance to look into this today.  We need to add  as part of the .  I will update the h2o notebook to correct this issue.
		</comment>
		<comment id='6' author='hechangqin' date='2020-07-29T01:51:46Z'>
		&lt;denchmark-link:https://github.com/yubozhao&gt;@yubozhao&lt;/denchmark-link&gt;
 OK. Thank you very much. If you have done this job, please share me to know.
		</comment>
		<comment id='7' author='hechangqin' date='2020-07-31T08:55:25Z'>
		&lt;denchmark-link:https://github.com/yubozhao&gt;@yubozhao&lt;/denchmark-link&gt;
 any updates on this?
Btw, with the new set_dependencies API in BentoArtifact class, we should be able to add the conda dependencies for the user by default, when using H2O artifact.
		</comment>
		<comment id='8' author='hechangqin' date='2020-08-01T03:56:05Z'>
		&lt;denchmark-link:https://github.com/parano&gt;@parano&lt;/denchmark-link&gt;
 
For now, the quickest work around is user manually add openjdk as part of the conda_dependencies when they write the BentoService definition.
I am also going to create a PR to add this in
		</comment>
		<comment id='9' author='hechangqin' date='2020-08-06T02:40:20Z'>
		&lt;denchmark-link:https://github.com/parano&gt;@parano&lt;/denchmark-link&gt;
 When can this fix be released?
		</comment>
		<comment id='10' author='hechangqin' date='2020-08-06T02:43:08Z'>
		&lt;denchmark-link:https://github.com/hechangqin&gt;@hechangqin&lt;/denchmark-link&gt;
 the release is coming out in a day or two. You can also just add OpenJDK to conda dependencies list as a workaround in current BentoML version. e.g.:
&lt;denchmark-code&gt;import h2o

from bentoml import api, env, artifacts, BentoService
from bentoml.artifact import H2oModelArtifact
from bentoml.adapters import DataframeInput

@env(
    pip_dependencies=['h2o==3.24.0.2', 'pandas'],
    conda_channels=['h2oai'],
    conda_dependencies=['openjdk']
)
@artifacts([H2oModelArtifact('model')])
class LoanPrediction(BentoService):
    
    @api(input=DataframeInput())
    def predict(self, df):
        h2o_frame = h2o.H2OFrame(df, na_strings=['NaN'])
        predictions = self.artifacts.model.predict(h2o_frame)
        return predictions.as_data_frame()
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/yubozhao&gt;@yubozhao&lt;/denchmark-link&gt;
 could you help update the H2O example notebooks in the gallery if you haven't done so?
		</comment>
		<comment id='11' author='hechangqin' date='2020-08-06T02:48:31Z'>
		&lt;denchmark-link:https://github.com/parano&gt;@parano&lt;/denchmark-link&gt;
 Got it. Thank you very much.
		</comment>
	</comments>
</bug>