<bug id='273' author='Eugene-1984' open_date='2019-04-02T10:01:05Z' closed_time='2019-04-10T18:46:23Z'>
	<summary>JSONDecodeError in `onnxmltools.utils.save_text` function</summary>
	<description>
Hi! I am wondering about onnxmltools.utils.save_text function. The example on title page says:
&lt;denchmark-code&gt;# Save as text
onnxmltools.utils.save_text(onnx_model, 'example.json')
&lt;/denchmark-code&gt;

So I expected the output file to be a valid JSON but it is not. Here is the example code copied from the title page; MWE:
&lt;denchmark-code&gt;import onnxmltools
from keras.layers import Input, Dense, Add
from keras.models import Model

# N: batch size, C: sub-model input dimension, D: final model's input dimension
N, C, D = 2, 3, 3

# Define a sub-model, it will become a part of our final model
sub_input1 = Input(shape=(C,))
sub_mapped1 = Dense(D)(sub_input1)
sub_model1 = Model(inputs=sub_input1, outputs=sub_mapped1)

# Define another sub-model, it will become a part of our final model
sub_input2 = Input(shape=(C,))
sub_mapped2 = Dense(D)(sub_input2)
sub_model2 = Model(inputs=sub_input2, outputs=sub_mapped2)

# Define a model built upon the previous two sub-models
input1 = Input(shape=(D,))
input2 = Input(shape=(D,))
mapped1_2 = sub_model1(input1)
mapped2_2 = sub_model2(input2)
sub_sum = Add()([mapped1_2, mapped2_2])
keras_model = Model(inputs=[input1, input2], output=sub_sum)

# Convert it! The target_opset parameter is optional.
onnx_model = onnxmltools.convert_keras(keras_model, target_opset=7) 

onnxmltools.utils.save_text(onnx_model, 'example.json')

import json
with open('example.json') as f:
    json.load(f)
&lt;/denchmark-code&gt;

yields error: JSONDecodeError: Expecting value: line 1 column 1 (char 0)
So... can I somehow obtain a valid JSON out of converted ONNX model?
	</description>
	<comments>
		<comment id='1' author='Eugene-1984' date='2019-04-04T20:17:49Z'>
		Hi &lt;denchmark-link:https://github.com/Eugene-1984&gt;@Eugene-1984&lt;/denchmark-link&gt;
! Thanks for letting us know about your experience with the .save_text function.
Your call to the save_text function looks correct. We're looking into this behavior and apologize for any inconvenience caused.
		</comment>
		<comment id='2' author='Eugene-1984' date='2019-04-08T22:54:36Z'>
		&lt;denchmark-link:https://github.com/Eugene-1984&gt;@Eugene-1984&lt;/denchmark-link&gt;
  is a protobuf object not a json, so json.load should not work. The function  is a legacy code, we need deprecate it, just use to save it into binary file. This library does not support the conversion to json.
		</comment>
		<comment id='3' author='Eugene-1984' date='2019-04-09T06:10:47Z'>
		@jiafatomm is there any way to obtain a json-like structure from a binary model? my final goal is to get the description of the network as it is in ONNX model and yet if I load a simple mode to, say, TensorFlow, it will add tons of additional nodes and complicate the graph. I hope that onnxmltools will help me in that.
		</comment>
		<comment id='4' author='Eugene-1984' date='2019-04-09T16:53:14Z'>
		&lt;denchmark-link:https://github.com/Eugene-1984&gt;@Eugene-1984&lt;/denchmark-link&gt;
 The binary model is actually a protobuf object, so when you load the model, you get the protobuf object. So your question is actually to convert protobuf to json. This is a general question and you can find various answers on Internet. Since this is not onnx specific, onnxmltools does not support it currently.
		</comment>
		<comment id='5' author='Eugene-1984' date='2019-04-09T20:22:07Z'>
		&lt;denchmark-link:https://github.com/Eugene-1984&gt;@Eugene-1984&lt;/denchmark-link&gt;
 The following script should help you get started! Remember to  and  in your environment.
&lt;denchmark-code&gt;from google.protobuf.json_format import MessageToJson
import onnx
import json

model = onnx.load('model.onnx')
jsonObj = MessageToJson(model)

with open('model.json', 'w') as outfile:
    json.dump(jsonObj, outfile)

with open('model.json') as infile:
    j_model = json.load(infile)
&lt;/denchmark-code&gt;

j_model is now a json string with the contents of model.json. If you would prefer the output as a dictionary, please include the following line: dict_model = json.loads(j_model)
See the top voted answer here: &lt;denchmark-link:https://stackoverflow.com/questions/19734617/protobuf-to-json-in-python&gt;https://stackoverflow.com/questions/19734617/protobuf-to-json-in-python&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>