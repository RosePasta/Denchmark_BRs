<bug id='83' author='staylor774' open_date='2017-03-06T06:31:55Z' closed_time='2017-08-14T09:04:45Z'>
	<summary>Mutex contention causing freezes in ScheduledExecutor</summary>
	<description>
Hi AirSim guys,
I'm seeing some horrendous freezes (10-20+ seconds at a time) that appear to be caused by contention on a mutex. Using VS' Performance Profiler, I've tracked it down to this lock call:
&lt;denchmark-code&gt;void ASimModeWorldBase::Tick(float DeltaSeconds)
{
    world_.lock();  // &lt;-- Blocks for 10-20 sec
&lt;/denchmark-code&gt;

The only other contention on that mutex is performed in ScheduledExecutor::executorLoop, ln 126:
&lt;denchmark-code&gt;    //TODO: add ability to disable use of mutex
    std::lock_guard&lt;std::mutex&gt; locker(mutex_);
    ...
    sleep_for(sleep_dt);
&lt;/denchmark-code&gt;

If I comment out this lock_guard, it fixes the freezes, and I haven't noticed any bad side effects yet (from my limited testing). What is the reason for sleeping while the mutex is acquired?
I've reproduced the issue on two machines: Windows 7 and Windows 10, both running VS 2015 Enterprise (14.0.25431.01 Update 3). I don't have any hardware or controller connected. I also noticed that I could reduce the duration of the contention by changing the active configuration from "Development Editor" to "DebugGame Editor"... however I'm not sure why that would make a difference.
Thanks for your work and your support!
	</description>
	<comments>
		<comment id='1' author='staylor774' date='2017-03-06T14:28:32Z'>
		Running in Development Editor I sometimes get the exact same scenario you are describing. I can confirm that switching to the DebugGame Editor fixes these horrible freezes for me. In fact, I'm only experiencing the freezes very rarely in this mode.
		</comment>
		<comment id='2' author='staylor774' date='2017-03-06T17:51:27Z'>
		I don't know if it's exactly because of this piece of the code, but I can also confirm that Development Editor gives me horrible performance, and DebugGame Editor is much smoother. I am going to test commenting that statement out, thanks for pointing it out.
I also have a major FPS drop while recording in both configurations, and the GPU utilization drops in this period so it looks like a CPU bottleneck.
EDIT: Can confirm: commenting out the lock guard gets rid of the freezing issue in DevelopmentEditor. However, recording still makes the FPS drop to 2-3.
		</comment>
		<comment id='3' author='staylor774' date='2017-03-09T09:42:44Z'>
		Thanks for reporting this issue. I've almost exclusively use DebugGame Editor during development so haven't see this issue but I'll test out the Development Editor as well.
Here are some insignts...
So there are two main threads: one that runs high frequency physics engine @ 500Hz and other thread that does rendering at ~30-60 Hz. When it comes time to do rendering, we have to get data from physics engine and use that in rendering. To avoid getting malformed data, we have to use some sort of thread synchronization. Currently this synchronization is simplistic which is basically to stop physics engine thread while rendering thread gets pieces of data out of it. I noticed looking the code that we can optimize it much better so this contention is less. However in longer term, we can probably use fine grained synchronization instead of current course grain and also take advantage of the fact that render thread is only reading the data.
If you remove the lock, generally things should be still fine as render thread only does reading however once in a while it might read partial update from one step of physics mixed with next step. For example, render thread might get vector component x, y and then get cut off with z being stall. This shouldn't be end of the world because these values typically change slowly anyway. So things should mostly work but I wouldn't bet on it.
		</comment>
		<comment id='4' author='staylor774' date='2017-08-14T09:04:45Z'>
		This should be fixed now. The lock in ScheduledExecutor::executorLoop is only maintained during callback (previously it was through the sleep).
		</comment>
	</comments>
</bug>