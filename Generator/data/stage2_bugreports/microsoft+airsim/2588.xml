<bug id='2588' author='courageon' open_date='2020-04-15T22:27:49Z' closed_time='2020-11-19T15:09:47Z'>
	<summary>Clarification on the OriginGeopoint</summary>
	<description>
There seems to be conflicting data on what the "OriginGeopoint" is. In the documentation it's referenced as the location of the PlayerStart while in code it's commented as the coordinates of Unreal level at the coordinates 0,0,0.
Code:



AirSim/AirLib/include/common/AirSimSettings.hpp


         Line 350
      in
      e24a11d






 HomeGeoPoint origin_geopoint{ GeoPoint(47.641468, -122.140165, 122) }; //The geo-coordinate assigned to Unreal coordinate 0,0,0 





Documentation:
&lt;denchmark-link:https://microsoft.github.io/AirSim/settings/#origingeopoint&gt;https://microsoft.github.io/AirSim/settings/#origingeopoint&lt;/denchmark-link&gt;

Which leads into my larger question of what would need to be modified in-code, or otherwise to correspond an arbitrary point in Unreal to a specified lat-lon-alt?
Thanks!
Edit:
From what I've tested it seems to be the lat/lon/alt of the Unreal level at 0,0,0, but would still like some confirmation on this, in which case we should update the documentation for now :)
	</description>
	<comments>
		<comment id='1' author='courageon' date='2020-04-16T00:25:47Z'>
		This looks like it's related to: PX4 HIL OriginGeopoint Issue (Airsim 1.2.2) &lt;denchmark-link:https://github.com/microsoft/AirSim/issues/2575&gt;#2575&lt;/denchmark-link&gt;

I can see that it would be useful to be able to specify the GPS coordinates of either the origin of the Unreal level at (0,0,0) and/or of the PlayerStart Actor. Or maybe it would be even more useful to be able to place a special actor called something like OriginGeopoint in the level which would then use the OriginGeopoint GPS coordinates in the settings.json file and all other objects int he level would be referenced to that. That would allow the simulation to use whatever origin point makes the most sense for the work being done. So if someone wanted to have  PlayerStart (and hence the drone initial position) be at the GPS coordinates specified in OriginGeopoint, they could put both Actors at the same location in the level and get that desired behavior. Or if you had some specific real world object in your world that you wanted to bind to a specific real world GPS coordinate, then you would put your OriginGeopoint Actor at the location of that real word object.
		</comment>
		<comment id='2' author='courageon' date='2020-04-16T00:57:59Z'>
		I really like the actor idea! Something that you can place and then specify the lat/lon/alt in the editor? Otherwise if the actor is not present we can default to the current behavior.
I may take a stab at that in Unreal.
I think the only place in the code that would need to be changed would be:



AirSim/Unreal/Plugins/AirSim/Source/PawnSimApi.cpp


         Line 67
      in
      a8a2515






 home_geo_point_ = msr::airlib::EarthUtils::nedToGeodetic(nedWrtOrigin,  





Could search the world actor list for our OriginGeopoint actor and if present would call origin_geopoint.initilize() again on the actor's location. But then would have to offset based on the player-start location. hmm...
Plus I'm not sure what other code has run by the time it gets to the PawnSimApi::setStartPosition method that would rely on the origin_geopoint.
		</comment>
		<comment id='3' author='courageon' date='2020-04-16T05:22:12Z'>
		&lt;denchmark-link:https://github.com/courageon&gt;@courageon&lt;/denchmark-link&gt;
 Thanks! I was thinking you place the  Actor where you want it (either by hand or using the &lt;denchmark-link:https://docs.unrealengine.com/en-US/Engine/Actors/Transform/index.html&gt;Transform widget to specify location in ue units&lt;/denchmark-link&gt;
). If the  Actor exists in the level, use the GPS coordinates specified in the  property in  and feed those values to the Pixhawk, otherwise if the   Actor does not exist in the level, do what the code does today.
We're both thinking of it the same way.
I don't know Unreal Editor APIs; can you add a widget or a section to the exiting Transfer widget only for the OriginGeopoint Actor to be able to specify lat/lon/alt, perhaps as a drop down in the Location section which currently has Relative and Absolute so add GPS?

Could search the world actor list for our OriginGeopoint actor and if present would call origin_geopoint.initilize() again on the actor's location. But then would have to offset based on the player-start location. hmm...

So this would un-do the offset to the GPS coordinates that the PlayerStart offset code created?
&lt;denchmark-link:https://user-images.githubusercontent.com/5497625/79416962-b26af580-7f65-11ea-8722-9e6f555f00c4.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='courageon' date='2020-04-16T14:19:55Z'>
		I used to do a fair amount of work in UE3, so I'm hoping at least the same things that were available in UE3 are available in UE4 as well (and from what I've read so far that's most definitely the case). Adding an editor actor is pretty straight forward, it'll come with all the transform widgets and basic attributes. You can then add on the extra attributes that you need. And IIRC I think you can tag those attributes with which category they belong under (like "Transform")

So this would un-do the offset to the GPS coordinates that the PlayerStart offset code created?

It won't undo the offset, the offset will just now be based from the OriginGeopoint actor instead of 0,0,0. Which should mean everything should just line up correctly. should But I'm not sure if we'll have to do an extra call to calculate the offset from the OriginGeopoint, since it's an assumed 0,0,0 right now, or if we can just set it and it magically line everything up. Either way, the goal would be to have the player start automatically geo-locate without any additional steps.
		</comment>
		<comment id='5' author='courageon' date='2020-04-22T01:42:42Z'>
		Hello, If I have a point in unreal engine whose coordinates are (1000,2000,3000)
If I want to use Airsim APIs to reach this point. The coordinates in the Airsim API should be: (10,20,-30) to reach this point?
And another question, if I want to add an object to unreal engine, I place it then I click on build or build lighting or what else?
Thank you for your help.
Any suggestions &lt;denchmark-link:https://github.com/courageon&gt;@courageon&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/MSBGit&gt;@MSBGit&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='courageon' date='2020-04-22T02:21:00Z'>
		&lt;denchmark-link:https://github.com/MiraYaziji&gt;@MiraYaziji&lt;/denchmark-link&gt;
,it not reach this point.you should read pawnsimapi.cpp,it will convert ue4  coordinate to airsim coordinate.or you can compulate offset related to self.
		</comment>
		<comment id='7' author='courageon' date='2020-04-22T08:49:53Z'>
		Hello,
The point is that I didn't understand how to do the offset.
If I have a point having coordinates (a,b,c) in unreal engine, And I want the drone to go to this point. I/m controlling the drone using APIs, so what coordinates should I put when calling the APIs to reach the same point.
Thank you for your help.
&lt;denchmark-link:https://github.com/obitodaitu&gt;@obitodaitu&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/courageon&gt;@courageon&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/MSBGit&gt;@MSBGit&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='courageon' date='2020-04-22T09:05:09Z'>
		Please note that I am using python APIs
		</comment>
		<comment id='9' author='courageon' date='2020-04-22T13:27:03Z'>
		&lt;denchmark-link:https://github.com/MiraYaziji&gt;@MiraYaziji&lt;/denchmark-link&gt;
 ,
ASimHUD* CurrentHud = Cast(DronePlayerController-&gt;GetHUD());
Vector3r nedPosition = CurrentHud-&gt;simmode_-&gt;getVehicleSimApi(vehicle)-&gt;getNedTransform().toGlobalNed(Position);
		</comment>
		<comment id='10' author='courageon' date='2020-04-24T00:12:38Z'>
		&lt;denchmark-link:https://github.com/courageon&gt;@courageon&lt;/denchmark-link&gt;
 want to work together on the  fix?
		</comment>
		<comment id='11' author='courageon' date='2020-04-24T06:52:29Z'>
		Hi MiraYaziji,

The point is that I didn't understand how to do the offset.
If I have a point having coordinates (a,b,c) in unreal engine, And I want the drone to go to this point. I/m controlling the drone using APIs, so what coordinates should I put when calling the APIs to reach the same point.

This has been confusing to me as well until I read the following post that describes the relationship between Unreal Units and real-world measurements:
&lt;denchmark-link:https://subscription.packtpub.com/book/game_development/9781784394905/1/ch01lvl1sec10/what-is-an-unreal-unit&gt;What is an Unreal Unit?&lt;/denchmark-link&gt;

This helped me to understand how to use the simGetObjectPose() and simSetObjectPose() APIs to determine where an object (Actor) is located and then to move that object. Note that the coordinates used by these APIs are relative to the PlayerStart (or PlayerStartPIE) Actor. These APIs should also work to control the drone itself, although for my work I am using a Pixhawk 4 in a HITL configuration so I get and set the position of the drone using MAVSDK that talks directly to the Pixhawk.
Your question is what should the value of the coordinates in the AirSim API be to move your drone to a specific location. The APIs use NED SI units (so meters). You need to convert between meters to UE units, and that conversion depends on what value is in your World to Meters setting (by default in Unreal 4.22 and later it's 100 I think).
&lt;denchmark-link:https://github.com/microsoft/AirSim/blob/master/docs/apis.md#common-apis&gt;AirSim Common APIs&lt;/denchmark-link&gt;

		</comment>
		<comment id='12' author='courageon' date='2020-04-24T14:31:34Z'>
		&lt;denchmark-link:https://github.com/MSBGit&gt;@MSBGit&lt;/denchmark-link&gt;
 I've got a solution working for the origin geopoint actor. I may toss this over to you if you'd like to look into adding a flag to the settings file to allow switching between setting the geopoint at origin, or setting the geopoint at player-start. Right now I'm going on the premise of "if the OriginGeopoint actor exists in the level, then this level has been pre-designed for a specific location, use that location for geo-positioning in the level". In other words, it's hard-coded at that point and cannot be changed via settings file. But I could see the need to change it via settings file if you just wanted a geo marker pointed at a different location. Maybe add something in the settings file like "IgnoreOriginGeopointActor" or something?
I had a heck of a time trying to track down where in the code to add an offset for the OriginGeopoint actor's location. What I wound up doing is re-basing the geo-location of the origin (0,0,0) based on the location of the OriginGeopoint actor. The same technique should work for re-basing based on the player-start location as well.
Another thing that completely threw me off for a bit was the NED directions. In the UE's Level Composition this puts North facing left, and East facing up! But you can't tell once you start playing :)
Oh, and how do you do collaboration on a branch in github? I've never done it before. Should I fork and push what I have then you fork that? Merge, then PR for master?
		</comment>
		<comment id='13' author='courageon' date='2020-04-24T20:51:16Z'>
		&lt;denchmark-link:https://github.com/courageon&gt;@courageon&lt;/denchmark-link&gt;
 wow, that's great! I'd love to test.
Here's the page that describes how to contribute to AirSim:
&lt;denchmark-link:https://github.com/microsoft/AirSim/blob/master/docs/CONTRIBUTING.md&gt;Contributing to AirSim&lt;/denchmark-link&gt;

The project wants us to follow the C++ coding guidelines (style guide) and to file an issue first, which you did &lt;denchmark-link:https://github.com/microsoft/AirSim/issues/2588&gt;here&lt;/denchmark-link&gt;
.
It looks like the workflow is to fork AirSim into your own github account rather than just creating your own branch in the AirSim repo, so I would follow those instructions:
&lt;denchmark-link:https://akrabat.com/the-beginners-guide-to-contributing-to-a-github-project/&gt;The beginner's guide to contributing to a GitHub project&lt;/denchmark-link&gt;
 (note that this isn't the only way to contribute to a github project, it's the way that AirSim and other open source projects do their development workflow).
Then I think I can clone your forked repo and create my own branch locally so I can build and test your changes myself.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;


I may toss this over to you if you'd like to look into adding a flag to the settings file to allow switching between setting the geopoint at origin, or setting the geopoint at player-start. Right now I'm going on the premise of "if the OriginGeopoint actor exists in the level, then this level has been pre-designed for a specific location, use that location for geo-positioning in the level". In other words, it's hard-coded at that point and cannot be changed via settings file.

I won't realistically be able to work on the source code for at least a week (but I can build and test immediately). I'm working on some pre-release MAVSDK issues that need to be resolved soon. I think your premise of "if the OriginGeopoint actor exists int he environment, then use that location for the initial GPS coordinates that are used". That way, existing users don't need to modify their settings file, they just have to place the OriginGeopoint actor where they want the GPS origin to be.

But I could see the need to change it via settings file if you just wanted a geo marker pointed at a different location. Maybe add something in the settings file like "IgnoreOriginGeopointActor" or something?

Could you handle that case by placing OriginGeopoint where you want it, and that wouldn't affect PlayerStart or the drone stating location? Or am I missing what you're trying to do here?

I had a heck of a time trying to track down where in the code to add an offset for the OriginGeopoint actor's location. What I wound up doing is re-basing the geo-location of the origin (0,0,0) based on the location of the OriginGeopoint actor. The same technique should work for re-basing based on the player-start location as well.

Does you mean you moved the origin of the map to OriginGeopoint, so that if I didn't have OriginGeopoint in my environment, the map would be based at some non-zero values, but if OriginGeopoint exists, the map would be based at 0,0,0?

Another thing that completely threw me off for a bit was the NED directions. In the UE's Level Composition this puts North facing left, and East facing up! But you can't tell once you start playing :)

Interesting. I am setting and getting NED position of my virtual drone using MAVSDK (the getting NED API is what's I'm working on testing since it's not available in MAVSDK master). I'll verify what NED in MAVSDK/PX4 space means compared to what it means in Unreal.
		</comment>
		<comment id='14' author='courageon' date='2020-04-24T21:20:54Z'>
		Hi MiraYaziji,

The point is that I didn't understand how to do the offset.
If I have a point having coordinates (a,b,c) in unreal engine, And I want the drone to go to this point. I/m controlling the drone using APIs, so what coordinates should I put when calling the APIs to reach the same point.

Try this, this assumes World to Meters is 100:
&lt;denchmark-code&gt;def unrealToAirSimNED(xyz):
    """ Unreal by default is in centimeters and z is positive-up.
    AirSim is in meters and z is positive-down."""
    xyz = xyz * 0.01
    xyz[2] = -xyz[2]
    return xyz
&lt;/denchmark-code&gt;

		</comment>
		<comment id='15' author='courageon' date='2020-04-25T19:08:08Z'>
		Okay, Thank you &lt;denchmark-link:https://github.com/MSBGit&gt;@MSBGit&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/obitodaitu&gt;@obitodaitu&lt;/denchmark-link&gt;
.
I will take your propositions into consideration and try to use them
		</comment>
		<comment id='16' author='courageon' date='2020-04-25T20:12:59Z'>
		To add the object in unreal engine, I just adjust its coordinates? And then what should I do, I click on build or build lighting or what else?
Thank you,
&lt;denchmark-link:https://github.com/MSBGit&gt;@MSBGit&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/obitodaitu&gt;@obitodaitu&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/courageon&gt;@courageon&lt;/denchmark-link&gt;

		</comment>
		<comment id='17' author='courageon' date='2020-04-26T20:06:32Z'>
		&lt;denchmark-link:https://github.com/MiraYaziji&gt;@MiraYaziji&lt;/denchmark-link&gt;
,

To add the object in unreal engine, I just adjust its coordinates? And then what should I do, I click on build or build lighting or what else?

This kind of question would be better asked in the &lt;denchmark-link:https://forums.unrealengine.com&gt;Unreal forums&lt;/denchmark-link&gt;
 since it's not really an AirSim issue.
		</comment>
		<comment id='18' author='courageon' date='2020-05-12T19:04:37Z'>
		&lt;denchmark-link:https://github.com/courageon&gt;@courageon&lt;/denchmark-link&gt;
 how's things going with the Origin Geopoint changes?
		</comment>
		<comment id='19' author='courageon' date='2020-11-11T21:48:00Z'>
		Hi &lt;denchmark-link:https://github.com/courageon&gt;@courageon&lt;/denchmark-link&gt;
! Thank you for your involvement in the project! We want to fix this issue. If you want to share your code (preferably in a PR), it would be great!
		</comment>
	</comments>
</bug>