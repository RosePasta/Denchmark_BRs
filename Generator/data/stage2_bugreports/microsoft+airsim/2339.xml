<bug id='2339' author='changh95' open_date='2019-12-10T10:02:43Z' closed_time='2020-11-04T02:30:27Z'>
	<summary>Mismatch in quaternion orders in response.camera_orientation.coeffs() and Eigen::Quaternion</summary>
	<description>
Currently using the latest version of airsim, on computer vision mode.
I am trying to reproduce the motion from one scene to another. I have recorded pose data over time on one scene onto a csv file by using simGetVehiclePose() , and then on the other scene I set the object pose from the pose data I got on the csv file by using simSetVehiclePose(). The objects from two scenes have the same starting point and same starting orientation.
What I expected was the exact same motion being reproduced at the new scene. The motion is delievered the same way, but the orientation of the object is wrong. Assumingly, simSetVehiclePose should set the pose exactly the same, but it's not working this way. What I've noticed is that the position is delivered correctly, just not the orientation.
What can be causing this?
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

When I record pose on csv, this is the code I used
data[0].camera_position[0] &lt;&lt; "," &lt;&lt; data[0].camera_position[1] &lt;&lt; "," &lt;&lt; data[0].camera_position[2] &lt;&lt; "," &lt;&lt; data[0].camera_orientation.coeffs()[0] &lt;&lt; "," &lt;&lt; data[0].camera_orientation.coeffs()[1] &lt;&lt; "," &lt;&lt; data[0].camera_orientation.coeffs()[2] &lt;&lt; "," &lt;&lt; data[0].camera_orientation.coeffs()[3]
and when I set the pose, this is the code I used
tx = std::stof(row[0]);
ty = std::stof(row[1]);
tz = std::stof(row[2]);
qw = std::stof(row[3]);
qx = std::stof(row[4]);
qy = std::stof(row[5]);
qz = std::stof(row[6]);
Eigen::Vector3f position(tx, ty, tz);
Eigen::Quaternion&lt;float, Eigen::DontAlign&gt; quaternion(qw, qx, qy, qz);
cvPose = Pose(position, quaternion);
client.simSetVehiclePose(cvPose, true);
	</description>
	<comments>
		<comment id='1' author='changh95' date='2019-12-10T10:29:05Z'>
		Found what's wrong.
I've been getting the quaternion values by calling from response directly - response.camera_orientation.coeffs, and I've been putting these values directly into Eigen::Quaternion&lt;float, Eigen::DontAlign&gt; quaternion(qw, qx, qy, qz).
But turns out, when I make quaternion objects, I need to put it in order of 'qz, qw, qx, qy'.
This can be confusing to many, since the API gives quaternion out as 'qw, qx, qy, qz' and the official Eigen library also uses 'qw, qx, qy, qz', but it the order of qz, qw, qx, qy' seems a bit weird.
		</comment>
		<comment id='2' author='changh95' date='2020-11-03T14:03:39Z'>
		Although bit late, I can confirm that this issue is no longer there in the master. Just tested it now and qw, qx, qy, qz is the order used in creating a  quaternion.
		</comment>
		<comment id='3' author='changh95' date='2020-11-04T02:30:27Z'>
		
Although bit late, I can confirm that this issue is no longer there in the master. Just tested it now and qw, qx, qy, qz is the order used in creating a quaternion.

Thanks for the update - I haven't been able to catch up with this bug.
I'm glad it's solved!
		</comment>
	</comments>
</bug>