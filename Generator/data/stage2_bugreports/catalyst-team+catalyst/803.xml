<bug id='803' author='baibaidj' open_date='2020-05-12T11:21:58Z' closed_time='2020-05-20T02:54:54Z'>
	<summary>Fail to get Transform function</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug Report&lt;/denchmark-h&gt;

I think a bug exists here &lt;denchmark-link:https://github.com/catalyst-team/catalyst/blob/master/catalyst/dl/experiment/config.py#L415&gt;https://github.com/catalyst-team/catalyst/blob/master/catalyst/dl/experiment/config.py#L415&lt;/denchmark-link&gt;
.
So the line "elif not isinstance(transform, AugmentorCompose)" is trying to check if the "transform" function generated is a AugmentorCompose object. When I use the transform.yml provided in _test_cv_segmentation, the resulting transform is in fact a Compose object and will be judged as NOT AugmentorCompose. Finally the returning transform cannot accept the dict with 'image' and 'mask' keys as input, thus leading to error. Without this judgment (e.g. removing the not), the transform will behave as anticipated.
&lt;denchmark-h:h3&gt;How To Reproduce&lt;/denchmark-h&gt;

Steps to reproduce the behavior:

Go to https://github.com/catalyst-team/catalyst/tree/master/tests/_tests_cv_segmentation
Run the training script with the transform.yml in the folder.
you should be able to encounter the error.

&lt;denchmark-h:h4&gt;Code sample&lt;/denchmark-h&gt;

this code is in the tests folder.
&lt;denchmark-h:h4&gt;Screenshots&lt;/denchmark-h&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/24452296/81765596-d12dbf00-9506-11ea-8e01-436f9bff7700.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/24452296/81765637-f28eab00-9506-11ea-81c7-9624db69b315.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

get a transform function (Compose object from albumentation) that can accept a dict with 'image' and 'mask' keys as input and do the transformation as indicted in the transform.yml.
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;

Catalyst version: 20.05
PyTorch version: 1.1.0
TensorFlow version: 2.2.0
TensorBoard version: 2.2.0
OS: Ubuntu 16.04.3 LTS
Python version: 3.6
CUDA runtime version: Could not collect
Nvidia driver version: 387.26
cuDNN version: Could not collect
&lt;denchmark-h:h3&gt;Additional context&lt;/denchmark-h&gt;

	</description>
	<comments>
		<comment id='1' author='baibaidj' date='2020-05-13T06:30:23Z'>
		&lt;denchmark-link:https://github.com/bagxi&gt;@bagxi&lt;/denchmark-link&gt;
 what do you think about this case?
		</comment>
		<comment id='2' author='baibaidj' date='2020-05-13T07:57:46Z'>
		Could you please describe what do you mean by a bug?
There are two layers of _key_value in the get_transforms function. And in each case logic is a little bit different:

If transform_params isn't defined in the config, then the output will be an identity function. See https://github.com/catalyst-team/catalyst/blob/master/catalyst/dl/experiment/config.py#L412 for details.
The first key is False e.g.
transform_params:
  transform: albumentation.Compose
  transforms: [list of amazing image-mask transforms]

The same transform will be used for all data loaders. albumentation transforms expects that the input will be passed as key-value (transform(image=image, mask=mask)) and by default dataset return dicts. That's why we wrap transform with the helper function that will unpack dict for us. See https://github.com/catalyst-team/catalyst/blob/master/catalyst/dl/experiment/config.py#L418 for details.
The first key is True, the second is False -&gt; similar to 2. but for each loader, the custom transform can be applied. See https://github.com/catalyst-team/catalyst/blob/master/catalyst/dl/experiment/config.py#L407 for details.
The first key is True, the second is True, e.g.:
transform_params:
  _key_value: True
  train:
    _key_value: True
    image:
      transform: albumentation.Compose
      transforms: [list of amazing image transforms]
    mask:
      transform: albumentation.Compose
      transforms: [list of amazing mask transforms]

Transform of each key of each sample is independent. To handle this logic so we added AugmentorCompose abstraction. Input for AugmentorCompose is dict, so there is no need to wrap transform with helper function as in 2. and 3. See https://github.com/catalyst-team/catalyst/blob/master/catalyst/dl/experiment/config.py#L412 for details.

So, could you check the implementation of your dataset?
		</comment>
		<comment id='3' author='baibaidj' date='2020-05-14T02:50:15Z'>
		Thank you for the elaborate explanation. I may need more time to make sense of it.
In my testing, the transform.yml configuration falls into the 3rd category True for the first key and False for the second. The specifics is like this :
&lt;denchmark-code&gt;transform_params:
    _key_value: True
    train:
      transform: A.Compose
      transforms:
        - transform: A.SmallestMaxSize
          max_size: *resize_size
          p: 1.0
&lt;/denchmark-code&gt;

I implemented my dataset like this:
&lt;denchmark-code&gt;    def __getitem__(self, idx: int) -&gt; dict:
        """Main method"""
        img_path = self.images[idx]
        image = open_image_multi_channel(img_path, channel= 3)
        mask = open_mask_random(self.masks[idx])
        result = {'image': image}
        # extract certain classes from mask (e.g. cars)
        if self.label_mapping is not None:
            mask = convert_label(mask, self.label_mapping)
        result['mask'] = mask
        if self.transforms:
            result = self.transforms(**result) # ablu.transform ÂèØ‰ª•ÂØπ2d mask ËøõË°åÊìç‰Ωú
            # add 1 channel to binary mask to be compatible with prediction
            result['mask'] = result['mask'].float().unsqueeze(0)
        result['filename'] = str(img_path)
        # print_range(result['image'].numpy(), result['mask'].numpy())
        return result

&lt;/denchmark-code&gt;

When running the training, I encountered the issue shown in the screenshots.
In the first screenshot, I tried to print the type of the transforms before and after the judgement chunk. As your can see, after the judgement, the transforms  is no longer the supposedly albu.Compose object but some kind of function instead.  As a result, it could not accept input: dict as kwargs and throw out error as shown by the second screenshot.
But after I removed the not in the elif not isinstance(transform, AugmentorCompose):, the issue went away and the training is running smoothly.
Based on these observation, I assumed that the not may not be in the right place.
Hope I explained clearly.
		</comment>
		<comment id='4' author='baibaidj' date='2020-05-14T09:06:07Z'>
		&lt;denchmark-code&gt;if self.transforms:
    result = self.transforms(result)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='baibaidj' date='2020-05-20T02:54:37Z'>
		
if self.transforms:
    result = self.transforms(result)


Thank you. With your suggestion and the original catalyst lib, my code can run smoothly.
I think I was misled by the segmentation-tutorial which used **result like follows:
&lt;denchmark-link:https://user-images.githubusercontent.com/24452296/82399630-2c702c00-9a88-11ea-8c36-3d83d137bc6d.png&gt;&lt;/denchmark-link&gt;

Anyway, thank you again. I will close this issue.
		</comment>
		<comment id='6' author='baibaidj' date='2020-06-02T07:32:42Z'>
		
if self.transforms:
    result = self.transforms(result)


When I use Albumentations package for data augmentation,  I will get an error with this line of code as follows:
&lt;denchmark-code&gt;File "/home/xxx/git/semseg/catalyst_pneumonia/dataset.py", line 59, in __getitem__. 
  result = self.transforms(result) 
File "/home/xxx/miniconda3/envs/py36/lib/python3.6/site-packages/albumentations/core/composition.py", line 164, in __call__  
  assert isinstance(force_apply, (bool, int)), "force_apply must have bool or int type"   
 AssertionError: force_apply must have bool or int type
&lt;/denchmark-code&gt;

Please refer to &lt;denchmark-link:https://github.com/albumentations-team/albumentations/blob/26958c4d3261f911b35175721371e07c8c2b0bb8/albumentations/core/composition.py#L164&gt;https://github.com/albumentations-team/albumentations/blob/26958c4d3261f911b35175721371e07c8c2b0bb8/albumentations/core/composition.py#L164&lt;/denchmark-link&gt;

So I have to use input the result as **kwargs.
		</comment>
	</comments>
</bug>