<bug id='779' author='evfro' open_date='2020-04-29T05:33:12Z' closed_time='2020-07-05T14:48:52Z'>
	<summary>installation fails on crc32c setup (Windows 10)</summary>
	<description>
System info:
&lt;denchmark-code&gt;Windows 10 ver.1903, x64
python ver. 3.8.3, build MSC v.1916 64 bit (using conda)
&lt;/denchmark-code&gt;

Running pip install -U catalyst fails at the crc32 setup stage:
Building wheel for crc32c (setup.py) ... error
  ERROR: Command errored out with exit status 1:
...
ERROR: Failed building wheel for crc32c
Apparently, the  module doesn't build against Visual Studio, see &lt;denchmark-link:https://github.com/ICRAR/crc32c/issues/1&gt;ICRAR/crc32c#1&lt;/denchmark-link&gt;
. However, VS builds are default on Windows systems for python.
I wonder if the crc32c module is necessary at all. For example, there's some crc32 functionality in the binascii module, e.g.:
import binascii
buf = open("my_file.zip","rb").read()
print( binascii.crc32(buf))
Wouldn't it be sufficient? Thanks!
	</description>
	<comments>
		<comment id='1' author='evfro' date='2020-05-05T10:58:45Z'>
		Hi,
Good catch, we will check this issue during next release.
I hope, we could also write to &lt;denchmark-link:https://github.com/velikodniy&gt;@velikodniy&lt;/denchmark-link&gt;
 as tbparser creator.
Meanwhile, do you have you problems with unix-based operation systems?
		</comment>
		<comment id='2' author='evfro' date='2020-05-05T11:08:58Z'>
		&lt;denchmark-link:https://github.com/Scitator&gt;@Scitator&lt;/denchmark-link&gt;
 hi, thanks.
Well, actually, I don't have problems on Windows 10 either after installing recent VS C++ build tools. But it requires +1.4Gb of storage, which seems to be an overkill for supporting a little 3rd party crc32 tool.
		</comment>
		<comment id='3' author='evfro' date='2020-05-05T12:12:16Z'>
		CRC32 and CRC32C are slightly different algorithms so that we can't simply replace  with . Although the computation is the same, CRC32C uses a different polynomial, and the results are different. I used  instead of pure-Python implementation because crc32c is a highly optimized library that can use the CRC32C instruction from the SSE 4.2 set (if it is available). It's normal for tensorboard logs to be huge, so speed matters.
That is strange that you couldn't install it on Windows. As far as I can see, the wheels in the &lt;denchmark-link:https://pypi.org/project/crc32c/#files&gt;PyPI repository&lt;/denchmark-link&gt;
 contain precompiled binaries, and there is no need to have Visual Studio installed at all. I would advise you to create an issue for &lt;denchmark-link:https://github.com/ICRAR/crc32c&gt;crc32c&lt;/denchmark-link&gt;
 if the problem persists.
As a workaround, we can remove crc32c from dependencies at all. We can use   if it's installed and pure-Python (and slow) implementation if not.
&lt;denchmark-link:https://github.com/Scitator&gt;@Scitator&lt;/denchmark-link&gt;
 what do you think?
		</comment>
		<comment id='4' author='evfro' date='2020-05-05T16:56:19Z'>
		&lt;denchmark-link:https://github.com/velikodniy&gt;@velikodniy&lt;/denchmark-link&gt;
 What do you think about  use if it's installed and pure python  one if not. Our contrib tensorflow parser already have similar logic for tensorboard writer.
There should be simple  condition somewhere here :)
github.com/catalyst-team/catalyst/blob/master/catalyst/contrib/utils/tools/tensorboard.py#L14#L16
		</comment>
		<comment id='5' author='evfro' date='2020-05-05T17:58:44Z'>
		
What do you think about crc32c use if it's installed and pure python crc32c one if not.

It's exactly what I proposed. :)
		</comment>
		<comment id='6' author='evfro' date='2020-05-05T18:19:12Z'>
		Oh! I've just realized that I implemented it already in  &lt;denchmark-link:https://github.com/lanpa/tensorboardX/pull/429&gt;lanpa/tensorboardX#429&lt;/denchmark-link&gt;
.  We can use  from this library until we drop it from dependencies and replace with  (if we do).
So, all we need is love to replace this one
&lt;denchmark-code&gt;if os.environ.get("CRC32C_SW_MODE", None) is None:
    os.environ["CRC32C_SW_MODE"] = "auto"
from crc32c import crc32 as crc32c  # noqa: E402
&lt;/denchmark-code&gt;

with this one:
&lt;denchmark-code&gt;from tensorboardX.crc32c import crc32c
&lt;/denchmark-code&gt;

Don't forget to remove crc32c from the dependencies and make a note in the README file about speedup if the library is installed.
		</comment>
		<comment id='7' author='evfro' date='2020-05-06T05:25:08Z'>
		&lt;denchmark-link:https://github.com/evfro&gt;@evfro&lt;/denchmark-link&gt;
 would you like to make your first time contribution into project?
Based on current discussion, it should be easy to do, and I would be glad to welcome new contributor :)
		</comment>
		<comment id='8' author='evfro' date='2020-05-15T06:21:15Z'>
		&lt;denchmark-link:https://github.com/evfro&gt;@evfro&lt;/denchmark-link&gt;
 How are you? what do you think about my proposal?
		</comment>
		<comment id='9' author='evfro' date='2020-05-15T06:49:02Z'>
		&lt;denchmark-link:https://github.com/Scitator&gt;@Scitator&lt;/denchmark-link&gt;
 sorry, this month is densely packed for me. I can try in June if I'll find some spare time.
		</comment>
		<comment id='10' author='evfro' date='2020-07-05T14:48:51Z'>
		fixed during &lt;denchmark-link:https://github.com/catalyst-team/catalyst/pull/872&gt;#872&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>