<bug id='993' author='geoHeil' open_date='2020-11-09T22:24:21Z' closed_time='2020-11-12T07:14:39Z'>
	<summary>basic MNIST examples fail with wrong shape</summary>
	<description>
When trying to execute the basic classification tutorials of MNIST - it fails with tensors of a wrong shape:
&lt;denchmark-code&gt;view size is not compatible with input tensor's size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(...) instead.

&lt;/denchmark-code&gt;

to reproduce:
&lt;denchmark-code&gt;conda create --name torch
conda activate torch
conda install -y jupyter pytorch torchvision torchaudio python=3.8 -c pytorch -c conda-forge

&lt;/denchmark-code&gt;

and the nexecute in the notebook:
&lt;denchmark-code&gt;import os
import torch
from torch.nn import functional as F
from torch.utils.data import DataLoader
from catalyst import dl, metrics
from catalyst.data.cv import ToTensor
from catalyst.contrib.datasets import MNIST

model = torch.nn.Linear(28 * 28, 10)
optimizer = torch.optim.Adam(model.parameters(), lr=0.02)

loaders = {
    "train": DataLoader(MNIST(os.getcwd(), train=True, download=True, transform=ToTensor()), batch_size=32),
    "valid": DataLoader(MNIST(os.getcwd(), train=False, download=True, transform=ToTensor()), batch_size=32),
}

class CustomRunner(dl.Runner):

    def _handle_batch(self, batch):
        x, y = batch
        y_hat = self.model(x.view(x.size(0), -1))

        loss = F.cross_entropy(y_hat, y)
        accuracy01, accuracy03, accuracy05 = metrics.accuracy(y_hat, y, topk=(1, 3, 5))
        self.batch_metrics = {
            "loss": loss,
            "accuracy01": accuracy01,
            "accuracy03": accuracy03,
            "accuracy05": accuracy05,
        }
        
        if self.is_train_loader:
            loss.backward()
            self.optimizer.step()
            self.optimizer.zero_grad()

runner = CustomRunner()
runner.train(
    model=model, 
    optimizer=optimizer, 
    loaders=loaders, 
    verbose=True,
)
&lt;/denchmark-code&gt;

After the download &amp; extraction I see the following warning:
&lt;denchmark-code&gt;/usr/local/Caskroom/miniconda/base/envs/torch/lib/python3.8/site-packages/catalyst/contrib/datasets/functional.py:205: UserWarning:

The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /Users/distiller/project/conda/conda-bld/pytorch_1603740477510/work/torch/csrc/utils/tensor_numpy.cpp:141.)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='geoHeil' date='2020-11-09T22:25:05Z'>
		Hi! Thank you for your contribution! Great first issue! Please &lt;denchmark-link:https://join.slack.com/t/catalyst-team-core/shared_invite/zt-d9miirnn-z86oKDzFMKlMG4fgFdZafw&gt;join our slack&lt;/denchmark-link&gt;
 for issue discussion (#__questions channel).
		</comment>
		<comment id='2' author='geoHeil' date='2020-11-10T04:34:23Z'>
		Hi, could you please try pip install torch&lt;1.7.0? There is a backward compatibility issue in the new version of the PyTorch :)
PS. Meanwhile, the new Catalyst version would be ~tomorrow with a compatibility fix.
		</comment>
		<comment id='3' author='geoHeil' date='2020-11-10T07:39:54Z'>
		awesome - I think then I will try to wait and read some more docus and introductions to PyTorch today. Please ping me here / close the issue when the new version is published. Many thanks.
		</comment>
		<comment id='4' author='geoHeil' date='2020-11-12T07:14:39Z'>
		New release - done :)
		</comment>
	</comments>
</bug>