<bug id='247' author='Paperone80' open_date='2019-03-31T02:50:40Z' closed_time='2019-06-12T21:37:08Z'>
	<summary>Augmentation per image applied to multiple bboxes but not to masks</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

Hi,
When the input data dict is like this:
&lt;denchmark-code&gt;def aug_test(p=1., bbox_format='pascal_voc', min_area=0., min_visibility=0.):
    return Compose(
        [
            (VerticalFlip(p=0.))
            , (RandomRotate90(p=1))
        ]
        , bbox_params={'format': bbox_format, 
                       'min_area': min_area, 
                       'min_visibility': min_visibility, 
                       'label_fields': ['category_id']
                      }
        , p=p)

data = {'image': image
        , 'bboxes': [[bbox_1], bbox_2]
        , 'category_id': annotations['category_id']
        , 'mask': mask_1

augmentation = aug_test(p=1)
augmented = augmentation(**data)
&lt;/denchmark-code&gt;

The 2 bboxes are transformed correctly and the one mask as well.
However, if the data is changed to reflect the corresponding masks to the bboxes then augmentation fails or returns meshed up arrays.
&lt;denchmark-code&gt;data = {'image': image
        , 'bboxes': [[bbox_1], bbox_2]
        , 'category_id': annotations['category_id']
        , 'mask': [mask_1, mask_2]  
}
&lt;/denchmark-code&gt;

Sometimes the returned  looks like this:
&lt;denchmark-code&gt;augmented['mask'].shape=(height, 2, width). 
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

Expected would be that augmentation is applied to each mask separately and returned like 'bboxes', e.g.
&lt;denchmark-code&gt;augmented['mask'][0].shape=(height, width)
augmented['mask'][1].shape=(height, width)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Why is this important?&lt;/denchmark-h&gt;

The expected behaviour reflects the way how data is stored in tf.record for example to save space:
&lt;denchmark-code&gt;[...]
'image/encoded': bytes_feature(encoded_jpg)
'image/object/bbox/xmin': bytes_list_feature([])
 'image/object/bbox/xmax': bytes_list_feature([])
 'image/object/bbox/ymin': bytes_list_feature([])
 'image/object/bbox/ymax': bytes_list_feature([])
'image/object/mask': bytes_list_feature([])
[...]
&lt;/denchmark-code&gt;

Alternative would be to augment 1 image, 1 bbox and 1 mask together at a time and store which uses more space than necessary because you often have multiple bboxes/masks per image, imho.
Maybe worth a fix. Maybe there is another way around it I have not seen yet because I just started playing with the library (which is awesome, btw) since yesterday. Thanks.
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


Albumentations version (e.g., 0.2.2): 0.2.2
Python version (e.g., 3.5): 3.5
OS (e.g., Linux): Red Hat 7.4
How you installed albumentations (conda, pip, source): pip
Any other relevant information: n/a

	</description>
	<comments>
		<comment id='1' author='Paperone80' date='2019-06-25T06:25:09Z'>
		&lt;denchmark-link:https://github.com/ternaus&gt;@ternaus&lt;/denchmark-link&gt;
, has the issue been fixed or is it not of a priority right now? Thanks.
		</comment>
		<comment id='2' author='Paperone80' date='2020-10-15T03:46:06Z'>
		&lt;denchmark-link:https://github.com/ternaus&gt;@ternaus&lt;/denchmark-link&gt;
 Has this been fixed? I have coco json polygon annotations and I want to crop them (image, bbox, and mask) then write the new cropped coco_json files.
		</comment>
		<comment id='3' author='Paperone80' date='2020-10-15T11:59:03Z'>
		Masks are the images, so they are must have the shape [height, width, channels] and must be numpy.ndarray
The author of the issue provided mask in the wrong format, as I understand in the format [channels, height, width]
If you want to change masks you need at first decode them to numpy.ndarrya and then encode them into polygons. For this purposes you can use pycocotools.
		</comment>
	</comments>
</bug>