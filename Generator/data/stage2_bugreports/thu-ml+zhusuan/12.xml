<bug id='12' author='ssydasheng' open_date='2016-11-12T15:50:10Z' closed_time='2016-11-14T02:43:24Z'>
	<summary>log_pdf in StocahsticGraph's get_output has the same size with the output tensor(Branch model)</summary>
	<description>
In branch model,
the log_pdf in StocahsticGraph's get_output has the same size with the targeted output tensor, which differs from the master setting, in which the log_pdf  will be shape (batch_size, n_samples) by reduce_sum.
In &lt;denchmark-link:https://github.com/thu-ml/zhusuan/issues/42&gt;#42&lt;/denchmark-link&gt;
 of ../zhusuan/variational.py
&lt;denchmark-code&gt;    lower_bound = model.log_prob(latent_outputs, observed, given) - \
        sum(latent_logpdfs)_
&lt;/denchmark-code&gt;

will crash because of adding latent_logpdfs of different shapes.
	</description>
	<comments>
		<comment id='1' author='ssydasheng' date='2016-11-12T15:50:20Z'>
		&lt;denchmark-link:https://github.com/thjashin&gt;@thjashin&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='ssydasheng' date='2016-11-13T02:26:10Z'>
		Hi &lt;denchmark-link:https://github.com/ssydasheng&gt;@ssydasheng&lt;/denchmark-link&gt;
 ,
Actually that's what I intended to. In the new api, there is no further assumptions about shape of the Tensors. no  anymore. With new s, you can sample in any  you want. You can take a look at examples/vae.py. Over the days I have thought about for a graphical model, there is nothing special to , it's just a plate (a rectangle). So my choice in vae.py is just build the model (p(x,z)) like the graphical view ( as ,  as ,  as ), what I add to make it more suitable in variational setting is just adding a  (i.e. n_samples) dimension before all of these shapes, which can be seen as we allow multiple samples (particles) to pass through a node in the graphical model. That meets the need when getting q(z) samples of shape  so that these samples can be passed into models.
Normal and Bernoulli actually means independent Normal and independent Bernoulli. Discrete will sum over the last dimension. If you look at my new vae under examples/, it sums logpdf by hand over the dimension you want and then gets passed to advi. I will further change the api of advi to make this more comfortable.
For your case, if w is of shape (n1, n2), I guess you can define w_mean, w_logstd, w as shape (n_particles, n1, n2), qw_mean, qw_logstd can be as shape (n1, n2), and qw=Normal(qw_mean, qw_logstd, sample_dim=0, n_samples=n_particles)
Above may be a little messy to understand, we can chat in details.
		</comment>
	</comments>
</bug>