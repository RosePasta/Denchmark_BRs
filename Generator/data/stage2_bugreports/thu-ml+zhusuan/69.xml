<bug id='69' author='botev' open_date='2017-11-01T20:32:46Z' closed_time='2017-11-09T05:11:19Z'>
	<summary>Issue with the shapes required in tf.layers</summary>
	<description>
Following a standard VAE example for the geneative model that looks like this:
&lt;denchmark-code&gt;@zs.reuse("p")
def gen2(func, observed, bs, dim_z, n_samples):
    with zs.BayesianNet(observed=observed) as p:
        z_mean = tf.zeros([bs, dim_z])
        z = zs.Normal("z", z_mean, std=1., group_ndims=1, n_samples=n_samples)
        x_logits = func(z)
        x = zs.Bernoulli("x", x_logits, group_ndims=1)
    return p
&lt;/denchmark-code&gt;

where func just applies a bunch of dense layers from tf.layers I get the error:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/opt/pycharm-2017.2.3/helpers/pydev/pydevd.py", line 1599, in &lt;module&gt;
    globals = debugger.run(setup['file'], None, None, is_module)
  File "/opt/pycharm-2017.2.3/helpers/pydev/pydevd.py", line 1026, in run
    pydev_imports.execfile(file, globals, locals)  # execute the script
  File "/opt/pycharm-2017.2.3/helpers/pydev/_pydev_imps/_pydev_execfile.py", line 18, in execfile
    exec(compile(contents+"\n", file, 'exec'), glob, loc)
  File "/home/alex/work/python/eval_vi/bin/test.py", line 37, in &lt;module&gt;
    p = gen2(gen_func, {"z": qz_samples, "x": x_bin}, bs, dim_z, n_samples)
  File "/opt/miniconda3/lib/python3.6/site-packages/tensorflow/python/ops/template.py", line 278, in __call__
    result = self._call_func(args, kwargs, check_for_new_variables=False)
  File "/opt/miniconda3/lib/python3.6/site-packages/tensorflow/python/ops/template.py", line 217, in _call_func
    result = self._func(*args, **kwargs)
  File "/home/alex/work/python/eval_vi/bb_eval_vi/models/__init__.py", line 82, in gen2
    x_logits = func(z)
  File "/home/alex/work/python/eval_vi/bb_eval_vi/models/__init__.py", line 47, in dense_stack
    return stack.apply(inputs)
  File "/opt/miniconda3/lib/python3.6/site-packages/tensorflow/python/layers/base.py", line 721, in apply
    return self.__call__(inputs, *args, **kwargs)
  File "/opt/miniconda3/lib/python3.6/site-packages/tensorflow/python/layers/base.py", line 594, in __call__
    input_shapes = nest.map_structure(lambda x: x.get_shape(), inputs)
  File "/opt/miniconda3/lib/python3.6/site-packages/tensorflow/python/util/nest.py", line 387, in map_structure
    structure[0], [func(*x) for x in entries])
  File "/opt/miniconda3/lib/python3.6/site-packages/tensorflow/python/util/nest.py", line 387, in &lt;listcomp&gt;
    structure[0], [func(*x) for x in entries])
  File "/opt/miniconda3/lib/python3.6/site-packages/tensorflow/python/layers/base.py", line 594, in &lt;lambda&gt;
    input_shapes = nest.map_structure(lambda x: x.get_shape(), inputs)
AttributeError: 'Normal' object has no attribute 'get_shape'

originally defined at:
  File "/home/alex/work/python/eval_vi/bin/test.py", line 4, in &lt;module&gt;
    from bb_eval_vi.models import *
  File "&lt;frozen importlib._bootstrap&gt;", line 971, in _find_and_load
  File "&lt;frozen importlib._bootstrap&gt;", line 955, in _find_and_load_unlocked
  File "&lt;frozen importlib._bootstrap&gt;", line 665, in _load_unlocked
  File "&lt;frozen importlib._bootstrap_external&gt;", line 678, in exec_module
  File "&lt;frozen importlib._bootstrap&gt;", line 219, in _call_with_frames_removed
  File "/home/alex/work/python/eval_vi/bb_eval_vi/models/__init__.py", line 77, in &lt;module&gt;
    @zs.reuse("p")
  File "/home/alex/work/python/zhusuan/zhusuan/model/base.py", line 413, in &lt;lambda&gt;
    return lambda f: tf.make_template(scope, f)
&lt;/denchmark-code&gt;

Which I think is related to the fact that the model classes have no shapes. However, this makes it quite inconvinient to use like this.
	</description>
	<comments>
		<comment id='1' author='botev' date='2017-11-02T16:00:33Z'>
		Yes. This is due to the fact that we don't have get_shape() method for StochasticTensors. For the moment you could use layers from the contrib/slim, just like in most examples:
from tensorflow.contrib import layers
This works well. Or you could pass the tensor attribute instead of the instance itself:
tf.layers.dense(z.tensor, 100)
Implementing a get_shape() method seems not much work, we'll have a fix soon.
		</comment>
		<comment id='2' author='botev' date='2017-11-02T17:13:20Z'>
		If the issue is just
&lt;denchmark-code&gt;def get_shape():
    return tf.get_shape(self.tensor)
&lt;/denchmark-code&gt;

I can do that, sounds quite simple.
		</comment>
		<comment id='3' author='botev' date='2017-11-03T03:23:11Z'>
		I guess that's it. Does it work?
		</comment>
	</comments>
</bug>