<bug id='2978' author='wfwiggins' open_date='2020-11-12T21:12:10Z' closed_time='2020-11-22T13:54:56Z'>
	<summary>`TextDataLoaders.from_df()` returns `TypeError: 'float' object is not iterable`</summary>
	<description>
Please confirm you have the latest versions of fastai, fastcore, fastscript, and nbdev prior to reporting a bug (delete one): YES
&lt;denchmark-code&gt;fastai==2.1.5
fastcore==1.3.4
&lt;/denchmark-code&gt;

Describe the bug
Creating TextDataLoaders.from_df(...) fails with TypeError: 'float' object is not iterable.
To Reproduce
Code to reproduce the behavior:
&lt;denchmark-code&gt;&gt;&gt;&gt; dls_lm = TextDataLoaders.from_df(train_val, valid_pct=0.3, seed=42, text_col='full-text', is_lm=True) # FAILS
&gt;&gt;&gt; dls_cls = TextDataLoaders.from_df(train_val, valid_pct=validation_pct, seed=42, text_col=training_target, label_col='label', text_vocab=lm_vocab) # FAILS
&lt;/denchmark-code&gt;

See Colab notebook at &lt;denchmark-link:https://colab.research.google.com/github/wfwiggins/RSNA-NLP-2020/blob/master/RSNA20_NLP.ipynb&gt;this link&lt;/denchmark-link&gt;
.
Expected behavior
Should return TextDataLoaders to the assigned variable.
Error with full stack trace
&lt;denchmark-code&gt;---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-11-396b44668da0&gt; in &lt;module&gt;()
     11 
     12 lm_vocab = torch.load('vocab.pkl')
---&gt; 13 dls_cls = TextDataLoaders.from_df(train_val, valid_pct=validation_pct, seed=42, text_col=training_target, label_col='label', text_vocab=lm_vocab)
     14 dls_cls.show_batch(max_n=3)

13 frames
/usr/local/lib/python3.6/dist-packages/fastai/text/data.py in from_df(cls, df, path, valid_pct, seed, text_col, label_col, label_delim, y_block, text_vocab, is_lm, valid_col, tok_tfm, seq_len, backwards, **kwargs)
    272                            get_y=None if is_lm else ColReader(label_col, label_delim=label_delim),
    273                            splitter=splitter)
--&gt; 274         return cls.from_dblock(dblock, df, path=path, seq_len=seq_len, **kwargs)
    275 
    276     @classmethod

/usr/local/lib/python3.6/dist-packages/fastai/data/core.py in from_dblock(cls, dblock, source, path, bs, val_bs, shuffle_train, device, **kwargs)
    178     @classmethod
    179     def from_dblock(cls, dblock, source, path='.',  bs=64, val_bs=None, shuffle_train=True, device=None, **kwargs):
--&gt; 180         return dblock.dataloaders(source, path=path, bs=bs, val_bs=val_bs, shuffle_train=shuffle_train, device=device, **kwargs)
    181 
    182     _docs=dict(__getitem__="Retrieve `DataLoader` at `i` (`0` is training, `1` is validation)",

/usr/local/lib/python3.6/dist-packages/fastai/data/block.py in dataloaders(self, source, path, verbose, **kwargs)
    111 
    112     def dataloaders(self, source, path='.', verbose=False, **kwargs):
--&gt; 113         dsets = self.datasets(source)
    114         kwargs = {**self.dls_kwargs, **kwargs, 'verbose': verbose}
    115         return dsets.dataloaders(path=path, after_item=self.item_tfms, after_batch=self.batch_tfms, **kwargs)

/usr/local/lib/python3.6/dist-packages/fastai/data/block.py in datasets(self, source, verbose)
    108         splits = (self.splitter or RandomSplitter())(items)
    109         pv(f"{len(splits)} datasets of sizes {','.join([str(len(s)) for s in splits])}", verbose)
--&gt; 110         return Datasets(items, tfms=self._combine_type_tfms(), splits=splits, dl_type=self.dl_type, n_inp=self.n_inp, verbose=verbose)
    111 
    112     def dataloaders(self, source, path='.', verbose=False, **kwargs):

/usr/local/lib/python3.6/dist-packages/fastai/data/core.py in __init__(self, items, tfms, tls, n_inp, dl_type, **kwargs)
    308     def __init__(self, items=None, tfms=None, tls=None, n_inp=None, dl_type=None, **kwargs):
    309         super().__init__(dl_type=dl_type)
--&gt; 310         self.tls = L(tls if tls else [TfmdLists(items, t, **kwargs) for t in L(ifnone(tfms,[None]))])
    311         self.n_inp = ifnone(n_inp, max(1, len(self.tls)-1))
    312 

/usr/local/lib/python3.6/dist-packages/fastai/data/core.py in &lt;listcomp&gt;(.0)
    308     def __init__(self, items=None, tfms=None, tls=None, n_inp=None, dl_type=None, **kwargs):
    309         super().__init__(dl_type=dl_type)
--&gt; 310         self.tls = L(tls if tls else [TfmdLists(items, t, **kwargs) for t in L(ifnone(tfms,[None]))])
    311         self.n_inp = ifnone(n_inp, max(1, len(self.tls)-1))
    312 

/usr/local/lib/python3.6/dist-packages/fastcore/foundation.py in __call__(cls, x, *args, **kwargs)
    161     def __call__(cls, x=None, *args, **kwargs):
    162         if not args and not kwargs and x is not None and isinstance(x,cls): return x
--&gt; 163         return super().__call__(x, *args, **kwargs)
    164 
    165 # Cell

/usr/local/lib/python3.6/dist-packages/fastai/data/core.py in __init__(self, items, tfms, use_list, do_setup, split_idx, train_setup, splits, types, verbose, dl_type)
    234         if do_setup:
    235             pv(f"Setting up {self.tfms}", verbose)
--&gt; 236             self.setup(train_setup=train_setup)
    237 
    238     def _new(self, items, split_idx=None, **kwargs):

/usr/local/lib/python3.6/dist-packages/fastai/data/core.py in setup(self, train_setup)
    256             for f in self.tfms.fs:
    257                 self.types.append(getattr(f, 'input_types', type(x)))
--&gt; 258                 x = f(x)
    259             self.types.append(type(x))
    260         types = L(t if is_listy(t) else [t] for t in self.types).concat().unique()

/usr/local/lib/python3.6/dist-packages/fastcore/transform.py in __call__(self, x, **kwargs)
     71     @property
     72     def name(self): return getattr(self, '_name', _get_name(self))
---&gt; 73     def __call__(self, x, **kwargs): return self._call('encodes', x, **kwargs)
     74     def decode  (self, x, **kwargs): return self._call('decodes', x, **kwargs)
     75     def __repr__(self): return f'{self.name}:\nencodes: {self.encodes}decodes: {self.decodes}'

/usr/local/lib/python3.6/dist-packages/fastcore/transform.py in _call(self, fn, x, split_idx, **kwargs)
     81     def _call(self, fn, x, split_idx=None, **kwargs):
     82         if split_idx!=self.split_idx and self.split_idx is not None: return x
---&gt; 83         return self._do_call(getattr(self, fn), x, **kwargs)
     84 
     85     def _do_call(self, f, x, **kwargs):

/usr/local/lib/python3.6/dist-packages/fastcore/transform.py in _do_call(self, f, x, **kwargs)
     87             if f is None: return x
     88             ret = f.returns_none(x) if hasattr(f,'returns_none') else None
---&gt; 89             return retain_type(f(x, **kwargs), x, ret)
     90         res = tuple(self._do_call(f, x_, **kwargs) for x_ in x)
     91         return retain_type(res, x)

/usr/local/lib/python3.6/dist-packages/fastcore/dispatch.py in __call__(self, *args, **kwargs)
    115         elif self.inst is not None: f = MethodType(f, self.inst)
    116         elif self.owner is not None: f = MethodType(f, self.owner)
--&gt; 117         return f(*args, **kwargs)
    118 
    119     def __get__(self, inst, owner):

/usr/local/lib/python3.6/dist-packages/fastai/text/data.py in encodes(self, o)
     46             self.o2i = defaultdict(int, {v:k for k,v in enumerate(self.vocab) if v != 'xxfake'})
     47 
---&gt; 48     def encodes(self, o): return TensorText(tensor([self.o2i  [o_] for o_ in o]))
     49     def decodes(self, o): return L(self.vocab[o_] for o_ in o)
     50 

TypeError: 'float' object is not iterable
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='wfwiggins' date='2020-11-12T21:35:34Z'>
		Another user posted on this issue in the forums &lt;denchmark-link:https://forums.fast.ai/t/getting-error-typeerror-float-object-is-not-iterable-when-creating-dataloaders/81881/2&gt;see post here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='wfwiggins' date='2020-11-12T22:08:58Z'>
		The issue appears to pertain to a change in fastcore and was temporarily fixed by pinning fastcore==1.3.1. Will move this to the fastcore Issues.
		</comment>
		<comment id='3' author='wfwiggins' date='2020-11-21T21:26:43Z'>
		This issue is indeed in fastai and not fastcore
Simply downgrading to fastcore==1.3.1 does not resolve the issue.  You must downgrade to fastai==2.1.4
		</comment>
		<comment id='4' author='wfwiggins' date='2020-11-21T23:21:51Z'>
		I can recreate with the following code and the attached csv
&lt;denchmark-code&gt;from fastai.text.all import *
df = pd.read_csv('reviewSpamData.csv')
df_new = df[(df.domain.str.contains('hotel')) &amp; (df.type.str.contains('expert')==False)]
dls_lm = TextDataLoaders.from_df(df_new, valid_pct = 0.1, text_col='text', 
                                 label_col='spam', bs=256, seq_len=80, is_lm=True)
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/fastai/fastai/files/5578636/reviewSpamData.zip&gt;reviewSpamData.zip&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='wfwiggins' date='2020-11-22T03:14:39Z'>
		&lt;denchmark-link:https://github.com/dalupus&gt;@dalupus&lt;/denchmark-link&gt;
 you are correct. I had overlooked the fact that I had also pinned  in order to fix this issue.
It appears that reverting the change to tokenize_df made in fastai.text.core from 2.1.4 -&gt; 2.1.5 fixes this issue. The change was apparently made in response to a numpy warning. The change was made on line 224 of fastai/text/core.py.
&lt;denchmark-code&gt;# fastai==2.1.4
224    res[tok_text_col] = outputs

# fastai==2.1.5
224    res[tok_text_col] = pd.Series(outputs, dtype=object)
&lt;/denchmark-code&gt;

I will submit a PR reverting this change shortly, assuming this is desirable.
		</comment>
		<comment id='6' author='wfwiggins' date='2020-11-22T16:10:36Z'>
		Thanks &lt;denchmark-link:https://github.com/wfwiggins&gt;@wfwiggins&lt;/denchmark-link&gt;
 .  That change caught my eye but I was overwhelmed by all the padding changes.
		</comment>
	</comments>
</bug>