<bug id='106' author='zardini123' open_date='2019-11-16T18:11:28Z' closed_time='2019-12-27T14:24:47Z'>
	<summary>[Bug] Sum of output audio has missing high frequencies compared to original audio</summary>
	<description>
The issue I'm experiencing is that the sum of spleeter's output audio has missing high frequencies compared to original audio.  Regardless of the file input codec (and audio source), this problem seems to persist.  A full report on what frequencies the sum is missing is provided at the end of the bug report.
I can't tell from my surface-level perspective if this is a decoding issue (ffmpeg decoding audio to a lower bitrate), or if this is inherit with the trained models.  I would expect that part of the training criteria for a AI like this, is that if the AI gets trained so that the sum of the outputs equals almost exactly the input stream.  I'd love to read the white paper to see if this condition was actually in the training criteria.
&lt;denchmark-h:h2&gt;Step to reproduce&lt;/denchmark-h&gt;


Create venv using python3
Install spleeter via venv's pip3
Run spleeter's executable using any model (2 through 5 stems)
Spleeter outputs correct number of audio files.  Import all audio files into your favorite audio editor (Audacity, Ableton)
Output sum does not contain as much high frequencies as original audio.

&lt;denchmark-h:h2&gt;Output&lt;/denchmark-h&gt;

Spleeter runs and reports like standard.  No issues are thrown.  Audio data is reported to load successfully.
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;










OS
MacOS


Installation type
pip


RAM available
16 GB


Hardware spec
i9 9700k,  Radeon RX 590



&lt;denchmark-h:h2&gt;Experimentation with the issue&lt;/denchmark-h&gt;

After following the steps I provided above, I then imported my original file and the output spleeter audio to Ableton.  I grouped all the spleeter output audio, and inverted the group's audio.  The sum of the original audio and the inverted group reveals the audio "missing" from the spleeter audio.  Using a spectrum analyzer set to a FFT size of 16384 shows a peculiar cutoff in frequencies at 11k Hz (See image).
&lt;denchmark-link:https://user-images.githubusercontent.com/7538514/68997172-75dd8580-0871-11ea-990a-3bed686a1c6b.png&gt;&lt;/denchmark-link&gt;

(Note: audio used here is Earth, Wind &amp; Fire's Let's Groove, provided in the wav codec.  The y scale is in dB.  Notice the almost 72 decibel difference from the low and high shelf)
This odd case of missing frequencies above 11k Hz applies to any audio, any codec, at any sample rate I tried.  Even after resampling EWF's Let's Groove from 44.1k to 192k, the same cutoff applies.
Interestingly, sampling rate of 44.1k divided by 4 results in 11025 Hz, which is roughly 11k.  I have no idea if this gives a clue that it's a decoding issue (ffmpeg), or if its a model issue.  Though, it's interesting to think about.
	</description>
	<comments>
		<comment id='1' author='zardini123' date='2019-11-16T22:10:17Z'>
		Able to consistently reproduce. Here's a spectrogram from Audacity of the output. Environment: Windows, installed from the git source &amp; using Anaconda w/ Python 3.7
&lt;denchmark-link:https://user-images.githubusercontent.com/6201501/68999802-c60d1580-087a-11ea-9375-d15be6478233.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='zardini123' date='2019-11-16T23:08:13Z'>
		Apparently this is a duplicate of closed issues and is the intended behavior. Cutoff can be changed here: &lt;denchmark-link:https://github.com/deezer/spleeter/wiki/5.-FAQ#why-are-there-no-high-frequencies-in-the-generated-output-files-&gt;https://github.com/deezer/spleeter/wiki/5.-FAQ#why-are-there-no-high-frequencies-in-the-generated-output-files-&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='zardini123' date='2019-11-16T23:47:19Z'>
		&lt;denchmark-link:https://github.com/CoderSear&gt;@CoderSear&lt;/denchmark-link&gt;
 Interesting find!  The issue thread even has two other issues referenced referencing the same "problem."  I think it would be a good idea for the managers of the repository to put that documentation somewhere easy to find for others!
		</comment>
		<comment id='4' author='zardini123' date='2019-11-17T08:17:14Z'>
		&lt;denchmark-link:https://github.com/zardini123&gt;@zardini123&lt;/denchmark-link&gt;
, it is already documented in the &lt;denchmark-link:https://github.com/deezer/spleeter/wiki/5.-FAQ#why-are-there-no-high-frequencies-in-the-generated-output-files-&gt;FAQ section of the wiki&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='5' author='zardini123' date='2019-11-17T17:03:31Z'>
		&lt;denchmark-link:https://github.com/romi1502&gt;@romi1502&lt;/denchmark-link&gt;
 I believe it would be best to put a link to that specific FAQ entry in the readme.  The option to change the behavior of the mask seems very crucial for many.  I'd see many more people reporting this same "issue" I did in the future, simply because the information is not in the forefront.
		</comment>
		<comment id='6' author='zardini123' date='2019-12-27T14:24:43Z'>
		We've just updated the &lt;denchmark-link:https://github.com/deezer/spleeter/wiki/5.-FAQ#why-are-there-no-high-frequencies-in-the-generated-output-files-&gt;FAQ&lt;/denchmark-link&gt;
 to provide a new way of performing separation above 11kHz. Also configs that perform separation up to 16kHz were packaged in spleeter as mentioned in the &lt;denchmark-link:https://github.com/deezer/spleeter/wiki/2.-Getting-started#using-models-up-to-16khz&gt;wiki&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>