<bug id='86' author='abetusk' open_date='2019-11-13T17:16:59Z' closed_time='2020-01-13T13:10:36Z'>
	<summary>[Bug] std::bad_alloc and core dumped</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

Run results in std::bad_alloc and core dump.
&lt;denchmark-code&gt;(spleeter-cpu) abe@mill:~/git/github/deezer$ spleeter separate -i ~/play/music/bin/BOY\ HARSHER\ -\ Fate-1162083825.mp3 -p spleeter:2stems -o boyharsher
OMP: Info #212: KMP_AFFINITY: decoding x2APIC ids.
OMP: Info #210: KMP_AFFINITY: Affinity capable, using global cpuid leaf 11 info
OMP: Info #154: KMP_AFFINITY: Initial OS proc set respected: 0-3
OMP: Info #156: KMP_AFFINITY: 4 available OS procs
OMP: Info #157: KMP_AFFINITY: Uniform topology
OMP: Info #179: KMP_AFFINITY: 1 packages x 4 cores/pkg x 1 threads/core (4 total cores)
OMP: Info #214: KMP_AFFINITY: OS proc to physical thread map:
OMP: Info #171: KMP_AFFINITY: OS proc 0 maps to package 0 core 0 
OMP: Info #171: KMP_AFFINITY: OS proc 1 maps to package 0 core 1 
OMP: Info #171: KMP_AFFINITY: OS proc 2 maps to package 0 core 2 
OMP: Info #171: KMP_AFFINITY: OS proc 3 maps to package 0 core 3 
OMP: Info #250: KMP_AFFINITY: pid 17599 tid 17599 thread 0 bound to OS proc set 0
OMP: Info #250: KMP_AFFINITY: pid 17599 tid 17842 thread 1 bound to OS proc set 1
INFO:spleeter:Loading audio b'/home/abe/play/music/bin/BOY HARSHER - Fate-1162083825.mp3' from 0.0 to 600.0
INFO:spleeter:Audio data loaded successfully
OMP: Info #250: KMP_AFFINITY: pid 17599 tid 17841 thread 2 bound to OS proc set 2
OMP: Info #250: KMP_AFFINITY: pid 17599 tid 17873 thread 3 bound to OS proc set 3
OMP: Info #250: KMP_AFFINITY: pid 17599 tid 17874 thread 4 bound to OS proc set 0
OMP: Info #250: KMP_AFFINITY: pid 17599 tid 17875 thread 5 bound to OS proc set 1
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
Aborted (core dumped)
&lt;/denchmark-code&gt;

The song is &lt;denchmark-link:https://boyharsher.bandcamp.com/track/fate&gt;Boy Harsher's "Fate"&lt;/denchmark-link&gt;
.
&lt;denchmark-h:h2&gt;Step to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;youtube-dl 'https://boyharsher.bandcamp.com/track/fate'
conda activate spleeter-cpu
spleeter separate -i ./BOY\ HARSHER\ -\ Fate-1162083825.mp3 -p spleeter:2stems -o boyharsher
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Output&lt;/denchmark-h&gt;

(base) abe@mill:~/git/github/deezer$ conda activate spleeter-cpu
(spleeter-cpu) abe@mill:~/git/github/deezer$ spleeter separate -i ./BOY\ HARSHER\ -\ Fate-1162083825.mp3 -p spleeter:2stems -o boy^C
(spleeter-cpu) abe@mill:~/git/github/deezer$ spleeter separate -i ./BOY\ HARSHER\ -\ Fate-1162083825.mp3 -p spleeter:2stems -o boy
OMP: Info #212: KMP_AFFINITY: decoding x2APIC ids.
OMP: Info #210: KMP_AFFINITY: Affinity capable, using global cpuid leaf 11 info
OMP: Info #154: KMP_AFFINITY: Initial OS proc set respected: 0-3
OMP: Info #156: KMP_AFFINITY: 4 available OS procs
OMP: Info #157: KMP_AFFINITY: Uniform topology
OMP: Info #179: KMP_AFFINITY: 1 packages x 4 cores/pkg x 1 threads/core (4 total cores)
OMP: Info #214: KMP_AFFINITY: OS proc to physical thread map:
OMP: Info #171: KMP_AFFINITY: OS proc 0 maps to package 0 core 0 
OMP: Info #171: KMP_AFFINITY: OS proc 1 maps to package 0 core 1 
OMP: Info #171: KMP_AFFINITY: OS proc 2 maps to package 0 core 2 
OMP: Info #171: KMP_AFFINITY: OS proc 3 maps to package 0 core 3 
OMP: Info #250: KMP_AFFINITY: pid 18464 tid 18464 thread 0 bound to OS proc set 0
OMP: Info #250: KMP_AFFINITY: pid 18464 tid 18519 thread 1 bound to OS proc set 1
INFO:spleeter:Loading audio b'./BOY HARSHER - Fate-1162083825.mp3' from 0.0 to 600.0
INFO:spleeter:Audio data loaded successfully
OMP: Info #250: KMP_AFFINITY: pid 18464 tid 18518 thread 2 bound to OS proc set 2
OMP: Info #250: KMP_AFFINITY: pid 18464 tid 18555 thread 3 bound to OS proc set 3
OMP: Info #250: KMP_AFFINITY: pid 18464 tid 18556 thread 4 bound to OS proc set 0
OMP: Info #250: KMP_AFFINITY: pid 18464 tid 18557 thread 5 bound to OS proc set 1
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
Aborted (core dumped)

&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;










OS
Linux "Ubuntu 16.04.6 LTS"


Installation type
Conda 4.7.12


RAM available
Mem: 8043652     2265104     4506872      394280     1271676 5052192, Swap:       8257532     2849108     5408424


Hardware spec
no GPU, 4 CPUs (Intel(R) Core(TM) i5-3330 CPU @ 3.00GHz)



&lt;denchmark-h:h2&gt;Additional context&lt;/denchmark-h&gt;

I followed the quick start guide from the repo.
The test mp3 that came with the repo successfully ran.
	</description>
	<comments>
		<comment id='1' author='abetusk' date='2019-11-16T15:25:03Z'>
		I am seeing this too with the docker image. I can split the test audio file but all other files regardless how they are encoded fail with
terminate called after throwing an instance of 'std::bad_alloc'
what():  std::bad_alloc
		</comment>
		<comment id='2' author='abetusk' date='2019-11-20T16:47:11Z'>
		Hi,
It's a very low-level bug and it's hard for us to hep you on that. Can you give us the core dumps ?
		</comment>
		<comment id='3' author='abetusk' date='2019-11-21T04:01:35Z'>
		I am also receiving this problem while trying to run the 4stems program on an mp3 file that successfully ran the 2stem program. This machine is intel i3, 4GB RAM, Ubuntu 18.04
Please can you clarify what the minimum specs should be to convert 1 mp3 ile into 4 or 5 stems?
		</comment>
		<comment id='4' author='abetusk' date='2019-11-21T04:24:12Z'>
		Here is another attempt with a wav file trying to separate into 2 stems
&lt;denchmark-code&gt;(spleeter-cpu) terry@Terry-Ubuntu:~/spleeter$ spleeter separate -i MySong_42MB.wav -p spleeter:2stems -o output
OMP: Info #212: KMP_AFFINITY: decoding x2APIC ids.
OMP: Info #210: KMP_AFFINITY: Affinity capable, using global cpuid leaf 11 info
OMP: Info #154: KMP_AFFINITY: Initial OS proc set respected: 0-3
OMP: Info #156: KMP_AFFINITY: 4 available OS procs
OMP: Info #157: KMP_AFFINITY: Uniform topology
OMP: Info #179: KMP_AFFINITY: 1 packages x 2 cores/pkg x 2 threads/core (2 total cores)
OMP: Info #214: KMP_AFFINITY: OS proc to physical thread map:
OMP: Info #171: KMP_AFFINITY: OS proc 0 maps to package 0 core 0 thread 0 
OMP: Info #171: KMP_AFFINITY: OS proc 1 maps to package 0 core 0 thread 1 
OMP: Info #171: KMP_AFFINITY: OS proc 2 maps to package 0 core 2 thread 0 
OMP: Info #171: KMP_AFFINITY: OS proc 3 maps to package 0 core 2 thread 1 
OMP: Info #250: KMP_AFFINITY: pid 4292 tid 4292 thread 0 bound to OS proc set 0
OMP: Info #250: KMP_AFFINITY: pid 4292 tid 4346 thread 1 bound to OS proc set 2
INFO:spleeter:Loading audio b'MySong_42MB.wav' from 0.0 to 600.0
INFO:spleeter:Audio data loaded successfully
OMP: Info #250: KMP_AFFINITY: pid 4292 tid 4345 thread 2 bound to OS proc set 1
OMP: Info #250: KMP_AFFINITY: pid 4292 tid 4369 thread 3 bound to OS proc set 3
OMP: Info #250: KMP_AFFINITY: pid 4292 tid 4370 thread 4 bound to OS proc set 0
OMP: Info #250: KMP_AFFINITY: pid 4292 tid 4371 thread 5 bound to OS proc set 2
terminate called after throwing an instance of 'std::bad_alloc'
terminate called recursively
Aborted (core dumped)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='abetusk' date='2019-11-21T13:33:01Z'>
		I've noticed that this error tends to occur when the program runs out of memory while processing the audio. For anyone using Docker, can you try increasing the amount of memory available to the container by a few gigabytes and seeing if the error goes away?
Memory requirements appear to increase with the duration of the input file, so a 5 minute audio file will take quite a bit more memory to process than a 1 minute audio file.
		</comment>
		<comment id='6' author='abetusk' date='2019-11-21T20:13:44Z'>
		&lt;denchmark-link:https://github.com/mickdekkers&gt;@mickdekkers&lt;/denchmark-link&gt;
 I reduced the track length to 60 seconds and it worked, so looks like you are right. Will need to test it some more. Thanks for the tip.
		</comment>
		<comment id='7' author='abetusk' date='2020-01-13T13:10:36Z'>
		Closing this. We'll add a disclaimer about memory specs in the documentation.
		</comment>
	</comments>
</bug>