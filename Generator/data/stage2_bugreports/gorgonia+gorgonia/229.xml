<bug id='229' author='zltgo' open_date='2018-09-04T02:45:49Z' closed_time='2019-08-21T14:43:36Z'>
	<summary>How to use Max or StableSoftMax?</summary>
	<description>
&lt;denchmark-h:h3&gt;There's something wrong with the example below&lt;/denchmark-h&gt;

&lt;denchmark-h:h2&gt;Max&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;func main {
	g := NewGraph()
	x := NewTensor(g, Float64, 2, WithShape(2, 5), WithInit(RangedFrom(0)))
	max := Must(Max(x))

	m := NewLispMachine(g, ExecuteFwdOnly(), WithManualGradient())
	if err := m.RunAll(); err != nil {
		fmt.Println(errors.Wrap(err, "RunAll"))
		return
	}
	//panic: runtime error: invalid memory address or nil pointer dereference
	fmt.Println("max of x: %v\n", max.Value())
}

&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;StableSoftMax&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;func main() {
	g := NewGraph()
	x := NewVector(g, Float64, WithName("x"), WithShape(5), WithInit(RangedFrom(0)))
	ssm := Must(StableSoftMax(x))

	m := NewLispMachine(g, ExecuteFwdOnly(), WithManualGradient())
	if err := m.RunAll(); err != nil {
		fmt.Println(errors.Wrap(err, "RunAll"))
		return
	}
	//panic: Operation failed: Failed to infer shape. Op: Î£[1]: Shape mismatch: along is [1]. Shape is (5)
	fmt.Println("StableSoftMax of x: %v\n", ssm.Value())
}

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='zltgo' date='2018-09-04T02:46:36Z'>
		Reformatted
Looking into it now
		</comment>
		<comment id='2' author='zltgo' date='2018-09-04T03:00:00Z'>
		&lt;denchmark-link:https://github.com/zltgo&gt;@zltgo&lt;/denchmark-link&gt;
 it turns out that I somehow have deleted the maxOp's Do function. I'll add that back in.
		</comment>
		<comment id='3' author='zltgo' date='2018-09-04T03:26:52Z'>
		&lt;denchmark-link:https://github.com/chewxy&gt;@chewxy&lt;/denchmark-link&gt;
 thank you, I have a problem to solve, but i don't know how to do it, can you help me, please.
I have a vector like x:
&lt;denchmark-code&gt;x := NewVector(g, Float64, WithShape(5), WithBacking([]float64{1, 2 ,3, 3, 2}))

// 3 is the first max of the vector, so I want get the vector  [0, 0 ,1, 0, 0], how to do this ?
// my solution is not so good because there may have two or more max values.

max := Must(Max(x))
result := Must(Gte(x, max))
// result is  [0, 0, 1, 1, 0]
&lt;/denchmark-code&gt;

how to get [0, 0, 1, 0, 0]?
		</comment>
		<comment id='4' author='zltgo' date='2018-09-04T04:33:48Z'>
		Do you need it to be back propagated?
If not, just use gorgonia.org/tensor:
&lt;denchmark-code&gt;T := tensor.New(tensor.WithShape(5), tensor.WithBacking([]float64{1,2,3,3,2}))
m := T.Max(0)
T2, err := T.Gte(m.Data().(float64))
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='zltgo' date='2018-09-27T07:30:03Z'>
		&lt;denchmark-link:https://github.com/chewxy&gt;@chewxy&lt;/denchmark-link&gt;
 the max function still cannot use in the master version, which version should I use?
		</comment>
		<comment id='6' author='zltgo' date='2019-08-21T14:43:36Z'>
		Closing this issue because of inactivity and the maxOp implementation seems ok in master



gorgonia/op_reduction.go


        Lines 111 to 120
      in
      93e2388






 func (op maxOp) Do(inputs ...Value) (retVal Value, err error) { 



 if err = checkArity(op, len(inputs)); err != nil { 



 return 



 	} 



 if arg, ok := inputs[0].(*tensor.Dense); ok { 



 retVal, err = arg.Max(op.along...) 



 return 



 	} 



 return nil, errors.Errorf("Max arg is not a tensor") 



 } 








gorgonia/op_reduction_test.go


        Lines 201 to 237
      in
      93e2388






 func TestMaxOp(t *testing.T) { 



 subTests := []struct { 



 along    []int 



 expected interface{} 



 	}{ 



 		{along: []int{0}, expected: []float32{5, 6}}, 



 		{along: []int{1}, expected: []float32{2, 4, 6}}, 



 		{along: []int{}, expected: float32(6)}, 



 		{along: []int{0, 1}, expected: float32(6)}, 



 		{along: []int{1, 0}, expected: float32(6)}, 



 	} 



 



 dt := Float32 



 for _, subTest := range subTests { 



 t.Run(fmt.Sprintf("along %d", subTest.along), func(t *testing.T) { 



 g := NewGraph() 



 Xn := NewTensor(g, dt, 2, WithShape(2, 2)) 



 max := Must(Max(Xn, subTest.along...)) 



 // resShape, errShape := max.op.(*maxOp).InferShape(Xn.Shape()) 



 // fmt.Printf("along %d inferShape, %s", resShape, errShape) 



 



 xT := tensor.New(tensor.WithShape(3, 2), tensor.WithBacking([]float32{ 



 1, 2, 



 3, 4, 



 5, 6})) 



 vm := NewTapeMachine(g) 



 defer vm.Close() 



 vm.Let(Xn, xT) 



 err := vm.RunAll() 



 if err != nil { 



 t.Error(err) 



 			} 



 assert := assert.New(t) 



 assert.Equal(subTest.expected, max.Value().(*tensor.Dense).Data()) 



 		}) 



 	} 



 } 





Feel free to reopen if needed.
		</comment>
	</comments>
</bug>