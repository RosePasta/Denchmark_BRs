<bug id='363' author='rameshputalapattu' open_date='2020-01-19T07:27:21Z' closed_time='2020-01-19T21:45:51Z'>
	<summary>Gradient computation is incorrect if a node in expression graph is formed by gorgonia.Neg operator</summary>
	<description>
The gradient gets set to zero incorrectly if the last node in the expression graph is formed by  gorgonia.Neg operator. The gradients are correct if instead multiplication by 1 operator is used.
Here is the test which illustrates this problem.
func TestNegOp(t *testing.T) {
	g := gorgonia.NewGraph()

	x := gorgonia.NewScalar(g, gorgonia.Float64, gorgonia.WithName("x"))
	y := gorgonia.NewScalar(g, gorgonia.Float64, gorgonia.WithName("y"))

	z, err := gorgonia.Add(x, y)

	if err != nil {
		t.Fatal("error adding:", err)
	}

	z, err = gorgonia.Neg(z) //last node is Neg operator. So gradients are zero
       
       // z, err = gorgonia.Mul(gorgonia.NewConstant(-1.0), z) //This results in non zero gradients
       

	if err != nil {
		t.Fatal("error in Multiply with -1:", err)
	}

	gorgonia.Let(x, 2.5)
	gorgonia.Let(y, 2.0)

	m := gorgonia.NewLispMachine(g)

	defer m.Close()

	err = m.RunAll()

	if err != nil {
		t.Fatal("error in running the lisp machine:", err)
	}

	t.Log("value of z:", z.Value())

	xgrad, err := x.Grad()

	if err != nil {
		t.Fatal("error in getting the xgrad:", err)
	}

	ygrad, err := y.Grad()

	if err != nil {
		t.Fatal("error in getting the ygrad:", err)
	}

	actualxgrad := xgrad.Data().(float64)

	actualygrad := ygrad.Data().(float64)

	if actualxgrad == 0.0 {
		t.Log("xgrad=", actualxgrad, "ygrad=", actualygrad)
		t.Fatal("zero xgrad")
	}

	if actualygrad == 0.0 {
		t.Fatal("zero ygrad")
	}

	t.Log("xgrad=", actualxgrad, "ygrad=", actualygrad)

}
Test Output:
=== RUN   TestNegOp
--- FAIL: TestNegOp (0.00s)
    mledemo_test.go:100: value of z: -4.5
    mledemo_test.go:119: xgrad= 0 ygrad= 0
    mledemo_test.go:120: zero xgrad
FAIL
exit status 1
FAIL    mledemo 0.011s
	</description>
	<comments>
		<comment id='1' author='rameshputalapattu' date='2020-01-19T08:05:39Z'>
		what a fascinating bug. Looking into it now
		</comment>
		<comment id='2' author='rameshputalapattu' date='2020-01-19T21:38:26Z'>
		Figures that the one operation that doesn't have tests is the one that fails. This bug has been fixed.
If you're interested in knowing what's happening, it only fails for scalar inputs because of the UnsafeDo which actually returns a copy of the new data when it's a scalar input.
		</comment>
		<comment id='3' author='rameshputalapattu' date='2020-01-20T02:36:11Z'>
		Thank you &lt;denchmark-link:https://github.com/chewxy&gt;@chewxy&lt;/denchmark-link&gt;
. Also thank you  for gorgonia. Iâ€™ll take a look into the changes and try to understand it.
		</comment>
	</comments>
</bug>