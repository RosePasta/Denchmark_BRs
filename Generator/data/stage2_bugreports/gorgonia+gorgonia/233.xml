<bug id='233' author='chewxy' open_date='2018-09-06T11:57:23Z' closed_time='2018-09-08T08:20:51Z'>
	<summary>Convolution Operator Do Not Work As Expected</summary>
	<description>
&lt;denchmark-link:https://github.com/owulveryck/gorgonnx/issues/1&gt;owulveryck/gorgonnx#1&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='chewxy' date='2018-09-06T20:39:20Z'>
		I've got a question regarding the implementation of the &lt;denchmark-link:https://godoc.org/gorgonia.org/gorgonia#Im2Col&gt;Im2Col&lt;/denchmark-link&gt;
 Operator.
My understanding is that it is used to turn a 3D tensor into a matrix in order to perform matrix to matrix multiplication. This is a great optimization for the convolution (trading memory with compute). If you pass a 4D tensor, you should get a 3D tensor (one matrix per image n times).
At the very end, you do a reshaping to go back to the 4D shape.
For my understanding and to be sure, I have implemented a simple test to help the debugging.
Is the test ok? If so, I can try to modify (at least) the forward pass to make the test pass.
func TestIm2Col2(t *testing.T) {
        assert := assert.New(t)
        g := NewGraph()
        kernel := tensor.Shape{2, 2}
        pad := tensor.Shape{1, 1}
        stride := tensor.Shape{1, 1}
        dilation := tensor.Shape{1, 1}
        x := NewTensor(g, tensor.Float32, 4, WithShape(1, 1, 4, 4), WithInit(RangedFrom(0))) 
        y, err := Im2Col(x, kernel, pad, stride, dilation)
        if err != nil {
                t.Fatal(err)
        }
        m := NewTapeMachine(g)
        if err := m.RunAll(); err != nil {
                t.Fatal(err)
        }
        expected := tensor.New(tensor.WithShape(x.Shape()[1]*kernel[0]*kernel[1], 25), tensor.WithBacking([]float32{
                0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 4, 5, 6, 7, 0, 8, 9, 10, 11, 0, 12, 13, 14, 15,
                0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 4, 5, 6, 7, 0, 8, 9, 10, 11, 0, 12, 13, 14, 15, 0,
                0, 0, 1, 2, 3, 0, 4, 5, 6, 7, 0, 8, 9, 10, 11, 0, 12, 13, 14, 15, 0, 0, 0, 0, 0,
                0, 1, 2, 3, 0, 4, 5, 6, 7, 0, 8, 9, 10, 11, 0, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0,
        }))
        assert.Equal(y.Value(), expected)
}
		</comment>
		<comment id='2' author='chewxy' date='2018-09-07T00:16:18Z'>
		
My understanding is that it is used to turn a 3D tensor into a matrix in order to perform matrix to matrix multiplication

Im2col is best understood in the context of convolutions. Specifically, this is how a CPU Conv2D is implemented:
&lt;denchmark-code&gt;func Conv2d(im, filter *Node, kernelShape tensor.Shape, pad, stride, dilation []int) (retVal *Node, err error) {
	var colIm *Node
	if colIm, err = Im2Col(im, kernelShape, pad, stride, dilation); err != nil {
		return
	}

	layer := filter.Shape()[0]
	kernel := filter.Shape()[1]
	row := filter.Shape()[2]
	col := filter.Shape()[3]

	var flattened *Node
	if flattened, err = Reshape(filter, tensor.Shape{layer, kernel * row * col}); err != nil {
		return
	}

	// extract patch
	batch := colIm.Shape()[0]
	m := colIm.Shape()[1]
	n := colIm.Shape()[2]
	z := colIm.Shape()[3]

	var patch, colImLayer *Node
	if patch, err = Reshape(colIm, tensor.Shape{batch * m * n, z}); err != nil {
		return
	}

	op := linAlgBinOp{
		ƒÅBinaryOperator: matMulOperator,
		transA:          false,
		transB:          true,
	}

	if colImLayer, err = ApplyOp(op, patch, flattened); err != nil {
		return
	}

	// now reshape and transpose the values back into the original order
	var res *Node
	if res, err = Reshape(colImLayer, tensor.Shape{batch, m, n, layer}); err != nil {
		return
	}
	return Transpose(res, 0, 3, 1, 2)
}
&lt;/denchmark-code&gt;

The ideal Im2Col returns a matrix. But this is not useful for a number of reasons - returning a 4-tensor allows for finer grain control:
&lt;denchmark-code&gt;	var patch, colImLayer *Node
	if patch, err = Reshape(colIm, tensor.Shape{batch * m * n, z}); err != nil {
		return
	}
&lt;/denchmark-code&gt;

Your test looks fine
		</comment>
		<comment id='3' author='chewxy' date='2018-09-07T00:17:23Z'>
		The question is: whether these "finer grained" control is useful
		</comment>
		<comment id='4' author='chewxy' date='2018-09-08T07:34:09Z'>
		Fix on the way
		</comment>
	</comments>
</bug>