<bug id='185' author='chewxy' open_date='2018-01-06T03:55:26Z' closed_time='2018-01-15T02:11:39Z'>
	<summary>Bug re: constant handling</summary>
	<description>
Reported by Tan Chen.
	</description>
	<comments>
		<comment id='1' author='chewxy' date='2018-01-07T17:26:11Z'>
		I'm not convinced this is an issue with handling constants. During training, it is able to handle the constant without a problem, and it does find the node.
Instructions:
0       loadArg 0 to CPU0
1       loadArg 1 to CPU1
2       loadArg 2 to CPU2
3       loadArg 3 to CPU3
4       Alloc Vector float64(26733)             CPU4
5       A × b   [CPU0 CPU2]     CPU4    true    false   true
6       DoWork
7       + false [CPU4 CPU3]     CPU4    false   true    false
8       sigmoid [CPU4]  CPU5    false   false   false
9       neg     [CPU4]  CPU4    false   true    false
10      softplus        [CPU4]  CPU6    false   false   false
11      neg     [CPU6]  CPU6    false   true    false
12      neg     [CPU1]  CPU7    false   false   false
13      ⊙ false [CPU7 CPU6]     CPU8    false   false   false
14      const 1 []      CPU9    false   false   false
15      - false [CPU9 CPU1]     CPU10   false   false   false
16      - false [CPU9 CPU5]     CPU11   false   false   false
17      ln      [CPU11] CPU12   false   false   false
18      ⊙ false [CPU10 CPU12]   CPU13   false   false   false
19      - false [CPU8 CPU13]    CPU8    false   true    false
20      SizeOf=26733    [CPU8]  CPU14   false   false   false
21      square  [CPU2]  CPU15   false   false   false
22      const 0.01      []      CPU16   false   false   false
23      ⊙ false [CPU16 CPU9]    CPU17   false   false   false
24      SizeOf=10       [CPU15] CPU18   false   false   false
25      Repeat[0]       [CPU17 CPU18]   CPU19   false   false   false
26      const 2 []      CPU20   false   false   false
27      ⊙ false [CPU2 CPU20]    CPU21   false   false   false
28      ⊙ false [CPU21 CPU19]   CPU21   false   true    false
29      ÷ false [CPU9 CPU14]    CPU22   false   false   false
30      Repeat[0]       [CPU22 CPU14]   CPU23   false   false   false
31      neg     [CPU23] CPU24   false   false   false
32      ⊙ false [CPU10 CPU24]   CPU10   false   true    false
33      ÷ false [CPU10 CPU11]   CPU10   false   true    false
34      neg     [CPU10] CPU10   false   true    false
35      ⊙ false [CPU7 CPU23]    CPU7    false   true    false
36      neg     [CPU7]  CPU7    false   true    false
37      sigmoid [CPU4]  CPU4    false   true    false
38      ⊙ false [CPU4 CPU7]     CPU4    false   true    false
39      neg     [CPU4]  CPU4    false   true    false
40      ⊙ false [CPU5 CPU11]    CPU5    false   true    false
41      ⊙ false [CPU5 CPU10]    CPU5    false   true    false
42      + false [CPU4 CPU5]     CPU4    false   true    false
43      Σ[0]    [CPU4]  CPU25   false   false   false
44      Alloc Vector float64(10)                CPU26
45      Aᵀ × b  [CPU0 CPU4]     CPU26   true    false   true
46      DoWork
47      + false [CPU21 CPU26]   CPU21   false   true    false
48      const 0.1       []      CPU27   false   false   false
49      ⊙ false [CPU27 CPU21]   CPU28   false   false   false
50      - false [CPU2 CPU28]    CPU2    false   true    false
51      ⊙ false [CPU27 CPU25]   CPU29   false   false   false
52      - false [CPU3 CPU29]    CPU30   false   false   false
53      LET CPU2 = CPU2
54      LET CPU3 = CPU30
55      Free CPU0
56      Free CPU21
57      Free CPU25
Args: 2 | CPU Memories: 31 | GPU Memories: 0
CPU Mem: 0 | GPU Mem []
Node:instructions map:
0       0:      loadArg 0 to CPU0
1       1:      loadArg 1 to CPU1
2       2:      loadArg 2 to CPU2
3       3:      loadArg 3 to CPU3
4       4:      Alloc Vector float64(26733)             CPU4
A × b   [CPU0 CPU2]     CPU4    true    false   true
5       5:      DoWork
+ false [CPU4 CPU3]     CPU4    false   true    false
6       6:      sigmoid [CPU4]  CPU5    false   false   false
7       9:      neg     [CPU4]  CPU4    false   true    false
8       a:      softplus        [CPU4]  CPU6    false   false   false
9       b:      neg     [CPU6]  CPU6    false   true    false
10      c:      neg     [CPU1]  CPU7    false   false   false
11      d:      ⊙ false [CPU7 CPU6]     CPU8    false   false   false
12      e:      const 1 []      CPU9    false   false   false
I have no idea what the difference is between the two steps, so I'll continue digging around. But conceptually, I don't see why it would work during training and not during prediction.
		</comment>
	</comments>
</bug>