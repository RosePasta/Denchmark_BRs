<bug id='182' author='jbarlow83' open_date='2016-01-04T20:42:24Z' closed_time='2016-02-12T19:47:15Z'>
	<summary>Some programs can't find OCR text in Tesseract's PDFs (3.04)</summary>
	<description>
While Acrobat XI can find text in a PDF, it appears that &lt;denchmark-link:https://en.wikipedia.org/wiki/Pdftotext&gt;poppler&lt;/denchmark-link&gt;
's  program, OS X's Preview app, and the library &lt;denchmark-link:https://github.com/mstamy2/PyPDF2/tree/master/PyPDF2&gt;PyPDF2&lt;/denchmark-link&gt;
's extractText() function all fail to locate text. It seems that Tesseract is encoding text in a way that makes it inaccessible to many PDF viewers.
pdftotext produces empty output.
Preview app allows highlighting of text in the appropriate locations, but it cannot be copied to the clipboard or searched.
PyPDF2 extractText also produces an empty string as text.
	</description>
	<comments>
		<comment id='1' author='jbarlow83' date='2016-01-04T21:13:16Z'>
		See &lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/issues/170&gt;#170&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='jbarlow83' date='2016-01-04T21:25:41Z'>
		&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/issues/170&gt;#170&lt;/denchmark-link&gt;
 might be related, but the files I checked did not have tilted or skewed text.
Input file:
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/1825843/12100857/6fba9e66-b2e6-11e5-8df1-d928e75a1b44.jpg&gt;&lt;/denchmark-link&gt;

Output:
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/77727/linn.pdf&gt;linn.pdf&lt;/denchmark-link&gt;

tesseract version
tesseract 3.04.00 leptonica-1.72 libjpeg 8d : libpng 1.6.19 : libtiff 4.0.6 : zlib 1.2.5
		</comment>
		<comment id='3' author='jbarlow83' date='2016-01-04T22:34:29Z'>
		Chromium's pdf reader output (cut&amp;paste):
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/115576/182-chromium.txt&gt;182-chromium.txt&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='jbarlow83' date='2016-01-04T23:06:43Z'>
		I run Tesseract (latest commit from the repo) with your jpg image.

tesseract i182.jpg i182 -l eng txt pdf hocr

Evince's output (cut&amp;paste):
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/115584/182-evince.txt&gt;182-evince.txt&lt;/denchmark-link&gt;

Evince is based on Poppler.
		</comment>
		<comment id='5' author='jbarlow83' date='2016-01-04T23:33:14Z'>
		Here are the output files...
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/77832/i182.pdf&gt;i182.pdf&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/77833/i182.txt&gt;i182.txt&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/77840/i182-hocr.zip&gt;i182-hocr.zip&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='jbarlow83' date='2016-01-04T23:34:46Z'>
		Chrome's PDF reader works for me.
I have poppler 0.39.0 installed (homebrew/OS X/El Capitan).
I believe I found the reason. It appears that the readers that struggle with it do not support Tesseract's usage of hexadecimal code points rather than literal characters in the output stream.
The PostScript content stream for this page as generated by Tesseract for the first word, "The" appears as follows:
 Tz [ &lt;0054&gt;&lt;0068&gt;&lt;0065&gt; ] TJ  
where &lt;0054&gt; = U+0054 = T, &lt;0068&gt; = U+0068 = h, etc. I have run into other situations where this hexadecimal notation causes parsing difficulties for some PDF readers.
Acrobat generates the equivalent segment with ASCII literals.
[...omitted...] Tm
(The )Tj
Longer excerpts for comparison:
Tesseract
BT    
3 Tr 1 0 0 1 211.68 744 Tm /f-0-0 21 Tf 117.334 Tz [ &lt;0054&gt;&lt;0068&gt;&lt;0065&gt; ] TJ  
Acrobat
BT
0.196 0.184 0.188 rg
/T1_0 1 Tf
-0.035 Tc 3 Tr 23.4905 0 0 23.7001 211.43 744.24 Tm
(The )Tj
ET
		</comment>
		<comment id='7' author='jbarlow83' date='2016-01-04T23:45:33Z'>
		Did you see my 2 last comments?
The latest commit from the repo produces better pdf results than version 3.04.
		</comment>
		<comment id='8' author='jbarlow83' date='2016-01-05T00:00:43Z'>
		Yes. Preview and poppler are still incapable of reading your i182.pdf. I observed no difference.
My comparison didn't address how Acrobat handles Unicode and Unicode literals cannot appear in Postscript so I checked how this is done. When Acrobat encodes a Unicode string it uses UTF-16 big endian code points in hexadecimal, like this:
... Tm
&lt;4E8B5F97771F5BF9770B89C152A066F4591A5C11&gt;Tj
That string encodes 10 characters all below U+7FFF, which are these:
事得真对看见加更多少
So it appears that Tesseract's method of encoding text strings is nonstandard. I checked the PDF 1.7 reference manual, and couldn't find an example matching Tesseract's output syntax.
		</comment>
		<comment id='9' author='jbarlow83' date='2016-01-05T00:16:01Z'>
		My libpopler version is 0.24.5. Ubuntu 14.04.

pdftotext i182.pdf i182t.txt

Here is the pdftotext output:
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/77872/i182t.txt&gt;i182t.txt&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='jbarlow83' date='2016-01-05T00:28:23Z'>
		cc: &lt;denchmark-link:https://github.com/jbreiden&gt;@jbreiden&lt;/denchmark-link&gt;

jbreiden wrote Tesseract's pdf renderer code.
		</comment>
		<comment id='11' author='jbarlow83' date='2016-01-05T00:41:36Z'>
		Okay, for some reason pdftotext will not output to stdout but will produce a valid text file for the files we've been working on. My quick guess is that pdftotext suppresses its stdout if high ASCII characters are present, which tesseract finds here (some n-dashes and smart quotes). Both poppler 0.24.5 and 0.34 behave as expected when asked to save to a file, so the text stream is accessible to pdftotext. In short, poppler is working fine for me.
That said, OS X Preview and parsers like PyPDF2 still struggle with how Tesseract encodes text, as far as I can tell.
I checked that reportlab also encodes text strings in the manner of Acrobat, and Preview has no problems with PDFs produced by Tesseract -&gt; hOCR -&gt; reportlab PDF. This is an example of such a file:
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/77885/linn_hocr_unc.pdf&gt;linn_hocr_unc.pdf&lt;/denchmark-link&gt;

		</comment>
		<comment id='12' author='jbarlow83' date='2016-01-05T01:28:21Z'>
		From &lt;denchmark-link:https://groups.google.com/forum/?hl=en#!topic/tesseract-dev/XllxjvK5HtU&gt;https://groups.google.com/forum/?hl=en#!topic/tesseract-dev/XllxjvK5HtU&lt;/denchmark-link&gt;


Jeff Breidenbach   7/17/15
PROBLEM #2: PDF
I was looking at a PDF problem report and noticed that Tesseract PDF output
is no longer validating. (It fails qpdf --check). As the author of the pdf module,
I'm biased, but producing corrupt data is a disaster and I think we need to cut
a new release once it is figured out. Most PDF viewers will recover and silently
ignore, but this is no good at all. I wonder what happened.

		</comment>
		<comment id='13' author='jbarlow83' date='2016-01-05T01:55:20Z'>
		Try this to output to stdout:

pdftotext i182.pdf -

Jeff mentioned qpdf.
Links:
&lt;denchmark-link:http://qpdf.sourceforge.net&gt;http://qpdf.sourceforge.net&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/qpdf/qpdf&gt;https://github.com/qpdf/qpdf&lt;/denchmark-link&gt;

		</comment>
		<comment id='14' author='jbarlow83' date='2016-01-05T02:38:51Z'>
		Qpdf says it okay, but it doesn't check everything.
On Mon, Jan 4, 2016 at 17:55 Amit Dovev &lt;denchmark-link:mailto:notifications@github.com&gt;notifications@github.com&lt;/denchmark-link&gt;
 wrote:

Try this to output to stdout:
pdftotext i182.pdf -
Jeff mentioned qpdf.
Links:
http://qpdf.sourceforge.net
https://github.com/qpdf/qpdf
—
Reply to this email directly or view it on GitHub
#182 (comment)
.

		</comment>
		<comment id='15' author='jbarlow83' date='2016-01-05T03:42:52Z'>
		I might not have time to take a look until Wednesday. Validators of various flavors  include jhove, jhove-pdf-a, pdfbox, ITextRUPS, and &lt;denchmark-link:http://www.pdf-tools.com/pdf/validate-pdfa-online.aspx&gt;http://www.pdf-tools.com/pdf/validate-pdfa-online.aspx&lt;/denchmark-link&gt;
.  (Note that Tesseract PDF are not expected to be PDF/A compliant). I did compatibility testing with Apple's Preview at design time, but I don't test against it regularly. Never tried PyPDF2.  If I had to guess right now, I'd suspect it might be the invisible font improvement that was written for better ghostscript compatibility. Unlikely to be the hex encoding.
&lt;denchmark-link:https://code.google.com/p/tesseract-ocr/issues/detail?id=1434&gt;https://code.google.com/p/tesseract-ocr/issues/detail?id=1434&lt;/denchmark-link&gt;

&lt;denchmark-link:http://bugs.ghostscript.com/show_bug.cgi?id=695869&gt;http://bugs.ghostscript.com/show_bug.cgi?id=695869&lt;/denchmark-link&gt;

		</comment>
		<comment id='16' author='jbarlow83' date='2016-01-05T04:52:50Z'>
		Looking at issue 181, it's looking more and more like Preview is unhappy with the revised glyphless font, possible due to the zero advance width. Will try to borrow a Mac and play with it, hopefully on Wednesday.
		</comment>
		<comment id='17' author='jbarlow83' date='2016-01-05T08:12:01Z'>
		&lt;denchmark-link:https://github.com/jbreiden&gt;@jbreiden&lt;/denchmark-link&gt;
 I agree that the glyphless font issue seems more probable.
Aside: I wouldn't trust JHOVE for PDF validation. For JHOVE to approve is better than not approving, but its analysis is rudimentary, and in my experience it produce more false positives and negatives than useful diagnostics.
		</comment>
		<comment id='18' author='jbarlow83' date='2016-01-06T01:18:43Z'>
		I produced this PDF using Tesseract, then borrowed a laptop running Mac OS X version 10.10.5 and was able to both search and copy-paste from Preview (Although the copy-paste highlighting was kind of weird). My testing copy of Tesseract is not completely synchronized with GitHub, so if needed we can investigate that. How does this PDF perform for you on Preview, &lt;denchmark-link:https://github.com/jbarlow83&gt;@jbarlow83&lt;/denchmark-link&gt;
 ?
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/79277/2.pdf&gt;2.pdf&lt;/denchmark-link&gt;

There is also an alternative invisible font here, that contains an advanceWidth. I think it can be swapped in for tessdata/pdf.ttf. It has a side effect of making highlighting look even more bizarre in evince. I don't notice any compatibility differences at all, but mentioning in case someone wants to play with it. Have not checked compatibility with Ghostscript.
&lt;denchmark-link:https://github.com/behdad/tofudetector/blob/master/tofu.ttf?raw=true&gt;https://github.com/behdad/tofudetector/blob/master/tofu.ttf?raw=true&lt;/denchmark-link&gt;

Finally, this was my test image (I was actually using TIFF but GitHub doesn't let me attach that)
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/4961958/12132423/45519c7a-b3d0-11e5-9700-3179d131ae9e.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='19' author='jbarlow83' date='2016-01-06T01:29:19Z'>
		Doesn't work in Preview OS X 10.11.2 (highlights properly, but no copy-paste or search). I have access to two other OS X machines - will check those later day.
I check with my iPhone too. Both Chrome iOS (PDFium?) via Gmail app and Safari struggle to highlight text (they only allow highlighting a single character) and cannot copy.
		</comment>
		<comment id='20' author='jbarlow83' date='2016-01-06T04:03:40Z'>
		This one uses the alternate font that has an advance width.
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/79359/alternate.pdf&gt;alternate.pdf&lt;/denchmark-link&gt;

		</comment>
		<comment id='21' author='jbarlow83' date='2016-01-06T06:47:48Z'>
		alternate works on OS X Preview and my iPhone.
I did notice that spaces are sometimes missing in OS X's copy and paste text, while pdftotext shows the spaces, so perhaps it's not 100% but clearly this was the main issue.

components of the relative motions of the fixed , stars with respect to the earth on the colour of thelightreachingusfromthem. Thelattereffect manifests itself in a slight displacement of the spectral lines of the light transmitted to us from
a fixed star, as compared with the position of the same spectral lines when they are produced by a terrestrial source of light (Doppler principle). The experimental arguments in favour of the Maxwell-Lorentz theory, which are at the;same time arguments in favour of the theory of rela- tivity,aretoonumeroustobesetforthhere. In reality they limit the theoretical possibilities to such an extent, that no other theory than that of Maxwell and Lorentz has been able to hold its ownwhentestedbyexperience.
But there are two classes of experimental facts hitherto obtained which can be represented in the Maxwell-Lorentz theory only by the introduction of an auxiliary hypothesis, which in itself—i.e. without making use of the theory of relativity— appears extraneous.
Itisknownthatcathoderaysandtheso-called B—rays emitted by radioactive substances consist of negatively electrified particles (electrons) of verysmallinertiaandlargevelocity. By examin- ing the deflection of these rays under the influence of electric and magnetic fields, we can study the
law of motion of these particles very exactly.

		</comment>
		<comment id='22' author='jbarlow83' date='2016-01-06T10:37:32Z'>
		
Output:
linn.pdf

For me, pdftotext outputs no text, but Evince, which also uses Poppler, correctly selects and extracts text.
		</comment>
		<comment id='23' author='jbarlow83' date='2016-01-06T11:43:54Z'>
		&lt;denchmark-link:https://github.com/behdad&gt;@behdad&lt;/denchmark-link&gt;
, try this:

pdftotext linn.pdf -

		</comment>
		<comment id='24' author='jbarlow83' date='2016-01-06T11:55:46Z'>
		
@behdad, try this:
pdftotext linn.pdf -


Hah.  My bad.  Thanks :)
		</comment>
		<comment id='25' author='jbarlow83' date='2016-01-06T17:48:53Z'>
		I got my hands on an iPad running iOS 9.2 and reproduced the problem. On iOS/Safari I cannot search 2.pdf (Ken Sharp's font) but can search with alternate.pdf (Behdad's font). Took me quite a while to figure out how how to make the search controls work.
So for your immediate problem, go ahead and substitute in Behdad's font into tessdata/pdf.ttf and you should be okay. We won't do that officially without a whole bunch more compatibility testing and reports, including the harder languages (Cherokee, vertical Japanese, Arabic) and additional renderers including Ghostscript and Firefox. Compatibility reports are appreciated.
&lt;denchmark-link:https://github.com/behdad/tofudetector/blob/master/tofu.ttf?raw=true&gt;https://github.com/behdad/tofudetector/blob/master/tofu.ttf?raw=true&lt;/denchmark-link&gt;

Regarding the words running together on the Apple PDF renderer, that's not new. Apple PDF seems to do a worse job than everyone else at deciding word boundaries, and I've seen them screw up plenty of regular born-digital PDF files in the same way. Of course the root cause is the PDF spec itself, which does not explicitly define the concept of a word boundary. So I can't help you, but at least it isn't a regression. It's possible that Apple will get their act together a little better on this some day, but I have no reason to believe that it is on their radar.
		</comment>
		<comment id='26' author='jbarlow83' date='2016-01-08T09:32:38Z'>
		
There is also an alternative invisible font here, that contains an advanceWidth. I think it can be swapped in for tessdata/pdf.ttf. It has a side effect of making highlighting look even more bizarre in evince.

It looks terrible :(
		</comment>
		<comment id='27' author='jbarlow83' date='2016-01-08T11:28:19Z'>
		My font has a huge advance width, because it was designed for another purpose.  Someone should create one with an advance width of 1024 instead of my 20480.
		</comment>
		<comment id='28' author='jbarlow83' date='2016-01-08T19:23:36Z'>
		The PDF is keeping the advance width under control for Behdad's font. We're probably seeing something else. It's kind of cute zebra pattern. You get a black underline, and black boxes in all word gaps and in some letter gaps. (Obviously evince is doing a really bad  job, but this is much worse than with Ken Sharp's font, which highlights as a solid  black bar.) A little hard for me to investigate, since my copy of ttx is not cooperating.
P.S. The font advance width should probably be 512 to match what we specify in the PDF. But again, I don't expect that to change anything for evince.
&lt;denchmark-link:https://cloud.githubusercontent.com/assets/4961958/12207036/566e60a8-b5f9-11e5-92c2-61ad905889b9.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='29' author='jbarlow83' date='2016-01-08T20:38:26Z'>
		If you search for a phrase in evince, the highlighting looks more normal.
Strange!
		</comment>
		<comment id='30' author='jbarlow83' date='2016-02-01T18:39:46Z'>
		Nope, the PDF doen't seem to work for me (Mac OS X 10.11.3). The copied text is just equal number of spaces.
		</comment>
		<comment id='31' author='jbarlow83' date='2016-02-01T18:46:57Z'>
		This PDF is the latter, please test for compatibility. (Despite the change to advance width, we still get horrible looking highlighting on evince.)
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/112823/simple-1.pdf&gt;behdad.pdf&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;--- tofu.ttx    2016-02-01 10:17:15.038213397 -0800
+++ behdad.ttx  2016-02-01 10:43:29.839794297 -0800
@@ -33,7 +33,7 @@
     &lt;ascent value="2048"/&gt;
     &lt;descent value="0"/&gt;
     &lt;lineGap value="0"/&gt;
-    &lt;advanceWidthMax value="20480"/&gt;
+    &lt;advanceWidthMax value="1024"/&gt;
     &lt;minLeftSideBearing value="0"/&gt;
     &lt;minRightSideBearing value="0"/&gt;
     &lt;xMaxExtent value="0"/&gt;
@@ -69,7 +69,7 @@

   &lt;OS_2&gt;
     &lt;version value="3"/&gt;
-    &lt;xAvgCharWidth value="790"/&gt;
+    &lt;xAvgCharWidth value="1024"/&gt;
     &lt;usWeightClass value="400"/&gt;
     &lt;usWidthClass value="5"/&gt;
     &lt;fsType value="00000000 00000000"/&gt;
@@ -120,7 +120,7 @@

   &lt;hmtx&gt;
     &lt;mtx name=".notdef" width="2048" lsb="0"/&gt;
-    &lt;mtx name="glyph00001" width="20480" lsb="0"/&gt;
+    &lt;mtx name="glyph00001" width="1024" lsb="0"/&gt;
   &lt;/hmtx&gt;

   &lt;loca&gt;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='32' author='jbarlow83' date='2016-02-01T18:52:33Z'>
		behdad.pdf works better. The letters are now reproduced correctly. There's still something funny with how selection works. Selecting from left to right doesn't correctly select all the letters. Right-to-left selects the three last characters one by one and then all four of the rest at once. Might be unrelated issue, though.
		</comment>
		<comment id='33' author='jbarlow83' date='2016-02-01T19:00:37Z'>
		This is another attempt at the behdad font, with the contour data removed. It fixes the visual problem with evince. Please test for compatibility. If successful, we probably have a winner. (Don't worry about the left-to-right vs. right-to-left selection oddities; that's due to mixing Hebrew and English words in my test document)
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/112840/simple-1.pdf&gt;behdad2.pdf&lt;/denchmark-link&gt;

		</comment>
		<comment id='34' author='jbarlow83' date='2016-02-01T19:04:20Z'>
		Nope, this does not work any more (selected characters are spaces again).
		</comment>
		<comment id='35' author='jbarlow83' date='2016-02-01T19:09:08Z'>
		Utterly insane. I would really, really like to speak with the relevant software engineer at Apple. Putting this problem aside for a bit.
		</comment>
		<comment id='36' author='jbarlow83' date='2016-02-01T19:22:04Z'>
		Yes, utterly. I ran the tofu.ttf and the old pdf.ttf through Apples font validator. Both produced errors, but tofu.ttf only one, whereas the old pdf.ttf had additional "name table usability" errors. Please post the above font files (or diffs) and I'll run them through the validator as well. Perhaps this will give some insight to the issue.
		</comment>
		<comment id='37' author='jbarlow83' date='2016-02-01T20:09:45Z'>
		Fonts as per request. I do not know if my modification tool (ttx) corrupts anything along the way. So far the experiments suggest that Apple software requires a contour, and a contour cosmetically messes with evince.
pdf.ttf - currently shipping font, by Ken Sharp
sharp.ttf - with advance width added
tofu.ttf - alternate font from behdad
behdad.ttf -  with advance width reduced
behdad2.ttf - with contour removed
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/112928/fonts.zip&gt;fonts.zip&lt;/denchmark-link&gt;

		</comment>
		<comment id='38' author='jbarlow83' date='2016-02-01T20:18:12Z'>
		Thanks. Here's the verbose error report as given by Apples ftxvalidator (there's not really a version for 10.11, so some of this might be inaccurate). All report fatal errors and most errors are beyond my (admittedly limited) expertise on the subject. I hope they make more sense to you.
&lt;denchmark-link:&gt;Uploading ftxvalidator_report.txt…&lt;/denchmark-link&gt;

		</comment>
		<comment id='39' author='jbarlow83' date='2016-02-01T20:19:41Z'>
		Can you please edit that report and make it an attachment or something? The giant wall of text makes this bug harder to read.
		</comment>
		<comment id='40' author='jbarlow83' date='2016-02-02T03:53:46Z'>
		
Partially blocked by fonttools/fonttools#497

Fixed now.
		</comment>
		<comment id='41' author='jbarlow83' date='2016-02-05T21:48:07Z'>
		For completeness, here is Ken Sharp's font with a contour added in.
FONT
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/119877/sharp2.zip&gt;sharp2.zip&lt;/denchmark-link&gt;

PDF
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/119875/simple-1.pdf&gt;sharp2.pdf&lt;/denchmark-link&gt;

At this point, sharp2.ttf and behdad.ttf are the only fonts compatible with Apple Preview. They both come at the cost highlight aesthetics with evince. I think Preview is incorrect to require a contour for the glyph, and I think evince is incorrect to consider a contour when highlighting an invisible font. I do not have any reason so far to prefer one over the other, and I do not yet have compatibility test results from ghostscript, firefox, Microsoft Edge, etc.
		</comment>
		<comment id='42' author='jbarlow83' date='2016-02-05T22:51:06Z'>
		I have filed a bug with Apple. This is not publicly visible and I do not know what the response will be. Noting it here simply simply for future reference. radr://24533090
		</comment>
		<comment id='43' author='jbarlow83' date='2016-02-09T20:13:14Z'>
		In progress testing compatibility with candidates "sharp2" and "behdad" including getting some assistance with ghostscript. So far no user visible differences between them, and the former is the smaller change. Is there general consensus to work around the Apple compatibility problem, at the expense of Evince highlight aesthetics?
		</comment>
		<comment id='44' author='jbarlow83' date='2016-02-10T09:52:50Z'>
		&lt;denchmark-link:https://github.com/jbreiden&gt;@jbreiden&lt;/denchmark-link&gt;
 I agree. OS X Preview is installed on ~10% of all desktop computers. Evince is just one of many PDF viewers for Linux users.
		</comment>
		<comment id='45' author='jbarlow83' date='2016-02-10T11:58:13Z'>
		&lt;denchmark-link:https://github.com/jbarlow83&gt;@jbarlow83&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/jbreiden&gt;@jbreiden&lt;/denchmark-link&gt;
 This bug also affects the Amazon Kindles. As an avid user of Amazon Kindle and Tesseract, I feel crippled now. And don't forget that all those pdfs generated with Tesseract won't work with Kindle either around the world.
		</comment>
		<comment id='46' author='jbarlow83' date='2016-02-10T18:30:48Z'>
		&lt;denchmark-link:https://github.com/bekirserifoglu&gt;@bekirserifoglu&lt;/denchmark-link&gt;
 - can you please confirm that both proposed workarounds found in previous comments (sharp2.pdf, behdad.pdf) solve the problem on Kindle?
		</comment>
		<comment id='47' author='jbarlow83' date='2016-02-10T19:05:27Z'>
		&lt;denchmark-link:https://github.com/jbreiden&gt;@jbreiden&lt;/denchmark-link&gt;
 I can confirm that both sharp and tofu fonts work great with Kindle Voyage and Preview on Os X. Feel free to mention me if you need anymore testing.
		</comment>
		<comment id='48' author='jbarlow83' date='2016-02-10T20:26:53Z'>
		&lt;denchmark-link:https://github.com/bekirserifoglu&gt;@bekirserifoglu&lt;/denchmark-link&gt;
 - Is the failure case on Kindle broken search and broken copy-paste? Or is it even worse than that?
		</comment>
		<comment id='49' author='jbarlow83' date='2016-02-10T20:29:11Z'>
		&lt;denchmark-link:https://github.com/jbreiden&gt;@jbreiden&lt;/denchmark-link&gt;
 Kindle just treats the pdf as a non-ocr'ed pdf. It is worse than OS X preview.
		</comment>
		<comment id='50' author='jbarlow83' date='2016-02-11T23:30:23Z'>
		&lt;denchmark-link:https://github.com/theraysmith&gt;@theraysmith&lt;/denchmark-link&gt;

Okay, I've decided. We're going to use the sharp2 font.
For various embarassing reasons, I'd appreciate some help. Could someone please download this zip file, extract sharp2.ttf, and use it to replace pdf.ttf in the repository. The resulting file should still be called pdf.ttf. I apologize for not doing this myself and promise to get my act together with respect to GitHub pull requests in the future.
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/files/127261/sharp2.zip&gt;sharp2.zip&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/blob/master/tessdata/pdf.ttf&gt;https://github.com/tesseract-ocr/tesseract/blob/master/tessdata/pdf.ttf&lt;/denchmark-link&gt;

		</comment>
		<comment id='51' author='jbarlow83' date='2016-02-11T23:48:53Z'>
		Done. PR &lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/pull/220&gt;#220&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='52' author='jbarlow83' date='2016-02-13T08:54:32Z'>
		Thank you for fixing this.
		</comment>
		<comment id='53' author='jbarlow83' date='2016-02-13T09:08:23Z'>
		This was a short discussion... :-)
		</comment>
	</comments>
</bug>