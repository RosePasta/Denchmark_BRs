<bug id='444' author='vidiecan' open_date='2016-10-20T10:07:50Z' closed_time='2020-10-12T17:43:17Z'>
	<summary>Buffer overflow in proto_evidence_</summary>
	<description>
It seems that the corner case described below is not handled at all; therefore, I kindly ask someone familiar with the oldest tesseract code (&lt;denchmark-link:https://github.com/theraysmith&gt;@theraysmith&lt;/denchmark-link&gt;
) to give his opinion about it.
We encountered the following issue that results in tesseract crashing (OS and compiler dependent) because of a buffer overflow (input picture cannot be shared).
TL;DR
Overflow occurs here in intmatcher.cpp at:
&lt;denchmark-code&gt;UINT8Pointer =
            &amp;(tables-&gt;proto_evidence_[ActualProtoNum + proto_offset][0]);
          for (ProtoIndex =
            ClassTemplate-&gt;ProtoLengths[ActualProtoNum + proto_offset];
          ProtoIndex &gt; 0; ProtoIndex--, UINT8Pointer++) {
            if (Evidence &gt; *UINT8Pointer) {
              Temp = *UINT8Pointer;
              *UINT8Pointer = Evidence;  &lt;&lt;---- **HERE**
              Evidence = Temp;
            }
            else if (Evidence == 0)
              break;
          }
&lt;/denchmark-code&gt;

proto_evidence_ is initialised like this
&lt;denchmark-code&gt;uinT8 proto_evidence_[MAX_NUM_PROTOS][MAX_PROTO_INDEX];
&lt;/denchmark-code&gt;

where
&lt;denchmark-code&gt;#define MAX_NUM_PROTOS    512
#define MAX_PROTO_INDEX   24
&lt;/denchmark-code&gt;

The problem is that ProtoLengths[511] has size of &gt; 24 and (un)luckily the Evidence condition holds so an invalid write is performed (that in our case overwrote heap info that somewhere later in a delete caused the problem...)
&lt;denchmark-h:h2&gt;Details&lt;/denchmark-h&gt;

The stacktrace is classify_word_pass1-&gt;LearnWord-&gt;LearnPieces-&gt;AdaptToChar-&gt;MakeNewTemporaryConfig
where NumBadFeatures is computed (im_.FindBadFeatures) and gets exactly 100 (also NumFeatures=100). Then MakeNewTempProtos is called where SegmentLength is computed as 2.2999 and in ConvertProto we have
&lt;denchmark-code&gt;Param = (Proto-&gt;Length / GetPicoFeatureLength()) + 0.5;
Class-&gt;ProtoLengths[ProtoId] = TruncateParam(Param, 1, 255, NULL);
&lt;/denchmark-code&gt;

where
&lt;denchmark-code&gt;Param = 46
ProtoId = 511
&lt;/denchmark-code&gt;

with these values, the UINT8Pointer from above makes first 24 valid read/writes but then goes beyond  proto_evidence_.
	</description>
	<comments>
		<comment id='1' author='vidiecan' date='2016-10-21T09:09:08Z'>
		for the record, one hack/fix that solves it is tesseract/classify/intproto.cpp
&lt;denchmark-code&gt;-  Class-&gt;ProtoLengths[ProtoId] = TruncateParam(Param, 1, 255, NULL);
+
+  int len = TruncateParam(Param, 1, 255, NULL);
+  Class-&gt;ProtoLengths[ProtoId] = len;
+
+  int pos_in_proto_evidence = ProtoId * MAX_PROTO_INDEX + len;
+  static const int proto_evidence_size = MAX_NUM_PROTOS * MAX_PROTO_INDEX;
+  if (pos_in_proto_evidence &gt;= proto_evidence_size) {
+      Class-&gt;ProtoLengths[ProtoId] = proto_evidence_size - ProtoId * MAX_PROTO_INDEX;
+  }
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='vidiecan' date='2018-09-27T08:35:24Z'>
		Is this issue valid for current code (version 4.0.beta4)?
		</comment>
		<comment id='3' author='vidiecan' date='2018-09-27T09:49:26Z'>
		not valid for the LSTM based OCR + it has not been touched in almost 2 years - closing
		</comment>
		<comment id='4' author='vidiecan' date='2020-04-25T20:55:20Z'>
		People still use the legacy engine.
		</comment>
		<comment id='5' author='vidiecan' date='2020-04-28T17:57:02Z'>
		&lt;denchmark-link:https://github.com/amitdo&gt;@amitdo&lt;/denchmark-link&gt;
: should we applied fix from vidiecan?
		</comment>
		<comment id='6' author='vidiecan' date='2020-04-28T18:39:05Z'>
		I don't know. Let's ask &lt;denchmark-link:https://github.com/stweil&gt;@stweil&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='7' author='vidiecan' date='2020-04-28T19:35:22Z'>
		I'm afraid that code is only a hack, so it avoids the crash but does not fix the real problem. Ideally we should have a test image which triggers the problem. To find one, I'd suggest new code which not only avoids the buffer overflow but also reports the critical cases and asks users to provide their image.
		</comment>
		<comment id='8' author='vidiecan' date='2020-04-28T22:40:59Z'>
		There are raw images here with a demo program.
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/issues/2797#issuecomment-562634645&gt;#2797 (comment)&lt;/denchmark-link&gt;


results in tesseract crashing (OS and compiler dependent)

		</comment>
		<comment id='9' author='vidiecan' date='2020-04-29T06:06:13Z'>
		Thank you for the link. I'll have a look.
		</comment>
		<comment id='10' author='vidiecan' date='2020-10-12T16:51:53Z'>
		stweil,
Can we close this issue?
		</comment>
	</comments>
</bug>