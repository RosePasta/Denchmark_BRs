<bug id='1709' author='napasa' open_date='2018-06-27T10:24:16Z' closed_time='2019-05-27T11:29:06Z'>
	<summary>mingw64-cmake build error</summary>
	<description>
command: mkdir build &amp;&amp; cd build &amp;&amp; mingw64-cmake .. &amp;&amp; make
system:Linux localhost.localdomain 4.16.7-200.fc27.x86_64  Fedora release 27 (Twenty Seven)
distribution
CMakeFiles/tesseract.dir/objects.a(tesseractmain.cpp.obj):tesseractmain.cpp:(.text+0x13a2): undefined reference to TIFFSetWarningHandler' CMakeFiles/tesseract.dir/objects.a(tesseractmain.cpp.obj):tesseractmain.cpp:(.text+0x1478): undefined reference to tesseract::Dict::GlobalDawgCache()'
collect2: error: ld returned 1 exit status
make[2]: *** [CMakeFiles/tesseract.dir/build.make:88: bin/tesseract.exe] Error 1
make[1]: *** [CMakeFiles/Makefile2:68: CMakeFiles/tesseract.dir/all] Error 2
make: *** [Makefile:130: all] Error 2
	</description>
	<comments>
		<comment id='1' author='napasa' date='2018-09-30T15:09:44Z'>
		Seems like missing linking of tiff library (in case of #if defined(HAVE_TIFFIO_H) ) &amp;&amp; defined(_WIN32))...
Is it still issue with the current code?
		</comment>
		<comment id='2' author='napasa' date='2018-10-06T18:14:59Z'>
		Can you please retest? We plan to release 4.00 version soon.
		</comment>
		<comment id='3' author='napasa' date='2018-10-06T20:43:02Z'>
		I suggest to use an automake build instead of cmake. That works. Here are my build commands:
&lt;denchmark-code&gt;./autogen.sh
mkdir bin &amp;&amp; cd bin
../configure --host=x86_64 --prefix=/usr/x86_64 CXXFLAGS="-Wall -Wextra -Wpedantic -g -O2"
make Scrollview.jar training
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='napasa' date='2018-10-06T20:49:46Z'>
		&lt;denchmark-link:https://github.com/zdenop&gt;@zdenop&lt;/denchmark-link&gt;
, no need to fix this for 4.0.0 as automake works.
		</comment>
		<comment id='5' author='napasa' date='2018-10-07T14:09:17Z'>
		Automake tools on windows are pain... I have it on my old computer and I skipped it  on new and installed cmake. But not mingw64 ;-)
IMO it should work already or fix should be easy. But we need somebody how test it. If not I will close the issue.
		</comment>
		<comment id='6' author='napasa' date='2018-10-07T16:52:21Z'>
		The initial report was for a Fedora Linux host, so it was a cross build. That's how I build the Tesseract installer for Windows, too.
When building on a Windows host, I use Cygwin64 and run a cross build targeting Mingw-w64. It's much slower than on a Linux host, but otherwise that combination works fine.
		</comment>
		<comment id='7' author='napasa' date='2019-04-22T07:14:00Z'>
		Closing as no reaction from reporter. If issues is still valid, please retest with the latest master
		</comment>
		<comment id='8' author='napasa' date='2019-05-15T13:30:05Z'>
		Yep, I catch this bug.
Qt 5.12 + mingw73_64
The problem is - you are trying to call tesseract::Dict::GlobalDawgCache() which is not exported from dll. I'm realy messed, why even MSVC didn't catch this bug, maybe due to it is a static function and somehow linker could get the definition, also I don't remember that this bug was appearing a year ago even with MinGW.
So, just add TESS_API to the Dict: src\dict\dict.h
&lt;denchmark-code&gt;   class TESS_API Dict {
&lt;/denchmark-code&gt;

Probably other objects may need to be checked for missing TESTS_API.
		</comment>
		<comment id='9' author='napasa' date='2019-05-15T13:58:30Z'>
		What it get that error? Please provide all details.
		</comment>
		<comment id='10' author='napasa' date='2019-05-15T14:15:08Z'>
		&lt;denchmark-link:https://github.com/zdenop&gt;@zdenop&lt;/denchmark-link&gt;
, the bug is the same as that of &lt;denchmark-link:https://github.com/napasa&gt;@napasa&lt;/denchmark-link&gt;
, who created this issue, otherwise I would create a new one.
&lt;denchmark-code&gt;Scanning dependencies of target tesseract
[ 99%] Building CXX object CMakeFiles/tesseract.dir/src/api/tesseractmain.cpp.obj
[100%] Linking CXX executable bin\tesseract.exe
CMakeFiles\tesseract.dir/objects.a(tesseractmain.cpp.obj):tesseractmain.cpp:(.text.startup+0x253): undefined reference to `tesseract::Dict::GlobalDawgCache()'
collect2.exe: error: ld returned 1 exit status
mingw32-make.exe[2]: *** [CMakeFiles\tesseract.dir\build.make:87: bin/tesseract.exe] Error 1
&lt;/denchmark-code&gt;

		</comment>
		<comment id='11' author='napasa' date='2019-05-15T15:54:42Z'>
		I am not interesting in error message: I need steps to reproduce it.
You probably use unsupported compiler on windows - see wiki about &lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/wiki/Compiling#window&gt;supported compiler&lt;/denchmark-link&gt;
. + I am able to compile it with clang.
		</comment>
		<comment id='12' author='napasa' date='2019-05-16T08:19:48Z'>
		Install Qt 5.12.3 with mingw 7.3; CMake; Pkg-Config. Configure environments. Build:
&lt;denchmark-code&gt;cmake ../tesseract-source -G"CodeBlocks - MinGW Makefiles"  -DCMAKE_INSTALL_PREFIX=%INSTALL_PATH%
cmake --build . --target install --config %BUILD_CONFIGURATION%
&lt;/denchmark-code&gt;

I am also able to compile it with MSVC, clang, gcc on unix, but not with &lt;denchmark-link:https://mingw-w64.org/doku.php&gt;mingw&lt;/denchmark-link&gt;
.
I can't understand why MinGW might be an unsupported compiler of tesseract? The header of this issue contain "mingw64-cmake" and no one says that it is unsupported, the wiki also contains a few words about &lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/wiki/Compiling#mingwmsys&gt;mingw&lt;/denchmark-link&gt;
. –ênd &lt;denchmark-link:https://doc-snapshots.qt.io/qt5-5.12/supported-platforms.html#windows&gt;Qt used mingw for build&lt;/denchmark-link&gt;

Here &lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/blob/master/src/dict/dict.h#L87&gt;https://github.com/tesseract-ocr/tesseract/blob/master/src/dict/dict.h#L87&lt;/denchmark-link&gt;

we have a class that is not &lt;denchmark-link:http://docs.microsoft.com/cpp/cpp/dllexport-dllimport&gt;exported from DLL&lt;/denchmark-link&gt;
. And here &lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/blob/master/src/api/tesseractmain.cpp#L626&gt;https://github.com/tesseract-ocr/tesseract/blob/master/src/api/tesseractmain.cpp#L626&lt;/denchmark-link&gt;
 the call of function that not exported from DLL. And even you have not defined the macro  some compilers (clang, gcc on unix) will work fine.
		</comment>
		<comment id='13' author='napasa' date='2019-05-16T09:47:32Z'>
		
I we have list of supported compilers (E.g. there are people who maintained support for them). Making list of not supported compilers or platforms is insane - it would be never completed ;-)
TESS_API macro should effect IMO only "visibility build" (hiding of functions), so it should not effect standard build. So if clang, MSVC and gcc works as expected and MinGW not, I guess there is problem (in MinGW or cmake compiler instructions).
From my experience Dict::GlobalDawgCache() is not needed (as public function) I am not sure why it was used in tesseract executable. I need to check how it fill effects API.
Thanks for details about configuring project - I will try it later.

		</comment>
		<comment id='14' author='napasa' date='2019-05-19T20:13:57Z'>
		I reopened issue because this topic (at least) produces some questions:

I was able to reproduce error with mingw on windows, gcc on linux + MSVC, and clang with MSVC compatibility on windows have no problem with this setup. Does mingw use by default -fvisibility=hidden -fvisibility-inlines-hidden?
I plan to test clang with gcc/mingw compatibility.
Usage of GlobalDawgCache() in tesseract main was introduced by @stweil in commit 7814259. I am not sure if memory leak mentioned in commint is related to report like "ObjectCache(0x7fe81e8fcee0)::~ObjectCache(): WARNING! LEAK! object 0x1abf240 still has count 1 (id /usr/local/share/....". If yes, that calling api-&gt;End() should be (right/better?) solution.
TODO: test --enable-visibility autoconf build

		</comment>
		<comment id='15' author='napasa' date='2019-05-20T11:43:31Z'>
		One more call of unexported function github.com/tesseract-ocr/tesseract/blob/master/src/api/tesseractmain.cpp#L639
IMHO, it is a very bad idea to use something from the library that is not explicitly
marked for export, even if export is transparent for some platform.
		</comment>
		<comment id='16' author='napasa' date='2019-05-21T07:48:53Z'>
		&lt;denchmark-link:http://www.mingw.org/&gt;MinGW &lt;/denchmark-link&gt;
is not well maintained, and there is &lt;denchmark-link:http://mingw-w64.org/doku.php&gt;Mingw-w64&lt;/denchmark-link&gt;
 as an alternative. Tesseract builds fine with Mingw-w64. I use it regularly for cross builds from Cygwin and from Linux. Therefore I don't think that Tesseract must support MinGW.
		</comment>
		<comment id='17' author='napasa' date='2019-05-21T08:35:19Z'>
		&lt;denchmark-link:https://github.com/stweil&gt;@stweil&lt;/denchmark-link&gt;
 , the main question is why  called the functions that are not explicitly marked for export from . For newer toolchain this is only a logical problem, and most of them didn't show even a warning, but some of them used opaque export &lt;denchmark-link:https://docs.microsoft.com/cpp/cpp/dllexport-dllimport&gt;https://docs.microsoft.com/cpp/cpp/dllexport-dllimport&lt;/denchmark-link&gt;

And here we got a strange thing: MSVC feel fine for static function call drom dll.
I use Qt with MinGW 7.3 &lt;denchmark-link:https://doc-snapshots.qt.io/qt5-5.12/supported-platforms.html#windows&gt;https://doc-snapshots.qt.io/qt5-5.12/supported-platforms.html#windows&lt;/denchmark-link&gt;
 i.e. Mingw-w64.
		</comment>
		<comment id='18' author='napasa' date='2019-05-25T09:17:20Z'>
		try now: should be solved with &lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/commit/539673b5036b2b4b9ece14af4a7614f9e65824c2&gt;539673b&lt;/denchmark-link&gt;

		</comment>
		<comment id='19' author='napasa' date='2019-05-27T11:01:31Z'>
		it's ok for now.
		</comment>
	</comments>
</bug>