<bug id='874' author='gaussianrecurrence' open_date='2017-05-04T09:02:49Z' closed_time='2019-10-21T11:48:17Z'>
	<summary>Application using TessBaseAPI crashing due to copying issues</summary>
	<description>
Well, I'm trying to implement an application using tesseract API, but so far I couldn't get it working as it crashes always when trying to clean-up all the memory.
After a few hours of dissasembly I've come to the conclusion that the problem is due to TessBaseAPI not having copy-constructor or assignation operator.
I've got a class called OcrEngine, this one creates an instance of TessBaseAPI (let's call it instance T_A), and when I copy an instance of OcrEngine, OcrEngine copy-constructor is called which consequently calls compiler-generated TessBaseAPI copy-constructor, generating a new TessBaseAPI (let's call it instance T_B). As of compiler-generated copy-constructors performs a "fool-copy", both instance T_A and T_B shares the same attributes. And when T_A is destroyed, values of T_B point to non-existant memory regions.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

So, if i'm not wrong a simply solution to this problem might be to implement copy-constructors and assignation operators for TessBaseAPI class and the ones instanced by it.
Meanwhile when I make a copy of my class OcrEngine, I just create a new instance of TessBaseAPI and try to replicate all the original TessBaseAPI object configuration.
	</description>
	<comments>
		<comment id='1' author='gaussianrecurrence' date='2017-05-04T11:33:06Z'>
		&lt;denchmark-link:http://stackoverflow.com/questions/3422125/why-copy-constructor-and-assignment-operator-are-disallowed&gt;http://stackoverflow.com/questions/3422125/why-copy-constructor-and-assignment-operator-are-disallowed&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='gaussianrecurrence' date='2017-05-04T11:41:52Z'>
		&lt;denchmark-link:https://google.github.io/styleguide/cppguide.html#Copyable_Movable_Types&gt;https://google.github.io/styleguide/cppguide.html#Copyable_Movable_Types&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='gaussianrecurrence' date='2017-05-04T12:14:49Z'>
		Bottom line - Don't copy it.
		</comment>
		<comment id='4' author='gaussianrecurrence' date='2017-05-10T15:15:06Z'>
		I don't think that's the solution. The reason why I want to use copy constructor is to avoid allocating sparse memory regions. Moreover the main reason why I need to copy then is to avoid having to reconfigure the class many times in case I'd had a OCR thread pool...
In my opinion I don't see why copy constructors/assignation operators are evil. I mean the main idea is to use then but there are lots of situations where you need it. I just think is a dumb reasoning...
Moreover, If only TessBaseAPI were using reference-counting for all its internal objects, I wouldn't need to implement these methods, but that's not the case..
		</comment>
		<comment id='5' author='gaussianrecurrence' date='2018-09-20T08:18:19Z'>
		&lt;denchmark-link:https://github.com/stweil&gt;@stweil&lt;/denchmark-link&gt;
, I think copying the api object should be disabled with C++11 .
		</comment>
		<comment id='6' author='gaussianrecurrence' date='2019-10-21T09:45:37Z'>
		&lt;denchmark-link:https://github.com/stweil&gt;@stweil&lt;/denchmark-link&gt;
, another try...
		</comment>
		<comment id='7' author='gaussianrecurrence' date='2019-10-21T11:15:05Z'>
		Please review pull request  &lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/pull/2721&gt;#2721&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='8' author='gaussianrecurrence' date='2019-10-21T11:48:17Z'>
		Copying is now no longer possible, so I close this issue. An implementation with reference counting can be implemented later. Personally I think there are other things with a higher priority before that.
		</comment>
		<comment id='9' author='gaussianrecurrence' date='2019-10-29T19:12:21Z'>
		The removal of the copy constructor breaks &lt;denchmark-link:https://github.com/sirfz/tesserocr/&gt;tesserocr&lt;/denchmark-link&gt;
 which currently uses it, maybe &lt;denchmark-link:https://github.com/sirfz/tesserocr/blob/master/tesserocr.pyx#L48&gt;here&lt;/denchmark-link&gt;
. I still don't know how to fix that. &lt;denchmark-link:https://github.com/sirfz&gt;@sirfz&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='10' author='gaussianrecurrence' date='2019-11-05T10:08:52Z'>
		You can try to ask about the needed changes in tesserocr here:
&lt;denchmark-link:https://groups.google.com/group/cython-users&gt;https://groups.google.com/group/cython-users&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='gaussianrecurrence' date='2019-11-05T10:26:57Z'>
		The solution was surprisingly easy: just delete unneeded code: &lt;denchmark-link:https://github.com/sirfz/tesserocr/pull/200&gt;sirfz/tesserocr#200&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>