<bug id='2674' author='jkang-eng' open_date='2019-09-24T16:49:24Z' closed_time='2019-10-07T13:14:15Z'>
	<summary>Windows (x64) compiled executable (tesseract.exe) doesn't work in any other windows machine (x64)</summary>
	<description>
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;


Tesseract Version: tesseract 5.0.0-alpha-375-g179c8
Platform: Windows Server 2008 R2, 64bit

&lt;denchmark-h:h3&gt;Current Behavior:&lt;/denchmark-h&gt;

I built tesseract executable from source using following &lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/wiki/Compiling#develop-tesseract&gt;this instruction&lt;/denchmark-link&gt;


git clone https://github.com/tesseract-ocr/tesseract tesseract
Modify source code (this is to suit our application's purpose, certain that this is NOT the root cause of issue)
cd tesseract
cppan
mkdir build &amp;&amp; cd build
cmake ..
cmake --build . --config Release

After step 6, I see tesseract.exe under "tesseract\build\bin\Release" directory, and executing it without any issue (working perfectly fine).
However, if once I copy entire \Release directory to another Windows with x64 platform (Windows Server 2008, 2016, etc..)  It doesn't work anywhere else.  (see screenshots below)
I have installed "Microsoft Visual C++ 2015-2019 Redistributable (x64)", so dependency does not look like issue here.
Screenshot 1 ()
&lt;denchmark-link:https://user-images.githubusercontent.com/55756666/65531894-e519a780-dec8-11e9-8b22-2ded63cc28c4.png&gt;&lt;/denchmark-link&gt;

Screenshot 2 ()
&lt;denchmark-link:https://user-images.githubusercontent.com/55756666/65531907-e8149800-dec8-11e9-844e-952a80c23a45.png&gt;&lt;/denchmark-link&gt;

Screenshot 3 ()
&lt;denchmark-link:https://user-images.githubusercontent.com/55756666/65531941-f367c380-dec8-11e9-8d6a-c5a2e2226ca9.png&gt;&lt;/denchmark-link&gt;

Screenshot 4 () - FYI, disk is not on network, it's under C:
&lt;denchmark-link:https://user-images.githubusercontent.com/55756666/65531947-f662b400-dec8-11e9-8a88-e9f3006c61f3.png&gt;&lt;/denchmark-link&gt;

Can anyone suggest me with a fix? is there anything I'm missing during compilation procedure?
&lt;denchmark-h:h3&gt;Suggested Fix:&lt;/denchmark-h&gt;

	</description>
	<comments>
		<comment id='1' author='jkang-eng' date='2019-09-24T17:51:53Z'>
		CMake builds are currently optimized for the build host architecture. So if you build on a PC with AVX2 hardware, the resulting binaries won't work (= will crash) on a PC without AVX2.
Either fix cmake/OptimizeForArchitecture.cmake or remove it from CMakeLists.txt.
		</comment>
		<comment id='2' author='jkang-eng' date='2019-09-24T17:53:14Z'>
		Builds using autoconf will work.
		</comment>
		<comment id='3' author='jkang-eng' date='2019-09-24T18:23:32Z'>
		&lt;denchmark-link:https://github.com/stweil&gt;@stweil&lt;/denchmark-link&gt;
 Thanks for your suggestions.
Regarding your recommendation , I'm compiling without following section in CMakeLists.txt and it seems to work on other Windows machine.
&lt;denchmark-code&gt;# auto optimize
# include(OptimizeForArchitecture)
#AutodetectHostArchitecture()
# OptimizeForArchitecture()
#foreach(flag ${Vc_ARCHITECTURE_FLAGS})
#     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flag}")
# endforeach()
&lt;/denchmark-code&gt;

When you mentioned build using , can you instruct me how to do this?  I couldn't find  usage under HowToBuild (Windows) &lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/wiki/Compiling#develop-tesseract&gt;instruction page&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='4' author='jkang-eng' date='2019-09-25T17:39:17Z'>
		With disabling optimization OCR process will be slow.
Autotools macros are common for linux and using them on Windows is very difficult.
Other option is to use &lt;denchmark-link:https://github.com/UB-Mannheim/tesseract/wiki&gt;cross-compiled windows build&lt;/denchmark-link&gt;
, but IMO it is not suitable for using tesseract API (library) on windows (VS Studio).
		</comment>
		<comment id='5' author='jkang-eng' date='2019-09-25T17:46:35Z'>
		
With disabling optimization OCR process will be slow.
Autotools macros are common for linux and using them on Windows is very difficult.
Other option is to use cross-compiled windows build, but IMO it is not suitable for using tesseract API (library) on windows (VS Studio).

Do you have any guess on what performance degradation would be without optimization ?  (I will need to test performance anyways but was just curious if you can make any rough guess here)
Using cross-compiled windows build would be a problem for me, because I needed to changed the source code.
		</comment>
		<comment id='6' author='jkang-eng' date='2019-09-26T14:54:48Z'>
		With image from issue 263 I got this results (tesseract 5.0.0-alpha-447-g52cf, Intel Core i7-6600U 2,60GHz 2.8 GHz; 8 GB ram; Windows 64 bit) - 5 runs:
With autooptimization: 26.177767169865813
Without autooptimization: 50.47452997387488
: I posted more details in #&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/issues/263#issuecomment-536197289&gt;263&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='jkang-eng' date='2019-09-28T12:45:11Z'>
		Now you can turn off cmake autooptimization with:
cmake .. -DAUTO_OPTIMIZE=OFF
		</comment>
		<comment id='8' author='jkang-eng' date='2019-09-29T11:59:40Z'>
		&lt;denchmark-link:https://github.com/zdenop&gt;@zdenop&lt;/denchmark-link&gt;
, did you specify  for your builds?
If not: please try latest Git master. It should be significantly faster.
		</comment>
		<comment id='9' author='jkang-eng' date='2019-09-29T12:19:34Z'>
		&lt;denchmark-link:https://github.com/stweil&gt;@stweil&lt;/denchmark-link&gt;
: I used cmake&amp;ninja&amp;clang and this combinations needs to specify . So yes, I specify it (to Release).
		</comment>
		<comment id='10' author='jkang-eng' date='2019-09-30T13:20:09Z'>
		&lt;denchmark-link:https://github.com/zdenop&gt;@zdenop&lt;/denchmark-link&gt;
 Hi, thanks for testing the performance with optimization on/off.

Update: I posted more details in #263

In your post, you mentioned

tessdata_best
tessdata_fast
tessdata

Does this mean if I use eng.traineddata from each git, OCR engine will perform differently based on trained data file?  In other words, if I swap exsiting eng.traineddata with the one from "tessdata_fast", would it increase performance?
After reading some doc, it looks like eng.traineddata has effect when using LSTM engine.  I don't explicitly specify engine mode when executing.  is LSTM used by default?
		</comment>
		<comment id='11' author='jkang-eng' date='2019-09-30T17:26:46Z'>
		
if I swap existing eng.traineddata with the one from "tessdata_fast", would it increase performance?

I am not sure how do you measure performance, but tessdata_fast model is faster version of tessdata_best. It has some limitations (e.g. you can do training only from best model, and best model provide better OCR result - at least in some cases).

is LSTM used by default?

&lt;denchmark-code&gt;&gt;tesseract --help-oem
OCR Engine modes:
  0    Legacy engine only.
  1    Neural nets LSTM engine only.
  2    Legacy + LSTM engines.
  3    Default, based on what is available.
&lt;/denchmark-code&gt;

what is available =&gt; tessdata_best and tessdata_fast have only LSTM models (you will get error if you will use --oem 0: Failed loading language 'eng' Tesseract couldn't load any languages! Could not initialize tesseract), tessdata has also legacy model.
		</comment>
		<comment id='12' author='jkang-eng' date='2019-10-07T12:54:12Z'>
		&lt;denchmark-link:https://github.com/zdenop&gt;@zdenop&lt;/denchmark-link&gt;
  Thanks, that makes sense.
Quick question regarding compilation (will create a new ticket if needed)
I'm using cmake to compile (shown below), which generate 64-bit executable.  Is there any way to build 32-bit env executable?
&lt;denchmark-code&gt;:: Compile Tesseract
cd build\tesseract_src
cppan

cd ..
cmake tesseract_src
cmake --build . --config Release
&lt;/denchmark-code&gt;

Can I achieve all the same behavior above by using msbuild ? (Visual Studio compilation)
		</comment>
		<comment id='13' author='jkang-eng' date='2019-10-07T13:14:15Z'>
		
IMO original topic is solved, so I will close this issue.
Issue tracker is for bug and not for support. Please use forum or better - read cppan doc. It is external project.

		</comment>
		<comment id='14' author='jkang-eng' date='2019-10-07T20:09:48Z'>
		Got it.  Thanks for the help.
		</comment>
	</comments>
</bug>