<bug id='2797' author='milos-pesic-zattoo' open_date='2019-12-03T17:30:43Z' closed_time='2020-10-12T17:50:47Z'>
	<summary>Crash in intmatcher.cpp - hitting MAX_PROTO_INDEX assertion</summary>
	<description>
Crash at:
&lt;denchmark-code&gt;tesseract/src/classify/intmatcher.cpp:1155: void ScratchEvidence::UpdateSumOfProtoEvidences(INT_CLASS, BIT_VECTOR): Assertion `ClassTemplate-&gt;ProtoLengths[ActualProtoNum] &lt; MAX_PROTO_INDEX' failed.
&lt;/denchmark-code&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;


Tesseract Version: 4.1.0
Commit Number: 5280bbc
Platform: Debian GNU/Linux 9.11 (stretch)

&lt;denchmark-h:h3&gt;Current Behavior:&lt;/denchmark-h&gt;

Use case: running tesseract legacy ocr engine on multicast video streams and continuously extracting text from DVB bitmap subtitles.
Tesseract library built from source - you can find the build log &lt;denchmark-link:https://drive.google.com/drive/folders/1obF7GogSn0ue_h1qR3xICqxMV0uJk42k?usp=sharing&gt;here&lt;/denchmark-link&gt;

Tessdata used: &lt;denchmark-link:https://github.com/tesseract-ocr/tessdata/releases/tag/4.0.0&gt;https://github.com/tesseract-ocr/tessdata/releases/tag/4.0.0&lt;/denchmark-link&gt;

So far only tested with french language.
The way API is used:

Initialising TessBaseAPI

&lt;denchmark-code&gt;tessAPI-&gt;Init(trainedDataPath.c_str(), lang.c_str(), tesseract::OEM_TESSERACT_ONLY);
&lt;/denchmark-code&gt;


for each in memory dvb bitmap image extracted from the media stream:

&lt;denchmark-code&gt;char *res = tessAPI-&gt;TesseractRect(image.data(), 3, width * 3, 0, 0, width, height);
// some business logic using res
delete [] res;
&lt;/denchmark-code&gt;

where image is vector&lt;uint8_t&gt; containing RGB24 raw image data (dimensions given by width and  height.
The frequency of the crash is intermittent - sometimes it happens after 3-4 days of constant processing, sometimes just after a couple of minutes. It isn't super easy reproducible.
I thought it might be input related - so I added a code to store the image on disk before processing it - to be able to see which image caused the crash. Once the crash happened - I tried to load the same image in the same way - but it worked fine - it didn't crash again.
I have extended that code to store last couple of hundred images and now waiting on crash to happen again - so hopefully replaying them could trigger the crash and I can provide more data / reproduction scenario. Will update the issue with new findings.
Full stack trace:
&lt;denchmark-code&gt;/lib/x86_64-linux-gnu/libc.so.6(gsignal0x7fb1a4ba4fff]
/lib/x86_64-linux-gnu/libc.so.6(abort+0x16a)[0x7fb1a4ba642a]
/lib/x86_64-linux-gnu/libc.so.6(+0x2be67)[0x7fb1a4b9de67]
/lib/x86_64-linux-gnu/libc.so.6(+0x2bf12)[0x7fb1a4b9df12]
/usr/bin/zattoo-recorder(_ZN15ScratchEvidence25UpdateSumOfProtoEvidencesEP16INT_CLASS_STRUCTPj+0xb9)[0x55bed9b1c7e5
/usr/bin/zattoo-recorder(_ZN14IntegerMatcher5MatchEP16INT_CLASS_STRUCTPjS2_sPK18INT_FEATURE_STRUCTPN9tesseract13UnicharRatingEiib+0x1b9)[0x55bed9b1b025]
/usr/bin/zattoo-recorder(_ZN9tesseract8Classify11AdaptToCharEP5TBLOBiifP22ADAPT_TEMPLATES_STRUCT+0x2f5)[0x55bed9b0ee41]
/usr/bin/zattoo-recorder(_ZN9tesseract8Classify11LearnPiecesEPKciifNS_20CharSegmentationTypeES2_P8WERD_RES+0x4a0)[0x55bed9b0d820]
/usr/bin/zattoo-recorder(_ZN9tesseract8Classify9LearnWordEPKcP8WERD_RES+0x42a)[0x55bed9b0cf6e]
/usr/bin/zattoo-recorder(_ZN9tesseract9Tesseract19classify_word_pass1ERKNS_8WordDataEPP8WERD_RESPNS_13PointerVectorIS4_EE+0x2ce)[0x55bed9a6d986]
/usr/bin/zattoo-recorder(_ZN9tesseract9Tesseract17RetryWithLanguageERKNS_8WordDataEMS0_FvS3_PP8WERD_RESPNS_13PointerVectorIS4_EEEbS6_S9_+0xbf)[0x55bed9a6b141]
/usr/bin/zattoo-recorder(_ZN9tesseract9Tesseract26classify_word_and_languageEiP11PAGE_RES_ITPNS_8WordDataE+0x260)[0x55bed9a6d2fa]
/usr/bin/zattoo-recorder(_ZN9tesseract9Tesseract18RecogAllWordsPassNEiP10ETEXT_DESCP11PAGE_RES_ITP13GenericVectorINS_8WordDataEE+0x3c9)[0x55bed9a68315]
/usr/bin/zattoo-recorder(_ZN9tesseract9Tesseract15recog_all_wordsEP8PAGE_RESP10ETEXT_DESCPK4TBOXPKci+0x320)[0x55bed9a6875e]
/usr/bin/zattoo-recorder(_ZN9tesseract11TessBaseAPI9RecognizeEP10ETEXT_DESC+0x5a7)[0x55bed9a5523d]
/usr/bin/zattoo-recorder(_ZN9tesseract11TessBaseAPI11GetUTF8TextEv+0x3a)[0x55bed9a567bc]
&lt;/denchmark-code&gt;

I have checked similar issues and it seems that I am hitting the following one:
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/issues/2716&gt;#2716&lt;/denchmark-link&gt;

Also checked:
&lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/issues/444&gt;#444&lt;/denchmark-link&gt;

(tried the patch suggested there - but that didn't help)
&lt;denchmark-h:h3&gt;Expected Behavior:&lt;/denchmark-h&gt;

Crash free.
&lt;denchmark-h:h3&gt;Suggested Fix:&lt;/denchmark-h&gt;

	</description>
	<comments>
		<comment id='1' author='milos-pesic-zattoo' date='2019-12-06T16:09:05Z'>
		I was finally able to reproduce the crash again after a couple of days - this time with more debug data - which allows me to reproduce the issue at will on the affected platform.
I stored last 100 images before the crash - and I am able to reproduce the issue by replaying them - the crash happens on the same image every time (the 53rd).
This is the simple program that's reading stored raw images (together with their width and height):
&lt;denchmark-link:https://drive.google.com/open?id=1c2VhtNP6ypxHHBYe3SpT_BH3con-1v2Z&gt;https://drive.google.com/open?id=1c2VhtNP6ypxHHBYe3SpT_BH3con-1v2Z&lt;/denchmark-link&gt;

And this is the zip archive containing these images:
&lt;denchmark-link:https://drive.google.com/open?id=1DD0YVrGdPGALDunuNzsZD6AJ62gfcD3h&gt;https://drive.google.com/open?id=1DD0YVrGdPGALDunuNzsZD6AJ62gfcD3h&lt;/denchmark-link&gt;

Instruction for reproducing it:

Build the test program, name it e.g crasher
Unizp the archive containing raw images.
Run the program:

&lt;denchmark-code&gt;./crasher {path_to_folder_containing_images} {path_to_trained_tessdata}
&lt;/denchmark-code&gt;

Let me know if you need more info.
		</comment>
		<comment id='2' author='milos-pesic-zattoo' date='2019-12-19T20:20:23Z'>
		Did anyone have a chance to take a look into this one?
		</comment>
		<comment id='3' author='milos-pesic-zattoo' date='2019-12-20T20:05:43Z'>
		Hm the ProtoLength is 29 for some reason. I am not familiar with the codebase so I don't know how this can happen. But anyways, the assert should only happen when compiling in debug mode.
		</comment>
		<comment id='4' author='milos-pesic-zattoo' date='2020-03-04T09:37:07Z'>
		Any update on this?
		</comment>
		<comment id='5' author='milos-pesic-zattoo' date='2020-03-04T10:14:02Z'>
		I can only report that we are still suffering from it. Let me know if more info is needed aside from what I already provided.
		</comment>
		<comment id='6' author='milos-pesic-zattoo' date='2020-03-04T12:22:16Z'>
		I was actually asking on your part as i suffer from this as well ðŸ˜ž . sorry for the false hope
		</comment>
		<comment id='7' author='milos-pesic-zattoo' date='2020-04-24T15:42:43Z'>
		
the assert should only happen when compiling in debug mode.

&lt;denchmark-link:https://github.com/milos-pesic-zattoo&gt;@milos-pesic-zattoo&lt;/denchmark-link&gt;
, did you use a debug mode?
Anyway, you can try to disable the adaptive learning phase, maybe it is causing the issue.
		</comment>
		<comment id='8' author='milos-pesic-zattoo' date='2020-04-24T16:56:33Z'>
		&lt;denchmark-link:https://github.com/amitdo&gt;@amitdo&lt;/denchmark-link&gt;
 Thanks a lot for checking the issue - we don't specify build type - and based on the &lt;denchmark-link:https://drive.google.com/drive/folders/1obF7GogSn0ue_h1qR3xICqxMV0uJk42k&gt;build log&lt;/denchmark-link&gt;
 I don't see debug cxx flags.
How could I disable the adaptive learning phase and could it cause the loss of accuracy?
		</comment>
		<comment id='9' author='milos-pesic-zattoo' date='2020-04-24T17:02:11Z'>
		actually i see that cmke_build_type is empty in my case:
&lt;denchmark-code&gt;-- General configuration for Tesseract 4.1.0
-- --------------------------------------------------------
-- **Build type**: 
-- Compiler: GNU
-- Used standard: C++14
&lt;/denchmark-code&gt;

		</comment>
		<comment id='10' author='milos-pesic-zattoo' date='2020-04-24T18:11:13Z'>
		
How could I disable the adaptive learning phase

set classify_enable_learning to false.

could it cause the loss of accuracy?

In principle, yes it could harm accuracy, but it depends on your input. You should check this yourself on sample of representative images.
		</comment>
		<comment id='11' author='milos-pesic-zattoo' date='2020-06-17T06:20:07Z'>
		&lt;denchmark-link:https://github.com/milos-pesic-zattoo&gt;@milos-pesic-zattoo&lt;/denchmark-link&gt;
, the assertion can be reproduced by just processing image  twice.
The assertion was removed in the latest code, so you won't get it anymore.
Nevertheless there remains the question why first and second processing differ.
		</comment>
		<comment id='12' author='milos-pesic-zattoo' date='2020-10-12T16:58:42Z'>
		&lt;denchmark-link:https://github.com/stweil&gt;@stweil&lt;/denchmark-link&gt;
,
Was this solved with &lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/pull/3035&gt;#3035&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='13' author='milos-pesic-zattoo' date='2020-10-12T17:50:47Z'>
		I am not sure. The assertion should be fixed, but it is still unclear why MAX_PROTO_INDEX was exceeded. But let's close the issue. If necessary, we can reopen it.
		</comment>
	</comments>
</bug>