<bug id='1234' author='jsreid13' open_date='2017-12-12T23:02:14Z' closed_time='2017-12-14T10:37:52Z'>
	<summary>Providing a number greater than 13 for --psm option causes it to run in psm mode 8</summary>
	<description>
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;


Tesseract Version: 4.0
Commit Number: Built from source as of commit eba0ae3
Platform: Ubuntu 16.04, 64-Bit

&lt;denchmark-h:h3&gt;Current Behavior:&lt;/denchmark-h&gt;

Running tesseract from command line with option --psm 100  (or any number greater than 13) causes tesseract to run in PSM 8 (PSM_SINGLE_LINE).
After digging through how Tesseract handles PSM values it seems that if the value entered is greater than 13 then it behaves similarly to PSM 8 based on the PSM functions in publictypes.h, there's only a difference if LSTMRecognizeWord is ran. This is nonintuitive behaviour and should throw an error to the user to warn them to use a valid PSM.
&lt;denchmark-h:h3&gt;Expected Behavior:&lt;/denchmark-h&gt;

Entering a number outside of 0-13 for PSM should throw an error to the user.
&lt;denchmark-h:h3&gt;Suggested Fix:&lt;/denchmark-h&gt;

Include a function to check that that value entered in the command line for PSM is between 0 and 13 in the ParseArgs function in tesseractmain.cpp, if not print a message to the user and exit. I made this function flexible enough to work with the OEM value too because this also doesn't throw an error currently when a value is entered outside of 0-3(or 5? there's two new modes CUBE_ONLY and CUBE_COMBINED not sure if they're still in development but they will be counted by this function).
void checkArgValues (int arg, const char* mode, int count) {
  if (arg &gt;= count || arg &lt; 0) {
    printf("Invalid %s value, please enter a number between 0-%d", mode, count - 1);
    exit(0); 
  }
}

and this will be used in the following way:
      else if (strcmp(argv[i], "-psm") == 0 &amp;&amp; i + 1 &lt; argc) {
      // The parameter -psm is deprecated and was replaced by --psm.
      // It is still supported for compatibility reasons.
      checkArgValues(atoi(argv[i+1]), "PSM", tesseract::PSM_COUNT);
      *pagesegmode = static_cast(atoi(argv[i + 1]));
      ++i;
    } else if (strcmp(argv[i], "--psm") == 0 &amp;&amp; i + 1 &lt; argc) {
      checkArgValues(atoi(argv[i+1]), "PSM", tesseract::PSM_COUNT);
      *pagesegmode = static_cast(atoi(argv[i + 1]));
      ++i;
    } else if (strcmp(argv[i], "--oem") == 0 &amp;&amp; i + 1 &lt; argc) {
      checkArgValues(atoi(argv[i+1]), "OEM", tesseract::OEM_COUNT);
      *enginemode = static_cast(atoi(argv[i + 1]));
      ++i;
    }

and requires the following addition to OcrEngineMode in publictypes.h, similar to what is currently in PageSegMode:
enum OcrEngineMode {
  OEM_TESSERACT_ONLY,           // Run Tesseract only - fastest
  OEM_LSTM_ONLY,                // Run just the LSTM line recognizer.
  OEM_TESSERACT_LSTM_COMBINED,  // Run the LSTM recognizer, but allow fallback
                                // to Tesseract when things get difficult.
  OEM_DEFAULT,                  // Specify this mode when calling init_*(),
                                // to indicate that any of the above modes
                                // should be automatically inferred from the
                                // variables in the language-specific config,
                                // command-line configs, or if not specified
                                // in any of the above should be set to the
                                // default OEM_TESSERACT_ONLY.
  OEM_CUBE_ONLY,                // Run Cube only - better accuracy, but slower
  OEM_TESSERACT_CUBE_COMBINED,  // Run both and combine results - best accuracy
  OEM_COUNT			// Number of OEMs
};

Created pull request &lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/pull/1236&gt;#1236&lt;/denchmark-link&gt;
 to merge this change
	</description>
	<comments>
		<comment id='1' author='jsreid13' date='2017-12-14T10:38:03Z'>
		thanks
		</comment>
	</comments>
</bug>