<bug id='2312' author='Sauraus' open_date='2019-03-12T00:08:31Z' closed_time='2019-06-05T15:22:29Z'>
	<summary>App with more 2 or more threads with Tesseract will deadlock on Linux (but not on OSX).</summary>
	<description>
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;


Tesseract Version: 4.0.0 (built from source)
Commit Number: GitHub tag 4.0.0
Platform: Ubuntu 18.04, AWS EC2 c5.xlarge / c5.2xlarge / c5.4xlarge

&lt;denchmark-h:h3&gt;Current Behavior:&lt;/denchmark-h&gt;

We have a  app that runs multiple threads to analyze video frames and as part of that we do some OCR using &lt;denchmark-link:https://github.com/otiai10/gosseract&gt;https://github.com/otiai10/gosseract&lt;/denchmark-link&gt;
.
If we run this code in a Docker container locally on a MacBook Pro or ECS or a VM in EC2 with 16 cores the application will deadlock with the tesseract code enabled.
NOTE: What is interesting is that running the same code straight up on a MacBook Pro does not deadlock the code.
&lt;denchmark-h:h3&gt;Expected Behavior:&lt;/denchmark-h&gt;

Multi-threaded application can work.
&lt;denchmark-h:h3&gt;Suggested Fix:&lt;/denchmark-h&gt;

I built tesseract with ./configure --disable-openmp but I am not sure if that actually affects the way the libraries are built or just the stand alone app and also tried the OMP_THREAD_LIMIT=1 env variable neither option seems to do much good.
	</description>
	<comments>
		<comment id='1' author='Sauraus' date='2019-03-12T16:26:17Z'>
		
https://github.com/tesseract-ocr/tesseract/wiki/FAQ#can-i-increase-speed-of-ocr

Thanks for the RTFM answer, very helpful.
In this case it's not about increasing the speed of OCR as such, I've got way more going on when I am analyzing the video frame and I was hoping I could have each frame analyzed in its own thread such that the process would be self contained and I could scale this up if I need to analyze more frames per second.
Furthermore allowing Tesseract to run in each thread would also prevent me from having to build a solution that will consolidate the data for each frame from multiple sources.
		</comment>
		<comment id='2' author='Sauraus' date='2019-06-05T14:28:01Z'>
		same for me using libtesseract from pyocr. Any solution?
		</comment>
		<comment id='3' author='Sauraus' date='2019-06-05T15:13:52Z'>
		solution is to turn off openmp support, that is causing this.
		</comment>
		<comment id='4' author='Sauraus' date='2019-06-05T15:18:36Z'>
		thanks,  OMP_THREAD_LIMIT=1 works for me.
		</comment>
		<comment id='5' author='Sauraus' date='2019-06-05T19:40:14Z'>
		I am afraid that there is a potential misunderstanding.
The tesseract executable can use multithreading to speed up the OCR processing of a single page. The gain is not really large, it costs excessive CPU overhead, and so the suggested solution is to disable that, either at compile time (--disable-openmp) or at run time (OMP_THREAD_LIMIT=1).
Applications which use the Tesseract library can do the same, but in addition they can use more than one thread to process several pages in parallel. &lt;denchmark-link:https://github.com/Sauraus&gt;@Sauraus&lt;/denchmark-link&gt;
, I have understood that you tried to do this and got a deadlock. Am I right? Then this is a bug which should be fixed. It would help to use a Tesseract library with debug information, attach a debugger to the locked process and get stack traces for all threads to see where they are hanging.
		</comment>
		<comment id='6' author='Sauraus' date='2019-06-05T20:06:00Z'>
		&lt;denchmark-link:https://github.com/stweil&gt;@stweil&lt;/denchmark-link&gt;
 you are correct in your description of the behaviour observed when using Tesseract as a lib.
However the problem also appears to have resolved itself as we are no longer seeing deadlocks, however I cannot say with certainty what go dependency did the trick.
		</comment>
	</comments>
</bug>