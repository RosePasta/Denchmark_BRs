<bug id='99' author='elfring' open_date='2015-09-16T16:07:08Z' closed_time='2019-10-15T06:04:17Z'>
	<summary>Completion of error handling</summary>
	<description>
Would you like to add more error handling for return values from functions like the following?

fseek ‚áí InputBuffer constructor
malloc ‚áí SquishedDawg::build_node_map
pthread_mutex_init ‚áí CCUtilMutex constructor

	</description>
	<comments>
		<comment id='1' author='elfring' date='2018-10-13T19:23:23Z'>
		Feel free to send PR...
		</comment>
		<comment id='2' author='elfring' date='2018-10-13T19:26:04Z'>
		How do you think about to improve &lt;denchmark-link:https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis#C.2C_C.2B.2B&gt;static source code analysis&lt;/denchmark-link&gt;
 also for this software?
		</comment>
		<comment id='3' author='elfring' date='2018-10-13T19:34:30Z'>
		As you can see on &lt;denchmark-link:https://github.com/tesseract-ocr/tesseract&gt;README&lt;/denchmark-link&gt;
 we use &lt;denchmark-link:https://lgtm.com&gt;https://lgtm.com&lt;/denchmark-link&gt;
 and coverity.com for code analysis.
		</comment>
		<comment id='4' author='elfring' date='2018-10-13T19:37:47Z'>
		Do these analysis tools point also the open issues out which I reported?
		</comment>
		<comment id='5' author='elfring' date='2018-10-13T20:12:15Z'>
		Coverity Scan reports some of those errors ‚Äì unless they are already fixed. :-)
LGTM does not report the mentioned errors.

fseek ‚áí InputBuffer constructor, still buggy, not reported
malloc ‚áí SquishedDawg::build_node_map, was fixed some time ago
pthread_mutex_init ‚áí CCUtilMutex constructor, still buggy, not reported

Which static code analyser would you suggest to detect such errors?
		</comment>
		<comment id='6' author='elfring' date='2018-10-13T20:15:08Z'>
		I suggest to avoid &lt;denchmark-link:https://cwe.mitre.org/data/definitions/252.html&gt;ignorance of return values&lt;/denchmark-link&gt;
 a bit more.
Would you like to detect every error situation as early as possible?
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;


Are you interested to apply aspect-oriented software development?
Would you like to encapsulate error detection and corresponding exception handling as a reusable aspect in this software?

		</comment>
		<comment id='7' author='elfring' date='2018-10-13T20:19:23Z'>
		Sure, but my question was more specific. There is currently a lot of code which does not follow those principles, and more such code could get merged. Without a lot of man power, it is impossible to detect all missing checks of return values. So it is important to have tools which report violations. Do you know such tools?
		</comment>
		<comment id='8' author='elfring' date='2018-10-13T20:19:38Z'>
		As there are still some of the mentioned errors not fixed, I reopen this issue.
		</comment>
		<comment id='9' author='elfring' date='2018-10-13T20:23:29Z'>
		I know a few higher level development tools which can help here.
Which ones would you dare to integrate into the software build process?
		</comment>
		<comment id='10' author='elfring' date='2018-10-13T20:34:54Z'>
		Just tell us the names of those tools, then we can decide.
		</comment>
		<comment id='11' author='elfring' date='2018-10-13T20:45:09Z'>
		Examples:

AspectC++
Coccinelle
Cppcheck

		</comment>
		<comment id='12' author='elfring' date='2018-10-13T20:53:27Z'>
		Thank you. I know and used the last two. Coccinelle itself does not find problems ‚Äì it needs scripts written to do this. Cppcheck did not report missing handling of return values last time when I used it (well, that was some years ago).
		</comment>
		<comment id='13' author='elfring' date='2018-10-13T21:03:02Z'>
		
Coccinelle itself does not find problems

This software tool can also find and adjust various questionable source code. It supports the C programming language better than C++ so far.

(well, that was some years ago)

I suggest to try Cppcheck out again to see if this analysis tool was improved in desired ways in the meantime.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Would you like to get help from any additional development tools?
		</comment>
		<comment id='14' author='elfring' date='2018-10-24T08:11:09Z'>
		&lt;denchmark-link:https://github.com/elfring&gt;@elfring&lt;/denchmark-link&gt;
 : Will you provide output of your code analyze?
Maybe as new issue (grouped by type) so we can close it with commit? Patches are welcomed too ;-)
		</comment>
		<comment id='15' author='elfring' date='2018-10-24T18:30:03Z'>
		Will the mentioned tools become relevant for &lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/blob/126ca8050c178769dc9149b8bab357ab6e3fc871/CMakeLists.txt#L7&gt;your software development process&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='16' author='elfring' date='2018-10-25T17:11:23Z'>
		&lt;denchmark-link:https://github.com/elfring&gt;@elfring&lt;/denchmark-link&gt;
 : I am sorry, but I did not get point of your question. Primary build system are autotools. Of course I am interested also in support cmake ...
		</comment>
		<comment id='17' author='elfring' date='2018-10-25T18:10:11Z'>
		Did your interest increase for the application of the tool ‚Äú&lt;denchmark-link:https://aspectc.org/&gt;AspectC++&lt;/denchmark-link&gt;
‚Äù (together with related information sources for example)?
		</comment>
		<comment id='18' author='elfring' date='2018-10-26T12:16:22Z'>
		What does it mean practically?
There is basically not intention to extend dependency to another libraries.
Also the main development is done in google, so unless the some approaches are accepted by Ray, it does not make sense to implement it by community...
		</comment>
		<comment id='19' author='elfring' date='2018-10-26T12:35:08Z'>
		&lt;denchmark-link:https://github.com/elfring&gt;@elfring&lt;/denchmark-link&gt;
, I don't think that Tesseract will switch from C++ to Aspect C++ as that is currently not a common standard. As far as I could see Aspect C++ cannot be used to check the existing code. Nor can Coccinelle because it only supports C but not C++. So only cppcheck remains which can be used in addition to Coverity Scan and LGTM.
The problems with  will be addressed by replacing that code with modern C++ data types. See also the &lt;denchmark-link:https://github.com/tesseract-ocr/tesseract/wiki/Planning#future-releases&gt;planning page&lt;/denchmark-link&gt;
 in the wiki.
If you have fixes for ignored return values, they are welcome.
		</comment>
		<comment id='20' author='elfring' date='2018-10-26T13:02:12Z'>
		
As far as I could see Aspect C++ cannot be used to check the existing code.

I suggest to take another look at the provided technology.
Which systematic development methods do you know for &lt;denchmark-link:https://en.wikipedia.org/wiki/Cross-cutting_concern&gt;the handling of cross-cutting concerns&lt;/denchmark-link&gt;
?

Nor can Coccinelle because it only supports C but not C++.

This tool can be useful for limited source code analysis and corresponding transformations.
Would you like to help in any ways to improve the support for the C++ programming language here?

If you have fixes for ignored return values, ‚Ä¶

I would prefer the application of available known methodologies.
		</comment>
		<comment id='21' author='elfring' date='2019-10-15T06:04:13Z'>
		&lt;denchmark-link:https://github.com/elfring&gt;@elfring&lt;/denchmark-link&gt;
: any help with improving code is welcomed. Pointing to new tools/methodology is interesting but... we have limited sources and most of active contributors will probably still continue to use what they are familiar.
So if there is problem with code, you can fix, please create new issue/send PR.
		</comment>
		<comment id='22' author='elfring' date='2019-10-15T06:15:49Z'>
		It is probably obvious that I am trying for a while to get more software developers familiar also with other helpful methodologies.
üîÆ I am curious if their popularity will grow.
		</comment>
	</comments>
</bug>