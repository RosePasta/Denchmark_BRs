<bug id='5055' author='NumesSanguis' open_date='2020-12-10T09:24:03Z' closed_time='2021-01-07T16:21:02Z'>
	<summary>Exceptions in a Transform are silently ignored during training; fails next epoch with no error msg</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

An Exception, such as StopIteration, is silently ignored by the Trainer and the error message is not printed out. Also, training continues, even when data points are missing.
&lt;denchmark-h:h2&gt;Please reproduce using the BoringModel and post here&lt;/denchmark-h&gt;

&lt;denchmark-link:https://colab.research.google.com/drive/1gAssRJ4fIC0SObNBoS1IzGFN545TVQ9x?usp=sharing&gt;https://colab.research.google.com/drive/1gAssRJ4fIC0SObNBoS1IzGFN545TVQ9x?usp=sharing&lt;/denchmark-link&gt;

&lt;denchmark-h:h3&gt;To Reproduce&lt;/denchmark-h&gt;

A Transform that throws a StopIteration exception somewhere during training:
&lt;denchmark-code&gt;class SimulateTransformError(object):
    def __init__(self, generator_len):
        self.generator = self.num_gen(generator_len)

    def num_gen(self, generator_len):
        for i in range(generator_len):
            yield i

    def __call__(self, sample):
        try:
            # does nothing except exhausting the generator
            next(self.generator)
            return sample
        except StopIteration as e:
            raise StopIteration(f"Generator ran out of samples:\n{e}")
&lt;/denchmark-code&gt;

Apply transform while retrieving an item:
&lt;denchmark-code&gt;def __getitem__(self, index):
    return self.transform(self.data[index])
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

Show the error message: f"Generator ran out of samples:\n{e}"
&lt;denchmark-h:h3&gt;Actual behavior&lt;/denchmark-h&gt;


If you run 1 epoch, you notice that epoch 0 stops at 48%, but no error
If you run 2+ epochs, training continues after epoch 0, and throws an error during epoch 1: RuntimeError: stack expects a non-empty TensorList
The real error is never shown

&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;

Colab:
&lt;denchmark-code&gt;* CUDA:
	- GPU:
		- Tesla P100-PCIE-16GB
	- available:         True
	- version:           10.1
* Packages:
	- numpy:             1.18.5
	- pyTorch_debug:     True
	- pyTorch_version:   1.7.0+cu101
	- pytorch-lightning: 1.1.0
	- tqdm:              4.41.1
* System:
	- OS:                Linux
	- architecture:
		- 64bit
		- 
	- processor:         x86_64
	- python:            3.6.9
	- version:           #1 SMP Thu Jul 23 08:00:38 PDT 2020
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Additional context&lt;/denchmark-h&gt;

If you wrap the transform in a try statement, an error message is printed, but the actual error message e is empty:
&lt;denchmark-code&gt;try:
    data = self.transform(data)
except Exception as e:
    print(f"Data transform failed with error:\n{e}")
# empty e
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='NumesSanguis' date='2020-12-21T16:52:04Z'>
		Hey &lt;denchmark-link:https://github.com/NumesSanguis&gt;@NumesSanguis&lt;/denchmark-link&gt;
,
I seems StopIteration is quietly skipped by Dataloarder, not Pytorch Lightning.
Works fine with other exceptions. &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/pull/5222/files&gt;https://github.com/PyTorchLightning/pytorch-lightning/pull/5222/files&lt;/denchmark-link&gt;

Best regards,
T.C
		</comment>
		<comment id='2' author='NumesSanguis' date='2020-12-23T12:39:07Z'>
		Hey &lt;denchmark-link:https://github.com/NumesSanguis&gt;@NumesSanguis&lt;/denchmark-link&gt;
 !
If I understand correctly, you would like to show the error message "Generator ran out of samples", correct?
For this please use a different event, for example
raise RuntimeError("Generator ran out of samples")
StopIteration is meant for iterators and it is normal that it is "silent" because it is meant to stop an iteration.
Hope this helps.
		</comment>
	</comments>
</bug>