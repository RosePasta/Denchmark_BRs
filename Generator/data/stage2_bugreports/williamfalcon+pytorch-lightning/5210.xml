<bug id='5210' author='dhkim0225' open_date='2020-12-21T04:04:56Z' closed_time='2021-01-06T15:02:14Z'>
	<summary>Cannot use SyncBN with sharded DDP.</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;To Reproduce&lt;/denchmark-h&gt;

Using SyncBN with sharded DDP plugin makes this error message.
&lt;denchmark-code&gt;AttributeError: SyncBatchNorm is only supported within torch.nn.parallel.DistributedDataParallel
&lt;/denchmark-code&gt;

I think this is not a PL bug but a bug of PyTorch and fair-scale.
Nevertheless, I think there is a way to support this combination in PL (like overriding SyncBN).
Do you have any update plans?
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;

&lt;denchmark-code&gt; - PyTorch Version (e.g., 1.0): 1.7.1
 - OS (e.g., Linux): Ubuntu 20.04
 - How you installed PyTorch (`conda`, `pip`, source): pip
 - Python version: 3.8
 - CUDA/cuDNN version: 10.1
 - GPU models and configuration: V100 / driver == 418.39
 - Any other relevant information: PL 1.1.0
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='dhkim0225' date='2020-12-21T04:05:38Z'>
		Hi! thanks for your contribution!, great first issue!
		</comment>
		<comment id='2' author='dhkim0225' date='2020-12-21T08:35:50Z'>
		Cc &lt;denchmark-link:https://github.com/SeanNaren&gt;@SeanNaren&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/ananyahjha93&gt;@ananyahjha93&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='dhkim0225' date='2020-12-21T16:12:52Z'>
		Thanks! I'll need to integrate this into the FairScale Sharded DDP wrapper as a handle needs to be updated within custom DDP wrappers.
		</comment>
		<comment id='4' author='dhkim0225' date='2020-12-21T16:48:33Z'>
		I have a PR to fix this here: &lt;denchmark-link:https://github.com/facebookresearch/fairscale/pull/265&gt;facebookresearch/fairscale#265&lt;/denchmark-link&gt;

Could you verify if this branch fixes your issue &lt;denchmark-link:https://github.com/dhkim0225&gt;@dhkim0225&lt;/denchmark-link&gt;
? You should be able to do:
&lt;denchmark-code&gt;pip install git+https://github.com/SeanNaren/fairscale.git@feature/sync_bn
&lt;/denchmark-code&gt;

I used the below test:
import os
import torch
from torch.utils.data import Dataset

from pl_examples import cli_lightning_logo
from pytorch_lightning import Trainer, LightningModule


class RandomDataset(Dataset):
    """
    &gt;&gt;&gt; RandomDataset(size=10, length=20)  # doctest: +ELLIPSIS
    &lt;...bug_report_model.RandomDataset object at ...&gt;
    """

    def __init__(self, size, length):
        self.len = length
        self.data = torch.randn(length, size)

    def __getitem__(self, index):
        return self.data[index]

    def __len__(self):
        return self.len


class BoringModel(LightningModule):
    """
    &gt;&gt;&gt; BoringModel()  # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE
    BoringModel(
      (layer): Linear(...)
    )
    """

    def __init__(self):
        """
        Testing PL Module

        Use as follows:
        - subclass
        - modify the behavior for what you want

        class TestModel(BaseTestModel):
            def training_step(...):
                # do your own thing

        or:

        model = BaseTestModel()
        model.training_epoch_end = None

        """
        super().__init__()
        self.layer = torch.nn.Linear(32, 2)

    def forward(self, x):
        return self.layer(x)

    def loss(self, batch, prediction):
        # An arbitrary loss to have a loss that updates the model weights during `Trainer.fit` calls
        return torch.nn.functional.mse_loss(prediction, torch.ones_like(prediction))

    def step(self, x):
        x = self.layer(x)
        out = torch.nn.functional.mse_loss(x, torch.ones_like(x))
        return out

    def training_step(self, batch, batch_idx):
        output = self.layer(batch)
        loss = self.loss(batch, output)
        return {"loss": loss}

    def training_step_end(self, training_step_outputs):
        return training_step_outputs

    def training_epoch_end(self, outputs) -&gt; None:
        torch.stack([x["loss"] for x in outputs]).mean()

    def validation_step(self, batch, batch_idx):
        output = self.layer(batch)
        loss = self.loss(batch, output)
        return {"x": loss}

    def validation_epoch_end(self, outputs) -&gt; None:
        torch.stack([x['x'] for x in outputs]).mean()

    def test_step(self, batch, batch_idx):
        output = self.layer(batch)
        loss = self.loss(batch, output)
        return {"y": loss}

    def test_epoch_end(self, outputs) -&gt; None:
        torch.stack([x["y"] for x in outputs]).mean()

    def configure_optimizers(self):
        optimizer = torch.optim.SGD(self.layer.parameters(), lr=0.1)
        lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=1)
        return [optimizer], [lr_scheduler]


#  NOTE: If you are using a cmd line to run your script,
#  provide the cmd line as below.
#  opt = "--max_epochs 1 --limit_train_batches 1".split(" ")
#  parser = ArgumentParser()
#  args = parser.parse_args(opt)

def test_run():
    class TestModel(BoringModel):
        def __init__(self):
            super().__init__()
            self.layer = torch.nn.Linear(32, 2)
            self.bn = torch.nn.BatchNorm1d(2)

        def forward(self, x):
            x = self.layer(x)
            x = self.bn(x)
            return x

        def training_step(self, batch, batch_idx):
            output = self(batch)
            loss = self.loss(batch, output)
            return {"loss": loss}

    # fake data
    train_data = torch.utils.data.DataLoader(RandomDataset(32, 64))
    val_data = torch.utils.data.DataLoader(RandomDataset(32, 64))
    test_data = torch.utils.data.DataLoader(RandomDataset(32, 64))

    # model
    model = TestModel()
    trainer = Trainer(
        default_root_dir=os.getcwd(),
        max_epochs=1,
        accelerator='ddp',
        gpus=2,
        plugins='ddp_sharded',
        sync_batchnorm=True,
        weights_summary=None,
    )
    trainer.fit(model, train_data, val_data)
    trainer.test(test_dataloaders=test_data)


if __name__ == '__main__':
    test_run()
		</comment>
		<comment id='5' author='dhkim0225' date='2020-12-22T02:11:08Z'>
		&lt;denchmark-link:https://github.com/SeanNaren&gt;@SeanNaren&lt;/denchmark-link&gt;
 Thank you for your great PR to fairscale! Everything works fine with your code.
		</comment>
	</comments>
</bug>