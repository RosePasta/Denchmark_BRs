<bug id='5405' author='Tomiinek' open_date='2021-01-07T14:39:23Z' closed_time='2021-01-09T00:35:49Z'>
	<summary>W&amp;B logger not working as expected with accumulate_grad_batches&amp;gt;1</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

When logging inside training step to  logger and using  the behavior is not as expected. Similar issue as in &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/issues/4304&gt;#4304&lt;/denchmark-link&gt;
 for Tensorboard (which was closed and the fix was merged in &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/pull/4738&gt;#4738&lt;/denchmark-link&gt;
).
First half with accumulate_grad_batches == 1, second with accumulate_grad_batches == 8:
&lt;denchmark-link:https://user-images.githubusercontent.com/13215584/103904387-80a24c00-50fd-11eb-9205-c37f94c32116.png&gt;&lt;/denchmark-link&gt;

Moreover, the logging steps are  and so when using , the logger refuses to log anything (similar to &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/issues/4811&gt;#4811&lt;/denchmark-link&gt;
) saying:
&lt;denchmark-code&gt;wandb: WARNING Step must only increase in log calls.  Step 499 &lt; 2497; dropping {'lr-AdamW': 4.9900000000000005e-06}.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;To Reproduce&lt;/denchmark-h&gt;

Sorry for not using the BoringModel, updated the example from &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/issues/4304&gt;#4304&lt;/denchmark-link&gt;
:
import os

import torch
from torch.nn import functional as F
from torch.utils.data import DataLoader, random_split

import pytorch_lightning as pl
from pytorch_lightning.loggers import WandbLogger
from torchvision.datasets.mnist import MNIST
from torchvision import transforms

class LitClassifier(pl.LightningModule):
    def __init__(self, hidden_dim=128, learning_rate=1e-3):
        super().__init__()
        self.save_hyperparameters()

        self.l1 = torch.nn.Linear(28 * 28, self.hparams.hidden_dim)
        self.l2 = torch.nn.Linear(self.hparams.hidden_dim, 10)

    def forward(self, x):
        x = x.view(x.size(0), -1)
        x = torch.relu(self.l1(x))
        x = torch.relu(self.l2(x))
        return x

    def training_step(self, batch, batch_idx):
        x, y = batch
        y_hat = self(x)
        loss = F.cross_entropy(y_hat, y)
        self.log("train_loss",loss)
        return loss

    def validation_step(self, batch, batch_idx):
        x, y = batch
        y_hat = self(x)
        loss = F.cross_entropy(y_hat, y)

    def configure_optimizers(self):
        return torch.optim.Adam(self.parameters(), lr=self.hparams.learning_rate)

def run_test(accumulate_grad_batches, batch_size, num_workers=4):
    dataset = MNIST('', train=True, download=True, transform=transforms.ToTensor())
    mnist_train, mnist_val = random_split(dataset, [55000, 5000])
    train_loader = DataLoader(mnist_train,batch_size)
    val_loader = DataLoader(mnist_val,batch_size)

    model = LitClassifier()

    trainer = pl.Trainer(
        logger=WandbLogger(name="bug", project='.....', save_dir=".", log_model=False),
        accumulate_grad_batches=accumulate_grad_batches,
        max_epochs=2
        )
    trainer.fit(model, train_loader, val_loader)

run_test(1,32)
run_test(8,32)
&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

Take a mean (or whatever) of the values logged at the same step and not at every forward pass.
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;


pytorch-lightning: 1.1.2
PyTorch: 1.7.1
OS: Linux
How you installed PyTorch: pip
Python version: 3.7.0
wandb: 0.10.12

	</description>
	<comments>
		<comment id='1' author='Tomiinek' date='2021-01-08T11:56:34Z'>
		Hey &lt;denchmark-link:https://github.com/Tomiinek&gt;@Tomiinek&lt;/denchmark-link&gt;
,
Using your example, which option would be better ? Personally, I think 1.
Option 1: X-axis being optimization step
&lt;denchmark-link:https://user-images.githubusercontent.com/12861981/104012872-ddab0a00-51b0-11eb-9e3a-b1872b590710.png&gt;&lt;/denchmark-link&gt;

Option 2: X-axis being total_batch_idx.
&lt;denchmark-link:https://user-images.githubusercontent.com/12861981/104013094-472b1880-51b1-11eb-8cc9-1f902aaf47fa.png&gt;&lt;/denchmark-link&gt;

Best,
T.C
		</comment>
		<comment id='2' author='Tomiinek' date='2021-01-08T12:20:20Z'>
		Hi &lt;denchmark-link:https://github.com/tchaton&gt;@tchaton&lt;/denchmark-link&gt;
 , thank you. I would also prefer the first option. Btw, would the second option work together together with the  with frequency set to ?
		</comment>
		<comment id='3' author='Tomiinek' date='2021-01-08T15:52:48Z'>
		Thanks for this discussion! Would it be possible to have a flag to choose between either option? This is useful when inspecting curves to look for optimal gradient accumulation steps.
I believe the trainer.global_step corresponds to the optimization step. Is there a trainer attribute that tracks the running total_batch_idx?
		</comment>
	</comments>
</bug>