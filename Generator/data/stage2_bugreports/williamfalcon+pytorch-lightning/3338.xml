<bug id='3338' author='undertherain' open_date='2020-09-03T10:33:27Z' closed_time='2020-09-04T04:05:26Z'>
	<summary>EarlyStopping not working / wrong keys in log</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

I‚Äôm trying to implement EarlyStopping when validation loss stops decreasing. I add callback as follows:
&lt;denchmark-code&gt;def validation_step(self, batch, batch_idx):
    x, y = batch
    y_hat = self(x)
    loss = F.l1_loss(y_hat, y)
    result = pl.EvalResult(checkpoint_on=loss)
    result.log("val_loss", loss, sync_dist=True)
    return result

early_stop_callback = EarlyStopping(
    monitor="val_loss",
    min_delta=0.1,
    patience=1,
    verbose=True,
    mode="min")

trainer = pl.Trainer(
    gpus=-1,
    max_epochs=50,
    distributed_backend="ddp",
    early_stop_callback=early_stop_callback,
    logger=wandb_logger)
&lt;/denchmark-code&gt;

This does not work - it is returning False at from the _validate_condition_metric function
When I checked what‚Äôs in the log dictionary, the values looked like
{'val_early_stop_on': None, 'val_checkpoint_on': tensor(0.5601, device='cuda:0')}  -  which is slightly confusing. Where does ‚Äúval_checkpoint_on‚Äù come from and why it is not called ‚Äúval_loss‚Äù?
It feels like it might be slightly connected to the result = pl.EvalResult(checkpoint_on=loss) line.
I was reading documentation, but frankly speaking I found
checkpoint_on (Union[Tensor, bool, None]) ‚Äì Metric to checkpoint on. to be slightly not intuitive. What does it mean for the metric to be checkpoints on? And does it really connect to keys in log being renamed in a strange way?
&lt;denchmark-h:h4&gt;Code sample&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/matsuokalab/cosmoflow/blob/ac75fe317f8daf3444c96b837bb109064aa81dab/main.py&gt;https://github.com/matsuokalab/cosmoflow/blob/ac75fe317f8daf3444c96b837bb109064aa81dab/main.py&lt;/denchmark-link&gt;

&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

Expecting EarlyStopping to work, log to have val_loss key
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;* CUDA:
	- GPU:
		- Tesla V100-SXM2-16GB
		- Tesla V100-SXM2-16GB
		- Tesla V100-SXM2-16GB
		- Tesla V100-SXM2-16GB
	- available:         True
	- version:           10.2
* Packages:
	- numpy:             1.19.1
	- pyTorch_debug:     False
	- pyTorch_version:   1.6.0
	- pytorch-lightning: 0.9.0
	- tensorboard:       2.2.0
	- tqdm:              4.46.1
* System:
	- OS:                Linux
	- architecture:
		- 64bit
		- ELF
	- processor:         x86_64
	- python:            3.8.2
	- version:           #1 SMP Fri Apr 20 16:44:24 UTC 2018
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='undertherain' date='2020-09-03T10:34:07Z'>
		Hi! thanks for your contribution!, great first issue!
		</comment>
		<comment id='2' author='undertherain' date='2020-09-03T10:59:14Z'>
		Hi &lt;denchmark-link:https://github.com/undertherain&gt;@undertherain&lt;/denchmark-link&gt;
, currently the  key of EarlyStopping will have no effect when you use along with  or .
So, you need to provide  with the loss (metric) in  if using with 
def validation_step(self, batch, batch_idx):
    x, y = batch
    y_hat = self(x)
    loss = F.l1_loss(y_hat, y)
    result = pl.EvalResult(checkpoint_on=loss, early_stop_on=loss)  # changes here
    result.log("val_loss", loss, sync_dist=True)
    return result
Yes, val_early_stop_on and val_checkpoint_on are from EvalResult.



pytorch-lightning/pytorch_lightning/core/step_result.py


         Line 786
      in
      3910ad0






 result = {'val_early_stop_on': self.early_stop_on, 'val_checkpoint_on': self.checkpoint_on} 





While using with Result object, the val_loss you logged will be only for logging to the logger, I guess.
API docs: &lt;denchmark-link:https://pytorch-lightning.readthedocs.io/en/latest/results.html#evalresult-api&gt;https://pytorch-lightning.readthedocs.io/en/latest/results.html#evalresult-api&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='undertherain' date='2020-09-03T11:59:14Z'>
		Aha, I saw early_stop_on=loss, but thought it's some sort of automated way without callback. It is a bit counter-intuitive still that monitor is not working, but at least the stopping works now, thanks!
		</comment>
		<comment id='4' author='undertherain' date='2020-09-03T12:08:46Z'>
		I guess can close this, if it is considered "not  a bug, but a feature" :)
		</comment>
		<comment id='5' author='undertherain' date='2020-09-03T12:12:24Z'>
		
Aha, I saw early_stop_on=loss, but thought it's some sort of automated way without callback. It is a bit counter-intuitive still that monitor is not working, but at least the stopping works now, thanks!

Glad to hear that
we also have some discussions going on &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/issues/3286&gt;#3286&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='undertherain' date='2020-09-04T04:05:26Z'>
		closing it ok? since you found a workaround and ignored monitor is a known issue and discussion happens in other issue as pointed out by &lt;denchmark-link:https://github.com/ydcjeff&gt;@ydcjeff&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>