<bug id='5437' author='feiwofeifeixiaowo' open_date='2021-01-09T09:03:54Z' closed_time='2021-01-09T16:07:27Z'>
	<summary>Input tensor is not an XLA tensor  while using TPU</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

hey there, pytorch-lightning is a very useful library, saving time and effort.
i meet some problems when using tpu accelerator.
using embedding layer with new tensor from  torch.range function, got Input tensor is not an XLA tensor.
how can i set tensor to tpu device manual?
class MNISTModel(pl.LightningModule):

    def __init__(self):
        super(MNISTModel, self).__init__()
        # not the best model...
        self.l1 = torch.nn.Linear(28 * 28, 10)
        self.pos_embedding = nn.Embedding(100, 64)  # positional embeddings

    def forward(self, x):
        # called with self(x)
        self.pos_embedding(torch.arange(0, 100).unsqueeze(0))  # this line
        # do something with pos_embedding
        return torch.relu(self.l1(x.view(x.size(0), -1)))
&lt;denchmark-h:h3&gt;To Reproduce&lt;/denchmark-h&gt;

please see reproduce &lt;denchmark-link:https://www.kaggle.com/feiwofeifeixiaowo/pytorch-on-tpu-with-pytorch-lightning&gt;notebook&lt;/denchmark-link&gt;
.
	</description>
	<comments>
		<comment id='1' author='feiwofeifeixiaowo' date='2021-01-09T14:21:57Z'>
		you can acces it using self.device.
Try:
self.pos_embedding(torch.arange(0, 100, device=self.device).unsqueeze(0))
		</comment>
		<comment id='2' author='feiwofeifeixiaowo' date='2021-01-09T14:32:12Z'>
		
you can acces it using self.device.
Try:
self.pos_embedding(torch.arange(0, 100, device=self.device).unsqueeze(0))

&lt;denchmark-link:https://github.com/rohitgr7&gt;@rohitgr7&lt;/denchmark-link&gt;
  thanks , this works.
		</comment>
		<comment id='3' author='feiwofeifeixiaowo' date='2021-01-09T15:48:54Z'>
		Hi &lt;denchmark-link:https://github.com/rohitgr7&gt;@rohitgr7&lt;/denchmark-link&gt;
 ,  i separate the model definition from Pytorch Lightning Module, this error still exists.
reproduce &lt;denchmark-link:https://www.kaggle.com/feiwofeifeixiaowo/pytorch-on-tpu-with-pytorch-lightning&gt;notebook&lt;/denchmark-link&gt;
.
class Net(nn.Module):
    def __init__(self,device=None):
        self.device = device
        super(Net, self).__init__()
        self.l1 = torch.nn.Linear(28 * 28, 10)
        self.pos_embedding = nn.Embedding(100, 64)  # positional embeddings
    def forward(self, x):
        # do something with pos_embedding
        self.pos_embedding(torch.arange(0, 100, device=self.device).unsqueeze(0))
        return torch.relu(self.l1(x.view(x.size(0), -1)))
        

class MNISTModel(pl.LightningModule):

    def __init__(self):
        super(MNISTModel, self).__init__()
        self.model = Net(device=self.device)

    def forward(self, x):
        return self.model(x)

    def training_step(self, batch, batch_nb):
        # REQUIRED
        x, y = batch
        y_hat = self(x)
        loss = F.cross_entropy(y_hat, y)
        tensorboard_logs = {'train_loss': loss}
        return {'loss': loss, 'log': tensorboard_logs}

    def validation_step(self, batch, batch_nb):
        # OPTIONAL
        x, y = batch
        y_hat = self(x)
        return {'val_loss': F.cross_entropy(y_hat, y)}

    def validation_epoch_end(self, outputs):
        # OPTIONAL
        avg_loss = torch.stack([x['val_loss'] for x in outputs]).mean()
        tensorboard_logs = {'val_loss': avg_loss}
        return {'avg_val_loss': avg_loss, 'log': tensorboard_logs}

    def test_step(self, batch, batch_nb):
        # OPTIONAL
        x, y = batch
        y_hat = self(x)
        return {'test_loss': F.cross_entropy(y_hat, y)}

    def test_epoch_end(self, outputs):
        # OPTIONAL
        avg_loss = torch.stack([x['test_loss'] for x in outputs]).mean()
        logs = {'test_loss': avg_loss}
        return {'avg_test_loss': avg_loss, 'log': logs, 'progress_bar': logs}

    def configure_optimizers(self):
        # REQUIRED
        # can return multiple optimizers and learning_rate schedulers
        # (LBFGS it is automatically supported, no need for closure function)
        return torch.optim.Adam(self.parameters(), lr=0.001)
    
    def prepare_data(self):
        self.mnist_train = MNIST(os.getcwd(), train=True, download=True, transform=transforms.ToTensor())
        self.mnist_test = MNIST(os.getcwd(), train=False, download=True, transform=transforms.ToTensor())

    def train_dataloader(self):
        loader = DataLoader(self.mnist_train, batch_size=64, num_workers=4)
        return loader

    def val_dataloader(self):
        loader = DataLoader(self.mnist_test, batch_size=64, num_workers=4)
        return loader

    def test_dataloader(self):
        loader = DataLoader(self.mnist_test, batch_size=64, num_workers=4)
        return loader
		</comment>
		<comment id='4' author='feiwofeifeixiaowo' date='2021-01-09T15:54:36Z'>
		self.model = Net(device=self.device)
here self.device won't be available during init. You can remove this, and can still access it in the forward.
		</comment>
		<comment id='5' author='feiwofeifeixiaowo' date='2021-01-09T16:07:06Z'>
		
self.model = Net(device=self.device)
here self.device won't be available during init. You can remove this, and can still access it in the forward.

This works, thanks~
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.l1 = torch.nn.Linear(28 * 28, 10)
        self.pos_embedding = nn.Embedding(100, 64)  # positional embeddings
    def forward(self, x, device=None):
        # do something with pos_embedding
        self.pos_embedding(torch.arange(0, 100, device=device).unsqueeze(0))
        att_mask = torch.triu(torch.ones(100,100, device=device),diagonal=1).to(dtype=torch.bool)
        return torch.relu(self.l1(x.view(x.size(0), -1)))
		</comment>
	</comments>
</bug>