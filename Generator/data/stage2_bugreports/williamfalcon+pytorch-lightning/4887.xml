<bug id='4887' author='ZhuBaohe' open_date='2020-11-28T13:52:03Z' closed_time='2020-11-29T01:21:52Z'>
	<summary>[Doc] Callback example raising an exception</summary>
	<description>
By pytorch-lightning 1.0.7, I follow &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/blob/f63fec9323c319720d78b452e9fe84b97ce7644e/docs/source/new-project.rst#L588&gt;Doc example&lt;/denchmark-link&gt;
 as follow :
import os
import torch
from torch import nn
import torch.nn.functional as F
from torchvision.datasets import MNIST
from torchvision import transforms

from torch.utils.data import DataLoader
import pytorch_lightning as pl
from torch.utils.data import random_split

class LitAutoEncoder(pl.LightningModule):
    def __init__(self):
        super().__init__()
        self.encoder = nn.Sequential(
            nn.Linear(28*28, 64),
            nn.ReLU(),
            nn.Linear(64, 3)
            )
        self.decoder = nn.Sequential(
            nn.Linear(3, 64),
            nn.ReLU(),
            nn.Linear(64, 28*28)
            )

    def forward(self, x):
        # in lightning, forward defines the prediction/inference actions
        embedding = self.encoder(x)
        return embedding

    def training_step(self, batch, batch_idx):
        # training_step defined the train loop.
        # It is independent of forward
        x, y = batch
        x = x.view(x.size(0), -1)
        z = self.encoder(x)
        x_hat = self.decoder(z)
        loss = F.mse_loss(x_hat, x)
        # Logging to TensorBoard by default
        self.log('train_loss', loss)
        return loss

    def configure_optimizers(self):
        optimizer = torch.optim.Adam(self.parameters(), lr=1e-3)
        return optimizer

    def on_train_start(self, trainer, pl_module):
        # track the initial learning rates
        for opt_idx, optimizer in enumerate(trainer.optimizers):
            group = []
            for param_group in optimizer.param_groups:
                group.append(param_group['lr'])
                self.old_lrs.append(group)

class DecayLearningRate(pl.Callback):
    def __init__(self):
        self.old_lrs = []

    def on_train_start(self, trainer, pl_module):
        # track the initial learning rates
        for opt_idx, optimizer in enumerate(trainer.optimizers):
            group = []
            for param_group in optimizer.param_groups:
                group.append(param_group['lr'])
            self.old_lrs.append(group)

    def on_train_epoch_end(self, trainer, pl_module, outputs):
        for  opt_idx, optimizer in enumerate(trainer.optimizers):
            old_lr_group = self.old_lrs[opt_idx]
            new_lr_group = []
            for p_idx, param_group in enumerate(optimizer.param_groups):
                old_lr = old_lr_group[p_idx]
                new_lr = old_lr * 0.98
                new_lr_group.append(new_lr)
                param_group['lr'] = new_lr
            self.old_lrs[opt_idx] = new_lr_group

dataset = MNIST(os.getcwd(), download=True, transform=transforms.ToTensor())
train_loader = DataLoader(dataset)

# init model
autoencoder = LitAutoEncoder()
# most basic trainer, uses good defaults (auto-tensorboard, checkpoints, logs, and more)
# trainer = pl.Trainer(gpus=8) (if you have GPUs)
decay_callback = DecayLearningRate()
trainer = pl.Trainer(callbacks=[decay_callback])
trainer.fit(autoencoder, train_loader)
The codes raising an exception
TypeError: on_train_start() missing 2 required positional arguments: 'trainer' and 'pl_module'
	</description>
	<comments>
		<comment id='1' author='ZhuBaohe' date='2020-11-28T13:52:42Z'>
		Hi! thanks for your contribution!, great first issue!
		</comment>
		<comment id='2' author='ZhuBaohe' date='2020-11-28T14:03:36Z'>
		 in  doesn't &lt;denchmark-link:https://pytorch-lightning.readthedocs.io/en/latest/api/pytorch_lightning.core.hooks.html#pytorch_lightning.core.hooks.ModelHooks.on_train_start&gt;require any arguments&lt;/denchmark-link&gt;
 but in callback it does.
Also, I believe you don't need this method in LitAutoEncoder since it's already doing what it requires to do in the callback.
		</comment>
	</comments>
</bug>