<bug id='142' author='sebftw' open_date='2019-08-18T23:07:54Z' closed_time='2019-08-23T12:22:12Z'>
	<summary>AttributeError: 'xxx' object has no attribute 'tng_dataloader' continued...</summary>
	<description>
This is the same issue as mentioned in &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/issues/125&gt;#125&lt;/denchmark-link&gt;
.
Describe the bug
Whenever a @property raises an AttributeError, it will be looked up in __getattr__ (if defined), and then the original error message is lost. And LightingModule inherits __getattr__ from torch.nn.Module.
This makes debugging difficult as you lose line number and you get an error message that is misleading - the attribute exists! Look at the minimal example in the next section to see what I mean.
To Reproduce
&lt;denchmark-code&gt;import torch

class Foo(torch.nn.Module):
    @property
    def bar(self):
        return torch.does_not_exist  # Raises an AttributeError.

Foo().bar
&lt;/denchmark-code&gt;

The output produced:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "C:/minimal.py", line 8, in &lt;module&gt;
    Foo().bar
  File "C:\Program Files\Python37\lib\site-packages\torch\nn\modules\module.py", line 591, in __getattr__
    type(self).__name__, name))
AttributeError: 'Foo' object has no attribute 'bar'
&lt;/denchmark-code&gt;

The trace says the  attribute does not exist, but it does. It is the  attribute that is nonexistent. Now if you look in the stack trace in &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/issues/125&gt;#125&lt;/denchmark-link&gt;
 it is even worse.
Expected behavior
One would expect the stack trace to be
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "C:/minimal.py", line 7, in bar
    return torch.does_not_exist  # Raises an AttributeError.
AttributeError: module 'torch' has no attribute 'does_not_exist'
&lt;/denchmark-code&gt;

I think it could be very useful to add try...catch to the pl.data_loader.
One could also make a pl.attribute decorator that users (and pl.data_loader) can use, and document its use case in the docs. It should simply extend the usual @attribute with a try...catch.
An example of a more desirable stack trace
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "C:/minimal.py", line 7, in bar
    return torch.does_not_exist  # Raises an AttributeError.
AttributeError: module 'torch' has no attribute 'does_not_exist'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:/minimal.py", line 11, in &lt;module&gt;
    Foo().bar
  File "C:/minimal.py", line 9, in bar
    raise RuntimeError('An AttributeError was encountered in Foo.bar.') from e
RuntimeError: An AttributeError was encountered in Foo.bar.
&lt;/denchmark-code&gt;

In this case the error is correctly shown to be at line 7.
This stack trace is achieved by replacing line 7 with:
&lt;denchmark-code&gt;try:
    return torch.does_not_exist  # Raises an AttributeError.
except AttributeError as e:
    raise RuntimeError('An AttributeError was encountered in Foo.bar.') from e
&lt;/denchmark-code&gt;


See also the discussion in &lt;denchmark-link:https://github.com/pytorch/pytorch/issues/13981&gt;pytorch/pytorch#13981&lt;/denchmark-link&gt;
 of the problem. It seems to be a &lt;denchmark-link:https://bugs.python.org/issue24983&gt;troublesome&lt;/denchmark-link&gt;
 design decision of the language that will be hard to get around.
Do you think @pl.attribute is a good idea?
There seem to be no other way around the issue if we must use nn.Module and @attribute.
	</description>
	<comments>
		<comment id='1' author='sebftw' date='2019-08-18T23:10:59Z'>
		&lt;denchmark-link:https://github.com/sebftw&gt;@sebftw&lt;/denchmark-link&gt;
 read my mind haha. was about to add this bug! want to give it a shot?
		</comment>
		<comment id='2' author='sebftw' date='2019-08-18T23:12:15Z'>
		&lt;denchmark-link:https://github.com/sebftw&gt;@sebftw&lt;/denchmark-link&gt;
 it probably has to catch all exceptions though. the attribute doesn't exist is hiding whatever issue the dataloader code has (ie: user error), so we want to forward that to the user via 
		</comment>
		<comment id='3' author='sebftw' date='2019-08-18T23:13:58Z'>
		&lt;denchmark-link:https://github.com/williamFalcon&gt;@williamFalcon&lt;/denchmark-link&gt;
 Yeah. I can try and look into it tomorrow. I think we only have to catch AttributeError as other exceptions will produce a normal stack trace.
		</comment>
		<comment id='4' author='sebftw' date='2019-08-19T15:20:51Z'>
		I have made a sketch of the implementation and how to test it.
&lt;denchmark-code&gt;import torch.nn as nn
import pytest

# ------------------------------------------------------------------------
# IMPLEMENTATION
# ------------------------------------------------------------------------

errormessage = 'An AttributeError was encountered: '
def safe_property(fn):
    @property
    def wrapper(*args, **kwargs):
        try:
            return fn(*args, **kwargs)
        except AttributeError as e:
            raise RuntimeError(errormessage + str(e)) from e
    return wrapper


# ------------------------------------------------------------------------
# TESTS
# ------------------------------------------------------------------------

returnexample = 1
exceptionexample = ZeroDivisionError
informative_error_message = "module 'torch.nn' has no attribute 'does_not_exist'"

class PropertyTest(nn.Module): # Note it is an nn.Module.
    @property
    def test_property(self):
        return returnexample

    @safe_property
    def test_safe_property(self):
        return returnexample

    @property
    def test_property_attributeerror(self):
        raise AttributeError(informative_error_message)
        # ^ Equivalent to: return nn.does_not_exist, which will also raise AttributeError.

    @safe_property
    def test_safe_property_attributeerror(self):
        raise AttributeError(informative_error_message)

    @property
    def test_property_error(self):
        raise exceptionexample(informative_error_message)

    @safe_property
    def test_safe_property_error(self):
        raise exceptionexample(informative_error_message)


def test_same_return():
    testobj = PropertyTest()
    # Test that they both return the same.
    assert testobj.test_property == testobj.test_safe_property

def test_same_interface():
    # This is a design decision we haven't discussed.
    # Only include if we find it important that the safe property doesn't do anything more
    #  than a normal property, i.e. has the same interface and all.
    assert dir(PropertyTest.test_property) == dir(PropertyTest.test_property)
    assert isinstance(PropertyTest.test_safe_property, type(PropertyTest.test_property))  # &lt;class 'property'&gt;

def test_error():
    # In this we test that normal exceptions are raised normally.
    testobj = PropertyTest()
    # We expect an exception to be raised and propagated if it is of any type other than AttributeError.
    with pytest.raises(exceptionexample) as exc_info:
        testobj.test_property_error

    # This checks that in this case the exception and message matches that of a normal property.
    with pytest.raises(exc_info.type, match=exc_info.value.args[0]):
        testobj.test_safe_property_error

def test_attributeerror():
    # In this we test that AttributeErrors are better handled by the safe_property.
    testobj = PropertyTest()
    # In the case of an AttributeError, we expect an uninformative error message from nn.Module.
    with pytest.raises(AttributeError) as exc_info:
        testobj.test_property_attributeerror

    # Check that PyTorch has indeed removed the informative message completely.
    # This is the reason we are making a safe_property, so if this test fails we may not even
    #  need the decorator we are testing here.
    assert informative_error_message not in exc_info.value.args[0]

    # This tests that safe_attribute raises an exception still containing the
    #  informative error message.
    with pytest.raises(BaseException, match=informative_error_message):
        testobj.test_safe_property_attributeerror

if __name__ == '__main__':
    pytest.main([__file__])
&lt;/denchmark-code&gt;

With this code, accessing test_safe_property_attributeerror will raise a RuntimeError with the message An AttributeError was encountered: module 'torch.nn' has no attribute 'does_not_exist'.
I am not sure how the tests are structured - I am new to using pytest - but I'll make a pull request for the safe property now.
		</comment>
		<comment id='5' author='sebftw' date='2019-08-19T19:05:38Z'>
		&lt;denchmark-link:https://github.com/sebftw&gt;@sebftw&lt;/denchmark-link&gt;
 let's do this as a simple try catch in the dataloader decorator. A principle of lightning is to give users less to remember.
		</comment>
		<comment id='6' author='sebftw' date='2019-08-19T22:12:36Z'>
		Good idea
		</comment>
		<comment id='7' author='sebftw' date='2019-08-21T14:37:20Z'>
		&lt;denchmark-link:https://github.com/sebftw&gt;@sebftw&lt;/denchmark-link&gt;
 any updates on this?
		</comment>
		<comment id='8' author='sebftw' date='2019-08-22T12:53:19Z'>
		&lt;denchmark-link:https://github.com/williamFalcon&gt;@williamFalcon&lt;/denchmark-link&gt;
 I made a PR. &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/pull/161&gt;#161&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='sebftw' date='2019-08-23T12:22:12Z'>
		&lt;denchmark-link:https://github.com/sebftw&gt;@sebftw&lt;/denchmark-link&gt;
 thanks for the PR! merged
		</comment>
		<comment id='10' author='sebftw' date='2019-08-30T09:06:28Z'>
		&lt;denchmark-link:https://github.com/williamFalcon&gt;@williamFalcon&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/sebftw&gt;@sebftw&lt;/denchmark-link&gt;
 Does it only fix the suppresion of  inside the dataloader and not the other user errors?
		</comment>
		<comment id='11' author='sebftw' date='2019-08-30T09:44:01Z'>
		&lt;denchmark-link:https://github.com/metrofun&gt;@metrofun&lt;/denchmark-link&gt;
 Yes
		</comment>
		<comment id='12' author='sebftw' date='2019-08-30T10:12:58Z'>
		Unless I misunderstood the context, wouldn't it be more reasonable to surface any kind of errors from the user defined code, not just the AttributeError?
		</comment>
		<comment id='13' author='sebftw' date='2019-08-31T12:51:23Z'>
		&lt;denchmark-link:https://github.com/metrofun&gt;@metrofun&lt;/denchmark-link&gt;
 Other exceptions are not supressed, so they will surface as normal. It is just  which is an odd case, so we catch it and re-raise it as a  as our fix.
		</comment>
		<comment id='14' author='sebftw' date='2019-08-31T14:32:55Z'>
		@sebtfw Oh, I see, thanks for the explanation
		</comment>
	</comments>
</bug>