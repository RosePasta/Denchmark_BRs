<bug id='3936' author='thepowerfuldeez' open_date='2020-10-07T13:02:13Z' closed_time='2020-10-07T17:17:28Z'>
	<summary>Deepcopy fails on self.callback_metrics</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

I have target in output dict from validation_step (I write output from my model to postprocess and aggregate later in validation_epoch_end)
Cannot copy callback metrics (which are outputs from train/val step function)
Error is caused by 529 line at pytorch_lightning/trainer/training_loop.py:
monitor_metrics = deepcopy(self.callback_metrics)
I tried to change this line to monitor_metrics = self.callback_metrics but training hangs
RuntimeError: Only Tensors created explicitly by the user (graph leaves) support the deepcopy protocol at the moment
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "train.py", line 71, in &lt;module&gt;
    main()
  File "train.py", line 60, in main
    trainer.fit(model)
  File "/home/george/miniconda3/envs/docr/lib/python3.8/site-packages/pytorch_lightning/trainer/states.py", line 48, in wrapped_fn
    result = fn(self, *args, **kwargs)
  File "/home/george/miniconda3/envs/docr/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py", line 1058, in fit
    results = self.accelerator_backend.spawn_ddp_children(model)
  File "/home/george/miniconda3/envs/docr/lib/python3.8/site-packages/pytorch_lightning/accelerators/ddp_backend.py", line 123, in spawn_ddp_children
    results = self.ddp_train(local_rank, mp_queue=None, model=model, is_master=True)
  File "/home/george/miniconda3/envs/docr/lib/python3.8/site-packages/pytorch_lightning/accelerators/ddp_backend.py", line 224, in ddp_train
    results = self.trainer.run_pretrain_routine(model)
  File "/home/george/miniconda3/envs/docr/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py", line 1239, in run_pretrain_routine
    self.train()
  File "/home/george/miniconda3/envs/docr/lib/python3.8/site-packages/pytorch_lightning/trainer/training_loop.py", line 394, in train
    self.run_training_epoch()
  File "/home/george/miniconda3/envs/docr/lib/python3.8/site-packages/pytorch_lightning/trainer/training_loop.py", line 529, in run_training_epoch
    monitor_metrics = deepcopy(self.callback_metrics)
  File "/home/george/miniconda3/envs/docr/lib/python3.8/copy.py", line 146, in deepcopy
    y = copier(x, memo)
  File "/home/george/miniconda3/envs/docr/lib/python3.8/copy.py", line 230, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/home/george/miniconda3/envs/docr/lib/python3.8/copy.py", line 146, in deepcopy
    y = copier(x, memo)
  File "/home/george/miniconda3/envs/docr/lib/python3.8/copy.py", line 210, in _deepcopy_tuple
    y = [deepcopy(a, memo) for a in x]
  File "/home/george/miniconda3/envs/docr/lib/python3.8/copy.py", line 210, in &lt;listcomp&gt;
    y = [deepcopy(a, memo) for a in x]
  File "/home/george/miniconda3/envs/docr/lib/python3.8/copy.py", line 153, in deepcopy
    y = copier(memo)
  File "/home/george/miniconda3/envs/docr/lib/python3.8/site-packages/torch/tensor.py", line 38, in __deepcopy__
    raise RuntimeError("Only Tensors created explicitly by the user "
RuntimeError: Only Tensors created explicitly by the user (graph leaves) support the deepcopy protocol at the moment
&lt;/denchmark-code&gt;

The problem caused because my model output is not returning leaf tensors and deepcopy cannot copy that.
&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

Training is not crashing
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;


CUDA:
- GPU:
- GeForce RTX 2080 Ti
- GeForce RTX 2080 Ti
- GeForce RTX 2080 Ti
- GeForce RTX 2080 Ti
- available:         True
- version:           10.2
Packages:
- numpy:             1.19.1
- pyTorch_debug:     False
- pyTorch_version:   1.6.0
- pytorch-lightning: 0.10.0rc1
- tqdm:              4.48.2
System:
- OS:                Linux
- architecture:
- 64bit
- ELF
- processor:         x86_64
- python:            3.8.5
- version:           #52-Ubuntu SMP Thu Sep 10 10:58:49 UTC 2020

	</description>
	<comments>
		<comment id='1' author='thepowerfuldeez' date='2020-10-07T16:01:28Z'>
		&lt;denchmark-link:https://github.com/thepowerfuldeez&gt;@thepowerfuldeez&lt;/denchmark-link&gt;
  can you add a way to reproduce this using BoringModel? Thanks!
		</comment>
		<comment id='2' author='thepowerfuldeez' date='2020-10-07T17:17:28Z'>
		sounds like you have to call .detach() on what you are passing in to the dict. If you submit a PR with the failing test using BoringModel we can add support for automatically doing this!
		</comment>
	</comments>
</bug>