<bug id='524' author='colllin' open_date='2019-11-18T21:17:18Z' closed_time='2020-01-24T23:18:51Z'>
	<summary>default EarlyStopping callback should not fail on missing val_loss data</summary>
	<description>
Describe the bug
My training script failed overnight â€” this is the last thing I see in the logs before the instance shut down:
&lt;denchmark-code&gt;python3.7/site-packages/pytorch_lightning/callbacks/pt_callbacks.py:128: RuntimeWarning: Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: avg_val_loss_total,avg_val_jacc10,avg_val_ce
  RuntimeWarning)
&lt;/denchmark-code&gt;

It seems like we intended this to be a "warning" but it appears that it interrupted my training script.  Do you think that's possible, or could it be something else?  I had 2 training scripts running on 2 different instances last night and both shut down in this way, with this RuntimeWarning as the last line in the logs.  Is it possible that the default EarlyStopping callback killed my script because I didn't log a val_loss tensor somewhere it could find it?  To be clear, it is not my intention to use EarlyStopping at all, so I was quite surprised to wake up today and find my instance shut down and training interrupted, and no clear sign of a bug on my end.  Did you intend this to interrupt the trainer?  If so, how do we feel about changing that plan so that the default EarlyStopping callback has no effect when it can't find a val_loss metric?
	</description>
	<comments>
		<comment id='1' author='colllin' date='2019-11-19T14:06:45Z'>
		I agree that it is quite unpleasant when the default early stopping callback unexpectedly stops the training because it can't find val_loss. And it is also unpleasant that you will find out the absence of the required metric only at the end of the full first training epoch (and moreover the training will stop). So I would separate this into two different problems:

Default early stopping should not stop the training. We should either disable it if no val_loss was found or even just disable it at all by default.
We should somehow check in the very beginning of the training that the metric required by the early stopping is available after the validation loop. Now it is checked only at the end of the first training epoch and if it is not present the training stops.

		</comment>
		<comment id='2' author='colllin' date='2019-11-20T16:28:49Z'>
		I'm guessing you were doing check_val_every_n_epoch&gt;1.
This error is because callback_metrics is what is used for early stopping. This is cleared and re-filled at every training step logging. A hacky solution I have found is to save the last val_loss as a model attribute self.val_loss, and return at every training step
Ex.
output {
'loss': loss,
'log': log_dict,
'progress_bar': prog_dict,
'val_loss': self.val_loss
}
		</comment>
		<comment id='3' author='colllin' date='2019-11-20T18:57:08Z'>
		Wow, indeed, there is a third problem:
3) It is not clear how early stopping should work when check_val_every_n_epoch &gt; 1.
However, please note, that now callbacks metrics are not longer replaced by new ones but updated. It was fixed in &lt;denchmark-link:https://github.com/PyTorchLightning/pytorch-lightning/pull/492&gt;#492&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='4' author='colllin' date='2019-11-20T19:41:25Z'>
		So I would suggest the following:

By default early stop callback is turned on but if there is no val_loss then we just warn the user that early stop callback will not work, and training will proceed as though there is no early stop callback.
If early stop callback is explicitly specified by the user then we will force validation sanity check and will examine the metrics obtained from it. If the metric required by the early stop callback is not present then we will raise an error.

&lt;denchmark-link:https://github.com/williamFalcon&gt;@williamFalcon&lt;/denchmark-link&gt;
, what do you think?
		</comment>
		<comment id='5' author='colllin' date='2019-11-25T09:45:38Z'>
		Isn't it possible that the user returns val_loss only in some epochs, e.g., only every other epoch (intentionally or not)?
		</comment>
		<comment id='6' author='colllin' date='2019-11-25T09:58:05Z'>
		Yeah, it is the problem if no val_loss is returned in some epochs. In that case early stopping will work quite strange. It happens, for example, if check_val_every_n_epoch &gt; 1.
		</comment>
		<comment id='7' author='colllin' date='2019-11-25T11:37:38Z'>
		&lt;denchmark-link:https://github.com/awaelchli&gt;@awaelchli&lt;/denchmark-link&gt;
 ... maybe modify the early stopping to skip the check when that key is missing?
		</comment>
		<comment id='8' author='colllin' date='2019-11-25T19:02:01Z'>
		very reasonable imo. &lt;denchmark-link:https://github.com/kuynzereb&gt;@kuynzereb&lt;/denchmark-link&gt;
 do you see any problem with this?
		</comment>
		<comment id='9' author='colllin' date='2019-11-25T19:54:17Z'>
		Nope, it sound good for me too. But we will need to explicitly remove this key from callback metrics in the start of each epoch otherwise it will be always available (now it always stores the metric from the last validation loop).
		</comment>
		<comment id='10' author='colllin' date='2019-12-04T12:31:55Z'>
		&lt;denchmark-link:https://github.com/awaelchli&gt;@awaelchli&lt;/denchmark-link&gt;
 or &lt;denchmark-link:https://github.com/kuynzereb&gt;@kuynzereb&lt;/denchmark-link&gt;
 mind submitting a PR?
		</comment>
		<comment id='11' author='colllin' date='2019-12-05T23:01:08Z'>
		I can look into it.
		</comment>
		<comment id='12' author='colllin' date='2020-01-21T13:33:28Z'>
		&lt;denchmark-link:https://github.com/awaelchli&gt;@awaelchli&lt;/denchmark-link&gt;
 any updates?
		</comment>
		<comment id='13' author='colllin' date='2020-01-21T17:00:19Z'>
		lost track of this after I ran into some unexpected behaviors. will try get back to it but it seems &lt;denchmark-link:https://github.com/kuynzereb&gt;@kuynzereb&lt;/denchmark-link&gt;
 has a better overview of early stopping than me.
		</comment>
		<comment id='14' author='colllin' date='2020-01-24T08:58:44Z'>
		It seems that we can just add a condition that early_stop_callback.on_epoch_end() should be called only if current_epoch % check_val_every_n_epoch == 0
		</comment>
	</comments>
</bug>