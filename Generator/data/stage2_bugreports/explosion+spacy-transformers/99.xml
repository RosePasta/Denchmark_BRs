<bug id='99' author='kyoungrok0517' open_date='2019-11-05T15:09:29Z' closed_time='2020-03-20T10:06:13Z'>
	<summary>TypeError: can not serialize 'cupy.core.core.ndarray' object when trying to save `Doc` as bytes.</summary>
	<description>
Hi, I'm trying to serialize Doc() object with model en_trf_bertbaseuncased_lg but sees the following error. Should I do something before doing serialization?
&lt;denchmark-h:h2&gt;Code (critical parts only)&lt;/denchmark-h&gt;

is_using_gpu = spacy.require_gpu()
if is_using_gpu
    torch.set_default_tensor_type("torch.cuda.FloatTensor")

...

doc_bin = DocBin(attrs=None, store_user_data=True)
for i, row in df.iterrows():
    doc = nlp(row["sentence"])
    doc_bin.add(doc)
bytes_data = doc_bin.to_bytes()
&lt;denchmark-h:h2&gt;Error&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;raceback (most recent call last):
  File "src/lm.py", line 49, in &lt;module&gt;
    d.groupby("file").apply(process, out_dir, meta=(None, bool)).compute()
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/dask/base.py", line 165, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/dask/base.py", line 436, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/dask/threaded.py", line 80, in get
    **kwargs
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/dask/local.py", line 486, in get_async
    raise_exception(exc, tb)
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/dask/local.py", line 316, in reraise
    raise exc
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/dask/local.py", line 222, in execute_task
    result = _execute_task(task, data)
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/dask/core.py", line 119, in _execute_task
    return func(*args2)
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/dask/optimization.py", line 976, in __call__
    return core.get(self.dsk, self.outkey, dict(zip(self.inkeys, args)))
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/dask/core.py", line 149, in get
    result = _execute_task(task, cache)
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/dask/core.py", line 119, in _execute_task
    return func(*args2)
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/dask/utils.py", line 29, in apply
    return func(*args, **kwargs)
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/dask/dataframe/core.py", line 4840, in apply_and_enforce
    df = func(*args, **kwargs)
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/dask/dataframe/groupby.py", line 172, in _groupby_slice_apply
    return g.apply(func, *args, **kwargs)
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/pandas/core/groupby/groupby.py", line 737, in apply
    return self._python_apply_general(f)
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/pandas/core/groupby/groupby.py", line 742, in _python_apply_general
    keys, values, mutated = self.grouper.apply(f, self._selected_obj, self.axis)
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/pandas/core/groupby/ops.py", line 237, in apply
    res = f(group)
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/pandas/core/groupby/groupby.py", line 713, in f
    return func(g, *args, **kwargs)
  File "src/lm.py", line 32, in process
    doc_bin.add(doc)
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/spacy/tokens/_serialize.py", line 86, in add
    self.user_data.append(srsly.msgpack_dumps(doc.user_data))
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/srsly/_msgpack_api.py", line 16, in msgpack_dumps
    return msgpack.dumps(data, use_bin_type=True)
  File "/home/kyoungrok/anaconda3/lib/python3.7/site-packages/srsly/msgpack/__init__.py", line 40, in packb
    return Packer(**kwargs).pack(o)
  File "_packer.pyx", line 285, in srsly.msgpack._packer.Packer.pack
  File "_packer.pyx", line 291, in srsly.msgpack._packer.Packer.pack
  File "_packer.pyx", line 288, in srsly.msgpack._packer.Packer.pack
  File "_packer.pyx", line 235, in srsly.msgpack._packer.Packer._pack
  File "_packer.pyx", line 282, in srsly.msgpack._packer.Packer._pack
TypeError: can not serialize 'cupy.core.core.ndarray' object
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='kyoungrok0517' date='2019-12-20T11:13:47Z'>
		I have same issue with spacy[cuda100] when saving model as bytes.
		</comment>
		<comment id='2' author='kyoungrok0517' date='2020-01-28T09:37:31Z'>
		My workaround for this was to move the tensor to main memory into a numpy array:
doc.tensor = cupy.asnumpy(doc.tensor)
doc_bin.add(doc)
and then serialize the tensor separately with np.save, collecting all the tensor blobs and tracking which belongs to which document, as I didn't find a way to make DocBin include the tensor. Then when I deserialize, I stitch them back up and reinstate hooks (hackily copied from spacy-transformers):
        def reinstate_tensor_and_hooks(doc, tensor_bytes):
            tensor = numpy.load(BytesIO(tensor_bytes))
            doc.tensor = tensor
            doc.user_hooks["vector"] = get_doc_vector_via_tensor
            doc.user_span_hooks["vector"] = get_span_vector_via_tensor
            doc.user_token_hooks["vector"] = get_token_vector_via_tensor
            doc.user_hooks["similarity"] = get_similarity_via_tensor
            doc.user_span_hooks["similarity"] = get_similarity_via_tensor
            doc.user_token_hooks["similarity"] = get_similarity_via_tensor
            return doc
In my use case I only needed the tensor, not any of the lower-level user_data, so I have store_user_data=False. If you do need the user data, then probably you'll hit the same problem with some of those attributes, so you probably need to convert those to numpy arrays as well (but presumably don't need to serialize them separately, as DocBin will include them).
		</comment>
		<comment id='3' author='kyoungrok0517' date='2020-03-20T10:06:12Z'>
		I think there are two recent PRs that should be relevant to this: &lt;denchmark-link:https://github.com/explosion/thinc/pull/298&gt;explosion/thinc#298&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/explosion/srsly/pull/21&gt;explosion/srsly#21&lt;/denchmark-link&gt;
. I will tentavely close this, assuming they addressed this issue.
		</comment>
	</comments>
</bug>