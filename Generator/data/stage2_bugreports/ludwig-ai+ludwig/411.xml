<bug id='411' author='TKassis' open_date='2019-07-03T17:36:27Z' closed_time='2019-07-08T04:36:36Z'>
	<summary>Image feature HDF5 file is not normalized and contains negative values</summary>
	<description>
Describe the bug
The hdf5 created using the image input feature seems not to be normalized and has negative values. For my training, I'm using 24-bit RGB .jpg images.
Please provide code, yaml definition file and a sample of data in order to entirely reproduce the issue.
I have attached all the required files.
&lt;denchmark-link:https://github.com/uber/ludwig/files/3356180/experiment_run_1.zip&gt;experiment_run_1.zip&lt;/denchmark-link&gt;

Expected behavior
I've been looking at the hdf5 file created and there are a lot of negative values. Shouldn't these be all normalized positive values between 0.00-1.00?
&lt;denchmark-link:https://user-images.githubusercontent.com/9168908/60612606-015ceb00-9d97-11e9-8fe9-643fb39145e7.png&gt;&lt;/denchmark-link&gt;

Environment (please complete the following information):

OS: Windows 10
Python version 3.6
Ludwig version 0.1.2

Additional context
I'm using ResNet 50 as the encoder.
	</description>
	<comments>
		<comment id='1' author='TKassis' date='2019-07-03T18:11:06Z'>
		&lt;denchmark-link:https://github.com/TKassis&gt;@TKassis&lt;/denchmark-link&gt;
 Could you please paste the model definition here? I couldn't find it in your zip file. Thanks
		</comment>
		<comment id='2' author='TKassis' date='2019-07-03T18:21:50Z'>
		
@TKassis Could you please paste the model definition here? I couldn't find it in your zip file. Thanks

Apologies, I thought I had included it. Here you go:
`input_features:
-
name: image_path
type: image
encoder: resnet
resnet_size: 50
dropout: true
preprocessing:
resize_method: crop_or_pad
height: 224
width: 224
output_features:
-
name: label
type: category
training:
batch_size: 32
learning_rate: 0.0001
optimizer: {type: sgd}
dropout_rate: 0.5
epochs: 100
`
		</comment>
		<comment id='3' author='TKassis' date='2019-07-03T18:54:47Z'>
		&lt;denchmark-link:https://github.com/TKassis&gt;@TKassis&lt;/denchmark-link&gt;
 investigating it, but no, the values in the hdf5 are not supposed to be normalized and positive, we store them as int8, now I believe the problem is the fact that they are saves as int8 rather than uint8, but will figure out and keep you posted.
		</comment>
		<comment id='4' author='TKassis' date='2019-07-08T04:39:22Z'>
		&lt;denchmark-link:https://github.com/TKassis&gt;@TKassis&lt;/denchmark-link&gt;
 I solved the issue with &lt;denchmark-link:https://github.com/uber/ludwig/commit/669d288b678799992d722d45802c58ec1cbf08c4&gt;this commit&lt;/denchmark-link&gt;
, while with this &lt;denchmark-link:https://github.com/uber/ludwig/commit/05e1b62148a2bb8511e28d28828d63cac9f0d517&gt;other commit&lt;/denchmark-link&gt;
 I added two options for pixel normalization and pixel standardization. Now by default pixel normalization (i.e. multiplying by 1/255) is performed.
Let me know if this works for you.
		</comment>
		<comment id='5' author='TKassis' date='2019-07-08T12:52:31Z'>
		
@TKassis I solved the issue with this commit, while with this other commit I added two options for pixel normalization and pixel standardization. Now by default pixel normalization (i.e. multiplying by 1/255) is performed.
Let me know if this works for you.

Thank you, That fixed it. I can confirm it is now working as expected.
		</comment>
	</comments>
</bug>