<bug id='1622' author='erip' open_date='2020-01-15T02:21:39Z' closed_time='2020-01-24T18:30:50Z'>
	<summary>Division by zero in Windows builds</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

With the introduction of the new metrics API, there are issues with division by zero.
&lt;denchmark-h:h3&gt;To Reproduce&lt;/denchmark-h&gt;

To reproduce, run the most minimal  on a Windows machine. The error is also seen in the test failures from &lt;denchmark-link:https://github.com/pytorch/fairseq/pull/1595/checks?check_run_id=390286089&gt;Windows CI&lt;/denchmark-link&gt;

&lt;denchmark-h:h4&gt;Code sample&lt;/denchmark-h&gt;

N/A
&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

There shouldn't be division by zero errors.
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;


fairseq Version (e.g., 1.0 or master): master
PyTorch Version (e.g., 1.0) 1.3.1
OS (e.g., Linux): Windows
How you installed fairseq (pip, source): source
Build command you used (if compiling from source): See the build script.
Python version: 3.6.7
CUDA/cuDNN version: N/A
GPU models and configuration: N/A
Any other relevant information: N/A

&lt;denchmark-h:h3&gt;Additional context&lt;/denchmark-h&gt;

Strangely, this doesn't seem to happen in Unix builds...
	</description>
	<comments>
		<comment id='1' author='erip' date='2020-01-18T13:38:52Z'>
		I suspect this has something to do with the way TimeMeter.reset is defined -- it's got a different signature than the other Meter subclass's reset. I don't know why it would be platform dependent, but maybe it's an initialization issue, too.
		</comment>
		<comment id='2' author='erip' date='2020-01-20T15:23:27Z'>
		I found the immediate issue: Windows uses a 16ms precision clock, but this in not the case in unix. This can be observed by using this in both windows and unix: python -c "import time; start=time.time(); print(time.time() - start)"
On Windows, this yields 0.0 consistently; on unix, it yields some tiny delta. An alternative would be to use time.perf_counter. I think there are some slightly nuanced (but likely negligible) differences in semantics -- I'll submit a PR for this and let someone smarter than me review it. üòÑ
		</comment>
	</comments>
</bug>