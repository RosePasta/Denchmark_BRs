<bug id='486' author='sshibs' open_date='2019-07-18T19:46:13Z' closed_time='2019-12-28T19:57:59Z'>
	<summary>Memory Leak in Mat.Size()</summary>
	<description>
I am using gocv to process a large number of images and I noticed I had a bit of a memory leak. I narrowed it down to the Mat.Size() call. It could be you already know about this, and I don't know what the solution would be, but I thought I would post it just incase.
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

Looking at the C++ code for Mat_Size it looks like the issue is because "new" is called to make the ids array, but it is never deleted because ids is returned to the go code.
&lt;denchmark-code&gt;void Mat_Size(Mat m, IntVector* res) {
    cv::MatSize ms(m-&gt;size);
    int* ids = new int[ms.dims()];

    for (size_t i = 0; i &lt; ms.dims(); ++i) {
        ids[i] = ms[i];
    }

    res-&gt;length = ms.dims();
    res-&gt;val = ids;
    return;
}
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Steps to Reproduce&lt;/denchmark-h&gt;

Here is a simple program to reproduce the issue:
&lt;denchmark-code&gt;import (
	"gocv.io/x/gocv"
)

func main() {
	img := gocv.NewMatWithSizeFromScalar(gocv.Scalar{0, 0, 0, 0}, 500, 500, gocv.MatTypeCV8UC3)
	defer img.Close()
	for i := 0; i &lt; 100000000; i++ {
		img.Size()
	}
}
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Your Environment&lt;/denchmark-h&gt;


Operating System and version: Ubuntu 18.04
OpenCV version used: 4.1
How did you install OpenCV? installation guide
GoCV version used: 0.20.0
Go version: 1.12.1
Did you run the env.sh or env.cmd script before trying to go run or go build? No

	</description>
	<comments>
		<comment id='1' author='sshibs' date='2019-12-28T19:57:59Z'>
		This issue was corrected by &lt;denchmark-link:https://github.com/hybridgroup/gocv/pull/580&gt;#580&lt;/denchmark-link&gt;
 so now closing. Thank you!
		</comment>
	</comments>
</bug>