<bug id='205' author='Lezh1k' open_date='2018-05-24T12:43:52Z' closed_time='2018-07-05T11:58:38Z'>
	<summary>Memory leak in SIFT?</summary>
	<description>
Hello there.
I have one really strange problem with SIFT detector. I use it in our service and seems like there is memory leak.
I use method DetectAndCompute. When I looked at code I found that defer KeyPoints_Close is commented. I was able to make new test binding KeyPoints_Close2 and free memory, but it didn't solve my problem.
I have no clue how to reproduce it without using service. I mean simple application doesn't cause such big memory consumption.
For example here is some code:
&lt;denchmark-code&gt;func TestSift(t *testing.T) {
	gray := gocv.IMRead("path_to_image", gocv.IMReadGrayScale)

	sift := contrib.NewSIFT()
	defer sift.Close()

	res := make([]point, 0) //this is used as result in service's code.
	for iter := 0; iter &lt; 50; iter++ {
		mask := gocv.NewMat()
		defer mask.Close()
		k, d := sift.DetectAndCompute(gray, mask)
		defer d.Close()

		for i, v := range k {
			var tmp []float64
			for j := 0; j &lt; d.Cols(); j++ {
				tmp = append(tmp, float64(d.GetFloatAt(i, j)))
			}
			res = append(res, point{keypoint: v, descriptor: tmp})
		}
	}
	utils.ShowImage(gray) //This function just shows image in new window. 
}
&lt;/denchmark-code&gt;

Similar code is used in my service and I have crashes (because of memory problem).
Interesting thing - using BRISK (for example) fixes this problem, but using SURF - not.
I wasn't able to find significant difference between BRISK and SIFT bindings, so maybe there is another problem. I have C++ application and it hasn't such problem, so maybe there is some golang specific things.
I tried to use pprof, but without any luck (But maybe I didn't use it in right way). Valgrind also shows that there is no memory issues.
I just have no clue what's happening there. Top shows, that memory usage increases by ~300Mb after each call.  Does anybody face this problem?
	</description>
	<comments>
		<comment id='1' author='Lezh1k' date='2018-05-24T13:39:52Z'>
		It may be useful to have steps to reproduce:


go run main.go:
https://gist.github.com/tzununbekov/8c9573f75ea5a35d0c3c15b192adbc7e


curl -i -X POST -H "Content-Type: multipart/form-data" -F "img=@&lt;image&gt;" http://localhost:8080/upload


After a couple curl requests top (or any other analog) will show over 600Mb of resident memory allocated to this process while heap memory profile (inuse_space, alloc_space) usually shows not more than 50Mb


		</comment>
		<comment id='2' author='Lezh1k' date='2018-05-24T13:41:28Z'>
		Hello, &lt;denchmark-link:https://github.com/Lezh1k&gt;@Lezh1k&lt;/denchmark-link&gt;
 I think that  is not doing what you think it is when used in the  loop. It does not go out of scope inside the loop.
A better implementation would probably be:
func TestSift(t *testing.T) {
	gray := gocv.IMRead("path_to_image", gocv.IMReadGrayScale)

	sift := contrib.NewSIFT()
	defer sift.Close()

	res := make([]point, 0) //this is used as result in service's code.
	for iter := 0; iter &lt; 50; iter++ {
		mask := gocv.NewMat()
		k, d := sift.DetectAndCompute(gray, mask)

		for i, v := range k {
			var tmp []float64
			for j := 0; j &lt; d.Cols(); j++ {
				tmp = append(tmp, float64(d.GetFloatAt(i, j)))
			}
			res = append(res, point{keypoint: v, descriptor: tmp})
		}
                mask.Close()
                d.Close()
	}
	utils.ShowImage(gray) //This function just shows image in new window. 
}
		</comment>
		<comment id='3' author='Lezh1k' date='2018-05-24T17:10:58Z'>
		Yes, it will be better, but won't solve that problem :( I have already tried :)
I was talking about this :
&lt;denchmark-code&gt;// Detect keypoints in an image using SIFT.
//
// For further details, please see:
// https://docs.opencv.org/master/d0/d13/classcv_1_1Feature2D.html#aa4e9a7082ec61ebc108806704fbd7887
//
func (d *SIFT) Detect(src gocv.Mat) []gocv.KeyPoint {
	ret := C.SIFT_Detect((C.SIFT)(d.p), C.Mat(src.Ptr()))
	//defer C.KeyPoints_Close(ret)

	return getKeyPoints(ret)
}
&lt;/denchmark-code&gt;

This commented defer looks like mistake, but fix doesn't help here.
		</comment>
		<comment id='4' author='Lezh1k' date='2018-05-24T17:30:57Z'>
		Hmm, interesting. I have not tried instantiating multiple SIFT at the same time. Do you have a C++ example that does this?
		</comment>
		<comment id='5' author='Lezh1k' date='2018-05-24T17:37:27Z'>
		Not now, sorry. :( Will be available in 12 hours
		</comment>
		<comment id='6' author='Lezh1k' date='2018-05-25T07:04:40Z'>
		&lt;denchmark-link:https://github.com/tzununbekov&gt;@tzununbekov&lt;/denchmark-link&gt;
  provided some go code that causes this memory leak. thank you  ))
		</comment>
		<comment id='7' author='Lezh1k' date='2018-05-25T07:06:41Z'>
		&lt;denchmark-code&gt;
using namespace cv::xfeatures2d;
int main(int argc, char **argv) {
  (void)argc;
  (void)argv;

  typedef cv::Ptr&lt;cv::xfeatures2d::SIFT&gt;* MSIFT;

  MSIFT features = new Ptr&lt;SIFT&gt;(SIFT::create());
  MSIFT extractor = new Ptr&lt;SIFT&gt;(SIFT::create());
  MSIFT computer = new Ptr&lt;SIFT&gt;(SIFT::create());

  // Turn the image into a Mat
  cv::Mat img = cv::imread("/home/lezh1k/test_data/idmatch_data/kg_id_new/hq_newid_pattern.jpg", IMREAD_COLOR);

  for (int i = 0; i &lt; 100; ++i) {
    cv::Mat descriptors;
    std::vector&lt;cv::KeyPoint&gt; lstKeyPoints;
//    // Detect keypoints

    (*features)-&gt;detect(img, lstKeyPoints);
    printf("Found %lu keypoints.\n", lstKeyPoints.size());

    // Extract descriptors
    (*extractor)-&gt;compute(img, lstKeyPoints, descriptors);
    printf("Found %d descriptors.\n", descriptors.rows);

    (*computer)-&gt;detectAndCompute(img, Mat(), lstKeyPoints, descriptors);
    printf("Detect and compute found %lu keypoints.\n\n", lstKeyPoints.size());
  }

  // Let my memory go!
  delete extractor;
  delete features;
  delete computer;

  std::cout &lt;&lt; "Press enter to continue ..." &lt;&lt; std::endl;
  std::cin.get();
}

&lt;/denchmark-code&gt;

		</comment>
		<comment id='8' author='Lezh1k' date='2018-05-25T09:10:23Z'>
		The C++ code that you posted does not do the same things (web serving) as what the Go code does.
Perhaps rewriting the C++ code into the equivalent GoCV code would be a good test here to try to isolate?
		</comment>
		<comment id='9' author='Lezh1k' date='2018-05-25T09:18:19Z'>
		Sure.
But we tried this one too. I mean we tried to rewrite go code to make it work like this C++ peace. And we got memory leak, but only in service.
&lt;denchmark-link:https://github.com/deadprogram&gt;@deadprogram&lt;/denchmark-link&gt;
  I've tried to use defer and close like you mentioned :) . Didn't help. I have big memory consumption and it grows up :)
		</comment>
		<comment id='10' author='Lezh1k' date='2018-05-25T11:37:25Z'>
		Sorry I did not fully understand "But we tried this one too. I mean we tried to rewrite go code to make it work like this C++ peace. And we got memory leak, but only in service."
What do you mean "but only in service"?
		</comment>
		<comment id='11' author='Lezh1k' date='2018-05-25T11:47:44Z'>
		I mean we got memory leak in &lt;denchmark-link:https://gist.github.com/tzununbekov/8c9573f75ea5a35d0c3c15b192adbc7e&gt;this&lt;/denchmark-link&gt;
 application, but if we run it as test (like above) or just in main function (without work with web/network, just console application) we don't have memory leak.
		</comment>
		<comment id='12' author='Lezh1k' date='2018-05-25T12:00:42Z'>
		That does not sound like an issue that is specific to GoCV itself vs. how you are using it in your application.
The C++ example you show does 100 SIFT-based calculations serially one after another without any concurrency.
You might want to test your concurrency with SIFT separately from the web-based part of the application. Perhaps the OpenCV SIFT implementation does not work well in this concurrent case.
		</comment>
		<comment id='13' author='Lezh1k' date='2018-05-26T15:47:50Z'>
		Hi there.
We are out of topic now, sorry about that :)
&lt;denchmark-link:https://github.com/tzununbekov&gt;@tzununbekov&lt;/denchmark-link&gt;
  provided example that shows our problem.
After this:
&lt;denchmark-code&gt;for i in {1..200}; do curl -i -X POST -H "Content-Type: multipart/form-data" -F "img=@sample_image.jpg" http://localhost:8080/upload; done
&lt;/denchmark-code&gt;

top shows 1.3G  of resident memory consumption.
Note: I've implemented KeyPoints_Close2 function (that frees keypoints like in KeyPoints_Close function).
Note2: sample_image has 11672 keypoints and size 4160x3120 .
There is no concurrency. And I have no idea how to deal with it  :)))
		</comment>
		<comment id='14' author='Lezh1k' date='2018-06-11T10:02:39Z'>
		&lt;denchmark-link:https://github.com/deadprogram&gt;@deadprogram&lt;/denchmark-link&gt;
 it is looks like the issue was in  method of  package.
This &lt;denchmark-link:https://github.com/tzununbekov/gocv/commit/6c3f14599b718c0abc918eb6879cf26f65d1e180&gt;fix&lt;/denchmark-link&gt;
 works for described test &lt;denchmark-link:https://github.com/hybridgroup/gocv/issues/205#issuecomment-391718343&gt;case&lt;/denchmark-link&gt;
, but I'm not sure about its correctness.
		</comment>
		<comment id='15' author='Lezh1k' date='2018-06-11T13:26:14Z'>
		I feel like there are a number of memory leaks, of which your patch does correct C.KeyPoints.
I am looking into it a bit more, seems like there are a number of fixes that will be needed.
		</comment>
		<comment id='16' author='Lezh1k' date='2018-07-02T08:35:41Z'>
		I've made a couple of changes, including the one you have proposed &lt;denchmark-link:https://github.com/tzununbekov&gt;@tzununbekov&lt;/denchmark-link&gt;
 thanks for that. They will be included in the next GoCV release. I will leave this issue open until that code lands.
		</comment>
		<comment id='17' author='Lezh1k' date='2018-07-05T11:58:38Z'>
		This fix is now released as part of v0.14.0 so closing. Thank you!
		</comment>
	</comments>
</bug>