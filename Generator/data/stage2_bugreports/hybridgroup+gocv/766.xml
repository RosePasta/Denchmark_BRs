<bug id='766' author='snailpet' open_date='2020-11-17T02:48:36Z' closed_time='2021-01-11T08:19:31Z'>
	<summary>gocv.NewMat ToImage function memory leak</summary>
	<description>
gocv.NewMat ToImage function memory leak
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;func (od *OpenCVDecoder) ReadJpeg() ([]byte, error) {
	img := gocv.NewMat()
	defer func() {
		err := img.Close()
		fmt.Println("ReadJpeg err :",err)
		//runtime.GC()
		//fmt.Println("read gc")
	}()
	if ok := od.vc.Read(&amp;img); !ok {
		return nil, nil
	}

	if img.Empty() {
		return nil, nil
	}
	_, err := img.ToImage()
	if err != nil {
		return nil, err
	}
	//i, err := ImageToJpeg(iimg)
	return nil,nil
}

&lt;/denchmark-code&gt;

iimg variable not release.i must use runtime.GC(),but it didn't work well also.i think img.Close() dosen't work.
after task stop. pprof report
&lt;denchmark-code&gt;(pprof) top
Showing nodes accounting for 13.85MB, 100% of 13.85MB total
      flat  flat%   sum%        cum   cum%
    7.91MB 57.13% 57.13%     7.91MB 57.13%  image.NewRGBA
    5.94MB 42.87%   100%     5.94MB 42.87%  gocv.io/x/gocv._Cfunc_GoBytes
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;(pprof) list ToImage
Total: 13.85MB
ROUTINE ======================== gocv.io/x/gocv.(*Mat).ToImage in /Users/x/go/pkg/mod/gocv.io/x/gocv@v0.23.0/core.go
         0    13.85MB (flat, cum)   100% of Total
         .          .    753:   }
         .          .    754:
         .          .    755:   width := m.Cols()
         .          .    756:   height := m.Rows()
         .          .    757:   step := m.Step()
         .     5.94MB    758:   data := m.ToBytes()
         .          .    759:   channels := m.Channels()
         .          .    760:
         .          .    761:   if t == MatTypeCV8UC1 {
         .          .    762:           img := image.NewGray(image.Rect(0, 0, width, height))
         .          .    763:           c := color.Gray{Y: uint8(0)}
         .          .    764:
         .          .    765:           for y := 0; y &lt; height; y++ {
         .          .    766:                   for x := 0; x &lt; width; x++ {
         .          .    767:                           c.Y = uint8(data[y*step+x])
         .          .    768:                           img.SetGray(x, y, c)
         .          .    769:                   }
         .          .    770:           }
         .          .    771:
         .          .    772:           return img, nil
         .          .    773:   }
         .          .    774:
         .     7.91MB    775:   img := image.NewRGBA(image.Rect(0, 0, width, height))
         .          .    776:   c := color.RGBA{
         .          .    777:           R: uint8(0),
         .          .    778:           G: uint8(0),
         .          .    779:           B: uint8(0),
         .          .    780:           A: uint8(255),

&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Steps to Reproduce&lt;/denchmark-h&gt;







&lt;denchmark-h:h2&gt;Your Environment&lt;/denchmark-h&gt;


Operating System and version: macOS
OpenCV version used:  4.5.0
How did you install OpenCV? brew install
GoCV version used: 0.25.0
Go version: 1.15.x
Did you run the env.sh or env.cmd script before trying to go run or go build? no

	</description>
	<comments>
		<comment id='1' author='snailpet' date='2020-11-17T03:00:09Z'>
		img.close() is important
		</comment>
		<comment id='2' author='snailpet' date='2020-11-17T03:00:52Z'>
		defer is not use in c++ opencv
		</comment>
		<comment id='3' author='snailpet' date='2020-11-17T03:02:40Z'>
		
img.close() is important

it dosen't work
&lt;denchmark-code&gt;	defer func() {
		err := img.Close()
		fmt.Println("ReadJpeg err :",err)
		//runtime.GC()
		//fmt.Println("read gc")
	}()
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='snailpet' date='2020-11-17T03:05:32Z'>
		can't use defer ï¼› you must  use img.close() every time
		</comment>
		<comment id='5' author='snailpet' date='2020-11-17T03:09:28Z'>
		for {
img := gocv.NewMat()
videoCap.Read(&amp;img)
if img.Empty() {
img.Close()
break
}
// to do something
img.Close()
}
and  change opencv 4.5 to opencv4.4 , Because I found opencv4.5 have memory leak
		</comment>
		<comment id='6' author='snailpet' date='2020-11-17T03:22:36Z'>
		
for {
img := gocv.NewMat()
videoCap.Read(&amp;img)
if img.Empty() {
img.Close()
break
}
// to do something
img.Close()
}
and change opencv 4.5 to opencv4.4 , Because I found opencv4.5 have memory leak

thanks.
		</comment>
		<comment id='7' author='snailpet' date='2020-11-17T03:28:41Z'>
		

for {
img := gocv.NewMat()
videoCap.Read(&amp;img)
if img.Empty() {
img.Close()
break
}
// to do something
img.Close()
}
and change opencv 4.5 to opencv4.4 , Because I found opencv4.5 have memory leak

thanks. but how to install opencv 4.4? i tried brew install opencv@4.4, 404~

build docker image;  need cmake ffmpeg opencv  go .   brew install opencv default versions is 4.4
		</comment>
		<comment id='8' author='snailpet' date='2020-11-17T08:13:08Z'>
		


for {
img := gocv.NewMat()
videoCap.Read(&amp;img)
if img.Empty() {
img.Close()
break
}
// to do something
img.Close()
}
and change opencv 4.5 to opencv4.4 , Because I found opencv4.5 have memory leak

thanks. but how to install opencv 4.4? i tried brew install opencv@4.4, 404~

build docker image; need cmake ffmpeg opencv go . brew install opencv default versions is 4.4

thanks,i tried. but it dosen't work. ToImage function still leak memory.
		</comment>
		<comment id='9' author='snailpet' date='2020-11-17T08:38:08Z'>
		



for {
img := gocv.NewMat()
videoCap.Read(&amp;img)
if img.Empty() {
img.Close()
break
}
// to do something
img.Close()
}
and change opencv 4.5 to opencv4.4 , Because I found opencv4.5 have memory leak

thanks. but how to install opencv 4.4? i tried brew install opencv@4.4, 404~

build docker image; need cmake ffmpeg opencv go . brew install opencv default versions is 4.4

thanks,i tried. but it dosen't work. ToImage function still leak memory.

show your code
		</comment>
		<comment id='10' author='snailpet' date='2020-11-17T09:28:12Z'>
		




for {
img := gocv.NewMat()
videoCap.Read(&amp;img)
if img.Empty() {
img.Close()
break
}
// to do something
img.Close()
}
and change opencv 4.5 to opencv4.4 , Because I found opencv4.5 have memory leak

thanks. but how to install opencv 4.4? i tried brew install opencv@4.4, 404~

build docker image; need cmake ffmpeg opencv go . brew install opencv default versions is 4.4

thanks,i tried. but it dosen't work. ToImage function still leak memory.

show your code

&lt;denchmark-code&gt;func (od *OpenCVDecoder) ReadJpeg() ([]byte, error) {
	img := gocv.NewMat()
	if ok := od.vc.Read(&amp;img); !ok {
		_ = img.Close()
		return nil, nil
	}

	if img.Empty() {
		_ = img.Close()
		return nil, nil
	}
	iimg, err := img.ToImage()
	if err != nil {
		_ = img.Close()
		return nil, err
	}
	i, err := ImageToJpeg(iimg)
	_ = img.Close()
	return i, err
}

func ImageToJpeg(img image.Image) ([]byte, error) {
	buf := &amp;bytes.Buffer{}
	err := jpeg.Encode(buf, img, nil)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='11' author='snailpet' date='2020-11-17T13:28:31Z'>
		
iimg

iimg close() after ImageToJpeg()
		</comment>
		<comment id='12' author='snailpet' date='2020-11-20T05:05:25Z'>
		iimg is a interface without close function,maybe others code make this leak. i will try  something else.
		</comment>
		<comment id='13' author='snailpet' date='2020-11-23T08:35:40Z'>
		I have tried many ways to solve this problem.Finally, the memory leak is located in the Toimage method.
&lt;denchmark-code&gt;(pprof) top
Showing nodes accounting for 27.91MB, 100% of 27.91MB total
Showing top 10 nodes out of 20
      flat  flat%   sum%        cum   cum%
   21.97MB 78.73% 78.73%    21.97MB 78.73%  bytes.makeSlice
    5.94MB 21.27%   100%     5.94MB 21.27%  gocv.io/x/gocv._Cfunc_GoBytes (inline)
         0     0%   100%    21.97MB 78.73%  bufio.(*Writer).Flush
         0     0%   100%    21.97MB 78.73%  bufio.(*Writer).WriteByte
         0     0%   100%    21.97MB 78.73%  bytes.(*Buffer).Write
         0     0%   100%    21.97MB 78.73%  bytes.(*Buffer).grow
         0     0%   100%    27.91MB   100%  git.xx.com/aisys/srv-decoder/pkg/apis/decoder.(*LiveDecoder).Output.func1
         0     0%   100%    27.91MB   100%  git.xx.com/aisys/srv-decoder/pkg/controllers/decoder.LiveDecoder
         0     0%   100%    27.91MB   100%  git.xx.com/tools/video_decode.(*OpenCVDecoder).ReadJpeg
         0     0%   100%     5.94MB 21.27%  gocv.io/x/gocv.(*Mat).ToBytes
&lt;/denchmark-code&gt;

Another problem is that memory leak can't be reproduced in MacOS, only in docker pod (Linux) server
		</comment>
		<comment id='14' author='snailpet' date='2020-11-23T09:26:57Z'>
		
I have tried many ways to solve this problem.Finally, the memory leak is located in the Toimage method.
(pprof) top
Showing nodes accounting for 27.91MB, 100% of 27.91MB total
Showing top 10 nodes out of 20
      flat  flat%   sum%        cum   cum%
   21.97MB 78.73% 78.73%    21.97MB 78.73%  bytes.makeSlice
    5.94MB 21.27%   100%     5.94MB 21.27%  gocv.io/x/gocv._Cfunc_GoBytes (inline)
         0     0%   100%    21.97MB 78.73%  bufio.(*Writer).Flush
         0     0%   100%    21.97MB 78.73%  bufio.(*Writer).WriteByte
         0     0%   100%    21.97MB 78.73%  bytes.(*Buffer).Write
         0     0%   100%    21.97MB 78.73%  bytes.(*Buffer).grow
         0     0%   100%    27.91MB   100%  git.xx.com/aisys/srv-decoder/pkg/apis/decoder.(*LiveDecoder).Output.func1
         0     0%   100%    27.91MB   100%  git.xx.com/aisys/srv-decoder/pkg/controllers/decoder.LiveDecoder
         0     0%   100%    27.91MB   100%  git.xx.com/tools/video_decode.(*OpenCVDecoder).ReadJpeg
         0     0%   100%     5.94MB 21.27%  gocv.io/x/gocv.(*Mat).ToBytes

Another problem is that memory leak can't be reproduced in MacOS, only in docker pod (Linux) server

mac opencv 4.4 ?  the docker is 4.5.0 ?
		</comment>
		<comment id='15' author='snailpet' date='2020-11-24T06:08:41Z'>
		

I have tried many ways to solve this problem.Finally, the memory leak is located in the Toimage method.
(pprof) top
Showing nodes accounting for 27.91MB, 100% of 27.91MB total
Showing top 10 nodes out of 20
      flat  flat%   sum%        cum   cum%
   21.97MB 78.73% 78.73%    21.97MB 78.73%  bytes.makeSlice
    5.94MB 21.27%   100%     5.94MB 21.27%  gocv.io/x/gocv._Cfunc_GoBytes (inline)
         0     0%   100%    21.97MB 78.73%  bufio.(*Writer).Flush
         0     0%   100%    21.97MB 78.73%  bufio.(*Writer).WriteByte
         0     0%   100%    21.97MB 78.73%  bytes.(*Buffer).Write
         0     0%   100%    21.97MB 78.73%  bytes.(*Buffer).grow
         0     0%   100%    27.91MB   100%  git.xx.com/aisys/srv-decoder/pkg/apis/decoder.(*LiveDecoder).Output.func1
         0     0%   100%    27.91MB   100%  git.xx.com/aisys/srv-decoder/pkg/controllers/decoder.LiveDecoder
         0     0%   100%    27.91MB   100%  git.xx.com/tools/video_decode.(*OpenCVDecoder).ReadJpeg
         0     0%   100%     5.94MB 21.27%  gocv.io/x/gocv.(*Mat).ToBytes

Another problem is that memory leak can't be reproduced in MacOS, only in docker pod (Linux) server

mac opencv 4.4 ? the docker is 4.5.0 ?

mac 4.5.0 ,docker 4.5.0 .
		</comment>
		<comment id='16' author='snailpet' date='2020-11-25T02:02:25Z'>
		mat, err := gocv.ImageToMatRGB(img)
matClone := mat.Clone()
twoMat:=gocv.NewMat()
mat.Close()
matClone.Close()
twoMat.Close()
both version 4.5.0 and 4.4.0  leak memory
go version 1.15.5  added GODEBUG "madvdontneed=1"
		</comment>
		<comment id='17' author='snailpet' date='2020-11-28T17:08:21Z'>
		Please see the latest dev branch, which should fix the memory leak along with some other optimizations.
		</comment>
		<comment id='18' author='snailpet' date='2021-01-11T08:19:31Z'>
		This was released with v0.26.0 so now closing. Thank you everyone!
		</comment>
	</comments>
</bug>