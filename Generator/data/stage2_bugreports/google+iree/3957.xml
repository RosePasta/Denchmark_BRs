<bug id='3957' author='benvanik' open_date='2020-11-21T06:11:36Z' closed_time='2020-11-23T20:58:40Z'>
	<summary>Try disabling frame pointer elimination/enabling unwind tables to get backtraces</summary>
	<description>
Follow-up from discord where full backtraces from our generated functions weren't showing in traces on Android.
On Windows this is what I did: 


iree/iree/compiler/Dialect/HAL/Target/LLVM/AOT/internal/WindowsLinkerTool.cpp


         Line 80
      in
      e0ec204






 entryPointFn-&gt;addFnAttr(llvm::Attribute::UWTable); 





That may be enough to replicate in UnixLinkerTools' &lt;denchmark-link:https://github.com/google/iree/blob/e0ec2044f731db2c223809be822df3e361933571/iree%2Fcompiler%2FDialect%2FHAL%2FTarget%2FLLVM%2FAOT%2Finternal%2FUnixLinkerTool.cpp#L37-L41&gt;configureModule&lt;/denchmark-link&gt;
 - if it is, then we can make that common to both in the base LinkerTool class.
That may not work - my experience with DWARF is 10 years out of date so I have no idea if they even have unwind tables ;)
The other thing to try then is disabling frame pointer elimination, by adding this in the same configureModule function:
  for (auto &amp;func : *llvmModule) {
    auto attrs = func.getAttributes();
    attrs = attrs.addAttribute(llvmModule-&gt;getContext(),
                               llvm::AttributeList::FunctionIndex,
                               "frame-pointer", "all");
    func.setAttributes(attrs);
  }
With this you should see on x86 some ebp manipulation at the start/end of each generated functions and hopefully some stack traces. Not sure what the equivalent to look for on arm is but I'm sure you do :)
The unwind tables are ideal as they don't change the code at all and are easy to strip (they're just extra sections in the final output) - but if we need the frame pointers to debug they are very cheap (~bytes/function) and worth always including on UnixLinkerTool.
	</description>
	<comments>
	</comments>
</bug>