<bug id='4397' author='GMNGeoffrey' open_date='2021-01-06T02:42:08Z' closed_time='2021-01-06T18:30:41Z'>
	<summary>Binary in iree/base cannot depend on iree::testing::benchmark_main when crosscompiling</summary>
	<description>
In &lt;denchmark-link:https://github.com/google/iree/pull/4364&gt;#4364&lt;/denchmark-link&gt;
 I'm trying to build a benchmark binary under . This works fine in the normal compilation configuration, but fails when cross compiling to android during the host configuration step.

Steps to reproduce the behavior:
If you believe this is an issue with IREE core (not integrations) please provide a reproduction (including artifacts) that does not require integrations (&lt;denchmark-link:https://google.github.io/iree/developing-iree/tensorflow-integrations#generated-artifacts&gt;Instructions for extracting artifacts from TF tests&lt;/denchmark-link&gt;
)

Checkout GMNGeoffrey@5339522
Configure for android build:

cmake -B ~/build/iree/android -G Ninja \
  -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake \
  -DANDROID_ABI="$ANDROID_ABI" \
  -DANDROID_PLATFORM=android-29 \
  -DIREE_BUILD_COMPILER=OFF \
  -DIREE_BUILD_TESTS=ON \
  -DIREE_BUILD_SAMPLES=OFF \
  -DIREE_HOST_C_COMPILER=$(which clang) \
  -DIREE_HOST_CXX_COMPILER=$(which clang++)

Build the iree_configure_HOST target

cmake --build ~/build/iree/android/ --target iree_configure_HOST

See error


CMake Error at build_tools/cmake/iree_cc_binary.cmake:89 (add_executable):
Target "iree_base_synchronization_benchmark" links to target
"iree::testing::benchmark_main" but the target was not found.  Perhaps a
find_package() call is missing for an IMPORTED target, or an ALIAS target
is missing?
Call Stack (most recent call first):
iree/base/CMakeLists.txt:409 (iree_cc_binary)

	</description>
	<comments>
		<comment id='1' author='GMNGeoffrey' date='2021-01-06T04:07:33Z'>
		With -DCMAKE_VERBOSE_MAKEFILE=ON, I was able to get the command being issued by the configure custom command:
/usr/bin/cmake /usr/local/google/home/gcmn/src/iree -G Ninja -DCMAKE_MAKE_PROGRAM="/usr/bin/ninja" -DCMAKE_BUILD_TYPE="Release" -DCMAKE_C_COMPILER="/usr/bin/clang" -DCMAKE_CXX_COMPILER="/usr/bin/clang++" -DIREE_ENABLE_RUNTIME_TRACING=OFF -DIREE_ENABLE_MLIR=OFF -DIREE_ENABLE_EMITC=OFF -DIREE_BUILD_COMPILER=ON -DIREE_BUILD_TESTS=OFF -DIREE_BUILD_DOCS=OFF -DIREE_BUILD_SAMPLES=OFF -DIREE_BUILD_DEBUGGER=OFF -DIREE_BUILD_PYTHON_BINDINGS=OFF -DIREE_BUILD_JAVA_BINDINGS=OFF -DIREE_BUILD_EXPERIMENTAL_MODEL_BUILDER=OFF -DIREE_BUILD_EXPERIMENTAL_REMOTING=OFF -DIREE_BUILD_TENSORFLOW_COMPILER=OFF -DIREE_HAL_DRIVERS_TO_BUILD="DyLib;VMLA;Vulkan" -DIREE_TARGET_BACKENDS_TO_BUILD="DYLIB-LLVM-AOT;Metal-SPIRV;Vulkan-SPIRV;VMLA" -DIREE_ENABLE_ASAN=OFF -DIREE_ENABLE_MSAN=OFF -DIREE_ENABLE_TSAN=OFF -DIREE_ENABLE_CCACHE=OFF -DLLVM_CCACHE_BUILD=OFF -DCMAKE_VERBOSE_MAKEFILE=ON
So I think the issue is probably that BUILD_TESTS is off. Not sure why this doesn't cause issues for a binary located in vm though. It makes sense that the host build wouldn't enable the VM, but would enable base. I'm guessing that's the issue. The whole cross-compiling setup feels very fragile here though...
		</comment>
		<comment id='2' author='GMNGeoffrey' date='2021-01-06T04:09:07Z'>
		Sure enough, marking the binary as TESTONLY fixes the problem.
		</comment>
		<comment id='3' author='GMNGeoffrey' date='2021-01-06T18:30:40Z'>
		FTR, the reason I hit this was because of missing Bazel -&gt; CMake support, so I missed adding TESTONLY.
		</comment>
	</comments>
</bug>