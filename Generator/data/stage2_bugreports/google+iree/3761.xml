<bug id='3761' author='hanhanW' open_date='2020-11-09T16:21:20Z' closed_time='2020-12-16T13:08:25Z'>
	<summary>Fusion on Linalg doesn't work in IREE.</summary>
	<description>
Describe the bug
This works with linalg-fusion-for-tensor-ops but not iree-codegen-fusion-of-tensor-ops. The main difference is that iree-codegen-fusion-of-tensor-ops fold a tensor_reshape op into hal.interface.store.tensor.
To Reproduce
Input file:
func @foo() {
  %c0 = constant 0 : index
  %0 = hal.interface.load.tensor @legacy_io::@arg0, offset = %c0 {operand_result_index = 0 : i32} : tensor&lt;8192x4xf32&gt;
  %1 = hal.interface.load.tensor @legacy_io::@arg1, offset = %c0 {operand_result_index = 1 : i32} : tensor&lt;8x33xi32&gt;
  %2 = linalg.generic {indexing_maps = [affine_map&lt;(d0, d1) -&gt; (d1, d0)&gt;, affine_map&lt;(d0, d1) -&gt; (d0, d1)&gt;], iterator_types = ["parallel", "parallel"]} ins(%1 : tensor&lt;8x33xi32&gt;) {
  ^bb0(%arg0: i32):  // no predecessors
    linalg.yield %arg0 : i32
  } -&gt; tensor&lt;33x8xi32&gt;
  %3 = linalg.tensor_reshape %2 [affine_map&lt;(d0, d1) -&gt; (d0, d1)&gt;] : tensor&lt;33x8xi32&gt; into tensor&lt;264xi32&gt;
  %4 = linalg.indexed_generic {indexing_maps = [affine_map&lt;(d0, d1) -&gt; (d0)&gt;, affine_map&lt;(d0, d1) -&gt; (d0, d1)&gt;], iterator_types = ["parallel", "parallel"]} ins(%3 : tensor&lt;264xi32&gt;) {
  ^bb0(%arg0: index, %arg1: index, %arg2: i32):  // no predecessors
    %8 = index_cast %arg2 : i32 to index
    %9 = extract_element %0[%8, %arg1] : tensor&lt;8192x4xf32&gt;
    linalg.yield %9 : f32
  } -&gt; tensor&lt;264x4xf32&gt;
  %5 = linalg.tensor_reshape %4 [affine_map&lt;(d0, d1, d2) -&gt; (d0, d1)&gt;, affine_map&lt;(d0, d1, d2) -&gt; (d2)&gt;] : tensor&lt;264x4xf32&gt; into tensor&lt;33x8x4xf32&gt;
  hal.interface.store.tensor %5, @legacy_io::@ret0, offset = %c0 {operand_result_index = 2 : i32} : tensor&lt;33x8x4xf32&gt;
  return
}
$ iree-opt -iree-codegen-fusion-of-tensor-ops a.mlir
will get result:
#map0 = affine_map&lt;(d0, d1) -&gt; (d1, d0)&gt;
#map1 = affine_map&lt;(d0, d1) -&gt; (d0, d1)&gt;
#map2 = affine_map&lt;(d0, d1) -&gt; (d0)&gt;
module {
  func @foo() {
    %c0 = constant 0 : index
    %0 = hal.interface.load.tensor @legacy_io::@arg0, offset = %c0 {operand_result_index = 0 : i32} : tensor&lt;8192x4xf32&gt;
    %1 = hal.interface.load.tensor @legacy_io::@arg1, offset = %c0 {operand_result_index = 1 : i32} : tensor&lt;8x33xi32&gt;
    %2 = linalg.generic {indexing_maps = [#map0, #map1], iterator_types = ["parallel", "parallel"]} ins(%1 : tensor&lt;8x33xi32&gt;) {
    ^bb0(%arg0: i32):  // no predecessors
      linalg.yield %arg0 : i32
    } -&gt; tensor&lt;33x8xi32&gt;
    %3 = linalg.tensor_reshape %2 [#map1] : tensor&lt;33x8xi32&gt; into tensor&lt;264xi32&gt;
    %4 = linalg.indexed_generic {indexing_maps = [#map2, #map1], iterator_types = ["parallel", "parallel"]} ins(%3 : tensor&lt;264xi32&gt;) {
    ^bb0(%arg0: index, %arg1: index, %arg2: i32):  // no predecessors
      %5 = index_cast %arg2 : i32 to index
      %6 = extract_element %0[%5, %arg1] : tensor&lt;8192x4xf32&gt;
      linalg.yield %6 : f32
    } -&gt; tensor&lt;264x4xf32&gt;
    hal.interface.store.tensor %4, @legacy_io::@ret0, offset = %c0 {operand_result_index = 2 : i32} : tensor&lt;264x4xf32&gt;
    return
  }
}
If run with:
$ iree-opt -linalg-fusion-for-tensor-ops a.mlir
we will get a fused result
#map0 = affine_map&lt;(d0, d1, d2) -&gt; (d1, d0)&gt;
#map1 = affine_map&lt;(d0, d1, d2) -&gt; (d0, d1, d2)&gt;
module {
  func @foo() {
    %c0 = constant 0 : index
    %0 = hal.interface.load.tensor @legacy_io::@arg0, offset = %c0 {operand_result_index = 0 : i32} : tensor&lt;8192x4xf32&gt;
    %1 = hal.interface.load.tensor @legacy_io::@arg1, offset = %c0 {operand_result_index = 1 : i32} : tensor&lt;8x33xi32&gt;
    %2 = linalg.indexed_generic {indexing_maps = [#map0, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor&lt;8x33xi32&gt;) {
    ^bb0(%arg0: index, %arg1: index, %arg2: index, %arg3: i32):  // no predecessors
      %3 = index_cast %arg3 : i32 to index
      %4 = extract_element %0[%3, %arg2] : tensor&lt;8192x4xf32&gt;
      linalg.yield %4 : f32
    } -&gt; tensor&lt;33x8x4xf32&gt;
    hal.interface.store.tensor %2, @legacy_io::@ret0, offset = %c0 {operand_result_index = 2 : i32} : tensor&lt;33x8x4xf32&gt;
    return
  }
}
I think we will land the fix upstream, so we can use the output of iree-codegen-fusion-of-tensor-ops as test case:
#map0 = affine_map&lt;(d0, d1) -&gt; (d1, d0)&gt;
#map1 = affine_map&lt;(d0, d1) -&gt; (d0, d1)&gt;
#map2 = affine_map&lt;(d0, d1) -&gt; (d0)&gt;
module {
  func @foo() {
    %c0 = constant 0 : index
    %0 = hal.interface.load.tensor @legacy_io::@arg0, offset = %c0 {operand_result_index = 0 : i32} : tensor&lt;8192x4xf32&gt;
    %1 = hal.interface.load.tensor @legacy_io::@arg1, offset = %c0 {operand_result_index = 1 : i32} : tensor&lt;8x33xi32&gt;
    %2 = linalg.generic {indexing_maps = [#map0, #map1], iterator_types = ["parallel", "parallel"]} ins(%1 : tensor&lt;8x33xi32&gt;) {
    ^bb0(%arg0: i32):  // no predecessors
      linalg.yield %arg0 : i32
    } -&gt; tensor&lt;33x8xi32&gt;
    %3 = linalg.tensor_reshape %2 [#map1] : tensor&lt;33x8xi32&gt; into tensor&lt;264xi32&gt;
    %4 = linalg.indexed_generic {indexing_maps = [#map2, #map1], iterator_types = ["parallel", "parallel"]} ins(%3 : tensor&lt;264xi32&gt;) {
    ^bb0(%arg0: index, %arg1: index, %arg2: i32):  // no predecessors
      %5 = index_cast %arg2 : i32 to index
      %6 = extract_element %0[%5, %arg1] : tensor&lt;8192x4xf32&gt;
      linalg.yield %6 : f32
    } -&gt; tensor&lt;264x4xf32&gt;
    hal.interface.store.tensor %4, @legacy_io::@ret0, offset = %c0 {operand_result_index = 2 : i32} : tensor&lt;264x4xf32&gt;
    return
  }
}
	</description>
	<comments>
		<comment id='1' author='hanhanW' date='2020-12-16T13:08:25Z'>
		Fixed in &lt;denchmark-link:https://reviews.llvm.org/D92466&gt;https://reviews.llvm.org/D92466&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>