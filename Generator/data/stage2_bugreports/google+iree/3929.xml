<bug id='3929' author='MaheshRavishankar' open_date='2020-11-19T20:17:25Z' closed_time='2020-11-22T04:55:03Z'>
	<summary>Vulkan backend fails on a simple matmul + add kernel</summary>
	<description>
The following simple functions fails on the vulkan backend, but passes on the VMLA/LLVMIR backend
&lt;denchmark-code&gt;$&gt; cat matmul_add.mlir
func @matmul_add(%arg0 : tensor&lt;2x8xf32&gt;, %arg1 : tensor&lt;8x4xf32&gt;,
                 %arg2 : tensor&lt;2x4xf32&gt;) -&gt; tensor&lt;2x4xf32&gt; {
  %0 = "mhlo.dot"(%arg0, %arg1) : (tensor&lt;2x8xf32&gt;, tensor&lt;8x4xf32&gt;) -&gt; tensor&lt;2x4xf32&gt;
  %1 = mhlo.add %0, %arg2 : tensor&lt;2x4xf32&gt;
  return %1 : tensor&lt;2x4xf32&gt;
}
&lt;/denchmark-code&gt;

Steps to reproduce the behavior:
&lt;denchmark-code&gt;iree-run-mlir -export-all -function-input="2x8xf32=[[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0], [9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]]" -function-input="8x4xf32=[[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [9.0, 10.0, 11.0, 12.0], [13.0, 14.0, 15.0, 16.0], [17.0, 18.0, 19.0, 20.0], [21.0, 22.0, 23.0, 24.0], [25.0, 26.0, 27.0, 28.0], [29.0, 30.0, 31.0, 32.0]]" -function-input="2x4xf32=[[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0]]" -iree-hal-target-backends=llvm-ir matmul_add.mlir
&lt;/denchmark-code&gt;

Crash log
&lt;denchmark-code&gt;I ../iree/tools/iree-run-mlir-main.cc:204] Compiling for target backend 'vulkan-spirv*'...
I ../iree/tools/iree-run-mlir-main.cc:324] Evaluating all functions in module for driver 'vulkan'...
I ../iree/tools/utils/vm_util.cc:227] Creating driver and device for 'vulkan'...
[vk_mem_alloc.h : 17682] RAW: vmaCreateAllocator
I ../iree/hal/vulkan/vulkan_driver.cc:300] Created Vulkan Device: Quadro P1000
EXEC @matmul_add
[vk_mem_alloc.h : 18942] RAW: vmaCreateBuffer
[vk_mem_alloc.h : 16079] RAW:   AllocateMemory: MemoryTypeIndex=10, AllocationCount=1, Size=256
[vk_mem_alloc.h : 12919] RAW:     Created new block #0 Size=8388608
[vk_mem_alloc.h : 18942] RAW: vmaCreateBuffer
[vk_mem_alloc.h : 16079] RAW:   AllocateMemory: MemoryTypeIndex=10, AllocationCount=1, Size=256
[vk_mem_alloc.h : 12821] RAW:     Returned from existing block #0
[vk_mem_alloc.h : 18942] RAW: vmaCreateBuffer
[vk_mem_alloc.h : 16079] RAW:   AllocateMemory: MemoryTypeIndex=10, AllocationCount=1, Size=256
[vk_mem_alloc.h : 12821] RAW:     Returned from existing block #0
[vk_mem_alloc.h : 18942] RAW: vmaCreateBuffer
[vk_mem_alloc.h : 16079] RAW:   AllocateMemory: MemoryTypeIndex=9, AllocationCount=1, Size=256
[vk_mem_alloc.h : 12919] RAW:     Created new block #0 Size=8388608
[vk_mem_alloc.h : 18942] RAW: vmaCreateBuffer
[vk_mem_alloc.h : 16079] RAW:   AllocateMemory: MemoryTypeIndex=7, AllocationCount=1, Size=256
[vk_mem_alloc.h : 12919] RAW:     Created new block #0 Size=8388608
E ../iree/hal/vulkan/debug_reporter.cc:40] vkCmdPushDescriptorSetKHR() failed update validation: Write update to Push Descriptors defined with VkDescriptorSetLayout VkDescriptorSetLayout 0x40000000004[] binding #0 failed with error message: Attempted write update to buffer descriptor failed due to: Buffer (0xa000000000a) with usage mask 0x3 being used for a descriptor update of type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER does not have VK_BUFFER_USAGE_STORAGE_BUFFER_BIT set.. The Vulkan spec states: If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the buffer member of each element of pBufferInfo must have been created with VK_BUFFER_USAGE_STORAGE_BUFFER_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00331)
E ../iree/hal/vulkan/debug_reporter.cc:40] vkCmdPushDescriptorSetKHR() failed update validation: Write update to Push Descriptors defined with VkDescriptorSetLayout VkDescriptorSetLayout 0x40000000004[] binding #1 failed with error message: Attempted write update to buffer descriptor failed due to: Buffer (0xc000000000c) with usage mask 0x3 being used for a descriptor update of type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER does not have VK_BUFFER_USAGE_STORAGE_BUFFER_BIT set.. The Vulkan spec states: If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the buffer member of each element of pBufferInfo must have been created with VK_BUFFER_USAGE_STORAGE_BUFFER_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00331)
E ../iree/hal/vulkan/debug_reporter.cc:40] vkCmdPushDescriptorSetKHR() failed update validation: Write update to Push Descriptors defined with VkDescriptorSetLayout VkDescriptorSetLayout 0x40000000004[] binding #1 failed with error message: Attempted write update to buffer descriptor failed due to: Buffer (0xd000000000d) with usage mask 0x3 being used for a descriptor update of type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER does not have VK_BUFFER_USAGE_STORAGE_BUFFER_BIT set.. The Vulkan spec states: If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the buffer member of each element of pBufferInfo must have been created with VK_BUFFER_USAGE_STORAGE_BUFFER_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00331)
[vk_mem_alloc.h : 19035] RAW: vmaDestroyBuffer
[vk_mem_alloc.h : 13114] RAW:   Freed from MemoryTypeIndex=7
E ../iree/hal/vulkan/debug_reporter.cc:40] Cannot call vkDestroySemaphore on VkSemaphore 0x130000000013[] that is currently in use by a command buffer. The Vulkan spec states: All submitted batches that refer to semaphore must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySemaphore-semaphore-01137)
E ../iree/hal/vulkan/debug_reporter.cc:40] Attempt to free VkCommandBuffer 0xb6cda50[] which is in use. The Vulkan spec states: All elements of pCommandBuffers must not be in the pending state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeCommandBuffers-pCommandBuffers-00047)
I ../iree/tools/utils/vm_util.cc:172] result[0]: Buffer&lt;float32[2x4]&gt;
2x4xf32=[709 746 783 820][1673 1774 1875 1976]
[vk_mem_alloc.h : 19035] RAW: vmaDestroyBuffer
[vk_mem_alloc.h : 13114] RAW:   Freed from MemoryTypeIndex=9
[vk_mem_alloc.h : 19035] RAW: vmaDestroyBuffer
[vk_mem_alloc.h : 13114] RAW:   Freed from MemoryTypeIndex=10
[vk_mem_alloc.h : 19035] RAW: vmaDestroyBuffer
[vk_mem_alloc.h : 13114] RAW:   Freed from MemoryTypeIndex=10
[vk_mem_alloc.h : 19035] RAW: vmaDestroyBuffer
[vk_mem_alloc.h : 13114] RAW:   Freed from MemoryTypeIndex=10
E ../iree/hal/vulkan/debug_reporter.cc:40] Cannot call vkDestroyPipeline on VkPipeline 0x70000000007[] that is currently in use by a command buffer. The Vulkan spec states: All submitted commands that refer to pipeline must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipeline-pipeline-00765)
E ../iree/hal/vulkan/debug_reporter.cc:40] Cannot call vkDestroyPipeline on VkPipeline 0x90000000009[] that is currently in use by a command buffer. The Vulkan spec states: All submitted commands that refer to pipeline must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipeline-pipeline-00765)
[vk_mem_alloc.h : 17692] RAW: vmaDestroyAllocator
&lt;/denchmark-code&gt;

Output with VMLA/LLVM-IR backends
&lt;denchmark-code&gt;EXEC @matmul_add
I ../iree/tools/utils/vm_util.cc:172] result[0]: Buffer&lt;float32[2x4]&gt;
2x4xf32=[709 746 783 820][1673 1774 1875 1976]
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='MaheshRavishankar' date='2020-11-19T20:18:01Z'>
		The generated code looks fine to me. Seems like an issue with the Vulkan runtime.
		</comment>
		<comment id='2' author='MaheshRavishankar' date='2020-11-22T04:55:03Z'>
		I don't think it's failing; I see the same output you have from VMLA/LLVM in your vulkan log:
&lt;denchmark-code&gt;I ../iree/tools/utils/vm_util.cc:172] result[0]: Buffer&lt;float32[2x4]&gt;
2x4xf32=[709 746 783 820][1673 1774 1875 1976]
&lt;/denchmark-code&gt;

I think you're just seeing the log spam related to &lt;denchmark-link:https://github.com/google/iree/issues/3698&gt;#3698&lt;/denchmark-link&gt;
. Feel free to reopen if you see numerical differences/etc.
		</comment>
	</comments>
</bug>