<bug id='251' author='ghost(ghost)' open_date='2018-08-01T20:35:00Z' closed_time='2018-08-10T23:56:20Z'>
	<summary>TensorFlow GPU overriden by installation of baselines</summary>
	<description>
While installing garage, the package baselines and its dependencies are installed. Among these dependencies, there's the regular version of TF, and even though TF GPU is installed after (if the user picks that option), when both distributions are installed, the regular version of TF overrides the GPU version.
This is an issue inherited from baselines, as seen &lt;denchmark-link:https://github.com/openai/baselines/issues/146&gt;here&lt;/denchmark-link&gt;
.
A possible solution would be to remove tensorflow before installing tensorflow-gpu, although this may be temporal if baselines is fixed.
	</description>
	<comments>
		<comment id='1' author='ghost(ghost)' date='2018-08-01T23:54:42Z'>
		This would not happen if tensorflow was specified in environment.yml
		</comment>
		<comment id='2' author='ghost(ghost)' date='2018-08-02T08:55:38Z'>
		I understand that baselines has the regular &lt;denchmark-link:https://github.com/openai/baselines/blob/b71152eea0470ac2629c33e0fc66a54fe494949f/setup.py#L22&gt;tensorflow as dependency&lt;/denchmark-link&gt;
, so even if we add tensorflow-gpu in environment.yml to be installed before baselines, baselines will install tensorflow anyway and this will override tensorflow-gpu. Could you please elaborate how adding tensorflow in environment solves the problem without additional logic?
		</comment>
		<comment id='3' author='ghost(ghost)' date='2018-08-02T14:30:33Z'>
		conda resolves the entire dependency graph and only installs compatible sets of dependencies. If you specified tensorflow-gpu in environment.yml, it should ensure that was installed rather than the vanilla version (which is a transitive dependency from baselines).
		</comment>
		<comment id='4' author='ghost(ghost)' date='2018-08-02T20:30:44Z'>
		Ok, I did a little experiment based on your comments. I commented this section of &lt;denchmark-link:https://github.com/rlworkgroup/garage/blob/46d319bba01983c43d8c202b336fb4ff995c89ee/scripts/setup_linux.sh#L36-L51&gt;code&lt;/denchmark-link&gt;
, and added tensorflow-gpu &lt;denchmark-link:https://github.com/rlworkgroup/garage/blob/46d319bba01983c43d8c202b336fb4ff995c89ee/environment.yml#L50-L51&gt;here&lt;/denchmark-link&gt;
, then I reinstalled garage, however, when typing  I still get:
&lt;denchmark-code&gt;tensorflow          1.9.0    
tensorflow-gpu      1.9.0
&lt;/denchmark-code&gt;

Is something missing?
		</comment>
		<comment id='5' author='ghost(ghost)' date='2018-08-02T20:49:58Z'>
		I repeat the experiment adding tensorflow instead of tensorflow-gpu in environment.yml, the dependency graph resolves to not collect tensorflow as a dependency of baselines since it's explicitly added to the pip dependencies. Only the following packages are collected as dependencies of baselines:
&lt;denchmark-code&gt;Collecting tqdm (from baselines-&gt;-r /home/aigonzal/ivanWorkspace/garage/condaenv.hXLPGN.requirements.txt (line 36)) 
  Using cached https://files.pythonhosted.org/packages/7d/e6/19dfaff08fcbee7f3453e5b537e65a8364f1945f921a36d08be1e2ff3475/tqdm-4.24.0-py2.py3-none-any.whl
Collecting zmq (from baselines-&gt;-r /home/aigonzal/ivanWorkspace/garage/condaenv.hXLPGN.requirements.txt (line 36)) 
Collecting dill (from baselines-&gt;-r /home/aigonzal/ivanWorkspace/garage/condaenv.hXLPGN.requirements.txt (line 36)) 
Collecting progressbar2 (from baselines-&gt;-r /home/aigonzal/ivanWorkspace/garage/condaenv.hXLPGN.requirements.txt (line 36)) 
  Using cached https://files.pythonhosted.org/packages/4f/6f/acb2dd76f2c77527584bd3a4c2509782bb35c481c610521fc3656de5a9e0/progressbar2-3.38.0-py2.py3-none-any.whl
Collecting mpi4py (from baselines-&gt;-r /home/aigonzal/ivanWorkspace/garage/condaenv.hXLPGN.requirements.txt (line 36)) 
Collecting opencv-python (from baselines-&gt;-r /home/aigonzal/ivanWorkspace/garage/condaenv.hXLPGN.requirements.txt (line 36)) 
  Using cached https://files.pythonhosted.org/packages/53/e0/21c8964fa8ef50842ebefaa7346a3cf0e37b56c8ecd97ed6bd2dbe577705/opencv_python-3.4.2.17-cp36-cp36m-manylinux1_x86_64.whl
&lt;/denchmark-code&gt;

However, the dependency is not correctly solved if tensorflow-gpu is explicitly added to the pip dependencies (notice now tensorflow is collected):
&lt;denchmark-code&gt;Collecting tqdm (from baselines-&gt;-r /home/aigonzal/ivanWorkspace/garage/condaenv.QsEF2Y.requirements.txt (line 36))
  Using cached https://files.pythonhosted.org/packages/7d/e6/19dfaff08fcbee7f3453e5b537e65a8364f1945f921a36d08be1e2ff3475/tqdm-4.24.0-py2.py3-none-any.whl
Collecting zmq (from baselines-&gt;-r /home/aigonzal/ivanWorkspace/garage/condaenv.QsEF2Y.requirements.txt (line 36))
Collecting dill (from baselines-&gt;-r /home/aigonzal/ivanWorkspace/garage/condaenv.QsEF2Y.requirements.txt (line 36))
Collecting progressbar2 (from baselines-&gt;-r /home/aigonzal/ivanWorkspace/garage/condaenv.QsEF2Y.requirements.txt (line 36))
  Using cached https://files.pythonhosted.org/packages/4f/6f/acb2dd76f2c77527584bd3a4c2509782bb35c481c610521fc3656de5a9e0/progressbar2-3.38.0-py2.py3-none-any.whl
Collecting mpi4py (from baselines-&gt;-r /home/aigonzal/ivanWorkspace/garage/condaenv.QsEF2Y.requirements.txt (line 36))
Collecting tensorflow&gt;=1.4.0 (from baselines-&gt;-r /home/aigonzal/ivanWorkspace/garage/condaenv.QsEF2Y.requirements.txt (line 36))
  Using cached https://files.pythonhosted.org/packages/86/95/274190b39950e1e9eef4b071acefea832ac3e2c19bb4b442fa54f3214d2e/tensorflow-1.9.0-cp36-cp36m-manylinux1_x86_64.whl
Collecting opencv-python (from baselines-&gt;-r /home/aigonzal/ivanWorkspace/garage/condaenv.QsEF2Y.requirements.txt (line 36))
  Using cached https://files.pythonhosted.org/packages/53/e0/21c8964fa8ef50842ebefaa7346a3cf0e37b56c8ecd97ed6bd2dbe577705/opencv_python-3.4.2.17-cp36-cp36m-manylinux1_x86_64.whl
&lt;/denchmark-code&gt;

Maybe the algorithm in conda does not correctly solve that tensorflow-gpu is equivalent to tensorflow in terms of depedencies.
		</comment>
		<comment id='6' author='ghost(ghost)' date='2018-08-02T21:03:35Z'>
		A couple comments:

The algorithm in conda doesn't run the constraint solver on anything in the pip: stanza. The pip stanza is is equivalent to pip install &lt;list of pip deps&gt;. pip has its own dependency solver, but it is much less sophisticated than conda's
Packages in the top-level dependencies stanza are installed before the pip dependencies
If both tensorflow and tensorflow_gpu are installed, which one does Python use? If it's tensorflow_gpu, I don't think it's a problem.
It seems that if you installed your preferred tensorflow after conda, as we do in Dockerfile.ci, this problem would go away.

The underlying problem here is not some package's behavior. The baselines package works just fine and it's a completely valid pip package which does nothing out of the ordinary.
The real problem is that you have at least 3 different dependency managers (install script, conda, pip) competing to install packages at different times, mostly unaware of each other. Focus on solving that problem rather than adding more bandaids.
		</comment>
		<comment id='7' author='ghost(ghost)' date='2018-08-02T21:52:20Z'>
		
If  both tensorflow and tensorflow_gpu are installed, which one does Python use? If it's tensorflow_gpu, I don't think it's a problem.

If both are installed, tensorflow will override tensorflow_gpu.
Moreover, if both the vanilla tensorflow and tensorflow_gpu are installed, it's not enough to uninstall vanilla tensorflow to make the GPU version work. Both have to be uninstalled first in order to install TF GPU again and make it work correctly.

It seems that if you installed your preferred tensorflow after conda, as we do in Dockerfile.ci, this problem would go away.

I agree. However, considering the problems described above and the case when a dependency like baselines installs tensorflow but tensorflow-gpu is preferred instead, it's necessary to check if tensorflow was installed, remove it and then install tensorflow-gpu.

The real problem is that you have at least 3 different dependency managers (install script, conda, pip) competing to install packages at different times, mostly unaware of each other. Focus on solving that problem rather than adding more bandaids.

Ok, so the idea is to reduce the number of managers to reduce dependency bugs in the future. Is it Docker a possible alternative to solve this?
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Ok, it seems Docker does not manages dependencies at the same level as conda. I can look for alternatives to replace the current managers, or find a better way to integrate the three of them to work together.
		</comment>
		<comment id='8' author='ghost(ghost)' date='2018-08-02T22:06:41Z'>
		Actually you can just unconditionally uninstall both and then install the one you want, just like what we do to fix the box2d dep problem in Dockerfile.ci
pip uninstall -y tensorflow tensorflow-gpu
pip install my-favorite-tensorflow
The working plan for dependency management is pyenv+pipenv as documented in &lt;denchmark-link:https://github.com/rlworkgroup/garage/issues/32&gt;#32&lt;/denchmark-link&gt;
 .
Docker is a bad solution to most problems, so I prefer we avoid asking most users to tolerate it.
		</comment>
		<comment id='9' author='ghost(ghost)' date='2018-08-02T22:11:07Z'>
		Yes, I was thinking in that solution as well since we can guarantee that the selected version will be installed. Ok, then I will apply that solution right after conda has finished along with passing the flag to the script instead of asking at the middle of the installation.
		</comment>
		<comment id='10' author='ghost(ghost)' date='2018-08-02T22:28:21Z'>
		Yes, please use flags for all prompts so we can start using it in Docker.
You might want to try this to avoid spending hours figuring out getopt() (it's not rewarding). &lt;denchmark-link:https://argbash.io/&gt;https://argbash.io/&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='ghost(ghost)' date='2018-08-10T19:47:30Z'>
		Fixed with &lt;denchmark-link:https://github.com/rlworkgroup/garage/pull/258&gt;#258&lt;/denchmark-link&gt;

		</comment>
		<comment id='12' author='ghost(ghost)' date='2018-08-10T23:08:51Z'>
		Can you add tensorflow==1.9.0 to environment.yml and then consider this closed? In the case of GPU, the setup script can uninstall tensorflow and install tensorflow-gpu over it.
		</comment>
		<comment id='13' author='ghost(ghost)' date='2018-08-10T23:56:20Z'>
		Err sorry wrong issue
		</comment>
	</comments>
</bug>