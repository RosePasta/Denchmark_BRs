<bug id='239' author='jonashen' open_date='2018-07-30T01:38:39Z' closed_time='2018-10-31T17:33:29Z'>
	<summary>Delete stub()</summary>
	<description>
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/Users/jonathon/Documents/garage/garage/scripts/run_experiment.py", line 191, in &lt;module&gt;
    run_experiment(sys.argv)
  File "/Users/jonathon/Documents/garage/garage/scripts/run_experiment.py", line 146, in run_experiment
    logger.log_parameters_lite(params_log_file, args)
  File "/Users/jonathon/Documents/garage/garage/garage/misc/logger.py", line 372, in log_parameters_lite
    json.dump(log_params, f, indent=2, sort_keys=True, cls=MyEncoder)
  File "/anaconda2/envs/garage/lib/python3.6/json/__init__.py", line 179, in dump
    for chunk in iterable:
  File "/anaconda2/envs/garage/lib/python3.6/json/encoder.py", line 430, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File "/anaconda2/envs/garage/lib/python3.6/json/encoder.py", line 404, in _iterencode_dict
    yield from chunks
  File "/anaconda2/envs/garage/lib/python3.6/json/encoder.py", line 404, in _iterencode_dict
    yield from chunks
  File "/anaconda2/envs/garage/lib/python3.6/json/encoder.py", line 404, in _iterencode_dict
    yield from chunks
  [Previous line repeated 1 more times]
  File "/anaconda2/envs/garage/lib/python3.6/json/encoder.py", line 437, in _iterencode
    o = _default(o)
  File "/Users/jonathon/Documents/garage/garage/garage/misc/logger.py", line 352, in default
    return json.JSONEncoder.default(self, o)
  File "/anaconda2/envs/garage/lib/python3.6/json/encoder.py", line 180, in default
    o.__class__.__name__)
TypeError: Object of type 'TimeLimit' is not JSON serializable
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='jonashen' date='2018-07-30T16:43:43Z'>
		Seems to be attempting to serializing a gym.Env? I think this should be covered by &lt;denchmark-link:https://github.com/rlworkgroup/garage/pull/240&gt;#240&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='jonashen' date='2018-07-30T16:59:38Z'>
		This error persisted even after the changes made in my PR. I'm not sure if it's because I implemented serialization wrong?
		</comment>
		<comment id='3' author='jonashen' date='2018-07-30T18:54:02Z'>
		Let's hold off on merging &lt;denchmark-link:https://github.com/rlworkgroup/garage/pull/240&gt;#240&lt;/denchmark-link&gt;
 until you root cause this bug.
		</comment>
		<comment id='4' author='jonashen' date='2018-07-30T21:26:27Z'>
		nvm
		</comment>
		<comment id='5' author='jonashen' date='2018-07-31T17:39:33Z'>
		Is it still broken with the new wrappers?
		</comment>
		<comment id='6' author='jonashen' date='2018-08-01T18:05:51Z'>
		i believe so
		</comment>
		<comment id='7' author='jonashen' date='2018-08-01T19:09:10Z'>
		What is the contents of args here?   File "/Users/jonathon/Documents/garage/garage/scripts/run_experiment.py", line 146, in run_experiment logger.log_parameters_lite(params_log_file, args)?
args contains something which is not JSON-able.
		</comment>
		<comment id='8' author='jonashen' date='2018-08-01T21:27:21Z'>
		&lt;denchmark-code&gt;Namespace(
args_data='gANjZ2FyYWdlLm1pc2MuaW5zdHJ1bWVudApTdHViTWV0aG9kQ2FsbApxACmBcQF9cQIoWAYAAABfX2FyZ3NxAyhjZ2FyYWdlLm1pc2MuaW5zdHJ1bWVudApTdHViT2JqZWN0CnEEKYFxBX1xBihYBAAAAGFyZ3NxBylYBgAAAGt3YXJnc3EIfXEJKFgDAAAAZW52cQpoBCmBcQt9cQwoaAcpaAh9cQ1oCmNneW0ud3JhcHBlcnMudGltZV9saW1pdApUaW1lTGltaXQKcQ4pgXEPfXEQKGgKY2d5bS5lbnZzLmNsYXNzaWNfY29udHJvbC5jYXJ0cG9sZQpDYXJ0UG9sZUVudgpxESmBcRJ9cRMoWAcAAABncmF2aXR5cRRHQCOZmZmZmZpYCAAAAG1hc3NjYXJ0cRVHP/AAAAAAAABYCAAAAG1hc3Nwb2xlcRZHP7mZmZmZmZpYCgAAAHRvdGFsX21hc3NxF0c/8ZmZmZmZmlgGAAAAbGVuZ3RocRhHP+AAAAAAAABYDwAAAHBvbGVtYXNzX2xlbmd0aHEZRz+pmZmZmZmaWAkAAABmb3JjZV9tYWdxGkdAJAAAAAAAAFgDAAAAdGF1cRtHP5R64UeuFHtYFwAAAHRoZXRhX3RocmVzaG9sZF9yYWRpYW5zcRxHP8rO6fN769VYCwAAAHhfdGhyZXNob2xkcR1HQAMzMzMzMzNYDAAAAGFjdGlvbl9zcGFjZXEeY2d5bS5zcGFjZXMuZGlzY3JldGUKRGlzY3JldGUKcR8pgXEgfXEhKFgBAAAAbnEiSwJYBQAAAHNoYXBlcSMpWAUAAABkdHlwZXEkY251bXB5CmR0eXBlCnElWAIAAABpOHEmSwBLAYdxJ1JxKChLA1gBAAAAPHEpTk5OSv////9K/////0sAdHEqYnViWBEAAABvYnNlcnZhdGlvbl9zcGFjZXErY2d5bS5zcGFjZXMuYm94CkJveApxLCmBcS19cS4oWAMAAABsb3dxL2NudW1weS5jb3JlLm11bHRpYXJyYXkKX3JlY29uc3RydWN0CnEwY251bXB5Cm5kYXJyYXkKcTFLAIVxMkMBYnEzh3E0UnE1KEsBSwSFcTZoJVgCAAAAZjRxN0sASwGHcThScTkoSwNoKU5OTkr/////Sv////9LAHRxOmKJQxCamZnA//9//1B31r7//3//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1X0Th/MEr9QzI8HXaHDqm5zQ061jH2mAunFRdHFSYk1wAksARwAAAAAAAAAAdHFTYlgGAAAAdmlld2VycVROWAUAAABzdGF0ZXFVTlgRAAAAc3RlcHNfYmV5b25kX2RvbmVxVk5YBAAAAHNwZWNxV2NneW0uZW52cy5yZWdpc3RyYXRpb24KRW52U3BlYwpxWCmBcVl9cVooWAIAAABpZHFbWAsAAABDYXJ0UG9sZS12MHFcWAYAAAB0cmlhbHNxXUtkWBAAAAByZXdhcmRfdGhyZXNob2xkcV5HQGhgAAAAAABYEAAAAG5vbmRldGVybWluaXN0aWNxX4lYBAAAAHRhZ3NxYH1xYVgqAAAAd3JhcHBlcl9jb25maWcuVGltZUxpbWl0Lm1heF9lcGlzb2RlX3N0ZXBzcWJLyHNYEQAAAG1heF9lcGlzb2RlX3N0ZXBzcWNLyFgTAAAAbWF4X2VwaXNvZGVfc2Vjb25kc3FkTlgJAAAAX2Vudl9uYW1lcWVYCAAAAENhcnRQb2xlcWZYDAAAAF9lbnRyeV9wb2ludHFnWCQAAABneW0uZW52cy5jbGFzc2ljX2NvbnRyb2w6Q2FydFBvbGVFbnZxaFgLAAAAX2xvY2FsX29ubHlxaYlYBwAAAF9rd2FyZ3Nxan1xa3VidWJoHmggaCtoLVgMAAAAcmV3YXJkX3JhbmdlcWxH//AAAAAAAABHf/AAAAAAAACGcW1YCAAAAG1ldGFkYXRhcW59cW8oWAwAAAByZW5kZXIubW9kZXNxcF1xcShYBQAAAGh1bWFucXJYCQAAAHJnYl9hcnJheXFzZVgXAAAAdmlkZW8uZnJhbWVzX3Blcl9zZWNvbmRxdEsydVgUAAAAX21heF9lcGlzb2RlX3NlY29uZHNxdU5YEgAAAF9tYXhfZXBpc29kZV9zdGVwc3F2S8hYDgAAAF9lbGFwc2VkX3N0ZXBzcXdLAFgTAAAAX2VwaXNvZGVfc3RhcnRlZF9hdHF4TnVic1gLAAAAcHJveHlfY2xhc3NxeWNnYXJhZ2UudGYuZW52cy5iYXNlClRmRW52CnF6dWJYBgAAAHBvbGljeXF7aAQpgXF8fXF9KGgHKWgIfXF+KFgEAAAAbmFtZXF/aHtYCAAAAGVudl9zcGVjcYBjZ2FyYWdlLm1pc2MuaW5zdHJ1bWVudApTdHViQXR0cgpxgSmBcYJ9cYMoWAQAAABfb2JqcYRoC1gKAAAAX2F0dHJfbmFtZXGFaFd1YlgMAAAAaGlkZGVuX3NpemVzcYZLIEsghnGHdWh5Y2dhcmFnZS50Zi5wb2xpY2llcy5jYXRlZ29yaWNhbF9tbHBfcG9saWN5CkNhdGVnb3JpY2FsTUxQUG9saWN5CnGIdWJYCAAAAGJhc2VsaW5lcYloBCmBcYp9cYsoaAcpaAh9cYxogGiBKYFxjX1xjihohGgLaIVoV3Vic2h5Y2dhcmFnZS5iYXNlbGluZXMubGluZWFyX2ZlYXR1cmVfYmFzZWxpbmUKTGluZWFyRmVhdHVyZUJhc2VsaW5lCnGPdWJYCgAAAGJhdGNoX3NpemVxkE2gD1gPAAAAbWF4X3BhdGhfbGVuZ3RocZFLyFgFAAAAbl9pdHJxkkt4WAgAAABkaXNjb3VudHGTRz/vrhR64UeuWAkAAABzdGVwX3NpemVxlEc/hHrhR64Ue3VoeWNnYXJhZ2UudGYuYWxnb3MudHJwbwpUUlBPCnGVdWJYBQAAAHRyYWlucZYpfXGXdHGYWAgAAABfX2t3YXJnc3GZfXGadWIu', 
exp_name='experiment_2018_08_01_14_26_35_0001', 
log_dir='/Users/jonathon/Documents/garage/garage/data/local/experiment/experiment_2018_08_01_14_26_35_0001', 
log_tabular_only=False, 
n_parallel=1, 
params_log_file='params.json',
 plot=False, 
resume_from=None, 
seed=1, 
snapshot_gap=1, 
snapshot_mode='last', 
tabular_log_file='progress.csv', 
tensorboard_step_key=None, 
text_log_file='debug.log', 
use_cloudpickle=False,
 variant_data=None,
 variant_log_file='variant.json'
)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='jonashen' date='2018-08-01T21:33:01Z'>
		These are the exact args from the crash? I don't see any object of type TimeLimit.
		</comment>
		<comment id='10' author='jonashen' date='2018-08-01T21:36:29Z'>
		Once I wrapped examples/tf/trpo_gym_tf_cartpole with a run_task(*_): and run_experiment(run_task, n_parallel=1, snapshot_mode="last", seed=1), I got a different error:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/Users/jonathon/Documents/garage/garage/scripts/run_experiment.py", line 191, in &lt;module&gt;
    run_experiment(sys.argv)
  File "/Users/jonathon/Documents/garage/garage/scripts/run_experiment.py", line 171, in run_experiment
    method_call(variant_data)
  File "examples/tf/trpo_gym_tf_cartpole.py", line 34, in run_task
    algo.train()
  File "/Users/jonathon/Documents/garage/garage/garage/tf/algos/batch_polopt.py", line 122, in train
    paths = self.obtain_samples(itr)
  File "/Users/jonathon/Documents/garage/garage/garage/tf/algos/batch_polopt.py", line 104, in obtain_samples
    return self.sampler.obtain_samples(itr)
  File "/Users/jonathon/Documents/garage/garage/garage/tf/samplers/vectorized_sampler.py", line 63, in obtain_samples
    next_obses, rewards, dones, env_infos = self.vec_env.step(actions)
  File "/Users/jonathon/Documents/garage/garage/garage/tf/envs/vec_env_executor.py", line 24, in step
    dones[self.ts &gt;= self.max_path_length] = True
IndexError: boolean index did not match indexed array along dimension 0; dimension is 1 but corresponding boolean dimension is 20
&lt;/denchmark-code&gt;

		</comment>
		<comment id='11' author='jonashen' date='2018-08-01T21:38:18Z'>
		Start by debugging it without run_experiment(). Pickling can exacerbate existing problems.
		</comment>
		<comment id='12' author='jonashen' date='2018-08-01T21:40:43Z'>
		All errors are now gone once I removed run_experiment(). However, the program doesn't run either:
&lt;denchmark-code&gt;(garage) garage (pickled_env *) $ python examples/tf/trpo_gym_tf_cartpole.py
pygame 1.9.4
Hello from the pygame community. https://www.pygame.org/contribute.html
Could not import matplotlib.pyplot, therefore ``cma.plot()``" + etc. is not available
WARN: gym.spaces.Box autodetected dtype as &lt;class 'numpy.float32'&gt;. Please provide explicit dtype.
(garage) garage (pickled_env *) $
&lt;/denchmark-code&gt;

		</comment>
		<comment id='13' author='jonashen' date='2018-08-01T21:49:34Z'>
		The only other change I made is in def dist_info_sym() in tf/policies/categorical_mlp_policy.py, where I changed return dict(prob) to return dict(prob=prob)
		</comment>
		<comment id='14' author='jonashen' date='2018-08-09T22:49:37Z'>
		This is actually called my stub() breaking when env is a gym.Env (or gym.Wrapper, i think). I have not had time to debug it fully, it seems a workaround is to just not use stub. Unfortunately, I can't get this laucher to run even without stub though--it silently exits.
		</comment>
		<comment id='15' author='jonashen' date='2018-09-20T00:46:37Z'>
		Update: commenting out stub(globals()) now enables trpo_gym_tf_cartpole.py to run, but a new error emerges:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "examples/tf/trpo_gym_tf_cartpole.py", line 32, in &lt;module&gt;
    run_experiment(algo.train(), n_parallel=1, snapshot_mode="last", seed=1)
  File "/Users/jonathon/Documents/garage/garage/garage/misc/instrument.py", line 420, in run_experiment
    assert hasattr(maybe_stub, '__call__')
AssertionError
&lt;/denchmark-code&gt;

		</comment>
		<comment id='16' author='jonashen' date='2018-09-20T17:06:09Z'>
		I'm guessing it is still trying to execute a stub, but none exists because you commented out stub().
		</comment>
		<comment id='17' author='jonashen' date='2018-10-01T20:44:25Z'>
		Updated situation: due to gym environments having a TimeLimit object that is not serializable, run_experiment and stub will not work with gym environments. To mitigate the issue of tests like trpo_gym_tf_cartpole.py not running, for example, comment out the lines stub(globals()) and run_experiment(...), then append algo.train() at the end of the file.
		</comment>
		<comment id='18' author='jonashen' date='2018-10-15T20:22:58Z'>
		I think &lt;denchmark-link:https://github.com/rlworkgroup/garage/pull/318&gt;#318&lt;/denchmark-link&gt;
 can solve this even though it is not solving gym's serialization problem (who wants to do that though?). We just need to change  to  and we can work around this.
		</comment>
		<comment id='19' author='jonashen' date='2018-10-17T17:46:10Z'>
		This could also be addressed by removing . &lt;denchmark-link:https://github.com/krzentner&gt;@krzentner&lt;/denchmark-link&gt;
 what do you think? is it worth keeping?
		</comment>
		<comment id='20' author='jonashen' date='2018-10-21T23:14:49Z'>
		&lt;denchmark-link:https://github.com/krzentner&gt;@krzentner&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/zuoxingdong&gt;@zuoxingdong&lt;/denchmark-link&gt;
 what are your thoughts?
After looking around, I think we should delete stubbing entirely. It's really opaque (attempts to stub all globals within a scope) and IMO not a good way to define an experiment.
Removing would break backwards-compatibility with some old code based on rllab, if authors used this feature, but I'm not sure anyone outside the original authors actually used the feature.
		</comment>
		<comment id='21' author='jonashen' date='2018-10-21T23:21:39Z'>
		&lt;denchmark-link:https://github.com/krzentner&gt;@krzentner&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/zuoxingdong&gt;@zuoxingdong&lt;/denchmark-link&gt;
 what are your comments?
I'm leaning towards deleting stubbing entirely. It's a really opaque way of defining an experiment. To the best I can tell, it attempts to take an arbitrary Python context (via globals()) and jsonify it into an experiment config, using the garage definition of pickling (i.e. class name + constructor params).
Deleting would break backwards-compat with older code based on rllab if it used stub(), but there are other ways of defining experiments in rllab, and I'm not sure anyone but this repo ever used the stub() way of doing it.
See
&lt;denchmark-link:https://github.com/rlworkgroup/garage/blob/master/garage/misc/instrument.py#L296&gt;https://github.com/rlworkgroup/garage/blob/master/garage/misc/instrument.py#L296&lt;/denchmark-link&gt;



		</comment>
		<comment id='22' author='jonashen' date='2018-10-21T23:55:56Z'>
		Wow. My first instinct is to kill stub() with fire. That's one of the craziest ideas I've seen.
Unless someone has a very clear reason it's necessary, I think we should definitely delete it.
		</comment>
		<comment id='23' author='jonashen' date='2018-10-22T05:38:16Z'>
		Ok I'm convinced. Renaming the issue.
		</comment>
		<comment id='24' author='jonashen' date='2018-10-24T13:01:47Z'>
		Hands up ! I agree with &lt;denchmark-link:https://github.com/krzentner&gt;@krzentner&lt;/denchmark-link&gt;
 , I guess this might also easily confuse the users.
		</comment>
		<comment id='25' author='jonashen' date='2018-10-30T17:24:07Z'>
		&lt;denchmark-link:https://github.com/naeioi&gt;@naeioi&lt;/denchmark-link&gt;
 i never used it personally, but I believe  implements a "magical" style for defining an experiment. Basically it attempts to pickle all primitives and objects visible from the environment in which it is called, usually the top-level/global scope of a script.
		</comment>
	</comments>
</bug>