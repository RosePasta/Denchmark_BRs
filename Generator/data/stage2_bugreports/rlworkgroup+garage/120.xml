<bug id='120' author='ryanjulian' open_date='2018-06-29T21:16:27Z' closed_time='2020-05-01T20:14:25Z'>
	<summary>run_experiment should not leave zombie processes</summary>
	<description>
I have to run this snippet after every run_experiment to clean up:
ps -fu | grep run_experiment | awk '{print $2}' | xargs kill -SIGINT
run_experiment should not leave zombie processes if it's killed with Ctrl-C (SIGINT). This might be fixed by changing joblib to use forkserver mode (&lt;denchmark-link:https://github.com/rlworkgroup/garage/issues/106&gt;#106&lt;/denchmark-link&gt;
)
	</description>
	<comments>
		<comment id='1' author='ryanjulian' date='2018-07-05T17:38:36Z'>
		I set the forkserver in joblib but I still detected zombie processes. I also set SIGINT to be ignored by the worker processes and it seems to be solution. Probably there's a race condition where the children (workers in the pool) die before the parent (process running the training) by getting the keyboard interruption first and the parent remains waiting for some signal to be moved to the queue of running processes (maybe SIGCHLD). However, I still cannot find solid proof that this is the root cause.
		</comment>
		<comment id='2' author='ryanjulian' date='2018-07-05T18:02:19Z'>
		Also, I see that the process that remains hanging is not really a zombie process but a "sleeping" process, as indicated by the status code Sl, where S means interruptible sleep (waiting for an event to complete) and l that is multi-threaded.
Also, when I send SIGINT (kill -SIGINT &lt;pid&gt;) to the sleeping process, the process finishes execution with the following traceback:
&lt;denchmark-code&gt;Error in atexit._run_exitfuncs:
Traceback (most recent call last):
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/multiprocessing/util.py", line 254, in _run_finalizers
(garage) aigonzal@gonzaiva:~/ivanWorkspace/garage$     finalizer()
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/multiprocessing/util.py", line 186, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/multiprocessing/pool.py", line 535, in _terminate_pool
    cls._help_stuff_finish(inqueue, task_handler, len(pool))
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/multiprocessing/pool.py", line 520, in _help_stuff_finish
    inqueue._rlock.acquire()
KeyboardInterrupt
&lt;/denchmark-code&gt;

It seems that the process goes to sleep when trying to acquire the lock in the inqueue, and perhaps the problem comes in when one of its children dies by the keyboard interrupt without releasing the lock and not waking up the parent.
		</comment>
		<comment id='3' author='ryanjulian' date='2018-07-05T18:05:32Z'>
		That would also explain why when the children ignore SIGINT no sleeping process remains, since each of them will not be interrupted and the lock will be released.
A good solution could be to call the terminate method in the singleton pool to request all the children to stop once the parent catches the keyboard interruption, so the parent doesn't have to wait for them to finish regular execution.
		</comment>
		<comment id='4' author='ryanjulian' date='2018-07-06T01:07:39Z'>
		Solved by &lt;denchmark-link:https://github.com/rlworkgroup/garage/pull/143&gt;#143&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='ryanjulian' date='2018-07-09T17:49:52Z'>
		I'm still having this problem.
Replicate by running &lt;denchmark-link:https://github.com/ryanjulian/embed2learn/blob/master/launchers/ppo_point_embed.py&gt;https://github.com/ryanjulian/embed2learn/blob/master/launchers/ppo_point_embed.py&lt;/denchmark-link&gt;
 (must be run with garage branch )
		</comment>
		<comment id='6' author='ryanjulian' date='2018-07-16T09:39:42Z'>
		Ok, so I got the following exception in the zombie processes by running 'kill -SIGINT':
&lt;denchmark-code&gt;  File "/home/aigonzal/ivanWorkspace/garage/scripts/run_experiment.py", line 171, in run_experiment
    method_call(variant_data)
  File "sandbox/embed2learn/launchers/ppo_point_embed.py", line 141, in run_task
    algo.train()
  File "/home/aigonzal/ivanWorkspace/garage/sandbox/embed2learn/algos/npo_task_embedding.py", line 945, in train
    params = self.optimize_policy(itr, )
  File "/home/aigonzal/ivanWorkspace/garage/sandbox/embed2learn/algos/npo_task_embedding.py", line 916, in optimize_policy
    self.train_policy_and_embedding_networks(policy_opt_input_values)
  File "/home/aigonzal/ivanWorkspace/garage/sandbox/embed2learn/algos/npo_task_embedding.py", line 872, in train_policy_and_embedding_networks
    self.optimizer.optimize(policy_opt_input_values)
  File "/home/aigonzal/ivanWorkspace/garage/garage/tf/optimizers/first_order_optimizer.py", line 123, in optimize
    dict(list(zip(self._input_vars, batch))))
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/site-packages/tensorflow/python/client/session.py", line 900, in run
    run_metadata_ptr)
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/site-packages/tensorflow/python/client/session.py", line 1135, in _run
    feed_dict_tensor, options, run_metadata)
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/site-packages/tensorflow/python/client/session.py", line 1316, in _do_run
    run_metadata)
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/site-packages/tensorflow/python/client/session.py", line 1322, in _do_call
    return fn(*args)
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/site-packages/tensorflow/python/client/session.py", line 1307, in _run_fn
    options, feed_dict, fetch_list, target_list, run_metadata)
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/site-packages/tensorflow/python/client/session.py", line 1409, in _call_tf_sessionrun
    run_metadata)
KeyboardInterrupt

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/site-packages/joblib/pool.py", line 606, in terminate
    super(MemmapingPool, self).terminate()
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/multiprocessing/pool.py", line 505, in terminate
    self._terminate()
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/multiprocessing/util.py", line 186, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/multiprocessing/pool.py", line 535, in _terminate_pool
    cls._help_stuff_finish(inqueue, task_handler, len(pool))
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/multiprocessing/pool.py", line 520, in _help_stuff_finish
    inqueue._rlock.acquire()
KeyboardInterrupt

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/aigonzal/ivanWorkspace/garage/scripts/run_experiment.py", line 191, in &lt;module&gt;
    run_experiment(sys.argv)
  File "/home/aigonzal/ivanWorkspace/garage/scripts/run_experiment.py", line 174, in run_experiment
    parallel_sampler.terminate()
  File "/home/aigonzal/ivanWorkspace/garage/garage/sampler/parallel_sampler.py", line 74, in terminate
    singleton_pool.terminate()
  File "/home/aigonzal/ivanWorkspace/garage/garage/sampler/stateful_pool.py", line 68, in terminate
    self.pool.terminate()
  File "/home/aigonzal/anaconda2/envs/garage/lib/python3.5/site-packages/joblib/pool.py", line 608, in terminate
    except WindowsError as e:
TypeError: catching classes that do not inherit from BaseException is not allowed
&lt;/denchmark-code&gt;

Although the keyboard interruption is caught in run_experiment and the pool of workers is terminated, the problem is in the joblib library by trying to catch WindowsError. The version of joblib currently used in garage where this bug appears is 0.10.3, but in version 0.11 this problem is solved as shown &lt;denchmark-link:https://github.com/joblib/joblib/commit/8fa1ca24be1af58b391dca6a0c0ec34d5b9f6ca6#diff-85ff380165de2e31fec3568aab121a96&gt;here&lt;/denchmark-link&gt;
.
I will run more times this test to make sure, but this seems to be the root cause.
		</comment>
		<comment id='7' author='ryanjulian' date='2018-08-10T18:27:19Z'>
		Note: as a workaround, you can add the following function to your bashrc to help clean up after every experiments.
# workaround for garage multiprocessing bug.
# See https://github.com/rlworkgroup/garage/issues/120
function kill_all_experiments () {
    ps -fu | grep run_experiment | awk '{print $2}' | xargs kill -SIGINT
}
		</comment>
		<comment id='8' author='ryanjulian' date='2018-08-13T07:31:27Z'>
		Should we discard blocking SIGINT in the worker processes produced in the sampling pool?
		</comment>
		<comment id='9' author='ryanjulian' date='2018-08-13T18:31:12Z'>
		Before we resort to that, I would like to try orchestrating an orderly shutdown.
It looks something like this:

Capture SIGINT in run_experiment() (and don't forward to child processes)
Call some graceful shutdown routine on the sampler (stateful_pool) and the plotter
If they don't shutdown after some time out, call a destructive shutdown routine.

See close() and terminate() in &lt;denchmark-link:https://docs.python.org/3.6/library/multiprocessing.html#multiprocessing.pool.Pool&gt;https://docs.python.org/3.6/library/multiprocessing.html#multiprocessing.pool.Pool&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='ryanjulian' date='2018-08-17T00:25:56Z'>
		Is this fixed if we upgrade joblib?
		</comment>
		<comment id='11' author='ryanjulian' date='2018-08-17T06:14:37Z'>
		At first I thought the upgrade was working nicely, but actually the sleeping processes are still there after updating joblib to version 0.12.2. The sleeping processes tend to happen more often when run experiment is interrupted after the samples are being processed. For example, interrupting at the middle of the following output:
&lt;denchmark-code&gt;2018-08-16 23:00:23.515430 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | Processing samples...
2018-08-16 23:00:23.629530 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | Logging diagnostics...
2018-08-16 23:00:23.632036 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | Optimizing policy...
2018-08-16 23:00:23.632586 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | Computing loss before
2018-08-16 23:00:23.841541 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | Computing KL before
2018-08-16 23:00:23.963317 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | Optimizing
2018-08-16 23:00:23.965825 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | Start CG optimization: #parameters: 1250, #inputs: 694, #subsample_inputs: 694
2018-08-16 23:00:23.971012 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | computing loss before
2018-08-16 23:00:24.008418 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | performing update
2018-08-16 23:00:24.008743 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | computing gradient
2018-08-16 23:00:24.576034 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | gradient computed
2018-08-16 23:00:24.576446 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | computing descent direction
2018-08-16 23:00:28.203723 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | descent direction computed
2018-08-16 23:00:28.551020 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | backtrack iters: 1
2018-08-16 23:00:28.551404 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | computing loss after
2018-08-16 23:00:28.551631 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | optimization finished
2018-08-16 23:00:28.551909 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | Computing KL after
2018-08-16 23:00:28.578637 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | Computing loss after
2018-08-16 23:00:28.857947 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | Fitting baseline...
2018-08-16 23:00:28.909386 PDT | [experiment_2018_08_16_22_59_40_0001] itr #0 | Saving snapshot...
&lt;/denchmark-code&gt;

		</comment>
		<comment id='12' author='ryanjulian' date='2018-09-21T18:24:40Z'>
		Solved in &lt;denchmark-link:https://github.com/rlworkgroup/garage/pull/295&gt;#295&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='ryanjulian' date='2018-10-09T22:11:00Z'>
		&lt;denchmark-link:https://github.com/naeioi&gt;@naeioi&lt;/denchmark-link&gt;
 @gonzaiva maybe you can brainstorm first and then seek &lt;denchmark-link:https://github.com/krzentner&gt;@krzentner&lt;/denchmark-link&gt;
 's opinion
		</comment>
		<comment id='14' author='ryanjulian' date='2018-10-09T22:21:25Z'>
		Will do. I think we need an graceful, integrated solution to handling of interrupt (by SIGINT or some other means), training states persistence, and experiment resumption.
		</comment>
		<comment id='15' author='ryanjulian' date='2018-10-17T17:44:35Z'>
		Given all the work we've done on this, I think we should punt on it until after the release. It probably involves a major redesign.
It's a flaw which has always been in rllab/garage, so current users shouldn't be surprised. We should make sure the release notes mentions this flaw. &lt;denchmark-link:https://github.com/rlworkgroup/garage/issues/246&gt;#246&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>