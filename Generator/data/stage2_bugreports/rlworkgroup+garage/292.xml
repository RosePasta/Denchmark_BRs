<bug id='292' author='ryanjulian' open_date='2018-08-17T04:56:30Z' closed_time='2018-10-08T21:48:14Z'>
	<summary>OpenAI gym envs are broken in pickled mode</summary>
	<description>
This is usually due to a picking or jsonable error.
In addition to fixing this, should add a test suite ensuring that they remain usable in pickled mode.
	</description>
	<comments>
		<comment id='1' author='ryanjulian' date='2018-08-17T20:24:39Z'>
		When fixing this, please add a test which wraps/pickles/unpickles/runs every env in OpenAI gym.
You can get an iterable of all the gym environments using gym.envs.registry.all(), e.g.
import pickle

import gym

for spec in gym.envs.registry.all():
    env = GarageEnv(spec.make())

    # Test pickling
    env = pickle.loads(pickle.dumps(env))
    assert env

    # Test stepping and rendering
    env.reset()
    done = False
    for _ in range(100):
        _, _, done, _ = env.step(env.action_space.sample())
        env.render()
        if done:
            break
Even better, actually parameterize the test
import pickle
import unittest

import gym
from nose2.tools import params

from garage.tf.envs import TfEnv

# TODO: also test TheanoEnv wrapper here
# TODO: whitelist broken gym envs
# TODO: file a bug with gym about the MjViewer.finish() AttributeErrors

class TestGymEnvs(unittest.TestCase):

    @params(*list(gym.envs.registry.all()))
    def test_pickling_wrapper(self, spec):
        env = spec.make()
        env = TfEnv(env)

        # Roundtrip serialization
        env = pickle.loads(pickle.dumps(env))

        # Step and render still work after pickling
        env.reset()
        env.step(env.action_space.sample())
        env.render()  # TODO: some gym envs throw NotImplementedError, need try/except and a whitelist
        env.close()  # TODO: some gym envs throw AttributeError, need try/except and a whitelist

    @params(*list(gym.envs.registry.all()))
    def test_step_and_render(self, spec):
        env = spec.make()
        env = TfEnv(env)

        # Step and render work
        env.reset()
        done = False
        for _ in range(10):
            _, _, done, _ = env.step(env.action_space.sample())
            env.render()  # TODO: some gym envs throw NotImplementedError, need try/except and a whitelist
            if done:
                break
        env.close() # TODO: some gym envs throw AttributeError, need try/except and a whitelist
		</comment>
		<comment id='2' author='ryanjulian' date='2018-09-01T00:25:14Z'>
		To document further into this issue, there seems to be two scenarios where pickling is failing:

With the Classic Control environment. The object that cannot be pickled from the environment is the viewer, which is set once env.render() is called.
This problem can be solve by pickling a copy of the environment object with the viewer set as None.
Similarly, for the Box2D environments, the components that cannot be pickled are the objects rendered from the Box2D library (SwigPyObject objects), but all these objects are not encapsulated in a viewer object as above. For example, the environment of LunarLander has b2Body objects for the moon, the lander, the lander legs and so on as direct attributes of the environment.
To solve this one, we may need to iterate through all attributes to check which ones inherit from SwigPyObject.

Note:
I didn't test on Atari Environments since there's quite a lot of them and adding them increases the testing time significantly.
		</comment>
		<comment id='3' author='ryanjulian' date='2018-10-08T21:48:11Z'>
		Fixed in &lt;denchmark-link:https://github.com/rlworkgroup/garage/pull/318&gt;#318&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>