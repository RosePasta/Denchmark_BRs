<bug id='4521' author='Phong13' open_date='2020-09-28T14:31:49Z' closed_time='2020-10-07T17:34:17Z'>
	<summary>Accessing Academy.Instance when not playing leaks AcademyFixedUpdateSteppers and EnvironmentStep gets called multiple times per FixedUpdate</summary>
	<description>
Describe the bug
Any code that accesses "Academy.Instance" when not "playing" will cause a new hidden gameobject to get created with an AcademyFixedUpdateStepper component. There can easily be many of these objects in a scene. THEY ALL STEP THE ENVIRONMENT!!!.
It is easy to do this. For example I often test code by writing a context menu function like this:
&lt;denchmark-code&gt;_[ContextMenu("Do Some Validation")]
public void ValidateSomeStuff()
{
    ...
    Academy myAcademy = Academy.Instance;
    ...
}_
&lt;/denchmark-code&gt;

Every time I validate using the "ContextMenu" a new, hidden, AcademyFixedUpdateStepper gets created.
To Reproduce
Add this to a MonoBehaviour and fire it several times when not in Playmode. Each time it is fired a new AcademyFixedUpdateStepper is created:
&lt;denchmark-code&gt;_[ContextMenu("Do Some Validation")]
public void ValidateSomeStuff()
{
    Academy myAcademy = Academy.Instance;

    // Count the number of hidden Fixed Update Steppers
    Transform[] ts = (Transform[])Resources.FindObjectsOfTypeAll(typeof(Transform));
    int num = 0;
    foreach (var t in ts)
    {
        if (t.GetComponent&lt;AcademyFixedUpdateStepper&gt;() != null)
        {
            num++;
        }
    }

    Debug.Log("Found: " + num + " hidden fixed update steppers");
}_
&lt;/denchmark-code&gt;

Also add a static variable to Academy:
public static int numTimesEnvironmentStepIsStepped;
And increment this variable in "EnvironmentStep". Print it out in FixedUpdate.
Console logs / stack traces
Screenshots
Environment (please complete the following information):

Unity 2019.4
Windows 10
Release 6
1.7.1
Any environment

	</description>
	<comments>
		<comment id='1' author='Phong13' date='2020-09-28T19:00:46Z'>
		In your code, a new Academy instance is instantiate every time the function is called by saying Academy myAcademy = Academy.Instance;, and that's why you ended up having multiple Academy instances.
The Academy is initialized when the first time being accessed, so you should be able to call it directly instead of first creating your own . Please refer to &lt;denchmark-link:https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Learning-Environment-Design.md&gt;this doc&lt;/denchmark-link&gt;
 for example of accessing Academy.
		</comment>
		<comment id='2' author='Phong13' date='2020-09-28T22:48:59Z'>
		Hi dongruoping,
The problem is not "multiple Academy instances". There is actually only one Academy instance. I am not attempting to "Create my own instance". The posted code is there to show that "accessing Academy.Instance when not in a playmode leaks multiple GameObjects with AcadmeyFixedUpdateStepper" on them.
The problem is that the training scene accumulates multiple, hidden GameObjects with the "AcadmeyFixedUpdateStepper" component on them (when Academy.Instance is accessed not-in-playmode). These hidden gameobjects are saved when the scene is saved. When the scene is trained, the environment is stepped multiple times per environment-step. The scene becomes untrainable, corrupt. It is fairly easy to repair... if you know that these extra, hidden AcadmeyFixedUpdateStepper's have been serialized in the scene.
This bug is very serious because the training scene appears to be working correctly. There are no error messages in the Unity console or the Python console. Builds can be created. But the TensorBoard results are terrible and never improve no mater what you change.
IMO accessing (when not in playmode):
Academy.Instance
Should not leak GameObjects with the "AcadmeyFixedUpdateStepper". There were 11 AcadmeyFixedUpdateStepper's in my scene.
If you want to create your own simple test case do the following.

Open any of the example training scenes.
In Academy.cs comment out the line: m_StepperObject.hideFlags = HideFlags.HideInHierarchy;
Create a "ContextMenu" method that access the academy: Academy.Instance
Fire your method when not in playmode: watch the "AcademyFixedUpdateStepper" GameObjects accumulate
Save the scene and reopen it. See that these GameObjects are still there. Fire your method and make some more.
Try to train the scene and observe that the training never gets anywhere

		</comment>
		<comment id='3' author='Phong13' date='2020-09-29T01:56:06Z'>
		Thanks for more detailed explanation, and I was able to reproduce this following your steps. Thanks for reporting this.
This is being tracked internally as MLA-1410. We will try to get a fix out soon.
		</comment>
		<comment id='4' author='Phong13' date='2020-09-29T02:51:28Z'>
		Thanks :)
		</comment>
		<comment id='5' author='Phong13' date='2020-10-07T17:36:33Z'>
		This issue has been fixed in &lt;denchmark-link:https://github.com/Unity-Technologies/ml-agents/pull/4532&gt;#4532&lt;/denchmark-link&gt;
 . Thanks for reporting this!
		</comment>
	</comments>
</bug>