<bug id='4457' author='Godatplay' open_date='2020-09-05T12:57:11Z' closed_time='2020-09-18T06:06:46Z'>
	<summary>RenderTextureSensor exception at start of 2nd episode</summary>
	<description>
Describe the bug
I have a RenderTextureSensorComponent on my agent, and in that agent's Start, I assign a RenderTexture generated at runtime to that component. In the editor, I can see the field updated correctly at start. However, at the start of the 2nd episode, I get an UnassignedReferenceException.
To Reproduce
Steps to reproduce the behavior:

Create an Agent following the documentation.
Assign RenderTextureSensor to the agent
In the Agent subclass's Start, assign a RenderTexture generated at runtime to the sensor.
Wait for the 1st episode to finish

Console logs / stack traces
&lt;denchmark-code&gt;UnassignedReferenceException: The variable m_RenderTexture of RenderTextureSensorComponent has not been assigned.
You probably need to assign the m_RenderTexture variable of the RenderTextureSensorComponent script in the inspector.
Unity.MLAgents.Sensors.RenderTextureSensor.ObservationToTexture (UnityEngine.RenderTexture obsTexture) (at Library/PackageCache/com.unity.ml-agents@1.3.0-preview/Runtime/Sensors/RenderTextureSensor.cs:104)
Unity.MLAgents.Sensors.RenderTextureSensor.GetCompressedObservation () (at Library/PackageCache/com.unity.ml-agents@1.3.0-preview/Runtime/Sensors/RenderTextureSensor.cs:64)
Unity.MLAgents.Policies.HeuristicPolicy.StepSensors (System.Collections.Generic.List`1[T] sensors) (at Library/PackageCache/com.unity.ml-agents@1.3.0-preview/Runtime/Policies/HeuristicPolicy.cs:134)
Unity.MLAgents.Policies.HeuristicPolicy.RequestDecision (Unity.MLAgents.AgentInfo info, System.Collections.Generic.List`1[T] sensors) (at Library/PackageCache/com.unity.ml-agents@1.3.0-preview/Runtime/Policies/HeuristicPolicy.cs:35)
Unity.MLAgents.Agent.NotifyAgentDone (Unity.MLAgents.Agent+DoneReason doneReason) (at Library/PackageCache/com.unity.ml-agents@1.3.0-preview/Runtime/Agent.cs:492)
Unity.MLAgents.Agent.AgentStep () (at Library/PackageCache/com.unity.ml-agents@1.3.0-preview/Runtime/Agent.cs:1185)
Unity.MLAgents.Academy.EnvironmentStep () (at Library/PackageCache/com.unity.ml-agents@1.3.0-preview/Runtime/Academy.cs:539)
Unity.MLAgents.AcademyFixedUpdateStepper.FixedUpdate () (at Library/PackageCache/com.unity.ml-agents@1.3.0-preview/Runtime/Academy.cs:34)
&lt;/denchmark-code&gt;


No errors while in the first episode, RT assigned
&lt;denchmark-link:https://user-images.githubusercontent.com/198019/92305314-bcf54e00-ef4b-11ea-886e-07ff1aad2fd0.png&gt;&lt;/denchmark-link&gt;

Error thrown at the start of 2nd episode
&lt;denchmark-link:https://user-images.githubusercontent.com/198019/92305332-d39ba500-ef4b-11ea-89c8-be0492a4f4f1.png&gt;&lt;/denchmark-link&gt;

Environment (please complete the following information):

Unity Version: Unity 2019.4.8f1
OS + version: Windows 10
ML-Agents version: release 6 branch
TensorFlow version: 2.3.0
Environment: You can use this simple agent, which I used to repro the bug in 3DBall:

&lt;denchmark-code&gt;using UnityEngine;
using Unity.MLAgents;
using Unity.MLAgents.Sensors;

public class RTBugAgent : Agent
{
  public RenderTextureSensorComponent renderTextureSensorComponent;
  void Start ()
  {
    RenderTexture testRT = new RenderTexture(32, 32, 32);
    renderTextureSensorComponent.RenderTexture = testRT;
  }

  public override void OnEpisodeBegin ()
  {
  }

  public override void CollectObservations (VectorSensor sensor)
  {
  }

  public override void OnActionReceived (float[] vectorAction)
  {
  }
}
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Godatplay' date='2020-09-08T15:46:45Z'>
		Hi &lt;denchmark-link:https://github.com/Godatplay&gt;@Godatplay&lt;/denchmark-link&gt;
,
The RenderTextureSensorComponent creates the underlying Sensor during agent initialization and uses the reference that is set in the inspector.  It is not expected that you set the render texture at runtime.
		</comment>
		<comment id='2' author='Godatplay' date='2020-09-08T15:47:22Z'>
		can you give us more information on your use case and perhaps turn this into a request instead of a bug?  Runtime updating of the RenderTexture is not supported at this time.
		</comment>
		<comment id='3' author='Godatplay' date='2020-09-10T18:12:51Z'>
		Aww that's unfortunate, but thanks for the heads up. IMO the most common use case for a RenderTexture, at least for newer Unity workflows, is to create it at runtime. Otherwise why not tie it to a camera like the older workflow and use that component instead?
But more specifically, if one is building something dynamically at runtime, especially in the case of procedural generation, one would generate the RT at runtime.
In my case I have an art pipeline that occurs in stages, which I'm trying to make happen during runtime. So far I have a runtime baking system that resembles Blender's Eevee with soft shadows and near realtime AO baking.
The second stage is then regenerating the baked texture using other parts of Unity to kind of physically simulate parts of the regeneration, but without ML or even AI, it's just kind of randomness, but it at least occurs at runtime just fine. I also have a test project where I'm testing this regeneration using an evolutionary algorithm with Compute Shaders. It looks great, but it's way too slow.
I want to use ML to try to get the best of both worlds. The end result might be kinda like some of Artomatix's tools, but for stylized art instead of photoreal art.
Because I'm working at runtime, I'm naturally using RenderTextures, and therefore it seemed a safe assumption that I should be able to use the dedicated sensor for that.
[EDIT: elaborated for clarity]
		</comment>
		<comment id='4' author='Godatplay' date='2020-09-10T18:28:14Z'>
		I guess in a sense I'm trying to do something almost like style transfer, but more physically-simulated, and with more control than the existing style transfer solutions out there. It's exciting to see it all happening in realtime, at least time-sliced, but currently the generation is just not smart enough.
		</comment>
	</comments>
</bug>