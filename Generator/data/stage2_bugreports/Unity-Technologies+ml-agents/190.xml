<bug id='190' author='mdm373' open_date='2017-12-19T08:36:23Z' closed_time='2018-01-03T21:04:59Z'>
	<summary>Discrete Action Always Chosen Equal to Action Size</summary>
	<description>
I have a scene with a single brain training a single agent. The brain's action type is set to "discrete" and its size is 5. So I thought that when running external, I could expect integer actions ranging from 0-4.
However, I'm always seeing the agent step called with "5", the action size. If I lower it to 4, its always called with 4. I had another example with a smaller state working earlier, but after making some changes I'm hitting this issue. Any help would be awesome.
Inspector of Brain:
&lt;denchmark-link:https://user-images.githubusercontent.com/5975669/34147634-6a2350c4-e46c-11e7-985a-14216429e6fb.png&gt;&lt;/denchmark-link&gt;

Load Message:
&lt;denchmark-link:https://user-images.githubusercontent.com/5975669/34147642-6d7f05ec-e46c-11e7-94d0-cc386eabf313.png&gt;&lt;/denchmark-link&gt;

Log Output showing Action taken and Action Length:
&lt;denchmark-link:https://user-images.githubusercontent.com/5975669/34147646-6f044c06-e46c-11e7-834e-962b15d595c3.png&gt;&lt;/denchmark-link&gt;

Log Code:
&lt;denchmark-link:https://user-images.githubusercontent.com/5975669/34147914-60bc438c-e46d-11e7-8bfb-7d9c291f684b.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='mdm373' date='2017-12-19T10:52:22Z'>
		Hi &lt;denchmark-link:https://github.com/mdm373&gt;@mdm373&lt;/denchmark-link&gt;

if you use discrete actions, the chosen action is represented by the first element in act (i.e. act[0]).
Here is an example:
&lt;denchmark-code&gt;public override void AgentStep(float[] act)
    {
                int action = (int)act[0];
                if (action == 0)
                {
                    // Move Left
                    _rigidbody.velocity = new Vector3(-1 * _agentSpeed, 0, 0);
                }
                else if (action == 1)
                {
                    // Move Right
                    _rigidbody.velocity = new Vector3(1 * _agentSpeed, 0, 0);
                }
                else
                {
                    // Don't/Stop move
                    _rigidbody.velocity = Vector3.zero;
                }
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='mdm373' date='2017-12-19T15:59:15Z'>
		Hi &lt;denchmark-link:https://github.com/MarcoMeter&gt;@MarcoMeter&lt;/denchmark-link&gt;

Thanks for the reply. I am evaluating the 0th action in the provided float array. My issue is that the 0th action seems to always be chosen, in every agent step as equal to the size of the action state (in my case 5). I had everything working in a previous iteration of the project, but it seems like, if I up the state size to be larger than the action size, the chosen action is always 5.
		</comment>
		<comment id='3' author='mdm373' date='2017-12-19T18:02:46Z'>
		Hi &lt;denchmark-link:https://github.com/mdm373&gt;@mdm373&lt;/denchmark-link&gt;
,
This seems like some kind of bug. Your intuition is correct, that when the discrete action size is set to 5, it should only ever produce values ranging between 0 and 4. Does it happen on the example environments for you?
		</comment>
		<comment id='4' author='mdm373' date='2017-12-20T03:18:36Z'>
		Hey &lt;denchmark-link:https://github.com/awjuliani&gt;@awjuliani&lt;/denchmark-link&gt;
,
No I didn't have this issue in the examples I think I just figured this out.
For my new state fields, I I provided float.MaxValue (An indicator for "no hit" rather than distance). It seems like that was what was causing the problem. I updated the state logic to instead provide -1 for "no hit" and now everything is working as expected. I must have caused some kind of overflow issue in the unity to python communications but I didn't catch anything in any logs.
		</comment>
		<comment id='5' author='mdm373' date='2017-12-20T08:49:00Z'>
		&lt;denchmark-link:https://github.com/mdm373&gt;@mdm373&lt;/denchmark-link&gt;
 Make sure that you normalize all your inputs, so that they in the range -1 to +1 or 0 to +1.
This is one approach for normalization:
&lt;denchmark-link:https://user-images.githubusercontent.com/6996955/34198524-f5b43fa0-e56a-11e7-8b6e-55dc4f9bc434.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='mdm373' date='2017-12-20T15:49:17Z'>
		&lt;denchmark-link:https://github.com/MarcoMeter&gt;@MarcoMeter&lt;/denchmark-link&gt;
 I'll give that a shot as well, that should also help my ray cast "no hit" scenario since I could leave that as the upper limit of the normalized value.
		</comment>
		<comment id='7' author='mdm373' date='2019-01-22T13:53:33Z'>
		I'm having the same issue. out of range observation vectors are not the problem.. Ill test some things and get back to you if i figure it out.
		</comment>
		<comment id='8' author='mdm373' date='2019-01-22T14:00:35Z'>
		After some testing. This appears to be because my time_horizon setting in the yaml file was greater than the buffer_size
		</comment>
		<comment id='9' author='mdm373' date='2020-01-22T22:10:47Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>