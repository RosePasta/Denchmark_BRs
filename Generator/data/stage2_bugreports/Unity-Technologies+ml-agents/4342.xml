<bug id='4342' author='HPRIOR' open_date='2020-08-12T13:11:46Z' closed_time='2020-08-13T09:05:03Z'>
	<summary>RayLength does not correspond to Vector3 Distance</summary>
	<description>
I've been trying to get the locations of where a RayPerceptionSensor ray has hit by using the provided distance from, and the position of, the omitting object. However I have run into difficulties due to a disparity between the purported length of the ray cast (e.g. those given by RayLength and RayOutPuts), and actual distances in the unity engine.
To reproduce, set up a ray perception sensor and compare with an normal ray using the given distance:
&lt;denchmark-code&gt;// RayPerceptionSensorComponent3D with one ray 
raySensor = agent.GetComponent&lt;RayPerceptionSensorComponent3D&gt;

var rayOutputs = RayPerceptionSensor
                .Perceive(raySensor.GetRayPerceptionInput())
                .RayOutputs;

var lengthOfRayOutputs = RayPerceptionSensor
                .Perceive(raySensor.GetRayPerceptionInput())
                .RayOutputs
                .Length;

var rayBuffer = new float[(2 + 1) * lengthOfRayOutputs]]

rayOutputs[0].ToFloatArray(1, 0, rayBuffer);

var distanceAccordingToOutputs = rayBuffer[2]

// Set up Ray for comparison of length
Ray ray = new Ray(transform.position, transform.forward)

// assuming ray length given in RayPerceptionSensorComponent3D is the default of 20
// this is converted back to its un-normalised form with: 
var reversedNormalisedDistance = distanceAccordingToOutputs  * 20

Debug.DrawLine(transform.position, ray.GetPoint(reversedNormalisedDistance)

// Switching on the Gizmos will show the disparity between the purported
// length of the raycast and the one draw by the Ray
&lt;/denchmark-code&gt;

Here are some screenshots showing the disparity in length as the agent gets further away from the wall. The RayPerceptionSensor3D raycasts persistently hit the wall (not visible in the screen shots). But the Ray increases in length as the agent gets further away:
&lt;denchmark-link:https://user-images.githubusercontent.com/56833147/90018503-ed2b3300-dca4-11ea-91ca-54725e991d93.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/56833147/90018509-f0262380-dca4-11ea-95f3-0ca29d2e956c.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/56833147/90018521-f2887d80-dca4-11ea-92f2-c35f23536cd2.png&gt;&lt;/denchmark-link&gt;

As work around I have multiplied the given distance by 0.765 (as a rough guess), which gives me reasonably accurate correspondence between the two rays.
Unity Version: Unity 2019.4.0f1
OS + version: Windows 10
ML-Agents version:
ml-agents: 0.18.0,
ml-agents-envs: 0.18.0,
Communicator API: 1.0.0,
TensorFlow version: TensorFlow: 2.2.0
Environment: Custom environment
	</description>
	<comments>
		<comment id='1' author='HPRIOR' date='2020-08-12T19:07:36Z'>
		hi &lt;denchmark-link:https://github.com/HPRIOR&gt;@HPRIOR&lt;/denchmark-link&gt;
 - for the RayPerceptionSensor, we are using exposing Physics.Raycast (&lt;denchmark-link:https://docs.unity3d.com/ScriptReference/Physics.Raycast.html&gt;https://docs.unity3d.com/ScriptReference/Physics.Raycast.html&lt;/denchmark-link&gt;
).  It sounds like you are trying to compare with Ray (&lt;denchmark-link:https://docs.unity3d.com/ScriptReference/Ray.html&gt;https://docs.unity3d.com/ScriptReference/Ray.html&lt;/denchmark-link&gt;
)
It would then likely make sense the lengths don't necessarily match up.  we will take a closer look.
		</comment>
		<comment id='2' author='HPRIOR' date='2020-08-12T20:23:55Z'>
		I think the best way to get the hit location of the ray would be something like
&lt;denchmark-code&gt;var rayIndex = 0;
// Start and end location in world space
var extents = input.RayExtents(rayIndex);
var hitFraction = rayOutputs[rayIndex].HitFraction;
var hitPosition = Vector3.Lerp(extents.StartPositionWorld, extents.EndPositionWorld, hitFraction);
&lt;/denchmark-code&gt;

As for why the values aren't matching up:

Are you using a radius for the cast? The hit fraction value will put the "sphere" at the contact point, so that might be throwing the calculations off a bit.
Is there a non-1 scale on your Agent's transform? We use the ray length to determine the offset relative to the agent, then apply the transform, so if the scale is non-1, the actual ray length will be scaled. You can see the code for this here:



ml-agents/com.unity.ml-agents/Runtime/Sensors/RayPerceptionSensor.cs


        Lines 95 to 107
      in
      91465cd






 startPositionLocal = new Vector3(0, StartOffset, 0); 



 endPositionLocal = PolarToCartesian3D(RayLength, angle); 



 endPositionLocal.y += EndOffset; 



 } 



 else 



 { 



 // Vector2s here get converted to Vector3s (and back to Vector2s for casting) 



 startPositionLocal = new Vector2(); 



 endPositionLocal = PolarToCartesian2D(RayLength, angle); 



 } 



 



 var startPositionWorld = Transform.TransformPoint(startPositionLocal); 



 var endPositionWorld = Transform.TransformPoint(endPositionLocal); 





(This is my guess for the discrepancy)
Are you sure raySensor.GetRayPerceptionInput().RayLength is 20? Couldn't hurt to use that in your code instead of the hardcoded value.

		</comment>
		<comment id='3' author='HPRIOR' date='2020-08-12T20:40:28Z'>
		Just to clarify, but "non-1 scale", I mean any scale that's not (1, 1, 1) on the Agent's transform or any other transforms in the hierarchy.
		</comment>
		<comment id='4' author='HPRIOR' date='2020-08-13T09:05:03Z'>
		
2. Is there a non-1 scale on your Agent's transform? We use the ray length to determine the offset relative to the agent, then apply the transform, so if the scale is non-1, the actual ray length will be scaled.

I think you've found my problem. The agent's scale is 0.75 (0.75, 0.75, 0.75). I'll try your solution for getting the ray hit locations. Thanks for all the help.
		</comment>
	</comments>
</bug>