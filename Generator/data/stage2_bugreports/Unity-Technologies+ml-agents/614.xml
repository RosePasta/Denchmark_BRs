<bug id='614' author='fre' open_date='2018-04-11T17:44:24Z' closed_time='2018-05-17T21:30:53Z'>
	<summary>Visual observations for internal brain are not normalized properly</summary>
	<description>
Had an issue with my internal brain behaving differently than the external brain in inference mode when passed visual observations (a hand-generated 16x16 texture).
It seems that images received by environment.py are normalized to [0;1] (pixel values are divided by 255):



ml-agents/python/unityagents/environment.py


         Line 196
      in
      8365e2c






 s = np.array(image) / 255.0 





But the values extracted by CoreBrainInternal::BatchVisualObservations are not:



ml-agents/unity-environment/Assets/ML-Agents/Scripts/CoreBrainInternal.cs


         Line 528
      in
      8365e2c






 result[b, textures[b].height - h - 1, w, 0] = currentPixel.r; 





which leads to unpredictable agent behavior (since inputs are 255x bigger than expected).
This solves my issue:
&lt;denchmark-code&gt;{
    result[b, textures[b].height - h - 1, w, 0] = currentPixel.r / 255.0f;
    result[b, textures[b].height - h - 1, w, 1] = currentPixel.g / 255.0f;
    result[b, textures[b].height - h - 1, w, 2] = currentPixel.b / 255.0f;
}
else
{
    result[b, textures[b].height - h - 1, w, 0] = (currentPixel.r + currentPixel.g + currentPixel.b) / 3  / 255.0f;
}```
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='fre' date='2018-04-12T23:14:07Z'>
		Hi, ,  and  return floats between 0 and 1. &lt;denchmark-link:https://docs.unity3d.com/ScriptReference/Color-r.html&gt;Source here&lt;/denchmark-link&gt;
 We divide on python because we send the image as PNG instead of a Texture2D. Do you manage to have the gridworld working ? It surprises me that you get better results by dividing by 255. Could you compare the performance for gridworld?
		</comment>
		<comment id='2' author='fre' date='2018-04-13T06:22:45Z'>
		This code is using Color32, which returns values between 0 and 255.
I've only tested this on my own experimental project where I use visual observations to pass the state of the game (think chessboard state) rather than camera renders, so it may be much more sensitive to scaling than the example.
		</comment>
		<comment id='3' author='fre' date='2018-04-13T13:05:51Z'>
		So, is this a bug?
		</comment>
		<comment id='4' author='fre' date='2018-04-14T05:49:04Z'>
		I think you are right, this is a bug. I will try to get is fixed. Thank you for your help &lt;denchmark-link:https://github.com/fre&gt;@fre&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='5' author='fre' date='2018-04-14T08:13:51Z'>
		AFAIK, this bug only affects internal brains, i.e. importing the trained
agent in unity.

Training a gridworld-type task works fine for me. FYI I generate a 16x16
board representation centered on the agent where each type of entity is
rendered on a different channel (R,G,B) of the output texture and only use
a single 3x3 convolution layer with 256 filters and stride 1 before a
single fully connected layer of size 128.

Slowing down the time scale during training (adding UI buttons for that is
helpful) shows that the agent learns properly. It's only when I import the
trained model in unity that the internal brain behaves differently (without
this normalization fix).
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Sat, Apr 14, 2018, 9:46 AM Marco Pleines ***@***.***&gt; wrote:
 I'm wondering if this is why I could not get anything environment working,
 which relies on visuals only. (#198
 &lt;#198&gt;)

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 &lt;#614 (comment)&gt;,
 or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/AAFakKdl9TGPHGSqsYZmN_zuTAJGJzlxks5toalwgaJpZM4TQdn3&gt;
 .



		</comment>
		<comment id='6' author='fre' date='2018-04-14T17:09:35Z'>
		Thank you very much fre for this fix.  I applied fre's code above and it fixed a very nagging problem I have been having.  Now my app work just as well in Internal mode!
		</comment>
		<comment id='7' author='fre' date='2018-05-17T21:30:53Z'>
		Hi &lt;denchmark-link:https://github.com/fre&gt;@fre&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/RossMelbourne&gt;@RossMelbourne&lt;/denchmark-link&gt;
, we are closing this issue due to inactivity, feel free to open it if you need more help on this, hopefully Vince's fix solves your issue.
		</comment>
		<comment id='8' author='fre' date='2020-01-03T10:20:04Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>