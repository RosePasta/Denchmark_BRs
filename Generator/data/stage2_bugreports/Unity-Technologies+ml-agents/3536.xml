<bug id='3536' author='BlueFisher' open_date='2020-02-29T12:59:06Z' closed_time='2020-03-12T01:22:42Z'>
	<summary>Ray Gizmos is not available in Heuristic mode</summary>
	<description>
The Gizmos of RayPerceptionSensorComponent is not available in Heuristic mode.
When the NN model is None and I click the play button, ML-Agents will get into the Heuristic mode. But I find the RayPerceptionSensor will not work. Specifically the int Write(WriteAdapter adapater); in ISensor will never be called, thus the m_RaySensor.debugDisplayInfo.rayInfos will always be Null.
BTW, I sometimes need m_RaySensor to draw rays with LineRender. Could you just make the m_RaySensor in RayPerceptionSensorComponentBase be protecetd.

ML-Agents version: v0.14.0

	</description>
	<comments>
		<comment id='1' author='BlueFisher' date='2020-03-03T17:38:45Z'>
		Hi &lt;denchmark-link:https://github.com/BlueFisher&gt;@BlueFisher&lt;/denchmark-link&gt;
,
The gizmo problem has already been reported (&lt;denchmark-link:https://github.com/Unity-Technologies/ml-agents/issues/3412&gt;#3412&lt;/denchmark-link&gt;
), plus there were some other requests to draw the gizmos outside of play mode. This was resolved in &lt;denchmark-link:https://github.com/Unity-Technologies/ml-agents/pull/3484&gt;#3484&lt;/denchmark-link&gt;
. If you want a "smaller" workaround, &lt;denchmark-link:https://github.com/Unity-Technologies/ml-agents/pull/3542&gt;#3542&lt;/denchmark-link&gt;
 (just merged) will step the sensors in Heuristic mode, which should also be enough to get the gizmos drawing.
I'll look into making the sensor more accessible - would a public get property be enough instead of making it protected?
		</comment>
		<comment id='2' author='BlueFisher' date='2020-03-03T17:40:51Z'>
		BTW, I'm curious what you're doing for the line rendering. Are you using &lt;denchmark-link:https://docs.unity3d.com/Manual/class-LineRenderer.html&gt;https://docs.unity3d.com/Manual/class-LineRenderer.html&lt;/denchmark-link&gt;
 or something else?
		</comment>
		<comment id='3' author='BlueFisher' date='2020-03-04T01:24:00Z'>
		Hi &lt;denchmark-link:https://github.com/chriselion&gt;@chriselion&lt;/denchmark-link&gt;
 ,
Thanks for your reply. The Gizmos only shows in the "scene" window of Unity editor but not in the "game" window or in executables. I sometimes need to record the inference process and want to visualize all the rays. So LineRenderer might help me achieve this.
Actually, it would be great if you guys decide to integrate this kind of visualization into RayPerceptionSensorComponent. Otherwise, I can implement a simple visualization by myself if I can access to the some properties of RayPerceptionSensorComponentBase like m_RaySensor.
		</comment>
		<comment id='4' author='BlueFisher' date='2020-03-11T02:44:27Z'>
		Sorry, I forgot to update:
There's now a get property for the RayPerceptionSensor:



ml-agents/com.unity.ml-agents/Runtime/Sensors/RayPerceptionSensorComponentBase.cs


        Lines 147 to 150
      in
      97e4fea






 public RayPerceptionSensor raySensor 



 { 



 get =&gt; m_RaySensor; 



 } 





and I made the method for getting the RayPerceptionInput public:



ml-agents/com.unity.ml-agents/Runtime/Sensors/RayPerceptionSensorComponentBase.cs


        Lines 238 to 254
      in
      97e4fea






 public RayPerceptionInput GetRayPerceptionInput() 



 { 



 var rayAngles = GetRayAngles(raysPerDirection, maxRayDegrees); 



 



 var rayPerceptionInput = new RayPerceptionInput(); 



 rayPerceptionInput.rayLength = rayLength; 



 rayPerceptionInput.detectableTags = detectableTags; 



 rayPerceptionInput.angles = rayAngles; 



 rayPerceptionInput.startOffset = GetStartVerticalOffset(); 



 rayPerceptionInput.endOffset = GetEndVerticalOffset(); 



 rayPerceptionInput.castRadius = sphereCastRadius; 



 rayPerceptionInput.transform = transform; 



 rayPerceptionInput.castType = GetCastType(); 



 rayPerceptionInput.layerMask = rayLayerMask; 



 



 return rayPerceptionInput; 



 } 





Hopefully that should have you covered.
I'm not sure what other packages like ours do for visualization; do you have any other good examples of "in-game" visualization?
		</comment>
		<comment id='5' author='BlueFisher' date='2020-03-11T03:07:21Z'>
		Hi &lt;denchmark-link:https://github.com/chriselion&gt;@chriselion&lt;/denchmark-link&gt;
, Thank you so much.
As for "in-game" visualization, I am so sorry that I'm new to Unity. All I know is the simple LineRenderer. Sorry that I can't give you a good recommendation.
		</comment>
		<comment id='6' author='BlueFisher' date='2020-03-11T21:37:20Z'>
		OK, in that case I don't think we'll plan on adding that as a feature; in general, I think we should provide debug visualization via gizmos, but shouldn't draw anything in the "game'.
		</comment>
	</comments>
</bug>