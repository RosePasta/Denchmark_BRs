<bug id='4062' author='dlindmark' open_date='2020-06-03T16:43:58Z' closed_time='2020-06-04T06:20:57Z'>
	<summary>Update steps out of sync when resuming a sac training.</summary>
	<description>
Describe the bug
When you resume a sac training SACTrainer.step is initialized to the loaded policy step, self.step = policy.get_current_step(). But the SACTrainer.update_steps is initialized to buffer_init_steps. This means that the loop in SACTrainer._update_sac_policy() will run until catching up. As I understand that means that we update the policy using the loaded experience buffer until we catch up with SACTrainer.step.
And by then the environment have stepped many new steps. Meaning that the next time we enter this function we are still very far behind.
We discovered this when our unity application started to freeze during training, after resuming an old training. It seems like that when the environment gets to far ahead of updating the policy it waits for ml-agents to keep up. And then the application starts again.
I guess the same thing could happen if your environment is much faster then ml-agents.
I think that if you add
self.update_steps = policy.get_current_step()
in SACTrainer.add_policy() the problem is fixed.
To Reproduce
Steps to reproduce the behavior:

Resume old sac training session with the --debug flag.
See that the logger.debug("Updating SAC policy at step {}".format(self.step)) starts writing without pause for a very long time. Without  self.step ever changing.

Environment (please complete the following information):

Unity Version: Unity 2019.3.7.f1
OS + version: Windows 10
ML-Agents version: Version: 0.16.0
TensorFlow version: Version: 1.15.0
Environment: custom environment.

	</description>
	<comments>
		<comment id='1' author='dlindmark' date='2020-06-03T17:57:12Z'>
		Hi &lt;denchmark-link:https://github.com/dlindmark&gt;@dlindmark&lt;/denchmark-link&gt;
, you're absolutely right, this is a known bug. It has been fixed on : &lt;denchmark-link:https://github.com/Unity-Technologies/ml-agents/pull/4038&gt;#4038&lt;/denchmark-link&gt;
 and will be fixed in the next release.
Your fix is also correct. Technically you should add  and do the same for .
		</comment>
		<comment id='2' author='dlindmark' date='2020-06-04T06:20:57Z'>
		Check. We fix that locally then and wait for the next release.
Thank you!
		</comment>
	</comments>
</bug>