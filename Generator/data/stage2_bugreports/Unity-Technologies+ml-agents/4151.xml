<bug id='4151' author='autoli' open_date='2020-06-23T02:58:26Z' closed_time='2020-06-24T17:21:47Z'>
	<summary>RayPerceptionSensor2D don't work</summary>
	<description>
Describe the bug
When I add the RayPerceptionSensor2D component to an agent, it report an error as follows:
NullReferenceException: Object reference not set to an instance of an object.
and then I add the tag items except the agent to clear the error, but the ray can not be seen as if it detect itself, the cast sphere can only be seen inside agent.
I print the ray information and find out the rayInfo.rayOutput.HitFraction is always zero whatever I change the sensor settings. I change the HitFraction for a try, the ray can be seen actually but it can't detect anything.  All rays are hit at the end of ray length.
However, I add the RayPerceptionSensor3D for a simple test, it seems true and the ray can be seen clearly witout the error above.
Environment:

Unity Version:  Unity 2019.3.14f1
OS + version:   Windows 10
ML-Agents version:  v2.0
MLagent Package: 1.0.2

	</description>
	<comments>
		<comment id='1' author='autoli' date='2020-06-23T03:31:05Z'>
		Could you please provide the full callstack from the NullReferenceException? I can't reproduce the error.
2D raycasts behave differently than 3D ones by default - they will "hit" objects that they start in. You can change this behavior in Project Settings &gt; Physics 2D &gt; Queries Start In Colliders. If that's too big of a change for your project, you can change the start position of the rays by adding another GameObject parented to the Agent's GameObject, adding the RayPerceptionSensorComponent2D to that, and adjusting it's transform (and make sure the Use Child Sensors checkbox is checked in the Agent component in the Inspector).
		</comment>
		<comment id='2' author='autoli' date='2020-06-23T04:47:30Z'>
		Thanks a lot ! The problem seems to be solved by changing Project Settings &gt; Physics 2D &gt; Queries Start In Colliders. The rays can normally hit the other objects. But when I add RayPerceptionSensor2D component, the error is still reported. It is like the detectable tag is null when added although it doesn't matter.
the error is:
NullReferenceException: Object reference not set to an instance of an object
Unity.MLAgents.Sensors.RayPerceptionSensor.PerceiveSingleRay (Unity.MLAgents.Sensors.RayPerceptionInput input, System.Int32 rayIndex, Unity.MLAgents.Sensors.DebugDisplayInfo+RayInfo&amp; debugRayOut) (at E:/important data/ml-agents-release_2/ml-agents-release_2/com.unity.ml-agents/Runtime/Sensors/RayPerceptionSensor.cs:465)
Unity.MLAgents.Sensors.RayPerceptionSensorComponentBase.OnDrawGizmosSelected () (at E:/important data/ml-agents-release_2/ml-agents-release_2/com.unity.ml-agents/Runtime/Sensors/RayPerceptionSensorComponentBase.cs:287)
UnityEngine.GUIUtility:ProcessEvent(Int32, IntPtr)
The next error is also reported when I am typing the tag name.
Tag: Ite is not defined.
UnityEngine.GameObject:CompareTag(String)
Unity.MLAgents.Sensors.RayPerceptionSensor:PerceiveSingleRay(RayPerceptionInput, Int32, RayInfo&amp;) (at E:/important data/ml-agents-release_2/ml-agents-release_2/com.unity.ml-agents/Runtime/Sensors/RayPerceptionSensor.cs:467)
Unity.MLAgents.Sensors.RayPerceptionSensorComponentBase:OnDrawGizmosSelected() (at E:/important data/ml-agents-release_2/ml-agents-release_2/com.unity.ml-agents/Runtime/Sensors/RayPerceptionSensorComponentBase.cs:287)
UnityEngine.GUIUtility:ProcessEvent(Int32, IntPtr)
The above errors can be cleared when I finish the tag add.
		</comment>
		<comment id='3' author='autoli' date='2020-06-23T18:49:32Z'>
		Thanks for the callstacks, I think I see the problems now (and I can reproduce them with the 3D Raycasts in our examples).
The internal tracker IDs for these are MLA-1106 and MLA-1109.
		</comment>
		<comment id='4' author='autoli' date='2020-06-24T01:30:12Z'>
		PR to fix the exceptions are here: &lt;denchmark-link:https://github.com/Unity-Technologies/ml-agents/pull/4155&gt;#4155&lt;/denchmark-link&gt;
 (unfortunately I don't think we can easily prevent the "is not defined" messages from spamming the console).
		</comment>
		<comment id='5' author='autoli' date='2020-06-24T03:23:54Z'>
		Thanks for your reply!  The  "is not defined" can be cleared manually in the console which .
Can I ask for another help-wanted? Can the mlagent be trained  correctly when I change the timescale in Unity for an acceleration? Because I use the ML to 2D game  which contains too much trigger and initialization by scripts. As a layman, it's hard for me to modify the scripts to use multiple training areas within the same scene or launch scenes asynchronously by dragging. So it trains slowly and I try for increasing timescale that really makes the game speed up. it seems that I have to change the decision request period. I don't know clearly whether this method can work! Maybe I have to change some setting about the ML or there exsits other methods for this situation.  Thanks again for your patience!
		</comment>
		<comment id='6' author='autoli' date='2020-06-24T16:58:53Z'>
		Can you please post on the Unity forum (&lt;denchmark-link:https://forum.unity.com/forums/ml-agents.453/&gt;https://forum.unity.com/forums/ml-agents.453/&lt;/denchmark-link&gt;
) for the other question?
		</comment>
	</comments>
</bug>