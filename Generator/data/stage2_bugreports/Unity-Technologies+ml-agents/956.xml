<bug id='956' author='cyrilibrahim' open_date='2018-07-03T20:23:23Z' closed_time='2018-07-24T18:38:59Z'>
	<summary>Can't open multiple environments since v 0.4</summary>
	<description>
Hi, I built an environment in Unity ML Agent v 0.3 and I already trained agents with a model that requires to run multiple environments in parallel. But since I've upgrade version to v 0.4 the communication stops working for multiple environment, I'm just able to open one environment and start the training but as long as I open a new one (with different worker_id and seed) everything crashes. Here's the error that I got:
ERROR:root:Exception calling application: Ran out of input Traceback (most recent call last): File "/home/cyrili/anaconda3/lib/python3.6/site-packages/grpc/_server.py", line 385, in _call_behavior return behavior(argument, context), True File "/home/cyrili/anaconda3/lib/python3.6/site-packages/unityagents/rpc_communicator.py", line 26, in Exchange return self.child_conn.recv() File "/home/cyrili/anaconda3/lib/python3.6/multiprocessing/connection.py", line 251, in recv return _ForkingPickler.loads(buf.getbuffer()) EOFError: Ran out of input
It seems that the problem comes from the rpc_communicator. Do you have an idea of what could have gone wrong ?
Thanks !
	</description>
	<comments>
		<comment id='1' author='cyrilibrahim' date='2018-07-17T06:11:11Z'>
		This looks to be related to the bug: &lt;denchmark-link:https://github.com/Unity-Technologies/ml-agents/blob/master/python/unityagents/rpc_communicator.py#L18&gt;https://github.com/Unity-Technologies/ml-agents/blob/master/python/unityagents/rpc_communicator.py#L18&lt;/denchmark-link&gt;

In addition I was seeing issues with using a unity environment, then launching a multiprocessing subprocess, but this seems to be a grpc limitation: &lt;denchmark-link:https://github.com/grpc/grpc/blob/master/doc/fork_support.md&gt;https://github.com/grpc/grpc/blob/master/doc/fork_support.md&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='cyrilibrahim' date='2018-07-17T06:13:44Z'>
		from unityagents import UnityEnvironment


def run_env():
    env = UnityEnvironment(file_name='builds/Basic')
    env.reset()
    env.close()

# this should fail with 0.4
run_env()
run_env()
		</comment>
		<comment id='3' author='cyrilibrahim' date='2018-07-24T00:01:16Z'>
		&lt;denchmark-link:https://github.com/cyrilibrahim&gt;@cyrilibrahim&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/christopherhesse&gt;@christopherhesse&lt;/denchmark-link&gt;

Thanks for brining this issue up. I can confirm that this is unfortunately the case that the current way we are using gRPC doesn't work will python multi-processing. We will be looking into a workaround for this, since many use-cases would benefit from it.
		</comment>
		<comment id='4' author='cyrilibrahim' date='2018-07-24T02:14:49Z'>
		Actually, I think the gRPC is a separate issue.  If I fix rpc_communicator.py to not use globals, it fixes the above mentioned issue and seems to work fine with threads.  If I use multiprocessing, this also seems to work fine.  If I use multiprocessing but instantiate an environment before fork() is called, it breaks, and that is probably a gRPC issue.
		</comment>
		<comment id='5' author='cyrilibrahim' date='2018-07-24T18:38:59Z'>
		&lt;denchmark-link:https://github.com/christopherhesse&gt;@christopherhesse&lt;/denchmark-link&gt;

Right you are. We just made a fix for this in the v0.4.0b branch, which we will be merging into master soon. Thanks again for brining it to out attention.
&lt;denchmark-link:https://github.com/Unity-Technologies/ml-agents/tree/hotfix-0.4b&gt;https://github.com/Unity-Technologies/ml-agents/tree/hotfix-0.4b&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='cyrilibrahim' date='2018-07-25T00:56:58Z'>
		Thanks!
		</comment>
		<comment id='7' author='cyrilibrahim' date='2020-01-03T06:07:41Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>