<bug id='3024' author='devedse' open_date='2019-12-04T09:28:28Z' closed_time='2020-04-02T21:03:07Z'>
	<summary>Fatal Error: Could not allocate memory</summary>
	<description>
Describe the bug
Hi all, I've created a quite simple racing game where an agent learns to drive on a track:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/70129673-7eaac580-167f-11ea-83cf-f164932dc019.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/70129815-b9146280-167f-11ea-84d9-36d1513f242b.png&gt;&lt;/denchmark-link&gt;

The agent has the following Agent code:
&lt;denchmark-code&gt;public class RaceGameAgent : Agent
{
    public RoadDetectorScript RoadDetector;
    public ArcadeCar ArcadeCar;
    public RaceTrackScript RaceTrackScript;

    public Vector3 startPos;

    public int FrameCountSinceReset = 0;

    public void Start()
    {
        startPos = ArcadeCar.transform.position;
    }

    public override void AgentAction(float[] vectorAction, string textAction, CustomActionProto customAction)
    {
        ArcadeCar.AIXAxisInput = vectorAction[0];
        ArcadeCar.AIYAxisInput = vectorAction[1];
        ArcadeCar.AIHandBrakeInput = vectorAction[2] &gt; 0.5f;


        //For some reason it resets twice, I think it's due to Resetting not creating gameobjects in the same fixedupdate
        if (FrameCountSinceReset &gt; 1)
        {
            if (RoadDetector.CountWheelsOnRoad == 0)
            {
                Done();
                SetReward(-1f);
            }
            else
            {
                if (RoadDetector.CountWheelsOffRoad == 0)
                {
                    SetReward((ArcadeCar.GetSpeed() * 3.6f - 10.0f) / 200.0f);
                }
                else
                {
                    SetReward(RoadDetector.CountWheelsOffRoad * -0.1f);
                }
            }

            if (GetCumulativeReward() &lt; -100f)
            {
                Done();
            }
        }

        FrameCountSinceReset++;
    }

    public override void AgentAction(float[] vectorAction, string textAction)
    {

    }

    public override void CollectObservations()
    {
        this.AddVectorObs(gameObject.transform.rotation);
        this.AddVectorObs(ArcadeCar.transform.GetComponent&lt;Rigidbody&gt;().velocity);
        this.AddVectorObs(ArcadeCar.GetSpeed());

        var tracers = gameObject.GetComponentsInChildren&lt;TracerScript&gt;();
        foreach (var tracer in tracers)
        {
            this.AddVectorObs(tracer.CastRay());
        }

        this.AddVectorObs(RoadDetector.WheelLFIsRoad);
        this.AddVectorObs(RoadDetector.WheelRFIsRoad);
        this.AddVectorObs(RoadDetector.WheelLBIsRoad);
        this.AddVectorObs(RoadDetector.WheelRBIsRoad);

        this.AddVectorObs(RoadDetector.CountWheelsOnRoad);
        this.AddVectorObs(RoadDetector.CountWheelsOffRoad);

        base.CollectObservations();
    }

    public override void AgentReset()
    {
        ArcadeCar.Reset(startPos, 180);
        RaceTrackScript.Reset();
        FrameCountSinceReset = 0;
    }
}
&lt;/denchmark-code&gt;

During the training process you can see the memory usage of Unity.exe slowly increasing, after about a night of training I checked and saw that the memory usage capped out on 32gb.
After about 10 minutes it dropped again to 16gb (I would assume due to the garbage collector running.
After about 2 days of training I ran into the following issue:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/70130119-4657b700-1680-11ea-90b2-a1aab4e7f14d.png&gt;&lt;/denchmark-link&gt;

I'm not exactly sure where to start when solving this issue so hopefully someone here could give some advice. Could it be due to a memory leak in ml-agents or does no one else see this problem?
I did also replace the memory (previously I had 16gb and now I moved to new sticks for a total of 32gb) but that did also not solve the issue.
To Reproduce
See above
Console logs / stack traces
Only logging I have is the screenshot above
Screenshots
See above
Environment (please complete the following information):

OS + version: Windows 10 (Fresh install)
ML-Agents version: https://github.com/devedse/ml-agents (should be version 0.11)
TensorFlow version: 1.7.1
Environment: N/A for now due to difficulty in reproducing this issue, I'll see what I can do

	</description>
	<comments>
		<comment id='1' author='devedse' date='2019-12-04T20:40:12Z'>
		Hi &lt;denchmark-link:https://github.com/devedse&gt;@devedse&lt;/denchmark-link&gt;
,
Just a quick look at your screen shots, it seems like the allocation is happening in your code.  Are you sure that there isn't a memory leak in your ?
Could you share your project with us?  Without an in depth view into your code, it will be hard to know what's going on.  You can always install the &lt;denchmark-link:https://docs.unity3d.com/Packages/com.unity.memoryprofiler@0.1/manual/index.html&gt;Unity Memory profiler&lt;/denchmark-link&gt;
 from the package manager to see what type of objects are leaking.
		</comment>
		<comment id='2' author='devedse' date='2019-12-04T23:26:55Z'>
		I'll do some investigation with the memory profiler tomorrow first. Would it be possible to share a private repository?
		</comment>
		<comment id='3' author='devedse' date='2019-12-04T23:52:48Z'>
		You could add me as a collaborator and remove me whenever you feel.
		</comment>
		<comment id='4' author='devedse' date='2019-12-05T10:00:50Z'>
		I've been running the memory profiler.
Screenshot of memory usage just after start:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/70224318-5e493c80-174d-11ea-80a5-5c8b153574ba.png&gt;&lt;/denchmark-link&gt;

Screenshot of memory usage afte 5 minutes of running:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/70224342-66a17780-174d-11ea-8359-6205ec27dca3.png&gt;&lt;/denchmark-link&gt;

And the diff:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/70224459-98b2d980-174d-11ea-88dc-d0eb7f4fd8bd.png&gt;&lt;/denchmark-link&gt;

I've also created a private repository which I will add you to. To actually start training I'm currently using the TrainRace.cmd script from our fork of ml-agents:
&lt;denchmark-link:https://github.com/devedse/ml-agents/blob/master/TrainRace.cmd&gt;https://github.com/devedse/ml-agents/blob/master/TrainRace.cmd&lt;/denchmark-link&gt;

You'll receive an invite for the other private repository shortly ðŸ˜„
		</comment>
		<comment id='5' author='devedse' date='2019-12-05T10:44:45Z'>
		When digging through the Memory Profile I see a lot of arrays with empty values, e.g.:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/70228391-9607b280-1754-11ea-84f0-1306213c7acb.png&gt;&lt;/denchmark-link&gt;

The same happens with arrays for UINT64 and String. Loads of 0 values or null values.
		</comment>
		<comment id='6' author='devedse' date='2019-12-05T17:19:34Z'>
		I got the invite.  I'll see if I can take some time today to run a profiling trace myself.  We haven't seen any memory leaks with our nightly training sessions. But maybe you are hitting a case that we haven't covered.  Thanks for your cooperation and help debugging this.
		</comment>
		<comment id='7' author='devedse' date='2019-12-05T17:20:51Z'>
		Are you by chance using visual observations?
		</comment>
		<comment id='8' author='devedse' date='2019-12-05T17:34:34Z'>
		Hey, that's great thanks. It could very well be some misunderstanding for me about how specific things in Unity work but let's see.
I don't use visual observations yet. The inputs of the ml agent are a bunch of Ray traces that input booleans wether they hit the road or hit the grass.
		</comment>
		<comment id='9' author='devedse' date='2019-12-05T17:40:30Z'>
		Hey &lt;denchmark-link:https://github.com/devedse&gt;@devedse&lt;/denchmark-link&gt;
,
I was able to reproduce the leak without training.  I'm just running the RaceGameScene and seeing large buffers of  and .  I'm still not sure if it's coming from ML-Agents or not.  I will dig a bit further.
		</comment>
		<comment id='10' author='devedse' date='2019-12-05T17:45:36Z'>
		So the large amount of INT64, String, and Byte[] seems to be coming from the profiler itself, which is unfortunate noise.  I'll keep digging...
		</comment>
		<comment id='11' author='devedse' date='2019-12-05T17:52:56Z'>
		I do, however, see your material memory growing significantly.  It grew from around 20MB from about 1 minute after the start to about 70MB 10 minutes later.
Here is a screen shot of a small portion of the Material memory.
&lt;denchmark-link:https://user-images.githubusercontent.com/1356616/70260317-deb76f80-1744-11ea-81bc-408d3d0b7868.png&gt;&lt;/denchmark-link&gt;

Please see make sure you are correctly disposing of materials that are no longer being used, or ensure to mark them as shared if you are going to reuse them.  I would guess that this could be a leak from the random generation of your track, but I'm not sure.
I hope this helps.
		</comment>
		<comment id='12' author='devedse' date='2019-12-05T18:01:06Z'>
		Related forum thread about disposing of materials
&lt;denchmark-link:https://forum.unity.com/threads/unityengine-material-object-memory-leak.48623/&gt;https://forum.unity.com/threads/unityengine-material-object-memory-leak.48623/&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='devedse' date='2019-12-05T18:01:46Z'>
		Since the materials have the (Instance) tag, it tells me you need to dispose of them manually.  This should solve your memory leak.
		</comment>
		<comment id='14' author='devedse' date='2019-12-06T10:14:25Z'>
		&lt;denchmark-link:https://github.com/surfnerd&gt;@surfnerd&lt;/denchmark-link&gt;
 , thanks for this, I'm sorry for the confusion around this.
I couldn't find a way to Dispose a material.
What I'll try is actually setting the meshRenderer.sharedMaterial instead of the meshRenderer.material. I'm not sure if this will solve the issue as well? (The only thing I could find on google was that sharedMaterial returns the actual reference whereas .material returns a copy for this specific object. But it doesn't state anything about setting it).
So for now I'll implement this patch:
Old
&lt;denchmark-code&gt;renderer.material = foundPiece.Mat;
&lt;/denchmark-code&gt;

New
&lt;denchmark-code&gt;renderer.sharedMaterial = foundPiece.Mat;
&lt;/denchmark-code&gt;

Another question I have is, do I also need to do something similar for the MiniMap? I'm using the following code to update the images there:
&lt;denchmark-code&gt;var img = ga.GetComponent&lt;Image&gt;();
img.sprite = foundPiece.Sprite;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='15' author='devedse' date='2019-12-06T14:17:18Z'>
		I'm currently retraining the application and it seems to have not really been resolved as the memory usage of Unity is now at around 7gb.
Could it be that simply setting .sharedMaterial isn't good enough?
If that's the case, is there another solution or should I Dispose the materials themselves somehow? (Should this be done by doing something like Destroy(ga.GetComponent&lt;MeshRenderer&gt;().material))
		</comment>
		<comment id='16' author='devedse' date='2019-12-06T15:40:52Z'>
		Yes, using the sharedMaterial property may or may not be appropriate for what you are doing.  You will need to destroy any material clones that youâ€™ve created using the Destroy function as you stated.
		</comment>
		<comment id='17' author='devedse' date='2019-12-17T09:45:23Z'>
		&lt;denchmark-link:https://github.com/surfnerd&gt;@surfnerd&lt;/denchmark-link&gt;
 , Hi, had a bit of a busy period so sorry for the delay in updates. Yesterday I made a &lt;denchmark-link:https://github.com/devedse/DS-MLUnityPrivate/commit/e83afb2a870f4b7762ba588c58fdad86a3880ba4&gt;fix to the code&lt;/denchmark-link&gt;
 to now destroy materials on recreation of the map. I'm not sure if this has fixed the issue though because after one night of training I'm using about 8gb of memory again:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/70984267-72c8f580-20ba-11ea-877b-996841efdbcd.png&gt;&lt;/denchmark-link&gt;

Whether this has fixed the issue is to be seen. I'll keep the training running for a few days and will inform you on the progress.
All commits I made:
&lt;denchmark-link:https://github.com/devedse/DS-MLUnityPrivate/commits/master&gt;https://github.com/devedse/DS-MLUnityPrivate/commits/master&lt;/denchmark-link&gt;

		</comment>
		<comment id='18' author='devedse' date='2019-12-18T19:20:16Z'>
		Thanks for the update.  Can you also take a memory snapshot with the Memory profiler?  I'd like to see what is taking up so much memory.
		</comment>
		<comment id='19' author='devedse' date='2019-12-19T10:05:34Z'>
		&lt;denchmark-link:https://github.com/surfnerd&gt;@surfnerd&lt;/denchmark-link&gt;
 , I just took a screenshot when Unity was using ~20gb of memory. When I then opened this snapshot the Unity memory usage spiked to ~27gb so that's why in the screenshot below the memory usage is higher.
Anyway, the snapshot:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/71164469-6de97a80-224f-11ea-8195-d575063bf813.png&gt;&lt;/denchmark-link&gt;

And a screenshot of the whole Table sorted by reference count:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/71165475-2d8afc00-2251-11ea-8fce-5b4b7de65435.png&gt;&lt;/denchmark-link&gt;

It seems there's a few gigabytes here and there in for example shaders.
And Task Manager:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/71164485-780b7900-224f-11ea-993a-7f389e1d1366.png&gt;&lt;/denchmark-link&gt;

Is there anything else you would like to see in this Snapshot?
		</comment>
		<comment id='20' author='devedse' date='2019-12-19T18:49:03Z'>
		Hmm, this is pretty weird.  The amount of total memory in the snapshot is definitely less than ~20GB.  It's more on the scale of around 200-300MB.  I'll take a look at the project again and see if I can find anything else.
		</comment>
		<comment id='21' author='devedse' date='2019-12-20T09:21:29Z'>
		I did a bit of scrolling through the snapshot as well and think it might be a bit higher then 200-300MB due to there being quite a lot of instances for some specific 1MB objects. For example there's 935 instances of Texture2D.
However I also agree that this doesn't seem to add up to 20gb.
This morning however I checked again and saw the memory usage dropped to 14GB:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/71244262-68a13400-2312-11ea-8d2f-0aec8a117988.png&gt;&lt;/denchmark-link&gt;

It could possibly just be an artifact of the Garbage collector not running that often, but I'm not really sure.
		</comment>
		<comment id='22' author='devedse' date='2019-12-20T09:25:11Z'>
		Another thing I saw was that the time between snapshots also gradually increases.
At the fist few snapshots I see there's a difference of about 50 seconds per 1000 steps.
At the end this duration has increased to about 220 seconds:
&lt;denchmark-code&gt;INFO:mlagents.trainers: race_7: RaceGameLearningBrain: Step: 1000. Time Elapsed: 52.796 s Mean Reward: -38.610. Std of Reward: 17.850. Training.
INFO:mlagents.trainers: race_7: RaceGameLearningBrain: Step: 2000. Time Elapsed: 102.428 s Mean Reward: -34.189. Std of Reward: 20.628. Training.
INFO:mlagents.trainers: race_7: RaceGameLearningBrain: Step: 3000. Time Elapsed: 152.381 s Mean Reward: -23.578. Std of Reward: 20.009. Training.
INFO:mlagents.trainers: race_7: RaceGameLearningBrain: Step: 4000. Time Elapsed: 206.723 s Mean Reward: -15.534. Std of Reward: 16.491. Training.
INFO:mlagents.trainers: race_7: RaceGameLearningBrain: Step: 5000. Time Elapsed: 257.479 s Mean Reward: -7.267. Std of Reward: 10.994. Training.

...
...
...

INFO:mlagents.trainers: race_7: RaceGameLearningBrain: Step: 2319000. Time Elapsed: 317379.718 s Mean Reward: 1467.813. Std of Reward: 1560.897. Training.
INFO:mlagents.trainers: race_7: RaceGameLearningBrain: Step: 2320000. Time Elapsed: 317599.201 s Mean Reward: 601.707. Std of Reward: 293.869. Training.
INFO:mlagents.trainers: race_7: RaceGameLearningBrain: Step: 2321000. Time Elapsed: 317824.258 s Mean Reward: 1292.860. Std of Reward: 1052.086. Training.
INFO:mlagents.trainers: race_7: RaceGameLearningBrain: Step: 2322000. Time Elapsed: 318044.004 s Mean Reward: 1013.822. Std of Reward: 1115.018. Training.
INFO:mlagents.trainers: race_7: RaceGameLearningBrain: Step: 2323000. Time Elapsed: 318266.715 s Mean Reward: 1757.583. Std of Reward: 2141.269. Training.
&lt;/denchmark-code&gt;

And for completeness, the last Tensorboard output:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/71244686-612e5a80-2313-11ea-8b1f-a9426be90bf1.png&gt;&lt;/denchmark-link&gt;

And smoothed:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/71244884-c4b88800-2313-11ea-92c5-00df8dd37ce6.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='23' author='devedse' date='2019-12-20T18:19:35Z'>
		Do you happen to have the memory snapshot files you can send to me?  Or post to google drive or something.  I don't think I'll be able to run your game for as long :P
		</comment>
		<comment id='24' author='devedse' date='2019-12-20T18:24:42Z'>
		One guess on why the training would be slowing down is if your memory is getting really fragmented with the creation and deletion of materials/textures/etc.  It may also explain the heap size of the unity process.  I'll see if I can find anything with some of my own spelunking.
		</comment>
		<comment id='25' author='devedse' date='2019-12-20T19:52:39Z'>
		Aw shit can only do that next Monday. I'll post it then :).
		</comment>
		<comment id='26' author='devedse' date='2019-12-23T11:48:39Z'>
		Here's the last snapshot from Friday:
&lt;denchmark-link:https://drive.google.com/open?id=12PKfydD9lMUX3mtwgmEMSu0_uhusF7DR&gt;https://drive.google.com/open?id=12PKfydD9lMUX3mtwgmEMSu0_uhusF7DR&lt;/denchmark-link&gt;

And a new one from today:
&lt;denchmark-link:https://drive.google.com/file/d/1bHMs-2HassYa0EoeoGe3u_iYctBwt530/view?usp=sharing&gt;https://drive.google.com/file/d/1bHMs-2HassYa0EoeoGe3u_iYctBwt530/view?usp=sharing&lt;/denchmark-link&gt;

Strange thing is though that the one from Friday was about 3gb while the one from today is 10gb.
Latest Task Manager:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/71356485-b1f7ba80-2582-11ea-8194-eb54158737f5.png&gt;&lt;/denchmark-link&gt;

Latest tensorboard:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/71356472-a0aeae00-2582-11ea-9b7b-f13ae9e119a8.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='27' author='devedse' date='2020-01-02T09:15:18Z'>
		This morning the run finally completed ðŸ˜ƒ. Unity still used a ton of memory though. The interesting part is, that even after the run completed and Unity was idling in the Editor it would still consume about 26gb's of memory.
What I then tried was pressing the play button to see how the newly trained model would perform, when I did this Unity went in a "Not responding" state and still used about 22 gb of memory:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/71659640-9a6dbe00-2d48-11ea-8d21-722ede1f61ea.png&gt;&lt;/denchmark-link&gt;

After restarting Unity everything worked again and the newly trained model performs great ðŸ˜„
		</comment>
		<comment id='28' author='devedse' date='2020-01-16T09:19:38Z'>
		This issue has been automatically marked as stale because it has not had activity in the last 14 days. It will be closed in the next 14 days if no further activity occurs. Thank you for your contributions.
		</comment>
		<comment id='29' author='devedse' date='2020-01-16T09:21:01Z'>
		&lt;denchmark-link:https://github.com/surfnerd&gt;@surfnerd&lt;/denchmark-link&gt;
 , do you have any updates or ideas or shall we leave this issue as stale?
		</comment>
		<comment id='30' author='devedse' date='2020-01-16T17:50:35Z'>
		Hey &lt;denchmark-link:https://github.com/devedse&gt;@devedse&lt;/denchmark-link&gt;
,
I apologize for not getting back to you.  It has been quite busy lately.  I'd like to investigate further but may not get to it for a while. I'll add the bug label and file this in our internal tracker.  I'd like to get to the bottom of it.
		</comment>
		<comment id='31' author='devedse' date='2020-01-16T17:52:17Z'>
		Hi &lt;denchmark-link:https://github.com/devedse&gt;@devedse&lt;/denchmark-link&gt;
,
I've filed this under MLA-535 in our internal tracker.  We will prioritize this and update this issue when we have an update.
		</comment>
		<comment id='32' author='devedse' date='2020-03-10T19:46:56Z'>
		friendly ping &lt;denchmark-link:https://github.com/devedse&gt;@devedse&lt;/denchmark-link&gt;
,
I was wondering if you were still having this issue.  From the debugging I did, I was unable to find a leak in our code.  Where you able to find any more in yours?
		</comment>
		<comment id='33' author='devedse' date='2020-04-02T21:03:07Z'>
		Hi &lt;denchmark-link:https://github.com/devedse&gt;@devedse&lt;/denchmark-link&gt;
,
We have not been able to find any memory leaks on our end after a few months of testing.  I am going to close this now.  I hope you have resolved your issue.
Cheers.
		</comment>
		<comment id='34' author='devedse' date='2020-04-10T09:16:21Z'>
		&lt;denchmark-link:https://github.com/surfnerd&gt;@surfnerd&lt;/denchmark-link&gt;
 , sorry for my late response but haven't been working with Unity for a while. For now the issues seems to have been resolved by doing the following:
&lt;denchmark-link:https://user-images.githubusercontent.com/2350015/78979673-a07bf380-7b1c-11ea-9115-131be76cddef.png&gt;&lt;/denchmark-link&gt;

Once I'll get back to working with Unity I'll run the training algorithm again and see if it remains working. Thanks for the quick responses and help you offered!
		</comment>
	</comments>
</bug>