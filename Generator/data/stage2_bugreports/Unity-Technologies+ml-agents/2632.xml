<bug id='2632' author='ashwalcs' open_date='2019-09-27T11:11:53Z' closed_time='2019-10-21T17:12:32Z'>
	<summary>Barracuda Android Build is crashing</summary>
	<description>
Tried to use barracuda for object detection. For this have loaded a Custom Vision Model converted into barracuda format.
	</description>
	<comments>
		<comment id='1' author='ashwalcs' date='2019-09-27T17:08:43Z'>
		Hi &lt;denchmark-link:https://github.com/ashwalcs&gt;@ashwalcs&lt;/denchmark-link&gt;
,
Can you please provide more information about the crash, such as the callstack? Any other information like the device type and Unity version would probably be helpful too.
		</comment>
		<comment id='2' author='ashwalcs' date='2019-09-27T17:35:46Z'>
		If you can provide the source neural network file, that would be even better.
		</comment>
		<comment id='3' author='ashwalcs' date='2019-10-04T07:09:31Z'>
		Hi &lt;denchmark-link:https://github.com/chriselion&gt;@chriselion&lt;/denchmark-link&gt;
 ,
This is the callstack :
&lt;denchmark-code&gt;UnityException: DestroyBuffer can only be called from the main thread.
10-04 12:25:04.783 4320 4416 E Unity : Constructors and field initializers will be executed from the loading thread when loading a scene.
10-04 12:25:04.783 4320 4416 E Unity : Don't use this function in the constructor or field initializers, instead move initialization code to the Awake or Start function.
10-04 12:25:04.783 4320 4416 E Unity : at UnityEngine.ComputeBuffer.Dispose (System.Boolean disposing) [0x00000] in &lt;00000000000000000000000000000000&gt;:0
10-04 12:25:04.783 4320 4416 E Unity : at UnityEngine.ComputeBuffer.Dispose () [0x00000] in &lt;00000000000000000000000000000000&gt;:0
10-04 12:25:04.783 4320 4416 E Unity : at Barracuda.ComputeTensorData.Dispose () [0x00000] in &lt;00000000000000000000000000000000&gt;:0
10-04 12:25:04.783 4320 4416 E Unity : at Barracuda.Tensor.Dispose () [0x00000] in &lt;00000000000000000000000000000000&gt;:0
10-04 12:25:04.783 4320 4416 E Unity : at Barracuda.Tensor.Finalize () [0x00000] in &lt;00000000000000000000000000000000&gt;:0
10-04 12:25:04.783 4320 4416 E Unity : UnityEngine.DebugLogHandler:LogException(Exception, Object)
10-04 12:25:04.783 4320 4416 E Unity : UnityEngine.Logger:LogException(Exception, Object)
10-04 12:25:04.783 4320 4416 E Unity : UnityEngine.Debug:LogException(Exception)
10-04 12:25:04.783 4320 4416 E Unity : UnityEngine.UnhandledExceptionHandler:&lt;RegisterUECatcher&gt;m__0(Object, UnhandledExceptionEventAr
10-04 12:25:04.785 4320 4416 E Unity : UnityException: GetStackTraceLogType can only be called from the main thread.10-04 12:25:04.785 4320 4416 E Unity : Constructors and field initializers will be executed from the loading thread when loading a scene.
10-04 12:25:04.785 4320 4416 E Unity : Don't use this function in the constructor or field initializers, instead move initialization code to the Awake or Start function.
10-04 12:25:04.785 4320 4416 E Unity : at Barracuda.D.LogWarning (System.Object message) [0x00000] in &lt;00000000000000000000000000000000&gt;:0
10-04 12:25:04.785 4320 4416 E Unity : at Barracuda.ComputeTensorData.Finalize () [0x00000] in &lt;00000000000000000000000000000000&gt;:0
10-04 12:25:04.785 4320 4416 E Unity : UnityEngine.DebugLogHandler:LogException(Exception, Object)
10-04 12:25:04.785 4320 4416 E Unity : UnityEngine.Logger:LogException(Exception, Object)
10-04 12:25:04.785 4320 4416 E Unity : UnityEngine.Debug:LogException(Exception)
10-04 12:25:04.785 4320 4416 E Unity : UnityEngine.UnhandledExceptionHandler:&lt;RegisterUECatcher&gt;m__0(Object, UnhandledExceptionEventArgs)
10-04 12:25:04.785 4320 4416 E Unity : System.UnhandledExceptionEventHandler:Invoke(Object, UnhandledExceptionEventArgs)
10-04 12:25:04.785 4320 4416 E Unity :
10-04 12:25:04.785 4320 4416 E Unity : (Filename: currently not available on il2cpp Line: -1)
10-04 12:25:04.785 4320 4416 E Unity :
10-04 12:25:04.787 4320 4416 W Unity : GarbageCollector disposing of ComputeBuffer. Please use ComputeBuffer.Release() or .Dispose() to manually release the buffer.
10-04 12:25:04.787 4320 4416 W Unity : UnityEngine.DebugLogHandler:LogFormat(LogType, Object, String, Object[])
10-04 12:25:04.787 4320 4416 W Unity : UnityEngine.Logger:Log(LogType, Object)
10-04 12:25:04.787 4320 4416 W Unity : UnityEngine.Debug:LogWarning(Object)
10-04 12:25:04.787 4320 4416 W Unity : UnityEngine.ComputeBuffer:Dispose(Boolean)
10-04 12:25:04.787 4320 4416 W Unity : UnityEngine.ComputeBuffer:Finalize()
10-04 12:25:04.787 4320 4416 W Unity :
10-04 12:25:04.787 4320 4416 W Unity : (Filename: ./Runtime/Export/Debug/Debug.bindings.h Line: 48)
10-04 12:25:04.787 4320 4416 W Unity :
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='ashwalcs' date='2019-10-04T15:53:50Z'>
		The finalizer doesn’t run on the main thread, so it looks like that’s why Unity isn’t happy.  Thanks for the extra info!  Very helpful.
		</comment>
		<comment id='5' author='ashwalcs' date='2019-10-04T20:41:25Z'>
		Hi &lt;denchmark-link:https://github.com/ashwalcs&gt;@ashwalcs&lt;/denchmark-link&gt;
,
Are you sure that you are disposing off your data structures properly when the scene is closed?  Can you share your environment with us?
		</comment>
		<comment id='6' author='ashwalcs' date='2019-10-08T10:44:16Z'>
		Editor Environment :

Unity 2019.1.14f - Windows 10 - 16Gb Ram.

Testing Environment :

One Plus 7 Pro - Android 9 Pie - 8Gb Ram
Moto G6 - Android 9 Pie - 3Gb Ram.

This the Neural Network file - trained for 2 Objects : &lt;denchmark-link:https://drive.google.com/file/d/1oDPiWjUgvLylk7nIZWK9s5noGThDXjKL/view?usp=sharing&gt;https://drive.google.com/file/d/1oDPiWjUgvLylk7nIZWK9s5noGThDXjKL/view?usp=sharing&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/surfnerd&gt;@surfnerd&lt;/denchmark-link&gt;
 Yes i am disposing the data structures properly and also disposing the worker after every scan. Basically it crashes after every 3 concurrent detections/ scan.
		</comment>
		<comment id='7' author='ashwalcs' date='2019-10-08T14:19:13Z'>
		&lt;denchmark-link:https://github.com/ashwalcs&gt;@ashwalcs&lt;/denchmark-link&gt;
 could you please share code how are you calling Barracuda worker?
P.S. If you have to run several concurrent executions then you have to create multiple workers.
		</comment>
		<comment id='8' author='ashwalcs' date='2019-10-08T23:17:59Z'>
		&lt;denchmark-link:https://github.com/mantasp&gt;@mantasp&lt;/denchmark-link&gt;
 I am not running them concurrently. I am running them in series, one after the other. The model is loaded only once and the worker is created on each scan/detection. After completion of detection, worker is disposed off. Only after disposing the worker is another scan/detection initiated.
Here's a snippet :
&lt;denchmark-code&gt;   public IEnumerator LoadModel() // Called once in Start
   {
       Debug.Log("Model loaded");
       labels = label.text.Split(new char[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);
       BarracudaModel = ModelLoader.Load(modelfile);
       yield return null;
   }

   public void sendImage() // Onclick of button
   {
       StartCoroutine(RunTF(m_Texture));
   }

   public IEnumerator RunTF(Texture2D m_Texture)
   {
       StartCoroutine(DecodeTexture(m_Texture,` 416, 416, 0, Flip.NONE, (result) =&gt;
        { // Converts Texture2D to floatArray
            StartCoroutine(detector.Detect(result, (FinalResult) =&gt; { }));
        }));
   }

   public IEnumerator Detect(float[] imgData, System.Action&lt;List&lt;BoundingBox&gt;&gt; callback, int numResultsPerClass = 1, float threshold = 0f)
   {
         Debug.Log("Create Worker");
       worker = BarracudaWorkerFactory.CreateWorker(BarracudaWorkerFactory.Type.Compute, BarracudaModel, true);
       yield return null;
       var inputs = new Dictionary&lt;string, Tensor&gt;();
       var shape = new TensorShape(1, 416, 416, 3);
       inputs[BarracudaModel.inputs[0].name] = new Tensor(shape, imgData);
       worker.ExecuteAndWaitForCompletion(inputs);
       runner = worker.Peek(BarracudaModel.outputs[0]);
       runner.Dispose();
       worker?.Dispose();
       yield return null;
       callback(results);
   }


&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='ashwalcs' date='2019-10-09T18:38:23Z'>
		&lt;denchmark-link:https://github.com/ashwalcs&gt;@ashwalcs&lt;/denchmark-link&gt;


if you need to run network through many pictures, pass them in batches instead of processing one by one. Basically when you allocate tensor specify batch size as first tensor shape parameter var shape = new TensorShape(batch_size, 416, 416, 3);
your example shows that you are not disposing all inputs, you have to dispose any tensor you did allocate via inputs[BarracudaModel.inputs[0].name] = new Tensor(shape, imgData);. So these tensors are causing errors you see in the logs.
almost always it is best to call worker.Execute() instead of worker.ExecuteAndWaitForCompletion(inputs); your code will block anyway when you access output tensor data for the first time. Also note that if you Peek data you don't have to dispose it, but it's valid only until worker is alive and before second call to Execute() on the same worker instance.

		</comment>
		<comment id='10' author='ashwalcs' date='2019-10-21T10:31:39Z'>
		&lt;denchmark-link:https://github.com/mantasp&gt;@mantasp&lt;/denchmark-link&gt;
 Thank you, disposing all inputs and tensors worked for me.
		</comment>
		<comment id='11' author='ashwalcs' date='2019-10-21T17:12:32Z'>
		Hey &lt;denchmark-link:https://github.com/ashwalcs&gt;@ashwalcs&lt;/denchmark-link&gt;
,
We are going to close this issue since it seems like it has been resolved.  Feel free to open another if you run into issues.
		</comment>
	</comments>
</bug>