<bug id='4238' author='dgiunchi' open_date='2020-07-16T07:50:35Z' closed_time='2020-10-16T17:28:37Z'>
	<summary>Colliders issue</summary>
	<description>
My environment contains 10 agents with 4 overlapping colliders each one. After a few steps Unity gets stuck, and  if I pause with the debugger I see this Call Stack:

CompletionQueueEvent Grpc.Core.Internal.CompletionQueueSafeHandle:Next ()+0x0 at :-1	C#
Void Grpc.Core.Internal.GrpcThreadPool:RunHandlerLoop (CompletionQueueSafeHandle, IProfiler)+0xa at :-1	C#
Void &lt;&gt;c__DisplayClass22_0:b__0 ()+0x12 at :-1	C#
Void System.Threading.ThreadHelper:ThreadStart_Context (Object)+0x1f at :-1	C#
Void System.Threading.ExecutionContext:RunInternal (ExecutionContext, ContextCallback, Object, Boolean)+0x73 at :-1	C#
Void System.Threading.ExecutionContext:Run (ExecutionContext, ContextCallback, Object, Boolean)+0x4 at :-1	C#
Void System.Threading.ExecutionContext:Run (ExecutionContext, ContextCallback, Object)+0x2f at :-1	C#
Void System.Threading.ThreadHelper:ThreadStart ()+0x14 at :-1	C#

It is basically stuck there.
To Reproduce

Just take Hallway environment and duplicate agents till you have 10 agents (I can't share the project because I'm not the only one working in that)
Attach 4 overlapping colliders (in my case I have 4 children for each agent,  and each child has one collider, they can overlap or not actually)
run ml-agents train and run the environment
in some particular crowded situation Unity does not respond anymore. (just increase the number of agents or the size of the colliders).

I noticed that even with few agents it happens, if collider size increases the probability to get this issue increases.
If I reduce the number of colliders or agents this issue appears rarely, but collider size is highly correlated as well.
Environment (please complete the following information):

Unity Version: Unity 2019.4.0f1
OS + version: Windows 10
ML-Agents version: ML-Agents v1.0
TensorFlow version: 2.2
Environment: Hallway

	</description>
	<comments>
		<comment id='1' author='dgiunchi' date='2020-07-16T22:04:30Z'>
		Hi &lt;denchmark-link:https://github.com/dgiunchi&gt;@dgiunchi&lt;/denchmark-link&gt;
,
I tried to reproduce the issue you described. I did the following to try to reproduce :

I opened the hallway environment
I modified all the SymbolFinderArea by duplicating the Agent GameObject 10 times
For each Agent, I added a box collider on the eye, mouth, HeadBand and AgentCube_Blue children GameObjects

I then launched training. It seems to be working so far, some Agents are falling off the platform because of collisions with other Agents but I see no error.
Did you modify anything else in the Hallway environment?
I do not think collisions are at fault, from the stack you posted, it looks like gprc is waiting for something to happen (and it does not)
		</comment>
		<comment id='2' author='dgiunchi' date='2020-07-17T12:52:30Z'>
		Hi &lt;denchmark-link:https://github.com/vincentpierre&gt;@vincentpierre&lt;/denchmark-link&gt;
 ,
my colliders configuration probably is prone to show this issue. For example, take the box agent and create 4 nested colliders of different sizes (one that adheres to the cubic mesh, the second with size 2, the this with size 4 and the last with size 8).
You need to put a script that does Collision (or Trigger) Enter/Exit (and possible Stay) associated to those children.
It is hard to demonstrate but I'm doing some tests and if I reduce the size of the colliders or the number of agents, this issue occurs more rarely.
By the way, in the test I'm doing, I noticed that Unity is still doing something even if does not respond (cause CPU is oscillating around 10%). I also increase environment timeout (in fact after 1 minute it closes) to 1 hour, but I saw that was not a matter of time needed. It looks stuck in some infinite loop, as you said waiting for something.
		</comment>
		<comment id='3' author='dgiunchi' date='2020-07-17T16:59:48Z'>
		Hi, this looks like a rather complicated setup. Can you create a minimal scene to reproduce and post it in this issue?
Does the issue happen without training? (If you press play in the editor without the training process started). Does the problem still occur if you deactivate the Agent?
It seems rather strange to me that ML-Agents would misbehave depending on the number/shape of colliders.
		</comment>
		<comment id='4' author='dgiunchi' date='2020-07-17T17:14:41Z'>
		The issue happens also without training, and occurs when there are multiple agents (with one agent I did not experience that issue). I made other tests. You can simply increase the size of the collider you have already defined with dimensions compatible with the ones I described before, and add the following script to those elements with the collider. (I use Trigger, but I have the same issue also with Collide function)
&lt;denchmark-code&gt;using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MyScript: MonoBehaviour
{
Transform agent; // in the inspector assign the agent object here - the father -
void OnTriggerExit(Collider col)
    {
     // put a reward  to the agent
    agent.GetComponent&lt;HallwayAgent&gt;().AddReward(1.0f);
    }

 void OnTriggerStay(Collider col)
    {
     // put a reward  to the agent
        agent.GetComponent&lt;HallwayAgent&gt;().AddReward(-0.01f);
    }

    void OnTriggerEnter(Collider col)
    {
     // put a reward  to the agent 
       agent.GetComponent&lt;HallwayAgent&gt;().AddReward(-1.0f);
    }
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='dgiunchi' date='2020-07-17T17:52:00Z'>
		I attached the enclosed script to eye, mouth, HeadBand and AgentCube_Blue for each agent. Unity still runs fine for me.
I think this might be a Unity physics issue since the Agents do not reference nor use the colliders.
Can you try to reproduce without Agent scripts in the scene?
		</comment>
		<comment id='6' author='dgiunchi' date='2020-07-17T19:40:02Z'>
		Did you also increase the size of the colliders? I tried removing agents, and it does not happen. Even with one is fine. There is a not clear threshold value after which it happens, that is proportional to the size of the collider, the multiplicity of the agents, and probably if they concentrate in the same area (so basically when collisions or triggers happens frequently). If you have many agents with moderately large colliders, it occurs to me very often. Don't know really why it happens.
		</comment>
		<comment id='7' author='dgiunchi' date='2020-07-17T19:44:32Z'>
		I increased the size of the colliders yes. I cannot reproduce your issue with Hallway. I am not sure how I can help, can you provide a minimal Unity project for which the issue happens?
		</comment>
		<comment id='8' author='dgiunchi' date='2020-07-18T08:31:57Z'>
		I'm trying to remove things and make it still works/happens. Probably some additional component attached to the agent are correlated with this issue (like a camera sensor).
		</comment>
		<comment id='9' author='dgiunchi' date='2020-07-18T19:55:34Z'>
		ok I did many tests. The essential part is having also a camera sensor attached to the agent. Removing that I don't see the same problem. Let's say you need a the VisualHallway with those colliders.
		</comment>
		<comment id='10' author='dgiunchi' date='2020-07-20T18:07:06Z'>
		I tried with visual hallway, the new collider and the scripts you provided.
I cannot reproduce your issue.
		</comment>
	</comments>
</bug>