<bug id='3427' author='JPhilipp' open_date='2020-02-13T09:25:59Z' closed_time='2020-03-07T07:43:54Z'>
	<summary>Ray gizmos showing wrong length &amp; more</summary>
	<description>
(Loving ML Agents.) I guess this is a feature-not-bug which I just don't understand the purpose of: The Ray sensor gizmos almost never show their true ray length -- from origin towards the specific surface hit -- but something shorter. (I feel like it's something in the vicinity of RayPerceptionSensorComponentBase's rayDirection *= rayInfo.hitFraction, but there seems to be more to it.)
This makes it hard to debug, for instance, if one has set the rigidbody layers of the agent right so they get ignored by a head-to-ground directed laser. (In my case, the hit seemingly stops right at the head and not at the ground, though I feel it's not what's happening, and the layers were set up correct.) Even forward lasers when white and not hitting are shortened. Again, I suppose there's some kind of other benefit to all this.
There's different other issues with the Ray gizmo, many of which I'm sure are inherent to the system and of no fault of the implementation. For instance:

When pausing the view, the gizmos often (but not always) disappear
There's a toggle between World and Transform view of the rays, but I don't know the intent behind this option, I just want to see the best approximation of the "real thing"
The rays often don't match the agent origin
The gizmos aren't shown in non-play mode (as previously reported and being looked at), nor in some types of heuristic modes (as reported by someone else and looked at)
As gizmo rays and spheres are not covered by objects, it makes it difficult to understand their position and direction in 3d. As having them shine through is also a bonus to see them, maybe it's possible to get a best of both worlds visualization here, like by having one lower opacity line drawn shining through, and one full opacity line drawn that gets 3d occluded. I'll post this one as a separate issue too.

Hoping this is helpful, thanks everyone!
	</description>
	<comments>
		<comment id='1' author='JPhilipp' date='2020-02-13T18:52:03Z'>
		For brevity, I'll use "ray", but all the comments should apply to spherecasts too

The Ray sensor gizmos almost never show their true ray length

Can you take a screenshot of this? If the rays hit something, the intended behavior is to only draw the ray up to the hit point. I suppose we could also draw the full ray alpha'd out a bit so you can see how far it goes. Note that if you have non-1.0 scale on your Agent's transforms, there's a bug (&lt;denchmark-link:https://github.com/Unity-Technologies/ml-agents/issues/3321&gt;#3321&lt;/denchmark-link&gt;
) in 0.13 (and probably earlier) that draws the rays incorrectly. The behavior of rays with scaled transforms should be more consistent in 0.14.


When pausing the view, the gizmos often (but not always) disappear


Are you requesting decisions every step? The rays will "fade" over time on the steps when the agent doesn't request (and thus doesn't make observations).


There's a toggle between World and Transform view of the rays, but I don't know the intent behind this option, I just want to see the best approximation of the "real thing"
The rays often don't match the agent origin


These might be related to not stepping every frame and/or the order that the rays are cast vs when the gizmos draw. We cache the raycast hit results when we make them (coming from the RayPerceptionSensor.Write method) and display them in the OnDrawGizmos(), so I think the display might be a frame behind. This gets worse if you don't request a decision every frame; we'll keep drawing the previous calls rays and hits.
This is what the useWorldPositions toggle is trying to solve. If it's on, we draw the rays where they were actually cast from, even if the agent has moved. If it's off, we transform the rays by the Agent's current position. But this might make the ray hit positions be inaccurate - if the agent moved forward since the cast, the hit could be "inside" a wall now.


The gizmos aren't shown in non-play mode (as previously reported and being looked at), nor in some types of heuristic modes (as reported by someone else and looked at)


Definitely going to improve this soon


As gizmo rays and spheres are not covered by objects, it makes it difficult to understand their position and direction in 3d. As having them shine through is also a bonus to see them, maybe it's possible to get a best of both worlds visualization here, like by having one lower opacity line drawn shining through, and one full opacity line drawn that gets 3d occluded. I'll post this one as a separate issue too.


Good feedback. I know that &lt;denchmark-link:https://docs.unity3d.com/ScriptReference/Debug.DrawLine.html&gt;Debug.DrawLine&lt;/denchmark-link&gt;
 has an option for ; I'll need to see if there's something similar for gizmo drawing (which is a separate API).
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Thanks again for the great feedback. I'm going to do a pass on the sensor in the next week or two and hopefully address all of it. I think doing the raycasts during the gizmo drawing (and not just relying on cached results) will hopefully address some of the issues you highlighted here (and also make drawing work outside of play mode)
		</comment>
		<comment id='2' author='JPhilipp' date='2020-02-13T19:36:11Z'>
		
Note that if you have non-1.0 scale on your Agent's transforms, there's a bug (#3321) in 0.13 (and probably earlier) that draws the rays incorrectly. The behavior of rays with scaled transforms should be more consistent in 0.14.

Sorry, I'm on 0.13 (based on a suggested fix for a Python incompatibility I had with 0.14). I'll try to mention that next time.

Are you requesting decisions every step? The rays will "fade" over time on the steps when the agent doesn't request (and thus doesn't make observations).

I follow the pattern of most of the native examples by requesting a decision every 5 steps. But I still need the ray gizmo to be visually meaningful to me. I'd happily sacrifice it being very literal, in favor of it communicating what I need to see to debug my rays. I bet that's not easy to implement, but maybe best you get clear feedback, even if I don't have proper solutions!

Definitely going to improve this soon

Great! Thanks!
		</comment>
		<comment id='3' author='JPhilipp' date='2020-02-25T05:47:29Z'>
		Sorry, just getting back to the feedback on this. Can you provide a screenshot of the original issue you mentioned ("The Ray sensor gizmos almost never show their true ray length")? Or do you mean you want to visual the full ray instead of the hit location? Do you have any non-1.0 scale on the agent?
		</comment>
		<comment id='4' author='JPhilipp' date='2020-02-25T09:04:47Z'>
		&lt;denchmark-link:https://github.com/chriselion&gt;@chriselion&lt;/denchmark-link&gt;
 For what it's worth, I was using 0.13 instead of 0.14, so I understand some ray length issues may have alreay been fixed. Maybe my issue post here, which was more of a general wrapup, is (after having been read) of better use as Closed? (It's also very hard for me to see the proper length to begin with, as due to the other issues I've mentioned which makes the ray non-3d.) And thanks!
		</comment>
		<comment id='5' author='JPhilipp' date='2020-03-06T23:50:50Z'>
		I'm still having trouble understanding some of the problems that you're describing without a screenshot. Would it be possible to get some screenshots of what you're seeing in the editor, along with what you'd expect them to look like (even if it's just hackily drawn in)?
		</comment>
		<comment id='6' author='JPhilipp' date='2020-03-07T07:43:54Z'>
		&lt;denchmark-link:https://github.com/chriselion&gt;@chriselion&lt;/denchmark-link&gt;
 Hi! I'm closing this issue as I understand some of the issues mentioned, like it not showing in Edit mode, have been fixed in newer version. If you need an illustration for the specific issue of rays not properly conveying information to their 3Dimensionality, please let me know here or in &lt;denchmark-link:https://github.com/Unity-Technologies/ml-agents/issues/3429&gt;this issue&lt;/denchmark-link&gt;
 I raised and I'll post an image to clarify that issue, and potential solutions, specifically.
		</comment>
	</comments>
</bug>