<bug id='1302' author='hejcz' open_date='2018-10-08T18:30:13Z' closed_time='2019-10-02T18:03:45Z'>
	<summary>Unexpected behavior of Time.captureFramerate and Time.time</summary>
	<description>
To measure time in game for example to exit level after some time I use Time.time function. I've seen that it is used in example environments as well. In 2018.2.11f and 2018.3.0b4 Unity releases manipulating time scale in academy object ends up with strange time behavior.
Time.time seems to be too fast even though scale is set to 1. Changing timeScale has no effect. Debug shows that it is 1 indeed. Commenting out Time.captureFramerate = 60; in Academy ConfigureEnvironmentHelper method solves the problem. I don't know Unity too good so I don't know what's wrong. 2018.1.0b13 release seems to not have this problem.
	</description>
	<comments>
		<comment id='1' author='hejcz' date='2018-10-16T20:55:01Z'>
		&lt;denchmark-link:https://github.com/mmattar&gt;@mmattar&lt;/denchmark-link&gt;
 , should I wait for some response from you as you assigned yourself to this task?
		</comment>
		<comment id='2' author='hejcz' date='2018-10-21T09:46:19Z'>
		&lt;denchmark-link:https://github.com/vincentpierre&gt;@vincentpierre&lt;/denchmark-link&gt;
, do you know what's the status of this issue? It's crucial for me because I don't know if commenting out Time.captureFramerate = 60 won't break anything as I use visual observations.
		</comment>
		<comment id='3' author='hejcz' date='2018-10-22T19:21:51Z'>
		 ensures that the Update and FixedUpdate frequency are matched. Time.captureFrameRate does not modify the speed of the simulation at all, but it might modify the frequency of Updates and FixedUpdates. Did you make sure that all displacements were scaled with &lt;denchmark-link:https://docs.unity3d.com/ScriptReference/Time-deltaTime.html&gt;Time.deltaTime&lt;/denchmark-link&gt;
 in Update methods and Time.fixedDeltaTime in the FixedUpdate method ?
		</comment>
		<comment id='4' author='hejcz' date='2018-10-22T20:41:54Z'>
		Having MonoBehavior as simple as:
&lt;denchmark-code&gt;public class Timer : MonoBehaviour
{
    public float Value;

    private void Update()
    {
        Value = Time.time;
    }
}
&lt;/denchmark-code&gt;

Just check in Unity UI how Value changes when mentioned line is commented out and present in the code. For me Value changes much faster when this line is present. As far as I understand Time.time represents scaled time from some moment. This MonoBehavior is attached to Agent object in my case.
		</comment>
		<comment id='5' author='hejcz' date='2018-10-22T23:11:18Z'>
		When CaptureFrameRate is on, the time seems to flow a lot slower. CaptureFrameRate forces Unity to assume that Updates take exactly 1/60 seconds regardless of how long it actually takes. We use it to make sure that when the simulation is speed up, the number of Updates per second / time scale remains unchanged. We can get more consistent training this way. I will label this as a bug and we will investigate. In the meantime, could you try deactivating Time.CaptureFrameRate at inference time and leave it at training time?
		</comment>
		<comment id='6' author='hejcz' date='2018-10-23T06:09:01Z'>
		Yes, I can but I'm afraid that during training it might not work. If my agent wont have enough time to figure out what to do training will be useless as every 15 sec i reset the map. Im gonna wait for the results of investigation.
		</comment>
		<comment id='7' author='hejcz' date='2018-10-28T15:42:55Z'>
		I just spent some time debugging why my game was running slowly and the fixedUpdate frequency was weird. So it turns out Time.captureFramerate was the cause for me as well.
So if I understand well, this makes sure that the FixedUpdate and Update frequencies stay consistent independently of the actual framerate that the game is running at.
So it makes my game speed look inconsistent to me at inference time because the frequency of FixedUpdate is not always 50/s anymore.
But, as long as I don't rely on Time.realTimeSinceStartup,  I shouldn't worry about it because the game speed will appear consistent to my agent. Is that it?
		</comment>
		<comment id='8' author='hejcz' date='2018-11-10T17:41:07Z'>
		I had this issue as well and I just added an argument isInference to ConfigureEnvironmentHelper and made this workaround:
&lt;denchmark-code&gt;if (!isInference) Time.captureFramerate = 60;
&lt;/denchmark-code&gt;

Hopefully this will be fixed soon.
		</comment>
		<comment id='9' author='hejcz' date='2018-12-12T19:55:01Z'>
		The use of Time.captureFramerate is also causing dramatic speed changes in my simulation. I have one (and only one) call in FixedUpdate to Rigidbody.AddRelativeForce. That method's input is NOT supposed to take Time.fixedDeltaTime into consideration, because that is done internally. However, I suspect it's not accounting for Time.captureFramerate.
		</comment>
		<comment id='10' author='hejcz' date='2019-01-18T16:44:00Z'>
		I also ran into this issue, but when building for Windows, Android, etc. Time.captureFramerate makes Unity builds run at very different speeds than in the editor!  This is super unintuitive to debug, because Time.timeScale is always 1, but suddenly everything runs at different speeds (including WaitForSeconds, physics, etc.)
For now, I'm overriding the captureFramerate on AcademyReset like this:
&lt;denchmark-code&gt;if (GetIsInference())
    Time.captureFramerate = 0;
&lt;/denchmark-code&gt;

But will agents perceive the environment in the same way during training and inference?
Also, this is doubly annoying, because I based my physics settings on what the editor showed me and now my previously trained models are completely lost with the newly adjusted physics settings.
		</comment>
		<comment id='11' author='hejcz' date='2019-04-03T22:22:30Z'>
		After investigation, using capture frame rate fixes the Time.deltaTime regardless of how long a frame actually takes. We need it for training in order to make sure that when speeding up the environment, the Time.deltaTime will be consistent with regular speed game time. In order to train the game at faster speeds, the game time scale must be increased without breaking the game. You can either put all of the logic into the Fixed Update or make sure the actual game FPS is close to the capture frame rate (and turn off capture frame rate at inference). If capture frame rate is 60 but the game FPS is 30, then the game will be going twice slower (because doing 30 FPS with half the delta time).
		</comment>
		<comment id='12' author='hejcz' date='2019-05-22T02:06:41Z'>
		&lt;denchmark-link:https://github.com/vincentpierre&gt;@vincentpierre&lt;/denchmark-link&gt;
 So, does it break anything if I only use captureFramerate for training and deactivate it in inference? I just came across this as well.
My game speed is completely dependent on the framerate now with captureFramerate set to 60. Using the Roller Ball environment as an example: the ball is moving about three times as fast on my laptop (200fps) than it is on my computer (70fps). My particle system is moving three times faster as well. Even when I change scenes everything's too fast.
This is really annoying and seems to go against everything I've learned. It's not possible to make my game framerate-independent if this is set. Does it break anything if I deactivate this for inference or not? And if it doesn't, you should probably add that check in the official release since this pretty much breaks every scene that has an Academy in it for real games.
		</comment>
		<comment id='13' author='hejcz' date='2019-05-22T18:24:59Z'>
		&lt;denchmark-link:https://github.com/DVonk&gt;@DVonk&lt;/denchmark-link&gt;
 I cannot guarantee that removing capture frame rate at inference will not break the agent's behaviors. It does work in a lot of cases where the actual FPS is close to the set captureFrameRate of training.
		</comment>
		<comment id='14' author='hejcz' date='2019-05-22T20:19:42Z'>
		&lt;denchmark-link:https://github.com/vincentpierre&gt;@vincentpierre&lt;/denchmark-link&gt;
 Am I just missing something then? It doesn't seem possible to use ML-Agents in a real game if the framerate just changes the entire game speed. With it set to 60 even the use of AddForce is dependent on the framerate. I don't see anyone shipping a game where people with good computers are forced to play at three times the speed of people with bad ones?
		</comment>
		<comment id='15' author='hejcz' date='2019-05-22T20:29:53Z'>
		If you want to remove the capture frame rate during inference, you need to make sure that the agent's behavior is going to be consistent. You still need capture frame rate for training and you should set is close to your target frame rate. Additionally, you should set the timeScale to a large enough value that it trains fast and small enough so the behavior of the agent is not modified.
I hope it makes sense. There is currently no nice way to speed up training but we working on it.
		</comment>
		<comment id='16' author='hejcz' date='2019-10-02T18:03:45Z'>
		Hello, thank you for this discussion.  We are closing it now due to inactivity.  Please reopen it if you'd like to further discuss this topic.
		</comment>
	</comments>
</bug>