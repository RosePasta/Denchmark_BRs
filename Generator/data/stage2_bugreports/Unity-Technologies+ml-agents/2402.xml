<bug id='2402' author='AidinD' open_date='2019-08-07T08:06:10Z' closed_time='2019-10-24T06:29:52Z'>
	<summary>RayPercieve2D.Perceive does not ignore self collider</summary>
	<description>
Describe the bug
A clear and concise description of what the bug is.
To Reproduce
Steps to reproduce the behavior:

Create a RayPerceive2D and shoot a ray.

Expected behaviour:
The float distance should show the distance to the tagged objects included in detectable objects if in range
Actual behaviour:
The distance is always 0 since it hits its own collider
It works if changing the layer to "Ignore "Raycast" layer.
	</description>
	<comments>
		<comment id='1' author='AidinD' date='2019-08-07T22:32:52Z'>
		Hi &lt;denchmark-link:https://github.com/AidinD&gt;@AidinD&lt;/denchmark-link&gt;
, is your RayPercieve inside the object? You might be able to increase the startOffset when calling Perceive to get out of the object.
		</comment>
		<comment id='2' author='AidinD' date='2019-08-08T07:37:17Z'>
		Hi &lt;denchmark-link:https://github.com/ervteng&gt;@ervteng&lt;/denchmark-link&gt;

Thank you for the response.

There is no argument for the offset in the 2D RayPercieve. Only in the 3D.
The 3D version seems to work without using an offset, why should the 2D behave differently?
Since we use detectable objects, wouldn't it be more intuitive if ONLY objects with these tags were considered? Meaning, the objects itself (unless assigned one of the detectable tags) should not be considered.

		</comment>
		<comment id='3' author='AidinD' date='2019-08-14T19:52:53Z'>
		&lt;denchmark-link:https://github.com/awjuliani&gt;@awjuliani&lt;/denchmark-link&gt;
 are you familiar with the collider for 2D RayPercieve?
As for 3. I believe that is the case for the 3D case. But not sure why this would be different for 2D.
		</comment>
		<comment id='4' author='AidinD' date='2019-08-15T00:47:40Z'>
		There should be no difference between the two in terms of how they do or don't ignore objects. Are you sure that the ray begins within the object that needs to be ignored?
		</comment>
		<comment id='5' author='AidinD' date='2019-08-15T06:28:02Z'>
		&lt;denchmark-link:https://github.com/awjuliani&gt;@awjuliani&lt;/denchmark-link&gt;
 I did a quick setup and took a few screenshots to show my setup and highlight the issue.
Here is the agent code and this is the only script used in the project except for an empty Academy script:
using System.Collections;
using System.Collections.Generic;
using MLAgents;
using UnityEngine;
&lt;denchmark-code&gt;public class Circle : Agent {

    private RayPerception2D rayPerception;

    public override void InitializeAgent () {
        rayPerception = GetComponent&lt;RayPerception2D&gt; ();
    }

    public override void AgentReset () {

    }

    public override void CollectObservations () {
        float rayDistance = 5f;
        float[] rayAngles = { 0f };
        string[] detectableObjects = { "wall" };

        var rayValues = rayPerception.Perceive (rayDistance, rayAngles, detectableObjects);

        Debug.Log (rayValues[0]);
        Debug.Log (rayValues[1]);
        Debug.Log (rayValues[2]);

        AddVectorObs (rayValues);
    }

    public override void AgentAction (float[] vectorAction, string textAction) {

    }
}
&lt;/denchmark-code&gt;

The first screenshot shows a non working scenario. You can see in the console output that all the values that are returned from the rayPerception2D are zeroes. Note that the agent is untagged while the Wall is tagged as "wall" and both are inside the "Default" layer.
&lt;denchmark-link:https://user-images.githubusercontent.com/8180556/63076693-624f1580-bf36-11e9-868f-18362432b9d2.PNG&gt;&lt;/denchmark-link&gt;

In this second screenshot you can see that we actually get non zero values back from the rayPerception2D. The only difference now is that the agent is put inside the "Ignore Raycast" layer.
&lt;denchmark-link:https://user-images.githubusercontent.com/8180556/63076765-96c2d180-bf36-11e9-875b-71f34007ecea.PNG&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='AidinD' date='2019-10-23T21:53:13Z'>
		I am having the same issue, I've been trying to figure out why my machine learning samples do not work until I found out the same problem and wanted to report.
		</comment>
		<comment id='7' author='AidinD' date='2019-10-23T23:03:42Z'>
		It appears that the different physics systems handle raycasts which start inside a collider differently:
For 2D: &lt;denchmark-link:https://docs.unity3d.com/ScriptReference/Physics2D.Raycast.html&gt;https://docs.unity3d.com/ScriptReference/Physics2D.Raycast.html&lt;/denchmark-link&gt;


Additionally, this will also detect Collider(s) at the start of the ray. In this case, the ray starts inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated, in which case the returned collision normal is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero.

For 3D: &lt;denchmark-link:https://docs.unity3d.com/ScriptReference/Physics.Raycast.html&gt;https://docs.unity3d.com/ScriptReference/Physics.Raycast.html&lt;/denchmark-link&gt;


Note: Raycasts will not detect Colliders for which the Raycast origin is inside the Collider.

This is a property of the physics systems, so there's not much that the RayPerception code can do about it right now.
		</comment>
		<comment id='8' author='AidinD' date='2019-10-23T23:06:22Z'>
		&lt;denchmark-link:https://user-images.githubusercontent.com/1356616/67440760-13b19d80-f5af-11e9-870c-b8c099819778.png&gt;&lt;/denchmark-link&gt;

If you got into Edit -&gt; Project Settings -&gt; Physics2D, uncheck the  checkbox and see if that helps.
		</comment>
		<comment id='9' author='AidinD' date='2019-10-24T06:29:52Z'>
		Thank you very much. I have totally missed this setting!
I will close this now.
		</comment>
	</comments>
</bug>