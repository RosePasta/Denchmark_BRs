<bug id='1897' author='SetoKaiba' open_date='2019-04-05T05:11:50Z' closed_time='2019-05-22T12:56:37Z'>
	<summary>Problem with Barracuda</summary>
	<description>
I successfully trained my game and generated working nn models before.
But I just found it didn't working rencently.
Before it didn't work, I migrated the ml-agents python side to TF 2.0.
And I modify the RayPerception to use native collections to avoid the high GC Alloc per FixedUpdate.
I try to train it on TF 1.7.1 with RayPerception reverted and generate nn on TF 1.7.1.
But it still doesn't work.


Here's the Exception:


ArgumentException: Off-axis dimensions must match
Barracuda.TensorExtensions.Concat (Barracuda.TensorShape[] shapes, System.Int32 axis) (at &lt;1071b9a446b04698af9605e3e272de23&gt;:0)
Barracuda.ModelAnalyzer.ListTemporaryTensorShapes (Barracuda.Model model, System.Collections.Generic.IDictionary2[TKey,TValue] inputShapes, System.Collections.Generic.IDictionary2[System.String,Barracuda.TensorShape]&amp; shapesByName) (at &lt;1071b9a446b04698af9605e3e272de23&gt;:0)
Barracuda.ModelAnalyzer.TryGetOutputTensorShape (Barracuda.Model model, System.Collections.Generic.IDictionary`2[TKey,TValue] inputShapes, System.String output, Barracuda.TensorShape&amp; shape) (at &lt;1071b9a446b04698af9605e3e272de23&gt;:0)
Barracuda.ModelAnalyzer.TryGetOutputTensorShape (Barracuda.Model model, System.String output, Barracuda.TensorShape&amp; shape) (at &lt;1071b9a446b04698af9605e3e272de23&gt;:0)
Barracuda.ModelMetadataExtensions.GetShapeByName (Barracuda.Model model, System.String name) (at &lt;1071b9a446b04698af9605e3e272de23&gt;:0)
MLAgents.InferenceBrain.BarracudaModelParamLoader.CheckOutputTensorShape (MLAgents.InferenceBrain.BarracudaModelParamLoader+ModelActionType isContinuous, System.Int32 modelActionSize) (at Assets/ML-Agents/Scripts/InferenceBrain/BarracudaModelParamLoader.cs:477)
MLAgents.InferenceBrain.BarracudaModelParamLoader.GenerateChecks () (at Assets/ML-Agents/Scripts/InferenceBrain/BarracudaModelParamLoader.cs:187)
MLAgents.InferenceBrain.BarracudaModelParamLoader.GetLoaderAndCheck (Barracuda.IWorker engine, Barracuda.Model model, MLAgents.BrainParameters brainParameters) (at Assets/ML-Agents/Scripts/InferenceBrain/BarracudaModelParamLoader.cs:47)
MLAgents.LearningBrain.ReloadModel (System.Int32 seed) (at Assets/ML-Agents/Scripts/LearningBrain.cs:126)
MLAgents.LearningBrainEditor.OnInspectorGUI () (at Assets/ML-Agents/Editor/LearningBrainEditor.cs:60)
UnityEditor.UIElements.InspectorElement+c__AnonStorey1.&lt;&gt;m__0 () (at C:/buildslave/unity/build/Editor/Mono/Inspector/InspectorElement.cs:441)
UnityEngine.GUIUtility:ProcessEvent(Int32, IntPtr)


Here's the nn file and the folders containing frozen graph and so on.
You can find the exception just by drag the nn model to the brain.
&lt;denchmark-link:https://www65.zippyshare.com/v/e6b6QOJZ/file.html&gt;https://www65.zippyshare.com/v/e6b6QOJZ/file.html&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='SetoKaiba' date='2019-04-05T05:54:21Z'>
		It's caused by RNN. The problem have gone after "use recurrent: true" is removed.
		</comment>
		<comment id='2' author='SetoKaiba' date='2019-04-05T12:08:38Z'>
		OK. I find out how to reproduce this bug.
RNN with more than one branch discrete vector action space.
Just add two more branches to Hallway.
I find no documentation mentioning not to use discrete vector action branches with recurrent.
So I think it's a bug.
		</comment>
		<comment id='3' author='SetoKaiba' date='2019-04-05T17:10:15Z'>
		I was able to reproduce this bug. It is related to our Inference Engine. We will work on it but I do not think we will be able to fix this by the next release.
		</comment>
		<comment id='4' author='SetoKaiba' date='2019-04-05T17:13:02Z'>
		Thank you. Just to know that you're aware this bug and fixing it is fair enough.
		</comment>
		<comment id='5' author='SetoKaiba' date='2019-04-19T10:58:03Z'>
		Any update on this?
		</comment>
		<comment id='6' author='SetoKaiba' date='2019-04-19T16:53:53Z'>
		This will require an update on the Inference Engine and probably a new release of the mlagents package. Ideally in the next major release.
&lt;denchmark-link:https://github.com/mantasp&gt;@mantasp&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='7' author='SetoKaiba' date='2019-05-16T15:33:58Z'>
		Hi &lt;denchmark-link:https://github.com/SetoKaiba&gt;@SetoKaiba&lt;/denchmark-link&gt;
,
we have fix in the works, could you please try it on our development branch: &lt;denchmark-link:https://github.com/Unity-Technologies/ml-agents/tree/develop-barracuda-0.2.0&gt;https://github.com/Unity-Technologies/ml-agents/tree/develop-barracuda-0.2.0&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='8' author='SetoKaiba' date='2019-05-20T16:59:34Z'>
		I just test it. It works now. Thank you. Will the barracuda inference engine be open source in the future? Or will it just keep closed source?
		</comment>
		<comment id='9' author='SetoKaiba' date='2019-05-22T12:56:37Z'>
		Great to hear that it works now!

Will the barracuda inference engine be open source in the future?

Most likely yes, but we don't have clear dates for that.
		</comment>
	</comments>
</bug>