<bug id='4082' author='danmac03' open_date='2020-06-05T14:36:55Z' closed_time='2020-06-08T17:52:53Z'>
	<summary>Barracuda Object detection in an AR Scene</summary>
	<description>

Application crash when executing model with barracuda 1.0.0 (and older version). I am getting the texture from my AR Camera background, pushing it to a 2d texture, scalling it to 416x416, creating a tensor and trying to execute if for object detection but my application closes when I execute it without giving me any information. I based my code on this example with their models: &lt;denchmark-link:https://github.com/Syn-McJ/TFClassify-Unity-Barracuda&gt;https://github.com/Syn-McJ/TFClassify-Unity-Barracuda&lt;/denchmark-link&gt;

To Reproduce
Both an AR application with code looking like this:
&lt;denchmark-code&gt;public IEnumerator SaveCameraView()
    {
        yield return new WaitForEndOfFrame();
 
        RenderTexture texture = new RenderTexture(securityCamera.pixelWidth, securityCamera.pixelHeight, 0);
        Graphics.Blit(null, texture, test.material);
 
        Texture2D texture2D = new Texture2D(texture.width, texture.height, TextureFormat.RGB24, false);
        texture2D.ReadPixels(new Rect(0, 0, texture.width, texture.height), 0, 0);
        texture2D.Apply();
 
        TFDetect(texture2D);
    }
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;public void Start()
    {
        this.labels = Regex.Split(this.labelsFile.text, "\n|\r|\r\n")
            .Where(s =&gt; !String.IsNullOrEmpty(s)).ToArray();
        var model = ModelLoader.Load(this.modelFile, verbose: true);
        this.worker = WorkerFactory.CreateWorker(WorkerFactory.Type.ComputePrecompiled, model);
    }
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;public IEnumerator Detect(Color32[] texture, System.Action&lt;IList&lt;BoundingBox&gt;&gt; callback)
    {
        using (var tensor = TransformInput(texture, Detector.IMAGE_SIZE, Detector.IMAGE_SIZE))
        {
            var inputs = new Dictionary&lt;string, Tensor&gt;();
            inputs.Add(Detector.INPUT_NAME, tensor);
           
            yield return StartCoroutine(worker.ExecuteAsync(inputs));
 
            var output = worker.PeekOutput(Detector.OUTPUT_NAME);
 
            var results = ParseOutputs(output);
 
            callback(new List&lt;BoundingBox&gt;());
        }
    }
 
 
    public static Tensor TransformInput(Color32[] texture, int width, int height)
    {
        float[] floatValues = new float[width * height * 3];
 
        for (int i = 0; i &lt; texture.Length; ++i)
        {
            var color = texture[i];
 
            floatValues[i * 3 + 0] = (color.r) / IMAGE_STD;
            floatValues[i * 3 + 1] = (color.g) / IMAGE_STD;
            floatValues[i * 3 + 2] = (color.b) / IMAGE_STD;
        }
 
        return new Tensor(1, height, width, 3, floatValues);
    }
&lt;/denchmark-code&gt;

Environment (please complete the following information):

Unity 2019.3.9f1
Android Pixel 3A
Barracuda 1.0.0 (or with the 0.0.7)

What am I doing wrong? Is there a way to get more information on what is happening behind the scene before the crash? Tried using the verbose mode but does not really help me.
	</description>
	<comments>
		<comment id='1' author='danmac03' date='2020-06-08T17:36:09Z'>
		Hi &lt;denchmark-link:https://github.com/danmac03&gt;@danmac03&lt;/denchmark-link&gt;

This seems like an issue thats more appropriate for the barracuda project. Please open an issue there  &lt;denchmark-link:https://github.com/Unity-Technologies/barracuda-release/issues&gt;https://github.com/Unity-Technologies/barracuda-release/issues&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='danmac03' date='2020-06-08T17:43:24Z'>
		I'll post there. Thank you!
&lt;denchmark-link:https://github.com/Unity-Technologies/barracuda-release/issues/58&gt;Unity-Technologies/barracuda-release#58&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>