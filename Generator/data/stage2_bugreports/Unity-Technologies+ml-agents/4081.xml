<bug id='4081' author='verilune' open_date='2020-06-05T09:32:17Z' closed_time='2020-06-06T17:08:49Z'>
	<summary>VectorSensor script causes ExecutionEngineException on ios.</summary>
	<description>
Describe the bug
VectorSensor script causes ExecutionEngineException on ios. The project works fine on Windows but causes exception when run on iPhone. I think declaration and use of the variable
&lt;denchmark-code&gt;List&lt;float&gt; m_Observations;
&lt;/denchmark-code&gt;

in the script requires/depends on LINQ causes this.
To Reproduce
Steps to reproduce the behavior:

Create an ml agent project incorporating an agent and usage of VectorSensor script in project
Build for ios
Run on iPhone device

Console logs / stack traces
&lt;denchmark-code&gt;ExecutionEngineException: Attempting to call method 'System.Linq.Expressions.Interpreter.LightLambda::MakeRun3&lt;System.Runtime.CompilerServices.CallSite,System.Object,UnityEngine.Vector3,System.Object&gt;' for which no ahead of time (AOT) code was generated.\
  at System.Func`2[T,TResult].Invoke (T arg) [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at System.Linq.Expressions.Interpreter.LightLambda.MakeDelegate (System.Type delegateType) [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate (System.Runtime.CompilerServices.IStrongBox[] closure) [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate () [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at System.Linq.Expressions.Expression`1[TDelegate].Compile (System.Boolean preferInterpretation) [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at System.Linq.Expressions.Expression`1[TDelegate].Compile () [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at System.Runtime.CompilerServices.CallSite`1[T].CreateCustomNoMatchDelegate (System.Reflection.MethodInfo invoke) [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at System.Runtime.CompilerServices.CallSite`1[T].MakeUpdateDelegate () [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at System.Runtime.CompilerServices.CallSite`1[T].GetUpdateDelegate (T&amp; addr) [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at System.Runtime.CompilerServices.CallSite`1[T].GetUpdateDelegate () [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at System.Runtime.CompilerServices.CallSite`1[T]..ctor (System.Runtime.CompilerServices.CallSiteBinder binder) [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at System.Runtime.CompilerServices.CallSite`1[T].Create (System.Runtime.CompilerServices.CallSiteBinder binder) [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at AdvancedAgent.CollectObservations (Unity.MLAgents.Sensors.VectorSensor sensor) [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at Unity.MLAgents.Agent.SendInfoToBrain () [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at Unity.MLAgents.Agent.SendInfo () [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at System.Action.Invoke () [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at Unity.MLAgents.Academy.EnvironmentStep () [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
  at Unity.MLAgents.AcademyFixedUpdateStepper.FixedUpdate () [0x00000] in &lt;00000000000000000000000000000000&gt;:0 \
 \
(Filename: currently not available on il2cpp Line: -1)\
\
&lt;/denchmark-code&gt;

Environment

Unity Version: [e.g. Unity 2019.3.15f1]
OS + version: iOS 13
ML-Agents version: ML-Agents Release 1
TensorFlow version: Not Applicable
Environment: Developed on Windows, Built for iOS

	</description>
	<comments>
		<comment id='1' author='verilune' date='2020-06-05T16:19:28Z'>
		Can you post the contents of your AdvancedAgent.CollectObservations method? Can you try commenting out the contents of that method to see if that makes the error go away (since that's where the exception is coming from)?
		</comment>
		<comment id='2' author='verilune' date='2020-06-05T21:20:02Z'>
		
Can you post the contents of your AdvancedAgent.CollectObservations method? Can you try commenting out the contents of that method to see if that makes the error go away (since that's where the exception is coming from)?

chriselion, I commented out the method and the error does not occur, the agent is running now. I need to use VectorSensor any chance we could convert the variable from List to array so it will work on ios?
		</comment>
		<comment id='3' author='verilune' date='2020-06-05T21:28:09Z'>
		We use List&lt;float&gt; in lots of other places, not just here. Can you please post your code? I think that's the source of the problem, since AdvancedAgent.CollectObservations is the last thing in the callstack before the system calls.
		</comment>
		<comment id='4' author='verilune' date='2020-06-05T21:32:52Z'>
		Ok, I see! Please see the code of CollectObservation below. The base.CollectObservation calls the base class and that code is also found below.
&lt;denchmark-code&gt;    public override void CollectObservations(VectorSensor sensor)
    {
        base.CollectObservations(sensor);

        Vector3 pos = transform.position;
        Vector3 fwd = transform.forward;
        boostAcceleration = 0;

        // Ideally, it should be up to the agent to decide which opponent it follows.
        // That would require observing a variable number (up to 19 in this case) of 
        // opponents though. To simplify things, we focus on only two - one in front, 
        // and one behind the agent.

        for (int i = 0; i &lt; opponents.Length; i++)
        {
            opponents[i].Update(fwd, opponents[i].Agent.transform.position - pos);
        }
        Array.Sort(opponents); // by distance

        bool hasFrontOpponent = false;
        bool hasRearOpponent = false;
        // Iterate from closest to farthest.
        for (int i = 0; i &lt; opponents.Length; i++)
        {
            if (opponents[i].DirDot &gt; 0)
            {
                if (!hasFrontOpponent)
                {
                    oppFront = opponents[i];
                    hasFrontOpponent = true;
                }
            }
            else if (!hasRearOpponent)
            {
                oppRear = opponents[i];
                hasRearOpponent = true;
            }

            if (hasFrontOpponent &amp;&amp; hasRearOpponent)
            {
                break;
            }
        }

        AdvancedAgent oppAgent;

        if (hasFrontOpponent)
        {
            const float followMaxSqrDistance = 10000;
            if (oppFront.DirDot &lt; oppCurrent.DirDot &amp;&amp; oppCurrent.SqrDistance &lt; followMaxSqrDistance)
            {
                // Keep following oppCurrent if that requires less steering,
                // even if another opponent is now closer.
                oppFront = oppCurrent;
            }
            else
            {
                // oppFront.DirDot &lt; oppCurrent.DirDot is false if closest opponent didn't change.
                oppCurrent = oppFront;
            }

            oppAgent = oppFront.Agent;

            if (hasAgentDetection)
            {
                // Another agent was detected straight ahead (raycast).
                // +1 -&gt; Clear shot.
                // -1 -&gt; Blocked by team member.
                bool hasClearShot = detectedCollider == oppAgent.AgentPhysics.Collider;
                sensor.AddObservation((hasClearShot ? 1 : -1));
            }
            else
            {
                sensor.AddObservation((0));
            }

            float distance = Mathf.Sqrt(oppFront.SqrDistance);
            sensor.AddObservation((NormalizeDistance(distance)));

            Vector3 direction = Localize(oppFront.Direction);
            sensor.AddObservation((Util.ToPolar(direction) / 90f)); // front hemisphere -90/+90 deg

            Vector3 orientation = Localize(oppAgent.transform.forward);
            sensor.AddObservation((Util.ToPolar(orientation) / 180f));

            Vector3 velocity = Localize(oppAgent.AgentPhysics.Rigidbody.velocity) * velocityScale;
            sensor.AddObservation((Util.Sigmoid(velocity)));

            // Reward forward velocity like with BasicAgent, but focus reward on opponent
            // direction. Training should start with a low exponent, can be increased later.
            const int followRewardExp = 4;
            float reward = scaledLocalVelocity.z * velocityRewardFactor;
            reward *= Util.PowInt(direction.z, followRewardExp);
            AddReward(reward);

            // Boost acceleration if ship is pointed towards opponent.
            const int boostExp = 1;
            const float boostFactor = 0.25f;
            boostAcceleration = Util.PowInt(direction.z, boostExp) * boostFactor;
        }
        else
        {
            // Neutral values.
            sensor.AddObservation((0));
            sensor.AddObservation((1));
            sensor.AddObservation((Vector2.zero));
            sensor.AddObservation((Vector2.zero));
            sensor.AddObservation((Vector3.zero));
        }

        sensor.AddObservation((hasFrontOpponent ? 1 : -1));

        if (hasRearOpponent)
        {
            oppAgent = oppRear.Agent;

            float distance = Mathf.Sqrt(oppRear.SqrDistance);
            sensor.AddObservation((NormalizeDistance(distance)));

            Vector3 direction = Localize(oppRear.Direction);
            if (!hasFrontOpponent)
            {
                // Turn around to face rear opponent, direction.z is negative here.
                AddReward(direction.z);
            }
            direction.z *= -1f; // rear -&gt; flip 
            sensor.AddObservation((Util.ToPolar(direction) / 90f)); // rear hemisphere -90/+90 deg

            Vector3 orientation = Localize(oppAgent.transform.forward);
            sensor.AddObservation((Util.ToPolar(orientation) / 180f));

            Vector3 velocity = Localize(oppAgent.AgentPhysics.Rigidbody.velocity) * velocityScale;
            sensor.AddObservation((Util.Sigmoid(velocity)));
        }
        else
        {
            // Neutral values.
            sensor.AddObservation((1));
            sensor.AddObservation((Vector2.zero));
            sensor.AddObservation((Vector2.zero));
            sensor.AddObservation((Vector3.zero));
        }
    }
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;Base class code:

public override void CollectObservations(VectorSensor sensor)
    {
        Rigidbody rb = AgentPhysics.Rigidbody;
        // Measured max z is 48 with drag = 2, force multiplier = 2
        // Can be higher with AdvancedAgent's additional boost.
        scaledLocalVelocity = Localize(rb.velocity) * velocityScale;
        sensor.AddObservation((Util.Sigmoid(scaledLocalVelocity)));
        // Measured max is 7 with angular drag = 5, torque multiplier = 1
        sensor.AddObservation((Util.Sigmoid(Localize(rb.angularVelocity) * 0.5f)));

        Vector3 pos = transform.position;
        CastRays(pos, sensor);

        if (isBasic)
        {
            // Neutral values for initial training without opponents.
            sensor.AddObservation(0); // detected agent (raycast)
            sensor.AddObservation(1); // front opponent distance
            sensor.AddObservation(Vector2.zero); // front opponent direction
            sensor.AddObservation(Vector2.zero); // front opponent orientation
            sensor.AddObservation(Vector3.zero); // front opponent velocity
            sensor.AddObservation(1); // has front opponent
            sensor.AddObservation(1); // rear opponent distance
            sensor.AddObservation(Vector2.zero); // rear opponent direction 
            sensor.AddObservation(Vector2.zero); // rear opponent orientation 
            sensor.AddObservation(Vector3.zero); // rear opponent velocity 

            // Reward forward speed.
            AddReward(scaledLocalVelocity.z * velocityRewardFactor);

            // One agent per asteroid field.
            asteroidField.UpdateBounds(pos);
        }
    }

&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='verilune' date='2020-06-05T22:10:19Z'>
		The only thing that jumps out at me is the Array.Sort call - do you still get the error if you comment that out?
If it's not that, can you try a development build (or anything with a lower optimization level) in case inlining is obscuring the callstack?
		</comment>
		<comment id='6' author='verilune' date='2020-06-06T17:08:48Z'>
		I found the problem using debugger, agent was set to dynamic in opponent class, cause I wanted to add player as opponent with expandoobject.
This line was causing the problem:
opponents[i].Update(fwd, opponents[i].Agent.transform.position - pos); (where agent was dynamic type).
Thanks for the help
		</comment>
	</comments>
</bug>