<bug id='2511' author='chenmingxiang110' open_date='2019-09-09T03:35:58Z' closed_time='2019-09-27T17:59:38Z'>
	<summary>Ray Perception return zeros.</summary>
	<description>
I am trying to use ray perception to get the distance between my player and the object in my 3D game. Normally it should return something like 1,0,0,0.2987161. But in my project, it returns four zero.
As shown here, the player controls a forklift like this
&lt;denchmark-link:https://user-images.githubusercontent.com/25835726/64501642-c4f8be80-d2f4-11e9-8f8a-e9cbdfebf3b0.png&gt;&lt;/denchmark-link&gt;

and there are several component inside
&lt;denchmark-link:https://user-images.githubusercontent.com/25835726/64501682-ed80b880-d2f4-11e9-8cc7-25831a5ae065.png&gt;&lt;/denchmark-link&gt;

The script is written in "Forklift" object, where I only used two angles:
float[] rayAngles = new float[]{42f, 48f};
and I output the result:
string[] detectableObjects = {"cargo", "ground"};
List&lt;float&gt; rayobs = rayPer.Perceive(rayDistance, rayAngles, detectableObjects, 0.7f, 0.7f);
Debug.Log(rayobs.Count+","+rayobs[0]+","+rayobs[1]+","+rayobs[2]+","+rayobs[3]+","+rayobs[4]+","+rayobs[5]+","+rayobs[6]+","+rayobs[7]);
The output is as follows:
8,1,0,0,0.2987161,0,0,0,0
Then I think probably the platform and the mast (both of them are tagged as "player" which is not in the list of detectable objects) blocked the ray, so I set the height of them to 100f, which solved the problem.
I am thinking is there a way to solve this problem not by removing my platform and mast? Thank you very much.
	</description>
	<comments>
		<comment id='1' author='chenmingxiang110' date='2019-09-09T21:14:08Z'>
		Hi &lt;denchmark-link:https://github.com/chenmingxiang110&gt;@chenmingxiang110&lt;/denchmark-link&gt;
,
I think you're correct that they rays hit another object besides the ones that you're looking for.
I'm not an expert on Unity's Physics system, but I think the best fix would be to change where we perform the raycast (actually a sphere cast) here:


and pass a layerMask to the  call:
&lt;denchmark-link:https://docs.unity3d.com/ScriptReference/Physics.SphereCast.html&gt;https://docs.unity3d.com/ScriptReference/Physics.SphereCast.html&lt;/denchmark-link&gt;

More information on forming the LayerMask is here &lt;denchmark-link:https://docs.unity3d.com/Manual/Layers.html&gt;https://docs.unity3d.com/Manual/Layers.html&lt;/denchmark-link&gt;

Can you give that a try and see if it helps? If so, I'll log a request to add it to a future version of the SDK.
		</comment>
		<comment id='2' author='chenmingxiang110' date='2019-09-11T22:26:06Z'>
		To the above: layer masking is pretty simply done by passing the tags of objects you want your agent to see.
e.g. something like (incomplete)
public class BeepoAgent : Agent
{
    public float rayDistance = 12f;
    public float rayHeight = 1.5f;
    RayPerception rayPer;

    public override void InitializeAgent()
    {
        base.InitializeAgent();
        rayPer = GetComponent&lt;RayPerception&gt;();
    }

    public override void CollectObservations()
    {
        float[] rayAngles = { 0f, 45f, 70f, 90f, 110f, 135f, 180f };
        string[] detectableObjects = { "crate", "goal", "wall" };

        AddVectorObs(rayPer.Perceive(rayDistance, rayAngles, detectableObjects, 0f, 0f));
        AddVectorObs(rayPer.Perceive(rayDistance, rayAngles, detectableObjects, rayHeight, 0f));
    }
}
Hope that helps üëç
EDIT: if this is being caused by self-collision then it likely relates to &lt;denchmark-link:https://github.com/Unity-Technologies/ml-agents/issues/2402&gt;#2402&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='chenmingxiang110' date='2019-09-25T07:24:20Z'>
		
Hi @chenmingxiang110,
I think you're correct that they rays hit another object besides the ones that you're looking for.
I'm not an expert on Unity's Physics system, but I think the best fix would be to change where we perform the raycast (actually a sphere cast) here:



ml-agents/UnitySDK/Assets/ML-Agents/Examples/SharedAssets/Scripts/RayPerception3D.cs


        Lines 61 to 63
      in
      035045e






 if (Physics.SphereCast(transform.position + 



 new Vector3(0f, startOffset, 0f), 0.5f, 



 endPosition, out hit, rayDistance)) 





and pass a layerMask to the SphereCast call:
https://docs.unity3d.com/ScriptReference/Physics.SphereCast.html
More information on forming the LayerMask is here https://docs.unity3d.com/Manual/Layers.html
Can you give that a try and see if it helps? If so, I'll log a request to add it to a future version of the SDK.

Thank you &lt;denchmark-link:https://github.com/chriselion&gt;@chriselion&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/TheMartianLife&gt;@TheMartianLife&lt;/denchmark-link&gt;
 . Very sorry for the late reply. The good news is layer mask solved the problem. The code here


is now as follows:
 int layerMask = 1 &lt;&lt; 8;
 if (Physics.SphereCast(transform.position +
     new Vector3(0f, startOffset, 0f), 0.5f,
     endPosition, out hit, rayDistance, layerMask))
where the cargo layer is layer 8. Now the ray can correctly find the cargo (I tested every other 5 degrees from 0 to 360). If the layer mask feature can be added to the latest version of ml-agent that would be great.
		</comment>
		<comment id='4' author='chenmingxiang110' date='2019-09-25T16:48:49Z'>
		Thanks &lt;denchmark-link:https://github.com/chenmingxiang110&gt;@chenmingxiang110&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/TheMartianLife&gt;@TheMartianLife&lt;/denchmark-link&gt;
. Glad you were able to resolve your issue.
If you can make a PR with your change, that would be great (you'll probably need to pass the mask as a parameter and make it default to DefaultRaycastLayers). Otherwise, we'll try to get to it soon, but we've already made the next release branch (for 0.10.0) so it won't make it into that one.
		</comment>
		<comment id='5' author='chenmingxiang110' date='2019-09-27T17:59:38Z'>
		Our internal tracking for this feature is MLA-16. I'll close this issue for now...
		</comment>
	</comments>
</bug>