<bug id='753' author='ohsewon' open_date='2018-11-02T07:06:24Z' closed_time='2018-11-14T02:49:58Z'>
	<summary>[AWS Kernel] v4l2loopback.ko: There is no media.ko kenel module</summary>
	<description>
kenel module is missng.
$ ls /lib/modules/`uname -r`/kernel/drivers/media
ls: cannot access '/lib/modules/`uname -r`/kernel/drivers/media': No such file or directory
	</description>
	<comments>
		<comment id='1' author='ohsewon' date='2018-11-02T07:06:26Z'>
		 : Thank you for posting issue &lt;denchmark-link:https://github.com/nnstreamer/nnstreamer/issues/753&gt;#753&lt;/denchmark-link&gt;
. The person in charge will reply soon.
		</comment>
		<comment id='2' author='ohsewon' date='2018-11-02T07:43:50Z'>
		Looks like the shell does not accept ` as noramlly bash does. Check the shell.
		</comment>
		<comment id='3' author='ohsewon' date='2018-11-03T02:23:01Z'>
		The symbol (`) will be normal because the grammar is portable among shells. It seems that this issue is resulted form the custom AWS kernel of Amazon. It meas that they do not use a generic kernel config. Maybe, we need to add "Multimedia core support" kernel feature.
As a workaround, we can use /boot/vmlinuz-4.4.0-138-generic instead of /boot/vmlinuz-4.4.0-1070-aws. But, I am not sure that vmlinuz-4.4.0-138-generic kernel image does not generate another issue.

Analysis:

ubuntu@ip-172-31-27-164:~$ ls -al /boot/vmlinuz-4.4.0-1*
-rw------- 1 root root 7003872  8ì›” 27 17:32 /boot/vmlinuz-4.4.0-1067-aws
-rw------- 1 root root 7008608 10ì›”  4 14:36 /boot/vmlinuz-4.4.0-1070-aws
-rw------- 1 root root 7166688 10ì›”  2 19:22 /boot/vmlinuz-4.4.0-138-generic
ubuntu@ip-172-31-27-164:~$
ubuntu@ip-172-31-27-164:~$ cat /boot/grub/menu.lst | grep "^title"
title           Ubuntu 16.04.5 LTS, kernel 4.4.0-1070-aws
title           Ubuntu 16.04.5 LTS, kernel 4.4.0-1070-aws (recovery mode)
title           Ubuntu 16.04.5 LTS, kernel 4.4.0-1067-aws
title           Ubuntu 16.04.5 LTS, kernel 4.4.0-1067-aws (recovery mode)
title           Ubuntu 16.04.5 LTS, kernel 4.4.0-138-generic
title           Ubuntu 16.04.5 LTS, kernel 4.4.0-138-generic (recovery mode)
title           Ubuntu 16.04.5 LTS, memtest86+
ubuntu@ip-172-31-27-164:~$
ubuntu@ip-172-31-27-164:~$ cat /proc/cmdline
BOOT_IMAGE=/boot/vmlinuz-4.4.0-1070-aws root=UUID=fc9a41df-6d71-4f4f-a487-e5999bd67182 
ro console=tty1 console=ttyS0 nvme.io_timeout=4294967295
ubuntu@ip-172-31-27-164:~$ 
ubuntu@ip-172-31-27-164:~$ 
ubuntu@ip-172-31-27-164:~$ uname -a
Linux ip-172-31-27-164 4.4.0-1070-aws #80-Ubuntu SMP Thu Oct 4 13:56:07 
UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
ubuntu@ip-172-31-27-164:~$
ubuntu@ip-172-31-27-164:~$
ubuntu@ip-172-31-27-164:~$ cat  /boot/config-4.4.0-1067-aws  | grep MEDIA_CONTROLLER
ubuntu@ip-172-31-27-164:~$

Partitions:

ubuntu@ip-172-31-27-164:~$ uname -a
Linux ip-172-31-27-164 4.4.0-1070-aws #80-Ubuntu SMP Thu Oct 4 13:56:07 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
ubuntu@ip-172-31-27-164:~$
ubuntu@ip-172-31-27-164:~$ cat /proc/partitions
major minor  #blocks  name

   1        0      65536 ram0
   1        1      65536 ram1
   1        2      65536 ram2
   1        3      65536 ram3
   1        4      65536 ram4
   1        5      65536 ram5
   1        6      65536 ram6
   1        7      65536 ram7
   1        8      65536 ram8
   1        9      65536 ram9
   1       10      65536 ram10
   1       11      65536 ram11
   1       12      65536 ram12
   1       13      65536 ram13
   1       14      65536 ram14
   1       15      65536 ram15
 202        0  134217728 xvda
 202        1  134216687 xvda1
 202       80  268435456 xvdf
 202       81   33554432 xvdf1
 202       82  234880000 xvdf2

		</comment>
		<comment id='4' author='ohsewon' date='2018-11-05T05:12:47Z'>
		I propose two approaches as follows to resolve  this issue.

Reboot  the exsiting Ubuntu instance with /boot/vmlinuz-4.4.0-138-generic  after getiing snapshot image to avoid unexpected accident. Caution: It will be critical at boot time
Keep /boot/vmlinuz-4.4.0-1067-aws. Instead, append manually required kernel modules (e.g., media.ko --&gt; videodev.ko --&gt; v4l2loopback.ko). Caution:    I do not recommed this approach because administrator has to do more maintenance cost gradually.
Any idea?

		</comment>
		<comment id='5' author='ohsewon' date='2018-11-05T05:43:45Z'>
		Let's go with 1. but with fallback kernel (aws default).
Refer: &lt;denchmark-link:https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html&gt;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html&lt;/denchmark-link&gt;


Example:

aws$ sudo vi /boot/grub/menu.lst
default=0
fallback=1 &lt;================ HERE !!!!
timeout=5
serial --unit=0 --speed=9600
terminal --dumb --timeout=5 serial console
... OMISSION ...
		</comment>
		<comment id='6' author='ohsewon' date='2018-11-05T08:28:26Z'>
		
Let's go with 1. but with fallback kernel (aws default).

Okay. I summarized action items to execute the procedure apporach &lt;denchmark-link:https://github.com/nnstreamer/nnstreamer/issues/1&gt;#1&lt;/denchmark-link&gt;
 as follows.

 1. Stablize the current AWS Ubuntu instance. (by @ohsewon )
 2. Then, Generate a snapshot image from the stable AWS instance.  (by @leemgs)
 3. Check the sanpshot image if it can be booted normally.  (by @leemgs)
 4. If snapshot image is okay, let's try to reboot the exsiting AWS Ubuntu instance with fallback kernel
  including media.ko and videodev.ko (by @leemgs)
 5. Check our aggressive experiment.  As a result, we will get one between success/heaven and failure/hell. ðŸ˜º   (by @ohsewon , @leemgs)
 6. Re-enable camera-apptest of NNStreamer (by @ohsewon)

		</comment>
		<comment id='7' author='ohsewon' date='2018-11-09T00:11:11Z'>
		&lt;denchmark-link:https://github.com/ohsewon&gt;@ohsewon&lt;/denchmark-link&gt;
 Can I start  the Step2 procedure from now on?
		</comment>
		<comment id='8' author='ohsewon' date='2018-11-09T14:46:50Z'>
		
Changing default kernel

$sudo add-apt-repository ppa:danielrichter2007/grub-customizer
$sudo apt-get update
$sudo apt-get install grub-customizer
$sudo grub-customizer

With Vanilla kernel (generic)

ubuntu@ip-172-31-27-164:~$ uname -a
Linux ip-172-31-27-164 4.4.0-138-generic #164-Ubuntu SMP Tue Oct 2 17:16:02 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
ubuntu@ip-172-31-27-164:~$ cat /proc/partitions
major minor  #blocks  name

 202        0  134217728 xvda
 202        1  134216687 xvda1
 202       80  268435456 xvdf
 202       81   33554432 xvdf1
 202       82  234880000 xvdf2
ubuntu@ip-172-31-27-164:~$


ubuntu@ip-172-31-27-164:~$ df
Filesystem     1K-blocks     Used Available Use% Mounted on
udev            32956996        0  32956996   0% /dev
tmpfs            6595980     9388   6586592   1% /run
/dev/xvda1     130046416 13632268 116397764  11% /
tmpfs           32979880      248  32979632   1% /dev/shm
tmpfs               5120        0      5120   0% /run/lock
tmpfs           32979880        0  32979880   0% /sys/fs/cgroup
/dev/xvdf2     231063676 14390776 204912516   7% /var/www
tmpfs            6595980       12   6595968   1% /run/user/1000
tmpfs            6595980       16   6595964   1% /run/user/113
ubuntu@ip-172-31-27-164:~$
ubuntu@ip-172-31-27-164:~$
ubuntu@ip-172-31-27-164:~$ free
              total        used        free      shared  buff/cache   available
Mem:       65959764      431008    65072816       41104      455940    64958908
Swap:      33554428           0    33554428


		</comment>
		<comment id='9' author='ohsewon' date='2018-11-09T14:55:18Z'>
		Starting a mirroring test and live migration test between original instance and 2nd instance.
		</comment>
		<comment id='10' author='ohsewon' date='2018-11-10T06:16:27Z'>
		Currently, the work status to fix this issue is 60% .

#753 (comment)

		</comment>
		<comment id='11' author='ohsewon' date='2018-11-12T02:30:37Z'>
		
https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html

The website above doe not provide how to use the "fallback" mechanism of Grub.  In order to switch back safely to previous versions due to kernel problems, refer to an official Grub website as following:

Grub: How to use the "fallback" mechanism

https://www.gnu.org/software/grub/manual/legacy/Booting-fallback-systems.html



		</comment>
		<comment id='12' author='ohsewon' date='2018-11-12T04:21:24Z'>
		Now is okay after booting AWS Ubuntu with generic-kernel (instead of AWS-kernel).

media.ko

root@ip-172-31-27-164:~#
root@ip-172-31-27-164:~# lsmod | grep media
media                  24576  1 videodev
root@ip-172-31-27-164:~# modinfo media
filename:       /lib/modules/4.4.0-138-generic/kernel/drivers/media/media.ko
license:        GPL
description:    Device node registration for media drivers
author:         Laurent Pinchart &lt;laurent.pinchart@ideasonboard.com&gt;
srcversion:     4830C31A664AB3F255E8F3B
depends:
retpoline:      Y
intree:         Y
vermagic:       4.4.0-138-generic SMP mod_unload modversions retpoline
root@ip-172-31-27-164:~#
root@ip-172-31-27-164:~#

videodev.ko

&lt;denchmark-code&gt;root@ip-172-31-27-164:~# modinfo videodev
filename:       /lib/modules/4.4.0-138-generic/kernel/drivers/media/v4l2-core/videodev.ko
alias:          char-major-81-*
license:        GPL
description:    Device registrar for Video4Linux drivers v2
author:         Alan Cox, Mauro Carvalho Chehab &lt;mchehab@infradead.org&gt;
srcversion:     D7E46AEC39A193B8095F6F3
depends:        media
retpoline:      Y
intree:         Y
vermagic:       4.4.0-138-generic SMP mod_unload modversions retpoline
root@ip-172-31-27-164:~#
&lt;/denchmark-code&gt;


Kernel version

root@ip-172-31-27-164:~# uname -a
Linux ip-172-31-27-164 4.4.0-138-generic #164-Ubuntu SMP Tue Oct 2 17:16:02 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
root@ip-172-31-27-164:~#

		</comment>
		<comment id='13' author='ohsewon' date='2018-11-14T02:49:58Z'>
		after booting AWS Ubuntu with generic-kernel, 'nnstreamer-apptest' is working well.
done.
		</comment>
	</comments>
</bug>