<bug id='933' author='myungjoo' open_date='2018-11-29T01:48:42Z' closed_time='2018-11-29T08:02:11Z'>
	<summary>[Sync-Errors in Tensor_Repo] Possible deadlock / data inconsistency</summary>
	<description>
By looking at the code again, I'm seeing possible sync-errors that may cause DEADLOCKs:

tensor_repo.c::gst_tensor_repo_add_repodata

  GST_REPO_LOCK ();
  gpointer check = g_hash_table_lookup (_repo.hash, GINT_TO_POINTER (nth));

  if (check != NULL) {
    return TRUE;
}
You are returning without releasing the lock.


_repo.hash is often accessed without protection. You need to define which lock is protecting (GST_REPO_LOCK()??) and enforce using it whenever _repo.has is used.


When "nth" of _repo.hash is used, you need to ensure that nth's LOCK is ACQUIRED.


For 2.3., if an operation can be guaranteed to be atomic, it can be skipped with some special conditions, but it doesn't appear to be applicable in this code.
	</description>
	<comments>
		<comment id='1' author='myungjoo' date='2018-11-29T01:48:44Z'>
		 : Thank you for posting issue &lt;denchmark-link:https://github.com/nnstreamer/nnstreamer/issues/933&gt;#933&lt;/denchmark-link&gt;
. The person in charge will reply soon.
		</comment>
		<comment id='2' author='myungjoo' date='2018-11-29T02:09:10Z'>
		
Return without Releasing. I fixed. (PR #934)
I think we do not need to get the _repo.hash lock except some cases.
. remove and add nth TensorRepoData structure into hash table.
. create and remove has table.
For the access and wirte the GstBuffer, we could use TensorRepoData-&gt;lock and cond variables.
In order to make sure set and get the buffer correctly, another cond variable is introduced. (cond_pull, cond_push : PR #922).
I concerned this when I wrote the code, but I will check again.

		</comment>
	</comments>
</bug>