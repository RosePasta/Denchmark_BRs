<bug id='757' author='myungjoo' open_date='2018-11-02T09:48:31Z' closed_time='2018-11-05T14:15:57Z'>
	<summary>Check Buffer Deallocation</summary>
	<description>
There have been a lot of allegations that buffers created by our elements (mostly related with invoke, both allocating-invoker and non-allocating-invoker) are NEVER deallocated during an active stream pipeline.

 Verify if buffers from invoke-allocate are deallocated after the frame is done (no active element holding it)
 Verify if buffers from invoke-non-allocate (allocated by filter:main) are deallocated after the frame is done (no active element holding it)
 If the allegation is verified, FIX IT!

	</description>
	<comments>
		<comment id='1' author='myungjoo' date='2018-11-02T09:48:34Z'>
		 : Thank you for posting issue &lt;denchmark-link:https://github.com/nnstreamer/nnstreamer/issues/757&gt;#757&lt;/denchmark-link&gt;
. The person in charge will reply soon.
		</comment>
		<comment id='2' author='myungjoo' date='2018-11-02T10:19:45Z'>
		When an application connects a signal 'new-data' from tensor-sink and gets the data, received buffer may have ref count value 2.
Note that the app should handle the buffer only in the 'new-data' callback function, and do NOT call buffer-unref function.
		</comment>
		<comment id='3' author='myungjoo' date='2018-11-05T04:56:40Z'>
		&lt;denchmark-link:https://github.com/nnsuite/nnstreamer/files/2546986/filter_mem_test.zip&gt;filter_mem_test.zip&lt;/denchmark-link&gt;


allocate-invoke=false (example tf-lite)
gst-launch-1.0 v4l2src ! video/x-raw,format=RGB,framerates=30/1,width=640,height=480 ! tee name=t ! queue ! videoconvert ! fpsdisplaysink t. ! queue ! videoscale ! video/x-raw,width=224,height=224 ! tensor_converter ! tensor_filter framework=tensorflow-lite model=./tflite_model/mobilenet_v1_1.0_224_quant.tflite ! tensor_sink

&lt;denchmark-code&gt;** Message: ref count, mem=1, buffer=1 (mem block appended in tensor-filter)
** Message: buffer ref count=2 (before tensor-sink new-data signal)
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty
13761308   2617152     15.98    428044   1167408   4106436     12.40   1223364    985208        32
13761308   2617152     15.98    428044   1167408   4106436     12.40   1223364    985208        32
13761308   2617152     15.98    428044   1167408   4106436     12.40   1223364    985208        32
&lt;/denchmark-code&gt;


allocate-invoke=false (custom filter)
gst-launch-1.0 v4l2src ! video/x-raw,format=RGB,framerates=30/1,width=640,height=480 ! tensor_converter ! tensor_filter framework=custom model=./nnstreamer_example/custom_example_passthrough/libnnstreamer_customfilter_passthrough_variable.so ! tensor_sink

&lt;denchmark-code&gt;** Message: ref count, mem=1, buffer=1
** Message: buffer ref count=2
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty
13757288   2621172     16.00    442008   1164648   4096216     12.37   1217528    994928         8
13757288   2621172     16.00    442008   1164648   4096216     12.37   1217528    994928         8
13757288   2621172     16.00    442008   1164648   4096216     12.37   1217528    994928         8
13757288   2621172     16.00    442008   1164648   4096216     12.37   1217528    994928         8
&lt;/denchmark-code&gt;


allocate-invoke=true (custom filter)
gst-launch-1.0 v4l2src ! video/x-raw,format=RGB,framerates=30/1,width=640,height=480 ! tensor_converter ! tensor_filter framework=custom model=./nnstreamer_example/custom_example_scaler/libnnstreamer_customfilter_scaler_allocator.so ! tensor_sink

&lt;denchmark-code&gt;** Message: ref count, mem=1, buffer=1 (mem block appended in tensor-filter)
** Message: buffer ref count=2 (before tensor-sink new-data signal)
** Message: ref count, mem=1, buffer=1
** Message: destroy notify 0x7f5825e78010 (mem destroy notify in tensor-filter)
** Message: buffer ref count=2
** Message: ref count, mem=1, buffer=1
** Message: destroy notify 0x7f5825595010
** Message: buffer ref count=2
** Message: ref count, mem=1, buffer=1
** Message: destroy notify 0x7f58254b3010
** Message: buffer ref count=2
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty
13774672   2603788     15.90    435044   1165864   4062088     12.27   1206552    990104        52
13774672   2603788     15.90    435044   1165864   4062088     12.27   1206552    990104        52
13772184   2606276     15.91    435044   1165864   4077592     12.32   1210060    989244        52
13745008   2633452     16.08    435044   1165864   4106564     12.40   1234500    989244        52
13717976   2660484     16.24    435044   1165864   4130972     12.48   1261656    989244        48
13690820   2687640     16.41    435044   1165864   4163516     12.58   1288760    989244        52
13663416   2715044     16.58    435044   1165864   4187924     12.65   1316036    989244        52
13636880   2741580     16.74    435044   1165864   4212332     12.72   1343168    989244        52
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='myungjoo' date='2018-11-05T05:04:28Z'>
		found mem leak when allocate-invoke=true (custom filter)
		</comment>
		<comment id='5' author='myungjoo' date='2018-11-05T12:48:34Z'>
		IMO, this issue is fixed now.
		</comment>
		<comment id='6' author='myungjoo' date='2018-11-05T14:15:57Z'>
		I agree. Thanks!
		</comment>
	</comments>
</bug>