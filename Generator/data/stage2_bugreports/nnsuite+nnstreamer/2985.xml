<bug id='2985' author='wooksong' open_date='2020-12-30T02:50:29Z' closed_time='2021-01-12T04:35:08Z'>
	<summary>Problems in the coexistence of TF 1.13.1 with the ProtoBuf 3.12.3</summary>
	<description>
If there are v3.12.3 of the ProtoBuf libraries (i.e., libproto*.so.23) in the system, TF 1.13.1 tries to call those libraries' methods even if it is built with the bundled ProtoBuf (v3.6.1) sources or linked with the ProtoBuf (v3.6.1) libraries.
IMO, this is because there are methods that have the same namespaces but different symbol visibilities in ProtoBuf v3.6.1 and v3.12.3.
For example, the following logs are the backtraces from gdb;
&lt;denchmark-code&gt;[       OK ] test_tensor_filter.framework_auto_ext_tflite_wrong_inputtype_n (150 ms)
[ RUN      ] test_tensor_filter.framework_auto_ext_pb_01

Thread 1 "unittest_plugin" received signal SIGSEGV, Segmentation fault.
0x00007ffff3f1d064 in google::protobuf::internal::ReflectionOps::FindInitializationErrors(google::protobuf::Message const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*) () from /usr/lib/x86_64-linux-gnu/libprotobuf.so.23
(gdb) bt
#0  0x00007ffff3f1d064 in google::protobuf::internal::ReflectionOps::FindInitializationErrors(google::protobuf::Message const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*) () at /usr/lib/x86_64-linux-gnu/libprotobuf.so.23
#1  0x00007ffff3f14909 in google::protobuf::Message::FindInitializationErrors(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*) const () at /usr/lib/x86_64-linux-gnu/libprotobuf.so.23
#2  0x00007ffff3f149a9 in google::protobuf::Message::InitializationErrorString[abi:cxx11]() const () at /usr/lib/x86_64-linux-gnu/libprotobuf.so.23
#3  0x00007fffb986d697 in google::protobuf::MessageLite::ParseFromArray(void const*, int) () at /usr/lib/x86_64-linux-gnu/libprotobuf.so.17
#4  0x00007fffb98ac726 in google::protobuf::EncodedDescriptorDatabase::Add(void const*, int) () at /usr/lib/x86_64-linux-gnu/libprotobuf.so.17
#5  0x00007fffb987dc8d in google::protobuf::DescriptorPool::InternalAddGeneratedFile(void const*, int) () at /usr/lib/x86_64-linux-gnu/libprotobuf.so.17
#6  0x00007fffb98747aa in protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptorsImpl() () at /usr/lib/x86_64-linux-gnu/libprotobuf.so.17
#7  0x00007ffff68e3907 in __pthread_once_slow (once_control=0x7fffb9c28dd8, init_routine=0x7ffff6dc78a0 &lt;__once_proxy&gt;) at pthread_once.c:116
#8  0x00007fffb98756a5 in  () at /usr/lib/x86_64-linux-gnu/libprotobuf.so.17
#9  0x00007ffff7de38d3 in call_init (env=0x7fffffffda80, argv=0x7fffffffda68, argc=2, l=&lt;optimized out&gt;) at dl-init.c:72
#10 0x00007ffff7de38d3 in _dl_init (main_map=main_map@entry=0x555555c1b200, argc=2, argv=0x7fffffffda68, env=0x7fffffffda80) at dl-init.c:119
#11 0x00007ffff7de839f in dl_open_worker (a=a@entry=0x7fffffffb210) at dl-open.c:522
#12 0x00007ffff664a1ef in __GI__dl_catch_exception (exception=0x7fffffffb1f0, operate=0x7ffff7de7f60 &lt;dl_open_worker&gt;, args=0x7fffffffb210) at dl-error-skeleton.c:196
#13 0x00007ffff7de796a in _dl_open (file=0x555555bddf30 "/home/wook/Work/NNS/nnstreamer/build/ext/nnstreamer/tensor_filter/libnnstreamer_filter_tensorflow.so", mode=-2147483390, caller_dlopen=0x7ffff62e06d9 &lt;g_module_open+265&gt;, nsid=&lt;optimized out&gt;, argc=2, argv=&lt;optimized out&gt;, env=0x7fffffffda80) at dl-open.c:605
#14 0x00007ffff4ec4f96 in dlopen_doit (a=a@entry=0x7fffffffb440) at dlopen.c:66
#15 0x00007ffff664a1ef in __GI__dl_catch_exception (exception=exception@entry=0x7fffffffb3e0, operate=0x7ffff4ec4f40 &lt;dlopen_doit&gt;, args=0x7fffffffb440) at dl-error-skeleton.c:196
#16 0x00007ffff664a27f in __GI__dl_catch_error (objname=0x5555558da8b0, errstring=0x5555558da8b8, mallocedp=0x5555558da8a8, operate=&lt;optimized out&gt;, args=&lt;optimized out&gt;) at dl-error-skeleton.c:215
#17 0x00007ffff4ec5745 in _dlerror_run (operate=operate@entry=0x7ffff4ec4f40 &lt;dlopen_doit&gt;, args=args@entry=0x7fffffffb440) at dlerror.c:162
#18 0x00007ffff4ec5051 in __dlopen (file=&lt;optimized out&gt;, mode=&lt;optimized out&gt;) at dlopen.c:87
#19 0x00007ffff62e06d9 in g_module_open () at /usr/lib/x86_64-linux-gnu/libgmodule-2.0.so.0
#20 0x00007ffff7b786b2 in _search_subplugin (type=NNS_SUBPLUGIN_FILTER, name=0x555555be5e10 "tensorflow", path=0x555555b3cd20 "/home/wook/Work/NNS/nnstreamer/build/ext/nnstreamer/tensor_filter/libnnstreamer_filter_tensorflow.so") at /home/wook/Work/NNS/nnstreamer/gst/nnstreamer/nnstreamer_subplugin.c:112
#21 0x00007ffff7b788c1 in get_subplugin (type=NNS_SUBPLUGIN_FILTER, name=0x555555be5e10 "tensorflow") at /home/wook/Work/NNS/nnstreamer/gst/nnstreamer/nnstreamer_subplugin.c:161
#22 0x00007ffff7ba5831 in nnstreamer_filter_find (name=0x555555be5e10 "tensorflow") at /home/wook/Work/NNS/nnstreamer/gst/nnstreamer/tensor_filter/tensor_filter_common.c:698
#23 0x00007ffff7ba6e6f in gst_tensor_filter_get_available_framework (priv=0x555555c1f320, fw_name=0x7ffff7bc4419 "auto") at /home/wook/Work/NNS/nnstreamer/gst/nnstreamer/tensor_filter/tensor_filter_common.c:1246
#24 0x00007ffff7ba7312 in _gtfc_setprop_MODEL (priv=0x555555c1f320, prop=0x555555c1f328, value=0x7fffffffbd10) at /home/wook/Work/NNS/nnstreamer/gst/nnstreamer/tensor_filter/tensor_filter_common.c:1349
#25 0x00007ffff7ba86b7 in gst_tensor_filter_common_set_property (priv=0x555555c1f320, prop_id=3, value=0x7fffffffbd10, pspec=0x555555b3d9d0) at /home/wook/Work/NNS/nnstreamer/gst/nnstreamer/tensor_filter/tensor_filter_common.c:1830
#26 0x00007ffff7ba0fad in gst_tensor_filter_set_property (object=0x555555c1f0e0, prop_id=3, value=0x7fffffffbd10, pspec=0x555555b3d9d0) at /home/wook/Work/NNS/nnstreamer/gst/nnstreamer/tensor_filter/tensor_filter.c:297
#27 0x00007ffff72cdbae in g_object_setv () at /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0
#28 0x00007ffff72ceb3e in g_object_set_property () at /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0
#29 0x00007ffff75da36d in  () at /usr/lib/x86_64-linux-gnu/libgstreamer-1.0.so.0
#30 0x00007ffff75dc238 in  () at /usr/lib/x86_64-linux-gnu/libgstreamer-1.0.so.0
#31 0x00007ffff75dd118 in  () at /usr/lib/x86_64-linux-gnu/libgstreamer-1.0.so.0
#32 0x00007ffff75d3e5f in gst_parse_launch_full () at /usr/lib/x86_64-linux-gnu/libgstreamer-1.0.so.0
#33 0x0000555555627177 in test_tensor_filter_framework_auto_ext_pb_01_Test::TestBody() (this=0x555555da5400) at ../tests/nnstreamer_plugins/unittest_plugins.cc:4391
#34 0x0000555555667865 in testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*) (object=0x555555da5400, method=&amp;virtual testing::Test::TestBody(), location=0x55555567e2fb "the test body") at /usr/src/gtest/src/gtest.cc:2402
#35 0x00005555556619a3 in testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*) (object=0x555555da5400, method=&amp;virtual testing::Test::TestBody(), location=0x55555567e2fb "the test body") at /usr/src/gtest/src/gtest.cc:2438
#36 0x000055555564592a in testing::Test::Run() (this=0x555555da5400) at /usr/src/gtest/src/gtest.cc:2474
#37 0x000055555564625a in testing::TestInfo::Run() (this=0x5555558d99a0) at /usr/src/gtest/src/gtest.cc:2656
#38 0x00005555556468e2 in testing::TestCase::Run() (this=0x5555558d7de0) at /usr/src/gtest/src/gtest.cc:2776
#39 0x000055555564d7b0 in testing::internal::UnitTestImpl::RunAllTests() (this=0x5555558d0200) at /usr/src/gtest/src/gtest.cc:4651
#40 0x00005555556689ec in testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (object=0x5555558d0200, method=(bool (testing::internal::UnitTestImpl::*)(testing::internal::UnitTestImpl * const)) 0x55555564d4f0 &lt;testing::internal::UnitTestImpl::RunAllTests()&gt;, location=0x55555567eb38 "auxiliary test code (environments or event listeners)") at /usr/src/gtest/src/gtest.cc:2402
#41 0x00005555556627d7 in testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (object=0x5555558d0200, method=(bool (testing::internal::UnitTestImpl::*)(testing::internal::UnitTestImpl * const)) 0x55555564d4f0 &lt;testing::internal::UnitTestImpl::RunAllTests()&gt;, location=0x55555567eb38 "auxiliary test code (environments or event listeners)") at /usr/src/gtest/src/gtest.cc:2438
#42 0x000055555564c370 in testing::UnitTest::Run() (this=0x5555558b06c0 &lt;testing::UnitTest::GetInstance()::instance&gt;) at /usr/src/gtest/src/gtest.cc:4259
#43 0x00005555556308ea in RUN_ALL_TESTS() () at /usr/src/gtest/include/gtest/gtest.h:2233
#44 0x000055555562a80c in main(int, char**) (argc=1, argv=0x7fffffffda68) at ../tests/nnstreamer_plugins/unittest_plugins.cc:4763
&lt;/denchmark-code&gt;

As you can see, the method in /usr/lib/x86_64-linux-gnu/libprotobuf.so.17 at 3 calls the method in /usr/lib/x86_64-linux-gnu/libprotobuf.so.23 at 2. The result was not different even if it is built with the bundled ProtoBuf sources.
&lt;denchmark-h:h2&gt;Possible Soulutions&lt;/denchmark-h&gt;

&lt;denchmark-h:h4&gt;1. RollBack to v3.6.1&lt;/denchmark-h&gt;


Change our ProtoBuf v3.6.1 packages' names with a suffix, '17' (I've already done and tested this).
Let the NNS modules which require ProtoBuf use these packages

&lt;denchmark-h:h4&gt;2. TF1.13.1 with ProtoBut v3.12.3&lt;/denchmark-h&gt;


Build TF1.13.1 with ProtoBut v3.12.3's shared libraries (I tried and I found that it works)

I also checked this version passed test cases related to ProtoBuf and TF.


However, I am not sure that TF1.13.1 with ProtoBut v3.12.3 has no problems at all.

	</description>
	<comments>
		<comment id='1' author='wooksong' date='2020-12-30T02:50:31Z'>
		 : Thank you for posting issue &lt;denchmark-link:https://github.com/nnstreamer/nnstreamer/issues/2985&gt;#2985&lt;/denchmark-link&gt;
. The person in charge will reply soon.
		</comment>
		<comment id='2' author='wooksong' date='2020-12-30T06:47:32Z'>
		&lt;denchmark-link:https://github.com/nnsuite/ubuntuport-tensorflow/pull/17&gt;This&lt;/denchmark-link&gt;
 is also an alternative PR to handle this issue.
		</comment>
		<comment id='3' author='wooksong' date='2021-01-12T04:35:46Z'>
		Need to check TF 1.15.2  with ProtoBuf 3.12.3.
		</comment>
	</comments>
</bug>