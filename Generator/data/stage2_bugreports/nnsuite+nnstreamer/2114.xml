<bug id='2114' author='myungjoo' open_date='2020-02-18T11:39:01Z' closed_time='2020-03-18T02:41:15Z'>
	<summary>C++ Custom Filter Prop Update</summary>
	<description>
We need a mechanism to update prop.
We need a policy on updating prop for tensor-filter subplugins in general.
When do we need to update it? (At reload only? or whenever set-property is called?)
	</description>
	<comments>
		<comment id='1' author='myungjoo' date='2020-02-18T11:39:03Z'>
		 : Thank you for posting issue &lt;denchmark-link:https://github.com/nnstreamer/nnstreamer/issues/2114&gt;#2114&lt;/denchmark-link&gt;
. The person in charge will reply soon.
		</comment>
		<comment id='2' author='myungjoo' date='2020-02-20T07:44:16Z'>
		For GstTensorFilterFramework V1, eventHandler can allow updating some of the properties of the framework. This lets the frameworks decide and support if updating the prop is feasible or not.
This will allow updating the properties whenever set-property is called.
If eventHandler fails, then these properties can be cached to be used when reload is called.
		</comment>
		<comment id='3' author='myungjoo' date='2020-02-20T14:32:32Z'>
		The real problem here is when should we update them.
I didn't do any analyze, but I do feel that calling it with every set-property may be an overkill (and killing the performance)
		</comment>
		<comment id='4' author='myungjoo' date='2020-02-21T09:00:49Z'>
		It is possible to aggregate all the set-property and update all the properties at once with a reload. This will perform faster in some of the cases possibly. However, there are a couple of problems -

Reload results in closing the existing model, and then loading them again. This will cause unnecessary overhead when the intended update is small (such as just updating the input dimension).
Single API has function ml_single_set_property only. So, setting the property can be delayed till a call to invoke (so that all the property change can be accumulated and done at once), but this will increase the latency for the first call.
In the pipeline case, the update needs the pipeline to be PAUSE. If the input/output characteristics are changed, then the pipeline needs to be in READY state and do caps negotiations again when going to PAUSE/PLAY. So, all the updates can be done at READY state, and caps negotiation can happen at once the pipeline state goes to PAUSE/PLAY. So, in this case, the aggregation of property change happens at the pipeline level automatically.

If aggregation of set_property is to be supported at framework level, then how about adding a property to the tensor_filter - lazy_update. If this is set, then the update is cached by tensor_filter, and done at once by passing it to the framework right before invoke (this is being lazy), else each call to set_property is passed to the framework (both these cases depends on the support provided by the framework).
		</comment>
		<comment id='5' author='myungjoo' date='2020-03-04T07:19:44Z'>
		It looks like we need to take care of individual case of property. And I don't feel like to add yet another subplugin property (late_update) for this.
PROP_INPUT/OUTPUT/*TYPE/*NAME:
- Q: do we need to send event for every change? We do not allow to change it if it's already configured. We may call it when we set "input_configured" or "output_configured". (lazy_update)
PROP_ACCELERATOR:
- It looks like we need to send the event right away if it's "configured" or "running". ("lazy-update" if it's not configured, yet. "direct-update" if it's configured)
PROP_FRAMEWORK:
- not needed
PROP_CUSTOM:
- NEED SOME EXAMINATION
PROP_MODEL:
- reload does it
PROP_SILENT:
- no need.
PROP_IS_UPDATABLE:
- no need.
PROP_*LAYOUT:
- POTENTIAL BUG We may prohibit updating the property if it's already configured like other INPUT/OUTPUT meta related properties.
		</comment>
		<comment id='6' author='myungjoo' date='2020-03-08T10:28:12Z'>
		
PROP_INPUT/OUTPUT/*TYPE/*NAME:

Q: do we need to send event for every change? We do not allow to change it if it's already configured. We may call it when we set "input_configured" or "output_configured". (lazy_update)


If this is not to be supported, then supported events for eventHandler in GstTensorFilterFramework version 1 can be reduced.
Possibly, just setting the input info feature can be supported as it is provided with the single API.

PROP_CUSTOM:

NEED SOME EXAMINATION


This can be supported by adding another event in eventHandler for v1. For v0, changing this can be supported until the framework hasn't been opened.
		</comment>
		<comment id='7' author='myungjoo' date='2020-03-13T14:51:14Z'>
		
This can be supported by adding another event in eventHandler for v1. For v0, changing this can be supported until the framework hasn't been opened.

That's perfectly fine. If v0-subplugin wants to get updated, he/she can upgrade it to v1.
		</comment>
		<comment id='8' author='myungjoo' date='2020-03-18T02:41:15Z'>
		It appears that this issue is resolved with recent PRs. Closing this.
		</comment>
	</comments>
</bug>