<bug id='279' author='Ziinc' open_date='2020-05-05T18:32:37Z' closed_time='2020-05-18T17:57:32Z'>
	<summary>Exported completions to CoNLL results in incomplete labelling</summary>
	<description>
Describe the bug
Exporting completions results in skipped empty completions being exported as well.
This is mainly an issue regarding with the converter library.
To Reproduce
Using the Converter class exposed in label-studio-converter,
&lt;denchmark-code&gt;
conv = Converter("my_config.xml")
conv.convert_to_conll2003('completions', 'tmp/completions')
&lt;/denchmark-code&gt;

The resulting result.conll file contains the skipped empty completions.
Looking at the src code, this bug would translate across the different formats, as the completions folder path is passed to the converter directly and the converter does not filter the completions by the skipped key.
Environment :

Version: Tested on v0.6.0 branch, but main bug is in label-studio-converter src.

slightly tangential comment
It is also rather puzzling why skipped tasks (that have not had any input to the document) records a completion. There does not seem to be any benefit for doing so, as it makes it impossible to find skipped tasks in the Tasks tab.
	</description>
	<comments>
		<comment id='1' author='Ziinc' date='2020-05-05T18:54:34Z'>
		Did a bit more investigating and realized that you've already added the skipped task filtering in this commit:
&lt;denchmark-link:https://github.com/heartexlabs/label-studio-converter/commit/83ff059a1257cf600559c09a3459483d54073f81&gt;heartexlabs/label-studio-converter@83ff059&lt;/denchmark-link&gt;

Turns out that this bug is caused by creating a completion based on a model prediction.
This can be replicated as follows:

Import an empty task
open task, will show predictions from ML backend
check that there are no completions
make modifications
observe two completions saved. One is blank, and the other is with the edited predictions.

		</comment>
		<comment id='2' author='Ziinc' date='2020-05-05T19:43:42Z'>
		Did even more investigating.
I've mostly figured out that it comes from the converter function, since the data in the UI and completion JSON are correct.
For some reason, on export to CoNLL2003 format, the tags suddenly get cut off.
In this attached example, all entities are marked as INGREDIENTS in the UI  and json, but are not labelled in the conll file:
&lt;denchmark-link:https://user-images.githubusercontent.com/22714384/81107352-9b5a6a80-8f49-11ea-829c-b0d97b9af519.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/22714384/81107682-23407480-8f4a-11ea-829f-d62902152630.png&gt;&lt;/denchmark-link&gt;

I've tracked down the code that most likely causes this bug:
&lt;denchmark-link:https://github.com/heartexlabs/label-studio-converter/blob/83ff059a1257cf600559c09a3459483d54073f81/label_studio_converter/utils.py#L27&gt;https://github.com/heartexlabs/label-studio-converter/blob/83ff059a1257cf600559c09a3459483d54073f81/label_studio_converter/utils.py#L27&lt;/denchmark-link&gt;

I'm not too familiar with the implementation of this fn though, so I can't identify which part is causing the issue. Do point me in the right direction, I might be able to figure out a PR for this issue.
		</comment>
		<comment id='3' author='Ziinc' date='2020-05-07T12:36:23Z'>
		&lt;denchmark-link:https://github.com/niklub&gt;@niklub&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/deppp&gt;@deppp&lt;/denchmark-link&gt;
 Fix for this issue is in &lt;denchmark-link:https://github.com/heartexlabs/label-studio-converter/pull/4&gt;heartexlabs/label-studio-converter#4&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>