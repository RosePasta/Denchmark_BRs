<bug id='530' author='pkubiak' open_date='2020-11-06T01:00:08Z' closed_time='2020-11-24T02:32:56Z'>
	<summary>Exception when trying Baudot cipher</summary>
	<description>

 Have you read our Wiki page "Common Issues &amp; Their Solutions"?

Describe the bug
When ciphey is run as follow:
ciphey -t "11111 01001 00011 01110 10011 10100 00000 11011"
during the search the exception is thrown:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/.../.local/bin/ciphey", line 8, in &lt;module&gt;
    sys.exit(main())
  File "/home/.../.local/lib/python3.8/site-packages/click/core.py", line 829, in __call__
    return self.main(*args, **kwargs)
  File "/home/.../.local/lib/python3.8/site-packages/click/core.py", line 782, in main
    rv = self.invoke(ctx)
  File "/home/.../.local/lib/python3.8/site-packages/click/core.py", line 1066, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/home/.../.local/lib/python3.8/site-packages/click/core.py", line 610, in invoke
    return callback(*args, **kwargs)
  File "/home/.../.local/lib/python3.8/site-packages/ciphey/ciphey.py", line 262, in main
    result = decrypt(config, kwargs["text"])
  File "/home/.../.local/lib/python3.8/site-packages/ciphey/ciphey.py", line 40, in decrypt
    res: Optional[iface.SearchResult] = config.objs["searcher"].search(ctext)
  File "/home/.../.local/lib/python3.8/site-packages/ciphey/basemods/Searchers/ausearch.py", line 249, in search
    self.recursive_expand(root, False)
  File "/home/.../.local/lib/python3.8/site-packages/ciphey/basemods/Searchers/ausearch.py", line 228, in recursive_expand
    self.expand_decodings(node)
  File "/home/.../.local/lib/python3.8/site-packages/ciphey/basemods/Searchers/ausearch.py", line 220, in expand_decodings
    self.recursive_expand(new_node, False)
  File "/home/.../.local/lib/python3.8/site-packages/ciphey/basemods/Searchers/ausearch.py", line 228, in recursive_expand
    self.expand_decodings(node)
  File "/home/.../.local/lib/python3.8/site-packages/ciphey/basemods/Searchers/ausearch.py", line 209, in expand_decodings
    res = inst(val)
  File "/home/.../.local/lib/python3.8/site-packages/ciphey/iface/_modules.py", line 196, in __call__
    return self.decode(*args)
  File "/home/.../.local/lib/python3.8/site-packages/ciphey/basemods/Decoders/baudot.py", line 19, in decode
    ret += self.BAUDOT_DICT["+" + i]
&lt;/denchmark-code&gt;

Version

OS/Distro: Arch
Python version: 3.8.6
Ciphey versions: ciphey: 5.10.0, cipheycore: 0.3.2, cipheydists: 0.3.33
Did you use Docker? no


&lt;denchmark-link:https://gist.github.com/pkubiak/aa6f020d5cab3964ef098727a263b0e8&gt;https://gist.github.com/pkubiak/aa6f020d5cab3964ef098727a263b0e8&lt;/denchmark-link&gt;

Expected behavior
Exception is not thrown
	</description>
	<comments>
		<comment id='1' author='pkubiak' date='2020-11-06T01:00:10Z'>
		Issue-Label Bot is automatically applying the label bug to this issue, with a confidence of 0.97. Please mark this comment with üëç or üëé to give our bot feedback!
Links: &lt;denchmark-link:https://github.com/marketplace/issue-label-bot&gt;app homepage&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://mlbot.net/data/Ciphey/Ciphey&gt;dashboard&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/hamelsmu/MLapp&gt;code&lt;/denchmark-link&gt;
 for this bot.
		</comment>
		<comment id='2' author='pkubiak' date='2020-11-06T13:14:08Z'>
		Hello pkubiak,
i am the one who implemented the baudot decoder.
I didn't include a mapping for "00000" because that would translate into null and i thought that would not be necessary but will add it to the mapping as an empty character so that no error happens.
Kind Regards
Itamikame
		</comment>
		<comment id='3' author='pkubiak' date='2020-11-07T00:05:29Z'>
		Hi &lt;denchmark-link:https://github.com/Itamikame&gt;@Itamikame&lt;/denchmark-link&gt;
, thanks for your reply.
Sure, If 00000 is a legal code then it is good idea to support it, but I think that If a message can not be decoded using baudot then no exception should be raised. The message could still have been encoded using a different cipher even if it looks like a Baudot. Especially message such as:
&lt;denchmark-code&gt;00000 00001 00010 00011 00100 00101 00110 00111 01000 01001 01010 01011 01100 01101 01110 01111 10000 10001 10010 10011 10100 10101 10110 10111 11000 11001 11010 11011 11100 11101 11110 11111
&lt;/denchmark-code&gt;

Should not generate any exceptions. So I think that little changes in decoding algorithm may be needed.
		</comment>
	</comments>
</bug>