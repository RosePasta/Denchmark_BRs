<bug id='276' author='bee-san' open_date='2020-08-12T16:54:06Z' closed_time='2020-08-29T10:53:57Z'>
	<summary>X&amp;Y does not work with spaces</summary>
	<description>
X&amp;Y decryptor does not work with spaces.
&lt;denchmark-h:h1&gt;From code review&lt;/denchmark-h&gt;

This is making the assumption that the string only contains 2 chars, which is wrong I believe. Binary strings in CTFs often have spaces, commas, new lines to delimiter themselves:
&lt;denchmark-link:https://gchq.github.io/CyberChef/#recipe=To_Binary('Space')&amp;input=aGVsbG8gbXkgbmFtZSBpcw&gt;https://gchq.github.io/CyberChef/#recipe=To_Binary('Space')&amp;input=aGVsbG8gbXkgbmFtZSBpcw&lt;/denchmark-link&gt;

Honestly the way I would do it would be the way you're doing it but adding in another one.
Imo, if it's hard to do this then the function isn't right -- it should theoretically be possible to construct a single function which operates on X and Y, X and Y and P, and so on ad infinitum
Is there anyway you can make a single function? Abstract away the code? :)
If you had to make a function to do this, but you got told you didn't know how many chars were in the input, how would you abstract away hardcoded values into a one-size-fits-all solution? :)
Even if you gave rough psuedocode, I can help you fill it in :)
Originally posted by @brandonskerritt in https://github.com/Ciphey/Ciphey/pull/258/files
	</description>
	<comments>
		<comment id='1' author='bee-san' date='2020-08-12T16:54:09Z'>
		Issue-Label Bot is automatically applying the label bug to this issue, with a confidence of 0.73. Please mark this comment with üëç or üëé to give our bot feedback!
Links: &lt;denchmark-link:https://github.com/marketplace/issue-label-bot&gt;app homepage&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://mlbot.net/data/Ciphey/Ciphey&gt;dashboard&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/hamelsmu/MLapp&gt;code&lt;/denchmark-link&gt;
 for this bot.
		</comment>
		<comment id='2' author='bee-san' date='2020-08-12T17:11:47Z'>
		Currently, it will work with spaces, but not with any other delimiter.
Example:
&lt;denchmark-code&gt;poetry run ciphey -t "    7  y7y7 y77 7yy77y7y 7yyy7    7yy 7yyy7y77 77y7 77 77 7y 77y y y   y7yy7yyy7 7yy77y7y 77y77777 7y7y7y77 7yyy7yyy 7yy7yyyy 77y777777y7y7y77 7yy7y777 7yyy77y7   7yy 77y7y 7yy77 y7y "
&lt;/denchmark-code&gt;

Output:
&lt;denchmark-code&gt;Format used:
  atbash
  xandy:
    Key: 7 -&gt; 0 &amp; b -&gt; 1
Final result: "Test One Two Three"

&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='bee-san' date='2020-08-22T15:12:24Z'>
		Why not use a regex with \s? That matches all possible whitespace
		</comment>
		<comment id='4' author='bee-san' date='2020-08-22T22:58:56Z'>
		
Why not use a regex with \s? That matches all possible whitespace

As I understand it, the real issue is that any number of characters could be used as delimiters, even regular letters or a combination of symbols.
I think a sensible approach would be to look at an input string, even if its character set contains more that three characters, and either

try out all possible combinations of which symbols are the delimiters and which are the bits, or
always regard the most frequent two characters as the bits and the rest as the delimiters.

Of course, with the first approach, we would have to define a maximum number of tries to avoid wasting too much time. Do you think I'm on the right track here? :)
		</comment>
		<comment id='5' author='bee-san' date='2020-08-23T12:38:03Z'>
		I think if the string contains more than 3 chars, the likely chance of it being X&amp;Y is very, very close to 0. So small in fact, we shouldn't even try. This cipher has only ever come up once during a CTF (out of the 300+ CTFs &lt;denchmark-link:https://github.com/Cyclic3&gt;@Cyclic3&lt;/denchmark-link&gt;
 and I have done combined), and it only contained 2 chars for that one. We've already gone above and beyond and added in the delimiter support.
I agree we should add a regex for all possible white space, but beyond that we shouldn't try to account for something which will likely never happen.
		</comment>
		<comment id='6' author='bee-san' date='2020-08-23T13:25:21Z'>
		Agreed. Checking for three makes sense, but anything beyond that is overkill.
		</comment>
	</comments>
</bug>