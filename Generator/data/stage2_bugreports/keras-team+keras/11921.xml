<bug id='11921' author='sainimohit23' open_date='2018-12-22T12:53:12Z' closed_time='2019-01-18T23:28:37Z'>
	<summary>Creating model with shared layers</summary>
	<description>
I'm trying to implement model for triplet loss using FacenetModel.By far I have written this code :
`
def batch_generator(batch_size = 64):
while True:
pos = positiveImg[np.random.choice(len(positiveImg), batch_size)]
neg = negativeImg[np.random.choice(len(negativeImg), batch_size)]
anc = anchorsImg[np.random.choice(len(anchorsImg), batch_size)]
&lt;denchmark-code&gt;            x_data = {'inp1': anc,
                      'inp2': pos,
                      'inp3': neg
                      }
            y_data = {'y1': np.zeros((64,0)),
                      'y2': np.zeros((64,0)),
                      'y3': np.zeros((64,0))}
            yield (x_data, y_data)
    
    def triplet_loss(y_true, y_pred):    
        anchor, positive, negative = y_pred[0], y_pred[1], y_pred[2]
        pos_dist = tf.reduce_sum(tf.square(tf.subtract(anchor, positive)), axis=-1)
        neg_dist = tf.reduce_sum(tf.square(tf.subtract(anchor, negative)), axis=-1)
        basic_loss = tf.add(tf.subtract(pos_dist, neg_dist), 0.2)
        loss = tf.reduce_sum(tf.maximum(basic_loss, 0.0))
    
        return loss
    
    def getModels():
        FRmodel = keras.models.load_model('FR.h5', custom_objects={'triplet_loss': triplet_loss})
    
        inp1 = Input((3, 96, 96), name= 'inp1')
        inp2 = Input((3, 96, 96), name= 'inp2')
        inp3 = Input((3, 96, 96), name= 'inp3')
    
        pred1 = FRmodel(inp1)
        pred2 = FRmodel(inp2)
        pred3 = FRmodel(inp3)
    
        inputs = [inp1, inp2, inp3]
        outputs = [pred1, pred2, pred3]
    
        model = keras.models.Model(inputs=[inp1, inp2, inp3], outputs= [pred1, pred2, pred3])
    
        return FRmodel, model
    
    generator = batch_generator(64)
    
    FRmodel, my_model = getModels()
    my_model.compile(optimizer = 'adam', loss = triplet_loss, metrics = ['accuracy'])   
    my_model.fit_generator(generator, epochs=5,steps_per_epoch=30)`
&lt;/denchmark-code&gt;

But when I compile this model. I get this error: ValueError: No data provided for "FaceRecoModel". Need data for each key in: ['FaceRecoModel', 'FaceRecoModel', 'FaceRecoModel']
What is the correct way to do this?
Please don't get mad. I'm not getting any responses on stackoverflow. Please help.
	</description>
	<comments>
		<comment id='1' author='sainimohit23' date='2018-12-24T12:34:56Z'>
		Found the solution. I have to wrap triplet loss in Lambda function
`         def triplet_loss_v2(y_true, y_pred):
positive, negative = y_pred[:,0,0], y_pred[:,1,0]
margin = K.constant(0.35)
loss = K.mean(K.maximum(K.constant(0), positive - negative + margin))
return loss
&lt;denchmark-code&gt;    def euclidean_distance(vects):
        x, y = vects
        dist = K.sqrt(K.maximum(K.sum(K.square(x - y), axis=1, keepdims=True), K.epsilon()))
        return dist

     for layer in FRmodel.layers[0: 100]:
        layer.trainable  =  False
    
    # Model Structure
    input_shape=(3, 96, 96)
    anchor = Input(shape=input_shape, name = 'anchor')
    anchorPositive = Input(shape=input_shape, name = 'anchorPositive')
    anchorNegative = Input(shape=input_shape, name = 'anchorNegative')
    
    anchorCode = FRmodel(anchor)
    anchorPosCode = FRmodel(anchorPositive)
    anchorNegCode = FRmodel(anchorNegative)
    
    
    positive_dist = Lambda(euclidean_distance, name='pos_dist')([anchorCode, anchorPosCode])
    negative_dist = Lambda(euclidean_distance, name='neg_dist')([anchorCode, anchorNegCode])
    stacked_dists = Lambda(lambda vects: K.stack(vects, axis=1), name='stacked_dists')([positive_dist, negative_dist])
    
    
    
    
    # Callbacks
    early_stopping = EarlyStopping(monitor='loss', patience=1, min_delta=0.00005)
    STAMP = 'facenet_%d'%(len(paths)) 
    checkpoint_dir = './' + 'checkpoints/' + str(int(time.time())) + '/'
    
    if not os.path.exists(checkpoint_dir):
        os.makedirs(checkpoint_dir)
    
    bst_model_path = checkpoint_dir + STAMP + '.h5'
    tensorboard = TensorBoard(log_dir=checkpoint_dir + "logs/{}".format(time.time()))
    
    
    # Model
    tripletModel = Model([anchor, anchorPositive, anchorNegative], stacked_dists, name='triple_siamese')
    tripletModel.compile(optimizer = 'adadelta', loss = triplet_loss_v2, metrics = ['accuracy'])
&lt;/denchmark-code&gt;

`
		</comment>
		<comment id='2' author='sainimohit23' date='2018-12-26T12:54:48Z'>
		I am having same issue . &lt;denchmark-link:https://github.com/keras-team/keras/issues/11910&gt;#11910&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='sainimohit23' date='2018-12-27T13:07:29Z'>
		I think the problem here is an issue of layer and node name. This is a keras bug and I already saw a similar issue (if someone can find it, it would be great). Basically, all network outputs have the same name. Which breaks everything. The solution is to use a lamda layer just before each output to force the names to be different.
		</comment>
		<comment id='4' author='sainimohit23' date='2019-01-18T23:28:37Z'>
		Both &lt;denchmark-link:https://github.com/sainimohit23&gt;@sainimohit23&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/gabrieldemarmiesse&gt;@gabrieldemarmiesse&lt;/denchmark-link&gt;
 are in agreement regarding the workaround, and the Keras team is aware of this bug. This issue is closed. Thanks.
		</comment>
	</comments>
</bug>