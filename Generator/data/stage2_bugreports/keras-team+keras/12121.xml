<bug id='12121' author='isega24' open_date='2019-01-24T14:01:09Z' closed_time='2019-01-24T20:09:52Z'>
	<summary>Lambda layer with tf.fft.fft2d error</summary>
	<description>
I have a problem trying to make a Lambda layer that aplies fft2d to a tensor:
&lt;denchmark-code&gt;from keras.layers import Lambda, Input
import tensorflow as tf


inp = Input(shape=(299,299),dtype='complex64')
tensorTransformada = Lambda(tf.fft2d)(Inp)

&lt;/denchmark-code&gt;

Even if I have declared the first tensor as 'complex64', the next error appears:
&lt;denchmark-code&gt;Traceback (most recent call last):

File "", line 1, in

File "/usr/local/lib/python3.6/dist-packages/keras/engine/base_layer.py", line 474, in call

output_shape = self.compute_output_shape(input_shape)

File "/usr/local/lib/python3.6/dist-packages/keras/layers/core.py", line 648, in compute_output_shape x = self.call(x) File "/usr/local/lib/python3.6/dist-packages/keras/layers/core.py", line 682, in call return self.function(inputs, **arguments)

File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/gen_spectral_ops.py", line 437, in fft2d "FFT2D", input=input, name=name)

File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/op_def_library.py", line 609, in _apply_op_helper param_name=input_name)

File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/op_def_library.py", line 60, in _SatisfiesTypeConstraint ", ".join(dtypes.as_dtype(x).name for x in allowed_list)))

TypeError: Value passed to parameter 'input' has DataType float32 not in list of allowed values: complex64, complex128
&lt;/denchmark-code&gt;

Please solve this bug
Running on Python 3.6.7, keras 2.2.2, tensorflow 1.11.0 on CPU,
	</description>
	<comments>
		<comment id='1' author='isega24' date='2019-01-24T14:32:39Z'>
		I confirm, the issue is that we create a float32 placeholder to compute the output shape.
Workaround for the users till we fix this :

Specify the output_shape directly.
tensorTransformada = Lambda(tf.fft2d, output_shape=(None, 299, 299))(Inp)

		</comment>
		<comment id='2' author='isega24' date='2019-04-26T17:53:03Z'>
		&lt;denchmark-link:https://github.com/dref&gt;@dref&lt;/denchmark-link&gt;
 Does the fft2d return sensical values for you.  I find that it doesnt not for me.  Using tensorflow 1.13.1
import numpy as np
import scipy as sp
import scipy.fftpack
import tensorflow as tf
import matplotlib.pyplot as plt
#===================================================================================================
&lt;denchmark-h:h1&gt;Generate data&lt;/denchmark-h&gt;

slc = np.meshgrid(np.linspace(0,1,256), np.linspace(0,1,256))
slc = slc[0] + 1j*slc[1]
tileSize = slc.shape[0]
#===================================================================================================
freqImg = sp.fftpack.fft2(slc)
#===================================================================================================
&lt;denchmark-h:h1&gt;Now do this in keras/tf&lt;/denchmark-h&gt;

input1 = tf.keras.layers.Input(shape=(tileSize, tileSize, 1), dtype='complex128')
out = tf.keras.layers.Lambda(lambda x:tf.fft2d(input1))(input1)
model = tf.keras.models.Model(input1, out)
freqImg_tf = model.predict(slc[None,:,:,None])
plt.figure(); plt.imshow(np.log(np.abs(freqImg)+1)); plt.title('sp')
plt.figure(); plt.imshow(np.log(np.abs(freqImg_tf[0,:,:,0])+1)); plt.title('keras'); plt.show()
		</comment>
	</comments>
</bug>