<bug id='9506' author='alekseynp' open_date='2018-02-27T21:07:59Z' closed_time='2018-03-01T17:12:34Z'>
	<summary>Sequence as validation_data fails in fit_generator when workers=0</summary>
	<description>
Calling fit_generator with validation_data as a sequence works as expected for workers &gt; 0 but fails for workers == 0.
I get:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "sequence_test.py", line 27, in &lt;module&gt;
    workers=0
  File "/home/aplotnicki/envs/tf/lib/python3.5/site-packages/keras/legacy/interfaces.py", line 87, in wrapper
    return func(*args, **kwargs)
  File "/home/aplotnicki/envs/tf/lib/python3.5/site-packages/keras/engine/training.py", line 2169, in fit_generator
    use_multiprocessing=use_multiprocessing)
  File "/home/aplotnicki/envs/tf/lib/python3.5/site-packages/keras/legacy/interfaces.py", line 87, in wrapper
    return func(*args, **kwargs)
  File "/home/aplotnicki/envs/tf/lib/python3.5/site-packages/keras/engine/training.py", line 2280, in evaluate_generator
    generator_output = next(output_generator)
TypeError: 'TestSequence' object is not an iterator
&lt;/denchmark-code&gt;

When running the following script. If workers &gt; 0 there is no problem.
&lt;denchmark-code&gt;import keras.utils
from keras.models import Model, Input
import numpy as np

class TestSequence(keras.utils.Sequence):
    def __init__(self):
        pass
        
    def __len__(self):
        return 1
    
    def __getitem__(self, idx):
        return np.array([1.]), np.array([1.])
    
def TestGenerator():
    while True:
        yield np.array([1.]), np.array([1.])
        
input = Input((None,))
model = Model(input, input)
model.compile(optimizer='adam', loss='mse')

model.fit_generator(
    TestGenerator(),
    steps_per_epoch=10,
    validation_data=TestSequence(),
    workers=0
)
&lt;/denchmark-code&gt;

Why would I want to do this? Testing related to investigating thread safety of my generator and sequence implementations.
What probably causes this?
I expect that &lt;denchmark-link:https://github.com/keras-team/keras/blob/master/keras/engine/training.py#L2150&gt;this line&lt;/denchmark-link&gt;
 leads to code that handles sequences, but at the  clause, &lt;denchmark-link:https://github.com/keras-team/keras/blob/master/keras/engine/training.py#L2165&gt;this line&lt;/denchmark-link&gt;
 does not.
Checkboxes:


 Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/keras-team/keras.git --upgrade --no-deps
Cloned and installed from github as at now. 6b2a04f


 If running on TensorFlow, check that you are up-to-date with the latest version. The installation instructions can be found here.
tensorflow.version == 1.4.0
Don't believe this is significant.


 Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).


	</description>
	<comments>
		<comment id='1' author='alekseynp' date='2018-03-01T17:12:34Z'>
		Sorry for the spam, travis was acting weird.
Fixed in &lt;denchmark-link:https://github.com/keras-team/keras/pull/9513&gt;#9513&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='alekseynp' date='2018-03-01T18:33:06Z'>
		My same script now yields:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "sequence_test.py", line 27, in &lt;module&gt;
    workers=0
  File "build/bdist.linux-x86_64/egg/keras/legacy/interfaces.py", line 91, in wrapper
  File "build/bdist.linux-x86_64/egg/keras/engine/training.py", line 2263, in fit_generator
  File "build/bdist.linux-x86_64/egg/keras/legacy/interfaces.py", line 91, in wrapper
  File "build/bdist.linux-x86_64/egg/keras/engine/training.py", line 2357, in evaluate_generator
ValueError: `steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.
&lt;/denchmark-code&gt;

I think the simple fix is to take
&lt;denchmark-code&gt;if validation_steps is None:
    validation_steps = len(validation_data)
&lt;/denchmark-code&gt;

from &lt;denchmark-link:https://github.com/Dref360/keras/blob/c8d4fb7025a23efd4353dd056024e3c510d9996b/keras/engine/training.py#L2155&gt;here&lt;/denchmark-link&gt;
 and put it under  &lt;denchmark-link:https://github.com/Dref360/keras/blob/c8d4fb7025a23efd4353dd056024e3c510d9996b/keras/engine/training.py#L2165&gt;here&lt;/denchmark-link&gt;

The logic and code pathing here is getting a bit complex. Actually the functionality offered to the user is a bit complex. Three forms of validation_data. Generator requires validation_steps, data forbids it, and for a sequence it is optional. Layer on that workers=0 and workers&gt;0.
In the case of a sequence and , the  converts the sequence into a generator, and &lt;denchmark-link:https://github.com/Dref360/keras/blob/c8d4fb7025a23efd4353dd056024e3c510d9996b/keras/engine/training.py#L2260&gt;here&lt;/denchmark-link&gt;
  is called with a generator as an input instead of the original sequence. Which is maybe a bit odd.
The problem my script is encountering is that by the time we get to that evaluate_generator line, the sequence is a generator, but validation_steps is not yet set, hence the "quick fix". But I wonder if we should really be asking Why are we doing all of this convoluted work when evaluate_generator should be perfectly capable of handling all of these cases itself?
I'm probably starting to sound like someone who should be fixing problems rather than reporting them. I'm a confident user of Keras, but not yet confident to contribute code. This is me contributing!
		</comment>
		<comment id='3' author='alekseynp' date='2018-03-01T18:54:30Z'>
		After some more thought I appreciate now that a reason is data looping. This is an issue for generators used as validation data also, but in particular for a sequence: If validation_steps &lt; len(validation_data) we need to manage the looping through the sequence, or else it will simply be the first n batches of the sequence that ever get validated against.
It still seems overly complex.
		</comment>
	</comments>
</bug>