<bug id='11275' author='nole-lin' open_date='2018-10-02T04:21:34Z' closed_time='2018-10-05T06:13:42Z'>
	<summary>Unable to use load_model with Keras 2.2.3</summary>
	<description>
After updating Keras to 2.2.3 and using Tensorflow version 1.11.0, I am unable to load saved models.
I am running a script on Google Cloud's Debian machine and am able to save and load the model there, but I am facing the error "UnboundLocalError: local variable 'name' referenced before assignment" when calling load_model on my local Ubuntu machine.
	</description>
	<comments>
		<comment id='1' author='nole-lin' date='2018-10-02T11:23:44Z'>
		Jesus, you hit my production with this release. Rolling back.
		</comment>
		<comment id='2' author='nole-lin' date='2018-10-02T11:24:56Z'>
		The same with TensorFlow 1.10 (Python 3.6).
		</comment>
		<comment id='3' author='nole-lin' date='2018-10-02T12:33:44Z'>
		Linking to &lt;denchmark-link:https://github.com/keras-team/keras/issues/11269&gt;#11269&lt;/denchmark-link&gt;

We would like to work on this, but we cannot reproduce the bug. Can anyone give us a script to reproduce?
		</comment>
		<comment id='4' author='nole-lin' date='2018-10-02T12:34:10Z'>
		I'll close this in favor of &lt;denchmark-link:https://github.com/keras-team/keras/issues/11269&gt;#11269&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='nole-lin' date='2018-10-02T16:03:38Z'>
		&lt;denchmark-link:https://github.com/gabrieldemarmiesse&gt;@gabrieldemarmiesse&lt;/denchmark-link&gt;
 I'm not sure it's a good idea to assume it's the same error.
For now I can only provide a traceback, but it seems to explain everything:
&lt;denchmark-code&gt;model = load_model(model_name)
  File "/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py", line 419, in load_model
    model = _deserialize_model(f, custom_objects, compile)
  File "/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py", line 225, in _deserialize_model
    model = model_from_config(model_config, custom_objects=custom_objects)
  File "/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py", line 458, in model_from_config
    return deserialize(config, custom_objects=custom_objects)
  File "/usr/local/lib/python3.6/dist-packages/keras/layers/__init__.py", line 55, in deserialize
    printable_module_name='layer')
  File "/usr/local/lib/python3.6/dist-packages/keras/utils/generic_utils.py", line 145, in deserialize_keras_object
    list(custom_objects.items())))
  File "/usr/local/lib/python3.6/dist-packages/keras/engine/sequential.py", line 294, in from_config
    model = cls(name=name)
UnboundLocalError: local variable 'name' referenced before assignment
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='nole-lin' date='2018-10-02T16:18:27Z'>
		&lt;denchmark-link:https://github.com/adampl&gt;@adampl&lt;/denchmark-link&gt;
 maybe I was too quick on closing this issue.
You have to understand that it's very difficult to work with a traceback only.
To give you an idea of what we work with, here are all the tests which are run at every commit in keras: &lt;denchmark-link:https://github.com/keras-team/keras/tree/master/tests&gt;https://github.com/keras-team/keras/tree/master/tests&lt;/denchmark-link&gt;

Among those tests are a lot of tests concerning saving and loading models.
So our tests are passing, all green, and users are telling us that saving and loading doesn't work. It means that users are working with use cases which are not in the tests, thus it is non-trivial to reproduce. Without a script to reproduce, there is very little that we can do.
		</comment>
		<comment id='7' author='nole-lin' date='2018-10-02T16:20:36Z'>
		Furthermore, we can put your script in the test, and then we'll make sure at every commit that your script never breaks again :)
		</comment>
		<comment id='8' author='nole-lin' date='2018-10-02T16:21:48Z'>
		Some advices:

Don't use custom data or custom paths.
Use random arrays or even np.ones, np.zeros.
The example should run with Keras (and deps) alone.
Should be Python3 compatible.
Should not be OS specific.
The file should reproduce the bug with *high fidelity.
Link to a gist would be appreciated.
There is usually no need to make a big neural network to trigger bugs

		</comment>
		<comment id='9' author='nole-lin' date='2018-10-02T17:00:38Z'>
		I said it's obvious from the traceback, because there's a typical error at keras/engine/sequential.py:294:
&lt;denchmark-code&gt;    @classmethod
    def from_config(cls, config, custom_objects=None):
        if 'name' in config:
            name = config['name']
            build_input_shape = config.get('build_input_shape')
            layer_configs = config['layers']
        model = cls(name=name) #                                  &lt;--- HERE
        for conf in layer_configs:
            layer = layer_module.deserialize(conf,
                                             custom_objects=custom_objects)
            model.add(layer)
        if not model.inputs and build_input_shape:
            model.build(build_input_shape)
        return model
&lt;/denchmark-code&gt;

From the check for name I guess this parameter is optional, so it shouldn't be used when it's not defined. The same applies to build_input_shape and layer_configs variables, which would raise similar errors in the next lines. So apparently the tests don't cover configs without a name.
However, I have no idea if the model should have this parameter nor why it doesn't :)
		</comment>
		<comment id='10' author='nole-lin' date='2018-10-02T21:25:09Z'>
		So check for is None should be added for name, build_input_shape and layer_configs variables
		</comment>
		<comment id='11' author='nole-lin' date='2018-10-02T23:44:42Z'>
		Ran into the same issue with my stored model.
		</comment>
		<comment id='12' author='nole-lin' date='2018-10-03T08:37:25Z'>
		We cannot fix a bug without adding a unit test in the same pull request. This is because there might be further bugs down the road, and the name referenced before assignment might be only one of them.
We cannot know if we really fixed the bug until we have a unit test which will tell us that everything is fine and working.
		</comment>
		<comment id='13' author='nole-lin' date='2018-10-03T08:39:27Z'>
		I'll flag this as bug for visibility.
		</comment>
		<comment id='14' author='nole-lin' date='2018-10-03T10:49:25Z'>
		
So check for is None should be added for name, build_input_shape and layer_configs variables

Nope, this check would itself reference the undefined variable, throwing the same error. The correct solution is to assign these variables some default values before if, or to rewrite the code so that nonexistent variables would never be referenced. The first is better IMHO.
		</comment>
		<comment id='15' author='nole-lin' date='2018-10-03T11:14:57Z'>
		I can confirm that this occurs when trying to load in 2.2.3 models saved with an older Keras version (ie. 2.2.0 in my case) on a Sequential model. Could this be related to the following change in 2.2.3?

Modify the return value of Sequential.get_config(). Previously, the return value was a list of the config dictionaries of the layers of the model. Now, the return value is a dictionary with keys layers, name, and an optional key build_input_shape. The old config is equivalent to new_config['layers']. This makes the output of get_config consistent across all model classes.

If so, considering there might be people with many previously saved models, a method to use these should probably be provided, or the documentation should emphasize the incompatibility.
		</comment>
		<comment id='16' author='nole-lin' date='2018-10-03T11:30:53Z'>
		Here is a bash script you can run in a virtualenv to replicate the issue:
#!/bin/bash

cat &gt; script.py  &lt;&lt; EOF
import keras

def main():
    if keras.__version__ == '2.2.0':
        # create model 
        model = keras.models.Sequential()
        model.add(keras.layers.Dense(2, input_shape=(10,)))  # just so we can save
        model.compile(loss=keras.losses.categorical_crossentropy,
                      optimizer=keras.optimizers.Adam())
        model.save('./model.h5', overwrite=True)

    if keras.__version__ == '2.2.3':
        model = keras.models.load_model('./model.h5')
     
if __name__ == '__main__':
    main()
EOF

pip install keras==2.2.0
python script.py

pip install keras==2.2.3
python script.py
		</comment>
		<comment id='17' author='nole-lin' date='2018-10-03T15:42:31Z'>
		Can somebody try master and see if it works? I think this issue has been fixed here: &lt;denchmark-link:https://github.com/keras-team/keras/pull/11280&gt;#11280&lt;/denchmark-link&gt;

		</comment>
		<comment id='18' author='nole-lin' date='2018-10-04T13:04:51Z'>
		
Linking to #11269
We would like to work on this, but we cannot reproduce the bug. Can anyone give us a script to reproduce?

&lt;denchmark-link:https://github.com/gabrieldemarmiesse&gt;@gabrieldemarmiesse&lt;/denchmark-link&gt;
 Here it is!


Source Code + Sample data:
https://www.google.com/url?q=http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiNDc2ODQyOSIsImRlbGl2ZXJ5X2lkIjoiMzgxMTIzNDc2MiIsInVybCI6Imh0dHA6Ly9weWltZy5jby9tYnZkaz9fX3M9Y2d1ZDVodnhuc2I2NGlobnN4d2YifQ&amp;source=gmail&amp;ust=1538709027986000&amp;usg=AFQjCNG8-4xIpXI8DKv5YZQgHiRAl91ENA




Instructions to run it  :
https://www.pyimagesearch.com/2018/09/10/keras-tutorial-how-to-get-started-with-keras-deep-learning-and-python/




Error obtained (bug):
(env) (base) C:\Windows\System32\env\Scripts&gt;python C:\Users\puneeth\Downloads\keras-tutorial\keras-tutorial/predict.py --image C:\Users\puneeth\Downloads\keras-tutorial\keras-tutorial/images/panda.jpg --model C:\Users\puneeth\Downloads\keras-tutorial\keras-tutorial/output/smallvggnet.model --label-bin C:\Users\puneeth\Downloads\keras-tutorial\keras-tutorial/output/smallvggnet_lb.pickle --width 64 --height 64
Using TensorFlow backend.
[INFO] loading network and label binarizer...
Traceback (most recent call last):
File "C:\Users\puneeth\Downloads\keras-tutorial\keras-tutorial/predict.py", line 46, in 
model = load_model(args["model"])
File "C:\Windows\System32\env\lib\site-packages\keras\engine\saving.py", line 419, in load_model
model = _deserialize_model(f, custom_objects, compile)
File "C:\Windows\System32\env\lib\site-packages\keras\engine\saving.py", line 225, in deserialize_model
model = model_from_config(model_config, custom_objects=custom_objects)
File "C:\Windows\System32\env\lib\site-packages\keras\engine\saving.py", line 458, in model_from_config
return deserialize(config, custom_objects=custom_objects)
File "C:\Windows\System32\env\lib\site-packages\keras\layers_init.py", line 55, in deserialize
printable_module_name='layer')
File "C:\Windows\System32\env\lib\site-packages\keras\utils\generic_utils.py", line 145, in deserialize_keras_object
list(custom_objects.items())))
File "C:\Windows\System32\env\lib\site-packages\keras\engine\sequential.py", line 294, in from_config
model = cls(name=name)
UnboundLocalError: local variable 'name' referenced before assignment


(env) (base) C:\Windows\System32\env\Scripts&gt;
		</comment>
		<comment id='19' author='nole-lin' date='2018-10-04T14:28:01Z'>
		Keras 2.2.4 is available on pypi. The bug should be fixed. Can anyone confirm?
		</comment>
		<comment id='20' author='nole-lin' date='2018-10-05T03:55:05Z'>
		
Keras 2.2.4 is available on pypi. The bug should be fixed. Can anyone confirm?

&lt;denchmark-link:https://github.com/gabrieldemarmiesse&gt;@gabrieldemarmiesse&lt;/denchmark-link&gt;
 The bug is FIXED! Thanks... Here's the output
``
(env) (base) C:\Windows\System32\env\Scripts&gt;python
Python 3.6.5 |Anaconda, Inc.| (default, Mar 29 2018, 13:32:41) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.



import keras
Using TensorFlow backend.
keras.version
'2.2.4'
^Z



(env) (base) C:\Windows\System32\env\Scripts&gt;python C:\Users\puneeth\Downloads\keras-tutorial\keras-tutorial/predict.py --image C:\Users\puneeth\Downloads\keras-tutorial\keras-tutorial/images/panda.jpg --model C:\Users\puneeth\Downloads\keras-tutorial\keras-tutorial/output/smallvggnet.model --label-bin C:\Users\puneeth\Downloads\keras-tutorial\keras-tutorial/output/smallvggnet_lb.pickle --width 64 --height 64
Using TensorFlow backend.
[INFO] loading network and label binarizer...
2018-10-05 09:16:59.857450: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2
C:\Windows\System32\env\lib\site-packages\sklearn\base.py:251: UserWarning: Trying to unpickle estimator LabelBinarizer from version 0.19.1 when using version 0.20.0. This might lead to breaking code or invalid results. Use at your own risk.
UserWarning)

c:\users\puneeth\downloads\keras-tutorial\keras-tutorial\predict.py(50)()
-&gt; preds = model.predict(image)
(Pdb) n
c:\users\puneeth\downloads\keras-tutorial\keras-tutorial\predict.py(54)()
-&gt; i = preds.argmax(axis=1)[0]
(Pdb)
c:\users\puneeth\downloads\keras-tutorial\keras-tutorial\predict.py(55)()
-&gt; label = lb.classes_[i]
(Pdb)
c:\users\puneeth\downloads\keras-tutorial\keras-tutorial\predict.py(58)()
-&gt; text = "{}: {:.2f}%".format(label, preds[0][i] * 100)
(Pdb)
c:\users\puneeth\downloads\keras-tutorial\keras-tutorial\predict.py(59)()
-&gt; cv2.putText(output, text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7,
(Pdb)
c:\users\puneeth\downloads\keras-tutorial\keras-tutorial\predict.py(60)()
-&gt; (0, 0, 255), 2)
(Pdb)
c:\users\puneeth\downloads\keras-tutorial\keras-tutorial\predict.py(63)()
-&gt; cv2.imshow("Image", output)
(Pdb)
c:\users\puneeth\downloads\keras-tutorial\keras-tutorial\predict.py(64)()
-&gt; cv2.waitKey(0)
(Pdb)
``

		</comment>
		<comment id='21' author='nole-lin' date='2018-10-05T06:13:42Z'>
		Thanks everyone!
		</comment>
	</comments>
</bug>