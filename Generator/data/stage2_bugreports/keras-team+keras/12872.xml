<bug id='12872' author='luciasalar' open_date='2019-05-25T22:39:56Z' closed_time='2019-06-03T19:24:20Z'>
	<summary>`AttributeError: 'InputLayer' object has no attribute 'outbound_nodes'`</summary>
	<description>
I followed the keras blog &lt;denchmark-link:https://blog.keras.io/using-pre-trained-word-embeddings-in-a-keras-model.html&gt;https://blog.keras.io/using-pre-trained-word-embeddings-in-a-keras-model.html&lt;/denchmark-link&gt;
 on word embeddings. When reaching this point of the tutorial:
from keras.layers import Input
embedding_layer = Embedding(len(word_index) + 1,EMBEDDING_DIM,weights=[embedding_matrix],input_length=MAX_SEQUENCE_LENGTH,
                            trainable=False)
sequence_input = Input(shape=(MAX_SEQUENCE_LENGTH,), dtype='int32')
embedded_sequences = embedding_layer(sequence_input)
I experience a crash:
'AttributeError: 'InputLayer' object has no attribute 'outbound_nodes''
System information

Code taken from:  https://blog.keras.io/using-pre-trained-word-embeddings-in-a-keras-model.html
OS Platform and Distribution: Outdated version of scientific linux, used anaconda to fetch packages
TensorFlow backend (yes / no):  yes
TensorFlow version:  1.13.1
Keras version:  2.2.4
Python version:  3.7.3
CUDA/cuDNN version:  not available
GPU model and memory:  no GPU

Describe the current behavior
AttributeError: 'InputLayer' object has no attribute 'outbound_nodes'
Describe the expected behavior
it doesn't crash
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
Other info / logs
Traceback:
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-16-fd4b0bbd5a48&gt; in &lt;module&gt;
      3                             trainable=False)
      4 sequence_input = Input(shape=(MAX_SEQUENCE_LENGTH,), dtype='int32')
----&gt; 5 embedded_sequences = embedding_layer(sequence_input)
      6 x = Conv1D(128, 5, activation='relu')(embedded_sequences)
      7 x = MaxPooling1D(5)(x)

~/share/new_conda_for_me/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py in __call__(self, inputs, *args, **kwargs)
    582           if base_layer_utils.have_all_keras_metadata(inputs):
    583             inputs, outputs = self._set_connectivity_metadata_(
--&gt; 584                 inputs, outputs, args, kwargs)
    585           if hasattr(self, '_set_inputs') and not self.inputs:
    586             # Subclassed network: explicitly set metadata normally set by

~/share/new_conda_for_me/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py in _set_connectivity_metadata_(self, inputs, outputs, args, kwargs)
   1414     kwargs.pop('mask', None)  # `mask` should not be serialized.
   1415     self._add_inbound_node(
-&gt; 1416         input_tensors=inputs, output_tensors=outputs, arguments=kwargs)
   1417     return inputs, outputs
   1418 

~/share/new_conda_for_me/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py in _add_inbound_node(self, input_tensors, output_tensors, arguments)
   1522         input_tensors=input_tensors,
   1523         output_tensors=output_tensors,
-&gt; 1524         arguments=arguments)
   1525 
   1526     # Update tensor history metadata.

~/share/new_conda_for_me/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py in __init__(self, outbound_layer, inbound_layers, node_indices, tensor_indices, input_tensors, output_tensors, arguments)
   1740         # For compatibility with external Keras, we use the deprecated
   1741         # accessor here.
-&gt; 1742         layer.outbound_nodes.append(self)
   1743     # For compatibility with external Keras, we use the deprecated
   1744     # accessor here.

AttributeError: 'InputLayer' object has no attribute 'outbound_nodes'```
	</description>
	<comments>
		<comment id='1' author='luciasalar' date='2019-05-26T16:39:37Z'>
		Thanks for providing a detailed information. Although I can reproduce this but I haven't gone through the problem. Seems like a bug to me.
		</comment>
		<comment id='2' author='luciasalar' date='2019-05-26T16:42:41Z'>
		Hi, I solved the problem for now. It was a problem with my label index. But if you can reproduce it, it might be a misleading error
		</comment>
		<comment id='3' author='luciasalar' date='2019-06-03T19:24:20Z'>
		Closing this issue since its resolved. Thanks!
		</comment>
		<comment id='4' author='luciasalar' date='2020-06-02T15:22:33Z'>
		
Hi, I solved the problem for now. It was a problem with my label index. But if you can reproduce it, it might be a misleading error

Hi. What exactly did you do in order to fix this issue? I am trying to do the same but I do not (yet?) see how to fix it... In particular I am confused about the fact that it has to do something with the label when the two lines 'create input template' and 'create embeding layer and apply to input template' are completely independent from the label... scratching head
Also voting to open again because it is a noninformative error message ("some intrernal object is missing some internal property" is not really informative and could be an error w.r.t. any library, completely independent of keras...)
UPDATE:
Keras and Tensorflow pair up to confuse: There is a separate keras package provided by e.g. conda:
tensorflow.python.keras.layers.Input = keras library that comes with the tensorflow package
keras.layers.Input = separate package
However, according to &lt;denchmark-link:https://medium.com/@wellliu0302/tensorflow-keras-embedding-object-has-no-attribute-outbound-nodes-solution-21582e662e04&gt;https://medium.com/@wellliu0302/tensorflow-keras-embedding-object-has-no-attribute-outbound-nodes-solution-21582e662e04&lt;/denchmark-link&gt;
 there seem to weird version mismatch errors when using the 'external' keras library. Following the advice in this link and essentially replacing
from keras.layers import Input, Dense, Embedding
from keras.models import Model
by
from tensorflow.python.keras.layers import Input, Dense, Embedding
from tensorflow.keras.models import Model
seems to solve this issue for now. However, now I am getting a weird error in the line
from tensorflow.keras.models import Model
namely "Unresolved reference"... Sheesh... from a user perspective, tf is a mess in comparison to pytorch... ;-)
		</comment>
	</comments>
</bug>