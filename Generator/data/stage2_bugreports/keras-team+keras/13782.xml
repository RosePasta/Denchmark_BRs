<bug id='13782' author='brett-daley' open_date='2020-02-16T04:33:16Z' closed_time='2020-11-09T12:23:57Z'>
	<summary>model.summary() output shape is "multiple" when defining input_shape via model.build()</summary>
	<description>
When I define a model and pass the input_shape to the first layer, the Output Shape is well-defined after I call model.summary(). However, if I define a model and then pass the input_shape to model.build(), the Output Shape displays as "multiple." This behavior does not make sense to me. Both models should be identical as far as I can tell.
For example, running this code snippet
import tensorflow as tf
from tensorflow.keras.layers import Dense

if __name__ == '__main__':
    model1 = tf.keras.Sequential([Dense(1, input_shape=[10])])
    print(model1.summary())

    model2 = tf.keras.Sequential([Dense(1)])
    model2.build(input_shape=[None, 10])
    print(model2.summary())
produces this output:
&lt;denchmark-code&gt;Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
dense (Dense)                (None, 1)                 11
=================================================================
Total params: 11
Trainable params: 11
Non-trainable params: 0
_________________________________________________________________
None
Model: "sequential_1"
_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
dense_1 (Dense)              multiple                  11
=================================================================
Total params: 11
Trainable params: 11
Non-trainable params: 0
_________________________________________________________________
None
&lt;/denchmark-code&gt;

System information

Have I written custom code (as opposed to using example directory):  yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):  Linux Ubuntu 18.04
TensorFlow backend (yes / no):  yes
TensorFlow version:  2.1.0
Keras version:  2.3.1
Python version:  3.6.9
CUDA/cuDNN version:  CUDA 10.0 / cuDNN 7.6.5
GPU model and memory:  NVIDIA GeForce RTX 2080 Ti (11 Gb)

	</description>
	<comments>
		<comment id='1' author='brett-daley' date='2020-09-17T19:18:52Z'>
		Why is it that input_shape does not include the batch dimension when passed as an argument to the Dense layer but DOES include  the batch dimension when input_shape is passed to the build method?
		</comment>
		<comment id='2' author='brett-daley' date='2020-10-08T08:24:42Z'>
		Any movement on this issue? I'm refactoring a variational autoencoder to subclass from ks.Model and am having difficulties debugging it, partly because of this issue.
		</comment>
		<comment id='3' author='brett-daley' date='2020-10-21T05:29:36Z'>
		Any update? Shape of the layes should be known as after model.build is called.
		</comment>
		<comment id='4' author='brett-daley' date='2020-11-04T13:51:27Z'>
		The problem seems to have been fixed. I get:
&lt;denchmark-code&gt;Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense (Dense)                (None, 1)                 11        
=================================================================
Total params: 11
Trainable params: 11
Non-trainable params: 0
_________________________________________________________________
Model: "sequential_1"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense_1 (Dense)              (None, 1)                 11        
=================================================================
Total params: 11
Trainable params: 11
Non-trainable params: 0
_________________________________________________________________
&lt;/denchmark-code&gt;


OS Platform and Distribution: Linux Ubuntu 20.04.1 LTS x86_64
Python version: 3.8.3
Tensorflow version: 2.3.1
Keras version: 2.4.0

		</comment>
		<comment id='5' author='brett-daley' date='2020-11-09T12:23:56Z'>
		Thanks everyone who replied to this issue. As pointed out by &lt;denchmark-link:https://github.com/theblackfly&gt;@theblackfly&lt;/denchmark-link&gt;
, the behavior has been fixed in later versions of tensorflow. Out of curiosity, I tested the releases between 2.1.0 (mine) and 2.3.1 (theblackfly's); it looks like the bug was first fixed in 2.3.0.
		</comment>
	</comments>
</bug>