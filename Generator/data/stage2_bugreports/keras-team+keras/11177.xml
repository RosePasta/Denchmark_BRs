<bug id='11177' author='christopher5106' open_date='2018-09-18T19:44:36Z' closed_time='2018-09-19T06:51:21Z'>
	<summary>Tensorflow / CNTK compatibility issue for index selection</summary>
	<description>
The simple code
&lt;denchmark-code&gt;from keras import backend as K

var = K.ones(shape=(3, 4, 5))

print(var[...,1].shape)
&lt;/denchmark-code&gt;

gives (3, 4) under Tensorflow backend
gives (3,4,1) under CNTK backend.
	</description>
	<comments>
		<comment id='1' author='christopher5106' date='2018-09-18T19:54:05Z'>
		Can you use K.int_shape(var) instead of x.shape  and report if the bug is still there? x.shape is not a backend function. Thus you cannot expect it to be compatible across backend.
		</comment>
		<comment id='2' author='christopher5106' date='2018-09-18T19:57:35Z'>
		What else than the shape do you expect it to print ?
		</comment>
		<comment id='3' author='christopher5106' date='2018-09-18T19:59:00Z'>
		I tried with K.int_shape and I confirm.
But I'm surprised by the question.
		</comment>
		<comment id='4' author='christopher5106' date='2018-09-18T20:06:34Z'>
		Keras garantees (as much as possible) that all keras backend function behave the same across backends. If you call, let's say tf.clip_by_value and C.clip_by_value (I don't even know if it exist), keras doesn't have any control on those calls. x.shape in TF calls a tensorflow function. x.shape in CNTK calls a CNTK function. Keras doesn't have any control in this. This is because a keras tensor is a tensorflow tensor in the tensorflow backend. And a keras tensor is a CNTK tensor in the CNTK backend. Keras doesn't control their attributes (to allow users to call tf.shape(x) for example directly on the tensor).
		</comment>
		<comment id='5' author='christopher5106' date='2018-09-18T20:10:21Z'>
		Thanks for the report. I'll now note the bug that we should fix:
from keras import backend as K

var = K.ones(shape=(3, 4, 5))

print(K.int_shape(var[...,1]))
Returns (3,4,1) in the CNTK backend. Which may lead to bugs in the keras codebase (because unexpected behavior). I would say that this is a bug. Maybe an issue should be opened in CNTK directly rather than keras actually.
		</comment>
		<comment id='6' author='christopher5106' date='2018-09-18T20:12:19Z'>
		Maybe &lt;denchmark-link:https://github.com/souptc&gt;@souptc&lt;/denchmark-link&gt;
 can help us on this.
		</comment>
		<comment id='7' author='christopher5106' date='2018-09-18T20:13:26Z'>
		This bug has lots of consequences inside the code. I added an "expand_dims" in my code depending on the backend but this is should not be in the code.
I think that a shape is a shape, if you see it written (3,4) it is not (3,4,1).
		</comment>
		<comment id='8' author='christopher5106' date='2018-09-18T20:42:14Z'>
		It should follow the numpy conventions. So the right answer is (3, 4).
		</comment>
		<comment id='9' author='christopher5106' date='2018-09-18T23:26:01Z'>
		That is an issue in CNTK's slice operation, the behavior is different from numpy. It need to be resolve in cntk, I don't think there is much things we can do in keras repo, we can file a bug on cntk for it.
		</comment>
		<comment id='10' author='christopher5106' date='2018-09-19T05:22:38Z'>
		I open &lt;denchmark-link:https://github.com/Microsoft/CNTK/issues/3401&gt;an issue&lt;/denchmark-link&gt;
 in cntk repo to trace
		</comment>
		<comment id='11' author='christopher5106' date='2018-09-19T06:23:50Z'>
		Thank you &lt;denchmark-link:https://github.com/souptc&gt;@souptc&lt;/denchmark-link&gt;
 for your help. It's much appreciated.
		</comment>
		<comment id='12' author='christopher5106' date='2018-09-19T07:47:49Z'>
		Great thanks
		</comment>
	</comments>
</bug>