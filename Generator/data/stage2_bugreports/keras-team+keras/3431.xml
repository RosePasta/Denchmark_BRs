<bug id='3431' author='jmhessel' open_date='2016-08-09T18:55:41Z' closed_time='2017-01-12T08:15:34Z'>
	<summary>Potential Bug in K.squeeze for Theano?</summary>
	<description>
&lt;denchmark-link:https://gist.github.com/jmhessel/ede93c03ed04824c72ad773e13b37265&gt;Here&lt;/denchmark-link&gt;
 is an example of a case where Theano and Tensorflow differ in their behavior with respect to the K.squeeze function. Essentially, &lt;denchmark-link:https://github.com/fchollet/keras/blob/master/keras/backend/theano_backend.py#L504-L511&gt;K.squeeze(x, 2)&lt;/denchmark-link&gt;
 doesn't perform as it should in the example I provided, but only when using the Theano backend.
Has anyone else encountered this? Is this indeed a bug? If so, do folks have thoughts about what could be potentially not working?
&lt;denchmark-link:https://github.com/keras-team/keras/issues/3420&gt;#3420&lt;/denchmark-link&gt;
 also mentions an issue with this function in the Theano backend, though I'm not sure if this is exactly the same issue
	</description>
	<comments>
		<comment id='1' author='jmhessel' date='2016-08-09T19:02:28Z'>
		Versions:
&lt;denchmark-code&gt;&gt;&gt;&gt; import keras
Using Theano backend.
&gt;&gt;&gt; keras.__version__
'1.0.7'
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;&gt;&gt;&gt; import theano
&gt;&gt;&gt; theano.__version__
'0.9.0dev2.dev-bcd856b497356233a15e0c6e5d8feb193cf53635'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='jmhessel' date='2016-08-09T20:13:10Z'>
		I think its got something to do with theano's broadcasting business.
		</comment>
		<comment id='3' author='jmhessel' date='2016-08-10T00:57:46Z'>
		You need set the output_shape. &lt;denchmark-link:https://github.com/fchollet/keras/blob/master/keras/layers/core.py#L425-L440&gt;Keras lambda layers can't infere&lt;/denchmark-link&gt;
 the shape from the theano tensor.
I think Keras should warn the user when the number of dimensions of the tensor differs from the "default" output_shape (input_shape).
		</comment>
		<comment id='4' author='jmhessel' date='2016-08-10T08:22:28Z'>
		I have fixed this bug.
		</comment>
		<comment id='5' author='jmhessel' date='2016-08-10T14:33:06Z'>
		&lt;denchmark-link:https://github.com/farizrahman4u&gt;@farizrahman4u&lt;/denchmark-link&gt;
 Thanks for looking at this! However, even with your bugfix pulled, it looks like the difference in behavior between Theano and TF still persists on the example I gave. Maybe it's not something to be solved, but rather something where a warning should be printed as &lt;denchmark-link:https://github.com/dead&gt;@dead&lt;/denchmark-link&gt;
 mentioned?
		</comment>
		<comment id='6' author='jmhessel' date='2016-08-10T15:41:20Z'>
		&lt;denchmark-link:https://github.com/dead&gt;@dead&lt;/denchmark-link&gt;
 's observation about setting output_shape in the lambda layer fixed this -- should there be a warning printed or something like that? or maybe a requirement that output_shape be set for lambda layers with theano's backend?
alternatively, this is something that could potentially be noted in the documentation for the Lambda layer.
		</comment>
		<comment id='7' author='jmhessel' date='2016-08-10T16:21:23Z'>
		The output_shape argument is documented. I have a local patch that infers output shape of Lambda  layer automatically. &lt;denchmark-link:https://github.com/keras-team/keras/pull/2336&gt;#2336&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='jmhessel' date='2016-08-10T16:30:55Z'>
		The output_shape argument is documented, but there should potentially be a note (or potentially even a warning that prints if you use Lambda with the theano backend without specifying output_shape) that states that one should really be using the argument with the theano backend.
Basically -- I'm saying that the notes about the differences in behavior between theano and tf that are present in the python comments in the source code should potentially be in the documentation for Lambda as well.
		</comment>
		<comment id='9' author='jmhessel' date='2017-01-12T08:15:20Z'>
		Warning added ! Closing.
		</comment>
	</comments>
</bug>