<bug id='13918' author='johmicrot' open_date='2020-03-29T19:20:50Z' closed_time='2020-12-18T11:44:44Z'>
	<summary>2.2.0-rc1 causing error when using model.add_metric</summary>
	<description>
In the Google Colab enviornment, I was previously using
tensorflow version:  2.1.0
The tensorflow version has updated to
tensorflow version:  2.2.0-rc1
and I am experiencing a odd error after the update
&lt;denchmark-code&gt;`TypeError                                 Traceback (most recent call last)

&lt;ipython-input-5-f75056bf8301&gt; in &lt;module&gt;()
      1 data_subset = 'CUB_%sc' % mm.num_classes
      2 
----&gt; 3 qpn_model = mm.create_model_and_compile_FECS()
      4 first_model = model_location + '224weights_epoc(0).tf'
      5 qpn_model.load_weights(first_model)

4 frames

/content/drive/My Drive/thesis_colab/model_files_newmethod6.py in create_model_and_compile_FECS(self)
    181         print(type(fe_accuracy))
    182 
--&gt; 183         model.add_metric(fe_accuracy, name='fe_a', aggregation='mean')
    184         model.add_metric(cs_accuracy, name='cs_a', aggregation='mean')
    185         model.add_metric(fe_loss, name='fe_loss', aggregation='mean')

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in add_metric(self, value, aggregation, name)
   1375 
   1376       # Insert layers into the Keras Graph Network.
-&gt; 1377       self._graph_network_add_metric(value, aggregation, name)
   1378 
   1379   @deprecation.deprecated_args(None, '`inputs` is now automatically inferred',

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/network.py in _graph_network_add_metric(self, value, aggregation, name)
   1575     new_nodes.extend(add_metric_layer.inbound_nodes)
   1576     new_layers.append(add_metric_layer)
-&gt; 1577     self._insert_layers(new_layers, new_nodes)
   1578 
   1579   @trackable.no_automatic_dependency_tracking

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/network.py in _insert_layers(self, layers, relevant_nodes)
   1476 
   1477     # Insert layers and update other layer attrs.
-&gt; 1478     layer_set = set(self._layers)
   1479     deferred_layers = []
   1480     for layer in layers:

/usr/local/lib/python3.6/dist-packages/tensorflow/python/training/tracking/data_structures.py in __hash__(self)
    868 
    869   def __hash__(self):
--&gt; 870     raise TypeError("unhashable type: 'DictWrapper'")
    871 
    872   def __eq__(self, other):

TypeError: unhashable type: 'DictWrapper'`
&lt;/denchmark-code&gt;

I am using the following functions
&lt;denchmark-code&gt;def FE_accuracy_cub(self, args):
    qp = args[:self.eta, :]
    n = args[self.eta:, :]
    indicator = tf.map_fn(lambda i: self.row_wise_subtraction_and_comparison(i, qp, n), elems=tf.range(self.eta),
                          dtype=tf.float32)
    comparison = tf.cast(tf.math.greater(tf.constant(0.0), indicator), tf.float32)
    return tf.reduce_mean(comparison)

def row_wise_subtraction_and_comparison(self,i, qp, n):
    i = tf.cast(i, tf.int32)
    q_elm = tf.gather(qp, i)
    qp_elm_sub = tf.expand_dims(q_elm, axis=0) - qp
    qp_elm_mag = tf.math.sqrt(tf.reduce_sum(tf.math.square(qp_elm_sub), axis=1))
    n_sub = tf.expand_dims(q_elm, axis=0) - n
    n_mag = tf.math.sqrt(tf.reduce_sum(tf.math.square(n_sub), axis=1))
    loss = tf.expand_dims(qp_elm_mag, axis=1) - n_mag
    loss_out = loss
    return loss_out

    def base_network(self):
        mob_net = tf.keras.applications.MobileNetV2(weights=None,
                                                    include_top=False,
                                                    input_shape=self.in_shape)
        mob_net.load_weights(self.init_W)
        fmg = Layer(name="Feature_map_G")(mob_net.layers[-self.end_layer].output)
        x = GlobalAveragePooling2D()(fmg)
        x = Lambda(lambda a: tf.math.l2_normalize(a, axis=1), name='l2_norm')(x)
        outmodel = Model(inputs=mob_net.input, outputs=x, name='base_FE_network')
        # plot_model(outmodel, 'mobilenet_batchnorm_l2_norm.jpg')
        self.map_G = Model(inputs=mob_net.input, outputs=fmg, name='base_FE_network')
        return outmodel

def base_network(self):
    mob_net = tf.keras.applications.MobileNetV2(weights=None,
                                                include_top=False,
                                                input_shape=self.in_shape)
    mob_net.load_weights(self.init_W)
    fmg = Layer(name="Feature_map_G")(mob_net.layers[-self.end_layer].output)
    x = GlobalAveragePooling2D()(fmg)
    x = Lambda(lambda a: tf.math.l2_normalize(a, axis=1), name='l2_norm')(x)
    outmodel = Model(inputs=mob_net.input, outputs=x, name='base_FE_network')
    # plot_model(outmodel, 'mobilenet_batchnorm_l2_norm.jpg')
    self.map_G = Model(inputs=mob_net.input, outputs=fmg, name='base_FE_network')
    return outmodel

&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;def create_model_and_compile_FECS(self):
    input_shape = self.in_shape
    self.base_model = self.base_network()
    self.cs_layer = Dense(self.num_classes, use_bias=False, name='CS_layer')
    qpn_in = Input(shape=input_shape, name='in_qpn')
    qpny = Input(shape=(self.num_classes,), name='in_qpny')
    qpny_label = Input(shape=(1,), name='in_qpny_label')

    qpn_out = self.base_model(qpn_in)
    qpn_cls_sig = self.cs_layer(qpn_out)

    fe_loss = Lambda(self.triplet_loss_all_enumerations_fix, name='triplet_loss_FE')(qpn_out)* self.fe_weight
    fe_accuracy = Lambda(self.FE_accuracy_cub, name='FE_accuracy_metric')(qpn_out)

    cs_accuracy = Lambda(self.CS_accuracy, name='CS_Acc')([qpn_cls_sig, qpny])
    cs_loss = Lambda(self.manual_CS_loss, name='CS_loss_calc')([qpn_cls_sig, qpny]) * self.cs_weight

    total_loss = fe_loss + cs_loss

    model = Model(inputs=[qpn_in, qpny, qpny_label], outputs= [qpn_cls_sig], name='FEModel')

    if 'adm' in self.optim:
      optm = Adam(lr=self.LR)
    elif 'ranger' in self.optim:
      radam = tfa.optimizers.RectifiedAdam(lr=self.LR, min_lr=1e-7)
      optm = tfa.optimizers.Lookahead(radam, sync_period=6, slow_step_size=0.5)

    model.add_loss(total_loss)
    model.compile(optimizer=optm)
    model.add_metric(fe_accuracy, name='fe_a', aggregation='mean')

&lt;/denchmark-code&gt;

I can provide more code or information if needed
	</description>
	<comments>
		<comment id='1' author='johmicrot' date='2020-06-10T03:42:39Z'>
		Try to use add_metric before model.compile.
In my case, I was having the same problem as you mentioned, and after this change, the problem was solved.
Take a look at the example before session "Automatically setting apart a validation holdout set" on the tensorflow guide:
&lt;denchmark-link:https://www.tensorflow.org/guide/keras/train_and_evaluate#specifying_a_loss_metrics_and_an_optimizer&gt;https://www.tensorflow.org/guide/keras/train_and_evaluate#specifying_a_loss_metrics_and_an_optimizer&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>