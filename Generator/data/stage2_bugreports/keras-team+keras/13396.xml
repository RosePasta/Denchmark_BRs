<bug id='13396' author='OverLordGoldDragon' open_date='2019-10-05T01:08:14Z' closed_time='2019-10-10T21:36:12Z'>
	<summary>TF2 K.get_value() - bug or feature?</summary>
	<description>
Calling K.get_value(self.param) inside optimizer.get_update() yields below error:
NotImplementedError: numpy() is only available when eager execution is enabled.
Debugging, I learn that  evaluates to  in given scope, but to  in . I note the latter is always called in a declared scope - e.g.  &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/64c3d382cadf7bbe8e7e99884bede8284ff67f56/tensorflow/python/keras/distribute/multi_worker_test.py#L216&gt;here&lt;/denchmark-link&gt;
.
However - the buggy aspect here is that K.get_value() works fine post-error - i.e. if I run K.get_value(model.optimizer.param), it evaluates successfully. This is accomplished via the K.symbolic wrapper, which calls tensorflow_backend.symbolic() post-error - which, when finishes executing, changes the parameter as follows:
&lt;tf.Variable 'Adam/param:0' shape=() dtype=int64&gt;
# into
&lt;tf.Variable 'Adam/param:0' shape=() dtype=int64, numpy=100&gt;
Also, calling param.numpy() directly yields the same error. I'm using Keras 2.3.0 w/ TensorFlow 2.0.0. -- Bug or feature? And how do I now retrieve K.variable values during optimizer compilation? (usage is boolean - e.g. if param == 1)
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

UPDATE
: 

print(self.param); print(tf.executing_eagerly) under each of below yields, respectively:
# def __init__(self, ...)
&lt;tf.Variable 'Adam/param:0' shape=() dtype=int64, numpy=100&gt;
True

# def get_updates(self)
&lt;tf.Variable 'Adam/param:0' shape=() dtype=int64&gt;
False
The wrappers appear to be involved - from K.symbolic.__doc__:

"Decorator used in TensorFlow 2.0 to enter the Keras graph"

So this is at the expense of class attribute values getting lost? Should __init__ also be wrapped then?
	</description>
	<comments>
		<comment id='1' author='OverLordGoldDragon' date='2019-10-05T20:55:35Z'>
		SOLUTION: Use K.eager(K.get_value)(self.param).
This wasn't mentioned in release notes, nor is noted in documentation under K.get_value - I'd strongly advise the latter, as it'd spare me hours of search.
		</comment>
		<comment id='2' author='OverLordGoldDragon' date='2019-10-05T23:51:07Z'>
		; above isn't an all-purpose fix; any non- ops, including addition &amp; multiplication, turn variables into tensors, and throw . &lt;denchmark-link:https://stackoverflow.com/questions/58253408/how-to-get-value-of-a-keras-tensor-in-tensorflow-2&gt;Relevant SO&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='OverLordGoldDragon' date='2019-10-10T21:36:12Z'>
		&lt;denchmark-link:https://stackoverflow.com/questions/58253408/how-to-get-value-of-a-keras-tensor-in-tensorflow-2&gt;Solved&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>