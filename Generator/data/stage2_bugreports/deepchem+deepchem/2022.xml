<bug id='2022' author='gvisani' open_date='2020-07-17T14:01:16Z' closed_time='2020-07-22T19:28:42Z'>
	<summary>Cosine similarity calculation</summary>
	<description>
I believe the function computing cosine similarity, found in layers.py, does not compute the denominator correctly if y is a matrix instead of a single vector:
** Current code **
&lt;denchmark-code&gt;def _cosine_dist(x, y):
  denom = (backend.sqrt(backend.sum(tf.square(x)) * backend.sum(tf.square(y))) + backend.epsilon())
  return backend.dot(x, tf.transpose(y)) / denom
&lt;/denchmark-code&gt;

** Possible fix **
&lt;denchmark-code&gt;def _cosine_dist(x, y):
  denom = backend.sqrt(backend.dot(tf.reshape(backend.sum(tf.square(x), axis=1), (-1, 1)), tf.reshape(backend.sum(tf.square(y), axis=1), (1, -1))) + backend.epsilon())
  
  return tf.math.divide(backend.dot(x, tf.transpose(y)), denom)
&lt;/denchmark-code&gt;

The denominator should not be equal for every computed similarity value. It should be specific for each pair of vectors for which we wish to compute similarity.
Edit by &lt;denchmark-link:https://github.com/rbharath&gt;@rbharath&lt;/denchmark-link&gt;
: Fixed formatting on code samples
	</description>
	<comments>
		<comment id='1' author='gvisani' date='2020-07-17T20:08:03Z'>
		&lt;denchmark-link:https://github.com/gvisani&gt;@gvisani&lt;/denchmark-link&gt;
 Thanks for the bugcatch! I think the original function was written assuming  and  were single vectors and not batched correctly. We should add some unit tests, improve the documentation, and incorporate the above fix.
		</comment>
	</comments>
</bug>