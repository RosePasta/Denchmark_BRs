<bug id='1504' author='brunocuevas' open_date='2019-02-04T15:57:59Z' closed_time='2019-03-10T19:29:59Z'>
	<summary>Symmetry functions featurization functions are not in "feats"</summary>
	<description>
Hello
I just noticed that methods for featurization using Behler-Parrinello (2007) symmetry functions are not implemented in the corresponding "feat" class. On the contrary, those features are obtained using methods from deepchem.models.tensorgraph.symmetry_functions. It was a little hard for me to understand how to get those features until I read the commit of this class.
I would suggest that the methods involved in the calculation of symmetry functions become methods from the deepchem.feat.BPSymmetryFunction, or on the contrary, if that is not possible, some reference to those functions in the docstrings.
Thanks, everybody for your great work
	</description>
	<comments>
		<comment id='1' author='brunocuevas' date='2019-02-04T17:59:46Z'>
		The BPSymmetryFunction class is totally misnamed, because it doesn't do anything like what it claims.  It just creates an array of the coordinates and atomic numbers.  We should fix that.
For a lot of the common uses of these models (molecular dynamics, energy minimization), it's important that the inputs be raw coordinates and that the symmetry functions get calculated as part of the model.  That way, you can backpropagate through the whole thing and get derivatives of the energy with respect to the coordinates.
Do you have specific use cases for which you need the symmetry functions to be part of the featurization?
		</comment>
		<comment id='2' author='brunocuevas' date='2019-02-04T18:34:14Z'>
		Yes, I wanted to predict the parameters of a model of electron density I'm working on, and I liked symmetry functions because they can provide specific atom feats. When I saw that there was a BPSymmetry class I thought I would have it coded in 5 minutes, but then I realized that is way more complex, and I don't know yet if any of the implemented models can fulfill my specific requirements.
		</comment>
		<comment id='3' author='brunocuevas' date='2019-02-04T19:04:32Z'>
		Can you explain what it is about your model that requires the inputs to be precomputed symmetry functions, rather than the atomic coordinates from which the symmetry functions are computed?
		</comment>
		<comment id='4' author='brunocuevas' date='2019-02-04T20:19:17Z'>
		Actually, I must confess that I'm a newbie of deep learning, so at the beginning, I thought I'd just obtain a bunch of vectors, I'd store them in a matrix and then just train some NN. Of course, it was a way less sophisticated idea than including the symmetry functions as layers of the NN because, but it was good for me because I don't need to backpropagate on coordinates. After all, I'm trying to reproduce electron density, not energy.
Anyway, I think I can try to use the classes of "deepchem.models.tensorgraph.symmetry_functions", it's just that it does not work the way I thought at the beginning when I read the name of this class
		</comment>
		<comment id='5' author='brunocuevas' date='2019-02-04T20:56:06Z'>
		Yeah, sorry about that.  That class name and description are just wrong.  What it really means is that it builds the input matrices expected by the classes that actually compute the symmetry functions.  I've marked this as a bug to indicate we should fix them.
		</comment>
		<comment id='6' author='brunocuevas' date='2019-02-04T21:22:27Z'>
		Great help, thanks üëç
		</comment>
		<comment id='7' author='brunocuevas' date='2019-02-24T11:45:49Z'>
		&lt;denchmark-link:https://github.com/brunocuevas&gt;@brunocuevas&lt;/denchmark-link&gt;
: This has been fixed now
		</comment>
	</comments>
</bug>