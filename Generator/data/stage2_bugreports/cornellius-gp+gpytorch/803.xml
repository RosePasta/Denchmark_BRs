<bug id='803' author='Akella17' open_date='2019-07-21T21:04:30Z' closed_time='2019-07-23T14:04:09Z'>
	<summary>AttributeError: 'LazyEvaluatedKernelTensor' object has no attribute 'lazy_tensors'</summary>
	<description>
The gpytorch.settings.fast_pred_var() setting fails when I am using an additive kernel, i.e. a composition of an RBF kernel and Linear kernel. This however does not occur when the additive kernel is over two RBF kernels.
To reproduce this issue,
import torch
import gpytorch
import torch.nn as nn
from torch.autograd import Variable
import math

class GP_layer(gpytorch.models.ExactGP):
    def __init__(self, train_x, train_y, likelihood):
        super(GP_layer, self).__init__(train_x, train_y, likelihood)
        self.mean_module = gpytorch.means.ConstantMean()
        
        self.covar_module_1 = gpytorch.kernels.RBFKernel(ard_num_dims=2, active_dims=torch.tensor([0,1]))
        self.covar_module_2 = gpytorch.kernels.LinearKernel(active_dims=torch.tensor([2,3]))
        self.covar_module = self.covar_module_1 + self.covar_module_2

    def forward(self, x):
        mean_x = self.mean_module(x)
        covar_x = self.covar_module(x)
        return gpytorch.distributions.MultivariateNormal(mean_x, covar_x)

train_x = torch.stack((torch.linspace(0, 10, 1500), torch.linspace(0.5, 10.5, 1500), torch.linspace(3, 14, 1500), torch.linspace(7.5, 19.5, 1500)),1).cuda()
train_y = (train_x[:,3]**2 - train_x[:,2])/10 + torch.cos(train_x[:,0] * (2 * math.pi)) + torch.sin(train_x[:,1] * (2 * math.pi)) + 0.1 * torch.randn(1500).cuda()

likelihood = gpytorch.likelihoods.GaussianLikelihood().cuda()
model = GP_layer(train_x, train_y, likelihood).cuda()
mll = gpytorch.mlls.ExactMarginalLogLikelihood(likelihood, model)

model.train()
likelihood.train()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001, weight_decay=1e-3)

for _ in range(10):
    optimizer.zero_grad()
    outputs = model(train_x)
    loss = -mll(outputs, train_y).mean()
    loss.backward()
    optimizer.step()

model.eval()
likelihood.eval()

test_x = torch.stack((torch.linspace(0, 10, 17), torch.linspace(0.5, 10.5, 17), torch.linspace(3, 14, 17), torch.linspace(7.5, 19.5, 17)),1).cuda()
test_y = (test_x[:,3]**2 - test_x[:,2])/10 + torch.cos(test_x[:,0] * (2 * math.pi)) + torch.sin(test_x[:,1] * (2 * math.pi)) + 0.1 * torch.randn(17).cuda()

with gpytorch.settings.fast_pred_var():
    outputs_y = model(test_x).mean
print(outputs_y.size())
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "test.py", line 46, in &lt;module&gt;
    outputs_y = model(test_x).mean
  File "/home1/deepak/anaconda/envs/rl_proj/lib/python3.6/site-packages/gpytorch/models/exact_gp.py", line 265, in __call__
    predictive_mean, predictive_covar = self.prediction_strategy.exact_prediction(full_mean, full_covar)
  File "/home1/deepak/anaconda/envs/rl_proj/lib/python3.6/site-packages/gpytorch/models/exact_prediction_strategies.py", line 265, in exact_prediction
    self.exact_predictive_covar(test_test_covar, test_train_covar),
  File "/home1/deepak/anaconda/envs/rl_proj/lib/python3.6/site-packages/gpytorch/models/exact_prediction_strategies.py", line 332, in exact_predictive_covar
    test_train_covar)
  File "/home1/deepak/anaconda/envs/rl_proj/lib/python3.6/site-packages/gpytorch/models/exact_prediction_strategies.py", line 549, in _exact_predictive_covar_inv_quad_form_root
    self._sub_strategies, precomputed_cache, test_train_covar.evaluate_kernel().lazy_tensors
  File "/home1/deepak/anaconda/envs/rl_proj/lib/python3.6/site-packages/gpytorch/models/exact_prediction_strategies.py", line 515, in _sub_strategies
    for lazy_tensor in self.train_prior_dist.lazy_covariance_matrix.lazy_tensors:
AttributeError: 'LazyEvaluatedKernelTensor' object has no attribute 'lazy_tensors'

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Akella17' date='2019-07-23T14:04:23Z'>
		I just pushed a hot fix to master that fixes this issue.
		</comment>
	</comments>
</bug>