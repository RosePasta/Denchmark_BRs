<bug id='533' author='Balandat' open_date='2019-02-22T22:50:27Z' closed_time='2019-03-19T14:58:12Z'>
	<summary>batch evaluation of Kronecker GP fails when not using fast_pred_var</summary>
	<description>
Repro:
Run the &lt;denchmark-link:https://github.com/cornellius-gp/gpytorch/blob/master/examples/03_Multitask_GP_Regression/Multitask_GP_Regression.ipynb&gt;Kronecker Multi-Task GP example&lt;/denchmark-link&gt;
.
The following works fine:
&lt;denchmark-code&gt;test_x = torch.linspace(0, 1, 51).unsqueeze(-1).repeat(2, 1, 1)

with gpytorch.settings.fast_pred_var():
    out = likelihood(model(test_x))
&lt;/denchmark-code&gt;

But when not using fast_pred_var, i.e. just running out = likelihood(model(test_x)), this yields the following IndexError:
&lt;denchmark-code&gt;IndexError                                Traceback (most recent call last)
&lt;ipython-input-22-08b3c9b4435f&gt; in &lt;module&gt;()
----&gt; 1 out = likelihood(model(test_x))

/data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/models/exact_gp.py in __call__(self, *args, **kwargs)
    262 
    263             predictive_mean = self.prediction_strategy.exact_predictive_mean(test_mean, test_train_covar)
--&gt; 264             predictive_covar = self.prediction_strategy.exact_predictive_covar(test_test_covar, test_train_covar)
    265 
    266             if num_tasks &gt; 1:

/data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/models/exact_prediction_strategies.py in exact_predictive_covar(self, test_test_covar, test_train_covar)
    321             test_train_covar = test_train_covar.evaluate()
    322             train_test_covar = test_train_covar.transpose(-1, -2)
--&gt; 323             covar_correction_rhs = train_train_covar.inv_matmul(train_test_covar).mul(-1)
    324             return test_test_covar + MatmulLazyTensor(test_train_covar, covar_correction_rhs)
    325 

/data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/lazy_tensor.py in inv_matmul(self, right_tensor, left_tensor)
    685         )
    686         if left_tensor is None:
--&gt; 687             return func(right_tensor, *self.representation())
    688         else:
    689             return func(left_tensor, right_tensor, *self.representation())

/data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/functions/_inv_matmul.py in forward(self, *args)
     23 
     24         with torch.no_grad():
---&gt; 25             self.preconditioner = lazy_tsr.detach()._inv_matmul_preconditioner()
     26 
     27         self.is_vector = False

/data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/lazy_tensor.py in _inv_matmul_preconditioner(self)
    331             function: a function on x which performs P^{-1}(x)
    332         """
--&gt; 333         base_precond, _ = self._preconditioner()
    334 
    335         if base_precond is not None:

/data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/added_diag_lazy_tensor.py in _preconditioner(self)
     58         if not hasattr(self, "_woodbury_cache"):
     59             max_iter = settings.max_preconditioner_size.value()
---&gt; 60             self._piv_chol_self = pivoted_cholesky.pivoted_cholesky(self._lazy_tensor, max_iter)
     61             if torch.any(torch.isnan(self._piv_chol_self)).item():
     62                 warnings.warn(

/data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/utils/pivoted_cholesky.py in pivoted_cholesky(matrix, max_iter, error_tol)
     54         L_m.scatter_(-1, pi_m.unsqueeze(-1), max_diag_values.sqrt().unsqueeze_(-1))
     55 
---&gt; 56         row = matrix[(*batch_iters, pi_m.view(-1), slice(None, None, None))]
     57         if isinstance(row, LazyTensor):
     58             row = row.evaluate()

/data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/lazy_tensor.py in __getitem__(self, index)
   1354 
   1355         # Call self._getitem - now that the index has been processed
-&gt; 1356         return self._getitem(*index)
   1357 
   1358     def __matmul__(self, other):

/data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/sum_lazy_tensor.py in _getitem(self, *indices)
     25 
     26     def _getitem(self, *indices):
---&gt; 27         results = tuple(lazy_tensor._getitem(*indices) for lazy_tensor in self.lazy_tensors)
     28         if isinstance(results[0], LazyTensor):
     29             return SumLazyTensor(*results)

/data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/sum_lazy_tensor.py in &lt;genexpr&gt;(.0)
     25 
     26     def _getitem(self, *indices):
---&gt; 27         results = tuple(lazy_tensor._getitem(*indices) for lazy_tensor in self.lazy_tensors)
     28         if isinstance(results[0], LazyTensor):
     29             return SumLazyTensor(*results)

/data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/block_lazy_tensor.py in _getitem(self, *indices)
    135 
    136                 # Normal case: we have to do some processing on eithe rthe rows or columns
--&gt; 137                 res = new_var._getitem_nonbatch(left_index, right_index, first_tensor_index_dim)
    138                 if (squeeze_left or squeeze_right) and isinstance(res, LazyTensor):
    139                     res = res.evaluate()

/data/users/balandat/fbsource/fbcode/buck-out/dev/gen/bento/kernels/bento_kernel_ae_lazarus#link-tree/gpytorch/lazy/lazy_tensor.py in _getitem_nonbatch(self, row_index, col_index, first_tensor_index_dim)
    294         left_row_iter = torch.arange(0, self.size()[-2], dtype=torch.long, device=self.device)
    295         right_row_iter = torch.arange(0, self.size()[-1], dtype=torch.long, device=self.device)
--&gt; 296         left_interp_indices = left_row_iter[row_index].unsqueeze(-1)
    297         right_interp_indices = right_row_iter[col_index].unsqueeze(-1)
    298 

IndexError: index 198 is out of bounds for dimension 0 with size 4
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Balandat' date='2019-03-13T21:20:45Z'>
		&lt;denchmark-link:https://github.com/Balandat&gt;@Balandat&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/gpleiss&gt;@gpleiss&lt;/denchmark-link&gt;
 I just checked, and this is fixed on the  branch. Let's monitor this for problems once Geoff's work on that gets merged in, but I anticipate this problem disappearing with that PR, so I'm not going to do the work to fix it on master.
		</comment>
	</comments>
</bug>