<bug id='1328' author='SomeshDaga' open_date='2020-11-03T05:34:31Z' closed_time='2020-11-03T19:59:48Z'>
	<summary>[Bug] SpectralMixtureKernel training inputs w/ constant value along a dimension</summary>
	<description>
&lt;denchmark-h:h1&gt;üêõ Bug&lt;/denchmark-h&gt;

The initialize_from_data method for the SpectralMixtureKernel does not admit a train_x with constant values along any dimension.
&lt;denchmark-h:h2&gt;To reproduce&lt;/denchmark-h&gt;

** Code snippet to reproduce **
import torch
import gpytorch

# Initialize 100 samples training data
# Inputs have dimension 5
# Outputs have dimension 2
train_x = torch.randn(100, 5)
# Set values for inputs along dimension 1 to be  equal
train_x[:, 1] = torch.ones(100)
train_y = torch.randn(100, 2)

kernel = gp.kernels.SpectralMixtureKernel(num_mixtures=4, ard_num_dims=5)
kernel.initialize_from_data(train_x, train_y)
** Stack trace/error message **
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/somesh/imitation/src/imitation/sandbox/imitate.py", line 138, in &lt;module&gt;
    correlate_actions=False
  File "/home/somesh/imitation/src/imitation/sandbox/algorithms/bc/gp.py", line 231, in __init__
    feature_extractor_kwargs=feature_extractor_kwargs
  File "/home/somesh/imitation/src/imitation/sandbox/algorithms/bc/gp.py", line 164, in __init__
    self.covar_module.initialize_from_data(self.train_x, self.train_y)
  File "/home/somesh/imitation/lib/python3.7/site-packages/gpytorch/kernels/spectral_mixture_kernel.py", line 211, in initialize_from_data
    min_dist[:, ind] = min_dist_sort[((min_dist_sort[:, ind]).nonzero(as_tuple=False))[0], ind]
IndexError: index 0 is out of bounds for dimension 0 with size 0
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Expected Behavior&lt;/denchmark-h&gt;

No errors should be observed.
&lt;denchmark-h:h2&gt;System information&lt;/denchmark-h&gt;

Please complete the following information:

GPyTorch 1.2.1
PyTorch 1.7.0
Ubuntu 18.04

&lt;denchmark-h:h2&gt;Additional context&lt;/denchmark-h&gt;

The initialize_from_data function clearly expects non-zero differences in values along every dimension. For datasets with a large amount of features, we may expect there to be some 'useless' features. One way to approach this might be to preprocess the data and remove such features, but it would be ideal if this scenario could be dealt with gracefully by the kernel class.
	</description>
	<comments>
		<comment id='1' author='SomeshDaga' date='2020-11-03T19:59:48Z'>
		I see that this a duplicate of &lt;denchmark-link:https://github.com/cornellius-gp/gpytorch/issues/233&gt;#233&lt;/denchmark-link&gt;
 . Will close this issue
		</comment>
	</comments>
</bug>