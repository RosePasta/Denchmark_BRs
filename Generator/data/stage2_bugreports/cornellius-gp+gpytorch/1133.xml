<bug id='1133' author='wjmaddox' open_date='2020-05-04T15:26:19Z' closed_time='2020-06-14T00:44:08Z'>
	<summary>[Bug] ConstantMulLazyTensor can only add batched tensors</summary>
	<description>
&lt;denchmark-h:h1&gt;üêõ Bug&lt;/denchmark-h&gt;

ConstantMulLazyTensor attempts to expand _constant according to batch dimensions which fails when there is no batch dimension.
&lt;denchmark-h:h2&gt;To reproduce&lt;/denchmark-h&gt;

** Code snippet to reproduce **
import gpytorch
import torch

tlt = gpytorch.lazy.ToeplitzLazyTensor(torch.randn(100).abs())
cmtlt = torch.ones(1) * tlt
cmtlt + torch.randn(100, 100)

#more specifically
cmtlt._constant.expand(*torch.Size([])) # fails
** Stack trace/error message **
&lt;denchmark-code&gt;---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-16-0d626e17adaf&gt; in &lt;module&gt;
----&gt; 1 cmtlt + torch.randn(100, 100)

~/Documents/GitHub/gpytorch/gpytorch/lazy/lazy_tensor.py in __add__(self, other)
   1625             other = lazify(other)
   1626             shape = _mul_broadcast_shape(self.shape, other.shape)
-&gt; 1627             return SumLazyTensor(self.expand(shape), other.expand(shape))
   1628         else:
   1629             return SumLazyTensor(self, other)

~/Documents/GitHub/gpytorch/gpytorch/lazy/lazy_tensor.py in expand(self, *sizes)
    857             raise RuntimeError("Invalid arguments {} to expand.".format(sizes))
    858 
--&gt; 859         res = self._expand_batch(batch_shape=shape[:-2])
    860         return res
    861 

~/Documents/GitHub/gpytorch/gpytorch/lazy/constant_mul_lazy_tensor.py in _expand_batch(self, batch_shape)
     70     def _expand_batch(self, batch_shape):
---&gt; 71         return self.__class__(self.base_lazy_tensor._expand_batch(batch_shape), self._constant.expand(*batch_shape))
     72 
     73     def _get_indices(self, row_index, col_index, *batch_indices):

TypeError: expand() missing 1 required positional arguments: "size"
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Expected Behavior&lt;/denchmark-h&gt;

It should return a SumLazyTensor of shape 100 x 100.
&lt;denchmark-h:h2&gt;System information&lt;/denchmark-h&gt;

Please complete the following information:
gpytorch 1.0.1 (code hasn't changed in 1.1.0)
pytorch 1.4.0
MacOS
&lt;denchmark-h:h2&gt;Additional context&lt;/denchmark-h&gt;

The fix is to force the tensor that is being added to have a batch dimension.
cmtlt + torch.randn(1, 100, 100)
	</description>
	<comments>
		<comment id='1' author='wjmaddox' date='2020-05-13T12:45:14Z'>
		Huh this seems strange. Thanks for the bug catch!
I'm swamped right now but I can get to this in a week or two, or LMK if you can submit a PR.
		</comment>
	</comments>
</bug>