<bug id='895' author='NinelK' open_date='2019-10-07T15:23:39Z' closed_time='2019-10-08T21:43:29Z'>
	<summary>[Bug] Interpolation gives wrong interp_values next to the left boundary</summary>
	<description>
&lt;denchmark-h:h1&gt;üêõ Bug&lt;/denchmark-h&gt;

Interpolation utility returns asymetric interp_values for symmetric grid &amp; inputs.
The problem arises next to the left boundary, where all points between gridpoint-0 and gridpoint-2 are interpolated with the same value (this should not happen)!
&lt;denchmark-h:h2&gt;To reproduce&lt;/denchmark-h&gt;

import numpy
import torch

grid_size = 8
grid_bounds=[(0, 1)]
grid = torch.zeros(grid_size, len(grid_bounds))
for i in range(len(grid_bounds)):
    grid_diff = float(grid_bounds[i][1] - grid_bounds[i][0]) / (grid_size - 2)
    grid[:, i] = torch.linspace(grid_bounds[i][0] - grid_diff, grid_bounds[i][1] + grid_diff, grid_size)

from gpytorch.utils.interpolation import Interpolation

inputs = torch.tensor([0.0,0.1,0.2,0.3,0.5,0.7,0.8,0.9,1.0]).unsqueeze(1)
interp_indices, interp_values = Interpolation().interpolate(grid, inputs)

interp_values
For symmetric input (see above), this code returns the following (asymetric!) interp_values, where 2nd and 3rd rows are incorrect:
&lt;denchmark-code&gt;tensor([[ 0.0000,  1.0000,  0.0000,  0.0000],
        [ 0.0000,  1.0000,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  1.0000,  0.0000],
        [-0.0681,  0.6304,  0.4933, -0.0557],
        [-0.0625,  0.5625,  0.5625, -0.0625],
        [-0.0557,  0.4933,  0.6304, -0.0681],
        [-0.0321,  0.9866,  0.0481, -0.0026],
        [-0.0480,  0.4240,  0.6960, -0.0720],
        [ 0.0000,  0.0000,  1.0000,  0.0000]])
&lt;/denchmark-code&gt;

and correct interp_indices:
&lt;denchmark-code&gt;tensor([[0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [1, 2, 3, 4],
        [2, 3, 4, 5],
        [3, 4, 5, 6],
        [4, 5, 6, 7],
        [4, 5, 6, 7],
        [4, 5, 6, 7]])
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Expected Behavior&lt;/denchmark-h&gt;

Should return symmetric interp_values for symmetric grid &amp; inputs:
&lt;denchmark-code&gt;tensor([[ 0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00],
        [-7.2000e-02,  6.9600e-01,  4.2400e-01, -4.8000e-02],
        [-2.6014e-03,  4.8117e-02,  9.8657e-01, -3.2086e-02],
        [-6.8063e-02,  6.3044e-01,  4.9331e-01, -5.5688e-02],
        [-3.0470e-04,  1.3726e-02,  9.9846e-01, -1.1883e-02],
        [-6.2500e-02,  5.6250e-01,  5.6250e-01, -6.2500e-02],
        [-1.1883e-02,  9.9846e-01,  1.3727e-02, -3.0470e-04],
        [-3.2086e-02,  9.8657e-01,  4.8117e-02, -2.6019e-03],
        [-4.8000e-02,  4.2400e-01,  6.9600e-01, -7.2000e-02],
        [ 0.0000e+00,  0.0000e+00,  1.0000e+00,  0.0000e+00]])
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Additional context&lt;/denchmark-h&gt;

The solution will follow shortly (&lt;denchmark-link:https://github.com/cornellius-gp/gpytorch/pull/896&gt;#896&lt;/denchmark-link&gt;
).
It basically replaces 1-&gt;0 in one line.
	</description>
	<comments>
		<comment id='1' author='NinelK' date='2019-10-07T15:44:04Z'>
		Thanks for the issue and the quick PR :)
The test failures might be spurious - I'll check those.
One thing that we'll also want to check is that we don't get performance issues from this. I think the &lt; 1 was put in place to minimize the number of boundary conditions we have to deal with (though this happened a long time ago).
I agree that we should be getting symmetric grids though. I'll do some checks sometime later today and hopefully get the PR in.
		</comment>
		<comment id='2' author='NinelK' date='2019-10-08T09:20:26Z'>
		If you just reduce the number of grid_points, you'll see a step next to the left border:
&lt;denchmark-link:https://user-images.githubusercontent.com/1615928/66383477-faa4cc00-e9b4-11e9-854e-96f1512f6833.png&gt;&lt;/denchmark-link&gt;

It is the other way to notice this bug.
		</comment>
		<comment id='3' author='NinelK' date='2019-10-08T13:46:15Z'>
		Oooh thanks that's a super helpful plot :)
		</comment>
	</comments>
</bug>