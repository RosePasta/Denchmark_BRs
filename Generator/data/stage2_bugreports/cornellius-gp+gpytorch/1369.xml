<bug id='1369' author='jeffwillette' open_date='2020-11-26T09:27:12Z' closed_time='2020-11-26T14:54:38Z'>
	<summary>[Bug] DKL tutorial gives bug about size tuple</summary>
	<description>
&lt;denchmark-h:h1&gt;üêõ Bug&lt;/denchmark-h&gt;

Follow DKL here and give a MVN and a tensor to ExactMarginalLogLikelihood
** Code snippet to reproduce **
yhat = self.model(x)
print(yhat, y.size())
loss = -self.mll(yhat, y)
print(loss.item())
loss.backward()
** Stack trace/error message **
&lt;denchmark-code&gt;MultivariateNormal(loc: torch.Size([364])) torch.Size([364])
Traceback (most recent call last):
  File "train_regression.py", line 21, in &lt;module&gt;
    train[args.variant](args)
  File "/home/jeff/ml/gaussian-processes/trainers.py", line 55, in exact_dkl_gp_regression
    trainer.fit(x, y, args)
  File "/home/jeff/ml/gaussian-processes/trainers.py", line 27, in fit
    loss = -self.mll(yhat, y)
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/module.py", line 28, in __call__
    outputs = self.forward(*inputs, **kwargs)
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/mlls/exact_marginal_log_likelihood.py", line 62, in forward
    res = output.log_prob(target)
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/distributions/multivariate_normal.py", line 140, in log_prob
    inv_quad, logdet = covar.inv_quad_logdet(inv_quad_rhs=diff.unsqueeze(-1), logdet=True)
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/lazy/lazy_tensor.py", line 1022, in inv_quad_logdet
    cholesky = CholLazyTensor(TriangularLazyTensor(self.cholesky()))
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/lazy/lazy_tensor.py", line 750, in cholesky
    chol = self._cholesky(upper=False)
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/utils/memoize.py", line 59, in g
    return _add_to_cache(self, cache_name, method(self, *args, **kwargs), *args, kwargs_pkl=kwargs_pkl)
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/lazy/lazy_tensor.py", line 407, in _cholesky
    evaluated_kern_mat = self.evaluate_kernel()
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/lazy/lazy_tensor.py", line 914, in evaluate_kernel
    return self.representation_tree()(*self.representation())
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/lazy/lazy_tensor.py", line 1296, in representation_tree
    return LazyTensorRepresentationTree(self)
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/lazy/lazy_tensor_representation_tree.py", line 13, in __init__
    representation_size = len(arg.representation())
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/lazy/lazy_evaluated_kernel_tensor.py", line 307, in representation
    return self.evaluate_kernel().representation()
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/utils/memoize.py", line 59, in g
    return _add_to_cache(self, cache_name, method(self, *args, **kwargs), *args, kwargs_pkl=kwargs_pkl)
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/lazy/lazy_evaluated_kernel_tensor.py", line 274, in evaluate_kernel
    res = self.kernel(x1, x2, diag=False, last_dim_is_batch=self.last_dim_is_batch, **self.params)
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/kernels/kernel.py", line 396, in __call__
    res = lazify(super(Kernel, self).__call__(x1_, x2_, last_dim_is_batch=last_dim_is_batch, **params))
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/module.py", line 28, in __call__
    outputs = self.forward(*inputs, **kwargs)
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/kernels/grid_interpolation_kernel.py", line 181, in forward
    left_interp_indices, left_interp_values = self._compute_grid(x1, last_dim_is_batch)
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/kernels/grid_interpolation_kernel.py", line 137, in _compute_grid
    interp_indices, interp_values = Interpolation().interpolate(self.grid, inputs)
  File "/home/jeff/.venv/env/lib/python3.8/site-packages/gpytorch/utils/interpolation.py", line 93, in interpolate
    interp_values = torch.ones(
TypeError: ones(): argument 'size' must be tuple of ints, but found element of type int at pos 2
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Expected Behavior&lt;/denchmark-h&gt;

It should handle the size correctly
&lt;denchmark-h:h2&gt;System information&lt;/denchmark-h&gt;

Please complete the following information:

gpytorch: 1.2.1
torch 1.7.0+cu110
ubuntu: 20.04

&lt;denchmark-h:h2&gt;Additional context&lt;/denchmark-h&gt;

Following DKL tutorial here &lt;denchmark-link:https://docs.gpytorch.ai/en/v1.2.1/examples/06_PyTorch_NN_Integration_DKL/KISSGP_Deep_Kernel_Regression_CUDA.html&gt;https://docs.gpytorch.ai/en/v1.2.1/examples/06_PyTorch_NN_Integration_DKL/KISSGP_Deep_Kernel_Regression_CUDA.html&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='jeffwillette' date='2020-11-26T14:54:38Z'>
		This was caused by having the num_dims argument to the kernel was too high, I didn't realize that plain GridInterpolationKernel was so sensitive to the number of dimensions going into the kernel.
		</comment>
	</comments>
</bug>