<bug id='1061' author='a-little-cat' open_date='2019-06-19T10:45:56Z' closed_time='2019-07-03T02:46:49Z'>
	<summary>多线程调用GPU错误</summary>
	<description>
在单显卡设备使用多线程对单net多extractor进行前向计算时,偶尔会计算结果不一致,看起来像是显存共用.
官方有测试过单显卡  单net 多extractor 多线程的情况吗?
PS:我在线程的每次extract前创建新的extractor.
	</description>
	<comments>
		<comment id='1' author='a-little-cat' date='2019-06-19T12:32:30Z'>
		&lt;denchmark-link:https://github.com/Tencent/ncnn/wiki/vulkan-notes#batch-inference&gt;https://github.com/Tencent/ncnn/wiki/vulkan-notes#batch-inference&lt;/denchmark-link&gt;

这样调用？
		</comment>
		<comment id='2' author='a-little-cat' date='2019-06-19T14:33:11Z'>
		使用的是thread多线程,没有使用openmp
int main()
{
    ncnn::create_gpu_instance();
    thread t1(detect);
    thread t2(detect);
    t1.join();
    t2.join();
    ncnn::destroy_gpu_instance();
}
void detect()
{
    ncnn::Net detect;
    detect.opt.use_vulkan_compute = 1;
    detect.load_param("detect.param");
    detect.load_model("detect.bin");
    for(int i = 0;i&lt;10000;i++)
    {
        //预处理输入至ncnn::Mat in.
        ncnn::Extractor ex = detect.create_extractor();
        ex.set_light_mode(true);
        ex.input("data", in);
        ex.extract("detection_out", out);
        //获取bbox
    }
}
		</comment>
		<comment id='3' author='a-little-cat' date='2019-06-20T02:43:16Z'>
		confirmed
		</comment>
		<comment id='4' author='a-little-cat' date='2019-06-20T03:49:20Z'>
		根据代码和这个&lt;denchmark-link:https://github.com/Tencent/ncnn/wiki/vulkan-notes#proper-allocator-usage&gt;文档&lt;/denchmark-link&gt;
定位到了问题.
初始化Extractor时,由Net的vkdev对象获取allocator,
在单显卡情况下,所有的Net会共用一个vkdev,进而共用一份allocator.
// int Net::load_param(FILE *fp)
if (!vkdev)
     vkdev = get_gpu_device();

// Extractor::Extractor(const Net *_net, int blob_count) : net(_net)
if (!opt.blob_vkallocator)
    opt.blob_vkallocator = net-&gt;vkdev-&gt;allocator();
if (!opt.workspace_vkallocator)
    opt.workspace_vkallocator = net-&gt;vkdev-&gt;allocator();
if (!opt.staging_vkallocator)
    opt.staging_vkallocator = net-&gt;vkdev-&gt;staging_allocator();
我的临时解决方案:在每个Net的初始化时生成单独的allocator.
// int Net::load_param(FILE *fp)
if (!vkdev)
    vkdev = get_gpu_device();
opt.blob_vkallocator = new VkBlobBufferAllocator(vkdev);
opt.workspace_vkallocator = opt.blob_vkallocator;
opt.staging_vkallocator = new VkStagingBufferAllocator(vkdev);
已知问题:在Net的析构函数加入上面2个allocator的delete,会引起段错误.
以及文档里曾经有这个问题的解决方案,但后来接口set_default_option删掉了...
		</comment>
		<comment id='5' author='a-little-cat' date='2019-06-24T02:27:38Z'>
		&lt;denchmark-link:https://github.com/Tencent/ncnn/commit/21b5508c96a9b5ae8d2e2ee2717a401230b15227&gt;21b5508&lt;/denchmark-link&gt;

请试试看
		</comment>
		<comment id='6' author='a-little-cat' date='2019-07-03T02:46:49Z'>
		fixed in the latest code
please reopen if this issue still exists
		</comment>
		<comment id='7' author='a-little-cat' date='2019-07-04T03:32:57Z'>
		使用最新版进行测试,已经支持多线程.
之前绕开了这个bug,赶进度,刚刚回头测试.
		</comment>
	</comments>
</bug>