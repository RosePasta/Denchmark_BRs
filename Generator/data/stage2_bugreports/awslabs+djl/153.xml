<bug id='153' author='lanking520' open_date='2020-08-17T19:51:45Z' closed_time='2020-08-26T22:03:01Z'>
	<summary>MKLDNN on PyTorch issue</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

On behalf of a user. Currently I am trying to use MKLDNN acceleration on PyTorch DJL. However, when it went through the translator, the error shown below:
&lt;denchmark-code&gt;predict error:
ai.djl.engine.EngineException: opaque tensors do not have strides
 at ai.djl.pytorch.jni.PyTorchLibrary.torchStack(Native Method) 
 at ai.djl.pytorch.jni.JniUtils.stack(JniUtils.java:352) 
 at ai.djl.pytorch.engine.PtNDArrayEx.stack(PtNDArrayEx.java:514) 
 at ai.djl.pytorch.engine.PtNDArrayEx.stack(PtNDArrayEx.java:29) 
 at ai.djl.ndarray.NDArrays.stack(NDArrays.java:1822) 
 at ai.djl.ndarray.NDArrays.stack(NDArrays.java:1783) 
 at ai.djl.translate.StackBatchifier.batchify(StackBatchifier.java:50) 
 at ai.djl.inference.Predictor.processInputs(Predictor.java:194) 
 at ai.djl.inference.Predictor.batchPredict(Predictor.java:154) 
 ...
&lt;/denchmark-code&gt;

I am suspecting the stack operator does not support MKLDNN on PyTorch. You can reproduce after using this op along with translator.
After I disabled the stack bachifier, I ran into the following issues:
&lt;denchmark-code&gt;Traceback of TorchScript, original code (most recent call last):
  File "traced_model.py", line 122, in forward
        #lengths = lengths.cpu().int()
        #B = x.size(0)
        x = self.var * (x + self.mean) 
                        ~~~~~~~~~~~~~ &lt;--- HERE
        x = self.conv(x)
        x = F.relu(x)
RuntimeError: mkldnn_tensor.is_mkldnn() INTERNAL ASSERT FAILED at /pytorch/aten/src/ATen/native/mkldnn/MKLDNNCommon.cpp:56, please report a bug to PyTorch. mkldnn_to_dense expects MKL-DNN tensor input

 at ai.djl.pytorch.jni.PyTorchLibrary.moduleForward(Native Method) 
 at ai.djl.pytorch.jni.IValueUtils.forward(IValueUtils.java:211) 
 at ai.djl.pytorch.engine.PtSymbolBlock.forward(PtSymbolBlock.java:94) 
 at ai.djl.nn.Block.forward(Block.java:116) 
 at ai.djl.inference.Predictor.predict(Predictor.java:117) 
 at ai.djl.inference.Predictor.batchPredict(Predictor.java:144) 
...
&lt;/denchmark-code&gt;

After that, I tried to find a workaround by following &lt;denchmark-link:https://zhuanlan.zhihu.com/p/79989669&gt;this tutorial&lt;/denchmark-link&gt;
. But didn't quite get the performance increment.
Could you please let me know if there is something I did wrong and how I can accelerate using MKLDNN?
	</description>
	<comments>
		<comment id='1' author='lanking520' date='2020-08-17T23:51:20Z'>
		&lt;denchmark-link:https://github.com/lanking520&gt;@lanking520&lt;/denchmark-link&gt;
 You need the  when you run DJL PyTorch MKLDNN
		</comment>
		<comment id='2' author='lanking520' date='2020-08-26T22:02:54Z'>
		The issue were resolved in the coming PR: &lt;denchmark-link:https://github.com/awslabs/djl/commit/f48e5974c84669aa9bf61270a3b0dc18dee236b1&gt;f48e597&lt;/denchmark-link&gt;

For MKLDNN usage specifically, you can try with the following code
import torch
import torchvision
from torch.utils import mkldnn as mkldnn_utils

net = torchvision.models.resnet18(pretrained=True)
net.eval()
net = mkldnn_utils.to_mkldnn(net)
data = torch.randn(1, 3, 224, 224)
data = data.to_mkldnn()

traced = torch.jit.script(net)
traced.save('model.pt')

result = traced(data)
This will convert the general model to MKLDNN TorchScript model. After enabling DJL's flag, this model works fine with DJL 0.6.0
    System.setProperty("ai.djl.pytorch.use_mkldnn", "true");
    Criteria&lt;NDList, NDList&gt; criteria = Criteria.builder()
            .setTypes(NDList.class, NDList.class)
            .optModelUrls(Paths.get("").toUri().toString())
            .optModelName("resnet18_mkldnn_script_model")
            .optTranslator(new MyTranslator())
            .build();
    ZooModel&lt;NDList, NDList&gt; model = ModelZoo.loadModel(criteria);
    Predictor&lt;NDList, NDList&gt; predictor = model.newPredictor();
    NDManager manager = NDManager.newBaseManager();
    NDArray input = manager.ones(new Shape(1, 3, 224, 224));
    NDList output = predictor.predict(new NDList(input));
    System.out.println(output.singletonOrThrow());
MyTranslator is a dummy translator and just do NDList in, NDList out.
		</comment>
	</comments>
</bug>