<bug id='384' author='docrozza' open_date='2020-11-27T13:51:06Z' closed_time='2020-12-10T19:31:08Z'>
	<summary>Is the output shape calculation correct for 2d convolutions?</summary>
	<description>
I was recently looking at the code for Conv2d convolutions to check the output shapes for a model I'm building



djl/api/src/main/java/ai/djl/nn/convolutional/Conv2d.java


        Lines 41 to 49
      in
      97fce77






  * &lt;ul&gt; 



  *   &lt;li&gt;{@code data: (batch_size, channel, height, width)} 



  *   &lt;li&gt;{@code weight: (num_filter, channel, kernel[0], kernel[1])} 



  *   &lt;li&gt;{@code bias: (num_filter,)} 



  *   &lt;li&gt;{@code out: (batch_size, num_filter, out_height, out_width)} &lt;br&gt; 



  *       {@code out_height = f(height, kernel[0], pad[0], stride[0], dilate[0])} &lt;br&gt; 



  *       {@code out_width = f(width, kernel[1], pad[1], stride[1], dilate[1])} &lt;br&gt; 



  *       {@code where f(x, k, p, s, d) = floor((x + 2 * p - d * (k - 1) - 1)/s) + 1} 



  * &lt;/ul&gt; 





However, in the code this calculation isn't quite correct according to the documentation



djl/api/src/main/java/ai/djl/nn/convolutional/Convolution.java


        Lines 162 to 168
      in
      97fce77






 shape[2 + i] = 



         (inputs[0].get(2 + i) 



 + 2 * padding.get(i) 



 - dilation.get(0) * (kernelShape.get(i) - 1) 



 - 1) 



 / stride.get(0) 



 + 1; 





The dilation and stride only ever use the 0-index rather than the i-index as used for the kernel and padding values. Whilst this is OK for square shapes, this could be an issue for other shapes.
The same also applies to the new deconvolution code but for stride and padding this time



djl/api/src/main/java/ai/djl/nn/convolutional/Deconvolution.java


        Lines 142 to 146
      in
      97fce77






 shape[2 + i] = 



         (inputs[0].get(2 + i) - 1) * stride.get(0) 



 - 2 * padding.get(0) 



 + kernelShape.get(i) 



 + outPadding.get(i); 





I wanted to check that this was a real issue before looking at contributing a fix
	</description>
	<comments>
		<comment id='1' author='docrozza' date='2020-12-03T18:16:47Z'>
		Nice catch! Yes you are right. Stride &amp; Dilation should also change along with i variant. Would you like to submit a PR to fix it?
You can check reference calculation &lt;denchmark-link:https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html&gt;here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='docrozza' date='2020-12-04T09:08:41Z'>
		sure - just checking out the contributing guidelines now
		</comment>
		<comment id='3' author='docrozza' date='2020-12-08T10:54:11Z'>
		The code for the Deconvolution also appears to be missing the dilation component too and not handling the kernel size correctly
See &lt;denchmark-link:https://pytorch.org/docs/stable/generated/torch.nn.ConvTranspose2d.html#torch.nn.ConvTranspose2d&gt;here&lt;/denchmark-link&gt;
 for the Conv2dTranspose, i.e
outHeight = (inHeight − 1) × stride[0] − 2 × padding[0] + dilation[0] × (kernel_size[0] − 1) + output_padding[0] + 1
outWidth  = (inWidth  − 1) × stride[1] − 2 × padding[1] + dilation[1] × (kernel_size[1] − 1) + output_padding[1] + 1
What's the projects preference on this - fix it in this issue's PR or raise a separate one for just the Deconvolution logic?
		</comment>
		<comment id='4' author='docrozza' date='2020-12-08T17:05:45Z'>
		&lt;denchmark-link:https://github.com/docrozza&gt;@docrozza&lt;/denchmark-link&gt;
 You can fix it all in one PR
		</comment>
	</comments>
</bug>