<bug id='317' author='kimim' open_date='2020-11-13T14:25:50Z' closed_time='2020-11-20T17:33:45Z'>
	<summary>MXNet engine call failed: MXNetError: Type inconsistent, Provided = int32,  inferred type = int64</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

If the parse labels with datatype other than int32 to TopKAccuracy.updateAccumulator,  there will be an exeption:
&lt;denchmark-code&gt;   Unhandled ai.djl.engine.EngineException
   MXNet engine call failed: MXNetError: Type inconsistent, Provided = int32,
   inferred type = int64
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Expected Behavior&lt;/denchmark-h&gt;

int64 and int32 should be accepted
&lt;denchmark-h:h3&gt;Error Message&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;1. Unhandled ai.djl.engine.EngineException
   MXNet engine call failed: MXNetError: Type inconsistent, Provided = int32,
   inferred type = int64


             JnaUtils.java: 1808  ai.djl.mxnet.jna.JnaUtils/checkCall
             JnaUtils.java:  502  ai.djl.mxnet.jna.JnaUtils/imperativeInvoke
         FunctionInfo.java:   91  ai.djl.mxnet.jna.FunctionInfo/invoke
          MxNDManager.java:  324  ai.djl.mxnet.engine.MxNDManager/invoke
            MxNDArray.java:  443  ai.djl.mxnet.engine.MxNDArray/eq
         TopKAccuracy.java:   97  ai.djl.training.evaluator.TopKAccuracy/lambda$accuracyHelper$0
          IntPipeline.java:  180  java.util.stream.IntPipeline$1$1/accept
              Streams.java:  104  java.util.stream.Streams$RangeIntSpliterator/forEachRemaining
          Spliterator.java:  699  java.util.Spliterator$OfInt/forEachRemaining
     AbstractPipeline.java:  484  java.util.stream.AbstractPipeline/copyInto
     AbstractPipeline.java:  474  java.util.stream.AbstractPipeline/wrapAndCopyInto
     AbstractPipeline.java:  550  java.util.stream.AbstractPipeline/evaluate
     AbstractPipeline.java:  260  java.util.stream.AbstractPipeline/evaluateToArrayNode
    ReferencePipeline.java:  517  java.util.stream.ReferencePipeline/toArray
         TopKAccuracy.java:  100  ai.djl.training.evaluator.TopKAccuracy/accuracyHelper
     AbstractAccuracy.java:   83  ai.djl.training.evaluator.AbstractAccuracy/updateAccumulator
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;How to Reproduce?&lt;/denchmark-h&gt;

invoke TopKAccuracy.updateAccumulator with label in datatype int64
&lt;denchmark-h:h2&gt;What have you tried to solve it?&lt;/denchmark-h&gt;


modify this line: 


djl/api/src/main/java/ai/djl/training/evaluator/TopKAccuracy.java


         Line 78
      in
      1df24cd






 NDArray topKPrediction = prediction.argSort(axis).toType(DataType.INT32, false); 






from
       NDArray topKPrediction = prediction.argSort(axis).toType(DataType.INT32, false);
to
       NDArray topKPrediction = prediction.argSort(axis).toType(DataType.INT64, false);

modify this line: 


djl/api/src/main/java/ai/djl/training/evaluator/TopKAccuracy.java


         Line 97
      in
      1df24cd






 .eq(label.flatten()) 






from
                                                        .eq(label.flatten())
to
                                                        .eq(label.flatten().toType(INT64, false)
	</description>
	<comments>
		<comment id='1' author='kimim' date='2020-11-17T18:23:54Z'>
		I think we can add an option to allow int64 input. But that should apply to both label and pred
		</comment>
		<comment id='2' author='kimim' date='2020-11-20T09:46:24Z'>
		PR &lt;denchmark-link:https://github.com/awslabs/djl/pull/364&gt;#364&lt;/denchmark-link&gt;
 try to fix this issue.
		</comment>
		<comment id='3' author='kimim' date='2020-11-20T17:33:45Z'>
		Fixed by &lt;denchmark-link:https://github.com/awslabs/djl/pull/364&gt;#364&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>