<bug id='689' author='YaYaB' open_date='2020-01-15T14:33:36Z' closed_time='2020-02-04T14:49:21Z'>
	<summary>Crop fails when bounding boxes are out of range</summary>
	<description>
&lt;denchmark-h:h4&gt;Configuration&lt;/denchmark-h&gt;


Version of DeepDetect:

Locally compiled on Ubuntu 18.04 LTS


Commit (shown by the server when starting):

Branch Master, a68b6c2


GPUS:

1 x Nvidia GTX Titan X (Maxwell)



&lt;denchmark-h:h4&gt;Your question / the problem you're facing:&lt;/denchmark-h&gt;

I have an issue when I want to make a chain prediction using a pipeline consisting of:

Detection
Crop
Classification

The issue occurs when the crop layer tries to crop bounding boxes that are out of the image.
&lt;denchmark-h:h4&gt;Error message (if any) / steps to reproduce the problem:&lt;/denchmark-h&gt;


Launch Dede

Api call
&lt;denchmark-code&gt;./dede --port 8080
&lt;/denchmark-code&gt;

Serveur log output
&lt;denchmark-code&gt;DeepDetect [ commit a68b6c26ee92dbde047d240d3e1506c9732b681a ]
[2020-01-15 14:20:27.723] [api] [info] Running DeepDetect HTTP server on localhost:8080

&lt;/denchmark-code&gt;


Create generic detection model

&lt;denchmark-code&gt;curl -X PUT "http://localhost:8080/services/generic_det" -d '{
       "mllib":"caffe",
       "description":"object detection service",
       "type":"supervised",
       "parameters":{
         "input":{
           "connector":"image",
           "height": 300,
           "width": 300
         },
         "mllib":{
           "nclasses":2,
           "gpu": true,
           "gpuid": 0,
           "net":{
            "test_batch_size": 1
           }
         }
       },
       "model":{
         "repository":"/models/generic-detection"
       }
     }'
&lt;/denchmark-code&gt;


Create generic classification model

&lt;denchmark-code&gt;curl -X PUT "http://localhost:8080/services/generic_classification" -d '{
       "mllib":"caffe",
       "description":"object detection service",
       "type":"supervised",
       "parameters":{
         "input":{
           "connector":"image",
           "height": 300,
           "width": 300
         },
         "mllib":{
           "nclasses":2,
           "gpu": true,
           "gpuid": 0,
           "net":{
            "test_batch_size": 1
           }
         }
       },
       "model":{
         "repository":"/models/generic-classification"
       }
     }'
&lt;/denchmark-code&gt;


Then make a chain call

Api call
&lt;denchmark-code&gt;curl -X POST 'http://localhost:8080/chain/test_bboxes' -d '{
    "chain": {
            "resource": "predict",
            "calls": [
            {
                "data": ["https://i.stack.imgur.com/o1z7p.jpg"],
                "parameters": {
                    "input": {
                        "connector": "image",
                        "keep_orig": true
                    },
                    "mllib": {
                        "gpu": true,
                        "net":{
                            "test_batch_size": 1
                        }
                    },
                    "output": {
                        "bbox": true,
                        "confidence_threshold": 0.0
                    }
                },
            "service": "generic_det"
            },
            {
                "id":"face_crop",
                "action": {
                    "type": "crop"
                }
            },
            {
                "parent_id": "face_crop",
                "parameters": {
                    "input": {"connector": "image", "keep_orig": true},
                    "mllib": {"gpu": true},
                    "output": {"best": -1}
                },
                "service": "classification"
            }
      ]
   }
}'

&lt;/denchmark-code&gt;

Serveur log output
&lt;denchmark-code&gt;[2020-01-15 14:22:48.028] [test_bboxes] [info] number of calls=3
[2020-01-15 14:22:48.028] [test_bboxes] [info] [0] / executing predict on service generic_det
[2020-01-15 14:22:48.170] [test_bboxes] [info] [1] / executing action crop
OpenCV Error: Assertion failed (0 &lt;= roi.x &amp;&amp; 0 &lt;= roi.width &amp;&amp; roi.x + roi.width &lt;= m.cols &amp;&amp; 0 &lt;= roi.y &amp;&amp; 0 &lt;= roi.height &amp;&amp; roi.y + roi.height &lt;= m.rows) in Mat, file /build/opencv-L2vuMj/opencv-3.2.0+dfsg/modules/core/src/matrix.cpp, line 522
[2020-01-15 14:22:48.171] [api] [error] 127.0.0.1 "POST /chain/test_bboxes" 500 143
&lt;/denchmark-code&gt;

If I make a prediction using only the detection service I have some bounding boxes out of ranges. Here are a few examples:
&lt;denchmark-code&gt;{"bbox":{"ymin":1712.296630859375,"xmax":1959.0,"xmin":7876.951171875,"ymax":246.5074462890625},"cat":"cl1","prob":0.11549062281847}
{"bbox":{"ymin":1959.0,"xmax":1959.0,"xmin":8162.67041015625,"ymax":7838.86865234375},"cat":"cl1","prob":0.12499533593654633}
&lt;/denchmark-code&gt;

The generic detection model is not well trained on purpose to see what happens when it generates some weird bounding boxes. It would be nice to have a check for the bounding box before cropping in order to avoid this
	</description>
	<comments>
		<comment id='1' author='YaYaB' date='2020-01-20T06:31:57Z'>
		Hello, looking at the code and your example in details, it seems the bounding boxes that are an issue here are those that are  out of of the image, i.e with  above the image's width (or  above the image's height). Note that other cases are already verified in the code: &lt;denchmark-link:https://github.com/jolibrain/deepdetect/blob/master/src/chain_actions.cc#L87&gt;https://github.com/jolibrain/deepdetect/blob/master/src/chain_actions.cc#L87&lt;/denchmark-link&gt;

We will add a check for boxes that are completely out of the image and report a warning in the logs, since we would treat this as a bug of the model itself.
Bounding boxes that are partially out of an image may occur. This is because the model may predict that an object that only partially appears on an image should extend beyond this image. Think of a split car, it's OK for the model to predict the full lenth of the car, leaving some of the box outside the image.
Having the full box outside of the image however is a bug in the model. If you are observing this in your production-grade model, you have an issue somewhere, possibly in the dataset, possibly in the architecture if you've crafted it yourself.
Your example image being 1960x1960, your model reports xmin &gt; xmax and xmin &gt;&gt;&gt; 1960, and this is very much suspicious.
		</comment>
		<comment id='2' author='YaYaB' date='2020-01-20T08:52:15Z'>
		As said in the following content, this was the whole purpose of the issue.
&lt;denchmark-code&gt;The generic detection model is not well trained **on purpose** to see what happens when it generates some weird bounding boxes.
&lt;/denchmark-code&gt;

I know the concept of bounding boxes partially out of an image and have no issue with issue.
I fully understand that it is a model issue but you use those bboxes to make some crops. I just think that you should verify the bounding boxes before cropping as it may appear again if you try to hack a model for instance.
If you report a warning in the logs and do no try to crop, it's fine by me.
		</comment>
		<comment id='3' author='YaYaB' date='2020-01-21T13:23:59Z'>
		Hi, you may want to test PR &lt;denchmark-link:https://github.com/jolibrain/deepdetect/pull/693&gt;#693&lt;/denchmark-link&gt;
 above and see whether it logs the proper warning and skips your bad bounding boxes. Unfortunately we don't have a quick way to check this with our own models. Thanks.
		</comment>
		<comment id='4' author='YaYaB' date='2020-01-21T15:35:41Z'>
		Hi, I tested your PR.
I get a warning so that's a good news.
&lt;denchmark-code&gt;[2020-01-21 15:25:23.219] [yolo] [info] number of calls=3
[2020-01-21 15:25:23.220] [yolo] [info] [0] / executing predict on service generic_detection
[2020-01-21 15:25:23.382] [yolo] [info] [1] / executing action crop
[2020-01-21 15:25:23.383] [yolo] [warning] bounding box does not intersect image, skipping crop action
[2020-01-21 15:25:23.383] [yolo] [warning] bounding box does not intersect image, skipping crop action
[2020-01-21 15:25:23.383] [yolo] [warning] bounding box does not intersect image, skipping crop action
[2020-01-21 15:25:23.383] [yolo] [info] [2] / executing predict on service generic_classification
&lt;/denchmark-code&gt;

However I get the bounding boxes + classification on those bounding boxes that are out of range.
It says it skipped cropping however as you can see I still have classification results on those bounding boxes.
&lt;denchmark-code&gt;{"status":{"code":200,"msg":"OK"},"head":{"method":"/chain","time":176.0},"body":{"predictions":[{"uri":"https://i.stack.imgur.com/o1z7p.jpg","classes":[{"generic_classification":{"classes":[{"prob":1.0,"cat":"1"},{"last":true,"cat":"0","prob":0.0}]},"bbox":{"ymin":1498.95068359375,"xmax":1356.5240478515625,"xmin":794.5914306640625,"ymax":721.0802001953125},"cat":"1,"prob":0.9993942975997925},{"generic_classification":{"classes":[{"prob":1.0,"cat":"1"},{"last":true,"cat":"0","prob":0.0}]},"bbox":{"ymin":1959.0,"xmax":1959.0,"xmin":8162.67041015625,"ymax":7838.86865234375},"cat":"1","prob":0.12499533593654633}]}]}}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='YaYaB' date='2020-01-22T06:44:30Z'>
		OK, can you try the updated PR &lt;denchmark-link:https://github.com/jolibrain/deepdetect/pull/693&gt;#693&lt;/denchmark-link&gt;
 ? Thanks.
		</comment>
		<comment id='6' author='YaYaB' date='2020-01-26T21:23:59Z'>
		Yep, It seems to work on my side.
However I would change the condition &lt;denchmark-link:https://github.com/jolibrain/deepdetect/pull/693/commits/07f18fab30d16d89d13261c02a4032388fcf3b3e#diff-327d579884352886aaadc10991d57c81R91&gt;here&lt;/denchmark-link&gt;
 by
&lt;denchmark-code&gt;if (cxmin &gt; img.cols || cymax &gt; img.rows || cxmax &lt; 0  ||Â cymin &lt; 0 )
&lt;/denchmark-code&gt;

Indeed I saw some negative bounding boxes :O...
And may be even add a check about cymin &lt;= cymax, cxmin &gt;= cxmax.
		</comment>
		<comment id='7' author='YaYaB' date='2020-01-27T11:12:49Z'>
		
if (cxmin &gt; img.cols || cymax &gt; img.rows || cxmax &lt; 0  || cymin &lt; 0 )

Sure, thanks.

And may be even add a check about cymin &lt;= cymax, cxmin &gt;= cxmax.

We may leave this as an error for now.
		</comment>
	</comments>
</bug>