<bug id='58' author='merito' open_date='2016-02-03T14:21:06Z' closed_time='2016-02-05T09:25:33Z'>
	<summary>Wrong server answer when memory is too low</summary>
	<description>
Hi,
trying to run the image classifier example from project website on computer with low memory strange behaviour occurs. First I've created a service successfully - the server output was
&lt;denchmark-code&gt;INFO - source=../../templates/caffe/googlenet/
INFO - dest=../../models//imgnet/googlenet.prototxt
&lt;/denchmark-code&gt;

and client
&lt;denchmark-code&gt;{"status":{"code":201,"msg":"Created"}}
&lt;/denchmark-code&gt;

then I've tried to predict the first image, but process failed and server crashed
&lt;denchmark-code&gt;$ curl -X POST "http://localhost:8080/predict" -d "{\"service\":\"test2\",\"parameters\":{\"input\":{\"width\":224,\"height\":224},\"output\":{\"best\":3}},\"data\":[\"ambulance.jpg\"]}"
{"status":{"code":500,"msg":"InternalError","dd_code":1007,"dd_msg":"/home/user/deepdetect/deepdetect/build/caffe_dd/src/caffe_dd/include/caffe/llogging.h:66 / Fatal Caffe error"}}
&lt;/denchmark-code&gt;

Trying to predict the next image I expect to get an error again, but every next try gives me response with code 200 and always an image is assigned to the class with id 0 from list from corresp.txt file in my model directory (in this example it is "n01440764 tench, Tinca tinca"). It looks like it is working properly, but it failed.
&lt;denchmark-code&gt;$ curl -X POST "http://localhost:8080/predict" -d "{\"service\":\"test2\",\"parameters\":{\"input\":{\"width\":224,\"height\":224},\"output\":{\"best\":3}},\"data\":[\"ambulance.jpg\"]}"
{"status":{"code":200,"msg":"OK"},"head":{"method":"/predict","time":3519.0,"service":"test2"},"body":{"predictions":{"uri":"ambulance.jpg","classes":{"last":true,"prob":0.00009999999747378752,"cat":"n01440764 tench, Tinca tinca"}}}}
&lt;/denchmark-code&gt;

Probably the reason is not enough free memory. It failed on computer with 2 GB RAM, but works ok with 8 GB.
Expected behaviour is to show an error for every following request.
	</description>
	<comments>
		<comment id='1' author='merito' date='2016-02-05T06:40:24Z'>
		Thanks for the detailed report. I've spent some time on it and was able to sort of reproduce. This is a definitely a bordeline case: not enough RAM for operations, but just enough for the server to recover. I most of my trials, the system would kill the server before recovery.
Nevertheless, I was able to track the problem to the network's forward pass that, in case of failure due to memory, appears to leave Caffe's net into a non viable state.
The commit above therefore helps the capture of more exceptions around operations while destroying any remains of the net in memory in case of forward pass failure. This is somehow infortunate as we could dream to treat the loaded net as an asset, and manage errors on the side. But this is not the way Caffe internals work.
Hopefully this should fix the issue. I'm interested in the results of this fix on your initial setup if you can take time to try it out again.
		</comment>
		<comment id='2' author='merito' date='2016-02-05T09:25:33Z'>
		Now when computer has low memory the output is

from the server

&lt;denchmark-code&gt;[1]    4675 killed     ./dede
&lt;/denchmark-code&gt;


from the client

&lt;denchmark-code&gt;$ curl -X POST "http://localhost:8080/predict" -d "{\"service\":\"imageserv\",\"parameters\":{\"input\":{\"width\":224,\"height\":224},\"output\":{\"best\":3}},\"data\":[\"mug-design.jpg\"]}"

curl: (52) Empty reply from server
&lt;/denchmark-code&gt;

so it is a proper behaviour. Of course it will be much better if the server works with low memory, but I understand it is not so easy and it will work much slower without enough free RAM.
Thank you for quick response and solving the problem. Now I'm able to dig into essence of your software
		</comment>
		<comment id='3' author='merito' date='2016-02-05T09:37:23Z'>
		FYI, through my tests I've had many times the case where the server lives, it's just that as a borderline case, the server often gets killed by the system.
		</comment>
	</comments>
</bug>