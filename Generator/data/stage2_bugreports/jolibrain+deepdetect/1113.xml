<bug id='1113' author='beniz' open_date='2021-01-05T20:45:36Z' closed_time='2021-01-06T14:14:09Z'>
	<summary>NCNN backend outputs spurious bboxes in some cases.</summary>
	<description>
This issue can be directly observed by running NCNN backend unit tests with ./ut_ncnnapi, some boxes are spurious, e.g.:
1- with negative coordinates
&lt;denchmark-code&gt;{"bbox":{"ymax":202.06507873535157,"xmax":230.23036193847657,"xmin":71.65133666992188,"ymin":-6.1509599685668949},"cat":"15","prob":0.036612819880247119}
&lt;/denchmark-code&gt;

This problem seems to only affect very low confidence results. Using confidence_threshold to cut results lower than a relevant threshold value (e.g. 0.25) appears to remove the issue.
Current understanding is that numerical approximations may have bbox coordinates drift a bit as regression outputs of the neural net. Since bboxes are computed within [0,1], small initial numerical drifts outside of these bounds are amplified, yielding truely negative coordinates. This is expected to be witnessed only for boxes that may be close to a image's edges.
2- with NaN values (only observed with Vulkan on Apple M1 GPU at the moment):
&lt;denchmark-code&gt;{"last":true,"bbox":{"ymax":NaN,"xmax":NaN,"ymin":NaN,"xmin":NaN},"prob":0.9482421875,"cat":"15"}]
&lt;/denchmark-code&gt;

This issue appears to disappear on the affected GPU by removing fp16 arithmetics in inference. The previous issue above does not appear to be much affected by floating point precision.
As a fix we'll provide a datatype selector for the ncnn backend, similar to the one option already availlable with the tensorrt backend.
	</description>
	<comments>
	</comments>
</bug>