<bug id='28668' author='janosh' open_date='2019-05-13T13:54:47Z' closed_time='2019-07-19T22:17:14Z'>
	<summary>tf.keras.models.load_model fails on Sequential model</summary>
	<description>
System information

TensorFlow installed from: pip
TensorFlow version: tf-nightly-2.0-preview-2.0.0.dev20190513
Python version: 3.6.7

Describe the current behavior
Attempting tf.keras.models.load_model on a Sequential model throws
ValueError: You are trying to load a weight file containing 2 layers into a model with 0 layers.
Might be caused by a / mismatch as mentioned &lt;denchmark-link:https://github.com/keras-team/keras/issues/10417#issuecomment-418511814&gt;here&lt;/denchmark-link&gt;
. Not sure if this is the problem but &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/2c2d508aa2947ede05cfa195139b176d6cdc9056/tensorflow/python/keras/models.py#L218&gt;_clone_sequential_model&lt;/denchmark-link&gt;
 uses  whereas &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/30f682e776fbcff8d2da3c3cc0e8d12e1b3dde12/tensorflow/python/keras/saving/hdf5_format.py#L104&gt;save_model_to_hdf5&lt;/denchmark-link&gt;
 accesses .
Minimal example
import tensorflow as tf

model = tf.keras.Sequential(
    [tf.keras.Input(3), tf.keras.layers.Dense(3), tf.keras.layers.Dense(1)]
)
model.compile(loss="mse", optimizer="adam")
model.fit(tf.constant([[1, 2, 3], [4, 5, 6]]), tf.constant([1, 2]))
model.save("model.h5")
restored_model = tf.keras.models.load_model("model.h5")
	</description>
	<comments>
		<comment id='1' author='janosh' date='2019-05-15T09:22:14Z'>
		Tried running your snippet and was able to reproduce the error on mentioned TensorFlow version (2.0.0-dev20190513).
		</comment>
		<comment id='2' author='janosh' date='2019-06-23T03:09:06Z'>
		I'm seeing the same error with the stable tensorflow==1.14.0. This seems relatively high priority since I'm currently unable to save any tf.keras models.
import tempfile

import tensorflow as tf


gpu_options = tf.compat.v1.GPUOptions(allow_growth=True)
session = tf.compat.v1.Session(
    config=tf.compat.v1.ConfigProto(gpu_options=gpu_options))
tf.keras.backend.set_session(session)


def main():
    batch_size = 3

    image_shape = (32, 32, 3)
    inputs = tf.random.uniform((batch_size, *image_shape))

    model = tf.keras.Sequential((
        tf.keras.layers.Conv2D(
            filters=16,
            kernel_size=3,
            strides=2,
            padding='SAME',
            activation='linear'),
    ))

    _ = model(inputs)

    with tempfile.NamedTemporaryFile(suffix='.hdf5', delete=True) as fd:
        tf.keras.models.save_model(model, fd.name, overwrite=True)
        model2 = tf.keras.models.load_model(fd.name, compile=False)

    print(model2.summary())


if __name__ == '__main__':
    main()
Results in:
&lt;denchmark-code&gt;ValueError: You are trying to load a weight file containing 1 layers into a model with 0 layers.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='janosh' date='2019-06-24T21:55:05Z'>
		Probably a duplicate of &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/26809&gt;#26809&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='4' author='janosh' date='2019-06-24T22:33:00Z'>
		&lt;denchmark-link:https://github.com/foxik&gt;@foxik&lt;/denchmark-link&gt;
 I'm pretty sure mine is not related to having an input layer.
		</comment>
		<comment id='5' author='janosh' date='2019-06-25T05:39:39Z'>
		&lt;denchmark-link:https://github.com/hartikainen&gt;@hartikainen&lt;/denchmark-link&gt;
 Your example might not be, but the original Minimal example in the issue is related -- if the  is removed and  set for the first  layer, the model does load.
So I believe the originally reported problem in this issue is a duplicate of &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/26809&gt;#26809&lt;/denchmark-link&gt;
.
Your example is slightly different -- your model does not specify input shape in any way, so it is constructed during the first call of the model. Such models however do not save the input shapes to h5 (and from h5 are similar to how a Sequential model is saved when the InputLayer is left out), so when you try to load the weights, the same code path triggers an error. If you

add input_shape=image_shape parameter to the Conv2D, the model can be loaded;
or if you load the model without loading weights, run it once, and only then load the weights, it can be loaded:

# Instead of the original
model2 = tf.keras.models.load_model(fd.name, compile=False)
# this works; the JSON is also stored in h5 file, but it cannot be easily accessed, so I take it directly from the original model
model2 = tf.keras.models.model_from_json(model.to_json())
model2(inputs)
model2.load_weights(fd.name)
		</comment>
		<comment id='6' author='janosh' date='2019-06-25T06:12:36Z'>
		Thanks &lt;denchmark-link:https://github.com/foxik&gt;@foxik&lt;/denchmark-link&gt;
, that was useful. One thing I'm still wondering is, is this expected behavior or a bug? I'd expect  model like the one in my above example to be saveable/loadable the same way as a model built with explicit input shapes. Or is there something that makes loading them more difficult?
		</comment>
		<comment id='7' author='janosh' date='2019-06-25T18:06:09Z'>
		The case in which an Input or InputLayer is an explicit part of model specification (like in the Minimal example of this issue description) it is definitely a bug (because the Input layer with information about input sizes is not saved).
Your case where the model dimensions is defined by first usage is semantically a bit different -- but personally I believe it is also a bug.
		</comment>
		<comment id='8' author='janosh' date='2019-07-19T22:17:13Z'>
		This is fixed in latest TF 2.0 nightly build '2.0.0-dev20190718'
Thanks!
		</comment>
		<comment id='9' author='janosh' date='2019-07-19T22:17:15Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28668&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28668&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='janosh' date='2019-07-19T22:43:09Z'>
		&lt;denchmark-link:https://github.com/ymodak&gt;@ymodak&lt;/denchmark-link&gt;
 is the example I posted above also supposed to work with ? I'm still seeing the same issue (with a slightly modified script):
import tempfile

import tensorflow as tf


def main():
    batch_size = 3

    image_shape = (32, 32, 3)
    inputs = tf.random.uniform((batch_size, *image_shape))

    model = tf.keras.Sequential((
        tf.keras.layers.Conv2D(
            filters=16,
            kernel_size=3,
            strides=2,
            padding='SAME',
            activation='linear'),
    ))

    _ = model(inputs)

    with tempfile.NamedTemporaryFile(suffix='.hdf5', delete=True) as fd:
        tf.keras.models.save_model(model, fd.name, overwrite=True)
        model2 = tf.keras.models.load_model(fd.name, compile=False)

    print(model2.summary())


if __name__ == '__main__':
    main()
I get:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/kristian/conda/envs/softlearning-2/lib/python3.7/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/home/kristian/conda/envs/softlearning-2/lib/python3.7/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/kristian/github/hartikainen/softlearning-2/tests/test_sequential_serialize.py", line 31, in &lt;module&gt;
    main()
  File "/home/kristian/github/hartikainen/softlearning-2/tests/test_sequential_serialize.py", line 25, in main
    model2 = tf.keras.models.load_model(fd.name, compile=False)
  File "/home/kristian/conda/envs/softlearning-2/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/save.py", line 138, in load_model
    return hdf5_format.load_model_from_hdf5(filepath, custom_objects, compile)
  File "/home/kristian/conda/envs/softlearning-2/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/hdf5_format.py", line 165, in load_model_from_hdf5
    load_weights_from_hdf5_group(f['model_weights'], model.layers)
  File "/home/kristian/conda/envs/softlearning-2/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/hdf5_format.py", line 671, in load_weights_from_hdf5_group
    ' layers.')
ValueError: You are trying to load a weight file containing 1 layers into a model with 0 layers.
Exception ignored in: &lt;function _TensorCacheDeleter.__del__ at 0x7f9fabdde158&gt;
Traceback (most recent call last):
  File "/home/kristian/conda/envs/softlearning-2/lib/python3.7/site-packages/tensorflow_core/python/eager/context.py", line 316, in __del__
TypeError: argument of type 'NoneType' is not iterable
&lt;/denchmark-code&gt;

		</comment>
		<comment id='11' author='janosh' date='2019-07-19T23:17:12Z'>
		&lt;denchmark-link:https://github.com/hartikainen&gt;@hartikainen&lt;/denchmark-link&gt;
 Thanks for testing against TF 2.0  Can you please post a new issue for the same? Its better to track this separately. Thanks!
		</comment>
		<comment id='12' author='janosh' date='2019-09-24T06:51:25Z'>
		I still have this issue with the following versions :
&lt;denchmark-code&gt;from tensorflow import keras
keras.__version__
Out[27]: 
'2.2.4-tf'
import tensorflow
tensorflow.__version__
Out[29]: 
'2.0.0-beta1'
&lt;/denchmark-code&gt;

MWE:
&lt;denchmark-code&gt;from tensorflow.python.keras.layers import Conv2D, GlobalAveragePooling2D, Input
from tensorflow.python.keras.models import Sequential, load_model

model = Sequential([
    Input((224, 224, 3)),
    Conv2D(10, (3, 3)),
    GlobalAveragePooling2D(),
])
model.summary()

model.save('test.hdf5')

model_2 = load_model('test.hdf5')
&lt;/denchmark-code&gt;

		</comment>
		<comment id='13' author='janosh' date='2019-10-13T20:38:00Z'>
		Same issue. Highly frustrating that I cannot load models trained prior to keras@2.3.x into the tf.keras ecosystem. This is a blocking error for many developers wishing to transition from traditional keras to tf.keras and in turn tensorflow@2.x.x.
&lt;denchmark-link:https://github.com/hartikainen&gt;@hartikainen&lt;/denchmark-link&gt;
 did &lt;denchmark-link:https://github.com/foxik&gt;@foxik&lt;/denchmark-link&gt;
 's answer solve your issue? Unless I'm missing a step, that did not solve my issue.
		</comment>
		<comment id='14' author='janosh' date='2019-10-13T20:57:31Z'>
		&lt;denchmark-link:https://github.com/ghunkins&gt;@ghunkins&lt;/denchmark-link&gt;
, no my case hasn't been resolved yet. My specific issue is tracked at &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/30892&gt;#30892&lt;/denchmark-link&gt;
, but I don't know if there's been any work towards fixing that.
		</comment>
		<comment id='15' author='janosh' date='2019-10-14T13:10:39Z'>
		I've the same problem here.  My model was created, trained and saved using tf.keras and I'm  able to tf.keras.models.load_model it.  I saved the model using HDF5 entire model option as explained in this link: &lt;denchmark-link:https://www.tensorflow.org/tutorials/keras/save_and_load&gt;https://www.tensorflow.org/tutorials/keras/save_and_load&lt;/denchmark-link&gt;
 ; the load_model function fails with a weird error:
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

IndexError                                Traceback (most recent call last)
(...)
/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/network.py in from_config(cls, config, custom_objects)
1150       assert layer_name in created_layers
1151       layer = created_layers[layer_name]
-&gt; 1152       layer_output_tensors = layer._inbound_nodes[node_index].output_tensors
1153       output_tensors.append(nest.flatten(layer_output_tensors)[tensor_index])
1154
IndexError: list index out of range
		</comment>
		<comment id='16' author='janosh' date='2019-10-21T20:58:37Z'>
		&lt;denchmark-link:https://github.com/andmax&gt;@andmax&lt;/denchmark-link&gt;
 Please create a new issue as your error is different so that others with similar error will get benefited. ping me once you create. We will resolve. Thanks!
		</comment>
		<comment id='17' author='janosh' date='2019-10-22T12:17:27Z'>
		Hi &lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
  I've already created an issue:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/33357&gt;#33357&lt;/denchmark-link&gt;

And it seems it will be fixed on next release TF 1.15rc/2.0.
Thanks!
		</comment>
		<comment id='18' author='janosh' date='2020-03-04T12:52:55Z'>
		hi, guys, I m getting a similar error
np.set_printoptions(suppress=True)
model = tensorflow.keras.models.load_model('keras_model.h5')
ValueError: ('Unrecognized keyword arguments:', dict_keys(['input_dtype']))
please tell me how to solve it.
many thanks in advance!
		</comment>
		<comment id='19' author='janosh' date='2020-03-04T16:32:23Z'>
		&lt;denchmark-link:https://github.com/uchihatashi&gt;@uchihatashi&lt;/denchmark-link&gt;
 Can you please create a new issue with details and a standalone code to reproduce your error. Thanks!
		</comment>
		<comment id='20' author='janosh' date='2020-03-11T06:12:39Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 hey thanks a lot for the response and I found my error as I was having a problem with the version of TensorFlow and Keras.
		</comment>
	</comments>
</bug>