<bug id='27292' author='SpringsteinM' open_date='2019-03-29T14:25:33Z' closed_time='2019-04-12T00:31:01Z'>
	<summary>keras.layers.RNN with contants</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Arch Linux
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): No
TensorFlow version (use command below): 1.13 and 1.14
Python version: 3.7
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: 10.1 and 10.0
GPU model and memory: 1080 Ti

Describe the current behavior
TypeError: can only concatenate list (not "tuple") to list in RNN::build() if a call the RNN with a Tensor as constants.
Describe the expected behavior
Basically the build() function of the RNNCellWithConstants should be called, with the input_shape = [(3,3,5), (3,3)]
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf


class RNNCellWithConstants(tf.keras.layers.Layer):

    def __init__(self, **kwargs):
        self.state_size = 5
        super(RNNCellWithConstants, self).__init__(**kwargs)

    def build(self, input_shape):
        print(input_shape)
        self.built = True

    def call(self, inputs, states, constants):
        print(inputs, states, constants)
        return inputs, [inputs]


# Test basic case.
x = tf.keras.Input((None, 5))
c = tf.keras.Input((3,))
cell = RNNCellWithConstants()
layer = tf.keras.layers.RNN(cell)
y = layer(x, constants=c) # Works as expected.

# Test basic case.
x = tf.zeros([3, 3, 5], dtype=tf.float32)
c = tf.zeros([3, 3], dtype=tf.float32)
cell = RNNCellWithConstants()
layer = tf.keras.layers.RNN(cell)
y = layer(x, constants=c) # Crash with the following error
&lt;/denchmark-code&gt;

Other info / logs
Exception from example:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "bug.py", line 25, in &lt;module&gt;
    y = layer(x, constants=c)
  File "/home/matthias/.local/lib/python3.7/site-packages/tensorflow/python/keras/layers/recurrent.py", line 690, in __call__
    return super(RNN, self).__call__(inputs, **kwargs)
  File "/home/matthias/.local/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py", line 585, in __call__
    self._maybe_build(inputs)
  File "/home/matthias/.local/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py", line 1706, in _maybe_build
    self.build(input_shapes)
  File "/home/matthias/.local/lib/python3.7/site-packages/tensorflow/python/keras/layers/recurrent.py", line 555, in build
    self.cell.build([step_input_shape] + constants_shape)
TypeError: can only concatenate list (not "tuple") to list
&lt;/denchmark-code&gt;

If I correct the error temporarily I come to another problem, that the input shapes at build call are not correct any more: [(3, 5), (5,)]
So I think the mistake lies in that distinction:
&lt;denchmark-code&gt;    if is_keras_tensor:
      # Compute the full input spec, including state and constants
      full_input = [inputs] + additional_inputs
      # The original input_spec is None since there could be a nested tensor
      # input. Update the input_spec to match the inputs.
      full_input_spec = [None for _ in range(len(nest.flatten(inputs)))
                        ] + additional_specs
      # Perform the call with temporarily replaced input_spec
      self.input_spec = full_input_spec
      output = super(RNN, self).__call__(full_input, **kwargs)
      # Remove the additional_specs from input spec and keep the rest. It is
      # important to keep since the input spec was populated by build(), and
      # will be reused in the stateful=True.
      self.input_spec = self.input_spec[:-len(additional_specs)]
      return output
    else:
      if initial_state is not None:
        kwargs['initial_state'] = initial_state
      if constants is not None:
        kwargs['constants'] = constants
      return super(RNN, self).__call__(inputs, **kwargs)
&lt;/denchmark-code&gt;

If I set is_keras_tensor to True, everything will behave as expected.
	</description>
	<comments>
		<comment id='1' author='SpringsteinM' date='2019-04-08T04:34:40Z'>
		I want to work on this issue please &lt;denchmark-link:https://github.com/ymodak&gt;@ymodak&lt;/denchmark-link&gt;
 can you guide me please?
		</comment>
		<comment id='2' author='SpringsteinM' date='2019-04-12T00:30:57Z'>
		Should be fixed by &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/3e8a80bce0f7ef0ab2ee49f3528a2652f26110f0&gt;3e8a80b&lt;/denchmark-link&gt;
 now.
		</comment>
		<comment id='3' author='SpringsteinM' date='2019-04-12T00:31:02Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=27292&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=27292&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>