<bug id='32944' author='charmasaur' open_date='2019-10-01T07:59:38Z' closed_time='2019-11-22T17:20:33Z'>
	<summary>Incorrect behaviour creating constants from complex arrays of length &amp;gt;=64</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): custom code
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS 10.14.6
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v1.14.0-rc1-22-gaf24dc91b5 1.14.0
Python version: 3.7.3
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: Intel Iris Plus Graphics 640 1536 MB

Describe the current behavior
The following code produces an array of zeros after running several times (for me it seems to reliably be on the fourth run):
tf.Session().run(tf.constant(1j*np.arange(64))
Describe the expected behavior
That code should produce an array [0j, 1j, 2j, ...] no matter how many times it's run.
Code to reproduce the issue
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
session = tf.Session()
for _ in range(4):
    print(session.run(tf.constant(1j*np.arange(64))))
&lt;/denchmark-code&gt;

Also see Colab notebook here: &lt;denchmark-link:https://colab.research.google.com/drive/1Ci-bqoMpgK4JfCt0s2eUFjHR0vgOo_PF&gt;https://colab.research.google.com/drive/1Ci-bqoMpgK4JfCt0s2eUFjHR0vgOo_PF&lt;/denchmark-link&gt;

Other info / logs
I have no idea what's happening, but some observations:

only occurs for arrays &gt;=64 in length
also occurs if we construct the list manually instead of with numpy (e.g. session.run(tf.constant([0] + [1j]*63)))
doesn't occur if 1j is replaced by 1+1j
doesn't occur if the constant is created first, then multiplied by 1j (e.g. session.run(1j*tf.constant(np.arange(64).astype(np.complex128))) is fine)

	</description>
	<comments>
		<comment id='1' author='charmasaur' date='2019-10-03T05:57:14Z'>
		I could reproduce this issue with Tf 1.15.0rc1. Please see the &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/ee529a96c94b3e9a5aa5b22303ceeae1/untitled173.ipynb#scrollTo=CQh69Vy8KtmP&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='charmasaur' date='2019-10-03T22:05:57Z'>
		I could reproduce the issue with  also. However,  works as expected. Please check &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/96c7fa6462f94cb421a9c2fa2684d9f1/untitled173.ipynb&gt;the gist&lt;/denchmark-link&gt;
 with . Thanks!
		</comment>
		<comment id='3' author='charmasaur' date='2019-10-03T23:22:08Z'>
		I could reproduce with  when disabling eager execution, &lt;denchmark-link:https://colab.research.google.com/drive/1hgzD_W_PfSNwCGOrNnhMk89u12gy3ISP&gt;gist here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='4' author='charmasaur' date='2019-10-09T17:40:59Z'>
		&lt;denchmark-link:https://github.com/charmasaur&gt;@charmasaur&lt;/denchmark-link&gt;
 I agree. This works well upto 63 (as in np.arange(63)).  I could reproduce the issue in 1.15.0rc3. However, I am not sure why you want to initialize and print a tensor inside a for loop. When I change your code to the following, everything worked as expected. Thanks!
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
tf.compat.v1.disable_eager_execution()
a = tf.constant(1j*np.arange(64))
session = tf.compat.v1.Session()
for _ in range(4):
    print(session.run(a))
&lt;/denchmark-code&gt;

We will dig deep into the issue why it is throwing error when we use np.arange(63). Thanks!
		</comment>
		<comment id='5' author='charmasaur' date='2019-10-09T20:54:53Z'>
		I get the same type of issue when building a larger graph "normally" (i.e. not building or running in a for loop), I was just using the loop to give a minimal example showing the issue.
Thanks for investigating, I'd be very interested to know what's going on here.
		</comment>
		<comment id='6' author='charmasaur' date='2019-10-10T20:19:39Z'>
		I have identified the bug in constant tensor compression and a fix should be submitted shortly.
		</comment>
		<comment id='7' author='charmasaur' date='2019-11-22T17:20:33Z'>
		&lt;denchmark-link:https://github.com/charmasaur&gt;@charmasaur&lt;/denchmark-link&gt;
  I cannot reproduce the issue when I ran your code in . Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/a0be9e53419c37cf63d4d090aededd23/untitled1.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
This issue was fixed by &lt;denchmark-link:https://github.com/rmlarsen&gt;@rmlarsen&lt;/denchmark-link&gt;
 fix. It is available in .
I am closing the issue as it was resolved. Please feel to open the issue if the issue persists again. Thanks!
		</comment>
		<comment id='8' author='charmasaur' date='2019-11-22T17:20:35Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32944&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32944&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='charmasaur' date='2019-11-24T21:44:03Z'>
		Yep, that looks to be fixed, thanks! Any chance the fix could be linked here? I'd be keen to see what was going wrong.
		</comment>
	</comments>
</bug>