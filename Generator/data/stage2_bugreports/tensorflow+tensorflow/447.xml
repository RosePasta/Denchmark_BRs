<bug id='447' author='soumith' open_date='2015-12-08T17:26:41Z' closed_time='2017-05-11T21:01:46Z'>
	<summary>Python get_attr on DT_FLOAT returns proto type, not python DType</summary>
	<description>
If my graph has a Sub operation, and I get the "T" key for the op, it always returns an integer type incorrectly.
&lt;denchmark-code&gt;op: "Sub"
input: "ResizeBilinear"
input: "Sub/y"
attr {
  key: "T"
  value {
    type: DT_FLOAT
  }
}
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;print(ops[8].get_attr("T"))
1

print(type(ops[8].get_attr("T")))
int
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='soumith' date='2015-12-08T17:51:49Z'>
		The problem is that get_attr on a type attr returns the enum value for that type, which happens to be 1 in this case.  It would make vastly more sense if it returned a DType.  Until we fix it, you can convert it to a DType via tf.as_dtype(ops[8].get_attr('T'))
		</comment>
		<comment id='2' author='soumith' date='2015-12-08T17:55:18Z'>
		Retitled
		</comment>
		<comment id='3' author='soumith' date='2015-12-08T20:39:40Z'>
		&lt;denchmark-link:https://github.com/girving&gt;@girving&lt;/denchmark-link&gt;
 Thanks.
How does one get the value itself? i.e. how do I get the current value of T in python as a float32?
		</comment>
		<comment id='4' author='soumith' date='2015-12-08T20:41:59Z'>
		The T attribute for sub indicates the datatype of the tensors being operated on.  So T:DT_FLOAT just means that the two inputs are floating point tensors.
What value specifically are you trying to get?  The output?  (Do you have a larger piece of code to share so that we have some more context?)
		</comment>
		<comment id='5' author='soumith' date='2015-12-08T20:49:51Z'>
		&lt;denchmark-link:https://github.com/vrv&gt;@vrv&lt;/denchmark-link&gt;
 oh, my bad then. Sorry about that. I was trying to get the current constant multiplier for a Mul op in the graph.
Here is the relevant code: &lt;denchmark-link:https://gist.github.com/anonymous/7399027e97d560c0f41c#file-dump_weights_hdf5-py-L218-L220&gt;https://gist.github.com/anonymous/7399027e97d560c0f41c#file-dump_weights_hdf5-py-L218-L220&lt;/denchmark-link&gt;

I dumped all the weights of the inceptionv3 model into hdf5 files, but I cant get the info on the constants used for the Mul and Sub nodes. In general, there are two pain points that I found:

get_attr takes a name, but there is no current way (from the docs) to get a list of attributes of a node in the graph. I had to look through the source code for this.
I didn't find a way to get the Constant tensors (like parameters of a Conv2D) without running the graph in a session.

		</comment>
		<comment id='6' author='soumith' date='2015-12-08T21:35:58Z'>
		Use op.input(n) for that.
		</comment>
		<comment id='7' author='soumith' date='2015-12-09T01:04:17Z'>
		&lt;denchmark-link:https://github.com/girving&gt;@girving&lt;/denchmark-link&gt;
: do we want to be smart / special about any other types of attributes in get_attr, or is special-casing for types_pb2.DataType enough?
		</comment>
		<comment id='8' author='soumith' date='2015-12-09T01:19:30Z'>
		&lt;denchmark-link:https://github.com/vrv&gt;@vrv&lt;/denchmark-link&gt;
: I'm not sure, but the possibilities are shapes, tensors, and lists of types, shapes, and tensors.  I imagine shapes is already fine, and hopefully tensors as well.
		</comment>
		<comment id='9' author='soumith' date='2015-12-09T20:53:35Z'>
		i tried op.input(n), but that doesn't really work for me. I'll try to find a bit more on how to get the current scalar value for the Mul op, thanks for all your help.
		</comment>
		<comment id='10' author='soumith' date='2015-12-09T21:07:30Z'>
		Reopening since we'll use this bug to track cleaning up get_attr.
		</comment>
		<comment id='11' author='soumith' date='2015-12-09T21:09:53Z'>
		As for your issues with op.input: is that problem that it returns a Tensor instead of the actual value?  If so, tf.tensor_util.ConstantValue will get you the underlying value (or None).  Unfortunately, it's technically not part of the public API, so if you use it your code will break at some point and you'll have to use tf.constant_value or whatever we rename it to.
		</comment>
	</comments>
</bug>