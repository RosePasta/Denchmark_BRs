<bug id='42524' author='zendevil' open_date='2020-08-20T18:49:17Z' closed_time='2020-09-04T06:22:19Z'>
	<summary>Error building custom op with g++</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary):
TensorFlow version (use command below):
Python version:
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Describe the current behavior
&lt;denchmark-code&gt;# /usr/bin/g++ -I /usr/local/lib/python3.7/site-packages/tensorflow_core/include disparity_prop.cc -std=c++11
Undefined symbols for architecture x86_64:
  "tensorflow::register_op::OpDefBuilderReceiver::OpDefBuilderReceiver(tensorflow::register_op::OpDefBuilderWrapper&lt;true&gt; const&amp;)", referenced from:
      ___cxx_global_var_init.4 in disparity_prop-a72fe1.o
  "tensorflow::OpDefBuilder::SetShapeFn(std::__1::function&lt;tensorflow::Status (tensorflow::shape_inference::InferenceContext*)&gt;)", referenced from:
      tensorflow::register_op::OpDefBuilderWrapper&lt;true&gt;::SetShapeFn(tensorflow::Status (*)(tensorflow::shape_inference::InferenceContext*)) in disparity_prop-a72fe1.o
  "tensorflow::OpDefBuilder::Input(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;)", referenced from:
      tensorflow::register_op::OpDefBuilderWrapper&lt;true&gt;::Input(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;) in disparity_prop-a72fe1.o
  "tensorflow::OpDefBuilder::Output(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;)", referenced from:
      tensorflow::register_op::OpDefBuilderWrapper&lt;true&gt;::Output(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;) in disparity_prop-a72fe1.o
  "tensorflow::OpDefBuilder::OpDefBuilder(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;)", referenced from:
      tensorflow::register_op::OpDefBuilderWrapper&lt;true&gt;::OpDefBuilderWrapper(char const*) in disparity_prop-a72fe1.o
  "tensorflow::OpDef::~OpDef()", referenced from:
      tensorflow::OpRegistrationData::~OpRegistrationData() in disparity_prop-a72fe1.o
  "tensorflow::internal::LogMessageFatal::LogMessageFatal(char const*, int)", referenced from:
      tensorflow::core::RefCounted::~RefCounted() in disparity_prop-a72fe1.o
  "tensorflow::internal::LogMessageFatal::~LogMessageFatal()", referenced from:
      tensorflow::core::RefCounted::~RefCounted() in disparity_prop-a72fe1.o
  "tensorflow::internal::CheckOpMessageBuilder::ForVar2()", referenced from:
      std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;* tensorflow::internal::MakeCheckOpString&lt;int, int&gt;(int const&amp;, int const&amp;, char const*) in disparity_prop-a72fe1.o
  "tensorflow::internal::CheckOpMessageBuilder::NewString()", referenced from:
      std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;* tensorflow::internal::MakeCheckOpString&lt;int, int&gt;(int const&amp;, int const&amp;, char const*) in disparity_prop-a72fe1.o
  "tensorflow::internal::CheckOpMessageBuilder::CheckOpMessageBuilder(char const*)", referenced from:
      std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;* tensorflow::internal::MakeCheckOpString&lt;int, int&gt;(int const&amp;, int const&amp;, char const*) in disparity_prop-a72fe1.o
  "tensorflow::internal::CheckOpMessageBuilder::~CheckOpMessageBuilder()", referenced from:
      std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;* tensorflow::internal::MakeCheckOpString&lt;int, int&gt;(int const&amp;, int const&amp;, char const*) in disparity_prop-a72fe1.o
  "_main", referenced from:
     implicit entry/start for main executable
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)

&lt;/denchmark-code&gt;

Describe the expected behavior
The .cc should compile successfully.
Standalone code to reproduce the issue
&lt;denchmark-code&gt;#include "tensorflow/core/framework/op.h"
#include "tensorflow/core/framework/shape_inference.h"
#include "tensorflow/core/framework/op_kernel.h"

using namespace tensorflow;


class DisparityPropOp : public OpKernel {
public:
  explicit DisparityPropOp(OpKernelConstruction* context) : OpKernel(context) {}

  void Compute(OpKernelContext* context) override {
    // Grab the input tensor
    const Tensor&amp; input_tensor = context-&gt;input(0);

    // Create an output tensor
    Tensor* output_tensor = NULL;
    OP_REQUIRES_OK(context, context-&gt;allocate_output(0, input_tensor.shape(),
                                                     &amp;output_tensor));
  }
};

//REGISTER_KERNEL_BUILDER(Name("DisparityProp").Device(DEVICE_CPU), DisparityPropOp);

// Disparity propagation
REGISTER_OP("DisparityProp")
.Input("to_disparity_prop: float32")
.Output("disparity_proped: float32")
.SetShapeFn([](::tensorflow::shape_inference::InferenceContext* c) {
              c-&gt;set_output(0, c-&gt;input(0));
              return Status::OK();
            });
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='zendevil' date='2020-08-21T06:11:54Z'>
		&lt;denchmark-link:https://github.com/zendevil&gt;@zendevil&lt;/denchmark-link&gt;

Please refer to this issue and let us know
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/31190&gt;#31190&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://forum.unity.com/threads/il2cpp-build-error-missing-libatomic-a.786005/&gt;link1&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://stackoverflow.com/questions/52366135/android-ndk-cmake-linker-so-no-such-file-or-directory&gt;link2&lt;/denchmark-link&gt;
 (verify if you have NDK related issue)
		</comment>
		<comment id='2' author='zendevil' date='2020-08-28T06:22:14Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='3' author='zendevil' date='2020-09-04T06:22:18Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='4' author='zendevil' date='2020-09-04T06:22:20Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42524&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42524&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>