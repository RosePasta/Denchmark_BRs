<bug id='3726' author='HeikoSchuett' open_date='2016-08-10T08:29:14Z' closed_time='2017-03-09T18:23:41Z'>
	<summary>nested scan functions break in gradient calculation, bug?</summary>
	<description>
I tried to produce some code to read out the values at multiple locations from a vector of results. To do this I used two nested scan functions to go through the batches and the vector of the multiple locations.
This function correctly calculates the values when used alone, but when I want to calculate gradients, the code breaks at initialisation of the variables in the session with a error message I do not feel responsible for.
&lt;denchmark-h:h2&gt;Environment info&lt;/denchmark-h&gt;

Operating System: iOS 10.11.5
Installed version of CUDA and cuDNN:
(please attach the output of ls -l /path/to/cuda/lib/libcud*):
-rwxr-xr-x  1 root  wheel  8280 Aug  9 18:11 /usr/local/cuda/lib/libcuda.1.dylib
-rwxr-xr-x  1 root  wheel  8280 Apr 13 08:02 /usr/local/cuda/lib/libcuda.dylib
lrwxr-xr-x  1 root  wheel    45 Apr 13 08:03 /usr/local/cuda/lib/libcudadevrt.a -&gt; /Developer/NVIDIA/CUDA-7.5/lib/libcudadevrt.a
lrwxr-xr-x  1 root  wheel    50 Apr 13 08:03 /usr/local/cuda/lib/libcudart.7.5.dylib -&gt; /Developer/NVIDIA/CUDA-7.5/lib/libcudart.7.5.dylib
lrwxr-xr-x  1 root  wheel    46 Apr 13 08:03 /usr/local/cuda/lib/libcudart.dylib -&gt; /Developer/NVIDIA/CUDA-7.5/lib/libcudart.dylib
lrwxr-xr-x  1 root  wheel    49 Apr 13 08:03 /usr/local/cuda/lib/libcudart_static.a -&gt; /Developer/NVIDIA/CUDA-7.5/lib/libcudart_static.a
lrwxr-xr-x  1 root  wheel    47 Aug  9 18:38 /usr/local/cuda/lib/libcudnn.5.dylib -&gt; /Developer/NVIDIA/CUDA-7.5/lib/libcudnn.5.dylib
lrwxr-xr-x  1 root  wheel    45 Aug  9 18:38 /usr/local/cuda/lib/libcudnn.dylib -&gt; /Developer/NVIDIA/CUDA-7.5/lib/libcudnn.dylib
lrwxr-xr-x  1 root  wheel    48 Aug  9 18:38 /usr/local/cuda/lib/libcudnn_static.a -&gt; /Developer/NVIDIA/CUDA-7.5/lib/libcudnn_static.a
If installed from source, provide

The output from python -c "import tensorflow; print(tensorflow.__version__)".
'0.10.0rc0'
The commit hash (git rev-parse HEAD)
056db85
The output of bazel version
Build label: 0.3.1-homebrew
Build target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar
Build time: Thu Aug 4 09:58:27 2016 (1470304707)
Build timestamp: 1470304707
Build timestamp as int: 1470304707

&lt;denchmark-h:h2&gt;Steps to reproduce&lt;/denchmark-h&gt;


run code

&lt;denchmark-code&gt;import tensorflow as tf
import numpy 

def saliency_loss(y_true, y_pred):
    def saliency_loss_1(oldL,y):
        select = tf.slice(tf.squeeze(y),[5],[-1])
        def subindex(old,select1):
            return tf.slice(y,tf.reshape(tf.cast(select1,dtype='int32'),(1,)),tf.reshape(tf.constant(1),(1,))) 
        prob = tf.scan(subindex,select,initializer = tf.reshape(tf.constant(0.0),(1,)))
        return -tf.reshape(tf.reduce_sum(tf.log(prob)),(1,))
    y = tf.concat(1,(y_pred,y_true),name = 'y')
    L = tf.scan(saliency_loss_1,y,initializer = tf.reshape(tf.constant(0.0),(1,)))
    return tf.reduce_mean(L)

y_true = tf.Variable([[0.0,0.0,0.0],[1.0,4.0,1.0],[0.0,0.0,0.0],[1.0,4.0,1.0]])
y_pred = tf.Variable([[1.0,2.0,3.0,4.0,5.0],[11.0,12.0,13.0,14.0,15.0],[1.0,2.0,3.0,4.0,5.0],[11.0,12.0,13.0,14.0,15.0]])
y = tf.concat(1,(y_pred,y_true),name = 'y')
print(-(numpy.log(12.0)+numpy.log(15.0)+numpy.log(12.0))/2.0)


with tf.Session() as sess:
    sess.run(tf.initialize_all_variables())
    print(sess.run(saliency_loss(y_true, y_pred)))

loss = saliency_loss(y_true, y_pred)
grad = tf.gradients(loss,y_pred)

print(grad)

with tf.Session() as sess:
    sess.run(tf.initialize_all_variables())
    #print(sess.run(grad))

&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;What have you tried?&lt;/denchmark-h&gt;


all orders of initialisation and running only gradient calculation

&lt;denchmark-h:h2&gt;Logs or other output that would be helpful&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Errortrace:&lt;/denchmark-h&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

InvalidArgumentError                      Traceback (most recent call last)
/Users/heiko/anaconda/lib/python3.5/site-packages/tensorflow/python/client/session.py in _do_call(self, fn, _args)
964     try:
--&gt; 965       return fn(_args)
966     except errors.OpError as e:
/Users/heiko/anaconda/lib/python3.5/site-packages/tensorflow/python/client/session.py in _run_fn(session, feed_dict, fetch_list, target_list, options, run_metadata)
946                                  feed_dict, fetch_list, target_list,
--&gt; 947                                  status, run_metadata)
948
/Users/heiko/anaconda/lib/python3.5/contextlib.py in exit(self, type, value, traceback)
65             try:
---&gt; 66                 next(self.gen)
67             except StopIteration:
/Users/heiko/anaconda/lib/python3.5/site-packages/tensorflow/python/framework/errors.py in raise_exception_on_not_ok_status()
449           compat.as_text(pywrap_tensorflow.TF_Message(status)),
--&gt; 450           pywrap_tensorflow.TF_GetCode(status))
451   finally:
InvalidArgumentError: Input 0 of node gradients/scan_1/while/scan/TensorArrayPack_grad/TensorArrayGrad/TensorArrayGrad was passed string from gradients/scan_1/while/scan/TensorArrayPack_grad/TensorArrayGrad/TensorArrayGrad/StackPop:0 incompatible with expected string_ref.
During handling of the above exception, another exception occurred:
InvalidArgumentError                      Traceback (most recent call last)
 in ()
29
30 with tf.Session() as sess:
---&gt; 31     sess.run(tf.initialize_all_variables())
32     #print(sess.run(grad))
/Users/heiko/anaconda/lib/python3.5/site-packages/tensorflow/python/client/session.py in run(self, fetches, feed_dict, options, run_metadata)
708     try:
709       result = self._run(None, fetches, feed_dict, options_ptr,
--&gt; 710                          run_metadata_ptr)
711       if run_metadata:
712         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)
/Users/heiko/anaconda/lib/python3.5/site-packages/tensorflow/python/client/session.py in _run(self, handle, fetches, feed_dict, options, run_metadata)
906     if final_fetches or final_targets:
907       results = self._do_run(handle, final_targets, final_fetches,
--&gt; 908                              feed_dict_string, options, run_metadata)
909     else:
910       results = []
/Users/heiko/anaconda/lib/python3.5/site-packages/tensorflow/python/client/session.py in _do_run(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)
956     if handle is None:
957       return self._do_call(_run_fn, self._session, feed_dict, fetch_list,
--&gt; 958                            target_list, options, run_metadata)
959     else:
960       return self._do_call(_prun_fn, self._session, handle, feed_dict,
/Users/heiko/anaconda/lib/python3.5/site-packages/tensorflow/python/client/session.py in _do_call(self, fn, *args)
976         except KeyError:
977           pass
--&gt; 978       raise type(e)(node_def, op, message)
979
980   def _extend_graph(self):
InvalidArgumentError: Input 0 of node gradients/scan_1/while/scan/TensorArrayPack_grad/TensorArrayGrad/TensorArrayGrad was passed string from gradients/scan_1/while/scan/TensorArrayPack_grad/TensorArrayGrad/TensorArrayGrad/StackPop:0 incompatible with expected string_ref.
	</description>
	<comments>
		<comment id='1' author='HeikoSchuett' date='2016-08-10T16:27:29Z'>
		&lt;denchmark-link:https://github.com/ebrevdo&gt;@ebrevdo&lt;/denchmark-link&gt;
 Should this be fixed after &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/593&gt;#593&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='2' author='HeikoSchuett' date='2016-08-14T16:57:40Z'>
		Though it's not a related error, yuan is pushing the fix for this approximately on Monday.
		</comment>
		<comment id='3' author='HeikoSchuett' date='2016-08-14T22:38:56Z'>
		This has already been fixed, so wait for the next push.  The problem is that we need to use non-ref for the handle input of TensorArrayGrad op.
		</comment>
		<comment id='4' author='HeikoSchuett' date='2016-08-14T23:06:20Z'>
		Well, the ref handle fix doesn't fix the problem completely. I think we are back to the problem with nested scan (&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/593&gt;#593&lt;/denchmark-link&gt;
).
		</comment>
		<comment id='5' author='HeikoSchuett' date='2016-08-24T03:46:08Z'>
		A possible fix should be available in the next push.
		</comment>
		<comment id='6' author='HeikoSchuett' date='2016-10-24T21:11:40Z'>
		I still have this issue in r0.11.
I have a nested scan, and &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/control_flow_grad.py#L197&gt;line 197 in control_flow_grad.py&lt;/denchmark-link&gt;
:
'''grad_ctxt = graph._get_control_flow_context()'''
results in a None value for grad_ctxt.
		</comment>
		<comment id='7' author='HeikoSchuett' date='2017-01-24T21:55:57Z'>
		Does the problem still presist with latest versions?
		</comment>
		<comment id='8' author='HeikoSchuett' date='2017-03-09T18:23:41Z'>
		Closing due to lack of response.  Please reopen if necessary.
		</comment>
	</comments>
</bug>