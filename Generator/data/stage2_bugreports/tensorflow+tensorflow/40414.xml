<bug id='40414' author='v-sivak' open_date='2020-06-12T15:05:36Z' closed_time='2020-06-17T05:30:32Z'>
	<summary>Bug in tf.linalg.matmul on complex matrices</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No
TensorFlow installed from (source or binary): binary x64
TensorFlow version (use command below): v2.2.0-rc4-8-g2b96f3662b 2.2.0
Python version: python --version
CUDA/cuDNN version: 10.1
GPU model and memory: 2080 Ti, 1050 Ti

Describe the current behavior
In tf.linalg.matmul setting adjoint_a=True throws an error. This worked fine in tf2.1, started erroring after upgrading to tf2.2. The minimal repro is below.
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
a = tf.constant([[1,0],[0,1]], dtype=tf.complex64)
tf.linalg.matmul(a, a, adjoint_a=True)
&lt;/denchmark-code&gt;

Other info / logs
&lt;denchmark-code&gt;Traceback (most recent call last):

  File "&lt;ipython-input-1-85e3daa5daeb&gt;", line 3, in &lt;module&gt;
    tf.linalg.matmul(a, a, adjoint_a=True)

  File "C:\Users\qulab\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\util\dispatch.py", line 180, in wrapper
    return target(*args, **kwargs)

  File "C:\Users\qulab\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\ops\math_ops.py", line 2984, in matmul
    a, b, transpose_a=transpose_a, transpose_b=transpose_b, name=name)

  File "C:\Users\qulab\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\ops\gen_math_ops.py", line 5577, in mat_mul
    _ops.raise_from_not_ok_status(e, name)

  File "C:\Users\qulab\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\framework\ops.py", line 6653, in raise_from_not_ok_status
    six.raise_from(core._status_to_exception(e.code, message), None)

  File "&lt;string&gt;", line 3, in raise_from

InternalError: Blas GEMM launch failed : a.shape=(2, 2), b.shape=(2, 2), m=2, n=2, k=2 [Op:MatMul]
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='v-sivak' date='2020-06-15T05:27:36Z'>
		&lt;denchmark-link:https://github.com/v-sivak&gt;@v-sivak&lt;/denchmark-link&gt;

I have tried in colab with TF-GPU version, 2.2.0, nightly version() and i am not seeing any issue.Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/d3ec007333a543a8dcc5bf6c6221315d/untitled17.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='2' author='v-sivak' date='2020-06-15T15:55:36Z'>
		Thanks! I got it to work with tf2.2, but it's not using the GPU. Can you confirm which version of cuda/cudnn is compatible with tf2.2 and 2080ti GPU? Looks like this error is not related to tf.linalg.matmul but it's caused by some incompatibility in my installation. I have cudnn-7.6.5-cuda10.1_0 which worked fine with tf2.1
		</comment>
		<comment id='3' author='v-sivak' date='2020-06-16T03:38:20Z'>
		&lt;denchmark-link:https://github.com/v-sivak&gt;@v-sivak&lt;/denchmark-link&gt;

Please, see the tested build configurations from &lt;denchmark-link:https://www.tensorflow.org/install/source_windows#gpu&gt;here&lt;/denchmark-link&gt;
.Hope this helps.As issue is nor related to bug in tf.linalg.matmul, please confirm whether we can close this issue?.Thanks!
		</comment>
		<comment id='4' author='v-sivak' date='2020-06-16T13:02:43Z'>
		Thanks! Yes you can close this.
		</comment>
		<comment id='5' author='v-sivak' date='2020-06-17T05:30:32Z'>
		Closing the issue since the query is been answered.Thanks!
		</comment>
		<comment id='6' author='v-sivak' date='2020-06-17T05:30:34Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40414&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40414&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='v-sivak' date='2020-08-25T23:13:45Z'>
		Hello, I'd like to re-open this issue as I am encountering the same issue on TF 2.3.0:
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10.0.18362
TensorFlow installed from (source or binary): Binary (pip)
TensorFlow version (use command below): 2.3.0 (v2.3.0-rc2-23-gb36436b087)
Python version: 3.8.5
CUDA/cuDNN version: 10.1.120/7.6.5 (also tried 10.1.243/7.6.5)
GPU model and memory: GeForce RTX 2080 Ti, 11265 MB

Describe the current behavior
Multiplying two complex matrices with either adjoint_a=True or adjoint_b=True results in the following crash. This was reproduced on both TF 2.3.0 and 2.2.0, but works on 2.1.0. It also seems to be working on Linux.
I tried doing a fresh install of CUDA with CUDA 10.1.120 and 10.1.243. In both cases the &lt;denchmark-link:https://www.tensorflow.org/tutorials/quickstart/beginner&gt;MNIST tutorial example&lt;/denchmark-link&gt;
 runs with no problems.
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
a = tf.constant([[1, 0], [0, 1]], dtype=tf.complex64)
tf.linalg.matmul(a, a)  # No issues
tf.linalg.matmul(a, a, adjoint_a=True)  # Crash
&lt;/denchmark-code&gt;

Other info / logs:
&lt;denchmark-code&gt;&gt;&gt;&gt; tf.linalg.matmul(a, a)
2020-08-25 18:30:03.799456: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library cublas64_10.dll
&lt;tf.Tensor: shape=(2, 2), dtype=complex64, numpy=
array([[1.+0.j, 0.+0.j],
       [0.+0.j, 1.+0.j]], dtype=complex64)&gt;
&gt;&gt;&gt; tf.linalg.matmul(a, a, adjoint_a=True)
2020-08-25 18:30:07.982835: E tensorflow/stream_executor/cuda/cuda_driver.cc:951] could not synchronize on CUDA context: CUDA_ERROR_LAUNCH_FAILED: unspecified launch failure :: 0x00007FF991B9B115     tensorflow::CurrentStackTrace
0x00007FF9918E989E      tensorflow::CostGraphDef_Node::set_is_final
0x00007FF991A91D7E      stream_executor::StreamExecutor::SetDeviceSharedMemoryConfig
0x00007FF98F622C16      tensorflow::StepStats::internal_default_instance
0x00007FF98F634444      google::protobuf::RepeatedPtrField&lt;tensorflow::InterconnectLink&gt;::Add
0x00007FF9774EF867      std::vector&lt;tensorflow::DtypeAndPartialTensorShape,std::allocator&lt;tensorflow::DtypeAndPartialTensorShape&gt; &gt;::operator=
0x00007FF9774CA7AB      absl::lts_2020_02_25::Span&lt;tensorflow::Tensor const &gt;::end
0x00007FF9774431BF      TFE_TensorHandleResolve
0x00007FF9773E0A33      TFE_Py_TensorShapeSlice
0x00007FF9773DE29A      std::_Tree&lt;std::_Tmap_traits&lt;std::array&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;,0&gt;,tensorflow::monitoring::CounterCell,std::less&lt;std::array&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;
0x00007FF9A51CA3D6      PyList_New
0x00007FF9A51F5626      Py_CheckFunctionResult
0x00007FF9A51F7954      PyEval_EvalFrameDefault
0x00007FF9A51F596E      Py_CheckFunctionResult
0x00007FF9A51F7954      PyEval_EvalFrameDefault
0x00007FF9A51F2EF8      PyEval_EvalCodeWithName
0x00007FF9A51F5C66      Py_CheckFunctionResult
0x00007FF9A51F801E      PyEval_EvalFrameDefault
0x00007FF9A51F3D7D      PyFunction_Vectorcall
0x00007FF9A525FAF9      PyEval_GetFuncDesc
0x00007FF9A525F8DD      PyEval_GetFuncDesc
0x00007FF9A51E7DE4      PyObject_Repr
0x00007FF9A5181E2F      PyFile_WriteObject
0x00007FF9A5181B1B      PyFile_WriteString
0x00007FF9A51EB200      PyFloat_AsDouble
0x00007FF9A51E401E      PyObject_CallFunctionObjArgs
0x00007FF9A51F9E70      PyEval_EvalFrameDefault
0x00007FF9A51F2EF8      PyEval_EvalCodeWithName
0x00007FF9A52038DF      PyEval_EvalCodeEx
0x00007FF9A520383D      PyEval_EvalCode
0x00007FF9A5203526      PyArena_New
0x00007FF9A52034B5      PyArena_New
0x00007FF9A5365760      PyRun_InteractiveOneObject
0x00007FF9A5365373      PyRun_InteractiveLoopFlags
0x00007FF9A53651B1      PyRun_AnyFileExFlags
0x00007FF9A52F917D      Py_FatalError
0x00007FF9A526428F      Py_RunMain
0x00007FF9A5264141      Py_RunMain
0x00007FF9A5264126      Py_Main
0x00007FF9A52640DD      Py_Main
0x00007FF7C5F41268      (unknown)
0x00007FF9F1B57BD4      BaseThreadInitThunk
0x00007FF9F324CE51      RtlUserThreadStart

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Users\qulab\Anaconda3\envs\tf2-3\lib\site-packages\tensorflow\python\framework\ops.py", line 1009, in __repr__
    self.shape, self.dtype.name, numpy_text(self, is_repr=True))
  File "C:\Users\qulab\Anaconda3\envs\tf2-3\lib\site-packages\tensorflow\python\framework\ops.py", line 225, in numpy_text
    text = repr(tensor._numpy()) if is_repr else str(tensor._numpy())
  File "C:\Users\qulab\Anaconda3\envs\tf2-3\lib\site-packages\tensorflow\python\framework\ops.py", line 1031, in _numpy
    six.raise_from(core._status_to_exception(e.code, e.message), None)  # pylint: disable=protected-access
  File "&lt;string&gt;", line 3, in raise_from
tensorflow.python.framework.errors_impl.InternalError: GPU sync failed
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>