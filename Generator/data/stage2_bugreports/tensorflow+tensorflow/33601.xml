<bug id='33601' author='dsmic' open_date='2019-10-22T10:37:47Z' closed_time='2020-03-04T12:56:08Z'>
	<summary>Model loaded with tensorflow.keras.Model.load_model is slower (if GRU cells are used), than the original constructed model</summary>
	<description>
Tensorflow 2.0, CUDA 10.0, CuDNN 7.6, Python 3.6.8 in a clean environment
The model loaded from a checkpoint does not use cudnn. You can see this in the line after Epoch 1/2 in the outputs. When the model is loaded from checkpoint it misses
2019-10-22 12:25:01.298965: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7 
and the code is slower. (Much slower if I am using real long data, not just the broken down bugreport file)
Code to reproduce:
&lt;denchmark-code&gt;import argparse
from tensorflow.keras import Model
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.layers import Activation, Embedding, Dense, Input
from tensorflow.keras.layers import SimpleRNN, GRU, LSTM
from tensorflow.keras.utils import to_categorical
import numpy as np

parser = argparse.ArgumentParser(description='train recurrent net.')
parser.add_argument('--epochs', dest='epochs',  type=int, default=2)
parser.add_argument('--hidden_size', dest='hidden_size',  type=int, default=50)
parser.add_argument('--RNN_type', dest='RNN_type',  type=str, default='GRU')
parser.add_argument('--epoch_size', dest='epoch_size',  type=int, default=1000)
parser.add_argument('--pretrained_name', dest='pretrained_name',  type=str, default=None)

args = parser.parse_args()

RNN_type = {}

RNN_type['LSTM'] = LSTM
RNN_type['GRU'] = GRU
RNN_type['SimpleRNN'] = SimpleRNN

LSTM_use = RNN_type[args.RNN_type]

max_output = 10
full_python_file_string = [1,3,2,4,5,3,2,3,4,5]
class KerasBatchGenerator(object):
    def __init__(self, data_set):
        self.data_set = data_set
            
    def generate(self):
        while True:
            tmp_x = np.array([full_python_file_string], dtype=int)
            tmp_y = np.array([full_python_file_string], dtype=int)
            yield tmp_x, to_categorical(tmp_y, num_classes=max_output)

train_data_generator = KerasBatchGenerator(0)
test_data_generator = KerasBatchGenerator(0)

hidden_size = args.hidden_size

if args.pretrained_name is not None:
  from tensorflow.keras.models import load_model
  model = load_model(args.pretrained_name)
else:
  inputs = Input(batch_shape=(1,None,))
  embeds = Embedding(max_output, max_output, embeddings_initializer='identity', trainable=True)(inputs)
  lstm1 = LSTM_use(hidden_size, return_sequences=True, stateful = True)(embeds)
  x = Dense(max_output)(lstm1)
  predictions = Activation('softmax')(x)
  model = Model(inputs=inputs, outputs=predictions)

checkpointer = ModelCheckpoint(filepath='checkpoints/model-{epoch:02d}.hdf5', verbose=1)

model.compile(loss='categorical_crossentropy', optimizer = 'SGD', metrics=['categorical_accuracy'])
model.fit_generator(train_data_generator.generate(), args.epoch_size, args.epochs, 
                    validation_data=test_data_generator.generate(), 
                    validation_steps=args.epoch_size / 10, callbacks=[checkpointer])

&lt;/denchmark-code&gt;

You have to start it two times (you will need a subdirectory checkpoints), the first time generates the checkpoint model file:
&lt;denchmark-code&gt;(tf2-gpu) detlef@ubuntu-i7:~/AutomaticProgramming$ python BugReport.py
2019-10-22 12:25:00.253047: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2019-10-22 12:25:00.276364: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:25:00.277095: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce GTX 1070 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.683
pciBusID: 0000:01:00.0
2019-10-22 12:25:00.277424: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2019-10-22 12:25:00.278925: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2019-10-22 12:25:00.279799: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10.0
2019-10-22 12:25:00.280014: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10.0
2019-10-22 12:25:00.281396: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10.0
2019-10-22 12:25:00.282247: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10.0
2019-10-22 12:25:00.286830: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2019-10-22 12:25:00.287072: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:25:00.287628: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:25:00.288014: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2019-10-22 12:25:00.288241: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2019-10-22 12:25:00.310514: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 3999620000 Hz
2019-10-22 12:25:00.310931: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x44a3ae0 executing computations on platform Host. Devices:
2019-10-22 12:25:00.310946: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): Host, Default Version
2019-10-22 12:25:00.413265: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:25:00.413738: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x44a5940 executing computations on platform CUDA. Devices:
2019-10-22 12:25:00.413751: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): GeForce GTX 1070 Ti, Compute Capability 6.1
2019-10-22 12:25:00.413908: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:25:00.414331: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce GTX 1070 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.683
pciBusID: 0000:01:00.0
2019-10-22 12:25:00.414378: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2019-10-22 12:25:00.414387: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2019-10-22 12:25:00.414394: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10.0
2019-10-22 12:25:00.414401: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10.0
2019-10-22 12:25:00.414408: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10.0
2019-10-22 12:25:00.414414: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10.0
2019-10-22 12:25:00.414421: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2019-10-22 12:25:00.414467: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:25:00.414924: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:25:00.415391: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2019-10-22 12:25:00.415430: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2019-10-22 12:25:00.416258: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-10-22 12:25:00.416267: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2019-10-22 12:25:00.416282: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2019-10-22 12:25:00.416464: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:25:00.417126: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:25:00.417832: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 6219 MB memory) -&gt; physical GPU (device: 0, name: GeForce GTX 1070 Ti, pci bus id: 0000:01:00.0, compute capability: 6.1)
Epoch 1/2
2019-10-22 12:25:01.298965: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2019-10-22 12:25:02.108956: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
 999/1000 [============================&gt;.] - ETA: 0s - loss: 1.1246 - categorical_accuracy: 0.7498   
Epoch 00001: saving model to checkpoints/model-01.hdf5
1000/1000 [==============================] - 38s 38ms/step - loss: 1.1238 - categorical_accuracy: 0.7501 - val_loss: 0.3462 - val_categorical_accuracy: 1.0000
Epoch 2/2
 999/1000 [============================&gt;.] - ETA: 0s - loss: 0.1313 - categorical_accuracy: 1.0000  
Epoch 00002: saving model to checkpoints/model-02.hdf5
1000/1000 [==============================] - 38s 38ms/step - loss: 0.1312 - categorical_accuracy: 1.0000 - val_loss: 0.0470 - val_categorical_accuracy: 1.0000
(tf2-gpu) detlef@ubuntu-i7:~/AutomaticProgramming$ 

&lt;/denchmark-code&gt;

the second time we load a checkpoint:
&lt;denchmark-code&gt;
(tf2-gpu) detlef@ubuntu-i7:~/AutomaticProgramming$ python BugReport.py --pretrained_name checkpoints/model-02.hdf5
2019-10-22 12:27:35.436227: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2019-10-22 12:27:35.456340: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:27:35.456789: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce GTX 1070 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.683
pciBusID: 0000:01:00.0
2019-10-22 12:27:35.456974: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2019-10-22 12:27:35.457883: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2019-10-22 12:27:35.458700: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10.0
2019-10-22 12:27:35.458896: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10.0
2019-10-22 12:27:35.459886: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10.0
2019-10-22 12:27:35.460658: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10.0
2019-10-22 12:27:35.462926: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2019-10-22 12:27:35.463040: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:27:35.463511: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:27:35.463922: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2019-10-22 12:27:35.464170: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2019-10-22 12:27:35.486520: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 3999620000 Hz
2019-10-22 12:27:35.487009: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x5a23e30 executing computations on platform Host. Devices:
2019-10-22 12:27:35.487026: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): Host, Default Version
2019-10-22 12:27:35.597273: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:27:35.597738: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x5a25c90 executing computations on platform CUDA. Devices:
2019-10-22 12:27:35.597754: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): GeForce GTX 1070 Ti, Compute Capability 6.1
2019-10-22 12:27:35.597930: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:27:35.598350: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: GeForce GTX 1070 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.683
pciBusID: 0000:01:00.0
2019-10-22 12:27:35.598405: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2019-10-22 12:27:35.598420: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2019-10-22 12:27:35.598434: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10.0
2019-10-22 12:27:35.598446: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10.0
2019-10-22 12:27:35.598460: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10.0
2019-10-22 12:27:35.598473: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10.0
2019-10-22 12:27:35.598486: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2019-10-22 12:27:35.598535: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:27:35.599208: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:27:35.599699: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2019-10-22 12:27:35.599745: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2019-10-22 12:27:35.600327: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-10-22 12:27:35.600337: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2019-10-22 12:27:35.600342: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2019-10-22 12:27:35.600521: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:27:35.601467: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1006] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-10-22 12:27:35.602241: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 6189 MB memory) -&gt; physical GPU (device: 0, name: GeForce GTX 1070 Ti, pci bus id: 0000:01:00.0, compute capability: 6.1)
Epoch 1/2
2019-10-22 12:27:36.894279: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
 999/1000 [============================&gt;.] - ETA: 0s - loss: 0.0299 - categorical_accuracy: 1.0000  
Epoch 00001: saving model to checkpoints/model-01.hdf5
1000/1000 [==============================] - 84s 84ms/step - loss: 0.0299 - categorical_accuracy: 1.0000 - val_loss: 0.0195 - val_categorical_accuracy: 1.0000
Epoch 2/2
 999/1000 [============================&gt;.] - ETA: 0s - loss: 0.0150 - categorical_accuracy: 1.0000  
Epoch 00002: saving model to checkpoints/model-02.hdf5
1000/1000 [==============================] - 83s 83ms/step - loss: 0.0150 - categorical_accuracy: 1.0000 - val_loss: 0.0116 - val_categorical_accuracy: 1.0000
(tf2-gpu) detlef@ubuntu-i7:~/AutomaticProgramming$ 

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='dsmic' date='2019-10-23T21:06:37Z'>
		&lt;denchmark-link:https://github.com/dsmic&gt;@dsmic&lt;/denchmark-link&gt;
  Can you please replicate this in google colab setting the runtime to GPU and let me know if the issue is still persisting. Also please share the github gist of that reproduction.Thanks!
		</comment>
		<comment id='2' author='dsmic' date='2019-10-23T22:25:07Z'>
		I tried to replicate it and simplified the source code for it, but the slow down does not show up. I do not see, how to check, if cudnn is used:
&lt;denchmark-link:https://gist.github.com/dsmic/d226c1d9831f483d2e5388cd81901837&gt;https://gist.github.com/dsmic/d226c1d9831f483d2e5388cd81901837&lt;/denchmark-link&gt;

running the same code on my machine shows a slow down (with tf 2.0 and the nightly build):
&lt;denchmark-code&gt;from tensorflow.keras import Model
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.layers import Activation, Embedding, Dense, Input
from tensorflow.keras.layers import SimpleRNN, GRU, LSTM
from tensorflow.keras.utils import to_categorical
import numpy as np

RNN_type = {}

RNN_type['LSTM'] = LSTM
RNN_type['GRU'] = GRU
RNN_type['SimpleRNN'] = SimpleRNN

LSTM_use = RNN_type['GRU']

max_output = 10
full_python_file_string = [1,3,2,4,5,3,2,3,4,5]
class KerasBatchGenerator(object):
    def __init__(self, data_set):
        self.data_set = data_set
            
    def generate(self):
        while True:
            tmp_x = np.array([full_python_file_string], dtype=int)
            tmp_y = np.array([full_python_file_string], dtype=int)
            yield tmp_x, to_categorical(tmp_y, num_classes=max_output)

train_data_generator = KerasBatchGenerator(0)
test_data_generator = KerasBatchGenerator(0)

hidden_size = 50

if None is not None:
  from tensorflow.keras.models import load_model
  model = load_model('Model-02.hdf5')
else:
  inputs = Input(batch_shape=(1,None,))
  embeds = Embedding(max_output, max_output, embeddings_initializer='identity', trainable=True)(inputs)
  lstm1 = LSTM_use(hidden
from tensorflow.keras import Model
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.layers import Activation, Embedding, Dense, Input
from tensorflow.keras.layers import SimpleRNN, GRU, LSTM
from tensorflow.keras.utils import to_categorical
import numpy as np

RNN_type = {}

RNN_type['LSTM'] = LSTM
RNN_type['GRU'] = GRU
RNN_type['SimpleRNN'] = SimpleRNN

LSTM_use = RNN_type['GRU']

max_output = 10
full_python_file_string = [1,3,2,4,5,3,2,3,4,5]
class KerasBatchGenerator(object):
    def __init__(self, data_set):
        self.data_set = data_set
            
    def generate(self):
        while True:
            tmp_x = np.array([full_python_file_string], dtype=int)
            tmp_y = np.array([full_python_file_string], dtype=int)
            yield tmp_x, to_categorical(tmp_y, num_classes=max_output)

train_data_generator = KerasBatchGenerator(0)
test_data_generator = KerasBatchGenerator(0)

hidden_size = 50

if None is not None:
  from tensorflow.keras.models import load_model
  model = load_model('Model-02.hdf5')
else:
  inputs = Input(batch_shape=(1,None,))
  embeds = Embedding(max_output, max_output, embeddings_initializer='identity', trainable=True)(inputs)
  lstm1 = LSTM_use(hidden_size, return_sequences=True, stateful = True)(embeds)
  x = Dense(max_output)(lstm1)
  predictions = Activation('softmax')(x)
  model = Model(inputs=inputs, outputs=predictions)

checkpointer = ModelCheckpoint(filepath='model-{epoch:02d}.hdf5', verbose=1)

model.compile(loss='categorical_crossentropy', optimizer = 'SGD', metrics=['categorical_accuracy'])
model.fit_generator(train_data_generator.generate(), 1000, 2, 
                    validation_data=test_data_generator.generate(), 
                    validation_steps=1000 / 10, callbacks=[checkpointer])


from tensorflow.keras.models import load_model
model = load_model('model-02.hdf5')

checkpointer = ModelCheckpoint(filepath='model-{epoch:02d}.hdf5', verbose=1)

model.compile(loss='categorical_crossentropy', optimizer = 'SGD', metrics=['categorical_accuracy'])
model.fit_generator(train_data_generator.generate(), 1000, 2, 
                    validation_data=test_data_generator.generate(), 
                    validation_steps=1000 / 10, callbacks=[checkpointer])
_size, return_sequences=True, stateful = True)(embeds)
  x = Dense(max_output)(lstm1)
  predictions = Activation('softmax')(x)
  model = Model(inputs=inputs, outputs=predictions)

checkpointer = ModelCheckpoint(filepath='model-{epoch:02d}.hdf5', verbose=1)

model.compile(loss='categorical_crossentropy', optimizer = 'SGD', metrics=['categorical_accuracy'])
model.fit_generator(train_data_generator.generate(), 1000, 2, 
                    validation_data=test_data_generator.generate(), 
                    validation_steps=1000 / 10, callbacks=[checkpointer])


from tensorflow.keras.models import load_model
model = load_model('model-02.hdf5')

checkpointer = ModelCheckpoint(filepath='model-{epoch:02d}.hdf5', verbose=1)

model.compile(loss='categorical_crossentropy', optimizer = 'SGD', metrics=['categorical_accuracy'])
model.fit_generator(train_data_generator.generate(), 1000, 2, 
                    validation_data=test_data_generator.generate(), 
                    validation_steps=1000 / 10, callbacks=[checkpointer])

&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;
Epoch 1/2
2019-10-23 23:59:44.382975: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2019-10-23 23:59:45.209938: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
 998/1000 [============================&gt;.] - ETA: 0s - loss: 1.1991 - categorical_accuracy: 0.6322   
Epoch 00001: saving model to model-01.hdf5
1000/1000 [==============================] - 37s 37ms/step - loss: 1.1975 - categorical_accuracy: 0.6329 - val_loss: 0.3753 - val_categorical_accuracy: 1.0000
Epoch 2/2
 999/1000 [============================&gt;.] - ETA: 0s - loss: 0.1397 - categorical_accuracy: 1.0000 
Epoch 00002: saving model to model-02.hdf5
1000/1000 [==============================] - 35s 35ms/step - loss: 0.1396 - categorical_accuracy: 1.0000 - val_loss: 0.0486 - val_categorical_accuracy: 1.0000
Epoch 1/2
 999/1000 [============================&gt;.] - ETA: 0s - loss: 0.0306 - categorical_accuracy: 1.0000  
Epoch 00001: saving model to model-01.hdf5
1000/1000 [==============================] - 81s 81ms/step - loss: 0.0306 - categorical_accuracy: 1.0000 - val_loss: 0.0198 - val_categorical_accuracy: 1.0000
Epoch 2/2
 999/1000 [============================&gt;.] - ETA: 0s - loss: 0.0151 - categorical_accuracy: 1.0000  
Epoch 00002: saving model to model-02.hdf5
1000/1000 [==============================] - 82s 82ms/step - loss: 0.0151 - categorical_accuracy: 1.0000 - val_loss: 0.0117 - val_categorical_accuracy: 1.0000

&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='dsmic' date='2019-10-28T16:52:25Z'>
		OK, I just realized, that Google Colab does not use tensorflow 2.0 by default. I installed tensorflow 2.0 and was able to reproduce the problem. It is not, as my first thought, a problem loading cudnn, but it appears with cpu, gpu and tpu if you are using GRU cells. They are faster if they are not loaded from a file with load_model:
&lt;denchmark-link:https://gist.github.com/dsmic/fcfbf9e3a433d3aed7c00bea9e810f0c&gt;gist&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;!pip install tensorflow==2.0

from tensorflow.keras import Model
from tensorflow.keras.layers import Activation, Embedding, Dense, Input
from tensorflow.keras.layers import SimpleRNN, GRU, LSTM
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import load_model
import numpy as np

# with LSTM and SimpleRNN the problem does not exist ..
LSTM_use = GRU

max_output = 10
full_python_file_string = [1,3,2,4,5,3,2,3,4,5]
class KerasBatchGenerator(object):
    def generate(self):
        while True:
            tmp_x = np.array([full_python_file_string], dtype=int)
            tmp_y = np.array([full_python_file_string], dtype=int)
            yield tmp_x, to_categorical(tmp_y, num_classes=max_output)

train_data_generator = KerasBatchGenerator()
test_data_generator = KerasBatchGenerator()

inputs = Input(batch_shape=(1,None,))
embeds = Embedding(max_output, max_output, embeddings_initializer='identity', trainable=True)(inputs)
lstm1 = LSTM_use(50, return_sequences=True, stateful = True)(embeds)
x = Dense(max_output)(lstm1)
predictions = Activation('softmax')(x)
model = Model(inputs=inputs, outputs=predictions)

model.compile(loss='categorical_crossentropy', optimizer = 'SGD', metrics=['categorical_accuracy'])
model.save('start_model.hdf5')

#model=load_model('start_model.hdf5') #loading here slows down first fit_generator call too

model.fit_generator(train_data_generator.generate(), 1000, 1, 
                    validation_data=test_data_generator.generate(), 
                    validation_steps=1000 / 10)

model = load_model('start_model.hdf5') #'model-02.hdf5')

model.fit_generator(train_data_generator.generate(), 1000, 1, 
                    validation_data=test_data_generator.generate(), 
                    validation_steps=1000 / 10)
&lt;/denchmark-code&gt;

output in google colab:
&lt;denchmark-code&gt;Collecting tensorflow==2.0
  Downloading https://files.pythonhosted.org/packages/46/0f/7bd55361168bb32796b360ad15a25de6966c9c1beb58a8e30c01c8279862/tensorflow-2.0.0-cp36-cp36m-manylinux2010_x86_64.whl (86.3MB)
     |████████████████████████████████| 86.3MB 127kB/s 
Requirement already satisfied: google-pasta&gt;=0.1.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0) (0.1.7)
Requirement already satisfied: grpcio&gt;=1.8.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0) (1.15.0)
Collecting tensorboard&lt;2.1.0,&gt;=2.0.0
  Downloading https://files.pythonhosted.org/packages/9b/a6/e8ffa4e2ddb216449d34cfcb825ebb38206bee5c4553d69e7bc8bc2c5d64/tensorboard-2.0.0-py3-none-any.whl (3.8MB)
     |████████████████████████████████| 3.8MB 35.6MB/s 
Requirement already satisfied: gast==0.2.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0) (0.2.2)
Requirement already satisfied: protobuf&gt;=3.6.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0) (3.10.0)
Requirement already satisfied: six&gt;=1.10.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0) (1.12.0)
Requirement already satisfied: termcolor&gt;=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0) (1.1.0)
Requirement already satisfied: numpy&lt;2.0,&gt;=1.16.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0) (1.17.3)
Requirement already satisfied: opt-einsum&gt;=2.3.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0) (3.1.0)
Requirement already satisfied: keras-applications&gt;=1.0.8 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0) (1.0.8)
Requirement already satisfied: astor&gt;=0.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0) (0.8.0)
Requirement already satisfied: wheel&gt;=0.26 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0) (0.33.6)
Collecting tensorflow-estimator&lt;2.1.0,&gt;=2.0.0
  Downloading https://files.pythonhosted.org/packages/fc/08/8b927337b7019c374719145d1dceba21a8bb909b93b1ad6f8fb7d22c1ca1/tensorflow_estimator-2.0.1-py2.py3-none-any.whl (449kB)
     |████████████████████████████████| 450kB 49.9MB/s 
Requirement already satisfied: wrapt&gt;=1.11.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0) (1.11.2)
Requirement already satisfied: keras-preprocessing&gt;=1.0.5 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0) (1.1.0)
Requirement already satisfied: absl-py&gt;=0.7.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0) (0.8.1)
Requirement already satisfied: markdown&gt;=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tensorboard&lt;2.1.0,&gt;=2.0.0-&gt;tensorflow==2.0) (3.1.1)
Requirement already satisfied: werkzeug&gt;=0.11.15 in /usr/local/lib/python3.6/dist-packages (from tensorboard&lt;2.1.0,&gt;=2.0.0-&gt;tensorflow==2.0) (0.16.0)
Requirement already satisfied: setuptools&gt;=41.0.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard&lt;2.1.0,&gt;=2.0.0-&gt;tensorflow==2.0) (41.4.0)
Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras-applications&gt;=1.0.8-&gt;tensorflow==2.0) (2.8.0)
Installing collected packages: tensorboard, tensorflow-estimator, tensorflow
  Found existing installation: tensorboard 1.15.0
    Uninstalling tensorboard-1.15.0:
      Successfully uninstalled tensorboard-1.15.0
  Found existing installation: tensorflow-estimator 1.15.1
    Uninstalling tensorflow-estimator-1.15.1:
      Successfully uninstalled tensorflow-estimator-1.15.1
  Found existing installation: tensorflow 1.15.0
    Uninstalling tensorflow-1.15.0:
      Successfully uninstalled tensorflow-1.15.0
Successfully installed tensorboard-2.0.0 tensorflow-2.0.0 tensorflow-estimator-2.0.1
1000/1000 [==============================] - 42s 42ms/step - loss: 1.2335 - categorical_accuracy: 0.6717 - val_loss: 0.4020 - val_categorical_accuracy: 0.9000
1000/1000 [==============================] - 62s 62ms/step - loss: 1.2335 - categorical_accuracy: 0.6717 - val_loss: 0.4020 - val_categorical_accuracy: 0.9000

&lt;tensorflow.python.keras.callbacks.History at 0x7f61fbb02da0&gt;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='dsmic' date='2019-10-29T10:25:52Z'>
		Same problem here. Versions: Tf 2.0.0, CUDA: 10.0, CUDNN: 7.6, Python 3.7.4, Ubuntu 18.04.3
In addition, when logging the device placement of ops with tf.debugging.set_log_device_placement(True), I can see that in each training step (forward pass and gradient computation) the following logs appear:
2019-10-29 10:55:09.199413: I tensorflow/core/common_runtime/eager/execute.cc:574] Executing op Unpack in device /job:localhost/replica:0/task:0/device:GPU:0 2019-10-29 10:55:09.463677: I tensorflow/core/common_runtime/eager/execute.cc:574] Executing op Pack in device /job:localhost/replica:0/task:0/device:GPU:0 2019-10-29 10:55:09.862140: I tensorflow/core/common_runtime/eager/execute.cc:574] Executing op AddN in device /job:localhost/replica:0/task:0/device:GPU:0
They appear in each training step, so once every batch is processed. They do not appear when the model is created from scratch instead of loaded from an h5 file. I don't know if this might be the cause of the problem.
		</comment>
		<comment id='5' author='dsmic' date='2020-03-03T21:56:57Z'>
		&lt;denchmark-link:https://github.com/dsmic&gt;@dsmic&lt;/denchmark-link&gt;
 Is this still an issue? When I used recent , I don't see any significant difference between running the  with loaded model or with direct model. Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/aa468f554163a4c0c340dc924bcc2000/untitled849.ipynb&gt;gist here&lt;/denchmark-link&gt;
. I have also imported  to show computational time with and without loading model.
Please close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='6' author='dsmic' date='2020-03-04T12:56:08Z'>
		Seems to be ok, thanks
		</comment>
		<comment id='7' author='dsmic' date='2020-03-04T12:56:10Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33601&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33601&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>