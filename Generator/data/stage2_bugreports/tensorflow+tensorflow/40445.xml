<bug id='40445' author='cuge1995' open_date='2020-06-14T11:35:29Z' closed_time='2020-07-23T00:52:06Z'>
	<summary>Keras Reshae layer doesn't support in tf 2.2 ?</summary>
	<description>

No description provided.

	</description>
	<comments>
		<comment id='1' author='cuge1995' date='2020-06-14T11:36:13Z'>
		Reshape layer
		</comment>
		<comment id='2' author='cuge1995' date='2020-06-15T05:17:58Z'>
		&lt;denchmark-link:https://github.com/cuge1995&gt;@cuge1995&lt;/denchmark-link&gt;

Please share simple stand alone code where issue is faced while using the reshape layer for us to analyse the issue faced.
Also share the tf version on which the issue us faced.
		</comment>
		<comment id='3' author='cuge1995' date='2020-06-16T06:36:41Z'>
		&lt;denchmark-h:h1&gt;input_Transformation_net&lt;/denchmark-h&gt;

input_points = Input(shape=(num_points, 3))
x = Convolution1D(64, 1, activation='relu',
input_shape=(num_points, 3))(input_points)
x = BatchNormalization()(x)
x = Convolution1D(128, 1, activation='relu')(x)
x = BatchNormalization()(x)
x = Convolution1D(1024, 1, activation='relu')(x)
x = BatchNormalization()(x)
x = MaxPooling1D(pool_size=num_points)(x)
x = Dense(512, activation='relu')(x)
x = BatchNormalization()(x)
x = Dense(256, activation='relu')(x)
x = BatchNormalization()(x)
x = Dense(9, weights=[np.zeros([256, 9]), np.array([1, 0, 0, 0, 1, 0, 0, 0, 1]).astype(np.float32)])(x)
input_T = Reshape((3, 3))(x)
&lt;denchmark-h:h1&gt;forward net&lt;/denchmark-h&gt;

g = Lambda(mat_mul, arguments={'B': input_T})(input_points)
g = Convolution1D(64, 1, input_shape=(num_points, 3), activation='relu')(g)
g = BatchNormalization()(g)
g = Convolution1D(64, 1, input_shape=(num_points, 3), activation='relu')(g)
g = BatchNormalization()(g)
such keras code not running in tf 2.2
		</comment>
		<comment id='4' author='cuge1995' date='2020-06-16T08:11:50Z'>
		&lt;denchmark-link:https://github.com/cuge1995&gt;@cuge1995&lt;/denchmark-link&gt;

I ran the code shared above and face a different error, please share all dependencies and executable code for us to replicate.
Please find the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/57204907eb11a520ea77b89b01bdda2a/untitled231.ipynb&gt;gist here&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='cuge1995' date='2020-06-16T08:58:41Z'>
		import numpy as np
import os
import tensorflow as tf
from keras import optimizers
from keras.layers import Input
from keras.models import Model
from keras.layers import Dense, Flatten, Reshape, Dropout
from keras.layers import Convolution1D, MaxPooling1D, BatchNormalization
from keras.layers import Lambda
from keras.utils import np_utils
import h5py
def mat_mul(A, B):
return tf.matmul(A, B)
def load_h5(h5_filename):
f = h5py.File(h5_filename)
data = f['data'][:]
label = f['label'][:]
return (data, label)
def rotate_point_cloud(batch_data):
""" Randomly rotate the point clouds to augument the dataset
rotation is per shape based along up direction
Input:
BxNx3 array, original batch of point clouds
Return:
BxNx3 array, rotated batch of point clouds
"""
rotated_data = np.zeros(batch_data.shape, dtype=np.float32)
for k in range(batch_data.shape[0]):
rotation_angle = np.random.uniform() * 2 * np.pi
cosval = np.cos(rotation_angle)
sinval = np.sin(rotation_angle)
rotation_matrix = np.array([[cosval, 0, sinval],
[0, 1, 0],
[-sinval, 0, cosval]])
shape_pc = batch_data[k, ...]
rotated_data[k, ...] = np.dot(shape_pc.reshape((-1, 3)), rotation_matrix)
return rotated_data
def jitter_point_cloud(batch_data, sigma=0.01, clip=0.05):
""" Randomly jitter points. jittering is per point.
Input:
BxNx3 array, original batch of point clouds
Return:
BxNx3 array, jittered batch of point clouds
"""
B, N, C = batch_data.shape
assert(clip &gt; 0)
jittered_data = np.clip(sigma * np.random.randn(B, N, C), -1 * clip, clip)
jittered_data += batch_data
return jittered_data
num_points = 2048
k = 40
adam = optimizers.Adam(lr=0.001, decay=0.7)
input_points = Input(shape=(num_points, 3))
x = Convolution1D(64, 1, activation='relu',
input_shape=(num_points, 3))(input_points)
x = BatchNormalization()(x)
x = Convolution1D(128, 1, activation='relu')(x)
x = BatchNormalization()(x)
x = Convolution1D(1024, 1, activation='relu')(x)
x = BatchNormalization()(x)
x = MaxPooling1D(pool_size=num_points)(x)
x = Dense(512, activation='relu')(x)
x = BatchNormalization()(x)
x = Dense(256, activation='relu')(x)
x = BatchNormalization()(x)
x = Dense(9, weights=[np.zeros([256, 9]), np.array([1, 0, 0, 0, 1, 0, 0, 0, 1]).astype(np.float32)])(x)
input_T = Reshape((3, 3))(x)
g = Lambda(mat_mul, arguments={'B': input_T})(input_points)
g = Convolution1D(64, 1, input_shape=(num_points, 3), activation='relu')(g)
g = BatchNormalization()(g)
g = Convolution1D(64, 1, input_shape=(num_points, 3), activation='relu')(g)
g = BatchNormalization()(g)
f = Convolution1D(64, 1, activation='relu')(g)
f = BatchNormalization()(f)
f = Convolution1D(128, 1, activation='relu')(f)
f = BatchNormalization()(f)
f = Convolution1D(1024, 1, activation='relu')(f)
f = BatchNormalization()(f)
f = MaxPooling1D(pool_size=num_points)(f)
f = Dense(512, activation='relu')(f)
f = BatchNormalization()(f)
f = Dense(256, activation='relu')(f)
f = BatchNormalization()(f)
f = Dense(64 * 64, weights=[np.zeros([256, 64 * 64]), np.eye(64).flatten().astype(np.float32)])(f)
feature_T = Reshape((64, 64))(f)
g = Lambda(mat_mul, arguments={'B': feature_T})(g)
g = Convolution1D(64, 1, activation='relu')(g)
g = BatchNormalization()(g)
g = Convolution1D(128, 1, activation='relu')(g)
g = BatchNormalization()(g)
g = Convolution1D(1024, 1, activation='relu')(g)
g = BatchNormalization()(g)
global_feature = MaxPooling1D(pool_size=num_points)(g)
c = Dense(512, activation='relu')(global_feature)
c = BatchNormalization()(c)
c = Dropout(rate=0.7)(c)
c = Dense(256, activation='relu')(c)
c = BatchNormalization()(c)
c = Dropout(rate=0.7)(c)
c = Dense(k, activation='softmax')(c)
prediction = Flatten()(c)
model = Model(inputs=input_points, outputs=prediction)
print(model.summary())
		</comment>
		<comment id='6' author='cuge1995' date='2020-06-16T15:13:50Z'>
		@
I ran the above code and fixed as many indentation and syntax error as i could but there are way to many to fix, please find the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/f1f7701ca7f4db0ad099d2aae2bb38b8/untitled231.ipynb&gt;gist here&lt;/denchmark-link&gt;
.
Please provide executable code such that it replicates the issue faced or if possible please share a colab gist for us to analyse.
		</comment>
		<comment id='7' author='cuge1995' date='2020-06-16T23:48:31Z'>
		&lt;denchmark-link:https://github.com/garyli1019/pointnet-keras&gt;https://github.com/garyli1019/pointnet-keras&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='cuge1995' date='2020-06-16T23:48:58Z'>
		the train_cls.py file
		</comment>
		<comment id='9' author='cuge1995' date='2020-06-16T23:49:44Z'>
		I can build the model just using keras, but not work when I using tf.keras
		</comment>
		<comment id='10' author='cuge1995' date='2020-06-19T23:48:43Z'>
		&lt;denchmark-link:https://github.com/cuge1995&gt;@cuge1995&lt;/denchmark-link&gt;
 Can you please update your code in the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/c5e3ce3fb15aa0a1bba4efbdf36d44e7/-40445.ipynb&gt;colab gist&lt;/denchmark-link&gt;
 I prepared from your repo. Next time, please try to provide a standalone code so that the resolution will be faster. Thanks!
		</comment>
		<comment id='11' author='cuge1995' date='2020-06-20T01:15:28Z'>
		thanks, but this model still cannot run
_SymbolicException: Inputs to eager execution function cannot be Keras symbolic tensors, but found [&lt;tf.Tensor 'reshape_2/Identity:0' shape=(None, 3, 3) dtype=float32&gt;, &lt;tf.Tensor 'reshape_3/Identity:0' shape=(None, 64, 64) dtype=float32&gt;]
		</comment>
		<comment id='12' author='cuge1995' date='2020-06-20T01:17:35Z'>
		you can look at this kaggle kernel, which contain the dataset
&lt;denchmark-link:https://www.kaggle.com/cuge1995/tpu-2-transformers&gt;https://www.kaggle.com/cuge1995/tpu-2-transformers&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='cuge1995' date='2020-06-26T08:33:31Z'>
		??
		</comment>
		<comment id='14' author='cuge1995' date='2020-07-08T23:16:25Z'>
		&lt;denchmark-link:https://github.com/cuge1995&gt;@cuge1995&lt;/denchmark-link&gt;
 Can you please update the colab or create a simple standalone code to reproduce the issue? Kaggle's kernel link throws '404' error. But, please provide a standalone code to to reproduce the issue. You could use any public data. Thanks!
		</comment>
		<comment id='15' author='cuge1995' date='2020-07-15T23:55:17Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='16' author='cuge1995' date='2020-07-23T00:52:05Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='17' author='cuge1995' date='2020-07-23T00:52:08Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40445&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40445&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>