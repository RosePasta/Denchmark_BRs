<bug id='28959' author='EFanZh' open_date='2019-05-23T08:13:10Z' closed_time='2019-06-06T14:16:23Z'>
	<summary>`BaseSession._Callable.__del__` doesn’t detect closed session correctly</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Arch Linux
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: Not tested
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): 1.13.1
Python version: 3.7.3
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
BaseSession._Callable.__del__ doesn’t detect closed session correctly. Running the code I provided below will causes the following error message being printed:
&lt;denchmark-code&gt;Exception ignored in: &lt;function BaseSession._Callable.__del__ at 0x7fe50cc480d0&gt;
Traceback (most recent call last):
  File "/usr/lib/python3.7/site-packages/tensorflow/python/client/session.py", line 1455, in __del__
    self._session._session, self._handle, status)
  File "/usr/lib/python3.7/site-packages/tensorflow/python/framework/errors_impl.py", line 528, in __exit__
    c_api.TF_GetCode(self.status.status))
tensorflow.python.framework.errors_impl.CancelledError: Session has been closed.
&lt;/denchmark-code&gt;

The error message doesn’t affect the correctness of the program, but it is annoying to see.
Describe the expected behavior
The test program exits without printing the error message.
Code to reproduce the issue
import tensorflow as tf
from tensorflow.core.protobuf.config_pb2 import CallableOptions


def main():
    with tf.Session() as session:
        t = tf.zeros(shape=())

        c = session._make_callable_from_options(CallableOptions(fetch=[t.name]))

        print(c())


if __name__ == '__main__':
    main()
Other info / logs
Here is my analysis:


This is the definition of BaseSession.close:



tensorflow/tensorflow/python/client/session.py


        Lines 736 to 747
      in
      592fa18






 def close(self): 



 """Closes this session. 



  



     Calling this method frees all resources associated with the session. 



  



     Raises: 



       tf.errors.OpError: Or one of its subclasses if an error occurs while 



         closing the TensorFlow session. 



     """ 



 if self._session and not self._closed: 



 self._closed = True 



 tf_session.TF_CloseSession(self._session) 





If it is called on an alive session, self._closed will be set to True but self._session will not change.


This is the definition of BaseSession.__del__:



tensorflow/tensorflow/python/client/session.py


        Lines 749 to 764
      in
      592fa18






 def __del__(self): 



 # cleanly ignore all exceptions 



 try: 



 self.close() 



 except Exception:  # pylint: disable=broad-except 



 pass 



 if self._session is not None: 



 try: 



 tf_session.TF_DeleteSession(self._session) 



 except (AttributeError, TypeError): 



 # At shutdown, `c_api_util`, `tf_session`, or 



 # `tf_session.TF_DeleteSession` may have been garbage collected, causing 



 # the above method calls to fail. In this case, silently leak since the 



 # program is about to terminate anyway. 



 pass 



 self._session = None 





This method will set self._session to None.


This is the definition of BaseSession._Callable.__del__:



tensorflow/tensorflow/python/client/session.py


        Lines 1467 to 1473
      in
      592fa18






 def __del__(self): 



 # NOTE(mrry): It is possible that `self._session.__del__()` could be 



 # called before this destructor, in which case `self._session._session` 



 # will be `None`. 



 if self._handle is not None and self._session._session is not None: 



 tf_session.TF_SessionReleaseCallable( 



 self._session._session, self._handle) 





It only detect self._session._session, but not self._session._closed.


So if a BaseSession._Callable is being destroyed after the corresponding session being closed, but before the session being destroyed, TF_SessionReleaseCallable will be called on a closed session, which will raise the exception mentioned above.
There are two possible fixes:

Set self._session to None in BaseSession.close.
Detect self._session._closed in BaseSession._Callable.__del__.

Maybe related: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/3388&gt;#3388&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/24367&gt;#24367&lt;/denchmark-link&gt;
.
	</description>
	<comments>
		<comment id='1' author='EFanZh' date='2019-05-24T09:45:18Z'>
		I was able to reproduce the issue on Colab with TensorFlow version 1.13.
		</comment>
	</comments>
</bug>