<bug id='28247' author='KichangKim' open_date='2019-04-29T04:27:19Z' closed_time='2019-05-01T03:05:48Z'>
	<summary>[TF 2.0] Inconsistent behaviour of tf.io.decode_image() and tf.image.resize() in dataset.map()</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 x64 1809
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): pip install tensorflow-gpu==2.0.0-alpha0
TensorFlow version (use command below): v1.12.0-9492-g2c319fb415 2.0.0-alpha0
Python version: 3.6.7
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: CUDA 10.0, cudnn-10.0-windows10-x64-v7.5.0.56
GPU model and memory: GeForce GTX 1070 8GB

Describe the current behavior
Using tf.io.decode_image() and tf.image.resize() in dataset.map() generates ValueError: 'images' contains no shape. exception. But using it from normal python code, it works without any problem.
Describe the expected behavior
tf.io.decode_image() and tf.image.resize() should work without any exception in dataset.map().
Code to reproduce the issue
You can see that this code works correctly.
&lt;denchmark-code&gt;def load_image(x):
    image = tf.io.read_file(x)
    image = tf.io.decode_image(image)
    image = tf.image.resize(image, size=(
        128, 128), preserve_aspect_ratio=True)

    return image


with tf.device('/cpu:0'):
    image_2 = load_image('test.jpg')
    print(image_2.numpy().shape)
&lt;/denchmark-code&gt;

But this code will be failed.
&lt;denchmark-code&gt;import tensorflow as tf


def load_image(x):
    image = tf.io.read_file(x)
    image = tf.io.decode_image(image)
    image = tf.image.resize(image, size=(
        128, 128), preserve_aspect_ratio=True)

    return image


with tf.device('/cpu:0'):
    dataset = tf.data.Dataset.from_tensor_slices(['test.jpg'])
    dataset = dataset.map(load_image)

    for image in dataset:
        print(image.numpy().shape)
&lt;/denchmark-code&gt;

Changing tf.io.decode_image() to tf.io.decode_png() or tf.io.decode_jpeg() can be temporary solution.
	</description>
	<comments>
		<comment id='1' author='KichangKim' date='2019-04-30T12:09:26Z'>
		&lt;denchmark-link:https://github.com/KichangKim&gt;@KichangKim&lt;/denchmark-link&gt;
 Able to reproduce the issue with the code provided , attached the log. Changing tf.io.decode_image() to tf.io.decode_png() or tf.io.decode_jpeg() shows no error. Thanks!
ValueError                                Traceback (most recent call last)
 in ()
13 with tf.device('/cpu:0'):
14     dataset = tf.data.Dataset.from_tensor_slices(['test.jpg'])
---&gt; 15     dataset = dataset.map(load_image)
16
17     for image in dataset:
12 frames
/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/image_ops_impl.py in _resize_images_common(images, resizer_fn, size, preserve_aspect_ratio, name, skip_resize_if_same)
964     images = ops.convert_to_tensor(images, name='images')
965     if images.get_shape().ndims is None:
--&gt; 966       raise ValueError(''images' contains no shape.')
967     # TODO(shlens): Migrate this functionality to the underlying Op's.
968     is_batch = True
ValueError: 'images' contains no shape.
		</comment>
		<comment id='2' author='KichangKim' date='2019-05-01T03:05:48Z'>
		This is expected difference in behavior between eager-mode and graph-mode execution.
Without tf.data the load_image function is executed eagerly and thus the decode_image knows that it is dealing with a JPEG and will be able to determine the shape of the image.
When tf.data, the load_image function will be traced (i.e. converted to a graph) and in that case, the shape of the image will not be known.
In particular, the following program executing the load_image method using a tf.function produces the same behavior as tf.data.
&lt;denchmark-code&gt;@tf.function
def load_image(x):
    image = tf.io.read_file(x)
    image = tf.io.decode_image(image)
    image = tf.image.resize(image, size=(
        128, 128), preserve_aspect_ratio=True)

    return image

with tf.device('/cpu:0'):
    image_2 = load_image('test.jpg')
    print(image_2.numpy().shape)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='KichangKim' date='2019-05-01T03:05:49Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28247&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28247&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>