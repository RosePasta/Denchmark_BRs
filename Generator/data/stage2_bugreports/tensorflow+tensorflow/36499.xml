<bug id='36499' author='brian36' open_date='2020-02-06T02:34:35Z' closed_time='2020-04-03T08:09:26Z'>
	<summary>tensorflow.fill does not work in keras.layers and models with dynamic shape as it should and as similar functions do</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): (MacOS) Darwin-19.2.0-x86_64-i386-64bit - mac version: ('10.15.2', ('', '', ''), 'x86_64')
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): binary (pip install)
TensorFlow version (use command below): v2.1.0-rc2-17-ge5bf8de410 2.1.0
Python version: Python 3.7.6
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
If I use tensorflow.fill in tf.keras.layers layer, where the shape for the fill depends on the input, it doesn't work, although it works with plenty of other similar functions, and would be reasonably expected to work.
Specifically, I call:
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np

X = tf.keras.Input((1,))
X2 = tf.keras.layers.Lambda(lambda x: tf.fill((tf.shape(X)[0],1),2.5))(X)
model = tf.keras.Model(inputs=X,outputs=X2)
model.predict(np.random.randn(10,1))
&lt;/denchmark-code&gt;

I get the following error when I try to run "predict" with a model built with the label (full error output below):

_SymbolicException: Inputs to eager execution function cannot be Keras symbolic tensors, but found [&lt;tf.Tensor 'input_1:0' shape=(None, 1) dtype=float32&gt;]

Describe the expected behavior
I expect it to output a 10x1 numpy array of ones.  This happens with other similar functions used in the same way.  E.g., the following all work fine used in the same way:
&lt;denchmark-code&gt;X2 = tf.keras.layers.Lambda(lambda x: tf.random.uniform(tf.shape(x)))(X) 
X2 = tf.keras.layers.Lambda(lambda x: tf.zeros_like(x))(X)
X2 = tf.keras.layers.Lambda(lambda x: tf.ones_like(x)*3.5)(X)
&lt;/denchmark-code&gt;

and they all depend on the shape of the input, for the case of random.uniform it even takes the same call tf.shape in the input and works fine.   There's no reason tf.fill shouldn't work / the similar capability to create a full tensor for an arbitrary value and input shape.
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np

X = tf.keras.Input((1,))
X2 = tf.keras.layers.Lambda(lambda x: tf.fill((tf.shape(X)[0],1),2.5))(X)
model = tf.keras.Model(inputs=X,outputs=X2)
model.predict(np.random.randn(10,1))
&lt;/denchmark-code&gt;

Other info / logs

Here is the full error output / trace:
TypeError                                 Traceback (most recent call last)
/Users/workspaces/python_virtualenv/tensorflow2/lib/python3.7/site-packages/tensorflow_core/python/eager/execute.py in quick_execute(op_name, num_outputs, inputs, attrs, ctx, name)
60                                                op_name, inputs, attrs,
---&gt; 61                                                num_outputs)
62   except core._NotOkStatusException as e:
TypeError: An op outside of the function building code is being passed
a "Graph" tensor. It is possible to have Graph tensors
leak out of the function building context by including a
tf.init_scope in your function building code.
For example, the following function will fail:
@tf.function
def has_init_scope():
my_constant = tf.constant(1.)
with tf.init_scope():
added = my_constant * 2
The graph tensor has name: input_1:0
During handling of the above exception, another exception occurred:
_SymbolicException                        Traceback (most recent call last)
 in 
5 X2 = tf.keras.layers.Lambda(lambda x: tf.fill((tf.shape(X)[0],1),2.5))(X)
6 model = tf.keras.Model(inputs=X,outputs=X2)
----&gt; 7 model.predict(np.random.randn(10,1))
/Users/workspaces/python_virtualenv/tensorflow2/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training.py in predict(self, x, batch_size, verbose, steps, callbacks, max_queue_size, workers, use_multiprocessing)
1011         max_queue_size=max_queue_size,
1012         workers=workers,
-&gt; 1013         use_multiprocessing=use_multiprocessing)
1014
1015   def reset_metrics(self):
/Users/workspaces/python_virtualenv/tensorflow2/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training_v2.py in predict(self, model, x, batch_size, verbose, steps, callbacks, max_queue_size, workers, use_multiprocessing, **kwargs)
496         model, ModeKeys.PREDICT, x=x, batch_size=batch_size, verbose=verbose,
497         steps=steps, callbacks=callbacks, max_queue_size=max_queue_size,
--&gt; 498         workers=workers, use_multiprocessing=use_multiprocessing, **kwargs)
499
500
/Users/workspaces/python_virtualenv/tensorflow2/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training_v2.py in _model_iteration(self, model, mode, x, y, batch_size, verbose, sample_weight, steps, callbacks, max_queue_size, workers, use_multiprocessing, **kwargs)
473               mode=mode,
474               training_context=training_context,
--&gt; 475               total_epochs=1)
476           cbks.make_logs(model, epoch_logs, result, mode)
477
/Users/workspaces/python_virtualenv/tensorflow2/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training_v2.py in run_one_epoch(model, iterator, execution_function, dataset_size, batch_size, strategy, steps_per_epoch, num_samples, mode, training_context, total_epochs)
126         step=step, mode=mode, size=current_batch_size) as batch_logs:
127       try:
--&gt; 128         batch_outs = execution_function(iterator)
129       except (StopIteration, errors.OutOfRangeError):
130         # TODO(kaftan): File bug about tf function and errors.OutOfRangeError?
/Users/workspaces/python_virtualenv/tensorflow2/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py in execution_function(input_fn)
96     # numpy translates Tensors to values in Eager mode.
97     return nest.map_structure(_non_none_constant_value,
---&gt; 98                               distributed_function(input_fn))
99
100   return execution_function
/Users/workspaces/python_virtualenv/tensorflow2/lib/python3.7/site-packages/tensorflow_core/python/eager/def_function.py in call(self, *args, **kwds)
566         xla_context.Exit()
567     else:
--&gt; 568       result = self._call(*args, **kwds)
569
570     if tracing_count == self._get_tracing_count():
/Users/workspaces/python_virtualenv/tensorflow2/lib/python3.7/site-packages/tensorflow_core/python/eager/def_function.py in _call(self, *args, **kwds)
636               *args, **kwds)
637       # If we did not create any variables the trace we have is good enough.
--&gt; 638       return self._concrete_stateful_fn._filtered_call(canon_args, canon_kwds)  # pylint: disable=protected-access
639
640     def fn_with_cond(*inner_args, **inner_kwds):
/Users/workspaces/python_virtualenv/tensorflow2/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py in _filtered_call(self, args, kwargs)
1609          if isinstance(t, (ops.Tensor,
1610                            resource_variable_ops.BaseResourceVariable))),
-&gt; 1611         self.captured_inputs)
1612
1613   def _call_flat(self, args, captured_inputs, cancellation_manager=None):
/Users/workspaces/python_virtualenv/tensorflow2/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py in _call_flat(self, args, captured_inputs, cancellation_manager)
1690       # No tape is watching; skip to running the function.
1691       return self._build_call_outputs(self._inference_function.call(
-&gt; 1692           ctx, args, cancellation_manager=cancellation_manager))
1693     forward_backward = self._select_forward_and_backward_functions(
1694         args,
/Users/workspaces/python_virtualenv/tensorflow2/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py in call(self, ctx, args, cancellation_manager)
543               inputs=args,
544               attrs=("executor_type", executor_type, "config_proto", config),
--&gt; 545               ctx=ctx)
546         else:
547           outputs = execute.execute_with_cancellation(
/Users/workspaces/python_virtualenv/tensorflow2/lib/python3.7/site-packages/tensorflow_core/python/eager/execute.py in quick_execute(op_name, num_outputs, inputs, attrs, ctx, name)
73       raise core._SymbolicException(
74           "Inputs to eager execution function cannot be Keras symbolic "
---&gt; 75           "tensors, but found {}".format(keras_symbolic_tensors))
76     raise e
77   # pylint: enable=protected-access
_SymbolicException: Inputs to eager execution function cannot be Keras symbolic tensors, but found [&lt;tf.Tensor 'input_1:0' shape=(None, 1) dtype=float32&gt;]

	</description>
	<comments>
		<comment id='1' author='brian36' date='2020-02-06T10:10:42Z'>
		i am able to replicate the issue, please find the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/693f9a278227723a2456a7a76a607e0b/36499.ipynb#scrollTo=mAH7En1bh4TG&gt;gist&lt;/denchmark-link&gt;
 here.
		</comment>
		<comment id='2' author='brian36' date='2020-03-26T17:52:58Z'>
		It looks like you have mistyped the X as uppercase in the call to tf.shape?
&lt;denchmark-code&gt;X2 = tf.keras.layers.Lambda(lambda x: tf.fill((tf.shape(X)[0],1),2.5))(X)
&lt;/denchmark-code&gt;

Should be:
&lt;denchmark-code&gt;X2 = tf.keras.layers.Lambda(lambda x: tf.fill((tf.shape(x)[0],1),2.5))(X)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='brian36' date='2020-04-03T08:09:18Z'>
		&lt;denchmark-link:https://github.com/brian36&gt;@brian36&lt;/denchmark-link&gt;
  Closing this issue as this is the expected behavior. Thanks!
		</comment>
		<comment id='4' author='brian36' date='2020-04-03T08:09:27Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36499&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36499&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>