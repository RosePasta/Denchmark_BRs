<bug id='30857' author='814HiManny' open_date='2019-07-18T18:51:13Z' closed_time='2019-08-12T05:46:50Z'>
	<summary>TF2: Out of Memory using model.fit with class_weight parameter</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):

&lt;denchmark-code&gt;Yes
&lt;/denchmark-code&gt;


OS Platform and Distribution (e.g., Linux Ubuntu 16.04):

&lt;denchmark-code&gt;Container derived from nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04 running on Ubuntu 18.04 via Kubernetes 1.13
&lt;/denchmark-code&gt;


TensorFlow installed from (source or binary):

&lt;denchmark-code&gt;pip3 install tensorflow-gpu==2.0.0-beta1
&lt;/denchmark-code&gt;


TensorFlow version (use command below):

&lt;denchmark-code&gt;v1.12.1-6250-g37eafe0e74 2.0.0-dev20190715
&lt;/denchmark-code&gt;


Python version:

&lt;denchmark-code&gt;Python 3.6.8
&lt;/denchmark-code&gt;


CUDA/cuDNN version:

&lt;denchmark-code&gt;NVIDIA-SMI 410.78       Driver Version: 410.78       CUDA Version: 10.0
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;        libcudnn.so.7 -&gt; libcudnn.so.7.6.0
libcudnn is installed
&lt;/denchmark-code&gt;


GPU model and memory:

&lt;denchmark-code&gt;name, pci.bus_id, vbios_version
Tesla V100-SXM2-32GB, 00000000:1B:00.0, 88.00.43.00.03
&lt;/denchmark-code&gt;

Describe the current behavior
Doing a training with tf.keras results in out of memory after some time when including the class_weight parameter. Also there is a long delay between the start of each epoch. If I omit the class_weight parameter, training proceeds normally with constant memory.
Describe the expected behavior
Training proceed normally when the class_weight parameter is included without running out of memory.
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf

################ Data
def _parse_fn2(fn, label):
    img = tf.random.uniform([224, 224, 3])
    return img, label

train_data2 = tf.data.Dataset.from_tensor_slices(
  (tf.random.uniform([100]), tf.random.uniform([100], maxval=9, dtype=tf.dtypes.int32))
)

val_data2 = tf.data.Dataset.from_tensor_slices(
  (tf.random.uniform([100]), tf.random.uniform([100], maxval=9, dtype=tf.dtypes.int32))
)
train_data2 = (train_data2.map(_parse_fn2)).batch(32)
val_data2 = (val_data2.map(_parse_fn2)).batch(32)

############### Model
IMG_SHAPE = (224, 224, 3)

base_model = tf.keras.applications.ResNet50(input_shape=IMG_SHAPE,include_top=False, weights=None)
base_model.trainable = True
maxpool_layer = tf.keras.layers.GlobalMaxPooling2D()
prediction_layer = tf.keras.layers.Dense(9, activation='softmax')

model = tf.keras.Sequential([
    base_model,
    maxpool_layer,
    tf.keras.layers.Dropout(0.4),
    prediction_layer
])

model.compile(optimizer=tf.keras.optimizers.Adam(lr=0.01), loss='categorical_crossentropy', metrics=['accuracy'])

model.summary()
history = model.fit(train_data2.repeat(),
                epochs=100,
                steps_per_epoch = 50,
                validation_data=val_data2.repeat(),
                validation_steps=10,
                class_weight={0:1,1:1,2:1,3:1,4:1,5:1,6:1,7:1,8:1,9:1},
                callbacks = [])
&lt;/denchmark-code&gt;

Other info / logs
Memory Usage at Each Epoch:
&lt;denchmark-code&gt;              total        used        free      shared  buff/cache   available
E1:           502G         11G        461G        140M         30G        487G
E2:           502G         16G        456G        140M         30G        483G
E3:           502G         22G        449G        140M         30G        476G
E4:           502G         30G        441G        141M         30G        468G
E5:           502G         40G        431G        141M         30G        458G
E6:           502G         52G        419G        141M         30G        446G
&lt;/denchmark-code&gt;

vmstat output:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3407988/vmstat_output.txt&gt;vmstat_output.txt&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='814HiManny' date='2019-07-22T23:28:00Z'>
		&lt;denchmark-link:https://github.com/814HiManny&gt;@814HiManny&lt;/denchmark-link&gt;
 I was able to reproduce the issue with . However, when I remove  from the model.fit, the model runs without any issue. Thanks!
		</comment>
		<comment id='2' author='814HiManny' date='2019-08-12T05:11:15Z'>
		This looks like it's the same as &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/31253&gt;#31253&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='3' author='814HiManny' date='2019-08-12T05:46:50Z'>
		Yep, looks like a duplicate, I'll close this one to unify threads
		</comment>
		<comment id='4' author='814HiManny' date='2019-08-12T05:46:51Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30857&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30857&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='814HiManny' date='2020-01-15T03:06:42Z'>
		Hi, &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/31253&gt;#31253&lt;/denchmark-link&gt;
 is for TF 1.x. What is the fixed version for TF2.X?
		</comment>
	</comments>
</bug>