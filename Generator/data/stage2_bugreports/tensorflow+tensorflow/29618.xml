<bug id='29618' author='lwu025' open_date='2019-06-10T23:57:54Z' closed_time='2019-06-14T06:34:15Z'>
	<summary>Tflite opengles delegate gives inaccurate result</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): YES
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: Internal Android 8.1 board
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 1.13.1
Python version: 2.7
Bazel version (if compiling from source): 0.22.0
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory: Mali-T864 GPU

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
I wrote a simple demo using tflite opengles delegate to run deeplab models from &lt;denchmark-link:https://github.com/tensorflow/models/blob/master/research/deeplab/g3doc/model_zoo.md&gt;model zoo&lt;/denchmark-link&gt;
.
I have tried your hosted model &lt;denchmark-link:https://storage.googleapis.com/download.tensorflow.org/models/tflite/gpu/deeplabv3_257_mv_gpu.tflite&gt;deeplabv3_mv2_257_gpu.tflite&lt;/denchmark-link&gt;
, It works perfect on my device on CPU and Opengles delegate.
However, when I tried the &lt;denchmark-link:http://download.tensorflow.org/models/deeplabv3_xception_ade20k_train_2018_05_29.tar.gz&gt;deeplab mode with xception65 &lt;/denchmark-link&gt;
, The tflite perform differently on CPU and Opengles delegate. My input layer is sub_7, output layer is ResizeBilinear_3.
Here is my result:
test image:
&lt;denchmark-link:https://user-images.githubusercontent.com/43549654/59234008-b852b600-8b9f-11e9-8ce2-703664cadcf4.png&gt;&lt;/denchmark-link&gt;

result from CPU (correct):
&lt;denchmark-link:https://user-images.githubusercontent.com/43549654/59234023-d02a3a00-8b9f-11e9-98f0-f17874fca671.png&gt;&lt;/denchmark-link&gt;

result from opengles delegate:
&lt;denchmark-link:https://user-images.githubusercontent.com/43549654/59234034-dc15fc00-8b9f-11e9-9982-008d9f5064fa.png&gt;&lt;/denchmark-link&gt;

I believed that this issue is related to the operations(BATCH_TO_SPACE_ND, SPACE_TO_BATCH_ND)  that opengles not supporting thus fallback to CPU. Another &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/29509&gt;issue&lt;/denchmark-link&gt;
 of mine described more detail.
Flatten the unsupported ops using graph_transforms also failed. It gives me the same inaccurate result or shows message like:
INFO: Initialized TensorFlow Lite runtime. INFO: Created TensorFlow Lite delegate for GPU. ERROR: TfLiteGpuDelegate Prepare: Program is not properly linked: L0005 The number of compute uniform components (1261) is greater than the maximum number allowed (1024). ERROR: Node number 199 (TfLiteGpuDelegate) failed to prepare. ERROR: Node number 199 (TfLiteGpuDelegate) failed to prepare. 
Describe the expected behavior
all models work as good as your hosted model
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='lwu025' date='2019-06-11T03:54:18Z'>
		
I wrote a simple demo using tflite opengles delegate to run deeplab models from model zoo.

Please attach your code.
		</comment>
		<comment id='2' author='lwu025' date='2019-06-11T17:36:24Z'>
		Demo code (some less important functions are omitted):
`int main(int argc, char** argv)
{
std::cout &lt;&lt; "tflite_opengl_demo Start!" &lt;&lt; std::endl;
std::string path_model;
std::string path_img;
std::string path_label;
std::string mode;
if (argc != 10)
{
LOG(ERROR) &lt;&lt; "Invalid arguments. Exactly 9 arguments required.";
LOG(ERROR) &lt;&lt; "path to model";
LOG(ERROR) &lt;&lt; "path to image";
LOG(ERROR) &lt;&lt; "path to label";
LOG(ERROR) &lt;&lt; "mode(opengl/nnapi/cpu)";
LOG(ERROR) &lt;&lt; "graph image mean";
LOG(ERROR) &lt;&lt; "graph image std";
LOG(ERROR) &lt;&lt; "input width";
LOG(ERROR) &lt;&lt; "input height";
LOG(ERROR) &lt;&lt; "num of class";
return 1;
}
path_model = argv[1];
path_img = argv[2];
path_label = argv[3];
mode = argv[4];
float graph_image_mean = std::stof(argv[5]);
float graph_image_std = std::stof(argv[6]);;
int input_tensor_width = std::stoi(argv[7]);;
int input_tensor_height = std::stoi(argv[8]);;
const int input_tensor_channels = 3;
int graph_num_class = std::stoi(argv[9]);;
const cv::Size net_input_image_size = cv::Size(input_tensor_width,input_tensor_height);
cv::Mat image = cv::imread( path_img, cv::IMREAD_COLOR);
if (image.empty()){
LOG(ERROR) &lt;&lt; "Load image file failed";
return -1;
}
cv::Mat target_image = image.clone();//input
int img_width = image.size().width;
int img_height = image.size().height;
float ratio_x = 1.0 * img_width / net_input_image_size.width;
float ratio_y = 1.0 * img_height / net_input_image_size.height;
float max_ratio = std::max(ratio_x, ratio_y);
cv::Size input_tensor_size = cv::Size( int(img_width / max_ratio), int(img_height / max_ratio));
std::cout &lt;&lt; "Original image size: " &lt;&lt; image.size() &lt;&lt; " resize to:" &lt;&lt; input_tensor_size &lt;&lt; std::endl;
cv::resize(target_image, target_image, input_tensor_size, 0, 0, CV_INTER_NN);
cv::cvtColor(target_image, target_image, cv::COLOR_BGR2RGB);
cv::Mat segmentation_img;
////////
// Set up interpreter.
model = tflite::FlatBufferModel::BuildFromFile(path_model.c_str());
tflite::ops::builtin::BuiltinOpResolver op_resolver;
tflite::InterpreterBuilder(*model, op_resolver)(&amp;interpreter);
interpreter-&gt;SetAllowFp16PrecisionForFp32(true);
if ( mode == "opengl"){
auto* delegate = TfLiteGpuDelegateCreate(/options=/nullptr);
if (interpreter-&gt;ModifyGraphWithDelegate(delegate) != kTfLiteOk) return 0;
}
if ( mode == "nnapi"){
auto* delegate = tflite::NnApiDelegate();
if (interpreter-&gt;ModifyGraphWithDelegate(delegate) != kTfLiteOk) return 0;
}
if ( interpreter-&gt;AllocateTensors() != kTfLiteOk) {
LOG(ERROR) &lt;&lt; "Failed to allocate tensors!";
}
WriteToInputTensor(target_image,interpreter-&gt;typed_input_tensor(0));
if (interpreter-&gt;Invoke() != kTfLiteOk) return 0;
ReadFromOutputTensor(segmentation_img,interpreter-&gt;typed_output_tensor(0));
DumpImage(segmentation_img);
return 0;
}`
		</comment>
		<comment id='3' author='lwu025' date='2019-06-12T13:21:57Z'>
		&lt;denchmark-link:https://github.com/lwu025&gt;@lwu025&lt;/denchmark-link&gt;
 : Is this a duplicate of earlier issue you have mentioned &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/29509&gt;#29509&lt;/denchmark-link&gt;
 . If so, can we track with that issue and close this one. It will help us to follow easily. Please let us know. Thanks!
		</comment>
		<comment id='4' author='lwu025' date='2019-06-12T17:37:15Z'>
		Sure,. You can close this issue
		</comment>
		<comment id='5' author='lwu025' date='2019-06-14T06:34:15Z'>
		&lt;denchmark-link:https://github.com/lwu025&gt;@lwu025&lt;/denchmark-link&gt;
 : Thanks for the response. Closing the issue since its a duplicate of &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/29509&gt;#29509&lt;/denchmark-link&gt;
 .
		</comment>
		<comment id='6' author='lwu025' date='2019-06-14T06:34:17Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=29618&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=29618&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='lwu025' date='2019-06-18T14:05:29Z'>
		&lt;denchmark-link:https://github.com/lwu025&gt;@lwu025&lt;/denchmark-link&gt;
 Please attach the other functions. Sometimes, the GPU delegates can produce different outputs on different hardwares. I could try running it on my Mali.
		</comment>
	</comments>
</bug>