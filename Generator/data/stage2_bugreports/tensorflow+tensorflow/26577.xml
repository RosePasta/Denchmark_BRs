<bug id='26577' author='diego898' open_date='2019-03-11T13:46:40Z' closed_time='2019-06-17T23:06:46Z'>
	<summary>Accuracy Metric automatically selected, fails in certain cases</summary>
	<description>
System information

Uses a basic CNN MNIST Keras example
CentOS7
TensorFlow installed from: Anaconda
TensorFlow version: Both 1.12-gpu and 2.0.0-alpha0-cpu
Python version: 3.6

Describe the current behavior

When using a "built in" loss function, the "accuracy" metric is automatically resolved to the "correct one".
When using a custom loss function that "touches" y_pred and y_true in any way (even trivially as seen below), "accuracy" is no longer automatically resolved.

Preamble:
&lt;denchmark-code&gt;import tensorflow as tf
import tensorflow.keras.backend as K
from tensorflow.keras import datasets, layers, models

(train_images, train_labels), (test_images, test_labels) = datasets.mnist.load_data()

train_images = train_images.reshape((60000, 28, 28, 1))
test_images = test_images.reshape((10000, 28, 28, 1))

# Normalize pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0
&lt;/denchmark-code&gt;

"Working" Example:
&lt;denchmark-code&gt;def customLoss1():
    return tf.keras.losses.sparse_categorical_crossentropy
model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))

model.compile(loss=customLoss1(), optimizer='adam', metrics=['accuracy',])
model.fit(train_images, train_labels, epochs=1)
&lt;/denchmark-code&gt;

"Broken" Example:
&lt;denchmark-code&gt;def customLoss2(y_true, y_pred):
    return K.sparse_categorical_crossentropy(y_true, y_pred)

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))

model.compile(loss=customLoss2(), optimizer='adam', metrics=['accuracy',])
model.fit(train_images, train_labels, epochs=1)
&lt;/denchmark-code&gt;

Describe the expected behavior
I am not sure if this is intended, a bug, or a reasonable failure.
Broken Example Now Works:
In order to get the "Broken" exmaple to "work" correctly, you have to specify the correct accuracy metric directly:
&lt;denchmark-code&gt;model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))

model.compile(loss=customLossWorks(), optimizer='adam', metrics=['sparse_categorical_accuracy'])
model.fit(train_images, train_labels, epochs=1)
&lt;/denchmark-code&gt;

Other info / logs

This was originally posted under #26490 but @timudk helped clarify my problem so I reposted as a separate issue.

	</description>
	<comments>
		<comment id='1' author='diego898' date='2019-06-17T23:06:45Z'>
		&lt;denchmark-link:https://github.com/diego898&gt;@diego898&lt;/denchmark-link&gt;
 Thank you for reporting the issue.
Without a built-in loss function, we cannot tell whether categorical or sparse categorical accuracy should be used in this case as the outputs will have the same shape for both the use cases and it is the labels that determine the correct function that needs to be used.
As at the time of compile we do not have enough information we cannot determine the correct metric accuracy function to be used in this case.
		</comment>
	</comments>
</bug>