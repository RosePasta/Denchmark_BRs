<bug id='26715' author='SimSimY' open_date='2019-03-14T21:19:59Z' closed_time='2019-03-21T21:27:41Z'>
	<summary>Docker latest images are using tf 2.0.0a0</summary>
	<description>
System information

Have I written custom code: No
OS Platform and Distribution: Linux Ubuntu 16.04
TensorFlow installed from: binary
TensorFlow version (use command below): 2.0.0a0 (script is however broken, see below)
Python version: 2.7.12 / 3.5.2
CUDA/cuDNN version: any
GPU model and memory: any


You can collect some of this information using our environment capture script
You can also obtain the TensorFlow version with
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"

While this is not the issue itself, its worth mentioning that both are broken
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/tmp/check_tf.py", line 2, in &lt;module&gt;
    print("tf.VERSION = %s" % tf.VERSION)
AttributeError: 'module' object has no attribute 'VERSION'
&lt;/denchmark-code&gt;

Describe the current behavior
The Docker latest family contains tensorflow version 2.0.0a0.
Describe the expected behavior
The Docker latest family should contain  tensorflow version 1.13.*.
According to the docs (and docker convention), the latest docker images should contain the latest  stable version, as in 1.13 while the nightly images should contain the unstable images, such us alphas, betas and RCs
Code to reproduce the issue
docker run -it --rm tensorflow/tensorflow  pip list 2&gt;&amp;1 | grep tensorflow
docker run -it --rm tensorflow/tensorflow:latest-py3  pip list 2&gt;&amp;1 | grep tensorflow
(the issue persists in docker versions as well)

&lt;denchmark-link:https://user-images.githubusercontent.com/1699509/54392157-8f5d7a80-46af-11e9-8b00-9e4e1979db6a.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='SimSimY' date='2019-03-19T20:50:32Z'>
		Also:
docker run --rm -it tensorflow/tensorflow:1.12.0-gpu-py3
is actually jupyter version
		</comment>
		<comment id='2' author='SimSimY' date='2019-03-19T21:23:46Z'>
		Thanks for reporting this. It looks like it's probably a mistake in the way our CI handles PyPi pre-releases. "Latest" usually refers to pre-releases, but since 2.0 is more of an alpha, the CI gets confused with PyPI's limited classification system.
In the meantime, if you run into this, please use the numbered tag directly instead of "latest", which will be accurately tagged.
		</comment>
		<comment id='3' author='SimSimY' date='2019-03-21T18:26:14Z'>
		With regards to the 1.12.0 images, only the images newer than 1.13 use the newer Dockerfiles, and we haven't rebuilt them to avoid breaking anyone who depends on the old structure. There's a note about this at the top of the Docker Hub repository.
		</comment>
		<comment id='4' author='SimSimY' date='2019-03-21T21:27:40Z'>
		I've fixed the underlying issue and re-tagged the latest images to be based on the 1.13.1 images. Thanks!
		</comment>
		<comment id='5' author='SimSimY' date='2019-03-21T21:27:42Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=26715&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=26715&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>