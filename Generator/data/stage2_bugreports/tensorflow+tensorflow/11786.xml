<bug id='11786' author='cheind' open_date='2017-07-26T14:14:49Z' closed_time='2017-07-27T17:38:34Z'>
	<summary>contrib.data.Dataset - doc issue with Dataset.map / tf.py_func in 1.3.0rc0</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10
TensorFlow installed from (source or binary): 1.3.0rc0
Python version: 3.6
CUDA/cuDNN version: 8/6
GPU model and memory: GTX 1080
Exact command to reproduce:

The following sample is taken from &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/docs_src/programmers_guide/datasets.md&gt;here&lt;/denchmark-link&gt;
 and works in TF 1.2.1
import tensorflow as tf
import numpy as np

def _read_py_function(filename, label):
  return np.zeros((100,100,1)), label

def _resize_function(image_decoded, label):
  image_decoded.set_shape([None, None, None])
  image_resized = tf.image.resize_images(image_decoded, [28, 28])
  return image_resized, label

filenames = np.array(["/var/data/image1.jpg", "/var/data/image2.jpg"])
labels = np.array([0, 37])

dataset = tf.contrib.data.Dataset.from_tensor_slices((filenames, labels))
dataset = dataset.map(
    lambda filename, label: tf.py_func(
        _read_py_function, [filename, label], [tf.uint8, label.dtype]))
dataset = dataset.map(_resize_function)
In 1.3.0rc0 the following error is produced
&lt;denchmark-code&gt;Cannot convert a list containing a tensor of dtype &lt;dtype: 'int32'&gt; to &lt;dtype: 'uint8'&gt; (Tensor is: &lt;tf.Tensor 'PyFunc:1' shape=&lt;unknown&gt; dtype=int32&gt;)
&lt;/denchmark-code&gt;

This is due to the breaking change mentioned in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.3/RELEASE.md&gt;release notes&lt;/denchmark-link&gt;
. To fix, one now has to introduce an explicit  like so
dataset = dataset.map(
    lambda filename, label: tuple(tf.py_func(
        _read_py_function, [filename, label], [tf.uint8, label.dtype])))
This should at least be mentioned in the API docs / programmer guide.
	</description>
	<comments>
		<comment id='1' author='cheind' date='2017-07-26T17:37:55Z'>
		&lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
, could you update the documentation to reflect this change?
		</comment>
		<comment id='2' author='cheind' date='2017-07-26T17:38:14Z'>
		Thanks &lt;denchmark-link:https://github.com/cheind&gt;@cheind&lt;/denchmark-link&gt;
 for reporting this.
		</comment>
		<comment id='3' author='cheind' date='2017-07-27T04:30:01Z'>
		&lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
 You're welcome. While this is certainly a doc issue at this point, I want to raise the concern that assigning  and   totally different semantics in Python is very uncommon (even in Tensorflow) and could lead to many suprising moments on user side.
		</comment>
		<comment id='4' author='cheind' date='2017-08-21T15:50:42Z'>
		I have a similar error message, but I'm not sure if I got the proposed solution correctly.
The code raising the error:
&lt;denchmark-code&gt;dataset = tf.contrib.data.TFRecordDataset(shard_files)
dataset = dataset.map(partial(decoder.decode, items=['label', 'image']))
&lt;/denchmark-code&gt;

where decoder is a tf.contrib.slim.tfexample_decoder.TFExampleDecoder()
So, if I got the issue right, since decoder.decode() returns a list [label, decoded_image_data] this is implicitly casted to a tensor (and thus the cast fails because label and image_data have different types).
However, if I write a lambda that wraps tuple() around the result of the call to decoder.decode(), this should fix the problem:
&lt;denchmark-code&gt;dataset = dataset.map( lambda s : tuple(decoder.decode(s, items=['label', 'image'])))
&lt;/denchmark-code&gt;

I still get the error, however:

TypeError: Cannot convert a list containing a tensor of dtype &lt;dtype: 'float32'&gt; to &lt;dtype: 'int64'&gt; (Tensor is: &lt;tf.Tensor 'distort_image/Mul:0' shape=(224, 224, 3) dtype=float32&gt;)

Am I getting the solution wrong? Is this really the intended way to use the API? Even when many other TF APIs return lists instead of tuples?
EDIT: I had map() in several places and, of course, the new error was coming from the line below the one I fixed.
		</comment>
		<comment id='5' author='cheind' date='2017-08-21T16:07:15Z'>
		&lt;denchmark-link:https://github.com/GPhilo&gt;@GPhilo&lt;/denchmark-link&gt;
 We've fixed this issue in the internal branch, and it should appear at HEAD soon. (Follow &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/12396&gt;#12396&lt;/denchmark-link&gt;
 to see when the commit lands.) After the fix, the behavior of  will be the same if a function returns a tuple or a list containing the same elements, and the  workaround will no longer be necessary.
		</comment>
		<comment id='6' author='cheind' date='2017-08-22T08:09:35Z'>
		&lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
 sounds great!
		</comment>
		<comment id='7' author='cheind' date='2018-07-20T11:09:01Z'>
		TypeError: Cannot convert a list containing a tensor of dtype &lt;dtype: 'int32'&gt; to &lt;dtype: 'float32'&gt; (Tensor is: &lt;tf.Tensor 'Preprocessor/stack_1:0' shape=(1, 3) dtype=int32&gt;)
		</comment>
		<comment id='8' author='cheind' date='2018-07-20T15:08:13Z'>
		&lt;denchmark-link:https://github.com/tamizharasank&gt;@tamizharasank&lt;/denchmark-link&gt;
 This issue has been closed. If you think you've found a bug, please open a new issue with enough details about your program to reproduce the problem. Otherwise, Stack Overflow may be a more useful venue for your question.
		</comment>
	</comments>
</bug>