<bug id='42679' author='guillaumelorre28' open_date='2020-08-26T14:06:37Z' closed_time='2020-09-26T00:27:14Z'>
	<summary>Bug using dictionary in tensorflow2.3</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): Source
TensorFlow version (use command below): 2.3.0
Python version: 3.7
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: /
GPU model and memory: /

The code below gives an incorrect summary.
import tensorflow as tf
from tensorflow import keras

layers = tf.keras.layers


class LayerTest(layers.Layer):
    def __init__(self):
        super(LayerTest, self).__init__()

    def call(self, inputs) -&gt; tf.Tensor:
        predictions = inputs
        
        for k in predictions.keys():
            predictions[k] = tf.math.l2_normalize(predictions[k], axis=-1)

        for step_name in predictions.keys():
            loss = tf.reduce_mean(predictions[k])
            
        return loss
    
    
def Model(target_dim: int = 64):
   
    input_tensor = layers.Input(
        shape=[target_dim], name="input_tensor"
    )
 
    predictions = {'step_0': layers.Lambda(lambda _x: _x)(input_tensor), 'step_1': layers.Lambda(lambda _x: _x)(input_tensor)}
    
    logits = LayerTest()(predictions)

    return keras.Model(inputs=input_tensor, outputs=logits)

               
model = Model()
        
model.compile()
                       
model.summary()
The output using tensorflow2.3 is the following:
&lt;denchmark-code&gt;__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to                     
==================================================================================================
input_tensor (InputLayer)       [(None, 64)]         0                                            
__________________________________________________________________________________________________
lambda_1 (Lambda)               (None, 64)           0           input_tensor[0][0]               
__________________________________________________________________________________________________
tf_op_layer_layer_test/l2_norma [(None, 64)]         0           lambda_1[0][0]                   
__________________________________________________________________________________________________
tf_op_layer_layer_test/l2_norma [(None, 1)]          0           tf_op_layer_layer_test/l2_normali
__________________________________________________________________________________________________
tf_op_layer_layer_test/l2_norma [(None, 1)]          0           tf_op_layer_layer_test/l2_normali
__________________________________________________________________________________________________
tf_op_layer_layer_test/l2_norma [(None, 1)]          0           tf_op_layer_layer_test/l2_normali
__________________________________________________________________________________________________
tf_op_layer_layer_test/l2_norma [(None, 64)]         0           lambda_1[0][0]                   
                                                                 tf_op_layer_layer_test/l2_normali
__________________________________________________________________________________________________
&lt;/denchmark-code&gt;

The correct output using tensorflow2.2 is the following:
&lt;denchmark-code&gt;Layer (type)                    Output Shape         Param #     Connected to                     
==================================================================================================
input_tensor (InputLayer)       [(None, 64)]         0                                            
__________________________________________________________________________________________________
lambda (Lambda)                 (None, 64)           0           input_tensor[0][0]               
__________________________________________________________________________________________________
lambda_1 (Lambda)               (None, 64)           0           input_tensor[0][0]               
__________________________________________________________________________________________________
layer_test (LayerTest)          ()                   0           lambda[0][0]                     
                                                                 lambda_1[0][0]                   
=================================================================================================
&lt;/denchmark-code&gt;

Creating a new dictionary to make the updates gives the correct results:
class LayerTest(layers.Layer):
    def __init__(self):
        super(LayerTest, self).__init__()

    def call(self, inputs) -&gt; tf.Tensor:
        predictions = inputs

        predictions2 = {}
        
        for k in predictions.keys():
            predictions2[k] = tf.math.l2_normalize(predictions[k], axis=-1)

        for step_name in predictions2.keys():
            loss = tf.reduce_mean(predictions2[k])
            
        return loss
	</description>
	<comments>
		<comment id='1' author='guillaumelorre28' date='2020-08-26T16:00:24Z'>
		I am able to replicate the issue reported, please find the gist here for &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/08cc5eb832c763d1ba449a12e227d335/untitled393.ipynb&gt;tf nightly&lt;/denchmark-link&gt;
 and&lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/c602120b86439137b22648cac72a0a4d/untitled394.ipynb&gt; tf 2.2&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='guillaumelorre28' date='2020-09-11T23:18:20Z'>
		This is fixed with latest tf-nightly version 2.4.0-dev20200911.
See the &lt;denchmark-link:https://colab.research.google.com/gist/ymodak/a03025d5176b75c7a6a2f189f3fc5b8d/untitled393.ipynb&gt;gist&lt;/denchmark-link&gt;
 Thanks!
		</comment>
		<comment id='3' author='guillaumelorre28' date='2020-09-18T23:45:38Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='4' author='guillaumelorre28' date='2020-09-26T00:27:13Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='5' author='guillaumelorre28' date='2020-09-26T00:27:15Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42679&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42679&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>