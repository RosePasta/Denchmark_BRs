<bug id='46317' author='WZMIAOMIAO' open_date='2021-01-10T07:50:57Z' closed_time='2021-01-14T18:27:50Z'>
	<summary>In different tf2 versions, the weight naming rules of creating keras model are different</summary>
	<description>
System information

OS Platform and Distribution : Linux Ubuntu 18.04
TensorFlow installed from (source or binary): pip install tensorflow-cpu
TensorFlow version (use command below): 2.1, 2.2, 2.3, 2.4
Python version: 3.6 / 3.8

Describe the current behavior
I create keras model using same code, but got different results(different weight names) in different tf version.
This will prevent me from loading network weights (based on variable name) in different tf version.
Describe the expected behavior
I can get same results in different tf version.
Standalone code to reproduce the issue
I create kears model:
from tensorflow.keras import layers, Model, Sequential


class ConvBNReLU(layers.Layer):
    def __init__(self, out_channel, kernel_size=3, stride=1, **kwargs):
        super(ConvBNReLU, self).__init__(**kwargs)
        layers_list = [layers.Conv2D(filters=out_channel, kernel_size=kernel_size,
                                     strides=stride, padding='SAME', use_bias=False, name='Conv2d'),
                       layers.BatchNormalization(momentum=0.9, epsilon=1e-5, name='BatchNorm'),
                       layers.ReLU(max_value=6.0)]

        self.combine_layer = Sequential(layers_list, name="combine")

    def call(self, inputs, training=False, **kwargs):
        x = self.combine_layer(inputs, training=training)
        return x


def main():
    input_image = layers.Input(shape=(224, 224, 3), dtype='float32')
    # conv1
    x = ConvBNReLU(32, stride=2)(input_image)
    output = ConvBNReLU(64, stride=2)(x)
    model = Model(inputs=input_image, outputs=output)

    for i in model.weights:
        print(i.name)


if __name__ == '__main__':
    main()
In tf2.0, 2.1 and 2.2, the printed weight name information is as follows:
&lt;denchmark-code&gt;conv_bn_re_lu/combine/Conv2d/kernel:0
conv_bn_re_lu/combine/BatchNorm/gamma:0
conv_bn_re_lu/combine/BatchNorm/beta:0
conv_bn_re_lu/combine/BatchNorm/moving_mean:0
conv_bn_re_lu/combine/BatchNorm/moving_variance:0
conv_bn_re_lu_1/combine/Conv2d/kernel:0
conv_bn_re_lu_1/combine/BatchNorm/gamma:0
conv_bn_re_lu_1/combine/BatchNorm/beta:0
conv_bn_re_lu_1/combine/BatchNorm/moving_mean:0
conv_bn_re_lu_1/combine/BatchNorm/moving_variance:0
&lt;/denchmark-code&gt;

But in tf2.3 and 2.4, I got different results:
&lt;denchmark-code&gt;Conv2d/kernel:0
BatchNorm/gamma:0
BatchNorm/beta:0
BatchNorm/moving_mean:0
BatchNorm/moving_variance:0
Conv2d/kernel:0
BatchNorm/gamma:0
BatchNorm/beta:0
BatchNorm/moving_mean:0
BatchNorm/moving_variance:0
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='WZMIAOMIAO' date='2021-01-11T05:40:59Z'>
		I have tried in colab with TF 2.0,2.1,2.2,2.3 and i am seeing the below results.
&lt;denchmark-code&gt;conv_bn_re_lu/combine/Conv2d/kernel:0
conv_bn_re_lu/combine/BatchNorm/gamma:0
conv_bn_re_lu/combine/BatchNorm/beta:0
conv_bn_re_lu/combine/BatchNorm/moving_mean:0
conv_bn_re_lu/combine/BatchNorm/moving_variance:0
conv_bn_re_lu_1/combine/Conv2d/kernel:0
conv_bn_re_lu_1/combine/BatchNorm/gamma:0
conv_bn_re_lu_1/combine/BatchNorm/beta:0
conv_bn_re_lu_1/combine/BatchNorm/moving_mean:0
conv_bn_re_lu_1/combine/BatchNorm/moving_variance:0
&lt;/denchmark-code&gt;

With TF 2.4 and nightly version(2.5.0-dev20210110). I am seeing different results.
&lt;denchmark-code&gt;Conv2d/kernel:0
BatchNorm/gamma:0
BatchNorm/beta:0
BatchNorm/moving_mean:0
BatchNorm/moving_variance:0
Conv2d/kernel:0
BatchNorm/gamma:0
BatchNorm/beta:0
BatchNorm/moving_mean:0
BatchNorm/moving_variance:0
&lt;/denchmark-code&gt;

PLease, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/d678117eb1fb07e12090b4dd8a1171dc/untitled607.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='2' author='WZMIAOMIAO' date='2021-01-12T03:09:26Z'>
		&lt;denchmark-link:https://github.com/WZMIAOMIAO&gt;@WZMIAOMIAO&lt;/denchmark-link&gt;
 Code change in internal modules changed the path for model weights. However, how is it affecting you. Can you please share more details (with a standalone code) on your use-case?  Thanks!
		</comment>
		<comment id='3' author='WZMIAOMIAO' date='2021-01-12T06:24:16Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 This will prevent me from loading network weights  in different tf version.
&lt;denchmark-h:h3&gt;When I was learning tensorflow2, I recorded my own learning process.&lt;/denchmark-h&gt;

Recorded in: &lt;denchmark-link:https://github.com/WZMIAOMIAO/deep-learning-for-image-processing/tree/master/tensorflow_classification/Test5_resnet&gt;tensorflow_classification/Test5_resnet&lt;/denchmark-link&gt;

&lt;denchmark-h:h4&gt;1) using model.py file to build resnet model.&lt;/denchmark-h&gt;

&lt;denchmark-h:h4&gt;2) I get resnet50 weights based on variable name through transformation.&lt;/denchmark-h&gt;


download TF official resnet weights. http://download.tensorflow.org/models/resnet_v1_50_2016_08_28.tar.gz
using read_ckpt.py file to transform weights name.

&lt;denchmark-h:h4&gt;3) using train.py file to load pretrain weights and train network.&lt;/denchmark-h&gt;

With TF 2.0, 2.1, 2.2, I can execute successfully.
But with TF2.4, when executing to feature.load_weights(pre_weights_path) I got error:
Traceback (most recent call last):
  File "/home/wz/miniconda3/envs/tf24/lib/python3.8/site-packages/tensorflow/python/training/py_checkpoint_reader.py", line 69, in get_tensor
    return CheckpointReader.CheckpointReader_GetTensor(
RuntimeError: Key _CHECKPOINTABLE_OBJECT_GRAPH not found in checkpoint

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/wz/miniconda3/envs/tf24/lib/python3.8/site-packages/tensorflow/python/training/tracking/util.py", line 1299, in restore
    object_graph_string = reader.get_tensor(base.OBJECT_GRAPH_PROTO_KEY)
  File "/home/wz/miniconda3/envs/tf24/lib/python3.8/site-packages/tensorflow/python/training/py_checkpoint_reader.py", line 74, in get_tensor
    error_translator(e)
  File "/home/wz/miniconda3/envs/tf24/lib/python3.8/site-packages/tensorflow/python/training/py_checkpoint_reader.py", line 35, in error_translator
    raise errors_impl.NotFoundError(None, None, error_message)
tensorflow.python.framework.errors_impl.NotFoundError: Key _CHECKPOINTABLE_OBJECT_GRAPH not found in checkpoint

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/wz/miniconda3/envs/tf24/lib/python3.8/site-packages/tensorflow/python/training/saving/saveable_object_util.py", line 131, in restore
    return resource_variable_ops.shape_safe_assign_variable_handle(
  File "/home/wz/miniconda3/envs/tf24/lib/python3.8/site-packages/tensorflow/python/ops/resource_variable_ops.py", line 307, in shape_safe_assign_variable_handle
    shape.assert_is_compatible_with(value_tensor.shape)
  File "/home/wz/miniconda3/envs/tf24/lib/python3.8/site-packages/tensorflow/python/framework/tensor_shape.py", line 1134, in assert_is_compatible_with
    raise ValueError("Shapes %s and %s are incompatible" % (self, other))
ValueError: Shapes (1, 1, 64, 256) and (7, 7, 3, 64) are incompatible
&lt;denchmark-h:h4&gt;4) Because of the above problems, I try to use feature.set_weights() to load weights. But I find that with TF2.4 each weights name using feature.weights to get is not complete. I think this problem was posed by Sequential function with TF2.4.&lt;/denchmark-h&gt;

		</comment>
		<comment id='4' author='WZMIAOMIAO' date='2021-01-14T18:27:49Z'>
		
This will prevent me from loading network weights (based on variable name) in different tf version.

Variable names have no stability guarantee. For this reason, weight loading should not be based on naming.

Because of the above problems, I try to use feature.set_weights() to load weights

This is the correct take. Use get_weights / load_weights across equivalent models.
		</comment>
		<comment id='5' author='WZMIAOMIAO' date='2021-01-14T18:27:51Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/46317&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/46317&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='WZMIAOMIAO' date='2021-01-15T01:11:17Z'>
		&lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
 Thank you for your reply.
As I mentioned above, because I only have weight information and no order information, I need to know the full name of each variable to build an ordered variable weights list. Then I can load the weights by . But with TF2.4 use of  results in incomplete variable names, which is correct with TF 2.0, 2.1, 2.2.
There's another problem that Why can't we load weights in the form of dictionaries like Pytorch. It's very convenient.
		</comment>
	</comments>
</bug>