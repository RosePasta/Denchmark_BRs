<bug id='45596' author='JohanMeppelinkDRA' open_date='2020-12-11T08:10:08Z' closed_time='2020-12-12T16:09:10Z'>
	<summary>Tensorflow float32 conversion bug from python to tensorflow constants</summary>
	<description>
Tensorflow changes values well within tf.float32 range to nearby values.
Is this expected behaviour? Numpy doesn't have this issue and given the values are within float32 range I'm not sure why this is happening.
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10, same issue on linux though
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No
TensorFlow installed from (source or binary): No
TensorFlow version (use command below): version 2.1.0
Python version: 3.6.8
Bazel version (if compiling from source): Not build from source
GCC/Compiler version (if compiling from source): Not build from source
CUDA/cuDNN version:  running on cpu
GPU model and memory:  ****

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

**
For example
tf.constant(20200131, dtype=tf.float32)
Becomes &lt;tf.Tensor: shape=(), dtype=float32, numpy=20200132.0&gt;
Why the extra 1?**
Expected behaviour:
**
tf.constant(20200131, dtype=tf.float32)
Becomes &lt;tf.Tensor: shape=(), dtype=float32, numpy=20200131.0&gt;
**
Standalone code to reproduce the issue
import tensorflow as tf
tf.constant(20200131, dtype=tf.float32)
	</description>
	<comments>
		<comment id='1' author='JohanMeppelinkDRA' date='2020-12-12T14:06:29Z'>
		In fact, numpy does have the same behaviour:
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.full([], 20200131, dtype=np.float32)
array(20200132., dtype=float32)
It's just that numpy defaults to float64, which is why you do not notice it when invoking without specifying dtype:
&gt;&gt;&gt; a = np.full([], 20200131)
a = np.full([], 20200131)
&gt;&gt;&gt; a
array(20200131)
&gt;&gt;&gt; a.dtype
dtype('int64')
Float32 rounds to even numbers for large values. See also this interesting &lt;denchmark-link:https://en.wikipedia.org/wiki/Single-precision_floating-point_format&gt;Wikipedia page&lt;/denchmark-link&gt;
:

Integers between 224=16777216 and 225=33554432 round to a multiple of 2 (even number)

		</comment>
		<comment id='2' author='JohanMeppelinkDRA' date='2020-12-12T16:09:11Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/45596&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/45596&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>