<bug id='28441' author='philgras' open_date='2019-05-06T14:37:06Z' closed_time='2019-05-17T00:08:27Z'>
	<summary>Shape errors occur after compiling keras model with tf.keras.losses.CategoricalCrossentropy</summary>
	<description>
System information

OS Platform and Distribution:  Linux Ubuntu 18.04
TensorFlow installed from (source or binary): binary
TensorFlow version: 1.13.1
Python version: 3.6.3

Describe the current behavior
If I want to specify, for example, a reduction method of the loss function, I will need to explicitly create an instance of tf.keras.losses.CategoricalCrossentropy and pass it to model.compile() instead of passing the "categorical_crossentropy" keyword. However, compiling a model with an instance of tf.keras.losses.CategoricalCrossentropy results in the following shape error when calling model.fit() afterwards:
&lt;denchmark-code&gt;InvalidArgumentError: logits and labels must have the same first dimension, got logits shape [1000,10] and labels shape [10000]
	 [[{{node loss_18/dense_37_loss/CategoricalCrossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits}}]]


&lt;/denchmark-code&gt;

Describe the expected behavior
I was expecting similar behavior for both "categorical_crossentropy" and tf.keras.losses.CategoricalCrossentropy.
Code to reproduce the issue
A short MNIST example. I realized that removing the to_categorical transformation resolves the shape errors but the model does not learn properly anymore.
&lt;denchmark-code&gt;from tensorflow.python.keras.datasets import mnist
from tensorflow.python.keras.utils import to_categorical

import tensorflow as tf
import numpy as np

(X_train, y_train), (X_test, y_test) = mnist.load_data()

X_train, X_test = X_train.astype(float)/255, X_test.astype(float)/255
X_train, X_test = X_train.reshape(len(X_train),28,28,1), X_test.reshape(len(X_test),28,28,1)
y_train, y_test = to_categorical(y_train), to_categorical(y_test)

# model definition
model = tf.keras.Sequential([
      tf.keras.layers.Conv2D(16, 8,
                             strides=2,
                             padding='same',
                             activation='relu',
                             input_shape=(28, 28, 1)),
      tf.keras.layers.MaxPool2D(2, 1),
      tf.keras.layers.Conv2D(32, 4,
                             strides=2,
                             padding='valid',
                             activation='relu'),
      tf.keras.layers.MaxPool2D(2, 1),
      tf.keras.layers.Flatten(),
      tf.keras.layers.Dense(32, activation='relu'),
      tf.keras.layers.Dense(10, activation="softmax")
  ])

optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1)

# this causes errors
loss = tf.keras.losses.CategoricalCrossentropy(from_logits=False)

# using the keyword, everything works
# loss = "categorical_crossentropy" 

# Compile model with Keras
model.compile(optimizer=optimizer, loss=loss, metrics=['categorical_accuracy'])

# Train model with Keras
model.fit(X_train, y_train, epochs=5, batch_size=1000,
          validation_data=(X_test, y_test), verbose=2)

&lt;/denchmark-code&gt;

Thank you!
	</description>
	<comments>
		<comment id='1' author='philgras' date='2019-05-10T11:49:59Z'>
		&lt;denchmark-link:https://github.com/philgras&gt;@philgras&lt;/denchmark-link&gt;
  : I was able to replicate the output with the code snippet provided on Colab (TensorFlow version 1.13.1).
		</comment>
		<comment id='2' author='philgras' date='2019-05-13T20:26:57Z'>
		&lt;denchmark-link:https://github.com/philgras&gt;@philgras&lt;/denchmark-link&gt;
 I think this is intended behavior.   expects targets to be binary matrices (1s and 0s) of shape (samples, classes). If you use  , it was expecting integer classes for targets. shape of the  caused the error. Thanks!
		</comment>
		<comment id='3' author='philgras' date='2019-05-13T20:56:18Z'>
		&lt;denchmark-link:https://github.com/philgras&gt;@philgras&lt;/denchmark-link&gt;
 I tried running the sample code snippet in TF 1.13.1 and was not able to repro the difference in behavior between using  and .
		</comment>
		<comment id='4' author='philgras' date='2019-05-13T21:16:13Z'>
		&lt;denchmark-link:https://github.com/pavithrasv&gt;@pavithrasv&lt;/denchmark-link&gt;
 Here is the Github &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/4a3250db8ba13303ecc968b225344d9e/untitled155.ipynb&gt;gist&lt;/denchmark-link&gt;
 that works without any issue. Here is the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/86caa7fd84915e2645316c5ccab56a59/untitled155.ipynb&gt;gist&lt;/denchmark-link&gt;
 that throws an error. Between the two gists, there was only one line change. In the second gist,  is expecting integer classes as input but categorical classes were given as input. Thanks!
		</comment>
		<comment id='5' author='philgras' date='2019-05-14T01:00:58Z'>
		Thank you &lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
. I see the issue now. Looks like it has been fixed already as it does not repro in TF 2.0 alpha or the nightly release.
		</comment>
		<comment id='6' author='philgras' date='2019-05-17T00:08:27Z'>
		Closing the PR now, please feel free to re-open if you see that the issue is not fixed.
		</comment>
		<comment id='7' author='philgras' date='2019-05-17T00:08:28Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28441&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28441&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>