<bug id='15463' author='ppwwyyxx' open_date='2017-12-19T00:39:07Z' closed_time='2019-04-25T22:47:00Z'>
	<summary>Bug: StagingArea.size() always return 0 when placed on a different device</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): ubuntu 14.04
TensorFlow installed from (source or binary):source
TensorFlow version (use command below):b'v1.3.0-rc1-6044-g0b80606' 1.4.0
Python version:  3.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:9.0/7.0
GPU model and memory:
Exact command to reproduce:

import tensorflow as tf
from tensorflow.python.ops.data_flow_ops import StagingArea

areas = []
stage_ops = []
sizes = []
for idx, d in enumerate(['/gpu:0', '/gpu:1']):
    with tf.device(d):
        inputs = [tf.constant(1.0), tf.constant(2, dtype=tf.uint8)]
        dtypes = [k.dtype for k in inputs]
        stage = StagingArea(dtypes, shapes=None)
        stage_ops.append(stage.put(inputs))
        areas.append(stage)
        # sizes.append(stage.size())   # this gives correct result

sizes = [k.size() for k in areas]    # this gives wrong result
with tf.Session() as sess:
    print(sess.run(sizes))    # [0, 0]
    sess.run(stage_ops[0])
    sess.run(stage_ops[1])
    sess.run(stage_ops[0])
    sess.run(stage_ops[1])
    print(sess.run(sizes))  # expected: [2,2]; actual: [2,0]
	</description>
	<comments>
		<comment id='1' author='ppwwyyxx' date='2017-12-23T00:02:10Z'>
		This is definitely one for &lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='ppwwyyxx' date='2017-12-23T00:07:22Z'>
		Reassigning to &lt;denchmark-link:https://github.com/ekelsen&gt;@ekelsen&lt;/denchmark-link&gt;
, who wrote the  code.
		</comment>
		<comment id='3' author='ppwwyyxx' date='2018-05-12T21:21:53Z'>
		It has been half a year and this still exists in 1.8
		</comment>
		<comment id='4' author='ppwwyyxx' date='2019-02-22T22:07:03Z'>
		unassign
		</comment>
		<comment id='5' author='ppwwyyxx' date='2019-03-28T16:34:48Z'>
		&lt;denchmark-link:https://github.com/ppwwyyxx&gt;@ppwwyyxx&lt;/denchmark-link&gt;
 Is this still an issue with latest versions (1.12, 1.13.1, and 2.0)? Could you check and let us know whether the bug persists with latest versions. Thanks!
		</comment>
		<comment id='6' author='ppwwyyxx' date='2019-03-28T17:54:31Z'>
		The issue exists in 1.13 compiled from github master yesterday.
		</comment>
		<comment id='7' author='ppwwyyxx' date='2019-04-25T22:46:59Z'>
		We recommend using tf.data and specifically Dataset.prefetch instead of StagingArea, when building your input pipelines. It allows for higher performance and has better tuning knobs.
So I'm closing this issue as wontfix as StagingArea is deprecated.
		</comment>
		<comment id='8' author='ppwwyyxx' date='2019-04-25T22:47:01Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=15463&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=15463&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='ppwwyyxx' date='2019-04-25T23:25:09Z'>
		Data loading is not the only use of StagingArea.
It can be used to access stale variables/tensors (access variables/tensors from the previous step) to reduce latency in training. And because the user controls when to call StagingArea.put/get, the staleness is accurately controlled.
This usage appears several times in :
&lt;denchmark-link:https://github.com/tensorflow/benchmarks/blob/ac830fc902b8743ff2cec83cb103df7d0fffce84/scripts/tf_cnn_benchmarks/variable_mgr_util.py#L316&gt;https://github.com/tensorflow/benchmarks/blob/ac830fc902b8743ff2cec83cb103df7d0fffce84/scripts/tf_cnn_benchmarks/variable_mgr_util.py#L316&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/benchmarks/blob/ac830fc902b8743ff2cec83cb103df7d0fffce84/scripts/tf_cnn_benchmarks/batch_allreduce.py#L432&gt;https://github.com/tensorflow/benchmarks/blob/ac830fc902b8743ff2cec83cb103df7d0fffce84/scripts/tf_cnn_benchmarks/batch_allreduce.py#L432&lt;/denchmark-link&gt;

I don't see how this can be easily done with other tools in tensorflow.
		</comment>
		<comment id='10' author='ppwwyyxx' date='2019-04-26T16:36:58Z'>
		You can always replace a StagingArea with a variable, no?
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Thu, Apr 25, 2019 at 4:31 PM Yuxin Wu ***@***.***&gt; wrote:
 Data loading is not the only use of StagingArea.

 It can be used to access stale variables/tensors (access variables/tensors
 from the previous step) to reduce latency in training. And because the user
 controls when to call StagingArea.put/get, the staleness is accurately
 controlled.

 This usage appears several times in tensorflow/benchmarks:

 https://github.com/tensorflow/benchmarks/blob/ac830fc902b8743ff2cec83cb103df7d0fffce84/scripts/tf_cnn_benchmarks/variable_mgr_util.py#L316
https://github.com/tensorflow/benchmarks/blob/ac830fc902b8743ff2cec83cb103df7d0fffce84/scripts/tf_cnn_benchmarks/batch_allreduce.py#L432

 I don't see how this can be easily done with other tools in tensorflow.

 —
 You are receiving this because you modified the open/close state.
 Reply to this email directly, view it on GitHub
 &lt;#15463 (comment)&gt;,
 or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/AAABHRM644CU5WWGOP53LTDPSI5ONANCNFSM4EIZEGSA&gt;
 .


-- 
 - Alex

		</comment>
		<comment id='11' author='ppwwyyxx' date='2019-04-26T19:12:10Z'>
		Yeah, for StagingArea with size=1 it's straightforward with variables + control dependencies. Getting more complicated to mimic larger StagingArea, but I suppose those are not very useful anymore.
In fact using variables to mimic a queue was suggested before StagingArea was added to TF (&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/4526#issuecomment-249021613&gt;#4526 (comment)&lt;/denchmark-link&gt;
), though I don't know if anyone actually did it.
Thanks for your response!
		</comment>
		<comment id='12' author='ppwwyyxx' date='2019-10-31T09:17:14Z'>
		In fact I just realized that a variable cannot mimic a StagingArea because the Tensors put into a StagingArea can have different sizes.
We're also having some work that needs a queue of size &gt;1, therefore having a GPU-resided queue is still extremely useful.
		</comment>
		<comment id='13' author='ppwwyyxx' date='2019-10-31T14:31:58Z'>
		Tensors put into variables can also have partially unknown shapes.
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Thu, Oct 31, 2019 at 2:35 AM Yuxin Wu ***@***.***&gt; wrote:
 In fact I just realized that a variable cannot mimic a StagingArea because
 the Tensors put into a StagingArea can have different sizes.
 We're also having some work that needs a queue of size &gt;1, therefore
 having a GPU-resided queue is still extremely useful.

 —
 You are receiving this because you modified the open/close state.
 Reply to this email directly, view it on GitHub
 &lt;#15463?email_source=notifications&amp;email_token=AAABHRLSK3HVSIMU7EK4Q3TQRKRHFA5CNFSM4EIZEGSKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOECXBIQQ#issuecomment-548279362&gt;,
 or unsubscribe
 &lt;https://github.com/notifications/unsubscribe-auth/AAABHRK5HLK6MTXMRBE32C3QRKRHFANCNFSM4EIZEGSA&gt;
 .


-- 
 - Alex

		</comment>
	</comments>
</bug>