<bug id='20194' author='amirjamez' open_date='2018-06-21T17:22:42Z' closed_time='2019-01-10T23:32:29Z'>
	<summary>Assigning new values to a protocol buffer frozen model in TensorFlow</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): 14.04
TensorFlow installed from (source or binary): Source
TensorFlow version (use command below): r1.8
Python version:  2.7
Bazel version (if compiling from source): bazel release 0.13.0
GCC/Compiler version (if compiling from source): 4.8
CUDA/cuDNN version: 8/7
GPU model and memory: NVIDIA-1060
Exact command to reproduce:

I am able to assign new values to a tensor by using tf.assign and tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES) when I restore a pretrained model:
&lt;denchmark-code&gt; &gt;&gt;&gt;sess.run(tf.assign([v for v in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES) if v.name == 'LAYER_NAME'][0], New_Value_FOR_LAYER_NAME))`
&lt;/denchmark-code&gt;

However, in the case of a frozen model (.pb) file, the equivalent using tf.assign and tf.get_default_graph().get_operations() does not yeild any results:
&lt;denchmark-code&gt;&gt;&gt;&gt;sess.run(tf.assign([v for v in tf.get_default_graph().get_operations() if v.name == LAYER_NAME'][0], New_Value_FOR_LAYER_NAME)). 
&lt;/denchmark-code&gt;

I guess the underlying reason is that pretrained models have &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/Tensor&gt;tf.Tensor&lt;/denchmark-link&gt;
 and frozen models have &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/Operation&gt;tf.Operation&lt;/denchmark-link&gt;
:
&lt;denchmark-code&gt;&gt;&gt;&gt;[v for v in tf.get_default_graph().get_operations() if v.name == 'softmax/weights_quint8_const']
    [&lt;tf.Operation 'softmax/weights_quint8_const' type=Const&gt;]
&lt;/denchmark-code&gt;

Then, what is the correct way of assigning new values to a tf.Operation in a frozen model.
	</description>
	<comments>
		<comment id='1' author='amirjamez' date='2018-09-17T21:32:06Z'>
		no answers on this?
		</comment>
		<comment id='2' author='amirjamez' date='2018-12-04T18:51:17Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/jart&gt;@jart&lt;/denchmark-link&gt;
: It has been 77 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='3' author='amirjamez' date='2019-01-09T23:55:27Z'>
		&lt;denchmark-link:https://github.com/amirjamez&gt;@amirjamez&lt;/denchmark-link&gt;
 sorry for the delay.
		</comment>
		<comment id='4' author='amirjamez' date='2019-01-10T23:32:29Z'>
		For this it's better to modify the graphdef directly.  you'd export to a graph_def, modify that, then load it back in (or save it to file) depending on how you're going to use it
&lt;denchmark-code&gt;gd = tf.get_default_graph().as_graph_def()
const_nodes = [x for x in gd.node if x.op == 'Const']
value = const_nodes[0].attr['value'].tensor
# assuming an int32 vector
value.tensor_shape.dim[0].size = 3
value.tensor_content = np.array([1, 2, 3], dtype=np.int32).tostring()
# load gd back into a graph or store to disk
&lt;/denchmark-code&gt;

this will work for most data types, i think, including float and integer.  however it will break for string types.  presumably you're not freezing strings in graphs.
		</comment>
	</comments>
</bug>