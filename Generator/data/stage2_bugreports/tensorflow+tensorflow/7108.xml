<bug id='7108' author='vahidk' open_date='2017-01-27T09:39:30Z' closed_time='2018-04-10T22:39:48Z'>
	<summary>Tensorflow freezes on iOS during Session::Run</summary>
	<description>
Tensorflow hangs on iOS during Session::Run. I have a deep LSTM model that requires running session.run many times. The program occasionally hangs after running a few sessions without consuming any cpu. Tensorflow seems to get stuck at DirectSession::WaitForNotification.
&lt;denchmark-h:h3&gt;What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/2121&gt;#2121&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/2788&gt;#2788&lt;/denchmark-link&gt;

&lt;denchmark-h:h3&gt;Environment info&lt;/denchmark-h&gt;

Operating System: iOS
git rev-parse HEAD:  &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/e60e72435f0dfebe6424ab4c525523486006d47a&gt;e60e724&lt;/denchmark-link&gt;

Build label: 0.2.3
Build target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar
Build time: Tue May 17 14:22:21 2016 (1463494941)
Build timestamp: 1463494941
Build timestamp as int: 1463494941
&lt;denchmark-h:h3&gt;If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;std::vector&lt;tensorflow::Tensor&gt; outputs;
for (int t = 0; t &lt; count; ++t) {        
    std::vector&lt;std::pair&lt;std::string, tensorflow::Tensor&gt;&gt; feed =....
    auto status = g_session-&gt;Run(feed, out_layer_names, {}, &amp;outputs);
    if (!status.ok()) {
        LOG(ERROR) &lt;&lt; status.ToString();
        return @"Internal Error!";
    }
    ....
}
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Logs or other output that would be helpful&lt;/denchmark-h&gt;

This is a stack trace of all of the threads when the program freezes:


thread #1: tid = 0x206350, 0x0000000183256e1c libsystem_kernel.dylib__psynch_cvwait + 8, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP frame #0: 0x0000000183256e1c libsystem_kernel.dylib__psynch_cvwait + 8
frame #1: 0x000000018331c9c0 libsystem_pthread.dylib_pthread_cond_wait + 640 frame #2: 0x0000000182c453ec libc++.1.dylibstd::__1::condition_variable::wait(std::__1::unique_lockstd::__1::mutex&amp;) + 56
frame #3: 0x00000001000ef6fc Apptensorflow::DirectSession::WaitForNotification(tensorflow::Notification*, long long) + 176 frame #4: 0x00000001000eb1cc Apptensorflow::DirectSession::WaitForNotification(tensorflow::DirectSession::RunState*, tensorflow::CancellationManager*, long long) + 48
frame #5: 0x00000001000e91b8 App`tensorflow::DirectSession::Run(tensorflow::RunOptions const&amp;, std::__1::vector&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits, std::__1::allocator &gt;, tensorflow::Tensor&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits, std::__1::allocator &gt;, tensorflow::Tensor&gt; &gt; &gt; const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits, std::__1::allocator &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits, std::__1::allocator &gt; &gt; &gt; const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits, std::__1::allocator &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits, std::__1::allocator &gt; &gt; &gt; const&amp;, std::__1::vector&lt;tensorflow::Tensor, std::__1::allocatortensorflow::Tensor &gt;, tensorflow::RunMetadata) + 1868

frame #6: 0x00000001000e8a40 Apptensorflow::DirectSession::Run(std::__1::vector&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, tensorflow::Tensor&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, tensorflow::Tensor&gt; &gt; &gt; const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__1::vector&lt;tensorflow::Tensor, std::__1::allocator&lt;tensorflow::Tensor&gt; &gt;*) + 112 frame #7: 0x000000010052e01c Apptensorflow::internal::AppendProtoDebugString(tensorflow::strings::ProtoTextOutput*, tensorflow::Feature const&amp;) + 6028
frame #8: 0x000000010053c138 Appmain + 24316 frame #9: 0x0000000100535f00 Apptensorflow::internal::AppendProtoDebugString(tensorflow::strings::ProtoTextOutput*, tensorflow::Feature const&amp;) + 38512
frame #10: 0x0000000100535794 Apptensorflow::internal::AppendProtoDebugString(tensorflow::strings::ProtoTextOutput*, tensorflow::Feature const&amp;) + 36612 frame #11: 0x000000018a173d30 UIKit-[UIApplication sendAction:to:from:forEvent:] + 96
frame #12: 0x000000018a2e7880 UIKit-[UIBarButtonItem(UIInternal) _sendAction:withEvent:] + 168 frame #13: 0x000000018a173d30 UIKit-[UIApplication sendAction:to:from:forEvent:] + 96
frame #14: 0x000000018a173cb0 UIKit-[UIControl sendAction:to:forEvent:] + 80 frame #15: 0x000000018a15e128 UIKit-[UIControl _sendActionsForEvents:withEvent:] + 452
frame #16: 0x000000018a15e290 UIKit-[UIControl _sendActionsForEvents:withEvent:] + 812 frame #17: 0x000000018a17359c UIKit-[UIControl touchesEnded:withEvent:] + 584
frame #18: 0x000000018a1730c4 UIKit-[UIWindow _sendTouchesForEvent:] + 2484 frame #19: 0x000000018a16e328 UIKit-[UIWindow sendEvent:] + 2988
frame #20: 0x000000018a13eda0 UIKit-[UIApplication sendEvent:] + 340 frame #21: 0x000000018a92875c UIKit__dispatchPreprocessedEventFromEventQueue + 2736
frame #22: 0x000000018a922130 UIKit__handleEventQueue + 784 frame #23: 0x0000000184236b5c CoreFoundationCFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION + 24
frame #24: 0x00000001842364a4 CoreFoundation__CFRunLoopDoSources0 + 524 frame #25: 0x00000001842340a4 CoreFoundation__CFRunLoopRun + 804
frame #26: 0x00000001841622b8 CoreFoundationCFRunLoopRunSpecific + 444 frame #27: 0x0000000185c16198 GraphicsServicesGSEventRunModal + 180
frame #28: 0x000000018a1a97fc UIKit-[UIApplication _run] + 684 frame #29: 0x000000018a1a4534 UIKitUIApplicationMain + 208
frame #30: 0x00000001005362b4 Appmain + 120 frame #31: 0x00000001831455b8 libdyld.dylibstart + 4

thread #4: tid = 0x206397, 0x000000018331ad88 libsystem_pthread.dylibstart_wqthread frame #0: 0x000000018331ad88 libsystem_pthread.dylibstart_wqthread
thread #8: tid = 0x20639b, 0x0000000183239188 libsystem_kernel.dylibmach_msg_trap + 8, name = 'com.apple.uikit.eventfetch-thread' frame #0: 0x0000000183239188 libsystem_kernel.dylibmach_msg_trap + 8
frame #1: 0x0000000183238ff8 libsystem_kernel.dylibmach_msg + 72 frame #2: 0x00000001842365d0 CoreFoundation__CFRunLoopServiceMachPort + 192
frame #3: 0x00000001842341ec CoreFoundation__CFRunLoopRun + 1132 frame #4: 0x00000001841622b8 CoreFoundationCFRunLoopRunSpecific + 444
frame #5: 0x0000000184c9f26c Foundation-[NSRunLoop(NSRunLoop) runMode:beforeDate:] + 304 frame #6: 0x0000000184cbfdd0 Foundation-[NSRunLoop(NSRunLoop) runUntilDate:] + 96
frame #7: 0x000000018ab1dc38 UIKit-[UIEventFetcher threadMain] + 136 frame #8: 0x0000000184d9ce68 FoundationNSThread__start + 1024
frame #9: 0x000000018331d850 libsystem_pthread.dylib_pthread_body + 240 frame #10: 0x000000018331d760 libsystem_pthread.dylib_pthread_start + 284
frame #11: 0x000000018331ad94 libsystem_pthread.dylib`thread_start + 4
thread #9: tid = 0x2063c0, 0x0000000183256e1c libsystem_kernel.dylib__psynch_cvwait + 8 frame #0: 0x0000000183256e1c libsystem_kernel.dylib__psynch_cvwait + 8
frame #1: 0x000000018331c9c0 libsystem_pthread.dylib_pthread_cond_wait + 640 frame #2: 0x0000000182c453ec libc++.1.dylibstd::__1::condition_variable::wait(std::__1::unique_lockstd::__1::mutex&amp;) + 56
frame #3: 0x000000010019535c Apptensorflow::thread::ThreadPool::CurrentThreadId() const + 6296 frame #4: 0x0000000100194e40 Apptensorflow:ðŸ§µ:ThreadPool::CurrentThreadId() const + 4988
frame #5: 0x00000001001949dc Apptensorflow::thread::ThreadPool::CurrentThreadId() const + 3864 frame #6: 0x00000001001946e4 Apptensorflow:ðŸ§µ:ThreadPool::CurrentThreadId() const + 3104
frame #7: 0x00000001001a5828 Appvoid* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::function&lt;void ()&gt; &gt; &gt;(void*) + 100 frame #8: 0x000000018331d850 libsystem_pthread.dylib_pthread_body + 240
frame #9: 0x000000018331d760 libsystem_pthread.dylib_pthread_start + 284 frame #10: 0x000000018331ad94 libsystem_pthread.dylibthread_start + 4
thread #10: tid = 0x2063c1, 0x0000000183256e1c libsystem_kernel.dylib__psynch_cvwait + 8 frame #0: 0x0000000183256e1c libsystem_kernel.dylib__psynch_cvwait + 8
frame #1: 0x000000018331c9c0 libsystem_pthread.dylib_pthread_cond_wait + 640 frame #2: 0x0000000182c453ec libc++.1.dylibstd::__1::condition_variable::wait(std::__1::unique_lockstd::__1::mutex&amp;) + 56
frame #3: 0x000000010019535c Apptensorflow::thread::ThreadPool::CurrentThreadId() const + 6296 frame #4: 0x0000000100194e40 Apptensorflow:ðŸ§µ:ThreadPool::CurrentThreadId() const + 4988
frame #5: 0x00000001001949dc Apptensorflow::thread::ThreadPool::CurrentThreadId() const + 3864 frame #6: 0x00000001001946e4 Apptensorflow:ðŸ§µ:ThreadPool::CurrentThreadId() const + 3104
frame #7: 0x00000001001a5828 Appvoid* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::function&lt;void ()&gt; &gt; &gt;(void*) + 100 frame #8: 0x000000018331d850 libsystem_pthread.dylib_pthread_body + 240
frame #9: 0x000000018331d760 libsystem_pthread.dylib_pthread_start + 284 frame #10: 0x000000018331ad94 libsystem_pthread.dylibthread_start + 4
thread #11: tid = 0x2063c2, 0x0000000183256e1c libsystem_kernel.dylib__psynch_cvwait + 8 frame #0: 0x0000000183256e1c libsystem_kernel.dylib__psynch_cvwait + 8
frame #1: 0x000000018331c9c0 libsystem_pthread.dylib_pthread_cond_wait + 640 frame #2: 0x0000000182c453ec libc++.1.dylibstd::__1::condition_variable::wait(std::__1::unique_lockstd::__1::mutex&amp;) + 56
frame #3: 0x000000010019535c Apptensorflow::thread::ThreadPool::CurrentThreadId() const + 6296 frame #4: 0x0000000100194e40 Apptensorflow:ðŸ§µ:ThreadPool::CurrentThreadId() const + 4988
frame #5: 0x00000001001949dc Apptensorflow::thread::ThreadPool::CurrentThreadId() const + 3864 frame #6: 0x00000001001946e4 Apptensorflow:ðŸ§µ:ThreadPool::CurrentThreadId() const + 3104
frame #7: 0x00000001001a5828 Appvoid* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::function&lt;void ()&gt; &gt; &gt;(void*) + 100 frame #8: 0x000000018331d850 libsystem_pthread.dylib_pthread_body + 240
frame #9: 0x000000018331d760 libsystem_pthread.dylib_pthread_start + 284 frame #10: 0x000000018331ad94 libsystem_pthread.dylibthread_start + 4
thread #12: tid = 0x2063c3, 0x0000000183256e1c libsystem_kernel.dylib__psynch_cvwait + 8 frame #0: 0x0000000183256e1c libsystem_kernel.dylib__psynch_cvwait + 8
frame #1: 0x000000018331c9c0 libsystem_pthread.dylib_pthread_cond_wait + 640 frame #2: 0x0000000182c453ec libc++.1.dylibstd::__1::condition_variable::wait(std::__1::unique_lockstd::__1::mutex&amp;) + 56
frame #3: 0x000000010019535c Apptensorflow::thread::ThreadPool::CurrentThreadId() const + 6296 frame #4: 0x0000000100194e40 Apptensorflow:ðŸ§µ:ThreadPool::CurrentThreadId() const + 4988
frame #5: 0x00000001001949dc Apptensorflow::thread::ThreadPool::CurrentThreadId() const + 3864 frame #6: 0x00000001001946e4 Apptensorflow:ðŸ§µ:ThreadPool::CurrentThreadId() const + 3104
frame #7: 0x00000001001a5828 Appvoid* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::function&lt;void ()&gt; &gt; &gt;(void*) + 100 frame #8: 0x000000018331d850 libsystem_pthread.dylib_pthread_body + 240
frame #9: 0x000000018331d760 libsystem_pthread.dylib_pthread_start + 284 frame #10: 0x000000018331ad94 libsystem_pthread.dylibthread_start + 4


	</description>
	<comments>
		<comment id='1' author='vahidk' date='2017-01-27T17:55:58Z'>
		I got some advice from &lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
 and he explained that  blocking means that the run call is never signalling that it's finishing. On iOS we should only ever have one thread executing ops (inter-op parallelism in the arguments) so it should be tough to get into this condition. From Derek: "my guess is (i) some op that we don't really support on that platform is running and failing in a bad way (perhaps an AsyncOpKernel?), or (ii) some Session functionality that we haven't really tested on that platform is being used and failing in a bad way (perhaps a run timeout?)"
To help understand this, can you run tensorflow/tools/graph_transforms:summarize_graph on your model file, so we can see which ops are being used?
		</comment>
		<comment id='2' author='vahidk' date='2017-01-27T19:32:45Z'>
		This is the result of running summarize_graph:
Found 7 possible inputs: (name=token, type=int32(3), shape=[1]) (name=lstm_state/0/c/in, type=float(1), shape=[1,512]) (name=lstm_state/0/h/in, type=float(1), shape=[1,512]) (name=lstm_state/1/c/in, type=float(1), shape=[1,512]) (name=lstm_state/1/h/in, type=float(1), shape=[1,512]) (name=lstm_state/2/c/in, type=float(1), shape=[1,512]) (name=lstm_state/2/h/in, type=float(1), shape=[1,512])
Found 7 possible outputs: (name=lstm_state/0/c/out, op=Identity) (name=lstm_state/0/h/out, op=Identity) (name=lstm_state/1/c/out, op=Identity) (name=lstm_state/1/h/out, op=Identity) (name=lstm_state/2/c/out, op=Identity) (name=lstm_state/2/h/out, op=Identity) (name=logits, op=Identity)
Found 19 consts, 0 variables, 14 identities, and 0 control_edges
Op types used: 19 Const, 14 Identity, 9 Mul, 9 Sigmoid, 7 Placeholder, 7 Tanh, 6 Add, 4 MatMul, 3 BiasAdd, 3 Concat, 3 Split, 2 Reshape, 1 Gather, 1 Pack, 1 Unpack
		</comment>
		<comment id='3' author='vahidk' date='2017-02-04T04:50:17Z'>
		Any progress on this?
		</comment>
		<comment id='4' author='vahidk' date='2017-03-08T21:13:36Z'>
		Same problem, Is there any progress? Thanks.
		</comment>
		<comment id='5' author='vahidk' date='2017-03-22T18:49:13Z'>
		I am having the same issue running the inceptionV3 network (the one offered by tensorflow/models).
		</comment>
		<comment id='6' author='vahidk' date='2017-04-11T13:05:40Z'>
		Problem still persists, bad random freezes on iOS.
		</comment>
		<comment id='7' author='vahidk' date='2017-04-11T13:17:36Z'>
		@AndreaPisoni I have solved my problem by setting inter_op_parallelism_threads and intra_op_parallelism_threads to 1. This would make Tensorflow not use parallelism at all. My session creation code looks like this:
    tensorflow::SessionOptions options;
    options.config.mutable_graph_options()
        -&gt;mutable_optimizer_options()
        -&gt;set_opt_level(::tensorflow::OptimizerOptions::L0);
    options.config.set_inter_op_parallelism_threads(1);
    options.config.set_intra_op_parallelism_threads(1);
    options.env = memmapped_env-&gt;get();
    tensorflow::Session* session_pointer = nullptr;
    tensorflow::Status session_status = tensorflow::NewSession(options, &amp;session_pointer);
    if (!session_status.ok()) {
        LOG(ERROR) &lt;&lt; "Could not create TensorFlow Session: " &lt;&lt; session_status;
        return session_status;
    }
Setting just inter_op_parallelism_threads to 1, as suggested by &lt;denchmark-link:https://github.com/petewarden&gt;@petewarden&lt;/denchmark-link&gt;
 was not enough for me.
		</comment>
		<comment id='8' author='vahidk' date='2017-04-11T14:55:13Z'>
		Brilliant, I will give it a try, thanks! Just wondering, does this make the inference any slower?
		</comment>
		<comment id='9' author='vahidk' date='2017-05-13T06:49:38Z'>
		Thank you! It works for me but it's still far from a solution. I'm wondering why the official demo "camera" can work smoothly...
		</comment>
		<comment id='10' author='vahidk' date='2017-05-25T14:58:08Z'>
		Is someone still looking into the issue? Do we have logs on what the notifier thread is doing?
		</comment>
		<comment id='11' author='vahidk' date='2017-07-05T15:25:45Z'>
		I met the same problem. use LSTM, and fixed by the upper method "setting inter_op_parallelism_threads and intra_op_parallelism_threads to 1".
Is there any better methods to fix it ? Or tensorflow on IOS not support LSTM?
		</comment>
		<comment id='12' author='vahidk' date='2017-07-11T20:35:27Z'>
		We are also seeing this issue on iOS. We believe the issue is caused by a  op which does in fact seem to have a &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/2cfbd3347b943a389bb688125c2a90095b7735b5/tensorflow/core/kernels/where_op.cc&gt;fair bit of threading related code&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='13' author='vahidk' date='2017-08-10T14:32:06Z'>
		&lt;denchmark-link:https://github.com/cancan101&gt;@cancan101&lt;/denchmark-link&gt;
 use the lastest version still freeze. Has someone fixed?
		</comment>
		<comment id='14' author='vahidk' date='2017-08-12T20:40:32Z'>
		&lt;denchmark-link:https://github.com/gazzterran&gt;@gazzterran&lt;/denchmark-link&gt;
 did you try what &lt;denchmark-link:https://github.com/ratzinho87&gt;@ratzinho87&lt;/denchmark-link&gt;
 suggested?
 options.config.set_inter_op_parallelism_threads(1); options.config.set_intra_op_parallelism_threads(1);
		</comment>
		<comment id='15' author='vahidk' date='2017-08-28T08:18:10Z'>
		@liamnaks I've tried the "inter_op_parallelism_threads" method and it works in most of time ( but it still occurs during testing, in a very small probability, like 1/100)
From &lt;denchmark-link:https://github.com/cancan101&gt;@cancan101&lt;/denchmark-link&gt;
 said, is there some bugs in code?
		</comment>
		<comment id='16' author='vahidk' date='2017-09-13T11:47:27Z'>
		Why close the issue? I believe it still exists on new builds of TF.
		</comment>
		<comment id='17' author='vahidk' date='2017-09-14T18:52:35Z'>
		A fix for general threading issues on iOS went in last month, in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/12573&gt;#12573&lt;/denchmark-link&gt;

Could you let me know if this solves your case also? It appears to fix &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/12298&gt;#12298&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='18' author='vahidk' date='2017-09-14T19:14:18Z'>
		Did it make it into 1.3?
		</comment>
		<comment id='19' author='vahidk' date='2017-09-18T17:33:55Z'>
		It does not look like it is in 1.3
		</comment>
		<comment id='20' author='vahidk' date='2017-10-10T20:14:22Z'>
		&lt;denchmark-link:https://github.com/cancan101&gt;@cancan101&lt;/denchmark-link&gt;
 did the fix from &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/12573&gt;#12573&lt;/denchmark-link&gt;
 solve this issue for you?
		</comment>
		<comment id='21' author='vahidk' date='2017-11-28T19:03:02Z'>
		I reported &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/12298&gt;#12298&lt;/denchmark-link&gt;
 and I'm using a version including that commit, but I am also having this issue. For me, it seems to only happen when in some other place in my iOS app I have an  with a ton of operations and . Maybe that indicates the there's some thread contention between my operation queue and whatever thread Tensorflow is trying to use for its ops?
In any case, setting  to a smaller number (for example, 4) fixed the problem for me, so that's a potential workaround.
		</comment>
		<comment id='22' author='vahidk' date='2018-01-19T04:37:05Z'>
		same issue. ios froze occasionally on LSTM,
and bad luck, things worse after i did:
&lt;denchmark-code&gt;void InitGraph()
{
    Session * session;
    GraphDef graph_def;
    SessionOptions opts;


    TF_CHECK_OK(ReadBinaryProto(Env::Default(), heartPrintPbPathFile, &amp;graph_def));
    opts.config.set_inter_op_parallelism_threads(1);
    opts.config.set_intra_op_parallelism_threads(1);

    TF_CHECK_OK(NewSession(opts, &amp;session));

    TF_CHECK_OK(session-&gt;Create(graph_def));

    return session;
}
&lt;/denchmark-code&gt;

ios freezes every time  i do inferece.  -_-#
		</comment>
		<comment id='23' author='vahidk' date='2018-01-19T13:48:49Z'>
		greate news for me ~~ i resolved this issue,
&lt;denchmark-link:https://github.com/ratzinho87&gt;@ratzinho87&lt;/denchmark-link&gt;
 :not only set_inter_op_parallelism_threads and set_intra_op_parallelism_threads
but also add_session_inter_op_thread_pool and set_use_per_session_threads !!!!!
here:~
&lt;denchmark-code&gt;Session * HeartPrint::HpInitGraph()
{
    Session * session;
    GraphDef graph_def;
    SessionOptions opts;

    TF_CHECK_OK(ReadBinaryProto(Env::Default(), heartPrintPbPathFile, &amp;graph_def));

    opts.config.set_intra_op_parallelism_threads(1);
    opts.config.set_inter_op_parallelism_threads(1);
    opts.config.add_session_inter_op_thread_pool()-&gt;set_num_threads(1);
    opts.config.set_use_per_session_threads(false);

    TF_CHECK_OK(NewSession(opts, &amp;session));

    TF_CHECK_OK(session-&gt;Create(graph_def));

    return session;
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='24' author='vahidk' date='2018-02-08T00:23:08Z'>
		&lt;denchmark-link:https://github.com/eigen2017&gt;@eigen2017&lt;/denchmark-link&gt;
, is there a PR you need to make, or should this go int he docs somewhere?
		</comment>
		<comment id='25' author='vahidk' date='2018-02-08T00:44:47Z'>
		That doesn't seem like a solution as much as a workaround.
		</comment>
		<comment id='26' author='vahidk' date='2018-02-22T13:08:26Z'>
		Nagging Awaiting Response: It has been 14 days with no activityand the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='27' author='vahidk' date='2018-03-09T13:36:57Z'>
		Nagging Awaiting Response: It has been 14 days with no activityand the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='28' author='vahidk' date='2018-03-25T03:46:22Z'>
		It has been 14 days with no activity and the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='29' author='vahidk' date='2018-04-10T22:39:47Z'>
		Closing due to lack of activity, but please reopen if there's some followup needed.
		</comment>
	</comments>
</bug>