<bug id='34103' author='chaaland' open_date='2019-11-08T17:37:53Z' closed_time='2019-12-06T23:05:53Z'>
	<summary>Repeating numbers in uniform random Tensor created on GPU</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes


OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Windows 10


Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:


TensorFlow installed from (source or binary):
Source


TensorFlow version (use command below):
r1.12


Python version:
3.6.6


Bazel version (if compiling from source):
0.15.1


GCC/Compiler version (if compiling from source):


CUDA/cuDNN version:
9.0/7.4


GPU model and memory:
Quadro M2200 4GiB



I need to generate a tensor of uniform randoms inside a custom op. I basically copy the code for generating a tensor for zeros as is done &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/5b900cfe4b3b848f577315a0dde09a729f770e95/tensorflow/contrib/rnn/kernels/lstm_ops.h#L31&gt;here&lt;/denchmark-link&gt;

template &lt;typename Device, typename T&gt;
struct TensorRandom {
  void operator()(const Device&amp; d, typename TTypes&lt;T&gt;::Flat t) {
    t.device(d) = t.random(); // this is my only change to the TensorZeros function
  }
};
Inside my kernel I have something like the following
TensorShape my_shape({N, H, W});
Tensor* random_mat;
OP_REQUIRES_OK(ctx, ctx-&gt;allocate_output("random_mat", my_shape, &amp;random_mat));
const Device&amp; device = ctx-&gt;eigen_device&lt;Device&gt;(); // this will be a gpu
functor::TensorRandom&lt;Device, T&gt;()(device, random_mat.flat&lt;T&gt;());

VLOG(1) &lt;&lt; "Random Mat " &lt;&lt; random_mat.shape().DebugString()
              &lt;&lt; random_mat.SummarizeValue(N * H * W);
When I compile this and run my op (which I've defined in the python api) I get something like this for (N,H,W)=(2,4,2)
&lt;denchmark-code&gt;Random Mat: (2,4,2) [[[0.93335256, 0.53328224],
        [0.18036943, 0.12565934],
        [0.93335256, 0.53328224],
        [0.042617  , 0.61869474]],

       [[0.93335256, 0.53328224],
        [0.70387461, 0.88239244],
        [0.93335256, 0.53328224],
        [0.76217792, 0.65087953]]]
&lt;/denchmark-code&gt;

Notice the first value is repeated every 4 elements. The second value is also repeated every 4 values. The rest are seemingly random.
Describe the expected behavior
I would expect the output to be random. Instead, the first and second value are always repeated every fourth element.
Code to reproduce the issue
See above. Only way I was able to test was by also creating the python bindings for the Op
Other info / logs
This issue occurs for all shapes of tensor I have tried. I've also checked the tensor is indeed aligned. I'm using single precision floating point numbers. I highly suspect this is a GPU specific problem. If there is a better way to generate a random Tensor I'd be happy to use that as well
	</description>
	<comments>
		<comment id='1' author='chaaland' date='2019-11-19T21:58:16Z'>
		Hi, any updates on this?
		</comment>
		<comment id='2' author='chaaland' date='2019-11-26T19:15:25Z'>
		I've dug into this some more and a user on StackOverflow pointed me to the warning at the bottom of &lt;denchmark-link:http://eigen.tuxfamily.org/dox/TopicMultiThreading.html&gt;this Eigen documentation&lt;/denchmark-link&gt;
 indicating the issue might be related to thread safety.
In light of the above, I'm trying to use &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/be5d5e3f7534269782a3bdb3d806988c172c9db0/tensorflow/core/kernels/random_op.h#L49&gt;FillPhiloxRandom&lt;/denchmark-link&gt;
 instead as suggested by a different user on SO. When I compile my op, which is inside of //tensorflow/contrib, I get an error "undeclared inclusion(s) in rule &lt;name of .so file being built&gt;" and "this rule is missing dependency declarations for the following files included by &lt;my_file.cc&gt;: 'tensorflow/core/kernels/random_op.h'".
I tried adding "//tensorflow/core/kernels:random_ops" to srcs in BUILD but it doesn't like the dependence on //tensorflow/framework which I've found is a hardcoded rule in tf_custom_op_library. What is the supported way of filling a tensor with random numbers on the GPU?
		</comment>
		<comment id='3' author='chaaland' date='2019-12-06T23:05:53Z'>
		Closing since I ended up having to abandon this approach as it doesn't seem possible to use the FillPhiloxRandom function inside a contrib module without reimplementing the algorithm. Ended up using random uniform capabilities in array_ops to pass a random tensor directly into my op
		</comment>
		<comment id='4' author='chaaland' date='2019-12-06T23:05:54Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34103&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34103&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>