<bug id='39224' author='liupengkd' open_date='2020-05-06T11:47:14Z' closed_time='2020-06-05T06:05:25Z'>
	<summary>Use tf.data and tf.keras in multitasking (each task uses a different custom loss)</summary>
	<description>
System information

OS Platform and Distribution : Linux Ubuntu 16.04
TensorFlow installed from (source or binary):binary
TensorFlow version (use command below):2.0
Python version:3.6


 I used tf.keras to build a single-input dual-output multi-task model, each output loss is customized (by inheriting tf.keras.losses.Loss).
&lt;denchmark-link:https://user-images.githubusercontent.com/15835439/81172546-069b4f80-8fd1-11ea-881a-93fecf39992f.png&gt;&lt;/denchmark-link&gt;

 Construct a data set through tf.data-(image, (label1, label2)).

&lt;denchmark-link:https://user-images.githubusercontent.com/15835439/81172981-d7d1a900-8fd1-11ea-97c9-85933f1deaa4.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/15835439/81172995-df914d80-8fd1-11ea-9852-aff980257594.png&gt;&lt;/denchmark-link&gt;


I found that the two outputs of the network were sent to the corresponding loss functions, but the corresponding label1 and label2 in tf.data were not sent to the two loss functions
	</description>
	<comments>
		<comment id='1' author='liupengkd' date='2020-05-07T07:22:15Z'>
		&lt;denchmark-link:https://github.com/liupengkd&gt;@liupengkd&lt;/denchmark-link&gt;

Can you please share simple stand alone code for us to replicate the issue or is possible share a colab gist for us to analyse the issue faced.
		</comment>
		<comment id='2' author='liupengkd' date='2020-05-07T08:07:31Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;

code like this：
&lt;denchmark-code&gt;
def test(input_shape=(None,None,3), is_training=True):                                                                                                      
     inputs = tf.keras.layers.Input(shape=input_shape) #one input                                                                                             
                                                                                                                                                          
     #Various network layers                                                                                                                                  
                                                                                                                                                         
     #two outputs                                                                                                                                            
     predict1 = ...                                                                                                                                          
     predict2 = ...                                                                                                                                          
                                                                                                                                                             
     model = tf.keras.models.Model(inputs=inputs, outputs=[predict1, preidct2])                                                                              
     model.summary()                                                                                                                                         
                                                                                                                                                             
     return model                                                                                                                                            
                                                                                                                                                             
 datas = [...]                                                                                                                                               
 def process(l):                                                                                                                                             
                                                                                                                                                       
     #Process each piece of data to get training data, label1 and label2                                                                                      
                                                                                                                                                          
                                                                                                                                                             
     return data, (label1, label2)                                                                                                                           
                                                                                                                                                             
 class loss1(tf.keras.losses.Loss):
     def __init__(self):                                                                                                                                     
         super().__init__()                                                                                                                                  
                                                                                                                                                             
     def call(self, label1, predict1):                                                                                                                       
                                                                                                                                                         
         #Processing to get loss1                                                                                                                             
         '                                                                                                                                                 
                                                                                                                                                             
         return loss1                                                                                                                                        
                                                                                                                                                             
 class loss2(tf.keras.losses.Loss):                                                                                                                          
                                                                                                                                                             
     def __init__(self):                                                                                                                                     
         super().__init__()                                                                                                                                  
                                                                                                                                                             
     def call(self, label2, predicts2):                                                                                                                      
                                                                                                                                                     
         #Processing to get loss2                                                                                                                             
                                                                                                                                                          
                                                                                                                                                             
         return loss2

                                                                                                                                                             
 train_ds = tf.data.Dataset.from_tensor_slices(datas).map(process, 8)                                                                                        
                  
 model = test()                                                                                                                                           
 model.compile(                                                                                                                                              
     optimizer=tf.keras.optimizers.SGD(learning_rate=0.001, momentum=0.9, nesterov=True),                                                                    
     loss=[loss1(), loss2()],                                                                                                                                
     loss_weights=[0.5, 1.])                                                                                                                                 
                                                                                                                                                             
                                                                                                                                                             
 model.fit(train_ds,epochs=100) 
&lt;/denchmark-code&gt;

I found that the two outputs of the network（predict1 and predict2） were sent to the corresponding loss functions, but the corresponding label1 and label2 in tf.data were not sent to the two loss functions
		</comment>
		<comment id='3' author='liupengkd' date='2020-05-07T09:21:43Z'>
		&lt;denchmark-link:https://github.com/liupengkd&gt;@liupengkd&lt;/denchmark-link&gt;

Could you please provide with indented stand alone code such that we could replicate the issue faced, i ran the code shared and &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/a5b0d3d40d416dd5dd03ce43a7a7182f/untitled166.ipynb&gt;here is the gist&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='liupengkd' date='2020-06-05T05:27:33Z'>
		&lt;denchmark-link:https://github.com/liupengkd&gt;@liupengkd&lt;/denchmark-link&gt;

Please update as per above comment
		</comment>
		<comment id='5' author='liupengkd' date='2020-06-05T06:04:56Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 I have changed another training method，not tf.keras.
		</comment>
		<comment id='6' author='liupengkd' date='2020-06-05T06:05:26Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39224&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39224&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>