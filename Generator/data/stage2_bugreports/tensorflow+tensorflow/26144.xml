<bug id='26144' author='erikchwang' open_date='2019-02-26T21:49:04Z' closed_time='2019-03-18T18:53:21Z'>
	<summary>Why deprecate tf.layers.dense?</summary>
	<description>
In the tensorflow 1.13 document of tf.layers.dense, there is a warning:
Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use keras.layers.dense instead.
I am very confused, because this function is very easy to use, and I used it very frequently. Why do you deprecate it?
By the way, I did not find the alternative “keras.layers.dense”, there is only "keras.layers.Dense"
	</description>
	<comments>
		<comment id='1' author='erikchwang' date='2019-02-26T23:42:21Z'>
		@chwang85 Thanks for finding this typo. Please use "keras.layers.Dense". Thanks!
		</comment>
		<comment id='2' author='erikchwang' date='2019-02-27T00:41:37Z'>
		
@chwang85 Thanks for finding this typo. Please use "keras.layers.Dense". Thanks!

But why deprecate tf.layers.dense()?
But why deprecate tf.layers.dense()?
But why deprecate tf.layers.dense()?
		</comment>
		<comment id='3' author='erikchwang' date='2019-02-27T00:43:09Z'>
		
@chwang85 Thanks for finding this typo. Please use "keras.layers.Dense". Thanks!

Why do not you deprecate tf.Session()?
		</comment>
		<comment id='4' author='erikchwang' date='2019-02-27T00:53:29Z'>
		It is ridiculous to deprecate tf.layers.dense()
Do you really care about the requirements of TF developers?
		</comment>
		<comment id='5' author='erikchwang' date='2019-02-27T05:17:39Z'>
		Hi @chwang85,
The plan for TensorFlow2 is, as we're doing with eager mode,  to tie state variables to python objects. The problem with tf.layers.dense is that it that it relies on hidden global state.
So from now on we're recommending people use the Object-oriented versions. But, we're not deleting dense anytime soon.
With tf2 import tensorflow.compat.v1 as tf should work for most programs that ran in TensorFlow 1.
We're working on extensive migration guides, that will be published here soon:
&lt;denchmark-link:https://github.com/tensorflow/docs/tree/master/site/en/r2/guide&gt;https://github.com/tensorflow/docs/tree/master/site/en/r2/guide&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='erikchwang' date='2019-02-27T18:34:48Z'>
		Thanks for explaining. Just one more question:
For "outputs = tf.layers.dense(inputs, units)", in the future, is it proper to change it to "outputs = tf.layers.Dense(units).apply(inputs)"?
		</comment>
		<comment id='7' author='erikchwang' date='2019-02-27T18:36:11Z'>
		layers.Dense(256)(inputs)
		</comment>
		<comment id='8' author='erikchwang' date='2019-02-27T18:39:31Z'>
		thanks. but this still seems weird. DL models is already very complicated, why use oop to make it more complicated?
		</comment>
		<comment id='9' author='erikchwang' date='2019-02-27T18:45:37Z'>
		My feeling is that it makes it less complicated: It gives a clear separation defining my network, and running my network, the magic re-use in the old "function" style is tricky, at best. OOP also gives a clear answer to the question of "where is the state for this layer?": it's in the object.
And @chwang85, could you send us a patch PR for the typo?
		</comment>
		<comment id='10' author='erikchwang' date='2019-02-27T18:54:49Z'>
		OK.
But why use "tf.keras.layers.Dense" rather than "tf.layers.Dense" to replace "tf.layers.dense"? Does that mean "tf.layers.Dense" will also be deprecated in the future?
		</comment>
		<comment id='11' author='erikchwang' date='2019-02-27T20:19:22Z'>
		tf.keras.layers.Dense and tf.layers.Dense will both be the same object.
		</comment>
		<comment id='12' author='erikchwang' date='2019-03-18T18:53:21Z'>
		Obsoleted by &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/26844&gt;#26844&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='erikchwang' date='2019-11-20T07:07:32Z'>
		Awful apis, awful warning, awful backward compatibility.
		</comment>
		<comment id='14' author='erikchwang' date='2019-12-09T14:07:45Z'>
		

@chwang85 Thanks for finding this typo. Please use "keras.layers.Dense". Thanks!

Why do not you deprecate tf.Session()?

Aha, tf.Session() is no longer needed in eager mode, which is the default mode of tf 2.0.
		</comment>
		<comment id='15' author='erikchwang' date='2020-03-30T14:41:01Z'>
		How does this affect Tensorflow.js?
		</comment>
	</comments>
</bug>