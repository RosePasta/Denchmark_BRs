<bug id='7414' author='markvdw' open_date='2017-02-10T13:41:55Z' closed_time='2017-03-03T23:42:48Z'>
	<summary>extract_image_patches gradient only works with float32</summary>
	<description>
tf.extract_image_patches() works well with tf.float64, however its gradient requires that tf.float32s are passed. Otherwise tf.gradients() raises:
TypeError: Input 'b' of 'SparseTensorDenseMatMul' Op has type float64 that does not match type float32 of argument 'a_values'..
Here is an example of the offending code. If I take the gradient with respect to X without casting, I get the error above.
&lt;denchmark-code&gt;castX = tf.cast(X, tf.float32, name="castX")  # This is needed to get it working
patches = tf.extract_image_patches(tf.reshape(castX, [-1, self.img_size[0], self.img_size[1], 1], name="rX"),
                                   [1, self.patch_size[0], self.patch_size[1], 1],
                                   [1, 1, 1, 1],
                                   [1, 1, 1, 1], "VALID")
shp = tf.shape(patches)
return tf.cast(tf.reshape(patches, [shp[0], shp[1] * shp[2], shp[3]]), float_type)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='markvdw' date='2017-02-10T17:04:29Z'>
		The problem appears to be this line: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/array_grad.py#L641&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/array_grad.py#L641&lt;/denchmark-link&gt;
.  It explicitly sets a dtype to be .  Can you change  to  and see if it solves your problem?
		</comment>
		<comment id='2' author='markvdw' date='2017-03-03T23:42:48Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='3' author='markvdw' date='2019-03-26T09:51:33Z'>
		I faced the same issue with calculating gradients for a graph containing extract_image_patches, using TF 1.10.0.
After upgrading TF to 1.13.0, the error stack is slightly different but fundamentally the problem remains the same:
&lt;denchmark-code&gt;[0:01:29] No OpKernel was registered to support Op 'SparseTensorDenseMatMul' used by node gradients/ExtractImagePatches_3_grad/SparseTensorDenseMatMul/SparseTensorDenseMatMul (defined at /usr/local/lib/python3.5/dist-packages/keras/backend/tensorflow_backend.py:2757) with these attrs: [Tindices=DT_INT64, T=DT_HALF, _class=["loc:@ExtractImagePatches_3"], adjoint_a=false, adjoint_b=false]
Registered devices: [CPU, GPU, XLA_CPU, XLA_GPU]
Registered kernels:
  device='CPU'; T in [DT_COMPLEX128]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_COMPLEX128]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_COMPLEX64]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_COMPLEX64]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_INT32]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_INT32]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_DOUBLE]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_DOUBLE]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_FLOAT]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_FLOAT]; Tindices in [DT_INT64]
  device='GPU'; T in [DT_FLOAT]; Tindices in [DT_INT32]
  device='GPU'; T in [DT_FLOAT]; Tindices in [DT_INT64]

	 [[node gradients/ExtractImagePatches_3_grad/SparseTensorDenseMatMul/SparseTensorDenseMatMul (defined at /usr/local/lib/python3.5/dist-packages/keras/backend/tensorflow_backend.py:2757) ]]

Caused by op 'gradients/ExtractImagePatches_3_grad/SparseTensorDenseMatMul/SparseTensorDenseMatMul', ...
&lt;/denchmark-code&gt;

This issue happens while running official NVidia docker container on a Tesla V100. Code runs fine in single precision, only crashes with half precision.
		</comment>
		<comment id='4' author='markvdw' date='2020-05-27T03:06:04Z'>
		
I faced the same issue with calculating gradients for a graph containing extract_image_patches, using TF 1.10.0.
After upgrading TF to 1.13.0, the error stack is slightly different but fundamentally the problem remains the same:
[0:01:29] No OpKernel was registered to support Op 'SparseTensorDenseMatMul' used by node gradients/ExtractImagePatches_3_grad/SparseTensorDenseMatMul/SparseTensorDenseMatMul (defined at /usr/local/lib/python3.5/dist-packages/keras/backend/tensorflow_backend.py:2757) with these attrs: [Tindices=DT_INT64, T=DT_HALF, _class=["loc:@ExtractImagePatches_3"], adjoint_a=false, adjoint_b=false]
Registered devices: [CPU, GPU, XLA_CPU, XLA_GPU]
Registered kernels:
  device='CPU'; T in [DT_COMPLEX128]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_COMPLEX128]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_COMPLEX64]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_COMPLEX64]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_INT32]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_INT32]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_DOUBLE]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_DOUBLE]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_FLOAT]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_FLOAT]; Tindices in [DT_INT64]
  device='GPU'; T in [DT_FLOAT]; Tindices in [DT_INT32]
  device='GPU'; T in [DT_FLOAT]; Tindices in [DT_INT64]

	 [[node gradients/ExtractImagePatches_3_grad/SparseTensorDenseMatMul/SparseTensorDenseMatMul (defined at /usr/local/lib/python3.5/dist-packages/keras/backend/tensorflow_backend.py:2757) ]]

Caused by op 'gradients/ExtractImagePatches_3_grad/SparseTensorDenseMatMul/SparseTensorDenseMatMul', ...

This issue happens while running official NVidia docker container on a Tesla V100. Code runs fine in single precision, only crashes with half precision.

I come across the same issue as yours when I use tf.image.extract_patches. Do you have ways to solve it?
		</comment>
	</comments>
</bug>