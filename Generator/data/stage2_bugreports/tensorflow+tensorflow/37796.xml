<bug id='37796' author='ZhiliWang' open_date='2020-03-22T10:14:23Z' closed_time='2020-03-23T01:32:53Z'>
	<summary>Problem with Custom Metrics Even for H5 models</summary>
	<description>
These are how I defined and saved the custom metric fbeta and vgg model on colab:
&lt;denchmark-code&gt;from sklearn.model_selection import train_test_split
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential, Model
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten
from keras.layers import Dropout
from keras.optimizers import SGD
from keras import backend
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;def fbeta(y_true, y_pred, beta=2):
    y_pred = backend.clip(y_pred, 0, 1)
    tp = backend.sum(backend.round(backend.clip(y_true * y_pred, 0, 1)), axis=1)
    fp = backend.sum(backend.round(backend.clip(y_pred - y_true, 0, 1)), axis=1)
    fn = backend.sum(backend.round(backend.clip(y_true - y_pred, 0, 1)), axis=1)
    p = tp / (tp + fp + backend.epsilon())
    r = tp / (tp + fn + backend.epsilon())
    # calculate fbeta, averaged across each class
    fbeta_score = backend.mean((1 + beta ** 2) * (p * r) / ((beta ** 2) * p + r + backend.epsilon()))
    return fbeta_score
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;def vgg16_model(in_shape=(128, 128, 3), out_shape=17):
    # load model
    model = VGG16(include_top=False, input_shape=in_shape)
    # mark loaded layers as not trainable
    for layer in model.layers:
        layer.trainable = False
    # allow last vgg block to be trainable
    model.get_layer('block5_conv1').trainable = True
    model.get_layer('block5_conv2').trainable = True
    model.get_layer('block5_conv3').trainable = True
    model.get_layer('block5_pool').trainable = True
    # add new classifier layers
    flat1 = Flatten()(model.layers[-1].output)
    class1 = Dense(128, activation='relu', kernel_initializer='he_uniform')(flat1)
    output = Dense(out_shape, activation='sigmoid')(class1)
    # define new model
    model = Model(inputs=model.inputs, outputs=output)
    # compile model
    opt = SGD(lr=0.01, momentum=0.9)
    model.compile(optimizer=opt, loss='binary_crossentropy', metrics=[fbeta])
    return model
&lt;/denchmark-code&gt;

Create model and save in google drive:
&lt;denchmark-code&gt;model.save('model.h5')
model_file = drive.CreateFile({'title' : 'model.h5'})
model_file.SetContentFile('model.h5')
model_file.Upload()
print("Model is saved.")
drive.CreateFile({'id': model_file.get('id')})
print("Model downloaded to google drive.")
&lt;/denchmark-code&gt;

The error happened when I load the model with the following:
&lt;denchmark-code&gt;from pandas import read_csv
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.models import load_model
model = load_model('path/')  # i also tried "model = load_model('path/', {'F-Beta': fbeta})"
result = model.predict(img)
print(result[0])
&lt;/denchmark-code&gt;

Got this error:
ValueError: Unknown metric function:fbeta
I believe all packages and paths are imported and defined correctly. Models were saved correctly on google drive as well. I tried all 3 other posts (&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/33646&gt;#33646&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/33648&gt;#33648&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/36390&gt;#36390&lt;/denchmark-link&gt;
 ) regarding similar customized metric issues, and tried all the potential fixes and get-arounds, unfortunately none of them worked. I am surprised that some community members claimed that .h5 models should not have this issue though.
	</description>
	<comments>
		<comment id='1' author='ZhiliWang' date='2020-03-22T12:30:14Z'>
		&lt;denchmark-link:https://github.com/ZhiliWang&gt;@ZhiliWang&lt;/denchmark-link&gt;
 , Keras does not save custom object while saving model. So you need to pass  parameter to . Before that you need to define custom metrics.
&lt;denchmark-code&gt; def fbeta(y_true, y_pred, beta=2):
    y_pred = backend.clip(y_pred, 0, 1)
    tp = backend.sum(backend.round(backend.clip(y_true * y_pred, 0, 1)), axis=1)
    fp = backend.sum(backend.round(backend.clip(y_pred - y_true, 0, 1)), axis=1)
    fn = backend.sum(backend.round(backend.clip(y_true - y_pred, 0, 1)), axis=1)
    p = tp / (tp + fp + backend.epsilon())
    r = tp / (tp + fn + backend.epsilon())
    # calculate fbeta, averaged across each class
    fbeta_score = backend.mean((1 + beta ** 2) * (p * r) / ((beta ** 2) * p + r + backend.epsilon()))
    return fbeta_score

 from keras.models import load_model
 model = load_model('/content/drive/My Drive/model.h5',custom_objects={'fbeta':fbeta})
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='ZhiliWang' date='2020-03-22T19:46:10Z'>
		
@ZhiliWang , Keras does not save custom object while saving model. So you need to pass custom_objects parameter to load_model. Before that you need to define custom metrics.
 def fbeta(y_true, y_pred, beta=2):
    y_pred = backend.clip(y_pred, 0, 1)
    tp = backend.sum(backend.round(backend.clip(y_true * y_pred, 0, 1)), axis=1)
    fp = backend.sum(backend.round(backend.clip(y_pred - y_true, 0, 1)), axis=1)
    fn = backend.sum(backend.round(backend.clip(y_true - y_pred, 0, 1)), axis=1)
    p = tp / (tp + fp + backend.epsilon())
    r = tp / (tp + fn + backend.epsilon())
    # calculate fbeta, averaged across each class
    fbeta_score = backend.mean((1 + beta ** 2) * (p * r) / ((beta ** 2) * p + r + backend.epsilon()))
    return fbeta_score

 from keras.models import load_model
 model = load_model('/content/drive/My Drive/model.h5',custom_objects={'fbeta':fbeta})


Thank you! I tried that and it did not work (and i posted definition of fbeta as well). Do I have to define custom metrics as a class?
		</comment>
		<comment id='3' author='ZhiliWang' date='2020-03-23T01:32:52Z'>
		I figured it out. Thank you everyone!
		</comment>
		<comment id='4' author='ZhiliWang' date='2020-03-23T01:32:54Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37796&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37796&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='ZhiliWang' date='2020-03-23T03:55:29Z'>
		&lt;denchmark-link:https://github.com/ZhiliWang&gt;@ZhiliWang&lt;/denchmark-link&gt;
, I have successfully saved and loaded model as i mentioned above. For your reference link of gist is &lt;denchmark-link:https://gist.github.com/khimraj/8741a7012ac9bbd675ef0ea2fb9b778b&gt;here&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>