<bug id='36146' author='ethereon' open_date='2020-01-23T01:51:21Z' closed_time='2020-04-12T17:19:47Z'>
	<summary>tf.function and tf.nest break for valid Mapping instances</summary>
	<description>
 makes invalid assumptions about arguments that are  instances. In general, there are no requirements for  instances to have constructors that accept  initializers, &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/v2.1.0/tensorflow/python/util/nest.py#L145&gt;as assumed here&lt;/denchmark-link&gt;
.
This leads to cryptic exceptions when used with perfectly valid Mapping subclasses such as this one:
class CustomMapping(Mapping):

  def __init__(self, **kwargs):
    self.mapping = kwargs
  
  def __getitem__(self, key):
    return self.mapping[key]
  
  def __iter__(self):
    return iter(self.mapping)

  def __len__(self):
    return len(self.mapping)
See this &lt;denchmark-link:https://colab.research.google.com/drive/1sIbvyPVtQexCWqVO7QD3KlY7PoLdPeKq&gt;Colab notebook for an example&lt;/denchmark-link&gt;
.
	</description>
	<comments>
		<comment id='1' author='ethereon' date='2020-01-23T10:01:52Z'>
		Issue replicating in &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/52d668ef566842781e293594fabf27ef/36146.ipynb&gt;tf-nightly.&lt;/denchmark-link&gt;
 Thanks.
		</comment>
		<comment id='2' author='ethereon' date='2020-01-23T21:44:02Z'>
		It looks like tf.nest is overly permissive with Mapping subclasses, because the contract of Mapping does not seem to specify an interface for constructors. Users may accept key-value pairs, **kwargs or just about anything else and they'd still have a valid Mapping. Moreover, detecting how to properly use that constructor is extremely difficult in Python.
The correct solution is either to only support dict and OrderedDict (treating everything else as opaque objects), or to explicitly require a certain signature for constructor (right now, that is: "it must accept key-value pairs").
At any rate, this limitation should be documented and a best-effort to detect errors could be made by catching anything exception that the constructor raises and adding a hint about this.
For future readers, the workaround is to provide a constructor that accepts key-value pairs, similar to &lt;denchmark-link:https://docs.python.org/3/library/stdtypes.html#dict&gt;dict&lt;/denchmark-link&gt;
's.
		</comment>
		<comment id='3' author='ethereon' date='2020-01-24T08:19:49Z'>
		Hey! I would like to work on this. Could you guide me?
		</comment>
		<comment id='4' author='ethereon' date='2020-01-24T12:48:21Z'>
		Sure, here are a few pointers -
First, the documentation of all  methods inside &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r2.1/tensorflow/python/util/nest.py&gt;tf.nest&lt;/denchmark-link&gt;
 needs to be brought to date and clarify what is a "structure". Some entries mention that you can have dicts, others do not. I think the module documentation should clarify that. The docstrings in there are used to generate the &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/nest&gt;public docs&lt;/denchmark-link&gt;
.
Second, &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/util/util.cc#L216&gt;IsMappingHelper&lt;/denchmark-link&gt;
 that verifies for supported types should check for  rather than just . It should probably be renamed to  on this occasion. The reason for that is because we need to know how to construct new mappings of the same type and the Mapping interface doesn't standardize that. See &lt;denchmark-link:https://docs.python.org/3/library/collections.abc.html&gt;the Python reference&lt;/denchmark-link&gt;
 for more details.
Third, the error messages need to be improved. &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/v2.1.0/tensorflow/python/util/nest.py#L145&gt;the code of _sequence_like&lt;/denchmark-link&gt;
 that attempts to reconstruct  objects should catch exceptions and raise a more informative one (something like ""). Also, &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/func_graph.py#L897&gt;the code of func_graph_from_py_func&lt;/denchmark-link&gt;
 should again catch exceptions and add more information (something like "").
I hope this helps! As a general guidance, I recommend sending multiple small PRs instead of one big change, to make them easier to review.
		</comment>
		<comment id='5' author='ethereon' date='2020-01-24T16:54:59Z'>
		Hey! Thanks for the input.

First, the documentation of all @tf_export methods inside tf.nest needs to be brought to date and clarify what is a "structure". Some entries mention that you can have dicts, others do not. I think the module documentation should clarify that. The docstrings in there are used to generate the public docs.

Regarding this if am not wrong a couple of the function's documentation need to updated for which I should create a separate PR is what you are suggesting and to do the same for the remaining two broken down problems?
		</comment>
		<comment id='6' author='ethereon' date='2020-01-24T17:33:36Z'>
		I'd start with everything in one PR (docstring changes and small code changes), and if you end up changing lots of code, break it down into more pieces.
		</comment>
		<comment id='7' author='ethereon' date='2020-01-24T17:47:48Z'>
		&lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 I've create a PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/36186&gt;#36186&lt;/denchmark-link&gt;
 addressing this. Could you please review?
		</comment>
		<comment id='8' author='ethereon' date='2020-02-07T08:04:05Z'>
		I would like to test tensorflow locally from the github repo, how do I set that up for python?
		</comment>
		<comment id='9' author='ethereon' date='2020-02-07T13:54:39Z'>
		&lt;denchmark-link:https://github.com/namedtoaster&gt;@namedtoaster&lt;/denchmark-link&gt;
 see the guide: &lt;denchmark-link:https://www.tensorflow.org/install/source&gt;https://www.tensorflow.org/install/source&lt;/denchmark-link&gt;
; you may want to skip to the &lt;denchmark-link:https://www.tensorflow.org/install/source#docker_linux_builds&gt;Docker section&lt;/denchmark-link&gt;
 for a ready-made setup.
		</comment>
		<comment id='10' author='ethereon' date='2020-02-12T03:15:29Z'>
		&lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 I downloaded tensorflow from the most current repo and built using the instructions you linked to. When I try to run the code from the notebook (or really any simple tensorflow command), I get the following error.
Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.2 AVX AVX2 FMA
Is there a way to suppress those features from my CPU so I can run tf? Or do I have to rebuild a new binary that disables those features?
Edit: I think I found some possible answers. I'll come back when I've exhausted my attempts
		</comment>
		<comment id='11' author='ethereon' date='2020-02-12T15:19:52Z'>
		&lt;denchmark-link:https://github.com/namedtoaster&gt;@namedtoaster&lt;/denchmark-link&gt;
 You can safely ignore that warning, but otherwise you want a binary that is built with those features enabled. Try to see if you can rebuild it with these bazel options: 
		</comment>
		<comment id='12' author='ethereon' date='2020-02-13T00:06:29Z'>
		&lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 thanks for the info. I stand corrected on my last post, I am able to do a simple tensorflow command with the original binary installed. When I tried to re-install with the optimizations I got some compiler errors that I'll try to fix at a later time. I did what you said but I get this output:
clang: error: unsupported option '--config=opt'
My bigger confusion right now is that when I try to run the code from the notebook I get an error about using the wrong number of arguments:
2020-02-12 15:50:38.623392: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.2 AVX AVX2 FMA Traceback (most recent call last): File "/Users/----/PycharmProjects/tensorflow_dev/test.py", line 27, in &lt;module&gt; test_tf_function(CustomMapping(theta=3.1415)) File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow_core/python/eager/def_function.py", line 576, in __call__ result = self._call(*args, **kwds) File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow_core/python/eager/def_function.py", line 623, in _call self._initialize(args, kwds, add_initializers_to=initializers) File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow_core/python/eager/def_function.py", line 505, in _initialize *args, **kwds)) File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow_core/python/eager/function.py", line 2440, in _get_concrete_function_internal_garbage_collected graph_function, _, _ = self._maybe_define_function(args, kwargs) File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow_core/python/eager/function.py", line 2771, in _maybe_define_function graph_function = self._create_graph_function(args, kwargs) File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow_core/python/eager/function.py", line 2661, in _create_graph_function capture_by_value=self._capture_by_value), File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow_core/python/framework/func_graph.py", line 898, in func_graph_from_py_func args, arg_names, flat_shapes=arg_shapes) File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow_core/python/framework/func_graph.py", line 1132, in _get_defun_inputs_from_args args, names, structure=args, flat_shapes=flat_shapes) File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow_core/python/framework/func_graph.py", line 1188, in _get_defun_inputs arg_value = nest.map_structure(_get_composite_tensor_spec, arg_value) File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow_core/python/util/nest.py", line 600, in map_structure expand_composites=expand_composites) File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow_core/python/util/nest.py", line 535, in pack_sequence_as return _pack_sequence_as(structure, flat_sequence, expand_composites) File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow_core/python/util/nest.py", line 499, in _pack_sequence_as return sequence_fn(structure, packed) File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow_core/python/util/nest.py", line 145, in _sequence_like return instance_type((key, result[key]) for key in instance) TypeError: __init__() takes exactly 1 argument (2 given)
I'm looking into the error right now. I may have an incorrect understanding of kwargs
		</comment>
		<comment id='13' author='ethereon' date='2020-02-13T01:29:24Z'>
		I think the error you see is expected - it's the bug described in the OP.
		</comment>
		<comment id='14' author='ethereon' date='2020-02-13T01:31:20Z'>
		For the instruction set warning, try specifying  as well. I came across this page where the author seemed to successfully use these options: &lt;denchmark-link:https://gist.github.com/Brainiarc7/6d6c3f23ea057775b72c52817759b25c&gt;https://gist.github.com/Brainiarc7/6d6c3f23ea057775b72c52817759b25c&lt;/denchmark-link&gt;

		</comment>
		<comment id='15' author='ethereon' date='2020-02-14T01:45:19Z'>
		&lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 that makes sense. I should've noticed that -- I will check out that link and give it a try. Thanks
		</comment>
		<comment id='16' author='ethereon' date='2020-02-17T02:11:44Z'>
		Hello I thought this issue was solved but it's been open for quite some time.
I would like to contribute if contributions are still being accepted.
		</comment>
		<comment id='17' author='ethereon' date='2020-02-17T12:55:27Z'>
		Hey &lt;denchmark-link:https://github.com/Joey155&gt;@Joey155&lt;/denchmark-link&gt;
 ! PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/36186&gt;#36186&lt;/denchmark-link&gt;
 has been opened regarding the same.
		</comment>
		<comment id='18' author='ethereon' date='2020-03-20T10:49:27Z'>
		&lt;denchmark-link:https://github.com/ethereon&gt;@ethereon&lt;/denchmark-link&gt;
 I guess the issue can be closed since the PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/36186&gt;#36186&lt;/denchmark-link&gt;
 has been merged.
		</comment>
		<comment id='19' author='ethereon' date='2020-03-20T20:43:00Z'>
		I believe the described issue still exists. With PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/36186&gt;#36186&lt;/denchmark-link&gt;
 , it produces a warning (with a typo) before failing with the same exception as before
&lt;denchmark-code&gt;WARNING:tensorflow:Mapping types may not work well with tf.nest. Preferusing MutableMapping for &lt;class '__main__.CustomMapping'&gt;
...
TypeError: __init__() takes 1 positional argument but 2 were given
&lt;/denchmark-code&gt;

Indeed, even as a workaround, it's not immediately clear that the recommendation should be to adopt MutableMapping, which seems like a stronger requirement than just accepting (key, value) pairs in the constructor...
		</comment>
		<comment id='20' author='ethereon' date='2020-03-25T05:44:18Z'>
		Oops. My bad didn't notice that.
		</comment>
		<comment id='21' author='ethereon' date='2020-04-02T16:47:05Z'>
		&lt;denchmark-link:https://github.com/punndcoder28&gt;@punndcoder28&lt;/denchmark-link&gt;
 will you update your fix as per &lt;denchmark-link:https://github.com/ethereon&gt;@ethereon&lt;/denchmark-link&gt;
's feedback or shall I?
		</comment>
		<comment id='22' author='ethereon' date='2020-04-02T21:44:05Z'>
		&lt;denchmark-link:https://github.com/ethereon&gt;@ethereon&lt;/denchmark-link&gt;
 I'm not clear on what the desired behavior would be that you would consider a "fix"? Is it a more clear error message on the exception that says something like "Map must have a (key, value) constructor" instead of "TypeError: () takes 1 positional argument but 2 were given"?
It seems the example code in the notebook should indeed fail because the custom map doesn't meet the tf.nest's requirement of having a (key, value) constructor. We just need a better error message. Is that correct? Or does tf.nest need to change to accommodate that type of map?
		</comment>
		<comment id='23' author='ethereon' date='2020-04-03T03:15:24Z'>
		I will get on it today and try to fix. If I am unable to do so, you could take over. Also, I had the same doubt as &lt;denchmark-link:https://github.com/tonytonev&gt;@tonytonev&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='24' author='ethereon' date='2020-04-03T13:53:03Z'>
		The **kwargs mechanics only work with maps that have string keys. Since tf.nest cannot make any assumption about the type of the keys, I think it requires a constructor with on positional argument. So, improving the error message seems like the right path forward.
		</comment>
		<comment id='25' author='ethereon' date='2020-04-03T16:00:49Z'>
		&lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 How can I improve the error message? Any suggestions would be helpful.
		</comment>
		<comment id='26' author='ethereon' date='2020-04-03T16:23:44Z'>
		&lt;denchmark-link:https://github.com/punndcoder28&gt;@punndcoder28&lt;/denchmark-link&gt;
 How about "Mapping must have a (key, value) constructor". This should be an actual exception rather than just a warning, since it is a fatal error that will throw "TypeError: init() takes 1 positional argument but 2 were given" anyway. &lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 do you agree?
		</comment>
		<comment id='27' author='ethereon' date='2020-04-03T16:36:42Z'>
		The error message SGTM, but the warning message is separate. I do want to discourage using Mapping subclasses in favor of MutableMapping, for the reason that follows. It's unfortunate that Mapping subtypes cannot be robustly supported.
To actually raise an error, more checks need to be added: first you need to find the constructor of the type, then you need to check its argspec and count the positional arguments. Even so, we can only check that the constructor takes a positional arg and will have no idea whether that constructor expects it to be a key-value list (it might expect it to be a dict instead). So the error will not be 100% robust.
Alternatively, you could catch exceptions raised while calling the constructor and re-raise them with a helper message, something like: "Error rebuilding custom mapping. Note that it must accept a single positional argument representing an iterable of key-value pairs, in addition to self. Cause: ".
		</comment>
		<comment id='28' author='ethereon' date='2020-04-03T16:46:32Z'>
		&lt;denchmark-link:https://github.com/punndcoder28&gt;@punndcoder28&lt;/denchmark-link&gt;
 Do you mind if I submit this as my first pull request? You already had your changes accepted  .
		</comment>
		<comment id='29' author='ethereon' date='2020-04-03T16:52:22Z'>
		Sure. Go ahead &lt;denchmark-link:https://github.com/tonytonev&gt;@tonytonev&lt;/denchmark-link&gt;
.
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


Sent from my iPhone
 On 03-Apr-2020, at 10:16 PM, Tony Tonev ***@***.***&gt; wrote:

 ﻿
 @punndcoder28 Do you mind if I submit this as my first pull request? You already had your changes accepted 😄 .

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub, or unsubscribe.


		</comment>
		<comment id='30' author='ethereon' date='2020-04-05T23:01:29Z'>
		Thanks, I'm working on getting it to build locally so I can run tests, and I'll submit a PR soon.
		</comment>
		<comment id='31' author='ethereon' date='2020-04-06T20:32:51Z'>
		&lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 I sent a pull request &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/38283#pullrequestreview-388593812&gt;#38283 (review)&lt;/denchmark-link&gt;

		</comment>
		<comment id='32' author='ethereon' date='2020-04-12T16:14:01Z'>
		The fix has been merged. I think this can be closed.
		</comment>
		<comment id='33' author='ethereon' date='2020-04-12T17:19:48Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36146&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36146&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>