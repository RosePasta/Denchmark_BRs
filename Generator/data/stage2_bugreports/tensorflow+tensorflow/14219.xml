<bug id='14219' author='MadWombat' open_date='2017-11-03T16:14:33Z' closed_time='2018-04-03T01:07:13Z'>
	<summary>tf.layers.Network is in the documentation, but not the library</summary>
	<description>
Here's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): OS X 10.12.6
TensorFlow installed from (source or binary): source, latest 1.4 branch
TensorFlow version (use command below): v1.4.0-rc1-12-gd752244fba 1.4.0
Python version: 3.6.3
Bazel version (if compiling from source): 0.7.0
GCC/Compiler version (if compiling from source): Apple LLVM version 9.0.0 (clang-900.0.38)
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce:

see below
You can collect some of this information using our environment capture script:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&lt;/denchmark-link&gt;

You can obtain the TensorFlow version with
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

The 1.4 version of the documentation mentions tf.layers.Network in its examples of using the new function based layers (here is a link to the specific doc, &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/layers/Input&gt;https://www.tensorflow.org/api_docs/python/tf/layers/Input&lt;/denchmark-link&gt;
), so all you have to do is copy/paste the example code and run it.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

the most basic code to verify is
&lt;denchmark-code&gt;import tensorflow as tf
print(tf.layers.Network)
&lt;/denchmark-code&gt;

on my system this results in
&lt;denchmark-code&gt;AttributeError: module 'tensorflow.python.layers.layers' has no attribute 'Network'
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='MadWombat' date='2017-11-03T23:13:05Z'>
		Thanks for pointing this out. This is indeed a bug, we decided to not export tf.layers.Network as a symbol for the 1.4 release, but forgot to hide tf.layers.Input as well.
We probably will introduce a  by 1.5 or 1.6. ( &lt;denchmark-link:https://github.com/josh11b&gt;@josh11b&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
 ?)
Sorry for the confusion.
		</comment>
		<comment id='2' author='MadWombat' date='2017-11-04T04:12:08Z'>
		Thanks for the quick reply. Not sure about it, but it seems that without the tf.layers.Network and tf.layers.Input, the rest of the function based layers have a rather limited use. Anyway, looking forward to the future releases.
		</comment>
		<comment id='3' author='MadWombat' date='2017-11-04T19:57:33Z'>
		&lt;denchmark-link:https://github.com/MadWombat&gt;@MadWombat&lt;/denchmark-link&gt;
 : re "the rest of the function based layers have limited use" - the function based layers are in fact pretty extensively used already (such as in the &lt;denchmark-link:https://github.com/tensorflow/models/tree/master/official&gt;models repository&lt;/denchmark-link&gt;
).
The existing object oriented layers provide a way to structure your models (similar to Keras) as objects, even without the  class. In fact, we encourage that to make models run efficiently even when &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/eager/python/g3doc/guide.md#using-keras-and-the-layers-api&gt;eager execution is enabled&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='MadWombat' date='2017-11-05T20:48:28Z'>
		I guess I did not phrase it right. I meant the new style function based layers. The ones that return functions rather than ops tf.layers.Dense rather than tf.layers.dense. The models seem to be using the old style ones and without tf.layers.Network, I am not sure how useful the new style layers are.
		</comment>
		<comment id='5' author='MadWombat' date='2017-12-20T19:19:45Z'>
		It has been 14 days with no activity and the awaiting tensorflower label was assigned. Please update the label and/or status accordingly.
		</comment>
		<comment id='6' author='MadWombat' date='2018-01-04T19:10:37Z'>
		It has been 14 days with no activity and the awaiting tensorflower label was assigned. Please update the label and/or status accordingly.
		</comment>
		<comment id='7' author='MadWombat' date='2018-01-23T23:16:28Z'>
		A member of the TensorFlow organization has replied after the stat:awaiting tensorflower label was applied.
		</comment>
		<comment id='8' author='MadWombat' date='2018-01-26T00:38:43Z'>
		Ping &lt;denchmark-link:https://github.com/josh11b&gt;@josh11b&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
, see comment by &lt;denchmark-link:https://github.com/asimshankar&gt;@asimshankar&lt;/denchmark-link&gt;
 on Nov 3, 2017.
		</comment>
		<comment id='9' author='MadWombat' date='2018-02-09T19:14:08Z'>
		Nagging Awaiting TensorFlower: It has been 14 days with no activity and the awaiting tensorflower label was assigned. Please update the label and/or status accordingly.
		</comment>
		<comment id='10' author='MadWombat' date='2018-03-03T07:56:31Z'>
		Nagging Awaiting TensorFlower: It has been 14 days with no activity and the awaiting tensorflower label was assigned. Please update the label and/or status accordingly.
		</comment>
		<comment id='11' author='MadWombat' date='2018-03-03T17:39:34Z'>
		tf.layers.Dense is the name of a class (capitalized means class in Python conventions), and so calling tf.layers.Dense is creating an object, which is what Asim is referring to as the object-oriented layers API. I think there are already some examples using them, and more on the way, &lt;denchmark-link:https://github.com/asimshankar&gt;@asimshankar&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
 would know more.
		</comment>
		<comment id='12' author='MadWombat' date='2018-04-03T01:00:51Z'>
		/CC &lt;denchmark-link:https://github.com/MarkDaoust&gt;@MarkDaoust&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='MadWombat' date='2018-04-03T01:07:12Z'>
		Hello,
The Network class has been removed (that's why it wasn't part of the public API).
We recommend you use the Model class: tf.keras.Model, which has the same functionality.
You can use the Model class with both layers from tf.layers and tf.keras.layers. tf.layers is a subset of tf.keras.layers. We recommend you use tf.keras.layers.
		</comment>
	</comments>
</bug>