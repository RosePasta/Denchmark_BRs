<bug id='26029' author='ageron' open_date='2019-02-23T08:46:09Z' closed_time='2019-08-07T08:21:58Z'>
	<summary>super() does not work within a tf.function</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Mac OS X 10.13.6
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
N/A
TensorFlow installed from (source or binary):
binary
TensorFlow version (use command below):
tf.version.VERSION == '2.0.0-dev20190222'
tf.version.GIT_VERSION == 'v1.12.0-8615-g74016a0d51'
Python version:
3.6.8
Bazel version (if compiling from source):
N/A
GCC/Compiler version (if compiling from source):
N/A
CUDA/cuDNN version:
N/A
GPU model and memory:
N/A

Describe the current behavior
When I call a method decorated by @tf.function, I get an error if it uses super(): RuntimeError: super(): __class__ cell not found.
Describe the expected behavior
I expect no error, @tf.function should ensure that super() works normally.
Code to reproduce the issue
import tensorflow as tf

class A:
    def foo(self, x):
        return x + 1

class B(A):
    @tf.function
    def bar(self, x):
        return super().foo(x)

b = B()
b.bar(5) # raises RuntimeException
Other info / logs
I can work around this issue in multiple ways:
The easiest is to replace super() with super(B, self). But it's 2019, who still uses Python 2 style? ;-)
Or else, I can work around the issue by using autograph=False. This shows that the issue is linked to autograph not recognizing super(), only super(B, self):
import tensorflow as tf

class A:
    def foo(self, x):
        return x + 1

class B(A):
    @tf.function(autograph=False)
    def bar(self, x):
        return super().foo(x)

b = B()
b.bar(5) # okay, returns 6
I can also work around this issue by calling super() outside of the method, e.g., in the constructor:
import tensorflow as tf

class A:
    def foo(self, x):
        return x + 1

class B(A):
    def __init__(self):
        self._super = super()
    @tf.function
    def bar(self, x):
        return self._super.foo(x)

b = B()
b.bar(5) # okay, returns 6
I tried to work around it using a tf.init_scope(), but I could not get it to work, not sure why.
Here is the full stacktrace for the first example code:
RuntimeError                              Traceback (most recent call last)
&lt;ipython-input-2-db8198c32b2e&gt; in &lt;module&gt;
      9
     10 b = B()
---&gt; 11 b.bar(5)

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/eager/def_function.py in __call__(self, *args, **kwds)
    424     # This is the first call of __call__, so we have to initialize.
    425     initializer_map = {}
--&gt; 426     self._initialize(args, kwds, add_initializers_to=initializer_map)
    427     if self._created_variables:
    428       try:

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/eager/def_function.py in _initialize(self, args, kwds, add_initializers_to)
    368     self._concrete_stateful_fn = (
    369         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access
--&gt; 370             *args, **kwds))
    371
    372     def invalid_creator_scope(*unused_args, **unused_kwds):

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/eager/function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)
   1278     if self._input_signature:
   1279       args, kwargs = None, None
-&gt; 1280     graph_function, _, _ = self._maybe_define_function(args, kwargs)
   1281     return graph_function
   1282

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/eager/function.py in _maybe_define_function(self, args, kwargs)
   1545           or call_context_key not in self._function_cache.missed):
   1546         self._function_cache.missed.add(call_context_key)
-&gt; 1547         graph_function = self._create_graph_function(args, kwargs)
   1548         self._function_cache.primary[cache_key] = graph_function
   1549         return graph_function, args, kwargs

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/eager/function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)
   1477             arg_names=arg_names,
   1478             override_flat_arg_shapes=override_flat_arg_shapes,
-&gt; 1479             capture_by_value=self._capture_by_value),
   1480         self._function_attributes)
   1481

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/framework/func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)
    636         tf_decorator.rewrap(python_func, original_func, converted_func)
    637
--&gt; 638       func_outputs = python_func(*func_args, **func_kwargs)
    639
    640       # invariant: `func_outputs` contains only Tensors, IndexedSlices,

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/eager/def_function.py in wrapped_fn(*args, **kwds)
    315         # __wrapped__ allows AutoGraph to swap in a converted function. We give
    316         # the function a weak reference to itself to avoid a reference cycle.
--&gt; 317         return weak_wrapped_fn().__wrapped__(*args, **kwds)
    318     weak_wrapped_fn = weakref.ref(wrapped_fn)
    319

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/eager/function.py in bound_method_wrapper(*args, **kwargs)
   2060     # If __wrapped__ was replaced, then it is always an unbound function
   2061     # that takes self as first argument.
-&gt; 2062     return wrapped_fn(weak_instance(), *args, **kwargs)
   2063   weak_bound_method_wrapper = weakref.ref(bound_method_wrapper)
   2064

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/framework/func_graph.py in wrapper(*args, **kwargs)
    629                   optional_features=autograph_options,
    630                   force_conversion=True,
--&gt; 631               ), args, kwargs)
    632
    633         # Wrapping around a decorator allows checks like tf_inspect.getargspec

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/autograph/impl/api.py in converted_call(f, owner, options, args, kwargs)
    358     return f(*args, **kwargs)
    359
--&gt; 360   result = converted_f(*effective_args, **kwargs)
    361
    362   # The converted function's closure is simply inserted into the function's

/var/folders/wy/h39t6kb11pnbb0pzhksd_fqh0000gn/T/tmpd7lvn4li.py in tf__bar(self, x)
      4   retval_ = None
      5   do_return = True
----&gt; 6   retval_ = ag__.converted_call('foo', super(), ag__.ConversionOptions(recursive=True, verbose=0, strip_decorators=(tf.function, defun, ag__.convert, ag__.do_not_convert, ag__.converted_call), force_conversion=False, optional_features=(), internal_convert_user_code=True), (x,), {})
      7   return retval_
      8

RuntimeError: super(): __class__ cell not found
	</description>
	<comments>
		<comment id='1' author='ageron' date='2019-02-27T17:35:54Z'>
		Oh, this is tricky. &lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 I think we can monkey-patch the locals() ag uses to define  and fix this?
		</comment>
		<comment id='2' author='ageron' date='2019-02-27T18:00:47Z'>
		Interesting. I'm confident we can handle it correctly, we just need to make sure we understand the mechanics of the new-style super.
		</comment>
		<comment id='3' author='ageron' date='2019-02-27T18:10:30Z'>
		I've been looking at the pep ( &lt;denchmark-link:https://www.python.org/dev/peps/pep-3135/&gt;https://www.python.org/dev/peps/pep-3135/&lt;/denchmark-link&gt;
 )
and I think it amounts to setting the __class__ cell.
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Wed, Feb 27, 2019 at 10:06 AM Dan Moldovan ***@***.***&gt; wrote:
 Interesting. I'm confident we can handle it correctly, we just need to
 make sure we understand the mechanics of the new-style super.

 —
 You are receiving this because you were assigned.
 Reply to this email directly, view it on GitHub
 &lt;#26029 (comment)&gt;,
 or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/AAATxYM0sOzHmCKDtnYAgaGVASVlQ146ks5vRskCgaJpZM4bN1IF&gt;
 .


-- 
 - Alex

		</comment>
		<comment id='4' author='ageron' date='2019-08-07T08:21:58Z'>
		Fixed by &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/612ceb6c488e228fa5246d2452799cf2691ef5f1&gt;612ceb6&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='ageron' date='2019-08-07T08:21:59Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=26029&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=26029&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>