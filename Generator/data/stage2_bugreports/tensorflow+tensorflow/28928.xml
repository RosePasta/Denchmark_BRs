<bug id='28928' author='tcbegley' open_date='2019-05-22T13:43:31Z' closed_time='2019-06-01T21:34:57Z'>
	<summary>[TF2.0] steps_per_epoch parameter not working when input data passed as dictionary</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary (pip)
TensorFlow version (use command below): v1.12.0-9492-g2c319fb415 2.0.0-alpha0
Python version: 3.6.8
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

Describe the current behavior
If using a dictionary to pass input to a keras.Model with named inputs, the steps_per_epoch argument appears to have no effect. Instead as many steps are performed as needed for a full epoch.
Describe the expected behavior
I would expect only as many iterations as specified by steps_per_epoch in each iteration. While it's possible I have misunderstood something, this is the behaviour in TensorFlow 1 when I run analogous code.
Code to reproduce the issue
import numpy as np
import tensorflow as tf

x = np.random.random((1000, 2))
y = 2 * x[:, 0] + 3 * x[:, 1] + np.random.normal(size=(1000,))

input_ = tf.keras.Input((2,), name="input")
output = tf.keras.layers.Dense(1)(input_)
model = tf.keras.Model(inputs=[input_], outputs=[output])

model.compile(tf.optimizers.Adam(), loss=tf.losses.mse)
with this setup, I observe
model.fit(
    x, y, steps_per_epoch=2, batch_size=10,
)
&lt;denchmark-code&gt;2/2 [==============================] - 0s 38ms/step - loss: 1.5998
&lt;/denchmark-code&gt;

but on the other hand, if I pass the input as a dictionary I observe
model.fit(
    {"input": x}, y, steps_per_epoch=2, batch_size=10,
)
&lt;denchmark-code&gt;1000/1000 [==============================] - 5s 5ms/sample - loss: 1.5324
&lt;/denchmark-code&gt;

Strangely, if I then run the first .fit command again, it also performs a full pass over the data, rather than doing the specified number of steps as originally.
In TensorFlow 1, with the same code as above, but a TensorFlow 1 friendly model compilation step
model.compile(
    tf.train.AdamOptimizer(),
    loss=tf.losses.mean_squared_error,
)
I do not see the same issue, the number of steps is as specified, whether data is passed in a dictionary or not.

This could be related to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/28710&gt;#28710&lt;/denchmark-link&gt;
? Though the author there was using TensorFlow 1 and reported that data input as NumPy arrays did not cause problems, so this seemed different enough for its own issue. Happy for them to be consolidated if they are too similar.
	</description>
	<comments>
		<comment id='1' author='tcbegley' date='2019-05-23T10:44:03Z'>
		&lt;denchmark-link:https://github.com/tcbegley&gt;@tcbegley&lt;/denchmark-link&gt;
 I tried reproducing the issue through colab with Tf 2.0.0-alpha0 but the code executed as expected. Can you try once again and let us know if that still gives weird output. Thanks!
		</comment>
		<comment id='2' author='tcbegley' date='2019-05-23T12:04:19Z'>
		&lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 thanks for getting back to me.
I was able to replicate my issue in Google Colab, see &lt;denchmark-link:https://colab.research.google.com/drive/1pjpBakrkgd0pQKhGhnQW2_PNUUXKI28G&gt;this notebook&lt;/denchmark-link&gt;
.
As in the screenshot below, which is taken from that notebook, the first fit argument performs two steps of training, the second cell appears to do a full pass over the data, ignoring the steps_per_epoch argument. As I stated in my original post this is different to behaviour in TensorFlow 1, and also different to my interpretation of the docs, so I think it's a bug.
&lt;denchmark-link:https://user-images.githubusercontent.com/15220906/58250963-72ea5800-7d5a-11e9-852c-abb6916d9686.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='tcbegley' date='2019-05-24T04:42:06Z'>
		I was able to reproduce the mentioned output.
		</comment>
		<comment id='4' author='tcbegley' date='2019-05-31T22:35:24Z'>
		&lt;denchmark-link:https://github.com/tcbegley&gt;@tcbegley&lt;/denchmark-link&gt;
 The other possibly related issue is fixed with latest tf nightly build. Is this still an issue with tf 2.0 nightly build? (pip install tf-nightly-2.0-preview)
		</comment>
		<comment id='5' author='tcbegley' date='2019-06-01T18:14:45Z'>
		&lt;denchmark-link:https://github.com/ymodak&gt;@ymodak&lt;/denchmark-link&gt;
 I tried out the nightly build, and everything worked correctly, so it seems likely this issue has also been resolved.
		</comment>
		<comment id='6' author='tcbegley' date='2019-06-01T21:34:57Z'>
		Great. Thanks for confirming. I will close this issue now. Feel free to reopen if still have problems. Thanks!
		</comment>
		<comment id='7' author='tcbegley' date='2019-06-01T21:34:58Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28928&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28928&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>