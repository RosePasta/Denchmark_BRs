<bug id='37261' author='cappittall' open_date='2020-03-03T15:55:06Z' closed_time='2020-03-26T10:20:12Z'>
	<summary>Giving example on website has no model.predict examples</summary>
	<description>
First of all, you have a great website to understand the Tensorflow library. I am a newbie. And want to understand the point is: I go through the examples. Except for basic image classification, there is no example : how to feed my own data wich has no label. And I want to get predictions of my own data. example :   &lt;denchmark-link:https://stackoverflow.com/questions/60389558/how-to-feed-my-own-data-and-evaluate-at-tf-text-classification&gt;https://stackoverflow.com/questions/60389558/how-to-feed-my-own-data-and-evaluate-at-tf-text-classification&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='cappittall' date='2020-03-04T04:45:21Z'>
		&lt;denchmark-link:https://github.com/cappittall&gt;@cappittall&lt;/denchmark-link&gt;
, Please go through this &lt;denchmark-link:https://www.tensorflow.org/tutorials/load_data/text&gt;link&lt;/denchmark-link&gt;
 to load your own text data. Thanks!
		</comment>
		<comment id='2' author='cappittall' date='2020-03-04T08:39:00Z'>
		&lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 Thank you for the reply. I am aware of this. I study and trained my own data. Built the model. Now, I need only the prediction of my new data. How to feed new data to the model.
		</comment>
		<comment id='3' author='cappittall' date='2020-03-06T06:12:44Z'>
		&lt;denchmark-link:https://github.com/cappittall&gt;@cappittall&lt;/denchmark-link&gt;
, To predict your own data with trained model, you use the following code
&lt;denchmark-code&gt;import matplotlib.pyplot as plt
import matplotlib.image as mpimag

img = mpimage.imread("test_image.jpg")
implot = plt.imshow(img)
prob = loaded_model.predict(img)  # load your model 

&lt;/denchmark-code&gt;

Let us know if this helps. Thanks!
		</comment>
		<comment id='4' author='cappittall' date='2020-03-07T07:25:42Z'>
		Yea, there at basic image classification all are very clear.  I am working on text classification. I am sorry I must describe this at the beginning. (Detail was at StackOverflow link)  However, I work on

https://www.tensorflow.org/tutorials/keras/text_classification_with_hub

I come to the end with success (with my data.) Build the model. Now Should I use the same like image detection as:
&lt;denchmark-code&gt;probability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()])
predictions = probability_model.predict(test_text)
&lt;/denchmark-code&gt;

I tried this with no success. Gives:
Error when checking input: expected sequential_input to have 1 dimensions, but got array with shape ()
So, at the bottom of the text classification, I need to feed a text or text array to get predictions. I tried some ways with no success.
		</comment>
		<comment id='5' author='cappittall' date='2020-03-09T06:40:52Z'>
		&lt;denchmark-link:https://github.com/cappittall&gt;@cappittall&lt;/denchmark-link&gt;
, Can you provide the complete standalone code to analyze the issue. Thanks
		</comment>
		<comment id='6' author='cappittall' date='2020-03-11T04:03:15Z'>
		Here my code so far:
Here I tried to re-product Tensorflow's &lt;denchmark-link:https://www.tensorflow.org/hub/tutorials/text_classification_with_tf_hub&gt;own example&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;from __future__ import absolute_import, division, print_function, unicode_literals
import tensorflow as tf
import tensorflow_hub as hub
import matplotlib.pyplot as plt
from absl import logging
import numpy as np
import os
import pandas as pd
import seaborn as sns


dir = os.path.dirname(os.path.realpath(__file__))
print(dir)
file_name="traindata.txt"

train_df = {}
test_df = {}
remain = {}

with open (file_name, 'r', encoding="utf8") as l:
  lines = l.readlines()

#my predict data 
with open ('remain.txt', 'r', encoding="utf8" ) as l:
    remain_data = l.readlines()

remain["html"] = [i.lower() for i in remain_data]

#Split data into train and test 
train_df["html"] = [i.lower() for i in lines[:1100]]
test_df["html"] = [i.lower() for i in lines[1100:]]

#Split labels into train and test
with open ('trainlabel.txt', 'r') as l:
  labels =  l.readlines()
  labels = [int(i) for i in labels]
  train_df["polarity"] = labels[:1100]
  test_df["polarity"] = labels[1100:]


train_df = pd.DataFrame.from_dict(train_df)
test_df = pd.DataFrame.from_dict(test_df)
remain_df = pd.DataFrame.from_dict(remain)

# Reduce logging output.
logging.set_verbosity(logging.ERROR)


# Training input on the whole training set with no limit on training epochs.
train_input_fn = tf.compat.v1.estimator.inputs.pandas_input_fn(train_df, train_df["polarity"], num_epochs=None, shuffle=True)

# Prediction on the whole training set.
predict_train_input_fn = tf.compat.v1.estimator.inputs.pandas_input_fn(train_df, train_df["polarity"], shuffle=False)

# Prediction on the test set.
predict_test_input_fn = tf.compat.v1.estimator.inputs.pandas_input_fn(test_df, test_df["polarity"], shuffle=False)

# Prediction on the remain  set.
predict_remain_input_fn = tf.compat.v1.estimator.inputs.pandas_input_fn(test_df, test_df["polarity"], shuffle=False)

embedded_text_feature_column = hub.text_embedding_column(
    key="html",
    module_spec="https://tfhub.dev/google/random-nnlm-en-dim128/1")

estimator = tf.estimator.DNNClassifier(
    hidden_units=[64, 32],
    feature_columns=[embedded_text_feature_column],
    n_classes=2,
    optimizer=tf.keras.optimizers.Adagrad(lr=0.003))


estimator.train(input_fn=train_input_fn, steps=5000)

train_eval_result = estimator.evaluate(input_fn=predict_train_input_fn)
test_eval_result = estimator.evaluate(input_fn=predict_test_input_fn)


print("Training set accuracy: {accuracy}".format(**train_eval_result))  ## Ressult %99,
print("Test set accuracy: {accuracy}".format(**test_eval_result))       ## Result ~ %79, 
&lt;/denchmark-code&gt;

Now I need to make predictions.  I have a text array ( scraped site text) that need to get predict whether each text is an e e-commerce site or not.   (ie myArray = [[a sitetext],[ another site text], [ another site text]]
		</comment>
		<comment id='7' author='cappittall' date='2020-03-13T09:31:35Z'>
		&lt;denchmark-link:https://github.com/cappittall&gt;@cappittall&lt;/denchmark-link&gt;
, Save your model and load it. Do the pre-processing steps and feed the input to prediction. Below is the sample code, try this
&lt;denchmark-code&gt;Prediction = estimator.predict(input)

Prediction_Classes = tf.argmax(Prediction, axis=1)

for Input_File_Name, Pred_Class in zip(Input_Files, Prediction_Classes):
    print('Prediction for {} is {}'.format(Input_File_Name, Labels_List[(Pred_Class.numpy()-1)]))

&lt;/denchmark-code&gt;

Let us know if it helps. Thanks
		</comment>
		<comment id='8' author='cappittall' date='2020-03-13T20:44:22Z'>
		&lt;denchmark-link:https://github.com/cappittall&gt;@cappittall&lt;/denchmark-link&gt;
, As I gone through given stackoverflow link, I guess that you want to predict on remain data. For this first you need to change

to

and then to predict result


		</comment>
		<comment id='9' author='cappittall' date='2020-03-26T08:14:35Z'>
		&lt;denchmark-link:https://github.com/cappittall&gt;@cappittall&lt;/denchmark-link&gt;
, Please confirm if issue is resolved we can move to closure. Thanks!
		</comment>
	</comments>
</bug>