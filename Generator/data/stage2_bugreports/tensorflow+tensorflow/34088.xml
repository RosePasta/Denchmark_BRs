<bug id='34088' author='canesqui' open_date='2019-11-08T02:59:24Z' closed_time='2019-12-10T00:26:03Z'>
	<summary>metrics = ['accuracy'] and metrics = [tf.metrics.Accuracy()] produces different results</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): v2.0.0-rc2-26-g64c3d38 2.0.0
Python version: Python 3.6.8
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce: N/A

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

Declaring metrics as a list of tensorflow.python.keras.metrics.BinaryAccuracy or tensorflow.python.keras.metrics.Accuracy produces an error. Declaring the metrics as a string list works as expected.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

Below is the source that can reproduce the issue.
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np

np.random.seed(1)
tf.random.set_seed(1)
BATCH_SIZE = 32

#Import mnist dataset as numpy arrays
(x_train, y_train), (_, _) = tf.keras.datasets.mnist.load_data()#Import
x_train = x_train / 255.0 #normalizing
y_train = y_train.astype(dtype='float32')
x_train = x_train.astype(dtype='float32')

x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1]*x_train.shape[2]))#Reshaping the 2D picture

##############################################################################################
#THIS BLOCK CREATES A DATASET FROM THE NUMPY ARRAYS. IT WILL BE USED FOR THE CASE OF TF.DATA DATASET INPUTS
tfdata_dataset_train = tf.data.Dataset.from_tensor_slices((x_train, y_train))
tfdata_dataset_train = tfdata_dataset_train.batch(BATCH_SIZE).repeat()
##############################################################################################

#Create model
keras_model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(512, activation=tf.nn.relu),
    tf.keras.layers.Dropout(0.2, seed=1),
    tf.keras.layers.Dense(10, activation=tf.nn.softmax)
])

metrics = [tf.metrics.Accuracy()]
#metrics = ['accuracy']

#Compile the model
keras_model.compile(optimizer=tf.keras.optimizers.Adam(),
                    loss=tf.keras.losses.sparse_categorical_crossentropy,
                    metrics=metrics)


#Train with tf.data datasets
keras_training_history = keras_model.fit(tfdata_dataset_train,
                epochs=1,
                steps_per_epoch=60000//BATCH_SIZE
                )
########################
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Output using metrics=['accuracy']&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;2019-11-07 21:47:17.874727: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 2199995000 Hz
2019-11-07 21:47:17.875199: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x49747e0 executing computations on platform Host. Devices:
2019-11-07 21:47:17.875253: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): Host, Default Version
2019-11-07 21:47:17.876808: W tensorflow/core/framework/cpu_allocator_impl.cc:81] Allocation of 188160000 exceeds 10% of system memory.
2019-11-07 21:47:18.324898: W tensorflow/core/framework/cpu_allocator_impl.cc:81] Allocation of 188160000 exceeds 10% of system memory.
Train for 1875 steps
2019-11-07 21:47:18.992644: W tensorflow/core/framework/cpu_allocator_impl.cc:81] Allocation of 188160000 exceeds 10% of system memory.
1875/1875 [==============================] - 26s 14ms/step - loss: 0.2265 - accuracy: 0.9329
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Output using metrics = [tf.metrics.Accuracy()]&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;2019-11-07 21:51:01.199548: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 2199995000 Hz
2019-11-07 21:51:01.200090: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x4a91560 executing computations on platform Host. Devices:
2019-11-07 21:51:01.200143: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): Host, Default Version
2019-11-07 21:51:01.201813: W tensorflow/core/framework/cpu_allocator_impl.cc:81] Allocation of 188160000 exceeds 10% of system memory.
2019-11-07 21:51:01.721895: W tensorflow/core/framework/cpu_allocator_impl.cc:81] Allocation of 188160000 exceeds 10% of system memory.
Train for 1875 steps
2019-11-07 21:51:02.375751: W tensorflow/core/framework/cpu_allocator_impl.cc:81] Allocation of 188160000 exceeds 10% of system memory.
   1/1875 [..............................] - ETA: 23:32Traceback (most recent call last):
  File "bug.py", line 41, in &lt;module&gt;
    steps_per_epoch=60000//BATCH_SIZE
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training.py", line 728, in fit
    use_multiprocessing=use_multiprocessing)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py", line 324, in fit
    total_epochs=epochs)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py", line 123, in run_one_epoch
    batch_outs = execution_function(iterator)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py", line 86, in execution_function
    distributed_function(input_fn))
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 457, in __call__
    result = self._call(*args, **kwds)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 503, in _call
    self._initialize(args, kwds, add_initializers_to=initializer_map)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 408, in _initialize
    *args, **kwds))
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py", line 1848, in _get_concrete_function_internal_garbage_collected
    graph_function, _, _ = self._maybe_define_function(args, kwargs)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py", line 2150, in _maybe_define_function
    graph_function = self._create_graph_function(args, kwargs)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py", line 2041, in _create_graph_function
    capture_by_value=self._capture_by_value),
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/framework/func_graph.py", line 915, in func_graph_from_py_func
    func_outputs = python_func(*func_args, **func_kwargs)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 358, in wrapped_fn
    return weak_wrapped_fn().__wrapped__(*args, **kwds)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py", line 73, in distributed_function
    per_replica_function, args=(model, x, y, sample_weights))
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py", line 760, in experimental_run_v2
    return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py", line 1787, in call_for_each_replica
    return self._call_for_each_replica(fn, args, kwargs)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py", line 2132, in _call_for_each_replica
    return fn(*args, **kwargs)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/api.py", line 292, in wrapper
    return func(*args, **kwargs)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py", line 264, in train_on_batch
    output_loss_metrics=model._output_loss_metrics)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_eager.py", line 315, in train_on_batch
    model, outs, targets, sample_weights=sample_weights, masks=masks)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_eager.py", line 74, in _eager_metrics_fn
    skip_target_masks=model._prepare_skip_target_masks())
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training.py", line 2063, in _handle_metrics
    target, output, output_mask))
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training.py", line 2014, in _handle_per_output_metrics
    metric_fn, y_true, y_pred, weights=weights, mask=mask)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_utils.py", line 1067, in call_metric_function
    return metric_fn(y_true, y_pred, sample_weight=weights)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/metrics.py", line 193, in __call__
    replica_local_fn, *args, **kwargs)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/distribute/distributed_training_utils.py", line 1135, in call_replica_local_fn
    return fn(*args, **kwargs)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/metrics.py", line 176, in replica_local_fn
    update_op = self.update_state(*args, **kwargs)  # pylint: disable=not-callable
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/utils/metrics_utils.py", line 75, in decorated
    update_op = update_state_fn(*args, **kwargs)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/metrics.py", line 581, in update_state
    matches = self._fn(y_true, y_pred, **self._fn_kwargs)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/keras/metrics.py", line 2750, in accuracy
    y_pred.shape.assert_is_compatible_with(y_true.shape)
  File "/home/developer/.local/lib/python3.6/site-packages/tensorflow_core/python/framework/tensor_shape.py", line 1115, in assert_is_compatible_with
    raise ValueError("Shapes %s and %s are incompatible" % (self, other))
ValueError: Shapes (None, 10) and (None, 1) are incompatible
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='canesqui' date='2019-11-08T11:04:00Z'>
		The meaning of 'accuracy' depends on the loss function. The one that corresponds to sparse_categorical_crossentropy is tf.keras.metrics.SparseCategoricalAccuracy(), not tf.metrics.Accuracy().
		</comment>
		<comment id='2' author='canesqui' date='2019-11-11T09:42:20Z'>
		&lt;denchmark-link:https://github.com/canesqui&gt;@canesqui&lt;/denchmark-link&gt;

Please use in place of  then you can see the same results.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/c31c3ed5a3e35e483fa34ac76b2ed48e/untitled350.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='3' author='canesqui' date='2019-11-11T13:47:35Z'>
		Thank you &lt;denchmark-link:https://github.com/netw0rkf10w&gt;@netw0rkf10w&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 for pointing that out. &lt;denchmark-link:https://github.com/netw0rkf10w&gt;@netw0rkf10w&lt;/denchmark-link&gt;
, can you please share the documentation where I can find information on declaring metrics as a string array and how it would look for the corresponding metric according to the loss function? Once again, thank you for your help.
		</comment>
		<comment id='4' author='canesqui' date='2019-11-13T09:52:04Z'>
		&lt;denchmark-link:https://github.com/canesqui&gt;@canesqui&lt;/denchmark-link&gt;

Can you please go through the below &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/metrics/SparseCategoricalAccuracy&gt;link&lt;/denchmark-link&gt;
 and see if it helps you.Thanks!
		</comment>
		<comment id='5' author='canesqui' date='2019-11-18T13:44:06Z'>
		I stumbled across a very similar issue today, and also earlier (where I noticed that  and  behaved differently, IIRC). Therefore, I have been resorting to using  to sanitize all inputs. However, with , I have now found that  behaves differently from . This is super-unexpected, and as far as I can see, this is not documented, either. The link posted by &lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 does not address this issue.
Also, not only do the two versions behave differently in terms of accepting tensors of different shapes (one does, the other does not, see OP), also the numerical results can differ between the two:
&lt;denchmark-code&gt;"""Bug."""
# import keras
import numpy as np
import tensorflow.keras as keras

X = np.empty([10, 224, 224, 3])
Y = np.empty([10, 2])

MODEL = keras.applications.vgg16.VGG16(weights=None, classes=2)

MODEL.compile(optimizer=keras.optimizers.Adam(),
              loss='categorical_crossentropy',
              metrics=['accuracy'])
MODEL.fit(X, Y, epochs=10)

MODEL.compile(optimizer=keras.optimizers.Adam(),
              loss='categorical_crossentropy',
              metrics=[keras.metrics.get('accuracy')])
MODEL.fit(X, Y, epochs=10)
&lt;/denchmark-code&gt;

gives (for example)
&lt;denchmark-code&gt;Train on 10 samples
Epoch 1/10

10/10 [==============================] - 4s 389ms/sample - loss: inf - accuracy: 0.9000
Epoch 2/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.9000
Epoch 3/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.9000
Epoch 4/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.9000
Epoch 5/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.9000
Epoch 6/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.9000
Epoch 7/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.9000
Epoch 8/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.9000
Epoch 9/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.9000
Epoch 10/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.9000
Train on 10 samples
Epoch 1/10

10/10 [==============================] - 1s 131ms/sample - loss: nan - accuracy: 0.0000e+00
Epoch 2/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.0000e+00
Epoch 3/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.0000e+00
Epoch 4/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.0000e+00
Epoch 5/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.0000e+00
Epoch 6/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.0000e+00
Epoch 7/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.0000e+00
Epoch 8/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.0000e+00
Epoch 9/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.0000e+00
Epoch 10/10

10/10 [==============================] - 0s 8ms/sample - loss: nan - accuracy: 0.0000e+00
&lt;/denchmark-code&gt;

By the way, the problem is the same when using keras instead of tf.keras.
		</comment>
		<comment id='6' author='canesqui' date='2019-11-20T09:37:24Z'>
		&lt;denchmark-link:https://github.com/bersbersbers&gt;@bersbersbers&lt;/denchmark-link&gt;

Will it be possible for you to raise a new issue by filling &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/new/choose&gt;issue template&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='7' author='canesqui' date='2019-11-21T14:09:22Z'>
		
@netw0rkf10w, can you please share the documentation where I can find information on declaring metrics as a string array and how it would look for the corresponding metric according to the loss function?

Sorry for the late reply. Unfortunately I don't remember how I learned about that, but definitely not from the official documentation or tutorials!
		</comment>
		<comment id='8' author='canesqui' date='2019-11-25T10:36:07Z'>
		&lt;denchmark-link:https://github.com/canesqui&gt;@canesqui&lt;/denchmark-link&gt;

Please, let us know if this is still an issue?. Please, close this issue if it is already resolved.Thanks!
		</comment>
		<comment id='9' author='canesqui' date='2019-11-25T13:09:27Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 I believe this is still an issue, at the least same issue (that I have been asked to re-file as &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34451&gt;#34451&lt;/denchmark-link&gt;
 and which was closed by accident) is still there in nightly.
		</comment>
		<comment id='10' author='canesqui' date='2019-12-10T00:26:03Z'>
		&lt;denchmark-link:https://github.com/canesqui&gt;@canesqui&lt;/denchmark-link&gt;
 I am closing this issue as this issue is being tracked here(&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34451&gt;#34451&lt;/denchmark-link&gt;
). Please follow this issue for more updates. Thanks!
		</comment>
		<comment id='11' author='canesqui' date='2019-12-10T00:26:05Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34088&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34088&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>