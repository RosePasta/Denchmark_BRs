<bug id='36348' author='yzhuang' open_date='2020-01-30T19:44:29Z' closed_time='2020-02-10T13:30:15Z'>
	<summary>Keras model.train() should automatically run table initializers.</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):  Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Centos 7, OS X 10.15
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.15 and 2.1
Python version: 2.7 and 3.6
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
We have Keras layers that use HashTables (e.g. tf.lookup.StaticHashTable), and these tables use initializers such as tf.lookup.KeyValueTensorInitializer.  When we perform model training using model.train() in non-eager mode, it does not run these table initializers and hence causes the training to crash.  Currently, we work around the issue with an ugly hack like this, by saving a reference to the initializer and running it manually.
&lt;denchmark-code&gt;    if not tf.executing_eagerly():
      tf1.keras.backend.get_session().run(self.table._init_op)
&lt;/denchmark-code&gt;

Describe the expected behavior
Calling model.train() should initialize all initializers, including hash table initializers such as tf.lookup.KeyValueTensorInitializer.

Any Keras layer using StaticHashTable would repro the problem. See
&lt;denchmark-link:https://gist.github.com/yzhuang/0744b487c7a5ab1b65a5b152a06cda7c#file-keraslayertableinitialization-ipynb&gt;https://gist.github.com/yzhuang/0744b487c7a5ab1b65a5b152a06cda7c#file-keraslayertableinitialization-ipynb&lt;/denchmark-link&gt;

Suggestions
My suggestion is to support HashTable initialization or publish documentation / guidance on how to use HashTable with Keras Layers.
Thanks! üôè
	</description>
	<comments>
		<comment id='1' author='yzhuang' date='2020-01-31T12:00:41Z'>
		&lt;denchmark-link:https://github.com/yzhuang&gt;@yzhuang&lt;/denchmark-link&gt;
,
In order to expedite the trouble-shooting process, could you please provide the complete code to reproduce the issue reported here. Thanks!
		</comment>
		<comment id='2' author='yzhuang' date='2020-01-31T22:39:08Z'>
		Hi &lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;

Here's a simple colab reproducing this issue on TF 1.15
&lt;denchmark-link:https://gist.github.com/yzhuang/0744b487c7a5ab1b65a5b152a06cda7c#file-keraslayertableinitialization-ipynb&gt;https://gist.github.com/yzhuang/0744b487c7a5ab1b65a5b152a06cda7c#file-keraslayertableinitialization-ipynb&lt;/denchmark-link&gt;

This colab shows that the eager mode correctly initializes the table, but non-eager mode does not initialize the table, and Keras Model API does not provide an API for table init ops.
		</comment>
		<comment id='3' author='yzhuang' date='2020-02-04T13:30:49Z'>
		Was able to reproduce the issue with TF 1.15. Please find the Gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/c41e632bf014b78b8747500ab6d561ba/36348.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='yzhuang' date='2020-02-10T13:30:15Z'>
		You can run tf.tables_initailizer, Keras historically doesn't have tables so it doesn't track that.
Moving forward, since we don't have any immediate plans to release 1.16 or backporting this, I think this might be the only way.
		</comment>
		<comment id='5' author='yzhuang' date='2020-02-10T13:30:17Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36348&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36348&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='yzhuang' date='2020-02-10T19:09:46Z'>
		Hi &lt;denchmark-link:https://github.com/tanzhenyu&gt;@tanzhenyu&lt;/denchmark-link&gt;

This is not just affecting 1.15.  I have also tried 2.1, and the same colab can reproduce the issue in 2.1 as well by calling tf.compat.v1.disable_eager_execution().
Are there plans to fix this in 2.x, since it is not specific to 1.15.
"You can run tf.tables_initailizer".  In 2.x, we also no longer have access to the underlying sessions, any suggestions on how to run the initializer in TF 2.1?  Thanks.
		</comment>
		<comment id='7' author='yzhuang' date='2020-02-11T02:18:00Z'>
		
Hi @tanzhenyu
This is not just affecting 1.15. I have also tried 2.1, and the same colab can reproduce the issue in 2.1 as well by calling tf.compat.v1.disable_eager_execution().
Are there plans to fix this in 2.x, since it is not specific to 1.15.
"You can run tf.tables_initailizer". In 2.x, we also no longer have access to the underlying sessions, any suggestions on how to run the initializer in TF 2.1? Thanks.

If you use tf.compat.v1.disable_eager_execution(), everything runs in graph mode, so you need to use tf.compat.v1.Session() to initialize it.
		</comment>
	</comments>
</bug>