<bug id='21543' author='hartikainen' open_date='2018-08-10T16:38:54Z' closed_time='2019-07-15T21:05:57Z'>
	<summary>ConditionalBijectors not Chainable due to Bijector _Mapping not supporting deep dicts</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): OSX High Sierra 10.13.1
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: n/a
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v1.9.0-0-g25c197e023 1.9.0
Python version: Python 3.6.5 :: Anaconda, Inc.
Bazel version (if compiling from source): n/a
GCC/Compiler version (if compiling from source): n/a
CUDA/cuDNN version: n/a
GPU model and memory: n/a
Exact command to reproduce: n/a

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

I would like to use the &lt;denchmark-link:https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/bijectors/chain.py&gt;bijectors.Chain&lt;/denchmark-link&gt;
 to create a flow of bijector that extend &lt;denchmark-link:https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/bijectors/conditional_bijector.py#L28&gt;bijectors.ConditionalBijector&lt;/denchmark-link&gt;
. It looks like Chain &lt;denchmark-link:https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/bijectors/chain.py#L263&gt;already supports conditioning under the hood&lt;/denchmark-link&gt;
, but the other parts of Bijector are not fully compatible with it.
Suppose we have the following test function:
import tensorflow as tf
import tensorflow_probability as tfp

tfb = tfp.bijectors


def test_chained_condition_bijector(ChainClass):
    flow = ChainClass([
        BijectorWithSupportForConditioning(name="bijector_1"),
        BijectorWithSupportForConditioning(name="bijector_2")
    ])

    x = tf.random_uniform([5])
    flow.forward(
        x,
        bijector_1={'conditions': tf.random_uniform([2])},
        bijector_2={'conditions': tf.random_uniform([3])},
    )
Calling test_chained_condition_bijector with bijector.Chain, we get the following error:
&gt;&gt;&gt; test_chained_condition_bijector(tfb.Chain)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/kristian/code/softqlearning-private/broken_conditional_bijector.py", line 52, in test_chained_condition_bijector
    'bijector_2': { 'conditions': tf.random_uniform([3]) },
TypeError: forward() got an unexpected keyword argument 'bijector_1'
This error can be overcome by creating a ConditionalChain class, which extends ConditionalBijector:
class ConditionalChain(tfb.ConditionalBijector, tfb.Chain):
    pass
Now, if we run the same code again, this time with ConditionalChain, we get the following:
&gt;&gt;&gt; test_chained_condition_bijector(ConditionalChain)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/kristian/code/softqlearning-private/broken_conditional_bijector.py", line 52, in test_chained_condition_bijector
    'bijector_2': { 'conditions': tf.random_uniform([3]) },
  File "/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow/python/ops/distributions/util.py", line 1461, in _fn
    return fn(*args, **kwargs)
  File "/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow_probability/python/bijectors/conditional_bijector.py", line 35, in forward
    return self._call_forward(x, name, **condition_kwargs)
  File "/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow/python/ops/distributions/bijector_impl.py", line 750, in _call_forward
    mapping = self._lookup(x=x, kwargs=kwargs)
  File "/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow/python/ops/distributions/bijector_impl.py", line 1014, in _lookup
    return self._from_x.get(mapping.x_key, mapping)
TypeError: unhashable type: 'dict'
This happens because the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.10/tensorflow/python/ops/distributions/bijector_impl.py#L126&gt;_deep_tuple&lt;/denchmark-link&gt;
, which is used to cache Bijector inputs/outputs, doesn't support nested dicts.
I would expect the code to run normally with ConditionalChain. Not sure if this is a feature or a bug. If it's a bug, then this is a bug report, and if it's a feature, then this is a feature request to change the behavior. It's also possible that I'm misusing the ConditionalBijectors, in which case I should move this to stackoverflow.
Here's the full code snippet to test the behavior:
import tensorflow as tf
import tensorflow_probability as tfp

tf.enable_eager_execution()


tfb = tfp.bijectors


class BijectorWithSupportForConditioning(tfb.ConditionalBijector):
    def __init__(self, validate_args=False, name="exp"):
        super(BijectorWithSupportForConditioning, self).__init__(
            validate_args=validate_args,
            forward_min_event_ndims=0,
            name=name)

    def _concat_input(self, x, **condition_kwargs):
        return tf.concat(
            [x] + [condition_kwargs[k] for k in sorted(condition_kwargs)],
            axis=-1)

    def _forward(self, x, **condition_kwargs):
        return tf.exp(self._concat_input(x, **condition_kwargs))

    def _inverse(self, y, **condition_kwargs):
        return tf.log(self._concat_input(y, **condition_kwargs))

    def _inverse_log_det_jacobian(self, y, **condition_kwargs):
        return -self._forward_log_det_jacobian(self._inverse(
            self._concat_input(y, **condition_kwargs)))

    def _forward_log_det_jacobian(self, x, **condition_kwargs):
        return self._concat_input(x, **condition_kwargs)


class ConditionalChain(tfb.ConditionalBijector, tfb.Chain):
    pass


def test_chained_condition_bijector(ChainClass):
    flow = ChainClass([
        BijectorWithSupportForConditioning(name="bijector_1"),
        BijectorWithSupportForConditioning(name="bijector_2")
    ])

    x = tf.random_uniform([5])
    flow.forward(
        x,
        bijector_1={'conditions': tf.random_uniform([2])},
        bijector_2={'conditions': tf.random_uniform([3])},
    )


if __name__ == '__main__':
    test_chained_condition_bijector(tfb.Chain)
    # test_chained_condition_bijector(ConditionalChain)
	</description>
	<comments>
		<comment id='1' author='hartikainen' date='2018-10-22T19:08:55Z'>
		I agree this is an "API bug."  I'll try to address it ASAP but can't give an ETA at the moment.
		</comment>
		<comment id='2' author='hartikainen' date='2019-07-15T21:05:57Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=21543&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=21543&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>