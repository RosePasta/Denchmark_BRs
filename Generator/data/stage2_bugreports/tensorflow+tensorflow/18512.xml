<bug id='18512' author='marshall-dw' open_date='2018-04-13T23:58:00Z' closed_time='2019-08-28T21:54:11Z'>
	<summary>NoOp replacement in DependencyOptimizer misses some control dependency conversions</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Debian testing (buster)
TensorFlow installed from (source or binary):
binary
TensorFlow version (use command below):
('v1.7.0-3-g024aecf414', '1.7.0')
Python version:
2.7.14
Bazel version (if compiling from source):
N/A
GCC/Compiler version (if compiling from source):
N/A
CUDA/cuDNN version:
N/A
GPU model and memory:
N/A
Exact command to reproduce:
Run Python code below with environment variable TF_CPP_MIN_VLOG_LEVEL=1

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

When  converts a node to a NoOp, it only converts the first input from each input node to a control dependencies. Multiple inputs from the same node can cause a NoOp to be created with non-control inputs. In the VLOG output below, the IdentityN node has inputs "^Placeholder" and "Placeholder". I haven't tried it but perhaps when &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/92e6c3e4f5c1cabfda1e61547a6a1b268ef95fa5/tensorflow/core/grappler/optimizers/dependency_optimizer.cc#L214&gt;this condition&lt;/denchmark-link&gt;
 is false, the input should be deleted (like in the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/92e6c3e4f5c1cabfda1e61547a6a1b268ef95fa5/tensorflow/core/grappler/optimizers/dependency_optimizer.cc#L204&gt;control input case&lt;/denchmark-link&gt;
). Note that the bad NoOp gets deleted in the small example here (because that was the easiest way to display the problem) but the real code I was running, the NoOp remains in the graph to cause trouble later.
This bug is pretty sneaky: a NoOp with non-control inputs can cause  methods to fail, which in turn (silently!) prevents graph optimization (&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/92e6c3e4f5c1cabfda1e61547a6a1b268ef95fa5/tensorflow/core/common_runtime/graph_execution_state.cc#L396&gt;see here&lt;/denchmark-link&gt;
). The fallback original graph runs fine. I only went investigating because I saw output like this:
&lt;denchmark-code&gt;2018-04-12 13:09:26.465603: E tensorflow/core/framework/types.cc:102] Unrecognized DataType enum value 425390044
&lt;/denchmark-code&gt;

The cause was an error message from , called &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/92e6c3e4f5c1cabfda1e61547a6a1b268ef95fa5/tensorflow/core/graph/graph_constructor.cc#L1008&gt;here&lt;/denchmark-link&gt;
. It appears  and  did not agree on how many inputs there were to the node!  thought zero, which is where that strange DataType enum value came from: reading uninitialized memory &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/92e6c3e4f5c1cabfda1e61547a6a1b268ef95fa5/tensorflow/core/graph/graph_constructor.cc#L1156&gt;here&lt;/denchmark-link&gt;
. I wasn't able to reproduce that exact failure in a tiny example; I believe the example here causes optimization to fail &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/92e6c3e4f5c1cabfda1e61547a6a1b268ef95fa5/tensorflow/core/graph/graph_constructor.cc#L442&gt;here&lt;/denchmark-link&gt;
.
It would also be nice to see a warning when graph optimization fails.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

&lt;denchmark-h:h4&gt;Code to reproduce the problem&lt;/denchmark-h&gt;

import tensorflow as tf

with tf.device('/cpu:0'):
    x = tf.placeholder(dtype=tf.int32, shape=[])
    id2 = tf.identity_n([x, x])
    with tf.control_dependencies(id2):
        y = x + 1

with tf.Session() as sess:
    print sess.run(y, feed_dict={x: 5})
&lt;denchmark-h:h4&gt;Relevant log output&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;2018-04-13 15:58:27.870639: I tensorflow/core/grappler/optimizers/dependency_optimizer.cc:194] ***** Replacing  IdentityN (IdentityN) with NoOp.
2018-04-13 15:58:27.870678: I tensorflow/core/grappler/optimizers/dependency_optimizer.cc:332] ***** Rerouting input around
name: "IdentityN"
op: "NoOp"
input: "^Placeholder"
input: "Placeholder"
device: "/job:localhost/replica:0/task:0/device:CPU:0"
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='marshall-dw' date='2018-04-14T06:32:37Z'>
		Thank you for your post. We noticed you have not filled out the following field in the issue template. Could you update them if they are relevant in your case, or leave them as N/A? Thanks.
Bazel version
CUDA/cuDNN version
GPU model and memory
		</comment>
		<comment id='2' author='marshall-dw' date='2018-04-25T18:50:42Z'>
		&lt;denchmark-link:https://github.com/rmlarsen&gt;@rmlarsen&lt;/denchmark-link&gt;
 Can you take a look at this?
		</comment>
		<comment id='3' author='marshall-dw' date='2019-08-28T21:54:11Z'>
		This is fixed with latest version of TF '1.15.0-dev20190821'. Feel free to reopen if have any issues. Thanks!
		</comment>
		<comment id='4' author='marshall-dw' date='2019-08-28T21:54:13Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=18512&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=18512&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>