<bug id='34977' author='weidler' open_date='2019-12-09T21:56:22Z' closed_time='2020-01-08T03:46:23Z'>
	<summary>Cannot build submodel with layer of nested model as output</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04
TensorFlow installed from (source or binary): pip
TensorFlow version (use command below): v2.0.0-rc2-26-g64c3d38 2.0.0
Python version: 3.6.8
CUDA/cuDNN version: 10
GPU model and memory: Nvidia GTX 1060 6GB


(see also the StackOverflow on this: &lt;denchmark-link:https://stackoverflow.com/questions/59191855/how-to-build-a-submodel-in-keras-functional-api-ending-at-a-layer-of-a-nested-m&gt;https://stackoverflow.com/questions/59191855/how-to-build-a-submodel-in-keras-functional-api-ending-at-a-layer-of-a-nested-m&lt;/denchmark-link&gt;
)
Usually when using the functional API to define a model one can build a submodel starting and ending at any of the original models layers. However, when models become many and large, it can become very convenient to encapsulate some parts of the models into different python functions. These then build another model (potentially multi input/output, hence not Sequentials), which can be used in the functional API just like a layer. The graph will differ due to the additional Input layer, but the computations should be the same. However, when trying to build a submodel from such a nested model that has an output which originally was a layer of the nested model, a  "Graph disconnected" error is thrown.
Describe the expected behavior
The Graph very clearly is connected, given that the nested model in its entirety is an executable, connected graph. It should therefore be possible to build submodels, no matter how deeply nested the model is, as it should always be possible to select subgraphs.
Code to reproduce the issue
import os
import tensorflow as tf
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

# NOT NESTED
inp = tf.keras.Input((4,))
y = tf.keras.layers.Dense(4, name="od_1")(inp)
y = tf.keras.layers.Dense(2, name="od_2")(y)
y = tf.keras.layers.Dense(4, name="id_1")(y)
y = tf.keras.layers.Dense(10, name="od_3")(y)
y = tf.keras.layers.Dense(10, name="od_4")(y)
final_model = tf.keras.Model(inputs=[inp], outputs=[y])
final_model.summary()

sub_model = tf.keras.Model(inputs=[final_model.input], outputs=[final_model.get_layer("id_1").output])
sub_model.summary()

# NESTED
inp_1 = tf.keras.Input(shape=(2,))
x = tf.keras.layers.Dense(4, name="id_1")(inp_1)
inner_model = tf.keras.Model(inputs=[inp_1], outputs=[x], name="inner_model")

inp_outer = tf.keras.Input((4,))
y = tf.keras.layers.Dense(4, name="od_1")(inp_outer)
y = tf.keras.layers.Dense(2, name="od_2")(y)
y = inner_model(y)
y = tf.keras.layers.Dense(10, name="od_3")(y)
y = tf.keras.layers.Dense(10, name="od_4")(y)
final_model = tf.keras.Model(inputs=[inp_outer], outputs=[y])
final_model.summary()

sub_model = tf.keras.Model(inputs=[final_model.input], outputs=[final_model.get_layer("inner_model").get_layer("id_1").output])
sub_model.summary()
Other info / logs
&lt;denchmark-code&gt;    Traceback (most recent call last):
      File "/home/***/test_submodel_acces.py", line 35, in &lt;module&gt;
        sub_model = tf.keras.Model(inputs=[final_model.input], outputs=[final_model.get_layer("inner_model").get_layer("id_1").output])
      File "/home/***/venv/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training.py", line 146, in __init__
        super(Model, self).__init__(*args, **kwargs)
      File "/home/***/venv/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/network.py", line 167, in __init__
        self._init_graph_network(*args, **kwargs)
      File "/home/***/venv/lib/python3.6/site-packages/tensorflow_core/python/training/tracking/base.py", line 457, in _method_wrapper
        result = method(self, *args, **kwargs)
      File "/home/***/venv/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/network.py", line 320, in _init_graph_network
        self.inputs, self.outputs)
      File "/home/***/venv/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/network.py", line 1625, in _map_graph_network
        str(layers_with_complete_input))
    ValueError: Graph disconnected: cannot obtain value for tensor Tensor("input_2:0", shape=(None, 2), dtype=float32) at layer "input_2". The following previous layers were accessed without issue: []
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='weidler' date='2019-12-11T06:30:36Z'>
		I have tried on colab with TF version 2.0,2.1.0-rc0 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/75f1faa518035cd06dbdcefbfeb435b1/untitled462.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='weidler' date='2019-12-11T11:13:41Z'>
		Is there an ETA for a fix? This is quite essential to a project I am currently working on and I would like to know if I can expect this to be solved soon (and maybe be part of 2.1 stable) or if I need to find a workaround.
		</comment>
		<comment id='3' author='weidler' date='2019-12-17T02:40:41Z'>
		I'm facing same issue too.
		</comment>
		<comment id='4' author='weidler' date='2020-01-08T03:46:23Z'>
		Thanks for reporting the issue.
The issue is caused by the usage of "inner_model.get_layer("id_1").output". In the code example above, the dense layer within the inner model is used twice, first time by the inp_1, and second time with inp_outer. In that sense, there are two pairs of input/output for that layer, and layer.output returns the output for the first pair (there is an ambiguity of the API here). When you build the model with the outer input with the output from previous input, it raised error since it was expecting the input from inp_1.
To avoid the ambiguity here, keras has the API to explicitly fetch the output tensor, by layer.get_output_at(). If you change your code to follow, then it will run fine.
&lt;denchmark-code&gt;sub_model = tf.keras.Model(
    inputs=[final_model.input], 
    outputs=[final_model.get_layer("inner_model").get_layer("id_1").get_output_at(1)])
sub_model.summary()
&lt;/denchmark-code&gt;

Note that you are expect to use the second output which is at index 1. Index 0 will give u the output for the input of inp_1.
		</comment>
		<comment id='5' author='weidler' date='2020-01-08T03:46:25Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34977&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34977&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='weidler' date='2020-06-12T04:17:43Z'>
		I have a very similar issue. I've tried changing the code to be get_output_at(1) instead of output, but it results in the following error message.
&lt;denchmark-code&gt;ValueError: Asked to get output at node 1, but the layer has only 1 inbound nodes.
&lt;/denchmark-code&gt;

Here is my code:
&lt;denchmark-code&gt;base_model = sm.Unet('vgg16', encoder_weights='imagenet', classes=1, activation='sigmoid')

inp = Input(shape=(448, 224, 1))
l1 = Conv2D(3, (1,1))(inp)
out = base_model(l1)
model = Model(inp, out, name = base_model.name)
model.summary()

intermediate_layer_model = Model(inputs=[model.input], outputs = [model.get_layer('model_1').get_layer('center_block2_relu').get_output_at(1)])	     
&lt;/denchmark-code&gt;

Any help would be appreciated. Thanks!
		</comment>
		<comment id='7' author='weidler' date='2020-08-03T06:25:13Z'>
		
I have a very similar issue. I've tried changing the code to be get_output_at(1) instead of output, but it results in the following error message.
ValueError: Asked to get output at node 1, but the layer has only 1 inbound nodes.

Here is my code:
base_model = sm.Unet('vgg16', encoder_weights='imagenet', classes=1, activation='sigmoid')

inp = Input(shape=(448, 224, 1))
l1 = Conv2D(3, (1,1))(inp)
out = base_model(l1)
model = Model(inp, out, name = base_model.name)
model.summary()

intermediate_layer_model = Model(inputs=[model.input], outputs = [model.get_layer('model_1').get_layer('center_block2_relu').get_output_at(1)])	     

Any help would be appreciated. Thanks!

&lt;denchmark-code&gt;&lt;/denchmark-code&gt;

because only one tensor output :
intermediate_layer_model = Model(inputs=[model.input]
outputs = [model.get_layer('model_1').get_layer('center_block2_relu').get_output_at(0)])
&lt;denchmark-code&gt;&lt;/denchmark-code&gt;

		</comment>
		<comment id='8' author='weidler' date='2020-09-30T09:26:17Z'>
		&lt;denchmark-link:https://github.com/qlzh727&gt;@qlzh727&lt;/denchmark-link&gt;
 Thanks for the above response. My doubt is what if I have several layers in a submodel and want to make models for several layers in the submodel. I have raised a question here
&lt;denchmark-link:https://stackoverflow.com/questions/64118557/how-to-create-a-keras-model-using-the-intermediate-layers-of-its-submodel&gt;https://stackoverflow.com/questions/64118557/how-to-create-a-keras-model-using-the-intermediate-layers-of-its-submodel&lt;/denchmark-link&gt;

Thank you.
		</comment>
	</comments>
</bug>