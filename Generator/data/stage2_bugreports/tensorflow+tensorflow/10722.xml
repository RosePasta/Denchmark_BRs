<bug id='10722' author='jaewookchungsc' open_date='2017-06-15T07:01:34Z' closed_time='2017-09-14T12:46:22Z'>
	<summary>tf.image.resize_bicubic() produces artifacts in output image</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes. See below.
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): All platforms
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 1.0
Bazel version (if compiling from source): 0.4.5
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce:

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

tf.image.resize_bicubic() produces weird artifacts in output image. To reproduce, please save this image as bbf.png, and run the program below:
&lt;denchmark-link:https://www.dramafever.com/st/news/images/e09901b7-bb86-4acd-94e3-ee93d2e301cc.png&gt;https://www.dramafever.com/st/news/images/e09901b7-bb86-4acd-94e3-ee93d2e301cc.png&lt;/denchmark-link&gt;

This is what tf.image.resize_bicubic() produces:
&lt;denchmark-link:https://user-images.githubusercontent.com/19349719/27169091-41a12772-515d-11e7-9e17-6240f4a07634.jpg&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import tensorflow as tf

with open('bbf.png', 'rb') as f:
    image_bytes = f.read()

image = tf.image.decode_image(image_bytes)
image = tf.expand_dims(image, 0)

resized_image = tf.image.resize_bicubic(image, [256, 256])

resized_image = tf.cast(resized_image, tf.uint8)
resized_image = tf.squeeze(resized_image)
encoded_image = tf.image.encode_jpeg(resized_image)

with tf.Session() as sess:
    jpg_image = sess.run(encoded_image)
    with open('output.jpg', 'wb') as f:
        f.write(jpg_image)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='jaewookchungsc' date='2017-06-15T17:01:20Z'>
		Most bicubic interpolants are not guaranteed to be monotonic, since the cubic interpolant's extrema can exceed the original extrema in the given interval. Just clamp your image to allowable value after running the resize_cubic call. i.e. 0, 255 or 0, 1 depending on float or int types.
		</comment>
		<comment id='2' author='jaewookchungsc' date='2017-06-15T22:47:19Z'>
		&lt;denchmark-link:https://github.com/aselle&gt;@aselle&lt;/denchmark-link&gt;
 Thanks for the solution. I tried tf.saturate_cast() and it worked beautifully. So is this an intended behavior? Anyway, I feel that it's really easy for anyone to fall into this pitfall. It would be really great if this behavior is well documented.
		</comment>
		<comment id='3' author='jaewookchungsc' date='2017-06-16T00:06:35Z'>
		Glad it worked. Writing a doc note is a great idea. If you could prepare a pull-request that would be awesome! Thanks!
		</comment>
		<comment id='4' author='jaewookchungsc' date='2017-09-14T12:46:33Z'>
		This issue is automatically closed due to lack of activity. Please re-open if this is still an issue for you. Thanks!
		</comment>
	</comments>
</bug>