<bug id='37049' author='stefanondisponibile' open_date='2020-02-25T14:41:46Z' closed_time='2020-02-28T01:29:50Z'>
	<summary>Can't use RaggedTensor in @tf.function input_signature.</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: no
TensorFlow installed from (source or binary): no
TensorFlow version (use command below): 2.0.1
Python version: 3.7.3
Bazel version (if compiling from source): -
GCC/Compiler version (if compiling from source): -
CUDA/cuDNN version: -
GPU model and memory: -

Describe the current behavior
It is not possible to pass a tf.RaggedTensor as a tf.function input signature, and therefore use it with e.g. Tensorflow Serving.
Describe the expected behavior
It should be possible to pass a tf.RaggedTensor as a tf.function input signature.
Code to reproduce the issue
import tensorflow as tf


class MyModule(tf.Module):
    def __init__(self):
        super(MyModule, self).__init__()
        tf.saved_model.save(
            self,
            "/tmp/foomodel/001",
            signatures={
                tf.saved_model.DEFAULT_SERVING_SIGNATURE_DEF_KEY: self.some_method,
            },
        )

    @tf.function(input_signature=[
        tf.TensorSpec((None, ), dtype=tf.int64),
        tf.RaggedTensorSpec((None, None), dtype=tf.string),
    ])
    def some_method(self, dense, ragged):
        return tf.constant(["foobar"], dtype=tf.string)

m = MyModule()
dense = tf.constant([[1,2]], dtype=tf.int64)
ragged = tf.ragged.constant([["foo"], ["foo", "bar"]], dtype=tf.string)
some_result = m.some_method(dense, ragged)
print(f"some_result =&gt; {some_result}")

#ValueError: Python inputs incompatible with input_signature:
# inputs: (
#    tf.Tensor([[1 2]], shape=(1, 2), dtype=int64),
#    &lt;tf.RaggedTensor [[b'foo'], [b'foo', b'bar']]&gt;)
#  input_signature: (
#    TensorSpec(shape=(None,), dtype=tf.int64, name=None),
#    RaggedTensorSpec(TensorShape([None, None]), tf.string, 1, tf.int64))
	</description>
	<comments>
		<comment id='1' author='stefanondisponibile' date='2020-02-26T09:50:10Z'>
		I have tried on colab with TF version 2.0 ,2.2.0-dev20200218 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/212bd1d7e2bdd3bf0a5fdee0ba5af463/untitled676.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='stefanondisponibile' date='2020-02-26T22:12:17Z'>
		&lt;denchmark-link:https://github.com/stefanondisponibile&gt;@stefanondisponibile&lt;/denchmark-link&gt;
 I am able to pass  tf.RaggedTensor as a tf.function input signature. Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gowthamkpr/69074ae99fbe5ca41513a4cb2416001b/untitled21.ipynb&gt;here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='3' author='stefanondisponibile' date='2020-02-27T09:39:41Z'>
		&lt;denchmark-link:https://github.com/gowthamkpr&gt;@gowthamkpr&lt;/denchmark-link&gt;
  yeah, you're right, but the problem is (if I'm not missing something here), that once exported and loaded into , you won't be able to pass a  directly: you can see this also in your example by adding a cell doing this:
loaded = tf.saved_model.load("/tmp/foomodel/001")
print(loaded.signatures[tf.saved_model.DEFAULT_SERVING_SIGNATURE_DEF_KEY]._arg_keywords)
# ['ragged', 'ragged_1']

# Or inspect with saved_model_cli:
# !saved_model_cli show --dir /tmp/foomodel/001 --all
#
# MetaGraphDef with tag-set: 'serve' contains the following SignatureDefs:
# 
# signature_def['__saved_model_init_op']:
#   The given SavedModel SignatureDef contains the following input(s):
#   The given SavedModel SignatureDef contains the following output(s):
#     outputs['__saved_model_init_op'] tensor_info:
#         dtype: DT_INVALID
#         shape: unknown_rank
#         name: NoOp
#   Method name is: 
# 
# signature_def['serving_default']:
#   The given SavedModel SignatureDef contains the following input(s):
#     inputs['ragged'] tensor_info:
#         dtype: DT_STRING
#         shape: (-1)
#         name: serving_default_ragged:0
#     inputs['ragged_1'] tensor_info:
#         dtype: DT_INT64
#         shape: (-1)
#         name: serving_default_ragged_1:0
#   The given SavedModel SignatureDef contains the following output(s):
#     outputs['output_0'] tensor_info:
#         dtype: DT_STRING
#         shape: (1)
#         name: PartitionedCall:0
#   Method name is: tensorflow/serving/predict
# 
# Defined Functions:
#   Function Name: 'some_method'
#     Option #1
#       Callable with:
#         Argument #1
#           DType: RaggedTensorSpec
#           Value: RaggedTensorSpec(TensorShape([None, None]), tf.string, 1, tf.int64)
As you can see, the ragged input will be split into two different dense ones: ragged and ragged_1, respectively representing the ragged values and row splits.
I am currently working around this by computing values and row splits from my ragged inputs, and then building up my &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/RaggedTensor#from_row_splits&gt;tf.RaggedTensor.from_row_splits&lt;/denchmark-link&gt;
 inside the served function, but I found it strange that the compatibility with ragged tensors wasn't full.
What do you think?
		</comment>
		<comment id='4' author='stefanondisponibile' date='2020-02-28T01:29:50Z'>
		&lt;denchmark-link:https://github.com/stefanondisponibile&gt;@stefanondisponibile&lt;/denchmark-link&gt;
 This issue title and the initial description was misleading. Based on the initial description of the issue, the problem has been resolved. Please create a new issue pointing to the issue that you are facing now as it would be helpful for us to discuss this as a separate problem. Thanks!
		</comment>
		<comment id='5' author='stefanondisponibile' date='2020-02-28T01:29:53Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37049&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37049&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>