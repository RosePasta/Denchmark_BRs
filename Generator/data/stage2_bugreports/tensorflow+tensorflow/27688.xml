<bug id='27688' author='iLeW' open_date='2019-04-09T15:24:36Z' closed_time='2019-05-06T20:44:44Z'>
	<summary>RuntimeError: Unable to create link (name already exists) during model saving with ModelCheckpoint</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Arch Linux
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No
TensorFlow installed from (source or binary): TF 2.0 downloaded from repo
TensorFlow version (use command below):
tf-nightly-gpu-2.0-preview --&gt; 2.0.0.dev20190314
tensorflow-hub  --&gt; 0.4.0
Python version: 3.6
CUDA/cuDNN version: CUDA Version 10.0.130/ cuDNN 7.5.0
GPU model and memory: Nvidia RTX 2080 Ti 11GB (and GTX 1060 6GB)


I've downloaded an inception model from TF-Hub (specifically this one: &lt;denchmark-link:https://tfhub.dev/google/tf2-preview/inception_v3/feature_vector/2&gt;https://tfhub.dev/google/tf2-preview/inception_v3/feature_vector/2&lt;/denchmark-link&gt;
), I have added to it two Keras layers (a Dropout layer and a Dense layer) and during the training, I'm trying to save the model using the  Keras callback. Unfortunately, after one epoch and during the model saving I receive the following error:
Traceback (most recent call last):
  File "/run/media/federico/XData/virtualenvs/python36_tf2preview/lib/python3.6/site-packages/IPython/core/interactiveshell.py", line 3291, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "&lt;ipython-input-2-3945e7fb8367&gt;", line 1, in &lt;module&gt;
    runfile('/run/media/federico/XData/PycharmProjectsXData/ash/ash/prova_gan_plain_test.py', wdir='/run/media/federico/XData/PycharmProjectsXData/ash/ash')
  File "/opt/pycharm-professional/helpers/pydev/_pydev_bundle/pydev_umd.py", line 197, in runfile
    pydev_imports.execfile(filename, global_vars, local_vars)  # execute the script
  File "/opt/pycharm-professional/helpers/pydev/_pydev_imps/_pydev_execfile.py", line 18, in execfile
    exec(compile(contents+"\n", file, 'exec'), glob, loc)
  File "/run/media/federico/XData/PycharmProjectsXData/ash/ash/prova_gan_plain_test.py", line 98, in &lt;module&gt;
    main()
  File "/run/media/federico/XData/PycharmProjectsXData/ash/ash/prova_gan_plain_test.py", line 90, in main
    logdir,
  File "/run/media/federico/XData/PycharmProjectsXData/ash/ash/testers/gan_plain.py", line 85, in __init__
    self._model = self._download_and_train_model()
  File "/run/media/federico/XData/PycharmProjectsXData/ash/ash/testers/gan_plain.py", line 255, in _download_and_train_model
    callbacks=[cback_checkpoint],
  File "/run/media/federico/XData/virtualenvs/python36_tf2preview/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py", line 1508, in fit_generator
    steps_name='steps_per_epoch')
  File "/run/media/federico/XData/virtualenvs/python36_tf2preview/lib/python3.6/site-packages/tensorflow/python/keras/engine/training_generator.py", line 324, in model_iteration
    callbacks.on_epoch_end(epoch, epoch_logs)
  File "/run/media/federico/XData/virtualenvs/python36_tf2preview/lib/python3.6/site-packages/tensorflow/python/keras/callbacks.py", line 290, in on_epoch_end
    callback.on_epoch_end(epoch, logs)
  File "/run/media/federico/XData/virtualenvs/python36_tf2preview/lib/python3.6/site-packages/tensorflow/python/keras/callbacks.py", line 892, in on_epoch_end
    self.model.save_weights(filepath, overwrite=True)
  File "/run/media/federico/XData/virtualenvs/python36_tf2preview/lib/python3.6/site-packages/tensorflow/python/keras/engine/network.py", line 1395, in save_weights
    hdf5_format.save_weights_to_hdf5_group(f, self.layers)
  File "/run/media/federico/XData/virtualenvs/python36_tf2preview/lib/python3.6/site-packages/tensorflow/python/keras/saving/hdf5_format.py", line 693, in save_weights_to_hdf5_group
    param_dset = g.create_dataset(name, val.shape, dtype=val.dtype)
  File "/run/media/federico/XData/virtualenvs/python36_tf2preview/lib/python3.6/site-packages/h5py/_hl/group.py", line 139, in create_dataset
    self[name] = dset
  File "/run/media/federico/XData/virtualenvs/python36_tf2preview/lib/python3.6/site-packages/h5py/_hl/group.py", line 371, in __setitem__
    h5o.link(obj.id, self.id, name, lcpl=lcpl, lapl=self._lapl)
  File "h5py/_objects.pyx", line 54, in h5py._objects.with_phil.wrapper
  File "h5py/_objects.pyx", line 55, in h5py._objects.with_phil.wrapper
  File "h5py/h5o.pyx", line 202, in h5py.h5o.link
RuntimeError: Unable to create link (name already exists)
Highlighting the error: RuntimeError: Unable to create link (name already exists)
Describe the expected behavior
I'm expecting to be able to use the ModelCheckpoint callback to save the (best) model.
Alternatively, I'm also expecting to be able to save the model with the model.save(filepath) function.

You could reproduce the error on the following TF-Hub Colab page: &lt;denchmark-link:https://colab.research.google.com/github/tensorflow/hub/blob/master/examples/colab/tf2_image_retraining.ipynb#scrollTo=CCpdfXPsh47Q&gt;https://colab.research.google.com/github/tensorflow/hub/blob/master/examples/colab/tf2_image_retraining.ipynb#scrollTo=CCpdfXPsh47Q&lt;/denchmark-link&gt;

adding a cell with the ModelCheckpoint code
cback_checkpoint = tf.keras.callbacks.ModelCheckpoint(
            filepath="best.h5",
            verbose=1,
            save_best_only=True,
        )  
and then adding the callback to the fit_generator function of the model:
steps_per_epoch = train_generator.samples // train_generator.batch_size
validation_steps = valid_generator.samples // valid_generator.batch_size
hist = model.fit_generator(
    train_generator,
    epochs=5, steps_per_epoch=steps_per_epoch,
    validation_data=valid_generator,
    validation_steps=validation_steps,
    callbacks=[cback_checkpoint]).history

I've found some issues online regarding a similar problem like &lt;denchmark-link:https://groups.google.com/forum/#!topic/keras-users/my13TUe2dlU&gt;this&lt;/denchmark-link&gt;
 and issues: &lt;denchmark-link:https://github.com/keras-team/keras/issues/5820&gt;#5280&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/keras-team/keras/issues/6844&gt;#6844&lt;/denchmark-link&gt;
 and the more recent &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/26811&gt;#26811&lt;/denchmark-link&gt;
. Many of them speak about some problem regarding the naming of the layers (or weights) or about creating the  with  or . I have tried all the proposed approaches but without success.
Even with  Keras function I face the same problem.
: Please follow &lt;denchmark-link:https://colab.research.google.com/drive/1_sDTb1DLaoBlNGbRfKqMWgWV6B2DaYUv&gt;this Colab link&lt;/denchmark-link&gt;
 to have all the code set up to be reproduced.
	</description>
	<comments>
		<comment id='1' author='iLeW' date='2019-04-16T04:50:44Z'>
		&lt;denchmark-link:https://github.com/iLeW&gt;@iLeW&lt;/denchmark-link&gt;
 When I try to run the google colab that you have provided, unfortunately I did not get any error. I recommend you to run it once and check. Thanks!
		</comment>
		<comment id='2' author='iLeW' date='2019-04-16T07:13:13Z'>
		&lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 I have just tried again, and it gives me the same error:
h5py/_objects.pyx in h5py._objects.with_phil.wrapper()

h5py/_objects.pyx in h5py._objects.with_phil.wrapper()

h5py/h5o.pyx in h5py.h5o.link()

RuntimeError: Unable to create link (name already exists) 
Have you added, before running it, the line of code as indicated in my post? For your convenience, I filled out the Colab for you. You can find it at &lt;denchmark-link:https://colab.research.google.com/drive/1_sDTb1DLaoBlNGbRfKqMWgWV6B2DaYUv&gt;this link&lt;/denchmark-link&gt;
 with the necessary changes (i.e.: the callback added to the model). Please try to run this configuration. It should give you the same  error.
		</comment>
		<comment id='3' author='iLeW' date='2019-04-17T06:53:15Z'>
		I am having the same problem at &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/27909&gt;#27909&lt;/denchmark-link&gt;
 with 1.13.1 and provided the reproducible codes and some analysis.
		</comment>
		<comment id='4' author='iLeW' date='2019-04-20T01:19:29Z'>
		The same problem happened to me, Tensorflow2.0, Cuda:10.0, Python3.6.8.
Update: previously I used Pycharm2019.1 to write and run the code, but now when I work in the Jupyter Notebook with the same system configuration, the problem seems to be resolved. it's weird.
		</comment>
		<comment id='5' author='iLeW' date='2019-05-02T02:29:28Z'>
		I also encountered the same problem.
Tensorflow:2.0.0a0
Cuda:10.0
Python:3.6.8
IDE:Jupyter  NoteBook
		</comment>
		<comment id='6' author='iLeW' date='2019-05-02T23:13:38Z'>
		Thanks for the report. Confirming I can repro. Feel free to add more information while we're looking into it.
		</comment>
		<comment id='7' author='iLeW' date='2019-05-03T15:59:44Z'>
		The crash of Model.save() when using hub.KerasLayer likely needs to be fixed in tensorflow-hub, not tensorflow. I've filed issue &lt;denchmark-link:https://github.com/tensorflow/hub/issues/287&gt;tensorflow/hub#287&lt;/denchmark-link&gt;
 for that.
Can this issue here be closed then?
		</comment>
		<comment id='8' author='iLeW' date='2019-05-06T20:44:44Z'>
		
The crash of Model.save() when using hub.KerasLayer likely needs to be fixed in tensorflow-hub, not tensorflow. I've filed issue tensorflow/hub#287 for that.
Can this issue here be closed then?

Sounds good - thanks arnoegw@! Let's follow up in &lt;denchmark-link:https://github.com/tensorflow/hub/issues/287&gt;tensorflow/hub#287&lt;/denchmark-link&gt;
 for this issue.
		</comment>
		<comment id='9' author='iLeW' date='2019-05-06T20:44:46Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=27688&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=27688&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='iLeW' date='2019-05-10T11:36:59Z'>
		FYI - issue &lt;denchmark-link:https://github.com/tensorflow/hub/issues/287&gt;tensorflow/hub#287&lt;/denchmark-link&gt;
 has been solved (upgrade Hub module version to /3).
		</comment>
		<comment id='11' author='iLeW' date='2019-05-10T16:49:27Z'>
		
FYI - issue tensorflow/hub#287 has been solved (upgrade Hub module version to /3).

Thanks for the updates!
		</comment>
		<comment id='12' author='iLeW' date='2019-06-20T15:44:24Z'>
		I also encountered the same problem. Note it only occurs with eager execution enabled.
Tensorflow:1.13.1
Python:3.6.8 Anaconda Inc.
IDE:Jupyter NoteBook
I was able to solve the .save error with the following snippet. Is this a good idea?
&lt;denchmark-code&gt;from tensorflow.python.keras import backend as K
   
with K.name_scope(model.optimizer.__class__.__name__):
    for i, var in enumerate(model.optimizer.weights):
        name = 'variable{}'.format(i)
        model.optimizer.weights[i] = tf.Variable(var, name=name)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='13' author='iLeW' date='2019-07-03T06:54:02Z'>
		For the error with eager execution, make sure you're using OptimizerV2 from here: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tensorflow/python/keras/optimizer_v2&gt;https://github.com/tensorflow/tensorflow/tree/master/tensorflow/python/keras/optimizer_v2&lt;/denchmark-link&gt;
. The optimizers in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/optimizers.py&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/optimizers.py&lt;/denchmark-link&gt;
 don't inherit from Trackable so the variables aren't named correctly.
		</comment>
		<comment id='14' author='iLeW' date='2019-07-13T11:57:10Z'>
		&lt;denchmark-link:https://github.com/ppham27&gt;@ppham27&lt;/denchmark-link&gt;
 I can save keras model in  fine until I trigger  that is when I cannot save the model. When I call  the  error immediately occurs if eager execution is enabled. If I set  to False then it will let me save. But I think this is a stupid workaround.
I see that it's related to the optimizer somehow like you mentioned in your comment. So I tried importing the Adam optimizer from tensorflow.python.keras.optimizer_v2.adam.Adam and it allows me to save the model. But another error occurs when I try to load the model: TypeError: Unexpected keyword argument passed to optimizer: name
So what I do now is the stupid workaround:
# save
model.save('mnist.h5', include_optimizer=False)

#load 
mod = tf.keras.models.load_model('mnist.h5') 
mod.compile('adam', 'categorical_crossentropy', metrics=['acc']) # compile again because there is no optimizer
I don't know if just compiling the model is enough though.
		</comment>
		<comment id='15' author='iLeW' date='2019-07-13T16:58:04Z'>
		Hi &lt;denchmark-link:https://github.com/off99555&gt;@off99555&lt;/denchmark-link&gt;
,
Sorry, can't seem to figure out why that would be occurring without more code.
We have at least one test in the test suite that saves the model with an optimizer: 


tensorflow/tensorflow/python/keras/saving/hdf5_format_test.py


        Lines 810 to 811
      in
      3cb03d0






 @test_util.run_in_graph_and_eager_modes 



 def test_functional_model_with_custom_loss_and_metric(self): 





I changed the line SGD to Adam and the test still passes. Maybe try upgrading to a later version of Tensorflow?
		</comment>
		<comment id='16' author='iLeW' date='2019-07-13T18:46:06Z'>
		It seems to be a version issue. I tested with tensorflow2.0 and there is no problem (because there is no tf.enable_eager_execution()). I cannot upgrade the version easily considering that I followed this installation guide that only has version 1.13 as the latest from conda: &lt;denchmark-link:https://www.pugetsystems.com/labs/hpc/The-Best-Way-to-Install-TensorFlow-with-GPU-Support-on-Windows-10-Without-Installing-CUDA-1187/&gt;https://www.pugetsystems.com/labs/hpc/The-Best-Way-to-Install-TensorFlow-with-GPU-Support-on-Windows-10-Without-Installing-CUDA-1187/&lt;/denchmark-link&gt;

Here is the exact code I used to reproduce the error: (Tensorflow-gpu-1.13 installed using conda)
import tensorflow as tf   # only work from tensorflow==1.9.0-rc1 and after
tf.enable_eager_execution()
from tensorflow.python.keras.optimizer_v2.adam import Adam
import numpy as np

def keras_model():
    from tensorflow.keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Dropout, Input

    inputs = Input(shape=(28, 28, 1))
    x = Conv2D(32, (3, 3),activation='relu', padding='valid')(inputs)
    x = MaxPool2D(pool_size=(2, 2))(x)
    x = Conv2D(64, (3, 3), activation='relu')(x)
    x = MaxPool2D(pool_size=(2, 2))(x)
    x = Flatten()(x)
    x = Dense(512, activation='relu')(x)
    x = Dropout(0.5)(x)
    outputs = Dense(10, activation='softmax')(x)

    return tf.keras.Model(inputs, outputs)

model = keras_model()
model.compile(Adam(), 'categorical_crossentropy', metrics=['acc'])
# model.fit(np.random.random((1000, 28, 28, 1)), np.random.random((1000, 10)))
model.save('mnist.h5') # will raise RuntimeError: Unable to create link (if optimizer is 'adam' and model.fit() is run)
model2 = tf.keras.models.load_model('mnist.h5') # it will raise TypeError: Unexpected keyword argument passed to optimizer: name (if optimizer is Adam() from optimizer_v2)
If I replace Adam() with 'adam' there would be no TypeError mentioned above. But the problem arises when I try to fit the keras model. If I call model.fit(dataset), I won't be able to save the model anymore. The RuntimeError: Unable to create link will appear.
To show the  RuntimeError, you just need to uncomment model.fit() and change Adam() to 'adam'.
The goal is to be able to save and load the model after model.fit() with eager execution. So please help me figuring it out.
		</comment>
		<comment id='17' author='iLeW' date='2019-07-13T22:43:37Z'>
		Hmm, there appears to be a mismatch in the optimizer being loaded. Really, my advice would be to upgrade to at least TF1.14, but it might work passing in custom_objects={'adam': Adam} as a keyword argument into tf.keras.models.load_model, where Adam is the v2 version.
Or putting this at the top of your program:
&lt;denchmark-code&gt;import os

os.environ['TF2_BEHAVIOR'] = '1'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='18' author='iLeW' date='2019-07-14T09:49:18Z'>
		That trick about custom_objects seem to work!
I changed the loading code to model2 = tf.keras.models.load_model('mnist.h5', custom_objects=dict(adam=Adam)) and it is able to load using Adam v2 optimizer.
I hope that there is no problem with this approach so I would use it for now.
		</comment>
		<comment id='19' author='iLeW' date='2019-07-14T23:29:09Z'>
		I was using a TF.Hub model based on this tutorial &lt;denchmark-link:https://www.tensorflow.org/tutorials/images/hub_with_keras&gt;https://www.tensorflow.org/tutorials/images/hub_with_keras&lt;/denchmark-link&gt;
  and change the TF hub model from version 2 to 4.
and now works for me:
&lt;denchmark-link:https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4&gt;https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4&lt;/denchmark-link&gt;

		</comment>
		<comment id='20' author='iLeW' date='2020-02-05T08:20:28Z'>
		WORKING SOLUTION:

Go to: Miniconda3\Lib\site-packages or wherever h5py is installed.
Delete h5py Folder
Delete h5py-2.10.0.dist-info Folder (This might be different if you have a different version).
Install h5py again.

It worked for me after a long search. Finally, I tried to delete it manually and reinstall it. IT WORKED!!!!!
By uninstalling them using cmd, pip, anaconda Some files might be stuck and will cause errors even after installing a different version.
		</comment>
		<comment id='21' author='iLeW' date='2020-02-06T10:09:12Z'>
		I got the same error in Tensorflow 2.1 when calling save_weigths("model.h5", overwrite=True).
None of the above mentioned fixes worked for me (I am not using hub and optimizer is passed as SGD(...)).
Are there any other solutions to this?
Update:
Likely related to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/26811&gt;#26811&lt;/denchmark-link&gt;
 as I am using customer layer in which I call  instead of .
		</comment>
		<comment id='22' author='iLeW' date='2020-03-06T20:23:46Z'>
		The reason why it didn't work was because I had the same namestrings for all the weights in my custom keras layers.
Lesson: If you make keras layers, give them different name strings!
&lt;denchmark-code&gt;class LayerNormA(tf.keras.Model):
    def __init__(self, features, name, initial_values=None, eps=1e-6):
        super(LayerNormA, self).__init__()
        if initial_values is None:
            gamma_init = tf.ones_initializer()
            gamme_initial_value = gamma_init(shape=[features])
            beta_init = tf.zeros_initializer()
            beta_initial_value = beta_init(shape=[features])
        else:
            gamme_initial_value, beta_initial_value = initial_values
        # make different name
        self.gamma = tf.Variable(initial_value=gamme_initial_value, trainable=True, name=name + "gamma")
        self.beta = tf.Variable(initial_value=beta_initial_value, trainable=True, name=name + "beta")
        self.eps = eps

    def call(self, x):
        mean = tf.math.reduce_mean(x, axis=-1, keepdims=True)
        # std = tf.math.reduce_std(x, axis=-1, keepdims=True)
        N = x.shape[-1] - 1
        std = tf.math.sqrt(tf.math.reduce_sum(tf.math.pow((x - mean), 2), axis=-1, keepdims=True)/N)
        return self.gamma * (x - mean) / (std + self.eps) + self.beta
&lt;/denchmark-code&gt;

		</comment>
		<comment id='23' author='iLeW' date='2020-06-27T16:36:36Z'>
		I get the same problem when I enable eager execution, without it everything works fine
		</comment>
	</comments>
</bug>