<bug id='26707' author='TahaK' open_date='2019-03-14T16:44:12Z' closed_time='2019-08-15T18:22:03Z'>
	<summary>[TF2.0] Sequential API serialization bug</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
docker image from tensorflow/tensorflow:2.0.0a0-gpu-jupyter
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary):
binary
TensorFlow version (use command below):
git version 'v1.12.0-9492-g2c319fb415'
tensorflow version '2.0.0-alpha0'
Python version:
2.7
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
cuda version 415.27
GPU model and memory:
GTX 1080Ti

Describe the current behavior
If I serialize a model built using the Sequential API and recreate the model from the config it fails.
Describe the expected behavior
The model to be initialized from the configuration
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
import tensorflow as tf
import numpy as np

data = np.random.random((1000, 32))
labels = np.random.random((1000, 10))
model = tf.keras.models.Sequential([
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10, activation='softmax')
])

# The compile step specifies the training configuration
model.compile(optimizer=tf.keras.optimizers.RMSprop(0.001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.fit(data, labels, batch_size=32, epochs=5)
config = model.get_config()
new_model = tf.keras.Model.from_config(config)
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
&lt;denchmark-code&gt;------------------------------------------------------------
KeyError                   Traceback (most recent call last)
&lt;ipython-input-48-db6b212995c2&gt; in &lt;module&gt;()
     12 model.fit(data, labels, batch_size=32, epochs=5)
     13 config = model.get_config()
---&gt; 14 new_model = keras.Model.from_config(config)

/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/network.pyc in from_config(cls, config, custom_objects)
   1229     # First, we create all layers and enqueue nodes to be processed
   1230     for layer_data in config['layers']:
-&gt; 1231       process_layer(layer_data)
   1232     # Then we process nodes in order of layer depth.
   1233     # Nodes that cannot yet be processed (if the inbound node

/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/network.pyc in process_layer(layer_data)
   1208           ValueError: In case of improperly formatted `layer_data` dict.
   1209       """
-&gt; 1210       layer_name = layer_data['name']
   1211 
   1212       # Instantiate layer.

KeyError: 'name'
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;print(config)
{'build_input_shape': (None, 32),
 'layers': [{'class_name': 'Dense',
   'config': {'activation': 'relu',
    'activity_regularizer': None,
    'bias_constraint': None,
    'bias_initializer': {'class_name': 'Zeros', 'config': {}},
    'bias_regularizer': None,
    'dtype': 'float32',
    'kernel_constraint': None,
    'kernel_initializer': {'class_name': 'GlorotUniform',
     'config': {'seed': None}},
    'kernel_regularizer': None,
    'name': 'dense_6',
    'trainable': True,
    'units': 128,
    'use_bias': True}},
  {'class_name': 'Dropout',
   'config': {'dtype': 'float32',
    'name': 'dropout_3',
    'noise_shape': None,
    'rate': 0.2,
    'seed': None,
    'trainable': True}},
  {'class_name': 'Dense',
   'config': {'activation': 'softmax',
    'activity_regularizer': None,
    'bias_constraint': None,
    'bias_initializer': {'class_name': 'Zeros', 'config': {}},
    'bias_regularizer': None,
    'dtype': 'float32',
    'kernel_constraint': None,
    'kernel_initializer': {'class_name': 'GlorotUniform',
     'config': {'seed': None}},
    'kernel_regularizer': None,
    'name': 'dense_7',
    'trainable': True,
    'units': 10,
    'use_bias': True}}],
 'name': 'sequential_3'}
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='TahaK' date='2019-03-16T03:21:48Z'>
		I guess you have forgotten to save the model.You can use model.save() or model.save_weights().
An example can be seen here :- &lt;denchmark-link:https://machinelearningmastery.com/save-load-keras-deep-learning-models/&gt;https://machinelearningmastery.com/save-load-keras-deep-learning-models/&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='TahaK' date='2019-03-16T15:19:11Z'>
		I am interested in architecture only saving. As can be seen in the tensorflow documentation &lt;denchmark-link:https://www.tensorflow.org/alpha/guide/keras/saving_and_serializing#architecture-only_saving&gt;https://www.tensorflow.org/alpha/guide/keras/saving_and_serializing#architecture-only_saving&lt;/denchmark-link&gt;

The documentation says that both Functional and Sequential APIs support this functionality. However only the Functional API works as the documentation says.
Here is the same example written in the Functional API and it works without a problem.
import tensorflow as tf
import numpy as np

data = np.random.random((1000, 32))
labels = np.random.random((1000, 10))

inputs = tf.keras.Input(shape=(32,))
x = tf.keras.layers.Dense(128, activation='relu')(inputs)
x = tf.keras.layers.Dropout(0.2)(x)
outputs = tf.keras.layers.Dense(10, activation='softmax')(x)

model = tf.keras.Model(inputs=inputs, outputs=outputs)
# The compile step specifies the training configuration
model.compile(optimizer=tf.keras.optimizers.RMSprop(0.001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.fit(data, labels, batch_size=32, epochs=5)
config = model.get_config()
new_model = tf.keras.Model.from_config(config)
		</comment>
		<comment id='3' author='TahaK' date='2019-08-02T17:49:58Z'>
		&lt;denchmark-link:https://github.com/TahaK&gt;@TahaK&lt;/denchmark-link&gt;
 There are approaches (, ) other than  to save only model architecture. Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/65497d8e97423ea7aac128da24ddd3b8/tf_26707.ipynb&gt;gist&lt;/denchmark-link&gt;
 that uses  and  approaches to save architecture of the model. Thanks!
		</comment>
		<comment id='4' author='TahaK' date='2019-08-15T18:22:03Z'>
		Automatically closing this out since I understand it to be resolved, but please let me know if I'm mistaken.Thanks!
		</comment>
		<comment id='5' author='TahaK' date='2019-08-15T18:22:04Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=26707&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=26707&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='TahaK' date='2019-11-26T10:06:43Z'>
		While this issue has already been closed, I guess the problem still persists?
With TensorFlow 2.0.0,  and  are still incompatible.
According to &lt;denchmark-link:https://www.tensorflow.org/guide/keras/save_and_serialize&gt;https://www.tensorflow.org/guide/keras/save_and_serialize&lt;/denchmark-link&gt;
, I would expect the config serialization / deserialization to be compatible with each-other (as I think they were in TensorFlow 1.13.1).
Has the config serialization / deserialization been deprecated (and meant to be superseded by JSON serialization / deserialization)?
Example, adapted from &lt;denchmark-link:https://github.com/TahaK&gt;@TahaK&lt;/denchmark-link&gt;
, with the config serialization / deserialization added.
import tensorflow as tf
import numpy as np

print("TensorFlow " + tf.__version__)

data = np.random.random((1000, 32))
labels = np.random.random((1000, 10))
model = tf.keras.models.Sequential([
      tf.keras.layers.Flatten(input_shape=(32,)),
        tf.keras.layers.Dense(128, activation='relu',),
          tf.keras.layers.Dropout(0.2),
            tf.keras.layers.Dense(10, activation='softmax')
            ])

# The compile step specifies the training configuration
model.compile(optimizer=tf.keras.optimizers.RMSprop(0.001),
                      loss='categorical_crossentropy',
                                    metrics=['accuracy'])

model.fit(data, labels, batch_size=32, epochs=5)
# json approach
json_config = model.to_json()
new_model = tf.keras.models.model_from_json(json_config)
# model cloning
cloned_model=tf.keras.models.clone_model(model)
# config approach
dict_config = model.get_config()
new_model2 = tf.keras.models.model_from_config(dict_config)

model.summary()
new_model.summary()
cloned_model.summary()
new_model2.summary()
Output:
&lt;denchmark-code&gt;TensorFlow 2.0.0
Train on 1000 samples
Epoch 1/5
1000/1000 [==============================] - 1s 503us/sample - loss: 12.6396 - accuracy: 0.0990
Epoch 2/5
1000/1000 [==============================] - 0s 43us/sample - loss: 14.7099 - accuracy: 0.0940
Epoch 3/5
1000/1000 [==============================] - 0s 40us/sample - loss: 16.9181 - accuracy: 0.0840
Epoch 4/5
1000/1000 [==============================] - 0s 39us/sample - loss: 18.8631 - accuracy: 0.0900
Epoch 5/5
1000/1000 [==============================] - 0s 39us/sample - loss: 21.1111 - accuracy: 0.0980
Traceback (most recent call last):
  File "test2.py", line 28, in &lt;module&gt;
    new_model2 = tf.keras.models.model_from_config(dict_config)
  File "/home/?/.conda/envs/nn-test/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/model_config.py", line 55, in model_from_config
    return deserialize(config, custom_objects=custom_objects)
  File "/home/?/.conda/envs/nn-test/lib/python3.7/site-packages/tensorflow_core/python/keras/layers/serialization.py", line 94, in deserialize
    layer_class_name = config['class_name']
KeyError: 'class_name'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='TahaK' date='2019-11-26T20:49:41Z'>
		&lt;denchmark-link:https://github.com/Sussch&gt;@Sussch&lt;/denchmark-link&gt;
 You can use . I have used it for instantiating model object to load successfully as shown below.
&lt;denchmark-code&gt;# config approach
dict_config = model.get_config()
#new_model2 = tf.keras.models.model_from_config(dict_config)
new_model2 = tf.keras.Sequential.from_config(dict_config)
new_model2.summary()

&lt;/denchmark-code&gt;

&lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/19989131373b9fb0837cab5968307008/untitled672.ipynb&gt;Here&lt;/denchmark-link&gt;
 is the gist for your reference. Thanks!
		</comment>
		<comment id='8' author='TahaK' date='2019-11-27T06:48:27Z'>
		Ah, thank you.
Indeed, it says , not  in the guide at &lt;denchmark-link:https://www.tensorflow.org/guide/keras/save_and_serialize&gt;https://www.tensorflow.org/guide/keras/save_and_serialize&lt;/denchmark-link&gt;
.
Sorry, I must have missed it.
I now tried keras.Model.from_config and got a slightly different exception:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "test2.py", line 29, in &lt;module&gt;
    new_model2 = tf.keras.Model.from_config(dict_config)
  File "/home/?/.conda/envs/nn-test/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/network.py", line 906, in from_config
    config, custom_objects)
  File "/home/?/.conda/envs/nn-test/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/network.py", line 1842, in reconstruct_from_config
    process_layer(layer_data)
  File "/home/?/.conda/envs/nn-test/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/network.py", line 1816, in process_layer
    layer_name = layer_data['name']
KeyError: 'name'
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 Your suggested  works perfectly.
Could the guide (&lt;denchmark-link:https://www.tensorflow.org/guide/keras/save_and_serialize&gt;https://www.tensorflow.org/guide/keras/save_and_serialize&lt;/denchmark-link&gt;
) be updated accordingly?
Edit: It seems that the guide does actually say that it is different for Sequential models.

Saving for custom subclasses of Model is covered in the section "Saving Subclassed Models". The APIs in this case are slightly different than for Sequential or Functional models.

Thank you!
		</comment>
	</comments>
</bug>