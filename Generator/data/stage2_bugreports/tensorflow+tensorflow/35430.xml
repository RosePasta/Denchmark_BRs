<bug id='35430' author='0x0badc0de' open_date='2019-12-26T17:37:35Z' closed_time='2020-01-23T17:59:33Z'>
	<summary>ReLU layer doesn't handle integer dtype</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Debian GNU/Linux 10 (buster)
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v2.1.0-rc0-47-g064e153 2.1.0-rc1
Python version: 3.7.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: None
GPU model and memory: NA

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
An exception during tf.keras.layers.ReLU construction with integer dtype and max_value
Describe the expected behavior
A layer is properly constructed and functional
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
input = tf.keras.layers.Input(shape=(), name='x', dtype='int64')
y = tf.keras.layers.ReLU(max_value=100, dtype='int64')(input)
&lt;/denchmark-code&gt;

Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
&lt;denchmark-code&gt;---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py in _AssertCompatible(values, dtype)
    323   try:
--&gt; 324     fn(values)
    325   except ValueError as e:

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py in inner(values)
    262   def inner(values):
--&gt; 263     _ = [_check_failed(v) for v in nest.flatten(values)
    264          if not isinstance(v, expected_types)]

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py in &lt;listcomp&gt;(.0)
    263     _ = [_check_failed(v) for v in nest.flatten(values)
--&gt; 264          if not isinstance(v, expected_types)]
    265   return inner

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py in _check_failed(v)
    247   # it is safe to use here.
--&gt; 248   raise ValueError(v)
    249 

ValueError: 0.0

During handling of the above exception, another exception occurred:

TypeError                                 Traceback (most recent call last)
&lt;ipython-input-16-2baabe6a9f04&gt; in &lt;module&gt;
      1 input = tf.keras.layers.Input(shape=(), name='x', dtype='int64')
----&gt; 2 y = tf.keras.layers.ReLU(max_value=100, dtype='int64')(input)

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer.py in __call__(self, inputs, *args, **kwargs)
    771                     not base_layer_utils.is_in_eager_or_tf_function()):
    772                   with auto_control_deps.AutomaticControlDependencies() as acd:
--&gt; 773                     outputs = call_fn(cast_inputs, *args, **kwargs)
    774                     # Wrap Tensors in `outputs` in `tf.identity` to avoid
    775                     # circular dependencies.

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/layers/advanced_activations.py in call(self, inputs)
    317                   alpha=self.negative_slope,
    318                   max_value=self.max_value,
--&gt; 319                   threshold=self.threshold)
    320 
    321   def get_config(self):

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/backend.py in relu(x, alpha, max_value, threshold)
   4373   if clip_max:
   4374     max_value = _constant_to_tensor(max_value, x.dtype.base_dtype)
-&gt; 4375     zero = _constant_to_tensor(0., x.dtype.base_dtype)
   4376     x = clip_ops.clip_by_value(x, zero, max_value)
   4377 

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/backend.py in _constant_to_tensor(x, dtype)
    676       A tensor.
    677   """
--&gt; 678   return constant_op.constant(x, dtype=dtype)
    679 
    680 

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py in constant(value, dtype, shape, name)
    256   """
    257   return _constant_impl(value, dtype, shape, name, verify_shape=False,
--&gt; 258                         allow_broadcast=True)
    259 
    260 

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py in _constant_impl(value, dtype, shape, name, verify_shape, allow_broadcast)
    294       tensor_util.make_tensor_proto(
    295           value, dtype=dtype, shape=shape, verify_shape=verify_shape,
--&gt; 296           allow_broadcast=allow_broadcast))
    297   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)
    298   const_tensor = g._create_op_internal(  # pylint: disable=protected-access

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape, allow_broadcast)
    449       nparray = np.empty(shape, dtype=np_dt)
    450     else:
--&gt; 451       _AssertCompatible(values, dtype)
    452       nparray = np.array(values, dtype=np_dt)
    453       # check to them.

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py in _AssertCompatible(values, dtype)
    329     else:
    330       raise TypeError("Expected %s, got %s of type '%s' instead." %
--&gt; 331                       (dtype.name, repr(mismatch), type(mismatch).__name__))
    332 
    333 

TypeError: Expected int64, got 0.0 of type 'float' instead.
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;tf.constant(0., dtype='int64')
&lt;/denchmark-code&gt;

fails as well but with different backtrace.
tf_nightly-2.1.0.dev20191226 is affected too.
	</description>
	<comments>
		<comment id='1' author='0x0badc0de' date='2019-12-27T03:50:13Z'>
		&lt;denchmark-link:https://github.com/0x0badc0de&gt;@0x0badc0de&lt;/denchmark-link&gt;
 ,
I was able to replicate the issue for  , works fine for, &lt;denchmark-link:https://colab.sandbox.google.com/gist/oanush/2ae5d64fed93e8376bc70c37dea8e35f/35430.ipynb&gt;gist&lt;/denchmark-link&gt;
 of colab replicating the issue.
		</comment>
		<comment id='2' author='0x0badc0de' date='2020-01-19T15:08:34Z'>
		Added PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/36037&gt;#36037&lt;/denchmark-link&gt;
 for the fix.
		</comment>
		<comment id='3' author='0x0badc0de' date='2020-01-23T17:59:35Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35430&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35430&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>