<bug id='35823' author='pj1989' open_date='2020-01-13T17:12:58Z' closed_time='2020-02-28T18:08:48Z'>
	<summary>keras.models.Model.fit_generator returns  "RuntimeError: You must compile your model before using it." even specifying all the input shapes</summary>
	<description>
System information

Python 3.7
Keras 2.2.4

** Issue **
When using fit_generator in keras.models.Model returns RuntimeError: You must compile your model before using it.
Following the reply &lt;denchmark-link:https://stackoverflow.com/questions/52721018/keras-fit-generator-raise-you-must-compile-your-model-before-using-it-error&gt;here&lt;/denchmark-link&gt;
, I specified  (and also ) both in  layer and first  layer. But this didn't solve the error.
I don't know if it is a related issue, but manually generating one batch of data and using model.fit raise AttributeError: 'Model' object has no attribute '_output_tensor_cache' which looks even more suspicious
** Minimal working example **
&lt;denchmark-code&gt;from keras.utils import Sequence

from keras.models import Model, Sequential
from keras.layers import Input, Conv1D, Dense, Flatten

import numpy.random

def create_model():

    input_layer = Input(shape=(60,1), batch_shape=(50,60,1))
    out = Conv1D(64, 3, activation='relu', input_shape=(60, 1))(input_layer)
    out = Flatten()(out)
    out = Dense(1)(out)

    #create model
    model = Model()
    model.compile(inputs    = input_layer,
                  outputs   = out,
                  loss      = 'mse',
                  optimizer = 'adam',
                  )

    return model

class examples_generator(Sequence):

    def __getitem__(self, _):
        batch  = numpy.random.rand(50, 60, 1)
        target = numpy.random.rand(50, 1)
        return (batch, target)

    def __len__(self):
        return 2

if __name__ == '__main__':
    model = create_model()
    training_batch_generator = examples_generator()

    # This will generate RuntimeError: You must compile your model before using it.
    model.fit_generator(training_batch_generator,
                        steps_per_epoch=1,
                        epochs=1,
                        verbose=2)

    one_batch = training_batch_generator[None]
     # This will generate AttributeError: 'Model' object has no attribute '_output_tensor_cache'
    model.fit(one_batch[0], one_batch[1])
&lt;/denchmark-code&gt;

Using an identical model created using keras.models.Sequential works perfectly instead. Defining:
&lt;denchmark-code&gt;def create_sequential_model():

    #create model
    model = Sequential()
    model.add(Conv1D(64, 3, activation='relu', input_shape=(60, 1)))
    model.add(Flatten())
    model.add(Dense(1))
    model.compile(loss      = 'mse',
                  optimizer = 'adam',
                  )

    return model

model = create_sequential_model()

# Works
model.fit_generator(training_batch_generator,
                                steps_per_epoch=100,
                                epochs=3,
                                verbose=2)

# Works
one_batch = training_batch_generator[None]
model.fit(one_batch[0], one_batch[1])
&lt;/denchmark-code&gt;

and replacing create_model with create_sequential_model in the example above.
	</description>
	<comments>
		<comment id='1' author='pj1989' date='2020-01-23T00:23:35Z'>
		&lt;denchmark-link:https://github.com/pj1989&gt;@pj1989&lt;/denchmark-link&gt;
 I am running into a different error. Please find my gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gowthamkpr/9845da51bda0e78f94c142ace16adda3/untitled276.ipynb&gt;here&lt;/denchmark-link&gt;
. Also please use Keras that embedded in Tensorflow as keras has been integrated into Tensorflow.
Thanks!
		</comment>
		<comment id='2' author='pj1989' date='2020-01-31T10:53:56Z'>
		Using tensorflow.keras indeed solved changed the error.
I'm also getting your same error.
I tried to understand the causes, but it's not completely straight forward.
What I understood so far:

The error is caused on line 3047 of training.py by the fact that self.output is None (we are inside the model class, so self should be our model as far as I understand)

Traceback:
&lt;denchmark-code&gt;  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\engine\training.py", line 1297, in fit_generator
    steps_name='steps_per_epoch')

  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\engine\training_generator.py", line 265, in model_iteration
    batch_outs = batch_function(*batch_data)

  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\engine\training.py", line 973, in train_on_batch
    class_weight=class_weight, reset_metrics=reset_metrics)

  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\engine\training_v2_utils.py", line 253, in train_on_batch
    extract_tensors_from_dataset=True)

  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\engine\training.py", line 2433, in _standardize_user_data
    self._compile_from_inputs(all_inputs, y_input, x, y)

  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\engine\training.py", line 2668, in _compile_from_inputs
    experimental_run_tf_function=self._experimental_run_tf_function)

  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\training\tracking\base.py", line 457, in _method_wrapper
    result = method(self, *args, **kwargs)

  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\engine\training.py", line 343, in compile
    endpoint.create_training_target(t, run_eagerly=self.run_eagerly)

  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\engine\training.py", line 3038, in create_training_target
    self.loss_fn, K.dtype(self.output))

  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\backend.py", line 1249, in dtype
    return x.dtype.base_dtype.name

AttributeError: 'NoneType' object has no attribute 'dtype'
&lt;/denchmark-code&gt;


On TF documentation (here) fit_generator is marked as deprecated (the same is not true on Keras website (here).  Switching from fit_generator to fit changes the traceback and the line where the error arises, but not the error itself that is always generated by outputs being None.

Traceback:
&lt;denchmark-code&gt;  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\engine\training.py", line 728, in fit
    use_multiprocessing=use_multiprocessing)

  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\engine\training_v2.py", line 224, in fit
    distribution_strategy=strategy)

  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\engine\training_v2.py", line 547, in _process_training_inputs
    use_multiprocessing=use_multiprocessing)

  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\engine\training_v2.py", line 610, in _process_inputs
    training_v2_utils._prepare_model_with_inputs(model, adapter.get_dataset())

  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\engine\training_v2_utils.py", line 190, in _prepare_model_with_inputs
    model._compile_from_inputs(inputs, target, dataset, None)

  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\engine\training.py", line 2630, in _compile_from_inputs
    target, self.outputs)

  File "C:\Users\Luca.amerio\AppData\Local\Continuum\anaconda3\lib\site-packages\tensorflow_core\python\keras\engine\training_utils.py", line 1242, in cast_if_floating_dtype_and_mismatch
    return cast_single_tensor(targets, dtype=outputs[0].dtype)

AttributeError: 'NoneType' object has no attribute 'dtype'

&lt;/denchmark-code&gt;



I tried to pinpoint the line where outputs is set to None. However, due to the classes inheritances, I failed this task. I know it is set 2 times: one during model = Model() where it is set to [], and one more time that I could not identify (probably during model.compile()?)


I checked the syntax in my script, but I could not identify any clear syntax error. I suspect this to be a bug in Keras (happy to be contradicted)


		</comment>
		<comment id='3' author='pj1989' date='2020-02-28T18:08:48Z'>
		&lt;denchmark-link:https://github.com/pj1989&gt;@pj1989&lt;/denchmark-link&gt;
 the issue is with these lines:
&lt;denchmark-code&gt; #create model
    model = Model()
    model.compile(inputs    = input_layer,
                  outputs   = out,
                  loss      = 'mse',
                  optimizer = 'adam',
                  )

    return model
&lt;/denchmark-code&gt;

it should be:
 #create model
    model = Model(input_layer, out)
    model.compile(
                  loss      = 'mse',
                  optimizer = 'adam',
                  )

    return model
		</comment>
		<comment id='4' author='pj1989' date='2020-02-28T18:08:50Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35823&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35823&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>