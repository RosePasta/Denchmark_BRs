<bug id='27304' author='tritemio' open_date='2019-03-29T21:03:02Z' closed_time='2019-04-23T00:23:15Z'>
	<summary>FileNotFoundError while running %tensorboard</summary>
	<description>
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
mac os 10.14
TensorFlow installed from (source or binary):
pip install tensorflow==2.0.0-alpha0
TensorFlow version:
2.0.0-alpha0
Python version:
3.7.2
Installed using virtualenv? pip? conda?:
conda: tf was installed in a conda env, the jupyter notebook is launched in the base environment. There is a jupyter kernel for the tensorflow env.

Describe the problem
After loading the tensorboard extension with %load_ext tensorboard.notebook,  the %tensorboard magic fails with:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
FileNotFoundError                         Traceback (most recent call last)
&lt;ipython-input-4-d46782f9619b&gt; in &lt;module&gt;
----&gt; 1 get_ipython().run_line_magic('tensorboard', '--logdir logs')

[...]

FileNotFoundError: [Errno 2] No such file or directory: 'tensorboard': 'tensorboard'
&lt;/denchmark-code&gt;

Provide the exact sequence of commands / steps that you executed before running into the problem
&lt;denchmark-code&gt;import tensorflow
%load_ext tensorboard.notebook
%tensorboard --logdir logs
&lt;/denchmark-code&gt;

Any other info / logs
The issue is that the tensorboard binary is installed in the environment's bin dir which is added to the path when the env is activated. However, when selecting the kernel in the notebook, the path is not modified. So, while the tensorboard extension loads, the magic %tensorboard fails because it cannot find the tensorboard executable.
A workaround is to manually add the environment's bin dir to the path from inside the notebook:
&lt;denchmark-code&gt;import os
PATH = os.getenv('PATH')
%env PATH=/Users/anto/miniconda3/envs/tf2_env/bin:$PATH
&lt;/denchmark-code&gt;

With this the %tensorboard magic starts working.
	</description>
	<comments>
		<comment id='1' author='tritemio' date='2019-04-02T23:16:32Z'>
		Hi &lt;denchmark-link:https://github.com/tritemio&gt;@tritemio&lt;/denchmark-link&gt;
! Thanks for the report. Can you clarify how you installed
TensorFlow and Jupyter, and how you’re launching Jupyter, preferably by
providing a list of steps to create an environment that demonstrates the
problem?
You’re correct that tensorboard(1) is installed into the virtualenv’s
bin directory, and that %tensorboard requires tensorboard(1) to be
on the path to be launched as a subprocess. But my understanding is that
Jupyter prepends the bin directory for the active virtualenv to the
PATH seen by the notebook context, so I don’t see why this doesn’t
suffice.
		</comment>
		<comment id='2' author='tritemio' date='2019-04-03T09:03:58Z'>
		For the installation, it is a standard installation on a conda env:
&lt;denchmark-code&gt;conda create -n py37 python=3.7
conda activate py37
conda install matplotlib pandas scipy scikit-learn
pip install tensorflow==2.0.0-alpha0
python -m ipykernel install --user --name py37 --display-name "Python 3.7 (TF2)"
&lt;/denchmark-code&gt;

The last command creates the kernel.
As I said before, the notebook app is installed in the base environment.

But my understanding is that
Jupyter prepends the bin directory for the active virtualenv to the
PATH seen by the notebook context

Apparently, this is not the case. When you select a kernel to use with a notebook, the PATH is not modified. The PATH is modified when you activate the env in the terminal, but not when you select a kernel from the notebook app. Maybe there is a way to write a special kernelspec in a way that the PATH is prepended with the current env bin dir, but I don't  know how.
BTW, this is an issue with tensorboard and not tensorflow. I believe that a simple fix would be replacing the call to:
&lt;denchmark-code&gt;tensorboard
&lt;/denchmark-code&gt;

with
&lt;denchmark-code&gt;python -m tensorboard.main
&lt;/denchmark-code&gt;

in the tensorboard code.
		</comment>
		<comment id='3' author='tritemio' date='2019-04-03T17:26:44Z'>
		Okay, thanks for clarifying.
Invoking tensorboard rather than python -m tensorboard.main is
intentional: it enables you to provide a different TensorBoard entry
point. For instance, within Google, tensorboard is actually a compiled
program that runs a slightly different module with some wrapper code and
additional Google-specific configuration.
Personally, I’ve found that the best way to avoid PATH headaches like
this is to only install packages inside virtualenvs, avoiding system-
and user-level site packages entirely. If you want to use fancier
setups, more power to you, but it’s much harder to support such setups
in full generality.
I’ll add a note to the documentation that indicates that tensorboard
must be on your path inside the notebook context for the notebook
extensions to work. Thanks for the report!
		</comment>
		<comment id='4' author='tritemio' date='2019-04-03T18:26:02Z'>
		Fine for me. Thanks for the patch.
		</comment>
	</comments>
</bug>