<bug id='35761' author='n-gao' open_date='2020-01-11T01:10:35Z' closed_time='2020-01-13T19:28:08Z'>
	<summary>[TF2.1] k parameter is ignored in tf.linalg.diag_part</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 64bit (also happens in WSL)
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.1
Python version: 3.7
CUDA/cuDNN version: 10.1 (also happens in tensorflow-cpu)
GPU model and memory: GTX 1050 2GB

Describe the current behavior
Using the k parameter of tf.linalg.diag_part does not affect anything. The result is still the same.
Describe the expected behavior
It should select the super or subdiagonal dependent on k.
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np
input = np.array([[[1, 2, 3, 4],  # Input shape: (2, 3, 4)
                   [5, 6, 7, 8],
                   [9, 8, 7, 6]],
                  [[5, 4, 3, 2],
                   [1, 2, 3, 4],
                   [5, 6, 7, 8]]])
# this works as expected
tf.linalg.diag_part(input) ==&gt; [[1, 6, 7],  # Output shape: (2, 3)
                                [5, 2, 7]]
# this does not
tf.linalg.diag_part(input, k = 1) ==&gt; [[1, 6, 7], [5, 2, 7]] # still returns the same output
  # [[2, 7, 6], [4, 3, 8]]  Is the expected output
&lt;/denchmark-code&gt;

This example is taken from the &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/linalg/diag_part?version=nightly&gt;documentation&lt;/denchmark-link&gt;
, which is also incorrect see &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/35760&gt;#35760&lt;/denchmark-link&gt;
.
	</description>
	<comments>
		<comment id='1' author='n-gao' date='2020-01-13T08:45:46Z'>
		I could replicate the issue with Tf 2.1.
Please find the attached &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/86984446b8f07eeb590c3bd724a1d556/untitled343.ipynb?authuser=1&gt;gist&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='n-gao' date='2020-01-13T19:11:33Z'>
		&lt;denchmark-link:https://github.com/n-gao&gt;@n-gao&lt;/denchmark-link&gt;
 I can reproduce the issue with . However, the document you are referring is related . When I used , the output is as you expected. Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/025c3ba3c089f6b4a580072f599239fa/untitled749.ipynb&gt;gist here&lt;/denchmark-link&gt;
.
Output from the gist
&lt;denchmark-code&gt;&lt;tf.Tensor: shape=(2, 3), dtype=int64, numpy=
array([[2, 7, 6],
       [4, 3, 8]])&gt;
&lt;/denchmark-code&gt;

Please close the issue if you agree that it was resolved by using tf-nightly. Thanks!
		</comment>
		<comment id='3' author='n-gao' date='2020-01-13T19:28:08Z'>
		I can confirm that this is fixed in tf-nightly. Thanks!
		</comment>
		<comment id='4' author='n-gao' date='2020-01-13T19:28:09Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35761&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35761&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>