<bug id='43376' author='khalilur1' open_date='2020-09-20T11:32:49Z' closed_time='2020-09-22T11:28:58Z'>
	<summary>I have found this error. tensorflow.python.framework.errors_impl.InvalidArgumentError:  indices[5] = 1 is not in [0, 1)</summary>
	<description>
&lt;denchmark-code&gt;# set the matplotlib backend so figures can be saved in the background
import matplotlib
matplotlib.use("Agg")
# import the necessary packages
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import LearningRateScheduler
from tensorflow.keras.optimizers import Adagrad
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from keras.layers import Dense, Embedding
from pyimagesearch.cancernet import CancerNet
from pyimagesearch import config
from imutils import paths
import matplotlib.pyplot as plt
import numpy as np
import argparse
import os

# determine the total number of image paths in training, validation,
# and testing directories
trainPaths = list(paths.list_images(config.TRAIN_PATH))
totalTrain = len(trainPaths)
totalVal = len(list(paths.list_images(config.VAL_PATH)))
totalTest = len(list(paths.list_images(config.TEST_PATH)))
# calculate the total number of training images in each class and
# initialize a dictionary to store the class weights
trainLabels = [int(p.split(os.path.sep)[-2]) for p in trainPaths]
trainLabels = to_categorical(trainLabels)
classTotals = trainLabels.sum(axis=0)
classWeight = dict()
# loop over all classes and calculate the class weight
for i in range(0, len(classTotals)):
	classWeight[i] = classTotals.max() / classTotals[i]
# construct the argument parser and parse the arguments
	ap = argparse.ArgumentParser()
	ap.add_argument("-p", "--plot", type=str, default="plot.png",
					help="path to output loss/accuracy plot")
	args = vars(ap.parse_args())
	# initialize our number of epochs, initial learning rate, and batch
	# size
	NUM_EPOCHS = 2

	INIT_LR = 1e-2
	BS = 32
	# initialize the training data augmentation object
	trainAug = ImageDataGenerator(
		rescale=1 / 255.0,
		rotation_range=20,
		zoom_range=0.05,
		width_shift_range=0.1,
		height_shift_range=0.1,
		shear_range=0.05,
		horizontal_flip=True,
		vertical_flip=True,
		fill_mode="nearest")
	# initialize the validation (and testing) data augmentation object
	valAug = ImageDataGenerator(rescale=1 / 255.0)
	# initialize the training generator
	trainGen = trainAug.flow_from_directory(
		config.TRAIN_PATH,
		class_mode="categorical",
		target_size=(48, 48),
		color_mode="rgb",
		shuffle=True,
		batch_size=BS)
	# initialize the validation generator
	valGen = valAug.flow_from_directory(
		config.VAL_PATH,
		class_mode="categorical",
		target_size=(48, 48),
		color_mode="rgb",
		shuffle=False,
		batch_size=BS)
	# initialize the testing generator
	testGen = valAug.flow_from_directory(
		config.TEST_PATH,
		class_mode="categorical",
		target_size=(48, 48),
		color_mode="rgb",
		shuffle=False,
		batch_size=BS)
	# initialize our CancerNet model and compile it
	model = CancerNet.build(width=48, height=48, depth=3,
							classes=2)
	model.add(Embedding(batch_size=32, input_shape=(classWeight,), input_dim=1024*1000, output_dim=256))

	opt = Adagrad(lr=INIT_LR, decay=INIT_LR / NUM_EPOCHS)
	model.compile(loss="binary_crossentropy", optimizer=opt,
				  metrics=["accuracy"])
	# fit the model
	H = model.fit(
		x=trainGen,
		steps_per_epoch=totalTrain // BS,
		validation_data=valGen,
		validation_steps=totalVal // BS,
		class_weight=classWeight,
		epochs=NUM_EPOCHS)
# reset the testing generator and then use our trained model to
# make predictions on the data
print("[INFO] evaluating network...")
testGen.reset()
predIdxs = model.predict(x=testGen, steps=(totalTest // BS) + 1)
# for each image in the testing set we need to find the index of the
# label with corresponding largest predicted probability
predIdxs = np.argmax(predIdxs, axis=1)
# show a nicely formatted classification report
print(classification_report(testGen.classes, predIdxs,
	target_names=testGen.class_indices.keys()))
# compute the confusion matrix and and use it to derive the raw
# accuracy, sensitivity, and specificity
cm = confusion_matrix(testGen.classes, predIdxs)
total = sum(sum(cm))
acc = (cm[0, 0] + cm[1, 1]) / total
sensitivity = cm[0, 0] / (cm[0, 0] + cm[0, 1])
specificity = cm[1, 1] / (cm[1, 0] + cm[1, 1])
# show the confusion matrix, accuracy, sensitivity, and specificity
print(cm)
print("accuracy: {:.4f}".format(acc))
print("sensitivity: {:.4f}".format(sensitivity))
print("specificity: {:.4f}".format(specificity))
# plot the training loss and accuracy
N = NUM_EPOCHS
plt.style.use("ggplot")
plt.figure()
plt.plot(np.arange(0, N), H.history["loss"], label="train_loss")
plt.plot(np.arange(0, N), H.history["val_loss"], label="val_loss")
plt.plot(np.arange(0, N), H.history["accuracy"], label="train_acc")
plt.plot(np.arange(0, N), H.history["val_accuracy"], label="val_acc")
plt.title("Training Loss and Accuracy on Dataset")
plt.xlabel("Epoch #")
plt.ylabel("Loss/Accuracy")
plt.legend(loc="lower left")
plt.savefig(args["plot"])
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='khalilur1' date='2020-09-21T11:09:52Z'>
		&lt;denchmark-link:https://github.com/khalilur1&gt;@khalilur1&lt;/denchmark-link&gt;

I ran the code shared and face a different issue, please find the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/9db2165604c7a9cc5e3870e46a507dcf/untitled415.ipynb&gt;gist here&lt;/denchmark-link&gt;
.
As per the error shared please refer to: &lt;denchmark-link:https://stackoverflow.com/questions/51223936/tensorflow-invalidargumenterror-indices-while-training-with-keras&gt;link&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/38613&gt;#38613&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='khalilur1' date='2020-09-21T11:20:51Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 I used model.fit to load data from disk without using gpu.
		</comment>
		<comment id='3' author='khalilur1' date='2020-09-21T17:20:22Z'>
		&lt;denchmark-link:https://github.com/khalilur1&gt;@khalilur1&lt;/denchmark-link&gt;

I ran your code with out gpu, please share a colab gist with the error reported.
		</comment>
		<comment id='4' author='khalilur1' date='2020-09-22T07:48:18Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 I have used the Kagale data set (&lt;denchmark-link:https://www.kaggle.com/paultimothymooney/breast-histopathology-images/download&gt;https://www.kaggle.com/paultimothymooney/breast-histopathology-images/download&lt;/denchmark-link&gt;
) please use it. find a
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/5259757/breast-cancer-classification.zip&gt;breast-cancer-classification.zip&lt;/denchmark-link&gt;

complete project.
		</comment>
		<comment id='5' author='khalilur1' date='2020-09-22T10:06:13Z'>
		&lt;denchmark-link:https://github.com/khalilur1&gt;@khalilur1&lt;/denchmark-link&gt;

Please provide with simple stand alone code such that we could replicate the issue faced, or if possible share a colab gist with error reported.
		</comment>
		<comment id='6' author='khalilur1' date='2020-09-22T10:47:49Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 Thanks for your support issue is resolved. I am closing it
		</comment>
		<comment id='7' author='khalilur1' date='2020-09-22T11:29:00Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43376&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43376&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>