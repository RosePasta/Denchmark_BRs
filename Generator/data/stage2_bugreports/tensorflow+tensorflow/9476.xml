<bug id='9476' author='hansonboy' open_date='2017-04-27T05:32:31Z' closed_time='2017-04-27T18:20:31Z'>
	<summary>iOS: No OpKernel was registered to support Op 'Less' with these attrs.</summary>
	<description>
hi , all! I have tried to load the model inside iOS that I generated from python.
and right now, I have the following problem:
&lt;denchmark-code&gt;Error adding graph to session:
No OpKernel was registered to support Op 'Less' with these attrs.  
Registered devices: [CPU],     Registered kernels: device='CPU';
 T in [DT_FLOAT]  [[Node: rnn/while/Less = Less[T=DT_INT32](rnn/while/Merge, rnn/while/Less/Enter)]]
&lt;/denchmark-code&gt;

Here is the python script generating the model:
&lt;denchmark-code&gt;def add_dynamic_rnn_layer(inputs, out_size, batch_size, Xt_size, time_step, num_layer=1, keep_prob=0.5):
    # Reshaping to (batch_size, time_step, Xt_size)
    inputs = tf.reshape(inputs, [-1, time_step, Xt_size])
    cell = tf.contrib.rnn.MultiRNNCell([tf.contrib.rnn.DropoutWrapper(tf.contrib.rnn.LSTMCell(out_size, state_is_tuple=True,forget_bias=1.0),
                                                input_keep_prob=keep_prob)
                             for _ in range(num_layer)])
    cell =  tf.contrib.rnn.DropoutWrapper(cell,  input_keep_prob=keep_prob)
    sequence_length = np.zeros([batch_size], dtype=int)
    sequence_length += time_step
    init_state = cell.zero_state(batch_size, tf.float32)
    rnn_outputs, final_state = tf.nn.dynamic_rnn(cell, inputs, initial_state=init_state, dtype=tf.float32, time_major=False,sequence_length=sequence_length)
    return tf.transpose(rnn_outputs, [1, 0, 2])[-1]


with tf.Session() as sess:
  # ...... other model code....
   add_dynamic_rnn_layer()
   output_graph_def = convert_variables_to_constants(sess, sess.graph_def,
                                                          output_node_names=['predictions', 'prediction_labels'])
   with tf.gfile.FastGFile('inference'+str(time.time())+'.pb', mode='wb') as f:
            f.write(output_graph_def.SerializeToString())
&lt;/denchmark-code&gt;

Here is the objective-C++ code loading the model and creating the session:
&lt;denchmark-code&gt;{
    NSString *path = [[NSBundle mainBundle] pathForResource:pbname ofType:@"pb"];
    if (!path) return false;
    auto status = ReadBinaryProto(tensorflow::Env::Default(), path.fileSystemRepresentation, &amp;graph);
    if (!status.ok()) {
        NSLog(@"Error reading graph: %s", status.error_message().c_str());
        return NO;
    }
    
    // This prints out the names of the nodes in the graph.
    auto nodeCount = graph.node_size();
    NSLog(@"Node count: %d", nodeCount);
    for (auto i = 0; i &lt; nodeCount; ++i) {
        auto node = graph.node(i);
        NSLog(@"Node %d: %s '%s'", i, node.op().c_str(), node.name().c_str());
    }
    
    tensorflow::SessionOptions options;
    auto status = tensorflow::NewSession(options, &amp;session);
    if (!status.ok()) {
        NSLog(@"Error creating session: %s", status.error_message().c_str());
        return NO;
    }
    
    status = session-&gt;Create(graph);
    if (!status.ok()) {
        NSLog(@"Error adding graph to session: %s", status.error_message().c_str());
    }  
}
&lt;/denchmark-code&gt;

the environment as follows:

python 3.5 / xcode 8.3.2
the iOS based on mac os x 10.12  / the tensorflow version: r1.1
the model generated based on Ubuntu / tensorflow is r1.1 gpu version

I have done things as follow:

build_all_ios.sh

success,don't have any warning and error.


set the xcode build settings

header search path

/Users/jw/Desktop/tensorflow  non-recursive
/Users/jw/Desktop/tensorflow/tensorflow/contrib/makefile/downloads non-recursive
/Users/jw/Desktop/tensorflow/tensorflow/contrib/makefile/downloads/protobuf/src non-recursive
/Users/jw/Desktop/tensorflow/tensorflow/contrib/makefile/downloads/eigen non-recursive
/Users/jw/Desktop/tensorflow/tensorflow/contrib/makefile/gen/proto non-recursive


other linker flags:

/Users/jw/Desktop/tensorflow/tensorflow/contrib/makefile/gen/protobuf_ios/lib/libprotobuf.a
/Users/jw/Desktop/tensorflow/tensorflow/contrib/makefile/gen/protobuf_ios/lib/libprotobuf-lite.a
/Users/jw/Desktop/tensorflow/tensorflow/contrib/makefile/gen/lib/libtensorflow-core.a
-force_load


check the tf_op_files.txt

have the line  tensorflow/core/kernels/cwise_op_less.cc


using the tensorflow version v1.0

have the same error



I would be gratefull if anyone has an idea on why iOS seems to not be able to find the less Op ?
Or the solution to the question : No OpKernel was registered to support Op 'Less' with these attrs.
	</description>
	<comments>
		<comment id='1' author='hansonboy' date='2017-04-27T18:08:06Z'>
		 is only registered for  on iOS, I believe.  &lt;denchmark-link:https://github.com/petewarden&gt;@petewarden&lt;/denchmark-link&gt;
 Do we have some documentation for this that I can point people to?  Ideally, the error message would say what is going on, but I realize that's hard.
		</comment>
		<comment id='2' author='hansonboy' date='2017-04-27T18:18:03Z'>
		I did talk about this area a bit in my dev summit talk:
&lt;denchmark-link:https://www.youtube.com/watch?v=0r9w3V923rk&gt;https://www.youtube.com/watch?v=0r9w3V923rk&lt;/denchmark-link&gt;

I didn't cover the specific area of restricted types though, and in general the documentation here is lacking. There is a comment here that may be helpful:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cwise_ops_common.h#L474&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cwise_ops_common.h#L474&lt;/denchmark-link&gt;

The summary is that you should be able to define  when you build TensorFlow, and you'll get all types but the binary size will be larger.
		</comment>
		<comment id='3' author='hansonboy' date='2017-04-28T02:20:54Z'>
		&lt;denchmark-link:https://github.com/petewarden&gt;@petewarden&lt;/denchmark-link&gt;
 , thanks for your comments.

define ANDROID_TYPES=ANDROID_TYPES_FULL when you build TensorFlow

you mean edit the build_all_ios.sh as the follow?
&lt;denchmark-code&gt;# Build the iOS TensorFlow libraries.
tensorflow/contrib/makefile/compile_ios_tensorflow.sh "-O3" --define ANDROID_TYPES=__ANDROID_TYPES_FULL__ 
&lt;/denchmark-code&gt;

I am not sure whether I am correct  to add the define in the correct place, look forward to your reply. thanks again.
		</comment>
		<comment id='4' author='hansonboy' date='2017-04-28T16:02:54Z'>
		The --define is Bazel syntax, for the makefile you'll need to use gcc's -D. Here's an example that I haven't tried:
tensorflow/contrib/makefile/compile_ios_tensorflow.sh "-O3 -DANDROID_TYPES=__ANDROID_TYPES_FULL__ "
Note that you have to include the -D in quotes alongside the -O3 for it to work.
		</comment>
		<comment id='5' author='hansonboy' date='2017-04-29T12:33:43Z'>
		&lt;denchmark-link:https://github.com/petewarden&gt;@petewarden&lt;/denchmark-link&gt;
 , thanks for your comment again. I tried your example. rebuild ios script. but not worked. Tired... Have any idea?

tensorflow/contrib/makefile/compile_ios_tensorflow.sh "-O3 -DANDROID_TYPES=ANDROID_TYPES_FULL "

		</comment>
		<comment id='6' author='hansonboy' date='2017-05-24T15:11:48Z'>
		&lt;denchmark-link:https://github.com/hansonboy&gt;@hansonboy&lt;/denchmark-link&gt;
 so did you find a solution?
		</comment>
		<comment id='7' author='hansonboy' date='2017-05-26T02:01:37Z'>
		&lt;denchmark-link:https://github.com/s1ddok&gt;@s1ddok&lt;/denchmark-link&gt;
 noï¼Œ I have the problem when I use RNN, but no problem when using CNN. So, I choose to use CNN.
		</comment>
		<comment id='8' author='hansonboy' date='2017-07-06T08:13:51Z'>
		&lt;denchmark-link:https://github.com/s1ddok&gt;@s1ddok&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/petewarden&gt;@petewarden&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/hansonboy&gt;@hansonboy&lt;/denchmark-link&gt;
 I found a solution for this issue. Try this:
in the (your tensorflow root)/tensorflow/contrib/makefile/Makefile
remove the line "-D__ANDROID_TYPES_SLIM__ " under "# Settings for iOS." for all "$(IOS_ARCH)"
then recompile the libtensorflow-core.a according to the modified Makefile.
The reason why this happened is because:
in tensorflow/core/kernels/cwise_ops_common.h
#if defined(ANDROID_TYPES_SLIM)
// Note that ANDROID_TYPES_SLIM is also checked in the cwise_ops*.cc files.
// Normally Android TensorFlow is built with a reduced number of types (float).
// Override on the command-line "--define ANDROID_TYPES=ANDROID_TYPES_FULL"
// to generate a library with full type support with a consequent increase in
// code size.
#define REGISTER2(OP, D, N, F, T0, T1) REGISTER(OP, D, N, F, T0)
#define REGISTER3(OP, D, N, F, T0, T1, T2) REGISTER(OP, D, N, F, T0)
#define REGISTER4(OP, D, N, F, T0, T1, T2, T3) REGISTER(OP, D, N, F, T0)
#define REGISTER5(OP, D, N, F, T0, T1, T2, T3, T4) REGISTER(OP, D, N, F, T0)
#define REGISTER6(OP, D, N, F, T0, T1, T2, T3, T4, T5) REGISTER(OP, D, N, F, T0)
#define REGISTER7(OP, D, N, F, T0, T1, T2, T3, T4, T5, T6) 
REGISTER(OP, D, N, F, T0)
#define REGISTER8(OP, D, N, F, T0, T1, T2, T3, T4, T5, T6, T7) 
REGISTER(OP, D, N, F, T0)
#define REGISTER9(OP, D, N, F, T0, T1, T2, T3, T4, T5, T6, T7, T8) 
REGISTER(OP, D, N, F, T0)
#else  // !defined(ANDROID_TYPES_SLIM)
(ps: I also wrote a iOS_SSDMobilenet example base on the python ssd_mobilenet and ios_camera_example, and here is the github link:  @&lt;denchmark-link:https://github.com/JieHe96/ios_SSDMobilenet_tensorflow_example&gt;https://github.com/JieHe96/ios_SSDMobilenet_tensorflow_example&lt;/denchmark-link&gt;
)
		</comment>
		<comment id='9' author='hansonboy' date='2017-10-05T15:18:55Z'>
		Is there a better solution than adding all the int ops to the binary? Is it possible to instead swap the int less op with a corresponding float less op + a cast to float?
		</comment>
		<comment id='10' author='hansonboy' date='2018-04-13T03:24:18Z'>
		I got the same exception on Android. Just when I load conv2d net. Is there any solution for Android ?
		</comment>
		<comment id='11' author='hansonboy' date='2018-07-18T09:50:44Z'>
		&lt;denchmark-link:https://github.com/Neilcc&gt;@Neilcc&lt;/denchmark-link&gt;
: don't know if it's still important for you but you can change line 51 in the Makefile
ANDROID_TYPES := -D__ANDROID_TYPES_SLIM__    to
ANDROID_TYPES := -D__ANDROID_TYPES_FULL__
and compile again, then it should work
		</comment>
		<comment id='12' author='hansonboy' date='2019-01-28T08:41:12Z'>
		
@Neilcc: don't know if it's still important for you but you can change line 51 in the Makefile
ANDROID_TYPES := -D__ANDROID_TYPES_SLIM__ to
ANDROID_TYPES := -D__ANDROID_TYPES_FULL__
and compile again, then it should work

The solution proposed by &lt;denchmark-link:https://github.com/NPetsky&gt;@NPetsky&lt;/denchmark-link&gt;
 is correct. The build complete successfully and with my Xcode 10.1 can run without errors.
		</comment>
	</comments>
</bug>