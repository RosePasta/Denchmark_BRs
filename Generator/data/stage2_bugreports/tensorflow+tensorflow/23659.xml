<bug id='23659' author='davidpham87' open_date='2018-11-10T21:26:07Z' closed_time='2019-04-30T15:43:34Z'>
	<summary>TPU: keras support for multiples inputs layers</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Google Colaboratory

Describe the current behavior
I am using the functional api of keras models, and TPU does not yet support multiple inputs layers.
Describe the expected behavior
It should support multiple inputs models.
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
&lt;denchmark-code&gt;/usr/local/lib/python3.6/dist-packages/tensorflow/contrib/tpu/python/tpu/keras_support.py in _validate_shapes(model)
   2077   """Validate that all layers in `model` have constant shape."""
   2078   for layer in model.layers:
-&gt; 2079     if isinstance(layer.input_shape, tuple):
   2080       input_shapes = [layer.input_shape]
   2081     else:

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in input_shape(self)
   1351     else:
   1352       raise AttributeError('The layer "' + str(self.name) +
-&gt; 1353                            ' has multiple inbound nodes, '
   1354                            'with different input shapes. Hence '
   1355                            'the notion of "input shape" is '

AttributeError: The layer "model_encoder_vgg19 has multiple inbound nodes, with different input shapes. Hence the notion of "input shape" is ill-defined for the layer. Use `get_input_shape_at(node_index)` instead.
&lt;/denchmark-code&gt;

The issue is at line 2079 of keras_support.py where get_input_shape_at(node_index) should be used instead.
	</description>
	<comments>
		<comment id='1' author='davidpham87' date='2018-11-27T21:21:17Z'>
		I have the similar issue when trying to reuse already compiled keras model and convert it into TPU model:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-6-002cb4c34948&gt; in &lt;module&gt;()
     11     tf.keras.layers.Dense(1000)(training_model(training_model.inputs)),
     12     strategy=tf.contrib.tpu.TPUDistributionStrategy(
---&gt; 13         tf.contrib.cluster_resolver.TPUClusterResolver(TPU_WORKER)))
     14 
     15 tpu_model.fit_generator(

/usr/local/lib/python3.6/dist-packages/tensorflow/contrib/framework/python/framework/experimental.py in new_func(*args, **kwargs)
     62         'any time, and without warning.',
     63         decorator_utils.get_qualified_name(func), func.__module__)
---&gt; 64     return func(*args, **kwargs)
     65   new_func.__doc__ = _add_experimental_function_notice_to_docstring(
     66       func.__doc__)

/usr/local/lib/python3.6/dist-packages/tensorflow/contrib/tpu/python/tpu/keras_support.py in tpu_model(model, strategy)
   2139     A new `KerasTPUModel` instance.
   2140   """
-&gt; 2141   _validate_shapes(model)
   2142   # TODO(xiejw): Validate TPU model. TPUModel only?
   2143   # TODO(xiejw): Validate replicas. Full or 1. Shall we allow subset?

/usr/local/lib/python3.6/dist-packages/tensorflow/contrib/tpu/python/tpu/keras_support.py in _validate_shapes(model)
   2076 def _validate_shapes(model):
   2077   """Validate that all layers in `model` have constant shape."""
-&gt; 2078   for layer in model.layers:
   2079     if isinstance(layer.input_shape, tuple):
   2080       input_shapes = [layer.input_shape]

AttributeError: 'Tensor' object has no attribute 'layers'
&lt;/denchmark-code&gt;

I can be reproduced with &lt;denchmark-link:https://colab.research.google.com/github/tensorflow/tpu/blob/master/tools/colab/shakespeare_with_tpu_and_keras.ipynb#scrollTo=VzBYDJI0_Tfm&gt;"Predict Shakespeare with Cloud TPUs and Keras"&lt;/denchmark-link&gt;
 example.
Changed code cell:
tf.keras.backend.clear_session()

training_model = lstm_model(seq_len=100, batch_size=128, stateful=False)

tpu_model = tf.contrib.tpu.keras_to_tpu_model(
    training_model,
    strategy=tf.contrib.tpu.TPUDistributionStrategy(
        tf.contrib.cluster_resolver.TPUClusterResolver(TPU_WORKER)))

tpu_model_reused = tf.contrib.tpu.keras_to_tpu_model(
    tf.keras.layers.Dense(1000)(training_model(training_model.inputs)),
    strategy=tf.contrib.tpu.TPUDistributionStrategy(
        tf.contrib.cluster_resolver.TPUClusterResolver(TPU_WORKER)))

tpu_model.fit_generator(
    training_generator(seq_len=100, batch_size=1024),
    steps_per_epoch=100,
    epochs=10,
)
tpu_model.save_weights('/tmp/bard.h5', overwrite=True)
		</comment>
		<comment id='2' author='davidpham87' date='2019-01-04T01:16:33Z'>
		&lt;denchmark-link:https://github.com/davidpham87&gt;@davidpham87&lt;/denchmark-link&gt;
 did you ever find a fix for this?
		</comment>
		<comment id='3' author='davidpham87' date='2019-01-04T08:39:09Z'>
		I implemented the Estimator API (which will be depreciated in TF 2.0, lol)
		</comment>
		<comment id='4' author='davidpham87' date='2019-03-13T05:41:02Z'>
		&lt;denchmark-link:https://github.com/davidpham87&gt;@davidpham87&lt;/denchmark-link&gt;

I am trying to implement a siamese neural network with tf.keras and TPUs and I am running into the same issue "ValueError: The dataset must return a 2-element tuple" (when I have 2 input signals and 1 labelp; 3 inputs in total for the model)
I am getting this error even when using the Estimator API. May I ask you what Estimator API you used to solve this problem?
		</comment>
		<comment id='5' author='davidpham87' date='2019-03-13T17:59:17Z'>
		Note: I'm working on Swift now, sorry!
		</comment>
		<comment id='6' author='davidpham87' date='2019-04-16T00:19:21Z'>
		&lt;denchmark-link:https://github.com/davidpham87&gt;@davidpham87&lt;/denchmark-link&gt;
 Is this still an issue or was it resolved? Could you check with latest version of TF and let us know. Thanks!
		</comment>
		<comment id='7' author='davidpham87' date='2019-04-30T13:05:10Z'>
		It has been 14 days with no activity and the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='8' author='davidpham87' date='2019-04-30T15:43:34Z'>
		Closing due to lack of recent activity. Please update the issue when new information becomes available, and we will open a new issue. Thanks!
		</comment>
		<comment id='9' author='davidpham87' date='2019-04-30T15:43:35Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=23659&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=23659&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='davidpham87' date='2019-06-22T00:56:27Z'>
		Hi! Has anyone solved this issue?
My workaround is to replace the first half of _validate_shapes() function in keras_support.py with the following. It works great for me, at least!
&lt;denchmark-code&gt;def _validate_shapes(model):
  """Validate that all layers in `model` have constant shape."""
  for layer in model.layers:
    for i in range(len(layer._inbound_nodes)):
      input_shape = layer.get_input_shape_at(i)

      if isinstance(input_shape, tuple):
        input_shapes = [input_shape]
      else:
        input_shapes = input_shape

    for i in range(len(layer._inbound_nodes)):
      output_shape = layer.get_output_shape_at(i)

      if isinstance(output_shape, tuple):
        output_shapes = [output_shape]
      else:
        output_shapes = output_shape

  for shape in input_shapes + output_shapes:
    for dim in shape[1:]:
    ... (omitted)
&lt;/denchmark-code&gt;

I hope this helps!
		</comment>
	</comments>
</bug>