<bug id='44646' author='jplu' open_date='2020-11-06T12:26:32Z' closed_time='2020-11-20T00:22:43Z'>
	<summary>Bug when a custom tf.keras.models.Model has multiple class inheritance</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows and Linux Ubuntu 20.04
TensorFlow installed from (source or binary): pip
TensorFlow version (use command below): 2.3
Python version: conda env with Python 3.7.9
CUDA/cuDNN version: 10.1
GPU model and memory: GeForce RTX 2080 Super with Max-Q Design 8GB

Describe the current behavior
Creating a custom model that inherit of at least one other class than tf.keras.models.Model, the following exception is raised:
&lt;denchmark-code&gt;File "C:\Users\snake\miniconda3\envs\transformers\lib\site-packages\tensorflow\python\training\tracking\base.py", line 457, in _method_wrapper
    result = method(self, *args, **kwargs)
  File "C:\Users\snake\miniconda3\envs\transformers\lib\site-packages\tensorflow\python\keras\engine\training.py", line 255, in __init__
    inject_functional_model_class(self.__class__)
  File "C:\Users\snake\miniconda3\envs\transformers\lib\site-packages\tensorflow\python\keras\engine\training.py", line 144, in inject_functional_model_class
    cls.__bases__ = tuple(inject_functional_model_class(base)
  File "C:\Users\snake\miniconda3\envs\transformers\lib\site-packages\tensorflow\python\keras\engine\training.py", line 144, in &lt;genexpr&gt;
    cls.__bases__ = tuple(inject_functional_model_class(base)
  File "C:\Users\snake\miniconda3\envs\transformers\lib\site-packages\tensorflow\python\keras\engine\training.py", line 144, in inject_functional_model_class
    cls.__bases__ = tuple(inject_functional_model_class(base)
  File "C:\Users\snake\miniconda3\envs\transformers\lib\site-packages\tensorflow\python\keras\engine\training.py", line 144, in &lt;genexpr&gt;
    cls.__bases__ = tuple(inject_functional_model_class(base)
  File "C:\Users\snake\miniconda3\envs\transformers\lib\site-packages\tensorflow\python\keras\engine\training.py", line 144, in inject_functional_model_class
    cls.__bases__ = tuple(inject_functional_model_class(base)
  File "C:\Users\snake\miniconda3\envs\transformers\lib\site-packages\tensorflow\python\keras\engine\training.py", line 144, in &lt;genexpr&gt;
    cls.__bases__ = tuple(inject_functional_model_class(base)
  File "C:\Users\snake\miniconda3\envs\transformers\lib\site-packages\tensorflow\python\keras\engine\training.py", line 144, in inject_functional_model_class
    cls.__bases__ = tuple(inject_functional_model_class(base)
TypeError: can't set attributes of built-in/extension type 'object'
&lt;/denchmark-code&gt;

Describe the expected behavior
Being able to create a custom model with different mixins.
Standalone code to reproduce the issue
Here a simple piece of code to reproduce the issue:
&lt;denchmark-code&gt;import tensorflow as tf

class PrintMixin:
    def custom_print(self):
        print("Hello world")

class CustomModel(tf.keras.models.Model, PrintMixin):
    def __init__(self, *args, **kwargs):
        my_input = tf.keras.layers.Input(shape=(16,))
        dense = tf.keras.layers.Dense(32, activation='relu')
        output = dense(my_input)
        outputs = {"output": output}

        super().__init__(inputs=[my_input], outputs=outputs, *args, **kwargs)


my_model = CustomModel()
&lt;/denchmark-code&gt;

Other info / logs
Apparently when giving the inputs and outputs parameters, TensorFlow tries to inject an attribute to all the classes and super classes until reaching tf.keras.models.Model. Here the piece of code from the file training.py line 136:
&lt;denchmark-code&gt;def inject_functional_model_class(cls):
  """Inject `Functional` into the hierarchy of this class if needed."""
  from tensorflow.python.keras.engine import functional  # pylint: disable=g-import-not-at-top
  from tensorflow.python.keras.engine import training_v1  # pylint: disable=g-import-not-at-top
  if cls == Model or cls == training_v1.Model:
    return functional.Functional

  cls.__bases__ = tuple(inject_functional_model_class(base)
                        for base in cls.__bases__)
  # Trigger any `__new__` class swapping that needed to happen on `Functional`
  # but did not because functional was not in the class hierarchy.
  cls.__new__(cls)

  return cls
&lt;/denchmark-code&gt;

But when it tries to check the superclass of my mixin class, which is object an error is raised saying that we cannot add an attribute to the object type. For me the following update of the method fix the issue:
&lt;denchmark-code&gt;def inject_functional_model_class(cls):
  """Inject `Functional` into the hierarchy of this class if needed."""
  from tensorflow.python.keras.engine import functional  # pylint: disable=g-import-not-at-top
  from tensorflow.python.keras.engine import training_v1  # pylint: disable=g-import-not-at-top
  if cls == Model or cls == training_v1.Model:
    return functional.Functional
  if cls == 'object':
    return cls

  cls.__bases__ = tuple(inject_functional_model_class(base)
                        for base in cls.__bases__)
  # Trigger any `__new__` class swapping that needed to happen on `Functional`
  # but did not because functional was not in the class hierarchy.
  cls.__new__(cls)

  return cls
&lt;/denchmark-code&gt;

Here we return the object class as it is. But I don't know if it is a proper fix that won't bring another error elsewhere.
First, I wanted to know if it is really a bug?
If not, how I could do a proper custom model with mixin classes and my inputs/outputs.
If, yes, is the fix I proposed ok and if needed I can open a PR with it.
Thanks!
	</description>
	<comments>
		<comment id='1' author='jplu' date='2020-11-08T18:05:49Z'>
		Was able to reproduce the issue with TF v2.3 and TF-nightly. Please find the gist of it &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/3b58866c9c9e0ac935296d26b903de22/44646-2-3.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='jplu' date='2020-11-18T17:27:48Z'>
		Thanks for reporting the issue. Let me take a close look.
		</comment>
		<comment id='3' author='jplu' date='2020-11-20T00:22:45Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44646&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44646&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>