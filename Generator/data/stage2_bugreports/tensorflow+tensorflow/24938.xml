<bug id='24938' author='ksachdeva' open_date='2019-01-15T17:10:46Z' closed_time='2019-12-23T22:21:30Z'>
	<summary>tf.keras.backend.zeros implementation ends up tracking tensors as well in graph mode</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): OSX
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.12
Python version: 3.6.6

Describe the current behavior
Here is my custom layer:
class ReshapeLayer(Layer):
    def __init__(self, **kwargs):
        super(ReshapeLayer, self).__init__(**kwargs)

    def build(self, input_shape):
        assert len(input_shape) &gt;= 2
        super(ReshapeLayer, self).build(input_shape)

    def call(self, x):
        s = K.shape(x)
        # zeros_w = K.zeros((s[0], 1, s[2], s[3]), tf.float32) # does not work
        zeros_w = tf.zeros((s[0], 1, s[2], s[3]), tf.float32)
        r = K.concatenate([x, zeros_w], 1)

        s = K.shape(r)
       #  zeros_h = K.zeros((s[0], s[1], 1, s[3]), tf.float32)  # does not work
        zeros_h = tf.zeros((s[0], s[1], 1, s[3]), tf.float32)
        r = K.concatenate([r, zeros_h], 2)
        return r

    def compute_output_shape(self, input_shape):
        shape = tf.TensorShape(input_shape).as_list()
        shape[1] = shape[1] + 1
        shape[2] = shape[2] + 1
        return tf.TensorShape(shape)
Please note the commented lines i.e. K.zeros vs tf.zeros
In graph mode, if I use K.zeros even though the graph gets built, later on I get an exception with long stack trace (probably because this layer gets used many times in my network) that Tensor object does not have is_initialized property
&lt;denchmark-code&gt;AttributeError: 'Tensor' object has no attribute 'is_initialized'
&lt;/denchmark-code&gt;

K.zeros works in eager mode.
Usage of tf.zeros work fine in both graph and eager mode.
After debugging the tensorflow code I figured that towards the very end when keras tries to initialize the variables it sees some entries that are of type Tensor
Those entries are the ones generated by K.zeros.
I then looked at the implementation of K.zeros 


tensorflow/tensorflow/python/keras/backend.py


         Line 1010
      in
      a6d8ffa






 def zeros(shape, dtype=None, name=None): 





In that it clear says that it could return either a variable or tensor based on the input (i.e. shape). This is correct however it seems like that irrespective of the return value being a variable or tensor it still ends up tracking it (via track_variable) in graph mode.
# code of zeros in tf.keras.backend.py
with ops.init_scope():
    if dtype is None:
      dtype = floatx()
    tf_dtype = dtypes_module.as_dtype(dtype)
    v = array_ops.zeros(shape=shape, dtype=tf_dtype, name=name)
    if py_all(v.shape.as_list()):
      return variable(v, dtype=dtype, name=name)
    track_variable(v)
    return v
# code of track_variable in tf.keras.backend.py
def track_variable(v):
  """Tracks the given variable for initialization."""
  if context.executing_eagerly():
    return
  graph = v.graph if hasattr(v, 'graph') else ops.get_default_graph()
  if graph not in _GRAPH_VARIABLES:
    _GRAPH_VARIABLES[graph] = weakref.WeakSet()
  _GRAPH_VARIABLES[graph].add(v)
During debugging I can see that since the tensor is part of the collection how invoking is_initialized on it would result in error.
Based on the code flow I would think that if K.zeros is going to return a tensor then it should not track it (i.e add it to the variables collection).
Part of the stack trace
&lt;denchmark-code&gt;return get_session().run(tensors)  File "/Users/ksachdeva/mlenv/lib/python3.6/site-packages/tensorflow/python/keras/backend.py", line 469, in get_session
    _initialize_variables(session)  File "/Users/ksachdeva/mlenv/lib/python3.6/site-packages/tensorflow/python/keras/backend.py", line 731, in _initialize_variables
    [variables_module.is_variable_initialized(v) for v in candidate_vars])  File "/Users/ksachdeva/mlenv/lib/python3.6/site-packages/tensorflow/python/keras/backend.py", line 731, in &lt;listcomp&gt;
    [variables_module.is_variable_initialized(v) for v in candidate_vars])  File "/Users/ksachdeva/mlenv/lib/python3.6/site-packages/tensorflow/python/util/tf_should_use.py", line 189, in wrapped
    return _add_should_use_warning(fn(*args, **kwargs))
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ksachdeva' date='2019-03-13T07:34:50Z'>
		Same error is there with K.ones() also.
		</comment>
		<comment id='2' author='ksachdeva' date='2019-12-19T11:47:33Z'>
		Similar behavior is seen when using tf.zeros_like() too.
		</comment>
		<comment id='3' author='ksachdeva' date='2019-12-19T16:31:38Z'>
		Pavithra, looks like you added the tracking. Should it just be made conditional?
		</comment>
		<comment id='4' author='ksachdeva' date='2019-12-23T22:21:30Z'>
		Yes, the fix for this is in and should be available in the next nightly. Thank you!
		</comment>
		<comment id='5' author='ksachdeva' date='2019-12-23T22:21:32Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/24938&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/24938&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>