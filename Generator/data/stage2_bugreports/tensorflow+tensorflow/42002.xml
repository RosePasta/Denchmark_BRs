<bug id='42002' author='eladc4' open_date='2020-08-03T10:20:52Z' closed_time='2020-08-13T18:25:26Z'>
	<summary>tf.nn.conv2d_transpose name is overwritten</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

OS Platform and Distribution: Linux Ubuntu 18.04
TensorFlow installed from (source or binary): TF 2.2
TensorFlow version: v2.2.0-rc4-8-g2b96f3662b 2.2.0
Python version: 3.7.7
CUDA/cuDNN version: 10.2 .76
GPU model and memory:

Describe the current behavior
conv2d_transpose output tensor name is Conv2DBackpropInput:0
Describe the expected behavior
conv2d_transpose output tensor name should be ct:0
Standalone code to reproduce the issue
import numpy as np
import tensorflow as tf
from tensorflow.keras import Input, Model
inputs = Input(shape=(32, 32, 3), name='net_input')
w0 = tf.Variable(np.ones((4, 4, 3, 6)).astype(np.float32)/16/16, name='w0')
c0 = tf.nn.conv2d(inputs, w0, 2, "SAME", name='conv0')
r0 = tf.nn.relu(c0, name='relu0')
wt = tf.Variable(np.ones((3, 3, 6, 6)).astype(np.float32)/16/16, name='wt')
ct = tf.nn.conv2d_transpose(r0, wt, (1, 16, 16, 6), strides=1, name='ct')
rt = tf.nn.relu(ct, name='relut')
wt2 = tf.Variable(np.ones((3, 3, 6, 6)).astype(np.float32)/16/16, name='wt2')
ct2 = tf.nn.conv2d_transpose(rt, wt2, (1, 16, 16, 6), strides=1, name='ct2')
rt2 = tf.nn.relu(ct2, name='relut2')
w1 = tf.Variable(np.ones((16, 16, 6, 4)).astype(np.float32)/16/16, name='w1')
c1 = tf.nn.conv2d(rt2, w1, 1, "VALID", name='conv1')
out = tf.nn.relu(c1, name='relu1')
m = Model(inputs=inputs, outputs=out, name='test')
print(ct.name)
	</description>
	<comments>
		<comment id='1' author='eladc4' date='2020-08-04T03:09:36Z'>
		I have tried in colab with TF version 2.3 and was able to reproduce the issue.Please find the gist &lt;denchmark-link:https://colab.research.google.com/gist/saikumarchalla/4ad8fa39d71a6e1e81857bcde4ac825b/-42002.ipynb&gt;here&lt;/denchmark-link&gt;
.
Seems like this issue is resolved in nightly version. Please find the gist &lt;denchmark-link:https://colab.research.google.com/gist/saikumarchalla/24c0a2049a897bda7e76f299de383147/-42002-nightly.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='eladc4' date='2020-08-04T06:51:06Z'>
		i'm not sure how it's solved. if i understand correctly the output tensor name is "tf.nn.conv2d_transpose_4/conv2d_transpose:0", instead of "Conv2DBackpropInput:0".
Shouldn't it be "ct:0"?
in the format: "name:0"?
same as: c0 = tf.nn.conv2d(inputs, w0, 2, "SAME", name='conv0') ==&gt; c0.name: "conv0:0"
		</comment>
		<comment id='3' author='eladc4' date='2020-08-06T17:48:16Z'>
		Was able to reproduce the issue with &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/626795f656d916f2242877403d5c911b/42002.ipynb#scrollTo=jrXw5h5tlecY&gt;TF v2.3&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/e26826031d04e87e297dde43b09ca243/42002-tf-nightly.ipynb&gt;TF-nightly&lt;/denchmark-link&gt;
. Please find the attached gist. Thanks!
		</comment>
		<comment id='4' author='eladc4' date='2020-08-13T18:25:19Z'>
		A few comments here:

The name argument in that API is used when you are tracing a graph, and it still works as seen in the below snippet:

&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
from tensorflow.keras import Input, Model

inputs = Input(shape=(32, 32, 3), name='net_input')
@tf.function
def foo(r0):
  wt = tf.convert_to_tensor(np.ones((3, 3, 6, 6)).astype(np.float32)/16/16, name='wt')
  ct = tf.nn.conv2d_transpose(r0, wt, (1, 16, 16, 6), strides=1, name='ct')
  print(ct.name)

  return ct

ct_out = foo(tf.ones((1, 16, 16, 6)))
&lt;/denchmark-code&gt;

The name that gets printed is ct:0.


Your code example should not be thought of as tracing a graph, it is constructing a Keras model. as such, the name of the intermediate value will be whatever name as been assigned to it as a result of the layers that created the intermediate value. That's why you see the generated layer name (tf.nn.conv2d_transpose_4) in the name string. We make zero guarantees about how the name is generated, including zero guarantees that the name argument in tensorflow APIs will affect it when those APIs are used directly as layers. We do not have any plans to change this at the moment.


The Keras model you are constructing in the code snippet may actually be problematic and is definitely not tracking the tf.variables you've created outside of the model. Example warnings that get raised in the nightly (though this would happen before the nightlies too, just w/o any explicit warnings):


&lt;denchmark-code&gt;WARNING:tensorflow:
The following Variables were used a Lambda layer's call (tf.compat.v1.nn.conv2d_3), but
are not present in its tracked objects:
  &lt;tf.Variable 'w1:0' shape=(16, 16, 6, 4) dtype=float32&gt;
It is possible that this is intended behavior, but it is more likely
an omission. This is a strong indication that this layer should be
formulated as a subclassed Layer rather than a Lambda layer.
&lt;/denchmark-code&gt;


Due to the lack of guarantees I mentioned above, code should never be treating tensor (or intermediate keras value) names as load-bearing. If you're trying to do something like put your tensors as keys in a data structure or checking them for instance equality rather than value equality, use tensor.ref() instead of checking by names.
If you're trying to look at the names for debugging purposes while building a Keras model, check the layer name that gets placed in the name or check the repr of the intermediate value (which will tell you what layer produced it in the nightlies):
&lt;KerasTensor: shape=(None, 16, 16, 6) dtype=float32 (created by layer 'tf.nn.conv2d_transpose')&gt;

Closing the issue because it's non-actionable on our side (as we make no guarantees about how naming will work when building a Keras model), but do feel free to follow up with any other questions you may have!
		</comment>
		<comment id='5' author='eladc4' date='2020-08-13T18:25:27Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42002&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42002&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>