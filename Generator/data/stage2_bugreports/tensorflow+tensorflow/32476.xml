<bug id='32476' author='connorlbark' open_date='2019-09-12T19:36:49Z' closed_time='2020-03-18T11:10:24Z'>
	<summary>Unexpected output shape on custom keras dynamic layer</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS Mojave 10.14.6
TensorFlow installed from (source or binary): pip install tensorflow==2.0.0rc0
TensorFlow version (use command below): 2.0.0-rc0
Python version: 3.7.4

Describe the current behavior
Upon attempting to create a custom dynamic keras layer, keras seems to incorrectly interpret the output of compute_output_shape.
Describe the expected behavior
In the example code below, model.summary() outputs [(None, (2,))] for the output shape. According to the docs/examples, I would expect that to be [(None, 2)]. When attempting to place layers after this, it returns two placeholders, despite the output shape only defining one.
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np

class Example(tf.keras.layers.Layer):
    def __init__(self, **kwargs):
        kwargs["dynamic"] = True
        super(Example, self).__init__(**kwargs)

    def call(self, inputs):
        return inputs

    def compute_output_shape(self, input_shape):
        return [(None, 2)]

inp = tf.keras.layers.Input(batch_shape=(None, 1))
comp = Example()(inp)

model = tf.keras.models.Model(inputs=[inp], outputs=[comp])
model.summary()
&lt;/denchmark-code&gt;

In my code, the input layer's batch_shape and the content of call are arbitrary. If I remove dynamic=True, then it gives the expected shape based on the contents of call.
There seems to be no semantic difference in output if compute_output_shapes returns [(None, 2)], (None, 2), or [None, 2]
Other info / logs
Here's what I am seeing from model.summary()
&lt;denchmark-code&gt;Model: "model"
_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
input_1 (InputLayer)         [(None, 1)]               0
_________________________________________________________________
example (Example)            [(None, (2,))]            0
=================================================================
Total params: 0
Trainable params: 0
Non-trainable params: 0
_________________________________________________________________
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='connorlbark' date='2019-09-13T11:30:26Z'>
		I reproduced the issue on Colab with tf 2.0.0rc0. Find a Colab gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/56a82640d89c5c26555da2d6aa1f4a57/untitled149.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks
		</comment>
		<comment id='2' author='connorlbark' date='2019-09-17T16:27:51Z'>
		It looks like using tf.TensorShape works properly. See:
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np

class Example(tf.keras.layers.Layer):
    def __init__(self, **kwargs):
        kwargs["dynamic"] = True
        super(Example, self).__init__(**kwargs)

    def call(self, inputs):
        return inputs

    def compute_output_shape(self, input_shape):
        return tf.TensorShape([None, 2])

inp = tf.keras.layers.Input(batch_shape=(None, 1))
comp = Example()(inp)

model = tf.keras.models.Model(inputs=[inp], outputs=[comp])
model.summary()
&lt;/denchmark-code&gt;

This outputs:
&lt;denchmark-code&gt;Model: "model_5"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_9 (InputLayer)         [(None, 1)]               0         
_________________________________________________________________
example_8 (Example)          (None, 2)                 0         
=================================================================
Total params: 0
Trainable params: 0
Non-trainable params: 0
_________________________________________________________________
&lt;/denchmark-code&gt;

See &lt;denchmark-link:https://colab.research.google.com/gist/porgull/c93dce7d1039b3ccacc1c9c16b956fa4/untitled149.ipynb&gt;updated Colab&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='3' author='connorlbark' date='2020-03-18T06:08:19Z'>
		@porgull  this issue is no longer seen with 2.2.0-rc0. Can you please check and close this issue if it is resolved for you ?
Thanks!
		</comment>
		<comment id='4' author='connorlbark' date='2020-03-18T11:10:26Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32476&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32476&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>