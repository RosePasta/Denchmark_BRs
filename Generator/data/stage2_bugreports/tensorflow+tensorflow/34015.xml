<bug id='34015' author='theoallard' open_date='2019-11-05T18:33:18Z' closed_time='2020-03-02T21:38:34Z'>
	<summary>Identity initializer not working as expected in Layer class add_weight method</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Linux Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below):
v1.15.0-rc3-22-g590d6ee 1.15.0
Python version: 3.6.9
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: CUDA 10.0 / cuDNN 7.6.4
GPU model and memory: Tesla K80

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
If trying to use the identity initializer in the build method of a custom Layer, passing the shape as a tuple of Dimensions fails, e.g.
&lt;denchmark-code&gt;    def build(self, input_shape):
        """Build layer."""
        self.w = self.add_weight(
            shape=(input_shape[-1], input_shape[-1]),
            initializer=tf.initializers.identity(),
            trainable=True,
        )
&lt;/denchmark-code&gt;

fails with TypeError: num_rows and num_columns must be positive integer values.. However, exactly the same code, where we replace identity by ones works perfectly.
Failure happens because tf.eye doesn't accept Dimension objects as inputs, only integers, e.g.:
&lt;denchmark-code&gt;    def build(self, input_shape):
        """Build layer."""
        self.w = self.add_weight(
            shape=(input_shape[-1].value, input_shape[-1].value),
            initializer=tf.initializers.identity(),
            trainable=True,
        )
&lt;/denchmark-code&gt;

works
Describe the expected behavior
Behavior for different initializers should be consistent. tf.initializers.identity should accept a tuple of Dimension objects for shape, as other initializers do.
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np


class MyLayer(tf.keras.layers.Layer):
    def __init__(self, *args, kernel_initializer=tf.initializers.identity(), **kwargs):
        super().__init__(*args, **kwargs)
        self.kernel_initializer = kernel_initializer

    def build(self, input_shape):
        """Build layer."""
        self.w = self.add_weight(
            shape=(input_shape[-1], input_shape[-1]),
            initializer=self.kernel_initializer,
            trainable=True,
        )

    def call(self, inputs):
        """Apply layer."""
        return tf.matmul(inputs, tf.expand_dims(self.w, 0))


if __name__ == "__main__":
    tf.enable_eager_execution()
    inputs = np.random.normal(size=(1, 10, 3))
    layer = MyLayer()
    outputs = layer(inputs)
    print(outputs.numpy())
&lt;/denchmark-code&gt;

Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "reproduce.py", line 27, in &lt;module&gt;
    outputs = layer(inputs)
  File "/home/theophile.allard/miniconda3/envs/ncs_15/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 894, in __call__
    self._maybe_build(inputs)
  File "/home/theophile.allard/miniconda3/envs/ncs_15/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 2146, in _maybe_build
    self.build(input_shapes)
  File "reproduce.py", line 15, in build
    trainable=True,
  File "/home/theophile.allard/miniconda3/envs/ncs_15/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 529, in add_weight
    aggregation=aggregation)
  File "/home/theophile.allard/miniconda3/envs/ncs_15/lib/python3.6/site-packages/tensorflow_core/python/training/tracking/base.py", line 712, in _add_variable_with_custom_getter
    **kwargs_for_getter)
  File "/home/theophile.allard/miniconda3/envs/ncs_15/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer_utils.py", line 139, in make_variable
    shape=variable_shape if variable_shape else None)
  File "/home/theophile.allard/miniconda3/envs/ncs_15/lib/python3.6/site-packages/tensorflow_core/python/ops/variables.py", line 258, in __call__
    return cls._variable_v1_call(*args, **kwargs)
  File "/home/theophile.allard/miniconda3/envs/ncs_15/lib/python3.6/site-packages/tensorflow_core/python/ops/variables.py", line 219, in _variable_v1_call
    shape=shape)
  File "/home/theophile.allard/miniconda3/envs/ncs_15/lib/python3.6/site-packages/tensorflow_core/python/ops/variables.py", line 197, in &lt;lambda&gt;
    previous_getter = lambda **kwargs: default_variable_creator(None, **kwargs)
  File "/home/theophile.allard/miniconda3/envs/ncs_15/lib/python3.6/site-packages/tensorflow_core/python/ops/variable_scope.py", line 2503, in default_variable_creator
    shape=shape)
  File "/home/theophile.allard/miniconda3/envs/ncs_15/lib/python3.6/site-packages/tensorflow_core/python/ops/variables.py", line 262, in __call__
    return super(VariableMetaclass, cls).__call__(*args, **kwargs)
  File "/home/theophile.allard/miniconda3/envs/ncs_15/lib/python3.6/site-packages/tensorflow_core/python/ops/resource_variable_ops.py", line 1406, in __init__
    distribute_strategy=distribute_strategy)
  File "/home/theophile.allard/miniconda3/envs/ncs_15/lib/python3.6/site-packages/tensorflow_core/python/ops/resource_variable_ops.py", line 1537, in _init_from_args
    initial_value() if init_from_fn else initial_value,
  File "/home/theophile.allard/miniconda3/envs/ncs_15/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer_utils.py", line 119, in &lt;lambda&gt;
    init_val = lambda: initializer(shape, dtype=dtype)
  File "/home/theophile.allard/miniconda3/envs/ncs_15/lib/python3.6/site-packages/tensorflow_core/python/ops/init_ops.py", line 1211, in __call__
    initializer = linalg_ops_impl.eye(*full_shape, dtype=dtype)
  File "/home/theophile.allard/miniconda3/envs/ncs_15/lib/python3.6/site-packages/tensorflow_core/python/ops/linalg_ops_impl.py", line 57, in eye
    'num_rows and num_columns must be positive integer values.')
TypeError: num_rows and num_columns must be positive integer values.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='theoallard' date='2019-11-06T06:43:10Z'>
		I have tried on colab with TF version 1.15 and i am not seeing any error message. Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/75eadc7e4d604f1462811cf67e109b1c/untitled332.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='theoallard' date='2019-11-06T10:16:11Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
, sorry just realized the example to reproduce had  initializer instead of . Just edited the description and tested on your colab notebook. As shown in &lt;denchmark-link:https://colab.research.google.com/gist/theoallard/251081388e066f5babd4d59de134eeb6/untitled332.ipynb&gt;the gist&lt;/denchmark-link&gt;
, I confirm this fails:
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np


class MyLayer(tf.keras.layers.Layer):
    def __init__(self, *args, kernel_initializer=tf.initializers.ones(), **kwargs):
        super().__init__(*args, **kwargs)
        self.kernel_initializer = kernel_initializer

    def build(self, input_shape):
        """Build layer."""
        self.w = self.add_weight(
            shape=(input_shape[-1], input_shape[-1]),
            initializer=self.kernel_initializer,
            trainable=True,
        )

    def call(self, inputs):
        """Apply layer."""
        return tf.matmul(inputs, tf.expand_dims(self.w, 0))


if __name__ == "__main__":
    tf.enable_eager_execution()
    inputs = np.random.normal(size=(1, 10, 3))
    layer = MyLayer()
    outputs = layer(inputs)
    print(outputs.numpy())
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='theoallard' date='2020-03-02T21:38:34Z'>
		This works with tf-nightly version '2.2.0-dev20200302'. Thanks!
		</comment>
		<comment id='4' author='theoallard' date='2020-03-02T21:38:36Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34015&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34015&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>