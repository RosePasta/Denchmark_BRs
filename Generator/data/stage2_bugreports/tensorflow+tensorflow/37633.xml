<bug id='37633' author='StefReck' open_date='2020-03-16T11:17:36Z' closed_time='2020-07-13T20:36:42Z'>
	<summary>set_shape is not loaded from saved model</summary>
	<description>
System information

TensorFlow version (use command below): 2.1.0
Python version: 3.6.10

Describe the current behavior
When loading a saved keras model that contains .set_shape on a tensor, this is not loaded.
import tensorflow as tf

inp = tf.keras.Input((None, 3))
inp.set_shape((None, 2, 3))
x = tf.keras.layers.Dense(3)(inp)

model = tf.keras.Model(inp, x)
model.summary()

model.save("test.h5")
loaded = tf.keras.models.load_model("test.h5")
loaded.summary()
model.summary():
&lt;denchmark-code&gt;_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_1 (InputLayer)         [(None, None, 3)]         0         
_________________________________________________________________
dense (Dense)                (None, 2, 3)              12        
=================================================================
&lt;/denchmark-code&gt;

loaded.summary():
&lt;denchmark-code&gt;_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_1 (InputLayer)         [(None, None, 3)]         0         
_________________________________________________________________
dense (Dense)                (None, None, 3)           12        
=================================================================
&lt;/denchmark-code&gt;

--&gt; Shape is not identical!
	</description>
	<comments>
		<comment id='1' author='StefReck' date='2020-03-16T12:52:06Z'>
		Was able to reproduce the reported issue with Tf 2.1 and Tf-nightly==2.2.0.dev20200316..
Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/9f42b6c399fc75f3d58a36ae8243d9b3/untitled460.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='StefReck' date='2020-03-17T00:28:40Z'>
		Why not just set the correct shape in tf.keras.Input? I understand that this is a toy example, but is there a valid use case for this?
		</comment>
		<comment id='3' author='StefReck' date='2020-03-17T10:59:58Z'>
		In my case, I'm using some operations which end up leaving the last dimension of the output tensor as a '?', even though I actually know the shape. So I set it manually in order to feed it into a dense layer (which requires the last dimension to be known).
In fact, I found out which operation left the dimension unknown: It's tf.shape, which is apparently also not properly loaded from a saved model:
import tensorflow as tf

inp = tf.keras.Input((2, 3))
x = tf.zeros(tf.shape(inp)[:2])

model = tf.keras.models.Model(inp, x)
model.summary()
model.save("test.h5")
loaded = tf.keras.models.load_model("test.h5")
loaded.summary()
model.summary():
&lt;denchmark-code&gt;_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
input_1 (InputLayer)         [(None, 2, 3)]            0
_________________________________________________________________
tf_op_layer_Shape (TensorFlo [(3,)]                    0
_________________________________________________________________
tf_op_layer_strided_slice (T [(2,)]                    0
_________________________________________________________________
tf_op_layer_zeros (TensorFlo [(None, 2)]               0
=================================================================
&lt;/denchmark-code&gt;

loaded.summary():
&lt;denchmark-code&gt;_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
input_1 (InputLayer)         [(None, 2, 3)]            0
_________________________________________________________________
tf_op_layer_Shape (TensorFlo (3,)                      0
_________________________________________________________________
tf_op_layer_strided_slice (T (2,)                      0
_________________________________________________________________
tf_op_layer_zeros (TensorFlo (None, None)              0
=================================================================
&lt;/denchmark-code&gt;

As you can see, the output has an unknown shape after loading the model.
		</comment>
		<comment id='4' author='StefReck' date='2020-03-17T16:43:16Z'>
		
Why not just set the correct shape in tf.keras.Input? I understand that this is a toy example, but is there a valid use case for this?

I strongly support this view. it's not advisable to freewheeling like such model building idea.
		</comment>
		<comment id='5' author='StefReck' date='2020-03-18T09:13:28Z'>
		
I strongly support this view. it's not advisable to freewheeling like such model building idea.

set_shape (and tf.shape apparently) are public, documented functions, and saving + loading is a very basic use case, so I don't see what you mean by 'freewheeling'.
		</comment>
		<comment id='6' author='StefReck' date='2020-03-18T09:38:06Z'>
		

I strongly support this view. it's not advisable to freewheeling like such model building idea.

set_shape (and tf.shape apparently) are public, documented functions, and saving + loading is a very basic use case, so I don't see what you mean by 'freewheeling'.

Sorry, I didn't mean to offend. My opinion is that "just set the correct shape in tf.keras.Input" already works well, while it's uncommon that you define inp first and then inp.set_shape().
		</comment>
		<comment id='7' author='StefReck' date='2020-03-18T09:57:21Z'>
		


I strongly support this view. it's not advisable to freewheeling like such model building idea.

set_shape (and tf.shape apparently) are public, documented functions, and saving + loading is a very basic use case, so I don't see what you mean by 'freewheeling'.

Sorry, I didn't mean to offend. My opinion is that "just set the correct shape in tf.keras.Input" already works well, while it's uncommon that you define inp first and then inp.set_shape().

Ah I see, sorry for the confusion. I just broke it down to a minium example for this issue. In my actual use case, I do define the input fully, but there are many layers and operations in between the input and set_shape which result in unknown dimensions, something like this:
inp = tf.keras.Input((3, 4))
x = ...  # many layers, output shape is (None, None, None)
x.set_shape((None, 2, 3))
x = tf.keras.layers.Dense(3)(x)
		</comment>
		<comment id='8' author='StefReck' date='2020-07-13T20:36:42Z'>
		set_shape doesn't actually produce any ops, so it can't be saved in the SavedModel. You could create a custom layer that runs set_shape, and pass the layer as a custom object when loading.
		</comment>
		<comment id='9' author='StefReck' date='2020-07-13T20:36:44Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37633&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37633&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>