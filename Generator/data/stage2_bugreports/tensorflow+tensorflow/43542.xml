<bug id='43542' author='loic-ehrhardt' open_date='2020-09-24T14:38:46Z' closed_time='2020-10-09T14:39:11Z'>
	<summary>tf.numpy_function() does not support symbolic Tensors</summary>
	<description>
System information

I have written custom code (see below)
Red Hat Enterprise Linux Server release 7.7 (Maipo)
TensorFlow installed from: binary (pip)
TensorFlow version: v2.3.0-rc2-23-gb36436b087 2.3.0
Python version: 3.6.9

Describe the current behavior
Calling tf.numpy_function() with symbolic Tensor crashes (see below). This prevents tf.numpy_function() from being directly used when building a Keras Model with the Functional API.
Describe the expected behavior
Calling tf.numpy_function() with symbolic Tensor should return the symbolic Tensors which are the result of the operation.
Standalone code to reproduce the issue
&gt;&gt;&gt; import tensorflow as tf, numpy as np
&gt;&gt;&gt; (tf.__version__, np.__version__)
('2.3.0', '1.18.5')

# Create a symbolic Tensor.
&gt;&gt;&gt; x = tf.keras.layers.Input(shape=(2,))
&gt;&gt;&gt; x
&lt;tf.Tensor 'input_2:0' shape=(None, 2) dtype=float32&gt;

# Calling it on tf.sin() gives a symbolic Tensor as output.
&gt;&gt;&gt; tf.sin(x)
&lt;tf.Tensor 'Sin:0' shape=(None, 2) dtype=float32&gt;

# Calling it on tf.numpy_function() with np.sin() fails:
&gt;&gt;&gt; tf.numpy_function(np.sin, [x], [tf.float32])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/loic/venv/tf/lib64/python3.6/site-packages/tensorflow/python/util/dispatch.py", line 201, in wrapper
    return target(*args, **kwargs)
  File "/home/loic/venv/tf/lib64/python3.6/site-packages/tensorflow/python/ops/script_ops.py", line 632, in numpy_function
    return py_func_common(func, inp, Tout, stateful=True, name=name)
  File "/home/loic/venv/tf/lib64/python3.6/site-packages/tensorflow/python/ops/script_ops.py", line 519, in py_func_common
    result = func(*[np.array(x) for x in inp])
  File "/home/loic/venv/tf/lib64/python3.6/site-packages/tensorflow/python/ops/script_ops.py", line 519, in &lt;listcomp&gt;
    result = func(*[np.array(x) for x in inp])
  File "/home/loic/venv/tf/lib64/python3.6/site-packages/tensorflow/python/framework/ops.py", line 848, in __array__
    " a NumPy call, which is not supported".format(self.name))
NotImplementedError: Cannot convert a symbolic Tensor (input_2:0) to a numpy array. This error may indicate that you're trying to pass a Tensor to a NumPy call, which is not supported
Other info / logs
tf.numpy_function() works as expected under other circumstances.
# With an eager Tensor.
&gt;&gt;&gt; x = tf.constant([0., 1.])
&gt;&gt;&gt; x
&lt;tf.Tensor: shape=(2,), dtype=float32, numpy=array([0., 1.], dtype=float32)&gt;
&gt;&gt;&gt; tf.sin(x)
&lt;tf.Tensor: shape=(2,), dtype=float32, numpy=array([0.        , 0.84147096], dtype=float32)&gt;
&gt;&gt;&gt; tf.numpy_function(np.sin, [x], [tf.float32])
&lt;tf.Tensor: shape=(2,), dtype=float32, numpy=array([0.        , 0.84147096], dtype=float32)&gt;
# When eager execution is disabled.
&gt;&gt;&gt; import tensorflow as tf, numpy as np
&gt;&gt;&gt; tf.python.framework.ops.disable_eager_execution()
&gt;&gt;&gt; x = tf.keras.layers.Input(shape=(2,))
&gt;&gt;&gt; tf.numpy_function(np.sin, [x], [tf.float32])
[&lt;tf.Tensor 'PyFunc:0' shape=&lt;unknown&gt; dtype=float32&gt;]
# When wrapping tf.numpy_function() inside a Keras Lambda Layer.
&gt;&gt;&gt; import tensorflow as tf, numpy as np
&gt;&gt;&gt; x = tf.keras.layers.Input(shape=(2,))
&gt;&gt;&gt; tf.keras.layers.Lambda(lambda t: tf.numpy_function(np.sin, [t], [tf.float32]))(x)
[&lt;tf.Tensor 'lambda/PyFunc:0' shape=&lt;unknown&gt; dtype=float32&gt;]
	</description>
	<comments>
		<comment id='1' author='loic-ehrhardt' date='2020-09-24T16:29:41Z'>
		&lt;denchmark-code&gt;tf.py_function` and `tf.numpy_function` are very similar, except that 
`tf.numpy_function` takes numpy arrays, and not `tf.Tensor`s. If you want the
function to contain `tf.Tensors`, and have any TensorFlow operations executed
in the function be differentiable, please use `tf.py_function`.
&lt;/denchmark-code&gt;

It was in the documentation. tf.keras.layers.Input() will work on tf.py_function.
		</comment>
		<comment id='2' author='loic-ehrhardt' date='2020-09-25T05:32:54Z'>
		&lt;denchmark-link:https://github.com/loic-ehrhardt&gt;@loic-ehrhardt&lt;/denchmark-link&gt;

Please refer to this issue and let us know: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/43154&gt;#43154&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='loic-ehrhardt' date='2020-09-25T08:11:26Z'>
		Thanks &lt;denchmark-link:https://github.com/meSajied&gt;@meSajied&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 for your replies.
&lt;denchmark-link:https://github.com/meSajied&gt;@meSajied&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;tf.py_function` and `tf.numpy_function` are very similar,
except that `tf.numpy_function` takes numpy arrays, and not `tf.Tensor`s.
If you want the function to contain `tf.Tensors`, [...] please use `tf.py_function`.
&lt;/denchmark-code&gt;

I do not want the function to contain tf.Tensors. I would like to use np.sin(), not tf.sin() (obviously, the numpy function I actually want to use is more complex but I use np.sin() here as minimal example to show the bug).
Moreover, tf.py_function() also fails with tf.keras.layers.Input():
&gt;&gt;&gt; import tensorflow as tf
&gt;&gt;&gt; x = tf.keras.layers.Input(shape=(2,))
&gt;&gt;&gt; tf.py_function(tf.sin, [x], [tf.float32])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/loic/venv/tf/lib64/python3.6/site-packages/tensorflow/python/util/dispatch.py", line 201, in wrapper
    return target(*args, **kwargs)
  File "/home/loic/venv/tf/lib64/python3.6/site-packages/tensorflow/python/ops/script_ops.py", line 457, in eager_py_func
    func=func, inp=inp, Tout=Tout, eager=True, name=name)
  File "/home/loic/venv/tf/lib64/python3.6/site-packages/tensorflow/python/ops/script_ops.py", line 342, in _internal_py_func
    name=name)
  File "/home/loic/venv/tf/lib64/python3.6/site-packages/tensorflow/python/ops/gen_script_ops.py", line 55, in eager_py_func
    ctx=_ctx)
  File "/home/loic/venv/tf/lib64/python3.6/site-packages/tensorflow/python/ops/gen_script_ops.py", line 96, in eager_py_func_eager_fallback
    _attr_Tin, input = _execute.convert_to_mixed_eager_tensors(input, ctx)
  File "/home/loic/venv/tf/lib64/python3.6/site-packages/tensorflow/python/eager/execute.py", line 291, in convert_to_mixed_eager_tensors
    types = [t._datatype_enum() for t in v]  # pylint: disable=protected-access
  File "/home/loic/venv/tf/lib64/python3.6/site-packages/tensorflow/python/eager/execute.py", line 283, in &lt;listcomp&gt;
    types = [t._datatype_enum() for t in v]  # pylint: disable=protected-access
AttributeError: 'Tensor' object has no attribute '_datatype_enum'
&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;

It looks like &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/43154&gt;#43154&lt;/denchmark-link&gt;
 refers to a warning about AutoGraph not being able to transform some function and then falling back to running it as is. This seems unrelated to my issue. In my case, I have a plain crash. Moreover, I see in the release notes (&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/RELEASE.md#release-220&gt;https://github.com/tensorflow/tensorflow/blob/master/RELEASE.md#release-220&lt;/denchmark-link&gt;
) that since tensorflow 2.2.0,  (by the way I tried with TF 2.1 and it also crashes).
		</comment>
		<comment id='4' author='loic-ehrhardt' date='2020-10-05T11:20:00Z'>
		Hi &lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
. Do you have further insights into this or do you think this should be escalated? It looks like &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/43154&gt;#43154&lt;/denchmark-link&gt;
  is closed.
		</comment>
		<comment id='5' author='loic-ehrhardt' date='2020-10-05T23:30:30Z'>
		&lt;denchmark-link:https://github.com/loic-ehrhardt&gt;@loic-ehrhardt&lt;/denchmark-link&gt;
 I am able to reproduce the error with . However, there is no error when  was used. Please check the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/c94aec48f9fbd5df7d781a5423206efe/untitled54.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='6' author='loic-ehrhardt' date='2020-10-09T14:39:11Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 Thanks for your reply. This seems indeed fixed in the new TF version. I think we can close this ticket then. My goal was to actually use  with  to compute both the output and the gradient with numpy. This is still not working with tf_nightly. I opened the new issue &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/43916&gt;#43916&lt;/denchmark-link&gt;
, would you mind looking into this too?
Bests, Lo√Øc.
		</comment>
		<comment id='7' author='loic-ehrhardt' date='2020-10-09T14:39:13Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43542&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43542&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>