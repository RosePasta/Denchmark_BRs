<bug id='30417' author='nikitos9000' open_date='2019-07-04T18:08:46Z' closed_time='2019-07-09T18:11:33Z'>
	<summary>Mixed-precision mode in keras: 'AutoCastVariable' object is not subscriptable</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04 LTS
TensorFlow installed from (source or binary): official Tensorflow docker = tensorflow/tensorflow:1.14.0-gpu-py3
TensorFlow version (use command below): 1.14.0
Python version: 3.6.8

Describe the current behavior
The following error occurs in a given code below when trying to enable mixed-precision mode with keras.mixed_precision.experimental.set_policy('infer_float32_vars'):
&lt;denchmark-code&gt;    auto_cast_variable_slice_repr.py:16 call
        return keras.backend.dot(inputs, w[:16, :16])

    TypeError: 'AutoCastVariable' object is not subscriptable
&lt;/denchmark-code&gt;

It looks like ResourceVariable (which is returned by self.add_weight with mixed-precision is OFF) supports slice operations, while AutoCastVariable (returned by self.add_weight when mixed-precision is ON) doesn't.
It's possible to workaround this issue by converting this variable into tensor (as shown on line 15), but it's not clear if it's a straightforward way to perform slice op on Variable.
Describe the expected behavior
Should work without any error.
Code to reproduce the issue
&lt;denchmark-code&gt;import numpy as np

from tensorflow import keras

# Comment this line out to make code complete successfully
keras.mixed_precision.experimental.set_policy('infer_float32_vars')

class MyLayer(keras.layers.Layer):
    def build(self, input_shape):
        self.w = self.add_weight(shape=(16, 16))

    def call(self, inputs, **kwargs):
        w = self.w
        # Uncomment this workaround line below to make it work with mixed-precision ON
        # w = keras.backend.cast(w, dtype=w.dtype)
        return keras.backend.dot(inputs, w[:16, :16])

input = keras.layers.Input(shape=(16, ))
output = MyLayer()(input)
model = keras.models.Model(input, output)

model.predict(np.zeros(shape=(16, 16)))
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='nikitos9000' date='2019-07-05T09:14:48Z'>
		Reproduced the Error with TF Version 1.14
		</comment>
		<comment id='2' author='nikitos9000' date='2019-07-09T18:11:33Z'>
		Thank you for the bug report. This should be fixed by &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/604988b5d4e8cec6564db6502e6e40eefac8fc67&gt;604988b&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='3' author='nikitos9000' date='2019-07-09T18:11:34Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30417&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30417&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>