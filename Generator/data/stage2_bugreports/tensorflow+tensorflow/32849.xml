<bug id='32849' author='codeyman' open_date='2019-09-26T21:44:49Z' closed_time='2019-10-25T21:01:27Z'>
	<summary>TFlite conversion of tf.keras model fails</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No
TensorFlow installed from (source or binary): pip install
TensorFlow version (use command below):v2.0.0-beta1-0-g8e423e3d56 2.0.0-beta1
Python version: 3.6.8
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source): 7.4.0
CUDA/cuDNN version: No
GPU model and memory: Nvidia titan-Xp

Describe the current behavior
&lt;denchmark-code&gt;import tensorflow as tf
model = tf.keras.models.load_model('keras_model.h5')
model.summary()
Model: "model"
__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to
==================================================================================================
input_1 (InputLayer)            [(None, 1048576)]    0
__________________________________________________________________________________________________
embedding (Embedding)           (None, 1048576, 8)   2056        input_1[0][0]
__________________________________________________________________________________________________
conv1d (Conv1D)                 (None, 2097, 128)    512128      embedding[0][0]
__________________________________________________________________________________________________
conv1d_1 (Conv1D)               (None, 2097, 128)    512128      embedding[0][0]
__________________________________________________________________________________________________
multiply (Multiply)             (None, 2097, 128)    0           conv1d[0][0]
                                                                 conv1d_1[0][0]
__________________________________________________________________________________________________
global_max_pooling1d (GlobalMax (None, 128)          0           multiply[0][0]
__________________________________________________________________________________________________
dense (Dense)                   (None, 128)          16512       global_max_pooling1d[0][0]
__________________________________________________________________________________________________
dense_1 (Dense)                 (None, 1)            129         dense[0][0]
==================================================================================================
Total params: 1,042,953
Trainable params: 1,042,953
Non-trainable params: 0
__________________________________________________________________________________________________
converter = tf.lite.TFLiteConverter.from_keras_model(model)
&lt;/denchmark-code&gt;

The converter fails to convert the model
&lt;denchmark-code&gt;&gt;&gt;&gt; converter.convert()
2019-09-26 14:39:27.048354: I tensorflow/core/grappler/devices.cc:60] Number of eligible GPUs (core count &gt;= 8, compute capability &gt;= 0.0): 0 (Note: TensorFlow was not compiled with CUDA support)
2019-09-26 14:39:27.048553: I tensorflow/core/grappler/clusters/single_machine.cc:359] Starting new session
2019-09-26 14:39:27.065544: I tensorflow/core/grappler/optimizers/meta_optimizer.cc:716] Optimization results for grappler item: graph_to_optimize
2019-09-26 14:39:27.066324: I tensorflow/core/grappler/optimizers/meta_optimizer.cc:718]   function_optimizer: function_optimizer did nothing. time = 0.002ms.
2019-09-26 14:39:27.066655: I tensorflow/core/grappler/optimizers/meta_optimizer.cc:718]   function_optimizer: function_optimizer did nothing. time = 0ms.
Traceback (most recent call last):
  File "/home/sridhar/PE_CSV/malenv3/lib/python3.6/site-packages/tensorflow/python/framework/importer.py", line 427, in import_graph_def
    graph._c_graph, serialized, options)  # pylint: disable=protected-access
tensorflow.python.framework.errors_impl.InvalidArgumentError: Input 0 of node model/embedding/embedding_lookup was passed float from model/embedding/embedding_lookup/Read/ReadVariableOp/resource:0 incompatible with expected resource.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/sridhar/PE_CSV/malenv3/lib/python3.6/site-packages/tensorflow/lite/python/lite.py", line 348, in convert
    self._funcs[0])
  File "/home/sridhar/PE_CSV/malenv3/lib/python3.6/site-packages/tensorflow/python/framework/convert_to_constants.py", line 252, in convert_variables_to_constants_v2
    new_output_names)
  File "/home/sridhar/PE_CSV/malenv3/lib/python3.6/site-packages/tensorflow/python/eager/wrap_function.py", line 607, in function_from_graph_def
    wrapped_import = wrap_function(_imports_graph_def, [])
  File "/home/sridhar/PE_CSV/malenv3/lib/python3.6/site-packages/tensorflow/python/eager/wrap_function.py", line 585, in wrap_function
    collections={}),
  File "/home/sridhar/PE_CSV/malenv3/lib/python3.6/site-packages/tensorflow/python/framework/func_graph.py", line 716, in func_graph_from_py_func
    func_outputs = python_func(*func_args, **func_kwargs)
  File "/home/sridhar/PE_CSV/malenv3/lib/python3.6/site-packages/tensorflow/python/eager/wrap_function.py", line 80, in __call__
    return self.call_with_variable_creator_scope(self._fn)(*args, **kwargs)
  File "/home/sridhar/PE_CSV/malenv3/lib/python3.6/site-packages/tensorflow/python/eager/wrap_function.py", line 86, in wrapped
    return fn(*args, **kwargs)
  File "/home/sridhar/PE_CSV/malenv3/lib/python3.6/site-packages/tensorflow/python/eager/wrap_function.py", line 605, in _imports_graph_def
    importer.import_graph_def(graph_def, name="")
  File "/home/sridhar/PE_CSV/malenv3/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py", line 507, in new_func
    return func(*args, **kwargs)
  File "/home/sridhar/PE_CSV/malenv3/lib/python3.6/site-packages/tensorflow/python/framework/importer.py", line 431, in import_graph_def
    raise ValueError(str(e))
ValueError: Input 0 of node model/embedding/embedding_lookup was passed float from model/embedding/embedding_lookup/Read/ReadVariableOp/resource:0 incompatible with expected resource.
&lt;/denchmark-code&gt;

I'm able to use the model on a python based inference engine. I'm trying to just compress the model to deploy it on smaller setup and consume via a c/c++ wrapper.
	</description>
	<comments>
		<comment id='1' author='codeyman' date='2019-09-30T08:51:40Z'>
		any update on this Were you able to fix this issue
		</comment>
		<comment id='2' author='codeyman' date='2019-10-02T23:31:20Z'>
		&lt;denchmark-link:https://github.com/codeyman&gt;@codeyman&lt;/denchmark-link&gt;
 I don't see any issue with tf_lite conversion of keras model in TF2.0. &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/6ff9f60fcc2245727ef380070e0951d1/tf32849.ipynb&gt;Here&lt;/denchmark-link&gt;
 is the gist.
&lt;denchmark-code&gt;!pip install tensorflow==2.0.0
import tensorflow as tf
mnist = tf.keras.datasets.mnist

(x_train, y_train),(x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)),
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5)
model.evaluate(x_test, y_test)
model.save("keras_model.h5")

new_model=tf.keras.models.load_model("keras_model.h5")
new_model.summary()

converter = tf.lite.TFLiteConverter.from_keras_model(new_model)
tflite_model = converter.convert()
open("converted_model.tflite", "wb").write(tflite_model)
&lt;/denchmark-code&gt;

I am closing this issue. Please feel free to open it if the issue persists with TF2.0. Thanks!
		</comment>
		<comment id='3' author='codeyman' date='2019-10-02T23:31:22Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=32849&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=32849&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='codeyman' date='2019-10-07T22:54:19Z'>
		Could you please use the model from the summary that I provided? I understand that it works on the sample code. Can you please try with the same layers?
		</comment>
		<comment id='5' author='codeyman' date='2019-10-07T23:24:49Z'>
		&lt;denchmark-link:https://github.com/codeyman&gt;@codeyman&lt;/denchmark-link&gt;
 Can you please create the model and follow the steps I mentioned in the code I shared. If there is any issue, please create a colab gist and share it here. Thanks!
		</comment>
		<comment id='6' author='codeyman' date='2019-10-08T00:39:02Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 Please look at my bug creation code. It is exactly the same:
import tensorflow as tf
model = tf.keras.models.load_model('keras_model.h5')
model.summary()
converter.convert() &lt;-- This throws the error
		</comment>
		<comment id='7' author='codeyman' date='2019-10-08T15:59:05Z'>
		&lt;denchmark-link:https://github.com/codeyman&gt;@codeyman&lt;/denchmark-link&gt;
 Could you share a standalone code to reproduce the issue? I cannot run your code as I don't have  and also you didn't instantiate . Please provide entire standalone code to proceed further in resolving the issue. Thanks!
		</comment>
		<comment id='8' author='codeyman' date='2019-10-08T18:38:30Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 Please see the standalone code &lt;denchmark-link:https://colab.research.google.com/drive/1F1F3wp0QFOs7UKVk6J7t42UdU2ccurfW&gt;Here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='9' author='codeyman' date='2019-10-09T17:48:18Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 Can you please reopen this issue?
		</comment>
		<comment id='10' author='codeyman' date='2019-10-09T18:57:27Z'>
		&lt;denchmark-link:https://github.com/codeyman&gt;@codeyman&lt;/denchmark-link&gt;
 I could reproduce the issue. I think this is more related to . Were you able to train this model without any issues? Thanks!
		</comment>
		<comment id='11' author='codeyman' date='2019-10-10T00:08:57Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 Yeah, no issues while training. Note that is the standard malconv model: &lt;denchmark-link:https://arxiv.org/pdf/1710.09435.pdf&gt;https://arxiv.org/pdf/1710.09435.pdf&lt;/denchmark-link&gt;

		</comment>
		<comment id='12' author='codeyman' date='2019-10-22T08:44:03Z'>
		Any news on this? We are running into the same issue with a network using an embedding layer.
		</comment>
		<comment id='13' author='codeyman' date='2019-10-25T19:13:03Z'>
		We encountered a very similar issue in our model and it is consistent in tf2.0 official release, but it looks it is gone in the latest TF-nightly build.
		</comment>
		<comment id='14' author='codeyman' date='2019-10-25T21:01:27Z'>
		Closing this issue because the code snippet in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/32849#issuecomment-539646714&gt;#32849 (comment)&lt;/denchmark-link&gt;
 works on the nightly ().
&lt;denchmark-link:https://github.com/codeyman&gt;@codeyman&lt;/denchmark-link&gt;
 Please request to reopen if you experience additional problems.
		</comment>
		<comment id='15' author='codeyman' date='2019-10-25T21:01:28Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32849&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32849&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='16' author='codeyman' date='2019-10-25T22:14:36Z'>
		&lt;denchmark-link:https://github.com/gargn&gt;@gargn&lt;/denchmark-link&gt;
 Could you please provide the bug that fixes this issue? I have to compile tensorflow on my setup and I'd like to just cherry-pick just this changeset over the tf-2.0 release.
		</comment>
		<comment id='17' author='codeyman' date='2019-12-05T07:13:58Z'>
		
Closing this issue because the code snippet in #32849 (comment) works on the nightly (pip install tf-nightly).
@codeyman Please request to reopen if you experience additional problems.

what if I need Tensorflow 1.11.0 for example? I cannot just pip install tf-nightly, because my customer's code is not compatible with tf 2.x.
		</comment>
		<comment id='18' author='codeyman' date='2020-10-08T10:51:06Z'>
		I am getting this exception in 2.3.0. There seems to be a workaround (see &lt;denchmark-link:https://github.com/usimarit/TiramisuASR/blob/main/tiramisu_asr/models/layers/embedding.py&gt;https://github.com/usimarit/TiramisuASR/blob/main/tiramisu_asr/models/layers/embedding.py&lt;/denchmark-link&gt;
) but I am not a big fan of having my own Embedding-layer implementation in my code. Is there another way?
		</comment>
	</comments>
</bug>