<bug id='41530' author='chhensel' open_date='2020-07-18T19:23:17Z' closed_time='2020-07-21T05:36:23Z'>
	<summary>Dataset not repeating when ignoring errors and shuffling before indefinite repetition</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux
TensorFlow installed from (source or binary): binary
TensorFlow version: 2.2.0
Python version: Python 3.x
CUDA/cuDNN version: not using GPU
GPU model and memory: not using GPU

Describe the current behavior
When using tf.data.experimental.ignore_errors(), indefinite repetition does not work if an error occurs during getting the elements to fill the shuffle buffer initially. I think it's a easier to see in code:
&lt;denchmark-code&gt;def assert_greater_0(x):
  tf.debugging.assert_greater(x, tf.convert_to_tensor(0))
  return x

dataset = tf.data.Dataset.from_tensor_slices([1, 2, 0, 3, 4])
dataset = dataset.map(assert_greater_0)
dataset = dataset.shuffle(buffer_size=3)
dataset = dataset.repeat()
dataset = tf.data.experimental.ignore_errors()(dataset)
&lt;/denchmark-code&gt;

yields a dataset that has 4 elements whereas adjusting the numbers in the initial list slightly
&lt;denchmark-code&gt;dataset = tf.data.Dataset.from_tensor_slices([1, 2, 3, 0, 4])
dataset = dataset.map(assert_greater_0)
dataset = dataset.shuffle(buffer_size=3)
dataset = dataset.repeat()
dataset = tf.data.experimental.ignore_errors()(dataset)
&lt;/denchmark-code&gt;

yields an infinitely repeating dataset.
More data:

removing the shuffle produces infinite datasets in both cases.
specifying the number of repetitions as 2 produces the same result (8 elements) in both cases,

Describe the expected behavior
I would expect that the two code snippets both produce infinite datasets.
Standalone code to reproduce the issue
&lt;denchmark-link:https://colab.research.google.com/drive/1quYzXz3inEiG6D7tfUhoGjapZbO8-AAA?usp=sharing&gt;https://colab.research.google.com/drive/1quYzXz3inEiG6D7tfUhoGjapZbO8-AAA?usp=sharing&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='chhensel' date='2020-07-19T08:26:13Z'>
		So I don't know why but the issue is with the  function, I tried it out using lambda in map and got infinite datasets, please check it out &lt;denchmark-link:https://gist.github.com/lordtt13/e79538a69ef69bb66fcfeeaa3a6701c7&gt;here&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='chhensel' date='2020-07-19T13:25:30Z'>
		You are right in the sense that the problem appears only with this function and the reason is that for one of the elements in the dataset it triggers a (in this case forced) error. The snippet is the distillation of a much larger pipeline with different errors and I simply tried to have the smallest example showing the behavior I'm referring to.
The ticket is about what happens when an error (violated assertion and I assume it happens for other errors as well) happens in a pipeline that specifies tf.data.experimental.ignore_errors(), which is about ignoring exactly those errors. My observation is that when you use this functionality provided by tf, then indefinite dataset repetition after shuffling does not work if the error in the error occurs at a position that is smaller than the shuffle buffer size. If the error happens later, then tf.data.experimental.ignore_errors() correctly ignores the errors and the dataset is repeated just fine.
		</comment>
		<comment id='3' author='chhensel' date='2020-07-20T15:45:16Z'>
		&lt;denchmark-link:https://github.com/chhensel&gt;@chhensel&lt;/denchmark-link&gt;
 While running the code with TF -Nightly  I am getting different output. Please find the gist &lt;denchmark-link:https://colab.research.google.com/gist/saikumarchalla/b341f0057575b19cca8c2698cbb28231/copy-of-repeat-error.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='4' author='chhensel' date='2020-07-20T16:37:28Z'>
		When I open the gist, it still shows the version that is not working (with tf 2.2.0), but I can confirm that using tf-nightly indeed shows the desired behavior, thanks!
		</comment>
		<comment id='5' author='chhensel' date='2020-07-21T05:36:23Z'>
		&lt;denchmark-link:https://github.com/chhensel&gt;@chhensel&lt;/denchmark-link&gt;
 Thank you for the update and marking this issue as closed since it is fixed in tf -nightly.
		</comment>
		<comment id='6' author='chhensel' date='2020-07-21T05:36:24Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41530&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41530&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>