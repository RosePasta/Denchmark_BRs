<bug id='32139' author='kristofgiber' open_date='2019-09-01T16:58:54Z' closed_time='2019-09-03T18:25:38Z'>
	<summary>TF 2.0.0-rc0 + TFP 0.7 broken combo: Tensor is unhashable if Tensor equality is enabled. Instead, use tensor.experimental_ref() as the key</summary>
	<description>
Error occurs:
tf-gpu 2.0.0-rc0 with tfp 0.7
Code to reproduce:
&lt;denchmark-code&gt;import tensorflow_probability as tfp
tfp.distributions.MultivariateNormalDiag([0.], [1.]).sample()
&lt;/denchmark-code&gt;

Error returned:

Traceback (most recent call last):
File "/home/pycharm_project/VAE/save_issue_reproduction.py", line 3, in 
tfp.distributions.MultivariateNormalDiag([0.], [1.]).sample()
File "/usr/local/lib/python3.5/dist-packages/tensorflow_probability/python/distributions/distribution.py", line 840, in sample
return self._call_sample_n(sample_shape, seed, name, **kwargs)
File "/usr/local/lib/python3.5/dist-packages/tensorflow_probability/python/distributions/transformed_distribution.py", line 391, in _call_sample_n
y = self.bijector.forward(x, **bijector_kwargs)
File "/usr/local/lib/python3.5/dist-packages/tensorflow_probability/python/bijectors/bijector.py", line 933, in forward
return self._call_forward(x, name, **kwargs)
File "/usr/local/lib/python3.5/dist-packages/tensorflow_probability/python/bijectors/bijector.py", line 904, in _call_forward
mapping = self._lookup(x=x, kwargs=kwargs)
File "/usr/local/lib/python3.5/dist-packages/tensorflow_probability/python/bijectors/bijector.py", line 1343, in _lookup
mapping = self._from_x[x].get(subkey, mapping).merge(x=x)
File "/usr/local/lib/python3.5/dist-packages/tensorflow_probability/python/bijectors/bijector.py", line 151, in getitem
return super(WeakKeyDefaultDict, self).getitem(weak_key)
File "/usr/local/lib/python3.5/dist-packages/tensorflow_probability/python/bijectors/bijector.py", line 181, in hash
return hash(x)
File "/usr/local/lib/python3.5/dist-packages/tensorflow_core/python/framework/ops.py", line 713, in hash
raise TypeError("Tensor is unhashable if Tensor equality is enabled. "
TypeError: Tensor is unhashable if Tensor equality is enabled. Instead, use tensor.experimental_ref() as the key.

	</description>
	<comments>
		<comment id='1' author='kristofgiber' date='2019-09-02T18:24:46Z'>
		I'm getting the same error using the same versions of tensorflow and tensorflow probability. Here is my code trying to run MCMC which I adapted from "Bayesian Methods For Hackcers"
&lt;denchmark-code&gt;yards_data = array([ 7.,  7.,  4., 12.,  5., 17.], dtype=float32)

def joint_log_prob(yards_data, sigma):
    rv_mu = tfd.Normal(loc=M, scale=S)
    rv_sigma = tfd.Uniform(low=0.0, high=20.0)
    
    mu_sample = mu.sample()
    yards = tfd.Normal(loc=mu_sample,scale=sigma)
    #compute log prob
    return (
        yards.log_prob(yards_data)
        + rv_sigma.log_prob(sigma)
        + rv_mu.log_prob(mu_sample)
    )

def unnormalized_log_posterior(sigma):
    return joint_log_prob(yards_data, sigma)

initial_chain_state = [tf.cast(s, tf.float32) * tf.ones([], dtype=tf.float32, name="init_sigma")]
unconstraining_bijectors = [tfp.bijectors.Exp()]
step_size = tf.Variable(0.05, name='step_size', trainable=False)

# Sample from the chain.
[
    sigma_samples,
], kernel_results = tfp.mcmc.sample_chain(
    num_results=100000,
    num_burnin_steps=10000,
    current_state=initial_chain_state,
    kernel=tfp.mcmc.TransformedTransitionKernel(
        inner_kernel=tfp.mcmc.HamiltonianMonteCarlo(
            target_log_prob_fn=unnormalized_log_posterior,
            num_leapfrog_steps=2,
            step_size=step_size,
            step_size_update_fn=tfp.mcmc.make_simple_step_size_update_policy(1),
            state_gradients_are_stopped=True),
        bijector=unconstraining_bijectors))
&lt;/denchmark-code&gt;

This creates error:
&lt;denchmark-code&gt;c:\users\ablan\miniconda3\envs\tf2.0rc\lib\site-packages\tensorflow_probability\python\mcmc\internal\util.py:494: UserWarning: `step_size` is not a `tf.Tensor`, Python number, or Numpy array. If this parameter is mutable (e.g., a `tf.Variable`), then the behavior implied by `store_parameters_in_results` will silently change on 2019-08-01. Please consult the docstring for `store_parameters_in_results` details and use `store_parameters_in_results=True` to silence this warning.
  param_name))

---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-79-b8bfc92e8c79&gt; in &lt;module&gt;
     13             step_size_update_fn=tfp.mcmc.make_simple_step_size_update_policy(1),
     14             state_gradients_are_stopped=True),
---&gt; 15         bijector=unconstraining_bijectors))

c:\users\ablan\miniconda3\envs\tf2.0rc\lib\site-packages\tensorflow_probability\python\mcmc\sample.py in sample_chain(num_results, current_state, previous_kernel_results, kernel, num_burnin_steps, num_steps_between_results, trace_fn, return_final_kernel_results, parallel_iterations, name)
    324         current_state)
    325     if previous_kernel_results is None:
--&gt; 326       previous_kernel_results = kernel.bootstrap_results(current_state)
    327 
    328     if trace_fn is None:

c:\users\ablan\miniconda3\envs\tf2.0rc\lib\site-packages\tensorflow_probability\python\mcmc\transformed_kernel.py in bootstrap_results(self, init_state, transformed_init_state)
    328         init_state_parts = (init_state if mcmc_util.is_list_like(init_state)
    329                             else [init_state])
--&gt; 330         transformed_init_state_parts = self._inverse_transform(init_state_parts)
    331         transformed_init_state = (
    332             transformed_init_state_parts if mcmc_util.is_list_like(init_state)

c:\users\ablan\miniconda3\envs\tf2.0rc\lib\site-packages\tensorflow_probability\python\mcmc\transformed_kernel.py in fn(state_parts)
     71   def fn(state_parts):
     72     return [b.inverse(sp)
---&gt; 73             for b, sp in zip(bijector, state_parts)]
     74   return fn
     75 

c:\users\ablan\miniconda3\envs\tf2.0rc\lib\site-packages\tensorflow_probability\python\mcmc\transformed_kernel.py in &lt;listcomp&gt;(.0)
     71   def fn(state_parts):
     72     return [b.inverse(sp)
---&gt; 73             for b, sp in zip(bijector, state_parts)]
     74   return fn
     75 

c:\users\ablan\miniconda3\envs\tf2.0rc\lib\site-packages\tensorflow_probability\python\bijectors\bijector.py in inverse(self, y, name, **kwargs)
    975       NotImplementedError: if `_inverse` is not implemented.
    976     """
--&gt; 977     return self._call_inverse(y, name, **kwargs)
    978 
    979   def _compute_inverse_log_det_jacobian_with_caching(

c:\users\ablan\miniconda3\envs\tf2.0rc\lib\site-packages\tensorflow_probability\python\bijectors\bijector.py in _call_inverse(self, y, name, **kwargs)
    944       if not self._is_injective:  # No caching for non-injective
    945         return self._inverse(y, **kwargs)
--&gt; 946       mapping = self._lookup(y=y, kwargs=kwargs)
    947       if mapping.x is not None:
    948         return mapping.x

c:\users\ablan\miniconda3\envs\tf2.0rc\lib\site-packages\tensorflow_probability\python\bijectors\bijector.py in _lookup(self, x, y, kwargs)
   1344     if y is not None:
   1345       # We removed y at caching time. Add it back if we lookup successfully.
-&gt; 1346       mapping = self._from_y[y].get(subkey, mapping).merge(y=y)
   1347     return mapping
   1348 

c:\users\ablan\miniconda3\envs\tf2.0rc\lib\site-packages\tensorflow_probability\python\bijectors\bijector.py in __getitem__(self, key)
    149   def __getitem__(self, key):
    150     weak_key = HashableWeakRef(key, lambda w: self.pop(w, None))
--&gt; 151     return super(WeakKeyDefaultDict, self).__getitem__(weak_key)
    152 
    153   # This is the "DefaultDict" part.

c:\users\ablan\miniconda3\envs\tf2.0rc\lib\site-packages\tensorflow_probability\python\bijectors\bijector.py in __hash__(self)
    179     x = self()
    180     if not isinstance(x, np.ndarray):
--&gt; 181       return hash(x)
    182     # Note: The following logic can never be reached by the public API because
    183     # the bijector base class always calls `convert_to_tensor` before accessing

c:\users\ablan\miniconda3\envs\tf2.0rc\lib\site-packages\tensorflow_core\python\framework\ops.py in __hash__(self)
    711     if (Tensor._USE_EQUALITY and executing_eagerly_outside_functions() and
    712         (g is None or g._building_function)):  # pylint: disable=protected-access
--&gt; 713       raise TypeError("Tensor is unhashable if Tensor equality is enabled. "
    714                       "Instead, use tensor.experimental_ref() as the key.")
    715     else:

TypeError: Tensor is unhashable if Tensor equality is enabled. Instead, use tensor.experimental_ref() as the key.


&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='kristofgiber' date='2019-09-03T18:25:02Z'>
		Thanks for the report! This is due to a change in TF's Tensor equality semantics that occurred between the TFP 0.7 release and the TF 2.0.0-rc0 prerelease. You can fix it by installing TFP 0.8-rc0 (pip install tensorflow_probability==0.8.0rc0 --user --upgrade), which should include the necessary updates.
		</comment>
		<comment id='3' author='kristofgiber' date='2019-09-03T18:25:38Z'>
		Closing for now; feel free to reopen if the problem still occurs.
		</comment>
		<comment id='4' author='kristofgiber' date='2019-09-03T18:25:39Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=32139&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=32139&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='kristofgiber' date='2019-09-17T08:43:24Z'>
		After upgrade
&lt;denchmark-code&gt;pip install tensorflow_probability==0.8.0rc0 --user --upgrade
&lt;/denchmark-code&gt;

Error still happens
&lt;denchmark-code&gt;File "/Users/techmaster/LearnAI/venv/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py", line 713, in __hash__
    raise TypeError("Tensor is unhashable if Tensor equality is enabled. "
TypeError: Tensor is unhashable if Tensor equality is enabled. Instead, use tensor.experimental_ref() as the key.
&lt;/denchmark-code&gt;

My environment:

MacOSX High Sierra
TensorFlow version 2.0.0-rc1
tf-estimator-nightly  1.14.0.dev2019080601
Keras                 2.2.5
Keras-Applications    1.0.8
Keras-Preprocessing   1.1.0

Piece of code causes error
intermediate_layer_model = Model(inputs=self.model.input, outputs=self.model.get_layer("embedding").output)
intermediate_output = intermediate_layer_model.predict(encoded_texts)
return intermediate_output
		</comment>
		<comment id='6' author='kristofgiber' date='2019-10-17T09:08:02Z'>
		still doesn't work after installing rc0
		</comment>
		<comment id='7' author='kristofgiber' date='2019-10-24T18:39:34Z'>
		tensorflow_probability==0.8.0rc0  did not fix the error. Any other solution?
		</comment>
		<comment id='8' author='kristofgiber' date='2019-10-27T17:37:41Z'>
		Same issue and the suggested solution doesn't work
		</comment>
		<comment id='9' author='kristofgiber' date='2019-10-28T08:50:50Z'>
		Same issue here. Doesn't work even after installing "ensorflow_probability==0.8.0rc0"
		</comment>
		<comment id='10' author='kristofgiber' date='2019-10-28T09:13:54Z'>
		Hi.
Same issue. As &lt;denchmark-link:https://github.com/NabinAdhikari674&gt;@NabinAdhikari674&lt;/denchmark-link&gt;
 says,  doesn't work. In my case the problem comes from trying to migrate from TF 1.14 to TF 2.0 with Keras 2.3.1 (if it helps).
		</comment>
		<comment id='11' author='kristofgiber' date='2019-10-29T06:57:20Z'>
		pip install tf-hub-nightly
it works
		</comment>
		<comment id='12' author='kristofgiber' date='2019-11-01T15:43:55Z'>
		
pip install tf-hub-nightly
it works

That didn't work for me
		</comment>
		<comment id='13' author='kristofgiber' date='2019-11-01T20:12:31Z'>
		Me neither. :-(
		</comment>
		<comment id='14' author='kristofgiber' date='2019-11-05T11:54:27Z'>
		Me neither
		</comment>
		<comment id='15' author='kristofgiber' date='2019-11-14T11:04:33Z'>
		I am getting this error with tf2.0 migration on tf-nightly build.
		</comment>
		<comment id='16' author='kristofgiber' date='2019-11-16T13:49:16Z'>
		I am also getting the same error when I am  trying to use the variable init_wt:
&lt;denchmark-code&gt;
init_wt = tf.keras.initializers.TruncatedNormal(stddev=weight_init_std, mean=weight_init_mean, seed=100)

init_wt 

&lt;tensorflow.python.ops.init_ops_v2.TruncatedNormal at 0x1b7d6519f08&gt;

&lt;/denchmark-code&gt;

I think the problem is caused by a mismatch between Keras and Tensorflow libraries as mentioned in &lt;denchmark-link:https://stackoverflow.com/questions/58778872/typeerror-tensor-is-unhashable-if-tensor-equality-is-enabled-instead-use-tens&gt;this Stackoverflow question&lt;/denchmark-link&gt;
. The solution proposed works for me. But, it means downgrading TF version and not being able to use GPU.
		</comment>
		<comment id='17' author='kristofgiber' date='2019-11-28T16:51:57Z'>
		I'm having this problem as well
		</comment>
		<comment id='18' author='kristofgiber' date='2019-12-11T14:45:42Z'>
		ditto! :(
		</comment>
		<comment id='19' author='kristofgiber' date='2019-12-11T20:11:11Z'>
		(Not sure how I got assigned this; in fact I didnt even notice. Reassigned to alextp for further triage.)
		</comment>
		<comment id='20' author='kristofgiber' date='2019-12-11T20:51:03Z'>
		If the problem still occurs for you please open a new issue with the steps you need to reproduce the problem. As far as we can tell the TFP issue here has been fixed.
		</comment>
	</comments>
</bug>