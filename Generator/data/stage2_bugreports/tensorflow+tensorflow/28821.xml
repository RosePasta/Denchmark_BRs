<bug id='28821' author='paulgheorghecristian' open_date='2019-05-18T08:50:29Z' closed_time='2019-06-24T14:25:54Z'>
	<summary>Large virtual memory usage for TF Lite 2.0</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): ubuntu 16.04 and 18.04
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 2.0 and 1.10
Python version: 3.5.2 and 3.6.7
Bazel version (if compiling from source): 19.0 and 16.0
GCC/Compiler version (if compiling from source): 7.4 and 7.3
CUDA/cuDNN version: 10.1 and 9.1
GPU model and memory: Nvidia RTX 2080ti(11 GB) and Nvidia GTX 1050ti(4 GB)

Describe the current behavior
When using valgrind massif on label_image TF Lite example, it reports 400 MB of virtual memory,
even though the model's size is only 14 MB and I do not understand where this overhead is coming from.
Here is the profiling information at peak:
100.00% (413,081,600B) (page allocation syscalls) mmap/mremap/brk, --alloc-fns, etc.
-&gt;89.83% (371,077,120B) 0x6B8E6B9: mmap (mmap.c:34)
| -&gt;48.74% (201,330,688B) 0x6B0A3CF: new_heap (arena.c:438)
| | -&gt;48.74% (201,330,688B) 0x6B0AC1F: arena_get2.part.3 (arena.c:646)
| |   -&gt;48.74% (201,330,688B) 0x6B11248: malloc (malloc.c:2911)
| |     -&gt;48.74% (201,330,688B) 0x657C1E6: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
| |       -&gt;32.49% (134,221,824B) 0x4BDD65: ??? (in /home/paul/.cache/bazel/_bazel_paul/3c9cebfe1f000a90a0a2bd1f5b50e543/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/lite/examples/label_image/label_image)
| |       | -&gt;32.49% (134,221,824B) 0x4EE3B1: ??? (in /home/paul/.cache/bazel/_bazel_paul/3c9cebfe1f000a90a0a2bd1f5b50e543/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/lite/examples/label_image/label_image)
| |       |   -&gt;32.49% (134,221,824B) 0x65A657D: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
| |       |     -&gt;32.49% (134,221,824B) 0x5BBE6B8: start_thread (pthread_create.c:333)
| |       |       -&gt;32.49% (134,221,824B) 0x6B9441B: clone (clone.S:109)
Describe the expected behavior
I expected less memory usage from this lite tool.
Code to reproduce the issue
Just run label_image TF example and with this:
valgrind --tool=massif --pages-as-heap=yes --massif-out-file=massif.out bazel-bin/tensorflow/lite/examples/label_image/label_image -m mobilenet_v2 _1.0_224.tflite -i grace_hopper.bmp; grep mem_heap_B massif.out | sed -e 's/mem_heap_B=\(.*\)/\1/' | sort -g | tail -n 1
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
LE:
By running with debugging symbols, it seems that EigenForTFLite is the culprit; is this really a wanted behavior?
	</description>
	<comments>
		<comment id='1' author='paulgheorghecristian' date='2019-06-07T20:26:11Z'>
		If you have debug symbols, you are going to have much bigger .so's. These get mmapped which means you will have large VM memory usage. In virtual memory large vm usage is not necessarily a problem, because as long as most pages are not really needed, then you won't actually incur physcal memory  pressure. Also, try a release build, look at physical resident memory usage.
		</comment>
		<comment id='2' author='paulgheorghecristian' date='2019-06-22T12:21:50Z'>
		It has been 14 days with no activity and the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='3' author='paulgheorghecristian' date='2019-06-24T14:25:55Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28821&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28821&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='paulgheorghecristian' date='2019-06-24T14:26:02Z'>
		Thank you for your time.
		</comment>
	</comments>
</bug>