<bug id='34187' author='skyroam' open_date='2019-11-12T07:39:16Z' closed_time='2019-11-22T18:25:34Z'>
	<summary>SparseCategoricalAccuracy() &amp; InvalidArgumentError</summary>
	<description>
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Win10
TensorFlow version (use command below): 2.0.0
Python version: 3.7.5

When I try to run the following code, an error occurs,
import numpy as np
import tensorflow as tf
class MNISTLoader():
    def __init__(self):
        mnist = tf.keras.datasets.mnist
        (self.train_data, self.train_label), (self.test_data, self.test_label) = mnist.load_data()
        self.train_data = np.expand_dims(self.train_data.astype(np.float32) / 255.0, axis=-1)
        self.test_data = np.expand_dims(self.train_data.astype(np.float32) / 255.0, axis=-1)
        self.train_label = self.train_label.astype(np.int32)
        self.test_label = self.test_label.astype(np.int32)
        self.num_train_data, self.num_test_data = self.train_data.shape[0], self.test_data.shape[0]
    
    def get_batch(self, batch_size):
        index = np.random.randint(0, np.shape(self.train_data)[0], batch_size)
        return self.train_data[index, :], self.train_label[index]

class MLP(tf.keras.Model):
    def __init__(self):
        super().__init__()
        self.flatten = tf.keras.layers.Flatten()
        self.dense1 = tf.keras.layers.Dense(units=100, activation=tf.nn.relu)
        self.dense2 = tf.keras.layers.Dense(units=10)
        
    def call(self, inputs):
        x = self.flatten(inputs)
        x = self.dense1(x)
        x = self.dense2(x)
        output = tf.nn.softmax(x)
        return output

num_epochs = 5
batch_size = 50
learning_rate = 0.001
model = MLP()
data_loader = MNISTLoader()
optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate)

num_batches = int(data_loader.num_train_data // batch_size * num_epochs)
for batch_index in range(num_batches):
    X, y = data_loader.get_batch(batch_size)
    with tf.GradientTape() as tape:
        y_pred = model(X)
        loss = tf.keras.losses.sparse_categorical_crossentropy(y_true=y, y_pred=y_pred)
        loss = tf.reduce_mean(loss)
        print("batch %d: loss %f" % (batch_index, loss.numpy()))
    grads = tape.gradient(loss, model.variables)
    optimizer.apply_gradients(grads_and_vars=zip(grads, model.variables))

sparse_categorical_accuracy = tf.keras.metrics.SparseCategoricalAccuracy()
num_batches = int(data_loader.num_test_data // batch_size)
for batch_index in range(num_batches):
    start_index, end_index = batch_index * batch_size, (batch_index + 1) * batch_size
    y_pred = model.predict(data_loader.test_data[start_index: end_index])
    y_true = data_loader.test_label[start_index: end_index]
    #y_true = y_true.reshape(-1,1)
    sparse_categorical_accuracy.update_state(y_true=y_true, y_pred=y_pred)
    if batch_index == 1:
        print("y_pred", y_pred.shape)
        print(y_pred)
        print("y_true", y_true.shape)
        print(y_true)
print("test accuracy: %f" % sparse_categorical_accuracy.result())
Describe the current behavior
&lt;denchmark-h:h2&gt;The information is as follows:&lt;/denchmark-h&gt;

InvalidArgumentError                      Traceback (most recent call last)
 in 
6     y_true = data_loader.test_label[start_index: end_index]
7     #y_true = y_true.reshape(-1,1)
----&gt; 8     sparse_categorical_accuracy.update_state(y_true=y_true, y_pred=y_pred)
9
10     if batch_index == 1:
D:\software\Anaconda3\envs\tensorflow2.0\lib\site-packages\tensorflow_core\python\keras\utils\metrics_utils.py in decorated(metric_obj, *args, **kwargs)
73
74     with tf_utils.graph_context_for_symbolic_tensors(*args, **kwargs):
---&gt; 75       update_op = update_state_fn(*args, **kwargs)
76     if update_op is not None:  # update_op will be None in eager execution.
77       metric_obj.add_update(update_op)
D:\software\Anaconda3\envs\tensorflow2.0\lib\site-packages\tensorflow_core\python\keras\metrics.py in update_state(self, y_true, y_pred, sample_weight)
579         y_pred, y_true)
580
--&gt; 581     matches = self._fn(y_true, y_pred, **self._fn_kwargs)
582     return super(MeanMetricWrapper, self).update_state(
583         matches, sample_weight=sample_weight)
D:\software\Anaconda3\envs\tensorflow2.0\lib\site-packages\tensorflow_core\python\keras\metrics.py in sparse_categorical_accuracy(y_true, y_pred)
2784     y_pred = math_ops.cast(y_pred, K.dtype(y_true))
2785
-&gt; 2786   return math_ops.cast(math_ops.equal(y_true, y_pred), K.floatx())
2787
2788
D:\software\Anaconda3\envs\tensorflow2.0\lib\site-packages\tensorflow_core\python\util\dispatch.py in wrapper(*args, **kwargs)
178     """Call target, and fall back on dispatchers if there is a TypeError."""
179     try:
--&gt; 180       return target(*args, **kwargs)
181     except (TypeError, ValueError):
182       # Note: convert_to_eager_tensor currently raises a ValueError, not a
D:\software\Anaconda3\envs\tensorflow2.0\lib\site-packages\tensorflow_core\python\ops\math_ops.py in equal(x, y, name)
1304     A Tensor of type bool with the same size as that of x or y.
1305   """
-&gt; 1306   return gen_math_ops.equal(x, y, name=name)
1307
1308
D:\software\Anaconda3\envs\tensorflow2.0\lib\site-packages\tensorflow_core\python\ops\gen_math_ops.py in equal(x, y, incompatible_shape_error, name)
3617       else:
3618         message = e.message
-&gt; 3619       _six.raise_from(_core._status_to_exception(e.code, message), None)
3620   # Add nodes to the TensorFlow graph.
3621   if incompatible_shape_error is None:
D:\software\Anaconda3\envs\tensorflow2.0\lib\site-packages\six.py in raise_from(value, from_value)
InvalidArgumentError: Incompatible shapes: [0] vs. [50] [Op:Equal]
I don't know why this happens. I have checked the API and tried to reshape the y_true, it doesn't work either.
	</description>
	<comments>
		<comment id='1' author='skyroam' date='2019-11-12T11:27:02Z'>
		Issue is replicating on colab with Tensorflow 2.0.0.
Please take a look at &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/3f4e3f19e4399bc568213932499af2c0/untitled253.ipynb&gt;gist&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='skyroam' date='2019-11-15T22:15:03Z'>
		If you reduce the batch_size = 1 the script executes successfully. Tested with tf-nightly version 2.1.0-dev20191115
		</comment>
		<comment id='3' author='skyroam' date='2019-11-22T18:25:34Z'>
		With the current batch size the shape of y_pred and y_true are : y_pred (50, 10), y_true (50,)
Except for the last batch where the shape is: y_pred (50, 10) y_true (0,)
This is the reason for the error. Fixing the input data will fix the issue.
		</comment>
		<comment id='4' author='skyroam' date='2019-11-22T18:25:36Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34187&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34187&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>