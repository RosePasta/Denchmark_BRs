<bug id='30029' author='mayou36' open_date='2019-06-21T12:51:33Z' closed_time='2019-06-26T22:22:29Z'>
	<summary>Autoconversion to Tensor in functions</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 19.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary, pip
TensorFlow version (use command below):1.14.0
Python version: 3.7
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

Describe the current behavior
calling certain functions with non-Tensors (but convertible to) fails, since the object is not converted to a tensor. The function actually only expect Tensors.
e.g. tf.math.real(1.0) fails because 1. has no attribute dtype (which it will only have after the conversion to a tensor).
Describe the expected behavior
(My understanding goes that:) functions that take Tensors, such as tf.math.real, can also take anything that can be converted to a Tensor, such as Python floats or objects with a registered conversion function. Namely,
&lt;denchmark-code&gt;tf.math.real(tf.convert_to_tensor(something))
tf.math.real(something)
&lt;/denchmark-code&gt;

are equivalent.
I would expect tf.math.real(1.) to return the real part of the tensor tf.convert_to_tensor(1.).
This causes a big problem with the (actual beautiful!) registration of conversion functions. The code contains only a minimal example.
Am I mistaken with the expected behavior? And if so, this may could be made clear in the docs, that only Tensors are taken vs Tensor-like objects. E.g. the docs of tf.math.round and tf.math.real leave no clue in which to use tensors and in which Tensor-like objects.
Code to reproduce the issue
short version
&lt;denchmark-code&gt;real_python = tf.math.real(1.)  # &lt;- fails
&lt;/denchmark-code&gt;

but of course also fails for any custom defined Tensor-like object
&lt;denchmark-code&gt;from tensorflow.python import ops

class MyTensor():
    def _dense_var_to_tensor(self, dtype, name, as_ref):
        return tf.constant(42, dtype=dtype)


def _dense_var_to_tensor(var, dtype=None, name=None, as_ref=False):
    return var._dense_var_to_tensor(dtype=dtype, name=name, as_ref=as_ref)


ops.register_tensor_conversion_function(MyTensor, _dense_var_to_tensor)

my_t1 = MyTensor()
t1 = tf.convert_to_tensor(my_t1)  # &lt;- works
square = tf.math.round(my_t1)  # &lt;- works
real_python = tf.math.real(1.)  # &lt;- fails
real = tf.math.real(my_t1)  # &lt;- fails
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='mayou36' date='2019-06-22T19:14:38Z'>
		Added a PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/30049&gt;#30049&lt;/denchmark-link&gt;
 for the fix.
		</comment>
		<comment id='2' author='mayou36' date='2019-06-26T22:22:30Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30029&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30029&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>