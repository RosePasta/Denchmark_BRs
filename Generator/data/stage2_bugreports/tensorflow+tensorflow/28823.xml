<bug id='28823' author='Windaway' open_date='2019-05-18T10:12:24Z' closed_time='2019-05-27T05:08:23Z'>
	<summary>[TF 2.0 alpha] Tutorial "Using TFRecords and tf.Example" can't run on tensorflow2.0 Î±0 gpu</summary>
	<description>
Thank you for submitting a TensorFlow documentation issue. Per our GitHub
policy, we only address code/doc bugs, performance issues, feature requests, and
build/installation issues on GitHub.
The TensorFlow docs are open source! To get involved, read the documentation
contributor guide: &lt;denchmark-link:https://www.tensorflow.org/community/contribute/docs&gt;https://www.tensorflow.org/community/contribute/docs&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;URL(s) with the issue:&lt;/denchmark-h&gt;

TensorFlow version: Tensorflow 2.0 alpha
Doc Link: Using TFRecords and tf.Example &lt;denchmark-link:https://www.tensorflow.org/alpha/tutorials/load_data/tf_records&gt;https://www.tensorflow.org/alpha/tutorials/load_data/tf_records&lt;/denchmark-link&gt;

Windows 10 LTSC x64 Python3.6 Cuda 10.0 Cudnn 7.5
&lt;denchmark-h:h2&gt;Description of issue (what needs changing):&lt;/denchmark-h&gt;

If I run the example code, I will have an error in the cell:
tf_serialize_example(f0,f1,f2,f3)
&lt;denchmark-h:h3&gt;Clear description&lt;/denchmark-h&gt;

For example, why should someone use this method? How is it useful?
&lt;denchmark-h:h3&gt;Correct links&lt;/denchmark-h&gt;

Is the link to the source code correct?
&lt;denchmark-h:h3&gt;Parameters defined&lt;/denchmark-h&gt;

Are all parameters defined and formatted correctly?
&lt;denchmark-h:h3&gt;Returns defined&lt;/denchmark-h&gt;

Are return values defined?
&lt;denchmark-h:h3&gt;Raises listed and defined&lt;/denchmark-h&gt;

`UnknownError           Traceback (most recent call last)
 in 
----&gt; 1 tf_serialize_example(f0,f1,f2,f3)
 in tf_serialize_example(f0, f1, f2, f3)
3     serialize_example,
4     (f0,f1,f2,f3),  # pass these args to the above function.
----&gt; 5     tf.string)      # the return type is tf.string.
6   return tf.reshape(tf_string, ()) # The result is a scalar
F:\Anaconda3\envs\TF2\lib\site-packages\tensorflow\python\ops\script_ops.py in eager_py_func(func, inp, Tout, name)
387     if func returns None.
388   """
--&gt; 389   return _internal_py_func(func=func, inp=inp, Tout=Tout, eager=True, name=name)
390
391
F:\Anaconda3\envs\TF2\lib\site-packages\tensorflow\python\ops\script_ops.py in _internal_py_func(func, inp, Tout, stateful, eager, is_grad_func, name)
276   if eager:
277     result = gen_script_ops.eager_py_func(
--&gt; 278         input=inp, token=token, Tout=Tout, name=name)
279   else:
280     if stateful:
F:\Anaconda3\envs\TF2\lib\site-packages\tensorflow\python\ops\gen_script_ops.py in eager_py_func(input, token, Tout, name)
64       else:
65         message = e.message
---&gt; 66       _six.raise_from(_core._status_to_exception(e.code, message), None)
67   # Add nodes to the TensorFlow graph.
68   token = _execute.make_str(token, "token")
F:\Anaconda3\envs\TF2\lib\site-packages\six.py in raise_from(value, from_value)
UnknownError: RuntimeError: Error copying tensor to device: CPU:0. Can't copy 35 bytes of a tensor into another with 32 bytes buffer.
Traceback (most recent call last):
File "F:\Anaconda3\envs\TF2\lib\site-packages\tensorflow\python\ops\script_ops.py", line 205, in call
return func(device, token, args)
File "F:\Anaconda3\envs\TF2\lib\site-packages\tensorflow\python\ops\script_ops.py", line 107, in call
ret = self._func(*args)
File "", line 10, in serialize_example
'feature2': _bytes_feature(feature2),
File "", line 8, in _bytes_feature
value = value.numpy() # BytesList won't unpack a string from an EagerTensor.
File "F:\Anaconda3\envs\TF2\lib\site-packages\tensorflow\python\framework\ops.py", line 732, in numpy
return self._cpu_nograd()._numpy()  # pylint: disable=protected-access
File "F:\Anaconda3\envs\TF2\lib\site-packages\tensorflow\python\framework\ops.py", line 899, in _cpu_nograd
return self._copy_nograd(context.context(), "CPU:0")
File "F:\Anaconda3\envs\TF2\lib\site-packages\tensorflow\python\framework\ops.py", line 847, in _copy_nograd
new_tensor = self._copy_to_device(context=ctx._handle, device=device_name)
RuntimeError: Error copying tensor to device: CPU:0. Can't copy 35 bytes of a tensor into another with 32 bytes buffer.
[Op:EagerPyFunc]
`
	</description>
	<comments>
		<comment id='1' author='Windaway' date='2019-05-18T10:15:44Z'>
		If I write import numpy before def _bytes_feature(value): Problem solved.
		</comment>
		<comment id='2' author='Windaway' date='2019-05-22T07:41:16Z'>
		&lt;denchmark-link:https://github.com/Windaway&gt;@Windaway&lt;/denchmark-link&gt;
 I tried reproducing the issue through colab link provided but the code executed without any error. Can you try once again and let us know if that still gives error. Thanks!
		</comment>
		<comment id='3' author='Windaway' date='2019-05-27T05:08:23Z'>
		Closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
	</comments>
</bug>