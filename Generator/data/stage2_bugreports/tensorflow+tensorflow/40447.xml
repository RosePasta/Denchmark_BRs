<bug id='40447' author='dhiegomaga' open_date='2020-06-14T13:26:49Z' closed_time='2020-07-15T01:55:19Z'>
	<summary>[Using tf.function()] ValueError: Input 0 of layer dense is incompatible with the layer</summary>
	<description>
Set up: Using tensorflow 2.2.0 on python 3.7.
Background: I'm just trying to get the concrete function of a simple tf.keras.Model to save it using SavedModel and use it later, yet there is no example of doing so in the documentation. Trying to perform this simple task following the documentation gives the following problem:

I'm trying to run a very simple concrete function &lt;denchmark-link:https://www.tensorflow.org/guide/concrete_function#accessing_concrete_function&gt;based on the documentation&lt;/denchmark-link&gt;
:
import tensorflow as tf

inputs = tf.keras.Input(shape=(3,))
x = tf.keras.layers.Dense(4, activation=tf.nn.relu)(inputs)
outputs = tf.keras.layers.Dense(5, activation=tf.nn.softmax)(x)
model = tf.keras.Model(inputs=inputs, outputs=outputs)

x = tf.constant([[1.0,2.0,3.0], [1.0,2.0,3.0]])
model.predict(x) 

# outputs: array([[0.19964378, 0.23859118, 0.17491119, 0.15458305, 0.23227075],
#       [0.19964378, 0.23859118, 0.17491119, 0.15458305, 0.23227075]],
#      dtype=float32)
# OK!
Now using tf.function:
@tf.function(input_signature=[tf.TensorSpec(shape=(None, 3), dtype=tf.float32)])
def predict(x):
  return model.predict(x)
p = predict.get_concrete_function()

# TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
Without None :
@tf.function(input_signature=[tf.TensorSpec(shape=(3,), dtype=tf.float32)])
def predict(x):
  return model.predict(x)
p = predict.get_concrete_function()

# ValueError: Input 0 of layer dense is incompatible with the layer: 
# expected axis -1 of input shape to have value 3 but received input with shape [None, 1]
Finally, without declaring the input attribute on the tf.function:
@tf.function
def predict(x):
  return model.predict(x)

p = predict.get_concrete_function(x=tf.TensorSpec(shape=(1,3,), dtype=tf.float32))
#  AttributeError: 'Tensor' object has no attribute 'numpy'
(Among many other permutations, none o which works, because either it's a bug, or somehow you've made this thing unusably  complicated, or I'm missing something)
	</description>
	<comments>
		<comment id='1' author='dhiegomaga' date='2020-06-15T07:36:15Z'>
		I have tried in colab with TF 2.2 and was able to reproduce the issue. But with TF nightly version() i am seeing  different error .Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/ab008de764138bbcb0a038c92f7d5f05/untitled22.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='2' author='dhiegomaga' date='2020-06-15T12:57:14Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 thanks for the collab file.
So, my question is if I'm doing it wrong or is it a bug. I tried following as closely as I could the way it is instructed on the docs, but they are quite confusing.
My goal is just to get the concrete function of the model's predict method, so I can save it using SavedModel and use it elsewhere.
		</comment>
		<comment id='3' author='dhiegomaga' date='2020-06-15T13:07:58Z'>
		I see that on nightly the error message is more useful:
&lt;denchmark-code&gt;RuntimeError: Detected a call to `Model.predict` inside a `tf.function`. `
Model.predict is a high-level endpoint that manages its own `tf.function`. 
Please move the call to `Model.predict` outside of all enclosing `tf.function`s. 
Note that you can call a `Model` directly on `Tensor`s inside a `tf.function` like: `model(x)`.
&lt;/denchmark-code&gt;

So, when I did:
# Using Model instead of Model.predict
@tf.function(input_signature=[tf.TensorSpec(shape=(None, 3), dtype=tf.float32)])
def predict(x):
  return model(x)
p = predict.get_concrete_function()

# Test
x = tf.constant([[1.0,2.0,3.0], [1.0,2.0,3.0]])
p(x) 

# out -&gt; &lt;tf.Tensor: shape=(2, 5), dtype=float32, numpy=
# array([[0.104079  , 0.3223787 , 0.28109816, 0.18215933, 0.11028478],
#       [0.104079  , 0.3223787 , 0.28109816, 0.18215933, 0.11028478]],
#      dtype=float32)&gt;
It actually worked! For some reason, you can't call model.predict(x) inside a tf.function, but you can call model(x) inside a tf.function (they should be equivalent... oh well)
		</comment>
		<comment id='4' author='dhiegomaga' date='2020-07-01T00:25:12Z'>
		&lt;denchmark-link:https://github.com/dhiegomaga&gt;@dhiegomaga&lt;/denchmark-link&gt;
 Sorry for the delay in my response.
The decorator tf.function will automatically transform the code in a function into the graph-style code for execution. As mentioned in the above RuntimeError,  under the hoods, model.predict manages its own execution graph. decorating with   another tf.function results in internal error.
I understand you already resolved this issue. If this is not an issue, please feel free to close the issue. Thanks!
		</comment>
		<comment id='5' author='dhiegomaga' date='2020-07-08T01:19:39Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='6' author='dhiegomaga' date='2020-07-15T01:55:16Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='7' author='dhiegomaga' date='2020-07-15T01:55:20Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40447&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40447&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>