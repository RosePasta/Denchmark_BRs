<bug id='36708' author='rcizzle94' open_date='2020-02-12T19:13:09Z' closed_time='2020-02-13T09:32:48Z'>
	<summary>First python project for class--- could someone please help me understand?- exif data using python</summary>
	<description>
Here are the instructions and at the bottom is exp-11's script. I have no idea what to do. VERY new to programming.. thank you ahead of time!
Using the Exp-11.py script provide as a baseline your assignment is as follows:


Allow the user to enter a path


Using that path, process all the .jpg files contained in that folder  (note you will need to create a directory with jpg images)


Extract, EXIF data from each of the images and create a pretty table output.  Note, you will go beyond the basics and extract whatever camera or photo data exists for each photo.


Plot the geolocation of each image on a map.


(Note, there are several ways to do this)  However, the easiest method would be to use MapMaker App, at &lt;denchmark-link:https://mapmakerapp.com/&gt;https://mapmakerapp.com/&lt;/denchmark-link&gt;

you can either manually enter the lat/long values your code generates or you can place your results in a CSV file and upload the data to the map.
NOTE, this is a manual step process

Submit both your script and a screenshot of the results.

'''
EXIF Data Acquistion
January 2019
Version 1.1
'''
from future import print_function
'''
Copyright (c) 2019 Chet Hosmer, Python Forensics
Permission is hereby granted, free of charge, to any person obtaining a copy of this software
and associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial
portions of the Software.
'''
&lt;denchmark-h:h1&gt;Usage Example:&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;python Exp-11.py&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;Requirement: Python 2.x or 3.x&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;Requirement: 3rd Party Library that is utilized is: PILLOW&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;pip install PILLOW  from the command line&lt;/denchmark-h&gt;

''' LIBRARY IMPORT SECTION '''
import os                       # Python Standard Library : Operating System Methods
import sys                      # Python Standard Library : System Methods
from datetime import datetime   # Python Standard Libary datetime method from Standard Library
&lt;denchmark-h:h1&gt;import the Python Image Library&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;along with TAGS and GPS related TAGS&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;Note you must install the PILLOW Module&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;pip install PILLOW&lt;/denchmark-h&gt;

from PIL import Image
from PIL.ExifTags import TAGS, GPSTAGS
&lt;denchmark-h:h1&gt;import the prettytable library&lt;/denchmark-h&gt;

from prettytable import PrettyTable
def ExtractGPSDictionary(fileName):
''' Function to Extract GPS Dictionary '''
try:
pilImage = Image.open(fileName)
exifData = pilImage._getexif()
&lt;denchmark-code&gt;except Exception:
    # If exception occurs from PIL processing
    # Report the 
    return None, None

# Interate through the exifData
# Searching for GPS Tags

imageTimeStamp = "NA"
cameraModel = "NA"
cameraMake = "NA"
gpsData = False

gpsDictionary = {}

if exifData:

    for tag, theValue in exifData.items():

        # obtain the tag
        tagValue = TAGS.get(tag, tag)

        # Collect basic image data if available

        if tagValue == 'DateTimeOriginal':
            imageTimeStamp = exifData.get(tag).strip()

        if tagValue == "Make":
            cameraMake = exifData.get(tag).strip()

        if tagValue == 'Model':
            cameraModel = exifData.get(tag).strip()

        # check the tag for GPS
        if tagValue == "GPSInfo":

            gpsData = True;

            # Found it !
            # Now create a Dictionary to hold the GPS Data

            # Loop through the GPS Information
            for curTag in theValue:
                gpsTag = GPSTAGS.get(curTag, curTag)
                gpsDictionary[gpsTag] = theValue[curTag]

    basicExifData = [imageTimeStamp, cameraMake, cameraModel]    

    return gpsDictionary, basicExifData

else:
    return None, None
&lt;/denchmark-code&gt;

&lt;denchmark-h:h1&gt;End ExtractGPSDictionary ============================&lt;/denchmark-h&gt;

def ExtractLatLon(gps):
''' Function to Extract Lattitude and Longitude Values '''
&lt;denchmark-code&gt;# to perform the calcuation we need at least
# lat, lon, latRef and lonRef

try:
    latitude     = gps["GPSLatitude"]
    latitudeRef  = gps["GPSLatitudeRef"]
    longitude    = gps["GPSLongitude"]
    longitudeRef = gps["GPSLongitudeRef"]

    lat = ConvertToDegrees(latitude)
    lon = ConvertToDegrees(longitude)

    # Check Latitude Reference
    # If South of the Equator then lat value is negative

    if latitudeRef == "S":
        lat = 0 - lat

    # Check Longitude Reference
    # If West of the Prime Meridian in 
    # Greenwich then the Longitude value is negative

    if longitudeRef == "W":
        lon = 0- lon

    gpsCoor = {"Lat": lat, "LatRef":latitudeRef, "Lon": lon, "LonRef": longitudeRef}

    return gpsCoor

except:
    return None
&lt;/denchmark-code&gt;

&lt;denchmark-h:h1&gt;End Extract Lat Lon ==============================================&lt;/denchmark-h&gt;

def ConvertToDegrees(gpsCoordinate):
''' Function to CONVERT GPS COORIDINATES TO DEGRESS '''
d0 = gpsCoordinate[0][0]
d1 = gpsCoordinate[0][1]
try:
degrees = float(d0) / float(d1)
except:
degrees = 0.0
&lt;denchmark-code&gt;m0 = gpsCoordinate[1][0]
m1 = gpsCoordinate[1][1]
try:
    minutes = float(m0) / float(m1)
except:
    minutes=0.0

s0 = gpsCoordinate[2][0]
s1 = gpsCoordinate[2][1]
try:
    seconds = float(s0) / float(s1)
except:
    seconds = 0.0

floatCoordinate = float (degrees + (minutes / 60.0) + (seconds / 3600.0))

return floatCoordinate
&lt;/denchmark-code&gt;

''' MAIN PROGRAM ENTRY SECTION '''
if name == "main":
'''
pyExif Main Entry Point
'''
print("\nExtract EXIF Data from JPEG Files")
&lt;denchmark-code&gt;print("Script Started", str(datetime.now()))
print()

''' PROCESS EACH JPEG FILE SECTION '''

latLonList = []
targetFile = "test.jpg"                 # file must be located in the same folder
if os.path.isfile(targetFile):
    gpsDictionary, exifList = ExtractGPSDictionary(targetFile)
        
    if exifList:
        TS = exifList[0]
        MAKE = exifList[1]
        MODEL = exifList[2]
    else:
        TS = 'NA'
        MAKE = 'NA'
        MODEL = 'NA'

    print("Photo Details")
    print("-------------")
    print("TimeStamp:    ", TS)
    print("Camera Make:  ", MAKE)
    print("Camera Model: ", MODEL)
    
    if (gpsDictionary != None):

        # Obtain the Lat Lon values from the gpsDictionary
        # Converted to degrees
        # The return value is a dictionary key value pairs

        dCoor = ExtractLatLon(gpsDictionary)

        print("\nGeo-Location Data")
        print("-----------------")

        if dCoor:
            lat = dCoor.get("Lat")
            latRef = dCoor.get("LatRef")
            lon = dCoor.get("Lon")
            lonRef = dCoor.get("LonRef")
            
            if ( lat and lon and latRef and lonRef):
                print("Lattitude: ", '{:4.4f}'.format(lat))
                print("Longitude: ", '{:4.4f}'.format(lon))
            else:
                print("WARNING No GPS EXIF Data")
        else:
            print("WARNING No GPS EXIF Data")                    
    else:
        print("WARNING", " not a valid file", targetFile)

# Create Result Table Display using PrettyTable
''' GENERATE RESULTS TABLE SECTION'''

''' Result Table Heading'''
resultTable = PrettyTable(['File-Name', 'Lat','Lon', 'TimeStamp', 'Make', 'Model'])
''' Your work starts here '''

print()
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='rcizzle94' date='2020-02-13T09:32:28Z'>
		&lt;denchmark-link:https://github.com/rcizzle94&gt;@rcizzle94&lt;/denchmark-link&gt;
 This question is better asked on &lt;denchmark-link:http://stackoverflow.com/questions/tagged//tensorflow&gt;StackOverflow&lt;/denchmark-link&gt;
 since it is not a bug or feature request. There is also a larger community that reads questions there.
		</comment>
	</comments>
</bug>