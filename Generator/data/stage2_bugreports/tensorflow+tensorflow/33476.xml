<bug id='33476' author='corcra' open_date='2019-10-17T15:40:35Z' closed_time='2019-11-06T11:02:34Z'>
	<summary>empirical mean from tf.random.gamma does not match theoretical expectation</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Linux Ubuntu 16.04.6
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
N/A
TensorFlow installed from (source or binary):
Not sure, came pre-installed so probably binary
TensorFlow version (use command below):
1.13.1
Python version:
3.5.5
Bazel version (if compiling from source):
N/A
GCC/Compiler version (if compiling from source):
N/A
CUDA/cuDNN version:
CUDA: 10.0.130
cuDNN: 7
GPU model and memory:
Tesla K80, total memory = 11441 MiB

Describe the current behavior
If I sample many values from tf.random.gamma with shape=A and beta=B and compute their mean, I get a value which isn't close to A/B.
If I use the script below, computing the mean absolute difference between the empirical and theoretical mean, I get ~7.26 (with 500 tries, 50k samples from the gamma distribution each time).
Describe the expected behavior
The expected value of a Gamma-distributed random variable with shape parameter A and inverse scale parameter B is A/B, so the empirical mean should be close to A/B.
So I would expect the output of my script to be close to 0.
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
Code to report the mean absolute discrepancy between the empirical and theoretical means:
&lt;denchmark-code&gt;def check_gamma(n_sample=50000, n_iter=500):
    shape_ph = tf.placeholder(tf.float32)
    beta_ph = tf.placeholder(tf.float32)
    gamma_mean = tf.reduce_mean(tf.random.gamma(shape=[n_sample], alpha=shape_ph, beta=beta_ph))
    mean_difference = np.zeros(shape=n_iter)
    mean_difference_np = np.zeros(shape=n_iter)
    with tf.Session() as sess:
        for i in range(n_iter):
            # sample a shape (non-negative)
            shape_parameter = np.random.uniform(1, 5)
            # sample a scale (non-negative)
            scale_parameter = np.random.uniform(1, 5)
            # the gamma distribution in tensorflow takes the inverse scale parameter
            beta = 1.0/scale_parameter
            # theoretical mean of gamma distribution:
            expected_mean = shape_parameter*scale_parameter
            # sample it!
            sample_mean = sess.run(gamma_mean, feed_dict={shape_ph: shape_parameter, beta_ph: beta})
            mean_difference[i] = np.abs(expected_mean - sample_mean)
            mean_difference_np[i] = np.abs(expected_mean - np.mean(np.random.gamma(size=n_sample, shape=shape_parameter, scale=scale_parameter)))
    print('average absolute difference in empirical and theoretical means, using tensorflow:', np.mean(mean_difference))
    print('...using numpy:', np.mean(mean_difference_np))
    return True
&lt;/denchmark-code&gt;

Code to visualise the distribution:
&lt;denchmark-code&gt;    with tf.Session() as sess:
        gamma_samples = sess.run(tf.random.gamma(shape=[n_sample], alpha=shape_parameter, beta=1.0/scale_parameter))
    expected_mean = shape_parameter * scale_parameter
    empirical_mean = np.mean(gamma_samples)
    sns.distplot(gamma_samples, kde=False)
    plt.axvline(x=expected_mean, label='theoretical mean', color='black')
    plt.axvline(x=empirical_mean, label='empirical mean')
    plt.legend()
    return True
&lt;/denchmark-code&gt;

Other info / logs
Visualisation of distribution produced by above code, with shape = 1, scale = 2:
&lt;denchmark-link:https://user-images.githubusercontent.com/4471845/67024197-ea4ec880-f0fb-11e9-809d-8b9f338598cf.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='corcra' date='2019-10-18T06:28:28Z'>
		&lt;denchmark-link:https://github.com/corcra&gt;@corcra&lt;/denchmark-link&gt;
 ,
Thank you for reporting, can you please provide a standalone code so that we can try reproducing the issue.
		</comment>
		<comment id='2' author='corcra' date='2019-11-01T12:27:02Z'>
		It has been 14 days with no activity and the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='3' author='corcra' date='2019-11-04T08:53:35Z'>
		&lt;denchmark-link:https://github.com/corcra&gt;@corcra&lt;/denchmark-link&gt;
 ,
Any update on the issue ?Thanks!
		</comment>
		<comment id='4' author='corcra' date='2019-11-06T11:02:34Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='5' author='corcra' date='2019-11-06T11:02:36Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33476&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33476&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>