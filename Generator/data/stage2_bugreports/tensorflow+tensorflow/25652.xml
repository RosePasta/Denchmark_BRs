<bug id='25652' author='mluszczyk' open_date='2019-02-10T20:17:17Z' closed_time='2019-03-13T23:55:58Z'>
	<summary>export_saved_model raises TypeError: Failed to convert object of type &amp;lt;class 'dict_values'&amp;gt; to Tensor.</summary>
	<description>
TPUEstimator.export_saved_model raises TypeError (when used on CPU). The same code with TPUEstimator replaced with Estimator works correctly.
The error is:
&lt;denchmark-code&gt;TypeError: Failed to convert object of type &lt;class 'dict_values'&gt; to Tensor. Contents: dict_values([&lt;tf.Tensor 'sat_prob:0' shape=(?,) dtype=float32&gt;, &lt;tf.Tensor 'policy_prob:0' shape=(?, ?, 2) dtype=float32&gt;]). Consider casting elements to a supported type.
&lt;/denchmark-code&gt;

The relevant code
&lt;denchmark-code&gt;def serving_input_receiver_fn():
    feature = tf.placeholder(tf.float32, shape=[None, None, None, 2])

    return tf.estimator.export.TensorServingInputReceiver(feature, feature)

estimator.export_saved_model(FLAGS.export_dir, serving_input_receiver_fn)
&lt;/denchmark-code&gt;

Current behaviour
export_saved_model fails with TypeError.
Expected behaviour
export_saved_model should export the model successfully.
System information
MacOS, Python 3.6, Tensorflow 1.12.0 from PyPI.
Full code
Since exporting a model requires a trained model, it wasn't easy to fully isolate the failing code, so I'm posting a full model file (with as much irrelevant stuff removed as possible).
With TPUEstimator, failing: &lt;denchmark-link:https://gist.github.com/mluszczyk/d60ed4205060eb7ef53c309c490fbe48&gt;https://gist.github.com/mluszczyk/d60ed4205060eb7ef53c309c490fbe48&lt;/denchmark-link&gt;

With Estimator, working: &lt;denchmark-link:https://gist.github.com/mluszczyk/bbd4f9136fc4788251079ac5b2176a01&gt;https://gist.github.com/mluszczyk/bbd4f9136fc4788251079ac5b2176a01&lt;/denchmark-link&gt;

Traceback
&lt;denchmark-code&gt;...
WARNING:tensorflow:From /Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py:1044: calling SavedModelBuilder.add_meta_graph_and_variables (from tensorflow.python.saved_model.builder_impl) with legacy_init_op is deprecated and will be removed in a future version.
Instructions for updating:
Pass your op to the equivalent parameter main_op instead.
INFO:tensorflow:Assets added to graph.
INFO:tensorflow:No assets to write.
WARNING:tensorflow:rewrite_for_inference (from tensorflow.contrib.tpu.python.tpu.tpu) is experimental and may change or be removed at any time, and without warning.
INFO:tensorflow:Calling model_fn.
INFO:tensorflow:Running infer on CPU
ERROR:tensorflow:Operation of type Placeholder (policy_labels) is not supported on the TPU. Execution will fail if this op is used in the graph. 
ERROR:tensorflow:Operation of type Placeholder (sat_labels) is not supported on the TPU. Execution will fail if this op is used in the graph. 
INFO:tensorflow:Done calling model_fn.
Traceback (most recent call last):
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/framework/tensor_util.py", line 527, in make_tensor_proto
    str_values = [compat.as_bytes(x) for x in proto_values]
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/framework/tensor_util.py", line 527, in &lt;listcomp&gt;
    str_values = [compat.as_bytes(x) for x in proto_values]
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/util/compat.py", line 61, in as_bytes
    (bytes_or_text,))
TypeError: Expected binary or unicode string, got dict_values([&lt;tf.Tensor 'sat_prob:0' shape=(?,) dtype=float32&gt;, &lt;tf.Tensor 'policy_prob:0' shape=(?, ?, 2) dtype=float32&gt;])

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "neurosat_tpu.py", line 253, in &lt;module&gt;
    tf.app.run()
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/platform/app.py", line 125, in run
    _sys.exit(main(argv))
  File "neurosat_tpu.py", line 248, in main
    estimator.export_saved_model(FLAGS.export_dir, serving_input_receiver_fn)
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py", line 734, in export_saved_model
    strip_default_attrs=True)
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py", line 663, in export_savedmodel
    mode=model_fn_lib.ModeKeys.PREDICT)
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py", line 789, in _export_saved_model_for_mode
    strip_default_attrs=strip_default_attrs)
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py", line 907, in _export_all_saved_models
    mode=model_fn_lib.ModeKeys.PREDICT)
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/contrib/tpu/python/tpu/tpu_estimator.py", line 2188, in _add_meta_graph_for_mode
    check_variables=False))
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py", line 984, in _add_meta_graph_for_mode
    config=self.config)
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/contrib/tpu/python/tpu/tpu_estimator.py", line 2192, in _call_model_fn
    return self._call_model_fn_for_inference(features, labels, mode, config)
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/contrib/tpu/python/tpu/tpu_estimator.py", line 2253, in _call_model_fn_for_inference
    new_tensors.append(array_ops.identity(t))
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/ops/array_ops.py", line 81, in identity
    return gen_array_ops.identity(input, name=name)
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/ops/gen_array_ops.py", line 3454, in identity
    "Identity", input=input, name=name)
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py", line 513, in _apply_op_helper
    raise err
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py", line 510, in _apply_op_helper
    preferred_dtype=default_dtype)
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/framework/ops.py", line 1146, in internal_convert_to_tensor
    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/framework/constant_op.py", line 229, in _constant_tensor_conversion_function
    return constant(v, dtype=dtype, name=name)
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/framework/constant_op.py", line 208, in constant
    value, dtype=dtype, shape=shape, verify_shape=verify_shape))
  File "/Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/framework/tensor_util.py", line 531, in make_tensor_proto
    "supported type." % (type(values), values))
TypeError: Failed to convert object of type &lt;class 'dict_values'&gt; to Tensor. Contents: dict_values([&lt;tf.Tensor 'sat_prob:0' shape=(?,) dtype=float32&gt;, &lt;tf.Tensor 'policy_prob:0' shape=(?, ?, 2) dtype=float32&gt;]). Consider casting elements to a supported type.
&lt;/denchmark-code&gt;

Output of the variant with Estimator
&lt;denchmark-code&gt;WARNING:tensorflow:From /Users/michal/.virtualenvs/deepsat/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py:1044: calling SavedModelBuilder.add_meta_graph_and_variables (from tensorflow.python.saved_model.builder_impl) with legacy_init_op is deprecated and will be removed in a future version.
Instructions for updating:
Pass your op to the equivalent parameter main_op instead.
INFO:tensorflow:Assets added to graph.
INFO:tensorflow:No assets to write.
INFO:tensorflow:SavedModel written to: ../models/export/ex20/temp-b'1549813434'/saved_model.pb
&lt;/denchmark-code&gt;

Flags
Flag values to the attached files:
&lt;denchmark-code&gt;python neurosat_tpu.py --use_tpu=False --tpu=$TPU_NAME --train_file=$TRAIN_FILE --test_file=$TEST_FILE --train_steps=10 --test_steps=0 --model_dir=$MODEL_DIR --variable_number=8 --clause_number=80 --train_files_gzipped=False --batch_size=1 --iterations=1 --export_dir=$EXPORT_DIR --level_number=0
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='mluszczyk' date='2019-02-12T22:23:39Z'>
		&lt;denchmark-link:https://github.com/mluszczyk&gt;@mluszczyk&lt;/denchmark-link&gt;
 When I run it in google colab with TPU, i see different kinds of error for both the codes. Are you sure it is related to Bug/performance? If it is a support kind of question, please ask it in &lt;denchmark-link:https://stackoverflow.com/questions/tagged/tensorflow&gt;Stackoverflow&lt;/denchmark-link&gt;
. There is a big community to support and learn from your questions. GitHub is mainly for addressing bugs in installation and performance. Thanks!
		</comment>
		<comment id='2' author='mluszczyk' date='2019-02-15T07:44:00Z'>
		Thanks for looking into it, &lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
. I created two public colabs reproducing the behaviour. I believe this is a bug.
The error can be seen here: &lt;denchmark-link:https://colab.research.google.com/drive/1FEvd47JRZtAJZcwB10gqKDhSCWx_cRCW&gt;https://colab.research.google.com/drive/1FEvd47JRZtAJZcwB10gqKDhSCWx_cRCW&lt;/denchmark-link&gt;

Working version is here:
&lt;denchmark-link:https://colab.research.google.com/drive/1bzpxlevnmDriBUrg3RihxXGOI4pmtYQQ&gt;https://colab.research.google.com/drive/1bzpxlevnmDriBUrg3RihxXGOI4pmtYQQ&lt;/denchmark-link&gt;

I've found out that the error occurs with tensorflow 1.12.0 and not with 1.13.0rc0, which is installed on Colab by default. So the working version in Colab uses TPUEstimator with Tensorflow 1.13.0rc0 rather than non-TPU Estimator with Tensorflow 1.12.0 as in the original issue description (which should be as good, I can create the colab with Estimator if you'd like, too).
So it looks like the error is fixed in 1.13. However, TPUs with TF 1.13 are not available in Google Cloud, so I still cannot use my model. I think a backport of the fix (or a workaround) would be very useful.
		</comment>
		<comment id='3' author='mluszczyk' date='2019-03-07T10:05:08Z'>
		When I tried to use TPUEstimator.export_saved_model, I saw the same error:
&lt;denchmark-code&gt;TypeError: Failed to convert object of type &lt;class 'dict_values'&gt; to Tensor. Contents: dict_values([&lt;tf.Tensor 'Softmax:0' shape=(?, 10) dtype=float32&gt;]). Consider casting elements to a supported type.
&lt;/denchmark-code&gt;

Is there another way to export SavedModel from TPUEstimator?
		</comment>
		<comment id='4' author='mluszczyk' date='2019-03-08T07:51:52Z'>
		I found we can avoid the error as below:
estimator = tf.contrib.tpu.TPUEstimator(..., export_to_tpu=False)
We (except Googlers) need not to serve our model on TPU, so I guess the above idea might be helpful.
		</comment>
		<comment id='5' author='mluszczyk' date='2019-03-13T23:55:58Z'>
		Marking this as fixed as it has been fixed in 1.13 and using export_to_tpu=False resolves the issue for earlier versions.
		</comment>
	</comments>
</bug>