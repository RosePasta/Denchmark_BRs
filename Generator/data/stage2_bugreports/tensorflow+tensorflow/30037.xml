<bug id='30037' author='alexmil2019' open_date='2019-06-21T22:39:13Z' closed_time='2019-07-16T18:19:30Z'>
	<summary>InvalidArgumentError (see above for traceback): Reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero</summary>
	<description>
python 3.6
Ubuntu 16.04.6 LTS
tensorflow '1.13.1'
&lt;denchmark-code&gt;feat_width = 2048
gpu_num = 8

def create_cnn_model(feat_width, data_format='channels_last'):
   model = tf.keras.Sequential()
   model.add(
      tf.keras.layers.Conv2D(
        filters = 32,
        kernel_size  = (1,2),
        strides = (1,2),
        data_format = data_format,
        padding = 'same',
        activation='relu',
        input_shape = (2,feat_width,1)))
    model.add(
      tf.keras.layers.Conv2D(
        filters = 10,
        kernel_size  = (2,2),
        data_format = data_format,
        padding = 'same',
        activation = 'relu'))
    model.add(tf.keras.layers.MaxPool2D(pool_size=(2, 1), data_format=data_format))
    model.add(tf.keras.layers.Flatten(data_format=data_format))
    model.add(tf.keras.layers.Dense(units=10, activation='relu'))
    model.add(tf.keras.layers.Dense(units=1, kernel_initializer='uniform', activation='sigmoid'))
    return model

def serving_input_fn():
        """Build the serving inputs."""
        inputs = {}
        inputs[keras_model.input_names[0]] = tf.placeholder(shape=(None, 2,feat_width,1), dtype=tf.float32)

        return tf.estimator.export.build_raw_serving_input_receiver_fn(inputs)

strategy = tf.contrib.distribute.MirroredStrategy(num_gpus=gpu_num)
estimator_config = tf.estimator.RunConfig(
        model_dir='../../model',
        tf_random_seed=0,
        save_summary_steps=256,
        save_checkpoints_steps=10000,
        train_distribute=strategy,
        keep_checkpoint_max=64,
        log_step_count_steps=256)

keras_model = create_cnn_model(feat_width)
keras_model = tf.keras.utils.multi_gpu_model(keras_model, gpus=gpu_num)
keras_model.compile(optimizer = optimizer, loss = 'binary_crossentropy', metrics = ['accuracy'])
estimator = tf.keras.estimator.model_to_estimator(keras_model=keras_model,config=estimator_config)
tf.estimator.train_and_evaluate(estimator, train_spec, eval_spec)
&lt;/denchmark-code&gt;

using
&lt;denchmark-code&gt; tf.contrib.predictor.from_saved_model(export_dir)
&lt;/denchmark-code&gt;

to do inference:
&lt;denchmark-code&gt;predictor =  tf.contrib.predictor.from_saved_model(export_dir=export_dir)
feed_tensor = list(predictor.feed_tensors.keys())[0]
fetch_tensor = list(predictor.fetch_tensors.keys())[0]
feat = np.random.rand(2*feat_width)
feat = np.reshape(feat,[ 2, feat_width, 1])
Y = predictor({feed_tensor: [feat]})
r = Y[fetch_tensor]
&lt;/denchmark-code&gt;

fails for multi gpu with error
&lt;denchmark-code&gt;InvalidArgumentError (see above for traceback): Reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero
	 [[node sequential_1/flatten/Reshape ]]
	 [[node dense_2_1/concat ]]
&lt;/denchmark-code&gt;

if I don't use multi gpu the inference code works.
	</description>
	<comments>
		<comment id='1' author='alexmil2019' date='2019-06-23T23:58:47Z'>
		maybe it is related to these bugs &lt;denchmark-link:https://github.com/keras-team/keras/issues/11806&gt;keras-team/keras#11806&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/keras-team/keras/issues/12694&gt;keras-team/keras#12694&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='alexmil2019' date='2019-06-24T06:19:13Z'>
		&lt;denchmark-link:https://github.com/alexmil2019&gt;@alexmil2019&lt;/denchmark-link&gt;
 Please provide us the complete code to reproduce the issue. Thanks!
		</comment>
		<comment id='3' author='alexmil2019' date='2019-06-24T15:33:22Z'>
		I have already attached the complete code for reproducing the bug.
		</comment>
		<comment id='4' author='alexmil2019' date='2019-06-24T16:27:21Z'>
		I am running into the same problem.
I have a custom callback that tries to run a model inference at the end of each epoch for visualization purposes.
When I run on a single GPU the inference succeeds, when I use multiple gpus I receive:
&lt;denchmark-code&gt;tensorflow.python.framework.errors_impl.InvalidArgumentError: Reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero
	 [[{{node replica_0/model_1/reshape_1/Reshape}} = Reshape[T=DT_FLOAT, Tshape=DT_INT32, _device="/job:localhost/replica:0/task:0/device:GPU:0"](replica_0/model_1/permute_1/transpose, replica_0/model_1/reshape_1/Reshape/shape)]]
	 [[{{node replica_1/model_1/permute_2/transpose/_1481}} = _Recv[client_terminated=false, recv_device="/job:localhost/replica:0/task:0/device:CPU:0", send_device="/job:localhost/replica:0/task:0/device:GPU:1", send_device_incarnation=1, tensor_name="edge_1709_replica_1/model_1/permute_2/transpose", tensor_type=DT_FLOAT, _device="/job:localhost/replica:0/task:0/device:CPU:0"]()]]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='alexmil2019' date='2019-06-26T05:24:23Z'>
		&lt;denchmark-link:https://github.com/alexmil2019&gt;@alexmil2019&lt;/denchmark-link&gt;
 I tried reproducing the issue but It looks some entities are not defined like . Please help us reproduce the issue. Thanks!
		</comment>
		<comment id='6' author='alexmil2019' date='2019-06-27T16:36:30Z'>
		I added definition for strategy.
		</comment>
		<comment id='7' author='alexmil2019' date='2019-06-29T05:33:06Z'>
		&lt;denchmark-link:https://github.com/alexmil2019&gt;@alexmil2019&lt;/denchmark-link&gt;
 You don't need to use multi_gpu_model since you are also using MirroredStrategy. Can you try using MirroredStrategy with native Keras APIs to train your model synchronously on multiple GPUs?
Here is a tutorial that demonstrates how you can use tf.distribute APIs: &lt;denchmark-link:https://www.tensorflow.org/beta/tutorials/distribute/keras&gt;https://www.tensorflow.org/beta/tutorials/distribute/keras&lt;/denchmark-link&gt;

Would this work for your use case?
		</comment>
		<comment id='8' author='alexmil2019' date='2019-07-16T18:19:30Z'>
		Closing this bug for now. Please reopen if you run into issues when using MirroredStrategy.
		</comment>
		<comment id='9' author='alexmil2019' date='2019-07-16T18:19:31Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30037&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30037&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='alexmil2019' date='2020-08-02T07:38:45Z'>
		我是在bert的模型训练完之后预测时候遇到这个问题，我用的是keras_bert，我是这样解决的
word2vec, segment = tokenizer.encode(sen)
word2vec = np.expand_dims(word2vec, axis=0)
也就是说给生成的index添加一个维度，这一维度在充当batch
		</comment>
	</comments>
</bug>