<bug id='34603' author='metarag' open_date='2019-11-26T04:57:20Z' closed_time='2020-03-09T06:49:31Z'>
	<summary>Unable to save model using tf.saved_model when model outputs RaggedTensor</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Darwin Kernel Version 19.0.0: macOS Catalina
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.0.0
Python version: 3.7.4

Describe the current behavior
Using tf.function seems to work fine for autographing functions that take a RaggedTensor as input and produce a RaggedTensor as the output. However, serializing such a module using tf.saved_model.save() seems to not work.
We run into
&lt;denchmark-code&gt;2019-11-25 20:39:57.800887: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2019-11-25 20:39:57.809936: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x7fa1e014a930 executing computations on platform Host. Devices:
2019-11-25 20:39:57.809946: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): Host, Default Version
2019-11-25 20:39:58.145214: W tensorflow/python/util/util.cc:299] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.
Traceback (most recent call last):
  File "/Users/raghavmehta/Developer/UCSD-NLP/blah.py", line 26, in &lt;module&gt;
    main()
  File "/Users/raghavmehta/Developer/UCSD-NLP/blah.py", line 22, in main
    tf.saved_model.save(my_module, 'model/', signatures=my_module.my_func)
  File "/Users/raghavmehta/.local/share/virtualenvs/UCSD-NLP-eKFj1XZo/lib/python3.7/site-packages/tensorflow_core/python/saved_model/save.py", line 893, in save
    meta_graph_def, saveable_view, signatures, options.namespace_whitelist)
  File "/Users/raghavmehta/.local/share/virtualenvs/UCSD-NLP-eKFj1XZo/lib/python3.7/site-packages/tensorflow_core/python/saved_model/save.py", line 593, in _fill_meta_graph_def
    signatures = _generate_signatures(signature_functions, resource_map)
  File "/Users/raghavmehta/.local/share/virtualenvs/UCSD-NLP-eKFj1XZo/lib/python3.7/site-packages/tensorflow_core/python/saved_model/save.py", line 468, in _generate_signatures
    _tensor_dict_to_tensorinfo(outputs),
  File "/Users/raghavmehta/.local/share/virtualenvs/UCSD-NLP-eKFj1XZo/lib/python3.7/site-packages/tensorflow_core/python/saved_model/save.py", line 308, in _tensor_dict_to_tensorinfo
    for key, value in tensor_dict.items()}
  File "/Users/raghavmehta/.local/share/virtualenvs/UCSD-NLP-eKFj1XZo/lib/python3.7/site-packages/tensorflow_core/python/saved_model/save.py", line 308, in &lt;dictcomp&gt;
    for key, value in tensor_dict.items()}
  File "/Users/raghavmehta/.local/share/virtualenvs/UCSD-NLP-eKFj1XZo/lib/python3.7/site-packages/tensorflow_core/python/saved_model/utils_impl.py", line 70, in build_tensor_info_internal
    tensor_shape=tensor.get_shape().as_proto())
AttributeError: 'RaggedTensor' object has no attribute 'get_shape'
&lt;/denchmark-code&gt;

Describe the expected behavior
tf.saved_model.save() should work naturally for autographed functions even if they output a RaggedTensor.
Code to reproduce the issue
import tensorflow as tf


class MyModule(tf.Module):
    def __init__(self, name='my_module'):
        super(MyModule, self).__init__(name=name)

    @tf.function(input_signature=[
        tf.RaggedTensorSpec(shape=(None, None), dtype=tf.string)
    ])
    def my_func(self, inputs):
        return tf.ragged.constant([
            ['Some', 'string'],
            ['Some', 'other', 'string']
        ])


def main():
    my_module = MyModule()
    my_module.my_func(tf.ragged.constant([['random', 'input']]))
    # Returns &lt;tf.RaggedTensor [[b'Some', b'string'], [b'Some', b'other', b'string']]&gt; correctly!
    tf.saved_model.save(my_module, 'model/', signatures=my_module.my_func)


if __name__ == '__main__':
    main()
Other info / logs
Saving a model that takes RaggedTensor as an input but returns a regular Tensor as the output using tf.saved_model.save() seems to work just fine.
	</description>
	<comments>
		<comment id='1' author='metarag' date='2019-11-27T06:13:56Z'>
		&lt;denchmark-link:https://github.com/metarag&gt;@metarag&lt;/denchmark-link&gt;

I tried with recent nightly version () and i am not seeing any issue. Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/2fd53d05df0b24fe1899a8099b13567e/untitled412.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='2' author='metarag' date='2019-11-27T06:30:38Z'>
		Yes, the model serializes successfully but the loaded model doesn't work as expected
import tensorflow as tf


def main():
    model = tf.saved_model.load('model/')
    infer = model.signatures['serving_default']
    infer(tf.ragged.constant([['random', 'input']]))


if __name__ == '__main__':
    main()
gives the following error
&lt;denchmark-code&gt;2019-11-26 22:28:48.622481: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2019-11-26 22:28:48.631640: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x7fcf63481720 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2019-11-26 22:28:48.631649: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
Traceback (most recent call last):
  File "/Users/raghavmehta/Downloads/untitled/blah2.py", line 11, in &lt;module&gt;
    main()
  File "/Users/raghavmehta/Downloads/untitled/blah2.py", line 7, in main
    print(infer(tf.ragged.constant([['random', 'input']])))
  File "/Users/raghavmehta/.local/share/virtualenvs/untitled-8kWb9AEQ/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py", line 1551, in __call__
    return self._call_impl(args, kwargs)
  File "/Users/raghavmehta/.local/share/virtualenvs/untitled-8kWb9AEQ/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py", line 1570, in _call_impl
    ).format(self._num_positional_args, self._arg_keywords, args))
TypeError: Expected at most 0 positional arguments (and the rest keywords, of ['inputs', 'inputs_1']), got (&lt;tf.RaggedTensor [[b'random', b'input']]&gt;,). When calling a concrete function, positional arguments may not be bound to Tensors within nested structures.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='metarag' date='2019-11-28T10:22:59Z'>
		I have tried on colab with TF version 2.1.0-dev20191126 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/502de891bf83c7607657e9b6ba7597a2/untitled412.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='metarag' date='2020-01-31T19:25:56Z'>
		In the repro gist, it looks like things work as long as I replace:
&lt;denchmark-code&gt;infer = model.signatures['serving_default']
&lt;/denchmark-code&gt;

with:
&lt;denchmark-code&gt;infer = model.my_func
&lt;/denchmark-code&gt;

Is there a reason you can't just use model.my_func on the loaded model?
		</comment>
		<comment id='5' author='metarag' date='2020-01-31T21:01:13Z'>
		&lt;denchmark-link:https://github.com/metarag&gt;@metarag&lt;/denchmark-link&gt;
 could you please take a look at the above comment
		</comment>
		<comment id='6' author='metarag' date='2020-02-02T01:41:53Z'>
		That works! ðŸ˜€
However, shouldn't model.signatures['serving_default'] work too? It's based off of the official tutorials.
		</comment>
		<comment id='7' author='metarag' date='2020-03-09T05:58:29Z'>
		&lt;denchmark-link:https://github.com/metarag&gt;@metarag&lt;/denchmark-link&gt;
,
Can you please confirm if we can close this issue. Thanks!
		</comment>
		<comment id='8' author='metarag' date='2020-03-09T06:49:31Z'>
		Yes.
		</comment>
		<comment id='9' author='metarag' date='2020-03-09T06:49:33Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34603&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34603&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>