<bug id='43840' author='scd75' open_date='2020-10-07T09:09:43Z' closed_time='2020-10-07T20:14:24Z'>
	<summary>regression in layer names for tf-operation layers in current tf-nightly (2.4)</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.4.0-dev20201006
Python version: 3.7

Describe the current behavior
In the last tf-nightly release, when attributing a name to a layer created by a tf operation, this naming does not seem anymore to be effective anymore.
Describe the expected behavior
the naming of the layer shall work as expected, as for tf 2.3
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
print(tf.__version__)

test = tf.keras.Input((1,), name='input1')
test2 = tf.identity(test, name='abcd')
print(test.name)
print(test2.name)
&lt;/denchmark-code&gt;

Other info / logs
&lt;denchmark-code&gt;2.4.0-dev20201005
input1
tf.identity/Identity:0
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='scd75' date='2020-10-07T11:43:19Z'>
		I've tried to create &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/43844&gt;#43844&lt;/denchmark-link&gt;
 that names .
		</comment>
		<comment id='2' author='scd75' date='2020-10-07T12:17:27Z'>
		Thanks, is there a reason why you don't want to keep the current behavior from tf 2.3?
		</comment>
		<comment id='3' author='scd75' date='2020-10-07T12:24:36Z'>
		It is just that I don't know if there was any specific motivation for what we have after /.
So.. just waiting for feedbacks.
		</comment>
		<comment id='4' author='scd75' date='2020-10-07T20:14:24Z'>
		Hi &lt;denchmark-link:https://github.com/scd75&gt;@scd75&lt;/denchmark-link&gt;
 , we actually don't consider this a regression because we never made API guarantees about the exact ops or op names that would be generated for keras models. (and that applies to tf-op layers as well). I would be surprised if any TF code in 2.4/the nightlies relies on these in a load-bearing way, and I would be interested to know what use case you have that treats these names as load-bearing.
The release notes actually mention this change:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/RELEASE.md&gt;https://github.com/tensorflow/tensorflow/blob/master/RELEASE.md&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;* A major refactoring of the internals of the Keras Functional API may affect code that is relying on certain internal details:
...
  * Code that relies on the exact number and names of the op layers that TensorFlow operations were converted into. These may have changed.
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;Major Features and Improvements
---------------
....
* A major refactoring of the internals of the Keras Functional API has been completed, that should improve the reliability, stability, and performance of constructing Functional models.
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;* Improvements from the functional API refactoring:
  *Functional model construction does not need to maintain a global workspace graph, removing memory leaks especially when building many models or very large models.
  * Functional model construction should be ~8-10% faster on average.
  * Functional models can now contain non-symbolic values in their call inputs inside of the first positional argument.
  * Several classes of TF ops that were not reliably converted to Keras layers during functional API construction should now work, e.g. tf.image.ssim_multiscale
  * Error messages when Functional API construction goes wrong (and when ops cannot be converted to Keras layers automatically) should be clearer and easier to understand.
&lt;/denchmark-code&gt;

We could not complete this refactoring while guaranteeing that the op names produced by layers generated from TF API calls would stay the same (otherwise we would have done so).
I also see you reported a separate issue &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/43824&gt;#43824&lt;/denchmark-link&gt;
. Although I can't repro it in the colabs I would actually expect this to be a non-issue in the nightlies, because the Keras tfoplambda layers after the refactoring don't set the generated op name as their own layer name.
edit: Actually I was just given a working repro of the issue in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/43824&gt;#43824&lt;/denchmark-link&gt;
 , it looks like there's something weird &amp; unrelated going on w/ the name-gen so I can look into that.
		</comment>
		<comment id='5' author='scd75' date='2020-10-07T20:14:26Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43840&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43840&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>