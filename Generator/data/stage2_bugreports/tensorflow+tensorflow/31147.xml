<bug id='31147' author='mbeissinger' open_date='2019-07-29T20:43:14Z' closed_time='2019-08-21T23:02:43Z'>
	<summary>Tensorflow 1.14 Keras functional API mixed with ops using placeholders throws InvalidArgumentError 'You must feed a value for placeholder tensor'</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): 1.14.0
Python version: 3.6.8
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
Keras layers that have an input dependent on a Tensorflow placeholder will throw an InvalidArgumentError on the op creation step asking to feed a value for the placeholder. Specifically, this happens during the base_layer_utils.create_keras_history(inputs) step in the __call__ function on the layer, where the inputs to the Keras layer are passed through a GraphExecutionFunction object made during backend.function([], op_input)([]). This exception is new in Tensorflow 1.14.0.
Describe the expected behavior
As in previous versions of Tensorflow, I would not expect the InvalidArgumentError to be thrown when I am building the graph mixing Keras with Tensorflow.
Code to reproduce the issue
import tensorflow as tf

def compile_errors():
    tf_graph = tf.Graph()
    with tf_graph.as_default():
        image = tf.keras.Input(shape=[224, 224, 3], dtype=tf.float32, name="image")
        scale = tf.placeholder(dtype=tf.float32, shape=[], name="scale")
        scaled_image = image * scale
        conv = tf.keras.layers.Conv2D(filters=32, kernel_size=3, name="conv2d")(scaled_image)
        # conv errors on __call__ here due to create_keras_history making a GraphExecutionFunction:
        # tensorflow.python.framework.errors_impl.InvalidArgumentError: You must feed a value for placeholder tensor 'scale' with dtype float
        # 	 [[{{node scale}}]]

def compile_succeeds():
    tf_graph = tf.Graph()
    with tf_graph.as_default():
        image = tf.keras.Input(shape=[224, 224, 3], dtype=tf.float32, name="image")
        scale = tf.placeholder(dtype=tf.float32, shape=[], name="scale")
        scaled_image = tf.keras.layers.Lambda(function=lambda tensors: tensors[0] * tensors[1])([image, scale])
        conv = tf.keras.layers.Conv2D(filters=32, kernel_size=3, name="conv2d")(scaled_image)
        # this succeeds

if __name__ == "__main__":
    try:
        compile_errors()
        print("Functional API compilation succeeded.")
    except Exception as e:
        print("Functional API compilation errored!", e)
    print()
    compile_succeeds()
    print("Explicit Keras Lambda Layer compilation succeeded.")
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='mbeissinger' date='2019-07-29T22:19:10Z'>
		&lt;denchmark-link:https://github.com/mbeissinger&gt;@mbeissinger&lt;/denchmark-link&gt;
 As mentioed in this &lt;denchmark-link:https://stackoverflow.com/questions/50321139/keras-error-you-must-feed-a-value-for-placeholder-tensor&gt;issue&lt;/denchmark-link&gt;
 'scale' is a  "symbolic" tensor.
This means, they have absolutely no data (or value) until the moment you start fitting or predicting.
But in the 2nd case, you have created a lambda layer which doesn't expect the values immediately, You can feed in the values when you are fitting or predicting but in the 1st case its expecting the values immediately which is not possible.
		</comment>
		<comment id='2' author='mbeissinger' date='2019-07-29T22:41:30Z'>
		The example script is not running in eager execution mode and I am not expecting the symbolic tensor made by the placeholder to have or need any value at compile time. Tensorflow 1.13.2 did not throw this exception, why did the behavior change in 1.14 to expect placeholder values immediately and not just at session.run?
		</comment>
		<comment id='3' author='mbeissinger' date='2019-07-30T11:07:06Z'>
		Keras does not allow TensorFlow ops unless they are wrapped by a Lambda layer.
&lt;denchmark-link:https://github.com/mbeissinger&gt;@mbeissinger&lt;/denchmark-link&gt;
 I think there is no bug here.
		</comment>
		<comment id='4' author='mbeissinger' date='2019-08-05T23:13:42Z'>
		&lt;denchmark-link:https://github.com/nairouz&gt;@nairouz&lt;/denchmark-link&gt;
 I have reproduced this issue. This looks like a bug as &lt;denchmark-link:https://colab.sandbox.google.com/gist/gowthamkpr/0770971da52b163128be747f5f62c357/untitled64.ipynb&gt;TF 1.13&lt;/denchmark-link&gt;
 doesn't throw any error but it throws an error with &lt;denchmark-link:https://colab.sandbox.google.com/gist/gowthamkpr/ed9f839bd3a574aefedcb1944cbce3fb/untitled85.ipynb&gt;TF 1.14&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://colab.sandbox.google.com/gist/gowthamkpr/238ff431df1edc6885c9188dc81295d1/untitled86.ipynb&gt;TF-Nightly&lt;/denchmark-link&gt;
 too.
		</comment>
		<comment id='5' author='mbeissinger' date='2019-08-21T23:02:43Z'>
		This is fixed with latest version of TF nightly build '1.15.0-dev20190821'. Thanks!
		</comment>
		<comment id='6' author='mbeissinger' date='2019-08-21T23:02:44Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=31147&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=31147&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>