<bug id='33799' author='dbonner' open_date='2019-10-28T22:34:14Z' closed_time='2019-11-07T11:24:19Z'>
	<summary>TF 2.0.0 Python 3.8 TypeError: _logger_find_caller() takes from 0 to 1 positional arguments but 2 were given</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):  See script from Tensorflow training session and uploaded file below.  Nb: There is no error with TF2.0.0 and python 3.6 or 3.7.  The error occurs with TF2.0.0 and python 3.8.
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 2.0.0
Python version: 3.8
Bazel version (if compiling from source): 0.26.1
GCC/Compiler version (if compiling from source): 7.4.0
CUDA/cuDNN version: CUDA 10/cuDNN 7.6.4
GPU model and memory: NVidia RTX 2080 TI and 2080 MaxQ

Describe the current behavior
After running the code below (with the attached file), you get the following error:
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

AssertionError                            Traceback (most recent call last)
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/impl/api.py in converted_call(f, args, kwargs, caller_fn_scope, options)
525         options=options, autograph_module=tf_inspect.getmodule(converted_call))
--&gt; 526     converted_f = conversion.convert(target_entity, program_ctx)
527
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/impl/conversion.py in convert(entity, program_ctx)
324
--&gt; 325   converted_entity_info = _convert_with_cache(entity, program_ctx,
326                                               free_nonglobal_var_names)
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/impl/conversion.py in _convert_with_cache(entity, program_ctx, free_nonglobal_var_names)
238
--&gt; 239     nodes, converted_name, entity_info = convert_entity_to_ast(
240         entity, program_ctx)
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/impl/conversion.py in convert_entity_to_ast(o, program_ctx)
474   elif tf_inspect.ismethod(o):
--&gt; 475     nodes, name, entity_info = convert_func_to_ast(o, program_ctx)
476   elif hasattr(o, 'class'):
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/impl/conversion.py in convert_func_to_ast(f, program_ctx, do_rename)
672   context = converter.EntityContext(namer, entity_info, program_ctx, new_name)
--&gt; 673   node = node_to_graph(node, context)
674
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/impl/conversion.py in node_to_graph(node, context)
702   node = converter.standard_analysis(node, context, is_initial=True)
--&gt; 703   node = converter.apply_(node, context, function_scopes)
704   node = converter.apply_(node, context, arg_defaults)
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/core/converter.py in apply_(node, context, converter_module)
408   node = standard_analysis(node, context)
--&gt; 409   node = converter_module.transform(node, context)
410   return node
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/converters/function_scopes.py in transform(node, ctx)
119 def transform(node, ctx):
--&gt; 120   return FunctionBodyTransformer(ctx).visit(node)
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/core/converter.py in visit(self, node)
345     try:
--&gt; 346       return super(Base, self).visit(node)
347     finally:
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/pyct/transformer.py in visit(self, node)
479     if not anno.hasanno(node, anno.Basic.SKIP_PROCESSING):
--&gt; 480       result = super(Base, self).visit(node)
481     self.ctx.current_origin = parent_origin
/usr/local/lib/python3.8/ast.py in visit(self, node)
359         visitor = getattr(self, method, self.generic_visit)
--&gt; 360         return visitor(node)
361
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/converters/function_scopes.py in visit_FunctionDef(self, node)
101     """
--&gt; 102     wrapped_body = templates.replace(
103         template,
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/pyct/templates.py in replace(template, **replacements)
268   for node in nodes:
--&gt; 269     node = ReplaceTransformer(replacements).visit(node)
270     if isinstance(node, (list, tuple)):
/usr/local/lib/python3.8/ast.py in visit(self, node)
359         visitor = getattr(self, method, self.generic_visit)
--&gt; 360         return visitor(node)
361
/usr/local/lib/python3.8/ast.py in generic_visit(self, node)
435                     if isinstance(value, AST):
--&gt; 436                         value = self.visit(value)
437                         if value is None:
/usr/local/lib/python3.8/ast.py in visit(self, node)
359         visitor = getattr(self, method, self.generic_visit)
--&gt; 360         return visitor(node)
361
/usr/local/lib/python3.8/ast.py in generic_visit(self, node)
444             elif isinstance(old_value, AST):
--&gt; 445                 new_node = self.visit(old_value)
446                 if new_node is None:
/usr/local/lib/python3.8/ast.py in visit(self, node)
359         visitor = getattr(self, method, self.generic_visit)
--&gt; 360         return visitor(node)
361
/usr/local/lib/python3.8/ast.py in generic_visit(self, node)
435                     if isinstance(value, AST):
--&gt; 436                         value = self.visit(value)
437                         if value is None:
/usr/local/lib/python3.8/ast.py in visit(self, node)
359         visitor = getattr(self, method, self.generic_visit)
--&gt; 360         return visitor(node)
361
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/pyct/templates.py in visit_Name(self, node)
199
--&gt; 200     new_nodes = self._prepare_replacement(node, node.id)
201
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/pyct/templates.py in _prepare_replacement(self, replaced, key)
138
--&gt; 139     new_nodes = ast_util.copy_clean(repl, preserve_annos=self.preserved_annos)
140     if isinstance(new_nodes, gast.AST):
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/pyct/ast_util.py in copy_clean(node, preserve_annos)
75   """
---&gt; 76   return CleanCopier(preserve_annos).copy(node)
77
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/pyct/ast_util.py in copy(self, node)
53       if not f.startswith('__') and hasattr(node, f):
---&gt; 54         new_fields[f] = self.copy(getattr(node, f))
55     new_node = type(node)(**new_fields)
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/pyct/ast_util.py in copy(self, node)
40     if isinstance(node, list):
---&gt; 41       return [self.copy(n) for n in node]
42     elif isinstance(node, tuple):
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/pyct/ast_util.py in (.0)
40     if isinstance(node, list):
---&gt; 41       return [self.copy(n) for n in node]
42     elif isinstance(node, tuple):
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/pyct/ast_util.py in copy(self, node)
54         new_fields[f] = self.copy(getattr(node, f))
---&gt; 55     new_node = type(node)(**new_fields)
56
~/tf38/lib/python3.8/site-packages/gast/gast.py in create_node(self, *args, **kwargs)
9         nbparam = len(args) + len(kwargs)
---&gt; 10         assert nbparam in (0, len(Fields)), 
11             "Bad argument number for {}: {}, expecting {}".\
AssertionError: Bad argument number for keyword: 1, expecting 2
During handling of the above exception, another exception occurred:
TypeError                                 Traceback (most recent call last)
 in 
----&gt; 1 tf_model.fit(Xs_train[:, 0:1], y_train.reshape(-1, 1));
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/eager/def_function.py in call(self, *args, **kwds)
566         xla_context.Exit()
567     else:
--&gt; 568       result = self._call(*args, **kwds)
569
570     if tracing_count == self._get_tracing_count():
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/eager/def_function.py in _call(self, *args, **kwds)
613       # This is the first call of call, so we have to initialize.
614       initializers = []
--&gt; 615       self._initialize(args, kwds, add_initializers_to=initializers)
616     finally:
617       # At this point we know that the initialization is complete (or less
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/eager/def_function.py in _initialize(self, args, kwds, add_initializers_to)
494     self._graph_deleter = FunctionDeleter(self._lifted_initializer_graph)
495     self._concrete_stateful_fn = (
--&gt; 496         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access
497             *args, **kwds))
498
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/eager/function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)
2363       args, kwargs = None, None
2364     with self._lock:
-&gt; 2365       graph_function, _, _ = self._maybe_define_function(args, kwargs)
2366     return graph_function
2367
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/eager/function.py in _maybe_define_function(self, args, kwargs)
2671
2672       self._function_cache.missed.add(call_context_key)
-&gt; 2673       graph_function = self._create_graph_function(args, kwargs)
2674       self._function_cache.primary[cache_key] = graph_function
2675       return graph_function, args, kwargs
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/eager/function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)
2551     arg_names = base_arg_names + missing_arg_names
2552     graph_function = ConcreteFunction(
-&gt; 2553         func_graph_module.func_graph_from_py_func(
2554             self._name,
2555             self._python_function,
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/framework/func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)
956                                           converted_func)
957
--&gt; 958       func_outputs = python_func(*func_args, **func_kwargs)
959
960       # invariant: func_outputs contains only Tensors, CompositeTensors,
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/eager/def_function.py in wrapped_fn(*args, **kwds)
437         # wrapped allows AutoGraph to swap in a converted function. We give
438         # the function a weak reference to itself to avoid a reference cycle.
--&gt; 439         return weak_wrapped_fn().wrapped(*args, **kwds)
440     weak_wrapped_fn = weakref.ref(wrapped_fn)
441
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/eager/function.py in bound_method_wrapper(*args, **kwargs)
3179     # However, the replacer is still responsible for attaching self properly.
3180     # TODO(mdan): Is it possible to do it here instead?
-&gt; 3181     return wrapped_fn(*args, **kwargs)
3182   weak_bound_method_wrapper = weakref.ref(bound_method_wrapper)
3183
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/framework/func_graph.py in wrapper(*args, **kwargs)
935           # TODO(mdan): Push this block higher in tf.function's call stack.
936           try:
--&gt; 937             return autograph.converted_call(
938                 original_func,
939                 args,
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/impl/api.py in converted_call(f, args, kwargs, caller_fn_scope, options)
552           'Cause: %s', target_entity, e)
553     else:
--&gt; 554       logging.warn(
555           'AutoGraph could not transform %s and will run it as-is.\n'
556           'Please report this to the TensorFlow team. When filing the bug, set'
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/autograph/utils/ag_logging.py in warn(msg, *args, **kwargs)
144
145 def warn(msg, *args, **kwargs):
--&gt; 146   logging.warn(msg, *args, **kwargs)
147   if echo_log_to_stdout:
148     _output_to_stdout('WARNING: ' + msg, *args, **kwargs)
~/tf38/lib/python3.8/site-packages/tensorflow_core/python/platform/tf_logging.py in warn(msg, *args, **kwargs)
159 @tf_export(v1=['logging.warn'])
160 def warn(msg, *args, **kwargs):
--&gt; 161   get_logger().warning(msg, *args, **kwargs)
162
163
/usr/local/lib/python3.8/logging/init.py in warning(self, msg, *args, **kwargs)
1444         """
1445         if self.isEnabledFor(WARNING):
-&gt; 1446             self._log(WARNING, msg, args, **kwargs)
1447
1448     def warn(self, msg, *args, **kwargs):
/usr/local/lib/python3.8/logging/init.py in _log(self, level, msg, args, exc_info, extra, stack_info, stacklevel)
1563             #IronPython can use logging.
1564             try:
-&gt; 1565                 fn, lno, func, sinfo = self.findCaller(stack_info, stacklevel)
1566             except ValueError: # pragma: no cover
1567                 fn, lno, func = "(unknown file)", 0, "(unknown function)"
TypeError: _logger_find_caller() takes from 0 to 1 positional arguments but 2 were given
Describe the expected behavior
There should be no error.  It works fine with TF2.0.0 and Python 3.6 or Python 3.7.
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
import tensorflow as tf
import numpy as np
import gzip
import json
from sklearn.model_selection import ShuffleSplit
with gzip.open("small_data/cal_house.json.gz", "r") as fin:
housing = json.load(fin)
for train, test in ShuffleSplit(1, 0.2, random_state=42).split(housing['data']):
X_train = np.array(housing['data'])[train].astype(np.float32)
y_train = np.array(housing['target'])[train].astype(np.float32)
X_test = np.array(housing['data'])[test].astype(np.float32)
y_test = np.array(housing['target'])[test].astype(np.float32)
X_mean = X_train.mean(axis=0)
X_std = X_train.std(axis=0)
Xs_train = (X_train - X_mean) / X_std
Xs_test = (X_test - X_mean) / X_std
class LinearRegressionTF():
def init(self, eta=.1):
self.W = tf.Variable(0.)
self.b = tf.Variable(0.)
self.opt = tf.keras.optimizers.SGD(learning_rate=eta)
&lt;denchmark-code&gt;def loss(self, X, y, return_func=False):
    def loss_():
        return tf.reduce_mean(tf.square(X * self.W + self.b - y))
    
    if not return_func:
        return loss_()
    
    return loss_

@tf.function
def fit(self, X, y, steps=1):
    for _ in range(steps):
        self.opt.minimize(self.loss(X, y, return_func=True), [self.W, self.b])
&lt;/denchmark-code&gt;

tf_model = LinearRegressionTF()
tf_model.fit(Xs_train[:, 0:1], y_train.reshape(-1, 1));
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3780890/cal_house.json.gz&gt;cal_house.json.gz&lt;/denchmark-link&gt;

Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
Nil
	</description>
	<comments>
		<comment id='1' author='dbonner' date='2019-10-29T05:49:28Z'>
		&lt;denchmark-link:https://github.com/dbonner&gt;@dbonner&lt;/denchmark-link&gt;

I tried to reproduce the issue. However i am seeing the different error.AttributeError: 'LinearRegressionTF' object has no attribute 'fit' .Please, help me with the reproducible code . It helps in localizing the issue faster.
		</comment>
		<comment id='2' author='dbonner' date='2019-10-29T15:33:28Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;

I'm sorry the code is not properly indented in a number of places when it appears in github.  I can't seem to edit it to get it to show properly.  Please find an attached file (moved to next post)  with the properly indented code that reproduces this error on my system when running in one cell in Jupyter Notebook.
Apologies .... See the next post for the correct file.
		</comment>
		<comment id='3' author='dbonner' date='2019-10-30T03:48:54Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;

I've finally got this right.  Sorry to mess you around with this.  Github markdown removed the underscores on the init part of the LinearRegressionTF() class when I pasted it in.  This got transferred through to the code file.  The correct code is attached.  It runs fine in Python 3.7 but errors in Python 3.8.  I have also removed the reference to the subdirectory "small_data" so you can run the code with the file "cal_house.json.gz" in the current working directory.
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3786825/code_py38_tf2_error.txt&gt;code_py38_tf2_error.txt&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3786826/cal_house.json.gz&gt;cal_house.json.gz&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='dbonner' date='2019-11-03T06:33:12Z'>
		Hi &lt;denchmark-link:https://github.com/ymodak&gt;@ymodak&lt;/denchmark-link&gt;
,
Have you had a chance to test the python 3.8 error I reported (Issue: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/33799&gt;#33799&lt;/denchmark-link&gt;
).
All the best,
Dan
		</comment>
		<comment id='5' author='dbonner' date='2019-11-03T17:48:31Z'>
		I am able to reproduce the issue with the following command on python 3.8 (master build):
&lt;denchmark-code&gt;bazel test -s --verbose_failures --disk_cache=/home/ubuntu/bazel \
        //tensorflow/python:image_ops_test
&lt;/denchmark-code&gt;

Haven't figure out the reason yet.
		</comment>
		<comment id='6' author='dbonner' date='2019-11-03T20:02:57Z'>
		&lt;denchmark-link:https://github.com/dbonner&gt;@dbonner&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/ymodak&gt;@ymodak&lt;/denchmark-link&gt;
 Added a PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/33953&gt;#33953&lt;/denchmark-link&gt;
 for the fix. Please take a look.
		</comment>
		<comment id='7' author='dbonner' date='2019-11-07T11:24:21Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33799&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33799&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='dbonner' date='2019-11-12T09:54:19Z'>
		I recieved this error also when using tensorflow 1.13.2 + python 3.8 I am considering opening a separate issue.
		</comment>
	</comments>
</bug>