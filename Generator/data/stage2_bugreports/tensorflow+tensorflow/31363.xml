<bug id='31363' author='ikamensh' open_date='2019-08-06T10:24:50Z' closed_time='2019-08-07T20:39:57Z'>
	<summary>tf.function changes behavior of += operator on tf.Tensors</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS 10.14
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): pip install (wheel?)
TensorFlow version (use command below): 2.0.0-beta1
Python version: 3.7.3
GPU model and memory: CPU

Describe the current behavior
Behaviour of += operator on a tensor is different when called via tf.function and when called directly
Describe the expected behavior
tf.function does not change the behavior of any operations on tensors.
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
print(tf.__version__)

class First:
    def __init__(self, initial: int):
        self.value = tf.constant(initial)

    def increment(self):
        self.value += 1

    def __str__(self):
        return f'Object with tensor = {self.value}'

@tf.function
def increment(obj: First):
    obj.increment()

c1 = First(100)

c1.increment()
print(c1)

increment(c1)
print(c1)
&lt;/denchmark-code&gt;

Other info / logs
output:
&lt;denchmark-code&gt;Object with tensor = 101
Object with tensor = Tensor("add:0", shape=(), dtype=int32)
&lt;/denchmark-code&gt;

Expected output:
&lt;denchmark-code&gt;Object with tensor = 101
Object with tensor = 102
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ikamensh' date='2019-08-07T06:45:22Z'>
		I tried the code on Colab and was able to reproduce the issue with Tensorflow 2.0.0beta1. Please see the gist &lt;denchmark-link:https://colab.research.google.com/drive/13h9wPKWxCkWP0L97VqkoIFor4N3wT8N3&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='ikamensh' date='2019-08-07T20:39:57Z'>
		It's not about the behavior of +=, it's about the fact that you're assigning a tensor inside a function graph to an object which outlives that function.
If you need to change the value of something inside a tf.function and you want that to persist either make it a return value or make it a tf.Variable, as otherwise tf has no way of knowing what you want.
		</comment>
		<comment id='3' author='ikamensh' date='2019-08-07T20:39:58Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=31363&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=31363&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='ikamensh' date='2019-08-08T07:23:24Z'>
		&lt;denchmark-link:https://github.com/alextp&gt;@alextp&lt;/denchmark-link&gt;

Then it is a leaky abstraction. As a user, I don't want to know how tensorflow makes its magic. I am doing a simple tensor operation inside a tf.function, why should it break?
tf has a way of knowing what I want, as it works outside tf.function.
		</comment>
	</comments>
</bug>