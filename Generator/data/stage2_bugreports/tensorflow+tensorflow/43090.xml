<bug id='43090' author='ahindy1234' open_date='2020-09-10T00:37:29Z' closed_time='2020-09-28T07:13:47Z'>
	<summary>LSTM Issue</summary>
	<description>
Hello, I am trying to implement an LSTM with input (123,45,4) and output (123,45,1) with a sequence of 4 integers as the input and a single number as the output. I am using Mac OS, Google Colab, and TF version 2.3.0.
Here is my model:
&lt;denchmark-code&gt;def define_models(n_input, n_output, n_units):
	# define training encoder
	encoder_inputs = Input(shape=(None, n_input))
	encoder = LSTM(n_units, return_state=True)
	encoder_outputs, state_h, state_c = encoder(encoder_inputs)
	encoder_states = [state_h, state_c]
	# define training decoder
	decoder_inputs = Input(shape=(None, n_output))
	decoder_lstm = LSTM(n_units, return_sequences=True, return_state=True)
	decoder_outputs, _, _ = decoder_lstm(decoder_inputs, initial_state=encoder_states)
	decoder_dense = Dense(n_output, activation='softmax')
	decoder_outputs = decoder_dense(decoder_outputs)
	model = Model([encoder_inputs, decoder_inputs], decoder_outputs)
	# define inference encoder
	encoder_model = Model(encoder_inputs, encoder_states)
	# define inference decoder
	decoder_state_input_h = Input(shape=(n_units,))
	decoder_state_input_c = Input(shape=(n_units,))
	decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]
	decoder_outputs, state_h, state_c = decoder_lstm(decoder_inputs, initial_state=decoder_states_inputs)
	decoder_states = [state_h, state_c]
	decoder_outputs = decoder_dense(decoder_outputs)
	decoder_model = Model([decoder_inputs] + decoder_states_inputs, [decoder_outputs] + decoder_states)
	# return all models
	return model, encoder_model, decoder_model
&lt;/denchmark-code&gt;

When I try running the code: model.fit(x_train, y_train, epochs = 50) I get the error:     AssertionError: Could not compute output Tensor("dense_2/truediv:0", shape=(None, None, 1), dtype=float32). Does anyone know how to fix this?
Here is the code to reproduce the issue:
Load Data:
&lt;denchmark-code&gt;with open("training_data_input.txt") as fopen:
  with open("training_data_output.txt") as fopen2:
    for line in fopen:
      myList = line.strip().split()
      myList[0] = myList[0].replace("[","")
      if myList[0] == "":
        myList = myList[1:]
      if "][" in myList[3]:
        j = 0
        print(myList[3])
        myList[3] = myList[3].replace(']][[',"")
        if len(myList[3]) &gt; 3:
          myList[3] = (myList[3][:3])
        myList = myList[:4]
      myList[len(myList)-1] = myList[len(myList)-1].replace("]","")
      x = np.empty((154,45,4),dtype=np.float32)
      i = 0
      j = 0
      if j &gt;=45:
        j = 0
      print(myList)
      x[i][j] = myList
      i+=1
      j+=1
    for line in fopen2:
      myList = line.strip().split()
      x_out = np.empty((154,45,1), dtype=np.float32)
      myList[0] = myList[0].replace("[","")
      if myList[0] == "":
        myList = myList[1:]
      if "][" in myList[0]:
        j = 0
        myList[0] = myList[0].replace(']][[',"")
        if len(myList[0]) &gt; 3:
          myList[0] = (myList[0][:2])
        myList = myList[:1]
      myList[len(myList)-1] = myList[len(myList)-1].replace("]","")
      i = 0
      j = 0
      if j &gt;=45:
        j = 0
      x_out[i][j] = myList
      i+=1
      
print(x.shape)
print(x_out.shape)
&lt;/denchmark-code&gt;

Train Model:
&lt;denchmark-code&gt;
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, x_out, test_size = 0.2, random_state = 4)
print(x_train.shape)
print(y_train.shape)

model.fit(x_train, y_train, epochs = 50)
&lt;/denchmark-code&gt;

The input data:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/5198490/training_data_input.txt&gt;training_data_input.txt&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/5198491/training_data_output.txt&gt;training_data_output.txt&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='ahindy1234' date='2020-09-12T18:32:57Z'>
		Could you minimize a little bit your code to have a runnable standalone example/colab that reproduces your problem?
		</comment>
		<comment id='2' author='ahindy1234' date='2020-09-21T06:34:04Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='3' author='ahindy1234' date='2020-09-28T07:13:45Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='4' author='ahindy1234' date='2020-09-28T07:13:49Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43090&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43090&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>