<bug id='7656' author='standy66' open_date='2017-02-18T23:38:50Z' closed_time='2017-03-03T23:39:32Z'>
	<summary>tf.sparse_placeholder does not accept fully specified shapes</summary>
	<description>
When I try to construct tf.sparse_placeholder with fully specified shape, like this
&lt;denchmark-code&gt;tf.sparse_placeholder(tf.float32, shape=(10000, 10000))
&lt;/denchmark-code&gt;

I get
&lt;denchmark-code&gt;ValueError                                Traceback (most recent call last)
&lt;ipython-input-15-977303dad90f&gt; in &lt;module&gt;()
----&gt; 1 tf.sparse_placeholder(tf.float32, shape=(10000, 10000))

/Users/astepanov/.virtualenvs/py_asr/lib/python3.6/site-packages/tensorflow/python/ops/array_ops.py in sparse_placeholder(dtype, shape, name)
   1584           dtypes.int64, shape=[None, None],
   1585           name=(name + "/indices") if name is not None else None),
-&gt; 1586       dense_shape=shape)
   1587 # pylint: enable=redefined-outer-name
   1588 

/Users/astepanov/.virtualenvs/py_asr/lib/python3.6/site-packages/tensorflow/python/framework/sparse_tensor.py in __init__(self, indices, values, dense_shape)
    134           values, name="values", as_ref=True)
    135       dense_shape = ops.convert_to_tensor(
--&gt; 136           dense_shape, name="dense_shape", dtype=dtypes.int64)
    137     self._indices = indices
    138     self._values = values

/Users/astepanov/.virtualenvs/py_asr/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in convert_to_tensor(value, dtype, name, preferred_dtype)
    649       name=name,
    650       preferred_dtype=preferred_dtype,
--&gt; 651       as_ref=False)
    652 
    653 

/Users/astepanov/.virtualenvs/py_asr/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype)
    714 
    715         if ret is None:
--&gt; 716           ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
    717 
    718         if ret is NotImplemented:

/Users/astepanov/.virtualenvs/py_asr/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in _TensorTensorConversionFunction(t, dtype, name, as_ref)
    587     raise ValueError(
    588         "Tensor conversion requested dtype %s for Tensor with dtype %s: %r"
--&gt; 589         % (dtype.name, t.dtype.name, str(t)))
    590   return t
    591 

ValueError: Tensor conversion requested dtype int64 for Tensor with dtype int32: 'Tensor("Const_5:0", shape=(2,), dtype=int32)'
&lt;/denchmark-code&gt;

But when the shape is not fully specified, it is doing OK
&lt;denchmark-code&gt;In [16]: tf.sparse_placeholder(tf.float32, shape=(10000, None))
Out[16]: &lt;tensorflow.python.framework.sparse_tensor.SparseTensor at 0x112a7ff60&gt;
&lt;/denchmark-code&gt;

I don't think that's the desired behaviour here. As a workaround for now I dropped the shape altogether in my code, but this way I cannot ensure runtime correctness of values being fed in feed_dict.
&lt;denchmark-h:h3&gt;Environment info&lt;/denchmark-h&gt;

Operating System: MacOS Sierra
Installed version of CUDA and cuDNN: none
If installed from binary pip package, provide:

A link to the pip package you installed: pip install tensorflow==1.0.0
The output from python -c "import tensorflow; print(tensorflow.__version__)": 1.0.0

	</description>
	<comments>
		<comment id='1' author='standy66' date='2017-02-19T06:46:07Z'>
		&lt;denchmark-link:https://github.com/concretevitamin&gt;@concretevitamin&lt;/denchmark-link&gt;
, could you comment on this issue please?
		</comment>
		<comment id='2' author='standy66' date='2017-03-03T23:39:32Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='3' author='standy66' date='2018-02-08T10:25:06Z'>
		I'm also interested in the answer. It seems to me that it would be good to allow specifying full shape, especially if partial shapes are allowed. I'm adding a small demonstration below (using version 1.5.0).
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf

m = 1000000
n = 1000000

x = tf.placeholder(tf.float32, shape=(n, 1))
x_val = np.arange(n)[:, None]
W = tf.sparse_placeholder(tf.float32, shape=(m, n))        # Fails
# W = tf.sparse_placeholder(tf.float32, shape=(m, None))     # Runs
# W = tf.sparse_placeholder(tf.float32, shape=(None, n))     # Runs
# W = tf.sparse_placeholder(tf.float32, shape=(None, None))  # Runs
# W = tf.sparse_placeholder(tf.float32)                      # Runs
y = tf.sparse_tensor_dense_matmul(W, x)

indices = np.array([[0, 0], [1, 1], [1, 2]], dtype=np.int64)
values = np.array([1.0, 1.0, 1.0], dtype=np.float32)
shape = np.array([m, n], dtype=np.int64)

with tf.Session() as sess:
    print(sess.run(y, feed_dict={x: x_val, W: (indices, values, shape)}))
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>