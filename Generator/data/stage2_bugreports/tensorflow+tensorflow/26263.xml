<bug id='26263' author='sibyjackgrove' open_date='2019-03-01T19:18:39Z' closed_time='2019-03-12T23:01:53Z'>
	<summary>Error when using tf.constant to provide input to Keras model.predict</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux (Google Colab)
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): 1.13.1
Python version: 2.7/3.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: 10
GPU model and memory: K80

You can collect some of this information using our environment capture &lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"

This is a followup to the &lt;denchmark-link:https://github.com/aamini/introtodeeplearning_labs/issues/22#issue-416226096&gt;issue &lt;/denchmark-link&gt;
 raised in MIT's TensorFlow labs. When I use a TensorFlow tensor created using  as input to Keras  it gives an error. However, when I directly feed in the same tensor to the Keras model it gives output as expected.
Describe the expected behavior
According to the documentation provided, model.predict should also be able to take a TensorFlow tensor as input.
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
&lt;denchmark-code&gt;# Import relevant packages
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense

# Define the number of inputs and outputs
n_input_nodes = 2
n_output_nodes = 3

# First define the model 
model = Sequential()

'''TODO: Define a dense (fully connected) layer to compute z'''
dense_layer = Dense(n_output_nodes, input_shape=(n_input_nodes,),activation='sigmoid') # TODO 

# Add the dense layer to the model
model.add(dense_layer)
&lt;/denchmark-code&gt;

Now when I do prediction using:
&lt;denchmark-code&gt;# Test model with example input
x_input = tf.constant([[1.0,2.]], shape=(1,2))
'''TODO: feed input into the model and predict the output!'''
print(model.predict(x_input)) # TODO
&lt;/denchmark-code&gt;

I get following error:

InvalidArgumentError: In[0] is not a matrix. Instead it has shape [2]
[[{{node MatMul_3}}]] [Op:StatefulPartitionedCall]

When I use directly feed the tensor:
&lt;denchmark-code&gt;# Test model with example input
x_input = tf.constant([[1,2.]], shape=(1,2))
'''TODO: feed input into the model and predict the output!'''
print model(x_input)
&lt;/denchmark-code&gt;

I get the expected behaviour:

tf.Tensor([[0.31025296 0.48313126 0.7821198 ]], shape=(1, 3), dtype=float32)

&lt;denchmark-link:https://github.com/aamini&gt;@aamini&lt;/denchmark-link&gt;
 also had the same behavior. Is this expected in TensorFlow 2.0 or a bug?. If it is expected, please update the documentation.
	</description>
	<comments>
		<comment id='1' author='sibyjackgrove' date='2019-03-12T23:01:53Z'>
		Thanks for the bug report &lt;denchmark-link:https://github.com/sibyjackgrove&gt;@sibyjackgrove&lt;/denchmark-link&gt;
, it looks like this is fixed in the latest tf-nightly as I'm unable to reproduce
		</comment>
		<comment id='2' author='sibyjackgrove' date='2019-03-13T14:44:03Z'>
		Thanks for update &lt;denchmark-link:https://github.com/omalleyt12&gt;@omalleyt12&lt;/denchmark-link&gt;
 will try it out.
		</comment>
	</comments>
</bug>