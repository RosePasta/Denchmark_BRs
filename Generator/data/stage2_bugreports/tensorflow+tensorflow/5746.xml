<bug id='5746' author='DavidNorman' open_date='2016-11-21T10:26:09Z' closed_time='2017-04-26T23:16:52Z'>
	<summary>Optimization occurs after graph is partitioned across devices</summary>
	<description>
The optimization (sub-expression, constant folding) of the graphs takes place after partitioning. While this is important, it prevents optimization of logic that is split across devices by an unfortunate placement decision.
In my simple example, constants are assigned to my device graph, and the downstream maths nodes are assigned to the CPU.  Consequently, parts of the graph where constant folding should occur are not eliminated, resulting in substantially larger graphs than is necessary.
I propose that there should be an optmization pass before the graph is partitioned.  I realize that this is awkward, because the optimization takes place on a Graph, not a GraphDef.
	</description>
	<comments>
		<comment id='1' author='DavidNorman' date='2016-11-21T17:11:43Z'>
		This makes a lot of sense to me.  There are also a number of places where constant folding doesn't quite do what is expected (e.g. int32 tensor arithmetic on non-CPU devices).
		</comment>
		<comment id='2' author='DavidNorman' date='2017-04-26T23:16:52Z'>
		Closing because of inactivity.
		</comment>
	</comments>
</bug>