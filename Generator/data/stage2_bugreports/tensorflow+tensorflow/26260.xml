<bug id='26260' author='ageron' open_date='2019-03-01T15:42:19Z' closed_time='2019-07-19T22:11:24Z'>
	<summary>Creating an unused Mean metric in a custom model's constructor breaks the model</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
MacOSX 10.13.6
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
No
TensorFlow installed from (source or binary):
Binary
TensorFlow version (use command below):
tf.version.VERSION: '2.0.0-dev20190301'
tf.version.GIT_VERSION: 'v1.12.0-9345-g4eeb2714f4'
Python version:
3.6.8
Bazel version (if compiling from source):
N/A
GCC/Compiler version (if compiling from source):
N/A
CUDA/cuDNN version:
N/A
GPU model and memory:
N/A

Describe the current behavior
When creating a custom model, simply creating a Mean metric  in the constructor and setting it as one of the attributes leads to an exception when fitting the model.
Moreover, if I use the metric, it seems to burn the batch size into the model, so it behaves like a stateful model.
Describe the expected behavior
Creating a Mean instance should be harmless, especially if it is unused.
Code to reproduce the issue
import tensorflow as tf
from tensorflow import keras
import numpy as np

training_set_size = 32 * 10 # &lt;= works only if self.add_metric() is added and this is a multiple of 32
X = np.random.randn(training_set_size, 8) 
y = np.random.randn(training_set_size, 1)

class MyModel(keras.models.Model):
    def __init__(self, output_dim, **kwargs):
        super().__init__(**kwargs)
        self.out = keras.layers.Dense(output_dim)
        self.my_metric = keras.metrics.Mean()

    def call(self, inputs):
        #self.add_metric(self.my_metric(5.)) # &lt;= Works if you add this line, but model is stateful
        return self.out(inputs)

model = MyModel(1)
model.compile(loss="mse", optimizer="nadam")
history = model.fit(X, y, epochs=2)
Other info / logs
Here is the stacktrace:
&lt;denchmark-code&gt;KeyError                                  Traceback (most recent call last)
&lt;ipython-input-1-ca089e94cadc&gt; in &lt;module&gt;
     19 model = MyModel(1)
     20 model.compile(loss="mse", optimizer="nadam")
---&gt; 21 history = model.fit(X, y, epochs=2)

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py in fit(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_freq, max_queue_size, workers, use_multiprocessing, **kwargs)
    871           validation_steps=validation_steps,
    872           validation_freq=validation_freq,
--&gt; 873           steps_name='steps_per_epoch')
    874
    875   def evaluate(self,

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training_arrays.py in model_iteration(model, inputs, targets, sample_weights, batch_size, epochs, verbose, callbacks, val_inputs, val_targets, val_sample_weights, shuffle, initial_epoch, steps_per_epoch, validation_steps, validation_freq, mode, validation_in_fit, prepared_feed_values_from_dataset, steps_name, **kwargs)
    149
    150   # Get step function and loop type.
--&gt; 151   f = _make_execution_function(model, mode)
    152   use_steps = is_dataset or steps_per_epoch is not None
    153   do_validation = val_inputs is not None

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training_arrays.py in _make_execution_function(model, mode)
    519   if model._distribution_strategy:
    520     return distributed_training_utils._make_execution_function(model, mode)
--&gt; 521   return model._make_execution_function(mode)
    522
    523

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py in _make_execution_function(self, mode)
   2229   def _make_execution_function(self, mode):
   2230     if mode == ModeKeys.TRAIN:
-&gt; 2231       self._make_fit_function()
   2232       return self._fit_function
   2233     if mode == ModeKeys.TEST:

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py in _make_fit_function(self)
   2172   def _make_fit_function(self):
   2173     metrics_tensors = [
-&gt; 2174         self._all_stateful_metrics_tensors[m] for m in self.metrics_names[1:]
   2175     ]
   2176     self._make_train_function_helper(

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py in &lt;listcomp&gt;(.0)
   2172   def _make_fit_function(self):
   2173     metrics_tensors = [
-&gt; 2174         self._all_stateful_metrics_tensors[m] for m in self.metrics_names[1:]
   2175     ]
   2176     self._make_train_function_helper(

KeyError: 'mean'
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ageron' date='2019-07-19T22:11:24Z'>
		This is fixed TF 2.0 nightly '2.0.0-dev20190718'
Thanks!
		</comment>
		<comment id='2' author='ageron' date='2019-07-19T22:11:25Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=26260&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=26260&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>