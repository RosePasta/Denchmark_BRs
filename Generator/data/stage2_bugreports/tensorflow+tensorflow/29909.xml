<bug id='29909' author='nikita68' open_date='2019-06-18T10:02:53Z' closed_time='2019-07-10T16:56:12Z'>
	<summary>tf.meshgrid high variance in computational time</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: --
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): 1.10
Python version: 3.5
Bazel version (if compiling from source): ----
GCC/Compiler version (if compiling from source): ----
CUDA/cuDNN version: CUDA 9.0, Cudnn, 7.1
GPU model and memory: GTX 1080 ti, 10GB

Describe the current behavior
Running tf.meshgrid(tf.range(A), tf.range(B), tf.range(C), tf.range(D), indexing='ij') with the same amount of resulting elements can have high variations, for example sometimes 1 second, sometimes up to 8 seconds).
Describe the expected behavior
I expect this operation to be quicker, as (AFAIK) it is needed for any complex operations involving tf.scatter_nd and other element gathering ops.
Code to reproduce the issue
Run this code, a_s and b_s are set to always multiply to 1000. I see performance going from 0.9 seconds up to 45 seconds on this test, even for the same values.
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
import time

A = tf.placeholder(dtype=tf.int32)
B = tf.placeholder(dtype=tf.int32)
C = 20
D = 5000

with tf.device('/gpu:0'):
  ii, bb, kk, _ = tf.meshgrid(tf.range(A), tf.range(B), tf.range(C), tf.range(D), indexing='ij')

sess = tf.Session()
with sess.as_default():

    times = []

    print("Starting Testing")

    for d in range(100):
      time_start = time.time()
      a_s = np.random.randint(20, 60)
      b_s = 1000 // a_s
      _, _, _ = sess.run(fetches=[ii, bb, kk], feed_dict={A: a_s,
                                                          B: b_s})
      times.append(time.time() - time_start)
      print(str(times[-1]) + " " + str(a_s) + " " + str(b_s))

    print("--- Finished ---")
    print("Max time: " + str(max(times)))
    print("Min time: " + str(min(times)))
    print("Avg time: " + str(sum(times)/len(times)))
&lt;/denchmark-code&gt;

Other info / logs
Here's an example log extract from the program above (the first value is the time, the second and third the values of A and B respectively):
&lt;denchmark-code&gt;Starting Testing
1.203284502029419 40 25
1.083801031112671 51 19
1.024698257446289 51 19
1.0535898208618164 42 23
1.0363869667053223 56 17
1.1064929962158203 30 33
1.0818214416503906 59 16
1.1742267608642578 43 23
1.172206163406372 31 32
1.2406136989593506 32 31
1.1510748863220215 38 26
1.073162317276001 22 45
1.0849990844726562 55 18
1.0694386959075928 33 30
1.0990991592407227 20 50
1.2687609195709229 24 41
1.1231935024261475 50 20
2.591834783554077 49 20
1.5073127746582031 35 28
1.062272548675537 26 38
2.6493754386901855 27 37
1.137765645980835 30 33
1.0350470542907715 59 16
1.0511572360992432 25 40
1.0805590152740479 55 18
1.0525894165039062 42 23
2.4179093837738037 53 18
1.0785531997680664 42 23
1.0189356803894043 45 22
7.864070892333984 57 17
&lt;/denchmark-code&gt;

I'm using this in a large system based on the Transformer, where this is used together with tf.scatter_nd. I've attached the corresponding timeline, the meshgrid op is called 
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3300969/timeline.trace.tar.gz&gt;timeline.trace.tar.gz&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='nikita68' date='2019-06-26T00:33:21Z'>
		&lt;denchmark-link:https://github.com/nikita68&gt;@nikita68&lt;/denchmark-link&gt;
 Can you upgrade to recent version of TF 1.14. I have attached a &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/f732825a2c757d61bf41fb92b2733b73/tf29909_runtime.ipynb&gt;gist here&lt;/denchmark-link&gt;
. It shows that it is consistently taking 0.43 sec after warming up (takes 0.6~0.8 sec). Thanks!
		</comment>
		<comment id='2' author='nikita68' date='2019-07-10T12:33:58Z'>
		It has been 14 days with no activity and the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='3' author='nikita68' date='2019-07-10T16:56:12Z'>
		Automatically closing this out since I understand it to be resolved, but please let me know if I'm mistaken.Thanks!
		</comment>
		<comment id='4' author='nikita68' date='2019-07-10T16:56:14Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=29909&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=29909&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>