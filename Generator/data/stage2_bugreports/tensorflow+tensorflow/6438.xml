<bug id='6438' author='friskit-china' open_date='2016-12-21T15:21:25Z' closed_time='2018-01-10T01:48:41Z'>
	<summary>Cannot show stderr when using Jupyter</summary>
	<description>
Hello,
Could you please have a look about this.
I am using TF and Jupyter. But what makes me confuse is that the log text cannot be shown in Jupyter output cell (but it output correctly in ipython).
I think it is because of the stderr. This issue have been discussed before in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/3047&gt;#3047&lt;/denchmark-link&gt;
. You add several lines to determine whether or not current context is in an interactive environment.
However, even if I use Jupyter, the return value of "sys.flags.interactive" is still zero. and the logger lever can never be setted to "info" and use "stdout" instead of "stderr".
Thanks a lot!
	</description>
	<comments>
		<comment id='1' author='friskit-china' date='2016-12-21T17:20:34Z'>
		This would be good to fix, meanwhile I've been using this work-around with FDRedirector from &lt;denchmark-link:https://github.com/bitemyapp/ipython/blob/master/IPython/kernel/core/fd_redirector.py&gt;here&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;STDERR = 2
redirect = FDRedirector(STDERR)
import tensorflow as tf
sess = tf.Session("")
node = tf.Print(tf.constant(1), [tf.constant(1)], "longstringlongstring")
def print_to_stderr():
    sess.run(node)   # this prints to stderr
redirect.start();
print_to_stderr()
captured_stderr = redirect.stop()
&lt;/denchmark-code&gt;

The downside is that this hangs inside tensorflow printf if pipe buffer is exceeded (65k)
		</comment>
		<comment id='2' author='friskit-china' date='2017-01-05T00:01:52Z'>
		&lt;denchmark-link:https://github.com/zheng-xq&gt;@zheng-xq&lt;/denchmark-link&gt;
 do you think we need a fix like the one you did for interactive? Or just a flag?
		</comment>
		<comment id='3' author='friskit-china' date='2017-07-06T20:01:33Z'>
		Same issue happens exists Jupyter QtConsole, no logs. ipython shows the logs. Also this does not help:
&lt;denchmark-code&gt;tf.logging.set_verbosity(tf.logging.INFO)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='friskit-china' date='2017-12-20T19:27:15Z'>
		It has been 14 days with no activity and this issue has an assignee.Please update the label and/or status accordingly.
		</comment>
		<comment id='5' author='friskit-china' date='2017-12-21T15:14:51Z'>
		This bug still seems valid. This behavior has not changed.
		</comment>
		<comment id='6' author='friskit-china' date='2017-12-21T18:08:17Z'>
		Is there a way to tell whether you're in that particular Jupyter environment?
We are already checking for some interactive environments, and redirecting logs appropriately (from &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/platform/tf_logging.py#L65&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/platform/tf_logging.py#L65&lt;/denchmark-link&gt;
):
&lt;denchmark-code&gt;      _interactive = False
      try:
        # This is only defined in interactive shells.
        if _sys.ps1: _interactive = True
      except AttributeError:
        # Even now, we may be in an interactive shell with `python -i`.
        _interactive = _sys.flags.interactive

      # If we are in an interactive environment (like Jupyter), set loglevel
      # to INFO and pipe the output to stdout.
      if _interactive:
        logger.setLevel(INFO)
        _logging_target = _sys.stdout
      else:
        _logging_target = _sys.stderr
&lt;/denchmark-code&gt;

If anyone knows of a better way to determine _interactive, send a PR (or tell me, and I will).
		</comment>
		<comment id='7' author='friskit-china' date='2017-12-21T19:11:47Z'>
		&lt;denchmark-link:https://github.com/martinwicke&gt;@martinwicke&lt;/denchmark-link&gt;
 How about adding a check to see if IPython has injected the appropriate attribute?  (I have no current environment to test this at the moment, else i'd do the code change myself.)
      _interactive = False
      try:
        # This is only defined in interactive shells.
        if _sys.ps1: _interactive = True
      except AttributeError:
        # Even now, we may be in an interactive shell with `python -i`.
        _interactive = _sys.flags.interactive

      if not _interactive:
        try:
          # Do we have access to IPython libraries, and if we do has get_ipython been injected?
          from IPython.display import clear_output
          get_ipython
          _interactive = True
        except (ImportError, NameError):
          pass

      # If we are in an interactive environment (like Jupyter), set loglevel
      # to INFO and pipe the output to stdout.
      if _interactive:
        logger.setLevel(INFO)
        _logging_target = _sys.stdout
      else:
        _logging_target = _sys.stderr
		</comment>
		<comment id='8' author='friskit-china' date='2017-12-21T19:27:03Z'>
		Excellent! I will try this.
		</comment>
		<comment id='9' author='friskit-china' date='2017-12-21T23:15:33Z'>
		Seems to work, sent PR. Thanks Loki!
		</comment>
		<comment id='10' author='friskit-china' date='2017-12-21T23:28:07Z'>
		Poifect... my pleasure.
		</comment>
		<comment id='11' author='friskit-china' date='2018-01-05T19:10:09Z'>
		Nagging Assigneee: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='12' author='friskit-china' date='2018-01-10T01:48:41Z'>
		It looks like I made a mistake verifying this earlier. I was using tf.Print (which is still not jupyter compatible).
tf.logging is currently working well with jupyter already.
I hope I didn't waste too much of anyone's time.
		</comment>
		<comment id='13' author='friskit-china' date='2018-01-10T01:55:48Z'>
		tf.Print still works in Jupyter with the FDRedirector trick from above
		</comment>
		<comment id='14' author='friskit-china' date='2018-02-28T19:37:02Z'>
		Is there a clean way to fix the issue, or some manual override to make tf.Print works with Jupyter?
FDRedirector is a barely workable solution, as it is not available in latest IPython anymore.
		</comment>
	</comments>
</bug>