<bug id='24585' author='ufukcbicici' open_date='2018-12-26T22:33:41Z' closed_time='2019-02-22T21:48:37Z'>
	<summary>tf.dynamic_stitch does not work when one of the partitions has zero elements.</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

OS Platform and Distribution : Windows 10
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): 1.12.0
Python version: 3.6.6
CUDA/cuDNN version: V8.0.60
GPU model and memory: Geforce GTX 1070 8GB

Describe the current behavior
I am building a model which partitions a given minibatch into different parts, processes each part with different computation units in parallel and then stitch them back together. To implement this, I decided to use tf.dynamic_partition and tf.dynamic_stitch methods. I have the following code for testing purposes:
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np


def build_conv_layer(input, filter_size, num_of_input_channels, num_of_output_channels, name_suffix=""):
    # OK
    conv_weights = tf.Variable(
        tf.truncated_normal([filter_size, filter_size, num_of_input_channels, num_of_output_channels],
                            stddev=0.1, dtype=tf.float32))
    # OK
    conv_biases = tf.Variable(
        tf.constant(0.1, shape=[num_of_output_channels], dtype=tf.float32))
    conv = tf.nn.conv2d(input, conv_weights, strides=[1, 1, 1, 1], padding='SAME')
    relu = tf.nn.relu(tf.nn.bias_add(conv, conv_biases))
    pool = tf.nn.max_pool(relu, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')
    return pool

batch_size = 250
child_count = 3
channel_count = 32

dataTensor = tf.placeholder(tf.float32, shape=(None, 28, 28, 1), name="dataTensor")
indices_tensor = tf.placeholder(name="indices_tensor", dtype=tf.int32)
batch_size_tensor = tf.placeholder(name="batch_size_tensor", dtype=tf.int32)

condition_indices = tf.dynamic_partition(data=tf.range(batch_size_tensor), partitions=indices_tensor,
                                         num_partitions=child_count)
partition_list = tf.dynamic_partition(data=dataTensor, partitions=indices_tensor, num_partitions=child_count)
transformed_list = [build_conv_layer(input=part, filter_size=5, num_of_input_channels=1,
                                     num_of_output_channels=channel_count)
                    for part in partition_list]
stitched = tf.dynamic_stitch(indices=condition_indices, data=transformed_list)

sess = tf.Session()
samples = np.random.uniform(size=(batch_size, 28, 28, 1))
indices_arr = np.zeros(shape=(batch_size, ), dtype=np.int32)
indices_arr[-1] = 1
indices_arr[-2] = 0
feed_dict = {dataTensor: samples,
             batch_size_tensor: batch_size,
             # indices_tensor: np.argmax(np.random.uniform(size=(GlobalConstants.EVAL_BATCH_SIZE, child_count)), axis=1)}
             indices_tensor: indices_arr}
outputs = []
outputs.extend(transformed_list)
outputs.append(stitched)

init = tf.global_variables_initializer()
sess.run(init)
for i in range(10000):
    results = sess.run(outputs, feed_dict=feed_dict)
    print("{0} runned.".format(i))


&lt;/denchmark-code&gt;

So, I divide the dataTensor into 3 parts with tf.dynamic_partition and each part goes through a convolutional layer. After that, they are stitched back together into a single minibatch again, with tf.dynamic_stitch, using individual samples' original location information from condition_indices. This works without any visible problems when all three partitions have assigned at least one sample. But when at least one partition does have zero samples, like in code above (which is controlled with indices_arr), Tensorflow crashes at the tf.dynamic_stitch line with the following error:

InvalidArgumentError (see above for traceback): data[0].shape = [0,14,14,32] does not start with indices[0].shape = [249]

It seems like tf.dynamic_partition and  tf.dynamic_stitch stops working when one of the partitions is empty (receiving no samples) and all partitions receive zero samples as the result. The code above is reproducible with simple copy and paste. Am I missing something or doing something wrong or is this a bug in tf.dynamic_stitch implementation? Doesn't it support empty partitions which can occur in practice, if you determine partitions as the result of an algorithm ?
	</description>
	<comments>
		<comment id='1' author='ufukcbicici' date='2018-12-26T23:53:41Z'>
		&lt;denchmark-link:https://github.com/ufukcbicici&gt;@ufukcbicici&lt;/denchmark-link&gt;
 I tried your code example on Ubuntu (with the tf same version) but could not reproduce the error you mentioned. Wondering if the issue only exists on Windows?
		</comment>
		<comment id='2' author='ufukcbicici' date='2018-12-27T04:16:51Z'>
		&lt;denchmark-link:https://github.com/yongtang&gt;@yongtang&lt;/denchmark-link&gt;
 Interestingly, again  on Windows but using a much older Tensorflow 1.7.0, I cannot reproduce the error as well. The newest Tensorflow seems to be affected.
		</comment>
		<comment id='3' author='ufukcbicici' date='2019-02-22T21:48:37Z'>
		I think this does not reproduce on nightly, so closing it. Please reopen if I'm wrong.
		</comment>
	</comments>
</bug>