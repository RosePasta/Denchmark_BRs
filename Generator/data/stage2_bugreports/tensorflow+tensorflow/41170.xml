<bug id='41170' author='rrkarim' open_date='2020-07-07T21:31:09Z' closed_time='2020-11-30T11:52:13Z'>
	<summary>Shape issue for `tensordot` with nested `vectorized_map` and graph exectued function</summary>
	<description>
I have some issues with shapes for nested vectorized function call, I'm including the simplest code here:
import tensorflow as tf
x = tf.ones((100, 10, 5))
@tf.function()
def tdot(x):
    res = tf.tensordot(x, x, 1)
    return res
def func(x):
    def func_inner(x_):
        return tf.vectorized_map(tdot, x_)
    return tf.vectorized_map(func_inner, x)

@tf.function
def test():
    res = func(x)
    print(res.shape) # shape should be (100, 10) instead of (None, 10)

test()
Isn't it expected for the first dimension to be defined in the resulting tensor (see the comment). Or I am missing something in the docs?
	</description>
	<comments>
		<comment id='1' author='rrkarim' date='2020-07-09T07:12:09Z'>
		&lt;denchmark-link:https://github.com/rrkarim&gt;@rrkarim&lt;/denchmark-link&gt;

Please, let us know which TF version you are using? Also, in the given code you have defined the functions and you are not calling.On calling the test function i got the output().Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/d9b21ed97733e50fab2d1ff4127afa38/untitled95.ipynb&gt;here&lt;/denchmark-link&gt;
.
Please, help us with the reproducible code.Thanks!
		</comment>
		<comment id='2' author='rrkarim' date='2020-07-09T07:16:33Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 edited the code. As in the google colab, the bug exists in the stable version of tf.
		</comment>
		<comment id='3' author='rrkarim' date='2020-07-09T10:13:34Z'>
		&lt;denchmark-link:https://github.com/rrkarim&gt;@rrkarim&lt;/denchmark-link&gt;

If you run in eager mode instead of using autograph you will not face this issue.Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/388c03f523202c42f04dab218f85e24c/untitled101.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='4' author='rrkarim' date='2020-07-09T10:19:08Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 If we change tensordot to other tf op, we dont have the issue.
		</comment>
		<comment id='5' author='rrkarim' date='2020-07-09T13:30:39Z'>
		I am able to reproduce the issue in colab with TF versions 2.2,2.3-rc1,nightly versions.Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/33086d474185f4df68d2cfbb43dea014/untitled100.ipynb&gt;here&lt;/denchmark-link&gt;
.If i run the code in eager mode you will not see any issue.Thanks!
		</comment>
		<comment id='6' author='rrkarim' date='2020-07-09T13:38:47Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 If also run with no vectorization, we don't see any issues. &lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='rrkarim' date='2020-07-09T20:04:29Z'>
		&lt;denchmark-link:https://github.com/rrkarim&gt;@rrkarim&lt;/denchmark-link&gt;
 @tf.function builds a callable graph of the function that it decorates. Using nested @tf.function is not suggestable. When I removed @tf.function decorating , you can print the shape as expected. Please check the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/c013d0fccace2c99f967d9ce98261640/untitled100.ipynb&gt;gist here&lt;/denchmark-link&gt;
.
Please verify once and close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='8' author='rrkarim' date='2020-07-09T20:19:14Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 I don't get why it is not suggestable, can you please expand on that? And how it is connected to  being used?  works alright. The thing is that the code that I'm working with depends on the nested  decoration.
		</comment>
		<comment id='9' author='rrkarim' date='2020-07-09T21:10:39Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 Can you please recommend the easiest way of debugging pfor?
		</comment>
		<comment id='10' author='rrkarim' date='2020-07-14T19:28:56Z'>
		TF Shape inference and constant propagation are not perfect.  PFor (underlying tf.vectorized_map) does an explicit set_shape to make up for this.  Please see:



tensorflow/tensorflow/python/ops/parallel_for/pfor.py


         Line 1564
      in
      8b87c1a






 loop_len = tensor_util.constant_value(self.loop_len_vector) 





It looks like the constant_value call there is not able to extract that value. Note that the value is passed in by vectorized_map here:



tensorflow/tensorflow/python/ops/parallel_for/control_flow_ops.py


         Line 428
      in
      8b87c1a






 batch_size = first_elem.shape.as_list()[0] 





Can you check where the shape values are first becoming unknown in the call chain ?
		</comment>
		<comment id='11' author='rrkarim' date='2020-07-15T19:40:26Z'>
		&lt;denchmark-link:https://github.com/agarwal-ashish&gt;@agarwal-ashish&lt;/denchmark-link&gt;
 thanks, I'm debugging the issue right now. The thing I observe is that assigning  works as expected.
		</comment>
		<comment id='12' author='rrkarim' date='2020-11-21T23:08:34Z'>
		&lt;denchmark-link:https://github.com/rrkarim&gt;@rrkarim&lt;/denchmark-link&gt;
 Is this still an issue? Please close the issue if this was already resolved for you. Thanks!
		</comment>
		<comment id='13' author='rrkarim' date='2020-11-28T23:26:04Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='14' author='rrkarim' date='2020-11-30T11:52:10Z'>
		Closing, thanks.
		</comment>
		<comment id='15' author='rrkarim' date='2020-11-30T11:52:15Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41170&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41170&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>