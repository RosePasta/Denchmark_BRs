<bug id='41425' author='MilanCugur' open_date='2020-07-15T19:19:24Z' closed_time='2020-07-17T08:07:37Z'>
	<summary>Cannot Run Tensorflow2.0 saved model with Java</summary>
	<description>
In java, cannot feed the input tensor to the loaded model (model which is saved in tf2.0 in .pb file):
&lt;denchmark-h:h3&gt;My model: (tf2.0)&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
nn_input (Flatten)           (None, 5)                0         
_________________________________________________________________
...
... 
...  
_________________________________________________________________
nn_output (Dense)            (None, 1)                 513       
=================================================================
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;My java code:&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;        final int NUM_PREDICTIONS = 1;
        final int INPUT_SIZE = 5;
        try (SavedModelBundle b = SavedModelBundle.load("./nn_visualization/NNRegressor_saved_model/", "serve")) {
            Session sess = b.session();
            Tensor x = Tensor.create(new long[] { INPUT_SIZE }, FloatBuffer.wrap(new float[] {10, 9, 23, 7, 1}));
            float[] y = sess.runner().feed("nn_input", x).fetch("nn_output").run().get(0).copyTo(new float[NUM_PREDICTIONS]);
            System.out.println(y[0]);
        }

&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;error:&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Exception in thread "main" java.lang.IllegalArgumentException: No Operation named [nn_input] in the Graph
	at org.tensorflow.Session$Runner.operationByName(Session.java:380)
	at org.tensorflow.Session$Runner.parseOutput(Session.java:389)
	at org.tensorflow.Session$Runner.feed(Session.java:131)
	at HelloTensorFlow.main(HelloTensorFlow.java:25)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Instalations&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;$java
jdk version: 1.8

$ tf model save version: 
python3 -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"
v2.2.0-rc4-8-g2b96f3662b 2.2.0

$ java used tensorflow version:
TensorFlow.version(): 1.14.0
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Assumptions&lt;/denchmark-h&gt;

I assume that the problem arises due to the difference in the tensorflow versions in which the model is saved (tf2.0) and in which the model is loaded (tf1.4)?
I guess I'm wrong with the first argument of the feed method. Any help?
Thanks in advance,
Milan
	</description>
	<comments>
		<comment id='1' author='MilanCugur' date='2020-07-16T03:57:54Z'>
		&lt;denchmark-link:https://github.com/MilanCugur&gt;@MilanCugur&lt;/denchmark-link&gt;

Did you try with latest 2.x version for saving the model and then load the same model and see whether the issue persists or not.It will be great if you share us complete code snippet to reproduce the issue in our environment.It helps us in localizing the issue faster.Thanks!
		</comment>
		<comment id='2' author='MilanCugur' date='2020-07-16T07:38:45Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 Thanks for the fast response!
Definitely, I give the complete code below:
&lt;denchmark-h:h1&gt;Model creation (usual procedure)&lt;/denchmark-h&gt;

Model was created in Python version 3.8.2 and Tensorflow version 2.2.0
&lt;denchmark-h:h1&gt;Model summary:&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
nn_input (Flatten)           (None, 64)                0         
_________________________________________________________________
batch_normalization (BatchNo (None, 64)                256       
_________________________________________________________________
dense (Dense)                (None, 64)                4160      
_________________________________________________________________
batch_normalization_1 (Batch (None, 64)                256       
_________________________________________________________________
dense_1 (Dense)              (None, 128)               8320      
_________________________________________________________________
batch_normalization_2 (Batch (None, 128)               512       
_________________________________________________________________
dense_2 (Dense)              (None, 256)               33024     
_________________________________________________________________
batch_normalization_3 (Batch (None, 256)               1024      
_________________________________________________________________
dense_3 (Dense)              (None, 256)               65792     
_________________________________________________________________
batch_normalization_4 (Batch (None, 256)               1024      
_________________________________________________________________
dropout (Dropout)            (None, 256)               0         
_________________________________________________________________
dense_4 (Dense)              (None, 128)               32896     
_________________________________________________________________
batch_normalization_5 (Batch (None, 128)               512       
_________________________________________________________________
dense_5 (Dense)              (None, 256)               33024     
_________________________________________________________________
batch_normalization_6 (Batch (None, 256)               1024      
_________________________________________________________________
dense_6 (Dense)              (None, 512)               131584    
_________________________________________________________________
batch_normalization_7 (Batch (None, 512)               2048      
_________________________________________________________________
dense_7 (Dense)              (None, 512)               262656    
_________________________________________________________________
batch_normalization_8 (Batch (None, 512)               2048      
_________________________________________________________________
dropout_1 (Dropout)          (None, 512)               0         
_________________________________________________________________
nn_output (Dense)            (None, 1)                 513       
=================================================================
Total params: 580,673
Trainable params: 576,321
Non-trainable params: 4,352
_________________________________________________________________
&lt;/denchmark-code&gt;

&lt;denchmark-h:h1&gt;Model save (using callbacks)&lt;/denchmark-h&gt;

Also Python version 3.8.2 and Tensorflow version 2.2.0
&lt;denchmark-code&gt;tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_filepath, save_weights_only=False,
                                                        monitor='val_mae', mode='min', save_best_only=True)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h1&gt;Model load+predict (Python, wrking one)&lt;/denchmark-h&gt;

Also Python version 3.8.2 and Tensorflow version 2.2.0
&lt;denchmark-code&gt;import tensorflow as tf
print("tf.version: ", tf.__version__)

def printTensors(pb_file):
    model = tf.keras.models.load_model(pb_file)
    x = [10, 9, 23, 7, 1, 2, 0, 8, 9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, 5, 23, 24, 13, 0, 0, 0, 0, 0, 12, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2]
    print(model.predict([x]))
    
printTensors(./NNRegressor_model/")
&lt;/denchmark-code&gt;

Produce output:
[[0.2698144]]
&lt;denchmark-h:h1&gt;Model load + predict (Java, throws error)&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import org.tensorflow.Graph;
import org.tensorflow.Session;
import org.tensorflow.Tensor;
import org.tensorflow.TensorFlow;
import org.tensorflow.SavedModelBundle;
import java.nio.FloatBuffer;

public class HelloTensorFlow {
    public static void main(String[] args) throws Exception {

        // good idea to print the version number, 1.2.0 as of this writing
        System.out.println("TensorFlow.version(): "+TensorFlow.version());
        final int NUM_PREDICTIONS = 1;
        final int INPUT_SIZE = 64;

        // load the model Bundle
        try (SavedModelBundle b = SavedModelBundle.load("./NNRegressor_model/", "serve")) {
            System.out.println("SavedModelBundle: " + b.metaGraphDef());
            // create the session from the Bundle
            Session sess = b.session();
            // create an input Tensor
            Tensor x = Tensor.create(new long[] { INPUT_SIZE }, FloatBuffer.wrap(new float[] {10, 9, 23, 7, 1, 2, 0, 8, 9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, 5, 23, 24, 13, 0, 0, 0, 0, 0, 12, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2}));

            // run the model and get the result
            float[] y = sess.runner().feed("nn_input", x).fetch("nn_output").run().get(0).copyTo(new float[NUM_PREDICTIONS]);

            // print out the result.
            System.out.println(y[0]);
        }
   }
}
&lt;/denchmark-code&gt;

Compile with:
javac -cp /home/cugur/Downloads/jbindings/jtf/libtensorflow-1.14.0.jar HelloTensorFlow.java
Run with:
java -cp /home/cugur/Downloads/jbindings/jtf/libtensorflow-1.14.0.jar:. -Djava.library.path=/home/cugur/Downloads/jbindings/jtf/libtensorflow_jni-cpu-linux-x86_64-1.14.0 HelloTensorFlow
Where I use  and tensorflow jar&amp;jni downoladed withihn official &lt;denchmark-link:https://www.tensorflow.org/install/lang_java&gt;https://www.tensorflow.org/install/lang_java&lt;/denchmark-link&gt;

Throws out an error:
&lt;denchmark-code&gt;TensorFlow.version(): 1.14.0
2020-07-16 09:32:51.532701: I tensorflow/cc/saved_model/reader.cc:31] Reading SavedModel from: /home/cugur/Desktop/graal_dataset/dataset_v3/nn_visualization/NNRegressor_model/
2020-07-16 09:32:51.541743: I tensorflow/cc/saved_model/reader.cc:54] Reading meta graph with tags { serve }
2020-07-16 09:32:51.552082: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2020-07-16 09:32:51.576523: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 2599500000 Hz
2020-07-16 09:32:51.576926: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x7fc804a08e20 executing computations on platform Host. Devices:
2020-07-16 09:32:51.576946: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): &lt;undefined&gt;, &lt;undefined&gt;
2020-07-16 09:32:51.610653: I tensorflow/cc/saved_model/loader.cc:202] Restoring SavedModel bundle.
2020-07-16 09:32:51.753134: W tensorflow/compiler/jit/mark_for_compilation_pass.cc:1412] (One-time warning): Not using XLA:CPU for cluster because envvar TF_XLA_FLAGS=--tf_xla_cpu_global_jit was not set.  If you want XLA:CPU, either set that envvar, or use experimental_jit_scope to enable XLA:CPU.  To confirm that XLA is active, pass --vmodule=xla_compilation_cache=1 (as a proper command-line flag, not via TF_XLA_FLAGS) or set the envvar XLA_FLAGS=--xla_hlo_profile.
2020-07-16 09:32:51.782056: I tensorflow/cc/saved_model/loader.cc:151] Running initialization op on SavedModel bundle at path: /home/cugur/Desktop/graal_dataset/dataset_v3/nn_visualization/NNRegressor_model/
2020-07-16 09:32:51.836027: I tensorflow/cc/saved_model/loader.cc:311] SavedModel load for tags { serve }; Status: success. Took 303331 microseconds.
SavedModelBundle: [B@330bedb4
Exception in thread "main" java.lang.IllegalArgumentException: No Operation named [nn_input] in the Graph
	at org.tensorflow.Session$Runner.operationByName(Session.java:380)
	at org.tensorflow.Session$Runner.parseOutput(Session.java:389)
	at org.tensorflow.Session$Runner.feed(Session.java:131)
	at HelloTensorFlow.main(HelloTensorFlow.java:25)
&lt;/denchmark-code&gt;

Addition:
The same error occurred when running (javac and java commands) with nightly lbraries (TensorFlow.version(): 2.2.0) which is downloaded from: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/java/README.md&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/java/README.md&lt;/denchmark-link&gt;
.
&lt;denchmark-h:h1&gt;In addition&lt;/denchmark-h&gt;

Commands saved_model_cli show --dir ./NNRegressor_model/ --all confirms that the input and output tensors are indeed called as stated.
		</comment>
		<comment id='3' author='MilanCugur' date='2020-07-16T21:25:29Z'>
		Update:
The problem happen due to bad tensors naming!
It turns out that the input and output tensors are named with serving_default_input_1:0 and StatefulPartitionedCall:0, which is in contrast to the names that were defined when creating the model, as well as the names that saved_model_cli output.
When the names are changed, the code works properly.
		</comment>
		<comment id='4' author='MilanCugur' date='2020-07-16T21:47:04Z'>
		Glad it worked. Will close this issue now that it's fixed. Thanks!
		</comment>
		<comment id='5' author='MilanCugur' date='2020-07-17T08:07:39Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41425&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41425&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='MilanCugur' date='2020-09-11T08:48:40Z'>
		Hi &lt;denchmark-link:https://github.com/MilanCugur&gt;@MilanCugur&lt;/denchmark-link&gt;

I'm a newbie to tensorflow and I met same problem but I still not sure how to solve it. Could you please provide more detail codes about how you build the model and save it with the name of input and output?
		</comment>
	</comments>
</bug>