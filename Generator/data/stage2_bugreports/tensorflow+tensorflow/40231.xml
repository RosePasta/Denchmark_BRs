<bug id='40231' author='leeyeetonn' open_date='2020-06-07T03:37:57Z' closed_time='2020-12-04T02:56:32Z'>
	<summary>tf.linalg.expm enters infinite loop when input may cause reduce_sum to have inf</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v2.2.0-rc4-8-g2b96f3662b 2.2.0 &amp; v2.1.0-rc2-17-ge5bf8de 2.1.0
Python version: 3.7.6
Bazel version (if compiling from source): NA
GCC/Compiler version (if compiling from source):NA
CUDA/cuDNN version:NA
GPU model and memory:NA

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Describe the current behavior
tf.linalg.expm may enter an infinite loop when certain input can cause math_ops.reduce_sum to return inf, so l1_norm, squarings, and max_squarings will all become inf and the while_loop's condition will never be false.
Part of this behavior comes from how reduce_sum deals with overflow with certain dtype, because for example, if input is float16, it's very easy to have input to cause reduce_sum to have inf in the result. On the other hand, if input is float32, inf may not occur easily because it's more difficult for reduce_sum to have overflow with float32
Describe the expected behavior
Tensorflow should be able to detect this infinite loop and then throw an exception to warn the user and stop the execution.
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
import tensorflow as tf
import numpy as np

# an input big enough to cause reduce_sum to return inf
in_tensor = (np.random.rand(1000, 1000) * 10000).astype('float16')

tf.linalg.expm(in_tensor) # will not terminate
Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
The problem seems to be this call: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/linalg/linalg_impl.py#L274-L278&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/linalg/linalg_impl.py#L274-L278&lt;/denchmark-link&gt;

    l1_norm = math_ops.reduce_max(
        math_ops.reduce_sum(
            math_ops.abs(matrix),
            axis=array_ops.size(array_ops.shape(matrix)) - 2),
        axis=-1)[..., array_ops.newaxis, array_ops.newaxis]
where math_ops.reduce_sum would have inf value in result, so l1_norm would also contain inf. Then, eventually max_squarings would just be inf due to error propagation, so the while_loop condition c = lambda i, r: math_ops.less(i, max_squarings) would never evaluate to be false, causing the infinite loop.
	</description>
	<comments>
		<comment id='1' author='leeyeetonn' date='2020-06-08T06:10:51Z'>
		I have tried in colab with TF version 2.1, 2.2, nightly version () and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/24db9e4fa3b191408143bea8243a0ce2/untitled961.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='2' author='leeyeetonn' date='2020-12-04T02:56:32Z'>
		&lt;denchmark-link:https://github.com/leeyeetonn&gt;@leeyeetonn&lt;/denchmark-link&gt;
 Looks like this was resolved in recent .  Please check the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/26cdb711b0c60ed21ac8cc4d74e45745/untitled961.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
I also checked in !pip install tensorflow==2.4rc3 and there is no issue.  So, if you want to use stable version, then please wait for few more days for the release of TF2.4 in near future.
I am closing this issue as this was resolved in recent tf-nightly. Please feel free to reopen if I am mistaken. thanks!
		</comment>
		<comment id='3' author='leeyeetonn' date='2020-12-04T02:56:33Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40231&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40231&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>