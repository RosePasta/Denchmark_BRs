<bug id='37397' author='stevemance' open_date='2020-03-06T18:21:58Z' closed_time='2020-08-10T19:13:15Z'>
	<summary>tf.ragged.map_flat_values with tf.argmax on ragged axis produces wrong operation</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock
example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g.,
Linux Ubuntu 16.04): Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if
the issue happens on mobile device: N/A
TensorFlow installed from (source or
binary): Pip
TensorFlow version (use command below): v2.1.0-rc2-17-ge5bf8de 2.1.0
Python version: Python 3.7.4
Bazel
version (if compiling from source): N/A
GCC/Compiler version (if compiling from
source): N/A
CUDA/cuDNN version: V10.1.243
GPU model and memory: GeForce RTX 2080 8G

Describe the current behavior
Using a RaggedTensor flat mapped into tf.argmax and the flattened ragged dimension as the axis to argmax against, the wrong shape/operation results.  [batch, None, N] using map_flat_values(tf.argmax, , -2) results in a [batch, None] tensor.
Describe the expected behavior
I'd expect to result in a [batch, N] tensor.
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
foo = tf.ragged.constant([[[0,1],[2,3]],[[4,5]],[[6,7]],[[8,9]]], dtype=tf.int64, ragged_rank=1)

# Mapped into the ragged axis (should produce a [4, 2])
bar = tf.ragged.map_flat_values(tf.argmax, foo, -2)
bar
&lt;tf.RaggedTensor [[4, 4], [], [], []]&gt;
bar.shape
TensorShape([4, None])

# Mapped into the non-ragged axis
bar = tf.ragged.map_flat_values(tf.argmax, foo, -1)
bar
&lt;tf.RaggedTensor [[1, 1], [1], [1], [1]]&gt;
# Notice the same shape...
bar.shape
TensorShape([4, None])
&lt;/denchmark-code&gt;

What I expect is something like this:
&lt;denchmark-code&gt;import tensorflow as tf
foo = tf.ragged.constant([[[0,1],[2,3]],[[4,5]],[[6,7]],[[8,9]]], dtype=tf.int64, ragged_rank=1)
row_splits = foo.row_splits
old_row=row_splits[0]
bar = []
for row in row_splits[1:]:
    bar.append(tf.argmax(foo.values[old_row:row, ...],-2))
    old_row=row
bar = tf.stack(bar)
bar
&lt;tf.Tensor: shape=(4, 2), dtype=int64, numpy=
array([[1, 1],
       [0, 0],
       [0, 0],
       [0, 0]])&gt;
bar.shape
TensorShape([4, 2])
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='stevemance' date='2020-03-09T09:23:28Z'>
		I have tried on colab with TF version 2.1.0 beta,2.2.0-dev20200308 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/1344668f02641b79a34e585d3e1b7f2c/untitled713.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='stevemance' date='2020-05-22T12:35:39Z'>
		I'm also hitting this bug in TF 2.2. Are there updates on this?
Some temporary workaround for argmax in ragged tensors that does not involve manually looping the ragged dimension or relying on eager mode would be much appreciated.
		</comment>
		<comment id='3' author='stevemance' date='2020-05-23T08:29:37Z'>
		I'm using tf.argmax(ragged_tensor.to_tensor(np.NINF), axis) as an alternative for now.
		</comment>
		<comment id='4' author='stevemance' date='2020-06-15T14:16:55Z'>
		tf.ragged.map_flat_values(tf.argmax, foo, -2) should raise an exception, since you're constructing an invalid RaggedTensor.  In particular, this is equivalent to the following, which does raise an exception:
&lt;denchmark-code&gt;&gt;&gt;&gt;foo.with_flat_values(tf.argmax(foo.flat_values, -2))
ValueError: Shapes (5,) and (2,) are incompatible
&lt;/denchmark-code&gt;

I'll look into adding a shape check that will make map_flat_values fail here.
In general, map_flat_values should only be used on operations that operate independently on rows of a ragged tensor -- in particular, the number of rows that the function returns needs to match the number of rows in the original version.  This is trivially true for elementwise operations.  Operations that do aggregation within rows are ok too.  But operations that do aggregation across rows are not.  In your case, foo.flat_values is a 2D tensor, so doing argmax with axis=-2 reduces across those values.  I.e., this is what's effectively happening in your code:
&lt;denchmark-code&gt;new_values = tf.argmax(foo.flat_values, -2)  # = [4, 4]
bar = tf.RaggedTensor.from_row_lengths(new_values, foo.row_lengths())
&lt;/denchmark-code&gt;

This is invalid, since the row_lengths indicates that we should have 5 values, but we only have 2.
Your work-around of using to_tensor seems reasonable.  I think it would also be possible to put together a solution based on tf.map_fn, but it would probably be more complex and slower.
		</comment>
		<comment id='5' author='stevemance' date='2020-08-10T19:13:15Z'>
		Closing this issue, since the behavior is expected.  I will add a static shape check that should give a better error message.
		</comment>
		<comment id='6' author='stevemance' date='2020-08-10T19:13:17Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37397&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37397&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>