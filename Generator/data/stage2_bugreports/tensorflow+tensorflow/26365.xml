<bug id='26365' author='VictorAlbertos' open_date='2019-03-05T16:28:25Z' closed_time='2019-03-06T21:44:06Z'>
	<summary>Interpreter lifecycle Tensorflow Lite</summary>
	<description>
System information

TensorFlow version: org.tensorflow:tensorflow-lite:0.0.0-nightly
Doc Link: there is no doc as far as I know


I was not able to find information about what is the proper life cycle for the &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/lite/Interpreter&gt;Intepreter&lt;/denchmark-link&gt;
 class. I'm a contributor of this &lt;denchmark-link:https://github.com/the-super-toys/glimpse-android&gt;Android library&lt;/denchmark-link&gt;
 which makes use of TensorFlow Lite. The problem is that I don't know where I should instantiate the Interpreter. If I do it with a global scope and reuse the instance over and over after a few calls  it throws the next exception:
&lt;denchmark-code&gt;--------- beginning of crash
2019-03-05 01:15:23.444 31140-31169/glimpse.sample A/libc: Fatal signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x6d36b8d51c in tid 31169 (glide-disk-cach), pid 31140 (glimpse.sample)
2019-03-05 01:15:23.476 31140-31159/glimpse.sample E/libc: Access denied finding property "vendor.debug.egl.swapinterval"
2019-03-05 01:15:23.513 31228-31228/? A/DEBUG: *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
2019-03-05 01:15:23.514 31228-31228/? A/DEBUG: Build fingerprint: 'OnePlus/OnePlus6/OnePlus6:9/PKQ1.180716.001/1901231401:user/release-keys'
2019-03-05 01:15:23.514 31228-31228/? A/DEBUG: Revision: '0'
2019-03-05 01:15:23.514 31228-31228/? A/DEBUG: ABI: 'arm64'
2019-03-05 01:15:23.514 31228-31228/? A/DEBUG: pid: 31140, tid: 31169, name: glide-disk-cach  &gt;&gt;&gt; glimpse.sample &lt;&lt;&lt;
2019-03-05 01:15:23.514 31228-31228/? A/DEBUG: signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x6d36b8d51c
2019-03-05 01:15:23.514 31228-31228/? A/DEBUG:     x0  0000007e068702c0  x1  0000000000000000  x2  0000000000000010  x3  0000000000000004
2019-03-05 01:15:23.514 31228-31228/? A/DEBUG:     x4  0000007e068702d0  x5  0000007e06870300  x6  0000000000000002  x7  0000007e068702c0
2019-03-05 01:15:23.514 31228-31228/? A/DEBUG:     x8  0000000000000002  x9  0000000000000004  x10 0000000000000003  x11 fffff80dc78c320f
2019-03-05 01:15:23.514 31228-31228/? A/DEBUG:     x12 ffffffef3031d1dc  x13 0000000000000004  x14 0000000000000001  x15 0000000000000003
2019-03-05 01:15:23.514 31228-31228/? A/DEBUG:     x16 0000007e077e6280  x17 0000007ea829de70  x18 0000000000000010  x19 0000007e068702c0
2019-03-05 01:15:23.514 31228-31228/? A/DEBUG:     x20 0000000000000004  x21 0000007e091f28c4  x22 0000007e068689c0  x23 0000000000000002
2019-03-05 01:15:23.514 31228-31228/? A/DEBUG:     x24 0000007e06870300  x25 0000007e06870340  x26 0000000000000060  x27 0000000000000060
2019-03-05 01:15:23.514 31228-31228/? A/DEBUG:     x28 0000007e091e8500  x29 0000007e08912ae0
2019-03-05 01:15:23.514 31228-31228/? A/DEBUG:     sp  0000007e08912aa0  lr  0000007e07703254  pc  0000007e0770335c
2019-03-05 01:15:23.518 31140-31159/glimpse.sample E/libc: Access denied finding property "vendor.debug.egl.swapinterval"
2019-03-05 01:15:23.533 31140-31159/glimpse.sample E/libc: Access denied finding property "vendor.debug.egl.swapinterval"
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG: backtrace:
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #00 pc 00000000000d035c  /data/app/glimpse.sample-Jd0f0_ct3CDvNgh38yERpA==/lib/arm64/libtensorflowlite_jni.so
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #01 pc 00000000000cfb4c  /data/app/glimpse.sample-Jd0f0_ct3CDvNgh38yERpA==/lib/arm64/libtensorflowlite_jni.so
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #02 pc 00000000000ccc54  /data/app/glimpse.sample-Jd0f0_ct3CDvNgh38yERpA==/lib/arm64/libtensorflowlite_jni.so
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #03 pc 000000000011a38c  /data/app/glimpse.sample-Jd0f0_ct3CDvNgh38yERpA==/lib/arm64/libtensorflowlite_jni.so
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #04 pc 000000000011cd98  /data/app/glimpse.sample-Jd0f0_ct3CDvNgh38yERpA==/lib/arm64/libtensorflowlite_jni.so
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #05 pc 0000000000010f60  /data/app/glimpse.sample-Jd0f0_ct3CDvNgh38yERpA==/lib/arm64/libtensorflowlite_jni.so (Java_org_tensorflow_lite_NativeInterpreterWrapper_run+32)
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #06 pc 000000000055e1e0  /system/lib64/libart.so (art_quick_generic_jni_trampoline+144)
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #07 pc 000000000055544c  /system/lib64/libart.so (art_quick_invoke_static_stub+604)
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #08 pc 00000000000cf6e8  /system/lib64/libart.so (art::ArtMethod::Invoke(art::Thread*, unsigned int*, unsigned int, art::JValue*, char const*)+232)
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #09 pc 000000000027f2b8  /system/lib64/libart.so (art::interpreter::ArtInterpreterToCompiledCodeBridge(art::Thread*, art::ArtMethod*, art::ShadowFrame*, unsigned short, art::JValue*)+344)
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #10 pc 00000000002792c0  /system/lib64/libart.so (bool art::interpreter::DoCall&lt;false, false&gt;(art::ArtMethod*, art::Thread*, art::ShadowFrame&amp;, art::Instruction const*, unsigned short, art::JValue*)+968)
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #11 pc 0000000000526498  /system/lib64/libart.so (MterpInvokeStatic+204)
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #12 pc 0000000000547a14  /system/lib64/libart.so (ExecuteMterpImpl+14612)
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #13 pc 000000000026abe8  /dev/ashmem/dalvik-classes2.dex extracted in memory from /data/app/glimpse.sample-Jd0f0_ct3CDvNgh38yERpA==/base.apk!classes2.dex (deleted) (org.tensorflow.lite.NativeInterpreterWrapper.run+164)
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #14 pc 0000000000252fc4  /system/lib64/libart.so (_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEb.llvm.99565114+488)
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #15 pc 0000000000258ab8  /system/lib64/libart.so (art::interpreter::ArtInterpreterToInterpreterBridge(art::Thread*, art::CodeItemDataAccessor const&amp;, art::ShadowFrame*, art::JValue*)+216)
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #16 pc 00000000002792a4  /system/lib64/libart.so (bool art::interpreter::DoCall&lt;false, false&gt;(art::ArtMethod*, art::Thread*, art::ShadowFrame&amp;, art::Instruction const*, unsigned short, art::JValue*)+940)
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #17 pc 0000000000524f94  /system/lib64/libart.so (MterpInvokeVirtual+588)
2019-03-05 01:15:23.557 31228-31228/? A/DEBUG:     #18 pc 0000000000547894  /system/lib64/libart.so (ExecuteMterpImpl+14228)...
&lt;/denchmark-code&gt;

To provide more context, the  is used from a background thread, specifically from a &lt;denchmark-link:https://bumptech.github.io/glide/doc/transformations.html&gt;Glide Transformation&lt;/denchmark-link&gt;
 component. So, at this point, I don't know if the problem is due to a wrong lifecycle handling of the interpreter instance or rather something related to threading.
But beyond my particular case I wanted to ask for some guidance about the proper lifecycle handling for the Interpreter class.
Thanks.
	</description>
	<comments>
		<comment id='1' author='VictorAlbertos' date='2019-03-06T16:23:40Z'>
		So, the Interpreter should remain valid until you call close() on it. However, it is not thread-safe, so you'll need make sure any access is properly serialized. One question, are you using the GPU delegate accelerator? Or just regular CPU inference?
		</comment>
		<comment id='2' author='VictorAlbertos' date='2019-03-06T21:44:06Z'>
		Thanks &lt;denchmark-link:https://github.com/jdduke&gt;@jdduke&lt;/denchmark-link&gt;
 for th clarification. We managed to call  thread safe and the issue is fixed.

are you using the GPU delegate accelerator? Or just regular CPU inference?

Just regular CPU. But I think we tried at some point with the GPU delegate accelerator and we found a worse performance.
		</comment>
	</comments>
</bug>