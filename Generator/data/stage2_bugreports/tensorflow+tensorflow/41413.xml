<bug id='41413' author='HaraBeron' open_date='2020-07-15T11:47:32Z' closed_time='2020-07-16T15:09:14Z'>
	<summary>Threshold to be set 0 when using binary accuracy with raw prediction values (from_logits=True)</summary>
	<description>
This is mainly a documentation bug (official tensorflow tutorial), but it is a "dangerous trap" and might also happen in general to users, so see below my last sentence this could also be fixed in Tensorflow that it detects this automatically.
In this &lt;denchmark-link:https://www.tensorflow.org/tutorials/images/transfer_learning&gt;tutorial&lt;/denchmark-link&gt;
 raw prediction values (form_logit=True) are used. So we have negative values and positive values, while


"prediction will be treated as a logit, or a raw prediction value. Positive numbers predict class 1, negative numbers predict class 0."
However, the model.compile statement is as follows:
&lt;denchmark-code&gt;base_learning_rate = 0.0001
model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=base_learning_rate),
              loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),
              metrics=['accuracy'])

&lt;/denchmark-code&gt;

This is wrong, as per default, threshold value to classify is 0.5:
&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/metrics/binary_accuracy&gt;https://www.tensorflow.org/api_docs/python/tf/keras/metrics/binary_accuracy&lt;/denchmark-link&gt;

&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/metrics/BinaryAccuracy&gt;https://www.tensorflow.org/api_docs/python/tf/keras/metrics/BinaryAccuracy&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;tf.keras.metrics.binary_accuracy(
    y_true, y_pred, threshold=0.5
)
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;tf.keras.metrics.BinaryAccuracy(
    name='binary_accuracy', dtype=None, threshold=0.5
)
&lt;/denchmark-code&gt;





threshold
(Optional) Float representing the threshold for deciding whether prediction values are 1 or 0.




This leads to the wrong classifications. model.evaluate will also give false accuracy measure. Reason is that predicted values in range [0,0.49999] are wrongly classified as 0 (I am not sure what happens to a value of exactly 0.5), whereas they actually should be classified as 1!
So it needs to be corrected to:

model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=base_learning_rate),
loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),
metrics=tf.keras.metrics.BinaryAccuracy(threshold=0.0))

Would be even better if this is corrected inside Tensorflow that it automatically detects that from_logits=True was set and then assumes that default threshold is not 0.5 anymore, but 0.0 (and maybe additional WARNING output).
	</description>
	<comments>
		<comment id='1' author='HaraBeron' date='2020-07-16T15:09:14Z'>
		This is fixed.
		</comment>
	</comments>
</bug>