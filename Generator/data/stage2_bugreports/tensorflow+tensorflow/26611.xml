<bug id='26611' author='Khoa-NT' open_date='2019-03-12T14:36:11Z' closed_time='2019-03-15T17:32:10Z'>
	<summary>pix2pix_eager.ipynb error: NotImplementedError: exceptions are not yet supported</summary>
	<description>
I run the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.13/tensorflow/contrib/eager/python/examples/pix2pix/pix2pix_eager.ipynb&gt;pix2pix_eager.ipynb&lt;/denchmark-link&gt;
 on colab.
At the step &lt;denchmark-link:https://colab.research.google.com/github/tensorflow/tensorflow/blob/master/tensorflow/contrib/eager/python/examples/pix2pix/pix2pix_eager.ipynb#scrollTo=a1zZmKmvOH85&gt;training&lt;/denchmark-link&gt;
:

The error log:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
NotImplementedError                       Traceback (most recent call last)
&lt;ipython-input-22-d152560ca122&gt; in &lt;module&gt;()
----&gt; 1 train(train_dataset, EPOCHS)

&lt;ipython-input-18-24e63cd58368&gt; in train(dataset, epochs)
      6 
      7       with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:
----&gt; 8         gen_output = generator(input_image, training=True)
      9 
     10         disc_real_output = discriminator(input_image, target, training=True)

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in __call__(self, inputs, *args, **kwargs)
    590       else:
    591         # Eager execution on data tensors.
--&gt; 592         outputs = self.call(inputs, *args, **kwargs)
    593         self._handle_activity_regularization(inputs, outputs)
    594         return outputs

/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py in __call__(self, *args, **kwargs)
    862   def __call__(self, *args, **kwargs):
    863     """Calls a graph function specialized to the inputs."""
--&gt; 864     graph_function, args, kwargs = self._maybe_define_function(args, kwargs)
    865     return graph_function._filtered_call(args, kwargs)  # pylint: disable=protected-access
    866 

/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py in _maybe_define_function(self, args, kwargs)
   1174                 self._input_signature,
   1175                 autograph=self._autograph,
-&gt; 1176                 arg_names=arg_names),
   1177             self._function_attributes)
   1178         if self._input_signature:

/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, add_control_dependencies, arg_names, op_return_value)
    446         tf_decorator.rewrap(python_func, original_func, converted_func)
    447 
--&gt; 448       func_outputs = python_func(*func_args, **func_kwargs)
    449 
    450       # invariant: `func_outputs` contains only Tensors, IndexedSlices,

/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py in bound_method_wrapper(*args, **kwargs)
   1654     # If __wrapped__ was replaced, then it is always an unbound function
   1655     # that takes self as first argument.
-&gt; 1656     return wrapped_fn(weak_instance(), *args, **kwargs)
   1657 
   1658   # pylint: disable=protected-access

/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/func_graph.py in wrapper(*args, **kwargs)
    439                   strip_decorators=(def_function.function,),
    440                   optional_features=(),
--&gt; 441               ), *args, **kwargs)
    442 
    443         # Wrapping around a decorator allows checks like tf_inspect.getargspec

/usr/local/lib/python3.6/dist-packages/tensorflow/python/autograph/impl/api.py in converted_call(f, owner, options, *args, **kwargs)
    287       experimental_partial_types=partial_types)
    288 
--&gt; 289   result = converted_f(*effective_args, **kwargs)
    290 
    291   # The converted function's closure is simply inserted into the function's

/tmp/tmply9ws8vn.py in tf__call(self, x, training)
      1 from __future__ import print_function
      2 def tf__call(self, x, training):
----&gt; 3   x1 = ag__.converted_call('down1', self, ag__.converter.ConversionOptions(recursive=True, verbose=0, strip_decorators=(function, defun, ag__.convert, ag__.do_not_convert, ag__.converted_call), force_conversion=False, optional_features=(), internal_convert_user_code=True), x, training=training)
      4   x2 = ag__.converted_call('down2', self, ag__.converter.ConversionOptions(recursive=True, verbose=0, strip_decorators=(function_1, defun_1, ag__.convert, ag__.do_not_convert, ag__.converted_call), force_conversion=False, optional_features=(), internal_convert_user_code=True), x1, training=training)
      5   x3 = ag__.converted_call('down3', self, ag__.converter.ConversionOptions(recursive=True, verbose=0, strip_decorators=(function_2, defun_2, ag__.convert, ag__.do_not_convert, ag__.converted_call), force_conversion=False, optional_features=(), internal_convert_user_code=True), x2, training=training)

/usr/local/lib/python3.6/dist-packages/tensorflow/python/autograph/impl/api.py in converted_call(f, owner, options, *args, **kwargs)
    285       experimental_strip_decorators=options.strip_decorators,
    286       experimental_verbose=options.verbose,
--&gt; 287       experimental_partial_types=partial_types)
    288 
    289   result = converted_f(*effective_args, **kwargs)

/usr/local/lib/python3.6/dist-packages/tensorflow/python/autograph/impl/api.py in to_graph(entity, recursive, arg_values, arg_types, experimental_optional_features, experimental_strip_decorators, experimental_verbose, experimental_partial_types)
    407       uncompiled_modules=config.DEFAULT_UNCOMPILED_MODULES)
    408   _, name, namespace = conversion.entity_to_graph(entity, program_ctx,
--&gt; 409                                                   arg_values, arg_types)
    410 
    411   nodes = []

/usr/local/lib/python3.6/dist-packages/tensorflow/python/autograph/impl/conversion.py in entity_to_graph(o, program_ctx, arg_values, arg_types)
    137     node, name, ns = function_to_graph(o, program_ctx, arg_values, arg_types)
    138   elif tf_inspect.ismethod(o):
--&gt; 139     node, name, ns = function_to_graph(o, program_ctx, arg_values, arg_types)
    140   # TODO(mdan,yashkatariya): Remove when object conversion is implemented.
    141   elif hasattr(o, '__class__'):

/usr/local/lib/python3.6/dist-packages/tensorflow/python/autograph/impl/conversion.py in function_to_graph(f, program_ctx, arg_values, arg_types, owner_type)
    335       owner_type=owner_type)
    336   context = converter.EntityContext(namer, entity_info, program_ctx)
--&gt; 337   node = node_to_graph(node, context)
    338 
    339   if isinstance(node, gast.Lambda):

/usr/local/lib/python3.6/dist-packages/tensorflow/python/autograph/impl/conversion.py in node_to_graph(node, context)
    373   # TODO(mdan): Insert list_comprehensions somewhere.
    374 
--&gt; 375   node = converter.standard_analysis(node, context, is_initial=True)
    376   # Past this point, line numbers are no longer accurate so we ignore the
    377   # source.

/usr/local/lib/python3.6/dist-packages/tensorflow/python/autograph/core/converter.py in standard_analysis(node, context, is_initial)
    469   # TODO(mdan): Consider not running all analyses every time.
    470   # TODO(mdan): Don't return a node because it's modified by reference.
--&gt; 471   graphs = cfg.build(node)
    472   node = qual_names.resolve(node)
    473   node = activity.resolve(node, context.info, None)

/usr/local/lib/python3.6/dist-packages/tensorflow/python/autograph/pyct/cfg.py in build(node)
    819 def build(node):
    820   visitor = AstToCfg()
--&gt; 821   visitor.visit(node)
    822   return visitor.cfgs

/usr/lib/python3.6/ast.py in visit(self, node)
    251         method = 'visit_' + node.__class__.__name__
    252         visitor = getattr(self, method, self.generic_visit)
--&gt; 253         return visitor(node)
    254 
    255     def generic_visit(self, node):

/usr/local/lib/python3.6/dist-packages/tensorflow/python/autograph/pyct/cfg.py in visit_FunctionDef(self, node)
    672     self._process_basic_statement(node.args)
    673     for stmt in node.body:
--&gt; 674       self.visit(stmt)
    675 
    676     self.builder.exit_section(node)

/usr/lib/python3.6/ast.py in visit(self, node)
    251         method = 'visit_' + node.__class__.__name__
    252         visitor = getattr(self, method, self.generic_visit)
--&gt; 253         return visitor(node)
    254 
    255     def generic_visit(self, node):

/usr/local/lib/python3.6/dist-packages/tensorflow/python/autograph/pyct/cfg.py in visit_With(self, node)
    814       self._process_basic_statement(item)
    815     for stmt in node.body:
--&gt; 816       self.visit(stmt)
    817 
    818 

/usr/lib/python3.6/ast.py in visit(self, node)
    251         method = 'visit_' + node.__class__.__name__
    252         visitor = getattr(self, method, self.generic_visit)
--&gt; 253         return visitor(node)
    254 
    255     def generic_visit(self, node):

/usr/local/lib/python3.6/dist-packages/tensorflow/python/autograph/pyct/cfg.py in visit_If(self, node)
    727     self.builder.new_cond_branch(node)
    728     for stmt in node.body:
--&gt; 729       self.visit(stmt)
    730 
    731     self.builder.new_cond_branch(node)

/usr/lib/python3.6/ast.py in visit(self, node)
    251         method = 'visit_' + node.__class__.__name__
    252         visitor = getattr(self, method, self.generic_visit)
--&gt; 253         return visitor(node)
    254 
    255     def generic_visit(self, node):

/usr/local/lib/python3.6/dist-packages/tensorflow/python/autograph/pyct/cfg.py in visit_With(self, node)
    814       self._process_basic_statement(item)
    815     for stmt in node.body:
--&gt; 816       self.visit(stmt)
    817 
    818 

/usr/lib/python3.6/ast.py in visit(self, node)
    251         method = 'visit_' + node.__class__.__name__
    252         visitor = getattr(self, method, self.generic_visit)
--&gt; 253         return visitor(node)
    254 
    255     def generic_visit(self, node):

/usr/local/lib/python3.6/dist-packages/tensorflow/python/autograph/pyct/cfg.py in visit_If(self, node)
    731     self.builder.new_cond_branch(node)
    732     for stmt in node.orelse:
--&gt; 733       self.visit(stmt)
    734 
    735     self.builder.exit_cond_section(node)

/usr/lib/python3.6/ast.py in visit(self, node)
    251         method = 'visit_' + node.__class__.__name__
    252         visitor = getattr(self, method, self.generic_visit)
--&gt; 253         return visitor(node)
    254 
    255     def generic_visit(self, node):

/usr/local/lib/python3.6/dist-packages/tensorflow/python/autograph/pyct/cfg.py in visit_Try(self, node)
    800     if node.handlers:
    801       # TODO(mdan): Should we still support bare try/except? Might be confusing.
--&gt; 802       raise NotImplementedError('exceptions are not yet supported')
    803 
    804     self._exit_lexical_scope(node)

NotImplementedError: exceptions are not yet supported
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Khoa-NT' date='2019-03-14T02:03:38Z'>
		@shaolinkhoa The colab runs successfully against TF 1.10. However for TF versions later than 1.10 it has to be updated.
Please try to run against TF 1.10 as of now. Thanks!
cc &lt;denchmark-link:https://github.com/yashk2810&gt;@yashk2810&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='Khoa-NT' date='2019-03-14T02:55:17Z'>
		This version is not maintained anymore. Can you try running this one: &lt;denchmark-link:https://github.com/tensorflow/docs/blob/master/site/en/r2/tutorials/generative/pix2pix.ipynb&gt;https://github.com/tensorflow/docs/blob/master/site/en/r2/tutorials/generative/pix2pix.ipynb&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='Khoa-NT' date='2019-03-14T05:32:03Z'>
		thank you &lt;denchmark-link:https://github.com/ymodak&gt;@ymodak&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/yashk2810&gt;@yashk2810&lt;/denchmark-link&gt;
.
My problem now is choosing between tensorflow version 1.10 ,1.13.1 or 2.0-alpha.

Version 2.0-alpha is still unstable.
Version 1.13.1 is better than 1.10 . But as ymodak said: the tutorial on tensorflow website doesn't support version 1.13.1 and you guys don't have any plan to maintain all tutorials or guides.

I don't know why but my Jupyter Notebook (run local)(version 5.7.4) always restart the kernal while I running the code Tensorflow-gpu version 2.0-alpha.
So should I just use tensorflow 2.0-alpha and keep updating the tensorflow version for now and then?
p/s: please support us to write a note of tensorflow version fit with each tutorial/guide. By default, we always think you guys updated the tutorials/guides when a new tensorflow version is released.
		</comment>
		<comment id='4' author='Khoa-NT' date='2019-03-15T17:32:10Z'>
		I understand your dilemma here but I would like to encourage you for using TF 2.0 alpha since its only going to get better moving forward and can provide more support. I will close this issue now that we have several workarounds available. Thanks!
		</comment>
	</comments>
</bug>