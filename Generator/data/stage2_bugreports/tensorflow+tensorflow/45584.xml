<bug id='45584' author='moonj94' open_date='2020-12-10T20:40:00Z' closed_time='2020-12-30T23:55:38Z'>
	<summary>Autograph warning seems to lead to reduced performance</summary>
	<description>
System information


I am using a toolbox called EEGNet and using my own script


OS Platform and distribution: macOS catalina version 10.15.7 (19H2)


TensorFlow installed from (source or binary) - i don't know how to check this


Tensorflow version 2.3.1


Python version: 3.7.4


GPU model and memory: Radeon Pro 560X 4GB Intel UHD graphics 630 1536MB, and memory = 16GB 2400MHz DDR4


Describe the current behavior
I am getting the warning:
WARNING:tensorflow:Entity &lt;function Function._initialize_uninitialized_variables.&lt;locals&gt;.initialize_variables at 0x7fd0e8162b90&gt; could not be transformed and will be executed as-is. Please report this to the AutoGraph team. When filing the bug, set the verbosity to 10 (on Linux, export AUTOGRAPH_VERBOSITY=10) and attach the full output. Cause:  WARNING: Entity &lt;function Function._initialize_uninitialized_variables.&lt;locals&gt;.initialize_variables at 0x7fd0e8162b90&gt; could not be transformed and will be executed as-is. Please report this to the AutoGraph team. When filing the bug, set the verbosity to 10 (on Linux, export AUTOGRAPH_VERBOSITY=10) and attach the full output. Cause:
I get this warning somewhat sporadically. When I reopen Spyder the issue is gone until the second iteration in which I need to call it. I am also noticing that the performance as seen through validation accuracy is very much lower when this warning appears.
I checked other posts and it looked like changing gast==0.2.2 fixed it. But not for me.
Describe the expected behavior
Ideally the warning shouldn't appear, as it does the very first time around when I reopen Spyder. And the validation accuracy should be higher

N/A
I am using a module/toolbox called EEGNet.  &lt;denchmark-link:https://github.com/vlawhern/arl-eegmodels&gt;https://github.com/vlawhern/arl-eegmodels&lt;/denchmark-link&gt;

but this seems to be the line that causes the warning:

Other info / logs
This is when I set autograph to verbose, 3
`INFO:tensorflow:Converted call: &lt;function TensorLikeDataAdapter.init..permutation at 0x7fd076e1bb90&gt;
args: (&lt;tf.Tensor 'args_0:0' shape=() dtype=int64&gt;,)
kwargs: {}
Converted call: &lt;function TensorLikeDataAdapter.init..permutation at 0x7fd076e1bb90&gt;
args: (&lt;tf.Tensor 'args_0:0' shape=() dtype=int64&gt;,)
kwargs: {}
INFO:tensorflow:Whitelisted: &lt;function TensorLikeDataAdapter.init..permutation at 0x7fd076e1bb90&gt;: DoNotConvert rule for tensorflow
Whitelisted: &lt;function TensorLikeDataAdapter.init..permutation at 0x7fd076e1bb90&gt;: DoNotConvert rule for tensorflow
INFO:tensorflow:Converted call: &lt;function TensorLikeDataAdapter.init..slice_batch_indices at 0x7fd076f0a290&gt;
args: (&lt;tf.Tensor 'args_0:0' shape=(150,) dtype=int64&gt;,)
kwargs: {}
Converted call: &lt;function TensorLikeDataAdapter.init..slice_batch_indices at 0x7fd076f0a290&gt;
args: (&lt;tf.Tensor 'args_0:0' shape=(150,) dtype=int64&gt;,)
kwargs: {}
INFO:tensorflow:Whitelisted: &lt;function TensorLikeDataAdapter.init..slice_batch_indices at 0x7fd076f0a290&gt;: DoNotConvert rule for tensorflow
Whitelisted: &lt;function TensorLikeDataAdapter.init..slice_batch_indices at 0x7fd076f0a290&gt;: DoNotConvert rule for tensorflow
INFO:tensorflow:Converted call: &lt;function TensorLikeDataAdapter.init..grab_batch at 0x7fd076f0a680&gt;
args: (&lt;tf.Tensor 'args_0:0' shape=(None,) dtype=int64&gt;, (&lt;tf.Tensor 'args_1:0' shape=(150, 64, 128, 1) dtype=float64&gt;, &lt;tf.Tensor 'args_2:0' shape=(150, 3) dtype=float32&gt;, &lt;tf.Tensor 'args_3:0' shape=(150,) dtype=int64&gt;))
kwargs: {}
Converted call: &lt;function TensorLikeDataAdapter.init..grab_batch at 0x7fd076f0a680&gt;
args: (&lt;tf.Tensor 'args_0:0' shape=(None,) dtype=int64&gt;, (&lt;tf.Tensor 'args_1:0' shape=(150, 64, 128, 1) dtype=float64&gt;, &lt;tf.Tensor 'args_2:0' shape=(150, 3) dtype=float32&gt;, &lt;tf.Tensor 'args_3:0' shape=(150,) dtype=int64&gt;))
kwargs: {}
INFO:tensorflow:Whitelisted: &lt;function TensorLikeDataAdapter.init..grab_batch at 0x7fd076f0a680&gt;: DoNotConvert rule for tensorflow
Whitelisted: &lt;function TensorLikeDataAdapter.init..grab_batch at 0x7fd076f0a680&gt;: DoNotConvert rule for tensorflow
INFO:tensorflow:Converted call: &lt;function TensorLikeDataAdapter.init..permutation at 0x7fd076f0a7a0&gt;
args: (&lt;tf.Tensor 'args_0:0' shape=() dtype=int64&gt;,)
kwargs: {}
Converted call: &lt;function TensorLikeDataAdapter.init..permutation at 0x7fd076f0a7a0&gt;
args: (&lt;tf.Tensor 'args_0:0' shape=() dtype=int64&gt;,)
kwargs: {}
INFO:tensorflow:Whitelisted: &lt;function TensorLikeDataAdapter.init..permutation at 0x7fd076f0a7a0&gt;: DoNotConvert rule for tensorflow
Whitelisted: &lt;function TensorLikeDataAdapter.init..permutation at 0x7fd076f0a7a0&gt;: DoNotConvert rule for tensorflow
INFO:tensorflow:Converted call: &lt;function TensorLikeDataAdapter.init..slice_batch_indices at 0x7fd076f0ab90&gt;
args: (&lt;tf.Tensor 'args_0:0' shape=(75,) dtype=int64&gt;,)
kwargs: {}
Converted call: &lt;function TensorLikeDataAdapter.init..slice_batch_indices at 0x7fd076f0ab90&gt;
args: (&lt;tf.Tensor 'args_0:0' shape=(75,) dtype=int64&gt;,)
kwargs: {}
INFO:tensorflow:Whitelisted: &lt;function TensorLikeDataAdapter.init..slice_batch_indices at 0x7fd076f0ab90&gt;: DoNotConvert rule for tensorflow
Whitelisted: &lt;function TensorLikeDataAdapter.init..slice_batch_indices at 0x7fd076f0ab90&gt;: DoNotConvert rule for tensorflow
INFO:tensorflow:Converted call: &lt;function TensorLikeDataAdapter.init..grab_batch at 0x7fd0778ff170&gt;
args: (&lt;tf.Tensor 'args_0:0' shape=(None,) dtype=int64&gt;, (&lt;tf.Tensor 'args_1:0' shape=(75, 64, 128, 1) dtype=float64&gt;, &lt;tf.Tensor 'args_2:0' shape=(75, 3) dtype=float32&gt;, &lt;tf.Tensor 'args_3:0' shape=(75,) dtype=int64&gt;))
kwargs: {}
Converted call: &lt;function TensorLikeDataAdapter.init..grab_batch at 0x7fd0778ff170&gt;
args: (&lt;tf.Tensor 'args_0:0' shape=(None,) dtype=int64&gt;, (&lt;tf.Tensor 'args_1:0' shape=(75, 64, 128, 1) dtype=float64&gt;, &lt;tf.Tensor 'args_2:0' shape=(75, 3) dtype=float32&gt;, &lt;tf.Tensor 'args_3:0' shape=(75,) dtype=int64&gt;))
kwargs: {}
INFO:tensorflow:Whitelisted: &lt;function TensorLikeDataAdapter.init..grab_batch at 0x7fd0778ff170&gt;: DoNotConvert rule for tensorflow
Whitelisted: &lt;function TensorLikeDataAdapter.init..grab_batch at 0x7fd0778ff170&gt;: DoNotConvert rule for tensorflow
Train on 150 samples, validate on 75 samples
Epoch 1/300
INFO:tensorflow:Converted call: &lt;function Function._initialize_uninitialized_variables..initialize_variables at 0x7fd077965b00&gt;
args: ()
kwargs: {}
Converted call: &lt;function Function._initialize_uninitialized_variables..initialize_variables at 0x7fd077965b00&gt;
args: ()
kwargs: {}
INFO:tensorflow:Cache hit for entity &lt;function Function._initialize_uninitialized_variables..initialize_variables at 0x7fd077965b00&gt; key &lt;code object initialize_variables at 0x7fd17c1c40c0, file "/opt/anaconda3/lib/python3.7/site-packages/tensorflow_core/python/eager/def_function.py", line 603&gt; subkey (&lt;tensorflow.python.autograph.core.converter.ConversionOptions object at 0x7fd077f74d90&gt;, frozenset({'initializer_map'})): _ConvertedEntityFactoryInfo(tf__initialize_variables in tmpaqdi9bka)
Cache hit for entity &lt;function Function._initialize_uninitialized_variables..initialize_variables at 0x7fd077965b00&gt; key &lt;code object initialize_variables at 0x7fd17c1c40c0, file "/opt/anaconda3/lib/python3.7/site-packages/tensorflow_core/python/eager/def_function.py", line 603&gt; subkey (&lt;tensorflow.python.autograph.core.converter.ConversionOptions object at 0x7fd077f74d90&gt;, frozenset({'initializer_map'})): _ConvertedEntityFactoryInfo(tf__initialize_variables in tmpaqdi9bka)
INFO:tensorflow:Error transforming entity &lt;function Function._initialize_uninitialized_variables..initialize_variables at 0x7fd077965b00&gt;
Traceback (most recent call last):
File "/opt/anaconda3/lib/python3.7/site-packages/tensorflow_core/python/autograph/impl/api.py", line 506, in converted_call
converted_f = conversion.convert(target_entity, program_ctx)
File "/opt/anaconda3/lib/python3.7/site-packages/tensorflow_core/python/autograph/impl/conversion.py", line 324, in convert
return _instantiate(entity, converted_entity_info, free_nonglobal_var_names)
File "/opt/anaconda3/lib/python3.7/site-packages/tensorflow_core/python/autograph/impl/conversion.py", line 266, in _instantiate
factory = converted_entity_info.get_factory()
File "/opt/anaconda3/lib/python3.7/site-packages/tensorflow_core/python/autograph/impl/conversion.py", line 92, in get_factory
assert self.module_name in sys.modules
AssertionError
Error transforming entity &lt;function Function._initialize_uninitialized_variables..initialize_variables at 0x7fd077965b00&gt;
WARNING:tensorflow:Entity &lt;function Function._initialize_uninitialized_variables..initialize_variables at 0x7fd077965b00&gt; could not be transformed and will be executed as-is. Please report this to the AutoGraph team. When filing the bug, set the verbosity to 10 (on Linux, export AUTOGRAPH_VERBOSITY=10) and attach the full output. Cause:
WARNING: Entity &lt;function Function._initialize_uninitialized_variables..initialize_variables at 0x7fd077965b00&gt; could not be transformed and will be executed as-is. Please report this to the AutoGraph team. When filing the bug, set the verbosity to 10 (on Linux, export AUTOGRAPH_VERBOSITY=10) and attach the full output. Cause:
Traceback (most recent call last):
File "/opt/anaconda3/lib/python3.7/site-packages/tensorflow_core/python/autograph/impl/api.py", line 506, in converted_call
converted_f = conversion.convert(target_entity, program_ctx)
File "/opt/anaconda3/lib/python3.7/site-packages/tensorflow_core/python/autograph/impl/conversion.py", line 324, in convert
return _instantiate(entity, converted_entity_info, free_nonglobal_var_names)
File "/opt/anaconda3/lib/python3.7/site-packages/tensorflow_core/python/autograph/impl/conversion.py", line 266, in _instantiate
factory = converted_entity_info.get_factory()
File "/opt/anaconda3/lib/python3.7/site-packages/tensorflow_core/python/autograph/impl/conversion.py", line 92, in get_factory
assert self.module_name in sys.modules
AssertionError`
Can you help me troubleshoot this?
	</description>
	<comments>
		<comment id='1' author='moonj94' date='2020-12-11T05:49:41Z'>
		&lt;denchmark-link:https://github.com/moonj94&gt;@moonj94&lt;/denchmark-link&gt;

Can you please provide colab link or simple standalone code with supporting files to reproduce the issue in our environment. It helps us in localizing the issue faster. Thanks!
		</comment>
		<comment id='2' author='moonj94' date='2020-12-11T14:39:23Z'>
		I don't have a colab link but here is my code snippet:
F1,D,F2,KL=8,2,16,9
model = EEGNet(nb_classes = 3, Chans = 64, Samples = 128,  dropoutRate = 0.5, kernLength = KL, F1 = F1, D = D, F2 = F2,  dropoutType = 'Dropout')
checkpointpath = '/tmp/checkpoint.h5
`checkpointer = ModelCheckpoint(filepath=checkpointpath, verbose=1,
save_best_only=True)
&lt;denchmark-code&gt;        ###############################################################################
        # if the classification task was imbalanced (significantly more trials in one
        # class versus the others) you can assign a weight to each class during 
        # optimization to balance it out. This data is approximately balanced so we 
        # don't need to do this, but is shown here for illustration/completeness. 
        ###############################################################################
        
        # the syntax is {class_1:weight_1, class_2:weight_2,...}. Here just setting
        # the weights all to be 1
        class_weights = {1:1, 2:1, 0:1}#, 3:1}
        
        ################################################################################
        # fit the model. Due to very small sample sizes this can get
        # pretty noisy run-to-run, but most runs should be comparable to xDAWN + 
        # Riemannian geometry classification (below)
        ################################################################################
&lt;/denchmark-code&gt;

&lt;denchmark-h:h1&gt;tf.autograph.set_verbosity(3,True)&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;        fittedModel = model.fit(X_train, Y_train, batch_size = 64, epochs = 200, 
                                verbose = 2, validation_data=(X_validate, Y_validate),
                                callbacks=[checkpointer], class_weight = class_weights)
        
    #     load optimal weights
        model.load_weights(checkpointpath)`
&lt;/denchmark-code&gt;

You're going to need to download EEGnet: &lt;denchmark-link:https://github.com/vlawhern/arl-eegmodels&gt;https://github.com/vlawhern/arl-eegmodels&lt;/denchmark-link&gt;

And I'm afraid I can't share my data due to my workplace policy. But you can probably set X to a random array of 300 x 64 x 128.
numtrials=300 y=random binary array 300x 3 (labels) X_train      = X[0:round(numtrials/2),] Y_train      = y[0:round(numtrials/2)] X_validate   = X[round(numtrials/2):round(numtrials/2)+round(numtrials/4),] Y_validate   = y[round(numtrials/2):round(numtrials/2)+round(numtrials/4)] X_test       = X[round(numtrials/2)+round(numtrials/4):,] Y_test       = y[round(numtrials/2)+round(numtrials/4):]
		</comment>
		<comment id='3' author='moonj94' date='2020-12-11T17:17:54Z'>
		When I open a fresh instance of spyder, this is the message I get:
020-12-11 11:17:24.488103: I tensorflow/core/platform/cpu_feature_guard.cc:145] This TensorFlow binary is optimized with Intel(R) MKL-DNN to use the following CPU instructions in performance critical operations:  SSE4.1 SSE4.2 AVX AVX2 FMA To enable them in non-MKL-DNN operations, rebuild TensorFlow with the appropriate compiler flags. 2020-12-11 11:17:24.488508: I tensorflow/core/common_runtime/process_util.cc:115] Creating new thread pool with default inter op setting: 12. Tune using inter_op_parallelism_threads for best performance. Train on 150 samples, validate on 75 samples Epoch 1/300
But after I do control+c to stop the code, it gives me the warnings stated above.
		</comment>
		<comment id='4' author='moonj94' date='2020-12-14T23:31:21Z'>
		Hi &lt;denchmark-link:https://github.com/moonj94&gt;@moonj94&lt;/denchmark-link&gt;
 you said that you see the warnings when you do control+c. What happens if you don't stop the code? Does it run?
Additionally, please provide your code with the proper indentation and as close to reproducible as possible. This helps us to troubleshoot and debug quicker. Thanks.
		</comment>
		<comment id='5' author='moonj94' date='2020-12-15T22:52:56Z'>
		Yeah so it runs properly if I don't do control+c.
		</comment>
		<comment id='6' author='moonj94' date='2020-12-16T22:34:53Z'>
		So to summarize, you do not see this warning every time you run the code? It only occurs sometimes. And when you don't see the warning, the code runs properly. Is that correct?
Additionally, please provide your code with the proper indentation and as close to reproducible as possible. Without this, it is difficult for us to troubleshoot.
		</comment>
		<comment id='7' author='moonj94' date='2020-12-23T23:33:52Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='8' author='moonj94' date='2020-12-30T23:55:37Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='9' author='moonj94' date='2020-12-30T23:55:39Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/45584&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/45584&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>