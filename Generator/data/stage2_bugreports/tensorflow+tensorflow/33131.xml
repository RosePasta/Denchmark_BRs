<bug id='33131' author='aohan237' open_date='2019-10-08T03:54:54Z' closed_time='2019-10-25T02:15:07Z'>
	<summary>how to assign value to a EagerTensor slice? ----'tensorflow.python.framework.ops.EagerTensor' object does not support item assignment</summary>
	<description>
as in numpy or pytorch ,we can do someting like this, but how to do it with tf2.0.
the following code will raise exception as :
'tensorflow.python.framework.ops.EagerTensor' object does not support item assignment
prediction[:,:,0]=tf.math.sigmoid(prediction[:,:,0])
	</description>
	<comments>
		<comment id='1' author='aohan237' date='2019-10-09T09:21:14Z'>
		&lt;denchmark-link:https://github.com/aohan237&gt;@aohan237&lt;/denchmark-link&gt;
 ,
Thanks for reporting the issue
Can you share a simple and standalone code to reproduce the issue?
		</comment>
		<comment id='2' author='aohan237' date='2019-10-09T09:38:31Z'>
		&lt;denchmark-link:https://github.com/oanush&gt;@oanush&lt;/denchmark-link&gt;

sure.
&lt;denchmark-code&gt;import tensorflow as tf
bb=tf.ones([3,3,3])
bb[:,:,1]=bb[:,:,1]*2
&lt;/denchmark-code&gt;

my solution is to change tensor to variable,then finish the ops, convert to tensor.
but it stucks in the process of changing tensor to variable, when in real model
		</comment>
		<comment id='3' author='aohan237' date='2019-10-11T12:58:00Z'>
		Could reproduce the error with TF Version 2.0. Here is the &lt;denchmark-link:https://colab.sandbox.google.com/gist/rmothukuru/e3131ae96e71d1b1ba7f9e325ce23117/33131.ipynb&gt;Gist&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='4' author='aohan237' date='2019-10-23T00:28:01Z'>
		&lt;denchmark-link:https://github.com/aohan237&gt;@aohan237&lt;/denchmark-link&gt;
  TensorFlow tensor object is not , so you cannot use it on the left-hand side of an assignment. You can refer to the following &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/14132#issuecomment-483002522&gt;comment&lt;/denchmark-link&gt;
 and it should help you in solving your problem.
		</comment>
		<comment id='5' author='aohan237' date='2019-10-23T02:38:41Z'>
		&lt;denchmark-link:https://github.com/gowthamkpr&gt;@gowthamkpr&lt;/denchmark-link&gt;
  thanks.
this is not that pythonic.
i just convert the tf.Tensor to tf.Varible and then back to tf.Tensor  to make this happen.  is it correct?
		</comment>
		<comment id='6' author='aohan237' date='2019-10-24T23:08:48Z'>
		Yes &lt;denchmark-link:https://github.com/aohan237&gt;@aohan237&lt;/denchmark-link&gt;
 Can you please close this issue as it has been resolved. thanks!
		</comment>
		<comment id='7' author='aohan237' date='2019-10-25T02:15:07Z'>
		sureï½žthanks for your help
		</comment>
		<comment id='8' author='aohan237' date='2019-10-25T02:15:09Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33131&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33131&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='aohan237' date='2019-12-27T12:48:03Z'>
		This is a dramatic flaw of the framework that you can't do item assignment
		</comment>
		<comment id='10' author='aohan237' date='2019-12-30T06:37:19Z'>
		&lt;denchmark-link:https://github.com/aliutkus&gt;@aliutkus&lt;/denchmark-link&gt;

sure.  go to pytorch, everythin goes fine
		</comment>
		<comment id='11' author='aohan237' date='2019-12-30T07:29:00Z'>
		yeah, I know... but can't for some reason
		</comment>
		<comment id='12' author='aohan237' date='2020-04-16T02:33:59Z'>
		PyTorch supports this, and TF needs it.
		</comment>
		<comment id='13' author='aohan237' date='2020-05-01T14:40:29Z'>
		still no support for this?
		</comment>
		<comment id='14' author='aohan237' date='2020-05-17T12:21:54Z'>
		still no support for this ?
		</comment>
		<comment id='15' author='aohan237' date='2020-05-17T13:40:37Z'>
		no it's not
you need to use tensorflow.tensor_scatter_nd_update, it's so much cooler
		</comment>
		<comment id='16' author='aohan237' date='2020-06-04T15:32:27Z'>
		For lack of a good solution on this (I had posted an &lt;denchmark-link:https://stackoverflow.com/questions/62092147/how-to-efficiently-assign-to-a-slice-of-a-tensor-in-tensorflow&gt;SO question about this topic&lt;/denchmark-link&gt;
), I decided to create my own module for tensor slice assignment using . I found it useful to have a separate module for this given how using  can be such a pain at times with all the meshgrid and reshaping going on.
You can find it &lt;denchmark-link:https://github.com/zaccharieramzi/tf-slice-assign&gt;here&lt;/denchmark-link&gt;
 and install it with .
If you try it out don't hesitate to give me feedback on it (PRs or Issues welcome). Ideally once it's well tested and benchmarked it could go directly in the TensorFlow core (if not too slow) so noone would have to use a separate module for this which would be ridiculous in the long run.
		</comment>
		<comment id='17' author='aohan237' date='2020-06-18T17:40:36Z'>
		I really think this should be addressed.
		</comment>
		<comment id='18' author='aohan237' date='2020-06-25T16:51:58Z'>
		You can do this:
&lt;denchmark-code&gt;import tensorflow as tf 
import numpy as np

input_shape = (1,100,4)

x = np.zeros(input_shape)
x[:,0] = np.array([1,2,3,4])

x = tf.Variable(x)
print(x)
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;&lt;tf.Variable 'Variable:0' shape=(1, 100, 4) dtype=float64, numpy=
array([[[1., 2., 3., 4.],
        [0., 0., 0., 0.],
....................
....................
....................
&lt;/denchmark-code&gt;

		</comment>
		<comment id='19' author='aohan237' date='2020-06-25T19:56:28Z'>
		&lt;denchmark-link:https://github.com/MinaGabriel&gt;@MinaGabriel&lt;/denchmark-link&gt;
 this is a fairly good solution in some situations but sometimes you just need to assign to a tensor not a variable, hence why people are requesting this feature.
		</comment>
		<comment id='20' author='aohan237' date='2020-07-27T14:55:36Z'>
		
no it's not
you need to use tensorflow.tensor_scatter_nd_update, it's so much cooler

&lt;denchmark-link:https://github.com/aliutkus&gt;@aliutkus&lt;/denchmark-link&gt;
  I haven't used  and currently I'm trying to figure it out but I'm running into some errors which I'm unable to resolve. How would this   in numpy look like using ?
		</comment>
		<comment id='21' author='aohan237' date='2020-08-27T07:06:28Z'>
		Here's a small snippet that I used to get around with the problem. It's bad I know
queue = tf.Variable(queue)
queue[i, bs:].assign(queue[i, :-bs])
queue[i, :bs].assign(projection[crop_id * bs: (crop_id + 1) * bs])
queue = tf.convert_to_tensor(queue)
It's exactly the snippet I had used so there are some rough edges.
		</comment>
		<comment id='22' author='aohan237' date='2020-09-20T13:57:04Z'>
		Convert it to a numpy array and then you can do whatever you want, like this:
&lt;denchmark-code&gt;x = x.numpy()
x[0][0]  = 1.
model.fit(x, y)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='23' author='aohan237' date='2020-10-02T12:12:57Z'>
		I've found that using &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/TensorArray&gt;TensorArray&lt;/denchmark-link&gt;
 is a good way around this.
There is a good example in the TF docs here about &lt;denchmark-link:https://www.tensorflow.org/guide/function#accumulating_values_in_a_loop&gt;accumulating_values_in_a_loop&lt;/denchmark-link&gt;

basically something like this
&lt;denchmark-code&gt;import tensorflow as tf

@tf.function()
def loop():
    max_len = 10
    dtype = tf.float32
    samples = tf.TensorArray(dtype=dtype, size=max_len, clear_after_read=False)
    for i in tf.range(max_len):
        sample = tf.cast(i**2, dtype=dtype)
        samples = samples.write(i, sample)
    return samples.stack()

print(loop())
# tf.Tensor([ 0.  1.  4.  9. 16. 25. 36. 49. 64. 81.], shape=(10,), dtype=float32)
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>