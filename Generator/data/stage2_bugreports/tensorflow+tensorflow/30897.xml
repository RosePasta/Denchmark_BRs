<bug id='30897' author='ErmiaAzarkhalili' open_date='2019-07-20T08:50:44Z' closed_time='2019-07-24T06:23:50Z'>
	<summary>Inconsistency between using keras and tf.keras</summary>
	<description>
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA
TensorFlow installed from (source or binary): Binary
TensorFlow version: Tensorflow 2
Python version: 3.6.8
Installed using virtualenv? pip? conda?: pip
Bazel version (if compiling from source): NA
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: NA
GPU model and memory: NA

There is inconsistency when using keras or tf.keras to fit the model to the same dataset. As everyone can see, everything is similar in both code except calling layers and other objects from tf.keras or pure Keras. The codes are attached.
I'm absolutely confused! I tried to double-check the code line by line, and everything is the same in both codes, except calling modules from either pure keras or tf.keras.
It is absolutely disappointing to me! Why they would be totally different.
In fact, the codes are the same except that layers call from either keras or tf.keras; why these models should be such completely different behaviors.
`
&lt;denchmark-h:h1&gt;The modules/layers can be called from either:&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;from tensorflow.python.keras.layers import (Input, Dense, BatchNormalization, GaussianNoise, 
GaussianDropout)
from tensorflow.python.keras.models import Model
from tensorflow.python.keras.utils import np_utils
from tensorflow.python.keras.callbacks import CSVLogger, History
&lt;/denchmark-code&gt;

Or
&lt;denchmark-code&gt;from keras.layers import Input, Dense, BatchNormalization, GaussianNoise, GaussianDropout
from keras.models import Model
from keras.utils import np_utils
from keras.callbacks import CSVLogger, History
&lt;/denchmark-code&gt;

&lt;denchmark-h:h1&gt;Creating Models: Everything in the models' description is the same.&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;inputs = Input(shape=(19671,), name="inputs")

inputs_0 = BatchNormalization(name="inputs_0")(inputs)

inputs_1 = Dense(1024, activation="linear", name="inputs_1")(inputs_0)

inputs_2 = BatchNormalization(name="inputs_2")(inputs_1)

inputs_3 = Dense(128, activation="softplus", name="inputs_3")(inputs_2)

inputs_4 = BatchNormalization(name="inputs_4")(inputs_3)

encoded = Dense(units=12, activation='relu', name='encoded')(inputs_4)

inputs_5 = Dense(512, activation="softplus", name="inputs_5")(encoded)

decoded_tcga = Dense(units=19671, activation='linear', name="m_rna")(inputs_5)

decoded_micro_rna = Dense(units=2588, activation='linear', name="mi_rna")(inputs_5)

cl_0 = Dense(units=27, activation="softmax", name="cl_tissue")(encoded)

cl_2 = Dense(units=33, activation="softmax", name="cl_disease")(encoded)

scae = Model(inputs=inputs, outputs=[decoded_tcga, decoded_micro_rna, cl_0, cl_2])

scae.compile(optimizer='nadam',
             loss=["mse", "mse", "cosine_proximity", "cosine_proximity"],
             loss_weights=[0.001, 0.001, 0.5, 0.5],
             metrics={"m_rna": ["mse", "mae"],
                      "mi_rna": ["mse", "mae"], "cl_tissue": "acc", "cl_disease": "acc"})

scae
&lt;/denchmark-code&gt;

`
`
&lt;denchmark-h:h1&gt;Loading Datasets (The datasets are too large, about 5.5 GB).&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;local_dataset_folder = 
"/home/ermia/MEGA/PycharmProjects_VSC/TCGA_Full_Version/TCGA/Dataset/"
local_results_folder = 
"/home/ermia/MEGA/PycharmProjects_VSC/TCGA_Full_Version/TCGA/Results/"

from sklearn.preprocessing import LabelEncoder, normalize
import pandas as pd

seed = 2019
np.random.seed(seed=seed)
dataset_folder = local_dataset_folder
df_m_rna_address = dataset_folder + "fpkm.csv"
df_mi_rna_address = dataset_folder + "miRNA.csv"
df_tissue_address = dataset_folder + "tissue.csv"
df_disease_address = dataset_folder + "disease.csv"

df_m_rna = np.loadtxt(df_m_rna_address, delimiter=",")
df_mi_rna = np.loadtxt(df_mi_rna_address, delimiter=",")
df_tissue = np.ravel(pd.DataFrame.as_matrix(pd.read_csv(df_tissue_address, delimiter=",", 
header=None)))
df_disease = np.ravel(pd.DataFrame.as_matrix(pd.read_csv(df_disease_address, delimiter=",", 
header=None)))

df_m_rna = normalize(X=df_m_rna, axis=0, norm="max")
df_mi_rna = normalize(X=df_mi_rna, axis=0, norm="max")

label_encoder_tissue = LabelEncoder()
label_encoder_tissue.fit(df_tissue)
encoded_tissue = label_encoder_tissue.transform(df_tissue)

label_encoder_disease = LabelEncoder()
label_encoder_disease.fit(df_disease)
encoded_disease = label_encoder_disease.transform(df_disease)

categorical_tissue = np_utils.to_categorical(encoded_tissue)
categorical_disease = np_utils.to_categorical(encoded_disease)
m_rna = df_m_rna
mi_rna = df_mi_rna

indices = np.arange(m_rna.shape[0])
indices = indices[0:10750]
np.random.shuffle(indices)

m_rna = m_rna[indices]
mi_rna = mi_rna[indices]

categorical_tissue = categorical_tissue[indices]
categorical_disease = categorical_disease[indices]

m_rna_train = m_rna[0:9750, ]
m_rna_test = m_rna[9750:10750, ]

mi_rna_train = mi_rna[0:9750, ]
mi_rna_test = mi_rna[9750:10750, ]

categorical_tissue_train = categorical_tissue[0:9750, ]
categorical_tissue_test = categorical_tissue[9750:10750, ]

categorical_disease_train = categorical_disease[0:9750, ]
categorical_disease_test = categorical_disease[9750: 10750, ]

print("data loading has just been finished")
print(m_rna.shape, mi_rna.shape, categorical_tissue.shape, categorical_disease.shape)

 batch_size = 64
 nb_epochs = 200
&lt;/denchmark-code&gt;

`
`
&lt;denchmark-h:h1&gt;Fitting Models.&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;scae.fit(m_rna_train, [m_rna_train, mi_rna_train, categorical_tissue_train, categorical_disease_train], 
batch_size=batch_size, epochs=nb_epochs,
      callbacks=[csv_logger, history],
      validation_data=(m_rna_test, [m_rna_test, mi_rna_test, categorical_tissue_test, 
categorical_disease_test]), verbose=2)
&lt;/denchmark-code&gt;

`
The first model is not convergent at all! and the accuracy of subproblems are about 0.
&lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='ErmiaAzarkhalili' date='2019-07-21T03:36:06Z'>
		&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/15831&gt;#15831&lt;/denchmark-link&gt;
 is the same issue!
		</comment>
		<comment id='2' author='ErmiaAzarkhalili' date='2019-07-22T20:50:39Z'>
		Please fill the issue &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/new?template=10-build-installation-issue.md&gt;template&lt;/denchmark-link&gt;
. Could you update them if they are relevant in your case, or leave them as N/A? Along with the template, please provide as many details as possible to find the root cause of the issue. Thanks!
		</comment>
		<comment id='3' author='ErmiaAzarkhalili' date='2019-07-23T14:44:00Z'>
		
Please fill the issue template. Could you update them if they are relevant in your case, or leave them as N/A? Along with the template, please provide as many details as possible to find the root cause of the issue. Thanks!

Hi, Update the template.
		</comment>
		<comment id='4' author='ErmiaAzarkhalili' date='2019-07-23T17:01:41Z'>
		&lt;denchmark-link:https://github.com/ErmiaAzarkhalili&gt;@ErmiaAzarkhalili&lt;/denchmark-link&gt;
 Can you provide a simple standalone code to reproduce the issue? You could use public datasets like mnist, cifar..... Thanks!
		</comment>
		<comment id='5' author='ErmiaAzarkhalili' date='2019-07-23T20:28:03Z'>
		hey guys, I had a similar issue but with native TF and Keras. Are these connected?&lt;denchmark-link:url&gt;https://github.com/tensorflow/tensorflow/issues/30944&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='ErmiaAzarkhalili' date='2019-07-24T06:23:28Z'>
		
@ErmiaAzarkhalili Can you provide a simple standalone code to reproduce the issue? You could use public datasets like mnist, cifar..... Thanks!

I think its due to using of tf.keras.metrics.Accuracy() instead of tf.keras.metrics.CategoricalAccuracy(). Hence, everything is fine now and m,y model converges like a charm.
		</comment>
		<comment id='7' author='ErmiaAzarkhalili' date='2019-07-24T06:23:51Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30897&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30897&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>