<bug id='11124' author='wenkesj' open_date='2017-06-28T23:57:14Z' closed_time='2017-07-02T17:03:46Z'>
	<summary>[iOS] Bug: No OpKernel was registered to support Op 'LessEqual'</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;

Running OS macOS Sierra building for iOS specifically.
&lt;denchmark-code&gt;$ gcc --version
Apple LLVM version 8.1.0 (clang-802.0.42)
Target: x86_64-apple-darwin16.0.0
&lt;/denchmark-code&gt;

TensorFlow version 1.2.0, installed through pip.
&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Case: Build From Source (1.2.0)&lt;/denchmark-h&gt;

Clone the tensorflow repository and build for iOS
cd tensorflow
sh tensorflow/contrib/makefile/build_all_ios.sh
Installs with no problem. Follow the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/ios#creating-your-own-app-from-your-source-libraries&gt;iOS example&lt;/denchmark-link&gt;
.
&lt;denchmark-h:h3&gt;Case: Pod Install (1.1)&lt;/denchmark-h&gt;

Use CocoaPods
pod install TensorFlow-experimental
&lt;denchmark-h:h3&gt;Status Not ok&lt;/denchmark-h&gt;

For both of the cases, the status from loading and creating session from a frozen graph (binary proto- file) is not ok when using LessEqual op in a seq2seq based model.
Note: This example runs without any problems on the python (pip install tensorflow) distribution.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

This error occurs when loading from a .pb context:
// ...else-where
// ReadBinaryProto(tensorflow::Env::Default(), path.fileSystemRepresentation, &amp;graph)
// ...
status = session-&gt;Create(graph);
if (!status.ok()) {
  RCTLogInfo(@"Error adding graph to session: %s", status.error_message().c_str());
  return false;
}
Issue is logged here:
&lt;denchmark-code&gt;No OpKernel was registered to support Op 'LessEqual' with these attrs.  Registered devices: [CPU], Registered kernels:
  &lt;no registered kernels&gt;

	 [[Node: decode/decoder_1/LessEqual = LessEqual[T=DT_INT32](max_target_len, decode/decoder_1/LessEqual/y)]]
&lt;/denchmark-code&gt;

Checked tf_op_files.txt and saw that LessEqual op was not included:
tensorflow/core/kernels/cwise_op_less.cc
+tensorflow/core/kernels/cwise_op_less_equal.cc
tensorflow/core/kernels/cwise_op_isfinite.cc
Maybe this has something to do with it?
Update it seems that this did have something to do with it.
I rebuilt after adding /cwise_op_less_equal.cc to tf_op_files.txt:
$ tensorflow/contrib/makefile/build_all_ios.sh 
I re-froze the graph:
$ python ../tensorflow/tensorflow/python/tools/freeze_graph.py \
--input_graph=./pb/input_graph.pb --input_checkpoint=./save/model \
--output_node_names=predictions --input_binary \
--output_graph=./tmp/frozen.pb
Then optimized...
$ python ../tensorflow/tensorflow/python/tools/optimize_for_inference.py \
--input=./tmp/frozen.pb --output=./tmp/inference.pb \
--input_names=input,target_sequence_length,source_sequence_length,keep_prob \
--output_names=predictions \
--frozen_graph=True
And the issue is no-longer there.
&lt;denchmark-h:h4&gt;BUT&lt;/denchmark-h&gt;

There's still an error, which I assume is on my end.
&lt;denchmark-code&gt;2017-06-30 14:44:18.410032: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseAnd" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT8 } } }') for unknown op: BitwiseAnd
2017-06-30 14:44:18.410300: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseAnd" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT16 } } }') for unknown op: BitwiseAnd
2017-06-30 14:44:18.410421: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseAnd" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT32 } } }') for unknown op: BitwiseAnd
2017-06-30 14:44:18.410519: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseAnd" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT64 } } }') for unknown op: BitwiseAnd
2017-06-30 14:44:18.410641: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseAnd" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_UINT8 } } }') for unknown op: BitwiseAnd
2017-06-30 14:44:18.410740: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseAnd" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_UINT16 } } }') for unknown op: BitwiseAnd
2017-06-30 14:44:18.410833: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseOr" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT8 } } }') for unknown op: BitwiseOr
2017-06-30 14:44:18.410921: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseOr" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT16 } } }') for unknown op: BitwiseOr
2017-06-30 14:44:18.410998: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseOr" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT32 } } }') for unknown op: BitwiseOr
2017-06-30 14:44:18.411104: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseOr" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT64 } } }') for unknown op: BitwiseOr
2017-06-30 14:44:18.411194: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseOr" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_UINT8 } } }') for unknown op: BitwiseOr
2017-06-30 14:44:18.411290: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseOr" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_UINT16 } } }') for unknown op: BitwiseOr
2017-06-30 14:44:18.411408: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseXor" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT8 } } }') for unknown op: BitwiseXor
2017-06-30 14:44:18.411505: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseXor" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT16 } } }') for unknown op: BitwiseXor
2017-06-30 14:44:18.411613: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseXor" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT32 } } }') for unknown op: BitwiseXor
2017-06-30 14:44:18.411706: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseXor" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT64 } } }') for unknown op: BitwiseXor
2017-06-30 14:44:18.411806: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseXor" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_UINT8 } } }') for unknown op: BitwiseXor
2017-06-30 14:44:18.411898: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "BitwiseXor" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_UINT16 } } }') for unknown op: BitwiseXor
2017-06-30 14:44:18.412014: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "Invert" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT8 } } }') for unknown op: Invert
2017-06-30 14:44:18.412106: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "Invert" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT16 } } }') for unknown op: Invert
2017-06-30 14:44:18.412194: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "Invert" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT32 } } }') for unknown op: Invert
2017-06-30 14:44:18.412297: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "Invert" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_INT64 } } }') for unknown op: Invert
2017-06-30 14:44:18.412406: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "Invert" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_UINT8 } } }') for unknown op: Invert
2017-06-30 14:44:18.412499: E tensorflow/core/framework/op_kernel.cc:1141] OpKernel ('op: "Invert" device_type: "CPU" constraint { name: "T" allowed_values { list { type: DT_UINT16 } } }') for unknown op: Invert
...
&lt;/denchmark-code&gt;

And all the way at the bottom...
&lt;denchmark-code&gt;Input 0 of node rnn/Shape_1 was passed float from source_sequence_length:0 incompatible with expected int32.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='wenkesj' date='2017-06-29T17:22:28Z'>
		This may be similar to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/4863&gt;#4863&lt;/denchmark-link&gt;
 but I think some light needs to be shed on it
		</comment>
		<comment id='2' author='wenkesj' date='2017-06-30T18:39:50Z'>
		&lt;denchmark-link:https://github.com/petewarden&gt;@petewarden&lt;/denchmark-link&gt;
, could you confirm that the underlying cause of this problem is the same as that for &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/4863&gt;#4863&lt;/denchmark-link&gt;
 so that  we can dedup? Thank you!
		</comment>
		<comment id='3' author='wenkesj' date='2017-07-02T17:03:46Z'>
		&lt;denchmark-link:https://github.com/ali01&gt;@ali01&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/petewarden&gt;@petewarden&lt;/denchmark-link&gt;
  So, adding the  fixed the first issue, but then  came up and this was due to the use of  ops. Removing these fixed the issue. This time, I skipped the inference optimization step on the frozen graph to be safe and it built and works.
		</comment>
	</comments>
</bug>