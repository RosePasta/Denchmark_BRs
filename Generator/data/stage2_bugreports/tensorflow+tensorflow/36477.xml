<bug id='36477' author='yufengm' open_date='2020-02-05T00:40:34Z' closed_time='2020-03-06T16:39:22Z'>
	<summary>[tf2.1] model saving error for model with Batch Normalization layer and under MirroredStrategy</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Redhat 8.1 (in Docker)
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): TF2.1.0
Python version: 3.6.8
CUDA/cuDNN version: 10.1
GPU model and memory: V100, 32GB

Describe the current behavior
In TF2.1.0, if I build and compile a model with Batch Normalization layer under MirroredStrategy scope, model saving will throw some error like
&lt;denchmark-code&gt;KeyError: "Failed to add concrete function b'__inference_sequential_layer_call_and_return_conditional_losses_869' to object based saved model as it captures tensor tf.Tensor(&lt;unprintable&gt;, shape=(), dtype=resource) which is unsupported or not reachable from root. One reason could be that a stateful object or a variable that the function depends on is not assigned to an attribute of the serialized trackable object (see SaveTest.test_captures_unreachable_variable)."
&lt;/denchmark-code&gt;

I have tested with tf2.0.0 and this seems to be fine .
Code to reproduce the issue
import tensorflow as tf

def build_and_compile_model():
    
    input = tf.keras.Input((20,))
    x = tf.keras.layers.BatchNormalization()(input)
    y = tf.keras.layers.Dense(2)(x)
    
    model = tf.keras.Model(inputs=input, outputs=y)
    
    model.compile(
        loss=tf.keras.losses.sparse_categorical_crossentropy,
        optimizer=tf.keras.optimizers.SGD(learning_rate=0.001),
        metrics=['accuracy'])
    
    return model

strategy = tf.distribute.MirroredStrategy()
with strategy.scope():
    model = build_and_compile_model()
model.save('test', save_format='tf')
Other info / logs
Traceback logs as follows:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
/tmp/site-packages/tensorflow_core/python/saved_model/function_serialization.py in serialize_concrete_function(concrete_function, node_ids, coder)
     53     for capture in concrete_function.captured_inputs:
---&gt; 54       bound_inputs.append(node_ids[capture])
     55   except KeyError:

/tmp/site-packages/tensorflow_core/python/util/object_identity.py in __getitem__(self, key)
    131   def __getitem__(self, key):
--&gt; 132     return self._storage[self._wrap_key(key)]
    133 

KeyError: &lt;_ObjectIdentityWrapper wrapping &lt;tf.Tensor: shape=(), dtype=resource, numpy=&lt;unprintable&gt;&gt;&gt;

During handling of the above exception, another exception occurred:

KeyError                                  Traceback (most recent call last)
&lt;ipython-input-13-a7ec70c505d2&gt; in &lt;module&gt;()
----&gt; 1 model.save('test10', save_format='tf')

/tmp/site-packages/tensorflow_core/python/keras/engine/network.py in save(self, filepath, overwrite, include_optimizer, save_format, signatures, options)
   1006     """
   1007     save.save_model(self, filepath, overwrite, include_optimizer, save_format,
-&gt; 1008                     signatures, options)
   1009 
   1010   def save_weights(self, filepath, overwrite=True, save_format=None):

/tmp/site-packages/tensorflow_core/python/keras/saving/save.py in save_model(model, filepath, overwrite, include_optimizer, save_format, signatures, options)
    113   else:
    114     saved_model_save.save(model, filepath, overwrite, include_optimizer,
--&gt; 115                           signatures, options)
    116 
    117 

/tmp/site-packages/tensorflow_core/python/keras/saving/saved_model/save.py in save(model, filepath, overwrite, include_optimizer, signatures, options)
     76     # we use the default replica context here.
     77     with distribution_strategy_context._get_default_replica_context():  # pylint: disable=protected-access
---&gt; 78       save_lib.save(model, filepath, signatures, options)
     79 
     80   if not include_optimizer:

/tmp/site-packages/tensorflow_core/python/saved_model/save.py in save(obj, export_dir, signatures, options)
    921       compat.as_str(constants.SAVED_MODEL_FILENAME_PB))
    922   object_graph_proto = _serialize_object_graph(
--&gt; 923       saveable_view, asset_info.asset_index)
    924   meta_graph_def.object_graph_def.CopyFrom(object_graph_proto)
    925 

/tmp/site-packages/tensorflow_core/python/saved_model/save.py in _serialize_object_graph(saveable_view, asset_file_def_index)
    645   for concrete_function in saveable_view.concrete_functions:
    646     serialized = function_serialization.serialize_concrete_function(
--&gt; 647         concrete_function, saveable_view.captured_tensor_node_ids, coder)
    648     if serialized is not None:
    649       proto.concrete_functions[concrete_function.name].CopyFrom(

/tmp/site-packages/tensorflow_core/python/saved_model/function_serialization.py in serialize_concrete_function(concrete_function, node_ids, coder)
     61         "trackable object "
     62         "(see SaveTest.test_captures_unreachable_variable)."
---&gt; 63         % (concrete_function.name, capture))
     64   concrete_function_proto = saved_object_graph_pb2.SavedConcreteFunction()
     65   structured_outputs = func_graph_module.convert_structure_to_signature(

KeyError: "Failed to add concrete function b'__inference_sequential_1_layer_call_and_return_conditional_losses_1937' to object based saved model as it captures tensor tf.Tensor(&lt;unprintable&gt;, shape=(), dtype=resource) which is unsupported or not reachable from root. One reason could be that a stateful object or a variable that the function depends on is not assigned to an attribute of the serialized trackable object (see SaveTest.test_captures_unreachable_variable)."
&lt;/denchmark-code&gt;

Thanks so much for your time!
	</description>
	<comments>
		<comment id='1' author='yufengm' date='2020-02-06T02:40:31Z'>
		Thanks for reporting the issue and providing a small reproducible example. I checked that the issue is a regression in 2.1, but is already fixed in nightly.
		</comment>
		<comment id='2' author='yufengm' date='2020-03-03T15:24:02Z'>
		I've tested the nightly docker image, but I still get the error: tensorflow/tensorflow:nightly-gpu-py3
&lt;denchmark-code&gt;KeyError: "Failed to add concrete function b'__inference_model_layer_call_and_return_conditional_losses_2786225' 
to object based saved model as it captures tensor tf.Tensor(&lt;unprintable&gt;, shape=(), dtype=resource)
which is unsupported or not reachable from root.  One reason could be that a stateful object or a
variable that the function depends on is not assigned to an attribute of the serialized trackable 
object (see SaveTest.test_captures_unreachable_variable)."

&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='yufengm' date='2020-03-05T08:32:25Z'>
		I got the same as well.
I can model.save() using one gpu; but error comes under distributed training with mirrored stategy
		</comment>
		<comment id='4' author='yufengm' date='2020-03-05T08:42:54Z'>
		Yes, I have verified.
TF2.0.0 could save the model
TF2.1.0 has an error like the post above
		</comment>
		<comment id='5' author='yufengm' date='2020-03-06T06:22:05Z'>
		Hi, Yufeng
Please use TF2.2, it's a nightly version.
		</comment>
		<comment id='6' author='yufengm' date='2020-03-06T06:27:32Z'>
		
Hi, Yufeng
Please use TF2.2, it's a nightly version.

Yeah. I've tested that w/ the nightly version on colab and it is working. Thanks. @JiayuanSternLi
But I'm not sure why &lt;denchmark-link:https://github.com/jonyvp&gt;@jonyvp&lt;/denchmark-link&gt;
 still got the error w/ the nightly version.
		</comment>
		<comment id='7' author='yufengm' date='2020-03-06T10:01:57Z'>
		I can confirm it works with the latest nightly version.
		</comment>
		<comment id='8' author='yufengm' date='2020-03-06T16:39:24Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36477&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36477&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>