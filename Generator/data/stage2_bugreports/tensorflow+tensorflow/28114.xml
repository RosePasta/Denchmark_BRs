<bug id='28114' author='shahidhs-ibm' open_date='2019-04-24T15:26:30Z' closed_time='2019-05-09T05:25:30Z'>
	<summary>For ConcatV2, `axis` really require int64 support?</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04, 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA
TensorFlow installed from (source or binary):  source
TensorFlow version (use command below): 0.12.0
Python version: 2.7.15rc1
Bazel version (if compiling from source): 0.15.0
GCC/Compiler version (if compiling from source): 7.3.0
CUDA/cuDNN version: NA
GPU model and memory: NA

Describe the current behavior
The testConcatAxisType test in concat_op_test is failing on an assertion for s390x:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/root/.cache/bazel/_bazel_root/87c06bad5aec2f21ec96b7253de551e8/execroot/org_tensorflow/bazel-out/s390x-opt/bin/tensorflow/python/kernel_tests/concat_op_test.runfiles/org_tensorflow/tensorflow/python/kernel_tests/concat_op_test.py", line 621, in testConcatAxisType
    self.assertEqual([2, 6], c.get_shape().as_list())
AssertionError: Lists differ: [2, 6] != [4, 3]
&lt;/denchmark-code&gt;

Describe the expected behavior
Assert values should match.
Code to reproduce the issue
On Intel:
&lt;denchmark-code&gt;&gt;&gt;&gt; from __future__ import absolute_import
&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import tensorflow as tf
&gt;&gt;&gt; from tensorflow.python.framework import constant_op
&gt;&gt;&gt; from tensorflow.python.framework import dtypes
&gt;&gt;&gt; from tensorflow.python.ops import gen_array_ops
&gt;&gt;&gt;
&gt;&gt;&gt; t1 = [[1, 2, 3], [4, 5, 6]]
&gt;&gt;&gt; t2 = [[7, 8, 9], [10, 11, 12]]
&gt;&gt;&gt;
&gt;&gt;&gt; c = constant_op.constant(1, dtype=dtypes.int32)
&gt;&gt;&gt; z = gen_array_ops.concat_v2([t1, t2], c)
&gt;&gt;&gt; z
&lt;tf.Tensor 'ConcatV2_2:0' shape=(2, 6) dtype=int32&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; c = constant_op.constant(1, dtype=dtypes.int64)
&gt;&gt;&gt; z = gen_array_ops.concat_v2([t1, t2], c)
&gt;&gt;&gt; z
&lt;tf.Tensor 'ConcatV2_3:0' shape=(2, 6) dtype=int32&gt;
&gt;&gt;&gt;
&lt;/denchmark-code&gt;

On s390x:
&lt;denchmark-code&gt;&gt;&gt;&gt; from __future__ import absolute_import
&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import tensorflow as tf
&gt;&gt;&gt; from tensorflow.python.framework import constant_op
&gt;&gt;&gt; from tensorflow.python.framework import dtypes
&gt;&gt;&gt; from tensorflow.python.ops import gen_array_ops
&gt;&gt;&gt;
&gt;&gt;&gt; t1 = [[1, 2, 3], [4, 5, 6]]
&gt;&gt;&gt; t2 = [[7, 8, 9], [10, 11, 12]]
&gt;&gt;&gt;
&gt;&gt;&gt; c = constant_op.constant(1, dtype=dtypes.int32)
&gt;&gt;&gt; z = gen_array_ops.concat_v2([t1, t2], c)
&gt;&gt;&gt; z
&lt;tf.Tensor 'ConcatV2_2:0' shape=(2, 6) dtype=int32&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; c = constant_op.constant(1, dtype=dtypes.int64)
&gt;&gt;&gt; z = gen_array_ops.concat_v2([t1, t2], c)
&gt;&gt;&gt; z
&lt;tf.Tensor 'ConcatV2_3:0' shape=(4, 3) dtype=int32&gt;
&gt;&gt;&gt;
&lt;/denchmark-code&gt;

Other info / logs
From above logs we can see that when we pass a constant (axis) of int64 type to ConcatV2, we get different results on s390x which causes assertion failure.
After searching the historical records, I found this PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/14251&gt;#14251&lt;/denchmark-link&gt;
 which has introduced this test case. However when I scanned the TensorFlow code for checking how the  operations work, I found that it deals mostly with int32 type.
Getting different results on s390x for 32 Vs 64 bit data types is nothing new. We have handled couple of cases in issue &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/11431&gt;#11431&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/14017&gt;#14017&lt;/denchmark-link&gt;
 and it happens because of NumPy's different behavior on Intel Vs Z (PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/12963&gt;#12963&lt;/denchmark-link&gt;
) . As my code understanding with  is different, I am curious to understand if we really need to process int64 type of axis (is it a real time use case?) or its just added to fill the gap between  supported types Vs its kernel implementation?
I might be wrong but want to be sure that I proceed to find fix for the right thing. Please check and confirm.
	</description>
	<comments>
		<comment id='1' author='shahidhs-ibm' date='2019-05-08T21:13:53Z'>
		&lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/aselle&gt;@aselle&lt;/denchmark-link&gt;
 do you have any ideas?
		</comment>
		<comment id='2' author='shahidhs-ibm' date='2019-05-09T05:25:29Z'>
		I think this was fixed by the change to concat_op.cc in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/2d0531d72c7dcbb0e149cafdd3a16ee8c3ff357a&gt;2d0531d&lt;/denchmark-link&gt;
, which added &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blame/f4815551dc19b2149a70f20dba5a6c043e627a5b/tensorflow/core/kernels/concat_op.cc#L65-L87&gt;these lines&lt;/denchmark-link&gt;
. That change isn't part of TensorFlow 0.12.0, but it looks like it became available with 1.8.0.
		</comment>
		<comment id='3' author='shahidhs-ibm' date='2019-05-09T05:25:31Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28114&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28114&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='shahidhs-ibm' date='2019-05-23T16:12:48Z'>
		&lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
 The concat_op_test is failing for the architecture I am working on and we are hitting the same numpy bug which we encountered in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/12963&gt;#12963&lt;/denchmark-link&gt;
. In this issue I just wanted to check if we can skip int64 support for my architecture if its not that critical.
If I change the dtype to int32 in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/tensor_util.py#L376&gt;make_tensor_proto&lt;/denchmark-link&gt;
, the test passes for us. I need to add following code after &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/tensor_util.py#L485&gt;line&lt;/denchmark-link&gt;
:
&lt;denchmark-code&gt;  if nparray.dtype == np.int64:
    nparray = np.array(values, dtype=np.int32)
    dtype = dtypes.int32
&lt;/denchmark-code&gt;

Please suggest if you are aware of any better approach to achieve this. Thanks in advance :)
		</comment>
	</comments>
</bug>