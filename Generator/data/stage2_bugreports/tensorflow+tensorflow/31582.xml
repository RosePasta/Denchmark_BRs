<bug id='31582' author='seanpmorgan' open_date='2019-08-13T13:28:25Z' closed_time='2019-08-23T01:25:49Z'>
	<summary>[TF2] Unhashable variables breaks ExponentialMovingAverage</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): tf-nightly-2.0-preview


As described in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/2e1214094b6a78ab72d39051c7fd6e86c682ddf4#diff-ae1a8f7b66539f000615a4ab7e4b2151&gt;2e12140#diff-ae1a8f7b66539f000615a4ab7e4b2151&lt;/denchmark-link&gt;

Variables are no longer hashable in TF2. This causes the dictionary tracking of variables to break:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/moving_averages.py#L371&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/moving_averages.py#L371&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/moving_averages.py#L448&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/moving_averages.py#L448&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/moving_averages.py#L462&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/moving_averages.py#L462&lt;/denchmark-link&gt;

Describe the expected behavior
We can likely just keep the variable names as the dictionary keys.
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf

foo = tf.Variable(3.0)
ema = tf.train.ExponentialMovingAverage(0.1)
decayed_foo = ema.apply([foo])
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;Traceback (most recent call last):
  File "break.py", line 5, in &lt;module&gt;
    decayed_a = ema.apply([a])
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/training/moving_averages.py", line 425, in apply
    if var not in self._averages:
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/ops/variables.py", line 1085, in __hash__
    raise TypeError("Variable is unhashable if Tensor equality is enabled. "
TypeError: Variable is unhashable if Tensor equality is enabled. Instead, use tensor.experimental_ref() as t
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='seanpmorgan' date='2019-08-16T14:40:05Z'>
		Since I added batchnorm to model, MAE assign_average_vars()  broke with this error.
&lt;denchmark-code&gt; File "/home/dmitry/.vscode/extensions/ms-python.python-2019.8.30787/pythonFiles/lib/python/ptvsd/__main__.py", line 316, in run_file
    runpy.run_path(target, run_name='__main__')
  File "/home/dmitry/anaconda3/envs/python36/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/home/dmitry/anaconda3/envs/python36/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/home/dmitry/anaconda3/envs/python36/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/dmitry/PythonProjects/mae_test/mae_test.py", line 65, in &lt;module&gt;
    optimizer.assign_average_vars(model.variables)
  File "/home/dmitry/anaconda3/envs/python36/lib/python3.6/site-packages/tensorflow_addons/optimizers/moving_average.py", line 119, in assign_average_vars
    assign = tf.group([v.assign(self._ema.average(v)) for v in var_list])
  File "/home/dmitry/anaconda3/envs/python36/lib/python3.6/site-packages/tensorflow_addons/optimizers/moving_average.py", line 119, in &lt;listcomp&gt;
    assign = tf.group([v.assign(self._ema.average(v)) for v in var_list])
  File "/home/dmitry/anaconda3/envs/python36/lib/python3.6/site-packages/tensorflow/python/ops/resource_variable_ops.py", line 1144, in assign
    value_tensor = ops.convert_to_tensor(value, dtype=self.dtype)
  File "/home/dmitry/anaconda3/envs/python36/lib/python3.6/site-packages/tensorflow/python/framework/ops.py", line 1100, in convert_to_tensor
    return convert_to_tensor_v2(value, dtype, preferred_dtype, name)
  File "/home/dmitry/anaconda3/envs/python36/lib/python3.6/site-packages/tensorflow/python/framework/ops.py", line 1158, in convert_to_tensor_v2
    as_ref=False)
  File "/home/dmitry/anaconda3/envs/python36/lib/python3.6/site-packages/tensorflow/python/framework/ops.py", line 1237, in internal_convert_to_tensor
    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
  File "/home/dmitry/anaconda3/envs/python36/lib/python3.6/site-packages/tensorflow/python/framework/constant_op.py", line 305, in _constant_tensor_conversion_function
    return constant(v, dtype=dtype, name=name)
  File "/home/dmitry/anaconda3/envs/python36/lib/python3.6/site-packages/tensorflow/python/framework/constant_op.py", line 246, in constant
    allow_broadcast=True)
  File "/home/dmitry/anaconda3/envs/python36/lib/python3.6/site-packages/tensorflow/python/framework/constant_op.py", line 254, in _constant_impl
    t = convert_to_eager_tensor(value, ctx, dtype)
  File "/home/dmitry/anaconda3/envs/python36/lib/python3.6/site-packages/tensorflow/python/framework/constant_op.py", line 115, in convert_to_eager_tensor
    return ops.EagerTensor(value, handle, device, dtype)
ValueError: Attempt to convert a value (None) with an unsupported type (&lt;class 'NoneType'&gt;) to a Tensor.
&lt;/denchmark-code&gt;

Code to reproduce error:
&lt;denchmark-code&gt;import tensorflow as tf
import tensorflow_addons as tfa
import numpy as np


mnist = tf.keras.datasets.mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = np.expand_dims(x_train, -1) / 255.0, np.expand_dims(x_test, -1) / 255.0


model = tf.keras.models.Sequential(
    [
        tf.keras.layers.Conv2D(
            16, (3, 3),
            kernel_initializer=tf.keras.initializers.he_uniform(),
            activation='relu', input_shape=(28, 28, 1)),
        tf.keras.layers.BatchNormalization(),
        tf.keras.layers.Conv2D(
            32, (3, 3),
            (2, 2),
            kernel_initializer=tf.keras.initializers.he_uniform(),
            activation='relu'),
        tf.keras.layers.BatchNormalization(),
        tf.keras.layers.Conv2D(
            32, (3, 3),
            kernel_initializer=tf.keras.initializers.he_uniform(),
            activation='relu'),
        tf.keras.layers.BatchNormalization(),
        tf.keras.layers.Conv2D(
            64, (3, 3),
            (2, 2),
            kernel_initializer=tf.keras.initializers.he_uniform(),
            activation='relu'),
        tf.keras.layers.BatchNormalization(),
        tf.keras.layers.Conv2D(
            64, (3, 3),
            kernel_initializer=tf.keras.initializers.he_uniform(),
            activation='relu'),
        tf.keras.layers.BatchNormalization(),
        tf.keras.layers.GlobalAvgPool2D(),
        tf.keras.layers.Dense(
            64, kernel_initializer=tf.keras.initializers.he_uniform(),
            activation='relu'),
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.Dense(
            10, kernel_initializer=tf.keras.initializers.he_uniform(),
            activation='softmax')
    ]
)

optimizer = tfa.optimizers.LazyAdam(decay=1e-4)
optimizer = tfa.optimizers.MovingAverage(optimizer)

model.compile(optimizer=optimizer,
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

model.fit(x_train, y_train, batch_size=64, epochs=10)
print("Test metrics before mae:")
model.evaluate(x_test, y_test)

optimizer.assign_average_vars(model.variables)
print("Test metrics after mae:")
model.evaluate(x_test, y_test)
model.save('./model.h5')

&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='seanpmorgan' date='2019-08-22T02:19:30Z'>
		Sean, I think the bug has been fixed by &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/dc3534c6a502d2830634f51e08de507163aac952&gt;dc3534c&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='seanpmorgan' date='2019-08-23T01:25:50Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=31582&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=31582&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='seanpmorgan' date='2019-09-01T16:47:16Z'>
		I have the same error still (tried fresh install of tfp 0.7 and even tfp 0.6), in my case it occurs at
tfd.MultivariateNormalDiag(loc, scale).sample()

/home/pycharm_project/VAE/vae_tf2.py:636 compute_loss  *
    latent_code = posterior.sample()
/usr/local/lib/python3.5/dist-packages/tensorflow_probability/python/distributions/distribution.py:840 sample
    return self._call_sample_n(sample_shape, seed, name, **kwargs)
/usr/local/lib/python3.5/dist-packages/tensorflow_probability/python/distributions/transformed_distribution.py:391 _call_sample_n
    y = self.bijector.forward(x, **bijector_kwargs)
/usr/local/lib/python3.5/dist-packages/tensorflow_probability/python/bijectors/bijector.py:933 forward
    return self._call_forward(x, name, **kwargs)
/usr/local/lib/python3.5/dist-packages/tensorflow_probability/python/bijectors/bijector.py:904 _call_forward
    mapping = self._lookup(x=x, kwargs=kwargs)
/usr/local/lib/python3.5/dist-packages/tensorflow_probability/python/bijectors/bijector.py:1343 _lookup
    mapping = self._from_x[x].get(subkey, mapping).merge(x=x)
/usr/local/lib/python3.5/dist-packages/tensorflow_probability/python/bijectors/bijector.py:151 __getitem__
    return super(WeakKeyDefaultDict, self).__getitem__(weak_key)
/usr/local/lib/python3.5/dist-packages/tensorflow_probability/python/bijectors/bijector.py:181 __hash__
    return hash(x)
/usr/local/lib/python3.5/dist-packages/tensorflow_core/python/framework/ops.py:713 __hash__
    raise TypeError("Tensor is unhashable if Tensor equality is enabled. "

TypeError: Tensor is unhashable if Tensor equality is enabled. Instead, use tensor.experimental_ref() as the key.


		</comment>
	</comments>
</bug>