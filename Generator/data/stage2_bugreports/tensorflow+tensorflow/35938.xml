<bug id='35938' author='st--' open_date='2020-01-16T12:24:28Z' closed_time='2020-01-22T16:59:45Z'>
	<summary>tf.cast on native python float to dtype=tf.float64 leads to loss of precision</summary>
	<description>

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no
OS Platform and Distribution: Linux Ubuntu 18.04
TensorFlow installed from (source or binary): binary (pip install)
TensorFlow version (use command below): v2.1.0-rc2-17-ge5bf8de 2.1.0, v2.0.0-rc2-26-g64c3d38 2.0.0
Python version: 3.7

Describe the current behavior
tf.cast() on a python float (e.g, a literal float constant, not a numpy float/array type) does an implicit conversion to the TensorFlow default dtype tf.float32, which can result in loss of precision when intending to cast to tf.float64:
&gt;&gt;&gt; tf.cast(0.2, tf.float64)
&lt;tf.Tensor: id=37, shape=(), dtype=float64, numpy=0.20000000298023224&gt;
Describe the expected behavior
&gt;&gt;&gt; tf.cast(0.2, tf.float64)
&lt;tf.Tensor: id=37, shape=(), dtype=float64, numpy=0.2&gt;
Code to reproduce the issue
See above.

This was discovered as a bug in GPflow, which we built a work-around for in &lt;denchmark-link:https://github.com/GPflow/GPflow/pull/1211&gt;GPflow/GPflow#1211&lt;/denchmark-link&gt;
 - but this is a pervading issue, and it would be good to fix this upstream instead of having to write and use a  everywhere just to work around having potentially passed in a python float.
	</description>
	<comments>
		<comment id='1' author='st--' date='2020-01-16T13:57:38Z'>
		The simple workaround would be to add
    if not tf.is_tensor(value):
        return tf.convert_to_tensor(value, dtype)
to the beginning of the definition of tf.cast().
This is related to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/26033&gt;#26033&lt;/denchmark-link&gt;
 - not having to support our own "default dtype" implementation would remove the need for a lot of the calls to tf.cast.
		</comment>
		<comment id='2' author='st--' date='2020-01-17T02:48:11Z'>
		Added PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/35961&gt;#35961&lt;/denchmark-link&gt;
 for the fix.
		</comment>
		<comment id='3' author='st--' date='2020-01-22T16:59:47Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35938&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35938&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>