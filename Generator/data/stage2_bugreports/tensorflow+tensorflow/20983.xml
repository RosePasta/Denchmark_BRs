<bug id='20983' author='sabhiram' open_date='2018-07-20T00:52:20Z' closed_time='2018-08-10T17:47:15Z'>
	<summary>[Bug] tf.py_func : Bad tensor -&amp;gt; np.array conversion in py_func (return [] with dtype=int64 is returned as dtype=float64)</summary>
	<description>
&lt;denchmark-h:h3&gt;Issue template:&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes (minimal example attached inline)
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OSX 10.12.6
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: Probably
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): ('v1.5.0-0-g37aa430d84', '1.5.0')
Python version: 2.7
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce: python py_func_failure.py

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

This bug occurs when a tf.py_func returns an empty python list [] which is intended to be a tensor of type tf.int64 (as defined in the Tout= of the py_func).
In the ops.script_ops.py the _convert static method is unable to tell the numpy dtype of the incoming tensor when it is an empty list.  This causes the _convert method to execute a np.asarray([], dtype=None, order="C") which gives us a array([], dtype=float64) instead of a array([], dtype=int64) which then does not agree with the output tensor description in the py_func.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

See gist here for the example that reproduces this issue: &lt;denchmark-link:https://gist.githubusercontent.com/sabhiram/3f5eaf7e566ef9aefb3ae6e5b8d2edb0/raw/182ab6bc72b5b7b13fd55964c72030cbc53f7cb3/py_func_failure.py&gt;https://gist.githubusercontent.com/sabhiram/3f5eaf7e566ef9aefb3ae6e5b8d2edb0/raw/182ab6bc72b5b7b13fd55964c72030cbc53f7cb3/py_func_failure.py&lt;/denchmark-link&gt;

Inlined here:
&lt;denchmark-code&gt;import tensorflow as tf

def test_func(x):
    """ Builds a list of ints with length `x`.
    """
    return [i for i in range(x)],


def main():
    t0 = tf.constant(0, dtype=tf.int64)
    t0 = tf.py_func(test_func, [t0], tf.int64)

    t1 = tf.constant(1, dtype=tf.int64)
    t1 = tf.py_func(test_func, [t1], tf.int64)

    with tf.Session() as sess:
        sess.run(t1)            # OK
        sess.run(t0)            # 0-th value is double, expects int64

if __name__ == "__main__":
    print(tf.GIT_VERSION, tf.VERSION)
    main()
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='sabhiram' date='2018-07-20T00:57:08Z'>
		For what its worth, I think this would be easy enough to fix in the core.ops.script_ops.py file by keeping track of the tf output types when the py_func gets registered (similar to how EagerFuncs are stored).
Then during graph exec time, after we have results in an array (or scalar) - we can query the Tout list and convert to ndarrays correctly.  I was able to crudely implement this just to unblock my use case.
One other w/a from the client side is to be explicit with the list in the py_func like so:
&lt;denchmark-code&gt;def test_func(x):
    arr = np.array([], dtype=np.int64)
    for i in range(x):
        arr = np.append(arr, i)
    return arr,
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='sabhiram' date='2018-07-22T00:51:14Z'>
		Here is a branch that attempts to address this shortcoming: &lt;denchmark-link:https://github.com/recogni/tensorflow/tree/dev-recogni/bug_20983&gt;https://github.com/recogni/tensorflow/tree/dev-recogni/bug_20983&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='sabhiram' date='2018-08-06T18:51:48Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/shivaniag&gt;@shivaniag&lt;/denchmark-link&gt;
: It has been 13 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='4' author='sabhiram' date='2018-08-06T20:19:48Z'>
		Marking this as contribution welcome, could you submit a PR for this. Thanks.
		</comment>
		<comment id='5' author='sabhiram' date='2018-08-06T22:32:24Z'>
		&lt;denchmark-link:https://github.com/shivaniag&gt;@shivaniag&lt;/denchmark-link&gt;
 - PR submitted and attached to this about 16 days ago :)
See this PR that is awaiting merge once CI is good to go: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/21038&gt;#21038&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='sabhiram' date='2018-08-07T18:41:34Z'>
		Thanks!
		</comment>
	</comments>
</bug>