<bug id='29393' author='llan-ml' open_date='2019-06-04T14:02:21Z' closed_time='2019-06-17T21:49:36Z'>
	<summary>[2.0alpha0 AutoGraph] tf.function does not automatically transform nested class methods</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.0.0alpha0
Python version: 3.6.5

Describe the current behavior
When we define multiple methods for a class and only decorate one of them with @tf.function, the nested methods are not automatically transformed and some errors raise.
Describe the expected behavior
We only need decorate the outermost method.
Code to reproduce the issue
# -*- coding: utf-8 -*-
# @Author  : Lin Lan (ryan.linlan@gmail.com)

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import tensorflow as tf


class Foo(tf.keras.Model):
    def __init__(self):
        super(Foo, self).__init__()
        self.dense = tf.keras.layers.Dense(20)
        self.embeddings = tf.Variable(tf.random.normal((100, 5)), dtype=tf.float32)

    @tf.function
    def call(self, inputs):
        embeddings = tf.nn.embedding_lookup(
            self.embeddings, inputs)
        return self._inner(embeddings)

    # @tf.function
    def _inner(self, embeddings):
        batch = tf.shape(embeddings)[0]
        ta = tf.TensorArray(tf.float32, size=batch)
        for i in tf.range(batch):
            this = self.dense(embeddings[i][tf.newaxis, :])
            ta = ta.write(i, this)
        return ta.stack()


foo = Foo()
res = foo([0, 2, 4, 6, 8])

Other info / logs
TypeError: Tensor objects are only iterable when eager execution is enabled. To iterate over this tensor use tf.map_fn.
Also decorating the method _inner eliminate the error.
	</description>
	<comments>
		<comment id='1' author='llan-ml' date='2019-06-04T14:07:46Z'>
		It took me a lot of time to find this bug (or intended behavior?) from my original code. It would be better to add a warning in the doc of tf.function.
This &lt;denchmark-link:https://www.tensorflow.org/alpha/guide/effective_tf2#refactor_your_code_into_smaller_functions&gt;section&lt;/denchmark-link&gt;
 is confusing given this issue. Also the third paragraph of this &lt;denchmark-link:https://www.tensorflow.org/alpha/guide/autograph#the_tffunction_decorator&gt;section&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='llan-ml' date='2019-06-05T09:21:26Z'>
		Have tried with TF version 2.0.0-alpha on Colab and was able to reproduce the issue as mentioned in the description.
		</comment>
		<comment id='3' author='llan-ml' date='2019-06-05T17:44:57Z'>
		You shouldn't need to decorate self._inner. &lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 why isn't it being caught here?
		</comment>
		<comment id='4' author='llan-ml' date='2019-06-05T17:56:10Z'>
		This is a bug. We'll have it fixed in the nightly soon.
		</comment>
		<comment id='5' author='llan-ml' date='2019-06-15T12:33:03Z'>
		Hi &lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 Any updates regarding to this issue?
		</comment>
		<comment id='6' author='llan-ml' date='2019-06-15T15:41:34Z'>
		Yep! It will likely be fixed today, or sometime next week at the latest.
		</comment>
		<comment id='7' author='llan-ml' date='2019-06-17T21:49:37Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=29393&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=29393&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>