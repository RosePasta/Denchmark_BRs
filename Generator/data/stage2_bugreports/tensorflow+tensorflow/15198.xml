<bug id='15198' author='stecklin' open_date='2017-12-08T02:32:28Z' closed_time='2018-01-15T21:06:34Z'>
	<summary>Missing documentation for using the Dataset API in combination with image summaries</summary>
	<description>
The Dataset API is now the recommended input pipeline, however I am missing some guidance on how to include summaries of my images.
def get_data():
  dataset = FixedLengthRecordDataset(...)
  dataset = dataset.map(parse_dataset, ...)
  if is_training:
    dataset = dataset.map(preprocess_for_train, ...)
  # Do shuffling, batching...
  return dataset

def preprocess_for_train(image, label):
  # Do preprocessing...
  image = tf.image.random_flip_left_right(image)
  # Add summary
  tf.summary.image('preprocessed_image', tf.expand_dims(image, 0))
  return image, label
This is what I would do intuitively, but since map() uses a different thread and therefore a different tf.Graph instance (?), the summaries are lost.
What is the recommended way of adding image summaries when using the Dataset API? I would like to request a comment / example on that in the official docs.
	</description>
	<comments>
		<comment id='1' author='stecklin' date='2017-12-08T08:50:55Z'>
		Hi,
afaik you can run the summary, but only after you created the iterator and fetched the next element:
dataset = get_data(is_training=True)
t_example = dataset.make_one_shot_iterator().get_next()
tf.summary.image('preprocessed_image', t_example['image'])
		</comment>
		<comment id='2' author='stecklin' date='2017-12-08T09:51:38Z'>
		&lt;denchmark-link:https://github.com/marcoadurno&gt;@marcoadurno&lt;/denchmark-link&gt;
 That's true, but it comes with a drawback. Assume the training loop looks like this:
image_batch, label_batch = sess.run(t_example)
_, summary = sess.run([train_op, summary_op], 
                      feed_dict={image: image_batch, label: label_batch})
This will invoke the iterator's get_next twice, once you run t_example and once you request the summary since you introduced a dependency.
		</comment>
		<comment id='3' author='stecklin' date='2017-12-08T14:05:12Z'>
		&lt;denchmark-link:https://github.com/stecklin&gt;@stecklin&lt;/denchmark-link&gt;
 I'm not sure I fully understand the reason why image_batch and label_batch have be be fetched using sess.run to then fed back in using placeholders. If doing so, I think the  should use the  placeholder, same as  does but I struggle to see why mixing the Data api with placeholders.
If things can be shuffled around:
dataset = get_data(is_training=True)
t_example = dataset.make_one_shot_iterator().get_next()
t_logits = infer_fn(t_example['image'])
loss_op = loss_fn(t_example['labels'], t_logits)
train_op = train_fn(loss_op)
summary_op = tf.summary.image('preprocessed_image', t_example['image'])
for i in xrange(n_steps):
  fetches = [loss_op, train_op]
  if i%100:
    fetches += [summary_op]
  sess.run(fetches)
Or alternatively you can use a monitored session and specify summary hooks. But the basic idea is that if you have a canonical training loop there is no reason why summaries can't be written using the Data api.
		</comment>
		<comment id='4' author='stecklin' date='2017-12-09T01:56:05Z'>
		&lt;denchmark-link:https://github.com/MarkDaoust&gt;@MarkDaoust&lt;/denchmark-link&gt;
 maybe we need more docs.
/CC &lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='stecklin' date='2017-12-11T03:26:36Z'>
		&lt;denchmark-link:https://github.com/marcoadurno&gt;@marcoadurno&lt;/denchmark-link&gt;
 Thank you so much for pointing that out. You made me realize that I am not using the  as it is meant to be used, that there is no need for placeholders.
Summaries can be added as you suggested, works like a charm.
		</comment>
		<comment id='6' author='stecklin' date='2018-01-03T07:37:05Z'>
		It has been 14 days with no activity and this issue has an assignee.Please update the label and/or status accordingly.
		</comment>
		<comment id='7' author='stecklin' date='2018-01-03T13:28:45Z'>
		Thanks for sorting that out &lt;denchmark-link:https://github.com/marcoadurno&gt;@marcoadurno&lt;/denchmark-link&gt;
. This looks like the right solution to me.
Yes, AFAIK, you can't recover summaries from inside a  (hopefully &lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
 will correct me if I'm wrong). I'll add a note to the  doc explaining this.
Note, in the future, stackoverflow might be a better place for this sort of question.
		</comment>
	</comments>
</bug>