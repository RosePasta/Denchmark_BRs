<bug id='9557' author='danijar' open_date='2017-04-30T23:55:09Z' closed_time='2017-05-01T18:08:04Z'>
	<summary>Wrong path for absolute variable scopes</summary>
	<description>
Using absolute paths for scopes is useful when structuring large models.
We can enter a name scope from its absolute path by appending a slash:
with tf.name_scope('foo'):
  with tf.name_scope('bar/') as scope:
    print(tf.constant(0).name)  # bar/Const:0
    print(bar)  # bar
However, this does not work with variable scopes:
with tf.variable_scope('foo'):
  with tf.variable_scope('bar/') as bar:
    print(tf.constant(0).name)  # bar/Const:0
    print(bar.name)  # foo/bar/ (Expected: bar)
The last line should print bar instead of foo/bar/.
	</description>
	<comments>
		<comment id='1' author='danijar' date='2017-05-01T02:23:55Z'>
		&lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
, i'm not a scope expert, but it seems in  there is  that
checks for a trailing slash i.e. at &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/ops.py#L1883&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/ops.py#L1883&lt;/denchmark-link&gt;

but and I don't see any similar function for variable_scope. Perhaps this is intended for some good reason?
		</comment>
		<comment id='2' author='danijar' date='2017-05-01T16:16:54Z'>
		If there's a good reason, &lt;denchmark-link:https://github.com/lukaszkaiser&gt;@lukaszkaiser&lt;/denchmark-link&gt;
 would be the one who knows it.
		</comment>
		<comment id='3' author='danijar' date='2017-05-01T18:08:04Z'>
		It was a hack in name scopes, and it was left out of variable scopes on purpose. We managed to go without hacking-in absolute paths for a long time, and their lack has great advantages: it's much harder to make a model inaccessible as sub-model. If you use an absolute path, then your model immediately becomes unusable as a sub-model of anything. So it was a conscious decision and it looks like the right one for now - a little inconvenience at build time paid for by much easier maintenance. I'd advocate to keep it that way except if there is a very good reason not to.
		</comment>
	</comments>
</bug>