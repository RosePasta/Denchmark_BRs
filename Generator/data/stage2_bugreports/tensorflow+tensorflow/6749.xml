<bug id='6749' author='shawnjhenry' open_date='2017-01-09T22:13:59Z' closed_time='2017-07-11T04:14:22Z'>
	<summary>sparse_placeholder no longer accepts python ints in shape argument</summary>
	<description>
Hi,
After recently updating tensorflow, sparse_placeholder stopped working correctly.  It appears that the shape argument must now be int64 in order for tensorflow to convert the shape to a tensor, so the following fails:
&lt;denchmark-code&gt;ph = tf.sparse_placeholder(dtype=tf.float32, shape=(50, 10000))
&lt;/denchmark-code&gt;

with error message:
&lt;denchmark-code&gt;ValueError: Tensor conversion requested dtype int64 for Tensor with dtype int32: 'Tensor("Const:0", shape=(2,), dtype=int32)'
&lt;/denchmark-code&gt;

This is inconsistent with the behavior of tf.placeholder, for which:
&lt;denchmark-code&gt;ph = tf.placeholder(dtype=tf.float32, shape=(50, 10000))
&lt;/denchmark-code&gt;

succeeds.
Thanks,
Shawn
	</description>
	<comments>
		<comment id='1' author='shawnjhenry' date='2017-01-11T03:06:59Z'>
		Maybe &lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
 can comment on what might be an issue with the  shape API.
		</comment>
		<comment id='2' author='shawnjhenry' date='2017-01-11T17:30:56Z'>
		Looks like the problem is in . It converts its argument to a tensor, which for a list of Python  values will result in a  tensor. I suspect the correct answer is to add a  to the  call, but since there doesn't appear to be any unit test for this I'll defer to &lt;denchmark-link:https://github.com/ilblackdragon&gt;@ilblackdragon&lt;/denchmark-link&gt;
, who originally added that function.
		</comment>
		<comment id='3' author='shawnjhenry' date='2017-01-13T08:12:05Z'>
		simple workaround:
shape = [1, 3]
shape = np.array(shape, dtype=np.int64)
tf.sparse_placeholder(tf.int32, shape=shape)
		</comment>
		<comment id='4' author='shawnjhenry' date='2017-03-15T03:41:26Z'>
		Any update on this issue? &lt;denchmark-link:https://github.com/ilblackdragon&gt;@ilblackdragon&lt;/denchmark-link&gt;

In my experience the workaround does  work because then it complains about:
ValueError: Tensor Tensor("Input_2/shape_1:0", shape=(2,), dtype=int64) may not be fed.
In other words: it doesn't want to do Tensor conversion itself, but it also doesn't accept to be fed with the int64 shape Tensor.
		</comment>
		<comment id='5' author='shawnjhenry' date='2017-04-19T00:00:41Z'>
		I also seem to be having the same problem.  Has there been any progress on this issue?
		</comment>
		<comment id='6' author='shawnjhenry' date='2017-04-28T02:36:44Z'>
		The workaround is all well and good
&lt;denchmark-code&gt;&gt;&gt; foo = tf.sparse_placeholder(tf.float32, shape=np.array([10, 47], dtype=np.int64))
&gt;&gt; foo.get_shape()
TensorShape([Dimension(10), Dimension(47)])
&lt;/denchmark-code&gt;

.... until you want a variable dimension
&lt;denchmark-code&gt;&gt;&gt; bar = tf.sparse_placeholder(tf.float32, shape=[None, 47])
&gt;&gt; bar.get_shape()
TensorShape(None)
&gt;&gt; bar2 = tf.sparse_placeholder(tf.float32, shape=np.array([None, 47], dtype=np.int64))
TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='shawnjhenry' date='2017-06-16T21:37:05Z'>
		Marking this as contributions welcome. &lt;denchmark-link:https://github.com/ilblackdragon&gt;@ilblackdragon&lt;/denchmark-link&gt;
 please let me know if you plan to fix this.
		</comment>
		<comment id='8' author='shawnjhenry' date='2017-06-29T22:36:30Z'>
		Added a PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/11153&gt;#11153&lt;/denchmark-link&gt;
 with test cases.
		</comment>
	</comments>
</bug>