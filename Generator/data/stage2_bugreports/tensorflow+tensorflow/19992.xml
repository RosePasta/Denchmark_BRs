<bug id='19992' author='PavelPr' open_date='2018-06-13T15:47:14Z' closed_time='2019-04-04T17:58:39Z'>
	<summary>The DepthwiseConv2dNative() function ignores the dilations argument</summary>
	<description>
Hi!
I am using Tensorflow v1.7.0.
I am invoking the DepthwiseConv2dNative() function with a dilations argument that is [1, 2, 2, 1]. Despite of this, the dilations value is being ignored.
Looking at the tensorflow source code, it is evident that the dilations argument is presumably being disregarded (depthwise_conv_op.cc, around line 400) in both CUDNN and non-CUDNN scenarios. Yet, there is no mention of this in the documentation.
Thanks!
	</description>
	<comments>
		<comment id='1' author='PavelPr' date='2018-06-14T01:01:45Z'>
		Thank you for your post. We noticed you have not filled out the following field in the issue template. Could you update them if they are relevant in your case, or leave them as N/A? Thanks.
Have I written custom code
OS Platform and Distribution
TensorFlow installed from
TensorFlow version
Bazel version
CUDA/cuDNN version
GPU model and memory
Exact command to reproduce
		</comment>
		<comment id='2' author='PavelPr' date='2018-06-14T15:25:33Z'>
		&lt;denchmark-link:https://github.com/chsigg&gt;@chsigg&lt;/denchmark-link&gt;
 -- is &lt;denchmark-link:https://github.com/PavelPr&gt;@PavelPr&lt;/denchmark-link&gt;
 's assessment correct? Is it expected that dilation is ignored? If so, can we document or fix?
		</comment>
		<comment id='3' author='PavelPr' date='2018-06-14T21:38:36Z'>
		Hi!
Apologies for not including the required information to begin with. I am using TensorFlow under Windows 10, in CPU mode. Bazel version is 0.14.1.
While I am fully aware of the fact that Windows is not an officially supported platform, reading through the TensorFlow source code creates an impression that this is a yet-to-be-implemented feature. Still, the documentation bears no trace of this (to the contrary, the "dilations" argument is even being described in detail; see: &lt;denchmark-link:https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/depthwise-conv2d-native&gt;https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/depthwise-conv2d-native&lt;/denchmark-link&gt;
).
Have a look at line 403 of depthwise_conv_op.cc (under tensorflow/core/kernels/):
&lt;denchmark-code&gt;  // TODO(yangzihao): Send in arbitrary dilation rates after the dilated
  // conv is supported.
  launcher_(context, use_cudnn_, cudnn_use_autotune_, input,
            reshaped_filter, /*row_dilation=*/1, /*col_dilation=*/1,
            stride_, stride_, padding_, output, data_format_);
&lt;/denchmark-code&gt;

While this particular block pertains to CUDNN, there is no trace of dilation information being passed in the CPU variant as well, the code of which is right below that block.
Thanks!
		</comment>
		<comment id='4' author='PavelPr' date='2018-07-13T06:47:17Z'>
		I have found the same problem， with tf.nn.depthwise_conv2d_native（）， the parameter 'dilations' do not take effect，dilations=[1, 2, 2, 1] will have the same result with dilations=[1, 1, 1, 1].  &lt;denchmark-link:https://github.com/PavelPr&gt;@PavelPr&lt;/denchmark-link&gt;
  had pointed the bug in tensorflow's  implementation.
		</comment>
		<comment id='5' author='PavelPr' date='2018-07-13T17:08:43Z'>
		&lt;denchmark-link:https://github.com/chsigg&gt;@chsigg&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/yzhwang&gt;@yzhwang&lt;/denchmark-link&gt;
 -- are there current plans to add dilation parameters to DepthwiseCov2dNative? If not, should the docs be updated?
		</comment>
		<comment id='6' author='PavelPr' date='2018-08-07T07:00:31Z'>
		This definitely sounds like a problem that can reduce the accuracy of your models, but it might go unnoticed by some.
If the cudnn path does not support the dilated convolution in this case yet, maybe it would be a good idea to just use the native path if the dilation rate is &gt; 1?
		</comment>
		<comment id='7' author='PavelPr' date='2018-11-15T09:03:57Z'>
		Meet the same issue. Any update? If this can not be supported in short term, I think at least the doc should be updated first, it took me much time to figure out there is a misalignment between doc and real behavior.
		</comment>
		<comment id='8' author='PavelPr' date='2019-03-25T23:24:37Z'>
		&lt;denchmark-link:https://github.com/PavelPr&gt;@PavelPr&lt;/denchmark-link&gt;
  Is this still an issue with the latest TF1.13 and TF2.0? Thanks!
		</comment>
		<comment id='9' author='PavelPr' date='2019-04-04T17:58:39Z'>
		Closing due to lack of recent activity, but please let me know if I'm mistaken. Since this issue is old at this point, please reopen the issue if it still occurs when tried with the latest version of Tensorflow. Thank you.
		</comment>
		<comment id='10' author='PavelPr' date='2019-04-04T17:58:40Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=19992&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=19992&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='PavelPr' date='2019-05-29T04:27:39Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 The issue still exists in v1.13.1.
		</comment>
		<comment id='12' author='PavelPr' date='2019-05-29T13:22:26Z'>
		&lt;denchmark-link:https://github.com/weichiche&gt;@weichiche&lt;/denchmark-link&gt;
 Could you create new issue with the issue details and context. Thanks!
		</comment>
		<comment id='13' author='PavelPr' date='2019-06-25T11:16:26Z'>
		I just stumbled on this thread while looking at &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d&gt;tf.nn.depthwise_conv2d&lt;/denchmark-link&gt;
. I assume  is a wrapper for , and I will share my experiments in hope it is useful for someone.
I'm on Linux, testing on CPU mode with tensorflow 1.14.0(&lt;denchmark-link:https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.14.0-cp37-cp37m-linux_x86_64.whl&gt;https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.14.0-cp37-cp37m-linux_x86_64.whl&lt;/denchmark-link&gt;
), and dilation seems to work. Below is a self-contained script for testing.
%reload_ext autoreload
%autoreload 2
%matplotlib inline

import matplotlib.pyplot as plt
import numpy as np

import tensorflow as tf
tf.enable_eager_execution()

x = np.random.rand(32,64,3);x.shape

plt.figure()
plt.title('X')
plt.imshow(x)

num_channels = 3
box_filter = np.ones([2, 2, 3, 1]) / 4
dilation_size = 2

y_with_dilation = tf.nn.depthwise_conv2d(
    np.expand_dims(x, axis=0),
    box_filter,  # [filter_height, filter_width, in_channels, out_channels]
    dilations=[dilation_size, dilation_size],
    strides=[1,1,1,1],
    padding="VALID",   # No padding
    data_format="NHWC"
)

y_without_dilation = tf.nn.depthwise_conv2d(
    np.expand_dims(x, axis=0),
    box_filter,  # [filter_height, filter_width, in_channels, out_channels]
    strides=[1,1,1,1],
    padding="VALID",   # No padding
    data_format="NHWC"
)

def plot_y(y, title=''):
    y = tf.squeeze(y)
    plt.figure()
    plt.title(title)
    plt.imshow(y)
    
plot_y(y_with_dilation, 'With dilation')
plot_y(y_without_dilation, 'Without dilation')
&lt;denchmark-link:https://user-images.githubusercontent.com/5738363/60093996-8458c280-9753-11e9-851c-cd3e516f1142.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/5738363/60093999-8753b300-9753-11e9-9e49-f58661bdac99.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/5738363/60094005-89b60d00-9753-11e9-8112-4c1d590ccb71.png&gt;&lt;/denchmark-link&gt;

Please don't ask me why I'm using a uniform filter :)
		</comment>
	</comments>
</bug>