<bug id='6120' author='petewarden' open_date='2016-12-06T16:28:40Z' closed_time='2017-06-16T22:58:45Z'>
	<summary>Error needed when loading a GraphDef created in a newer version of TensorFlow</summary>
	<description>
There are a lot of issues (e.g. &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/5628&gt;#5628&lt;/denchmark-link&gt;
) that are caused by users loading GraphDefs that were created by a newer version of TensorFlow (e.g. 0.12 that introduces SaverV2) into older code bases. This currently results in cryptic errors late in the loading process, but instead we should raise an error (or at least a prominent warning) when a newer GraphDef version than is supported is loaded.
	</description>
	<comments>
		<comment id='1' author='petewarden' date='2017-01-11T01:40:05Z'>
		I'm surprised load_graph_def doesn't check the version information, which is already present in the GraphDef proto. It seems like a simple check to add. I'm assigning to &lt;denchmark-link:https://github.com/girving&gt;@girving&lt;/denchmark-link&gt;
 since he was the one who added the version field to the proto.
		</comment>
		<comment id='2' author='petewarden' date='2017-01-17T15:38:21Z'>
		&lt;denchmark-link:https://github.com/petewarden&gt;@petewarden&lt;/denchmark-link&gt;
 I'm not sure I understand.  An old version of TensorFlow can't know which future GraphDef versions it will be compatible with, since those new versions are created in the future.  What kind of error message would you like?
		</comment>
		<comment id='3' author='petewarden' date='2017-01-17T17:13:48Z'>
		It would be "This GraphDef was created with a newer version of TensorFlow, and can't be loaded". Since we don't support this, we should fail hard, clearly, and early, rather than ignoring the mismatch and hitting cryptic errors later in the process.
		</comment>
		<comment id='4' author='petewarden' date='2017-01-17T17:33:07Z'>
		&lt;denchmark-link:https://github.com/petewarden&gt;@petewarden&lt;/denchmark-link&gt;
 That's a good idea, but I don't see how one would check for that.  We do check if a GraphDef's  version is too high, but this usually isn't the case.  We absolutely want TensorFlow to be able to load a GraphDef with a future version if it doesn't use any of the features introduced by that future version.  Since we have no idea what those future features are, the only kinds of errors we can produce are about unimplemented features.
		</comment>
		<comment id='5' author='petewarden' date='2017-01-17T17:42:59Z'>
		
We absolutely want TensorFlow to be able to load a GraphDef with a future version if it doesn't use any of the features introduced by that future version.

I'm surprised by this. I'm either used to the case where we guarantee forwards compatibility (so GraphDefs created by future versions will load and run correctly in older versions) or we don't. What we seem to have is no guarantee of forwards compatibility, but also no error that we're in that "no guarantee this will load" situation. Anyway, I'll come and talk in person to understand more.
		</comment>
		<comment id='6' author='petewarden' date='2017-05-09T16:24:56Z'>
		&lt;denchmark-link:https://github.com/petewarden&gt;@petewarden&lt;/denchmark-link&gt;
 Is it still worth having a chat about this?  I forget whether we already did.
		</comment>
		<comment id='7' author='petewarden' date='2017-05-09T16:32:09Z'>
		&lt;denchmark-link:https://github.com/girving&gt;@girving&lt;/denchmark-link&gt;
 thanks, let's see if we can have a quick chat today!
		</comment>
		<comment id='8' author='petewarden' date='2017-05-09T17:08:15Z'>
		Proposal: we add a  to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/versions.proto#L22&gt;VersionDef&lt;/denchmark-link&gt;
, and use it to hint when op kernels are missing.  It could be either just  or the concatenation of that and .
&lt;denchmark-link:https://github.com/josh11b&gt;@josh11b&lt;/denchmark-link&gt;
 Thoughts or objections?
		</comment>
		<comment id='9' author='petewarden' date='2017-05-09T17:08:22Z'>
		I chatted with &lt;denchmark-link:https://github.com/girving&gt;@girving&lt;/denchmark-link&gt;
 offline, and we came to the conclusion that it would be useful to have an advisory producer source code version (for example 1.2) stored in the graphdef. This would only be used for creating better error messages in the case that there's an unrecognized op found, or one of the other similar errors.
		</comment>
		<comment id='10' author='petewarden' date='2017-06-16T21:56:37Z'>
		Do we still plan to this, &lt;denchmark-link:https://github.com/petewarden&gt;@petewarden&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/girving&gt;@girving&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='11' author='petewarden' date='2017-06-16T22:08:43Z'>
		&lt;denchmark-link:https://github.com/yifeif&gt;@yifeif&lt;/denchmark-link&gt;
 I'm unlikely to get to this before I vanish.
		</comment>
		<comment id='12' author='petewarden' date='2017-06-16T22:58:45Z'>
		I see. I'm closing this for now. &lt;denchmark-link:https://github.com/petewarden&gt;@petewarden&lt;/denchmark-link&gt;
 feel free to re-open if we plan to precede on this.
		</comment>
		<comment id='13' author='petewarden' date='2018-04-20T22:57:18Z'>
		According to &lt;denchmark-link:https://www.tensorflow.org/programmers_guide/version_compat&gt;this&lt;/denchmark-link&gt;
 TF document, graphs produced on later version of TF can be consumed on earlier version of TF if min_consumer_version and min_producer_version params set correctly. I found how to set min_consumer_version and producer_version using GraphDef.versions field, but could not figure out how to set min_producer_version or consumer_version (&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/versions.proto&gt;Here&lt;/denchmark-link&gt;
 says these fields should be defined somewhere else, but where?). And without that I get "Check whether your GraphDef-interpreting binary is up to date with your GraphDef-generating binary" error
		</comment>
		<comment id='14' author='petewarden' date='2018-10-01T21:47:08Z'>
		Please reopen this issue. There are new ops in newer versions of tensorflow that make it impossible to load graphs generated in newer versions using older ones. For example the NonMaxSuppressionV3 op got added some time between 1.8 and 1.10. At the very least it should be possible to check before getting a cryptic error message.
		</comment>
	</comments>
</bug>