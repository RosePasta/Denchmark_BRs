<bug id='29862' author='pekaalto' open_date='2019-06-17T06:47:56Z' closed_time='2019-06-22T01:33:50Z'>
	<summary>[TF 2.0] Converting keras model to estimator ignores data-types</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
ProductName:	Mac OS X
ProductVersion:	10.14.2
BuildVersion:	18C54
TensorFlow installed from (source or binary): pip install ...
TensorFlow version (use command below): v1.12.1-3259-gf59745a381 2.0.0-beta0
Python version: 3.6.8

Describe the current behavior
When converting Keras model to estimator it converts all integer inputs to floats or doubles.
This will result in data-type errors in the converted estimator.
I am not entirely sure if this is a bug or "feature" because this function is indeed called in the conversion: &lt;denchmark-link:https://github.com/tensorflow/estimator/blob/c956dd32561bac645a1cd870d3c8cfe8e9fe969b/tensorflow_estimator/python/estimator/keras.py#L62&gt;https://github.com/tensorflow/estimator/blob/c956dd32561bac645a1cd870d3c8cfe8e9fe969b/tensorflow_estimator/python/estimator/keras.py#L62&lt;/denchmark-link&gt;

However, this is blocking using integer-inputs in the converted estimator.
Describe the expected behavior
Input-data-types are preserved when converting keras-model to estimator.
Code to reproduce the issue
Small example to reproduce the issue:
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
from tensorflow.python.keras import layers
from tensorflow.python.keras.estimator import model_to_estimator_v2

x_shape = (3,)
n_class = 5
batch_size = 10

x = layers.Input(shape=x_shape, name="x", dtype=tf.int64)

class StupidLayer(layers.Layer):
    def build(self, input_shape):
        self.y = tf.random.poisson(
            lam=10, shape=(batch_size,) + x_shape, dtype=tf.int64
        )
        super().build(input_shape)

    def call(self, inputs, **kwargs):
        return tf.cast(inputs * self.y, tf.float32)

y = StupidLayer()(x)

model = tf.keras.Model(inputs=x, outputs=y)

X = np.random.randint(50, size=(batch_size,) + x_shape, dtype="int64")

model.compile(optimizer="sgd", loss="categorical_crossentropy")
model.predict(X)

tf_estimator = model_to_estimator_v2(keras_model=model)
next(tf_estimator.predict(lambda: X))
&lt;/denchmark-code&gt;

Because input is converted to float, last line results in
&lt;denchmark-code&gt;TypeError: Input 'y' of 'Mul' Op has type int64 that does not match type float32 of argument 'x'.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='pekaalto' date='2019-06-18T09:20:17Z'>
		Have tried on Colab with TF 2.0beta and was able to get mentioned error.
		</comment>
		<comment id='2' author='pekaalto' date='2019-06-20T17:35:53Z'>
		Triage notes: we have a fix for this going in right now. &lt;denchmark-link:https://github.com/tanzhenyu&gt;@tanzhenyu&lt;/denchmark-link&gt;
 will update when it's in the nightlies.
		</comment>
		<comment id='3' author='pekaalto' date='2019-06-22T01:33:50Z'>
		This works in tf-nightly-2.0-preview since the fix was submitted yesterday.
		</comment>
		<comment id='4' author='pekaalto' date='2019-06-22T01:33:51Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=29862&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=29862&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>