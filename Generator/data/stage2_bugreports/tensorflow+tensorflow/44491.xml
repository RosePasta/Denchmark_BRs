<bug id='44491' author='jackd' open_date='2020-11-01T01:35:09Z' closed_time='2020-12-10T21:53:19Z'>
	<summary>deterministic `Dataset.map`s aren't</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution: default colab

Describe the current behavior
tf.data.Dataset.map has a determinstic argument which is documented as allowing performance to be traded for determinism. Behaviour is not deterministic when num_parallel_calls != 1 if map_func uses tf.random ops or methods from tf.random.Generator instances, even when deterministic=True.
Describe the expected behavior
Datasets mapped with deterministic=True should be deterministic, even with num_parallel_calls != 1. If this is not possible, documentation should not say that it is.

See &lt;denchmark-link:https://colab.research.google.com/drive/1u9N87y5BsFFGXvTO23pIjRTjheQekPEJ?usp=sharing&gt;colab&lt;/denchmark-link&gt;
 (code reproduced below).
import tensorflow as tf
import numpy as np

import time
import numpy as np
import tensorflow as tf

seed = 0
tf.random.set_seed(seed)


def map_fn(x):
  return tf.random.uniform((100,),)


ds = tf.data.Dataset.range(10).map(
    map_fn, num_parallel_calls=2, deterministic=True)

tf.random.set_seed(seed)
vals0 = [el.numpy() for el in ds]
tf.random.set_seed(seed)
vals1 = [el.numpy() for el in ds]

np.testing.assert_equal(vals0, vals1)
print("Passed")
Other info / logs Include any logs or source code that would be helpful to
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
&lt;ipython-input-3-9c92a75ab4eb&gt; in &lt;module&gt;()
     18 vals1 = [el.numpy() for el in ds]
     19 
---&gt; 20 np.testing.assert_equal(vals0, vals1)
     21 print("Passed")
     22 

3 frames
/usr/local/lib/python3.6/dist-packages/numpy/testing/_private/utils.py in assert_array_compare(comparison, x, y, err_msg, verbose, header, precision, equal_nan, equal_inf)
    844                                 verbose=verbose, header=header,
    845                                 names=('x', 'y'), precision=precision)
--&gt; 846             raise AssertionError(msg)
    847     except ValueError:
    848         import traceback

AssertionError: 
Arrays are not equal
item=3

Mismatched elements: 100 / 100 (100%)
Max absolute difference: 0.8390552
Max relative difference: 70.61441
 x: array([0.839809, 0.390264, 0.704193, 0.916514, 0.008297, 0.778485,
       0.316561, 0.052142, 0.876872, 0.176245, 0.275351, 0.204759,
       0.999374, 0.40232 , 0.895112, 0.604971, 0.688866, 0.333363,...
 y: array([0.595369, 0.867852, 0.033959, 0.962069, 0.560696, 0.772698,
       0.060957, 0.602406, 0.495115, 0.442416, 0.500883, 0.282592,
       0.324962, 0.593064, 0.731267, 0.349757, 0.635136, 0.251549,...
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='jackd' date='2020-11-02T13:31:38Z'>
		&lt;denchmark-link:https://github.com/jackd&gt;@jackd&lt;/denchmark-link&gt;
,
On setting the  to  as per the &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/data/Options&gt;tf.data.Options&lt;/denchmark-link&gt;
 documentation, I was able to run the code without any issues.
Please find the gist of it &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/91238870723615bd21222d4b07cd7552/44491-with-options.ipynb#scrollTo=JJetXPbVagy1&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='jackd' date='2020-11-02T23:00:32Z'>
		&lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
 
I thought this might be to do with the machines colab was allocating, but I saw the same behaviour locally. Having increased the size of the dataset and num_parallel_calls I get this consistently failing both with and without Options. I suspect there's a non-deterministic race condition that occasionally behaves consistently with a small number of parallel calls. Original colab has been updated.
ds = tf.data.Dataset.range(1000).map(
    map_fn, num_parallel_calls=8, deterministic=True)
		</comment>
		<comment id='3' author='jackd' date='2020-11-16T09:49:50Z'>
		Was able to reproduce the issue with &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/e98e3ea465b600027e82e9a8ede43c0a/44491.ipynb#scrollTo=RTif7JClak4R&gt;TF v2.3&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/911a3f8c74182713ed033559ce2f5775/44491-tf-nightly.ipynb#scrollTo=JkGrJapiaSqf&gt;TF-nightly&lt;/denchmark-link&gt;
. Please find the attached gist. Thanks!
		</comment>
		<comment id='4' author='jackd' date='2020-11-24T18:31:35Z'>
		The documentation talks about the order in which the elements are produced, which is what the deterministic option controls. When num_parallel_calls &gt; 1 the order in which parallel map transformation access any state of stateful map transformations is not deterministic.
To guarantee that your code is deterministic in the presence of num_parallel_calls &gt; 1, the map transformation should be stateless (and you can for instance use stateless RNG instead of the stateful one).
I would be happy to review a PR with your suggestion for how to improve the documentation of tf.data.Dataset map.
		</comment>
		<comment id='5' author='jackd' date='2020-11-24T22:46:21Z'>
		&lt;denchmark-link:https://github.com/jsimsa&gt;@jsimsa&lt;/denchmark-link&gt;
 in this context does  "produced" mean the same as "returned"? I read that part of the documentation but assumed any stateful operations would be called during production. Happy to put in a PR.
		</comment>
		<comment id='6' author='jackd' date='2020-11-25T18:56:24Z'>
		"returned" is indeed more accurate.
To be more precise: when map executes deterministically, then assuming its inputs are x_1, ..., x_n, it will produce as output f(x_1), ..., f(x_n). If num_parallel_calls &gt; 1, the application of f on different x_i can happen in parallel (and possibly out-of-order). As a consequence, if the output of f depends on external state that f modifies (such as RNG), the produced values f(x_1), ..., f(x_n) are not guaranteed to be identical across different executions (even though the "order" in which they are returned is).
		</comment>
		<comment id='7' author='jackd' date='2020-12-04T10:25:16Z'>
		&lt;denchmark-link:https://github.com/jackd&gt;@jackd&lt;/denchmark-link&gt;
,
Can you please respond to &lt;denchmark-link:https://github.com/jsimsa&gt;@jsimsa&lt;/denchmark-link&gt;
's comment. Thanks!
		</comment>
		<comment id='8' author='jackd' date='2020-12-10T21:53:19Z'>
		Doc change merged.
		</comment>
		<comment id='9' author='jackd' date='2020-12-10T21:53:20Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44491&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44491&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>