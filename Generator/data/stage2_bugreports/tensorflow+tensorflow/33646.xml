<bug id='33646' author='AndersonHappens' open_date='2019-10-23T20:10:38Z' closed_time='2020-03-03T20:43:18Z'>
	<summary>ValueError: Unknown metric function: CustomMetric using custom metrics when loading tf saved model type with tf.keras.models.load_model</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.0.0
Python version: 3.7

Describe the current behavior
ValueError: Unknown metric function: CustomMetric occurs when trying to load a tf saved model using  tf.keras.models.load_model with a custom metric. If you look at the code for load_model, it is clear the load_model currently ignores the custom_objects dict for the tf saved model format.
Describe the expected behavior
load_model loads the custom metric successfully either just implicitly or through the custom_objects dict.
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.metrics import Metric
import numpy as np

class CustomMetric(Metric):
  def __init__(self,
               name='score',
               dtype=tf.float32):
    super(CustomMetric, self).__init__(name=name)
    self.true_positives = self.add_weight(
        'true_positives',
        shape=[10],
        initializer='zeros',
        dtype=self.dtype)


  def update_state(self, y_true, y_pred, sample_weight=None):
    pass

  def result(self):
    return 0

  def get_config(self):
    """Returns the serializable config of the metric."""
    config = {}
    base_config = super(CustomMetric, self).get_config()
    return dict(list(base_config.items()) + list(config.items()))

  def reset_states(self):
    self.true_positives.assign(np.zeros(self.num_classes), np.float32)
    self.weights_intermediate.assign(
        np.zeros(self.num_classes), np.float32)
            
inputs = keras.Input(shape=(784,), name='digits')
x = layers.Dense(64, activation='relu', name='dense_1')(inputs)
x = layers.Dense(64, activation='relu', name='dense_2')(x)
outputs = layers.Dense(10, activation='softmax', name='predictions')(x)
model = keras.Model(inputs=inputs, outputs=outputs, name='3_layer_mlp')

model.compile(loss='sparse_categorical_crossentropy', optimizer=tf.keras.optimizers.Adam(lr=.001), metrics=[CustomMetric()])

model.save("model/", save_format='tf')

new_model = keras.models.load_model('model/',  tf.keras.models.load_model ={'score': CustomMetric})
&lt;/denchmark-code&gt;

Other info / logs
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/sentim/Website/model_prediction/test_load_saved_model.py", line 46, in &lt;module&gt;
    new_model = keras.models.load_model('model/', custom_objects={'score': CustomMetric})
  File "/home/sentim/anaconda3/envs/py37/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/save.py", line 150, in load_model
    return saved_model_load.load(filepath, compile)
  File "/home/sentim/anaconda3/envs/py37/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/saved_model/load.py", line 93, in load
    model._training_config))  # pylint: disable=protected-access
  File "/home/sentim/anaconda3/envs/py37/lib/python3.7/site-packages/tensorflow_core/python/training/tracking/base.py", line 457, in _method_wrapper
    result = method(self, *args, **kwargs)
  File "/home/sentim/anaconda3/envs/py37/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training.py", line 356, in compile
    self._cache_output_metric_attributes(metrics, weighted_metrics)
  File "/home/sentim/anaconda3/envs/py37/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training.py", line 1901, in _cache_output_metric_attributes
    metrics, self.output_names, output_shapes, self.loss_functions)
  File "/home/sentim/anaconda3/envs/py37/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training_utils.py", line 813, in collect_per_output_metric_info
    metric_name = get_metric_name(metric, is_weighted)
  File "/home/sentim/anaconda3/envs/py37/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training_utils.py", line 987, in get_metric_name
    metric = metrics_module.get(metric)
  File "/home/sentim/anaconda3/envs/py37/lib/python3.7/site-packages/tensorflow_core/python/keras/metrics.py", line 2857, in get
    return deserialize(identifier)
  File "/home/sentim/anaconda3/envs/py37/lib/python3.7/site-packages/tensorflow_core/python/keras/metrics.py", line 2851, in deserialize
    printable_module_name='metric function')
  File "/home/sentim/anaconda3/envs/py37/lib/python3.7/site-packages/tensorflow_core/python/keras/utils/generic_utils.py", line 180, in deserialize_keras_object
    config, module_objects, custom_objects, printable_module_name)
  File "/home/sentim/anaconda3/envs/py37/lib/python3.7/site-packages/tensorflow_core/python/keras/utils/generic_utils.py", line 165, in class_and_config_for_serialized_keras_object
    raise ValueError('Unknown ' + printable_module_name + ': ' + class_name)
ValueError: Unknown metric function: CustomMetric
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='AndersonHappens' date='2019-10-24T09:01:32Z'>
		I have tried on colab with TF version 2.0 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/1c9190b3588867fa05dd7103b212bccb/untitled296.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='AndersonHappens' date='2019-10-26T00:08:26Z'>
		&lt;denchmark-link:https://github.com/AndersonHappens&gt;@AndersonHappens&lt;/denchmark-link&gt;
 I think there is an issue with saving a model in *.tf version when the model has custom metrics. I have saved the model in  *.h5 format and everything works as expected. Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/5cd85f60f1d6e975ce65675227422b3e/untitled296.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
Please close the issue if it was resolved for you. Thanks!
		</comment>
		<comment id='3' author='AndersonHappens' date='2019-10-28T16:09:49Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 While it does work in the h5 format, if I have saved a model to the tf format, I cannot load the model to resave it to the h5 format later (since I can't load the model in the first place), so ultimately this is still an issue that needs to be addressed.
		</comment>
		<comment id='4' author='AndersonHappens' date='2019-11-06T17:49:11Z'>
		Here is a workaround for the meantime:
from tensorflow.python.saved_model import loader_impl
from tensorflow.python.keras.saving.saved_model import load as saved_model_load

loader_impl.parse_saved_model(load_path)
model = saved_model_load.load(load_path, custom_objects={"custom_metric": custom_metric})
		</comment>
		<comment id='5' author='AndersonHappens' date='2019-12-12T01:48:11Z'>
		same issue here, when you save the model in tf format, you can't re-load the model with custom_objects, this should be fixed.
		</comment>
		<comment id='6' author='AndersonHappens' date='2019-12-12T02:04:54Z'>
		
Here is a workaround for the meantime:
from tensorflow.python.saved_model import loader_impl
from tensorflow.python.keras.saving.saved_model import load as saved_model_load

loader_impl.parse_saved_model(load_path)
model = saved_model_load.load(load_path, custom_objects={"custom_metric": custom_metric})

not working at keras 2.3.1, tf 2.0.0
&lt;denchmark-code&gt;TypeError: load() got an unexpected keyword argument 'custom_objects'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='AndersonHappens' date='2019-12-12T17:30:35Z'>
		
@jvishnuvardhan While it does work in the h5 format, if I have saved a model to the tf format, I cannot load the model to resave it to the h5 format later (since I can't load the model in the first place), so ultimately this is still an issue that needs to be addressed.

&lt;denchmark-link:https://github.com/AndersonHappens&gt;@AndersonHappens&lt;/denchmark-link&gt;
 Can you please check with the . I saved model in "tf" format, then loaded model and saved in "h5" format without any issues. Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/9f3c879cdb48821e6b7554e4fe700e0b/untitled702.ipynb&gt;gist here&lt;/denchmark-link&gt;
.
Please let us know what you think. Thanks.
&lt;denchmark-link:https://github.com/JustinhoCHN&gt;@JustinhoCHN&lt;/denchmark-link&gt;
 can you please try . If you still have an issue, please open a new issue with a standalone code to reproduce the error.
I am closing this issue as it was resolved in recent tf-nightly. Please feel free to open if the issue persists again. Thanks!
		</comment>
		<comment id='8' author='AndersonHappens' date='2019-12-12T17:30:37Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33646&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33646&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='AndersonHappens' date='2019-12-15T17:07:52Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 This issue should not be closed. The loading as in your gist works, but once you use the model, e.g. to further train it you will get an error that the custom object is unkown.
		</comment>
		<comment id='10' author='AndersonHappens' date='2019-12-15T17:09:45Z'>
		Here is a new workaround, not sure what changed that the old one does not work anymore:
from tensorflow.python.saved_model import load as tf_load
from tensorflow.python.keras.saving.saved_model.load import KerasObjectLoader, RevivedModel
from tensorflow.python.keras.saving import saving_utils

custom_objects = {"compute_loss": loss}
model = tf_load.load_internal(PATH_TO_MODEL, loader_cls=KerasObjectLoader)
if isinstance(model, RevivedModel) and compile:
  if model._training_config is not None:
    model.compile(**saving_utils.compile_args_from_training_config(
    model._training_config, custom_objects))
		</comment>
		<comment id='11' author='AndersonHappens' date='2019-12-16T18:58:02Z'>
		&lt;denchmark-link:https://github.com/j-o-d-o&gt;@j-o-d-o&lt;/denchmark-link&gt;
 Can you try adding one more line as follows and train the model ().
loaded_my_new_model_saved_in_h5.compile(loss='sparse_categorical_crossentropy', optimizer=tf.keras.optimizers.Adam(lr=.001), metrics=[CustomMetric()])
Thanks!
		</comment>
		<comment id='12' author='AndersonHappens' date='2019-12-17T08:16:18Z'>
		The models saved in h5 format seem to work fine, the issue is about models saved with SavedModel format (as explained here &lt;denchmark-link:https://www.tensorflow.org/guide/saved_model&gt;https://www.tensorflow.org/guide/saved_model&lt;/denchmark-link&gt;
)
What is working is setting the compile flag to False and then compiling it on its own e.g.:
import tensorflow as tf

# Save Keras Model as SavedModel (Keras model has some custom objects e.g. custom loss function)
tf.saved_model.save(my_keras_model, EXPORT_DIR)
...
# Load the model and compile on its own (working)
loaded_model = tf.keras.model.load(EXPORT_DIR, custom_objects={"custom_loss": my_custom_loss}, compile=False)
model.compile(optimizer=my_optimizer, loss=my_custom_loss)
# Load the model while also loading optimizer and compiling (failing with "Unkown loss function: my_custom_loss")
loaded_model = tf.keras.model.load(EXPORT_DIR, custom_objects={"custom_loss": my_custom_loss}) # compile is set to True by default
The point is:

The default way of loading models fails if there are custom objects involved.
By compiling yourself you are setting up a new optimizer instead of loading the previously trained models optimizer weights.

Moreover I already submited a PR that would fix this: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/34048&gt;#34048&lt;/denchmark-link&gt;
. But it seems nobody bothers about it : /
		</comment>
		<comment id='13' author='AndersonHappens' date='2020-02-04T21:58:51Z'>
		&lt;denchmark-link:https://github.com/j-o-d-o&gt;@j-o-d-o&lt;/denchmark-link&gt;
 Can you please check using  after compile and the use  to load the model. I tried it without any issue. &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/0f8c9294cfd1e8ae945f9edae36831ad/untitled702.ipynb&gt;Here&lt;/denchmark-link&gt;
 is the gist. Please run it with . Thanks!
		</comment>
		<comment id='14' author='AndersonHappens' date='2020-03-03T20:43:17Z'>
		I am closing this issue as it was resolved. Please feel free to reopen if the issue didn't resolve for you. Thanks!
		</comment>
		<comment id='15' author='AndersonHappens' date='2020-03-03T20:43:19Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33646&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33646&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='16' author='AndersonHappens' date='2020-04-01T19:51:59Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
  works, but doesn't run on the GPU.
Ps.: regular  does run on GPU as expected.
Also, isn't nightly an unstable build?
Is there a stable solution to the problem?
Or when is the regular tensorflow expected to be fixed?
		</comment>
		<comment id='17' author='AndersonHappens' date='2020-04-01T20:28:12Z'>
		&lt;denchmark-link:https://github.com/rodrigoruiz&gt;@rodrigoruiz&lt;/denchmark-link&gt;
 Can you please open a new issue with details and a simple standalone code to reproduce the issue? Currently  is the latest release candidate. I expect there will be TF2.2 stable version will be released in the near future. Thanks!
		</comment>
		<comment id='18' author='AndersonHappens' date='2020-04-01T20:32:06Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 I think i figured it out,  does not run on GPU,  does... It's just that this is not specified in the docs.
I'll just wait for the stable version I guess.
		</comment>
		<comment id='19' author='AndersonHappens' date='2020-05-09T19:35:56Z'>
		Just tried this on 2.2.0. While it doesn't run into error, it seems to load an empty model. I'm using Feature Column API.
		</comment>
		<comment id='20' author='AndersonHappens' date='2020-05-09T21:15:49Z'>
		&lt;denchmark-link:https://github.com/timatim&gt;@timatim&lt;/denchmark-link&gt;
 Please create a new issue with a simple standalone to reproduce the issue. Thanks!
		</comment>
		<comment id='21' author='AndersonHappens' date='2020-11-06T17:35:31Z'>
		I have this problem loading an .h5 model on TF 2.3.0.
		</comment>
	</comments>
</bug>