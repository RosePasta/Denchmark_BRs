<bug id='29955' author='KOLANICH' open_date='2019-06-19T09:24:27Z' closed_time='2019-11-04T06:56:42Z'>
	<summary>Create a low-level python tutorial for tf 2</summary>
	<description>
&lt;denchmark-h:h2&gt;Description of issue (what needs changing):&lt;/denchmark-h&gt;

It is unclear how to translate the following code to tf 2:
%matplotlib inline
import tensorflow as tf
from matplotlib import pyplot as plt
from tqdm.auto import tqdm, trange
import numpy as np

tf.compat.v1.disable_eager_execution()

y = np.array([[10., 1.], [6., 3.], [-1, 7]])
x = np.array([[4., 15.], [1., 1.], [-7, 1]])
trajs = [[] for j in range(y.shape[0])]

g = tf.compat.v1.Graph()
with g.as_default():
	sess = tf.compat.v1.Session(graph=g)
	
	yT = tf.compat.v1.placeholder(tf.float64)
	xT = tf.compat.v1.Variable(x, trainable=True)

	elementWiseLoss = tf.compat.v1.reduce_sum((yT - xT)**2, axis=1)
	loss = tf.compat.v1.reduce_sum(elementWiseLoss)
	opt = tf.compat.v1.train.AdamOptimizer(0.1).minimize(loss)
	init = tf.compat.v1.global_variables_initializer()
	
	sess.run(init)
	epochs = 300
	for i in trange(epochs):
		_, lossR, x, elR = sess.run([opt, loss, xT, elementWiseLoss], feed_dict={yT: y})
		if not i % 10:
			for j in range(y.shape[0]):
				trajs[j].append([*x[j], elR[j]])

print("x", x)
print("y", y)
print("y - x", y - x)
trajs = np.array(trajs)
for i, m in enumerate(["o", "+", "*"]):
	plt.scatter(trajs[i, :, 0], trajs[i, :, 1], marker=m, c=trajs[i, :, 2], cmap="rainbow", label=str(i))
plt.legend()
plt.grid()
plt.colorbar()
plt.show()
The solution:
%matplotlib inline
import tensorflow as tf
from matplotlib import pyplot as plt
from tqdm.auto import tqdm, trange
import numpy as np

y = np.array([[10., 1.], [6., 3.], [-1, 7]])
x = np.array([[4., 15.], [1., 1.], [-7, 1]])
trajs = [[] for j in range(y.shape[0])]


yT = tf.Variable(y)
xT = tf.Variable(x)

@tf.function
def elementWiseLoss():
	return tf.reduce_sum((yT - xT)**2, axis=1)

@tf.function
def loss():
	return tf.reduce_sum(elementWiseLoss())

optr = tf.optimizers.Adam(0.1)

epochs = 300
for i in trange(epochs):
	optr.minimize(loss, [xT])
	lossR = loss().numpy()
	x = xT.numpy()
	elR = elementWiseLoss().numpy()
	if not i % 10:
		for j in range(yT.shape[0]):
			trajs[j].append([*xT[j], elR[j]])

print("x", x)
print("y", y)
print("y - x", y - x)
trajs = np.array(trajs)
for i, m in enumerate(["o", "+", "*"]):
	plt.scatter(trajs[i, :, 0], trajs[i, :, 1], marker=m, c=trajs[i, :, 2], cmap="rainbow", label=str(i))
plt.legend()
plt.grid()
plt.colorbar()
plt.show()
&lt;denchmark-h:h3&gt;Clear description&lt;/denchmark-h&gt;

It would be nice to have a tutorial page containing both v1-style solution and v2-style one.
	</description>
	<comments>
		<comment id='1' author='KOLANICH' date='2019-06-20T09:02:16Z'>
		&lt;denchmark-link:https://github.com/KOLANICH&gt;@KOLANICH&lt;/denchmark-link&gt;
 The link &lt;denchmark-link:https://www.tensorflow.org/beta/guide/upgrade&gt;Upgrade code to TensorFlow 2.0&lt;/denchmark-link&gt;
 guide you to upgrade from 1.x to 2.0. The tf_upgrade_v2 script will take care upgrading the 1.x code to 2.0. Let us know if that helps. Thanks!
		</comment>
		<comment id='2' author='KOLANICH' date='2019-06-20T10:33:26Z'>
		tf_upgrade_v2 "upgrades" to legacy API.
		</comment>
		<comment id='3' author='KOLANICH' date='2019-11-04T06:56:42Z'>
		Several guides for upgrading code to TensorFlow 2.0 have been released:

Effective TensorFlow 2.0
Migrate your TensorFlow 1 code to TensorFlow 2
Better performance with tf.function and AutoGraph

One of our Google Summer of Code students also created &lt;denchmark-link:https://github.com/Vishal-V/GSoC&gt;several examples&lt;/denchmark-link&gt;
 for migrating models. Closing out this issue for now; please feel free to reopen if the resources I mentioned are insufficient! 
		</comment>
	</comments>
</bug>