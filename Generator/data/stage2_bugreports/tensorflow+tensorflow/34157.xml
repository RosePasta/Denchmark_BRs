<bug id='34157' author='shkarupa-alex' open_date='2019-11-11T11:45:52Z' closed_time='2020-09-17T12:41:12Z'>
	<summary>Keras fails to feed ragged/sparse inputs with correct input placeholder</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes, custom subclassed model
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Google Colab
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v1.12.1-17764-gae26958 2.1.0-dev20191111
Python version: Google Colab py3
Bazel version (if compiling from source): No
GCC/Compiler version (if compiling from source): No
CUDA/cuDNN version: Google Colab
GPU model and memory: Google Colab

Describe the current behavior
Error raised when trying to feed ragged/sparse tensors to model with tf.data.Dataset
Describe the expected behavior
There should be no error

&lt;denchmark-link:https://colab.research.google.com/drive/1Ysbe9uxWLn1eFWNMax9SAHewHMrXwG-R&gt;https://colab.research.google.com/drive/1Ysbe9uxWLn1eFWNMax9SAHewHMrXwG-R&lt;/denchmark-link&gt;

Other info / logs
---------------------------------------------------------------------------
InvalidArgumentError                      Traceback (most recent call last)
&lt;ipython-input-4-ed795b275880&gt; in &lt;module&gt;()
----&gt; 1 sparse_model = MyModel(False)
      2 sparse_input = my_dataset(False)
      3 
      4 sparse_model.compile(optimizer='Adam', loss='mse')
      5 sparse_model.fit(sparse_input)

13 frames
&lt;ipython-input-2-45855ec3bda4&gt; in __init__(self, ragged_on, **kwargs)
     13     outputs = tf.keras.layers.GlobalAveragePooling1D()(dense)
     14 
---&gt; 15     super(MyModel, self).__init__(inputs=inputs, outputs=outputs)

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/engine/training.py in __init__(self, *args, **kwargs)
    144 
    145   def __init__(self, *args, **kwargs):
--&gt; 146     super(Model, self).__init__(*args, **kwargs)
    147     _keras_api_gauge.get_cell('model').set(True)
    148     # initializing _distribution_strategy here since it is possible to call

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/engine/network.py in __init__(self, *args, **kwargs)
    167         'inputs' in kwargs and 'outputs' in kwargs):
    168       # Graph network
--&gt; 169       self._init_graph_network(*args, **kwargs)
    170     else:
    171       # Subclassed network

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/training/tracking/base.py in _method_wrapper(self, *args, **kwargs)
    455     self._self_setattr_tracking = False  # pylint: disable=protected-access
    456     try:
--&gt; 457       result = method(self, *args, **kwargs)
    458     finally:
    459       self._self_setattr_tracking = previous_value  # pylint: disable=protected-access

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/engine/network.py in _init_graph_network(self, inputs, outputs, name, **kwargs)
    270 
    271     if any(not hasattr(tensor, '_keras_history') for tensor in self.outputs):
--&gt; 272       base_layer_utils.create_keras_history(self._nested_outputs)
    273 
    274     self._base_init(name=name, **kwargs)

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/engine/base_layer_utils.py in create_keras_history(tensors)
    185     keras_tensors: The Tensors found that came from a Keras Layer.
    186   """
--&gt; 187   _, created_layers = _create_keras_history_helper(tensors, set(), [])
    188   return created_layers
    189 

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/engine/base_layer_utils.py in _create_keras_history_helper(tensors, processed_ops, created_layers)
    245           else:
    246             with ops.init_scope():
--&gt; 247               constants[i] = backend.function([], op_input)([])
    248       processed_ops, created_layers = _create_keras_history_helper(
    249           layer_inputs, processed_ops, created_layers)

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/backend.py in __call__(self, inputs)
   3725         value = math_ops.cast(value, tensor.dtype)
   3726       converted_inputs.append(value)
-&gt; 3727     outputs = self._graph_fn(*converted_inputs)
   3728 
   3729     # EagerTensor.numpy() will often make a copy to ensure memory safety.

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/function.py in __call__(self, *args, **kwargs)
   1527       TypeError: For invalid positional/keyword argument combinations.
   1528     """
-&gt; 1529     return self._call_impl(args, kwargs)
   1530 
   1531   def _call_impl(self, args, kwargs, cancellation_manager=None):

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/function.py in _call_impl(self, args, kwargs, cancellation_manager)
   1567       raise TypeError("Keyword arguments {} unknown. Expected {}.".format(
   1568           list(kwargs.keys()), list(self._arg_keywords)))
-&gt; 1569     return self._call_flat(args, self.captured_inputs, cancellation_manager)
   1570 
   1571   def _filtered_call(self, args, kwargs):

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/function.py in _call_flat(self, args, captured_inputs, cancellation_manager)
   1668       # No tape is watching; skip to running the function.
   1669       return self._build_call_outputs(self._inference_function.call(
-&gt; 1670           ctx, args, cancellation_manager=cancellation_manager))
   1671     forward_backward = self._select_forward_and_backward_functions(
   1672         args,

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/function.py in call(self, ctx, args, cancellation_manager)
    521               inputs=args,
    522               attrs=("executor_type", executor_type, "config_proto", config),
--&gt; 523               ctx=ctx)
    524         else:
    525           outputs = execute.execute_with_cancellation(

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/execute.py in quick_execute(op_name, num_outputs, inputs, attrs, ctx, name)
     65     else:
     66       message = e.message
---&gt; 67     six.raise_from(core._status_to_exception(e.code, message), None)
     68   except TypeError as e:
     69     keras_symbolic_tensors = [

/usr/local/lib/python3.6/dist-packages/six.py in raise_from(value, from_value)

InvalidArgumentError:  You must feed a value for placeholder tensor 'data/values' with dtype float and shape [?]
	 [[node data/values (defined at &lt;ipython-input-2-45855ec3bda4&gt;:15) ]] [Op:__inference_keras_scratch_graph_22]

Function call stack:
keras_scratch_graph
	</description>
	<comments>
		<comment id='1' author='shkarupa-alex' date='2019-11-12T08:10:16Z'>
		Issue replicating for the given code. Thanks!
		</comment>
		<comment id='2' author='shkarupa-alex' date='2020-05-07T10:17:05Z'>
		Original issue is still here with tf-nightly, but this workaround works &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/27170#issuecomment-589546804&gt;#27170 (comment)&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='shkarupa-alex' date='2020-05-26T17:41:22Z'>
		Does it still fail? Looks like it's fixed in nightly -- even the colab suggests so
		</comment>
		<comment id='4' author='shkarupa-alex' date='2020-09-03T11:49:42Z'>
		&lt;denchmark-link:https://github.com/shkarupa-alex&gt;@shkarupa-alex&lt;/denchmark-link&gt;

I have tried in colab with TF version 2.3 and i am not seeing any issue. Please,find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/e3bb77fa0ae38cb42291528cd091a85e/untitled303.ipynb&gt;here&lt;/denchmark-link&gt;
.Please, verify once and close the issue. Thanks!
		</comment>
		<comment id='5' author='shkarupa-alex' date='2020-09-10T12:16:24Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='6' author='shkarupa-alex' date='2020-09-17T12:41:10Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='7' author='shkarupa-alex' date='2020-09-17T12:41:13Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34157&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34157&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>