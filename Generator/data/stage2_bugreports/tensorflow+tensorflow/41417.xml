<bug id='41417' author='NikosSpanos' open_date='2020-07-15T14:28:25Z' closed_time='2020-09-28T19:13:45Z'>
	<summary>Min_delta parameters on callbacks function of Keras model seems to not take effect</summary>
	<description>
I am using the following callbacks function on a Keras model and I initialize the minimum delta to 0.002, so based on the documentation of Tensorflow/Keras any improvement in the validation loss function less than 0.002 won't be counted for an improvement. However, this seems to not get implemented in my case.
callback function:
&lt;denchmark-code&gt;def callback(folder_path, saved_model_name, patience_value, logdir, hparams):
    
    # Initialize parameters
    monitor_metric = 'val_loss'
    minimum_delta = 0.002
    patience_limit = patience_value
    verbose_value = 1
    mode_value = 'min'
    weights_fname = os.path.join(os.getcwd(), '{0}/{1}.h5'.format(folder_path, saved_model_name))
    
    # Initialize callbacks
    callbacks = [
        
        EarlyStopping(monitor=monitor_metric,
                      min_delta=minimum_delta,
                      patience=patience_limit,
                      verbose=verbose_value,
                      mode=mode_value,
                      restore_best_weights=True),

        ModelCheckpoint(filepath=weights_fname,
                        monitor=monitor_metric,
                        verbose=verbose_value,
                        save_best_only=True,
                        save_weights_only=True),
        
        tf.keras.callbacks.TensorBoard(logdir),
        
        hp.KerasCallback(logdir, hparams)
    ]
    
    return callbacks
&lt;/denchmark-code&gt;

Example 1
&lt;denchmark-code&gt;Epoch 00016: val_loss improved from 0.02129 to 0.02015, saving model to /content/model_one/adam_v2_14072020/multi_input_keras_model_50dim_128batchsize_0.01lr_10decaymultiplier_14072020.h5
&lt;/denchmark-code&gt;

Example 2
&lt;denchmark-code&gt;Epoch 00019: val_loss improved from 0.01880 to 0.01803, saving model to /content/model_one/adam_v2_14072020/multi_input_keras_model_50dim_128batchsize_0.01lr_10decaymultiplier_14072020.h5
&lt;/denchmark-code&gt;

You can see that in both examples the validation loss improved and the model's weight have been saved, while they shouldn't;t have:

0.02129 - 0.02015 = 0.00114 &lt; 0.002 (although it was counted as an improvement)
0.01880 - 0.01803 = 0.00077 &lt; 0.002 (also counted as an improvement in validation loss)
What is going wrong?

Apologize for not posting more code since it's a thorough application. So, please check my &lt;denchmark-link:https://drive.google.com/file/d/1FqQjjB2xFFQCiAqZacvVsl5SU0kcJwGd/view?usp=sharing&gt;colab notebook&lt;/denchmark-link&gt;
 to replicate the issue.
Pickled data saved on my drive &lt;denchmark-link:https://drive.google.com/drive/folders/1Z0p2RVpJSn8uhZG5UvZBU1AS3aLqEVqv?usp=sharing&gt;folder&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='NikosSpanos' date='2020-07-16T03:49:00Z'>
		&lt;denchmark-link:https://github.com/NikosSpanos&gt;@NikosSpanos&lt;/denchmark-link&gt;

Can you please provide supporting files as well (Eg: saved pickle files) to reproduce the issue in our environment.It helps us in localizing the issue faster.Thanks!
		</comment>
		<comment id='2' author='NikosSpanos' date='2020-07-16T06:25:49Z'>
		
@NikosSpanos
Can you please provide supporting files as well (Eg: saved pickle files) to reproduce the issue in our environment.It helps us in localizing the issue faster.Thanks!

Ofc &lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 , I added the relative folder at the end of my post
		</comment>
		<comment id='3' author='NikosSpanos' date='2020-09-10T21:53:35Z'>
		&lt;denchmark-link:https://github.com/NikosSpanos&gt;@NikosSpanos&lt;/denchmark-link&gt;
 Is this happening with just this model or is it happening with other models too. Can you please try this in a basic example and also using tf-nightly and let me know i the issue still persists. Thanks!
		</comment>
		<comment id='4' author='NikosSpanos' date='2020-09-12T09:48:17Z'>
		&lt;denchmark-link:https://github.com/gowthamkpr&gt;@gowthamkpr&lt;/denchmark-link&gt;
 Can you please validate that my statement is valid? Because I have posted in the past the same question on StackOverflow (link &lt;denchmark-link:https://stackoverflow.com/questions/62912769/min-delta-on-callbacks-function-of-keras-model-seems-to-not-take-effect&gt;here&lt;/denchmark-link&gt;
).
Based on the answers given in the posted SO question, I figured out that the minimum_delta is not the difference between validation_loss of epochs, but rather is the number below which if no improvement is spotted for 10 consecutive epochs then the training stops. So in my posted example above, since minimum delta=0.002 and validation loss: 0.01803 &gt; 0.002. The training continuous until validation loss &lt; 0.002
I believe that there is a bug in the TF code because Keras &lt;denchmark-link:https://keras.io/api/callbacks/early_stopping/&gt;documentation &lt;/denchmark-link&gt;
 states the following:
min_delta: Minimum change in the monitored quantity to qualify as an improvement, i.e. an absolute change of less than min_delta, will count as no improvement.
Change = difference (New Number - Original Number). However, based on what is written in my SO question this is not true.
Can you validate this statement. If you verify that my intuition is wrong, I will post a simpler example of the problem. Also, how am I suppose to use tf-nightly? I use TensorFlow v2.2
		</comment>
		<comment id='5' author='NikosSpanos' date='2020-09-14T18:07:46Z'>
		&lt;denchmark-link:https://github.com/NikosSpanos&gt;@NikosSpanos&lt;/denchmark-link&gt;
 As answered in stack overflow and as mentioned in the &lt;denchmark-link:https://keras.io/api/callbacks/early_stopping/&gt;documentation&lt;/denchmark-link&gt;
, its pretty clear that if you don't see the change (or improvement of min_delta) for the number of epochs of patience_value, the training stops.
This has nothing to do with ModelCheckpoint.
		</comment>
		<comment id='6' author='NikosSpanos' date='2020-09-21T18:34:01Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='7' author='NikosSpanos' date='2020-09-28T19:13:43Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='8' author='NikosSpanos' date='2020-09-28T19:13:47Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41417&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41417&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>