<bug id='7378' author='mkabra' open_date='2017-02-09T06:49:37Z' closed_time='2018-06-02T07:04:45Z'>
	<summary>Seg fault when using tf session with opencv 3</summary>
	<description>
Hi,
We noticed that when we try to use tensorflow with opencv 3, it consistently seg faults and crashes. The commands are:
&lt;denchmark-code&gt;import cv2
import numpy as np
import tensorflow as tf

with tf.Session() as sess:
    img = cv2.imread('messi5.jpg', 0)
    rows, cols = img.shape
    M = np.float32([[1, 0, 100], [0, 1, 50]])
    dst = cv2.warpAffine(img, M, (cols, rows))
    cv2.imshow('img', dst)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
&lt;/denchmark-code&gt;

Assuming you have a messi5.jpg in the folder (&lt;denchmark-link:https://raw.githubusercontent.com/abidrahmank/OpenCV2-Python-Tutorials/master/data/messi5.jpg&gt;https://raw.githubusercontent.com/abidrahmank/OpenCV2-Python-Tutorials/master/data/messi5.jpg&lt;/denchmark-link&gt;
)
We see this issue when we use tensorflow 0.12 GPU enabled, opencv 3.2.0 and python 2.7.6, CUDA 8.0 and CuDNN 5.1.5 . We did not observe this issue with opencv version 2.4.13 or 2.4.9.
We will also filed a bug report on opencv (&lt;denchmark-link:https://github.com/opencv/opencv/issues/8155&gt;opencv/opencv#8155&lt;/denchmark-link&gt;
)
	</description>
	<comments>
		<comment id='1' author='mkabra' date='2017-02-09T16:43:11Z'>
		&lt;denchmark-link:https://github.com/mkabra&gt;@mkabra&lt;/denchmark-link&gt;
 Can you check if importing TensorFlow first solves the problem (as mentioned by &lt;denchmark-link:https://github.com/yaroslavvb&gt;@yaroslavvb&lt;/denchmark-link&gt;
)?  This is not a great fix, but it might help with localization.
		</comment>
		<comment id='2' author='mkabra' date='2017-02-09T17:12:32Z'>
		Also you can try export CUDA_VISIBLE_DEVICES= to see if GPU is the factor. I've met bug reports failing to use opencv with TF because they used unofficial builds of opencv with cuda enabled.
		</comment>
		<comment id='3' author='mkabra' date='2017-02-09T17:23:39Z'>
		That can happen with official OpenCV version too. I've hit similar crash, and looking at gdb backtrace it was in some OpenCV function checking if OpenCL was enabled. My guess is that TensorFlow GPU binary unintentionally includes some OpenCL symbols which confuses opencv
The solution was to set the following before running your script
export OPENCV_OPENCL_RUNTIME=
		</comment>
		<comment id='4' author='mkabra' date='2017-02-14T10:20:43Z'>
		Importing tensorflow first didn't help. But (de-)setting CUDA_VISIBLE_DEVICES or OPENCV_OPENCL_RUNTIME individually worked. If this is an accepted solution, then feel free to close the bug.
Thanks!
And here is the stack trace if that helps:
Core was generated by `python test_warpaffine.py'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0 __GI___pthread_mutex_lock (mutex=0x0) at ../nptl/pthread_mutex_lock.c:66
66 ../nptl/pthread_mutex_lock.c: No such file or directory.
#0 __GI___pthread_mutex_lock (mutex=0x0) at ../nptl/pthread_mutex_lock.c:66
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/1&gt;#1&lt;/denchmark-link&gt;
 0x00007fd68579e008 in ?? ()
from /usr/lib/x86_64-linux-gnu/libnvidia-opencl.so.1
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/2&gt;#2&lt;/denchmark-link&gt;
 0x00007fd685852671 in ?? ()
from /usr/lib/x86_64-linux-gnu/libnvidia-opencl.so.1
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/3&gt;#3&lt;/denchmark-link&gt;
 0x00007fd6858527e5 in ?? ()
from /usr/lib/x86_64-linux-gnu/libnvidia-opencl.so.1
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/4&gt;#4&lt;/denchmark-link&gt;
 0x00007fd6857a3cb4 in ?? ()
from /usr/lib/x86_64-linux-gnu/libnvidia-opencl.so.1
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/5&gt;#5&lt;/denchmark-link&gt;
 0x00007fd6857a54e7 in ?? ()
from /usr/lib/x86_64-linux-gnu/libnvidia-opencl.so.1
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/6&gt;#6&lt;/denchmark-link&gt;
 0x00007fd685778c66 in ?? ()
from /usr/lib/x86_64-linux-gnu/libnvidia-opencl.so.1
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/7&gt;#7&lt;/denchmark-link&gt;
 0x00007fd685677f3d in ?? ()
from /usr/lib/x86_64-linux-gnu/libnvidia-opencl.so.1
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/8&gt;#8&lt;/denchmark-link&gt;
 0x00007fd685677ed8 in ?? ()
from /usr/lib/x86_64-linux-gnu/libnvidia-opencl.so.1
---Type to continue, or q to quit---
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/9&gt;#9&lt;/denchmark-link&gt;
 0x00007fd69c1fa022 in ?? () from /usr/local/cuda/lib64/libOpenCL.so
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/10&gt;#10&lt;/denchmark-link&gt;
 0x00007fd69c1fbd42 in ?? () from /usr/local/cuda/lib64/libOpenCL.so
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/11&gt;#11&lt;/denchmark-link&gt;
 0x00007fd69c1fb4d0 in clGetPlatformIDs ()
from /usr/local/cuda/lib64/libOpenCL.so
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/12&gt;#12&lt;/denchmark-link&gt;
 0x00007fd7139e4635 in (anonymous namespace)::opencl_fn3&lt;58, int, unsigned int, _cl_platform_id**, unsigned int*&gt;::switch_fn(unsigned int, _cl_platform_id**, unsigned int*) ()
from /localhome/kwaki/theano-env/extras/opencv-3.1.0/build/lib/libopencv_core.so.3.1
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/13&gt;#13&lt;/denchmark-link&gt;
 0x00007fd71393ebf3 in cv::ocl::haveOpenCL() ()
from /localhome/kwaki/theano-env/extras/opencv-3.1.0/build/lib/libopencv_core.so.3.1
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/14&gt;#14&lt;/denchmark-link&gt;
 0x00007fd71394ace5 in cv::ocl::useOpenCL() ()
from /localhome/kwaki/theano-env/extras/opencv-3.1.0/build/lib/libopencv_core.so.3.1
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/15&gt;#15&lt;/denchmark-link&gt;
 0x00007fd711c8273a in cv::warpAffine(cv::_InputArray const&amp;, cv::OutputArray const&amp;, cv::InputArray const&amp;, cv::Size, int, int, cv::Scalar const&amp;) ()
from /localhome/kwaki/theano-env/extras/opencv-3.1.0/build/lib/libopencv_imgproc.so.3.1
---Type to continue, or q to quit---
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/16&gt;#16&lt;/denchmark-link&gt;
 0x00007fd714a7bd03 in pyopencv_cv_warpAffine(_object*, _object*, _object*) () from /localhome/kwaki/theano-env/local/lib/python2.7/site-packages/cv2.so
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/17&gt;#17&lt;/denchmark-link&gt;
 0x000000000049968d in PyEval_EvalFrameEx ()
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/18&gt;#18&lt;/denchmark-link&gt;
 0x00000000004a1634 in ?? ()
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/19&gt;#19&lt;/denchmark-link&gt;
 0x000000000044e4a5 in PyRun_FileExFlags ()
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/20&gt;#20&lt;/denchmark-link&gt;
 0x000000000044ec9f in PyRun_SimpleFileExFlags ()
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/21&gt;#21&lt;/denchmark-link&gt;
 0x000000000044f904 in Py_Main ()
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/22&gt;#22&lt;/denchmark-link&gt;
 0x00007fd715963f45 in __libc_start_main (main=0x44f9c2
, argc=2,
argv=0x7ffd98ead878, init=, fini=,
rtld_fini=, stack_end=0x7ffd98ead868) at libc-start.c:287
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/23&gt;#23&lt;/denchmark-link&gt;
 0x0000000000578c4e in _start ()
		</comment>
		<comment id='5' author='mkabra' date='2017-02-14T22:56:11Z'>
		I believe that this will be difficult to reliably fix to never happen, but we should definitely include this in our documentation somewhere.
		</comment>
		<comment id='6' author='mkabra' date='2017-02-14T23:47:55Z'>
		To be precise, the issue to document is that Python client can't use both "tensorflow-gpu" and "someotherlibrary" where someotherlibrary uses OpenCL.
My guess at what's happening is that when you enable GPU, something in tensorflow loads libnvidia-opencl.so.1, and when you use opencv, it resolves its OpenCL symbols to libnvidia-opencl.so.1 instead of using correct version of .so (the one it was compiled for). The fundamental fix would need tracking down why OpenCL-related stuff is being touched by tensorflow that's not configured to use OpenCL
		</comment>
		<comment id='7' author='mkabra' date='2017-03-02T10:02:03Z'>
		I am also experiencing this issue on a daily basis, very annoying! It seems to be stochastic, which makes it very hard to pinpoint the cause. But I am also running OpenCV 3.2 and TF v1.0, so I guess there is the problem.
		</comment>
		<comment id='8' author='mkabra' date='2017-03-02T16:23:05Z'>
		&lt;denchmark-link:https://github.com/tomrunia&gt;@tomrunia&lt;/denchmark-link&gt;
  the solution above with  doesn't work? New OpenCV has GPU routines and TensorFlow doesn't like to share the GPU.
		</comment>
		<comment id='9' author='mkabra' date='2017-09-02T00:58:28Z'>
		I have the same issue seg fault in in tensorflow cv3 is imported (python) got around this by using pygame and sci-image..
		</comment>
		<comment id='10' author='mkabra' date='2017-12-20T19:29:20Z'>
		It has been 14 days with no activity and this issue has an assignee.Please update the label and/or status accordingly.
		</comment>
		<comment id='11' author='mkabra' date='2018-01-04T19:18:46Z'>
		It has been 14 days with no activity and this issue has an assignee.Please update the label and/or status accordingly.
		</comment>
		<comment id='12' author='mkabra' date='2018-01-24T13:18:53Z'>
		Nagging Assignee: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='13' author='mkabra' date='2018-02-07T20:42:09Z'>
		where do we put export OPENCV_OPENCL_RUNTIME= ?
Do we put that in the bashrc file?
		</comment>
		<comment id='14' author='mkabra' date='2018-02-09T00:15:01Z'>
		It looks as if the solution suggests
export OPENCV_OPENCL_RUNTIME=
in your shell, e.g. bash on linux.
		</comment>
		<comment id='15' author='mkabra' date='2018-02-09T05:25:26Z'>
		Just compile --config=monolithic :libtensorflow_cc and then it'll work at least in C++. There appears to be something with tensorflow_framework library that is interfering with opencv
		</comment>
		<comment id='16' author='mkabra' date='2018-02-23T14:06:21Z'>
		Nagging Awaiting Response: It has been 14 days with no activityand the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='17' author='mkabra' date='2018-03-10T13:16:15Z'>
		Nagging Awaiting Response: It has been 14 days with no activityand the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='18' author='mkabra' date='2018-03-10T17:52:59Z'>
		It is, because now boost does not work for me in the same programs where I'm using tensorflow because I had to set ABI=0 during compilation, but boost expects ABI=1
		</comment>
		<comment id='19' author='mkabra' date='2018-03-25T12:38:04Z'>
		It has been 14 days with no activity and the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='20' author='mkabra' date='2018-04-17T12:45:11Z'>
		It has been 14 days with no activity and the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='21' author='mkabra' date='2018-05-02T18:46:10Z'>
		It has been 29 days with no activity and the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='22' author='mkabra' date='2018-05-17T18:56:14Z'>
		It has been 67 days with no activity and the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='23' author='mkabra' date='2018-06-02T07:17:13Z'>
		We are closing this issue for now due to lack of activity. Please comment if this is still an issue for you. Thanks!
		</comment>
		<comment id='24' author='mkabra' date='2018-09-04T12:17:47Z'>
		I have the same error. I have built the binaries for both libraries in C++. None of the proposed solutions in this thread have worked to me. I installed latest versions of each library.
		</comment>
		<comment id='25' author='mkabra' date='2020-02-16T23:28:24Z'>
		I have the same issue and setting export OPENCV_OPENCL_RUNTIME= didn't work
		</comment>
	</comments>
</bug>