<bug id='29113' author='shkarupa-alex' open_date='2019-05-29T07:25:01Z' closed_time='2020-04-25T02:55:42Z'>
	<summary>All implicitly derived inputs to subclassed Models must be tf.Tensors (found SparseTensor)</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS X 10.14
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: no
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): ('v1.12.1-2821-gc5b8e15064', '2.0.0-dev20190527')
Python version: 2.7
Bazel version (if compiling from source): no
GCC/Compiler version (if compiling from source): no
CUDA/cuDNN version: no
GPU model and memory: no

Describe the current behavior
Exception raises when trying to feed Sparse/Ragged tensors to keras model.fit().
But that is an ordinary pipeline for Estimators.
Besides, method mentioned in error (self._add_inputs) does not exist in TF source code.
Describe the expected behavior
Sparse and Ragged tensors should be acceptable input for keras models.
Code to reproduce the issue
import numpy as np
import tensorflow as tf

FEATURES_DIM = 5
_randoms = np.random.random((10, 32, FEATURES_DIM))

# # This is my wish: ragged input to sequence feature column
# features = tf.RaggedTensor.from_tensor(_randoms, ragged_rank=1)
# labels = tf.reduce_sum(tf.expand_dims(features, axis=-2), axis=-1)

# This is what should work right now
_indexes = tf.where(tf.not_equal(_randoms, 0.0))
_values = tf.gather_nd(_randoms, _indexes)
features = tf.SparseTensor(_indexes, _values, _randoms.shape)
labels = tf.sparse.reduce_sum(features, axis=-1, keepdims=True)    

dataset = tf.data.Dataset \
    .from_tensor_slices(({'features': features}, labels)) \
    .batch(32)


class MyModel(tf.keras.Model):
    def __init__(self):
        super(MyModel, self).__init__()
        self.features = tf.keras.experimental.SequenceFeatures([
            tf.feature_column.sequence_numeric_column('features', shape=(FEATURES_DIM,))
        ])
        self.dense_1 = tf.keras.layers.TimeDistributed(tf.keras.layers.Dense(32, activation='relu'))
        self.dense_2 = tf.keras.layers.TimeDistributed(tf.keras.layers.Dense(1))

    def call(self, inputs):
        outputs = self.features(inputs)
        outputs = self.dense_1(outputs)
        outputs = self.dense_2(outputs)
        
        return outputs

    def compute_output_shape(self, input_shape):
        shape = tf.TensorShape(input_shape).as_list()
        shape[-1] = 1
        
        return tf.TensorShape(shape)

    
model = MyModel()
model.compile(optimizer='Adam', loss='mse')
model.fit_generator(dataset, epochs=5)
Other info / logs
Epoch 1/5
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-37-1cf666c5a52e&gt; in &lt;module&gt;()
     40 model = MyModel()
     41 model.compile(optimizer='Adam', loss='mse')
---&gt; 42 model.fit_generator(dataset, epochs=5)

/usr/local/lib/python2.7/site-packages/tensorflow/python/keras/engine/training.pyc in fit_generator(self, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, validation_freq, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)
   1175         shuffle=shuffle,
   1176         initial_epoch=initial_epoch,
-&gt; 1177         steps_name='steps_per_epoch')
   1178 
   1179   def evaluate_generator(self,

/usr/local/lib/python2.7/site-packages/tensorflow/python/keras/engine/training_generator.pyc in model_iteration(model, data, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, validation_freq, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch, mode, batch_size, steps_name, **kwargs)
    262 
    263       is_deferred = not model._is_compiled
--&gt; 264       batch_outs = batch_function(*batch_data)
    265       if not isinstance(batch_outs, list):
    266         batch_outs = [batch_outs]

/usr/local/lib/python2.7/site-packages/tensorflow/python/keras/engine/training.pyc in train_on_batch(self, x, y, sample_weight, class_weight, reset_metrics)
    895     x, y, sample_weights = self._standardize_user_data(
    896         x, y, sample_weight=sample_weight, class_weight=class_weight,
--&gt; 897         extract_tensors_from_dataset=True)
    898 
    899     # If `self._distribution_strategy` is True, then we are in a replica context

/usr/local/lib/python2.7/site-packages/tensorflow/python/keras/engine/training.pyc in _standardize_user_data(self, x, y, sample_weight, class_weight, batch_size, check_steps, steps_name, steps, validation_split, shuffle, extract_tensors_from_dataset)
   2341               'tf.Tensors (found %s). To add non-tf.Tensor inputs, please call '
   2342               'self._add_inputs(tf.keras.Input/SparseInput/RaggedInput (etc)) '
-&gt; 2343               'in your subclassed Model object.' % (input_tensor,))
   2344 
   2345       # Build the model using the retrieved inputs (value or symbolic).

ValueError: All implicitly derived inputs to subclassed Models must be tf.Tensors (found SparseTensor(indices=tf.Tensor(
[[ 0  0  0]
 [ 0  0  1]
 [ 0  0  2]
 ...
 [ 9 31  2]
 [ 9 31  3]
 [ 9 31  4]], shape=(1600, 3), dtype=int64), values=tf.Tensor([0.76254113 0.44757111 0.9459519  ... 0.64881651 0.2802026  0.79660244], shape=(1600,), dtype=float64), dense_shape=tf.Tensor([32 32  5], shape=(3,), dtype=int64))). To add non-tf.Tensor inputs, please call self._add_inputs(tf.keras.Input/SparseInput/RaggedInput (etc)) in your subclassed Model object.
	</description>
	<comments>
		<comment id='1' author='shkarupa-alex' date='2019-05-30T10:07:19Z'>
		&lt;denchmark-link:https://github.com/shkarupa-alex&gt;@shkarupa-alex&lt;/denchmark-link&gt;
 It looks code snippet is incomplete. Can you please provide complete code to reproduce the reported issue. Thanks!
		</comment>
		<comment id='2' author='shkarupa-alex' date='2019-05-31T10:20:30Z'>
		
@shkarupa-alex It looks code snippet is incomplete. Can you please provide complete code to reproduce the reported issue. Thanks!

You're right, mistake found.
Code in first message updated.
		</comment>
		<comment id='3' author='shkarupa-alex' date='2019-05-31T10:36:59Z'>
		&lt;denchmark-link:https://github.com/shkarupa-alex&gt;@shkarupa-alex&lt;/denchmark-link&gt;
 Thanks for updating. Now, I am able to reproduce the issue. Thanks!
		</comment>
		<comment id='4' author='shkarupa-alex' date='2019-08-30T14:16:14Z'>
		Hi &lt;denchmark-link:https://github.com/shkarupa-alex&gt;@shkarupa-alex&lt;/denchmark-link&gt;
,
This error is occurring because we can't yet infer the shape of CompositeTensor inputs for subclassed Models. To get around it, please create a tf.keras.Input(..., sparse=True) in your init, and call self._add_inputs([my_input]). This will allow us to properly shape-check the input object.
		</comment>
		<comment id='5' author='shkarupa-alex' date='2019-10-31T03:17:30Z'>
		&lt;denchmark-link:https://github.com/markomernick&gt;@markomernick&lt;/denchmark-link&gt;

shkarupa-alex already said "Besides, method mentioned in error (self._add_inputs) does not exist in TF source code".
		</comment>
		<comment id='6' author='shkarupa-alex' date='2019-11-01T10:17:31Z'>
		
@markomernick
shkarupa-alex already said "Besides, method mentioned in error (self._add_inputs) does not exist in TF source code".

Forget about this method.
Using tf.keras.Input(..., sparse=True) as input placeholder do the trick.
		</comment>
		<comment id='7' author='shkarupa-alex' date='2019-11-09T02:15:45Z'>
		I have a similar problem where one of the features is a tf.sparse.SparseTensor. As the it is said above, self._add_inputs does not exist. In the snippet
class M(tf.keras.Model):
  def __init__(self):
    super(M, self).__init__()
    ...
    self._features = tf.keras.layers.DenseFeatures([...])

  def call(self, inputs):
    # inputs is a dict of sparse tensors.
    layer = self._features(inputs)
    ...
    return prediction
What is the best way to make the code work considering that self._add_inputs does not exist?
		</comment>
		<comment id='8' author='shkarupa-alex' date='2020-04-25T02:55:42Z'>
		Thanks for the issue. This code now works in the latest nightly (note that SequenceFeatures returns a list of features):
import numpy as np
import tensorflow as tf

FEATURES_DIM = 5
_randoms = np.random.random((10, 32, FEATURES_DIM))

# # This is my wish: ragged input to sequence feature column
# features = tf.RaggedTensor.from_tensor(_randoms, ragged_rank=1)
# labels = tf.reduce_sum(tf.expand_dims(features, axis=-2), axis=-1)

# This is what should work right now
_indexes = tf.where(tf.not_equal(_randoms, 0.0))
_values = tf.gather_nd(_randoms, _indexes)
features = tf.SparseTensor(_indexes, _values, _randoms.shape)
labels = tf.sparse.reduce_sum(features, axis=-1, keepdims=True)    

dataset = tf.data.Dataset \
    .from_tensor_slices(({'features': features}, labels)) \
    .batch(32)


class MyModel(tf.keras.Model):
    def __init__(self):
        super(MyModel, self).__init__()
        self.features = tf.keras.experimental.SequenceFeatures([
            tf.feature_column.sequence_numeric_column('features', shape=(FEATURES_DIM,))
        ])
        self.dense_1 = tf.keras.layers.TimeDistributed(tf.keras.layers.Dense(32, activation='relu'))
        self.dense_2 = tf.keras.layers.TimeDistributed(tf.keras.layers.Dense(1))

    def call(self, inputs):
        outputs = self.features(inputs)
        outputs = self.dense_1(outputs[0])
        outputs = self.dense_2(outputs)
        
        return outputs

    
model = MyModel()
model.compile(optimizer='Adam', loss='mse')
model.fit_generator(dataset, epochs=5)
		</comment>
		<comment id='9' author='shkarupa-alex' date='2020-04-25T02:55:44Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/29113&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/29113&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>