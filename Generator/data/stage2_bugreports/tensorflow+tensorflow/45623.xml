<bug id='45623' author='asaf92' open_date='2020-12-12T10:11:24Z' closed_time='2020-12-13T11:49:21Z'>
	<summary>NaN predictions/gradients/losses in basic GAN training</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Windows 10
TensorFlow installed from (source or binary):
Conda
TensorFlow version (use command below):
2.2.0
Python version:
3.7.9
CUDA/cuDNN version:
10.1.243
7.6.5
GPU model and memory:
RTX3080 10GB VRAM


When training simple GAN models using the exact code from the documentation (&lt;denchmark-link:https://www.tensorflow.org/tutorials/generative/dcgan&gt;"DCGAN"&lt;/denchmark-link&gt;
 &amp; &lt;denchmark-link:https://www.tensorflow.org/guide/keras/writing_a_training_loop_from_scratch&gt;"Writing a training loop from scratch"&lt;/denchmark-link&gt;
), the generator predicts "nan" after one or two training steps.
When debugging and looking at the gradients, I see that some layers' gradients have nan values
Describe the expected behavior
The model should predict actual numbers and not GANs, or 2 different documentation articles need to be fixed.

I can't reproduce it on Colab, but here's the code I run on my PC:
&lt;denchmark-link:https://colab.research.google.com/gist/asaf92/8de8b9fc0e9e34c9079ebbe54f41e0b4/copy-of-gan-bug.ipynb&gt;https://colab.research.google.com/gist/asaf92/8de8b9fc0e9e34c9079ebbe54f41e0b4/copy-of-gan-bug.ipynb&lt;/denchmark-link&gt;

I get nan losses after the first epoch.
Other info / logs Include any logs or source code that would be helpful to
&lt;denchmark-code&gt;Connected to pydev debugger (build 202.7660.27)
2020-12-12 11:52:37.370048: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_101.dll
2020-12-12 11:52:40.950277: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library nvcuda.dll
2020-12-12 11:52:40.987435: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1561] Found device 0 with properties: 
pciBusID: 0000:65:00.0 name: GeForce RTX 3080 computeCapability: 8.6
coreClock: 1.71GHz coreCount: 68 deviceMemorySize: 10.00GiB deviceMemoryBandwidth: 707.88GiB/s
2020-12-12 11:52:40.988331: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_101.dll
2020-12-12 11:52:40.997389: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_10.dll
2020-12-12 11:52:41.004564: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_10.dll
2020-12-12 11:52:41.006971: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_10.dll
2020-12-12 11:52:41.013938: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_10.dll
2020-12-12 11:52:41.016784: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_10.dll
2020-12-12 11:52:41.028209: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-12-12 11:52:41.028663: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1703] Adding visible gpu devices: 0
2020-12-12 11:52:41.030082: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2
2020-12-12 11:52:41.049835: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x1c04f8b7f70 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2020-12-12 11:52:41.050215: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
2020-12-12 11:52:41.050521: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1561] Found device 0 with properties: 
pciBusID: 0000:65:00.0 name: GeForce RTX 3080 computeCapability: 8.6
coreClock: 1.71GHz coreCount: 68 deviceMemorySize: 10.00GiB deviceMemoryBandwidth: 707.88GiB/s
2020-12-12 11:52:41.050776: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_101.dll
2020-12-12 11:52:41.051112: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_10.dll
2020-12-12 11:52:41.051189: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_10.dll
2020-12-12 11:52:41.051269: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_10.dll
2020-12-12 11:52:41.051347: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_10.dll
2020-12-12 11:52:41.051767: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_10.dll
2020-12-12 11:52:41.051965: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-12-12 11:52:41.052387: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1703] Adding visible gpu devices: 0
2020-12-12 11:52:42.074102: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1102] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-12-12 11:52:42.074197: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1108]      0 
2020-12-12 11:52:42.074417: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1121] 0:   N 
2020-12-12 11:52:42.075088: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1247] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8454 MB memory) -&gt; physical GPU (device: 0, name: GeForce RTX 3080, pci bus id: 0000:65:00.0, compute capability: 8.6)
2020-12-12 11:52:42.082271: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x1c004532730 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:
2020-12-12 11:52:42.082872: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): GeForce RTX 3080, Compute Capability 8.6
Model: "discriminator"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d (Conv2D)              (None, 14, 14, 64)        640       
_________________________________________________________________
leaky_re_lu (LeakyReLU)      (None, 14, 14, 64)        0         
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 7, 7, 128)         73856     
_________________________________________________________________
leaky_re_lu_1 (LeakyReLU)    (None, 7, 7, 128)         0         
_________________________________________________________________
global_max_pooling2d (Global (None, 128)               0         
_________________________________________________________________
dense (Dense)                (None, 1)                 129       
=================================================================
Total params: 74,625
Trainable params: 74,625
Non-trainable params: 0
_________________________________________________________________

Start epoch 0
2020-12-12 11:52:43.175082: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_10.dll
2020-12-12 11:52:43.567573: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
2020-12-12 11:52:46.072136: W tensorflow/stream_executor/gpu/redzone_allocator.cc:314] Internal: Invoking GPU asm compilation is supported on Cuda non-Windows platforms only
Relying on driver to perform ptx compilation. 
Modify $PATH to customize ptxas location.
This message will be only logged once.
discriminator loss at step 0: 0.69
adversarial loss at step 0: 0.76

Start epoch 1
discriminator loss at step 0: nan
adversarial loss at step 0: nan

Start epoch 2
discriminator loss at step 0: nan
adversarial loss at step 0: nan

Start epoch 3
discriminator loss at step 0: nan
adversarial loss at step 0: nan

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='asaf92' date='2020-12-12T12:24:53Z'>
		My initial guess would be that training is unstable because your GPU uses TensorFloat32, which has the same precision as half precision (10 bits).
In the case of half precision this instability is addressed by adaptively scaling the loss and weight updates inversely so that mathematically nothing changes but the available numeric ranges are better utilized.
Maybe try to use something like &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/mixed_precision/experimental/DynamicLossScale&gt;tf.mixed_precision.experimental.DynamicLossScale&lt;/denchmark-link&gt;
 on the loss and gradients. See &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/mixed_precision/experimental/LossScale&gt;here&lt;/denchmark-link&gt;
 for usage instructions.
Another problem may simply be that you are using Windows, as indicated by the warning you got.
		</comment>
		<comment id='2' author='asaf92' date='2020-12-13T11:49:21Z'>
		I tried your solution and although it sometimes helps with eliminating the nans, it seems that RTX3080 requires CUDA11 which is not used by TensorFlow2.2 version.
There are many bugs with Cuda 10.1 and Ampere (RTX30xx) cards
		</comment>
		<comment id='3' author='asaf92' date='2020-12-13T11:49:23Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/45623&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/45623&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>