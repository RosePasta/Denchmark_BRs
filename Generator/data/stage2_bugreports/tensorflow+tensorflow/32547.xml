<bug id='32547' author='richardwth' open_date='2019-09-16T06:07:16Z' closed_time='2020-04-06T19:39:17Z'>
	<summary>tensorflow.contrib.integrate.odeint does not work with the default __call__ method of subclass of tf.Keras.layers.Layer</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 19.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): both 1.14 and 1.15-rc0
Python version: 3.7
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: 10.1/7.0
GPU model and memory: Titan RTX, 24 GB

Describe the current behavior
For Tensorflow 1.14:
When defining ODE function using the default __call__ method of any subclass of tf.Keras.layers.Layer, an ValueError is raised, stating VarIsInitializedOp has been marked as not fetchable. To avoid this issue, the ODE function has to be defined using either pure TensorFlow functions, or the call method of the subclass instead of __call__.
For Tensorflow 1.15-rc0:
The same code will run forever without error message. The above solution (using call instead of __call__) also applies here.
Describe the expected behavior
tensorflow.contrib.integrate.odeint should work with the default __call__ method of any subclass of tf.Keras.layers.Layer under both TensorFlow 1.14 and 1.15-rc0.
Code to reproduce the issue
import tensorflow as tf
from tensorflow.python.keras import backend, layers, Input
backend.clear_session()
from tensorflow.contrib.integrate import odeint

x = Input(shape=(10,))
l0 = layers.Dense(units=10)
l0.build(x.shape)  # this line is necessary only to make call work

def ode_func(h, t, *ode_params):
    return l0(h)  # l0.call(h) avoids the error which is hacky

ts = tf.constant([0., 1.], dtype=tf.float64)
h_ts = odeint(ode_func, x, ts)
Other info / logs
For TensorFlow 1.14: ValueError: '.../VarIsInitializedOp' not fetchable; click here for detailed logs.

---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-3-ad0e95799922&gt; in &lt;module&gt;()
     13 print('code start')
     14 
---&gt; 15 h_ts = odeint(ode_func, x, ts)
     16 
     17 print('code finished')

23 frames
/usr/local/lib/python3.6/dist-packages/tensorflow/contrib/integrate/python/ops/odes.py in odeint(func, y0, t, rtol, atol, method, options, full_output, name)
    538         full_output=full_output,
    539         name=scope,
--&gt; 540         **options)
    541 
    542 

/usr/local/lib/python3.6/dist-packages/tensorflow/contrib/integrate/python/ops/odes.py in _dopri5(func, y0, t, rtol, atol, full_output, first_step, safety, ifactor, dfactor, max_num_steps, name)
    403         lambda _, __, ___, i: i &lt; num_times,
    404         interpolate, (solution, history, rk_state, 1),
--&gt; 405         name='interpolate_loop')
    406 
    407     y = solution.stack(name=scope)

/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/control_flow_ops.py in while_loop(cond, body, loop_vars, shape_invariants, parallel_iterations, back_prop, swap_memory, name, maximum_iterations, return_same_structure)
   3499       ops.add_to_collection(ops.GraphKeys.WHILE_CONTEXT, loop_context)
   3500     result = loop_context.BuildLoop(cond, body, loop_vars, shape_invariants,
-&gt; 3501                                     return_same_structure)
   3502     if maximum_iterations is not None:
   3503       return result[1]

/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/control_flow_ops.py in BuildLoop(self, pred, body, loop_vars, shape_invariants, return_same_structure)
   3010       with ops.get_default_graph()._mutation_lock():  # pylint: disable=protected-access
   3011         original_body_result, exit_vars = self._BuildLoop(
-&gt; 3012             pred, body, original_loop_vars, loop_vars, shape_invariants)
   3013     finally:
   3014       self.Exit()

/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/control_flow_ops.py in _BuildLoop(self, pred, body, original_loop_vars, loop_vars, shape_invariants)
   2935         expand_composites=True)
   2936     pre_summaries = ops.get_collection(ops.GraphKeys._SUMMARY_COLLECTION)  # pylint: disable=protected-access
-&gt; 2937     body_result = body(*packed_vars_for_body)
   2938     post_summaries = ops.get_collection(ops.GraphKeys._SUMMARY_COLLECTION)  # pylint: disable=protected-access
   2939     if not nest.is_sequence_or_composite(body_result):

/usr/local/lib/python3.6/dist-packages/tensorflow/contrib/integrate/python/ops/odes.py in interpolate(solution, history, rk_state, i)
    381             lambda rk_state, *_: t[i] &gt; rk_state.t1,
    382             adaptive_runge_kutta_step, (rk_state, history, 0),
--&gt; 383             name='integrate_loop')
    384         y = _interp_evaluate(rk_state.interp_coeff, rk_state.t0, rk_state.t1,
    385                              t[i])

/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/control_flow_ops.py in while_loop(cond, body, loop_vars, shape_invariants, parallel_iterations, back_prop, swap_memory, name, maximum_iterations, return_same_structure)
   3499       ops.add_to_collection(ops.GraphKeys.WHILE_CONTEXT, loop_context)
   3500     result = loop_context.BuildLoop(cond, body, loop_vars, shape_invariants,
-&gt; 3501                                     return_same_structure)
   3502     if maximum_iterations is not None:
   3503       return result[1]

/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/control_flow_ops.py in BuildLoop(self, pred, body, loop_vars, shape_invariants, return_same_structure)
   3010       with ops.get_default_graph()._mutation_lock():  # pylint: disable=protected-access
   3011         original_body_result, exit_vars = self._BuildLoop(
-&gt; 3012             pred, body, original_loop_vars, loop_vars, shape_invariants)
   3013     finally:
   3014       self.Exit()

/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/control_flow_ops.py in _BuildLoop(self, pred, body, original_loop_vars, loop_vars, shape_invariants)
   2935         expand_composites=True)
   2936     pre_summaries = ops.get_collection(ops.GraphKeys._SUMMARY_COLLECTION)  # pylint: disable=protected-access
-&gt; 2937     body_result = body(*packed_vars_for_body)
   2938     post_summaries = ops.get_collection(ops.GraphKeys._SUMMARY_COLLECTION)  # pylint: disable=protected-access
   2939     if not nest.is_sequence_or_composite(body_result):

/usr/local/lib/python3.6/dist-packages/tensorflow/contrib/integrate/python/ops/odes.py in adaptive_runge_kutta_step(rk_state, history, n_steps)
    345       with ops.control_dependencies(
    346           [check_underflow, check_max_num_steps, check_numerics]):
--&gt; 347         y1, f1, y1_error, k = _runge_kutta_step(func, y0, f0, t0, dt)
    348 
    349       with ops.name_scope('error_ratio'):

/usr/local/lib/python3.6/dist-packages/tensorflow/contrib/integrate/python/ops/odes.py in _runge_kutta_step(func, y0, f0, t0, dt, tableau, name)
    121       ti = t0 + alpha_i * dt
    122       yi = y0 + _scaled_dot_product(dt_cast, beta_i, k)
--&gt; 123       k.append(func(yi, ti))
    124 
    125     if not (tableau.c_sol[-1] == 0 and tableau.c_sol[:-1] == tableau.beta[-1]):

&lt;ipython-input-3-ad0e95799922&gt; in ode_func(h, t, *ode_params)
      8 
      9 def ode_func(h, t, *ode_params):
---&gt; 10     return l0(h)  # l0.call(h) avoids the error which is hacky
     11 
     12 ts = tf.constant([0., 1.], dtype=tf.float64)

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in __call__(self, inputs, *args, **kwargs)
    559       # framework.
    560       if base_layer_utils.needs_keras_history(inputs):
--&gt; 561         base_layer_utils.create_keras_history(inputs)
    562 
    563     # Handle Keras mask propagation from previous layer to current layer.

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer_utils.py in create_keras_history(tensors)
    198     keras_tensors: The Tensors found that came from a Keras Layer.
    199   """
--&gt; 200   _, created_layers = _create_keras_history_helper(tensors, set(), [])
    201   return created_layers
    202 

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer_utils.py in _create_keras_history_helper(tensors, processed_ops, created_layers)
    244             constants[i] = backend.function([], op_input)([])
    245       processed_ops, created_layers = _create_keras_history_helper(
--&gt; 246           layer_inputs, processed_ops, created_layers)
    247       name = op.name
    248       node_def = op.node_def.SerializeToString()

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer_utils.py in _create_keras_history_helper(tensors, processed_ops, created_layers)
    244             constants[i] = backend.function([], op_input)([])
    245       processed_ops, created_layers = _create_keras_history_helper(
--&gt; 246           layer_inputs, processed_ops, created_layers)
    247       name = op.name
    248       node_def = op.node_def.SerializeToString()

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer_utils.py in _create_keras_history_helper(tensors, processed_ops, created_layers)
    242             constants[i] = op_input
    243           else:
--&gt; 244             constants[i] = backend.function([], op_input)([])
    245       processed_ops, created_layers = _create_keras_history_helper(
    246           layer_inputs, processed_ops, created_layers)

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/backend.py in __call__(self, inputs)
   3251     inputs = nest.flatten(inputs)
   3252 
-&gt; 3253     session = get_session(inputs)
   3254     feed_arrays = []
   3255     array_vals = []

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/backend.py in get_session(op_input_list)
    460   if not _MANUAL_VAR_INIT:
    461     with session.graph.as_default():
--&gt; 462       _initialize_variables(session)
    463   return session
    464 

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/backend.py in _initialize_variables(session)
    877     # marked as initialized.
    878     is_initialized = session.run(
--&gt; 879         [variables_module.is_variable_initialized(v) for v in candidate_vars])
    880     uninitialized_vars = []
    881     for flag, v in zip(is_initialized, candidate_vars):

/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py in run(self, fetches, feed_dict, options, run_metadata)
    948     try:
    949       result = self._run(None, fetches, feed_dict, options_ptr,
--&gt; 950                          run_metadata_ptr)
    951       if run_metadata:
    952         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)

/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py in _run(self, handle, fetches, feed_dict, options, run_metadata)
   1156     # Create a fetch handler to take care of the structure of fetches.
   1157     fetch_handler = _FetchHandler(
-&gt; 1158         self._graph, fetches, feed_dict_tensor, feed_handles=feed_handles)
   1159 
   1160     # Run request and get response.

/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py in __init__(self, graph, fetches, feeds, feed_handles)
    485         self._ops.append(True)
    486       else:
--&gt; 487         self._assert_fetchable(graph, fetch.op)
    488         self._fetches.append(fetch)
    489         self._ops.append(False)

/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py in _assert_fetchable(self, graph, op)
    498     if not graph.is_fetchable(op):
    499       raise ValueError(
--&gt; 500           'Operation %r has been marked as not fetchable.' % op.name)
    501 
    502   def fetches(self):

ValueError: Operation 'odeint/interpolate_loop/interpolate/integrate_loop/runge_kutta_step/VarIsInitializedOp' has been marked as not fetchable.


	</description>
	<comments>
		<comment id='1' author='richardwth' date='2019-09-16T21:05:32Z'>
		&lt;denchmark-link:https://github.com/richardwth&gt;@richardwth&lt;/denchmark-link&gt;
 I don't see any error in colab using Tensorflow 1.15.rco but its running for ever. Please take a look at Github gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gowthamkpr/88b90d105739479b2f40b30df5cd0577/untitled142.ipynb&gt;here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='richardwth' date='2019-09-17T01:17:42Z'>
		
@richardwth I don't see any error in colab using Tensorflow 1.15.rco but its running for ever. Please take a look at Github gist here.

Yes, I can confirm that using your colab script, for Tensorflow 1.15-rc0, the code runs forever without error message; for Tensorflow 1.14, the same error as I mentioned occurs. I've updated my description.
		</comment>
		<comment id='3' author='richardwth' date='2020-04-06T19:39:17Z'>
		We don't expect contrib to work with Keras, and probably cannot support it in the near future. Closing it for now.
		</comment>
		<comment id='4' author='richardwth' date='2020-04-06T19:39:19Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32547&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32547&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>