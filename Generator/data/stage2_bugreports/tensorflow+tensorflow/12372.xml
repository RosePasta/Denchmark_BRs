<bug id='12372' author='danieldjohnson' open_date='2017-08-17T21:08:36Z' closed_time='2017-08-21T20:16:27Z'>
	<summary>tf.contrib.data.Dataset does not correctly handle nested dictionaries</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 14.04
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v1.3.0-rc2-20-g0787eee
Python version: 2.7
Bazel version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:
Exact command to reproduce:

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

tf.contrib.data.Dataset objects do not correctly deal with nested dictionary structures. When using a dataset with a nested dictionary, the inner dictionaries are replaced with the first tensor in that inner dictionary, and following tensors are restored for incorrect keys.
This is not an issue with , only with datasets, which appear to instead use . The particular difference causing the bug appears to be &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/util/nest.py#L279&gt;https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/util/nest.py#L279&lt;/denchmark-link&gt;
 vs. &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/contrib/data/python/util/nest.py#L184&gt;https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/contrib/data/python/util/nest.py#L184&lt;/denchmark-link&gt;

&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

import tensorflow as tf
from tensorflow.contrib.data.python.util import nest as data_nest

test_value = {
    "a": {
        "aa": tf.constant(1),
        "ab": tf.constant([2,2]),
    },
    "b": tf.constant([3, 3, 3]),
}


print tf.contrib.framework.nest.map_structure(lambda t: t.shape, test_value)
# {
#   'a': {
#       'aa': TensorShape([]),
#       'ab': TensorShape([Dimension(2)])
#   },
#   'b': TensorShape([Dimension(3)])
# } &lt;- these are the correct shapes


d = tf.contrib.data.Dataset.from_tensors(test_value)
print d.output_shapes
# {
#   'a': TensorShape([]),
#   'b': TensorShape([Dimension(2)])
# } &lt;- incorrect

print data_nest.map_structure(lambda t: t.shape, test_value)
# {
#   'a': TensorShape([]),
#   'b': TensorShape([Dimension(2)])
# } &lt;- incorrect
	</description>
	<comments>
		<comment id='1' author='danieldjohnson' date='2017-08-17T23:32:51Z'>
		Thanks for pointing out this bug, and helping to narrow down the cause! We're working on a fix presently.
		</comment>
	</comments>
</bug>