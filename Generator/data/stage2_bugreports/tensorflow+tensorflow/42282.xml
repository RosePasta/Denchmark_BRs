<bug id='42282' author='mhmedeng' open_date='2020-08-12T20:09:59Z' closed_time='2020-08-27T11:25:49Z'>
	<summary>How can i solve data transferred from slave to master using SPI?</summary>
	<description>
I tried to make a communication between two AVR (ATmega128) using SPI. Data transferred correctly from master to slave but data transferred wrong from slave to master, the first sampled bit is always wrong. Slave sends (0X7E) to master but the received data is (0X3F). Where is the mistake?
Code of MASTER
#define F_CPU 16000000UL
#include &lt;avr/io.h&gt;
#include &lt;util/delay.h&gt;
#define DDR_SPI DDRB
#define DD_MOSI PB2
#define DD_SCK PB1
#define DD_SS PB0
#define ACK 0x7E
void SPI_MasterInit(void)
{
/* Set MOSI and SCK output /
DDR_SPI |= (1&lt;&lt;DD_MOSI) | (1&lt;&lt;DD_SCK) | (1&lt;&lt;DD_SS);
PORTB |= 1;
/ Enable SPI, Master, set clock rate fck/128 */
SPCR |= (1&lt;&lt;SPE)|(1&lt;&lt;MSTR)|(1&lt;&lt;SPR0)|(1&lt;&lt;SPR1);
}
unsigned char SPI_MasterTransmit(unsigned char cData)
{
PORTB &amp;= ~(1&lt;&lt;0);
while( (PORTB &amp; (1&lt;&lt;0)) );
/* Start transmission /
SPDR = cData;
/ Wait for transmission complete */
while(!(SPSR &amp; (1&lt;&lt;SPIF)));
PORTB |= 1;
return SPDR;
}
void ADC_Init()
{
//ADC enable
ADCSRA |= (1&lt;&lt;ADEN);
//division factor --&gt; 128
ADCSRA |= (1&lt;&lt;ADPS0) | (1&lt;&lt;ADPS1) | (1&lt;&lt;ADPS2);
//left adjusted (8 bit mode) (ADCH)
ADMUX |= (1&lt;&lt;ADLAR);
//input channel --&gt; ADC2 (only one channel can be used in the conversion at a time)
ADMUX |= (1&lt;&lt;MUX1);
}
unsigned char ADC_StartConversion()
{
ADCSRA |= (1 &lt;&lt; ADSC);
while(ADCSRA &amp; (1&lt;&lt;ADSC));
return ADCH;
}
int main(void)
{
DDRC = 1;
ADC_Init();
SPI_MasterInit();
unsigned char data;
unsigned char ret;
while (1)
{
data = ADC_StartConversion();
ret = SPI_MasterTransmit(data);
&lt;denchmark-code&gt;if(ret == ACK)
{
	PORTC = 1;
}

else
{
	PORTC = 0;
}
&lt;/denchmark-code&gt;

}
}
Code of SLAVE
#define F_CPU 16000000UL
#include &lt;avr/io.h&gt;
#include &lt;util/delay.h&gt;
#define DDR_SPI DDRB
#define DD_MISO 3
#define LED PC0
#define ACK 0x7E
void SPI_SlaveInit(void)
{
/* Set MISO output, all others input /
DDR_SPI = (1&lt;&lt;DD_MISO);
/ Enable SPI */
SPCR = (1&lt;&lt;SPE);
}
unsigned char SPI_SlaveReceive(char data)
{
SPDR = data;
/* Wait for reception complete /
while(!(SPSR &amp; (1&lt;&lt;SPIF)));
/ Return data register */
return SPDR;
}
int main(void)
{
DDRC |= (1&lt;&lt;LED);
SPI_SlaveInit();
unsigned char data;
while (1)
{
data = SPI_SlaveReceive(ACK);
if(data &gt;= 128)
{
PORTC |= (1&lt;&lt;LED);
}
else
{
PORTC &amp;= ~(1&lt;&lt;LED);
}
//_delay_ms(100);
}
}
	</description>
	<comments>
		<comment id='1' author='mhmedeng' date='2020-08-13T10:25:18Z'>
		&lt;denchmark-link:https://github.com/mhmedeng&gt;@mhmedeng&lt;/denchmark-link&gt;

I cannot see you using tensorflow in the code shared, or any issue cause due to tensorflow, please provide acolab gist with error faced due to tensor flow for us to help you.
Please update the issue template with the tensorflow version used.
		</comment>
		<comment id='2' author='mhmedeng' date='2020-08-20T10:27:37Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='3' author='mhmedeng' date='2020-08-27T11:25:47Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='4' author='mhmedeng' date='2020-08-27T11:25:50Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42282&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42282&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>