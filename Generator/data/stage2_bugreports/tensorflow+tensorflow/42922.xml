<bug id='42922' author='nirupamkar' open_date='2020-09-03T10:11:48Z' closed_time='2020-09-03T10:26:11Z'>
	<summary>Matrices do not consider sample weight</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): provided below
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): Docker
TensorFlow version (use command below): Below
Python version: 3.7

TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"
v2.3.0-rc2-23-gb36436b087 2.3.0
Describe the current behavior
When  sample weight is provided metrics do not consider that
Describe the expected behavior
When  sample weight is provided metrics should consider that
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np

data_size = 100
input_size=3
classes=2

x_train = np.random.rand(data_size ,input_size)
y_train= np.random.randint(0,classes,data_size )
x_val = np.random.rand(data_size ,input_size)
y_val= np.random.randint(0,classes,data_size )


inputs = tf.keras.layers.Input(shape=(input_size))
pred=tf.keras.layers.Dense(1, activation='sigmoid')(inputs)

model = tf.keras.models.Model(inputs=inputs, outputs=pred)

loss = tf.keras.losses.binary_crossentropy
metrics = tf.keras.metrics.BinaryCrossentropy()

model.compile(loss=loss , metrics=[metrics], optimizer='adam')


for layer in model.layers:
    layer.trainable = False


sample_weight_train = np.random.uniform(0,1,100)
sample_weight_val = np.random.uniform(0,1,100)
model.fit(x=x_train,y=y_train,sample_weight=sample_weight_train, validation_data=(x_val,y_val,sample_weight_val))
29ms/step - loss: 0.3799 - binary_crossentropy: 0.7369 - val_loss: 0.3454 - val_binary_crossentropy: 0.7502


pred1=model.predict(x_val)
log_loss(y_val,pred1,sample_weight=sample_weight_val),log_loss(y_val,pred1),log_loss(y_val,pred1,sample_weight=sample_weight_val)*np.sum(sample_weight_val)/len(sample_weight_val)
(0.7352043427636902, 0.7502077868580819, 0.34536829505647026)




&lt;/denchmark-code&gt;

Is it expected behaviour or am I missing something?
	</description>
	<comments>
		<comment id='1' author='nirupamkar' date='2020-09-03T10:26:11Z'>
		I needed to change compile code.
model.compile(loss=loss , optimizer='adam',weighted_metrics=[metrics])
Closing the issue.
		</comment>
		<comment id='2' author='nirupamkar' date='2020-09-03T10:26:12Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42922&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42922&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>