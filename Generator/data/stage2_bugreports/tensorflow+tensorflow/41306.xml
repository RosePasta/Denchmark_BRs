<bug id='41306' author='Isabellaleesln' open_date='2020-07-11T13:23:21Z' closed_time='2020-09-28T18:13:47Z'>
	<summary>ValueError: Tensor-typed variable initializers must either be wrapped in an init_scope or callable (e.g., `tf.Variable(lambda : tf.truncated_normal([10, 40]))`) when building functions.</summary>
	<description>
&lt;denchmark-h:h3&gt;Version&lt;/denchmark-h&gt;

OS Platform
Python 3.7.6
tensorflow 2.2.0
keras 2.3.0-tf
mem 64247.95703125
cpu 16
&lt;denchmark-h:h3&gt;Try to reproduce this work&lt;/denchmark-h&gt;

&lt;denchmark-link:https://www.kaggle.com/devang/transfer-learning-with-keras-and-mobilenet-v2&gt;https://www.kaggle.com/devang/transfer-learning-with-keras-and-mobilenet-v2&lt;/denchmark-link&gt;

&lt;denchmark-h:h3&gt;Issues&lt;/denchmark-h&gt;

&lt;denchmark-h:h2&gt;The error occurs when I try to define layers and compile model using:&lt;/denchmark-h&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

epochs = 100
batch_size = 150
testsplit = .2
targetx = 224
targety = 224
learning_rate = 0.0001
classes = 120
seed = random.randint(1, 1000)
shape=(targetx, targety, 3))
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dropout(rate = .2)(x)
x = BatchNormalization()(x)
x = Dense(1280, activation='relu', kernel_initializer=glorot_uniform(seed), bias_initializer='zeros')(x)
x = Dropout(rate = .2)(x)
x = BatchNormalization()(x)
predictions = Dense(classes, activation='softmax', kernel_initializer='random_uniform', bias_initializer='zeros')(x)
model = Model(inputs=base_model.input, outputs=predictions)
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Error report&lt;/denchmark-h&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

ValueError Traceback (most recent call last)
in
12 """
13
---&gt; 14 x = Dense(1280, activation='relu', kernel_initializer=glorot_uniform(seed), bias_initializer='zeros')(x)
15 x = Dropout(rate = .2)(x)
16 x = BatchNormalization()(x)
/apps/opt/anaconda3/envs/tensorflow/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py in symbolic_fn_wrapper(*args, **kwargs)
73 if _SYMBOLIC_SCOPE.value:
74 with get_graph().as_default():
---&gt; 75 return func(*args, **kwargs)
76 else:
77 return func(*args, **kwargs)
/apps/opt/anaconda3/envs/tensorflow/lib/python3.7/site-packages/keras/engine/base_layer.py in call(self, inputs, **kwargs)
461 'You can build it manually via: '
462 'layer.build(batch_input_shape)')
--&gt; 463 self.build(unpack_singleton(input_shapes))
464 self.built = True
465
/apps/opt/anaconda3/envs/tensorflow/lib/python3.7/site-packages/keras/layers/core.py in build(self, input_shape)
893 name='kernel',
894 regularizer=self.kernel_regularizer,
--&gt; 895 constraint=self.kernel_constraint)
896 if self.use_bias:
897 self.bias = self.add_weight(shape=(self.units,),
/apps/opt/anaconda3/envs/tensorflow/lib/python3.7/site-packages/keras/engine/base_layer.py in add_weight(self, name, shape, dtype, initializer, regularizer, trainable, constraint)
280 dtype=dtype,
281 name=name,
--&gt; 282 constraint=constraint)
283 if regularizer is not None:
284 with K.name_scope('weight_regularizer'):
/apps/opt/anaconda3/envs/tensorflow/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py in variable(value, dtype, name, constraint)
618 """
619 v = tf_keras_backend.variable(
--&gt; 620 value, dtype=dtype, name=name, constraint=constraint)
621 if hasattr(value, 'tocoo'):
622 v._keras_shape = value.tocoo().shape
/apps/opt/anaconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/keras/backend.py in variable(value, dtype, name, constraint)
843 dtype=dtypes_module.as_dtype(dtype),
844 name=name,
--&gt; 845 constraint=constraint)
846 if isinstance(value, np.ndarray):
847 v._keras_shape = value.shape
/apps/opt/anaconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/ops/variables.py in call(cls, *args, **kwargs)
259 return cls._variable_v1_call(*args, **kwargs)
260 elif cls is Variable:
--&gt; 261 return cls._variable_v2_call(*args, **kwargs)
262 else:
263 return super(VariableMetaclass, cls).call(*args, **kwargs)
/apps/opt/anaconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/ops/variables.py in _variable_v2_call(cls, initial_value, trainable, validate_shape, caching_device, name, variable_def, dtype, import_scope, constraint, synchronization, aggregation, shape)
253 synchronization=synchronization,
254 aggregation=aggregation,
--&gt; 255 shape=shape)
256
257 def call(cls, *args, **kwargs):
/apps/opt/anaconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/ops/variables.py in (**kws)
234 shape=None):
235 """Call on Variable class. Useful to force the signature."""
--&gt; 236 previous_getter = lambda **kws: default_variable_creator_v2(None, **kws)
237 for _, getter in ops.get_default_graph()._variable_creator_stack: # pylint: disable=protected-access
238 previous_getter = _make_getter(getter, previous_getter)
/apps/opt/anaconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/ops/variable_scope.py in default_variable_creator_v2(next_creator, **kwargs)
2645 synchronization=synchronization,
2646 aggregation=aggregation,
-&gt; 2647 shape=shape)
2648
2649
/apps/opt/anaconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/ops/variables.py in call(cls, *args, **kwargs)
261 return cls._variable_v2_call(*args, **kwargs)
262 else:
--&gt; 263 return super(VariableMetaclass, cls).call(*args, **kwargs)
264
265
/apps/opt/anaconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/ops/resource_variable_ops.py in init(self, initial_value, trainable, collections, validate_shape, caching_device, name, dtype, variable_def, import_scope, constraint, distribute_strategy, synchronization, aggregation, shape)
1432 aggregation=aggregation,
1433 shape=shape,
-&gt; 1434 distribute_strategy=distribute_strategy)
1435
1436 def _init_from_args(self,
/apps/opt/anaconda3/envs/tensorflow/lib/python3.7/site-packages/tensorflow/python/ops/resource_variable_ops.py in _init_from_args(self, initial_value, trainable, collections, caching_device, name, dtype, constraint, synchronization, aggregation, distribute_strategy, shape)
1515 if isinstance(initial_value, ops.Tensor) and hasattr(
1516 initial_value, "graph") and initial_value.graph.building_function:
-&gt; 1517 raise ValueError("Tensor-typed variable initializers must either be "
1518 "wrapped in an init_scope or callable "
1519 "(e.g., `tf.Variable(lambda : "
ValueError: Tensor-typed variable initializers must either be wrapped in an init_scope or callable (e.g., tf.Variable(lambda : tf.truncated_normal([10, 40]))) when building functions. Please file a feature request if this restriction inconveniences you.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

I had a few go on changing the 'seed' to the following:

[1, seed]
tf.constant(np.random.rand(2, 2))
tf.keras.Variable(lambda : tf.truncated_normal([1, seed]))

However, I still can't manage to convert 'seed' to a tensor.
Can anyone help me please?
Any suggestions/feedback will be much appreciated!
	</description>
	<comments>
		<comment id='1' author='Isabellaleesln' date='2020-07-13T06:30:32Z'>
		&lt;denchmark-link:https://github.com/Isabellaleesln&gt;@Isabellaleesln&lt;/denchmark-link&gt;

I ran the code shared, it seems incomplete.Please provide with code such that it can replicate the issue faced, &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/134b453e41309630ac0f0052d330fe8d/untitled272.ipynb&gt;gist of the code shared&lt;/denchmark-link&gt;
.
With respect to the error faced please refer to these issues and let us know if it helps:
&lt;denchmark-link:https://stackoverflow.com/questions/59229898/tensor-typed-variable-initializers-must-either-be-wrapped-in-an-init-scope-or-ca&gt;link&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/shamangary/LOUPE_Keras/issues/1&gt;link1&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='Isabellaleesln' date='2020-07-13T10:38:45Z'>
		Hi &lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 Thank you for response =)
Please find the full code here: &lt;denchmark-link:https://www.kaggle.com/devang/transfer-learning-with-keras-and-mobilenet-v2&gt;https://www.kaggle.com/devang/transfer-learning-with-keras-and-mobilenet-v2&lt;/denchmark-link&gt;
.
Regards,
		</comment>
		<comment id='3' author='Isabellaleesln' date='2020-07-13T11:40:20Z'>
		Hi &lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
  I have looked at your links. &lt;denchmark-link:https://stackoverflow.com/questions/59229898/tensor-typed-variable-initializers-must-either-be-wrapped-in-an-init-scope-or-ca&gt;link1&lt;/denchmark-link&gt;
 seems not the same as mine.
You can find the remaining code of your first &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/134b453e41309630ac0f0052d330fe8d/untitled272.ipynb&gt;link&lt;/denchmark-link&gt;
 at &lt;denchmark-link:https://www.kaggle.com/devang/transfer-learning-with-keras-and-mobilenet-v2&gt;Here&lt;/denchmark-link&gt;

Thank you for looking at this issue!
		</comment>
		<comment id='4' author='Isabellaleesln' date='2020-07-13T16:13:41Z'>
		&lt;denchmark-link:https://github.com/Isabellaleesln&gt;@Isabellaleesln&lt;/denchmark-link&gt;

Please share simple stand alone indented code to replicate the issue or please share a colab gist with the error faced for us to analyse.
		</comment>
		<comment id='5' author='Isabellaleesln' date='2020-07-13T23:15:26Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;

Please find the  and  in the attached below. Thanks.
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/4915590/mobilenet_v2_model_weights.zip&gt;mobilenet_v2_model_weights.zip&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='Isabellaleesln' date='2020-09-14T17:26:07Z'>
		&lt;denchmark-link:https://github.com/Isabellaleesln&gt;@Isabellaleesln&lt;/denchmark-link&gt;
 Were you able to solve this problem?
I think the problem is that you were not setting the initializers in the right fashion. Please take a look at this &lt;denchmark-link:https://keras.io/api/layers/initializers/&gt;doc&lt;/denchmark-link&gt;
 on how to intialize variables
		</comment>
		<comment id='7' author='Isabellaleesln' date='2020-09-21T17:34:00Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='8' author='Isabellaleesln' date='2020-09-28T18:13:44Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='9' author='Isabellaleesln' date='2020-09-28T18:13:48Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41306&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41306&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>