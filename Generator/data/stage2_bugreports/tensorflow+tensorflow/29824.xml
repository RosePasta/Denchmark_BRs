<bug id='29824' author='pwasows' open_date='2019-06-15T14:21:52Z' closed_time='2019-07-08T18:44:52Z'>
	<summary>tf.reduce_max returns wrong value</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04.2 LTS
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 1.12.2
Python version: 3.6.7
Bazel version (if compiling from source): 0.17.2
GCC/Compiler version (if compiling from source): gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04)
CUDA/cuDNN version: no gpu
GPU model and memory: no gpu

The current behavior
I have implemented a computation graph, consisting of a custom keras layer GaussianSimilaritiesLayer and a tf.reduce_max function. You can find the code below.
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np


class GaussianSimilaritiesLayer(tf.keras.layers.Layer):
    def __init__(self, reference_values, covariance_matrix):
        super(GaussianSimilaritiesLayer, self).__init__()
        self._reference_values = tf.convert_to_tensor(np.vstack(reference_values).astype(np.float32))
        self._cov_inv = tf.convert_to_tensor(covariance_matrix.astype(np.float32))

    def call(self, inputs):
        diffs = self._reference_values - inputs
        A = tf.matmul(diffs, self._cov_inv)
        B = tf.multiply(A, diffs)
        dist = tf.reduce_sum(B, axis=1)
        exp_arg = -0.5 * dist
        # return 1 * tf.math.exp(exp_arg)  # call() returns desired value
        return tf.math.exp(exp_arg)  # call() returns wrong value


class Potential:
    def __init__(self, session, demonstrations, covariance_matrix):
        self._in = tf.keras.layers.Input(shape=(3,))
        similarities = GaussianSimilaritiesLayer(demonstrations,
                                                 covariance_matrix)(self._in)
        max_similarity = tf.keras.layers.Lambda(tf.reduce_max)(similarities)

        self._model = tf.keras.Model(inputs=[self._in],
                                     outputs=[max_similarity])
        self._session = session

    def __call__(self, s):
        return self._model.output.eval(session=self._session, feed_dict={
            self._in: s
        })


if __name__ == '__main__':

    with tf.Session() as sess:
        sa_demonstrations = [np.array([1, 2, 3], dtype=np.float32),
                             np.array([4, 5, 6], dtype=np.float32)]
        covariance_matrix = np.array([[1, 0, 0],
                                    [0, 2, 0],
                                    [0, 0, 3]], dtype=np.float32)
        phi = Potential(sess, sa_demonstrations, covariance_matrix)
        sample_s = np.array([1, 2, 2.7], dtype=np.float32)
        print(phi([sample_s]))
&lt;/denchmark-code&gt;

When GaussianSimilaritiesLayer.call return statement looks like below
       return tf.math.exp(exp_arg)
the script outputs:

-0.13499996

This is the value of exp_arg from GaussianSimilaritiesLayer.call. The function should return e^-0.13499996.
The expected behavior
When GaussianSimilaritiesLayer.call return statement looks like below
       return 1 * tf.math.exp(exp_arg)
the script outputs:

0.87371594

which is the desired value.
	</description>
	<comments>
		<comment id='1' author='pwasows' date='2019-06-15T15:48:52Z'>
		Seems to be a bug in tf.reduce_max(); if i replace tf.reduce_max() with for example tf.nn.relu() output is correct. I will look into the tf.reduce_max() implementation.
		</comment>
		<comment id='2' author='pwasows' date='2019-06-15T16:04:37Z'>
		The behavior is really weird; I guess that multiplying by 1 changes the dtype of the tensor somehow. I get the desired result also when returning
&lt;denchmark-code&gt;return tf.cast(tf.cast(tf.exp(exp_arg), tf.float64), tf.float32)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='pwasows' date='2019-06-17T11:41:01Z'>
		I could reproduce the issue with Tf 1.12.2 on Google Colab.Thanks!
		</comment>
		<comment id='4' author='pwasows' date='2019-06-20T16:31:45Z'>
		This works as expected in 1.14
		</comment>
		<comment id='5' author='pwasows' date='2019-06-25T21:45:57Z'>
		&lt;denchmark-link:https://github.com/pwasows&gt;@pwasows&lt;/denchmark-link&gt;
 Can you upgrade to TF 1.14 as it is working as expected? Thanks!
		</comment>
		<comment id='6' author='pwasows' date='2019-07-02T15:39:19Z'>
		
@pwasows Can you upgrade to TF 1.14 as it is working as expected? Thanks!

I cannot upgrade to 1.14, but can live with the 1 * tf.math.exp(exp_arg) workaround ;)
		</comment>
		<comment id='7' author='pwasows' date='2019-07-08T18:44:52Z'>
		Automatically closing this out since I understand it to be resolved, but please let me know if I'm mistaken.Thanks!
		</comment>
		<comment id='8' author='pwasows' date='2019-07-08T18:44:53Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=29824&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=29824&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>