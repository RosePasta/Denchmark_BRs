<bug id='30301' author='ghostplant' open_date='2019-07-02T06:09:38Z' closed_time='2019-07-08T12:25:58Z'>
	<summary>[BUG] tf.layers.dropout not working</summary>
	<description>
To reproduce the issue:
sess = tf.Session()
x = tf.ones([4, 4])
y = tf.layers.dropout(x, 0.5)
sess.run(y)
This version works well:
sess = tf.Session()
x = tf.ones([4, 4])
y = tf.nn.dropout(x, 0.5)
sess.run(y)
Tensorflow version: 1.13.3
OS:  Ubuntu 18.04
	</description>
	<comments>
		<comment id='1' author='ghostplant' date='2019-07-02T06:33:14Z'>
		I think this API tf.layers.dropout is already deprecated
		</comment>
		<comment id='2' author='ghostplant' date='2019-07-02T07:31:27Z'>
		I think tf.layers.dropout would use keras.layers.Dropout
And finally call this "lambda: array_ops.identity(inputs)" to return the exactly same tensor
		</comment>
		<comment id='3' author='ghostplant' date='2019-07-02T07:57:30Z'>
		OK, but it would be more reasonable if it is wrapped to tf.nn.dropout
		</comment>
		<comment id='4' author='ghostplant' date='2019-07-03T08:25:01Z'>
		&lt;denchmark-link:https://github.com/ghostplant&gt;@ghostplant&lt;/denchmark-link&gt;
 I tried executing the code on Colab with Tensorflow 1.13.1
&lt;denchmark-code&gt;import tensorflow as tf
sess = tf.Session()
x = tf.ones([4, 4])
y = tf.layers.dropout(x, 0.5)
sess.run(y)

&lt;/denchmark-code&gt;

Is this the expected output
array([[1., 1., 1., 1.],
[1., 1., 1., 1.],
[1., 1., 1., 1.],
[1., 1., 1., 1.]], dtype=float32)
Thanks!
		</comment>
		<comment id='5' author='ghostplant' date='2019-07-03T09:17:22Z'>
		&lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 No, if you use  instead, you should get the expected output: some are zero and others are two.
		</comment>
		<comment id='6' author='ghostplant' date='2019-07-03T12:37:43Z'>
		&lt;denchmark-link:https://github.com/ghostplant&gt;@ghostplant&lt;/denchmark-link&gt;
 You are correct. With  i am able to get expected result. Thanks!
		</comment>
		<comment id='7' author='ghostplant' date='2019-07-06T05:10:25Z'>
		The following will work:
&lt;denchmark-code&gt;import tensorflow as tf
sess = tf.Session()
x = tf.ones([4, 4])
y = tf.layers.dropout(x, 0.5, training=True)
sess.run(y)
&lt;/denchmark-code&gt;

Note in the doctoring of tf.layers.dropout:
&lt;denchmark-code&gt;    training: Either a Python boolean, or a TensorFlow boolean scalar tensor
      (e.g. a placeholder). Whether to return the output in training mode
      (apply dropout) or in inference mode (return the input untouched).
&lt;/denchmark-code&gt;

		</comment>
		<comment id='8' author='ghostplant' date='2019-07-08T12:25:58Z'>
		&lt;denchmark-link:https://github.com/yongtang&gt;@yongtang&lt;/denchmark-link&gt;
 Thank you. It is a little weird that training is set to False by default, because it is just not what this operator describes to be, so I think it would be more reasonable to change the default value. I think many developers don't even notice this case when they just select to use a dropout operator.
Usually, using dropout or not is most likely to be determined by changing the branch in user level in  many existing programs, such as:
if is_training:
  out = tf.layers.dropout(out)
		</comment>
		<comment id='9' author='ghostplant' date='2019-07-08T12:26:00Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30301&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30301&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>