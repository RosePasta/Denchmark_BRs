<bug id='14743' author='yaboo-oyabu' open_date='2017-11-21T06:13:07Z' closed_time='2018-01-09T23:25:01Z'>
	<summary>The API doc for tensorflow.keras.backend.set_learning_phase is wrong.</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


TensorFlow version (use command below):
1.4.0
Python version:
Python 2.7.13 :: Anaconda, Inc.

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

When I implemented Custom Estimator API with tf.keras, I countered following error:
TypeError: `pred` must be a Tensor, a Variable, or a Python bool.
This happens if I set {0, 1} to tensorflow.keras.backend.set_learning_phase, and doesn't happen if I set {False, True} instead of {0, 1}. However, &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/backend/set_learning_phase&gt;the API doc&lt;/denchmark-link&gt;
 for tensorflow.keras.backend.set_learning_phase says the method is supposed to take {0, 1}. So, I think that the API doc should be modified.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;


Source code (You can find more details here)

def inference(images, mode):
  if mode == tf.estimator.ModeKeys.TRAIN:
    tf.keras.backend.set_learning_phase(1) # this should be True
  else:
    tf.keras.backend.set_learning_phase(0) # this should be False
        
  model = tf.keras.models.Sequential()
  # Define input tensor in Keras world.
  model.add(tf.keras.layers.InputLayer(input_tensor=images))

  # The first convolutional layer.
  model.add(tf.keras.layers.Conv2D(
      filters=32, kernel_size=(3, 3), padding='same', activation='relu'))
  model.add(tf.keras.layers.MaxPool2D(pool_size=(2, 2), padding='same'))

  # The second convolutional layer.
  model.add(tf.keras.layers.Conv2D(
      filters=32, kernel_size=(3, 3), padding='same', activation='relu'))
  model.add(tf.keras.layers.MaxPool2D(pool_size=(2, 2), padding='same'))
  model.add(tf.keras.layers.Dropout(0.25))

  # The third convolutional layer
  model.add(tf.keras.layers.Conv2D(
      filters=64, kernel_size=(3, 3), padding='same', activation='relu'))

  # The fourth convolutional layer
  model.add(tf.keras.layers.Conv2D(
      filters=64, kernel_size=(3, 3), padding='same', activation='relu'))
  model.add(tf.keras.layers.Dropout(0.25))

  model.add(tf.keras.layers.Flatten())
  model.add(tf.keras.layers.Dense(512, activation='relu'))
  model.add(tf.keras.layers.Dropout(0.5))
  model.add(tf.keras.layers.Dense(NUM_CLASSES))
  logits = model.output
  return logits

Error logs

TypeError                                 Traceback (most recent call last)
&lt;ipython-input-38-4dbe7b3f6667&gt; in &lt;module&gt;()
     20   schedule='train_and_evaluate',
     21   run_config=run_config,
---&gt; 22   hparams=hparams
     23 )
     24 

/usr/local/google/home/yaboo/Resources/anaconda2/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/learn_runner.pyc in run(experiment_fn, output_dir, schedule, run_config, hparams)
    216   schedule = schedule or _get_default_schedule(run_config)
    217 
--&gt; 218   return _execute_schedule(experiment, schedule)
    219 
    220 

/usr/local/google/home/yaboo/Resources/anaconda2/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/learn_runner.pyc in _execute_schedule(experiment, schedule)
     44     logging.error('Allowed values for this experiment are: %s', valid_tasks)
     45     raise TypeError('Schedule references non-callable member %s' % schedule)
---&gt; 46   return task()
     47 
     48 

/usr/local/google/home/yaboo/Resources/anaconda2/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/experiment.pyc in train_and_evaluate(self)
    623                   hooks=self._eval_hooks)
    624           ]
--&gt; 625       self.train(delay_secs=0)
    626 
    627     # If the checkpoint_and_export flag and appropriate estimator configuration

/usr/local/google/home/yaboo/Resources/anaconda2/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/experiment.pyc in train(self, delay_secs)
    365     return self._call_train(input_fn=self._train_input_fn,
    366                             max_steps=self._train_steps,
--&gt; 367                             hooks=self._train_monitors + extra_hooks)
    368 
    369   def evaluate(self, delay_secs=None, name=None):

/usr/local/google/home/yaboo/Resources/anaconda2/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/experiment.pyc in _call_train(self, _sentinel, input_fn, steps, hooks, max_steps)
    805                                    steps=steps,
    806                                    max_steps=max_steps,
--&gt; 807                                    hooks=hooks)
    808     else:
    809       return self._estimator.fit(input_fn=input_fn,

/usr/local/google/home/yaboo/Resources/anaconda2/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.pyc in train(self, input_fn, hooks, steps, max_steps, saving_listeners)
    300 
    301     saving_listeners = _check_listeners_type(saving_listeners)
--&gt; 302     loss = self._train_model(input_fn, hooks, saving_listeners)
    303     logging.info('Loss for final step: %s.', loss)
    304     return self

/usr/local/google/home/yaboo/Resources/anaconda2/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.pyc in _train_model(self, input_fn, hooks, saving_listeners)
    709       with ops.control_dependencies([global_step_read_tensor]):
    710         estimator_spec = self._call_model_fn(
--&gt; 711             features, labels, model_fn_lib.ModeKeys.TRAIN, self.config)
    712       # Check if the user created a loss summary, and add one if they didn't.
    713       # We assume here that the summary is called 'loss'. If it is not, we will

/usr/local/google/home/yaboo/Resources/anaconda2/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.pyc in _call_model_fn(self, features, labels, mode, config)
    692     if 'config' in model_fn_args:
    693       kwargs['config'] = config
--&gt; 694     model_fn_results = self._model_fn(features=features, **kwargs)
    695 
    696     if not isinstance(model_fn_results, model_fn_lib.EstimatorSpec):

&lt;ipython-input-29-a5666390b8b0&gt; in cifar10_model_fn(features, labels, mode, params)
     10 
     11   # Calculate logits through CNN
---&gt; 12   logits = inference(images, mode)
     13 
     14   # Get predictions

&lt;ipython-input-37-23187df0ff6c&gt; in inference(images, mode)
     20 
     21     # NOTE: Dropout is not working with model_fn in TF1.4
---&gt; 22     model.add(tf.keras.layers.Dropout(0.25))
     23 
     24     # The third convolutional layer

/usr/local/google/home/yaboo/Resources/anaconda2/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/models.pyc in add(self, layer)
    499           output_tensors=self.outputs)
    500     else:
--&gt; 501       output_tensor = layer(self.outputs[0])
    502       if isinstance(output_tensor, list):
    503         raise TypeError('All layers in a Sequential model '

/usr/local/google/home/yaboo/Resources/anaconda2/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.pyc in __call__(self, inputs, **kwargs)
    250     """
    251     # Actually call the layer (optionally building it).
--&gt; 252     output = super(Layer, self).__call__(inputs, **kwargs)
    253 
    254     # Update learning phase info.

/usr/local/google/home/yaboo/Resources/anaconda2/lib/python2.7/site-packages/tensorflow/python/layers/base.pyc in __call__(self, inputs, *args, **kwargs)
    573         if in_graph_mode:
    574           self._assert_input_compatibility(inputs)
--&gt; 575         outputs = self.call(inputs, *args, **kwargs)
    576 
    577         if outputs is None:

/usr/local/google/home/yaboo/Resources/anaconda2/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/layers/core.pyc in call(self, inputs, training)
    116     if training is None:
    117       training = K.learning_phase()
--&gt; 118     output = super(Dropout, self).call(inputs, training=training)
    119     if training is K.learning_phase():
    120       output._uses_learning_phase = True  # pylint: disable=protected-access

/usr/local/google/home/yaboo/Resources/anaconda2/lib/python2.7/site-packages/tensorflow/python/layers/core.pyc in call(self, inputs, training)
    298     return utils.smart_cond(training,
    299                             dropped_inputs,
--&gt; 300                             lambda: array_ops.identity(inputs))
    301 
    302 

/usr/local/google/home/yaboo/Resources/anaconda2/lib/python2.7/site-packages/tensorflow/python/layers/utils.pyc in smart_cond(pred, fn1, fn2, name)
    201     raise TypeError('`fn2` must be callable.')
    202 
--&gt; 203   pred_value = constant_value(pred)
    204   if pred_value is not None:
    205     if pred_value:

/usr/local/google/home/yaboo/Resources/anaconda2/lib/python2.7/site-packages/tensorflow/python/layers/utils.pyc in constant_value(pred)
    231     pred_value = tensor_util.constant_value(pred)
    232   else:
--&gt; 233     raise TypeError('`pred` must be a Tensor, a Variable, or a Python bool.')
    234   return pred_value

TypeError: `pred` must be a Tensor, a Variable, or a Python bool.
	</description>
	<comments>
		<comment id='1' author='yaboo-oyabu' date='2017-11-25T06:56:17Z'>
		tf.keras.backend.set_learning_phase takes 0 and 1 as argument, would it be possible for you to write a small example to reproduce the same error?
		</comment>
		<comment id='2' author='yaboo-oyabu' date='2017-12-20T01:28:40Z'>
		It has been 14 days with no activity and this issue has an assignee.Please update the label and/or status accordingly.
		</comment>
		<comment id='3' author='yaboo-oyabu' date='2018-01-03T19:08:22Z'>
		It has been 14 days with no activity and this issue has an assignee.Please update the label and/or status accordingly.
		</comment>
		<comment id='4' author='yaboo-oyabu' date='2018-01-09T23:25:00Z'>
		Closing it for the lack of any response.
		</comment>
		<comment id='5' author='yaboo-oyabu' date='2018-04-22T00:51:30Z'>
		I also meet this problem,when I use tensorflow.contrib.keras.applications.ResNet50. And it need the learning phase, so I use K.set_learning_phase(1) and I countered the same problem.
		</comment>
	</comments>
</bug>