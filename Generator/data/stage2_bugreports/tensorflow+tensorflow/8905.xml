<bug id='8905' author='Bihaqo' open_date='2017-04-02T10:13:30Z' closed_time='2017-06-16T20:43:46Z'>
	<summary>SVD float64 NaN bug</summary>
	<description>
I've encountered a tf.float64 matrix (of size 60 x 200) such that tf.svd of it returns NaNs, while
np.linalg.svd works fine.
Converting the matrix into tf.float32 and then converting back to tf.float64 makes everything works with TF too (while being a tiny perturbation).
Here is an example Jupyter notebook: &lt;denchmark-link:https://nbviewer.jupyter.org/urls/dl.dropbox.com/s/mf9e2eqg2isupce/Scary%20matrix.ipynb?dl=0&gt;https://nbviewer.jupyter.org/urls/dl.dropbox.com/s/mf9e2eqg2isupce/Scary%20matrix.ipynb?dl=0&lt;/denchmark-link&gt;

You can download pickled matrix here: &lt;denchmark-link:https://www.dropbox.com/s/b8wex6voladtgw1/scary_matrix.cPickle?dl=0&gt;https://www.dropbox.com/s/b8wex6voladtgw1/scary_matrix.cPickle?dl=0&lt;/denchmark-link&gt;

I'm using Conda Python 2.7.13 (tried on Mac and Ubuntu) and a fresh version of tensorflow from pip (tried both cpu and gpu versions).
	</description>
	<comments>
		<comment id='1' author='Bihaqo' date='2017-04-02T16:25:08Z'>
		Could you take a look &lt;denchmark-link:https://github.com/rmlarsen&gt;@rmlarsen&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='2' author='Bihaqo' date='2017-04-03T00:35:17Z'>
		Pickle can do arbitrary code execution when loaded, so it's a poor choice for sharing data. Can you save it with another file format instead, e.g., with numpy.save?
		</comment>
		<comment id='3' author='Bihaqo' date='2017-04-03T06:47:55Z'>
		Sure, I updated the notebook to load np array, here is the new file: &lt;denchmark-link:https://www.dropbox.com/s/ou7egsfdmmwxhd6/scary_matrix.np?dl=0&gt;https://www.dropbox.com/s/ou7egsfdmmwxhd6/scary_matrix.np?dl=0&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='Bihaqo' date='2017-04-13T09:02:48Z'>
		Update: I found a float32 20 x 150 matrix with the same behavior (NaNs in tf.svd, but works fine with np.linalg.svd). Here is the new matrix file: &lt;denchmark-link:https://www.dropbox.com/s/a326frisvq7hxxw/float32_scary_mat.np?dl=0#&gt;.np file&lt;/denchmark-link&gt;

And here is the updated &lt;denchmark-link:https://nbviewer.jupyter.org/urls/dl.dropbox.com/s/mf9e2eqg2isupce/Scary%20matrix.ipynb?dl=0&gt;Jupyter notebook&lt;/denchmark-link&gt;
 with both examples.
		</comment>
		<comment id='5' author='Bihaqo' date='2017-04-13T14:53:49Z'>
		&lt;denchmark-link:https://github.com/rmlarsen&gt;@rmlarsen&lt;/denchmark-link&gt;
, any update?
		</comment>
		<comment id='6' author='Bihaqo' date='2017-04-16T19:37:30Z'>
		BTW, I'm seeing possibly related bug in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/9234&gt;#9234&lt;/denchmark-link&gt;
 the difference is that it happens in float32, and sometimes produces segfaults instead of NaNs
The matrix in question is in &lt;denchmark-link:https://storage.googleapis.com/tensorflow-community-wheels/svd_in&gt;https://storage.googleapis.com/tensorflow-community-wheels/svd_in&lt;/denchmark-link&gt;
 and and can be opened as

		</comment>
		<comment id='7' author='Bihaqo' date='2017-04-17T12:15:58Z'>
		As a temporary workaround I replaced tf.svd with np.linalg.svd via tf.py_func module. It's really slow though.
def replace_tf_svd_with_np_svd():
  """Replaces tf.svd with np.svd. Slow, but a workaround for tf.svd bugs.
  For details see
  https://github.com/tensorflow/tensorflow/issues/8905
  """
  if hasattr(tf, 'original_svd'):
    # This function has been already called and tf.svd is already replaced.
    return
  tf.original_svd = tf.svd

  def my_svd(tensor, full_matrices=False, compute_uv=True):
    dtype = tensor.dtype
    u, s, v = tf.py_func(np.linalg.svd, [tensor, full_matrices, compute_uv],
                         [dtype, dtype, dtype])
    s_, u_, v_ = tf.original_svd(tensor, full_matrices, compute_uv)
    s = tf.reshape(s, s_.get_shape())
    u = tf.reshape(u, u_.get_shape())
    v = tf.reshape(v, v_.get_shape())
    # Converting numpy order of v dims to TF order.
    order = range(tensor.get_shape().ndims)
    order[-2], order[-1] = order[-1], order[-2]
    v = tf.transpose(v, order)
    return s, u, v

  tf.svd = my_svd
		</comment>
		<comment id='8' author='Bihaqo' date='2017-04-17T15:38:00Z'>
		&lt;denchmark-link:https://github.com/Bihaqo&gt;@Bihaqo&lt;/denchmark-link&gt;
  -- make sure you have scipy with MKL (it gets overwritten with non-MKL numpy every time you install tensorflow, so you have to do "conda install scipy/numpy"). That version will do SVD on multiple cores so its faster than TensorFlow
		</comment>
		<comment id='9' author='Bihaqo' date='2017-04-17T18:36:09Z'>
		After some experimenting, it seems NaNs are connected with ill-conditioning. For instance, take first 100 MNIST examples, run SVD on covariance matrix -&gt; NaN. If I take first 1000 MNIST examples instead, works fine.
		</comment>
		<comment id='10' author='Bihaqo' date='2017-06-16T20:43:46Z'>
		Automatically closing due to lack of recent activity. Since this issue is old at this point, please reopen the issue if it still occurs when tried with the latest version of Tensorflow. Thank you.
		</comment>
	</comments>
</bug>