<bug id='44983' author='Engineero' open_date='2020-11-18T15:52:14Z' closed_time='2020-12-25T03:56:48Z'>
	<summary>tf.image.per_image_standardization unexpected behavior with unsigned integer input</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04.4
TensorFlow installed from (source or binary): pip
TensorFlow version (use command below): v2.2.0-57-g25fba035f3 2.2.1
Python version: 3.7.7
CUDA/cuDNN version: 10.1.243
GPU model and memory: Nvidia Tesla V100-DGXS-32GB,

Describe the current behavior
tf.image.per_image_standardization has no special handling for unsigned integers but still converts back to unsigned before returning. Thus uint inputs get saturated at zero (fully half of the data!) and at their maximum value. Currently no explanation of uint behavior is given in the docstring, and no warning or other indication that behavior might be unexpected is shown.
Describe the expected behavior
In previous versions of TensorFlow (I believe changed after 1.14), per_image_standardization just returned a float rather than converting back to the original datatype, so it didn't have this problem. I would expect something safe like that, leaving it up to the developer to decide how they want this conversion handled, or at least a warning printed in the event a uint input is given. Some documentation specifying that uints are not handled differently and will be saturated might be nice too.

&lt;denchmark-link:https://colab.research.google.com/drive/1PqjTWtgLPE7hb5Dza2fZdFNbhlyW3mKl?usp=sharing&gt;Colab notebook link&lt;/denchmark-link&gt;
.
Other info / logs
No tracebacks or logs because it doesn't throw an error. I would call this a failure mode, but it fails silently. I suspect it's an edge case that isn't tested.
	</description>
	<comments>
		<comment id='1' author='Engineero' date='2020-11-19T02:47:39Z'>
		&lt;denchmark-link:https://github.com/Engineero&gt;@Engineero&lt;/denchmark-link&gt;

Please, grant me access to colab link. Thanks!
		</comment>
		<comment id='2' author='Engineero' date='2020-11-19T02:49:34Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;

Sorry, haven't used colab much. It should be fixed now.
		</comment>
		<comment id='3' author='Engineero' date='2020-11-19T03:26:06Z'>
		I have tried in colab with TF version 2.3 and nightly version() and was able to reproduce the issue. Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/88120ddb0fd04644a3d2d4075ca97f7f/untitled524.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='Engineero' date='2020-11-19T03:28:19Z'>
		For the record, I think the behavior changed between 1.14 and 1.15, which is why I suspect an untested edge case. I had a use case where this affected training, and while it's certainly not backwards-incompatible (doesn't error out anyway), it is a surprise.
		</comment>
		<comment id='5' author='Engineero' date='2020-11-19T06:17:58Z'>
		&lt;denchmark-link:https://github.com/Engineero&gt;@Engineero&lt;/denchmark-link&gt;
, related issue:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/33892&gt;#33892&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='Engineero' date='2020-11-19T06:21:55Z'>
		Here is the offending commit:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/906e0e3bc0dfe12db19afa261e4d793b73cb64ec&gt;906e0e3&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='Engineero' date='2020-11-19T06:24:46Z'>
		Oh, hey &lt;denchmark-link:https://github.com/mixxen&gt;@mixxen&lt;/denchmark-link&gt;
! Good find, thanks!
		</comment>
		<comment id='8' author='Engineero' date='2020-12-04T15:33:21Z'>
		It looks like simply casting (not with convert_image_dtype, just tf.cast) to float prior to per_image_normalization prevents information loss. I'd create a pull request, but I think the bigger question is what is the intended behavior when given unsigned integer input and how should that be communicated? Also covering this edge case with tests.
		</comment>
		<comment id='9' author='Engineero' date='2020-12-20T21:05:50Z'>
		Thank you for reporting the issue &lt;denchmark-link:https://github.com/Engineero&gt;@Engineero&lt;/denchmark-link&gt;
 and identifying the offending commit &lt;denchmark-link:https://github.com/mixxen&gt;@mixxen&lt;/denchmark-link&gt;
.
The changes in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/906e0e3bc0dfe12db19afa261e4d793b73cb64ec&gt;906e0e3&lt;/denchmark-link&gt;
 appears to have changed the behavior of  unintentionally and should be reverted back in my opinion. It especially does not make sense for unsigned integer data types because images that have zero-mean will consist of negative and positive values (unless all values are 0). The API function has been working with  dtypes (until the breaking change) and should continue to do so. I'll get a fix in shortly.
		</comment>
		<comment id='10' author='Engineero' date='2020-12-25T03:56:48Z'>
		Here is a &lt;denchmark-link:https://colab.research.google.com/drive/1nqzU22tZ0RVAaDm6drWPkfGV8cc7A_3x?usp=sharing&gt;colab&lt;/denchmark-link&gt;
 verifying the fix with . Closing the issue; please feel free to reopen if you encounter additional issues.
		</comment>
		<comment id='11' author='Engineero' date='2020-12-25T03:56:50Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44983&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44983&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>