<bug id='28710' author='dekromp' open_date='2019-05-14T15:54:35Z' closed_time='2019-05-28T20:42:08Z'>
	<summary>steps_per_epoch parameter in fit not working with tf.keras.utils.Sequence</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 14.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary (conda)
TensorFlow version (use command below): 1.13.1
Python version: 3.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
setting the steps_per_epoch parameter in model.fit (tf.keras) to for example 10 should only perform 10 updates per epoch. When passing numpy arrays as inputs to model.fit this works as expected, but when using a custom tf.keras.utils.Sequence  instance steps_per_epoch does not have any effect.
Describe the expected behavior
When passing steps_per_epoch to model.fit as a parameter when training on data fed via a tf.keras.utils.Sequence instance the model should be updated exactly steps_per_epoch times in every epoch.
Code to reproduce the issue
import math

import numpy as np
import tensorflow as tf


class SomeFeeder(tf.keras.utils.Sequence):
    """A dummy Sequence.

    Slightly modified tf.keras.utils.Sequence example.
    """

    def __init__(self, x_set, y_set, batch_size):
            self.x, self.y = x_set, y_set
            self.batch_size = batch_size

    def __len__(self):
        return math.ceil(len(self.x) / self.batch_size)

    def __getitem__(self, idx):
        batch_x = self.x[idx * self.batch_size:(idx + 1) * self.batch_size]
        batch_y = self.y[idx * self.batch_size:(idx + 1) * self.batch_size]
        return batch_x, batch_y


# Simple dummy model.
input_x = tf.keras.Input((4,))
output = tf.keras.layers.Dense(1, activation='sigmoid')(input_x)
model = tf.keras.Model(inputs=[input_x], outputs=[output])
model.compile(
    optimizer=tf.keras.optimizers.SGD(lr=0.1), loss='binary_crossentropy')

# Dummy data.
x = np.random.rand(100, 4).astype(np.float32)
y = np.random.choice([0, 1], size=(100,)).astype(np.float32)
x = SomeFeeder(x, y, batch_size=4)

# Train the model with `steps_per_epoch=5`.
model.fit(x=x, epochs=10, steps_per_epoch=5)
Other info / logs
Produces:
&lt;denchmark-code&gt;Epoch 1/10
25/25 [==============================] - 0s 13ms/step - loss: 0.7041
Epoch 2/10
25/25 [==============================] - 0s 5ms/step - loss: 0.7007
Epoch 3/10
25/25 [==============================] - 0s 5ms/step - loss: 0.6993
Epoch 4/10
25/25 [==============================] - 0s 5ms/step - loss: 0.6981
Epoch 5/10
25/25 [==============================] - 0s 5ms/step - loss: 0.6939
Epoch 6/10
25/25 [==============================] - 0s 5ms/step - loss: 0.6954
Epoch 7/10
25/25 [==============================] - 0s 5ms/step - loss: 0.6936
Epoch 8/10
25/25 [==============================] - 0s 5ms/step - loss: 0.6914
Epoch 9/10
25/25 [==============================] - 0s 5ms/step - loss: 0.6928
Epoch 10/10
25/25 [==============================] - 0s 5ms/step - loss: 0.6916
&lt;/denchmark-code&gt;

I would have expected 5/5 instead of 25/25
	</description>
	<comments>
		<comment id='1' author='dekromp' date='2019-05-14T17:17:38Z'>
		Can reproduce this. Looks a bug to me.
		</comment>
		<comment id='2' author='dekromp' date='2019-05-15T12:20:21Z'>
		I was able to reproduce the mentioned output with TensorFlow version 1.13.1.
		</comment>
		<comment id='3' author='dekromp' date='2019-05-28T20:40:21Z'>
		I can't reproduce this issue in tf.nightly, which indicate that this issue has been recently fixed, but hasn't reach release yet.
		</comment>
		<comment id='4' author='dekromp' date='2019-05-28T20:42:08Z'>
		TF version = 1.14.1-dev20190523
Epoch 1/10
1/5 [=====&gt;........................] - ETA: 0s - loss: 0.6458
5/5 [==============================] - 0s 39ms/step - loss: 0.7210
Epoch 2/10
1/5 [=====&gt;........................] - ETA: 0s - loss: 0.9641
5/5 [==============================] - 0s 1ms/step - loss: 0.7426
Epoch 3/10
1/5 [=====&gt;........................] - ETA: 0s - loss: 0.9364
5/5 [==============================] - 0s 1ms/step - loss: 0.7591
Epoch 4/10
1/5 [=====&gt;........................] - ETA: 0s - loss: 0.6825
5/5 [==============================] - 0s 1ms/step - loss: 0.6975
Epoch 5/10
1/5 [=====&gt;........................] - ETA: 0s - loss: 0.6900
5/5 [==============================] - 0s 1ms/step - loss: 0.6927
Epoch 6/10
1/5 [=====&gt;........................] - ETA: 0s - loss: 0.6488
5/5 [==============================] - 0s 20ms/step - loss: 0.6489
Epoch 7/10
1/5 [=====&gt;........................] - ETA: 0s - loss: 0.7134
5/5 [==============================] - 0s 1ms/step - loss: 0.7097
Epoch 8/10
1/5 [=====&gt;........................] - ETA: 0s - loss: 0.7574
5/5 [==============================] - 0s 1ms/step - loss: 0.7197
Epoch 9/10
1/5 [=====&gt;........................] - ETA: 0s - loss: 0.6375
5/5 [==============================] - 0s 1ms/step - loss: 0.6965
Epoch 10/10
1/5 [=====&gt;........................] - ETA: 0s - loss: 0.6357
5/5 [==============================] - 0s 1ms/step - loss: 0.6624
		</comment>
		<comment id='5' author='dekromp' date='2019-05-28T20:42:10Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28710&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28710&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='dekromp' date='2019-06-05T09:45:10Z'>
		I am using TensorFlow version 1.13.1. Is there any work around for this?
		</comment>
		<comment id='7' author='dekromp' date='2019-08-22T01:44:38Z'>
		Can confirm, ran a training run in 1.13.1 and had this issue, upgraded to 1.14.0 without doing anything else and now works correctly.
		</comment>
		<comment id='8' author='dekromp' date='2019-12-11T14:31:51Z'>
		This bug is still present in 1.13.2.
		</comment>
	</comments>
</bug>