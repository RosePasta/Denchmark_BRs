<bug id='39165' author='BattleTaco' open_date='2020-05-04T20:27:21Z' closed_time='2020-05-05T15:44:04Z'>
	<summary>Invalid Argument Error with tf.math.add_n</summary>
	<description>
I am having an issue with the tf.add_n()/tf.math.add_n() command. I keep on getting an error no matter how I change it. I am using Tensorflow 2.1.0, while using Jupyter Notebook, and am still new to using TensorFlow. Here is my code and the errors that have been produced. It seems like a simple fix but I have no clue what to do.
import tensorflow as tf
a = tf.constant(6, name = 'constant_a')
b = tf.constant(3, name = 'constant_b')
c = tf.constant(10, name = 'constant_c')
d = tf.constant(15, name = 'constant_d')
mul = tf.multiply(a,b, name="mul")
div = tf.math.divide(c,d, name="div")
addn = tf.math.add_n([mul,div], name="addn")
InvalidArgumentError                      Traceback (most recent call last)
 in 
5 #division operation which divides c by d and have the name "div"
6 #tf.add_n sums up the element in an array
----&gt; 7 addn = tf.math.add_n([mul,div], name="addn")
c:\users\galvi\anaconda3\envs\tensorflow\lib\site-packages\tensorflow_core\python\util\dispatch.py in wrapper(*args, **kwargs)
178     """Call target, and fall back on dispatchers if there is a TypeError."""
179     try:
--&gt; 180       return target(*args, **kwargs)
181     except (TypeError, ValueError):
182       # Note: convert_to_eager_tensor currently raises a ValueError, not a
c:\users\galvi\anaconda3\envs\tensorflow\lib\site-packages\tensorflow_core\python\ops\math_ops.py in add_n(inputs, name)
3051       return array_ops.identity(values, name=name)
3052     return values
-&gt; 3053   return gen_math_ops.add_n(inputs, name=name)
3054
3055
c:\users\galvi\anaconda3\envs\tensorflow\lib\site-packages\tensorflow_core\python\ops\gen_math_ops.py in add_n(inputs, name)
410         pass  # Add nodes to the TensorFlow graph.
411     except _core._NotOkStatusException as e:
--&gt; 412       _ops.raise_from_not_ok_status(e, name)
413   # Add nodes to the TensorFlow graph.
414   if not isinstance(inputs, (list, tuple)):
c:\users\galvi\anaconda3\envs\tensorflow\lib\site-packages\tensorflow_core\python\framework\ops.py in raise_from_not_ok_status(e, name)
6604   message = e.message + (" name: " + name if name is not None else "")
6605   # pylint: disable=protected-access
-&gt; 6606   six.raise_from(core._status_to_exception(e.code, message), None)
6607   # pylint: enable=protected-access
6608
c:\users\galvi\anaconda3\envs\tensorflow\lib\site-packages\six.py in raise_from(value, from_value)
InvalidArgumentError: cannot compute AddN as input &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/1&gt;#1&lt;/denchmark-link&gt;
(zero-based) was expected to be a int32 tensor but is a double tensor [Op:AddN] name: addn
	</description>
	<comments>
		<comment id='1' author='BattleTaco' date='2020-05-05T08:41:16Z'>
		I am able to replicate this issue, please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/5f7d81fc2d1de66da75e91d6e38a8189/untitled163.ipynb&gt;gist here&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='BattleTaco' date='2020-05-05T15:44:04Z'>
		&lt;denchmark-link:https://github.com/BattleTaco&gt;@BattleTaco&lt;/denchmark-link&gt;
 the behavior is working as expected, tf.math.divide perform a python style divide which will convert to float64 by default:
&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/math/divide&gt;https://www.tensorflow.org/api_docs/python/tf/math/divide&lt;/denchmark-link&gt;

As  and  are , if you expect  divide to get  result you could use tf.math.truediv :
&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/math/truediv&gt;https://www.tensorflow.org/api_docs/python/tf/math/truediv&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>