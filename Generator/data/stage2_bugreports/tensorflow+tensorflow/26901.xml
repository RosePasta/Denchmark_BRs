<bug id='26901' author='sharvil' open_date='2019-03-19T21:41:20Z' closed_time='2019-03-22T20:29:54Z'>
	<summary>tf.range fails on integer tensors</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):  Ubuntu 16.04.6 LTS
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: n/a
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 1.13.0-rc2-2-gbade323
Python version: 3.5
Bazel version (if compiling from source): 0.21.0
GCC/Compiler version (if compiling from source): 5.4.0 20160609
CUDA/cuDNN version: 10.0
GPU model and memory: 1080 Ti

Describe the current behavior
&lt;denchmark-code&gt;&gt;&gt;&gt; import tensorflow as tf
&gt;&gt;&gt; tf.enable_eager_execution()
&gt;&gt;&gt; tf.range(10, dtype=tf.float32)
&lt;tf.Tensor: id=3, shape=(10,), dtype=float32, numpy=array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.], dtype=float32)&gt;
&gt;&gt;&gt; tf.range(tf.convert_to_tensor(10), dtype=tf.float32)
[...]
ValueError: Tensor conversion requested dtype float32 for Tensor with dtype int32: 'tf.Tensor(10, shape=(), dtype=int32)'
&lt;/denchmark-code&gt;

Describe the expected behavior
tf.range should not raise ValueError when passing a Tensor argument instead of an integer literal.
	</description>
	<comments>
		<comment id='1' author='sharvil' date='2019-03-22T20:29:54Z'>
		TensorFlow has a strict type system the moment inputs are tensors.  If you use convert_to_tensor(10) you get an int32 tensor; and tf.range will not let you perform the subtle conversion to float32.  If you pass a python integer 10, it will perform the conversion to float32 for you.  This strict typing is a core part of TF's type system.  If you want your tensor to be a float, use tf.range(tf.cast(tf.constant(10), tf.float32), tf.float32)
		</comment>
		<comment id='2' author='sharvil' date='2019-03-22T20:29:55Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=26901&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=26901&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='sharvil' date='2019-03-22T20:48:52Z'>
		It would be nice to have consistent behavior between literals and tensors. If it's not possible or desirable to implicitly convert the tensor type, is it possible at least to raise a ValueError instead of implicitly casting the integer literal? It's quite surprising that two semantically equivalent programs have different behaviors.
		</comment>
	</comments>
</bug>