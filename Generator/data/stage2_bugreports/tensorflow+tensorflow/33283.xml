<bug id='33283' author='tseth92' open_date='2019-10-12T11:42:07Z' closed_time='2019-11-25T17:56:11Z'>
	<summary>pickling showing error : &amp;lt;&amp;lt;TypeError: can't pickle _thread._local objects&amp;gt;&amp;gt; working with tensorflow2.0 while it works with tensorflow 1.14</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Debian GNU/Linux 9.11 (stretch)
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: no
TensorFlow installed from (source or binary): via pip
TensorFlow version (use command below): 2.0
Python version: Python 3.7.3
Bazel version (if compiling from source): NA
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version: NA
GPU model and memory: NA

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behaviour
Currently, if I pickle in 2.0, it gives error TypeError: can't pickle _thread._local objects whereas in tensorflow version 1.14, it works fine
**Describe the expected behavior
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3720599/tp.txt&gt;tp.txt&lt;/denchmark-link&gt;

**
pickling should work in in tf 2.0
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
in the attached file, run get_model method for tf2.0  and get_model_prev to run for tf1.14.
You will see that pickle model is generated for 1.14 but not for 2.0
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='tseth92' date='2019-10-14T07:04:16Z'>
		&lt;denchmark-link:https://github.com/tseth92&gt;@tseth92&lt;/denchmark-link&gt;
, I tried to replicate the reported issue but i got different error message. Please see the colab &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/4e14c5835a91961694b93612c9bc14a5/untitled194.ipynb&gt;gist&lt;/denchmark-link&gt;
 and help us provide the issue. Thanks!
		</comment>
		<comment id='2' author='tseth92' date='2019-10-16T04:05:07Z'>
		&lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 I just ran the gist, the code will work fine if you choose !pip install tensorflow==1.14
But if you choose !pip install tensorflow==2.0 and if you uncomment get_model() and comment get_model_prev(), you will get to see the issue:
&lt;denchmark-code&gt;model = get_model()
#model = get_model_prev()
&lt;/denchmark-code&gt;

Error:
TypeError: can't pickle _thread._local objects
I have added these two methods to show that with get_model_prev() ie. model with normal Keras, its working fine and able to pickle if you use previous version of tensorflow and use keras to build layers.
But, if you try to use tf 2.0 directly and build layers using that, it shows error as in get_model()
TypeError: can't pickle _thread._local objects
		</comment>
		<comment id='3' author='tseth92' date='2019-10-18T07:13:02Z'>
		I could reproduce the issue with changes mentioned in last comment. Please see the &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/079ecb24dcfb0130a41c4cc8f7a69aba/untitled209.ipynb&gt;gist&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='tseth92' date='2019-10-18T17:12:45Z'>
		Closing as duplicate of &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/33204&gt;#33204&lt;/denchmark-link&gt;
 (although different error, the main concept is that thread dynamic objects cannot be pickled)
		</comment>
		<comment id='5' author='tseth92' date='2019-10-18T17:12:46Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33283&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33283&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='tseth92' date='2019-10-30T18:27:51Z'>
		I'm having the same problem
		</comment>
		<comment id='7' author='tseth92' date='2019-10-31T05:40:09Z'>
		&lt;denchmark-link:https://github.com/AlexFuster&gt;@AlexFuster&lt;/denchmark-link&gt;
,
Please post a new issue and provide all the information asked by the template. We ask this because it's more efficient to have one thread dedicated to one issue. Thanks!
		</comment>
		<comment id='8' author='tseth92' date='2019-10-31T09:56:06Z'>
		But my problem is literally the one described in this issue. Why not to reopen it?
		</comment>
		<comment id='9' author='tseth92' date='2019-10-31T10:26:01Z'>
		&lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 I also need to reopen the issue as the issue linked by &lt;denchmark-link:https://github.com/mihaimaruseac&gt;@mihaimaruseac&lt;/denchmark-link&gt;
 is different from this one. I have raised concern over this via tensorflow-bot, but no response form tensorflow team i received. Please reopen this issue as there is no reason to create a new issue when one unresolved issue is already present. Thanks
		</comment>
		<comment id='10' author='tseth92' date='2019-11-16T00:58:14Z'>
		&lt;denchmark-link:https://github.com/mihaimaruseac&gt;@mihaimaruseac&lt;/denchmark-link&gt;
 Can you PTAL? Thanks!
		</comment>
		<comment id='11' author='tseth92' date='2019-11-16T00:59:35Z'>
		Afaik pickling dynamic objects is not supported. I am not a good assignee if that changed.
		</comment>
		<comment id='12' author='tseth92' date='2019-11-21T22:24:24Z'>
		&lt;denchmark-link:https://github.com/tseth92&gt;@tseth92&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/AlexFuster&gt;@AlexFuster&lt;/denchmark-link&gt;
 Did the above comment help you in understanding the root of the problem?
		</comment>
		<comment id='13' author='tseth92' date='2019-11-22T20:24:21Z'>
		&lt;denchmark-link:https://github.com/gowthamkpr&gt;@gowthamkpr&lt;/denchmark-link&gt;
 if someone can really confirm that pickling is not supported for dynamic objects, then this should be considered as a feature request as it is an important part of TF.
		</comment>
		<comment id='14' author='tseth92' date='2019-11-25T09:28:23Z'>
		Totally agree with &lt;denchmark-link:https://github.com/tseth92&gt;@tseth92&lt;/denchmark-link&gt;
 , pickling the entire model object is easier than saving just the weights. Especially for complex models with multiple networks involved. It is very convenient as long as it does not introduce performance issues.
		</comment>
		<comment id='15' author='tseth92' date='2019-11-25T17:56:06Z'>
		&lt;denchmark-link:https://github.com/tseth92&gt;@tseth92&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/AlexFuster&gt;@AlexFuster&lt;/denchmark-link&gt;
 I am going to close this issue. Please create a new issue with the feature request template as mentioned &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/new/choose&gt;here&lt;/denchmark-link&gt;
 and we can take it forward from there. Thanks!
		</comment>
		<comment id='16' author='tseth92' date='2019-11-25T17:56:13Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33283&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33283&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='17' author='tseth92' date='2019-12-03T16:11:51Z'>
		Did somebody make the feature request?
		</comment>
		<comment id='18' author='tseth92' date='2019-12-04T15:42:36Z'>
		&lt;denchmark-link:https://github.com/renatobellotti&gt;@renatobellotti&lt;/denchmark-link&gt;
  I don't think so
		</comment>
		<comment id='19' author='tseth92' date='2019-12-04T16:45:21Z'>
		I'm looking at Tensorflow's code and the problem is produced by the following line in the __init__ methods of tensorflow.python.keras.engine.base_layer.Layer and tensorflow.python.keras.engine.network.Network (which are superclasses of tf.keras.Model)
self._thread_local = threading.local()
It creates an attribute which is a local threading  wrapper that cannot be serialized by pickle.
Unfortunately that line is there for a reason. It cannot just be commented.
The simplest way to reproduce the issue is by doing this:
import pickle
import threading
pickle.dumps(threading.local())
I haven't found a fix yet, though
		</comment>
		<comment id='20' author='tseth92' date='2019-12-04T18:13:21Z'>
		Hey guys, came out with a solution. It's ugly but it seems to work. I hope it helps
By the way, I'm using dill because pickle does not serialize weakref objects.
import tensorflow as tf
import dill
import threading
def extractfromlocal(model): #extracts attributes from the local thrading container
    model._thread_local=model._thread_local.__dict__
    for attr in model.__dict__.values():
        if '_thread_local' in dir(attr):
            extractfromlocal(attr)

def loadtolocal(model): #puts attributes back to the local threading container
    aux=threading.local()
    aux.__dict__.update(model._thread_local)
    model._thread_local = aux
    for attr in model.__dict__.values():
        if '_thread_local' in dir(attr):
            loadtolocal(attr)
            
def save_tf_model(model): #saves the model
    extractfromlocal(model)
    with open('mymodel.pkl','wb') as f:
        dill.dump(model,f)
    loadtolocal(model)

def load_tf_model(model):#loads the model
    with open('mymodel.pkl','rb') as f:
        model=dill.load(f)
        loadtolocal(model)
    return model

#just a quick example of this working
class Model(tf.keras.Model):
    def __init__(self):
        super(Model, self).__init__()
        self.d = tf.keras.layers.Dense(2)

    def call(self, x):
        return self.d(x)

data=tf.random.normal((2, 3))
model = Model()
print('Before saving',model(data))
save_tf_model(model)
print('After saving',model(data))
model=load_tf_model(model)
print('After loading',model(data))
		</comment>
		<comment id='21' author='tseth92' date='2020-02-19T13:10:08Z'>
		
Did somebody make the feature request?

&lt;denchmark-link:https://github.com/renatobellotti&gt;@renatobellotti&lt;/denchmark-link&gt;
  I just did &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/36897&gt;#36897&lt;/denchmark-link&gt;
. It is the first time I use GitHub to ask for a feature so I hope it is well written.
		</comment>
		<comment id='22' author='tseth92' date='2020-03-09T10:33:29Z'>
		

Did somebody make the feature request?

@renatobellotti I just did #36897. It is the first time I use GitHub to ask for a feature so I hope it is well written.

Thank you! :)
		</comment>
		<comment id='23' author='tseth92' date='2020-03-28T20:15:09Z'>
		Doesn't fix the issue, but a potential workaround.
Use keras version 2.3.1 and tensorflow 2.X, and use keras rather than tf.keras and the pickling works:
&lt;denchmark-code&gt;!pip install tensorflow
!pip install keras==2.3.1

import numpy as np
import keras
import tensorflow as tf
import pickle

def keras_model():
    model = keras.Sequential()
    model.add(keras.layers.Dense(20, input_shape=(1,), activation='relu'))
    model.add(keras.layers.Dense(1))
    model.compile(loss='mse', optimizer='adam')
    return model

def tf_model():
    model = tf.keras.Sequential()
    model.add(tf.keras.layers.Dense(20, input_shape=(1,), activation='relu'))
    model.add(tf.keras.layers.Dense(1))
    model.compile(loss='mse', optimizer='adam')
    return model

def data():
    n_samples = 1000
    mid_range = 10 
    X = np.random.random((n_samples,1))*mid_range-(mid_range/2)
    y = X*X
    return X,y

def train():
    if tf_or_keras == 'tf':
        model = tf_model()
    elif tf_or_keras == 'keras':
        model = keras_model()
    X,y = data()
    h = model.fit(X, y,
               epochs=10,
               verbose=1)
    pickle.dump(model, open(tf_or_keras, 'wb'))

tf_type = tf.__version__
print(tf_type)
keras_type = keras.__version__
print(keras_type)
tf_or_keras = 'keras'
train()
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>