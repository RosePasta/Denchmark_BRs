<bug id='42379' author='PyFormulae' open_date='2020-08-14T23:36:15Z' closed_time='2020-08-17T20:35:11Z'>
	<summary>Cube root of negative number returns nan</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v2.3.0-0-gb36436b087 2.3.0
Python version: 3
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory: P100, 16GB

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Describe the current behavior
tf.constant(-1.)**(1/3.) returns nan
Describe the expected behavior
It should return -1
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
tf.constant(-1.)**(1/3.)
Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
Odd roots are defined while even roots are imaginary
	</description>
	<comments>
		<comment id='1' author='PyFormulae' date='2020-08-15T01:53:44Z'>
		I think this is c++ semantics on pow, and numpy also does the same things because it invokes c++ pow, so does tensorflow's backend Eigen.
&lt;denchmark-link:https://en.cppreference.com/w/cpp/numeric/math/pow&gt;https://en.cppreference.com/w/cpp/numeric/math/pow&lt;/denchmark-link&gt;


pow(base, exp) returns NaN and raises FE_INVALID if base is finite and negative and exp is finite and non-integer.

		</comment>
		<comment id='2' author='PyFormulae' date='2020-08-15T02:16:26Z'>
		I think this could be done for integer roots. You could implement a separate function for roots called root. If it's an odd integer root, return sign(x)*root(abs(x)) using pow. It could be used to create an activation function using cube root. It would need a custom gradient due to the sign, in case you want to implement it manually.
		</comment>
		<comment id='3' author='PyFormulae' date='2020-08-17T09:40:26Z'>
		Was able to reproduce the issue with TF v2.3 and TF-nightly. Please find the gist of it &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/de7370c64572ba7004c11239e1b0ef5b/42379.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='PyFormulae' date='2020-08-17T18:55:19Z'>
		&lt;denchmark-link:https://github.com/PyFormulae&gt;@PyFormulae&lt;/denchmark-link&gt;
 I think you forgot to add another set of parenthesis. Please check the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/87264b76972fdb097a633dae2791f508/42379.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
Please verify once and close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='5' author='PyFormulae' date='2020-08-17T19:20:33Z'>
		
@PyFormulae I think you forgot to add another set of parenthesis. Please check the gist here. Thanks!
Please verify once and close the issue if this was resolved for you. Thanks!

That computes the cube root of a float, not a tensor. If you used complex tensors that would work. See &lt;denchmark-link:https://colab.research.google.com/gist/PyFormulae/b318c334512cce2b38a07bde22db826a/42379.ipynb#scrollTo=YyPZzaR8rmCr&gt;https://colab.research.google.com/gist/PyFormulae/b318c334512cce2b38a07bde22db826a/42379.ipynb#scrollTo=YyPZzaR8rmCr&lt;/denchmark-link&gt;
. You have to rotate the result by 2*pi/3
		</comment>
		<comment id='6' author='PyFormulae' date='2020-08-17T20:35:12Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42379&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42379&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>