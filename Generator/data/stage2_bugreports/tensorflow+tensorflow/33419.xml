<bug id='33419' author='cottrell' open_date='2019-10-16T11:12:53Z' closed_time='2020-08-27T06:25:45Z'>
	<summary>save_weights does not work for scalars in keras subclass when using h5 format</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.0.0
Python version: 3.7.3
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

I tried three cases and they all result in the same problem:
&lt;denchmark-code&gt;import os
import tensorflow as tf
import tempfile
import glob

class A(tf.keras.models.Model):
    def __init__(self):
        self.something = tf.keras.backend.variable(name='something', value=1.0)
        super().__init__()

        
for fmt in ['tf', 'h5']:
    print(f'fmt={fmt}')
    filename_a = os.path.join(tempfile.mkdtemp(), 'data_{fmt}')
    filename_b = os.path.join(tempfile.mkdtemp(), 'data_{fmt}')

    a = A()
    a.save_weights(filename_a, save_format=fmt)
    a.something.assign(1.2)
    a.save_weights(filename_b, save_format=fmt)
    print('trainable_variables', a.trainable_variables)

    b = A()
    b.load_weights(filename_b)
    value = float(b.something.numpy())
    check = np.abs(value - 1.2) &lt; 1e-4
    print(value, f'fmt={fmt}. class var PASS={check}. The value should be 1.2')
    
    value = float(b.trainable_variables[0].numpy())
    check = np.abs(value - 1.2) &lt; 1e-4
    print(value, f'fmt={fmt}. trainable_variables PASS={check}. The value should be 1.2')


&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;import os
import tensorflow as tf
import tempfile
import glob

class A(tf.keras.models.Model):
    def __init__(self):
        self.something = tf.Variable(1.0, dtype='float32', trainable=True)
        super().__init__()

        
for fmt in ['tf', 'h5']:
    print(f'fmt={fmt}')
    filename_a = os.path.join(tempfile.mkdtemp(), 'data_{fmt}')
    filename_b = os.path.join(tempfile.mkdtemp(), 'data_{fmt}')

    a = A()
    a.save_weights(filename_a, save_format=fmt)
    a.something.assign(1.2)
    a.save_weights(filename_b, save_format=fmt)
    print('trainable_variables', a.trainable_variables)

    b = A()
    b.load_weights(filename_b)
    value = float(b.something.numpy())
    check = np.abs(value - 1.2) &lt; 1e-4
    print(value, f'fmt={fmt}. class var PASS={check}. The value should be 1.2')
    
    value = float(b.trainable_variables[0].numpy())
    check = np.abs(value - 1.2) &lt; 1e-4
    print(value, f'fmt={fmt}. trainable_variables PASS={check}. The value should be 1.2')
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;import os
import tensorflow as tf
import tempfile
import glob

class A(tf.keras.models.Model):
    def __init__(self):
        super().__init__()

    def build(self, input_shape):
        self.something = self.add_weight(initializer=tf.keras.initializers.Ones(), dtype=tf.float32, shape=(1,), name='something')

    def call(self, x):
        return x


for fmt in ['tf', 'h5']:
    print(f'fmt={fmt}')
    filename_a = os.path.join(tempfile.mkdtemp(), 'data_{fmt}')
    filename_b = os.path.join(tempfile.mkdtemp(), 'data_{fmt}')

    a = A()
    a(np.random.randn(3, 4).astype(np.float32))
    a.save_weights(filename_a, save_format=fmt)
    a.something.assign([1.2])
    a.save_weights(filename_b, save_format=fmt)
    print('trainable_variables', a.trainable_variables)

    b = A()
    b(np.random.randn(3, 4).astype(np.float32))
    b.load_weights(filename_b)
    value = float(b.something.numpy())
    check = np.abs(value - 1.2) &lt; 1e-4
    print(value, f'fmt={fmt}. class var PASS={check}. The value should be 1.2')
    
    value = float(b.trainable_variables[0].numpy())
    check = np.abs(value - 1.2) &lt; 1e-4
    print(value, f'fmt={fmt}. trainable_variables PASS={check}. The value should be 1.2')
&lt;/denchmark-code&gt;

Output is:
&lt;denchmark-code&gt;fmt=tf
trainable_variables [&lt;tf.Variable 'something:0' shape=() dtype=float32, numpy=1.2&gt;]
1.2000000476837158 fmt=tf. class var PASS=True. The value should be 1.2
1.2000000476837158 fmt=tf. trainable_variables PASS=True. The value should be 1.2
fmt=h5
trainable_variables [&lt;tf.Variable 'something:0' shape=() dtype=float32, numpy=1.2&gt;]
1.0 fmt=h5. class var PASS=False. The value should be 1.2
1.0 fmt=h5. trainable_variables PASS=False. The value should be 1.2
&lt;/denchmark-code&gt;

The value of 1.2 is not coming back in the h5 case
	</description>
	<comments>
		<comment id='1' author='cottrell' date='2019-10-17T07:57:20Z'>
		I have tried on colab with TF version 2.0 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/99e3b759bcb03008a038e49f8db272e4/untitled280.ipynb&gt;here.&lt;/denchmark-link&gt;
 Thanks!
		</comment>
		<comment id='2' author='cottrell' date='2019-10-17T18:02:10Z'>
		I think the problem is that model.layers is not model.weights.
The h5 routine uses layers not weights for some reasons:
&lt;denchmark-code&gt;    model_weights_group = f.create_group('model_weights')
    model_layers = model.layers
    save_weights_to_hdf5_group(model_weights_group, model_layers)


&lt;/denchmark-code&gt;

layers does not have the thing:
&lt;denchmark-code&gt;In [17]: w.b.weights
Out[17]: [&lt;tf.Variable 'Variable:0' shape=() dtype=float32, numpy=1.0&gt;]

In [18]: w.b.layers
Out[18]: []
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='cottrell' date='2019-10-17T18:21:44Z'>
		The following is a workaround, however I think the existing behaviour is extremely dangerous.
&lt;denchmark-code&gt;import numpy as np
import os
import tensorflow as tf
import tempfile
import glob

class ScalarLayer(tf.keras.layers.Layer):
    def __init__(self, value, **kwargs):
        super().__init__(**kwargs)
        self.value = tf.Variable(value, dtype='float32', trainable=True)

class A(tf.keras.models.Model):
    def __init__(self):
        super().__init__()
        self.hack = ScalarLayer(1.0)
        self.something = self.hack.value

for fmt in ['tf', 'h5']:
    print(f'fmt={fmt}')
    filename_a = os.path.join(tempfile.mkdtemp(), 'data_{fmt}')
    filename_b = os.path.join(tempfile.mkdtemp(), 'data_{fmt}')

    a = A()
    a.save_weights(filename_a, save_format=fmt)
    a.something.assign(1.2)
    a.save_weights(filename_b, save_format=fmt)
    print('trainable_variables', a.trainable_variables)

    b = A()
    b.load_weights(filename_b)
    value = float(b.something.numpy())
    check = np.abs(value - 1.2) &lt; 1e-4
    print(value, f'fmt={fmt}. class var PASS={check}. The value should be 1.2')

    value = float(b.trainable_variables[0].numpy())
    check = np.abs(value - 1.2) &lt; 1e-4
    print(value, f'fmt={fmt}. trainable_variables PASS={check}. The value should be 1.2')
&lt;/denchmark-code&gt;

Probably this should change:
in tensorflow/tensorflow/tensorflow/python/keras/saving/hdf5_format.py
&lt;denchmark-code&gt;
107     model_weights_group = f.create_group('model_weights')
108     model_layers = model.layers
109     save_weights_to_hdf5_group(model_weights_group, model_layers)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='cottrell' date='2019-10-18T12:23:04Z'>
		Also, using a Dense layer with no bias and calling it once with an array of dim [1, 1] and then using the kernel as a variable "works".
		</comment>
		<comment id='5' author='cottrell' date='2020-04-16T17:03:07Z'>
		Was able to reproduce the issue with TF v2.2.0-rc3. Please find the gist &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/34b87b5dae09d70149d9c7cec162e230/33419.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='6' author='cottrell' date='2020-08-13T04:39:27Z'>
		&lt;denchmark-link:https://github.com/cottrell&gt;@cottrell&lt;/denchmark-link&gt;
 I think this is a stale issue. If you are still looking for solution, &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/771b76e690d26a61165af3b2980f945b/33419.ipynb&gt;here&lt;/denchmark-link&gt;
 is a gist that works.
Two modifications I implemented are based on the error.

In case of subclass model, we need to call the model before loading the weights (error was clear)
Need to implement a call method in the subclass model

Please check &lt;denchmark-link:https://www.tensorflow.org/guide/keras/save_and_serialize#saving_loading_only_the_models_weights_values&gt;this tutorial&lt;/denchmark-link&gt;
 for more information. Thanks!
Please verify once and close the issue if this resolved your issue. Thanks!
		</comment>
		<comment id='7' author='cottrell' date='2020-08-20T05:27:37Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='8' author='cottrell' date='2020-08-27T06:25:43Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='9' author='cottrell' date='2020-08-27T06:25:46Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33419&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33419&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>