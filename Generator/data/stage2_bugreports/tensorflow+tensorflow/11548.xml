<bug id='11548' author='lballes' open_date='2017-07-17T10:16:32Z' closed_time='2018-08-27T22:50:12Z'>
	<summary>Different behavior of tf.extract_image_patches and tf.nn.conv2d for certain padding/stride/filter size combinations</summary>
	<description>
Hi!
I am trying to implement something using tf.extract_image_patches and ran into some troubles that made clear tf.extract_image_patches handles some combinations of padding, filter size and stride differently than tf.nn.conv2d. Since tf.extract_image_patches is conceptually a "part" of a convolution operation, I think this might be unintended behavior.
Specifically, I implemented a "manual" version of a convolution operation using tf.extract_image_patches
def manual_conv(input, filter, strides, padding):
  h_f, w_f, c_in, c_out = filter.get_shape().as_list()
  input_patches = tf.extract_image_patches(input, ksizes=[1, h_f, w_f, 1 ], strides=strides, rates=[1, 1, 1, 1], padding=padding)
  filters_flat = tf.reshape(filter, shape=[h_f*w_f*c_in, c_out])
  return tf.einsum("ijkl,lm-&gt;ijkm", input_patches, filters_flat)
and tested it like this
import unittest
import tensorflow as tf

class TestManualConvToyData(unittest.TestCase):

  def runTest(self):
    m = 32
    c_in = 3
    c_out = 16

    image_sizes = [127, 64]
    filter_sizes = [1, 2, 3, 5, 11]
    strides = [1, 3, 4, 30]
    paddings = ["VALID", "SAME"]

    for fs in filter_sizes:
      for stri in strides:
        for imsize in image_sizes: 
          for pad in paddings:
            h = w = imsize
            h_f = w_f = fs
            print "Testing for", imsize, fs, stri, pad

            tf.reset_default_graph()
            X = tf.constant(1.0+np.random.rand(m, h, w, c_in), tf.float32)
            W = tf.truncated_normal([h_f, w_f, c_in, c_out])

            Z = tf.nn.conv2d(X, W, strides=[1, stri, stri, 1], padding=pad)
            Z_manual = manual_conv(X, W, strides=[1, stri, stri, 1], padding=pad)

            sess = tf.Session()
            sess.run(tf.global_variables_initializer())
            Z_, Z_manual_ = sess.run([Z, Z_manual])
            self.assertEqual(Z_.shape, Z_manual_.shape)
            self.assertTrue(np.allclose(Z_, Z_manual_, rtol=1e-05))
            sess.close()
This test fails for some combinations of padding, filter size and stride. I think it has to do with the fact that  tries to center patches if possible, as discussed in &lt;denchmark-link:https://stackoverflow.com/questions/40731433/understanding-tf-extract-image-patches-for-extracting-patches-from-an-image&gt;this&lt;/denchmark-link&gt;
 stackoverflow question.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Ubuntu 16.04.
Python 2.7.12
tensorflow version 1.2.1 installed via pip (CPU only)

	</description>
	<comments>
		<comment id='1' author='lballes' date='2018-03-28T01:24:54Z'>
		Yangzihao, can you verify this is fixed? The reason for the failure might also be due precision issues instead of padding issues.
		</comment>
		<comment id='2' author='lballes' date='2018-08-24T21:40:31Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/reedwm&gt;@reedwm&lt;/denchmark-link&gt;
: It has been 149 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='3' author='lballes' date='2018-08-27T22:50:12Z'>
		Closing because I assume this is fixed by a change Yangzihao made. Please reopen if that is not the case.
		</comment>
	</comments>
</bug>