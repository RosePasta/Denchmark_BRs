<bug id='36390' author='dmus' open_date='2020-01-31T21:59:14Z' closed_time='2020-03-23T23:25:32Z'>
	<summary>Custom metric in tf.keras.Model compile() gives error, but works when run_eagerly=True</summary>
	<description>
System information*
Tensorflow 2.1 on colab
Describe the current behavior
When model.run_eagerly=True this model works correctly. When run_eagerly=False this gives an error
Error:

ValueError: Tried to convert 'input' to a tensor and failed. Error: None values not supported.

Describe the expected behavior
The metric should run without errors in both cases

See colab notebook: &lt;denchmark-link:https://colab.research.google.com/drive/1SxCf2N6D9bTbnm5fD0c_UYN4CaQ5neNQ&gt;https://colab.research.google.com/drive/1SxCf2N6D9bTbnm5fD0c_UYN4CaQ5neNQ&lt;/denchmark-link&gt;

`class CustomMetric(tf.keras.metrics.Metric):
&lt;denchmark-code&gt;def __init__(self, name='custom_metric', **kwargs):
    super(CustomMetric, self).__init__(name=name, **kwargs)

def update_state(self, src, dst, sample_weight=None):
    src = tf.reshape(src, (-1, 4, 2))
    dst = tf.reshape(dst, (-1, 4, 2))

    def ax(p, q):
        ones = tf.ones(tf.shape(p))[..., 0:1]
        zeros = tf.zeros(tf.shape(p))[..., 0:1]
        return tf.concat(
            [p[:, 0:1], p[:, 1:2], ones, zeros, zeros, zeros,
             -p[:, 0:1] * q[:, 0:1], -p[:, 1:2] * q[:, 0:1]
             ], axis=1)

    def ay(p, q):
        ones = tf.ones(tf.shape(p))[..., 0:1]
        zeros = tf.zeros(tf.shape(p))[..., 0:1]
        return tf.concat(
            [zeros, zeros, zeros, p[:, 0:1], p[:, 1:2], ones,
             -p[:, 0:1] * q[:, 1:2], -p[:, 1:2] * q[:, 1:2]], axis=1)

    # we build matrix A by using only 4 point correspondence. The linear
    # system is solved with the least square method, so here
    # we could even pass more correspondence
    p = []
    p.append(ax(src[:, 0], dst[:, 0]))
    p.append(ay(src[:, 0], dst[:, 0]))

    p.append(ax(src[:, 1], dst[:, 1]))
    p.append(ay(src[:, 1], dst[:, 1]))

    p.append(ax(src[:, 2], dst[:, 2]))
    p.append(ay(src[:, 2], dst[:, 2]))

    p.append(ax(src[:, 3], dst[:, 3]))
    p.append(ay(src[:, 3], dst[:, 3]))

    # A is Bx8x8
    A = tf.stack(p, axis=1)

    # b is a Bx8x1
    b = tf.stack([
        dst[:, 0:1, 0], dst[:, 0:1, 1],
        dst[:, 1:2, 0], dst[:, 1:2, 1],
        dst[:, 2:3, 0], dst[:, 2:3, 1],
        dst[:, 3:4, 0], dst[:, 3:4, 1],
    ], axis=1)

    # solve the system Ax = b
    X = tf.linalg.solve(A, b)
    #return X

def reset_states(self):
    return
def result(self):
    return`
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='dmus' date='2020-02-03T09:40:45Z'>
		I was able to replicate the issue for tf-nightly.Thanks!
		</comment>
		<comment id='2' author='dmus' date='2020-03-19T00:13:53Z'>
		This is fixed with tf-nightly version '2.2.0-dev20200318'. Please give it a try. Thanks!
		</comment>
		<comment id='3' author='dmus' date='2020-03-23T23:25:34Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36390&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36390&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>