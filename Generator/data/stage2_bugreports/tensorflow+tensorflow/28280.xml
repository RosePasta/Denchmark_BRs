<bug id='28280' author='NiklasDL' open_date='2019-04-30T11:42:34Z' closed_time='2019-05-03T19:24:08Z'>
	<summary>[1.12] tensorflow.python.ops yielding strange results</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution: Windows 10
TensorFlow installed from (source or binary): Anaconda
TensorFlow version (use command below): 1.12
Python version:3.6.7
CUDA/cuDNN version: 9.0
GPU model and memory: K80

Describe the current behavior
I run the following code snipped:
&lt;denchmark-code&gt;import numpy as np
from tensorflow.python.framework import ops
from tensorflow.python.ops import random_ops
from tensorflow.python.ops import math_ops
from keras import backend as K

my_input = np.random.random((4, 2, 2, 3))
noise_shape = (my_input.shape[0], 1, 1, my_input.shape[3])
x = ops.convert_to_tensor(my_input, name="x")
rate = 0.51
random_tensor = random_ops.random_uniform(noise_shape, dtype=x.dtype)
K.eval(random_tensor)
&lt;/denchmark-code&gt;

which yields:
&lt;denchmark-code&gt;array([[[[0.64819453, 0.48363056, 0.44276874]]],

       [[[0.67051313, 0.53013834, 0.90202074]]],

       [[[0.39960238, 0.70830756, 0.70461008]]],

       [[[0.99692272, 0.80207655, 0.05433749]]]])
&lt;/denchmark-code&gt;

Now if I run
&lt;denchmark-code&gt;keep_mask = (random_tensor &gt;= rate)
K.eval(math_ops.cast(keep_mask, x.dtype))
&lt;/denchmark-code&gt;

I obtain
&lt;denchmark-code&gt;array([[[[0., 0., 0.]]],

       [[[0., 1., 0.]]],

       [[[0., 0., 1.]]],

       [[[0., 0., 0.]]]])
&lt;/denchmark-code&gt;

Describe the expected behavior
I would expect the output of
&lt;denchmark-code&gt;keep_mask = (random_tensor &gt;= rate)
K.eval(math_ops.cast(keep_mask, x.dtype))
&lt;/denchmark-code&gt;

to be
&lt;denchmark-code&gt;array([[[[1., 0., 0.]]],

       [[[1., 1., 1.]]],

       [[[0., 1., 1.]]],

       [[[1., 1., 0.]]]])
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='NiklasDL' date='2019-05-01T18:33:14Z'>
		&lt;denchmark-link:https://github.com/NiklasDL&gt;@NiklasDL&lt;/denchmark-link&gt;
 I could reproduce the issue with TF1.12 and TF1.13. However, everything works as expected in TF2.0.0-alpha0 (GitHub gist is &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/06da0e027b9a8818bfb1a3b2cfc3372f/untitled126.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='NiklasDL' date='2019-05-03T18:08:29Z'>
		random_ops.random_uniform is a stateful op, so every K.eval on it (or a graph containing it) will return a different result. In your TF2 code, eager mode is on by default, so random_ops.random_uniform is evaluated only once. Note that random_ops.random_uniform is going to be replaced by new stateful random ops in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/stateful_random_ops.py&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/stateful_random_ops.py&lt;/denchmark-link&gt;
 (also see RFC &lt;denchmark-link:https://github.com/tensorflow/community/blob/master/rfcs/20181217-tf2-random-numbers.md&gt;https://github.com/tensorflow/community/blob/master/rfcs/20181217-tf2-random-numbers.md&lt;/denchmark-link&gt;
).
		</comment>
		<comment id='3' author='NiklasDL' date='2019-05-03T19:24:08Z'>
		&lt;denchmark-link:https://github.com/wangpengmit&gt;@wangpengmit&lt;/denchmark-link&gt;
 Thanks for the clarification.
		</comment>
		<comment id='4' author='NiklasDL' date='2019-05-03T19:24:09Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28280&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28280&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>