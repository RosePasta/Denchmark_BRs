<bug id='26175' author='singhcpt' open_date='2019-02-27T15:20:00Z' closed_time='2019-08-01T21:49:25Z'>
	<summary>MultiboxTracker making detections in groups of 9 - 13</summary>
	<description>
System information

OS Platform and Distribution: Linux Ubuntu 18.04.1 LTS
TensorFlow version: 1.12.0
Python version: 2.7.15

Describe the current behavior
It seems that the drawDebug method in the MultiBoxTracker.java file is making more detentions than it should be.
I modified the drawDebug method such that it returns an ArayList of confidence values for each detection as well as booleans which are a check as to whether the detection is correct. Here is the code for that:
&lt;denchmark-code&gt;
public synchronized ArrayList&lt;Tuple&gt; drawDebug(final Canvas canvas, final String groundTruthClass) {
    Log.d("myInfoTag","IN DRAW DEBUG");
    final Paint boxPaint = new Paint();
    ArrayList&lt;Tuple&gt; conVals = new ArrayList&lt;Tuple&gt;();
    boxPaint.setAlpha(10);
    boxPaint.setStyle(Style.STROKE);
    boxPaint.setStrokeWidth(DETECTION_BOX_LINE_THICKNESS);
    boxPaint.setPathEffect(new DashPathEffect(new float[] {DASH_LENGTH, DASH_GAP}, 0));

    for (final Triplet&lt;String, Float, RectF&gt; detection : screenRects) {
        final RectF rect = detection.getThird();
        final String className = detection.getFirst();
        final Float confidence = detection.getSecond();
        boolean correct = false;

        if (confidence &gt;= 0.5) {
            if (className.equals(groundTruthClass)) { // put parameter
                correct = true;
            }
            Tuple conPair = new Tuple&lt;Float, Boolean&gt;(confidence, correct);
            if (!(conVals.contains(conPair))) {
                conVals.add(conPair);
            }
        }

        final String labelString =
              !TextUtils.isEmpty(className)
                      ? String.format("%s %.0f%%", className, confidence*100)
                      : String.format("%.0f%%", confidence);
        if (className.equals(CLASS_1_NAME)) {
            DISPLAY_THRESHOLD = CLASS_1_THRESHOLD;
            boxPaint.setColor(CLASS_1_COLOR);
        } else if (className.equals(CLASS_2_NAME)) {
            DISPLAY_THRESHOLD = CLASS_2_THRESHOLD;
            boxPaint.setColor(CLASS_2_COLOR);
        } else if (className.equals(CLASS_3_NAME)) {
            DISPLAY_THRESHOLD = CLASS_3_THRESHOLD;
            boxPaint.setColor(CLASS_3_COLOR);
        } else if (className.equals(CLASS_4_NAME)) {
            DISPLAY_THRESHOLD = CLASS_4_THRESHOLD;
            boxPaint.setColor(CLASS_4_COLOR);
        } else if (className.equals(CLASS_5_NAME)) {
            DISPLAY_THRESHOLD = CLASS_5_THRESHOLD;
            boxPaint.setColor(CLASS_5_COLOR);
        } else if (className.equals(CLASS_6_NAME)) {
            DISPLAY_THRESHOLD = CLASS_6_THRESHOLD;
            boxPaint.setColor(CLASS_6_COLOR);
        } else if (className.equals(CLASS_7_NAME)) {
            DISPLAY_THRESHOLD = CLASS_7_THRESHOLD;
            boxPaint.setColor(CLASS_7_COLOR);
        }
        if (confidence&gt;= DETECTION_THRESHOLD &amp;&amp; confidence &lt; DISPLAY_THRESHOLD) {
            canvas.drawRect(rect, boxPaint);
            borderedText.drawText(canvas, rect.left, rect.top, labelString);
        }

    }

    if (objectTracker == null) {
      return conVals;
    }

&lt;/denchmark-code&gt;

In DetectorActivity.java, I have all of the values of conVals printed to the screen. However, the same detection prints to the screen anywhere between 9 and 13 times. It seems that there might be an issue with threading, or the drawDebug method is making far too many detections.
Here's the DetectorActivity.java code that takes all the confidences in the arrayList returned by drawDebug, groups them into confidence intervals, and prints them to the screen. I don't believe this is where the issue is, but I've included it just in case. You'll notice that I'm simply just making a count of how many predictions fall in certain confidence ranges and printing those to the screen. There is also a for loop that's denoted by the comment "look here" which is where the detections are individually printed to the screen as the app makes detections. This is how I noticed that the detections were being made in groups of 9 - 13, as opposed to being just single detections.
&lt;denchmark-code&gt;trackingOverlay.addCallback(
    new DrawCallback() {
      @Override
      public void drawCallback(final Canvas canvas) {
        tracker.draw(canvas);
        if (isDebug()){
          ArrayList&lt;Tuple&gt; conPairs = tracker.drawDebug(canvas, groundTruthClass); // need to add ground truth label to parameter list
          if (record) {
            for (Tuple&lt;Float, Boolean&gt; conPair : conPairs) {
              Float conVal = conPair.getFirst();
              Boolean conCorrect = conPair.getSecond();
              if (conVal != 0) {
                if (calArray.size() &lt; 2) {
                  calArray.add(conVal);
                  if ((conVal &gt; 0.0) &amp;&amp; (conVal &lt;= 0.1)) {
                    interval0 += 1;
                    cinterval0 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.1) &amp;&amp; (conVal &lt;= 0.2)) {
                    interval1 += 1;
                    cinterval1 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.2) &amp;&amp; (conVal &lt;= 0.3)) {
                    interval2 += 1;
                    cinterval2 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.3) &amp;&amp; (conVal &lt;= 0.4)) {
                    interval3 += 1;
                    cinterval3 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.4) &amp;&amp; (conVal &lt;= 0.5)) {
                    interval4 += 1;
                    cinterval4 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.5) &amp;&amp; (conVal &lt;= 0.6)) {
                    interval5 += 1;
                    cinterval5 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.6) &amp;&amp; (conVal &lt;= 0.7)) {
                    interval6 += 1;
                    cinterval6 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.7) &amp;&amp; (conVal &lt;= 0.8)) {
                    interval7 += 1;
                    cinterval7 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.8) &amp;&amp; (conVal &lt;= 0.9)) {
                    interval8 += 1;
                    cinterval8 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.9) &amp;&amp; (conVal &lt;= 1.0)) {
                    interval9 += 1;
                    cinterval9 += (conCorrect == true) ? 1 : 0;
                  }
                  // } else if (!(((calArray.get(calArray.size() - 1)).equals(conVal))) &amp;&amp; !((calArray.get(calArray.size() - 2)).equals(conVal))) {
                } else {
                  calArray.add(conVal);
                  if ((conVal &gt; 0.0) &amp;&amp; (conVal &lt;= 0.1)) {
                    interval0 += 1;
                    cinterval0 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.1) &amp;&amp; (conVal &lt;= 0.2)) {
                    interval1 += 1;
                    cinterval1 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.2) &amp;&amp; (conVal &lt;= 0.3)) {
                    interval2 += 1;
                    cinterval2 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.3) &amp;&amp; (conVal &lt;= 0.4)) {
                    interval3 += 1;
                    cinterval3 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.4) &amp;&amp; (conVal &lt;= 0.5)) {
                    interval4 += 1;
                    cinterval4 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.5) &amp;&amp; (conVal &lt;= 0.6)) {
                    interval5 += 1;
                    cinterval5 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.6) &amp;&amp; (conVal &lt;= 0.7)) {
                    interval6 += 1;
                    cinterval6 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.7) &amp;&amp; (conVal &lt;= 0.8)) {
                    interval7 += 1;
                    cinterval7 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.8) &amp;&amp; (conVal &lt;= 0.9)) {
                    interval8 += 1;
                    cinterval8 += (conCorrect == true) ? 1 : 0;
                  } else if ((conVal &gt; 0.9) &amp;&amp; (conVal &lt;= 1.0)) {
                    interval9 += 1;
                    cinterval9 += (conCorrect == true) ? 1 : 0;
                  }
                }

                per0 = (float) cinterval0/interval0;
                per1 = (float) cinterval1/interval1;
                per2 = (float) cinterval2/interval2;
                per3 = (float) cinterval3/interval3;
                per4 = (float) cinterval4/interval4;
                per5 = (float) cinterval5/interval5;
                per6 = (float) cinterval6/interval6;
                per7 = (float) cinterval7/interval7;
                per8 = (float) cinterval8/interval8;
                per9 = (float) cinterval9/interval9;

              }
            }
          }
        }
      }
    });

addCallback(
    new DrawCallback() {
      @Override
      public void drawCallback(final Canvas canvas) {
        if (!isDebug()) {
          return;
        }
        final Bitmap copy = cropCopyBitmap;
        if (copy == null) {
          return;
        }
        // Color 'tint' for volume down stats overlay
        final int backgroundColor = Color.argb(0, 0, 0, 0);
        canvas.drawColor(backgroundColor);

        //final Matrix matrix = new Matrix();
        //final float scaleFactor = 2;
        //matrix.postScale(scaleFactor, scaleFactor);
        //matrix.postTranslate(
        //    canvas.getWidth() - copy.getWidth() * scaleFactor,
        //    canvas.getHeight() - copy.getHeight() * scaleFactor);
        //canvas.drawBitmap(copy, matrix, new Paint());

        final Vector&lt;String&gt; lines = new Vector&lt;String&gt;();
        lines.add("");

        if (record) {
          lines.add("RECORDING ON");
        } else {
          lines.add("RECORDING OFF");
        }

        for (Float confidence: calArray) {
          lines.add(String.valueOf(confidence));
        }

        lines.add("0 to 10: " + String.valueOf(interval0) + " " + String.valueOf(cinterval0) + " " + Float.toString(per0));
        lines.add("10 to 20: " + String.valueOf(interval1) + " " + String.valueOf(cinterval1) + " " + Float.toString(per1));
        lines.add("20 to 30: " + String.valueOf(interval2) + " " + String.valueOf(cinterval2) + " " + Float.toString(per2));
        lines.add("30 to 40: " + String.valueOf(interval3) + " " + String.valueOf(cinterval3) + " " + Float.toString(per3));
        lines.add("40 to 50: " + String.valueOf(interval4) + " " + String.valueOf(cinterval4) + " " + Float.toString(per4));
        lines.add("50 to 60: " + String.valueOf(interval5) + " " + String.valueOf(cinterval5) + " " + Float.toString(per5));
        lines.add("60 to 70: " + String.valueOf(interval6) + " " + String.valueOf(cinterval6) + " " + Float.toString(per6));
        lines.add("70 to 80: " + String.valueOf(interval7) + " " + String.valueOf(cinterval7) + " " + Float.toString(per7));
        lines.add("80 to 90: " + String.valueOf(interval8) + " " + String.valueOf(cinterval8) + " " + Float.toString(per8));
        lines.add("90 to 100: " + String.valueOf(interval9) + " " + String.valueOf(cinterval9) + " " + Float.toString(per9));


        borderedText.drawLines(canvas, 10, canvas.getHeight() - 10, lines);
      }
    });
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='singhcpt' date='2019-02-27T22:39:05Z'>
		&lt;denchmark-link:https://github.com/singhcpt&gt;@singhcpt&lt;/denchmark-link&gt;
 Could you check whether the error persists with the newer version of TF? Thanks!
		</comment>
		<comment id='2' author='singhcpt' date='2019-02-28T19:00:33Z'>
		There are two MultiBoxTracker.java files, are you using the TensorFlow or TensorFlow Lite Android example? If you share the full path of the file, that might help, thanks!
		</comment>
		<comment id='3' author='singhcpt' date='2019-03-11T17:00:35Z'>
		
There are two MultiBoxTracker.java files, are you using the TensorFlow or TensorFlow Lite Android example? If you share the full path of the file, that might help, thanks!

We're using the TensorFlow example, not TensorFlow Lite - this is the file path: /home/plantvillage/tf_demo/src/org/tensorflow/demo/tracking/MultiBoxTracker.java
		</comment>
		<comment id='4' author='singhcpt' date='2019-03-11T17:05:00Z'>
		
@singhcpt Could you check whether the error persists with the newer version of TF? Thanks

Where would I check the TF version? Thanks!
		</comment>
		<comment id='5' author='singhcpt' date='2019-08-01T21:49:25Z'>
		Unfortunately I haven't had a chance to dive deeper into this one, it's been a while, and the mobile version of TensorFlow is deprecated in favor of TensorFlow Lite, so closing as won't fix.
		</comment>
		<comment id='6' author='singhcpt' date='2019-08-01T21:49:26Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=26175&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=26175&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>