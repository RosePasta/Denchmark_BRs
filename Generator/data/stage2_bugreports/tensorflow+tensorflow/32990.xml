<bug id='32990' author='dawsonlp' open_date='2019-10-02T13:38:47Z' closed_time='2020-01-15T19:29:14Z'>
	<summary>Basic tutorial from Tensorflow 2.0 no longer runs on small machine</summary>
	<description>
System information

Tensorflow basic tutorial code from https://www.tensorflow.org/tutorials/quickstart/beginner
Python version:3.7.4, standard yum repository, compiled by GCC 7.3.1 20180712 (Red Hat 7.3.1-6)] on linux
Amazon free-tier EC2 node running amazon linux 2.
pip installed version of tensorflow version 2.0.0

Describe the current behavior
Dies due to memory constraints on Tensorflow 2.0.0 (but not in 1.14.0)
Describe the expected behavior
With tensorflow 1.14.0, the tutorial works just fine, but with 2.0.0 it runs out of memory. This is a small machine that Amazon has on it's free tier (t2.micro). It comes with 1 GB of ram, and I'm not expecting it to run anything really large, but it's an ideal machine from a cost perspective to try out tensorflow basics, and it works just fine with tensorflow 1.14 and earlier.
Code to reproduce the issue
Just the tensorflow tutorial code directly from the tensorflow website.
[ec2-user@ip-xxx-xxx-xxx-xxx ~]$ cat test_tf.py
#!/usr/bin/env python3
import tensorflow as tf
mnist = tf.keras.datasets.mnist
(x_train, y_train),(x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0
model = tf.keras.models.Sequential([
tf.keras.layers.Flatten(input_shape=(28, 28)),
tf.keras.layers.Dense(512, activation=tf.nn.relu),
tf.keras.layers.Dropout(0.2),
tf.keras.layers.Dense(10, activation=tf.nn.softmax)
])
model.compile(optimizer='adam',
loss='sparse_categorical_crossentropy',
metrics=['accuracy'])
model.fit(x_train, y_train, epochs=5)
model.evaluate(x_test, y_test)
Other info / logs
Output from test_tf.py:
[ec2-user@ip-xxx-xxx-xxx-xxx ~]$ ./test_tf.py
2019-10-02 13:30:43.682116: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2019-10-02 13:30:43.775079: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 2400075000 Hz
2019-10-02 13:30:43.778603: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x3798a90 executing computations on platform Host. Devices:
2019-10-02 13:30:43.778635: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): Host, Default Version
2019-10-02 13:30:43.960286: W tensorflow/core/framework/cpu_allocator_impl.cc:81] Allocation of 376320000 exceeds 10% of system memory.
Segmentation fault
	</description>
	<comments>
		<comment id='1' author='dawsonlp' date='2019-10-02T20:31:16Z'>
		This might be caused due to many reasons but you can take a look at this &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/18736&gt;issue&lt;/denchmark-link&gt;
 and try different solutions provided by users as I am unable to reproduce this issue in &lt;denchmark-link:https://colab.sandbox.google.com/gist/gowthamkpr/ee02c43bc293210521d0e9baeb362fb4/untitled158.ipynb&gt;colab&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='dawsonlp' date='2019-10-03T00:52:19Z'>
		One of the suggestions in the issue you linked was to add a swapfile. I added a 1G swapfile. It still shows the warning, which occurs right at the start and later in the process, but it does run successfully. Your colab environment has way more ram - more than 10x what this machine has. Before swap: output of free -m
total        used        free      shared  buff/cache   available
Mem:            983         171         473          12         338         648
Swap:             0           0           0
After  adding swap file:
total        used        free      shared  buff/cache   available
Mem:            983         171         473          12         337         647
Swap:          1023           0        1023
It's a decent workaround, but can the increased memory requirement for 2.0  be documented for the tutorial and in the readme?
		</comment>
		<comment id='3' author='dawsonlp' date='2019-10-03T17:17:40Z'>
		&lt;denchmark-link:https://github.com/dawsonlp&gt;@dawsonlp&lt;/denchmark-link&gt;
 Sure. Thanks for pointing out the issue!
		</comment>
		<comment id='4' author='dawsonlp' date='2020-01-15T19:29:13Z'>
		This is working-as-intended. There's some minimal test scripts on the install page if you're just verifying the install: &lt;denchmark-link:https://www.tensorflow.org/install/pip&gt;https://www.tensorflow.org/install/pip&lt;/denchmark-link&gt;

And you can always jump off to &lt;denchmark-link:https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/quickstart/beginner.ipynb&gt;the Colab&lt;/denchmark-link&gt;
 to test.
A case could be made that memory should be added to the system requirements: &lt;denchmark-link:https://www.tensorflow.org/install/pip&gt;https://www.tensorflow.org/install/pip&lt;/denchmark-link&gt;

But I don't think there's an exact number
		</comment>
	</comments>
</bug>