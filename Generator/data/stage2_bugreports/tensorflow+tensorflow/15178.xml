<bug id='15178' author='zond' open_date='2017-12-07T08:23:46Z' closed_time='2018-01-03T16:59:38Z'>
	<summary>Dataset.from_generator doesn't play nice with feature_column.categorical_column_with_vocabulary_list</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux 4.4.0-98-generic #121~14.04.1-Ubuntu SMP Wed Oct 11 11:54:55 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): ('v1.4.0-rc1-11-g130a514', '1.4.0')
Python version: Python 2.7.6
Bazel version (if compiling from source): -
GCC/Compiler version (if compiling from source): -
CUDA/cuDNN version:  -
GPU model and memory: -
Exact command to reproduce: curl -L -o predict_not_working.py 'https://drive.google.com/uc?authuser=0&amp;id=1KHCNOfJOpEFSLzzJqjtP6oy0EvuLvETE&amp;export=download' &amp;&amp; python predict_not_working.py

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

I have the same code in two versions, &lt;denchmark-link:https://drive.google.com/open?id=1KHCNOfJOpEFSLzzJqjtP6oy0EvuLvETE&gt;one using Dataset.from_generator&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://drive.google.com/open?id=1BFmIEnpuRWPeghUfeBD4225BXZqvLcmS&gt;one using Dataset.from_tensor_slices&lt;/denchmark-link&gt;
. To me it looks like the created Datasets have the exact same content, but feature_column.categorical_column_with_vocabulary_list doesn't work with the  one, which ought to be a bug, right?
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

Sources are in links above.
	</description>
	<comments>
		<comment id='1' author='zond' date='2017-12-07T18:45:59Z'>
		It looks like the problem stems from feature_column.categorical_column_with_vocabulary_list() requiring a defined rank for its input. By default Dataset.from_generator() does not know anything about the shapes of the tensors that it generates, but you can work around this by passing output_shapes when you create it. The following input function worked for me:
def input_fn():
    def gen():
        for i in range(100000):
            for j in range(10):
                yield {"in": str(j)}, j+1
    data = tf.data.Dataset.from_generator(gen, ({"in": tf.string}, tf.int32),
                                          output_shapes=({"in": []}, []))
    data = data.batch(10)
    iterator = data.make_one_shot_iterator()
    return iterator.get_next()
		</comment>
		<comment id='2' author='zond' date='2017-12-08T07:59:29Z'>
		Ah, good workaround, thanks!
		</comment>
		<comment id='3' author='zond' date='2017-12-09T01:35:25Z'>
		&lt;denchmark-link:https://github.com/ispirmustafa&gt;@ispirmustafa&lt;/denchmark-link&gt;
 could you take a look?
		</comment>
		<comment id='4' author='zond' date='2018-01-03T07:45:44Z'>
		It has been 14 days with no activity and this issue has an assignee.Please update the label and/or status accordingly.
		</comment>
		<comment id='5' author='zond' date='2018-01-03T16:59:38Z'>
		This is fixed at head.
		</comment>
	</comments>
</bug>