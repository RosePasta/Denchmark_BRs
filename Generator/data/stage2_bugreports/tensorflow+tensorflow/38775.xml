<bug id='38775' author='nbro' open_date='2020-04-21T23:37:16Z' closed_time='2020-05-29T00:03:01Z'>
	<summary>tf.executing_eagerly returns False in TensorFlow 2 without using tf.function</summary>
	<description>
System information

Have I written custom code: Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS Catalina
TensorFlow installed from: binary
TensorFlow version: 2.1.0
Python version: 3.7.5

Describe the current behavior
The following statement
&lt;denchmark-code&gt;print(tf.executing_eagerly())
&lt;/denchmark-code&gt;

prints  inside a function of a custom layer WHILE BUILDING THE MODEL, so before  is called. None of those functions has the decorator . In &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/executing_eagerly&gt;the documentation&lt;/denchmark-link&gt;
 it says that the only time where the statement above can produce false is when either we are using  (which is not the case), "Executing inside a transformation function for tf.dataset" (which is not the case) or  is called (which is not the case).
Describe the expected behavior
The statement above should return True.
See &lt;denchmark-link:https://stackoverflow.com/q/61355474/3924118&gt;the related Stack Overflow question&lt;/denchmark-link&gt;
.
	</description>
	<comments>
		<comment id='1' author='nbro' date='2020-04-22T05:27:59Z'>
		&lt;denchmark-link:https://github.com/nbro&gt;@nbro&lt;/denchmark-link&gt;

Eager execution is enabled by default in TF 2.x.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/7fdf0fc92a215578b6f2b2319ae8e122/untitled799.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='2' author='nbro' date='2020-04-22T12:11:12Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 Yes, I know, but have you tried to run  inside a custom layer before the model is created or compiled?
		</comment>
		<comment id='3' author='nbro' date='2020-04-22T13:18:27Z'>
		&lt;denchmark-link:https://github.com/nbro&gt;@nbro&lt;/denchmark-link&gt;

Can you help me with simple standalone code to reproduce the issue. It helps us in localizing the issue faster.Thanks!
		</comment>
		<comment id='4' author='nbro' date='2020-04-23T03:50:16Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 Here's a standalone code that reproduces the issue.
&lt;denchmark-code&gt;import tensorflow as tf


class MyLayer(tf.keras.layers.Layer):
    def call(self, inputs):
        tf.print("tf.executing_eagerly() =", tf.executing_eagerly())
        return inputs


def get_model():
    inp = tf.keras.layers.Input(shape=(1,))
    out = MyLayer(8)(inp)
    model = tf.keras.Model(inputs=inp, outputs=out)
    model.summary()
    return model


def train():
    model = get_model()
    model.compile(optimizer="adam", loss="mae")
    x_train = [2, 3, 4, 1, 2, 6]
    y_train = [1, 0, 1, 0, 1, 1]
    model.fit(x_train, y_train)


if __name__ == '__main__':
    train()
&lt;/denchmark-code&gt;

This produces tf.executing_eagerly() = False.
I used TF 2.1.
		</comment>
		<comment id='5' author='nbro' date='2020-04-23T05:37:50Z'>
		I have tried on colab with TF version 2.1.0, 2.2.0-rc3 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/b74a0b49a8e79d3789aa55c7e512cc5d/untitled804.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='6' author='nbro' date='2020-04-23T12:51:03Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 If you execute the following statement on top of the script.
&lt;denchmark-code&gt;tf.config.experimental_run_functions_eagerly(True)
&lt;/denchmark-code&gt;

the output of the script will be tf.executing_eagerly() = True.
According to &lt;denchmark-link:https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/config/experimental_run_functions_eagerly&gt;the documentation&lt;/denchmark-link&gt;
,  will make all functions run eagerly, which means, if I understood correctly, that they are not converted to an underlying graph first, so they run dynamically whenever you call them.
The problem is then that certain functions are first converted/compiled to the underlying graph and become static.
HOWEVER, using  can cause other annoying issues/bugs. See &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/38836&gt;#38836&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='7' author='nbro' date='2020-05-12T12:59:03Z'>
		when an input to a custom layer is symbolic input, then the layer is executed in graph (non-eager) mode. However, if your input to the custom layer is an eager tensor (as in the following example &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/1&gt;#1&lt;/denchmark-link&gt;
, then the custom layer is executed in the eager mode. So your model's output tf.executing_eagerly() = False is expected.
&lt;denchmark-h:h3&gt;Example 1&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;from tensorflow.keras import layers


class Linear(layers.Layer):

  def __init__(self, units=32, input_dim=32):
    super(Linear, self).__init__()
    w_init = tf.random_normal_initializer()
    self.w = tf.Variable(initial_value=w_init(shape=(input_dim, units),
                                              dtype='float32'),
                         trainable=True)
    b_init = tf.zeros_initializer()
    self.b = tf.Variable(initial_value=b_init(shape=(units,),
                                              dtype='float32'),
                         trainable=True)

  def call(self, inputs):
    print("tf.executing_eagerly() =", tf.executing_eagerly())
    return tf.matmul(inputs, self.w) + self.b

x = tf.ones((1, 2)) # returns tf.executing_eagerly() = True
#x = tf.keras.layers.Input(shape=(2,)) #tf.executing_eagerly() = False
linear_layer = Linear(4, 2)
y = linear_layer(x)
print(y) 
#output in graph mode: Tensor("linear_9/Identity:0", shape=(None, 4), dtype=float32)
#output in Eager mode: tf.Tensor([[-0.03011466  0.02563028  0.01234017  0.02272708]], shape=(1, 4), dtype=float32)
&lt;/denchmark-code&gt;

Here is another example with Keras functional API where custom layer was used (similar to you). This model is executed in graph mode and prints tf.executing_eagerly() = False as in your case.
&lt;denchmark-code&gt;from tensorflow import keras
from tensorflow.keras import layers
class CustomDense(layers.Layer):
  def __init__(self, units=32):
    super(CustomDense, self).__init__()
    self.units = units

  def build(self, input_shape):
    self.w = self.add_weight(shape=(input_shape[-1], self.units),
                             initializer='random_normal',
                             trainable=True)
    self.b = self.add_weight(shape=(self.units,),
                             initializer='random_normal',
                             trainable=True)

  def call(self, inputs):
    print("tf.executing_eagerly() =", tf.executing_eagerly())
    return tf.matmul(inputs, self.w) + self.b


inputs = keras.Input((4,))
outputs = CustomDense(10)(inputs)

model = keras.Model(inputs, outputs) 
&lt;/denchmark-code&gt;

Please close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='8' author='nbro' date='2020-05-29T00:03:01Z'>
		Closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='9' author='nbro' date='2020-05-29T00:03:03Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38775&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38775&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>