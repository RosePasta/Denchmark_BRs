<bug id='37351' author='Andreas5739738' open_date='2020-03-05T11:55:23Z' closed_time='2020-10-09T20:37:59Z'>
	<summary>tf.where raises ValueError for RaggedTensor arguments</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock
example script provided in TensorFlow): no
OS Platform and Distribution (e.g.,
Linux Ubuntu 16.04): OS X
TensorFlow installed from (source or
binary): pip install tensorflow
TensorFlow version (use command below): v2.1.0-rc2-17-ge5bf8de410 2.1.0
Python version: 3.7.4

Describe the current behavior
Calling tf.where with a RaggedTensor argument raises ValueError: TypeError: object of type 'RaggedTensor' has no len().

No exception raised. According to &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/ragged&gt;https://www.tensorflow.org/api_docs/python/tf/ragged&lt;/denchmark-link&gt;
, tf.where is supposed to support RaggedTensor.
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
digits = tf.ragged.constant([[3, 1, 4, 1], [], [5, 9, 2], [6], []])
tf.where(tf.equal(digits, 1), 1, 0)
&lt;/denchmark-code&gt;

Other info / logs
&lt;denchmark-code&gt;In [4]: tf.where(tf.equal(digits, 1), 1, 0)
---------------------------------------------------------------------------
_FallbackException                        Traceback (most recent call last)
/usr/local/lib/python3.7/site-packages/tensorflow_core/python/ops/gen_math_ops.py in select_v2(condition, t, e, name)
   8679         _ctx._context_handle, tld.device_name, "SelectV2", name,
-&gt; 8680         tld.op_callbacks, condition, t, e)
   8681       return _result

_FallbackException: This function does not handle the case of the path where all inputs are not already EagerTensors.

During handling of the above exception, another exception occurred:

ValueError                                Traceback (most recent call last)
&lt;ipython-input-4-a793e17a60b8&gt; in &lt;module&gt;
----&gt; 1 tf.where(tf.equal(digits, 1), 1, 0)

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/ops/array_ops.py in where_v2(condition, x, y, name)
   3928       return gen_array_ops.where(condition=condition, name=name)
   3929   elif x is not None and y is not None:
-&gt; 3930     return gen_math_ops.select_v2(condition=condition, t=x, e=y, name=name)
   3931   else:
   3932     raise ValueError("x and y must both be non-None or both be None.")

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/ops/gen_math_ops.py in select_v2(condition, t, e, name)
   8683       try:
   8684         return select_v2_eager_fallback(
-&gt; 8685             condition, t, e, name=name, ctx=_ctx)
   8686       except _core._SymbolicException:
   8687         pass  # Add nodes to the TensorFlow graph.

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/ops/gen_math_ops.py in select_v2_eager_fallback(condition, t, e, name, ctx)
   8706   _attr_T, _inputs_T = _execute.args_to_matching_eager([t, e], ctx)
   8707   (t, e) = _inputs_T
-&gt; 8708   condition = _ops.convert_to_tensor(condition, _dtypes.bool)
   8709   _inputs_flat = [condition, t, e]
   8710   _attrs = ("T", _attr_T)

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py in convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, dtype_hint, ctx, accepted_result_types)
   1312
   1313     if ret is None:
-&gt; 1314       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
   1315
   1316     if ret is NotImplemented:

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)
    315                                          as_ref=False):
    316   _ = as_ref
--&gt; 317   return constant(v, dtype=dtype, name=name)
    318
    319

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py in constant(value, dtype, shape, name)
    256   """
    257   return _constant_impl(value, dtype, shape, name, verify_shape=False,
--&gt; 258                         allow_broadcast=True)
    259
    260

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py in _constant_impl(value, dtype, shape, name, verify_shape, allow_broadcast)
    264   ctx = context.context()
    265   if ctx.executing_eagerly():
--&gt; 266     t = convert_to_eager_tensor(value, ctx, dtype)
    267     if shape is None:
    268       return t

/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py in convert_to_eager_tensor(value, ctx, dtype)
     94       dtype = dtypes.as_dtype(dtype).as_datatype_enum
     95   ctx.ensure_initialized()
---&gt; 96   return ops.EagerTensor(value, ctx.device_name, dtype)
     97
     98

ValueError: TypeError: object of type 'RaggedTensor' has no len()
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Andreas5739738' date='2020-03-06T10:40:51Z'>
		&lt;denchmark-link:https://github.com/Andreas5739738&gt;@Andreas5739738&lt;/denchmark-link&gt;
, I tried replicating the issue but getting different error. Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/4138a70a375e358fe5022fe3358db691/untitled424.ipynb&gt;here&lt;/denchmark-link&gt;
.
Here
&lt;denchmark-code&gt;tf.where(
    condition, x=None, y=None, name=None
)
&lt;/denchmark-code&gt;

x and y must be broadcastable to the same shape.
Can you confirm the issue. Thanks!
		</comment>
		<comment id='2' author='Andreas5739738' date='2020-03-06T10:47:52Z'>
		It looks like in your notebook you are testing with TF 1.15 (I see /tensorflow-1.15.0/python3.6/tensorflow_core/python/framework/tensor_util.py in the error messages)?
Here is a different repro case where the tensor dimensions are the same, which results in the same error:
&lt;denchmark-code&gt;&gt;&gt;&gt; tf.where(tf.equal(digits, 1),tf.ones_like(digits),tf.zeros_like(digits))
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/ops/gen_math_ops.py", line 8680, in select_v2
    tld.op_callbacks, condition, t, e)
tensorflow.python.eager.core._FallbackException: This function does not handle the case of the path where all inputs are not already EagerTensors.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/ops/array_ops.py", line 3930, in where_v2
    return gen_math_ops.select_v2(condition=condition, t=x, e=y, name=name)
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/ops/gen_math_ops.py", line 8685, in select_v2
    condition, t, e, name=name, ctx=_ctx)
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/ops/gen_math_ops.py", line 8706, in select_v2_eager_fallback
    _attr_T, _inputs_T = _execute.args_to_matching_eager([t, e], ctx)
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/eager/execute.py", line 263, in args_to_matching_eager
    t, dtype, preferred_dtype=default_dtype, ctx=ctx))
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py", line 1314, in convert_to_tensor
    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py", line 317, in _constant_tensor_conversion_function
    return constant(v, dtype=dtype, name=name)
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py", line 258, in constant
    allow_broadcast=True)
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py", line 266, in _constant_impl
    t = convert_to_eager_tensor(value, ctx, dtype)
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py", line 96, in convert_to_eager_tensor
    return ops.EagerTensor(value, ctx.device_name, dtype)
ValueError: TypeError: object of type 'RaggedTensor' has no len()
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='Andreas5739738' date='2020-03-09T07:06:43Z'>
		I could replicate the issue with tf 2.1.
Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/c29154968a86ae94e4973533b1385df1/untitled431.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks
		</comment>
		<comment id='4' author='Andreas5739738' date='2020-05-26T16:06:57Z'>
		The semantics of tf.where changed from TF1 to TF2 (in particular the broadcasting semantics changed); and it looks like the ragged version of tf.where only overrides where_v1, not where_v2.  We will need to write an updated version of ragged_where with the v2 semantics.
As a stop-gap solution until then, you can use tf.compat.v1.where(), which does support ragged tensors.
		</comment>
		<comment id='5' author='Andreas5739738' date='2020-05-26T16:09:35Z'>
		Note: since v1 where doesn't do broadcasting, you may need to do it yourself, depending on what your use case looks like.  E.g., for the gist above we'd need  to use something like:
&lt;denchmark-code&gt;digits = tf.ragged.constant([[3, 1, 4, 1], [], [5, 9, 2], [6], []])
tf.compat.v1.where(tf.equal(digits, 1), tf.ones_like(digits), tf.zeros_like(digits))
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='Andreas5739738' date='2020-05-29T16:56:07Z'>
		I tried it in tf 2.2.0 and giving me the same error. See the example that I used
&lt;denchmark-code&gt;b = tf.ragged.constant([[True, False, True], [False, True]])
x = tf.ragged.constant([["A", "B", "C"], ["D", "E"]])
y = tf.ragged.constant([['a', "b", "c"], ["d", "e"]])

&lt;/denchmark-code&gt;

ValueError: TypeError: object of type 'RaggedTensor' has no len()
		</comment>
		<comment id='7' author='Andreas5739738' date='2020-06-01T12:32:11Z'>
		You tried using tf.compat.v1.where in tf 2.2.0?  The following works for me:
&lt;denchmark-code&gt;b = tf.ragged.constant([[True, False, True], [False, True]])
x = tf.ragged.constant([["A", "B", "C"], ["D", "E"]])
y = tf.ragged.constant([['a', "b", "c"], ["d", "e"]])
tf.compat.v1.where(b, x, y)
&lt;/denchmark-code&gt;

Note that I'm calling tf.compat.v1.where, and not tf.where.  As I said, it looks like the v2 version of tf.where hasn't been updated to handle ragged tensors yet, but we will try to update it soon.
		</comment>
		<comment id='8' author='Andreas5739738' date='2020-07-13T13:00:11Z'>
		I have tried in colab with TF versions 2.2,2.3-rc1,nightly versions() and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/22aa2a664bae02e3ae23f16e566fc4c7/untitled116.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='9' author='Andreas5739738' date='2020-10-09T20:37:59Z'>
		Fixed in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/d753f3aff1ee4d23572e059f5a2d49269bbebac9&gt;d753f3a&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='10' author='Andreas5739738' date='2020-10-09T20:38:00Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37351&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37351&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>