<bug id='11758' author='mbchang' open_date='2017-07-25T18:23:05Z' closed_time='2017-12-20T22:37:42Z'>
	<summary>Unexpected behavior in tf.contrib.distributions.Categorical</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS X 10.12.3
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.2.0
Python version: 2.7.10
Bazel version (if compiling from source):
CUDA/cuDNN version: CPU
GPU model and memory: CPU
Exact command to reproduce:

&lt;denchmark-code&gt;&gt;&gt;&gt; import tensorflow as tf
&gt;&gt;&gt; sess = tf.Session()
&gt;&gt;&gt; t = tf.contrib.distributions.Categorical(probs=[0.0,0.0,0.0])
&gt;&gt;&gt; print(sess.run(t.sample([1])))
&gt;&gt;&gt; [3]  # outside the support of the distribution!
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

I wonder if this is a bug or if this is a design choice to have tf.contrib.distributions.Categorical output a number outside the support of the distribution if all of the probabilities are 0. In any case, it would be helpful to throw an error when all probabilities are 0, rather than output a number that doesn't work.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

See above.
	</description>
	<comments>
		<comment id='1' author='mbchang' date='2017-07-25T20:28:51Z'>
		&lt;denchmark-link:https://github.com/ebrevdo&gt;@ebrevdo&lt;/denchmark-link&gt;
, could you take a look?
		</comment>
		<comment id='2' author='mbchang' date='2017-07-26T04:45:17Z'>
		I think there's a construction attribute that enables runtime checks. What happens if you turn it on?
		</comment>
		<comment id='3' author='mbchang' date='2017-07-26T08:43:09Z'>
		When I turn it on, I get the error:
&lt;denchmark-code&gt;&gt;&gt;&gt; import tensorflow as tf
&gt;&gt;&gt; sess = tf.Session()
&gt;&gt;&gt; t = tf.contrib.distributions.Categorical(probs=[0.0,0.0,0.0], validate_args=True)
&gt;&gt;&gt; print(sess.run(t.sample([1])))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "[...]/python2.7/site-packages/tensorflow/python/client/session.py", line 789, in run
    run_metadata_ptr)
  File "[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py", line 997, in _run
    feed_dict_string, options, run_metadata)
  File "[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py", line 1132, in _do_run
    target_list, options, run_metadata)
  File "[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py", line 1152, in _do_call
    raise type(e)(node_def, op, message)
tensorflow.python.framework.errors_impl.InvalidArgumentError: assertion failed: [probs does not sum to 1.] [Condition x ~= y did not hold element-wise: x = ] [Categorical_2/Categorical/validate_probs/Sum:0] [0] [y = ] [Categorical_2/Categorical/validate_probs/Const:0] [1]
	 [[Node: Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert = Assert[T=[DT_STRING, DT_STRING, DT_STRING, DT_FLOAT, DT_STRING, DT_STRING, DT_FLOAT], summarize=3, _device="/job:localhost/replica:0/task:0/cpu:0"](Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_0, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_2, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_4, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_5, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_2)]]
&lt;/denchmark-code&gt;

It get the error only when I call sess.run(t.sample([1]), but not when I construct the distribution t = tf.contrib.distributions.Categorical(probs=[0.0,0.0,0.0], validate_args=True). What is the design choice for this? Also, I am curious about the design choice behind validate_args, because it is unintuitive to mean that an invalid distribution would be useful at all, and so validating the arguments would be necessary in any case.
		</comment>
		<comment id='4' author='mbchang' date='2017-07-26T12:59:26Z'>
		validate_args is very expensive, especially when on a GPU.  So it's
disabled by default.  Turn it on when developing models.
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Jul 26, 2017 1:44 AM, "mbchang" ***@***.***&gt; wrote:
 When I turn it on, I get the error:

 &gt;&gt;&gt; import tensorflow as tf
 &gt;&gt;&gt; sess = tf.Session()
 &gt;&gt;&gt; t = tf.contrib.distributions.Categorical(probs=[0.0,0.0,0.0], validate_args=True)
 &gt;&gt;&gt; print(sess.run(t.sample([1])))
 Traceback (most recent call last):
   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
   File "[...]/python2.7/site-packages/tensorflow/python/client/session.py", line 789, in run
     run_metadata_ptr)
   File "[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py", line 997, in _run
     feed_dict_string, options, run_metadata)
   File "[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py", line 1132, in _do_run
     target_list, options, run_metadata)
   File "[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py", line 1152, in _do_call
     raise type(e)(node_def, op, message)
 tensorflow.python.framework.errors_impl.InvalidArgumentError: assertion failed: [probs does not sum to 1.] [Condition x ~= y did not hold element-wise: x = ] [Categorical_2/Categorical/validate_probs/Sum:0] [0] [y = ] [Categorical_2/Categorical/validate_probs/Const:0] [1]
 	 [[Node: Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert = Assert[T=[DT_STRING, DT_STRING, DT_STRING, DT_FLOAT, DT_STRING, DT_STRING, DT_FLOAT], summarize=3, _device="/job:localhost/replica:0/task:0/cpu:0"](Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_0, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_2, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_4, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_5, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_2)]]

 It get the error only when I call sess.run(t.sample([1]), but not when I
 construct the distribution t = tf.contrib.distributions.
 Categorical(probs=[0.0,0.0,0.0], validate_args=True). What is the design
 choice for this? Also, I am curious about the design choice behind
 validate_args, because it is unintuitive to mean that an invalid
 distribution would be useful at all, and so validating the arguments would
 be necessary in any case.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 &lt;#11758 (comment)&gt;,
 or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/ABtim3CMdscxD-Oubw5GEI2JdPLGr0mvks5sRvxSgaJpZM4Oi75q&gt;
 .



		</comment>
		<comment id='5' author='mbchang' date='2017-07-26T13:00:33Z'>
		Input to the constructor if usually an unknown Tensor which is why we don't
try to check until runtime. We could add static checks here though,
probably.
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Jul 26, 2017 5:59 AM, "Eugene Brevdo" ***@***.***&gt; wrote:
 validate_args is very expensive, especially when on a GPU.  So it's
 disabled by default.  Turn it on when developing models.

 On Jul 26, 2017 1:44 AM, "mbchang" ***@***.***&gt; wrote:

&gt; When I turn it on, I get the error:
&gt;
&gt; &gt;&gt;&gt; import tensorflow as tf
&gt; &gt;&gt;&gt; sess = tf.Session()
&gt; &gt;&gt;&gt; t = tf.contrib.distributions.Categorical(probs=[0.0,0.0,0.0], validate_args=True)
&gt; &gt;&gt;&gt; print(sess.run(t.sample([1])))
&gt; Traceback (most recent call last):
&gt;   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
&gt;   File "[...]/python2.7/site-packages/tensorflow/python/client/session.py", line 789, in run
&gt;     run_metadata_ptr)
&gt;   File "[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py", line 997, in _run
&gt;     feed_dict_string, options, run_metadata)
&gt;   File "[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py", line 1132, in _do_run
&gt;     target_list, options, run_metadata)
&gt;   File "[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py", line 1152, in _do_call
&gt;     raise type(e)(node_def, op, message)tensorflow.python.framework.errors_impl.InvalidArgumentError: assertion failed: [probs does not sum to 1.] [Condition x ~= y did not hold element-wise: x = ] [Categorical_2/Categorical/validate_probs/Sum:0] [0] [y = ] [Categorical_2/Categorical/validate_probs/Const:0] [1]
&gt; 	 [[Node: Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert = Assert[T=[DT_STRING, DT_STRING, DT_STRING, DT_FLOAT, DT_STRING, DT_STRING, DT_FLOAT], summarize=3, _device="/job:localhost/replica:0/task:0/cpu:0"](Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_0, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_2, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_4, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_5, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_2)]]
&gt;
&gt; It get the error only when I call sess.run(t.sample([1]), but not when I
&gt; construct the distribution t = tf.contrib.distributions.Categorical(probs=[0.0,0.0,0.0],
&gt; validate_args=True). What is the design choice for this? Also, I am
&gt; curious about the design choice behind validate_args, because it is
&gt; unintuitive to mean that an invalid distribution would be useful at all,
&gt; and so validating the arguments would be necessary in any case.
&gt;
&gt; —
&gt; You are receiving this because you were mentioned.
&gt; Reply to this email directly, view it on GitHub
&gt; &lt;#11758 (comment)&gt;,
&gt; or mute the thread
&gt; &lt;https://github.com/notifications/unsubscribe-auth/ABtim3CMdscxD-Oubw5GEI2JdPLGr0mvks5sRvxSgaJpZM4Oi75q&gt;
&gt; .
&gt;



		</comment>
		<comment id='6' author='mbchang' date='2017-07-26T15:24:55Z'>
		I see. Checks would be helpful, otherwise the code might silently ignore invalid distributions if the flag is not set. Thanks for the clarifications!
		</comment>
		<comment id='7' author='mbchang' date='2017-12-20T19:22:03Z'>
		It has been 14 days with no activity and the awaiting tensorflower label was assigned. Please update the label and/or status accordingly.
		</comment>
		<comment id='8' author='mbchang' date='2017-12-20T22:37:42Z'>
		Im marking this closed since validate_args=True should have been used by the user to catch this case. As Eugene indicated, in general checks are expensive and therefore we do not want them to be on by default.
		</comment>
	</comments>
</bug>