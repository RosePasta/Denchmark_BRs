<bug id='38776' author='madarez' open_date='2020-04-21T23:51:34Z' closed_time='2020-06-26T03:22:06Z'>
	<summary>[RNN] [TFLiteConverter.] Input tensors containing unknown dimensions fails when coupled with LSTM</summary>
	<description>
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Linux-4.19.104+-x86_64-with-Ubuntu-18.04-bionic (Google Colab's default environment)
TensorFlow installed from (source or binary):
pip install tf-nightly
TensorFlow version (or github SHA if from source):
2.2.0-dev20200421

Command used to run the converter or code if youâ€™re using the Python API
If possible, please share a link to Colab/Jupyter/any notebook.
&lt;denchmark-link:https://colab.research.google.com/drive/1-hjOM3qW5gY1PAqEZhFGHj7FFY5BaZsm&gt;https://colab.research.google.com/drive/1-hjOM3qW5gY1PAqEZhFGHj7FFY5BaZsm&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;from tensorflow.lite.python import lite
from tensorflow.python import keras
import numpy as np

input_a = keras.layers.Input(shape=(3,3,), name='input_a')
interm_b = tf.keras.layers.LSTM(4, name='interm_1')(input_a)
output_c = keras.layers.Dense(1, name='dense_1')(interm_b)

model = tf.keras.models.Model(inputs=[input_a], outputs=[output_c])
model.compile(optimizer='sgd', loss='mean_squared_error')
model.summary()

batch_size = 10
sample_input = np.ones((batch_size,3,3),dtype=np.float32)

expected_value = model.predict(sample_input)

converter = lite.TFLiteConverterV2.from_keras_model(model = model)
converter.experimental_new_converter = True
with open("model.tflite", "wb") as f:
    f.write(converter.convert())

interpreter = lite.Interpreter(model_path="model.tflite")
print(interpreter.get_input_details())
interpreter.resize_tensor_input(0,[batch_size, 3,3])
interpreter.allocate_tensors()
interpreter.set_tensor(0, sample_input)
interpreter.invoke()
interpreter.get_tensor(interpreter.get_output_details()[0]["index"])
&lt;/denchmark-code&gt;

The output from the converter invocation
&lt;denchmark-code&gt;Model: "model_2"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_a (InputLayer)         [(None, 3, 3)]            0         
_________________________________________________________________
interm_1 (LSTM)              (None, 4)                 128       
_________________________________________________________________
dense_1 (Dense)              (None, 1)                 5         
=================================================================
Total params: 133
Trainable params: 133
Non-trainable params: 0
_________________________________________________________________
[{'name': 'input_a', 'index': 0, 'shape': array([1, 3, 3], dtype=int32), 'shape_signature': array([-1,  3,  3], dtype=int32), 'dtype': &lt;class 'numpy.float32'&gt;, 'quantization': (0.0, 0), 'quantization_parameters': {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}, 'sparsity_parameters': {}}]
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
&lt;ipython-input-3-492497848c68&gt; in &lt;module&gt;()
     27 interpreter.allocate_tensors()
     28 interpreter.set_tensor(0, sample_input)
---&gt; 29 interpreter.invoke()
     30 interpreter.get_tensor(interpreter.get_output_details()[0]["index"])

/usr/local/lib/python3.6/dist-packages/tensorflow/lite/python/interpreter.py in invoke(self)
    512     """
    513     self._ensure_safe()
--&gt; 514     self._interpreter.Invoke()
    515 
    516   def reset_all_variables(self):

RuntimeError: tensorflow/lite/kernels/concatenation.cc:74 t-&gt;dims-&gt;data[d] != t0-&gt;dims-&gt;data[d] (10 != 1)Node number 50 (CONCATENATION) failed to prepare.
Node number 10 (WHILE) failed to invoke.
&lt;/denchmark-code&gt;

Failure details
The conversion is successful, but the generated model cannot be resized to variable batch size.
Input tensors containing unknown dimensions fails when coupled with LSTM
Same script would work just fine if one removes creation of interm_b and pass input_a as the input to generate the output_c.
	</description>
	<comments>
		<comment id='1' author='madarez' date='2020-04-22T05:14:10Z'>
		i am able to replicate this, please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/cb2397d9ff19fd13d921c7ea63f2851b/untitled145.ipynb&gt;gist here&lt;/denchmark-link&gt;
 as well as &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/39c8c5377203ea508ccc8d1a368f5ca5/38776.ipynb&gt;on nightly&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='madarez' date='2020-06-23T02:46:55Z'>
		Currently we need all dimensions are known.
Thanks.
		</comment>
		<comment id='3' author='madarez' date='2020-06-25T15:47:02Z'>
		Okay, thanks &lt;denchmark-link:https://github.com/renjie-liu&gt;@renjie-liu&lt;/denchmark-link&gt;
.
Do I close the issue, or is it better to remain open as a feature request?
		</comment>
		<comment id='4' author='madarez' date='2020-06-26T03:22:06Z'>
		our fused ops will need the dimensions to be known because the states are maintained inside the kernel. so it is wai. :(
		</comment>
		<comment id='5' author='madarez' date='2020-06-26T03:22:08Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38776&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38776&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>