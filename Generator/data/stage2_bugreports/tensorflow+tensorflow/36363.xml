<bug id='36363' author='gerwin3' open_date='2020-01-31T09:10:35Z' closed_time='2020-05-21T04:43:08Z'>
	<summary>Different behavior tf.keras and Keras for `stateful=True`</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): All platforms (tested on Ubuntu 18.04 and macOS)
TensorFlow installed from (source or binary): pip
TensorFlow version (use command below): 2.1
Python version: 3.8

Describe the current behavior
The original Keras API specifies that, when an LSTM is set stateful=True, it's batch size must be known beforehand (by specifying batch_shape). The same is true for tf.keras, but it adds another hidden requirement that was not there in the original Keras: tf.keras requires that the full input shape (including batch size) is known. If one of the dimensions is None, it emits the "If a RNN is stateful, it needs to know its batch size." error.
Describe the expected behavior
As with the Keras API, it should be allowed to have None dimensions besides the batch_size.
Code to reproduce the issue
Keras:
&lt;denchmark-code&gt;from keras.models import Model
from keras.layers import Input, LSTM, Reshape

def model():
    input_layer = Input(batch_shape=(1, None))
    reshape_layer = Reshape((1, 100))(input_layer)
    lstm_layer = LSTM(units=100, stateful=True)(reshape_layer)
    return Model(inputs=input_layer, outputs=lstm_layer)

model = model()

# Code runs perfectly fine.
&lt;/denchmark-code&gt;

tf.keras:
&lt;denchmark-code&gt;from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, LSTM, Reshape

def model():
    input_layer = Input(batch_shape=(1, None))
    reshape_layer = Reshape((1, 100))(input_layer)
    lstm_layer = LSTM(units=100, stateful=True)(reshape_layer)
    return Model(inputs=input_layer, outputs=lstm_layer)

model = model()

"""
ValueError: If a RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: 
- If using a Sequential model, specify the batch size by passing a `batch_input_shape` argument to your first layer.
- If using the functional API, specify the batch size by passing a `batch_shape` argument to your Input layer.
"""

&lt;/denchmark-code&gt;

There are some very legitimate use cases for allowing non-batch dimensions to be unknown! This change in functionality prevents me from migrating a (variable) multi-stream CNN model from Keras to tf.keras.
	</description>
	<comments>
		<comment id='1' author='gerwin3' date='2020-01-31T13:25:44Z'>
		Works as intended with &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/c4643b7f631003b9747ace2b26e417ee/36363_keras.ipynb&gt;Keras&lt;/denchmark-link&gt;
, was able to reproduce the error with &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/47bf7a1917dabc817d805b659090c3c6/36363_tf-keras.ipynb&gt;tf.Keras&lt;/denchmark-link&gt;
. Please find the attached Gist. Thanks!
		</comment>
		<comment id='2' author='gerwin3' date='2020-03-28T17:48:33Z'>
		&lt;denchmark-link:https://github.com/gerwin3&gt;@gerwin3&lt;/denchmark-link&gt;
 I think shape information is missing. As a result shape inference is not working and throwing this error. A workaround is to simply use  as shown below.
&lt;denchmark-code&gt;from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, LSTM, Reshape

def model():
    input_layer = Input(batch_shape=(1, None))
    reshape_layer = Reshape((1, 100))(input_layer)
    reshape_layer.set_shape((1,1,100))
    lstm_layer = LSTM(units=100, stateful=True)(reshape_layer)
    
    return Model(inputs=input_layer, outputs=lstm_layer)

model = model()
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='gerwin3' date='2020-04-02T15:17:06Z'>
		&lt;denchmark-link:https://github.com/gerwin3&gt;@gerwin3&lt;/denchmark-link&gt;
 Can you please check my last comment?  Thanks!
		</comment>
		<comment id='4' author='gerwin3' date='2020-04-02T15:31:53Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;

Your solution gets rid of the error message, but does not fix the underlying problem. Old Keras allowed for non-batch dimensions to be unknown (by setting them to None), even when using an RNN. The work-around you provided wouldn't really work if, for example, you have a variable dimension that can change in size depending on the input. (Or maybe it would if you were to invoke set_shape with each iteration?)
I'm not sure if that feature of Keras was actually documented, but the current implementation of tf.keras is definitely incompatible with the original behavior of Keras.
		</comment>
		<comment id='5' author='gerwin3' date='2020-04-07T17:52:13Z'>
		Thanks for reporting the issue.
I think the root cause is from the reshape layer in the code provided. If you check the shape of the reshape layer output, it is (None, 1, 100), where the batch dim is None, and it cause the LSTM layer to fail the validation.
Please check the docstring of the reshape layer in &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/layers/Reshape&gt;https://www.tensorflow.org/api_docs/python/tf/keras/layers/Reshape&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='gerwin3' date='2020-04-07T17:56:43Z'>
		Btw, I don't think there is any change wrt to the reshape layer. The original keras docstring also gives the example where the batch dim is None. Could u print out the reshape_layer.shape for both example and see what's the value there?
		</comment>
		<comment id='7' author='gerwin3' date='2020-04-07T18:49:55Z'>
		Humm, I think somehow the input_shape got by the lstm layer in keras is [1, 1, 100], which is not same as the shape of the reshape layer output. It might be some subtle diff in the keras sequential model that cause this difference. I need to check more details.
		</comment>
		<comment id='8' author='gerwin3' date='2020-04-07T20:33:53Z'>
		I think the root cause is that we don't call layer.comput_output_shape anymore for the default model building, and only call it for dynamic model. This cause the result of the reshape layer to lose the static shape information (batch dim), and cause the LSTM layer to error out.
Will send a fix very soon.
		</comment>
		<comment id='9' author='gerwin3' date='2020-04-18T21:18:46Z'>
		&lt;denchmark-link:https://github.com/gerwin3&gt;@gerwin3&lt;/denchmark-link&gt;

Does the commit &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/40218a75747cd0246665b3edfeaba76719c34d59&gt;40218a7&lt;/denchmark-link&gt;
 "Set static shape information for reshape layer." fix the bug ?
Because on my side, I still have the same problem you described after having integrated the fix.
		</comment>
		<comment id='10' author='gerwin3' date='2020-04-19T09:16:49Z'>
		The issue persists. I tested on tf-nightly 2.2.0.dev20200418.
		</comment>
		<comment id='11' author='gerwin3' date='2020-04-19T10:17:53Z'>
		&lt;denchmark-link:https://github.com/gerwin3&gt;@gerwin3&lt;/denchmark-link&gt;
 ok, so it confirms the problem.
&lt;denchmark-link:https://github.com/tensorflow-copybara&gt;@tensorflow-copybara&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/qlzh727&gt;@qlzh727&lt;/denchmark-link&gt;
, is the commit &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/40218a75747cd0246665b3edfeaba76719c34d59&gt;40218a7&lt;/denchmark-link&gt;
 "Set static shape information for reshape layer." supposed to fix the issue ?
		</comment>
		<comment id='12' author='gerwin3' date='2020-04-21T05:21:14Z'>
		Sorry, the issue is not fixed yet since my change kept getting rollback because of internal breakages. I will try to submit the fix soon.
		</comment>
		<comment id='13' author='gerwin3' date='2020-05-02T16:51:31Z'>
		Hi &lt;denchmark-link:https://github.com/qlzh727&gt;@qlzh727&lt;/denchmark-link&gt;

Do you know if you will have time to fix the issue soon ?
That would be really great ;-)
		</comment>
		<comment id='14' author='gerwin3' date='2020-05-21T04:43:02Z'>
		This should now be fixed.
		</comment>
		<comment id='15' author='gerwin3' date='2020-05-21T04:43:10Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36363&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36363&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>