<bug id='32371' author='zihaozhihao' open_date='2019-09-09T23:13:20Z' closed_time='2019-12-09T21:36:48Z'>
	<summary>Inconsistent tf.Print() results</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary):
TensorFlow version (use command below): 1.14
Python version: 3.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: cuda 10/cudnn7.1
GPU model and memory:

Describe the current behavior
tf.reset_default_graph()
use_resource = False
v = tf.Variable(0, trainable=False, use_resource=use_resource, name='v')
v_op1 = v.assign_add(1, name='v_op1')
v_op2 = v.assign_add(2, name='v_op2')
with tf.control_dependencies([v_op1]):
    w = tf.Print(v,[v],'msg1:', name='v--w')
with tf.control_dependencies([v_op2]):
    w = tf.Print(w,[v],'msg2:', name='w--w')
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    sess.run(w)
When I run the above code multiple times, the print messages are inconsistent. Sometime it prints
msg1:[1]
msg2:[3]
Sometimes it prints
msg1:[3]
msg2:[3]
I though when we execute sess.run(w), v_op2 will be executed first, but in the v_op2, we need to get w first, so actually we are depend on v_op1, that means we actually execute v_op1 first. So v will be 1 and then v was assigned to w. In the end,  v was increased by 2 via v_op2. So my expectation output of tf.Print() should be:
msg1:[1]
msg2:[3]
But why does it print the second results sometimes? Why are the print results inconsistent? One possibility I could think of, is that tf.Print() sometimes read the value of v before v_op2 is done, sometimes it reads the value of v after v_op2 is done. But I'm not sure actually what's going on under the hood.
	</description>
	<comments>
		<comment id='1' author='zihaozhihao' date='2019-09-10T09:25:25Z'>
		&lt;denchmark-link:https://github.com/zihaozhihao&gt;@zihaozhihao&lt;/denchmark-link&gt;
, Use tf.print instead of tf.Print. Please refer the &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/Print&gt;official Tensorflow website&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='zihaozhihao' date='2019-09-10T17:35:17Z'>
		Thanks for your reply &lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 . However, even though I switch to tf.print, the inconsistent print results are still there.
tf.reset_default_graph()
use_resource = False
v = tf.Variable(0, trainable=False, use_resource=use_resource, name='v')
v_op1 = v.assign_add(1, name='v_op1')
v_op2 = v.assign_add(2, name='v_op2')

with tf.control_dependencies([v_op1]):
    w1 = tf.print('msg1:', v, name='v--w')
with tf.control_dependencies([w1, v_op2]):
    w2 = tf.print('msg2:', v, name='w--w')
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    sess.run(w2)
I modify a little bit of the code to make it more clear. Basically, w2 is dependent on w1 and v_op2, and w1 is dependent on v_op1. But when I run the above code, the output is undetermined. Following is the output of 20 repetitions.
msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 1
msg2: 3 

msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 3
msg2: 3 

msg1: 1
msg2: 3 
		</comment>
		<comment id='3' author='zihaozhihao' date='2019-09-12T22:38:04Z'>
		I executed your code against tf nightly version '1.15.0-dev20190821'
It produced consistent results for both messages:
msg1: 3
msg2: 3

msg1: 3
msg2: 3

msg1: 3
msg2: 3
These values are determined by &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/control_dependencies&gt;tf.control_dependencies&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='zihaozhihao' date='2019-09-12T23:11:23Z'>
		&lt;denchmark-link:https://github.com/ymodak&gt;@ymodak&lt;/denchmark-link&gt;
 I also tested on '1.15.0-dev20190821' version, the issue happens if you run over enough times. Ran over 20 times, the inconsistent results are still there.
		</comment>
		<comment id='5' author='zihaozhihao' date='2019-11-22T12:00:26Z'>
		&lt;denchmark-link:https://github.com/zihaozhihao&gt;@zihaozhihao&lt;/denchmark-link&gt;
, I tried executing the code snippet multiple times with TF 1.15. I didn't see inconsistency in the result. Please see the &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/ede7154975bc3fb4c0920252f2fd6e91/untitled268.ipynb&gt;gist&lt;/denchmark-link&gt;
. Please let us know if the issue still persists. Thanks!
		</comment>
		<comment id='6' author='zihaozhihao' date='2019-11-22T18:28:56Z'>
		&lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 Thanks for replying and I checked your gist and found the results were changed if you ran the code multiple times.
		</comment>
		<comment id='7' author='zihaozhihao' date='2019-12-09T21:36:35Z'>
		with tf.control_dependencies([w1, v_op2]) does not guarantee anything about the relative ordering of w1 and v_op2. This is why you're seeing nondeterministic orderings of w1 and v_op2.
(Eager &amp; tf.functions will guarantee code-order ordering of variable updates, according to which the second assignment op will always happen before the first print. Since that's the order in which the ops appear).
		</comment>
		<comment id='8' author='zihaozhihao' date='2019-12-09T21:36:49Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32371&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32371&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='zihaozhihao' date='2019-12-09T21:38:10Z'>
		If the relative ordering is important for your use case you should make sure to use control dependencies in a way that your variable assignment &amp; print ordering is totally non-ambiguous.
So, if you wanted to guarantee the first print happens before the second assignment operator, the assignment operator should have the first print as a control dependency.
		</comment>
	</comments>
</bug>