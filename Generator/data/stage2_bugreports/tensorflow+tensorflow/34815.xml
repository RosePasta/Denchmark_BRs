<bug id='34815' author='johnght' open_date='2019-12-04T03:50:09Z' closed_time='2019-12-12T18:50:33Z'>
	<summary>[bug] Lambda multiple-layers-different-shapes (ValueError: Dimensions must be equal)</summary>
	<description>
Please go to Stack Overflow for help and support:
&lt;denchmark-link:https://stackoverflow.com/questions/tagged/tensorflow&gt;https://stackoverflow.com/questions/tagged/tensorflow&lt;/denchmark-link&gt;

If you open a GitHub issue, here is our policy:

It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).
The form below must be filled out.
It shouldn't be a TensorBoard issue. Those go here.

Here's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Y
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Linux tfbug 4.9.0-11-amd64 #1 SMP Debian 4.9.189-3+deb9u2 (2019-11-11) x86_64 GNU/Linux
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
N/A
TensorFlow installed from (source or binary):
binary

pip install --upgrade tf-nightly 

TensorFlow version (use command below):
v1.12.1-19580-gc397ed9 2.1.0-dev20191203
(also tried in 2.0.0-stable)
Python version:
Python 3.5.3
Bazel version (if compiling from source):
N/A
GCC/Compiler version (if compiling from source):
N/A
CUDA/cuDNN version:
N/A
GPU model and memory:
N/A
Exact command to reproduce:

python lambda_bug.py
You can collect some of this information using our environment capture script:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&lt;/denchmark-link&gt;

You can obtain the TensorFlow version with:
python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"
&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.
When there are multiple layers wrapped in a Lambda, where the unit of the 1st layer is not the same as the inputs, error occurs (ValueError: Dimensions must be equal).
If there are multiple layers wrapped in a Lambda, where the unit of the 1st layer is the same as the inputs, no error occurs (refer to #bug#fine).
If there is only a single layer wrapped in a Lambda, no error occurs (refer to model_lambda_single).
If layer(s) are not wrapped in a Lambda, no error occurs (refer to model_function_,model_bare_).
As a prototype counterpart of subclassed layer, Lambda should be able to wrap multiple layers
Hence, it is convincing that Lambda is not relaying the shape correctly.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.

SOURCE CODE: lambda_bug.py
import tensorflow as tf
from tensorflow.keras import Input, layers
D=123
C=4
#bare
def model_bare_single():
model_in = Input((D,),name='model_in')
model_out = layers.Dense(C,name='lyr_0')(model_in)
model = tf.keras.Model(inputs=model_in,outputs=model_out,name='model_bare_single')
return model
def model_bare_multiple():
model_in = Input((D,),name='model_in')
model_io = layers.Dense(C,name='lyr_0')(model_in)
model_out = layers.Dense(C,name='lyr_1')(model_io)
model = tf.keras.Model(inputs=model_in,outputs=model_out,name='model_bare_multiple')
return model
#function
def function_single(ins):
outs = layers.Dense(C,name='lyr_0')(ins)
return outs
def model_function_single():
model_in = Input((D,),name='model_in')
model_out = function_single(model_in)
model = tf.keras.Model(inputs=model_in,outputs=model_out,name='model_function_single')
return model
def function_multiple(ins):
ios = layers.Dense(C,name='lyr_0')(ins)
outs = layers.Dense(C,name='lyr_1')(ios)
return outs
def model_function_multiple():
model_in = Input((D,),name='model_in')
model_out = function_multiple(model_in)
model = tf.keras.Model(inputs=model_in,outputs=model_out,name='model_function_multiple')
return model
#lambda
def lambda_single(ins):
outs = layers.Dense(C,name='lyr_0')(ins)
return outs
def model_lambda_single():
model_in = Input((D,),name='model_in')
model_out = layers.Lambda(lambda_single,name='lambda_single')(model_in)
model = tf.keras.Model(inputs=model_in,outputs=model_out,name='model_lambda_single')
return model
def lambda_multiple(ins):
ios = layers.Dense(C,name='lyr_0',input_shape=(D,))(ins)#bug
#ios = layers.Dense(D,name='lyr_0')(ins)#fine
outs = layers.Dense(C,name='lyr_1')(ios)
return outs
def model_lambda_multiple():#bug
model_in = Input((D,),name='model_in')
model_out = layers.Lambda(lambda_multiple,name='lambda_multiple',output_shape=(C,))(model_in)
model = tf.keras.Model(inputs=model_in,outputs=model_out,name='model_lambda_multiple')
return model
def main():
model_bare_single().summary()
model_bare_multiple().summary()
model_function_single().summary()
model_function_multiple().summary()
model_lambda_single().summary()
model_lambda_multiple().summary()
print(tf.version)
return
if name == 'main':
main()


LOGS
...
Traceback (most recent call last):
File "/home/johnght/venv/lib/python3.5/site-packages/tensorflow_core/python/framework/ops.py", line 1619, in _creat
e_c_op
c_op = c_api.TF_FinishOperation(op_desc)
tensorflow.python.framework.errors_impl.InvalidArgumentError: Dimensions must be equal, but are 4 and 123 for 'lamb
da_multiple/lyr_1/MatMul' (op: 'MatMul') with input shapes: [?,4], [123,4].
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
File "lambda_bug.py", line 69, in 
main()
File "lambda_bug.py", line 65, in main
model_lambda_multiple().summary()
File "lambda_bug.py", line 56, in model_lambda_multiple
model_out = layers.Lambda(lambda_multiple,name='lambda_multiple',output_shape=(C,))(model_in)
File "/home/johnght/venv/lib/python3.5/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 773,
in call
outputs = call_fn(cast_inputs, *args, **kwargs)
File "/home/johnght/venv/lib/python3.5/site-packages/tensorflow_core/python/keras/layers/core.py", line 827, in cal
l
return self.function(inputs, **arguments)
File "lambda_bug.py", line 52, in lambda_multiple
outs = layers.Dense(C,name='lyr_1')(ios)
File "/home/johnght/venv/lib/python3.5/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 773,
in call
outputs = call_fn(cast_inputs, *args, **kwargs)
File "/home/johnght/venv/lib/python3.5/site-packages/tensorflow_core/python/keras/layers/core.py", line 1089, in ca
ll
outputs = gen_math_ops.mat_mul(inputs, self.kernel)
File "/home/johnght/venv/lib/python3.5/site-packages/tensorflow_core/python/ops/gen_math_ops.py", line 5626, in mat
_mul
name=name)
File "/home/johnght/venv/lib/python3.5/site-packages/tensorflow_core/python/framework/op_def_library.py", line 742,
in _apply_op_helper
attrs=attr_protos, op_def=op_def)
File "/home/johnght/venv/lib/python3.5/site-packages/tensorflow_core/python/framework/func_graph.py", line 595, in
_create_op_internal
compute_device)
File "/home/johnght/venv/lib/python3.5/site-packages/tensorflow_core/python/framework/ops.py", line 3314, in _creat
e_op_internal
op_def=op_def)
File "/home/johnght/venv/lib/python3.5/site-packages/tensorflow_core/python/framework/ops.py", line 1786, in __init
__
control_input_ops)
File "/home/johnght/venv/lib/python3.5/site-packages/tensorflow_core/python/framework/ops.py", line 1622, in _creat
e_c_op
raise ValueError(str(e))
ValueError: Dimensions must be equal, but are 4 and 123 for 'lambda_multiple/lyr_1/MatMul' (op: 'MatMul') with inpu
t shapes: [?,4], [123,4].

	</description>
	<comments>
		<comment id='1' author='johnght' date='2019-12-05T09:32:29Z'>
		I could replicate the issue with Tensorflow 2.1.
Please see the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/c2cbce7aaa916a5364f7f61b1ffdd293/untitled292.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='johnght' date='2019-12-12T18:50:32Z'>
		In 2.1, we explicitly disallow creating variables in Lambda layers, as it can lead to strange behavior like this. If you have complicated Lambda layers that need to create variables, please &lt;denchmark-link:https://keras.io/layers/writing-your-own-keras-layers/&gt;subclass Layer&lt;/denchmark-link&gt;
 instead, as that is more robust to complicated logic.
See &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/153d1ad929fddb21c9910e8178e825af5601fd7e&gt;153d1ad&lt;/denchmark-link&gt;
 for more details on the restrictions placed on Lambda layers.
		</comment>
		<comment id='3' author='johnght' date='2019-12-12T18:50:35Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34815&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34815&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='johnght' date='2019-12-13T17:45:29Z'>
		subclassing is powerful but lame becuase it lacks many auto features: model validation, visualization, serialization...
Loves keras functional api very much ;(
		</comment>
	</comments>
</bug>