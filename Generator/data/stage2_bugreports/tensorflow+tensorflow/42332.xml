<bug id='42332' author='kratsg' open_date='2020-08-13T19:29:34Z' closed_time='2020-10-22T13:25:50Z'>
	<summary>tf.tile feature parity with np.tile/torch.tile/jax.tile</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Darwin ghost.lan 18.7.0 Darwin Kernel Version 18.7.0: Mon Apr 27 20:09:39 PDT 2020; root:xnu-4903.278.35~1/RELEASE_X86_64 x86_64
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: n/a
TensorFlow installed from (source or binary): binary (wheel/pip install)
TensorFlow version (use command below): v2.2.0-rc4-8-g2b96f3662b 2.2.0
Python version: Python 3.7.5
Bazel version (if compiling from source): n/a
GCC/Compiler version (if compiling from source): n/a
CUDA/cuDNN version: n/a
GPU model and memory: n/a

Describe the current behavior
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import tensorflow as tf
&gt;&gt;&gt; input = [10, 20]
&gt;&gt;&gt; np.tile(input, (2,))
array([10, 20, 10, 20])
&gt;&gt;&gt; tf.tile(input, (2,))
&lt;tf.Tensor: shape=(4,), dtype=int32, numpy=array([10, 20, 10, 20], dtype=int32)&gt;
&gt;&gt;&gt; np.tile(input, (2,2))
array([[10, 20, 10, 20],
       [10, 20, 10, 20]])
&gt;&gt;&gt; tf.tile(input, (2,2))
Traceback (most recent call last):
  File "/Users/kratsg/.virtualenvs/pyhf-dev/lib/python3.7/site-packages/tensorflow/python/ops/gen_array_ops.py", line 11036, in tile
    input, multiples)
tensorflow.python.eager.core._FallbackException: This function does not handle the case of the path where all inputs are not already EagerTensors.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/kratsg/.virtualenvs/pyhf-dev/lib/python3.7/site-packages/tensorflow/python/ops/gen_array_ops.py", line 11041, in tile
    input, multiples, name=name, ctx=_ctx)
  File "/Users/kratsg/.virtualenvs/pyhf-dev/lib/python3.7/site-packages/tensorflow/python/ops/gen_array_ops.py", line 11081, in tile_eager_fallback
    ctx=ctx, name=name)
  File "/Users/kratsg/.virtualenvs/pyhf-dev/lib/python3.7/site-packages/tensorflow/python/eager/execute.py", line 60, in quick_execute
    inputs, attrs, num_outputs)
tensorflow.python.framework.errors_impl.InvalidArgumentError: Expected multiples argument to be a vector of length 1 but got length 2 [Op:Tile]
Describe the expected behavior
I expected tensorflow to return the same thing that numpy does (or at least has the same behavior).
Standalone code to reproduce the issue
See above.
Other questions
Is there a clever workaround that mimics the behavior using tf.stack and tf.repeat somehow?
	</description>
	<comments>
		<comment id='1' author='kratsg' date='2020-08-13T19:45:19Z'>
		Current workaround I have right now looks like:
def tile(tensor_in, repeats):
        try:
            return tf.tile(tensor_in, repeats)
        except tf.python.framework.errors_impl.InvalidArgumentError:
            diff = len(repeats) - len(tf.shape(tensor_in))
            if diff &lt; 0:
                raise
            return tf.tile(
                tf.reshape(tensor_in, [1] * diff + tf.shape(tensor_in).numpy().tolist()),
                repeats,
            )
which uses reshape if this inspires anyone to find a better way.
		</comment>
		<comment id='2' author='kratsg' date='2020-08-14T07:19:48Z'>
		&lt;denchmark-link:https://github.com/kratsg&gt;@kratsg&lt;/denchmark-link&gt;

Please, see workaround as mentioned below.Attached &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/3ea07ed15259b4a18e983543c4eb7992/untitled255.ipynb&gt;gist&lt;/denchmark-link&gt;
 for your reference
&lt;denchmark-code&gt;input = tf.constant([[10, 20]], tf.int32)
tf.tile(input, (2,2))
&lt;/denchmark-code&gt;

Thanks!
		</comment>
		<comment id='3' author='kratsg' date='2020-08-14T08:59:44Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 This might not have been clear from the original question, but we're not interested in a specific tensor, like the example snippet

input = tf.constant([[10, 20]], tf.int32)
tf.tile(input, (2,2))

but rather having a shim that can work with arbitrary tensors. The motivation for this question arose from &lt;denchmark-link:https://github.com/scikit-hep/pyhf/issues/1025&gt;scikit-hep/pyhf#1025&lt;/denchmark-link&gt;
 and we went with &lt;denchmark-link:https://github.com/kratsg&gt;@kratsg&lt;/denchmark-link&gt;
's example in &lt;denchmark-link:https://github.com/scikit-hep/pyhf/pull/1028&gt;scikit-hep/pyhf#1028&lt;/denchmark-link&gt;
. Given that, the example code, while correct, doesn't seem to be very useful.
Do you have a more pragmatic solution for arbitrary shape tensors than &lt;denchmark-link:https://github.com/kratsg&gt;@kratsg&lt;/denchmark-link&gt;
 implemented in &lt;denchmark-link:https://github.com/scikit-hep/pyhf/pull/1028&gt;scikit-hep/pyhf#1028&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='4' author='kratsg' date='2020-10-22T13:25:50Z'>
		You can use &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/experimental/numpy/tile&gt;https://www.tensorflow.org/api_docs/python/tf/experimental/numpy/tile&lt;/denchmark-link&gt;

In general the tf.experimental.numpy API adheres strictly to numpy spec. We are working to unifying tf.tile to be more unified with numpy as well but that might take a little bit of time.
		</comment>
		<comment id='5' author='kratsg' date='2020-10-22T13:25:52Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42332&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42332&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>