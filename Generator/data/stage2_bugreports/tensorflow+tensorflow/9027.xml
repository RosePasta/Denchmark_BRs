<bug id='9027' author='sshinderman' open_date='2017-04-06T19:59:56Z' closed_time='2017-06-16T18:29:45Z'>
	<summary>Windows: tf.gfile methods (tf.gfile.Exists, tf.gfile.IsDirectory) are not Windows friendly</summary>
	<description>
(Windows 10) in saver.py  train.save() takes a sess_path but on windows it returns an empty result.
I had to modify to the following (around line 1354)
if not gfile.IsDirectory(os.path.dirname(os.path.abspath(save_path))):
similar issue found here:
&lt;denchmark-link:http://stackoverflow.com/questions/7783308/os-path-dirname-file-returns-empty&gt;http://stackoverflow.com/questions/7783308/os-path-dirname-file-returns-empty&lt;/denchmark-link&gt;

this is via pip install --upgrade tensorflow-gpu
	</description>
	<comments>
		<comment id='1' author='sshinderman' date='2017-04-06T20:15:11Z'>
		There isn't enough detail in this issue report to help. Could you elaborate on:

What version of TensorFlow are you using?
Code that demonstrates the problem

		</comment>
		<comment id='2' author='sshinderman' date='2017-04-06T20:24:13Z'>
		print(tf._ version _)
1.0.1
i don't have a narrowed down standalone app(i'll try to make some time) that demonstrates it but it looks like the call sequence is just:
saver = tf.train.Saver()
saver.save(sess, 'my-model')

ValueError: Parent directory of my-model doesn't exist, can't save.

		</comment>
		<comment id='3' author='sshinderman' date='2017-04-06T20:45:48Z'>
		And what is the problem with that call sequence?
		</comment>
		<comment id='4' author='sshinderman' date='2017-04-06T20:50:45Z'>
		It throws the ValueError (and prints out ValueError: Parent directory of my-model doesn't exist, can't save.)  -- the example on &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/train/Saver&gt;https://www.tensorflow.org/api_docs/python/tf/train/Saver&lt;/denchmark-link&gt;
  shows that style of call.
		</comment>
		<comment id='5' author='sshinderman' date='2017-04-07T00:05:37Z'>
		Ah, I see. I think the problem reduces to the different behavior of tf.gfile.IsDirectory on Windows and other platforms. (I suppose as a workaround you can specify an absolute path to saver.save() for now).
import tensorflow as tf
tf.gfile.IsDirectory('')
is  on Linux and OS X but  on Windows, which causes this trouble.
I believe this comes from the implementations of  and  in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/45d6994f69ac670396671348524a3e88cd0f9656/tensorflow/core/platform/windows/windows_file_system.cc&gt;windows_file_system.cc&lt;/denchmark-link&gt;
, which is invoked from &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/45d6994f69ac670396671348524a3e88cd0f9656/tensorflow/core/platform/file_system.cc#L62&gt;file_system.cc&lt;/denchmark-link&gt;
, which in turn probably comes from the fact that even for Windows, &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/45d6994f69ac670396671348524a3e88cd0f9656/tensorflow/core/platform/file_system.cc#L58&gt;TranslateName&lt;/denchmark-link&gt;
 is implemented by &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/45d6994f69ac670396671348524a3e88cd0f9656/tensorflow/core/lib/io/path.cc#L189&gt;io::CleanPath&lt;/denchmark-link&gt;
, which seems not-Windows friendly with it's use of  and converting an empty path to .
&lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
 : What do you suggest? Making  OS independent? Or perhaps implementing ?
&lt;denchmark-link:https://github.com/guschmue&gt;@guschmue&lt;/denchmark-link&gt;
 : Do you have any suggestions?
		</comment>
		<comment id='6' author='sshinderman' date='2017-04-07T06:01:50Z'>
		let me take a look at the code tomorrow. We had some discussions around TranslateName last year but I forgot the details why we did not implement it ... if I see the code I might remember.
		</comment>
		<comment id='7' author='sshinderman' date='2017-04-07T13:51:23Z'>
		I   should be safe to use on most already-clean filenames, since Windows is tolerant of a mixture of   and   in paths. However it seems like it might be more useful to switch to using something like &lt;denchmark-link:https://msdn.microsoft.com/en-us/library/windows/desktop/hh707084(v=vs.85).aspx&gt;PathCchCanonicalizeEx() &lt;/denchmark-link&gt;
 in .
I'm also a bit concerned about the general logic in . In particular, is it guaranteed to be safe to mix  functions with  and  functions? I'm thinking this might cause the code to falsely reject e.g. an HDFS path on Windows. Or the test &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/f8dce81aeaff40dc78d398741854ad8766806f91/tensorflow/python/training/saver.py#L1457&gt;on L1457&lt;/denchmark-link&gt;
 might fail even though two filenames canonicalize to the same name. Maybe we should be delegating all  use in the Python libraries down to TensorFlow's C++  and  classes?
One other thing we could do in saver.py is to detect whenever a relative path is being supplied (which IIRC wasn't supported on any platform until the latest version) and eagerly convert it to an absolute path.
		</comment>
	</comments>
</bug>