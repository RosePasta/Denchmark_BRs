<bug id='39906' author='menon92' open_date='2020-05-27T14:14:37Z' closed_time='2020-06-08T10:18:35Z'>
	<summary>Model cannot be saved because the input shapes have not been set.</summary>
	<description>
Hello, I'm following &lt;denchmark-link:https://www.tensorflow.org/guide/keras/save_and_serialize#whole-model_saving_loading&gt;save_and_serialize subclass model&lt;/denchmark-link&gt;
 . When I run the following code,
class CustomModel(tf.keras.Model):
    def __init__(self, hidden_units):
        super(CustomModel, self).__init__()
        self.dense_layers = [
            tf.keras.layers.Dense(u) for u in hidden_units]
    def call(self, inputs):
        x = inputs
        for layer in self.dense_layers:
            x = layer(x)
        return x

model = CustomModel([16, 16, 10])
# Build the model by calling it
input_arr = tf.random.uniform((1, 5))
outputs=model(input_arr)
model.save('my_custom_model')
I get the this error, ValueError: Model &lt;__main__.CustomModel object at 0x7f96797a2c10&gt; cannot be saved because the input shapes have not been set. Usually, input shapes are automatically determined from calling .fit() or .predict(). To manually set the shapes, call model._set_inputs(inputs).
But when I change code as following,
model = CustomModel([16, 16, 10])
input_arr = tf.random.uniform((1, 5))
outputs = model(input_arr)
model._set_inputs(input_arr) # add this line
model.save('my_custom_model')
It runs without any error. What could be the possible cause. Do I need to add model._set_inputs(input_arr)  explicitly ?
I'm using,
Ubuntu 20.04 LTS
conda environment
TensorFlow 2.1.1 
Thanks
	</description>
	<comments>
		<comment id='1' author='menon92' date='2020-05-27T14:38:53Z'>
		&lt;denchmark-link:https://github.com/menon92&gt;@menon92&lt;/denchmark-link&gt;

I ran the code shared by you and do not face any errors, please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/7ea93b577b7c605b3656251f739bc09b/untitled200.ipynb&gt;gist here&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='menon92' date='2020-05-30T12:23:28Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 I try the same code in  version of tensorflow and it works without any issue.
I think there is an issue in  version of tensorflow
		</comment>
		<comment id='3' author='menon92' date='2020-06-03T19:27:37Z'>
		&lt;denchmark-link:https://github.com/menon92&gt;@menon92&lt;/denchmark-link&gt;
 Are you sure there is an issue with conda version of tensorflow . I am not running into any error. Thanks!
		</comment>
		<comment id='4' author='menon92' date='2020-06-04T13:43:56Z'>
		&lt;denchmark-link:https://github.com/gowthamkpr&gt;@gowthamkpr&lt;/denchmark-link&gt;
  I got the following output using 
tensorboard                   2.1.0                     py3_0  
tensorflow                      2.1.0           mkl_py37h80a91df_0  
tensorflow-base             2.1.0           mkl_py37h6d63fb7_0  
tensorflow-estimator      2.1.0              pyhd54b08b_0  
And I can regenerate error using bellow code
Python 3.7.6 (default, Jan  8 2020, 19:59:22) 
Type 'copyright', 'credits' or 'license' for more information
IPython 7.12.0 -- An enhanced Interactive Python. Type '?' for help.
In [1]: import tensorflow as tf                                                                                   

In [2]: tf.__version__                                                                                            
Out[2]: '2.1.0'

In [3]: class CustomModel(tf.keras.Model): 
   ...:     def __init__(self, hidden_units): 
   ...:         super(CustomModel, self).__init__() 
   ...:         self.dense_layers = [ 
   ...:             tf.keras.layers.Dense(u) for u in hidden_units] 
   ...:     def call(self, inputs): 
   ...:         x = inputs 
   ...:         for layer in self.dense_layers: 
   ...:             x = layer(x) 
   ...:         return x 
   ...:  
   ...: model = CustomModel([16, 16, 10]) 
   ...: # Build the model by calling it 
   ...: input_arr = tf.random.uniform((1, 5)) 
   ...: outputs=model(input_arr) 
   ...: model.save('my_custom_model')                                                                             
2020-06-04 19:38:19.299584: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX
2020-06-04 19:38:19.590094: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 2294900000 Hz
2020-06-04 19:38:19.601769: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x5579ab0470d0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2020-06-04 19:38:19.601891: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
2020-06-04 19:38:19.647392: I tensorflow/core/common_runtime/process_util.cc:147] Creating new thread pool with default inter op setting: 2. Tune using inter_op_parallelism_threads for best performance.
WARNING:tensorflow:Skipping full serialization of Keras model &lt;__main__.CustomModel object at 0x7f911b73cc10&gt;, because its inputs are not defined.
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-3-ae79cf94cb11&gt; in &lt;module&gt;
     14 input_arr = tf.random.uniform((1, 5))
     15 outputs=model(input_arr)
---&gt; 16 model.save('my_custom_model')

~/anaconda3/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/network.py in save(self, filepath, overwrite, include_optimizer, save_format, signatures, options)
   1006     """
   1007     save.save_model(self, filepath, overwrite, include_optimizer, save_format,
-&gt; 1008                     signatures, options)
   1009 
   1010   def save_weights(self, filepath, overwrite=True, save_format=None):

~/anaconda3/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/save.py in save_model(model, filepath, overwrite, include_optimizer, save_format, signatures, options)
    113   else:
    114     saved_model_save.save(model, filepath, overwrite, include_optimizer,
--&gt; 115                           signatures, options)
    116 
    117 

~/anaconda3/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/saved_model/save.py in save(model, filepath, overwrite, include_optimizer, signatures, options)
     63 
     64   if save_impl.should_skip_serialization(model):
---&gt; 65     saving_utils.raise_model_input_error(model)
     66 
     67   if not include_optimizer:

~/anaconda3/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/saving_utils.py in raise_model_input_error(model)
    111       'set. Usually, input shapes are automatically determined from calling'
    112       ' .fit() or .predict(). To manually set the shapes, call '
--&gt; 113       'model._set_inputs(inputs).'.format(model))
    114 
    115 

ValueError: Model &lt;__main__.CustomModel object at 0x7f911b73cc10&gt; cannot be saved because the input shapes have not been set. Usually, input shapes are automatically determined from calling .fit() or .predict(). To manually set the shapes, call model._set_inputs(inputs)
		</comment>
		<comment id='5' author='menon92' date='2020-06-08T10:18:35Z'>
		&lt;denchmark-link:https://github.com/menon92&gt;@menon92&lt;/denchmark-link&gt;
 Yes this bug exists in 2.1.0 but has been fixed in tensorflow 2.2.0.
&lt;denchmark-link:https://user-images.githubusercontent.com/47574994/84019847-b6e4d680-a936-11ea-9a8e-e7946635f967.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='menon92' date='2020-06-08T10:18:37Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39906&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39906&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='menon92' date='2020-09-23T16:19:23Z'>
		Bug seems to be back in 2.3
		</comment>
		<comment id='8' author='menon92' date='2020-09-24T12:38:25Z'>
		I am facing the same problem in 2.3.
		</comment>
		<comment id='9' author='menon92' date='2020-09-24T14:21:16Z'>
		My bad, the problem is not with 2.3, it is when trying to save a subclassed model.
		</comment>
		<comment id='10' author='menon92' date='2020-12-24T10:38:38Z'>
		I am also facing the same problem in 2.3. And I used "model.compute_output_shape(input_shape=(None, 1080,1920,3))",can also solve this problem when saving  a subclassed model. But why does it work?
		</comment>
	</comments>
</bug>