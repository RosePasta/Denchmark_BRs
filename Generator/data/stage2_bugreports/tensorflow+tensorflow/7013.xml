<bug id='7013' author='shahparth123' open_date='2017-01-23T10:00:01Z' closed_time='2017-02-10T15:49:22Z'>
	<summary>ResourceExhaustedError while converting ImageNet dataset to TFRecord</summary>
	<description>
Determining list of input files and labels from /run/media/root/d9ecddfe-d069-4252-aade-b75fa707b3d2/imagenet-data/raw-data/train.
Traceback (most recent call last):
File "/cgpit/models/inception/bazel-bin/inception/build_imagenet_data.runfiles/inception/inception/data/build_imagenet_data.py", line 704, in 
File "/usr/lib/python2.7/site-packages/tensorflow/python/platform/app.py", line 30, in run
File "/cgpit/models/inception/bazel-bin/inception/build_imagenet_data.runfiles/inception/inception/data/build_imagenet_data.py", line 700, in main
File "/cgpit/models/inception/bazel-bin/inception/build_imagenet_data.runfiles/inception/inception/data/build_imagenet_data.py", line 597, in _process_dataset
File "/cgpit/models/inception/bazel-bin/inception/build_imagenet_data.runfiles/inception/inception/data/build_imagenet_data.py", line 513, in _find_image_files
File "/usr/lib/python2.7/site-packages/tensorflow/python/lib/io/file_io.py", line 251, in get_matching_files
File "/usr/lib64/python2.7/contextlib.py", line 24, in exit
File "/usr/lib/python2.7/site-packages/tensorflow/python/framework/errors.py", line 463, in raise_exception_on_not_ok_status
tensorflow.python.framework.errors.ResourceExhaustedError: /run/media/root/d9ecddfe-d069-4252-aade-b75fa707b3d2/imagenet-data/raw-data/train/n01440764
I have tried changing different number of threads,different shard size for both training and validation. But still getting error.  There is enough RAM is free while executing this command.
Is it bug or it required some configuration changes?
Command used for converting:
bazel-bin/inception/download_and_preprocess_imagenet "${DATA_DIR}"
where $DATA_DIR= /run/media/root/d9ecddfe-d069-4252-aade-b75fa707b3d2/imagenet-data/
Environment info:
Operating System:
CentOS 7 64bit
32GB RAM
Intel® Xeon(R) CPU E5-2630 v2 @ 2.60GHz × 12
CPU only version of tensorflow
Installed from source
[root@cgpits inception]# bazel version
Build label: 0.3.1
Build target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar
Build time: Fri Jul 29 09:09:52 2016 (1469783392)
Build timestamp: 1469783392
Build timestamp as int: 1469783392
head for tenserflow
[root@cgpits tensorflow]# git rev-parse HEAD
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/787ab22d490e79ea8c06511d60d6cddf1b2dd2c2&gt;787ab22&lt;/denchmark-link&gt;

head version for tesorflow/model
[root@cgpits inception]# git rev-parse HEAD
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/82c219f24d3a7c5c48a9550aef10bde3a031520d&gt;82c219f&lt;/denchmark-link&gt;

[root@cgpits inception]# python -c "import tensorflow; print(tensorflow.version)"
0.11.0rc0
	</description>
	<comments>
		<comment id='1' author='shahparth123' date='2017-01-23T15:38:23Z'>
		I wonder what resource is getting exhausted. File Descriptors? Someone got around a similar sounding problem by adding "time.sleep" statements to stagger their file opens in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/6845#issuecomment-273946136&gt;#6845 (comment)&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='shahparth123' date='2017-01-23T20:46:41Z'>
		I  &lt;denchmark-link:https://github.com/yaroslavvb&gt;@yaroslavvb&lt;/denchmark-link&gt;
 is right. From reading the code, it should be coming from &lt;denchmark-link:http://google3/third_party/tensorflow/core/platform/posix/posix_file_system.cc?l=201&gt;GetChildren&lt;/denchmark-link&gt;
, which calls . The only two that could arise in this situation are too many (global/process) open files, or too many links (unlikely unless you have a loop of sorts).
Could you try to debug? Reboot, reduce the number of threads, insert time.sleep, or trace down descriptor leak. First thing to do would be to put some code in GetChildren to see if that's what you're getting.
&lt;denchmark-code&gt;    case ENOSPC:   // No space left on device
#if !defined(_WIN32)
    case EDQUOT:   // Disk quota exceeded
#endif
    case EMFILE:   // Too many open files
    case EMLINK:   // Too many links
    case ENFILE:   // Too many open files in system
    case ENOBUFS:  // No buffer space available
    case ENODATA:  // No message is available on the STREAM read queue
    case ENOMEM:   // Not enough space
    case ENOSR:    // No STREAM resources
#if !defined(_WIN32)
    case EUSERS:   // Too many users
#endif
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='shahparth123' date='2017-01-29T08:54:46Z'>
		can you please provide more details where I can add this statements?
I am not sure what to compare with this case statements.
I have even tried to use different number of threads from 1 to 1024.
Machine is dedicated server with single user and 16TB storage and 32GB RAM.
I am quite sure that error is one of the following case:
case EMFILE:   // Too many open files
case EMLINK:   // Too many links
case ENFILE:   // Too many open files in system
case ENOBUFS:  // No buffer space available
case ENODATA:  // No message is available on the STREAM read queue
case ENOMEM:   // Not enough space
case ENOSR:    // No STREAM resources
		</comment>
		<comment id='4' author='shahparth123' date='2017-01-30T18:03:17Z'>
		Right which one? Can you put a LOG(INFO) statement?
		</comment>
		<comment id='5' author='shahparth123' date='2017-02-10T15:49:22Z'>
		Closing due to lack of response.
		</comment>
	</comments>
</bug>