<bug id='6803' author='chenghuige' open_date='2017-01-12T10:07:33Z' closed_time='2017-06-16T22:19:19Z'>
	<summary>dynamic seq2seq add example of using context_state</summary>
	<description>
tf v1.0, in contrib/seq2seq/seq2seq_test.py , the code do not show how to use context_state, so we can get best path as output instead of rnn outputs.
Can we add sample code?
	</description>
	<comments>
		<comment id='1' author='chenghuige' date='2017-01-12T22:58:06Z'>
		More samples and documentation is always a good thing. I'm going to mark this as contributions welcome. Although I would like to bring this request to the attention of &lt;denchmark-link:https://github.com/xiejw&gt;@xiejw&lt;/denchmark-link&gt;
 who seems to be a big seq2seq contributor.
		</comment>
		<comment id='2' author='chenghuige' date='2017-01-14T12:22:56Z'>
		Well, I have find out how to do this. like below in decoder_fn
&lt;denchmark-code&gt;if cell_output is None:
  context_state = tensor_array_ops.TensorArray(
    dtype=dtype, tensor_array_name="best_path", size=0, dynamic_size=True, infer_shape=False)
else:
  context_state = context_state.write(time - 1, next_input_id)
&lt;/denchmark-code&gt;

and use it :
&lt;denchmark-code&gt;tf.transpose(decoder_context_state_inference.stack(), [1, 0])
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='chenghuige' date='2017-01-14T13:49:13Z'>
		In seq2seq_test.py 108-119, might be a minor bug, here should
&lt;denchmark-code&gt;maximum_length=decoder_sequence_length

# currently Inference decoder
    decoder_fn_inference = Seq2SeqTest._decoder_fn_with_context_state(
        decoder_fn_lib.simple_decoder_fn_inference(
            output_fn=output_fn,
            encoder_state=encoder_state,
            embeddings=decoder_embeddings,
            start_of_sequence_id=start_of_sequence_id,
            end_of_sequence_id=end_of_sequence_id,
            #TODO: find out why it goes to +1
            maximum_length=decoder_sequence_length - 1,
            num_decoder_symbols=num_decoder_symbols,
            dtype=dtypes.int32))
&lt;/denchmark-code&gt;

while in decoder_fun.py , should be
done = control_flow_ops.cond(math_ops.equal(time, maximum_length)
&lt;denchmark-code&gt;# currently decoder_fun.py line 244
done = control_flow_ops.cond(math_ops.greater(time, maximum_length),
        lambda: array_ops.ones([batch_size,], dtype=dtypes.bool),
        lambda: done)
&lt;/denchmark-code&gt;

After the change the test can pass, with decoder_sequence_length 7 equal decoder_context_state_train_res 7,  meaning last time is 7,(time is from 0 to 7)
and output shape is (7,2,20)
&lt;denchmark-code&gt;self.assertEqual(decoder_sequence_length,
                         decoder_context_state_train_res)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='chenghuige' date='2017-05-15T07:28:24Z'>
		Since I haven't found any example codes or explanations for  and  API after 1.1 release, I made my own sample codes.
&lt;denchmark-link:https://github.com/j-min/tf_tutorial_plus/tree/master/RNN_seq2seq&gt;https://github.com/j-min/tf_tutorial_plus/tree/master/RNN_seq2seq&lt;/denchmark-link&gt;

Is there a way that I can contribute by refactoring my code as part of official tutorials seq2seq APIs?
		</comment>
		<comment id='5' author='chenghuige' date='2017-06-16T22:19:19Z'>
		Feel free to send a PR (&lt;denchmark-link:https://help.github.com/articles/merging-a-pull-request/&gt;this&lt;/denchmark-link&gt;
 might help if you're not sure how to contribute!!) otherwise, I am closing this issue now
		</comment>
	</comments>
</bug>