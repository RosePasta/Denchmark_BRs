<bug id='35067' author='nectario' open_date='2019-12-12T22:51:13Z' closed_time='2020-01-16T22:29:27Z'>
	<summary>RaggedTensor Hierarchical Model Issue</summary>
	<description>
I have the following model:
&lt;denchmark-code&gt;   import numpy as np

   def example():

        # Encode each timestep
        in_sentence = Input(shape=(None,),  dtype='int64', name="Input1")
        embedded_sentence = Embedding(1000, 300, trainable=False)(in_sentence)
        lstm_sentence = LSTM(300)(embedded_sentence)
        encoded_model = Model(in_sentence, lstm_sentence)

        section_input = Input(shape=(None, None), dtype='int64', name="Input2")
        section_encoded = TimeDistributed(encoded_model)(section_input)
        section_encoded = LSTM(300)(section_encoded)
        section_model = Model(section_input, section_encoded)

        document_input = Input(shape=(None, None, None), dtype='int64', name="Input3")
        document_encoded = TimeDistributed(section_model)(document_input)
        document_encoded = LSTM(300, return_sequences=True)(document_encoded)
        document_encoded = Dense(1)(document_encoded)
        document_model = Model(document_input, document_encoded)
        document_model.compile(loss='categorical_crossentropy',
                      optimizer='rmsprop',
                      metrics=['accuracy'])

        print(section_model.summary())
        print(document_model.summary())
        return document_model
&lt;/denchmark-code&gt;

And I call it:
&lt;denchmark-code&gt;
y = []
for doc in documents:
    tocs = []
    for token in doc:
        tocs.append(np.random.random_integers(0, high=1))
        y.append(tocs)

output = tf.ragged.constant(y)

input = tf.ragged.constant([[[[4, 5, 2, 6]], [[10, 12, 9], [26, 20, 21, 22], [35, 34, 31]]]])

example().fit(input, output, use_multiprocessing=True, epochs=10, batch_size=1)
&lt;/denchmark-code&gt;

I get the following error:
Traceback (most recent call last):
File "C:\Development\Python\Python37\lib\site-packages\tensorflow_core\python\util\nest.py", line 318, in assert_same_structure
expand_composites)
ValueError: The two structures don't have the same nested structure.
First structure: type=RaggedTensorSpec str=RaggedTensorSpec(TensorShape([5, None, None, None]), tf.int32, 3, tf.int64)
Second structure: type=Tensor str=Tensor("Input3:0", shape=(None, None, None, None), dtype=int64)
More specifically: Substructure "type=RaggedTensorSpec str=RaggedTensorSpec(TensorShape([5, None, None, None]), tf.int32, 3, tf.int64)" is a sequence, while substructure "type=Tensor str=Tensor("Input3:0", shape=(None, None, None, None), dtype=int64)" is not
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
File "D:/Development/competitions/Kaggle/Tensorflow 2.0 - Q_a_A/tensorflow_2.0/QuestionAnswerContextAttention.py", line 392, in 
qa_model.fit(input=documents, output=output)
File "D:/Development/competitions/Kaggle/Tensorflow 2.0 - Q_a_A/tensorflow_2.0/QuestionAnswerContextAttention.py", line 163, in fit
self.example().fit(input, output, use_multiprocessing=True, epochs=10, batch_size=1)
File "C:\Development\Python\Python37\lib\site-packages\tensorflow_core\python\keras\engine\training.py", line 728, in fit
use_multiprocessing=use_multiprocessing)
File "C:\Development\Python\Python37\lib\site-packages\tensorflow_core\python\keras\engine\training_v2.py", line 224, in fit
distribution_strategy=strategy)
File "C:\Development\Python\Python37\lib\site-packages\tensorflow_core\python\keras\engine\training_v2.py", line 547, in _process_training_inputs
use_multiprocessing=use_multiprocessing)
File "C:\Development\Python\Python37\lib\site-packages\tensorflow_core\python\keras\engine\training_v2.py", line 594, in _process_inputs
steps=steps)
File "C:\Development\Python\Python37\lib\site-packages\tensorflow_core\python\keras\engine\training.py", line 2497, in _standardize_user_data
nest.assert_same_structure(a, b, expand_composites=True)
File "C:\Development\Python\Python37\lib\site-packages\tensorflow_core\python\util\nest.py", line 325, in assert_same_structure
% (str(e), str1, str2))
ValueError: The two structures don't have the same nested structure.
First structure: type=RaggedTensorSpec str=RaggedTensorSpec(TensorShape([5, None, None, None]), tf.int32, 3, tf.int64)
Second structure: type=Tensor str=Tensor("Input3:0", shape=(None, None, None, None), dtype=int64)
More specifically: Substructure "type=RaggedTensorSpec str=RaggedTensorSpec(TensorShape([5, None, None, None]), tf.int32, 3, tf.int64)" is a sequence, while substructure "type=Tensor str=Tensor("Input3:0", shape=(None, None, None, None), dtype=int64)" is not
Entire first structure:
.
Entire second structure:
.
Process finished with exit code 1
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary):
TensorFlow version (use command below):
Python version:
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
Describe the expected behavior
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='nectario' date='2019-12-16T05:28:53Z'>
		&lt;denchmark-link:https://github.com/nectario&gt;@nectario&lt;/denchmark-link&gt;
, Please provide the Tensorflow version and complete standalone code to reproduce the reported issue. Thanks!
		</comment>
		<comment id='2' author='nectario' date='2019-12-16T18:08:02Z'>
		Hi &lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 ,
I have attached a zip file that contains the code and data that recreates the problem. Just unzip the file and type:
python RaggedProblem.py
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3969504/ragged_problem.zip&gt;ragged_problem.zip&lt;/denchmark-link&gt;

Thanks!
Nektarios
		</comment>
		<comment id='3' author='nectario' date='2019-12-19T10:40:12Z'>
		I could replicate the issue with Tf 1.15.
Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/3bcb5544395d4609e3ce596ecb473d8e/untitled317.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='nectario' date='2019-12-19T12:16:04Z'>
		Thank you! For me this happened with TensorFlow 2.0 also.
		</comment>
		<comment id='5' author='nectario' date='2019-12-21T00:15:54Z'>
		&lt;denchmark-link:https://github.com/nectario&gt;@nectario&lt;/denchmark-link&gt;
 Can you please take a look at this &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/27170&gt;issue&lt;/denchmark-link&gt;
 and let me know if it helps. Thanks!
		</comment>
		<comment id='6' author='nectario' date='2019-12-21T00:43:55Z'>
		I tried specifing ragged = True on all Input layers, but now I get a different issue:
TypeError: Failed to convert object of type &lt;class 'tensorflow.python.ops.ragged.ragged_tensor.RaggedTensor'&gt; to Tensor. Contents: tf.RaggedTensor(values=Tensor("Input1/flat_values:0", shape=(None,), dtype=int64), row_splits=Tensor("Input1/row_splits_0:0", shape=(None,), dtype=int64)). Consider casting elements to a supported type.
		</comment>
		<comment id='7' author='nectario' date='2020-01-09T22:11:03Z'>
		&lt;denchmark-link:https://github.com/nectario&gt;@nectario&lt;/denchmark-link&gt;
 This is very similar to the issue &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/27170&gt;#27170&lt;/denchmark-link&gt;
. Lets track the issue there and close it here. Please let me know if you think otherwise. Thanks!
		</comment>
		<comment id='8' author='nectario' date='2020-01-16T22:29:29Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35067&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35067&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='nectario' date='2020-06-30T09:27:42Z'>
		&lt;denchmark-link:https://github.com/nectario&gt;@nectario&lt;/denchmark-link&gt;
 did you manage to resolve the issue after all?
I am having exactly the same problem...
Ragged tensor support still seems to be lacking...
I do not want to have to clip and pad my sentences/words to represent documents.
		</comment>
		<comment id='10' author='nectario' date='2020-06-30T14:09:32Z'>
		
@nectario did you manage to resolve the issue after all?
I am having exactly the same problem...
Ragged tensor support still seems to be lacking...
I do not want to have to clip and pad my sentences/words to represent documents.
@Jordy-VL Never resolved this issued. I actually gave up on ragged tensors and padded my inputs. I am hoping for better support for ragged tensors in Keras.

		</comment>
		<comment id='11' author='nectario' date='2020-06-30T14:27:40Z'>
		Thanks for the heads-up &lt;denchmark-link:https://github.com/nectario&gt;@nectario&lt;/denchmark-link&gt;

Quite sad to still wait for this support as the concept behind ragged tensors is beautiful.
It deserves to be embedded deeper in the Tensorflow toolbox.
For anyone wanting to pad and clip ragged tensors I have a handy helper function:
&lt;denchmark-code&gt;def hierarchical_tensorize(variable_length_sequences, max_sentences=None, max_document_len=None):
    '''
    since support for ragged tensors is still incipient; we need to convert ragged to full tensors 
    Args:
        variable_length_sequences (list): 2D variable length "sentences x words" elements
        max_sentences (int, optional): 
        max_document_len (int, optional): IS abused for max words per sentence

        -&gt; .to_tensor()[:,:max_sentences,:max_document_len]
    if using ragged tensor -&gt; can only use batch without padding

    Returns:
        3D tensor
    '''
    docs = tf.ragged.constant(variable_length_sequences)
    docs = docs.to_tensor()
    if max_sentences:
        docs = docs[:, :max_sentences, :]
    if max_document_len:
        docs = docs[:, :, :max_document_len]
    return docs
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>