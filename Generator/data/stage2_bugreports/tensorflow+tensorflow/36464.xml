<bug id='36464' author='demmerichs' open_date='2020-02-04T15:12:37Z' closed_time='2020-12-18T07:04:01Z'>
	<summary>If-Condition with TF-Bools looses track of namescopes</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes (see below)
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: no
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): tested on tf-gpu v2.0.0 and tf v2.1.0 (CPU as I do not have CUDA 10.1 running)
Python version: 3.6.7
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: 10.1/7.4.2
GPU model and memory: tested on Nvidia Quadro P2000

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
When inside a function with graph mode activated, using an if statement with a tensorflow bool leads possibly to a new namescope. I assume this, because the observation one can make is that tf.summarys inside this if condition are placed inside different name scopes depending on whether the condition is a python bool (so static w.r.t. to the tensorflow graph) or a tensorflow tensor (resulting in a dynamic tf.cond through autograph). This happens for both v2.0 and v2.1, afaict. Of course, in eager mode this problem is non-existent.
Describe the expected behavior
The final summary scope should be independent of whether a autographed condition was used or a statically compiled one. Attached is a minimal working example producing a tensorboard output show in the image. The two lines are produced by the same tf.summary.scalar line inside the tf.name_scope('monitoring'). In this case it would be easy enough to move the name_scope creation inside the if-scope, however my use cases do not allow this kind of workaround (summaries are written inside keras layer calls which add their own respective namescope).
Code to reproduce the issue
import os.path as osp

import tensorflow as tf


@tf.function
def func_with_summaries(step, write_summary):
    with tf.name_scope("monitoring"):
        if write_summary:
            tf.summary.scalar("step", step, tf.cast(step, dtype=tf.int64))


brok_writer = tf.summary.create_file_writer(
    osp.join("/tmp", "summaries_conds_scopes", "broken")
)
writer = tf.summary.create_file_writer(
    osp.join("/tmp", "summaries_conds_scopes", "correct")
)
st = tf.Variable(0.0, name="step", dtype=tf.float32)
for i in range(10):
    st.assign(i)
    with writer.as_default():
        func_with_summaries(st, i % 3 == 0)
    with brok_writer.as_default():
        func_with_summaries(st, tf.constant(i) % 3 == 0)

&lt;denchmark-link:https://user-images.githubusercontent.com/6333870/73756641-3172cf00-4768-11ea-9ec8-31f003c0c049.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='demmerichs' date='2020-02-04T15:34:39Z'>
		I just found a workaround, but it is extremely hacky and I hope the underlying issue will still be fixed in the future.
+with tf.name_scope("") as root_scope:
+    pass


 @tf.function
 def func_with_summaries(step, write_summary):
-    with tf.name_scope("monitoring"):
+    with tf.name_scope("monitoring") as scope:
         if write_summary:
+            with tf.name_scope(root_scope):
+                with tf.name_scope(scope):
                     tf.summary.scalar("step", step, tf.cast(step, dtype=tf.int64))
		</comment>
		<comment id='2' author='demmerichs' date='2020-12-04T06:22:36Z'>
		&lt;denchmark-link:https://github.com/demmerichs&gt;@demmerichs&lt;/denchmark-link&gt;
 Looks like this was resolved. Can you please check the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/2d3f8f5ea449a7032f265e08b67b5929/untitled.ipynb&gt;gist here&lt;/denchmark-link&gt;
. I ran your code with .
Can you please verify and close the issue if this was already resolved for you. Thanks!
		</comment>
		<comment id='3' author='demmerichs' date='2020-12-11T06:27:51Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='4' author='demmerichs' date='2020-12-18T07:04:00Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='5' author='demmerichs' date='2020-12-18T07:04:02Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36464&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36464&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>