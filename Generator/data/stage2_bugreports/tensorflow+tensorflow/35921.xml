<bug id='35921' author='kaixih' open_date='2020-01-16T00:01:26Z' closed_time='2020-02-04T23:44:52Z'>
	<summary>Conv2DTranspose shape gets None when exporting SavedModel</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): TF2.1
Python version: 3.6
Bazel version (if compiling from source): NA
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version: 10.2/7.6
GPU model and memory: V100, 32Gb

Describe the current behavior
The shape information after Conv2DTranspose layer is incomplete and the spatial dimensions are missing when exporting the saved model.
Describe the expected behavior
The shape information should include the spatial dimensions when exporting the saved model.
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf

def _crop_and_concat(inputs, residual_input):
  factor = inputs.get_shape().dims[1].value / residual_input.get_shape().dims[1].value
  return tf.concat([inputs, tf.image.central_crop(residual_input, factor)], axis=-1)

class UNet(tf.keras.Model):
  def __init__(self, name):
    super(UNet, self).__init__(name)
    self.conv1 = tf.keras.layers.Conv2D(filters=8,
                                        kernel_size=(3, 3),
                                        activation=tf.nn.relu)
    self.conv2 = tf.keras.layers.Conv2D(filters=8,
                                        kernel_size=(3, 3),
                                        activation=tf.nn.relu)
    self.maxpool = tf.keras.layers.MaxPool2D(pool_size=(2, 2),
                                             strides=2)
    self.deconv = tf.keras.layers.Conv2DTranspose(filters=16,
                                                  kernel_size=(2, 2),
                                                  strides=(2, 2),
                                                  padding='same',
                                                  activation=tf.nn.relu)
    self.conv3 = tf.keras.layers.Conv2D(filters=8,
                                        kernel_size=(3, 3),
                                        activation=tf.nn.relu)

  @tf.function
  def call(self, x):
    print("&gt;&gt;&gt; Input Shape", x.shape)
    out = self.conv1(x)
    print("&gt;&gt;&gt; conv1 Shape", out.shape)
    skip = self.conv2(out)
    print("&gt;&gt;&gt; conv2 Shape", skip.shape)
    out = self.maxpool(skip)
    print("&gt;&gt;&gt; maxpool Shape", out.shape)
    out = self.deconv(out)
    # the deconv shape will be (None, None, None, 16) when exporting saved model
    print("&gt;&gt;&gt; deconv Shape", out.shape)
    out = self.conv3(out)
    out = _crop_and_concat(out, skip)

    return out


model = UNet("dummy")

res = model.predict(tf.ones((1, 400, 400, 1)))

print("Finish prediction")

tf.keras.models.save_model(model, "/results/SavedModel",
    save_format="tf", overwrite=True, include_optimizer=False)
&lt;/denchmark-code&gt;

Other info / logs
&lt;denchmark-code&gt;&gt;&gt;&gt; Input Shape (None, 400, 400, 1)
&gt;&gt;&gt; conv1 Shape (None, 398, 398, 8)
&gt;&gt;&gt; conv2 Shape (None, 396, 396, 8)
&gt;&gt;&gt; maxpool Shape (None, 198, 198, 8)
&gt;&gt;&gt; deconv Shape (None, 396, 396, 16)
&gt;&gt;&gt; Input Shape (None, 400, 400, 1)
&gt;&gt;&gt; conv1 Shape (None, 398, 398, 8)
&gt;&gt;&gt; conv2 Shape (None, 396, 396, 8)
&gt;&gt;&gt; maxpool Shape (None, 198, 198, 8)
&gt;&gt;&gt; deconv Shape (None, 396, 396, 16)
Finish prediction
&gt;&gt;&gt; Input Shape (None, 400, 400, 1)
&gt;&gt;&gt; conv1 Shape (None, 398, 398, 8)
&gt;&gt;&gt; conv2 Shape (None, 396, 396, 8)
&gt;&gt;&gt; maxpool Shape (None, 198, 198, 8)
&gt;&gt;&gt; deconv Shape (None, **None, None**, 16)
... &lt;Then the TF crashes and complains about the None value since we need it to compute the fraction in _crop_and_concat()&gt; ...
&lt;/denchmark-code&gt;

The above log shows that in the prediction, all shapes are correctly inferred. But when we are exporting the saved model: the shape becomes incomplete and the spatial info are lost only after the deconv (Conv2DTranspose) and all the other layers still looks fine with correct shape info. So, we have two questions:
(1) Why do we need to calculate the shapes again when exporting the saved model?
(2) Why is the spatial info lost only after deconv? And this one looks like a bug.
FYI &lt;denchmark-link:https://github.com/nluehr&gt;@nluehr&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='kaixih' date='2020-01-16T06:50:55Z'>
		Issue replicating for TF 2.1 and &lt;denchmark-link:https://colab.sandbox.google.com/gist/oanush/13d6928dcc1232b3a91217e3e28a679a/35921.ipynb&gt;tf-nightly.&lt;/denchmark-link&gt;
Thanks!
		</comment>
		<comment id='2' author='kaixih' date='2020-01-16T18:36:41Z'>
		Full error trace is as follows
&lt;denchmark-code&gt;&gt;&gt;&gt; Input Shape (None, 400, 400, 1)
&gt;&gt;&gt; conv1 Shape (None, 398, 398, 8)
&gt;&gt;&gt; conv2 Shape (None, 396, 396, 8)
&gt;&gt;&gt; maxpool Shape (None, 198, 198, 8)
&gt;&gt;&gt; deconv Shape (None, 396, 396, 16)
&gt;&gt;&gt; Input Shape (None, 400, 400, 1)
&gt;&gt;&gt; conv1 Shape (None, 398, 398, 8)
&gt;&gt;&gt; conv2 Shape (None, 396, 396, 8)
&gt;&gt;&gt; maxpool Shape (None, 198, 198, 8)
&gt;&gt;&gt; deconv Shape (None, 396, 396, 16)
Finish prediction
&gt;&gt;&gt; Input Shape (None, 400, 400, 1)
&gt;&gt;&gt; conv1 Shape (None, 398, 398, 8)
&gt;&gt;&gt; conv2 Shape (None, 396, 396, 8)
&gt;&gt;&gt; maxpool Shape (None, 198, 198, 8)
&gt;&gt;&gt; deconv Shape (None, None, None, 16)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-2-7f41394a0e0e&gt; in &lt;module&gt;()
     50 
     51 tf.keras.models.save_model(model, "/results/SavedModel",
---&gt; 52     save_format="tf", overwrite=True, include_optimizer=False)

26 frames
/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/func_graph.py in wrapper(*args, **kwargs)
    966           except Exception as e:  # pylint:disable=broad-except
    967             if hasattr(e, "ag_error_metadata"):
--&gt; 968               raise e.ag_error_metadata.to_exception(e)
    969             else:
    970               raise

TypeError: in user code:

    &lt;ipython-input-2-7f41394a0e0e&gt;:40 call  *
        out = _crop_and_concat(out, skip)
    &lt;ipython-input-2-7f41394a0e0e&gt;:4 _crop_and_concat  *
        factor = inputs.get_shape().dims[1].value / residual_input.get_shape().dims[1].value

    TypeError: unsupported operand type(s) for /: 'NoneType' and 'int'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='kaixih' date='2020-01-17T18:17:09Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 Thx for the update. After reading the doc here &lt;denchmark-link:https://www.tensorflow.org/guide/concrete_function&gt;https://www.tensorflow.org/guide/concrete_function&lt;/denchmark-link&gt;
,
&lt;denchmark-code&gt;Note: tf.saved_model retraces all concrete_functions when saving them. This is to ensure that the exported concrete functions capture changes in the environment on export (e.g. distribution strategy scope).
&lt;/denchmark-code&gt;

I think my first question in the description is answered. But the issue of missing spatial info after deconv is still on.
		</comment>
		<comment id='4' author='kaixih' date='2020-02-04T19:36:13Z'>
		@houtoms Saving a subclassed model is little different. Check for more details in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/36362#issuecomment-581557975&gt;this response&lt;/denchmark-link&gt;
. In short, can you try saving the weights using  and then (1) load the model, (ii) run on some data, and (iii) load_weights. This approach is clearly mentioned in the TF website &lt;denchmark-link:https://www.tensorflow.org/guide/keras/save_and_serialize#saving_subclassed_models&gt;here&lt;/denchmark-link&gt;
. Thanks!
Please let us know if you have any questions. Please close the issue if this resolved your issue. &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/9dab35571b54def66aa84fa9cfb4081d/35921.ipynb&gt;Here&lt;/denchmark-link&gt;
 is the gist for our reference. Thanks!
		</comment>
		<comment id='5' author='kaixih' date='2020-02-04T23:44:52Z'>
		Thx. Closing.
		</comment>
		<comment id='6' author='kaixih' date='2020-02-04T23:44:54Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35921&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35921&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>