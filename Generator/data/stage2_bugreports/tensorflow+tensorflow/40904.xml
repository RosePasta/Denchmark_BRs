<bug id='40904' author='luischinchillagarcia' open_date='2020-06-29T01:50:10Z' closed_time='2020-09-03T06:03:55Z'>
	<summary>ERROR: tf.function, tf.data.Dataset, tensorflow-gpu incompatible</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
TensorFlow version (use command below): 2.3.0 (affects all TF &gt; 2.0.0 )
Python version: 3.7

Describe the current behavior
I encountered an error when a tf.data.Dataset object is created or modified inside a tf.function graph while using tensorflow-gpu. Based on other issues, it seems this is caused by TF improperly placing the _VariantWrapper on a GPU. A _VariantWrapper is caused when a dataset object is created or modified inside a tf.function graph.
Here is a small &lt;denchmark-link:https://colab.research.google.com/drive/1L_k_jomuAwKoM7RdiR-PLj7AfNZQVzh1?usp=sharing&gt;Colab gist&lt;/denchmark-link&gt;
 highlighting code snippet of this issue and the related issues: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34112&gt;issue1&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34519&gt;issue2&lt;/denchmark-link&gt;
. This error has persisted since tf&gt;2.0.0.
To put it plainly, does this mean we should avoid wrapping any dataset operations in a tf.function?
eg.
# Error
@tf.function
def f():
    dataset = tf.data.Dataset.from_tensor_slices(([1, 2, 3], [4, 5, 6]))
    for e in tf.range(3):
        for x, y in dataset:
            tf.print(x, y, e)
f()
#Succeeds outside graph
dataset = tf.data.Dataset.from_tensor_slices(([1, 2, 3], [4, 5, 6]))

@tf.function
def f():
    for e in tf.range(3):
        for x, y in dataset: # `dataset` is transformed into `_VariantWrapper` rather than staying as a `tf.data.Dataset` object
            tf.print(x, y, e)
f()
Describe the expected behavior

Colab: &lt;denchmark-link:https://colab.research.google.com/drive/1L_k_jomuAwKoM7RdiR-PLj7AfNZQVzh1?usp=sharing&gt;https://colab.research.google.com/drive/1L_k_jomuAwKoM7RdiR-PLj7AfNZQVzh1?usp=sharing&lt;/denchmark-link&gt;

Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
The complete error message is:
No unary variant device copy function found for direction: 1 and Variant type_index: 
tensorflow::data::(anonymous namespace)::DatasetVariantWrapper
	</description>
	<comments>
		<comment id='1' author='luischinchillagarcia' date='2020-06-29T08:40:04Z'>
		I have tried in colab with TF version 2.3.0rc0 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/34e39e888cee56a745c883924117498c/untitled58.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='2' author='luischinchillagarcia' date='2020-07-01T17:16:16Z'>
		I have tried in colab with TF version 2.2 it encounters problem @tf.function both inside and outside the graph.Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/5d2ad5300d0a5c898a6bc9e9c5462598/untitled67.ipynb&gt;here&lt;/denchmark-link&gt;
.However in nightly version () i was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/c879985eb80eff2e8d9d60ec5325b011/untitled68.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='3' author='luischinchillagarcia' date='2020-07-02T06:09:10Z'>
		Thank you for looking into it! Do you know if there is a current workaround when creating a tf.data object inside a tf.function?
		</comment>
		<comment id='4' author='luischinchillagarcia' date='2020-07-27T13:40:07Z'>
		Hey &lt;denchmark-link:https://github.com/luischinchillagarcia&gt;@luischinchillagarcia&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 , I just noticed this issue. Sorry it has not been replied by TF team for such a long time.
The following workaround works for me on codelab. Could you try and see if it works?
&lt;denchmark-code&gt;@tf.function
def f():
    dataset = tf.data.Dataset.from_tensor_slices(([1, 2, 3], [4, 5, 6]))

    with tf.device('/CPU:0'):
        iterator = iter(dataset)

    for e in tf.range(3):
        for x, y in iterator:
            tf.print(x, y, e)
f()
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='luischinchillagarcia' date='2020-07-27T16:08:20Z'>
		&lt;denchmark-link:https://github.com/luischinchillagarcia&gt;@luischinchillagarcia&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/lindong28&gt;@lindong28&lt;/denchmark-link&gt;

I have tried in colab with TF nightly version with &lt;denchmark-link:https://github.com/lindong28&gt;@lindong28&lt;/denchmark-link&gt;
  suggestion and was not able to reproduce the issue even
 is wrapped inside @tf.function. Please,find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/1223e75116a1decc181fb0a3401585dc/untitled188.ipynb&gt;here&lt;/denchmark-link&gt;
.
Note:
No issue with
&lt;denchmark-code&gt; for x, y in iterator:
            tf.print(x, y, e)
&lt;/denchmark-code&gt;

Still i am seeing the issue with
&lt;denchmark-code&gt;for x, y in dataset:
            tf.print(x, y, e)
&lt;/denchmark-code&gt;

Thanks!
		</comment>
		<comment id='6' author='luischinchillagarcia' date='2020-07-27T16:27:49Z'>
		Thanks for the reply &lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
. It is great to know that the workaround can unblock your work. In the meantime, I acknowledge that we should still try to fix the issue in TF so that users would not have to make this code change.
BTW, the gist link provided in your comment can not be opened due to the permission restriction.
		</comment>
		<comment id='7' author='luischinchillagarcia' date='2020-07-27T17:02:20Z'>
		&lt;denchmark-link:https://github.com/lindong28&gt;@lindong28&lt;/denchmark-link&gt;

Please check if the below link works
&lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/4a919f0d13d28ffd0f93f1fc8a469448/untitled188.ipynb&gt;https://colab.research.google.com/gist/ravikyram/4a919f0d13d28ffd0f93f1fc8a469448/untitled188.ipynb&lt;/denchmark-link&gt;

Also, thank you for the information. I was able to run the code without any issues using your workaround. Thanks!
		</comment>
		<comment id='8' author='luischinchillagarcia' date='2020-07-27T17:33:30Z'>
		&lt;denchmark-link:https://github.com/luischinchillagarcia&gt;@luischinchillagarcia&lt;/denchmark-link&gt;
,
Please take a look at &lt;denchmark-link:https://github.com/lindong28&gt;@lindong28&lt;/denchmark-link&gt;
 comment above and let us know if the issue is fixed.
Check the &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/4a919f0d13d28ffd0f93f1fc8a469448/untitled188.ipynb&gt;gist&lt;/denchmark-link&gt;
 for your reference.Thanks!
		</comment>
		<comment id='9' author='luischinchillagarcia' date='2020-07-28T06:26:24Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/lindong28&gt;@lindong28&lt;/denchmark-link&gt;
 Thanks you both for aiding with this issue! It definitely helps.
To be clear, will we be able to use tf.data within tf.function without the need to explicitly state a tf.data.Dataset as an iterator  as follows? Is this merely a temporary fix that still requires a fix down the line as &lt;denchmark-link:https://github.com/lindong28&gt;@lindong28&lt;/denchmark-link&gt;
 pointed out?
with tf.device('/CPU:0'):
        iterator = iter(dataset)
		</comment>
		<comment id='10' author='luischinchillagarcia' date='2020-07-28T09:28:48Z'>
		Hey &lt;denchmark-link:https://github.com/luischinchillagarcia&gt;@luischinchillagarcia&lt;/denchmark-link&gt;
, thank you for your reply. This is just a temporary fix which hopefully can unblock your ongoing work. It is still a bug if the original program does not work. This issue needs to be fixed so that TF users would not have to make this code change.
		</comment>
		<comment id='11' author='luischinchillagarcia' date='2020-09-03T06:03:45Z'>
		Hey everyone, the issue has been fixed in tf-nightly==2.4.0.dev20200902 and it should be fixed in the upcoming TF 2.4 release.
The fix can be validated using this colab example: &lt;denchmark-link:https://colab.research.google.com/drive/1C4AXS8cyEsA_JmU7QVVk7UXM_uygVf05?authuser=1#scrollTo=jJBsJsRSR6AD&gt;https://colab.research.google.com/drive/1C4AXS8cyEsA_JmU7QVVk7UXM_uygVf05?authuser=1#scrollTo=jJBsJsRSR6AD&lt;/denchmark-link&gt;

		</comment>
		<comment id='12' author='luischinchillagarcia' date='2020-09-03T06:03:56Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40904&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40904&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>