<bug id='33892' author='skyap' open_date='2019-10-31T18:27:06Z' closed_time='2020-12-30T07:11:42Z'>
	<summary>tf.image.per_image_standardization return wrong values</summary>
	<description>
Tensorflow version = 1.15
tf.image.per_image_standardization does not standardize value to [-1,1]
i test in tensorflow 1.12 it work correctly
import tensorflow as tf 
import numpy as np 
print(tf.__version__)
a = tf.constant([[[1,2,3],[4,5,6]]])
b = tf.image.per_image_standardization(a)
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    print(sess.run(b))
x = np.asarray([[[1,2,3],[4,5,6]]], dtype=np.float64)

def normalize_meanstd(a, axis=None): 
    # axis param denotes axes along which mean &amp; std reductions are to be performed
    mean = np.mean(a, axis=axis, keepdims=True)
    std = np.sqrt(((a - mean)**2).mean(axis=axis, keepdims=True))
    return (a - mean) / std

print(normalize_meanstd(x))
&lt;denchmark-code&gt;1.15.0
[[[-6 -3 -1]
  [ 1  3  6]]]
[[[-1.46385011 -0.87831007 -0.29277002]
  [ 0.29277002  0.87831007  1.46385011]]]
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='skyap' date='2019-10-31T20:38:22Z'>
		It's because a is interpreted as an int tensor instead of a float tensor.  If you define
a = tf.constant([[[1.0,2.0,3.0],[4.0,5.0,6.0]]])
you get the correct behavior.
		</comment>
		<comment id='2' author='skyap' date='2019-11-04T03:45:56Z'>
		thanks! it should handle int tensor because image normally in uint8 and since when we are using "tf.image.per_image_standardization"  we will not change the data type as we expect  the function handle it.
		</comment>
		<comment id='3' author='skyap' date='2019-11-04T21:27:03Z'>
		&lt;denchmark-link:https://github.com/skyap&gt;@skyap&lt;/denchmark-link&gt;
 Looks like there is some issue with converting dtype from  to  with this  function in the source code of . We will take a look deeper at the source. Source code is &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/image_ops_impl.py#L1477-L1519&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='skyap' date='2020-08-11T15:17:06Z'>
		The same issue still exists in TensorFlow version 2.3.0.



 -&gt; 
This is slightly inconvenient, as &lt;denchmark-link:https://github.com/skyap&gt;@skyap&lt;/denchmark-link&gt;
 mentioned that a lot of times images are stored in uint8 format, including the returned image from . This also conflicts with the documentation of  &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/image/per_image_standardization&gt;https://www.tensorflow.org/api_docs/python/tf/image/per_image_standardization&lt;/denchmark-link&gt;
, where the description says "Linearly scales each image in image to have mean 0 and variance 1."
And as &lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 mentioned, the problem exists in the use of. According to &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/image/convert_image_dtype&gt;https://www.tensorflow.org/api_docs/python/tf/image/convert_image_dtype&lt;/denchmark-link&gt;
, images in floating point values are expected to have values in the range [0,1) and images in integer values are expected to have values in the range [0,MAX]. When converting the dtype from float into uint,  rescales the standardized image back into the expected range of [0, MAX]. But it doesn't rescale the standardized floating point values into its expected range of [0,1), so the  can still work as expected if the original image is in floating point values.
I wonder if the documentation of image.per_image_standardization could be revised to add a reminder of dtype , or if the convert_image_dtype function can be revised to handle these cases appropriately. Based on the current documentation, as a user I'd be expecting the image.per_image_standardization to return to me me pixel values with mean 0 and variance 1 directly without having to converting the image dtype.
		</comment>
		<comment id='5' author='skyap' date='2020-11-19T06:03:38Z'>
		We have been dealing with inconsistencies with training for a while now, and have found the root cause to be related to this issue.
Here is the offending commit:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/906e0e3bc0dfe12db19afa261e4d793b73cb64ec&gt;906e0e3&lt;/denchmark-link&gt;

In version 1.14, per_image_standardization internally converted integer images to float and returned the standardized image as a float.
In version 1.15+, per_image_standardization internally converts the integer images to a float then divides by the max dtype value, and converts it back to an integer image.
This is especially bad for users of 1.14 and earlier who upgraded to 1.15 or 2.0+ as their integer image data would be quantized and/or truncated (e.g. unsigned int) by per_image_standardization.
Suggest updating the documentation and/or throwing an exception if the input type is unsigned int. See example below:
import tensorflow as tf 
import numpy as np 
print(tf.__version__)
# unsigned int example (works in 1.14, but really, really, bad in 1.15+)
a = tf.constant([[[1,2,3],[4,5,6]]], tf.uint16)
b = tf.image.per_image_standardization(a)
x = np.asarray([[[1,2,3],[4,5,6]]], dtype=np.float64)

def normalize_meanstd(a, axis=None): 
    # axis param denotes axes along which mean &amp; std reductions are to be performed
    mean = np.mean(a, axis=axis, keepdims=True)
    std = np.sqrt(((a - mean)**2).mean(axis=axis, keepdims=True))
    return (a - mean) / std

print(b)
print(normalize_meanstd(x))
&lt;denchmark-code&gt;2.2.0
tf.Tensor(
[[[0 0 0]
  [1 3 6]]], shape=(1, 2, 3), dtype=uint16)
[[[-1.46385011 -0.87831007 -0.29277002]
  [ 0.29277002  0.87831007  1.46385011]]]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='skyap' date='2020-12-25T03:55:01Z'>
		Related github issue: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/44983&gt;#44983&lt;/denchmark-link&gt;

The changes in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/906e0e3bc0dfe12db19afa261e4d793b73cb64ec&gt;906e0e3&lt;/denchmark-link&gt;
 unintentionally modified the behavior of  and is reverted in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/b6be9714e878a7dd0d1405bd7a83e021ba4b561a&gt;b6be971&lt;/denchmark-link&gt;
.
With , the function should return expected values for  data types as before. Here is a &lt;denchmark-link:https://colab.research.google.com/drive/1nqzU22tZ0RVAaDm6drWPkfGV8cc7A_3x?usp=sharing&gt;colab&lt;/denchmark-link&gt;
 verifying the fix.
		</comment>
		<comment id='7' author='skyap' date='2020-12-30T07:11:43Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33892&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33892&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>