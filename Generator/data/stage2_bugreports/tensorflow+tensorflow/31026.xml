<bug id='31026' author='fsx950223' open_date='2019-07-25T09:52:17Z' closed_time='2020-03-04T23:59:31Z'>
	<summary>How to release keras compiled model</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary):
TensorFlow version (use command below):1.14.0
Python version:3.6.7
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
It seems that tensorflow will increase memory usage when I compiled keras model serveral time.
There is some way to release unused compiled model
Describe the expected behavior
Release compiled model when I don't need it anymore
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
model.compile()
"""freeze training"""

model.compile()
"""fine-tuning training"""
Replicate code: &lt;denchmark-link:https://colab.research.google.com/drive/1GafCUt6BXjKY0LA3lc8fgGhDPwZ6Jgs3&gt;https://colab.research.google.com/drive/1GafCUt6BXjKY0LA3lc8fgGhDPwZ6Jgs3&lt;/denchmark-link&gt;

Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='fsx950223' date='2019-07-26T10:01:06Z'>
		&lt;denchmark-link:https://github.com/fsx950223&gt;@fsx950223&lt;/denchmark-link&gt;
 Will it be possible to share the minimal code which replicates the reported issue. Thanks!
		</comment>
		<comment id='2' author='fsx950223' date='2019-07-26T10:20:13Z'>
		
@fsx950223 Will it be possible to share the minimal code which replicates the reported issue. Thanks!

I provided code above
		</comment>
		<comment id='3' author='fsx950223' date='2019-08-21T00:23:15Z'>
		&lt;denchmark-link:https://github.com/fsx950223&gt;@fsx950223&lt;/denchmark-link&gt;
 Can you try  after importing tensorflow. I have noticed that memory was not increasing after adding . Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/fa7eb1e000b42ac27f8a56a286d29f84/tf_31026_memory.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='fsx950223' date='2019-08-21T01:15:17Z'>
		
@fsx950223 Can you try tf.reset_default_graph() after importing tensorflow. I have noticed that memory was not increasing after adding tf.reset_default_graph(). Please check the gist here. Thanks!

I ran the gist and memory was still increasing after keras model was compiled and I can't release it
		</comment>
		<comment id='5' author='fsx950223' date='2019-08-21T05:49:49Z'>
		&lt;denchmark-link:https://github.com/fsx950223&gt;@fsx950223&lt;/denchmark-link&gt;
 Could throw little more details on the issue? How (sequence) did you ran the code.
The way i ran the model the gist is, first reset_graph, ran create model (0.6 GB of ram), then compiled, then ran training and found 0.85 GB was using.
Then ran entire gist (reset_graph, create_model, compile, training) again and it was taking only 0.85 GB of ram.
Please share the sequence and any other details. Thanks!
		</comment>
		<comment id='6' author='fsx950223' date='2019-08-21T06:05:27Z'>
		
@fsx950223 Could throw little more details on the issue? How (sequence) did you ran the code.
The way i ran the model the gist is, first reset_graph, ran create model (0.6 GB of ram), then compiled, then ran training and found 0.85 GB was using.
Then ran entire gist (reset_graph, create_model, compile, training) again and it was taking only 0.85 GB of ram.
Please share the sequence and any other details. Thanks!

for i in range(10):
  model.compile(optimizer='adam',
                loss='sparse_categorical_crossentropy',
                metrics=['accuracy'])
  #model.release() # Release memory
  print(psutil.Process(os.getpid()).memory_info().rss) # You can see memory increase 
The problem is that memory will increase after I compiled keras model every time. I need some method to release compiled model and release memory.
		</comment>
		<comment id='7' author='fsx950223' date='2019-08-21T23:28:37Z'>
		&lt;denchmark-link:https://github.com/fsx950223&gt;@fsx950223&lt;/denchmark-link&gt;
 I agree that memory is increasing. What is the reason behind compiling multiple times with same loss and optimizer? Thanks!
		</comment>
		<comment id='8' author='fsx950223' date='2019-08-22T00:25:43Z'>
		
@fsx950223 I agree that memory is increasing. What is the reason behind compiling multiple times with same loss and optimizer? Thanks!

Maybe I want to change trainable layers or distribute strategy that I need to compile it again. Although I can solve the problem by run the python script several times, it will cost more time to train the model.
		</comment>
		<comment id='9' author='fsx950223' date='2019-08-22T17:47:32Z'>
		&lt;denchmark-link:https://github.com/fsx950223&gt;@fsx950223&lt;/denchmark-link&gt;
 When you change anything related to what you listed or anything related model, optimizer, and loss function, model need to be compiled and need to train the model again. If I am correct, it was adding only 1MB when you recompile the given example. Thanks!
		</comment>
		<comment id='10' author='fsx950223' date='2019-08-22T23:57:13Z'>
		It's a example. In fact, it increased 8g memory in my project

Vishnuvardhan Janapati &lt;notifications@github.com&lt;mailto:notifications@github.com&gt;&gt; 于 2019年8月23日周五 上午1:56写道：

&lt;denchmark-link:https://github.com/fsx950223&gt;@fsx950223&lt;/denchmark-link&gt;
&lt;&lt;denchmark-link:https://github.com/fsx950223&gt;https://github.com/fsx950223&lt;/denchmark-link&gt;
&gt; When you change anything related to what you listed or anything related model, optimizer, and loss function, model need to be compiled and need to train the model again. If I am correct, it was adding only 1MB when you recompile the given example. Thanks!

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub&lt;&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/31026&gt;#31026&lt;/denchmark-link&gt;
?email_source=notifications&amp;email_token=AEGHB47F2RRLA7I7BDFU4M3QF3HLDA5CNFSM4IGY4QRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD453VLA#issuecomment-524008108&gt;, or mute the thread&lt;&lt;denchmark-link:https://github.com/notifications/unsubscribe-auth/AEGHB42HLKJP6HXCWDQZGVDQF3HLDANCNFSM4IGY4QRA&gt;https://github.com/notifications/unsubscribe-auth/AEGHB42HLKJP6HXCWDQZGVDQF3HLDANCNFSM4IGY4QRA&lt;/denchmark-link&gt;
&gt;.
		</comment>
		<comment id='11' author='fsx950223' date='2019-08-23T21:04:23Z'>
		&lt;denchmark-link:https://github.com/fsx950223&gt;@fsx950223&lt;/denchmark-link&gt;
 Can you provide an example with the more pathological behavior? As &lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 said, a small increase in memory consumption on recompile is expected.
		</comment>
		<comment id='12' author='fsx950223' date='2019-08-24T01:57:38Z'>
		
@fsx950223 Can you provide an example with the more pathological behavior? As @jvishnuvardhan said, a small increase in memory consumption on recompile is expected.

I have updated notebook. I just tested it with a small dataset, and large dataset will significantly improve memory usage.
		</comment>
		<comment id='13' author='fsx950223' date='2020-03-04T23:59:31Z'>
		I am closing this issue as the increase is very minimal. Please feel free to reopen with more concrete example and a standalone code to reproduce the issue. Thanks!
		</comment>
		<comment id='14' author='fsx950223' date='2020-03-04T23:59:33Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31026&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31026&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>