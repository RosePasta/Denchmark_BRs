<bug id='36349' author='decodyng' open_date='2020-01-30T19:56:20Z' closed_time='2020-06-18T05:52:53Z'>
	<summary>Keras Layer With Trainable=False Flag Creates Variables With Trainable=True</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
System Version: macOS 10.15.2 (19C57)
Kernel Version: Darwin 19.2.0
TensorFlow installed from (source or binary): binary (pip)
TensorFlow version (use command below): v1.15.0-rc3-22-g590d6eef7e 1.15.0
Python version: 3.7.0

Describe the current behavior
When I create a Keras model using layerwise structure in tf.keras.Model, and set one or more of the layers to trainable=False, this results in a situation where the keras model believes those variables/parameters to be non-trainable (and reports them as such in model.non_trainable_variables and model.summary) but doesn't set the actual trainable flag on the created Tensorflow variables to be False. This can lead to unintuitive behavior if other systems are reasonably expecting var_obj.trainable to correspond with the model's actual trainable variables.
Describe the expected behavior
When a layer is set to trainable=False, Tensorflow variables associated with that layer also have the trainable flag set to False
Code to reproduce the issue
&lt;denchmark-code&gt;inputs = tf.keras.layers.Input(shape=(10,))
hiddens = tf.keras.layers.Dense(15,  trainable=True, name="trainable_layer")(inputs)
output = tf.keras.layers.Dense(5, trainable=False, name="nontrainable_layer")(hiddens)
model = tf.keras.Model(inputs, output)
model.compile(optimizer='rmsprop', loss='categorical_crossentropy')
print(f"Model trainable variables: {model.trainable_variables}")
print(f"Model non-trainable variables: {model.non_trainable_variables}")
print(f"Trainable flags on model non-trainable variables: {[v.trainable for v in model.non_trainable_variables]}")
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='decodyng' date='2020-02-03T09:37:30Z'>
		&lt;denchmark-link:https://github.com/decodyng&gt;@decodyng&lt;/denchmark-link&gt;
  Could you please confirm if the issue still persist in the nightly version &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/d9046bbe32eadb99b4319ee9d9c712aa/36349.ipynb&gt;gist&lt;/denchmark-link&gt;
 shared
		</comment>
		<comment id='2' author='decodyng' date='2020-02-03T19:02:01Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 I'm not sure if you intended me to independently try to install and check for the bug on the nightly version, but in the linked notebook, it does appear that variables in the  set are still having their  flag incorrectly set to True.
		</comment>
		<comment id='3' author='decodyng' date='2020-06-04T04:14:21Z'>
		&lt;denchmark-link:https://github.com/decodyng&gt;@decodyng&lt;/denchmark-link&gt;
 I am not completely sure about flags but it is doing as expected. When you run  you can see correct number of trainable and non-trainable parameters. I also trained on toy data set and showed that trainable params change after training and non-trainable stays as it was instantiated.
Please check the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/e7636b468739e9aa276bcd8ee2643ce0/36349.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks
Please verify once and feel free to close if the issue was resolved for you. Thanks!
		</comment>
		<comment id='4' author='decodyng' date='2020-06-11T05:09:07Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='5' author='decodyng' date='2020-06-18T05:52:51Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='6' author='decodyng' date='2020-06-18T05:52:54Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36349&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36349&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>