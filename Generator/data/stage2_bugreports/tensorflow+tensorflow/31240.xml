<bug id='31240' author='durandg12' open_date='2019-08-01T17:19:57Z' closed_time='2020-09-10T22:55:04Z'>
	<summary>SequenceFeatures gets overly complex when used with a sequence_numeric_column</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS 10.13.6
TensorFlow installed from (source or binary): from pip install
TensorFlow version (use command below): v2.0.0-beta0-16-g1d91213fe7 2.0.0-beta1
Python version: v3.6.7:6ec5cf24b7, Oct 20 2018, 03:02:14

Describe the current behavior
The behaviour of SequenceFeatures layer is really different between when it's used with a feature column produced with sequence_numeric_column and when it's used with a feature column produced with sequence_categorical_column_with_identityand embedding_column.
I've &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/29879&gt;already reported an issue&lt;/denchmark-link&gt;
 where the  method of  used with  unnecessarily requires its input to be a  instead of a regular .
Today I was experimenting with Keras Funcional API by building a model using two SequenceFeatures layers along with both sequence_numeric_column and embedding_column. I got graphic depictions of the model using tf.keras.Model.summary and tf.keras.utils.plot_model and discovered that SequenceFeatures  with sequence_numeric_column gets decomposed in a million of sub-layers of type TensorFlowOpLayer, as opposite to the clean and to the point depiction of SequenceFeatures with embedding_column. This has the only effect of overloading the results of summaryand plot_modelwith not so relevant information instead of having a concise insight of the graph.
Here is the obtained plot:
&lt;denchmark-link:https://github.com/durandg12/nn_pictures/blob/master/total_mess.png&gt;&lt;/denchmark-link&gt;

The &lt;denchmark-link:https://github.com/durandg12/nn_pictures/blob/master/zoom.png&gt;&lt;/denchmark-link&gt;
 of the plot is due to the conversion of the input into sparse tensor, so this is related to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/29879&gt;the previous issue&lt;/denchmark-link&gt;
. The focus of the issue I'm opening today is &lt;denchmark-link:https://github.com/durandg12/nn_pictures/blob/master/zoom2.png&gt;&lt;/denchmark-link&gt;
 which should not exist in my opinion.
Describe the expected behavior
Assuming my previous issue is solved, I think that the result of  should simply &lt;denchmark-link:https://github.com/durandg12/nn_pictures/blob/master/expected_model.png&gt;&lt;/denchmark-link&gt;
.
Code to reproduce the issue
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
from tensorflow.feature_column import embedding_column, sequence_categorical_column_with_identity, \
    sequence_numeric_column
from tensorflow.keras import Input, Model
from tensorflow.keras.experimental import SequenceFeatures
from tensorflow.keras.layers import Input, Dense


#on my computer I have used a
#custom plot_model instead of tf.keras.utils.plot_model 
#because of a bug, see nota bene below
#from deep.modeltodot import plot_model
from tensorflow.keras.utils import plot_model

print(tf.version.GIT_VERSION, tf.version.VERSION)

#Model preparation
seq_fc_dense = sequence_numeric_column('denseFeat')
seq_layer_dense = SequenceFeatures(seq_fc_dense, name='denseFeatLayer')

nb_cat = 5
seq_fc_cat = sequence_categorical_column_with_identity('catFeat', nb_cat)
seq_fc_cat = embedding_column(seq_fc_cat, 2)
seq_layer_cat = SequenceFeatures(seq_fc_cat, name='catFeatLayer')

input_dense = Input(shape=(None,), name='denseFeat')
input_cat = Input(shape=(None,), name='catFeat', dtype=tf.int32)
# we need to convert input_dense to a sparse tensor, see https://github.com/tensorflow/tensorflow/issues/29879
zero = tf.constant(0, dtype=tf.float32)
indices = tf.where(tf.not_equal(input_dense, zero))
values = tf.gather_nd(input_dense, indices)
sparse = tf.SparseTensor(indices, values, tf.cast(tf.shape(input_dense), dtype=tf.int64))

x_dense = seq_layer_dense({'denseFeat': sparse})[0]
x_cat = seq_layer_cat({'catFeat': input_cat})[0]
x = tf.concat([x_dense, x_cat], -1)
output = Dense(1, activation='sigmoid')(x)

model = Model(inputs={'denseFeat': input_dense, 'catFeat': input_cat}, outputs=output)

#model.summary()
plot_model(model)
&lt;/denchmark-code&gt;

Nota bene
The custom plot_model that I used to make my plots is the same as tf.keras.utils.plot_model except that I replaced the following import in keras/utils/vis_utils.py:
&lt;denchmark-code&gt;try:
  # pydot-ng is a fork of pydot that is better maintained.
  import pydot_ng as pydot
except ImportError:
  # pydotplus is an improved version of pydot
  try:
    import pydotplus as pydot
  except ImportError:
    # Fall back on pydot if necessary.
    try:
      import pydot
    except ImportError:
      pydot = None
&lt;/denchmark-code&gt;

by import pydot_ng as pydotand I removed the call to _check_pydot in model_to_dot because it was raising an exception.
	</description>
	<comments>
		<comment id='1' author='durandg12' date='2019-08-02T09:04:34Z'>
		Was able to replicate the issue with Tensorflow 2.0.0.beta1 on Colab. Please take a look at colab &lt;denchmark-link:https://colab.research.google.com/drive/1B9UwKkZRr2WweASkcF0iWJukS0i6pVPY&gt;gist&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='durandg12' date='2019-10-01T17:06:22Z'>
		The graph is still messy and overly complex in tf2.0.0. On a side note, the bug in tf.keras.utils.plot_model is gone and I don't need a custom plot_model anymore.
		</comment>
		<comment id='3' author='durandg12' date='2020-08-27T17:06:23Z'>
		&lt;denchmark-link:https://github.com/durandg12&gt;@durandg12&lt;/denchmark-link&gt;
,
Could you please update TensorFlow to v2.3 and check if you are still facing the same issue. Thanks!
		</comment>
		<comment id='4' author='durandg12' date='2020-09-03T17:22:16Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='5' author='durandg12' date='2020-09-08T14:56:40Z'>
		&lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
 the issue is solved, with the caveat that we still have to convert dense tensors to sparse tensors just for the code to convert them back to dense tensors which seems inefficient. Also some behind the scene changes caused an error with the code above so I have to put the transformation to a sparse tensor into a function and wrap it into a  layer. So here is the final code I used to test:
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
from tensorflow.feature_column import embedding_column, sequence_categorical_column_with_identity, \
    sequence_numeric_column
from tensorflow.keras import Input, Model
from tensorflow.keras.experimental import SequenceFeatures
from tensorflow.keras.layers import Input, Dense

from tensorflow.keras.utils import plot_model

print(tf.version.GIT_VERSION, tf.version.VERSION)

#Model preparation
seq_fc_dense = sequence_numeric_column('denseFeat')
seq_layer_dense = SequenceFeatures(seq_fc_dense, name='denseFeatLayer')

nb_cat = 5
seq_fc_cat = sequence_categorical_column_with_identity('catFeat', nb_cat)
seq_fc_cat = embedding_column(seq_fc_cat, 2)
seq_layer_cat = SequenceFeatures(seq_fc_cat, name='catFeatLayer')

input_dense = Input(shape=(None,), name='denseFeat')
input_cat = Input(shape=(None,), name='catFeat', dtype=tf.int32)
# we need to convert input_dense to a sparse tensor, see https://github.com/tensorflow/tensorflow/issues/29879
def sparse_f(input_dense):
    zero = tf.constant(0, dtype=tf.float32)
    indices = tf.where(tf.not_equal(input_dense, zero))
    values = tf.gather_nd(input_dense, indices)
    sparse = tf.SparseTensor(indices, values, tf.cast(tf.shape(input_dense), dtype=tf.int64))
    return sparse
sparse = tf.keras.layers.Lambda(sparse_f)(input_dense)

x_dense = seq_layer_dense({'denseFeat': sparse})[0]
x_cat = seq_layer_cat({'catFeat': input_cat})[0]
x = tf.concat([x_dense, x_cat], -1)
output = Dense(1, activation='sigmoid')(x)

model = Model(inputs={'denseFeat': input_dense, 'catFeat': input_cat}, outputs=output)

model.summary()
plot_model(model)
&lt;/denchmark-code&gt;

Here is the resulting output from  : &lt;denchmark-link:https://github.com/durandg12/nn_pictures/blob/master/tf2.3.0-model.png&gt;link&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='6' author='durandg12' date='2020-09-10T22:55:04Z'>
		@durang12 closing this one out, as looks like with latest TF version, the issues are resolved .
		</comment>
		<comment id='7' author='durandg12' date='2020-09-10T22:55:06Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31240&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31240&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>