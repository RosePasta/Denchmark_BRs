<bug id='35719' author='carterkd' open_date='2020-01-09T21:14:17Z' closed_time='2020-03-04T06:12:07Z'>
	<summary>parallel_for: No converter defined for MatrixSolve</summary>
	<description>
I need to calculate the Jacobian of a function, where tf.linalg.solve is part of the function. I can usually use parallel_for but pfor does not support the MatrixSolve op, requiring a fallback to a slow while loop. It would be great to add a converter for MatrixSolve to parallel_for. Note that below, my example can be easily mathematically simplified, but in my actually use case it cannot be.
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.14.0
Python version: 3.7.3

Code to reproduce the issue
import tensorflow as tf
from tensorflow.python.ops.parallel_for.gradients import jacobian
import numpy as np

sess = tf.InteractiveSession()
print(tf.__version__)

x = tf.compat.v1.placeholder(tf.float64, shape = [3])
y = tf.compat.v1.placeholder(tf.float64, shape = [3])
z = tf.reshape(tf.linalg.solve(tf.linalg.diag(x), tf.reshape(y, [-1, 1])), [-1])

jac = jacobian(z, x)

print(sess.run(jac, feed_dict = {x: np.array([1., 1., 1.]), y: np.array([1., 2., 3.])}))
Describe the current behavior
ValueError: No converter defined for MatrixSolve
name: "loop_body/gradients/MatrixSolve_grad/MatrixSolve"
op: "MatrixSolve"
input: "MatrixDiag"
input: "loop_body/gradients/Reshape_1_grad/Reshape"
attr {
  key: "T"
  value {
    type: DT_DOUBLE
  }
}
attr {
  key: "adjoint"
  value {
    b: true
  }
}

inputs: [WrappedTensor(t=&lt;tf.Tensor 'MatrixDiag:0' shape=(3, 3) dtype=float64&gt;, is_stacked=False, is_sparse_stacked=False), WrappedTensor(t=&lt;tf.Tensor 'loop_body/gradients/Reshape_1_grad/Reshape/pfor/Reshape:0' shape=(3, 3, 1) dtype=float64&gt;, is_stacked=True, is_sparse_stacked=False)]. 
Either add a converter or set --op_conversion_fallback_to_while_loop=True, which may run slower
Describe the expected behavior
I should get
&lt;denchmark-code&gt;array([[-1.,  0.,  0.],
       [ 0., -2.,  0.],
       [ 0.,  0., -3.]])
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='carterkd' date='2020-01-09T22:35:27Z'>
		I notice from the  &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/parallel_for/pfor.py&gt;code&lt;/denchmark-link&gt;
 that both  and  are supported. I'll use this as a work around until this is fixed (since I'm solving with a symmetric positive definite matrix):
import tensorflow as tf
from tensorflow.python.ops.parallel_for.gradients import jacobian
import numpy as np

### work around because there is no converter for MatrixSolve in pfor
### I can change this just to tf.linalg.solve() when tensorflow fixes this
def chol_triangular_solve(a, b):
    chol_a = tf.linalg.cholesky(a)
    return tf.linalg.triangular_solve(tf.transpose(chol_a), tf.linalg.triangular_solve(chol_a, b, lower = True), lower = False)

sess = tf.InteractiveSession()
print(tf.__version__)

x = tf.compat.v1.placeholder(tf.float64, shape = [3])
y = tf.compat.v1.placeholder(tf.float64, shape = [3])
z = tf.reshape(chol_triangular_solve(tf.linalg.diag(x), tf.reshape(y, [-1, 1])), [-1])

jac = jacobian(z, x)

print(sess.run(jac, feed_dict = {x: np.array([1., 1., 1.]), y: np.array([1., 2., 3.])}))
This is not very elegant, but I get the desired output:
[[-1.  0.  0.]
 [ 0. -2.  0.]
 [ 0.  0. -3.]]
		</comment>
		<comment id='2' author='carterkd' date='2020-01-10T03:26:35Z'>
		I have tried on colab with TF version 1.14, 1.15 and was able to reproduce the issue.Please,find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/6e311c0490f217bb66e00bfb1aa047ee/untitled546.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='3' author='carterkd' date='2020-03-04T06:01:05Z'>
		MatrixSolve is supported at head but not in 1.15. Can you use a more recent version of TF, using compat.v1 if needed.?
		</comment>
		<comment id='4' author='carterkd' date='2020-03-04T06:12:07Z'>
		Yes, I noticed a bit ago this has been updated since my original post, but I forgot to close this. Sorry about that, and thank you!
		</comment>
		<comment id='5' author='carterkd' date='2020-03-04T06:12:09Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35719&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35719&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>