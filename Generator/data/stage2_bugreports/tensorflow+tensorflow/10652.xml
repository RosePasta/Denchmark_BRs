<bug id='10652' author='olyaromanyuk' open_date='2017-06-12T15:26:21Z' closed_time='2017-06-13T18:36:49Z'>
	<summary>Undocumented change in sharing variables from version 1.0 to 1.1</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Custom code, a minimal reproducible example provided below:
Linux Ubuntu 14.04:
TensorFlow installed from binary using pip:
TensorFlow version 1.0.1 and 1.1.0:
CUDA 8.0/cuDNN 5.1:
GeForce GTX 1080:

&lt;denchmark-h:h3&gt;Problem&lt;/denchmark-h&gt;

Variable scopes and sharing works different in versions 1.0.1 and 1.1.0. I try to enter a non-reusing variable scope after executing tf.get_variable_scope().reuse_variables(). This results in different values of tf.get_variable_scope().reuse inside this scope. When using version 1.0.1 it is False while when using 1.1.0 it is True. &lt;denchmark-link:https://www.tensorflow.org/versions/r1.0/programmers_guide/variable_scope&gt;The sharing variable guide&lt;/denchmark-link&gt;
 states that setting reuse = False inside a reusing scope is not the desired behavior, but the guide is completely the same for both versions. Moreover, no changes in handling variable scopes are mentioned in release notes for version 1.1.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import tensorflow as tf
print tf.__version__

with tf.variable_scope('foo'):
    assert tf.get_variable_scope().reuse == False, tf.get_variable_scope().reuse
    tf.get_variable_scope().reuse_variables()
    assert tf.get_variable_scope().reuse == True, tf.get_variable_scope().reuse
    with tf.variable_scope(tf.get_variable_scope(), reuse=False):
       print tf.get_variable_scope().reuse
&lt;/denchmark-code&gt;

Output:

Version 1.0.1

&lt;denchmark-code&gt;1.0.1
False
&lt;/denchmark-code&gt;


Version 1.1.0

&lt;denchmark-code&gt;1.1.0
True
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='olyaromanyuk' date='2017-06-13T01:41:03Z'>
		You are absolutely right: in 1.0.1 there was a bug that allowed "False" to override inheritance in a variable scope. We consider this a bug because variable scopes are meant to be nested inside functions and libraries. Imagine you're calling a sub-model defined in a library and you want to reuse all of it. If that model ever called "False" like in 1.0.1, you'd get a very wrong behavior that'd be potentially impossible to correct without changing the library. In 1.0.1, to get the correct behavior, you had to use "None" instead of "False" -- in fact we documented that you should always use only those two, but "False" worked like above. In 1.1.0 we changed this to avoid problems like the one above. But if you have a clear use-case for this, let us know!
		</comment>
	</comments>
</bug>