<bug id='36511' author='tianran' open_date='2020-02-06T13:14:29Z' closed_time='2020-02-11T19:20:47Z'>
	<summary>bug of keras.metrics under @tf.function</summary>
	<description>
System information

TensorFlow installed from source
TensorFlow version: v2.1.0-0-ge5bf8de410 2.1.0
Python version: 3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
Bazel version (if compiling from source): 0.29.1
GCC/Compiler version (if compiling from source): gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0
CUDA/cuDNN version: n/a
GPU model and memory: n/a

The tf.keras.metrics.Mean() class is not performing correctly under @tf.function annotation. It looks like some control_dependencies issues and I suspect similar bugs for other metrics.
Code to reproduce the issue
The results of func1(), func2(), and func3() should be all the same (a series of numbers starting from 4.5) in the following. However, func2() produces different result (a series of numbers starting from 0).
&lt;denchmark-code&gt;import tensorflow as tf

eval_dataset = tf.data.Dataset.range(10)
metric = tf.keras.metrics.Mean(name='mean', dtype=tf.float32)

def func1():
    for step in range(100):
        if tf.equal(step % 5, 0):
            for y in eval_dataset:
                x = tf.cast(y + step, tf.float32)
                metric(x)
            print(metric.result().numpy())
            metric.reset_states()

func1()

@tf.function
def func2():
    for step in range(100):
        if tf.equal(step % 5, 0):
            for y in eval_dataset:
                x = tf.cast(y + step, tf.float32)
                metric(x)
            tf.print(metric.result())
            metric.reset_states()

func2()

@tf.function
def func3():
    for step in range(100):
        if tf.equal(step % 5, 0):
            total = metric.total.assign(0.0)
            count = metric.count.assign(0)
            for y in eval_dataset:
                x = tf.cast(y + step, tf.float32)
                with tf.control_dependencies([total, count]):
                    total = metric.total.assign_add(x)
                    count = metric.count.assign_add(1)
            result = tf.math.divide_no_nan(total, count)
            tf.print(result)

func3()
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='tianran' date='2020-02-06T22:43:14Z'>
		This is a similar issue:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/31458&gt;#31458&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='tianran' date='2020-02-07T11:28:13Z'>
		Was able to reproduce the issue with Tf 2.1.
Please find the gist &lt;denchmark-link:https://colab.research.google.com/gist/gadagashwini/ae1d5953733646431d7797d8c70b9a36/untitled380.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='3' author='tianran' date='2020-02-07T11:53:31Z'>
		&lt;denchmark-link:https://github.com/tianran&gt;@tianran&lt;/denchmark-link&gt;
, This issue is fixed in latest tf-nightly version.
Please take a look at &lt;denchmark-link:https://colab.research.google.com/gist/gadagashwini/b88fcb61527e52da8feeb7ee50a64174/untitled381.ipynb&gt;gist&lt;/denchmark-link&gt;
. Thanks
		</comment>
		<comment id='4' author='tianran' date='2020-02-11T19:20:47Z'>
		Closing since its fixed. Thanks!
		</comment>
		<comment id='5' author='tianran' date='2020-02-11T19:20:49Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36511&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36511&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>