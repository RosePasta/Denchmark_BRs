<bug id='42026' author='will-cern' open_date='2020-08-04T10:00:30Z' closed_time='2020-08-25T21:38:35Z'>
	<summary>_create_keras_history_helper error ('NoneType' object has no attribute 'op') in 2.3.0 not in 2.2.0</summary>
	<description>
When using model subclassing, we have been exploiting reinitialization of the subclass as a way to define the inputs for our model at construction, allowing us to call e.g. the summary method of our model and have specific input shape be listed as opposed to the 'multiple' input shape present when not constructing with an input. However, moving to tf 2.3.0 from 2.2.0 this now produces an unexpected error on the 2nd time the model is constructed. Here's a minimal reproducer:
&lt;denchmark-code&gt;class MyModel(tf.keras.Model):

  def __init__(self,**kwargs):
    super(MyModel,self).__init__(**kwargs)
    # create model layers ...
    self.layer1 = tf.keras.layers.Dense(10)
    # define input shape, and reinit ...
    inputs = tf.keras.Input(shape=(5,))
    super(MyModel,self).__init__(inputs=inputs, outputs=self.call(inputs),**kwargs)
    # calling 'summary' will show specific input shapes
    self.summary()
  
  def call(self, inputs):
    return self.layer1(inputs)

m = MyModel()
m = MyModel() ## exception here!
&lt;/denchmark-code&gt;

Produces error:
&lt;denchmark-code&gt;/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer_utils.py in _create_keras_history_helper(tensors, processed_ops, created_layers)
    224                        'op wrapping. Please wrap these ops in a Lambda layer: '
    225                        '\n\n```\n{example}\n```\n'.format(example=example))
--&gt; 226     op = tensor.op  # The Op that created this Tensor.
    227     if op not in processed_ops:
    228       # Recursively set `_keras_history`.

AttributeError: 'NoneType' object has no attribute 'op'
&lt;/denchmark-code&gt;

In honesty we always considered the above 'reinit' a bit of a hack, and would be happy to be told the correct way to achieve what we want (a subclassed model with a defined input shape at construction time). But thought should report this anomalous behaviour none-the-less.
Thanks
	</description>
	<comments>
		<comment id='1' author='will-cern' date='2020-08-04T11:23:17Z'>
		Was able to reproduce the issue.
Code runs fine on &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/64a4bde1feb838966566f5a9ecd24e51/42026-2-2.ipynb&gt;TF v2.2&lt;/denchmark-link&gt;
, facing an error stating  on running with &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/14a9c6e1f715abe2cf223a02da4af973/42026-2-3.ipynb#scrollTo=2pAxuhfXKSvw&gt;TF v2.3&lt;/denchmark-link&gt;
. Please find the attached gist. Thanks!
		</comment>
		<comment id='2' author='will-cern' date='2020-08-04T11:35:18Z'>
		Thanks for confirming reproduction. As I say above, we are happy to be told if there is a better way to achieve the behaviour we are after, or at least be re-assured that 'reinitialization' is the correct/supported way to go?
		</comment>
		<comment id='3' author='will-cern' date='2020-08-04T18:45:26Z'>
		&lt;denchmark-link:https://github.com/will-cern&gt;@will-cern&lt;/denchmark-link&gt;
 I am not sure that it this is strictly "a regression" and I suppose that the error you catched with your class design could be more self-explicative that the current one.
For what you want to achieve I think that most similar solution it is at &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/25036#issuecomment-667534658&gt;#25036 (comment)&lt;/denchmark-link&gt;
 but please read the full thread.
		</comment>
		<comment id='4' author='will-cern' date='2020-08-25T21:38:34Z'>
		&lt;denchmark-link:https://github.com/will-cern&gt;@will-cern&lt;/denchmark-link&gt;
 Thanks for the issue!
Using subclasses to build Functional API models is actually a common pattern, the catch though is to not to double initialization and to not assign any attrs to the Model before calling the super. This works for example (note that the call method and layer tracking is implemented automatically bc the model becomes a Functional API model when initialized with the inputs and outputs signature):
import tensorflow as tf

class MyModel(tf.keras.Model):

  def __init__(self,**kwargs):
    layer1 = tf.keras.layers.Dense(10)
    # define input shape, and reinit ...
    inputs = tf.keras.Input(shape=(5,))
    super(MyModel,self).__init__(inputs=inputs, outputs=layer1(inputs),**kwargs)
    # calling 'summary' will show specific input shapes
    self.summary()


m = MyModel()
m = MyModel()
		</comment>
		<comment id='5' author='will-cern' date='2020-08-25T21:38:36Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42026&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42026&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>