<bug id='30181' author='covertg' open_date='2019-06-26T16:27:08Z' closed_time='2019-08-05T05:33:06Z'>
	<summary>Can't cross-compile TFLite "Minimal" for Raspberry Pi Zero (armv6 target)</summary>
	<description>
System information

OS Platform and Distribution: Linux Debian 10
TensorFlow installed from: source
TensorFlow version: master branch @ a6989c9
GCC/Compiler version: 8.3.0 (Debian 8.3.0-2)
Python, Installed using ..., Bazel, CUDA, GPU: n/a

Background
Hi,
I've been trying to build a Tensorflow Lite C++ project for the Raspberry Pi Zero. For a simple base, I'm working from the "minimal" example provided. Building the Tensorflow Lite static library natively can take upwards of 5-6 hours, and for simplicity I've been trying to cross-compile. However, I haven't yet gotten minimal to compile. Although there's documentation on compiling for armv7 Pi's, I haven't been able to find anything on an armv6 platform.
Steps I've taken, following the docs here.

Git clone the tf repo
Run download_dependencies.sh
Modify build_rpi_lib.sh to target armv6, i.e. with:

&lt;denchmark-code&gt;CC_PREFIX=arm-linux-gnueabihf- make -j 3 -f tensorflow/lite/tools/make/Makefile TARGET=rpi TARGET_ARCH=armv6
&lt;/denchmark-code&gt;


First attempt! Run that build script. It quickly errors out in a few different header, saying  sorry, unimplemented: Thumb-1 hard-float VFP ABI. For example:

&lt;denchmark-code&gt;In file included from /usr/arm-linux-gnueabihf/include/c++/8/bits/stl_algobase.h:62,
                 from /usr/arm-linux-gnueabihf/include/c++/8/memory:62,
                 from ./tensorflow/lite/arena_planner.h:18,
                 from tensorflow/lite/arena_planner.cc:15:
/usr/arm-linux-gnueabihf/include/c++/8/ext/type_traits.h: In function ‘bool __gnu_cxx::__is_null_pointer(std::nullptr_t)’:
/usr/arm-linux-gnueabihf/include/c++/8/ext/type_traits.h:162:35: sorry, unimplemented: Thumb-1 hard-float VFP ABI
   __is_null_pointer(std::nullptr_t)
                                   ^
make: *** [tensorflow/lite/tools/make/Makefile:242: /home/cgeary1/tensorflow/tensorflow/lite/tools/make/gen/rpi_armv6/obj/tensorflow/lite/allocation.o] Error 1
&lt;/denchmark-code&gt;

- I wonder if I could get away using the traditional ARM instruction set instead of Thumb... Add-marm to CFLAGS and CXXFLAGS in rpi_makefile.inc under the armv6 ifeq, then try again. I.e.:
&lt;denchmark-code&gt;  ifeq ($(TARGET_ARCH), armv6)
    CXXFLAGS += \
      -march=armv6 \
      -mfpu=vfp \
      -funsafe-math-optimizations \
      -ftree-vectorize \
      -fPIC \
      -marm

    CFLAGS += \
      -march=armv6 \
      -mfpu=vfp \
      -funsafe-math-optimizations \
      -ftree-vectorize \
      -fPIC \
      -marm

    LDFLAGS := \
      -Wl,--no-export-dynamic \
      -Wl,--exclude-libs,ALL \
      -Wl,--gc-sections \
      -Wl,--as-needed
  endif
&lt;/denchmark-code&gt;


Compiles for a little while, and finishes libtensorflow-lite.a !! But it errors out as soon as it moves on to minimal. Complaints look like undefined reference to `__atomic_load_8' and undefined reference to `flatbuffers::ClassicLocale::instance_'. Relevant log is attached for all the details.
log.txt

I'm not sure whether I'm doing something wrong, whether there's a bug in the make system, or whether there may be a more intractable problem trying to cross-compile this codebase for the Pi Zero. I'm not really sure what else to try, so for now I'm just working on the Pi.
Edit: I'm not able to try this right now, but I've realized that the flatbuffers error is likely to be solved as in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/29806&gt;#29806&lt;/denchmark-link&gt;
. The __atomic_load_8 error is the one that I can't get past.
	</description>
	<comments>
		<comment id='1' author='covertg' date='2019-07-26T08:17:07Z'>
		
Complaints look like undefined reference to `__atomic_load_8'

&lt;denchmark-link:https://github.com/covertg&gt;@covertg&lt;/denchmark-link&gt;
 Add  to your LDFLAGS
		</comment>
		<comment id='2' author='covertg' date='2019-08-03T22:45:51Z'>
		&lt;denchmark-link:https://github.com/andrey-utkin&gt;@andrey-utkin&lt;/denchmark-link&gt;
 That did it! Thank you!
		</comment>
		<comment id='3' author='covertg' date='2019-08-05T05:33:05Z'>
		Closing this issue since the issue is resolved. Please reopen if the issue still persists. Thanks!
		</comment>
		<comment id='4' author='covertg' date='2019-08-05T05:33:08Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30181&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30181&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='covertg' date='2019-08-13T06:31:00Z'>
		&lt;denchmark-link:https://github.com/covertg&gt;@covertg&lt;/denchmark-link&gt;
 I am trying to cross compile on Raspberry pi zero. Appreciate if you could share yr code in a github gist or repo? thanks
		</comment>
		<comment id='6' author='covertg' date='2019-11-26T07:21:19Z'>
		&lt;denchmark-link:https://github.com/andrey-utkin&gt;@andrey-utkin&lt;/denchmark-link&gt;

adding -latomic to LDFLAGS  didn't work for me.
I also tried adding   to the end of every  but it also failed.
		</comment>
	</comments>
</bug>