<bug id='43954' author='hamidkhb' open_date='2020-10-12T08:56:46Z' closed_time='2020-10-28T23:34:37Z'>
	<summary>tf.keras.models.model_load outputs random evaluation values</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Custom
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.3
Python version: 3.7
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: 11
GPU model and memory: Nvidia Tesla v100 32 Gb

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

After loading a model the evaluation outputs random values:
&lt;denchmark-code&gt;model.evaluate(source_gen)
model.evaluate(target_gen)
&lt;/denchmark-code&gt;


2984/2984 [==============================] - 5s 2ms/step - loss: 0.1515 - accuracy: 0.9811
4634/4634 [==============================] - 8s 2ms/step - loss: 1.4460 - accuracy: 0.7262

&lt;denchmark-code&gt;model.save_weights("models/weights.h5")
model.save("models/test.h5")

model_2 = tf.keras.models.load_model("models/test.h5")
model_2.load_weights("models/weights.h5")
model_2.evaluate(source_gen)
model_2.evaluate(target_gen)
&lt;/denchmark-code&gt;


2984/2984 [==============================] - 5s 2ms/step - loss: 0.1515 - accuracy: 0.2070
4634/4634 [==============================] - 8s 2ms/step - loss: 1.4460 - accuracy: 0.2473

also tried:
&lt;denchmark-code&gt;model.save("models/test.h5")
model_2 = tf.keras.models.load_model("models/test.h5")
model_2.evaluate(source_gen)
model_2.evaluate(target_gen)
&lt;/denchmark-code&gt;


2984/2984 [==============================] - 5s 2ms/step - loss: 0.1515 - accuracy: 0.2070
4634/4634 [==============================] - 8s 2ms/step - loss: 1.4460 - accuracy: 0.2473

	</description>
	<comments>
		<comment id='1' author='hamidkhb' date='2020-10-12T09:45:36Z'>
		&lt;denchmark-link:https://github.com/hamidkhb&gt;@hamidkhb&lt;/denchmark-link&gt;

Can you please share colab link or simple standalone code with supporting files to reproduce the issue in our environment.It helps us in localizing the issue faster.Thanks!
		</comment>
		<comment id='2' author='hamidkhb' date='2020-10-13T09:01:53Z'>
		Unfortunately not. I'm using a cluster I can give you full details of my conda environment. this is obviously a bug. There are many other people having the same problem in other forums. &lt;denchmark-link:https://github.com/keras-team/keras/issues/4875#issuecomment-707539637&gt;keras-team/keras#4875 (comment)&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='hamidkhb' date='2020-10-13T13:27:26Z'>
		We do have the same issue with a CNN using only Conv2D/Pooling2D/Dense layers. The model performance is 10% worse in accuracy when running evaluate on the model saved by the keras callback. Only 2.3.0/2.3.1 are affected versions. By using Version 2.2.0, the saved model archives the same performance as reported during training.
		</comment>
		<comment id='4' author='hamidkhb' date='2020-10-14T00:05:51Z'>
		&lt;denchmark-link:https://github.com/hamidkhb&gt;@hamidkhb&lt;/denchmark-link&gt;
 Without standalone code it is difficult to support but lets try. Can you please save the model in  format and then load and verify performance. May be you have a  in your model that may not be loaded when you load a model saved in  format. However,  format can save , so loading them should give you identical performance before saving and after loading.
&lt;denchmark-link:https://github.com/Hhessling&gt;@Hhessling&lt;/denchmark-link&gt;
 Can you please share a simple standalone code to reproduce the issue? Thanks!
		</comment>
		<comment id='5' author='hamidkhb' date='2020-10-14T10:05:10Z'>
		&lt;denchmark-code&gt;model.save("models/test", save_format="tf")
model_2 = tf.keras.models.load_model("models/test")
model_2.evaluate(source_gen)
model_2.evaluate(target_gen)
&lt;/denchmark-code&gt;


2984/2984 [==============================] - 5s 2ms/step - loss: 0.1847 - accuracy: 0.2045
4634/4634 [==============================] - 8s 2ms/step - loss: 1.1504 - accuracy: 0.1744

Extra information:

The problem doesn't exist in tf 2.1. but there are other problems and that was the reason why I needed to upgrade
I don't have any cusom_objekt
my model looks like this:

&lt;denchmark-code&gt;input_range = Input(input_shape_range, name="input_range")
input_doppler = Input(input_shape_doppler, name="input_doppler")

r = Conv2D(filters=8, kernel_size=(3, 3), padding="same", activation="relu", name="c1_r",
               data_format="channels_first")(input_range)
r = Conv2D(filters=16, kernel_size=(3, 3), padding="same", activation="relu", name="c2_r",
               data_format="channels_first")(r)
r = MaxPool2D(pool_size=(2, 2), strides=(2, 2), padding="Valid", name="m1_r",
                  data_format="channels_first")(r)
r = Conv2D(filters=16, kernel_size=(3, 3), padding="same", activation="relu", name="c3_r",
               data_format="channels_first")(r)
r = Conv2D(filters=32, kernel_size=(3, 3), padding="same", activation="relu", name="c4_r",
               data_format="channels_first")(r)
r = MaxPool2D(pool_size=(2, 2), strides=(2, 2), padding="Valid", name="m2_r",
                  data_format="channels_first")(r)

features_range = Flatten(name="flatten_r")(r)

d = Conv2D(filters=8, kernel_size=(3, 3), padding="same", activation="relu", name="c1_d",
               data_format="channels_first")(input_doppler)
d = Conv2D(filters=16, kernel_size=(3, 3), padding="same", activation="relu", name="c2_d",
               data_format="channels_first")(d)
d = MaxPool2D(pool_size=(2, 2), strides=(2, 2), padding="Valid", name="m1_d",
                  data_format="channels_first")(d)
d = Conv2D(filters=16, kernel_size=(3, 3), padding="same", activation="relu", name="c3_d",
               data_format="channels_first")(d)
d = Conv2D(filters=32, kernel_size=(3, 3), padding="same", activation="relu", name="c4_d",
               data_format="channels_first")(d)
d = MaxPool2D(pool_size=(2, 2), strides=(2, 2), padding="Valid", name="m2_d",
                  data_format="channels_first")(d)

features_doppler = Flatten(name="flatten_d")(d)

features = tf.keras.layers.concatenate([features_range, features_doppler], name="features" ,axis=1)

fc_2 = Dense(128, activation="relu", use_bias=True, name="fc_2",
                 kernel_regularizer= tf.keras.regularizers.l2(0.01))(features)
drop_2 = Dropout(0.2)(fc_2)
fc_3 = Dense(64, activation="relu", use_bias=True, name="fc_3",
                 kernel_regularizer= tf.keras.regularizers.l2(0.01))(drop_2)
drop_3 = Dropout(0.2)(fc_3)
out = Dense(5, use_bias=True, name="out")(drop_3)

model = tf.keras.Model(inputs=[input_range, input_doppler], outputs=out)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='hamidkhb' date='2020-10-14T18:37:18Z'>
		&lt;denchmark-link:https://github.com/hamidkhb&gt;@hamidkhb&lt;/denchmark-link&gt;
 Can you please share a simple standalone code with any publicly available data? Thanks!
		</comment>
		<comment id='7' author='hamidkhb' date='2020-10-16T09:07:13Z'>
		Update for the ones, who have the same issue:
I downgraded tensorflow to 2.1 and still had a problem with loading the model:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/site-packages/IPython/core/interactiveshell.py", line 3331, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "&lt;ipython-input-3-42e59c51e926&gt;", line 1, in &lt;module&gt;
    tf.keras.models.load_model("models/model_source_F_test.h5")
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/save.py", line 146, in load_model
    return hdf5_format.load_model_from_hdf5(filepath, custom_objects, compile)
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/hdf5_format.py", line 168, in load_model_from_hdf5
    custom_objects=custom_objects)
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/model_config.py", line 55, in model_from_config
    return deserialize(config, custom_objects=custom_objects)
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/site-packages/tensorflow_core/python/keras/layers/serialization.py", line 106, in deserialize
    printable_module_name='layer')
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/site-packages/tensorflow_core/python/keras/utils/generic_utils.py", line 292, in deserialize_keras_object
    config, module_objects, custom_objects, printable_module_name)
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/site-packages/tensorflow_core/python/keras/utils/generic_utils.py", line 250, in class_and_config_for_serialized_keras_object
    raise ValueError('Unknown ' + printable_module_name + ': ' + class_name)
ValueError: Unknown layer: Functional

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/site-packages/IPython/core/interactiveshell.py", line 2044, in showtraceback
    stb = value._render_traceback_()
AttributeError: 'ValueError' object has no attribute '_render_traceback_'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/site-packages/IPython/core/ultratb.py", line 1148, in get_records
    return _fixed_getinnerframes(etb, number_of_lines_of_context, tb_offset)
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/site-packages/IPython/core/ultratb.py", line 316, in wrapped
    return f(*args, **kwargs)
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/site-packages/IPython/core/ultratb.py", line 350, in _fixed_getinnerframes
    records = fix_frame_records_filenames(inspect.getinnerframes(etb, context))
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/inspect.py", line 1502, in getinnerframes
    frameinfo = (tb.tb_frame,) + getframeinfo(tb, context)
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/inspect.py", line 1460, in getframeinfo
    filename = getsourcefile(frame) or getfile(frame)
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/inspect.py", line 696, in getsourcefile
    if getattr(getmodule(object, filename), '__loader__', None) is not None:
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/inspect.py", line 733, in getmodule
    if ismodule(module) and hasattr(module, '__file__'):
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/site-packages/tensorflow/__init__.py", line 50, in __getattr__
    module = self._load()
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/site-packages/tensorflow/__init__.py", line 44, in _load
    module = _importlib.import_module(self.__name__)
  File "/home/fe/khodabakhshandeh/anaconda3/envs/test_env/lib/python3.7/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "&lt;frozen importlib._bootstrap&gt;", line 1006, in _gcd_import
  File "&lt;frozen importlib._bootstrap&gt;", line 983, in _find_and_load
  File "&lt;frozen importlib._bootstrap&gt;", line 965, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'tensorflow_core.estimator'
&lt;/denchmark-code&gt;

But I solved the problem by only saving the weights. so you have to recreate the network, load the weights and then compile in this order to avoid the error. I hope it works for you.
		</comment>
		<comment id='8' author='hamidkhb' date='2020-10-16T12:47:31Z'>
		&lt;denchmark-link:https://github.com/hamidkhb&gt;@hamidkhb&lt;/denchmark-link&gt;
 I wouldn't suggest you to downgrade to  as newer versions have much better functionality and performance. Please provide full standalone code so that we will reproduce and resolve the issue. Thanks!
		</comment>
		<comment id='9' author='hamidkhb' date='2020-10-21T15:40:25Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/sainttail/tensorflow-load-weights-problem&gt;This&lt;/denchmark-link&gt;
 is the full standalone reproducible problem when  each time get you a random evaluation loss and accuracy
		</comment>
		<comment id='10' author='hamidkhb' date='2020-10-28T15:49:20Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='11' author='hamidkhb' date='2020-10-28T23:24:54Z'>
		&lt;denchmark-link:https://github.com/sainttail&gt;@sainttail&lt;/denchmark-link&gt;
 I think there is no issue with . I printed  after loading weights, and they are exactly same. I think somewhere there is a randomness or shuffle implemented in your code. &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/6900844bd0a9fb2b554c566cb501362b/untitled.ipynb&gt;Here&lt;/denchmark-link&gt;
 is gist for reference.
Please verify once and close the issue. Thanks!
		</comment>
		<comment id='12' author='hamidkhb' date='2020-10-28T23:32:56Z'>
		&lt;denchmark-link:https://github.com/sainttail&gt;@sainttail&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/52432d8d41d244ea7cd7596ef62a90ee/untitled62.ipynb&gt;Here&lt;/denchmark-link&gt;
 is a gist with another simple model. Loading weights doesn't affect the evaluation. Thanks!
I am closing the issue. Please feel free to reopen if I am mistaken. Thanks!
		</comment>
		<comment id='13' author='hamidkhb' date='2020-10-28T23:34:38Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43954&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43954&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>