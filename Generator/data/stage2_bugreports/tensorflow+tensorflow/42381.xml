<bug id='42381' author='vermouth1992' open_date='2020-08-15T03:57:01Z' closed_time='2020-09-09T22:02:12Z'>
	<summary>Subclass model can't restore weights from h5 format</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 20.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v2.3.0-rc2-23-gb36436b087
Python version: 3.7.7
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: 10.2
GPU model and memory: GTX 1060 6GB

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Describe the current behavior
The last two prints should print a tensor of random numbers.
Describe the expected behavior
The last two prints should print a tensor of ones. It works if we save it as TF format.
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
import tensorflow as tf


class Model(tf.keras.Model):
    def __init__(self):
        super(Model, self).__init__()
        self.a = tf.Variable(initial_value=tf.random.normal([5]), trainable=False, name='a')
        self.call = tf.function(func=self.call, input_signature=[
            tf.TensorSpec(shape=[None, 5], dtype=tf.float32)
        ])
        self.prod = tf.function(func=self.prod, input_signature=[
            tf.TensorSpec(shape=[None, 5], dtype=tf.float32)
        ])
        self.set = tf.function(func=self.set, input_signature=[
            tf.TensorSpec(shape=[5], dtype=tf.float32)
        ])
        self.build(input_shape=tf.TensorShape(dims=[None, 5]))

    def call(self, inputs):
        print(f'Tracing call with inputs={inputs}')
        return self.a + inputs

    def prod(self, inputs):
        print(f'Tracing prod with inputs={inputs}')
        return self.a * inputs

    def set(self, value):
        print(f'Tracing set with inputs={value}')
        self.a.assign(value)


if __name__ == '__main__':
    model = Model()
    print(model(tf.zeros(shape=[2, 5])))
    print(model.prod(tf.ones(shape=[2, 5])))
    model.set(tf.ones(shape=[5]))
    print(model(tf.zeros(shape=[2, 5])))
    print(model.prod(tf.ones(shape=[2, 5])))
    print(model.weights)
    model.save_weights('/tmp/a.h5')
    del model
    model = Model()
    model.load_weights('/tmp/a.h5')
    print(model(tf.zeros(shape=[2, 5])))
    print(model.prod(tf.ones(shape=[2, 5])))
The bahavior persists in Google colab: &lt;denchmark-link:https://colab.research.google.com/drive/1b8WuO_hBvYynY5gkH_MSI0FJS0Qrj3MF?usp=sharing&gt;https://colab.research.google.com/drive/1b8WuO_hBvYynY5gkH_MSI0FJS0Qrj3MF?usp=sharing&lt;/denchmark-link&gt;

Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='vermouth1992' date='2020-08-17T05:12:44Z'>
		&lt;denchmark-link:https://github.com/vermouth1992&gt;@vermouth1992&lt;/denchmark-link&gt;

Please refer to &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/2e14f6792a3cfd38b212ce114d7daaf2/untitled373.ipynb&gt;the gist&lt;/denchmark-link&gt;
 and confirm if it replicated the issue reported.Thanks!
		</comment>
		<comment id='2' author='vermouth1992' date='2020-08-17T05:38:38Z'>
		
@vermouth1992
Please refer to the gist and confirm if it replicated the issue reported.Thanks!

Yes. The issue is replicated.
		</comment>
		<comment id='3' author='vermouth1992' date='2020-09-03T23:44:08Z'>
		&lt;denchmark-link:https://github.com/vermouth1992&gt;@vermouth1992&lt;/denchmark-link&gt;
 This is working as intended. When you have a custom_object and want to save model in  format, then you need to add a  method as shown below. This  is not required if you save the model in  format. Check &lt;denchmark-link:https://www.tensorflow.org/guide/keras/save_and_serialize#custom_objects&gt;this guide&lt;/denchmark-link&gt;
 on TF website for more details.
&lt;denchmark-code&gt;    def get_config(self):
        config = super(Model, self).get_config()
        config.update({"a": self.a})
        return config
&lt;/denchmark-code&gt;

Please check the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/629d3f22e24c7497c1473d1296eb71eb/tf_save_h5_bug.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
Please verify once and close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='4' author='vermouth1992' date='2020-09-03T23:51:03Z'>
		
@vermouth1992 This is working as intended. When you have a custom_object and want to save model in 'h5' format, then you need to add a get_config method as shown below. This get_config is not required if you save the model in 'tf' format. Check this guide on TF website for more details.
    def get_config(self):
        config = super(Model, self).get_config()
        config.update({"a": self.a})
        return config

Please check the gist here. Thanks!
Please verify once and close the issue if this was resolved for you. Thanks!

I see the problem. I actually tried what you said but it didn't work because I declared the tf.Variable inside the class. I changed the declaration inside the class and it doesn't work. So is it correct that all the variables have to be passed in as an argument for h5 format to work?
		</comment>
		<comment id='5' author='vermouth1992' date='2020-09-03T23:56:40Z'>
		Also, is there any better solution if I would like to decorate a class member function with batch shape (e.g. [None, dim]), where dim is passed in as an argument from the class constructor. Currently, I simply decorate them inside the constructor but this is actually really ugly. This is very useful to avoid retracing if the batch size is always changing such as in reinforcement learning, where the length of the trajectory is always changing. Thank you very much for your help!
		</comment>
		<comment id='6' author='vermouth1992' date='2020-09-04T00:51:10Z'>
		&lt;denchmark-link:https://github.com/vermouth1992&gt;@vermouth1992&lt;/denchmark-link&gt;
 Defining  inside  is problematic as and when you instantiate the subclass model, it will  and reinitialize  with a . Thanks!
		</comment>
		<comment id='7' author='vermouth1992' date='2020-09-09T21:58:31Z'>
		Please close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='8' author='vermouth1992' date='2020-09-09T22:02:13Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42381&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42381&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>