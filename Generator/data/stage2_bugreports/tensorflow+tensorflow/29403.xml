<bug id='29403' author='myshzzx' open_date='2019-06-04T16:39:03Z' closed_time='2019-06-07T21:25:42Z'>
	<summary>tf 2 memory leak of Flatten and BatchNormalization layer</summary>
	<description>
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): win10 x64
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v1.12.0-9492-g2c319fb415 2.0.0-alpha0
Python version: 3.6.6

Describe the current behavior
memory leak when model has Flatten or BN layer.
memory usage keep increasing and never down after gc collection.
Describe the expected behavior
models created will be collected by gc, and memory usage go down to initial level
Code to reproduce the issue
from time import sleep

import os
import time
import gc
import numpy as np
import tensorflow.keras as k
import tensorflow as tf

if __name__ == '__main__':
	"""
	the Flatten and BN layer will cause memory leak, and performance problem
	memory usage keep increasing during the iteration, and never down after gc:
		Flatten + BN : mem 1.3GB, time 105s
		Flatten only: mem 1.3GB, time 105s
		BN only: mem 760MB, time 45s
		no Flatten or BN: mem 490M, time 21s
	"""
	model_file = 'l:/m'
	for i in range(100):
		if os.path.exists(model_file):
			model = k.models.load_model(model_file)
		else:
			model = k.models.Sequential([
				k.layers.Flatten(input_shape=(10,)), # this layer will cause HUGE memory leak and performance problem
				k.layers.Dense(100),
				k.layers.ELU(),
				k.layers.Dense(500),
				k.layers.BatchNormalization(), # this layer will cause memory leak
				k.layers.ELU(),
				k.layers.Dense(2, activation=tf.nn.softmax),
			])
			model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['acc'])
			model.fit(np.ndarray((5000, 10), dtype=float), np.array([0, 1] * 2500), epochs=1, verbose=1)
			model.save(model_file)
		
		x = np.ndarray((1, 10), dtype=float)
		x.fill(1)
		print(i, model.predict(x))
	
	os.remove(model_file)
	gc.collect()
	sleep(100000)

	</description>
	<comments>
		<comment id='1' author='myshzzx' date='2019-06-05T09:08:06Z'>
		Will it be possible to provide the full code snippet that can replicate the issue. It will be really helpful to proceed further. Thanks!
		</comment>
		<comment id='2' author='myshzzx' date='2019-06-06T12:26:43Z'>
		
Will it be possible to provide the full code snippet that can replicate the issue. It will be really helpful to proceed further. Thanks!

I've updated the code snippet.
		</comment>
		<comment id='3' author='myshzzx' date='2019-06-07T21:25:42Z'>
		Please see &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/28844&gt;#28844&lt;/denchmark-link&gt;
 for a detailed explanation of what's going on. (Feel free to re-open if upgrading to  and adding  doesn't resolve the issue.)
		</comment>
		<comment id='4' author='myshzzx' date='2019-06-07T21:25:44Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=29403&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=29403&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>