<bug id='30384' author='nguerinjr' open_date='2019-07-03T23:57:41Z' closed_time='2019-10-10T23:28:48Z'>
	<summary>Problem with keras saving when using custom loss in compile (problem in custom_objects parameter passing)</summary>
	<description>
System information
System: windows 10, wsl with ubuntu 18 LTS
Tensorflow Version: 2.0.0b1 in CPU mode (default, installed from pip)
Python version: 3.6.8
It also happens in real linux environments (actually, it's easy to simulate each these errors)
Describe the current behavior
The code can't handle custom losses (added with .compile) when loading a model
Describe the expected behavior
When I use a custom loss and compile it, tensorflow returns the following error:
Traceback (most recent call last):
File "/home/nguerinjr/Documents/deep_coding_project/teste.py", line 27, in 
tf.keras.models.load_model('model.keras.tf', custom_objects={'null_fn': null_fn})
File "/home/nguerinjr/Documents/deep_coding_project/venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/save.py", line 141, in load_model
return saved_model.load_from_saved_model_v2(filepath, compile)
File "/home/nguerinjr/Documents/deep_coding_project/venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/saved_model.py", line 1225, in load_from_saved_model_v2
model._training_config))  # pylint: disable=protected-access
File "/home/nguerinjr/Documents/deep_coding_project/venv/lib/python3.7/site-packages/tensorflow/python/training/tracking/base.py", line 458, in _method_wrapper
result = method(self, *args, **kwargs)
File "/home/nguerinjr/Documents/deep_coding_project/venv/lib/python3.7/site-packages/tensorflow/python/keras/engine/training.py", line 300, in compile
self.loss, self.output_names)
File "/home/nguerinjr/Documents/deep_coding_project/venv/lib/python3.7/site-packages/tensorflow/python/keras/engine/training_utils.py", line 1240, in prepare_loss_functions
loss_functions = [get_loss_function(loss) for _ in output_names]
File "/home/nguerinjr/Documents/deep_coding_project/venv/lib/python3.7/site-packages/tensorflow/python/keras/engine/training_utils.py", line 1240, in 
loss_functions = [get_loss_function(loss) for _ in output_names]
File "/home/nguerinjr/Documents/deep_coding_project/venv/lib/python3.7/site-packages/tensorflow/python/keras/engine/training_utils.py", line 1029, in get_loss_function
loss_fn = losses.get(loss)
File "/home/nguerinjr/Documents/deep_coding_project/venv/lib/python3.7/site-packages/tensorflow/python/keras/losses.py", line 1122, in get
return deserialize(identifier)
File "/home/nguerinjr/Documents/deep_coding_project/venv/lib/python3.7/site-packages/tensorflow/python/keras/losses.py", line 1113, in deserialize
printable_module_name='loss function')
File "/home/nguerinjr/Documents/deep_coding_project/venv/lib/python3.7/site-packages/tensorflow/python/keras/utils/generic_utils.py", line 211, in deserialize_keras_object
raise ValueError('Unknown ' + printable_module_name + ':' + object_name)
ValueError: Unknown loss function:null_fn
Code to reproduce the issue
inp = tf.keras.Input(batch_size=8, shape=(32, 32, 3))
tensor = tf.keras.layers.Conv2D(filters=8, kernel_size=(3, 3))(inp)
model = tf.keras.Model(inputs=inp, outputs=tensor)
def null_fn(y_true, y_pred):
    return tf.constant(0.)

model.compile('adam',loss=null_fn)
model.save('model.keras.tf', save_format='tf')
tf.keras.models.load_model('model.keras.tf', custom_objects={'null_fn': null_fn})
Other info / logs
In   File "/home/nguerinjr/Documents/deep_coding_project/venv/lib/python3.7/site-packages/tensorflow/python/keras/engine/training_utils.py", line 1240, function prepare_loss_functions, the custom_objects are not passed as parameter (actually the compile does not accept it currently).
Consisdering the stack, in the two latest files, there are generic keras functions which receive custom_objects params. But as they were not passed in the other functions, they are not treated correctly there. So it seems a real bug concerning custom losses.
The keras .compile uses the same stack of code, but in that situation, when tryining to get the corresponding function we have a callable. When loading, we have dict.
File "/home/nguerinjr/Documents/deep_coding_project/venv/lib/python3.7/site-packages/tensorflow/python/keras/losses.py", line 1117
@keras_export('keras.losses.get')
def get(identifier):
  if identifier is None:
    return None
  if isinstance(identifier, six.string_types):
    identifier = str(identifier)
    return deserialize(identifier)
  if isinstance(identifier, dict):
    return deserialize(identifier)
  elif callable(identifier):
    return identifier
  else:
    raise ValueError('Could not interpret '
                     'loss function identifier:', identifier)
So, there's a need of passing the custom_objects param to the deserialize method somehow.
	</description>
	<comments>
		<comment id='1' author='nguerinjr' date='2019-07-05T18:17:17Z'>
		Digging a bit into the keras &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/2a705b9d1524a856cd4c36a53629f25de97aba65/tensorflow/python/keras/saving/saved_model/load.py#L63&gt;code&lt;/denchmark-link&gt;
 it seems this is still not implemented:
&lt;denchmark-code&gt;def load(path, compile=True):  # pylint: disable=redefined-builtin
  """Loads Keras objects from a SavedModel.
  Any Keras layer or model saved to the SavedModel will be loaded back
  as Keras objects. Other objects are loaded as regular trackable objects (same
  as `tf.saved_model.load`).
  Currently, Keras saving/loading only retains the Keras object's weights,
  losses, and call function.
  The loaded model can be re-compiled, but the original optimizer, compiled loss
  functions, and metrics are not retained. This is temporary, and `model.save`
  will soon be able to serialize compiled models.
  Args:
    path: Path to SavedModel.
    compile: If true, compile the model after loading it.
  Returns:
    Object loaded from SavedModel.
  """
  # TODO(kathywu): Add saving/loading of optimizer, compiled losses and metrics.
  # TODO(kathywu): Add code to load from objects that contain all endpoints
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='nguerinjr' date='2019-09-11T22:41:41Z'>
		&lt;denchmark-link:https://github.com/nguerinjr&gt;@nguerinjr&lt;/denchmark-link&gt;
 I can reproduce the issue with . Please take a look at the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/56079fe0a7ddb24d432d1c8bed89a6e3/tf_30384_tf.ipynb&gt;gist here&lt;/denchmark-link&gt;
. However, this is not an issue if you use *.h5 format. Please take a look at this &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/bcb082252f19bbb6b71899e1cb35a44c/tf_30384.ipynb&gt;gist&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='3' author='nguerinjr' date='2019-10-10T23:28:48Z'>
		&lt;denchmark-link:https://github.com/nguerinjr&gt;@nguerinjr&lt;/denchmark-link&gt;
 When you have any custom_objects, there are couple of ways you can make it work.

create_model --&gt;save the model --&gt; compile --&gt;load the model--&gt; compile the loaded model with the custom_objects.
create_model --&gt; compile --&gt; save the model --&gt;load the model--&gt; compile the loaded model with the custom_objects.

Custom functions are not serializable as they are not compatible. You could also get around this by defining  a custom Metric/loss object, and overwriting the get_config() . Check the &lt;denchmark-link:https://www.tensorflow.org/beta/guide/keras/training_and_evaluation&gt;link&lt;/denchmark-link&gt;
 for more details.
There is another &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/32612&gt;similar issue&lt;/denchmark-link&gt;
 that we will use to track the progress in saving model with custom_objects. Thanks!
I am closing this issue.  Please feel free to open it if I am mistaken. Thanks!
		</comment>
		<comment id='4' author='nguerinjr' date='2019-10-10T23:28:50Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/30384&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/30384&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>