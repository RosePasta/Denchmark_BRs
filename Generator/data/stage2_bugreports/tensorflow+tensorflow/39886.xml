<bug id='39886' author='djdongjin' open_date='2020-05-26T21:00:27Z' closed_time='2020-11-16T18:17:11Z'>
	<summary>Unexpected behaviour of tf.image.convert_image_dtype</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Colab
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): tf-nightly
Python version: 3.6.9
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Describe the current behavior
Convert a tf.int32 tensor to tf.float32 seems underflow. As shown in the below code, I think c should be the right result, correct me if I am wrong.
Describe the expected behavior
The tf.int32 tensorf should be scaled to [0, 1], as documented.
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
a = tf.reshape(tf.range(0, 12), shape=(3, 4))
print(a)
print(tf.reduce_mean(a), '\n')

b = tf.image.convert_image_dtype(a, dtype=tf.float32)
print(b)
print(tf.reduce_mean(b), '\n')

c = a / tf.reduce_max(a)
print(c)
print(tf.reduce_mean(c))

# output
tf.Tensor(
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]], shape=(3, 4), dtype=int32)
tf.Tensor(5, shape=(), dtype=int32) 

tf.Tensor(
[[0.0000000e+00 4.6566129e-10 9.3132257e-10 1.3969839e-09]
 [1.8626451e-09 2.3283064e-09 2.7939677e-09 3.2596290e-09]
 [3.7252903e-09 4.1909516e-09 4.6566129e-09 5.1222742e-09]], shape=(3, 4), dtype=float32)
tf.Tensor(2.561137e-09, shape=(), dtype=float32) 

tf.Tensor(
[[0.         0.09090909 0.18181818 0.27272727]
 [0.36363636 0.45454545 0.54545455 0.63636364]
 [0.72727273 0.81818182 0.90909091 1.        ]], shape=(3, 4), dtype=float64)
tf.Tensor(0.5, shape=(), dtype=float64)
Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='djdongjin' date='2020-05-26T22:10:48Z'>
		I think you are correct. Can you compare the behavior on 1.15, 2.0, 2.1 and 2.2 releases so we can know the range where the regression was introduced?
		</comment>
		<comment id='2' author='djdongjin' date='2020-05-26T22:40:15Z'>
		
I think you are correct. Can you compare the behavior on 1.15, 2.0, 2.1 and 2.2 releases so we can know the range where the regression was introduced?

It seems the behaviour is all in this way from 1.15-2.2... I tried all 1.15-2.2.
# !pip install tensorflow==1.15
import tensorflow as tf
print(tf.__version__)
# &gt;&gt;&gt; 1.15.0

sess = tf.Session()

a = tf.reshape(tf.range(0, 12), shape=(3, 4))
print(sess.run(a))

b = tf.image.convert_image_dtype(a, dtype=tf.float32)
print(sess.run(b))

c = a / tf.reduce_max(a)
print(sess.run(c))

[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
[[0.0000000e+00 4.6566129e-10 9.3132257e-10 1.3969839e-09]
 [1.8626451e-09 2.3283064e-09 2.7939677e-09 3.2596290e-09]
 [3.7252903e-09 4.1909516e-09 4.6566129e-09 5.1222742e-09]]
[[0.         0.09090909 0.18181818 0.27272727]
 [0.36363636 0.45454545 0.54545455 0.63636364]
 [0.72727273 0.81818182 0.90909091 1.        ]]
		</comment>
		<comment id='3' author='djdongjin' date='2020-05-26T23:03:03Z'>
		In this case, this likely is not a regression but a failure on the API.
Can you try passing in &lt;denchmark-link:https://cs.opensource.google/tensorflow/tensorflow/+/master:tensorflow/python/ops/image_ops_impl.py;l=2003-2009;drc=158d128323176a3e4abe2538a85569122c4bfa45&gt;saturate=True&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='4' author='djdongjin' date='2020-05-26T23:11:02Z'>
		
In this case, this likely is not a regression but a failure on the API.
Can you try passing in saturate=True?

I tried saturate=True with TF 1.15 and 2.2. The issue exists in both version:
# ---tf 1.15
sess = tf.Session()

a = tf.reshape(tf.range(0, 12), shape=(3, 4))
print(sess.run(a))

b = tf.image.convert_image_dtype(a, dtype=tf.float32, saturate=True)
print(sess.run(b))

c = a / tf.reduce_max(a)
print(sess.run(c))

# --- tf 2.2
a = tf.reshape(tf.range(0, 12), shape=(3, 4))
print(a)

b = tf.image.convert_image_dtype(a, dtype=tf.float32, saturate=True)
print(b)

c = a / tf.reduce_max(a)
print(c)
The outputs are the same with attached above.
		</comment>
		<comment id='5' author='djdongjin' date='2020-05-26T23:13:34Z'>
		Thank you for the triage. This is then a bug that we will have to fix, though we also need to make sure we don't break users that depend on the &lt;denchmark-link:https://xkcd.com/1172/&gt;existing behavior&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='djdongjin' date='2020-05-26T23:19:31Z'>
		
Thank you for the triage. This is then a bug that we will have to fix, though we also need to make sure we don't break users that depend on the existing behavior

Can you explain the expected behavior? It seems the API only works when the conversion belongs to the same family (e.g. int -&gt; int, float -&gt; float). I also tried something below:
In [26]: x = [1, 2, 3]

In [27]: tf.image.convert_image_dtype(x, dtype=tf.float32, saturate=True)
Out[27]: &lt;tf.Tensor: shape=(3,), dtype=float32, numpy=array([4.6566129e-10, 9.3132257e-10, 1.3969839e-09], dtype=float32)&gt;

In [28]: x = [1.0, 2.0, 3.0]

In [29]: tf.image.convert_image_dtype(x, dtype=tf.int32, saturate=True)
Out[29]: &lt;tf.Tensor: shape=(3,), dtype=int32, numpy=array([-2147483648, -2147483648, -2147483648], dtype=int32)&gt;
		</comment>
		<comment id='7' author='djdongjin' date='2020-05-27T17:54:17Z'>
		I'll have to look through documentation and code history to get more details than what's already included in the comments.
		</comment>
		<comment id='8' author='djdongjin' date='2020-11-12T23:21:13Z'>
		The values are normalized by the MAX value of the input data type (as opposed to the MAX pixel value). In the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/39886#issue-625195528&gt;example&lt;/denchmark-link&gt;
 you've provided, the values are being normalized by int32's max value (2^32/2-1) which is huge, and therefore the output values are tiny.
I will update the function's API doc with better explanation and examples to help minimize confusion. I will loop back once it lands.
		</comment>
		<comment id='9' author='djdongjin' date='2020-11-16T18:17:11Z'>
		Here is the commit that adds better explanation and examples for  function: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/f577e5a128324f8708f9925d7035560e72bfb98f&gt;f577e5a&lt;/denchmark-link&gt;

It will be officially available on tensorflow.org with v2.4.0 API doc. (For now, please refer to the docstring.)
I will go ahead and close the issue.
		</comment>
		<comment id='10' author='djdongjin' date='2020-11-16T18:17:13Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39886&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39886&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>