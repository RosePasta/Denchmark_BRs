<bug id='41797' author='lutzroeder' open_date='2020-07-28T04:01:53Z' closed_time='2020-09-05T23:24:29Z'>
	<summary>Keras saves invalid JSON files containing Infinity</summary>
	<description>
Describe the current behavior
JSON saved by Keras contains  which is invalid according to &lt;denchmark-link:https://tools.ietf.org/html/rfc7159&gt;RFC 7159&lt;/denchmark-link&gt;
:

"Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted."

Describe the expected behavior
Keras saves correct JSON format.
Standalone code to reproduce the issue
&lt;denchmark-code&gt;from tensorflow import keras
input = keras.Input(shape=(1))
x = keras.backend.sqrt(input)
model = keras.Model(input, x)
model.compile(optimizer='adam', loss='mse')
with open('repro.json', 'w') as json_file:
    json_file.write(model.to_json())
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;~ node
&gt; JSON.parse(require('fs').readFileSync('repro.json', 'utf-8'))
Uncaught SyntaxError: Unexpected token I in JSON at position 508
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/4985883/repro.zip&gt;repro.zip&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/37196&gt;#37196&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/lutzroeder/netron/issues/553&gt;lutzroeder/netron#553&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/goldiegadde&gt;@goldiegadde&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/howl-anderson&gt;@howl-anderson&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='lutzroeder' date='2020-07-28T06:57:32Z'>
		&lt;denchmark-link:https://github.com/lutzroeder&gt;@lutzroeder&lt;/denchmark-link&gt;

In the JSON file you uploaded I see a value named but there is no value 
On running the code in colab with TF 2.2 I see neither  nor . Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/a9f1d86821c63ef8227129b3e710dcb2/untitled191.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='2' author='lutzroeder' date='2020-07-28T07:08:33Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 good catch, corrected to .
This does repro in  on macOS and &lt;denchmark-link:https://github.com/imxieyi&gt;@imxieyi&lt;/denchmark-link&gt;
 reported &lt;denchmark-link:https://github.com/lutzroeder/netron/issues/553&gt;lutzroeder/netron#553&lt;/denchmark-link&gt;
 for . The Python JSON parser by default (incorrectly) supports  but other parsers like  will fail.
See also &lt;denchmark-link:https://docs.python.org/3/library/json.html&gt;https://docs.python.org/3/library/json.html&lt;/denchmark-link&gt;
:

If allow_nan is false (default: True), then it will be a ValueError to serialize out of range float values (nan, inf, -inf) in strict compliance of the JSON specification. If allow_nan is true, their JavaScript equivalents (NaN, Infinity, -Infinity) will be used.

		</comment>
		<comment id='3' author='lutzroeder' date='2020-07-28T07:49:30Z'>
		I think it is the same issue as &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/37196&gt;#37196&lt;/denchmark-link&gt;
, I will have a deep look at it.
		</comment>
		<comment id='4' author='lutzroeder' date='2020-09-05T23:24:31Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41797&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41797&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>