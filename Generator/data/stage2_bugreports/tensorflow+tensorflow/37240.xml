<bug id='37240' author='jpatts' open_date='2020-03-02T20:18:39Z' closed_time='2020-03-14T00:51:46Z'>
	<summary>How to deserialize from a dict with tf.keras.losses.get</summary>
	<description>
&lt;denchmark-h:h2&gt;URL(s) with the issue:&lt;/denchmark-h&gt;

&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/losses/get&gt;https://www.tensorflow.org/api_docs/python/tf/keras/losses/get&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;Description of issue (what needs changing):&lt;/denchmark-h&gt;

Currently there is no documentation at all.
Its fairly straightforward to use by inputting a string denoting default class name:
ex:
&lt;denchmark-code&gt;identifier = "categorical_crossentropy"
tf.keras.losses.get(identifier)
&lt;/denchmark-code&gt;

However, I am having issues with dictionary objects:
ex:
&lt;denchmark-code&gt;identifier = {"class_name":"categorical_crossentropy","config":{"from_logits":True}}
tf.keras.losses.get(identifier)
&lt;/denchmark-code&gt;

Returns:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File ".\main.py", line 85, in &lt;module&gt;
    loss = tf.keras.losses.get(jsn)
  File "C:\Users\jopatterson\Documents\autoprime-ml\env\lib\site-packages\tensorflow_core\python\keras\losses.py", line 1186, in get
    return deserialize(identifier)
  File "C:\Users\jopatterson\Documents\autoprime-ml\env\lib\site-packages\tensorflow_core\python\keras\losses.py", line 1175, in deserialize
    printable_module_name='loss function')
  File "C:\Users\jopatterson\Documents\autoprime-ml\env\lib\site-packages\tensorflow_core\python\keras\utils\generic_utils.py", line 315, in deserialize_keras_object
    return cls(**cls_config)
TypeError: categorical_crossentropy() missing 2 required positional arguments: 'y_true' and 'y_pred'
&lt;/denchmark-code&gt;

I believe it is failing because cls is the already initialized loss function, and it is passing cls_config as its input, rather than using them as parameters during initialization.
&lt;denchmark-h:h3&gt;Clear description&lt;/denchmark-h&gt;

This is a very useful method for abstract implementations of loss objects.
&lt;denchmark-h:h3&gt;Correct links&lt;/denchmark-h&gt;

This is where the issue is occuring, within the  function:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/utils/generic_utils.py#L382&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/utils/generic_utils.py#L382&lt;/denchmark-link&gt;

&lt;denchmark-h:h3&gt;Parameters defined&lt;/denchmark-h&gt;

There currently is no documentation for this, as identifier can be a string, dictionary or callable.
&lt;denchmark-h:h3&gt;Returns defined&lt;/denchmark-h&gt;

Returns are not defined, but its fairly obvious it returns a loss function.
&lt;denchmark-h:h3&gt;Raises listed and defined&lt;/denchmark-h&gt;

No.
&lt;denchmark-h:h3&gt;Usage example&lt;/denchmark-h&gt;

No.
&lt;denchmark-h:h3&gt;Request visuals, if applicable&lt;/denchmark-h&gt;

No.
&lt;denchmark-h:h3&gt;Submit a pull request?&lt;/denchmark-h&gt;

I would do this if I had enough knowledge to do so. Unfortunately I only know how it works with identifier as a String.
	</description>
	<comments>
		<comment id='1' author='jpatts' date='2020-03-03T06:01:51Z'>
		&lt;denchmark-link:https://github.com/jpatts&gt;@jpatts&lt;/denchmark-link&gt;
, Documentation is available for tf-nightly version. Please take a look at doc &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/losses/get?version=nightly&gt;here&lt;/denchmark-link&gt;
 for more about  and . Thanks!
		</comment>
		<comment id='2' author='jpatts' date='2020-03-03T06:07:27Z'>
		&lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
, I saw the nightly documentation after this post, however there is still no explanation for what a “loss configuration dictionary” is. That’s the larger problem for this. The way I tried to do it is the intuitive way, but it doesn’t work for the reasons I showed above, so I would like to know how it’s supposed to be used.
		</comment>
		<comment id='3' author='jpatts' date='2020-03-03T10:58:23Z'>
		&lt;denchmark-link:https://github.com/jpatts&gt;@jpatts&lt;/denchmark-link&gt;
 would you mind to elaborate what exactly are you trying to do?
there are some examples how to serialize custom objects and functions
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/utils/generic_utils_test.py#L146&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/utils/generic_utils_test.py#L146&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='jpatts' date='2020-03-03T17:05:00Z'>
		&lt;denchmark-link:https://github.com/lc0&gt;@lc0&lt;/denchmark-link&gt;
 I gave an example at the top of this issue showing what I’m trying to do. To use a configuration dictionary, I need two mandatory JSON parameters, “class_name” and “config”. This can be seen in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/utils/generic_utils.py#L308&gt;this&lt;/denchmark-link&gt;
 code section:
&lt;denchmark-code&gt;def class_and_config_for_serialized_keras_object(
    config,
    module_objects=None,
    custom_objects=None,
    printable_module_name='object'):
  """Returns the class name and config for a serialized keras object."""
  if (not isinstance(config, dict) or 'class_name' not in config or
      'config' not in config):
    raise ValueError('Improper config format: ' + str(config))
&lt;/denchmark-code&gt;

However, when I do this, the “class_name” is used for the initialization and “config” is used as function inputs. The “config” should be setting “class_name” parameter options during function initialization.
		</comment>
		<comment id='5' author='jpatts' date='2020-03-03T19:10:36Z'>
		This is the block of code where this is happening.
&lt;denchmark-code&gt;if isinstance(identifier, dict):
    # In this case we are dealing with a Keras config dictionary.
    config = identifier
    (cls, cls_config) = class_and_config_for_serialized_keras_object(
        config, module_objects, custom_objects, printable_module_name)

    if hasattr(cls, 'from_config'):
      arg_spec = tf_inspect.getfullargspec(cls.from_config)
      custom_objects = custom_objects or {}

      if 'custom_objects' in arg_spec.args:
        return cls.from_config(
            cls_config,
            custom_objects=dict(
                list(_GLOBAL_CUSTOM_OBJECTS.items()) +
                list(custom_objects.items())))
      with CustomObjectScope(custom_objects):
        return cls.from_config(cls_config)
    else:
      # Then `cls` may be a function returning a class.
      # in this case by convention `config` holds
      # the kwargs of the function.
      custom_objects = custom_objects or {}
      with CustomObjectScope(custom_objects):
        return cls(**cls_config)
&lt;/denchmark-code&gt;

The way I send the dictionary, I am being put down the "config holds the kwargs of the function" path. I think I want to be going down the "from_config" path, but don't know how to do so.
		</comment>
		<comment id='6' author='jpatts' date='2020-03-03T19:19:12Z'>
		&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/losses.py#L148&gt;This&lt;/denchmark-link&gt;
 is the "from_config" method for the loss class.
&lt;denchmark-code&gt;@classmethod
  def from_config(cls, config):
    """Instantiates a `Loss` from its config (output of `get_config()`).
    Args:
        config: Output of `get_config()`.
    Returns:
        A `Loss` instance.
    """
    return cls(**config)

  def get_config(self):
    """Returns the config dictionary for a `Loss` instance."""
    return {'reduction': self.reduction, 'name': self.name}
&lt;/denchmark-code&gt;

This is confusing, as cls(**cls_config) and cls.from_config(cls_config) end up being the same thing...
		</comment>
		<comment id='7' author='jpatts' date='2020-03-07T01:39:29Z'>
		Bump. I’m pretty sure that the issues I’m having are from the loss functions not actually having settable parameters. IE you can’t set “from_logits” during initialization, it needs to be set every time it is executed. So in this case, “config” is literally just calling the function with it’s supplied parameters. This makes me question why this is a feature...
		</comment>
		<comment id='8' author='jpatts' date='2020-03-12T01:10:50Z'>
		I can explain why this doesn't work -- when you pass a dict, the class name should be the actual name of the class.  categorical_crossentropy is a function, and not a class. I think the documentation should be improved here.
&lt;denchmark-link:https://github.com/pavithrasv&gt;@pavithrasv&lt;/denchmark-link&gt;
  Should we modify  to return partial functions, if the class name is the name of a function?
		</comment>
		<comment id='9' author='jpatts' date='2020-03-12T01:25:30Z'>
		Thank you very much for the clarification &lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;
.
So this returns a function:
&lt;denchmark-code&gt;loss = tf.keras.losses.get("categorical_crossentropy")
print(loss)

&lt;function categorical_crossentropy at 0x000002886AFC7318&gt;
&lt;/denchmark-code&gt;

And this returns the class.
&lt;denchmark-code&gt;jsn = {"class_name":"CategoricalCrossentropy", 
       "config": {
            "from_logits": True
        }
}
loss = tf.keras.losses.get(jsn)
print(loss)

&lt;tensorflow.python.keras.losses.CategoricalCrossentropy object at 0x0000018D9E219CC8&gt;
&lt;/denchmark-code&gt;

This solves my problem completely. I agree that the documentation should be updated, as this was very confusing.
		</comment>
		<comment id='10' author='jpatts' date='2020-03-12T13:43:17Z'>
		&lt;denchmark-link:https://github.com/jpatts&gt;@jpatts&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;
 , please take a look at PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/37538&gt;#37538&lt;/denchmark-link&gt;
 and suggest more changes if needed. I have added descriptions and examples which will clarify all doubts regarding 
		</comment>
		<comment id='11' author='jpatts' date='2020-03-13T04:37:01Z'>
		Thank you for the response &lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;
 and the quick PR &lt;denchmark-link:https://github.com/ashutosh1919&gt;@ashutosh1919&lt;/denchmark-link&gt;
 .
&lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;
 Yes, we can look into returning partial functions if class name is the name of a function. From the top of my head i think  may need to be modified for that.
		</comment>
	</comments>
</bug>