<bug id='13827' author='Ouwen' open_date='2017-10-19T03:47:14Z' closed_time='2017-12-21T15:19:12Z'>
	<summary>Tensorflow 1.3: tf.constant with dtype=[float32, float64, float16] may have inconsistent behavior.</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;



Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No


OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Ubuntu 16.04 with docker running gcr.io/tensorflow/tensorflow:latest


TensorFlow installed from (source or binary): NA


TensorFlow version (use command below): ('v1.3.0-rc2-20-g0787eee', '1.3.0')


Python version: 2.7


Bazel version (if compiling from source): NA


CUDA/cuDNN version: NA


GPU model and memory: NA


Exact command to reproduce:


&lt;denchmark-code&gt;// works
test = numpy.array([1,2,3,4,5,6, None], dtype=numpy.float32)
sess = tf.Session()
print(sess.run(tf.constant(test, dtype=tf.float32)))
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;// works
sess = tf.Session()
print(sess.run(tf.constant([1, 2, 3, 4, 5, 6, None], dtype=tf.float16)))
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;// returns error
sess = tf.Session()
print(sess.run(tf.constant([1, 2, 3, 4, 5, 6, None], dtype=tf.float32)))
// TypeError: Expected float32, got None of type '_Message' instead.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

A tensorflow constant with None in array with dtype float32, float64 seem to throw an error. However, if they are first wrapped by a numpy array, none is accepted and turned into NaN. This behavior seems inconsistent.
	</description>
	<comments>
		<comment id='1' author='Ouwen' date='2017-10-19T04:00:38Z'>
		/CC &lt;denchmark-link:https://github.com/MarkDaoust&gt;@MarkDaoust&lt;/denchmark-link&gt;

That's unfortunate. Would you like to contribute a fix?
		</comment>
		<comment id='2' author='Ouwen' date='2017-10-19T04:32:16Z'>
		I'd love to take a stab at contributing. From a brief glance i'm wondering if the convert_to_tensor function may be culprit. Glad to take any pointers as well.
		</comment>
		<comment id='3' author='Ouwen' date='2017-10-19T07:44:51Z'>
		So here is what I've found after looking through the code. This error is propagated from tensorflow version 0.5.0 to 1.4.0-rc0
  values pass without any problems because they are not checked in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L273-L291&gt;_TF_TO_IS_OK&lt;/denchmark-link&gt;
.  values are thus not stopped by the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L376&gt;_AssertCompatible&lt;/denchmark-link&gt;
 call, where they continue onward to be transformed into  values by &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L377&gt;np.array&lt;/denchmark-link&gt;

For , and   types,  values are caught by the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L294-L303&gt;_AssertCompatible&lt;/denchmark-link&gt;
, and since they are not an instance of &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L243&gt;compat.real_types&lt;/denchmark-link&gt;
  a  is raised.
So while the following produces an error:
&lt;denchmark-code&gt;sess = tf.Session()
print(sess.run(tf.constant([1, 2, 3, 4, 5, 6, None], dtype=tf.float32)))
// TypeError: Expected float32, got None of type '_Message' instead.
&lt;/denchmark-code&gt;

Using explicit nan will not cause an error
&lt;denchmark-code&gt;sess = tf.Session()
print(sess.run(tf.constant([1, 2, 3, 4, 5, 6, float('nan')], dtype=tf.float32)))
&lt;/denchmark-code&gt;

Since the  abstraction states the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/ops.py#L575-L578&gt;following are equivalent&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;value_1 = my_func(tf.constant([[1.0, 2.0], [3.0, 4.0]]))
value_2 = my_func([[1.0, 2.0], [3.0, 4.0]])
value_3 = my_func(np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float32))
&lt;/denchmark-code&gt;

I believe that the below should be equivalent as well
&lt;denchmark-code&gt;value_a = my_func(tf.constant([[1.0, 2.0], [3.0, None]], dtype=tf.float32))
value_b = my_func(np.array([[1.0, 2.0], [3.0, None]], dtype=np.float32))
&lt;/denchmark-code&gt;

Given what has been found, I would like to


Update _FilterFloat to allow for None values.


Add tf.float16 into the  _TF_TO_IS_OK dictionary with the _FilterFloat function


Add a test into ops_test.py named testConvertToTensorFloatNoneValue


Please let me know if this is a good plan assuming nothing breaks.
		</comment>
		<comment id='4' author='Ouwen' date='2017-10-19T16:26:37Z'>
		Thanks Ouwen! This is the best kind of bug report.
I'm not an expert on this part of TensorFlow, but this all looks pretty reasonable. Please send a PR after you fix that missing (self).
		</comment>
		<comment id='5' author='Ouwen' date='2017-10-19T16:48:35Z'>
		Appreciate it &lt;denchmark-link:https://github.com/MarkDaoust&gt;@MarkDaoust&lt;/denchmark-link&gt;
, here is the PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/13834&gt;#13834&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='Ouwen' date='2017-12-20T19:24:06Z'>
		It has been 14 days with no activity and the awaiting response label was assigned. Is this still an issue? Please update the label and/or status accordingly.
		</comment>
		<comment id='7' author='Ouwen' date='2017-12-21T15:19:12Z'>
		This is fixed by &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/13834&gt;#13834&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>