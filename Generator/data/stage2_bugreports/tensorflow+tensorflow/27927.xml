<bug id='27927' author='oldshuren' open_date='2019-04-17T16:34:16Z' closed_time='2019-05-02T04:54:10Z'>
	<summary>Under MirroredStrategy and ParameterStrategy tf.trainable_variables() doesn't return the correct wrapped variables</summary>
	<description>
Under MirroredStrategy and ParameterStrategy tf.trainable_variables() returns the normal unwrapped variables.
But according to the comments in mirrored_strategy.py and parameter_server_strategy.py, tf.trainable_variables() should return the wrapped variables.
Here tf 1.13.1 mirrored_strategy.py code segment,
&lt;denchmark-code&gt; if not context.executing_eagerly():
    g = ops.get_default_graph()
    # If "trainable" is True, next_creator() will add the member variables                                                                                                                    
    # to the TRAINABLE_VARIABLES collection, so we manually remove                                                                                                                            
    # them and replace with the MirroredVariable. We can't set                                                                                                                                
    # "trainable" to False for next_creator() since that causes functions                                                                                                                     
    # like implicit_gradients to skip those variables.                                                                                                                                        
    if kwargs.get("trainable", True) or kwargs.get("trainable", True) is None:
      collections.append(ops.GraphKeys.TRAINABLE_VARIABLES)
      l = g.get_collection_ref(ops.GraphKeys.TRAINABLE_VARIABLES)
      for v in index.values():
        if v in l:
          l.remove(v)
    g.add_to_collections(collections, result)
&lt;/denchmark-code&gt;

The problem is that in kwargs past from up stream API, "trainable" is set but the value is None, so just ckeck
&lt;denchmark-code&gt;if kwargs.get("trainable", True): 
&lt;/denchmark-code&gt;

is not enough, it should be
&lt;denchmark-code&gt;if kwargs.get("trainable", True) or  kwargs.get("trainable", True) is None:
&lt;/denchmark-code&gt;

This bug exists in all version of tensorflow. For tf 1.13.1, here is the fix for mirred_strategy.py
&lt;denchmark-code&gt;diff -u mirrored_strategy.py-org mirrored_strategy.py
--- mirrored_strategy.py-org    2019-03-15 08:56:17.677027702 -0400
+++ mirrored_strategy.py        2019-04-17 12:21:06.339507273 -0400
@@ -256,7 +256,7 @@
     # them and replace with the MirroredVariable. We can't set
     # "trainable" to False for next_creator() since that causes functions
     # like implicit_gradients to skip those variables.
-    if kwargs.get("trainable", True):
+    if kwargs.get("trainable", True) or kwargs.get("trainable", True) is None:
       collections.append(ops.GraphKeys.TRAINABLE_VARIABLES)
       l = g.get_collection_ref(ops.GraphKeys.TRAINABLE_VARIABLES)
       for v in index.values():
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='oldshuren' date='2019-04-26T11:57:17Z'>
		In order to expedite the trouble-shooting process, please provide a code snippet to reproduce the issue reported here. Thanks!
		</comment>
		<comment id='2' author='oldshuren' date='2019-05-02T04:54:07Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='3' author='oldshuren' date='2019-05-02T04:54:11Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=27927&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=27927&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>