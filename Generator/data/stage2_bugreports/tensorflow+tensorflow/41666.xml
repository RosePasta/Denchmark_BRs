<bug id='41666' author='rzimmerdev' open_date='2020-07-23T17:03:37Z' closed_time='2020-07-24T00:03:06Z'>
	<summary>Can't predict bounding boxes with my own trained model, even though Tensorflow returns reduced loss during training.</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information
Have I written custom code (as opposed to using a stock example script
provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 Home
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue
happens on a mobile device: No
TensorFlow installed from (source or binary): Source
TensorFlow version (use command below): 1.14.0
Python version: 3.6.7
Bazel version (if compiling from source): Not using Bazel
GCC/Compiler version (if compiling from source): Not using GCC
CUDA/cuDNN version: CUDA/cuDNN: 10.0
GPU model and memory: NVIDIA GeForce GTX 1080, 6G
Exact command to reproduce:
vis_util.visualize_boxes_and_labels_on_image_array(
image,
np.squeeze(boxes),
np.squeeze(classes).astype(np.int32),
np.squeeze(scores),
category_index,
use_normalized_coordinates=True,
line_thickness=8,
min_score_thresh=0.20)

When trying to predict bounding boxes with my own trained model with the Object Detection API, it won't predict any boxes and returns the original image. The problem is not with my prediction code, as I used the same as in the tutorial at
&lt;denchmark-link:https://tensorflow-object-detection-api-tutorial.readthedocs.io/en/latest/training.html&gt;https://tensorflow-object-detection-api-tutorial.readthedocs.io/en/latest/training.html&lt;/denchmark-link&gt;

and with a different model, which returns the predicted bounding boxes.
Describe the expected behavior
I don't know why this is happening, as the Tensorboard report says that my loss is reducing as I train the model, but when actually using it to predict bounding boxes in the image, it won't work.

The model:
&lt;denchmark-link:https://drive.google.com/drive/folders/1SMwSHRR8RLX3RMhYXT_aI9gMAIRLHHlp?usp=sharing&gt;https://drive.google.com/drive/folders/1SMwSHRR8RLX3RMhYXT_aI9gMAIRLHHlp?usp=sharing&lt;/denchmark-link&gt;

The prediction code:
&lt;denchmark-code&gt;import os
import cv2
import numpy as np
import tensorflow as tf
import sys

from utils import label_map_util
from utils import visualization_utils as vis_util

MODEL_NAME = 'league_model'
IMAGE_NAME = 'test1.jpg'

# Grab path to current working directory
CWD_PATH = os.getcwd()

# Path to frozen detection graph .pb file, which contains the model that is used
# for object detection.
PATH_TO_CKPT = os.path.join(CWD_PATH,MODEL_NAME,'frozen_inference_graph.pb')

# Path to label map file
PATH_TO_LABELS = os.path.join(CWD_PATH,'annotations','label_map.pbtxt')

# Path to image
PATH_TO_IMAGE = os.path.join(CWD_PATH,IMAGE_NAME)

# Number of classes the object detector can identify
NUM_CLASSES = 2

# Load the label map.
# Label maps map indices to category names, so that when our convolution
# network predicts `5`, we know that this corresponds to `king`.
# Here we use internal utility functions, but anything that returns a
# dictionary mapping integers to appropriate string labels would be fine
label_map = label_map_util.load_labelmap(PATH_TO_LABELS)
categories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES, use_display_name=True)
category_index = label_map_util.create_category_index(categories)

# Load the Tensorflow model into memory.
detection_graph = tf.Graph()
with detection_graph.as_default():
    od_graph_def = tf.compat.v1.GraphDef()
    with tf.io.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:
        serialized_graph = fid.read()
        od_graph_def.ParseFromString(serialized_graph)
        tf.import_graph_def(od_graph_def, name='')

    sess = tf.Session(graph=detection_graph)

# Define input and output tensors (i.e. data) for the object detection classifier

# Input tensor is the image
image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')

# Output tensors are the detection boxes, scores, and classes
# Each box represents a part of the image where a particular object was detected
detection_boxes = detection_graph.get_tensor_by_name('detection_boxes:0')

# Each score represents level of confidence for each of the objects.
# The score is shown on the result image, together with the class label.
detection_scores = detection_graph.get_tensor_by_name('detection_scores:0')
detection_classes = detection_graph.get_tensor_by_name('detection_classes:0')

# Number of objects detected
num_detections = detection_graph.get_tensor_by_name('num_detections:0')

# Load image using OpenCV and
# expand image dimensions to have shape: [1, None, None, 3]
# i.e. a single-column array, where each item in the column has the pixel RGB value
image = cv2.imread(PATH_TO_IMAGE)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
image_expanded = np.expand_dims(image_rgb, axis=0)

# Perform the actual detection by running the model with the image as input
(boxes, scores, classes, num) = sess.run(
    [detection_boxes, detection_scores, detection_classes, num_detections],
    feed_dict={image_tensor: image_expanded})

# Draw the results of the detection (aka 'visulaize the results')

vis_util.visualize_boxes_and_labels_on_image_array(
    image,
    np.squeeze(boxes),
    np.squeeze(classes).astype(np.int32),
    np.squeeze(scores),
    category_index,
    use_normalized_coordinates=True,
    line_thickness=8,
    min_score_thresh=0.20)

# All the results have been drawn on image. Now display the image.
cv2.imshow('Object detector', image)

# Press any key to close the image
cv2.waitKey(0)

# Clean up
cv2.destroyAllWindows()


&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='rzimmerdev' date='2020-07-23T17:12:38Z'>
		
&lt;denchmark-link:https://user-images.githubusercontent.com/35232794/88316369-1e3fc580-ccee-11ea-8c3d-7eca9f318b28.png&gt;&lt;/denchmark-link&gt;


&lt;denchmark-link:https://user-images.githubusercontent.com/35232794/88316660-8db5b500-ccee-11ea-89d0-aebe77449d6f.png&gt;&lt;/denchmark-link&gt;


&lt;denchmark-link:https://user-images.githubusercontent.com/35232794/88317853-403a4780-ccf0-11ea-95d5-f5beeccecf3c.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='rzimmerdev' date='2020-07-23T22:00:28Z'>
		
I got the boxes to appear, by using the Legacy  file.
The problem has changed, as using the same image and the same steps as before, the bounding boxes get too big and don't actually match the number of objects in the image, as follows:
&lt;denchmark-link:https://user-images.githubusercontent.com/35232794/88342952-c10c3a00-cd16-11ea-9201-9434bf6ca8be.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/35232794/88343191-34ae4700-cd17-11ea-9d50-e8902df148a1.png&gt;&lt;/denchmark-link&gt;

**Expected output: **
&lt;denchmark-link:https://user-images.githubusercontent.com/35232794/88343432-c61db900-cd17-11ea-865a-5d11f4ec9727.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='rzimmerdev' date='2020-07-24T00:03:03Z'>
		&lt;denchmark-h:h3&gt;Update: SOLVED&lt;/denchmark-h&gt;

The problem was in the way the tutorial documented the configuration for the pipeline.
The names of the folders were mixed up, so my model couldn't restore training, thus making me lose all progress whenever I stopped the training.
I will open a new issue to report this error in the tutorial.
		</comment>
		<comment id='4' author='rzimmerdev' date='2020-07-24T00:03:08Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41666&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41666&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>