<bug id='36126' author='christian-ri' open_date='2020-01-22T10:52:31Z' closed_time='2020-02-28T20:36:42Z'>
	<summary>Tensorflow: Model.Fit Error - [[{{node IteratorGetNext}}]]</summary>
	<description>
Hey Tensorflow-Team,
there is an error, that accurs when you try to follow the tutorial how to Load CSV data. &lt;denchmark-link:https://www.tensorflow.org/tutorials/load_data/csv&gt;(Link)&lt;/denchmark-link&gt;
 When the model runs through all the epochs, each time there is this error-code: . There are already some entries here on GitHub, but none of them gives a solution or a workaround. The people say that this is an issue with TF V2.0.0 and 2.1.0 . Is there a solution for this problem? I will leave my complete code here, itÂ´s just 161 lines.
Maybe I did a mistake. I also attached a screenshot from the error.
Thank you very much in advance!
Kind regards
Christian Richter
Code:
from __future__ import absolute_import, division, print_function, unicode_literals
import functools

import tensorflow as tf

import xlrd

import pandas as pd
import csv
import numpy as np
import csv

tf.compat.v1.enable_eager_execution()

train_data_url = "https://www.dropbox.com/s/mug8rjlniftu065/train_data_csv.csv?dl=0"

test_data_url = "https://www.dropbox.com/s/std8rt6lezl79ti/test_data_csv.csv?dl=0"

train_file_path = tf.keras.utils.get_file("train_data_csv.csv", train_data_url)
test_file_path = tf.keras.utils.get_file("test_data_csv.csv", test_data_url)

np.set_printoptions(precision = 3, suppress=True)

#!head {train_file_path}

Label_Column = 'Besucher'
Labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 200, 300, 400, 500, 600, 700, 800, 900]

train_dataset = tf.data.experimental.make_csv_dataset(
    './Data/train_data_csv.csv',
    batch_size = 52609,
    select_columns = ['Datum','Uhrzeit','Wochentag','Wochenende','Ferien','Feiertag','Brueckentag','Schneechaos','Streik','Besucher'],
    label_name = 'Besucher',
    num_epochs = 1,
    shuffle = False)



test_dataset = tf.data.experimental.make_csv_dataset(
    './Data/alt_test_data_csv.csv',
    batch_size = 1,
    select_columns = ['Datum','Uhrzeit','Wochentag','Wochenende','Feiertag','Besucher'],
    label_name = 'Besucher',
    num_epochs = 1 ,
    shuffle = False)


def show_batch(dataset):
  for batch, label in dataset.take(1):
    for key, value in batch.items():
      print("{:20s}: {}".format(key,value.numpy()))




show_batch(train_dataset)

def pack(features, label):
    return tf.stack(list(features.values()), axis = -1), label

packed_dataset1 = train_dataset.map(pack)
#packed_dataset2 = test_dataset.map(pack)

for features, labels in packed_dataset1.take(1):
    print(features.numpy())
    print()
    print(labels.numpy())

example_batch, labels_batch = next(iter(train_dataset))


class PackNumericFeatures(object):
    def __init__(self, names):
        self.names = names

    def __call__(self, features, labels):

        numeric_features = [features.pop(name) for name in self.names]
        numeric_features = [tf. cast(feat, tf.float32) for feat in numeric_features]
        numeric_features = tf.stack(numeric_features, axis = -1)
        features['numeric'] = numeric_features

        return features, labels

NUMERIC_FEATURES = ['Datum','Uhrzeit','Wochentag','Wochenende','Ferien','Feiertag','Brueckentag','Schneechaos','Streik']

packed_train_data = train_dataset.map(
    PackNumericFeatures(NUMERIC_FEATURES)
)
packed_test_data = train_dataset.map(
    PackNumericFeatures(NUMERIC_FEATURES)
)

show_batch(packed_train_data)

example_batch, labels_batch = next(iter(packed_train_data))


desc = pd.read_csv("./Data/train_data_csv.csv")[NUMERIC_FEATURES].describe()
desc

MEAN = np.array(desc.T['mean'])
STD = np.array(desc.T['std'])

def normalize_numeric_data(data, mean, std):

    return(data-mean)/std

normalizer = functools.partial(normalize_numeric_data, mean = MEAN, std = STD)

numeric_column = tf.feature_column.numeric_column('numeric', normalizer_fn=normalizer, shape=[len(NUMERIC_FEATURES)])
numeric_columns = [numeric_column]
numeric_column

example_batch['numeric']

numeric_layer = tf.keras.layers.DenseFeatures(numeric_columns)
numeric_layer(example_batch).numpy()

preprocessing_layer = numeric_layer

print(preprocessing_layer(example_batch).numpy()[0])

model = tf.keras.Sequential([
    preprocessing_layer,
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid'),
])

model.compile(
    loss='binary_crossentropy',
    optimizer='adam',
    metrics=['accuracy']
)

train_data = packed_train_data.shuffle(500)
test_data = packed_test_data

model.fit(train_data, epochs = 20)

test_loss, test_accuracy = model.evaluate(test_data)

print('\n\nTest Loss {}, Test Accuracy {}'.format(test_loss, test_accuracy))
&lt;denchmark-link:https://user-images.githubusercontent.com/60178097/72888143-4df51d00-3d0d-11ea-9c35-4246f5b36093.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='christian-ri' date='2020-01-23T09:04:32Z'>
		&lt;denchmark-link:https://github.com/christian-ri&gt;@christian-ri&lt;/denchmark-link&gt;
, I tried executing Load CSV data tutorial but it worked without error.
Can you check once and let us confirm. Thanks!
		</comment>
		<comment id='2' author='christian-ri' date='2020-01-23T09:54:27Z'>
		I will tell you when I checked it. Thank you so far!
		</comment>
		<comment id='3' author='christian-ri' date='2020-01-23T12:43:17Z'>
		&lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 I get the same error for the code used in the tutorial. Do you have any suggestions?
&lt;denchmark-link:https://user-images.githubusercontent.com/60178097/72985431-405f9600-3de6-11ea-8a36-8a6261baea14.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='christian-ri' date='2020-01-24T21:40:47Z'>
		&lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 Note that colab hides  from the C++ TensorFlow runtime by default so the error won't show up in the UI. However the error will still be thrown if executed as a normal Python script.
Checkout &lt;denchmark-link:https://colab.research.google.com/drive/1-M0IxI6klmtViFSTbPR2jDZP-xEv2Z-H&gt;this colab notebook&lt;/denchmark-link&gt;
 which reproduces the error using the following snippet:
import tensorflow as tf
import tensorflow_datasets as tfds

dataset = tfds.load("mnist", split="train")
val_dataset = tfds.load("mnist", split="test")

def preprocessing(data):
    return tf.cast(data["image"], tf.float32), data["label"]

dataset = (
    dataset.cache()
    .shuffle(4 * 1024)
    .map(preprocessing, num_parallel_calls=tf.data.experimental.AUTOTUNE,)
    .batch(1024)
    .prefetch(1)
)

val_dataset = (
    val_dataset.cache()
    .map(preprocessing, num_parallel_calls=tf.data.experimental.AUTOTUNE,)
    .batch(1024)
    .prefetch(1)
)

model = tf.keras.models.Sequential(
    [
        tf.keras.layers.Flatten(input_shape=(28, 28, 1)),
        tf.keras.layers.Dense(64, activation="relu"),
        tf.keras.layers.Dense(10, activation="softmax"),
    ]
)

model.compile(
    optimizer="adam",
    loss="sparse_categorical_crossentropy",
    metrics=["accuracy", "sparse_top_k_categorical_accuracy"],
)

model.fit(dataset, epochs=5, validation_data=val_dataset)
		</comment>
		<comment id='5' author='christian-ri' date='2020-01-25T11:09:04Z'>
		&lt;denchmark-link:https://github.com/lgeiger&gt;@lgeiger&lt;/denchmark-link&gt;
 Thank you for your answer! So does this mean, the error is actually no error and has nothing to do with the calculation?
		</comment>
		<comment id='6' author='christian-ri' date='2020-01-27T11:49:23Z'>
		
So does this mean, the error is actually no error and has nothing to do with the calculation?

I think the error still needs to be fixed, it is just not showing up in colab since it logs inside C++
		</comment>
		<comment id='7' author='christian-ri' date='2020-02-05T20:30:58Z'>
		&lt;denchmark-link:https://github.com/omalleyt12&gt;@omalleyt12&lt;/denchmark-link&gt;
 Any updates on this?  Is there more information we could provide?
		</comment>
		<comment id='8' author='christian-ri' date='2020-02-19T11:41:32Z'>
		This issue doesn't show up in tf-nightly==2.2.0.dev20200218 anymore. It would be nice if this could be backported, but at least v2.2 will include a fix for it.
		</comment>
		<comment id='9' author='christian-ri' date='2020-02-24T10:23:01Z'>
		&lt;denchmark-link:https://github.com/lgeiger&gt;@lgeiger&lt;/denchmark-link&gt;

Thank you very much for your efforts!
It would be great if the issue is solved in further versions.
Hope so.
Regards
		</comment>
		<comment id='10' author='christian-ri' date='2020-02-28T20:36:42Z'>
		Thanks for the issue! This is fixed in the latest tf-nightly. Unfortunately, we can't backport fixes of this nature to earlier versions
		</comment>
		<comment id='11' author='christian-ri' date='2020-02-28T20:36:44Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36126&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36126&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>