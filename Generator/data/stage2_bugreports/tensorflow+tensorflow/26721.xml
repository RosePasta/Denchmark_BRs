<bug id='26721' author='mingyr' open_date='2019-03-14T23:47:22Z' closed_time='2019-03-20T00:24:50Z'>
	<summary>Inconsistent encoding leads to AttributeError (reopen)</summary>
	<description>
System information
Have I written custom code (as opposed to using a stock example script provided in TensorFlow): N/A
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Red Hat 7.5
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No
TensorFlow installed from (source or binary): compiled from source
TensorFlow version (use command below): r13.1
Python version: 3.6.3
Bazel version (if compiling from source): 0.22
GCC/Compiler version (if compiling from source): 4.8.5
CUDA/cuDNN version: 10.0
GPU model and memory: P5000/16G
DeepMind open-sourced the implementation of IMPALA: &lt;denchmark-link:https://github.com/deepmind/scalable_agent&gt;https://github.com/deepmind/scalable_agent&lt;/denchmark-link&gt;

For parallelism, they wrap a mechanism which is class-based in doing so, the file is: &lt;denchmark-link:https://github.com/deepmind/scalable_agent/blob/master/py_process.py&gt;https://github.com/deepmind/scalable_agent/blob/master/py_process.py&lt;/denchmark-link&gt;

There is a code snippet at the beginning of the file:
&lt;denchmark-code&gt;
  class Zeros(object):
    def __init__(self, dim0):
      self._dim0 = dim0
    def compute(self, dim1):
      return np.zeros([self._dim0, dim1], dtype=np.int32)
    @staticmethod
    def _tensor_specs(method_name, kwargs, constructor_kwargs):
      dim0 = constructor_kwargs['dim0']
      dim1 = kwargs['dim1']
      if method_name == 'compute':
        return tf.contrib.framework.TensorSpec([dim0, dim1], tf.int32)
  with tf.Graph().as_default():
    p = py_process.PyProcess(Zeros, 1)
    result = p.proxy.compute(2)
    with tf.train.SingularMonitoredSession(
        hooks=[py_process.PyProcessHook()]) as session:
      print(session.run(result))  # Prints [[0, 0]].

&lt;/denchmark-code&gt;

however, when I tried to run it, I got the following error:
&lt;denchmark-code&gt;2019-03-01 17:37:16.260732: W tensorflow/core/framework/op_kernel.cc:1389] Unknown: AttributeError: 'Zeros' object has no attribute 'b'compute''
Traceback (most recent call last):

  File "/home/yuming/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/script_ops.py", line 207, in __call__
    ret = func(*args)

  File "/data/yuming/eeg-dpg/py_process.py", line 89, in py_call
    raise result

AttributeError: 'Zeros' object has no attribute 'b'compute''

&lt;/denchmark-code&gt;

I suspect maybe there is a mismatch between encoding (python interpreter and source code?), but not for sure, since I have no problem in running the code if I use Python 2.7.
Could anyone please take some effort on looking into it?
(The first people look into it just casually and unprofessionally close it, but I would think it is a bug. If you do think it is not a bug, you can close it since I got a workaround (back to python 2.7). I already posted it on stackoverflow)
	</description>
	<comments>
		<comment id='1' author='mingyr' date='2019-03-14T23:49:08Z'>
		The link to stack overflow:
&lt;denchmark-link:https://stackoverflow.com/questions/54939480/attribute-error-when-running-a-code-snippet-when-using-tensorflow&gt;https://stackoverflow.com/questions/54939480/attribute-error-when-running-a-code-snippet-when-using-tensorflow&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='mingyr' date='2019-03-20T00:24:49Z'>
		I think this is a problem with pyproxy. It's saying that in the line where you have
&lt;denchmark-code&gt;    result = p.proxy.compute(2)
&lt;/denchmark-code&gt;

p.proxy is an object which doesn't have a compute method. So this does not look like a tf issue to me.
		</comment>
		<comment id='3' author='mingyr' date='2019-03-20T00:44:29Z'>
		I think the root cause is not "p.proxy is an object which doesn't have a compute method", but potentially some changes in Python 3. Actually the attribute of "compute" can be either in unicode form, or in so-called byte stream form. That means "compute" and b"compute" are different things.
Anyway, let's see whether engineers at DeepMind have the time to address this or not.
		</comment>
	</comments>
</bug>