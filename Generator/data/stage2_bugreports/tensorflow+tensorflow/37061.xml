<bug id='37061' author='hartikainen' open_date='2020-02-25T19:15:47Z' closed_time='2020-03-11T19:08:22Z'>
	<summary>tf.keras.Model with nested dictionary inputs fails to serialize/deserialize</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock
example script provided in TensorFlow):  No
OS Platform and Distribution (e.g.,
Linux Ubuntu 16.04):  macOS Catalina 10.15.2 (19C57)
TensorFlow installed from (source or
binary): - TensorFlow version (use command below): nightly binary (v1.12.1-25814-g2e81bc66c5 2.2.0-dev20200225)
Python version: 3.7.6
CUDA/cuDNN version: - GPU model and memory: n/a

Note: This is a very recent regression; the code below works with both tensorflow==2.1.0 and tf-nightly-2.2.0.dev20200219. Would be nice to get it fixed for 2.2 release.
Describe the current behavior
When trying to serialize/deserialize a tf.keras.Model that has an inner tf.keras.Sequential model, nested input shapes cause an error.
Describe the expected behavior
The model serializes/deserializes correctly.
Standalone code to reproduce the issue
from collections import OrderedDict
import tensorflow as tf


batch_size = 3
input_values = (
    OrderedDict((
        ('a', tf.random.uniform((batch_size, 1))),
        ('b', tf.random.uniform((batch_size, 4))),
    )),
    (
        tf.random.uniform((batch_size, 3)),
        tf.random.uniform((batch_size, 4)),
    ),
)

inputs = tf.nest.map_structure(
    lambda x: tf.keras.layers.Input(tf.shape(x)[1:]), input_values)


def create_model(inputs):
    sequential_model = tf.keras.Sequential((
        tf.keras.layers.Lambda(
            lambda x: tf.concat(tf.nest.flatten(x), axis=-1)),
    ))
    out = sequential_model(inputs)
    model = tf.keras.Model(inputs, out)
    return model


model_1 = create_model(inputs[0])
model_2 = create_model(inputs)

# Works
model_1_2 = tf.keras.models.Model.from_config(model_1.get_config())
# Does not work
model_2_2 = tf.keras.models.Model.from_config(model_2.get_config())
Other info / logs
&lt;denchmark-code&gt;$ python ./tests/test_dict_inputs.py
2020-02-25 19:08:12.872582: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2020-02-25 19:08:12.886642: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x7fa017864140 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2020-02-25 19:08:12.886660: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
Traceback (most recent call last):
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/eager/execute.py", line 211, in make_shape
    shape = tensor_shape.as_shape(v)
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/framework/tensor_shape.py", line 1218, in as_shape
    return TensorShape(shape)
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/framework/tensor_shape.py", line 771, in __init__
    self._dims = [as_dimension(d) for d in dims_iter]
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/framework/tensor_shape.py", line 771, in &lt;listcomp&gt;
    self._dims = [as_dimension(d) for d in dims_iter]
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/framework/tensor_shape.py", line 716, in as_dimension
    return Dimension(value)
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/framework/tensor_shape.py", line 195, in __init__
    self._value = int(value.__index__())
TypeError: 'collections.OrderedDict' object cannot be interpreted as an integer

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./tests/test_dict_inputs.py", line 37, in &lt;module&gt;
    model_2_2 = tf.keras.models.Model.from_config(model_2.get_config())
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/keras/engine/network.py", line 950, in from_config
    config, custom_objects)
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/keras/engine/network.py", line 1982, in reconstruct_from_config
    process_layer(layer_data)
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/keras/engine/network.py", line 1964, in process_layer
    layer = deserialize_layer(layer_data, custom_objects=custom_objects)
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/keras/layers/serialization.py", line 109, in deserialize
    printable_module_name='layer')
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/keras/utils/generic_utils.py", line 373, in deserialize_keras_object
    list(custom_objects.items())))
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/keras/engine/sequential.py", line 393, in from_config
    model.build(build_input_shape)
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/keras/engine/sequential.py", line 266, in build
    super(Sequential, self).build(input_shape)
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/keras/engine/network.py", line 647, in build
    x = base_layer_utils.generate_placeholders_from_shape(input_shape)
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer_utils.py", line 165, in generate_placeholders_from_shape
    return array_ops.placeholder(shape=shape, dtype=backend.floatx())
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/ops/array_ops.py", line 3006, in placeholder
    return gen_array_ops.placeholder(dtype=dtype, shape=shape, name=name)
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/ops/gen_array_ops.py", line 6674, in placeholder
    shape = _execute.make_shape(shape, "shape")
  File "/Users/hartikainen/conda/envs/variational-option-discovery/lib/python3.7/site-packages/tensorflow/python/eager/execute.py", line 213, in make_shape
    raise TypeError("Error converting %s to a TensorShape: %s." % (arg_name, e))
TypeError: Error converting shape to a TensorShape: 'collections.OrderedDict' object cannot be interpreted as an integer.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='hartikainen' date='2020-02-25T19:22:21Z'>
		Just guessing here, but maybe this is related to the changes in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/0225ad8ca1749219635dd780b9a2507957bfeac6&gt;0225ad8&lt;/denchmark-link&gt;
? &lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='hartikainen' date='2020-02-26T12:57:54Z'>
		&lt;denchmark-link:https://github.com/hartikainen&gt;@hartikainen&lt;/denchmark-link&gt;
,
I was able to run the given code without any issues with the latest nightly for Linux i.e. 2.2.0-dev20200218. Please find the Gist of it &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/8579739947b58db0869cb2b759ae77ea/37061.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='3' author='hartikainen' date='2020-02-26T13:05:06Z'>
		&lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
 yeah, as mentioned above, mine works too for , so something changed between that and .
		</comment>
		<comment id='4' author='hartikainen' date='2020-02-27T08:20:39Z'>
		Was able to reproduce the issue with TF 2.2.0-dev20200226. Please find the Gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/a28410e3b9567b97835b01cbc9827c81/37061.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='5' author='hartikainen' date='2020-03-11T14:36:33Z'>
		Is there any way to still get this fixed in the tf 2.2 release? It seems like a regression from tf 2.1.
		</comment>
		<comment id='6' author='hartikainen' date='2020-03-11T19:08:22Z'>
		&lt;denchmark-link:https://github.com/hartikainen&gt;@hartikainen&lt;/denchmark-link&gt;
 Thanks for the issue!
Sequential is only supported for Models with one input. If you have a nested input structure, you should be using the Functional API or Model subclassing:
from collections import OrderedDict
import tensorflow as tf


batch_size = 3
input_values = (
    OrderedDict((
        ('a', tf.random.uniform((batch_size, 1))),
        ('b', tf.random.uniform((batch_size, 4))),
    )),
    (
        tf.random.uniform((batch_size, 3)),
        tf.random.uniform((batch_size, 4)),
    ),
)

inputs = tf.nest.map_structure(
    lambda x: tf.keras.layers.Input(tf.shape(x)[1:]), input_values)


def create_model(inputs):
    out = tf.concat(tf.nest.flatten(inputs), axis=-1)
    model = tf.keras.Model(inputs, out)
    return model


model = create_model(inputs)
model_2 = tf.keras.models.Model.from_config(model.get_config())
		</comment>
		<comment id='7' author='hartikainen' date='2020-03-11T19:08:24Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37061&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37061&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='hartikainen' date='2020-03-11T19:14:44Z'>
		&lt;denchmark-link:https://github.com/omalleyt12&gt;@omalleyt12&lt;/denchmark-link&gt;
, this seems weird to me. The original script above used to work with tf 2.1. Also, I'm still able to use Sequential with multiple inputs:
from collections import OrderedDict

import tensorflow as tf


batch_size = 3
input_values = (
    OrderedDict((
        ('a', tf.random.uniform((batch_size, 1))),
        ('b', tf.random.uniform((batch_size, 4))),
    )),
    (
        tf.random.uniform((batch_size, 3)),
        tf.random.uniform((batch_size, 4)),
    ),
)

inputs = tf.nest.map_structure(
    lambda x: tf.keras.layers.Input(tf.shape(x)[1:]), input_values)


sequential_model = tf.keras.Sequential((
    tf.keras.layers.Lambda(
        lambda x: tf.concat(tf.nest.flatten(x), axis=-1)),
))

outputs = sequential_model(inputs)

print(outputs)
outputs
&lt;denchmark-code&gt;Tensor("sequential/Identity:0", shape=(None, 12), dtype=float32)
&lt;/denchmark-code&gt;

The problem only occurs when passing the output of the sequential model through tf.keras.Model, as shown in the example above.
		</comment>
	</comments>
</bug>