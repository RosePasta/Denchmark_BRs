<bug id='19298' author='ravwojdyla' open_date='2018-05-15T17:24:42Z' closed_time='2020-01-24T21:34:32Z'>
	<summary>java/sbt. Cannot register 2 metrics with the same name on cross tests</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no.
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): osx 10.11.6
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.8
Python version: NA
Bazel version (if compiling from source): NA
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version: NA
GPU model and memory: NA
Exact command to reproduce: https://github.com/ravwojdyla/minimal-repo-tf-crashing

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

We have an issue open in scio (&lt;denchmark-link:https://github.com/spotify/scio/issues/1137&gt;spotify/scio#1137&lt;/denchmark-link&gt;
) which depends on java TF artifacts, please read full description in the link above. A TLDR: in cross test TF crushes with:
&lt;denchmark-code&gt;Cannot register 2 metrics with the same name: /tensorflow/cc/saved_model/load_attempt_count
&lt;/denchmark-code&gt;

This problem started to manifest itself from version 1.4.0 (previous versions were not affected), and continues to be a problem. The minimal reproduction repo is here: &lt;denchmark-link:https://github.com/ravwojdyla/minimal-repo-tf-crashing&gt;https://github.com/ravwojdyla/minimal-repo-tf-crashing&lt;/denchmark-link&gt;
 and to reproduce you run .
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.
	</description>
	<comments>
		<comment id='1' author='ravwojdyla' date='2018-05-16T17:50:15Z'>
		/CC &lt;denchmark-link:https://github.com/asimshankar&gt;@asimshankar&lt;/denchmark-link&gt;
, can you take a look?
		</comment>
		<comment id='2' author='ravwojdyla' date='2018-05-16T19:28:25Z'>
		Thanks for the report. I'm not familiar with Scala or sbt enough, so I apologize for any ignorance demonstrated below.
If I'm reading &lt;denchmark-link:https://github.com/spotify/scio/issues/1137#issuecomment-387801270&gt;spotify/scio#1137 (comment)&lt;/denchmark-link&gt;
 right, it seems that the problem is that when the test is running in the same JVM as  (i.e., when  is not set), then  is unable to correctly determine whether or not the shared library has already been loaded and ends up extracting the shared library to another location and loading it again, leading to the initialization conflict.
Resolving  &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/18397&gt;#18397&lt;/denchmark-link&gt;
 would help with that, but it seems the underlying issue in this particular case is that  isn't able to handle however  is managing class loading.
I'll try to look into it, but any suggestions for a better implementation of &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/3176ba990070cdde62b7cdf81747d70107d2e032/tensorflow/java/src/main/java/org/tensorflow/NativeLibrary.java#L119&gt;isLoaded&lt;/denchmark-link&gt;
 will be greatly appreciated.
		</comment>
		<comment id='3' author='ravwojdyla' date='2018-05-17T02:20:04Z'>
		Hmm...I'm not familiar with class loading/unloading in sbt, but I suspect the following:

The NativeLibrary class is being loaded multiple times, by different instances of a ClassLoader (does that sound like something sbt +test would do?)
The first time it is loaded it successfully loads the library (via System.loadLibrary(...)).
The second time around, I'm not clear on why the isLoaded check is failing, but it is (can that happen when a different ClassLoader is used?).

I tried a hack to replace the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/2c5e94c075454bf23bfa5a8a83e2d05011f4758e/tensorflow/java/src/main/java/org/tensorflow/NativeLibrary.java#L87&gt;temporary directory&lt;/denchmark-link&gt;
 with a fixed path, hoping that calling  on the same path as before would be a no-op (as per &lt;denchmark-link:https://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#loadLibrary(java.lang.String)&gt;javadoc&lt;/denchmark-link&gt;
), but that didn't help either and I saw . Which seems to suggest that there is some association between native libraries and class loaders?
For the record, what changed between version 1.3 and 1.4 was the the shared library was split into two (libtensorflow_framework.so and libtensorflow_jni.so) - with the latter depending on the former.
In the interim, I think adding fork := true in build.sbt would work around this problem.
I'll think about a solution, ideas are welcome.
		</comment>
		<comment id='4' author='ravwojdyla' date='2018-05-17T11:48:22Z'>
		I think sbt creates a different classloader to run each test class.
Maybe isLoaded could list the currently loaded libraries and look for the presence of libtensorflow ?
Something along the line of:
def isInClasspath: Boolean = {
  import scala.collection.JavaConverters._
  val libs = classOf[ClassLoader].getDeclaredField("loadedLibraryNames")
  libs.setAccessible(true)
  val loadedLibs = 
      libs.get(ClassLoader.getSystemClassLoader())
        .asInstanceOf[java.util.Vector[String]]
        .asScala
  loadedLibs.exists(_.contains("libtensorflow"))
}
		</comment>
		<comment id='5' author='ravwojdyla' date='2018-05-18T02:01:30Z'>
		JavaCPP keeps track of libraries already loaded from its cache, so using the &lt;denchmark-link:https://github.com/bytedeco/javacpp-presets/tree/master/tensorflow&gt;JavaCPP Presets for TensorFlow&lt;/denchmark-link&gt;
 is one way to work around this. The official Java API is also bundled these days:
&lt;denchmark-link:https://github.com/bytedeco/javacpp-presets/tree/1.4.1/tensorflow#documentation&gt;https://github.com/bytedeco/javacpp-presets/tree/1.4.1/tensorflow#documentation&lt;/denchmark-link&gt;

However, if sbt uses multiple class loaders, the classes of TensorFlow should be loaded by the system class loader. That's a limitation of Java and JNI.
		</comment>
		<comment id='6' author='ravwojdyla' date='2018-05-21T09:01:58Z'>
		I think I found the cause of the issue and I managed to workaround the bug for scio. See my comments on &lt;denchmark-link:https://github.com/spotify/scio/issues/1137&gt;spotify/scio#1137&lt;/denchmark-link&gt;
 and this PR: &lt;denchmark-link:https://github.com/spotify/scio/pull/1168&gt;spotify/scio#1168&lt;/denchmark-link&gt;
.
The problem is not SBT specific and anyone using a classloader hierarchy may experience it.
		</comment>
		<comment id='7' author='ravwojdyla' date='2018-05-21T17:46:39Z'>
		Thanks for the update &lt;denchmark-link:https://github.com/jto&gt;@jto&lt;/denchmark-link&gt;

I'm still not 100% sure about what the appropriate fix would be.
&lt;denchmark-link:https://github.com/saudet&gt;@saudet&lt;/denchmark-link&gt;
 : How does JavaCPP keep track of libraries already loaded from its cache across class loaders (as in, how does it ensure that the class that keeps track of these libraries is managed by the system classloader?)
		</comment>
		<comment id='8' author='ravwojdyla' date='2018-05-21T23:00:35Z'>
		It doesn't, class loaders isolate multiple versions of the same class from each other. We could do it through the file system I guess, but loading isn't the issue. The issue is that the life of the JNI library is associated with the class loader that loaded it, and it might get unloaded once that class loader is garbage collected. So the only real "fix" is to load any class that need JNI with the system class loader.
In a way though something like JavaCPP but standardized would make it easy to get all those details right in one place for as many libraries as we need, and then not worry about them at least. I wish the Panama team would understand the need for something like this, sigh...
		</comment>
		<comment id='9' author='ravwojdyla' date='2018-07-31T10:30:33Z'>
		I'm facing the Cannot register 2 metrics with the same name: /tensorflow/cc/saved_model/load_attempt_count problem both in JUnit tests and in the context of application servers where different applications (i.e., different classloaders) try to load a tensorflow model (tf version 1.6.0).
I'm trying to reproduce the issue programmatically, and what I experimented is:
When I load a TF model in Java in a simple main class with SavedModelBundle.load() (as in the following code snippet) all is working, and in /tmp only one tensorflow_jni directory is created.
&lt;denchmark-code&gt;public static void main(String[] args) throws InterruptedException {
	SavedModelBundle b = SavedModelBundle.load(mymodel_path, "serve");
	Thread.sleep(10000);	
}
&lt;/denchmark-code&gt;

When using classloaders, i experience the Fatal error that is causing the JVM to crash, and in /tmp i can find two different tensorflow_jni directories.
This is the code:
&lt;denchmark-code&gt;public class MyClassLoader extends ClassLoader {

	public MyClassLoader() {
	}

	@Override
	public Class&lt;?&gt; findClass(String name) {
		byte[] bt = loadClassData(name);
		return defineClass(name, bt, 0, bt.length);
	}

	private byte[] loadClassData(String className) {
		// read class
		InputStream is = getClass().getClassLoader().getResourceAsStream(className.replace(".", "/") + ".class");
		ByteArrayOutputStream byteSt = new ByteArrayOutputStream();
		// write into byte
		int len = 0;
		try {
			while ((len = is.read()) != -1) {
				byteSt.write(len);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		// convert into byte array
		return byteSt.toByteArray();
	}
}
&lt;/denchmark-code&gt;

and the main:
&lt;denchmark-code&gt;public class MultipleClassLoaderTest {
	public static void main(String[] args) throws NoSuchMethodException, SecurityException, IllegalArgumentException,
			InvocationTargetException, IllegalAccessException {
		MyClassLoader l1 = new MyClassLoader();
		
		String[] classesToLoad = new  String[] { "org.tensorflow.NativeLibrary", "org.tensorflow.TensorFlow" };
		for (String cl : classesToLoad) {
			l1.findClass(cl);			
		}

		Class&lt;?&gt; smb = l1.findClass("org.tensorflow.SavedModelBundle");
		Method loadModelMethod = smb.getMethod("load", new Class&lt;?&gt;[] { String.class, String[].class });
		Object loadedModel = loadModelMethod.invoke(null, new Object[] { "mymodel_path", new String[] {"serve"}});

		System.out.println("Done.");
	}

}
&lt;/denchmark-code&gt;

The strange thing is that in this last example I was expecting the fatal error when instantiating two MyClassLoader instances. Instead, the error is going to appear with only one instance of MyClassLoader. Is the "system" class loader also trying to load the library?
Has anyone addressed this issue in the context of application servers?
		</comment>
		<comment id='10' author='ravwojdyla' date='2018-07-31T10:42:07Z'>
		The system class loader won't load it unless you tell it to. There isn't any good solutions other than loading it as a shared JAR or something as per the instructions of the framework you're using...
		</comment>
		<comment id='11' author='ravwojdyla' date='2018-08-15T13:05:23Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/asimshankar&gt;@asimshankar&lt;/denchmark-link&gt;
: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='12' author='ravwojdyla' date='2018-08-18T17:28:39Z'>
		Marking as "Contributions Welcome" just so that we can keep this issue open for tracking, but as &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/issues/6166&gt;https://github.com/deeplearning4j/deeplearning4j/issues/6166&lt;/denchmark-link&gt;
 suggests it seems that a fix would require some JDK changes?
In the mean time, any contributions to update the documentation (updating &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/docs_src/install/install_java.md&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/docs_src/install/install_java.md&lt;/denchmark-link&gt;
) will be appreciated.
		</comment>
		<comment id='13' author='ravwojdyla' date='2018-08-25T06:52:40Z'>
		On Linux and Mac, when we have one large JNI-only binary with no symbols or resources shared globally across the process, it's also possible to rename the library before loading it with another class loader: &lt;denchmark-link:https://github.com/netty/netty/issues/7272&gt;netty/netty#7272&lt;/denchmark-link&gt;

		</comment>
		<comment id='14' author='ravwojdyla' date='2018-08-27T13:48:32Z'>
		Actually, we just need to rename the JNI library containing the wrappers, not TensorFlow itself. I think I've successfully worked around this limitation in JavaCPP with commit &lt;denchmark-link:https://github.com/bytedeco/javacpp/commit/dd57c2cca04c937de8031f5dfc896f1c45b59379&gt;bytedeco/javacpp@dd57c2c&lt;/denchmark-link&gt;
 and TensorFlow seems to work well when loaded from multiple class loaders with the JavaCPP Presets for TensorFlow, which comes bundled with the official Java API, but also maps the more complete C/C++ APIs: &lt;denchmark-link:https://github.com/bytedeco/javacpp-presets/tree/master/tensorflow&gt;https://github.com/bytedeco/javacpp-presets/tree/master/tensorflow&lt;/denchmark-link&gt;

I've tested this a bit on Tomcat and it seems to work fine!
This might not work as well when TensorFlow is linked statically to the JNI wrappers, as is the case with the official binaries that are deployed by Google, because TensorFlow would get loaded multiple times in the same process, but maybe it's fine. &lt;denchmark-link:https://github.com/asimshankar&gt;@asimshankar&lt;/denchmark-link&gt;
 Is this something supported by TensorFlow?
		</comment>
		<comment id='15' author='ravwojdyla' date='2019-05-21T08:18:10Z'>
		
I'm facing the Cannot register 2 metrics with the same name: /tensorflow/cc/saved_model/load_attempt_count problem both in JUnit tests and in the context of application servers where different applications (i.e., different classloaders) try to load a tensorflow model (tf version 1.6.0).
I'm trying to reproduce the issue programmatically, and what I experimented is:
When I load a TF model in Java in a simple main class with SavedModelBundle.load() (as in the following code snippet) all is working, and in /tmp only one tensorflow_jni directory is created.
public static void main(String[] args) throws InterruptedException {
	SavedModelBundle b = SavedModelBundle.load(mymodel_path, "serve");
	Thread.sleep(10000);	
}

When using classloaders, i experience the Fatal error that is causing the JVM to crash, and in /tmp i can find two different tensorflow_jni directories.
This is the code:
public class MyClassLoader extends ClassLoader {

	public MyClassLoader() {
	}

	@Override
	public Class&lt;?&gt; findClass(String name) {
		byte[] bt = loadClassData(name);
		return defineClass(name, bt, 0, bt.length);
	}

	private byte[] loadClassData(String className) {
		// read class
		InputStream is = getClass().getClassLoader().getResourceAsStream(className.replace(".", "/") + ".class");
		ByteArrayOutputStream byteSt = new ByteArrayOutputStream();
		// write into byte
		int len = 0;
		try {
			while ((len = is.read()) != -1) {
				byteSt.write(len);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		// convert into byte array
		return byteSt.toByteArray();
	}
}

and the main:
public class MultipleClassLoaderTest {
	public static void main(String[] args) throws NoSuchMethodException, SecurityException, IllegalArgumentException,
			InvocationTargetException, IllegalAccessException {
		MyClassLoader l1 = new MyClassLoader();
		
		String[] classesToLoad = new  String[] { "org.tensorflow.NativeLibrary", "org.tensorflow.TensorFlow" };
		for (String cl : classesToLoad) {
			l1.findClass(cl);			
		}

		Class&lt;?&gt; smb = l1.findClass("org.tensorflow.SavedModelBundle");
		Method loadModelMethod = smb.getMethod("load", new Class&lt;?&gt;[] { String.class, String[].class });
		Object loadedModel = loadModelMethod.invoke(null, new Object[] { "mymodel_path", new String[] {"serve"}});

		System.out.println("Done.");
	}

}

The strange thing is that in this last example I was expecting the fatal error when instantiating two MyClassLoader instances. Instead, the error is going to appear with only one instance of MyClassLoader. Is the "system" class loader also trying to load the library?
Has anyone addressed this issue in the context of application servers?

Imeet this issue now same as yours， have you solve this issue？
		</comment>
		<comment id='16' author='ravwojdyla' date='2020-01-24T21:34:32Z'>
		What's the status of this? You might have more luck with SIG-JVM, which is taking over tensorflow's Java functionality.
github.com/tensorflow/java
		</comment>
		<comment id='17' author='ravwojdyla' date='2020-01-25T01:08:18Z'>
		We're using JavaCPP there now, so this can be considered "fixed".
		</comment>
	</comments>
</bug>