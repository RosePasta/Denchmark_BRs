<bug id='6611' author='szb0' open_date='2017-01-03T02:47:31Z' closed_time='2017-06-16T16:48:04Z'>
	<summary>Word2Vec Number of Steps in Example</summary>
	<description>
In the word2vec basic example (master/tensorflow/examples/tutorials/word2vec/word2vec_basic.py) the number of steps is set to 100001. Is this an arbitrary number?
Should there not be a len(data) // (2*skip_window + 1  + (batch_size // num_skips)) number of steps to go through the data set?
	</description>
	<comments>
		<comment id='1' author='szb0' date='2017-01-06T17:08:21Z'>
		This type of question is better asked on &lt;denchmark-link:http://stackoverflow.com/questions/tagged/tensorflow&gt;Stackoverflow&lt;/denchmark-link&gt;
. Github issues are for bug reports and installation issues.
		</comment>
		<comment id='2' author='szb0' date='2017-01-06T17:30:29Z'>
		I believe that this is a bug in the code. Why is this better asked on stack overflow?
See line 185 in the word2vec_basic code and notice that the number of steps is set seemingly arbitrarily. The model does not iterate through even half of the dataset like this.
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/word2vec/word2vec_basic.py&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/word2vec/word2vec_basic.py&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/michaelisard&gt;@michaelisard&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='szb0' date='2017-01-06T17:47:31Z'>
		You are right this isn't a stackoverflow question: my apologies!
&lt;denchmark-link:https://github.com/sherrym&gt;@sherrym&lt;/denchmark-link&gt;
 I don't know if this is a bug or intentional for tutorial purposes but even if so I guess it needs a comment?
		</comment>
		<comment id='4' author='szb0' date='2017-01-20T20:33:29Z'>
		Shoudnt it be only : len(data) // (batch_size // num_skips) ?
		</comment>
		<comment id='5' author='szb0' date='2017-02-04T17:05:10Z'>
		My intuition was from looking at the generate_batch function and seeing when data_index was incremented.
The first loop increments data_index 2 * skip_window + 1 times.
The next for loop increments data_index (batch_size // num_skips) times.
So I use this to calculate the number of steps (2*skip_window + 1  + (batch_size // num_skips)).
The formula  len(data) // (batch_size // num_skips) allows the data index to be reset to 0 and we begin training at the beginning of the data again for a few steps.
With a batch size of 128, and a data_index that has a max of 4251300:
For the formula len(data) // (batch_size // num_skips):
('Est. Avg loss at step ', 60000, ': ', 13.664521800994873, ' data index 4020067')
('Est. Avg loss at step ', 61000, ': ', 12.748281367778779, ' data index 4087067')
('Est. Avg loss at step ', 62000, ': ', 13.45276182770729, ' data index 4154067')
('Est. Avg loss at step ', 63000, ': ', 12.419636116027831, ' data index 4221067')
('Est. Avg loss at step ', 64000, ': ', 12.700695453643799, ' data index 36766')
('Est. Avg loss at step ', 65000, ': ', 11.144913824081421, ' data index 103766')
('Est. Avg loss at step ', 66000, ': ', 11.105838320016861, ' data index 170766')
For the formula (2*skip_window + 1  + (batch_size // num_skips)):
('Est. Avg loss at step ', 59000, ': ', 13.633916213512421, ' data index 3953067')
('Est. Avg loss at step ', 60000, ': ', 14.011484805822372, ' data index 4020067')
('Est. Avg loss at step ', 61000, ': ', 12.926126554250716, ' data index 4087067')
('Est. Avg loss at step ', 62000, ': ', 13.53601130437851, ' data index 4154067')
('Est. Avg loss at step ', 63000, ': ', 12.231826926708221, ' data index 4221067')
		</comment>
		<comment id='6' author='szb0' date='2017-02-04T17:06:53Z'>
		Actually only looking at it after posting that comment it seems both are getting cut short on the whole data set and I am not sure why. I'll have to make sure I haven't messed something up.
Sorry one issue is that I am only printing loss every 1000 steps sorry for that - will run more carefully.
		</comment>
		<comment id='7' author='szb0' date='2017-02-04T17:41:50Z'>
		With finer grained output:
len(data) // (batch_size // num_skips):
('Est. Avg loss at step ', 63449, ': ', 0.015983373641967773, ' data index 4251150')
('Est. Avg loss at step ', 63450, ': ', 0.011031746864318848, ' data index 4251217')
('Est. Avg loss at step ', 63451, ': ', 0.013918094635009766, ' data index 4251284')
('Est. Avg loss at step ', 63452, ': ', 0.014092603683471679, ' data index 50')
('Est. Avg loss at step ', 63453, ': ', 0.0071760320663452146, ' data index 117')
('Est. Avg loss at step ', 63454, ': ', 0.014572011947631835, ' data index 184')
('Est. Avg loss at step ', 63455, ': ', 0.0071507630348205562, ' data index 251')
(2*skip_window + 1 + (batch_size // num_skips)):
('Est. Avg loss at step ', 63446, ': ', 0.025812118530273438, ' data index 4250949')
('Est. Avg loss at step ', 63447, ': ', 0.028827564239501953, ' data index 4251016')
('Est. Avg loss at step ', 63448, ': ', 0.014959125518798829, ' data index 4251083')
('Est. Avg loss at step ', 63449, ': ', 0.017365852355957032, ' data index 4251150')
('Est. Avg loss at step ', 63450, ': ', 0.010945444107055663, ' data index 4251217')
('Est. Avg loss at step ', 63451, ': ', 0.014031584739685059, ' data index 4251284')
		</comment>
		<comment id='8' author='szb0' date='2017-06-16T16:48:03Z'>
		Unfortunately I don't think a simple formula for the number of steps is sufficient to cover all cases.  The proposed formula does only one epoch, which is usually not what one wants.  Since this is a tutorial, I think a hardcoded number of steps is fine.
		</comment>
	</comments>
</bug>