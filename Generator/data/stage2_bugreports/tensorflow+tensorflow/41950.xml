<bug id='41950' author='beew' open_date='2020-08-01T01:40:50Z' closed_time='2020-09-14T20:06:19Z'>
	<summary>Keras 2.4.3 test missing cases</summary>
	<description>
System information

OS Platform and Distribution :Linux Ubuntu 16.04
TensorFlow installed from (source or binary): Source
TensorFlow version: 2.2.0
Python version: 3.8.5
Bazel version (if compiling from source): 3.1.0
GCC/Compiler version (if compiling from source): 5.4.0
CUDA/cuDNN version:  Cuda10.0, cudnn 7.6.5.32
GPU model and memory: GTX1070 , 8G

Keras version 2.4.3
I have a mnist script to test my tensorflow installation
&lt;denchmark-code&gt;'''Trains a simple convnet on the MNIST dataset.
Gets to 99.25% test accuracy after 12 epochs
(there is still a lot of margin for parameter tuning).
16 seconds per epoch on a GRID K520 GPU.
'''

import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K

batch_size = 128
num_classes = 10
epochs = 12

# input image dimensions
img_rows, img_cols = 28, 28

# the data, split between train and test sets
(x_train, y_train), (x_test, y_test) = mnist.load_data()

if K.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
    input_shape = (1, img_rows, img_cols)
else:
    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
    input_shape = (img_rows, img_cols, 1)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# convert class vectors to binary class matrices
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=input_shape))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adadelta(),
              metrics=['accuracy'])

model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test))
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

&lt;/denchmark-code&gt;

Describe the current behavior
A lot of samples are lost, here is the output of running the script with keras 2.4.3 with tensoflow backend [in my setup python=python3] Comparing to expected behaviour below (with kereas 2.3.1), there are only 496 samples in an epoch instead of 6000
&lt;denchmark-code&gt;python /home/bernard/python-dev/test/mnist_cnn_demo.py
2020-07-31 21:34:53.674307: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
x_train shape: (60000, 28, 28, 1)
60000 train samples
10000 test samples
2020-07-31 21:34:55.075415: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2020-07-31 21:34:55.104800: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:34:55.105872: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1561] Found device 0 with properties: 
pciBusID: 0000:01:00.0 name: GeForce GTX 1070 computeCapability: 6.1
coreClock: 1.695GHz coreCount: 16 deviceMemorySize: 7.92GiB deviceMemoryBandwidth: 238.66GiB/s
2020-07-31 21:34:55.105894: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2020-07-31 21:34:55.107057: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2020-07-31 21:34:55.107952: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10.0
2020-07-31 21:34:55.108219: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10.0
2020-07-31 21:34:55.109467: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10.0
2020-07-31 21:34:55.110373: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10.0
2020-07-31 21:34:55.113179: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2020-07-31 21:34:55.113334: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:34:55.113952: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:34:55.114509: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1703] Adding visible gpu devices: 0
2020-07-31 21:34:55.121289: I tensorflow/core/platform/profile_utils/cpu_utils.cc:102] CPU Frequency: 2904000000 Hz
2020-07-31 21:34:55.121631: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x42e2280 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2020-07-31 21:34:55.121650: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
2020-07-31 21:34:55.182191: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:34:55.182711: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x436c5e0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:
2020-07-31 21:34:55.182743: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): GeForce GTX 1070, Compute Capability 6.1
2020-07-31 21:34:55.182917: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:34:55.183371: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1561] Found device 0 with properties: 
pciBusID: 0000:01:00.0 name: GeForce GTX 1070 computeCapability: 6.1
coreClock: 1.695GHz coreCount: 16 deviceMemorySize: 7.92GiB deviceMemoryBandwidth: 238.66GiB/s
2020-07-31 21:34:55.183411: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2020-07-31 21:34:55.183441: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2020-07-31 21:34:55.183470: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10.0
2020-07-31 21:34:55.183482: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10.0
2020-07-31 21:34:55.183493: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10.0
2020-07-31 21:34:55.183516: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10.0
2020-07-31 21:34:55.183545: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2020-07-31 21:34:55.183616: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:34:55.184210: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:34:55.184688: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1703] Adding visible gpu devices: 0
2020-07-31 21:34:55.184751: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2020-07-31 21:34:55.665812: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1102] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-07-31 21:34:55.665860: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1108]      0 
2020-07-31 21:34:55.665888: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1121] 0:   N 
2020-07-31 21:34:55.666241: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:34:55.666841: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:34:55.667435: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1247] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 6988 MB memory) -&gt; physical GPU (device: 0, name: GeForce GTX 1070, pci bus id: 0000:01:00.0, compute capability: 6.1)
Epoch 1/12
2020-07-31 21:34:56.279338: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2020-07-31 21:34:56.477766: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
469/469 [==============================] - 4s 8ms/step - loss: 2.2858 - accuracy: 0.1543 - val_loss: 2.2619 - val_accuracy: 0.2190
Epoch 2/12
469/469 [==============================] - 3s 7ms/step - loss: 2.2462 - accuracy: 0.2411 - val_loss: 2.2135 - val_accuracy: 0.3888
Epoch 3/12
469/469 [==============================] - 3s 7ms/step - loss: 2.1951 - accuracy: 0.3359 - val_loss: 2.1482 - val_accuracy: 0.5546
Epoch 4/12
469/469 [==============================] - 3s 7ms/step - loss: 2.1254 - accuracy: 0.4195 - val_loss: 2.0573 - val_accuracy: 0.6437
Epoch 5/12
469/469 [==============================] - 3s 7ms/step - loss: 2.0294 - accuracy: 0.4904 - val_loss: 1.9342 - val_accuracy: 0.6910
Epoch 6/12
469/469 [==============================] - 3s 7ms/step - loss: 1.9057 - accuracy: 0.5410 - val_loss: 1.7749 - val_accuracy: 0.7224
Epoch 7/12
469/469 [==============================] - 3s 7ms/step - loss: 1.7500 - accuracy: 0.5860 - val_loss: 1.5826 - val_accuracy: 0.7497
Epoch 8/12
469/469 [==============================] - 3s 7ms/step - loss: 1.5807 - accuracy: 0.6156 - val_loss: 1.3772 - val_accuracy: 0.7735
Epoch 9/12
469/469 [==============================] - 3s 7ms/step - loss: 1.4153 - accuracy: 0.6406 - val_loss: 1.1840 - val_accuracy: 0.7954
Epoch 10/12
469/469 [==============================] - 3s 7ms/step - loss: 1.2699 - accuracy: 0.6618 - val_loss: 1.0213 - val_accuracy: 0.8093
Epoch 11/12
469/469 [==============================] - 3s 7ms/step - loss: 1.1508 - accuracy: 0.6834 - val_loss: 0.8939 - val_accuracy: 0.8220
Epoch 12/12
469/469 [==============================] - 3s 7ms/step - loss: 1.0579 - accuracy: 0.7003 - val_loss: 0.7974 - val_accuracy: 0.8316
Test loss: 0.7974222898483276
Test accuracy: 0.83160001039505
&lt;/denchmark-code&gt;

Describe the expected behavior
Downgraded keras to version 2.3.1 and run the script again, the outcome is consistent with older versions of keras before
Note that Train on 60000 samples, validate on 10000 samples is missing from the output above using keras 2.4.3.
&lt;denchmark-code&gt;python /home/bernard/python-dev/test/mnist_cnn_demo.py
Using TensorFlow backend.
x_train shape: (60000, 28, 28, 1)
60000 train samples
10000 test samples
2020-07-31 21:17:44.616490: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2020-07-31 21:17:44.641796: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:17:44.643804: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1561] Found device 0 with properties: 
pciBusID: 0000:01:00.0 name: GeForce GTX 1070 computeCapability: 6.1
coreClock: 1.695GHz coreCount: 16 deviceMemorySize: 7.92GiB deviceMemoryBandwidth: 238.66GiB/s
2020-07-31 21:17:44.644032: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2020-07-31 21:17:44.645151: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2020-07-31 21:17:44.646009: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10.0
2020-07-31 21:17:44.646247: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10.0
2020-07-31 21:17:44.647392: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10.0
2020-07-31 21:17:44.648247: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10.0
2020-07-31 21:17:44.650968: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2020-07-31 21:17:44.651097: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:17:44.651925: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:17:44.652674: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1703] Adding visible gpu devices: 0
2020-07-31 21:17:44.658691: I tensorflow/core/platform/profile_utils/cpu_utils.cc:102] CPU Frequency: 2904000000 Hz
2020-07-31 21:17:44.659154: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x5cb4a20 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2020-07-31 21:17:44.659167: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
2020-07-31 21:17:44.718817: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:17:44.719399: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x5d43f30 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:
2020-07-31 21:17:44.719434: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): GeForce GTX 1070, Compute Capability 6.1
2020-07-31 21:17:44.719622: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:17:44.720238: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1561] Found device 0 with properties: 
pciBusID: 0000:01:00.0 name: GeForce GTX 1070 computeCapability: 6.1
coreClock: 1.695GHz coreCount: 16 deviceMemorySize: 7.92GiB deviceMemoryBandwidth: 238.66GiB/s
2020-07-31 21:17:44.720286: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2020-07-31 21:17:44.720299: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2020-07-31 21:17:44.720330: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10.0
2020-07-31 21:17:44.720343: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10.0
2020-07-31 21:17:44.720354: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10.0
2020-07-31 21:17:44.720379: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10.0
2020-07-31 21:17:44.720390: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2020-07-31 21:17:44.720463: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:17:44.721061: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:17:44.721531: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1703] Adding visible gpu devices: 0
2020-07-31 21:17:44.721574: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2020-07-31 21:17:44.722447: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1102] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-07-31 21:17:44.722457: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1108]      0 
2020-07-31 21:17:44.722479: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1121] 0:   N 
2020-07-31 21:17:44.722716: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:17:44.723177: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-07-31 21:17:44.724393: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1247] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 7088 MB memory) -&gt; physical GPU (device: 0, name: GeForce GTX 1070, pci bus id: 0000:01:00.0, compute capability: 6.1)
**Train on 60000 samples, validate on 10000 samples**
Epoch 1/12
2020-07-31 21:17:45.945316: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2020-07-31 21:17:46.131405: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
Epoch 1/12
2020-07-31 21:24:25.101205: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2020-07-31 21:24:25.295790: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
60000/60000 [==============================] - 5s 91us/step - loss: 0.2614 - accuracy: 0.9188 - val_loss: 0.0578 - val_accuracy: 0.9811
Epoch 2/12
60000/60000 [==============================] - 4s 67us/step - loss: 0.0910 - accuracy: 0.9730 - val_loss: 0.0411 - val_accuracy: 0.9857
Epoch 3/12
60000/60000 [==============================] - 4s 67us/step - loss: 0.0656 - accuracy: 0.9805 - val_loss: 0.0407 - val_accuracy: 0.9862
Epoch 4/12
60000/60000 [==============================] - 4s 67us/step - loss: 0.0538 - accuracy: 0.9837 - val_loss: 0.0311 - val_accuracy: 0.9898
Epoch 5/12
60000/60000 [==============================] - 4s 67us/step - loss: 0.0483 - accuracy: 0.9850 - val_loss: 0.0288 - val_accuracy: 0.9904
Epoch 6/12
60000/60000 [==============================] - 4s 67us/step - loss: 0.0412 - accuracy: 0.9878 - val_loss: 0.0291 - val_accuracy: 0.9905
Epoch 7/12
60000/60000 [==============================] - 4s 67us/step - loss: 0.0381 - accuracy: 0.9888 - val_loss: 0.0283 - val_accuracy: 0.9902
Epoch 8/12
60000/60000 [==============================] - 4s 67us/step - loss: 0.0354 - accuracy: 0.9892 - val_loss: 0.0286 - val_accuracy: 0.9914
Epoch 9/12
60000/60000 [==============================] - 4s 68us/step - loss: 0.0330 - accuracy: 0.9900 - val_loss: 0.0275 - val_accuracy: 0.9916
Epoch 10/12
60000/60000 [==============================] - 4s 74us/step - loss: 0.0314 - accuracy: 0.9909 - val_loss: 0.0276 - val_accuracy: 0.9916
Epoch 11/12
60000/60000 [==============================] - 5s 77us/step - loss: 0.0300 - accuracy: 0.9907 - val_loss: 0.0248 - val_accuracy: 0.9917
Epoch 12/12
60000/60000 [==============================] - 5s 77us/step - loss: 0.0264 - accuracy: 0.9920 - val_loss: 0.0292 - val_accuracy: 0.9907
Test loss: 0.02923813719809523
Test accuracy: 0.9907000064849854
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='beew' date='2020-08-04T07:21:00Z'>
		&lt;denchmark-link:https://github.com/beew&gt;@beew&lt;/denchmark-link&gt;

Could you please try "tf.keras" instead of "keras" and let us know.
		</comment>
		<comment id='2' author='beew' date='2020-08-06T04:44:55Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;

No change. But may be I get you wrong, replace keras by tf.keras where? Everywhere?
		</comment>
		<comment id='3' author='beew' date='2020-08-06T06:21:53Z'>
		&lt;denchmark-link:https://github.com/beew&gt;@beew&lt;/denchmark-link&gt;

Yes beew everywhere in the code.
		</comment>
		<comment id='4' author='beew' date='2020-08-07T14:14:54Z'>
		I have updated the script but there is no change, still the same wrong output.
But the interesting thing is with this script both keras2.4.3 and  keras2.3.1 gave the same wrong result in exactly the same way so maybe the problem is tf.keras. It seems that keras-2.4.3 somehow switches to tf.keras automatically but keras-2.3.1 doesn't unless it is explicit like in the modified script, so 2.3.1 works for the unmodified script but 2.4.3 fails in the same way.
Here is the updated script
&lt;denchmark-code&gt;import tensorflow as tf

from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras import backend as K

batch_size = 128
num_classes = 10
epochs = 12

# input image dimensions
img_rows, img_cols = 28, 28

# the data, split between train and test sets
(x_train, y_train), (x_test, y_test) = mnist.load_data()

if K.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
    input_shape = (1, img_rows, img_cols)
else:
    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
    input_shape = (img_rows, img_cols, 1)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# convert class vectors to binary class matrices
y_train = tf.keras.utils.to_categorical(y_train, num_classes)
y_test = tf.keras.utils.to_categorical(y_test, num_classes)

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=input_shape))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

model.compile(loss=tf.keras.losses.categorical_crossentropy,
              optimizer=tf.keras.optimizers.Adadelta(),
              metrics=['accuracy'])

model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test))
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='beew' date='2020-08-07T16:57:27Z'>
		&lt;denchmark-link:https://github.com/ymodak&gt;@ymodak&lt;/denchmark-link&gt;

I am able to replicate this, please find the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/171fc7a89e6d68f5a7bd669f5f4e28a2/untitled337.ipynb&gt;gist here&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='beew' date='2020-08-17T20:05:47Z'>
		I think this is correct since we have steps_per_epoch as 469;
steps_per_epoch (469) = #total no of samples (60000) / batch_size (128)
In earlier versions only the number of samples are shown (60000).
		</comment>
		<comment id='7' author='beew' date='2020-08-22T00:21:35Z'>
		&lt;denchmark-link:https://github.com/ymodak&gt;@ymodak&lt;/denchmark-link&gt;

But what about the test accuracy?
Before it was 99% with keras 2.4.3 it is only 83%, the loss was 3% with Keras2.3.1 vs 79% with Keras2.4.3 Something doesn't look right.
		</comment>
		<comment id='8' author='beew' date='2020-09-14T20:06:18Z'>
		I tested with keras 2.3.1 and get similar accuracy of 83%.
See the &lt;denchmark-link:https://colab.research.google.com/gist/ymodak/1bd8ba79b38dad7798ed9e197fa9fcb7/untitled337.ipynb&gt;gist&lt;/denchmark-link&gt;
 for your reference.
Closing this issue since the original topic is resolved. Thanks!
		</comment>
		<comment id='9' author='beew' date='2020-09-14T20:06:20Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41950&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41950&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='beew' date='2020-09-18T06:28:38Z'>
		
I tested with keras 2.3.1 and get similar accuracy of 83%.
See the gist for your reference.
Closing this issue since the original topic is resolved. Thanks!

Well I don't think you really resolve the issue, it probably just means there is something wrong in using tf.keras in place of keras and it still seems like something wrong considering that the error and loss cases are much bigger than before.
		</comment>
		<comment id='11' author='beew' date='2020-09-29T18:44:21Z'>
		&lt;denchmark-link:https://github.com/beew&gt;@beew&lt;/denchmark-link&gt;
 Can you please share a gist showing the discrepancy in accuracy across various versions?
I have tested with Keras 2.3.1 and got accuracy of 83%, whereas with TF 2.3 and Keras - 2.4.3 it is 86% . Thus, I see better accuracy with later version.
Also which error did you encounter?
May be I am missing something here. Thanks!
		</comment>
	</comments>
</bug>