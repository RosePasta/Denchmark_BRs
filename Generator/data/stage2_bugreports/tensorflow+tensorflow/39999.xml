<bug id='39999' author='lkubin' open_date='2020-05-29T16:36:17Z' closed_time='2020-12-01T18:10:31Z'>
	<summary>Wrong output shape with ellipsis in tflite from keras models</summary>
	<description>
I'm working on converting a model using tflite, starting from a keras model, and I noticed that if I use ellipsis to slice up tensors something weird happens: once I loaded the tflite model inside the interpreter, before allocating tensors (through interpreter.allocate_tensors) calling the function interpreter.get_output_details() gives as output shape the same one that I got with my keras model, but after the tensor allocations interpreter.get_output_details() gives an output shape different from the one of the keras model. This does not happen if I use normal slicing instead of ellipsis.
I create a toy example for replicating this behavior:
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
from tensorflow.keras import layers
from tensorflow import keras

input_layer = keras.Input(shape=(3, 4))
X = layers.Dense(10)(input_layer)
X = layers.Dense(1)(X)[..., 0]      #      &lt;-----------  with ellipsis
model = keras.Model(input_layer, X)
loss = keras.losses.MeanSquaredError()
optimizer = keras.optimizers.Adam()
model.compile(optimizer, loss=loss)
model.fit(
    np.random.random((10, 3, 4)).astype(np.float32),
    np.ones((10, 3)).astype(np.float32),
    epochs=10,
    batch_size=5,
)
tflite_model_multi = tf.lite.TFLiteConverter.from_keras_model(
    model
)
tflite_model_multi = tflite_model_multi.convert()

with open('my_model.tflite', 'wb') as fin:
    fin.write(tflite_model_multi)
interpreter = tf.lite.Interpreter(model_path='my_model.tflite')
print(interpreter.get_output_details())
interpreter.allocate_tensors()
print(interpreter.get_output_details())
&lt;/denchmark-code&gt;

outputs:
&lt;denchmark-code&gt;[{'name': 'Identity', 'index': 14, 'shape': array([1, 3], dtype=int32), 'dtype': &lt;class 'numpy.float32'&gt;, 'quantization': (0.0, 0), 'quantization_parameters': {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}}]
[{'name': 'Identity', 'index': 14, 'shape': array([1, 1], dtype=int32), 'dtype': &lt;class 'numpy.float32'&gt;, 'quantization': (0.0, 0), 'quantization_parameters': {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}}]
&lt;/denchmark-code&gt;

Instead if in the same chunk of code I use slices:
&lt;denchmark-code&gt;...
X = layers.Dense(1)(X)[:, :, 0]      #      &lt;-----------  without ellipsis
...
&lt;/denchmark-code&gt;

it outputs
&lt;denchmark-code&gt;[{'name': 'Identity', 'index': 14, 'shape': array([1, 3], dtype=int32), 'shape_signature': array([1, 3], dtype=int32), 'dtype': &lt;class 'numpy.float32'&gt;, 'quantization': (0.0, 0), 'quantization_parameters': {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}, 'sparsity_parameters': {}}]
[{'name': 'Identity', 'index': 14, 'shape': array([1, 3], dtype=int32), 'shape_signature': array([1, 3], dtype=int32), 'dtype': &lt;class 'numpy.float32'&gt;, 'quantization': (0.0, 0), 'quantization_parameters': {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}, 'sparsity_parameters': {}}]
&lt;/denchmark-code&gt;

I don't know if this behavior is wanted, but likely one can spend easily a couple of hours debugging around in order to find it.
	</description>
	<comments>
		<comment id='1' author='lkubin' date='2020-06-04T14:41:19Z'>
		&lt;denchmark-link:https://github.com/lkubin&gt;@lkubin&lt;/denchmark-link&gt;

I ran the code shared and face a different error, please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/3853ecfcd242b09241a3add0aa25ced4/untitled205.ipynb&gt;gist here&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='lkubin' date='2020-06-04T15:55:45Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 I see, the error is expected and in this case it is needed, the fact is that I'm not facing that error. The only difference between my environment and your one is that I'm using python 3.7.4 and tensorflow 2.2.0 running on ubuntu 18.04. I have an environment running 3.6.10 and even on that I cannot reproduce the exception that is throwing to you, the weird part is that I created a brand new environment with python 3.6.9 and even on that one the error message is not shown.
		</comment>
		<comment id='3' author='lkubin' date='2020-06-04T16:13:31Z'>
		I just run the same code with tensorflow==2.1.0 and I confirm that the error is raised as expected
		</comment>
		<comment id='4' author='lkubin' date='2020-06-11T05:49:23Z'>
		As the error suggests: RuntimeError: tensorflow/lite/kernels/strided_slice.cc ellipsis_mask is not implemented yet.Node number 8 (STRIDED_SLICE) failed to prepare.
We do not support models where the StridedSlice op has the ellipsis_mask field set to a non-zero value. In the  'with ellipsis' case, this field has a value of 1 as result of which the error is raised.
Marking this as resolved.
		</comment>
		<comment id='5' author='lkubin' date='2020-06-11T05:49:24Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39999&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39999&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='lkubin' date='2020-06-11T06:58:41Z'>
		&lt;denchmark-link:https://github.com/MeghnaNatraj&gt;@MeghnaNatraj&lt;/denchmark-link&gt;
  the problem is that I didn't receive that error message.  The message is fine and it is pretty explicit about what's going on.
The tag here is wrong I'm not running tf 2.1 but tf 2.2, in tf 2.1 the error message correctly appears, in version 2.2 it doesn't.
see
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/39999#issuecomment-638946876&gt;#39999 (comment)&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='lkubin' date='2020-06-12T23:45:25Z'>
		&lt;denchmark-link:https://github.com/lkubin&gt;@lkubin&lt;/denchmark-link&gt;
  You are right! Sorry I think I misunderstood the problem before. I was able to reproduce the issue. There is no error in 2.2 (and instead the output tensor shape is incorrect after being allocated in the interpreter) but I did successfully get an error in 2.1 and 2.2rc4. I'll update this issue once I figure out the right way to resolve this problem.
		</comment>
		<comment id='8' author='lkubin' date='2020-12-01T18:10:33Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39999&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39999&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>