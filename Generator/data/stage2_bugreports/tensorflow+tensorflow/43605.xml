<bug id='43605' author='fuhailin' open_date='2020-09-27T13:52:41Z' closed_time='2020-12-04T23:30:50Z'>
	<summary>TF2.3 load subclassing model within tf.feature_column layer get ValueError: Could not find matching function to call loaded from the SavedModel</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS Catalina
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: None
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v2.3.0-54-gfcc4b966f1 2.3.1
Python version: Python 3.7.4
Bazel version (if compiling from source): None
GCC/Compiler version (if compiling from source): None
CUDA/cuDNN version: None
GPU model and memory: None

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Describe the current behavior
I am trying to create a custom classification model using Tensorflow2.3 through tf.keras.Model subclassing method, in the subclass model init function, i use tf.feature_column layer to precess features. going through all of above part, i can train, save and reload the Saved_model, but when i use the reload model to do inference, i get the following error:
&lt;denchmark-code&gt;ValueError: Could not find matching function to call loaded from the SavedModel. Got:
  Positional arguments (3 total):
    * {'age': [35], 'education': ['Bachelors']}
    * False
    * None
  Keyword arguments: {}

Expected these arguments to match one of the following 4 option(s):

Option 1:
  Positional arguments (3 total):
    * {'education': TensorSpec(shape=(None, 1), dtype=tf.string, name='education'), 'age': TensorSpec(shape=(None, 1), dtype=tf.int64, name='age')}
    * True
    * None
  Keyword arguments: {}

Option 2:
  Positional arguments (3 total):
    * {'age': TensorSpec(shape=(None, 1), dtype=tf.int64, name='age'), 'education': TensorSpec(shape=(None, 1), dtype=tf.string, name='education')}
    * False
    * None
  Keyword arguments: {}

Option 3:
  Positional arguments (3 total):
    * {'age': TensorSpec(shape=(None, 1), dtype=tf.int64, name='inputs/age'), 'education': TensorSpec(shape=(None, 1), dtype=tf.string, name='inputs/education')}
    * False
    * None
  Keyword arguments: {}

Option 4:
  Positional arguments (3 total):
    * {'education': TensorSpec(shape=(None, 1), dtype=tf.string, name='inputs/education'), 'age': TensorSpec(shape=(None, 1), dtype=tf.int64, name='inputs/age')}
    * True
    * None
  Keyword arguments: {}
&lt;/denchmark-code&gt;

When I try to create model with tf.Keras.sequential class or without tf.feature_column layer, every thing works fine, so how can I use the reloaded tf.Keras.subclassing model within tf.feature_column layer to do inferenceï¼Ÿ
This puzzled me for days.
Describe the expected behavior
tf.Keras.subclassing model within tf.feature_column layer can do inference like sequential model.
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
Jupyer minimum demo:
https://www.kaggle.com/hailinfufu/notebookadf7121b80
Here is a minimal demo to reproduce my problem:
import pathlib
import time

import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split

__SELECT_COLUMN_NAMES = ['age', 'education', 'income_bracket']


def get_train_test_pandas_data():
    # data can be download from: https://www.kaggle.com/uciml/adult-census-income?select=adult.csv
    census = pd.read_csv("adult_data.csv")

    census['income_bracket'] = census['income_bracket'].apply(lambda label: 0 if label == ' &lt;=50K' else 1)
    census = census[__SELECT_COLUMN_NAMES]

    y_labels = census.pop('income_bracket')
    x_data = census

    x_train, x_test, y_train, y_test = train_test_split(x_data, y_labels, test_size=0.3)

    return x_train, x_test, y_train, y_test


def get_feature_columns():
    age = tf.feature_column.numeric_column("age", dtype=tf.int64)
    education = tf.feature_column.embedding_column(
        tf.feature_column.categorical_column_with_hash_bucket("education", hash_bucket_size=1000),
        dimension=100)

    feat_cols = [age, education]

    return feat_cols


if (tf.__version__ &lt; '2.0'):
    tf.enable_eager_execution()

x_train, _, y_train, _ = get_train_test_pandas_data()

dataset = tf.data.Dataset.from_tensor_slices((dict(x_train), y_train))

dataset = dataset.shuffle(len(x_train)).batch(4)

feat_cols = get_feature_columns()


class mymodel(tf.keras.Model):
    def __init__(self):
        super(mymodel, self).__init__()
        self.layer1 = tf.keras.layers.DenseFeatures(feature_columns=feat_cols)
        self.layer2 = tf.keras.layers.Dense(10, activation='relu')
        self.layer3 = tf.keras.layers.Dense(10, activation='relu')
        self.layer4 = tf.keras.layers.Dense(1, activation='sigmoid')

    @tf.function
    def call(self, inputs, training=None, mask=None):
        x = self.layer1(inputs)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)
        return x


model = mymodel()

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.fit(dataset, epochs=1)


__SAVED_MODEL_DIR = './saved_models/census_keras/{}'.format(int(time.time()))
pathlib.Path(__SAVED_MODEL_DIR).mkdir(parents=True, exist_ok=True)

tf.saved_model.save(model, export_dir=__SAVED_MODEL_DIR)
you can replace model = mymodel() with
&lt;denchmark-code&gt;model = tf.keras.Sequential([
    tf.keras.layers.DenseFeatures(feature_columns=feat_cols),
    tf.keras.layers.Dense(10, activation='relu'),
    tf.keras.layers.Dense(10, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
&lt;/denchmark-code&gt;

that will work fine.
After trained and saved the model, i try to load the SavedModel to do predict:
import tensorflow as tf

# loaded_model = tf.keras.models.load_model("./saved_models/census_keras/1601196783")  # tf.saved_model.load("saved/1")
loaded_model = tf.keras.models.load_model("./saved_models/census_keras/1601196783")

y_pred = loaded_model.call({"age": [35],
                            "education": ["Bachelors"]})
print(y_pred)


y_pred = loaded_model.call({"age": [40],
                            "education": ["Assoc-voc"]})
print(y_pred)
Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='fuhailin' date='2020-09-28T07:07:36Z'>
		&lt;denchmark-link:https://github.com/fuhailin&gt;@fuhailin&lt;/denchmark-link&gt;

Please provide with all dependencies to run the code shared or if possible share a colab gist with issue reported.
I ran the code shared and face &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/05a756219252f40dc5e4b24b39d3ec32/untitled418.ipynb&gt;this error&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='fuhailin' date='2020-09-28T07:50:19Z'>
		
@fuhailin
Please provide with all dependencies to run the code shared or if possible share a colab gist with issue reported.
I ran the code shared and face this error

Updated, please check this colab : &lt;denchmark-link:https://colab.research.google.com/gist/fuhailin/32e3b834cff5856c53d719fe877414cb/untitled418.ipynb&gt;https://colab.research.google.com/gist/fuhailin/32e3b834cff5856c53d719fe877414cb/untitled418.ipynb&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='fuhailin' date='2020-09-28T15:17:50Z'>
		&lt;denchmark-link:https://github.com/fuhailin&gt;@fuhailin&lt;/denchmark-link&gt;

I cannot download the csv, please share the dataset for us to replicate the issue.
		</comment>
		<comment id='4' author='fuhailin' date='2020-09-29T02:58:22Z'>
		
@fuhailin
I cannot download the csv, please share the dataset for us to replicate the issue.

&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;

I have created a &lt;denchmark-link:https://gist.githubusercontent.com/fuhailin/673b326fb4e7f653a35461326c700d2e/raw/341b36e21fb327af318842b4dad4a844cc5bfb60/adult_data.csv&gt;gist file&lt;/denchmark-link&gt;
 to load, please check that &lt;denchmark-link:https://colab.research.google.com/gist/fuhailin/32e3b834cff5856c53d719fe877414cb/untitled418.ipynb&gt;colab&lt;/denchmark-link&gt;
 again.
		</comment>
		<comment id='5' author='fuhailin' date='2020-10-05T16:10:43Z'>
		I am able to replicate the issue reported, please find the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/77742b1c6572850ce87a6f8db0d1c604/untitled418.ipynb&gt;gist here&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='fuhailin' date='2020-12-04T23:30:50Z'>
		Hi there--
You can do inference with your subclassed tf.keras.Model loaded_model by:
&lt;denchmark-code&gt;y_pred = loaded_model.call({"age": [[35]], "education": [["Bachelors"]]})
y_pred = loaded_model.call({"age": [[40]], "education": [["Assoc-voc"]]})
&lt;/denchmark-code&gt;

or
&lt;denchmark-code&gt;y_pred = loaded_model.call({"age": [[35], [40]],  "education": [["Bachelors"], ["Assoc-voc"]]})
&lt;/denchmark-code&gt;

The error message you received stated that it was expecting arguments "{'age': TensorSpec(shape=(None, 1), dtype=tf.int64, name='age'), 'education': TensorSpec(shape=(None, 1), dtype=tf.string, name='education')}", so the shape of your inputs should be of shape (None, 1).
You can check the shape by:
&lt;denchmark-code&gt;a = tf.constant([35])
b = tf.constant([[35]])
c = tf.constant([[35],[40]])
a.shape # TensorShape([1])
b.shape # TensorShape([1, 1])
c.shape  # TensorShape([2, 1])
&lt;/denchmark-code&gt;

The None in the TensorSpec shape parameter means that the batch size is variable.
Closing this issue, but please reopen if I overlooked something. Thanks.
		</comment>
		<comment id='7' author='fuhailin' date='2020-12-04T23:30:51Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43605&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43605&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>