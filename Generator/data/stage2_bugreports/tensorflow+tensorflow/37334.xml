<bug id='37334' author='shiningrain' open_date='2020-03-05T06:25:48Z' closed_time='2020-03-23T19:51:45Z'>
	<summary>Tensorflow can build and even run a model with `Conv2D('Kernel_size=0' )`</summary>
	<description>
System information

Have I written custom code (as opposed to using example directory):
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):  Win 10 &amp; Linux Ubuntu18.04
Tensorflow backend (yes/no): yes
TensorFlow version:1.15.0(CPU)
Python version: 3.6.9
CUDA/cuDNN version: -
GPU model and memory: -

Describe the current behavior
When I build a model with unreasonable parameters  Conv2D(kernel_size=0) on TensorFlow, it can run normally and even generate/save an model . When I use this model to predict, Tensorflow spend about 5 minutes and still can't return an output.
Conv2D(kernel_size=0)  seems like a corner case because in the convolution operation, it is impossible to calculate with kernel_size=0
Does kernel_size=0 have some special meaning in Tensorflow? I have not found any description about this case in documents. If no special meaning, Should Tensorflow set a check for such unreasonable parameters to avoid the risks and incorrect usages in the model?
Code to reproduce the issue
&lt;denchmark-code&gt;import os
import numpy as np
import keras.layers as L
from keras.models import load_model
from keras.engine import Model, Input

kwargs = {'filters': 19, 'kernel_size': 0, 'padding': 'valid', 'strides': (2, 4), 'dilation_rate': 1, 'data_format': 'channels_first'}
input = (10 * np.random.random((1,32,32,16)))
layer = L.convolutional.Conv2D(**kwargs)
x = Input(batch_shape=input.shape)
y = layer(x)
bk_model = Model(x, y)
model_path = os.path.join('./', 'model.h5')
bk_model.save(model_path, bk_model)
model = load_model(model_path)
output = model.predict(input)
print('finish')
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='shiningrain' date='2020-03-05T07:58:25Z'>
		&lt;denchmark-link:https://github.com/shiningrain&gt;@shiningrain&lt;/denchmark-link&gt;

I have run the code shared by you and it executes as expected, please find&lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/002a441ed92036884b41ae5a9f104210/37334.ipynb&gt; gist here&lt;/denchmark-link&gt;

For kernel_size related information please refer to &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D#arguments_2&gt;this link&lt;/denchmark-link&gt;
, also please refer to this link if it &lt;denchmark-link:https://github.com/cwehmeyer/pydpc/issues/2#issuecomment-510912684&gt;helps&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='shiningrain' date='2020-03-05T09:03:21Z'>
		
@shiningrain
I have run the code shared by you and it executes as expected, please find gist here
For kernel_size related information please refer to this link, also please refer to this link if it helps

Hi!  &lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;

Thanks for your help!
However, I still have some problems with your reply.

I have read your reproduced code, but the kernel_size in it is set to 1, which is not the problem  I want to explain. I have also tested with kernel_size = 1 and it did work properly. Here I want to focusing on illogical inputs such as kernel_size = 0.
The description of kernel_size in the TensorFlow document you gave just said that the value can be an integer or an integer tuple. The value of 0 does conform to what the document says, so at least the document is not precise.
The last link you gave seems to have nothing to do with the convolution operation and does not reflect how TensorFlow handle with the illogical operation such as kenel_size = 0.

To sum up, I mean that TensorFlow can still generate models and make predictions with illogical parameters such as kenel_size = 0. This should be an implementation issue. Developers should consider this situation to check its value or at least set a default value to avoid such problems.
Hope to receive your response and thank you very much for your help
		</comment>
		<comment id='3' author='shiningrain' date='2020-03-05T09:25:56Z'>
		please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/04e40b481d05e6a0c2e36ef9c0887ae6/37334.ipynb&gt;gist&lt;/denchmark-link&gt;
 for kernel_size=0
		</comment>
		<comment id='4' author='shiningrain' date='2020-03-16T23:25:39Z'>
		This has been fixed with tf-nightly version.


commit &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/1e102f63964365d82d7f22402b7ba21e0e0e64fe&gt;1e102f6&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='shiningrain' date='2020-03-19T14:17:37Z'>
		The problem still exists if I use nn module or  other tensorflow clients. e.g node.js,Java, CPP
		</comment>
		<comment id='6' author='shiningrain' date='2020-03-20T23:21:43Z'>
		&lt;denchmark-link:https://github.com/fsx950223&gt;@fsx950223&lt;/denchmark-link&gt;
 Can you please create a new issue and provide your repro example? Also refer this issue on the new thread. Thanks!
		</comment>
		<comment id='7' author='shiningrain' date='2020-03-23T19:51:46Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37334&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37334&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>