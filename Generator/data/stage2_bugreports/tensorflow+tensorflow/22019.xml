<bug id='22019' author='aiscientist' open_date='2018-09-03T06:39:50Z' closed_time='2018-11-08T18:03:09Z'>
	<summary>[Bug] ImportError: cannot import name 'checkpoint_management' tf1.10</summary>
	<description>
In tf1.10, when I run freeze_graph, it comes error with msg above.
I cloned source file from github and tried it different way and still have same issues.
Thanks for your help
File "freeze_graph.py", line 20, in 
from tensorflow.python.training import checkpoint_management
ImportError: cannot import name 'checkpoint_management'
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): MAC &amp; Ubuntu
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): tf1.10
Python version: 3.6
Exact command to reproduce:
python ~/tensorflow/tensorflow/python/tools/freeze_graph.py

	</description>
	<comments>
		<comment id='1' author='aiscientist' date='2018-09-03T13:15:13Z'>
		same problem
		</comment>
		<comment id='2' author='aiscientist' date='2018-09-04T12:46:13Z'>
		Same problem. I get the following error in both tensor flow 1.10.1 and 1.8.0
File "freeze_graph.py", line 58, in 
from tensorflow.python.training import checkpoint_management
ImportError: cannot import name 'checkpoint_management'
		</comment>
		<comment id='3' author='aiscientist' date='2018-09-04T15:49:34Z'>
		Same problem.
		</comment>
		<comment id='4' author='aiscientist' date='2018-09-05T17:14:05Z'>
		Same problem
		</comment>
		<comment id='5' author='aiscientist' date='2018-09-06T06:58:39Z'>
		commant
from tensorflow.python.training import checkpoint_management
add
import tensorflow as tf
change line 119
not checkpoint_management.checkpoint_exists(input_checkpoint)):
to
not tf.train.checkpoint_exists(input_checkpoint)):
		</comment>
		<comment id='6' author='aiscientist' date='2018-09-07T05:01:14Z'>
		same problem
		</comment>
		<comment id='7' author='aiscientist' date='2018-09-12T19:12:50Z'>
		same problem
EDIT: &lt;denchmark-link:https://github.com/JunhyukHyun&gt;@JunhyukHyun&lt;/denchmark-link&gt;
 suggestion fixed it for me - thanks!
		</comment>
		<comment id='8' author='aiscientist' date='2018-09-12T20:45:34Z'>
		&lt;denchmark-link:https://github.com/JunhyukHyun&gt;@JunhyukHyun&lt;/denchmark-link&gt;
 Thank you for finding the fix. Would you mind submitting a PR with this code change?
		</comment>
		<comment id='9' author='aiscientist' date='2018-09-14T07:21:36Z'>
		&lt;denchmark-link:https://github.com/JunhyukHyun&gt;@JunhyukHyun&lt;/denchmark-link&gt;
 I edited the freeze_graph.py, however, it introduced a new error:
&lt;denchmark-code&gt;  File "/Users/cvsanbuenaventura/tensorflow/tensorflow/python/tools/freeze_graph.py", line 365, in freeze_graph
checkpoint_version=checkpoint_version)
  File "/Users/cvsanbuenaventura/tensorflow/tensorflow/python/tools/freeze_graph.py", line 141, in freeze_graph_with_def_protos
for node in input_meta_graph_def.graph_def.node:
AttributeError: 'int' object has no attribute 'graph_def'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='10' author='aiscientist' date='2018-09-15T00:51:26Z'>
		&lt;denchmark-link:https://github.com/aselle&gt;@aselle&lt;/denchmark-link&gt;
 Can you help here?
		</comment>
		<comment id='11' author='aiscientist' date='2018-09-24T10:04:41Z'>
		Any update here, I am hitting the same issue trying to follow: &lt;denchmark-link:https://github.com/movidius/ncappzoo/tree/master/tensorflow/mobilenets&gt;https://github.com/movidius/ncappzoo/tree/master/tensorflow/mobilenets&lt;/denchmark-link&gt;

		</comment>
		<comment id='12' author='aiscientist' date='2018-09-26T22:48:19Z'>
		Fixed this issue with the following.
tensorflow/python/training/checkpoint_management function checkpoint_exists is exported as train.checkpoint_exists, so I made the following changes to tensorflow/python/tools/freeze_graph.py:
# Change import
-   from tensorflow.python.training import checkpoint_management
+   from tensorflow.train import checkpoint_exists
...
# Change call
-   not checkpoint_management.checkpoint_exists(input_checkpoint)):
+   not checkpoint_exists(input_checkpoint)):
I ran tensorflow/tools/ci_build/ci_build.sh CPU bazel test //tensorflow/python/tools:freeze_graph_test and it checked out.
If it works for those of you having issues, I'll put it into a PR.
		</comment>
		<comment id='13' author='aiscientist' date='2018-09-28T09:30:32Z'>
		If None of the above works for you, copy this code into freeze_graph.py for a Short Term Fix
&lt;denchmark-h:h1&gt;Copyright 2015 The TensorFlow Authors. All Rights Reserved.&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;Licensed under the Apache License, Version 2.0 (the "License");&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;you may not use this file except in compliance with the License.&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;You may obtain a copy of the License at&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;Unless required by applicable law or agreed to in writing, software&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;distributed under the License is distributed on an "AS IS" BASIS,&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;See the License for the specific language governing permissions and&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;limitations under the License.&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;==============================================================================&lt;/denchmark-h&gt;

"""Converts checkpoint variables into Const ops in a standalone GraphDef file.
This script is designed to take a GraphDef proto, a SaverDef proto, and a set of
variable values stored in a checkpoint file, and output a GraphDef with all of
the variable ops converted into const ops containing the values of the
variables.
It's useful to do this when we need to load a single file in C++, especially in
environments like mobile or embedded where we may not have access to the
RestoreTensor ops and file loading calls that they rely on.
An example of command-line usage is:
bazel build tensorflow/python/tools:freeze_graph &amp;&amp; 
bazel-bin/tensorflow/python/tools/freeze_graph 
--input_graph=some_graph_def.pb 
--input_checkpoint=model.ckpt-8361242 
--output_graph=/tmp/frozen_graph.pb --output_node_names=softmax
You can also look at freeze_graph_test.py for an example of how to use it.
"""
from future import absolute_import
from future import division
from future import print_function
import argparse
import sys
from google.protobuf import text_format
from tensorflow.core.framework import graph_pb2
from tensorflow.core.protobuf import saver_pb2
from tensorflow.python import pywrap_tensorflow
from tensorflow.python.client import session
from tensorflow.python.framework import graph_util
from tensorflow.python.framework import importer
from tensorflow.python.platform import app
from tensorflow.python.platform import gfile
from tensorflow.python.training import saver as saver_lib
FLAGS = None
def freeze_graph(input_graph,
input_saver,
input_binary,
input_checkpoint,
output_node_names,
restore_op_name,
filename_tensor_name,
output_graph,
clear_devices,
initializer_nodes,
variable_names_blacklist=""):
"""Converts all variables in a graph and checkpoint into constants."""
del restore_op_name, filename_tensor_name  # Unused by updated loading code.
if not gfile.Exists(input_graph):
print("Input graph file '" + input_graph + "' does not exist!")
return -1
if input_saver and not gfile.Exists(input_saver):
print("Input saver file '" + input_saver + "' does not exist!")
return -1
&lt;denchmark-h:h1&gt;'input_checkpoint' may be a prefix if we're using Saver V2 format&lt;/denchmark-h&gt;

if not saver_lib.checkpoint_exists(input_checkpoint):
print("Input checkpoint '" + input_checkpoint + "' doesn't exist!")
return -1
if not output_node_names:
print("You need to supply the name of a node to --output_node_names.")
return -1
input_graph_def = graph_pb2.GraphDef()
mode = "rb" if input_binary else "r"
with gfile.FastGFile(input_graph, mode) as f:
if input_binary:
input_graph_def.ParseFromString(f.read())
else:
text_format.Merge(f.read(), input_graph_def)
&lt;denchmark-h:h1&gt;Remove all the explicit device specifications for this node. This helps to&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;make the graph more portable.&lt;/denchmark-h&gt;

if clear_devices:
for node in input_graph_def.node:
node.device = ""
_ = importer.import_graph_def(input_graph_def, name="")
with session.Session() as sess:
if input_saver:
with gfile.FastGFile(input_saver, mode) as f:
saver_def = saver_pb2.SaverDef()
if input_binary:
saver_def.ParseFromString(f.read())
else:
text_format.Merge(f.read(), saver_def)
saver = saver_lib.Saver(saver_def=saver_def)
saver.restore(sess, input_checkpoint)
else:
var_list = {}
reader = pywrap_tensorflow.NewCheckpointReader(input_checkpoint)
var_to_shape_map = reader.get_variable_to_shape_map()
for key in var_to_shape_map:
try:
tensor = sess.graph.get_tensor_by_name(key + ":0")
except KeyError:
# This tensor doesn't exist in the graph (for example it's
# 'global_step' or a similar housekeeping element) so skip it.
continue
var_list[key] = tensor
saver = saver_lib.Saver(var_list=var_list)
saver.restore(sess, input_checkpoint)
if initializer_nodes:
sess.run(initializer_nodes)
&lt;denchmark-code&gt;variable_names_blacklist = (variable_names_blacklist.split(",") if
                            variable_names_blacklist else None)
output_graph_def = graph_util.convert_variables_to_constants(
    sess,
    input_graph_def,
    output_node_names.split(","),
    variable_names_blacklist=variable_names_blacklist)
&lt;/denchmark-code&gt;

with gfile.GFile(output_graph, "wb") as f:
f.write(output_graph_def.SerializeToString())
print("%d ops in the final graph." % len(output_graph_def.node))
def main(unused_args):
freeze_graph(FLAGS.input_graph, FLAGS.input_saver, FLAGS.input_binary,
FLAGS.input_checkpoint, FLAGS.output_node_names,
FLAGS.restore_op_name, FLAGS.filename_tensor_name,
FLAGS.output_graph, FLAGS.clear_devices, FLAGS.initializer_nodes,
FLAGS.variable_names_blacklist)
if name == "main":
parser = argparse.ArgumentParser()
parser.register("type", "bool", lambda v: v.lower() == "true")
parser.add_argument(
"--input_graph",
type=str,
default="",
help="TensorFlow 'GraphDef' file to load.")
parser.add_argument(
"--input_saver",
type=str,
default="",
help="TensorFlow saver file to load.")
parser.add_argument(
"--input_checkpoint",
type=str,
default="",
help="TensorFlow variables file to load.")
parser.add_argument(
"--output_graph",
type=str,
default="",
help="Output 'GraphDef' file name.")
parser.add_argument(
"--input_binary",
nargs="?",
const=True,
type="bool",
default=False,
help="Whether the input files are in binary format.")
parser.add_argument(
"--output_node_names",
type=str,
default="",
help="The name of the output nodes, comma separated.")
parser.add_argument(
"--restore_op_name",
type=str,
default="save/restore_all",
help="The name of the master restore operator.")
parser.add_argument(
"--filename_tensor_name",
type=str,
default="save/Const:0",
help="The name of the tensor holding the save path.")
parser.add_argument(
"--clear_devices",
nargs="?",
const=True,
type="bool",
default=True,
help="Whether to remove device specifications.")
parser.add_argument(
"--initializer_nodes",
type=str,
default="",
help="comma separated list of initializer nodes to run before freezing.")
parser.add_argument(
"--variable_names_blacklist",
type=str,
default="",
help="""
comma separated list of variables to skip converting to constants
""")
FLAGS, unparsed = parser.parse_known_args()
app.run(main=main, argv=[sys.argv[0]] + unparsed)
		</comment>
		<comment id='14' author='aiscientist' date='2018-10-17T01:16:19Z'>
		Tensorflow, Are you guys seriously ignore this issues and nobody cares about it?
		</comment>
		<comment id='15' author='aiscientist' date='2018-10-17T03:22:49Z'>
		&lt;denchmark-link:https://github.com/aiscientist&gt;@aiscientist&lt;/denchmark-link&gt;
  Sorry it fell through the crack.
&lt;denchmark-link:https://github.com/gargn&gt;@gargn&lt;/denchmark-link&gt;
 Could you please take a look at this bug?
		</comment>
		<comment id='16' author='aiscientist' date='2018-10-17T16:50:51Z'>
		&lt;denchmark-link:https://github.com/aiscientist&gt;@aiscientist&lt;/denchmark-link&gt;
, did &lt;denchmark-link:https://github.com/IMBurbank&gt;@IMBurbank&lt;/denchmark-link&gt;
's suggestion work for you?
		</comment>
		<comment id='17' author='aiscientist' date='2018-10-17T17:14:01Z'>
		Let me know if the proposed solution is useful to those of you struggling with this issue. I would be happy to put it into a PR.
		</comment>
		<comment id='18' author='aiscientist' date='2018-10-22T13:40:06Z'>
		
@aiscientist, did @IMBurbank's suggestion work for you?

Yes, it works for me. But please update for this on the default version.
		</comment>
		<comment id='19' author='aiscientist' date='2018-10-22T13:41:21Z'>
		
Let me know if the proposed solution is useful to those of you struggling with this issue. I would be happy to put it into a PR.

It works, thanks for your help, glad if this work on the default version so the others won't suffer from this issue.
		</comment>
		<comment id='20' author='aiscientist' date='2018-10-23T08:47:49Z'>
		This is a bit of a stream-of-consciousness response. I slowly typed it as I dug back into this issue.
First, I decided to go back and confirm your error in 1.10 - and if it still existed in the current 1.11.
I cloned the tensorflow repo, entered it and built a current dockerfile
docker build -f tensorflow/tools/dockerfiles/dockerfiles/nvidia.Dockerfile -t tf tensorflow/tools/dockerfiles/

docker run --rm --runtime=nvidia -u $(id -u):$(id -g) -v $(pwd):/my-devel -it tf
I entered the directory and ran freeze_graph.py
cd my-devel/
python3 tensorflow/python/tools/freeze_graph.py
And received the expected message
&lt;denchmark-code&gt;Input checkpoint '' doesn't exist!
&lt;/denchmark-code&gt;

I added a TF_PACKAGE build-arg the nvidia.Dockerfile to install tensorflow 1.10.1 and rebuilt.
docker build -f tensorflow/tools/dockerfiles/dockerfiles/nvidia.Dockerfile -t tf --build-arg TF_PACKAGE=tensorflow-gpu==1.10.1 tensorflow/tools/dockerfiles/

docker run --rm --runtime=nvidia -u $(id -u):$(id -g) -v $(pwd):/my-devel -it tf
This time running gave the same error originally reported.
Traceback (most recent call last):
  File "tensorflow/python/tools/freeze_graph.py", line 58, in &lt;module&gt;
    from tensorflow.python.training import checkpoint_management
ImportError: cannot import name 'checkpoint_management'
The changes I proposed above fixed the issue.
Next, I started digging through the diff between 1.10 and 1.11 branches...
I was hoping to find the specific fix that was applied between 1.10 and 1.11 in case it could be used to patch 1.10. It was bugging me that I hadn't tracked down how it was fixed in 1.11.
While looking through the freeze_graph.pycommit history, it slowly dawned on me that the checkpoint_management system changed significantly between 1.10 and 1.11. So much so that checkpoint_managment.py didn't exist when 1.10 was released.
I decided that the problem might be an issue of calling freeze_graph.py in a local uncompiled branch that was newer than the 1.10 binary in the python lib.
I switched the the git r1.10 branch. Then started back up the container with tf-1.10.1 installed.
git checkout r1.10
docker run --rm --runtime=nvidia -u $(id -u):$(id -g) -v $(pwd):/my-devel -it tf
And ran free_graph.py using tensorflow 1.10.1 on the r1.10 branch - it worked!
The fix I originally proposed is only papering over this compatibility issue by pointing to the tf_export'ed checkpoint_exist module made available in the python API.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

To be honest - I was excited about putting in another PR, but I don't think it will help here.
I should have noticed this last time I looked at the issue. If you want to run files in the uncompiled tensorflow project with a legacy tensorflow version installed locally, make sure to checkout the branch that matches the local version.
The issue can also be avoided by updating to the current release locally, or doing development using the tensorflow dockerfiles to ensure a supported environment.
If I missed something, please let me know.
		</comment>
		<comment id='21' author='aiscientist' date='2018-10-26T11:04:42Z'>
		adopt JunhyukHyun methon, it is ok
adopt Isaac Burbank  proposed solution, it raises question?
python tensorflow/python/tools/freeze_graph.py
Traceback (most recent call last):
File "tensorflow/python/tools/freeze_graph.py", line 60, in 
from tensorflow.train import checkpoint_management
ImportError: No module named 'tensorflow.train'
		</comment>
		<comment id='22' author='aiscientist' date='2018-10-26T17:10:57Z'>
		@zkl99999 What version of Tensorflow do you have installed, and which branch are you using to run freeze_graph.py?
		</comment>
		<comment id='23' author='aiscientist' date='2018-11-08T18:03:09Z'>
		Reference the solution provided by &lt;denchmark-link:https://github.com/IMBurbank&gt;@IMBurbank&lt;/denchmark-link&gt;
 (&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/22019#issuecomment-425378974&gt;#22019 (comment)&lt;/denchmark-link&gt;
) in order to freeze a graph in TensorFlow 1.10. Closing this bug since there is a workaround provided.
		</comment>
		<comment id='24' author='aiscientist' date='2019-04-25T14:14:59Z'>
		
@zkl99999 What version of Tensorflow do you have installed, and which branch are you using to run freeze_graph.py?


Fixed this issue with the following.
tensorflow/python/training/checkpoint_management function checkpoint_exists is exported as train.checkpoint_exists, so I made the following changes to tensorflow/python/tools/freeze_graph.py:
# Change import
-   from tensorflow.python.training import checkpoint_management
+   from tensorflow.train import checkpoint_exists
...
# Change call
-   not checkpoint_management.checkpoint_exists(input_checkpoint)):
+   not checkpoint_exists(input_checkpoint)):
I ran tensorflow/tools/ci_build/ci_build.sh CPU bazel test //tensorflow/python/tools:freeze_graph_test and it checked out.
If it works for those of you having issues, I'll put it into a PR.

Hi, it still not work using this solution, and it just report: Traceback (most recent call last):
File "/home/stella/tensorflow/tensorflow/python/tools/freeze_graph.py", line 58, in 
from tensorflow.train import checkpoint_exists
ImportError: No module named 'tensorflow.train'
I use tf 1.4.0. Can you help me, thx!
		</comment>
		<comment id='25' author='aiscientist' date='2019-05-05T09:39:08Z'>
		I encountered the same problem. &lt;denchmark-link:https://github.com/Stellaxx24&gt;@Stellaxx24&lt;/denchmark-link&gt;

		</comment>
		<comment id='26' author='aiscientist' date='2019-05-05T10:13:03Z'>
		这个和tensorflow的版本有关系 你安装1.11.0试试

获取 Outlook for iOS&lt;&lt;denchmark-link:https://aka.ms/o0ukef&gt;https://aka.ms/o0ukef&lt;/denchmark-link&gt;
&gt;
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


________________________________
发件人: ZHANG ZHAOXIANG &lt;notifications@github.com&gt;
发送时间: Sunday, May 5, 2019 7:45:01 PM
收件人: tensorflow/tensorflow
抄送: Stellaxx24; Mention
主题: Re: [tensorflow/tensorflow] [Bug] ImportError: cannot import name 'checkpoint_management' tf1.10 (#22019)


I encountered the same problem. @Stellaxx24&lt;https://github.com/Stellaxx24&gt;

―
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub&lt;#22019 (comment)&gt;, or mute the thread&lt;https://github.com/notifications/unsubscribe-auth/AKQJ7Y7XZXWEFR3CZPOHSETPT2UBZANCNFSM4FS4F36Q&gt;.

		</comment>
	</comments>
</bug>