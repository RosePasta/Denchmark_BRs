<bug id='27507' author='prclibo' open_date='2019-04-04T12:55:24Z' closed_time='2019-04-22T19:34:47Z'>
	<summary>Weird behavior of tf.Variable.assign in a tf.Dataset.map callback function</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Custom code
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): OSX Mojave
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA
TensorFlow installed from (source or binary): pip3.7
TensorFlow version (use command below): 1.13.1
Python version: 3.7.2
Bazel version (if compiling from source): NA
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version: Running the CPU version
GPU model and memory: NA

You can collect some of this information using our environment capture &lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
I was trying using a Variable to track a seed number in Dataset. Because I want my model to resume training with the same training order as before break if I can checkpoint the variable.
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
A minimal code is like:
&lt;denchmark-code&gt;import tensorflow as tf

seed = tf.Variable(0, dtype=tf.int64, trainable=False,
    use_resource=True)
def eject(x):
    seed.assign(x) 
    return {'seed': seed, 'x': x}

dataset = tf.data.Dataset.range(10000)
dataset = dataset.map(eject, num_parallel_calls=1)

iterator = dataset.make_initializable_iterator()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    sess.run(iterator.initializer)
    next_element = iterator.get_next()

    for i in range(10):
        fetches = sess.run(next_element)
        print(fetches)

&lt;/denchmark-code&gt;

Describe the expected behavior
The expected print should be 0-9 for both x and seed.
Describe the current behavior
But the output of seed does not stays the same and changes over different executions. The output is like:
&lt;denchmark-code&gt;{'seed': 0, 'x': 0}
{'seed': 1, 'x': 1}
{'seed': 2, 'x': 2}
{'seed': 2, 'x': 3}
{'seed': 4, 'x': 4}
{'seed': 4, 'x': 5}
{'seed': 6, 'x': 6}
{'seed': 7, 'x': 7}
{'seed': 7, 'x': 8}
{'seed': 8, 'x': 9}
&lt;/denchmark-code&gt;

Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='prclibo' date='2019-04-18T20:10:20Z'>
		I could reproduce the issue with TF1.13.1 and TF1.12. Thanks!
		</comment>
		<comment id='2' author='prclibo' date='2019-04-18T20:51:45Z'>
		&lt;denchmark-link:https://github.com/prclibo&gt;@prclibo&lt;/denchmark-link&gt;
 We need to initialize the seed also. Pleas check &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/Variable&gt;here&lt;/denchmark-link&gt;
 for more details about tf.Variable.
Please check the code below
&lt;denchmark-code&gt;import tensorflow as tf

seed = tf.Variable(0, dtype=tf.int64, trainable=False,
    use_resource=True)
def eject(x):
    seed.assign(x) 
    return {'seed': seed, 'x': x}

dataset = tf.data.Dataset.range(10000)
dataset = dataset.map(eject, num_parallel_calls=1)

iterator = dataset.make_initializable_iterator()

with tf.Session() as sess:
    sess.run(seed.initializer)
    sess.run(tf.global_variables_initializer())
    sess.run(iterator.initializer)
    next_element = iterator.get_next()

    for i in range(10):
        fetches = sess.run(next_element)
        print(fetches)
&lt;/denchmark-code&gt;

Please let me know what you think? Thanks!
		</comment>
		<comment id='3' author='prclibo' date='2019-04-19T10:25:42Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 Thanks for the remind.
Though below is not related to this question itself. But I found that seed is included in tf.global_variables(), so is it necessary to separately initialize seed besides tf.global_variables_initializer()?
&lt;denchmark-code&gt;import tensorflow as tf

seed = tf.Variable(0, dtype=tf.int64, trainable=False,
    use_resource=True, name='ssss')
def eject(x):
    seed.assign(x) 
    return {'seed': seed, 'x': x}

dataset = tf.data.Dataset.range(10000)
dataset = dataset.map(eject, num_parallel_calls=1)

iterator = dataset.make_initializable_iterator()

print(tf.global_variables())

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    sess.run(iterator.initializer)
    next_element = iterator.get_next()

    for i in range(10):
        fetches = sess.run(next_element)
        print(fetches)
&lt;/denchmark-code&gt;

This will output global_variables [&lt;tf.Variable 'ssss:0' shape=() dtype=int64&gt;]
		</comment>
		<comment id='4' author='prclibo' date='2019-04-19T22:23:17Z'>
		&lt;denchmark-link:https://github.com/prclibo&gt;@prclibo&lt;/denchmark-link&gt;
 Looks like this was an issue which was resolved in tf-nightly. Could you try running it in Google colab with !pip install tf-nightly. I don't see any issue with tf-nightly. Please let me know how it progress and close the issue if it was resolved by tf-nightly. Thanks!
		</comment>
		<comment id='5' author='prclibo' date='2019-04-22T14:20:45Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/muddham&gt;@muddham&lt;/denchmark-link&gt;

See &lt;denchmark-link:https://colab.research.google.com/drive/1DzTvOJRXYUk0CSjvGa11ewmjTP7VJ1kF&gt;https://colab.research.google.com/drive/1DzTvOJRXYUk0CSjvGa11ewmjTP7VJ1kF&lt;/denchmark-link&gt;

The issue did not happen in my very limited tests.
Also could you please take a look at &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/28043&gt;#28043&lt;/denchmark-link&gt;
 . It seems a similar problem but not fixed in tf-nightly.
		</comment>
		<comment id='6' author='prclibo' date='2019-04-22T19:34:47Z'>
		&lt;denchmark-link:https://github.com/prclibo&gt;@prclibo&lt;/denchmark-link&gt;
 I will close this issue as it was resolved in tf-nightly. We will resolve the other issue there. Thanks!
		</comment>
		<comment id='7' author='prclibo' date='2019-04-22T19:34:48Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=27507&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=27507&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>