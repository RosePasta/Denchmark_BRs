<bug id='39229' author='AdrienCorenflos' open_date='2020-05-06T16:27:23Z' closed_time='2020-06-30T04:08:02Z'>
	<summary>map_fn doesn't work with empty lists</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
TensorFlow installed from (source or binary): pip
TensorFlow version (use command below): v2.2.0-rc4-0-g70087ab4f4
Python version: 3.6.9

Describe the current behavior
map_fn doesn't support empty lists
Describe the expected behavior
It should return an empty list
Standalone code to reproduce the issue
import numpy as np
import tensorflow as tf
fn = lambda x: x
tf.map_fn(fn, [])

# additionally, this works:
tf.map_fn(fn, np.array([1.]))
# but not this eventhough [1.] is not a scalar.
tf.map_fn(fn, [1.])
	</description>
	<comments>
		<comment id='1' author='AdrienCorenflos' date='2020-05-06T22:40:33Z'>
		The second and the third examples are expected. In the second example,
&lt;denchmark-code&gt;tf.map_fn(fn, np.array([1.]))
&lt;/denchmark-code&gt;

np.array([1.]) is a tensor (converted to tensor by np.array), so it is a single element of shape [1].
The third example:
&lt;denchmark-code&gt;tf.map_fn(fn, [1.])
&lt;/denchmark-code&gt;

is a list of one tensor 1. as map_fn treat it as a list of one (scalar) element 1., thus you see an error.
The first example tf.map_fn(fn, []) is not something that has been captured in the implementation of tf.map_fn. I think it makes sense to return an explicit error here.
Created a PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/39241&gt;#39241&lt;/denchmark-link&gt;
 for the fix of  
		</comment>
		<comment id='2' author='AdrienCorenflos' date='2020-05-07T08:50:21Z'>
		Hi,
I really don't think you should raise when the list is empty. Every framework out there just returns an empty sequence when using map on an empty sequence.
		</comment>
		<comment id='3' author='AdrienCorenflos' date='2020-05-07T11:02:31Z'>
		Was able to reproduce the issue with TF v2.1, &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/c164706bf7bd7f67bf13fe6719e0a489/39229.ipynb&gt;TF v2.2.0-rc4&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/81517ce8a62dd8cc9f121c1956630636/39229-tf-nightly.ipynb&gt;TF-nightly&lt;/denchmark-link&gt;
. Please find the attached gist. Thanks!
		</comment>
		<comment id='4' author='AdrienCorenflos' date='2020-05-07T16:30:44Z'>
		&lt;denchmark-link:https://github.com/AdrienCorenflos&gt;@AdrienCorenflos&lt;/denchmark-link&gt;
 If you want to map over a sequence, then you must pass that sequence to  as a Tensor.
If you pass a non-Tensor sequence to map_fn, then it does not map over that sequence.  Instead, it unstacks each tensor in that sequence, and calls the function with a list constructed from those unstacked slices.
I.e., tf.map_fn(func, [a, b, c]) is equivalent to Python's map(func, a, b, c), and not to map(func, [a, b, c]).  So calling tf.map_fn(func, []) is equivalent to calling map(func) in Python, which does indeed give an error ("map() requires at least two args").
A more complex example might help illustrate what's going on here -- we can pass any nested structure in to elems, including e.g. nested dictionaries.  So if I call:
&lt;denchmark-code&gt;tf.map_fn(func, {'a': t1, 'b': [t2, t3]})
&lt;/denchmark-code&gt;

Then func will be called with:
&lt;denchmark-code&gt;func({'a': t1[0], 'b': [t2[0], t3[0]})
func({'a': t1[1], 'b': [t2[1], t3[1]})
func({'a': t1[2], 'b': [t2[2], t3[2]})
...
func({'a': t1[N], 'b': [t2[N], t3[N]})
&lt;/denchmark-code&gt;

Where N==t1.shape[0]==t2.shape[0]==t3.shape[0].  By default, each function needs to return a value with the same structure that was passed in.  E.g., in the example above, func must return a dictionary with keys a and b, where a is a tensor and b is a list of two tensors.  If you want func to return a different structure, then you need to specify that structure with the fn_output_signature argument.
		</comment>
		<comment id='5' author='AdrienCorenflos' date='2020-06-30T04:08:04Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39229&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39229&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>