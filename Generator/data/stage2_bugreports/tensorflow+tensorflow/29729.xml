<bug id='29729' author='TomorrowIsAnOtherDay' open_date='2019-06-13T05:50:48Z' closed_time='2019-07-24T17:49:40Z'>
	<summary>tf.keras.Model can't initialize variables given input shape in tf2.0 beta</summary>
	<description>
When given input_shape of the input, the model built on Sequential will initialize all the variables at once.
model = Sequential()
model.add(layers.Dense(32, input_shape=(500,)))
model.add(layers.Dense(32))
print(len(model.weights)) #output 4
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

When given input_shape of the input, the model built on Model will not initialize all the variables at once and only initializes them after doing some predictions.
I can understand when no input_shape is given, the model cannot initialize all the variables, but why it doesn't when given input_shape?
class MyModel(tf.keras.Model):
  def __init__(self, state_dim, action_dim):
    super(MyModel, self).__init__()
    self.state_dim = state_dim
    self.action_dim = action_dim

    self.fc1 = tf.keras.layers.Dense(100, input_shape=(2,))
    self.fc2 = tf.keras.layers.Dense(1)

  def call(self, inputs):
    out = self.fc1(inputs)
    out = self.fc2(out)
    return out

Q = MyModel(2, 2)
print(len(Q.weights)) # output 0
states = np.random.random((10, 2))
Q(states)
print(len(Q.weights)) # output 4
	</description>
	<comments>
		<comment id='1' author='TomorrowIsAnOtherDay' date='2019-06-17T06:56:41Z'>
		I am able to reproduce the issue on colab with Tf-2.0.0.brta0.
		</comment>
		<comment id='2' author='TomorrowIsAnOtherDay' date='2019-06-20T18:44:12Z'>
		any progress here?
		</comment>
		<comment id='3' author='TomorrowIsAnOtherDay' date='2019-06-27T08:51:21Z'>
		any progress here?
Again.
		</comment>
		<comment id='4' author='TomorrowIsAnOtherDay' date='2019-07-24T17:49:40Z'>
		Subclass models in Keras are not guaranteed to have made all of their variables until the first time they have been called on inputs. This is because the model has no way to know how your layers are connected until you actually enter the call method, so it is insufficient to specify an input layer shape on one of your layers.
If your subclass model doesn't implement a custom build method, you should be able to call model.build() to force the variables to instantiate.
We are currently exploring ways of allowing subclass models that do implement custom build methods to still initialize all variables when their build method is called. (Models implement custom build methods when the layers can't all be constructed in the __init__ method because the number of layers may depend on the input dimensions)
Alternatively, you can also use the Keras functional API, because the variables will be created right away without needing to call . &lt;denchmark-link:https://www.tensorflow.org/beta/guide/keras/functional&gt;https://www.tensorflow.org/beta/guide/keras/functional&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='TomorrowIsAnOtherDay' date='2019-07-24T17:49:41Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=29729&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=29729&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='TomorrowIsAnOtherDay' date='2019-07-25T02:20:17Z'>
		Thanks for replying.
I do want to use limited number of  keras functional API to build my network, as these APIs are not as flexible as origin tf.xx APIs. So I will try using model.build() to initialize the variables.
		</comment>
	</comments>
</bug>