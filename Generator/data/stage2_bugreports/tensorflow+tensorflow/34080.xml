<bug id='34080' author='NightWinkle' open_date='2019-11-07T21:07:07Z' closed_time='2019-11-09T14:16:29Z'>
	<summary>Can't apply map on Dataset</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Manjaro
TensorFlow installed from (source or binary): pip repository, binary
TensorFlow version (use command below): v2.0.0-rc2-26-g64c3d38 2.0.0
Python version: 3.7.4
CUDA/cuDNN version: N/A (CPU)
GPU model and memory: N/A (CPU)

Describe the current behavior
Trying to apply a function to any dataset (created either from from_tensor_slices or from_generator) returns the following error :

TypeError: Failed to convert object of type &lt;class 'tensorflow.python.data.ops.dataset_ops._VariantDataset'&gt; to Tensor. Contents: &lt;_VariantDataset shapes: (2,), types: tf.int64&gt;. Consider casting elements to a supported type.

Describe the expected behavior
The operation should return no error.
Code to reproduce the issue
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf

@tf.function
def expand(x):
    return tf.expand_dims(x, axis = 2)

m = np.array([[1, 1],
              [1, 1]])
ds = tf.data.Dataset.from_tensor_slices(m)
ds = ds.apply(expand)
&lt;/denchmark-code&gt;

Note: Try to apply any other function would returns the same error.
Other info / logs
Full stack trace :


TypeError                                 Traceback (most recent call last)
 in 
9                  [1, 1]])
10 ds = tf.data.Dataset.from_tensor_slices(m)
---&gt; 11 ds = ds.apply(expand)
/usr/lib/python3.7/site-packages/tensorflow_core/python/data/ops/dataset_ops.py in apply(self, transformation_func)
1367           dataset.
1368     """
-&gt; 1369     dataset = transformation_func(self)
1370     if not isinstance(dataset, DatasetV2):
1371       raise TypeError(
/usr/lib/python3.7/site-packages/tensorflow_core/python/eager/def_function.py in call(self, *args, **kwds)
455
456     tracing_count = self._get_tracing_count()
--&gt; 457     result = self._call(*args, **kwds)
458     if tracing_count == self._get_tracing_count():
459       self._call_counter.called_without_tracing()
/usr/lib/python3.7/site-packages/tensorflow_core/python/eager/def_function.py in _call(self, *args, **kwds)
501       # This is the first call of call, so we have to initialize.
502       initializer_map = object_identity.ObjectIdentityDictionary()
--&gt; 503       self._initialize(args, kwds, add_initializers_to=initializer_map)
504     finally:
505       # At this point we know that the initialization is complete (or less
/usr/lib/python3.7/site-packages/tensorflow_core/python/eager/def_function.py in _initialize(self, args, kwds, add_initializers_to)
406     self._concrete_stateful_fn = (
407         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access
--&gt; 408             *args, **kwds))
409
410     def invalid_creator_scope(*unused_args, **unused_kwds):
/usr/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)
1846     if self.input_signature:
1847       args, kwargs = None, None
-&gt; 1848     graph_function, _, _ = self._maybe_define_function(args, kwargs)
1849     return graph_function
1850
/usr/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py in _maybe_define_function(self, args, kwargs)
2148         graph_function = self._function_cache.primary.get(cache_key, None)
2149         if graph_function is None:
-&gt; 2150           graph_function = self._create_graph_function(args, kwargs)
2151           self._function_cache.primary[cache_key] = graph_function
2152         return graph_function, args, kwargs
/usr/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)
2039             arg_names=arg_names,
2040             override_flat_arg_shapes=override_flat_arg_shapes,
-&gt; 2041             capture_by_value=self._capture_by_value),
2042         self._function_attributes,
2043         # Tell the ConcreteFunction to clean up its graph once it goes out of
/usr/lib/python3.7/site-packages/tensorflow_core/python/framework/func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)
913                                           converted_func)
914
--&gt; 915       func_outputs = python_func(*func_args, **func_kwargs)
916
917       # invariant: func_outputs contains only Tensors, CompositeTensors,
/usr/lib/python3.7/site-packages/tensorflow_core/python/eager/def_function.py in wrapped_fn(*args, **kwds)
356         # wrapped allows AutoGraph to swap in a converted function. We give
357         # the function a weak reference to itself to avoid a reference cycle.
--&gt; 358         return weak_wrapped_fn().wrapped(*args, **kwds)
359     weak_wrapped_fn = weakref.ref(wrapped_fn)
360
/usr/lib/python3.7/site-packages/tensorflow_core/python/framework/func_graph.py in wrapper(*args, **kwargs)
903           except Exception as e:  # pylint:disable=broad-except
904             if hasattr(e, "ag_error_metadata"):
--&gt; 905               raise e.ag_error_metadata.to_exception(e)
906             else:
907               raise
TypeError: in converted code:
&lt;ipython-input-72-07c8595ab9d1&gt;:6 expand  *
    return tf.expand_dims(x, axis = 2)
/usr/lib/python3.7/site-packages/tensorflow_core/python/util/dispatch.py:180 wrapper
    return target(*args, **kwargs)
/usr/lib/python3.7/site-packages/tensorflow_core/python/ops/array_ops.py:325 expand_dims_v2
    return gen_array_ops.expand_dims(input, axis, name)
/usr/lib/python3.7/site-packages/tensorflow_core/python/ops/gen_array_ops.py:2465 expand_dims
    "ExpandDims", input=input, dim=axis, name=name)
/usr/lib/python3.7/site-packages/tensorflow_core/python/framework/op_def_library.py:530 _apply_op_helper
    raise err
/usr/lib/python3.7/site-packages/tensorflow_core/python/framework/op_def_library.py:527 _apply_op_helper
    preferred_dtype=default_dtype)
/usr/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:1296 internal_convert_to_tensor
    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
/usr/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py:286 _constant_tensor_conversion_function
    return constant(v, dtype=dtype, name=name)
/usr/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py:227 constant
    allow_broadcast=True)
/usr/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py:265 _constant_impl
    allow_broadcast=allow_broadcast))
/usr/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:545 make_tensor_proto
    "supported type." % (type(values), values))

TypeError: Failed to convert object of type &lt;class 'tensorflow.python.data.ops.dataset_ops._VariantDataset'&gt; to Tensor. Contents: &lt;_VariantDataset shapes: (2,), types: tf.int64&gt;. Consider casting elements to a supported type.


	</description>
	<comments>
		<comment id='1' author='NightWinkle' date='2019-11-08T05:53:03Z'>
		I have tried on colab with TF version 2.0,2.1.0-dev20191107 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/28816e71acab1a419fce416cec340b14/untitled339.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='NightWinkle' date='2019-11-09T00:05:54Z'>
		&lt;denchmark-link:https://github.com/NightWinkle&gt;@NightWinkle&lt;/denchmark-link&gt;
 Can you please explain what you want to accomplish?  Are you trying to expand dim of tensor or dataset? Instead of , i used map function as follows to expand dim. Please take a look at the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/5c03552749e1cdd40365ed7301a8c1b3/untitled339.ipynb&gt;gist here&lt;/denchmark-link&gt;
.  Thanks!
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf

@tf.function
def expand(x):
    return tf.expand_dims(x, axis = -1)

m = np.array([[1, 1],
              [1, 1]],dtype=np.float32)
m=tf.convert_to_tensor(m,dtype=tf.float32)
ds = tf.data.Dataset.from_tensor_slices(m)
#ds = ds.apply(expand)
ds = ds.map(lambda x:tf.expand_dims(x, axis=-1))
print(ds)
&lt;/denchmark-code&gt;

Please close the issue if it was resolved for you. Thanks!
		</comment>
		<comment id='3' author='NightWinkle' date='2019-11-09T14:16:29Z'>
		Indeed, it felt to me like it should have been a Dataset operation, but expand_dims takes only tensors as input.
		</comment>
		<comment id='4' author='NightWinkle' date='2019-11-09T14:16:31Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34080&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34080&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>