<bug id='32375' author='wwilliamcook' open_date='2019-09-10T03:27:20Z' closed_time='2019-09-14T20:35:40Z'>
	<summary>tf.concat not accepting arbitrary dtype with functional API model</summary>
	<description>
System information

Have I written custom code: yes
OS Platform and Distribution: Windows 10 Pro, version 1903, OS build 18362.295
TensorFlow installed via: pip
TensorFlow version: v2.0.0-beta1-5101-gc75bb66a99 2.0.0-rc0
Python version: Python 3.6.9 |Anaconda, Inc.| [MSC v.1915 64 bit (AMD64)] on win32

Describe the current behavior
tf.concat only accepts float32 unless explicitly passing dtype arg to tf.keras.Input.
Describe the expected behavior
tf.concat implicitly accepts any dtype (as long as input dtypes match).
Code to reproduce the issue
&lt;denchmark-code&gt;# Build concat model
x1 = tf.keras.Input([5])
x2 = tf.keras.Input([6])
y = tf.concat([x1, x2], axis=1)
concat_model = tf.keras.Model(inputs=[x1, x2], outputs=y)
# Generate inputs
x1_ = np.random.random(size=[2, 5])
x2_ = np.random.random(size=[2, 6])
assert x1_.dtype == 'float64'
assert x2_.dtype == 'float64'
# Run model
y_ = concat_model([x1_, x2_])  # EXCEPTION HAPPENS HERE
&lt;/denchmark-code&gt;

Full traceback
&lt;denchmark-code&gt;  File "C:/Users/wwill/Downloads/tf_bug_report_test.py", line 10, in &lt;module&gt;
    y_ = concat_model([x1_, x2_])  # Expected output of dtype float64 to match inputs
  File "C:\Users\wwill\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python\keras\engine\base_layer.py", line 851, in __call__
    outputs = self.call(cast_inputs, *args, **kwargs)
  File "C:\Users\wwill\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python\keras\engine\network.py", line 697, in call
    return self._run_internal_graph(inputs, training=training, mask=mask)
  File "C:\Users\wwill\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python\keras\engine\network.py", line 842, in _run_internal_graph
    output_tensors = layer(computed_tensors, **kwargs)
  File "C:\Users\wwill\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python\keras\engine\base_layer.py", line 851, in __call__
    outputs = self.call(cast_inputs, *args, **kwargs)
  File "C:\Users\wwill\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python\keras\engine\base_layer.py", line 2525, in call
    return self._defun_call(inputs)
  File "C:\Users\wwill\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python\eager\function.py", line 1821, in __call__
    graph_function, args, kwargs = self._maybe_define_function(args, kwargs)
  File "C:\Users\wwill\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python\eager\function.py", line 2147, in _maybe_define_function
    graph_function = self._create_graph_function(args, kwargs)
  File "C:\Users\wwill\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python\eager\function.py", line 2038, in _create_graph_function
    capture_by_value=self._capture_by_value),
  File "C:\Users\wwill\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python\framework\func_graph.py", line 915, in func_graph_from_py_func
    func_outputs = python_func(*func_args, **func_kwargs)
  File "C:\Users\wwill\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python\eager\function.py", line 2655, in bound_method_wrapper
    return wrapped_fn(*args, **kwargs)
  File "C:\Users\wwill\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python\framework\func_graph.py", line 905, in wrapper
    raise e.ag_error_metadata.to_exception(e)
ValueError: in converted code:
    relative to C:\Users\wwill\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python:

    keras\engine\base_layer.py:2571 _defun_call  *
        return self._make_op(inputs)
    keras\engine\base_layer.py:2549 _make_op
        c_op = ops._create_c_op(graph, node_def, inputs, control_inputs=[])
    framework\ops.py:1613 _create_c_op
        raise ValueError(str(e))

    ValueError: Inconsistent values for attr 'T' DT_DOUBLE vs. DT_FLOAT while building NodeDef 'concat' using Op&lt;name=ConcatV2; signature=values:N*T, axis:Tidx -&gt; output:T; attr=N:int,min=2; attr=T:type; attr=Tidx:type,default=DT_INT32,allowed=[DT_INT32, DT_INT64]&gt;```
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='wwilliamcook' date='2019-09-10T12:20:29Z'>
		Issue replicating with TFversion 2.0rc0,please find the &lt;denchmark-link:https://colab.research.google.com/gist/oanush/0407693cf5ddc756f6ae143a3a7cf4df/32375.ipynb&gt;gist&lt;/denchmark-link&gt;
 of colab.
		</comment>
		<comment id='2' author='wwilliamcook' date='2019-09-12T23:03:20Z'>
		The original input data types should match with the data types of your new inputs.
Casting keras input to float64 can help resolve this error.
import tensorflow as tf
import numpy as np
# Build concat model and set input data type to match the new input data types downstream
x1 = tf.keras.Input([5], dtype='float64')
x2 = tf.keras.Input([6], dtype= 'float64')
assert x1.dtype == 'float64'
assert x2.dtype == 'float64'
y = tf.concat([x1, x2], axis=1)
concat_model = tf.keras.Model(inputs=[x1, x2], outputs=y)
# Generate inputs
x1_ = np.random.random(size=[2, 5])
x2_ = np.random.random(size=[2, 6])
assert x1_.dtype == 'float64'
assert x2_.dtype == 'float64'
# Run model
y_ = concat_model([x1_, x2_]) 
		</comment>
		<comment id='3' author='wwilliamcook' date='2019-09-14T20:35:41Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=32375&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=32375&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>