<bug id='39074' author='vdutor' open_date='2020-05-01T09:28:30Z' closed_time='2020-05-01T16:59:09Z'>
	<summary>Loading model with add_loss fails</summary>
	<description>
System information

Have I written custom code: Yes. Minimal Failing Example given below.
OS Platform and Distribution: MacOs Mojave Version 10.14.6. Also tested on Linux Ubuntu 18.04.
TensorFlow installed from: binary
TensorFlow version (use command below): 2.1.0 (v2.1.0-rc2-17-ge5bf8de410 2.1.0)
Python version: 3.7.7
CPU execution only.

Describe the current behavior
Model loading using tf.keras.models.load_model does not work for models with custom layers that add losses with self.add_loss.
In the example below, I create a one-layer model with a custom layer. The layer adds a dummy loss using self.add_loss. This is the only loss of the model and there is no other loss passed to model.compile('adam'), which is intentional. The model compiles correctly and can successfully be stored to disk in SavedModel format with model.save('my_model').
import numpy as np
import tensorflow as tf


class CustomLayer(tf.keras.layers.Layer):
    """Imaginary Layer that adds a custom loss in the call"""

    def __init__(self, a):
        super().__init__()
        self.var = tf.Variable(a, name='var_a')

    def call(self, inputs, training=False):
        output = tf.reduce_sum(inputs * self.var, axis=-1)
        self.add_loss(tf.reduce_mean(output))
        return output


def get_model(input_dim: int) -&gt; tf.keras.Model:
    layer = CustomLayer(0.1)
    inputs = tf.keras.Input((input_dim,), name="inputs")
    outputs = layer(inputs)
    model = tf.keras.Model(inputs=inputs, outputs=outputs)
    model.compile(optimizer='adam')
    return model


if __name__ == "__main__":
    num_data = 100
    X, Y = np.random.randn(num_data, 1), np.random.randn(num_data, 1)

    model = get_model(input_dim=X.shape[-1])
    model.summary()
    print("model.losses", model.losses)

    model.save('my_model')
    reconstructed_model = tf.keras.models.load_model('my_model')  # ~~ breaks 
    reconstructed_model.summary()

    # Let's check:
    np.testing.assert_allclose(
        model.predict(X),
        reconstructed_model.predict(X)
    )
PROBLEM: The issue arises when loading the model. When the load method tries to compile the model the program terminates with the following stack trace:
Traceback (most recent call last):
  File "save_model.py", line 36, in &lt;module&gt;
    reconstructed_model = tf.keras.models.load_model('my_model')
  File "/Users/vincent/miniconda3/envs/gpflux/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/save.py", line 150, in load_model
    return saved_model_load.load(filepath, compile)
  File "/Users/vincent/miniconda3/envs/gpflux/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/saved_model/load.py", line 99, in load
    training_config))
  File "/Users/vincent/miniconda3/envs/gpflux/lib/python3.7/site-packages/tensorflow_core/python/training/tracking/base.py", line 457, in _method_wrapper
    result = method(self, *args, **kwargs)
  File "/Users/vincent/miniconda3/envs/gpflux/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training.py", line 446, in compile
    self._compile_weights_loss_and_weighted_metrics()
  File "/Users/vincent/miniconda3/envs/gpflux/lib/python3.7/site-packages/tensorflow_core/python/training/tracking/base.py", line 457, in _method_wrapper
    result = method(self, *args, **kwargs)
  File "/Users/vincent/miniconda3/envs/gpflux/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training.py", line 1592, in _compile_weights_loss_and_weighted_metrics
    self.total_loss = self._prepare_total_loss(masks)
  File "/Users/vincent/miniconda3/envs/gpflux/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training.py", line 1691, in _prepare_total_loss
    raise ValueError('The model cannot be compiled '
ValueError: The model cannot be compiled because it has no loss to optimize.
So it looks like the model can not be reconstructed/compiled because there is no loss specified. The original model, however, did have a loss:
print("model.losses", model.losses)
&gt;&gt;&gt; model.losses [&lt;tf.Tensor 'custom_layer/Mean:0' shape=() dtype=float32&gt;]
Interestingly, if we load the model without compiling we get
reconstructed_model = tf.keras.models.load_model('my_model', compile=False)
print("reconstructed_model.losses", reconstructed_model.losses)
&gt;&gt;&gt; reconstructed_model.losses []
which indicates that the losses indeed aren't correctly loaded into the reconstructed model. Not compiling the model, however, is not an option as the model.predict doesn't work as long as the model is not compiled.
Additional info:

Passing the source code of the layer in the load method results in the same crash:

reconstructed_model = tf.keras.models.load_model('my_model', custom_objects={"CustomLayer": CustomLayer})
However, in my use-case I don't have access to the source code at load time. So this solution would not fit my needs (but is also doesn't work).

Interestingly, the program terminates correctly when the original model does not get compiled. Again, this doesn't fit my use-case.

Describe the expected behavior
According to the docs, the Keras API save_model() and the SavedModel format supports the saving and loading of models that add losses using add_loss in their call method.
Many thanks for the support.
	</description>
	<comments>
		<comment id='1' author='vdutor' date='2020-05-01T16:59:09Z'>
		&lt;denchmark-link:https://github.com/vdutor&gt;@vdutor&lt;/denchmark-link&gt;
 Thanks for the report. This was resolved recent TF version released after . &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/38ae04d64871be44312671101a93e5cb/untitled142.ipynb&gt;Here&lt;/denchmark-link&gt;
 is a gist with  for your reference. If you like using stable version, there will be  releasing soon in near future. Thanks
I am closing this issue as it was resolved. Please feel free to reopen if the issue persists in TF2.2. Thanks!
		</comment>
		<comment id='2' author='vdutor' date='2020-05-01T16:59:12Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39074&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39074&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='vdutor' date='2020-05-01T17:17:30Z'>
		Hi &lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;

Thanks for your swift response. The snippets executes successfully in  as per your suggestion. However, there is still a difference when calling :
print("model.losses:", model.losses)
print("reconstructed_model.losses:", reconstructed_model.losses)
gives
model.losses: [&lt;tf.Tensor 'custom_layer/Mean:0' shape=() dtype=float32&gt;]
reconstructed_model.losses: []  # &lt;-- empty
This problem is immediately noticeable when running reconstructed_model.fit(X), which now crashes. Happy to create a new issue for this if you agree this is a bug.
Thanks
		</comment>
		<comment id='4' author='vdutor' date='2020-05-01T22:08:11Z'>
		&lt;denchmark-link:https://github.com/vdutor&gt;@vdutor&lt;/denchmark-link&gt;
 saving model with a custom layer is little different when compared to other models that don't use . When we use , we need to add implement  method in the custom_layer and mention custom layer as  while loading.
I added these lines
&lt;denchmark-code&gt;    def get_config(self):
      return {'a': self.var.numpy()}

    reconstructed_model = tf.keras.models.load_model('my_model',custom_objects={'CustomLayer':CustomLayer})  # ~~ breaks 
&lt;/denchmark-code&gt;

Please check the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/e6dc7d848a80df4cf039159dbb54d5ac/39074.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Hope this helps. Please let us know if you have any questions. Thanks!
		</comment>
	</comments>
</bug>