<bug id='17374' author='mixalturek' open_date='2018-03-02T08:55:38Z' closed_time='2020-01-24T21:27:29Z'>
	<summary>Potential resource leaks caused by unclear Java examples</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;

Java examples at &lt;denchmark-link:https://www.tensorflow.org/&gt;https://www.tensorflow.org/&lt;/denchmark-link&gt;
 for tensorflow 1.6.0.
&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

 returns list of closables, Javadoc clearly states that the caller is responsible to free all of them. None of the Java examples I found at &lt;denchmark-link:https://www.tensorflow.org/&gt;https://www.tensorflow.org/&lt;/denchmark-link&gt;
 highlights that, I realized it by happy accident during in-depth reading implementation in Session.java quite long time after I wrote my code that uses TensorFlow.
&lt;denchmark-code&gt;    /**
     * Execute the graph fragments necessary to compute all requested fetches.
     *
     * &lt;p&gt;&lt;b&gt;WARNING:&lt;/b&gt; The caller assumes ownership of all returned {@link Tensor}s, i.e., the
     * caller must call {@link Tensor#close()} on all elements of the returned list to free up
     * resources.
     *
     * ...
     */
    public List&lt;Tensor&lt;?&gt;&gt; run() {
      return runHelper(false).outputs;
    }
&lt;/denchmark-code&gt;

I'm not sure if the examples them-self contain any resource leak or not, they free only the first element of the list, but there may be more of them (in general). I would expect an explicit loop properly freeing all the returned resources there.
Such examples for beginners should be as explicit as possible, 100% clear and understandable for anyone. A lot of people (like me) base core of their code on them which may easily introduce significant resource leak bugs to their applications.

https://www.tensorflow.org/install/install_java, HelloTF example
https://www.tensorflow.org/install/install_java, referenced advanced example LabelImage
https://github.com/tensorflow/tensorflow/blob/r1.6/tensorflow/java/src/main/java/org/tensorflow/examples/LabelImage.java

&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

None.
	</description>
	<comments>
		<comment id='1' author='mixalturek' date='2018-03-03T00:39:15Z'>
		&lt;denchmark-link:https://github.com/asimshankar&gt;@asimshankar&lt;/denchmark-link&gt;
 Can you take a look at this?
		</comment>
		<comment id='2' author='mixalturek' date='2018-03-03T00:52:24Z'>
		&lt;denchmark-link:https://github.com/mixalturek&gt;@mixalturek&lt;/denchmark-link&gt;
 : Thanks for the note and yes we'd like to make documentation and examples as clear as possible.
The examples referenced only fetch a single tensor, hence the list returned necessarily has a single element (and since that is referenced in the try-with-resources blocks, there is no leak). When the example is explicitly requesting a single tensor, the loop seems unnecessary.
Happy to hear any suggestions for improvement though.
		</comment>
		<comment id='3' author='mixalturek' date='2018-03-04T19:16:42Z'>
		Yes, I guessed there is only a single one so the code is correct. So what about to add a comment with an explicit info.
&lt;denchmark-code&gt;      // Execute the "MyConst" operation in a Session.
      try (Session s = new Session(g);
           // Generally, there may be multiple output tensors, all of them must be closed to prevent resource leaks.
           Tensor output = s.runner().fetch("MyConst").run().get(0)) {
        System.out.println(new String(output.bytesValue(), "UTF-8"));
      }
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='mixalturek' date='2018-03-19T06:59:55Z'>
		Sure. A PR would be welcome :)
		</comment>
		<comment id='5' author='mixalturek' date='2020-01-24T21:27:29Z'>
		The fix PR is merged, so I think we can close this.
		</comment>
	</comments>
</bug>