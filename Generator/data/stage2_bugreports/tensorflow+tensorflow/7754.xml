<bug id='7754' author='yaroslavvb' open_date='2017-02-22T00:38:10Z' closed_time='2017-06-16T17:43:23Z'>
	<summary>tf.split(num_or_size_splits=x,...) fails for x=Dimension(128)</summary>
	<description>
Seen while upgrading our code to TF 1.0, somehow this used to work in 12.1, but in TF 1.0 the following fails with IndexError: list index out of range inside of array_ops.py
tf.split(num_or_size_splits=X.get_shape()[1], ...) 
Looking at array_ops.py, the relevant logic
&lt;denchmark-code&gt;  if isinstance(num_or_size_splits, six.integer_types):
    return gen_array_ops._split(
        split_dim=axis, num_split=num_or_size_splits, value=value, name=name)
  else:
    size_splits = ops.convert_to_tensor(num_or_size_splits)

&lt;/denchmark-code&gt;

So Dimension(128) is treated as "Tensor" and code fails with IndexError: list index out of range inside array_ops.py. I think it would make more sense if the Tensor path checked if num_or_size_splits was Tensor or convertible to non-scalar Tensor, and then have a catch-all else for all other cases. Or perhaps documentation could be updated to say that this path is taken if num_split is not a scalar, which is what's happening now, despite the documentation implying that this is only for Tensor arguments.
I would fix this myself, but I already have an outstanding PR, and the current system makes it too painful to switch branches -- &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/6911&gt;#6911&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='yaroslavvb' date='2017-02-22T19:21:34Z'>
		Thanks for the detailed bug report.  Internal bug opened.
		</comment>
		<comment id='2' author='yaroslavvb' date='2017-03-08T14:36:14Z'>
		Use python type conversion to solve this issue
tf.split(num_or_size_splits=int(X.get_shape()[1]), ...)
		</comment>
		<comment id='3' author='yaroslavvb' date='2017-06-16T17:43:23Z'>
		Close for now since I assume this has already been fixed. If not, please reopen.
		</comment>
	</comments>
</bug>