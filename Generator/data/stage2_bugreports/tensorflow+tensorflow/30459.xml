<bug id='30459' author='liemonade' open_date='2019-07-07T12:50:34Z' closed_time='2020-08-14T04:27:26Z'>
	<summary>Memory leak when using `tf.linalg.expm` in `tf.keras.layers.Layer`</summary>
	<description>
System information

Have I written custom code: Yes
OS Platform and Distribution: Arch Linux
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): 2.0.0 Beta 1
Python version: 3.7.3
CUDA/cuDNN version: 10.0.130 / 7.6.0
GPU model and memory: Nvidia GTX 1060, 6GB

Describe the current behavior
I'm currently working on a costum Keras Layer and need to use tf.linalg.expm several times.
While training my model I noticed that my system would be out of memory after a few minutes.
Reducing the Layer definition step by step I noticed that the error should be related to tf.linalg.expm.
Every time the layers call method is invoked more and more memory get's allocated.
Replacing return tf.linalg.expm(X) in the following code example with e.g. return tf.matmal(X,X) does not yield this extreme leak of memory.

The memory allocated by an invocation of a method using  should be freed.
&lt;denchmark-link:https://user-images.githubusercontent.com/2351787/60768608-18b51480-a0c6-11e9-9d0f-baad36136cc8.png&gt;&lt;/denchmark-link&gt;

Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
import numpy as np
import tensorflow as tf
import os
import matplotlib.pyplot as plt
import psutil


def memory():
    pid = os.getpid()
    py = psutil.Process(pid)
    memory_use = py.memory_info()[0] / 2. ** 30
    return memory_use

class TestLayer(tf.keras.layers.Layer):

    def __init__(self, **kwargs):
        
        super(TestLayer, self).__init__(**kwargs)

    def build(self, input_shape):
        self.s = input_shape

    @tf.function
    def call(self, inputs, training=None):
        
        X = tf.matmul(tf.transpose(inputs),inputs)
        
        return tf.linalg.expm(X)
    


S = tf.keras.Input(shape=(1,), name="sequence", dtype=tf.float64)
T = TestLayer()(S)
model = tf.keras.Model(inputs=S,outputs=T)
dataset = tf.data.Dataset.from_tensors(tf.constant(1)).repeat().map(lambda x: tf.ones([tf.random.uniform([1], minval=100, maxval=3000, dtype=tf.int32)[0],1],dtype=tf.float64))

memory_usage = []

i = 0
for data in dataset:
    s = model(data)
    
    memory_usage.append(memory())

    if i == 1000:
        break
        
    i = i+1
    
plt.figure()
plt.plot(memory_usage)
plt.xlabel("iterations")
plt.ylabel("memory usage")
plt.show()
Other info / logs
Warning produced when using tf.linalg.expm:
&lt;denchmark-code&gt;    WARNING: Logging before flag parsing goes to stderr.
    W0707 13:40:07.108526 139932625143616 deprecation.py:323] From /home/darvin/.conda/envs/tf2/lib/python3.7/site-packages/tensorflow/python/ops/linalg/linalg_impl.py:280: add_dispatch_support.&lt;locals&gt;.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.
    Instructions for updating:
    Use tf.where in 2.0, which has the same broadcast rule as np.where
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='liemonade' date='2019-07-08T12:48:11Z'>
		Could reproduce the issue with TF Version 2.0 beta.
		</comment>
		<comment id='2' author='liemonade' date='2020-07-31T04:06:15Z'>
		&lt;denchmark-link:https://github.com/liemonade&gt;@liemonade&lt;/denchmark-link&gt;
,
Could you please upgrade to TensorFlow v2.3 and check if you are still facing the issue? Thanks!
		</comment>
		<comment id='3' author='liemonade' date='2020-08-07T04:20:56Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='4' author='liemonade' date='2020-08-14T04:27:24Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='5' author='liemonade' date='2020-08-14T04:27:27Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/30459&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/30459&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>