<bug id='38454' author='AdrienCorenflos' open_date='2020-04-11T11:51:00Z' closed_time='2020-04-13T21:50:53Z'>
	<summary>Tensor array can't be read when passed as argument of tf.function decorated functions</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock
example script provided in TensorFlow): true
OS Platform and Distribution (e.g.,
Linux Ubuntu 16.04): Windows 10
TensorFlow installed from (source or
binary): pip
TensorFlow version (use command below): v2.1.0-rc2-17-ge5bf8de410 2.1.0

Describe the current behavior
When trying to read from a tensor array passed as an argument to a tf.function decorated function, it raises an OperatorNotAllowedError:

OperatorNotAllowedInGraphError: using a tf.Tensor as a Python bool is not allowed: AutoGraph did not convert this function. Try decorating it directly with @tf.function.

Describe the expected behavior
It should work the same way in autograph and eager mode
Standalone code to reproduce the issue
def fun(a, tensor_array):
    loss = tf.constant(0.)
    x, y = tf.constant(0.), tf.constant(0.)
    size = tensor_array.size()
    for i in tf.range(size):
        x, y = tensor_array.read(i)
        loss += a * tf.abs(y - x) # Some dummy computation.
    return loss

decorated_fun = tf.function(fun)

data = [(1., 1.)] * 10
a_tensor_array = tf.TensorArray(dtype=tf.float32, element_shape=[2,], size=0, dynamic_size=True)
a_tensor_array = a_tensor_array.unstack(data)

a_tensor = tf.constant(1.)

print(fun(a_tensor, a_tensor_array))
print(decorated_fun(a_tensor, a_tensor_array))
Full traceback:
&lt;denchmark-code&gt; ---------------------------------------------------------------------------
OperatorNotAllowedInGraphError            Traceback (most recent call last)
&lt;ipython-input-36-fafbbc1bd984&gt; in &lt;module&gt;
     17 
     18 print(fun(a_tensor, a_tensor_array))
---&gt; 19 print(decorated_fun(a_tensor, a_tensor_array))
     20 

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow_core\python\eager\def_function.py in __call__(self, *args, **kwds)
    566         xla_context.Exit()
    567     else:
--&gt; 568       result = self._call(*args, **kwds)
    569 
    570     if tracing_count == self._get_tracing_count():

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow_core\python\eager\def_function.py in _call(self, *args, **kwds)
    613       # This is the first call of __call__, so we have to initialize.
    614       initializers = []
--&gt; 615       self._initialize(args, kwds, add_initializers_to=initializers)
    616     finally:
    617       # At this point we know that the initialization is complete (or less

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow_core\python\eager\def_function.py in _initialize(self, args, kwds, add_initializers_to)
    495     self._concrete_stateful_fn = (
    496         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access
--&gt; 497             *args, **kwds))
    498 
    499     def invalid_creator_scope(*unused_args, **unused_kwds):

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow_core\python\eager\function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)
   2387       args, kwargs = None, None
   2388     with self._lock:
-&gt; 2389       graph_function, _, _ = self._maybe_define_function(args, kwargs)
   2390     return graph_function
   2391 

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow_core\python\eager\function.py in _maybe_define_function(self, args, kwargs)
   2701 
   2702       self._function_cache.missed.add(call_context_key)
-&gt; 2703       graph_function = self._create_graph_function(args, kwargs)
   2704       self._function_cache.primary[cache_key] = graph_function
   2705       return graph_function, args, kwargs

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow_core\python\eager\function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)
   2591             arg_names=arg_names,
   2592             override_flat_arg_shapes=override_flat_arg_shapes,
-&gt; 2593             capture_by_value=self._capture_by_value),
   2594         self._function_attributes,
   2595         # Tell the ConcreteFunction to clean up its graph once it goes out of

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow_core\python\framework\func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)
    976                                           converted_func)
    977 
--&gt; 978       func_outputs = python_func(*func_args, **func_kwargs)
    979 
    980       # invariant: `func_outputs` contains only Tensors, CompositeTensors,

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow_core\python\eager\def_function.py in wrapped_fn(*args, **kwds)
    437         # __wrapped__ allows AutoGraph to swap in a converted function. We give
    438         # the function a weak reference to itself to avoid a reference cycle.
--&gt; 439         return weak_wrapped_fn().__wrapped__(*args, **kwds)
    440     weak_wrapped_fn = weakref.ref(wrapped_fn)
    441 

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow_core\python\framework\func_graph.py in wrapper(*args, **kwargs)
    966           except Exception as e:  # pylint:disable=broad-except
    967             if hasattr(e, "ag_error_metadata"):
--&gt; 968               raise e.ag_error_metadata.to_exception(e)
    969             else:
    970               raise

OperatorNotAllowedInGraphError: in converted code:

    &lt;ipython-input-34-fafbbc1bd984&gt;:6 fun  *
        x, y = tensor_array.read(i)
    C:\ProgramData\Anaconda3\lib\site-packages\tensorflow_core\python\ops\tensor_array_ops.py:1137 read
        return self._implementation.read(index, name=name)
    C:\ProgramData\Anaconda3\lib\site-packages\tensorflow_core\python\ops\tensor_array_ops.py:753 read
        if index &lt; 0:
    C:\ProgramData\Anaconda3\lib\site-packages\tensorflow_core\python\framework\ops.py:757 __bool__
        self._disallow_bool_casting()
    C:\ProgramData\Anaconda3\lib\site-packages\tensorflow_core\python\framework\ops.py:523 _disallow_bool_casting
        "using a `tf.Tensor` as a Python `bool`")
    C:\ProgramData\Anaconda3\lib\site-packages\tensorflow_core\python\framework\ops.py:510 _disallow_when_autograph_enabled
        " decorating it directly with @tf.function.".format(task))

    OperatorNotAllowedInGraphError: using a `tf.Tensor` as a Python `bool` is not allowed: AutoGraph did not convert this function. Try decorating it directly with @tf.function.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='AdrienCorenflos' date='2020-04-13T10:48:51Z'>
		Was able to replicate the issue. Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/61067623ab18508db4cfd47ae7479c36/untitled502.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks
		</comment>
		<comment id='2' author='AdrienCorenflos' date='2020-04-13T21:50:53Z'>
		This is the same as &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34683&gt;#34683&lt;/denchmark-link&gt;
.
At the moment, the only workaround is to either convert the TensorArray to Tensor before passing it as argument ore returning it, or moving the code that creates and uses the TensorArray inside the tf.function.
		</comment>
		<comment id='3' author='AdrienCorenflos' date='2020-04-13T21:50:54Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38454&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38454&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>