<bug id='27316' author='abhayraw1' open_date='2019-03-30T10:50:27Z' closed_time='2019-04-17T06:49:01Z'>
	<summary>Weights returned from `keras.model.Model.get_weights()` are different from the ones fetched from the graph directly.</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No
TensorFlow installed from (source or binary): pip
TensorFlow version (use command below): v1.13.1-0-g6612da8951  1.13.1
Python version:  3.6.5 [Conda virtual env]
Bazel version (if compiling from source): n/a
GCC/Compiler version (if compiling from source): n/a
CUDA/cuDNN version: n/a
GPU model and memory: n/a

Current behavior
import tf.keras.layers as L
def feed_forward_nn():
    with tf.variable_scope("keras_"):
        _input_ = L.Input(shape=(3,))
        layer_1 = L.Dense(5, Z.relu)(_input_)
        layer_2 = L.Dense(5, Z.relu)(layer_1)
        output = L.Dense(1, Z.tanh)(layer_2)
    return Model(inputs=_input_, outputs=output)

model = feed_forward_nn()
sess.run(tf.global_variables_initializer())
**Getting weights from the graph itself vs using model.get_weights(): **
In [5]: sess.run(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES))                                                                                                       
Out[5]: 
[array([[ 0.06312895,  0.41315466, -0.7228936 ,  0.66872925, -0.29116392],
        [ 0.4684649 ,  0.07688528, -0.6403172 ,  0.22407418,  0.2667293 ],
        [ 0.6107295 , -0.12038571,  0.6050673 , -0.423037  ,  0.13438004]],
       dtype=float32),
 array([0., 0., 0., 0., 0.], dtype=float32),
 array([[ 0.02425474, -0.45923662,  0.57829964, -0.346116  ,  0.1658817 ],
        [ 0.45619428, -0.7142852 ,  0.09248799,  0.10972124, -0.32121253],
        [ 0.4513328 ,  0.7124406 ,  0.620286  ,  0.41065276, -0.26047498],
        [ 0.31083477, -0.46835992, -0.20313907,  0.48168743,  0.4530183 ],
        [-0.4258671 , -0.18113756,  0.18505335, -0.49022397,  0.70809317]],
       dtype=float32),
 array([0., 0., 0., 0., 0.], dtype=float32),
 array([[ 0.14051151],
        [ 0.326164  ],
        [ 0.7357073 ],
        [ 0.82876945],
        [-0.52645826]], dtype=float32),
 array([0.], dtype=float32)]
In [6]: model.get_weights()                                                                                                                                              
Out[6]: 
[array([[-0.7260302 , -0.8412575 ,  0.461235  , -0.18713814,  0.04823786],
        [-0.7028123 , -0.7654265 , -0.4894964 ,  0.14831334,  0.49071664],
        [-0.3141371 ,  0.23999351,  0.00772947,  0.49302799,  0.20739347]],
       dtype=float32),
 array([0., 0., 0., 0., 0.], dtype=float32),
 array([[-0.6223821 , -0.5421302 ,  0.25800073, -0.56548995, -0.31957147],
        [ 0.12645936,  0.16026676, -0.5968463 , -0.4449416 , -0.5069353 ],
        [ 0.7126628 ,  0.36706662,  0.16168451,  0.6257292 ,  0.6289371 ],
        [-0.41813722, -0.46337304,  0.62247336, -0.7190004 , -0.5288886 ],
        [ 0.35295987, -0.68682575,  0.7552402 , -0.728891  , -0.285271  ]],
       dtype=float32),
 array([0., 0., 0., 0., 0.], dtype=float32),
 array([[0.18540406],
        [0.84715295],
        [0.11520958],
        [0.47841287],
        [0.46228695]], dtype=float32),
 array([0.], dtype=float32)]
Using model.trainable_weights property:
In [14]: sess.run(model.trainable_weights)                                                                                                                               
Out[14]: 
[array([[ 0.06312895,  0.41315466, -0.7228936 ,  0.66872925, -0.29116392],
        [ 0.4684649 ,  0.07688528, -0.6403172 ,  0.22407418,  0.2667293 ],
        [ 0.6107295 , -0.12038571,  0.6050673 , -0.423037  ,  0.13438004]],
       dtype=float32),
 array([0., 0., 0., 0., 0.], dtype=float32),
 array([[ 0.02425474, -0.45923662,  0.57829964, -0.346116  ,  0.1658817 ],
        [ 0.45619428, -0.7142852 ,  0.09248799,  0.10972124, -0.32121253],
        [ 0.4513328 ,  0.7124406 ,  0.620286  ,  0.41065276, -0.26047498],
        [ 0.31083477, -0.46835992, -0.20313907,  0.48168743,  0.4530183 ],
        [-0.4258671 , -0.18113756,  0.18505335, -0.49022397,  0.70809317]],
       dtype=float32),
 array([0., 0., 0., 0., 0.], dtype=float32),
 array([[ 0.14051151],
        [ 0.326164  ],
        [ 0.7357073 ],
        [ 0.82876945],
        [-0.52645826]], dtype=float32),
 array([0.], dtype=float32)]
	</description>
	<comments>
		<comment id='1' author='abhayraw1' date='2019-04-10T19:02:19Z'>
		&lt;denchmark-link:https://github.com/abhayraw1&gt;@abhayraw1&lt;/denchmark-link&gt;
 Could you provide a code to reproduce bug? Please create a GitHub gist or any other way to share code to reproduce bug. Thanks!
		</comment>
		<comment id='2' author='abhayraw1' date='2019-04-12T11:38:28Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://gist.github.com/abhayraw1/af7ab2bb524b0392c6495c4d8d90c3f4&gt;Here&lt;/denchmark-link&gt;
 is the gist to reproduce the issue
		</comment>
		<comment id='3' author='abhayraw1' date='2019-04-15T22:13:51Z'>
		&lt;denchmark-link:https://github.com/abhayraw1&gt;@abhayraw1&lt;/denchmark-link&gt;
 random number generator generates different number for line &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/2&gt;#2&lt;/denchmark-link&gt;
 and line#3. So eventhough, weights are same for model1 and model2, but the inputs (random numbers) are different and hence, the outputs are also different.
Line1:    print("\nIf YES then these should be equal!!!")
Line2:    print(model1.predict(np.random.random((1, 3))))
Line3:    print(model2.predict(np.random.random((1, 3))))
Please let me know whether I missed anything here. Thanks!
		</comment>
		<comment id='4' author='abhayraw1' date='2019-04-17T06:49:01Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 Hey, sorry for the terrible blunder. I actually deviated from what I experienced before. I have updated the &lt;denchmark-link:https://gist.github.com/abhayraw1/af7ab2bb524b0392c6495c4d8d90c3f4&gt;gist&lt;/denchmark-link&gt;

The doubt that I have is that why are the weights returned by model.trainable_weights different from model.get_weights()?
		</comment>
		<comment id='5' author='abhayraw1' date='2019-04-17T06:49:03Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=27316&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=27316&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='abhayraw1' date='2020-05-15T23:44:48Z'>
		&lt;denchmark-link:https://github.com/abhayraw1&gt;@abhayraw1&lt;/denchmark-link&gt;
 I found the same issue. Do you know the answer? Thank you.
		</comment>
		<comment id='7' author='abhayraw1' date='2020-05-16T01:35:35Z'>
		&lt;denchmark-link:https://github.com/lululxvi&gt;@lululxvi&lt;/denchmark-link&gt;
 Please create a new issue with a simple standalone code to reproduce the issue. Thanks!
		</comment>
		<comment id='8' author='abhayraw1' date='2020-06-27T20:09:52Z'>
		&lt;denchmark-link:https://github.com/lululxvi&gt;@lululxvi&lt;/denchmark-link&gt;
 Try running the gist that I shared in the previous comments. This was a long time ago so I don't really remember the details. I thought switched to PyTorch as few weeks after opening this issue I guess.
		</comment>
	</comments>
</bug>