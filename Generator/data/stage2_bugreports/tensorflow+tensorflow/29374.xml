<bug id='29374' author='ethereon' open_date='2019-06-03T21:57:48Z' closed_time='2019-06-08T02:33:05Z'>
	<summary>Batched matrix multiplication is incorrect for large batches</summary>
	<description>
This bug seems to exist in all versions of TensorFlow from (at least) 1.13 to the current 2.0 nightly under multiple configurations (host os, gpu, python versions...) with CUDA 10.0.
It can be reproduced fairly easily:
with tf.device('gpu:0'):
  v = tf.ones((2**17, 1, 1), dtype=tf.float32)
  print(tf.reduce_sum(tf.matmul(v, v)))
This prints 65535.0 instead of 131072.0 (stemming from the output values at indices &gt;= 2**16 being 0)
Colab: &lt;denchmark-link:https://colab.research.google.com/drive/1CZiKKWkI96SAVRJ5kMkT5kmMunipJhdx&gt;https://colab.research.google.com/drive/1CZiKKWkI96SAVRJ5kMkT5kmMunipJhdx&lt;/denchmark-link&gt;

Some observations:

This occurs for batch dimensions greater than or equal to 216.
This only occurs on the GPU. The CPU version seems fine.
This only occurs for FP32. FP64 seems fine.
In TensorFlow 2.0, the bug only manifests on the first run (as shown in the colab example). Subsequent runs produce the correct result.

	</description>
	<comments>
		<comment id='1' author='ethereon' date='2019-06-04T08:21:56Z'>
		I could reproduce the reported issue on colab. Thanks!
		</comment>
		<comment id='2' author='ethereon' date='2019-06-04T21:51:38Z'>
		I can only reproduce with 2.0, not with 1.13.
&lt;denchmark-link:https://github.com/smit-hinsu&gt;@smit-hinsu&lt;/denchmark-link&gt;
 could you help to take a look? Thanks.
		</comment>
		<comment id='3' author='ethereon' date='2019-06-04T23:57:34Z'>
		&lt;denchmark-link:https://github.com/aaroey&gt;@aaroey&lt;/denchmark-link&gt;
: This reproduces it on v1.13: &lt;denchmark-link:https://colab.research.google.com/drive/1ycxH0LP2TPJxBKci5XqsgguhHdGCow1I&gt;https://colab.research.google.com/drive/1ycxH0LP2TPJxBKci5XqsgguhHdGCow1I&lt;/denchmark-link&gt;

The underlying issue seems to be reading out of bounds memory for elements &gt;= 2**16. In the example above, that out-of-bounds region is zeros. However, you can just as easily get other results.
		</comment>
		<comment id='4' author='ethereon' date='2019-06-08T02:33:05Z'>
		 &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/26969&gt;#26969&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='ethereon' date='2019-06-08T02:33:06Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=29374&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=29374&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>