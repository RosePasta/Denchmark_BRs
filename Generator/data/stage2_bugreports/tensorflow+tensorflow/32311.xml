<bug id='32311' author='HarikrishnanBalagopal' open_date='2019-09-07T10:38:12Z' closed_time='2019-09-20T11:40:28Z'>
	<summary>LayerNormalization fails when given tuple as axis input</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux-4.14.137+-x86_64-with-Ubuntu-18.04-bionic
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA
TensorFlow installed from (source or binary): Google colab has it preinstalled
TensorFlow version (use command below): 1.14.0
Python version: (major, minor, micro, releaselevel, serial) (3, 6, 8, 'final', 0)
Bazel version (if compiling from source): NA
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version: CUDA Version: 10.1
GPU model and memory: Tesla K80 11441MiB

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
Sequential([Input(shape=(64, 64, 3), dtype=np.float32), LayerNormalization(axis=(-3, -2, -1))])
fails with error
&lt;denchmark-code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-22-18267fdf3265&gt; in &lt;module&gt;()
----&gt; 1 Sequential([Input(shape=(64, 64, 3), dtype=np.float32), LayerNormalization(axis=(-3, -2, -1))])

6 frames

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/layers/normalization.py in build(self, input_shape)
    957     for idx, x in enumerate(self.axis):
    958       if x &lt; 0:
--&gt; 959         self.axis[idx] = ndims + x
    960 
    961     # Validate axes

TypeError: 'tuple' object does not support item assignment
&lt;/denchmark-code&gt;

This is because the lines:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/layers/normalization.py#L929-L930&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/layers/normalization.py#L929-L930&lt;/denchmark-link&gt;

    if isinstance(axis, (list, tuple)):
      self.axis = axis[:]
make a copy of the tuple instead of converting it to a list and later the lines:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/layers/normalization.py#L954-L956&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/layers/normalization.py#L954-L956&lt;/denchmark-link&gt;

    # Convert axis to list and resolve negatives
    if isinstance(self.axis, int):
      self.axis = [self.axis]
do not take care of the case when axis is a tuple.

Fix is simple, replace the lines:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/layers/normalization.py#L954-L956&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/layers/normalization.py#L954-L956&lt;/denchmark-link&gt;

with:
    # Convert axis to list and resolve negatives
    if isinstance(self.axis, int):
      self.axis = [self.axis]
    elif isinstance(self.axis, tuple):
      self.axis = list(axis)
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
Sequential([Input(shape=(64, 64, 3), dtype=np.float32), LayerNormalization(axis=(-3, -2, -1))])
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='HarikrishnanBalagopal' date='2019-09-07T11:13:16Z'>
		The same code appears in Tensorflow 2 as well:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/layers/normalization.py#L929-L930&gt;https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/layers/normalization.py#L929-L930&lt;/denchmark-link&gt;

    if isinstance(axis, (list, tuple)):
      self.axis = axis[:]
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/layers/normalization.py#L954-L956&gt;https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/layers/normalization.py#L954-L956&lt;/denchmark-link&gt;

    # Convert axis to list and resolve negatives
    if isinstance(self.axis, int):
      self.axis = [self.axis]
		</comment>
		<comment id='2' author='HarikrishnanBalagopal' date='2019-09-10T17:15:31Z'>
		What is the convention? Some functions accept tuples, lists and ints for the axis argument. Others only accept lists and integers.
		</comment>
		<comment id='3' author='HarikrishnanBalagopal' date='2019-09-11T21:51:21Z'>
		I can reproduce the issue even with tensorflow==1.15.0rc0. However, If you change axis from tuple to list, then there is no error. The error is also clearly points the source of error TypeError: 'tuple' object does not support item assignment.
Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/73c0016dfeb542508516cbc9618dc69f/tf32311.ipynb&gt;gist with 1.15.0rc0`&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='HarikrishnanBalagopal' date='2019-09-12T09:21:28Z'>
		Should I submit a pull request with the fix?
		</comment>
		<comment id='5' author='HarikrishnanBalagopal' date='2019-09-12T09:36:38Z'>
		Please feel free to create a fix and tag me.
		</comment>
		<comment id='6' author='HarikrishnanBalagopal' date='2019-09-12T10:04:56Z'>
		&lt;denchmark-link:https://github.com/robieta&gt;@robieta&lt;/denchmark-link&gt;
  I did post a fix in the original post. I didn't create a pull request because I am not sure what the convention is. Some functions in tensorflow accept tuples, lists and ints as axis while others only accept list and ints for axis.
Fix is simple, replace the lines:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/layers/normalization.py#L954-L956&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/layers/normalization.py#L954-L956&lt;/denchmark-link&gt;

with:
 # Convert axis to list and resolve negatives
    if isinstance(self.axis, int):
      self.axis = [self.axis]
    elif isinstance(self.axis, tuple):
      self.axis = list(axis)
		</comment>
		<comment id='7' author='HarikrishnanBalagopal' date='2019-09-12T10:06:00Z'>
		&lt;denchmark-link:https://github.com/robieta&gt;@robieta&lt;/denchmark-link&gt;
 Also note that the same code is present in tensorflow 2. Maybe tag the issue as tf2 as well.
		</comment>
		<comment id='8' author='HarikrishnanBalagopal' date='2019-09-12T12:26:14Z'>
		I think the fix you proposed is reasonable. Particularly for higher level symbols like Layers we try to be fairly permissive as long as it's unambiguous what the user wants. (Which in this case it is.)
		</comment>
		<comment id='9' author='HarikrishnanBalagopal' date='2019-09-12T12:44:13Z'>
		&lt;denchmark-link:https://github.com/robieta&gt;@robieta&lt;/denchmark-link&gt;
 I created a pull request &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/32463&gt;#32463&lt;/denchmark-link&gt;
 .
Maybe add a test case for this?
		</comment>
		<comment id='10' author='HarikrishnanBalagopal' date='2019-09-18T09:40:37Z'>
		&lt;denchmark-link:https://github.com/robieta&gt;@robieta&lt;/denchmark-link&gt;
 So the pull request got merged into version 1.14, but the same code is present in r2.0.
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/layers/normalization.py#L954-L956&gt;https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/layers/normalization.py#L954-L956&lt;/denchmark-link&gt;

Can you merge into that as well? or do I need to create a separate pull request for that?
		</comment>
		<comment id='11' author='HarikrishnanBalagopal' date='2019-09-18T14:56:27Z'>
		I don't think this warrants a cherrypick given how far along the 2.0 RC process is. It will automatically be picked up in 2.1.
		</comment>
		<comment id='12' author='HarikrishnanBalagopal' date='2019-09-20T11:40:24Z'>
		Closing issue since pull request fixing it has been merged in v1.14
		</comment>
		<comment id='13' author='HarikrishnanBalagopal' date='2019-09-20T11:40:29Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=32311&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=32311&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>