<bug id='33560' author='kor01' open_date='2019-10-21T07:01:29Z' closed_time='2020-01-10T22:19:53Z'>
	<summary>BatchMatmul on GPU Wrong Result</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Linux Ubuntu 18.04
TensorFlow installed from (source or binary): pip install tensorflow-gpu
TensorFlow version (use command below): 2.0
Python version: 3.7.3
CUDA/cuDNN version:
GPU model and memory:Quadro P4000 8GB

Describe the current behavior
batchmatmul on gpu gives wrong result.
Describe the expected behavior
batchmatmul should give correct result.
Code to reproduce the issue
import numpy as np
import tensorflow as tf
H, W = 480, 640
xs = tf.random.normal((H, W, 3))
m = tf.random.normal((3, 3))
with tf.device('/gpu:0'):
  mvgpu = tf.linalg.matvec(m[None, None, None, :, : ], xs[None])

with tf.device('cpu:0'):
  mvcpu = tf.linalg.matvec(m[None, None, None, :, : ], xs[None])

diff = mvgpu - mvcpu
print(diff) # a lot of large differences
assert not np.allclose(diff, 0)
Other info / logs
python diff.py
tf.Tensor(
[[[[ 0.          0.          0.        ]
[ 0.          0.          0.        ]
[ 0.          0.          0.        ]
...
[ 0.          0.          0.        ]
[ 0.          0.          0.        ]
[ 0.          0.          0.        ]]
[[ 0.          0.          0.        ]
[ 0.          0.          0.        ]
[ 0.          0.          0.        ]
...
[ 0.          0.          0.        ]
[ 0.          0.          0.        ]
[ 0.          0.          0.        ]]
[[ 0.          0.          0.        ]
[ 0.          0.          0.        ]
[ 0.          0.          0.        ]
...
[ 0.          0.          0.        ]
[ 0.          0.          0.        ]
[ 0.          0.          0.        ]]
...
[[ 2.7437444  -2.3577256   3.3067198 ]
[ 1.0874022  -0.7325933   2.4926019 ]
[-2.3672104   1.6497741  -2.1795664 ]
...
[-1.4023315   0.68545413 -1.9975882 ]
[-0.44164103 -1.6766946  -0.6477224 ]
[ 2.5612988   0.7603723   4.286979  ]]
[[-0.9761815   1.5332515  -0.12404668]
[ 1.871354   -0.73664904 -1.0545558 ]
[-1.2774239   1.6571116  -2.36473   ]
...
[ 2.4847538  -1.5389507   1.5169847 ]
[ 2.2117858  -3.3593345  -0.15468699]
[ 0.82464755 -2.0175495  -0.11506134]]
[[ 2.8697317   0.54362947 -0.10824746]
[ 1.6531861  -4.2324843   0.97695297]
[ 4.3966837  -3.0250916   1.8032213 ]
...
[ 4.5854487  -2.0374475  -1.1027236 ]
[-2.7206469   0.864337   -1.3582373 ]
[-0.98220587  0.53226703 -4.277097  ]]]], shape=(1, 480, 640, 3), dtype=float32)
	</description>
	<comments>
		<comment id='1' author='kor01' date='2019-10-22T06:27:42Z'>
		&lt;denchmark-link:https://github.com/kor01&gt;@kor01&lt;/denchmark-link&gt;
, Thanks for reporting this issue,
I tried replicating the issue on colab with TF 2.0, it throws assertion error. Since the  is ,  throws exception. Let me know if i misunderstood your issue. Please take a look at the &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/24dfd6669d3be4e3a40c45e561195a11/untitled217.ipynb&gt;gist&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='kor01' date='2019-10-23T11:14:17Z'>
		
@kor01, Thanks for reporting this issue,
I tried replicating the issue on colab with TF 2.0, it throws assertion error. Since the diff is 0, assert not throws exception. Let me know if i misunderstood your issue. Please take a look at the gist. Thanks!

I run the script and replicate the error on my laptop (Quadro P4000 8GB) and my desktop computer( TITAN V  &amp; Titan X Maxwell). However I could not replicate on K80 device in colab cloud. I have python 3.7 on my two computers whereas colab has python 3.6. It could be device or python version dependent.
The problem is also replicated in:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/31166&gt;#31166&lt;/denchmark-link&gt;

the problem characteristics are the same with mine. A portion of computation is done correctly another portion is left with zeros.
		</comment>
		<comment id='3' author='kor01' date='2020-01-10T22:19:53Z'>
		This is fixed in latest tf-nightly version '2.1.0-dev20200110' which uses cuda 10.1. (tested in google colab) Thanks!
		</comment>
		<comment id='4' author='kor01' date='2020-01-10T22:19:55Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33560&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33560&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>