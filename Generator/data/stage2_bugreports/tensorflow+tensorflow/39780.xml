<bug id='39780' author='joshhansen' open_date='2020-05-22T06:08:37Z' closed_time='2020-08-15T03:10:12Z'>
	<summary>`tf.Module` saves in an invalid state when `tf.function` references a variable defined in another scope</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux, Fedora 32 x86_64
TensorFlow installed from (source or binary): pip install tensorflow,
TensorFlow version (use command below): 2.2.0
Python version: 3.8.2
CUDA/cuDNN version: 10.2.89 / 7.6.5.32
GPU model and memory: NVIDIA GeForce GTX 960M

Describe the current behavior
I am wrapping a Keras model within a tf.Module which has a tf.function that runs a training step. As part of that I calculate a loss. If the loss function references a variable defined in a different scope, the model seems to serialize successfully, but saved_model_cli show --dir $DIR --all crashes with a KeyError related to the tf.function when run on the model that was saved. This suggests that the model saved was in some way invalid---something that should have been caught prior to saving.
&lt;denchmark-code&gt;josh@achebe:~/Projects/Umpire$ ./venv/bin/saved_model_cli show --dir ai/umpire_regressor --all

MetaGraphDef with tag-set: 'serve' contains the following SignatureDefs:

signature_def['__saved_model_init_op']:
  The given SavedModel SignatureDef contains the following input(s):
  The given SavedModel SignatureDef contains the following output(s):
    outputs['__saved_model_init_op'] tensor_info:
        dtype: DT_INVALID
        shape: unknown_rank
        name: NoOp
  Method name is: 
WARNING:tensorflow:From /home/josh/Projects/Umpire/venv/lib/python3.8/site-packages/tensorflow/python/ops/resource_variable_ops.py:1813: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.
Instructions for updating:
If using Keras pass *_constraint arguments to layers.
Traceback (most recent call last):
  File "./venv/bin/saved_model_cli", line 8, in &lt;module&gt;
    sys.exit(main())
  File "/home/josh/Projects/Umpire/venv/lib/python3.8/site-packages/tensorflow/python/tools/saved_model_cli.py", line 1153, in main
    args.func(args)
  File "/home/josh/Projects/Umpire/venv/lib/python3.8/site-packages/tensorflow/python/tools/saved_model_cli.py", line 714, in show
    _show_all(args.dir)
  File "/home/josh/Projects/Umpire/venv/lib/python3.8/site-packages/tensorflow/python/tools/saved_model_cli.py", line 306, in _show_all
    _show_defined_functions(saved_model_dir)
  File "/home/josh/Projects/Umpire/venv/lib/python3.8/site-packages/tensorflow/python/tools/saved_model_cli.py", line 186, in _show_defined_functions
    trackable_object = load.load(saved_model_dir)
  File "/home/josh/Projects/Umpire/venv/lib/python3.8/site-packages/tensorflow/python/saved_model/load.py", line 578, in load
    return load_internal(export_dir, tags)
  File "/home/josh/Projects/Umpire/venv/lib/python3.8/site-packages/tensorflow/python/saved_model/load.py", line 602, in load_internal
    loader = loader_cls(object_graph_proto,
  File "/home/josh/Projects/Umpire/venv/lib/python3.8/site-packages/tensorflow/python/saved_model/load.py", line 123, in __init__
    self._load_all()
  File "/home/josh/Projects/Umpire/venv/lib/python3.8/site-packages/tensorflow/python/saved_model/load.py", line 134, in _load_all
    self._load_nodes()
  File "/home/josh/Projects/Umpire/venv/lib/python3.8/site-packages/tensorflow/python/saved_model/load.py", line 264, in _load_nodes
    node, setter = self._recreate(proto, node_id)
  File "/home/josh/Projects/Umpire/venv/lib/python3.8/site-packages/tensorflow/python/saved_model/load.py", line 370, in _recreate
    return factory[kind]()
  File "/home/josh/Projects/Umpire/venv/lib/python3.8/site-packages/tensorflow/python/saved_model/load.py", line 359, in &lt;lambda&gt;
    "function": lambda: self._recreate_function(proto.function),
  File "/home/josh/Projects/Umpire/venv/lib/python3.8/site-packages/tensorflow/python/saved_model/load.py", line 397, in _recreate_function
    return function_deserialization.recreate_function(
  File "/home/josh/Projects/Umpire/venv/lib/python3.8/site-packages/tensorflow/python/saved_model/function_deserialization.py", line 265, in recreate_function
    concrete_function_objects.append(concrete_functions[concrete_function_name])
KeyError: '__inference_fit_action_1159'
&lt;/denchmark-code&gt;

Describe the expected behavior
When I try to serialize a model, it should either serialize in a form that can be read by saved_model_cli or an error should be emitted.
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow.keras import Input, Model
from tensorflow.keras.layers import Dense

fX = tf.float32

class TrainableAI(tf.Module):
    def __init__(self, keras_model, *args, **kwargs):
        self.model = keras_model
        super().__init__(*args, **kwargs)

    @tf.function(input_signature=[
        tf.TensorSpec(shape=(1,14,), dtype=fX),#1d_features
        tf.TensorSpec(shape=(1,19,), dtype=fX),# true_action_values
    ])
    def fit_action(self, _1d_features, true_action_values):
        estimated_action_values = self.model(_1d_features)
        mse = tf.keras.losses.MeanSquaredError()
        loss = mse(estimated_action_values, true_action_value)


input = Input(shape=(14,), name='1d_features', dtype=fX)
dense = Dense(64, activation='relu', name="dense0")(input)
action_value_estimate = Dense(1, activation='linear', name='estimate')(dense)
true_action_value = Input([1], dtype=fX, name='true_action_values')

model = Model(inputs=input, outputs=action_value_estimate, name='umpire_regressor')
trainable_ai = TrainableAI(model)

tf.saved_model.save(trainable_ai, 'umpire_regressor')
&lt;/denchmark-code&gt;

Then saved_model_cli show --dir umpire_regressor --all
Note that there is a typo where action_value_estimate is referenced instead of action_value_estimates. action_value_estimate without the trailing s is defined in the if __name__=="__main__" block. Resolving this typo resolves the error; however, the bug is that this was saved in an invalid state instead of an exception being thrown.
I tried running this in a Kaggle container running TF 2.1.0 and it caught the problem, so this may be a regression post-2.1.0.
	</description>
	<comments>
		<comment id='1' author='joshhansen' date='2020-05-22T14:52:41Z'>
		Was able to reproduce the error with &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/3fd00db62d096e0f5a9322d26b7f2931/39780-2-1.ipynb#scrollTo=vNy2Pmpl1F2_&gt;TF v2.1&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/70be824d707de6f0925fe71b3f9e0a96/39780-2-2.ipynb&gt;TF v2.2&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/e95ee8d4da90a02f03d760aba6fecff4/39780-tf-nightly.ipynb&gt;TF-nightly&lt;/denchmark-link&gt;
. Please find the attached gist. Thanks!
		</comment>
		<comment id='2' author='joshhansen' date='2020-05-22T23:51:10Z'>
		Yep, looks like it. By contrast, the Kaggle container running 2.1.0 gives  ValueError: Attempted to save a function b'__inference_fit_action_95' which references a symbolic Tensor Tensor("true_action_values:0", shape=(None, 1), dtype=float32) that is not a simple constant. This is not supported.
		</comment>
		<comment id='3' author='joshhansen' date='2020-08-07T00:50:50Z'>
		&lt;denchmark-link:https://github.com/joshhansen&gt;@joshhansen&lt;/denchmark-link&gt;
 I think this was resolved in recent . I am not able to reproduce the issue. Please check the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/1a2069fa920e8ffd6567288de9207915/39780-tf-nightly.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
Please verify once and close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='4' author='joshhansen' date='2020-08-14T01:27:23Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='5' author='joshhansen' date='2020-08-15T03:10:13Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39780&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39780&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>