<bug id='35571' author='iiternalfire' open_date='2020-01-03T19:51:46Z' closed_time='2020-01-06T19:15:47Z'>
	<summary>Autograph in Tensorflow 1.15  has unexpected behavior with "==" conditional statement</summary>
	<description>
System information

Custom code: Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10
TensorFlow version: 1.15.0 (git version v1.15.0-rc3-22-g590d6eef7e)
Python version: 3.6

Current behavior
Using autograph to translate python code with "==" conditional statement leads to unexpected behavior, where the value of the variable in conditional statement does not affect the output. The translation does not give an error, but leads to wrong implementation. This behavior is unique to "==" and does not occur with "&lt;, &gt;, &lt;=, &gt;=" conditionals.
Expected behavior
The code execution should be affected by truth state of "==" conditional statement. Although, one can get desired behavior by replacing "if z == 0:" with "if tf.math.equal(z, 0):" as a workaround, but one might not have access to replace this statement. This issue can lead to unintended consequences.
Code to reproduce the issue
This is a modification of square_if_positive code from TensorFlow documentation.
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow import autograph as ag

#minimal code for method to demonstrate issue
def foo(x, opt):
    if opt == 0:
        y = x * x
    else:
        y = -x
    return y

#graph construction
mdl = tf.Graph()
with mdl.as_default():
    converted_foo = ag.to_graph(foo)
    print(ag.to_code(foo))
    x = tf.placeholder(tf.float64, name='x')
    opt = tf.placeholder(tf.float64, name='opt')
    y = converted_foo(x, opt)

#graph execution
with tf.Session(graph=mdl) as sess:
    aval = sess.run(y, feed_dict={x:4, opt:0})
    print('output for opt = 0 is ' + str(aval))
    aval = sess.run(y, feed_dict={x:4, opt:1})
    print('output for opt = 1 is ' + str(aval))
&lt;/denchmark-code&gt;

Current Response:
&lt;denchmark-code&gt;output for opt = 0 is -4.0
output for opt = 1 is -4.0
&lt;/denchmark-code&gt;

Desired Response:
&lt;denchmark-code&gt;output for opt = 0 is 16.0
output for opt = 1 is -4.0
&lt;/denchmark-code&gt;

We can get desired response by modifying python source code of foo method, but that is not the ideal solution to this issue:
&lt;denchmark-code&gt;#minimal code for method to demonstrate issue
def foo(x, opt):
    if tf.math.equal(opt,0):
        y = x * x
    else:
        y = -x
    return y
&lt;/denchmark-code&gt;

Other info / logs
In Tensorboard, we can see that with "==" the truth state of "opt == 0" is completely ignored
&lt;denchmark-link:https://user-images.githubusercontent.com/8063769/71745435-1eeb3a00-2e38-11ea-9b23-c5a8ae257b70.PNG&gt;&lt;/denchmark-link&gt;

However, with "tf.math.equal(opt,0)", we get desired graph:
&lt;denchmark-link:https://user-images.githubusercontent.com/8063769/71745450-290d3880-2e38-11ea-843c-0446ae20461f.PNG&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='iiternalfire' date='2020-01-06T05:25:24Z'>
		I have tried on colab with TF version 1.15 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/29674e81e3100b57c51c9a518d7de09c/untitled534.ipynb&gt;here.&lt;/denchmark-link&gt;
 Thanks!
		</comment>
		<comment id='2' author='iiternalfire' date='2020-01-06T19:15:47Z'>
		Indeed, AutoGraph does not convert equality operators by default, for historical reasons. However, this is only an issue in older versions of TF, and there is an optional flag to handle it in that case as well.
For a long time,  objects did not implement the equality operator  (see &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/9359&gt;#9359&lt;/denchmark-link&gt;
). AutoGraph does have the ability to rewrite it, if you call . The feature is not enabled by default to maintain compatibility with existing graph code.
Fortunately, we were able to fix the equality issue in TF 1.15 (see the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/releases/tag/v1.15.0&gt;release notes&lt;/denchmark-link&gt;
) and newer, but in 1.15 you still need to enable it manually (for reasons of backward compatibility). In essence, you need to call . This behavior is already enabled by default in TF 2.0.
		</comment>
		<comment id='3' author='iiternalfire' date='2020-01-06T19:15:49Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35571&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35571&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>