<bug id='38792' author='tanguycdls' open_date='2020-04-22T11:55:25Z' closed_time='2020-11-23T16:13:11Z'>
	<summary>Embedding Lookup Sparse behavior with empty ids</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): linux
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: na
TensorFlow installed from (source or binary): binar
TensorFlow version (use command below): 2.1
Python version: 3.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

Describe the current behavior
&lt;denchmark-code&gt;list_input = tf.ragged.constant([[], [], [], [1], []], dtype=tf.int32)
list_input.shape
# TensorShape([5, None])
embedding = tf.Variable(tf.random.truncated_normal([3, 3]))
tf.nn.embedding_lookup_sparse(embedding, list_input.to_sparse(), None, combiner='mean').shape
# TensorShape([4, 3]) # the last row disappeared
list_input = tf.ragged.constant([[], [], [], [1]], dtype=tf.int32)
list_input.shape
# TensorShape([4, None]) # correct output shape
tf.nn.embedding_lookup_sparse(embedding, list_input.to_sparse(), None, combiner='mean').shape
# TensorShape([4, 3]) The first 3 vectors are zeroes the last one has the correct value.
&lt;/denchmark-code&gt;

Embedding lookup sparse states that it is not usable if one rows does not contains at least 1 id.

This op assumes that there is at least one id for each row in the dense tensor represented by sp_ids (i.e. there are no rows with empty features), and that all the indices of sp_ids are in canonical row-major order.

However based on my experiments it does not work at expected if the last item of the list array has no ids. If the first items have no ids it will be filled with zeroes but if the last ones dont have indices its not filled with zeroes and the output shape is not consistant.
Describe the expected behavior
A more consistent behavior i think we should fill every empty items with a zero vector if there are no ids or break explicitely.
I found safe_embedding_lookup_sparse which solves the issue however its not clear to me what are the differences between the two ? are there any performance issue with safe one ?

&lt;denchmark-link:https://colab.research.google.com/gist/tanguycdls/11a399c750ce72b92a002c9b11909e12/embeddingsparse.ipynb&gt;https://colab.research.google.com/gist/tanguycdls/11a399c750ce72b92a002c9b11909e12/embeddingsparse.ipynb&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='tanguycdls' date='2020-04-22T16:09:17Z'>
		i am able to replicate this, please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/395fd9c5769ce5690814d4dea1c900a9/untitled147.ipynb&gt;gist here&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='tanguycdls' date='2020-11-23T16:13:12Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38792&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38792&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>