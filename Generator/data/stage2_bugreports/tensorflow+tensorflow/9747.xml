<bug id='9747' author='austinzh' open_date='2017-05-08T06:10:31Z' closed_time='2018-03-27T23:02:14Z'>
	<summary>'Tensor' object has no attribute 'initializer' after import from meta graph</summary>
	<description>
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution: Darwin Austins-MBP 16.5.0 Darwin Kernel Version 16.5.0: Fri Mar  3 16:52:33 PST 2017; root:xnu-3789.51.2~3/RELEASE_X86_64 x86_64
Mac OS X 10.12.4
TensorFlow installed from (source or binary):binary
TensorFlow version (use command below):v1.1.0-rc0-61-g1ec6ed5 1.1.0
Bazel version (if compiling from source):0.4.5
CUDA/cuDNN version:None
GPU model and memory:None
Exact command to reproduce: Ref to Codes

&lt;denchmark-h:h3&gt;tensorflow import&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;tf.VERSION = 1.1.0
tf.GIT_VERSION = v1.1.0-rc0-61-g1ec6ed5
tf.COMPILER_VERSION = v1.1.0-rc0-61-g1ec6ed5
Sanity check: array([1], dtype=int32)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

After export and import a meta graph with uninitialized local variables,
You can not inittialize them with sess.run(tf. local_variables_initializer()), cause
TF do not register variable's proto function with key 'LOCAL_VARIABLES' and when
export meta graph to protobuf, source code can not find to_proto function from repository.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

import tensorflow as tf

graph = tf.Graph()
with graph.as_default():
    x = tf.Variable(1, collections=[tf.GraphKeys.LOCAL_VARIABLES])
    y = tf.Variable(1)
    z = x + y
origin_meta_graph = tf.train.export_meta_graph(graph=graph)
new_graph = tf.Graph()
with new_graph.as_default():
    tf.train.import_meta_graph(origin_meta_graph)
    init = tf.local_variables_initializer()
with tf.Session() as sess:
    sess.run(init)
Traceback (most recent call last):
  File "/Users/austin/workspace/aip/3rd/tensorflow/tensorflow/test.py", line 12, in &lt;module&gt;
    init = tf.local_variables_initializer()
  File "/Users/austin/workspace/aip/3rd/tensorflow/venv/lib/python3.6/site-packages/tensorflow/python/ops/variables.py", line 1184, in local_variables_initializer
    return variables_initializer(local_variables())
  File "/Users/austin/workspace/aip/3rd/tensorflow/venv/lib/python3.6/site-packages/tensorflow/python/ops/variables.py", line 1149, in variables_initializer
    return control_flow_ops.group(*[v.initializer for v in var_list], name=name)
  File "/Users/austin/workspace/aip/3rd/tensorflow/venv/lib/python3.6/site-packages/tensorflow/python/ops/variables.py", line 1149, in &lt;listcomp&gt;
    return control_flow_ops.group(*[v.initializer for v in var_list], name=name)
AttributeError: 'Tensor' object has no attribute 'initializer'
import tensorflow as tf

graph = tf.Graph()
with graph.as_default():
    x = tf.Variable(1, collections=[tf.GraphKeys.LOCAL_VARIABLES])
    y = tf.Variable(1)
    z = x + y
origin_meta_graph = tf.train.export_meta_graph(graph=graph)
new_graph = tf.Graph()
with new_graph.as_default():
    tf.train.import_meta_graph(origin_meta_graph)
print(graph.get_collection(tf.GraphKeys.LOCAL_VARIABLES))
print(new_graph.get_collection(tf.GraphKeys.LOCAL_VARIABLES))
[&lt;tf.Variable 'Variable:0' shape=() dtype=int32_ref&gt;]
[&lt;tf.Tensor 'Variable:0' shape=() dtype=int32_ref&gt;]
As it show above, in origin graph local_variable collection is a list of tf.Variable
but in the new graph, is a list of tf.Tensor
&lt;denchmark-h:h3&gt;Work around&lt;/denchmark-h&gt;

Add following registration in your model core
OR Ref to this &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/9674&gt;PR&lt;/denchmark-link&gt;

from tensorflow.core.framework import variable_pb2
from tensorflow.python.framework import ops
from tensorflow.python.ops import variables
from tensorflow.python.framework.ops import register_proto_function

register_proto_function(
    ops.GraphKeys.LOCAL_VARIABLES,
    proto_type=variable_pb2.VariableDef,
    to_proto=variables.Variable.to_proto,
    from_proto=variables.Variable.from_proto)
	</description>
	<comments>
		<comment id='1' author='austinzh' date='2017-05-09T16:13:51Z'>
		tf.local_varliabe_initializer() might not be the right spelling.
		</comment>
		<comment id='2' author='austinzh' date='2017-05-09T16:15:21Z'>
		&lt;denchmark-link:https://github.com/josh11b&gt;@josh11b&lt;/denchmark-link&gt;
 Looks like metagraph import isn't creating Variable objects.  Any ideas why?
		</comment>
		<comment id='3' author='austinzh' date='2017-05-18T14:13:00Z'>
		I'm just facing the same problem. To be more precise, I'm using &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/metrics/accuracy&gt;tf.metrics.accuracy()&lt;/denchmark-link&gt;
 in my training script, which uses local count variables internally.
&lt;denchmark-code&gt;_, accuracy_ = tf.metrics.accuracy(labels=y_ph, predictions=tf.argmax(model_y, axis=1))
tf.add_to_collection('accuracy', accuracy_)
&lt;/denchmark-code&gt;

After saving and restoring the graph using &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/train/import_meta_graph&gt;tf.train.import_meta_graph()&lt;/denchmark-link&gt;
, I'm not able so reuse the accuracy metric, because the required call to &lt;denchmark-link:https://www.tensorflow.org/versions/master/api_docs/python/tf/initialize_local_variables&gt;tf.initialize_local_variables()&lt;/denchmark-link&gt;
 fails as desribed  &lt;denchmark-link:https://github.com/austinzh&gt;@austinzh&lt;/denchmark-link&gt;
.
&lt;denchmark-code&gt;with tf.Session() as sess:
    new_saver = tf.train.import_meta_graph('checkpoint/model.ckpt.meta')
    new_saver.restore(sess, 'checkpoint/model.ckpt')
    # ...
    accuracy_ = tf.get_collection('accuracy')[0]
    sess.run(tf.local_variables_initializer())
    accuracy = sess.run(accuracy_, feed_dict={...})
&lt;/denchmark-code&gt;

is there already any progress on this?
EDIT:
OS: Ubuntu 16.04
TF-Version: r1.1 (native pip, Python 2.7) CPU only
		</comment>
		<comment id='4' author='austinzh' date='2017-05-19T07:40:54Z'>
		Same case for me. I'm using tf.metrics.accuracy() in my training process.
&lt;denchmark-code&gt;self.accuracy_metrics, self.update_accuracy_metrics = tf.metrics.accuracy(self.label,
                                                                                  self.one_hot,
                                                                                  name='accuracy')
&lt;/denchmark-code&gt;

When I try to restore the saved model:
&lt;denchmark-code&gt;new_saver = tf.train.import_meta_graph(save_path + '.meta')
    new_saver.restore(sess, save_path)
    graph = tf.get_default_graph()
&lt;/denchmark-code&gt;

and use the function accuracy again:
&lt;denchmark-code&gt;accuracy_update = graph.get_operation_by_name('accuracy/update_op').outputs[0]

input_data, output_data = validator.read_batch(config['READ_BUFFER_SIZE'], sys.stdin,
                                                       config['SEPARATOR'], config['OUTPUT_SIZE'])
input_data = input_data.reshape(input_data.shape[0], config['SEQ_LENGTH'], config['N_FEATURES'])
output_data = output_data.reshape(output_data.shape[0], config['OUTPUT_SIZE'])

accuracy = sess.run(accuracy_update, {"data:0": input_data, "target:0": output_data,
                                                         "keep_prob:0": config['KEEP_PROB']})
print(accuracy)
&lt;/denchmark-code&gt;

it fails:

Traceback (most recent call last):
File "/usr/local/lib/python3.4/dist-packages/tensorflow/python/client/session.py", line 1022, in _do_call
return fn(*args)
File "/usr/local/lib/python3.4/dist-packages/tensorflow/python/client/session.py", line 1004, in _run_fn
status, run_metadata)
File "/usr/lib/python3.4/contextlib.py", line 66, in exit
next(self.gen)
File "/usr/local/lib/python3.4/dist-packages/tensorflow/python/framework/errors_impl.py", line 466, in raise_exception_on_not_ok_status
pywrap_tensorflow.TF_GetCode(status))
tensorflow.python.framework.errors_impl.FailedPreconditionError: Attempting to use uninitialized value accuracy/count_1
[[Node: accuracy/AssignAdd_3 = AssignAdd[T=DT_FLOAT, _class=["loc:@accuracy/count_1"], use_locking=false, _device="/job:localhost/replica:0/task:0/cpu:0"](accuracy/count_1, accuracy/ToFloat_2)]]
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
File "main.py", line 70, in 
main()
File "main.py", line 46, in main
{"data:0":input_data.reshape(200, 10, 16), "label_aux:0": output_data, "keep_prob:0": config['KEEP_PROB']})
File "/usr/local/lib/python3.4/dist-packages/tensorflow/python/client/session.py", line 767, in run
run_metadata_ptr)
File "/usr/local/lib/python3.4/dist-packages/tensorflow/python/client/session.py", line 965, in _run
feed_dict_string, options, run_metadata)
File "/usr/local/lib/python3.4/dist-packages/tensorflow/python/client/session.py", line 1015, in _do_run
target_list, options, run_metadata)
File "/usr/local/lib/python3.4/dist-packages/tensorflow/python/client/session.py", line 1035, in _do_call
raise type(e)(node_def, op, message)
tensorflow.python.framework.errors_impl.FailedPreconditionError: Attempting to use uninitialized value accuracy/count_1
[[Node: accuracy/AssignAdd_3 = AssignAdd[T=DT_FLOAT, _class=["loc:@accuracy/count_1"], use_locking=false, _device="/job:localhost/replica:0/task:0/cpu:0"](accuracy/count_1, accuracy/ToFloat_2)]]
Caused by op 'accuracy/AssignAdd_3', defined at:
File "main.py", line 70, in 
main()
File "main.py", line 43, in main
accuracy_metrics, update_accuracy_metrics = tf.metrics.accuracy(label_operation, one_hot)
File "/usr/local/lib/python3.4/dist-packages/tensorflow/python/ops/metrics_impl.py", line 332, in accuracy
updates_collections, name or 'accuracy')
File "/usr/local/lib/python3.4/dist-packages/tensorflow/python/ops/metrics_impl.py", line 267, in mean
update_count_op = state_ops.assign_add(count, num_values)
File "/usr/local/lib/python3.4/dist-packages/tensorflow/python/ops/gen_state_ops.py", line 75, in assign_add
use_locking=use_locking, name=name)
File "/usr/local/lib/python3.4/dist-packages/tensorflow/python/framework/op_def_library.py", line 763, in apply_op
op_def=op_def)
File "/usr/local/lib/python3.4/dist-packages/tensorflow/python/framework/ops.py", line 2327, in create_op
original_op=self._default_original_op, op_def=op_def)
File "/usr/local/lib/python3.4/dist-packages/tensorflow/python/framework/ops.py", line 1226, in init
self._traceback = _extract_stack()
FailedPreconditionError (see above for traceback): Attempting to use uninitialized value accuracy/count_1
[[Node: accuracy/AssignAdd_3 = AssignAdd[T=DT_FLOAT, _class=["loc:@accuracy/count_1"], use_locking=false, _device="/job:localhost/replica:0/task:0/cpu:0"](accuracy/count_1, accuracy/ToFloat_2)]]

		</comment>
		<comment id='5' author='austinzh' date='2017-05-19T16:12:25Z'>
		&lt;denchmark-link:https://github.com/sherrym&gt;@sherrym&lt;/denchmark-link&gt;
 Any ideas?
		</comment>
		<comment id='6' author='austinzh' date='2017-06-23T07:13:02Z'>
		&lt;denchmark-link:https://github.com/bsautermeister&gt;@bsautermeister&lt;/denchmark-link&gt;
 any solution for this problem? I face the same problem as yours.
		</comment>
		<comment id='7' author='austinzh' date='2017-06-23T08:01:47Z'>
		&lt;denchmark-link:https://github.com/AlbertXiebnu&gt;@AlbertXiebnu&lt;/denchmark-link&gt;
 Unfortunately no. But I have not check if this has been fixed in TF 1.2. I try to check that in the next days...
		</comment>
		<comment id='8' author='austinzh' date='2017-06-23T09:30:05Z'>
		&lt;denchmark-link:https://github.com/bsautermeister&gt;@bsautermeister&lt;/denchmark-link&gt;
 I have tried in TF1.2, seems that still not work.
		</comment>
		<comment id='9' author='austinzh' date='2017-06-25T23:05:45Z'>
		Same issue here; for me, it seems to be related to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/1045&gt;#1045&lt;/denchmark-link&gt;
. When I set num_epochs to a value other than None in the file where I save the model, I will get the "'Tensor' object has no attribute 'initializer'" error in the file where I restore the model.
(TF 1.2, Python 3.6.1+)
		</comment>
		<comment id='10' author='austinzh' date='2017-07-24T10:50:09Z'>
		Same issue here, while restoring a graph and using string input producer to evaluate model , first I get
"Attempting to use uninitialized value input_producer/limit_epochs/epochs 	 [[Node: input_producer/limit_epochs/CountUpTo = CountUpTo&lt;denchmark-link:input_producer/limit_epochs/epochs&gt;T=DT_INT64, _class=["loc:@input_producer/limit_epochs/epochs"], limit=1, _device="/job:localhost/replica:0/task:0/cpu:0"&lt;/denchmark-link&gt;
]]"
If to fix above issue I run tf.local_variable_intializer() then I get  "'Tensor' object has no attribute 'initializer' error on (TF 1.2, Python 3.6.1+)
		</comment>
		<comment id='11' author='austinzh' date='2017-07-25T05:49:09Z'>
		I did manage to find a work around, upon restoring i removed queue_runners and local_variables from restored graph and it worked
get_default_graph().clear_collection("queue_runners")
get_default_graph().clear_collection("local_variables")
		</comment>
		<comment id='12' author='austinzh' date='2017-08-01T10:01:56Z'>
		&lt;denchmark-link:https://github.com/gauravsindhwani&gt;@gauravsindhwani&lt;/denchmark-link&gt;
 , can you still run the code successfully after you remove these two collections since they are actually part of the graph. I try your way but find the program is stuck after restoring.
		</comment>
		<comment id='13' author='austinzh' date='2017-09-18T21:02:11Z'>
		&lt;denchmark-link:https://github.com/gauravsindhwani&gt;@gauravsindhwani&lt;/denchmark-link&gt;
, this approach seams working ok for me. I use streaming_accuracy and it seems create many local variable "accuracy", which are no longer used. So remove local_variables seems to be a good way to hack it.
		</comment>
		<comment id='14' author='austinzh' date='2017-12-22T07:27:51Z'>
		It has been 14 days with no activity and the awaiting tensorflower label was assigned. Please update the label and/or status accordingly.
		</comment>
		<comment id='15' author='austinzh' date='2018-01-05T19:06:14Z'>
		Nagging Awaiting TensorFlower: It has been 14 days with no activityand the awaiting tensorflower label was assigned. Please update the label and/or status accordingly.
		</comment>
		<comment id='16' author='austinzh' date='2018-01-23T23:12:32Z'>
		A member of the TensorFlow organization has replied after the stat:awaiting tensorflower label was applied.
		</comment>
		<comment id='17' author='austinzh' date='2018-01-25T01:26:32Z'>
		&lt;denchmark-link:https://github.com/suharshs&gt;@suharshs&lt;/denchmark-link&gt;
 has been working on MetaGraphDef related stuff, and might have some ideas.
		</comment>
		<comment id='18' author='austinzh' date='2018-02-08T19:30:07Z'>
		Nagging Awaiting TensorFlower: It has been 14 days with no activity and the awaiting tensorflower label was assigned. Please update the label and/or status accordingly.
		</comment>
		<comment id='19' author='austinzh' date='2018-02-23T14:04:17Z'>
		Nagging Awaiting TensorFlower: It has been 14 days with no activity and the awaiting tensorflower label was assigned. Please update the label and/or status accordingly.
		</comment>
		<comment id='20' author='austinzh' date='2018-03-05T22:17:16Z'>
		It works well on TF 1.4.1, it seems this issue have been fixed by &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/2d1823f7be0d65d4ee28b7c6ea2acaac01f1db61&gt;2d1823f&lt;/denchmark-link&gt;
 . Thanks.
		</comment>
		<comment id='21' author='austinzh' date='2018-03-20T10:21:11Z'>
		Nagging Awaiting TensorFlower: It has been 14 days with no activity and the awaiting tensorflower label was assigned. Please update the label and/or status accordingly.
		</comment>
	</comments>
</bug>