<bug id='38114' author='bby1220' open_date='2020-04-01T11:54:07Z' closed_time='2020-04-02T00:54:55Z'>
	<summary>[BUG] map method of tf.data.Dataset has a bug, TensorFlow version = 2.1.0</summary>
	<description>
One example of map method in the following official website said that map_func get same shape and dtype as 'tf.Tensor', however it's NOT
&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/data/Dataset#map&gt;https://www.tensorflow.org/api_docs/python/tf/data/Dataset#map&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;dataset = Dataset.range(5) 
# `map_func` takes a single argument of type `tf.Tensor` with the same 
# shape and dtype. 
result = dataset.map(lambda x: x + 1) 
&lt;/denchmark-code&gt;

According to the official example, I think item in _func of the following code should be an EagetTensor but it turns out to be a Tensor instead.
&lt;denchmark-code&gt;import tensorflow as tf

def _func(item):
    # I expect an EagerTensor bug get a Tensor here
    print(type(item)) # ==&gt; &lt;class 'tensorflow.python.framework.ops.Tensor'&gt;
    return item

tensor = tf.convert_to_tensor(['hello', 'world'])
print(type(tensor)) # ==&gt; &lt;class 'tensorflow.python.framework.ops.EagerTensor'&gt;
dataset = tf.data.Dataset.from_tensor_slices(tensor)
dataset.map(_func)
&lt;/denchmark-code&gt;

I want to use .numpy() to convert an EagerTensor to numpy arrays and then make some operations using numpy, but very suprisingly I got a Tensor in _func and sadly I don't know how to make it for Tensor
	</description>
	<comments>
		<comment id='1' author='bby1220' date='2020-04-02T00:54:36Z'>
		from the following website I know it is a feature rather than a bug for the issue I submit, but I don't think this is a good feature.
&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/executing_eagerly&gt;https://www.tensorflow.org/api_docs/python/tf/executing_eagerly&lt;/denchmark-link&gt;


Eager execution is enabled by default and this API returns True in most of cases. However, this API might return False in the following use cases.

Executing inside tf.function, unless under tf.init_scope or tf.config.experimental_run_functions_eagerly(True) is previously called.
Executing inside a transformation function for tf.dataset.
tf.compat.v1.disable_eager_execution() is called.


		</comment>
		<comment id='2' author='bby1220' date='2020-04-02T00:54:56Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38114&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38114&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>