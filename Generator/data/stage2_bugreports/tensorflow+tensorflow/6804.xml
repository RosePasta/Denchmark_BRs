<bug id='6804' author='albertz' open_date='2017-01-12T10:57:19Z' closed_time='2017-02-12T23:47:38Z'>
	<summary>Defun broken: errors_impl.NotFoundError: Op type not registered</summary>
	<description>
This code fails:
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow.python.framework import function

@function.Defun(tf.float32)
def custom_op(x):
    return x

x = tf.Variable(1, dtype=tf.float32)

sess = tf.Session()
sess.run(tf.global_variables_initializer())
print(sess.run(custom_op(x)))

sess.close()
&lt;/denchmark-code&gt;

Exception:
&lt;denchmark-code&gt;tensorflow.python.framework.errors_impl.NotFoundError: Op type not registered 'custom_op_da39a3ee'
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='albertz' date='2017-01-12T13:27:19Z'>
		The example is partly taken from &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/3710&gt;#3710&lt;/denchmark-link&gt;
 although the bug reported there is probably a different one and was already fixed.
		</comment>
		<comment id='2' author='albertz' date='2017-01-12T15:53:59Z'>
		Version info?
		</comment>
		<comment id='3' author='albertz' date='2017-01-12T15:58:04Z'>
		Version 0.12.0.
		</comment>
		<comment id='4' author='albertz' date='2017-01-12T16:21:07Z'>
		Somehow running the init op breaks things. The code below works, but fails in the same way if you uncomment the sess.run(init_op) line
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow.python.framework import function

tf.reset_default_graph()

@function.Defun(tf.float32)
def custom_op(x):
    return tf.identity(x)

x = tf.placeholder(dtype=tf.float32)
sess = tf.Session()
init_op = tf.global_variables_initializer()
#sess.run(init_op)
x2 = custom_op(x)
print(sess.run(x2, feed_dict={x: 1.0}))

&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='albertz' date='2017-01-12T16:25:20Z'>
		&lt;denchmark-link:https://github.com/zffchen78&gt;@zffchen78&lt;/denchmark-link&gt;
 must all the custom ops be created before the first  call? I didn't see this req in the docs
		</comment>
		<comment id='6' author='albertz' date='2017-01-12T16:26:02Z'>
		&lt;denchmark-link:https://github.com/albertz&gt;@albertz&lt;/denchmark-link&gt;
 a work-around is to create your  and save node before first run call
		</comment>
		<comment id='7' author='albertz' date='2017-01-12T16:47:14Z'>
		How do I save it before the first run call?
		</comment>
		<comment id='8' author='albertz' date='2017-01-12T17:22:31Z'>
		Ie in my example, you can change order of first  session run and creating init_op and it'll work
		</comment>
		<comment id='9' author='albertz' date='2017-01-12T17:27:51Z'>
		I see. So the workaround for my example:
&lt;denchmark-code&gt;
import tensorflow as tf
from tensorflow.python.framework import function

@function.Defun(tf.float32)
def custom_op(x):
    return x

x = tf.Variable(1, dtype=tf.float32)
y = custom_op(x)
init_op = tf.global_variables_initializer()

sess = tf.Session()
sess.run(init_op)
print(sess.run(y))

sess.close()
&lt;/denchmark-code&gt;

But I think this is a bug then, right? Because I would suppose that this should work. Or is this hard to fix?
		</comment>
		<comment id='10' author='albertz' date='2017-01-12T17:44:52Z'>
		Yes, I think it was unexpected, I'll leave to &lt;denchmark-link:https://github.com/zffchen78&gt;@zffchen78&lt;/denchmark-link&gt;
 to comment if it's intended behavior or not
		</comment>
		<comment id='11' author='albertz' date='2017-01-13T16:01:53Z'>
		&lt;denchmark-link:https://github.com/albertz&gt;@albertz&lt;/denchmark-link&gt;
 the behavior you see is explainable.
the line
sess = tf.Session()
effectively snapshots the default graph which includes the functions instantiated so far at that point.
If the function is instantiated (the line custom_op(x)) after that point, so far, our implementation does not re-snapshot the graph. That might be feasible but may be a bit complex, too.
		</comment>
	</comments>
</bug>