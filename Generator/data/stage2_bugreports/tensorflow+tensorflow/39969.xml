<bug id='39969' author='areiner222' open_date='2020-05-28T20:29:49Z' closed_time='2020-10-17T21:02:13Z'>
	<summary>Simple keras model "predict" call fails inside py_function</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes. Created a simple example for reproducibility.
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04.3 LTS
TensorFlow installed from (source or binary): pip
TensorFlow version (use command below): v2.2.0-rc4-8-g2b96f3662b 2.2.0
Python version: Python 3.7.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: CUDA 10.2 / cuDNN 7.6.5
GPU model and memory: GeForce GTX 980 Ti / 6GB

Describe the current behavior
Using the 'predict' api for a keras model inside a py_function throws the following error:
LookupError: No gradient defined for operation 'IteratorGetNext' (op type: IteratorGetNext)
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf

inp = tf.keras.Input(shape=(5,))
out = tf.keras.layers.Dense(1)(inp)
model = tf.keras.Model(inp, out)

def outer_func(arr):
    def _func(x):
        res = model.predict(x)
        return res

    out = tf.py_function(
        _func,
        (arr,),
        tf.float32
    )
    return out

outer_func(np.random.rand(10, 5))
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='areiner222' date='2020-05-29T07:40:30Z'>
		I have tried in colab with TF version 2.2 ,nightly version() and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/b72b16e5ec0c4339658c43ba4f3fb1db/untitled932.ipynb&gt;here.&lt;/denchmark-link&gt;
Thanks!
		</comment>
		<comment id='2' author='areiner222' date='2020-06-04T17:39:15Z'>
		model.predict contains a lot of state-management and input processing logic that is not designed for this usecase. Can you try instead just calling the model? Eg:
&lt;denchmark-code&gt;def _func(x):
        res = model(x)
        return res
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='areiner222' date='2020-06-04T17:51:52Z'>
		I cannot unfortunately because I am using a third party library that wraps helper functions / class around the model.predict call. I'm using in a py_function because I'm including it in a tf.data.Dataset pipeline.
		</comment>
		<comment id='4' author='areiner222' date='2020-09-26T20:01:36Z'>
		This is fixed with latest tf-nightly.
See &lt;denchmark-link:https://colab.research.google.com/gist/ymodak/d123012b1d690f653a078458f4174238/untitled9.ipynb&gt;gist&lt;/denchmark-link&gt;

Output:
&lt;tf.Tensor 'EagerPyFunc_1:0' shape=&lt;unknown&gt; dtype=float32&gt;
		</comment>
		<comment id='5' author='areiner222' date='2020-10-17T21:02:14Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39969&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39969&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>