<bug id='31398' author='ozanyildiz93' open_date='2019-08-07T03:46:06Z' closed_time='2019-08-12T15:18:05Z'>
	<summary>The precision difference between tensorflow and numpy for matrix multiplication</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.13.1
Python version: 3.6.0
Bazel version (if compiling from source): NA
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version: NA
GPU model and memory: NA

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
Tensorflow matrix multiplication on CPU does not reproduce same result as numpy matrix multiplication for float32. Furthermore, (X @ Y) and (Y.T @ X.T).T produces different results.
Is this a normal behavior, if it is, then which version of the matrix product should be taken as correct output?
Describe the expected behavior
Theoretically (X @ Y) and (Y.T @ X.T).T should evaluate to same value and their value should be same as numpy version.
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
import numpy as np
import tensorflow as tf

x = np.arange(150, dtype=np.float32).reshape(-1, 5)/10
y = np.arange(200, dtype=np.float32).reshape(-1, 5)/10
X_tf = tf.Variable(x)
XT_tf = tf.Variable(x.T)
Y_tf = tf.Variable(y)
YT_tf = tf.Variable(y.T)
YXT1_tf = Y_tf @ XT_tf
YXT2_tf = tf.transpose(X_tf @ YT_tf)
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    YXT1, YXT2 = sess.run([YXT1_tf, YXT2_tf])
yxt1 = y @ x.T
yxt2 = (x @ y.T).T

print(np.max(np.abs(YXT1-YXT2)), np.max(np.abs(yxt1-yxt2)))
print(np.max(np.abs(yxt1-YXT1)), np.max(np.abs(yxt1-YXT2)))
which outputs
0.00012207031 0.0
0.00012207031 0.00012207031
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='ozanyildiz93' date='2019-08-08T05:43:49Z'>
		I was able to replicate the issue with TF verison-1.13, please find the &lt;denchmark-link:https://colab.sandbox.google.com/drive/1HpwjLl3nOSSFk7965__kiR22NoBsjjz_#scrollTo=b0BhWDenuN-y&gt;Gist&lt;/denchmark-link&gt;
 of collab.Thanks
		</comment>
		<comment id='2' author='ozanyildiz93' date='2019-08-12T14:59:48Z'>
		&lt;denchmark-link:https://github.com/ozanyildiz93&gt;@ozanyildiz93&lt;/denchmark-link&gt;
 I cannot reproduce the issue in tf-nightly. I think this was resolved in the . Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/ba880d7fb9ffdd6af13068a116aeed9a/tf_31398.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='3' author='ozanyildiz93' date='2019-08-12T15:18:05Z'>
		Thank you. I will upgrade to the latest version in that case.
		</comment>
		<comment id='4' author='ozanyildiz93' date='2019-08-12T15:18:06Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=31398&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=31398&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>