<bug id='7443' author='ahundt' open_date='2017-02-11T21:21:53Z' closed_time='2017-05-03T19:25:27Z'>
	<summary>Add Continuous Integration + Review Requirements to CONTRIBUTING.md</summary>
	<description>
Could some basic instructions and suggestions be added to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/CONTRIBUTING.md&gt;CONTRIBUTING.md&lt;/denchmark-link&gt;
?
Example notes to add:

correctly installing and configuring a compliant python/C++ linter
links and explanation of other guidelines that must be followed
how to run tests on your own machine

	</description>
	<comments>
		<comment id='1' author='ahundt' date='2017-02-11T23:09:22Z'>
		I agree that it would be useful to community. I think perhaps someone who has recently gone through the process might be motivated to put the important things together into a nice guide.
Some snippets from my development notes:
making a PR: &lt;denchmark-link:https://gist.github.com/yaroslavvb/bdb0a92f2a516ebbe2d386c48f5e2c45&gt;https://gist.github.com/yaroslavvb/bdb0a92f2a516ebbe2d386c48f5e2c45&lt;/denchmark-link&gt;


license

You must sign CLA agreement. See comments from Chris DiBona for why this license was chosen -- &lt;denchmark-link:https://www.reddit.com/r/MachineLearning/comments/3s4qpm/google_tensorflow_released/&gt;https://www.reddit.com/r/MachineLearning/comments/3s4qpm/google_tensorflow_released/&lt;/denchmark-link&gt;

If you created your commits with a wrong address (ie, default one git sets up), you have to rewrite your commit history to change your address to the one that corresponds to the one you signed CLA with. (github help pages a rewriting script that provded useful for this,  &lt;denchmark-link:https://help.github.com/articles/changing-author-info/&gt;https://help.github.com/articles/changing-author-info/&lt;/denchmark-link&gt;
)

pylint

&lt;denchmark-code&gt;pip install pylint
wget -O /tmp/pylintrc https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/tools/ci_build/pylintrc
pylint myfile.py --rcfile=/tmp/pylintrc
&lt;/denchmark-code&gt;


buildifier

Install &lt;denchmark-link:https://github.com/bazelbuild/buildifier&gt;https://github.com/bazelbuild/buildifier&lt;/denchmark-link&gt;
 and running it over the BUILD file to fix any formatting issues

clang format
To see style corrections suggested by clang-format

&lt;denchmark-code&gt;brew install clang-format
clang-format tensorflow/stream_executor/cuda/cuda_diagnostics.cc --style=google &gt; /tmp/cuda_diagnostics.cc
diff tensorflow/stream_executor/cuda/cuda_diagnostics.cc /tmp/cuda_diagnostics.cc

&lt;/denchmark-code&gt;


Running tests

Use bazel test. To see pip install requirements,  check in tensorflow/tools/ci_build/install/install_pip_packages.sh
Most recently this meant doing this
&lt;denchmark-code&gt;pip install -I --upgrade setuptools
pip install portpicker
pip install mock
pip install pep8
pip install pylint
pip install py-cpuinfo
pip install pandas==0.18.1
pip install wheel
pip install --upgrade six==1.10.0
pip install --upgrade werkzeug==0.11.10
pip install --upgrade protobuf==3.0.0

&lt;/denchmark-code&gt;

Then on Ubuntu:
&lt;denchmark-code&gt;export LD_LIBRARY_PATH="/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH"

export flags="--config=opt --config=cuda -k"
bazel test $flags //tensorflow/python/...
&lt;/denchmark-code&gt;

On MacOS: (bazel needs to be explicitly told to pass env vars for some reason)
&lt;denchmark-code&gt;export CUDA_HOME=/usr/local/cuda
export DYLD_LIBRARY_PATH=/usr/local/cuda/lib:/usr/local/cuda/extras/CUPTI/lib
export LD_LIBRARY_PATH=$DYLD_LIBRARY_PATH
export PATH=$DYLD_LIBRARY_PATH:$PATH

export flags="--config=cuda --config=opt -k --action_env PATH --action_env DYLD_LIBRARY_PATH --action_env LD_LIBRARY_PATH -k"
bazel test $flags //tensorflow/python/...
&lt;/denchmark-code&gt;

For changes to core framework
bazel test $flags //tensorflow/... 
Keeping flags in $flags is important because if you you forget a flag, and do bazel run or bazel test with a new setting, it'll start building everything from scratch, aka 20+ mins of machine being semi-unresponsive.
For long running tests, tmux is useful for provide robustness against disconnection/closing terminal:
&lt;denchmark-code&gt;tmux new -s bazel -n 0
bazel test //tensorflow/...

&lt;/denchmark-code&gt;

Also, this to keep bazel from wiping its state overnight
echo "startup --max_idle_secs=100000000"  &gt; ~/.bazelrc 
Also, some notes on general philosophy of contributions -- when you contribute something to TensorFlow, the maintenance burden is transferred to the Google TensorFlow team. This means that benefit of contribution must be compared against the cost of maintaining that feature until the heat death of universe.
Hence there are cases when you want to extend functionality of TensorFlow, while remaining the owner/maintainer of this extension. This can be done by keeping extra functionality in a separate repo and using TensorFlow API to bring it in during runtime. For instance, new kernels/ops can be added to TensorFlow using TensorFlow plugin mechanism (load_library)
		</comment>
		<comment id='2' author='ahundt' date='2017-02-11T23:44:20Z'>
		Awesome info! Since you mentioned tmux there is also &lt;denchmark-link:http://byobu.co/&gt;http://byobu.co/&lt;/denchmark-link&gt;
 which is built on top of tmux and improves usability.
		</comment>
		<comment id='3' author='ahundt' date='2017-02-15T00:17:31Z'>
		&lt;denchmark-link:https://github.com/ahundt&gt;@ahundt&lt;/denchmark-link&gt;
, would you be willing to contribute a document to this effect? &lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;
, do you have any other suggestions?
		</comment>
		<comment id='4' author='ahundt' date='2017-02-15T01:21:22Z'>
		One quick way to contribute would be to use our devel dockerfiles.
But what is already mentioned sounds good to me.
		</comment>
		<comment id='5' author='ahundt' date='2017-02-15T21:38:44Z'>
		&lt;denchmark-link:https://github.com/aselle&gt;@aselle&lt;/denchmark-link&gt;
 I don't know all the policies at the moment that's why I asked, heh
		</comment>
		<comment id='6' author='ahundt' date='2017-02-18T17:27:30Z'>
		I've added a couple of things (buildifier, clang-format) to original reply. I'll keep merging in extra things I come across in there until there's a better place
		</comment>
		<comment id='7' author='ahundt' date='2017-02-20T08:04:57Z'>
		&lt;denchmark-link:https://github.com/yaroslavvb&gt;@yaroslavvb&lt;/denchmark-link&gt;
 Could you just create a pull request directly adding the text to &lt;denchmark-link:CONTRIBUTING.md&gt;CONTRIBUTING.md&lt;/denchmark-link&gt;
?
Regarding the folder of docker files, some of those scripts do look fairly straightforward and could be referenced:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tensorflow/tools/docker&gt;https://github.com/tensorflow/tensorflow/tree/master/tensorflow/tools/docker&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='ahundt' date='2017-04-28T17:16:36Z'>
		FYI, we are working on the suggested improvements to CONTRIBUTING.md and possibly the docker files as well.
		</comment>
		<comment id='9' author='ahundt' date='2017-05-04T03:30:48Z'>
		&lt;denchmark-link:https://github.com/vrv&gt;@vrv&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/caisq&gt;@caisq&lt;/denchmark-link&gt;
 Thanks that guide looks super helpful!
		</comment>
	</comments>
</bug>