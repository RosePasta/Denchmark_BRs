<bug id='24976' author='matth79' open_date='2019-01-16T23:05:31Z' closed_time='2020-01-21T04:41:11Z'>
	<summary>Linking to both tensorflow and protobuf causes segmentation fault during static initializers</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): 4.18.10-1rodete2-amd64 (Debian-derived)
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): nightly Jan 15, 2018 (protobuf built from HEAD Jan 15)
Python version: N/A
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): gcc 7.3.0
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
Aborts on SIGSEGV
Describe the expected behavior
Exits cleanly
Details
I want to create an application that calls the C API but also can parse protocol buffers on its own behalf. For that want to link dynamically to tensorflow and statically to protobuf. When I do this, it seems like protobuf may be tricking libtensorflow.so into thinking that it has run some static initializers that it in fact has not run (on the static variables needed by its own internal copy of protobuf).
The segfault is only on Linux. Linking the same way on Windows works fine.
I have varied libtensorflow and protobuf versions, and it seems to happen with all of them. It also happens whether I choose static or dynamic linking for my binary's copy of protobuf.
I also tried building my own liba.so that itself statically links protobuf and then a binary that linked dynamically to "a" and statically to protobuf. This worked, which is pointing away from this being a purely protobuf issue.
Code to reproduce the issue

bash

&lt;denchmark-code&gt;c++ -o main \
  -L$TF_DIR/lib -I$TF_DIR/include \
  -L$PROTO_DIR/lib -I$PROTO_DIR/include \
  main.cc -l tensorflow -l protobuf

LD_LIBRARY_PATH=$TF_DIR/lib:$PROTO_DIR/lib ./main
&lt;/denchmark-code&gt;

Removing -lprotobuf from the above command will get rid of the segfault.

main.cc

&lt;denchmark-code&gt;int main(int argc, char** argv) {}
&lt;/denchmark-code&gt;

Other info / logs
Program received signal SIGSEGV, Segmentation fault.
0x00007fffed8f20b8 in tensorflow::kernel_factory::OpKernelRegistrar::InitInternal(tensorflow::KernelDef const*, absl::string_view, std::un
ique_ptr&lt;tensorflow::kernel_factory::OpKernelFactory, std::default_deletetensorflow::kernel_factory::OpKernelFactory &gt;) ()
from /usr/local/google/home/mattharvey/no_backup/libtensorflow/lib/libtensorflow_framework.so
(gdb) bt
#0  0x00007fffed8f20b8 in tensorflow::kernel_factory::OpKernelRegistrar::InitInternal(tensorflow::KernelDef const*, absl::string_view, std
::unique_ptr&lt;tensorflow::kernel_factory::OpKernelFactory, std::default_deletetensorflow::kernel_factory::OpKernelFactory &gt;) ()
from /usr/local/google/home/mattharvey/no_backup/libtensorflow/lib/libtensorflow_framework.so
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/1&gt;#1&lt;/denchmark-link&gt;
  0x00007fffed88336a in tensorflow::kernel_factory::OpKernelRegistrar::OpKernelRegistrar(tensorflow::KernelDef const*, absl::string_view
, tensorflow::OpKernel* ()) ()
from /usr/local/google/home/mattharvey/no_backup/libtensorflow/lib/libtensorflow_framework.so
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/2&gt;#2&lt;/denchmark-link&gt;
  0x00007fffed85f806 in _GLOBAL__sub_I_dataset.cc ()
from /usr/local/google/home/mattharvey/no_backup/libtensorflow/lib/libtensorflow_framework.so
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/3&gt;#3&lt;/denchmark-link&gt;
  0x00007ffff7de88aa in call_init (l=, argc=argc@entry=1, argv=argv@entry=0x7fffffffdc68, env=env@entry=0x7fffffffdc78)
at dl-init.c:72
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/4&gt;#4&lt;/denchmark-link&gt;
  0x00007ffff7de89bb in call_init (env=0x7fffffffdc78, argv=0x7fffffffdc68, argc=1, l=) at dl-init.c:30
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/5&gt;#5&lt;/denchmark-link&gt;
  _dl_init (main_map=0x7ffff7ffe170, argc=1, argv=0x7fffffffdc68, env=0x7fffffffdc78) at dl-init.c:120
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/6&gt;#6&lt;/denchmark-link&gt;
  0x00007ffff7dd9c5a in _dl_start_user () from /lib64/ld-linux-x86-64.so.2
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/7&gt;#7&lt;/denchmark-link&gt;
  0x0000000000000001 in ?? ()
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/8&gt;#8&lt;/denchmark-link&gt;
  0x00007fffffffdf2e in ?? ()
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/9&gt;#9&lt;/denchmark-link&gt;
  0x0000000000000000 in ?? ()
0x00007fffed8f20a0 &lt;+80&gt;:    mov    0x50(%r15),%rax
0x00007fffed8f20a4 &lt;+84&gt;:    lea    -0xa0(%rbp),%rbx
0x00007fffed8f20ab &lt;+91&gt;:    mov    %rbx,%rdi
0x00007fffed8f20ae &lt;+94&gt;:    mov    (%rax),%r8
0x00007fffed8f20b1 &lt;+97&gt;:    mov    0x48(%r15),%rax
0x00007fffed8f20b5 &lt;+101&gt;:   mov    (%rax),%rsi
=&gt; 0x00007fffed8f20b8 &lt;+104&gt;:   mov    -0x18(%r8),%r9
How did -0x18(%r8) get illegal?
(gdb) info register r8
r8             0x0                 0
-0x18 is certainly illegal. Where did it come from? 0x50(%r15) if we trace through the above.
(gdb) info register r15
r15            0x555555768d10      93824994413840
(gdb) x/2 0x555555768d60
0x555555768d60: 0xee2c0bc0      0x00007fff
(gdb) x/2 0x00007fffee2c0bc0
0x7fffee2c0bc0 google::protobuf::internal::fixed_address_empty_string:        0x00000000      0x00000000
... the 0x0 that ended up in r8.
Zoom out to find lots of stuff uninitialized:
(gdb) x/64x 0x7fffee4ddb00
0x7fffee4ddb00 google::protobuf::_DoubleValue_default_instance_:      0x00000000      0x00000000      0x00000000      0x00000000
0x7fffee4ddb10 google::protobuf::_DoubleValue_default_instance_+16:   0x00000000      0x00000000      0x00000000      0x00000000
0x7fffee4ddb20 &lt;_ZStL8__ioinit&gt;:        0x00000000      0x00000000      0x00000000      0x00000000
0x7fffee4ddb30 &lt;_ZStL8__ioinit&gt;:        0x00000000      0x00000000      0x00000000      0x00000000
0x7fffee4ddb40 google::protobuf::internal::RepeatedPrimitiveDefaults::default_instance()::instance:   0x00000000      0x00000000      0x00000000        0x00000000
0x7fffee4ddb50 &lt;guard variable for google::protobuf::internal::RepeatedStringTypeTraits::GetDefaultRepeatedField()::instance&gt;:  0x000000000x00000000      0x00000000      0x00000000
0x7fffee4ddb60 &lt;guard variable for google::protobuf::internal::(anonymous namespace)::Register(google::protobuf::MessageLite const*, int, google::protobuf::internal::ExtensionInfo)::local_static_registry&gt;:     0x00000000      0x00000000      0x00000000      0x00000000
0x7fffee4ddb70 &lt;_ZStL8__ioinit&gt;:        0x00000000      0x00000000      0x00000000      0x00000000
0x7fffee4ddb80 google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase*)::mu: 0x00000000      0x00000000      0x00000000        0x00000000
0x7fffee4ddb90 google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase*)::mu+16:      0x00000000      0x000000000x00000000      0x00000000
0x7fffee4ddba0 google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase*)::mu+32:      0x00000000      0x000000000x00000000      0x00000000
0x7fffee4ddbb0 &lt;guard variable for google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase*)::runner&gt;:  0x000000000x00000000      0x00000000      0x00000000
0x7fffee4ddbc0 google::protobuf::internal::fixed_address_empty_string:        0x00000000      0x00000000      0x00000000      0x00000000
0x7fffee4ddbd0 google::protobuf::internal::implicit_weak_message_default_instance:    0x00000000      0x00000000      0x00000000      0x00000000
0x7fffee4ddbe0 google::protobuf::internal::implicit_weak_message_default_instance+16: 0x00000000      0x00000000      0x00000000      0x00000000
0x7fffee4ddbf0 google::protobuf::ShutdownProtobufLibrary()::is_shutdown:      0x00000000      0x00000000      0x00000000      0x00000000
	</description>
	<comments>
		<comment id='1' author='matth79' date='2019-01-17T06:36:27Z'>
		I found a temporary workaround for myself, but it should still be possible to do this from released binaries without the need to rebuild.
Local opt build works from r1.12 at &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/a6d8ffae097d0132989ae4688d224121ec6d8f35&gt;a6d8ffa&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;bazel build -c opt --copt=-mavx --define=grpc_no_ares=true //tensorflow/tools/lib_package:libtensorflow

tar zxvf ../tensorflow/bazel-bin/tensorflow/tools/lib_package/libtensorflow.tar.gz
&lt;/denchmark-code&gt;

However I get the segfault from
&lt;denchmark-link:https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-1.12.0.tar.gz&gt;https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-1.12.0.tar.gz&lt;/denchmark-link&gt;

with protobuf built locally from
&lt;denchmark-link:https://github.com/protocolbuffers/protobuf/releases/download/v3.6.0/protobuf-all-3.6.0.tar.gz&gt;https://github.com/protocolbuffers/protobuf/releases/download/v3.6.0/protobuf-all-3.6.0.tar.gz&lt;/denchmark-link&gt;

and also from
&lt;denchmark-link:https://storage.googleapis.com/tensorflow-nightly/github/tensorflow/lib_package/libtensorflow-cpu-linux-x86_64.tar.gz&gt;https://storage.googleapis.com/tensorflow-nightly/github/tensorflow/lib_package/libtensorflow-cpu-linux-x86_64.tar.gz&lt;/denchmark-link&gt;
   # Wed Jan 16 22:33:29 PST 2019
with protobuf built locally from head (3.6.1) around the same time.
		</comment>
		<comment id='2' author='matth79' date='2019-02-06T00:40:44Z'>
		I just hit this with the libtegra_tensorflow.so that Nvidia provides on their Xavier board's rootfs. Is building from scratch really the only workaround?
		</comment>
		<comment id='3' author='matth79' date='2019-02-07T13:56:43Z'>
		I also stumbled upon this problem.

On Ubuntu 18.04.1, using GCC 7.3.0
Using libtensorflow-cpu-linux-x86_64-1.12.0.tar.gz from the same link @matth79 mentioned above.
Using protobuf 3.6.1 built locally.

The problem is easy to replicate:

#include "iostream"
#include "tensorflow/c/c_api.h"
// Enable this line to include protobuf
//#include "google/protobuf/message.h"
// Main program entry
int main(int argc, char* argv[])
{
std::cout &lt;&lt; "Tensorflow version: " &lt;&lt; TF_Version();
return 0;
}

Link with -ltensorflow and it works fine. Uncomment the line to include protobuf and link with both  -ltensorflow and -lprotobuf and observe the segmentation fault on initialization.
		</comment>
		<comment id='4' author='matth79' date='2019-02-08T19:30:28Z'>
		&lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;
 can either of you comment?
		</comment>
		<comment id='5' author='matth79' date='2019-03-11T19:24:56Z'>
		This has been over a month ago and we're still having issues with this. An update or fix would be very much appreciated!
		</comment>
		<comment id='6' author='matth79' date='2019-03-11T21:51:40Z'>
		We are also having issues with this problem on NVidia's Xavier and would appreciate and update/fix.  If there are no plans to fix the bug, we will try to build Tensorflow with the hints from matth79.
		</comment>
		<comment id='7' author='matth79' date='2019-03-11T22:14:57Z'>
		Sounds like it must be a symbol conflict. And since it's the same library, it's not a case where we can just rename one of the symbols to avoid the conflict. The workarounds sound like (1) only load the second copy of protobuf in a .so that does not use TensorFlow, and you can use both that .so and TensorFlow's .so from your main program, (2) instead of linking normally, dlopen() TensorFlow with RTLD_DEEPBIND set so TensorFlow prefers its own symbols.
I'm not sure what TensorFlow can do. Putting something in the global symbol table which conflicts with TensorFlow's protobuf usage isn't something we can easily work around. Unless someone has a suggestion?
		</comment>
		<comment id='8' author='matth79' date='2019-03-14T06:26:11Z'>
		Hello. I get the same problem , the info like this:
0x00007fffddef3058 in tensorflow::kernel_factory::OpKernelRegistrar::InitInternal(tensorflow::KernelDef const*, absl::string_view, std::unique_ptr&lt;tensorflow::kernel_factory::OpKernelFactory, std::default_deletetensorflow::kernel_factory::OpKernelFactory &gt;) ()
from /usr/local/lib/python3.5/dist-packages/tensorflow/python/../libtensorflow_framework.so
I am using C++ to call python's tensorflow. The protobuf library is called in our own environment, when we call python's “import tensorflow as tf” in C++ in our own environment. The above problem will occur. When the“ import tensorflow as tf “is deleted, the problem will disappear. Do you know the reason?
I think that the protobuf of my environment conflicts with the protobuf of tensorflow.
can you help me . thanks
		</comment>
		<comment id='9' author='matth79' date='2019-03-18T21:25:52Z'>
		This is indeed a problem with protobuf; there's not much TF itself can do as &lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;
 mentioned. We dealt with this by running TF operations in a separate process that talks over a UNIX socket, but &lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;
's solutions should work too.
		</comment>
		<comment id='10' author='matth79' date='2019-03-18T21:27:14Z'>
		I hope the readers have learned a valuable lesson about using static initializers in this way from this thread.
		</comment>
		<comment id='11' author='matth79' date='2020-01-13T03:59:48Z'>
		I also have this issue. Reproduced with libtensorflow-gpu-linux-x86_64-1.15.0.tar.gz.
		</comment>
		<comment id='12' author='matth79' date='2020-01-21T04:41:11Z'>
		While I do not want to close this issue, as &lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;
 wrote in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/24976#issuecomment-471760777&gt;#24976 (comment)&lt;/denchmark-link&gt;
 , I am not sure what we can do.
TF is working on the slow path to hide all protobuf symbols from its API surface. Even then static initializers will be executed twice. I am not sure what will happen, as I am not sure how protobuf uses them.
So, unfortunately I can only offer &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/24976#issuecomment-471760777&gt;#24976 (comment)&lt;/denchmark-link&gt;
 , and we should close this as "Infeasible".
		</comment>
		<comment id='13' author='matth79' date='2020-01-21T04:41:14Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/24976&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/24976&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='14' author='matth79' date='2020-03-24T01:13:52Z'>
		
Hello. I get the same problem , the info like this:
0x00007fffddef3058 in tensorflow::kernel_factory::OpKernelRegistrar::InitInternal(tensorflow::KernelDef const*, absl::string_view, std::unique_ptr&lt;tensorflow::kernel_factory::OpKernelFactory, std::default_deletetensorflow::kernel_factory::OpKernelFactory &gt;) ()
from /usr/local/lib/python3.5/dist-packages/tensorflow/python/../libtensorflow_framework.so
I am using C++ to call python's tensorflow. The protobuf library is called in our own environment, when we call python's “import tensorflow as tf” in C++ in our own environment. The above problem will occur. When the“ import tensorflow as tf “is deleted, the problem will disappear. Do you know the reason?
I think that the protobuf of my environment conflicts with the protobuf of tensorflow.
can you help me . thanks

I ran into core dump issue when call import tensorflow using C++ Python API.
Thread 1 "tf" received signal SIGSEGV, Segmentation fault. google::protobuf::internal::AddDescriptors(google::protobuf::internal::DescriptorTable const*) () from /usr/local/lib/python3.6/dist-packages/google/protobuf/pyext/_message.cpython-36m-x86_64-linux-gnu.so
Finally, I installed python protobuf that matches with Tensorflow's protobuf version, 3.7.1. It magically works. I don't know how to check the protobuf version inside tensorflow library libtensorflow_framework.so or _pywrap_tensorflow_internal.so.
Since Tensorflow 1.14 requires protobuf &gt;= 3.6.1, so I installed 3.6.1 first and then my program throws an error said
 [libprotobuf FATAL external/protobuf_archive/src/google/protobuf/stubs/common.cc:86] This program was compiled against version 3.6.1 of the Protocol Buffer runtime library, which is not compatible with the installed version (3.7.1).  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in "google/protobuf/descriptor.pb.cc".)
However, if I install python protobuf to 3.11.3, I got segfault.
So once I upgrade protobuf into 3.7.1, it works.
		</comment>
	</comments>
</bug>