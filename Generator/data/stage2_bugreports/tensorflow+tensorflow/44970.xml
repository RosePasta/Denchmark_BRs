<bug id='44970' author='Runist' open_date='2020-11-18T08:34:00Z' closed_time='2020-11-18T21:16:16Z'>
	<summary>Why tf.data.Dataset.map() still unknown TensorShape?</summary>
	<description>
System information
Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
OS Platform and Distribution (e.g., Linux Ubuntu 18.04):
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): tf-nightly-2.5.0
Python version:
Bazel version (if compiling from source): 3.7.4
GCC/Compiler version (if compiling from source): 7.3.0
CUDA/cuDNN version: CUDA 11.0 / cuDNN 8.0.4
GPU model and memory: RTX3090 24GB
RAM: 32GB
&lt;denchmark-code&gt;def parse(img_path, label, resolution, class_num):
    label = tf.one_hot(label, depth=class_num)
    image = tf.io.read_file(img_path)
    image = tf.image.decode_jpeg(image)
    image = tf.image.resize(image, [resolution, resolution])
    image /= 255.

    return image, label


def make_datasets(image, label, resolution, class_num, batch_size, mode):

    dataset = tf.data.Dataset.from_tensor_slices((image, label))
    if mode == 'train':
        dataset = dataset.shuffle(buffer_size=len(label))
        dataset = dataset.map(lambda x, y: tf.py_function(func=parse,
                                                          inp=[x, y, resolution, class_num],
                                                          Tout=[tf.float32, tf.float32]))
        dataset = dataset.repeat()
        dataset = dataset.batch(batch_size).prefetch(tf.data.experimental.AUTOTUNE)

...variables define...

train_dataset = make_datasets(train_images, train_labels, 224, num_classes, batch_size, mode='train')
val_dataset = make_datasets(val_images, val_labels, 224, num_classes, batch_size, mode='val')

train_step = len(train_images) // batch_size
val_step = len(val_images) // batch_size

model = any_model()
model.compile(optimizer=optimizers.Adam(lr),
                         loss=losses.CategoricalCrossentropy(from_logits=True),
                         metrics=['accuracy'])

model.fit(train_dataset,
                steps_per_epoch=train_step,
                epochs=epochs,
                validation_data=val_dataset,
                validation_steps=val_step,
                verbose=1)
&lt;/denchmark-code&gt;

When I run it.It excetion:
&lt;denchmark-code&gt;ValueError: as_list() is not defined on an unknown TensorShape.
&lt;/denchmark-code&gt;

I know I can avoid this problem by using image.set_shape([h, w, 3]), but I don't want to do it.Beacause I need my code concise and using lambda function.If using image.set_shape([h, w, 3]) I should write other function.
So I think it is bug.
	</description>
	<comments>
		<comment id='1' author='Runist' date='2020-11-18T09:01:12Z'>
		Please share a very, very minimal code example that we could simply copy, paste, run (or a Colab)
		</comment>
		<comment id='2' author='Runist' date='2020-11-18T09:25:04Z'>
		&lt;denchmark-code&gt;import os
import numpy as np
import tensorflow as tf
from tensorflow.keras import losses, optimizers, applications

def read_data(path):
    image_list = list()
    label_list = list()
    class_list = os.listdir(path)

    for i, value in enumerate(class_list):
        dirs = os.path.join(path, value)
        for pic in os.listdir(dirs):
            pic_full_path = os.path.join(dirs, pic)
            image_list.append(pic_full_path)
            label_list.append(i)

    return image_list, label_list


def parse(img_path, label, resolution, class_num):
    label = tf.one_hot(label, depth=class_num)
    image = tf.io.read_file(img_path)
    image = tf.image.decode_jpeg(image)
    image = tf.image.resize(image, [resolution, resolution])
    image /= 255.

    return image, label


def make_datasets(image, label, resolution, class_num, batch_size, mode):
    dataset = tf.data.Dataset.from_tensor_slices((image, label))
    if mode == 'train':
        dataset = dataset.shuffle(buffer_size=len(label))
        dataset = dataset.map(lambda x, y: tf.py_function(func=parse,
                                                          inp=[x, y, resolution, class_num],
                                                          Tout=[tf.float32, tf.float32]))
        dataset = dataset.repeat()
        dataset = dataset.batch(batch_size).prefetch(tf.data.experimental.AUTOTUNE)
    else:
        dataset = dataset.map(lambda x, y: tf.py_function(func=parse,
                                                          inp=[x, y, resolution, class_num],
                                                          Tout=[tf.float32, tf.float32]))
        dataset = dataset.repeat().batch(batch_size).prefetch(batch_size)

    return dataset


def main():
    train_dir = r'D:\Python_Code\Dataset\mini_ImageNet\train'
    val_dir = r'D:\Python_Code\Dataset\mini_ImageNet\validation'
    epochs = 50
    batch_size = 32
    lr = 1e-4
    num_classes = 100

    train_images, train_labels = read_data(train_dir)
    val_images, val_labels = read_data(val_dir)
    train_dataset = make_datasets(train_images, train_labels, 224, num_classes, batch_size, mode='train')
    val_dataset = make_datasets(val_images, val_labels, 224, num_classes, batch_size, mode='val')

    train_step = len(train_images) // batch_size
    val_step = len(val_images) // batch_size
    
    model = applications.ResNet50(weights=None, pooling='avg', classes=num_classes)
    model.summary()
    model.compile(optimizer=optimizers.Adam(lr),
                  loss=losses.CategoricalCrossentropy(from_logits=True),
                  metrics=['accuracy'])

    model.fit(train_dataset,
              steps_per_epoch=train_step,
              epochs=epochs,
              validation_data=val_dataset,
              validation_steps=val_step,
              verbose=1)


if __name__ == '__main__':
    main()

&lt;/denchmark-code&gt;

train_dir  file tree is:
train_dir
├── class 1: img 1、img 2  ...
├── class 2: img 1、img 2  ...
...
		</comment>
		<comment id='3' author='Runist' date='2020-11-18T15:08:24Z'>
		This will require time for us to run this code as It depend on your input on filesystem and It create overhead to handle the ticket.
Can you reproduce this with dummy inputs or sharing few sample files.
		</comment>
		<comment id='4' author='Runist' date='2020-11-18T15:12:18Z'>
		Was able to reproduce the issue with TF v2.3 and TF-nightly. Please find the gist of it &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/d6965a146bf83195a651850a2c1f0af0/44970.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='5' author='Runist' date='2020-11-18T20:40:14Z'>
		&lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
 Thanks for completing the example.
&lt;denchmark-link:https://github.com/Runist&gt;@Runist&lt;/denchmark-link&gt;
 See &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/35108#issuecomment-569781266&gt;#35108 (comment)&lt;/denchmark-link&gt;

/cc &lt;denchmark-link:https://github.com/jsimsa&gt;@jsimsa&lt;/denchmark-link&gt;
 Probably we could add an info box somewhere in the doc
		</comment>
		<comment id='6' author='Runist' date='2020-11-18T21:12:43Z'>
		I tried to simplify the behavior further. See the &lt;denchmark-link:https://colab.research.google.com/gist/ymodak/bfb56267184a8731634312542f0950e5/git44970.ipynb&gt;gist&lt;/denchmark-link&gt;

On inspecting  it has unknown shapes which fails in 
		</comment>
		<comment id='7' author='Runist' date='2020-11-18T21:16:16Z'>
		This is expected behavior and &lt;denchmark-link:https://github.com/bhack&gt;@bhack&lt;/denchmark-link&gt;
 has provided a pointer to an answer that explains why it works this way and how to address this problem.
&lt;denchmark-link:https://github.com/bhack&gt;@bhack&lt;/denchmark-link&gt;
 I would be happy to review a PR for updating the  documentation to call this out. Thanks.
		</comment>
		<comment id='8' author='Runist' date='2020-11-18T21:16:17Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44970&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44970&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='Runist' date='2020-11-18T23:50:49Z'>
		
I would be happy to review a PR for updating the tf.py_function documentation to call this out. Thanks.

See if &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/44994&gt;#44994&lt;/denchmark-link&gt;
 could be ok
		</comment>
		<comment id='10' author='Runist' date='2020-11-19T02:38:53Z'>
		
@amahendrakar Thanks for completing the example.
@Runist See #35108 (comment)
/cc @jsimsa Probably we could add an info box somewhere in the doc

I know define other function can work. But it doesn't my want.Because I say I just want to pass other args for map function.So I need to use lambda function.How can we use lambda functions to solve this problem without defining other functions?
		</comment>
	</comments>
</bug>