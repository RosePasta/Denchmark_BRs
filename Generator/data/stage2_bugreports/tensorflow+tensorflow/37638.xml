<bug id='37638' author='llan-ml' open_date='2020-03-16T14:16:52Z' closed_time='2020-04-03T13:40:38Z'>
	<summary>[2.x] SparseTensor shape becomes &amp;lt;unknown&amp;gt; after some operations if using tf.function</summary>
	<description>
With tf.function, if an argument x of a function is a 2-d tf.SparseTensor, its shape is (None, None). However, after some operations such as tf.sparse.transpose and tf.sparse.reduce_sum, the shapes of the resulting tensors become &lt;unknown&gt;.
Please refer to this &lt;denchmark-link:https://colab.research.google.com/drive/17DqrrFVZePJlJsfymrRCXNGBMNPNKeqd&gt;script&lt;/denchmark-link&gt;
 for reproduction.
	</description>
	<comments>
		<comment id='1' author='llan-ml' date='2020-03-17T11:24:40Z'>
		&lt;denchmark-link:https://github.com/llan-ml&gt;@llan-ml&lt;/denchmark-link&gt;

could you please share the tensorflow version and simple stand alone code for us to replicate the issue faced.
		</comment>
		<comment id='2' author='llan-ml' date='2020-03-17T13:00:15Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 I tested on  and . The code is as follows:
import tensorflow as tf

def foo(t):
  print(t.shape)
  print(tf.shape(t))
  print("=====")
  t1 = tf.sparse.transpose(t)
  print(t1.shape)
  print(tf.shape(t1))
  print("=====")
  t2 = tf.sparse.reduce_sum(t, axis=1)
  print(t2.shape)
  print(tf.shape(t2))
  print("=====")

t = tf.sparse.SparseTensor(indices=[[0, 0], [1, 2]], values=[1., 2], dense_shape=[3, 4])
tf.function(foo)(t)
BTW, can't you access the colab link in my original post?
		</comment>
		<comment id='3' author='llan-ml' date='2020-03-18T10:00:07Z'>
		i am able to replicate this issue, please find gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/06ff7c15f1bd9b04f65bbb140019224c/untitled96.ipynb&gt;here&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='llan-ml' date='2020-03-18T15:44:14Z'>
		It looks like &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/sparse_ops.py#L2597&gt;sparse_transpose&lt;/denchmark-link&gt;
 defaults to an unknown rank for all but the fully-defined shapes, which is too strict.
So a workaround would be this:
&lt;denchmark-code&gt;def foo(t):
  print(t.shape)
  print(tf.shape(t))
  t = tf.SparseTensor(values=t.values, indices=t.indices, dense_shape=[3, 4])
  ...
&lt;/denchmark-code&gt;

It should be straightforward to add an extra check so that a known rank is preserved.
		</comment>
		<comment id='5' author='llan-ml' date='2020-04-01T20:08:26Z'>
		&lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/llan-ml&gt;@llan-ml&lt;/denchmark-link&gt;
 I added a PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/38142&gt;#38142&lt;/denchmark-link&gt;
 to address the  issue. For the other issue , it is inference from the C++  ops which
will output unknown shape anyway. So it may not be easily fixable. I leave the .
Please take a look at PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/38142&gt;#38142&lt;/denchmark-link&gt;
 for shape of 
		</comment>
		<comment id='6' author='llan-ml' date='2020-04-03T13:40:39Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37638&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37638&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>