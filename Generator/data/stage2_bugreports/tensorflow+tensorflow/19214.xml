<bug id='19214' author='sven1977' open_date='2018-05-11T03:32:42Z' closed_time='2019-03-20T19:49:15Z'>
	<summary>for loop not working in tf.contrib.autograph</summary>
	<description>
The following example for autograph is not working (see my system-info below):
&lt;denchmark-code&gt;from tensorflow.contrib import autograph

def computation():
    for k in range(4):
        print(k)
    return tf.no_op()

computation_autographd = autograph.to_graph(computation, verbose=True)
&lt;/denchmark-code&gt;

If I remove the for loop, it works fine.
With the loop, it fails with:
&lt;denchmark-code&gt;File "/opt/project/examples/_dict_in_autograph_example.py", line 66, in &lt;module&gt;
verbose=True)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/autograph/impl/api.py", line 245, in to_graph
    compiled_node, compiled_src = compiler.ast_to_object(module)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/autograph/pyct/compiler.py", line 75, in ast_to_object
    return imp.load_source(module_name, f.name), source
  File "/usr/lib/python3.5/imp.py", line 172, in load_source
    module = _load(spec)
  File "&lt;frozen importlib._bootstrap&gt;", line 693, in _load
  File "&lt;frozen importlib._bootstrap&gt;", line 673, in _load_unlocked
  File "&lt;frozen importlib._bootstrap_external&gt;", line 661, in exec_module
  File "&lt;frozen importlib._bootstrap_external&gt;", line 767, in get_code
  File "&lt;frozen importlib._bootstrap_external&gt;", line 727, in source_to_code
  File "&lt;frozen importlib._bootstrap&gt;", line 222, in _call_with_frames_removed
  File "/tmp/tmpqdvecllf.py", line 21
    () = __ops.for_loop(autograph_utils.dynamic_builtin(range, 4),
       ^
SyntaxError: can't assign to ()

Process finished with exit code 1
&lt;/denchmark-code&gt;

python3 --version
Python 3.5.2
python3 -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
v1.8.0-0-g93bc2e2072 1.8.0
== cat /etc/issue ===============================================
Linux 5a7b67a966f3 4.9.87-linuxkit-aufs &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/1&gt;#1&lt;/denchmark-link&gt;
 SMP Wed Mar 14 15:12:16 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
VERSION="16.04.3 LTS (Xenial Xerus)"
VERSION_ID="16.04"
VERSION_CODENAME=xenial
== are we in docker =============================================
Yes
== compiler =====================================================
c++ (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
== uname -a =====================================================
Linux 5a7b67a966f3 4.9.87-linuxkit-aufs &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/1&gt;#1&lt;/denchmark-link&gt;
 SMP Wed Mar 14 15:12:16 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
== check pips ===================================================
== check for virtualenv =========================================
False
== tensorflow import ============================================
tf.VERSION = 1.8.0
tf.GIT_VERSION = v1.8.0-0-g93bc2e2072
tf.COMPILER_VERSION = v1.8.0-0-g93bc2e2072
Sanity check: array([1], dtype=int32)
== env ==========================================================
LD_LIBRARY_PATH is unset
DYLD_LIBRARY_PATH is unset
== nvidia-smi ===================================================
./tf_env_collect.sh: line 105: nvidia-smi: command not found
== cuda libs  ===================================================
	</description>
	<comments>
		<comment id='1' author='sven1977' date='2018-05-11T12:39:42Z'>
		Thank you for your post. We noticed you have not filled out the following field in the issue template. Could you update them if they are relevant in your case, or leave them as N/A? Thanks.
Have I written custom code
OS Platform and Distribution
TensorFlow installed from
TensorFlow version
Bazel version
CUDA/cuDNN version
GPU model and memory
Exact command to reproduce
		</comment>
		<comment id='2' author='sven1977' date='2018-05-21T14:50:37Z'>
		Sorry for the delay! This is a known issue -- we still need to properly handle the cases where a code block (in this case, the body of the for loop) doesn't calculate any numeric values.
For now, you can work around this limitation by having the loop perform some computation on an existing variable, like for instance:
&lt;denchmark-code&gt;def computation():
    s = 0
    for k in range(tf.constant(4)):
        print(k)
        s += k
    return s
&lt;/denchmark-code&gt;

Side note: we also need to make sure the argument passed to range is a tensor, otherwise the loop will be statically unrolled. We're still debating whether to keep this behavior because it's been a source of confusion.
		</comment>
		<comment id='3' author='sven1977' date='2019-01-25T00:38:14Z'>
		Quick update: this now works in TF2 with &lt;denchmark-link:https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/function&gt;@tf.function&lt;/denchmark-link&gt;
 (which uses a stable subset of autograph):
&lt;denchmark-code&gt;@tf.function
def computation():
    for k in tf.range(4):
        print(k)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='sven1977' date='2019-03-20T19:49:15Z'>
		Final update - the loop uses the type to decide whether to run as a Python or TF loop. So, if the iterated is a Tensor, then the loop will run in TF. Otherwise it stays in Python.
Examples:
&lt;denchmark-code&gt;for k in range(4):  # Python loop
for k in [1, 2, 3]:  # Python loop

for k in tf.range(4):  # TF loop
for k in tf.data.Dataset.range(4):  # TF loop
for k in tf.constant([1, 2, 3]):  # TF loop
&lt;/denchmark-code&gt;

We found that this is the way that's most consistent with other instances, like for instance overloaded operators (e.g. a + b runs in TF if either a or b is a tensor).
		</comment>
	</comments>
</bug>