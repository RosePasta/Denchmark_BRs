<bug id='41489' author='Rayndell' open_date='2020-07-17T09:23:12Z' closed_time='2020-07-17T12:46:12Z'>
	<summary>tf.data.Dataset.get_files produces infinite loop</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows Server 2016
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 1.14.1
Python version: 3.7
Bazel version (if compiling from source): 0.24.1
GCC/Compiler version (if compiling from source): MS Visual Studio 2017
CUDA/cuDNN version: 10.1/7
GPU model and memory: GeForce GTX 1080 Ti (11 Go)

Describe the current behavior
When using tf.data.Dataset to produce a dataset from a set of files (jpg images), it seems that it is unable to find any file or to build the dataset correctly. By looping through the dataset and printing each element, the output is an infinite list of "Tensor("IteratorGetNext_N:0", shape=(), dtype=string)" where N is the number of iterations. The problem occurs either by using directly Dataset.list_files("/path/to/*.jpg") of by using glob independently and giving the result to Dataset.from_tensor_slices. The problem also occurs when iterating through a small number of elements by using Dataset.take().
I know I am supposed to upgrade my TensorFlow version, but I have for now to stick to the 1.14 version because all the software we distribute in my company is linked to this particular version.
Describe the expected behavior
It is supposed to produce a dataset of approximately 1000 jpg images.
Standalone code to reproduce the issue
import tensorflow as tf
test_dataset = tf.data.Dataset.list_files("D:/test/*.jpg")
for element in test_dataset:
	print(element)

Attached is a zip file containing 3 jpg images in a "test" directory to reproduce the issue. It works with any file anyway.
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/4936851/test.zip&gt;test.zip&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='Rayndell' date='2020-07-17T10:59:39Z'>
		Just for the record, I found that the infinite loop can also be produced with a simple call to from_tensor_slices:
import tensorflow as tf
test_dataset = tf.data.Dataset.from_tensor_slices([1,2,3])
for element in test_dataset.enumerate():
print(element)
Using enumerate(test_dataset) or test_dataset.enumerate() as suggested in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/30802&gt;this post&lt;/denchmark-link&gt;
 did not solve the issue. The print infinitely produces something like this:
(8149, &lt;tf.Tensor 'IteratorGetNext_8149:0' shape=() dtype=int32&gt;)
		</comment>
		<comment id='2' author='Rayndell' date='2020-07-17T11:06:52Z'>
		&lt;denchmark-link:https://github.com/Rayndell&gt;@Rayndell&lt;/denchmark-link&gt;

I ran the above code please find the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/027fe9057feedb3bed3f16e317d19aeb/untitled282.ipynb&gt;gist here&lt;/denchmark-link&gt;
 and let us know if it confirms your issue or if possible share a colab gist with the issue reported.
Also is there any particular reason for using older version of tf when newer versions are available,
		</comment>
		<comment id='3' author='Rayndell' date='2020-07-17T12:23:17Z'>
		No. In my case the code produces, as stated above, an infinite loop. I reproduced the problem with the following gist:
&lt;denchmark-link:https://colab.research.google.com/drive/1hirnPgD2gYec31ZeIVIpbZWruA_D1W-N?usp=sharing&gt;https://colab.research.google.com/drive/1hirnPgD2gYec31ZeIVIpbZWruA_D1W-N?usp=sharing&lt;/denchmark-link&gt;

As I mentioned in my first post, I have to stick to version 1.14 because all scripts, programs and libraries we produced and distributed in my company is based on this particular version, and I do not want to risk any compatibility problems.
		</comment>
		<comment id='4' author='Rayndell' date='2020-07-17T12:46:06Z'>
		Ok, I found a solution. By testing with TF 1.15 (&lt;denchmark-link:https://colab.research.google.com/drive/11_NXDLw3NU8nNI3HyXq50GVDR0KUIQoR?usp=sharing&gt;https://colab.research.google.com/drive/11_NXDLw3NU8nNI3HyXq50GVDR0KUIQoR?usp=sharing&lt;/denchmark-link&gt;
) I found that my application was not in "eager" mode and then nothing was evaluated.
Fixed by adding the following instruction at the beginning of the program:
tf.compat.v1.enable_eager_execution()
		</comment>
		<comment id='5' author='Rayndell' date='2020-07-17T12:46:14Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41489&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41489&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>