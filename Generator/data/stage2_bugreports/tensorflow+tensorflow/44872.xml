<bug id='44872' author='ventura099' open_date='2020-11-14T14:27:54Z' closed_time='2020-12-18T20:04:04Z'>
	<summary>"NotImplementedError: Missing functionality to restore state of object" when using StringLookup() and CategoryEncoding()</summary>
	<description>
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/5541046/heart.csv.zip&gt;heart.csv.zip&lt;/denchmark-link&gt;

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04.5
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 2.3.0 &amp; 2.4.0rc1
Python version: Python 3.6.9
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:


Following &lt;denchmark-link:https://keras.io/examples/structured_data/structured_data_classification_from_scratch/&gt;the official guide&lt;/denchmark-link&gt;
, I'm trying to use TF-Serving CLI to make sure the new functionality of StringLookup and CategoryEncoding works and can be served, but I'm keep getting the error above when using saved_model_cli.
I checked it on both TF2.3 &amp; 2.4.0-rc1.
i've added the dataset csv file as well
Describe the expected behavior
There should be no errors
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np
import pandas as pd
from tensorflow import keras
from tensorflow.keras import layers
import subprocess


file_url = "heart.csv"
dataframe = pd.read_csv(file_url)

val_dataframe = dataframe.sample(frac=0.2, random_state=1337)
train_dataframe = dataframe.drop(val_dataframe.index)

print(
    "Using %d samples for training and %d for validation"
    % (len(train_dataframe), len(val_dataframe))
)


def dataframe_to_dataset(dataframe):
    dataframe = dataframe.copy()
    labels = dataframe.pop("target")
    ds = tf.data.Dataset.from_tensor_slices((dict(dataframe), labels))
    ds = ds.shuffle(buffer_size=len(dataframe))
    return ds


train_ds = dataframe_to_dataset(train_dataframe)
val_ds = dataframe_to_dataset(val_dataframe)


train_ds = train_ds.batch(32)
val_ds = val_ds.batch(32)


from tensorflow.keras.layers.experimental.preprocessing import Normalization
from tensorflow.keras.layers.experimental.preprocessing import CategoryEncoding
from tensorflow.keras.layers.experimental.preprocessing import StringLookup


def encode_numerical_feature(feature, name, dataset):
    # Create a Normalization layer for our feature
    normalizer = Normalization()

    # Prepare a Dataset that only yields our feature
    feature_ds = dataset.map(lambda x, y: x[name])
    feature_ds = feature_ds.map(lambda x: tf.expand_dims(x, -1))

    # Learn the statistics of the data
    normalizer.adapt(feature_ds)

    # Normalize the input feature
    encoded_feature = normalizer(feature)
    return encoded_feature


def encode_string_categorical_feature(feature, name, dataset):
    # Create a StringLookup layer which will turn strings into integer indices
    index = StringLookup()

    # Prepare a Dataset that only yields our feature
    feature_ds = dataset.map(lambda x, y: x[name])
    feature_ds = feature_ds.map(lambda x: tf.expand_dims(x, -1))

    # Learn the set of possible string values and assign them a fixed integer index
    index.adapt(feature_ds)

    # Turn the string input into integer indices
    encoded_feature = index(feature)

    # Create a CategoryEncoding for our integer indices
    encoder = CategoryEncoding(output_mode="binary")

    # Prepare a dataset of indices
    feature_ds = feature_ds.map(index)

    # Learn the space of possible indices
    encoder.adapt(feature_ds)

    # Apply one-hot encoding to our indices
    encoded_feature = encoder(encoded_feature)
    return encoded_feature


def encode_integer_categorical_feature(feature, name, dataset):
    # Create a CategoryEncoding for our integer indices
    encoder = CategoryEncoding(output_mode="binary")

    # Prepare a Dataset that only yields our feature
    feature_ds = dataset.map(lambda x, y: x[name])
    feature_ds = feature_ds.map(lambda x: tf.expand_dims(x, -1))

    # Learn the space of possible indices
    encoder.adapt(feature_ds)

    # Apply one-hot encoding to our indices
    encoded_feature = encoder(feature)
    return encoded_feature


def create_model():
    # Categorical features encoded as integers
    sex = keras.Input(shape=(1,), name="sex", dtype="int64")
    cp = keras.Input(shape=(1,), name="cp", dtype="int64")
    fbs = keras.Input(shape=(1,), name="fbs", dtype="int64")
    restecg = keras.Input(shape=(1,), name="restecg", dtype="int64")
    exang = keras.Input(shape=(1,), name="exang", dtype="int64")
    ca = keras.Input(shape=(1,), name="ca", dtype="int64")

    # Categorical feature encoded as string
    thal = keras.Input(shape=(1,), name="thal", dtype="string")

    # Numerical features
    age = keras.Input(shape=(1,), name="age")
    trestbps = keras.Input(shape=(1,), name="trestbps")
    chol = keras.Input(shape=(1,), name="chol")
    thalach = keras.Input(shape=(1,), name="thalach")
    oldpeak = keras.Input(shape=(1,), name="oldpeak")
    slope = keras.Input(shape=(1,), name="slope")

    all_inputs = [
        sex,
        cp,
        fbs,
        restecg,
        exang,
        ca,
        thal,
        age,
        trestbps,
        chol,
        thalach,
        oldpeak,
        slope,
    ]

    # Integer categorical features
    sex_encoded = encode_integer_categorical_feature(sex, "sex", train_ds)
    cp_encoded = encode_integer_categorical_feature(cp, "cp", train_ds)
    fbs_encoded = encode_integer_categorical_feature(fbs, "fbs", train_ds)
    restecg_encoded = encode_integer_categorical_feature(restecg, "restecg", train_ds)
    exang_encoded = encode_integer_categorical_feature(exang, "exang", train_ds)
    ca_encoded = encode_integer_categorical_feature(ca, "ca", train_ds)

    # String categorical features
    thal_encoded = encode_string_categorical_feature(thal, "thal", train_ds)

    # Numerical features
    age_encoded = encode_numerical_feature(age, "age", train_ds)
    trestbps_encoded = encode_numerical_feature(trestbps, "trestbps", train_ds)
    chol_encoded = encode_numerical_feature(chol, "chol", train_ds)
    thalach_encoded = encode_numerical_feature(thalach, "thalach", train_ds)
    oldpeak_encoded = encode_numerical_feature(oldpeak, "oldpeak", train_ds)
    slope_encoded = encode_numerical_feature(slope, "slope", train_ds)

    all_features = layers.concatenate(
        [
            sex_encoded,
            cp_encoded,
            fbs_encoded,
            restecg_encoded,
            exang_encoded,
            slope_encoded,
            ca_encoded,
            thal_encoded,
            age_encoded,
            trestbps_encoded,
            chol_encoded,
            thalach_encoded,
            oldpeak_encoded,
        ]
    )
    x = layers.Dense(32, activation="relu")(all_features)
    x = layers.Dropout(0.5)(x)
    output = layers.Dense(1, activation="sigmoid")(x)
    model = keras.Model(all_inputs, output)
    model.compile("adam", "binary_crossentropy", metrics=["accuracy"])

    model.summary()

    return model


model = create_model()


model.fit(train_ds, epochs=3, validation_data=val_ds)

sample = {
    "age": 60,
    "sex": 1,
    "cp": 1,
    "trestbps": 145,
    "chol": 233,
    "fbs": 1,
    "restecg": 2,
    "thalach": 150,
    "exang": 0,
    "oldpeak": 2.3,
    "slope": 3,
    "ca": 0,
    "thal": "8",
}

input_dict = {name: tf.convert_to_tensor([value]) for name, value in sample.items()}
predictions = model.predict(input_dict)

print("prediction: %.3f " % (predictions[0][0],))

print(f"saving model in /code/archive/model/")
model.save("/code/archive/model/")


subprocess.run(
    [
        f"saved_model_cli run --dir /code/archive/model --tag_set serve --signature_def serving_default --input_exprs 'age=[[60]];sex=[[1]];cp=[[1]];trestbps=[[145]];chol=[[233]];fbs=[[1]];restecg=[[2]];thalach=[[150]];exang=[[0]];oldpeak=[[2.3]];slope=[[3]];ca=[[0]];thal=[[str(8)]];'"
    ],
    shell=True,
)

subprocess.run([f"saved_model_cli show --dir /code/archive/model --all"], shell=True)`
&lt;/denchmark-code&gt;

Other info / logs
/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py:2325: UserWarning: Model.state_updates will be removed in a future version. This property should not be used in TensorFlow 2.0, as updates are applied automatically.
warnings.warn('Model.state_updates will be removed in a future version. '
2020-11-14 14:22:05.624968: W tensorflow/python/util/util.cc:348] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.
/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py:1402: UserWarning: layer.updates will be removed in a future version. This property should not be used in TensorFlow 2.0, as updates are applied automatically.
warnings.warn('layer.updates will be removed in a future version. '
WARNING:tensorflow:FOR KERAS USERS: The object that you are saving contains one or more Keras models or layers. If you are loading the SavedModel with tf.keras.models.load_model, continue reading (otherwise, you may ignore the following instructions). Please change your code to save with tf.keras.models.save_model or model.save, and confirm that the file "keras.metadata" exists in the export directory. In the future, Keras will only load the SavedModels that have this file. In other words, tf.saved_model.save will no longer write SavedModels that can be recovered as Keras models (this will apply in TF 2.5).
FOR DEVS: If you are overwriting _tracking_metadata in your class, this property has been used to save metadata in the SavedModel. The metadta field will be deprecated soon, so please move the metadata to a different file.
######################################################################################################################################################
2020-11-14 14:22:07.315697: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0
2020-11-14 14:22:08.877104: I tensorflow/compiler/jit/xla_cpu_device.cc:41] Not creating XLA devices, tf_xla_enable_xla_devices not set
2020-11-14 14:22:08.877338: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcuda.so.1
2020-11-14 14:22:08.877364: E tensorflow/stream_executor/cuda/cuda_driver.cc:328] failed call to cuInit: UNKNOWN ERROR (-1)
2020-11-14 14:22:08.877389: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (e9c6345c3b01): /proc/driver/nvidia/version does not exist
2020-11-14 14:22:08.878659: I tensorflow/compiler/jit/xla_gpu_device.cc:99] Not creating XLA devices, tf_xla_enable_xla_devices not set
WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/tools/saved_model_cli.py:445: load (from tensorflow.python.saved_model.loader_impl) is deprecated and will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.loader.load or tf.compat.v1.saved_model.load. There will be a new function for importing SavedModels in Tensorflow 2.0.
INFO:tensorflow:Restoring parameters from /code/archive/model/variables/variables
2020-11-14 14:22:09.015572: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:196] None of the MLIR optimization passes are enabled (registered 0 passes)
2020-11-14 14:22:09.026449: I tensorflow/core/platform/profile_utils/cpu_utils.cc:112] CPU Frequency: 2592000000 Hz
Result for output key dense_1:
[[0.38053596]]
2020-11-14 14:22:09.660000: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0
MetaGraphDef with tag-set: 'serve' contains the following SignatureDefs:
signature_def['__saved_model_init_op']:
The given SavedModel SignatureDef contains the following input(s):
The given SavedModel SignatureDef contains the following output(s):
outputs['__saved_model_init_op'] tensor_info:
dtype: DT_INVALID
shape: unknown_rank
name: NoOp
Method name is:
signature_def['serving_default']:
The given SavedModel SignatureDef contains the following input(s):
inputs['age'] tensor_info:
dtype: DT_FLOAT
shape: (-1, 1)
name: serving_default_age:0
inputs['ca'] tensor_info:
dtype: DT_INT64
shape: (-1, 1)
name: serving_default_ca:0
inputs['chol'] tensor_info:
dtype: DT_FLOAT
shape: (-1, 1)
name: serving_default_chol:0
inputs['cp'] tensor_info:
dtype: DT_INT64
shape: (-1, 1)
name: serving_default_cp:0
inputs['exang'] tensor_info:
dtype: DT_INT64
shape: (-1, 1)
name: serving_default_exang:0
inputs['fbs'] tensor_info:
dtype: DT_INT64
shape: (-1, 1)
name: serving_default_fbs:0
inputs['oldpeak'] tensor_info:
dtype: DT_FLOAT
shape: (-1, 1)
name: serving_default_oldpeak:0
inputs['restecg'] tensor_info:
dtype: DT_INT64
shape: (-1, 1)
name: serving_default_restecg:0
inputs['sex'] tensor_info:
dtype: DT_INT64
shape: (-1, 1)
name: serving_default_sex:0
inputs['slope'] tensor_info:
dtype: DT_FLOAT
shape: (-1, 1)
name: serving_default_slope:0
inputs['thal'] tensor_info:
dtype: DT_STRING
shape: (-1, 1)
name: serving_default_thal:0
inputs['thalach'] tensor_info:
dtype: DT_FLOAT
shape: (-1, 1)
name: serving_default_thalach:0
inputs['trestbps'] tensor_info:
dtype: DT_FLOAT
shape: (-1, 1)
name: serving_default_trestbps:0
The given SavedModel SignatureDef contains the following output(s):
outputs['dense_1'] tensor_info:
dtype: DT_FLOAT
shape: (-1, 1)
name: StatefulPartitionedCall:0
Method name is: tensorflow/serving/predict
2020-11-14 14:22:12.052553: I tensorflow/compiler/jit/xla_cpu_device.cc:41] Not creating XLA devices, tf_xla_enable_xla_devices not set
2020-11-14 14:22:12.053086: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcuda.so.1
2020-11-14 14:22:12.053161: E tensorflow/stream_executor/cuda/cuda_driver.cc:328] failed call to cuInit: UNKNOWN ERROR (-1)
2020-11-14 14:22:12.053260: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (e9c6345c3b01): /proc/driver/nvidia/version does not exist
Traceback (most recent call last):
File "/usr/local/bin/saved_model_cli", line 8, in 
sys.exit(main())
File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/tools/saved_model_cli.py", line 1192, in main
args.func(args)
File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/tools/saved_model_cli.py", line 719, in show
_show_all(args.dir)
File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/tools/saved_model_cli.py", line 307, in _show_all
_show_defined_functions(saved_model_dir)
File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/tools/saved_model_cli.py", line 187, in _show_defined_functions
trackable_object = load.load(saved_model_dir)
File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/saved_model/load.py", line 859, in load
return load_internal(export_dir, tags, options)["root"]
File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/saved_model/load.py", line 890, in load_internal
ckpt_options, filters)
File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/saved_model/load.py", line 161, in init
self._restore_checkpoint()
File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/saved_model/load.py", line 515, in _restore_checkpoint
"%r from the checkpoint." % obj))
NotImplementedError: Missing functionality to restore state of object &lt;tensorflow.python.saved_model.load._RestoredResource object at 0x7f304c2c2748&gt; from the checkpoint.
	</description>
	<comments>
		<comment id='1' author='ventura099' date='2020-11-17T08:31:11Z'>
		&lt;denchmark-link:https://github.com/ventura099&gt;@ventura099&lt;/denchmark-link&gt;

Please share indented code or if possible a colab gist with the error reported.
		</comment>
		<comment id='2' author='ventura099' date='2020-11-18T20:47:32Z'>
		I added an indentation, thank you.
		</comment>
		<comment id='3' author='ventura099' date='2020-11-19T17:51:01Z'>
		&lt;denchmark-link:https://github.com/ventura099&gt;@ventura099&lt;/denchmark-link&gt;

I ran the code and do not face any error, please find the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/94c01cfba014f0bc9a9b67f5dfa1c68d/untitled463.ipynb&gt;gist here&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/a513c79650a75ff970fda314f68da6e3/untitled464.ipynb&gt;tf 2.3&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='ventura099' date='2020-12-11T19:27:52Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='5' author='ventura099' date='2020-12-18T20:04:01Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='6' author='ventura099' date='2020-12-18T20:04:06Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44872&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44872&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>