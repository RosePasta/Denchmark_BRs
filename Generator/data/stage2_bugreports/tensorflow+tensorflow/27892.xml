<bug id='27892' author='Corea' open_date='2019-04-16T13:53:53Z' closed_time='2019-04-22T07:43:36Z'>
	<summary>Crash on TF 1.13 when custom `RNNCell which has `Template`.</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Arch Linux
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary (pip)
TensorFlow version (use command below): v1.13.0-rc2-5-g6612da8 / 1.13.1
Python version: 3.7
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: 10.1 / 7.5.0
GPU model and memory: GTX 1080 / 8G

You can collect some of this information using our environment capture &lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
Describe the current behavior
A code below works well on Python 3.6 with TF 1.12. On Python 3.7 with TF 1.13, however, the code crashes.
Describe the expected behavior
Do not crash
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
import tensorflow as tf


class Cell(tf.nn.rnn_cell.RNNCell):
  
  def __init__(self, state_size, reuse=None):
    super(Cell, self).__init__(_reuse=reuse)
    self.__state_size = state_size
    self.__encoder = tf.make_template("encoder", self.encoder)
  
  @property
  def state_size(self):
    return self.__state_size
  
  @property
  def output_size(self):
    return self.state_size

  def zero_state(self, batch_size, dtype):
    return tf.zeros([batch_size, self.state_size])

  def encoder(self, prev_state, obs):
    inputs = tf.concat([prev_state, obs], -1)
    return tf.layers.dense(inputs, self.state_size, None)

  def call(self, inputs, prev_state):
    state = self.__encoder(prev_state, inputs)
    return state, state


inputs = tf.placeholder(tf.float32, [32, 2, 20])

rnn_cell = Cell(20)
outputs, state = tf.nn.dynamic_rnn(rnn_cell, inputs, dtype=tf.float32)
Traceback
&lt;denchmark-code&gt;WARNING:tensorflow:From test.py:33: dynamic_rnn (from tensorflow.python.ops.rnn) is deprecated and will be removed in a future version.
Instructions for updating:
Please use `keras.layers.RNN(cell)`, which is equivalent to this API
WARNING:tensorflow:From [PYTHONDIRECTORY]/site-packages/tensorflow/python/ops/tensor_array_ops.py:162: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.
Instructions for updating:
Colocations handled automatically by placer.
WARNING:tensorflow:From test.py:24: dense (from tensorflow.python.layers.core) is deprecated and will be removed in a future version.
Instructions for updating:
Use keras.layers.dense instead.
Traceback (most recent call last):
  File "test.py", line 33, in &lt;module&gt;
    outputs, state = tf.nn.dynamic_rnn(rnn_cell, inputs, dtype=tf.float32)
  File "[PYTHONDIRECTORY]/site-packages/tensorflow/python/util/deprecation.py", line 324, in new_func
    return func(*args, **kwargs)
  File "[PYTHONDIRECTORY]/site-packages/tensorflow/python/ops/rnn.py", line 671, in dynamic_rnn
    dtype=dtype)
  File "[PYTHONDIRECTORY]/site-packages/tensorflow/python/ops/rnn.py", line 879, in _dynamic_rnn_loop
    swap_memory=swap_memory)
  File "[PYTHONDIRECTORY]/site-packages/tensorflow/python/ops/control_flow_ops.py", line 3556, in while_loop
    return_same_structure)
  File "[PYTHONDIRECTORY]/site-packages/tensorflow/python/ops/control_flow_ops.py", line 3087, in BuildLoop
    pred, body, original_loop_vars, loop_vars, shape_invariants)
  File "[PYTHONDIRECTORY]/site-packages/tensorflow/python/ops/control_flow_ops.py", line 3022, in _BuildLoop
    body_result = body(*packed_vars_for_body)
  File "[PYTHONDIRECTORY]/site-packages/tensorflow/python/ops/control_flow_ops.py", line 3525, in &lt;lambda&gt;
    body = lambda i, lv: (i + 1, orig_body(*lv))
  File "[PYTHONDIRECTORY]/site-packages/tensorflow/python/ops/rnn.py", line 847, in _time_step
    (output, new_state) = call_cell()
  File "[PYTHONDIRECTORY]/site-packages/tensorflow/python/ops/rnn.py", line 833, in &lt;lambda&gt;
    call_cell = lambda: cell(input_t, state)
  File "[PYTHONDIRECTORY]/site-packages/tensorflow/python/ops/rnn_cell_impl.py", line 234, in __call__
    return super(RNNCell, self).__call__(inputs, state)
  File "[PYTHONDIRECTORY]/site-packages/tensorflow/python/layers/base.py", line 534, in __call__
    _add_elements_to_collection(self.updates, ops.GraphKeys.UPDATE_OPS)
  File "[PYTHONDIRECTORY]/site-packages/tensorflow/python/keras/engine/base_layer.py", line 653, in updates
    return self._updates + self._gather_children_attribute('updates')
  File "[PYTHONDIRECTORY]/site-packages/tensorflow/python/keras/engine/base_layer.py", line 1647, in _gather_children_attribute
    getattr(layer, attribute) for layer in self._layers))
  File "[PYTHONDIRECTORY]/site-packages/tensorflow/python/keras/engine/base_layer.py", line 1647, in &lt;genexpr&gt;
    getattr(layer, attribute) for layer in self._layers))
AttributeError: 'Template' object has no attribute 'updates'
&lt;/denchmark-code&gt;

Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='Corea' date='2019-04-19T18:11:44Z'>
		Sorry for the breakage, seems that the issue has already been fixed by &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/eb741cedf304b411af6cae8ec2d60578cd3980a1&gt;eb741ce&lt;/denchmark-link&gt;
. Which hasn't reach the release yet. I tested the same code in nightly release and the error is mitigated.
For now, I think you can update your code with following line, since the template does not have any updates.
self.__encoder.updates = []
		</comment>
		<comment id='2' author='Corea' date='2019-04-22T07:43:36Z'>
		Thanks, I should have checked this on master version. Since the problem already has been fixed, I'll close the issue.
		</comment>
		<comment id='3' author='Corea' date='2019-04-22T07:43:37Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=27892&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=27892&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>