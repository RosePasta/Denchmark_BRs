<bug id='33870' author='Cospel' open_date='2019-10-31T08:17:02Z' closed_time='2020-01-21T22:55:18Z'>
	<summary>[tf-nightly] unable to load saved functional model</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macos mohave
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): pip install tf-nightly
TensorFlow version (use command below): tf-nightly-2.1.0.dev20191029
Python version: 3.7
Bazel version (if compiling from source): -
GCC/Compiler version (if compiling from source): -
CUDA/cuDNN version: -
GPU model and memory: -

Describe the current behavior
Loading functional model should pass in latest version of tf2. Everything works great in tensorflow==2.0.0.
Describe the expected behavior
Loading saved functional model raises exception.
Code to reproduce the issue
import tensorflow as tf

shape = (224, 224, 3)

# sequential model
model1 = tf.keras.Sequential(
            [
                tf.keras.Input(shape=shape, name="input"),
                tf.keras.applications.MobileNetV2(include_top=False, weights="imagenet", input_shape=shape),
                tf.keras.layers.GlobalAveragePooling2D(),
                tf.keras.layers.Dense(256, activation="relu", name="descriptor"),
                tf.keras.layers.Dense(2, activation="softmax", name="probs"),
            ]
        )

# functional model
base_model2 = tf.keras.applications.MobileNetV2(include_top=False, weights="imagenet", input_shape=shape)
inputs = tf.keras.Input(shape=shape, name="input")
x = base_model2(inputs)
x = tf.keras.layers.GlobalAveragePooling2D()(x)
x = tf.keras.layers.Dense(256, activation="relu", name="descriptor")(x)
outputs = tf.keras.layers.Dense(2, activation="softmax", name="probs")(x)
model2 = tf.keras.Model(inputs=inputs, outputs=outputs)

tf.saved_model.save(model1, "test1")
tf.saved_model.save(model2, "test2")
#model2.save("test2", include_optimizer=False, save_format="tf")

model_1 = tf.keras.models.load_model('test1')

# THIS RAISES exception 
model_2 = tf.keras.models.load_model('test2')
Other info / logs
&lt;denchmark-code&gt;2019-10-31 09:13:04.371282: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2019-10-31 09:13:04.384631: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x7fcafda7be50 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2019-10-31 09:13:04.384655: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
2019-10-31 09:13:17.924297: W tensorflow/python/util/util.cc:309] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.
WARNING:tensorflow:From /Users/michallukac/env/tf2/lib/python3.7/site-packages/tensorflow_core/python/ops/resource_variable_ops.py:1785: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.
Instructions for updating:
If using Keras pass *_constraint arguments to layers.
Traceback (most recent call last):
  File "save.py", line 32, in &lt;module&gt;
    model_2 = tf.keras.models.load_model('test2')
  File "/Users/michallukac/env/tf2/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/save.py", line 150, in load_model
    return saved_model_load.load(filepath, compile)
  File "/Users/michallukac/env/tf2/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/saved_model/load.py", line 89, in load
    model = tf_load.load_internal(path, loader_cls=KerasObjectLoader)
  File "/Users/michallukac/env/tf2/lib/python3.7/site-packages/tensorflow_core/python/saved_model/load.py", line 543, in load_internal
    export_dir)
  File "/Users/michallukac/env/tf2/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/saved_model/load.py", line 119, in __init__
    self._finalize()
  File "/Users/michallukac/env/tf2/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/saved_model/load.py", line 157, in _finalize
    created_layers={layer.name: layer for layer in node.layers})
  File "/Users/michallukac/env/tf2/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/network.py", line 1885, in reconstruct_from_config
    process_node(layer, node_data)
  File "/Users/michallukac/env/tf2/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/network.py", line 1833, in process_node
    output_tensors = layer(input_tensors, **kwargs)
  File "/Users/michallukac/env/tf2/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 773, in __call__
    outputs = call_fn(cast_inputs, *args, **kwargs)
  File "/Users/michallukac/env/tf2/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/network.py", line 712, in call
    raise NotImplementedError('When subclassing the `Model` class, you should'
NotImplementedError: When subclassing the `Model` class, you should implement a `call` method.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Cospel' date='2019-11-01T20:37:43Z'>
		 loads a model saved via 
See &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/models/load_model&gt;https://www.tensorflow.org/api_docs/python/tf/keras/models/load_model&lt;/denchmark-link&gt;

In your code snippet you may try  since you are saving your model with 
Following snippet executes successfully;
import tensorflow as tf

shape = (224, 224, 3)

# sequential model
model1 = tf.keras.Sequential(
            [
                tf.keras.Input(shape=shape, name="input"),
                tf.keras.applications.MobileNetV2(include_top=False, weights="imagenet", input_shape=shape),
                tf.keras.layers.GlobalAveragePooling2D(),
                tf.keras.layers.Dense(256, activation="relu", name="descriptor"),
                tf.keras.layers.Dense(2, activation="softmax", name="probs"),
            ]
        )

# functional model
base_model2 = tf.keras.applications.MobileNetV2(include_top=False, weights="imagenet", input_shape=shape)
inputs = tf.keras.Input(shape=shape, name="input")
x = base_model2(inputs)
x = tf.keras.layers.GlobalAveragePooling2D()(x)
x = tf.keras.layers.Dense(256, activation="relu", name="descriptor")(x)
outputs = tf.keras.layers.Dense(2, activation="softmax", name="probs")(x)
model2 = tf.keras.Model(inputs=inputs, outputs=outputs)

tf.saved_model.save(model1, "test1")
tf.saved_model.save(model2, "test2")
#model2.save("test2", include_optimizer=False, save_format="tf")

#model_1 = tf.keras.models.load_model('test1')
model_1 = tf.saved_model.load('test1')

# THIS RAISES exception 
#model_2 = tf.keras.models.load_model('test2')
model_2 = tf.saved_model.load('test2')
		</comment>
		<comment id='2' author='Cospel' date='2019-11-03T17:05:13Z'>
		Thank you &lt;denchmark-link:https://github.com/ymodak&gt;@ymodak&lt;/denchmark-link&gt;
 , yes your example is working.
However tf.keras.models.load_model and tf.keras.models.save_model should support (according to documentation) both formats (SavedModel/TF and H5 file/Keras).
This is passing:
import tensorflow as tf

shape = (224, 224, 3)

# sequential model
model1 = tf.keras.Sequential(
    [
        tf.keras.Input(shape=shape, name="input"),
        tf.keras.applications.MobileNetV2(include_top=False, weights="imagenet", input_shape=shape),
        tf.keras.layers.GlobalAveragePooling2D(),
        tf.keras.layers.Dense(256, activation="relu", name="descriptor"),
        tf.keras.layers.Dense(2, activation="softmax", name="probs"),
    ]
)

# functional model
base_model2 = tf.keras.applications.MobileNetV2(include_top=False, weights="imagenet", input_shape=shape)
inputs = tf.keras.Input(shape=shape, name="input")
x = base_model2(inputs)
x = tf.keras.layers.GlobalAveragePooling2D()(x)
x = tf.keras.layers.Dense(256, activation="relu", name="descriptor")(x)
outputs = tf.keras.layers.Dense(2, activation="softmax", name="probs")(x)
model2 = tf.keras.Model(inputs=inputs, outputs=outputs)

tf.keras.models.save_model(model1, "test1.h5", include_optimizer=False)
tf.keras.models.save_model(model2, "test2.h5", include_optimizer=False)

model_1 = tf.keras.models.load_model("test1.h5")

# THIS is passing
model_2 = tf.keras.models.load_model("test2.h5")
However this fails as it is working with saved model format:
import tensorflow as tf

shape = (224, 224, 3)

# sequential model
model1 = tf.keras.Sequential(
    [
        tf.keras.Input(shape=shape, name="input"),
        tf.keras.applications.MobileNetV2(include_top=False, weights="imagenet", input_shape=shape),
        tf.keras.layers.GlobalAveragePooling2D(),
        tf.keras.layers.Dense(256, activation="relu", name="descriptor"),
        tf.keras.layers.Dense(2, activation="softmax", name="probs"),
    ]
)

# functional model
base_model2 = tf.keras.applications.MobileNetV2(include_top=False, weights="imagenet", input_shape=shape)
inputs = tf.keras.Input(shape=shape, name="input")
x = base_model2(inputs)
x = tf.keras.layers.GlobalAveragePooling2D()(x)
x = tf.keras.layers.Dense(256, activation="relu", name="descriptor")(x)
outputs = tf.keras.layers.Dense(2, activation="softmax", name="probs")(x)
model2 = tf.keras.Model(inputs=inputs, outputs=outputs)

tf.keras.models.save_model(model1, "test1", include_optimizer=False)
tf.keras.models.save_model(model2, "test2", include_optimizer=False)

model_1 = tf.keras.models.load_model("test1")

# FAILS
model_2 = tf.keras.models.load_model("test2")
		</comment>
		<comment id='3' author='Cospel' date='2019-11-05T00:36:34Z'>
		I'm using a ModelCheckpoint callback to save intermediate steps as saved_model.pb. With tf 2.0 it works, but with the nightly 2.1.0-dev20191104 I also get the same loading error.
If I replace keras.load_model() with tf.saved_model.load() I get
&lt;denchmark-code&gt;AttributeError: '_UserObject' object has no attribute 'summary'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='Cospel' date='2019-12-04T12:06:23Z'>
		This is also related to tensorflow==2.1.0rc.
		</comment>
		<comment id='5' author='Cospel' date='2019-12-09T18:27:45Z'>
		Thanks for reporting this Cospel. Confirming that this is a bug, I am in the middle of redoing SavedModel loading behavior which will address this issue.
		</comment>
		<comment id='6' author='Cospel' date='2020-01-03T12:37:17Z'>
		Thank you &lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;
  for awesome work!
This is passing in the tf-nightly right now.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

		</comment>
		<comment id='7' author='Cospel' date='2020-01-10T12:53:10Z'>
		This is strange it worked for several days in tf-nightly however in tf2.1.0 and tf-nightly from today, it is not working again.
		</comment>
		<comment id='8' author='Cospel' date='2020-01-21T22:55:18Z'>
		This is fixed with latest tf nightly version '2.2.0-dev20200121'. Thanks!
		</comment>
		<comment id='9' author='Cospel' date='2020-01-21T22:55:20Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33870&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33870&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='Cospel' date='2020-04-13T00:18:09Z'>
		I save the model using the below on Google Colab
cp_callback = tf.keras.callbacks.ModelCheckpoint(  filepath=checkpoint_path,    verbose=1,    save_weights_only=False,  period=5)
training_model.save(checkpoint_path.format(epoch=0))
Then i load the model and put it inside a class and get the summary and it works
model = tf.keras.models.load_model('15867364372951858/cp-0005.ckpt')
class dic_model: 
def __init__(self, model, dictionary):
self.model = model
self.dic = dictionary
mymodel = dic_model(model, features_list)
mymodel.model.summary()
but loading the model using the same tf.keras.models.load_model and same model gets the below error

"TypeError: The added layer must be an instance of class Layer. Found: &lt;tensorflow.python.saved_model.load.Loader._recreate_base_user_object.._UserObject object at 0x0000026E77B2C788&gt;"

		</comment>
		<comment id='11' author='Cospel' date='2020-04-14T05:59:27Z'>
		&lt;denchmark-link:https://github.com/QuantumNinja92&gt;@QuantumNinja92&lt;/denchmark-link&gt;
  When loading checkpoints, you should call  instead of .
		</comment>
		<comment id='12' author='Cospel' date='2020-04-24T23:41:59Z'>
		
@QuantumNinja92 When loading checkpoints, you should call model.load_weights instead of tf.keras.models.load_model.

It only worked after using the Nightly build
		</comment>
	</comments>
</bug>