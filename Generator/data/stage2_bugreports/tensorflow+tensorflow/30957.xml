<bug id='30957' author='nfergu' open_date='2019-07-23T15:38:53Z' closed_time='2019-11-22T01:30:34Z'>
	<summary>Segfault when passing empty Tensor to cholesky_solve</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04 (Linux 93fd36b9ffb5 4.9.125-linuxkit #1 SMP Fri Sep 7 08:20:28 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux)
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): v1.14.0-rc1-22-gaf24dc91b5 1.14.0
Python version: Python 3.6.8
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
When passing an empty Tensor as the second argument to the tf.cholesky_solve function a segfault is encountered.
Valgrind reports the following:
&lt;denchmark-code&gt;==8399== Process terminating with default action of signal 11 (SIGSEGV)
==8399==  Access not within mapped region at address 0x0
==8399==    at 0x1896E2B0: tensorflow::MatrixTriangularSolveOp&lt;double&gt;::ComputeMatrix(tensorflow::OpKernelContext*, absl::InlinedVector&lt;Eigen::Map&lt;Eigen::Matrix&lt;double, -1, -1, 1, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, 4ul, std::allocator&lt;Eigen::Map&lt;Eigen::Matrix&lt;double, -1, -1, 1, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; &gt; &gt; const&amp;, absl::InlinedVector&lt;Eigen::Map&lt;Eigen::Matrix&lt;double, -1, -1, 1, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, 4ul, std::allocator&lt;Eigen::Map&lt;Eigen::Matrix&lt;double, -1, -1, 1, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt; &gt; &gt;*) (in /home/nferguson/venv_cholesky_segfault/lib/python3.6/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so)
==8399==    by 0x18A4A661: tensorflow::LinearAlgebraOp&lt;double&gt;::ComputeTensorSlice(tensorflow::OpKernelContext*, long long, absl::InlinedVector&lt;tensorflow::Tensor const*, 4ul, std::allocator&lt;tensorflow::Tensor const*&gt; &gt; const&amp;, absl::InlinedVector&lt;tensorflow::TensorShape, 4ul, std::allocator&lt;tensorflow::TensorShape&gt; &gt; const&amp;, absl::InlinedVector&lt;tensorflow::Tensor*, 4ul, std::allocator&lt;tensorflow::Tensor*&gt; &gt; const&amp;, absl::InlinedVector&lt;tensorflow::TensorShape, 4ul, std::allocator&lt;tensorflow::TensorShape&gt; &gt; const&amp;) (in /home/nferguson/venv_cholesky_segfault/lib/python3.6/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so)
==8399==    by 0x18A4A996: std::_Function_handler&lt;void (long long, long long), tensorflow::LinearAlgebraOp&lt;double&gt;::Compute(tensorflow::OpKernelContext*)::{lambda(long long, long long)#1}&gt;::_M_invoke(std::_Any_data const&amp;, long long, long long) (in /home/nferguson/venv_cholesky_segfault/lib/python3.6/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so)
==8399==    by 0x214615A3: tensorflow::thread::ThreadPool::Impl::ParallelFor(long long, long long, std::function&lt;void (long long, long long)&gt;) (in /home/nferguson/venv_cholesky_segfault/lib/python3.6/site-packages/tensorflow/libtensorflow_framework.so.1)
==8399==    by 0x2146181E: tensorflow::thread::ThreadPool::ParallelFor(long long, long long, std::function&lt;void (long long, long long)&gt;) (in /home/nferguson/venv_cholesky_segfault/lib/python3.6/site-packages/tensorflow/libtensorflow_framework.so.1)
==8399==    by 0x212C6E80: tensorflow::Shard(int, tensorflow::thread::ThreadPool*, long long, long long, std::function&lt;void (long long, long long)&gt;) (in /home/nferguson/venv_cholesky_segfault/lib/python3.6/site-packages/tensorflow/libtensorflow_framework.so.1)
==8399==    by 0x18A46E44: tensorflow::LinearAlgebraOp&lt;double&gt;::Compute(tensorflow::OpKernelContext*) (in /home/nferguson/venv_cholesky_segfault/lib/python3.6/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so)
==8399==    by 0x213C1D93: tensorflow::(anonymous namespace)::ExecutorState::Process(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long) (in /home/nferguson/venv_cholesky_segfault/lib/python3.6/site-packages/tensorflow/libtensorflow_framework.so.1)
==8399==    by 0x213C20E9: std::_Function_handler&lt;void (), tensorflow::(anonymous namespace)::ExecutorState::ScheduleReady(absl::InlinedVector&lt;tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, 8ul, std::allocator&lt;tensorflow::(anonymous namespace)::ExecutorState::TaggedNode&gt; &gt; const&amp;, tensorflow::(anonymous namespace)::ExecutorState::TaggedNodeReadyQueue*)::{lambda()#1}&gt;::_M_invoke(std::_Any_data const&amp;) (in /home/nferguson/venv_cholesky_segfault/lib/python3.6/site-packages/tensorflow/libtensorflow_framework.so.1)
==8399==    by 0x2145F6D3: Eigen::ThreadPoolTempl&lt;tensorflow::thread::EigenEnvironment&gt;::WorkerLoop(int) (in /home/nferguson/venv_cholesky_segfault/lib/python3.6/site-packages/tensorflow/libtensorflow_framework.so.1)
==8399==    by 0x2145E543: std::_Function_handler&lt;void (), tensorflow::thread::EigenEnvironment::CreateThread(std::function&lt;void ()&gt;)::{lambda()#1}&gt;::_M_invoke(std::_Any_data const&amp;) (in /home/nferguson/venv_cholesky_segfault/lib/python3.6/site-packages/tensorflow/libtensorflow_framework.so.1)
==8399==    by 0x2212D9DF: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
&lt;/denchmark-code&gt;

Describe the expected behavior
Although we clearly shouldn't be passing an empty Tensor to this method, I would expect an exception to occur (in Python) explaining that the input is invalid, rather than a segfault.
Code to reproduce the issue
Run the following code:
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf


def go():

    with tf.Graph().as_default():

        with tf.Session() as sess:

            X = tf.placeholder(shape=None, dtype=tf.float64)

            rhs = X[1:]
            rhs = tf.reshape(rhs, shape=(-1, 1))

            chol = tf.ones(shape=(1, 1), dtype=tf.float64)

            iP0 = tf.cholesky_solve(chol, rhs)

            feed_dict = {X: np.asarray([1.])}
            print(sess.run(iP0, feed_dict=feed_dict))

            print('SUCCESS!')


go()
&lt;/denchmark-code&gt;

Here the rhs argument to cholesky_solve ends up as an empty Tensor (it has a shape of (0, 1)), which appears to cause the segfault.
	</description>
	<comments>
		<comment id='1' author='nfergu' date='2019-07-24T09:17:08Z'>
		I am able to reproduce the issue.Thanks!
		</comment>
		<comment id='2' author='nfergu' date='2019-08-23T21:46:51Z'>
		&lt;denchmark-link:https://github.com/nfergu&gt;@nfergu&lt;/denchmark-link&gt;
 There was some updates related to this issue. Can you please check whether the issue still persists. Please use  and let us know the status. Thanks!
		</comment>
		<comment id='3' author='nfergu' date='2019-11-22T01:30:34Z'>
		I think it was resolved. Closing due to lack of recent activity. Please open new ticket if you see similar issue. Thanks!
		</comment>
		<comment id='4' author='nfergu' date='2019-11-22T01:30:36Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/30957&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/30957&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>