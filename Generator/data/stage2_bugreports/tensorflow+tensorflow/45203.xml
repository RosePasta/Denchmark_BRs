<bug id='45203' author='Lescurel' open_date='2020-11-26T11:04:52Z' closed_time='2020-12-07T16:11:34Z'>
	<summary>tf.linalg.diag_part does not use matrix_diag_part_v2</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 20.04
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v1.15.3-68-gdf8c55c 1.15.4
Python version: 3.6.12

Describe the current behavior
In tensorflow v1, tf.linalg.diag_part does not use matrix_diag_part_v2, making impossible to get sub-diagonal or a superdiagonal.
Describe the expected behavior
tf.linalg.diag_part should call matrix_diag_part_v2 for the argument k to be considered.
Standalone code to reproduce the issue
import tensorflow as tf
import numpy as np
from tensorflow.python.ops.gen_array_ops import matrix_diag_part_v2

a = tf.reshape(tf.range(1,10),(3,3))
diag =  tf.linalg.diag_part(a,k=0,padding_value=0)
superdiag = tf.linalg.diag_part(a,k=1,padding_value=0)
with tf.Session() as sess:
    d = sess.run(diag)
    sd = sess.run(superdiag)
    assert (d == np.array([1,5,9])).all()
    assert (sd == np.array([2,6])), f"sd:{sd} != [2,6]"
Using directly matrix_diag_part_v2 produces the correct behavior :
import tensorflow as tf
import numpy as np
from tensorflow.python.ops.gen_array_ops import matrix_diag_part_v2

a = tf.reshape(tf.range(1,10),(3,3))
diag =  matrix_diag_part_v2(a,k=0,padding_value=0)
superdiag = matrix_diag_part_v2(a,k=1,padding_value=0)
with tf.Session() as sess:
    d = sess.run(diag)
    sd = sess.run(superdiag)
    assert (d == np.array([1,5,9])).all()
    assert (sd == np.array([2,6])).all(), f"sd:{sd} != [2,6]"
Other info / logs
 seems to be disabled by this line : &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/v1.15.0/tensorflow/python/ops/array_ops.py#L2174&gt;https://github.com/tensorflow/tensorflow/blob/v1.15.0/tensorflow/python/ops/array_ops.py#L2174&lt;/denchmark-link&gt;

Is it intentional to disable that behavior? If yes, the doc should be updated accordingly.
	</description>
	<comments>
		<comment id='1' author='Lescurel' date='2020-11-26T18:16:07Z'>
		&lt;denchmark-link:https://github.com/Lescurel&gt;@Lescurel&lt;/denchmark-link&gt;

I ran the code shared please refer to &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/fde372015083ad49bb5897296ee33aff/untitled474.ipynb&gt;the gist&lt;/denchmark-link&gt;
 and confirm.
		</comment>
		<comment id='2' author='Lescurel' date='2020-11-27T08:19:42Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 Yes, I confirm.
		</comment>
		<comment id='3' author='Lescurel' date='2020-11-27T09:49:26Z'>
		&lt;denchmark-link:https://github.com/Lescurel&gt;@Lescurel&lt;/denchmark-link&gt;

Is there any particular reason for using 1.x, as here is no support for it now, can you upgrade to 2.x and see if you face any issues.
		</comment>
		<comment id='4' author='Lescurel' date='2020-11-27T14:46:58Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
  I can upgrade to 2.x, and there is no issue with  in TF2.
I just think that the doc of TF1.x could be updated to reflect the real behavior. If my understanding is correct, with the current behavior, the parameter k and padding_value of tf.linalg.diag_part does nothing.
If this behavior is not to be fixed, then close the issue.
		</comment>
		<comment id='5' author='Lescurel' date='2020-12-07T16:11:34Z'>
		
with the current behavior, the parameter k and padding_value of tf.linalg.diag_part does nothing.

Yes. This is clearly  a bug in 1.15. But It's definitely not something significant enough that we'd make a patch release for it, we only do patch releases for major bugs or security fixes. So I'm closing this.
		</comment>
	</comments>
</bug>