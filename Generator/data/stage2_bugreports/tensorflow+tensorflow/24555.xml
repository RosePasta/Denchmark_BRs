<bug id='24555' author='ruihangdu' open_date='2018-12-25T02:24:25Z' closed_time='2019-01-30T19:09:59Z'>
	<summary>Error loading Keras model with custom layer in JSON format</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): OSX Mojave
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.12.0
Python version: 2.7
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: N/A
GPU model and memory: N/A

You can collect some of this information using our environment capture &lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
Describe the current behavior
I was following the Keras tutorial on TF website and I was trying out my custom layer, which was basically the same as in the tutorial.
&lt;denchmark-code&gt;class MyLayer(layers.Layer):

  def __init__(self, output_dim, **kwargs):
    self.output_dim = output_dim
    super(MyLayer, self).__init__(**kwargs)

  def build(self, input_shape):
    shape = tf.TensorShape((input_shape[1], self.output_dim))
    # Create a trainable weight variable for this layer.
    self.kernel = self.add_weight(name='kernel',
                                  shape=shape,
                                  initializer='uniform',
                                  trainable=True)
    # Be sure to call this at the end
    super(MyLayer, self).build(input_shape)

  def call(self, inputs):
    return tf.matmul(inputs, self.kernel)

  def compute_output_shape(self, input_shape):
    shape = tf.TensorShape(input_shape).as_list()
    shape[-1] = self.output_dim
    return tf.TensorShape(shape)

  def get_config(self):
    base_config = super(MyLayer, self).get_config()
    base_config['output_dim'] = self.output_dim
    return base_config

  @classmethod
  def from_config(cls, config):
    return cls(**config)


model = tf.keras.Sequential([
    MyLayer(10),
    layers.Activation('softmax')])

# The compile step specifies the training configuration
model.compile(optimizer=tf.train.RMSPropOptimizer(0.001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

dataset = get_dataset(*get_train_data()) # custom functions

val_dataset = get_dataset(*get_val_data())

test_dataset = get_dataset(*get_test_data())

# Trains for 5 epochs.
model.fit(dataset, steps_per_epoch=30, epochs=5, callbacks=callbacks, validation_data=val_dataset)
model.evaluate(test_dataset, steps=30)

model.save_weights('./weights/model1')
json_string = model.to_json()

pprint(json.loads(json_string))

fresh_model = tf.keras.models.model_from_json(json_string, custom_objects={'MyLayer':MyLayer})
fresh_model.load_weights('./weights/model1')

fresh_model.compile(optimizer=tf.train.RMSPropOptimizer(0.001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

fresh_model.evaluate(test_dataset, steps=30)
&lt;/denchmark-code&gt;

However, I got the following error when I tried to run it and I could not find any related issues online.
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/Users/ray/miniconda3/envs/ml/lib/python2.7/site-packages/IPython/core/interactiveshell.py", line 2878, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "&lt;ipython-input-2-67ef4d13fb1e&gt;", line 1, in &lt;module&gt;
    runfile('/Users/ray/WorkSpace/machinelearning/tensorflow-learn/custom_layer.py', wdir='/Users/ray/WorkSpace/machinelearning/tensorflow-learn')
  File "/Applications/PyCharm.app/Contents/helpers/pydev/_pydev_bundle/pydev_umd.py", line 197, in runfile
    pydev_imports.execfile(filename, global_vars, local_vars)  # execute the script
  File "/Users/ray/WorkSpace/machinelearning/tensorflow-learn/custom_layer.py", line 86, in &lt;module&gt;
    metrics=['accuracy'])
  File "/Users/ray/miniconda3/envs/ml/lib/python2.7/site-packages/tensorflow/python/training/checkpointable/base.py", line 474, in _method_wrapper
    method(self, *args, **kwargs)
  File "/Users/ray/miniconda3/envs/ml/lib/python2.7/site-packages/tensorflow/python/keras/engine/training.py", line 600, in compile
    skip_target_weighing_indices)
  File "/Users/ray/miniconda3/envs/ml/lib/python2.7/site-packages/tensorflow/python/keras/engine/training.py", line 134, in _set_sample_weight_attributes
    self.output_names, sample_weight_mode, skip_target_weighing_indices)
AttributeError: 'Sequential' object has no attribute 'output_names'
&lt;/denchmark-code&gt;

Describe the expected behavior
If the tutorial was correct, the code should run without any bugs and the evaluation results should be the same after loading.
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='ruihangdu' date='2018-12-27T00:30:41Z'>
		@larry0123du Can you provide the minimal full code sample that could reproduce the error? The code you pasted is not complete with get_dataset and callbacks missing.
		</comment>
		<comment id='2' author='ruihangdu' date='2018-12-27T09:56:55Z'>
		Sure, my get_dataset is as follows:
import tensorflow as tf
import numpy as np

def get_train_data():
    # training data
    data = np.random.random((1000, 32))

    data = tf.cast(data, tf.float32)

    labels = np.random.random((1000, 10))

    labels = tf.cast(labels, tf.float32)

    return data, labels

def get_val_data():
    # validation data
    val_data = np.random.random((100, 32))

    val_data = tf.cast(val_data, tf.float32)

    val_labels = np.random.random((100, 10))

    val_labels = tf.cast(val_labels, tf.float32)

    return val_data, val_labels

def get_test_data():
    # test data
    test_data = np.random.random((100, 32))

    test_data = tf.cast(test_data, tf.float32)

    test_labels = np.random.random((100, 10))

    test_labels = tf.cast(test_labels, tf.float32)

    return test_data, test_labels

def get_dataset(data, labels):
    dataset = tf.data.Dataset.from_tensor_slices((data, labels))
    dataset = dataset.batch(32)
    dataset = dataset.repeat()
    return dataset
and the callback is
callbacks = [
    tf.keras.callbacks.EarlyStopping(patience=2, monitor='val_loss')
]
Let me know if you need anything else!
		</comment>
		<comment id='3' author='ruihangdu' date='2019-01-30T19:09:58Z'>
		Hi @larry0123du, this issue should be fixed in the latest nightly, I'm able to run the code successfully
		</comment>
	</comments>
</bug>