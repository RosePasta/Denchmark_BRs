<bug id='30574' author='jbgh2' open_date='2019-07-10T18:05:41Z' closed_time='2019-09-19T16:07:57Z'>
	<summary>Decode_wav sample rate output cannot be passed to tf.signal.linear_to_mel_weight_matrix</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Combined output of decode_wav with the sample in signal/mfccs_from_log_mel_spectrograms
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No
TensorFlow installed from (source or binary): Conda binary
TensorFlow version (use command below): 2.0.0-dev20190702 (git version unknown)
Python version: 3.6.7
Bazel version (if compiling from source): No
GCC/Compiler version (if compiling from source): No
CUDA/cuDNN version:
GPU model and memory: Surface Book Nvidia GPU

Describe the current behavior
The output of decode_wav is tuple of (wav_data, sample_rate)
Sample_rate is int32 but linear_to_mel_weight_matrix expects a float32 sample_rate.
If the sample rate is cast using tf.cast(sample_rate, float32) and then a TypeError is thrown with the message:
TypeError: Using a tf.Tensor as a Python bool is not allowed. Use if t is not None: instead of if t: to test if a tensor is defined, and use TensorFlow ops such as tf.cond to execute subgraphs conditioned on the value of a tensor.
Describe the expected behavior
Sample rate output of decode_wav can be used as input to linear_to_mel_weight_matrix.
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
&lt;denchmark-code&gt;import tensorflow as tf

def load_and_mel_file(path_tensor):
    #From: https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/signal/mfccs_from_log_mel_spectrograms
    pcm, sample_rate = tf.audio.decode_wav(path_tensor)
    sr_f = tf.cast(sample_rate, tf.float32) #Mismatch in types between output of decode_wav and input to linear_to_mel_weight_matrix
    print(pcm, sample_rate, sr_f)

    # A 1024-point STFT with frames of 64 ms and 75% overlap.
    stfts = tf.signal.stft(pcm, frame_length=1024, frame_step=256,
                           fft_length=1024)
    spectrograms = tf.abs(stfts)

    # Warp the linear scale spectrograms into the mel-scale.
    num_spectrogram_bins = stfts.shape[-1]
    lower_edge_hertz, upper_edge_hertz, num_mel_bins = 80.0, 7600.0, 80
    linear_to_mel_weight_matrix = tf.signal.linear_to_mel_weight_matrix(
      num_mel_bins, num_spectrogram_bins, sr_f, lower_edge_hertz,
      upper_edge_hertz)
    mel_spectrograms = tf.tensordot(
      spectrograms, linear_to_mel_weight_matrix, 1)
    mel_spectrograms.set_shape(spectrograms.shape[:-1].concatenate(
      linear_to_mel_weight_matrix.shape[-1:]))

    # Compute a stabilized log to get log-magnitude mel-scale spectrograms.
    log_mel_spectrograms = tf.math.log(mel_spectrograms + 1e-6)
    print(log_mel_spectrograms)
    
    return log_mel_spectrograms

path_ds = tf.data.Dataset.list_files("*.wav")
mel_ds = path_ds.map(load_and_mel_file)
&lt;/denchmark-code&gt;

Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.


TypeError                                 Traceback (most recent call last)
 in 
1 #Build datasets
----&gt; 2 train_ds = build_data_pairs_from_dir(train_dir)
3 test_ds = build_data_pairs_from_dir(test_dir)

 in build_data_pairs_from_dir(source_dir)
54
55     #Convert to MEL
---&gt; 56     clean_mel_ds = clean_path_ds.map(load_and_mel_file, num_parallel_calls=AUTOTUNE)
57     noisy_mel_ds = noisy_path_ds.map(load_and_mel_file, num_parallel_calls=AUTOTUNE)
58
c:\users\benhe.conda\envs\homl2\lib\site-packages\tensorflow_core\python\data\ops\dataset_ops.py in map(self, map_func, num_parallel_calls)
1887       return DatasetV1Adapter(
1888           ParallelMapDataset(
-&gt; 1889               self, map_func, num_parallel_calls, preserve_cardinality=False))
1890
1891   @deprecation.deprecated(None, "Use `tf.data.Dataset.map()")
c:\users\benhe.conda\envs\homl2\lib\site-packages\tensorflow_core\python\data\ops\dataset_ops.py in init(self, input_dataset, map_func, num_parallel_calls, use_inter_op_parallelism, preserve_cardinality, use_legacy_function)
3333         self._transformation_name(),
3334         dataset=input_dataset,
-&gt; 3335         use_legacy_function=use_legacy_function)
3336     self._num_parallel_calls = ops.convert_to_tensor(
3337         num_parallel_calls, dtype=dtypes.int32, name="num_parallel_calls")
c:\users\benhe.conda\envs\homl2\lib\site-packages\tensorflow_core\python\data\ops\dataset_ops.py in init(self, func, transformation_name, dataset, input_classes, input_shapes, input_types, input_structure, add_to_graph, use_legacy_function, defun_kwargs)
2677       resource_tracker = tracking.ResourceTracker()
2678       with tracking.resource_tracker_scope(resource_tracker):
-&gt; 2679         self._function = wrapper_fn._get_concrete_function_internal()
2680         if add_to_graph:
2681           self._function.add_to_graph(ops.get_default_graph())
c:\users\benhe.conda\envs\homl2\lib\site-packages\tensorflow_core\python\eager\function.py in _get_concrete_function_internal(self, *args, **kwargs)
1418     """Bypasses error checking when getting a graph function."""
1419     graph_function = self._get_concrete_function_internal_garbage_collected(
-&gt; 1420         *args, **kwargs)
1421     # We're returning this concrete function to someone, and they may keep a
1422     # reference to the FuncGraph without keeping a reference to the
c:\users\benhe.conda\envs\homl2\lib\site-packages\tensorflow_core\python\eager\function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)
1412     if self.input_signature:
1413       args, kwargs = None, None
-&gt; 1414     graph_function, _, _ = self._maybe_define_function(args, kwargs)
1415     return graph_function
1416
c:\users\benhe.conda\envs\homl2\lib\site-packages\tensorflow_core\python\eager\function.py in _maybe_define_function(self, args, kwargs)
1716         graph_function = self._function_cache.primary.get(cache_key, None)
1717         if graph_function is None:
-&gt; 1718           graph_function = self._create_graph_function(args, kwargs)
1719           self._function_cache.primary[cache_key] = graph_function
1720         return graph_function, args, kwargs
c:\users\benhe.conda\envs\homl2\lib\site-packages\tensorflow_core\python\eager\function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)
1602             arg_names=arg_names,
1603             override_flat_arg_shapes=override_flat_arg_shapes,
-&gt; 1604             capture_by_value=self._capture_by_value),
1605         self._function_attributes)
1606
c:\users\benhe.conda\envs\homl2\lib\site-packages\tensorflow_core\python\framework\func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)
784                                           converted_func)
785
--&gt; 786       func_outputs = python_func(*func_args, **func_kwargs)
787
788       # invariant: func_outputs contains only Tensors, CompositeTensors,
c:\users\benhe.conda\envs\homl2\lib\site-packages\tensorflow_core\python\data\ops\dataset_ops.py in wrapper_fn(*args)
2671           attributes=defun_kwargs)
2672       def wrapper_fn(*args):  # pylint: disable=missing-docstring
-&gt; 2673         ret = _wrapper_helper(*args)
2674         ret = structure.to_tensor_list(self._output_structure, ret)
2675         return [ops.convert_to_tensor(t) for t in ret]
c:\users\benhe.conda\envs\homl2\lib\site-packages\tensorflow_core\python\data\ops\dataset_ops.py in _wrapper_helper(*args)
2616         nested_args = (nested_args,)
2617
-&gt; 2618       ret = autograph.tf_convert(func, ag_ctx)(*nested_args)
2619       # If func returns a list of tensors, nest.flatten() and
2620       # ops.convert_to_tensor() would conspire to attempt to stack
c:\users\benhe.conda\envs\homl2\lib\site-packages\tensorflow_core\python\autograph\impl\api.py in wrapper(*args, **kwargs)
220         except Exception as e:  # pylint:disable=broad-except
221           if hasattr(e, 'ag_error_metadata'):
--&gt; 222             raise e.ag_error_metadata.to_exception(type(e))
223           else:
224             raise
TypeError: in converted code:
&lt;ipython-input-60-92023d8b5863&gt;:27 load_and_mel_file  *
    linear_to_mel_weight_matrix = tf.signal.linear_to_mel_weight_matrix(
c:\users\benhe\.conda\envs\homl2\lib\site-packages\tensorflow_core\python\ops\signal\mel_ops.py:155 linear_to_mel_weight_matrix
    lower_edge_hertz, upper_edge_hertz, dtype)
c:\users\benhe\.conda\envs\homl2\lib\site-packages\tensorflow_core\python\ops\signal\mel_ops.py:74 _validate_arguments
    if sample_rate &lt;= 0.0:
c:\users\benhe\.conda\envs\homl2\lib\site-packages\tensorflow_core\python\framework\ops.py:692 __bool__
    raise TypeError("Using a `tf.Tensor` as a Python `bool` is not allowed. "

TypeError: Using a `tf.Tensor` as a Python `bool` is not allowed. Use `if t is not None:` instead of `if t:` to test if a tensor is defined, and use TensorFlow ops such as tf.cond to execute subgraphs conditioned on the value of a tensor.


	</description>
	<comments>
		<comment id='1' author='jbgh2' date='2019-07-11T06:40:47Z'>
		&lt;denchmark-link:https://github.com/jbgh2&gt;@jbgh2&lt;/denchmark-link&gt;
 I tried reproducing the issue on Colab with Tensorflow 2.0.0-dev20190709 but i got the below error  . Please help us to reproduce the issue. Thanks!
		</comment>
		<comment id='2' author='jbgh2' date='2019-07-11T08:15:12Z'>
		&lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 You need to have at least one .wav file in your working directory, otherwise it will obviously not run.
		</comment>
		<comment id='3' author='jbgh2' date='2019-07-12T06:39:07Z'>
		&lt;denchmark-link:https://github.com/jbgh2&gt;@jbgh2&lt;/denchmark-link&gt;
 I tried executing the .wav file but I am getting the following error
`

ValueError: sample_rate was a non-constant Tensor. Must be a Python float or a constant Tensor.

`. Thanks!
		</comment>
		<comment id='4' author='jbgh2' date='2019-07-12T14:00:23Z'>
		Bug repro in Colab using TF Versions: 2.0.0-beta1
&lt;denchmark-link:https://colab.research.google.com/drive/139qvpTBQH079_z-RFfeTcbJqixV2oL_G&gt;https://colab.research.google.com/drive/139qvpTBQH079_z-RFfeTcbJqixV2oL_G&lt;/denchmark-link&gt;

As far as I can tell the bug is because _validate_arguments expects Python types not Tensors and decode_wav returns sample_rate as a Tensor.
I've included code to repro both problems:

Sample_Rate from decode_wav is an int32 tensor that is compared to a Python 0.0
Cast sample_rate to float32 tensor causes bool comparison error

		</comment>
		<comment id='5' author='jbgh2' date='2019-09-15T06:21:10Z'>
		Thanks for the report! I have a fix for this out for review.
		</comment>
		<comment id='6' author='jbgh2' date='2019-09-19T16:07:57Z'>
		Fixed in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/03ff87bfdeec43b9d3a208746ae19ebf9c139c14&gt;03ff87b&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='7' author='jbgh2' date='2019-09-19T16:07:58Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30574&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30574&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>