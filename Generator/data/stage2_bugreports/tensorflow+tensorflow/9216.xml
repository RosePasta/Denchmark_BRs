<bug id='9216' author='sandipmgiri' open_date='2017-04-14T08:58:26Z' closed_time='2017-06-14T06:54:38Z'>
	<summary>AssertionError: Items are not equal: ACTUAL: 2147483647 DESIRED: -2147483648</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Ubuntu 16.04 (ppc64le)
TensorFlow installed from (source or binary):
Installed from source (v1.0.1)
TensorFlow version (use command below):
('v1.0.1-0-ge895d5c-dirty', '1.0.1')
Bazel version (if compiling from source):
bazel release 0.4.4-2017-04-10 (@80a07b5)
CUDA/cuDNN version:
In disable mode
Exact command to reproduce:
bazel test //tensorflow/python/kernel_tests:cast_op_test

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

Built TF successfully , however I am getting Items are not equal error while running the cast_op_test
To cross verify the test results , I ran this test on X86 vm and that passed successfully. This test is failing only on ppc64le platform . Here I would like to know your suggestions and comments.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;$ bazel test //tensorflow/python/kernel_tests:cast_op_test


exec ${PAGER:-/usr/bin/less} "$0" || exit 1
-----------------------------------------------------------------------------
I tensorflow/compiler/xla/service/platform_util.cc:58] platform Host present with 16 visible devices
I tensorflow/compiler/xla/service/service.cc:180] XLA service executing computations on platform Host. Devices:
I tensorflow/compiler/xla/service/service.cc:187]   StreamExecutor device (0): &lt;undefined&gt;, &lt;undefined&gt;
/root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow/bazel-out/local-opt/bin/tensorflow/python/kernel_tests/cast_op_test.runfiles/org_tensorflow/tensorflow/python/kernel_tests/cast_op_test.py:62: ComplexWarning: Casting complex values to real discards the imaginary part
  np_ans = x.astype(dtype)
....F.W tensorflow/core/framework/op_kernel.cc:983] Unimplemented: Cast int64 to string is not supported
E tensorflow/core/common_runtime/executor.cc:594] Executor failed to create kernel. Unimplemented: Cast int64 to string is not supported
         [[Node: Cast = Cast[DstT=DT_STRING, SrcT=DT_INT64, _device="/job:localhost/replica:0/task:0/cpu:0"](Cast/x)]]
........
======================================================================
FAIL: testInfNan (__main__.CastOpTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow/bazel-out/local-opt/bin/tensorflow/python/kernel_tests/cast_op_test.runfiles/org_tensorflow/tensorflow/python/kernel_tests/cast_op_test.py", line 150, in testInfNan
    self._compare(np.inf, np.int32, i4.min, False)
  File "/root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow/bazel-out/local-opt/bin/tensorflow/python/kernel_tests/cast_op_test.runfiles/org_tensorflow/tensorflow/python/kernel_tests/cast_op_test.py", line 124, in _compare
    x, dst_dtype, use_gpu=use_gpu), dst_dtype(expected))
  File "/usr/lib64/python2.7/site-packages/numpy/testing/utils.py", line 425, in assert_equal
    raise AssertionError(msg)
AssertionError:
Items are not equal:
 ACTUAL: 2147483647
 DESIRED: -2147483648

----------------------------------------------------------------------
Ran 14 tests in 2.485s

FAILED (failures=1)
`

```
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='sandipmgiri' date='2017-04-14T17:10:13Z'>
		Thanks for pointing this out.
Support for big-endian architecture was added by &lt;denchmark-link:https://github.com/namrata-ibm&gt;@namrata-ibm&lt;/denchmark-link&gt;
 in commit &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/1e44b15ff02fe3bf4764189eb1b796602d669c3e&gt;1e44b15&lt;/denchmark-link&gt;

Support for big-endian architectures in TensorFlow is community driven and we don't test that as part of every release at this time.
&lt;denchmark-link:https://github.com/namrata-ibm&gt;@namrata-ibm&lt;/denchmark-link&gt;
 : Could you take a look? Seems like this is the line that is failing:


		</comment>
		<comment id='2' author='sandipmgiri' date='2017-04-14T17:12:04Z'>
		Oh, I also notice that you mentioned you're running on ppc64le.
Isn't that little endian? If so, could you share the output of the following python script:
&lt;denchmark-code&gt;import sys
print sys.byteorder
&lt;/denchmark-code&gt;

Because the test failure suggests that sys.byteorder is big even though your architecture is little-endian?
		</comment>
		<comment id='3' author='sandipmgiri' date='2017-04-16T10:17:58Z'>
		The failure seems to be at line number 150 from above log:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow/bazel-out/local-opt/bin/tensorflow/python/kernel_tests/cast_op_test.runfiles/org_tensorflow/tensorflow/python/kernel_tests/cast_op_test.py", line 150, in testInfNan

&lt;/denchmark-code&gt;

in function:
self._compare(np.inf, np.int32, i4.min, False)
&lt;denchmark-link:https://github.com/asimshankar&gt;@asimshankar&lt;/denchmark-link&gt;
 ,
ppc64le being little endian, doesn't enter the condition for big endian and follows the original code just like x86.
I can also see error :
 E tensorflow/core/common_runtime/executor.cc:594] Executor failed to create kernel.  Unimplemented: Cast int64 to string is not supported in above log.
This would need some debugging on ppc64le.
		</comment>
		<comment id='4' author='sandipmgiri' date='2017-04-16T17:08:59Z'>
		Oh, apologies, dunno why I misread the line.
&lt;denchmark-link:https://github.com/sandipmgiri&gt;@sandipmgiri&lt;/denchmark-link&gt;
 : Does seem that the cast kernel (&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cast_op.cc#L116&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cast_op.cc#L116&lt;/denchmark-link&gt;
) isn't quite doing what we expected on ppc64le.
Are you able to trace that? Contributions to fix it will be welcome.
		</comment>
		<comment id='5' author='sandipmgiri' date='2017-04-20T09:39:00Z'>
		Actual failure at line number 150 , in function self._compare(np.inf, np.int32, i4.min, False)
For little-endian, I tried changing the value in above function :
Now this test is passing successfully on both the platform (x86 and ppc64le) after replacing the np.inf with
-np.inf. Getting same result as expected  i.e. -2147483648
&lt;denchmark-link:https://github.com/asimshankar&gt;@asimshankar&lt;/denchmark-link&gt;
 , Is there need to take care of ?
		</comment>
		<comment id='6' author='sandipmgiri' date='2017-06-12T22:27:58Z'>
		I've also run into this issue on a ppc64le system.
Casting a non-finite float point values (inf, -inf, nan) to an integer is an undefined behavior in C (see section 6.3.1.4 of the C99 standards).  These tests seems to be expecting a specific result from this undefined behavior which is not portable.  The expected result, the largest negative number supported by integer type being cast to, happens to be the integer indefinite value which the x87 FPU gives for floating-point invalid-operations.
I'm not certain how these tests can be made portable given that the behavior being exercised is  architecture specific.
		</comment>
		<comment id='7' author='sandipmgiri' date='2017-06-14T06:54:38Z'>
		Closing as duplicate of &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/9360&gt;#9360&lt;/denchmark-link&gt;
, see discussion in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/9360&gt;#9360&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='8' author='sandipmgiri' date='2017-06-30T08:21:17Z'>
		This issue resolved in PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/10522&gt;#10522&lt;/denchmark-link&gt;
 (merged commit &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/d0d2308389307b5bb3db8cff41b9eaf6d0ae67dd&gt;d0d2308&lt;/denchmark-link&gt;
)
		</comment>
	</comments>
</bug>