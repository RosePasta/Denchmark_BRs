<bug id='28953' author='hadim' open_date='2019-05-23T02:28:38Z' closed_time='2019-05-31T04:31:59Z'>
	<summary>[TF 2.0] Cannot use `tf.image.decode_image` with `tf.map_fn` in `tf.data.Dataset.map` when `elems` is empty</summary>
	<description>

Tensorflow: latest tf-nightly-2.0-preview (as of today).
Python 3.7
Ubuntu 19.04

When using tf.data.Dataset.map , it can happen that an image does not have any objects in it and so tensors describing masks or boxes are empty.
A common preprocessing step is to decode a list of masks encoded as string in JPEG or PNG. Consider the following code:
import tensorflow as tf
import numpy as np

def generate_encoded_image():
    im = np.random.random((256, 256, 1)).astype('uint8')
    return tf.image.encode_png(im)

def fake_data_generator(feature):
    # Here you can change the range to modify the number of objects.
    # The issue araise when feature does not have any objects in it,
    # when `n_objects = 0`.
    n_objects = np.random.randint(0, 1)
    
    feature = {}
    feature['label_ids'] = np.random.random((n_objects,)).astype('int64')
    feature['bboxes'] = np.random.random((n_objects, 4)).astype('float32')    
    
    if n_objects == 0:
        feature['masks'] = tf.constant([], dtype=tf.string)
    else:
        feature['masks'] = [generate_encoded_image() for _ in range(n_objects)]
        
    return feature

def decode_masks(feature):
    decode_image_fn = lambda x: tf.image.decode_image(x)
    
    # Using the following works
    # decode_image_fn = lambda x: tf.constant([3, 4, 5], dtype=tf.uint8)
    
    feature['masks_new'] = tf.map_fn(decode_image_fn, feature['masks'], dtype=tf.uint8)
    return feature
   
dataset = tf.data.Dataset.from_tensors(tf.range(20))
dataset = dataset.map(fake_data_generator)
dataset = dataset.map(decode_masks)

for feature in dataset:
    pass
Running it as this will raise this error:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
InvalidArgumentError                      Traceback (most recent call last)
&lt;ipython-input-135-af99bdf86e00&gt; in &lt;module&gt;
     36 dataset = dataset.map(decode_masks)
     37 
---&gt; 38 for feature in dataset:
     39     pass

~/local/conda/envs/tf/lib/python3.7/site-packages/tensorflow/python/data/ops/iterator_ops.py in __next__(self)
    584 
    585   def __next__(self):  # For Python 3 compatibility
--&gt; 586     return self.next()
    587 
    588   def _next_internal(self):

~/local/conda/envs/tf/lib/python3.7/site-packages/tensorflow/python/data/ops/iterator_ops.py in next(self)
    621     """
    622     try:
--&gt; 623       return self._next_internal()
    624     except errors.OutOfRangeError:
    625       raise StopIteration

~/local/conda/envs/tf/lib/python3.7/site-packages/tensorflow/python/data/ops/iterator_ops.py in _next_internal(self)
    613             self._iterator_resource,
    614             output_types=self._flat_output_types,
--&gt; 615             output_shapes=self._flat_output_shapes)
    616 
    617       return self._structure._from_compatible_tensor_list(ret)  # pylint: disable=protected-access

~/local/conda/envs/tf/lib/python3.7/site-packages/tensorflow/python/ops/gen_dataset_ops.py in iterator_get_next_sync(iterator, output_types, output_shapes, name)
   2118       else:
   2119         message = e.message
-&gt; 2120       _six.raise_from(_core._status_to_exception(e.code, message), None)
   2121   # Add nodes to the TensorFlow graph.
   2122   if not isinstance(output_types, (list, tuple)):

~/local/conda/envs/tf/lib/python3.7/site-packages/six.py in raise_from(value, from_value)

InvalidArgumentError: Tried to stack elements of an empty list with non-fully-defined element_shape: &lt;unknown&gt;
	 [[{{node map/TensorArrayV2Stack/TensorListStack}}]] [Op:IteratorGetNextSync]
&lt;/denchmark-code&gt;

The error only happens when n_objects = 0 and when I use tf.image.decode_image.
I also tried to use something like:
if tf.shape(feature['masks'])[0] == 0:
        feature['masks_new'] = tf.constant([], dtype=tf.uint8)
    else:
        feature['masks_new'] = tf.map_fn(decode_image_fn, feature['masks'], dtype=tf.uint8)
But it raises the same error. It looks like  tf.shape(feature['masks'])[0] == 0 is never True.
I also tried to @tf.function for decode_masks() but then TF complains because I modify the input structure:
&lt;denchmark-code&gt;ValueError: The two structures don't have the same nested structure.

First structure: type=tuple str=({'label_ids': &lt;tf.Tensor 'feature_1:0' shape=(0,) dtype=int64&gt;, 'bboxes': &lt;tf.Tensor 'feature:0' shape=(0, 4) dtype=float32&gt;, 'masks': &lt;tf.Tensor 'feature_2:0' shape=(0,) dtype=string&gt;},)

Second structure: type=tuple str=({'label_ids': &lt;tf.Tensor 'feature_1:0' shape=(0,) dtype=int64&gt;, 'bboxes': &lt;tf.Tensor 'feature:0' shape=(0, 4) dtype=float32&gt;, 'masks': &lt;tf.Tensor 'feature_2:0' shape=(0,) dtype=string&gt;, 'masks_new': &lt;tf.Tensor 'map/TensorArrayV2Stack/TensorListStack:0' shape=&lt;unknown&gt; dtype=uint8&gt;},)

More specifically: The two dictionaries don't have the same set of keys. First structure has keys type=list str=['label_ids', 'bboxes', 'masks'], while second structure has keys type=list str=['label_ids', 'bboxes', 'masks', 'masks_new']

During handling of the above exception, another exception occurred:
&lt;/denchmark-code&gt;

I am out of idea here. Help is welcome :-)
	</description>
	<comments>
		<comment id='1' author='hadim' date='2019-05-24T10:02:28Z'>
		I was able to reproduce the issue with TensorFlow version 2.0 on Colab.
		</comment>
		<comment id='2' author='hadim' date='2019-05-31T04:31:59Z'>
		Could you try rewriting you decode_image_fn as follows
&lt;denchmark-code&gt;def decode_image_fn(x):
  t = tf.image.decode_image(x)
  t.set_shape((256, 256, 1))
  return t
&lt;/denchmark-code&gt;

The set_shape is important here because otherwise the runtime has no way of knowing the complete shape of the output tensor of tf.map_fn.
		</comment>
		<comment id='3' author='hadim' date='2019-05-31T04:32:00Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28953&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28953&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='hadim' date='2019-05-31T13:46:26Z'>
		Thank you &lt;denchmark-link:https://github.com/saxenasaurabh&gt;@saxenasaurabh&lt;/denchmark-link&gt;
.
It works using  t.set_shape((256, 256, 1)) but the image dimensions are dynamic and read during runtime. So the following:
def decode_masks(feature):
    
    image_shape = tf.TensorShape([feature['size'], feature['size'], 1])
    
    def _decode_image_fn(encoded_image):
        image = tf.image.decode_image(encoded_image)
        image.set_shape(image_shape)
        return image
    
    feature['masks_new'] = tf.map_fn(_decode_image_fn, feature['masks'], dtype=tf.uint8)
    return feature
raises this error:
&lt;denchmark-code&gt;&lt;ipython-input-25-46810f3be453&gt; in decode_masks(feature)
     23 def decode_masks(feature):
     24 
---&gt; 25     image_shape = tf.TensorShape([feature['size'], feature['size'], 1])
     26 
     27     def _decode_image_fn(encoded_image):

~/local/conda/envs/tf/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py in __init__(self, dims)
    772       else:
    773         # Got a list of dimensions
--&gt; 774         self._dims = [as_dimension(d) for d in dims_iter]
    775 
    776   @property

~/local/conda/envs/tf/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py in &lt;listcomp&gt;(.0)
    772       else:
    773         # Got a list of dimensions
--&gt; 774         self._dims = [as_dimension(d) for d in dims_iter]
    775 
    776   @property

~/local/conda/envs/tf/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py in as_dimension(value)
    714     return value
    715   else:
--&gt; 716     return Dimension(value)
    717 
    718 

~/local/conda/envs/tf/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py in __init__(self, value)
    183       raise TypeError("Cannot convert %s to Dimension" % value)
    184     else:
--&gt; 185       self._value = int(value)
    186       if (not isinstance(value, compat.bytes_or_text_types) and
    187           self._value != value):

TypeError: int() argument must be a string, a bytes-like object or a number, not 'Tensor'
&lt;/denchmark-code&gt;

Is there is any workaround to resize from dynamic values? After all, my code was working well (without using the reshaping step). All I need is to make it work when batch_size = 0.
		</comment>
		<comment id='5' author='hadim' date='2019-11-22T15:12:43Z'>
		&lt;denchmark-link:https://github.com/hadim&gt;@hadim&lt;/denchmark-link&gt;
  Did you find the solution to this problem ? It will be appreciated as I am facing the same
		</comment>
		<comment id='6' author='hadim' date='2020-07-21T01:33:02Z'>
		&lt;denchmark-link:https://github.com/hadim&gt;@hadim&lt;/denchmark-link&gt;

Were you able to resolve this error?
I am facing a similar issue.
Thanks
		</comment>
	</comments>
</bug>