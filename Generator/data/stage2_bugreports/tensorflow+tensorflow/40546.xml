<bug id='40546' author='PistaSaki' open_date='2020-06-17T14:26:17Z' closed_time='2020-11-04T21:41:44Z'>
	<summary>`tf.saved_model.save` attempts to compile __call__ even if `signatures` is not `None`</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Microsoft Windows 10 Enterprise
TensorFlow installed from (source or binary): official pipy wheel
TensorFlow version (use command below): v2.2.0-rc4-8-g2b96f3662b 2.2.0
Python version: 3.7.6

Describe the current behavior
Consider a model whose call method can not be decorated by tf.function. We want to save some methods of the model (but not the call) using tf.saved_model.save. So we pass signatures argument to the  tf.saved_model.save where we list the methods we want to save. In TF2.0 and TF2.1 this worked.
In TF2.2 it fails as tensorflow seems to try to decorate call by tf.function anyway.
Describe the expected behavior
Same behaviour as in TF2.0 and TF2.1. Passing signatures argument to tf.saved_model.save should prevent compilation of other methods.
Standalone code to reproduce the issue
import tensorflow as tf


class SomeClass:
    def __init__(self, x):
        self.x = x

    def __repr__(self):
        return f"SomeClass({self.x})"


class MyModel(tf.keras.Model):
    def build(self, input_shape):
        self.a = tf.Variable(1.0, name="a")

    def serve(self, x):
        return x + self.a

    def call(self, x):
        """This method can't be decorated by `tf.function` because it returns an object that is not a Tensor.
        It should not matter, because we do not want to save it.
        """
        x = tf.cast(x, tf.float32)
        return SomeClass(x + self.a)


model = MyModel()
print("Call the model in order to build it: ", model(4))

signatures = {"my_stuff": tf.function(model.serve, input_signature=[tf.TensorSpec([None], tf.float32)])}
tf.saved_model.save(model, export_dir="", signatures=signatures)
This code works in TF2.0 and TF2.1 but not in TF2.2.
Other info / logs
Here is the traceback in TF2.2
&lt;denchmark-code&gt;Call the model in order to build it:  SomeClass(5.0)
Traceback (most recent call last):
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\framework\tensor_util.py", line 543, in make_tensor_proto
    str_values = [compat.as_bytes(x) for x in proto_values]
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\framework\tensor_util.py", line 543, in &lt;listcomp&gt;
    str_values = [compat.as_bytes(x) for x in proto_values]
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\util\compat.py", line 87, in as_bytes
    (bytes_or_text,))
TypeError: Expected binary or unicode string, got SomeClass(Tensor("my_model/add:0", shape=(), dtype=float32))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\framework\func_graph.py", line 937, in convert
    x = ops.convert_to_tensor_or_composite(x)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\framework\ops.py", line 1464, in convert_to_tensor_or_composite
    value=value, dtype=dtype, name=name, as_ref=False)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\framework\ops.py", line 1503, in internal_convert_to_tensor_or_composite
    accepted_result_types=(Tensor, composite_tensor.CompositeTensor))
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\framework\ops.py", line 1341, in convert_to_tensor
    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\framework\constant_op.py", line 321, in _constant_tensor_conversion_function
    return constant(v, dtype=dtype, name=name)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\framework\constant_op.py", line 262, in constant
    allow_broadcast=True)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\framework\constant_op.py", line 300, in _constant_impl
    allow_broadcast=allow_broadcast))
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\framework\tensor_util.py", line 547, in make_tensor_proto
    "supported type." % (type(values), values))
TypeError: Failed to convert object of type &lt;class '__main__.SomeClass'&gt; to Tensor. Contents: SomeClass(Tensor("my_model/add:0", shape=(), dtype=float32)). Consider casting elements to a supported type.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "bordel.py", line 31, in &lt;module&gt;
    tf.saved_model.save(model, export_dir="", signatures=signatures)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\saved_model\save.py", line 951, in save
    obj, export_dir, signatures, options, meta_graph_def)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\saved_model\save.py", line 1012, in _build_meta_graph
    signature_serialization.validate_saveable_view(checkpoint_graph_view)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\saved_model\signature_serialization.py", line 268, in validate_saveable_view
    saveable_view.root):
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\saved_model\save.py", line 108, in list_dependencies
    extra_dependencies = self.list_extra_dependencies(obj)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\saved_model\save.py", line 137, in list_extra_dependencies
    self._serialization_cache)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\keras\engine\base_layer.py", line 2746, in _list_extra_dependencies_for_serialization
    .list_extra_dependencies_for_serialization(serialization_cache))
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\keras\saving\saved_model\base_serialization.py", line 74, in list_extra_dependencies_for_serialization
    return self.objects_to_serialize(serialization_cache)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\keras\saving\saved_model\layer_serialization.py", line 73, in objects_to_serialize
    serialization_cache).objects_to_serialize)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\keras\saving\saved_model\layer_serialization.py", line 92, in _get_serialized_attributes
    serialization_cache)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\keras\saving\saved_model\model_serialization.py", line 47, in _get_serialized_attributes_internal
    default_signature = save_impl.default_save_signature(self.obj)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\keras\saving\saved_model\save_impl.py", line 203, in default_save_signature
    fn.get_concrete_function()
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\eager\def_function.py", line 959, in get_concrete_function
    concrete = self._get_concrete_function_garbage_collected(*args, **kwargs)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\eager\def_function.py", line 865, in _get_concrete_function_garbage_collected
    self._initialize(args, kwargs, add_initializers_to=initializers)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\eager\def_function.py", line 506, in _initialize
    *args, **kwds))
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\eager\function.py", line 2446, in _get_concrete_function_internal_garbage_collected
    graph_function, _, _ = self._maybe_define_function(args, kwargs)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\eager\function.py", line 2777, in _maybe_define_function
    graph_function = self._create_graph_function(args, kwargs)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\eager\function.py", line 2667, in _create_graph_function
    capture_by_value=self._capture_by_value),
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\framework\func_graph.py", line 986, in func_graph_from_py_func
    expand_composites=True)
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\util\nest.py", line 617, in map_structure
    structure[0], [func(*x) for x in entries],
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\util\nest.py", line 617, in &lt;listcomp&gt;
    structure[0], [func(*x) for x in entries],
  File "D:\git\workon_hrab2\venv_tf_22\lib\site-packages\tensorflow\python\framework\func_graph.py", line 943, in convert
    (str(python_func), type(x)))
TypeError: To be compatible with tf.contrib.eager.defun, Python functions must return zero or more Tensors; in compilation of &lt;function trace_model_call.&lt;locals&gt;._wrapped_model at 0x00000278D27BE828&gt;, found return
 value of type &lt;class '__main__.SomeClass'&gt;, which is not a Tensor.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='PistaSaki' date='2020-06-18T05:30:30Z'>
		I have tried in colab with TF version 2.2, nightly versions and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/527d7062d60904f309f4b45714834440/untitled41.ipynb&gt;here.&lt;/denchmark-link&gt;
However i am not seeing any issues with TF versions 2.0, 2.2.Thanks!
		</comment>
		<comment id='2' author='PistaSaki' date='2020-06-18T07:39:17Z'>
		You probably meant: "i am not seeing any issues with TF versions 2.0, 2.1.", didn't you?
Just to avoid confusion.
		</comment>
		<comment id='3' author='PistaSaki' date='2020-06-18T09:32:35Z'>
		&lt;denchmark-link:https://github.com/PistaSaki&gt;@PistaSaki&lt;/denchmark-link&gt;

Sorry my bad. Typo mistake. I am not seeing issue with TF versions 2.0,2.1.Thanks!
		</comment>
		<comment id='4' author='PistaSaki' date='2020-06-18T10:26:02Z'>
		If somebody needs it, I found a way to circumvent the problem which works for me.

Define your own __call__ method and don't rely on tensorflow to create __call__ from call.
Before saving, set model.built = False

Here is the code:
from functools import wraps
from typing import Callable

import tensorflow as tf


class SomeClass:
    def __init__(self, x):
        self.x = x

    def __repr__(self):
        return f"SomeClass({self.x})"


def main_call(call: Callable) -&gt; Callable:
    @wraps(call)
    def decorated_call(self, *args, **kwargs):
        with tf.name_scope(self.name_scope()):
            if not self.built:
                self.build([])
                self.built = True

            return call(self, *args, **kwargs)

    return decorated_call


class MyModel(tf.keras.Model):
    def build(self, input_shape):
        self.a = tf.Variable(1.0, name="a")

    def serve(self, x):
        return x + self.a

    @main_call
    def __call__(self, x):
        """This method can't be decorated by `tf.function` because it returns an object that is not a Tensor.
        It should not matter, because we do not want to save it.
        """
        x = tf.cast(x, tf.float32)
        return SomeClass(x + self.a)


model = MyModel()
print("Call the model in order to build it: ", model(4))

signatures = {"my_stuff": tf.function(model.serve, input_signature=[tf.TensorSpec([None], tf.float32)])}
model.built = False
tf.saved_model.save(model, export_dir="d:/tmp_model", signatures=signatures)
		</comment>
		<comment id='5' author='PistaSaki' date='2020-11-04T21:41:44Z'>
		If you install tf-nightly, you can use the newly added save_traces argument to prevent the model from being traced.
model.save(export_dir="", signatures=signatures, save_traces=False)
		</comment>
		<comment id='6' author='PistaSaki' date='2020-11-04T21:41:45Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40546&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40546&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>