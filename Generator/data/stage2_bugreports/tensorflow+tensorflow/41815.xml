<bug id='41815' author='leandro-gracia-gil' open_date='2020-07-28T11:08:34Z' closed_time='2020-09-18T16:39:56Z'>
	<summary>SavedModel exporting fails on RNNs by setting wrong input dtypes</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v2.3.0-rc2-23-gb36436b087 2.3.0
Python version: 3.7.7
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
When trying to export concrete functions in a Keras model to the SavedModel format, if a function uses tf.keras.layers.RNN, the dtypes of the RNN cell input arguments are wrong. In particular, actual dtypes seem to be ignored and replaced with tf.float32. This does not happen when calling the same concrete function manually, but only when trying to export it.
Describe the expected behavior
The input dtypes should be preserved, allowing to export the model. At the very least the behavior should be consistent with calling the concrete function.
Standalone code to reproduce the issue
import tensorflow as tf

class TestRNNCell(tf.keras.layers.Layer):
  def __init__(self):
    super().__init__()
    self.units = 10
    self.state_size = 20

  def call(self, indices, state):
    # This assertion fails.
    assert indices.dtype == tf.int32
    # If the assertion is removed, this line fails with:
    # TypeError: Value passed to parameter 'indices' has DataType float32 not in list of allowed values: int32, int64
    output = tf.gather(tf.range(5), indices)
    return output, state

class TestModel(tf.keras.Model):
  def __init__(self):
    super().__init__()
    self.rnn = tf.keras.layers.RNN(TestRNNCell())

  @tf.function
  def do_stuff(self, indices):
    assert indices.dtype == tf.int32
    return self.rnn(indices)

model = TestModel()
tf.saved_model.save(model, 'test_model', signatures={
  'do_stuff': model.do_stuff.get_concrete_function(
      indices=tf.TensorSpec([None, None, 5], tf.int32))
})
Using model.save instead of tf.saved_model.save does not help either. Here's a version that fails just in the same way.
class TestModel(tf.keras.Model):
  # [Continuing the class above]

  def call(self, indices):
    assert indices.dtype == tf.int32
    return self.rnn(indices)

model = TestModel()

# This works fine.
model(tf.zeros([10, 10, 5], tf.int32))

# This fails because the RNN inputs are now tf.float32.
model.save('test_model', save_format='tf')
Any possible workaround for this would be much appreciated. I cannot figure out any since this problem only affects SavedModel exporting and not the actual concrete functions being exported.
	</description>
	<comments>
		<comment id='1' author='leandro-gracia-gil' date='2020-07-29T10:16:25Z'>
		Was able to reproduce the issue with &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/2f6efc1ad81e0c6f239d0f9f0fd29805/41815-2-3.ipynb&gt;TF v2.3&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/c2fd2680adb7cd75de9e8e455b1b4988/41815-tf-nightly.ipynb&gt;TF-nightly&lt;/denchmark-link&gt;
. Please find the attached gist. Thanks!
		</comment>
		<comment id='2' author='leandro-gracia-gil' date='2020-09-18T16:39:56Z'>
		The error is a bit hard to follow, but you won't get the error if you set the dtype of the RNN layer:
&lt;denchmark-code&gt;    self.rnn = tf.keras.layers.RNN(TestRNNCell(),dtype=tf.int32)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='leandro-gracia-gil' date='2020-09-18T16:39:58Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41815&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41815&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>