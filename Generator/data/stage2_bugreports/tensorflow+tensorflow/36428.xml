<bug id='36428' author='rgov' open_date='2020-02-02T22:02:50Z' closed_time='2020-08-07T05:41:12Z'>
	<summary>Discrepancy between keras.layers.Reshape and tf.keras.layers.Reshape</summary>
	<description>
&lt;denchmark-code&gt;tf-version 2.1.0
keras-version 2.2.4-tf
&lt;/denchmark-code&gt;

In Keras, according to &lt;denchmark-link:https://keras.io/layers/core/&gt;the documentation&lt;/denchmark-link&gt;
, we expect:
model.add(Reshape((-1, 2, 2)))
# now: model.output_shape == (None, 3, 2, 2)
But in tf.Keras &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/layers/Reshape&gt;documentation&lt;/denchmark-link&gt;
:
model.add(Reshape((-1, 2, 2)))
# now: model.output_shape == (None, None, 2, 2)
The second dimension is now None instead of the computed value.
This makes tf.Keras incompatible with Keras, and makes it harder to write code that is parameterized by of the output shape of an opaque model. Is there a way to get the true output shape?
	</description>
	<comments>
		<comment id='1' author='rgov' date='2020-02-03T22:16:39Z'>
		I could reproduce the issue. &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/09cfb560b120cc9c83e93b9378f1ddf6/36428_keras.ipynb&gt;Here is the gist&lt;/denchmark-link&gt;
 with  and &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/531ee39cf36accf688a40b4aac667e26/36428_tf.ipynb&gt;here is the gist&lt;/denchmark-link&gt;
 with . The gists are for our reference. Thanks
		</comment>
		<comment id='2' author='rgov' date='2020-02-03T22:18:49Z'>
		To answer my question, I found I could do model.compute_output_shape(model.input_shape). At the least, this should be noted in the documentation I think.
		</comment>
		<comment id='3' author='rgov' date='2020-02-06T21:56:40Z'>
		&lt;denchmark-link:https://github.com/rgov&gt;@rgov&lt;/denchmark-link&gt;
 Are you interested in raising PR? Thanks!
		</comment>
		<comment id='4' author='rgov' date='2020-02-08T11:46:26Z'>
		&lt;denchmark-link:https://github.com/rgov&gt;@rgov&lt;/denchmark-link&gt;
 I have raised a PR. Can you please check whether the way I have used  is correct or not?
		</comment>
		<comment id='5' author='rgov' date='2020-03-04T11:06:34Z'>
		This looks like an issue that needs to be resolved regardless of the keras/tf.keras merge
		</comment>
		<comment id='6' author='rgov' date='2020-04-09T18:00:45Z'>
		This is an issue that happened in eager mode, seems the solution is:
if not tf.executing_eagerly():
      # Set the static shape for the result since it might lost during array_ops
      # reshape, eg, some `None` dim in the result could be inferred.
      result.set_shape(self.compute_output_shape(inputs.shape))
    return result
We made a commit which was reverted. Waiting for another commit.
		</comment>
		<comment id='7' author='rgov' date='2020-06-23T17:21:01Z'>
		&lt;denchmark-link:https://github.com/tanzhenyu&gt;@tanzhenyu&lt;/denchmark-link&gt;
 Do you have an estimate of when this issue will be resolved?  Is there anything the community can do to help?
		</comment>
		<comment id='8' author='rgov' date='2020-06-23T17:32:49Z'>
		
@tanzhenyu Do you have an estimate of when this issue will be resolved? Is there anything the community can do to help?

Can you try tf-nightly? There are quite some fix updates on this issue
		</comment>
		<comment id='9' author='rgov' date='2020-08-07T05:41:11Z'>
		&lt;denchmark-link:https://github.com/rgov&gt;@rgov&lt;/denchmark-link&gt;
 This is resolved in recent . &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/3dc0d61293107949485267d03ebf113c/36428_tf.ipynb&gt;Here&lt;/denchmark-link&gt;
 is the gist for your reference.
I am closing this issue as this was resolved already. Please feel free to reopen if you notice any related issue. thanks!
		</comment>
	</comments>
</bug>