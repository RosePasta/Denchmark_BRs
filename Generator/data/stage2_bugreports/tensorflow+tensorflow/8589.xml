<bug id='8589' author='hugman' open_date='2017-03-21T15:56:19Z' closed_time='2017-06-16T20:44:53Z'>
	<summary>contrib.crf + XLA doesn't work</summary>
	<description>
The combination of tf.contrib.crf + XLA seems not working (sometimes hang forever).
Following code is for reproducing errors.
The code is from standard example - &lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/crf&gt;https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/crf&lt;/denchmark-link&gt;

The only difference is XLA part.
When XLA is enabled, loss is not reducing.
In more large network(real NLP applications), it hangs forever after graph building.
My settings is

tensorflow 1.0.1
python 3.6 (anaconda 4.3.0 )
cuda 7.5

import numpy as np
import tensorflow as tf

# Data settings.
num_examples = 10
num_words = 20
num_features = 100
num_tags = 5

# Random features.
x = np.random.rand(num_examples, num_words, num_features).astype(np.float32)

# Random tag indices representing the gold sequence.
y = np.random.randint(num_tags, size=[num_examples, num_words]).astype(np.int32)

# All sequences in this example have the same length, but they can be variable in a real model.
sequence_lengths = np.full(num_examples, num_words - 1, dtype=np.int32)


# to enable XLA
tf_config = tf.ConfigProto()
tf_config.graph_options.optimizer_options.global_jit_level = tf.OptimizerOptions.ON_1


# Train and evaluate the model.
with tf.Graph().as_default():
  with tf.Session(config=tf_config) as session:
    # Add the data to the TensorFlow graph.
    x_t = tf.constant(x)
    y_t = tf.constant(y)
    sequence_lengths_t = tf.constant(sequence_lengths)

    # Compute unary scores from a linear layer.
    weights = tf.get_variable("weights", [num_features, num_tags])
    matricized_x_t = tf.reshape(x_t, [-1, num_features])
    matricized_unary_scores = tf.matmul(matricized_x_t, weights)
    unary_scores = tf.reshape(matricized_unary_scores,
                              [num_examples, num_words, num_tags])

    # Compute the log-likelihood of the gold sequences and keep the transition
    # params for inference at test time.
    log_likelihood, transition_params = tf.contrib.crf.crf_log_likelihood(
        unary_scores, y_t, sequence_lengths_t)

    # Add a training op to tune the parameters.
    loss = tf.reduce_mean(-log_likelihood)
    
    train_op = tf.train.GradientDescentOptimizer(0.01).minimize(loss)


    # Train for a fixed number of iterations.
    session.run(tf.global_variables_initializer())
    for i in range(1000):
      tf_unary_scores, tf_transition_params, _ = session.run(
          [unary_scores, transition_params, train_op])
      if i % 100 == 0:
        correct_labels = 0
        total_labels = 0
        for tf_unary_scores_, y_, sequence_length_ in zip(tf_unary_scores, y,
                                                          sequence_lengths):
          # Remove padding from the scores and tag sequence.
          tf_unary_scores_ = tf_unary_scores_[:sequence_length_]
          y_ = y_[:sequence_length_]

          # Compute the highest scoring sequence.
          viterbi_sequence, _ = tf.contrib.crf.viterbi_decode(
              tf_unary_scores_, tf_transition_params)

          # Evaluate word-level accuracy.
          correct_labels += np.sum(np.equal(viterbi_sequence, y_))
          total_labels += sequence_length_
        accuracy = 100.0 * correct_labels / float(total_labels)
        print("Accuracy: %.2f%%" % accuracy)
it generates following outputs
2017-03-22 00:40:01.110489: I tensorflow/core/common_runtime/gpu/gpu_device.cc:887] Found device 0 with properties:
name: Tesla K80
major: 3 minor: 7 memoryClockRate (GHz) 0.8235
pciBusID 0000:06:00.0
Total memory: 11.25GiB
Free memory: 11.16GiB
2017-03-22 00:40:01.110631: W tensorflow/stream_executor/cuda/cuda_driver.cc:485] creating context when one is currently active; existing: 0x2b8c6d0
2017-03-22 00:40:01.337723: I tensorflow/core/common_runtime/gpu/gpu_device.cc:887] Found device 1 with properties:
name: Tesla K80
major: 3 minor: 7 memoryClockRate (GHz) 0.8235
pciBusID 0000:07:00.0
Total memory: 11.25GiB
Free memory: 11.16GiB
2017-03-22 00:40:01.337815: W tensorflow/stream_executor/cuda/cuda_driver.cc:485] creating context when one is currently active; existing: 0x2b90150
2017-03-22 00:40:01.544460: I tensorflow/core/common_runtime/gpu/gpu_device.cc:887] Found device 2 with properties:
name: Tesla K80
major: 3 minor: 7 memoryClockRate (GHz) 0.8235
pciBusID 0000:84:00.0
Total memory: 11.25GiB
Free memory: 11.16GiB
2017-03-22 00:40:01.544569: W tensorflow/stream_executor/cuda/cuda_driver.cc:485] creating context when one is currently active; existing: 0x2b93e00
2017-03-22 00:40:01.750146: I tensorflow/core/common_runtime/gpu/gpu_device.cc:887] Found device 3 with properties:
name: Tesla K80
major: 3 minor: 7 memoryClockRate (GHz) 0.8235
pciBusID 0000:85:00.0
Total memory: 11.25GiB
Free memory: 11.16GiB
2017-03-22 00:40:01.750302: I tensorflow/core/common_runtime/gpu/gpu_device.cc:779] Peer access not supported between device ordinals 0 and 2
2017-03-22 00:40:01.750319: I tensorflow/core/common_runtime/gpu/gpu_device.cc:779] Peer access not supported between device ordinals 0 and 3
2017-03-22 00:40:01.750346: I tensorflow/core/common_runtime/gpu/gpu_device.cc:779] Peer access not supported between device ordinals 1 and 2
2017-03-22 00:40:01.750358: I tensorflow/core/common_runtime/gpu/gpu_device.cc:779] Peer access not supported between device ordinals 1 and 3
2017-03-22 00:40:01.750369: I tensorflow/core/common_runtime/gpu/gpu_device.cc:779] Peer access not supported between device ordinals 2 and 0
2017-03-22 00:40:01.750380: I tensorflow/core/common_runtime/gpu/gpu_device.cc:779] Peer access not supported between device ordinals 2 and 1
2017-03-22 00:40:01.750479: I tensorflow/core/common_runtime/gpu/gpu_device.cc:779] Peer access not supported between device ordinals 3 and 0
2017-03-22 00:40:01.750519: I tensorflow/core/common_runtime/gpu/gpu_device.cc:779] Peer access not supported between device ordinals 3 and 1
2017-03-22 00:40:01.750597: I tensorflow/core/common_runtime/gpu/gpu_device.cc:908] DMA: 0 1 2 3
2017-03-22 00:40:01.750608: I tensorflow/core/common_runtime/gpu/gpu_device.cc:918] 0:   Y Y N N
2017-03-22 00:40:01.750614: I tensorflow/core/common_runtime/gpu/gpu_device.cc:918] 1:   Y Y N N
2017-03-22 00:40:01.750619: I tensorflow/core/common_runtime/gpu/gpu_device.cc:918] 2:   N N Y Y
2017-03-22 00:40:01.750625: I tensorflow/core/common_runtime/gpu/gpu_device.cc:918] 3:   N N Y Y
2017-03-22 00:40:01.750643: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] Creating TensorFlow device (/gpu:0) -&gt; (device: 0, name: Tesla K80, pci bus id: 0000:06:00.0)
2017-03-22 00:40:01.750650: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] Creating TensorFlow device (/gpu:1) -&gt; (device: 1, name: Tesla K80, pci bus id: 0000:07:00.0)
2017-03-22 00:40:01.750656: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] Creating TensorFlow device (/gpu:2) -&gt; (device: 2, name: Tesla K80, pci bus id: 0000:84:00.0)
2017-03-22 00:40:01.750662: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] Creating TensorFlow device (/gpu:3) -&gt; (device: 3, name: Tesla K80, pci bus id: 0000:85:00.0)
2017-03-22 00:40:03.347959: I tensorflow/compiler/xla/service/platform_util.cc:58] platform CUDA present with 4 visible devices
2017-03-22 00:40:03.347994: I tensorflow/compiler/xla/service/platform_util.cc:58] platform Host present with 48 visible devices
2017-03-22 00:40:03.358665: I tensorflow/compiler/xla/service/service.cc:183] XLA service 0x4b47600 executing computations on platform Host. Devices:
2017-03-22 00:40:03.358682: I tensorflow/compiler/xla/service/service.cc:191]   StreamExecutor device (0): &lt;undefined&gt;, &lt;undefined&gt;
2017-03-22 00:40:03.359012: I tensorflow/compiler/xla/service/platform_util.cc:58] platform CUDA present with 4 visible devices
2017-03-22 00:40:03.359026: I tensorflow/compiler/xla/service/platform_util.cc:58] platform Host present with 48 visible devices
2017-03-22 00:40:03.367439: I tensorflow/compiler/xla/service/service.cc:183] XLA service 0x4b6fcb0 executing computations on platform CUDA. Devices:
2017-03-22 00:40:03.367459: I tensorflow/compiler/xla/service/service.cc:191]   StreamExecutor device (0): Tesla K80, Compute Capability 3.7
2017-03-22 00:40:03.367468: I tensorflow/compiler/xla/service/service.cc:191]   StreamExecutor device (1): Tesla K80, Compute Capability 3.7
2017-03-22 00:40:03.367475: I tensorflow/compiler/xla/service/service.cc:191]   StreamExecutor device (2): Tesla K80, Compute Capability 3.7
2017-03-22 00:40:03.367482: I tensorflow/compiler/xla/service/service.cc:191]   StreamExecutor device (3): Tesla K80, Compute Capability 3.7
Accuracy: 15.26%
Accuracy: 15.26%
Accuracy: 15.26%
Accuracy: 15.26%
Accuracy: 15.26%
Accuracy: 15.26%
Accuracy: 15.26%
Accuracy: 15.26%
Accuracy: 15.26%
Accuracy: 15.26%
	</description>
	<comments>
		<comment id='1' author='hugman' date='2017-03-21T21:18:46Z'>
		As a side note, &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/7751#issuecomment-281770324&gt;#7751 (comment)&lt;/denchmark-link&gt;
 indicated that "[tf.contrib.crf] appears to be an unmaintained contrib utility".
		</comment>
		<comment id='2' author='hugman' date='2017-03-24T16:38:26Z'>
		&lt;denchmark-link:https://github.com/tatatodd&gt;@tatatodd&lt;/denchmark-link&gt;
, do you want to investigate this to find corner cases in XLA? Otherwise, we do not support tf.contrib models as &lt;denchmark-link:https://github.com/Franck-Dernoncourt&gt;@Franck-Dernoncourt&lt;/denchmark-link&gt;
 points out.
		</comment>
		<comment id='3' author='hugman' date='2017-03-24T16:48:43Z'>
		Thanks for the pointer &lt;denchmark-link:https://github.com/aselle&gt;@aselle&lt;/denchmark-link&gt;
, and thanks for the clear bug report &lt;denchmark-link:https://github.com/hugman&gt;@hugman&lt;/denchmark-link&gt;
!
Indeed we can't dedicate much time to supporting tf.contrib code, especially not with XLA at the moment.
However I  interested in looking into this issue, since it may uncover weird bugs.  &lt;denchmark-link:https://github.com/hugman&gt;@hugman&lt;/denchmark-link&gt;
, can you provide a log of the same code , to let me know what normal convergence looks like for you?
I can't promise when I'll have time to take a look, but it'll be useful for a rainy day, just not today.  :)
		</comment>
		<comment id='4' author='hugman' date='2017-06-16T20:44:53Z'>
		tf.contrib.crf was written and then abandoned by the author.  Will be removed shortly.
		</comment>
	</comments>
</bug>