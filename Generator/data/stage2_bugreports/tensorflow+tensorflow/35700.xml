<bug id='35700' author='ofpppppppdbfjs' open_date='2020-01-09T11:55:25Z' closed_time='2020-01-18T02:06:43Z'>
	<summary>tensorflow2.1 can not initialize colab TPU</summary>
	<description>
&lt;denchmark-code&gt;if '2.1' in tf.__version__:
    if 'COLAB_TPU_ADDR' in os.environ:
        resolver = tf.distribute.cluster_resolver.TPUClusterResolver(tpu='grpc://' + os.environ['COLAB_TPU_ADDR'])
        tf.config.experimental_connect_to_cluster(resolver)
        tf.tpu.experimental.initialize_tpu_system(resolver)
        strategy = tf.distribute.experimental.TPUStrategy(resolver)
        print('Running on TPU ', resolver.cluster_spec().as_dict())
&lt;/denchmark-code&gt;

NotFoundError                             Traceback (most recent call last)
 in ()
160             resolver = tf.distribute.cluster_resolver.TPUClusterResolver(tpu='grpc://' + os.environ['COLAB_TPU_ADDR'])
161             tf.config.experimental_connect_to_cluster(resolver)
--&gt; 162             tf.tpu.experimental.initialize_tpu_system(resolver)
163             strategy = tf.distribute.experimental.TPUStrategy(resolver)
164             print('Running on TPU ', resolver.cluster_spec().as_dict())
3 frames
/usr/local/lib/python3.6/dist-packages/six.py in raise_from(value, from_value)
NotFoundError: '__inference__tpu_init_fn_4' is neither a type of a primitive operation nor a name of a function registered in binary running on n-3ea5ef93-w-0. Make sure the operation or function is registered in the binary running in this process.
	</description>
	<comments>
		<comment id='1' author='ofpppppppdbfjs' date='2020-01-09T17:44:20Z'>
		tensorflow-gpu-2.1 has this problem ,and tensorflow-2.1 is fine.
		</comment>
		<comment id='2' author='ofpppppppdbfjs' date='2020-01-09T19:55:11Z'>
		Update:
Even when using tensorflow==2.1 and tf.test.is_built_with_gpu_support() returning False I still get the same error.
I tried installing using pip install tensorflow==2.1, but I still get nearly the same error:
&lt;denchmark-code&gt;NotFoundError                             Traceback (most recent call last)
&lt;ipython-input-5-0a40fe7e3383&gt; in &lt;module&gt;
      8     resolver = tf.distribute.cluster_resolver.TPUClusterResolver(TPU_ADDRESS)
      9     tf.config.experimental_connect_to_cluster(resolver)
---&gt; 10     tf.tpu.experimental.initialize_tpu_system(resolver)
     11     strategy = tf.distribute.experimental.TPUStrategy(resolver)

~/.local/lib/python3.5/site-packages/tensorflow_core/python/tpu/tpu_strategy_util.py in initialize_tpu_system(cluster_resolver)
    101     context.context()._clear_caches()  # pylint: disable=protected-access
    102 
--&gt; 103     serialized_topology = output.numpy()
    104 
    105     # TODO(b/134094971): Remove this when lazy tensor copy in multi-device

~/.local/lib/python3.5/site-packages/tensorflow_core/python/framework/ops.py in numpy(self)
    940     """
    941     # TODO(slebedev): Consider avoiding a copy for non-CPU or remote tensors.
--&gt; 942     maybe_arr = self._numpy()  # pylint: disable=protected-access
    943     return maybe_arr.copy() if isinstance(maybe_arr, np.ndarray) else maybe_arr
    944 

~/.local/lib/python3.5/site-packages/tensorflow_core/python/framework/ops.py in _numpy(self)
    908       return self._numpy_internal()
    909     except core._NotOkStatusException as e:
--&gt; 910       six.raise_from(core._status_to_exception(e.code, e.message), None)
    911 
    912   @property

/usr/local/lib/python3.5/dist-packages/six.py in raise_from(value, from_value)

NotFoundError: '__inference__tpu_init_fn_4' is neither a type of a primitive operation nor a name of a function registered in binary running on n-9a4d14b8-w-0. Make sure the operation or function is registered in the binary running in this process.
&lt;/denchmark-code&gt;

Strangely though, when I test for GPU support using tf.test.is_built_with_gpu_support() it returns True, so perhaps that's the issue. When I check tf.__version__ and tf.version.GIT_VERSION I get 2.1.0 and v2.1.0-rc2-17-ge5bf8de respectively.
		</comment>
		<comment id='3' author='ofpppppppdbfjs' date='2020-01-10T03:29:22Z'>
		&lt;denchmark-link:https://github.com/ofpppppppdbfjs&gt;@ofpppppppdbfjs&lt;/denchmark-link&gt;
 ,
Can you share code to reproduce the issue?Thanks!
		</comment>
		<comment id='4' author='ofpppppppdbfjs' date='2020-01-10T05:32:15Z'>
		
Update:
Even when using tensorflow==2.1 and tf.test.is_built_with_gpu_support() returning False I still get the same error.
I tried installing using pip install tensorflow==2.1, but I still get nearly the same error:
NotFoundError                             Traceback (most recent call last)
&lt;ipython-input-5-0a40fe7e3383&gt; in &lt;module&gt;
      8     resolver = tf.distribute.cluster_resolver.TPUClusterResolver(TPU_ADDRESS)
      9     tf.config.experimental_connect_to_cluster(resolver)
---&gt; 10     tf.tpu.experimental.initialize_tpu_system(resolver)
     11     strategy = tf.distribute.experimental.TPUStrategy(resolver)

~/.local/lib/python3.5/site-packages/tensorflow_core/python/tpu/tpu_strategy_util.py in initialize_tpu_system(cluster_resolver)
    101     context.context()._clear_caches()  # pylint: disable=protected-access
    102 
--&gt; 103     serialized_topology = output.numpy()
    104 
    105     # TODO(b/134094971): Remove this when lazy tensor copy in multi-device

~/.local/lib/python3.5/site-packages/tensorflow_core/python/framework/ops.py in numpy(self)
    940     """
    941     # TODO(slebedev): Consider avoiding a copy for non-CPU or remote tensors.
--&gt; 942     maybe_arr = self._numpy()  # pylint: disable=protected-access
    943     return maybe_arr.copy() if isinstance(maybe_arr, np.ndarray) else maybe_arr
    944 

~/.local/lib/python3.5/site-packages/tensorflow_core/python/framework/ops.py in _numpy(self)
    908       return self._numpy_internal()
    909     except core._NotOkStatusException as e:
--&gt; 910       six.raise_from(core._status_to_exception(e.code, e.message), None)
    911 
    912   @property

/usr/local/lib/python3.5/dist-packages/six.py in raise_from(value, from_value)

NotFoundError: '__inference__tpu_init_fn_4' is neither a type of a primitive operation nor a name of a function registered in binary running on n-9a4d14b8-w-0. Make sure the operation or function is registered in the binary running in this process.

Strangely though, when I test for GPU support using tf.test.is_built_with_gpu_support() it returns True, so perhaps that's the issue. When I check tf.__version__ and tf.version.GIT_VERSION I get 2.1.0 and v2.1.0-rc2-17-ge5bf8de respectively.

use
%tensorflow_version 2.x
		</comment>
		<comment id='5' author='ofpppppppdbfjs' date='2020-01-10T16:31:35Z'>
		&lt;denchmark-link:https://github.com/ofpppppppdbfjs&gt;@ofpppppppdbfjs&lt;/denchmark-link&gt;
 thanks, I had figured out how to specify the correct TensorFlow version, but I still get the same error.
&lt;denchmark-link:https://github.com/oanush&gt;@oanush&lt;/denchmark-link&gt;

I'm using Colab connected to Google Cloud CPU &amp; TPU instances running:
Python:
3.5.3 (default, Sep 27 2018, 17:25:39)
[GCC 6.3.0 20170516]
TensorFlow:
2.1.0
v2.1.0-rc2-17-ge5bf8de
GPU Support: False
I still get the same error:
&lt;denchmark-code&gt;NotFoundError                             Traceback (most recent call last)
&lt;ipython-input-6-c84946626dc0&gt; in &lt;module&gt;
     11     except tf.errors.UnimplementedError as uie:
     12         print(uie, "This appears to be caused by the TPU already being connected. Ignoring.", sep='\n')
---&gt; 13     tf.tpu.experimental.initialize_tpu_system(resolver)
     14     tpu_strategy = tf.distribute.experimental.TPUStrategy(resolver)

3 frames
/usr/local/lib/python3.5/dist-packages/six.py in raise_from(value, from_value)

NotFoundError: '__inference__tpu_init_fn_4' is neither a type of a primitive operation nor a name of a function registered in binary running on n-80f5d4ef-w-0. Make sure the operation or function is registered in the binary running in this process.
&lt;/denchmark-code&gt;

Here is the code I can use to reproduce:
&lt;denchmark-code&gt;import tensorflow as tf

TPU_ADDRESS = "grpc://" + "10.0.0.2:8470"
resolver = tf.distribute.cluster_resolver.TPUClusterResolver(TPU_ADDRESS)
tf.config.experimental_connect_to_cluster(resolver)
tf.tpu.experimental.initialize_tpu_system(resolver)
tpu_strategy = tf.distribute.experimental.TPUStrategy(resolver)
&lt;/denchmark-code&gt;

Which is exactly what the documentation says to do here: &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/distribute/experimental/TPUStrategy?version=stable&gt;https://www.tensorflow.org/api_docs/python/tf/distribute/experimental/TPUStrategy?version=stable&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='ofpppppppdbfjs' date='2020-01-17T19:17:05Z'>
		I can confirm this on my Google Colab instance. For pip install tensorflow==2.1 as well es the current tf-nightly. It's very unfortunate because you can't use TPU. For me the only solution so far has been to use tensorflow 1.15.
I use this code:
&lt;denchmark-code&gt;# Try to run on TPU
# Detect hardware, return appropriate distribution strategy
try:
    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection
    print('Running on TPU ', tpu.cluster_spec().as_dict()['worker'])
except ValueError:
    tpu = None

if tpu:
    tf.config.experimental_connect_to_cluster(tpu)
    tf.tpu.experimental.initialize_tpu_system(tpu)
    strategy = tf.distribute.experimental.TPUStrategy(tpu)
else:
    strategy = tf.distribute.get_strategy()
print("REPLICAS: ", strategy.num_replicas_in_sync)
&lt;/denchmark-code&gt;

It returns this:
&lt;denchmark-code&gt;Running on TPU  ['10.8.85.34:8470']
INFO:tensorflow:Initializing the TPU system: grpc://10.8.85.34:8470

INFO:tensorflow:Initializing the TPU system: grpc://10.8.85.34:8470

INFO:tensorflow:Clearing out eager caches

INFO:tensorflow:Clearing out eager caches

---------------------------------------------------------------------------

NotFoundError                             Traceback (most recent call last)

&lt;ipython-input-2-5c79288551ed&gt; in &lt;module&gt;()
      7 if tpu:
      8     tf.config.experimental_connect_to_cluster(tpu)
----&gt; 9     tf.tpu.experimental.initialize_tpu_system(tpu)
     10     strategy = tf.distribute.experimental.TPUStrategy(tpu)
     11 else:

3 frames

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/tpu/tpu_strategy_util.py in initialize_tpu_system(cluster_resolver)
    101     context.context()._clear_caches()  # pylint: disable=protected-access
    102 
--&gt; 103     serialized_topology = output.numpy()
    104 
    105     # TODO(b/134094971): Remove this when lazy tensor copy in multi-device

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/ops.py in numpy(self)
    968     """
    969     # TODO(slebedev): Consider avoiding a copy for non-CPU or remote tensors.
--&gt; 970     maybe_arr = self._numpy()  # pylint: disable=protected-access
    971     return maybe_arr.copy() if isinstance(maybe_arr, np.ndarray) else maybe_arr
    972 

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/ops.py in _numpy(self)
    936       return self._numpy_internal()
    937     except core._NotOkStatusException as e:
--&gt; 938       six.raise_from(core._status_to_exception(e.code, e.message), None)
    939 
    940   @property

/usr/local/lib/python3.6/dist-packages/six.py in raise_from(value, from_value)

NotFoundError: '__inference__tpu_init_fn_4' is neither a type of a primitive operation nor a name of a function registered in binary running on n-0bbd054a-w-0. Make sure the operation or function is registered in the binary running in this process.

&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='ofpppppppdbfjs' date='2020-01-18T02:06:43Z'>
		Hello! This seems to be a Colab-specific issue (Colab might not have fully rolled out the TensorFlow TPU 2.1 backend yet). Can you follow the instructions at &lt;denchmark-link:https://github.com/googlecolab/colabtools#contacting-us&gt;https://github.com/googlecolab/colabtools#contacting-us&lt;/denchmark-link&gt;
 and file an issue/send feedback to the Colab team?
		</comment>
		<comment id='8' author='ofpppppppdbfjs' date='2020-01-18T02:06:45Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35700&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35700&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>