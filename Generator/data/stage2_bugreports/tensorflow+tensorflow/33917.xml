<bug id='33917' author='TimPepsiCo' open_date='2019-11-01T15:33:26Z' closed_time='2019-11-05T23:01:04Z'>
	<summary>Math ops don't work on SparseTensors</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04.3 LTS (Bionic Beaver)
TensorFlow installed from (source or binary): pip install tensorflow==2.0.0
TensorFlow version (use command below): v2.0.0-rc2-26-g64c3d38 2.0.0
Python version: Python 3.6.8

Describe the current behavior
Some basic math ops like tf.math.exp and tf.math.pow don't work on SparseTensors.
Describe the expected behavior
Math ops perform similarly to when they have dense Tensor inputs but returning a Sparse format, e.g. tf.math.exp(tf.sparse.to_dense(d))
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf

d = tf.SparseTensor(
indices=[(x,y) for x, y in zip(range(10), range(10))],
values=tf.random.poisson((10,), lam=3),
dense_shape=[10,10]
)

tf.math.exp(d)

# Can also be reproduced like:
tf.math.pow(2.71, d)
&lt;/denchmark-code&gt;

Other info / logs



tf.math.exp(d)
Traceback (most recent call last):
File "/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/gen_math_ops.py", line 3951, in exp
name, _ctx._post_execution_callbacks, x)
tensorflow.python.eager.core._FallbackException: This function does not handle the case of the path where all inputs are not already EagerTensors.



During handling of the above exception, another exception occurred:
Traceback (most recent call last):
File "", line 1, in 
File "/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/gen_math_ops.py", line 3956, in exp
x, name=name, ctx=_ctx)
File "/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/gen_math_ops.py", line 4001, in exp_eager_fallback
_attr_T, (x,) = _execute.args_to_matching_eager([x], _ctx)
File "/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/execute.py", line 257, in args_to_matching_eager
t, dtype, preferred_dtype=default_dtype, ctx=ctx))
File "/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/ops.py", line 1296, in internal_convert_to_tensor
ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
File "/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/constant_op.py", line 286, in _constant_tensor_conversion_function
return constant(v, dtype=dtype, name=name)
File "/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/constant_op.py", line 227, in constant
allow_broadcast=True)
File "/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/constant_op.py", line 235, in _constant_impl
t = convert_to_eager_tensor(value, ctx, dtype)
File "/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/constant_op.py", line 96, in convert_to_eager_tensor
return ops.EagerTensor(value, ctx.device_name, dtype)
ValueError: Attempt to convert a value (&lt;tensorflow.python.framework.sparse_tensor.SparseTensor object at 0x7fd24746d5c0&gt;) with an unsupported type (&lt;class 'tensorflow.python.framework.sparse_tensor.SparseTensor'&gt;) to a Tensor.
	</description>
	<comments>
		<comment id='1' author='TimPepsiCo' date='2019-11-04T08:37:54Z'>
		I have tried on colab with TF version 2.0 ,2.1.0-dev20191103 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/2b980fdac2192b702fbbc44d4d0e5a99/untitled326.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='TimPepsiCo' date='2019-11-05T23:01:04Z'>
		This is working as intended.
tf.math.exp is a great example, where it's not at all obvious that you'd want it to apply to just the nonzero elements of the sparse tensor, as exp(0) = 1.
Instead if you want to apply an elementwise operation just to the nonzeros you can apply it to sp.values and then build another sparse tensor out of it.
		</comment>
		<comment id='3' author='TimPepsiCo' date='2019-11-05T23:01:06Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33917&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33917&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='TimPepsiCo' date='2019-11-06T14:14:32Z'>
		&lt;denchmark-link:https://github.com/alextp&gt;@alextp&lt;/denchmark-link&gt;
 I'm not sure the default behavior should be to raise an Exception, do you think that is better than returning either 1. the exponentiated dense Tensor or 2. the exponentiated Sparse Tensor (even though it is dense) to preserve the type of Tensor?
		</comment>
		<comment id='5' author='TimPepsiCo' date='2019-11-06T16:50:41Z'>
		I don't think either of these two options is obviously correct (making a
very sparse tensor silently dense will wreak havoc on someone's performance
and memory usage, and preserving sparsity will wreak havoc on someone
else's math) so we need to leave the decision up to the call site.
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Wed, Nov 6, 2019 at 6:21 AM TimPepsiCo ***@***.***&gt; wrote:
 @alextp &lt;https://github.com/alextp&gt; I'm not sure the default behavior
 should be to raise an Exception, do you think that is better than returning
 either 1. the exponentiated dense Tensor or 2. the exponentiated Sparse
 Tensor (even though it is dense) to preserve the type of Tensor?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 &lt;#33917?email_source=notifications&amp;email_token=AAABHRPDQSUKYWCDKLSGE4LQSLHFVA5CNFSM4JH4LFQ2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEDGVJYI#issuecomment-550327521&gt;,
 or unsubscribe
 &lt;https://github.com/notifications/unsubscribe-auth/AAABHRMCWHU4AMQ3CG2CCQLQSLHFVANCNFSM4JH4LFQQ&gt;
 .


-- 
 - Alex

		</comment>
	</comments>
</bug>