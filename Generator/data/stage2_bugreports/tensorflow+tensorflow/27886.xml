<bug id='27886' author='tranhungnghiep' open_date='2019-04-16T09:58:51Z' closed_time='2019-09-07T03:33:31Z'>
	<summary>[TF2.0] TypeError: Cannot convert provided value to EagerTensor when applying constraint on variable</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 2.0.0 alpha
Python version: 3.7.3
Bazel version (if compiling from source): NA
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version: 10.0/7.5
GPU model and memory: V100, 16GB

Describe the current behavior
Cannot convert provided value to EagerTensor when applying keras constraint on variable in TF2.0 eager mode.
Describe the expected behavior
Variable should be converted to EagerTensor, operation should return constrained variable.
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
v = tf.Variable([[1, 2], [3, 4]])   
tf.keras.constraints.UnitNorm(axis=1)(v)
Other info / logs

TypeError                                 Traceback (most recent call last)
 in 
----&gt; 1 tf.keras.constraints.UnitNorm(axis=1)(v)
~/Apps/anaconda3/lib/python3.7/site-packages/tensorflow/python/keras/constraints.py in call(self, w)
110         K.epsilon() + K.sqrt(
111             math_ops.reduce_sum(
--&gt; 112                 math_ops.square(w), axis=self.axis, keepdims=True)))
113
114   def get_config(self):
~/Apps/anaconda3/lib/python3.7/site-packages/tensorflow/python/keras/backend.py in sqrt(x)
1878       A tensor.
1879   """
-&gt; 1880   zero = _to_tensor(0., x.dtype.base_dtype)
1881   inf = _to_tensor(np.inf, x.dtype.base_dtype)
1882   x = clip_ops.clip_by_value(x, zero, inf)
~/Apps/anaconda3/lib/python3.7/site-packages/tensorflow/python/keras/backend.py in _to_tensor(x, dtype)
612       A tensor.
613   """
--&gt; 614   return ops.convert_to_tensor(x, dtype=dtype)
615
616
~/Apps/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in convert_to_tensor(value, dtype, name, preferred_dtype, dtype_hint)
1048   preferred_dtype = deprecation.deprecated_argument_lookup(
1049       "dtype_hint", dtype_hint, "preferred_dtype", preferred_dtype)
-&gt; 1050   return convert_to_tensor_v2(value, dtype, preferred_dtype, name)
1051
1052
~/Apps/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in convert_to_tensor_v2(value, dtype, dtype_hint, name)
1106       name=name,
1107       preferred_dtype=dtype_hint,
-&gt; 1108       as_ref=False)
1109
1110
~/Apps/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx, accept_symbolic_tensors)
1184
1185     if ret is None:
-&gt; 1186       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
1187
1188     if ret is NotImplemented:
~/Apps/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)
302                                          as_ref=False):
303   _ = as_ref
--&gt; 304   return constant(v, dtype=dtype, name=name)
305
306
~/Apps/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name)
243   """
244   return _constant_impl(value, dtype, shape, name, verify_shape=False,
--&gt; 245                         allow_broadcast=True)
246
247
~/Apps/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/constant_op.py in _constant_impl(value, dtype, shape, name, verify_shape, allow_broadcast)
251   ctx = context.context()
252   if ctx.executing_eagerly():
--&gt; 253     t = convert_to_eager_tensor(value, ctx, dtype)
254     if shape is None:
255       return t
~/Apps/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/constant_op.py in convert_to_eager_tensor(value, ctx, dtype)
108       return ops.EagerTensor(
109           value, handle, device, dtype, tensor)
--&gt; 110     t = ops.EagerTensor(value, handle, device, dtype)
111     scalar_cache[cache_key] = t
112     return t
TypeError: Cannot convert provided value to EagerTensor. Provided value: 0.0 Requested dtype: int32

	</description>
	<comments>
		<comment id='1' author='tranhungnghiep' date='2019-04-16T10:30:18Z'>
		This also happens on 1.13.1. keras.constraints is broken on eager mode.
		</comment>
		<comment id='2' author='tranhungnghiep' date='2019-05-15T23:25:03Z'>
		Converting your tensor to float data type can help in this case.
import tensorflow as tf 
v = tf.Variable([[1, 2], [3, 4]])   
tf.keras.constraints.UnitNorm(axis=1)(tf.cast(v, tf.float32))
		</comment>
		<comment id='3' author='tranhungnghiep' date='2019-05-17T07:07:57Z'>
		&lt;denchmark-link:https://github.com/ymodak&gt;@ymodak&lt;/denchmark-link&gt;
 I am not sure what is the cause and what need to be fixed. Should keras cast automatically or should EagerTensor do it? Anyway this should not be done by users themselves, for the sake of clean code.
		</comment>
		<comment id='4' author='tranhungnghiep' date='2019-05-17T20:24:39Z'>
		&lt;denchmark-link:https://github.com/pavithrasv&gt;@pavithrasv&lt;/denchmark-link&gt;
 Can you please take a look? Thanks!
		</comment>
		<comment id='5' author='tranhungnghiep' date='2019-09-07T03:33:31Z'>
		Closing this issue since casting tensor to float value fixes the problem. Thanks!
		</comment>
		<comment id='6' author='tranhungnghiep' date='2019-09-07T03:33:32Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=27886&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=27886&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='tranhungnghiep' date='2019-11-14T10:27:09Z'>
		lmodel, cnn, graph = init_model()
TypeError: Cannot convert -0.05 to EagerTensor of dtype int32
how to solve this error
		</comment>
	</comments>
</bug>