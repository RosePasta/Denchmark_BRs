<bug id='23334' author='eilifsolberg' open_date='2018-10-28T21:14:39Z' closed_time='2018-11-14T20:05:57Z'>
	<summary>Bug: issue initializing iterator</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Ubuntu 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
N/A
TensorFlow installed from (source or binary):
Binary
TensorFlow version (use command below):
Version: v1.11.0-0-gc19e29306c 1.11.0
Python version:
3.5.2
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
N/A
GPU model and memory:
N/A
Exact command to reproduce:
See source code below

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

There seems to be an issue initializing an iterator created with tf.data.Iterator.form_structure a second time in the same session where the dataset contains Function instances.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

To produce problem
import tensorflow as tf

def g():
  for i in range(10):
    yield i

iterator = tf.data.Iterator.from_structure(tf.int64, tf.TensorShape([]))
x = iterator.get_next()
sess = tf.Session()

dataset_1 = tf.data.Dataset.from_generator(g, output_types=tf.int64)
sess.run(iterator.make_initializer(dataset_1))
sess.run(x)

dataset_2 = tf.data.Dataset.from_generator(g, output_types=tf.int64)
sess.run(iterator.make_initializer(dataset_2))
sess.run(x)
Executing the above leads to the following error
&lt;denchmark-code&gt;NotFoundError (see above for traceback): Function tf_data_structured_function_wrapper_uv0gphzJzQY is not defined.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='eilifsolberg' date='2018-10-28T22:01:34Z'>
		It seems fine when I run your code on an environment that replicates yours. Can you try again and provide more information?
		</comment>
		<comment id='2' author='eilifsolberg' date='2018-10-29T20:30:43Z'>
		See updated version. The previous example worked for me when I used e.g. version 1.10. The updated example fails for me for both version 1.10 and 1.11. If it still works for you, let me know what other information you think could be helpful.
		</comment>
		<comment id='3' author='eilifsolberg' date='2018-11-11T23:38:52Z'>
		This does appear to be a bug in the latest version. One workaround is to ensure that all calls to make_initializer() have been made before creating the tf.Session. For example, the following program should work as intended:
import tensorflow as tf

def g():
  for i in range(10):
    yield i

iterator = tf.data.Iterator.from_structure(tf.int64, tf.TensorShape([]))
x = iterator.get_next()

dataset_1 = tf.data.Dataset.from_generator(g, output_types=tf.int64)
dataset_2 = tf.data.Dataset.from_generator(g, output_types=tf.int64)

init_1 = iterator.make_initializer(dataset_1)
init_2 = iterator.make_initializer(dataset_2)

with tf.Session() as sess:
  sess.run(init_1)
  print sess.run(x)

  sess.run(init_2)
  print sess.run(x)
		</comment>
		<comment id='4' author='eilifsolberg' date='2018-11-13T15:20:59Z'>
		Update: we have a fix for this case, and it's currently pending review.
		</comment>
		<comment id='5' author='eilifsolberg' date='2018-11-13T20:48:07Z'>
		Ok, thanks!
		</comment>
	</comments>
</bug>