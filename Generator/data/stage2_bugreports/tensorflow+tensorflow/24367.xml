<bug id='24367' author='Ploppz' open_date='2018-12-14T10:10:54Z' closed_time='2019-02-05T23:46:30Z'>
	<summary>Exception ignored, Session closed</summary>
	<description>
System information

Have I written custom code: Yes
OS Platform and Distribution: Arch Linux
TensorFlow installed from (source or binary): Official repository
TensorFlow version: v1.11.0-0-gc19e29306c 1.11.0
Python version: 3.6.6
GPU model: AMD Radeon HD 7850


Code: found in my second comment below.
It uses the environment  which is really just a modification of the Acrobot env that never terminates. (additionally, I made it have 4 state variables: . Code for the modified environment: &lt;denchmark-link:https://github.com/Ploppz/gym-custom-envs&gt;https://github.com/Ploppz/gym-custom-envs&lt;/denchmark-link&gt;

My code defines an agent acting in the Acrobot environment. It has one neural networks which it fits and uses to predict the next state.
While training I get this error after some random amount of time:
&lt;denchmark-code&gt;Exception ignored in: &lt;bound method BaseSession._Callable.__del__ of &lt;tensorflow.python.client.session.BaseSession._Callable object at 0x7f1ec3fcd9e8&gt;&gt;
Traceback (most recent call last):
  File "/home/ploppz/.pyenv/versions/3.6.6/lib/python3.6/site-packages/tensorflow/python/client/session.py", line 1415, in __del__
    self._session._session, self._handle, status)
  File "/home/ploppz/.pyenv/versions/3.6.6/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py", line 526, in __exit__
    c_api.TF_GetCode(self.status.status))
tensorflow.python.framework.errors_impl.CancelledError: Session has been closed.
Exception ignored in: &lt;bound method BaseSession._Callable.__del__ of &lt;tensorflow.python.client.session.BaseSession._Callable object at 0x7f1ec3497e10&gt;&gt;
Traceback (most recent call last):
  File "/home/ploppz/.pyenv/versions/3.6.6/lib/python3.6/site-packages/tensorflow/python/client/session.py", line 1415, in __del__
    self._session._session, self._handle, status)
  File "/home/ploppz/.pyenv/versions/3.6.6/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py", line 526, in __exit__
    c_api.TF_GetCode(self.status.status))
tensorflow.python.framework.errors_impl.CancelledError: Session has been closed.
Iter 5, timesteps=6000: coverage = 6.2595697434743025
Iter 6, timesteps=6000: coverage = 5.409617917650649
Exception ignored in: &lt;bound method BaseSession._Callable.__del__ of &lt;tensorflow.python.client.session.BaseSession._Callable object at 0x7f1ec3670da0&gt;&gt;
Traceback (most recent call last):
  File "/home/ploppz/.pyenv/versions/3.6.6/lib/python3.6/site-packages/tensorflow/python/client/session.py", line 1415, in __del__
    self._session._session, self._handle, status)
  File "/home/ploppz/.pyenv/versions/3.6.6/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py", line 526, in __exit__
    c_api.TF_GetCode(self.status.status))
tensorflow.python.framework.errors_impl.CancelledError: Session has been closed.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Ploppz' date='2018-12-15T18:51:33Z'>
		We may be able to find more insight into your issue if you can figure out what the exception was. It looks like the exception is caught but the descriptions was not provided when handled ("ignored").
		</comment>
		<comment id='2' author='Ploppz' date='2018-12-16T08:38:10Z'>
		How can I find the exception?
		</comment>
		<comment id='3' author='Ploppz' date='2019-01-28T19:55:05Z'>
		&lt;denchmark-link:https://github.com/Ploppz&gt;@Ploppz&lt;/denchmark-link&gt;
  Could you give more details and the context to find root-cause of the issue. Could you test with a very simple models and provide the code and the error log?
		</comment>
		<comment id='4' author='Ploppz' date='2019-02-05T23:46:30Z'>
		Closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='5' author='Ploppz' date='2019-02-14T16:08:26Z'>
		Sorry for the delay. I have a more or less minimal example that should run if you have all the dependencies. It consists of two files:
experiment.py:
&lt;denchmark-code&gt;from model_based import ModelBasedAgent
import gym
import numpy as np
from types import MethodType
import random
import tensorflow as tf
from matplotlib import pyplot as plt
import os
import datetime
import pickle

sample_period = 100 # How often to look at coverage for plotting
def experiment(env, agent, timesteps, render=False):
    global sample_period
    ob_space_dim = env.observation_space.shape[0]
    state = env.reset()
    state = np.array([state])
    scores =  []
    for t in range(1, timesteps+1):
        # Act
        action, v_pred = agent.act(state)
        # Step
        state_next, _reward, _terminal, _info = env.step(action)
        state_next = np.reshape(state_next, [1, ob_space_dim])
        # Think
        agent.think(state, action, state_next, v_pred)
        # Render
        if render:
            env.render()
        # Gather data
        if t % sample_period == 0:
            score = agent.covered_volume() * 100
            scores.append(score)
    return scores


#  def several_experiments(env, agent, n_experiments=18, timesteps=7000, color='blue'):
def several_experiments(env, agent, n_experiments=3, timesteps=800, color='blue'):
    global sample_period
    scores = np.zeros((n_experiments, int(timesteps/sample_period)))
    for i in range(n_experiments):
        with tf.Session() as sess:
            agent.reset()
            sess.run(tf.global_variables_initializer())
            # Scores
            scores[i, :] = experiment(env, agent, timesteps)
            print("Iter %s, timesteps=%s: coverage = %s" % (i, timesteps, scores[i, -1]))
        tf.reset_default_graph()

if __name__ == '__main__':
    ENV_NAME = "AcrobotForever-v1"
    env = gym.make(ENV_NAME)

    EPSILON = 0.1

    agent = ModelBasedAgent(env)
    agent.exploration_rate = EPSILON
    several_experiments(env, agent)
&lt;/denchmark-code&gt;

and model_based.py which contains the agent, using tensorflow:
&lt;denchmark-code&gt;import random
import gym
import acrobot_forever
import numpy as np
from collections import deque
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
from matplotlib import pyplot as plt
from scipy.spatial import ConvexHull
import time
import tensorflow as tf

class ModelBasedAgent:
    def __init__(self, env, act=None):
        from types import MethodType
        if not act is None:
            self.act = MethodType(act, self)

        # Custom initializer
        from keras import backend as K
        def network_init(shape, dtype=None):
            return np.random.random(shape) * 10 - 5

        self.advantage_learning = None
        self.env = env
        self.states = []
        self.exploration_rate = 0.0
        self.n_actions = env.action_space.n
        self.ob_dim = env.observation_space.shape[0]

        # Model network n: (s, a) -&gt; ds
        self.model_net = Sequential()
        self.model_net.add(Dense(12, input_shape=(self.ob_dim + 1,), activation="relu"))
        self.model_net.add(Dense(12, activation="relu"))
        self.model_net.add(Dense(self.ob_dim, activation="linear"))
        self.model_net.compile(loss="mse", optimizer=Adam(lr=0.001))

    def reset(self):
        self.__init__(self.env)

    def _predict_ds(self, state, action):
        sa = np.array([np.concatenate((state[0], [action]))])
        return self.model_net.predict(sa, 1)[0]

    def act(self, state):
        if np.random.rand() &lt; self.exploration_rate:
            return random.randrange(self.n_actions), None

        # Sample a desired ds (delta state)
        target_dstate = np.random.normal(0.0, 1.0, self.ob_dim)
        # Make predictions for each possible action
        dstate = [self._predict_ds(state, a) for a in range(self.n_actions)]
        # Find best action by measuring how close ds are to target_ds (angle)
        def dist(ds1, ds2):
            dot = np.dot(ds1, ds2) / (np.linalg.norm(ds1) * np.linalg.norm(ds2))
            return 1 - dot    # from 0 (perfect match) to 2 (anti-parallel)
        ds_distance = [dist(target_dstate, ds) for ds in dstate]

        # Finally, return the action which results in a state change in a direction most similar to desired direction
        return np.argmin(ds_distance), None


    def think(self, state, action, state_next, _):
        self.states.append(state_next[0])

        # Train the model
        sa = np.array([np.concatenate((state[0], [action]))])
        self.model_net.fit(sa, state_next - state, verbose=0)

    # Approximate the covered area by convex hull
    def covered_volume(self):
        states = np.array(self.states)
        states = (states + self.env.observation_space.low)/(self.env.observation_space.high - self.env.observation_space.low)
        return ConvexHull(states).volume
&lt;/denchmark-code&gt;

The output I get when running experiment.py:
&lt;denchmark-code&gt;Using TensorFlow backend.
WARN: gym.spaces.Box autodetected dtype as &lt;class 'numpy.float32'&gt;. Please provide explicit dtype.
2019-02-14 17:06:11.273748: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
Iter 0, timesteps=800: coverage = 0.5695444808537892
Iter 1, timesteps=800: coverage = 0.8073160099913885
Iter 2, timesteps=800: coverage = 5.202966470958516
Exception ignored in: &lt;bound method BaseSession._Callable.__del__ of &lt;tensorflow.python.client.session.BaseSession._Callable object at 0x7f75287f8e10&gt;&gt;
Traceback (most recent call last):
  File "/home/ploppz/.pyenv/versions/3.6.6/lib/python3.6/site-packages/tensorflow/python/client/session.py", line 1415, in __del__
  File "/home/ploppz/.pyenv/versions/3.6.6/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py", line 526, in __exit__
tensorflow.python.framework.errors_impl.CancelledError: Session has been closed.
Exception ignored in: &lt;bound method BaseSession._Callable.__del__ of &lt;tensorflow.python.client.session.BaseSession._Callable object at 0x7f75117d2e80&gt;&gt;
Traceback (most recent call last):
  File "/home/ploppz/.pyenv/versions/3.6.6/lib/python3.6/site-packages/tensorflow/python/client/session.py", line 1415, in __del__
  File "/home/ploppz/.pyenv/versions/3.6.6/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py", line 526, in __exit__
tensorflow.python.framework.errors_impl.CancelledError: Session has been closed.
&lt;/denchmark-code&gt;

This seems to always happen right after iteration 2.
		</comment>
		<comment id='6' author='Ploppz' date='2019-05-21T12:29:24Z'>
		how to solve it ?
		</comment>
	</comments>
</bug>