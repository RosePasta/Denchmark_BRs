<bug id='39567' author='iobtl' open_date='2020-05-15T03:52:16Z' closed_time='2020-05-16T03:34:46Z'>
	<summary>Unable to save ensembled tf.keras.Model instance</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Linux Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
NIL
TensorFlow installed from (source or binary):
Binary
TensorFlow version (use command below):
2.1.0
Python version:
3.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
10.1 /  7.6.4
GPU model and memory:
RTX 2070 Super/8GB

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Describe the current behavior
I am unable to save an ensembled model after training it to completion.
My ensembled network is as follows:
inputs = tf.keras.layers.Input(shape=[224, 224, 3])

def Net(inputs):
    base_model = DenseNet121(include_top=False, weights='imagenet', input_tensor=inputs)
    output = base_model.get_layer("pool3_conv").output
    x = Conv2D(128, 3, activation='relu', padding='same')(output)
    x = BatchNormalization()(x)
    x = Conv2D(64, 3, activation='relu', padding='same')(x)
    x = BatchNormalization()(x)
    x = Flatten()(x)
    x = Dense(2, activation='softmax', name='clf_output')(x)

    model = tf.keras.models.Model(inputs=[base_model.input], outputs=[x])

    return model

def create_ensemble(models, inputs):
    for i in range(len(models)):
        # Each model is a Net object
        model = models[i]
        for layer in model.layers[1:]:
            layer.trainable = False
            layer._name = 'ensemble_' + str(i+1) + '_' + layer._name

    stack_outputs = [model(inputs) for model in models]
    merge = Concatenate()(stack_outputs) 
    x = Dense(16, activation='relu')(merge)
    x = Dense(2, activation='softmax')(x)

    print(inputs)
    model = tf.keras.models.Model(inputs=inputs, outputs=x, name='ensemble')

    return model
Portion of training code:
 # Creating Ensemble
    print("Creating Ensemble")
    ensemble = create_ensemble(models, inputs)

    print("Ensemble architecture: ")
    print(ensemble.summary())

    ensemble.compile(loss="categorical_crossentropy", 
                     optimizer=opt, 
                     metrics=["accuracy"])

    ensemble_checkpoint = tf.keras.callbacks.ModelCheckpoint("ensemble_backup_weights.h5", 
                                                             monitor='val_loss', 
                                                             verbose=1, 
                                                             save_weights_only=True, 
                                                             save_best_only=True)
history = ensemble.fit(train_ds, 
                           epochs=EPOCHS, 
                           verbose=1,
                           steps_per_epoch=(len(imagePaths)-VAL_SPLIT) // BS, 
                           validation_data=(val_ds), 
                           validation_steps = VAL_SPLIT // BS, 
                           callbacks=[ensemble_checkpoint, reducelr])

    print("Saving Ensemble")
    ensemble.save_weights("ensemble_weights.h5")
    ensemble.save("ensemble", include_optimizer=False)
Describe the expected behavior
ensemble.save should work normally. I am able to save the weights, but not the model as a whole.
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
Error encountered is as follows:
&lt;denchmark-code&gt;Epoch 00001: val_loss improved from inf to 0.45252, saving model to ensemble_backup_weights.h5
265/265 [==============================] - 52s 195ms/step - loss: 0.5693 - accuracy: 0.7101 - val_loss: 0.4525 - val_accuracy: 0.9116
Saving Ensemble
2020-05-15 11:42:31.230630: W tensorflow/python/util/util.cc:319] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.
Traceback (most recent call last):
  File "train.py", line 146, in &lt;module&gt;
    main(ap.parse_args())
  File "train.py", line 140, in main
    ensemble.save("ensemble", include_optimizer=False)
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/network.py", line 1008, in save
    signatures, options)
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/save.py", line 115, in save_model
    signatures, options)
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/saved_model/save.py", line 78, in save
    save_lib.save(model, filepath, signatures, options)
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/saved_model/save.py", line 923, in save
    saveable_view, asset_info.asset_index)
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/saved_model/save.py", line 653, in _serialize_object_graph
    _write_object_proto(obj, obj_proto, asset_file_def_index)
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/saved_model/save.py", line 692, in _write_object_proto
    metadata=obj._tracking_metadata)
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 2412, in _tracking_metadata
    return self._trackable_saved_model_saver.tracking_metadata
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/saved_model/base_serialization.py", line 57, in tracking_metadata
    self.python_properties,
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/saved_model/layer_serialization.py", line 40, in python_properties
    return self._python_properties_internal()
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/saved_model/model_serialization.py", line 35, in _python_properties_internal
    metadata = super(ModelSavedModelSaver, self)._python_properties_internal()
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/saved_model/network_serialization.py", line 32, in _python_properties_internal
    metadata = super(NetworkSavedModelSaver, self)._python_properties_internal()
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/saved_model/layer_serialization.py", line 58, in _python_properties_internal
    metadata['config'] = self.obj.get_config()
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/network.py", line 918, in get_config
    return copy.deepcopy(get_network_config(self))
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/network.py", line 1993, in get_network_config
    layer_config = serialize_layer_fn(layer)
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/utils/generic_utils.py", line 198, in serialize_keras_object
    config = instance.get_config()
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/network.py", line 918, in get_config
    return copy.deepcopy(get_network_config(self))
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/network.py", line 2025, in get_network_config
    model_outputs = nest.pack_sequence_as(network._nested_outputs, model_outputs)
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/util/nest.py", line 504, in pack_sequence_as
    return _pack_sequence_as(structure, flat_sequence, expand_composites)
  File "/home/tedmund/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/util/nest.py", line 453, in _pack_sequence_as
    len(flat_sequence), truncate(flat_sequence, 100)))
ValueError: The target structure is of type `&lt;class 'tensorflow.python.framework.ops.Tensor'&gt;`
  Tensor("clf_output/Identity:0", shape=(None, 2), dtype=float32)
However the input structure is a sequence (&lt;class 'list'&gt;) of length 0.
  []
nest cannot guarantee that it is safe to map one to the other.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='iobtl' date='2020-05-15T10:47:12Z'>
		&lt;denchmark-link:https://github.com/iobtl&gt;@iobtl&lt;/denchmark-link&gt;

can you please try "" and see if it helps resolve your issue.
I ran the code shared there are too many indentation errors, could you please share code such that we could replicate the issue, if possible please share a colab gist so we could analyse the issue.
Please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/5043c9e4d6d7f700edbf40c44c4df37b/untitled182.ipynb&gt;gist of error faced&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='iobtl' date='2020-05-16T03:34:46Z'>
		Currently the use case is for a production environment so I am unable to perform that command. Have circumvented the issue by performing ensemble.save_weights instead and reloading the weights after reconstructing the network.
		</comment>
		<comment id='3' author='iobtl' date='2020-05-16T03:34:48Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39567&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39567&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='iobtl' date='2020-05-25T06:33:13Z'>
		I've hit this error too, on a custom architecture that uses multiple MobileNetV2s as feature extractors.
I'm on v2.2.0-rc4-8-g2b96f3662b 2.2.0
Manually calling save_weights works
		</comment>
		<comment id='5' author='iobtl' date='2020-09-03T01:30:37Z'>
		I don't understand why this is closed... I am on v2.3.0-rc2-23-gb36436b087 2.3.0 and have the same problems - I did not have this problem on TF1 few months ago. I changed to TF2 recently and all of a sudden I cannot save my models after training.
My model without 'Concatenate' layer is saving fine so I'm guessing the problem lies in the doing the concatenation after input goes through the nested models? Same problem trying to save model with ModelCheckpoint.
Saving the weight seems to work at least....
		</comment>
		<comment id='6' author='iobtl' date='2020-10-15T12:47:31Z'>
		I have the same issue with v 2.1 saving a network with custom layers. I have tried both tf and h5 format to save.
		</comment>
		<comment id='7' author='iobtl' date='2020-10-15T18:46:43Z'>
		I have the same issue in tf 2.3, tried both tf and h5 as well.  tf 2.4 nightly doesn't solve this either.  Much slower in production environment to load structure and add weights
		</comment>
		<comment id='8' author='iobtl' date='2020-10-16T09:12:11Z'>
		&lt;denchmark-link:https://github.com/a3cel2&gt;@a3cel2&lt;/denchmark-link&gt;
 maybe this works for you:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/43954#issuecomment-709925095&gt;#43954 (comment)&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>