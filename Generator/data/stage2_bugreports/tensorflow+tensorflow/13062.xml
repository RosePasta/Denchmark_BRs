<bug id='13062' author='gopinath-r' open_date='2017-09-15T10:53:14Z' closed_time='2017-09-20T22:49:05Z'>
	<summary>inline assembly requires more registers than available while cross compiling tensroflow for arm cortex a15 using clang-3.8</summary>
	<description>
I am trying to cross compile tensorflow for armv7a cortex a15 using clang-3.8 and I am using bazel 0.5.4 to build tensorflow.
My Environment details are, Ubuntu - 16.04 Clang - 3.8 bazel - 0.5.4 tensorflow source code version - 1.3 target cpu - cortex a15 compiler_flag: "-O2"
The command i am using is
bazel build --copt=-Wno-c++11-narrowing --crosstool_top=//tools/arm_compiler:toolchain --cpu=armeabi-v7a --verbose_failures --sandbox_debug //tensorflow/tools/pip_package:build_pip_package
The error is external/gemmlowp/meta/transform_kernels_arm_32.h:5506:7: error: inline assembly requires more registers than available "ldr r0, %[input_range_min]\n"
The compiler flags are configured as bellow in CROSSTOOL
toolchain {
abi_version: "clang_3.8"
abi_libc_version: "glibc_2.19"
builtin_sysroot: ""
compiler: "clang"
host_system_name: "armeabi-v7a"
needsPic: true
supports_gold_linker: false
supports_incremental_linker: false
supports_fission: false
supports_interface_shared_objects: false
supports_normalizing_ar: true
supports_start_end_lib: false
supports_thin_archives: true
target_libc: "glibc_2.19"
target_cpu: "armeabi-v7a"
target_system_name: "arm_a15"
toolchain_identifier: "clang_linux_armhf"
&lt;denchmark-code&gt;  tool_path { name: "ar" path: "linaro_linux_gcc/arm-linux-gnueabihf-ar" }
  tool_path { name: "compat-ld" path: "linaro_linux_gcc/arm-linux-gnueabihf-ld" }
  tool_path { name: "cpp" path: "linaro_linux_gcc/clang_bin/clang" }
  tool_path { name: "dwp" path: "linaro_linux_gcc/arm-linux-gnueabihf-dwp" }
  tool_path { name: "gcc" path: "linaro_linux_gcc/clang_bin/clang" }
  tool_path { name: "gcov" path: "arm-frc-linux-gnueabi/arm-frc-linux-gnueabi-gcov-4.9" }
  # C(++) compiles invoke the compiler (as that is the one knowing where
  # to find libraries), but we provide LD so other rules can invoke the linker.
  tool_path { name: "ld" path: "linaro_linux_gcc/arm-linux-gnueabihf-ld" }
  tool_path { name: "nm" path: "linaro_linux_gcc/arm-linux-gnueabihf-nm" }
  tool_path { name: "objcopy" path: "linaro_linux_gcc/arm-linux-gnueabihf-objcopy" }
  objcopy_embed_flag: "-I"
  objcopy_embed_flag: "binary"
  tool_path { name: "objdump" path: "linaro_linux_gcc/arm-linux-gnueabihf-objdump" }
  tool_path { name: "strip" path: "linaro_linux_gcc/arm-linux-gnueabihf-strip" }

  compiler_flag: "-target"
  compiler_flag: "armv7a-arm-linux-gnueabihf"
  compiler_flag: "--sysroot=external/linaro_linux_gcc_repo/arm-linux-gnueabihf/libc"
  compiler_flag: "-mfloat-abi=hard"
  compiler_flag: "-mcpu=cortex-a15"
  compiler_flag: "-mfpu=neon-vfpv4"

  compiler_flag: "-nostdinc"
  compiler_flag: "-isystem"
  compiler_flag: "/usr/lib/clang/3.8/include"
  compiler_flag: "-isystem"
  compiler_flag: "external/linaro_linux_gcc_repo/lib/gcc/arm-linux-gnueabihf/4.9.3/include"
  compiler_flag: "-isystem"
  compiler_flag: "external/linaro_linux_gcc_repo/arm-linux-gnueabihf/libc/usr/include"
  compiler_flag: "-isystem"
  compiler_flag: "external/linaro_linux_gcc_repo/lib/gcc/arm-linux-gnueabihf/4.9.3/include-fixed"
  compiler_flag: "-isystem"
  compiler_flag: "external/linaro_linux_gcc_repo/arm-linux-gnueabihf/libc/usr/include"
  cxx_flag: "-isystem"
  cxx_flag: "external/linaro_linux_gcc_repo/arm-linux-gnueabihf/include/c++/4.9.3/arm-linux-gnueabihf"
  cxx_flag: "-isystem"
  cxx_flag: "external/linaro_linux_gcc_repo/arm-linux-gnueabihf/include/c++/4.9.3"
  cxx_flag: "-isystem"
  cxx_flag: "external/linaro_linux_gcc_repo/include/c++/4.9.3/arm-linux-gnueabihf"
  cxx_flag: "-isystem"
  cxx_flag: "external/linaro_linux_gcc_repo/include/c++/4.9.3"

  cxx_builtin_include_directory: "%package(@linaro_linux_gcc_repo//include)%"
  cxx_builtin_include_directory: "%package(@linaro_linux_gcc_repo//arm-linux-gnueabihf/libc/usr/include)%"
  cxx_builtin_include_directory: "%package(@linaro_linux_gcc_repo//arm-linux-gnueabihf/libc/usr/lib/include)%"
  cxx_builtin_include_directory: "%package(@linaro_linux_gcc_repo//arm-linux-gnueabihf/libc/lib/gcc/arm-linux-gnueabihf/4.9.3/include-fixed)%"
  cxx_builtin_include_directory: "%package(@linaro_linux_gcc_repo//include)%/c++/4.9.3"
  cxx_builtin_include_directory: "%package(@linaro_linux_gcc_repo//arm-linux-gnueabihf/libc/lib/gcc/arm-linux-gnueabihf/4.9.3/include)%"
  cxx_builtin_include_directory: "%package(@linaro_linux_gcc_repo//arm-linux-gnueabihf/libc/lib/gcc/arm-linux-gnueabihf/4.9.3/include-fixed)%"
  cxx_builtin_include_directory: "%package(@linaro_linux_gcc_repo//lib/gcc/arm-linux-gnueabihf/4.9.3/include)%"
  cxx_builtin_include_directory: "%package(@linaro_linux_gcc_repo//lib/gcc/arm-linux-gnueabihf/4.9.3/include-fixed)%"
  cxx_builtin_include_directory: "%package(@linaro_linux_gcc_repo//arm-linux-gnueabihf/include)%/c++/4.9.3"
  cxx_builtin_include_directory: "/usr/lib/clang/3.8/include"
  cxx_builtin_include_directory: "/usr/lib/llvm-3.8/lib/clang/3.8.0/include"
  cxx_builtin_include_directory: "/home/gopinathr/Documents/work/tf1.2/tensorflow/bazel-out/clang_linux_armhf-opt/genfiles/external/local_config_python/python_include/arm-linux-gnueabihf/python2.7"

  cxx_flag: "-std=c++0x"
  cxx_flag: "-std=c++11"
  linker_flag: "-target"
  linker_flag: "armv7a-arm-linux-gnueabihf"
  linker_flag: "--sysroot=external/linaro_linux_gcc_repo/arm-linux-gnueabihf/libc"
  linker_flag: "-lstdc++"
  linker_flag: "-Ltools/arm_compiler/linaro_linux_gcc/clang_more_libs"
  linker_flag: "-Lexternal/linaro_linux_gcc_repo/arm-linux-gnueabihf/lib"
  linker_flag: "-Lexternal/linaro_linux_gcc_repo/arm-linux-gnueabihf/libc/lib"
  linker_flag: "-Lexternal/linaro_linux_gcc_repo/arm-linux-gnueabihf/libc/usr/lib"
  linker_flag: "-Bexternal/linaro_linux_gcc_repo/arm-linux-gnueabihf/bin"
  linker_flag: "-Wl,--dynamic-linker=/lib/ld-linux-armhf.so.3"

  # Anticipated future default.
  # This makes GCC and Clang do what we want when called through symlinks.
  unfiltered_cxx_flag: "-no-canonical-prefixes"
  linker_flag: "-no-canonical-prefixes"

  # Make C++ compilation deterministic. Use linkstamping instead of these
  # compiler symbols.
  unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
  unfiltered_cxx_flag: "-D__DATE__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIMESTAMP__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIME__=\"redacted\""

  # Security hardening on by default.
  # Conservative choice; -D_FORTIFY_SOURCE=2 may be unsafe in some cases.
  # We need to undef it before redefining it as some distributions now have
  # it enabled by default.
  compiler_flag: "-U_FORTIFY_SOURCE"
  compiler_flag: "-fstack-protector"
  compiler_flag: "-fPIE"
  linker_flag: "-pie"
  linker_flag: "-Wl,-z,relro,-z,now"

  # Enable coloring even if there's no attached terminal. Bazel removes the
  # escape sequences if --nocolor is specified.
  compiler_flag: "-fdiagnostics-color=always"

    # All warnings are enabled. Maybe enable -Werror as well?
  compiler_flag: "-Wall"
  # Enable a few more warnings that aren't part of -Wall.
  compiler_flag: "-Wunused-but-set-parameter"
  # But disable some that are problematic.
  compiler_flag: "-Wno-free-nonheap-object" # has false positives

  # Keep stack frames for debugging, even in opt mode.
  compiler_flag: "-fno-omit-frame-pointer"

  # Stamp the binary with a unique identifier.
  linker_flag: "-Wl,--build-id=md5"
  linker_flag: "-Wl,--hash-style=gnu"

  compilation_mode_flags {
    mode: DBG
    # Enable debug symbols.
    compiler_flag: "-g"
  }
  compilation_mode_flags {
    mode: OPT

    # No debug symbols.
    # Maybe we should enable https://gcc.gnu.org/wiki/DebugFission for opt or
    # even generally? However, that can't happen here, as it requires special
    # handling in Bazel.
    compiler_flag: "-g0"

    # Conservative choice for -O
    # -O3 can increase binary size and even slow down the resulting binaries.
    # Profile first and / or use FDO if you need better performance than this.
    compiler_flag: "-O2"

    # Disable assertions
    compiler_flag: "-DNDEBUG"

    # Removal of unused code and data at link time (can this increase binary size in some cases?).
    compiler_flag: "-ffunction-sections"
    compiler_flag: "-fdata-sections"

    #added by sachin
    compiler_flag: "-v"

    linker_flag: "-Wl,--gc-sections"
  }
}
&lt;/denchmark-code&gt;

The file contents are external/gemmlowp/meta/transform_kernels_arm_32.h
template &lt;&gt;
inline void Transform1DKernel&lt;uint8_t, int32_t, BiasAdd&lt;uint8_t&gt;, 16,
0&gt;::Transform(const uint8_t* input,
const BiasAdd&lt;uint8_t&gt;&amp; params,
int32_t* output) {
#ifdef DEBUG
#ifdef DEBUG_METAGEMM_VERBOSE
std::cout &lt;&lt;  &lt;&lt; "(" &lt;&lt; 
&lt;&lt; ") BiasAdd&lt;uint8_t&gt;&lt;uint8_t, int32_t, BiasAdd&lt;uint8_t&gt;, 16, "
"0&gt;::Transform()"
&lt;&lt; std::endl
&lt;&lt; std::flush;
#endif
#endif
int params_rows_copy = params.rows;
asm volatile(
"ldr r0, %[input_range_min]\n"
"vdup.32 q8, r0\n"
"ldr r0, %[input_range_scale]\n"
"vdup.32 q9, r0\n"
"ldr r0, %[bias_range_min]\n"
"vdup.32 q10, r0\n"
"ldr r0, %[bias_range_scale]\n"
"vdup.32 q11, r0\n"
"ldr r0, %[output_range_min]\n"
"vdup.32 q12, r0\n"
"ldr r0, %[one_over_output_range_scale]\n"
"vdup.32 q13, r0\n"
"ldr r0, %[output_range_offset]\n"
"vdup.32 q14, r0\n"
"1:"
"mov r0, %[count]\n"
"mov r1, %[bias]\n"
"2:"
"subs r0, r0, &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/16&gt;#16&lt;/denchmark-link&gt;
\n"
&lt;denchmark-code&gt;  // BiasAdd::Transform
  "vld1.32 {d0, d1}, [%[input]]!\n"
  "vld1.32 {d8, d9}, [r1]!\n"
  "pld [%[input], #32]\n"
  "vmovl.u8 q1, d1\n"
  "vmovl.u8 q0, d0\n"
  "vmovl.u8 q5, d9\n"
  "vmovl.u8 q4, d8\n"
  "vmovl.s16 q3, d3\n"
  "vmovl.s16 q2, d2\n"
  "vmovl.s16 q7, d11\n"
  "vmovl.s16 q6, d10\n"
  "vmovl.s16 q1, d1\n"
  "vmovl.s16 q0, d0\n"
  "vmovl.s16 q5, d9\n"
  "vmovl.s16 q4, d8\n"
  "vcvt.f32.s32 q0, q0\n"
  "vcvt.f32.s32 q1, q1\n"
  "vcvt.f32.s32 q2, q2\n"
  "vcvt.f32.s32 q3, q3\n"
  "vcvt.f32.s32 q4, q4\n"
  "vcvt.f32.s32 q5, q5\n"
  "vcvt.f32.s32 q6, q6\n"
  "vcvt.f32.s32 q7, q7\n"
  "vmul.f32 q0, q0, q9\n"
  "vmul.f32 q1, q1, q9\n"
  "vmul.f32 q2, q2, q9\n"
  "vmul.f32 q3, q3, q9\n"
  "vmul.f32 q4, q4, q11\n"
  "vmul.f32 q5, q5, q11\n"
  "vmul.f32 q6, q6, q11\n"
  "vmul.f32 q7, q7, q11\n"
  "vadd.f32 q0, q0, q8\n"
  "vadd.f32 q1, q1, q8\n"
  "vadd.f32 q2, q2, q8\n"
  "vadd.f32 q3, q3, q8\n"
  "vadd.f32 q4, q4, q10\n"
  "vadd.f32 q5, q5, q10\n"
  "vadd.f32 q6, q6, q10\n"
  "vadd.f32 q7, q7, q10\n"
  "vadd.f32 q0, q0, q4\n"
  "vadd.f32 q1, q1, q5\n"
  "vadd.f32 q2, q2, q6\n"
  "vadd.f32 q3, q3, q7\n"
  "vsub.f32 q0, q0, q12\n"
  "vsub.f32 q1, q1, q12\n"
  "vsub.f32 q2, q2, q12\n"
  "vsub.f32 q3, q3, q12\n"
  "vmul.f32 q0, q0, q13\n"
  "vmul.f32 q1, q1, q13\n"
  "vmul.f32 q2, q2, q13\n"
  "vmul.f32 q3, q3, q13\n"
  "vadd.f32 q0, q0, q14\n"
  "vadd.f32 q1, q1, q14\n"
  "vadd.f32 q2, q2, q14\n"
  "vadd.f32 q3, q3, q14\n"
  "vcvt.s32.f32 q0, q0\n"
  "vcvt.s32.f32 q1, q1\n"
  "vcvt.s32.f32 q2, q2\n"
  "vcvt.s32.f32 q3, q3\n"

  "vst1.32 {d0, d1, d2, d3}, [%[output]]!\n"
  "vst1.32 {d4, d5, d6, d7}, [%[output]]!\n"
  "pld [%[output]]\n"
  "bne 2b\n"
  "subs %[rows], %[rows], #1\n"
  "bne 1b\n"
  : [input] "+r"(input), [output] "+r"(output)
  : [count] "r"(params.count), [rows] "r"(params_rows_copy),
    [output_range_offset] "m"(params.output_range_offset),
    [input_range_scale] "m"(params.input_range_scale),
    [one_over_output_range_scale] "m"(params.one_over_output_range_scale),
    [bias_range_min] "m"(params.bias_range_min),
    [output_range_min] "m"(params.output_range_min),
    [bias_range_scale] "m"(params.bias_range_scale),
    [bias] "r"(params.bias), [input_range_min] "m"(params.input_range_min)
  : "r0", "r1", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9",
    "d10", "d11", "d12", "d13", "d14", "d15", "d16", "d17", "d18", "d19",
    "d20", "d21", "d22", "d23", "d24", "d25", "d26", "d27", "d28", "d29",
    "cc", "memory");
&lt;/denchmark-code&gt;

}
Does anyone can help me out with what is wrong??
	</description>
	<comments>
		<comment id='1' author='gopinath-r' date='2017-09-20T22:49:05Z'>
		I'd recommend filing bug with the gemmlowp, since this is not a TensorFlow specific bug. &lt;denchmark-link:https://github.com/maciekcc&gt;@maciekcc&lt;/denchmark-link&gt;
, do you have any other ideas?
		</comment>
	</comments>
</bug>