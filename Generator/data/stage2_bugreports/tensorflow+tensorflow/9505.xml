<bug id='9505' author='burness' open_date='2017-04-28T03:50:22Z' closed_time='2017-06-16T22:49:17Z'>
	<summary>Check failed: NDIMS == dims() (2 vs. 1) when I build a svm model</summary>
	<description>
when I build a svm model with tf.learn, it get error like this:

I have ask a question in stackoverflow, It could be a issue according the reply:
&lt;denchmark-link:http://stackoverflow.com/questions/43638488/check-failed-ndims-dims-2-vs-1-when-i-build-a-svm-model&gt;http://stackoverflow.com/questions/43638488/check-failed-ndims-dims-2-vs-1-when-i-build-a-svm-model&lt;/denchmark-link&gt;

all the reproduce code here:
&lt;denchmark-code&gt;import tensorflow as tf
import pandas as pd
from tensorflow.contrib.learn.python.learn.estimators import svm


detailed_occupation_recode = tf.contrib.layers.sparse_column_with_hash_bucket(
    column_name='detailed_occupation_recode', 
    hash_bucket_size = 1000
)
education = tf.contrib.layers.sparse_column_with_hash_bucket(
    column_name='education',
    hash_bucket_size=1000
)
# Continuous base columns
age = tf.contrib.layers.real_valued_column('age')
wage_per_hour = tf.contrib.layers.real_valued_column('wage_per_hour')



columns = ['age', 'detailed_occupation_recode', 'education', 'wage_per_hour','label']
FEATURE_COLUMNS = [
    # age, age_buckets, class_of_worker, detailed_industry_recode,
    age, detailed_occupation_recode, education, wage_per_hour

]


LABEL_COLUMN = 'label'

CONTINUOUS_COLUMNS = ['age', 'wage_per_hour']

CATEGORICAL_COLUMNS = ['detailed_occupation_recode','education']


df_train = pd.DataFrame([[12,'12','7th and 8th grade',40,'- 50000'],
                [40,'45','7th and 8th grade',40, '50000+'],
                [50,'50','10th grade',40,'50000+'],
                [60,'30','7th and 8th grade',40,'- 50000']],
                columns=['age', 'detailed_occupation_recode', 'education', 'wage_per_hour', 'label'])


df_test = pd.DataFrame([[12,'12','7th and 8th grade',40,'- 50000'],
                [40,'45','7th and 8th grade',40, '50000+'],
                [50,'50','10th grade',40,'50000+'],
                [60,'30','7th and 8th grade',40,'- 50000']],
                columns=['age', 'detailed_occupation_recode', 'education', 'wage_per_hour', 'label'])
df_train[LABEL_COLUMN] = (df_train[LABEL_COLUMN].apply(lambda x: '+' in x)).astype(int)
df_test[LABEL_COLUMN] = (df_test[LABEL_COLUMN].apply(lambda x: '+' in x)).astype(int)
dtypess = df_train.dtypes


def input_fn(df):
    continuous_cols = {k: tf.constant(df[k].values) for k in CONTINUOUS_COLUMNS}
    categorical_cols = {k: tf.SparseTensor(
        indices=[[i, 0] for i in range(df[k].size)],
        values=df[k].values,
        dense_shape=[df[k].size, 1]) for k in CATEGORICAL_COLUMNS}    
    feature_cols = dict(continuous_cols.items() + categorical_cols.items())
    feature_cols['example_id'] = tf.constant([str(i+1) for i in range(df['age'].size)])
    label = tf.constant(df[LABEL_COLUMN].values)
    return feature_cols, label

def train_input_fn():
    return input_fn(df_train)

def eval_input_fn():
    return input_fn(df_test)

model_dir = '../svm_model_dir'

model = svm.SVM(example_id_column='example_id', feature_columns=FEATURE_COLUMNS, model_dir=model_dir)
model.fit(input_fn=train_input_fn, steps=10)
results = model.evaluate(input_fn=eval_input_fn, steps=1)
for key in sorted(results):
    print("%s: %s" % (key, results[key]))
&lt;/denchmark-code&gt;

and the all error output text:
&lt;denchmark-code&gt;WARNING:tensorflow:The default value of combiner will change from "sum" to 

"sqrtn" after 2016/11/01.
WARNING:tensorflow:The default value of combiner will change from "sum" to "sqrtn" after 2016/11/01.
WARNING:tensorflow:tf.variable_op_scope(values, name, default_name) is deprecated, use tf.variable_scope(name, default_name, values)
WARNING:tensorflow:Rank of input Tensor (1) should be the same as output_rank (2) for column. Will attempt to expand dims. It is highly recommended that you
 resize your input, as this behavior may change.
WARNING:tensorflow:Rank of input Tensor (1) should be the same as output_rank (2) for column. Will attempt to expand dims. It is highly recommended that you
 resize your input, as this behavior may change.
WARNING:tensorflow:From /Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:882: hinge_loss (from t
ensorflow.contrib.losses.python.losses.loss_ops) is deprecated and will be removed after 2016-12-30.
Instructions for updating:
Use tf.losses.hinge_loss instead.
WARNING:tensorflow:From /Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:1362: scalar_summary (f
rom tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.
Instructions for updating:
Please switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-dupl
icate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.
WARNING:tensorflow:From /Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:882: hinge_loss (from t
ensorflow.contrib.losses.python.losses.loss_ops) is deprecated and will be removed after 2016-12-30.
Instructions for updating:
Use tf.losses.hinge_loss instead.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machi
ne and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machi
ne and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine
and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine
 and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine
and could speed up CPU computations.
F tensorflow/core/framework/tensor_shape.cc:36] Check failed: NDIMS == dims() (2 vs. 1)Asking for tensor of 2 dimensions from a tensor of 1 dimensions
[1]    66225 abort      python simple-tf-svm.py
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='burness' date='2017-04-28T17:53:36Z'>
		This question is better asked on  &lt;denchmark-link:http://stackoverflow.com/questions/tagged/tensorflow&gt;StackOverflow&lt;/denchmark-link&gt;
 since it is not a  bug or feature request. There is also a larger community that reads questions there. Thanks!
		</comment>
		<comment id='2' author='burness' date='2017-04-28T21:28:57Z'>
		This seems like a bug to me though. &lt;denchmark-link:https://github.com/burness&gt;@burness&lt;/denchmark-link&gt;
 Does a similar setup run successfully for other canned estimators?
		</comment>
		<comment id='3' author='burness' date='2017-04-28T22:12:27Z'>
		This is definitely a bug, either with one of the FeatureColumn processing ops or with the way the SVM optimizer is using them. I didn't trace it through completely with GDB to figure out what's wrong exactly (probably equivalent effort to fixing the bug), but the fact that this is required is indicative; even if there's something wrong with the usage, we need to do better than a CHECK failure.
		</comment>
		<comment id='4' author='burness' date='2017-04-29T09:25:17Z'>
		&lt;denchmark-link:https://github.com/terrytangyuan&gt;@terrytangyuan&lt;/denchmark-link&gt;
  LinearClassifier seems all right, I will try other estimators later
		</comment>
		<comment id='5' author='burness' date='2017-05-01T17:29:35Z'>
		I can reproduce at head with a single real_valued_column:
&lt;denchmark-code&gt;import tensorflow as tf

def input_fn():
    feature_cols = {'age': tf.zeros([4]),
                    'example_id': tf.constant(['1', '2', '3', '4'])}
    label = tf.constant([0, 1, 1, 0])
    return feature_cols, label

model = tf.contrib.learn.SVM(
    example_id_column='example_id', 
    feature_columns=[tf.contrib.layers.real_valued_column('age')])
model.fit(input_fn=input_fn, steps=10)
&lt;/denchmark-code&gt;

Apparently the error is indicating that only vectors are supported for real_valued_columns. A similar CHECK failure pops up if the column is a matrix (tf.zero([4, 1, 1])). So you can get your code working by adding a dummy second dimension to your real_valued_columns.
We, however, need to work on our argument checking. Thank you for the report!
		</comment>
		<comment id='6' author='burness' date='2017-05-01T17:59:38Z'>
		Hi &lt;denchmark-link:https://github.com/petrosmol&gt;@petrosmol&lt;/denchmark-link&gt;
,
Could you take a look at this issue? It looks like LinearClassifier accepts scalar real_valued_columns (i.e. input with just a batch dimension). Do we just want to add a reshape here to keep behavior consistent?
		</comment>
		<comment id='7' author='burness' date='2017-05-01T20:00:48Z'>
		Thanks for reporting! I am looking into it. Will update this thread shortly.
		</comment>
		<comment id='8' author='burness' date='2017-05-02T04:03:22Z'>
		Update: The problem is not with the estimator per se, rather it is with the underlying optimizer (SDCA) which accepts only matrices (2-dimensional tensors) for dense features. I am working on a fix.
In the meantime, a simple fix so that you are not blocked is to reshape your real valued columns so that they always have rank one. For instance, in your input_fn, you can replace:
continuous_cols = {k: tf.constant(df[k].values) for k in CONTINUOUS_COLUMNS} with
continuous_cols = {k: tf.expand_dims(tf.constant(df[k].values), 1) for k in CONTINUOUS_COLUMNS}
		</comment>
		<comment id='9' author='burness' date='2017-05-02T07:47:50Z'>
		&lt;denchmark-link:https://github.com/petrosmol&gt;@petrosmol&lt;/denchmark-link&gt;
  Thanks! It seems ok now. And In a randomforest test case as follow:
&lt;denchmark-code&gt;import tensorflow as tf
import pandas as pd
from tensorflow.contrib.tensor_forest.client import random_forest

detailed_occupation_recode = tf.contrib.layers.sparse_column_with_hash_bucket(
    column_name='detailed_occupation_recode', hash_bucket_size=1000)
education = tf.contrib.layers.sparse_column_with_hash_bucket(
    column_name='education', hash_bucket_size=1000)
# Continuous base columns
age = tf.contrib.layers.real_valued_column('age')
wage_per_hour = tf.contrib.layers.real_valued_column('wage_per_hour')

columns = [
    'age', 'detailed_occupation_recode', 'education', 'wage_per_hour', 'label'
]
FEATURE_COLUMNS = [
    # age, age_buckets, class_of_worker, detailed_industry_recode,
    age,
    detailed_occupation_recode,
    education,
    wage_per_hour
]

LABEL_COLUMN = 'label'

CONTINUOUS_COLUMNS = ['age', 'wage_per_hour']

CATEGORICAL_COLUMNS = ['detailed_occupation_recode', 'education']

df_train = pd.DataFrame(
    [[12, '12', '7th and 8th grade', 40, '- 50000'],
     [40, '45', '7th and 8th grade', 40, '50000+'],
     [50, '50', '10th grade', 40, '50000+'],
     [60, '30', '7th and 8th grade', 40, '- 50000']],
    columns=[
        'age', 'detailed_occupation_recode', 'education', 'wage_per_hour',
        'label'
    ])

df_test = pd.DataFrame(
    [[12, '12', '7th and 8th grade', 40, '- 50000'],
     [40, '45', '7th and 8th grade', 40, '50000+'],
     [50, '50', '10th grade', 40, '50000+'],
     [60, '30', '7th and 8th grade', 40, '- 50000']],
    columns=[
        'age', 'detailed_occupation_recode', 'education', 'wage_per_hour',
        'label'
    ])
df_train[LABEL_COLUMN] = (
    df_train[LABEL_COLUMN].apply(lambda x: '+' in x)).astype(int)
df_test[LABEL_COLUMN] = (
    df_test[LABEL_COLUMN].apply(lambda x: '+' in x)).astype(int)
dtypess = df_train.dtypes

print df_train
print df_test


def input_fn(df):
    # continuous_cols = {
    #     k: tf.expand_dims(tf.constant(df[k].values), 1)
    #     for k in CONTINUOUS_COLUMNS
    # }
    continuous_cols = {
        k: tf.constant(df[k].values)
        for k in CONTINUOUS_COLUMNS
    }
    categorical_cols = {
        k: tf.SparseTensor(
            indices=[[i, 0] for i in range(df[k].size)],
            values=df[k].values,
            dense_shape=[df[k].size, 1])
        for k in CATEGORICAL_COLUMNS
    }
    feature_cols = dict(continuous_cols.items() + categorical_cols.items())
    label = tf.constant(df[LABEL_COLUMN].values)
    return feature_cols, label


def train_input_fn():
    return input_fn(df_train)


def eval_input_fn():
    return input_fn(df_test)


model_dir = '../rf_model_dir'

hparams = tf.contrib.tensor_forest.python.tensor_forest.ForestHParams(
    num_trees=10, max_nodes=1000, num_classes=2, num_features=4)
classifier = random_forest.TensorForestEstimator(hparams, model_dir=model_dir)
classifier.fit(input_fn=train_input_fn, steps=10)
results = classifier.evaluate(input_fn=eval_input_fn, steps=1)
for key in sorted(results):
    print("%s: %s" % (key, results[key]))
&lt;/denchmark-code&gt;

It will get the error:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "simple-tf-rf.py", line 93, in &lt;module&gt;
    classifier.fit(input_fn=train_input_fn, steps=10)
  File "/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/client/random_forest.py", line 264, in fit
    max_steps=max_steps)
  File "/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/python/util/deprecation.py", line 280, in new_func
    return func(*args, **kwargs)
  File "/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py", line 426, in fit
    loss = self._train_model(input_fn=input_fn, hooks=hooks)
  File "/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py", line 934, in _train_model
    model_fn_ops = self._call_legacy_get_train_ops(features, labels)
  File "/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py", line 1003, in _call_legacy_get_t
rain_ops
    train_ops = self._get_train_ops(features, labels)
  File "/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py", line 1162, in _get_train_ops
    return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)
  File "/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py", line 1133, in _call_model_fn
    model_fn_results = self._model_fn(features, labels, **kwargs)
  File "/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/client/random_forest.py", line 116, in _model_fn
    graph_builder.inference_graph(features)
  File "/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py", line 444, in inference_graph
    data_ops.ParseDataTensorOrDict(input_data))
  File "/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/python/ops/data_ops.py", line 141, in ParseDataTensorOrDict
    col_spec.size = data[k].get_shape()[1].value
  File "/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/python/framework/tensor_shape.py", line 502, in __getitem__
    return self._dims[key]
IndexError: list index out of range
&lt;/denchmark-code&gt;

and I replace:
continuous_cols = {k: tf.constant(df[k].values) for k in CONTINUOUS_COLUMNS} with
continuous_cols = {k: tf.expand_dims(tf.constant(df[k].values), 1) for k in CONTINUOUS_COLUMNS}
It seems ok now!
It may need to enhance this reshape problem with the process of input_fn
		</comment>
		<comment id='10' author='burness' date='2017-05-02T17:44:36Z'>
		It looks like &lt;denchmark-link:https://github.com/ThomasColthurst&gt;@ThomasColthurst&lt;/denchmark-link&gt;
 has added a reshape to TensorForest input, which I assume just hasn't made it into a TensorFlow release yet.
		</comment>
		<comment id='11' author='burness' date='2017-05-12T14:04:25Z'>
		FYI, I have submitted a change that should fix the problem for SVM (and any other estimator that uses SDCA as an optimizer). You should be able to provide rank-1 tensors for 1-dimensional real valued columns.
Let me know if you encounter any other problems
		</comment>
		<comment id='12' author='burness' date='2017-05-13T12:47:28Z'>
		&lt;denchmark-link:https://github.com/petrosmol&gt;@petrosmol&lt;/denchmark-link&gt;
  Thanks
		</comment>
	</comments>
</bug>