<bug id='32786' author='drasmuss' open_date='2019-09-24T17:59:01Z' closed_time='2020-04-09T00:45:15Z'>
	<summary>Keras Layer.compute_output_shape calls `build` with wrong input shape</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.0.0rc2
Python version: 3.6.8
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
When using Layer.compute_output_shape or Layer.compute_output_signature on a Layer with a build function, the build(input_shape=...) argument is always set to None.
Describe the expected behavior
The input_shape should be set to the shape passed to compute_output_shape.
Code to reproduce the issue
import tensorflow as tf

shape = (1, 2)


class MyLayer(tf.keras.layers.Layer):
    def build(self, input_shape):
        print(input_shape)
        assert input_shape == shape

    def call(self, inputs):
        return inputs


layer = MyLayer()
layer.compute_output_shape(shape)
	</description>
	<comments>
		<comment id='1' author='drasmuss' date='2019-09-25T06:30:59Z'>
		I have tried on colab with TF version 2.0.0-rc2 , 2.0.0-dev20190924 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/4071357c68ee4ac7295198754d9489a0/untitled219.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='drasmuss' date='2020-03-23T11:45:57Z'>
		issue still exist in &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/8f56913030e3bf31cd3344a9076d6b2d/32786.ipynb&gt;nightly and in tensorflow 2.1&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='drasmuss' date='2020-03-23T16:32:30Z'>
		&lt;denchmark-link:https://github.com/drasmuss&gt;@drasmuss&lt;/denchmark-link&gt;
 I updated your code to build the layer correctly. With that update, code is not throwing any error. Please check the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/00a883bdcb7bcd40f9f1007176d99df4/32786.ipynb&gt;gist here&lt;/denchmark-link&gt;
.
&lt;denchmark-code&gt;import tensorflow as tf

shape = (1, 2)


class MyLayer(tf.keras.layers.Layer):

  def __init__(self, **kwargs):
        super(MyLayer, self).__init__(**kwargs)
        
  def build(self, input_shape):
      print(input_shape)
      super(MyLayer, self).build(input_shape)
      assert input_shape == shape

  def call(self, inputs):
      return inputs


layer = MyLayer()
layer.build(shape)
layer.compute_output_shape(shape)
&lt;/denchmark-code&gt;

Please close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='4' author='drasmuss' date='2020-03-23T16:46:31Z'>
		I don't think that solves the issue, it just avoids it by explicitly calling build ahead of time (with the correct shape). The problem that is being highlighted in this issue is that when compute_output_shape calls build automatically, it calls it with the wrong shape.
It says right in the docstring of compute_output_shape that it shouldn't be necessary to manually call build, so I don't think this is expected behaviour:

Computes the output shape of the layer.
If the layer has not been built, this method will call build on the layer. This assumes that the layer will later be used with inputs that match the input shape provided here.

&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/layers/Layer#compute_output_shape&gt;https://www.tensorflow.org/api_docs/python/tf/keras/layers/Layer#compute_output_shape&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='drasmuss' date='2020-03-27T10:11:26Z'>
		Re-assigning to Yanhui
		</comment>
		<comment id='6' author='drasmuss' date='2020-04-09T00:45:15Z'>
		Hi &lt;denchmark-link:https://github.com/drasmuss&gt;@drasmuss&lt;/denchmark-link&gt;
 there is a fix just submitted, and you may verify it with tf-nightly later. Close this for now, and feel free to reopen it if needed. Thanks.
		</comment>
		<comment id='7' author='drasmuss' date='2020-04-09T00:45:17Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32786&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32786&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>