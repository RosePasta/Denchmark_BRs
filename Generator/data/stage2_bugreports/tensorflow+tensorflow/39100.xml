<bug id='39100' author='praetorianer777' open_date='2020-05-02T12:09:41Z' closed_time='2020-07-17T20:33:05Z'>
	<summary>Python Keras model in C++</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Win10 and Ubuntu 18
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: no
TensorFlow installed from (source or binary): yes
TensorFlow version (use command below): 2.01
Python version: 3.7
Bazel version (if compiling from source): 0.26.1
GCC/Compiler version (if compiling from source): 7.5.0
CUDA/cuDNN version: -
GPU model and memory: -

Describe the current behavior
If I set names in Keras and want to use the trained model in C++ then there seem to be no names for the nodes, so I can't set inputs or get outputs.
Standalone code to reproduce the issue
Python Code on the Windows 10 machine:
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow.keras import layers

model = tf.keras.Sequential()

model.add(layers.Input(2, name='INPUT'))
# Adds a densely-connected layer with 64 units to the model:
model.add(layers.Dense(8, name='layer1', input_shape=(2,), activation='tanh'))
# Add another:
model.add(layers.Dense(4, name='layer2', input_shape=(8,), activation='sigmoid'))
# Add an output layer with 1 output unit:
model.add(layers.Dense(1, name='outputlayer', input_shape=(4,), activation='sigmoid'))

model.compile(optimizer=tf.keras.optimizers.Adam(0.01),
              loss=tf.keras.losses.BinaryCrossentropy(),
              metrics=['accuracy'])
model.summary()

print(model.inputs[0].name)
import numpy as np

data = np.array([
    [0, 0],
    [1, 0],
    [0, 1],
    [1, 1]
])
labels = np.array([
    [0],
    [1],
    [1],
    [0]
])

model.fit(data, labels, epochs=500)
tf.keras.models.save_model(model, 'model')
&lt;/denchmark-code&gt;

C++ code on the linux machine:
&lt;denchmark-code&gt;tensorflow::Tensor inputs(tensorflow::DT_FLOAT, tensorflow::TensorShape({1, 2}));
auto input_mapped = inputs.tensor&lt;float, 2&gt;();
input_mapped(0, 0) = 0.0;
input_mapped(0, 1) = 1.0;

std::vector&lt;std::pair&lt;std::string, tensorflow::Tensor&gt;&gt; inp = {{"INPUT", inputs}};

std::vector&lt;tensorflow::Tensor&gt; outputs;
std::vector&lt;std::string&gt; output_names({"output"});

status = model.session-&gt;Run(inp, output_names, {}, &amp;outputs);

&lt;/denchmark-code&gt;

What is the problem here? Also if I set names for the layers in Keras, save the model, load it again than the names are replaced with others. And if I use these other names in the C++ application it doesn't work.
Here are the error message:
2020-05-02 13:38:31.256880: E tensorflow/core/grappler/optimizers/meta_optimizer.cc:502] model_pruner failed: Internal: Could not find node with name 'outputlayer'
Invalid argument: Tensor INPUT:0, specified in either feed_devices or fetch_devices was not found in the Graph
	</description>
	<comments>
		<comment id='1' author='praetorianer777' date='2020-05-05T00:37:42Z'>
		&lt;denchmark-link:https://github.com/praetorianer777&gt;@praetorianer777&lt;/denchmark-link&gt;
 You can access layer names as below. Except (which is input to the model), all the Layer names from loaded model are same as from the original model. &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/59bcca0e7716c4493263537eb028c9fd/untitled151.ipynb&gt;Here&lt;/denchmark-link&gt;
 is a gist for y/our reference.
You can print layer names and check as
&lt;denchmark-code&gt;for layer,layer_loaded in zip(model.layers,loaded_model.layers):
  print('From Original Model: ', layer.name, ' From loaded_model: ',layer_loaded.name)
&lt;/denchmark-code&gt;

#output
&lt;denchmark-code&gt;From Original Model:  layer1  From loaded_model:  layer1
From Original Model:  layer2  From loaded_model:  layer2
From Original Model:  outputlayer  From loaded_model:  outputlayer
&lt;/denchmark-code&gt;

model.summary() also shows only these three layers. There is small change in the name of Input` layer as shown below
&lt;denchmark-code&gt;model.input_names  #['INPUT']

loaded_model.input_names. #['layer1_input']
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='praetorianer777' date='2020-05-05T09:38:57Z'>
		Hello, thanks for your reply, but how can I access the input and output in C++?
		</comment>
		<comment id='3' author='praetorianer777' date='2020-05-10T09:31:14Z'>
		Does anybody has an idea?
		</comment>
		<comment id='4' author='praetorianer777' date='2020-07-17T20:33:04Z'>
		As of now, the Keras model isn't restored when loading into C++. Instead what I think you're loading is the default serving signature -- You should use the &lt;denchmark-link:https://www.tensorflow.org/guide/saved_model#details_of_the_savedmodel_command_line_interface&gt;saved_model_cli&lt;/denchmark-link&gt;
 to get the input and output names
&lt;denchmark-code&gt;saved_model_cli show --dir model --all
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='praetorianer777' date='2020-07-17T20:33:06Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39100&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39100&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>