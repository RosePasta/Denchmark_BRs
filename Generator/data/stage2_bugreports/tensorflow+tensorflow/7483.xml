<bug id='7483' author='liangwang' open_date='2017-02-14T00:31:24Z' closed_time='2017-03-09T00:03:20Z'>
	<summary>sparse_placeholder failed when specifying shape</summary>
	<description>
When trying to create a sparse placeholder, exception raised if specifying the shape parameter:
&lt;denchmark-code&gt;features_placeholder = tf.sparse_placeholder(tf.float32, shape=(16, 20424)) # failed
features_placeholder = tf.sparse_placeholder(tf.float32)  # pass
&lt;/denchmark-code&gt;

Exception reads like:
&lt;denchmark-code&gt;  File "tf_learn.py", line 92, in run_training
    features_placeholder = tf.sparse_placeholder(tf.float32, shape=(FLAGS.batch_size, etc.FEATURE_SIZE))
  File "C:\local\Anaconda3-4.1.1-Windows-x86_64\envs\tf-py35\lib\site-packages\tensorflow\python\ops\array_ops.py", line 1653, in sparse_placeholder
    shape=shape
  File "C:\local\Anaconda3-4.1.1-Windows-x86_64\envs\tf-py35\lib\site-packages\tensorflow\python\framework\sparse_tensor.py", line 135, in __init__
    shape = ops.convert_to_tensor(shape, name="shape", dtype=dtypes.int64)
  File "C:\local\Anaconda3-4.1.1-Windows-x86_64\envs\tf-py35\lib\site-packages\tensorflow\python\framework\ops.py", line 669, in convert_to_tensor
    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
  File "C:\local\Anaconda3-4.1.1-Windows-x86_64\envs\tf-py35\lib\site-packages\tensorflow\python\framework\ops.py", line 583, in _TensorTensorConversionFunction
    % (dtype.name, t.dtype.name, str(t)))
ValueError: Tensor conversion requested dtype int64 for Tensor with dtype int32: 'Tensor("Const:0", shape=(2,), dtype=int32)'

&lt;/denchmark-code&gt;

Is this a bug?
	</description>
	<comments>
		<comment id='1' author='liangwang' date='2017-02-14T22:21:33Z'>
		hm, is shape getting initialized to tf.float64 value? You can try initializing with shape=shape, and create shape ahead of time as a tf.float32 tensorflow constant tensor
		</comment>
		<comment id='2' author='liangwang' date='2017-02-14T23:15:48Z'>
		&lt;denchmark-link:https://github.com/yaroslavvb&gt;@yaroslavvb&lt;/denchmark-link&gt;
 thanks for the suggestion. I finally settled down on avoiding the  parameter in the  as almost all examples I found did not specify the  parameter for the .
I also traced it into the tensorflow python code, and found that the shape is converted to a int64 array, and the int64 dtype is hard-coded.
		</comment>
		<comment id='3' author='liangwang' date='2017-02-15T18:30:55Z'>
		&lt;denchmark-link:https://github.com/concretevitamin&gt;@concretevitamin&lt;/denchmark-link&gt;
, could you please take a look. it seems we could handle this case better? It's not consistent with shape arguments on dense tensor, I believe.
		</comment>
		<comment id='4' author='liangwang' date='2017-02-16T19:46:27Z'>
		&lt;denchmark-link:https://github.com/liangwang&gt;@liangwang&lt;/denchmark-link&gt;
 the reason is simply that, the design of  already hardcodes the associated shape as  [1], so any downstream ops that consume these objects assume likewise as well.
[1] &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/sparse_tensor.py#L59&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/sparse_tensor.py#L59&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='liangwang' date='2017-02-16T22:16:30Z'>
		&lt;denchmark-link:https://github.com/concretevitamin&gt;@concretevitamin&lt;/denchmark-link&gt;
 , yes, it is hard-coded. But would this be considered a bug, since it will fail when specifying shapes with immediate numbers (like the first example I listed in the original post)?
		</comment>
		<comment id='6' author='liangwang' date='2017-03-08T22:28:49Z'>
		&lt;denchmark-link:https://github.com/concretevitamin&gt;@concretevitamin&lt;/denchmark-link&gt;
, ping
		</comment>
		<comment id='7' author='liangwang' date='2017-03-09T00:03:20Z'>
		I don't consider it a bug in sparse_palceholder... There's no automatic type casting in TensorFlow at the moment, which I think is the effect you're asking for.  (If you have a proposed design to solve this general problem, we'd love to hear about it in a focused issue!)
		</comment>
		<comment id='8' author='liangwang' date='2017-03-09T01:13:49Z'>
		If this is not considered as a bug, then how should we use the shape parameter? Clearly, it will fail by specifying plain numbers. At least, it helps by providing an example if the usage is not straightforward. Maybe, we can add the usage example to the document to avoid any further confusion.
		</comment>
		<comment id='9' author='liangwang' date='2017-03-09T01:29:49Z'>
		&lt;denchmark-link:https://github.com/liangwang&gt;@liangwang&lt;/denchmark-link&gt;
 you can use  parameter as follows:
tf.sparse_placeholder(tf.float32, shape=np.array((16, 20424)))
		</comment>
		<comment id='10' author='liangwang' date='2017-03-10T22:26:58Z'>
		&lt;denchmark-link:https://github.com/liangwang&gt;@liangwang&lt;/denchmark-link&gt;
 what &lt;denchmark-link:https://github.com/yaroslavvb&gt;@yaroslavvb&lt;/denchmark-link&gt;
 said (since  defaults to 64-bit).  Another way could be:
tf.sparse_placeholder(tf.float32, shape=tf.constant([16, 20424], tf.int64))
		</comment>
		<comment id='11' author='liangwang' date='2019-10-15T05:21:22Z'>
		What if I wish to apply functions that manipulate the shape of sparse tensors, like tf.expand_dims() and tf.squeeze()? It fails even if I have assigned a shape to my tf.sparse_placeholder.
		</comment>
	</comments>
</bug>