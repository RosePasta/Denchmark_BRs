<bug id='36735' author='ding-c3' open_date='2020-02-13T19:49:44Z' closed_time='2020-02-28T01:24:05Z'>
	<summary>Re-compiling keras model causes save / load_model to fail</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): docker container running RHEL 7.7
TensorFlow installed from (source or binary): binary (pip)
TensorFlow version (use command below): 2.1
Python version: 3.6
CUDA/cuDNN version: running on CPU
Exact command to reproduce:

&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow.keras import optimizers
from tensorflow.keras import metrics
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

model = Sequential()
model.add(Dense(64, activation='relu', input_shape=(13,)))
model.add(Dense(32, activation='relu'))
model.add(Dense(3, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy', metrics=["accuracy"], optimizer="SGD")

# Compiling again with the same loss, optimizer and metrics
model.compile(loss=model.loss, optimizer=model.optimizer, metrics=model.metrics)

model.save("my_model.h5")
loaded = tf.keras.models.load_model("my_model.h5")
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

Compiling keras model again and saving it as h5 file causes load_model to fail with TypeError: __init__() missing 1 required positional argument: 'fn'.
This issue does not happen if the model is compile once.
Happening in both tensorflow 2.0 and 2.1
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-4-a65550ed8fb1&gt; in &lt;module&gt;
     15 
     16 model.save("my_model.h5")
---&gt; 17 loaded = tf.keras.models.load_model("my_model.h5")

/opt/conda/envs/py-tensorflow_2_0_0/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/save.py in load_model(filepath, custom_objects, compile)
    144   if (h5py is not None and (
    145       isinstance(filepath, h5py.File) or h5py.is_hdf5(filepath))):
--&gt; 146     return hdf5_format.load_model_from_hdf5(filepath, custom_objects, compile)
    147 
    148   if isinstance(filepath, six.string_types):

/opt/conda/envs/py-tensorflow_2_0_0/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/hdf5_format.py in load_model_from_hdf5(filepath, custom_objects, compile)
    182       # Compile model.
    183       model.compile(**saving_utils.compile_args_from_training_config(
--&gt; 184           training_config, custom_objects))
    185 
    186       # Set optimizer weights.

/opt/conda/envs/py-tensorflow_2_0_0/lib/python3.6/site-packages/tensorflow_core/python/training/tracking/base.py in _method_wrapper(self, *args, **kwargs)
    455     self._self_setattr_tracking = False  # pylint: disable=protected-access
    456     try:
--&gt; 457       result = method(self, *args, **kwargs)
    458     finally:
    459       self._self_setattr_tracking = previous_value  # pylint: disable=protected-access

/opt/conda/envs/py-tensorflow_2_0_0/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training.py in compile(self, optimizer, loss, metrics, loss_weights, sample_weight_mode, weighted_metrics, target_tensors, distribute, **kwargs)
    427     with K.get_graph().as_default():
    428       # Save all metric attributes per output of the model.
--&gt; 429       self._cache_output_metric_attributes(metrics, weighted_metrics)
    430 
    431       # Set metric attributes on model.

/opt/conda/envs/py-tensorflow_2_0_0/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training.py in _cache_output_metric_attributes(self, metrics, weighted_metrics)
   1840         output_shapes.append(output.shape.as_list())
   1841     self._per_output_metrics = training_utils.collect_per_output_metric_info(
-&gt; 1842         metrics, self.output_names, output_shapes, self.loss_functions)
   1843     self._per_output_weighted_metrics = (
   1844         training_utils.collect_per_output_metric_info(

/opt/conda/envs/py-tensorflow_2_0_0/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_utils.py in collect_per_output_metric_info(metrics, output_names, output_shapes, loss_fns, is_weighted)
    878     metrics_dict = OrderedDict()
    879     for metric in metrics:
--&gt; 880       metric_name = get_metric_name(metric, is_weighted)
    881       metric_fn = get_metric_function(
    882           metric, output_shape=output_shapes[i], loss_fn=loss_fns[i])

/opt/conda/envs/py-tensorflow_2_0_0/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_utils.py in get_metric_name(metric, weighted)
   1072       return metric
   1073 
-&gt; 1074     metric = metrics_module.get(metric)
   1075     return metric.name if hasattr(metric, 'name') else metric.__name__
   1076   else:

/opt/conda/envs/py-tensorflow_2_0_0/lib/python3.6/site-packages/tensorflow_core/python/keras/metrics.py in get(identifier)
   3060 def get(identifier):
   3061   if isinstance(identifier, dict):
-&gt; 3062     return deserialize(identifier)
   3063   elif isinstance(identifier, six.string_types):
   3064     return deserialize(str(identifier))

/opt/conda/envs/py-tensorflow_2_0_0/lib/python3.6/site-packages/tensorflow_core/python/keras/metrics.py in deserialize(config, custom_objects)
   3054       module_objects=globals(),
   3055       custom_objects=custom_objects,
-&gt; 3056       printable_module_name='metric function')
   3057 
   3058 

/opt/conda/envs/py-tensorflow_2_0_0/lib/python3.6/site-packages/tensorflow_core/python/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)
    303                 list(custom_objects.items())))
    304       with CustomObjectScope(custom_objects):
--&gt; 305         return cls.from_config(cls_config)
    306     else:
    307       # Then `cls` may be a function returning a class.

/opt/conda/envs/py-tensorflow_2_0_0/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer.py in from_config(cls, config)
    517         A layer instance.
    518     """
--&gt; 519     return cls(**config)
    520 
    521   def compute_output_shape(self, input_shape):

TypeError: __init__() missing 1 required positional argument: 'fn'
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ding-c3' date='2020-02-14T06:22:08Z'>
		&lt;denchmark-link:https://github.com/ding-c3&gt;@ding-c3&lt;/denchmark-link&gt;
 please check &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/30521&gt;this link&lt;/denchmark-link&gt;
 and let us know if you could resolve the issue.
		</comment>
		<comment id='2' author='ding-c3' date='2020-02-14T18:51:33Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 Thanks for getting back!
I don't think that link resolves my issue. Our use case is to load keras model from the model file for further training.
The workaround it provided is to set compile=False when calling load_model. It will cause loading of loss / optimizer / metrics to be skipped and therefore loaded model won't be able to be trained.
		</comment>
		<comment id='3' author='ding-c3' date='2020-02-19T23:53:55Z'>
		&lt;denchmark-link:https://github.com/ding-c3&gt;@ding-c3&lt;/denchmark-link&gt;
 I am not running into any error using this code below
&lt;denchmark-code&gt;# Compiling again with the same loss, optimizer but different metrics
model.compile(loss=model.loss, optimizer=model.optimizer, metrics=["accuracy"])

model.save("my_model.h5")
loaded = tf.keras.models.load_model("my_model.h5")
&lt;/denchmark-code&gt;

which means the problem is occuring during the deserialization of metrics
		</comment>
		<comment id='4' author='ding-c3' date='2020-02-19T23:59:17Z'>
		I believe this issue should be fixed soon, I have a change waiting to be reviewed.
		</comment>
		<comment id='5' author='ding-c3' date='2020-02-28T01:24:05Z'>
		&lt;denchmark-link:https://github.com/ding-c3&gt;@ding-c3&lt;/denchmark-link&gt;
 As mentioned by &lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;
 This issue was fixed recently. Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/7533cdc5cc01b747424f7397af8db775/36735.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
As it was resolved, I am closing this issue. Please feel free to reopen if I am mistaken. Thanks!
		</comment>
		<comment id='6' author='ding-c3' date='2020-02-28T01:24:07Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36735&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36735&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>