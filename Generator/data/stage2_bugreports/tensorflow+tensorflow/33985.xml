<bug id='33985' author='Cospel' open_date='2019-11-04T18:51:47Z' closed_time='2019-11-26T01:22:50Z'>
	<summary>Unable to get_layer by name on custom layer and lambda layer</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macos mohave
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): pip install tensorflow==2.0.0
TensorFlow version (use command below): pip install tensorflow==2.0.0
Python version: python3.7
Bazel version (if compiling from source):  -
GCC/Compiler version (if compiling from source): -
CUDA/cuDNN version: -
GPU model and memory: -

Describe the current behavior
get_layer raises exception
Describe the expected behavior
Should pass and not raise exception.
&lt;denchmark-code&gt;ValueError: No such layer: embeddings
&lt;/denchmark-code&gt;

Code to reproduce the issue
import tensorflow as tf
import tensorflow as tf

class L2NormalizeLayer(tf.keras.layers.Layer):
    def __init__(self, name="normalize", **kwargs):
        super(L2NormalizeLayer, self).__init__(name=name, **kwargs)

    def call(self, input):
        return tf.keras.backend.l2_normalize(input, axis=1)

    def get_config(self):
        config = super(L2NormalizeLayer, self).get_config()
        return config

shape = (224, 224, 3)

# functional model
base_model2 = tf.keras.applications.MobileNetV2(include_top=False, weights="imagenet", input_shape=shape)
inputs = tf.keras.Input(shape=shape, name="input")
x = base_model2(inputs)
x = tf.keras.layers.GlobalAveragePooling2D()(x)
x = tf.keras.layers.Dense(256, activation="relu")(x)
y = L2NormalizeLayer(name="embeddings")(x)
#y = tf.keras.layers.Lambda(lambda k: tf.keras.backend.l2_normalize(k, axis=1), name="embeddings")(x)
outputs = tf.keras.layers.Dense(2, activation="softmax", name="probs")(x)
model2 = tf.keras.Model(inputs=inputs, outputs=outputs)

# after training model i would like to load it and extract probs with embeddings
tf.keras.models.save_model(model2, "model.h5")
model_l2 = tf.keras.models.load_model("model.h5")

model_loaded = tf.keras.Model(
    inputs=model_l2.input, outputs=[model_l2.get_layer(layer_name).output for layer_name in ["probs", "embeddings"]]
)
Other info / logs
&lt;denchmark-code&gt;19:29:07.817639: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2019-11-04 19:29:07.832947: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x7fa8ada42530 executing computations on platform Host. Devices:
2019-11-04 19:29:07.832973: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): Host, Default Version
WARNING:tensorflow:No training configuration found in save file: the model was *not* compiled. Compile it manually.
Traceback (most recent call last):
  File "save2.py", line 36, in &lt;module&gt;
    inputs=model_l2.input, outputs=[model_l2.get_layer(layer_name).output for layer_name in ["probs", "embeddings"]]
  File "save2.py", line 36, in &lt;listcomp&gt;
    inputs=model_l2.input, outputs=[model_l2.get_layer(layer_name).output for layer_name in ["probs", "embeddings"]]
  File "/Users/michallukac/env/tf2/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/network.py", line 539, in get_layer
    raise ValueError('No such layer: ' + name)
ValueError: No such layer: embeddings
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Cospel' date='2019-11-05T06:19:39Z'>
		I have tried on colab with TF version 2.0, 2.1.0-dev20191103 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/604379b8a672a26e23f2cf0f05343ef5/untitled329.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='Cospel' date='2019-11-21T07:55:46Z'>
		Ok I think the problem is that y = L2NormalizeLayer(...) is not specified in the outputs of tf.keras.Model. Once I changed code to:
model2 = tf.keras.Model(inputs=inputs, outputs=[outputs, y])
everything pass. I don't know if this is intentional behavior, if so then you can close it now.
		</comment>
		<comment id='3' author='Cospel' date='2019-11-26T01:22:50Z'>
		&lt;denchmark-link:https://github.com/Cospel&gt;@Cospel&lt;/denchmark-link&gt;
 This is intended as the argument  is passed to both  and . So there are two outputs in this functional model.
I am closing this issue as it is resolved. Feel free to open a new issue if you encounter any other bugs/performance issues. Thanks!
		</comment>
		<comment id='4' author='Cospel' date='2019-11-26T01:22:52Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33985&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33985&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>