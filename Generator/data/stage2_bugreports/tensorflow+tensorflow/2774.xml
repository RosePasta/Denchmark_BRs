<bug id='2774' author='nikitakit' open_date='2016-06-10T03:11:33Z' closed_time='2016-06-16T01:37:45Z'>
	<summary>Poor numerics in CPU tf.multinomial</summary>
	<description>
The CPU implementation of tf.multinomial seems to have numerical underflow/overflow when logits are outside of a certain narrow range. The usable logit range on my system is about -88 to 88, which is unacceptably small for my use case (where the logits come from an automatically-trained hidden layer).
For example:
&lt;denchmark-code&gt;&gt;&gt;&gt; logits = np.array([[1000.]*5])
&gt;&gt;&gt; sess.run(tf.multinomial(logits, 10))
array([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]])
&lt;/denchmark-code&gt;

Note that the index 5 is out of range (which is the undocumented behavior used to signal an error condition). Expected behavior is to sample uniformly from [0, 4], such as in this workaround:
&lt;denchmark-code&gt;&gt;&gt;&gt; logits = np.array([[1000.]*5])
&gt;&gt;&gt; sess.run(tf.multinomial(tf.nn.log_softmax(logits), 10))
array([[2, 0, 4, 1, 0, 0, 2, 2, 2, 4]])
&lt;/denchmark-code&gt;

It's a similar story for negative logits:
&lt;denchmark-code&gt;&gt;&gt;&gt; logits = np.array([[-1000.]*5])
&gt;&gt;&gt; sess.run(tf.multinomial(logits, 10))
array([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]])
&gt;&gt;&gt; sess.run(tf.multinomial(tf.nn.log_softmax(logits), 10))
array([[2, 4, 3, 3, 3, 2, 2, 2, 3, 0]])
&lt;/denchmark-code&gt;

I think tf.multinomial should be fixed to accept a wider range of inputs. Or, if that's not possible e.g. due to speed tradeoffs, the workaround above should be noted in the documentation.
: tensorflow &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/845fb7ab77fae53b849894925c7d13c1b8918675&gt;845fb7a&lt;/denchmark-link&gt;
, Python 3, CPU only on Mac OSX.
	</description>
	<comments>
		<comment id='1' author='nikitakit' date='2016-06-10T21:43:58Z'>
		&lt;denchmark-link:https://github.com/concretevitamin&gt;@concretevitamin&lt;/denchmark-link&gt;
 Looks like  doesn't subtract off the maximum logit before taking exponentials.  Can you fix it to do that?  The undocumented error case is also bad; not sure where in the code it's doing that.
		</comment>
		<comment id='2' author='nikitakit' date='2016-06-13T02:18:56Z'>
		I'm looking into this.
		</comment>
		<comment id='3' author='nikitakit' date='2016-06-16T01:37:45Z'>
		I pushed a fix via commit &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/de6ce1de08ea97d599687fbbe5196ca4af5232ae&gt;de6ce1de08&lt;/denchmark-link&gt;
.  Please feel free to re-open if related issues come up.  Thanks!
		</comment>
		<comment id='4' author='nikitakit' date='2016-06-16T15:40:05Z'>
		&lt;denchmark-link:https://github.com/concretevitamin&gt;@concretevitamin&lt;/denchmark-link&gt;
 In future, please automatically close issues from the commit by saying "Fixes &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/2774&gt;#2774&lt;/denchmark-link&gt;
" or similar: &lt;denchmark-link:https://help.github.com/articles/closing-issues-via-commit-messages&gt;https://help.github.com/articles/closing-issues-via-commit-messages&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='nikitakit' date='2016-06-17T01:35:23Z'>
		Yep, if you look at my commit message, I included something similar but
slightly more complicated for Github to grasp ("fixes github issue
#????").  Will make it simpler next time :)
On Thu, Jun 16, 2016 at 11:40 PM, Geoffrey Irving &lt;denchmark-link:mailto:notifications@github.com&gt;notifications@github.com&lt;/denchmark-link&gt;

wrote:

@concretevitamin https://github.com/concretevitamin In future, please
automatically close issues from the commit by saying "Fixes #2774
#2774" or similar:
https://help.github.com/articles/closing-issues-via-commit-messages
â€”
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
#2774 (comment),
or mute the thread
https://github.com/notifications/unsubscribe/AAkLHpDHlnUsuzAfX927wAtVFFh1Ht2Lks5qMW5hgaJpZM4IyloD
.

		</comment>
		<comment id='6' author='nikitakit' date='2016-07-20T01:30:35Z'>
		This still occurs for Python 2, Ubuntu 14.04
		</comment>
		<comment id='7' author='nikitakit' date='2016-07-20T01:58:11Z'>
		&lt;denchmark-link:https://github.com/seansaito&gt;@seansaito&lt;/denchmark-link&gt;
 We'll need more information to be able to help, including the TensorFlow version.
		</comment>
		<comment id='8' author='nikitakit' date='2017-07-10T23:27:10Z'>
		The out of range index can be still produced, if the input is not finite.
Is it desired? Should it be documented?
Example:
&lt;denchmark-code&gt;&gt;&gt;&gt; sess.run(tf.multinomial([[1e1000] * 5], 10))
array([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]])
&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='nikitakit' date='2018-08-07T03:07:08Z'>
		Yeah, I met this problem, too. I'm doing sampling from my vocabulary distribution:
next_token = tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)
and the token sampled by multinomial is out of vocabulary.
		</comment>
		<comment id='10' author='nikitakit' date='2018-08-25T07:52:02Z'>
		Me too.
Simple way to reproduce:
import tensorflow as tf
import numpy as np
isess = tf.InteractiveSession()
dist = tf.multinomial([[np.inf, np.inf]], 1)
isess.run(dist) # outputs 2, instead of 0 or 1
Ubuntu 16.04, CPU tensorflow 1.9, python3.6, it also happens in python2.7,
		</comment>
	</comments>
</bug>