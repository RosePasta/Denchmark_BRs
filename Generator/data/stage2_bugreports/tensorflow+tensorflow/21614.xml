<bug id='21614' author='jmchen-g' open_date='2018-08-14T19:54:56Z' closed_time='2019-07-26T21:44:32Z'>
	<summary>Keras to estimator errors for RNNs</summary>
	<description>
It seems like a bug that the following model results in the following assert:
The model (simplified from seq2seq):
import tensorflow as tf

params = {
    'seq_len': 32,
    'vocab_size': 50,
    'emb_act_size': 32,
    'rnn_act_size': 64,
    'out_size': 16
}


def mfunc(params):
    inputs = tf.keras.layers.Input(shape=(50, ), dtype='int32')
    emb = tf.keras.layers.Embedding(params["vocab_size"],
                                    params["emb_act_size"])(inputs)
    lstm1, s_h, s_c = tf.keras.layers.LSTM(
        params["rnn_act_size"],
        return_sequences=True,
        return_state=True,
        implementation=2)(emb)
    lstm2 = tf.keras.layers.LSTM(
        params["rnn_act_size"], return_sequences=True)(
            lstm1, initial_state=[s_h, s_c])
    y = tf.keras.layers.Dense(params["out_size"], activation='softmax')(lstm2)
    model = tf.keras.Model(inputs, y)
    model.compile(optimizer='sgd', loss='categorical_crossentropy')
    return model

x = mfunc(params)
tf.keras.estimator.model_to_estimator(keras_model=x)
The assert we are hitting in TF 1.10:
Traceback (most recent call last):
  File "Downloads/tmp.py", line 30, in &lt;module&gt;
    tf.keras.estimator.model_to_estimator(keras_model=x)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/keras.py", line 548, in model_to_estimator
    keras_weights)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/keras.py", line 449, in _save_first_checkpoint
    custom_objects)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/keras.py", line 315, in _clone_and_build_model
    model = models.clone_model(keras_model, input_tensors=input_tensors)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/models.py", line 263, in clone_model
    return _clone_functional_model(model, input_tensors=input_tensors)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/models.py", line 168, in _clone_functional_model
    **kwargs))
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/recurrent.py", line 526, in __call__
    self._num_constants)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/recurrent.py", line 2590, in _standardize_args
    assert initial_state is None and constants is None
AssertionError
Here is the result of the environment capture script:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&lt;/denchmark-link&gt;

== cat /etc/issue ===============================================
Linux 97ddc7134519 4.9.93-linuxkit-aufs &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/1&gt;#1&lt;/denchmark-link&gt;
 SMP Wed Jun 6 16:55:56 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
VERSION="16.04.5 LTS (Xenial Xerus)"
VERSION_ID="16.04"
VERSION_CODENAME=xenial
== are we in docker =============================================
Yes
== compiler =====================================================
c++ (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
== uname -a =====================================================
Linux 97ddc7134519 4.9.93-linuxkit-aufs &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/1&gt;#1&lt;/denchmark-link&gt;
 SMP Wed Jun 6 16:55:56 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
== check pips ===================================================
numpy              1.14.5
protobuf           3.6.0
tensorflow         1.10.0
== check for virtualenv =========================================
False
== tensorflow import ============================================
tf.VERSION = 1.10.0
tf.GIT_VERSION = v1.10.0-0-g656e7a2b34
tf.COMPILER_VERSION = v1.10.0-0-g656e7a2b34
Sanity check: array([1], dtype=int32)
	</description>
	<comments>
		<comment id='1' author='jmchen-g' date='2018-08-15T08:13:56Z'>
		Thank you for your post. We noticed you have not filled out the following field in the issue template. Could you update them if they are relevant in your case, or leave them as N/A? Thanks.
Have I written custom code
OS Platform and Distribution
TensorFlow installed from
TensorFlow version
Bazel version
CUDA/cuDNN version
GPU model and memory
Exact command to reproduce
Mobile device
		</comment>
		<comment id='2' author='jmchen-g' date='2018-08-16T18:43:27Z'>
		I'm a colleague of &lt;denchmark-link:https://github.com/jmchen-g&gt;@jmchen-g&lt;/denchmark-link&gt;
, and can update the issue while he is away:
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):  Docker on Mac
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): docker image tensorflow/tensorflow:1.10.0-py3
TensorFlow version (use command below):
Python version: python 3
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce: See Below:

&lt;denchmark-code&gt;import tensorflow as tf

params = {
    'seq_len': 32,
    'vocab_size': 50,
    'emb_act_size': 32,
    'rnn_act_size': 64,
    'out_size': 16
}

def mfunc(params):
    inputs = tf.keras.layers.Input(shape=(50, ), dtype='int32')
    emb = tf.keras.layers.Embedding(params["vocab_size"],
                                    params["emb_act_size"])(inputs)
    lstm1, s_h, s_c = tf.keras.layers.LSTM(
        params["rnn_act_size"],
        return_sequences=True,
        return_state=True,
        implementation=2)(emb)
    lstm2 = tf.keras.layers.LSTM(
        params["rnn_act_size"], return_sequences=True)(
            lstm1, initial_state=[s_h, s_c])
    y = tf.keras.layers.Dense(params["out_size"], activation='softmax')(lstm2)
    model = tf.keras.Model(inputs, y)
    model.compile(optimizer='sgd', loss='categorical_crossentropy')
    return model

x = mfunc(params)
tf.keras.estimator.model_to_estimator(keras_model=x)
&lt;/denchmark-code&gt;

Running this yields the following trace:
&lt;denchmark-code&gt;File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/keras.py", line 548, in model_to_estimator
    keras_weights)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/keras.py", line 449, in _save_first_checkpoint
    custom_objects)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/keras.py", line 315, in _clone_and_build_model
    model = models.clone_model(keras_model, input_tensors=input_tensors)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/models.py", line 263, in clone_model
    return _clone_functional_model(model, input_tensors=input_tensors)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/models.py", line 168, in _clone_functional_model
    **kwargs))
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/recurrent.py", line 526, in __call__
    self._num_constants)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/recurrent.py", line 2590, in _standardize_args
    assert initial_state is None and constants is None
AssertionError
&lt;/denchmark-code&gt;

Here is some more system diag info from running tf_env_collect.sh
&lt;denchmark-code&gt;== cat /etc/issue ===============================================
Linux 97ddc7134519 4.9.93-linuxkit-aufs #1 SMP Wed Jun 6 16:55:56 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
VERSION="16.04.5 LTS (Xenial Xerus)"
VERSION_ID="16.04"
VERSION_CODENAME=xenial

== are we in docker =============================================
Yes

== compiler =====================================================
c++ (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


== uname -a =====================================================
Linux 97ddc7134519 4.9.93-linuxkit-aufs #1 SMP Wed Jun 6 16:55:56 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux

== check pips ===================================================
numpy              1.14.5
protobuf           3.6.0
tensorflow         1.10.0

== check for virtualenv =========================================
False

== tensorflow import ============================================
tf.VERSION = 1.10.0
tf.GIT_VERSION = v1.10.0-0-g656e7a2b34
tf.COMPILER_VERSION = v1.10.0-0-g656e7a2b34
Sanity check: array([1], dtype=int32)

== env ==========================================================
LD_LIBRARY_PATH is unset
DYLD_LIBRARY_PATH is unset

== nvidia-smi ===================================================
tf_env_collect.sh: line 105: nvidia-smi: command not found

== cuda libs  ===================================================
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='jmchen-g' date='2018-08-17T10:55:17Z'>
		Thank you for providing such a clear minimal case.  cc &lt;denchmark-link:https://github.com/tanzhenyu&gt;@tanzhenyu&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/pavithrasv&gt;@pavithrasv&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
 could you take a look?
		</comment>
		<comment id='4' author='jmchen-g' date='2018-08-19T15:49:33Z'>
		Also &lt;denchmark-link:https://github.com/qlzh727&gt;@qlzh727&lt;/denchmark-link&gt;
 for recurrent cells.
		</comment>
		<comment id='5' author='jmchen-g' date='2018-08-19T15:50:26Z'>
		And &lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;
 because this is happening in clone_and_build
		</comment>
		<comment id='6' author='jmchen-g' date='2018-08-20T17:54:59Z'>
		Probably is a bug in the model_to_estimator.
Btw, the input of the model is not constructed correctly, namely the input shape.
The input should be in shape (batch, input_length), which should be (None, seq_len) in your case. The line tf.keras.layers.Input(shape=(50, ) will cause the emb to return (None, 50, 32) and the expected input to LSTM should be (None, 32, 50) "(batch, timestep, vocab)".
		</comment>
		<comment id='7' author='jmchen-g' date='2018-08-20T19:07:56Z'>
		&lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/tanzhenyu&gt;@tanzhenyu&lt;/denchmark-link&gt;
, I did some debug and seems that when the lstm2 layer is loaded, the initial_state is showing up both in input as well as initial_state. Since the LSTM layer only accept one input tensor (batch, timestep, vocab), that's why it throws exception.
Do u have any insight about why the initial_state is picked up both as part of the input and also the kwarg ["initial_state"]?
		</comment>
		<comment id='8' author='jmchen-g' date='2018-09-06T20:06:24Z'>
		Hi &lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/tanzhenyu&gt;@tanzhenyu&lt;/denchmark-link&gt;
 Any update on this please? Thanks.
		</comment>
		<comment id='9' author='jmchen-g' date='2018-09-08T02:05:51Z'>
		Adding &lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
, as the error also appears when cloning the model using models.clone_model.
		</comment>
		<comment id='10' author='jmchen-g' date='2018-10-29T12:02:59Z'>
		I've run into the same issue, and it seem like  _clone_functional_model ends up passing the initial state as both inputs and as a keyword argument to the call/_standardize_args method of the Recurrent layer. (1)
A nasty workaround for us was to comment out the code extracting the initial state from the inputs as follows, since the shape of the state in the input list was not complete, but it was in the kwarg:
   def _standardize_args(...): if isinstance(inputs, list): # assert initial_state is None and constants is None # if num_constants is not None: #   constants = inputs[-num_constants:] #   inputs = inputs[:-num_constants] # if len(inputs) &gt; 1: #   initial_state = inputs[1:] inputs = inputs[0]
...
(1) in the call to standardize_args when converting to an estimator I get this:
`inputs: [&lt;tf.Tensor 'time_distributed_7/transpose_1:0' shape=(1, ?, 320) dtype=float32&gt;, &lt;tf.Tensor 'input_state_h_2/input_state_h/Identity:0' shape=(?,) dtype=float32&gt;, &lt;tf.Tensor 'input_state_c_2/input_state_c/Identity:0' shape=(?,) dtype=float32&gt;]
initial_state kwarg: [&lt;tf.Tensor 'input_state_h:0' shape=(1, 100) dtype=float32&gt;, &lt;tf.Tensor 'input_state_c:0' shape=(1, 100) dtype=float32&gt;]`
I've not had time to debug where this happens, but I hope it helps someone.
		</comment>
		<comment id='11' author='jmchen-g' date='2019-05-27T18:47:34Z'>
		Can anyone help with this?
		</comment>
		<comment id='12' author='jmchen-g' date='2019-05-28T16:02:33Z'>
		Can you call the model with some input and see it works before converting to the estimator? I suspect this is because initial_state is not passed to the first LSTM.
		</comment>
		<comment id='13' author='jmchen-g' date='2019-07-26T21:44:32Z'>
		This is fixed with latest tf-nightly version '1.15.0-dev20190726'. Thanks!
		</comment>
		<comment id='14' author='jmchen-g' date='2019-07-26T21:44:34Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=21614&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=21614&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>