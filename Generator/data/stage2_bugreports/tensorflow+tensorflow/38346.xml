<bug id='38346' author='sonu1-p' open_date='2020-04-08T07:53:12Z' closed_time='2020-09-25T20:54:05Z'>
	<summary>Not able to load a tf.keras model</summary>
	<description>
System information

Have I written custom code: Yes
OS Platform and Distribution: MacOs Mojave version 10.14.6
Mobile device if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): binary
TensorFlow version: v2.2.0-rc1-34-ge6e5d6df2a 2.2.0-rc2
Python version: - Python 3.6.3
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: - GPU model and memory:N/A

Describe the current behavior
For the below model(using tf.signal.frame), saving to keras format works, but when trying to load it, we get the following error:
&lt;denchmark-code&gt;2020-04-08 00:38:22.847450: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2020-04-08 00:38:22.865528: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x13ce3feb0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2020-04-08 00:38:22.865552: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
Traceback (most recent call last):
  File "/Users/spareek/venv/lib/python3.6/site-packages/tensorflow/python/framework/ops.py", line 1654, in _create_c_op
    c_op = pywrap_tf_session.TF_FinishOperation(op_desc)
tensorflow.python.framework.errors_impl.InvalidArgumentError: Inconsistent values for attr 'Tshape' DT_FLOAT vs. DT_INT32 while building NodeDef 'tf_op_layer_Reshape/Reshape' using Op&lt;name=Reshape; signature=tensor:T, shape:Tshape -&gt; output:T; attr=T:type; attr=Tshape:type,default=DT_INT32,allowed=[DT_INT32, DT_INT64]&gt;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "test.py", line 8, in &lt;module&gt;
    keras_model = tf.keras.models.load_model("test.h5")
  File "/Users/spareek/venv/lib/python3.6/site-packages/tensorflow/python/keras/saving/save.py", line 184, in load_model
    return hdf5_format.load_model_from_hdf5(filepath, custom_objects, compile)
  File "/Users/spareek/venv/lib/python3.6/site-packages/tensorflow/python/keras/saving/hdf5_format.py", line 170, in load_model_from_hdf5
    custom_objects=custom_objects)
  File "/Users/spareek/venv/lib/python3.6/site-packages/tensorflow/python/keras/saving/model_config.py", line 55, in model_from_config
    return deserialize(config, custom_objects=custom_objects)
  File "/Users/spareek/venv/lib/python3.6/site-packages/tensorflow/python/keras/layers/serialization.py", line 109, in deserialize
    printable_module_name='layer')
  File "/Users/spareek/venv/lib/python3.6/site-packages/tensorflow/python/keras/utils/generic_utils.py", line 373, in deserialize_keras_object
    list(custom_objects.items())))
  File "/Users/spareek/venv/lib/python3.6/site-packages/tensorflow/python/keras/engine/network.py", line 982, in from_config
    config, custom_objects)
  File "/Users/spareek/venv/lib/python3.6/site-packages/tensorflow/python/keras/engine/network.py", line 2024, in reconstruct_from_config
    process_node(layer, node_data)
  File "/Users/spareek/venv/lib/python3.6/site-packages/tensorflow/python/keras/engine/network.py", line 1972, in process_node
    output_tensors = layer(input_tensors, **kwargs)
  File "/Users/spareek/venv/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py", line 922, in __call__
    outputs = call_fn(cast_inputs, *args, **kwargs)
  File "/Users/spareek/venv/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py", line 2830, in call
    return self._make_op(inputs)
  File "/Users/spareek/venv/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py", line 2852, in _make_op
    c_op = ops._create_c_op(graph, node_def, inputs, control_inputs=[])
  File "/Users/spareek/venv/lib/python3.6/site-packages/tensorflow/python/framework/ops.py", line 1657, in _create_c_op
    raise ValueError(str(e))
ValueError: Inconsistent values for attr 'Tshape' DT_FLOAT vs. DT_INT32 while building NodeDef 'tf_op_layer_Reshape/Reshape' using Op&lt;name=Reshape; signature=tensor:T, shape:Tshape -&gt; output:T; attr=T:type; attr=Tshape:type,default=DT_INT32,allowed=[DT_INT32, DT_INT64]&gt;
&lt;/denchmark-code&gt;

Describe the expected behavior
Model loading should work fine.
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
&lt;denchmark-code&gt;import tensorflow as tf
  
x = tf.keras.Input(shape=(None, 12), dtype="float32", name="input")
x_frequency = tf.signal.frame(x, 2, 1, axis=1)
model = tf.keras.Model(inputs=x, outputs=x_frequency, name="test")
model.save("test.h5")

keras_model = tf.keras.models.load_model("test.h5")
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='sonu1-p' date='2020-04-08T08:22:47Z'>
		I think the issue is coming due to this line - &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/v2.1.0/tensorflow/python/ops/signal/shape_ops.py#L127&gt;https://github.com/tensorflow/tensorflow/blob/v2.1.0/tensorflow/python/ops/signal/shape_ops.py#L127&lt;/denchmark-link&gt;

I can reproduce it with this too:
&lt;denchmark-code&gt;import tensorflow as tf
  
x = tf.keras.Input(shape=(), dtype="float32", name="input")
x_reshape = tf.reshape(x, [])
model = tf.keras.Model(inputs=x, outputs=x_reshape, name="test1")
model.save("test1.h5")

keras_model = tf.keras.models.load_model("test1.h5")
&lt;/denchmark-code&gt;

I guess due to empty shape TF is getting confused whether the shape is of type float(same type as input) or int which is expected?
		</comment>
		<comment id='2' author='sonu1-p' date='2020-04-08T12:44:32Z'>
		i have replicated this issue, please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/92782091ec5a43be75b9a78c020b764b/untitled131.ipynb&gt;gist here&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='sonu1-p' date='2020-04-10T07:00:15Z'>
		I tried to produce the summary of model "test.h5". However the model isnt getting loaded and is giving the error because its an empty model with zero parameters.
Model: "test"
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;Layer (type)                    Output Shape         Param #     Connected to&lt;/denchmark-h&gt;

input (InputLayer)              [(None, None, 12)]   0
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_Shape_14 (TensorFlo [(3,)]               0           input[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_split_7 (TensorFlow [(1,), (1,), (1,)]   0           tf_op_layer_Shape_14[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_Reshape_28 (TensorF [()]                 0           tf_op_layer_split_7[0][1]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_Sub_7 (TensorFlowOp [()]                 0           tf_op_layer_Reshape_28[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_FloorDiv_14 (Tensor [()]                 0           tf_op_layer_Sub_7[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_FloorDiv_15 (Tensor [()]                 0           tf_op_layer_Reshape_28[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_AddV2_14 (TensorFlo [()]                 0           tf_op_layer_FloorDiv_14[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_ZerosLike_7 (Tensor [(3,)]               0           tf_op_layer_Shape_14[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_Mul_14 (TensorFlowO [()]                 0           tf_op_layer_FloorDiv_15[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_Maximum_7 (TensorFl [()]                 0           tf_op_layer_AddV2_14[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_concat_21/values_1  [(1,)]               0           tf_op_layer_Mul_14[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_Shape_15 (TensorFlo [(1,)]               0           tf_op_layer_ZerosLike_7[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_Range_7 (TensorFlow [(None,)]            0           tf_op_layer_Maximum_7[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_concat_21 (TensorFl [(3,)]               0           tf_op_layer_split_7[0][0]
tf_op_layer_concat_21/values_1[0]
tf_op_layer_split_7[0][2]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_Fill_7 (TensorFlowO [(3,)]               0           tf_op_layer_Shape_15[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_concat_22/values_1  [(2,)]               0           tf_op_layer_FloorDiv_15[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_Mul_15 (TensorFlowO [(None,)]            0           tf_op_layer_Range_7[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_Reshape_30/shape (T [(2,)]               0           tf_op_layer_Maximum_7[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_StridedSlice_7 (Ten [(None, None, None)] 0           input[0][0]
tf_op_layer_ZerosLike_7[0][0]
tf_op_layer_concat_21[0][0]
tf_op_layer_Fill_7[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_concat_22 (TensorFl [(4,)]               0           tf_op_layer_split_7[0][0]
tf_op_layer_concat_22/values_1[0]
tf_op_layer_split_7[0][2]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_Reshape_30 (TensorF [(None, 1)]          0           tf_op_layer_Mul_15[0][0]
tf_op_layer_Reshape_30/shape[0][0
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_Reshape_29 (TensorF [(None, None, 1, Non 0           tf_op_layer_StridedSlice_7[0][0]
tf_op_layer_concat_22[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_AddV2_15 (TensorFlo [(None, 2)]          0           tf_op_layer_Reshape_30[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_concat_23/values_1  [(2,)]               0           tf_op_layer_Maximum_7[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_GatherV2_7 (TensorF [(None, None, 2, 1,  0           tf_op_layer_Reshape_29[0][0]
tf_op_layer_AddV2_15[0][0]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

tf_op_layer_concat_23 (TensorFl [(4,)]               0           tf_op_layer_split_7[0][0]
tf_op_layer_concat_23/values_1[0]
tf_op_layer_split_7[0][2]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;tf_op_layer_Reshape_31 (TensorF [(None, None, 2, 12) 0           tf_op_layer_GatherV2_7[0][0]
tf_op_layer_concat_23[0][0]&lt;/denchmark-h&gt;

Total params: 0
Trainable params: 0
Non-trainable params: 0
SOLUTION

Adding some parameters can resolve the issue
Try this syntax to save your model-
import tensorflow as tf

x = tf.keras.Input(shape=(None, 12), dtype="float32", name="input")
x_frequency = tf.signal.frame(x, 2, 1, axis=1)
model = tf.keras.Model(inputs=x, outputs=x_frequency, name="test")
model= tf.keras.models.Sequential([model,tf.keras.layers.Flatten(input_shape=(None,12))])
tf.saved_model.save(model, "test1.h5")
keras_model = tf.saved_model.load("test1.h5")
		</comment>
		<comment id='4' author='sonu1-p' date='2020-04-10T09:14:47Z'>
		Thanks for looking into this. My original model does have trainable params but I still get the same error. I will try the syntax provided by you and update.
		</comment>
		<comment id='5' author='sonu1-p' date='2020-04-10T09:39:01Z'>
		Tried out the work around suggested. It  seems to work for this case:
x = tf.keras.Input(shape=(None, 12), dtype="float32", name="input")
x_frequency = tf.signal.frame(x, 2, 1, axis=1)
model = tf.keras.Model(inputs=x, outputs=x_frequency, name="test")
model= tf.keras.models.Sequential([model,tf.keras.layers.Flatten(input_shape=(None,12))])
But can you please help me understand what the last line is exactly doing and how it resolves the issue?
It does not seem to work for the second example:
import tensorflow as tf
x = tf.keras.Input(shape=(1), dtype="int32", name="input")
x_reshape = tf.reshape(x, [])
model = tf.keras.Model(inputs=x, outputs=x_reshape, name="test1")
model= tf.keras.models.Sequential([model,tf.keras.layers.Flatten(input_shape=(1))])
model.save("test6.h5")
keras_model = tf.keras.models.load_model("test6.h5")
Maybe I am doing something wrong?
		</comment>
		<comment id='6' author='sonu1-p' date='2020-04-10T17:02:24Z'>
		There's an issue when reshape is called with an empty list as the shape. I can't think of a workaround but looking into a way to fix this.
		</comment>
		<comment id='7' author='sonu1-p' date='2020-09-12T01:11:09Z'>
		I have what appears to be the same or related issue.  I've reduced this down to a very simple case.  My problem is I don't understand the workaround stated above.
My code:
&lt;denchmark-code&gt;DNN_model = Sequential()
DNN_model.add(Dense(units = 1, activation = 'elu'))
DNN_model.add(Dense(units = 10, activation = 'elu'))
DNN_model.add(Dense(units = 1))
#
DNN_model.compile(loss = MeanSquaredError())
#
DNN_model.fit(np.array(x), np.array(y),
              epochs = 25,
              verbose = 1)
#
DNN_model.save('keras_parallel_' + ts() + str(np.random.randint(1e8, 9e8)) + '.hdf5')
&lt;/denchmark-code&gt;

In the above the ts() and the random number just generatre unique signatures for the file name.
An example file is:
keras_parallel_2020-09-11_18_41_27296955088.hdf5
If I then use tensorflow.keras.models.load_model('keras_parallel_2020-09-11_18_41_27296955088.hdf5') I get:
&lt;denchmark-code&gt;load_model('keras_parallel_2020-09-11_18_41_27296955088.hdf5')
Traceback (most recent call last):

  File "&lt;ipython-input-63-5890c3f6cf58&gt;", line 1, in &lt;module&gt;
    load_model('keras_parallel_2020-09-11_18_41_27296955088.hdf5')

  File "C:\Users\bbate\Miniconda3\envs\keras-gpu-4\lib\site-packages\tensorflow_core\python\keras\saving\save.py", line 146, in load_model
    return hdf5_format.load_model_from_hdf5(filepath, custom_objects, compile)

  File "C:\Users\bbate\Miniconda3\envs\keras-gpu-4\lib\site-packages\tensorflow_core\python\keras\saving\hdf5_format.py", line 168, in load_model_from_hdf5
    custom_objects=custom_objects)

  File "C:\Users\bbate\Miniconda3\envs\keras-gpu-4\lib\site-packages\tensorflow_core\python\keras\saving\model_config.py", line 55, in model_from_config
    return deserialize(config, custom_objects=custom_objects)

  File "C:\Users\bbate\Miniconda3\envs\keras-gpu-4\lib\site-packages\tensorflow_core\python\keras\layers\serialization.py", line 106, in deserialize
    printable_module_name='layer')

  File "C:\Users\bbate\Miniconda3\envs\keras-gpu-4\lib\site-packages\tensorflow_core\python\keras\utils\generic_utils.py", line 303, in deserialize_keras_object
    list(custom_objects.items())))

  File "C:\Users\bbate\Miniconda3\envs\keras-gpu-4\lib\site-packages\tensorflow_core\python\keras\engine\sequential.py", line 380, in from_config
    model.build(build_input_shape)

  File "C:\Users\bbate\Miniconda3\envs\keras-gpu-4\lib\site-packages\tensorflow_core\python\keras\engine\sequential.py", line 260, in build
    super(Sequential, self).build(input_shape)

  File "C:\Users\bbate\Miniconda3\envs\keras-gpu-4\lib\site-packages\tensorflow_core\python\keras\engine\network.py", line 682, in build
    self.call(x, **kwargs)

  File "C:\Users\bbate\Miniconda3\envs\keras-gpu-4\lib\site-packages\tensorflow_core\python\keras\engine\sequential.py", line 281, in call
    outputs = layer(inputs, **kwargs)

  File "C:\Users\bbate\Miniconda3\envs\keras-gpu-4\lib\site-packages\tensorflow_core\python\keras\engine\base_layer.py", line 737, in __call__
    self.name)

  File "C:\Users\bbate\Miniconda3\envs\keras-gpu-4\lib\site-packages\tensorflow_core\python\keras\engine\input_spec.py", line 193, in assert_input_compatibility
    str(x.shape.as_list()))

ValueError: Input 0 of layer dense_33 is incompatible with the layer: : expected min_ndim=2, found ndim=1. Full shape received: [None]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='8' author='sonu1-p' date='2020-09-12T19:25:44Z'>
		
I have what appears to be the same or related issue. I've reduced this down to a very simple case.

Update:
This was solved by changing the input array passed to the model:
&lt;denchmark-code&gt;np.array(x).reshape(-1, 1)
&lt;/denchmark-code&gt;

Although the model trains in both cases, the saved model cannot be loaded in the case where the array is not explicitly 2-d.
		</comment>
		<comment id='9' author='sonu1-p' date='2020-09-18T00:06:57Z'>
		&lt;denchmark-link:https://github.com/sonu1-p&gt;@sonu1-p&lt;/denchmark-link&gt;
 Looks like this was resolved in recent . I am not able to reproduce the loading issue with . Please take a look at the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/6ee54960bcb6491bc3a886f9d9879ee8/untitled131.ipynb&gt;gist here&lt;/denchmark-link&gt;

Please verify once and close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='10' author='sonu1-p' date='2020-09-25T20:49:43Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='11' author='sonu1-p' date='2020-09-25T20:54:05Z'>
		Closing this issue as it was resolved in recent tf-nightly. Please feel free to reopen if I am mistaken. Thanks!
		</comment>
		<comment id='12' author='sonu1-p' date='2020-09-25T20:54:07Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38346&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38346&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>