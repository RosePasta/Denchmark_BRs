<bug id='43824' author='scd75' open_date='2020-10-06T16:17:27Z' closed_time='2020-10-09T17:19:47Z'>
	<summary>Keras way of auto-naming layers triggers a naming issues when loading an existing model, and slicing its output</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.3.1
Python version: 3.7

Describe the current behavior
When adding a strided_slice layer using "numpy-style" syntax (eg [: , :....]), Keras auto-names this layer "tf_op_layer_strided_slice_{i}", incrementing i every time such layer is created.
However, when opening an already-existing model, without creating any layer in the session, i restarts at 0. Hence, when adding at strided_slice operation at the end of the model, an error is triggered as the model now has 2 layers with the same name "tf_op_layer_strided_slice"
PS: i cannot use the explicit tf.strided_slice layer with naming, as it does not have the same "shape-inference" capabilities as numpy-style slicing
Describe the expected behavior
auto-naming shall carry on incrementing from all known layer in the session, whether they have been created or loaded from a model file.
Standalone code to reproduce the issue
Run this code first with initial_builing = True, then False
&lt;denchmark-code&gt;import tensorflow as tf

initial_builing = False
model_loading = True

if initial_builing:

    layer1 = tf.keras.Input((1,),)
    layer2 = tf.keras.layers.Dense(1)

    model_output = layer2(layer1)[:,:-1]

    model = tf.keras.Model(layer1, model_output)
    model.summary()
    model.save('testmodel')

if model_loading:
    model = tf.keras.models.load_model('testmodel')
    model = tf.keras.Model(model.inputs, model.layers[-1].output[:,:-1])
&lt;/denchmark-code&gt;

Other info / logs
&lt;denchmark-code&gt;Exception has occurred: ValueError
The name "tf_op_layer_strided_slice" is used 2 times in the model. All layer names should be unique.
  File "C:\tests_v2.py", line 19, in &lt;module&gt;
    model = tf.keras.Model(model.inputs, model.layers[-1].output[:,:-1])
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='scd75' date='2020-10-06T19:36:01Z'>
		I  cannot reproduce this on Colab.
		</comment>
		<comment id='2' author='scd75' date='2020-10-06T22:10:30Z'>
		you have to first run with (to build the model)
initial_builing = True
then run a second time (to only load the model)
initial_builing = False
		</comment>
		<comment id='3' author='scd75' date='2020-10-06T22:11:24Z'>
		
you have to first run with (to build the model)
initial_builing = True
then run a second time (to only load the model)
initial_builing = False

Yes
		</comment>
		<comment id='4' author='scd75' date='2020-10-07T06:32:55Z'>
		&lt;denchmark-link:https://github.com/scd75&gt;@scd75&lt;/denchmark-link&gt;

I have tried in colab with TF version 2.3.1 and i am not seeing any issue.Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/204cabefa50b64d006a6fb90acb94c14/untitled428.ipynb&gt;here&lt;/denchmark-link&gt;
.Please, correct me if i am doing something wrong.Thanks!
		</comment>
		<comment id='5' author='scd75' date='2020-10-07T07:58:02Z'>
		I think that since you are running on jupyter, the variables stay in the cache between the 2 cells. Can you try relaunching the Google colab environment between the 2 executions ? to make sure the model is loaded purely from scratch ?
Here is what I get on your gist when doing so (eg. running the first cell, relaunching the environment, then running the 2nd cell)
&lt;denchmark-code&gt;WARNING:tensorflow:No training configuration found in save file, so the model was *not* compiled. Compile it manually.
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-1-570ad4959fa8&gt; in &lt;module&gt;()
     17 if model_loading:
     18     model = tf.keras.models.load_model('testmodel')
---&gt; 19     model = tf.keras.Model(model.inputs, model.layers[-1].output[:,:-1])

5 frames
/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/functional.py in _map_graph_network(inputs, outputs)
    940     if all_names.count(name) != 1:
    941       raise ValueError('The name "' + name + '" is used ' +
--&gt; 942                        str(all_names.count(name)) + ' times in the model. '
    943                        'All layer names should be unique.')
    944   return network_nodes, nodes_by_depth, layers, layers_by_depth

ValueError: The name "tf_op_layer_strided_slice" is used 2 times in the model. All layer names should be unique.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='scd75' date='2020-10-07T09:52:46Z'>
		Ok I've tried with &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/43841&gt;#43841&lt;/denchmark-link&gt;
 but I don't know if it will have side effects. Let's wait for a review.
		</comment>
		<comment id='7' author='scd75' date='2020-10-07T20:51:07Z'>
		&lt;denchmark-link:https://github.com/tomerk&gt;@tomerk&lt;/denchmark-link&gt;
 you can reproduce on Colab with:
&lt;denchmark-code&gt;!pip install tf-nightly-cpu
import tensorflow as tf
import gc 

initial_builing = True
model_loading = True

if initial_builing:

    layer1 = tf.keras.Input((1,),)
    layer2 = tf.keras.layers.Dense(1)

    model_output = layer2(layer1)[:,:-1]

    model = tf.keras.Model(layer1, model_output)
    model.summary()
    model.save('testmodel')
del model, model_output
tf.keras.backend.clear_session()
gc.collect()
if model_loading:
    model = tf.keras.models.load_model('testmodel')
    model = tf.keras.Model(model.inputs, model.layers[-1].output[:,:-1])
&lt;/denchmark-code&gt;

		</comment>
		<comment id='8' author='scd75' date='2020-10-07T21:13:03Z'>
		Hmm okay that's surprising to me that it still happens in the nightlies, because the name-gen for op layers should follow similar logic as for other layers. I'll take a look.
		</comment>
		<comment id='9' author='scd75' date='2020-10-07T21:21:13Z'>
		&lt;denchmark-link:https://github.com/tomerk&gt;@tomerk&lt;/denchmark-link&gt;
 Is name in  that land in  already autoincrement/unique?
		</comment>
		<comment id='10' author='scd75' date='2020-10-07T21:21:55Z'>
		So, I've confirmed that this is a general saving/loading issue with the auto-naming layers whenever adding any layer after loading the model not just when slicing the output. (I repro'd it w/ e.g. another dense layer at the end instead of slicing.)
I'll go ahead and escalate this because this seems like a pretty serious issue.
		</comment>
		<comment id='11' author='scd75' date='2020-10-07T21:25:44Z'>
		&lt;denchmark-link:https://github.com/tomerk&gt;@tomerk&lt;/denchmark-link&gt;
 So can I close &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/43841&gt;#43841&lt;/denchmark-link&gt;
 or do you have any hints for change that PR?
		</comment>
		<comment id='12' author='scd75' date='2020-10-07T21:27:54Z'>
		yeah that pr won't fix this problem. We'll have to fix either the save/load code or the backend unique_object_name code or both.
		</comment>
		<comment id='13' author='scd75' date='2020-10-07T21:31:47Z'>
		&lt;denchmark-link:https://github.com/tomerk&gt;@tomerk&lt;/denchmark-link&gt;
 Let me know If you have any pinpoint I could try to modify that PR if you are out of bandwidth.
		</comment>
		<comment id='14' author='scd75' date='2020-10-07T22:32:20Z'>
		I have a tentative fix ready internally. Once it's submitted it should get synced out to github pretty quickly.
		</comment>
		<comment id='15' author='scd75' date='2020-10-09T17:19:44Z'>
		Okay, this should now be working in the nightlies.
The fix in commit &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/62d414ba034ae82f863b4f8c91bdb463426feae0&gt;62d414b&lt;/denchmark-link&gt;
 works by adding any names seen during layer creation to an avoid-list that is used when generating names for auto-gen'd op layers. Note that we  do this for all layers (even though auto-naming can run into name collisions for other layers as well), because:

it would have the practical affect of changing actual layer names when people do transfer learning w/ a loaded model as a layer in their outer model. This would break a lot of tf1-style name-based checkpoint loading and model manipulation code.
for layers other than tf op layers, users can explicitly pass a name if needed to get around accidental name collisions, so it's not as big of a problem as for auto-gen'd op layers.

		</comment>
		<comment id='16' author='scd75' date='2020-10-09T17:19:48Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43824&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43824&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='17' author='scd75' date='2020-10-09T18:05:07Z'>
		&lt;denchmark-link:https://github.com/tomerk&gt;@tomerk&lt;/denchmark-link&gt;
 I've a question.  in not as  with  key (As PER_GRAPH in the name). Is it ok that it is global?
		</comment>
		<comment id='18' author='scd75' date='2020-10-15T21:11:25Z'>
		&lt;denchmark-link:https://github.com/tomerk&gt;@tomerk&lt;/denchmark-link&gt;
 Can you clarify?
		</comment>
		<comment id='19' author='scd75' date='2020-10-15T21:20:44Z'>
		The per-graph stuff is primarily legacy-compatibility. The new op layers and the OBSERVED_NAMES set are only used in an eager-first tf2 setting, so it doesn't need special graph-specific logic. A lot of the graph-specific logic in backend has been prone to be fairly buggy and prone to error, which is why I try to avoid it when working on things that aren't needed in tf v1 graph compatibility.
		</comment>
		<comment id='20' author='scd75' date='2020-10-15T21:43:08Z'>
		&lt;denchmark-link:https://github.com/tomerk&gt;@tomerk&lt;/denchmark-link&gt;
 Thank you for exposing some history
		</comment>
	</comments>
</bug>