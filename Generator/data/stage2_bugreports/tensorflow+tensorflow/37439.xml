<bug id='37439' author='xiaoyangnihao' open_date='2020-03-09T10:14:52Z' closed_time='2020-03-17T20:49:45Z'>
	<summary>TypeError: '_UserObject' object is not callable,  why tf.saved_model.load() failed?</summary>
	<description>
System information

TensorFlow installed from (source or
binary): - TensorFlow version (use command below): 2.1.0
Python version: 3.7.4

Describe the current behavior
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "C:/Pyfile/tensorflow2.X/load_model.py", line 12, in &lt;module&gt;
    print(model(tf.random.normal((1, 3))))
TypeError: '_UserObject' object is not callable
&lt;/denchmark-code&gt;

Describe the expected behavior
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
&lt;denchmark-code&gt;import os
import tensorflow as tf

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

class Model(tf.keras.Model):
    def __init__(self):
        super(Model, self).__init__()
        self.d = tf.keras.layers.Dense(2)

    def call(self, x, training=True, mask=None):
        return self.d(x)

model = Model()

# high-level api
# model.predict(tf.random.normal((2, 3)))
# model.save("save/high", save_format="tf")

# low-level api
tf.saved_model.save(model, 'save/low')

---------------------------------------------

import os
import tensorflow as tf

# high-level api
# model = tf.keras.models.load_model('save/high')

# low-level api
model = tf.saved_model.load('save/low')

print(model(tf.random.normal((1, 3))))   #  error!!!
&lt;/denchmark-code&gt;

If I user the high-level api to save and load, it runs successfully. If I use tf.saved_mode.save()，it can save successfully with warning
'''
WARNING:tensorflow:Skipping full serialization of Keras model &lt;main.Model object at 0x0000028C0515F6D8&gt;, because its inputs are not defined.
2020-03-09 18:20:37.304479: W tensorflow/python/util/util.cc:319] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.
WARNING:tensorflow:Skipping full serialization of Keras layer &lt;tensorflow.python.keras.layers.core.Dense object at 0x0000028C1CB87CC0&gt;, because it is not built.
'''
then load failed, So what does  '_UserObject' object is not callable mean?  How can I fix this, thanks for any help
	</description>
	<comments>
		<comment id='1' author='xiaoyangnihao' date='2020-03-09T12:54:10Z'>
		&lt;denchmark-link:https://github.com/xiaoyangnihao&gt;@xiaoyangnihao&lt;/denchmark-link&gt;
,
On running the above code, I got an error stating . Please find the gist of it &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/0e172b1fa3c2202b97ea6978ec78a304/37439.ipynb&gt;here&lt;/denchmark-link&gt;
.
In order to expedite the trouble-shooting process, could you please provide the complete code to reproduce the issue reported here. Thanks!
		</comment>
		<comment id='2' author='xiaoyangnihao' date='2020-03-09T12:57:43Z'>
		
@xiaoyangnihao,
On running the above code, I got an error stating NameError: name 'model' is not defined. Please find the gist of it here.
In order to expedite the trouble-shooting process, could you please provide the complete code to reproduce the issue reported here. Thanks!

Sorry for missing some codes. I update the description above, so you can reproduce the issue, thanks
		</comment>
		<comment id='3' author='xiaoyangnihao' date='2020-03-10T05:52:44Z'>
		The tensorflow2.0 use dynamic graphs.
the model can auto infer the input shape by your input.
But in your "low-level api" code, the Dense layer has not been inputed, so it can't auto infer the shape of input to build model. So, you need input some data like  your ''high-level api" code, then save model.
I suggest you  follow the code behind like keras, to let the model know the  shape of your inputs.
&lt;denchmark-code&gt;import os
import tensorflow as tf

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

class Model(tf.keras.Model):
    def __init__(self):
        super(Model, self).__init__()
        self.d = tf.keras.layers.Dense(2)

    def call(self, x, training=True, mask=None):
        return self.d(x)


mymodel = Model()
input = tf.keras.layers.Input(shape=(3,))
out = mymodel(input)
model=tf.keras.models.Model(inputs=input, outputs=out)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='xiaoyangnihao' date='2020-03-10T06:47:24Z'>
		
The tensorflow2.0 use dynamic graphs.
the model can auto infer the input shape by your input.
But in your "low-level api" code, the Dense layer has not been inputed, so it can't auto infer the shape of input to build model. So, you need input some data like your ''high-level api" code, then save model.
I suggest you follow the code behind like keras, to let the model know the shape of your inputs.
import os
import tensorflow as tf

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

class Model(tf.keras.Model):
    def __init__(self):
        super(Model, self).__init__()
        self.d = tf.keras.layers.Dense(2)

    def call(self, x, training=True, mask=None):
        return self.d(x)


mymodel = Model()
input = tf.keras.layers.Input(shape=(3,))
out = mymodel(input)
model=tf.keras.models.Model(inputs=input, outputs=out)


Yeah, this does work.
But In my real project, I use tf.saved_model.save() to save the model in checkpoint_interval, I think after running serveral batch_sizes, the input_shape should be configured, but when I use tf.saved_model.load() to load the model and call the input, TypeError: '_UserObject' object is not callable arises. I wonder why ?
		</comment>
		<comment id='5' author='xiaoyangnihao' date='2020-03-10T09:09:19Z'>
		&lt;denchmark-code&gt;import os
import tensorflow as tf

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

class Model(tf.keras.Model):
    def __init__(self):
        super(Model, self).__init__()
        self.d = tf.keras.layers.Dense(1)

    def call(self, x, training=True, mask=None):
        return self.d(x)

model = Model()

optimizer = tf.keras.optimizers.SGD()
with tf.GradientTape() as tape:
    out = model(tf.random.normal((2, 3)))
    grads = tape.gradient(out, model.trainable_weights)
    optimizer.apply_gradients(zip(grads,model.trainable_weights))

tf.saved_model.save(model, 'save/low')

model_load= tf.saved_model.load('save/low')
print(model_load(tf.random.normal((2, 3))))

&lt;/denchmark-code&gt;

yeah, in this way ,it really have  TypeError: '_UserObject' object is not callable arises.
According my understand , a keras model need input_layer.  If you have not input_layer, you  saved model that is not really model .it is just a layer .
I also want to know how you  explain this issue.  &lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='xiaoyangnihao' date='2020-03-10T10:15:49Z'>
		&lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
 any suggestions?
		</comment>
		<comment id='7' author='xiaoyangnihao' date='2020-03-12T10:54:11Z'>
		&lt;denchmark-h:h1&gt;build model&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import os
import tensorflow as tf

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'


class Model(tf.keras.Model):
    def __init__(self, **kwargs):
        super(Model, self).__init__(**kwargs)
        self.d = tf.keras.layers.Dense(1, kernel_initializer=tf.keras.initializers.ones())

    def call(self, x, training=True, mask=None):
        return self.d(x)

model = Model()
optimizer = tf.keras.optimizers.SGD()
with tf.GradientTape() as tape:
    out = model(tf.ones((2, 3)))
    grads = tape.gradient(out, model.trainable_weights)
    optimizer.apply_gradients(zip(grads, model.trainable_weights))

print(model(tf.ones((2, 3))))
&lt;/denchmark-code&gt;

&lt;denchmark-h:h1&gt;save and load model&lt;/denchmark-h&gt;

&lt;denchmark-h:h2&gt;Approach 1&lt;/denchmark-h&gt;

&lt;denchmark-link:https://www.tensorflow.org/guide/keras/save_and_serialize#approach_1&gt;https://www.tensorflow.org/guide/keras/save_and_serialize#approach_1&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;model.save_weights('save/')
model_load = Model()
model_load.load_weights('save/')
print(model_load(tf.ones((2, 3))))
&lt;/denchmark-code&gt;

It works well.
&lt;denchmark-h:h2&gt;Approach2&lt;/denchmark-h&gt;

&lt;denchmark-link:https://www.tensorflow.org/guide/keras/save_and_serialize#approach_2&gt;https://www.tensorflow.org/guide/keras/save_and_serialize#approach_2&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;model.save('save')
model_load = tf.keras.models.load_model('save/')
print(model_load(tf.ones((2, 3))))
&lt;/denchmark-code&gt;

ValueError: Model &lt;main.Model object at 0x4441057d0&gt; cannot be saved because the input shapes have not been set. Usually, input shapes are automatically determined from calling .fit() or .predict(). To manually set the shapes, call ### model._set_inputs(inputs).
&lt;denchmark-h:h2&gt;Approach3&lt;/denchmark-h&gt;

&lt;denchmark-link:https://www.tensorflow.org/guide/keras/save_and_serialize#approach_3&gt;https://www.tensorflow.org/guide/keras/save_and_serialize#approach_3&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;tf.saved_model.save(model,'save')
model_load = tf.keras.models.load_model('save')
print(model_load(tf.ones((2, 3))))
&lt;/denchmark-code&gt;

AttributeError: '_UserObject' object has no attribute 'call_and_return_conditional_losses'
In the eager mode, just   can work well.  But if model is trained  by using model.fit(), These methods all work well .
I think this might be  a bug.  But if not，I think these methods of saving and loading models should be distinguished in the docs.  &lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='xiaoyangnihao' date='2020-03-13T01:57:05Z'>
		
build model
import os
import tensorflow as tf

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'


class Model(tf.keras.Model):
    def __init__(self, **kwargs):
        super(Model, self).__init__(**kwargs)
        self.d = tf.keras.layers.Dense(1, kernel_initializer=tf.keras.initializers.ones())

    def call(self, x, training=True, mask=None):
        return self.d(x)

model = Model()
optimizer = tf.keras.optimizers.SGD()
with tf.GradientTape() as tape:
    out = model(tf.ones((2, 3)))
    grads = tape.gradient(out, model.trainable_weights)
    optimizer.apply_gradients(zip(grads, model.trainable_weights))

print(model(tf.ones((2, 3))))

save and load model
Approach 1
https://www.tensorflow.org/guide/keras/save_and_serialize#approach_1
model.save_weights('save/')
model_load = Model()
model_load.load_weights('save/')
print(model_load(tf.ones((2, 3))))

It works well.
Approach2
https://www.tensorflow.org/guide/keras/save_and_serialize#approach_2
model.save('save')
model_load = tf.keras.models.load_model('save/')
print(model_load(tf.ones((2, 3))))

ValueError: Model &lt;main.Model object at 0x4441057d0&gt; cannot be saved because the input shapes have not been set. Usually, input shapes are automatically determined from calling .fit() or .predict(). To manually set the shapes, call ### model._set_inputs(inputs).
Approach3
https://www.tensorflow.org/guide/keras/save_and_serialize#approach_3
tf.saved_model.save(model,'save')
model_load = tf.keras.models.load_model('save')
print(model_load(tf.ones((2, 3))))

AttributeError: '_UserObject' object has no attribute 'call_and_return_conditional_losses'
In the eager mode, just Approach 1 save_weights can work well. But if model is trained by using model.fit(), These methods all work well .
I think this might be a bug. But if not，I think these methods of saving and loading models should be distinguished in the docs. @amahendrakar

&lt;denchmark-link:https://github.com/SmileTM&gt;@SmileTM&lt;/denchmark-link&gt;
  The following method will be OK,
&lt;denchmark-code&gt;import os
import tensorflow as tf

print(tf.__version__)
print(tf.executing_eagerly())

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'


class Model(tf.keras.Model):
    def __init__(self):
        super(Model, self).__init__()
        self.d = tf.keras.layers.Dense(64)

    def call(self, x, training=True, mask=None):
        return self.d(x)


@tf.function
def train(inputs, targets, model, optimizer, loss_fn):
    with tf.GradientTape() as tape:
        predicts = model(inputs)
        loss = loss_fn(targets, predicts)
    
    grads = tape.gradient(loss, model.trainable_weights)
    optimizer.apply_gradients(zip(grads, model.trainable_weights))


def inference(tests):
    model = tf.saved_model.load('save/demo-1')
    print(model(tests))


if __name__ == "__main__":
    model = Model()
    optimizer = tf.optimizers.Adam()
    loss_fn = tf.losses.MeanSquaredError()

    inputs = tf.random.normal((8, 10, 16))
    targets = tf.random.normal((8, 10, 1))

    train(inputs, targets, model, optimizer, loss_fn)
    tf.saved_model.save(model, 'save/demo-1')

    tests = tf.random.normal((1, 10, 16))
    inference(tests)

&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='xiaoyangnihao' date='2020-03-13T09:38:49Z'>
		&lt;denchmark-link:https://github.com/xiaoyangnihao&gt;@xiaoyangnihao&lt;/denchmark-link&gt;
 That's actually a rather easy fix which is more related to Python than to TF:
The method in Model must be named __call__ rather than call for the model to be callable (i.e. you can do model(x)). As it is right now you would have to do model.call(x).
Apparently this was wrong in the documentation at some point because we also had this problem in some places. It's correct now though.
		</comment>
		<comment id='10' author='xiaoyangnihao' date='2020-03-13T09:58:16Z'>
		
@xiaoyangnihao That's actually a rather easy fix which is more related to Python than to TF:
The method in Model must be named __call__ rather than call for the model to be callable (i.e. you can do model(x)). As it is right now you would have to do model.call(x).
Apparently this was wrong in the documentation at some point because we also had this problem in some places. It's correct now though.

&lt;denchmark-link:https://github.com/jjedele&gt;@jjedele&lt;/denchmark-link&gt;
  My current version is tf2.1, does I need to update lasted version ?  Can you give some examples or codes about above questions? I don't think it is solved.
&lt;denchmark-code&gt;!pip uninstall tensorflow
!pip install tf-nightly

import os
import tensorflow as tf
print(tf.__version__)

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

class Model(tf.keras.Model):
    def __init__(self):
        super(Model, self).__init__()
        self.d = tf.keras.layers.Dense(2)

    def __call__(self, x, training=True, mask=None):
        return self.d(x)

model = Model()

# low-level api
tf.saved_model.save(model, 'save/low')

# low-level api
model = tf.saved_model.load('save/low')
print(model.call(tf.random.normal((1, 3))))   #  error!!!
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;2.2.0-dev20200312
WARNING:tensorflow:Skipping full serialization of Keras layer &lt;__main__.Model object at 0x7f0cbc971080&gt;, because it is not built.
WARNING:tensorflow:Skipping full serialization of Keras layer &lt;tensorflow.python.keras.layers.core.Dense object at 0x7f0c1c8f6978&gt;, because it is not built.
INFO:tensorflow:Assets written to: save/low/assets
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-3-451ee428c4e1&gt; in &lt;module&gt;()
     30 model = tf.saved_model.load('save/low')
     31 
---&gt; 32 print(model.call(tf.random.normal((1, 3))))   #  error!!!

AttributeError: '_UserObject' object has no attribute 'call'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='11' author='xiaoyangnihao' date='2020-03-13T10:01:59Z'>
		&lt;denchmark-link:https://github.com/xiaoyangnihao&gt;@xiaoyangnihao&lt;/denchmark-link&gt;
 Sorry, I was squeezing too much information into my answer. Now you fixed the one part and broke the other 
Do the following:
class Model(tf.keras.Model):
    def __init__(self):
        super(Model, self).__init__()
        self.d = tf.keras.layers.Dense(2)

    # "dunder"-methods (__...__) typically are called implicitly by Python
    def __call__(self, x, training=True, mask=None):
        return self.d(x)

...

model(tf.random.normal((1, 3))) # no explicit .call here
		</comment>
		<comment id='12' author='xiaoyangnihao' date='2020-03-16T11:24:03Z'>
		Was able to reproduce the issue with TF2.1 and TF-nightly. Please find the Gist &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/f89c323afb0b7e10e26a8f17a39c0508/37439.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='13' author='xiaoyangnihao' date='2020-03-17T20:49:45Z'>
		We intentionally don't deal with Keras types in tf.saved_model.save/tf.saved_model.load so the libraries are layered.
But &lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;
 has added SavedModel APIs which do save and restore Keras types: &lt;denchmark-link:https://www.tensorflow.org/versions/r2.2/api_docs/python/tf/keras/Model#save&gt;https://www.tensorflow.org/versions/r2.2/api_docs/python/tf/keras/Model#save&lt;/denchmark-link&gt;
 (tf.keras.model.save(..., save_format='tf'))
		</comment>
		<comment id='14' author='xiaoyangnihao' date='2020-03-17T20:49:47Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37439&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37439&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>