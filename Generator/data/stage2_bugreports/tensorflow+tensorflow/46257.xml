<bug id='46257' author='AyanmoI' open_date='2021-01-07T19:05:51Z' closed_time='2021-01-19T19:20:10Z'>
	<summary>[XLA] dense_layer_test.py throws internal error in fallback path</summary>
	<description>
The failure happens in Master as well as r2.4 (these are the 2 branches that I've tested).
Even with lazy_compilation turned on (via TF_XLA_FLAGS=--tf_xla_enable_lazy_compilation=true), the first execution always compiles as per the current implementation. If we tweak this behaviour such that the first execution doesn't compile (and uses the fallback path) or use --tf_xla_always_defer_compilation=true to force the fallback path, the test tensorflow/compiler/tests/dense_layer_test.py fails with the following signature
&lt;denchmark-code&gt;tensorflow.python.framework.errors_impl.InvalidArgumentError: {{function_node cluster_3}} {{function_node cluster_3}} Trying to assign variable with wrong dtype. Expected INVALID got float
     [[{{node dense/kernel/Assign}}]]
     [[cluster_3_1/partitioned_call]]
&lt;/denchmark-code&gt;

There are 3 test points in the test. Based on the descriptions, they test that the dense layer node is properly compiled in jit scope. I am not sure if this test is supposed to be used for the fallback path. However, the failure is not merely a test failure but an internal error (Trying to assign variable with wrong dtype. Expected INVALID got float) which leads me to think there might be a bug.
The error comes from handling of resource variables 


tensorflow/tensorflow/core/kernels/resource_variable_ops.cc


        Lines 397 to 401
      in
      13d3727






 OP_REQUIRES(context, variable-&gt;tensor()-&gt;dtype() == dtype_, 



 errors::InvalidArgument( 



 "Trying to assign variable with wrong dtype. Expected ", 



 DataTypeString(variable-&gt;tensor()-&gt;dtype()), " got ", 



 DataTypeString(dtype_))); 





	</description>
	<comments>
		<comment id='1' author='AyanmoI' date='2021-01-14T21:39:54Z'>
		Hi &lt;denchmark-link:https://github.com/AyanmoI&gt;@AyanmoI&lt;/denchmark-link&gt;

I was not able to reproduce this issue as:
&lt;denchmark-code&gt;# Git SHA1: 5534f5d320818aad52aac35af193b88b7222d46b

bazel test -c opt --nodistinct_host_configuration --config=cuda //tensorflow/compiler/tests:dense_layer_test_gpu --test_env=TF_XLA_FLAGS=--tf_xla_always_defer_compilation=true
&lt;/denchmark-code&gt;

Can you please share the exact run command and the commit at which you're running so that we're not talking past each other?
Thanks!
		</comment>
		<comment id='2' author='AyanmoI' date='2021-01-19T19:20:10Z'>
		Hey &lt;denchmark-link:https://github.com/sanjoy&gt;@sanjoy&lt;/denchmark-link&gt;
 ... that is pretty much the repro I used. However, it seems that simply using   doesn't reproduce this error. I believe there might still be an issue in the interaction of  resource variable and partioned_call but it cannot be exposed in this fashion.
I'll see if there is a better repro and address this then. For now I am closing this issue.
		</comment>
		<comment id='3' author='AyanmoI' date='2021-01-19T19:20:12Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/46257&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/46257&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>