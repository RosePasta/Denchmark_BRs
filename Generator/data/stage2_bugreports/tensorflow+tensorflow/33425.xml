<bug id='33425' author='racinmat' open_date='2019-10-16T12:25:29Z' closed_time='2020-03-13T22:19:12Z'>
	<summary>Tensorflow eager execution not working with tf.math.unsorted_segment_max, Gradient output is null</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10, Professional Edition
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary, installed using conda
TensorFlow version (use command below): unknown, 1.14.0
Python version: 3.7.3
CUDA/cuDNN version: 10.0, 7.6
GPU model and memory: T1000, 4GB VRAM

Describe the current behavior
When using tf.math.unsorted_segment_max with Tensorflow eager execution and Gradient Tape, the source code (see below) produces following error:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "C:/Projects/iotmap/py/segmented_max_error.py", line 80, in &lt;module&gt;
    grads = tape.gradient(loss_value, model.trainable_weights)
  File "C:\ProgramData\Anaconda3\lib\site-packages\tensorflow\python\eager\backprop.py", line 980, in gradient
    unconnected_gradients=unconnected_gradients)
  File "C:\ProgramData\Anaconda3\lib\site-packages\tensorflow\python\eager\imperative_grad.py", line 76, in imperative_grad
    compat.as_str(unconnected_gradients.value))
  File "C:\ProgramData\Anaconda3\lib\site-packages\tensorflow\python\eager\backprop.py", line 137, in _gradient_function
    return grad_fn(mock_op, *out_grads)
  File "C:\ProgramData\Anaconda3\lib\site-packages\tensorflow\python\ops\math_grad.py", line 349, in _UnsortedSegmentMaxGrad
    return _UnsortedSegmentMinOrMaxGrad(op, grad)
  File "C:\ProgramData\Anaconda3\lib\site-packages\tensorflow\python\ops\math_grad.py", line 326, in _UnsortedSegmentMinOrMaxGrad
    _GatherDropNegatives(op.outputs[0], op.inputs[1])
TypeError: 'NoneType' object is not subscriptable
&lt;/denchmark-code&gt;

Operations tf.math.segment_max, tf.math.segment_mean and tf.math.unsorted_segment_mean are working ok, though.
I need the unsorted version because in more complex code bases, I a using several segmented aggregations and concatenating them, so I need to have fixed sizes.
Describe the expected behavior
It should work without throwing error.

The code is here:
&lt;denchmark-link:https://gist.github.com/racinmat/9a95cac7db36d5f0b6b33e9c35678ca2&gt;https://gist.github.com/racinmat/9a95cac7db36d5f0b6b33e9c35678ca2&lt;/denchmark-link&gt;

Other info / logs
Exception thrown is mentioned above.
	</description>
	<comments>
		<comment id='1' author='racinmat' date='2019-10-17T07:01:31Z'>
		&lt;denchmark-link:https://github.com/racinmat&gt;@racinmat&lt;/denchmark-link&gt;

I tried reproducing the issue with TF 1.14 on colab. However i am seeing the different error.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/2f6897da2b30cbaba0bdd43ec9a84aa3/untitled279.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='racinmat' date='2019-10-17T09:53:57Z'>
		Yes, my bad, it is fixed now in the gist and produces the abovementioned error.
Here is the google colab notebook with fixed code: &lt;denchmark-link:https://colab.research.google.com/gist/racinmat/057bb526253484884f3f484f62cb1f0a/untitled279.ipynb&gt;https://colab.research.google.com/gist/racinmat/057bb526253484884f3f484f62cb1f0a/untitled279.ipynb&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='racinmat' date='2019-10-18T10:36:56Z'>
		I have tried on colab with TF 1.14,1.15.0-rc3 and was able to reproduce the issue
Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/c69ad2af68dbb3ff0747b0d4ed0e7df4/untitled279.ipynb#scrollTo=YVFBL130Y2w7&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='racinmat' date='2019-10-20T08:09:50Z'>
		Just a small question, should this still have the awaiting response label?
		</comment>
		<comment id='5' author='racinmat' date='2019-10-29T02:35:06Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33425&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33425&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='racinmat' date='2019-10-29T09:17:25Z'>
		I see the issue is fixed in master, will there be a 1.X version with the fix released sometimes?
		</comment>
		<comment id='7' author='racinmat' date='2020-02-24T19:15:23Z'>
		I'm seeing this same problem in TensorFlow 2.1.  My model uses tf.math.unsorted_segment_max().  When I call tape.gradient() in eager mode I get the error
&lt;denchmark-code&gt;  File "/Users/peastman/miniconda3/envs/tf2/lib/python3.7/site-packages/tensorflow_core/python/eager/backprop.py", line 1014, in gradient
    unconnected_gradients=unconnected_gradients)
  File "/Users/peastman/miniconda3/envs/tf2/lib/python3.7/site-packages/tensorflow_core/python/eager/imperative_grad.py", line 76, in imperative_grad
    compat.as_str(unconnected_gradients.value))
  File "/Users/peastman/miniconda3/envs/tf2/lib/python3.7/site-packages/tensorflow_core/python/eager/backprop.py", line 138, in _gradient_function
    return grad_fn(mock_op, *out_grads)
  File "/Users/peastman/miniconda3/envs/tf2/lib/python3.7/site-packages/tensorflow_core/python/ops/math_grad.py", line 455, in _UnsortedSegmentMaxGrad
    return _UnsortedSegmentMinOrMaxGrad(op, grad)
  File "/Users/peastman/miniconda3/envs/tf2/lib/python3.7/site-packages/tensorflow_core/python/ops/math_grad.py", line 432, in _UnsortedSegmentMinOrMaxGrad
    _GatherDropNegatives(op.outputs[0], op.inputs[1])
TypeError: 'NoneType' object is not subscriptable
&lt;/denchmark-code&gt;

Which versions is this supposed to be fixed in?
		</comment>
		<comment id='8' author='racinmat' date='2020-03-04T12:48:24Z'>
		The issue is still not resolved in v1.15.2, &lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
  why has it been closed? The bug is still there.
		</comment>
		<comment id='9' author='racinmat' date='2020-03-04T17:40:04Z'>
		Also, in TensorFlow 2.1 it appears this is no longer restricted to eager mode.  Even if I wrap the calculation in tf.function it still fails.  Can someone reopen this so it will get fixed?
		</comment>
		<comment id='10' author='racinmat' date='2020-03-13T22:19:12Z'>
		Actually I cannot reproduce this against nightly TF, so I think it has been fixed since. Sorry for the noise.
		</comment>
		<comment id='11' author='racinmat' date='2020-03-13T22:19:14Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33425&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33425&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='12' author='racinmat' date='2020-05-10T08:58:42Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 This problem still happened in tensorflow-gpu==2.0.0. But, it's ok in tensorflow-gpu==2.1.0.
		</comment>
	</comments>
</bug>