<bug id='17485' author='hrschubert' open_date='2018-03-06T15:37:24Z' closed_time='2019-11-12T06:50:12Z'>
	<summary>tf.contrib.image.transform crashes under Windows when CUDA is enabled</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes. A minimal example reproducing the bug is provided below.
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Windows 10 (x64)
TensorFlow installed from (source or binary):
Binary installed using pip install tensorflow-gpu
TensorFlow version (use command below):
b'unknown' 1.6.0 (also tested on b'unknown' 1.4.0)
Python version: 3.6
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version:
CUDA 9.0.176 / cuDNN 7.0.5
CUDA 8.0.61 / cuDNN 6.14.11
GPU model and memory:
(device: 0, name: GeForce GTX 970M, pci bus id: 0000:01:00.0, compute capability: 5.2, memory: 3.00GiB)
(device: 0, name: Quadro M1200, pci bus id: 0000:01:00.0, compute capability: 5.0, memory: 4.00GiB)
Exact command to reproduce: python example.py (see below)

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

The function tf.contrib.image.transform crashes when CUDA is enabled under Windows. It produces the following errors: CUDA_ERROR_ILLEGAL_INSTRUCTION on tensorflow 1.6 or CUDA_ERROR_LAUNCH_FAILED on tensorflow 1.4.
However, it functions correctly when CUDA is disabled (by setting CUDA_VISIBLE_DEVICES to -1).
I tested a variation of different parameters (such as varying the batch size, image sizes, and number of channels), but the behavior stays the same. In addition I reproduced the same error on a different machine with an older tensorflow version.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;


Code:

&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf

batch_size, image_size, channels = 1, 32, 1

data = np.zeros(
    shape=(batch_size, image_size, image_size, channels), 
    dtype=np.float32)

data_node = tf.placeholder(
    shape=(batch_size, image_size, image_size, channels),
    dtype=tf.float32)

identity = tf.constant([1, 0, 0, 0, 1, 0, 0, 0], dtype=tf.float32)
transform = tf.tile(tf.expand_dims(identity, 0), [batch_size, 1])
data_node_transformed = tf.contrib.image.transform(data_node, transform)

data_t = tf.Session().run([data_node_transformed], feed_dict={data_node: data})
&lt;/denchmark-code&gt;



Console Output:
Output with tensorflow 1.6 (with GeForce GTX 970M,) :


&lt;denchmark-code&gt;2018-03-06 15:42:21.578078: I C:\tf_jenkins\workspace\rel-win\M\windows-gpu\PY\36\tensorflow\core\common_runtime\gpu\gpu_device.cc:1212] Found device 0 with properties:
name: GeForce GTX 970M major: 5 minor: 2 memoryClockRate(GHz): 1.038
pciBusID: 0000:01:00.0
totalMemory: 3.00GiB freeMemory: 2.48GiB
2018-03-06 15:42:21.578310: I C:\tf_jenkins\workspace\rel-win\M\windows-gpu\PY\36\tensorflow\core\common_runtime\gpu\gpu_device.cc:1312] Adding visible gpu devices: 0
2018-03-06 15:42:21.890290: I C:\tf_jenkins\workspace\rel-win\M\windows-gpu\PY\36\tensorflow\core\common_runtime\gpu\gpu_device.cc:993] Creating TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 2192 MB memory) -&gt; physical GPU (device: 0, name: GeForce GTX 970M, pci bus id: 0000:01:00.0, compute capability: 5.2)
2018-03-06 15:42:22.101031: E C:\tf_jenkins\workspace\rel-win\M\windows-gpu\PY\36\tensorflow\stream_executor\cuda\cuda_event.cc:49] Error polling for event status: failed to query event: CUDA_ERROR_ILLEGAL_INSTRUCTION
2018-03-06 15:42:22.101032: E C:\tf_jenkins\workspace\rel-win\M\windows-gpu\PY\36\tensorflow\stream_executor\cuda\cuda_driver.cc:1110] could not synchronize on CUDA context: CUDA_ERROR_ILLEGAL_INSTRUCTION ::
2018-03-06 15:42:22.101185: F C:\tf_jenkins\workspace\rel-win\M\windows-gpu\PY\36\tensorflow\core\common_runtime\gpu\gpu_event_mgr.cc:203] Unexpected Event status: 1
&lt;/denchmark-code&gt;

Output with tensorflow 1.4 (with Quadro M1200):
&lt;denchmark-code&gt;2018-03-06 15:31:17.800588: I C:\tf_jenkins\home\workspace\rel‑win\M\windows‑gpu\PY\36\tensorflow\core\common_runtime\gpu\gpu_device.cc:1030] Found device 0 with properties: 
name: Quadro M1200 major: 5 minor: 0 memoryClockRate(GHz): 1.148
pciBusID: 0000:01:00.0
totalMemory: 4.00GiB freeMemory: 3.35GiB
2018-03-06 15:31:17.803815: I C:\tf_jenkins\home\workspace\rel‑win\M\windows‑gpu\PY\36\tensorflow\core\common_runtime\gpu\gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:0) ‑&gt; (device: 0, name: Quadro M1200, pci bus id: 0000:01:00.0, compute capability: 5.0)
2018-03-06 15:31:18.731252: E C:\tf_jenkins\home\workspace\rel‑win\M\windows‑gpu\PY\36\tensorflow\stream_executor\cuda\cuda_driver.cc:1110] could not synchronize on CUDA context: CUDA_ERROR_LAUNCH_FAILED :: No stack trace available
2018-03-06 15:31:18.731258: E C:\tf_jenkins\home\workspace\rel‑win\M\windows‑gpu\PY\36\tensorflow\stream_executor\cuda\cuda_event.cc:49] Error polling for event status: failed to query event: CUDA_ERROR_LAUNCH_FAILED
2018-03-06 15:31:18.733458: F C:\tf_jenkins\home\workspace\rel‑win\M\windows‑gpu\PY\36\tensorflow\core\common_runtime\gpu\gpu_event_mgr.cc:203] Unexpected Event status: 1
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='hrschubert' date='2018-03-09T01:59:23Z'>
		&lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;
 Can you take a look?
		</comment>
		<comment id='2' author='hrschubert' date='2018-03-09T07:54:31Z'>
		I am not familiar with this code.
&lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/zheng-xq&gt;@zheng-xq&lt;/denchmark-link&gt;
  have you seen the above error message before?
		</comment>
		<comment id='3' author='hrschubert' date='2018-03-09T15:47:49Z'>
		Assuming the example is minimal, it looks like the failing code is (probably) in one of these files:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/60a21e25b0261369a15ca1d17505d7c3c82be967/tensorflow/contrib/image/kernels/image_ops.h&gt;https://github.com/tensorflow/tensorflow/blob/60a21e25b0261369a15ca1d17505d7c3c82be967/tensorflow/contrib/image/kernels/image_ops.h&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/60a21e25b0261369a15ca1d17505d7c3c82be967/tensorflow/contrib/image/kernels/image_ops.cc&gt;https://github.com/tensorflow/tensorflow/blob/60a21e25b0261369a15ca1d17505d7c3c82be967/tensorflow/contrib/image/kernels/image_ops.cc&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/60a21e25b0261369a15ca1d17505d7c3c82be967/tensorflow/contrib/image/kernels/image_ops_gpu.cu.cc&gt;https://github.com/tensorflow/tensorflow/blob/60a21e25b0261369a15ca1d17505d7c3c82be967/tensorflow/contrib/image/kernels/image_ops_gpu.cu.cc&lt;/denchmark-link&gt;

I don't know what could be causing the problem. &lt;denchmark-link:https://github.com/ringw&gt;@ringw&lt;/denchmark-link&gt;
 contributed that code, and might have some ideas.
		</comment>
		<comment id='4' author='hrschubert' date='2018-03-20T18:48:23Z'>
		Sorry, I don't have access to a Windows machine and am not familiar with the Windows development environment, let alone debugging CUDA. I don't think I can feasibly look into this issue in the near future. If anyone manages to narrow down the error on Windows, I can at least answer any questions about the code.
		</comment>
		<comment id='5' author='hrschubert' date='2018-03-27T11:12:41Z'>
		The same issue on GTX970 and TF 1.5.0 and 1.6.0 when using tf.contrib.image.transform method.
Windows 10.
Python 3.6.4
Cuda 9
cuDNN 7
		</comment>
		<comment id='6' author='hrschubert' date='2018-04-11T12:37:00Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/shivaniag&gt;@shivaniag&lt;/denchmark-link&gt;
: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='7' author='hrschubert' date='2018-04-18T15:07:54Z'>
		I had the same issue with tf.contrib.image.translate on TF 1.7.0
Windows 10
Python 3.6.4
Cuda 9
cuDNN 7
		</comment>
		<comment id='8' author='hrschubert' date='2018-04-26T13:19:25Z'>
		I have the same issue with tf.contrib.image.rotate on TF 1.7.0
Windows 10
Python 3.6
Cuda 9
cuDNN 7
		</comment>
		<comment id='9' author='hrschubert' date='2018-04-26T13:52:56Z'>
		I have the same issue with tf.contrib.image.rotate on TF 1.7.0
Windows 10
Python 3.6
Cuda 9
cuDNN 7
For pre-processing, wrapping it with tf.data.Dataset it works, presumably because it is on the CPU?
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf

batch_size, image_size, channels = 1, 32, 1

data = np.zeros(
    shape=(batch_size, image_size, image_size, channels),
    dtype=np.float32)

data_node = tf.placeholder(
    shape=(batch_size, image_size, image_size, channels),
    dtype=tf.float32)

identity = tf.constant([1, 0, 0, 0, 1, 0, 0, 0], dtype=tf.float32)
transform = tf.tile(tf.expand_dims(identity, 0), [batch_size, 1])
# data_node_transformed = tf.contrib.image.transform(data_node, transform)

data = tf.data.Dataset.from_tensor_slices(data)
data = data.map(lambda x: tf.contrib.image.transform(x, transform))
data = data.batch(1)
iterator = data.make_one_shot_iterator()
next_element = iterator.get_next()

with tf.Session() as session:
    data_t = session.run(next_element)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='10' author='hrschubert' date='2018-04-26T14:09:30Z'>
		Mine only crashes on the GPU aswell, Wrapping it with Dataset doesn't really solve the issue since it just forces it to run on the CPU : &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/13610&gt;#13610&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='hrschubert' date='2018-04-26T14:13:33Z'>
		&lt;denchmark-link:https://github.com/micoene&gt;@micoene&lt;/denchmark-link&gt;
 Ahhh yes, you are correct, just putting it on CPU works. It is a workaround for now...
&lt;denchmark-code&gt;with tf.device('/cpu:0'):
    data_node_transformed = tf.contrib.image.transform(data_node, transform)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='12' author='hrschubert' date='2018-05-11T18:48:29Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/shivaniag&gt;@shivaniag&lt;/denchmark-link&gt;
: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='13' author='hrschubert' date='2018-05-17T17:41:49Z'>
		Same issues Geforce 1060, Windows 10, Python 3,6, Cuda 9, cuDNN 7.04
		</comment>
		<comment id='14' author='hrschubert' date='2018-05-28T03:14:05Z'>
		I have the same issue with tf.contrib.image.rotate on TF 1.4 on GPU (GTX 980M)
Windows 10
Python 3.5
Cuda 8.0
cuDNN 6.1
		</comment>
		<comment id='15' author='hrschubert' date='2018-06-01T14:15:35Z'>
		Same on win10, py36, cuda9.0, cudnn7, tf1.8, gtx1080
		</comment>
		<comment id='16' author='hrschubert' date='2018-06-16T18:30:30Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/shivaniag&gt;@shivaniag&lt;/denchmark-link&gt;
: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='17' author='hrschubert' date='2018-06-29T07:18:31Z'>
		Similair issue:
Windows 10
Python 3.6
Cuda 9.0
cuDNN 7.1.4
		</comment>
		<comment id='18' author='hrschubert' date='2018-06-30T22:13:35Z'>
		&lt;denchmark-link:https://github.com/Aliyss&gt;@Aliyss&lt;/denchmark-link&gt;
 I recreated a fresh conda env with cdnn, tensorflow gpu1.8, and keras gpu 2.1 installed from anaconda. Before that I downgraded my cuda from 9.2 to 9.0. That solved the issue for me.
		</comment>
		<comment id='19' author='hrschubert' date='2018-07-03T07:37:03Z'>
		Similair issue:
Tensoflow-gpu 1.8
Windows 10
Python 3.6
Cuda 9.0
cuDNN 7.1.4
&lt;denchmark-h:h2&gt;I knew that I would not upgrade. I still can’t solve it now.&lt;/denchmark-h&gt;

ok，I think I have solved this problem. I change Tensoflow-gpu 1.8 to Tensoflow 1.8.  Well Done！
		</comment>
		<comment id='20' author='hrschubert' date='2018-07-04T16:07:53Z'>
		&lt;denchmark-link:https://github.com/jijingtaifeng&gt;@jijingtaifeng&lt;/denchmark-link&gt;
 I tried running it from the python console instead of Visual Studio or similair. try that. maybe it works.
		</comment>
		<comment id='21' author='hrschubert' date='2018-07-10T21:02:56Z'>
		Same issue on this configuration:
Tensoflow-gpu 1.8
Windows 10 x64
Python 3.6.2
Cuda 9.0
cuDNN 7
Isn't there any response ? or something like that, issue is open by months....
		</comment>
		<comment id='22' author='hrschubert' date='2018-07-11T14:35:30Z'>
		Similair issue:
Windows 10
Python 3.6
Tensoflow-gpu 1.8
Cuda 9.0
cuDNN 7.1.4
GPU (GeForce GTX 1050)
		</comment>
		<comment id='23' author='hrschubert' date='2018-07-25T14:40:56Z'>
		Similar issue:
Windows 10
Python 3.6
Tensorflow 1.9, 1.8, 1.7, 1.4
CUDA 9.0, 8
cuDNN 7.1, 6, 7
GPU GeForce GTX 1070
		</comment>
		<comment id='24' author='hrschubert' date='2018-07-25T20:47:24Z'>
		Since this is under contrib, and looking at the history, I am marking this contributions welcome as it looks like we wont be able to get to this.
		</comment>
		<comment id='25' author='hrschubert' date='2019-11-12T06:50:12Z'>
		Closing out this issue, as tf.contrib.image has been deprecated as part of TensorFlow 2.0. If you run into similar snags with tf.image.* ops when using Windows with CUDA enabled, please feel free to open a new ticket. Thanks! 🙂
		</comment>
		<comment id='26' author='hrschubert' date='2019-11-12T06:50:14Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/17485&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/17485&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>