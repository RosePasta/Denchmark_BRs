<bug id='38038' author='renatomello' open_date='2020-03-30T10:42:43Z' closed_time='2020-04-01T10:04:12Z'>
	<summary>Custom Metrics and Losses: AttributeError: 'Tensor' object has no attribute 'numpy' raised during training</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock
example script provided in TensorFlow): Yes
OS Platform and Distribution: Linux Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if
the issue happens on mobile device:  No
TensorFlow installed from (source or
binary): pip
TensorFlow version (use command below): 2.1.0
Python version: - Bazel
version (if compiling from source): 3.6.9 64-bit
GCC/Compiler version (if compiling from
source): Ubuntu 7.5.0-3ubuntu1~18.04
CUDA/cuDNN version: - GPU model and memory: No

Describe the current behavior
I am trying to implement a custom metric function as well as a custom loss function. Both implementations are face the same issue, so I am going to focus this post in just one of them.
As an example, we have the dummy code below. The current behaviour is
AttributeError: 'Tensor' object has no attribute 'numpy'.
The full log is also shown below.
Describe the expected behavior
My goal is to access the value of a tensor during the fit method in order to make calculations based on said values stored in both y_true and y_pred. These calculations cannot be done using built-in Keras backend functions.
I wrote this dummy function test just to illustrate the issue. If only tf.print is used, the code runs and the values in the tensors are printed on stdout after the fit is done. However, if I try something like y_true.numpy() or print(y_true.numpy()) the code returns
AttributeError: 'Tensor' object has no attribute 'numpy'
I have tried several methods from several StackOverflow and Github threads (e.g. &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/27519&gt;#27519&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/36979&gt;#36979&lt;/denchmark-link&gt;
), including combinations of  with , , but somehow failed to implement any of them successfully.
Does anyone know how to solve this problem?
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import Input, LSTM, Dense
from tensorflow.keras.metrics import Metric

x, y = list(), list()
for _ in range(10):
    x.append(np.arange(10))
    y.append(np.random.randint(0, 2))

x = np.reshape(x, (len(x), 1, len(x[0])))
y = np.asarray(y)

print(tf.convert_to_tensor(x).numpy())

class custom_metric(Metric):
    def __init__(self, name = 'custom_metrics', **kwargs):
        super(custom_metric, self).__init__(name = name, **kwargs)
        self.true_positives = self.add_weight(name = 'tp', initializer = 'zeros')

    def update_state(self, y_true, y_pred, sample_weight = None):
        self.test(y_true, y_pred)
        # In a real application, new_metric would be a function that depends on
        # the values stored in both y_true and y_pred 
        new_metric = 0.1 
        self.true_positives.assign_add(tf.reduce_sum(new_metric))

    def result(self):
        return self.true_positives

    def reset_states(self):
        self.true_positives.assign(0.)

    def test(self, y_true, y_pred):
        tf.print(y_true)
        print(y_true.numpy())

model = Sequential([
    LSTM(5,
         input_shape = (np.asarray(x).shape[1], np.asarray(x).shape[2]),
         return_sequences = True,
         recurrent_initializer = 'glorot_uniform',
         activation = 'tanh',
         recurrent_dropout = 0.2,
         dropout = 0.2
    ),
    Dense(2, activation = 'softmax')
])

model.compile(
    optimizer = 'adam',
    loss = 'sparse_categorical_crossentropy',
    metrics = ['sparse_categorical_accuracy', custom_metric()]
)

model.run_eagerly = True

model.fit(
    x, y,
    epochs = 1,
    batch_size = 1
)`
&lt;/denchmark-code&gt;

Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
&lt;denchmark-code&gt;array([[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]],

       [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]],

       [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]],

       [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]],

       [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]],

       [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]],

       [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]],

       [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]],

       [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]],

       [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]])
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
~/path/to/file.py in 
     54     optimizer = 'adam',
     55     loss = 'sparse_categorical_crossentropy',
---&gt; 56     metrics = ['sparse_categorical_accuracy', custom_metric()]
     57 )
     58 model.run_eagerly = True

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/training/tracking/base.py in _method_wrapper(self, *args, **kwargs)
    455     self._self_setattr_tracking = False  # pylint: disable=protected-access
    456     try:
--&gt; 457       result = method(self, *args, **kwargs)
    458     finally:
    459       self._self_setattr_tracking = previous_value  # pylint: disable=protected-access

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/engine/training.py in compile(self, optimizer, loss, metrics, loss_weights, sample_weight_mode, weighted_metrics, target_tensors, distribute, **kwargs)
    437           targets=self._targets,
    438           skip_target_masks=self._prepare_skip_target_masks(),
--&gt; 439           masks=self._prepare_output_masks())
    440 
    441       # Prepare sample weight modes. List with the same length as model outputs.

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/engine/training.py in _handle_metrics(self, outputs, targets, skip_target_masks, sample_weights, masks, return_weighted_metrics, return_weighted_and_unweighted_metrics)
   2002           metric_results.extend(
   2003               self._handle_per_output_metrics(self._per_output_metrics[i],
-&gt; 2004                                               target, output, output_mask))
   2005         if return_weighted_and_unweighted_metrics or return_weighted_metrics:
   2006           metric_results.extend(

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/engine/training.py in _handle_per_output_metrics(self, metrics_dict, y_true, y_pred, mask, weights)
   1953       with K.name_scope(metric_name):
   1954         metric_result = training_utils.call_metric_function(
-&gt; 1955             metric_fn, y_true, y_pred, weights=weights, mask=mask)
   1956         metric_results.append(metric_result)
   1957     return metric_results

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/engine/training_utils.py in call_metric_function(metric_fn, y_true, y_pred, weights, mask)
   1153 
   1154   if y_pred is not None:
-&gt; 1155     return metric_fn(y_true, y_pred, sample_weight=weights)
   1156   # `Mean` metric only takes a single value.
   1157   return metric_fn(y_true, sample_weight=weights)

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/metrics.py in __call__(self, *args, **kwargs)
    194     from tensorflow.python.keras.distribute import distributed_training_utils  # pylint:disable=g-import-not-at-top
    195     return distributed_training_utils.call_replica_local_fn(
--&gt; 196         replica_local_fn, *args, **kwargs)
    197 
    198   @property

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/distribute/distributed_training_utils.py in call_replica_local_fn(fn, *args, **kwargs)
   1133     with strategy.scope():
   1134       return strategy.extended.call_for_each_replica(fn, args, kwargs)
-&gt; 1135   return fn(*args, **kwargs)
   1136 
   1137 

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/metrics.py in replica_local_fn(*args, **kwargs)
    177     def replica_local_fn(*args, **kwargs):
    178       """Updates the state of the metric in a replica-local context."""
--&gt; 179       update_op = self.update_state(*args, **kwargs)  # pylint: disable=not-callable
    180       with ops.control_dependencies([update_op]):
    181         result_t = self.result()  # pylint: disable=not-callable

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/utils/metrics_utils.py in decorated(metric_obj, *args, **kwargs)
     74 
     75     with tf_utils.graph_context_for_symbolic_tensors(*args, **kwargs):
---&gt; 76       update_op = update_state_fn(*args, **kwargs)
     77     if update_op is not None:  # update_op will be None in eager execution.
     78       metric_obj.add_update(update_op)

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/def_function.py in __call__(self, *args, **kwds)
    566         xla_context.Exit()
    567     else:
--&gt; 568       result = self._call(*args, **kwds)
    569 
    570     if tracing_count == self._get_tracing_count():

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/def_function.py in _call(self, *args, **kwds)
    613       # This is the first call of __call__, so we have to initialize.
    614       initializers = []
--&gt; 615       self._initialize(args, kwds, add_initializers_to=initializers)
    616     finally:
    617       # At this point we know that the initialization is complete (or less

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/def_function.py in _initialize(self, args, kwds, add_initializers_to)
    495     self._concrete_stateful_fn = (
    496         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access
--&gt; 497             *args, **kwds))
    498 
    499     def invalid_creator_scope(*unused_args, **unused_kwds):

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)
   2387       args, kwargs = None, None
   2388     with self._lock:
-&gt; 2389       graph_function, _, _ = self._maybe_define_function(args, kwargs)
   2390     return graph_function
   2391 

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/function.py in _maybe_define_function(self, args, kwargs)
   2701 
   2702       self._function_cache.missed.add(call_context_key)
-&gt; 2703       graph_function = self._create_graph_function(args, kwargs)
   2704       self._function_cache.primary[cache_key] = graph_function
   2705       return graph_function, args, kwargs

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)
   2591             arg_names=arg_names,
   2592             override_flat_arg_shapes=override_flat_arg_shapes,
-&gt; 2593             capture_by_value=self._capture_by_value),
   2594         self._function_attributes,
   2595         # Tell the ConcreteFunction to clean up its graph once it goes out of

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)
    976                                           converted_func)
    977 
--&gt; 978       func_outputs = python_func(*func_args, **func_kwargs)
    979 
    980       # invariant: `func_outputs` contains only Tensors, CompositeTensors,

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/def_function.py in wrapped_fn(*args, **kwds)
    437         # __wrapped__ allows AutoGraph to swap in a converted function. We give
    438         # the function a weak reference to itself to avoid a reference cycle.
--&gt; 439         return weak_wrapped_fn().__wrapped__(*args, **kwds)
    440     weak_wrapped_fn = weakref.ref(wrapped_fn)
    441 

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/func_graph.py in wrapper(*args, **kwargs)
    966           except Exception as e:  # pylint:disable=broad-except
    967             if hasattr(e, "ag_error_metadata"):
--&gt; 968               raise e.ag_error_metadata.to_exception(e)
    969             else:
    970               raise

AttributeError: in converted code:

~/path/to/file.py:7 update_state  *
    self.test(y_true, y_pred)
~/path/to/file.py:20 test  *
    y_true.numpy()

AttributeError: 'Tensor' object has no attribute 'numpy'
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='renatomello' date='2020-03-30T12:18:14Z'>
		convert x,y to tensors before training
use x,y=tf.convert_to_tensor(x),tf.convert_to_tensor(y)
		</comment>
		<comment id='2' author='renatomello' date='2020-03-30T12:32:24Z'>
		
convert x,y to tensors before training
use x,y=tf.convert_to_tensor(x),tf.convert_to_tensor(y)

Same error occurs in model.compile
		</comment>
		<comment id='3' author='renatomello' date='2020-03-30T13:51:03Z'>
		&lt;denchmark-link:https://github.com/renatomello&gt;@renatomello&lt;/denchmark-link&gt;

please refer to these &lt;denchmark-link:https://stackoverflow.com/questions/52357542/attributeerror-tensor-object-has-no-attribute-numpy&gt;link&lt;/denchmark-link&gt;
 and let us know if it helps
		</comment>
		<comment id='4' author='renatomello' date='2020-03-30T14:44:13Z'>
		
@renatomello
please refer to these link and let us know if it helps

The most voted answer talks about enabling eager execution. I'm using TF 2.1.0, so Eager Execution is enabled by default.
tf.executing_eagerly()
&gt;&gt;&gt; True
		</comment>
		<comment id='5' author='renatomello' date='2020-03-31T06:35:03Z'>
		&lt;denchmark-link:https://github.com/renatomello&gt;@renatomello&lt;/denchmark-link&gt;

i tried executing your code on nightly and there are no errors there, please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/17aa5392b3fd5c396b72ebce42000f66/38038.ipynb&gt;gist here&lt;/denchmark-link&gt;
 please let us know if that helps.
		</comment>
		<comment id='6' author='renatomello' date='2020-03-31T11:45:27Z'>
		
@renatomello
i tried executing your code on nightly and there are no errors there, please find the gist here please let us know if that helps.

Finally. This one works. You almost literally saved my life.
Just to be sure, what's exactly the difference from the nightly version to the 2.1.0 stable version that does the trick?
		</comment>
		<comment id='7' author='renatomello' date='2020-03-31T17:03:20Z'>
		&lt;denchmark-link:https://github.com/renatomello&gt;@renatomello&lt;/denchmark-link&gt;
 After releasing TF2.1 stable version, there were lots of updates. It is possible but difficult to trace which update resolved your issue. tf-nightly versions are released everyday. Thanks!
		</comment>
		<comment id='8' author='renatomello' date='2020-03-31T17:07:12Z'>
		&lt;denchmark-link:https://github.com/renatomello&gt;@renatomello&lt;/denchmark-link&gt;

As the issue is resolved in tf_nightly, please confirm if we may move this issue to closed status.
		</comment>
		<comment id='9' author='renatomello' date='2020-04-01T10:04:12Z'>
		
@renatomello
As the issue is resolved in tf_nightly, please confirm if we may move this issue to closed status.

Just want to point out that, regardless of using tf_nightly, the conde only runs when model.run_eagerly = True passed.
All in all, the issue can be closed.
		</comment>
		<comment id='10' author='renatomello' date='2020-04-01T10:04:14Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38038&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38038&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='renatomello' date='2020-07-06T20:52:24Z'>
		

@renatomello
As the issue is resolved in tf_nightly, please confirm if we may move this issue to closed status.

Just want to point out that, regardless of using tf_nightly, the conde only runs when model.run_eagerly = True passed.
All in all, the issue can be closed.

&lt;denchmark-link:https://github.com/renatomello&gt;@renatomello&lt;/denchmark-link&gt;
 : The code does work when  is added before the . However, it is slowing the entire training down for me (eg. 50 secs vs. 5 mins per epoch). Did you observe a similar behaviour?
		</comment>
		<comment id='12' author='renatomello' date='2020-09-22T17:45:07Z'>
		Hi, &lt;denchmark-link:https://github.com/renatomello&gt;@renatomello&lt;/denchmark-link&gt;

I see you everywhere about this issue and thanks so much for your contribution. However, I still meet the same error even if . Here is the simple code and I have no idea how to do.
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/5263106/model_print_data.txt&gt;model_print_data.txt&lt;/denchmark-link&gt;


The error I got:
Traceback (most recent call last):
File "/home/training/anaconda3/lib/python3.7/runpy.py", line 193, in _run_module_as_main
"main", mod_spec)
File "/home/training/anaconda3/lib/python3.7/runpy.py", line 85, in _run_code
exec(code, run_globals)
File "/home/training/r08943133/kws_test/train/model_print_data.py", line 93, in 
tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)
File "/home/training/r08943133/venv/lib/python3.7/site-packages/tensorflow/python/platform/app.py", line 40, in run
_run(main=main, argv=argv, flags_parser=_parse_flags_tolerate_undef)
File "/home/training/r08943133/venv/lib/python3.7/site-packages/absl/app.py", line 299, in run
_run_main(main, args)
File "/home/training/r08943133/venv/lib/python3.7/site-packages/absl/app.py", line 250, in _run_main
sys.exit(main(argv))
File "/home/training/r08943133/kws_test/train/model_print_data.py", line 38, in main
print_test_data(flags)
File "/home/training/r08943133/kws_test/train/model_print_data.py", line 77, in print_test_data
print(model.get_layer(index=i).output.numpy)
AttributeError: 'Tensor' object has no attribute 'numpy'
tf.executing_eagerly: True
model.run_eagerly: True

Would you mind giving me a hand?
		</comment>
	</comments>
</bug>