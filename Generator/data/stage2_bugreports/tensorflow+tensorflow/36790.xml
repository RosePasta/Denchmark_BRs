<bug id='36790' author='Hemal-Mamtora' open_date='2020-02-16T06:43:58Z' closed_time='2020-05-28T17:07:17Z'>
	<summary>tf.keras.backend.set_floatx() causing ValueError (dtype conversion error) while computing tf.keras.metrics.*</summary>
	<description>
System information - Have I written custom code on Google Colab: -
Code:
&lt;denchmark-code&gt;tf.keras.backend.set_floatx('float64')

model.compile(optimizer= Adam(learning_rate= 0.001, clipnorm=1.0, clipvalue=0.5),
              loss={
                  'class_output': BinaryCrossentropy(),
                  'decoder_output': BinaryCrossentropy()
              },
              loss_weights=[0.5, 1.0],
               metrics = {
                  'class_output':[tf.metrics.Recall(), tf.metrics.Precision()],
                  'decoder_output':[tf.metrics.Recall(), tf.metrics.Precision()],
              }
             ) 
&lt;/denchmark-code&gt;

Error:
&lt;denchmark-code&gt;/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/ops.py in convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, dtype_hint, ctx, accepted_result_types)
   1288       raise ValueError(
   1289           "Tensor conversion requested dtype %s for Tensor with dtype %s: %r" %
-&gt; 1290           (dtype.name, value.dtype.name, value))
   1291     return value
   1292 

ValueError: Tensor conversion requested dtype float64 for Tensor with dtype float32: &lt;tf.Tensor 'metrics_6/class_output_recall_8/Sum:0' shape=(1,) dtype=float32&gt;
&lt;/denchmark-code&gt;

OS Platform and Distribution : -
&lt;denchmark-code&gt;os.uname()
&gt;&gt;&gt; posix.uname_result(sysname='Linux', nodename='ed841897617b', release='4.14.137+', version='#1 SMP Thu Aug 8 02:47:02 PDT 2019', machine='x86_64')
&lt;/denchmark-code&gt;

TensorFlow installed from : -
!pip install tensorflow==2.10
TensorFlow version : -
&lt;denchmark-code&gt;tf.__version__
&gt;&gt;&gt; '2.1.0'
&lt;/denchmark-code&gt;

Python version: -
&lt;denchmark-code&gt;!python -V
&gt;&gt;&gt; Python 3.6.9
&lt;/denchmark-code&gt;

Bazel version :-  NA
GCC/Compiler version : - NA
CUDA/cuDNN version: -  NA
GPU model and memory:
&lt;denchmark-code&gt;from psutil import virtual_memory
mem = virtual_memory()
print(mem.total / 1024**3, 'GB') # total physical memory available
&gt;&gt;&gt;12.717426300048828 GB
&lt;/denchmark-code&gt;

You can collect some of this information using our environment capture
script
You can also obtain the TensorFlow version with: 1. TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)" 2. TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"
Describe the current behavior
When using tf.keras.backend.set_floatx('float64') , whole tf should be set to float64, right ?
But the tf.metrics are not getting set as shown in the code above
Describe the expected behavior
All of tf including tf.metrics should be calculated on the basis of tf.keras.backend.set_floatx('float64')
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf 

tf.keras.backend.set_floatx('float64')

m = tf.keras.metrics.Recall()
m.update_state([0, 1, 1, 1], [1, 0, 1, 1])
print('Final result: ', m.result().numpy())
&lt;/denchmark-code&gt;

Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
StackTrace:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-30-86f79f751766&gt; in &lt;module&gt;()
      6               loss_weights=[0.5, 1.0],
      7                metrics = {
----&gt; 8                   'class_output':[tf.metrics.Recall(), tf.metrics.Precision()],
      9                 #  'decoder_output':[tf.metrics.Recall(), tf.metrics.Precision()],
     10               }

13 frames
/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/training/tracking/base.py in _method_wrapper(self, *args, **kwargs)
    455     self._self_setattr_tracking = False  # pylint: disable=protected-access
    456     try:
--&gt; 457       result = method(self, *args, **kwargs)
    458     finally:
    459       self._self_setattr_tracking = previous_value  # pylint: disable=protected-access

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/engine/training.py in compile(self, optimizer, loss, metrics, loss_weights, sample_weight_mode, weighted_metrics, target_tensors, distribute, **kwargs)
    437           targets=self._targets,
    438           skip_target_masks=self._prepare_skip_target_masks(),
--&gt; 439           masks=self._prepare_output_masks())
    440 
    441       # Prepare sample weight modes. List with the same length as model outputs.

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/engine/training.py in _handle_metrics(self, outputs, targets, skip_target_masks, sample_weights, masks, return_weighted_metrics, return_weighted_and_unweighted_metrics)
   2002           metric_results.extend(
   2003               self._handle_per_output_metrics(self._per_output_metrics[i],
-&gt; 2004                                               target, output, output_mask))
   2005         if return_weighted_and_unweighted_metrics or return_weighted_metrics:
   2006           metric_results.extend(

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/engine/training.py in _handle_per_output_metrics(self, metrics_dict, y_true, y_pred, mask, weights)
   1953       with K.name_scope(metric_name):
   1954         metric_result = training_utils.call_metric_function(
-&gt; 1955             metric_fn, y_true, y_pred, weights=weights, mask=mask)
   1956         metric_results.append(metric_result)
   1957     return metric_results

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/engine/training_utils.py in call_metric_function(metric_fn, y_true, y_pred, weights, mask)
   1153 
   1154   if y_pred is not None:
-&gt; 1155     return metric_fn(y_true, y_pred, sample_weight=weights)
   1156   # `Mean` metric only takes a single value.
   1157   return metric_fn(y_true, sample_weight=weights)

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/metrics.py in __call__(self, *args, **kwargs)
    194     from tensorflow.python.keras.distribute import distributed_training_utils  # pylint:disable=g-import-not-at-top
    195     return distributed_training_utils.call_replica_local_fn(
--&gt; 196         replica_local_fn, *args, **kwargs)
    197 
    198   @property

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/distribute/distributed_training_utils.py in call_replica_local_fn(fn, *args, **kwargs)
   1133     with strategy.scope():
   1134       return strategy.extended.call_for_each_replica(fn, args, kwargs)
-&gt; 1135   return fn(*args, **kwargs)
   1136 
   1137 

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/metrics.py in replica_local_fn(*args, **kwargs)
    177     def replica_local_fn(*args, **kwargs):
    178       """Updates the state of the metric in a replica-local context."""
--&gt; 179       update_op = self.update_state(*args, **kwargs)  # pylint: disable=not-callable
    180       with ops.control_dependencies([update_op]):
    181         result_t = self.result()  # pylint: disable=not-callable

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/utils/metrics_utils.py in decorated(metric_obj, *args, **kwargs)
     74 
     75     with tf_utils.graph_context_for_symbolic_tensors(*args, **kwargs):
---&gt; 76       update_op = update_state_fn(*args, **kwargs)
     77     if update_op is not None:  # update_op will be None in eager execution.
     78       metric_obj.add_update(update_op)

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/metrics.py in update_state(self, y_true, y_pred, sample_weight)
   1340         top_k=self.top_k,
   1341         class_id=self.class_id,
-&gt; 1342         sample_weight=sample_weight)
   1343 
   1344   def result(self):

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/utils/metrics_utils.py in update_confusion_matrix_variables(variables_to_update, y_true, y_pred, thresholds, top_k, class_id, sample_weight, multi_label, label_weights)
    438       update_ops.append(
    439           weighted_assign_add(label, pred, weights_tiled,
--&gt; 440                               variables_to_update[matrix_cond]))
    441 
    442   return control_flow_ops.group(update_ops)

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/utils/metrics_utils.py in weighted_assign_add(label, pred, weights, var)
    414     if weights is not None:
    415       label_and_pred *= weights
--&gt; 416     return var.assign_add(math_ops.reduce_sum(label_and_pred, 1))
    417 
    418   loop_vars = {

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/resource_variable_ops.py in assign_add(self, delta, use_locking, name, read_value)
    783     with _handle_graph(self.handle), self._assign_dependencies():
    784       assign_add_op = gen_resource_variable_ops.assign_add_variable_op(
--&gt; 785           self.handle, ops.convert_to_tensor(delta, dtype=self.dtype),
    786           name=name)
    787     if read_value:

/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/ops.py in convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, dtype_hint, ctx, accepted_result_types)
   1288       raise ValueError(
   1289           "Tensor conversion requested dtype %s for Tensor with dtype %s: %r" %
-&gt; 1290           (dtype.name, value.dtype.name, value))
   1291     return value
   1292 

ValueError: Tensor conversion requested dtype float64 for Tensor with dtype float32: &lt;tf.Tensor 'metrics_6/class_output_recall_8/Sum:0' shape=(1,) dtype=float32&gt;
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Hemal-Mamtora' date='2020-02-16T06:55:40Z'>
		&lt;denchmark-link:https://github.com/MarkDaoust&gt;@MarkDaoust&lt;/denchmark-link&gt;

Tagging you for escalation. Kindly excuse me if this is unprofessional.
		</comment>
		<comment id='2' author='Hemal-Mamtora' date='2020-02-17T07:07:28Z'>
		&lt;denchmark-link:https://github.com/Hemal-Mamtora&gt;@Hemal-Mamtora&lt;/denchmark-link&gt;
 Could you please confirm if the issue faced by you is similar to existing &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/33365&gt;issue&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='Hemal-Mamtora' date='2020-02-17T12:35:51Z'>
		Yes, seems like TF 2.0 has issues with float 64
Till when would this issue be resolved ?
		</comment>
		<comment id='4' author='Hemal-Mamtora' date='2020-02-18T15:02:52Z'>
		Hi &lt;denchmark-link:https://github.com/Hemal-Mamtora&gt;@Hemal-Mamtora&lt;/denchmark-link&gt;
 ,
I think you're right.
It looks like this is being caused by the mismatch of &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/metrics.py#L146&gt;metric.py recognizing floatx&lt;/denchmark-link&gt;
  but &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/utils/metrics_utils.py#L427&gt;metric_utils.py casting directly to float32&lt;/denchmark-link&gt;
 .
&lt;denchmark-link:https://github.com/pavithrasv&gt;@pavithrasv&lt;/denchmark-link&gt;
, what's the right way to fix this?
		</comment>
		<comment id='5' author='Hemal-Mamtora' date='2020-02-18T17:52:45Z'>
		Thank you &lt;denchmark-link:https://github.com/MarkDaoust&gt;@MarkDaoust&lt;/denchmark-link&gt;
. It should be cast to the predictions' dtype. If anyone would like to work on the fix please feel free to send me a PR.
		</comment>
		<comment id='6' author='Hemal-Mamtora' date='2020-05-03T22:43:05Z'>
		Added a fix and test case in PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/39134&gt;#39134&lt;/denchmark-link&gt;
 that will address this issue.
		</comment>
		<comment id='7' author='Hemal-Mamtora' date='2020-05-28T17:07:19Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36790&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36790&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>