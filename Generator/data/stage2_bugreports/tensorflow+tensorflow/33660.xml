<bug id='33660' author='duncanriach' open_date='2019-10-24T01:53:08Z' closed_time='2020-03-20T20:42:59Z'>
	<summary>tf.test.compute_gradient (v2) expects wrong empty gradient shape</summary>
	<description>
System Information

Have I written custom code: YES (see below)
OS Platform and Distribution: Ubuntu 18.04.3 LTS (inside tensorflow/tensorflow:2.0.0-gpu)
Mobile device: N/A
TensorFlow installed from: binary (inside tensorflow/tensorflow:2.0.0-gpu)
TensorFlow version: 2.0.0
Python version: 2.7.15+
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: 10.0
GPU model and memory: TITANV 12GB

Current Behavior
When the gradient tensors are totally empty (i.e. all their dimensions are zero), and more than one input is considered at the same time,  the shape of an expected gradient tensor does not match the actual shape produced by the op's gradient function. This case is not currently tested in tensorflow/python/ops/gradient_checker_v2_test.py (see testEmptyMatMul).
UPDATE: I also tried the configuration in testEmptyMatMul (see additional code below) and found that this also tickles the apparent bug. Surprisingly, //tensorflow/python:gradient_checker_v2_test passes when running on tag v2.0.0; I don't currently understand why.
I have tested

with two different ops, each with two inputs (both fail).
cases where not all of the gradient tensors are empty (as in testEmptyMatMul).
tf.compat.v1.test.compute_gradient with more than one empty input does not exhibit this behavior, so it was probably not present in tensorflow/python/ops/gradient_checker.py but was introduced in tensorflow/python/ops/gradient_checker_v2.py. See code at the end, in the "TensorFlow Version 1 API" section, that demonstrates this.

I have not tested

using ops with more than two inputs

Expected Behavior
These exceptions should not be produced when using built-in ops. Either the ops' gradient functions are producing the wrong shaped tensors (which would be a bug), or, more likely, the code in gradient_checker_v2.py is expecting the wrong shape.
Code to reproduce the issue
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf

def empty(rank):
  shape = (0,) * rank
  return np.array([]).reshape(shape)

# comment-out the first to run the second
tf.test.compute_gradient(tf.nn.bias_add, [empty(3), empty(1)])
tf.test.compute_gradient(tf.linalg.matmul, [empty(2), empty(3)])
&lt;/denchmark-code&gt;

The following is essentially the same as the code in testEmptyMatMul in tensorflow/python/ops/gradient_checker_v2_test.py:
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf

def random_tensor(shape):
  return tf.constant(np.random.random_sample(shape))

def f(x, y):
  return tf.linalg.matmul(x, y)

x = random_tensor((0, 3))
y = random_tensor((3, 4))

jacobians = tf.test.compute_gradient(f, [x, y])
&lt;/denchmark-code&gt;

Other info / logs
Output from the above code:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "repro_eager_issue.py", line 24, in &lt;module&gt;
    tf.test.compute_gradient(tf.nn.bias_add, [empty(3), empty(1)])
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/ops/gradient_checker_v2.py", line 332, in compute_gradient
    return _compute_gradient_list(f, x, delta)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/ops/gradient_checker_v2.py", line 293, in _compute_gradient_list
    xs, i, delta) for i in range(len(xs))])
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/ops/gradient_checker_v2.py", line 278, in _compute_gradient
    xs, param)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/ops/gradient_checker_v2.py", line 187, in _compute_theoretical_jacobian
    (x.shape, grad.shape))
ValueError: Empty gradient has wrong shape: expected (0,), got (0, 0, 0)

Traceback (most recent call last):
  File "repro_eager_issue.py", line 25, in &lt;module&gt;
    tf.test.compute_gradient(tf.linalg.matmul, [empty(2), empty(3)])
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/ops/gradient_checker_v2.py", line 332, in compute_gradient
    return _compute_gradient_list(f, x, delta)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/ops/gradient_checker_v2.py", line 293, in _compute_gradient_list
    xs, i, delta) for i in range(len(xs))])
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/ops/gradient_checker_v2.py", line 278, in _compute_gradient
    xs, param)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/ops/gradient_checker_v2.py", line 187, in _compute_theoretical_jacobian
    (x.shape, grad.shape))
ValueError: Empty gradient has wrong shape: expected (0, 0, 0), got (0, 0)

Traceback (most recent call last):
  File "tf_issue_33660.py", line 77, in &lt;module&gt;
    existing_test_repro()
  File "tf_issue_33660.py", line 71, in existing_test_repro
    jacobians = tf.test.compute_gradient(f, [x, y])
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/ops/gradient_checker_v2.py", line 332, in compute_gradient
    return _compute_gradient_list(f, x, delta)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/ops/gradient_checker_v2.py", line 293, in _compute_gradient_list
    xs, i, delta) for i in range(len(xs))])
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/ops/gradient_checker_v2.py", line 278, in _compute_gradient
    xs, param)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/ops/gradient_checker_v2.py", line 187, in _compute_theoretical_jacobian
    (x.shape, grad.shape))
ValueError: Empty gradient has wrong shape: expected (3, 4), got (0, 3)
&lt;/denchmark-code&gt;

Work-Around
compute_gradient can be called multiple times, once for each input, to get the analytical and numerical jacobians for each input separately. As, follows:
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf

def empty(rank):
  shape = (0,) * rank
  return np.array([]).reshape(shape)

input_val = empty(3)
bias_val = empty(1)

def bias_add_1(input_val):
  return tf.nn.bias_add(input_val, bias_val)

def bias_add_2(bias_val):
  return tf.nn.bias_add(input_val, bias_val)

input_jacobians = tf.test.compute_gradient(bias_add_1, [input_val])
bias_jacobians = tf.test.compute_gradient(bias_add_2, [bias_val])
&lt;/denchmark-code&gt;

TensorFlow Version 1 API
The following code does not throw an exception, demonstrating that this problem does not exist with tf.compat.v1.test.compute_gradient.
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf

def empty_tensor(shape):
  return tf.constant([], shape=shape)

tf.compat.v1.disable_eager_execution()
input_shape = output_shape = (0, 0, 0)
bias_shape = (0,)
input_tensor = empty_tensor(input_shape)
bias_tensor = empty_tensor(bias_shape)
output_tensor = tf.nn.bias_add(input_tensor, bias_tensor)
with tf.compat.v1.Session() as sess:
  jacobians = tf.compat.v1.test.compute_gradient(
      [input_tensor, bias_tensor], [input_shape, bias_shape], output_tensor,
      output_shape)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='duncanriach' date='2019-10-25T08:31:15Z'>
		Issue replicating for TF-2.0, kindly find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/oanush/839b2999d53195a5dd8c98f22c31ab50/33660.ipynb&gt;gist&lt;/denchmark-link&gt;
 of the colab.Thanks!
		</comment>
		<comment id='2' author='duncanriach' date='2019-10-25T19:39:23Z'>
		I just added an update to the description: "I also tried the configuration in testEmptyMatMul (see additional code) and found that this also tickles the apparent bug. This suggests that tensorflow/python/ops/gradient_checker_v2_test.py is not being run as part of the CI."
I also added some code to the end of the description that demonstrates that tf.compat.v1.test.compute_gradient does not exhibit this behavior.
		</comment>
		<comment id='3' author='duncanriach' date='2019-11-01T18:31:35Z'>
		Surprisingly, //tensorflow/python:gradient_checker_v2_test passes when running on tag v2.0.0; I don't currently understand why.
		</comment>
		<comment id='4' author='duncanriach' date='2020-03-13T11:40:59Z'>
		&lt;denchmark-link:https://github.com/duncanriach&gt;@duncanriach&lt;/denchmark-link&gt;
, I tried with Tf 2.1, its working without any error.
Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/0c11957c6fca4f94461cd57b63040389/untitled456.ipynb&gt;here&lt;/denchmark-link&gt;
 and please close if issue is resolved. Thanks
		</comment>
		<comment id='5' author='duncanriach' date='2020-03-20T20:42:59Z'>
		Thank you, &lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
. I can confirm that this issue is resolved in TensorFlow version 2.1.0. Closing.
		</comment>
		<comment id='6' author='duncanriach' date='2020-03-20T20:43:01Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33660&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33660&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>