<bug id='39912' author='Sidong-Wei' open_date='2020-05-27T16:26:19Z' closed_time='2020-07-09T12:23:12Z'>
	<summary>//tensorflow/python/compiler/xla:jit_test fails on s390x and need to add support for llvm</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): N/A
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 20.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): v2.2.0
Python version: 3.8.2
Bazel version (if compiling from source):2.0.0
GCC/Compiler version (if compiling from source):gcc (Ubuntu 9.3.0-10ubuntu2) 9.3.0
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
I'm building Tensorflow v2.2.0 on s390x (ibm z architecture). When running the test case //tensorflow/python/compiler/xla:jit_test, I got the following error message:
Running tests under Python 3.8.2: /usr/bin/python
[ RUN      ] CompilationEnabledInGradientTest.testCompilationGradientScopeNames_function
2020-05-20 20:23:54.560838: I tensorflow/core/platform/profile_utils/cpu_utils.cc:104] CPU Frequency: 1555500000 Hz
2020-05-20 20:23:54.561101: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x1fce270 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2020-05-20 20:23:54.561105: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
/home/sidong/.cache/bazel/_bazel_sidong/338a466d2403fbfe3413e7ca6003e4cf/execroot/org_tensorflow/bazel-out/s390x-opt/bin/tensorflow/python/compiler/xla/jit_test.runfiles/org_tensorflow/tensorflow/python/framework/indexed_slices.py:349: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working
if not isinstance(values, collections.Sequence):
[       OK ] CompilationEnabledInGradientTest.testCompilationGradientScopeNames_function
[ RUN      ] CompilationEnabledInGradientTest.testCompilationGradientScopeNames_v1_graph
[       OK ] CompilationEnabledInGradientTest.testCompilationGradientScopeNames_v1_graph
[ RUN      ] CompilationEnabledInGradientTest.testCompilationInGradient_function
'z14' is not a recognized processor for this target (ignoring processor)
'z14' is not a recognized processor for this target (ignoring processor)
'z14' is not a recognized processor for this target (ignoring processor)
'z14' is not a recognized processor for this target (ignoring processor)
2020-05-20 20:23:54.964299: F tensorflow/compiler/xla/service/llvm_ir/llvm_util.cc:252] Check failed: module-&gt;getDataLayout().isLittleEndian() == tensorflow::port::kLittleEndian (1 vs. 0)
Fatal Python error: Aborted
Also, similar error messages were also observed in other xla related test cases. Please check below for the code to reproduce the error.
Describe the expected behavior
module-&gt;getDataLayout().isLittleEndian() should return 0.
test case should pass.
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
from tensorflow.python.framework.ops import disable_eager_execution

disable_eager_execution()
sess = tf.compat.v1.Session()
with sess.as_default():
  jit_scope = tf.python.compiler.xla.jit.experimental_jit_scope
  x = tf.constant(3)
  print(x.eval())
  with jit_scope():
    y = tf.constant(5)
  print(x.eval())
  print(y.eval())
&lt;/denchmark-code&gt;

The first two evaluation will return 3 and the third evaluation will fail and throws the error on s390x.
Other info / logs
I dug into this issue and notice that the bug may be caused by llvm configuration. I checked the file third_party/llvm/llvm.autogenerated.BUILD and noticed that "SystemZ", a target that is supported by llvm, is not listed as a target in this BUILD file. I think this could cause llvm not supporting s390x architecture correctly. Since this is an auto-generated file, I wonder how should I modify it and add support for s390x properly?
	</description>
	<comments>
		<comment id='1' author='Sidong-Wei' date='2020-05-28T17:42:01Z'>
		Hi, I have been trying to fix the support issue by modifying the BUILD file directly. The build succeeds and the test case //tensorflow/python/compiler/xla:jit_test passes after applying the patch below:
&lt;denchmark-code&gt;diff --git a/tensorflow/compiler/aot/BUILD b/tensorflow/compiler/aot/BUILD
index dfbea9c49e..181fc5f3e5 100644
--- a/tensorflow/compiler/aot/BUILD
+++ b/tensorflow/compiler/aot/BUILD
@@ -64,6 +64,7 @@ cc_library(
         "@llvm-project//llvm:powerpc_code_gen",  # fixdeps: keep
         "@llvm-project//llvm:target",
         "@llvm-project//llvm:x86_code_gen",  # fixdeps: keep
+	"@llvm-project//llvm:system_z_code_gen",  # fixdeps: keep
     ] + if_llvm_aarch64_available([
         "//third_party/llvm/llvm-project/llvm:aarch64_target",  # fixdeps: keep
     ]),
@@ -105,6 +106,7 @@ cc_library(
         "@llvm-project//llvm:powerpc_code_gen",  # fixdeps: keep
         "@llvm-project//llvm:target",
         "@llvm-project//llvm:x86_code_gen",  # fixdeps: keep
+	"@llvm-project//llvm:system_z_code_gen",  # fixdeps: keep
     ] + if_llvm_aarch64_available([
         "//third_party/llvm/llvm-project/llvm:aarch64_target",  # fixdeps: keep
     ]),
diff --git a/tensorflow/compiler/aot/compile.cc b/tensorflow/compiler/aot/compile.cc
index de58c7f8a8..5c2ae10abf 100644
--- a/tensorflow/compiler/aot/compile.cc
+++ b/tensorflow/compiler/aot/compile.cc
@@ -160,6 +160,10 @@ static void InitializeTargets() {
   LLVMInitializePowerPCTargetInfo();
   LLVMInitializePowerPCTargetMC();
   LLVMInitializePowerPCAsmPrinter();
+  LLVMInitializeSystemZTarget();
+  LLVMInitializeSystemZTargetInfo();
+  LLVMInitializeSystemZTargetMC();
+  LLVMInitializeSystemZAsmPrinter();
   LLVMInitializeX86Target();
   LLVMInitializeX86TargetInfo();
   LLVMInitializeX86TargetMC();
diff --git a/tensorflow/compiler/xla/service/cpu/BUILD b/tensorflow/compiler/xla/service/cpu/BUILD
index 7e1b8a1e7e..39ce2aae58 100644
--- a/tensorflow/compiler/xla/service/cpu/BUILD
+++ b/tensorflow/compiler/xla/service/cpu/BUILD
@@ -185,6 +185,9 @@ cc_library(
         "//tensorflow:linux_ppc64le": [
             "@llvm-project//llvm:powerpc_code_gen",  # fixdeps: keep
         ],
+	"//tensorflow:linux_s390x": [
+            "@llvm-project//llvm:system_z_code_gen",  # fixdeps: keep
+        ],
         "//conditions:default": [
         ],
     }),
diff --git a/third_party/llvm/llvm.autogenerated.BUILD b/third_party/llvm/llvm.autogenerated.BUILD
index a89838ebac..ee4097a9fd 100644
--- a/third_party/llvm/llvm.autogenerated.BUILD
+++ b/third_party/llvm/llvm.autogenerated.BUILD
@@ -33,6 +33,7 @@ llvm_targets = [
     "NVPTX",
     "PowerPC",
     "X86",
+    "SystemZ",
 ]
 
 llvm_target_asm_parsers = llvm_targets
@@ -538,6 +539,22 @@ llvm_target_list = [
             ("-gen-disassembler", "lib/Target/PowerPC/PPCGenDisassemblerTables.inc"),
         ],
     },
+    {
+        "name": "SystemZ",
+        "lower_name": "system_z",
+        "short_name": "SystemZ",
+        "tbl_outs": [
+            ("-gen-asm-writer", "lib/Target/SystemZ/SystemZGenAsmWriter.inc"),
+            ("-gen-asm-matcher", "lib/Target/SystemZ/SystemZGenAsmMatcher.inc"),
+            ("-gen-emitter", "lib/Target/SystemZ/SystemZGenMCCodeEmitter.inc"),
+            ("-gen-register-info", "lib/Target/SystemZ/SystemZGenRegisterInfo.inc"),
+            ("-gen-instr-info", "lib/Target/SystemZ/SystemZGenInstrInfo.inc"),
+            ("-gen-dag-isel", "lib/Target/SystemZ/SystemZGenDAGISel.inc"),
+            ("-gen-callingconv", "lib/Target/SystemZ/SystemZGenCallingConv.inc"),
+            ("-gen-subtarget", "lib/Target/SystemZ/SystemZGenSubtargetInfo.inc"),
+            ("-gen-disassembler", "lib/Target/SystemZ/SystemZGenDisassemblerTables.inc"),
+        ],
+    },
     {
         "name": "X86",
         "lower_name": "x86",
@@ -655,6 +672,7 @@ cc_library(
         ":nvptx_code_gen",
         ":powerpc_code_gen",
         ":x86_code_gen",
+        ":system_z_code_gen",
     ],
 )
 
@@ -3859,6 +3877,7 @@ cc_library(
         ":mc",
         ":support",
         ":system_z_info",
+        ":system_z_target_gen",
     ],
 )
 
@@ -3892,6 +3911,7 @@ cc_library(
         "lib/Target/SystemZ/TargetInfo/*.c",
         "lib/Target/SystemZ/TargetInfo/*.cpp",
         "lib/Target/SystemZ/TargetInfo/*.inc",
+        "lib/Target/SystemZ/MCTargetDesc/*.h",
     ]),
     hdrs = glob([
         "include/llvm/Target/SystemZ/TargetInfo/*.h",
@@ -3903,6 +3923,7 @@ cc_library(
     deps = [
         ":config",
         ":support",
+        ":system_z_target_gen",
     ],
 )
 
diff --git a/third_party/llvm/llvm.bzl b/third_party/llvm/llvm.bzl
index f48cf84b0e..b8ecce553f 100644
--- a/third_party/llvm/llvm.bzl
+++ b/third_party/llvm/llvm.bzl
@@ -333,6 +333,14 @@ llvm_all_cmake_vars = select({
             posix_cmake_vars,
         ),
     ),
+    "@org_tensorflow//tensorflow:linux_s390x": cmake_var_string(
+        _dict_add(
+            cmake_vars,
+            llvm_target_cmake_vars("SystemZ", "s390x-unknown-linux_gnu"),
+            posix_cmake_vars,
+	    linux_cmake_vars,
+        ),
+    ),
     "//conditions:default": cmake_var_string(
         _dict_add(
             cmake_vars,
&lt;/denchmark-code&gt;

I have tested this patch on Ubuntu 20.04 with s390x architecture, and I wonder will this be a legit way to add llvm support for a new architecture? Thanks.
Sidong
		</comment>
		<comment id='2' author='Sidong-Wei' date='2020-07-09T12:23:11Z'>
		It has been fixed with the PR.
		</comment>
		<comment id='3' author='Sidong-Wei' date='2020-07-09T12:23:14Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39912&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39912&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>