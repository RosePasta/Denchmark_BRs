<bug id='29310' author='edwardyehuang' open_date='2019-06-02T06:04:38Z' closed_time='2019-08-05T04:10:37Z'>
	<summary>keras.model.load_weights does not consider custom model(layer)</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):Ubuntu 18.04
TensorFlow installed from (source or binary): conda/Anaconda
TensorFlow version (use command below):1.13 (Issue still existed in the latest source code)

I failed to load the official Resnet h5 weights with self implemented Resnet using the tf.keras.model.
I found the behaviour of load_weights in network.py does not considered the sub tf.keras.model.
For example, the Resnet has a ConvBlock and a IdentityBlock. Instead of use a function to define them, I used tf.keras.model to define them, so it followed the latest standard.
Instead of simply pass the self.layers to load_weights_from_hdf5_group_by_name.  The load_weights function is network.py should collect all layers inside the sub model, then pass to load_weights_from_hdf5_group_by_name.
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/engine/network.py&gt;network.py&lt;/denchmark-link&gt;
 line 1415
Suggested naive fix:
&lt;denchmark-code&gt;def get_all_layers (model : tf.keras.Model):

    layers = []

    for layer in model.layers:
        if isinstance(layer, tf.keras.Model):
            layers.extend(get_all_layers(layer))
        else:
            layers.append(layer)

    return layers
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='edwardyehuang' date='2019-06-02T08:08:28Z'>
		Confirmed again, this issue is existed
		</comment>
		<comment id='2' author='edwardyehuang' date='2019-06-03T08:41:46Z'>
		Will it be possible to provide a minimal code snippet that can reproduce the issue. It will really help us to understand the issue more clearly. Thanks!
		</comment>
		<comment id='3' author='edwardyehuang' date='2019-06-03T09:50:52Z'>
		For example
&lt;denchmark-code&gt;import tensorflow as tf

class ConvBlock(tf.keras.Model):

    def __init__(self, kernel_size, filters, stage, block, strides=(2, 2), weight_decay = 0., momentum = 0.9):

        super(ConvBlock, self).__init__()

        filters1, filters2, filters3 = filters

        conv_name_base = 'res' + str(stage) + block + '_branch'
        bn_name_base = 'bn' + str(stage) + block + '_branch'

        self.conv2a = tf.keras.layers.Conv2D(filters1, (1, 1), strides=strides, kernel_initializer='he_normal', name=conv_name_base + '2a', kernel_regularizer=tf.keras.regularizers.l2(weight_decay))
        self.bn2a   = tf.keras.layers.BatchNormalization(name=bn_name_base + '2a', momentum=momentum)

        # ...........................................

    def call(self, input):

        #............................................


class Resnet (tf.keras.Model):

    def __init__ (self, weight_decay = 0., momentum = 0.9):

        super(Resnet, self).__init__()

        self.conv1_pad  = tf.keras.layers.ZeroPadding2D(padding=(3, 3), name='conv1_pad')
        self.conv1      = tf.keras.layers.Conv2D(64, (7, 7), strides=(2, 2), padding='valid', kernel_initializer='he_normal', name='conv1', kernel_regularizer=tf.keras.regularizers.l2(weight_decay))
        self.bn_conv1   = tf.keras.layers.BatchNormalization(name='bn_conv1', momentum=momentum)

        self.pool1_pad  = tf.keras.layers.ZeroPadding2D(padding=(1, 1), name='pool1_pad')
        self.pool1      = tf.keras.layers.MaxPooling2D((3, 3), strides=(2, 2))
        
        # SubModel Weights not loaded
        self.conv_block2a = ConvBlock(3, [64, 64, 256], stage=2, block='a', strides=(1, 1))   
        
        #...............................................


# Test code 

resnet = Resnet()
resnet(tf.zeros([1, 512, 512, 3]))
resnet.load_weights("resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5", by_name=True)

&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='edwardyehuang' date='2019-06-03T09:52:12Z'>
		The tf.keras.Model.load_weights will not load the weights for the ConvBlock in above code. Because the Load_weights only passed the self.layers to load_weights_from_hdf5_group_by_name
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/engine/network.py&gt;network.py&lt;/denchmark-link&gt;
 1415
		</comment>
		<comment id='5' author='edwardyehuang' date='2019-07-24T20:56:21Z'>
		&lt;denchmark-link:https://github.com/edwardyehuang&gt;@edwardyehuang&lt;/denchmark-link&gt;
 Can you provide a standalone code to reproduce the issue? The current code shows Modelcall. Thanks!
		</comment>
		<comment id='6' author='edwardyehuang' date='2019-07-25T00:51:45Z'>
		
@edwardyehuang Can you provide a standalone code to reproduce the issue? The current code shows NotImplementedError: When subclassing the Modelclass, you should implement acall method.. Thanks!

The example above is not a full code
		</comment>
		<comment id='7' author='edwardyehuang' date='2019-07-25T00:57:50Z'>
		&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3429272/resnet.zip&gt;resnet.zip&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='edwardyehuang' date='2019-07-25T01:08:47Z'>
		Cannot believe you guys still cannot understand my issue...
For example,
Conv2d is the subclass of tf.keras.layer
Resnet and ConvBlock are the subclass of tf.keras.Model
A Resnet class contains Conv2d and ConvBlock instances
A ConvBlock contains Conv2d instances
When doing the load h5 weight by name for Resnet. It will only load the weights for the tf.keras.layer instances in Resnet. The tf.keras.layer instances in ConvBlock are ignored
		</comment>
		<comment id='9' author='edwardyehuang' date='2019-07-25T01:34:41Z'>
		Hmm...AFAIK .layers has issues for functional and subclassed models. But if with the solution you proposed it works fine, then we'd appreciate if you want to contribute.
		</comment>
		<comment id='10' author='edwardyehuang' date='2019-07-26T10:52:25Z'>
		&lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/31049&gt;#31049&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='edwardyehuang' date='2019-08-05T04:10:37Z'>
		Closing this. Let's move discussion to the PR.
		</comment>
		<comment id='12' author='edwardyehuang' date='2019-08-05T04:10:39Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=29310&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=29310&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='edwardyehuang' date='2019-10-27T03:22:58Z'>
		&lt;denchmark-link:https://github.com/edwardyehuang&gt;@edwardyehuang&lt;/denchmark-link&gt;

it seems that  load_weights(.h5, by_name=True) not work when changing the one layer of  subclassed model name(in faster rcnn) ,it still raise erro about shape dismatch:
&lt;denchmark-code&gt;ValueError: Layer #4 (named "b_box_head"), weight &lt;tf.Variable 'faster_rcnn/b_box_head/new_rcnn_class_logits/kernel:0' shape=(1024, 3) dtype=float32, numpy=
array([[ 0.01749247,  0.02859198, -0.05616229],
       [-0.02462629, -0.00092562,  0.01323454],
       [-0.00727267,  0.06154063, -0.04503936],
       ...,
       [-0.00280149,  0.07457583,  0.00443103],
       [-0.01985164,  0.05016208,  0.01354645],
       [-0.05778077, -0.00505048,  0.04575966]], dtype=float32)&gt; has shape (1024, 3), but the saved weight has shape (1024, 81).

&lt;/denchmark-code&gt;

Layer &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/4&gt;#4&lt;/denchmark-link&gt;
 (named "b_box_head") including some layers, and i change the one layer name from 'rcnn_class_logits' to 'new_rcnn_class_logits' according to the KERAS site, but when loading, it still load the weigths of 'rcnn_class_logits', any helps? thanks
and i can get the weights .h5 name
&lt;denchmark-code&gt;print(f.get("b_box_head/rcnn_class_logits/kernel:0"))
&lt;HDF5 dataset "kernel:0": shape (1024, 81), type "&lt;f4"&gt;
&lt;/denchmark-code&gt;

ubuntu 16 +python 3 + tf2
		</comment>
	</comments>
</bug>