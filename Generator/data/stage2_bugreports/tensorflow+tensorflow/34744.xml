<bug id='34744' author='ostruk' open_date='2019-12-02T04:15:25Z' closed_time='2020-06-17T05:09:24Z'>
	<summary>Nested TensorArray using tf.function. Write-&amp;gt;concat-&amp;gt;write</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):

Yes

OS Platform and Distribution (e.g., Linux Ubuntu 16.04):

Windows 10 Pro 1809. OS Build: 17763.503

Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:

Not applicable

TensorFlow installed from (source or binary):

binary, via pip
pip3 install --user --upgrade tensorflow-gpu

TensorFlow version (use command below):

v2.0.0-rc2-26-g64c3d382ca 2.0.0

Python version:

3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)]

Bazel version (if compiling from source):

Not applicable

GCC/Compiler version (if compiling from source):

Not applicable

CUDA/cuDNN version:

Cuda compilation tools, release 10.0, V10.0.130
cuDNN: cudnn-10.0-windows10-x64-v7.6.5.32

GPU model and memory:

GTX 1060 Ti, 6Gb
Describe the current behavior
I have two functions, one calling another, in the inner function, I'm accumulating some data into a TensorArray, then return TensorArray.concat() result to the outer function. In the outer function I have a loop that calls the inner function. On each call, it retrieves the result of the inner function and writes it to it's own TensorArray. The operations could be summarized as write-&gt;concat-&gt;write. The whole program runs some random number of iterations before crashing, likely due to some non-deterministic execution of the graph, perhaps something to do with control dependencies?
Observations:

The higher the number of iterations in the outer function (currently 50), the more quickly it fails.
It appears 3 is a minimum number of iterations inside the outer function for the issue to occur
Issue occurs only on GPU (CPU does fine, using os.environ["CUDA_VISIBLE_DEVICES"] = "-1"). It does not occur in eager execution mode.
Code generates a series of different errors, sporadically (see below)
The functions do not need to be nested for the issue to occur (see reduced code version below)
You can remove infer_shape=False, element_shape=(3,) and see it generate a different error:
tensorflow.python.framework.errors_impl.InvalidArgumentError:  Trying to concat list with only uninitialized tensors but element_shape_except_first_dim_ is not fully defined: []	  [[{{node while/body/_1/TensorListConcatV2}}]] [Op:__inference_computeElement_71] 
It may take many runs to encounter an error (up to a 1000 on my machine)

Describe the expected behavior
Code producing same result and running indefinitely.
Code to reproduce the issue
@tf.function
def computeElement_byBin():
	c = tf.TensorArray(tf.int64, size=1, infer_shape=False, element_shape=(3,))
	const = tf.cast(tf.constant([1, 2, 3]), tf.int64)
	c = c.write(0, const)
	c_c = c.concat()
	return c_c

@tf.function
def computeElement():
	c = tf.TensorArray(tf.int64, size=50, infer_shape=False, element_shape=(3,))
	for x in tf.range(50):
		byBinVariant = computeElement_byBin()
		c = c.write(x, byBinVariant)

	return tf.constant([1, 2, 3])

k=0
while True:
	k+=1
	r = computeElement()
	print('iteration: %s, result: %s'%(k,r))
Here's a reduced version of code, without nesting (behaves similarly):
@tf.function
def computeElement():
	tensorArray1 = tf.TensorArray(tf.int32, size=50, infer_shape=False, element_shape=(3,))
	tensorArray2 = tf.TensorArray(tf.int32, size=1, infer_shape=False, element_shape=(3,))
	const = tf.constant([1, 2, 3])
	for x in tf.range(50):
		tensorArray2 = tensorArray2.write(0, const)
		concat = tensorArray2.concat()
		tensorArray1=tensorArray1.write(x, concat)
	return tf.constant(1)

k=0
while True:
	k+=1
	r = computeElement()
	print('iteration: %s, result: %s'%(k,r))
Other info / logs
Output (example):
&lt;denchmark-code&gt;2019-12-01 23:29:49.834579: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2019-12-01 23:29:50.917651: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library nvcuda.dll
2019-12-01 23:29:50.988907: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties:
name: GeForce GTX 1660 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.77
pciBusID: 0000:01:00.0
2019-12-01 23:29:50.992256: I tensorflow/stream_executor/platform/default/dlopen_checker_stub.cc:25] GPU libraries are statically linked, skip dlopen check.
2019-12-01 23:29:50.995402: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2019-12-01 23:29:50.996693: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2
2019-12-01 23:29:50.999987: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties:
name: GeForce GTX 1660 Ti major: 7 minor: 5 memoryClockRate(GHz): 1.77
pciBusID: 0000:01:00.0
2019-12-01 23:29:51.001975: I tensorflow/stream_executor/platform/default/dlopen_checker_stub.cc:25] GPU libraries are statically linked, skip dlopen check.
2019-12-01 23:29:51.003600: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2019-12-01 23:29:51.501197: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-12-01 23:29:51.503618: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0
2019-12-01 23:29:51.505070: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N
2019-12-01 23:29:51.506907: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 4629 MB memory) -&gt; physical GPU (device: 0, name: GeForce GTX 1660 Ti, pci bus id: 0000:01:00.0, compute capability: 7.5)

iteration: 1, result: tf.Tensor([1 2 3], shape=(3,), dtype=int32)
iteration: 2, result: tf.Tensor([1 2 3], shape=(3,), dtype=int32)
iteration: 3, result: tf.Tensor([1 2 3], shape=(3,), dtype=int32)
iteration: 4, result: tf.Tensor([1 2 3], shape=(3,), dtype=int32)
iteration: 5, result: tf.Tensor([1 2 3], shape=(3,), dtype=int32)
iteration: 6, result: tf.Tensor([1 2 3], shape=(3,), dtype=int32)
r=outer()
  File "Python\Python37\lib\site-packages\tensorflow_core\python\eager\def_function.py", line 457, in __call__
    result = self._call(*args, **kwds)
  File "Python\Python37\lib\site-packages\tensorflow_core\python\eager\def_function.py", line 494, in _call
    results = self._stateful_fn(*args, **kwds)
  File "Python\Python37\lib\site-packages\tensorflow_core\python\eager\function.py", line 1823, in __call__
    return graph_function._filtered_call(args, kwargs)  # pylint: disable=protected-access
  File "Python\Python37\lib\site-packages\tensorflow_core\python\eager\function.py", line 1141, in _filtered_call
    self.captured_inputs)
  File "Python\Python37\lib\site-packages\tensorflow_core\python\eager\function.py", line 1224, in _call_flat
    ctx, args, cancellation_manager=cancellation_manager)
  File "Python\Python37\lib\site-packages\tensorflow_core\python\eager\function.py", line 511, in call
    ctx=ctx)
  File "Python\Python37\lib\site-packages\tensorflow_core\python\eager\execute.py", line 67, in quick_execute
    six.raise_from(core._status_to_exception(e.code, message), None)
  File "&lt;string&gt;", line 3, in raise_from
tensorflow.python.framework.errors_impl.InvalidArgumentError:  Tried to set a tensor with incompatible shape at a list index. Item element shape: [3,3] list shape: [3]
	 [[{{node while/body/_1/TensorArrayV2Write/TensorListSetItem}}]] [Op:__inference_computeElement_79]
&lt;/denchmark-code&gt;

Other errors that code may generate:
&lt;denchmark-code&gt;Process finished with exit code -1073740791 (0xC0000409)
(No stack trace)
&lt;/denchmark-code&gt;

or
&lt;denchmark-code&gt;2019-12-01 23:10:55.194128: F tensorflow/core/framework/tensor_shape.cc:445] Check failed: end &lt;= dims() (1 vs. 0)

Process finished with exit code -1073740791 (0xC0000409)
&lt;/denchmark-code&gt;

Cheers!
	</description>
	<comments>
		<comment id='1' author='ostruk' date='2019-12-02T04:43:55Z'>
		New observation: using stack() instead of concat() eliminates the issue (I would like to use concat though, because in reality my tensors are un-even on one dimension).
@tf.function
def computeElement():
	tensorArray1 = tf.TensorArray(tf.int32, size=50)#, infer_shape=False, element_shape=(3,))
	tensorArray2 = tf.TensorArray(tf.int32, size=1)#, infer_shape=False, element_shape=(3,))
	const = tf.constant([1, 2, 3])
	for x in tf.range(50):
		tensorArray2 = tensorArray2.write(0, tf.transpose(const))
		concat = tensorArray2.stack()
		tensorArray1=tensorArray1.write(x, concat)
	return tf.constant(1)
		</comment>
		<comment id='2' author='ostruk' date='2019-12-03T06:18:37Z'>
		Issue is replicating with Tf 2.0.
Please see the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/6a1fd005c737b2f40e87756864b049bc/untitled288.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='3' author='ostruk' date='2019-12-05T02:29:14Z'>
		I played around with it more and narrowed it down a bit:
@tf.function
def computeElement():
    tarr = tf.TensorArray(tf.int32, size=1,clear_after_read=False)
    tarr = tarr.write(0, [1])
    concat = tarr.concat()

    # PROBLEM HERE
    for x in tf.range(50):
        concat = tarr.concat()

    return concat
If you set tf.config.threading.set_inter_op_parallelism_threads(1) the bug goes away, which means it's to do with parallelization of the unrolled tensorflow loop. Knowing that tensorflow unrolls statically when looping over a python variable rather than a tensor, I could confirm that this code worked:
@tf.function
def computeElement(arr):
    tarr = tf.TensorArray(tf.int32, size=1)
    tarr = tarr.write(0, [1])
    concat = tarr.concat()

    a = 0
    while a&lt;arr:
        concat = tarr.concat()
        a+=1

    return concat

k = 0
while True:
    k += 1
    r = computeElement(50)
So solution for now is to loop over a python variable rather than a tensor. Perhaps would be nice to get an error when invoking a non-thread safe method inside a thread, but syntactically I don't see anything wrong with this. I guess one concern with current solution would be performance, as whatever else might be in the loop would be single-threaded.
		</comment>
		<comment id='4' author='ostruk' date='2020-06-03T04:14:34Z'>
		&lt;denchmark-link:https://github.com/ostruk&gt;@ostruk&lt;/denchmark-link&gt;
 Sorry for the late response. Is this still an issue for you? I ran your code and it was not crashing for more than 490K iterations. Manually interrupted the code from execution. Please take a look at the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/2583297555553625054f7339b0e41bd1/untitled288.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
&lt;denchmark-code&gt;iteration: 492551, result: tf.Tensor(1, shape=(), dtype=int32)
iteration: 492552, result: tf.Tensor(1, shape=(), dtype=int32)
iteration: 492553, result: tf.Tensor(1, shape=(), dtype=int32)
iteration: 492554, result: tf.Tensor(1, shape=(), dtype=int32)
&lt;/denchmark-code&gt;

Please verify once and close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='5' author='ostruk' date='2020-06-10T04:34:36Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='6' author='ostruk' date='2020-06-17T05:09:20Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='7' author='ostruk' date='2020-06-17T05:09:25Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34744&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34744&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>