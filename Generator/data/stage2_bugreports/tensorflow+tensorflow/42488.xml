<bug id='42488' author='Haskely' open_date='2020-08-19T08:42:48Z' closed_time='2020-09-02T16:22:22Z'>
	<summary>Questions about ctc_decode in tensorflow&amp;keras</summary>
	<description>



tensorflow/tensorflow/python/ops/ctc_ops.py


        Lines 288 to 335
      in
      b36436b






 @tf_export("nn.ctc_greedy_decoder") 



 @dispatch.add_dispatch_support 



 def ctc_greedy_decoder(inputs, sequence_length, merge_repeated=True): 



 """Performs greedy decoding on the logits given in input (best path). 



  



   Note: Regardless of the value of merge_repeated, if the maximum index of a 



   given time and batch corresponds to the blank index `(num_classes - 1)`, no 



   new element is emitted. 



  



   If `merge_repeated` is `True`, merge repeated classes in output. 



   This means that if consecutive logits' maximum indices are the same, 



   only the first of these is emitted.  The sequence `A B B * B * B` (where '*' 



   is the blank label) becomes 



  



     * `A B B B` if `merge_repeated=True`. 



     * `A B B B B` if `merge_repeated=False`. 



  



   Args: 



     inputs: 3-D `float` `Tensor` sized `[max_time, batch_size, num_classes]`. 



       The logits. 



     sequence_length: 1-D `int32` vector containing sequence lengths, having size 



       `[batch_size]`. 



     merge_repeated: Boolean.  Default: True. 



  



   Returns: 



     A tuple `(decoded, neg_sum_logits)` where 



  



     decoded: A single-element list. `decoded[0]` 



       is an `SparseTensor` containing the decoded outputs s.t.: 



  



       `decoded.indices`: Indices matrix `(total_decoded_outputs, 2)`. 



         The rows store: `[batch, time]`. 



  



       `decoded.values`: Values vector, size `(total_decoded_outputs)`. 



         The vector stores the decoded classes. 



  



       `decoded.dense_shape`: Shape vector, size `(2)`. 



         The shape values are: `[batch_size, max_decoded_length]` 



  



     neg_sum_logits: A `float` matrix `(batch_size x 1)` containing, for the 



         sequence found, the negative of the sum of the greatest logit at each 



         timeframe. 



   """ 



 outputs = gen_ctc_ops.ctc_greedy_decoder( 



 inputs, sequence_length, merge_repeated=merge_repeated) 



   (decoded_ix, decoded_val, decoded_shape, log_probabilities) = outputs 



 return ([sparse_tensor.SparseTensor(decoded_ix, decoded_val, 



 decoded_shape)], log_probabilities) 





About this function: tf.nn.ctc_greedy_decoder
[https://www.tensorflow.org/api_docs/python/tf/nn/ctc_greedy_decoder]
I want to know how this function specifies the Class Index to be used for the BLANK LABEL
Beacuse:
&lt;denchmark-h:h1&gt;gen_ctc_ops.ctc_loss_v2 differs from gen_ctc_ops.ctc_loss. v2 assumes the blank index to be 0, but v1 views it as the last index.&lt;/denchmark-h&gt;

If it doesn't know which is the BLANK LABEL, how to combine and del BLANK LABEL for the final result?
If it takes the last index as a blank label by default, there is a contradiction with the new version of the API
	</description>
	<comments>
		<comment id='1' author='Haskely' date='2020-08-19T09:27:54Z'>
		


tensorflow/tensorflow/core/kernels/ctc_decoder_ops.cc


        Lines 223 to 224
      in
      a195c75






 // Assumption: the blank index is num_classes - 1 



 int blank_index = num_classes - 1; 





I have found its implementation in the c language source code, and found that it does takes num_classes - 1 as the blank label by default, so this is a bug.
		</comment>
		<comment id='2' author='Haskely' date='2020-08-19T09:30:04Z'>
		&lt;denchmark-link:https://github.com/Haskely&gt;@Haskely&lt;/denchmark-link&gt;

Please fill in the issue template for us to help you.
		</comment>
		<comment id='3' author='Haskely' date='2020-08-26T15:25:41Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='4' author='Haskely' date='2020-09-02T16:22:20Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
	</comments>
</bug>