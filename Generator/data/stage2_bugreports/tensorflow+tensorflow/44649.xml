<bug id='44649' author='moha23' open_date='2020-11-06T13:27:09Z' closed_time='2020-11-25T21:26:05Z'>
	<summary>ValueError: All inputs to `ConcreteFunction`s must be Tensors</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): linux 20.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): pip
TensorFlow version (use command below): 2.1.2
Python version: 3.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: 10.1/7.4
GPU model and memory: gtx1080Ti

Describe the current behavior
Tf.train_on_batch cant take numpy array as input, asks for tensor and even using tf.convert_to_tensor doesn't help. It works in Tf2.3, but Tf2.1 is a requirement for compatibility with another library.
Describe the expected behavior
Should train without issues, tested on Tf2.3 and it works, but Tf2.1 is a requirement.
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow.keras.layers import (Conv2D,Input)
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
import tensorflow_addons as tfa #version 0.9.1

opt = Adam(lr=1e-4)
tf.config.experimental_run_functions_eagerly(True)


def custom_mean_squared_error(y_true, y_pred):
    return(tf.reduce_mean(tf.math.squared_difference(y_true, y_pred)))


def firstStream(ip):
        layer = Conv2D(64, kernel_size=(5, 5), padding='same')(ip)
        op = Conv2D(3, (5, 5), activation='sigmoid', padding='same')(layer)
        return op
    
def secStream(ip):
        layer = Conv2D(8, kernel_size=(5, 5), padding='same')(ip)
        flow = Conv2D(2, (5, 5), activation='sigmoid', padding='same')(layer)
        return flow


def main():

    ip = Input(shape=(None, None, 3))
    op = firstStream(ip)
    flow = secStream(ip)
    warped = tf.expand_dims(tfa.image.dense_image_warp(op,flow,name='warp'),axis=1)
    model = Model(ip,warped)
    model.compile(optimizer=opt, loss=custom_mean_squared_error)
        
    numEpochs = 1

    for epochNo in range(numEpochs):

            print("Running epoch : %d" % epochNo)
            batch_ip=np.ones((1,64,64,3))
                  
            curr_loss = model.train_on_batch(batch_ip, batch_ip)
            print(curr_loss)


main()
&lt;/denchmark-code&gt;

Other info / logs
main()
File "/home/mohana/work/simple.py", line 46, in main
curr_loss = model.train_on_batch(batch_ip, batch_ip)
File "/home/mohana/virtualenvs/tfcomp/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training.py", line 1078, in train_on_batch
standalone=True)
File "/home/mohana/virtualenvs/tfcomp/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py", line 433, in train_on_batch
output_loss_metrics=model._output_loss_metrics)
File "/home/mohana/virtualenvs/tfcomp/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_eager.py", line 312, in train_on_batch
output_loss_metrics=output_loss_metrics))
File "/home/mohana/virtualenvs/tfcomp/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_eager.py", line 269, in _process_single_batch
grads = tape.gradient(scaled_total_loss, trainable_weights)
File "/home/mohana/virtualenvs/tfcomp/lib/python3.6/site-packages/tensorflow_core/python/eager/backprop.py", line 1029, in gradient
unconnected_gradients=unconnected_gradients)
File "/home/mohana/virtualenvs/tfcomp/lib/python3.6/site-packages/tensorflow_core/python/eager/imperative_grad.py", line 77, in imperative_grad
compat.as_str(unconnected_gradients.value))
File "/home/mohana/virtualenvs/tfcomp/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py", line 1256, in _backward_function_wrapper
processed_args, remapped_captures)
File "/home/mohana/virtualenvs/tfcomp/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py", line 1684, in _call_flat
"Tensor." % (self._func_graph.name, i, str(arg)))
ValueError: All inputs to ConcreteFunctions must be Tensors; on invocation of __backward__defun_call_1331, the 0-th input (IndexedSlices(indices=tf.Tensor([  65   65   66 ... 4028 4029 4030], shape=(16384,), dtype=int32), values=tf.Tensor(
[[-0.0000000e+00 -0.0000000e+00 -0.0000000e+00]
[-0.0000000e+00 -0.0000000e+00 -0.0000000e+00]
[-0.0000000e+00 -0.0000000e+00 -0.0000000e+00]
...
[-2.7218828e-05 -2.6730117e-05 -2.4183297e-05]
[-2.7333013e-05 -2.7423557e-05 -2.2896325e-05]
[-2.1508897e-05 -2.1834361e-05 -1.8788463e-05]], shape=(16384, 3), dtype=float32), dense_shape=tf.Tensor([4096    3], shape=(2,), dtype=int32))) was not a Tensor.
	</description>
	<comments>
		<comment id='1' author='moha23' date='2020-11-09T11:37:33Z'>
		&lt;denchmark-link:https://github.com/moha23&gt;@moha23&lt;/denchmark-link&gt;

The issue exist in tf 2.1 and it has been fixed in the later versions, as i have tried on nightly and this bug is fixed, please find the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/eef3c2923cd0807f4afbdf56e72ff27e/untitled458.ipynb&gt;gist here&lt;/denchmark-link&gt;
, can you please upgrade your tf version.
		</comment>
		<comment id='2' author='moha23' date='2020-11-09T15:56:27Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 hi, as I mentioned I also tried in tf2.3 and it works without error, but tf2.1 is a requirement due to another libraries dependency. Is there a patch I can apply to the source codes may be?
		</comment>
		<comment id='3' author='moha23' date='2020-11-11T20:04:49Z'>
		&lt;denchmark-link:https://github.com/moha23&gt;@moha23&lt;/denchmark-link&gt;
 Please check the TF code base to find which patch works best for you.
GitHub is mainly for bugs/performance related issues. Please post any support kind of questions in Stackoverflow where there is big community to support and learn. Thanks!
		</comment>
		<comment id='4' author='moha23' date='2020-11-18T20:41:52Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='5' author='moha23' date='2020-11-25T21:26:04Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='6' author='moha23' date='2020-11-25T21:26:06Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44649&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44649&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='moha23' date='2020-11-27T04:28:35Z'>
		Solution here : &lt;denchmark-link:https://github.com/tensorflow/addons/issues/2232#issuecomment-734057727&gt;tensorflow/addons#2232 (comment)&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>