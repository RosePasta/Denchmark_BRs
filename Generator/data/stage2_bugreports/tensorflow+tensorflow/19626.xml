<bug id='19626' author='byronyi' open_date='2018-05-29T15:01:06Z' closed_time='2018-12-14T02:25:08Z'>
	<summary>FailedPreconditionError: Table already initialized when use Feature Column in Eager mode</summary>
	<description>

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Latest Mac OS
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.8.0
Python version: 3.6.5
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce: see below

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.
---------------------------------------------------------------------------
FailedPreconditionError                   Traceback (most recent call last)
&lt;ipython-input-2-443ffe416ebf&gt; in &lt;module&gt;()
      7 
      8 features = df.to_dict('series')
----&gt; 9 input_layer = tf.feature_column.input_layer(features, columns)

/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in input_layer(features, feature_columns, weight_collections, trainable, cols_to_vars)
    275   """
    276   return _internal_input_layer(features, feature_columns, weight_collections,
--&gt; 277                                trainable, cols_to_vars)
    278 
    279 

/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _internal_input_layer(features, feature_columns, weight_collections, trainable, cols_to_vars, scope)
    200             builder,
    201             weight_collections=weight_collections,
--&gt; 202             trainable=trainable)
    203         num_elements = column._variable_shape.num_elements()  # pylint: disable=protected-access
    204         batch_size = array_ops.shape(tensor)[0]

/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _get_dense_tensor(***failed resolving arguments***)
   3300     # Feature has been already transformed. Return the intermediate
   3301     # representation created by _transform_feature.
-&gt; 3302     return inputs.get(self)
   3303 
   3304   def _get_sequence_dense_tensor(

/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in get(self, key)
   2098     column = key
   2099     logging.debug('Transforming feature_column %s.', column)
-&gt; 2100     transformed = column._transform_feature(self)  # pylint: disable=protected-access
   2101     if transformed is None:
   2102       raise ValueError('Column {} is not supported.'.format(column.name))

/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _transform_feature(self, inputs)
   3229       ValueError: if input rank is not known at graph building time.
   3230     """
-&gt; 3231     id_weight_pair = self.categorical_column._get_sparse_tensors(inputs)  # pylint: disable=protected-access
   3232     id_tensor = id_weight_pair.id_tensor
   3233     weight_tensor = id_weight_pair.weight_tensor

/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _get_sparse_tensors(self, inputs, weight_collections, trainable)
   2872   def _get_sparse_tensors(
   2873       self, inputs, weight_collections=None, trainable=None):
-&gt; 2874     return _CategoricalColumn.IdWeightPair(inputs.get(self), None)
   2875 
   2876 

/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in get(self, key)
   2098     column = key
   2099     logging.debug('Transforming feature_column %s.', column)
-&gt; 2100     transformed = column._transform_feature(self)  # pylint: disable=protected-access
   2101     if transformed is None:
   2102       raise ValueError('Column {} is not supported.'.format(column.name))

/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _transform_feature(self, inputs)
   2863         num_oov_buckets=self.num_oov_buckets,
   2864         dtype=key_dtype,
-&gt; 2865         name='{}_lookup'.format(self.key)).lookup(input_tensor)
   2866 
   2867   @property

/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/lookup_ops.py in index_table_from_tensor(vocabulary_list, num_oov_buckets, default_value, hasher_spec, dtype, name)
   1097           name="table_init")
   1098       table = HashTable(
-&gt; 1099           init, default_value, shared_name=shared_name, name=hash_table_scope)
   1100     if num_oov_buckets:
   1101       table = IdTableWithHashBuckets(

/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/lookup_ops.py in __init__(self, initializer, default_value, shared_name, name)
    277           name=scope)
    278 
--&gt; 279       super(HashTable, self).__init__(table_ref, default_value, initializer)
    280 
    281 

/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/lookup_ops.py in __init__(self, table_ref, default_value, initializer)
    169         default_value, dtype=self._value_dtype)
    170     self._default_value.get_shape().merge_with(tensor_shape.scalar())
--&gt; 171     self._init = initializer.initialize(self)
    172 
    173   @property

/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/lookup_ops.py in initialize(self, table)
    348                             self._values)) as scope:
    349       init_op = gen_lookup_ops.initialize_table_v2(
--&gt; 350           table.table_ref, self._keys, self._values, name=scope)
    351     ops.add_to_collection(ops.GraphKeys.TABLE_INITIALIZERS, init_op)
    352     return init_op

/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gen_lookup_ops.py in initialize_table_v2(table_handle, keys, values, name)
    404       else:
    405         message = e.message
--&gt; 406       _six.raise_from(_core._status_to_exception(e.code, message), None)
    407 
    408 

/usr/local/lib/python3.6/site-packages/six.py in raise_from(value, from_value)

FailedPreconditionError: Table already initialized. [Op:InitializeTableV2] name: input_layer/Col2_indicator/Col2_lookup/hash_table/table_init/
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.
import pandas as pd
import tensorflow as tf

tf.enable_eager_execution()
df = pd.DataFrame([['A1', 'A2'], ['B1', 'B2'], ['C1', 'C2']], columns=['Col1', 'Col2'])

columns = [
    tf.feature_column.indicator_column(
        tf.feature_column.categorical_column_with_vocabulary_list(col, df[col].unique())) for col in df.columns
]

features = df.to_dict('list')
input_layer = tf.feature_column.input_layer(features, columns)
	</description>
	<comments>
		<comment id='1' author='byronyi' date='2018-05-29T15:57:39Z'>
		Maybe &lt;denchmark-link:https://github.com/alextp&gt;@alextp&lt;/denchmark-link&gt;
 has some idea on how to avoid re-initialization of lookup tables in eager mode.
		</comment>
		<comment id='2' author='byronyi' date='2018-05-29T16:02:34Z'>
		Seems  is not supported in eager mode &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/68ffc85450d328cf9e1323dd0021c6671110c5fb&gt;68ffc85&lt;/denchmark-link&gt;
.
How about indicator_column and categorical_column_*? Are they supported in eager mode?
		</comment>
		<comment id='3' author='byronyi' date='2018-05-29T16:25:54Z'>
		&lt;denchmark-link:https://github.com/rohan100jain&gt;@rohan100jain&lt;/denchmark-link&gt;
 you were working on this?&gt;
		</comment>
		<comment id='4' author='byronyi' date='2018-07-11T14:44:19Z'>
		This is also the case when using multiple tf.contrib.lookup.HashTable(tf.contrib.lookup.KeyValueTensorInitializer(keys, values), -1,) calls in Eager mode, even when assigning different names in each method.
		</comment>
		<comment id='5' author='byronyi' date='2018-07-11T19:07:43Z'>
		I'm working on a solution to this problem. I'd estimate a couple of weeks before it gets out.
		</comment>
		<comment id='6' author='byronyi' date='2018-07-12T05:42:52Z'>
		&lt;denchmark-link:https://github.com/rohan100jain&gt;@rohan100jain&lt;/denchmark-link&gt;
 Thanks!
		</comment>
		<comment id='7' author='byronyi' date='2018-09-11T05:08:44Z'>
		I see the error when using a simple
vocab_table.lookup() operation. Is there any workaround this to run it in eager mode?
		</comment>
		<comment id='8' author='byronyi' date='2018-09-11T09:01:27Z'>
		&lt;denchmark-link:https://github.com/rohan100jain&gt;@rohan100jain&lt;/denchmark-link&gt;
 Any updates from your side?
		</comment>
		<comment id='9' author='byronyi' date='2018-12-14T02:25:08Z'>
		Closing for now as I do not have time to reproduce it.
		</comment>
	</comments>
</bug>