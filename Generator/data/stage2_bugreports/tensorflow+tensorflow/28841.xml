<bug id='28841' author='EmielBoss' open_date='2019-05-19T16:48:06Z' closed_time='2019-07-16T23:34:18Z'>
	<summary>tf.Dataset.map() only processes one example in my dataset</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution: Linux Ubuntu 16.04
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.12.2
Python version: 3.5
CUDA/cuDNN version: V8.0.61
GPU model and memory: Tesla P100-PCIE, 12193MiB

Describe the current behavior
I have a dataset containing 592 examples, but tf.Dataset.map only processes one of those, as evidenced by a global counter, which I increment in the function given to map(). Why is it not processing all examples in the dataset? I run in eager execution, but code inside .map() is not executed eagerly.
Describe the expected behavior
All 592 examples in my dataset should be processed (with the counter being 592 afterwards).

My dataset: &lt;denchmark-link:https://we.tl/t-rZYNJ6I9oU&gt;https://we.tl/t-rZYNJ6I9oU&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;from __future__ import absolute_import, division, print_function
import tensorflow as tf
import numpy as np
import sys
import utilities

counter = 0

def decode_png_mask(image_buffer):
    """
    Takes string of bytes encoding a PNG and produces a tensor image
    """
    image = tf.squeeze(tf.image.decode_image(image_buffer, channels=1), axis=2)
    image.set_shape([None, None])
    image = tf.greater(image, 0)
    image = tf.cast(image, dtype=tf.uint8)
    return image

def masks_to_onehots(tag_masks, tag_class_indices, num_classes):
    def onehotify(pixel_tag_masks):
        tag_mask_sizes_suppressed = tf.where(tf.not_equal(tag_mask_sizes, 0), tag_mask_sizes, tag_mask_sizes + 9999999)
        smallest_mask_index = tf.argmin(tag_mask_sizes_suppressed)
        onehot = tf.one_hot(smallest_mask_index
                            , depth=num_classes, dtype=tf.uint8)
        return onehot
    tag_mask_sizes = tf.reduce_sum(tag_masks, axis=[1, 2])
    image_masks = tf.transpose(tag_masks, perm=[1, 2, 0])
    onehots = tf.map_fn(lambda x: tf.map_fn(onehotify, x), image_masks)
    return onehots

def parse_example(example_proto, width, height, num_classes):
    features = {
        'image/encoded': tf.FixedLenFeature((), tf.string),
        'image/height': tf.FixedLenFeature((), tf.int64),
        'image/width': tf.FixedLenFeature((), tf.int64),
        'image/filename': tf.FixedLenFeature((), tf.string),
        'image/object/bbox/xmin': tf.VarLenFeature(tf.float32),
        'image/object/bbox/xmax': tf.VarLenFeature(tf.float32),
        'image/object/bbox/ymin': tf.VarLenFeature(tf.float32),
        'image/object/bbox/ymax': tf.VarLenFeature(tf.float32),
        'image/object/class/label': tf.VarLenFeature(tf.int64),
        'image/object/class/text': tf.VarLenFeature(tf.string),
        'image/object/mask': tf.VarLenFeature(tf.string),
        'image/depth': tf.FixedLenFeature((), tf.string)
    }

    global counter
    counter = counter + 1

    parsed_example = tf.parse_single_example(example_proto, features)

    # Decode image
    image = tf.image.decode_jpeg(parsed_example['image/encoded'])
    parsed_example['image/encoded'] = image

    tag_masks = tf.sparse.to_dense(parsed_example['image/object/mask'], default_value="")
    tag_masks = tf.map_fn(decode_png_mask, tag_masks, dtype=tf.uint8)
    tag_masks = tf.reshape(tag_masks, shape=tf.stack([-1, height, width]), name='tag_masks')

    # All segmentation now have their mask in mask, their labelmap index in classes_indices and their tagname in classes_text
    tag_class_indices = tf.sparse.to_dense(parsed_example['image/object/class/label'])
    tag_class_names = tf.sparse.to_dense(parsed_example['image/object/class/text'], default_value="")
    onehots = masks_to_onehots(tag_masks, tag_class_indices, num_classes)
    parsed_example['image/labels'] = onehots

    return parsed_example

tf.enable_eager_execution()

NUM_CLASSES = 21

tfrecord_train = "/path/to/tf.record"
dataset_train = tf.data.TFRecordDataset(tfrecord_train)

# Read image widht/height from the TFRecord file
iterator = dataset_train.make_one_shot_iterator()
next_element = iterator.get_next()
parsed_element = np.fromstring(next_element.numpy(), dtype=np.uint8)
example = tf.train.Example.FromString(parsed_element)
height = example.features.feature['image/height'].int64_list.value[0]
width = example.features.feature['image/width'].int64_list.value[0]

dataset_train = dataset_train.map(lambda x: parse_example(x, width, height, NUM_CLASSES))
print(counter)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='EmielBoss' date='2019-05-27T12:39:50Z'>
		&lt;denchmark-link:https://github.com/EmielBoss&gt;@EmielBoss&lt;/denchmark-link&gt;
 Ran the code provided here, I got the output as 1
		</comment>
		<comment id='2' author='EmielBoss' date='2019-06-28T20:03:47Z'>
		&lt;denchmark-link:https://github.com/EmielBoss&gt;@EmielBoss&lt;/denchmark-link&gt;
 Could you share the data as the link expired. Also, try to check it with Latest TF1.14.0. Thanks!
		</comment>
		<comment id='3' author='EmielBoss' date='2019-07-16T23:34:18Z'>
		Closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='4' author='EmielBoss' date='2019-07-16T23:34:19Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28841&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28841&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>