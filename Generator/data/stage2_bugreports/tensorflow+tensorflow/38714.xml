<bug id='38714' author='PatReis' open_date='2020-04-20T16:07:32Z' closed_time='2020-04-20T17:05:13Z'>
	<summary>Ragged tensor input for keras.Model</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 2.1.0
Python version: 3.7.4

Describe the current behavior
If a ragged-tensor-input to a keras model e.g. by tensorflow.keras.layers.Input(ragged=True) or tensorflow.keras.Input(ragged=True) is not used or directly connected to the output, an error is raised (see below). This is may not be a problem since the ragged tensor is not used anyway, however, I encountered the same issue for a ragged tensor which is only used for indexing or reshaping.

ValueError: Layer input_5 does not support RaggedTensors as input. Inputs received: [tf.RaggedTensor(values=Tensor("RaggedFromVariant_1/RaggedTensorFromVariant:1", shape=(None, 1), dtype=float32), row_splits=Tensor("RaggedFromVariant_1/RaggedTensorFromVariant:0", shape=(None,), dtype=int64))]. You can try converting your input to an uniform tensor.

Describe the expected behavior
The ragged-tensor-input is accepted as an input, even if it is not used in the model. Hopefully this will also resolve the issue in a more complex model with the same error message/behavior.
Standalone code to reproduce the issue
The code below shows model3 which does not work, although model and model2 work perfectly.
import tensorflow as tf
import numpy as np

class DenseRagged(tf.keras.layers.Layer):
    def __init__(self, 
        units,
        use_bias=True,
        activation = 'linear',
        **kwargs):
        super(DenseRagged, self).__init__(**kwargs)
        self._supports_ragged_inputs = True 
        self.units = units
        self.use_bias = use_bias
        self.activation = tf.keras.activations.get(activation)
    def build(self, input_shape):
        last_dim = input_shape[-1]
        self.kernel = self.add_weight(
                'kernel',
                shape=[last_dim, self.units],
                trainable=True)
        if self.use_bias:
            self.bias = self.add_weight(
                    'bias',
                    shape=[self.units,],
                    trainable=True)
        else:
            self.bias = None
        super(DenseRagged, self).build(input_shape)
    def call(self, inputs):
        outputs = tf.ragged.map_flat_values(tf.matmul,inputs, self.kernel)
        if self.use_bias:
            outputs = tf.ragged.map_flat_values(tf.nn.bias_add,outputs, self.bias)
        outputs =  tf.ragged.map_flat_values(self.activation,outputs)
        return outputs    

class PoolingRagged(tf.keras.layers.Layer):
    def __init__(self, **kwargs):
        super(PoolingRagged, self).__init__(**kwargs)
        self._supports_ragged_inputs = True 
    def build(self, input_shape):
        super(PoolingRagged, self).build(input_shape)
    def call(self, inputs):
        node = inputs
        out = tf.math.reduce_mean(node,axis=1)
        return out


data_A = tf.ragged.constant([[[2.0],[ 2.0]], [[3.0]], [[4.0], [5.0],[ 6.0]]] ,ragged_rank=1) 
data_B = tf.ragged.constant([[[4.0],[ 4.0]], [[6.0]], [[8.0], [10.0],[12.0]]],ragged_rank=1) 
data_y = np.array([3.9,5.8,11])
print(data_A.shape,data_B.shape)

in_A = tf.keras.Input(shape=(None,1),dtype ="float32",ragged=True)
out = DenseRagged(1)(in_A)
out = PoolingRagged()(out)
model = tf.keras.models.Model(inputs=in_A, outputs=out)

optimizer = tf.keras.optimizers.Adam(lr=1e-3)
model.compile(loss='mean_squared_error',
              optimizer=optimizer,
              metrics=['mean_absolute_error', 'mean_squared_error'])

model.fit(x=data_A,y=data_y,epochs=200)
print("this works")

in_A2 = tf.keras.Input(shape=(None,1),dtype ="float32",ragged=True)
in_B2 = tf.keras.Input(shape=(None,1),dtype ="float32",ragged=True)
outA2 = DenseRagged(1)(in_A2)
outB2 = DenseRagged(1)(in_B2)
outA2 = PoolingRagged()(outA2)
outB2 = PoolingRagged()(outB2)
out2 = tf.keras.layers.Add()([outA2,outB2])
model2 = tf.keras.models.Model(inputs=[in_A2,in_B2], outputs=out2)


optimizer = tf.keras.optimizers.Adam(lr=1e-3)
model2.compile(loss='mean_squared_error',
              optimizer=optimizer,
              metrics=['mean_absolute_error', 'mean_squared_error'])

model2.fit(x=[data_A,data_B],y=data_y,epochs=200)
print("this works,too")

in_A3 = tf.keras.Input(shape=(None,1),dtype ="float32",ragged=True)
in_B3 = tf.keras.Input(shape=(None,1),dtype ="float32",ragged=True)
out3 = DenseRagged(1)(in_A3)
out3 = PoolingRagged()(out3)
model3 = tf.keras.models.Model(inputs=[in_A3,in_B3], outputs=out3)


optimizer = tf.keras.optimizers.Adam(lr=1e-3)
model3.compile(loss='mean_squared_error',
              optimizer=optimizer,
              metrics=['mean_absolute_error', 'mean_squared_error'])

model3.fit(x=[data_A,data_B],y=data_y,epochs=200)
print("this does not work")
	</description>
	<comments>
		<comment id='1' author='PatReis' date='2020-04-20T17:05:12Z'>
		&lt;denchmark-link:https://github.com/PatReis&gt;@PatReis&lt;/denchmark-link&gt;
 Thanks for the issue!
This should be fixed in the latest nightly. I tried with the nightly and model3 works, can you pip install -U tf-nightly and confirm this works?
		</comment>
		<comment id='2' author='PatReis' date='2020-04-20T17:05:15Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38714&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38714&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='PatReis' date='2020-04-21T16:54:40Z'>
		&lt;denchmark-link:https://github.com/omalleyt12&gt;@omalleyt12&lt;/denchmark-link&gt;
 Thank you for the fast reply. I tested with the nightly version and the sample code as well as the more complex model, both work nicely. I noticed that the shape verification for the input with ragged=True seems less strict in nightly but that is fine by me. Thanks again!
		</comment>
	</comments>
</bug>