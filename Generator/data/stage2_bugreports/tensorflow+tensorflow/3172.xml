<bug id='3172' author='dtracers' open_date='2016-07-03T15:55:36Z' closed_time='2017-02-15T19:10:45Z'>
	<summary>float division by zero</summary>
	<description>
It seems that if you only run 1 training step at a time then you can come to a point where it is too fast
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "main.py", line 6, in &lt;module&gt;
    connection.start_socket(8089, callback=handler.message_processor)
  File "/mnt/d/workspace/SketchRecognitionWithTensorFlow/src/main/python/connection/python_socket_server.py", line 13, in start_socket
    process_message(connection, callback=callback)
  File "/mnt/d/workspace/SketchRecognitionWithTensorFlow/src/main/python/connection/python_socket_server.py", line 38, in process_message
    result = callback(general_proto)
  File "/mnt/d/workspace/SketchRecognitionWithTensorFlow/src/main/python/recognition/proto_handler.py", line 39, in message_processor
    return train_shape(general_proto.template)
  File "/mnt/d/workspace/SketchRecognitionWithTensorFlow/src/main/python/recognition/proto_handler.py", line 23, in train_shape
    rec.add_training_data(recognition_template.interpretation.label, recognition_template.shape)
  File "/mnt/d/workspace/SketchRecognitionWithTensorFlow/src/main/python/recognition/recognition_manager.py", line 98, in add_training_data
    self.recognizers[label].train(label, points)
  File "/mnt/d/workspace/SketchRecognitionWithTensorFlow/src/main/python/recognition/simple/recognizer.py", line 82, in train
    self.classifier.fit(x=reshaped_points, y=target, steps=1)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py", line 182, in fit
    monitors=monitors)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py", line 484, in _train_model
    monitors=monitors)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/graph_actions.py", line 296, in train
    supervisor.Stop(close_summary_writer=False)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/supervisor.py", line 768, in stop
    stop_grace_period_secs=self._stop_grace_secs)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/coordinator.py", line 322, in join
    six.reraise(*self._exc_info_to_raise)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/coordinator.py", line 267, in stop_on_exception
    yield
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/coordinator.py", line 411, in run
    self.run_loop()
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/supervisor.py", line 1012, in run_loop
    steps_per_sec = added_steps / elapsed_time
ZeroDivisionError: float division by zero
&lt;/denchmark-code&gt;

This happens because the time between the start of the step and the end is exactly the same because it is a single step.
Here is the code snippet
&lt;denchmark-code&gt;current_time = time.time()
    elapsed_time = current_time - self._last_time
    self._last_time = current_time
    # Reports the number of steps done per second
    steps_per_sec = added_steps / elapsed_time
    summary = Summary(value=[Summary.Value(tag=self._summary_tag,
                                           simple_value=steps_per_sec)])
&lt;/denchmark-code&gt;

Maybe add an if statement to just say zero if elapsed_time is zero?
	</description>
	<comments>
		<comment id='1' author='dtracers' date='2016-07-03T22:31:59Z'>
		You can measure the elapsed time in microseconds (datetime.timedelta) and than scale it to get steps done per seconds.
		</comment>
		<comment id='2' author='dtracers' date='2016-07-03T22:37:49Z'>
		I added an if statement that says if elapsed time is zero just set it to
added steps. That fixed it too
On Jul 3, 2016 4:33 PM, "ahmetemir" &lt;denchmark-link:mailto:notifications@github.com&gt;notifications@github.com&lt;/denchmark-link&gt;
 wrote:

You can measure the elapsed time in microseconds (datetime.timedelta)
and than scale it to get steps done per seconds.
â€”
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub
#3172 (comment),
or mute the thread
https://github.com/notifications/unsubscribe/AB2CDKGUOklf0AvwMg82Da6RemPqdkhGks5qSDjCgaJpZM4JD5RE
.

		</comment>
		<comment id='3' author='dtracers' date='2016-07-03T22:43:38Z'>
		It can mislead you.Think that elapsed time is zero and you get 10 steps.This doesn't mean 10 steps per seconds.If the elpased time is actually 100 microseconds than you should know that it's  100 steps per seconds.
		</comment>
		<comment id='4' author='dtracers' date='2016-07-07T21:33:02Z'>
		I think the right answer is probably inf steps / second since as seconds goes to zero the relative performance should become arbitrarily large. The question is whether the Summary system is able to handle that..
		</comment>
		<comment id='5' author='dtracers' date='2016-07-07T21:52:16Z'>
		And statistically you can't trust the results of such a low sample measurement.To get more precise results, same test have to run for a long period of time over and over and you have to analyze the results using statistics.
		</comment>
		<comment id='6' author='dtracers' date='2017-01-23T23:51:37Z'>
		This references code that moved quite substantially in the last few months. Feel free to open a new github issue if the problem still persists in recent versions.
		</comment>
	</comments>
</bug>