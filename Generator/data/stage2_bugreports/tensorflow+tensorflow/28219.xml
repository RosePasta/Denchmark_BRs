<bug id='28219' author='breadbread1984' open_date='2019-04-28T02:26:21Z' closed_time='2019-05-16T19:08:17Z'>
	<summary>tf.tuple can't be indexed with tensor in graph mode</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.0.0.dev20190427
Python version: 3.6.7
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
the tf.tuple can't be indexed by tensor in graph mode.
Describe the expected behavior
tf.tuple should support index with tensor in graph mode.
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
import tensorflow as tf;

@tf.function
def func(a):
    i = tf.constant(0);
    return a[i];

t = tf.tuple([tf.constant(0),tf.constant(1)]);
a = func(t);
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='breadbread1984' date='2019-04-28T04:54:55Z'>
		You can use tf.gather() or tf.gather_nd().
		</comment>
		<comment id='2' author='breadbread1984' date='2019-04-28T06:55:20Z'>
		I tried the following code and failed.
import numpy as np;
import tensorflow as tf;

@tf.function
def get(t, indices):
    return tf.gather(t, indices);

t = tf.tuple([tf.constant(np.random.normal(size = (3,4))), tf.constant(np.random.normal(size=(4,5)))]);
indices = tf.constant([0]);
a = get(t,indices);
The error message is

ValueError: Tried to convert 'params' to a tensor and failed. Error: Dimension 0 in both shapes must be equal, but are 3 and 4. Shapes are [3,4] and [4,5].

		</comment>
		<comment id='3' author='breadbread1984' date='2019-04-28T18:48:53Z'>
		&lt;denchmark-link:https://github.com/jsimsa&gt;@jsimsa&lt;/denchmark-link&gt;
 is there any known method for handling this?
The  Operation is raising this error, in  and , Since the dimension of the tensors are different. Also, python like indexing doesn't support the use of Tensors.
		</comment>
		<comment id='4' author='breadbread1984' date='2019-04-28T19:13:34Z'>
		The problem is that t is not a Tensor but a list of tensors. Wrapping it in convert_to_tensor does the trick:
&lt;denchmark-code&gt;import tensorflow as tf;

tf.enable_v2_behavior()

@tf.function
def func(a):
    i = tf.constant(0);
    return a[i];

t = tf.tuple([tf.constant(0),tf.constant(1)]);
print(t[0].numpy())  # prints 0
a = func(tf.convert_to_tensor(t));
print(a.numpy())  # prints 0
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='breadbread1984' date='2019-04-29T01:36:45Z'>
		tf.tuple as a tensorflow utility should support index by tensor. otherwise, it has no difference from python's tuple. without index by tensor function, the following problem can't be solved.
import numpy as np;
import tensorflow as tf;

@tf.function
def get(t, index):
    return t[index];

t = tf.tuple([tf.constant(np.random.normal(size = (3,4))), tf.constant(np.random.normal(size=(4,5)))]);
index = tf.constant(0);
a = get(t,index);
		</comment>
		<comment id='6' author='breadbread1984' date='2019-05-16T19:08:17Z'>
		Closing this issue since jsimsa has provided a workaround. Feel free to reopen this issue if have further questions or perhaps open a feature request to add this functionality if necessary. Thanks!
		</comment>
		<comment id='7' author='breadbread1984' date='2019-05-16T19:08:18Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28219&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28219&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>