<bug id='40478' author='Marvinmw' open_date='2020-06-15T17:10:05Z' closed_time='2020-06-16T15:33:30Z'>
	<summary>Predcit function result is different from Training-Val using the same data</summary>
	<description>
Version:
Tensorflow 2.0.0
Keras 2.3.1
Ubuntu 18
I use predict to check the model performance on val data but it is totally different from the training log file. Predict and Val in the training use the same dataset.
The top layers of my model:
`
model = Sequential()
model.add(Embedding(input_dim = num_words,
output_dim=EMBEDDING_DIM,
weights=[emb],  # remove this if you want to train your weight
input_length=maxlen,
trainable=train_embedding,
mask_zero=True))
........
.........
model.add(Dropout(0.2))
# Heuristic model: outputs 1-of-num_classes prediction
model.add(BatchNormalization())
&lt;denchmark-code&gt;    model.add(Dense(dense_layer_size, activation="relu"))

    model.add(Dense(1, activation="sigmoid"))

    self.model = model

    self.model.compile(
        optimizer="adam",
        loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),
        metrics=[
              tf.keras.metrics.AUC(curve="PR", name="PR"),
                  tf.keras.metrics.AUC(curve="ROC", name="ROC"),
                "accuracy",
                tf.keras.metrics.Precision(),tf.keras.metrics.Recall(),
                 tf.keras.metrics.binary_accuracy],
    )
&lt;/denchmark-code&gt;

`
Train code
self.model.fit_generator(train_generator, epochs=epochs, verbose=verbose, validation_data = validation_generator, shuffle=True, callbacks=[checkpoint], class_weight=class_weights)
Prediction and Compute AUC-PR code:
`
padded_x = keras.preprocessing.sequence.pad_sequences(x_test, maxlen=max_len)
classlable, pro = model.predict(padded_x, batch_size)
pro = np.squeeze(pro)
y_test = np.squeeze(y_test)
from sklearn import metrics
precision, recall, thresholds = metrics.precision_recall_curve(y_test, pro)
pr = metrics.auc(recall, precision)
print("PR {}".format(pr))
`
Use Prediction compute PR-AUC:  0.2803784709997255
But  Val_PR: 0.4
I tried some solutions I found, use model.save.save or from keras.backend import manual_variable_initialization
manual_variable_initialization(True).

When I save the whole model weights, does the save function also save the Embedding layer?
I am doing binary-classification task, am I correctly using the metrics in model.compile  function?

	</description>
	<comments>
		<comment id='1' author='Marvinmw' date='2020-06-16T12:11:00Z'>
		Hi, I use tensorflow.keras instead of keras and upgrade tensorflow to 2.2.0.
		</comment>
		<comment id='2' author='Marvinmw' date='2020-06-16T13:54:54Z'>
		&lt;denchmark-link:https://github.com/Marvinmw&gt;@Marvinmw&lt;/denchmark-link&gt;

Does that resolve the problem, if it does please move this issue to closed status.
		</comment>
		<comment id='3' author='Marvinmw' date='2020-06-16T15:33:30Z'>
		yes.solved.
		</comment>
		<comment id='4' author='Marvinmw' date='2020-06-16T15:33:32Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40478&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40478&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>