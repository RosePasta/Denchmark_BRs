<bug id='32219' author='kristofgiber' open_date='2019-09-04T22:16:39Z' closed_time='2020-01-29T23:35:04Z'>
	<summary>TFP 0.8-rc0 AttributeError: 'MultivariateNormalTriL' object has no attribute 'type'</summary>
	<description>
I am using TFP 0.8-rc0 with TF2.0.0-rc0 for a VAE composed with keras functional API. I am able to train the VAE however when I want to retrieve the latent code by calling the encoder only (using .predict()), it throws

AttributeError: 'MultivariateNormalTriL' object has no attribute 'type'

which is not very informative in itself and I am not sure what it refers to. I am a bit confused why the decoder input seems to accept the output of the TFP layer without problem but can't seem to call predict on the encoder alone. Note that calling predict on encoder alone works when replacing the TFP layer with an equivalent keras sampling class. I understand that the tfp layer, when no convert_to_tensor_fn is defined, should call sample() by default so returning its output with encoder.predict(samples) should be possible.
Here is a minimal reproduction code:
&lt;denchmark-code&gt;
import numpy as np
import os
import tensorflow_probability as tfp
tfd = tfp.distributions
tfpl = tfp.layers.distribution_layer
import tensorflow as tf


load_model = 1

latent_dim = 8
learning_rate = 1e-4

BATCH_SIZE = 100
TEST_BATCH_SIZE = 10


color_channels = 1
(train_images, _), (test_images, _) = tf.keras.datasets.mnist.load_data()

train_images = train_images[:5000,::]
n_trainsamples = np.shape(train_images)[0]
imsize = np.shape(train_images)[1]
train_images = train_images.reshape(-1, imsize, imsize, 1).astype('float32')
train_images /= 255.
train_dataset = tf.data.Dataset.from_tensor_slices((train_images, train_images)).shuffle(n_trainsamples).repeat().batch(BATCH_SIZE)

image_input = tf.keras.Input(shape=(imsize, imsize, color_channels), name='encoder_input')
x = tf.keras.layers.Flatten()(image_input)
x = tf.keras.layers.Dense(500, activation='softplus', name="Inference-l1_Dense")(x)
x = tf.keras.layers.Dense(tfpl.MultivariateNormalTriL.params_size(latent_dim))(x)
z = tfpl.MultivariateNormalTriL(latent_dim)(x)
prior = tfd.Independent(tfd.Normal(loc=[0., 0], scale=1), reinterpreted_batch_ndims=1)
tfpl.KLDivergenceAddLoss(prior, weight=1.0)

encoder = tf.keras.Model(inputs=image_input, outputs=z, name='encoder')

latent_inputs = tf.keras.Input(shape=(latent_dim,), name='z_sampling')
x = tf.keras.layers.Dense(500, activation='softplus', name="Generative-l1_Dense")(latent_inputs)
x = tf.keras.layers.Dense(imsize ** 2 * color_channels, activation='sigmoid', name="Generative-l3_Dense_out")(x)  

output_probs = tf.keras.layers.Reshape(target_shape=(imsize, imsize, color_channels), name="Generative-output_probs")(x)

decoder = tf.keras.Model(inputs=latent_inputs, outputs=output_probs, name='decoder')
output_probs = decoder(z)

vae_model = tf.keras.Model(inputs=image_input, outputs=output_probs, name='vae')

optimizer = tf.keras.optimizers.Adam(learning_rate=1e-3)
vae_model.compile(optimizer, tf.keras.losses.BinaryCrossentropy())

vae_model.fit(train_dataset, steps_per_epoch=n_trainsamples // BATCH_SIZE, epochs=4)

latents = encoder.predict(train_images[:4,::])
print('latent shape: ' + latents.shape())


&lt;/denchmark-code&gt;

And the full stack with the error:

2019-09-04 21:56:37.276275: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2019-09-04 21:56:37.276332: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2019-09-04 21:56:37.278632: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-09-04 21:56:37.278665: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0
2019-09-04 21:56:37.278682: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N
2019-09-04 21:56:37.280141: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 10805 MB memory) -&gt; physical GPU (device: 0, name: Tesla K80, pci bus id: eaaf:00:00.0, compute capability: 3.7)
Train for 50 steps
Epoch 1/4
WARNING: Logging before flag parsing goes to stderr.
W0904 21:56:38.184839 140359104337664 deprecation.py:323] From /usr/local/lib/python3.5/dist-packages/tensorflow_core/python/ops/math_grad.py:1394: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use tf.where in 2.0, which has the same broadcast rule as np.where
2019-09-04 21:56:39.006765: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
50/50 [==============================] - 1s 29ms/step - loss: 0.2975
Epoch 2/4
50/50 [==============================] - 0s 5ms/step - loss: 0.2114
Epoch 3/4
50/50 [==============================] - 0s 5ms/step - loss: 0.1730
Epoch 4/4
50/50 [==============================] - 0s 5ms/step - loss: 0.1590
Traceback (most recent call last):
File "/home/pycharm_project/VAE/save_issue_reproduction.py", line 55, in 
latents = encoder.predict(train_images[:4,::])
File "/usr/local/lib/python3.5/dist-packages/tensorflow_core/python/keras/engine/training.py", line 915, in predict
use_multiprocessing=use_multiprocessing)
File "/usr/local/lib/python3.5/dist-packages/tensorflow_core/python/keras/engine/training_arrays.py", line 722, in predict
callbacks=callbacks)
File "/usr/local/lib/python3.5/dist-packages/tensorflow_core/python/keras/engine/training_arrays.py", line 189, in model_iteration
f = _make_execution_function(model, mode)
File "/usr/local/lib/python3.5/dist-packages/tensorflow_core/python/keras/engine/training_arrays.py", line 565, in _make_execution_function
return model._make_execution_function(mode)
File "/usr/local/lib/python3.5/dist-packages/tensorflow_core/python/keras/engine/training.py", line 2155, in _make_execution_function
self._make_predict_function()
File "/usr/local/lib/python3.5/dist-packages/tensorflow_core/python/keras/engine/training.py", line 2145, in _make_predict_function
**kwargs)
File "/usr/local/lib/python3.5/dist-packages/tensorflow_core/python/keras/backend.py", line 3658, in function
return EagerExecutionFunction(inputs, outputs, updates=updates, name=name)
File "/usr/local/lib/python3.5/dist-packages/tensorflow_core/python/keras/backend.py", line 3555, in init
base_graph=source_graph)
File "/usr/local/lib/python3.5/dist-packages/tensorflow_core/python/eager/lift_to_graph.py", line 260, in lift_to_graph
add_sources=add_sources))
File "/usr/local/lib/python3.5/dist-packages/tensorflow_core/python/ops/op_selector.py", line 404, in map_subgraph
elif op.type == "Placeholder":
AttributeError: 'MultivariateNormalTriL' object has no attribute 'type'

	</description>
	<comments>
		<comment id='1' author='kristofgiber' date='2019-09-05T06:47:32Z'>
		I have tried on colab with TF2.0.0-rc0 ,2.0 nightly version 2.0.0-dev20190903 and was able to reproduce the issue.Please, find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/5757e4e551b8262e9205a18f1a3637b4/untitled152.ipynb&gt;gist&lt;/denchmark-link&gt;
 here.Thanks!
		</comment>
		<comment id='2' author='kristofgiber' date='2019-09-06T14:19:32Z'>
		&lt;denchmark-link:https://github.com/reedwm&gt;@reedwm&lt;/denchmark-link&gt;
 any idea about this one?
		</comment>
		<comment id='3' author='kristofgiber' date='2019-09-06T17:40:41Z'>
		No idea, since I am unfamiliar with tensorflow probability. Maybe try filing an issue with the &lt;denchmark-link:https://github.com/tensorflow/probability&gt;tensorflow probability&lt;/denchmark-link&gt;
 repo.
		</comment>
		<comment id='4' author='kristofgiber' date='2019-09-06T19:34:41Z'>
		Thanks for getting back to me, already done: &lt;denchmark-link:https://github.com/tensorflow/probability/issues/544&gt;tensorflow/probability#544&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='kristofgiber' date='2019-09-06T19:50:51Z'>
		&lt;denchmark-link:https://github.com/reedwm&gt;@reedwm&lt;/denchmark-link&gt;
 the reason I asked you was the recent refactoring of dtypes in keras, though it seems the issue here is more around keras assuming all items returned by a layer are tensors or ops, whereas the distribution layers return subtypes of this class: &lt;denchmark-link:https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/layers/internal/distribution_tensor_coercible.py#L41&gt;https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/layers/internal/distribution_tensor_coercible.py#L41&lt;/denchmark-link&gt;

(note that keras is checking op.type in the stacktrace via lift_to_graph-&gt;op_selector).
Could you point this to the right person in keras or TF?
		</comment>
		<comment id='6' author='kristofgiber' date='2019-09-06T20:21:08Z'>
		With my refactor, I was careful not to assume anything was a tensor. So this is probably caused by something else.
/CC &lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/pavithrasv&gt;@pavithrasv&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='kristofgiber' date='2019-09-10T21:57:27Z'>
		So is this a tf.keras or a tfp bug then? Are there any fixes coming?
		</comment>
		<comment id='8' author='kristofgiber' date='2020-01-27T17:57:48Z'>
		&lt;denchmark-link:https://github.com/kristofgiber&gt;@kristofgiber&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/reedwm&gt;@reedwm&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/brianwa84&gt;@brianwa84&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
, The &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/32219#issue-489428442&gt;original example&lt;/denchmark-link&gt;
 works both with TFP 0.8 or TFP 0.9 combined with TF 2.1.  See also &lt;denchmark-link:https://github.com/tensorflow/probability/issues/538#issuecomment-578224143&gt;tensorflow/probability#538 (comment)&lt;/denchmark-link&gt;
, where I say that there are other examples that work with TF 2.1.
However, I have an example where I am still getting this error AttributeError: 'Normal' object has no attribute 'type', when the output of the network is a Normal distribution. I was trying to understand the differences between my example and the other mentioned examples, but I don't understand the differences that cause the issues.
		</comment>
		<comment id='9' author='kristofgiber' date='2020-01-29T23:35:04Z'>
		yes as pointed in the above comment the original example works with TF 2.1 and TFP 0.9 or 0.8
I am going to mark this as fixed.
&lt;denchmark-link:https://github.com/nbro&gt;@nbro&lt;/denchmark-link&gt;
 can you please open a new issue with a minimal repro where it is failing for you. Thanks!
		</comment>
		<comment id='10' author='kristofgiber' date='2020-01-29T23:35:06Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32219&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32219&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='kristofgiber' date='2020-01-30T17:18:01Z'>
		&lt;denchmark-link:https://github.com/goldiegadde&gt;@goldiegadde&lt;/denchmark-link&gt;
 I have already opened the issue: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34765&gt;#34765&lt;/denchmark-link&gt;
. And, finally, I understood the cause of the issue and I created a simple example that shows it. See &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34765#issuecomment-580359337&gt;#34765 (comment)&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>