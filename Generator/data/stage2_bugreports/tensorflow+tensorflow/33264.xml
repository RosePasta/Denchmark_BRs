<bug id='33264' author='OverLordGoldDragon' open_date='2019-10-11T21:17:10Z' closed_time='2020-11-10T00:08:30Z'>
	<summary>Difference between Tensor and EagerTensor?</summary>
	<description>
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/33227&gt;Relevant issue&lt;/denchmark-link&gt;
 w/ full code; excerpt:
var_delta = m_t / (K.sqrt(v_t) + epsilon_t)
var_update = state_ops.assign_sub(var, lr_t * var_delta, use_locking=self._use_locking)
Above fails to update var, but using math_ops.sqrt fixes it. To differentiate, below are some print statements &amp; their outputs. Code also included demonstrating introspection limitation.
It appears that K.sqrt yields a Keras Tensor, whereas math_ops.sqrt yields a tf.Tensor, with former not showing its value even though eager is on. However, calling K.eval on K.sqrt shows the same value, so it isn't 'lost' or different.
All considered: why does state_ops.assign_sub work with an EagerTensor but fail with a Tensor? How are they different? -- (TF2, Keras 2.3.0)
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

X1 = math_ops.sqrt(v_t)
X2 = K.sqrt(v_t)
Y1 = m_t / (math_ops.sqrt(v_t) + epsilon_t)
Y2 = m_t / (K.sqrt(v_t) + epsilon_t)

print(X1);       print(X2);       print()
print(Y1);       print(Y2);       print()
print(type(X1)); print(type(X2)); print()
print(type(Y1)); print(type(Y2)); print()
print("type(ref) =", type(var))
tf.Tensor(
[[0.0002048  0.00189643]
 [0.00204984 0.00426161]
 [0.0013686  0.0048186 ]
 [0.00296201 0.00318883]], shape=(4, 2), dtype=float32)
Tensor("Sqrt:0", shape=(4, 2), dtype=float32, device=/job:localhost/
replica:0/task:0/device:CPU:0)

tf.Tensor(
[[ 3.1607556 -3.1621318]
 [-3.162145  -3.1622243]
 [ 3.1620677  3.162233 ]
 [-3.1621926 -3.1621997]], shape=(4, 2), dtype=float32)
Tensor("truediv:0", shape=(4, 2), dtype=float32, device=/job:localhost/
replica:0/task:0/device:CPU:0)

&lt;class 'tensorflow.python.framework.ops.EagerTensor'&gt;
&lt;class 'tensorflow.python.framework.ops.Tensor'&gt;

&lt;class 'tensorflow.python.framework.ops.EagerTensor'&gt;
&lt;class 'tensorflow.python.framework.ops.Tensor'&gt;

type(ref) = &lt;class 'tensorflow.python.ops.resource_variable_ops.ResourceVariable'&gt;
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

UPDATE: The type information may be more relevant; (tf.) Tensor vs. (Keras) EagerTensor. However, one lacks reasonable introspection:
from tensorflow.python.framework.ops import Tensor, EagerTensor
print(Tensor.__doc__) # OK
print(EagerTensor.__doc__) # returns None

from inspect import getsource
print(getsource(EagerTensor)) # OSError: could not find class definition
Looking into the parent module, apparently I'll need to look into the C API to find out:
EagerTensor = c_api.TFE_Py_InitEagerTensor(_EagerTensorBase)
	</description>
	<comments>
		<comment id='1' author='OverLordGoldDragon' date='2019-10-14T11:54:30Z'>
		&lt;denchmark-link:https://github.com/OverLordGoldDragon&gt;@OverLordGoldDragon&lt;/denchmark-link&gt;
 ,
Can you please provide complete code used to reproduce the issue reported here ? When tried executing the issue i got  . Thanks!
		</comment>
		<comment id='2' author='OverLordGoldDragon' date='2019-10-14T13:28:01Z'>
		&lt;denchmark-link:https://github.com/oanush&gt;@oanush&lt;/denchmark-link&gt;
 Full &lt;denchmark-link:https://gist.github.com/OverLordGoldDragon/aad492db1ff6f20a7983e600611799f7&gt;gist&lt;/denchmark-link&gt;
 here and referenced issue &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/33227&gt;here&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='OverLordGoldDragon' date='2020-08-20T03:55:03Z'>
		I met this problem today. As I see, EagerTensor will automatically change to suitable type when been used and can be easy to transfer to numpy array with . numpy(). But Tensor will change all result to Tensor type when been called, and I haven't found a way to transfer Tensor type to any other type yet, I'm using TF2.2 and I cannot .eval the Tensor type
		</comment>
		<comment id='4' author='OverLordGoldDragon' date='2020-11-10T00:08:32Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33264&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33264&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>