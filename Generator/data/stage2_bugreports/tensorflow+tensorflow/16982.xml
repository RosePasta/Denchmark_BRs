<bug id='16982' author='jakubkarczewski' open_date='2018-02-13T14:39:12Z' closed_time='2018-05-28T02:26:10Z'>
	<summary>dnnConversionCreate_F32 fails when running TF with optimized MKL</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code: Yes, (https://github.com/jakubkarczewski/AlexNetF/blob/master/alexnet.py)
OS Platform and Distribution: Linux Centos 7
TensorFlow installed from: compiled from source from https://github.com/tensorflow/tensorflow/releases
TensorFlow version: 1.6.0-rc0
Python version:  2.7
Bazel version: 0.10.0
GCC/Compiler version: stock Centos 7 gcc
Compilation command: bazel build --config=mkl --copt="-DINTEL_MKL_ML" --copt="-mfma" --copt="-mavx2" --copt="-march=broadwell" --copt="-O3" -s -c opt //tensorflow/tools/pip_package:build_pip_package;;
Exact command to reproduce: python alexnet.py --training_epoch=1 --model_version=1 output/
CUDA/cuDNN version: N/A
GPU model and memory: N/A

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

Running following training with Tensorflow compiled with command specified above results in error:  as opossed to running without any error and training properly on Tensorflow version available under .
For training data I used Imagenet 60gb dataset (&lt;denchmark-link:http://www.image-net.org/challenges/LSVRC/2012/&gt;http://www.image-net.org/challenges/LSVRC/2012/&lt;/denchmark-link&gt;
) with 1000 classes.
What's more - following error can be found when running with Tensorflow from precompiled wheel files for both versions of python. This makes me think that the way I compile TF is not the problem here.
	</description>
	<comments>
		<comment id='1' author='jakubkarczewski' date='2018-02-14T01:54:56Z'>
		Thank you for your post. We noticed you have not filled out the following field in the issue template. Could you update them if they are relevant in your case, or leave them as N/A? Thanks.
CUDA/cuDNN version
GPU model and memory
		</comment>
		<comment id='2' author='jakubkarczewski' date='2018-02-14T09:13:43Z'>
		&lt;denchmark-link:https://github.com/tensorflowbutler&gt;@tensorflowbutler&lt;/denchmark-link&gt;
 of course, it should be ok now.
		</comment>
		<comment id='3' author='jakubkarczewski' date='2018-02-14T23:43:39Z'>
		&lt;denchmark-link:https://github.com/jakubkarczewski&gt;@jakubkarczewski&lt;/denchmark-link&gt;
 so to clarify, is it the set of MKL-enabling flags that you think breaks your case? I.e., can you please give us the minimally contrasting build command that doesn't fail?
		</comment>
		<comment id='4' author='jakubkarczewski' date='2018-02-15T11:35:14Z'>
		Yes, I think the problem lies in those MKL flags. I've tried to compile Tensorflow in the same environment as mentioned above but with command bazel build --config=mkl --copt=”-DEIGEN_USE_VML” -c opt //tensorflow/tools/pip_package: build_pip_package and got in return ./tensorflow/core/util/mkl_util.h:710] Non-OK-status: Status(error::Code::UNIMPLEMENTED, "Unimplemented conversion function") status: Unimplemented: Unimplemented conversion function. It was a mistake on my side (haven't passed which MKL I actually wanted to use with --copt="-DINTEL_MKL_ML" ) but it proves the problem is MKL related. I think the version of TF available on pip is build with bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package so what differs from my command is the MKL flag.
		</comment>
		<comment id='5' author='jakubkarczewski' date='2018-02-16T18:49:41Z'>
		&lt;denchmark-link:https://github.com/jakubkarczewski&gt;@jakubkarczewski&lt;/denchmark-link&gt;
, one quick thing to double-check: you can run "python alexnet.py --training_epoch=1 --model_version=1 output/" without problems on the non-MKL build, right?
		</comment>
		<comment id='6' author='jakubkarczewski' date='2018-02-16T19:13:31Z'>
		A colleague suggests: The error appears to be E_INCORRECT_INPUT_PARAMETER.  It sounds to me like it might be a shape mismatch of some kind - so perhaps adding logging to see what the two layouts are?
(they traced through dnnConversionCreate_F32 to the Intel site which has &lt;denchmark-link:https://software.intel.com/en-us/mkl-developer-reference-c-dnnconversioncreate&gt;https://software.intel.com/en-us/mkl-developer-reference-c-dnnconversioncreate&lt;/denchmark-link&gt;
, and then in turn found dnnError_t, which has the following cases:
typedef enum {
E_SUCCESS                   =  0,
E_INCORRECT_INPUT_PARAMETER = -1,
E_UNEXPECTED_NULL_POINTER   = -2,
E_MEMORY_ERROR              = -3,
E_UNSUPPORTED_DIMENSION     = -4,
E_UNIMPLEMENTED             = -127
} dnnError_t;
		</comment>
		<comment id='7' author='jakubkarczewski' date='2018-02-16T19:33:50Z'>
		&lt;denchmark-link:https://github.com/cy89&gt;@cy89&lt;/denchmark-link&gt;
 yes non-MKL build works just fine, I will follow your advice with adding more logging and will report results as soon as possible. Thanks for help!
		</comment>
		<comment id='8' author='jakubkarczewski' date='2018-02-16T20:37:26Z'>
		Good luck!
		</comment>
		<comment id='9' author='jakubkarczewski' date='2018-02-19T15:25:06Z'>
		&lt;denchmark-link:https://github.com/cy89&gt;@cy89&lt;/denchmark-link&gt;
 I am having trouble with adding logging info because I can't seem to find the structure of . Searching on github (&lt;denchmark-link:https://github.com/search?p=3&amp;q=_dnnLayout_s&amp;type=Code&amp;utf8=%E2%9C%93&gt;https://github.com/search?p=3&amp;q=_dnnLayout_s&amp;type=Code&amp;utf8=%E2%9C%93&lt;/denchmark-link&gt;
) I noticed it is assigned to empty structure which () means that the type of this variable is not strictly defined. Is there any way I can extract and print the layout's dimensions?
Maybe there is a way to do it from Python level? What I intended to do was to modify the  mkl_lrn_op.cc file so that it prints the dimensions of layouts to stderr and then compile the tensorflow with this modification. Although if it's possible to do it from Python script, it would be great
		</comment>
		<comment id='10' author='jakubkarczewski' date='2018-02-20T21:58:48Z'>
		&lt;denchmark-link:https://github.com/jakubkarczewski&gt;@jakubkarczewski&lt;/denchmark-link&gt;
 I'm sorry, I'm not an MKL expert. I agree that it looks like dnnLayout_t starts off as an empty structure.
		</comment>
		<comment id='11' author='jakubkarczewski' date='2018-03-13T15:22:31Z'>
		Nagging Awaiting Response: It has been 14 days with no activityand the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='12' author='jakubkarczewski' date='2018-03-22T09:07:26Z'>
		Thank you &lt;denchmark-link:https://github.com/jakubkarczewski&gt;@jakubkarczewski&lt;/denchmark-link&gt;
  for reporting and for going deeper into this debugging. We will reproduce and provide a fix for this. Please stay tuned.
		</comment>
		<comment id='13' author='jakubkarczewski' date='2018-04-03T17:31:34Z'>
		&lt;denchmark-link:https://github.com/cy89&gt;@cy89&lt;/denchmark-link&gt;
 Can you keep an eye on the resolution of this issue?
		</comment>
		<comment id='14' author='jakubkarczewski' date='2018-04-03T19:48:29Z'>
		&lt;denchmark-link:https://github.com/jakubkarczewski&gt;@jakubkarczewski&lt;/denchmark-link&gt;
 Could you please list the contents of the "/data/i1k-extracted/train" (10 lines of the output is fine). I am having difficulty make your code run with my imagenet dataset, so I wonder maybe you are using raw images?
		</comment>
		<comment id='15' author='jakubkarczewski' date='2018-04-03T20:29:20Z'>
		@angersson happy to keep an eye out; I think we're mostly relying on Wei for help here.
		</comment>
		<comment id='16' author='jakubkarczewski' date='2018-04-04T07:04:10Z'>
		&lt;denchmark-link:https://github.com/wei-v-wang&gt;@wei-v-wang&lt;/denchmark-link&gt;
 yes, I am using raw images. Directory  contains directories named . Each directory represents data for one particular class of images. In each one of them there are images in  format. Example name of 1st image from  directory:  where  stands for some kind of class id and  is (I guess) image id.
The listing is as follows:
&lt;denchmark-code&gt;drwxrwxr-x    3 jkarczewski jkarczewski  4096 Feb  9 09:51 ../
drwxrwxr-x    2 jkarczewski jkarczewski  4096 Feb  9 09:52 0/
drwxrwxr-x    2 jkarczewski jkarczewski  4096 Feb  9 09:52 1/
drwxrwxr-x    2 jkarczewski jkarczewski  4096 Feb  9 09:52 10/
drwxrwxr-x    2 jkarczewski jkarczewski  4096 Feb  9 09:52 100/
drwxrwxr-x    2 jkarczewski jkarczewski  4096 Feb  9 09:52 101/
drwxrwxr-x    2 jkarczewski jkarczewski  4096 Feb  9 09:52 102/
drwxrwxr-x    2 jkarczewski jkarczewski  4096 Feb  9 09:52 103/
drwxrwxr-x    2 jkarczewski jkarczewski  4096 Feb  9 09:52 104/
&lt;/denchmark-code&gt;

Don't mind the 4096 size - I listed the i1k-extracted/val/ because they have identical subdirectories and I don't have the train/ now on my laptop.
		</comment>
		<comment id='17' author='jakubkarczewski' date='2018-04-04T15:29:47Z'>
		Ah I see. Thank you for the info. Looks like maybe each year the imagenet are named differently -- e.g. my raw images had n02119789 being the directory names and yours are numbers like 0,1,10,...
I will work on preparing identical dataset to yours. Thanks for the info!
		</comment>
		<comment id='18' author='jakubkarczewski' date='2018-04-05T10:05:19Z'>
		I might have used a preprocessed ImageNet dataset because I got it from a friend of mine. I bet he used mapping for subdirectories such as: &lt;denchmark-link:https://gist.github.com/aaronpolhamus/964a4411c0906315deb9f4a3723aac57&gt;https://gist.github.com/aaronpolhamus/964a4411c0906315deb9f4a3723aac57&lt;/denchmark-link&gt;

		</comment>
		<comment id='19' author='jakubkarczewski' date='2018-04-06T06:35:54Z'>
		&lt;denchmark-link:https://github.com/jakubkarczewski&gt;@jakubkarczewski&lt;/denchmark-link&gt;
 Please know that I was able to get the preprocessed ImageNet dataset identical to yours and was able to reproduce the error (e.g. use --config=mkl, by default MKL-DNN) as well as --config=mkl --copt="-DINTEL_MKL_ML" (MKL_ML).
2018-04-05 23:28:14.468026: F ./tensorflow/core/util/mkl_util.h:710] Non-OK-status: Status(error::Code::UNIMPLEMENTED, "Unimplemented conversion function") status: Unimplemented: Unimplemented conversion function
It seems using MKL_ML our error message differs a little bit -- maybe it was caused by the commit difference. Hopefully fixing on MKL-DNN will also fix on the MKL_ML side. I will post the outcome now that I have reproduced the bug. Thanks for your patience!
		</comment>
		<comment id='20' author='jakubkarczewski' date='2018-04-06T06:49:51Z'>
		As you originally reported:
tensorflow/core/kernels/mkl_lrn_op.cc:595] Check failed: dnnConversionCreate_F32( &amp;convert_input, static_cast&lt;dnnLayout_t&gt;(inimage_shape.GetCurLayout()), lt_internal_input) == E_SUCCESS (-1 vs. 0)
The bug lies in LRN op as commenting out the two LRN layers in your script avoids the error. We will fix the LRN MKL ops. Please stay tuned. Thank you!
		</comment>
		<comment id='21' author='jakubkarczewski' date='2018-04-20T18:42:15Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/cy89&gt;@cy89&lt;/denchmark-link&gt;
: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='22' author='jakubkarczewski' date='2018-04-25T19:17:52Z'>
		(FYI &lt;denchmark-link:https://github.com/tatianashp&gt;@tatianashp&lt;/denchmark-link&gt;
 )
		</comment>
		<comment id='23' author='jakubkarczewski' date='2018-04-28T07:32:45Z'>
		&lt;denchmark-link:https://github.com/jakubkarczewski&gt;@jakubkarczewski&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/cy89&gt;@cy89&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/tatianashp&gt;@tatianashp&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/asimshankar&gt;@asimshankar&lt;/denchmark-link&gt;

Please see below for my newest findings regarding this issue - it seems the issue disappeared if we use Intel MKL DNN backend (with recent commits) rather than Intel MKL ML backend.
AlexNet]$ export OMP_NUM_THREADS=4 (may need to do this to avoid OpenMP resource issue)
AlexNet]$ python alexnet.py   testoutput/
/usr/lib64/python2.7/site-packages/h5py/init.py:36: FutureWarning: Conversion of the second argument of issubdtype from float to np.floating is deprecated. In future, it will be treated as np.float64 == np.dtype(float).type.
from ._conv import register_converters as _register_converters
Loading data
Data loaded.
1281167
1000
WARNING:tensorflow:From alexnet.py:329: softmax_cross_entropy_with_logits (from tensorflow.python.ops.nn_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Future major versions of TensorFlow will allow gradients to flow
into the labels input on backprop by default.
See tf.nn.softmax_cross_entropy_with_logits_v2.
Start time is: 1524900472.01
2018-04-28 00:27:52.015040: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX512F
Iter 0, Minibatch Loss= 6.898850, Training Accuracy= 0.0 Elapsed time:8.87320780754acc_up=[0.0, 0.0]
Iter 20, Minibatch Loss= 6.916332, Training Accuracy= 0.0 Elapsed time:87.2397489548acc_up=[0.0, 0.0]
&lt;denchmark-link:https://github.com/jakubkarczewski&gt;@jakubkarczewski&lt;/denchmark-link&gt;
 Is it OK for you to use Intel MKL DNN? In order to use Intel MKL DNN backend, you
can just use the previous command you tried
bazel build --config=mkl --copt=”-DEIGEN_USE_VML” -c opt //tensorflow/tools/pip_package: build_pip_package  (*please do not specify   --copt="-DINTEL_MKL_ML" * , this way by default will be INTEL_MKL_DNN). Sorry for the confusion.
Could you please confirm?
		</comment>
		<comment id='24' author='jakubkarczewski' date='2018-04-28T07:33:47Z'>
		&lt;denchmark-link:https://github.com/jakubkarczewski&gt;@jakubkarczewski&lt;/denchmark-link&gt;
 FYI, I used a commit that is very much like this public commit: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/a175841eb549f069ac205fb32bf55314a387fe6d&gt;a175841&lt;/denchmark-link&gt;

		</comment>
		<comment id='25' author='jakubkarczewski' date='2018-05-08T20:27:02Z'>
		&lt;denchmark-link:https://github.com/jakubkarczewski&gt;@jakubkarczewski&lt;/denchmark-link&gt;
 May I suggest trying v1.8.0 (&lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/93bc2e2072e0daccbcff7a90d397b704a9e8f778&gt;93bc2e2&lt;/denchmark-link&gt;
) and  v170 tensorflow tagged version (&lt;denchmark-link:https://github.com/tensorflow/tensorflow/releases/tag/v1.7.0&gt;https://github.com/tensorflow/tensorflow/releases/tag/v1.7.0&lt;/denchmark-link&gt;
)  and build with --config=mkl (by default it would be -DIntel_MKL_DNN, not -DIntel_MKLML) . I tried from my side, they do not have the issue as you reported anymore, please confirm. Thank you!
After you confirm, I suggest trying AlexNet in tf_cnn_benchmark (&lt;denchmark-link:https://github.com/tensorflow/benchmarks/blob/master/scripts/tf_cnn_benchmarks/models/alexnet_model.py&gt;https://github.com/tensorflow/benchmarks/blob/master/scripts/tf_cnn_benchmarks/models/alexnet_model.py&lt;/denchmark-link&gt;
) instead - they run significantly faster than the keras one.
		</comment>
		<comment id='26' author='jakubkarczewski' date='2018-05-27T03:04:04Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/cy89&gt;@cy89&lt;/denchmark-link&gt;
: It has been 17 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='27' author='jakubkarczewski' date='2018-05-28T02:26:10Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
	</comments>
</bug>