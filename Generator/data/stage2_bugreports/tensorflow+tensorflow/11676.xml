<bug id='11676' author='Kipok' open_date='2017-07-21T22:31:12Z' closed_time='2017-08-29T17:47:24Z'>
	<summary>Error in tf.contrib.layers.batch_norm when explicitly assigned on gpu</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):  Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 14.04
TensorFlow installed from (source or binary): source
TensorFlow version (use command below):  1.2.1
Python version:  3.4.3
Bazel version (if compiling from source): 0.5.2
CUDA/cuDNN version:  8.0/6.0
GPU model and memory: Tesla P100 (16 gb)

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

Batch norm layer fails with an error when explicitly assigned to be run on gpu and zero_debias_moving_mean is False. Interesting that I'm getting this error only when is_training is a placeholder (passing just True doesn't reproduce the error). If commented line is used instead (zero_debias_moving_mean=True) the code also works without any error.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

The following code could be used to reproduce the issue:
import tensorflow as tf
is_training = tf.placeholder(tf.bool, name='is_training')
a = tf.placeholder(tf.float32, shape=(10, 10, 10, 10))
with tf.device('/gpu:0'):
    b = tf.contrib.layers.batch_norm(a, is_training=is_training)
#     b = tf.contrib.layers.batch_norm(a, is_training=is_training, zero_debias_moving_mean=True)
sess = tf.Session()
sess.run(tf.global_variables_initializer())
The error log:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
InvalidArgumentError                      Traceback (most recent call last)
~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/client/session.py in _do_call(self, fn, *args)
   1284     try:
-&gt; 1285       return fn(*args)
   1286     except errors.OpError as e:

~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/client/session.py in _run_fn(session, feed_dict, fetch_list, target_list, options, run_metadata)
   1254       # Ensure any changes to the graph are reflected in the runtime.
-&gt; 1255       self._extend_graph()
   1256       with errors.raise_exception_on_not_ok_status() as status:

~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/client/session.py in _extend_graph(self)
   1315           tf_session.TF_ExtendGraph(
-&gt; 1316               self._session, graph_def.SerializeToString(), status)
   1317         self._opened = True

/usr/lib/python3.4/contextlib.py in __exit__(self, type, value, traceback)
     65             try:
---&gt; 66                 next(self.gen)
     67             except StopIteration:

~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/errors_impl.py in raise_exception_on_not_ok_status()
    465           compat.as_text(pywrap_tensorflow.TF_Message(status)),
--&gt; 466           pywrap_tensorflow.TF_GetCode(status))
    467   finally:

InvalidArgumentError: Cannot assign a device for operation 'BatchNorm/Reshape_2': Could not satisfy explicit device specification '/device:GPU:0' because no supported kernel for GPU devices is available.
	 [[Node: BatchNorm/Reshape_2 = Reshape[T=DT_BOOL, Tshape=DT_INT32, _device="/device:GPU:0"](is_training, BatchNorm/Reshape_2/shape)]]

During handling of the above exception, another exception occurred:

InvalidArgumentError                      Traceback (most recent call last)
&lt;ipython-input-1-285b7d56d919&gt; in &lt;module&gt;()
      8 #     b = tf.contrib.layers.batch_norm(a, is_training=is_training, zero_debias_moving_mean=True)
      9 sess = tf.Session()
---&gt; 10 sess.run(tf.global_variables_initializer())

~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/client/session.py in run(self, fetches, feed_dict, options, run_metadata)
    894     try:
    895       result = self._run(None, fetches, feed_dict, options_ptr,
--&gt; 896                          run_metadata_ptr)
    897       if run_metadata:
    898         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)

~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/client/session.py in _run(self, handle, fetches, feed_dict, options, run_metadata)
   1122     if final_fetches or final_targets or (handle and feed_dict_tensor):
   1123       results = self._do_run(handle, final_targets, final_fetches,
-&gt; 1124                              feed_dict_tensor, options, run_metadata)
   1125     else:
   1126       results = []

~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/client/session.py in _do_run(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)
   1277     if handle is None:
   1278       return self._do_call(_run_fn, self._session, feeds, fetches, targets,
-&gt; 1279                            options, run_metadata)
   1280     else:
   1281       return self._do_call(_prun_fn, self._session, handle, feeds, fetches)

~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/client/session.py in _do_call(self, fn, *args)
   1296         except KeyError:
   1297           pass
-&gt; 1298       raise type(e)(node_def, op, message)
   1299 
   1300   def _extend_graph(self):

InvalidArgumentError: Cannot assign a device for operation 'BatchNorm/Reshape_2': Could not satisfy explicit device specification '/device:GPU:0' because no supported kernel for GPU devices is available.
	 [[Node: BatchNorm/Reshape_2 = Reshape[T=DT_BOOL, Tshape=DT_INT32, _device="/device:GPU:0"](is_training, BatchNorm/Reshape_2/shape)]]

Caused by op 'BatchNorm/Reshape_2', defined at:
  File "/usr/lib/python3.4/runpy.py", line 170, in _run_module_as_main
    "__main__", mod_spec)
  File "/usr/lib/python3.4/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/ipykernel_launcher.py", line 16, in &lt;module&gt;
    app.launch_new_instance()
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/traitlets/config/application.py", line 658, in launch_instance
    app.start()
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/ipykernel/kernelapp.py", line 477, in start
    ioloop.IOLoop.instance().start()
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/zmq/eventloop/ioloop.py", line 177, in start
    super(ZMQIOLoop, self).start()
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tornado/ioloop.py", line 888, in start
    handler_func(fd_obj, events)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tornado/stack_context.py", line 277, in null_wrapper
    return fn(*args, **kwargs)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/zmq/eventloop/zmqstream.py", line 440, in _handle_events
    self._handle_recv()
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/zmq/eventloop/zmqstream.py", line 472, in _handle_recv
    self._run_callback(callback, msg)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/zmq/eventloop/zmqstream.py", line 414, in _run_callback
    callback(*args, **kwargs)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tornado/stack_context.py", line 277, in null_wrapper
    return fn(*args, **kwargs)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/ipykernel/kernelbase.py", line 283, in dispatcher
    return self.dispatch_shell(stream, msg)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/ipykernel/kernelbase.py", line 235, in dispatch_shell
    handler(stream, idents, msg)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/ipykernel/kernelbase.py", line 399, in execute_request
    user_expressions, allow_stdin)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/ipykernel/ipkernel.py", line 196, in do_execute
    res = shell.run_cell(code, store_history=store_history, silent=silent)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/ipykernel/zmqshell.py", line 533, in run_cell
    return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/IPython/core/interactiveshell.py", line 2698, in run_cell
    interactivity=interactivity, compiler=compiler, result=result)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/IPython/core/interactiveshell.py", line 2802, in run_ast_nodes
    if self.run_code(code, result):
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/IPython/core/interactiveshell.py", line 2862, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "&lt;ipython-input-1-285b7d56d919&gt;", line 7, in &lt;module&gt;
    b = tf.contrib.layers.batch_norm(a, is_training=is_training)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/contrib/framework/python/ops/arg_scope.py", line 181, in func_with_args
    return func(*args, **current_args)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/contrib/layers/python/layers/layers.py", line 634, in batch_norm
    outputs = layer.apply(inputs, training=is_training)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/layers/base.py", line 492, in apply
    return self.__call__(inputs, *args, **kwargs)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/layers/base.py", line 441, in __call__
    outputs = self.call(inputs, *args, **kwargs)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/layers/normalization.py", line 395, in call
    decay = _smart_select(training, lambda: self.momentum, lambda: 1.)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/layers/normalization.py", line 568, in _smart_select
    pred = array_ops.reshape(pred, [1])
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/ops/gen_array_ops.py", line 2502, in reshape
    name=name)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py", line 767, in apply_op
    op_def=op_def)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/ops.py", line 2576, in create_op
    original_op=self._default_original_op, op_def=op_def)
  File "/home/igitman/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/ops.py", line 1204, in __init__
    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access

InvalidArgumentError (see above for traceback): Cannot assign a device for operation 'BatchNorm/Reshape_2': Could not satisfy explicit device specification '/device:GPU:0' because no supported kernel for GPU devices is available.
	 [[Node: BatchNorm/Reshape_2 = Reshape[T=DT_BOOL, Tshape=DT_INT32, _device="/device:GPU:0"](is_training, BatchNorm/Reshape_2/shape)]]
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Kipok' date='2017-07-24T22:56:36Z'>
		&lt;denchmark-link:https://github.com/zhangyaobit&gt;@zhangyaobit&lt;/denchmark-link&gt;
, do you have any ideas? Perhaps using fused_batch norm?
		</comment>
		<comment id='2' author='Kipok' date='2017-07-25T18:18:27Z'>
		This is caused by "pred = array_ops.reshape(pred, [1])" in smart_select in tensorflow/python/layers/normalization.py.
pred is a scalar Tensor of boolean type. However, the GPU kernel of reshape doesn't support boolean type, because of the type constraint &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/reshape_op.cc#L31&gt;here&lt;/denchmark-link&gt;
.
&lt;denchmark-link:https://github.com/vrv&gt;@vrv&lt;/denchmark-link&gt;
, do you have some ideas why boolean is not supported?
&lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/sguada&gt;@sguada&lt;/denchmark-link&gt;
, as pred is a scalar, could this reshape be replaced by something else?
		</comment>
		<comment id='3' author='Kipok' date='2017-07-25T19:38:55Z'>
		No idea why it isn't supported, perhaps it could be registered.  People only add registrations as they are needed.
		</comment>
		<comment id='4' author='Kipok' date='2017-07-26T03:07:50Z'>
		Adding REGISTER_GPU_KERNEL(bool); can fix the problem.
		</comment>
		<comment id='5' author='Kipok' date='2017-08-29T17:47:24Z'>
		Thanks taehoonlee@ for the fix!
		</comment>
	</comments>
</bug>