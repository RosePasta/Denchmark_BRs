<bug id='5551' author='vonclites' open_date='2016-11-11T20:31:58Z' closed_time='2017-02-07T04:37:35Z'>
	<summary>Inconsistent behavior for variables_collections and outputs_collections parameters (contrib/layers)</summary>
	<description>
Using layers from contrib,

The outputs_collections parameter accepts either a string or list of strings.
The variables_collections parameter requires a list of strings.

Granted, the documentation does specify this
&lt;denchmark-code&gt;variables_collections: optional list of collections for all the variables or
      a dictionay containing a different list of collection per variable.
outputs_collections: collection to add the outputs.
&lt;/denchmark-code&gt;

But I don't think it's very obvious.  Furthermore, is it really necessary to have these two parameters behave differently?
The variables_collections parameter is passed to the model_variable function()
Currently, the model_variable() function performs this before creating the variable:
&lt;denchmark-code&gt;  collections = list(collections or [])
  collections += [ops.GraphKeys.VARIABLES, ops.GraphKeys.MODEL_VARIABLES]
&lt;/denchmark-code&gt;

So, if
&lt;denchmark-code&gt;# variables_collections = 'kernels'
collections
['k', 'e', 'r', 'n', 'e', 'l', 's']
&lt;/denchmark-code&gt;

Whereas, for outputs_collections it uses the utils.collect_named_outputs() function, wherein
&lt;denchmark-code&gt;# variables_collections = 'kernels'
names = (names,) if isinstance(names, six.string_types) else set(names)
names
('kernels',)
&lt;/denchmark-code&gt;

Perhaps the behavior of these two parameters should be unified?
	</description>
	<comments>
		<comment id='1' author='vonclites' date='2016-11-15T16:41:03Z'>
		This is a bug. Thanks for reporting.
		</comment>
		<comment id='2' author='vonclites' date='2016-11-15T16:42:39Z'>
		The outputs_collections behavior is clearly the correct one. Both arguments should accept the same types of input, that is, either strings or set types.
		</comment>
		<comment id='3' author='vonclites' date='2017-02-07T04:37:35Z'>
		We chose not to include the collections arguments when we ported the layers to core.
When using the core layers: If you need access to the variables, use the scope. If you want to add the activations to a collection, do that using the returned tensor.
I'm closing this, since the contrib layers are being deprecated in favor of those in core.
		</comment>
		<comment id='4' author='vonclites' date='2017-06-17T14:30:04Z'>
		the bug still exists in tf.contrib.layers.batch_norm(variables_collections=['vars'], outputs_collections='vars2'). If you do just variables_collections='vars' it will return an empty list. Annoying if you do not know this thread.
		</comment>
		<comment id='5' author='vonclites' date='2017-06-18T15:09:16Z'>
		Pretty sure it's not just batch_norm.
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Sat, Jun 17, 2017, 10:31 AM Robomate ***@***.***&gt; wrote:
 the bug still exists in
 tf.contrib.layers.batch_norm(variables_collections=['vars'],
 outputs_collections='vars2'). If you do just variables_collections='vars'
 it will return an empty list. Annoying if you do not know this thread.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 &lt;#5551 (comment)&gt;,
 or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/AEsrOD0jGCHpZoMGUZEBoI3iuPK-eFjGks5sE-NbgaJpZM4KwHT0&gt;
 .



		</comment>
	</comments>
</bug>