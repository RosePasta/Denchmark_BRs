<bug id='42254' author='stefan-falk' open_date='2020-08-12T07:16:02Z' closed_time='2020-08-13T03:02:50Z'>
	<summary>tf.signal.stft throws RuntimeException when pad_end=True</summary>
	<description>
System information

OS Platform and Distribution: Ubuntu 16.04
TensorFlow installed from: binary
TensorFlow version: v2.3.0-rc2-23-gb36436b087 2.3.0
Python version: 3.8 (Conda)

Describe the current behavior
pad_end of tf.signal.stft throws RuntimeError when set to True.
Describe the expected behavior
Should not throw a RuntimeException - just pad the end of the signal.
Standalone code to reproduce the issue
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np


def main():
    inputs = layers.Input(shape=(None,))
    x = tf.signal.stft(inputs, 512, 20, pad_end=True)
    model = keras.Model(inputs=inputs, outputs=x)
    signals = tf.constant(np.random.rand(2, 511))
    print(model(signals))
    print('All done.')


if __name__ == '__main__':
    main()
Other info / logs
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/sfalk/tmp/speech-v2/asr/bin/tmp.py", line 17, in &lt;module&gt;
    main()
  File "/home/sfalk/tmp/speech-v2/asr/bin/tmp.py", line 9, in main
    x = tf.signal.stft(inputs, 512, 20, pad_end=True)
  File "/home/sfalk/miniconda3/envs/asr2/lib/python3.8/site-packages/tensorflow/python/util/dispatch.py", line 201, in wrapper
    return target(*args, **kwargs)
  File "/home/sfalk/miniconda3/envs/asr2/lib/python3.8/site-packages/tensorflow/python/ops/signal/spectral_ops.py", line 86, in stft
    framed_signals = shape_ops.frame(
  File "/home/sfalk/miniconda3/envs/asr2/lib/python3.8/site-packages/tensorflow/python/util/dispatch.py", line 201, in wrapper
    return target(*args, **kwargs)
  File "/home/sfalk/miniconda3/envs/asr2/lib/python3.8/site-packages/tensorflow/python/ops/signal/shape_ops.py", line 162, in frame
    paddings = array_ops.concat(
  File "/home/sfalk/miniconda3/envs/asr2/lib/python3.8/site-packages/tensorflow/python/util/dispatch.py", line 201, in wrapper
    return target(*args, **kwargs)
  File "/home/sfalk/miniconda3/envs/asr2/lib/python3.8/site-packages/tensorflow/python/ops/array_ops.py", line 1654, in concat
    return gen_array_ops.concat_v2(values=values, axis=axis, name=name)
  File "/home/sfalk/miniconda3/envs/asr2/lib/python3.8/site-packages/tensorflow/python/ops/gen_array_ops.py", line 1221, in concat_v2
    _, _, _op, _outputs = _op_def_library._apply_op_helper(
  File "/home/sfalk/miniconda3/envs/asr2/lib/python3.8/site-packages/tensorflow/python/framework/op_def_library.py", line 409, in _apply_op_helper
    values = ops.internal_convert_n_to_tensor(
  File "/home/sfalk/miniconda3/envs/asr2/lib/python3.8/site-packages/tensorflow/python/framework/ops.py", line 1561, in internal_convert_n_to_tensor
    convert_to_tensor(
  File "/home/sfalk/miniconda3/envs/asr2/lib/python3.8/site-packages/tensorflow/python/framework/ops.py", line 1465, in convert_to_tensor
    raise RuntimeError("Attempting to capture an EagerTensor without "
RuntimeError: Attempting to capture an EagerTensor without building a function.

Process finished with exit code 1
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Workaround&lt;/denchmark-h&gt;

Do the padding yourself:
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np


def main():
    frame_length = 512
    inputs = layers.Input(shape=(None,))
    x = inputs

    pad = frame_length - tf.math.mod(tf.shape(x)[1], frame_length)
    x = tf.pad(x, [(0, 0), (0, pad)])
    x = tf.signal.stft(x, 512, 20, pad_end=False)

    model = keras.Model(inputs=inputs, outputs=x)
    signals = tf.constant(np.random.rand(2, 511))
    print(model(signals))
    print('All done.')


if __name__ == '__main__':
    main()
	</description>
	<comments>
		<comment id='1' author='stefan-falk' date='2020-08-12T07:25:25Z'>
		A workaround is to wrap the function with lambda layer:
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np


def main():
    inputs = layers.Input(shape=(None,))
    stft = layers.Lambda(lambda x: tf.signal.stft(x, 512, 20, pad_end=True))(inputs)
    model = keras.Model(inputs=inputs, outputs=stft)
    signals = tf.constant(np.random.rand(2, 512))
    print(model(signals))
    print('All done.')


if __name__ == '__main__':
    main()
&lt;denchmark-link:https://colab.research.google.com/drive/1l4OYzh4sy-6d9BAszCC39e9B6uFYRpHD?usp=sharing&gt;https://colab.research.google.com/drive/1l4OYzh4sy-6d9BAszCC39e9B6uFYRpHD?usp=sharing&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='stefan-falk' date='2020-08-12T07:33:15Z'>
		&lt;denchmark-link:https://github.com/WindQAQ&gt;@WindQAQ&lt;/denchmark-link&gt;
 I am not sure if this is an option in my case. In my case I would have to wrap the entire preprocessing pipeline in a keras layer; But that might not be a bad idea after all..
Also it's possible to just pad it manually (see my original post).
		</comment>
		<comment id='3' author='stefan-falk' date='2020-08-12T07:45:16Z'>
		I am able to replicate this issue, please have a look at the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/2207fbafc2e0bb6a2d763eb24db01746/untitled364.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='stefan-falk' date='2020-08-12T07:50:13Z'>
		&lt;denchmark-link:https://github.com/stefan-falk&gt;@stefan-falk&lt;/denchmark-link&gt;

I made a change to your code and do not see the error, please refer to &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/39afa070a5feb386627085bddf1d8f69/untitled364.ipynb&gt;this gist&lt;/denchmark-link&gt;
 and update.
		</comment>
		<comment id='5' author='stefan-falk' date='2020-08-12T07:53:13Z'>
		Hi &lt;denchmark-link:https://github.com/stefan-falk&gt;@stefan-falk&lt;/denchmark-link&gt;
, can you try to modify this line


to
           ops.convert_to_tensor([[0, pad_samples]]),
to see if it fixes the error?
		</comment>
		<comment id='6' author='stefan-falk' date='2020-08-12T08:09:39Z'>
		&lt;denchmark-link:https://github.com/WindQAQ&gt;@WindQAQ&lt;/denchmark-link&gt;
 I tested it in a debug session an can confirm that it works if we use 
&lt;denchmark-link:https://user-images.githubusercontent.com/43335432/89991286-e6d88f00-dc83-11ea-9def-f5ec527a8a41.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='stefan-falk' date='2020-08-13T03:02:52Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42254&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42254&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>