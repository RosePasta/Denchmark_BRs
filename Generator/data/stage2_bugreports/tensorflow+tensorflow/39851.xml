<bug id='39851' author='pks' open_date='2020-05-25T13:42:22Z' closed_time='2020-07-01T13:49:25Z'>
	<summary>Cannot Read From Google Storage with tf.io.gfile.GFile under intel-tensorflow==1.14.0</summary>
	<description>
Support for Google Storage (gs protocol) seems to be missing from intel-tensorflow==1.14.0, which is unexpected. I'm aware that this is no core tensorflow issue but I've seen that some engineers from Intel are active in this repository.
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): docker image intelaipg/intel-optimized-tensorflow:1.14.0-mkl-py3 (Ubuntu 18.04.2 LTS)
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): No
TensorFlow version (use command below): 1.14.0
Python version: 3.6.8
Bazel version (if compiling from source): n/a
GCC/Compiler version (if compiling from source): n/a
CUDA/cuDNN version: n/a
GPU model and memory: n/a

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Output: v1.14.0-1-hardened-0-g340d16ee58 1.14.0
Describe the current behavior
Google storage doesn't seem to be supported for some reason:
&lt;denchmark-code&gt;&gt; python
Python 3.6.8 (default, Jan 14 2019, 11:02:34)
[GCC 8.0.1 20180414 (experimental) [trunk revision 259383]] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import tensorflow as tf; tf.io.gfile.GFile("gs://some_bucket/test.txt").read()
[deprecation warning redacted]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/lib/io/file_io.py", line 122, in read
    self._preread_check()
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/lib/io/file_io.py", line 84, in _preread_check
    compat.as_bytes(self.__name), 1024 * 512)
tensorflow.python.framework.errors_impl.UnimplementedError: File system scheme 'gs' not implemented (file: 'gs://some_bucket/test.txt')
&lt;/denchmark-code&gt;

Describe the expected behavior
Verified to work with 1.13.2:
&lt;denchmark-code&gt;&gt; python
Python 3.6.8 (default, Jan 14 2019, 11:02:34)
[GCC 8.0.1 20180414 (experimental) [trunk revision 259383]] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import tensorflow as tf; tf.io.gfile.GFile("gs://some_bucket/test.txt").read()
[deprecation warning redacted]
'test\n'
&lt;/denchmark-code&gt;

Standalone code to reproduce the issue
See above.
Other info / logs
n/a
	</description>
	<comments>
		<comment id='1' author='pks' date='2020-05-26T09:31:44Z'>
		&lt;denchmark-link:https://github.com/pks&gt;@pks&lt;/denchmark-link&gt;

Can you check with other TF versions like 1.15, 2.x and see the behavior.Also, request you to provide colab link or simple standalone code with supporting files to reproduce the issue in our environment.It helps us in localizing the issue faster.Thanks!
		</comment>
		<comment id='2' author='pks' date='2020-05-26T10:00:47Z'>
		I tried the image intelaipg/intel-optimized-tensorflow:1.15.2-mkl-py3 and it works:
&lt;denchmark-code&gt;&gt; python
Python 3.6.9 (default, Nov  7 2019, 10:44:02)
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import tensorflow as tf; tf.io.gfile.GFile("gs://some_bucket/test.txt").read()
'test\n'
&lt;/denchmark-code&gt;

Tensorflow version:
&lt;denchmark-code&gt;&gt; python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
v1.15.2-0-gb57a210 1.15.2
&lt;/denchmark-code&gt;

I noticed that the hardened substring is missing from here.
This code snippet should suffice for testing:
&lt;denchmark-code&gt; import tensorflow as tf; tf.io.gfile.GFile("gs://some_bucket/test.txt").read()
&lt;/denchmark-code&gt;

Just note that the bucket and the file within it likely do not exist.
		</comment>
		<comment id='3' author='pks' date='2020-05-26T11:22:42Z'>
		&lt;denchmark-link:https://github.com/pks&gt;@pks&lt;/denchmark-link&gt;

The issue is resolved in latest TF version.And you can use TF 1.15 version. Can we close this issue?Thanks!
		</comment>
		<comment id='4' author='pks' date='2020-05-26T11:35:31Z'>
		This seems to be more like a packaging issue, somehow support for GCS was removed in this build.
We cannot use Tf 1.15 as we observed serious performance degradations with our models.
		</comment>
		<comment id='5' author='pks' date='2020-06-06T21:42:57Z'>
		&lt;denchmark-link:https://github.com/TensorFlow-MKL&gt;@TensorFlow-MKL&lt;/denchmark-link&gt;
 Could you please help look into this? Thank you very much!
		</comment>
		<comment id='6' author='pks' date='2020-06-12T23:14:38Z'>
		We are working on this issue. Will keep you posted
		</comment>
		<comment id='7' author='pks' date='2020-06-17T02:26:38Z'>
		
This seems to be more like a packaging issue, somehow support for GCS was removed in this build.
We cannot use Tf 1.15 as we observed serious performance degradations with our models.

&lt;denchmark-link:https://github.com/pks&gt;@pks&lt;/denchmark-link&gt;
  TF 1.15 should has less performance gap than TF 1.14.
Could try following script to disable eager mode, which would impact the first running performance?
&lt;denchmark-code&gt;import tensorflow as tf
tf.disable_eager_execution()
&lt;/denchmark-code&gt;

		</comment>
		<comment id='8' author='pks' date='2020-06-19T09:08:49Z'>
		&lt;denchmark-link:https://github.com/NeoZhangJianyu&gt;@NeoZhangJianyu&lt;/denchmark-link&gt;
 We found that the  operation is quite a bit slower in Tf 1.15 than it was in Tf 1.13, about 2-2.5x worse. Tf 1.14 still works as expected, but the  protocol was removed.
		</comment>
		<comment id='9' author='pks' date='2020-06-19T09:14:53Z'>
		&lt;denchmark-link:https://github.com/pks&gt;@pks&lt;/denchmark-link&gt;
 Could you try the docker image built by Google:  gcr.io/deeplearning-platform-release/tf-cpu.1-14 ?
It also includes the Intel optimization for Tensorflow.
I got following error in your case. Looks like it keep the "gs".
&lt;denchmark-code&gt;python -c "import tensorflow as tf; tf.io.gfile.GFile(\"gs://some_bucket/test.txt\").read()"
2020-06-19 09:04:23.374934: W tensorflow/core/platform/cloud/google_auth_provider.cc:178] All attempts to get a Google authentication bearer token failed, returning an empty token. Retrieving token from files failed with "Not found: Could not locate the credentials file.". Retrieving token from GCE failed with "Failed precondition: Error executing an HTTP request: HTTP response code 302 with body '&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Redirection&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;&lt;H1&gt;Redirect&lt;/H1&gt;&lt;/BODY&gt;
&lt;/HTML&gt;
'".
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "/root/miniconda3/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 124, in read
    length = self.size() - self.tell()
  File "/root/miniconda3/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 102, in size
    return stat(self.__name).length
  File "/root/miniconda3/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 727, in stat
    return stat_v2(filename)
  File "/root/miniconda3/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 744, in stat_v2
    pywrap_tensorflow.Stat(compat.as_bytes(path), file_statistics)
tensorflow.python.framework.errors_impl.PermissionDeniedError: Error executing an HTTP request: HTTP response code 403 with body '{
  "error": {
    "code": 403,
    "message": "The project to be billed is associated with a closed billing account.",
    "errors": [
      {
        "message": "The project to be billed is associated with a closed billing account.",
        "domain": "global",
        "reason": "accountDisabled",
        "locationType": "header",
        "location": "Authorization"
      }
    ]
  }
}
'
	 when reading metadata of gs://some_bucket/test.txt

&lt;/denchmark-code&gt;

Use following cmd to run it:
&lt;denchmark-code&gt;docker run -d -p 8080:8080 -v /home:/home  gcr.io/deeplearning-platform-release/tf-cpu.1-14
or
docker run -v /home:/home -it gcr.io/deeplearning-platform-release/tf-cpu.1-14 bash
&lt;/denchmark-code&gt;

		</comment>
		<comment id='10' author='pks' date='2020-06-19T09:16:31Z'>
		
@NeoZhangJianyu We found that the _MklSoftmax operation is quite a bit slower in Tf 1.15 than it was in Tf 1.13, about 2-2.5x worse. Tf 1.14 still works as expected, but the gs:// protocol was removed.

&lt;denchmark-link:https://github.com/pks&gt;@pks&lt;/denchmark-link&gt;
 I will check it. Thank your feedback!
		</comment>
		<comment id='11' author='pks' date='2020-06-23T07:56:39Z'>
		&lt;denchmark-link:https://github.com/pks&gt;@pks&lt;/denchmark-link&gt;
 Could try with the suggestion above and feedback?
		</comment>
		<comment id='12' author='pks' date='2020-06-25T09:57:01Z'>
		Yes, it works with other images. But they serve another purpose -- the Intel one has minimal dependencies.
Any update on the softmax issue? Should I open another issue for that? Unfortunately I cannot share specific code for this, but should be reproducable with other problems too.
		</comment>
		<comment id='13' author='pks' date='2020-07-01T02:30:12Z'>
		&lt;denchmark-link:https://github.com/pks&gt;@pks&lt;/denchmark-link&gt;

It's great that it works.
Could you close this issue?
For the sofmax performance issue, I have reproduced it and report an internal issue.
Yes, you can open another issue to trace it.
		</comment>
		<comment id='14' author='pks' date='2020-07-01T13:49:25Z'>
		Ok, I'll close it in favor of &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/40989&gt;#40989&lt;/denchmark-link&gt;
. But note that The the Tensorflow build in this image  does not support  and that there's no update for it.
		</comment>
		<comment id='15' author='pks' date='2020-07-01T13:49:27Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39851&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39851&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='16' author='pks' date='2020-07-02T01:26:30Z'>
		
Ok, I'll close it in favor of #40989. But note that The the Tensorflow build in this image intelaipg/intel-optimized-tensorflow:1.14.0-mkl-py3 does not support GFile and that there's no update for it.

&lt;denchmark-link:https://github.com/pks&gt;@pks&lt;/denchmark-link&gt;
. Thank you!
The TF1.14 is out of maintain. But TF 1.15 will be maintained for more months.
		</comment>
	</comments>
</bug>