<bug id='9416' author='jubjamie' open_date='2017-04-24T13:48:24Z' closed_time='2017-06-16T21:11:38Z'>
	<summary>Android Demo: Rotation on some devices broken.</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Android:
TensorFlow installed from source:
TensorFlow version 1.0.0:
N/A

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

The Android Demo code seems to be a bit buggy on our Pixel C. I wanted to confirm that this isn't an issue with the TF code but it's a strange one.
The Rotation in the demo apps on our Pixel C didn't seem to work correctly. It would give the value of 3 when it should have read 90. This meant that the input was basically on it's side. I found that for it to work that this line needed to be set to 0.
sensorOrientation = rotation + screenOrientation; needed to be
sensorOrientation = 0;
However, when used in landscape mode this didn't crop around the centre of the preview image but instead it created a square from the left edge.
&lt;denchmark-code&gt;|------------------| ---------|                         
|                  |          |
|       CROP       |          |
|     SQUARE       |          |
|__________________|__________|
&lt;/denchmark-code&gt;

When set to 0.
The solution seemed to be to set the Orientation to 360.
&lt;denchmark-code&gt;|-----|------------------|----|                         
|     |                  |    |
|     |        CROP      |    |
|     |      SQUARE      |    |
|_____|__________________|____|
&lt;/denchmark-code&gt;

When set to 360.
At the time (a couple of weeks ago) I recalled that it forced some code to run that would centre it as required for some other operations however going through the code to find it I can't. I think it was related to this but it doesn't make sense as to why 360 solved the issue.
&lt;denchmark-code&gt;private void configureTransform(final int viewWidth, final int viewHeight) {
    final Activity activity = getActivity();
    if (null == textureView || null == previewSize || null == activity) {
      return;
    }
    final int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
    final Matrix matrix = new Matrix();
    final RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);
    final RectF bufferRect = new RectF(0, 0, previewSize.getHeight(), previewSize.getWidth());
    final float centerX = viewRect.centerX();
    final float centerY = viewRect.centerY();
    if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
      bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY());
      matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL);
      final float scale =
          Math.max(
              (float) viewHeight / previewSize.getHeight(),
              (float) viewWidth / previewSize.getWidth());
      matrix.postScale(scale, scale, centerX, centerY);
      matrix.postRotate(90 * (rotation - 2), centerX, centerY);
    } else if (Surface.ROTATION_180 == rotation) {
      matrix.postRotate(180, centerX, centerY);
    }
    textureView.setTransform(matrix);
  }
&lt;/denchmark-code&gt;

So I guess the question is that is this happening due to some strange hardware bug with the Pixel C or some coding error. I'm leaning towards the former as this is too bizarre to be caused by code but thought i'd open the discussion out as others trying to run the app in landscape may face similar issues.
	</description>
	<comments>
		<comment id='1' author='jubjamie' date='2017-04-24T16:21:34Z'>
		Maybe &lt;denchmark-link:https://github.com/andrewharp&gt;@andrewharp&lt;/denchmark-link&gt;
 knows something about this
		</comment>
		<comment id='2' author='jubjamie' date='2017-04-24T16:21:49Z'>
		&lt;denchmark-link:https://github.com/drpngx&gt;@drpngx&lt;/denchmark-link&gt;
 You beat me by about 10 seconds. :)
		</comment>
		<comment id='3' author='jubjamie' date='2017-04-24T16:29:14Z'>
		WFH, with fast internet :-) but I have some meeting now, will leave the rest to you :-)
		</comment>
		<comment id='4' author='jubjamie' date='2017-04-24T16:32:39Z'>
		&lt;denchmark-link:https://github.com/jubjamie&gt;@jubjamie&lt;/denchmark-link&gt;
 To clarify, is the demo broken on your Pixel C even when compiling with no edits?
		</comment>
		<comment id='5' author='jubjamie' date='2017-04-24T16:36:20Z'>
		Yes. With no edits it had the rotation value as 3. So I went in to try and force it to be the correct value (which in portrait was 90).
In landscape I encountered the centring problem and had to set it to 360.  No problem on my 6P. Not sure if you guys have another Pixel C lying around to confirm it's not my hardware being funny?
		</comment>
		<comment id='6' author='jubjamie' date='2017-04-24T17:34:08Z'>
		So characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION) returns 3? That really shouldn't be happening... I suppose it'd be ok to assume 90 in general if the value returned % 90 != 0.
Regarding landscape support, this is something that would be nice to have but hasn't been high priority enough to work through all the transformations to ensure correctness. Contributions definitely welcome.
		</comment>
		<comment id='7' author='jubjamie' date='2017-04-25T11:22:07Z'>
		Yup. I've seen somewhere else on here where someone's Rotation was 1. I appreciate it's not really important in the grand scheme of things. Just mildly frustrating when this is the only sample code available. Are there any more detailed tutorials or specific documentation planned that could help with getting apps up and running correctly?
		</comment>
		<comment id='8' author='jubjamie' date='2017-04-25T17:12:47Z'>
		We have more walkthroughs planned, but they aren't specifically meant to improve upon camera support themselves.
You've already found &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/9142&gt;#9142&lt;/denchmark-link&gt;
, and &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/8736&gt;#8736&lt;/denchmark-link&gt;
 is meant to add android.hardware.Camera support for devices with wonky Camera2 behavior (like the Pixel C apparently) -- we just have to find the right discriminating features to make misbehaving devices choose the original API.
		</comment>
		<comment id='9' author='jubjamie' date='2017-04-25T17:17:44Z'>
		Walkthroughs for anything are very welcome! Fortunately my work doesn't really require too much android development work but I'm sure others will appreciate. I'll try and get back to this issue in a couple of days. Ta.
		</comment>
		<comment id='10' author='jubjamie' date='2017-06-16T21:11:38Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='11' author='jubjamie' date='2017-11-02T05:28:14Z'>
		I solved this problem.
		</comment>
		<comment id='12' author='jubjamie' date='2018-03-15T12:49:35Z'>
		Hi &lt;denchmark-link:https://github.com/jubjamie&gt;@jubjamie&lt;/denchmark-link&gt;
,
do you know if is it possible to make the crop square full screen?
I would like to recognize full screen and not just a part.
Thanks
		</comment>
		<comment id='13' author='jubjamie' date='2018-03-15T19:17:46Z'>
		&lt;denchmark-link:https://github.com/IgMart&gt;@IgMart&lt;/denchmark-link&gt;

For the  activity you can change &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/android/src/org/tensorflow/demo/ClassifierActivity.java#L80&gt;MAINTAIN_ASPECT_RATIO&lt;/denchmark-link&gt;
 to false, in which case it will stretch the entire screen to the dimensions of the model input.
For the  activity it already stretches with the default SSD model. The YOLO detector changes the behavior to use a center-crop via a similar &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/android/src/org/tensorflow/demo/DetectorActivity.java#L93&gt;MAINTAIN_ASPECT_RATIO&lt;/denchmark-link&gt;
 constant.
In either case you can verify the image actually being sent to TensorFlow by turning on debug mode with the volume keys.
&lt;denchmark-link:https://github.com/jubjamie&gt;@jubjamie&lt;/denchmark-link&gt;
 This particular rotation issue should have been fixed last year -- I went through and corrected the behavior so landscape should work on most devices.
		</comment>
		<comment id='14' author='jubjamie' date='2018-03-20T16:32:55Z'>
		&lt;denchmark-link:https://github.com/andrewharp&gt;@andrewharp&lt;/denchmark-link&gt;
 landscape is not working. I have tried and tested all the workaround I found on multiple devices and nothing happened (sensorOrientation for example).
Even with no edits, simply changing the orientation to landscape I get a cropped sceen just as &lt;denchmark-link:https://github.com/jubjamie&gt;@jubjamie&lt;/denchmark-link&gt;
 described. Where can I try to force rotation?
		</comment>
		<comment id='15' author='jubjamie' date='2019-04-17T18:57:36Z'>
		&lt;denchmark-link:https://github.com/Nanamare&gt;@Nanamare&lt;/denchmark-link&gt;
 Hey, may i ask how you were able to resolve the issue? I tried the 360 solution, however, it the cropped square is still staying towards left side of the screen. I am trying to stretch the preview square to fit the whole screen.
		</comment>
		<comment id='16' author='jubjamie' date='2019-06-19T12:18:41Z'>
		I commented out the portion in set fragment, which is calling the legacy connection fragment. Then landscape mode seems to work without any changes(except in the manifest file) - camera2api being used. (Incase, we want to retain the if..else block and want the legacy fragment to be called, then need to make changes in legacyconnectionfragment.java file corresponding to landscape mode.)
		</comment>
	</comments>
</bug>