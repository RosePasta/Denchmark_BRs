<bug id='23702' author='Abhijit-2592' open_date='2018-11-13T06:29:19Z' closed_time='2019-08-20T16:53:42Z'>
	<summary>Weird Bug in Tf.keras.Model.Predict(x=tf.Dataset iterator)</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): pip
TensorFlow version (use command below): 1.9.0 and 1.12.0 (I am using 1.9.0 but the bug is present in 1.12.0 also)
Python version: 3.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:M60 16 GB (two 8GB GPUs)

Describe the current behavior
when using tf.data.Dataset.Iterator in tf.keras.Model.predict(x=tf.data.Dataset.Iterator, steps). I am getting a weird value error:

Please provide data as a list or tuple of 2 elements  - input and target pair. Received Tensor("IteratorGetNext:0", dtype=int64)

The above error is misleading. why does it need (X,Y) for prediction?
My Testing tf.Dataset iterator obviously does not give a (X,Y) tuple. It gives only X in batches. When I give a numpy array of X as input it works as intended. If I use the dataset iterator with eager_execution enabled: I get this error (my batch size is 2):

Please provide data as a list or tuple of 2 elements  - input and target pair. Received tf.Tensor(
[[     68       5     521 ...       0       0       0]
[   6705 1235757    2411 ...    2804     147      13]], shape=(2, 5000), dtype=int64). We do not use the target value here.

Which makes it clear that when eager execution is enabled, Y is not used.
Moreover, why does tf.Dataset iterator need to output a tuple of (X,Y) ? when using tf.keras.Model.predict() ? Is this the expected behaviour?
NOTE: My model is a single input model not a multi input model
EDIT:
I worked around the error by providing (X,Y), But the keras progress bar doesn't seem to work with it.
	</description>
	<comments>
		<comment id='1' author='Abhijit-2592' date='2018-11-14T04:04:44Z'>
		&lt;denchmark-link:https://github.com/wt-huang&gt;@wt-huang&lt;/denchmark-link&gt;
 were you able to reproduce this issue? Or am I missing something?
		</comment>
		<comment id='2' author='Abhijit-2592' date='2018-11-17T03:01:55Z'>
		&lt;denchmark-link:https://github.com/Abhijit-2592&gt;@Abhijit-2592&lt;/denchmark-link&gt;
 You should be able to feed inputs to model.predict() method without getting any errors.
Make sure your model is instantiated properly and invoke model.fit() to feed inputs and outputs. You can find more details on &lt;denchmark-link:https://keras.io&gt;Keras Documentation&lt;/denchmark-link&gt;
.
You can also post your code snippet here.
		</comment>
		<comment id='3' author='Abhijit-2592' date='2018-11-17T03:21:30Z'>
		Ok I'm lost about all of this I been reading a lot of this and to no end I
still don't know what or who it's for I hut like to type but now I want to
know what I need to do cab I make money dy doing this
&lt;denchmark-link:#&gt;‚Ä¶&lt;/denchmark-link&gt;


On Fri, Nov 16, 2018, 9:04 PM wt-huang ***@***.*** wrote:
 @Abhijit-2592 &lt;https://github.com/Abhijit-2592&gt; You should be able to
 feed inputs to model.predict() method without getting any errors.

 Make sure your model is instantiated properly and invoke model.fit() to
 feed inputs and outputs. You can find more details on Keras Documentation
 &lt;https://keras.io&gt;.

 You can also post your code snippet here.

 ‚Äî
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 &lt;#23702 (comment)&gt;,
 or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/ArBbKtbA0bZaTW50ILg9ZGiG3_-x60m6ks5uv3zZgaJpZM4Ya_7j&gt;
 .



		</comment>
		<comment id='4' author='Abhijit-2592' date='2018-11-17T04:03:34Z'>
		&lt;denchmark-link:https://github.com/wt-huang&gt;@wt-huang&lt;/denchmark-link&gt;
 I am able to use model.fit() there isn't any issue there. But the problem is model.predict() requires (X,Y) When I am passing a tf.dataset.iterator But if I pass a numpy it takes only X and works as intended.
		</comment>
		<comment id='5' author='Abhijit-2592' date='2019-01-21T17:30:32Z'>
		
@wt-huang I am able to use model.fit() there isn't any issue there. But the problem is model.predict() requires (X,Y) When I am passing a tf.dataset.iterator But if I pass a numpy it takes only X and works as intended.

What if numpy X is too large to fit in memory when I call mode.predict()? I am trying to use tf.dataset to batch it. BUt it requires (X, Y)...
		</comment>
		<comment id='6' author='Abhijit-2592' date='2019-01-22T04:50:02Z'>
		&lt;denchmark-link:https://github.com/XYudong&gt;@XYudong&lt;/denchmark-link&gt;
 exactly the same issue
		</comment>
		<comment id='7' author='Abhijit-2592' date='2019-02-09T01:00:06Z'>
		&lt;denchmark-link:https://github.com/Abhijit-2592&gt;@Abhijit-2592&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/XYudong&gt;@XYudong&lt;/denchmark-link&gt;
 Is this still an issue? Could you try loading newer TF version and check it? Please let me know the progress. Thanks!
		</comment>
		<comment id='8' author='Abhijit-2592' date='2019-02-09T02:42:50Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 , I checked on Tensorflow 1.12.0 (pip released on 6th Nov 2018) and the bug still exists. You want me to check on the 1.13.0rc1 version? which was released on 8th Feb 2019?
		</comment>
		<comment id='9' author='Abhijit-2592' date='2019-02-11T18:49:28Z'>
		&lt;denchmark-link:https://github.com/Abhijit-2592&gt;@Abhijit-2592&lt;/denchmark-link&gt;
 Yes. It would be great if you can check with the 1.13.0rc1 version. Thanks!
		</comment>
		<comment id='10' author='Abhijit-2592' date='2019-02-11T19:06:55Z'>
		&lt;denchmark-link:https://github.com/Abhijit-2592&gt;@Abhijit-2592&lt;/denchmark-link&gt;
 If this still fails with 1.13.0rc1, please share a code snippet that reproduces the problem so that we can investigate further.
		</comment>
		<comment id='11' author='Abhijit-2592' date='2019-02-14T07:31:14Z'>
		&lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
  and &lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
. Thanks! This appears to be  in
tf-nightly-1.13.0-dev20190213
The following code snippet threw the error I mentioned when running with &lt;=1.12.0 (stable version)
import tensorflow as tf

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()
x_test = x_test.reshape((10000,28,28,1))
y_test = tf.keras.utils.to_categorical(y=y_test)
model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Conv2D(8, kernel_size=3, activation='relu', input_shape=(28,28,1)))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(10, activation='softmax'))
dataset = tf.data.Dataset.from_tensor_slices((x_test)) # I need to provide y_test also until version 1.12.0
dataset = dataset.batch(batch_size=10)
data = dataset.make_one_shot_iterator()
output = model.predict(x=data,steps=1000,verbose=True)
This runs as intended in nightly version for both normal and eager mode.
One more thing which I really liked was, It doesn't look like I need to create a one_shot_iterator or initializable_iterator.  I can directly pass the dataset object to model.predict which feels more natural üëç . Before, while using tf.data with Embedding layers, I had to write a few boilerplate code to initialize lookup tables:
train_iterator = train_data.make_initializable_iterator()
valid_iterator = valid_data.make_initializable_iterator()

# initialize tables and iterators using sess from tf.keras
init_sess = tf.keras.backend.get_session()
init_sess.run(train_iterator.initializer)
init_sess.run(valid_iterator.initializer)
init_sess.run(tf.tables_initializer())
My question is do I need to run this boilerplate code in upcoming versions of tensorflow? It will be really great if it is handled internally.
		</comment>
		<comment id='12' author='Abhijit-2592' date='2019-07-05T10:28:12Z'>
		i guess i am encountering this error in tensorflow==1.14.0, the model.fit is finished successfully with tf.data.Dataset input, but the model.predict keep giving error:
&lt;denchmark-code&gt;ValueError: Please provide model inputs as a list or tuple of 2 or 3 elements: (input, target) or (input, target, sample_weights) Received (&lt;tf.Tensor 'IteratorGetNext_1:0' shape=(224, 224, 3) dtype=float32&gt;, &lt;tf.Tensor 'IteratorGetNext_1:1' shape=(224, 224, 3) dtype=float32&gt;)
&lt;/denchmark-code&gt;

when i construct the dataset with X only, looks it is expecting Y also?
		</comment>
		<comment id='13' author='Abhijit-2592' date='2019-08-18T10:54:28Z'>
		I am having the same issue with tensorflow version==1.12.0. Any solution?
		</comment>
		<comment id='14' author='Abhijit-2592' date='2019-08-19T21:53:21Z'>
		&lt;denchmark-link:https://github.com/lnshi&gt;@lnshi&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/samra-irshad&gt;@samra-irshad&lt;/denchmark-link&gt;
 I don't see any issues with TF1.14.0 which is also a stable version or you could try with tf-nightly also. With recent versions, you need to pass  and not . Please check the code below. Please let us know whether it was resolved for you. Thanks!
&lt;denchmark-code&gt;!pip install tensorflow==1.14.0
import tensorflow as tf

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()
x_test = x_test.reshape((10000,28,28,1))
y_test = tf.keras.utils.to_categorical(y=y_test)
model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Conv2D(8, kernel_size=3, activation='relu', input_shape=(28,28,1)))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(10, activation='softmax'))
dataset = tf.data.Dataset.from_tensor_slices((x_test)) # I need to provide y_test also until version 1.12.0
dataset = dataset.batch(batch_size=10)
data = dataset.make_one_shot_iterator()
output = model.predict(x=dataset,steps=1000,verbose=True)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='15' author='Abhijit-2592' date='2019-08-19T23:25:49Z'>
		
@lnshi @samra-irshad I don't see any issues with TF1.14.0 which is also a stable version or you could try with tf-nightly also. With recent versions, you need to pass dataset and not dataset iterator. Please check the code below. Please let us know whether it was resolved for you. Thanks!
!pip install tensorflow==1.14.0
import tensorflow as tf

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()
x_test = x_test.reshape((10000,28,28,1))
y_test = tf.keras.utils.to_categorical(y=y_test)
model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Conv2D(8, kernel_size=3, activation='relu', input_shape=(28,28,1)))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(10, activation='softmax'))
dataset = tf.data.Dataset.from_tensor_slices((x_test)) # I need to provide y_test also until version 1.12.0
dataset = dataset.batch(batch_size=10)
data = dataset.make_one_shot_iterator()
output = model.predict(x=dataset,steps=1000,verbose=True)


&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 I was able to resolve this issue. I have tensorflow version 1.12.0. The predict function demands target labels in tensorflow version 1.12.0 where logically it should not. Anyhow I provided the targets (since it does not use them, so I guess it should not matter whether I provide it the labels or not)
		</comment>
		<comment id='16' author='Abhijit-2592' date='2019-08-20T16:53:42Z'>
		&lt;denchmark-link:https://github.com/samra-irshad&gt;@samra-irshad&lt;/denchmark-link&gt;
 Got it. There were lot of modifications and improvements between TF1.12.0 and current version. I would suggest you to upgrade to TF1.14.0 which is also a stable version. If you are familiar with TF2.0, then it is better to upgrade to TF2.0. Thanks.
Automatically closing this out since I understand it to be resolved in TF1.14.0, but please let me know if I'm mistaken.Thanks!
		</comment>
		<comment id='17' author='Abhijit-2592' date='2019-08-20T16:53:43Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=23702&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=23702&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>