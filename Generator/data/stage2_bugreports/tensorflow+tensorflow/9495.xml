<bug id='9495' author='lipingliulp' open_date='2017-04-27T18:07:44Z' closed_time='2017-05-01T21:59:01Z'>
	<summary>Inconsistent results when tf.sqrt() is applied to tensor versus element-wise</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution (e.g., Linux Ubuntu 16.04): fedora 24
TensorFlow installed from (source or binary): pip
Exact command to reproduce:

&lt;denchmark-code&gt;import tensorflow as tf

import numpy as np

start = 0 
linear_indices = (tf.range(start, 496) + 1) * 8 + 1 
index = 495 - start  

rind  = tf.sqrt(tf.cast(linear_indices, tf.float32)) - 63  
rind1 = tf.gather(rind, index)

linear_index = tf.gather(linear_indices, index)
rind2 = tf.sqrt(tf.cast(linear_index, tf.float32)) - 63  

session = tf.Session()
print(session.run(rind1))
print(session.run(rind2))
&lt;/denchmark-code&gt;

Output:
&lt;denchmark-code&gt;In [5]: %run calculation_test.py
3.8147e-06
0.0
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

The order of operations gives different behavior in tf.gather. rind1 and rind2 tensors should have the same value (0).
cc &lt;denchmark-link:https://github.com/altosaar&gt;@altosaar&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='lipingliulp' date='2017-04-28T18:16:37Z'>
		I don't see how those two computations are supposed to be the same. rind2 is a tf.sqrt(...) and rind1 is a gather. One is going through more (inexact) floating point arithmetic and one is not. So 3.8147e-6 is almost zero and 0.0 is zero. So they seem the same to me. Could you please explain your example more clearly.
And also, what version of tesnorflow are you using?
		</comment>
		<comment id='2' author='lipingliulp' date='2017-04-28T18:34:45Z'>
		tf.sqrt(...) is an element-wise operation, so when it is applied to an array, it should be as if it is applied element by element. In this sense, the two result should be exactly the same.
I am using tf 1.11
Thanks for look into this problem
		</comment>
		<comment id='3' author='lipingliulp' date='2017-04-28T19:10:54Z'>
		New finding: I think the problem is in tf.sqrt(...)
Here is the code, taking sqrt of the array versus taking sqrt element by element,
&lt;denchmark-code&gt;import tensorflow as tf

arr = tf.range(0, 1000, dtype=tf.float32)

result1 = tf.sqrt(arr)      # taking sqrt of the array


alist = tf.unstack(arr)    # unpack
rlist = []
for elm in alist:              # taking sqrt element by element, 
    rlist.append(tf.sqrt(elm))
result2 = tf.stack(rlist)  # then pack the results into an array 

diff = tf.reduce_sum(tf.abs(result1 - result2))

session = tf.Session()
print('The difference is %f ' % session.run(diff))
&lt;/denchmark-code&gt;

and the output is,
&lt;denchmark-code&gt;The difference is 0.001230
&lt;/denchmark-code&gt;

I expect the output to be 0.
cc &lt;denchmark-link:https://github.com/altosaar&gt;@altosaar&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='lipingliulp' date='2017-04-28T20:36:14Z'>
		Are you running this using a GPU or CPU? If GPU then try on the CPU and see if you get the same behavior. Please report more details about your GPU/system/etc.
		</comment>
		<comment id='5' author='lipingliulp' date='2017-04-28T20:37:42Z'>
		The result is obtained from a CPU. If you need cpu info, here it is,
processor   : 0
vendor_id   : GenuineIntel
cpu family  : 6
model       : 78
model name  : Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz
		</comment>
		<comment id='6' author='lipingliulp' date='2017-05-01T20:05:51Z'>
		This test is not meaningful, you are summing errors of numbers that are not of similar magnitude...
&lt;denchmark-code&gt;import tensorflow as tf

arr = tf.range(0, 1000, dtype=tf.float32)

result1 = tf.sqrt(arr)      # taking sqrt of the array


alist = tf.unstack(arr)    # unpack
rlist = []
for elm in alist:              # taking sqrt element by element, 
    rlist.append(tf.sqrt(elm))
result2 = tf.stack(rlist)  # then pack the results into an array 

diff = tf.reduce_max(tf.abs(result1 - result2)/tf.abs(result1))

session = tf.Session()
print('The difference is %f ' % session.run(diff))

&lt;/denchmark-code&gt;

This computes the max relative error over all elements and I get 0.0000002422335683 i.e. 2e-7 which is about floating point precision. The exact path in the cpu is different for small arrays because large arrays are done with sse for speed.
		</comment>
		<comment id='7' author='lipingliulp' date='2017-05-01T20:23:54Z'>
		I see. It is interesting that CPU has different behaviors for large arrays and small arrays.
I'm satisfied with this explanation. Thanks!
cc &lt;denchmark-link:https://github.com/altosaar&gt;@altosaar&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>