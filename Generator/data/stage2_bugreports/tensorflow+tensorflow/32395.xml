<bug id='32395' author='mjarosie' open_date='2019-09-10T21:33:25Z' closed_time='2019-09-13T01:03:43Z'>
	<summary>AssertionError: Unreachable when adding or subtracting Dataset range element and tf.constant</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 Home Version	10.0.18362 Build 18362
TensorFlow installed from (source or binary): binary (pip)
TensorFlow version (use command below): 1.14
Python version: 3.6.9

Describe the current behavior
I'm trying to calculate the minimum index to take for extracting windows out of the dataset. I've got a constant window_size defined of which dtype defaults to int32. After running the following code it throws Assertion Error.
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf

tf.enable_eager_execution()

ds = tf.data.Dataset.range(10)
window_size = tf.constant(3)

def mapper(idx):
    test = idx - window_size
    return test

ds = ds.map(mapper)
&lt;/denchmark-code&gt;

the same issue happens when I add or multiply (but not divide!).
When dividing with this mapper:
&lt;denchmark-code&gt;def mapper(idx):
    test = idx / window_size
    return test
&lt;/denchmark-code&gt;

I get TypeError: x and y must have the same dtype, got tf.int64 != tf.int32.
Then I've tried casting window_size to tf.int64: window_size = tf.constant(3, dtype=tf.int64) and that fixed the issue in all cases.
Describe the expected behavior
I'd expect the error to be the same in case of addition/subtraction/multiplication as in case of division as it turns out to be the dtype issue.
Other info / logs
&lt;denchmark-code&gt;  File "C:/source/test_python_project/main.py", line 14, in &lt;module&gt;
    ds = ds.map(mapper)
  File "C:\ProgramData\Anaconda3\envs\test_python_project\lib\site-packages\tensorflow\python\data\ops\dataset_ops.py", line 1772, in map
    MapDataset(self, map_func, preserve_cardinality=False))
  File "C:\ProgramData\Anaconda3\envs\test_python_project\lib\site-packages\tensorflow\python\data\ops\dataset_ops.py", line 3190, in __init__
    use_legacy_function=use_legacy_function)
  File "C:\ProgramData\Anaconda3\envs\test_python_project\lib\site-packages\tensorflow\python\data\ops\dataset_ops.py", line 2555, in __init__
    self._function = wrapper_fn._get_concrete_function_internal()
  File "C:\ProgramData\Anaconda3\envs\test_python_project\lib\site-packages\tensorflow\python\eager\function.py", line 1355, in _get_concrete_function_internal
    *args, **kwargs)
  File "C:\ProgramData\Anaconda3\envs\test_python_project\lib\site-packages\tensorflow\python\eager\function.py", line 1349, in _get_concrete_function_internal_garbage_collected
    graph_function, _, _ = self._maybe_define_function(args, kwargs)
  File "C:\ProgramData\Anaconda3\envs\test_python_project\lib\site-packages\tensorflow\python\eager\function.py", line 1652, in _maybe_define_function
    graph_function = self._create_graph_function(args, kwargs)
  File "C:\ProgramData\Anaconda3\envs\test_python_project\lib\site-packages\tensorflow\python\eager\function.py", line 1545, in _create_graph_function
    capture_by_value=self._capture_by_value),
  File "C:\ProgramData\Anaconda3\envs\test_python_project\lib\site-packages\tensorflow\python\framework\func_graph.py", line 715, in func_graph_from_py_func
    func_outputs = python_func(*func_args, **func_kwargs)
  File "C:\ProgramData\Anaconda3\envs\test_python_project\lib\site-packages\tensorflow\python\data\ops\dataset_ops.py", line 2549, in wrapper_fn
    ret = _wrapper_helper(*args)
  File "C:\ProgramData\Anaconda3\envs\test_python_project\lib\site-packages\tensorflow\python\data\ops\dataset_ops.py", line 2489, in _wrapper_helper
    ret = func(*nested_args)
  File "C:/source/test_python_project/main.py", line 10, in mapper
    test = idx - window_size
  File "C:\ProgramData\Anaconda3\envs\test_python_project\lib\site-packages\tensorflow\python\ops\math_ops.py", line 884, in binary_op_wrapper
    return func(x, y, name=name)
  File "C:\ProgramData\Anaconda3\envs\test_python_project\lib\site-packages\tensorflow\python\ops\gen_math_ops.py", line 11574, in sub
    "Sub", x=x, y=y, name=name)
  File "C:\ProgramData\Anaconda3\envs\test_python_project\lib\site-packages\tensorflow\python\framework\op_def_library.py", line 621, in _apply_op_helper
    assert False, "Unreachable"
AssertionError: Unreachable
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='mjarosie' date='2019-09-11T08:54:57Z'>
		I could reproduce the issue on Colab with TF 1.14.0. Please see the &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/3e14ff83be3cfa578cc4762b30d30e6a/untitled137.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks
		</comment>
		<comment id='2' author='mjarosie' date='2019-09-13T01:03:43Z'>
		This is fixed with TF 1.15. I tested with TF version  '1.15.0-dev20190821' in google colab.
The error message is more intuitive now.
import tensorflow as tf
tf.enable_eager_execution()
ds = tf.data.Dataset.range(10)
window_size = tf.constant(3) #, dtype=tf.int64)
def mapper(idx):
    test = idx - window_size
    return test
ds = ds.map(mapper)
Output:
 TypeError: Input 'y' of 'Sub' Op has type int32 that does not match type int64 of argument 'x'.
Further casting window_size to tf.int64 resolves the issue as you mentioned.
Thanks!
		</comment>
		<comment id='3' author='mjarosie' date='2019-09-13T01:03:45Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=32395&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=32395&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>