<bug id='32029' author='roebel' open_date='2019-08-28T00:13:46Z' closed_time='2020-02-20T23:00:36Z'>
	<summary>tensorflow.keras.Model.compute_output_shape gives wrong results</summary>
	<description>
System information


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
yes


OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
linux Ubuntu 18.04


TensorFlow installed from (source or binary):
conda


TensorFlow version (use command below):
tried with 1.12.0 and 1.14.0


Python version:
3.6


Describe the current behavior
using a keras model (stored in a variable mm) in tensorflow.keras I would like to calculate the output_shape for a given input. This works correctly only the first time I call mm.compute_output_shape(), the subsequent results for calling the same function with different shapes are inconsistent.
Using standard keras methods I get different and consistent results.
An example for the problem is implemented in the tf_bug.py script that you find in the zip
if you call it without parameters it loads a fully convolutional model
from a json file (provided in the zip) and does
&lt;denchmark-code&gt;import json
import tensorflow.keras as keras
with open("model_tf_bug.json", "r") as fi:  
    kk=json.load(fi)  
    mm=keras.models.model_from_json(json.dumps(kk)) 

for n in range(999, 1020):  
     ss=[(1,n,1,1)]
     print(ss,mm.compute_output_shape(input_shape=ss)) 
&lt;/denchmark-code&gt;

the result displaying the input and corresponding output shape on each line is
&lt;denchmark-code&gt;[(1, 999, 1, 1)] (1, 481, 1, 1)
[(1, 1000, 1, 1)] (1, 481, 1, 1)
[(1, 1001, 1, 1)] (1, 482, 1, 1)
[(1, 1002, 1, 1)] (1, 482, 1, 1)
[(1, 1003, 1, 1)] (1, 483, 1, 1)
[(1, 1004, 1, 1)] (1, 483, 1, 1)
[(1, 1005, 1, 1)] (1, 484, 1, 1)
[(1, 1006, 1, 1)] (1, 484, 1, 1)
[(1, 1007, 1, 1)] (1, 482, 1, 1)
[(1, 1008, 1, 1)] (1, 485, 1, 1)
...
&lt;/denchmark-code&gt;

I kept only the relevant lines. You see that after the first lines that are correct
starting with input shape 1007 the output shape decreases and starts to produce erratic behavior, while for the fully convolutional model it should increase monotonously with the input size.
Describe the expected behavior
Running the same script with argument keras uses the vanilla keras version 2.2.4
and in this case the output shape increases  as expected
&lt;denchmark-code&gt;[(1, 999, 1, 1)] (1, 481, 1, 1)
[(1, 1000, 1, 1)] (1, 481, 1, 1)
[(1, 1001, 1, 1)] (1, 482, 1, 1)
[(1, 1002, 1, 1)] (1, 482, 1, 1)
[(1, 1003, 1, 1)] (1, 483, 1, 1)
[(1, 1004, 1, 1)] (1, 483, 1, 1)
[(1, 1005, 1, 1)] (1, 484, 1, 1)
[(1, 1006, 1, 1)] (1, 484, 1, 1)
[(1, 1007, 1, 1)] (1, 485, 1, 1)
[(1, 1008, 1, 1)] (1, 485, 1, 1)
...
&lt;/denchmark-code&gt;

Note that I can get a correct result with tf.keras as well if I clear the model._output_shape_cache before I compute the output_shape.
Running the script with argument clear uses a modified loop as follows
&lt;denchmark-code&gt;for n in range(999, 1020):  
     ss=[(1,n,1,1)]
     if len(sys.argv) &gt; 1 and sys.argv[1] == "clear":
         mm._output_shape_cache.clear()
     print(ss,mm.compute_output_shape(input_shape=ss)) 
&lt;/denchmark-code&gt;

The results are correct as expected.
Looking into the function mm.compute_output_shape
I found that compared to keras you changed the cache_key generation
where keras does
&lt;denchmark-code&gt;cache_key = ', '.join([str(x) for x in input_shapes])
&lt;/denchmark-code&gt;

tf.keras does
&lt;denchmark-code&gt;    cache_key = generic_utils.object_list_uid(input_shape)
&lt;/denchmark-code&gt;

It appears that the cache_key in tf.keras confuses different input shapes as the same and returns wrong results from the cache.
Code to reproduce the issue
You find the script, model and output files in the zip
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3548512/tf_compute_output_shape_bug.zip&gt;tf_compute_output_shape_bug.zip&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='roebel' date='2019-09-05T17:27:28Z'>
		Was able to reproduce the issue. Please find the attachment of github gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gowthamkpr/b4519fb3fb254cd7daaecc7095070456/untitled127.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='roebel' date='2019-11-04T15:16:00Z'>
		&lt;denchmark-link:https://github.com/gowthamkpr&gt;@gowthamkpr&lt;/denchmark-link&gt;
 Did you find the solution for this?
I have similar problem: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/33785&gt;#33785&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='roebel' date='2020-02-20T23:00:37Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32029&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32029&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>