<bug id='6384' author='noammor' open_date='2016-12-18T12:13:13Z' closed_time='2017-01-04T23:35:32Z'>
	<summary>Error in einsum with unspecified dimensions</summary>
	<description>
Code:
&lt;denchmark-code&gt;import tensorflow as tf

x = tf.placeholder(dtype=tf.int32)

A = tf.random_normal([13, x, 512])
B = tf.random_normal([512, 3])
C = tf.einsum('ijk,kl-&gt;ijl', A, B)

with tf.Session() as sess:
    print(sess.run(C, {x: 7}))
&lt;/denchmark-code&gt;

Output:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/noam/code/test/test_einsum.py", line 7, in &lt;module&gt;
    C = tf.einsum('ijk,kl-&gt;ijl', A, B)
  File "/home/noam/miniconda3/envs/ml/lib/python3.5/site-packages/tensorflow/python/ops/special_math_ops.py", line 212, in einsum
    axes_to_sum)
  File "/home/noam/miniconda3/envs/ml/lib/python3.5/site-packages/tensorflow/python/ops/special_math_ops.py", line 341, in _einsum_reduction
    product = _reshape_if_necessary(product, uncompacted_shape)
  File "/home/noam/miniconda3/envs/ml/lib/python3.5/site-packages/tensorflow/python/ops/special_math_ops.py", line 366, in _reshape_if_necessary
    return array_ops.reshape(tensor, new_shape)
  File "/home/noam/miniconda3/envs/ml/lib/python3.5/site-packages/tensorflow/python/ops/gen_array_ops.py", line 2448, in reshape
    name=name)
  File "/home/noam/miniconda3/envs/ml/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py", line 493, in apply_op
    raise err
  File "/home/noam/miniconda3/envs/ml/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py", line 490, in apply_op
    preferred_dtype=default_dtype)
  File "/home/noam/miniconda3/envs/ml/lib/python3.5/site-packages/tensorflow/python/framework/ops.py", line 669, in convert_to_tensor
    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
  File "/home/noam/miniconda3/envs/ml/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py", line 176, in _constant_tensor_conversion_function
    return constant(v, dtype=dtype, name=name)
  File "/home/noam/miniconda3/envs/ml/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py", line 165, in constant
    tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape, verify_shape=verify_shape))
  File "/home/noam/miniconda3/envs/ml/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py", line 441, in make_tensor_proto
    tensor_proto.string_val.extend([compat.as_bytes(x) for x in proto_values])
  File "/home/noam/miniconda3/envs/ml/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py", line 441, in &lt;listcomp&gt;
    tensor_proto.string_val.extend([compat.as_bytes(x) for x in proto_values])
  File "/home/noam/miniconda3/envs/ml/lib/python3.5/site-packages/tensorflow/python/util/compat.py", line 65, in as_bytes
    (bytes_or_text,))
TypeError: Expected binary or unicode string, got 13
&lt;/denchmark-code&gt;

Using Tensorflow version 0.12.0-rc0, also tested and fails the same way on 0.12.0-rc1.
	</description>
	<comments>
		<comment id='1' author='noammor' date='2016-12-19T11:25:34Z'>
		Having the same issue. Does anyone know of a workaround until this gets fixed?
		</comment>
		<comment id='2' author='noammor' date='2016-12-19T14:55:58Z'>
		I'm having the same issuse.
@asrivat1: I guess you've doing something like multiplication of each element of the batch of shape [B,I,J] with a matrix of shape [J,K]. In that case you could just reshape the batch to [B*I,J] and do the ordinary tf.matmul to obtain the result of shape [B*I,K], and then reshape this to [B,I,K]. To do the reshaping you can determine the tensor shapes with tf.shape.
		</comment>
		<comment id='3' author='noammor' date='2016-12-28T00:40:58Z'>
		This appears to work for me on python2.7 just fine. It appears you are using python3. Perhaps try forcing the string to be bytes and/or unicode. Are you all using Python 3?
		</comment>
		<comment id='4' author='noammor' date='2016-12-28T00:48:37Z'>
		I'm in 2.7. &lt;denchmark-link:https://github.com/aselle&gt;@aselle&lt;/denchmark-link&gt;
 are you on 0.12.0-rc1? I found two workarounds. The first is to pad out the shape of the tensors to some fixed size using 0s via , and this fixes the  bug. The other solution is what &lt;denchmark-link:https://github.com/J88K&gt;@J88K&lt;/denchmark-link&gt;
 suggested, and it's about 80% faster for my program. Also worth noting that for joining on multiple dimensions,  works wonders. The only disadvantage is that according to  I'm now spending as much time transposing and reshaping my tensors as I am actually multiplying them.
		</comment>
		<comment id='5' author='noammor' date='2016-12-28T00:49:28Z'>
		Also worth noting I'm using Cython and Anaconda. It's possible that's part of the problem.
		</comment>
		<comment id='6' author='noammor' date='2017-01-01T11:59:53Z'>
		+1
I'm having the same error using einsum where one of the dims is unknown.
I'm using python 3.5 (Anaconda).
It will be great to have this fixed.
		</comment>
		<comment id='7' author='noammor' date='2017-01-01T13:55:29Z'>
		&lt;denchmark-link:https://github.com/aselle&gt;@aselle&lt;/denchmark-link&gt;
 - Tested on 2.7, fails the same way:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/tmp/test.py", line 7, in &lt;module&gt;
	C = tf.einsum('ijk,kl-&gt;ijl', A, B)
  File "/home/noam/miniconda3/envs/2.7test/lib/python2.7/site-packages/tensorflow/python/ops/special_math_ops.py", line 212, in einsum
	axes_to_sum)
  File "/home/noam/miniconda3/envs/2.7test/lib/python2.7/site-packages/tensorflow/python/ops/special_math_ops.py", line 341, in _einsum_reduction
	product = _reshape_if_necessary(product, uncompacted_shape)
  File "/home/noam/miniconda3/envs/2.7test/lib/python2.7/site-packages/tensorflow/python/ops/special_math_ops.py", line 366, in _reshape_if_necessary
	return array_ops.reshape(tensor, new_shape)
  File "/home/noam/miniconda3/envs/2.7test/lib/python2.7/site-packages/tensorflow/python/ops/gen_array_ops.py", line 2448, in reshape
	name=name)
  File "/home/noam/miniconda3/envs/2.7test/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py", line 493, in apply_op
	raise err
TypeError: Expected binary or unicode string, got 13
&lt;/denchmark-code&gt;

Tensorflow 0.12.1, installed from pip. I created a fresh empty anaconda environment (conda create -n 2.7test python=2.7), issued pip install tensorflow and ran the code in the original bug report.
		</comment>
		<comment id='8' author='noammor' date='2017-01-04T22:51:13Z'>
		Could you try building master from source? A &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/30d2a2235a66e158757b13b6dd0bab7bf5e60492&gt;fix&lt;/denchmark-link&gt;
 went in  that isn't in r0.12 that sounds as if it might address the issue, at least from the title.
		</comment>
		<comment id='9' author='noammor' date='2017-01-04T23:04:43Z'>
		&lt;denchmark-link:https://github.com/michaelisard&gt;@michaelisard&lt;/denchmark-link&gt;
 I didn't build from source, but I did add the line:
&lt;denchmark-code&gt;new_shape = tuple(-1 if x is None else x for x in new_shape)
&lt;/denchmark-code&gt;

to tensorflow/python/ops/special_math_ops.py in 0.12.1 manually, and it does seem to fix the issue. I probably won't have time to build from source in the upcoming week.
		</comment>
		<comment id='10' author='noammor' date='2017-01-04T23:35:32Z'>
		OK I will close for now but please reopen if the problem doesn't go away with the new code.
		</comment>
		<comment id='11' author='noammor' date='2017-01-07T20:42:08Z'>
		Just built from source and can confirm that this is now working. Thanks!
		</comment>
	</comments>
</bug>