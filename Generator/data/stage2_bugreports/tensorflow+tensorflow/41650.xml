<bug id='41650' author='khazit' open_date='2020-07-23T07:53:42Z' closed_time='2021-01-07T19:05:07Z'>
	<summary>Dangerous data format default in SSIM</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Red Hat Linux 7
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 2.2
Python version: 3.8
CUDA/cuDNN version: 10
GPU model and memory:


&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/image/ssim&gt;SSIM&lt;/denchmark-link&gt;
 assumes that the image batches have a shape (h, w, batch_size). This is not documented anywhere and the only reason I was aware of it is when I had a batch size smaller than 11, which triggers the following assertion to fail:
  checks = [
      control_flow_ops.Assert(
          math_ops.reduce_all(
              math_ops.greater_equal(shape1[-3:-1], filter_size)),
          [shape1, filter_size],
          summarize=8),
      control_flow_ops.Assert(
          math_ops.reduce_all(
              math_ops.greater_equal(shape2[-3:-1], filter_size)),
          [shape2, filter_size],
          summarize=8)
  ]
Because:
&lt;denchmark-code&gt;&gt;&gt;&gt; shape = (4, 255, 255)
&gt;&gt;&gt; shape[-3:-1]
(4, 255)
&lt;/denchmark-code&gt;

and filter_size = 11
Describe the expected behavior
This behaviour should be documented.
The user should have the choice to choose the data format : bath size first or last. By default, I think it should be batch size first as it's the way tf.data.Dataset handles the input pipeline.
Standalone code to reproduce the issue
This works
&lt;denchmark-code&gt;shape = (255, 255, 4)
img1 = tf.zeros(shape)
img2 = tf.zeros(shape)
tf.image.ssim(
    img1, img2, 1
)
&lt;/denchmark-code&gt;

But this doesn't
&lt;denchmark-code&gt;shape = (4, 255, 255)
img1 = tf.zeros(shape)
img2 = tf.zeros(shape)
tf.image.ssim(
    img1, img2, 1
)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='khazit' date='2020-07-23T09:49:11Z'>
		&lt;denchmark-link:https://github.com/khazit&gt;@khazit&lt;/denchmark-link&gt;

I have tried in colab with TF version 2.2,2.3-rc1.Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/b978e4ca53d728e584baa76ce67bfc4b/untitled177.ipynb&gt;here&lt;/denchmark-link&gt;
.You are refering to same behavior?
Thanks!
		</comment>
		<comment id='2' author='khazit' date='2020-07-23T10:24:41Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
  Yes it's the same behavior
		</comment>
		<comment id='3' author='khazit' date='2020-07-29T11:05:21Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 any update on this ? I'm willing to work on it.
		</comment>
		<comment id='4' author='khazit' date='2021-01-07T15:15:04Z'>
		I had the same question these days. After digging into the code



tensorflow/tensorflow/python/ops/image_ops_impl.py


         Line 4307
      in
      14246bd






 ssim_per_channel, _ = _ssim_per_channel(img1, img2, max_val, filter_size, 





, it turns out that the implementation assumes the input data has a shape of (batch size, h, w, channel). It calculate the ssim per channel and takes the average for each image, i.e the return is expected to have a shape of (batch size,).
However, if the input data happens to have a shape of (batch size, h, w). It simply assume the input data has only 1 batch with a shape of (h, w, channel) and continue with the calculation. If the batch_size happens to be smaller than the filter_size, an exception will be raised during the shape check.
I would still call the implementation dangerous since people will get the wrong result with an input data shape of (batch size, h, w), when the batch_size is larger than the filter_size. It could still work nicely during training as a loss function (1 - ssim).
Finally, the correct way is to reshape the data to (batch size, h, w, 1).
		</comment>
		<comment id='5' author='khazit' date='2021-01-07T19:05:07Z'>
		&lt;denchmark-link:https://github.com/khazit&gt;@khazit&lt;/denchmark-link&gt;
 Example in the doc was updated to clearly mention the data shape required for this function. Please check the updated example &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/image/ssim?version=nightly&gt;here&lt;/denchmark-link&gt;
. Thanks for raising this issue. Please check the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/ee5449eed95302b912685d249440cb1d/untitled177.ipynb&gt;gist here&lt;/denchmark-link&gt;

Expected shape of a batch image is (batch_size, height, width, channels). The following works fine.
&lt;denchmark-code&gt;shape = (4, 255, 255,3)
img1 = tf.zeros(shape)
img2 = tf.zeros(shape)
tf.image.ssim(
    img1, img2, 1
)


output 
&lt;tf.Tensor: shape=(4,), dtype=float32, numpy=array([1., 1., 1., 1.], dtype=float32)&gt;
&lt;/denchmark-code&gt;

I am closing this issue. Please feel free to reopen if I am mistaken. Thanks!
		</comment>
		<comment id='6' author='khazit' date='2021-01-07T19:05:08Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41650&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41650&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>