<bug id='30808' author='olesalscheider' open_date='2019-07-17T15:42:19Z' closed_time='2019-08-19T23:04:41Z'>
	<summary>Serialization of keras object fails if called with different input sizes</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): v1.12.1-6461-gc6352706d6 1.14.0
Python version: 3.6.7
Bazel version (if compiling from source): 0.26.1
GCC/Compiler version (if compiling from source): 7.4.0
CUDA/cuDNN version: 10.0 / 7.5
GPU model and memory: Nvidia Geforce GTX 1080 Ti, 11 GB

Describe the current behavior
When I try to save a function of tf.Module as saved_model that calls another function with different input shapes, it fails with the following error:
&lt;denchmark-code&gt;W0717 17:37:44.384423 139641189812032 save.py:129] Skipping full serialization of object &lt;__main__.Outer object at 0x7f009a2e94e0&gt;, because an error occurred while tracing layer functions. Error message: in converted code:                                                                                               
                                                                                                                                                                                                                                                                                                                             
    /home/salscheider/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/saved_model/save.py:539 call_and_return_conditional_losses  *                                                                                                                                                                      
        return layer_call(inputs), layer.get_losses_for(inputs)                                                              
    test_signature.py:32 call  *
        return self.inner(x, dummy=dummy), self.inner(x_small, dummy=dummy)                                                         
    /home/salscheider/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer.py:708 __call__
        outputs = call_fn(inputs, *args, **kwargs)
    /home/salscheider/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/saved_model/utils.py:48 wrapped_call
        outputs, losses = call_fn(inputs)                                                                                           
    /home/salscheider/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/saved_model/save.py:506 __call__
        self.call_collection.add_trace(*args, **kwargs)                                                                                
    /home/salscheider/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/saved_model/save.py:467 add_trace
        fn.original_get_concrete_function(*args, **kwargs)                                                                         
    /home/salscheider/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/saved_model/save.py:515 original_get_concrete_function
        return super(LayerCall, self).get_concrete_function(*args, **kwargs)                                                            
    /home/salscheider/tf2/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py:692 get_concrete_function
        concrete = self._stateful_fn.get_concrete_function(*args, **kwargs)                                                        
    /home/salscheider/tf2/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py:1750 get_concrete_function
        (str(args), str(self.input_signature)))                                                                                      
                            
    ValueError: Python inputs incompatible with input_signature: inputs ((&lt;tf.Tensor 'down/Identity:0' shape=(None, 32, 32, 8) dtype=float32&gt;,)), input_signature ((TensorSpec(shape=(None, 64, 64, 8), dtype=tf.float32, name='input_1'),))
&lt;/denchmark-code&gt;

Describe the expected behavior
The model can be saved successfully.
Code to reproduce the issue
The following testcase allows to reproduce the issue:
&lt;denchmark-code&gt;import tensorflow as tf

class Inner(tf.keras.Model):
    def __init__(self):
        super().__init__()

        self.conv1 = tf.keras.layers.Conv2D(8,
            (3, 3),
            kernel_initializer=tf.keras.initializers.he_normal(),
            padding='same',
            name='conv1')

    def call(self, x, dummy=False):
        x = self.conv1(x)
        return x

class Outer(tf.keras.Model):
    def __init__(self):
        super().__init__()

        self.down = tf.keras.layers.Conv2D(8,
            (3, 3),
            strides=(2, 2),
            kernel_initializer=tf.keras.initializers.he_normal(),
            padding='same',
            name='down')

        self.inner = Inner()

    def call(self, x, dummy=False):
        x_small = self.down(x)
        return self.inner(x, dummy=dummy), self.inner(x_small, dummy=dummy)

class Infer(tf.Module):
    def __init__(self):
        super().__init__()

        # Decorate the inference function with tf.function
        self.infer_ = tf.function(self.infer, input_signature=[
             tf.TensorSpec([1, 64, 64, 8], tf.float32, 'prev_img')])

        self.outer = Outer()

    def infer(self, input):
        return self.outer(input, False)

# Create model
infer = Infer()

# Save the trained model
signature_dict = {'infer': infer.infer_}
saved_model_dir = '/tmp/saved_model'
tf.saved_model.save(infer, saved_model_dir, signature_dict)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='olesalscheider' date='2019-07-18T06:45:28Z'>
		&lt;denchmark-link:https://github.com/olesalscheider&gt;@olesalscheider&lt;/denchmark-link&gt;
 I tried reproducing the issue on Colab with Tensorflow version 1.14.0. I didn't receive any error. Please have a look at &lt;denchmark-link:https://colab.research.google.com/drive/18DPNelOKIdJiXq2q8-oNHiTadqcuwRY-&gt;Colab&lt;/denchmark-link&gt;
 link. Let us know is this expected behavior.Thanks!
		</comment>
		<comment id='2' author='olesalscheider' date='2019-07-18T06:54:57Z'>
		This is a regression in the current master branch (with tf2 API). The code above used to work with older Tensorflow versions including 1.14.0.
I had to request access to the Colab link (because my Google account has a different email address?). I will look at it once I have access.
		</comment>
		<comment id='3' author='olesalscheider' date='2019-07-18T09:18:57Z'>
		I could reproduce the issue with tensorflow 2.0.0.beta1. Please find the &lt;denchmark-link:https://colab.research.google.com/drive/14_RzRKLpMb1OBQuk5LEOxAI4INA1yUwE&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='olesalscheider' date='2019-07-18T22:07:55Z'>
		&lt;denchmark-link:https://github.com/olesalscheider&gt;@olesalscheider&lt;/denchmark-link&gt;
 I think the  is correct as there is a mismatch in the shape. If you use strides=(1,1), then shapes are same and there is not error. Please throw little more details on why you think this as a bug? Thanks!
		</comment>
		<comment id='5' author='olesalscheider' date='2019-07-19T04:40:16Z'>
		You mean there is a mismatch in the input to Inner.call()? Yes, that is true. But this just contains a fully convolutional layer which can operate on inputs of different sizes.
Also, using the model works fine: Executing for example infer.infer_(tf.random.uniform([1, 64, 64, 8])) instead of saving the model runs without error. If the shape mismatch was a problem it should not run. I expect that I can save a model if I can run it?
		</comment>
		<comment id='6' author='olesalscheider' date='2019-08-13T20:51:48Z'>
		Thanks for submitting this report, I've submitted a fix, which I'll request to be cherrypicked into 2.0.
		</comment>
		<comment id='7' author='olesalscheider' date='2019-08-16T21:21:52Z'>
		I think the issue was resolved. Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/65552c805709d58ec94c99b2143e285a/tf_30808_savedmodel.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='8' author='olesalscheider' date='2019-08-19T23:04:41Z'>
		Automatically closing this out since I understand it to be resolved, but please let me know if I'm mistaken.Thanks!
		</comment>
		<comment id='9' author='olesalscheider' date='2019-08-19T23:04:42Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30808&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30808&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>