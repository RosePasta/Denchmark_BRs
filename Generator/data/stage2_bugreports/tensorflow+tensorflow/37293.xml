<bug id='37293' author='JiaRu2016' open_date='2020-03-04T12:15:59Z' closed_time='2020-07-22T23:54:29Z'>
	<summary>TF2.x API Docs:  example codes in `tf.Module` raise error, and fix it</summary>
	<description>
&lt;denchmark-h:h2&gt;URL(s) with the issue:&lt;/denchmark-h&gt;

&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/Module&gt;https://www.tensorflow.org/api_docs/python/tf/Module&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;Description of issue (what needs changing):&lt;/denchmark-h&gt;

I extract the example codes, run it and got Error. It seems caused by inconsistant kwargs name:
 class Dense(tf.Module):
   def __init__(self, in_features, output_features, name=None):
     super(Dense, self).__init__(name=name)
     self.w = tf.Variable(
         tf.random.normal([input_features, output_features]), name='w')
     self.b = tf.Variable(tf.zeros([output_features]), name='b')

   def __call__(self, x):
     y = tf.matmul(x, self.w) + self.b
     return tf.nn.relu(y)


class MLP(tf.Module):
  def __init__(self, input_size, sizes, name=None):
    super(MLP, self).__init__(name=name)
    self.layers = []
    with self.name_scope:
      for size in sizes:
        self.layers.append(Dense(input_size=input_size, output_size=size))
        input_size = size

  @tf.Module.with_name_scope
  def __call__(self, x):
    for layer in self.layers:
      x = layer(x)
    return x

mlp = MLP(input_size=100, sizes=[30, 30])
output:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-137-269f8996957a&gt; in &lt;module&gt;()
----&gt; 1 mlp = MLP(input_size=100, sizes=[30, 30])

&lt;ipython-input-135-066c337c5b7a&gt; in __init__(self, input_size, sizes, name)
     17    with self.name_scope:
     18      for size in sizes:
---&gt; 19        self.layers.append(Dense(input_size=input_size, output_size=size))
     20        input_size = size
     21 

TypeError: __init__() got an unexpected keyword argument 'input_size'
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Submit a pull request?&lt;/denchmark-h&gt;

I think just need to modify several lines to fix it:
 class Dense(tf.Module):
   def __init__(self, input_size, output_size, name=None):
     super(Dense, self).__init__(name=name)
     self.w = tf.Variable(
         tf.random.normal([input_size, output_size]), name='w')
     self.b = tf.Variable(tf.zeros([output_size]), name='b')

   def __call__(self, x):
     y = tf.matmul(x, self.w) + self.b
     return tf.nn.relu(y)


class MLP(tf.Module):
  def __init__(self, input_size, sizes, name=None):
    super(MLP, self).__init__(name=name)
    self.layers = []
    with self.name_scope:
      for size in sizes:
        self.layers.append(Dense(input_size=input_size, output_size=size))
        input_size = size

  @tf.Module.with_name_scope
  def __call__(self, x):
    for layer in self.layers:
      x = layer(x)
    return x
Should I submit a PR to fix this?
	</description>
	<comments>
		<comment id='1' author='JiaRu2016' date='2020-06-19T14:17:29Z'>
		Looking at the thread under &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/37296&gt;#37296&lt;/denchmark-link&gt;
 it seems that there seems to be an issue regarding the superclass constructor. Specifically its args/kwargs. Now the obvious solution would be to either add a new argument to their constructors, or to add new allowed kwarg.
That does seem like an overkill, considering that the bug is only present in toy docs example.
Therefore it might be more prudent to try changing the example instead. For example:
&lt;denchmark-code&gt;class Dense(tf.Module):
   def __init__(self, input_dim, output_size, name=None):
     super(Dense, self).__init__(name=name)
     self.w = tf.Variable(
       tf.random.normal([input_dim, output_size]), name='w')
     self.b = tf.Variable(tf.zeros([output_size]), name='b')
   def __call__(self, x):
     y = tf.matmul(x, self.w) + self.b
     return tf.nn.relu(y)

class MLP(tf.Module):
  def __init__(self, input_size, sizes, name=None):
    super(MLP, self).__init__(name=name)
    self.layers = []
    with self.name_scope:
      for size in sizes:
        self.layers.append(Dense(input_dim=input_size, output_size=size))
        input_size = size

  @tf.Module.with_name_scope
  def __call__(self, x):
    for layer in self.layers:
      x = layer(x)
    return x

mlp = MLP(100, sizes=[30, 30])

&lt;/denchmark-code&gt;

Optionally the docs could also use a note about args in super classes and how they work with modules, but that's something developers should already know.
If the proposal looks fine I'll go forward with PR.
		</comment>
		<comment id='2' author='JiaRu2016' date='2020-07-22T23:54:29Z'>
		You can try copy-paste the example code in the &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/Module?version=nightly&gt;nightly version&lt;/denchmark-link&gt;
.
Closing this since the associated PR has been merged and it is fixed. Thanks all!
		</comment>
	</comments>
</bug>