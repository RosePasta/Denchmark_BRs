<bug id='32488' author='datitran' open_date='2019-09-13T07:27:52Z' closed_time='2020-04-07T08:30:56Z'>
	<summary>Issue: Structure of Python function inputs does not match input_signature while trying to save a subclassed model</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Google Colab
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): v1.14.0-0-g87989f6959 1.14.0 / tensorflow-gpu==2.0.0-rc0
Python version: 3.6.8
GPU model and memory: Google Colab (Nvidia T4)

Similar to this issue &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/28165&gt;#28165&lt;/denchmark-link&gt;
, I have defined the following Encoder class with a tf.function signature hoping to be able to save it using the SavedModel format. In my case, I'm using a LSTM layer though instead of GRUs:
&lt;denchmark-code&gt;class Encoder(tf.keras.Model):
    def __init__(self, vocab_size, embedding_size, lstm_size):
        super(Encoder, self).__init__()
        self.lstm_size = lstm_size
        self.embedding = tf.keras.layers.Embedding(vocab_size, embedding_size)
        self.lstm = tf.keras.layers.LSTM(
            lstm_size, return_sequences=True, return_state=True)

    @tf.function(input_signature=(
        tf.TensorSpec([None, None], tf.int32, name='sequence'),
        (tf.TensorSpec([None, 64], tf.float32, name='states_1'), tf.TensorSpec([None, 64], tf.float32, name='states_2'))
    )) 
    def call(self, sequence, states):
        embed = self.embedding(sequence)
        output, state_h, state_c = self.lstm(embed, initial_state=states)

        return output, state_h, state_c

    def init_states(self, batch_size):
        return (tf.zeros([batch_size, self.lstm_size]),
                tf.zeros([batch_size, self.lstm_size]))

# Some more code for training the seq2seq model...

tf.saved_model.save(
    encoder,  # instance of Encoder
    './some/directory/',
    signatures=encoder.call
)
&lt;/denchmark-code&gt;

Here's also the Colab notebook to reproduce the results: &lt;denchmark-link:https://colab.research.google.com/drive/11rgiI7oYT9uiRWG3ZT9NvRhuRJ5ubEQY&gt;Google Colab Link&lt;/denchmark-link&gt;

Since the issue was closed I hope it would work now but now I get this weird error that the Python function input does not match the input_signature although they clearly match each other:
&lt;denchmark-code&gt;ValueError: Structure of Python function inputs does not match input_signature:
  inputs: (
    [&lt;tf.Tensor 'sequence:0' shape=(None, None) dtype=int32&gt;, (&lt;tf.Tensor 'states_1:0' shape=(None, 64) dtype=float32&gt;, &lt;tf.Tensor 'states_2:0' shape=(None, 64) dtype=float32&gt;)])
  input_signature: (
    TensorSpec(shape=(None, None), dtype=tf.int32, name='sequence'),
    (TensorSpec(shape=(None, 64), dtype=tf.float32, name='states_1'), TensorSpec(shape=(None, 64), dtype=tf.float32, name='states_2')))
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='datitran' date='2019-10-24T10:59:05Z'>
		Any updates on this issue, still happens on 2.0 release
		</comment>
		<comment id='2' author='datitran' date='2019-11-29T07:41:52Z'>
		Have you solved itï¼ŸI had the same problem.
		</comment>
		<comment id='3' author='datitran' date='2019-12-02T06:13:58Z'>
		I use this method to solve it.
call fuction has only one param: inputs, package the multi inputs, eg: inputs=[x1, x2]
and the input_signature is:
@tf.function(input_signature=[[tf.TensorSpec([None, 22], dtype=tf.int64, name='x1'), tf.TensorSpec([None, 22], dtype=tf.float32, name='x2')]])
		</comment>
		<comment id='4' author='datitran' date='2019-12-13T00:41:56Z'>
		I encountered a similar issue with trying to provide an input signature for a method with multiple inputs. If I applied @tf.function(intput_signature=...) to the call(...) method with multiple inputs, it wouldn't work, but if i decorated call(...) with @tf.function and did not provide an input_signature kwarg, then model.call.get_concrete_function(...&lt;multiple tensor specs&gt;...) would work.
Also, another work around was that if I decorated a dummy method, say call2(...), with the same  @tf.function(intput_signature=...) I planned on using on call(...), it would work too.
		</comment>
		<comment id='5' author='datitran' date='2020-03-03T22:24:06Z'>
		&lt;denchmark-link:https://github.com/datitran&gt;@datitran&lt;/denchmark-link&gt;
 Can you please provide a simple standalone code to reproduce the issue? Thanks!
		</comment>
		<comment id='6' author='datitran' date='2020-03-19T01:16:27Z'>
		It has been 14 days with no activity and the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='7' author='datitran' date='2020-03-23T11:50:57Z'>
		&lt;denchmark-link:https://github.com/datitran&gt;@datitran&lt;/denchmark-link&gt;

please update on the above comment
		</comment>
		<comment id='8' author='datitran' date='2020-03-31T11:55:06Z'>
		&lt;denchmark-link:https://github.com/datitran&gt;@datitran&lt;/denchmark-link&gt;

please update on the above comment
		</comment>
		<comment id='9' author='datitran' date='2020-04-07T08:30:56Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='10' author='datitran' date='2020-04-07T08:30:58Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32488&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32488&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='datitran' date='2020-05-07T07:31:31Z'>
		ValueError: Structure of Python function inputs does not match input_signature:
inputs: (
[&lt;tf.Tensor 'transf_in:0' shape=(None, None) dtype=int32&gt;, &lt;tf.Tensor 'transf_out:0' shape=(None, None) dtype=int32&gt;, &lt;tf.Tensor 'enc_padding_mask:0' shape=(None, None, None) dtype=float32&gt;, &lt;tf.Tensor 'look_ahead_mask:0' shape=(None, None, None) dtype=float32&gt;, &lt;tf.Tensor 'dec_padding_mask:0' shape=(None, None, None) dtype=float32&gt;, &lt;tf.Tensor 'trainable:0' shape=() dtype=bool&gt;],
False)
input_signature: (
TensorSpec(shape=(None, None), dtype=tf.int32, name='transf_in'),
TensorSpec(shape=(None, None), dtype=tf.int32, name='transf_out'),
TensorSpec(shape=(None, None, None), dtype=tf.float32, name='enc_padding_mask'),
TensorSpec(shape=(None, None, None), dtype=tf.float32, name='look_ahead_mask'),
TensorSpec(shape=(None, None, None), dtype=tf.float32, name='dec_padding_mask'),
TensorSpec(shape=(), dtype=tf.bool, name='trainable'))
i also meet this error
		</comment>
		<comment id='12' author='datitran' date='2020-06-24T23:34:50Z'>
		&lt;denchmark-link:https://github.com/taichuai&gt;@taichuai&lt;/denchmark-link&gt;
 Hello, I have a really same issue. I'm using transformer model and encounter that same error message! If you solved that problem, please give me what was wrong with that...
		</comment>
	</comments>
</bug>