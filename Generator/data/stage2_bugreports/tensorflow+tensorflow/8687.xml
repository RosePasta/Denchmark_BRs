<bug id='8687' author='DjangoPeng' open_date='2017-03-24T09:52:51Z' closed_time='2017-06-28T00:21:42Z'>
	<summary>[HDFS]OutOfRangeError cause java runtime error</summary>
	<description>
&lt;denchmark-h:h3&gt;Environment info&lt;/denchmark-h&gt;

TensorFlow: v1.0.0 and v1.0.1
JDK: 1.8.0_111
Hadoop: 2.6.0
GCC: 4.8.2
&lt;denchmark-h:h3&gt;OutOfRangeError&lt;/denchmark-h&gt;

I think the tf.errors.OutOfRangeError is a bug, at least, if you want to read data(tfrecords, csv, etc) from hdfs with readers and queues.
&lt;denchmark-h:h3&gt;How to reproduce&lt;/denchmark-h&gt;

I followed the guide of &lt;denchmark-link:https://www.tensorflow.org/programmers_guide/reading_data&gt;reading data&lt;/denchmark-link&gt;
.
I used the recommended mnist example &lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/how_tos/reading_data&gt;here&lt;/denchmark-link&gt;
.
Firstly, convert MNIST dataset by this script: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/how_tos/reading_data/convert_to_records.py&gt;convert_to_records.py&lt;/denchmark-link&gt;

Secondly, put the tfrecords of MNIST dataset into your hdfs. For example, assume the url is hdfs://host:port/tfrecords/mnist-data/.
Then, train the MNIST network by this script: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/how_tos/reading_data/fully_connected_reader.py&gt;fully_connected_reader.py&lt;/denchmark-link&gt;
. And feed the  argument with .
Finally, you can get the train log and error log as below:
&lt;denchmark-h:h3&gt;Train log&lt;/denchmark-h&gt;

Step 0: loss = 2.29 (1.795 sec)
Step 100: loss = 1.99 (0.045 sec)
Step 200: loss = 1.62 (0.045 sec)
Step 300: loss = 1.39 (0.043 sec)
Step 400: loss = 1.01 (0.048 sec)
Step 500: loss = 0.77 (0.043 sec)
Step 600: loss = 0.65 (0.045 sec)
Step 700: loss = 0.60 (0.043 sec)
Step 800: loss = 0.65 (0.043 sec)
Step 900: loss = 0.46 (0.043 sec)
&lt;denchmark-h:h3&gt;Error log&lt;/denchmark-h&gt;

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f16a2a39660, pid=43645, tid=0x00007f16a2eff740
#
# JRE version: Java(TM) SE Runtime Environment (8.0_111-b14) (build 1.8.0_111-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.111-b14 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# C  [libpython2.7.so.1.0+0x134660]  visit_decref+0x0
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# /home/mind/projects/tf_hdfs/hs_err_pid43645.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
Aborted (core dumped)
&lt;denchmark-h:h3&gt;Ask for a better way&lt;/denchmark-h&gt;

I know it's hard to avoid the OutOfRangeError because the multithreads of readers. But can we have a better way to read? Especially when you want to read data from hdfs, it's inconvenient and difficult to catch the exception.
	</description>
	<comments>
		<comment id='1' author='DjangoPeng' date='2017-03-24T19:42:12Z'>
		&lt;denchmark-link:https://github.com/jhseu&gt;@jhseu&lt;/denchmark-link&gt;
, could you take a look?
		</comment>
		<comment id='2' author='DjangoPeng' date='2017-03-24T20:22:29Z'>
		Can you run gdb and get a stack trace? I'm not sure how the error message relates to OutOfRangeError, but it definitely shouldn't be segfaulting. Perhaps some of the error log is missing?
Note that OutOfRangeError is the standard error code for indicating EOF, and a lot of the internal TF calls catch that error underneath.
		</comment>
		<comment id='3' author='DjangoPeng' date='2017-03-25T02:07:50Z'>
		Actually, I changed the while loop into for steps in xrange(max_train_steps). And I can get the error info by one of the cases.
Case 1: Dequeue all examples until the example queue becomes empty. In this case, it cause the tf.errors.OutOfRangeError and print the training log as below:
Step 0: loss = 2.30 (1.800 sec)
Step 100: loss = 2.10 (0.043 sec)
Step 200: loss = 1.87 (0.045 sec)
Step 300: loss = 1.61 (0.043 sec)
Step 400: loss = 1.27 (0.043 sec)
Step 500: loss = 0.97 (0.043 sec)
Done training for 1 epochs, 550 steps.
Case 2: Finish the for loop, that is, reach the max_train_steps even though the example queue has stuff.
In this case, it cause some other error and caught by Java. Set max_train_steps=501 and num_epochs=10, and get the training log as below:
Step 0: loss = 2.32 (1.799 sec)
Step 100: loss = 2.13 (0.043 sec)
Step 200: loss = 1.80 (0.043 sec)
Step 300: loss = 1.49 (0.044 sec)
Step 400: loss = 1.28 (0.045 sec)
Step 500: loss = 0.82 (0.045 sec)
Both case 1 and case 2 print the java error log that I attached above. I guess it relates to OutOfRangeError, but I'm not sure.
&lt;denchmark-link:https://github.com/jhseu&gt;@jhseu&lt;/denchmark-link&gt;
 Do I need to build TensorFlow from source to run gdb and get a stack trace? But, I think the exception would still caught by Java.
		</comment>
		<comment id='4' author='DjangoPeng' date='2017-03-27T19:35:41Z'>
		I haven't been able to reproduce the issue. If you modified the code, mind posting it to gist.github.com?
It doesn't crash on OutOfRange for me. I'm using Cloudera quickstart for HDFS:
docker run --hostname=quickstart.cloudera --privileged=true -t -i -p 8020:8020 -p 8022:8022 -p 50070:50070 cloudera/quickstart /usr/bin/docker-quickstart and running against hdfs://localhost:8020/
		</comment>
		<comment id='5' author='DjangoPeng' date='2017-03-28T01:11:01Z'>
		&lt;denchmark-link:https://github.com/jhseu&gt;@jhseu&lt;/denchmark-link&gt;
 Please check my code &lt;denchmark-link:https://gist.github.com/DjangoPeng/07d8bfb8f0c412318e4fb6473ec2f56b&gt;here&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='DjangoPeng' date='2017-06-16T21:12:11Z'>
		&lt;denchmark-link:https://github.com/jhseu&gt;@jhseu&lt;/denchmark-link&gt;
 any updates?
		</comment>
		<comment id='7' author='DjangoPeng' date='2017-06-28T00:21:42Z'>
		I haven't been able to reproduce the error with the provided script. It just raises OutOfRangeError in Python, but otherwise works fine. If you feel that this should be reopened, we'll need more info, like a proposal for where the issue is coming from, or a script that reproduces the issue in TF 1.2.
		</comment>
	</comments>
</bug>