<bug id='31084' author='ltrottier' open_date='2019-07-26T15:27:37Z' closed_time='2019-08-12T22:40:12Z'>
	<summary>Bug Issue: tf.case incompatible with list comprehension</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): custom
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):

&lt;denchmark-code&gt;$ uname -a
Linux archlinux 5.1.5-arch1-2-ARCH #1 SMP PREEMPT Mon May 27 03:37:39 UTC 2019 x86_64 GNU/Linux
&lt;/denchmark-code&gt;


Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: None
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below):
v1.14.0-rc1-22-gaf24dc91b5
1.14.0
Python version: 3.6
Bazel version (if compiling from source): None
GCC/Compiler version (if compiling from source): None
CUDA/cuDNN version: None
GPU model and memory: None

Describe the current behavior
Bug 1: the function random_choice below has the correct behaviour only when using the decorator @tf.function. If the decorator is not used, tf.case no longer consider the predicate and always outputs the same value.
Bug 2: even if the decorator @tf.function is used, the function random_choice does not have the correct behaviour if I use list comprehension to create the list of pairs predicate / functions. Although, it has the correct behaviour when the list is populated iteratively with append (in a for loop).
Describe the expected behavior


Decorating the function random_choice with @tf.function should not affect tf.case, unless I am not aware of the intricacies of tf.function and tf.case.


Choosing for loops or list comprehension to create the list of predicate / function pairs should not affect tf.case, unless (again) I am not aware of the intricacies of tf.function and tf.case.


Code to reproduce the issue
import tensorflow as tf
import tensorflow.keras as keras
import tensorflow.keras.backend as K
import tensorflow_probability as tfp

K.clear_session()

def fct1(x):
  return x + 5

def fct2(x):
  return x - 5

# Bug 1: if you remove `@tf.function`, the function `random_choice` 
# no longer works, because `tf.case` no longer considers `idx`.  
@tf.function
def random_choice(x, choices):
  idx = tfp.distributions.Bernoulli(probs=0.5).sample(1)[0]
  outputs = [c(x) for c in choices]
 
# Bug 2: if you use `@tf.function`, but you replace this code:
  fns = []
  for o in outputs:
    fns.append(lambda: o)
# by this one:
#   fns = [lambda:o for o in outputs]
# then, `tf.case` no longer considers `idx`.

  y = tf.case([(tf.equal(idx, i), fn) for (i, fn) in enumerate(fns)])
  return outputs, idx, y

x = tf.constant([4.0])
choices = [fct1, fct2]
outputs, idx, y = random_choice(x, choices)
sess = tf.Session()
for i in range(10):
  outputs_np, idx_np, y_np = sess.run([outputs, idx, y])
  print(y_np, outputs_np[idx_np])
Example outputs.
For the code above (this is the expected behaviour):
[9.] [9.]
[-1.] [-1.]
[-1.] [-1.]
[-1.] [-1.]
[9.] [9.]
[9.] [9.]
[-1.] [-1.]
[9.] [9.]
[9.] [9.]
[-1.] [-1.]
When removing @tf.function, or when using @tf.function but using list comprehension to create fns (this is the unexpected behaviour):
[-1.] [9.]
[-1.] [9.]
[-1.] [-1.]
[-1.] [9.]
[-1.] [9.]
[-1.] [9.]
[-1.] [-1.]
[-1.] [-1.]
[-1.] [-1.]
[-1.] [9.]
Other info / logs
I could reproduce this bug in tensorflow:
2.0.0-beta1
v2.0.0-beta0-16-g1d91213fe7
	</description>
	<comments>
		<comment id='1' author='ltrottier' date='2019-07-29T08:51:35Z'>
		Was able to reproduce the issue on Colab with Tensorflow 1.14. Please see the &lt;denchmark-link:https://colab.research.google.com/drive/1aaE0CT0DSPlf2fQAPEzlPiT5d8cd8dtQ&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='ltrottier' date='2019-07-29T13:32:04Z'>
		Thanks for the feedback. Let me know when this is fixed.
		</comment>
		<comment id='3' author='ltrottier' date='2019-07-29T21:30:00Z'>
		&lt;denchmark-link:https://github.com/kkimdev&gt;@kkimdev&lt;/denchmark-link&gt;
 can you help triage this? The implementation of tf.case with eager execution should be relatively straightforward to follow.
		</comment>
		<comment id='4' author='ltrottier' date='2019-07-31T12:27:22Z'>
		As a side note, I tested tf.switch_case in colab 1.14, and I had the same problems:
&lt;denchmark-code&gt;idx = tf.constant([0], dtype=tf.int32)
o1 = tf.constant([2.])
o2 = tf.constant([4.])

fns = []
for o in [o1,o2]:
  fns.append(lambda: o)

tf.switch_case(idx[0], fns)
&lt;/denchmark-code&gt;

Outputs:
&lt;denchmark-code&gt;&lt;tf.Tensor: id=176, shape=(1,), dtype=float32, numpy=array([4.], dtype=float32)&gt;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='ltrottier' date='2019-07-31T13:00:49Z'>
		If I do this however, it works:
&lt;denchmark-code&gt;idx = tf.constant([0], dtype=tf.int32)
o1 = tf.constant([2.])
o2 = tf.constant([4.])
fns = [lambda: o1, lambda: o2]
tf.switch_case(idx[0], fns)
&lt;/denchmark-code&gt;

Outputs:
&lt;denchmark-code&gt;&lt;tf.Tensor: id=223, shape=(1,), dtype=float32, numpy=array([2.], dtype=float32)&gt;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='ltrottier' date='2019-08-12T22:40:11Z'>
		&lt;denchmark-link:https://github.com/ltrottier&gt;@ltrottier&lt;/denchmark-link&gt;
 Hi, sorry for getting back late.  Though it seems like this is just how Python works.
fns = []
for o in 'abcdefg':
  fns.append(lambda:o)

print(fns[0]())
# prints 'g', not 'a'
More info: &lt;denchmark-link:https://stackoverflow.com/a/19837590&gt;https://stackoverflow.com/a/19837590&lt;/denchmark-link&gt;

I agree that it's quite confusing though :(
		</comment>
		<comment id='7' author='ltrottier' date='2019-08-12T22:40:13Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=31084&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=31084&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='ltrottier' date='2019-10-02T18:41:03Z'>
		Thanks for the link. It is indeed how python works. I can't believe I've never seen this before.
		</comment>
	</comments>
</bug>