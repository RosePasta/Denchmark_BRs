<bug id='43173' author='poedator' open_date='2020-09-12T09:06:44Z' closed_time='2020-09-13T14:39:57Z'>
	<summary>subclass of tf.keras.Model throws "NotImplementedError" when fit() with custom data</summary>
	<description>
TF 2.3.0 tested on Windows and in Colab.
There is an error that comes out only when certain type of model (subclass of tf.keras.Model) is combined with certain custom dataloaders (Python generator and subclass of tf.keras.utils.Sequence). Yet same loaders work OK with simple Functional Keras model.
the error is "NotImplementedError: When subclassing the Model class, you should implement a call method"
See Colab reproduction &lt;denchmark-link:https://colab.research.google.com/drive/19hbGTk-RAjdHiUfM-cgDPMNTyu5FRIQf?usp=sharing&gt;here.&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='poedator' date='2020-09-12T11:26:23Z'>
		I have tried in colab with TF version 2.3, nightly versions() and was able to reproduce the issue. Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/578ba17757a9a9afc21e8659b65e2440/untitled338.ipynb#scrollTo=ucG1nfsXCABQ&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='poedator' date='2020-09-12T13:11:47Z'>
		It is not a bug. You need to implement the  method in your class when sublcassing. (e.g. in your  etc.):
See &lt;denchmark-link:https://keras.io/guides/making_new_layers_and_models_via_subclassing/&gt;https://keras.io/guides/making_new_layers_and_models_via_subclassing/&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='poedator' date='2020-09-13T10:28:44Z'>
		&lt;denchmark-link:https://github.com/bhack&gt;@bhack&lt;/denchmark-link&gt;
, thank you for the suggestion. I added  to my test model and it works OK.  &lt;denchmark-link:https://colab.research.google.com/gist/poedator/21bb68a5b18b4766b9e45ebdc6f02781/tf_loader_issues.ipynb&gt;Gist with working model here&lt;/denchmark-link&gt;
.
What I find confusing is:

some combinations of models and loaders work OK in my original example. Even without call() in my example the subclassed Model worked fine with tf.data.Dataset.from_tensor_slices
some examples at TF/Keras site do not use call() when subclassing models.
Example: VAE tutorial  by respectable @fchollet - he just feeds data directly to Model.fit() without loaders and everything works fine without call().

There are quite a few confused people out there trying to replicate Keras examples and struggling with this inconsistency (see &lt;denchmark-link:https://stackoverflow.com/questions/63832318/keras-using-a-generator-for-the-data-vae&gt;one&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://stackoverflow.com/questions/63822281/issue-with-modifying-a-keras-class-to-include-call-function&gt;two&lt;/denchmark-link&gt;
).
Perhaps some warnings should be made in the examples / documentations, promoting consistent use of , also see if any code changes are needed to ensure consistent enforcement of  use.
		</comment>
		<comment id='4' author='poedator' date='2020-09-13T10:43:15Z'>
		&lt;denchmark-link:https://github.com/poedator&gt;@poedator&lt;/denchmark-link&gt;
 Cause It Is requested/checked for the  case.
See &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/engine/training.py#L320:L328&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/engine/training.py#L320:L328&lt;/denchmark-link&gt;

if you want to better notify developers about this please open a documentation PR on this doc string and also on &lt;denchmark-link:https://github.com/keras-team/keras-io/blob/master/guides/making_new_layers_and_models_via_subclassing.py&gt;https://github.com/keras-team/keras-io/blob/master/guides/making_new_layers_and_models_via_subclassing.py&lt;/denchmark-link&gt;

Thanks
		</comment>
		<comment id='5' author='poedator' date='2020-09-13T14:39:58Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43173&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43173&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='poedator' date='2020-09-23T10:38:33Z'>
		&lt;denchmark-link:https://colab.research.google.com/gist/poedator/06e66814d0d914cfe65a70bd9595c98d/tf_loader_issues_without_call.ipynb&gt;updated gist with issues demonstration&lt;/denchmark-link&gt;

opened &lt;denchmark-link:https://github.com/keras-team/keras-io/pull/258&gt;pull request&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='poedator' date='2020-09-23T13:41:00Z'>
		I agree with the initial assessment, that this is more like a bug than a documentation issue.

If call were required it would be an abstract method, instead of just not-implemented.
Changing the data-source shouldn't cause this change in requirements.

Looking into it a little more I see that it's this line in data_adaptor.GeneratorDataAdaptor causing the inconsistency:



tensorflow/tensorflow/python/keras/engine/data_adapter.py


         Line 787
      in
      5d5534e






 lambda x: model(x, training=False), args=(concrete_x,)) 





&lt;denchmark-link:https://github.com/omalleyt12&gt;@omalleyt12&lt;/denchmark-link&gt;
, WDYT? What's the right way to fix this?
		</comment>
		<comment id='8' author='poedator' date='2020-09-23T13:53:24Z'>
		&lt;denchmark-link:https://github.com/MarkDaoust&gt;@MarkDaoust&lt;/denchmark-link&gt;

For 1. Do you mean that you want to decorate  at :



tensorflow/tensorflow/python/keras/engine/training.py


         Line 420
      in
      d0cc5df






 def call(self, inputs, training=None, mask=None): 





		</comment>
		<comment id='9' author='poedator' date='2020-09-23T14:14:04Z'>
		
you want to decorate @six.add_metaclass(abc.ABCMeta) at: ...

I don't want it. I'm just pointing out that it isn't currently there, and it's not clear why fitting with a generator should require call (I see it's being used to build the model, but maybe there's a way around that, or maybe there's a clearer error we can throw here if call is not implemented.).
		</comment>
		<comment id='10' author='poedator' date='2020-09-23T14:56:50Z'>
		I don't know the full story of this but it seems to me that there is "you should" in the raised string and in other documentations entries.
So the logic it seems to me more related to the case when the user "voluntary"  invoke call.
In the case of the generator instead this "direct" user control doesn't seems to me so explicit as it is a little bit hidden/internal.
		</comment>
		<comment id='11' author='poedator' date='2020-12-28T05:28:07Z'>
		Thank you all for figuring out this problem. But what if the discussed problem comes out, when a class in not used? See this snippet as a simple example:
x_train, y_train = train_import()
train_dataset = tf.data.Dataset.zip((x_train, y_train))
input = Input((64,), name='input')
hidden = Dense(64, activation='relu', name='hidden_1')(input)
dropout = Dropout(0.2, name='dropout_1')(hidden)
hidden = Dense(32, activation='relu', name='hidden_2')(dropout)
dropout = Dropout(0.2, name='dropout_2')(hidden)
output = Dense(7, activation='softmax', name='output')(dropout)
model = Model(inputs=input, outputs=output)
model = Model()
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
&lt;denchmark-h:h1&gt;ERROR WHEN RUNNING THIS LINE:&lt;/denchmark-h&gt;

accuracy = model.fit(train_dataset, batch_size=64, epochs=2048)
&lt;denchmark-h:h1&gt;"NotImplementedError: When subclassing the Model class, you should implement a call method"&lt;/denchmark-h&gt;

		</comment>
	</comments>
</bug>