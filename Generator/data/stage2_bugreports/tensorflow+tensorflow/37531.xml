<bug id='37531' author='rakeshmothukuru1' open_date='2020-03-12T09:23:42Z' closed_time='2020-03-18T05:58:12Z'>
	<summary>Incorrect number of Total Parameters when Loading a Saved Model with Trainable = False</summary>
	<description>
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/4324479/Resume_Classification_Model.zip&gt;Resume_Classification_Model.zip&lt;/denchmark-link&gt;



Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): N/A, as it can be reproduced in Google Colab
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:  N/A
TensorFlow installed from (source or binary): pip
TensorFlow version (use command below): 2.1
Python version: Colab
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source):  N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

This issue is similar to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/29535&gt;29535&lt;/denchmark-link&gt;
 but now occurring in .
Describe the current behavior: Value of Total Parameters, when we Load the Saved Model with Trainable = False is Double compared to the Actual Total Parameters.
Describe the expected behavior: Value of Total Parameters should be same even we use Trainable = True or Trainable = False
 :  Please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/rmothukuru/a454904863d7a0e42b4497d6366a70e0/load_with_freeze_error.ipynb&gt;attached Gist&lt;/denchmark-link&gt;
.
Please find the Model, "Resume_Classification_Model.zip", attached.
	</description>
	<comments>
		<comment id='1' author='rakeshmothukuru1' date='2020-03-12T14:19:48Z'>
		Was able to reproduce the issue. Please find the Gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/73a3b70d4f50f8a5e460e212be8c6793/tf2-1.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='rakeshmothukuru1' date='2020-03-12T20:16:23Z'>
		I would just like to add to the discussion the fact that calling compile() after setting trainable = False resolves the issue, i.e. the correct number of parameters are displayed.
		</comment>
		<comment id='3' author='rakeshmothukuru1' date='2020-03-14T15:53:31Z'>
		&lt;denchmark-link:https://github.com/rakeshmothukuru1&gt;@rakeshmothukuru1&lt;/denchmark-link&gt;
 , &lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/jaketae&gt;@jaketae&lt;/denchmark-link&gt;
 , I think I have figured out the issue.
 is calculated for summary by &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/utils/layer_utils.py#L261&gt;this code&lt;/denchmark-link&gt;
.
Note that the code on the above link
if hasattr(model, '_collected_trainable_weights'):
    trainable_count = count_params(model._collected_trainable_weights)
else:
    trainable_count = count_params(model.trainable_weights)
first checks if there is any attribute as _collected_trainable_weights, if it is then it will count params based on _collected_trainable_weights, otherwise it will count based on trainable_weights.
Now, since you are loading the model which was trained already so by default the layers of the model were trainable. I checked it by calling layers API and checking the weights as follows:
You can check layers with
&gt;&gt;&gt; New_Model._layers
[&lt;tensorflow.python.keras.engine.input_layer.InputLayer at 0x7f694dcadcc0&gt;,
 &lt;tensorflow.python.keras.saving.saved_model.load.Embedding at 0x7f694dd3e0f0&gt;,
 &lt;tensorflow.python.keras.saving.saved_model.load.Bidirectional at 0x7f694dd3e780&gt;,
 &lt;tensorflow.python.keras.saving.saved_model.load.Bidirectional at 0x7f694dd3ecc0&gt;,
 &lt;tensorflow.python.keras.saving.saved_model.load.Dense at 0x7f694dd73128&gt;,
 &lt;tensorflow.python.keras.saving.saved_model.load.Dense at 0x7f694dd73550&gt;]
You can also check the trainable and non-trainable weights for each model with
&gt;&gt;&gt; New_Model._layers[5]._trainable_weights
[&lt;tf.Variable 'dense_1/kernel:0' shape=(64, 7) dtype=float32, numpy=
 array([[-5.22130467e-02, -1.93556882e-02,  6.19841479e-02,
         -2.20982015e-01, -2.58759469e-01,  1.56931624e-01,
         -1.02677837e-01],
        [-2.78469831e-01, -3.55885886e-02, -3.39667916e-01,
         -2.11565107e-01,  2.90678382e-01,  3.44290137e-02,
         -1.20272964e-01],
         ...
        [-1.06683329e-01, -2.90703289e-02,  5.69653399e-02,
         -1.45962730e-01,  1.51988491e-02, -4.15223390e-01,
         -3.09695005e-01]], dtype=float32)&gt;,
 &lt;tf.Variable 'dense_1/bias:0' shape=(7,) dtype=float32, numpy=
 array([-0.04054414,  0.05413923,  0.0347003 , -0.0140862 , -0.02740904,
         0.01077772, -0.01707667], dtype=float32)&gt;]
So, you can see here that weights of the layers are trainable by default since we have loaded the trained model. Now, the fact to know here is _collected_trainable_weights in tf.keras.Model is assigned at the time of compile.
So, if you compile the model before setting , then it will assign  non-empty list (Because layers trainable weights are non-empty). So, in this case,  will be empty but  will not be empty. Hence, the first &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/c9c38bcd20e206674e72d187c1f95046218342d1/tensorflow/python/keras/utils/layer_utils.py#L261&gt;this code&lt;/denchmark-link&gt;
 to count trainable parameter will consider  to count trainable param.
New_Model = tf.keras.models.load_model("Resume_Classification_Model/Resume_Classification_Model/1")
New_Model.compile()
New_Model.trainable= False
It will generate o/p as
&lt;denchmark-code&gt;Total params: 863,758
Trainable params: 431,879
Non-trainable params: 431,879
&lt;/denchmark-code&gt;

In reverse case,
f you compile the model after setting , then it will assign  empty list (Because compile will get  as ). So, in this case,  will be empty but  will also be empty. Hence, the first &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/c9c38bcd20e206674e72d187c1f95046218342d1/tensorflow/python/keras/utils/layer_utils.py#L261&gt;this code&lt;/denchmark-link&gt;
 to count trainable parameter will consider  (which is empty) to count trainable param.
New_Model = tf.keras.models.load_model("Resume_Classification_Model/Resume_Classification_Model/1")
New_Model.trainable= False
New_Model.compile()
It will generate o/p as
&lt;denchmark-code&gt;Total params: 431,879
Trainable params: 0
Non-trainable params: 431,879
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='rakeshmothukuru1' date='2020-03-14T16:07:38Z'>
		So, I think no need to change the code. We need to use trainable considering above thing in mind.
		</comment>
		<comment id='5' author='rakeshmothukuru1' date='2020-03-17T01:05:54Z'>
		Can you clarify what the workflow is?
What do you mean by loading the SavedModel with trainable=False?
		</comment>
		<comment id='6' author='rakeshmothukuru1' date='2020-03-17T09:38:12Z'>
		&lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;
,
If the question is to me, Please find this &lt;denchmark-link:https://colab.sandbox.google.com/gist/rmothukuru/a454904863d7a0e42b4497d6366a70e0/load_with_freeze_error.ipynb&gt;Github Gist&lt;/denchmark-link&gt;
 for the Workflow. The Model is attached.
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/4342619/Resume_Classification_Model.zip&gt;Resume_Classification_Model.zip&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='rakeshmothukuru1' date='2020-03-18T05:58:12Z'>
		I think this is working as intended. compile locks down the trainable weights, I believe because the train ops are generated during compile. Therefore, you should recompile to get the correct number of parameters. (also, the summary notes that you should call compile after changing the trainable value)
		</comment>
		<comment id='8' author='rakeshmothukuru1' date='2020-03-18T05:58:18Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37531&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37531&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>