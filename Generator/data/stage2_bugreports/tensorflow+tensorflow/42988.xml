<bug id='42988' author='roebel' open_date='2020-09-05T22:06:41Z' closed_time='2020-09-06T21:18:16Z'>
	<summary>Conv1D (and probablyall other Conv layers) with dilation_rate != 1  does not reliably handle changes in input size</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):

Bug is present with  tensorflow 2.1 and tensorflow 2.2 from Anaconda


OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Linux Ubuntu 18.04 and  Debian 4.9.189-3+deb9u2 (2019-11-11)


Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
not mobile


TensorFlow installed from (source or binary):


binary

TensorFlow version (use command below):

unknown 2.1.0 and unknown 2.2.0

Python version:

3.7


Bazel version (if compiling from source):


GCC/Compiler version (if compiling from source):


CUDA/cuDNN version:
10.1.243/7.6.5


GPU model and memory:


FGeForce GTX 1050 Ti
You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Describe the current behavior
This extremely simple sequnec of calls of a Conv1D layer fails on the third call
import numpy as np
import tensorflow as tf
cc = tf.keras.layers.Conv1D(1, (3,), padding="same", dilation_rate=3)
res1= cc(np.zeros((1,100,1), dtype=np.float32))
res2= cc(np.zeros((1,101,1), dtype=np.float32))
res3= cc(np.zeros((1,100,1), dtype=np.float32))
Describe the expected behavior
The third call should run similarly as the others
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/5178711/test_code.zip&gt;test_code.zip&lt;/denchmark-link&gt;

Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
Error message:
res1 done
res2 done
2020-09-06 00:05:58.405706: W tensorflow/core/framework/op_kernel.cc:1753] OP_REQUIRES failed at spacetobatch_op.cc:219 : Invalid argument: padded_shape[0]=107 is not divisible by block_shape[0]=3
Traceback (most recent call last):
File "./test_conv_dila.py", line 12, in 
res3= cc(np.zeros((1,100,1), dtype=np.float32))
File "/data/anasynth/anaconda3/envs/tf2.2/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py", line 968, in call
outputs = self.call(cast_inputs, *args, **kwargs)
File "/data/anasynth/anaconda3/envs/tf2.2/lib/python3.7/site-packages/tensorflow/python/keras/layers/convolutional.py", line 207, in call
outputs = self._convolution_op(inputs, self.kernel)
File "/data/anasynth/anaconda3/envs/tf2.2/lib/python3.7/site-packages/tensorflow/python/ops/nn_ops.py", line 1106, in call
return self.conv_op(inp, filter)
File "/data/anasynth/anaconda3/envs/tf2.2/lib/python3.7/site-packages/tensorflow/python/ops/nn_ops.py", line 638, in call
return self.call(inp, filter)
File "/data/anasynth/anaconda3/envs/tf2.2/lib/python3.7/site-packages/tensorflow/python/ops/nn_ops.py", line 621, in _with_space_to_batch_call
input=inp, block_shape=dilation_rate, paddings=paddings)
File "/data/anasynth/anaconda3/envs/tf2.2/lib/python3.7/site-packages/tensorflow/python/ops/gen_array_ops.py", line 9491, in space_to_batch_nd
_ops.raise_from_not_ok_status(e, name)
File "/data/anasynth/anaconda3/envs/tf2.2/lib/python3.7/site-packages/tensorflow/python/framework/ops.py", line 6653, in raise_from_not_ok_status
six.raise_from(core._status_to_exception(e.code, message), None)
File "", line 3, in raise_from
tensorflow.python.framework.errors_impl.InvalidArgumentError: padded_shape[0]=107 is not divisible by block_shape[0]=3 [Op:SpaceToBatchND]
	</description>
	<comments>
		<comment id='1' author='roebel' date='2020-09-05T22:17:04Z'>
		Tracing through the TF code I found the problem and propose here a fix.
In
tensorflow/core/python/keras/layers/convolutional.py
The original code starting from line 193 in tf21 is
&lt;denchmark-code&gt;    recreate_conv_op = (
        call_input_shape[1:] != self._build_conv_op_input_shape[1:])

    if recreate_conv_op:
      self._convolution_op = nn_ops.Convolution(
          call_input_shape,
          filter_shape=self.kernel.shape,
          dilation_rate=self.dilation_rate,
          strides=self.strides,
          padding=self._padding_op,
          data_format=self._conv_op_data_format)
&lt;/denchmark-code&gt;

So whenever the input shape does not fit the input shape used to build the layer the op is updated.
Unfortunately then, the shape matching the updated convolutional_op is not updated !
As long as all inputs are always equal to the build shape this is fine. If all inputs are different
from the build shape this is fine as well.
But as soon as an input shape != to the build shape was used once, the build_shape and the op are out of sync
and the convolutional op then fails if the call_input_shape equals the build shape in which case
recreate_conv_op will be false so that the op will not be adapted to the input shape.
Fix is easy. One simply needs to update the   self._build_conv_op_input_shape variable
with the input shape for that the convolutional op has been created right after the assignment of the new
op like this
&lt;denchmark-code&gt;    recreate_conv_op = (
        call_input_shape[1:] != self._build_conv_op_input_shape[1:])

    if recreate_conv_op:
      self._convolution_op = nn_ops.Convolution(
          call_input_shape,
          filter_shape=self.kernel.shape,
          dilation_rate=self.dilation_rate,
          strides=self.strides,
          padding=self._padding_op,
          data_format=self._conv_op_data_format) 
       self._build_conv_op_input_shape = call_input_shape
&lt;/denchmark-code&gt;

After this change the script triggering the error runs fine.
		</comment>
		<comment id='2' author='roebel' date='2020-09-06T00:35:09Z'>
		The logic changed. In TF 2.3 your failing example doesn't fail anymore. Can you verify?
		</comment>
		<comment id='3' author='roebel' date='2020-09-06T17:38:09Z'>
		&lt;denchmark-link:https://github.com/roebel&gt;@roebel&lt;/denchmark-link&gt;

I ran your code on tf 2.3 and tf-nightly the error does not exist, please find the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/09c7bdfcd06ffabb2e9972f027d7170a/untitled402.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Please feel free to move the issue to closed status as the issue is resolved is latest versions of tf.
		</comment>
		<comment id='4' author='roebel' date='2020-09-06T21:18:16Z'>
		Fine then - thanks a lot for your comments.
		</comment>
		<comment id='5' author='roebel' date='2020-09-06T21:18:18Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42988&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42988&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>