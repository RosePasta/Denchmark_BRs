<bug id='39571' author='emptyknowledge' open_date='2020-05-15T08:26:05Z' closed_time='2020-05-18T01:58:38Z'>
	<summary>Convert ctc_decode in tf.keras to .pb model, Getting call error.</summary>
	<description>
System information

Windows 10:
TensorFlow installed from (binary):
TensorFlow version (1.10):
Python version: 3.6

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

Describe the current behavior
I convert ctc_model tensorflow.backend.keras.ctc_decode to pb model, Then call with java ,There are exception
&lt;denchmark-code&gt;Exception in thread "main" java.lang.IllegalArgumentException: sequence_length is not a vector
	 [[Node: decode/CTCGreedyDecoder = CTCGreedyDecoder[merge_repeated=true, _device="/job:localhost/replica:0/task:0/device:CPU:0"](decode/Log, decode/ToInt32)]]
&lt;/denchmark-code&gt;

The code contains“sequence_length” is (parameter input_length is a vector):
&lt;denchmark-code&gt;
@tf_export('keras.backend.ctc_decode')
def ctc_decode(y_pred, input_length, greedy=True, beam_width=100, top_paths=1):
  """Decodes the output of a softmax.

  Can use either greedy search (also known as best path)
  or a constrained dictionary search.

  Arguments:
      y_pred: tensor `(samples, time_steps, num_categories)`
          containing the prediction, or output of the softmax.
      input_length: tensor `(samples, )` containing the sequence length for
          each batch item in `y_pred`.
      greedy: perform much faster best-path search if `true`.
          This does not use a dictionary.
      beam_width: if `greedy` is `false`: a beam search decoder will be used
          with a beam of this width.
      top_paths: if `greedy` is `false`,
          how many of the most probable paths will be returned.

  Returns:
      Tuple:
          List: if `greedy` is `true`, returns a list of one element that
              contains the decoded sequence.
              If `false`, returns the `top_paths` most probable
              decoded sequences.
              Important: blank labels are returned as `-1`.
          Tensor `(top_paths, )` that contains
              the log probability of each decoded sequence.
  """
  y_pred = math_ops.log(array_ops.transpose(y_pred, perm=[1, 0, 2]) + epsilon())
  input_length = math_ops.to_int32(input_length)

  if greedy:
    (decoded, log_prob) = ctc.ctc_greedy_decoder(
        inputs=y_pred, sequence_length=input_length)
  else:
    (decoded, log_prob) = ctc.ctc_beam_search_decoder(
        inputs=y_pred,
        sequence_length=input_length,
        beam_width=beam_width,
        top_paths=top_paths)
  decoded_dense = [
      sparse_ops.sparse_to_dense(
          st.indices, st.dense_shape, st.values, default_value=-1)
      for st in decoded
  ]
  return (decoded_dense, log_prob)
&lt;/denchmark-code&gt;

Describe the expected behavior
Run smoothly
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='emptyknowledge' date='2020-05-15T08:30:17Z'>
		The Java call code:
&lt;denchmark-code&gt;try(Tensor x= Tensor.create(input);
                Tensor x_2 = Tensor.create(length);
            Tensor y = sess.runner().feed("input_1", x).feed("input_length", x_2).fetch("decode/SparseToDense").run().get(0)){
                System.out.print("success");
            }
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='emptyknowledge' date='2020-05-15T09:54:09Z'>
		&lt;denchmark-link:https://github.com/emptyknowledge&gt;@emptyknowledge&lt;/denchmark-link&gt;

Is there any particular reason to be using such a old version of tensor flow can you please upgrade to later versions and see if it helps resolve the issue as there will be no updates on this old version.
		</comment>
		<comment id='3' author='emptyknowledge' date='2020-05-18T01:58:39Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39571&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39571&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>