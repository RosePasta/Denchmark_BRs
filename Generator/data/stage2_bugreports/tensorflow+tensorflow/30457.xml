<bug id='30457' author='nolanliou' open_date='2019-07-07T10:22:29Z' closed_time='2019-07-15T19:25:38Z'>
	<summary>Dataset: Feedable Iterator does not support tf.VarLenFeature (SparseTensor).</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.13.1
Python version: 3.5.2
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

Describe the current behavior
I want to do validation after some training steps, so I choose Feedable Iterator API. However Feedable Iterator API does not support tf.VarLenFeature(namely SparseTensor), VarLenFeature is useful for Recommend System.
Any suggestions to work around? Below is a code snippet.
Code to reproduce the issue

Generate the test data

&lt;denchmark-code&gt;import tensorflow as tf                                                         
import numpy as np                                                              
                                                                                
def save_tfrecords(data, label, desfile):                                       
    with tf.python_io.TFRecordWriter(desfile) as writer:                        
        for i in range(len(data)):                                              
            features = tf.train.Features(                                       
                feature = {                                                     
                    "data":tf.train.Feature(int64_list = tf.train.Int64List(value=data[i])),
                    "label":tf.train.Feature(int64_list = tf.train.Int64List(value=[label[i]]))
                }                                                               
            )                                                                   
            example = tf.train.Example(features = features)                     
            serialized = example.SerializeToString()                            
            writer.write(serialized)                                            
                                                                                
data_size = 32                                                                  
data = []                                                                       
for i in range(data_size):                                                      
    tmp = np.array(range(i + 1)).astype(np.int64)                               
    data.append(tmp)                                                            
label = np.array(range(data_size)).astype(np.int64)                             
save_tfrecords(data, label, 'train.tfrecord')                                   
                                                                                
data_size = 8                                                                   
data = []                                                                       
for i in range(data_size):                                                      
    tmp = np.array(range(i + 1)).astype(np.int64)                               
    data.append(tmp)                                                            
label = np.array(range(data_size)).astype(np.int64)                             
save_tfrecords(data, label, 'test.tfrecord')   
&lt;/denchmark-code&gt;


Run the test code.

&lt;denchmark-code&gt;import tensorflow as tf                                                         
                                                                                
def get_dataset(files):                                                         
    def parser(record):                                                         
      keys_to_features = {                                                      
          "data": tf.VarLenFeature(tf.int64),                                   
          "label": tf.FixedLenFeature((), tf.int64),                            
      }                                                                         
      parsed = tf.parse_single_example(record, keys_to_features)                
                                                                                
      # parsed['data'] = parsed['data'].values                                  
                                                                                
      return parsed                                                             
                                                                                
    dataset = tf.data.TFRecordDataset(files)                                    
    dataset = dataset.map(parser)                                               
    dataset = dataset.batch(4)                                                  
    dataset = dataset.repeat(1)                                                 
    return dataset                                                              
                                                                                
                                                                                
graph = tf.Graph()                                                              
with graph.as_default():                                                        
    training_ds = get_dataset('train.tfrecord')                                 
    validation_ds = get_dataset('test.tfrecord')                                
                                                                                
    handle = tf.placeholder(tf.string, shape=[])                                
    iterator = tf.data.Iterator.from_string_handle(                             
        handle, training_ds.output_types, training_ds.output_shapes)            
    print(training_ds.output_types, training_ds.output_shapes)                  
    next_element = iterator.get_next()                                          
                                                                                
    training_iterator = training_ds.make_initializable_iterator()               
    validation_iterator = validation_ds.make_initializable_iterator()           
                                                                                
                                                                                
with graph.as_default():                                                        
                                                                                
    with tf.train.MonitoredTrainingSession() as sess:                           
        training_handle = sess.run(training_iterator.string_handle())           
        validation_handle = sess.run(validation_iterator.string_handle())       
        sess.run(training_iterator.initializer)                                 
        count_training = 0                                                      
        while not sess.should_stop():                                           
            x = sess.run(next_element, feed_dict={handle: training_handle})     
            count_training += 1                                                 
            print('{} [training] {}'.format(count_training, x))                 
                                                                                
            if count_training % 4 == 0:                                         
                sess.run(validation_iterator.initializer)                       
                count_validation = 0                                            
                while True:                                                     
                    try:                                                        
                        y = sess.run(next_element, feed_dict={handle: validation_handle})
                        count_validation += 1                                   
                        print('  {} [validation] {}'.format(count_validation, y))
                    except tf.errors.OutOfRangeError:                           
                        break    
&lt;/denchmark-code&gt;

Other info / logs
&lt;denchmark-code&gt;{'data': tf.int64, 'label': tf.int64} {'data': TensorShape([Dimension(None), Dimension(None)]), 'label': TensorShape([Dimension(None)])}

W tensorflow/core/framework/op_kernel.cc:1401] OP_REQUIRES failed at iterator_ops.cc:1225 : Invalid argument: Data type mismatch at component 0: expected int64 but got variant.
Traceback (most recent call last):
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/client/session.py", line 1334, in _do_call
    return fn(*args)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/client/session.py", line 1319, in _run_fn
    options, feed_dict, fetch_list, target_list, run_metadata)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/client/session.py", line 1407, in _call_tf_sessionrun
    run_metadata)
tensorflow.python.framework.errors_impl.InvalidArgumentError: Data type mismatch at component 0: expected int64 but got variant.
	 [[{{node IteratorFromStringHandleV2}}]]

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "test.py", line 46, in &lt;module&gt;
    x = sess.run(next_element, feed_dict={handle: training_handle})
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/training/monitored_session.py", line 676, in run
    run_metadata=run_metadata)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/training/monitored_session.py", line 1171, in run
    run_metadata=run_metadata)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/training/monitored_session.py", line 1270, in run
    raise six.reraise(*original_exc_info)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/six.py", line 693, in reraise
    raise value
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/training/monitored_session.py", line 1255, in run
    return self._sess.run(*args, **kwargs)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/training/monitored_session.py", line 1327, in run
    run_metadata=run_metadata)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/training/monitored_session.py", line 1091, in run
    return self._sess.run(*args, **kwargs)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/client/session.py", line 929, in run
    run_metadata_ptr)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/client/session.py", line 1152, in _run
    feed_dict_tensor, options, run_metadata)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/client/session.py", line 1328, in _do_run
    run_metadata)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/client/session.py", line 1348, in _do_call
    raise type(e)(node_def, op, message)
tensorflow.python.framework.errors_impl.InvalidArgumentError: Data type mismatch at component 0: expected int64 but got variant.
	 [[node IteratorFromStringHandleV2 (defined at test.py:30) ]]

Caused by op 'IteratorFromStringHandleV2', defined at:
  File "test.py", line 30, in &lt;module&gt;
    handle, training_ds.output_types, training_ds.output_shapes)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/data/ops/iterator_ops.py", line 288, in from_string_handle
    output_shapes=output_structure._flat_shapes)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/ops/gen_dataset_ops.py", line 1596, in iterator_from_string_handle_v2
    output_shapes=output_shapes, name=name)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py", line 788, in _apply_op_helper
    op_def=op_def)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py", line 507, in new_func
    return func(*args, **kwargs)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/framework/ops.py", line 3300, in create_op
    op_def=op_def)
  File "/env/tf-1.13-cpu/lib/python3.5/site-packages/tensorflow/python/framework/ops.py", line 1801, in __init__
    self._traceback = tf_stack.extract_stack()

InvalidArgumentError (see above for traceback): Data type mismatch at component 0: expected int64 but got variant.
	 [[node IteratorFromStringHandleV2 (defined at test.py:30) ]]
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='nolanliou' date='2019-07-07T10:23:39Z'>
		Related issue &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/29347&gt;#29347&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='nolanliou' date='2019-07-09T12:19:23Z'>
		I am able to reproduce the issue with tensorflow version 1.13.1 on Google Colab. Thanks!
		</comment>
		<comment id='3' author='nolanliou' date='2019-07-10T03:40:32Z'>
		&lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 Thanks. Looking forward to solutions.
		</comment>
		<comment id='4' author='nolanliou' date='2019-07-15T19:25:38Z'>
		Setting the output_classes argument of from_string_handle to training_ds.output_classes will fix your issue.
		</comment>
		<comment id='5' author='nolanliou' date='2019-07-15T19:25:39Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30457&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30457&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='nolanliou' date='2019-07-16T01:16:31Z'>
		&lt;denchmark-link:https://github.com/jsimsa&gt;@jsimsa&lt;/denchmark-link&gt;
 It works, really appreciate your help.
		</comment>
		<comment id='7' author='nolanliou' date='2019-07-19T17:40:54Z'>
		&lt;denchmark-link:https://github.com/guangyuyan&gt;@guangyuyan&lt;/denchmark-link&gt;
 please take a look at the documentation of &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/data/Iterator#from_string_handle&gt;from_string_handle&lt;/denchmark-link&gt;
.  is a separate argument from .
		</comment>
		<comment id='8' author='nolanliou' date='2019-07-20T02:19:28Z'>
		it works, appreciate!
		</comment>
	</comments>
</bug>