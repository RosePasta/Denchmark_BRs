<bug id='27496' author='nekitmm' open_date='2019-04-04T07:31:06Z' closed_time='2019-08-08T20:54:10Z'>
	<summary>Can not set 'dynamic' property on custom layer</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Colab environment
TensorFlow version (use command below): 2.0 alpha

I am trying to write a custom layer in TF 2.0 and having trouble making it run eagerly.
For example if I open a documentation page: &lt;denchmark-link:https://www.tensorflow.org/alpha/guide/eager&gt;https://www.tensorflow.org/alpha/guide/eager&lt;/denchmark-link&gt;

And try to use the following piece of code from that page to create custom layer:
class MySimpleLayer(tf.keras.layers.Layer):
  def __init__(self, output_units):
    super(MySimpleLayer, self).__init__()
    self.output_units = output_units
    self.dynamic = True

  def build(self, input_shape):
    # The build method gets called the first time your layer is used.
    # Creating variables on build() allows you to make their shape depend
    # on the input shape and hence removes the need for the user to specify
    # full shapes. It is possible to create variables during __init__() if
    # you already know their full shapes.
    self.kernel = self.add_variable(
      "kernel", [input_shape[-1], self.output_units])

  def call(self, input):
    # Override call() instead of __call__ so we can perform some bookkeeping.
    return tf.matmul(input, self.kernel)
And then try to create an instance, for example like this:
MySimpleLayer(10)
I get the following error message:
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-26-1fe9d7429f3d&gt; in &lt;module&gt;()
----&gt; 1 MySimpleLayer(10)

&lt;ipython-input-25-e48804825d2c&gt; in __init__(self, output_units)
      3     super(MySimpleLayer, self).__init__()
      4     self.output_units = output_units
----&gt; 5     self.dynamic = True
      6 
      7   def build(self, input_shape):

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in __setattr__(self, name, value)
   1778         # Exclude @property.setters from tracking
   1779         hasattr(self.__class__, name)):
-&gt; 1780       super(Layer, self).__setattr__(name, value)
   1781       return
   1782 

AttributeError: can't set attribute
This error appears in Colab as well as on my machine (Windows 8).
Am I doing something wrong here?
	</description>
	<comments>
		<comment id='1' author='nekitmm' date='2019-04-09T06:02:44Z'>
		This question is better asked on &lt;denchmark-link:http://stackoverflow.com/questions/tagged//tensorflow&gt;StackOverflow&lt;/denchmark-link&gt;
 since it is not a bug or feature request. There is also a larger community that reads questions there.
		</comment>
		<comment id='2' author='nekitmm' date='2019-04-09T06:44:56Z'>
		How is this not a bug if code from documentation does not work (in the environment provided by Google)?
		</comment>
		<comment id='3' author='nekitmm' date='2019-04-11T04:03:05Z'>
		Thanks for trying TF 2.0 alpha. I was able to reproduce your behavior in TF 2.0 alpha however it executed successfully using TF 1.13.1 (after enabling eager mode)
		</comment>
		<comment id='4' author='nekitmm' date='2019-04-11T20:03:17Z'>
		&lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
 can you triage this?
I think dynamic is now a property, which is why this error happens, but I don't remember the right way to set it.
		</comment>
		<comment id='5' author='nekitmm' date='2019-05-08T12:52:55Z'>
		Having the same problem, what is the correct way to set this property? The alternative I tried is passing it as an argument to the superclass init, but that raises a NotImplementedError
&lt;denchmark-code&gt;class EVL_out (tf.keras.layers.Layer):
    
    def __init__ (self):
        super (EVL_out, self).__init__ (dynamic=True)
        self.out_units = 2

    def build (self, input_shape):
    ...
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='nekitmm' date='2019-05-08T19:39:05Z'>
		&lt;denchmark-link:https://github.com/ilia-nikiforov&gt;@ilia-nikiforov&lt;/denchmark-link&gt;
,
What exactly is your problem? Initially I thought that setting this property is needed to run layers eagerly, but after digging some more I found out that it is not needed (in my case my custom layer was not running eagerly, but the source of the problem turned out to be completely different). In fact, at the moment I am not sure what does setting 'dynamic' property does at all.
		</comment>
		<comment id='7' author='nekitmm' date='2019-08-08T20:54:10Z'>
		This is fixed with latest tf-nightly 2.0 build version 2.0.0-dev20190808
Now we can expect new improved error message;
AttributeError: Can't set the attribute "dynamic", likely because it conflicts with an existing read-only @property of the object. Please choose a different name.
Changing the name of attribute helps fixing this issue. Thanks!
		</comment>
		<comment id='8' author='nekitmm' date='2019-08-08T20:54:12Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=27496&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=27496&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='nekitmm' date='2020-08-04T11:02:10Z'>
		I'm using tensorflow 2.3 and still get this error. I'm using py_function in my layers and would like to set  as it is documented here: &lt;denchmark-link:url&gt;https://www.tensorflow.org/api_docs/python/tf/keras/layers/Layer&lt;/denchmark-link&gt;

Update:
The error is ok i had to implement the compute_output_shape method in my custom layer.
Example to reproduce the error:
&lt;denchmark-code&gt;class Custom(keras.layers.Layer):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
    def build(self, input_shape):
        self._outputshape = [None,1]
        super().build(input_shape)
    
    def py_function(self,inputs):
        return inputs.numpy().sum(axis=0)
    
    def call(self, inputs):
        x = tf.py_function(func=self.py_function,inp=[inputs],Tout=tf.float32)
        x.set_shape(self._outputshape)
        return x

x_input = keras.layers.Input(shape = (16,), name = 'x_input')
x = Custom(dynamic=True)(x_input)
custom_model = keras.Model(x_input, x, name="custom_model")
custom_model.summary()

&lt;/denchmark-code&gt;

outputs:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
NotImplementedError                       Traceback (most recent call last)
&lt;ipython-input-52-4ed37a9049c5&gt; in &lt;module&gt;
      1 x_input = keras.layers.Input(shape = (16,), name = 'x_input')
----&gt; 2 x = Custom(dynamic=True)(x_input)
      3 custom_model = keras.Model(x_input, x, name="custom_model")
      4 custom_model.summary()

c:\users\hofo\envs\py-smart-bin-sensing\lib\site-packages\tensorflow\python\keras\engine\base_layer.py in __call__(self, *args, **kwargs)
    924     if _in_functional_construction_mode(self, inputs, args, kwargs, input_list):
    925       return self._functional_construction_call(inputs, args, kwargs,
--&gt; 926                                                 input_list)
    927 
    928     # Maintains info about the `Layer.call` stack.

c:\users\hofo\envs\py-smart-bin-sensing\lib\site-packages\tensorflow\python\keras\engine\base_layer.py in _functional_construction_call(self, inputs, args, kwargs, input_list)
   1130           # TODO(fchollet): consider py_func as an alternative, which
   1131           # would enable us to run the underlying graph if needed.
-&gt; 1132           outputs = self._symbolic_call(inputs)
   1133 
   1134         if outputs is None:

c:\users\hofo\envs\py-smart-bin-sensing\lib\site-packages\tensorflow\python\keras\engine\base_layer.py in _symbolic_call(self, inputs)
   2660   def _symbolic_call(self, inputs):
   2661     input_shapes = nest.map_structure(lambda x: x.shape, inputs)
-&gt; 2662     output_shapes = self.compute_output_shape(input_shapes)
   2663     # Convert to TensorShape so that nest.map_structure will not map into
   2664     # individual dim of the shape.

c:\users\hofo\envs\py-smart-bin-sensing\lib\site-packages\tensorflow\python\keras\engine\base_layer.py in compute_output_shape(self, input_shape)
    739                   self.__class__.__name__), e)
    740       return nest.map_structure(lambda t: t.shape, outputs)
--&gt; 741     raise NotImplementedError
    742 
    743   @doc_controls.for_subclass_implementers

NotImplementedError: 
&lt;/denchmark-code&gt;

		</comment>
		<comment id='10' author='nekitmm' date='2020-08-04T15:39:03Z'>
		I think this means your dynamic=True layer must implement
compute_output_shape.
&lt;denchmark-link:#&gt;â€¦&lt;/denchmark-link&gt;


On Tue, Aug 4, 2020 at 4:02 AM oholimoli ***@***.***&gt; wrote:
 I'm using tensorflow 2.3 and still get this error. I'm using py_function
 in my layers and would like to set dynamic = True as it is documented
 here: https://www.tensorflow.org/api_docs/python/tf/keras/layers/Layer
 &lt;http://url&gt;

 Example to reproduce the error:

 class Custom(keras.layers.Layer):
     def __init__(self, **kwargs):
         super().__init__(**kwargs)

     def build(self, input_shape):
         self._outputshape = [None,1]
         super().build(input_shape)

     def py_function(self,inputs):
         return inputs.numpy().sum(axis=0)

     def call(self, inputs):
         x = tf.py_function(func=self.py_function,inp=[inputs],Tout=tf.float32)
         x.set_shape(self._outputshape)
         return x

 x_input = keras.layers.Input(shape = (16,), name = 'x_input')
 x = Custom(dynamic=True)(x_input)
 custom_model = keras.Model(x_input, x, name="custom_model")
 custom_model.summary()


 outputs:

 ---------------------------------------------------------------------------
 NotImplementedError                       Traceback (most recent call last)
 &lt;ipython-input-52-4ed37a9049c5&gt; in &lt;module&gt;
       1 x_input = keras.layers.Input(shape = (16,), name = 'x_input')
 ----&gt; 2 x = Custom(dynamic=True)(x_input)
       3 custom_model = keras.Model(x_input, x, name="custom_model")
       4 custom_model.summary()

 c:\users\hofo\envs\py-smart-bin-sensing\lib\site-packages\tensorflow\python\keras\engine\base_layer.py in __call__(self, *args, **kwargs)
     924     if _in_functional_construction_mode(self, inputs, args, kwargs, input_list):
     925       return self._functional_construction_call(inputs, args, kwargs,
 --&gt; 926                                                 input_list)
     927
     928     # Maintains info about the `Layer.call` stack.

 c:\users\hofo\envs\py-smart-bin-sensing\lib\site-packages\tensorflow\python\keras\engine\base_layer.py in _functional_construction_call(self, inputs, args, kwargs, input_list)
    1130           # TODO(fchollet): consider py_func as an alternative, which
    1131           # would enable us to run the underlying graph if needed.
 -&gt; 1132           outputs = self._symbolic_call(inputs)
    1133
    1134         if outputs is None:

 c:\users\hofo\envs\py-smart-bin-sensing\lib\site-packages\tensorflow\python\keras\engine\base_layer.py in _symbolic_call(self, inputs)
    2660   def _symbolic_call(self, inputs):
    2661     input_shapes = nest.map_structure(lambda x: x.shape, inputs)
 -&gt; 2662     output_shapes = self.compute_output_shape(input_shapes)
    2663     # Convert to TensorShape so that nest.map_structure will not map into
    2664     # individual dim of the shape.

 c:\users\hofo\envs\py-smart-bin-sensing\lib\site-packages\tensorflow\python\keras\engine\base_layer.py in compute_output_shape(self, input_shape)
     739                   self.__class__.__name__), e)
     740       return nest.map_structure(lambda t: t.shape, outputs)
 --&gt; 741     raise NotImplementedError
     742
     743   @doc_controls.for_subclass_implementers

 NotImplementedError:

 â€”
 You are receiving this because you were assigned.
 Reply to this email directly, view it on GitHub
 &lt;#27496 (comment)&gt;,
 or unsubscribe
 &lt;https://github.com/notifications/unsubscribe-auth/AAABHRKXVK3Q23RREK3RRY3R67TELANCNFSM4HDQOTLQ&gt;
 .


-- 
 - Alex

		</comment>
	</comments>
</bug>