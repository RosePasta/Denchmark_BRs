<bug id='30895' author='kuri-leo' open_date='2019-07-20T07:40:55Z' closed_time='2019-08-22T19:39:06Z'>
	<summary>[TF 2.0] autograph issue</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes


OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Windows 10 Pro 64-bit (10.0, Build 18362) &amp; Ubuntu 18.04.2 LTS


TensorFlow installed from (source or binary):  PyPI


TensorFlow version (use command below):  2.0.0-dev20190718


Python version: 3.6.7


CUDA/cuDNN version: cudatoolkit-10.0.130-0/cudnn-7.6.0-cuda10.0_0


GPU model and memory:
(/device:GPU:0 with 1387 MB memory) -&gt; physical GPU (device: 0, name: GeForce 940MX, pci bus id: 0000:01:00.0, compute capability: 5.0)


Describe the current behavior
tf.function raised a warning log (only on Windows Python Shell, even IPython works fine)
and tf.autograph.to_code did not work... (Both Windows and Colab)
&lt;denchmark-code&gt;&gt;&gt;&gt; @tf.function
... def calc(x):
...     return 0 if x&lt;=0.5 else 1
...
&gt;&gt;&gt; calc(12)
WARNING: Logging before flag parsing goes to stderr.
W0720 14:49:32.090106 25088 ag_logging.py:146] Entity &lt;function calc at 0x00000280F0429C80&gt; could not be transformed and will be executed as-is. Please report this to the AutoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting &lt;function calc at 0x00000280F0429C80&gt;: ValueError: Unable to locate the source code of &lt;function calc at 0x00000280F0429C80&gt;. Note that functions defined in certain environments, like the interactive Python shell do not expose their source code. If that is the case, you should to define them in a .py source file. If you are certain the code is graph-compatible, wrap the call using @tf.autograph.do_not_convert. Original error: could not get source code
WARNING: Entity &lt;function calc at 0x00000280F0429C80&gt; could not be transformed and will be executed as-is. Please report this to the AutoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting &lt;function calc at 0x00000280F0429C80&gt;: ValueError: Unable to locate the source code of &lt;function calc at 0x00000280F0429C80&gt;. Note that functions defined in certain environments, like the interactive Python shell do not expose their source code. If that is the case, you should to define them in a .py source file. If you are certain the code is graph-compatible, wrap the call using @tf.autograph.do_not_convert. Original error: could not get source code
&lt;tf.Tensor: id=16, shape=(), dtype=int32, numpy=1&gt;
&lt;/denchmark-code&gt;

and
&lt;denchmark-code&gt;&gt;&gt;&gt; print(tf.autograph.to_code(calc))
Traceback (most recent call last):
  File "C:\tools\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python\autograph\impl\api.py", line 614, in to_graph
    return conversion.convert(entity, program_ctx)
  File "C:\tools\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python\autograph\impl\conversion.py", line 310, in convert
    free_nonglobal_var_names = entity.__code__.co_freevars
AttributeError: 'Function' object has no attribute '__code__'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\tools\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python\autograph\impl\api.py", line 754, in to_code
    experimental_optional_features=experimental_optional_features))
  File "C:\tools\Anaconda3\envs\tf2\lib\site-packages\tensorflow_core\python\autograph\impl\api.py", line 618, in to_graph
    entity, e.__class__.__name__, str(e)))
tensorflow.python.autograph.impl.api.ConversionError: converting &lt;tensorflow.python.eager.def_function.Function object at 0x00000280F0426DD8&gt;: AttributeError: 'Function' object has no attribute '__code__'
&lt;/denchmark-code&gt;

Describe the expected behavior
autograph works
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
@tf.function
def calc(x):
    return 0 if x &lt;= 0.5 else 1

print(calc(2.5))
print(tf.autograph.to_code(calc))
&lt;/denchmark-code&gt;

Please take a look, Thank you.
	</description>
	<comments>
		<comment id='1' author='kuri-leo' date='2019-07-22T06:24:21Z'>
		Was able to reproduce the issue with the Tensorflow vesrion 2.0.0-dev20190718 on Colab. Find the gist &lt;denchmark-link:https://colab.research.google.com/drive/1VcnK8pmrTIe9lWXi5eVqugNRJ2L99r0a&gt;here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='kuri-leo' date='2019-07-23T14:53:17Z'>
		Unfortunately, in the Python REPL, functions don't expose source code, which is required for autograph. Note that other shells, like Jupyter don't expose this limitation.
Admittedly, the explanation of the error is tucked inside the warning message, and it would be nice to make it more obvious:
&lt;denchmark-code&gt;Note that functions defined in certain environments, like the interactive Python shell do not expose their source code. If that is the case, you should to define them in a .py source file.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='kuri-leo' date='2019-07-23T14:53:18Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30895&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30895&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='kuri-leo' date='2019-07-23T15:54:51Z'>
		Hi &lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 ,
Thanks for your help, the first issue is easy as the log gives the hint (and it is the log that asked me to report
But what confused me is the second issue: ConversionError: converting &lt;tensorflow.python.eager.def_function.Function object at 0x7facb0169d30&gt;: AttributeError: 'Function' object has no attribute '__code__' raised by calling tf.autograph.to_code(calc). I think this one has little connection between Python Shell as it can be reproduced with Python Shell, IPython in my PC or Colab based on tf-nightly-gpu-2.0-preview-2.0.0.dev20190723 and 2.0.0-dev20190718.
This API is ok during ML GDE Testing in Jan, and I find that &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/autograph/impl/api.py#L499-L504&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/autograph/impl/api.py#L499-L504&lt;/denchmark-link&gt;
 gives a check of  if it has attribute name  but it does not work, maybe a bug?
Attached is the full log:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/autograph/impl/api.py in to_graph(entity, recursive, experimental_optional_features)
    619         autograph_module=tf_inspect.getmodule(to_graph))
--&gt; 620     return conversion.convert(entity, program_ctx)
    621   except (ValueError, AttributeError, KeyError, NameError, AssertionError) as e:

3 frames
AttributeError: 'Function' object has no attribute '__code__'

During handling of the above exception, another exception occurred:

ConversionError                           Traceback (most recent call last)
/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/autograph/impl/api.py in to_graph(entity, recursive, experimental_optional_features)
    622     logging.error(1, 'Error converting %s', entity, exc_info=True)
    623     raise ConversionError('converting {}: {}: {}'.format(
--&gt; 624         entity, e.__class__.__name__, str(e)))
    625 
    626 

ConversionError: converting &lt;tensorflow.python.eager.def_function.Function object at 0x7facb0169d30&gt;: AttributeError: 'Function' object has no attribute '__code__'
&lt;/denchmark-code&gt;

Thanks in advance.
		</comment>
		<comment id='5' author='kuri-leo' date='2019-07-23T16:24:04Z'>
		&lt;denchmark-link:https://github.com/kkimdev&gt;@kkimdev&lt;/denchmark-link&gt;
 FYI
Ah, I completely missed the second part, sorry about that. I think this would be a useful bug to fix. In essence, to_code requires the original function, but @tf.function returns a wrapper object over the original function. We should make to_code aware of this wrapper so that users don't see this surprising result.
In the mean time, the following workaround should work (subject to the above limitation):
&lt;denchmark-code&gt;print(tf.autograph.to_code(calc.python_function))  # python_function gives us the actual function
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='kuri-leo' date='2019-07-25T13:21:02Z'>
		&lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 thanks for your responding
I'm not sure but both autograph decorator and  can work fine together in r1.14 as I just tested, is the autograph reconstructed in r2.0?
here comes my code and its output:
import tensorflow as tf
@tf.contrib.autograph.convert()
def calc(x):
    return 1 if x&gt;0.5 else 0

print(tf.contrib.autograph.to_code(calc))
&lt;denchmark-code&gt;def tf__calc(*args, **kwargs):
  """Wrapper that calls the converted version of f."""
  do_return = False
  retval_ = ag__.UndefinedReturnValue()
  try:
    do_return = True
    retval_ = ag__.converted_call(converted_call, None, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (f, None, ag__.converted_call('ConversionOptions', converter, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (), {'recursive': recursive, 'force_conversion': True, 'optional_features': optional_features}), args, kwargs), None)
  except Exception as e:
    cond = ag__.converted_call(hasattr, None, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (e, 'ag_error_metadata'), None)

    def get_state():
      return ()

    def set_state(_):
      pass

    def if_true():
      raise ag__.converted_call('to_exception', e.ag_error_metadata, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (ag__.converted_call(type, None, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (e,), None),), None)
      return ag__.match_staging_level(1, cond)

    def if_false():
      raise
      return ag__.match_staging_level(1, cond)
    ag__.if_stmt(cond, if_true, if_false, get_state, set_state)
  cond_1 = ag__.is_undefined_return(retval_)

  def get_state_1():
    return ()

  def set_state_1(_):
    pass

  def if_true_1():
    retval_ = None
    return retval_

  def if_false_1():
    return retval_
  retval_ = ag__.if_stmt(cond_1, if_true_1, if_false_1, get_state_1, set_state_1)
  return retval_
&lt;/denchmark-code&gt;

Thank you
		</comment>
		<comment id='7' author='kuri-leo' date='2019-07-25T13:49:33Z'>
		&lt;denchmark-link:https://github.com/kuri-leo&gt;@kuri-leo&lt;/denchmark-link&gt;
 indeed, they don't work together, because  replaces the function with a wrapper, and   converts that instead. It's a shortcoming in the API that we never fixed because we're deprecated the  decorator: instead we recommend using  instead of , both in 2.0 and 1.14. Sorry for not adding a deprecation warning.
I should add that the official autograph API has moved out of , which is removed in 2.0. Instead, please use the API in . See the &lt;denchmark-link:https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/autograph&gt;2.0 API docs&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/autograph&gt;1.14 API docs&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='8' author='kuri-leo' date='2019-08-01T06:44:29Z'>
		&lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/kkimdev&gt;@kkimdev&lt;/denchmark-link&gt;
 I'm interested in working on this. Please correct me if I'm wrong. Is the solution is to check whether the  on &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/autograph/impl/api.py&gt;to_code source code here&lt;/denchmark-link&gt;
? If it's true, then we get the source from  instead of only ?
		</comment>
		<comment id='9' author='kuri-leo' date='2019-08-01T17:15:25Z'>
		&lt;denchmark-link:https://github.com/ilhamfp&gt;@ilhamfp&lt;/denchmark-link&gt;
 It would be something similar, yes, but we need a more robust way to test that the object is a TF function. Performing an  check for &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/eager/def_function.py#L241&gt;Function&lt;/denchmark-link&gt;
 objects would not be ideal because that would create a circular dependency (tf.function already depends on autograph).
So a better method would be to add a utility in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/tensor_util.py&gt;tensor_util.py&lt;/denchmark-link&gt;
, similar to  -- say , which can perform that check instead.
&lt;denchmark-link:https://github.com/alextp&gt;@alextp&lt;/denchmark-link&gt;
 What would be the best method to check for a Function object, short of verifying the type?
		</comment>
		<comment id='10' author='kuri-leo' date='2019-08-01T18:20:13Z'>
		Sorry, a lot of messages to catch up on.
The issue seems to be that you want to_code to be transparent on code already wrapped with tf.function. I think this is too much special-casing. Maybe we can add a tf.function().to_code method for people who are curious, but I'd rather not break the layering of the stack.
		</comment>
		<comment id='11' author='kuri-leo' date='2019-08-01T18:43:04Z'>
		I think that's a good point. Perhaps a better alternative would be to add a hint to the error message. Right now we attempt to get the function's code and fail. Instead, it might make sense to do something like this:
&lt;denchmark-code&gt;if not hasattr(type(entity), '__code__'):
  raise ValueError('Cannot apply autograph to a function that doesn't expose a __code__ object. If this is a @tf.function, please use to_code(f.python_function) instead.')
&lt;/denchmark-code&gt;

Thoughts?
		</comment>
		<comment id='12' author='kuri-leo' date='2019-08-01T21:18:16Z'>
		SGTM
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Thu, Aug 1, 2019 at 11:50 AM Dan Moldovan ***@***.***&gt; wrote:
 I think that's a good point. Perhaps a better alternative would be to add
 a hint to the error message. Right now we attempt to get the function's
 *code* and fail. Instead, it might make sense to do something like this:

 if not hasattr(type(entity), '__code__'):
   raise ValueError('Cannot apply autograph to a function that doesn't expose a __code__ object. If this is a @tf.function, please use to_code(f.python_function) instead.')

 Thoughts?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 &lt;#30895?email_source=notifications&amp;email_token=AAABHRNIH5XVPBWXOT6ZZ33QCMWBHA5CNFSM4IFN2ND2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD3LQ2RQ#issuecomment-517410118&gt;,
 or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/AAABHROG4QRYSUQW3LOEXLDQCMWBHANCNFSM4IFN2NDQ&gt;
 .


-- 
 - Alex

		</comment>
		<comment id='13' author='kuri-leo' date='2019-08-04T12:01:22Z'>
		Ummm, Sorry for my late reply as I'm trapped in some other works...
Actually, I do this just because I was preparing slide for my GDG and TFUG events and wanted to show how the autograph works. So this is not an in-production issue but just a presentation issue.
Thank you all for your kind help :-)
		</comment>
		<comment id='14' author='kuri-leo' date='2019-08-08T07:08:17Z'>
		Hi,
I am a beginner and would like to contribite to this issue. This would be my first contribution. Any guidence would be very helpful.
Thanks in advance
		</comment>
		<comment id='15' author='kuri-leo' date='2019-08-08T15:51:36Z'>
		&lt;denchmark-link:https://github.com/Soniyanayak51&gt;@Soniyanayak51&lt;/denchmark-link&gt;
 tf.function is defined in tensorflow/python/eager/def_function.py. That's where the Function object is defined where the to_code attribute could be added.
		</comment>
		<comment id='16' author='kuri-leo' date='2019-08-08T19:16:51Z'>
		Thanks for the reply. Working on it
		</comment>
		<comment id='17' author='kuri-leo' date='2019-08-08T19:39:50Z'>
		Wait, I thought my &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/31268&gt;#31268&lt;/denchmark-link&gt;
 PR has already fixed this issue?
Please correct me if I'm wrong. I'm worried that we're fixing the same issue twice.
		</comment>
		<comment id='18' author='kuri-leo' date='2019-08-08T19:48:01Z'>
		Oh, if so we should close this issue.
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Thu, Aug 8, 2019 at 12:47 PM Ilham F Putra ***@***.***&gt; wrote:
 Wait, I thought my #31268
 &lt;#31268&gt; PR has already
 fixed this issue?
 Please correct me if I'm wrong. I'm worried that we're fixing the same
 issue twice.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 &lt;#30895?email_source=notifications&amp;email_token=AAABHRPUUABUWEYT2Z6TVS3QDRZ4VA5CNFSM4IFN2ND2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD34V7JA#issuecomment-519659428&gt;,
 or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/AAABHRLA4AEDW7BMW2KRJL3QDRZ4VANCNFSM4IFN2NDQ&gt;
 .


-- 
 - Alex

		</comment>
		<comment id='19' author='kuri-leo' date='2019-08-08T19:48:26Z'>
		&lt;denchmark-link:https://github.com/ilhamfp&gt;@ilhamfp&lt;/denchmark-link&gt;
 I like your fix.
		</comment>
		<comment id='20' author='kuri-leo' date='2019-08-08T19:50:58Z'>
		Thank you! All credits to &lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;

		</comment>
		<comment id='21' author='kuri-leo' date='2019-08-12T13:44:03Z'>
		so this issue is closed or opened till
as it's showing open
		</comment>
		<comment id='22' author='kuri-leo' date='2019-08-12T14:36:24Z'>
		@KeshavJB5 Currently PR was approved. This will be closed when the PR merges. Thanks!
		</comment>
		<comment id='23' author='kuri-leo' date='2019-08-22T17:39:43Z'>
		&lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/31268&gt;#31268&lt;/denchmark-link&gt;
 has been merged. I think we can close this?
		</comment>
		<comment id='24' author='kuri-leo' date='2019-08-22T19:39:06Z'>
		Yep, looks like this can be closed. Thanks everyone!
		</comment>
		<comment id='25' author='kuri-leo' date='2019-08-22T19:39:07Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30895&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30895&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>