<bug id='31758' author='ashutosh-dwivedi-e3502' open_date='2019-08-19T09:16:52Z' closed_time='2020-01-16T17:20:09Z'>
	<summary>dataset as input to estimator is broken.</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Does not depend on OS.
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v1.14.0-0-g87989f6959, 1.14.0
Python version: 3.6.8
Bazel version (if compiling from source): NA
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version: NA
GPU model and memory: NA

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
Dataset input to estimator is broken
Describe the expected behavior
Passing the a dataset object to estimator.fit method results in the following  error:
&lt;denchmark-code&gt;ValueError                                Traceback (most recent call last)

&lt;ipython-input-6-1ed4dbb580ca&gt; in &lt;module&gt;()
     14 est.fit(
     15     steps=1000,
---&gt; 16     input_fn=lambda : csv_input_fn(train_path, batch_size))

2 frames

/usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _train_model(self, input_fn, hooks)
   1036       random_seed.set_random_seed(self._config.tf_random_seed)
   1037       global_step = training_util.create_global_step(g)
-&gt; 1038       features, labels = input_fn()
   1039       self._check_inputs(features, labels)
   1040       training_util._get_or_create_global_step_read()  # pylint: disable=protected-access

ValueError: too many values to unpack (expected 2)
&lt;/denchmark-code&gt;

Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
Following example from the docs can be used to reproduce the problem. Check  the definition of the main function.
&lt;denchmark-code&gt;import pandas as pd
import tensorflow as tf

TRAIN_URL = "http://download.tensorflow.org/data/iris_training.csv"
TEST_URL = "http://download.tensorflow.org/data/iris_test.csv"

CSV_COLUMN_NAMES = ['SepalLength', 'SepalWidth',
                    'PetalLength', 'PetalWidth', 'Species']
SPECIES = ['Setosa', 'Versicolor', 'Virginica']

def maybe_download():
    train_path = tf.keras.utils.get_file(TRAIN_URL.split('/')[-1], TRAIN_URL)
    test_path = tf.keras.utils.get_file(TEST_URL.split('/')[-1], TEST_URL)

    return train_path, test_path

def load_data(y_name='Species'):
    """Returns the iris dataset as (train_x, train_y), (test_x, test_y)."""
    train_path, test_path = maybe_download()

    train = pd.read_csv(train_path, names=CSV_COLUMN_NAMES, header=0)
    train_x, train_y = train, train.pop(y_name)

    test = pd.read_csv(test_path, names=CSV_COLUMN_NAMES, header=0)
    test_x, test_y = test, test.pop(y_name)

    return (train_x, train_y), (test_x, test_y)


def train_input_fn(features, labels, batch_size):
    """An input function for training"""
    # Convert the inputs to a Dataset.
    dataset = tf.data.Dataset.from_tensor_slices((dict(features), labels))

    # Shuffle, repeat, and batch the examples.
    dataset = dataset.shuffle(1000).repeat().batch(batch_size)

    # Return the dataset.
    return dataset


def eval_input_fn(features, labels, batch_size):
    """An input function for evaluation or prediction"""
    features=dict(features)
    if labels is None:
        # No labels, use only features.
        inputs = features
    else:
        inputs = (features, labels)

    # Convert the inputs to a Dataset.
    dataset = tf.data.Dataset.from_tensor_slices(inputs)

    # Batch the examples
    assert batch_size is not None, "batch_size must not be None"
    dataset = dataset.batch(batch_size)

    # Return the dataset.
    return dataset


# The remainder of this file contains a simple example of a csv parser,
#     implemented using the `Dataset` class.

# `tf.parse_csv` sets the types of the outputs to match the examples given in
#     the `record_defaults` argument.
CSV_TYPES = [[0.0], [0.0], [0.0], [0.0], [0]]

def _parse_line(line):
    # Decode the line into its fields
    fields = tf.decode_csv(line, record_defaults=CSV_TYPES)

    # Pack the result into a dictionary
    features = dict(zip(CSV_COLUMN_NAMES, fields))

    # Separate the label from the features
    label = features.pop('Species')

    return features, label


def csv_input_fn(csv_path, batch_size):
    # Create a dataset containing the text lines.
    dataset = tf.data.TextLineDataset(csv_path).skip(1)

    # Parse each line.
    dataset = dataset.map(_parse_line)

    # Shuffle, repeat, and batch the examples.
    dataset = dataset.shuffle(1000).repeat().batch(batch_size)

    # Return the dataset.
    return dataset
  
  
def main():
  train_path, test_path = maybe_download()
  batch_size = 100
  CSV_COLUMN_NAMES = ['SepalLength', 'SepalWidth',
                      'PetalLength', 'PetalWidth', 'Species']

  est = tf.contrib.learn.LinearClassifier(
      CSV_COLUMN_NAMES,
      n_classes=3
  )

  est.fit(
      steps=1000,
      input_fn=lambda : csv_input_fn(train_path, batch_size))
  
main()
&lt;/denchmark-code&gt;

Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='ashutosh-dwivedi-e3502' date='2019-08-20T06:49:01Z'>
		I was able to replicate the issue for TF-1.14 version, kindly find the &lt;denchmark-link:https://colab.research.google.com/drive/1i0lArKoDJRKJsUGqPj73diEnostxEJ6W&gt;Gist&lt;/denchmark-link&gt;
 of colab.Thanks!
		</comment>
		<comment id='2' author='ashutosh-dwivedi-e3502' date='2020-01-15T21:58:57Z'>
		@aashudwivedi Sorry for the late response. Is this still an issue for you. Can you please go through the &lt;denchmark-link:https://www.tensorflow.org/tutorials/estimator/linear&gt;tutorial&lt;/denchmark-link&gt;
 on TF website. Thanks!
		</comment>
		<comment id='3' author='ashutosh-dwivedi-e3502' date='2020-01-16T14:32:39Z'>
		No it's not. I implemented my own SVM using tf instead.
		</comment>
		<comment id='4' author='ashutosh-dwivedi-e3502' date='2020-01-16T17:20:10Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31758&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31758&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='ashutosh-dwivedi-e3502' date='2020-01-16T17:20:18Z'>
		Closing as it is no longer an issue
		</comment>
	</comments>
</bug>