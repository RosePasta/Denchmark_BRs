<bug id='39661' author='petewarden' open_date='2020-05-18T22:08:23Z' closed_time='2020-06-19T06:53:11Z'>
	<summary>Unaligned 64-bit access causes crash on Hexagon platforms</summary>
	<description>
We've discovered the cause of a TF Lite Micro crash on some Qualcomm Hexagon platforms, and need to figure out a good solution. Here are the details:
Quote from tensorflow/lite/micro/micro_allocator.cc:327 :
&lt;denchmark-code&gt;
      // Note that the zero_point field in the FlatBuffers schema is a 64-bit

      // integer, but the zero_point field in the TfLiteQuantizationParams struct

      // is a 32-bit integer.

      result-&gt;params.zero_point =

          static_cast&lt;int32_t&gt;(src_quantization-&gt;zero_point()-&gt;Get(0));

&lt;/denchmark-code&gt;

As stated in the comment, the zero_point is a 64bit value inside flatbuffer’s schema.
But when hexagon DSP tries to read a 64bit value, the address needs to be 64bit aligned. This is a hardware instruction level limitation of our DSP.
So, when the execution fell into IndirectHelper::Read(), hexagon-sim crashed.
Quote from tensorflow/lite/micro/tools/make/downloads/flatbuffers/include/flatbuffers/flatbuffers.h:104 :
&lt;denchmark-code&gt;
&gt;&gt;  static return_type Read(const uint8_t *p, uoffset_t i) {

      return EndianScalar((reinterpret_cast&lt;const T *&gt;(p))[i]);

    }

&lt;/denchmark-code&gt;

This pointer “p” is not guaranteed to be 8 byte aligned. So when I am not lucky, the linker will give it a bad location. Hence, random crash.
	</description>
	<comments>
		<comment id='1' author='petewarden' date='2020-05-21T00:33:40Z'>
		After evaluating options, I've opted to add alignas(8) to our serialized flatbuffers.  The entire flatbuffer is internally aligned properly (for example, 64-bit datatypes are aligned to 8 byte boundaries).
I have submitted a change to update our in-tree example and benchmark models to align the flatbuffer array to 8 bytes.  I am working to update alignment in models which are downloaded at compile time.
		</comment>
		<comment id='2' author='petewarden' date='2020-06-05T05:43:25Z'>
		&lt;denchmark-link:https://github.com/petewarden&gt;@petewarden&lt;/denchmark-link&gt;

Please update as per above comment
		</comment>
		<comment id='3' author='petewarden' date='2020-06-12T06:09:09Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='4' author='petewarden' date='2020-06-19T06:53:01Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='5' author='petewarden' date='2020-06-19T06:53:12Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39661&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39661&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>