<bug id='33969' author='netw0rkf10w' open_date='2019-11-04T11:40:19Z' closed_time='2020-06-17T05:09:23Z'>
	<summary>2 issues: tf.train.Checkpoint does not seem to save optimizer state, impossible to load_weights using skip_mismatch=True</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes, with minor modifications from the official documentation
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Colab
TensorFlow installed from (source or binary): !pip install tf-nightly-gpu
TensorFlow version (use command below):
Python version: v1.12.1-17291-ga2a3b22 2.1.0-dev20191103

Describe the current behavior


When restoring from a tf.train.Checkpoint, training does not seem to resume from exactly where it was left off.


It is not possible to load pretrained weights to the same model with different output dimension, even with skip_mismatch=True.



The two issues can be reproduced using &lt;denchmark-link:https://colab.research.google.com/drive/1M0PDxTsXfL0lvFcsEhNTvNG-titdARYo&gt;this Colab Notebook&lt;/denchmark-link&gt;
.
	</description>
	<comments>
		<comment id='1' author='netw0rkf10w' date='2019-11-05T05:28:43Z'>
		Issue replicating for the given code. Thanks!
		</comment>
		<comment id='2' author='netw0rkf10w' date='2020-02-28T15:52:11Z'>
		Hi, are there any updates on this? Seeing this issue on tf-nightly==2.2.0.dev20200119 also using model checkpoints saved via checkpoint.save. Checking optimizer.iterations after reinstantiation, it is always reset to be 0.
		</comment>
		<comment id='3' author='netw0rkf10w' date='2020-06-01T22:45:23Z'>
		&lt;denchmark-link:https://github.com/netw0rkf10w&gt;@netw0rkf10w&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/mathemakitten&gt;@mathemakitten&lt;/denchmark-link&gt;
 Is this still an issue? Can you please check with latest version  and  and let us know how it perform. I tested your code with . Regarding you two issues
Issue 1 : This was resolved as the loss after restoring checkpoint is smaller.
Issue 2 (with tf format): loading of weights is based on topology when the model is a subclass model. This was the error "NotImplementedError: Weights may only be loaded based on topology into Models when loading TensorFlow-formatted weights (got by_name=True to load_weights)."
Issue 2 (with h5 format): Approach should be to call model on some data to initiate the weights and then assign the weights. Currently it throws an error "ValueError: Unable to load weights saved in HDF5 format into a subclassed Model which has not created its variables yet. Call the Model first, then load the weights."
Please check &lt;denchmark-link:https://www.tensorflow.org/guide/checkpoint&gt;this&lt;/denchmark-link&gt;
 resource for checkpointing and &lt;denchmark-link:https://www.tensorflow.org/guide/keras/save_and_serialize&gt;this&lt;/denchmark-link&gt;
 is for save_load subclass models.
Check the example from the above link
&lt;denchmark-code&gt;# Create a simple functional model
inputs = keras.Input(shape=(784,), name='digits')
x = keras.layers.Dense(64, activation='relu', name='dense_1')(inputs)
x = keras.layers.Dense(64, activation='relu', name='dense_2')(x)
outputs = keras.layers.Dense(10, name='predictions')(x)
functional_model = keras.Model(inputs=inputs, outputs=outputs, name='3_layer_mlp')

# Define a subclassed model with the same architecture
class SubclassedModel(keras.Model):
  def __init__(self, output_dim, name=None):
    super(SubclassedModel, self).__init__(name=name)
    self.output_dim = output_dim
    self.dense_1 = keras.layers.Dense(64, activation='relu', name='dense_1')
    self.dense_2 = keras.layers.Dense(64, activation='relu', name='dense_2')
    self.dense_3 = keras.layers.Dense(output_dim, name='predictions')
  def call(self, inputs):
    x = self.dense_1(inputs)
    x = self.dense_2(x)
    x = self.dense_3(x)
    return x
  def get_config(self):
    return {'output_dim': self.output_dim, 'name': self.name}

subclassed_model = SubclassedModel(10)
# Call the subclassed model once to create the weights.
subclassed_model(tf.ones((1, 784)))

# Copy weights from functional_model to subclassed_model.
subclassed_model.set_weights(functional_model.get_weights())
&lt;/denchmark-code&gt;

Please verify once and close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='4' author='netw0rkf10w' date='2020-06-10T04:34:37Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='5' author='netw0rkf10w' date='2020-06-10T04:44:51Z'>
		Mine has been resolved, running on TF2.2. Thanks!
		</comment>
		<comment id='6' author='netw0rkf10w' date='2020-06-17T05:09:19Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='7' author='netw0rkf10w' date='2020-06-17T05:09:24Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33969&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33969&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>