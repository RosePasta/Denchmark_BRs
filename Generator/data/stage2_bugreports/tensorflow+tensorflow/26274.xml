<bug id='26274' author='ageron' open_date='2019-03-02T02:28:34Z' closed_time='2019-03-19T17:53:14Z'>
	<summary>Custom model's `build()` method is not called automatically</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
MacOSX 10.13.6
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
No
TensorFlow installed from (source or binary):
Binary
TensorFlow version (use command below):
tf.version.VERSION: '2.0.0-dev20190301'
tf.version.GIT_VERSION: 'v1.12.0-9345-g4eeb2714f4'
Python version:
3.6.8
Bazel version (if compiling from source):
N/A
GCC/Compiler version (if compiling from source):
N/A
CUDA/cuDNN version:
N/A
GPU model and memory:
N/A

Describe the current behavior
When creating a custom model with a build() method (e.g., if one of the model's layers has a size that depends on the input shape, such as a reconstruction layer), the model cannot be trained unless I explicitly call build() with a tf.TensorShape(). Moreover, I cannot specify an input_shape.
Describe the expected behavior
I expect the custom model to be built automatically the first time it is called (e.g., by the fit() method).
Code to reproduce the issue
import numpy as np
import tensorflow as tf
from tensorflow import keras

X_train = np.random.randn(1000, 8)
y_train = np.random.rand(1000, 1)

class ReconstructingRegressor(keras.models.Model):
    def __init__(self, output_dim, **kwargs):
        super().__init__(**kwargs)
        self.hidden = keras.layers.Dense(30, activation="elu")
        self.out = keras.layers.Dense(output_dim)

    def build(self, batch_input_shape):
        n_inputs = batch_input_shape[-1]
        self.reconstruct = keras.layers.Dense(n_inputs)
        super().build(batch_input_shape)

    def call(self, inputs):
        Z = self.hidden(inputs)
        reconstruction = self.reconstruct(Z)
        reconstruction_loss = tf.reduce_mean(tf.square(reconstruction - inputs))
        self.add_loss(0.1 * reconstruction_loss)
        return self.out(Z)

model = ReconstructingRegressor(1)
#model.build(tf.TensorShape([None, 8])) # &lt;= works if I add this line
model.compile(loss="mse", optimizer="nadam")
history = model.fit(X_train, y_train, epochs=2) # &lt;= AttributeError (see below)
Other info / logs
Here is the stacktrace:
&lt;denchmark-code&gt;AttributeError                            Traceback (most recent call last)
&lt;ipython-input-1-3cb185747474&gt; in &lt;module&gt;
     27 #model.build(tf.TensorShape([None, 8])) # &lt;= works if I add this line
     28 model.compile(loss="mse", optimizer="nadam")
---&gt; 29 history = model.fit(X_train, y_train, epochs=2) # &lt;= ERROR!

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py in fit(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_freq, max_queue_size, workers, use_multiprocessing, **kwargs)
    804         steps=steps_per_epoch,
    805         validation_split=validation_split,
--&gt; 806         shuffle=shuffle)
    807
    808     # Prepare validation data.

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py in _standardize_user_data(self, x, y, sample_weight, class_weight, batch_size, check_steps, steps_name, steps, validation_split, shuffle, extract_tensors_from_dataset)
   2501       else:
   2502         cast_inputs = x_input
-&gt; 2503       self._set_inputs(cast_inputs)
   2504     else:
   2505       y_input = y

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/training/tracking/base.py in _method_wrapper(self, *args, **kwargs)
    454     self._setattr_tracking = False  # pylint: disable=protected-access
    455     try:
--&gt; 456       result = method(self, *args, **kwargs)
    457     finally:
    458       self._setattr_tracking = previous_value  # pylint: disable=protected-access

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py in _set_inputs(self, inputs, outputs, training)
   2773             outputs = self.call(inputs, training=training)
   2774           else:
-&gt; 2775             outputs = self.call(inputs)
   2776           # Reset to the previously saved value. If `call()` had `add_metric`
   2777           # or `add_loss`, then `_contains_symbolic_tensors` will have been set

&lt;ipython-input-1-3cb185747474&gt; in call(self, inputs)
     19     def call(self, inputs):
     20         Z = self.hidden(inputs)
---&gt; 21         reconstruction = self.reconstruct(Z)
     22         reconstruction_loss = tf.reduce_mean(tf.square(reconstruction - inputs))
     23         self.add_loss(0.1 * reconstruction_loss)

AttributeError: 'ReconstructingRegressor' object has no attribute 'reconstruct'
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ageron' date='2019-03-11T08:11:33Z'>
		Thanks for the bug report! I was able to reproduce this issue, looking into it now
		</comment>
		<comment id='2' author='ageron' date='2019-03-18T17:03:14Z'>
		This should be fixed in the latest nightly build
		</comment>
		<comment id='3' author='ageron' date='2020-04-03T17:23:43Z'>
		Has it been fixed? I still get an error in a specific case when using add_loss on a model.
For example, as illustrated in this &lt;denchmark-link:https://stackoverflow.com/questions/60106829/cannot-build-custom-keras-model-with-custom-loss/60986815#60986815&gt;question&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>