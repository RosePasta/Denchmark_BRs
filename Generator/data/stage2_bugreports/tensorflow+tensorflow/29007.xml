<bug id='29007' author='ethanyanjiali' open_date='2019-05-24T20:24:54Z' closed_time='2019-06-12T06:07:39Z'>
	<summary>[TF 2.0] Converted code from autograph.to_code has undefined variable name, causing 'NameError: x is not defined'</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS 10.12.6 (16G1815)
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary):
TensorFlow version (use command below):
Python version: 3.6.5
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
2.0.0-dev20190521
Describe the current behavior
currently, the autograph.to_code covert the query function in the following code piece
&lt;denchmark-code&gt;import random
import tensorflow as tf


class ImagePool():
    def __init__(self, pool_size):
        self.pool_size = pool_size
        self.count = 0
        self.images = []
        print(tf.autograph.to_code(self.query))

    def query(self, images):
        if self.pool_size == 0:
            return images
        return_images = []
        for image in images:
            # if the buffer is not full; keep inserting current images to the buffer
            if self.count &lt; self.pool_size:
                self.count = self.count + 1
                self.images.append(image)
                return_images.append(image)
            else:
                p = random.uniform(0, 1)
                if p &gt; 0.5:
                    # by 50% chance, the buffer will return a previously stored image
                    # and insert the current image into the buffer
                    # randint is inclusive
                    random_id = random.randint(0, self.pool_size - 1)
                    tmp = self.images[random_id].clone()
                    self.images[random_id] = image
                    return_images.append(tmp)
                else:
                    # by another 50% chance, the buffer will return the current image
                    return_images.append(image)
        return return_images
&lt;/denchmark-code&gt;

to this:
&lt;denchmark-code&gt;def tf__query(self, images):
  do_return = False
  retval_ = ag__.UndefinedReturnValue()
  cond_2 = self.pool_size == 0

  def get_state_2():
    return self.count, self.images[random_id]

  def set_state_2(vals):
    self.count, self.images[random_id] = vals

  def if_true_2():
    do_return = True
    retval_ = images
    return retval_

  def if_false_2():
    return_images = []

    def loop_body(loop_vars, self_count):
      image = loop_vars
      cond_1 = self_count &lt; self.pool_size

      def get_state_1():
        return self_count, self.images[random_id]

      def set_state_1(vals):
        self_count, self.images[random_id] = vals

      def if_true_1():
        self_count = self_count + 1
        ag__.converted_call('append', self.images, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (image,), None)
        ag__.converted_call('append', return_images, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (image,), None)
        return ag__.match_staging_level(1, cond_1)

      def if_false_1():
        p = ag__.converted_call('random', random, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (), None)
        cond = p &gt; 0.5

        def get_state():
          return self.images[random_id],

        def set_state(vals):
          self.images[random_id], = vals

        def if_true():
          random_id = ag__.converted_call('randint', random, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (0, self.pool_size - 1), None)
          tmp = ag__.converted_call('clone', self.images[random_id], ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (), None)
          self.images[random_id] = image
          ag__.converted_call('append', return_images, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (tmp,), None)
          return ag__.match_staging_level(1, cond)

        def if_false():
          ag__.converted_call('append', return_images, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (image,), None)
          return ag__.match_staging_level(1, cond)
        ag__.if_stmt(cond, if_true, if_false, get_state, set_state)
        return ag__.match_staging_level(1, cond_1)
      ag__.if_stmt(cond_1, if_true_1, if_false_1, get_state_1, set_state_1)
      return self_count,
    self.count, = ag__.for_stmt(images, None, loop_body, (self.count,))
    do_return = True
    retval_ = return_images
    return retval_
  retval_ = ag__.if_stmt(cond_2, if_true_2, if_false_2, get_state_2, set_state_2)
  cond_3 = ag__.is_undefined_return(retval_)

  def get_state_3():
    return ()

  def set_state_3(_):
    pass

  def if_true_3():
    retval_ = None
    return retval_

  def if_false_3():
    return retval_
  retval_ = ag__.if_stmt(cond_3, if_true_3, if_false_3, get_state_3, set_state_3)
  return retval_

def tf__query(self, images):
  do_return = False
  retval_ = ag__.UndefinedReturnValue()
  cond_2 = self.pool_size == 0

  def get_state_2():
    return self.count, self.images[random_id]

  def set_state_2(vals):
    self.count, self.images[random_id] = vals

  def if_true_2():
    do_return = True
    retval_ = images
    return retval_

  def if_false_2():
    return_images = []

    def loop_body(loop_vars, self_count):
      image = loop_vars
      cond_1 = self_count &lt; self.pool_size

      def get_state_1():
        return self_count, self.images[random_id]

      def set_state_1(vals):
        self_count, self.images[random_id] = vals

      def if_true_1():
        self_count = self_count + 1
        ag__.converted_call('append', self.images, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (image,), None)
        ag__.converted_call('append', return_images, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (image,), None)
        return ag__.match_staging_level(1, cond_1)

      def if_false_1():
        p = ag__.converted_call('random', random, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (), None)
        cond = p &gt; 0.5

        def get_state():
          return self.images[random_id],

        def set_state(vals):
          self.images[random_id], = vals

        def if_true():
          random_id = ag__.converted_call('randint', random, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (0, self.pool_size - 1), None)
          tmp = ag__.converted_call('clone', self.images[random_id], ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (), None)
          self.images[random_id] = image
          ag__.converted_call('append', return_images, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (tmp,), None)
          return ag__.match_staging_level(1, cond)

        def if_false():
          ag__.converted_call('append', return_images, ag__.ConversionOptions(recursive=True, force_conversion=False, optional_features=(), internal_convert_user_code=True), (image,), None)
          return ag__.match_staging_level(1, cond)
        ag__.if_stmt(cond, if_true, if_false, get_state, set_state)
        return ag__.match_staging_level(1, cond_1)
      ag__.if_stmt(cond_1, if_true_1, if_false_1, get_state_1, set_state_1)
      return self_count,
    self.count, = ag__.for_stmt(images, None, loop_body, (self.count,))
    do_return = True
    retval_ = return_images
    return retval_
  retval_ = ag__.if_stmt(cond_2, if_true_2, if_false_2, get_state_2, set_state_2)
  cond_3 = ag__.is_undefined_return(retval_)

  def get_state_3():
    return ()

  def set_state_3(_):
    pass

  def if_true_3():
    retval_ = None
    return retval_

  def if_false_3():
    return retval_
  retval_ = ag__.if_stmt(cond_3, if_true_3, if_false_3, get_state_3, set_state_3)
  return retval_
&lt;/denchmark-code&gt;

but note that in the converted code
&lt;denchmark-code&gt;        def get_state():
          return self.images[random_id],
&lt;/denchmark-code&gt;

this is causing an undefined error: NameError: name 'random_id' is not defined
the reason I'm calling to_code to this class method is because i used it in a tf.function so i think autograph is going to convert this
Describe the expected behavior
the code to be converted correctly
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
as above
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='ethanyanjiali' date='2019-05-29T11:46:16Z'>
		Will it be possible to provide exact minimal code snippet that can depict the issue. This will help us to get more information and proceed faster. Thanks!
		</comment>
		<comment id='2' author='ethanyanjiali' date='2019-06-07T06:43:15Z'>
		Please help us to reproduce the issue. I have tried on Colab with TF version 2.0.0-dev20190606 and was able to run it successfully. Let us know if I am missing out anything. Thanks!
		</comment>
		<comment id='3' author='ethanyanjiali' date='2019-06-12T06:07:39Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='4' author='ethanyanjiali' date='2019-06-12T06:07:41Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=29007&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=29007&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>