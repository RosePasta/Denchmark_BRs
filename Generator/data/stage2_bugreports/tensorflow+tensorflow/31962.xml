<bug id='31962' author='mmv' open_date='2019-08-26T00:21:39Z' closed_time='2020-02-17T15:32:20Z'>
	<summary>Tensorflow 2.0 tf.function internal error</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Colab, Ubuntu, Windows
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.0-beta, 2.0-rc, 2.0-nightly (v1.12.1-9694-g006e2933 2.0.0-dev20190825)
Python version: 3.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: 10, also without CUDA
GPU model and memory:

Describe the current behavior
Decorating the training loop that consumes a tf.Data.Dataset with @tf.function causes an internal error in tensorflow (an object is returned to Python with an error set and I'm unable to understand the actual origin of the error). Not using @tf.function, the code works alright.
Describe the expected behavior
The model gradients should be calculated well regardless of being within a @tf.function trace or not.

Code is provided in the &lt;denchmark-link:https://colab.research.google.com/drive/1LCZqyGa8mPjBS6KXOnEH_T7VOWoFpnnB&gt;colab notebook available here&lt;/denchmark-link&gt;


While working with a rather complex module that operates on irregular data (Graphs), using  worsens performance in TF 2.0 due to bug &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/29075&gt;#29075&lt;/denchmark-link&gt;
. While following the workaround described in that issue, I stumbled upon this issue.
Because of these issues, TF 2.0 is not a good fit for DL on irregularly shaped data.
Relevant traceback:
&lt;denchmark-code&gt;    &lt;ipython-input-8-e24395a4965a&gt;:137 train_step  *
        gradients = tape.gradient(loss, model.trainable_variables)
    /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/backprop.py:1015 gradient
        unconnected_gradients=unconnected_gradients)
    /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/imperative_grad.py:76 imperative_grad
        compat.as_str(unconnected_gradients.value))
    /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/eager/backprop.py:599 _aggregate_grads
        if len(gradients) == 1:

    SystemError: &lt;built-in function len&gt; returned a result with an error set
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='mmv' date='2019-08-27T06:54:17Z'>
		I was able to replicate the issue in TF version 2.0 preview. Thanks!
		</comment>
		<comment id='2' author='mmv' date='2019-08-30T10:23:44Z'>
		I was also able to replicate this error in the nightly 2.0 preview.
		</comment>
		<comment id='3' author='mmv' date='2019-09-26T16:04:43Z'>
		This is a very strange error, it seems to originate in the gradient calculation. It happens inside a Dataset.reduce, but I don't know if that's the reason it crashes; MainModel is fairly complex, though it doesn't seem to do anything dangerous as far as I can tell.
&lt;denchmark-link:https://github.com/saxenasaurabh&gt;@saxenasaurabh&lt;/denchmark-link&gt;
, could you have a closer look at the error? Perhaps we can detect its root cause and raise a more specific error?
		</comment>
		<comment id='4' author='mmv' date='2020-01-02T01:53:59Z'>
		Any updates on this? I can confirm this only is happening if I use tf.function.
I see this happening first:
2020-01-01 20:59:20.099731: W tensorflow/core/common_runtime/shape_refiner.cc:89] Function instantiation has undefined input shape at index: 1211 in the outer inference context.
2020-01-01 20:59:20.567981: W tensorflow/core/common_runtime/shape_refiner.cc:89] Function instantiation has undefined input shape at index: 1211 in the outer inference context.
2020-01-01 20:59:21.052197: W tensorflow/core/common_runtime/shape_refiner.cc:89] Function instantiation has undefined input shape at index: 1211 in the outer inference context.
2020-01-01 20:59:21.441673: W tensorflow/core/common_runtime/shape_refiner.cc:89] Function instantiation has undefined input shape at index: 1211 in the outer inference context.
2020-01-01 20:59:21.757365: W tensorflow/core/common_runtime/shape_refiner.cc:89] Function instantiation has undefined input shape at index: 1211 in the outer inference context.
My input data is a tf.data.Dataset with a padded_batch. The only other thing I could think of is the Dataset supplies nested dictionaries.
		</comment>
		<comment id='5' author='mmv' date='2020-02-13T05:36:55Z'>
		I'm also having this error
		</comment>
		<comment id='6' author='mmv' date='2020-02-13T15:07:32Z'>
		This looks like a bug related to GradientTape and Dataset. A few workarounds:


Move the @tf.function to train_step (so that the dataset iteration is outside the tf.function). That also seems to speed things up, which might be another bug.


Use tf.gradients instead of GradientTape. The downside is that tf.gradients doesn't work in eager mode:


&lt;denchmark-code&gt;def train_step(xs, ys):
    ys_hat = model(xs, training=True)
    loss = loss_fn(ys, ys_hat)
    gradients = tf.gradients(loss, model.trainable_variables)
    optimizer.apply_gradients(zip(gradients, model.trainable_variables))

    train_loss(loss)
    train_metric(ys.edges, ys_hat.edges)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='mmv' date='2020-02-13T16:06:17Z'>
		&lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 For now I applied &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/33497&gt;#33497&lt;/denchmark-link&gt;
 locally which fixes the problem. Currently I'm already doing 1, I can try doing 2 as well.
		</comment>
		<comment id='8' author='mmv' date='2020-02-17T15:32:20Z'>
		I checked the colab posted by &lt;denchmark-link:https://github.com/mmv&gt;@mmv&lt;/denchmark-link&gt;
 against tf-nightly and it looks like &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/33497&gt;#33497&lt;/denchmark-link&gt;
 resolved the issue.
		</comment>
		<comment id='9' author='mmv' date='2020-02-17T15:32:23Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31962&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31962&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>