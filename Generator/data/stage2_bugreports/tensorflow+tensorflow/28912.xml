<bug id='28912' author='atomberg' open_date='2019-05-21T20:15:13Z' closed_time='2019-08-27T23:34:00Z'>
	<summary>Unexpected behaviour of tf.keras.Model.predict using tf.data.Dataset as input</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code: Yes
OS Platform and Distribution: MacOS X, Ubuntu 16.04
Mobile device: None
TensorFlow installed from (source or binary): from source
TensorFlow version (use command below): v1.13.1-0-g6612da8951
Python version: 3.7.3 (MacOS) and 3.6.7 (Ubuntu)
Bazel version: 0.20.0-homebrew (MacOS) and 0.20.0 (Ubuntu)
GCC/Compiler version: clang-1000.11.45.5 (MacOS) and 7.3.0 (Ubuntu)
CUDA/cuDNN version: None (MacOS) and 10.0 (Ubuntu)
GPU model and memory: None (MacOS) and GeForce GTX 1080 Ti (Ubuntu) 11178 MiB memory

Describe the current behavior
Calling model.predict(x, steps=N) on a tf.keras.Model instance with two inputs fails with many errors:

If the model is not compiled, I get a RuntimeError as follows:

&lt;denchmark-code&gt;RuntimeError: You must compile a model before training/testing. Use `model.compile(optimizer, loss)`.
&lt;/denchmark-code&gt;


If I do compile the model (even though this is not necessary, since predict should not compute any losses), I get a ValueError (see ds1 below):

&lt;denchmark-code&gt;ValueError: Error when checking model input: the list of Numpy arrays that you are passing to your model is not the size the model expected. Expected to see 2 array(s), but instead got the following list of 1 arrays: [&lt;tf.Tensor 'IteratorGetNext_2:0' shape=(?, 28, 28, 1) dtype=float32&gt;]...
&lt;/denchmark-code&gt;


If I further provide a target in the dataset (see ds2 below), the predict method works and produces an output of the correct shape.

Describe the expected behavior
Calling model.predict(x, steps=N) on both an uncompiled (1) and compiled (2)tf.keras.Model should produce a list of numpy arrays corresponding to the outputs of the model without any errors.

This test case is modified from &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/23702&gt;#23702&lt;/denchmark-link&gt;
 to include multiple model inputs. The issue described there seems to be related, but not identical to this one. In particular, the fixes introduced in , that were mentioned, do not resolve the issue for this test case.
import numpy as np
import tensorflow as tf

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()
x_test = x_test.reshape((10000, 28, 28, 1)).astype(np.float32)
y_test = tf.keras.utils.to_categorical(y=y_test)

x1 = tf.keras.layers.Input((28, 28, 1), dtype=tf.float32)
conv1 = tf.keras.layers.Conv2D(8, kernel_size=3, activation='relu')
flat1 = tf.keras.layers.Flatten()

x2 = tf.keras.layers.Input((28, 28, 1), dtype=tf.float32)
conv2 = tf.keras.layers.Conv2D(8, kernel_size=3, activation='relu')
flat2 = tf.keras.layers.Flatten()

concat = tf.keras.layers.Concatenate()
proj = tf.keras.layers.Dense(10, activation='softmax')

m = tf.keras.models.Model([x1, x2], proj(concat([flat1(conv1(x1)), flat2(conv2(x2))])))
m.compile('adam', 'mse')

ds = tf.data.Dataset.from_tensor_slices(x_test)
ds1 = tf.data.Dataset.zip((ds, ds))
ds2 = tf.data.Dataset.zip((ds1, tf.data.Dataset.from_tensor_slices(y_test)))
output = m.predict(x=ds1.batch(batch_size=10), steps=1000, verbose=True)  # fails with ValueError
output = m.predict(x=ds2.batch(batch_size=10), steps=1000, verbose=True)  # works
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
&lt;denchmark-code&gt;ValueError                                Traceback (most recent call last)
&lt;ipython-input-1-e5c6dc2477e5&gt; in &lt;module&gt;
     23 ds = ds.batch(batch_size=10)
     24 data = ds.make_one_shot_iterator()
---&gt; 25 output = m.predict(x=data, steps=1000, verbose=True)

~/.virtualenvs/python3.6/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py in predict(self, x, batch_size, verbose, steps, max_queue_size, workers, use_multiprocessing)
   1094       # batch size.
   1095       x, _, _ = self._standardize_user_data(
-&gt; 1096           x, check_steps=True, steps_name='steps', steps=steps)
   1097
   1098     if (self.run_eagerly or (isinstance(x, iterator_ops.EagerIterator) and

~/.virtualenvs/python3.6/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py in _standardize_user_data(self, x, y, sample_weight, class_weight, batch_size, check_steps, steps_name, steps, validation_split, shuffle)
   2380         feed_input_shapes,
   2381         check_batch_axis=False,  # Don't enforce the batch size.
-&gt; 2382         exception_prefix='input')
   2383
   2384     if y is not None:

~/.virtualenvs/python3.6/lib/python3.6/site-packages/tensorflow/python/keras/engine/training_utils.py in standardize_input_data(data, names, shapes, check_batch_axis, exception_prefix)
    321                        'Expected to see ' + str(len(names)) + ' array(s), '
    322                        'but instead got the following list of ' +
--&gt; 323                        str(len(data)) + ' arrays: ' + str(data)[:200] + '...')
    324     elif len(names) &gt; 1:
    325       raise ValueError(

ValueError: Error when checking model input: the list of Numpy arrays that you are passing to your model is not the size the model expected. Expected to see 2 array(s), but instead got the following list of 1 arrays: [&lt;tf.Tensor 'IteratorGetNext:0' shape=(?, 28, 28, 1) dtype=float32&gt;]...```
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='atomberg' date='2019-05-23T06:10:10Z'>
		I am able to reproduce the issue reported here.
		</comment>
		<comment id='2' author='atomberg' date='2019-06-27T16:46:47Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 please assign this to someone familiar with Keras, thank you
		</comment>
		<comment id='3' author='atomberg' date='2019-08-27T23:33:59Z'>
		&lt;denchmark-link:https://github.com/atomberg&gt;@atomberg&lt;/denchmark-link&gt;
 This is intended behavior.  has two inputs and 10 outputs.
In , dataset understands that first  is  and second  is . However, your  requires two elements as input (x_train) whereas you are providing a single element. In case of  you are correctly proving two elements as  and hence there is no error. Please &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/720b7c6ae0ce81da1af47a18a8922faf/tf_28912_keras_dataset.ipynb&gt;check the updated code&lt;/denchmark-link&gt;
 that runs without any issue.
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()
x_test = x_test.reshape((10000, 28, 28, 1)).astype(np.float32)
y_test = tf.keras.utils.to_categorical(y=y_test)

x1 = tf.keras.layers.Input((28, 28, 1), dtype=tf.float32)
conv1 = tf.keras.layers.Conv2D(8, kernel_size=3, activation='relu')
flat1 = tf.keras.layers.Flatten()

x2 = tf.keras.layers.Input((28, 28, 1), dtype=tf.float32)
conv2 = tf.keras.layers.Conv2D(8, kernel_size=3, activation='relu')
flat2 = tf.keras.layers.Flatten()

concat = tf.keras.layers.Concatenate()
proj = tf.keras.layers.Dense(10, activation='softmax')

m = tf.keras.models.Model([x1, x2], proj(concat([flat1(conv1(x1)), flat2(conv2(x2))])))
m.compile('adam', 'mse')

m2 = tf.keras.models.Model([x1], proj(concat([flat1(conv1(x1)), flat2(conv2(x1))])))
m2.compile('adam', 'mse')

ds = tf.data.Dataset.from_tensor_slices(x_test)
ds1 = tf.data.Dataset.zip((ds, ds))
ds2 = tf.data.Dataset.zip((ds1, tf.data.Dataset.from_tensor_slices(y_test)))
output = m2.predict(x=ds1.batch(batch_size=10), steps=1000, verbose=True)  # also works
output = m.predict(x=ds2.batch(batch_size=10), steps=1000, verbose=True)  # works
&lt;/denchmark-code&gt;

I am closing the issue as it was resolved. Please feel free to open it if the issue persists again. Thanks!
		</comment>
		<comment id='4' author='atomberg' date='2019-08-27T23:34:02Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28912&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28912&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='atomberg' date='2019-08-28T01:41:25Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 Could you confirm that the following two behaviours are indeed intended:

An uncompiled model cannot be used in predict mode with a dataset as input.
A tensor for the y_true placeholder must be provided in the dataset used in the predict function, even though its value is never read (like the ds2 in the example above).

If the answer to any one of the above questions is no, please reopen the issue. Thanks!
		</comment>
	</comments>
</bug>