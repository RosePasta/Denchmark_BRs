<bug id='40912' author='d-miketa' open_date='2020-06-29T12:57:45Z' closed_time='2020-07-01T20:56:11Z'>
	<summary>save_model() fails with custom layer and SavedModel format</summary>
	<description>

Have I written custom code: Yes
OS Platform and Distribution: MacOS 10.15.5, running an official Docker image
TensorFlow version (use command below): v2.2.0-rc4-8-g2b96f3662b 2.2.0
Python version: 3.6.9
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Current behavior
I have defined a custom Keras layer which acts as a learnable lookup table. The layer is functional and learns throughout training. I am able to save the Keras model using both model.save('/path/to/dir') and model.save('/path/to/dir/model.h5').

However, tf.keras.models.load_model('/path/to/dir') fails whereas the H5 model seems to load properly with tf.keras.models.load_model('/path/to/dir/model.h5', custom_objects = {"Lookup": Lookup}). Passing custom_objects to the SavedModel call (without .h5) makes no difference.
You can see in the logs that the SavedModel loader doesn't know the lookup table's shape.
Describe the expected behavior
Both save/load implementations should work.
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf

class Lookup(tf.keras.layers.Layer):
    def __init__(self, depth: int = 3, **kwargs):
        super().__init__(**kwargs)

        self.depth = depth
        self.texture = None

    def build(self, input_shape):
        lookup_shape = input_shape[1:-1] + [self.depth]

        self.lookup_table = self.add_weight('lookup_table', lookup_shape, 'float32',
                                       initializer='random_normal',
                                       trainable=True)
        super().build(input_shape)

    def call(self, inputs, **kwargs):
        entries = tf.gather_nd(params=self.lookup_table,
                                      indices=inputs,
                                      name='lookup_call')

        return entries

    def get_config(self):
        config = super().get_config()
        config.update({"depth": self.depth})
        return config
    
custom_objects = {"Lookup": Lookup}

lookup = Lookup()

x = tf.keras.Input(shape=(2,2), dtype='int32')
y = lookup(x)
model = tf.keras.Model(x, y)
model.compile()

model.save('/tmp/lookup_test')
loaded_model = tf.keras.models.load_model('/tmp/lookup_test', custom_objects=custom_objects)
&lt;/denchmark-code&gt;

Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
&lt;denchmark-code&gt;WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py:1817: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.
Instructions for updating:
If using Keras pass *_constraint arguments to layers.
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
In  [1]:
Line 40:    loaded_model = tf.keras.models.load_model('/tf/external/model/lookup_test', custom_objects=custom_objects)

File /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/saving/save.py, in load_model:
Line 190:   return saved_model_load.load(filepath, compile)

File /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/saving/saved_model/load.py, in load:
Line 116:   model = tf_load.load_internal(path, loader_cls=KerasObjectLoader)

File /usr/local/lib/python3.6/dist-packages/tensorflow/python/saved_model/load.py, in load_internal:
Line 604:   export_dir)

File /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/saving/saved_model/load.py, in __init__:
Line 188:   super(KerasObjectLoader, self).__init__(*args, **kwargs)

File /usr/local/lib/python3.6/dist-packages/tensorflow/python/saved_model/load.py, in __init__:
Line 116:   meta_graph.graph_def.library))

File /usr/local/lib/python3.6/dist-packages/tensorflow/python/saved_model/function_deserialization.py, in load_function_def_library:
Line 311:   func_graph = function_def_lib.function_def_to_graph(copy)

File /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/function_def_to_graph.py, in function_def_to_graph:
Line 63:    importer.import_graph_def_for_function(graph_def, name="")

File /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/importer.py, in import_graph_def_for_function:
Line 412:   graph_def, validate_colocation_constraints=False, name=name)

File /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/importer.py, in _import_graph_def_internal:
Line 501:   raise ValueError(str(e))

ValueError: indices.shape[-1] must be &lt;= params.rank, but saw indices shape: [?,2,2] and params shape: [] for '{{node lookup/lookup_call}} = ResourceGatherNd[Tindices=DT_INT32, _output_shapes=[[?,2]], dtype=DT_FLOAT](lookup_lookup_call_resource:0, inputs:0)' with input shapes: [], [?,2,2].
---------------------------------------------------------------------------
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='d-miketa' date='2020-06-30T09:57:04Z'>
		&lt;denchmark-link:https://github.com/d-miketa&gt;@d-miketa&lt;/denchmark-link&gt;

I ran the above shared code, please let us know if it confirms your issue in &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/ce787da4cbb70576093192a91dcb1ca0/untitled249.ipynb&gt;this gist&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='d-miketa' date='2020-06-30T10:00:32Z'>
		Thanks for sharing the Colab, that's the exact error I'm seeing at my end.
		</comment>
		<comment id='3' author='d-miketa' date='2020-06-30T14:16:54Z'>
		&lt;denchmark-link:https://github.com/d-miketa&gt;@d-miketa&lt;/denchmark-link&gt;

Please refer to below links and let us know if it helps.
&lt;denchmark-link:https://stackoverflow.com/questions/44174566/tensorflow-error-when-indexing-a-4d-array-valueerror-shapes-must-be-equal-rank&gt;link&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/broadinstitute/keras-rcnn/issues/171&gt;link1&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='d-miketa' date='2020-07-01T12:29:52Z'>
		No, those don't (directly) apply to my issue, which arises when loading the model. It works perfectly fine before the save/load cycle.
		</comment>
		<comment id='5' author='d-miketa' date='2020-07-01T19:52:41Z'>
		&lt;denchmark-link:https://github.com/d-miketa&gt;@d-miketa&lt;/denchmark-link&gt;
 Looks like this was resolved in recent . &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/3275621021abd75da56ca3482ffd9753/untitled249.ipynb&gt;Here&lt;/denchmark-link&gt;
 a gist for your reference.
Please verify once and close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='6' author='d-miketa' date='2020-07-01T20:56:11Z'>
		
@d-miketa Looks like this was resolved in recent tf-nightly. Here a gist for your reference.
Please verify once and close the issue if this was resolved for you. Thanks!

Yes, it works! Wonderful, thank you â€“ I'll just wait for 2.3 then. :)
		</comment>
		<comment id='7' author='d-miketa' date='2020-07-01T20:56:12Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40912&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40912&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>