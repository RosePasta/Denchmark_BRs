<bug id='24912' author='aisolab' open_date='2019-01-15T01:53:59Z' closed_time='2019-08-28T00:40:51Z'>
	<summary>When passing tf.data.Dataset instance to model.predict method which is instantiated by tf.keras.Sequential, tf.keras.Model, subclassing tf.keras.Model, return of model.predict is different from return of model.call</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS Mojave 10.14.2
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.12.0
Python version: 3.6.6

You can collect some of this information using our environment capture &lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
Describe the current behavior
When passing tf.data.Dataset instance to model.predict method which is instantiated by tf.keras.Sequential, tf.keras.Model, subclassing tf.keras.Model, return of model.predict is different from return of model.call
Code to reproduce the issue
import numpy as np
import tensorflow as tf
from tensorflow import keras
1.12.0
x = np.random.randn(60,30).astype(np.float32)
y = np.random.randint(low=0, high=10, size = 60).astype(np.int32)

x_tr = x[0:20]
y_tr = y[0:20]
x_val = x[20:40]
y_val = y[20:40]
x_tst = x[40:60]
y_tst = y[40:60]

print(x_tr.shape, y_tr.shape)
print(x_val.shape, y_val.shape)
print(x_tst.shape, y_tst.shape)


tr_dataset = tf.data.Dataset.from_tensor_slices((x_tr,y_tr))
tr_dataset = tr_dataset.batch(batch_size=4).repeat()
val_dataset = tf.data.Dataset.from_tensor_slices((x_val,y_val))
val_dataset = tr_dataset.batch(batch_size=4).repeat()
tst_dataset = tf.data.Dataset.from_tensor_slices((x_tst,y_tst))
tst_dataset = tst_dataset.batch(batch_size=4)

print(tr_dataset)
print(val_dataset)
print(tst_dataset)
(20, 30) (20,)
(20, 30) (20,)
(20, 30) (20,)
&lt;RepeatDataset shapes: ((?, 30), (?,)), types: (tf.float32, tf.int32)&gt;
&lt;RepeatDataset shapes: ((?, ?, 30), (?, ?)), types: (tf.float32, tf.int32)&gt;
&lt;BatchDataset shapes: ((?, 30), (?,)), types: (tf.float32, tf.int32)&gt;
class Model(keras.Model):
    def __init__(self, num_classes):
        super(Model, self).__init__()
        self.dense = keras.layers.Dense(units=10, activation='softmax')
    def call(self, inputs):
        score = self.dense(inputs)
        return score
  
model = Model(10)
model.compile(optimizer=tf.train.GradientDescentOptimizer(.1),
              loss=keras.losses.sparse_categorical_crossentropy)
model.fit(tr_dataset, epochs=5, steps_per_epoch=20//4,
          validation_data=val_dataset, validation_steps=20//4)
Epoch 1/5
5/5 [==============================] - 0s 36ms/step - loss: 2.5626 - val_loss: 1.9200
Epoch 2/5
5/5 [==============================] - 0s 2ms/step - loss: 1.9345 - val_loss: 1.4256
Epoch 3/5
5/5 [==============================] - 0s 2ms/step - loss: 1.4506 - val_loss: 1.0624
Epoch 4/5
5/5 [==============================] - 0s 1ms/step - loss: 1.0906 - val_loss: 0.8049
Epoch 5/5
5/5 [==============================] - 0s 2ms/step - loss: 0.8314 - val_loss: 0.6274
# yhat_from_call_method
sess = keras.backend.get_session()
x_tst_tensor = tf.convert_to_tensor(x_tst)
yhat_from_call_method = sess.run(model(x_tst_tensor))
yhat_from_call_method = np.argmax(yhat_from_call_method, axis = -1)
print(yhat_from_call_method)
[7 4 7 1 8 8 3 4 8 9 8 4 0 7 1 7 4 3 0 0]
# yhat_from_predict_method 
yhat_from_predict_method = model.predict(tst_dataset, steps=20//4)
yhat_from_predict_method = np.argmax(yhat_from_predict_method, axis =-1)
print(yhat_from_predict_method)
[8 4 2 4 1 8 4 8 8 7 6 1 9 1 1 3 6 5 4 1]
print(yhat_from_call_method == yhat_from_predict_method)
[False  True False False False  True False False  True False False False
 False False  True False False False False False]
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='aisolab' date='2019-04-05T11:00:03Z'>
		Facing a similar issue with LSTM in both v1.13.1 and 2.0.0-alpha0. I have tried both eager_execution and Session api. A simple code to reproduce the issue, where first predictions are same for both, but consecutive predictions are not:
&lt;denchmark-link:https://colab.research.google.com/drive/1D-kgD7NiRXTNTNwVr18H8C-edaL2zpqw&gt;https://colab.research.google.com/drive/1D-kgD7NiRXTNTNwVr18H8C-edaL2zpqw&lt;/denchmark-link&gt;

I have verified that predictions from the call function are valid, but not those from predict.
		</comment>
		<comment id='2' author='aisolab' date='2019-08-28T00:40:51Z'>
		&lt;denchmark-link:https://github.com/aisolab&gt;@aisolab&lt;/denchmark-link&gt;
 Sorry for the late response. This is not a bug in tensorflow.
If you replace the following line in your code
&lt;denchmark-code&gt;tr_dataset = tf.data.Dataset.from_tensor_slices((x_tr,y_tr))
tr_dataset = tr_dataset.batch(batch_size=4).repeat()
val_dataset = tf.data.Dataset.from_tensor_slices((x_val,y_val))
val_dataset = tr_dataset.batch(batch_size=4).repeat()
tst_dataset = tf.data.Dataset.from_tensor_slices((x_tst,y_tst))
tst_dataset = tst_dataset.batch(batch_size=4)
&lt;/denchmark-code&gt;

The following will work without any issue.
&lt;denchmark-code&gt;tr_dataset = tf.data.Dataset.from_tensor_slices((x_tr,y_tr)).batch(batch_size=4).repeat()
#tr_dataset = tr_dataset.batch(batch_size=4).repeat()
val_dataset = tf.data.Dataset.from_tensor_slices((x_val,y_val)).batch(batch_size=4).repeat()
#val_dataset = tr_dataset.batch(batch_size=4).repeat()
tst_dataset = tf.data.Dataset.from_tensor_slices((x_tst,y_tst)).batch(batch_size=4)
#tst_dataset = tst_dataset.batch(batch_size=4)
&lt;/denchmark-code&gt;

Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/f0c6d3f471c3706d52c328a8903dfb50/tf_24912_dataset.ipynb&gt;gist here&lt;/denchmark-link&gt;
.
I am closing the issue as it was resolved. Please feel free to open it if the issue persists again. Thanks!
		</comment>
		<comment id='3' author='aisolab' date='2019-08-28T00:40:52Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=24912&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=24912&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='aisolab' date='2020-11-20T17:21:38Z'>
		Ao repetir a rotina para " yhat_from_call_method" tive como resposta: RuntimeError: get_session is not available when using TensorFlow 2.0. Existe uma rotina que fa√ßa a mesma coisa no TensorFlow 2.0?
		</comment>
	</comments>
</bug>