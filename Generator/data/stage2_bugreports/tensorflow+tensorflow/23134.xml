<bug id='23134' author='kedartatwawadi' open_date='2018-10-20T22:25:25Z' closed_time='2019-02-08T00:09:51Z'>
	<summary>AttributeError: 'CuDNNLSTM' object has no attribute '_num_inputs' | Tflite</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04 (I think), I used the nightly docker:
docker run --runtime=nvidia -it tensorflow/tensorflow:nightly-gpu-py3 bash
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No
TensorFlow installed from (source or binary): docker:
docker run --runtime=nvidia -it tensorflow/tensorflow:nightly-gpu-py3 bash
TensorFlow version (use command below): nightly (v1.12.0-rc0-1214-g6802f29084' 1.13.0-dev20181020)
Python version: py3
Bazel version (if compiling from source): NA
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version:
GPU model and memory:

You can collect some of this information using our environment capture &lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
Describe the current behavior
I am trying to convert a model.h5 keras model using tflite. Command used:
tflite_convert --output_file=./model_tflite --keras_model_file=./model.h5 
Error:
root@7580fbf40640:/DNA_Compression/encoder_decoder# tflite_convert --output_file=./model_tflite --keras_model_file=./model.h5 Traceback (most recent call last): File "/usr/local/bin/tflite_convert", line 11, in &lt;module&gt; sys.exit(main()) File "/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/lite/python/tflite_convert.py", line 412, in main app.run(main=run_main, argv=sys.argv[:1]) File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/platform/app.py", line 125, in run _sys.exit(main(argv)) File "/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/lite/python/tflite_convert.py", line 408, in run_main _convert_model(tflite_flags) File "/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/lite/python/tflite_convert.py", line 100, in _convert_model converter = _get_toco_converter(flags) File "/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/lite/python/tflite_convert.py", line 87, in _get_toco_converter return converter_fn(**converter_kwargs) File "/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/lite/python/lite.py", line 368, in from_keras_model_file keras_model = _keras.models.load_model(model_file) File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/saving.py", line 230, in load_model model = model_from_config(model_config, custom_objects=custom_objects) File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/saving.py", line 310, in model_from_config return deserialize(config, custom_objects=custom_objects) File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/serialization.py", line 64, in deserialize printable_module_name='layer') File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/utils/generic_utils.py", line 173, in deserialize_keras_object list(custom_objects.items()))) File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/sequential.py", line 340, in from_config model.add(layer) File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/checkpointable/base.py", line 474, in _method_wrapper method(self, *args, **kwargs) File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/sequential.py", line 175, in add output_tensor = layer(self.outputs[0]) File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/recurrent.py", line 706, in __call__ self._num_inputs) AttributeError: 'CuDNNLSTM' object has no attribute '_num_inputs' 
Describe the expected behavior
Ideally there should be no error, as it is a model which works fine in keras (TF backend)
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
`root@7580fbf40640:/DNA_Compression/encoder_decoder# tflite_convert --output_file=./model_tflite --keras_model_file=./model.h5'
(I can upload the model somewhere, if needed!)
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='kedartatwawadi' date='2018-10-22T01:14:42Z'>
		Thank you for your post. We noticed you have not filled out the following field in the issue template. Could you update them if they are relevant in your case, or leave them as N/A? Thanks.
Exact command to reproduce
		</comment>
		<comment id='2' author='kedartatwawadi' date='2018-10-22T17:34:57Z'>
		&lt;denchmark-link:https://github.com/kedartatwawadi&gt;@kedartatwawadi&lt;/denchmark-link&gt;
  -  Hi, thanks for the post. Please refer &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/20878&gt;#20878&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='kedartatwawadi' date='2018-10-30T22:50:51Z'>
		&lt;denchmark-link:https://github.com/kedartatwawadi&gt;@kedartatwawadi&lt;/denchmark-link&gt;
  -  Hi, is this still an issue ?
		</comment>
		<comment id='4' author='kedartatwawadi' date='2018-11-01T06:10:42Z'>
		I am able to run the TFLite tool (using the nightly build) with FullyConnected layers. But, on adding embedding and LSTM layers, TFLite is giving issues. are LSTMs currently unsupported?
My model details:
       model = Sequential() model.add(Embedding(alphabet_size, 32, batch_input_shape=(bs, time_steps))) model.add(Bidirectional(CuDNNLSTM(32, stateful=False, return_sequences=True))) model.add(Bidirectional(CuDNNLSTM(32, stateful=False, return_sequences=False))) model.add(Dense(64, activation='relu')) model.add(Dense(alphabet_size, activation='softmax'))
		</comment>
		<comment id='5' author='kedartatwawadi' date='2019-02-08T00:09:51Z'>
		LSTMs are currently hard to convert, we are actively working on this. We have a workaround here: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/experimental/examples/lstm/unidirectional_sequence_lstm_test.py&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/experimental/examples/lstm/unidirectional_sequence_lstm_test.py&lt;/denchmark-link&gt;

Will close this issue since this is the current path, but future simpler paths will be added. Thanks!
		</comment>
	</comments>
</bug>