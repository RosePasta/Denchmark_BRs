<bug id='30310' author='xlambein' open_date='2019-07-02T12:55:21Z' closed_time='2019-07-08T21:33:53Z'>
	<summary>[TensorFlow 2.0] Automated naming of keras metric layers is not consistent</summary>
	<description>
System information

Have I written custom code: yes
OS Platform and Distribution: Mac OS X 10.14.5
TensorFlow installed from: binary
TensorFlow version: v2.0.0-beta0-16-g1d91213fe7 2.0.0-beta1
Python version: 3.6.8
CUDA/cuDNN version: don't have a GPU
GPU model and memory: don't have a GPU

Describe the current behavior
The automatic naming of Keras metric layers is not consistent.  Example, if I create two BinaryAccuracy metrics:
&gt;&gt;&gt; tf.keras.metrics.BinaryAccuracy().name
'binary_accuracy'
&gt;&gt;&gt; tf.keras.metrics.BinaryAccuracy().name
'binary_accuracy'
Whereas, if I create two Recall metrics:
&gt;&gt;&gt; tf.keras.metrics.Recall().name
'recall'
&gt;&gt;&gt; tf.keras.metrics.Recall().name
'recall_1'
After testing every metric class in tf.keras.metrics, I found that the same behavior as Recall is produced by the following metrics:

AUC
FalseNegatives
FalsePositives
MeanIoU
MeanRelativeError
Precision
Recall
SensitivityAtSpecificity
SpecificityAtSensitivity
TrueNegatives
TruePositives

Describe the expected behavior
Either all the metrics should be created with the exact same name, or they should all have an integer added to the end of the second metric with that name.
Code to reproduce the issue
Here's my code that lists all the classes in tf.keras.metrics that have different names when instanciated twice:
import tensorflow as tf
import inspect

for name, metric in tf.keras.metrics.__dict__.items():
    if inspect.isclass(metric):  # It's a metric keras layer
        args = ()
        if name == 'MeanIoU':
            args = (2,)
        elif name == 'MeanRelativeError':
            args = ([1],)
        elif name == 'Metric':
            continue
        elif name == 'SensitivityAtSpecificity':
            args = (0.5,)
        elif name == 'SpecificityAtSensitivity':
            args = (0.5,)

        layer_name_0 = metric(*args).name
        layer_name_1 = metric(*args).name

        if layer_name_0 != layer_name_1:  # Two same metrics don't have the same name
            print('-', name)
	</description>
	<comments>
		<comment id='1' author='xlambein' date='2019-07-03T06:43:33Z'>
		I am able to reproduce the issue on Colab with Tensorflow 2.0.0.beta1. Thanks!
		</comment>
		<comment id='2' author='xlambein' date='2019-07-03T22:21:55Z'>
		I think this is intended behavior.  Referring to says  documentation it says &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/metrics/Recall#__init__&gt;Creates a Recall instance.&lt;/denchmark-link&gt;

Whereas for  the name: Accuracy is hard coded.
Same can apply to the other metrics as well.
		</comment>
		<comment id='3' author='xlambein' date='2019-07-08T21:33:53Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='4' author='xlambein' date='2019-07-08T21:33:54Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30310&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30310&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>