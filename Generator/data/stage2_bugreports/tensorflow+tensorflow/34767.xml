<bug id='34767' author='wkelongws' open_date='2019-12-02T18:44:20Z' closed_time='2020-04-08T00:20:05Z'>
	<summary>Error when retraining a saved LSTM model</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
I have a simple and functional custom code to reproduce the issue.


OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Linux Ubuntu 18.04


TensorFlow installed from (source or binary):
conda install tensorflow-gpu=2.0.0


TensorFlow version (use command below):


python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"
v2.0.0-rc2-26-g64c3d38 2.0.0


Python version:
Python 3.7.4


CUDA/cuDNN version:
CUDA Version: 10.1
#define CUDNN_MAJOR 7


GPU model and memory:
nvidia Quadro GV100 - 32478MiB


You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

output env_info.sh attached.
Describe the current behavior

Train a simple LSTM model using tf.keras API
save the model to file as SavedModel format. model.save('saved_model', save_format='tf')
In a separate script (without access to the model definition), load the saved model: model = tf.keras.models.load_model('saved_model1')
continue training the reloaded model: model.fit(data_x,data_y,batch_size=64,epochs=2)
The following error encountered:

LookupError: No gradient defined for operation 'while' (op type: While)
Describe the expected behavior
expect the LSTM SavedModel can be loaded and retrained in a separated script without access to the model definition.
Code to reproduce the issue
Script to train and save the model:
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np

def Model_Functional_API():

    inputs = tf.keras.Input(shape=(3, 2))
    encoder = tf.keras.layers.LSTM(10,return_sequences=True)
    encoder_outputs = encoder(inputs)
    projection_layer = tf.keras.layers.Dense(2)
    preds = projection_layer(encoder_outputs)
    model = tf.keras.Model(inputs,preds)

    return model

def Model_Sequence():

    model = tf.keras.Sequential()
    model.add(tf.keras.layers.LSTM(10,return_sequences=True))
    model.add(tf.keras.layers.Dense(2))

    return model

# model = Model_Functional_API()
model = Model_Sequence()
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
            loss='mean_squared_error')

data_x = np.random.random([64,3,2])
data_y = np.random.random([64,3,2])

model.fit(data_x,data_y,batch_size=64,epochs=2)

model.save('saved_model', save_format='tf')
# model.save('saved_model.h5')
&lt;/denchmark-code&gt;

Script to load and retrain the model (this is where the error encountered):
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np

model = tf.keras.models.load_model('saved_model')
# model = tf.keras.models.load_model('saved_model.h5')

data_x = np.random.random([64,3,2])
data_y = np.random.random([64,3,2])

model.fit(data_x,data_y,batch_size=64,epochs=2)
&lt;/denchmark-code&gt;

Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
 and the ouput error message are attached.
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3912802/error_log.txt&gt;error_log.txt&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3912803/tf_env.txt&gt;tf_env.txt&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='wkelongws' date='2019-12-03T05:29:54Z'>
		&lt;denchmark-link:https://github.com/wkelongws&gt;@wkelongws&lt;/denchmark-link&gt;
 ,
When tried running the code for I did not face any error, kindly find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/oanush/435a707fb7889d90926df9b79596f7f2/34767.ipynb&gt;link&lt;/denchmark-link&gt;
 of colab gist.Thanks!
		</comment>
		<comment id='2' author='wkelongws' date='2019-12-03T18:02:08Z'>
		&lt;denchmark-link:https://github.com/oanush&gt;@oanush&lt;/denchmark-link&gt;

"In a separate script (without access to the model definition)", load the saved model for retraining, then you would have the error.
In your colab link, after finishing the second cell, please restart runtime then try running JUST the third cell, that is where the aforementioned error occurred.
I expect the LSTM SavedModel can be loaded and retrained in a separated script without access to the model definition. In your colab link, restart runtime is for simulating that case.
		</comment>
		<comment id='3' author='wkelongws' date='2019-12-12T08:51:32Z'>
		&lt;denchmark-link:https://github.com/wkelongws&gt;@wkelongws&lt;/denchmark-link&gt;
 ,
Thank you, was able to reproduce the error. I have updated the link of gist.
		</comment>
		<comment id='4' author='wkelongws' date='2020-02-04T21:17:29Z'>
		Potentially duplicate of &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34211&gt;#34211&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='wkelongws' date='2020-02-18T19:31:31Z'>
		Is there any update on this ??
		</comment>
		<comment id='6' author='wkelongws' date='2020-02-19T00:21:07Z'>
		&lt;denchmark-link:https://github.com/wkelongws&gt;@wkelongws&lt;/denchmark-link&gt;
 On GPU, I can still reproduce the issue with . However, with CPU, there is no issue. Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/762bea845c3ce926e8dc93863f1b1b3e/untitled825.ipynb&gt;gist&lt;/denchmark-link&gt;
 with CPU.
Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/20a72b25a5c16f98438d30b08351d1fe/34767.ipynb&gt;gist&lt;/denchmark-link&gt;
 with GPU.
With GPU, the error is different from the reported error. Please check below for full error trace with tf-nightly-gpu. Thanks!
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-1-9ba863f98283&gt; in &lt;module&gt;()
      2 import numpy as np
      3 
----&gt; 4 model = tf.keras.models.load_model('saved_model')
      5 # model = tf.keras.models.load_model('saved_model.h5')
      6 

11 frames
/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py in _set_input_attrs(self, inputs)
   2479         input_shape = (None,)
   2480       else:
-&gt; 2481         input_shape = (None,) + tuple(inputs.shape[1:])
   2482       self._build_input_shape = input_shape
   2483 

AttributeError: 'list' object has no attribute 'shape' 
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='wkelongws' date='2020-02-20T00:49:54Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
  Thanks for the update.
By commenting/uncommenting the corresponding lines in the GPU gist that you provided above I got below findings:
scenario 1: model = Model_Functional_API()  +  model.save('saved_model', save_format='tf')
PASS
scenario 2: model = Model_Sequence()  +  model.save('saved_model', save_format='tf')
FAIL
scenario 3: model = Model_Functional_API()  +  model.save('saved_model.h5')
PASS
scenario 4: model = Model_Sequence()  +  model.save('saved_model.h5')
PASS
(Note: In each scenario, restart runtime then run JUST the third cell. Again, this is for mimicking a situation where the inference script has no access to the model definition.)
So looks like the tf-nightly-gpu fixed the previous No gradient defined for operation 'while' error but still have some bugs remaining with aforementioned scenario 2.
		</comment>
		<comment id='8' author='wkelongws' date='2020-03-03T22:46:05Z'>
		This issue still exists with scenario 2 mentioned above. The trace with recently tf-nightly is as follows. This trace is for our reference. Thanks!
&lt;denchmark-code&gt;---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/execute.py in make_shape(v, arg_name)
    210   try:
--&gt; 211     shape = tensor_shape.as_shape(v)
    212   except TypeError as e:

21 frames
TypeError: Dimension value must be integer or None or have an __index__ method, got TensorShape([None, None, 2])

During handling of the above exception, another exception occurred:

TypeError                                 Traceback (most recent call last)
/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/execute.py in make_shape(v, arg_name)
    211     shape = tensor_shape.as_shape(v)
    212   except TypeError as e:
--&gt; 213     raise TypeError("Error converting %s to a TensorShape: %s." % (arg_name, e))
    214   except ValueError as e:
    215     raise ValueError("Error converting %s to a TensorShape: %s." % (arg_name,

TypeError: Error converting shape to a TensorShape: Dimension value must be integer or None or have an __index__ method, got TensorShape([None, None, 2]).
&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='wkelongws' date='2020-03-23T20:17:33Z'>
		&lt;denchmark-link:https://github.com/wkelongws&gt;@wkelongws&lt;/denchmark-link&gt;
 Can you please check this issue. I think this was resolved for . I was not able to reproduce the issue. Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/20a72b25a5c16f98438d30b08351d1fe/34767.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
Please close the issue if this was resolved for you. thanks!
		</comment>
		<comment id='10' author='wkelongws' date='2020-04-02T15:23:28Z'>
		&lt;denchmark-link:https://github.com/wkelongws&gt;@wkelongws&lt;/denchmark-link&gt;
 Can you please confirm whether it is resolved for you. Thanks!
		</comment>
		<comment id='11' author='wkelongws' date='2020-04-08T00:20:05Z'>
		Closing this issue as this was resolved in recently tf-nightly. Please feel free to reopen if the issue persists again. Thanks!
		</comment>
		<comment id='12' author='wkelongws' date='2020-04-08T00:20:07Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34767&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34767&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='wkelongws' date='2020-04-28T16:36:28Z'>
		Hi, I am having the same issue while trying to load a model with multiple inputs.
&lt;denchmark-link:https://user-images.githubusercontent.com/33988623/80512979-a415d400-897e-11ea-945f-0fcf4d4e7af4.png&gt;&lt;/denchmark-link&gt;


I save the whole model with a ModelCheckpoint callback

&lt;denchmark-code&gt;cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,
                                                  save_weights_only=False,
                                                  verbose=0,
                                                  save_freq=4542*10)
&lt;/denchmark-code&gt;


In a new colab session I try to load it with

&lt;denchmark-code&gt;checkpoint_dir = os.path.dirname(checkpoint_path)
model = tf.keras.models.load_model(checkpoint_dir)
&lt;/denchmark-code&gt;

The trace:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/execute.py in make_shape(v, arg_name)
    210   try:
--&gt; 211     shape = tensor_shape.as_shape(v)
    212   except TypeError as e:

22 frames
TypeError: Dimension value must be integer or None or have an __index__ method, got TensorShape([None, 2048])

During handling of the above exception, another exception occurred:

TypeError                                 Traceback (most recent call last)
/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/execute.py in make_shape(v, arg_name)
    211     shape = tensor_shape.as_shape(v)
    212   except TypeError as e:
--&gt; 213     raise TypeError("Error converting %s to a TensorShape: %s." % (arg_name, e))
    214   except ValueError as e:
    215     raise ValueError("Error converting %s to a TensorShape: %s." % (arg_name,

TypeError: Error converting shape to a TensorShape: Dimension value must be integer or None or have an __index__ method, got TensorShape([None, 2048]).
&lt;/denchmark-code&gt;

		</comment>
		<comment id='14' author='wkelongws' date='2020-04-28T16:59:52Z'>
		&lt;denchmark-link:https://github.com/pabloi09&gt;@pabloi09&lt;/denchmark-link&gt;
 Can you please open a new issue and provide a simple standalone code to reproduce the error. Thanks!
		</comment>
		<comment id='15' author='wkelongws' date='2020-04-29T07:38:24Z'>
		Done ! &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/39013&gt;#39013&lt;/denchmark-link&gt;

		</comment>
		<comment id='16' author='wkelongws' date='2020-05-12T14:21:17Z'>
		
@jvishnuvardhan Thanks for the update.
By commenting/uncommenting the corresponding lines in the GPU gist that you provided above I got below findings:
scenario 1: model = Model_Functional_API() + model.save('saved_model', save_format='tf')
PASS
scenario 2: model = Model_Sequence() + model.save('saved_model', save_format='tf')
FAIL
scenario 3: model = Model_Functional_API() + model.save('saved_model.h5')
PASS
scenario 4: model = Model_Sequence() + model.save('saved_model.h5')
PASS
(Note: In each scenario, restart runtime then run JUST the third cell. Again, this is for mimicking a situation where the inference script has no access to the model definition.)
So looks like the tf-nightly-gpu fixed the previous No gradient defined for operation 'while' error but still have some bugs remaining with aforementioned scenario 2.

I installed "tf-nightly-gpu" and checked scenario 3: model = Model_Functional_API() + model.save('saved_model.h5').
It is really work, thanks!
But, fit after loading model became very slow.
When i create model like "modelC = Model(inputs=[if1,if2,if3,if4], outputs=out)", fit from cold start was about 4-5 min, on next fit it was 3 min.
Fit on loaded model show ETA about 30 min.
Recompiliing after load has no effect.
		</comment>
		<comment id='17' author='wkelongws' date='2020-06-09T20:57:35Z'>
		I also had issue descibed by &lt;denchmark-link:https://github.com/pabloi09&gt;@pabloi09&lt;/denchmark-link&gt;
  (TypeError when trying to save/load Sequential model starting with concat layer, and taking list of tensors as input). But then I noticed new warning (it seems that this warning has appeared only in tf 2.2):

I have replaced Sequential model with Functional API Model and TypeError during model_load was solved.
		</comment>
	</comments>
</bug>