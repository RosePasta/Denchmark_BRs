<bug id='30355' author='mketcha' open_date='2019-07-03T14:12:27Z' closed_time='2020-03-15T05:39:13Z'>
	<summary>[TF 2.0 keras] tf.keras.Concatenate Graph Disconnected when concatenating non-sequentially</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): Binary, pip install
TensorFlow version (use command below): tensorflow-gpu==2.0.0-beta1
Python version: 3.6
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
Error arises during Concatenate when I run the following code:
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Conv2D, Concatenate

inputs = keras.Input(shape=(256,256,3))
x  = Conv2D(16,3, padding='same',activation='relu')(inputs)
x_list = [x]
for i in range(3):
    x = Conv2D(16,3, padding='same',activation='relu')(x)
    x_list.append(x)
    x = Concatenate(3)(x_list)

model = keras.Model(inputs=inputs, outputs=x)
model.summary()
&lt;/denchmark-code&gt;

ValueError: Graph disconnected: cannot obtain value for tensor Tensor("conv2d_31/Identity:0", shape=(None, 256, 256, 16), dtype=float32) at layer "concatenate_8". The following previous layers were accessed without issue: ['input_9', 'conv2d_29', 'conv2d_30']
This issue does not occur in a Tensorflow 1.X environment, only TF 2.0
Describe the expected behavior
Now the Concatenate function works properly when using a sequential model. That is, if I swap in "for i in range(1):" rather than "for i in range(3):" above, the code executes cleanly. However, the non-sequential repeated Concatenation in the loop leaves the  a Graph disconnected error.
Furthermore, the error is also eliminated when using tf.concat, so the following code also executes cleanly.
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Conv2D, Concatenate

inputs = keras.Input(shape=(256,256,3))
x  = Conv2D(16,3, padding='same',activation='relu')(inputs)
x_list = [x]
for i in range(3):
    x = Conv2D(16,3, padding='same',activation='relu')(x)
    x_list.append(x)
    x = tf.concat(x_list, 3)

model = keras.Model(inputs=inputs, outputs=x)
model.summary()
&lt;/denchmark-code&gt;

Therefore, I do have a working alternative, but there does appear to be an issue with the keras Concatenate function
	</description>
	<comments>
		<comment id='1' author='mketcha' date='2019-07-04T08:32:25Z'>
		&lt;denchmark-link:https://github.com/mketcha&gt;@mketcha&lt;/denchmark-link&gt;
 Just to verify, Which Concatenate function of Keras did you use.I could find tf.keras.backend.concatenate and tf.keras.layers.Concatenate on Tensorflow website. Thanks!
		</comment>
		<comment id='2' author='mketcha' date='2019-07-04T08:43:34Z'>
		&lt;denchmark-link:https://github.com/mketcha&gt;@mketcha&lt;/denchmark-link&gt;
 If it is tf.keras.layers.Concatenate then Concatenate function takes at least two list and syntax will be

Let us know if this helps. Thanks!
		</comment>
		<comment id='3' author='mketcha' date='2019-07-05T14:45:35Z'>
		It is the tf.keras.layers.Concatenate.
I don't believe it is an issue with my arguments as analagous code works in tensorflow 1.13, and the argument passes cleanly if I use "for i in range(1):"
It seems to be an issue with passing an argument that had previously already been used in a concatenation call
		</comment>
		<comment id='4' author='mketcha' date='2019-08-01T16:27:08Z'>
		same error here,
but the tf.concat works as a workaround as &lt;denchmark-link:https://github.com/mketcha&gt;@mketcha&lt;/denchmark-link&gt;
 mentioned
		</comment>
		<comment id='5' author='mketcha' date='2019-10-02T23:11:03Z'>
		&lt;denchmark-link:https://github.com/mketcha&gt;@mketcha&lt;/denchmark-link&gt;
 I changed one line in your code to append all the three layers to  and then applied  and the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/d6f7c83b0315f3051023e8f915cce1ba/untitled527.ipynb&gt;gist is here&lt;/denchmark-link&gt;
. With that modification, it runs without any error.
&lt;denchmark-h:h2&gt;I have also plotted the model and is shown below.&lt;/denchmark-h&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/46058173/66087634-00219280-e52d-11e9-9f42-f3c9531d1c34.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;When I plot your workaround using tf.concat(), model looks like this shown below. Note that number of training params also increases (more than double)&lt;/denchmark-h&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/46058173/66088214-306a3080-e52f-11e9-829f-99276d476d3e.png&gt;&lt;/denchmark-link&gt;

Please let us know what you think. If this was resolved, please close the issue. Thanks!
		</comment>
		<comment id='6' author='mketcha' date='2019-10-04T17:57:19Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 While your workaround may run, it does not achieve the same desired architecture
		</comment>
		<comment id='7' author='mketcha' date='2019-11-13T10:27:59Z'>
		Hi, this is a regression in TF Keras. In standalone Keras, it was fixed by &lt;denchmark-link:https://github.com/keras-team/keras/pull/6035&gt;keras-team/keras#6035&lt;/denchmark-link&gt;
 .
And it seems to be a duplicate of &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/32023&gt;#32023&lt;/denchmark-link&gt;
 .
The workaround in user code is to copy the list at call time, e.g. by changing above example to:
&lt;denchmark-code&gt;    x = Concatenate(3)(x_list[:])
&lt;/denchmark-code&gt;

The fix for TF would be to copy the list at call time of the layer object, to prevent later outside modification.
		</comment>
		<comment id='8' author='mketcha' date='2020-03-15T05:39:13Z'>
		Thanks for the issue!
This commit fixes the issue:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/816ec796ea6a96940188356628566ed11a11c186&gt;816ec79&lt;/denchmark-link&gt;

The fix should be available in tomorrow's nightly build
		</comment>
		<comment id='9' author='mketcha' date='2020-03-15T05:39:15Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/30355&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/30355&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>