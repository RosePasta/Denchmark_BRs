<bug id='31650' author='tylerlekang' open_date='2019-08-15T18:05:31Z' closed_time='2020-02-25T01:36:28Z'>
	<summary>tf.keras.backend.function ignores input shapes?</summary>
	<description>
System information

Have I written custom code: Yes
OS Platform and Distribution: Windows 10
TensorFlow installed from (source or binary): conda install/update tensorflow
TensorFlow version (use command below): 1.14.0
Python version: 3.7.3
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
tf.keras.backend.function seems to ignore explicitly defined input shapes, almost as if the model were defined using None shapes (dynamic reshape).
Describe the expected behavior
I expected an error to be thrown, as the wrong input shape was fed to the model. Instead, it seems as if the model was run using a dynamic reshape.
Code to reproduce the issue
&lt;denchmark-code&gt;import numpy as np
import tensorflow.keras as K
import tensorflow.keras.backend as Kb

sub_in = K.layers.Input(shape = (1,5,1))
x = K.layers.Conv2D(1, (1,1))(sub_in)
x = K.layers.Flatten()(x)
sub = K.models.Model(inputs=sub_in, outputs=x)

main_in = K.layers.Input(shape = (1,10,1))
main_in1 = K.layers.Lambda(lambda x: x[:,:,:5,:])(main_in)
main_in2 = K.layers.Lambda(lambda x: x[:,:,8:,:])(main_in)
x1 = sub(main_in1)
x2 = sub(main_in2)
x = K.layers.Concatenate()([x1,x2])
main = K.models.Model(inputs=main_in, outputs=x)

arr = np.arange(30).reshape((3,1,10,1))

pred = main.predict(arr)
print(pred.shape)

subOutFunc = Kb.function(sub.input, sub.output)
subOut = subOutFunc(arr)
print(subOut.shape)
&lt;/denchmark-code&gt;

Running this, you should see output shapes of (3,7) and (3,10), which in my opinion should not be possible. The sub model should only accept inputs of shape (?,1,5,1), yet in the two above examples inputs of shapes (?,1,2,1) and (?,1,10,1) are fed to it, and it works.
The first example (using the .predict method) gives it the (?,1,2,1) input, via the second Lambda split of the main input. No error. The second example calls backend.function directly on the sub model with a (?,1,10,1). Also no error.
Maybe this was/is the desired behavior of backend.function ? It is not what I expected. Hence raising up in case this is a bug. Thank you!
	</description>
	<comments>
		<comment id='1' author='tylerlekang' date='2019-08-16T06:40:29Z'>
		I was able to reproduce the issue for given code TF version-1.14,kindly find the &lt;denchmark-link:https://colab.sandbox.google.com/drive/1lPtZHkiU5Y7absQsIgbsPNLF2MRkeDj-#scrollTo=WQ-ndvvGIM3m&gt;gist&lt;/denchmark-link&gt;
 of colab.
		</comment>
		<comment id='2' author='tylerlekang' date='2020-02-25T01:36:28Z'>
		The  layer will&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/8502c9e5c8efa59b326e5743e64b283730145f5c/tensorflow/python/keras/layers/convolutional.py#L194&gt; re-create the conv op&lt;/denchmark-link&gt;
 if the actual input has different shape other than the specified 'Input' shape. So the shape from the actual input is used.
		</comment>
		<comment id='3' author='tylerlekang' date='2020-02-25T01:36:30Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31650&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31650&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>