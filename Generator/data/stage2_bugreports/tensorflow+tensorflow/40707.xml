<bug id='40707' author='rafiqhasan' open_date='2020-06-23T06:42:33Z' closed_time='2020-07-06T19:42:56Z'>
	<summary>TF 2 Keras | DenseFeatures layer not referring to data set fields by names</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Colab
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No
TensorFlow installed from (source or binary): Colab default
TensorFlow version (use command below): 2.2
Python version: 3.7
Bazel version (if compiling from source): NA
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version: NA
GPU model and memory: NA

Describe the current behavior:
While using tf.keras.layers.DenseFeatures as input layer, TF doesn't give any error in case the input dataset is missing any field with the required field names as given in DenseFeatures. However this works absolutely fine when directly using the tf.keras.Input() - gives error "KeyError: fieldname"
Describe the expected behavior
tf.keras.layers.DenseFeatures should work absolutely like tf.keras.Input()

Use colab notebook - &lt;denchmark-link:https://colab.research.google.com/drive/1luzdzGEdJqaUjmYGbGGPIx7DFSAHebnL?usp=sharing&gt;https://colab.research.google.com/drive/1luzdzGEdJqaUjmYGbGGPIx7DFSAHebnL?usp=sharing&lt;/denchmark-link&gt;


dummy_model_1( Correct behavior ) in the code uses only tf.keras.input( ) as inputs to TF Keras model and gives error if dataset misses required fields:

Here reviews was not passed as a field in the input dataset. -&gt; So TF raised error
&lt;denchmark-code&gt;def dummy_model_1(params):
    METRICS = [
            keras.metrics.RootMeanSquaredError(name='RMSE')
    ]

    B = tf.keras.Input((), dtype = tf.string, name = 'condition')
    C = tf.keras.Input((), dtype = tf.string, name = 'reviews')

    model = tf.keras.Model([B, C], [B, C])

    #Set optimizer
    opt = tf.keras.optimizers.Adam(lr= params['lr'], beta_1=params['beta_1'], 
                                        beta_2=params['beta_2'], epsilon=params['epsilon'])

    #Compile model
    model.compile(loss='mean_squared_error',  optimizer=opt, metrics = METRICS)

    #Print Summary
    print(model.summary())
    return model

KeyError: in user code:

    /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py:1147 predict_function  *
        outputs = self.distribute_strategy.run(
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/distribute/distribute_lib.py:951 run  **
        return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/distribute/distribute_lib.py:2290 call_for_each_replica
        return self._call_for_each_replica(fn, args, kwargs)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/distribute/distribute_lib.py:2649 _call_for_each_replica
        return fn(*args, **kwargs)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py:1122 predict_step  **
        return self(x, training=False)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py:927 __call__
        outputs = call_fn(cast_inputs, *args, **kwargs)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/network.py:719 call
        convert_kwargs_to_constants=base_layer_utils.call_context().saving)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/network.py:826 _run_internal_graph
        inputs = self._flatten_to_reference_inputs(inputs)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/network.py:926 _flatten_to_reference_inputs
        return [tensors[inp._keras_history.layer.name] for inp in ref_inputs]
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/network.py:926 &lt;listcomp&gt;
        return [tensors[inp._keras_history.layer.name] for inp in ref_inputs]

    KeyError: 'reviews'
&lt;/denchmark-code&gt;


dummy_model_2( Wrong behavior ) in the code uses tf.keras.DenseFeatures( ) and tf.keras.Input( ) as inputs to TF Keras model and DOESNT gives error if dataset misses required fields. In fact I am not sure how it maps data from dataset to the model inputs:

Here reviews &amp; drugsName both were passed as incorrect fieldnames and don't exist in the input dataset. -&gt; TF did not give any error. It should have given error for both the fields.
It seems that in this case, TF just picks up values from dataset as per the index and not actually from the fieldnames.
&lt;denchmark-code&gt;def dummy_model_2(params):
    METRICS = [
            # keras.metrics.BinaryAccuracy(name='accuracy'),
            keras.metrics.RootMeanSquaredError(name='RMSE')
    ]

    A = tf.keras.layers.DenseFeatures(feature_columns=f)({'drugsName' : tf.keras.Input(name='drugsName', shape=(1,), dtype=tf.string)})
    B = tf.keras.Input((), dtype = tf.string, name = 'condition')
    C = tf.keras.Input((), dtype = tf.string, name = 'reviews')

    model = tf.keras.Model([{'drugsName' : tf.keras.Input(name='drugsName', shape=(1,), dtype=tf.string)}, B, C], [B, C])

    #Set optimizer
    opt = tf.keras.optimizers.Adam(lr= params['lr'], beta_1=params['beta_1'], 
                                        beta_2=params['beta_2'], epsilon=params['epsilon'])

    #Compile model
    model.compile(loss='mean_squared_error',  optimizer=opt, metrics = METRICS)

    #Print Summary
    print(model.summary())
    return model
&lt;/denchmark-code&gt;

Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='rafiqhasan' date='2020-06-23T07:36:48Z'>
		I am able to replicate this issue, please find the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/98a10b26666e5117229216072d4a7957/untitled241.ipynb&gt;gist here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='rafiqhasan' date='2020-06-24T05:36:28Z'>
		Thanks a lot, I hope this gets resolved quickly because it completely defies the purpose of having a densefeature layer in TF Keras if this is not fixed.
		</comment>
		<comment id='3' author='rafiqhasan' date='2020-07-04T18:59:38Z'>
		Any response ? Issue seems to be also in 2.3 rc
		</comment>
		<comment id='4' author='rafiqhasan' date='2020-07-06T14:52:38Z'>
		 will be deprecated (in plan) in 2.4. Please use 2.3 experimental layers as in this &lt;denchmark-link:https://github.com/tensorflow/community/blob/master/rfcs/20191212-keras-categorical-inputs.md&gt;RFC&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='rafiqhasan' date='2020-07-06T19:42:58Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40707&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40707&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>