<bug id='28224' author='syoyo' open_date='2019-04-28T09:46:02Z' closed_time='2019-05-07T04:25:04Z'>
	<summary>[tflite] tflite file with single ADD op produces duplicated outputs</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No


OS Platform and Distribution (e.g., Linux Ubuntu 16.04):  Linux Ubuntu 16.04


Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:


TensorFlow installed from (source or binary): binary


TensorFlow version (use command below): r1.13


Python version: 3.6


Bazel version (if compiling from source):


GCC/Compiler version (if compiling from source):


CUDA/cuDNN version:


GPU model and memory:


You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
I have created .tflite with single ADD op. It has two inputs and one output.
When reading this .tflite with interpreter(e.g. tensorflow.lite.python)
import sys

import numpy as np

from tensorflow.lite.python import interpreter as interpreter_wrapper

interpreter = interpreter_wrapper.Interpreter(model_path=sys.argv[1])
interpreter.allocate_tensors()

input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

print(input_details)
print(output_details)
&lt;denchmark-code&gt;[{'name': 'input0', 'index': 0, 'shape': array([2, 5], dtype=int32), 'dtype': &lt;class 'numpy.float32'&gt;, 'quantization': (0.0, 0)}, {'name': 'input1', 'index': 1, 'shape': array([2, 5], dtype=int32), 'dtype': &lt;class 'numpy.float32'&gt;, 'quantization': (0.0, 0)}]
[{'name': 'output0', 'index': 2, 'shape': array([2, 5], dtype=int32), 'dtype': &lt;class 'numpy.float32'&gt;, 'quantization': (0.0, 0)}, {'name': 'output0', 'index': 2, 'shape': array([2, 5], dtype=int32), 'dtype': &lt;class 'numpy.float32'&gt;, 'quantization': (0.0, 0)}]
&lt;/denchmark-code&gt;

Code using  C++ interpreter also reports duplicated outputs(2 2), even though outout of ADD(builtin code 0) shows one output.
&lt;denchmark-code&gt;Interpreter has 3 tensors and 1 nodes
Inputs: 0 1
Outputs: 2 2

Tensor   0 input0               kTfLiteFloat32  kTfLiteArenaRw         40 bytes ( 0.0 MB)  2 5
Tensor   1 input1               kTfLiteFloat32  kTfLiteArenaRw         40 bytes ( 0.0 MB)  2 5
Tensor   2 output0              kTfLiteFloat32  kTfLiteArenaRw         40 bytes ( 0.0 MB)  2 5

Node   0 Operator Builtin Code   0
  Inputs: 0 1
  Outputs: 2
&lt;/denchmark-code&gt;

Describe the expected behavior
get_output_details() returns unique list of outputs.
Code to reproduce the issue
Use attached .tflite file to reproduce the issue.
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3124805/add.tflite.zip&gt;add.tflite.zip&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='syoyo' date='2019-05-03T23:44:02Z'>
		If you load your .tflite model with Netron(&lt;denchmark-link:https://lutzroeder.github.io/netron/&gt;https://lutzroeder.github.io/netron/&lt;/denchmark-link&gt;
), it will show exactly two outputs. I'm wondering how you build &amp; convert this model. Could you share the code for the model and the command you used to convert the model?
		</comment>
		<comment id='2' author='syoyo' date='2019-05-04T06:17:58Z'>
		&lt;denchmark-link:https://github.com/haozha111&gt;@haozha111&lt;/denchmark-link&gt;
 I have created  using python binding(generated from  schema.fbs) with our own converter.
Here is a code snippet for serializing ADD op.
&lt;denchmark-code&gt;def SerializeOpAdd(serializer, x_id, y_id, output_id):

    opcode_id = serializer.RegisterBuiltinOpcode(
        tflite.BuiltinOperator.BuiltinOperator.ADD)

    # Inputs
    num_inputs = 2
    tflite.Operator.OperatorStartInputsVector(serializer.builder, num_inputs)
    serializer.builder.PrependInt32(y_id)
    serializer.builder.PrependInt32(x_id)
    inputs = serializer.builder.EndVector(num_inputs)

    # Outputs
    num_outputs = 1
    tflite.Operator.OperatorStartOutputsVector(serializer.builder, num_outputs)
    serializer.builder.PrependInt32(output_id)
    outputs = serializer.builder.EndVector(num_outputs)

    # Options
    activation_function = 0  # 'NONE'
    tflite.AddOptions.AddOptionsStart(serializer.builder)
    tflite.AddOptions.AddOptionsAddFusedActivationFunction(
        serializer.builder, activation_function)
    tf_options = tflite.AddOptions.AddOptionsEnd(serializer.builder)

    tflite.Operator.OperatorStart(serializer.builder)
    tflite.Operator.OperatorAddInputs(serializer.builder, inputs)
    tflite.Operator.OperatorAddOutputs(serializer.builder, outputs)
    tflite.Operator.OperatorAddBuiltinOptionsType(
        serializer.builder, tflite.BuiltinOptions.BuiltinOptions.AddOptions)
    tflite.Operator.OperatorAddBuiltinOptions(serializer.builder, tf_options)
    tflite.Operator.OperatorAddOpcodeIndex(serializer.builder, opcode_id)
    op = tflite.Operator.OperatorEnd(serializer.builder)

    serializer.operators.append(op)

    return op
&lt;/denchmark-code&gt;

Whole part of our converter is W.I.P. and difficult to cut out for creating minimal &amp; reproducing the issue atm.
		</comment>
		<comment id='3' author='syoyo' date='2019-05-06T17:26:35Z'>
		May I know why do you need to create a converter yourself and not using the TOCO? Given that the graph visualization of your model has two outputs, I wonder if it's a bug in your converter implementation?
		</comment>
		<comment id='4' author='syoyo' date='2019-05-07T04:25:04Z'>
		&lt;denchmark-link:https://github.com/haozha111&gt;@haozha111&lt;/denchmark-link&gt;
 Ah, it was a bug in my converter. Sorry for disturbing you.
FYI, there was a mismatch in writing out output vector in my serializer. And it looks tflite interpreter treat it as a valid .tflite file.
&lt;denchmark-code&gt;        # len(inputs) = 2, len(outputs) = 1  
        # [Inputs]
        tflite.SubGraph.SubGraphStartInputsVector(self.builder, len(inputs))
        for i in reversed(inputs):
            self.builder.PrependInt32(i)
        tf_inputs = self.builder.EndVector(len(inputs))

        # [Outputs]
        tflite.SubGraph.SubGraphStartOutputsVector(self.builder, len(outputs))
        for o in reversed(outputs):
            self.builder.PrependInt32(o)
        tf_outputs = self.builder.EndVector(len(inputs))  # &lt;-----
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='syoyo' date='2019-05-07T04:25:06Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28224&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28224&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>