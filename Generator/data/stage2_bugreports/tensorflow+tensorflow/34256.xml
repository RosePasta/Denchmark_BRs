<bug id='34256' author='sharkdtu' open_date='2019-11-14T01:43:10Z' closed_time='2020-01-15T21:38:38Z'>
	<summary>tensorflow java 1.15.0 failed to load native lib</summary>
	<description>
Describe the current behavior
&lt;denchmark-code&gt;org.tensorflow.NativeLibrary: tryLoadLibraryFailed: no tensorflow_jni in java.library.path
org.tensorflow.NativeLibrary: jniResourceName: org/tensorflow/native/linux-x86_64/libtensorflow_jni.so
org.tensorflow.NativeLibrary: frameworkResourceName: org/tensorflow/native/linux-x86_64/libtensorflow_framework.so
org.tensorflow.NativeLibrary: org/tensorflow/native/linux-x86_64/libtensorflow_framework.so not found. This is fine assuming org/tensorflow/native/linux-x86_64/libtensorflow_jni.so is not built to depend on it.
org.tensorflow.NativeLibrary: extracting native library to: /xxx/tmp/tensorflow_native_libraries-1573652659702-0/libtensorflow_jni.so
org.tensorflow.NativeLibrary: copied 154073736 bytes to /xxx/tmp/tensorflow_native_libraries-1573652659702-0/libtensorflow_jni.so
java.lang.UnsatisfiedLinkError:/xxx/tmp/tensorflow_native_libraries-1573652659702-0/libtensorflow_jni.so: libtensorflow_framework.so.1: 无法打开共享对象文件: 没有那个文件或目录
	at java.lang.ClassLoader$NativeLibrary.load(Native Method)
	at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941)
	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1824)
	at java.lang.Runtime.load0(Runtime.java:809)
	at java.lang.System.load(System.java:1086)
	at org.tensorflow.NativeLibrary.load(NativeLibrary.java:101)
	at org.tensorflow.TensorFlow.init(TensorFlow.java:67)
	at org.tensorflow.TensorFlow.&lt;clinit&gt;(TensorFlow.java:82)
	at org.tensorflow.SavedModelBundle.&lt;clinit&gt;(SavedModelBundle.java:170)
&lt;/denchmark-code&gt;

Describe the expected behavior
no exceptions
	</description>
	<comments>
		<comment id='1' author='sharkdtu' date='2019-11-14T01:49:43Z'>
		I found the tensorflow jar does not include org/tensorflow/native/linux-x86_64/libtensorflow_framework.so, but include org/tensorflow/native/linux-x86_64/libtensorflow_framework.so.1, so it failed to copy libtensorflow_framework.so to tmp directory when loading the native library.
		</comment>
		<comment id='2' author='sharkdtu' date='2019-11-14T04:32:30Z'>
		NativeLibrary.getMajorVersionNumber returns null when libtensorflow and libtensorflow_jni jar were shaded to my jar
		</comment>
		<comment id='3' author='sharkdtu' date='2020-01-15T21:38:40Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34256&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34256&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='sharkdtu' date='2020-03-09T17:29:55Z'>
		I had the same problem (using a shaded jar, NativeLibrary.getMajorVersionNumber returned null). But since your fix wasn't yet available in the 1.15 release, I worked around it by adding an Implementation-Version that starts with 1. to the shaded jar's manifest using Maven's ManifestResourceTransformer.
		</comment>
	</comments>
</bug>