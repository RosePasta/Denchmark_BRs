<bug id='33768' author='kazimuth' open_date='2019-10-28T01:53:05Z' closed_time='2019-10-29T22:59:21Z'>
	<summary>Metrics disappear on subclassed Keras model</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Google Colab TPU
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v2.0.0-rc2-26-g64c3d38 2.0.0
Python version: 3.7

Code to reproduce the issue
%tensorflow_version 2.x

inputs = tf.keras.Input((10,))
outputs = tf.keras.layers.Dense(10)(inputs)
unsubclassed = tf.keras.Model(inputs=inputs, outputs=outputs)
unsubclassed.compile(loss='categorical_crossentropy', metrics=['accuracy'])
_ = unsubclassed(tf.random.uniform((10, 10)))

class Subclassed(tf.keras.Model):
    def __init__(self,  **kwargs):
        super().__init__(**kwargs)
        self.dense = tf.keras.layers.Dense(10)

    @tf.function
    def call(self, x, training=None):
        return self.dense(x)

subclassed = Subclassed()
subclassed.compile(loss='categorical_crossentropy', metrics=['accuracy'])
_ = subclassed(tf.random.uniform((10, 10)))

print(unsubclassed.metrics_names, unsubclassed.metrics)
print(subclassed.metrics_names, subclassed.metrics)
gives:
&lt;denchmark-code&gt;['loss', 'accuracy'] [&lt;tensorflow.python.keras.metrics.MeanMetricWrapper object at 0x7ffa0a6c53c8&gt;]
['loss'] []
&lt;/denchmark-code&gt;

Expected Result
Subclassed model should not eat metrics.
	</description>
	<comments>
		<comment id='1' author='kazimuth' date='2019-10-29T09:36:39Z'>
		I have tried on colab with TF version 2.0 ,2.1.0-dev20191028 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/e47f4408b29f582a77d683344b2cfa77/untitled311.ipynb&gt;here&lt;/denchmark-link&gt;
Thanks!
		</comment>
		<comment id='2' author='kazimuth' date='2019-10-29T22:59:20Z'>
		So there is some difference for the subclass model vs normal model.
With normal model, we know the input/output shape when we construct the model, hence we properly config the model loss and metrics when compile() is invoked.
With subclass model, the input/output shape is unknown to us until it is first tested with proper data. In the compile() method, we will do a deferred compile and wait for the proper data.
If you change your code to subclassed.predict(), then the metric value is properly show up.
		</comment>
		<comment id='3' author='kazimuth' date='2019-10-29T22:59:22Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33768&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33768&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>