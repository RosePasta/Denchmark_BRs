<bug id='29246' author='dchatterjee172' open_date='2019-06-01T09:17:22Z' closed_time='2019-06-17T06:38:07Z'>
	<summary>OOM happens with tf.py_function</summary>
	<description>
&lt;denchmark-code&gt;def visualize_box(image, boxes, pred):
    image_pil = Image.fromarray(np.uint8((1 - image) * 255.0), "RGB")
    draw = ImageDraw.Draw(image_pil)
    w, h = image_pil.size
    boxes *= tf.cast(tf.stack([h, w, h, w], axis=-1), tf.float32)
    font = ImageFont.load_default()
    for b, p in zip(boxes, pred):
        # b (y_min, x_min, y_max, x_max)
        if not b[2] &gt; 0.0:
            continue
        draw.line(
            [(b[1], b[0]), (b[1], b[2]), (b[3], b[2]), (b[3], b[0]), (b[1], b[0])],
            fill="blue",
        )
        p_text = str(np.int(p))
        t_w, t_h = font.getsize(p_text)
        margin = np.ceil(0.05 * t_h)
        if b[0] &gt; t_h:
            t_bottom = b[0]
        else:
            t_bottom = b[2] + t_h
        draw.rectangle(
            [b[1], t_bottom - t_h - 2 * margin, b[1] + t_w, t_bottom], fill="blue"
        )
        draw.text(                                                                                                                                    
            (b[1] + margin, t_bottom - t_h - margin), p_text, fill="white", font=font
        )

    context.context()._clear_caches() # from tensorflow.python.eager import context
    del font, draw, w, h                                                                                                                              
    gc.collect()
    return np.expand_dims(np.array(image_pil, dtype=np.float32) / 255.0, 0)
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;# images is [1, 416, 416, 3] tensor, allbox [None, 4], all_pred [None]
labeled = tf.py_function(
                visualize_box, (images[0], all_box, all_pred), tf.float32
            )
&lt;/denchmark-code&gt;

I call the above function is the estimator model function in eval mode. The oom happens after training for some steps. If I comment out the py_function then I don't face any OOM.
I use Tensorflow 1.13.1 gpu py3 docker image.
&lt;denchmark-code&gt;Limit:                 10224323788
InUse:                 10028396544
MaxInUse:              10101860352
NumAllocs:                 5509254
MaxAllocSize:           3638034432
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;tensorflow.python.framework.errors_impl.ResourceExhaustedError: OOM when allocating tensor with shape[13,1024,52,52] and type float on /job:localhost/
replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc
         [[{{node main/small/predictor/conv2d/Conv2D-0-TransposeNHWCToNCHW-LayoutOptimizer}}]]
Hint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation inf
o.

         [[node Mean (defined at main.py:176) ]]
Hint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation inf
o.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='dchatterjee172' date='2019-06-01T18:43:03Z'>
		interestingly I cannot see the memory growth here,
&lt;denchmark-code&gt;import gc
from tensorflow.python.eager import context
import tensorflow as tf
import numpy as np
from PIL import Image, ImageFont, ImageDraw
from tqdm import tqdm
from tensorflow.contrib.memory_stats.python.ops.memory_stats_ops import BytesInUse
def visualize_box(image, boxes, pred):
    image_num = image.numpy()
    del image
    image_pil = Image.fromarray(np.uint8((1 - image_num) * 255.0), "RGB")
    draw = ImageDraw.Draw(image_pil) 
    w, h = image_pil.size
    boxes *= tf.cast(tf.stack([h, w, h, w], axis=-1), tf.float32)
    boxes_num = boxes.numpy()
    pred_num = pred.numpy()
    del boxes, pred
    font = ImageFont.load_default()
    for b, p in zip(boxes_num, pred_num):
        # b (y_min, x_min, y_max, x_max)
        if not b[2] &gt; 0.0:
            continue
        draw.line(
            [(b[1], b[0]), (b[1], b[2]), (b[3], b[2]), (b[3], b[0]), (b[1], b[0])],
            fill="blue",
        )
        p_text = str(p)
        t_w, t_h = font.getsize(p_text)
        margin = np.ceil(0.05 * t_h)
        if b[0] &gt; t_h:
            t_bottom = b[0]
        else:
            t_bottom = b[2] + t_h
        draw.rectangle(
            [b[1], t_bottom - t_h - 2 * margin, b[1] + t_w, t_bottom], fill="blue"
        )   
        draw.text(
            (b[1] + margin, t_bottom - t_h - margin), p_text, fill="white", font=font
        )   
        del p_text, t_w, t_h, margin, t_bottom
    image = np.expand_dims(np.array(image_pil, dtype=np.float32) / 255.0, 0)
    context.context()._clear_caches()
    del font, draw, w, h, image_pil
    gc.collect()                                                                                                                                      
    return image
image = tf.random.uniform(minval=0, maxval=1, shape=(416,416,3))
box = tf.random.uniform(minval=0, maxval=1, shape=(30 ,4))
pred = tf.random.uniform(minval=0, maxval=10, shape=(30,))
a = tf.py_function(visualize_box, (image, box, pred), tf.float32)
with tf.device('/device:GPU:0'):  # Replace with device you are interested in
  bytes_in_use = BytesInUse()
total = 654654654
with tf.Session() as sess:
  with tqdm(total=total) as pbar:
    for i in tqdm(range(total)):
      im, b = sess.run((a, bytes_in_use))
      pbar.set_description(str(b))
&lt;/denchmark-code&gt;

I am running the same function. but not in estimator.
&lt;denchmark-link:https://imgur.com/a/8XwaBgz&gt;image&lt;/denchmark-link&gt;

the above is the bytes_in_use graph inside tf estimator under mode eval.
		</comment>
		<comment id='2' author='dchatterjee172' date='2019-06-11T09:08:30Z'>
		&lt;denchmark-link:https://github.com/dchatterjee172&gt;@dchatterjee172&lt;/denchmark-link&gt;
  : Is this still an issue ?
		</comment>
		<comment id='3' author='dchatterjee172' date='2019-06-17T06:38:06Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='4' author='dchatterjee172' date='2019-06-17T06:38:08Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=29246&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=29246&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>