<bug id='28318' author='Jonathan-Livingston-Seagull' open_date='2019-05-01T20:04:20Z' closed_time='2019-05-28T19:05:18Z'>
	<summary>[ TF 2.0 ] tf.function throws exception</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): pip install tensorflow-gpu==2.0.0-alpha0
Python version: 3.7.3
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: CUDA 10/cuDNN 7.5
GPU model and memory:  GeForce GTX 980 4G

Describe the current behavior
I ported Deep Deterministic Policy Gradient algorithm to tf-2.0 and it works fine when I run the function with
with tf.device("/gpu:0"): but fails when I try to wrap the function with tf.function

&lt;denchmark-link:https://github.com/Jonathan-Livingston-Seagull/DDPG&gt;Code Repo&lt;/denchmark-link&gt;


&lt;denchmark-code&gt;/miniconda3/envs/rl/bin/python /media/seagull/use_me/seagull/github/DDPG/ddpg-pendulam/pendulam_train_script.py
WARNING: Logging before flag parsing goes to stderr.
W0501 21:58:48.871961 139821025609536 tf_logging.py:161] Entity &lt;bound method RoboschoolMujocoXmlEnv.reset of &lt;roboschool.gym_pendulums.RoboschoolInvertedPendulum object at 0x7f2a9ccfe780&gt;&gt; could not be transformed and will be staged without change. Error details can be found in the logs when running with the env variable AUTOGRAPH_VERBOSITY &gt;= 1. Please report this to the AutoGraph team. Cause: Unexpected error transforming &lt;bound method RoboschoolMujocoXmlEnv.reset of &lt;roboschool.gym_pendulums.RoboschoolInvertedPendulum object at 0x7f2a9ccfe780&gt;&gt;. If you believe this is due to a bug, please set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output when filing the bug report. Caused by: node &lt;gast.gast.Attribute object at 0x7f2a2043dcf8&gt; has ctx unset
Traceback (most recent call last):
  File "/media/seagull/use_me/seagull/github/DDPG/ddpg-pendulam/pendulam_train_script.py", line 39, in &lt;module&gt;
    scores = ddpg()
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py", line 426, in __call__
    self._initialize(args, kwds, add_initializers_to=initializer_map)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py", line 370, in _initialize
    *args, **kwds))
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/function.py", line 1313, in _get_concrete_function_internal_garbage_collected
    graph_function, _, _ = self._maybe_define_function(args, kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/function.py", line 1580, in _maybe_define_function
    graph_function = self._create_graph_function(args, kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/function.py", line 1512, in _create_graph_function
    capture_by_value=self._capture_by_value),
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/framework/func_graph.py", line 694, in func_graph_from_py_func
    func_outputs = python_func(*func_args, **func_kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py", line 317, in wrapped_fn
    return weak_wrapped_fn().__wrapped__(*args, **kwds)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/framework/func_graph.py", line 686, in wrapper
    ), args, kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/impl/api.py", line 392, in converted_call
    result = converted_f(*effective_args, **kwargs)
  File "/tmp/tmp0cbzqvh_.py", line 51, in tf__ddpg
    ag__.for_stmt(ag__.converted_call(range, None, ag__.ConversionOptions(recursive=True, verbose=0, strip_decorators=(tf.function, defun_1, ag__.convert, ag__.do_not_convert, ag__.converted_call), force_conversion=False, optional_features=(), internal_convert_user_code=True), (1, n_episodes + 1), {}), None, loop_body_1, ())
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/operators/control_flow.py", line 81, in for_stmt
    return _py_for_stmt(iter_, extra_test, body, init_state)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/operators/control_flow.py", line 90, in _py_for_stmt
    state = body(target, *state)
  File "/tmp/tmp0cbzqvh_.py", line 37, in loop_body_1
    state, score, break__1 = ag__.for_stmt(ag__.converted_call(range, None, ag__.ConversionOptions(recursive=True, verbose=0, strip_decorators=(tf.function, defun_3, ag__.convert, ag__.do_not_convert, ag__.converted_call), force_conversion=False, optional_features=(), internal_convert_user_code=True), (max_t,), {}), extra_test, loop_body, (state, score, break__1))
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/operators/control_flow.py", line 81, in for_stmt
    return _py_for_stmt(iter_, extra_test, body, init_state)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/operators/control_flow.py", line 90, in _py_for_stmt
    state = body(target, *state)
  File "/tmp/tmp0cbzqvh_.py", line 21, in loop_body
    action = ag__.converted_call('act', agent, ag__.ConversionOptions(recursive=True, verbose=0, strip_decorators=(tf.function, defun_4, ag__.convert, ag__.do_not_convert, ag__.converted_call), force_conversion=False, optional_features=(), internal_convert_user_code=True), ([state_1],), {})[0]
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/impl/api.py", line 392, in converted_call
    result = converted_f(*effective_args, **kwargs)
  File "/tmp/tmpsruok5vd.py", line 6, in tf__act
    action = ag__.converted_call('actor_local', self, ag__.ConversionOptions(recursive=True, verbose=0, strip_decorators=(tf.function, defun, ag__.convert, ag__.do_not_convert, ag__.converted_call, defun_1, ag__.convert, ag__.do_not_convert, ag__.converted_call), force_conversion=False, optional_features=(), internal_convert_user_code=True), (tf.convert_to_tensor(state),), {})
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/framework/ops.py", line 1108, in convert_to_tensor_v2
    as_ref=False)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/framework/ops.py", line 1186, in internal_convert_to_tensor
    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/framework/constant_op.py", line 304, in _constant_tensor_conversion_function
    return constant(v, dtype=dtype, name=name)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/framework/constant_op.py", line 245, in constant
    allow_broadcast=True)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/framework/constant_op.py", line 283, in _constant_impl
    allow_broadcast=allow_broadcast))
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/framework/tensor_util.py", line 476, in make_tensor_proto
    _GetDenseDimensions(values)))
ValueError: Argument must be a dense tensor: [array([0.        , 0.        , 0.99759441, 0.06932093, 0.        ])] - got shape [1, 5], but wanted [1].
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Jonathan-Livingston-Seagull' date='2019-05-03T11:08:07Z'>
		&lt;denchmark-link:https://github.com/Jonathan-Livingston-Seagull&gt;@Jonathan-Livingston-Seagull&lt;/denchmark-link&gt;
, In order to expedite the trouble-shooting process, Can you please provide minimum code snippet to reproduce the issue reported here. Thanks!
		</comment>
		<comment id='2' author='Jonathan-Livingston-Seagull' date='2019-05-03T16:59:03Z'>
		When I tried to make the following minimal example, I have found the reason for the reported issue. However I get another exception after solving that one. Please find the minimal code below. The source of the error seems like calling 'np.isfinite()' method inside the tf function definition. In my real code this method is being called by a third party lib that I use inside my tf function definition.
&lt;denchmark-code&gt;import random
import numpy as np

import tensorflow as tf


class Actor(tf.keras.Model):
    def __init__(self, action_size, fc1_units=400, fc2_units=300):
        super(Actor, self).__init__()
        self.fc1 = tf.keras.layers.Dense(units=fc1_units, activation=tf.nn.relu)
        self.fc2 = tf.keras.layers.Dense(units=fc2_units, activation=tf.nn.relu)
        self.fc3 = tf.keras.layers.Dense(action_size, activation=tf.nn.tanh)

    def call(self, state):
        return self.fc3(self.fc2(self.fc1(state)))


class Agent():

    def __init__(self, state_size, action_size, random_seed):
        self.state_size = state_size
        self.action_size = action_size
        self.seed = random.seed(random_seed)

        # Actor Network (w/ Target Network)
        self.actor_local = Actor(action_size)

    def act(self, state, add_noise=True):
        action = self.actor_local(state)
        return tf.clip_by_value(action, -1, 1)


agent = Agent(state_size=5, action_size=1, random_seed=2)

@tf.function
def ddpg():
    import numpy as np
    state = np.arange(5).astype(np.float64).reshape((1, -1))
    state = agent.act(state)
    np.isfinite(state)
    return state

scores = ddpg()

#with tf.device("/gpu:0"):
#    scores = ddpg()
#    print("run is successful")
&lt;/denchmark-code&gt;

Exception:
&lt;denchmark-code&gt;
WARNING: Logging before flag parsing goes to stderr.
W0503 18:53:51.962915 140631398553408 tf_logging.py:161] Entity &lt;method-wrapper '__call__' of numpy.ufunc object at 0x5594ba8c9580&gt; could not be transformed and will be staged without change. Error details can be found in the logs when running with the env variable AUTOGRAPH_VERBOSITY &gt;= 1. Please report this to the AutoGraph team. Cause: Object conversion is not yet supported. If you are trying to convert code that uses an existing object, try including the creation of that object in the conversion. For example, instead of converting the method of a class, try converting the entire class instead. See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/autograph/README.md#using-the-functional-api for more information.
Traceback (most recent call last):
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/impl/api.py", line 369, in converted_call
    experimental_partial_types=partial_types)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/impl/api.py", line 513, in to_graph
    arg_values, arg_types)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/impl/conversion.py", line 196, in entity_to_graph
    'Object conversion is not yet supported. If you are '
NotImplementedError: Object conversion is not yet supported. If you are trying to convert code that uses an existing object, try including the creation of that object in the conversion. For example, instead of converting the method of a class, try converting the entire class instead. See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/autograph/README.md#using-the-functional-api for more information.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/media/seagull/use_me/seagull/github/DDPG/ddpg-pendulam/ddpg_agent_tf.py", line 43, in &lt;module&gt;
    scores = ddpg()
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py", line 426, in __call__
    self._initialize(args, kwds, add_initializers_to=initializer_map)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py", line 370, in _initialize
    *args, **kwds))
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/function.py", line 1313, in _get_concrete_function_internal_garbage_collected
    graph_function, _, _ = self._maybe_define_function(args, kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/function.py", line 1580, in _maybe_define_function
    graph_function = self._create_graph_function(args, kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/function.py", line 1512, in _create_graph_function
    capture_by_value=self._capture_by_value),
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/framework/func_graph.py", line 694, in func_graph_from_py_func
    func_outputs = python_func(*func_args, **func_kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py", line 317, in wrapped_fn
    return weak_wrapped_fn().__wrapped__(*args, **kwds)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/framework/func_graph.py", line 686, in wrapper
    ), args, kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/impl/api.py", line 392, in converted_call
    result = converted_f(*effective_args, **kwargs)
  File "/tmp/tmp4fw9we40.py", line 8, in tf__ddpg
    ag__.converted_call('isfinite', np, ag__.ConversionOptions(recursive=True, verbose=0, strip_decorators=(tf.function, defun_2, ag__.convert, ag__.do_not_convert, ag__.converted_call), force_conversion=False, optional_features=(), internal_convert_user_code=True), (state,), {})
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/impl/api.py", line 390, in converted_call
    return _call_unconverted(f, args, kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/impl/api.py", line 188, in _call_unconverted
    return f(*args, **kwargs)
TypeError: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='Jonathan-Livingston-Seagull' date='2019-05-15T23:35:06Z'>
		&lt;denchmark-link:https://github.com/Jonathan-Livingston-Seagull&gt;@Jonathan-Livingston-Seagull&lt;/denchmark-link&gt;
 I think you need to use . Please check the code below which works without any issue. Thanks!
&lt;denchmark-code&gt;import random
import numpy as np

import tensorflow as tf


class Actor(tf.keras.Model):
    def __init__(self, action_size, fc1_units=400, fc2_units=300):
        super(Actor, self).__init__()
        self.fc1 = tf.keras.layers.Dense(units=fc1_units, activation=tf.nn.relu)
        self.fc2 = tf.keras.layers.Dense(units=fc2_units, activation=tf.nn.relu)
        self.fc3 = tf.keras.layers.Dense(action_size, activation=tf.nn.tanh)

    def call(self, state):
        return self.fc3(self.fc2(self.fc1(state)))


class Agent():

    def __init__(self, state_size, action_size, random_seed):
        self.state_size = state_size
        self.action_size = action_size
        self.seed = random.seed(random_seed)

        # Actor Network (w/ Target Network)
        self.actor_local = Actor(action_size)

    def act(self, state, add_noise=True):
        action = self.actor_local(state)
        return tf.clip_by_value(action, -1, 1)


agent = Agent(state_size=5, action_size=1, random_seed=2)

def check_state(state):
  return np.isfinite(state)

@tf.function
def ddpg():
    #import numpy as np
    state = np.arange(5).astype(np.float64).reshape((1, -1))
    state = agent.act(state)
    #np.isfinite(state)
    tf.py_function(check_state,inp=[state],Tout=[tf.bool])
    return state

scores = ddpg()

with tf.device("/gpu:0"):
    scores = ddpg()
    print("run is successful")
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='Jonathan-Livingston-Seagull' date='2019-05-18T11:54:15Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 Thanks . your suggestion solved that issue. However I encountered another issue which I explained in the toy example below.
I wanted to break my loop based on the value returned from py_function as shown below.
&lt;denchmark-code&gt;
import numpy as np
import tensorflow as tf


def dummy_py_function():
    return np.random.random(5), np.random.choice([True, False])


@tf.function
def random_break():
    for i in range(10):
        random_array, done = tf.py_function(dummy_py_function, inp=[], Tout=[tf.float32, tf.bool])
        if done:
            break
        else:
            continue

random_break() 

&lt;/denchmark-code&gt;

This throws the following exception
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/media/seagull/use_me/seagull/github/DDPG/ddpg-pendulam/test.py", line 18, in &lt;module&gt;
    random_break()
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py", line 426, in __call__
    self._initialize(args, kwds, add_initializers_to=initializer_map)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py", line 370, in _initialize
    *args, **kwds))
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/function.py", line 1313, in _get_concrete_function_internal_garbage_collected
    graph_function, _, _ = self._maybe_define_function(args, kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/function.py", line 1580, in _maybe_define_function
    graph_function = self._create_graph_function(args, kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/function.py", line 1512, in _create_graph_function
    capture_by_value=self._capture_by_value),
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/framework/func_graph.py", line 694, in func_graph_from_py_func
    func_outputs = python_func(*func_args, **func_kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py", line 317, in wrapped_fn
    return weak_wrapped_fn().__wrapped__(*args, **kwds)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/framework/func_graph.py", line 686, in wrapper
    ), args, kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/impl/api.py", line 392, in converted_call
    result = converted_f(*effective_args, **kwargs)
  File "/tmp/tmpjfr3w2a8.py", line 25, in tf__random_break
    break_, = ag__.for_stmt(ag__.converted_call(range, None, ag__.ConversionOptions(recursive=True, verbose=0, strip_decorators=(tf.function, defun, ag__.convert, ag__.do_not_convert, ag__.converted_call), force_conversion=False, optional_features=(), internal_convert_user_code=True), (10,), {}), extra_test, loop_body, (break_,))
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/operators/control_flow.py", line 81, in for_stmt
    return _py_for_stmt(iter_, extra_test, body, init_state)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/operators/control_flow.py", line 88, in _py_for_stmt
    if extra_test is not None and not extra_test(*state):
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/framework/ops.py", line 660, in __bool__
    raise TypeError("Using a `tf.Tensor` as a Python `bool` is not allowed. "
TypeError: Using a `tf.Tensor` as a Python `bool` is not allowed. Use `if t is not None:` instead of `if t:` to test if a tensor is defined, and use TensorFlow ops such as tf.cond to execute subgraphs conditioned on the value of a tensor.
&lt;/denchmark-code&gt;

However the following code works fine. I have noticed that the issue appears when the py_function returns more than one value.
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf


def dummy_py_function():
    return np.random.choice([True, False])


@tf.function
def random_break():
    for i in range(10):
        done = tf.py_function(dummy_py_function, inp=[], Tout=[tf.bool])
        if done:
            break
        else:
            continue

random_break()
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='Jonathan-Livingston-Seagull' date='2019-05-20T23:11:18Z'>
		&lt;denchmark-link:https://github.com/Jonathan-Livingston-Seagull&gt;@Jonathan-Livingston-Seagull&lt;/denchmark-link&gt;
 You could do this. I am not sure whether we can return two different data types from py.funciton. Below, I have split the py_function into to two py_functions. It runs through without any issues. thanks!
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf


def dummy_py_function():
    return np.random.random(5)

def dummy_py_function2():
    return np.random.choice([True, False])

@tf.function
def random_break():
    for i in range(10):
      print(i)
      random_array = tf.py_function(dummy_py_function, inp=[], Tout=[tf.float32])
      done = tf.py_function(dummy_py_function2, inp=[], Tout=[tf.bool])
      print(random_array)
      print(done)
      if done:
          break
      else:
          continue

random_break() 
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='Jonathan-Livingston-Seagull' date='2019-05-21T19:31:29Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 You are right, as I mentioned in my previous message if the number of returned value from the py_function is one than it run through.

I think this is not about the different return datatypes, even if I return the same datatype, it does not work as soon as the py_function returns more than one value. i.e the code below does not work

&lt;denchmark-code&gt;import tensorflow as tf


def dummy_py_function1():
    return False, False

@tf.function
def random_break():
    for i in range(10):
        print(i)
        done1, done2 = tf.py_function(dummy_py_function1, inp=[], Tout=[tf.bool, tf.bool])
        if done1:
            print("breaking")
            break
        else:
            continue

random_break()
&lt;/denchmark-code&gt;


The second point is that the "if condition" always satisfied even if you return False from the function in the code you provided above.

		</comment>
		<comment id='7' author='Jonathan-Livingston-Seagull' date='2019-05-22T20:22:48Z'>
		&lt;denchmark-link:https://github.com/Jonathan-Livingston-Seagull&gt;@Jonathan-Livingston-Seagull&lt;/denchmark-link&gt;
 Thanks! please close if the issue was resolved. Thanks!
		</comment>
		<comment id='8' author='Jonathan-Livingston-Seagull' date='2019-05-28T08:37:58Z'>
		
When I tried to make the following minimal example, I have found the reason for the reported issue. However I get another exception after solving that one. Please find the minimal code below. The source of the error seems like calling 'np.isfinite()' method inside the tf function definition. In my real code this method is being called by a third party lib that I use inside my tf function definition.
import random
import numpy as np

import tensorflow as tf


class Actor(tf.keras.Model):
    def __init__(self, action_size, fc1_units=400, fc2_units=300):
        super(Actor, self).__init__()
        self.fc1 = tf.keras.layers.Dense(units=fc1_units, activation=tf.nn.relu)
        self.fc2 = tf.keras.layers.Dense(units=fc2_units, activation=tf.nn.relu)
        self.fc3 = tf.keras.layers.Dense(action_size, activation=tf.nn.tanh)

    def call(self, state):
        return self.fc3(self.fc2(self.fc1(state)))


class Agent():

    def __init__(self, state_size, action_size, random_seed):
        self.state_size = state_size
        self.action_size = action_size
        self.seed = random.seed(random_seed)

        # Actor Network (w/ Target Network)
        self.actor_local = Actor(action_size)

    def act(self, state, add_noise=True):
        action = self.actor_local(state)
        return tf.clip_by_value(action, -1, 1)


agent = Agent(state_size=5, action_size=1, random_seed=2)

@tf.function
def ddpg():
    import numpy as np
    state = np.arange(5).astype(np.float64).reshape((1, -1))
    state = agent.act(state)
    np.isfinite(state)
    return state

scores = ddpg()

#with tf.device("/gpu:0"):
#    scores = ddpg()
#    print("run is successful")

Exception:

WARNING: Logging before flag parsing goes to stderr.
W0503 18:53:51.962915 140631398553408 tf_logging.py:161] Entity &lt;method-wrapper '__call__' of numpy.ufunc object at 0x5594ba8c9580&gt; could not be transformed and will be staged without change. Error details can be found in the logs when running with the env variable AUTOGRAPH_VERBOSITY &gt;= 1. Please report this to the AutoGraph team. Cause: Object conversion is not yet supported. If you are trying to convert code that uses an existing object, try including the creation of that object in the conversion. For example, instead of converting the method of a class, try converting the entire class instead. See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/autograph/README.md#using-the-functional-api for more information.
Traceback (most recent call last):
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/impl/api.py", line 369, in converted_call
    experimental_partial_types=partial_types)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/impl/api.py", line 513, in to_graph
    arg_values, arg_types)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/impl/conversion.py", line 196, in entity_to_graph
    'Object conversion is not yet supported. If you are '
NotImplementedError: Object conversion is not yet supported. If you are trying to convert code that uses an existing object, try including the creation of that object in the conversion. For example, instead of converting the method of a class, try converting the entire class instead. See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/autograph/README.md#using-the-functional-api for more information.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/media/seagull/use_me/seagull/github/DDPG/ddpg-pendulam/ddpg_agent_tf.py", line 43, in &lt;module&gt;
    scores = ddpg()
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py", line 426, in __call__
    self._initialize(args, kwds, add_initializers_to=initializer_map)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py", line 370, in _initialize
    *args, **kwds))
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/function.py", line 1313, in _get_concrete_function_internal_garbage_collected
    graph_function, _, _ = self._maybe_define_function(args, kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/function.py", line 1580, in _maybe_define_function
    graph_function = self._create_graph_function(args, kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/function.py", line 1512, in _create_graph_function
    capture_by_value=self._capture_by_value),
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/framework/func_graph.py", line 694, in func_graph_from_py_func
    func_outputs = python_func(*func_args, **func_kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py", line 317, in wrapped_fn
    return weak_wrapped_fn().__wrapped__(*args, **kwds)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/framework/func_graph.py", line 686, in wrapper
    ), args, kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/impl/api.py", line 392, in converted_call
    result = converted_f(*effective_args, **kwargs)
  File "/tmp/tmp4fw9we40.py", line 8, in tf__ddpg
    ag__.converted_call('isfinite', np, ag__.ConversionOptions(recursive=True, verbose=0, strip_decorators=(tf.function, defun_2, ag__.convert, ag__.do_not_convert, ag__.converted_call), force_conversion=False, optional_features=(), internal_convert_user_code=True), (state,), {})
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/impl/api.py", line 390, in converted_call
    return _call_unconverted(f, args, kwargs)
  File "/miniconda3/envs/rl/lib/python3.7/site-packages/tensorflow/python/autograph/impl/api.py", line 188, in _call_unconverted
    return f(*args, **kwargs)
TypeError: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''


Could you share how U solve the W501 issue? Appreciated.
		</comment>
		<comment id='9' author='Jonathan-Livingston-Seagull' date='2019-05-28T19:05:18Z'>
		Closing this out since I understand it to be resolved, but please let me know if I'm mistaken. Please open a new ticket if the issue persists again. Thanks!
		</comment>
		<comment id='10' author='Jonathan-Livingston-Seagull' date='2019-05-28T19:05:19Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28318&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28318&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>