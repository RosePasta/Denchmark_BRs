<bug id='31408' author='tarokiritani' open_date='2019-08-07T11:36:23Z' closed_time='2020-04-14T09:00:49Z'>
	<summary>Value of sqrt(2) is calculated incorrectly and inconsistently</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04.1 LTS
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA
TensorFlow installed from (source or binary): not known
TensorFlow version (use command below): 1.14.0
Python version: 3.6.8
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source): not known
CUDA/cuDNN version: 10.0/7.6.0
GPU model and memory: Tesla K-80 12gb

Describe the current behavior
I just computed sqrt(2) 100 times in google colab. The values are computed inconsistently, and a bit incorrectly, in a single tensor.
Describe the expected behavior
sqrt(2) should be computed the same way every time.
Code to reproduce the issue
&lt;denchmark-code&gt;from __future__ import absolute_import, division, print_function, unicode_literals

import tensorflow as tf

tf.enable_eager_execution()

sqrt2s = tf.sqrt(tf.constant([2.0]*100, dtype=tf.float32))
print(sqrt2s)
print(sqrt2s[0].numpy())
print(sqrt2s[-1].numpy())
print(sqrt2s[0].numpy() == sqrt2s[-1].numpy())
&lt;/denchmark-code&gt;

The results:
&lt;denchmark-code&gt;tf.Tensor(
[1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134
 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134
 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134
 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134
 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134
 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134
 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134
 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134
 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134
 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134
 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134
 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134
 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134
 1.4142134 1.4142134 1.4142134 1.4142134 1.4142134 1.4142135 1.4142135
 1.4142135 1.4142135], shape=(100,), dtype=float32)
1.4142134
1.4142135
False
&lt;/denchmark-code&gt;


The notebook is here:
&lt;denchmark-link:https://colab.research.google.com/drive/1PQp2KtFUoaUEHETrIUne-J1Cu2blg2cG&gt;https://colab.research.google.com/drive/1PQp2KtFUoaUEHETrIUne-J1Cu2blg2cG&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='tarokiritani' date='2019-08-07T14:02:30Z'>
		Also confirmed on TF2.0-beta.
		</comment>
		<comment id='2' author='tarokiritani' date='2019-08-13T22:53:02Z'>
		&lt;denchmark-link:https://github.com/rmlarsen&gt;@rmlarsen&lt;/denchmark-link&gt;
 is this the scalar vs vectorized path difference we saw in the other bug?
		</comment>
		<comment id='3' author='tarokiritani' date='2019-08-14T09:00:23Z'>
		I tested in GPU, there is no such problem.
However, this problem occurs when I use CPU (9900K).
I switch off GPU using export CUDA_VISIBLE_DEVICES=''
System information
Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04 LTS
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA
TensorFlow installed from (source or binary): pip3 install tensorflow-gpu==1.14
TensorFlow version (use command below): 1.14.0
Python version: 3.6.8
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source): not known
CUDA/cuDNN version: 9.0/7.6.1
GPU model and memory: RTX 2080Ti
		</comment>
		<comment id='4' author='tarokiritani' date='2019-08-14T09:28:42Z'>
		If we use dtype=tf.float16, there is no such problem.
		</comment>
		<comment id='5' author='tarokiritani' date='2020-03-13T11:01:10Z'>
		This issue is still replicating with Tf2.1 and tf-nightly==2.2.0.dev20200313.
Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/a0f428a577715b5da0277410c610da51/untitled455.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks
		</comment>
		<comment id='6' author='tarokiritani' date='2020-04-14T09:00:49Z'>
		Both numbers are correct to within 1 ulp (unit in last place). The inconsistency is due to the difference between the vectorized and scalar path in the underlying Eigen code. In short, please don't rely on exact equality of floating point numbers.
Closing this issue as it was the intended behavior. Please feel free to reopen the issue if you still have a concern. Thanks!
		</comment>
		<comment id='7' author='tarokiritani' date='2020-04-14T09:00:51Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31408&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31408&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='tarokiritani' date='2020-04-22T03:01:29Z'>
		&lt;denchmark-link:https://github.com/saikumarchalla&gt;@saikumarchalla&lt;/denchmark-link&gt;
 Thanks.
A similar issue is &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/31619&gt;#31619&lt;/denchmark-link&gt;
. It seems running the above code using GPU has no such issues.
What the meaning of "the difference between the vectorized and scalar path in the underlying Eigen code"? Is there any reference? I want to learn more about this. Thanks.
		</comment>
	</comments>
</bug>