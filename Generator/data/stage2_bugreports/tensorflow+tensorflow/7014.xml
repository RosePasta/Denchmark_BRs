<bug id='7014' author='garibarba' open_date='2017-01-23T10:58:40Z' closed_time='2017-06-16T17:12:48Z'>
	<summary>clip_by_value clips NaN to clip_value_max</summary>
	<description>
Running
sess.run(tf.clip_by_value(float('nan'), 0.0, 100.0))
returns 100.0
I'm not sure if this is expected behavior or convenient for clipping gradients, but I believe it should return nan (as np.clip() does) or be documented.
&lt;denchmark-h:h3&gt;Environment info&lt;/denchmark-h&gt;

Windows 7
Only CPU
Python 3.5.2 from Anaconda
Tensorflow 0.12.0-rc1 installed from binary pip package
	</description>
	<comments>
		<comment id='1' author='garibarba' date='2017-01-23T20:50:18Z'>
		&lt;denchmark-link:https://github.com/aselle&gt;@aselle&lt;/denchmark-link&gt;
 for numpy compat.
		</comment>
		<comment id='2' author='garibarba' date='2017-01-24T05:43:51Z'>
		In general, I think it's probably a good idea to follow np.clip(). We might be using isfinite() instead of isnan(). If you submit a PR we could discuss the issues there.
&lt;denchmark-link:https://github.com/rmlarsen&gt;@rmlarsen&lt;/denchmark-link&gt;
 FYI
		</comment>
		<comment id='3' author='garibarba' date='2017-01-24T19:16:12Z'>
		This is generally the case... Also tf.clip_by_value should be consistent with the implementation of
tf.minimum and tf.maximum s.t.
clip_by_value(v,a,b) is equivalent to  tf.minimum(tf.maximum(a, v), b)
tf.minimum and maximum have the correct nan behavior.
		</comment>
		<comment id='4' author='garibarba' date='2017-01-24T19:34:08Z'>
		I cannot reproduce this on 0.9, 0.10, 0.11, 0.12 or the last nightly build from master in ubuntu 14 and docker ubuntu 14.  I get nan.  What version and platform are you using? What version of CUDA? The issue template we ask people to complete asks what version and platform you are using, so we can help you on these types of issues better. Please use it in the future. Thank you.
		</comment>
		<comment id='5' author='garibarba' date='2017-01-24T22:06:34Z'>
		I have filled in the information. I will do so in the future too. Sorry.
I will confirm the precise tensorflow version and test with a newer version as soon as I am able.
		</comment>
		<comment id='6' author='garibarba' date='2017-01-26T09:24:08Z'>
		Same results on tensorflow 0.12.1. And I also get the float instead of the nan if I call tf.minimum(float('nan'), 0.0) or tf.maximum(float('nan'), 0.0)
		</comment>
		<comment id='7' author='garibarba' date='2017-01-26T18:17:20Z'>
		Just to be clear, &lt;denchmark-link:https://github.com/garibarba&gt;@garibarba&lt;/denchmark-link&gt;
 you're running:
&lt;denchmark-code&gt;import tensorflow as tf
print tf.Session().run(tf.minimum(float('nan'), 0.0))
&lt;/denchmark-code&gt;

?
		</comment>
		<comment id='8' author='garibarba' date='2017-01-26T19:00:23Z'>
		Precisely:
python -c "import tensorflow as tf; print(tf.Session().run(tf.minimum(float('nan'), 0.0)))"
python -c "import tensorflow as tf; print(tf.Session().run(tf.maximum(float('nan'), 0.0)))"
python -c "import tensorflow as tf; print(tf.Session().run(tf.clip_by_value(float('nan'), 0.0, 100.0)))"
		</comment>
		<comment id='9' author='garibarba' date='2017-01-26T19:05:33Z'>
		OK, it gives  for me on Linux and . &lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
 / &lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;
 do you happen to have a windows build available where you could repro?
		</comment>
		<comment id='10' author='garibarba' date='2017-01-27T00:46:39Z'>
		Trying now.
		</comment>
		<comment id='11' author='garibarba' date='2017-01-27T00:56:55Z'>
		Reproduced the issue on windows, both on master and 0.12.1
		</comment>
		<comment id='12' author='garibarba' date='2017-01-27T01:09:55Z'>
		Thank you &lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;
 ! We should definitely add a test for that once fixed.
Assigning to &lt;denchmark-link:https://github.com/aselle&gt;@aselle&lt;/denchmark-link&gt;
 . I might take a look later
		</comment>
		<comment id='13' author='garibarba' date='2017-01-27T01:14:15Z'>
		It looks like the problem is caused by maximum and minimum.
And the implementations of those seem to just use eigen, if I am not mistaken.
		</comment>
		<comment id='14' author='garibarba' date='2017-01-27T02:29:56Z'>
		Hopefully it's not a problem with NaN on SIMD.
		</comment>
		<comment id='15' author='garibarba' date='2017-02-06T21:33:45Z'>
		I "fixed" the underlying NaN problem for SIMD max/min Eigen in
&lt;denchmark-link:https://bitbucket.org/eigen/eigen/commits/738d7c6becf04a2a8f400d5edd2c13ea44f28428&gt;https://bitbucket.org/eigen/eigen/commits/738d7c6becf04a2a8f400d5edd2c13ea44f28428&lt;/denchmark-link&gt;

(plus a few followup). Please notice that it is a bit subtle since max and min are defined to match the (elementwise) behavior of std::max / std::min. See &lt;denchmark-link:http://eigen.tuxfamily.org/bz/show_bug.cgi?id=1373&gt;http://eigen.tuxfamily.org/bz/show_bug.cgi?id=1373&lt;/denchmark-link&gt;
 for a discussion.
Unfortunately we have not been able to update TensorFlow to use a recent version of Eigen containing this fix, due to build breakage in Eigen. I'll try to give this another try.
		</comment>
		<comment id='16' author='garibarba' date='2017-02-06T22:24:35Z'>
		Nice!
		</comment>
		<comment id='17' author='garibarba' date='2017-06-16T17:09:06Z'>
		&lt;denchmark-link:https://github.com/rmlarsen&gt;@rmlarsen&lt;/denchmark-link&gt;
 I'm unable to clone the Eigen repo because bitbucket's https clone doesn't work.  Has this been fixed yet?
		</comment>
		<comment id='18' author='garibarba' date='2017-06-16T17:12:48Z'>
		Fixed a while ago, apparently.
		</comment>
	</comments>
</bug>