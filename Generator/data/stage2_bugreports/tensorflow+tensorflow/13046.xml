<bug id='13046' author='cbcase' open_date='2017-09-14T17:23:57Z' closed_time='2017-09-15T20:13:53Z'>
	<summary>tf.reduce_max inconsistent with numpy.max when handling NaN values</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04.3 LTS
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v1.3.0-rc2-20-g0787eee 1.3.0
Python version: 3.5.2
Bazel version (if compiling from source): N/A
CUDA/cuDNN version: 8.0 / 6.0
GPU model and memory: P100 (16GB)
Exact command to reproduce: [see below]

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

The documentation for tf.reduce_max states that it is "Equivalent to np.max". This is not true when the provided input_tensor includes NaN values.
TensorFlow ignores NaN values and returns inf (if present) or the largest finite value. Numpy will propagate NaN values in  and has a special function  for ignoring NaN values. (See the Notes section here: &lt;denchmark-link:https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html&gt;https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html&lt;/denchmark-link&gt;
)
Expected behavior is that tf.reduce_max returns NaN when its input includes NaN values.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

import numpy as np
import tensorflow as tf

vals = [float('1'), float('nan')]

np_max = np.max(vals)
tf_max = tf.reduce_max(tf.constant(vals))

with tf.Session() as sess:
    print('TF max: {}'.format(sess.run(tf_max)))
print('numpy max: {}'.format(np_max))
When run, this code produces the following output:
&lt;denchmark-code&gt;TF max: 1.0
numpy max: nan
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='cbcase' date='2017-09-15T15:40:40Z'>
		I think this issue is related to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/12659&gt;#12659&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='cbcase' date='2017-09-15T17:34:24Z'>
		Well-spotted -- I didn't turn up that issue in the search I did.
Reading through &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/12659&gt;#12659&lt;/denchmark-link&gt;
, it looks like the issue is more subtle (and worse?) than what I've shown here -- NaNs are sometimes propagated and sometimes not, and it depends on the implementation you happen to get.
		</comment>
		<comment id='3' author='cbcase' date='2017-09-15T20:13:53Z'>
		Thanks, &lt;denchmark-link:https://github.com/yongtang&gt;@yongtang&lt;/denchmark-link&gt;
. Let's close this issue in favor of &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/12659&gt;#12659&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>