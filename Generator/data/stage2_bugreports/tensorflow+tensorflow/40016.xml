<bug id='40016' author='gfkeith' open_date='2020-05-30T23:57:48Z' closed_time='2020-06-08T23:06:20Z'>
	<summary>Overflow in tf.keras.layers.experimental.preprocessing.Normalization</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes (see below for code to reproduce).
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Windows 10 10.0.18363.836
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
N/A
TensorFlow installed from (source or binary):
Binary (conda)
TensorFlow version (use command below):
unknown 2.1.0
Python version:
3.6.10
Bazel version (if compiling from source):
N/A
GCC/Compiler version (if compiling from source):
N/A
CUDA/cuDNN version:
GPU model and memory:

Describe the current behavior
Using for a tf.keras.layers.experimental.preprocessing.Normalization layer norm, norm.adapt(dataset) encounters overflow warnings.
Describe the expected behavior
Calculate norm and standard deviation correctly.
Standalone code to reproduce the issue
import numpy as np
import tensorflow as tf


def gen():
    for i in range(2 ** 13):
        array = np.random.random_sample(1024*1024*4).reshape(
            (1024, 1024, 4)).astype(np.float32)
        yield array * 1024 # Exacerbate the issue.

dataset = tf.data.Dataset.from_generator(
    gen, tf.float32, tf.TensorShape([1024, 1024, 4]))

dataset = dataset.batch(4)

norm = tf.keras.layers.experimental.preprocessing.Normalization()

norm.adapt(dataset)             # This ends up with RuntimeWarnings.

print(norm.mean)                  # Result is all 'inf'.
print(norm.variance)              # Result is 0.
Other info / logs
&lt;denchmark-code&gt;d:\local\envs\tf_2_1\lib\site-packages\tensorflow_core\python\keras\layers\preprocessing\normalization.py:181: RuntimeWarning: divide by zero encountered in true_divide
  ]) / combined_count
d:\local\envs\tf_2_1\lib\site-packages\tensorflow_core\python\keras\layers\preprocessing\normalization.py:190: RuntimeWarning: invalid value encountered in reduce
  variance_contribution(accumulator) for accumulator in accumulators
d:\local\envs\tf_2_1\lib\site-packages\tensorflow_core\python\keras\layers\preprocessing\normalization.py:187: RuntimeWarning: overflow encountered in square
  accumulator.variance + np.square(accumulator.mean - combined_mean))
d:\local\envs\tf_2_1\lib\site-packages\tensorflow_core\python\keras\layers\preprocessing\normalization.py:187: RuntimeWarning: invalid value encountered in multiply
  accumulator.variance + np.square(accumulator.mean - combined_mean))
&lt;tf.Variable 'mean:0' shape=(4,) dtype=float32, numpy=array([inf, inf, inf, inf], dtype=float32)&gt;
&lt;tf.Variable 'variance:0' shape=(4,) dtype=float32, numpy=array([0., 0., 0., 0.], dtype=float32)&gt;
&lt;/denchmark-code&gt;

The count overflow problem could potentially be mitigated by changing the dtype &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/2b96f3662bd776e277f86997659e61046b56c315/tensorflow/python/keras/layers/preprocessing/normalization.py#L158&gt;here&lt;/denchmark-link&gt;
 to int64,
	</description>
	<comments>
		<comment id='1' author='gfkeith' date='2020-06-01T14:20:17Z'>
		&lt;denchmark-link:https://github.com/gfkeith&gt;@gfkeith&lt;/denchmark-link&gt;

I ran the code shared on tf 2.1 and do not face any issues, please refer to this &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/98438a3fdb809ce58e8ece5b2932d0bd/untitled205.ipynb&gt;gist here&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='gfkeith' date='2020-06-02T13:51:18Z'>
		Hi &lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
,
The behaviour appears to be different on Colab, I'm not sure why. It still isn't 100% correct, if you run &lt;denchmark-link:https://gist.github.com/gfkeith/055a0519535b1f2fdba633bc9611931b&gt;this&lt;/denchmark-link&gt;
 the count is negative (indicating overflow) but the mean and variance still seem reasonable. On my computer, they are also negative.
This seems to be the due to the default numpy dtype. On colab,  (relevant &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/v2.2.0/tensorflow/python/keras/layers/preprocessing/normalization.py#L178&gt;here&lt;/denchmark-link&gt;
) seems to return int64 (even when summing dtype int32 arrays), whereas on my computer it returns int32 (hence the overflow), unless the dtype is set specifically to int64. For some reason, it is set to int32 for count &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/v2.2.0/tensorflow/python/keras/layers/preprocessing/normalization.py#L158&gt;here&lt;/denchmark-link&gt;
. I think if this were set to int64, the behaviour would be the same (i.e. overflow not a problem for count until the state variable is set, which is only &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/v2.2.0/tensorflow/python/keras/layers/preprocessing/normalization.py#L101&gt;dtype int32&lt;/denchmark-link&gt;
, hence why  is negative for both). The mean and variance being negative for mine and not colab is explained by the working  overflowing on mine (so negative) and not colab, as it multiplies mean &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/v2.2.0/tensorflow/python/keras/layers/preprocessing/normalization.py#L184&gt;here&lt;/denchmark-link&gt;
 and variance &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/v2.2.0/tensorflow/python/keras/layers/preprocessing/normalization.py#L191&gt;here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='3' author='gfkeith' date='2020-06-02T14:10:22Z'>
		Interestingly, it looks like the dtype of the layer is changed to int64 in master &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/layers/preprocessing/normalization.py#L119&gt;here&lt;/denchmark-link&gt;
, but the running type is still int32 &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/layers/preprocessing/normalization.py#L180&gt;here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='4' author='gfkeith' date='2020-06-08T18:44:32Z'>
		&lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/40101&gt;#40101&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='gfkeith' date='2020-06-08T23:06:21Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40016&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40016&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='gfkeith' date='2020-09-11T22:19:08Z'>
		&lt;denchmark-link:https://github.com/bhack&gt;@bhack&lt;/denchmark-link&gt;
 this issue has been fixed in 2.3.0, is there a reason why its moved back to "in progress"
		</comment>
		<comment id='7' author='gfkeith' date='2020-09-11T22:33:49Z'>
		Honestly I don't remeber this action as I was not in this thread. But ok.
		</comment>
		<comment id='8' author='gfkeith' date='2020-09-11T22:56:36Z'>
		
Interestingly, it looks like the dtype of the layer is changed to int64 in master here, but the running type is still int32 here.

You probably need to install tf-nightly to verify that, given colab doesn't automatically include latest changes
		</comment>
	</comments>
</bug>