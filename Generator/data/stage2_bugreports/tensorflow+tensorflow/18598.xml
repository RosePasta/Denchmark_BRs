<bug id='18598' author='andresusanopinto' open_date='2018-04-17T13:03:38Z' closed_time='2018-04-17T18:54:49Z'>
	<summary>tensorflow-1.8.0rc0: tf.compat.as_str returns bytes for python3 since 20180409</summary>
	<description>
The issue appeared first in tf-nightly==1.8.0.dev20180409 but is now present in tensorflow==1.8.0rc0.
Reproduce steps:
&lt;denchmark-code&gt;$ python3 -c "import tensorflow as tf; print(tf.VERSION, type(tf.compat.as_str('hello')) == str)
&lt;/denchmark-code&gt;

Is expected to always print "True".  But gets:
&lt;denchmark-code&gt;# tensorflow
1.6.0 True
1.7.0 True
1.8.0-rc0 False           &lt;= Broken!

# tf-nightly
1.8.0-dev20180408 True
1.8.0-dev20180409 False   &lt;= Broken!
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='andresusanopinto' date='2018-04-17T14:13:24Z'>
		&lt;denchmark-link:https://github.com/annarev&gt;@annarev&lt;/denchmark-link&gt;
 When I trace through this code in Python 3, it does indeed look like  is mapped to this function:



tensorflow/tensorflow/python/util/compat.py


        Lines 48 to 68
      in
      3128b43






 @tf_export('compat.as_bytes', 'compat.as_str') 



 def as_bytes(bytes_or_text, encoding='utf-8'): 



 """Converts either bytes or unicode to `bytes`, using utf-8 encoding for text. 



  



   Args: 



     bytes_or_text: A `bytes`, `str`, or `unicode` object. 



     encoding: A string indicating the charset for encoding unicode. 



  



   Returns: 



     A `bytes` object. 



  



   Raises: 



     TypeError: If `bytes_or_text` is not a binary or unicode string. 



   """ 



 if isinstance(bytes_or_text, _six.text_type): 



 return bytes_or_text.encode(encoding) 



 elif isinstance(bytes_or_text, bytes): 



 return bytes_or_text 



 else: 



 raise TypeError('Expected binary or unicode string, got %r' % 



                     (bytes_or_text,)) 





However, if I do from tensorflow.python.util import compat, compat.as_str() maps to as_text() via (presumably) this appropriate redirection:



tensorflow/tensorflow/python/util/compat.py


        Lines 93 to 97
      in
      3128b43






 # Convert an object to a `str` in both Python 2 and 3. 



 if _six.PY2: 



 as_str = as_bytes 



 else: 



 as_str = as_text 





Is it possible that the @tf_export() decorator is rebinding the symbol incorrectly? From what I can tell, it has the correct behavior in Python 2, but should have different behavior in Python 3.
		</comment>
		<comment id='2' author='andresusanopinto' date='2018-04-17T16:05:45Z'>
		&lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/annarev&gt;@annarev&lt;/denchmark-link&gt;
 I think the tf_export could be explicitly called based on python 2 or 3 to address the issue. The following diff might work:
diff --git a/tensorflow/python/util/compat.py b/tensorflow/python/util/compat.py
index 4163fca..738479c 100644
--- a/tensorflow/python/util/compat.py
+++ b/tensorflow/python/util/compat.py
@@ -45,7 +45,6 @@ from tensorflow.python.util.tf_export import tf_export
 from tensorflow.python.util.tf_export import tf_export
 
 
-@tf_export('compat.as_bytes', 'compat.as_str')
 def as_bytes(bytes_or_text, encoding='utf-8'):
   """Converts either bytes or unicode to `bytes`, using utf-8 encoding for text.
 
@@ -68,7 +67,6 @@ def as_bytes(bytes_or_text, encoding='utf-8'):
                     (bytes_or_text,))
 
 
-@tf_export('compat.as_text')
 def as_text(bytes_or_text, encoding='utf-8'):
   """Returns the given argument as a unicode string.
 
@@ -93,8 +91,12 @@ def as_text(bytes_or_text, encoding='utf-8'):
 # Convert an object to a `str` in both Python 2 and 3.
 if _six.PY2:
   as_str = as_bytes
+  tf_export('compat.as_bytes', 'compat.as_str')(as_bytes)
+  tf_export('compat.as_text')(as_text)
 else:
   as_str = as_text
+  tf_export('compat.as_bytes')(as_bytes)
+  tf_export('compat.as_text', 'compat.as_str')(as_text)
 
 
 @tf_export('compat.as_str_any')
		</comment>
		<comment id='3' author='andresusanopinto' date='2018-04-17T16:19:32Z'>
		Added a PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/18601&gt;#18601&lt;/denchmark-link&gt;
 for the fix. Please take a look to see if it fixes the issue.
		</comment>
		<comment id='4' author='andresusanopinto' date='2018-04-18T15:34:50Z'>
		Can we get this merged in 1.8?
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.8/tensorflow/python/util/compat.py&gt;https://github.com/tensorflow/tensorflow/blob/r1.8/tensorflow/python/util/compat.py&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='andresusanopinto' date='2018-04-18T16:09:49Z'>
		&lt;denchmark-link:https://github.com/andresusanopinto&gt;@andresusanopinto&lt;/denchmark-link&gt;
 I added a PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/18662&gt;#18662&lt;/denchmark-link&gt;
 against r1.8 to carry the fix. As 1.8.0 release is very close, not sure if the fix could be applied in time though.
		</comment>
		<comment id='6' author='andresusanopinto' date='2018-04-19T07:50:59Z'>
		Thanks &lt;denchmark-link:https://github.com/yongtang&gt;@yongtang&lt;/denchmark-link&gt;
!
		</comment>
	</comments>
</bug>