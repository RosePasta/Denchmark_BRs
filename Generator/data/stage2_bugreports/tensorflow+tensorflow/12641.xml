<bug id='12641' author='quaeler' open_date='2017-08-28T04:58:44Z' closed_time='2018-02-08T00:46:32Z'>
	<summary>Improve all-in-memory file copy architecture (Python at least)</summary>
	<description>
Current file copy (at least via Python  (&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/platform/gfile.py#L22&gt;gfile.py&lt;/denchmark-link&gt;
→ &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/io/file_io.py#L371&gt;file_io.py&lt;/denchmark-link&gt;
 → &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/io/file_io.i#L113&gt;file_io.i&lt;/denchmark-link&gt;
)) involves copying the source contents into memory, and then writing memory to the destination. For scenarios like &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/12630&gt;#12630&lt;/denchmark-link&gt;
 which is working with an 11GB asset, this is unacceptable design.
file_system.h's WritableFile is not stubbed to allow anything like a streaming, though its RandomAccessFile is. (not entirely, entirely, true - i suppose WriteableFile.Append(const StringPiece&amp; data) could be employed in a streamable fashion -ish.)
To cull the Python low hanging fruit, at least, please implement &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/io/file_io.i#L113&gt;file_io.i&lt;/denchmark-link&gt;
 using a regular streaming design instead of the above described current design.
	</description>
	<comments>
		<comment id='1' author='quaeler' date='2017-08-28T20:40:29Z'>
		Created a PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/12658&gt;#12658&lt;/denchmark-link&gt;
 for that.
		</comment>
		<comment id='2' author='quaeler' date='2017-08-30T21:25:41Z'>
		Slurping the whole file into memory and writing it back out isn't exactly optimal. Streaming would be great. What would be even better is the &lt;denchmark-link:http://man7.org/linux/man-pages/man2/sendfile.2.html&gt;sendfile&lt;/denchmark-link&gt;
 system call, which does it entirely in kernel space. If would be terrific if &lt;denchmark-link:https://github.com/rohan100jain&gt;@rohan100jain&lt;/denchmark-link&gt;
 was able to implement that when src and dst are Unix FS, and do streaming otherwise.
		</comment>
		<comment id='3' author='quaeler' date='2017-08-31T03:31:17Z'>
		The implementation of CopyFile in PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/12658&gt;#12658&lt;/denchmark-link&gt;
 has been updated with calling  in Linux for posix file systems. Please take a look.
		</comment>
		<comment id='4' author='quaeler' date='2017-12-20T01:18:55Z'>
		It has been 14 days with no activity and this issue has an assignee.Please update the label and/or status accordingly.
		</comment>
		<comment id='5' author='quaeler' date='2018-01-03T19:11:44Z'>
		It has been 14 days with no activity and this issue has an assignee.Please update the label and/or status accordingly.
		</comment>
		<comment id='6' author='quaeler' date='2018-01-18T19:13:55Z'>
		Nagging Assignee: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='7' author='quaeler' date='2018-02-06T07:42:08Z'>
		Nagging Assignee: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='8' author='quaeler' date='2018-02-06T15:49:13Z'>
		There's a PR somewhere adding in-kernel sendfile copy support I spent a lot of time helping to review a while back. I don't know what the status of that is, but I hope the author is generous enough to bring it to completion, because it'd be a great notch in his belt because this isn't an easy problem to solve.
		</comment>
		<comment id='9' author='quaeler' date='2018-02-06T16:04:32Z'>
		It's the PR cited above - &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/12658&gt;#12658&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>