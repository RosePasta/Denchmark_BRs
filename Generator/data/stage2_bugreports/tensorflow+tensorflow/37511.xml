<bug id='37511' author='ujjwal-ai' open_date='2020-03-11T15:55:07Z' closed_time='2020-06-08T23:04:18Z'>
	<summary>Error retrieving regularization losses after adding them to a pretrained model.</summary>
	<description>
It appears that adding regularization losses to a pre-trained model results in some issue which leads to an error when retrieving the losses. I am having this problem with the TensorFlow 2.2.  Its git version is v1.12.1-26428-gcb73044.
The reproducible code is shown below:
&lt;denchmark-code&gt;import tensorflow as tf

class Model(tf.keras.Model):
    def __init__(self):
        super(Model, self).__init__()
        self._model = tf.keras.applications.ResNet101(include_top=False, weights='imagenet')

    def build(self, input_shape=None):
        for layer in self._model.layers:
            if type(layer) == tf.keras.layers.Conv2D:
                layer.add_loss( lambda : tf.keras.regularizers.l2(1e-5)(layer.kernel))

    def call(self, x):
        return self._net(x)


if __name__ == "__main__":
    m = Model()
    x = tf.random.uniform(shape=(1,3,512,512))
   m.build()
   print(m.losses)
&lt;/denchmark-code&gt;

The error message is -
AttributeError: 'Activation' object has no attribute 'kernel'
	</description>
	<comments>
		<comment id='1' author='ujjwal-ai' date='2020-03-12T06:46:19Z'>
		I was able to reproduce the issue with Tf-nightly.
Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/74bc7c8242362aefd7db0798b57ea2ef/untitled440.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='ujjwal-ai' date='2020-03-15T06:31:15Z'>
		&lt;denchmark-link:https://github.com/ujjwal-ai&gt;@ujjwal-ai&lt;/denchmark-link&gt;
 , Please find below code. It resolves the error.
import tensorflow as tf

class Model(tf.keras.Model):
    def __init__(self):
        super(Model, self).__init__()
        self._model = tf.keras.applications.ResNet101(include_top=False, weights='imagenet')

    def build(self, input_shape=None):
        for layer in self._model.layers:
            if type(layer) == tf.keras.layers.Conv2D:
                layer.kernel_regularizer = tf.keras.regularizers.l2(1e-5)

    def call(self, x):
        return self._model(x)


if __name__ == "__main__":
    m = Model()
    x = tf.random.uniform(shape=(1, 512, 512, 3))
    m.build()
    m.call(x)
    print(m.losses)
It turns out that  is not compatible with eager execution. Please read more about it &lt;denchmark-link:https://github.com/tensorflow/compression/issues/9&gt;here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='3' author='ujjwal-ai' date='2020-06-08T23:04:18Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='4' author='ujjwal-ai' date='2020-06-08T23:04:20Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37511&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37511&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='ujjwal-ai' date='2020-06-28T08:23:48Z'>
		
@ujjwal-ai , Please find below code. It resolves the error.
import tensorflow as tf

class Model(tf.keras.Model):
    def __init__(self):
        super(Model, self).__init__()
        self._model = tf.keras.applications.ResNet101(include_top=False, weights='imagenet')

    def build(self, input_shape=None):
        for layer in self._model.layers:
            if type(layer) == tf.keras.layers.Conv2D:
                layer.kernel_regularizer = tf.keras.regularizers.l2(1e-5)

    def call(self, x):
        return self._model(x)


if __name__ == "__main__":
    m = Model()
    x = tf.random.uniform(shape=(1, 512, 512, 3))
    m.build()
    m.call(x)
    print(m.losses)
It turns out that add_loss() is not compatible with eager execution. Please read more about it here.

Hey, thanks for the reference solution. I used this code to add regularization losses for pretrained model. But when I executed the code and listed down the losses, I got empty list. I am expecting a list of regularization losses based on number of convolutional layers in pretrained model.
		</comment>
	</comments>
</bug>