<bug id='42453' author='ragulpr' open_date='2020-08-18T10:01:11Z' closed_time='2020-10-16T02:40:12Z'>
	<summary>SeparableConv1D fails with padding="causal"</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): linux/amd64 tensorflow/tensorflow:2.3.0-gpu-jupyter
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below):  v1.12.1-39480-g36dabea898 2.4.0-dev20200817
Python version: 3.6

Describe the current behavior
tf.keras.layers.SeparableConv1D fails on build with padding=causal
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf
print(tf.__version__)
print(tf.version.GIT_VERSION, tf.version.VERSION)

model = tf.keras.Sequential()
model.add(tf.keras.Input((None,None,3)))
model.add(tf.keras.layers.SeparableConv1D(
                    dilation_rate=1,
                    filters = 3,
                    kernel_size=2,
                    padding='causal',
))
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;2.4.0-dev20200817
v1.12.1-39480-g36dabea898 2.4.0-dev20200817
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-1-f2de2533598a&gt; in &lt;module&gt;
      9                     filters = 3,
     10                     kernel_size=2,
---&gt; 11                     padding='causal',
     12 ))

/usr/local/lib/python3.6/dist-packages/tensorflow/python/training/tracking/base.py in _method_wrapper(self, *args, **kwargs)
    462     self._self_setattr_tracking = False  # pylint: disable=protected-access
    463     try:
--&gt; 464       result = method(self, *args, **kwargs)
    465     finally:
    466       self._self_setattr_tracking = previous_value  # pylint: disable=protected-access

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/sequential.py in add(self, layer)
    220       # If the model is being built continuously on top of an input layer:
    221       # refresh its output.
--&gt; 222       output_tensor = layer(self.outputs[0])
    223       if len(nest.flatten(output_tensor)) != 1:
    224         raise ValueError(SINGLE_LAYER_OUTPUT_ERROR_MSG)

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in __call__(self, *args, **kwargs)
    929     if _in_functional_construction_mode(self, inputs, args, kwargs, input_list):
    930       return self._functional_construction_call(inputs, args, kwargs,
--&gt; 931                                                 input_list)
    932 
    933     # Maintains info about the `Layer.call` stack.

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in _functional_construction_call(self, inputs, args, kwargs, input_list)
   1067         # Check input assumptions set after layer building, e.g. input shape.
   1068         outputs = self._keras_tensor_symbolic_call(
-&gt; 1069             inputs, input_masks, args, kwargs)
   1070 
   1071         if outputs is None:

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in _keras_tensor_symbolic_call(self, inputs, input_masks, args, kwargs)
    799       return nest.map_structure(keras_tensor.KerasTensor, output_signature)
    800     else:
--&gt; 801       return self._infer_output_signature(inputs, args, kwargs, input_masks)
    802 
    803   def _infer_output_signature(self, inputs, args, kwargs, input_masks):

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in _infer_output_signature(self, inputs, args, kwargs, input_masks)
    840           # TODO(kaftan): do we maybe_build here, or have we already done it?
    841           self._maybe_build(inputs)
--&gt; 842           outputs = call_fn(inputs, *args, **kwargs)
    843 
    844         self._handle_activity_regularization(inputs, outputs)

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/layers/convolutional.py in call(self, inputs)
   2030   def call(self, inputs):
   2031     if self.padding == 'causal':
-&gt; 2032       inputs = array_ops.pad(inputs, self._compute_causal_padding())
   2033     if self.data_format == 'channels_last':
   2034       strides = (1,) + self.strides * 2 + (1,)

TypeError: _compute_causal_padding() missing 1 required positional argument: 'inputs'
&lt;/denchmark-code&gt;

Here's where it &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/75801da4cd321aabbf79e78da1e5de1a10ba4c2a/tensorflow/python/keras/layers/convolutional.py#L249&gt;fails&lt;/denchmark-link&gt;

Same thing happens in stable version 2.3.0.
	</description>
	<comments>
		<comment id='1' author='ragulpr' date='2020-08-18T11:12:12Z'>
		I have tried in colab with Tensorflow version 2.3, nightly version () and was able to reproduce the issue. Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/a00dcae3a05c920edc9f22ea7ba63ebb/untitled262.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='ragulpr' date='2020-10-16T02:40:11Z'>
		This is fixed with tf-nightly version. See &lt;denchmark-link:https://colab.research.google.com/gist/ymodak/6a3b5b233fdea0015578bafde5e34ee1/github_issue39852.ipynb&gt;gist&lt;/denchmark-link&gt;

Thanks!
		</comment>
		<comment id='3' author='ragulpr' date='2020-10-16T02:40:13Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42453&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42453&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>