<bug id='38030' author='yoshihikoueno' open_date='2020-03-30T04:05:54Z' closed_time='2020-04-21T23:46:33Z'>
	<summary>Wrong usage of ```tf.keras.layers.Layer._maybe_build```</summary>
	<description>
The function &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/1f98a556eb4a8981241a9ebd4257d8e95060462c/tensorflow/python/keras/engine/base_layer.py#L2357-L2394&gt;tf.keras.layers.Layer._maybe_build&lt;/denchmark-link&gt;
 is used inappropriately in some functions inside tensorflow implementation.
For example, &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/1f98a556eb4a8981241a9ebd4257d8e95060462c/tensorflow/python/keras/engine/base_layer.py#L663-L705&gt;tf.keras.layers.Layer.compute_output_shape&lt;/denchmark-link&gt;
 calls &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/1f98a556eb4a8981241a9ebd4257d8e95060462c/tensorflow/python/keras/engine/base_layer.py#L2357-L2394&gt;tf.keras.layers.Layer._maybe_build&lt;/denchmark-link&gt;
 with  argument(&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/1f98a556eb4a8981241a9ebd4257d8e95060462c/tensorflow/python/keras/engine/base_layer.py#L687&gt;*1&lt;/denchmark-link&gt;
), where it's supposed to be .
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/1f98a556eb4a8981241a9ebd4257d8e95060462c/tensorflow/python/keras/engine/base_layer.py#L2357-L2394&gt;tf.keras.layers.Layer._maybe_build&lt;/denchmark-link&gt;
 tries to detect input shape by accessing  attribute(&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/1f98a556eb4a8981241a9ebd4257d8e95060462c/tensorflow/python/keras/engine/base_layer.py#L2371&gt;*2&lt;/denchmark-link&gt;
), which doesn't exist because  is not a tensor but  already, hence this function doesn't work as expected. This incident is eventually reported to a user as layer output shape inference failure and suggests overriding  function.
Although this error can be solved by overriding compute_output_shape as suggested by the error message, there're many cases where users don't need to do so if the functions are working properly.
Possible ways to solve this circumstance I can think of are


Add keyword argument input_shape to _maybe_build function so that they can receive either inputs or input_shapes.


Create a dummy tensor inside compute_output_shape which can be used as an input argument to _maybe_build function.


I think either way won't take that much time to implement, so I hope this can be fixed soon.
If developers in the TensorFlow team are busy and can't spare time for this issue, I can work on this and issue a pull request. In that case, please give me some suggestions or opinions regarding the implementation or the modification, so that it can be approved and merged smoothly.
Thank you.
	</description>
	<comments>
		<comment id='1' author='yoshihikoueno' date='2020-04-05T11:44:20Z'>
		Here is the sample code to demonstrate this issue.
from tensorflow.keras.layers import Layer
from tensorflow.keras import layers
from tensorflow.keras import Model
import traceback


class CustomLayer(Layer):
    def __init__(self, units_base, *args, **kargs):
        super().__init__(self, *args, **kargs)
        self.units_base = units_base
        return

    def build(self, input_shapes):
        self.layer = layers.Dense(self.units_base + input_shapes[-1])
        self.built = True
        return

    def call(self, inputs, *args, **kargs):
        x = self.layer(inputs)
        return x


class CustomModel(Model):
    def __init__(self, *args, **kargs):
        super().__init__(self, *args, **kargs)
        return

    def build(self, input_shapes):
        self.l0 = CustomLayer(input_shapes[-1])
        self.l1 = CustomLayer(input_shapes[-1])
        self.built = True
        return

    def call(self, inputs, *args, **kargs):
        x = self.l0(inputs)
        x = self.l1(x)
        return x


if __name__ == '__main__':
    print('Case1: the model is not built in prior to compute_output_shape')
    try:
        model = CustomModel()
        print('DEBUG: init bult:', model.built)
        outputshape = model.compute_output_shape([100, 50])
        print(outputshape)
    except Exception as e:
        print('Failed')
        traceback.print_exc()

    print('\nCase2: the model is built in prior to compute_output_shape')
    try:
        model = CustomModel()
        model.build([100, 50])
        print('DEBUG: init bult:', model.built)
        outputshape = model.compute_output_shape([100, 50])
        print(outputshape)
    except Exception as e:
        print('Failed')
        traceback.print_exc()
		</comment>
		<comment id='2' author='yoshihikoueno' date='2020-04-06T08:12:21Z'>
		&lt;denchmark-link:https://github.com/yoshihikoueno&gt;@yoshihikoueno&lt;/denchmark-link&gt;
, I tried with Tf2.2 rc1, received  . Please take a look at &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/0ee73dfa03dce12f0bcebc2496bdf7ae/untitled486.ipynb&gt;gist&lt;/denchmark-link&gt;
 and confirm the expected behavior. Thanks
		</comment>
		<comment id='3' author='yoshihikoueno' date='2020-04-06T09:04:18Z'>
		&lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 Thank you very much for sparing time to try out my sample code.
Yes, that behavior is not expected and it's caused by the bug I'm pointing out here. The root problem of this bug is that compute_output_shape function calls _maybe_build function with the wrong argument, which makes input_shapes to be None.
With my &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/38031&gt;pull request&lt;/denchmark-link&gt;
, it works as expected.
		</comment>
		<comment id='4' author='yoshihikoueno' date='2020-04-06T09:12:04Z'>
		&lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 Here's the sample result.
With the current master branch:
&lt;denchmark-code&gt;Case1: the model is not built in prior to compute_output_shape
DEBUG: init bult: False
Failed

Case2: the model is built in prior to compute_output_shape
DEBUG: init bult: True
Traceback (most recent call last):
  File "&lt;ipython-input-2-041b5e76fb83&gt;", line 45, in &lt;module&gt;
    outputshape = model.compute_output_shape([100, 50])
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/network.py", line 718, in compute_output_shape
    return super(Network, self).compute_output_shape(input_shape)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py", line 681, in compute_output_shape
    self._maybe_build(input_shape)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py", line 2416, in _maybe_build
    self.build(input_shapes)  # pylint:disable=not-callable
  File "&lt;ipython-input-2-041b5e76fb83&gt;", line 29, in build
    self.l0 = CustomLayer(input_shapes[-1])
TypeError: 'NoneType' object is not subscriptable
(100, 150)
&lt;/denchmark-code&gt;

With &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/38031&gt;the pull request&lt;/denchmark-link&gt;
 applied:
&lt;denchmark-code&gt;Case1: the model is not built in prior to compute_output_shape
DEBUG: init bult: False
(100, 150)

Case2: the model is built in prior to compute_output_shape
DEBUG: init bult: True
(100, 150)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='yoshihikoueno' date='2020-04-21T23:46:34Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38030&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38030&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>