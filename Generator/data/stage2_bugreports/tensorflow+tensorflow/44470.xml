<bug id='44470' author='djpetti' open_date='2020-10-30T21:03:48Z' closed_time='2020-12-04T18:26:33Z'>
	<summary>per_image_standardization Breaks Keras Model Loading</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu: 20.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: None
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): v2.3.0-54-gfcc4b966f1 2.3.1
Python version: 3.8.5
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Describe the current behavior
Here is a small example script that demonstrates the issue:
import tensorflow as tf
from tensorflow.keras import layers


inputs = tf.keras.Input(shape=(100, 100, 3))
normalized = layers.Lambda(tf.image.per_image_standardization)(inputs)
dense1 = layers.Dense(100, activation="relu")(normalized)
dense2 = layers.Dense(10, activation="softmax")(dense1)
model = tf.keras.Model(inputs=inputs, outputs=dense2)

model.save("my_model.hd5", save_format="h5")

new_model = tf.keras.models.load_model("my_model.hd5")  # &lt;-- Error here
To my knowledge, this should work. However, when I run it, I get an error on the last line:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/daniel/git/cotton_counter/.venv/lib/python3.8/site-packages/tensorflow/python/util/dispatch.py", line 201, in wrapper
    return target(*args, **kwargs)
TypeError: 'str' object is not callable

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "min_loading_bug_example.py", line 13, in &lt;module&gt;
    new_model = tf.keras.models.load_model("my_model.hd5")
  File "/home/daniel/git/cotton_counter/.venv/lib/python3.8/site-packages/tensorflow/python/keras/saving/save.py", line 182, in load_model
    return hdf5_format.load_model_from_hdf5(filepath, custom_objects, compile)
  File "/home/daniel/git/cotton_counter/.venv/lib/python3.8/site-packages/tensorflow/python/keras/saving/hdf5_format.py", line 177, in load_model_from_hdf5
    model = model_config_lib.model_from_config(model_config,
  File "/home/daniel/git/cotton_counter/.venv/lib/python3.8/site-packages/tensorflow/python/keras/saving/model_config.py", line 55, in model_from_config
    return deserialize(config, custom_objects=custom_objects)
  File "/home/daniel/git/cotton_counter/.venv/lib/python3.8/site-packages/tensorflow/python/keras/layers/serialization.py", line 171, in deserialize
    return generic_utils.deserialize_keras_object(
  File "/home/daniel/git/cotton_counter/.venv/lib/python3.8/site-packages/tensorflow/python/keras/utils/generic_utils.py", line 354, in deserialize_keras_object
    return cls.from_config(
  File "/home/daniel/git/cotton_counter/.venv/lib/python3.8/site-packages/tensorflow/python/keras/engine/functional.py", line 616, in from_config
    input_tensors, output_tensors, created_layers = reconstruct_from_config(
  File "/home/daniel/git/cotton_counter/.venv/lib/python3.8/site-packages/tensorflow/python/keras/engine/functional.py", line 1214, in reconstruct_from_config
    process_node(layer, node_data)
  File "/home/daniel/git/cotton_counter/.venv/lib/python3.8/site-packages/tensorflow/python/keras/engine/functional.py", line 1162, in process_node
    output_tensors = layer(input_tensors, **kwargs)
  File "/home/daniel/git/cotton_counter/.venv/lib/python3.8/site-packages/tensorflow/python/keras/engine/base_layer.py", line 925, in __call__
    return self._functional_construction_call(inputs, args, kwargs,
  File "/home/daniel/git/cotton_counter/.venv/lib/python3.8/site-packages/tensorflow/python/keras/engine/base_layer.py", line 1117, in _functional_construction_call
    outputs = call_fn(cast_inputs, *args, **kwargs)
  File "/home/daniel/git/cotton_counter/.venv/lib/python3.8/site-packages/tensorflow/python/keras/layers/core.py", line 903, in call
    result = self.function(inputs, **kwargs)
  File "/home/daniel/git/cotton_counter/.venv/lib/python3.8/site-packages/tensorflow/python/util/dispatch.py", line 205, in wrapper
    result = dispatch(wrapper, args, kwargs)
TypeError: 'module' object is not callable
&lt;/denchmark-code&gt;

Describe the expected behavior
I expect this to load the model without issue.
Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
Poking around in the debugger, the issue seems to be with &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/5681c179eff80bce00e526303950b67b23cad14c/tensorflow/python/util/dispatch.py#L205&gt;this code&lt;/denchmark-link&gt;
 in . Specifically, it looks like the  variable is being set to the  module instead of the  function inside that module. I'm not an expert on the idiosyncrasies of Tensorflow or Python closures, but it seems likely that something weird is going on with scoping here. For some reason, it seems like it's using the global definition of  from  (which would be active when the  decorator is applied) instead of the  function.
	</description>
	<comments>
		<comment id='1' author='djpetti' date='2020-11-02T07:58:57Z'>
		I have tried in colab with TF version 2.3.1 and nightly version() and was able to reproduce the issue. Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/4ba76c218a0ab0465aeecb5c47dbf3df/untitled483.ipynb#scrollTo=7LAXmC9S501o&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='djpetti' date='2020-12-04T18:26:33Z'>
		When creating functional models, you do not need to add Lambda around TensorFlow functions -- just this is fine:
normalized = tf.image.per_image_standardization(inputs)
Give this a try, and if you are still getting an error please reopen this bug. It passes with TF-nightly
		</comment>
		<comment id='3' author='djpetti' date='2020-12-04T18:26:35Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44470&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44470&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>