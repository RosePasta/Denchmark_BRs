<bug id='29820' author='mttbx' open_date='2019-06-15T10:41:53Z' closed_time='2019-06-26T06:07:16Z'>
	<summary>framework api int64 compatible problem</summary>
	<description>
It seems tensorflow have compatible problem for Shard and int64
&lt;denchmark-code&gt;auto job = [&amp;](int64 start, int64 limit)
{
            for (int64 i = start; i&lt;limit; i++)
            {
                std::cout &lt;&lt; start &lt;&lt; std::endl; // Segmentation fault (core dumped)
            }
};

auto job = [&amp;](int64 start, int64 limit)
{
            for (int i=0; i&lt;4; i++)
            {
                std::cout &lt;&lt; start &lt;&lt; std::endl; // ok
            }
};

const DeviceBase::CpuWorkerThreads&amp; worker_threads = *(context-&gt;device()-&gt;tensorflow_cpu_worker_threads());
const int64_t shard_cost = 10000;
Shard(worker_threads.num_threads, worker_threads.workers,
              (int64)4, shard_cost, job);

&lt;/denchmark-code&gt;

system info:

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): linux ubuntu 18.04
TensorFlow installed from (source or binary):binary
TensorFlow version (use command below):1.13 v1.13.1-0-g6612da8951
Python version:3.5
CUDA/cuDNN version:10/7.5
GPU model and memory:7.5/24gb

	</description>
	<comments>
		<comment id='1' author='mttbx' date='2019-06-17T12:19:59Z'>
		Will it be possible to provide a full code snippet that we can use to reproduce the issue. This will help us to proceed faster. Thanks!
		</comment>
		<comment id='2' author='mttbx' date='2019-06-18T06:22:14Z'>
		sure
testbug.cc:
&lt;denchmark-code&gt;#include "tensorflow/core/framework/op_kernel.h"
#include "tensorflow/core/framework/register_types.h"
#include "tensorflow/core/framework/tensor.h"
#include "tensorflow/core/framework/tensor_shape.h"
#include "tensorflow/core/framework/register_types.h"
#include "tensorflow/core/framework/op.h"
#include "tensorflow/core/framework/shape_inference.h"
#include "tensorflow/core/util/work_sharder.h"

#include &lt;iostream&gt;
#include &lt;cmath&gt;

using namespace tensorflow;

REGISTER_OP("TestBug")
    .Output("dummy: float");

class TestBugOp : public OpKernel
{
public:
explicit TestBugOp(OpKernelConstruction* context)
        : OpKernel(context)
{

}

void Compute(OpKernelContext* context) override
{
    Tensor* dummy = NULL;
    OP_REQUIRES_OK(context, context-&gt;allocate_output(0, {1},
                                                     &amp;dummy));
    auto job = [&amp;](int64 start, int64 limit)
    {
        for (int64 i = start; i&lt;limit; i++)
        {
            std::cout &lt;&lt; start &lt;&lt; std::endl; // Segmentation fault (core dumped)
        }
    };
    
    /*
    auto job = [&amp;](int64 start, int64 limit)
    {
        for (int i = 0; i&lt;4; i++)
        {
            std::cout &lt;&lt; i &lt;&lt; std::endl; // ok
        }
    };
    */

    const DeviceBase::CpuWorkerThreads&amp; worker_threads = *(context-&gt;device()-&gt;tensorflow_cpu_worker_threads());
    const int64_t shard_cost = 10000;
    Shard(worker_threads.num_threads, worker_threads.workers,
              (int64)100, shard_cost, job);

}
};

REGISTER_KERNEL_BUILDER(
  Name("TestBug").Device(DEVICE_CPU),
  TestBugOp
);
    
&lt;/denchmark-code&gt;

testbug.py:
&lt;denchmark-code&gt;import tensorflow as tf
extr_module = tf.load_op_library('./build/libextr_module.so')

dummy = extr_module.test_bug()

with tf.Session() as sess:
    sess.run([dummy])
&lt;/denchmark-code&gt;

CMakeLists.txt:
&lt;denchmark-code&gt;CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(extr_module)


# compiler flags
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -O2 ${OpenMP_CXX_FLAGS} -Wall -fPIC -D_GLIBCXX_USE_CXX11_ABI=0 -DGOOGLE_CUDA=1")

# TensorFlow dependencies
EXECUTE_PROCESS(COMMAND python3.5 -c "import os; os.environ['TF_CPP_MIN_LOG_LEVEL']='3'; import tensorflow as tf; print(tf.sysconfig.get_include(), end='', flush=True)"  OUTPUT_VARIABLE TF_INC)

EXECUTE_PROCESS(COMMAND python3.5 -c "import os; os.environ['TF_CPP_MIN_LOG_LEVEL']='3'; import tensorflow as tf; print(tf.sysconfig.get_lib(), end='', flush=True)"  OUTPUT_VARIABLE TF_LIB)


MESSAGE(STATUS "Found TF_INC: " ${TF_INC})
#MESSAGE(STATUS "Found TF_INC_EXTERNAL: " ${TF_INC}/external/nsync/public)
MESSAGE(STATUS "Found TF_LIB: " ${TF_LIB})


INCLUDE_DIRECTORIES(${TF_INC})
#INCLUDE_DIRECTORIES(${TF_INC}/external/nsync/public)
LINK_DIRECTORIES(${TF_LIB})


ADD_LIBRARY(extr_module SHARED
  testbug.cc
)

TARGET_LINK_LIBRARIES(extr_module tensorflow_framework)
&lt;/denchmark-code&gt;

test:
&lt;denchmark-code&gt;mkdir build
cd build
cmake ..
make
cd ..
python3 testbug.py
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='mttbx' date='2019-06-26T06:07:16Z'>
		problem solved, I changed g++ to 4.8 version, and all bug solved. solution is referenced to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/13308&gt;#13308&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='mttbx' date='2019-06-26T06:07:17Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=29820&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=29820&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>