<bug id='37024' author='Jup11ter' open_date='2020-02-24T16:49:51Z' closed_time='2020-03-28T14:16:14Z'>
	<summary>Convolution operations (such as Conv2d) does not detect corner case 'kernel_size = 0', which leads to an unexpected result.</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock
example script provided in TensorFlow):
OS Platform and Distribution (e.g.,
Linux Ubuntu 16.04): Windows 10
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if
the issue happens on mobile device: -
TensorFlow installed from (source or
binary):Binary
TensorFlow version (use command below): 1.15.0 -cpu
Python version: 3.6.9
Bazel version (if compiling from source):-
GCC/Compiler version (if compiling from
source): -
CUDA/cuDNN version: -
GPU model and memory:-

Describe the current behavior
When I use convolution-related operations, Tensorflow doesn't seem to handle the corner case  'kernel_size = 0' well. The problem can be divided into two parts:

When 'padding = same' is set, SeparableConv2D \ DepthwiseConv2D\Conv2D \ Conv2DTranspose takes kernel_size = 0 as a normal value to calculate the padding/crop shape, and finally reports an Negative-shape error . For example,  Conv2DTranspos reports a  ValueError: crops cannot be negative for 'conv2d_transpose_1/atrous_conv2d_transpose/BatchToSpaceND' (op: 'BatchToSpaceND') with input shapes: [9,10,10,2], [2], [2,2] and with computed input tensors: input[1] = &lt;3 3&gt;, input[2] = &lt;[-2 0][-2 0]&gt;.  at tensorflow_core\python\framework\ops.py line 1610. The negative value is actually created  in tensorflow_core\python\ops\nn_ops.py. For example, the negative value which leads to the padding error of DepthwiseConv2D is calculated around line 619 of nn_ops.py). See the following snapshot of nn_ops.py.

&lt;denchmark-link:https://user-images.githubusercontent.com/61384431/75172507-573c3400-5768-11ea-9747-dcd52835118a.jpg&gt;&lt;/denchmark-link&gt;


When  'padding=valid' is set, the situation is even worse. **DepthwiseConv2D and SeparableConv2D can build the model and  even predict. But the outputs are the all-zero matrices. Conv2D can also build and save the model, but it seems to get stuck in an infinite loop when predicting. It takes a lot of time and eventually gets no result. **Only Conv2DTranspose behaves normally and  reports the following error in tensorflow_core\python\client\session.py line1470

tensorflow.python.framework.errors_impl.InvalidArgumentError: Conv2DCustomBackpropInput: Size of out_backprop doesn't match computed: actual = 16, computed = 17 spatial_dim: 1 input: 16 filter: 0 output: 16 stride: 1 dilation: 1
	 [[{{node conv2d_transpose_1_1/atrous_conv2d_transpose/Conv2DBackpropInput}}]]
From the description above, we conclude that Tensorflow seems to lack a critical check whether kernel_size is  0 when conducting convolution-related operations, which is a dangerous corner case. This illegal parameter should not be brought into the calculation, but Tensorflow uses it to build a layer and even uses this layer to process the input and get all zero matrices as output. This should be a logical bug.
Standalone code to reproduce the issue
import os
import numpy as np
import keras.layers as L
import keras.backend as K
import importlib
from keras.engine import Model, Input

## Using TensorFlow as Keras backend.
## Input dtype default is float32

'''kwargs={'filters': 8, 
  'kernel_size': 0,
  'padding': 'same',
  'strides': 2, 
  'dilation_rate': 1,
  'data_format': 'channels_last'}'''# Conv2d/SeparableConv2D

kwargs={'kernel_size': 0,
  'padding': 'same',
  'strides': 2, 
  'dilation_rate': 1,
  'data_format': 'channels_last'}# DepthwiseConv2d
input = (10 * np.random.random((1,32,32,16)))
layer = L.convolutional.DepthwiseConv2D(**kwargs)# you can use Conv2D\SeparableConv2D\Conv2DTranspose instead of DepthwisConv2D
#layer = L.convolutional.SeparableConv2D(**kwargs)
#layer=L.convolutional.Conv2D(**kwargs)
x = Input(batch_shape=input.shape)
y = layer(x)
bk_model = Model(x, y)
model_path = os.path.join('./', 'model.h5')
bk_model.save(model_path, bk_model)
'''from keras.models import load_model
model = load_model(model_path)
output = model.predict(input)'''
print('finish')
	</description>
	<comments>
		<comment id='1' author='Jup11ter' date='2020-03-06T08:51:25Z'>
		&lt;denchmark-link:https://github.com/Jup11ter&gt;@Jup11ter&lt;/denchmark-link&gt;
, Thanks for reporting this issue.
I tried replicating the issue with TF 1.15. but getting different error.
Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/032c54ca5347603ded5e772c0858f476/untitled422.ipynb&gt;here&lt;/denchmark-link&gt;
 and confirm. Thanks!
		</comment>
		<comment id='2' author='Jup11ter' date='2020-03-06T12:55:11Z'>
		
@Jup11ter, Thanks for reporting this issue.
I tried replicating the issue with TF 1.15. but getting different error.
Please find the gist here and confirm. Thanks!

Thank you for your help!
The code expression in the previous version is not clear enough, which brings inconvenience to your reproduction.  ( can save the model  (Without reporting an error). Hoping to have a positive effect on solving the problem.
Thank you again
&lt;denchmark-link:https://user-images.githubusercontent.com/61384431/76085155-7484c400-5fec-11ea-89b9-f3920521fe65.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='Jup11ter' date='2020-03-09T09:22:57Z'>
		&lt;denchmark-link:https://github.com/Jup11ter&gt;@Jup11ter&lt;/denchmark-link&gt;
, Tried with update code to replicate issue but code executed without any error.
Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/9468015fd6292e82bf0741187aaa0b1c/untitled432.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks
		</comment>
		<comment id='4' author='Jup11ter' date='2020-03-10T05:48:45Z'>
		
@Jup11ter, Tried with update code to replicate issue but code executed without any error.
Please find the gist here. Thanks

Thank you for your help!
Yes, this is exactly the problem I described above. Using the dangerous parameter kernel_size = 0, TensorFlow can still generate and save the model. It seems to lack a detection mechanism for this illogical parameters.
		</comment>
		<comment id='5' author='Jup11ter' date='2020-03-21T04:28:53Z'>
		Check for zero  in conv layers has been added. You should have it in tf-nightly version.


commit &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/1e102f63964365d82d7f22402b7ba21e0e0e64fe&gt;1e102f6&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='Jup11ter' date='2020-03-24T07:09:22Z'>
		
Check for zero kernel_size in conv layers has been added. You should have it in tf-nightly version.



tensorflow/tensorflow/python/keras/layers/convolutional.py


         Line 132
      in
      84eb083






 if not all(self.kernel_size): 





commit 1e102f6

I will try this version, Thank you very much for your help!
		</comment>
		<comment id='7' author='Jup11ter' date='2020-03-28T14:16:08Z'>
		This should have been fixed. Closing it for now. Let us know if any other issues come up
		</comment>
		<comment id='8' author='Jup11ter' date='2020-03-28T14:16:15Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37024&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37024&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>