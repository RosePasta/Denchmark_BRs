<bug id='4135' author='kevin-keraudren' open_date='2016-08-31T21:31:33Z' closed_time='2017-01-27T18:13:25Z'>
	<summary>Seg fault when computing gradient of 3D convolution filter with (1,1,1) kernel</summary>
	<description>
Minimal example to reproduce the bug:
import numpy as np
import tensorflow as tf

sess = tf.Session()
with sess.as_default():
    # Input: [batch, height, width, depth, input_channels]
    x_shape = [3, 85, 65, 83, 8]
    # Filter: [kernel_height, kernel_width, depth, input_channels, output_channels]
    f_shape = [1, 1, 1, x_shape[-1], 32]
    # Output: [batch, height, width, depth, output_channels]
    y_shape = [3, 85, 65, 83, f_shape[-1]]

    np.random.seed(1)  # Make it reproducible.
    x_val = np.random.random_sample(x_shape).astype(np.float32)
    f_val = np.random.random_sample(f_shape).astype(np.float32)
    output_val = np.random.random_sample(y_shape).astype(np.float32)
    x = tf.constant(x_val, name="x", dtype=tf.float32)
    f = tf.constant(f_val, name="f", dtype=tf.float32)

    output = tf.nn.conv3d(x, f, strides=(1,1,1,1,1), padding="SAME")

    r = tf.gradients(output, f)
    print(r[0].eval())
this leads to a seg fault, tested on a Mac with CPU, both with tensorflow 0.9.0 (binary release) and when compiled from source (last commit &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/ad4f02a69162abe5d242b7d94f62138849aec9ab&gt;ad4f02a&lt;/denchmark-link&gt;
 ).
For certain values of (x_shape[â€“1], f_shape[-1]), for instance (2,4) or (8,32), the seg fault occurs, but for other values (2,2) or (16,32), there is no seg fault.
Inserting some  print statements in the code shows that the segmentation fault occurs during this function call in Conv3DBackpropFilterOp::Compute &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/conv_grad_ops_3d.cc#L315&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/conv_grad_ops_3d.cc#L315&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='kevin-keraudren' date='2016-08-31T22:58:36Z'>
		Thanks for the report.  Internal bug opened.
		</comment>
		<comment id='2' author='kevin-keraudren' date='2016-09-07T09:27:52Z'>
		Also running into this on 0.10.0rc0 (and nightly) on ubuntu 14.04 and python 3.5
		</comment>
		<comment id='3' author='kevin-keraudren' date='2016-09-26T23:32:25Z'>
		I'm not seeing this with the latest nightly?
If I don't hear back I'll assume this was resolved.
		</comment>
		<comment id='4' author='kevin-keraudren' date='2016-10-06T18:43:42Z'>
		I was able to reproduce this on Mac OS X with the nightly. So this appears to be a Mac only bug.
		</comment>
		<comment id='5' author='kevin-keraudren' date='2016-12-16T08:28:03Z'>
		It does not cause crash on my Linux/Ubuntu 14.04, for both CPU and GPU.
Btw, try not to use Mac OS because Apple developers tend to create their own standards which is different from the state-of-the-art convention, causing inconvenience and trouble. Last time, when I was doing online translation service. I found that only for Mac OS, if your URL ends with a multi-byte UTF-8 character, the system API will automatically append a NULL character at the end. This causes my web program to function incorrectly for Apple devices.
		</comment>
		<comment id='6' author='kevin-keraudren' date='2017-01-24T22:46:31Z'>
		&lt;denchmark-link:https://github.com/kevin-keraudren&gt;@kevin-keraudren&lt;/denchmark-link&gt;
 could you try with the latest version and build with ?
		</comment>
		<comment id='7' author='kevin-keraudren' date='2017-01-27T18:13:25Z'>
		Closing due to inactivity. Feel free to re-open if you would like us to look again.
		</comment>
	</comments>
</bug>