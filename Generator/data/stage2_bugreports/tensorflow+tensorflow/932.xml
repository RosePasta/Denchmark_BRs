<bug id='932' author='dvyukov' open_date='2016-01-29T14:13:14Z' closed_time='2016-06-07T07:56:18Z'>
	<summary>thread pool deadlocks on shutdown</summary>
	<description>
ThreadPool dtor does not pop waiters from waiters_ list. As the result dead waiters are left on the list. If remaining tasks submit new tasks, thread pool deadlocks because some notifications are consumed by the leftover dead waiters instead of alive threads that should receive the notifications.
Here is a simple test that does classical parallel decomposition and reliably deadlocks:
static void BM_ParallelDivide(int iters, const char* impl) {
  THREAD_POOL_IMPL_NAME = impl;
  for (int i = 0; i &lt; iters; i++) {
    const int kTasks = 10;
    const int kLevels = 22;
    std::atomic&lt;unsigned&gt; count(kTasks * (1 &lt;&lt; kLevels));
    mutex done_lock;
    condition_variable done;
    bool done_flag = false;
    std::function&lt;void(int)&gt; work;
    ThreadPool pool(Env::Default(), "test", kNumThreads);
    work = [&amp;pool, &amp;work, &amp;count, &amp;done_lock, &amp;done, &amp;done_flag](int level) {
      if (level-- &gt; 0) {
        pool.Schedule([&amp;work, level]() { work(level); });
        pool.Schedule([&amp;work, level]() { work(level); });
        return;
      }
      delay();
    };
    for (int t = 0; t &lt; kTasks; ++t) {
      pool.Schedule([&amp;work]() {
        work(kLevels);
      });
    }
  }
}
	</description>
	<comments>
		<comment id='1' author='dvyukov' date='2016-03-08T18:15:56Z'>
		&lt;denchmark-link:https://github.com/zheng-xq&gt;@zheng-xq&lt;/denchmark-link&gt;
: Do you have thoughts on this?  The non-blocking thread pool PR is problematic since it breaks Eigen's FIFO requirement, but the deadlock issue seems like something we should fix.
		</comment>
		<comment id='2' author='dvyukov' date='2016-03-09T18:56:09Z'>
		&lt;denchmark-link:https://github.com/zheng-xq&gt;@zheng-xq&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/girving&gt;@girving&lt;/denchmark-link&gt;

On Tue, Mar 8, 2016 at 8:08 PM, Zhifeng Chen wrote:

The thread calling 'delete p' should have the sole ownership of p, where p is generally any c++ object.
So, it's not valid if one thread is calling a threadpool p while another thread calling p-&gt;Add().

That's true. But the thread pool waits for the existing tasks to finish in destructor. If you combine these two points, you conclude that tasks are not allowed to submit child tasks to the thread pool. Ever. That's just does not make sense. So you need to either (1) wait for all tasks to finish, including subtasks of existing tasks, or (2) don't wait in thread pool destructor at all, stop threads as soon as possible, assert that the queue is empty now and exit.
I am working on a fix.
		</comment>
		<comment id='3' author='dvyukov' date='2016-06-06T19:01:09Z'>
		&lt;denchmark-link:https://github.com/dvyukov&gt;@dvyukov&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/rmlarsen&gt;@rmlarsen&lt;/denchmark-link&gt;
: Did the recent thread pool changes resolve this?
		</comment>
		<comment id='4' author='dvyukov' date='2016-06-06T19:01:51Z'>
		&lt;denchmark-link:https://github.com/rmlarsen&gt;@rmlarsen&lt;/denchmark-link&gt;
: Assigning you since &lt;denchmark-link:https://github.com/dvyukov&gt;@dvyukov&lt;/denchmark-link&gt;
 isn't part of the Github org.  Should we add him?
		</comment>
		<comment id='5' author='dvyukov' date='2016-06-07T07:56:08Z'>
		Yes, it's fixed. New thread pool waits for completion of all work.
		</comment>
	</comments>
</bug>