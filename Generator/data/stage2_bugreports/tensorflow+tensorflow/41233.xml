<bug id='41233' author='danielfllaneza' open_date='2020-07-09T10:43:04Z' closed_time='2020-07-16T13:25:59Z'>
	<summary>Keras 'Model' object has no attribute '_callable_losses'</summary>
	<description>

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): CentOS inux release 7.6.1810
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.14.0
Python version: 3.7.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: V9.1.85
GPU model and memory: Tesla K80 24C

I have a class with a model and I want to add a custom loss with three arguments.  Upon building the model, the following error is raised:
&lt;denchmark-code&gt;&lt;ipython-input-124-46b9e7f916ce&gt; in _build(self)
     50 
     51         self.get_optimiser()
---&gt; 52         model = self.get_loss(inputs, x)
     53 
     54         return model

&lt;ipython-input-124-46b9e7f916ce&gt; in get_loss(self, inputs, outputs)
    151             model = Model(inputs=[inputs, y_true, is_weight], outputs=[outputs])
    152 
--&gt; 153             model.add_loss(weighted_dice_loss(y_true, outputs, is_weight))
    154             self._model.compile(optimizer = self._optimiser, loss = None, metrics = [dice_coef])
    155 

~/miniconda3/envs/segment/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py in add_loss(self, losses, inputs)
    899         eager_losses.append(_tag_unconditional(loss))
    900 
--&gt; 901     self._callable_losses += callable_losses
    902 
    903     call_context = base_layer_utils.is_in_call_context()

AttributeError: 'Model' object has no attribute '_callable_losses'
&lt;/denchmark-code&gt;

The expected behaviour is, thus, that the model accepts this custom loss, since it has three arguments instead of two when calling unet._build() without getting thrown an error:
&lt;denchmark-code&gt;unet = UNet()
unet._build()

&lt;/denchmark-code&gt;

The minimum reproducible code is as follows:
&lt;denchmark-code&gt;class UNet():

    def __init__(self, **kwargs):
        
        self._input_shape = kwargs.get('input_shape', (12, 86, 98,1))
        self._blocks = kwargs.get('blocks', 2)
        self._layers = kwargs.get('layers', 8)
        self._n_filters = kwargs.get('n_filters', 16)
        self._patch = kwargs.get('patch', (3,3,3))
        self._activation = kwargs.get('activation', 'elu')
        self._activation_last = kwargs.get('activation_last', 'sigmoid')
        self._kernel_initializer = kwargs.get('kernel_initializer', 'glorot_normal')
        self._padding = kwargs.get('padding', 'same')
        self._learnrate = kwargs.get('learnrate',0.001)
        self._momentum = kwargs.get('momentum',0.99)
        self._decay = kwargs.get('decay',0.0)
        self._mode = kwargs.get('mode','train')
           
    def _build(self):
        
        # Initialise array to keep skip connections
        self.skips = []
        
        inputs = Input(shape = self._input_shape)
        
        x = self.first_layers(inputs)
        x = self.contractive_path(x)
        x = self.middle_path(x)
        x = self.expansive_path(x)
        
        self.get_optimiser()
        model = self.get_loss(inputs, x)
            
        return model
    
    def first_layers(self, inputs):
       
        layer = Conv3D(filters = self._n_filters, kernel_size = self._patch, activation = self._activation, kernel_initializer = self._kernel_initializer,
                padding = self._padding)(inputs)
        
        return layer
    
    def contractive_path(self, layer):

        for b in range(0,self._blocks):
            for i in range(0,self._layers):
                layer = Conv3D(filters = self._n_filters, kernel_size = self._patch, activation = self._activation, kernel_initializer = self._kernel_initializer,
                padding = self._padding)(layer)
            
            #append for later use in up-sampling
            self.skips.append(layer)
            
            #downsampling (using patch(2,2,2) and stride of 2, similar to MaxPooling3D but uses less parameters)
            layer = Conv3D(filters = self._n_filters, kernel_size = (2,2,2), strides = (2, 2, 2), activation = self._activation, kernel_initializer = self._kernel_initializer,
                padding = self._padding)(layer)

            #post-pooling, double number of filters
            self._n_filters = int(self._n_filters*2)
     
        return layer 
        
    def middle_path(self, layer):
   
        for i in range(0,self._layers):
            layer = Conv3D(filters = self._n_filters, kernel_size = self._patch, activation = self._activation, kernel_initializer = self._kernel_initializer,
                padding = self._padding)(layer)
        
        return layer

    def expansive_path(self, layer):

        for u in range(0,self._blocks):
            layer = UpSampling3D(size = (2,2,2), data_format = None)(layer) 
            
            # skip connection from DOWN_PATH
            concat_lr = self.skips[-1]

            layer, concat_lr = cropping_tensor(layer, concat_lr)
            layer = Concatenate()([layer, concat_lr])
            
            for i in range(0,(self._layers)):
                layer = Conv3D(filters = self._n_filters, kernel_size = self._patch, activation = self._activation, kernel_initializer = self._kernel_initializer,
                padding = self._padding)(layer)
                
            self._n_filters = int(self._n_filters/2)
            #print('UpBlock',str(u),' : end_n_filters ', str(n_filters))
            
            self.skips = self.skips[:-1] # get rid of last skip connection 
            
        ### output layer 
        y_pred = Conv3D(1, (1,1,1), activation = self._activation_last)(layer)    
        
        return y_pred
    
    def get_optimiser(self):
            self._optimiser = SGD(lr = self._learnrate, momentum = self._momentum, decay = self._decay, nesterov = False)
    
    def get_loss(self, inputs, outputs):
            
            y_true = Input(self._input_shape, name = 'y_true')
            is_weight = Input(self._input_shape, name = 'is_weight')

            model = Model(inputs=[inputs, y_true, is_weight], outputs=[outputs])
            
            model.add_loss(weighted_dice_loss(y_true, outputs, is_weight))
            self._model.compile(optimizer = self._optimiser, loss = None, metrics = [dice_coef])
        
        return self._model
&lt;/denchmark-code&gt;

The weighted_dice_loss function is defined as follows:
&lt;denchmark-code&gt;def weighted_dice_loss(y_true, y_pred, w):
    
    return -weighted_dice_coef(y_true, y_pred, w)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='danielfllaneza' date='2020-07-09T11:51:31Z'>
		Of note, I was importing tensorflow as follows:
&lt;denchmark-code&gt;import tensorflow.v1.compat as tf
&lt;/denchmark-code&gt;

Upon updating tensorflow (v2.2.0) and doing the following imports,
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import Input, optimizers
from tensorflow.keras.models import Sequential, load_model


from keras.layers.convolutional import Conv3D, Conv3DTranspose
from keras.layers.normalization import BatchNormalization
from keras.layers import Cropping3D, UpSampling3D, AveragePooling3D
&lt;/denchmark-code&gt;

I run the code again I get thrown this:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-4-c4c292a59224&gt; in &lt;module&gt;
     11 
     12 
---&gt; 13 unet_model = unet._build()

&lt;ipython-input-2-9245d04f54db&gt; in _build(self)
     44         inputs = Input(shape = self._input_shape)
     45 
---&gt; 46         x = self.first_layers(inputs)
     47         x = self.contractive_path(x)
     48         x = self.middle_path(x)

&lt;ipython-input-2-9245d04f54db&gt; in first_layers(self, inputs)
     57 
     58         layer = Conv3D(filters = self._n_filters, kernel_size = self._patch, activation = self._activation, kernel_initializer = self._kernel_initializer,
---&gt; 59                 padding = self._padding)(inputs)
     60 
     61         return layer

~/miniconda3/envs/segment/lib/python3.7/site-packages/keras/legacy/interfaces.py in wrapper(*args, **kwargs)
     89                 warnings.warn('Update your `' + object_name + '` call to the ' +
     90                               'Keras 2 API: ' + signature, stacklevel=2)
---&gt; 91             return func(*args, **kwargs)
     92         wrapper._original_function = func
     93         return wrapper

~/miniconda3/envs/segment/lib/python3.7/site-packages/keras/layers/convolutional.py in __init__(self, filters, kernel_size, strides, padding, data_format, dilation_rate, activation, use_bias, kernel_initializer, bias_initializer, kernel_regularizer, bias_regularizer, activity_regularizer, kernel_constraint, bias_constraint, **kwargs)
    617             kernel_constraint=kernel_constraint,
    618             bias_constraint=bias_constraint,
--&gt; 619             **kwargs)
    620 
    621     def get_config(self):

~/miniconda3/envs/segment/lib/python3.7/site-packages/keras/layers/convolutional.py in __init__(self, rank, filters, kernel_size, strides, padding, data_format, dilation_rate, activation, use_bias, kernel_initializer, bias_initializer, kernel_regularizer, bias_regularizer, activity_regularizer, kernel_constraint, bias_constraint, **kwargs)
    103                  bias_constraint=None,
    104                  **kwargs):
--&gt; 105         super(_Conv, self).__init__(**kwargs)
    106         self.rank = rank
    107         self.filters = filters

~/miniconda3/envs/segment/lib/python3.7/site-packages/keras/engine/base_layer.py in __init__(self, **kwargs)
    130         if not name:
    131             prefix = self.__class__.__name__
--&gt; 132             name = _to_snake_case(prefix) + '_' + str(K.get_uid(prefix))
    133         self.name = name
    134 

~/miniconda3/envs/segment/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py in get_uid(prefix)
     72     """
     73     global _GRAPH_UID_DICTS
---&gt; 74     graph = tf.get_default_graph()
     75     if graph not in _GRAPH_UID_DICTS:
     76         _GRAPH_UID_DICTS[graph] = defaultdict(int)

AttributeError: module 'tensorflow' has no attribute 'get_default_graph'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='danielfllaneza' date='2020-07-09T12:34:47Z'>
		Hi, instead of using :
&lt;denchmark-code&gt;from keras.layers.convolutional import Conv3D, Conv3DTranspose
from keras.layers.normalization import BatchNormalization
from keras.layers import Cropping3D, UpSampling3D, AveragePooling3D
&lt;/denchmark-code&gt;

use :
&lt;denchmark-code&gt;from tensorflow.keras.layers.convolutional import Conv3D, Conv3DTranspose
from tensorflow.keras.layers.normalization import BatchNormalization
from tensorflow.keras.layers import Cropping3D, UpSampling3D, AveragePooling3D
&lt;/denchmark-code&gt;

while working with tf2.0 or higher
		</comment>
		<comment id='3' author='danielfllaneza' date='2020-07-09T14:15:10Z'>
		&lt;denchmark-link:https://github.com/mash2612&gt;@mash2612&lt;/denchmark-link&gt;

Please refer to &lt;denchmark-link:https://github.com/keras-team/keras/issues/12379#issuecomment-486207178&gt;this comment&lt;/denchmark-link&gt;
 with same error to resolve the issue.
&lt;denchmark-link:https://github.com/keras-team/keras/issues/12783#issuecomment-499870218&gt;link&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://stackoverflow.com/questions/55496289/how-to-fix-attributeerror-module-tensorflow-has-no-attribute-get-default-gr&gt;link1&lt;/denchmark-link&gt;
.
and us know if it helps.
		</comment>
		<comment id='4' author='danielfllaneza' date='2020-07-09T16:53:11Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 this issue was raised by &lt;denchmark-link:https://github.com/danielfllaneza&gt;@danielfllaneza&lt;/denchmark-link&gt;
 . I was just suggesting a way to solve this and I think the links also indicate a solution in the same direction.
&lt;denchmark-link:https://github.com/danielfllaneza&gt;@danielfllaneza&lt;/denchmark-link&gt;
 let us know if the solution helped you.
		</comment>
		<comment id='5' author='danielfllaneza' date='2020-07-10T04:47:34Z'>
		@ danielfllaneza
Please update as per above comment.
		</comment>
		<comment id='6' author='danielfllaneza' date='2020-07-10T09:21:56Z'>
		Thanks for the suggestions, It only worked when importing it like this:
&lt;denchmark-code&gt;import tensorflow as tf

from tensorflow.keras import Input
from tensorflow.keras.models import Model
from tensorflow.keras.layers import (AveragePooling3D,
                                   BatchNormalization,
                                   Concatenate, 
                                   Conv3D, 
                                   Conv3DTranspose,
                                   Cropping3D,
                                   UpSampling3D)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='danielfllaneza' date='2020-07-10T09:50:55Z'>
		&lt;denchmark-link:https://github.com/danielfllaneza&gt;@danielfllaneza&lt;/denchmark-link&gt;

Please confirm if the issue is resolved can we move this to closed status.
		</comment>
		<comment id='8' author='danielfllaneza' date='2020-07-16T13:26:00Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41233&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41233&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>