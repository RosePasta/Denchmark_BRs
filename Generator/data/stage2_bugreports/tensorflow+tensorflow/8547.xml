<bug id='8547' author='kayhan-batmanghelich' open_date='2017-03-20T03:21:12Z' closed_time='2017-03-22T23:43:53Z'>
	<summary>Incorrect hessian of a quadratic function</summary>
	<description>
NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.
For general support from the community, see &lt;denchmark-link:https://stackoverflow.com/questions/tagged/tensorflow&gt;StackOverflow&lt;/denchmark-link&gt;
.
To make bugs and feature requests more easy to find and organize, we close issues that are deemed
out of scope for GitHub Issues and point people to StackOverflow.
For bugs or installation issues, please provide the following information.
The more information you provide, the more easily we will be able to offer
help and advice.
&lt;denchmark-h:h3&gt;What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/5876&gt;#5876&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/7403&gt;#7403&lt;/denchmark-link&gt;

&lt;denchmark-h:h3&gt;Environment info&lt;/denchmark-h&gt;

Operating System:
mac 10.12.3
Installed version of CUDA and cuDNN:
(please attach the output of ls -l /path/to/cuda/lib/libcud*):
No, it is a CPU version.
If installed from binary pip package, provide:

A link to the pip package you installed:
The output from python -c "import tensorflow; print(tensorflow.__version__)".

&lt;denchmark-code&gt; python -c "import tensorflow; print(tensorflow.__version__)"
1.0.1
&lt;/denchmark-code&gt;

If installed from source, provide

The commit hash (git rev-parse HEAD)
The output of bazel version

&lt;denchmark-h:h3&gt;If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)&lt;/denchmark-h&gt;

Hi,
I am testing hessian computation:
&lt;denchmark-code&gt;import tensorflow as tf
import matplotlib as plt
import numpy as np
import math
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;def getHessian(dim):
    g = tf.Graph()
    with g.as_default():
        # First create placeholders for inputs: A, b, and c.
        A = tf.placeholder(tf.float32, shape=[dim, dim])
        b = tf.placeholder(tf.float32, shape=[dim, 1])
        c = tf.placeholder(tf.float32, shape=[1])
        # Define our variable
        x = tf.Variable(np.float32(np.repeat(1,dim).reshape(dim,1)))
        # Construct the computational graph for quadratic function: f(x) = 1/2 * x^t A x + b^t x + c
        fx = 0.5 * tf.matmul(tf.matmul(tf.transpose(x), A), x) + tf.matmul(tf.transpose(b), x) + c
        
        # Get gradients of fx with repect to x
        dfx = tf.gradients(fx, x)[0]
        # Compute hessian
        for i in range(dim):
            dfx_i = tf.slice(dfx, begin=[i,0] , size=[1,1])
            ddfx_i = tf.gradients(dfx_i, x)[0] # whenever we use tf.gradients, make sure you get the actual tensors by putting [0] at the end
            if i == 0: hess = [ ddfx_i ]
            else: hess.append(ddfx_i) 

        hess = tf.stack(hess,axis=0)
        hess = tf.squeeze(hess)
        init_op = tf.initialize_all_variables()
    
        with tf.Session() as sess:
            sess.run(init_op)
            # We need to feed actual values into the computational graph that we created above. 
            feed_dict = {A: np.float32(np.vstack([[1,2,3],[4,5,6],[7,8,9]])), 
                         b: np.float32(np.repeat(3,dim).reshape(dim,1)) , c: [1]}
            # sess.run() executes the graph. Here, "hess" will be calculated with the values in "feed_dict".
            print(sess.run(hess, feed_dict))


&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;getHessian(3)
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;WARNING:tensorflow:From &lt;ipython-input-2-ed7e9735185e&gt;:31: initialize_all_variables (from tensorflow.python.ops.variables) is deprecated and will be removed after 2017-03-02.
Instructions for updating:
Use `tf.global_variables_initializer` instead.
[[ 1.  3.  5.]
 [ 3.  5.  7.]
 [ 5.  7.  9.]]
&lt;/denchmark-code&gt;

This is obviously wrong.
&lt;denchmark-h:h3&gt;What other attempted solutions have you tried?&lt;/denchmark-h&gt;

I tried np.float64, it didn't help.
&lt;denchmark-h:h3&gt;Logs or other output that would be helpful&lt;/denchmark-h&gt;

(If logs are large, please upload as attachment or provide link).
	</description>
	<comments>
		<comment id='1' author='kayhan-batmanghelich' date='2017-03-21T16:20:05Z'>
		Can you isolate a bit further where the mistake is happening? There's a lot of code, is this a misunderstanding of how TensorFlow works, or a specific operation producing result that contradicts its documentation?
Here's a slightly simple example of computing Hessian which produces values that make sense:
&lt;denchmark-link:https://groups.google.com/a/tensorflow.org/d/msg/discuss/Xb_lwMIsNPc/sLk7aNcZCQAJ&gt;https://groups.google.com/a/tensorflow.org/d/msg/discuss/Xb_lwMIsNPc/sLk7aNcZCQAJ&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='kayhan-batmanghelich' date='2017-03-21T16:46:13Z'>
		OK. I was not sure that Hessian works correctly, so that code in the min code you need to compute the hessian of a quadratic function:
$ f(x) =  1/2* x^T A x + b^T x + c$
The hessian of this function is A. In the code, you see:
&lt;denchmark-code&gt;            feed_dict = {A: np.float32(np.vstack([[1,2,3],[4,5,6],[7,8,9]])), 
                         b: np.float32(np.repeat(3,dim).reshape(dim,1)) , c: [1]}
&lt;/denchmark-code&gt;

and the function is defined here:
&lt;denchmark-code&gt;        fx = 0.5 * tf.matmul(tf.matmul(tf.transpose(x), A), x) + tf.matmul(tf.transpose(b), x) + c

&lt;/denchmark-code&gt;

So the result should be:
&lt;denchmark-code&gt;[[ 1.  2.  3.]
 [ 4.  5.  6.]
 [ 7.  8.  9.]]
&lt;/denchmark-code&gt;

I don't think this is misunderstanding of how TF work (it is possible) because the code is simple. Here is how the hessian is computed:
&lt;denchmark-code&gt;        # Get gradients of fx with repect to x
        dfx = tf.gradients(fx, x)[0]
        # Compute hessian
        for i in range(dim):
            dfx_i = tf.slice(dfx, begin=[i,0] , size=[1,1])
            ddfx_i = tf.gradients(dfx_i, x)[0] 

            if i == 0: hess = [ ddfx_i ]
            else: hess.append(ddfx_i) 

        # make a matrix from the list
        hess = tf.stack(hess,axis=0)
        hess = tf.squeeze(hess)
&lt;/denchmark-code&gt;

am I missing something?
		</comment>
		<comment id='3' author='kayhan-batmanghelich' date='2017-03-21T18:27:59Z'>
		Note that you are using tf.gradients, so you are saying this is a bug in gradients, right? The code is complicated enough that I can't immediately tell if it's a bug in gradients or your code, can you narrow it down to simpler example?
		</comment>
		<comment id='4' author='kayhan-batmanghelich' date='2017-03-21T23:34:18Z'>
		&lt;denchmark-link:https://github.com/yaroslavvb&gt;@yaroslavvb&lt;/denchmark-link&gt;
 I was wrong. It is computed correctly. Here is a simpler example showing that is computed correctly:
&lt;denchmark-code&gt;import tensorflow as tf
import matplotlib as plt
import numpy as np
import math

dim = 3
trueA     = np.array([[1,2,3],
                     [4,5,6],
                     [7,8,9]])

trueHess = 0.5*trueA + 0.5*trueA.T

trueb = np.random.rand(3,1)

print "True Hess : ", trueHess


# define variables
A = tf.placeholder(tf.float32, shape=[dim, dim])
b = tf.placeholder(tf.float32, shape=[dim, 1])
c = tf.placeholder(tf.float32, shape=[1])
x = tf.Variable(np.float32(np.repeat(1,dim).reshape(dim,1)))

# define function: 0.5 x^T A x + b^T x + c
fx = 0.5 * tf.matmul(tf.matmul(tf.transpose(x), A), x) + tf.matmul(tf.transpose(b), x) + c

# Get gradients of fx with repect to x
df_dx = tf.gradients(fx, x)[0]

# get the second gradient of the first entry with respect to x
df_dx1 = tf.slice(df_dx, begin=[0,0] , size=[1,1])
ddfx_ddx1 = tf.gradients(df_dx1, x)[0]


#------------------------
# print the results
init_op = tf.initialize_all_variables()
with tf.Session() as sess:
    sess.run(init_op)
    # We need to feed actual values into the computational graph that we created above. 
    feed_dict = {A: trueA, 
                 b: trueb , 
                 c: [1]}
    # sess.run() executes the graph. Here, "hess" will be calculated with the values in "feed_dict".
    print(sess.run(ddfx_ddx1, feed_dict))


&lt;/denchmark-code&gt;

Please close this issue.
		</comment>
	</comments>
</bug>