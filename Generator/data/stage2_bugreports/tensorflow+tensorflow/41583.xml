<bug id='41583' author='TPFRL' open_date='2020-07-21T06:59:26Z' closed_time='2020-08-05T08:23:06Z'>
	<summary>Setting 'name' parameter in keras.layers results in accuracy degradation</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): GCP VM (Debian GNU/Linux 9 Stretch + TF 1-15-3)
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: -
TensorFlow installed from (source or binary): preinstalled
TensorFlow version (use command below): 1.15.3 (v1.15.2-30-g4386a66)
Python version: 3.5.3
Bazel version (if compiling from source): -
GCC/Compiler version (if compiling from source): -
CUDA/cuDNN version:  -
GPU model and memory: TPUv2-8

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Describe the current behavior
When I set name parameter in keras.layers.Conv2D, the training behavior changes (accuracy goes down consistently)
Describe the expected behavior
The training behavior should be similar : accuracy have to be similar.
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.

Clone official mnasnet code

&lt;denchmark-code&gt;git clone https://github.com/tensorflow/tpu.git
cd tpu/models/official/mnasnet
export PYTHONPATH=$PYTHONPATH:`pwd`/../../:`pwd`/../efficientnet
&lt;/denchmark-code&gt;


train mnasnet for 50 epochs

&lt;denchmark-code&gt;python mnasnet_main.py --data_dir=IMAGNET_DIR --tpu=TPU_NAME --train_steps=62550 --steps_per_eval=6255 --train_batch_size=1024 --eval_batch_size=1024 --model_dir=SAVE_DIR --model_name=mnasnet-a1
&lt;/denchmark-code&gt;


add name to keras.layers (can be added using diff below)

&lt;denchmark-code&gt;diff --git models/official/mnasnet/mnasnet_model.py models/official/mnasnet/mnasnet_model.py
index 935421e..7909ec2 100644
--- models/official/mnasnet/mnasnet_model.py
+++ models/official/mnasnet/mnasnet_model.py
@@ -117,7 +117,8 @@ def _get_conv2d(filters,
                 padding,
                 use_bias,
                 data_format='channels_last',
-                use_keras=True):
+                use_keras=True,
+                name=None):
   """A helper function to create Conv2D layer."""
   if use_keras:
     return tf.keras.layers.Conv2D(
@@ -127,7 +128,8 @@ def _get_conv2d(filters,
         kernel_initializer=kernel_initializer,
         padding=padding,
         data_format=data_format,
-        use_bias=use_bias)
+        use_bias=use_bias,
+        name=name)
   else:
     return tf.layers.Conv2D(
         filters=filters,
@@ -136,7 +138,8 @@ def _get_conv2d(filters,
         kernel_initializer=kernel_initializer,
         padding=padding,
         data_format=data_format,
-        use_bias=use_bias)
+        use_bias=use_bias,
+        name=name)
 
 
 class MnasBlock(object):
@@ -190,13 +193,15 @@ class MnasBlock(object):
           padding='same',
           use_bias=False,
           data_format=self._data_format,
-          use_keras=self._use_keras)
+          use_keras=self._use_keras,
+          name='expand_conv')
       # TODO(hongkuny): b/120622234 need to manage update ops directly.
       self._bn0 = tf.layers.BatchNormalization(
           axis=self._channel_axis,
           momentum=self._batch_norm_momentum,
           epsilon=self._batch_norm_epsilon,
-          fused=True)
+          fused=True,
+          name='expand_bn')
 
     kernel_size = self._block_args.kernel_size
     # Depth-wise convolution phase:
@@ -207,7 +212,8 @@ class MnasBlock(object):
           depthwise_initializer=conv_kernel_initializer,
           padding='same',
           data_format=self._data_format,
-          use_bias=False)
+          use_bias=False,
+          name='dw_conv')
     else:
       self._depthwise_conv = mnas_utils.DepthwiseConv2D(
           [kernel_size, kernel_size],
@@ -215,12 +221,14 @@ class MnasBlock(object):
           depthwise_initializer=conv_kernel_initializer,
           padding='same',
           data_format=self._data_format,
-          use_bias=False)
+          use_bias=False,
+          name='dw_conv')
     self._bn1 = tf.layers.BatchNormalization(
         axis=self._channel_axis,
         momentum=self._batch_norm_momentum,
         epsilon=self._batch_norm_epsilon,
-        fused=True)
+        fused=True,
+        name='dw_bn')
 
     if self.has_se:
       num_reduced_filters = max(
@@ -234,7 +242,8 @@ class MnasBlock(object):
           padding='same',
           use_bias=True,
           data_format=self._data_format,
-          use_keras=self._use_keras)
+          use_keras=self._use_keras,
+          name='se_reduce')
       self._se_expand = _get_conv2d(
           filters,
           kernel_size=[1, 1],
@@ -243,7 +252,8 @@ class MnasBlock(object):
           padding='same',
           use_bias=True,
           data_format=self._data_format,
-          use_keras=self._use_keras)
+          use_keras=self._use_keras,
+          name='se_expand')
 
     # Output phase:
     filters = self._block_args.output_filters
@@ -255,12 +265,14 @@ class MnasBlock(object):
         padding='same',
         use_bias=False,
         data_format=self._data_format,
-        use_keras=self._use_keras)
+        use_keras=self._use_keras,
+        name='proj_conv')
     self._bn2 = tf.layers.BatchNormalization(
         axis=self._channel_axis,
         momentum=self._batch_norm_momentum,
         epsilon=self._batch_norm_epsilon,
-        fused=True)
+        fused=True,
+        name='proj_bn')
 
   def _call_se(self, input_tensor):
     """Call Squeeze and Excitation layer.

&lt;/denchmark-code&gt;


use same code to train again

&lt;denchmark-code&gt;python mnasnet_main.py --data_dir=IMAGNET_DIR --tpu=TPU_NAME --train_steps=62550 --steps_per_eval=6255 --train_batch_size=1024 --eval_batch_size=1024 --model_dir=DIFFERENT_SAVE_DIR --model_name=mnasnet-a1
&lt;/denchmark-code&gt;

Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
When I added name, the accuracy consistently degraded.
I repeated 3 times.
&lt;denchmark-link:https://user-images.githubusercontent.com/8455454/88022457-42729980-cb6a-11ea-9eee-65653ca9aae9.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='TPFRL' date='2020-07-22T07:16:01Z'>
		&lt;denchmark-link:https://github.com/TPFRL&gt;@TPFRL&lt;/denchmark-link&gt;
,
On running the command to train mnasnet, I am facing an error stating . Please find the gist of it &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/219d8912e7e0ba5a9ffcf6ada19cfcf6/41583.ipynb#scrollTo=DzjJ80s4SgTM&gt;here&lt;/denchmark-link&gt;
.
Could you please provide a minimal working example to reproduce the issue reported here. Thanks!
		</comment>
		<comment id='2' author='TPFRL' date='2020-07-29T07:31:57Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='3' author='TPFRL' date='2020-08-05T08:23:04Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='4' author='TPFRL' date='2020-08-05T08:23:08Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41583&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41583&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>