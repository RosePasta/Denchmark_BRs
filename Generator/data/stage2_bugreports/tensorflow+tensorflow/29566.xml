<bug id='29566' author='00krishna' open_date='2019-06-08T22:28:11Z' closed_time='2019-07-12T19:00:59Z'>
	<summary>The `Load CSV with tf.data` tutorial creates confusion about categorical data</summary>
	<description>
Thank you for submitting a TensorFlow documentation issue. Per our GitHub
policy, we only address code/doc bugs, performance issues, feature requests, and
build/installation issues on GitHub.
The TensorFlow docs are open source! To get involved, read the documentation
contributor guide: &lt;denchmark-link:https://www.tensorflow.org/community/contribute/docs&gt;https://www.tensorflow.org/community/contribute/docs&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;URL(s) with the issue:&lt;/denchmark-h&gt;

&lt;denchmark-link:https://www.tensorflow.org/beta/tutorials/load_data/csv#categorical_data&gt;https://www.tensorflow.org/beta/tutorials/load_data/csv#categorical_data&lt;/denchmark-link&gt;

Please provide a link to the documentation entry, for example:
&lt;denchmark-link:https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/MyMethod&gt;https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/MyMethod&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;Description of issue (what needs changing):&lt;/denchmark-h&gt;

The new Load CSV with tf.data tutorial is very nice. The tutorial shows users how to load a csv file into a tf.data Dataset. However, there are a couple of issues in the tutorial. First, the tutorial shows a very inconsistent and un-scalable way to encode categorical data using Regex expressions. A simpler way would be to use the already developed Feature Columns API, which is more consistent with the existing Tensorflow API. Second, the name of the tutorial is improper English. The tutorial is about loading tf.data with a CSV, not loading a CSV file with tf.data. So that should be fixed.
&lt;denchmark-h:h3&gt;Clear description&lt;/denchmark-h&gt;


Overly complicated and unscalable explanation of how to encode categorical features.

The tutorial takes the user through loading a CSV file into a tf.data Dataset using the experimental make_csv_dataset function in TF-2.0.0-beta. That is all very well done. But the problem arises in the "Data Preprocessing" section.
The section on categorical data says that data must be converted from text to numerical encodings before passing the data to the model. However, the method described looks like this:
&lt;denchmark-code&gt;CATEGORIES = {
    'sex': ['male', 'female'],
    'class' : ['First', 'Second', 'Third'],
    'deck' : ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'],
    'embark_town' : ['Cherbourg', 'Southhampton', 'Queenstown'],
    'alone' : ['y', 'n']
}
&lt;/denchmark-code&gt;

Then using this dictionary, the user is asked to:
&lt;denchmark-code&gt;def process_categorical_data(data, categories):
  """Returns a one-hot encoded tensor representing categorical values."""
  
  # Remove leading ' '.
  data = tf.strings.regex_replace(data, '^ ', '')
  # Remove trailing '.'.
  data = tf.strings.regex_replace(data, r'\.$', '')
  
  # ONE HOT ENCODE
  # Reshape data from 1d (a list) to a 2d (a list of one-element lists)
  data = tf.reshape(data, [-1, 1])
  # For each element, create a new list of boolean values the length of categories,
  # where the truth value is element == category label
  data = tf.equal(categories, data)
  # Cast booleans to floats.
  data = tf.cast(data, tf.float32)
  
  # The entire encoding can fit on one line:
  # data = tf.cast(tf.equal(categories, tf.reshape(data, [-1, 1])), tf.float32)
  return data
&lt;/denchmark-code&gt;

Now this approach will work, but there are a couple of really big problems. First, Tensorflow has a Feature Column API already developed to handle this type of conversion. If the user simply did something like creating a feature column with vocabulary list, and then wrapping that column in an indicator column, this same code could be resolved in 2 lines instead of 14 lines. This change would also make the code easier to read, and provide more insight into how to use the Feature API.
&lt;denchmark-code&gt;col_sex = tf.feature_column.categorical_column_with_vocabulary_list(key="Sex", vocabulary_list=["male", "female"])

fc_sex =  tf.feature_column.indicator_column(col_sex)
&lt;/denchmark-code&gt;


Correct the name of the tutorial

The name of the tutorial is "Load CSV with tf.data." This name is actually improper English and a bit confusing. The current name makes it sound like you are loaded a tf.data dataset into a CSV, which is the opposite of the intent. The tutorial is about taking a CSV file and loading the data into a tf.data Dataset. So the proper name of the tutorial should be "Load a CSV file into a tf.data Dataset," or "Populate a tf.data Dataset with CSV file." This change might help reduce confusion about what the tutorial is trying to demonstrate.
&lt;denchmark-h:h3&gt;Correct links&lt;/denchmark-h&gt;

Is the link to the source code correct?
Yes
&lt;denchmark-h:h3&gt;Parameters defined&lt;/denchmark-h&gt;

Are all parameters defined and formatted correctly?
Yes
&lt;denchmark-h:h3&gt;Returns defined&lt;/denchmark-h&gt;

Are return values defined?
Yes
&lt;denchmark-h:h3&gt;Raises listed and defined&lt;/denchmark-h&gt;

Are the errors defined? For example,
&lt;denchmark-link:https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/feature_column/categorical_column_with_vocabulary_file#raises&gt;https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/feature_column/categorical_column_with_vocabulary_file#raises&lt;/denchmark-link&gt;

Errors are not clearly defined.
&lt;denchmark-h:h3&gt;Usage example&lt;/denchmark-h&gt;

Is there a usage example?
There is a usage example, but the usage example is very poorly designed. Hence I submitted the issue.
&lt;denchmark-h:h3&gt;Request visuals, if applicable&lt;/denchmark-h&gt;

Are there currently visuals? If not, will it clarify the content?
Visuals are okay.
&lt;denchmark-h:h3&gt;Submit a pull request?&lt;/denchmark-h&gt;

I am happy to submit a pull request. I guess let me see the response to this issue. If the development team agrees, then I can work on a pull request to update the documentation.
Are you planning to also submit a pull request to fix the issue? See the docs
contributor guide: &lt;denchmark-link:https://www.tensorflow.org/community/contribute/docs&gt;https://www.tensorflow.org/community/contribute/docs&lt;/denchmark-link&gt;
 and the
docs style guide: &lt;denchmark-link:https://www.tensorflow.org/community/contribute/docs_style&gt;https://www.tensorflow.org/community/contribute/docs_style&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='00krishna' date='2019-06-17T18:15:07Z'>
		&lt;denchmark-link:https://github.com/MarkDaoust&gt;@MarkDaoust&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/yashk2810&gt;@yashk2810&lt;/denchmark-link&gt;

What is the state of the feature column API? Is the change requested above advisable?
		</comment>
		<comment id='2' author='00krishna' date='2019-06-28T17:52:51Z'>
		&lt;denchmark-link:https://github.com/adammichaelwood&gt;@adammichaelwood&lt;/denchmark-link&gt;
 Thanks for checking into this. Yeah, this issue bring up one of the most confusing and problematic aspects of all the tensorflow tutorials. Having tutorials is really helpful, but each tutorial shows a completely different way of doing the exact same thing. Like no two tutorials match, haha. It would be like if I was trying to show you how to drive to from my house to my office, and each time I took a completely different route. So anything you can do to add some consistency would be helpful. Just to be brutally honest, at this point I tell anyone trying to learn Tensorflow NOT to look at the tutorials because they just add confusion. In a similar situation, I think the introductory tutorials all showed loading MNIST data from  even after the  API was released. So half the tutorials shows loading from  but the intro ones showed . I mean any new user is going to get confused trying to figure out what is the difference between the two loading methods--and there are differences in how you load and configure the batches, etc. So again, for newer users consistency in the interface and approach matters. Thanks again.
		</comment>
		<comment id='3' author='00krishna' date='2019-06-28T18:20:31Z'>
		One thing that isn't clear, which maybe we should/could make more clear is that often the tutorials include, by necessity, things that aren't the point of the tutorial. So, for example, this tutorial is really just supposed to focus on loading CSV data in to TF datasets. It isn't really about pre-processing. This happens in other places, too, and we end up with the "secondary" content of a tutorial (for example - building the model, in a tutorial about loading data) that is somewhat inconsistent.
A related problem is that there really is more than one legitimate way to do many things, and best practices haven't always been established. So we somewhat deliberately show multiple ways of doing things.
And, of course, as best practices settle and new APIs come along, we generally prioritize new content and updating primary content over fixing something that is secondary in a tutorial.
Anyway - we're trying to make all this a better experience for the community, and we very much appreciate this feedback. So thank you!
As for this tutorial in particular - I've gotten some guidance internally about how this should look. I'm working on updating it to use the feature column API as you suggest, and also making some other improvements to the data processing portion.
Thanks again.
		</comment>
		<comment id='4' author='00krishna' date='2019-06-28T20:25:46Z'>
		&lt;denchmark-link:https://github.com/adammichaelwood&gt;@adammichaelwood&lt;/denchmark-link&gt;
 Thanks so much for your very thoughtful comments. Yes, I always intend to be constructive and not negative. This was just a pain point for me when I first started using Tensorflow, so I guess some of that still colors my views.
You are totally correct that that there is more than one way to do things. I guess I can give you my own experiences and hopefully that helps you to understand the user perspective better. The case of the feature columns and tensorflow datasets is a really good example. So when tensorflow datasets came out, it was really a big improvement. The demo video from the Tensorflow dev-con seemed impressive. But there was really hardly any documentation on how the Tensorflow datasets were setup or accessed or sliced. There was a guide, but it was really really incomplete. Like it took me forever to figure out how to add simple "headings" to a dataset. Like if you have a CSV file and want to preserve the "headings" there was no guide--or you had to read 100 different guides to find what you needed. The current method of loading a CSV is the tf.io.decode_csv() function which lets you import the data, but not the headings. Since there are no code examples in any of the Tensorflow api documentation, the API documentation was useless. Actually, the current and best way to import a CSV with headings is still technically "experimental" which is the make_csv_dataset() function in tf.data, but again there is no guide to tell you this juicy tidbit.
Now you might ask why do headings matter in a CSV dataset? Well, because the Feature API requires headings to reference columns or features for transformation. So if I want to convert a dataset from some categorical value to a one-hot encoded format, I could either use a very cryptic function like the one in the Tutorial referenced in this issue, or I could just use a very simple call to the Tensorflow Features API. Again, the only reason I know about this is because I read Aurelien Geron's new book on Tensorflow 2.0. But none of this stuff is referenced anywhere in the Tensorflow documentation.
So I understand that showing different ways to do stuff can be useful in a tutorial. But that presupposes that there is some documentation that lays out the details of how say tf.datasets or something is implemented. Then I could say to myself, here is one implementation in tutorial 1, and another implementation in tutorial 2, and let me look at the docs to figure out how these differ. But in reality, there are NO docs on this. So in that case, the tutorials become the only docs and they are not consistent and so add to the confusion.
I mean there are so many omissions like this in the Tensorflow docs that I really tell people to avoid them. The Tensorflow 2.0 docs are better, but even then I tell people to avoid them. It is like almost impossible to convey to you the levels of frustration that so many users I talk to feel. I remember even when Tensorflow Datasets first came out, I was really excited about how to use it. They had a tutorial to show how to download and load a dataset, but they did not include in their tutorial how to run a model on a tfds Tensorflow Dataset. If you look, a Tensorflow Datasets dataset is not a standard tf.Dataset, it is a variant. So you have to do some stuff before you can pass it directly to the tf.keras api. I actually just watched the video from Tensorflow Dev-Con to see how to run a model. For some reason, the people in the videos will show a complete workflow from loading data to running a model. But the documentation or tutorials ignore or omit some of those parts.
I appreciate that you guys are trying to improve and make things better. And I wish you the best of luck. But speaking as honestly as I can, I am basically losing my faith in Google to correct something that seems like it should be pretty simple. I mean Tensorflow still doesn't have code examples in any of the API documentation after what, 15 versions of the software--from TF 0.1 to TF 1.14 to 2.0. So if Google can't do something so simple as this, then why would I believe they can do anything more complicated. I use Tensorflow today, but I am moving more and more of my workflow off of Tensorflow and over to Flux in Julia and other places where there is not such a huge gulf between developers and users.
Again, hopefully this information is helpful for you in understanding user experiences. Thanks again for all of your efforts to make things better.
		</comment>
		<comment id='5' author='00krishna' date='2019-07-01T16:18:55Z'>
		Thank you for all of your feedback here.
Sometimes people are too nice to say this stuff, and sometimes people don't say it until they are too angry to say anything actually helpful. So I really appreciate your thoughtful, and kind, criticism.
If you have more thoughts and ideas about how we can improve TensorFlow docs, please share them. You might know all this already, but for anyone else reading along:

For very specific (single document corrections, specific missing information, factual errors), please file a new issue like this one.
For higher level conversation about how the docs can be improved as a whole, we have a TensorFlow Docs Google Group. The tech writers and other docs-focused people read all emails to that group, and we can have extended discussion. (There's also been talk of a Docs SIG, but last I heard we weren't quite there yet.)

As for this tutorial in particular, I'll have a PR soon and I hope you'll have the time to review it.
Thanks again.
		</comment>
		<comment id='6' author='00krishna' date='2019-07-01T21:50:56Z'>
		&lt;denchmark-link:https://github.com/adammichaelwood&gt;@adammichaelwood&lt;/denchmark-link&gt;
 Certain, I am happy to help in any way I can. I will keep monitoring this issue and when the PR is ready I can add my 2 cents :). Thanks for the tip about the Tensorflow Docs group. I will look into that. Keep up the good work. Even I will keep looking through the tutorials to see if there are more places where we can improve stuff :).
		</comment>
		<comment id='7' author='00krishna' date='2019-07-11T18:43:56Z'>
		updated:
PR here: &lt;denchmark-link:https://github.com/tensorflow/docs/pull/786&gt;tensorflow/docs#786&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='00krishna' date='2019-07-12T19:00:59Z'>
		Fixed via &lt;denchmark-link:https://github.com/tensorflow/docs/pull/786&gt;tensorflow/docs#786&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/00krishna&gt;@00krishna&lt;/denchmark-link&gt;
 Please submit a new issue (or a PR!) if you have additional suggestions on this.
Thanks!
		</comment>
		<comment id='9' author='00krishna' date='2019-12-17T22:07:07Z'>
		I had a problem with this tutorial in particular. I am using TF 1.14 and though I have enable eager execution, I still could not run the last bit of code when training the model. Could anyone show me how to run this with TF 1.14? Thank you!
When I run:
model.fit(train_data, epochs=20)
The error message was:
FailedPreconditionError: Table already initialized.
[[{{node sequential_2/dense_features_9/sex_indicator/sex_lookup/hash_table/table_init/LookupTableImportV2}}]] [Op:__inference_keras_scratch_graph_6365]
		</comment>
	</comments>
</bug>