<bug id='15831' author='rubiagatra' open_date='2018-01-04T03:52:08Z' closed_time='2018-06-22T11:55:00Z'>
	<summary>Using keras and tf.keras has different result</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


TensorFlow):
Linux Ubuntu 16.04:
TensorFlow installed from Binary:
TensorFlow version (1.4):
Python version 3.6.3:

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

I am using tf.keras and keras but it has a different result. I am using the code below for sentiment analysis classification using imdb dataset.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;model = Sequential()
model.add(Embedding(n_unique_words, n_dim, input_length=max_reviw_length))
model.add(Flatten())
model.add(Dense(n_dense, activation='relu'))
model.add(Dropout(dropout))
model.add(Dense(1, activation='sigmoid'))
model.summary() 
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
embedding_1 (Embedding)      (None, 100, 64)           320000    
_________________________________________________________________
flatten_1 (Flatten)          (None, 6400)              0         
_________________________________________________________________
dense_1 (Dense)              (None, 64)                409664    
_________________________________________________________________
dropout_1 (Dropout)          (None, 64)                0         
_________________________________________________________________
dense_2 (Dense)              (None, 1)                 65        
=================================================================
Total params: 729,729
Trainable params: 729,729
Non-trainable params: 0
__________________________

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=1, validation_data=(x_valid, y_valid), callbacks=[modelcheckpoint])
&lt;/denchmark-code&gt;

preprocessing all exact the same
tf.keras result
&lt;denchmark-code&gt;Train on 25000 samples, validate on 25000 samples
Epoch 1/4
25000/25000 [==============================] - 9s - loss: 0.7412 - acc: 0.4990 - val_loss: 0.6932 - val_acc: 0.50000.4
Epoch 2/4
25000/25000 [==============================] - 7s - loss: 0.6932 - acc: 0.5005 - val_loss: 0.6931 - val_acc: 0.5000
Epoch 3/4
25000/25000 [==============================] - 7s - loss: 0.6932 - acc: 0.5001 - val_loss: 0.6931 - val_acc: 0.5000
Epoch 4/4
25000/25000 [==============================] - 7s - loss: 0.6932 - acc: 0.4942 - val_loss: 0.6931 - val_acc: 0.5000

&lt;tensorflow.python.keras._impl.keras.callbacks.History at 0x7fad685e7c18&gt;
&lt;/denchmark-code&gt;

keras result
&lt;denchmark-code&gt;Train on 25000 samples, validate on 25000 samples
Epoch 1/4
25000/25000 [==============================] - 9s 344us/step - loss: 0.5607 - acc: 0.6900 - val_loss: 0.3622 - val_acc: 0.8404
Epoch 2/4
25000/25000 [==============================] - 8s 308us/step - loss: 0.2849 - acc: 0.8849 - val_loss: 0.3486 - val_acc: 0.8446
Epoch 3/4
25000/25000 [==============================] - 8s 305us/step - loss: 0.1179 - acc: 0.9642 - val_loss: 0.4183 - val_acc: 0.8339
Epoch 4/4
25000/25000 [==============================] - 8s 307us/step - loss: 0.0252 - acc: 0.9960 - val_loss: 0.5202 - val_acc: 0.8345

&lt;keras.callbacks.History at 0x7f560b85d940&gt;


&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='rubiagatra' date='2018-01-04T08:55:12Z'>
		Similar with &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/15026&gt;#15026&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/hhao89&gt;@hhao89&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='2' author='rubiagatra' date='2018-01-04T18:50:26Z'>
		Yes, I think this is the same problem as &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/15026&gt;#15026&lt;/denchmark-link&gt;
 , and similarly, keras is shown to have a consistently better performance.
		</comment>
		<comment id='3' author='rubiagatra' date='2018-01-05T11:12:38Z'>
		I am running into the same problem described here and in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/15026&gt;#15026&lt;/denchmark-link&gt;
. The TensorFlow implementation of keras gives very bad results in terms of loss and accuracy while the standalone keras performs as expected
		</comment>
		<comment id='4' author='rubiagatra' date='2018-01-24T13:14:32Z'>
		Nagging Assignee: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='5' author='rubiagatra' date='2018-02-08T19:25:41Z'>
		Nagging Assignee: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='6' author='rubiagatra' date='2018-02-23T14:01:23Z'>
		Nagging Assignee: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='7' author='rubiagatra' date='2018-03-10T13:08:21Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='8' author='rubiagatra' date='2018-03-25T12:34:56Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='9' author='rubiagatra' date='2018-04-09T12:35:11Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='10' author='rubiagatra' date='2018-04-24T18:40:19Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
: It has been 15 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='11' author='rubiagatra' date='2018-05-10T01:03:00Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
: It has been 15 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='12' author='rubiagatra' date='2018-05-27T02:55:04Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
: It has been 137 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='13' author='rubiagatra' date='2018-06-10T18:48:47Z'>
		Nagging Assignee &lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
: It has been 152 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='14' author='rubiagatra' date='2019-06-29T02:54:27Z'>
		Similar issue. How to solve this issue？&lt;denchmark-link:https://github.com/rubiagatra&gt;@rubiagatra&lt;/denchmark-link&gt;

		</comment>
		<comment id='15' author='rubiagatra' date='2019-06-29T07:12:29Z'>
		&lt;denchmark-link:https://github.com/budach&gt;@budach&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/facaiy&gt;@facaiy&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/hhao89&gt;@hhao89&lt;/denchmark-link&gt;

		</comment>
		<comment id='16' author='rubiagatra' date='2019-07-20T15:54:37Z'>
		
Similar issue. How to solve this issue？@rubiagatra

It's there any solution to resolve this issue?&lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/facaiy&gt;@facaiy&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/hhao89&gt;@hhao89&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/budach&gt;@budach&lt;/denchmark-link&gt;

		</comment>
		<comment id='17' author='rubiagatra' date='2019-07-24T10:42:08Z'>
		see &lt;denchmark-link:url&gt;https://github.com/tensorflow/tensorflow/issues/15026#issuecomment-513819963&lt;/denchmark-link&gt;

		</comment>
		<comment id='18' author='rubiagatra' date='2020-01-01T10:12:11Z'>
		Having the same issue with Keras version 2.3.1 versus tf version 2.1.0-dev20191228 and tf.keras version2.2.4-tf
In my case this is the model:
&lt;denchmark-code&gt;    inputlayer = Input(shape=(100, 3))
    model = BatchNormalization()(inputlayer)
    model = Conv1D(10, kernel_size=(3), padding='same')(model)
    model = Dropout(dropout_rate)(model)
    model = Conv1D(20, kernel_size=(2), padding='same')(model)
    model = Dropout(dropout_rate)(model)
    model = LSTM(128, return_sequences=True, input_shape=(100, 3), batch_size=1)(model)
    model = Dropout(dropout_rate)(model)
    model = LSTM(128, batch_size=1)(model)
    model = Dense(output_size, activation='softmax')(model)
    model = Model(inputs=inputlayer, outputs=model)
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['categorical_crossentropy', 'categorical_accuracy', 'accuracy'])
&lt;/denchmark-code&gt;

tf.keras does not converge while keras shows good results.
		</comment>
		<comment id='19' author='rubiagatra' date='2020-09-16T01:19:17Z'>
		&lt;denchmark-link:https://github.com/yairlev&gt;@yairlev&lt;/denchmark-link&gt;

I had a same issue. And I found the reason that BatchNormalization is different in tf.keras and pure keras.
My environment: tensorflow = 1.14.0, tf.keras = 2.2.4-tf, keras = 2.2.4.
The BatchNormalization in tf.keras has the parameters 'trainable' and 'fused'. But in pure keras, there are no 'trainable' and 'fused'.
I had added parameters trainable=False and fuse=False, then the loss in tf.keras went down.
The newer version pure keras already has 'trainable' and 'fused'. So this different is only in old versions.
I hope this helpful.
		</comment>
	</comments>
</bug>