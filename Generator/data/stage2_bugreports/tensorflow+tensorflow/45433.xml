<bug id='45433' author='soroosh-rzh' open_date='2020-12-06T21:12:54Z' closed_time='2021-01-04T08:00:49Z'>
	<summary>Tensorflow/Keras Endpoint layer does not work with Tensorflow dataset in eager mode</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Google Colab, Mac OS
TensorFlow version:
2.3.1
Python version:
3.6.9

Describe the current behavior
The Endpoint layer pattern described in Tensorflow documents only works with Numpy arrays and it does not work with Tensorflow dataset
Describe the expected behavior
The Endpoint layer is expected to work with Tensorflow dataset as well
Standalone code to reproduce the issue
This code is from Tensorflow documents that works only with Numpy arrays:
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow import keras
import numpy as np

class LogisticEndpoint(keras.layers.Layer):
    def __init__(self, name=None):
        super(LogisticEndpoint, self).__init__(name=name)
        self.loss_fn = keras.losses.BinaryCrossentropy(from_logits=True)
        self.accuracy_fn = keras.metrics.BinaryAccuracy()

    def call(self, targets, logits, sample_weights=None):
        # Compute the training-time loss value and add it
        # to the layer using `self.add_loss()`.
        loss = self.loss_fn(targets, logits, sample_weights)
        self.add_loss(loss)

        # Log accuracy as a metric and add it
        # to the layer using `self.add_metric()`.
        acc = self.accuracy_fn(targets, logits, sample_weights)
        self.add_metric(acc, name="accuracy")

        # Return the inference-time prediction tensor (for `.predict()`).
        return tf.nn.softmax(logits)

inputs = keras.Input(shape=(3,), name="inputs")
targets = keras.Input(shape=(10,), name="targets")
logits = keras.layers.Dense(10)(inputs)
predictions = LogisticEndpoint(name="predictions")(logits, targets)

model = keras.Model(inputs=[inputs, targets], outputs=predictions)
model.compile(optimizer="adam")

data = {
    "inputs": np.random.random((3, 3)),
    "targets": np.random.random((3, 10)),
}
model.fit(data)
&lt;/denchmark-code&gt;

Experiment 1: Using TF dataset in a dictionary
&lt;denchmark-code&gt;tf_data = {
    'inputs': tf.data.Dataset.from_tensor_slices(np.random.random((3, 3))), 
    'targets': tf.data.Dataset.from_tensor_slices(np.random.random((3, 10)))
}

model.fit(tf_data)
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/62025982/101292041-09feef80-37db-11eb-8eb7-2047cde45647.png&gt;&lt;/denchmark-link&gt;

Experiment 2: TF dataset that contains tuples
&lt;denchmark-code&gt;data = {
    "inputs": np.random.random((3, 3)),
    "targets": np.random.random((3, 10)),
}
tuple_data = []
for i in range(3):
  tuple_data.append((data['inputs'][i, :], data['targets'][i, :]))

dataset = tf.data.Dataset.from_generator(lambda: tuple_data, (tf.float32, tf.float32))

# to show the dataset content
for x in dataset:
  print(x)

model.fit(dataset)
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/62025982/101292452-8397dd00-37dd-11eb-871d-71bd1c113727.png&gt;&lt;/denchmark-link&gt;


&lt;denchmark-link:url&gt;https://colab.research.google.com/drive/1zaAgPZ4U49t2PkIl7qdm348ayt7Z5O-0&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='soroosh-rzh' date='2020-12-07T17:37:37Z'>
		Was able to reproduce the issue with &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/c339a19b43ebd9e7a83be67405b2870d/45433.ipynb&gt;TF v2.3&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/1db7335dc8bde1e3e2c23cb44fdfc1a3/45433-tf-nightly.ipynb&gt;TF-nightly&lt;/denchmark-link&gt;
. Please find the attached gist. Thanks!
		</comment>
		<comment id='2' author='soroosh-rzh' date='2020-12-07T19:04:38Z'>
		&lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
 Thanks.
&lt;denchmark-link:https://github.com/soroosh-rzh&gt;@soroosh-rzh&lt;/denchmark-link&gt;

Can you try with:
&lt;denchmark-code&gt;input = tf.random.uniform([3, 3])
targets = tf.random.uniform([3, 10])
tf_data = tf.data.Dataset.from_tensor_slices({'inputs': input, 'targets': targets})
tf_data = tf_data.batch(2)
model.fit(tf_data)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='soroosh-rzh' date='2020-12-08T16:10:56Z'>
		&lt;denchmark-link:https://github.com/bhack&gt;@bhack&lt;/denchmark-link&gt;

I tried it, it works! Thanks for the suggestion. The loss is a little bit different from what is gained using numpy but I believe it should be Ok!
Do you have any idea how it might work without dictionary and using tuples as input/outputs? The real use case for me would be multiple inputs/outputs. I mean something close to what I have mentioned in experiment 2.
Thanks
		</comment>
		<comment id='4' author='soroosh-rzh' date='2020-12-08T16:13:20Z'>
		We use our stackoverflow space for this kind of support.
Please submit at &lt;denchmark-link:https://stackoverflow.com/questions/tagged/tensorflow&gt;https://stackoverflow.com/questions/tagged/tensorflow&lt;/denchmark-link&gt;
 and close this.
		</comment>
		<comment id='5' author='soroosh-rzh' date='2020-12-08T17:14:12Z'>
		Correct. Forgetting what would be my use case, I still think the endpoint pattern is not working without a dictionary as input so that may be a still a bug not a question! Thank you for your reply.
		</comment>
		<comment id='6' author='soroosh-rzh' date='2020-12-08T17:37:22Z'>
		Can you reformulate your code with your bug hypotesis?
		</comment>
		<comment id='7' author='soroosh-rzh' date='2020-12-11T11:04:59Z'>
		&lt;denchmark-link:https://github.com/soroosh-rzh&gt;@soroosh-rzh&lt;/denchmark-link&gt;
,
Can you please respond to the above comment. Thanks!
		</comment>
		<comment id='8' author='soroosh-rzh' date='2020-12-11T14:53:19Z'>
		&lt;denchmark-link:https://github.com/bhack&gt;@bhack&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/rmothukuru&gt;@rmothukuru&lt;/denchmark-link&gt;
 I will reformulate the code and add a comment over my weekend! Please do not close this issue for now. Thanks
		</comment>
		<comment id='9' author='soroosh-rzh' date='2020-12-21T08:27:50Z'>
		&lt;denchmark-link:https://github.com/soroosh-rzh&gt;@soroosh-rzh&lt;/denchmark-link&gt;
,
Can you please respond to the above comment. Thanks!
		</comment>
		<comment id='10' author='soroosh-rzh' date='2020-12-28T08:33:56Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='11' author='soroosh-rzh' date='2021-01-04T08:00:49Z'>
		&lt;denchmark-link:https://github.com/soroosh-rzh&gt;@soroosh-rzh&lt;/denchmark-link&gt;
,
Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
The issue is resolved by using  and  as mentioned in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/45433#issuecomment-740117545&gt;bhack's answer&lt;/denchmark-link&gt;
.
Please raise a new issue with your reformulated code. Thanks!
		</comment>
		<comment id='12' author='soroosh-rzh' date='2021-01-04T08:00:51Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/45433&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/45433&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>