<bug id='22012' author='naoto0804' open_date='2018-09-02T05:37:17Z' closed_time='2018-09-17T01:35:07Z'>
	<summary>[Bug] Discrepancy in tf.keras and keras in setting model.trainable = False and then compiling</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code: Yes
OS Platform and Distribution: Linux Ubuntu 16.04
TensorFlow installed from: binary
TensorFlow version: v1.10.1-0-g4dcfddc5d1 1.10.1
Bazel version: N/A
CUDA/cuDNN version: CUDA9.1, cuDNN7.0
GPU model and memory: TITAN V
Exact command to reproduce: python3 compare.py
Mobile device: N/A

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

This is a toy case for training GAN problem.
When I run the code shown below in keras2.2.2, I get
&lt;denchmark-code&gt;WARNING:tensorflow:Discrepancy between trainable weights and collected trainable weights, did you set `model.trainable` without calling `model.compile` after ?
&lt;/denchmark-code&gt;

only at the beginning of the training once.
However, I run this code in tensorflow1.10.1, the warning raises at every iteration.
Although it seems that the model is appropriately learned (I can make sure the weight is freezed by the result of .summary()), raising too many warning is not torelable.
Here is the complete log.
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/2342979/tf_keras.log&gt;tf.keras ver&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/2342980/keras.log&gt;keras ver&lt;/denchmark-link&gt;

I see the same problem is posted in Stackoverflow
&lt;denchmark-link:https://stackoverflow.com/questions/50468940/tensorflow-1-8-tf-keras-gives-different-result-in-dcgan-from-keras&gt;https://stackoverflow.com/questions/50468940/tensorflow-1-8-tf-keras-gives-different-result-in-dcgan-from-keras&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;import numpy as np

# use keras
from keras.layers import Dense, Input
from keras.models import Model

# use tf.keras
# from tensorflow.keras.layers import Dense, Input
# from tensorflow.keras.models import Model

# define input
noise = Input(shape=(10,))
x = Input(shape=(100,))

# define generator and discriminator
gen = Dense(100)
dis = Dense(1)

y = dis(x)
dis_model = Model(x, y)
dis_model.compile(optimizer='rmsprop', loss='mse')
dis_model.summary()

z = dis_model(gen(noise))
dis_model.trainable = False
combined_model = Model(noise, z)
combined_model.compile(optimizer='rmsprop', loss='mse')
combined_model.summary()

for i in range(3):
    dis_model.train_on_batch(x=np.random.rand(10, 100),
                             y=np.random.rand(10, 1))
    combined_model.train_on_batch(x=np.random.rand(10, 10),
                             y=np.random.rand(10, 1))

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='naoto0804' date='2018-09-16T04:52:53Z'>
		&lt;denchmark-link:https://github.com/naoto0804&gt;@naoto0804&lt;/denchmark-link&gt;

Keras model training will update params in  which is produced at .
When you call  to freeze , you don't compile , so two things happens:

dis_model._collected_trainable_weights still includes old trainable params.
dis_model.trainable_weights will return null, as you set all params non-trainable.

When you call dis_model.train_on_batch, the params in dis_model._collected_trainable_weights will be updated according gradient descent, so it meets your requirements. But Keras found dis_model._collected_trainable_weights and dis_model.trainable_weights are inconsistent, so print warning in case this is not by design.
When you call combined_model.compile, combined_model._collected_trainable_weights will be generated, and it doesn't includes the params in dis_model as they are marked as non-trainable.
To sum up, this warning is to prevent misuse. In your case, you code makes sense. I think we just need to reduce log frequency in  to once only, to prevent it floods the screen. I sent &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/22296&gt;#22296&lt;/denchmark-link&gt;
 to fix it. Thanks.
		</comment>
		<comment id='2' author='naoto0804' date='2018-09-16T05:53:57Z'>
		I'm bit new to tf/keras. Thank you so much for clear explanation and PR!
		</comment>
		<comment id='3' author='naoto0804' date='2018-09-17T21:28:11Z'>
		Note that you can also suppress the warning by setting back dis_model.trainable = True once you've compiled combined_model.
		</comment>
		<comment id='4' author='naoto0804' date='2018-09-25T15:14:23Z'>
		That's really cool and straightforward way, thank you for the suggestion!
		</comment>
		<comment id='5' author='naoto0804' date='2019-03-14T16:03:13Z'>
		
Note that you can also suppress the warning by setting back dis_model.trainable = True once you've compiled combined_model.

this does seem to work
		</comment>
	</comments>
</bug>