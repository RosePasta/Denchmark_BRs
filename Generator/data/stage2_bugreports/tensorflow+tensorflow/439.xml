<bug id='439' author='tcct' open_date='2015-12-08T02:51:00Z' closed_time='2016-08-09T23:45:56Z'>
	<summary>Say that we need gcc &amp;gt;= 4.8 (was "Need help on compilation error on Mac")</summary>
	<description>
Having met the following compilation errors:
tensorflow/core/kernels/fifo_queue.cc:247:46: error: expected body of lambda expression
[callback, this](Attempt* attempt) EXCLUSIVE_LOCKS_REQUIRED(mu_) {
^
Please let me know if you have any ideas. Thanks!
	</description>
	<comments>
		<comment id='1' author='tcct' date='2015-12-08T02:53:13Z'>
		Please include the entire error message.
		</comment>
		<comment id='2' author='tcct' date='2015-12-08T20:04:01Z'>
		It seems my problem is how to configure things right to use non-system default GCC. I upgraded to gcc47. And now I got the following errors. thx.
| =&gt; bazel build -c opt --copt='-fabi-version=6' --linkopt='-lrt'  //tensorflow/tools/pip_package:build_pip_package --verbose_failures
INFO: Found 1 target...
INFO: From Compiling tensorflow/core/lib/histogram/histogram.cc:
In file included from ./tensorflow/core/lib/gtl/array_slice.h:101:0,
from ./tensorflow/core/lib/histogram/histogram.h:20,
from tensorflow/core/lib/histogram/histogram.cc:16:
./tensorflow/core/lib/gtl/array_slice_internal.h:231:38: error: 'tensorflow::gtl::array_slice_internal::ArraySliceImplBase::ArraySliceImplBase' names constructor
./tensorflow/core/lib/gtl/array_slice_internal.h:251:32: error: 'tensorflow::gtl::array_slice_internal::ArraySliceImplBase::ArraySliceImplBase' names constructor
In file included from ./tensorflow/core/lib/histogram/histogram.h:20:0,
from tensorflow/core/lib/histogram/histogram.cc:16:
./tensorflow/core/lib/gtl/array_slice.h: In instantiation of 'tensorflow::gtl::ArraySlice::ArraySlice(const std::vector&lt;_RealType&gt;&amp;) [with T = double]':
tensorflow/core/lib/histogram/histogram.cc:48:11:   required from here
./tensorflow/core/lib/gtl/array_slice.h:132:33: error: no matching function for call to 'tensorflow::gtl::array_slice_internal::ArraySliceImpl::ArraySliceImpl(const double*, std::vector::size_type)'
./tensorflow/core/lib/gtl/array_slice.h:132:33: note: candidates are:
In file included from ./tensorflow/core/lib/gtl/array_slice.h:101:0,
from ./tensorflow/core/lib/histogram/histogram.h:20,
from tensorflow/core/lib/histogram/histogram.cc:16:
./tensorflow/core/lib/gtl/array_slice_internal.h:243:12: note: template tensorflow::gtl::array_slice_internal::ArraySliceImpl::ArraySliceImpl(const C&amp;)
./tensorflow/core/lib/gtl/array_slice_internal.h:243:12: note:   template argument deduction/substitution failed:
In file included from ./tensorflow/core/lib/histogram/histogram.h:20:0,
from tensorflow/core/lib/histogram/histogram.cc:16:
./tensorflow/core/lib/gtl/array_slice.h:132:33: note:   candidate expects 1 argument, 2 provided
In file included from ./tensorflow/core/lib/gtl/array_slice.h:101:0,
from ./tensorflow/core/lib/histogram/histogram.h:20,
from tensorflow/core/lib/histogram/histogram.cc:16:
./tensorflow/core/lib/gtl/array_slice_internal.h:229:7: note: constexpr tensorflow::gtl::array_slice_internal::ArraySliceImpl::ArraySliceImpl(const tensorflow::gtl::array_slice_internal::ArraySliceImpl&amp;)
./tensorflow/core/lib/gtl/array_slice_internal.h:229:7: note:   candidate expects 1 argument, 2 provided
./tensorflow/core/lib/gtl/array_slice_internal.h:229:7: note: constexpr tensorflow::gtl::array_slice_internal::ArraySliceImpl::ArraySliceImpl(tensorflow::gtl::array_slice_internal::ArraySliceImpl&amp;&amp;)
./tensorflow/core/lib/gtl/array_slice_internal.h:229:7: note:   candidate expects 1 argument, 2 provided
		</comment>
		<comment id='3' author='tcct' date='2015-12-09T05:39:36Z'>
		&lt;denchmark-link:https://github.com/vrv&gt;@vrv&lt;/denchmark-link&gt;
: What's our range of supported compilers?  Should gcc 4.7 be fine?
		</comment>
		<comment id='4' author='tcct' date='2015-12-09T06:01:34Z'>
		I'm not sure, 4.8+ is the safe assumption (the earliest we've tried successfully).
		</comment>
		<comment id='5' author='tcct' date='2015-12-09T06:03:15Z'>
		We certainly haven't tested with it, so if it doesn't work, that may be a
sign that it isn't presently supported.
On Tue, Dec 8, 2015 at 9:39 PM Geoffrey Irving &lt;denchmark-link:mailto:notifications@github.com&gt;notifications@github.com&lt;/denchmark-link&gt;

wrote:

@vrv https://github.com/vrv: What's our range of supported compilers?
Should gcc 4.7 be fine?
â€”
Reply to this email directly or view it on GitHub
#439 (comment)
.

		</comment>
		<comment id='6' author='tcct' date='2015-12-09T14:18:19Z'>
		From the error messages I've seen on our Bazel issue tracker, I'd say tensorflow definitely requires at least gcc 4.8 due to certain C++11 features being used.
		</comment>
		<comment id='7' author='tcct' date='2015-12-09T15:45:26Z'>
		We should give the compiler range in the README.
		</comment>
		<comment id='8' author='tcct' date='2015-12-09T23:21:21Z'>
		Ok, I upgraded to gcc4.8.5, and now I am having issue to compile protobuf:
INFO: From Compiling google/protobuf/src/google/protobuf/map_field.cc [for host]:
In file included from /opt/local/include/gcc48/c++/unordered_map:47:0,
from google/protobuf/src/google/protobuf/stubs/hash.h:139,
from google/protobuf/src/google/protobuf/map.h:35,
from google/protobuf/src/google/protobuf/map_field_lite.h:34,
from google/protobuf/src/google/protobuf/map_field.h:40,
from google/protobuf/src/google/protobuf/map_field.cc:31:
/opt/local/include/gcc48/c++/bits/hashtable.h: In instantiation of 'std::_Hashtable&lt;_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits&gt;::__node_type* std::_Hashtable&lt;_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits&gt;::_M_allocate_node(_Args&amp;&amp; ...) [with _Args = {const std::piecewise_construct_t&amp;, std::tuple&lt;const google::protobuf::MapKey&amp;&gt;, std::tuple&lt;&gt;}; _Key = google::protobuf::MapKey; Value = std::pair&lt;const google::protobuf::MapKey, google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;&gt;; Alloc = google::protobuf::Map&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;::MapAllocator&lt;std::pair&lt;const google::protobuf::MapKey, google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;&gt; &gt;; _ExtractKey = std::__detail::_Select1st; _Equal = std::equal_togoogle::protobuf::MapKey; _H1 = google::protobuf::hashgoogle::protobuf::MapKey; _H2 = std::__detail::_Mod_range_hashing; _Hash = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy; _Traits = std::__detail::_Hashtable_traits&lt;true, false, true&gt;; std::_Hashtable&lt;_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits&gt;::__node_type = std::__detail::Hash_node&lt;std::pair&lt;const google::protobuf::MapKey, google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;&gt;, true&gt;]':
/opt/local/include/gcc48/c++/bits/hashtable_policy.h:493:8:   required from 'std::__detail::_Map_base&lt;_Key, _Pair, _Alloc, std::__detail::_Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true&gt;::mapped_type&amp; std::__detail::_Map_base&lt;_Key, _Pair, _Alloc, std::__detail::_Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true&gt;::operator[](const key_type&amp;) [with _Key = google::protobuf::MapKey; Pair = std::pair&lt;const google::protobuf::MapKey, google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;&gt;; Alloc = google::protobuf::Map&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;::MapAllocator&lt;std::pair&lt;const google::protobuf::MapKey, google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;&gt; &gt;; _Equal = std::equal_togoogle::protobuf::MapKey; _H1 = google::protobuf::hashgoogle::protobuf::MapKey; _H2 = std::__detail::_Mod_range_hashing; _Hash = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy; _Traits = std::__detail::_Hashtable_traits&lt;true, false, true&gt;; std::__detail::_Map_base&lt;_Key, _Pair, _Alloc, std::__detail::_Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, Traits, true&gt;::mapped_type = google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;; std::__detail::_Map_base&lt;_Key, _Pair, _Alloc, std::__detail::_Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true&gt;::key_type = google::protobuf::MapKey]'
/opt/local/include/gcc48/c++/bits/unordered_map.h:596:20:   required from 'std::unordered_map&lt;_Key, _Tp, _Hash, _Pred, _Alloc&gt;::mapped_type&amp; std::unordered_map&lt;_Key, _Tp, _Hash, _Pred, _Alloc&gt;::operator[](const key_type&amp;) [with _Key = google::protobuf::MapKey; Tp = google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;; _Hash = google::protobuf::hashgoogle::protobuf::MapKey; _Pred = std::equal_togoogle::protobuf::MapKey; Alloc = google::protobuf::Map&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;::MapAllocator&lt;std::pair&lt;const google::protobuf::MapKey, google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;&gt; &gt;; std::unordered_map&lt;_Key, _Tp, _Hash, _Pred, Alloc&gt;::mapped_type = google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;; std::unordered_map&lt;_Key, _Tp, _Hash, _Pred, Alloc&gt;::key_type = google::protobuf::MapKey]'
google/protobuf/src/google/protobuf/map.h:674:36:   required from 'T&amp; google::protobuf::Map&lt;Key, T&gt;::operator[](const key_type&amp;) [with Key = google::protobuf::MapKey; T = google::protobuf::MapValueRef; google::protobuf::Map&lt;Key, T&gt;::key_type = google::protobuf::MapKey]'
google/protobuf/src/google/protobuf/map_field.cc:185:49:   required from here
/opt/local/include/gcc48/c++/bits/hashtable.h:727:6: error: no matching function for call to 'google::protobuf::Map&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;::MapAllocator&lt;std::__detail::Hash_node&lt;std::pair&lt;const google::protobuf::MapKey, google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;&gt;, true&gt; &gt;::construct(std::Hashtable&lt;google::protobuf::MapKey, std::pair&lt;const google::protobuf::MapKey, google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;&gt;, google::protobuf::Map&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;::MapAllocator&lt;std::pair&lt;const google::protobuf::MapKey, google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;&gt; &gt;, std::__detail::_Select1st, std::equal_togoogle::protobuf::MapKey, google::protobuf::hashgoogle::protobuf::MapKey, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_node_type&amp;, const std::piecewise_construct_t&amp;, std::tuple&lt;const google::protobuf::MapKey&amp;&gt;, std::tuple&lt;&gt;)'
M_node_allocator().construct(n, std::forward&lt;Args&gt;(__args)...);
^
/opt/local/include/gcc48/c++/bits/hashtable.h:727:6: note: candidate is:
In file included from google/protobuf/src/google/protobuf/map_field_lite.h:34:0,
from google/protobuf/src/google/protobuf/map_field.h:40,
from google/protobuf/src/google/protobuf/map_field.cc:31:
google/protobuf/src/google/protobuf/map.h:562:10: note: void google::protobuf::Map&lt;Key, T&gt;::MapAllocator::construct(google::protobuf::Map&lt;Key, T&gt;::MapAllocator::pointer, google::protobuf::Map&lt;Key, T&gt;::MapAllocator::const_reference) [with U = std::__detail::Hash_node&lt;std::pair&lt;const google::protobuf::MapKey, google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;&gt;, true&gt;; Key = google::protobuf::MapKey; T = google::protobuf::MapValueRef; google::protobuf::Map&lt;Key, T&gt;::MapAllocator::pointer = std::__detail::Hash_node&lt;std::pair&lt;const google::protobuf::MapKey, google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;&gt;, true&gt;; google::protobuf::Map&lt;Key, T&gt;::MapAllocator::value_type = std::detail::Hash_node&lt;std::pair&lt;const google::protobuf::MapKey, google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;&gt;, true&gt;; google::protobuf::Map&lt;Key, T&gt;::MapAllocator::const_reference = const std::detail::Hash_node&lt;std::pair&lt;const google::protobuf::MapKey, google::protobuf::MapPair&lt;google::protobuf::MapKey, google::protobuf::MapValueRef&gt;&gt;, true&gt;&amp;]
void construct(pointer p, const_reference t) { new (p) value_type(t); }
^
google/protobuf/src/google/protobuf/map.h:562:10: note:   candidate expects 2 arguments, 4 provided
ERROR: /Users/chaotan/Workspace/deep_learning/tensorflow/tensorflow1/google/protobuf/BUILD:64:1: C++ compilation of rule '//google/protobuf:protobuf' failed: osx_gcc_wrapper.sh failed: error executing command
(cd /private/var/tmp/bazel_chaotan/58945d877128dff569ec8b54b7c14ab6/tensorflow1 &amp;&amp; 
exec env - 
INTERCEPT_LOCALLY_EXECUTABLE=1 
PATH=/opt/local/bin:/usr/local/git/bin:/sw/bin/:/usr/local/bin:/usr/local/:/usr/local/sbin:/usr/local/mysql/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin:/usr/local/bin/ 
TMPDIR=/var/folders/4r/gpk5b_zn30qf4f5z7xc33k0w002l2g/T/ 
tools/cpp/osx_gcc_wrapper.sh '-D_FORTIFY_SOURCE=1' -fstack-protector -fPIE -Wall -fno-omit-frame-pointer -g0 -O2 -DNDEBUG -ffunction-sections -fdata-sections -g0 '-std=c++0x' -iquote . -iquote bazel-out/host/genfiles -isystem google/protobuf/src -isystem bazel-out/host/genfiles/google/protobuf/src -isystem tools/cpp/gcc3 -DHAVE_PTHREAD -Wall -Wwrite-strings -Woverloaded-virtual -Wno-sign-compare '-Wno-error=unused-function' -no-canonical-prefixes -Wno-builtin-macro-redefined '-D__DATE="redacted"' '-D__TIMESTAMP="redacted"' '-D__TIME="redacted"' '-frandom-seed=bazel-out/host/bin/google/protobuf/objs/protobuf/google/protobuf/src/google/protobuf/map_field.o' -MD -MF bazel-out/host/bin/google/protobuf/objs/protobuf/google/protobuf/src/google/protobuf/map_field.d -c google/protobuf/src/google/protobuf/map_field.cc -o bazel-out/host/bin/google/protobuf/objs/protobuf/google/protobuf/src/google/protobuf/map_field.o): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1: osx_gcc_wrapper.sh failed: error executing command
(cd /private/var/tmp/bazel_chaotan/58945d877128dff569ec8b54b7c14ab6/tensorflow1 &amp;&amp; 
exec env - 
INTERCEPT_LOCALLY_EXECUTABLE=1 
PATH=/opt/local/bin:/usr/local/git/bin:/sw/bin/:/usr/local/bin:/usr/local/:/usr/local/sbin:/usr/local/mysql/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin:/usr/local/bin/ 
TMPDIR=/var/folders/4r/gpk5b_zn30qf4f5z7xc33k0w002l2g/T/ 
tools/cpp/osx_gcc_wrapper.sh '-D_FORTIFY_SOURCE=1' -fstack-protector -fPIE -Wall -fno-omit-frame-pointer -g0 -O2 -DNDEBUG -ffunction-sections -fdata-sections -g0 '-std=c++0x' -iquote . -iquote bazel-out/host/genfiles -isystem google/protobuf/src -isystem bazel-out/host/genfiles/google/protobuf/src -isystem tools/cpp/gcc3 -DHAVE_PTHREAD -Wall -Wwrite-strings -Woverloaded-virtual -Wno-sign-compare '-Wno-error=unused-function' -no-canonical-prefixes -Wno-builtin-macro-redefined '-D__DATE="redacted"' '-D__TIMESTAMP="redacted"' '-D__TIME="redacted"' '-frandom-seed=bazel-out/host/bin/google/protobuf/_objs/protobuf/google/protobuf/src/google/protobuf/map_field.o' -MD -MF bazel-out/host/bin/google/protobuf/_objs/protobuf/google/protobuf/src/google/protobuf/map_field.d -c google/protobuf/src/google/protobuf/map_field.cc -o bazel-out/host/bin/google/protobuf/_objs/protobuf/google/protobuf/src/google/protobuf/map_field.o): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1.
Target //tensorflow/tools/pip_package:build_pip_package failed to build
INFO: Elapsed time: 3.012s, Critical Path: 2.06s
		</comment>
		<comment id='9' author='tcct' date='2015-12-09T23:28:10Z'>
		Wow, that's fairly unpleasant.  Unfortunate I have no idea what's going wrong, and it seems to be fairly deep inside protobuf.  Would you mind filing a bug over at &lt;denchmark-link:https://github.com/google/protobuf&gt;https://github.com/google/protobuf&lt;/denchmark-link&gt;
?  This seems like an issue on their end (apologies for the side stepping).
		</comment>
		<comment id='10' author='tcct' date='2015-12-09T23:54:12Z'>
		Will do. I am mainly referring to g3doc/get_started/os_setup.md to set up my stuff. It will be great things can be made more clear in terms of the version dependencies of all the required components. Especially since a section is dedicated to MacOS, I suppose someone is actively working on this platform. :)
Thanks!
		</comment>
		<comment id='11' author='tcct' date='2015-12-09T23:57:18Z'>
		(You're definitely helping us to figure out what those dependencies are, so thanks :)
		</comment>
		<comment id='12' author='tcct' date='2015-12-09T23:58:14Z'>
		Incidentally, if you want to get unblocked, you might try clang.  I think we haven't found all these issues yet because most people on OS X compile with clang.  Though I suppose I'm not sure what bazel uses by default.
		</comment>
		<comment id='13' author='tcct' date='2015-12-10T05:17:44Z'>
		How do you use clang to compile? thx.
		</comment>
		<comment id='14' author='tcct' date='2015-12-10T05:23:03Z'>
		&lt;denchmark-link:https://groups.google.com/forum/#!topic/bazel-discuss/m2y2ZEB7zJE&gt;https://groups.google.com/forum/#!topic/bazel-discuss/m2y2ZEB7zJE&lt;/denchmark-link&gt;
 seems like a helpful thread on this topic
		</comment>
		<comment id='15' author='tcct' date='2015-12-27T03:45:20Z'>
		I solve this question simply and roughly.EXCLUSIVE_LOCKS_REQUIRED(mu_)  is used about GPU. Because Mac doesn't support GPU, we can delete EXCLUSIVE_LOCKS_REQUIRED(mu_). so correspond syntax of lambda and compile successfully.
		</comment>
		<comment id='16' author='tcct' date='2016-05-28T08:45:51Z'>
		I encountered the same error
&lt;denchmark-code&gt;expected body of lambda expression
          [tuple, this](Attempt* attempt) EXCLUSIVE_LOCKS_REQUIRED(mu_)
&lt;/denchmark-code&gt;

in file tensorflow/tensorflow/core/kernels/fifo_queue.cc.
My build host is
&lt;denchmark-code&gt;clang++ -v
Apple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn)
Target: x86_64-apple-darwin13.2.0
&lt;/denchmark-code&gt;

Though I am using cmake instead of bazel, I think it probably uses the default clang compiler.
Thus I think this issue is not related to compiler, but compiler features flags. The compiler seems to detect that is a lambda expression, but do not expect that macro, thus the error?
		</comment>
		<comment id='17' author='tcct' date='2016-08-09T23:41:47Z'>
		&lt;denchmark-link:https://github.com/martinwicke&gt;@martinwicke&lt;/denchmark-link&gt;
 Do you want to triage this further, or should we just close?
		</comment>
		<comment id='18' author='tcct' date='2016-08-09T23:45:56Z'>
		We can close this. It's hard to see what we can do about it. It may actually be fixed now that we made the GPU code work on Mac.
		</comment>
	</comments>
</bug>