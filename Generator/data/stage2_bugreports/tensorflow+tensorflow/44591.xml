<bug id='44591' author='nityansuman' open_date='2020-11-04T18:00:44Z' closed_time='2020-12-03T18:31:51Z'>
	<summary>BUG!! tf.keras.model.summary() output is wrong</summary>
	<description>
System information

OS Platform and Distribution: Linux Ubuntu 18.04
TensorFlow version: 2.3.0
Python version: 3.8.5
GPU model and memory: Nvidia GeForce RTX 2080 Ti

Describe the current behavior
&lt;denchmark-code&gt;class DenseNormLayer(tf.keras.layers.Layer):
    def __init__(self, units, activation, name=None):
        super(DenseNormLayer, self).__init__(name=name)
        self.dense_layer = tf.keras.layers.Dense(units=units, activation=activation)
        self.batch_norm = tf.keras.layers.BatchNormalization()
    
    def call(self, x):
        x = self.batch_norm(x)
        x = self.dense_layer(x)
        return x
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;class BaselineModel(tf.keras.Model):
    def __init__(self, targets, name="BaselineModel"):
        super(BaselineModel, self).__init__(name=name)
        self.block1 = DenseNormLayer(units=1024, activation="relu", name="block1")
        self.block2 = DenseNormLayer(units=1024, activation="relu", name="block2")
        self.d1 = tf.keras.layers.Dense(units=512, activation="relu", name="d1")
        self.d2 = tf.keras.layers.Dense(units=1024, activation="relu", name="d2")
        self.dp = tf.keras.layers.Dropout(rate=0.2, name="dropout_layer")
        self.sigmoid_layer = tf.keras.layers.Dense(units=targets, activation="sigmoid", name="sigmoid_layer")
    
    def call(self, X):
        x = self.block1(X)
        x = self.block2(x)
        x = self.d1(x)
        x = self.dp(x)
        x = self.d2(x)
        x = self.sigmoid_layer(x)
        return x
    
    def build_graph(self, dim):
        x = tf.keras.Input(shape=dim)
        return tf.keras.Model(inputs=[x], outputs=self.call(x))
&lt;/denchmark-code&gt;

Output summary:
&lt;denchmark-code&gt;_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
block1 (DenseNormLayer)      multiple                  103824    
_________________________________________________________________
block2 (DenseNormLayer)      multiple                  1053696   
_________________________________________________________________
d1 (Dense)                   multiple                  524800    
_________________________________________________________________
d2 (Dense)                   multiple                  525312    
_________________________________________________________________
dropout_layer (Dropout)      multiple                  0         
_________________________________________________________________
sigmoid_layer (Dense)        multiple                  10250     
=================================================================
Total params: 2,217,882
Trainable params: 2,215,634
Non-trainable params: 2,248
_________________________________________________________________
&lt;/denchmark-code&gt;

Run this to get summary:
&lt;denchmark-code&gt;test_model = BaselineModel(targets=100)
test_model.build(input_shape=(None, 100))
test_model.summary()
&lt;/denchmark-code&gt;

As one can see in above summary, the dropout_layer is present below d2 layer which is incorrect. It should be in between of d1 and d2 layers.
I tried cleaning python cache and also tried in Jupyter Notebook but no luck.
Describe the expected behavior
When plotting with the code below, output is correct.
&lt;denchmark-code&gt;import os
tf.keras.utils.plot_model(
    test_model.build_graph(dim=100), to_file=os.path.join(".", "model.png"),
    dpi=96, show_shapes=True, show_layer_names=True, expand_nested=False
)
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/23133817/98150766-303c2180-1ef5-11eb-8c73-2d5cdbf38ebf.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='nityansuman' date='2020-11-05T13:40:30Z'>
		&lt;denchmark-link:https://github.com/nityansuman&gt;@nityansuman&lt;/denchmark-link&gt;
,
On subclassing the Model, I am facing an error stating . Please find the gist of it &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/595a785eec860a3211cf1b1d8c56112e/44591.ipynb&gt;here&lt;/denchmark-link&gt;
.
Could you please provide the complete code to reproduce the issue reported here? Thanks!
		</comment>
		<comment id='2' author='nityansuman' date='2020-11-06T20:09:33Z'>
		&lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
 Updated the code snippet to successfully build model and get summary.
Use the below snippet to build model and get summary.
&lt;denchmark-code&gt;test_model = BaselineModel(targets=100)
test_model.build(input_shape=(None, 100))
test_model.summary()
&lt;/denchmark-code&gt;

Note: Summary is only available once model has seen inputs.
		</comment>
		<comment id='3' author='nityansuman' date='2020-11-18T16:06:59Z'>
		&lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
 Any updates on this ?
		</comment>
		<comment id='4' author='nityansuman' date='2020-11-18T17:37:51Z'>
		&lt;denchmark-link:https://github.com/nityansuman&gt;@nityansuman&lt;/denchmark-link&gt;
,
Sorry for the delayed response.

    self.d2 = tf.keras.layers.Dense(units=1024, activation="relu", name="d2")
    self.dp = tf.keras.layers.Dropout(rate=0.2, name="dropout_layer")


Interchanging the above two layers gives the expected output. Please find the gist of it &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/03578c94918d33230da3b570437d14c5/44591-v2.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='5' author='nityansuman' date='2020-11-19T00:47:04Z'>
		&lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;

How is model summary getting effected with the order of layer initialisation ??? Weird behaviour. Layers are initialised dynamically at build and even though model graph is correct irrespective of the order, model summary is not.
		</comment>
		<comment id='6' author='nityansuman' date='2020-11-19T00:58:53Z'>
		&lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
 Why is model summary taking information from constructor rather than the call() method? Behaviour is wrong. Model summary displays the layer configuration and layer connection happens in call() method and not constructor.
		</comment>
		<comment id='7' author='nityansuman' date='2020-12-03T18:31:50Z'>
		This is normal behavior. Your model is a subclassed model; such models don't have a graph structure (they're a blob of bytecode). As a result the layer ordering in summary() just reflects creation order.
If you want your model to have an inspectable graph structure (and hence an order-respecting summary), use the Functional API (e.g. Model(inputs, outputs)) to define your model.
		</comment>
		<comment id='8' author='nityansuman' date='2020-12-03T18:31:52Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44591&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44591&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='nityansuman' date='2020-12-03T19:30:56Z'>
		&lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
 Interesting!! Thanks for the response.

This is normal behavior. Your model is a subclassed model; such models don't have a graph structure (they're a blob of bytecode). As a result the layer ordering in summary() just reflects creation order.
If you want your model to have an inspectable graph structure (and hence an order-respecting summary), use the Functional API (e.g. Model(inputs, outputs)) to define your model.

&lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
 Interesting!! Thanks for the response.
		</comment>
	</comments>
</bug>