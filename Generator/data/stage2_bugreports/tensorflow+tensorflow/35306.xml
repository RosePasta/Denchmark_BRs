<bug id='35306' author='gmrhub' open_date='2019-12-20T11:38:08Z' closed_time='2020-02-20T00:18:57Z'>
	<summary>A possible bug in ConvRNN2D __call__</summary>
	<description>
Referring to
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/layers/convolutional_recurrent.py#L294-L341&gt;ConvRNN2D.call&lt;/denchmark-link&gt;

L308  kwargs['initial_state'] = initial_state and L317 kwargs['constants'] = constants should be added in the else block at L340. The current situation contradicts with the use of full_input at L337.
I am not sure if we can simply replicate the code from its parent &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/layers/recurrent.py#L640-L700&gt;RNN.call&lt;/denchmark-link&gt;
.
I went ahead and tried it, but after loading the saved model weights in a complete new python session the results on validation data doesn't match at all.
I would appreciate a quick fix for local edit at least.
Thanks
	</description>
	<comments>
		<comment id='1' author='gmrhub' date='2019-12-23T09:57:32Z'>
		Can you please  help us with simple standalone code to reproduce the issue in our environment. It helps us in localizing the issue faster. Which TensorFlow version you are using?.Thanks!
		</comment>
		<comment id='2' author='gmrhub' date='2019-12-23T10:18:31Z'>
		Please refer the linked issue. That support is never resolved, people tried their own ways.
So while I was skimming through the code I noticed the bug and suggested the line numbers.
It seems that feature is never tested. After fixing the code it works but has another problem of non reproducible results when re loading the weights (in a new run). I think somehow it behaves like stateful model, which is not.
I'm using tf 2.0, but the code in master branch is same.
Since you asked, an example model:
`
from tensorflow.keras import layers
import tensorflow.keras as keras
encoder_inputs = layers.Input((None,32,32,3))
encoder = layers.ConvLSTM2D(filters=32, kernel_size=(3, 3), padding="same", return_sequences=False, return_state=True)
encoder_outputs, state_h, state_c = encoder(encoder_inputs)
encoder_states = [state_h, state_c]
decoder_inputs = layers.Input((None,32,32,4))
decoder_lstm = layers.ConvLSTM2D(filters=32, kernel_size=(3, 3), padding="same", return_sequences=False, return_state=True)
decoder_outputs, _, _ = decoder_lstm([decoder_inputs,state_h, state_c])
output = layers.Conv2D(1, (3,3), padding="same", activation="relu")(decoder_outputs)
model = keras.Model([encoder_inputs, decoder_inputs], output)
`
		</comment>
		<comment id='3' author='gmrhub' date='2019-12-24T06:49:37Z'>
		&lt;denchmark-link:https://github.com/gmrhub&gt;@gmrhub&lt;/denchmark-link&gt;

I have tried on colab with TF version 2.0,2.1.0-rc1 and i am seeing .Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/47bd873e15b693985657da79121bc541/untitled498.ipynb&gt;here&lt;/denchmark-link&gt;
.Is this the expected behavior?
		</comment>
		<comment id='4' author='gmrhub' date='2019-12-24T07:56:23Z'>
		Yes, that error is due to the lines I mentioned above.
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Tue, 24 Dec 2019 at 12:19 PM, ravikyram ***@***.***&gt; wrote:
 @gmrhub &lt;https://github.com/gmrhub&gt;
 I have tried on colab with TF version 2.0,2.1.0-rc1 and i am seeing AssertionError:
 .Please, find the gist here
 &lt;https://colab.sandbox.google.com/gist/ravikyram/47bd873e15b693985657da79121bc541/untitled498.ipynb&gt;.Is
 this the expected behavior?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 &lt;#35306?email_source=notifications&amp;email_token=ACSHLKBXQLZHJZ7ZEJWO5DLQ2GWIPA5CNFSM4J54YP5KYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEHSUCTI#issuecomment-568672589&gt;,
 or unsubscribe
 &lt;https://github.com/notifications/unsubscribe-auth/ACSHLKDD5JLODB467XTV62LQ2GWIPANCNFSM4J54YP5A&gt;
 .



		</comment>
		<comment id='5' author='gmrhub' date='2020-01-15T18:26:18Z'>
		Related stackoverflow with a workaround that allowed me to train successfully (tf 1.14): &lt;denchmark-link:https://stackoverflow.com/questions/50253138/convlstm2d-initial-state-assertion-error&gt;https://stackoverflow.com/questions/50253138/convlstm2d-initial-state-assertion-error&lt;/denchmark-link&gt;

In line 331 in  ConvRNN2D.__call__() : change
   if K.is_keras_tensor(additional_inputs[0]):
to
  if False and K.is_keras_tensor(additional_inputs[0]):
preventing the if statement from executing.
		</comment>
		<comment id='6' author='gmrhub' date='2020-02-15T00:25:05Z'>
		Sorry for the very late reply. I will take a look and fix the issue.
		</comment>
		<comment id='7' author='gmrhub' date='2020-02-20T00:18:58Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35306&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35306&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='gmrhub' date='2020-03-08T04:25:58Z'>
		tf.version=1.15.0
tf.keras.version = 2.2.4-tf
I encounter a similar problem when using tf.keras.layers.convLSTM2D with initial_state being input. The code raises the problem is
&lt;denchmark-code&gt;de_convlstm = ConvLSTM2D(filters=64, kernel_size=(5, 5), name='de_convlstm',
                             return_state=True, padding='same', return_sequences=True)
decoder_convlstm, h, c = de_convlstm(inputs=[decoder_conv2d_2, h, c])
&lt;/denchmark-code&gt;

Following a possible solution in &lt;denchmark-link:https://github.com/keras-team/keras/issues/9761#issuecomment-381058540&gt;keras-team/keras#9761 (comment)&lt;/denchmark-link&gt;
, I remove
&lt;denchmark-code&gt;inputs, initial_state, constants = self._standardize_args(
            inputs, initial_state, constants)
&lt;/denchmark-code&gt;

from tensorflow_core/python/keras/layers/convolutional_recurrent.py. However, the following ValueError is reported
ValueError: Variable &lt;tf.Variable 'en3_trans/kernel:0' shape=(1, 1, 5, 8) dtype=float32&gt; has None for gradient. Please make sure that all of your ops have a gradient defined (i.e. are differentiable). Common ops without gradient: K.argmax, K.round, K.eval
BTW, I am really sure that my code runs well without initial_state being assigned, such as
&lt;denchmark-code&gt;de_convlstm = ConvLSTM2D(filters=64, kernel_size=(5, 5), name='de_convlstm',
                             return_state=True, padding='same', return_sequences=True)
decoder_convlstm, h, c = de_convlstm(inputs=decoder_conv2d_2)
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>