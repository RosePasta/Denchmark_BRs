<bug id='36833' author='yufengm' open_date='2020-02-17T19:24:59Z' closed_time='2020-09-10T04:16:26Z'>
	<summary>[tf2.1.0] model.save() throws TypeError when using tf.debugging.enable_check_numerics()</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Redhat 8.1 (in Docker)
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): TF2.1.0
Python version: 3.6.8
CUDA/cuDNN version: 10.1
GPU model and memory: V100, 32GB

Describe the current behavior
when using tf.debugging.enable_check_numerics(), model.save(...) will throw some TypeError as below:
&lt;denchmark-code&gt;TypeError: Input 'resource' of 'AssignVariableOp' Op has type float32 that does not match expected type of resource.
&lt;/denchmark-code&gt;

Code to reproduce the issue
import tensorflow as tf
tf.debugging.enable_check_numerics()

def build_and_compile_model():
    
    input = tf.keras.Input((20,))
    y = tf.keras.layers.Dense(2)
    model = tf.keras.Model(inputs=input, outputs=y)
    
    model.compile(
        loss=tf.keras.losses.sparse_categorical_crossentropy,
        optimizer=tf.keras.optimizers.SGD(learning_rate=0.001),
        metrics=['accuracy'])
    
    return model

model = build_and_compile_model()
model.save('test', save_format='tf')
Other info / logs
Traceback logs as follows:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
/tmp/site-packages/tensorflow_core/python/framework/op_def_library.py in _apply_op_helper(op_type_name, name, **keywords)
    467               as_ref=input_arg.is_ref,
--&gt; 468               preferred_dtype=default_dtype)
    469         except TypeError as err:

/tmp/site-packages/tensorflow_core/python/framework/ops.py in convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, dtype_hint, ctx, accepted_result_types)
   1289           "Tensor conversion requested dtype %s for Tensor with dtype %s: %r" %
-&gt; 1290           (dtype.name, value.dtype.name, value))
   1291     return value

ValueError: Tensor conversion requested dtype resource for Tensor with dtype float32: &lt;tf.Tensor 'dense/kernel/Read/ReadVariableOp:0' shape=(20, 2) dtype=float32&gt;

During handling of the above exception, another exception occurred:

TypeError                                 Traceback (most recent call last)
&lt;ipython-input-3-597a577ec9b0&gt; in &lt;module&gt;()
      3 model = build_and_compile_model()
      4 
----&gt; 5 model.save('test', save_format='tf')

/tmp/site-packages/tensorflow_core/python/keras/engine/network.py in save(self, filepath, overwrite, include_optimizer, save_format, signatures, options)
   1006     """
   1007     save.save_model(self, filepath, overwrite, include_optimizer, save_format,
-&gt; 1008                     signatures, options)
   1009 
   1010   def save_weights(self, filepath, overwrite=True, save_format=None):

/tmp/site-packages/tensorflow_core/python/keras/saving/save.py in save_model(model, filepath, overwrite, include_optimizer, save_format, signatures, options)
    113   else:
    114     saved_model_save.save(model, filepath, overwrite, include_optimizer,
--&gt; 115                           signatures, options)
    116 
    117 

/tmp/site-packages/tensorflow_core/python/keras/saving/saved_model/save.py in save(model, filepath, overwrite, include_optimizer, signatures, options)
     76     # we use the default replica context here.
     77     with distribution_strategy_context._get_default_replica_context():  # pylint: disable=protected-access
---&gt; 78       save_lib.save(model, filepath, signatures, options)
     79 
     80   if not include_optimizer:

/tmp/site-packages/tensorflow_core/python/saved_model/save.py in save(obj, export_dir, signatures, options)
    907   object_saver = util.TrackableSaver(checkpoint_graph_view)
    908   asset_info, exported_graph = _fill_meta_graph_def(
--&gt; 909       meta_graph_def, saveable_view, signatures, options.namespace_whitelist)
    910   saved_model.saved_model_schema_version = (
    911       constants.SAVED_MODEL_SCHEMA_VERSION)

/tmp/site-packages/tensorflow_core/python/saved_model/save.py in _fill_meta_graph_def(meta_graph_def, saveable_view, signature_functions, namespace_whitelist)
    588     for concrete_function in saveable_view.concrete_functions:
    589       concrete_function.add_to_graph()
--&gt; 590     saver_def = saver.to_proto()
    591     meta_graph_def.saver_def.CopyFrom(saver_def)
    592   graph_def = exported_graph.as_graph_def(add_shapes=True)

/tmp/site-packages/tensorflow_core/python/training/saving/functional_saver.py in to_proto(self)
    149         shape=[], dtype=dtypes.string, name="saver_filename")
    150     save_tensor = self._traced_save(filename_tensor)
--&gt; 151     restore_op = self._traced_restore(filename_tensor).op
    152     return saver_pb2.SaverDef(
    153         filename_tensor_name=filename_tensor.name,

/tmp/site-packages/tensorflow_core/python/eager/def_function.py in __call__(self, *args, **kwds)
    566         xla_context.Exit()
    567     else:
--&gt; 568       result = self._call(*args, **kwds)
    569 
    570     if tracing_count == self._get_tracing_count():

/tmp/site-packages/tensorflow_core/python/eager/def_function.py in _call(self, *args, **kwds)
    613       # This is the first call of __call__, so we have to initialize.
    614       initializers = []
--&gt; 615       self._initialize(args, kwds, add_initializers_to=initializers)
    616     finally:
    617       # At this point we know that the initialization is complete (or less

/tmp/site-packages/tensorflow_core/python/eager/def_function.py in _initialize(self, args, kwds, add_initializers_to)
    495     self._concrete_stateful_fn = (
    496         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access
--&gt; 497             *args, **kwds))
    498 
    499     def invalid_creator_scope(*unused_args, **unused_kwds):

/tmp/site-packages/tensorflow_core/python/eager/function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)
   2387       args, kwargs = None, None
   2388     with self._lock:
-&gt; 2389       graph_function, _, _ = self._maybe_define_function(args, kwargs)
   2390     return graph_function
   2391 

/tmp/site-packages/tensorflow_core/python/eager/function.py in _maybe_define_function(self, args, kwargs)
   2701 
   2702       self._function_cache.missed.add(call_context_key)
-&gt; 2703       graph_function = self._create_graph_function(args, kwargs)
   2704       self._function_cache.primary[cache_key] = graph_function
   2705       return graph_function, args, kwargs

/tmp/site-packages/tensorflow_core/python/eager/function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)
   2591             arg_names=arg_names,
   2592             override_flat_arg_shapes=override_flat_arg_shapes,
-&gt; 2593             capture_by_value=self._capture_by_value),
   2594         self._function_attributes,
   2595         # Tell the ConcreteFunction to clean up its graph once it goes out of

/tmp/site-packages/tensorflow_core/python/framework/func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)
    976                                           converted_func)
    977 
--&gt; 978       func_outputs = python_func(*func_args, **func_kwargs)
    979 
    980       # invariant: `func_outputs` contains only Tensors, CompositeTensors,

/tmp/site-packages/tensorflow_core/python/eager/def_function.py in wrapped_fn(*args, **kwds)
    437         # __wrapped__ allows AutoGraph to swap in a converted function. We give
    438         # the function a weak reference to itself to avoid a reference cycle.
--&gt; 439         return weak_wrapped_fn().__wrapped__(*args, **kwds)
    440     weak_wrapped_fn = weakref.ref(wrapped_fn)
    441 

/tmp/site-packages/tensorflow_core/python/eager/function.py in bound_method_wrapper(*args, **kwargs)
   3204       if tf_inspect.ismethod(wrapped_fn):
   3205         wrapped_fn = six.get_unbound_function(wrapped_fn)
-&gt; 3206       return wrapped_fn(weak_instance(), *args, **kwargs)
   3207 
   3208     # If __wrapped__ was replaced, then it is always an unbound function.

/tmp/site-packages/tensorflow_core/python/training/saving/functional_saver.py in _traced_restore(self, file_prefix)
    169       autograph=False)
    170   def _traced_restore(self, file_prefix):
--&gt; 171     restore_ops = self.restore(file_prefix)
    172     with ops.device("cpu:0"):
    173       with ops.control_dependencies(restore_ops.values()):

/tmp/site-packages/tensorflow_core/python/training/saving/functional_saver.py in restore(self, file_prefix)
    253     for device, saver in sorted(self._single_device_savers.items()):
    254       with ops.device(device):
--&gt; 255         restore_ops.update(saver.restore(file_prefix))
    256     return restore_ops

/tmp/site-packages/tensorflow_core/python/training/saving/functional_saver.py in restore(self, file_prefix)
    100                                           structured_restored_tensors):
    101       restore_ops[saveable.name] = saveable.restore(
--&gt; 102           restored_tensors, restored_shapes=None)
    103     return restore_ops
    104 

/tmp/site-packages/tensorflow_core/python/training/saving/saveable_object_util.py in restore(self, restored_tensors, restored_shapes)
    114       restored_tensor = array_ops.identity(restored_tensor)
    115       return resource_variable_ops.shape_safe_assign_variable_handle(
--&gt; 116           self.handle_op, self._var_shape, restored_tensor)
    117 
    118 

/tmp/site-packages/tensorflow_core/python/ops/resource_variable_ops.py in shape_safe_assign_variable_handle(handle, shape, value, name)
    298   return gen_resource_variable_ops.assign_variable_op(handle,
    299                                                       value_tensor,
--&gt; 300                                                       name=name)
    301 
    302 

/tmp/site-packages/tensorflow_core/python/ops/gen_resource_variable_ops.py in assign_variable_op(resource, value, name)
    152   # Add nodes to the TensorFlow graph.
    153   _, _, _op, _outputs = _op_def_library._apply_op_helper(
--&gt; 154         "AssignVariableOp", resource=resource, value=value, name=name)
    155   return _op
    156 AssignVariableOp = tf_export("raw_ops.AssignVariableOp")(_ops.to_raw_op(assign_variable_op))

/tmp/site-packages/tensorflow_core/python/framework/op_def_library.py in _apply_op_helper(op_type_name, name, **keywords)
    489           if input_arg.type != types_pb2.DT_INVALID:
    490             raise TypeError("%s expected type of %s." %
--&gt; 491                             (prefix, dtypes.as_dtype(input_arg.type).name))
    492           else:
    493             # Update the maps with the default, if needed.

TypeError: Input 'resource' of 'AssignVariableOp' Op has type float32 that does not match expected type of resource.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='yufengm' date='2020-02-19T13:40:48Z'>
		&lt;denchmark-link:https://github.com/yufengm&gt;@yufengm&lt;/denchmark-link&gt;
,
I tried to reproduce the issue given above but I am facing an error stating 
Please find the Gist of it &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/919ae43998fbe508d97b44a29772875a/36833.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='yufengm' date='2020-02-19T16:27:30Z'>
		&lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;

sorry, my bad. There was a typo in my provided code. It should be
y = tf.keras.layers.Dense(2)(input)
		</comment>
		<comment id='3' author='yufengm' date='2020-02-25T13:18:43Z'>
		Was able to reproduce the issue with TF 2.1 and TF-nightly. Please find the Gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/05abc701f4eab9ed24c94a9fdef6acb0/36833.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='yufengm' date='2020-08-10T21:29:27Z'>
		&lt;denchmark-link:https://github.com/yufengm&gt;@yufengm&lt;/denchmark-link&gt;
 I think There is some  compatibility issue when you want to save the model in  format. Please check the resource on TF website &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/debugging/enable_check_numerics&gt;here&lt;/denchmark-link&gt;
.
However, there is no issue when you save the model in h5 format.

model.save('test', save_format='h5')

Thanks!
		</comment>
		<comment id='5' author='yufengm' date='2020-09-03T03:22:16Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='6' author='yufengm' date='2020-09-10T04:16:25Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='7' author='yufengm' date='2020-09-10T04:16:27Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36833&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36833&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>