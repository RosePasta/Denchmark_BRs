<bug id='31373' author='SumNeuron' open_date='2019-08-06T17:19:04Z' closed_time='2019-08-25T21:40:19Z'>
	<summary>tf.data.Dataset.map + tf.numpy_function = lost shape sadness</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): I slightly modified a tf documentation code
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): 16.04 LTS / macOS 14
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: n/a
TensorFlow installed from (source or binary): 1.14
TensorFlow version (use command below): conda
Python version: 3.7
Bazel version (if compiling from source): n/a
GCC/Compiler version (if compiling from source): n/a
CUDA/cuDNN version: colab
GPU model and memory: colab

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
tf.numpy_function works are wrapping numpy / python functions with tf 1.14 in eager and normal mode, but shape is lost
# slight modification from "Load Images with tf.data" https://www.tensorflow.org/tutorials/load_data/images


def preprocess_image(image, resize=[192, 192]):
  image = tf.image.decode_jpeg(image, channels=3)
  image = tf.image.resize(image, [192, 192])
  image /= 255.0  # normalize to [0,1] range

  return image


def load_and_preprocess_image(path, resize=[192, 192]):
  image = tf.read_file(path)
  return preprocess_image(image, resize)

# dataset only contains paths, so wrap whatever value for `resize` in lambda
_load_and_preprocess_image = lambda path: load_and_preprocess_image(path, [192,192])

# we "have" numpy functionality for handling images so wrap in `tf.numpy_function`
tf_load_and_preprocess_image = lambda path: tf.numpy_function(_load_and_preprocess_image, [path], tf.float32)

# map
image_ds2_error_boogaloo = path_ds.map(tf_load_and_preprocess_image, num_parallel_calls=AUTOTUNE)

# no shape
image_ds2_error_boogaloo
# `&lt;DatasetV1Adapter shapes: , types: tf.float32&gt;`
Describe the expected behavior
shape is not lost
supposedly fixed here &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/16052&gt;#16052&lt;/denchmark-link&gt;

Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
&lt;denchmark-link:https://colab.research.google.com/drive/1DeGMPxb8cyHm5QLpqJ9-cB2sbF8PC3vA#scrollTo=qGiGN5rl4s2f&amp;line=22&amp;uniqifier=1&gt;https://colab.research.google.com/drive/1DeGMPxb8cyHm5QLpqJ9-cB2sbF8PC3vA#scrollTo=qGiGN5rl4s2f&amp;line=22&amp;uniqifier=1&lt;/denchmark-link&gt;

Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='SumNeuron' date='2019-08-07T09:16:18Z'>
		I have tried on colab with TF version 1.14 &lt;denchmark-link:https://colab.research.google.com/drive/1w9vKC09IiCJm8X-IQHDGNWxs8WpMPc8J&gt;gist&lt;/denchmark-link&gt;
 and nightly versions &lt;denchmark-link:https://colab.research.google.com/drive/1Qh1ts8-ijENNopr9yd2pA8_uFBMkxMiQ&gt;gist&lt;/denchmark-link&gt;
 was able to reproduce the issue.Thanks!
		</comment>
		<comment id='2' author='SumNeuron' date='2019-08-15T12:17:05Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 any updates?
		</comment>
		<comment id='3' author='SumNeuron' date='2019-08-15T21:25:41Z'>
		I was dealing with the same problem (in Tensorflow 2.0 beta) and found a workaround of manually setting the _output_structure attribute of the _map_func (StructuredFunctionWrapper) attribute of MapDataset (possible thanks to Python's lack of hidden variables) with the proper NestedStructure object i.e
&lt;denchmark-code&gt;image_ds._map_func._output_structure = data.experimental.NestedStructure(...)
&lt;/denchmark-code&gt;

This suggests a fix of providing an optional structure tuple to Dataset.map that can be passed to the  StructuredFunctionWrapper to be used in lieu of automatic inference. Not sure how easy that is ; the StructuredFunctionWrapper class is fairly opaque to me at first glance.
		</comment>
		<comment id='4' author='SumNeuron' date='2019-08-25T21:40:19Z'>
		&lt;denchmark-link:https://github.com/SumNeuron&gt;@SumNeuron&lt;/denchmark-link&gt;
  is opaque to shape inference (as it can contain arbitrary Python code), so the functionality you are asking for is not feasible. Having said that, I don't see why you need to use  for your example. The follow pipeline will work just fine:
&lt;denchmark-code&gt;files = tf.data.Dataset.list_files(...)
images = files.map(lambda f: tf.io.read_file(f))
images = images.map(lambda image: tf.io.decode_jpeg(image))
images = images.map(lambda image: tf.cast(tf.image.resize_images(image, (128, 128)), tf.uint8))
images = images.map(lambda image: tf.cast(image, tf.float32) / 255)
&lt;/denchmark-code&gt;

EDIT: Note that you can also restore shapes lost due to applying a numpy_function through map(lambda x: tf.set_shape(x, ...).
&lt;denchmark-link:https://github.com/deasmhumhna&gt;@deasmhumhna&lt;/denchmark-link&gt;
 I would highly discourage your from relying on implementation details of private attributes as these may change between versions and your code will break.
		</comment>
		<comment id='5' author='SumNeuron' date='2019-08-25T21:40:20Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=31373&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=31373&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='SumNeuron' date='2019-08-26T04:02:34Z'>
		&lt;denchmark-link:https://github.com/jsimsa&gt;@jsimsa&lt;/denchmark-link&gt;
 the reason for the  inclusion, is because I provided a MWE rather than the actual code. Perhaps one would, inside of , do more advanced alterations. See &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/31235&gt;issue 31235&lt;/denchmark-link&gt;
 which includes code copy-pasted from keras's image processing which one might want to use without re writing  core functions.
As for "as it can contain arbitrary Python code", true, but in context of applying numpy code to tf.data.Datasets that doesn't mean it has to exclude attempting shape inference. As stated in the docs:

Given a python function func, which takes numpy arrays as its arguments and returns numpy arrays as its outputs, wrap this function as an operation in a TensorFlow graph.

Since it returns arrays as outputs, and numpy arrays have shape this seems like an easy thing to do.
		</comment>
		<comment id='7' author='SumNeuron' date='2019-08-26T23:23:09Z'>
		The "easy thing to do" amounts to writing shape inference for arbitrary Python code, which is not an easy thing to do.
		</comment>
		<comment id='8' author='SumNeuron' date='2020-01-13T13:30:28Z'>
		I had the issue of lost shape because of .map with tf.py_function and I fixed it with the following code (thanks to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/16052#issue-287936599&gt;#16052 (comment)&lt;/denchmark-link&gt;
) :
def set_shapes(img, label, img_shape):
    img.set_shape(img_shape)
    label.set_shape([])
    return img, label

img_shape = images[0].shape  # images is a list of numpy.ndarray
ds = ds.map(lambda img, label: tf.py_function( ... ) )
ds = ds.map(lambda img, label: set_shapes(img, label, img_shape) )
		</comment>
		<comment id='9' author='SumNeuron' date='2020-05-12T20:48:12Z'>
		this shape missing behaviour is a really annoying problem, it defeat the purpose of the py_function, and it should be fixed.
		</comment>
		<comment id='10' author='SumNeuron' date='2020-12-04T20:14:06Z'>
		To fix this issue, I used the following code :
def map_func(img_name, cap):
 img_tensor = np.load(img_name) 
 return img_tensor, cap 
dataset = tf.data.Dataset.from_tensor_slices((train_video_paths, train_labels))
def shape(x,y):
  x.set_shape((6000,400))
  y.set_shape((48))
  return x,y

dataset = dataset.map(lambda item1, item2: tf.numpy_function(map_func, [item1, item2], [tf.float32, tf.int32]),num_parallel_calls=tf.data.experimental.AUTOTUNE)
dataset=dataset.map(shape)
dataset = dataset.shuffle(5).batch(5)
dataset = dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)
But it gives the following error when iterating through the dataset:
InvalidArgumentError: 0-th value returned by pyfunc_7 is double, but expects float
[[{{node PyFunc}}]]
		</comment>
	</comments>
</bug>