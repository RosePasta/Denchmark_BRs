<bug id='32702' author='drasmuss' open_date='2019-09-20T22:43:59Z' closed_time='2020-03-19T14:30:32Z'>
	<summary>Keras casts targets to incorrect dtype</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.0.0rc1
Python version: 3.6.8
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
Keras tries to cast targets to the dtypes of the model outputs. Currently it assumes that every model output has a corresponding target, so when doing this casting it just matches outputs and targets up one-to-one. But in the case where some outputs are not part of the loss function (i.e. they were missing from the loss dictionary passed to compile), this may match outputs to the wrong targets. Then it casts targets to the wrong dtype, causing errors.
Describe the expected behavior
Keras should match up targets with the correct output when casting, according to the loss dictionary defined in compile.  If a model output is not part of the loss function, then it should be ignored when casting targets.
Code to reproduce the issue
import tensorflow as tf
import numpy as np

inp = tf.keras.layers.Input(shape=(1,))
out0 = tf.cast(inp, tf.int32)
out1 = tf.cast(inp, tf.float64)

model = tf.keras.Model(inputs=inp, outputs=[out0, out1])

model.compile(loss={model.output_names[1]: tf.losses.mse})

model.evaluate(
    np.ones((1, 1), dtype=np.float32),
    {model.output_names[1]: np.ones((1, 1), dtype=np.float32)},
)
This results in the error
&lt;denchmark-code&gt;TypeError: Value passed to parameter 'x' has DataType int32 not in list of allowed values: float16, float32, float64, complex64, complex128
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='drasmuss' date='2019-09-23T06:20:05Z'>
		Issue replicating for TF-2.0rc1, please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/oanush/b796d39a08fb5c287034ece6853834d3/32702.ipynb&gt;gist&lt;/denchmark-link&gt;
 of colab.Thanks!
		</comment>
		<comment id='2' author='drasmuss' date='2020-02-28T00:34:32Z'>
		Is this issue still open?
		</comment>
		<comment id='3' author='drasmuss' date='2020-03-18T02:44:52Z'>
		&lt;denchmark-link:https://github.com/drasmuss&gt;@drasmuss&lt;/denchmark-link&gt;
 can you please check this issue with . When I ran your code with , i see the following output.
&lt;denchmark-code&gt;1/1 [==============================] - 0s 1ms/step - loss: 0.0000e+00 - tf_op_layer_Cast_1_loss: 0.0000e+00
[0.0, 0.0]
&lt;/denchmark-code&gt;

Please close the issue if this issue was resolved for you. Thanks!
		</comment>
		<comment id='4' author='drasmuss' date='2020-03-19T14:30:32Z'>
		Yep looks like this is fixed in tf-nightly.
		</comment>
		<comment id='5' author='drasmuss' date='2020-03-19T14:30:33Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32702&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32702&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>