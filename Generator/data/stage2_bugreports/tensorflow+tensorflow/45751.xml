<bug id='45751' author='raulsoutelo' open_date='2020-12-16T19:02:25Z' closed_time='2021-01-04T11:16:58Z'>
	<summary>Unexpected kernel_shape (and trainable parameters) in Keras group convolution</summary>
	<description>
In Google Colab (tensorflow version 2.3.0) I am getting an unexpected kernel shape (and trainable params in the layer) for keras group convolution.
&lt;denchmark-code&gt;import tensorflow as tf
print(tensorflow.__version__)

batch = 15
channels = 6
rows = 10
cols = 10
kernel = (3, 3)
groups = 2
filters = 32

conv_layer = tf.keras.layers.Conv2D(filters, kernel, groups)

output = conv_layer(tf.ones([batch, rows, cols, channels]))

print(conv_layer.get_weights()[0].shape)
print(conv_layer.get_weights()[1].shape)
&lt;/denchmark-code&gt;

gives me the following output:
&lt;denchmark-code&gt;2.3.0
(3, 3, 6, 32)
(32,)
&lt;/denchmark-code&gt;

Reading the documentation for the groups params in Conv1D/Conv2D/Conv3D, I was expecting a kernel shape of the following dimensions: weights (3, 3, 6, 16) and biases (16,). Is that a bug or I am missing something?
Thanks!
	</description>
	<comments>
		<comment id='1' author='raulsoutelo' date='2020-12-17T04:02:53Z'>
		I have tried in colab with TF version 2.2, 2.3 and nightly version() and was able to reproduce the issue. Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/191e8f4f718524085cdad0f5ea139be8/untitled581.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='raulsoutelo' date='2020-12-19T17:23:14Z'>
		Sorry, my previous code snippet had a bug since groups is not the third param in Conv2D. Here is an updated version:
&lt;denchmark-code&gt;import tensorflow as tf
print(tf.__version__)

batch =15
channels=6
rows = 10
cols = 10
kernel = (3, 3)
groups = 2
filters = 32

conv_layer = tf.keras.layers.Conv2D(filters, kernel, groups=groups)

output = conv_layer(tf.ones([batch, rows, cols, channels]))

print(conv_layer.get_weights()[0].shape)
print(conv_layer.get_weights()[1].shape)
&lt;/denchmark-code&gt;

This prints
&lt;denchmark-code&gt;2.4.0
(3, 3, 3, 32)
(32,)
&lt;/denchmark-code&gt;

which corresponds to: kernel + channels/2 + filters.
This kernel_shape would look okey to me if the params of the convolution are NOT shared across the different groups. This seems to be the case, right?
		</comment>
		<comment id='3' author='raulsoutelo' date='2020-12-23T09:28:21Z'>
		&lt;denchmark-link:https://github.com/raulsoutelo&gt;@raulsoutelo&lt;/denchmark-link&gt;
,
The behavior is expected because, as per the &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D#arguments_1&gt;Documentation of Groups Argument&lt;/denchmark-link&gt;
,

The output is the concatenation of all the groups results along the channel axis.

and as per &lt;denchmark-link:https://blog.yani.ai/filter-group-tutorial/&gt;this blog&lt;/denchmark-link&gt;
 ,

each filter group are convolved with only half the previous layerâ€™s featuremaps

From the above statements, Feature Maps from previous layers are divided among 2 Groups but finally, they are concatenated.
Hence, the Number of Parameters with and without Groups (by the end of the Layer) will be same but the Representational Power is better.
		</comment>
		<comment id='4' author='raulsoutelo' date='2020-12-30T09:55:35Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='5' author='raulsoutelo' date='2021-01-04T08:03:30Z'>
		&lt;denchmark-link:https://github.com/raulsoutelo&gt;@raulsoutelo&lt;/denchmark-link&gt;
,
Can you please respond to the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/45751#issuecomment-750035881&gt;above comment&lt;/denchmark-link&gt;
? Thanks!
		</comment>
		<comment id='6' author='raulsoutelo' date='2021-01-04T09:02:10Z'>
		Thanks for the clarification &lt;denchmark-link:https://github.com/rmothukuru&gt;@rmothukuru&lt;/denchmark-link&gt;
. I initially thought this group parameter was the size of the group in Group Equivariant Convolutional Networks which is not the case. The previous comment is clear to me. Thanks!
		</comment>
		<comment id='7' author='raulsoutelo' date='2021-01-04T11:16:59Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/45751&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/45751&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>