<bug id='14361' author='humcasma' open_date='2017-11-08T12:53:33Z' closed_time='2017-11-09T18:17:57Z'>
	<summary>tf.name_scope() is not propagated to variables created by Keras layers</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): YES
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS 10.12.6
TensorFlow installed from (source or binary): BINARY
TensorFlow version (use command below): v1.4.0-rc1-11-g130a514 1.4.0
Python version: 3.5.4
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:
Exact command to reproduce:

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

When using Keras layers in combination with tf.name_scope(a_name), a_name is added to the name of the layers. I would also expect it to be added to the name of the weights/variables that Keras creates internally. However, that is not the case. Having an automatic way of adding a name scope to the weights is highly desirable, though.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;with tf.name_scope("test"):
     a = tf.keras.layers.Input(shape=(5,))
     b = tf.keras.layers.Dense(5)(a)
&lt;/denchmark-code&gt;

Output:
Executing a.name returns test/input_1:0 as expected.
tf.trainable_variables() returns:
[&lt;tf.Variable 'dense/kernel:0' shape=(5, 5) dtype=float32_ref&gt;, &lt;tf.Variable 'dense/bias:0' shape=(5,) dtype=float32_ref&gt;]
	</description>
	<comments>
		<comment id='1' author='humcasma' date='2017-11-08T20:36:37Z'>
		&lt;denchmark-link:https://github.com/martinwicke&gt;@martinwicke&lt;/denchmark-link&gt;
, can you take a look at this?
		</comment>
		<comment id='2' author='humcasma' date='2017-11-09T11:14:49Z'>
		How about using Ë‹with tf.variable_scope("test")`?
		</comment>
		<comment id='3' author='humcasma' date='2017-11-09T12:48:10Z'>
		tf.name_scope will NOT affect the name of Variable, use tf.variable_scope instead.
tf.name_scope will affect the name of Operation and thus Tensor.
		</comment>
		<comment id='4' author='humcasma' date='2017-11-09T13:00:50Z'>
		&lt;denchmark-link:https://github.com/roytseng-tw&gt;@roytseng-tw&lt;/denchmark-link&gt;
 is right.
import tensorflow as tf

with tf.variable_scope("test"):
     a = tf.keras.layers.Input(shape=(5,))
     b = tf.keras.layers.Dense(5)(a)
     print(tf.trainable_variables())
# output
# [&lt;tf.Variable 'test/dense/kernel:0' shape=(5, 5) dtype=float32_ref&gt;, 
# &lt;tf.Variable 'test/dense/bias:0' shape=(5,) dtype=float32_ref&gt;]
		</comment>
		<comment id='5' author='humcasma' date='2017-11-09T13:16:24Z'>
		That is true. tf.variable_scope does what I was expecting from tf.name_scope. I guess one can combine both to have both variables and operations named.
A more correct name for tf.name_scope would probably be tf.operation_scope, though. But probably not realistic to change now.
		</comment>
		<comment id='6' author='humcasma' date='2017-11-09T14:07:27Z'>
		Hi, &lt;denchmark-link:https://github.com/humcasma&gt;@humcasma&lt;/denchmark-link&gt;
. In fact,  always creates an auxiliary name scope (for convenience) when used, so it is indeed what you desired. Moreover, you are also free to combine  with  to custom them separately.
		</comment>
		<comment id='7' author='humcasma' date='2017-11-09T18:17:57Z'>
		This appears to be resolved (and does not seem to indicate a bug), so I'm closing the issue to keep the issue tracker focused. Feel free to reopen if needed.
		</comment>
		<comment id='8' author='humcasma' date='2019-05-30T17:01:00Z'>
		
@roytseng-tw is right.
import tensorflow as tf

with tf.variable_scope("test"):
     a = tf.keras.layers.Input(shape=(5,))
     b = tf.keras.layers.Dense(5)(a)
     print(tf.trainable_variables())
# output
# [&lt;tf.Variable 'test/dense/kernel:0' shape=(5, 5) dtype=float32_ref&gt;, 
# &lt;tf.Variable 'test/dense/bias:0' shape=(5,) dtype=float32_ref&gt;]

When I do this it comes up empty?
&lt;denchmark-link:https://user-images.githubusercontent.com/23745329/58649766-f5cf5d80-82da-11e9-9a74-519b32046626.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='humcasma' date='2019-05-30T17:12:19Z'>
		&lt;denchmark-link:https://github.com/alexandervandekleut&gt;@alexandervandekleut&lt;/denchmark-link&gt;
 your code has nothing to do with scopes.  is a global collection, which isn't used by Keras. It's also deprecated.
To access the variables in layers, use their .trainable_variables property.
		</comment>
		<comment id='10' author='humcasma' date='2019-05-30T20:00:50Z'>
		
@alexandervandekleut your code has nothing to do with scopes. tf.trainable_variables is a global collection, which isn't used by Keras. It's also deprecated.
To access the variables in layers, use their .trainable_variables property.

Thanks for the fast reply!
I copy and pasted code from above in this thread, which worked for them but not for me - so something has changed between then and now. Thanks for letting me know about how that works though - all of the stackoverflow answers didn't mention that.
		</comment>
	</comments>
</bug>