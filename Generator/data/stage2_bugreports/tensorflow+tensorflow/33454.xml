<bug id='33454' author='fchouteau' open_date='2019-10-17T09:22:13Z' closed_time='2020-03-17T01:15:54Z'>
	<summary>[1.15]Discrepancy between documentation &amp; behaviour in tf.keras.Model.Save</summary>
	<description>
&lt;denchmark-h:h2&gt;URL(s) with the issue:&lt;/denchmark-h&gt;

In the 1.15 changelog:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/releases/tag/v1.15.0&gt;https://github.com/tensorflow/tensorflow/releases/tag/v1.15.0&lt;/denchmark-link&gt;


tf.keras.model.save_model and model.save now defaults to saving a TensorFlow SavedModel.

In the 1.15 docstring:
&lt;denchmark-link:https://www.tensorflow.org/versions/r1.15/api_docs/python/tf/keras/Model#save&gt;https://www.tensorflow.org/versions/r1.15/api_docs/python/tf/keras/Model#save&lt;/denchmark-link&gt;


filepath: String, path to SavedModel or H5 file to save the model. overwrite: Whether to silently
overwrite any existing file at the target location, or provide the user with a manual prompt. include_optimizer: If True, save optimizer's state together. save_format: Either 'tf' or 'h5', indicating whether to save the model to Tensorflow SavedModel or HDF5. The default is currently 'h5', but will switch to 'tf' in TensorFlow 2.0. The 'tf' option is currently disabled (use tf.keras.experimental.export_saved_model instead).

&lt;denchmark-h:h2&gt;Description of issue (what needs changing):&lt;/denchmark-h&gt;


The changelogs states that tf.keras.Model are saved using tf format by default
The docstring states that the default save format in tf1.x is hdf5 and that tf is disabled
"tf" save format is NOT disabled but can be passed as parameters
https://github.com/tensorflow/tensorflow/blob/r1.15/tensorflow/python/keras/saving/save.py#L92
We can still save using tf format using tf.keras.Model.save(). HOWEVER you cannot load tf model

&lt;denchmark-h:h2&gt;Usage example&lt;/denchmark-h&gt;

This is not a critical issue but this can be confusing to users reading the changelog and reading the docstring, and seeing that tf behaviour is enabled by default.
This will lead users to:

Being confused between behaviours...
Thinking they need to update their codebases to switch to 1.15
Seeing that tf format doesn't work in tf1.15

Saving works but not reloading, which confirms the fact that tf save format doesn't work
i = tf.keras.layers.Input(shape=(10,))
x = tf.keras.layers.Dense(2)(i)
o = tf.keras.layers.Activation("softmax")(x)
m = tf.keras.Model(inputs=i, outputs=o)
m.save('test_model_tf', save_format="tf")
m2 = tf.keras.models.load_model("test_model_tf")
m2.summary()
&lt;denchmark-code&gt;Layer (type)                 Output Shape              Param #   
=================================================================
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-48-d0af62cb113d&gt; in &lt;module&gt;
----&gt; 1 m2.summary()

~/opt/miniconda3/envs/py36-tf1.15/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/network.py in summary(self, line_length, positions, print_fn)
   1459                               line_length=line_length,
   1460                               positions=positions,
-&gt; 1461                               print_fn=print_fn)
   1462 
   1463   def _validate_graph_inputs_and_outputs(self):

~/opt/miniconda3/envs/py36-tf1.15/lib/python3.6/site-packages/tensorflow_core/python/keras/utils/layer_utils.py in print_summary(model, line_length, positions, print_fn)
    224   for i in range(len(layers)):
    225     if sequential_like:
--&gt; 226       print_layer_summary(layers[i])
    227     else:
    228       print_layer_summary_with_connections(layers[i])

~/opt/miniconda3/envs/py36-tf1.15/lib/python3.6/site-packages/tensorflow_core/python/keras/utils/layer_utils.py in print_layer_summary(layer)
    182     name = layer.name
    183     cls_name = layer.__class__.__name__
--&gt; 184     fields = [name + ' (' + cls_name + ')', output_shape, layer.count_params()]
    185     print_row(fields, positions)
    186 

~/opt/miniconda3/envs/py36-tf1.15/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer.py in count_params(self)
   1632                          ', but the layer isn\'t built. '
   1633                          'You can build it manually via: `' + self.name +
-&gt; 1634                          '.build(batch_input_shape)`.')
   1635     return int(sum(np.prod(w.shape.as_list()) for w in self.weights))
   1636 

ValueError: You tried to call `count_params` on input_1, but the layer isn't built. You can build it manually via: `input_1.build(batch_input_shape)`.

&lt;/denchmark-code&gt;

This works,
i = tf.keras.layers.Input(shape=(10,))
x = tf.keras.layers.Dense(2)(i)
o = tf.keras.layers.Activation("softmax")(x)
m = tf.keras.Model(inputs=i, outputs=o)
m.save('test_model_hdf5.hdf5`)
m2 = tf.keras.models.load_model("test_model_hdf5.hdf5")
m2.summary()
&lt;denchmark-code&gt;_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_4 (InputLayer)         [(None, 10)]              0         
_________________________________________________________________
dense_3 (Dense)              (None, 2)                 22        
_________________________________________________________________
activation_3 (Activation)    (None, 2)                 0         
=================================================================
Total params: 22
Trainable params: 22
Non-trainable params: 0
_________________________________________________________________
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='fchouteau' date='2019-10-18T06:49:58Z'>
		&lt;denchmark-link:https://github.com/fchouteau&gt;@fchouteau&lt;/denchmark-link&gt;

can you add  for the model you saved in and see if it is loading.I am seeing it is not loading in the both cases. Please, confirm.Thanks!
		</comment>
		<comment id='2' author='fchouteau' date='2019-10-18T09:33:13Z'>
		I updated both code snippets,
Builiding with tf save format gives out
ValueError: You tried to call count_paramson input_1, but the layer isn't built. You can build it manually via:input_1.build(batch_input_shape).
(And calling model.build(input_shape) does not solve the issue)
However the hdf5 saving format works as expected
		</comment>
		<comment id='3' author='fchouteau' date='2019-10-21T10:32:18Z'>
		I have tried on colab with TF version 1.15.0-rc3 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/daca9a1f94832b974f102164b76d0b1b/untitled292.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='fchouteau' date='2019-10-21T20:58:44Z'>
		&lt;denchmark-link:https://github.com/fchouteau&gt;@fchouteau&lt;/denchmark-link&gt;
 Thanks for finding this. The issue happens only when you provide  as input as in . If you replace that line with , then there is no error. Please check the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/eb5684e8c405b47a41686e951fd99823/untitled584.ipynb&gt;here&lt;/denchmark-link&gt;
.
The following is working fine.
&lt;denchmark-code&gt;i = tf.keras.layers.Input(shape=(10,))
x = tf.keras.layers.Dense(2)(i)
o = tf.keras.layers.Activation("softmax")(x)
m = tf.keras.Model(inputs=i, outputs=o)
m.save('test_model_tf.tf')
m2 = tf.keras.models.load_model("test_model_tf.tf")
m2.summary()
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='fchouteau' date='2019-10-22T07:01:32Z'>
		Hello !
This issue concerns the discrepancy between the changelog for tf 1.15 release and the actual behaviour,
I fully understand that not providing save format defaults to hdf5 (legacy keras) and works.
I also understand that, as stated in the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/r1.15/tensorflow/python/keras/engine/network.py#L1151&gt;model_save docstring&lt;/denchmark-link&gt;
, the tf format does not work.
Using ".tf" without save format defaults to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/590d6eef7e91a6a7392c8ffffb7b58f2e0c8bc6b/tensorflow/python/keras/saving/save.py#L92&gt;hdf5 independently of the file extension&lt;/denchmark-link&gt;
 - which by the way doesn't allow subclassed models... is this disabled in tf 1.15 ?.
My point was: there is a discrepancy between the 1.15 changelog (stating that we should not use legacy hdf5 format) and the actual behaviour in 1.15 (where tf format is disabled and does not work if we enable it). There should also be warnings that enforces the disabling of the tf save format (which worked in previous versions such as 1.13 and 1.14 IIRC)
Best regards,
		</comment>
		<comment id='6' author='fchouteau' date='2020-03-17T01:15:53Z'>
		Thanks for reporting this, the loading bug ("layers is not built") should be fixed in the most recent version of TensorFlow.
And yes the release notes were inaccurate... the default format didn't actually change to "tf" until TF 2. I'll try to make sure the saving release notes are more accurate in the future.
		</comment>
	</comments>
</bug>