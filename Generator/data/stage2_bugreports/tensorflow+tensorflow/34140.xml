<bug id='34140' author='saintthor' open_date='2019-11-10T14:29:02Z' closed_time='2019-11-19T16:01:48Z'>
	<summary>[tf2.0] Can not load keras saved model with customized loss function</summary>
	<description>
I run tensorflow.keras on colab.research.google.com.
In tf2.0, I trained a model with a customized loss function named Loss, then saved it by keras.Model.save().
When I try loading it by
keras.models.load_model( 'filename', custom_objects = { 'Loss': Loss } )
It raises:

/tensorflow-2.0.0/python3.6/tensorflow_core/python/keras/engine/training_utils.py in get_loss_function(loss)
1092   return losses.LossFunctionWrapper(
1093       loss_fn,
-&gt; 1094       name=loss_fn.name,
1095       reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE)
1096
AttributeError: 'Loss' object has no attribute 'name'

Even to set Loss.name = 'xxx' before calling load_model does not help.
If set the 'compile' param to True for load_model, it may load successfully. But the loaded model can not work on evaluating or predicting.
To load the files saved by keras of tf1.5 is all OK. The model is trained by the same customized loss function. The model is saved to a file by tf1.5, while to a path by tf2.0.
How can I solve it?
	</description>
	<comments>
		<comment id='1' author='saintthor' date='2019-11-11T06:14:21Z'>
		&lt;denchmark-link:https://github.com/saintthor&gt;@saintthor&lt;/denchmark-link&gt;
 ,
Can you share a simple and standalone code to reproduce the issue? Thanks!
		</comment>
		<comment id='2' author='saintthor' date='2019-11-11T08:22:57Z'>
		
@saintthor ,
Can you share a simple and standalone code to reproduce the issue? Thanks!

please test this code:
&lt;denchmark-code&gt;def Loss( y0, y ):
    return K.mean( K.maximum( K.abs( y0 / ( K.abs( y ) + 0.1 )), K.abs( y / ( K.abs( y0 ) + 0.1 ))))

InputLayer = tf.keras.layers.Input( dtype = 'float32', shape = ( 4, ))
Output = tf.keras.layers.Dense( 1, use_bias = True )( InputLayer )
model = tf.keras.models.Model( inputs = [InputLayer], outputs=[Output] )
model.compile( loss = Loss, optimizer = tf.keras.optimizers.Adam())
XData = np.random.random(( 100, 4 ))
YData = np.random.random(( 100, ))
model.fit( [XData], [YData], epochs = 5, batch_size = 5, verbose=2 )
model.save( 'mo.test' )
tf.keras.models.load_model( 'mo.test' )
&lt;/denchmark-code&gt;

the last line raises:
&lt;denchmark-code&gt;
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-23-23b454583e49&gt; in &lt;module&gt;()
     10 model.fit( [XData], [YData], epochs = 5, batch_size = 5, verbose=2 )
     11 model.save( 'mo.test' )
---&gt; 12 tf.keras.models.load_model( 'mo.test' )

6 frames
/tensorflow-2.0.0/python3.6/tensorflow_core/python/keras/saving/save.py in load_model(filepath, custom_objects, compile)
    148   if isinstance(filepath, six.string_types):
    149     loader_impl.parse_saved_model(filepath)
--&gt; 150     return saved_model_load.load(filepath, compile)
    151 
    152   raise IOError(

/tensorflow-2.0.0/python3.6/tensorflow_core/python/keras/saving/saved_model/load.py in load(path, compile)
     91     if model._training_config is not None:  # pylint: disable=protected-access
     92       model.compile(**saving_utils.compile_args_from_training_config(
---&gt; 93           model._training_config))  # pylint: disable=protected-access
     94 
     95   return model

/tensorflow-2.0.0/python3.6/tensorflow_core/python/training/tracking/base.py in _method_wrapper(self, *args, **kwargs)
    455     self._self_setattr_tracking = False  # pylint: disable=protected-access
    456     try:
--&gt; 457       result = method(self, *args, **kwargs)
    458     finally:
    459       self._self_setattr_tracking = previous_value  # pylint: disable=protected-access

/tensorflow-2.0.0/python3.6/tensorflow_core/python/keras/engine/training.py in compile(self, optimizer, loss, metrics, loss_weights, sample_weight_mode, weighted_metrics, target_tensors, distribute, **kwargs)
    334     # Prepare list of loss functions, same size of model outputs.
    335     self.loss_functions = training_utils.prepare_loss_functions(
--&gt; 336         self.loss, self.output_names)
    337 
    338     target_tensors = self._process_target_tensor_for_compile(target_tensors)

/tensorflow-2.0.0/python3.6/tensorflow_core/python/keras/engine/training_utils.py in prepare_loss_functions(loss, output_names)
   1349       loss_functions.append(get_loss_function(loss.get(name, None)))
   1350   elif isinstance(loss, six.string_types):
-&gt; 1351     loss_functions = [get_loss_function(loss) for _ in output_names]
   1352   elif isinstance(loss, collections_abc.Sequence):
   1353     if len(loss) != len(output_names):

/tensorflow-2.0.0/python3.6/tensorflow_core/python/keras/engine/training_utils.py in &lt;listcomp&gt;(.0)
   1349       loss_functions.append(get_loss_function(loss.get(name, None)))
   1350   elif isinstance(loss, six.string_types):
-&gt; 1351     loss_functions = [get_loss_function(loss) for _ in output_names]
   1352   elif isinstance(loss, collections_abc.Sequence):
   1353     if len(loss) != len(output_names):

/tensorflow-2.0.0/python3.6/tensorflow_core/python/keras/engine/training_utils.py in get_loss_function(loss)
   1092   return losses.LossFunctionWrapper(
   1093       loss_fn,
-&gt; 1094       name=loss_fn.__name__,
   1095       reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE)
   1096 

AttributeError: 'Loss' object has no attribute '__name__'
&lt;/denchmark-code&gt;

thanks.
		</comment>
		<comment id='3' author='saintthor' date='2019-11-11T08:27:06Z'>
		changing the last line to
tf.keras.models.load_model( 'mo.test', custom_objects = { 'Loss': Loss } ) raises the same error.
		</comment>
		<comment id='4' author='saintthor' date='2019-11-12T09:21:58Z'>
		&lt;denchmark-link:https://github.com/saintthor&gt;@saintthor&lt;/denchmark-link&gt;
 ,
Can you please provide complete code so that we can reproduce the issue from our end?Thanks!
		</comment>
		<comment id='5' author='saintthor' date='2019-11-12T09:39:00Z'>
		
@saintthor ,
Can you please provide complete code so that we can reproduce the issue from our end?Thanks!

The above code is almost complete. See the follow code. I run it in google colab.
&lt;denchmark-code&gt;
%tensorflow_version 2.x
import numpy as np
import tensorflow as tf
K = tf.keras.backend

def Loss( y0, y ):
    return K.mean( K.maximum( K.abs( y0 / ( K.abs( y ) + 0.1 )), K.abs( y / ( K.abs( y0 ) + 0.1 ))))

InputLayer = tf.keras.layers.Input( dtype = 'float32', shape = ( 4, ))
Output = tf.keras.layers.Dense( 1, use_bias = True )( InputLayer )
model = tf.keras.models.Model( inputs = [InputLayer], outputs=[Output] )
model.compile( loss = Loss, optimizer = tf.keras.optimizers.Adam())
XData = np.random.random(( 100, 4 ))
YData = np.random.random(( 100, ))
model.fit( [XData], [YData], epochs = 5, batch_size = 5, verbose=2 )
model.save( 'mo.test' )
#each of the follow lines raises error
#tf.keras.models.load_model( 'mo.test', custom_objects = { 'Loss': Loss } )
tf.keras.models.load_model( 'mo.test' )
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='saintthor' date='2019-11-15T11:18:01Z'>
		Issue replicating for TF-2.0 and tf-nightly. kindly find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/oanush/d2a2ccbc84474b6fc693ebcad55f049c/34140.ipynb&gt;gist&lt;/denchmark-link&gt;
 of colab.Thanks!
		</comment>
		<comment id='7' author='saintthor' date='2019-11-18T17:38:33Z'>
		&lt;denchmark-link:https://github.com/saintthor&gt;@saintthor&lt;/denchmark-link&gt;
 Approach to load a model when a custom object was used is little different. First, you need to load the saved model with  with . Then compile the model with the  as shown below.
&lt;denchmark-code&gt;model.save( 'mo.test' )
#each of the follow lines raises error
new_model =  tf.keras.models.load_model( 'mo.test', custom_objects = { 'Loss': Loss },compile=False)
new_model.compile( loss = Loss, optimizer = tf.keras.optimizers.Adam())
#tf.keras.models.load_model( 'mo.test' )
&lt;/denchmark-code&gt;

Hope this helps. Please close the issue if the issue was resolved. Thanks!
&lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/ef405b1200a5a7e087408b693273f65b/34140.ipynb&gt;Here&lt;/denchmark-link&gt;
 is the gist for your reference. Thanks!
		</comment>
		<comment id='8' author='saintthor' date='2019-11-19T16:01:48Z'>
		
@saintthor Approach to load a model when a custom object was used is little different. First, you need to load the saved model with custom_objects and compile = False. Then compile the model with the custom_objects as shown below.
model.save( 'mo.test' )
#each of the follow lines raises error
new_model =  tf.keras.models.load_model( 'mo.test', custom_objects = { 'Loss': Loss },compile=False)
new_model.compile( loss = Loss, optimizer = tf.keras.optimizers.Adam())
#tf.keras.models.load_model( 'mo.test' )

Hope this helps. Please close the issue if the issue was resolved. Thanks!
Here is the gist for your reference. Thanks!

thank you. this solution works well.
		</comment>
		<comment id='9' author='saintthor' date='2019-11-19T16:01:50Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34140&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34140&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='saintthor' date='2020-08-22T11:53:43Z'>
		
@saintthor Approach to load a model when a custom object was used is little different. First, you need to load the saved model with custom_objects with compile = False. Then compile the model with the custom_objects as shown below.
model.save( 'mo.test' )
#each of the follow lines raises error
new_model =  tf.keras.models.load_model( 'mo.test', custom_objects = { 'Loss': Loss },compile=False)
new_model.compile( loss = Loss, optimizer = tf.keras.optimizers.Adam())
#tf.keras.models.load_model( 'mo.test' )

Hope this helps. Please close the issue if the issue was resolved. Thanks!
Here is the gist for your reference. Thanks!

&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 If I compile the model after loading it, won't I lose the old saved Optimizer state? With a newly intialized optimizer, if I try to continue my training process, that might cause the loss to increase again.
		</comment>
		<comment id='11' author='saintthor' date='2020-08-22T14:35:24Z'>
		&lt;denchmark-link:https://github.com/rdutta1999&gt;@rdutta1999&lt;/denchmark-link&gt;
 In an earlier version we need to do that way. But with the recent version , we don't need pass . Please check the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/f555eae93e9a2d71d8f9530e0bde8f64/34140.ipynb&gt;gist here&lt;/denchmark-link&gt;
.
Please check the guide on saving and loading &lt;denchmark-link:https://www.tensorflow.org/tutorials/keras/save_and_load#saving_custom_objects&gt;here&lt;/denchmark-link&gt;
. Thanks!
If there are any further questions, please feel free to open a new issue with a standalone code to reproduce your issue so that it is better for the community who might learn from your questions. Thanks again!
		</comment>
	</comments>
</bug>