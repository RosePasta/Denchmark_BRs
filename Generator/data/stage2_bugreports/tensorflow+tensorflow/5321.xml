<bug id='5321' author='llhe' open_date='2016-11-01T09:37:10Z' closed_time='2016-11-04T19:56:56Z'>
	<summary>Filesystem FileExists interface is broken</summary>
	<description>
The FileSystem define the following interface, which can't handle temporary runtime errors properly but just swallow them (like GCS, HDFS and any customized DFS),
virtual bool FileExists(const string&amp; fname) = 0;
It should be changed to
virtual Status FileExists(const string&amp; fname) = 0;
I can provide a patch if no one is working on this.
	</description>
	<comments>
		<comment id='1' author='llhe' date='2016-11-01T17:25:52Z'>
		&lt;denchmark-link:https://github.com/jhseu&gt;@jhseu&lt;/denchmark-link&gt;
, I'm marking this contributions welcome, assuming you agree with that change.
		</comment>
		<comment id='2' author='llhe' date='2016-11-01T17:30:21Z'>
		Yeah, I agree that's an issue. I can make the change, though, because we also have to change the implementation for our internal filesystem.
		</comment>
		<comment id='3' author='llhe' date='2016-11-02T09:32:50Z'>
		This is more friendly (less error handling code) for the caller to handle unexpected errors:
virtual Status FileExists(const string&amp; fname, bool* result) = 0;
And IsDirectory should also be changed to (both for API semantics consistency and making the caller easier to handle the runtime error, most of the current caller code just ignored them):
virtual Status IsDirectory(const string&amp; fname, bool* result) = 0;
May be this can be addresses by another change.
I'm creating a patch for FileExists first.
		</comment>
		<comment id='4' author='llhe' date='2016-11-04T19:56:56Z'>
		Fixed internally. It'll show up during the next sync.
As mentioned in your pull request, we decided on:
virtual Status FileExists(const string&amp; fname);
for consistency with how we've been using these error codes elsewhere.
		</comment>
	</comments>
</bug>