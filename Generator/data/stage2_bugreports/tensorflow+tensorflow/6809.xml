<bug id='6809' author='jonasrauber' open_date='2017-01-12T15:39:15Z' closed_time='2017-02-09T05:20:11Z'>
	<summary>TensorFlow 1.0.0 alpha binaries require SSE4.1</summary>
	<description>
The TensorFlow 1.0.0 alpha binaries require SSE4.1, which was not necessary to run the binaries of earlier versions (e.g. 0.12.1). SSE4.1 is only supported by a few AMD architectures. In particular, it is not supported by the  "Barcelona" and the "Bobcat" architecture. They support SSE4a, which is not supported by Intel processors.
Therefore, running the 1.0.0 binaries on our workstations with "AMD Opteron(tm) Processor 6174" fails with the following error:
The TensorFlow library was compiled to use SSE4.1 instructions, but these aren't available on your machine.
Is it possible to make the official TensorFlow 1.0.0 binaries not dependent on vendor specific SSE4.1 instructions? I am aware that these AMD processors are not the newest ones and that it's possible to compile TensorFlow without the SSE4.1 requirement (at least, I assume so), but I wanted to raise this issue to see if you think it might be possible to make the official 1.0.0 binaries work without SSE4.1. Alternatively, would you consider offering alternative binaries without SSE4.1 similar to how you offer different binaries for different python versions?
	</description>
	<comments>
		<comment id='1' author='jonasrauber' date='2017-01-12T21:09:32Z'>
		I'm also having trouble finding the correct compiler flags to enable SSE4.1, SSE4.2 and AVX instructions. If anyone has insights, I'd really appreciate it.
Building on a Retina MBP with 2.6 GHz Intel Core i7 on Mac OS X El Capitan 10.11.6
from commit &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/d4b5c606fc9fbd1a20b5b113b4bc831f31d889a3&gt;d4b5c60&lt;/denchmark-link&gt;
 with this custom build rule:
&lt;denchmark-code&gt;cc_binary(
    name = "libtensorflow_all.so",
    linkshared = 1,
    deps = [
    	"//tensorflow/c:c_api",
        "//tensorflow/cc:cc_ops",
        "//tensorflow/core:framework_internal",
        "//tensorflow/core:tensorflow",
    ],
)
&lt;/denchmark-code&gt;

Based on &lt;denchmark-link:http://stackoverflow.com/questions/41293077/how-to-compile-tensorflow-with-sse4-2-and-avx-instructions&gt;this StackOverflow thread&lt;/denchmark-link&gt;
, I tried:
&lt;denchmark-code&gt;bazel build -c opt --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-mfpmath=both --copt=-msse4.2 tensorflow:libtensorflow_all.so
&lt;/denchmark-code&gt;

which threw the compiler error:
&lt;denchmark-code&gt;ERROR: /private/var/tmp/_bazel_pjh/932673a2a7490816ef213d3cdb401ef6/external/gif_archive/BUILD:8:1: C++ compilation of rule '@gif_archive//:gif' failed: cc_wrapper.sh failed: error executing command external/local_config_cc/cc_wrapper.sh -U_FORTIFY_SOURCE '-D_FORTIFY_SOURCE=1' -fstack-protector -Wall -Wthread-safety -Wself-assign -fcolor-diagnostics -fno-omit-frame-pointer -g0 -O2 -DNDEBUG ... (remaining 33 argument(s) skipped): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1.
error: unknown FP unit 'both'
&lt;/denchmark-code&gt;

I was able to compile with this modification:
&lt;denchmark-code&gt;bazel build -c opt --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-msse4.2 tensorflow:libtensorflow_all.so
&lt;/denchmark-code&gt;

but the resulting .so immediately crashed at runtime.
I recompiled with the basic:
&lt;denchmark-code&gt;bazel build tensorflow:libtensorflow_all.so
&lt;/denchmark-code&gt;

but at runtime, I get the following warnings:
&lt;denchmark-code&gt;W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
&lt;/denchmark-code&gt;

Thanks!
		</comment>
		<comment id='2' author='jonasrauber' date='2017-01-12T22:45:07Z'>
		Having the TensorBoard binary require SSE4.1 sounds problematic. Could you take a look &lt;denchmark-link:https://github.com/zffchen78&gt;@zffchen78&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='3' author='jonasrauber' date='2017-01-24T16:56:02Z'>
		Is this issue receiving any love? I'd like to run tensorflow on a machine that doesn't have that instruction set.
At the very least, could someone help me find the most recent commit I could use that doesn't have this issue?
		</comment>
		<comment id='4' author='jonasrauber' date='2017-01-24T17:32:05Z'>
		Thank you for your patience &lt;denchmark-link:https://github.com/abejfehr&gt;@abejfehr&lt;/denchmark-link&gt;
. I've sent a friendly ping to a couple Googlers via email. Expect an update very soon.
		</comment>
		<comment id='5' author='jonasrauber' date='2017-01-24T18:45:46Z'>
		&lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;
, did you already fix the build scripts/Jenkins setup to explicitly set the optimization flags? We should remove 4.1.
		</comment>
		<comment id='6' author='jonasrauber' date='2017-01-24T18:47:50Z'>
		Well, with our latest change, (--config=opt) the binaries we build for distribution should now be without sse 4.1.
Could you try downloading and installing nightly binaries?
		</comment>
		<comment id='7' author='jonasrauber' date='2017-01-29T07:10:14Z'>
		OK, with 1.0rc0, now the binaries should not need sse 4.1
Please let me know if you run into any issues.
I will close this issue now as our latest binaries are more compatible.
		</comment>
		<comment id='8' author='jonasrauber' date='2017-01-31T04:06:14Z'>
		&lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;

I have similar issue issues issue. My cpu does not support avx2 and it will cause core dumped each time when import tensorflow. Is there any option to compile without this optimization?
		</comment>
		<comment id='9' author='jonasrauber' date='2017-01-31T04:08:22Z'>
		&lt;denchmark-link:https://github.com/Noahsark&gt;@Noahsark&lt;/denchmark-link&gt;
 yes, 1.0rc0 should not have SSE 4.1
		</comment>
		<comment id='10' author='jonasrauber' date='2017-01-31T05:56:07Z'>
		&lt;denchmark-link:https://github.com/Noahsark&gt;@Noahsark&lt;/denchmark-link&gt;
 It also does not have avx2.
It is back to the original compilation options.
		</comment>
		<comment id='11' author='jonasrauber' date='2017-01-31T12:21:57Z'>
		Thanks a lot!
		</comment>
		<comment id='12' author='jonasrauber' date='2017-01-31T17:18:36Z'>
		&lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/yaroslavvb&gt;@yaroslavvb&lt;/denchmark-link&gt;

I do switch to 1.0rc0 with the default compile option, but the problem still exists.
Here is the output when I try to import it.



import tensorflow
I tensorflow/stream_executor/dso_loader.cc:125] successfully opened CUDA library libcublas.so.8.0 locally
I tensorflow/stream_executor/dso_loader.cc:125] successfully opened CUDA library libcudnn.so.5 locally
I tensorflow/stream_executor/dso_loader.cc:125] successfully opened CUDA library libcufft.so.8.0 locally
I tensorflow/stream_executor/dso_loader.cc:125] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:125] successfully opened CUDA library libcurand.so.8.0 locally
F tensorflow/core/platform/cpu_feature_guard.cc:35] The TensorFlow library was compiled to use AVX2 instructions, but these aren't available on your machine.
Aborted (core dumped)



Any ideas ?
Thank you so much.
		</comment>
		<comment id='13' author='jonasrauber' date='2017-01-31T17:23:47Z'>
		&lt;denchmark-link:https://github.com/Noahsark&gt;@Noahsark&lt;/denchmark-link&gt;
 can you give a link to the binary that you've used?
(unless your built it yourself, which would be a different issue)
		</comment>
		<comment id='14' author='jonasrauber' date='2017-01-31T18:23:15Z'>
		&lt;denchmark-link:https://github.com/yaroslavvb&gt;@yaroslavvb&lt;/denchmark-link&gt;

Yes, I build it from source. Any way to get avoid this?
		</comment>
		<comment id='15' author='jonasrauber' date='2017-01-31T19:44:04Z'>
		This is surprising -- you are compiling (by default) with
-march=native. ​This means that unless you compile on a computer other than
the one you run on, it should not use optimizations your machine doesn't
understand. Did you set the optimization flags? Which hash are you building
from?
		</comment>
		<comment id='16' author='jonasrauber' date='2017-02-07T21:00:55Z'>
		Bad news, 1.0.0rc1 and the nightlies again require SSE4.1. &lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;
 Can you please reopen the issue. (Looks like the 1.0.0rc0 build also requires SSE4.1, although I thought I checked that before and it worked?! Maybe I checked it on a more modern CPU accidentally…)
		</comment>
		<comment id='17' author='jonasrauber' date='2017-02-08T00:58:04Z'>
		I just verified that somehow we have some sse 4.1 instructions in the disassembled code.
But we are not sure how it crept back in.
Will do some debugging in our build scripts.
		</comment>
		<comment id='18' author='jonasrauber' date='2017-02-08T01:29:42Z'>
		Found the problem. It was bad, because when you are building from sources on any machine it was enforcing -msse4.1. I am hoping to get fixed binaries everywhere by tomorrow.
		</comment>
		<comment id='19' author='jonasrauber' date='2017-02-09T09:31:34Z'>
		Tested it with 1.0.0rc2. Looks good :-) Thanks a lot!
		</comment>
		<comment id='20' author='jonasrauber' date='2017-02-09T18:16:11Z'>
		Glad to hear this is resolved.
Thank you for your patience.
		</comment>
	</comments>
</bug>