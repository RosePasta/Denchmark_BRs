<bug id='28323' author='scooter4j' open_date='2019-05-01T22:32:01Z' closed_time='2019-09-17T21:54:45Z'>
	<summary>Input-shape validation error when using TimeDistributed wrapper</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS Mojave 10.14.4
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.0.0-alpha0
Python version: Python 3.6.8
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

I have built a model consisting of a CNN feeding an LSTM. I've wrapped the CNN in a TimeDistributed wrapper. I've configured my training set (x values) to have a 5D shape (batch_size, num_steps, image_height, image_width, channels). When trying to train the model, I get the following error: ValueError: Error when checking input: expected time_distributed_input to have 5 dimensions, but got array with shape (4, 28, 28, 1).
I've tried a number of different model configurations, and have debugged through the code. I can see where the ValueError is being thrown, but I don't see any way to keep this from happening. Code details follow.
I'm not expecting a discrepancy between what the model thinks I'm providing and what I'm providing. I'm providing a 5D data set, and that's what it wants, but it claims that I'm only providing a 4D data set.
Here is the code I'm using. For the input data, I'm using MNIST images in 28x28x1 format. For the x data, I'm creating 20 records, each consisting of a list of four 28x28x1 image vectors, hence an input shape of (20,4,28,28,1). The y data consists of a 1D list of labels.
&lt;denchmark-code&gt;def build_cnn(input_shape=None):
    print('Building the CNN')
    model = tfkm.Sequential()
    if input_shape:
        model.add(tfkl.Conv2D(64, (3, 3), activation='relu', input_shape=input_shape))
    else:
        model.add(tfkl.Conv2D(64, (3, 3), activation='relu'))
    model.add(tfkl.MaxPooling2D((2, 2), strides=(1, 1)))
    model.add(tfkl.Conv2D(128, (4, 4), activation='relu'))
    model.add(tfkl.MaxPooling2D((2, 2), strides=(2, 2)))
    model.add(tfkl.Conv2D(256, (4, 4), activation='relu'))
    model.add(tfkl.MaxPooling2D((2, 2), strides=(2, 2)))

    # extract features and dropout
    model.add(tfkl.Flatten())
    return model


def build_lstm(units, return_sequences, dropout):
    print('Building the LSTM model')
    model = tfkm.Sequential()
    model.add(tfkl.LSTM(units, return_sequences=return_sequences, dropout=dropout))
    return model


def build_classification_layer(num_classes):
    print('Building the classification-layer model')
    model = tfkm.Sequential()
    # classifier with sigmoid activation for multilabel
    model.add(tfkl.Dense(num_classes, activation='sigmoid'))
    return model


cnn = build_cnn(input_shape=(28, 28, 1))
lstm = build_lstm(256, False, 0.5)
classification_layer = build_classification_layer(2)


combined_model = tfkm.Sequential()
#combined_model.add(tfkl.TimeDistributed(cnn, batch_input_shape=(20, 4, 28, 28, 1)))
#combined_model.add(tfkl.TimeDistributed(cnn, input_shape=(4, 28, 28, 1), batch_size=20))
combined_model.add(tfkl.TimeDistributed(cnn, input_shape=(4, 28, 28, 1)))
combined_model.add(lstm)
combined_model.add(classification_layer)
combined_model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

.
.
.
data-set building:  creating 20 individual records, each containing a sequence of 4 28x28x1 images and the associated labels list.
.
.
.
print('train_input shape: {}  train_labels shape: {}'.format(np.array(train_input).shape, np.array(train_labels).shape))

print('Training the model')
combined_model.fit(train_input, train_labels, epochs=2)
&lt;/denchmark-code&gt;

Output from training attempt:
&lt;denchmark-code&gt;train_input shape: (20, 4, 28, 28, 1)  train_labels shape: (20,)
Training the model
Traceback (most recent call last):
  File "/Users/scott/sandbox/CNN-LSTM-sandbox/build_and_train.py", line 184, in &lt;module&gt;
    combined_model.fit(train_input, train_labels, epochs=2)
  File "/anaconda3/envs/TF2_py36/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py", line 806, in fit
    shuffle=shuffle)
  File "/anaconda3/envs/TF2_py36/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py", line 2596, in _standardize_user_data
    exception_prefix='input')
  File "/anaconda3/envs/TF2_py36/lib/python3.6/site-packages/tensorflow/python/keras/engine/training_utils.py", line 340, in standardize_input_data
    'with shape ' + str(data_shape))
ValueError: Error when checking input: expected time_distributed_input to have 5 dimensions, but got array with shape (4, 28, 28, 1)

Process finished with exit code 1
&lt;/denchmark-code&gt;

Note that I get this same result regardless of which of the three combined_model.add(tfkl.TimeDistributed(cnn... versions I have in my code.
While debugging, I found the place where the ValueError is thrown. It is in training_utils.py, line 336 - if len(data_shape) != len(shape): (lines 303-350 shown for context):
lines 303-350 of training_utils.py:
&lt;denchmark-code&gt;  if len(data) != len(names):
    if data and hasattr(data[0], 'shape'):
      raise ValueError('Error when checking model ' + exception_prefix +
                       ': the list of Numpy arrays that you are passing to '
                       'your model is not the size the model expected. '
                       'Expected to see ' + str(len(names)) + ' array(s), '
                       'but instead got the following list of ' +
                       str(len(data)) + ' arrays: ' + str(data)[:200] + '...')
    elif len(names) &gt; 1:
      raise ValueError('Error when checking model ' + exception_prefix +
                       ': you are passing a list as input to your model, '
                       'but the model expects a list of ' + str(len(names)) +
                       ' Numpy arrays instead. The list you passed was: ' +
                       str(data)[:200])
    elif len(data) == 1 and not hasattr(data[0], 'shape'):
      raise TypeError('Error when checking model ' + exception_prefix +
                      ': data should be a Numpy array, or list/dict of '
                      'Numpy arrays. Found: ' + str(data)[:200] + '...')
    elif len(names) == 1:
      data = [np.asarray(data)]

  # Check shapes compatibility.
  if shapes:
    for i in range(len(names)):
      if shapes[i] is not None:
        if tensor_util.is_tensor(data[i]):
          tensorshape = data[i].get_shape()
          if not tensorshape:
            continue
          data_shape = tuple(tensorshape.as_list())
        else:
          data_shape = data[i].shape
        shape = shapes[i]
        if len(data_shape) != len(shape):
          raise ValueError('Error when checking ' + exception_prefix +
                           ': expected ' + names[i] + ' to have ' +
                           str(len(shape)) + ' dimensions, but got array '
                           'with shape ' + str(data_shape))
        if not check_batch_axis:
          data_shape = data_shape[1:]
          shape = shape[1:]
        for dim, ref_dim in zip(data_shape, shape):
          if ref_dim != dim and ref_dim is not None and dim is not None:
            raise ValueError('Error when checking ' + exception_prefix +
                             ': expected ' + names[i] + ' to have shape ' +
                             str(shape) + ' but got array with shape ' +
                             str(data_shape))
  return data
&lt;/denchmark-code&gt;

the state of things when the debugger hits line 336 is:
&lt;denchmark-code&gt;np.array(data).shape = &lt;class 'tuple'&gt;: (1, 4, 28, 28, 1)
data_shape = &lt;class 'tuple'&gt;: (4, 28, 28, 1)
name = &lt;class 'list'&gt;: ['time_distributed_input']
shapes = &lt;class 'list'&gt;: [(None, 4, 28, 28, 1)]
&lt;/denchmark-code&gt;

From this, one can see that the data shape getting to this point is correct, but the code pulls out the the first record in the batch and compares its shape to the shape the TimeDistributed layer is expecting. The problem is that the TimeDistributed layer is expecting a batch representation in the shape (, 4, 28, 28, 1) but it's not there b/c the code only pulled the input record at that batch location , that is, the code is using the  record's shape to compare with the TimeDistributed input shape  which can never succeed
&lt;denchmark-link:https://user-images.githubusercontent.com/16819138/57046609-56ad3c80-6c2e-11e9-9073-51ed7631d526.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/16819138/57046632-6dec2a00-6c2e-11e9-9c3b-eafe53f0b694.png&gt;&lt;/denchmark-link&gt;

.
The way I see it, the batch dimension shouldn't be represented in the tuple that is used to establish expected shape of data to the InputLayer, the batch length comparison needs to ignore None in the shape tuples, or the comparison should be if len(np.array(data).shape) != len(shape):
	</description>
	<comments>
		<comment id='1' author='scooter4j' date='2019-05-02T14:48:35Z'>
		made some progress on this. Added the designated line to the following block of code in training_utils.py, starting with line 296:
&lt;denchmark-code&gt;  if shapes is not None:
    data = np.expand_dims(data, 0)  # added by SQ
    data = [
        standardize_single_array(x, shape) for (x, shape) in zip(data, shapes)
    ]
  else:
    data = [standardize_single_array(x) for x in data]
&lt;/denchmark-code&gt;

After adding this line, I can train the model.... I haven't verified that it actually works yet, but I'm no longer getting shape errors.
		</comment>
		<comment id='2' author='scooter4j' date='2019-05-03T05:23:40Z'>
		The real issue is in this block (lines 274-295 of training_utils.py):
&lt;denchmark-code&gt;    try:
      data = [
          data[x].values
          if data[x].__class__.__name__ == 'DataFrame' else data[x]
          for x in names
      ]
    except KeyError as e:
      raise ValueError('No data provided for "' + e.args[0] + '". Need data '
                       'for each key in: ' + str(names))
  elif isinstance(data, (list, tuple)):
    if isinstance(data[0], (list, tuple)):
      data = [np.asarray(d) for d in data]
    elif len(names) == 1 and isinstance(data[0], (float, int)):
      data = [np.asarray(data)]
    else:
      data = [
          x.values if x.__class__.__name__ == 'DataFrame' else x for x in data
      ]
  else:
    data = data.values if data.__class__.__name__ == 'DataFrame' else data
    data = [data]
&lt;/denchmark-code&gt;

specifically in the
&lt;denchmark-code&gt;    if isinstance(data[0], (list, tuple)):
      data = [np.asarray(d) for d in data]
    elif len(names) == 1 and isinstance(data[0], (float, int)):
      data = [np.asarray(data)]
    else:
      data = [
          x.values if x.__class__.__name__ == 'DataFrame' else x for x in data
      ]
&lt;/denchmark-code&gt;

section. My data input was a list of lists. So - I got into this block and the code essentially reformatted my list of lists into a list of numpy arrays. BUT - I still had the same shape. The other conditions, e.g   else: data = data.values if data.__class__.__name__ == 'DataFrame' else data data = [data] (which happens if the inbound data is a numpy array) actually adds the dimension to data that is needed to get through the .zip invocation with the original input shape.
So the correct fix isn't the fix I cited in the comment above, but to add it in the block cited in this comment as shown:
&lt;denchmark-code&gt;    if isinstance(data[0], (list, tuple)):
      data = [np.asarray(d) for d in data]
      data = np.expand_dims(data, 0)  # &lt;=================== add this line here SQ
    elif len(names) == 1 and isinstance(data[0], (float, int)):
      data = [np.asarray(data)]
    else:
      data = [
          x.values if x.__class__.__name__ == 'DataFrame' else x for x in data
      ]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='scooter4j' date='2019-05-04T00:38:34Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 what would I need to do to take on this issue and do the fix?
		</comment>
		<comment id='4' author='scooter4j' date='2019-05-07T03:02:30Z'>
		&lt;denchmark-link:https://github.com/scooter4j&gt;@scooter4j&lt;/denchmark-link&gt;
 If you have a solution that works well, then fork tensorflow repository on your GitHub, update the codes in your folder, test it. If it is working as expected, create a pull-Request (PR). All PR's are reviewed by TF Code-owners and if it passes all the tests then your code will be merged into TF repository.  Please let me know if anything is not clear to you. Thanks!
		</comment>
		<comment id='5' author='scooter4j' date='2019-05-07T13:46:33Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 ok. I'm pretty confident that the fix shown in my last comment with code is what's needed. I'll try to get to that this week.
The one question I have is: how do I run unit tests for GPU if I don't have a GPU available? Even the GPU-based Dockerfile wouldn't emulate a GPU on my normal CPU system, right?
		</comment>
		<comment id='6' author='scooter4j' date='2019-05-07T23:01:44Z'>
		&lt;denchmark-link:https://github.com/scooter4j&gt;@scooter4j&lt;/denchmark-link&gt;
 Good to know that you want to contribute. You could use GPU from the &lt;denchmark-link:https://colab.sandbox.google.com/notebooks/welcome.ipynb&gt;Google colab&lt;/denchmark-link&gt;
. It is free for public. In the  dropdown menu in Google colab, click  and select "GPU" for . Thanks.!
		</comment>
		<comment id='7' author='scooter4j' date='2019-05-09T03:21:12Z'>
		I could use Colab for manual validation - not sure how to run your existing suite of automated tests against my change on GPU. That's ok - maybe it'll become clear to me when I get in there. Plus I suppose I'd see if I broke any tests when I create a PR, and could adjust.
		</comment>
		<comment id='8' author='scooter4j' date='2019-07-24T18:10:14Z'>
		&lt;denchmark-link:https://github.com/scooter4j&gt;@scooter4j&lt;/denchmark-link&gt;
 Have you created a PR? If yes, can share it here so that we can close when the PR merge. Thanks!
		</comment>
		<comment id='9' author='scooter4j' date='2019-07-29T10:41:10Z'>
		Any update on this? I got exactly the same Issue. If &lt;denchmark-link:https://github.com/scooter4j&gt;@scooter4j&lt;/denchmark-link&gt;
 got this error:
&lt;denchmark-code&gt;ValueError: Error when checking input: expected time_distributed_input to have 5 dimensions, but got array with shape (4, 28, 28, 1)
&lt;/denchmark-code&gt;

I got this one:
&lt;denchmark-code&gt;ValueError: Error when checking input: expected input_image to have 5 dimensions, but got array with shape (8, 416, 416, 3)
&lt;/denchmark-code&gt;

Which is the same but with different image dimensions and batch size
		</comment>
		<comment id='10' author='scooter4j' date='2019-08-28T12:32:17Z'>
		It has been 29 days with no activity and the awaiting response label was assigned. Is this still an issue?
		</comment>
		<comment id='11' author='scooter4j' date='2019-09-09T21:28:19Z'>
		&lt;denchmark-link:https://github.com/scooter4j&gt;@scooter4j&lt;/denchmark-link&gt;
 Is this resolved? Did you raise any PR? Please close if the issue was resolved already. Thanks!
		</comment>
		<comment id='12' author='scooter4j' date='2019-09-17T21:54:45Z'>
		Closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='13' author='scooter4j' date='2019-09-17T21:54:47Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28323&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28323&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>