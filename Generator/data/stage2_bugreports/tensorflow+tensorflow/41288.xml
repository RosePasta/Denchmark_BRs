<bug id='41288' author='MislavSag' open_date='2020-07-10T18:35:13Z' closed_time='2020-08-17T17:27:38Z'>
	<summary>ValueError: Could not find matching function to call loaded from the SavedModel</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.2.0
Python version: 3.7
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Standalone code to reproduce the issue
I am getting the error from the title when I try to predict from saved model/
I am providing the code to reproduce the problem
&lt;denchmark-code&gt;##### IMPORT ANDR PREPARE DATA #######


import pandas as pd
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow import keras
import numpy as np

url = 'https://raw.githubusercontent.com/MislavSag/trademl/master/trademl/modeling/random_forest/X_TEST.csv'
X_TEST = pd.read_csv(url, sep=',')
url = 'https://raw.githubusercontent.com/MislavSag/trademl/master/trademl/modeling/random_forest/labeling_info_TEST.csv'
labeling_info_TEST = pd.read_csv(url, sep=',')


# TRAIN TEST SPLIT
X_train, X_test, y_train, y_test = train_test_split(
    X_TEST.drop(columns=['close_orig']), labeling_info_TEST['bin'],
    test_size=0.10, shuffle=False, stratify=None)


### PREPARE LSTM
x = X_train['close'].values.reshape(-1, 1)
y = y_train.values.reshape(-1, 1)
x_test = X_test['close'].values.reshape(-1, 1)
y_test = y_test.values.reshape(-1, 1)
train_val_index_split = 0.75
train_generator = keras.preprocessing.sequence.TimeseriesGenerator(
    data=x,
    targets=y,
    length=30,
    sampling_rate=1,
    stride=1,
    start_index=0,
    end_index=int(train_val_index_split*X_TEST.shape[0]),
    shuffle=False,
    reverse=False,
    batch_size=128
)
validation_generator = keras.preprocessing.sequence.TimeseriesGenerator(
    data=x,
    targets=y,
    length=30,
    sampling_rate=1,
    stride=1,
    start_index=int((train_val_index_split*X_TEST.shape[0] + 1)),
    end_index=None,  #int(train_test_index_split*X.shape[0])
    shuffle=False,
    reverse=False,
    batch_size=128
)
test_generator = keras.preprocessing.sequence.TimeseriesGenerator(
    data=x_test,
    targets=y_test,
    length=30,
    sampling_rate=1,
    stride=1,
    start_index=0,
    end_index=None,
    shuffle=False,
    reverse=False,
    batch_size=128
)

# convert generator to inmemory 3D series (if enough RAM)
def generator_to_obj(generator):
    xlist = []
    ylist = []
    for i in range(len(generator)):
        x, y = train_generator[i]
        xlist.append(x)
        ylist.append(y)
    X_train = np.concatenate(xlist, axis=0)
    y_train = np.concatenate(ylist, axis=0)
    return X_train, y_train

X_train_lstm, y_train_lstm = generator_to_obj(train_generator)
X_val_lstm, y_val_lstm = generator_to_obj(validation_generator)
X_test_lstm, y_test_lstm = generator_to_obj(test_generator)

# test for shapes
print('X and y shape train: ', X_train_lstm.shape, y_train_lstm.shape)
print('X and y shape validate: ', X_val_lstm.shape, y_val_lstm.shape)
print('X and y shape test: ', X_test_lstm.shape, y_test_lstm.shape)


##### TRAIN  MODEL #######


model = keras.models.Sequential([
        keras.layers.LSTM(258, return_sequences=True, input_shape=[None, x.shape[1]]),
        
        keras.layers.LSTM(124, return_sequences=True, dropout=0.2, recurrent_dropout=0.2),
        keras.layers.LSTM(32, dropout=0.2, recurrent_dropout=0.2),
        keras.layers.Dense(1, activation='sigmoid')
        
])
model.compile(loss='binary_crossentropy', optimizer='adam',
              metrics=['accuracy', 
                       keras.metrics.AUC(),
                       keras.metrics.Precision(),
                       keras.metrics.Recall()])
# fit the model
history = model.fit(X_train_lstm, y_train_lstm, epochs=5, batch_size=128,
                    validation_data=(X_val_lstm, y_val_lstm))



##### SAVE AND LOAD MODEL (WORKS) #######

model.save('my_model_lstm.h5')
model = keras.models.load_model('my_model_lstm.h5')
model.predict(X_test_lstm)

##### SAVE AND LOAD MODEL (DOESNT WORK) #######


model_version = "0001"
model_name = "lstm_cloud"
model_path = os.path.join(model_name, model_version)
tf.saved_model.save(model, model_path)

saved_model = tf.saved_model.load(model_path)
y_pred = saved_model(X_test_lstm, training=False)
&lt;/denchmark-code&gt;

Other info / logs Include any logs or source code that would be helpful to
I am geeting this error:
&lt;denchmark-code&gt;y_pred = saved_model(X_test_lstm, training=False)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
c:\Users\Mislav\Documents\GitHub\trademl\trademl\modeling\train_nn.py in 
----&gt; 525 y_pred = saved_model(X_test_lstm, training=False)

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow\python\saved_model\load.py in _call_attribute(instance, *args, **kwargs)
    484 
    485 def _call_attribute(instance, *args, **kwargs):
--&gt; 486   return instance.__call__(*args, **kwargs)
    487 
    488 

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow\python\eager\def_function.py in __call__(self, *args, **kwds)
    578         xla_context.Exit()
    579     else:
--&gt; 580       result = self._call(*args, **kwds)
    581 
    582     if tracing_count == self._get_tracing_count():

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow\python\eager\def_function.py in _call(self, *args, **kwds)
    625       # This is the first call of __call__, so we have to initialize.
    626       initializers = []
--&gt; 627       self._initialize(args, kwds, add_initializers_to=initializers)
    628     finally:
    629       # At this point we know that the initialization is complete (or less

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow\python\eager\def_function.py in _initialize(self, args, kwds, add_initializers_to)
    504     self._concrete_stateful_fn = (
    505         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access
--&gt; 506             *args, **kwds))
    507 
    508     def invalid_creator_scope(*unused_args, **unused_kwds):

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow\python\eager\function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)
   2444       args, kwargs = None, None
   2445     with self._lock:
-&gt; 2446       graph_function, _, _ = self._maybe_define_function(args, kwargs)
   2447     return graph_function
   2448 

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow\python\eager\function.py in _maybe_define_function(self, args, kwargs)
   2775 
   2776       self._function_cache.missed.add(call_context_key)
-&gt; 2777       graph_function = self._create_graph_function(args, kwargs)
   2778       self._function_cache.primary[cache_key] = graph_function
   2779       return graph_function, args, kwargs

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow\python\eager\function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)
   2665             arg_names=arg_names,
   2666             override_flat_arg_shapes=override_flat_arg_shapes,
-&gt; 2667             capture_by_value=self._capture_by_value),
   2668         self._function_attributes,
   2669         # Tell the ConcreteFunction to clean up its graph once it goes out of

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow\python\framework\func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)
    979         _, original_func = tf_decorator.unwrap(python_func)
    980 
--&gt; 981       func_outputs = python_func(*func_args, **func_kwargs)
    982 
    983       # invariant: `func_outputs` contains only Tensors, CompositeTensors,

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow\python\eager\def_function.py in wrapped_fn(*args, **kwds)
    439         # __wrapped__ allows AutoGraph to swap in a converted function. We give
    440         # the function a weak reference to itself to avoid a reference cycle.
--&gt; 441         return weak_wrapped_fn().__wrapped__(*args, **kwds)
    442     weak_wrapped_fn = weakref.ref(wrapped_fn)
    443 

C:\ProgramData\Anaconda3\lib\site-packages\tensorflow\python\saved_model\function_deserialization.py in restored_function_body(*args, **kwargs)
    259         .format(_pretty_format_positional(args), kwargs,
    260                 len(saved_function.concrete_functions),
--&gt; 261                 "\n\n".join(signature_descriptions)))
    262 
    263   concrete_function_objects = []

ValueError: Could not find matching function to call loaded from the SavedModel. Got:
  Positional arguments (3 total):
    * Tensor("inputs:0", shape=(256, 30, 1), dtype=float64)
    * False
    * None
  Keyword arguments: {}

Expected these arguments to match one of the following 4 option(s):

Option 1:
  Positional arguments (3 total):
    * TensorSpec(shape=(None, None, 1), dtype=tf.float32, name='inputs')
    * False
    * None
  Keyword arguments: {}

Option 2:
  Positional arguments (3 total):
    * TensorSpec(shape=(None, None, 1), dtype=tf.float32, name='inputs')
    * True
    * None
  Keyword arguments: {}

Option 3:
  Positional arguments (3 total):
    * TensorSpec(shape=(None, None, 1), dtype=tf.float32, name='lstm_6_input')
    * True
    * None
  Keyword arguments: {}

Option 4:
  Positional arguments (3 total):
    * TensorSpec(shape=(None, None, 1), dtype=tf.float32, name='lstm_6_input')
    * False
    * None
  Keyword arguments: {}
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='MislavSag' date='2020-07-13T05:02:39Z'>
		&lt;denchmark-link:https://github.com/MislavSag&gt;@MislavSag&lt;/denchmark-link&gt;

I ran the code shared and face a different error, please find the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/6fa02c7b141ebe7e20d05d2fea6cf951/untitled272.ipynb&gt;gist here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='MislavSag' date='2020-07-13T08:33:09Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 , I have just ran the notebook and it returns the error I posted in thee question?
		</comment>
		<comment id='3' author='MislavSag' date='2020-07-14T14:50:49Z'>
		I am able to replicate this issue, please find the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/2d65eb67f2747adc322971b740cc535a/untitled274.ipynb&gt;gist here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='4' author='MislavSag' date='2020-07-15T06:02:16Z'>
		Looks like duplicate of &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/37339&gt;#37339&lt;/denchmark-link&gt;
. I was facing the same issue with version . It's gone in 
		</comment>
		<comment id='5' author='MislavSag' date='2020-07-15T08:03:05Z'>
		But if I execute tf.__version__ in python I got '2.2.0'.
		</comment>
		<comment id='6' author='MislavSag' date='2020-07-15T08:16:56Z'>
		
But if I execute tf.__version__ in python I got '2.2.0'.

Ok, sorry - it did fix my problem, but apparently yours is similar, but a different one.
		</comment>
		<comment id='7' author='MislavSag' date='2020-07-15T20:33:41Z'>
		&lt;denchmark-link:https://github.com/MislavSag&gt;@MislavSag&lt;/denchmark-link&gt;

Short answer: Two options to resolve this issue
(1) you need to set "#tf.keras.backend.set_floatx('float64')" at the top after importing modules, or
(2) convert input datatype to tf.float32 with this command X_test_lstm = tf.cast(X_test_lstm,tf.float32)
Please check the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/0a9ea390339b87c2dfe123c32b062ef3/untitled274.ipynb&gt;gist&lt;/denchmark-link&gt;
 for your reference.
There are two ways to save and load model
(1) model.save saves your model as a Keras model and hence you can use model.fit, model.predict etc. This approach is working well for you.
(2) tf.saved_model.save saves your model as a TF model with a signature (shape and dtype). Most of the ops you have in the model such as LSTM uses tf.float32 as default dtype but your data is of tf.float64. So there is a mismatch in the signature of the input data the model is expecting (which is tf.float32) whereas you are providing tf.float64).
Hope this helps. Thanks!
Please verify once and close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='8' author='MislavSag' date='2020-07-16T19:38:41Z'>
		If I apply the first solution I get the error:
&lt;denchmark-code&gt;AssertionError                            Traceback (most recent call last)
~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\impl\api.py in converted_call(f, args, kwargs, caller_fn_scope, options)
    537         options=options, autograph_module=tf_inspect.getmodule(converted_call))
--&gt; 538     converted_f = conversion.convert(target_entity, program_ctx)
    539 

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\impl\conversion.py in convert(entity, program_ctx)
    359   converted_entity_info = _convert_with_cache(entity, program_ctx,
--&gt; 360                                               free_nonglobal_var_names)
    361 

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\impl\conversion.py in _convert_with_cache(entity, program_ctx, free_nonglobal_var_names)
    274     nodes, converted_name, entity_info = convert_entity_to_ast(
--&gt; 275         entity, program_ctx)
    276 

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\impl\conversion.py in convert_entity_to_ast(o, program_ctx)
    510   elif tf_inspect.isfunction(o):
--&gt; 511     nodes, name, entity_info = convert_func_to_ast(o, program_ctx)
    512   elif tf_inspect.ismethod(o):

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\impl\conversion.py in convert_func_to_ast(f, program_ctx, do_rename)
    711   context = converter.EntityContext(namer, entity_info, program_ctx, new_name)
--&gt; 712   node = node_to_graph(node, context)
    713 

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\impl\conversion.py in node_to_graph(node, context)
    745   node = converter.standard_analysis(node, context, is_initial=True)
--&gt; 746   node = converter.apply_(node, context, function_scopes)
    747   node = converter.apply_(node, context, arg_defaults)

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\core\converter.py in apply_(node, context, converter_module)
    398   node = standard_analysis(node, context)
--&gt; 399   node = converter_module.transform(node, context)
    400   return node

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\converters\function_scopes.py in transform(node, ctx)
    131 def transform(node, ctx):
--&gt; 132   return FunctionBodyTransformer(ctx).visit(node)

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\core\converter.py in visit(self, node)
    344     try:
--&gt; 345       return super(Base, self).visit(node)
    346     finally:

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\pyct\transformer.py in visit(self, node)
    431 
--&gt; 432       result = super(Base, self).visit(node)
    433 

C:\ProgramData\Anaconda3\lib\ast.py in visit(self, node)
    270         visitor = getattr(self, method, self.generic_visit)
--&gt; 271         return visitor(node)
    272 

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\converters\function_scopes.py in visit_FunctionDef(self, node)
     98 
---&gt; 99     node = self.generic_visit(node)
    100 

C:\ProgramData\Anaconda3\lib\ast.py in generic_visit(self, node)
    325                     if isinstance(value, AST):
--&gt; 326                         value = self.visit(value)
    327                         if value is None:

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\core\converter.py in visit(self, node)
    344     try:
--&gt; 345       return super(Base, self).visit(node)
    346     finally:

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\pyct\transformer.py in visit(self, node)
    431 
--&gt; 432       result = super(Base, self).visit(node)
    433 

C:\ProgramData\Anaconda3\lib\ast.py in visit(self, node)
    270         visitor = getattr(self, method, self.generic_visit)
--&gt; 271         return visitor(node)
    272 

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\converters\function_scopes.py in visit_Return(self, node)
     43         function_context_name=self.state[_Function].context_name,
---&gt; 44         value=node.value)
     45 

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\pyct\templates.py in replace(template, **replacements)
    261   for k in replacements:
--&gt; 262     replacements[k] = _convert_to_ast(replacements[k])
    263   template_str = parser.STANDARD_PREAMBLE + textwrap.dedent(template)

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\pyct\templates.py in _convert_to_ast(n)
    223   if isinstance(n, str):
--&gt; 224     return gast.Name(id=n, ctx=None, annotation=None, type_comment=None)
    225   if isinstance(n, qual_names.QN):

C:\ProgramData\Anaconda3\lib\site-packages\gast\gast.py in create_node(self, *args, **kwargs)
     11             "Bad argument number for {}: {}, expecting {}".\
---&gt; 12             format(Name, nbparam, len(Fields))
     13         self._fields = Fields

AssertionError: Bad argument number for Name: 4, expecting 3

During handling of the above exception, another exception occurred:

ValueError                                Traceback (most recent call last)
c:\Users\Mislav\Documents\GitHub\trademl\trademl\modeling\train_nn.py in 
    256 
    257 history = model.fit(X_train_lstm, y_train_lstm, epochs=50, batch_size=128,
--&gt; 258                     validation_data=(X_val_lstm, y_val_lstm))

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\engine\training.py in _method_wrapper(self, *args, **kwargs)
     64   def _method_wrapper(self, *args, **kwargs):
     65     if not self._in_multi_worker_mode():  # pylint: disable=protected-access
---&gt; 66       return method(self, *args, **kwargs)
     67 
     68     # Running inside `run_distribute_coordinator` already.

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\engine\training.py in fit(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)
    846                 batch_size=batch_size):
    847               callbacks.on_train_batch_begin(step)
--&gt; 848               tmp_logs = train_function(iterator)
    849               # Catch OutOfRangeError for Datasets of unknown size.
    850               # This blocks until the batch has finished executing.

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\eager\def_function.py in __call__(self, *args, **kwds)
    578         xla_context.Exit()
    579     else:
--&gt; 580       result = self._call(*args, **kwds)
    581 
    582     if tracing_count == self._get_tracing_count():

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\eager\def_function.py in _call(self, *args, **kwds)
    625       # This is the first call of __call__, so we have to initialize.
    626       initializers = []
--&gt; 627       self._initialize(args, kwds, add_initializers_to=initializers)
    628     finally:
    629       # At this point we know that the initialization is complete (or less

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\eager\def_function.py in _initialize(self, args, kwds, add_initializers_to)
    504     self._concrete_stateful_fn = (
    505         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access
--&gt; 506             *args, **kwds))
    507 
    508     def invalid_creator_scope(*unused_args, **unused_kwds):

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\eager\function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)
   2444       args, kwargs = None, None
   2445     with self._lock:
-&gt; 2446       graph_function, _, _ = self._maybe_define_function(args, kwargs)
   2447     return graph_function
   2448 

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\eager\function.py in _maybe_define_function(self, args, kwargs)
   2775 
   2776       self._function_cache.missed.add(call_context_key)
-&gt; 2777       graph_function = self._create_graph_function(args, kwargs)
   2778       self._function_cache.primary[cache_key] = graph_function
   2779       return graph_function, args, kwargs

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\eager\function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)
   2665             arg_names=arg_names,
   2666             override_flat_arg_shapes=override_flat_arg_shapes,
-&gt; 2667             capture_by_value=self._capture_by_value),
   2668         self._function_attributes,
   2669         # Tell the ConcreteFunction to clean up its graph once it goes out of

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\framework\func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)
    979         _, original_func = tf_decorator.unwrap(python_func)
    980 
--&gt; 981       func_outputs = python_func(*func_args, **func_kwargs)
    982 
    983       # invariant: `func_outputs` contains only Tensors, CompositeTensors,

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\eager\def_function.py in wrapped_fn(*args, **kwds)
    439         # __wrapped__ allows AutoGraph to swap in a converted function. We give
    440         # the function a weak reference to itself to avoid a reference cycle.
--&gt; 441         return weak_wrapped_fn().__wrapped__(*args, **kwds)
    442     weak_wrapped_fn = weakref.ref(wrapped_fn)
    443 

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\framework\func_graph.py in wrapper(*args, **kwargs)
    962                     recursive=True,
    963                     optional_features=autograph_options,
--&gt; 964                     user_requested=True,
    965                 ))
    966           except Exception as e:  # pylint:disable=broad-except

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\impl\api.py in converted_call(f, args, kwargs, caller_fn_scope, options)
    578       logging.warn(warning_template, target_entity, file_bug_message, e)
    579 
--&gt; 580     return _call_unconverted(f, args, kwargs, options)
    581 
    582   with StackTraceMapper(converted_f), tf_stack.CurrentModuleFilter():

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\impl\api.py in _call_unconverted(f, args, kwargs, options, update_cache)
    344 
    345   if kwargs is not None:
--&gt; 346     return f(*args, **kwargs)
    347   else:
    348     return f(*args)

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\engine\training.py in train_function(iterator)
    570       data = next(iterator)
    571       outputs = self.distribute_strategy.run(
--&gt; 572           self.train_step, args=(data,))
    573       outputs = reduce_per_replica(
    574           outputs, self.distribute_strategy, reduction='first')

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\distribute\distribute_lib.py in run(***failed resolving arguments***)
    949       fn = autograph.tf_convert(
    950           fn, autograph_ctx.control_status_ctx(), convert_by_default=False)
--&gt; 951       return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)
    952 
    953   # TODO(b/151224785): Remove deprecated alias.

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\distribute\distribute_lib.py in call_for_each_replica(self, fn, args, kwargs)
   2288       kwargs = {}
   2289     with self._container_strategy().scope():
-&gt; 2290       return self._call_for_each_replica(fn, args, kwargs)
   2291 
   2292   def _call_for_each_replica(self, fn, args, kwargs):

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\distribute\distribute_lib.py in _call_for_each_replica(self, fn, args, kwargs)
   2647         self._container_strategy(),
   2648         replica_id_in_sync_group=constant_op.constant(0, dtypes.int32)):
-&gt; 2649       return fn(*args, **kwargs)
   2650 
   2651   def _reduce_to(self, reduce_op, value, destinations, experimental_hints):

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\impl\api.py in wrapper(*args, **kwargs)
    260       try:
    261         with conversion_ctx:
--&gt; 262           return converted_call(f, args, kwargs, options=options)
    263       except Exception as e:  # pylint:disable=broad-except
    264         if hasattr(e, 'ag_error_metadata'):

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\impl\api.py in converted_call(f, args, kwargs, caller_fn_scope, options)
    416   if conversion.is_in_whitelist_cache(f, options):
    417     logging.log(2, 'Whitelisted %s: from cache', f)
--&gt; 418     return _call_unconverted(f, args, kwargs, options, False)
    419 
    420   if ag_ctx.control_status_ctx().status == ag_ctx.Status.DISABLED:

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\autograph\impl\api.py in _call_unconverted(f, args, kwargs, options, update_cache)
    344 
    345   if kwargs is not None:
--&gt; 346     return f(*args, **kwargs)
    347   else:
    348     return f(*args)

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\engine\training.py in train_step(self, data)
    541               self.trainable_variables)
    542 
--&gt; 543     self.compiled_metrics.update_state(y, y_pred, sample_weight)
    544     return {m.name: m.result() for m in self.metrics}
    545 

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\engine\compile_utils.py in update_state(self, y_true, y_pred, sample_weight)
    409         if metric_obj is None:
    410           continue
--&gt; 411         metric_obj.update_state(y_t, y_p)
    412 
    413       for weighted_metric_obj in weighted_metric_objs:

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\utils\metrics_utils.py in decorated(metric_obj, *args, **kwargs)
     88 
     89     with tf_utils.graph_context_for_symbolic_tensors(*args, **kwargs):
---&gt; 90       update_op = update_state_fn(*args, **kwargs)
     91     if update_op is not None:  # update_op will be None in eager execution.
     92       metric_obj.add_update(update_op)

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\metrics.py in update_state(self, y_true, y_pred, sample_weight)
   2081           sample_weight=sample_weight,
   2082           multi_label=self.multi_label,
-&gt; 2083           label_weights=label_weights)
   2084 
   2085   def interpolate_pr_auc(self):

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\utils\metrics_utils.py in update_confusion_matrix_variables(variables_to_update, y_true, y_pred, thresholds, top_k, class_id, sample_weight, multi_label, label_weights)
    452       update_ops.append(
    453           weighted_assign_add(label, pred, weights_tiled,
--&gt; 454                               variables_to_update[matrix_cond]))
    455 
    456   return control_flow_ops.group(update_ops)

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\utils\metrics_utils.py in weighted_assign_add(label, pred, weights, var)
    428     if weights is not None:
    429       label_and_pred *= weights
--&gt; 430     return var.assign_add(math_ops.reduce_sum(label_and_pred, 1))
    431 
    432   loop_vars = {

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\ops\resource_variable_ops.py in assign_add(self, delta, use_locking, name, read_value)
    810     with _handle_graph(self.handle), self._assign_dependencies():
    811       assign_add_op = gen_resource_variable_ops.assign_add_variable_op(
--&gt; 812           self.handle, ops.convert_to_tensor(delta, dtype=self.dtype),
    813           name=name)
    814     if read_value:

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\framework\ops.py in convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, dtype_hint, ctx, accepted_result_types)
   1315       raise ValueError(
   1316           "Tensor conversion requested dtype %s for Tensor with dtype %s: %r" %
-&gt; 1317           (dtype.name, value.dtype.name, value))
   1318     return value
   1319 

ValueError: Tensor conversion requested dtype float64 for Tensor with dtype float32:
&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='MislavSag' date='2020-07-17T11:54:55Z'>
		&lt;denchmark-link:https://github.com/MislavSag&gt;@MislavSag&lt;/denchmark-link&gt;
 For "(1) you need to set "#tf.keras.backend.set_floatx('float64')" at the top after importing modules",  Please check the gist &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/a923f5d0dfa6606e8d0d648487f34ed6/untitled274.ipynb&gt;Here&lt;/denchmark-link&gt;
 for your reference.
For (2) please take a look at the gist &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/7a53ba4bc1d69e8d1490f11995d04655/untitled274.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
Please try these gists and let me know if there are working for you. If not, please share a gist. Thanks!
		</comment>
		<comment id='10' author='MislavSag' date='2020-07-17T19:07:44Z'>
		I am still getting the error I have posted above. Should it maybe be tf.keras.backend.set_floatx('float32')", not float64?
		</comment>
		<comment id='11' author='MislavSag' date='2020-07-17T20:26:37Z'>
		&lt;denchmark-link:https://github.com/MislavSag&gt;@MislavSag&lt;/denchmark-link&gt;
 Sorry. I am confused.

Did you try running my gists?
do you see any error? Can you share the error if any?
if both of my gists working for you, what is not working? Can you please share a standalone code to reproduce your exact error?

Please explain with little more details so that I can help. With limited info, it is very difficult to help. Thanks!
		</comment>
		<comment id='12' author='MislavSag' date='2020-07-21T15:30:27Z'>
		Sorry for the late answer. I saw your gist, but when I copy-paste same code and execute locally, I get an error I posted above:
ValueError: Tensor conversion requested dtype float64 for Tensor with dtype float32:
		</comment>
		<comment id='13' author='MislavSag' date='2020-07-22T21:57:14Z'>
		&lt;denchmark-link:https://github.com/MislavSag&gt;@MislavSag&lt;/denchmark-link&gt;
 Not sure what is the root-cause of the issue. Code is working perfectly without any error when I ran in my computer and Google colab.

what is the TF version you have? Can you try on tf-nightly
did you ran both the gist i shared above?
are you getting same error from the two gists I shared?

Thanks!
		</comment>
		<comment id='14' author='MislavSag' date='2020-07-23T12:02:35Z'>
		I have version 2.2.0. I will try on th-nightly and give youfeedback
		</comment>
		<comment id='15' author='MislavSag' date='2020-07-23T13:06:33Z'>
		If I install tf-nightly, I get error on import:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-5-927895df9eb7&gt; in &lt;module&gt;
      2 import pandas as pd
      3 import matplotlib.pyplot as plt
----&gt; 4 import tensorflow as tf

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\__init__.py in &lt;module&gt;
     39 import sys as _sys
     40 
---&gt; 41 from tensorflow.python.tools import module_util as _module_util
     42 from tensorflow.python.util.lazy_loader import LazyLoader as _LazyLoader
     43 

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\__init__.py in &lt;module&gt;
     72 
     73 # Ops
---&gt; 74 from tensorflow.python.ops.standard_ops import *
     75 
     76 # Namespaces

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\ops\standard_ops.py in &lt;module&gt;
     25 
     26 from tensorflow.python import autograph
---&gt; 27 from tensorflow.python.training.experimental import loss_scaling_gradient_tape
     28 
     29 # pylint: disable=g-bad-import-order

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\training\experimental\loss_scaling_gradient_tape.py in &lt;module&gt;
     19 from __future__ import print_function
     20 
---&gt; 21 from tensorflow.python.distribute import distribution_strategy_context
     22 from tensorflow.python.eager import backprop
     23 from tensorflow.python.framework import ops

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\distribute\__init__.py in &lt;module&gt;
     26 from tensorflow.python.distribute import mirrored_strategy
     27 from tensorflow.python.distribute import one_device_strategy
---&gt; 28 from tensorflow.python.distribute.experimental import collective_all_reduce_strategy
     29 from tensorflow.python.distribute.experimental import parameter_server_strategy
     30 # pylint: enable=unused-import

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\distribute\experimental\__init__.py in &lt;module&gt;
     23 from tensorflow.python.distribute import collective_all_reduce_strategy
     24 from tensorflow.python.distribute import parameter_server_strategy
---&gt; 25 from tensorflow.python.distribute import tpu_strategy
     26 # pylint: enable=unused-import

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\distribute\tpu_strategy.py in &lt;module&gt;
     26 import numpy as np
     27 
---&gt; 28 from tensorflow.compiler.xla.experimental.xla_sharding import xla_sharding
     29 from tensorflow.python.autograph.core import ag_ctx as autograph_ctx
     30 from tensorflow.python.autograph.impl import api as autograph

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\compiler\xla\experimental\xla_sharding\xla_sharding.py in &lt;module&gt;
     21 import numpy as _np  # Avoids becoming a part of public Tensorflow API.
     22 
---&gt; 23 from tensorflow.compiler.tf2xla.python import xla as tf2xla
     24 from tensorflow.compiler.xla import xla_data_pb2
     25 from tensorflow.core.framework import attr_value_pb2

~\AppData\Roaming\Python\Python37\site-packages\tensorflow\compiler\tf2xla\python\xla.py in &lt;module&gt;
    105 
    106 # Bessel
--&gt; 107 bessel_i0e = _unary_op(special_math_ops.bessel_i0e)
    108 bessel_i1e = _unary_op(special_math_ops.bessel_i1e)
    109 

AttributeError: module 'tensorflow.python.ops.special_math_ops' has no attribute 'bessel_i0e'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='16' author='MislavSag' date='2020-08-03T17:06:38Z'>
		&lt;denchmark-link:https://github.com/MislavSag&gt;@MislavSag&lt;/denchmark-link&gt;
 I guess something went wrong in the installation. I tried your code on my Windows10 desktop and also colab, everything works as expected. Can you uninstall TF and related libraries, reinstall freshly and then test it. Thanks!
		</comment>
		<comment id='17' author='MislavSag' date='2020-08-10T17:21:05Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='18' author='MislavSag' date='2020-08-17T17:27:36Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='19' author='MislavSag' date='2020-08-17T17:27:39Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41288&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41288&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>