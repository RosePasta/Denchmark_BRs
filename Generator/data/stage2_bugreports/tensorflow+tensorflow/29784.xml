<bug id='29784' author='ageron' open_date='2019-06-14T07:37:58Z' closed_time='2020-01-22T00:02:35Z'>
	<summary>Cannot use object loaded by tf.saved_model.load() to create Keras model</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
MacOSX 10.13.6
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
N/A
TensorFlow installed from (source or binary):
binary
TensorFlow version (use command below):
VERSION='2.0.0-dev20190613'
GIT_VERSION='v1.12.1-4034-gb81b902c37'
Python version:
3.6.8
Bazel version (if compiling from source):
N/A
GCC/Compiler version (if compiling from source):
N/A
CUDA/cuDNN version:
N/A
GPU model and memory:
N/A

Describe the current behavior
The Keras code example in the documentation for the tf.saved_model.load() function raises an exception:
model = tf.keras.Model(...)
tf.saved_model.save(model, path)
imported = tf.saved_model.load(path)
outputs = imported(inputs)
Describe the expected behavior
I expect it to work as advertised. ;-)
Code to reproduce the issue
Here's the full code (I tried to add as little as I could):
import tensorflow as tf
from tensorflow import keras
import numpy as np

path = "my_saved_model"
X_train = np.random.rand(100, 5)
y_train = np.random.rand(100, 1)

model = keras.models.Sequential([keras.layers.Dense(1, input_shape=[5])])
model.compile(loss="mse", optimizer="sgd")
model.fit(X_train, y_train)

tf.saved_model.save(model, path)

imported = tf.saved_model.load(path)

inputs = keras.layers.Input(shape=[5])
outputs = imported(inputs) # Raises _SymbolicException (see stacktrace below) &lt;&lt;&lt;!!!
model = keras.Model(inputs=[inputs], outputs=[outputs])
Stacktrace
Here's the full stacktrace:
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
~/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/eager/execute.py in quick_execute(op_name, num_outputs, inputs, attrs, ctx, name)
     60                                                op_name, inputs, attrs,
---&gt; 61                                                num_outputs)
     62   except core._NotOkStatusException as e:

TypeError: An op outside of the function building code is being passed
a "Graph" tensor. It is possible to have Graph tensors
leak out of the function building context by including a
tf.init_scope in your function building code.
For example, the following function will fail:
  @tf.function
  def has_init_scope():
    my_constant = tf.constant(1.)
    with tf.init_scope():
      added = my_constant * 2
The graph tensor has name: input_1:0

During handling of the above exception, another exception occurred:

_SymbolicException                        Traceback (most recent call last)
&lt;ipython-input-1-304bb0c5e2fc&gt; in &lt;module&gt;
     16
     17 inputs = keras.layers.Input(shape=[5])
---&gt; 18 outputs = imported(inputs) # Raises _SymbolicException &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;!!!
     19 model = keras.Model(inputs=[inputs], outputs=[outputs])

~/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/saved_model/load.py in _call_attribute(instance, *args, **kwargs)
    399
    400 def _call_attribute(instance, *args, **kwargs):
--&gt; 401   return instance.__call__(*args, **kwargs)
    402
    403

~/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py in __call__(self, *args, **kwds)
    431               *args, **kwds)
    432       # If we did not create any variables the trace we have is good enough.
--&gt; 433       return self._concrete_stateful_fn._filtered_call(canon_args, canon_kwds)  # pylint: disable=protected-access
    434
    435     def fn_with_cond(*inner_args, **inner_kwds):

~/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py in _filtered_call(self, args, kwargs)
    600          if isinstance(t, (ops.Tensor,
    601                            resource_variable_ops.ResourceVariable))),
--&gt; 602         self.captured_inputs)
    603
    604   def _call_flat(self, args, captured_inputs):

~/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py in _call_flat(self, args, captured_inputs)
    682     # Only need to override the gradient in graph mode and when we have outputs.
    683     if context.executing_eagerly() or not self.outputs:
--&gt; 684       outputs = self._inference_function.call(ctx, args)
    685     else:
    686       self._register_gradient()

~/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py in call(self, ctx, args)
    451             attrs=("executor_type", executor_type,
    452                    "config_proto", config),
--&gt; 453             ctx=ctx)
    454       # Replace empty list with None
    455       outputs = outputs or None

~/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/eager/execute.py in quick_execute(op_name, num_outputs, inputs, attrs, ctx, name)
     68   except TypeError as e:
     69     if any(ops._is_keras_symbolic_tensor(x) for x in inputs):
---&gt; 70       raise core._SymbolicException
     71     raise e
     72   # pylint: enable=protected-access

_SymbolicException:
Other info
I can actually call the imported object with tensors, as long as I pass the training argument:
&gt;&gt;&gt; imported(tf.random.uniform([10, 5]), training=False)
&lt;tf.Tensor: id=780, shape=(10, 1), dtype=float32, numpy=
array([[-0.7474083 ],
       [-0.25788566],
       [-0.48218375],
       [-0.60376763],
       [-1.4071536 ],
       [-0.45902687],
       [-0.07063864],
       [-0.9497912 ],
       [ 0.03344992],
       [-0.33686087]], dtype=float32)&gt;
However, I cannot pass it the inputs tensor:
&lt;denchmark-code&gt;&gt;&gt;&gt; imported(inputs, training=False)
...
~/miniconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/eager/execute.py in quick_execute(op_name, num_outputs, inputs, attrs, ctx, name)
     68   except TypeError as e:
     69     if any(ops._is_keras_symbolic_tensor(x) for x in inputs):
---&gt; 70       raise core._SymbolicException
     71     raise e
     72   # pylint: enable=protected-access

_SymbolicException:
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ageron' date='2019-09-22T00:42:42Z'>
		&lt;denchmark-link:https://github.com/ageron&gt;@ageron&lt;/denchmark-link&gt;
 The &lt;denchmark-link:https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/saved_model/load&gt;documentation&lt;/denchmark-link&gt;
 in the TF website mentions that
The object returned by tf.saved_model.load is not a Keras object (i.e. doesn't have .fit, .predict, etc. methods). 
Also it was mentioned that
Use tf.keras.models.load_model to restore the Keras model.
So, if you replace one line in your code, it works without any issues.
&lt;denchmark-code&gt;#imported = tf.saved_model.load(path)
imported = tf.keras.models.load_model(path)
&lt;/denchmark-code&gt;

As &lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/28923#issuecomment-521027273&gt;mentioned&lt;/denchmark-link&gt;


The best practices can be summed up to:
If you are planning to load the model back into Keras, use the Keras APIs for saving and loading. If you're not planning on using the Keras APIs to further train the model, then tf.saved_model.save and tf.saved_model.load is sufficient.

May be we need to update docs to represent things clearly. Please let us know what you think? Please check &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/d64dd0103fbf6a2cbb8ab4f2cf48cf9c/tf_29784.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='ageron' date='2019-09-23T01:17:03Z'>
		Indeed, everything works fine with , thanks &lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
.
However, it's a bit odd that the function returned by tf.saved_model.load(path) cannot be used with Keras Input objects, since it can be used inside TF Functions:
[...]
&gt;&gt;&gt; imported = tf.saved_model.load(path)
&gt;&gt;&gt; imported(tf.constant([[1., 2., 3., 4., 5.]]))
&lt;tf.Tensor: [...], numpy=array([[2.1844666]], dtype=float32)&gt;
&gt;&gt;&gt; @tf.function
... def my_tf_func(x):
...     y = x + 1.0
...     return 2.0 * imported(x)
...
&gt;&gt;&gt; my_tf_func(tf.constant([[1., 2., 3., 4., 5.]]))
&lt;tf.Tensor: [...], numpy=array([[4.368933]], dtype=float32)&gt;
How can I use any arbitrary SavedModel in a Keras model?
		</comment>
		<comment id='3' author='ageron' date='2020-01-22T00:02:34Z'>
		I am closing this issue as it was resolved by replacing tf.saved_model.load(path) with tf.keras.models.load_model(path). Thanks!
		</comment>
		<comment id='4' author='ageron' date='2020-01-22T00:02:37Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/29784&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/29784&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>