<bug id='25752' author='thevincentadam' open_date='2019-02-14T10:58:04Z' closed_time='2020-04-24T15:00:30Z'>
	<summary>Complex zero to the power zero is nan</summary>
	<description>
This is a simple yet dramatic bug:
0^0 does not return 1 for complex numbers  (left zero complex) !
System information

OS Platform and Distribution : Linux Ubuntu 16.04 LTS
TensorFlow installed from binary : pip
TensorFlow version : b'v1.13.0-rc1-0-g54c5616308' 1.13.0-rc1
Python version: Python 3.5.2

Describe the current behavior
tf.pow(tf.complex(0., 0.), 0) returns nan + nan j
Describe the expected behavior
It should be 1 + 0j as is returned by np.complex(0., 0.)**0
Code to reproduce the issue
z = tf.complex(0., 0.); sess = tf.Session(); sess.run( tf.pow(z, 0) )
	</description>
	<comments>
		<comment id='1' author='thevincentadam' date='2019-02-14T11:03:52Z'>
		True for TF2.0 preview as well:
In [12]: tf.complex(0., 0.) ** 0
Out[12]: &lt;tf.Tensor: id=13, shape=(), dtype=complex64, numpy=(nan+nanj)&gt;
		</comment>
		<comment id='2' author='thevincentadam' date='2019-02-15T05:34:26Z'>
		My guess is that, tf.pow(tf.complex(0., 0.), 0) is casted to
&lt;denchmark-code&gt;tf.pow(tf.complex(0., 0.), tf.complex(0., 0.))
&lt;/denchmark-code&gt;

,  and C++'s std::pow is used, which results in  nan + nan j.
The fix may not be straightforward, as it likely may impact the existing APIs.
		</comment>
		<comment id='3' author='thevincentadam' date='2019-02-26T01:16:33Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 I don't know very much about this. Can you find a more fitting assignee, please?
		</comment>
		<comment id='4' author='thevincentadam' date='2019-02-27T18:36:13Z'>
		&lt;denchmark-link:https://github.com/thevincentadam&gt;@thevincentadam&lt;/denchmark-link&gt;
 thanks for letting us know. I'll send out a fix, probably sometime next week.
		</comment>
		<comment id='5' author='thevincentadam' date='2019-06-19T15:01:06Z'>
		Hello, any progress on this issue?
		</comment>
		<comment id='6' author='thevincentadam' date='2019-12-22T21:28:55Z'>
		I'm running into the same problem with TensorFlow 2.0. What is the status of this issue?
		</comment>
		<comment id='7' author='thevincentadam' date='2020-03-12T07:05:24Z'>
		Issue is replicating with Tf 2.1 and tf-nightly
Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/0a8985cbc57b9023cead7a0083c284c1/untitled441.ipynb&gt;here&lt;/denchmark-link&gt;
 . Thanks
		</comment>
		<comment id='8' author='thevincentadam' date='2020-04-24T10:09:01Z'>
		Issue replicating with TF 2.2-rc3. Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/02bc714d61ad2f4b3003c29ef19222de/untitled816.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='9' author='thevincentadam' date='2020-04-24T15:00:30Z'>
		TensorFlow calls Eigen. Eigen calls std::pow. std::pow(0, 0) is implementation defined.
&lt;denchmark-link:https://en.cppreference.com/w/cpp/numeric/complex/pow&gt;https://en.cppreference.com/w/cpp/numeric/complex/pow&lt;/denchmark-link&gt;

To elaborate, mathematically z^0 is not well defined for |z| = 0 because the angle of z is indeterminate. It may be convenient to choose to follow the pattern for |z| &gt; 0, for which z^0 is 1 + 0i, but it is an implementation choice.
Please feel free to reopen the issue if you still have a concern. Thanks!
		</comment>
		<comment id='10' author='thevincentadam' date='2020-04-24T15:00:31Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/25752&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/25752&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>