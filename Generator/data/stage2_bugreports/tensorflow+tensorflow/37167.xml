<bug id='37167' author='SebastienKeroack' open_date='2020-02-28T14:04:15Z' closed_time='2020-06-15T20:37:37Z'>
	<summary>[TF 2.1] BUG: set_seed with categorical in a conditional branch in graph mode.</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock
example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g.,
Linux Ubuntu 16.04): Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if
the issue happens on mobile device:
TensorFlow installed from (source or
binary): - TensorFlow version (use command below):  From source and binary using pip.
Python version: - Bazel
version (if compiling from source): Python=3.6.9, Bazel=2.0.0
GCC/Compiler version (if compiling from
source): 8.3.0
CUDA/cuDNN version: - GPU model and memory:

Describe the current behavior
The example containing the bug always returns the first step in tf.function with tf.cond if we define a seed with tf.random.set_seed.
A= tf.Tensor([0 0 0 0 0 0 0 0 0 0 0 0], shape=(12,), dtype=int64)
Describe the expected behavior
A= tf.Tensor([0 1 1 0 0 1 1 1 1 0 1 1], shape=(12,), dtype=int64)
A= tf.Tensor([0 0 0 0 0 0 1 1 0 1 1 0], shape=(12,), dtype=int64)
...
Standalone code to reproduce the issue
Bug sample:
&lt;denchmark-code&gt;import tensorflow as tf

tf.random.set_seed(0)

def f1():
    return(tf.random.categorical(tf.math.log([[0.5, 0.5]]), 1))

@tf.function
def body():
    Y = []
    for t in range(12):
        Y.append(
            tf.cond(tf.constant(True),
                    f1,
                    f1)
        )
    return(tf.squeeze(Y))

A = body()

print("A=", A)
# A= tf.Tensor([0 0 0 0 0 0 0 0 0 0 0 0], shape=(12,), dtype=int64)
&lt;/denchmark-code&gt;


Working sample:

&lt;denchmark-code&gt;import tensorflow as tf

def f1():
    return(tf.random.categorical(tf.math.log([[0.5, 0.5]]), 1))

@tf.function
def body():
    Y = []
    for t in range(12):
        Y.append(
            tf.cond(tf.constant(True),
                    f1,
                    f1)
        )
    return(tf.squeeze(Y))

A = body()

print("A=", A)
# A= tf.Tensor([0 1 1 0 0 1 1 1 1 0 1 1], shape=(12,), dtype=int64)
&lt;/denchmark-code&gt;


Working sample:

&lt;denchmark-code&gt;import tensorflow as tf

tf.random.set_seed(0)

def f1():
    return(tf.random.categorical(tf.math.log([[0.5, 0.5]]), 1))

@tf.function
def body():
    Y = []
    for t in range(12):
        ret_0 = f1()
        ret_1 = f1()
        
        Y.append(
            tf.cond(tf.constant(True),
                    lambda: ret_0,
                    lambda: ret_1)
        )
    return(tf.squeeze(Y))

A = body()

print("A=", A)
# A= tf.Tensor([0 0 0 0 0 0 1 1 0 1 1 0], shape=(12,), dtype=int64)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='SebastienKeroack' date='2020-03-02T10:22:23Z'>
		I could replicate the issue with Tf 2.1.
Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/13114a2582e4e947b9baf7bea25d9358/untitled.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='SebastienKeroack' date='2020-03-04T00:16:39Z'>
		&lt;denchmark-link:https://github.com/SebastienKeroack&gt;@SebastienKeroack&lt;/denchmark-link&gt;
 Can you elaborate more in a detailed manner as I am having a hard time to understand what you are trying to convey. Thanks!
		</comment>
		<comment id='3' author='SebastienKeroack' date='2020-03-04T01:15:36Z'>
		The example containing the bug should work logically as example number 2. No?
		</comment>
		<comment id='4' author='SebastienKeroack' date='2020-06-15T18:00:13Z'>
		It's actually intended behavior. When set_seed has been called and f1 is traced, it picks an op seed (an attribute) for the random.categorical op. When f1 is called multiple times in body with tf.cond, f1 is inlined and the  random.categorical op is duplicated, all with the same op_seed attribute. So they'll give you the same random number.
In contrast, in Working Sample 2, although f1 is also called multiple times, it's not inlined and duplicated. Instead, it's just eagerly called many times during the tracing of body, leaving multiple random.categorical ops on the graph, and the eager context picks different op_seed attributes for them.
When set_seed is not called, as in Working Sample 1, the random.categorical ops get value (0,0) for their (graph_seed, op_seed) attributes, which is a special value telling the kernel to non-deterministically pick a seed at runtime.
This again shows how broken the old RNGs (and any stateful kernels) are.
		</comment>
		<comment id='5' author='SebastienKeroack' date='2020-06-15T20:37:39Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37167&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37167&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>