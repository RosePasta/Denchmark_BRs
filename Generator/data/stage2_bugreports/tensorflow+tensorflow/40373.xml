<bug id='40373' author='huonw' open_date='2020-06-11T02:22:31Z' closed_time='2020-06-17T18:11:56Z'>
	<summary>Saving Keras model containing layer returning sparse tensor hits: "ValueError: If specifying TensorSpec names for nested structures, either zero or all names have to be specified."</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes (entirety included below)
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):

macOS 10.14.5 (18F203)
current tensorflow/tensorflow:latest docker image (permanent reference: tensorflow/tensorflow@sha256:08901711826b185136886c7b8271b9fdbe86b8ccb598669781a1f5cb340184eb)


Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): pip on macOS, preinstalled in docker image
TensorFlow version (use command below): v2.2.0-rc4-8-g2b96f3662b 2.2.0
Python version: 3.6.9
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
Suppose a Keras model that contains a layer that returns a sparse tensor, and that sparse tensor is used as input to a later layer. No names are explicitly specified for any part of the model. Saving the model (with any of the Model.save method, tf.saved_model.save or tf.keras.models.save_model) hits an exception:
&lt;denchmark-code&gt;ValueError: If specifying TensorSpec names for nested structures, either zero or all names have to be specified.
&lt;/denchmark-code&gt;

If this is a problem in the user code, the exception doesn't make it clear:

what the problem is
where it is (e.g. which tensors/layers are effected)
how to fix it

For the second point, I ended up having to reduce (using a combination of creduce and manual editing) a much larger model to narrow down the problem from the original report in &lt;denchmark-link:https://github.com/stellargraph/stellargraph/issues/1251&gt;stellargraph/stellargraph#1251&lt;/denchmark-link&gt;
.
(This may relate to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/38465&gt;#38465&lt;/denchmark-link&gt;
, in particular the ragged tensors mentioned in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/38465#issuecomment-638542728&gt;#38465 (comment)&lt;/denchmark-link&gt;
.)
Describe the expected behavior
It would be good for at least one of:

the exception message/metadata improved to answer the three points above, so it's easier to fix
the code to work

Standalone code to reproduce the issue
import tensorflow as tf

class SqueezedSparseConversion(tf.keras.layers.Layer):
    def call(self, inputs):
        return tf.SparseTensor([(0, 1)], [0.1], (3, 3))

class GraphConvolution(tf.keras.layers.Layer):
    def call(self, inputs):
        return inputs[0]

x_t = tf.keras.Input(0)
sp = SqueezedSparseConversion()(x_t)
out = GraphConvolution()([x_t, sp])

m = tf.keras.Model([x_t], out)
m.summary()
m.save("")
This code is very simplified. In the real code, the tf.SparseTensor is constructed from data in inputs, and GraphConvolution does use the sparse tensor in inputs[1], in addition to inputs[0].
NB: if the sparse tensor is constructed purely within a layer, everything works:
import tensorflow as tf

class GraphConvolution(tf.keras.layers.Layer):
    def call(self, inputs):
        sp = tf.SparseTensor([(0, 1)], [0.1], (3, 3))
        return inputs[0]

x_t = tf.keras.Input(0)
out = GraphConvolution()([x_t])

m = tf.keras.Model([x_t], out)
m.summary()
m.save("")
Other info / logs
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/network.py", line 1052, in save
    signatures, options)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/saving/save.py", line 138, in save_model
    signatures, options)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/saving/saved_model/save.py", line 78, in save
    save_lib.save(model, filepath, signatures, options)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/saved_model/save.py", line 951, in save
    obj, export_dir, signatures, options, meta_graph_def)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/saved_model/save.py", line 1022, in _build_meta_graph
    _ = _SaveableView(checkpoint_graph_view)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/saved_model/save.py", line 204, in __init__
    function._list_all_concrete_functions_for_serialization())  # pylint: disable=protected-access
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/def_function.py", line 841, in _list_all_concrete_functions_for_serialization
    concrete_functions.append(self.get_concrete_function(*args, **kwargs))
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/saving/saved_model/save_impl.py", line 546, in get_concrete_function
    self.call_collection.add_trace(*args, **kwargs)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/saving/saved_model/save_impl.py", line 421, in add_trace
    fn.get_concrete_function(*args, **kwargs)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/saving/saved_model/save_impl.py", line 547, in get_concrete_function
    return super(LayerCall, self).get_concrete_function(*args, **kwargs)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/def_function.py", line 959, in get_concrete_function
    concrete = self._get_concrete_function_garbage_collected(*args, **kwargs)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/def_function.py", line 877, in _get_concrete_function_garbage_collected
    *args, **kwargs)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py", line 2496, in _get_concrete_function_garbage_collected
    graph_function, args, kwargs = self._maybe_define_function(args, kwargs)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py", line 2777, in _maybe_define_function
    graph_function = self._create_graph_function(args, kwargs)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py", line 2667, in _create_graph_function
    capture_by_value=self._capture_by_value),
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/func_graph.py", line 898, in func_graph_from_py_func
    args, arg_names, flat_shapes=arg_shapes)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/func_graph.py", line 1132, in _get_defun_inputs_from_args
    args, names, structure=args, flat_shapes=flat_shapes)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/func_graph.py", line 1196, in _get_defun_inputs
    raise ValueError("If specifying TensorSpec names for nested structures, "
ValueError: If specifying TensorSpec names for nested structures, either zero or all names have to be specified.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='huonw' date='2020-06-11T11:37:34Z'>
		I am able to replicate this issue, please find the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/56d0bb4e22fe010dbd150c6a8def9a54/untitled.ipynb&gt;gist here&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='huonw' date='2020-06-13T21:27:28Z'>
		&lt;denchmark-link:https://github.com/huonw&gt;@huonw&lt;/denchmark-link&gt;
 This is a duplicate of the issue &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/38465&gt;#38465&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='huonw' date='2020-06-15T00:09:34Z'>
		It does look similar. I added a comment with my reproducer (and the gist) to that issue.
		</comment>
		<comment id='4' author='huonw' date='2020-06-17T18:11:56Z'>
		&lt;denchmark-link:https://github.com/huonw&gt;@huonw&lt;/denchmark-link&gt;
 Thank you for commenting in the other issue.
&lt;denchmark-link:https://github.com/huonw&gt;@huonw&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/rlav440&gt;@rlav440&lt;/denchmark-link&gt;
 This issue has been fixed in tf-nightly. Please find the gist &lt;denchmark-link:https://colab.research.google.com/gist/gowthamkpr/02054044d39cd7986950ee10fa740b10/untitled.ipynb&gt;here&lt;/denchmark-link&gt;

I am closing this issue now. We can track your issue there as having one instance of the issue helps.
		</comment>
		<comment id='5' author='huonw' date='2020-06-17T18:11:59Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40373&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40373&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>