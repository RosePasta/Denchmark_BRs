<bug id='34790' author='mayou36' open_date='2019-12-03T10:52:52Z' closed_time='2019-12-04T15:01:39Z'>
	<summary>Dynamic scatter of TensorArray not working in tf.function + eager</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 19.10
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.0.0
Python version: 3.7


This may be related to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34683&gt;#34683&lt;/denchmark-link&gt;
, but this is explicitly about the scatter method, I believe it is independent.
The following code creates a TensorArray in a while loop. Every time, a variable-length piece is added. Rules: I need to use scatter and tf.Range like this, the example is a simplification.
The following works with:

Graph mode
Graph mode with tf.function (no autograph)
Eager mode

It breaks in Eager Mode with tf.function (no autograph)
Describe the expected behavior
It fails saying that the shape could not be determined, since the scatter unstacks the values internally.
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf

use_eager = True  # switch to make it run

if not use_eager:
    tf.compat.v1.disable_eager_execution()

stop_at = 1000

empty_sample = tf.TensorArray(dtype=tf.float32, size=stop_at, dynamic_size=True,
                              clear_after_read=True,  # we read only once at end to tensor
                              element_shape=()
                              )

@tf.function(autograph=False)  # if removed, works
def body(sample, length):
    n_to_draw = tf.cast(tf.random.poisson(shape=(), lam=30), dtype=tf.int32)
    rnd = tf.random.uniform(shape=(n_to_draw,), dtype=tf.float32, maxval=1) + 3.
    new_length = length + n_to_draw
    indices = tf.range(length, new_length)
    new_sample = sample.scatter(indices=indices, value=rnd)
    return new_sample, new_length


def cond(sample, length):
    return tf.less(length, stop_at)


sampled = tf.while_loop(cond=cond, body=body, loop_vars=[empty_sample, 0], back_prop=False)[0]
reshaped_sample = tf.reshape(sampled.stack(), shape=(-1,))  # make a read
print(reshaped_sample)

if not use_eager:
    with tf.compat.v1.Session() as sess:
        print(sess.run(reshaped_sample))
&lt;/denchmark-code&gt;

Other info / logs
This is the actual error log
&lt;denchmark-code&gt;  File "/home/jonas/.PyCharm2019.3/config/scratches/scratch_27.py", line 21, in body
    new_sample = sample.scatter(indices=indices, value=rnd)
  File "/home/jonas/anaconda3/envs/zfit37tf2/lib/python3.7/site-packages/tensorflow_core/python/util/tf_should_use.py", line 198, in wrapped
    return _add_should_use_warning(fn(*args, **kwargs))
  File "/home/jonas/anaconda3/envs/zfit37tf2/lib/python3.7/site-packages/tensorflow_core/python/ops/tensor_array_ops.py", line 1168, in scatter
    return self._implementation.scatter(indices, value, name=name)
  File "/home/jonas/anaconda3/envs/zfit37tf2/lib/python3.7/site-packages/tensorflow_core/python/ops/tensor_array_ops.py", line 873, in scatter
    for index, val in zip(indices, array_ops.unstack(value)):
  File "/home/jonas/anaconda3/envs/zfit37tf2/lib/python3.7/site-packages/tensorflow_core/python/ops/array_ops.py", line 1333, in unstack
    raise ValueError("Cannot infer num from shape %s" % value_shape)
ValueError: Cannot infer num from shape (None,)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='mayou36' date='2019-12-04T03:29:20Z'>
		Issue replicating for TF-2.0 and tf-nightly,kindly find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/oanush/d513c8ebc713b5c725e55789587f4e7e/34790.ipynb&gt;gist&lt;/denchmark-link&gt;
 of colab.Thanks!
		</comment>
		<comment id='2' author='mayou36' date='2019-12-04T14:54:56Z'>
		Yes, it's the same issue as &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34683&gt;#34683&lt;/denchmark-link&gt;
 - because the "eager" implementation of TensorArray always expects a shape, it errors out in  before the tf.function verification takes place.
If we avoid the use of scatter, we get the error expected from &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34683&gt;#34683&lt;/denchmark-link&gt;
, in tf-nightly: "NotImplementedError: Attempting to build a graph-mode TF2-style TensorArray from either an eager-mode TensorArray or a TF1-style TensorArray."
I'm not sure if you can run the entire sampling process in graph, as below, but that clears the error:
&lt;denchmark-code&gt;@tf.function
def full_sample(stop_at):
    sample = tf.TensorArray(dtype=tf.float32, size=stop_at, dynamic_size=True)
    length = tf.constant(0)
    while length &lt; stop_at:
        n_to_draw = tf.cast(tf.random.poisson(shape=(), lam=30), dtype=tf.int32)
        rnd = tf.random.uniform(shape=(n_to_draw,), dtype=tf.float32, maxval=1) + 3.
        new_length = length + n_to_draw
        indices = tf.range(length, new_length)
        sample = sample.scatter(indices=indices, value=rnd)
        length = new_length

    return sample.stack()

sample = full_sample(stop_at)
print(sample)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='mayou36' date='2019-12-04T15:01:38Z'>
		That resolves the issue, true. Just putting tf.function(autograph=False) around the TensorArray creation is fine.
The improved error message is already in the nightlies as I see, so closing but feel free to reopen.
		</comment>
		<comment id='4' author='mayou36' date='2019-12-04T15:01:41Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34790&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34790&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='mayou36' date='2019-12-04T15:07:33Z'>
		Bit of a caution that wrapping just the  creation in a tf.function no longer works in the nightly, and will most likely break in 2.1 or 2.2, due to the newly-added verification. It will only work reliably once &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34683&gt;#34683&lt;/denchmark-link&gt;
 is fully fixed.
		</comment>
	</comments>
</bug>