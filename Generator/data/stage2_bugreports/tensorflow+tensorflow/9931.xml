<bug id='9931' author='galeone' open_date='2017-05-16T08:52:31Z' closed_time='2017-05-17T20:01:53Z'>
	<summary>Go: SIGSEGV when using int32 instead of int64 and missing error in Resize functions</summary>
	<description>
&lt;denchmark-h:h2&gt;Problem&lt;/denchmark-h&gt;

In Go, some operation causes a SIGSEGV when using an int32 instead of an int64 (and I have reasons to believe that the same will happen when using float instead of double and vice-versa).
The Resize* operations don't define the output shape correctly when the input is not a "batch": they just let the dimensions undefined instead of raising some errors.
The tests below are commented so I hope that's enough to let you understand what the problems are.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

package poc_test

import (
        "fmt"
        //tf "github.com/tensorflow/tensorflow/tensorflow/go"
        "github.com/tensorflow/tensorflow/tensorflow/go/op"
        "testing"
)

func TestResizeWithoutBatchIsNoSense(t *testing.T) {
        // Create root scope
        root := op.NewScope()

        // Define graph

        // 1: read image content
        imagePath := "test.jpg"
        contents := op.ReadFile(root.SubScope("ReadFile"), op.Const(root.SubScope("filename"), imagePath))

        // 2: decode Jpeg
        value := op.DecodeJpeg(root.SubScope("DecodeJpeg"), contents, op.DecodeJpegChannels(3))

        // I'd like to add noise to the image, so I'd like to define a nose tensor with the same shape of the image
        // Just to be sure that the image shape is fully defined, I resize it
        resize1 := op.ResizeNearestNeighbor(root.SubScope("ResizeArea"), value, op.Const(root.SubScope("size"), []int32{int32(80), int32(80)}))

        // If the size parameter is an int32, no error is raised but the operation is no sense
        // Because it returns ? instead of [80, 80, 3]
        // The reason is taht Resize* methods requires a batch of images: should raise an error?
        fmt.Println("Shape with int32: ", resize1.Shape().String())
        if dims64, err := resize1.Shape().ToSlice(); err != nil {                                                                                                                                                                                                              
                fmt.Println(dims64)                                                                                                                                                                                                                                            
        } else {                                                                                                                                                                                                                                                               
                t.Error("Error: ", err.Error())                                                                                                                                                                                                                                
        }                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                               
        // I expect a fully defined shape                                                                                                                                                                                                                                      
        if !resize1.Shape().IsFullySpecified() {                                                                                                                                                                                                                               
                t.Error("Not defined shape")                                                                                                                                                                                                                                   
        }                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                               
        // create the batch and see how things changes                                                                                                                                                                                                                         
        batch := op.ExpandDims(root.SubScope("expand"), value, op.Const(root.SubScope("axis"), []int32{0}))                                                                                                                                                                    
        resize1 = op.ResizeNearestNeighbor(root.SubScope("ResizeArea"), batch, op.Const(root.SubScope("size"), []int32{int32(80), int32(80)}))                                                                                                                                 
        fmt.Println("Shape with int32 and input as a batch: ", resize1.Shape().String())                                                                                                                                                                                       
        if dims64, err := resize1.Shape().ToSlice(); err == nil {                                                                                                                                                                                                              
                fmt.Println(dims64)                                                                                                                                                                                                                                            
        } else {                                                                                                                                                                                                                                                               
                fmt.Println("Error: ", err.Error())                                                                                                                                                                                                                            
        }                                                                                                                                                                                                                                                                      
        // Now the things have sense and the shape is defined and equals to [ 1, 80, 80, 3]                                                                                                                                                                                    
}                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                               
func TestResizeWithIn64ShapeSigSegvs(t *testing.T) {                                                                                                                                                                                                                           
        defer func() {                                                                                                                                                                                                                                                         
                if r := recover(); r != nil {                                                                                                                                                                                                                                  
                        t.Error("Panic!")                                                                                                                                                                                                                                      
                }                                                                                                                                                                                                                                                              
        }()
        // Create root scope
        root := op.NewScope()

        // Define graph

        // 1: read image content
        imagePath := "test.jpg"
        contents := op.ReadFile(root.SubScope("ReadFile"), op.Const(root.SubScope("filename"), imagePath))

        // 2: decode Jpeg
        value := op.DecodeJpeg(root.SubScope("DecodeJpeg"), contents, op.DecodeJpegChannels(3))

        // However, changing int32 with int64 breaks everyting (no matter if I use `batch` or `value`)
        resize2 := op.ResizeArea(root.SubScope("ResizeArea2"), value, op.Const(root.SubScope("size2"), []int64{int64(80), int64(80)}))
        // This operation causes a SIGSEGV
        fmt.Println("Shape value: ", resize2.Shape())
        fmt.Println("Shape with int64: ", resize2.Shape().String())

        // In short, chaning int32 with int64 causes SIGSEGV. It looks like kernels are not registered to handle both types

        // This can bring the code to be a mess to debug, because If I'd like to, for example, add noise to an image
        // I have to generate a set of values with the same shape of the input images.
        // Using the one with the defined shape (the batch) I'd like to use the output of Shape().ToSlice()
        // But I can't.
}

func TestGenerateNoiseWithInt32Shape(t *testing.T) {
        defer func() {
                if r := recover(); r != nil {
                        t.Error("Panic!")
                }
        }()
        // Create root scope
        root := op.NewScope()

        // Define graph

        // 1: read image content
        imagePath := "test.jpg"
        contents := op.ReadFile(root.SubScope("ReadFile"), op.Const(root.SubScope("filename"), imagePath))
        // 2: decode Jpeg
        value := op.DecodeJpeg(root.SubScope("DecodeJpeg"), contents, op.DecodeJpegChannels(3))
        batch := op.ExpandDims(root.SubScope("expand"), value, op.Const(root.SubScope("axis"), []int32{0}))
        resize1 := op.ResizeNearestNeighbor(root.SubScope("ResizeArea"), batch, op.Const(root.SubScope("size"), []int32{int32(80), int32(80)}))
        fmt.Println("Shape with int32 and input as a batch: ", resize1.Shape().String())
        if dims64, err := resize1.Shape().ToSlice(); err != nil {
                fmt.Println(dims64)
        } else {
                fmt.Println("Error: ", err.Error())
        }

        dims64, _ := resize1.Shape().ToSlice()
        noise := op.ParameterizedTruncatedNormal(root.SubScope("ParameterizedTruncatedNormal"),
                op.Const(root.SubScope("shape"), dims64),
                op.Const(root.SubScope("means"), 0.),
                op.Const(root.SubScope("stddev"), 1.),
                op.Const(root.SubScope("minvals"), 0.),
                op.Const(root.SubScope("maxvals"), 1.))
        fmt.Println(noise)

        // ^ This operation causes SIGSEGV
        // I have to convert dims64 to a slice of int32 and then the operation works

}

func TestGenerateNoiseWithInt64Shape(t *testing.T) {
        // Create root scope
        root := op.NewScope()

        // Define graph

        // 1: read image content
        imagePath := "test.jpg"
        contents := op.ReadFile(root.SubScope("ReadFile"), op.Const(root.SubScope("filename"), imagePath))
        // 2: decode Jpeg
        value := op.DecodeJpeg(root.SubScope("DecodeJpeg"), contents, op.DecodeJpegChannels(3))
        batch := op.ExpandDims(root.SubScope("expand"), value, op.Const(root.SubScope("axis"), []int32{0}))
        resize1 := op.ResizeNearestNeighbor(root.SubScope("ResizeArea"), batch, op.Const(root.SubScope("size"), []int32{int32(80), int32(80)}))
        fmt.Println("Shape with int32 and input as a batch: ", resize1.Shape().String())
        if dims64, err := resize1.Shape().ToSlice(); err != nil {
                fmt.Println(dims64)
        } else {
                fmt.Println("Error: ", err.Error())
        }

        dims64, _ := resize1.Shape().ToSlice()

        var dims []int32 = make([]int32, len(dims64))
        for i, dim := range dims64 {
                dims[i] = int32(dim)
        }

        noise := op.ParameterizedTruncatedNormal(root.SubScope("ParameterizedTruncatedNormal"),
                op.Const(root.SubScope("shape"), dims64),
                op.Const(root.SubScope("means"), 0.),
                op.Const(root.SubScope("stddev"), 1.),
                op.Const(root.SubScope("minvals"), 0.),
                op.Const(root.SubScope("maxvals"), 1.))
        fmt.Println(noise.Shape().String())
}
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Archlinux
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 1.1.0-rc2
Bazel version (if compiling from source): 0.4.5
CUDA/cuDNN version: cuda 8, cudnn 5.1
GPU model and memory:  GeForce GTX 1080
Exact command to reproduce: go test

	</description>
	<comments>
		<comment id='1' author='galeone' date='2017-05-16T16:13:55Z'>
		Thanks for the report &lt;denchmark-link:https://github.com/galeone&gt;@galeone&lt;/denchmark-link&gt;
 , there are multiple things going on here.


There was a bug in the underlying C API where it was suppressing errors during graph construction. That is fixed at head in 7d785f1, so it will be available with the 1.2 release of the TensorFlow C API


The Scope type follows the "builder pattern" for graph construction. So, while op.ResizeNearestNeighbor(Scope*, ...) doesn't return an error, errors are collected in Scope.Err. This allows for more compact graph definitions (see the package example for the op package), at the cost of forgetting to check the error. Setting aside comments on the merits of this design, before using any of the returned tf.Outputs from the functions in the op package, one is encouraged to check the error. So, in line 30 of the snippet above for example, I'd suggest:
resize1 := op.ResizeNearestNeighbor(root.SubScope("ResizeArea"), value, op.Const(root.SubScope("size"), []int32{int32(80), int32(80)}))
if err := root.Err(); err != nil {
    t.Fatal(err)
}

// If the size parameter is an int32, no error is raised but the operation is no sense
// Because it returns ? instead of [80, 80, 3]
// The reason is taht Resize* methods requires a batch of images: should raise an error?
fmt.Println("Shape with int32: ", resize1.Shape().String())


Regardless, the Go API should never end up with segfaults from the underlying C API (in this case, providing an invalid TF_Operation pointer). So I'm going to send a fix for that.


Long story short: A couple of fixes will ensure error messages/panics that are more useful than the cryptic segfaults. Additionally, it's good practice to check the error on the Scope object.
Hope that helps (will update this issue with the fix mentioned above). Comments/thoughts welcome.
		</comment>
		<comment id='2' author='galeone' date='2017-05-16T17:59:55Z'>
		Thank you for the suggestion on how to properly check for errors!
Is somewhere documented the Scope follows the builder pattern? I guess it would be nice to put this in Scope's go-doc.
About the point 3: what is the problem? Why it segfaults? That op has a kernel registered to handle both types or the fix is to register the missing type?
		</comment>
		<comment id='3' author='galeone' date='2017-05-16T19:33:41Z'>
		&lt;denchmark-link:https://github.com/galeone&gt;@galeone&lt;/denchmark-link&gt;
 : I'm probably misusing the phrase "builder pattern" :), but yeah, it does want you to check for errors. If you'd like to contribute or suggest some changes to  or other files to help improve documentation, we'd be more than happy to look at them.
Regarding point 3: It isn't that the kernel isn't registered, it's that the operation requires that the  argument be an int32 Tensor (see &lt;denchmark-link:https://godoc.org/github.com/tensorflow/tensorflow/tensorflow/go/op#ResizeNearestNeighbor&gt;godoc&lt;/denchmark-link&gt;
).
Between &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/7d785f1e18af9d22d940f18aac6e8c9ffd268b22&gt;7d785f1&lt;/denchmark-link&gt;
 and a fix I'm about to make on the Go side, you shouldn't see any segfaults in the C API - but you may see a nil-pointer dereference in Go (because  will return nil and an error after the fix).
Hope that helps (the fix should be in sometime tomorrow I think)
		</comment>
		<comment id='4' author='galeone' date='2017-05-16T20:08:11Z'>
		I'll be happy to contribute! In the next days, as soon as I have time, I'm going to give a better look.
However, since every size argument of every function requires an int32, why the .Shape() method returns a []int64? I mean, it seems not coherent. The documentation talks about int32 almost everywhere and this int64 just makes operations like the creation of a new tensor with a predefined shape (like the noise in my previous example) a problem because of the required casts.
Isn't just better to use an int32 everywhere and thus avoid the problem? I'm pretty sure that no one will create a tensor with a dimension &gt; 2^32 -1
		</comment>
		<comment id='5' author='galeone' date='2017-05-16T20:22:50Z'>
		I believe the use of int32 in many operations predates efforts to accept int64 as well (see for example &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/91ce95d497ec2957535b2ce6a965cd8269d723e5&gt;91ce95d&lt;/denchmark-link&gt;
). So, I think some of these ops need to be updated to accept int64 as well.
In general, having Tensors that reach &gt; 2^32-1 dimensions isn't unheard of, especially when reshaping large batches of multi-dimensional tensors.
		</comment>
		<comment id='6' author='galeone' date='2017-05-17T07:11:10Z'>
		Alright, thus instead of using int32 everywhere I suggest using int64 everywhere in order to maintain consistency. Or, if not everywhere, at leat use the same type for attributes that works togeather, i.e. shape and dimensions (as input and/or output parameters) should be both int64.
		</comment>
		<comment id='7' author='galeone' date='2017-05-17T20:01:52Z'>
		This issue should be resolved at head (and with C library compiled from head), so I'm going to close this out.
Contributions for making more operations accept int64 for shape similar to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/91ce95d497ec2957535b2ce6a965cd8269d723e5&gt;91ce95d&lt;/denchmark-link&gt;
 are welcome.
&lt;denchmark-link:https://github.com/galeone&gt;@galeone&lt;/denchmark-link&gt;
 : Hope that helps. Feel free to open a new issue if you run into more trouble. Thanks!
		</comment>
	</comments>
</bug>