<bug id='31807' author='seanpmorgan' open_date='2019-08-20T16:55:22Z' closed_time='2019-08-21T00:31:41Z'>
	<summary>tf.load_op_library unable to load manylinux2010 repaired custom ops</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No -- using https://github.com/tensorflow/custom-op (But it breaks for addons too)
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu16.04
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): tf-nightly &amp; tf-nighty-2.0-preview

Describe the current behavior
Currently when I build a custom op in the tensorflow/tensorflow:custom-op-ubuntu16 docker image using the defined steps I get an install-able pip package tensorflow_zero_out-0.0.1-cp27-cp27mu-linux_x86_64.whl
This works fine, however if I repair that wheel to be manylinux2010 compliant, then tf.load_op_library will fail to find the custom-op.
&lt;denchmark-code&gt;python -c "import tensorflow as tf; print(dir(tf.load_op_library('manylinux/tensorflow_zero_out/python/ops/_zero_out_ops.so')))"

['LIB_HANDLE', 'OP_LIST', 'ZeroOut', '_IS_TENSORFLOW_PLUGIN', 
'_InitOpDefLibrary', '__builtins__', '__doc__', '__name__', '__package__', 
'_collections', '_common_shapes', '_context', '_core', '_dispatch', '_doc_controls', 
'_dtypes', '_errors', '_execute', '_kwarg_only', '_op_def_lib', '_op_def_library', 
'_op_def_pb2', '_op_def_registry', '_ops', '_pywrap_tensorflow', '_six', 
'_tensor_shape', 'deprecated_endpoints', 'tf_export', 'zero_out',
 'zero_out_eager_fallback']
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;python -c "import tensorflow as tf;print(dir(tf.load_op_library('manylinux2010/tensorflow_zero_out/python/ops/_zero_out_ops.so')))"

['LIB_HANDLE', 'OP_LIST', '_IS_TENSORFLOW_PLUGIN', 
'_InitOpDefLibrary', '__builtins__', '__doc__', '__name__', '__package__', 
'_collections', '_common_shapes', '_context', '_core', 
'_dispatch', '_doc_controls', '_dtypes', '_errors', '_execute', '_kwarg_only', 
'_op_def_lib', '_op_def_library', '_op_def_pb2', '_op_def_registry', '_ops', 
'_pywrap_tensorflow', '_six', '_tensor_shape', 'deprecated_endpoints', 'tf_export']
&lt;/denchmark-code&gt;

Notice  'zero_out' &amp;  'zero_out_eager_fallback' are not found in the loaded library for manylinux2010
Code to reproduce the issue
&lt;denchmark-code&gt;git clone https://github.com/tensorflow/custom-op.git &amp;&amp; cd custom-op
docker run -it --rm -v ${PWD}:/workspace -w /workspace tensorflow/tensorflow:custom-op-ubuntu16 /bin/bash

pip install tf-nightly
./configure.sh
bazel build build_pip_pkg
bazel-bin/build_pip_pkg artifacts

# Installed auditwheel is too old for manylinux2010
pip3 install --upgrade auditwheel

# Libtensorflow framework needs to be on LD path
export LD_LIBRARY_PATH="/usr/local/lib/python2.7/dist-packages/tensorflow_core"

# Repair logs look more or less okay
auditwheel -v repair --plat manylinux2010_x86_64 artifacts/tensorflow_zero_out-0.0.1-cp27-cp27mu-linux_x86_64.whl &amp;&gt; repair.txt
&lt;/denchmark-code&gt;


Here are the auditwheel repair logs:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3521714/repair.txt&gt;repair.txt&lt;/denchmark-link&gt;

Here are the readelf inspections of the so files:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3521717/readelf.txt&gt;readelf.txt&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3521718/readelf-manylinux2010.txt&gt;readelf-manylinux2010.txt&lt;/denchmark-link&gt;

Here are the so files:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3521726/so-files.zip&gt;so-files.zip&lt;/denchmark-link&gt;

cc &lt;denchmark-link:https://github.com/perfinion&gt;@perfinion&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/yifeif&gt;@yifeif&lt;/denchmark-link&gt;

--------------------------EDIT--------------------
Here are the extracted whl directories which will work with the python  commands from above. (Manylinux2010 repair makes it so the custom op depends on a newly copied libtensorflow_framework.so which is part of the new whl):
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3522649/custom-op-dirs.zip&gt;custom-op-dirs.zip&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='seanpmorgan' date='2019-08-20T20:18:14Z'>
		I remember I encountered an issue when there is a collision of names for added kernel ops. (used to be fine for 1.14, not with new tf-nightly) Wondering if there are multiple versions of zero_out kernel ops?
		</comment>
		<comment id='2' author='seanpmorgan' date='2019-08-20T21:46:04Z'>
		
I remember I encountered an issue when there is a collision of names for added kernel ops. (used to be fine for 1.14, not with new tf-nightly) Wondering if there are multiple versions of zero_out kernel ops?

Thanks! Looking at the binaries' symbols I'm not seeing any duplication that isn't present in the .so before auditwheel repair though:
&lt;denchmark-link:https://www.diffchecker.com/pfJbJX8g&gt;https://www.diffchecker.com/pfJbJX8g&lt;/denchmark-link&gt;

Is there a way to increase the verbosity of the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/9590c4c32dd4346ea5c35673336f5912c6072bf2/tensorflow/core/framework/load_library.cc&gt;load_library&lt;/denchmark-link&gt;
 call so we could see if there is a conflict or something else?
The only major difference I see is that the repaired binary requires the newly copied libtensorflow_framework-65610c2c.so.1 instead of the libtensorflow_framework.so.1 that would get picked up from the TF install. I'm not sure what the implications of that are though and without being able to step through load_library function it's a bit tough.
		</comment>
		<comment id='3' author='seanpmorgan' date='2019-08-20T22:40:42Z'>
		My previous issue was the LMDBDataset. I initially implemented LMDBDataset (C++) into TF's core rep (tf.contrib) some time ago. Later on since we try to modularize, the LMDBDataset has been moved to tensorflow/io. So there are two copies if both tensorflow and tensorflow-io are loaded.
That used to be fine. However, very recently I noticed that LMDBDataset in tensorflow/io is not working anymore with tf-nightly (couldn't remember which version but must be very recent), and I have to change the name in tensorflow/io to LMDBDatasetV2 to get around it.
Don't know if this could be related as well.
		</comment>
		<comment id='4' author='seanpmorgan' date='2019-08-20T23:14:00Z'>
		Ah the libtensorflow_framework.so.1 is a known limitation of auditwheel.
I wrote a patch for auditwheel, to get around the issue :  &lt;denchmark-link:https://github.com/tensorflow/io/commit/02dcf4a&gt;tensorflow/io@02dcf4a&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='seanpmorgan' date='2019-08-20T23:54:24Z'>
		&lt;denchmark-link:https://github.com/yongtang&gt;@yongtang&lt;/denchmark-link&gt;
 Amazing thanks so much! Could you explain what that file edit does / why that patch works (I'm assuming somehow tricks auditwheel to thinking the sharedlib is a common one on all systems)?
We should probably describe this and include the patch in custom-op repo.
		</comment>
		<comment id='6' author='seanpmorgan' date='2019-08-21T00:31:41Z'>
		EDIT -- Found out what policy.json was being editted:
&lt;denchmark-link:https://github.com/pypa/auditwheel/blob/master/auditwheel/policy/policy.json&gt;https://github.com/pypa/auditwheel/blob/master/auditwheel/policy/policy.json&lt;/denchmark-link&gt;

Thanks again for the patch &lt;denchmark-link:https://github.com/yongtang&gt;@yongtang&lt;/denchmark-link&gt;
!
		</comment>
	</comments>
</bug>