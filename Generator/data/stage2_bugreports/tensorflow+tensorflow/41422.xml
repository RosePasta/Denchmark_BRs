<bug id='41422' author='Nestak2' open_date='2020-07-15T16:18:15Z' closed_time='2020-08-14T05:27:31Z'>
	<summary>Tensorflow keras timeseries prediction with X and y having different shapes</summary>
	<description>
I am trying to do time series prediction with tensorflow and keras with X and y having different dimensions:
&lt;denchmark-code&gt;X.shape = (5000, 12)
y.shape = (5000, 3, 12)
&lt;/denchmark-code&gt;

When I do the following
&lt;denchmark-code&gt;n_input = 7
generator = TimeseriesGenerator(X, y, length=n_input, batch_size=1)

for i in range(5):
    x_, y_ = generator[i]
    print(x_.shape)
    print(y_.shape)
&lt;/denchmark-code&gt;

I get as desired the output
&lt;denchmark-code&gt;(1, 7, 12)
(1, 3, 12)
(1, 7, 12)
(1, 3, 12)
...
&lt;/denchmark-code&gt;

This is because my data is meteorological, I have 5000 days, for training in the array X I use a sliding window of 7 days, with each day containing 12 features (air pressure, temperature, humidity a.o.). And in the target array y I have sliding windows of 3 days, trying to predict the next 3 days to each window of 7 days.
But then when I try to fit the model I get an error due to the mismatch in the shape of the X and y arrays:
&lt;denchmark-code&gt;model = Sequential()
model.add(LSTM(4, input_shape=(None, 12)))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')
history = model.fit_generator(generator, epochs=3).history
&lt;/denchmark-code&gt;

ValueError: A target array with shape (1, 3, 12) was passed for an output of shape (None, 1) while using as loss "mean_squared_error". This loss expects targets to have the same shape as the output.
So is there a way to adjust the architecture for the mismatch in the dimensions? Or is there a way to reshape X and y to make them work with this architecture? I tried the late reshaping X into (5000, 7, 12), but this gave also a dimensionality error. Tnx
	</description>
	<comments>
		<comment id='1' author='Nestak2' date='2020-07-16T03:25:22Z'>
		
The reason for the ValueError you encountered is that the model you build outputs a tensor with shape (None, 1) while your data y has a shape (None, 3, 12), but they don't match!
I guess your intension is to build a model with input_shape=(None, 7, 12) &amp; output_shape=(None, 3, 12). The best way is to change the shape of Y to (None, 36), as followed:

&lt;denchmark-code&gt;y=np.reshape(y,(-1,y.shape[-1]*y.shape[-2]))

n_input = 7
generator = TimeseriesGenerator(X, y, length=n_input, batch_size=1)

model = Sequential()
model.add(LSTM(64, input_shape=(7, 12)))
model.add(Dense(Y.shape[-1]))
model.summary()
model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])
history = model.fit_generator(generator, epochs=3).history
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='Nestak2' date='2020-07-16T05:23:29Z'>
		&lt;denchmark-link:https://github.com/Nestak2&gt;@Nestak2&lt;/denchmark-link&gt;

Please refer to &lt;denchmark-link:https://stackoverflow.com/questions/58578374/how-can-i-change-my-data-to-make-it-work-with-loss-mean-squared-error&gt;this link&lt;/denchmark-link&gt;
 with same error and let us know. Thanks!
		</comment>
		<comment id='3' author='Nestak2' date='2020-07-16T09:22:34Z'>
		&lt;denchmark-link:https://github.com/Dynmi&gt;@Dynmi&lt;/denchmark-link&gt;
 Thanks for the suggestion, I found out that I could also use an architecture with max pooling for my problem, e.g. this would work
&lt;denchmark-code&gt;model = Sequential()
model.add(LSTM(4, return_sequences=True, input_shape=(n_input, 12)))
model.add(MaxPool1D(2)) # also AvgPool1D is ok
model.add(Dense(12))
model.compile(loss='mean_squared_error', optimizer='adam')

model.summary()
model.fit(generator, epochs=2)
&lt;/denchmark-code&gt;

Do you have an opinion which of the 2, maxpooling vs. your suggestion, would be a better solution (give more accurate results)?
Somehow I fear to follow your suggestion of turning the shape of y from (None, 3, 12) to (None, 36), because the neural network would lose track of what feature is what, but this is only an intuition of mine and not tested
		</comment>
		<comment id='4' author='Nestak2' date='2020-07-17T03:15:18Z'>
		Hhh, You can try both of them and see which one works better.
After all, Practice is the sole criterion for testing truth.
		</comment>
		<comment id='5' author='Nestak2' date='2020-07-31T04:46:48Z'>
		&lt;denchmark-link:https://github.com/Nestak2&gt;@Nestak2&lt;/denchmark-link&gt;

Please update as per above comment.
		</comment>
		<comment id='6' author='Nestak2' date='2020-08-07T05:21:00Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='7' author='Nestak2' date='2020-08-14T05:27:26Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='8' author='Nestak2' date='2020-08-14T05:27:32Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41422&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41422&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>