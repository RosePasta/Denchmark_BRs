<bug id='35833' author='adomasbaliuka' open_date='2020-01-13T21:16:01Z' closed_time='2020-03-20T08:29:22Z'>
	<summary>Keras Estimator fails on regression task while underlying model works</summary>
	<description>
System information

Have I written custom code: Yes
OS Platform and Distribution: Windows 10
TensorFlow installed from: binary
TensorFlow version: Same issue using tf2.0.0-beta1-cpu
and tf1.14.0-gpu
Python version: 3.6.9
CUDA/cuDNN version: CUDA 10.1.168/cuDNN 7.6.2
GPU model and memory: NVIDIA GeForce RTX 2060, 6GB dedicated memory

Describe the current behavior
A convolutional reggression (last layer has linear activation and one neuron) network built with tf.keras is shown to fit the MNIST dataset (I know that MNIST is a classification task; this is an example) when converted to a dataset.
When the same model is packaged into an estimator using  tf.keras.estimator.model_to_estimator no error messages occur, however the model no longer fits. The loss does not decrease.
I had made a Stackoverflow question about this (&lt;denchmark-link:https://stackoverflow.com/q/59631744/9988487&gt;https://stackoverflow.com/q/59631744/9988487&lt;/denchmark-link&gt;
) with no traction whatsoever. After some more trying to get it to work, I believe it is a bug.
Describe the expected behavior
The keras estimator should have the same behaviour as the underlying model. Change the USE_ESTIMATOR variable to see that the underlying model works.
Code to reproduce the issue
&lt;denchmark-code&gt;# python 3.6. Tested with tensorflow-gpu-1.14 and tensorflow-cpu-2.0
import tensorflow as tf
import numpy as np


def get_model(IM_WIDTH=28, num_color_channels=1):
    """Create a very simple convolutional neural network using a tf.keras Functional Model."""
    input = tf.keras.Input(shape=(IM_WIDTH, IM_WIDTH, num_color_channels))
    x = tf.keras.layers.Conv2D(32, 3, activation='relu')(input)
    x = tf.keras.layers.MaxPooling2D(3)(x)
    x = tf.keras.layers.Conv2D(64, 3, activation='relu')(x)
    x = tf.keras.layers.MaxPooling2D(3)(x)
    x = tf.keras.layers.Flatten()(x)
    x = tf.keras.layers.Dense(64, activation='relu')(x)
    output = tf.keras.layers.Dense(1, activation='linear')(x)
    model = tf.keras.Model(inputs=[input], outputs=[output])
    model.compile(optimizer='adam', loss="mae",
                  metrics=['mae'])
    model.summary()
    return model


def input_fun(train=True):
    """Load MNIST and return the training or test set as a tf.data.Dataset; Valid input function for tf.estimator"""
    (train_images, train_labels), (eval_images, eval_labels) = tf.keras.datasets.mnist.load_data()
    train_images = train_images.reshape((60_000, 28, 28, 1)).astype(np.float32) / 255.
    eval_images = eval_images.reshape((10_000, 28, 28, 1)).astype(np.float32) / 255.
    # train_labels = train_labels.astype(np.float32)  # these two lines don't affect behaviour.
    # eval_labels = eval_labels.astype(np.float32)
    # For a neural network with one neuron in the final layer, it doesn't seem to matter if target data is float or int.

    if train:
        dataset = tf.data.Dataset.from_tensor_slices((train_images, train_labels))
        dataset = dataset.shuffle(buffer_size=100).repeat(None).batch(32).prefetch(1)
    else:
        dataset = tf.data.Dataset.from_tensor_slices((eval_images, eval_labels))
        dataset = dataset.batch(32).prefetch(1)  # note: prefetching does not affect behaviour

    return dataset


model = get_model()
train_input_fn = lambda: input_fun(train=True)
eval_input_fn = lambda: input_fun(train=False)

NUM_EPOCHS, STEPS_PER_EPOCH = 4, 1875  # 1875 = number_of_train_images(=60.000)  /  batch_size(=32)
USE_ESTIMATOR = False  # change this to compare model/estimator. Estimator performs much worse for no apparent reason
if USE_ESTIMATOR:
    estimator = tf.keras.estimator.model_to_estimator(
        keras_model=model, model_dir="model_directory",
        config=tf.estimator.RunConfig(save_checkpoints_steps=200, save_summary_steps=200))

    train_spec = tf.estimator.TrainSpec(input_fn=train_input_fn, max_steps=STEPS_PER_EPOCH * NUM_EPOCHS)
    eval_spec = tf.estimator.EvalSpec(input_fn=eval_input_fn, throttle_secs=0)

    tf.estimator.train_and_evaluate(estimator, train_spec, eval_spec)
    print("Training complete. Evaluating Estimator:")
    print(estimator.evaluate(eval_input_fn))
    # final train loss with estimator: ~2.5 (mean abs. error).
else:
    dataset = train_input_fn()
    model.fit(dataset, steps_per_epoch=STEPS_PER_EPOCH, epochs=NUM_EPOCHS)
    print("Training complete. Evaluating Keras model:")
    print(model.evaluate(eval_input_fn()))
    # final train loss with Keras model: ~0.4 (mean abs. error).
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='adomasbaliuka' date='2020-01-14T13:04:51Z'>
		&lt;denchmark-link:https://github.com/adomasbaliuka&gt;@adomasbaliuka&lt;/denchmark-link&gt;
,
I tried to reproduce the issue and did not observe much difference in the mean absolute error. Please check the Gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/1c5ca231d078e9cba55269e54541cd5a/35833.ipynb&gt;here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='adomasbaliuka' date='2020-01-14T16:40:55Z'>
		&lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;

I confirm that there is not much difference when using the gist you provided (which uses tensorflow v2.1). The most likely explenation is that this issue is solved in version 2.1.
Have you tried to reproduce the issue with tf-1.x ? It would be nice to know if the issue lies with older versions of tensorflow or with the specific setup on my machine.
		</comment>
		<comment id='3' author='adomasbaliuka' date='2020-01-17T14:20:55Z'>
		Was able to reproduce the issue with TF 1.15. Please find the Gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/c44ac3fa99c62342ec0546eaa5ee65fc/35833_1-15.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='adomasbaliuka' date='2020-03-18T23:37:03Z'>
		&lt;denchmark-link:https://github.com/adomasbaliuka&gt;@adomasbaliuka&lt;/denchmark-link&gt;
 I agree with you that there is a significant difference between results from the model and the estimator if we use . I think there may not be any more updates to  branch. If there is any security related issues, then only there will be updates to  branch.
I ran your code with tf-nightly. I don't see any significant difference between output from model and estimator.
The following is the output from the model (USE_ESTIMATOR = False)
&lt;denchmark-code&gt;Training complete. Evaluating Keras model:
313/313 [==============================] - 2s 7ms/step - loss: 0.4018 - mae: 0.4021
[0.4018059968948364, 0.4020615816116333]
&lt;/denchmark-code&gt;

The following is the output from the estimator (USE_ESTIMATOR = True)
&lt;denchmark-code&gt;Training complete. Evaluating Estimator:
INFO:tensorflow:Calling model_fn.
INFO:tensorflow:Done calling model_fn.
INFO:tensorflow:Starting evaluation at 2020-03-18T23:15:15Z
INFO:tensorflow:Graph was finalized.
INFO:tensorflow:Restoring parameters from model_directory/model.ckpt-7500
INFO:tensorflow:Running local_init_op.
INFO:tensorflow:Done running local_init_op.
INFO:tensorflow:Inference Time : 2.14818s
INFO:tensorflow:Finished evaluation at 2020-03-18-23:15:17
INFO:tensorflow:Saving dict for global step 7500: global_step = 7500, loss = 0.39566746, mae = 0.39566746
INFO:tensorflow:Saving 'checkpoint_path' summary for global step 7500: model_directory/model.ckpt-7500
{'loss': 0.39566746, 'mae': 0.39566746, 'global_step': 7500}
&lt;/denchmark-code&gt;

Please close the issue as this was resolved in the recent TF2.x versions. Thanks!
		</comment>
		<comment id='5' author='adomasbaliuka' date='2020-03-20T08:29:24Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35833&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35833&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>