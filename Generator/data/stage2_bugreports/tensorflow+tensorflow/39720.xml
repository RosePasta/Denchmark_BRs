<bug id='39720' author='wwwind' open_date='2020-05-20T14:49:40Z' closed_time='2020-06-11T05:54:38Z'>
	<summary>TFLite, Model with Conv2DTranspose fails to convert, fully quantization, int8</summary>
	<description>
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux
TensorFlow installed from (source or binary): tf-nightly
TensorFlow version (or github SHA if from source): tf-nightly

Command used to run the converter or code if youâ€™re using the Python API
If possible, please share a link to Colab/Jupyter/any notebook.
This issue is very similar to the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/39718&gt;issue&lt;/denchmark-link&gt;
, but
the problematic layer is Conv2DTranspose, so it is different model here.
I tested models with other layers and all are fine, except this one and the issue logged above, separately.
&lt;denchmark-link:https://colab.research.google.com/drive/1g8wjs5D3N9blNpWYMIQ8R_AipZASUKH8?usp=sharing&gt;https://colab.research.google.com/drive/1g8wjs5D3N9blNpWYMIQ8R_AipZASUKH8?usp=sharing&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf

input_size = [5, 5, 2]
kernel_size = [3, 3, 6]
stride = [2, 2]

input_0 = tf.keras.layers.Input(shape=input_size)
layer_0 = tf.keras.layers.Conv2DTranspose(
            filters=kernel_size[-1],
            kernel_size=kernel_size[0:2],
            strides=stride,
            activation=None,
            use_bias=False,
            name = "transpose_conv"
        )(input_0)
model = tf.keras.models.Model(inputs=[input_0], outputs=[layer_0])
model.summary()

keras_layer = [
  layer for layer in model.layers if layer.name == "transpose_conv"
][0]
keras_layer.set_weights(
            [
                np.random.rand(
                    kernel_size[0],
                    kernel_size[1],
                    kernel_size[2],
                    input_size[2],
                ).astype(np.float32)
            ]
        )

num_calib = 1000
def _get_calib_data_func():
  def representative_data_gen():
    for _ in range(num_calib):
      yield [
        np.random.rand(
          1, input_size[0], input_size[1], input_size[2],
        ).astype(np.float32)
      ]

  return representative_data_gen

converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.representative_dataset = _get_calib_data_func()

converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8]
tflite_model_INT8 = converter.convert()
&lt;/denchmark-code&gt;

The output from the converter invocation
&lt;denchmark-code&gt;RuntimeError                              Traceback (most recent call last)

&lt;ipython-input-18-717edec90ae0&gt; in &lt;module&gt;()
      3 
      4 converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8]
----&gt; 5 tflite_model_INT8 = converter.convert()

3 frames

/usr/local/lib/python3.6/dist-packages/tensorflow/lite/python/optimize/calibrator.py in calibrate_and_quantize(self, dataset_gen, input_type, output_type, allow_float, resize_input)
     91     return self._calibrator.QuantizeModel(
     92         np.dtype(input_type.as_numpy_dtype()).num,
---&gt; 93         np.dtype(output_type.as_numpy_dtype()).num, allow_float)
     94 
     95   def calibrate_and_quantize_single(self,

RuntimeError: Max and min for dynamic tensors should be recorded during calibration: Failed for tensor functional_5/transpose_conv/Shape
Empty min/max for tensor functional_5/transpose_conv/Shape
&lt;/denchmark-code&gt;

Also, please include a link to the saved model or GraphDef
&lt;denchmark-code&gt;# Put link here or attach to the issue.
&lt;/denchmark-code&gt;

Failure details
If the conversion is successful, but the generated model is wrong,
state what is wrong:

Producing wrong results and/or decrease in accuracy
Producing correct results, but the model is slower than expected (model generated from old converter)

RNN conversion support
If converting TF RNN to TFLite fused RNN ops, please prefix [RNN] in the title.
Any other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='wwwind' date='2020-05-20T18:32:06Z'>
		I am able to replicate this issue, please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/84df698f70c2446228fb50f1914c5a38/untitled194.ipynb&gt;gist here&lt;/denchmark-link&gt;
 . Thanks!
		</comment>
		<comment id='2' author='wwwind' date='2020-05-26T10:09:06Z'>
		I am also experiencing a similar problem with a similar model.
		</comment>
		<comment id='3' author='wwwind' date='2020-06-11T05:54:38Z'>
		The issue seems to be resolved with the latest tf-nightly ('2.3.0-dev20200610') and TF 2.2.0. Feel free to re-open it if you still face this issue.
		</comment>
		<comment id='4' author='wwwind' date='2020-06-11T05:54:40Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39720&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39720&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>