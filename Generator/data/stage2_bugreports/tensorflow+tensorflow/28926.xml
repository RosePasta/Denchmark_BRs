<bug id='28926' author='vizero1' open_date='2019-05-22T11:18:31Z' closed_time='2020-01-15T07:06:29Z'>
	<summary>Build tensorflow lite for aarch64: Error in script download_dependencies.sh and build_aarch64_lib.sh</summary>
	<description>
System information

OS Platform and Distribution: Google coral board aarch64
TensorFlow lite installed from source
TensorFlow version: master branch

If I run the script ./tensorflow/lite/tools/make/download_dependencies.sh  from the root directory of the repo I am getting following error:
downloading http://mirror.tensorflow.org/bitbucket.org/eigen/eigen/get/a0d250e79c79.tar.gz
gzip: stdin: not in gzip format
tar: Child returned status 1
tar: Error is not recoverable: exiting now
2 days ago I had not the problem to run the script download_dependencies.sh.
There was some clean up of dependencies for tensorflow lite at least if I check the commit messages of the master branch.
Could it have something to do with that?
Thanks in advance!
	</description>
	<comments>
		<comment id='1' author='vizero1' date='2019-05-22T12:02:52Z'>
		See:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/69aa57b4158da0f09ca732ee302ef453fa6b3209#diff-455a4c7f8e22d7c514e8c2caa27506c5&gt;69aa57b#diff-455a4c7f8e22d7c514e8c2caa27506c5&lt;/denchmark-link&gt;

There was an update to the artifact it tries to download.  Tried to download both with wget and  the old artifact is available but the new one can't be downloaded.
		</comment>
		<comment id='2' author='vizero1' date='2019-05-23T11:52:43Z'>
		Could fix that problem with following change:
In tensorflow/lite/tools/make/download_dependencies.sh script I changed the EIGEN_URL definition in line 32 to use https instead of http
EIGEN_URL="$(grep -o 'https.*bitbucket.org/eigen/eigen/get/.*tar\.gz' "${BZL_FILE_PATH}" | grep -v mirror.bazel | head -n1)"
But now I have a problem in compiling tflite.
First I got the error described in &lt;denchmark-link:https://stackoverflow.com/questions/56055359/tensorflow-lite-arm64-error-cannot-convert-const-int8x8-t&gt;here&lt;/denchmark-link&gt;
. After using the suggested changes (disabling NNAPI, adding flag -flax-vector-conversions for CXXFLAGS and add  "-lrt" to tensorflow/lite/tools/make/targets/aarch64_makefile.inc) I get the following error:
In file included from ./tensorflow/lite/kernels/internal/optimized/depthwiseconv_uint8.h:23:0, from ./tensorflow/lite/kernels/internal/optimized/depthwiseconv_multithread.h:21, from tensorflow/lite/kernels/depthwise_conv.cc:28: ./tensorflow/lite/kernels/internal/optimized/depthwiseconv_uint8_3x3_filter.h: In static member function 'static void tflite::optimized_ops::depthwise_conv::KernelMacroBlock&lt;(tflite::DepthwiseConvImplementation)3, (tflite::DepthwiseConvDepthMultiplication)0, 2&gt;::Run(const int8*, const int8*, const int32*, uint8*, const tflite::optimized_ops::depthwise_conv::DepthwiseConvDotProdParams*)': **./tensorflow/lite/kernels/internal/optimized/depthwiseconv_uint8_3x3_filter.h:8255:3: error: x29 cannot be used in asm here } ^ ./tensorflow/lite/kernels/internal/optimized/depthwiseconv_uint8_3x3_filter.h:8255:3: error: x29 cannot be used in asm here** In file included from ./tensorflow/lite/kernels/cpu_backend_gemm.h:22:0, from ./tensorflow/lite/kernels/internal/optimized/optimized_ops.h:42, from tensorflow/lite/kernels/dequantize.cc:24: ./tensorflow/lite/kernels/cpu_backend_gemm_custom_gemv.h: In static member function 'static void tflite::cpu_backend_gemm::detail::CustomGemvImpl&lt;LhsScalar, RhsScalar, int, DstScalar, quantization_flavor&gt;::Run(const tflite::cpu_backend_gemm::MatrixParams&lt;LhsScalar&gt;&amp;, const LhsScalar*, const tflite::cpu_backend_gemm::MatrixParams&lt;RhsScalar&gt;&amp;, const RhsScalar*, const tflite::cpu_backend_gemm::MatrixParams&lt;DstScalar&gt;&amp;, DstScalar*, const tflite::cpu_backend_gemm::GemmParams&lt;int, DstScalar, quantization_flavor&gt;&amp;, int, int)': ./tensorflow/lite/kernels/cpu_backend_gemm_custom_gemv.h:485:13: warning: attributes at the beginning of statement are ignored [-Wattributes] [[clang::fallthrough]]; ^ ./tensorflow/lite/kernels/cpu_backend_gemm_custom_gemv.h:488:13: warning: attributes at the beginning of statement are ignored [-Wattributes] [[clang::fallthrough]]; ^ ./tensorflow/lite/kernels/cpu_backend_gemm_custom_gemv.h:491:13: warning: attributes at the beginning of statement are ignored [-Wattributes] [[clang::fallthrough]]; ^ ./tensorflow/lite/kernels/cpu_backend_gemm_custom_gemv.h:494:13: warning: attributes at the beginning of statement are ignored [-Wattributes] [[clang::fallthrough]]; ^ ./tensorflow/lite/kernels/cpu_backend_gemm_custom_gemv.h:497:13: warning: attributes at the beginning of statement are ignored [-Wattributes] [[clang::fallthrough]]; ^ ./tensorflow/lite/kernels/cpu_backend_gemm_custom_gemv.h:500:13: warning: attributes at the beginning of statement are ignored [-Wattributes] [[clang::fallthrough]]; ^ tensorflow/lite/tools/make/Makefile:241: recipe for target '/usr/src/app/tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/obj/tensorflow/lite/kernels/depthwise_conv.o' failed make: *** [/usr/src/app/tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/obj/tensorflow/lite/kernels/depthwise_conv.o] Error 1 make: *** Waiting for unfinished jobs....
Tried to google what the error message "error: x29 cannot be used in asm here" means and how to resolve it but could not find anything.
Need to mention that I am trying to build tflite in a docker container running on my google coral dev board.
		</comment>
		<comment id='3' author='vizero1' date='2019-05-26T14:22:39Z'>
		
error: x29 cannot be used in asm here

Experiencing the same issue while compiling TFLite natively on ARMv8-A (after trying &lt;denchmark-link:https://stackoverflow.com/questions/56055359/tensorflow-lite-arm64-error-cannot-convert-const-int8x8-t&gt;this&lt;/denchmark-link&gt;
 solution as well).
		</comment>
		<comment id='4' author='vizero1' date='2019-05-26T20:32:08Z'>
		Same issue compiling for ARM6
		</comment>
		<comment id='5' author='vizero1' date='2019-05-27T07:00:14Z'>
		same issue for me. My platform is nvidia jetson tx2. I changed the eigen url as this &lt;denchmark-link:url&gt;https://github.com/tensorflow/tensorflow/commit/69aa57b4158da0f09ca732ee302ef453fa6b3209#diff-455a4c7f8e22d7c514e8c2caa27506c5&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='vizero1' date='2019-05-28T13:13:02Z'>
		Same issue. After doing the steps OP talked about I get the same "error: x29 cannot be used in asm here". Using latest tensorflow on ubuntu 16.04.
edit: I got it to work by using bazel instead (note you have point to python3 when doing ./configure):
bazel build //tensorflow/lite:libtensorflowLite.so --config=android_arm --cpu=arm64-v8a  --cxxopt="-std=c++11"
		</comment>
		<comment id='7' author='vizero1' date='2019-05-31T10:32:05Z'>
		Same issue on Raspberry Pi3 B+
		</comment>
		<comment id='8' author='vizero1' date='2019-06-03T18:51:22Z'>
		Same issue on Raspberry Pi 3B
		</comment>
		<comment id='9' author='vizero1' date='2019-06-05T03:22:36Z'>
		download_dependencies.sh completed successfully.
		</comment>
		<comment id='10' author='vizero1' date='2019-06-05T11:26:05Z'>
		
download_dependencies.sh completed successfully.

But can you build it afterwards for arm?
		</comment>
		<comment id='11' author='vizero1' date='2019-06-05T11:35:05Z'>
		&lt;denchmark-link:https://github.com/vizero1&gt;@vizero1&lt;/denchmark-link&gt;
 no, there is an error which is X 29 or something like that can not be used
		</comment>
		<comment id='12' author='vizero1' date='2019-06-06T01:14:58Z'>
		any updates on this issue?
		</comment>
		<comment id='13' author='vizero1' date='2019-06-07T14:54:10Z'>
		Hi, I am having the same error, I found that cURL command is having
 because &lt;denchmark-link:http://mirror.tensorflow.org/&gt;http://mirror.tensorflow.org/&lt;/denchmark-link&gt;
 is not having .
Just for information that tensorflow repo was set to commit &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/f5ce1c00d4397875ff3d706881bd46430f4a9667&gt;f5ce1c0&lt;/denchmark-link&gt;
 (HEAD -&gt; master, tag: v1.14.0-rc0)
		</comment>
		<comment id='14' author='vizero1' date='2019-06-07T15:09:29Z'>
		Oh..there is a PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/29017&gt;#29017&lt;/denchmark-link&gt;
 to fix this issue. &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/29030&gt;#29030&lt;/denchmark-link&gt;
 is also the same as this one.
		</comment>
		<comment id='15' author='vizero1' date='2019-06-08T14:42:07Z'>
		&lt;denchmark-link:https://github.com/aakbar5&gt;@aakbar5&lt;/denchmark-link&gt;
 the more significant problem is building tensorflow lite for aarch64. If you run the script you get the following error "error: x29 cannot be used in asm here"
We are waiting for a fix for that problem.
		</comment>
		<comment id='16' author='vizero1' date='2019-06-10T01:52:15Z'>
		&lt;denchmark-link:https://github.com/vizero1&gt;@vizero1&lt;/denchmark-link&gt;
 Here is a possible solution and I tried it on my jetson tx2 board. It worked. In the arm architecture, it seems the x29 register is used as the frame pointer register by default. By adding the '-fomit-frame-pointer' to the CXXFLAGS in the Makefile, we can tell the compiler the x29 register can be used without worrying about impacting the frame pointer.
		</comment>
		<comment id='17' author='vizero1' date='2019-06-10T16:19:11Z'>
		Don't know if this is related.. trying to build v1.13.1 on ubuntu raspberry pi 2 with
&lt;denchmark-code&gt;CI_DOCKER_EXTRA_PARAMS="-e CI_BUILD_PYTHON=python3 -e CROSSTOOL_PYTHON_INCLUDE_PATH=/usr/include/python3.6" tensorflow/tools/ci_build/ci_build.sh PI-PYTHON3 tensorflow/tools/ci_build/pi/build_raspberry_pi.sh
&lt;/denchmark-code&gt;

but getting this error
&lt;denchmark-code&gt;...
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Reading package lists...
Building dependency tree...
Reading state information...
Package ffmpeg is not available, but is referred to by another package.
This may mean that the package is missing, has been obsoleted, or
is only available from another source

E: Unable to locate package clang-format-3.8
E: Couldn't find any package by regex 'clang-format-3.8'
E: Package 'ffmpeg' has no installation candidate
The command '/bin/sh -c /install/install_deb_packages.sh' returned a non-zero code: 100
ERROR: docker build failed. Dockerfile is at /home/ubuntu/apps/tensorflow/tensorflow/tools/ci_build/Dockerfile.pi-python3
&lt;/denchmark-code&gt;

		</comment>
		<comment id='18' author='vizero1' date='2019-06-11T09:32:49Z'>
		
@vizero1 Here is a possible solution and I tried it on my jetson tx2 board. It worked. In the arm architecture, it seems the x29 register is used as the frame pointer register by default. By adding the '-fomit-frame-pointer' to the CXXFLAGS in the Makefile, we can tell the compiler the x29 register can be used without worrying about impacting the frame pointer.

&lt;denchmark-link:https://github.com/dongxiao92&gt;@dongxiao92&lt;/denchmark-link&gt;
 Yes that resolves the "x29 register" error but now I am getting the following error:
&lt;denchmark-code&gt;
&gt; /usr/src/app/tensorflow/lite/tools/make/gen/aarch64_armv8-a/lib/libtensorflow-lite.a(while.o): In function `tflite::ops::custom::while_kernel::Init(TfLiteContext*, char const*, unsigned long)':
&gt; while.cc:(.text+0x1d88): undefined reference to `flatbuffers::ClassicLocale::instance_'
&gt; while.cc:(.text+0x1d94): undefined reference to `flatbuffers::ClassicLocale::instance_'
&gt; while.cc:(.text+0x1df8): undefined reference to `flatbuffers::ClassicLocale::instance_'
&gt; while.cc:(.text+0x1e08): undefined reference to `flatbuffers::ClassicLocale::instance_'
&gt; /usr/src/app/tensorflow/lite/tools/make/gen/aarch64_armv8-a/lib/libtensorflow-lite.a(audio_spectrogram.o): In function `tflite::ops::custom::audio_spectrogram::Init(TfLiteContext*, char const*, unsigned long)':
&gt; audio_spectrogram.cc:(.text+0x1070): undefined reference to `flatbuffers::ClassicLocale::instance_'
&gt; /usr/src/app/tensorflow/lite/tools/make/gen/aarch64_armv8-a/lib/libtensorflow-lite.a(audio_spectrogram.o):audio_spectrogram.cc:(.text+0x107c): more undefined references to `flatbuffers::ClassicLocale::instance_' follow
&gt; collect2: error: ld returned 1 exit status

&lt;/denchmark-code&gt;

Someone has a solution for that? Found following issues  &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/26731&gt;#26731&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/28863&gt;#28863&lt;/denchmark-link&gt;
 related to that.
		</comment>
		<comment id='19' author='vizero1' date='2019-06-12T05:25:09Z'>
		Hi &lt;denchmark-link:https://github.com/dongxiao92&gt;@dongxiao92&lt;/denchmark-link&gt;

Did you solve the flatbuffers issue.
I am also getting similar error, Please let me know once you resolve the issue.
Thanks inadvance.
		</comment>
		<comment id='20' author='vizero1' date='2019-06-12T08:22:12Z'>
		&lt;denchmark-link:https://github.com/dongxiao92&gt;@dongxiao92&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/thotaram&gt;@thotaram&lt;/denchmark-link&gt;
, To solve the flatbuffer, I did the following





Once flatbuffers is installed, Append -lflatbuffers to the LIBS in tensorflow/lite/tools/make/Makefile.
		</comment>
		<comment id='21' author='vizero1' date='2019-06-12T09:15:37Z'>
		&lt;denchmark-link:https://github.com/aakbar5&gt;@aakbar5&lt;/denchmark-link&gt;

Hi, I have followed your inputs still am getting the similar issue.
while.cc:(.text+0x1d04): undefined reference to flatbuffers::ClassicLocale::instance_' while.cc:(.text+0x1d18): undefined reference to flatbuffers::ClassicLocale::instance_'
while.cc:(.text+0x1d6c): undefined reference to flatbuffers::ClassicLocale::instance_' while.cc:(.text+0x1d78): undefined reference to flatbuffers::ClassicLocale::instance_'
Have you resolved Flatbuffers issue using above commands.
Please help me still am missing anything.
		</comment>
		<comment id='22' author='vizero1' date='2019-06-12T10:39:32Z'>
		&lt;denchmark-link:https://github.com/thotaram&gt;@thotaram&lt;/denchmark-link&gt;
,
Could you confirm your  variable? Mine looks like .
		</comment>
		<comment id='23' author='vizero1' date='2019-06-12T11:34:49Z'>
		&lt;denchmark-link:https://github.com/aakbar5&gt;@aakbar5&lt;/denchmark-link&gt;

Hi,
Thank your for your quick reply.
For me it is like
LDOPTS := -L/usr/lib
I changed LDOPTS as per your suggestions.
LDOPTS := -L/usr/local/lib -L/usr/lib
Still am getting the error.
My Makefile changes are
TARGET := aarch64
TARGET_ARCH := armv8-a
CXXFLAGS := -O3 -DNDEBUG -fPIC -flax-vector-conversions -fomit-frame-pointer
LIBS := 
-lstdc++ 
-lflatbuffers \
Can you please share your Makefile to resolve this problem.
		</comment>
		<comment id='24' author='vizero1' date='2019-06-12T11:37:59Z'>
		&lt;denchmark-link:https://github.com/aakbar5&gt;@aakbar5&lt;/denchmark-link&gt;

In Makefile i could not find LDOPTS where it is using.
Only LDOPTS option is there but it is not using in Makefile.
Can you please share where LDOPTS is used in Makefile.
		</comment>
		<comment id='25' author='vizero1' date='2019-06-12T11:57:23Z'>
		
In Makefile i could not find LDOPTS where it is using.
Only LDOPTS option is there but it is not using in Makefile.
Can you please share where LDOPTS is used in Makefile.

If I recall correctly, I was using HEAD revision of the Tensorflow master branch. Moreover I hope you are doing native compilation not cross compilation.
		</comment>
		<comment id='26' author='vizero1' date='2019-06-12T12:05:34Z'>
		I am using tensorflow version 1.13.1
While compiling the sources i can see the below command(aarch64-linux-gnu-g++)
aarch64-linux-gnu-g++ O3 -DNDEBUG -fPIC -flax-vector-conversions -fomit-frame-pointer  -std=c++11 -march=armv8-a -funsafe-math-optimizations -ftree-vectorize -fPIC
Below link i have followed to cross compile tensorflow lite.
&lt;denchmark-link:https://www.tensorflow.org/lite/guide/build_arm64&gt;https://www.tensorflow.org/lite/guide/build_arm64&lt;/denchmark-link&gt;

Please give your inputs whether am doing right procedure or not?
		</comment>
		<comment id='27' author='vizero1' date='2019-06-12T12:12:34Z'>
		&lt;denchmark-link:https://github.com/aakbar5&gt;@aakbar5&lt;/denchmark-link&gt;
 Compiled flatbuffers and added it to the libs in Makefile.
Changed LDOPTS to -L/usr/local/lib -L/usr/lib .
&lt;denchmark-code&gt;aarch64-linux-gnu-g++ -O3 -DNDEBUG -fPIC -flax-vector-conversions  --std=c++11 -march=armv8-a -funsafe-math-optimizations -ftree-vectorize -flax-vector-conversions -fomit-frame-pointer -fPIC -I. -I/usr/src/app/tensorflow/tensorflow/lite/tools/make/../../../../../ -I/usr/src/app/tensorflow/tensorflow/lite/tools/make/../../../../../../ -I/usr/src/app/tensorflow/tensorflow/lite/tools/make/downloads/ -I/usr/src/app/tensorflow/tensorflow/lite/tools/make/downloads/eigen -I/usr/src/app/tensorflow/tensorflow/lite/tools/make/downloads/absl -I/usr/src/app/tensorflow/tensorflow/lite/tools/make/downloads/gemmlowp -I/usr/src/app/tensorflow/tensorflow/lite/tools/make/downloads/neon_2_sse -I/usr/src/app/tensorflow/tensorflow/lite/tools/make/downloads/farmhash/src -I/usr/src/app/tensorflow/tensorflow/lite/tools/make/downloads/flatbuffers/include -I -I/usr/local/include \
-o /usr/src/app/tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/bin/minimal /usr/src/app/tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/obj/tensorflow/lite/examples/minimal/minimal.o \
 /usr/src/app/tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/lib/libtensorflow-lite.a -Wl,--no-export-dynamic -Wl,--exclude-libs,ALL -Wl,--gc-sections -Wl,--as-needed -lrt -lstdc++ -lpthread -lm -ldl -lrt
&lt;/denchmark-code&gt;

That is the command it uses for compilation. Still have the flatbuffers error :/
Using head  of tensorflow master branch.
		</comment>
		<comment id='28' author='vizero1' date='2019-06-12T12:23:53Z'>
		I could not understand the below your point.
Still have the flatbuffers error :/
You are also facing the faltbuffers issue, or issue is resolved by changing Makefile.
Can you please send the tensorflow master branch link.
		</comment>
		<comment id='29' author='vizero1' date='2019-06-12T12:36:30Z'>
		&lt;denchmark-link:https://github.com/aakbar5&gt;@aakbar5&lt;/denchmark-link&gt;

/tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/lib/libtensorflow-lite.a -Wl,--no-export-dynamic -Wl,--exclude-libs,ALL -Wl,--gc-sections -Wl,--as-needed -lrt -lstdc++ -lpthread -lm -ldl
In the above statement i could not see the "-lflatbuffers" library. Although it is there in LIBS in Makefile.
		</comment>
		<comment id='30' author='vizero1' date='2019-06-12T13:34:22Z'>
		&lt;denchmark-link:https://github.com/thotaram&gt;@thotaram&lt;/denchmark-link&gt;

Now it is running for me. Changed in the aarch64_makefile.inc the LIBS part and added -lflatbuffers.
&lt;denchmark-code&gt;  LIBS := \
    -lflatbuffers \
    -lstdc++ \
    -lpthread \
    -lm \
    -ldl \
    -lrt
&lt;/denchmark-code&gt;

		</comment>
		<comment id='31' author='vizero1' date='2019-06-12T23:27:50Z'>
		&lt;denchmark-link:https://github.com/aakbar5&gt;@aakbar5&lt;/denchmark-link&gt;
 For some reason the linker is not able to use the flatbuffer library. It gives the following error:
/usr/lib/gcc-cross/aarch64-linux-gnu/7/../../../../aarch64-linux-gnu/bin/ld: skipping incompatible //usr/local/lib/libflatbuffers.a when searching for -lflatbuffers
/usr/lib/gcc-cross/aarch64-linux-gnu/7/../../../../aarch64-linux-gnu/bin/ld: cannot find -lflatbuffers
Would it make a difference if you were trying to cross compile instead of natively compiling the tflite for ARM?
		</comment>
		<comment id='32' author='vizero1' date='2019-06-13T05:10:54Z'>
		&lt;denchmark-link:https://github.com/vizero1&gt;@vizero1&lt;/denchmark-link&gt;

Included -lfaltbuffers in aarch64_makefile.inc file LIBS part.
Still am getting the below error.
tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/lib/libtensorflow-lite.a -Wl,--no-export-dynamic -Wl,--exclude-libs,ALL -Wl,--gc-sections -Wl,--as-needed -lrt -lflatbuffers -lstdc++ -lpthread -lm -ldl -lrt
/usr/lib/gcc-cross/aarch64-linux-gnu/5/../../../../aarch64-linux-gnu/bin/ld: skipping incompatible //usr/local/lib/libflatbuffers.a when searching for -lflatbuffers
/usr/lib/gcc-cross/aarch64-linux-gnu/5/../../../../aarch64-linux-gnu/bin/ld: cannot find -lflatbuffers
collect2: error: ld returned 1 exit status
		</comment>
		<comment id='33' author='vizero1' date='2019-06-13T08:50:23Z'>
		
@aakbar5
/tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/lib/libtensorflow-lite.a -Wl,--no-export-dynamic -Wl,--exclude-libs,ALL -Wl,--gc-sections -Wl,--as-needed -lrt -lstdc++ -lpthread -lm -ldl
In the above statement i could not see the "-lflatbuffers" library. Although it is there in LIBS in Makefile.

Have you tried your luck by adding -lflatbuffers in the above command?
		</comment>
		<comment id='34' author='vizero1' date='2019-06-13T08:52:59Z'>
		
@aakbar5 For some reason the linker is not able to use the flatbuffer library. It gives the following error:
/usr/lib/gcc-cross/aarch64-linux-gnu/7/../../../../aarch64-linux-gnu/bin/ld: skipping incompatible //usr/local/lib/libflatbuffers.a when searching for -lflatbuffers
/usr/lib/gcc-cross/aarch64-linux-gnu/7/../../../../aarch64-linux-gnu/bin/ld: cannot find -lflatbuffers
Would it make a difference if you were trying to cross compile instead of natively compiling the tflite for ARM?

Yes, it's matter a lot as you need to make sure that you are not exposing libs and headers of your host machine for cross-compilation. For example there are a lot of variables in the build system which are just assuming that /usr/lib or /usr/include is having correct libs/headers which won't be case for cross-compilation.
		</comment>
		<comment id='35' author='vizero1' date='2019-06-13T09:04:35Z'>
		&lt;denchmark-link:https://github.com/aakbar5&gt;@aakbar5&lt;/denchmark-link&gt;

Have you tried your luck by adding -lflatbuffers in the above command?
I included -lfaltbuffers in aarch64_makefile.inc file. Now it showing as below
tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/lib/benchmark-lib.a -Wl,--no-export-dynamic -Wl,--exclude-libs,ALL -Wl,--gc-sections -Wl,--as-needed -lrt -lflatbuffers -lstdc++ -lpthread -lm -ldl -lrt
Still getting the error after adding this -lfaltbuffers also. Please see the below error.
/usr/lib/gcc-cross/aarch64-linux-gnu/5/../../../../aarch64-linux-gnu/bin/ld: skipping incompatible //usr/local/lib/libflatbuffers.a when searching for -lflatbuffers
/usr/lib/gcc-cross/aarch64-linux-gnu/5/../../../../aarch64-linux-gnu/bin/ld: cannot find -lflatbuffers
		</comment>
		<comment id='36' author='vizero1' date='2019-06-13T09:19:08Z'>
		
@aakbar5
Have you tried your luck by adding -lflatbuffers in the above command?
I included -lfaltbuffers in aarch64_makefile.inc file. Now it showing as below
tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/lib/benchmark-lib.a -Wl,--no-export-dynamic -Wl,--exclude-libs,ALL -Wl,--gc-sections -Wl,--as-needed -lrt -lflatbuffers -lstdc++ -lpthread -lm -ldl -lrt
Still getting the error after adding this -lfaltbuffers also. Please see the below error.
/usr/lib/gcc-cross/aarch64-linux-gnu/5/../../../../aarch64-linux-gnu/bin/ld: skipping incompatible //usr/local/lib/libflatbuffers.a when searching for -lflatbuffers
/usr/lib/gcc-cross/aarch64-linux-gnu/5/../../../../aarch64-linux-gnu/bin/ld: cannot find -lflatbuffers

&lt;denchmark-link:https://github.com/thotaram&gt;@thotaram&lt;/denchmark-link&gt;
, Are you sure that flatbuffers is in /usr/local/lib/ because that's where ld is looking for. However make sure that your flatbuffers lib is built with the correct toolchain.
Are you sure that you are not mixing libraries of different toolchains? I am thinking about this due to skipping incompatible message.
		</comment>
		<comment id='37' author='vizero1' date='2019-06-13T09:37:16Z'>
		Below is my flatbuffer library.
-rwxr-xr-x 1 root root 4897132 Jun  6 10:34 /usr/local/lib/libflatbuffers.a
As per your inputs i compiled the flatbuffers source code.
cmake -G "Unix Makefiles"
make
make install
Please let me know still am missing anything.
		</comment>
		<comment id='38' author='vizero1' date='2019-06-13T10:15:36Z'>
		&lt;denchmark-link:https://github.com/aakbar5&gt;@aakbar5&lt;/denchmark-link&gt;

Hi,
Skipping incompatible issue is not coming now. Getting the below error.
opt/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu/bin/../lib/gcc/aarch64-linux-gnu/7.4.1/../../../../aarch64-linux-gnu/bin/ld: cannot find -lflatbuffers
collect2: error: ld returned 1 exit status
tensorflow/lite/tools/make/Makefile:269: recipe for target '/home/aiiec/ARMNN/TF_lite_latest/tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/bin/minimal' failed
make: *** [/home/xxxx/ARMNN/TF_lite_latest/tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/bin/minimal] Error 1
make: *** Waiting for unfinished jobs....
aarch64-linux-gnu-ar: creating /home/xxxx/ARMNN/TF_lite_latest/tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/lib/benchmark-lib.a
Can you please suggest how to resolve it.
		</comment>
		<comment id='39' author='vizero1' date='2019-06-14T06:01:37Z'>
		&lt;denchmark-link:https://github.com/aakbar5&gt;@aakbar5&lt;/denchmark-link&gt;

Hi,
Can you please share cmake command to cross compile the Flatbuffers source code for ARM64
Thanks andvance.
		</comment>
		<comment id='40' author='vizero1' date='2019-06-16T10:25:13Z'>
		Hi ..!
I git-cloned tensorflow, and on the latest branch i executed download_dependencies.sh and build_aarch64_lib.sh
( after disabling the NNAPI and adding the above mentioned compiler flags )
I was able to generate the static library libtensorflow-lite.a, but the compilation terminated with error on compiling &lt;TF root&gt;/tensorflow/lite/tools/make/gen/aarch64_armv8-a/bin/minimal
I'm not sure whether the static library compilation is complete.
Can anyone please help me in pointing out a resource / example for using this static library for building a simple working application ..?!
		</comment>
		<comment id='41' author='vizero1' date='2019-06-27T06:33:09Z'>
		Hi All,
I am still facing issue with eigen URL, even I use http or https
wget &lt;denchmark-link:https://mirror.tensorflow.org/bitbucket.org/eigen/eigen/get/a0d250e79c79.tar.gz&gt;https://mirror.tensorflow.org/bitbucket.org/eigen/eigen/get/a0d250e79c79.tar.gz&lt;/denchmark-link&gt;
 --no-check-certificate
--2019-06-27 11:47:15--  &lt;denchmark-link:https://mirror.tensorflow.org/bitbucket.org/eigen/eigen/get/a0d250e79c79.tar.gz&gt;https://mirror.tensorflow.org/bitbucket.org/eigen/eigen/get/a0d250e79c79.tar.gz&lt;/denchmark-link&gt;

Resolving mirror.tensorflow.org (mirror.tensorflow.org)... 172.217.163.176, 2404:6800:4007:80f::2010
Connecting to mirror.tensorflow.org (mirror.tensorflow.org)|172.217.163.176|:443... connected.
WARNING: no certificate subject alternative name matches
requested host name ‘mirror.tensorflow.org’.
HTTP request sent, awaiting response... 404 Not Found
2019-06-27 11:47:16 ERROR 404: Not Found.
I changed to &lt;denchmark-link:http://www.bitbucket.org/eigen/eigen/get/a0d250e79c79.tar.gz&gt;http://www.bitbucket.org/eigen/eigen/get/a0d250e79c79.tar.gz&lt;/denchmark-link&gt;
 and it is compiling for me but can we get some fix,  ?
Please note, I am not facing compilation issue because I wrote my own CMake for tflite just for compiling libtensorflow-lite.a taking reference from Makefile, I didn't need to compile flatbuffer library but has to add one util.cpp from it. I am not compiling Benchmark app so can't say this will work for you. If I will compile benchmark will let you know.
		</comment>
		<comment id='42' author='vizero1' date='2019-10-10T14:04:21Z'>
		Hi All,
Tensorflow lite build is successful, able to run examples.
label_image.cc example ran successfully with opencv 3.2.0 version but getting errors with opencv 3.4 and opencv 4.1.0 versions.
below code is changed in the Makefile
$(LABEL_IMAGE_BINARY): $(LABEL_IMAGE_OBJS) $(LIB_PATH)
&lt;denchmark-link:https://github.com/mkdir&gt;@mkdir&lt;/denchmark-link&gt;
 -p $(dir $@)
$(CXX) $(CXXFLAGS) $(INCLUDES) 
-o $(LABEL_IMAGE_BINARY) $(LABEL_IMAGE_OBJS) 
$(LIBFLAGS) $(LIB_PATH) $(LDFLAGS) $(LIBS) -L/home/xxx/opencvAarch64/opencv/build/install/lib -lopencv_core -lopencv_imgcodecs -lopencv_imgproc -lopencv_highgui
With opencv 3.2 is working fine, getting errors when includes 3.4 or 4.1 libraries.
ERROR:
/home/xxx/TFlite/TensorFlow_Lite/tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/lib/libtensorflow-lite.a -Wl,--no-export-dynamic -Wl,--exclude-libs,ALL -Wl,--gc-sections -Wl,--as-needed -lstdc++ -lpthread -lm -ldl -lrt /home/xxx/TFlite/TensorFlow_Lite/tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/lib/benchmark-lib.a -L/home/xxx/opencvAarch64/opencv_4.1.0/opencv-4.1.0/build/install/lib -lopencv_core -lopencv_imgcodecs -lopencv_imgproc -lopencv_highgui -lopencv_features2d -lopencv_calib3d -lopencv_flann
/home/xxx/TFlite/TensorFlow_Lite/tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/obj/tensorflow/lite/examples/custom_sv_psd_image/psd/src_psd/psdl_label.o: In function tflite::label_image::RunInference(tflite::label_image::Settings*)': label.cc:(.text+0x2214): **undefined reference to cv::imread(cv::String const&amp;, int)'**
label.cc:(.text+0x22c4): undefined reference to cv::String::deallocate()' label.cc:(.text+0x2f88): undefined reference to cv::String::allocate(unsigned long)'
label.cc:(.text+0x3678): undefined reference to `cv::String::deallocate()'
Please suggest how to resolve this problem.
Thanks,
Ram.
		</comment>
		<comment id='43' author='vizero1' date='2020-01-15T07:06:29Z'>
		I've tested download_dependencies.sh and build_aarch64_lib.sh today.
It works well so let me close this issue.
		</comment>
		<comment id='44' author='vizero1' date='2020-01-15T07:06:30Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/28926&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/28926&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>