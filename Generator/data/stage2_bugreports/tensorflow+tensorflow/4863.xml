<bug id='4863' author='peterkfm' open_date='2016-10-09T20:01:28Z' closed_time='2018-01-29T22:32:48Z'>
	<summary>iOS error: No OpKernel was registered to support Op 'Mul' with these attrs [T=DT_INT32]</summary>
	<description>
I have some issues performing a multiplication of int32 data on iOS. Session::Run fails with the error shown below, indicating that this particular multiplication op is not supported. I've already checked tf_op_files.txt, and 'tensorflow/core/kernels/cwise_op_mul.cc' is there, obviously, and it looks to like the int32 version should also get registered there.
Do I need to take any extra steps to enable int32 multiplication on iOS?
This is the exact error message I'm getting:
&lt;denchmark-code&gt;No OpKernel was registered to support Op 'Mul' with these attrs
     [[Node: mul = Mul[T=DT_INT32](Cast, Cast)]]
&lt;/denchmark-code&gt;

I'm using TensorFlow 0.10. Here is how I create the graph def file in Python:
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow.python.framework import graph_util

input = tf.placeholder(tf.float32, shape=(1,4), name='input')

v = tf.cast(input, tf.int32)
v = v * v
output = tf.cast(v, tf.float32, name='output')

with tf.Session() as sess:
    output_graph_def = graph_util.convert_variables_to_constants(sess, sess.graph_def, ['output'])

with tf.gfile.GFile('/tmp/test_graph.pb', 'wb') as f:
    f.write(output_graph_def.SerializeToString())
&lt;/denchmark-code&gt;

Thanks a lot,
Peter
	</description>
	<comments>
		<comment id='1' author='peterkfm' date='2016-10-12T11:25:07Z'>
		Can anyone shed some light on this? Are int32 ops not supported on iOS by default? If so, is there a way to enable them? I'm kind of stuck with this at the moment, so any input is highly appreciated.
Thanks,
Peter
		</comment>
		<comment id='2' author='peterkfm' date='2016-10-14T00:54:20Z'>
		Thanks for reaching out &lt;denchmark-link:https://github.com/peterkfm&gt;@peterkfm&lt;/denchmark-link&gt;
, and for your patience. This is a question that's probably more appropriate for &lt;denchmark-link:http://stackoverflow.com/questions/tagged/tensorflow&gt;Stack Overflow&lt;/denchmark-link&gt;
. We rely on the community for support and try to keep this issue tracker focused on bugs and feature requests.
		</comment>
		<comment id='3' author='peterkfm' date='2016-10-17T20:57:24Z'>
		I actually just had a chance to look into this, and I believe it's a bug with our op registration code. It's expected that we only register float and int32 variants of kernels on mobile platforms:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/register_types.h&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/register_types.h&lt;/denchmark-link&gt;

But the code for cwise ops makes some assumptions about the order of types, assuming that only the first two arguments to REGISTER macros should be used, in the hope that they're DT_FLOAT32 and DT_INT32:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cwise_ops_common.h#L413&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cwise_ops_common.h#L413&lt;/denchmark-link&gt;

Unfortunately the code for registering the "Mul" kernels passes in a float, then a half as the first two arguments to REGISTER5:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cwise_op_mul_1.cc&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cwise_op_mul_1.cc&lt;/denchmark-link&gt;

This means that only the float kernel gets registered. A simple workaround for now would be to change the line to be:
REGISTER5(BinaryOp, CPU, "Mul", functor::mul, float, int32, double, uint8, Eigen::half);
I haven't tested this myself, and it doesn't fix other occurrences of this same problem, but could you give it a try &lt;denchmark-link:https://github.com/peterkfm&gt;@peterkfm&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='4' author='peterkfm' date='2016-11-14T19:02:19Z'>
		&lt;denchmark-link:https://github.com/petewarden&gt;@petewarden&lt;/denchmark-link&gt;
 Are you still planning to fix this?  Should I take off awaiting response?
		</comment>
		<comment id='5' author='peterkfm' date='2016-11-14T21:17:18Z'>
		Thanks a lot Pete, that was indeed what was causing the problem. I ended up working around it by defining __ANDROID_TYPES_FULL__ (instead of __ANDROID_TYPES_SLIM__) in the Makefile. After that, to fix other missing ops, I extended tf_op_files.txt to contain practically everything that compiles on iOS, and changed register_types.h to make sure bool ops get defined as well.
Thanks again for your help, much appreciated!
		</comment>
		<comment id='6' author='peterkfm' date='2017-03-08T23:07:15Z'>
		Any updates on a permanent fix to this issue?
		</comment>
		<comment id='7' author='peterkfm' date='2017-03-13T16:28:47Z'>
		
But the code for cwise ops makes some assumptions about the order of types, assuming that only the first two arguments to REGISTER macros should be used

It looks like only the first argument is used if __ANDROID_TYPES_SLIM__ is defined.
In addition to
REGISTER5(BinaryOp, CPU, "Mul", functor::mul, float, int32, double, uint8, Eigen::half);
I changed REGISTER5 to
&lt;denchmark-code&gt;#define REGISTER5(OP, D, N, F, T0, T1, T2, T3, T4) \
    REGISTER(OP, D, N, F, T0) \
    REGISTER(OP, D, N, F, T1)
&lt;/denchmark-code&gt;

Note that by setting __ANDROID_TYPES_FULL__ library size increases significantly and should probably be avoided.
		</comment>
		<comment id='8' author='peterkfm' date='2017-03-27T06:20:56Z'>
		&lt;denchmark-link:https://github.com/sschaetz&gt;@sschaetz&lt;/denchmark-link&gt;
 Do you mean just changing the macro of , and without defining , then this issue can be fixed (at least temporarily)?  Thanks in advance.
		</comment>
		<comment id='9' author='peterkfm' date='2017-03-28T02:55:03Z'>
		I have figured out what you mean.  So both cwise_op_mul_1.cc and REGISTER5 macro need change, and leave __ANDROID_TYPES_FULL__ not modified.  Thanks.
		</comment>
		<comment id='10' author='peterkfm' date='2017-04-04T13:29:37Z'>
		I ran into this very same issue, but for Op 'Add'.
I applied this solution and it worked as expected.
		</comment>
		<comment id='11' author='peterkfm' date='2017-04-04T13:33:33Z'>
		&lt;denchmark-link:https://github.com/peterkfm&gt;@peterkfm&lt;/denchmark-link&gt;
 How did you find which ops compile on iOS? Can you also share the changes you made on register_types.h?
		</comment>
		<comment id='12' author='peterkfm' date='2017-04-26T23:50:41Z'>
		I ran into this issue with MULTIPLY. I fixed up the MULTIPLY REGISTER statement and then ran into the same issue with ADD. I was wondering if anyone had a solution other than manually changing each cwise ops file.
		</comment>
		<comment id='13' author='peterkfm' date='2017-04-27T00:00:48Z'>
		&lt;denchmark-link:https://github.com/scottwilson312&gt;@scottwilson312&lt;/denchmark-link&gt;
 it looks like a fix 1410510 might have been  committed. See above in the thread.
		</comment>
		<comment id='14' author='peterkfm' date='2017-04-27T02:39:52Z'>
		&lt;denchmark-link:https://github.com/scottwilson312&gt;@scottwilson312&lt;/denchmark-link&gt;
 That commit is just for my PERSONAL use only in a fork of tensorflow, following the comments above.  It is not a clean fix.  Be sure to understand it before using it.
		</comment>
		<comment id='15' author='peterkfm' date='2017-04-27T04:23:05Z'>
		&lt;denchmark-link:https://github.com/BrianOn99&gt;@BrianOn99&lt;/denchmark-link&gt;
 what exactly are the issues with this fix?
		</comment>
		<comment id='16' author='peterkfm' date='2017-04-27T08:22:13Z'>
		&lt;denchmark-link:https://github.com/cancan101&gt;@cancan101&lt;/denchmark-link&gt;

As &lt;denchmark-link:https://github.com/petewarden&gt;@petewarden&lt;/denchmark-link&gt;
 mentioned

This means that only the float kernel gets registered. A simple workaround for now would be to change the line to be:
REGISTER5(BinaryOp, CPU, "Mul", functor::mul, float, int32, double, uint8, Eigen::half);

It is just naively switching position of parameters, in order to switch int32 to the 5th parameter.  That means which op get registered depends on its position, which is totally nonsense I think.  Just a temporary workaround.  Anyway I am not a dev of tensorflow so it is better to let tensorflowers to make a better fix.
		</comment>
		<comment id='17' author='peterkfm' date='2017-04-27T13:07:49Z'>
		Right, but that is already the status quo with how this builds? This change seems like an improvement over what is in there
		</comment>
		<comment id='18' author='peterkfm' date='2017-05-04T11:52:55Z'>
		&lt;denchmark-link:https://github.com/cancan101&gt;@cancan101&lt;/denchmark-link&gt;
 To be more concrete, I also met this issue with Op 'Mul', replaced by Op 'Add' recently.  Then I "fixed" it in the same way in tensorflow/core/kernels/cwise_op_add_1.cc by switching parameter.  Then should we apply the same dirty trick in all of these files?
I think a more appropriate way is to put some notes in the README or error message, and even better, an easier way for users to compile optional operator perhaps in a txt file.
		</comment>
		<comment id='19' author='peterkfm' date='2017-05-04T12:51:34Z'>
		Well assuming this kernel is relatively frequently used, it would be nice if tf worked out of the box so to speak
		</comment>
		<comment id='20' author='peterkfm' date='2017-05-10T04:14:20Z'>
		It seems commit &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/26be523ed4ab3a573af7771aec770832d9c30f90&gt;26be523&lt;/denchmark-link&gt;
 is intended to solve this issue.  Any one verify it?
It is merged in the both master and v1.1.0rc2, but not in  v1.1.0.
		</comment>
		<comment id='21' author='peterkfm' date='2017-05-12T19:47:01Z'>
		I have had the same issue with "Less", then with "Add" and then with some other operation when I stopped make changes to "cwise_op_*" files. I think there should be some simple way to configure which operation and type to include or not for mobile devices. I have also tried to use print_selective_registration_header functionality but it does not help. Even though I added -D__ANDROID_TYPES_FULL__ flag I still get No OpKernel was registered to support Op 'GatherNd' with these attrs message.
		</comment>
		<comment id='22' author='peterkfm' date='2017-05-19T21:31:37Z'>
		I am getting this issue also, with 'Add' on iOS.
		</comment>
		<comment id='23' author='peterkfm' date='2017-05-20T15:48:45Z'>
		The proposed change in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/1410510fd1667f71338b43d6641c3ee5738c4b87&gt;1410510&lt;/denchmark-link&gt;
 Worked when I applied it to the add_1 function. Now I'm getting the same error with 'Dilation2D'
		</comment>
		<comment id='24' author='peterkfm' date='2017-10-21T17:03:02Z'>
		I take a look at the tensorflow/core/kernels/cwise_ops_common.h and tensorflow/core/framework/register_types.h.
I don't have a android or iOS build but correct me if I am wrong: it seems that we could just use TF_CALL_float, TF_CALL_int32 explicitly for all types without worrying about the platform, and moves __ANDROID_TYPES_SLIM__ to register_types.h so that different platform only register a subset of the ops.
For example, in register_types.h:

only half, float, int32, int64, bool, and quantized types are supported for defined(__ANDROID_TYPES_FULL__)
Only float, int32, and bool are supported are supported for defined(IS_MOBILE_PLATFORM) &amp;&amp; !defined(__ANDROID_TYPES_FULL__)

I don't see an explicit __ANDROID_TYPES_SLIM__ but if __ANDROID_TYPES_SLIM__ == !__ANDROID_TYPES_FULL__ then we could just use TF_CALL_xxx for all types and it should have already been handled.
If __ANDROID_TYPES_SLIM__ means we only want to register float (not even int32) then we could add additional defines in register_types.h.
I think that should be better than order-dependent REGISTER2, REGISTER3, REGISTER4?
		</comment>
		<comment id='25' author='peterkfm' date='2017-12-13T20:58:25Z'>
		Given that this is substantially the same as &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/9476&gt;#9476&lt;/denchmark-link&gt;
, if the official recommendation is to use , then we should consider closing this out.
		</comment>
		<comment id='26' author='peterkfm' date='2018-01-03T07:45:30Z'>
		It has been 14 days with no activity and this issue has an assignee.Please update the label and/or status accordingly.
		</comment>
		<comment id='27' author='peterkfm' date='2018-01-17T19:16:58Z'>
		Nagging Assignee: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
		<comment id='28' author='peterkfm' date='2018-01-29T22:32:48Z'>
		Closing this, since the preferred approach is to use __ANDROID_TYPES_FULL__.
		</comment>
	</comments>
</bug>