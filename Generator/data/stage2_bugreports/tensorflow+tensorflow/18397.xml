<bug id='18397' author='sabi0' open_date='2018-04-10T21:44:15Z' closed_time='2020-01-30T14:35:16Z'>
	<summary>Java wrapper floods temp dir with copies of extracted native library</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 7 x64
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): 1.5.0
Python version: N/A
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce: None

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

I've been working on a Java application that uses TensorFlow. I launched it thousand times - unit tests, debugging sessions, etc. And at some point I discovered I had 8 GB of tensorflow_jni.dll copies in my Temp directory.
Apparently  is not enough to cleanup the extracted native library (&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/java/src/main/java/org/tensorflow/NativeLibrary.java#L150&gt;NativeLibrary.java:150&lt;/denchmark-link&gt;
). Not on Windows at least. It appears DLL is still loaded when the deletion is attempted. So the deletion fails and the DLL is left behind.
A better approach would be to use semi-static path for library extraction rather than fully random.
In such case the library could be deleted or re-used upon the next application run.
I would suggest to use a target folder name like this:
&lt;denchmark-code&gt;File tmp = new File(System.getProperty("java.io.tmpdir"));
File dir = new File(tmp, "tensorflow-" + TF_VERSION + '-' + System.getProperty("user.name").hashCode());
&lt;/denchmark-code&gt;

And then check if the folder and files exist already upon startup. And either delete them and extract again (better security) or just call System.loadLibrary() directly.
You could still keep using deleteOnExit(). When it works properly the only copy of the library will not be left laying on the disk after JVM shutdown.
A similar approach is used by other native libraries handling frameworks. For example, in JNA project.
See &lt;denchmark-link:https://github.com/java-native-access/jna/blob/master/src/com/sun/jna/Native.java&gt;https://github.com/java-native-access/jna/blob/master/src/com/sun/jna/Native.java&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='sabi0' date='2018-04-13T19:59:19Z'>
		Thanks for the report.
To be extra sure, the name of the directory should probably be based on the checksum of its contents, which will be a little harder to engineer. We don't want to use a fixed directory otherwise we could run into interference between programs compiled against different versions of the library.
I don't believe this problem occurs on Linux/Mac though. I don't have enough experience with Windows - is there something about the use of System.loadLibrary() that causes deleting the file to fail?
Marking this as "Contributions Welcome" in case someone with a stronger understanding of the JVM on Windows can suggest a clean fix, or if someone wants to take on the fixed directory (in which case I would strongly recommend that the directory name be a function of the contents of the .jar file being extracted and not a fixed string).
		</comment>
		<comment id='2' author='sabi0' date='2018-04-13T20:00:57Z'>
		(CC &lt;denchmark-link:https://github.com/saudet&gt;@saudet&lt;/denchmark-link&gt;
 as well - in case he has some insights)
		</comment>
		<comment id='3' author='sabi0' date='2018-04-13T21:03:54Z'>
		It's not about System.loadLibrary() but about the way files are handled in Windows.
On Linux (and I suppose Mac) opened files can be deleted (unlink()-ed). On Windows - not.
And when JVM processes deleteOnExits DLLs are still loaded into JVM address space, i.e. the files are still open.
There is a hacky way of using a dedicated separate class loader for loading DLLs. And then calling System.gc() after null-ing the class loader reference. It helps ... sometimes.
I included a version of the Tensorflow into the directory name in the sample code above. Do you think it won't be enough?
Also each user should have his own folder to avoid access rights conflicts. Hence the System.getProperty("user.name").hashCode() part. Hash code is used to avoid problems in case user name contains national symbols or spaces.
		</comment>
		<comment id='4' author='sabi0' date='2018-04-13T21:20:04Z'>
		Thanks for the info. The version string itself won't be enough, it doesn't capture things that affect the build of the native libraries (like whether it's the CPU or GPU version, or if there are others that package differently built binaries such as with/without AVX support etc.) - hence my suggestion of using the checksum of the resource contents.
		</comment>
		<comment id='5' author='sabi0' date='2018-04-15T00:44:59Z'>
		&lt;denchmark-link:https://github.com/asimshankar&gt;@asimshankar&lt;/denchmark-link&gt;
 Yes, I do. That's been fixed a long time ago in JavaCPP! :)
The problem is that on Windows it's not possible to delete a DLL after it's been loaded. We need to end the process, and let some other process do the clean up. I used to have a hack for that in JavaCPP but switched to using a cache instead, because it wouldn't work with JavaFX, among other things: &lt;denchmark-link:https://github.com/bytedeco/javacpp/issues/60&gt;bytedeco/javacpp#60&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/sabi0&gt;@sabi0&lt;/denchmark-link&gt;
 So, one way to work around this is by using the JavaCPP Presets for TensorFlow:
&lt;denchmark-link:https://github.com/bytedeco/javacpp-presets/tree/master/tensorflow&gt;https://github.com/bytedeco/javacpp-presets/tree/master/tensorflow&lt;/denchmark-link&gt;

You'll get access to the C++ API from Java, but we can keep using the official Java API as well.
A build for Windows has also been released:
&lt;denchmark-link:https://github.com/bytedeco/javacpp-presets/issues/111#issuecomment-380322141&gt;bytedeco/javacpp-presets#111 (comment)&lt;/denchmark-link&gt;

/cc &lt;denchmark-link:https://github.com/agibsonccc&gt;@agibsonccc&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='sabi0' date='2018-04-16T10:07:27Z'>
		&lt;denchmark-link:https://github.com/saudet&gt;@saudet&lt;/denchmark-link&gt;
 Thanks. I will have a look at JavaCPP.
&lt;denchmark-link:https://github.com/asimshankar&gt;@asimshankar&lt;/denchmark-link&gt;
 It is possible to use fully random name for DLL (i.e. not bother with content checksum) as long as the folder name is predictable. Here is how it could work:
Folder name could be like this:
&lt;denchmark-code&gt;File dir = new File(tmp, "tensorflow-" + System.getProperty("user.name").hashCode());
&lt;/denchmark-code&gt;

Extracted file names could be fully random, e.g. tf_jni-2387168.dll. But when such file is extracted another "marker" file is created - tf_jni-2387168.dll.lock.
The latter one is immediately registered with deleteOnExit(). JVM will not have problems deleting it on any platform.
And then upon start the application scans the user folder and deletes any files that don't have matching .lock files. And then proceeds to extract the resources (under random names).
This might still left some files in Temp on Windows (when user stops using TF). But would help to avoid copies of resources piling up.
		</comment>
		<comment id='7' author='sabi0' date='2018-04-16T10:38:12Z'>
		Extracting DLLs every time a new JVM is launched is inefficient though. For
something as big as TensorFlow it takes a few seconds. Consider also that
frameworks like Hadoop or Spark tend to launch multiple JVMs during
execution. That's another reason JavaCPP uses a cache. BTW, JNA is not
performance conscious so it's not a good reference if one is interested in
efficiency.
		</comment>
		<comment id='8' author='sabi0' date='2018-04-18T00:06:21Z'>
		Thanks &lt;denchmark-link:https://github.com/saudet&gt;@saudet&lt;/denchmark-link&gt;

Caching seems very reasonable. Though, again, the caching should handle different versions/configurations correctly. So, some form of identification (like the checksum of the file contents) should be included, right? (Seems like JavaCPP uses maven coordinates for the "cache key"?)
		</comment>
		<comment id='9' author='sabi0' date='2018-04-18T03:46:55Z'>
		Yes, there needs to be some kind of system for that. JavaCPP doesn't use directly Maven coordinates because they are not available when running from an uber JAR, for example, as required by Spark, or just for a standalone application. Instead, it uses the filename of the JAR file itself plus of the path to the files inside it, which happen to contain the Maven coordinates when loaded with it.
BTW, including additional resources such as header files in the JAR file and extracting them to a cache like this also allows C++ libraries to link with it, not just Java libraries. That's what is happening with, for example, Caffe depending on OpenCV, OpenBLAS, and HDF5 here: &lt;denchmark-link:https://github.com/bytedeco/javacpp-presets/blob/master/caffe/pom.xml#L17-L37&gt;https://github.com/bytedeco/javacpp-presets/blob/master/caffe/pom.xml#L17-L37&lt;/denchmark-link&gt;
  Though, in the case of TensorFlow, I'm assuming everything can be managed with Bazel...
		</comment>
		<comment id='10' author='sabi0' date='2020-01-30T12:54:03Z'>
		&lt;denchmark-link:https://github.com/MarkDaoust&gt;@MarkDaoust&lt;/denchmark-link&gt;
 This one also could be considered "fixed" since we're now using JavaCPP for &lt;denchmark-link:https://github.com/tensorflow/java&gt;https://github.com/tensorflow/java&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='sabi0' date='2020-01-30T14:35:15Z'>
		Thanks.
		</comment>
		<comment id='12' author='sabi0' date='2020-01-30T14:35:17Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/18397&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/18397&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>