<bug id='15352' author='coolchicha' open_date='2017-12-14T00:16:11Z' closed_time='2019-08-06T21:58:38Z'>
	<summary>matmul causing segmentation fault in rev1.4.0</summary>
	<description>
Please go to Stack Overflow for help and support:
&lt;denchmark-link:https://stackoverflow.com/questions/tagged/tensorflow&gt;https://stackoverflow.com/questions/tagged/tensorflow&lt;/denchmark-link&gt;

If you open a GitHub issue, here is our policy:

It must be a bug or a feature request.
The form below must be filled out.
It shouldn't be a TensorBoard issue. Those go here.

Here's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Linux Ubuntu 16.04
TensorFlow installed from (source or binary):
source
TensorFlow version (use command below):
1.4.0
Python version:
3.6
Bazel version (if compiling from source):
0.8.1
GCC/Compiler version (if compiling from source):
5.4.0
CUDA/cuDNN version:
N/A
GPU model and memory:
N/A
Exact command to reproduce:
Here is the output from tf_env_collect.sh

== cat /etc/issue ===============================================
Linux Ubuntu 4.4.0-101-generic &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/124&gt;#124&lt;/denchmark-link&gt;
-Ubuntu SMP Fri Nov 10 18:29:59 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
VERSION="16.04.3 LTS (Xenial Xerus)"
VERSION_ID="16.04"
VERSION_CODENAME=xenial
== are we in docker =============================================
No
== compiler =====================================================
c++ (Ubuntu 5.4.0-6ubuntu1~16.04.5) 5.4.0 20160609
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
== uname -a =====================================================
Linux Ubuntu 4.4.0-101-generic &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/124&gt;#124&lt;/denchmark-link&gt;
-Ubuntu SMP Fri Nov 10 18:29:59 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
== check pips ===================================================
numpy (1.13.3)
protobuf (3.5.0.post1)
tensorflow (1.4.0)
tensorflow-tensorboard (0.1.8)
== check for virtualenv =========================================
True
== tensorflow import ============================================
tf.VERSION = 1.4.0
tf.GIT_VERSION = b'v1.3.0-rc1-5916-g18c864c'
tf.COMPILER_VERSION = b'v1.3.0-rc1-5916-g18c864c'
Sanity check: array([1], dtype=int32)
== env ==========================================================
LD_LIBRARY_PATH /usr/lib/nx/X11/Xinerama:/usr/lib/nx/X11
DYLD_LIBRARY_PATH is unset
== nvidia-smi ===================================================
tensorflow-src/tensorflow/tools/tf_env_collect.sh: line 105: nvidia-smi: command not found
== cuda libs  ===================================================
You can collect some of this information using our environment capture script:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&lt;/denchmark-link&gt;

You can obtain the TensorFlow version with
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.
Seeing a segmentation fault on matmul operation.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

Here is the source code:
import tensorflow as tf
a = tf.random_normal([100, 200])
b = tf.random_normal([200, 300])
res = tf.matmul(a, b)
tf.Session().run(res)
Here is the backtrace from gdb:
#0  0x00007fff513b9296 in Eigen::internal::gemm_pack_lhs&lt;float, long, Eigen::internal::TensorContractionSubMapper&lt;float, long, 1, Eigen::TensorEvaluator&lt;Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::ThreadPoolDevice&gt;, Eigen::array&lt;long, 1ul&gt;, Eigen::array&lt;long, 1ul&gt;, 16, true, false, 0, Eigen::MakePointer&gt;, 48, 16, 0, false, false&gt;::operator()(float*, Eigen::internal::TensorContractionSubMapper&lt;float, long, 1, Eigen::TensorEvaluator&lt;Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::ThreadPoolDevice&gt;, Eigen::array&lt;long, 1ul&gt;, Eigen::array&lt;long, 1ul&gt;, 16, true, false, 0, Eigen::MakePointer&gt; const&amp;, long, long, long, long) ()
from /tensorflow/python/_pywrap_tensorflow_internal.so
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/1&gt;#1&lt;/denchmark-link&gt;
  0x00007fff5142ce94 in Eigen::TensorEvaluator&lt;Eigen::TensorContractionOp&lt;Eigen::array&lt;Eigen::IndexPair, 1ul&gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const&gt; const, Eigen::ThreadPoolDevice&gt;::Context&lt;Eigen::internal::gemm_pack_lhs&lt;float, long, Eigen::internal::TensorContractionSubMapper&lt;float, long, 1, Eigen::TensorEvaluator&lt;Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::ThreadPoolDevice&gt;, Eigen::array&lt;long, 1ul&gt;, Eigen::array&lt;long, 1ul&gt;, 16, true, false, 0, Eigen::MakePointer&gt;, 48, 16, 0, false, false&gt;, Eigen::internal::gemm_pack_rhs&lt;float, long, Eigen::internal::TensorContractionSubMapper&lt;float, long, 0, Eigen::TensorEvaluator&lt;Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::ThreadPoolDevice&gt;, Eigen::array&lt;long, 1ul&gt;, Eigen::array&lt;long, 1ul&gt;, 16, true, false, 0, Eigen::MakePointer&gt;, 4, 0, false, false&gt;, Eigen::internal::gebp_kernel&lt;float, float, long, Eigen::internal::blas_data_mapper&lt;float, long, 0, 0&gt;, 48, 4, false, false&gt;, Eigen::internal::TensorContractionInputMapper&lt;float, long, 1, Eigen::TensorEvaluator&lt;Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::ThreadPoolDevice&gt;, Eigen::array&lt;long, 1ul&gt;, Eigen::array&lt;long, 1ul&gt;, 16, true, false, 0, Eigen::MakePointer&gt;, Eigen::internal::TensorContractionInputMapper&lt;float, long, 0, Eigen::TensorEvaluator&lt;Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::ThreadPoolDevice&gt;, Eigen::array&lt;long, 1ul&gt;, Eigen::array&lt;long, 1ul&gt;, 16, true, false, 0, Eigen::MakePointer&gt;, Eigen::internal::blas_data_mapper&lt;float, long, 0, 0&gt; &gt;::enqueue_packing_helper(long, long, long, bool) ()
from /tensorflow/python/_pywrap_tensorflow_internal.so
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/2&gt;#2&lt;/denchmark-link&gt;
  0x00007fff4eab29c1 in Eigen::NonBlockingThreadPoolTempltensorflow::EigenEnvironment::WorkerLoop(int) ()
from /tensorflow/python/../libtensorflow_framework.so
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/3&gt;#3&lt;/denchmark-link&gt;
  0x00007fff4eab07d7 in std::_Function_handler&lt;void (), tensorflow::EigenEnvironment::CreateThread(std::function&lt;void ()&gt;)::{lambda()&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/1&gt;#1&lt;/denchmark-link&gt;
}&gt;::_M_invoke(std::_Any_data const&amp;) ()
from /tensorflow/python/../---Type  to continue, or q  to quit---
libtensorflow_framework.so
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/4&gt;#4&lt;/denchmark-link&gt;
  0x00007fff4e2ecc80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/5&gt;#5&lt;/denchmark-link&gt;
  0x00007ffff7bc16ba in start_thread (arg=0x7ffe06ffd700)
at pthread_create.c:333
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/6&gt;#6&lt;/denchmark-link&gt;
  0x00007ffff71e73dd in clone ()
at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.
	</description>
	<comments>
		<comment id='1' author='coolchicha' date='2017-12-14T21:30:07Z'>
		&lt;denchmark-link:https://github.com/rmlarsen&gt;@rmlarsen&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/benoitsteiner&gt;@benoitsteiner&lt;/denchmark-link&gt;
 Can you take a look at this one?
		</comment>
		<comment id='2' author='coolchicha' date='2018-01-19T03:34:45Z'>
		I'm also hitting this issue (same bt with gdb) for Python 3.5.2, TF 1.4.1. It occurs with Ubuntu 16.04 on a c5 instance on AWS.
		</comment>
		<comment id='3' author='coolchicha' date='2018-03-01T17:41:26Z'>
		&lt;denchmark-link:https://github.com/coolchicha&gt;@coolchicha&lt;/denchmark-link&gt;
 any progress on this? I'm having a similar problem trying to compile a graph using tfcompile.
GDB traceback is
&lt;denchmark-code&gt;Program received signal SIGSEGV, Segmentation fault.
0x0000000000425bed in void Eigen::TensorEvaluator&lt;Eigen::TensorContractionOp&lt;Eigen::array&lt;Eigen::IndexPair&lt;long long&gt;, 1ul&gt; const, Eigen::TensorReshapingOp&lt;Eigen::DSizes&lt;long long, 2&gt; const, Eigen::TensorImagePatchOp&lt;-1l, -1l, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 4, 1, long&gt;, 16, Eigen::MakePointer&gt; const&gt; const&gt; const, Eigen::TensorReshapingOp&lt;Eigen::DSizes&lt;long long, 2&gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 4, 1, long&gt;, 16, Eigen::MakePointer&gt; const&gt; const&gt; const, Eigen::ThreadPoolDevice&gt;::evalProduct&lt;true, true, false, 0&gt;(float*) const ()
(gdb) bt
#0  0x0000000000425bed in void Eigen::TensorEvaluator&lt;Eigen::TensorContractionOp&lt;Eigen::array&lt;Eigen::IndexPair&lt;long long&gt;, 1ul&gt; const, Eigen::TensorReshapingOp&lt;Eigen::DSizes&lt;long long, 2&gt; const, Eigen::TensorImagePatchOp&lt;-1l, -1l, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 4, 1, long&gt;, 16, Eigen::MakePointer&gt; const&gt; const&gt; const, Eigen::TensorReshapingOp&lt;Eigen::DSizes&lt;long long, 2&gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 4, 1, long&gt;, 16, Eigen::MakePointer&gt; const&gt; const&gt; const, Eigen::ThreadPoolDevice&gt;::evalProduct&lt;true, true, false, 0&gt;(float*) const ()
#1  0x0000000000431465 in void tensorflow::xla::EigenConvF32Impl&lt;Eigen::ThreadPoolDevice&gt;(Eigen::ThreadPoolDevice const&amp;, float*, float*, float*, long long, long long, long long, long long, long long, long long, long long, long long, long long, long long, long long, long long, long long, long long, long long, long long, long long, long long, long long, long long) ()
#2  0x0000000000403972 in __tensorflow_compiler_aot_tests_mnist_x86__convolutional_mnist ()
#3  0x000000000000001c in ?? ()
#4  0x0000000000000001 in ?? ()
#5  0x0000000000000003 in ?? ()
#6  0x0000000000000003 in ?? ()
#7  0x0000000000000001 in ?? ()
#8  0x0000000000000020 in ?? ()
#9  0x000000000000001a in ?? ()
#10 0x000000000000001a in ?? ()
#11 0x0000000000000001 in ?? ()
#12 0x0000000000000001 in ?? ()
#13 0x0000000000000000 in ?? ()
(gdb) quit

&lt;/denchmark-code&gt;

EDIT: I already tried to disable optmization flags like those appointed by &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/9638&gt;#9638&lt;/denchmark-link&gt;
, still having the issue.
		</comment>
		<comment id='4' author='coolchicha' date='2018-10-13T03:55:10Z'>
		is this problem still occuring?
		</comment>
		<comment id='5' author='coolchicha' date='2018-10-19T02:46:22Z'>
		i hit this problem while saved_model running online for predicting for some days. caused core dump. how to resolve it . any idea?
		</comment>
		<comment id='6' author='coolchicha' date='2019-08-06T21:58:37Z'>
		Please check with the latest version of TensorFlow. Feel free to reopen if the issues still persists.
		</comment>
		<comment id='7' author='coolchicha' date='2019-08-06T21:58:39Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=15352&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=15352&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='coolchicha' date='2020-06-08T11:02:34Z'>
		
is this problem still occuring?

Hi, Yes The problem persist till now.
when i try to execute bellow line in python 3.5, and my feature vector is 450x512, the error occured.
Error: "segmentation fault (core dumped)"
sim_mat = np.matmul(query_feats, np.transpose(gallery_feats))
any idea?
		</comment>
	</comments>
</bug>