<bug id='30609' author='adammichaelwood' open_date='2019-07-11T17:57:22Z' closed_time='2019-12-09T17:47:20Z'>
	<summary>(more) spurious deprecation warnings</summary>
	<description>
Similar to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/27897&gt;#27897&lt;/denchmark-link&gt;

System information

OS Platform and Distribution
Linux-4.14.79+-x86_64-with-Ubuntu-18.04-bionic
TensorFlow installed from:
pip install tensorflow==2.0.0-beta1
TensorFlow version (use command below): v2.0.0-beta0-16-g1d91213fe7 2.0.0-beta1
Python version: 3.6.8

(This is happening in colab.sandbox.google.com)
Describe the current behavior
When using new APIs that replaced old APIs, you deprecation warnings as if you were still using the old API.
Describe the expected behavior
If I use the new APIs, I should not get deprecation warnings.
Code to reproduce the issue
&lt;denchmark-code&gt;from __future__ import absolute_import, division, print_function, unicode_literals
import functools

import numpy as np
import tensorflow as tf
import tensorflow_datasets as tfds


TRAIN_DATA_URL = "https://storage.googleapis.com/tf-datasets/titanic/train.csv"

train_file_path = tf.keras.utils.get_file("train.csv", TRAIN_DATA_URL)
LABEL_COLUMN = 'survived'
LABELS = [0, 1]

def get_dataset(file_path):
  dataset = tf.data.experimental.make_csv_dataset(
      file_path,
      batch_size=12, # Artificially small to make examples easier to show.
      label_name=LABEL_COLUMN,
      na_value="?",
      num_epochs=1,
      ignore_errors=True)
  return dataset

raw_train_data = get_dataset(train_file_path)

"""
-------OUTPUT------------
WARNING: Logging before flag parsing goes to stderr.
W0711 17:34:31.453707 140627566475136 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/data/experimental/ops/readers.py:498: parallel_interleave (from tensorflow.python.data.experimental.ops.interleave_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use `tf.data.Dataset.interleave(map_func, cycle_length, block_length, num_parallel_calls=tf.data.experimental.AUTOTUNE)` instead. If sloppy execution is desired, use `tf.data.Options.experimental_determinstic`.
------END OUTPUT-------
"""

CATEGORIES = {
    'sex': ['male', 'female'],
    'class' : ['First', 'Second', 'Third'],
    'deck' : ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'],
    'embark_town' : ['Cherbourg', 'Southhampton', 'Queenstown'],
    'alone' : ['y', 'n']
}

categorical_columns = []
for feature, vocab in CATEGORIES.items():
  cat_col = tf.feature_column.categorical_column_with_vocabulary_list(
        key=feature, vocabulary_list=vocab)
  categorical_columns.append(tf.feature_column.indicator_column(cat_col))

MEANS = {
    'age' : 29.631308,
    'n_siblings_spouses' : 0.545455,
    'parch' : 0.379585,
    'fare' : 34.385399
}

def process_continuous_data(mean, data):
  # Normalize data
  data = tf.cast(data, tf.float32) * 1/(2*mean)
  return tf.reshape(data, [-1, 1])

numerical_columns = []

for feature in MEANS.keys():
  num_col = tf.feature_column.numeric_column(feature, normalizer_fn=functools.partial(process_continuous_data, MEANS[feature]))
  numerical_columns.append(num_col)

preprocessing_layer = tf.keras.layers.DenseFeatures(categorical_columns+numerical_columns)


def get_model(hidden_units=[100, 100]):

  model = tf.keras.Sequential([preprocessing_layer])
  for units in hidden_units:
    model.add(tf.keras.layers.Dense(units, activation='relu'))
 
  return model


train_data = raw_train_data.shuffle(500)

model = get_model()
model.compile(
    loss='binary_crossentropy',
    optimizer='adam',
    metrics=['accuracy'])

model.fit(train_data, epochs=20)

"""
-------OUTPUT------

Epoch 1/20
W0711 17:34:32.313002 140627566475136 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column_v2.py:2655: add_dispatch_support.&lt;locals&gt;.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use tf.where in 2.0, which has the same broadcast rule as np.where
W0711 17:34:32.347570 140627566475136 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column_v2.py:4215: IndicatorColumn._variable_shape (from tensorflow.python.feature_column.feature_column_v2) is deprecated and will be removed in a future version.
Instructions for updating:
The old _FeatureColumn APIs are being deprecated. Please use the new FeatureColumn APIs instead.
W0711 17:34:32.350716 140627566475136 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column_v2.py:4270: VocabularyListCategoricalColumn._num_buckets (from tensorflow.python.feature_column.feature_column_v2) is deprecated and will be removed in a future version.
Instructions for updating:
The old _FeatureColumn APIs are being deprecated. Please use the new FeatureColumn APIs instead.
"""
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='adammichaelwood' date='2019-07-11T18:22:22Z'>
		I have discovered that if I build the model Sequentially, the warnings at the end go away.
&lt;denchmark-code&gt;model = tf.keras.Sequential([
  preprocessing_layer,
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dense(1, activation='sigmoid'),
])

model.compile(
    loss='binary_crossentropy',
    optimizer='adam',
    metrics=['accuracy'])

model.fit(train_data, epochs=20)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='adammichaelwood' date='2019-12-04T21:46:26Z'>
		I am getting the same error as &lt;denchmark-link:https://github.com/adammichaelwood&gt;@adammichaelwood&lt;/denchmark-link&gt;
. Is there some new Feature Columns API on the way, or are these actually spurious as indicated? I have not seen any official TF 2.0 responses yes, only a workaround.
		</comment>
		<comment id='3' author='adammichaelwood' date='2019-12-04T22:06:33Z'>
		&lt;denchmark-link:https://github.com/rohan100jain&gt;@rohan100jain&lt;/denchmark-link&gt;
 Rohan, can you take a look how FeatureColumn APIs can be updated so that they don't print out deprecation warnings?
		</comment>
		<comment id='4' author='adammichaelwood' date='2019-12-09T17:47:19Z'>
		&lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/f70c46f8cd2a91b390455827cda65b5b5fe92ef0&gt;f70c46f&lt;/denchmark-link&gt;
 should fix the spurious warnings. Closing bug now. Please re-open / open a new one if you still see warnings.
		</comment>
		<comment id='5' author='adammichaelwood' date='2019-12-09T17:47:22Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/30609&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/30609&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>