<bug id='33667' author='sayakpaul' open_date='2019-10-24T05:43:09Z' closed_time='2019-11-23T06:14:49Z'>
	<summary>Potential redundancy in using np.array</summary>
	<description>
Thank you for submitting a TensorFlow documentation issue. Per our GitHub
policy, we only address code/doc bugs, performance issues, feature requests, and
build/installation issues on GitHub.
The TensorFlow docs are open source! To get involved, read the documentation
contributor guide: &lt;denchmark-link:https://www.tensorflow.org/community/contribute/docs&gt;https://www.tensorflow.org/community/contribute/docs&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;URL(s) with the issue:&lt;/denchmark-h&gt;

Please provide a link to the documentation entry:
&lt;denchmark-link:https://www.tensorflow.org/tutorials/generative/deepdream&gt;https://www.tensorflow.org/tutorials/generative/deepdream&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;Description of the issue (what needs changing):&lt;/denchmark-h&gt;

In this example, we are already performing this: original_img = np.array(original_img) in the beginning. Then, what is the point of repeating it here: img = tf.constant(np.array(original_img)) and here: shift_down, shift_right, img_rolled = random_roll(np.array(original_img), 512)?
	</description>
	<comments>
		<comment id='1' author='sayakpaul' date='2019-11-21T23:41:02Z'>
		&lt;denchmark-link:https://github.com/sayakpaul&gt;@sayakpaul&lt;/denchmark-link&gt;
 Taking it up an octave and Scaling up with tiles are two different techniques.
In the 1st technique, you converted an image to tensor and then cast it to float32 to multiply it by an octave(i.e., floating point number) but in the second technique you are just passing in the original image that is a numpy array directly to the function.
I don't think this is redundant information.
		</comment>
		<comment id='2' author='sayakpaul' date='2019-11-22T02:28:32Z'>
		&lt;denchmark-link:https://github.com/gowthamkpr&gt;@gowthamkpr&lt;/denchmark-link&gt;


@sayakpaul Taking it up an octave and Scaling up with tiles are two different techniques.

I guess I never mentioned scaling up octaves and tiling are the two same techniques.
Regarding the redundancy, the order of the lines code (that I mentioned initially) in the tutorial goes like the following:
&lt;denchmark-code&gt;original_img = np.array(original_img)
img = tf.constant(np.array(original_img))
shift_down, shift_right, img_rolled = random_roll(np.array(original_img), 512)
&lt;/denchmark-code&gt;

All I am trying to say is if we are creating an np.array of the original_img in the very beginning then what's the point of doing it again for the downstream tasks as original_img is already an np.array (made in the first step)?
		</comment>
		<comment id='3' author='sayakpaul' date='2019-11-22T18:22:36Z'>
		&lt;denchmark-link:https://github.com/sayakpaul&gt;@sayakpaul&lt;/denchmark-link&gt;
 Yes, I agree with you. We will take a look into it. Thanks!
		</comment>
		<comment id='4' author='sayakpaul' date='2019-11-23T06:14:49Z'>
		I opened a PR for the same as well. &lt;denchmark-link:https://github.com/gowthamkpr&gt;@gowthamkpr&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>