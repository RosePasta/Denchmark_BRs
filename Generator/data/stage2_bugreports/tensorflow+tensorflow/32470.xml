<bug id='32470' author='AakashKumarNain' open_date='2019-09-12T16:36:40Z' closed_time='2019-09-28T00:15:21Z'>
	<summary>Custom Optimizer keeps throwing `no attribute _create_slots` error</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): 2.0rc1
Python version: 3.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: 10
GPU model and memory: P100

Describe the current behavior
When creating a custom optimizer, the optimizer keeps throwing object has no attribute _create_slots error.
Code to reproduce the issue
!pip install tensorflow-gpu==2.0.0-rc1
import math
import numpy as np
import tensorflow as tf
from tensorflow.keras import backend as K

class CustomOptimizer(tf.keras.optimizers.Optimizer):
  def __init__(self, 
               optimizer, 
               cool_period = 10,
               **kwargs):
    super(CustomOptimizer, self).__init__("CustomOptimizer", **kwargs)
    self.optimizer = tf.keras.optimizers.get(optimizer)
    
    self.cool_period = K.variable(cool_period,
                                  name = "cool_period",
                                  dtype = K.floatx())
    self.cool_period_slot = self.add_slot(self.cool_period, "cool_period")
 
 
  def get_updates(self, loss, params):
    if self.optimizer.iterations==self.get_slot(cool_period):
      self.updates = self.optimizer.get_updates(loss, params)


    
  def get_config(self):
    config = {
              'cool_period': K.get_value(self.cool_period),
              'optimizer': tf.keras.optimizers.serialize(self.optimizer),
            }
    base_config = super(CustomOptimizer, self).get_config()
    return dict(list(base_config.items()) + list(config.items()))

x = np.random.rand(100,100)
y = np.random.randint(2, size=(100))
op = CustomOptimizer('adam')
input_layer = tf.keras.layers.Input(shape=x.shape[1:])
fc = tf.keras.layers.Dense(1)(input_layer)

model = tf.keras.models.Model(input_layer, fc)
model.compile(optimizer=op, loss='mse')
model.fit(x, y, epochs=5)
	</description>
	<comments>
		<comment id='1' author='AakashKumarNain' date='2019-09-13T05:59:53Z'>
		I could reproduce the issue with Tf 2.0.0.rc1. PTAL colab &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/ecbb46625cd07dc4f5657b0e375dbaf3/untitled144.ipynb&gt;gist&lt;/denchmark-link&gt;
. Thanks
		</comment>
		<comment id='2' author='AakashKumarNain' date='2019-09-26T22:32:43Z'>
		you can fix this by having the add_slot inside _create_slots:
def _create_slots(self, var_list):
self.cool_period_slot = self.add_slot(self.cool_period, "cool_period")
But I do agree we should probably not error out in this case
		</comment>
		<comment id='3' author='AakashKumarNain' date='2019-09-28T00:15:23Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=32470&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=32470&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>