<bug id='43011' author='akshayjagatap' open_date='2020-09-07T09:51:55Z' closed_time='2020-09-21T16:34:02Z'>
	<summary>Same variable name for tf.feature_column.embedding_column embedding tensors in tf 2.3.0</summary>
	<description>
System information

Have I written custom code: Yes
OS Platform and Distribution: 64 bit Linux
TensorFlow installed from source
TensorFlow version: v2.3.0-rc2-23-gb36436b087 2.3.0
Python version: 3.6.10
Cuda compilation tools, release 10.0, V10.0.130

Describe the current behavior
In TF 2.1.0, when I use tf.feature_column.embedding_column, the variable names of the embedding variables are derived from the categorical column name.
Example: if I create an embedding column using a categorical column
feature_alpha = tf.feature_column.categorical_column_with_hash_bucket('feature_alpha', 100, dtype=tf.dtypes.string)
alpha_emb = tf.feature_column.embedding_column(feature_alpha, dimension=10)
feature_beta = tf.feature_column.categorical_column_with_hash_bucket('feature_beta', 200, dtype=tf.dtypes.string)
beta_emb = tf.feature_column.embedding_column(feature_beta, dimension=20)
the embedding variable for 'feature_alpha' is named 'dense_features/feature_alpha_embedding/embedding_weights:0'
the embedding variable for 'feature_beta' is named 'dense_features/feature_beta_embedding/embedding_weights:0'
the variable names contain the categorical column name, 'feature_alpha...' and 'feature_beta...'
In TF 2.3.0
the embedding variable for 'feature_alpha' is named 'dense_features/embedding_weights:0'.
the embedding variable for 'feature_beta' is named 'dense_features/embedding_weights:0'
This works fine if there is only a single feature column. but when there are multiple feature columns.
The embedding variables are assigned the same name, which creates problems while saving the model.
I get the error "RuntimeError: Unable to create link (name already exists)" while saving the model, since the embedding variables for 'feature_alpha' and 'feature_beta' have the same variable name.
Describe the expected behavior
the expected behaviour is that what we observe in TF 2.1.0.
Standalone code to reproduce the issue
This code works in TF 2.1.0 but fails in TF 2.3.0 with the error "RuntimeError: Unable to create link (name already exists)" due to the same variable names.
&lt;denchmark-code&gt;import tensorflow as tf
inputs = {'feature_alpha' : tf.keras.layers.Input(name='feature_alpha', 
                                                 shape=(None,), 
                                                 sparse=True, 
                                                 dtype=tf.dtypes.string),
         'feature_beta' : tf.keras.layers.Input(name='feature_beta', 
                                                 shape=(None,), 
                                                 sparse=True, 
                                                 dtype=tf.dtypes.string)}
def gen_model(inputs):
    feature_alpha = tf.feature_column.categorical_column_with_hash_bucket('feature_alpha', 100, dtype=tf.dtypes.string)
    feature_beta = tf.feature_column.categorical_column_with_hash_bucket('feature_beta', 200, dtype=tf.dtypes.string)    
    
    alpha_emb = tf.feature_column.embedding_column(feature_alpha, dimension=10)
    beta_emb = tf.feature_column.embedding_column(feature_beta, dimension=20)
    out = tf.keras.layers.DenseFeatures([alpha_emb, beta_emb])(inputs)

    out = tf.keras.layers.Dense(64, activation='relu')(out)

    model = tf.keras.Model(inputs, out)

    return model        

model = gen_model(inputs)

print(model.trainable_variables)
model.save('mdl.h5')
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='akshayjagatap' date='2020-09-07T11:11:13Z'>
		I've tried this code on Colab and it is not failing with Tensorflow 2.3.0
		</comment>
		<comment id='2' author='akshayjagatap' date='2020-09-07T11:24:46Z'>
		is there any way I can help reproduce the error?
I'm getting the following error in tensorflow 2.3.0
&lt;denchmark-code&gt;RuntimeError                              Traceback (most recent call last)
&lt;ipython-input-2-161fd8a33deb&gt; in &lt;module&gt;
     25 
     26 print(model.trainable_variables)
---&gt; 27 model.save('mdl.h5')

~/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py in save(self, filepath, overwrite, include_optimizer, save_format, signatures, options)
   1977     """
   1978     save.save_model(self, filepath, overwrite, include_optimizer, save_format,
-&gt; 1979                     signatures, options)
   1980 
   1981   def save_weights(self,

~/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/tensorflow/python/keras/saving/save.py in save_model(model, filepath, overwrite, include_optimizer, save_format, signatures, options)
    129           'or using `save_weights`.')
    130     hdf5_format.save_model_to_hdf5(
--&gt; 131         model, filepath, overwrite, include_optimizer)
    132   else:
    133     saved_model_save.save(model, filepath, overwrite, include_optimizer,

~/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/tensorflow/python/keras/saving/hdf5_format.py in save_model_to_hdf5(model, filepath, overwrite, include_optimizer)
    117     model_weights_group = f.create_group('model_weights')
    118     model_layers = model.layers
--&gt; 119     save_weights_to_hdf5_group(model_weights_group, model_layers)
    120 
    121     # TODO(b/128683857): Add integration tests between tf.keras and external

~/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/tensorflow/python/keras/saving/hdf5_format.py in save_weights_to_hdf5_group(f, layers)
    638     save_attributes_to_hdf5_group(g, 'weight_names', weight_names)
    639     for name, val in zip(weight_names, weight_values):
--&gt; 640       param_dset = g.create_dataset(name, val.shape, dtype=val.dtype)
    641       if not val.shape:
    642         # scalar

~/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/h5py/_hl/group.py in create_dataset(self, name, shape, dtype, data, **kwds)
    137             dset = dataset.Dataset(dsid)
    138             if name is not None:
--&gt; 139                 self[name] = dset
    140             return dset
    141 

~/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/h5py/_hl/group.py in __setitem__(self, name, obj)
    371 
    372             if isinstance(obj, HLObject):
--&gt; 373                 h5o.link(obj.id, self.id, name, lcpl=lcpl, lapl=self._lapl)
    374 
    375             elif isinstance(obj, SoftLink):

h5py/_objects.pyx in h5py._objects.with_phil.wrapper()

h5py/_objects.pyx in h5py._objects.with_phil.wrapper()

h5py/h5o.pyx in h5py.h5o.link()

RuntimeError: Unable to create link (name already exists)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='akshayjagatap' date='2020-09-07T11:28:40Z'>
		Ok now I see better your error and it is reproducible saving with h5 format.
		</comment>
		<comment id='4' author='akshayjagatap' date='2020-09-07T11:30:42Z'>
		Can you test the same example with pip install tf_nightly-cpu or pip install tf_nightly?
		</comment>
		<comment id='5' author='akshayjagatap' date='2020-09-07T15:03:32Z'>
		&lt;denchmark-link:https://github.com/akshayjagatap&gt;@akshayjagatap&lt;/denchmark-link&gt;
,
I was able to reproduce the issue with &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/a72465c7e3d740127444b03ede6ed4f2/43011.ipynb&gt;TF v2.3&lt;/denchmark-link&gt;
.
However, the issue seems to be fixed with the latest &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/ca4c228b5ec181db4b9580ad8fccb96d/43011-tf-nightly.ipynb&gt;TF-nightly&lt;/denchmark-link&gt;
. Please find the attached gist. Thanks!
		</comment>
		<comment id='6' author='akshayjagatap' date='2020-09-14T15:41:03Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='7' author='akshayjagatap' date='2020-09-21T16:34:01Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='8' author='akshayjagatap' date='2020-09-21T16:34:03Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43011&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43011&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='akshayjagatap' date='2020-10-28T03:07:05Z'>
		I have met the same issue. A work around way is to create multiple DenseFeature layer with different name for embedding column, after that concatenate the result after those DenseFeature layer. This works for me in TF 2.3 (in case you don't want to upgrade your TF version to nightly)
		</comment>
	</comments>
</bug>