<bug id='35190' author='bakaschwarz' open_date='2019-12-17T14:57:33Z' closed_time='2020-02-28T19:36:14Z'>
	<summary>Conv2D accepts strings as 'filters' parameter, but fails to handle them correctly</summary>
	<description>
System information

Have I written custom code: Yes
OS Platform and Distribution: Linux, Linux-5.4.2-1-MANJARO-x86_64-with-arch-Manjaro-Linux
TensorFlow installed from (source or binary): tensorflow binary using pip
TensorFlow version: 2.0.0
Python version: 3.7.5
CUDA/cuDNN version: -
GPU model and memory: -

Describe the current behavior
I create a Conv2D layer with string "12" as parameter for filters.
Creation of the object does not fail. However trying to create a tensor out of
this object results in the following exception:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/IPython/core/interactiveshell.py", line 3291, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "&lt;ipython-input-26-60e14eee1394&gt;", line 1, in &lt;module&gt;
    a(b)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 817, in __call__
    self._maybe_build(inputs)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 2141, in _maybe_build
    self.build(input_shapes)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/keras/layers/convolutional.py", line 165, in build
    dtype=self.dtype)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 522, in add_weight
    aggregation=aggregation)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/training/tracking/base.py", line 744, in _add_variable_with_custom_getter
    **kwargs_for_getter)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer_utils.py", line 139, in make_variable
    shape=variable_shape if variable_shape else None)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/ops/variables.py", line 258, in __call__
    return cls._variable_v1_call(*args, **kwargs)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/ops/variables.py", line 219, in _variable_v1_call
    shape=shape)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/ops/variables.py", line 197, in &lt;lambda&gt;
    previous_getter = lambda **kwargs: default_variable_creator(None, **kwargs)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/ops/variable_scope.py", line 2507, in default_variable_creator
    shape=shape)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/ops/variables.py", line 262, in __call__
    return super(VariableMetaclass, cls).__call__(*args, **kwargs)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/ops/resource_variable_ops.py", line 1406, in __init__
    distribute_strategy=distribute_strategy)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/ops/resource_variable_ops.py", line 1537, in _init_from_args
    initial_value() if init_from_fn else initial_value,
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer_utils.py", line 119, in &lt;lambda&gt;
    init_val = lambda: initializer(shape, dtype=dtype)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/ops/init_ops_v2.py", line 421, in __call__
    fan_in, fan_out = _compute_fans(scale_shape)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/ops/init_ops_v2.py", line 749, in _compute_fans
    fan_out = shape[-1] * receptive_field_size
TypeError: can't multiply sequence by non-int of type 'float'
&lt;/denchmark-code&gt;

You can also create a Conv2D object with other strings like "test" and it will not fail either.
Using "test" yields:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/IPython/core/interactiveshell.py", line 3291, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "&lt;ipython-input-35-60e14eee1394&gt;", line 1, in &lt;module&gt;
    a(b)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 817, in __call__
    self._maybe_build(inputs)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 2141, in _maybe_build
    self.build(input_shapes)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/keras/layers/convolutional.py", line 165, in build
    dtype=self.dtype)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 522, in add_weight
    aggregation=aggregation)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/training/tracking/base.py", line 744, in _add_variable_with_custom_getter
    **kwargs_for_getter)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer_utils.py", line 126, in make_variable
    variable_shape = tensor_shape.TensorShape(shape)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_shape.py", line 776, in __init__
    self._dims = [as_dimension(d) for d in dims_iter]
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_shape.py", line 776, in &lt;listcomp&gt;
    self._dims = [as_dimension(d) for d in dims_iter]
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_shape.py", line 718, in as_dimension
    return Dimension(value)
  File "/home/baka/.virtualenvs/cplace-machine-learning-backend/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_shape.py", line 193, in __init__
    self._value = int(value)
ValueError: invalid literal for int() with base 10: 'test'
&lt;/denchmark-code&gt;

Describe the expected behavior
I expect that creation of the Conv2D object fails with a ValueError when used with a string or that it tries to convert the string into int.
If the string cannot be converted to int, an exception should be raised at the creation time of the layer, not when building the tensor. Right now, this is different behavior to parameters like strides which fails in the stage of building the layer object when presented with an not int-convertible string.
Code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow.python.keras as k
a = k.layers.Conv2D(filters="12", kernel_size=3)
b = k.layers.Input((100, 100, 3))
a(b)
&lt;/denchmark-code&gt;

and
&lt;denchmark-code&gt;import tensorflow.python.keras as k
a = k.layers.Conv2D(filters="test", kernel_size=3)
b = k.layers.Input((100, 100, 3))
a(b)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='bakaschwarz' date='2019-12-19T08:08:26Z'>
		&lt;denchmark-link:https://github.com/bakaschwarz&gt;@bakaschwarz&lt;/denchmark-link&gt;

Filters should be int but not strings. If we give integer value for filter we will not see any error message.
Please go through this &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D?version=stable#arguments_2&gt;link&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='2' author='bakaschwarz' date='2019-12-19T10:45:54Z'>
		
@bakaschwarz
Filters should be int but not strings. If we give integer value for filter we will not see any error message.
Please go through this link.Thanks!

You are totally right, that filters should be int, but not strings. That is exactly why i am reporting this though.
Because this gets accepted and can't be compiled into a tensor:
a = k.layers.Conv2D(filters="test", kernel_size=3)
This get accepted and creates a layer, but cannot be compiled into a tensor:
a = k.layers.Conv2D(filters="12", kernel_size=3)
This fails at layer creation time:
a = k.layers.Conv2D(filters=12, kernel_size=3, strides="test")
This gets accepted and creates a layer and can even be compiled into a tensor:
a = k.layers.Conv2D(filters=12, kernel_size=3, strides="3")
This is just inconsistent behavior. Why can i use strings for strides but not for filters. It should either work always or should always fail (which i think would be the correct behavior).
EDIT: I think they should work the same, because both filters and strides specify integers as their only possible input.
		</comment>
		<comment id='3' author='bakaschwarz' date='2019-12-20T22:09:19Z'>
		&lt;denchmark-link:https://github.com/bakaschwarz&gt;@bakaschwarz&lt;/denchmark-link&gt;
 I agree, it is not consistent but it is not a bug as the  of different functions are clearly defined. I am not sure how much work required to make it kind of consistent.  Thanks!
		</comment>
		<comment id='4' author='bakaschwarz' date='2020-02-28T19:36:13Z'>
		This is fixed latest tf-nightly version '2.2.0-dev20200228' . Thanks!
		</comment>
		<comment id='5' author='bakaschwarz' date='2020-02-28T19:36:15Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35190&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35190&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>