<bug id='36963' author='bela127' open_date='2020-02-21T17:13:00Z' closed_time='2020-03-05T17:12:39Z'>
	<summary>image.resize tensor as size argumentnot working in tf.function</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock
example script provided in TensorFlow): custom Layer, using tf.image.resize
OS Platform and Distribution (e.g.,
Linux Ubuntu 16.04):  Linux Mint 19.3 Cinnamon (Ubuntu based)
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if
the issue happens on mobile device: No
TensorFlow installed from (source or
binary): pip install
TensorFlow version (use command below): v2.1.0-rc2-17-ge5bf8de 2.1.0
Python version: 3.6.9

Describe the current behavior
image.resize is working in eager(standard) mode, with tensor as size argument
stops working if warped in tf.function
Describe the expected behavior
should work like in eager
possible reason:
live tf.function tensor is in the implementation of image.resize not evaluated.
so the cast to a appropriate value fails and None is returned
Error (full):
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/bhb/.vscode/extensions/ms-python.python-2020.2.63990/pythonFiles/ptvsd_launcher.py", line 48, in &lt;module&gt;
    main(ptvsdArgs)
  File "/home/bhb/.vscode/extensions/ms-python.python-2020.2.63990/pythonFiles/lib/python/old_ptvsd/ptvsd/__main__.py", line 432, in main
    run()
  File "/home/bhb/.vscode/extensions/ms-python.python-2020.2.63990/pythonFiles/lib/python/old_ptvsd/ptvsd/__main__.py", line 316, in run_file
    runpy.run_path(target, run_name='__main__')
  File "/usr/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/usr/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/usr/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/ShAReD_Net/model/modules/base.py", line 204, in &lt;module&gt;
    main()
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/ShAReD_Net/model/modules/base.py", line 191, in main
    out = test_multiscale(inputs)
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/ShAReD_Net/model/modules/base.py", line 175, in run
    outputs = op(inputs, **kwargs)
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 822, in __call__
    outputs = self.call(cast_inputs, *args, **kwargs)
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/ShAReD_Net/model/modules/base.py", line 126, in call
    outs.append(self.hour_glass(ins))
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 822, in __call__
    outputs = self.call(cast_inputs, *args, **kwargs)
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/ShAReD_Net/model/modules/base.py", line 62, in call
    big_normal = self.big_normal(big_shared2_shc, scale_2)
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 822, in __call__
    outputs = self.call(cast_inputs, *args, **kwargs)
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 568, in __call__
    result = self._call(*args, **kwds)
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 615, in _call
    self._initialize(args, kwds, add_initializers_to=initializers)
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 497, in _initialize
    *args, **kwds))
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py", line 2389, in _get_concrete_function_internal_garbage_collected
    graph_function, _, _ = self._maybe_define_function(args, kwargs)
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py", line 2703, in _maybe_define_function
    graph_function = self._create_graph_function(args, kwargs)
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py", line 2593, in _create_graph_function
    capture_by_value=self._capture_by_value),
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/framework/func_graph.py", line 978, in func_graph_from_py_func
    func_outputs = python_func(*func_args, **func_kwargs)
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 439, in wrapped_fn
    return weak_wrapped_fn().__wrapped__(*args, **kwds)
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py", line 3211, in bound_method_wrapper
    return wrapped_fn(*args, **kwargs)
  File "/home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/framework/func_graph.py", line 968, in wrapper
    raise e.ag_error_metadata.to_exception(e)
ValueError: in converted code:

    /mnt/7f43981f-bc0a-4b76-a721-46c0159f0cf5/cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/ShAReD_Net/model/layer/base.py:228 call  *
        scaled_conv = tf.image.resize(conv, destination_size, preserve_aspect_ratio=True, antialias=True)
    /home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/ops/image_ops_impl.py:1357 resize_images_v2
        skip_resize_if_same=False)
    /home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/ops/image_ops_impl.py:1100 _resize_images_common
        math_ops.cast(new_height_const, dtypes.float32) /
    /home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/util/dispatch.py:180 wrapper
        return target(*args, **kwargs)
    /home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/ops/math_ops.py:705 cast
        x = ops.convert_to_tensor(x, name="x")
    /home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/framework/ops.py:1314 convert_to_tensor
        ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
    /home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/framework/constant_op.py:317 _constant_tensor_conversion_function
        return constant(v, dtype=dtype, name=name)
    /home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/framework/constant_op.py:258 constant
        allow_broadcast=True)
    /home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/framework/constant_op.py:296 _constant_impl
        allow_broadcast=allow_broadcast))
    /home/bhb/Cloud/Code/Git/3D_Person_Pose_Estimation_from_2D_Singelview_Image_Data/src/venv/lib/python3.6/site-packages/tensorflow_core/python/framework/tensor_util.py:439 make_tensor_proto
        raise ValueError("None values not supported.")

    ValueError: None values not supported.
&lt;/denchmark-code&gt;

Standalone code to reproduce the issue
Sorry not yet the time, but relevant code is:
custom Layer for scaling features to variable (depended on other feature size) size üëç
&lt;denchmark-code&gt;class Scale(keras.layers.Layer):
    def __init__(self, destination_channel = None, name = "Scale", **kwargs):
        super().__init__(name = name, **kwargs)
        self.destination_channel = destination_channel
        
    def build(self, input_shape):
        if self.destination_channel is None:
            self.destination_channel = input_shape[-1]
        self.compress_input = keras.layers.Convolution2D(int(input_shape[-1]/2), kernel_size=1, padding='SAME', activation=tf.nn.leaky_relu, kernel_initializer=tf.initializers.he_normal(), bias_initializer=tf.initializers.he_uniform())
        self.conv = keras.layers.Convolution2D(input_shape[-1], kernel_size=3, padding='SAME', activation=tf.nn.leaky_relu, kernel_initializer=tf.initializers.he_normal(), bias_initializer=tf.initializers.he_uniform())
        self.pool = keras.layers.MaxPool2D(pool_size=3,strides=1,padding="SAME")
        self.compress_output = keras.layers.Convolution2D(self.destination_channel, kernel_size=1, padding='SAME', activation=tf.nn.leaky_relu, kernel_initializer=tf.initializers.he_normal(), bias_initializer=tf.initializers.he_uniform())
        super().build(input_shape)

    def call(self, inputs, destination_size):
        
        compressed_input = self.compress_input(inputs)
        conv = self.conv(compressed_input)
        pool = self.pool(inputs)
        
        scaled_conv = tf.image.resize(conv, destination_size, preserve_aspect_ratio=True, antialias=True)
        scaled_pool = tf.image.resize(pool, destination_size, preserve_aspect_ratio=True, antialias=True)
        
        concat = keras.layers.concatenate([scaled_pool, scaled_conv])
        compressed_output = self.compress_output(concat)
        return compressed_output
&lt;/denchmark-code&gt;

works if like shown, stops working if @tf.function is added to
def call(self, inputs, destination_size):
Calling code:
&lt;denchmark-code&gt;def call(self, inputs):
        input_res, input_shc = inputs
        
        scale = tf.cast(input_shc.shape[1:3], dtype=tf.int32)
        scale_2 = tf.cast(scale/2, dtype=tf.int32)
        scale_4 = tf.cast(scale/4, dtype=tf.int32)
        scale_8 = tf.cast(scale/8, dtype=tf.int32)
        
        big_normal = self.big_normal(big_shared2_shc, scale_2)
        return big_normal
&lt;/denchmark-code&gt;

big_normal is a instance of class Scale
thanks in advance
	</description>
	<comments>
		<comment id='1' author='bela127' date='2020-02-24T11:53:58Z'>
		&lt;denchmark-link:https://github.com/bela127&gt;@bela127&lt;/denchmark-link&gt;
, Thanks for reporting this issue.
Can you provide the complete code snippet to reproduce the reported issue. Thanks!
		</comment>
		<comment id='2' author='bela127' date='2020-02-24T12:24:46Z'>
		Thanks for replying so fast,
I will build a minimum test script today and provide it as soon as possible.
		</comment>
		<comment id='3' author='bela127' date='2020-02-24T13:03:41Z'>
		here you go:
full test script with 3 test cases
&lt;denchmark-code&gt;import tensorflow as tf
keras = tf.keras


def main():
    eager = True                    ### please change to FALSE in eager mode all 3 tests are fine
    test_nr = 1 # 1 or 2 or 3       ### please test 1 and 2 and 3 -&gt; diffrent errors
                                    ### error 3 ist clear, TensorShape is not tf.function compatible
                                    ### error 1,2 has somthing todo with the image.resize implementation
                                    ### runtime tensor is not evaluated and so the value is None
    
    tf.config.experimental_run_functions_eagerly(eager)
    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
    
    inputs = tf.constant(100.,shape=[1,100,100,20])
    inputs_small = tf.constant(100.,shape=[1,80,80,20])
    
    if eager or test_nr == 1:
        print("Scaled1")
        scaled_shared = Scaled1()
        test_scaled_shared = test(scaled_shared, optimizer, training = True)
        out = test_scaled_shared([inputs,inputs_small])
        print("Scaled1")
    
    if eager or test_nr == 2:
        print("Scaled2")
        scaled_shared = Scaled2()
        test_scaled_shared = test(scaled_shared, optimizer, training = True)
        out = test_scaled_shared([inputs,inputs_small])
        print("Scaled2")
        
    if eager or test_nr == 3:
        print("Scaled3")
        scaled_shared = Scaled3()
        test_scaled_shared = test(scaled_shared, optimizer, training = True)
        out = test_scaled_shared([inputs,inputs_small])
        print("Scaled3")

def test(op, optimizer, **kwargs):
    def run(inputs):
        with tf.GradientTape() as tape:
            tape.watch(op.trainable_variables)
            outputs = op(inputs, **kwargs)
        g = tape.gradient(outputs, op.trainable_variables)
        optimizer.apply_gradients(zip(g, op.trainable_variables))
        return outputs, g
    return run
  
class Scale(keras.layers.Layer):
    def __init__(self, destination_channel = None, name = "Scale", **kwargs):
        super().__init__(name = name, **kwargs)
        self.destination_channel = destination_channel
        
    def build(self, input_shape):
        if self.destination_channel is None:
            self.destination_channel = input_shape[-1]
        self.compress_input = keras.layers.Convolution2D(int(input_shape[-1]/2), kernel_size=1, padding='SAME', activation=tf.nn.leaky_relu, kernel_initializer=tf.initializers.he_normal(), bias_initializer=tf.initializers.he_uniform())
        self.conv = keras.layers.Convolution2D(input_shape[-1], kernel_size=3, padding='SAME', activation=tf.nn.leaky_relu, kernel_initializer=tf.initializers.he_normal(), bias_initializer=tf.initializers.he_uniform())
        self.pool = keras.layers.MaxPool2D(pool_size=3,strides=1,padding="SAME")
        self.compress_output = keras.layers.Convolution2D(self.destination_channel, kernel_size=1, padding='SAME', activation=tf.nn.leaky_relu, kernel_initializer=tf.initializers.he_normal(), bias_initializer=tf.initializers.he_uniform())
        super().build(input_shape)

    @tf.function
    def call(self, inputs, destination_size):
        
        compressed_input = self.compress_input(inputs)
        conv = self.conv(compressed_input)
        pool = self.pool(inputs)
        
        scaled_conv = tf.image.resize(conv, destination_size, preserve_aspect_ratio=True, antialias=True)
        scaled_pool = tf.image.resize(pool, destination_size, preserve_aspect_ratio=True, antialias=True)
        
        concat = keras.layers.concatenate([scaled_pool, scaled_conv])
        compressed_output = self.compress_output(concat)
        return compressed_output
    
    def get_config(self):
        config = super().get_config()
        config.update({'destination_channel': self.destination_channel,
                       })
        return config


class Scaled1(keras.layers.Layer):
    def __init__(self, name = "Scaled1", **kwargs):
        super().__init__(name = name, **kwargs)

        
    def build(self, input_shape):
        res_shape, shc_shape = input_shape
        self.scale_up = Scale(destination_channel = res_shape[-1])
        self.scale_down = Scale()
        super().build(input_shape)
        
    def call(self, inputs):
        inputs_res, inputs_shc = inputs
        shape1 = tf.shape(inputs_shc)[1:3]
        shape2 = tf.shape(inputs_shc)[1:3]
        
        scaled_res = self.scale_down(inputs_res, shape1)
        scaled_dense = self.scale_up(scaled_res, shape2)
        return scaled_dense      
    
class Scaled2(keras.layers.Layer):
    def __init__(self, name = "Scaled2", **kwargs):
        super().__init__(name = name, **kwargs)

        
    def build(self, input_shape):
        res_shape, shc_shape = input_shape
        self.scale_up = Scale(destination_channel = res_shape[-1])
        self.scale_down = Scale()
        super().build(input_shape)
        
    def call(self, inputs):
        inputs_res, inputs_shc = inputs
        
        shape1 = tf.cast(tf.shape(inputs_shc)[1:3], dtype = tf.int32)
        shape2 = tf.cast(tf.shape(inputs_shc)[1:3], dtype = tf.int32)
        
        scaled_res = self.scale_down(inputs_res, shape1)
        scaled_dense = self.scale_up(scaled_res, shape2)
        return scaled_dense
        
class Scaled3(keras.layers.Layer):
    def __init__(self, name = "Scaled2", **kwargs):
        super().__init__(name = name, **kwargs)

        
    def build(self, input_shape):
        res_shape, shc_shape = input_shape
        self.scale_up = Scale(destination_channel = res_shape[-1])
        self.scale_down = Scale()
        super().build(input_shape)
        
    def call(self, inputs):
        inputs_res, inputs_shc = inputs
        
        shape1 = inputs_shc.shape[1:3]
        shape2 = inputs_shc.shape[1:3]
        
        scaled_res = self.scale_down(inputs_res, shape1)
        scaled_dense = self.scale_up(scaled_res, shape2)
        return scaled_dense

  
if __name__ == '__main__':
    main()
    
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='bela127' date='2020-02-25T06:04:13Z'>
		Could able to replicate the reported issue with TF 2.1 and TF-nightly.
Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/b758c604ee2b51b63905bf69fd10b57f/untitled401.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks
		</comment>
		<comment id='5' author='bela127' date='2020-02-26T04:48:19Z'>
		I have similar problems when adding signatures function for an existing model. But if I remove the preserve_aspect_ratio=True, everything works well.
		</comment>
		<comment id='6' author='bela127' date='2020-03-05T17:12:40Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36963&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36963&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='bela127' date='2020-03-09T13:08:12Z'>
		thanks, changed to nightly and the fix is working
		</comment>
	</comments>
</bug>