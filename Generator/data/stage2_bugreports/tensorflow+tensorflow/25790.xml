<bug id='25790' author='gabrieldemarmiesse' open_date='2019-02-15T19:47:40Z' closed_time='2019-07-25T21:59:30Z'>
	<summary>Incompatibility between keras and tf.keras for layer.build</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Google Colab
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): 1.13.0rc1
Python version: 3.6
Bazel version (if compiling from source): No
GCC/Compiler version (if compiling from source): No
CUDA/cuDNN version: No
GPU model and memory: No

You can collect some of this information using our environment capture &lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
Describe the current behavior
Here is the code below which should work (it works with keras-team/keras).
Describe the expected behavior
The code should run as expected, instead, we get the error message below. Note that changing the flag at the begining of the script makes the code work.
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
use_tf_keras = True
if use_tf_keras:
    from tensorflow.keras.layers import Layer, Dense
    from tensorflow.keras import backend as K
    from tensorflow.keras import Sequential
else:
    from keras.layers import Layer, Dense
    from keras import backend as K
    from keras import Sequential


class MyLayer(Layer):

  def build(self, input_shape):
    print(type(input_shape))
    input_dim = input_shape[-1]
    output_dim = input_shape[-1] / 2

    self.kernel = self.add_weight(shape=(input_dim, output_dim),
                                  name='kernel',
                                  initializer='ones')
    super().build(input_shape)

  def call(self, inputs):
    return K.dot(inputs, self.kernel)

  def compute_output_shape(self, input_shape):
    input_shape = list(input_shape)
    input_shape[-1] = input_shape[-1] // 2
    return input_shape

model = Sequential()
model.add(Dense(8, input_shape=(20, 20)))
model.add(MyLayer())
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
&lt;denchmark-code&gt;WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py:435: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.
Instructions for updating:
Colocations handled automatically by placer.
&lt;class 'tensorflow.python.framework.tensor_shape.TensorShapeV1'&gt;
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-2-255eda5c5005&gt; in &lt;module&gt;()
     32 model = Sequential()
     33 model.add(Dense(8, input_shape=(20, 20)))
---&gt; 34 model.add(MyLayer())

/usr/local/lib/python3.6/dist-packages/tensorflow/python/training/checkpointable/base.py in _method_wrapper(self, *args, **kwargs)
    440     self._setattr_tracking = False  # pylint: disable=protected-access
    441     try:
--&gt; 442       method(self, *args, **kwargs)
    443     finally:
    444       self._setattr_tracking = previous_value  # pylint: disable=protected-access

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/sequential.py in add(self, layer)
    178       # If the model is being built continuously on top of an input layer:
    179       # refresh its output.
--&gt; 180       output_tensor = layer(self.outputs[0])
    181       if isinstance(output_tensor, list):
    182         raise TypeError('All layers in a Sequential model '

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in __call__(self, inputs, *args, **kwargs)
    536       if not self.built:
    537         # Build layer if applicable (if the `build` method has been overridden).
--&gt; 538         self._maybe_build(inputs)
    539         # We must set self.built since user defined build functions are not
    540         # constrained to set self.built.

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in _maybe_build(self, inputs)
   1601     # Only call `build` if the user has manually overridden the build method.
   1602     if not hasattr(self.build, '_is_default'):
-&gt; 1603       self.build(input_shapes)
   1604 
   1605   def __setattr__(self, name, value):

&lt;ipython-input-2-255eda5c5005&gt; in build(self, input_shape)
     15     print(type(input_shape))
     16     input_dim = input_shape[-1]
---&gt; 17     output_dim = input_shape[-1] / 2
     18 
     19     self.kernel = self.add_weight(shape=(input_dim, output_dim),

TypeError: unsupported operand type(s) for /: 'Dimension' and 'int'
&lt;/denchmark-code&gt;

if using keras-team/keras, we get:
&lt;denchmark-code&gt;&lt;class 'tuple'&gt;
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='gabrieldemarmiesse' date='2019-02-17T23:31:40Z'>
		The issue is that  only defines a , not  (or /):
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/tensor_shape.py#L455&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/tensor_shape.py#L455&lt;/denchmark-link&gt;

I think adding __rdiv__ will fix the issue of TypeError: unsupported operand type(s) for /.
However, in the above code in tensorflow, it also mentioned that __div__ is deprecated (in favor of __floordiv__ or //). Actually, changing:
output_dim = input_shape[-1] / 2 to output_dim = input_shape[-1] // 2 works.
I think it probably makes sense to change / to //?
Or, maybe it also makes sense to explicitly thrown out a better error message in __div__/__rdiv__?
		</comment>
		<comment id='2' author='gabrieldemarmiesse' date='2019-02-18T00:40:08Z'>
		Created a PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/25821&gt;#25821&lt;/denchmark-link&gt;
 to print a better error message in case the operation is not supported.
		</comment>
		<comment id='3' author='gabrieldemarmiesse' date='2019-07-25T21:59:30Z'>
		Closing this issue since the associated PR has been merged.
Also can see clear error message with latest TF (tested with tf-nightly 1.15.0-dev201907250)
Thanks!
		</comment>
		<comment id='4' author='gabrieldemarmiesse' date='2019-07-25T21:59:32Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=25790&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=25790&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>