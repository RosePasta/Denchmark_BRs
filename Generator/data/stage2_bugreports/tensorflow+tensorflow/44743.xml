<bug id='44743' author='grewe' open_date='2020-11-10T22:13:59Z' closed_time='2020-12-22T20:50:18Z'>
	<summary>TensorflowLite  LSTM data input format example</summary>
	<description>
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
TensorFlow installed from (source or binary):
TensorFlow version (or github SHA if from source):
Android, Tensorflow 2.3


If possible, please share a link to Colab/Jupyter/any notebook.
&lt;denchmark-link:https://github.com/grewe/UCross/blob/main/Training/LSTM_CrosswalkNavigation_Training.ipynb&gt;https://github.com/grewe/UCross/blob/main/Training/LSTM_CrosswalkNavigation_Training.ipynb&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;Training performed using notebook at https://github.com/grewe/UCross/blob/main/Training/LSTM_CrosswalkNavigation_Training.ipynb

This has a CNN feature extractor that runs on a sequence of 40 images captured producing 40 Feature Vectors.   These are fed into an LSTM model and trained for a video activity recognition (directing users across crosswalk) application

&lt;/denchmark-code&gt;

The output from the converter invocation
&lt;denchmark-code&gt;I understand will create 2 TFLite models (one for Feature Extractor CNN and the other for the LSTM model).  My question is how do I repackage the 40 Feature Vectors in my sequence as input into the TFLite model on Android.   I would like to see some examples showing this for Android (as on Android do not have access to full Tensorflow api).
&lt;/denchmark-code&gt;

Also, please include a link to the saved model or GraphDef
&lt;denchmark-code&gt;# Put link here or attach to the issue.
&lt;/denchmark-code&gt;

Failure details
If the conversion is successful, but the generated model is wrong,
state what is wrong:

Producing wrong results and/or decrease in accuracy
Producing correct results, but the model is slower than expected (model generated from old converter)

RNN conversion support
If converting TF RNN to TFLite fused RNN ops, please prefix [RNN] in the title.
Any other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='grewe' date='2020-11-11T23:17:47Z'>
		I see you have added  label, however I don't see TF Lite conversion code in your example. Since you are using keras to train the model you can use  to convert your model into TF Lite.
See &lt;denchmark-link:https://www.tensorflow.org/lite/convert#convert_a_keras_model&gt;https://www.tensorflow.org/lite/convert#convert_a_keras_model&lt;/denchmark-link&gt;
_
		</comment>
		<comment id='2' author='grewe' date='2020-11-11T23:34:26Z'>
		Sorry here is the conversion code that we are using.
&lt;denchmark-link:https://github.com/grewe/covidID_mask/blob/master/maskDetect/MaskDetectTflite.ipynb&gt;https://github.com/grewe/covidID_mask/blob/master/maskDetect/MaskDetectTflite.ipynb&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='grewe' date='2020-11-11T23:35:43Z'>
		As you can see it is using the TFliteConverter  (but, from a saved model)
converter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir='saved_model_new', signature_keys=['serving_default']) converter.optimizations = [tf.lite.Optimize.DEFAULT] converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS, tf.lite.OpsSet.SELECT_TF_OPS] tflite_model = converter.convert()
		</comment>
		<comment id='4' author='grewe' date='2020-11-11T23:53:07Z'>
		Also, what is the result of the order of the output vector indices changing in what they store is it breaks reading them in from the generated TFLite model (output of converter that is different between version prior and including  tf-nightly==2.4.0-dev20200929 require us to setup output  in via Android
`        Trace.beginSection("feed");
outputLocations = new float[1][NUM_DETECTIONS][4];
detectionMulticlassScores = new float[1][NUM_DETECTIONS][NUM_CLASSES];
outputScores = new float[1][NUM_DETECTIONS];
outputClasses = new float[1][NUM_DETECTIONS];
detectionAnchorIndeces = new float[1][NUM_DETECTIONS];
rawDetectionScores = new float[1][NUM_RAW_DETECTION_BOXES][NUM_CLASSES];
numDetections = new float[1];
rawDetectionBoxes = new float[1][NUM_RAW_DETECTION_BOXES][4];
&lt;denchmark-code&gt;    Object[] inputArray = {imgData};
    Map&lt;Integer, Object&gt; outputMap = new HashMap&lt;&gt;();

    outputMap.put(0, outputScores);         // [1,N] - Confidence Values
    outputMap.put(1, rawDetectionBoxes);    // [1,M,4] - Non-max-suppressed bounding boxes
    outputMap.put(2, numDetections);        // [N] - Number of detections
    outputMap.put(3, outputLocations);      // [1,N,4] - Bounding Boxes
    outputMap.put(4, outputClasses);        // [1,N] - class index
    outputMap.put(5, rawDetectionScores);   // [1,M,C] - raw detection scores
    outputMap.put(6, detectionMulticlassScores); // [1,N,C] - detection multiclass scores
    outputMap.put(7, detectionAnchorIndeces); // [1,N] detection anchor indeces

    Trace.endSection();

    // Run the inference call.
    Trace.beginSection("run");
    tfLite.runForMultipleInputsOutputs(inputArray, outputMap);
    Trace.endSection();`
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/11790686/98877457-66b5f700-2435-11eb-91c2-269ba1337593.png&gt;&lt;/denchmark-link&gt;

so after this tfnighlty version (tf-nightly==2.4.0-dev20200929)  the order of the output indices and their associated meaning change  and UNFORTUNATELY there is NO documentation as to what this order is and why it changes for different tfnightly versions -- this is too fragile --instead like the python code a Dictionary type datastructure class should be used so we can index into it by names like outputLocations rather than a numeric index
		</comment>
		<comment id='5' author='grewe' date='2020-11-16T22:01:19Z'>
		What is the progress on this?
		</comment>
		<comment id='6' author='grewe' date='2020-11-21T00:47:25Z'>
		&lt;denchmark-link:https://github.com/grewe&gt;@grewe&lt;/denchmark-link&gt;
 We have added Signature support in TFLite interpreter, so you can use Signature input/output names instead of tensor indices.
Python API support is ready and will be checked in soon.
Will update the issue here when it lands.
Thanks
		</comment>
		<comment id='7' author='grewe' date='2020-12-04T19:24:52Z'>
		Update:
API for using signature names instead of tensor names are added in C++ and Python. Java API will be updated soon.
You can try the python or C++. Will update the bug once the Java ones are added too.
Example,
my_signature = interpreter.get_signature_runner("my_method")
results = my_signature(input_1=input_tensor_1, input_2=input_tensor_2)
print(results["my_output"])
Thanks
		</comment>
		<comment id='8' author='grewe' date='2020-12-22T20:50:18Z'>
		&lt;denchmark-link:https://github.com/grewe&gt;@grewe&lt;/denchmark-link&gt;
 You can now use SignatureDef in TFLite in java API too. Example below
FloatBuffer output = FloatBuffer.allocate(1);
float[] inputX = {2.0f};
float[] inputY = {4.0f};
Map&lt;String, Object&gt; inputs = new HashMap&lt;&gt;();
inputs.put("x", inputX); // SignatureDef input is 'x'
inputs.put("y", inputY); // SignatureDef input is 'y'
Map&lt;String, Object&gt; outputs = new HashMap&lt;&gt;();
outputs.put("output_0", output); // SignatureDef output is 'output_0'
// runSignature takes the inputs/outputs maps
interpreter.runSignature(inputs, outputs);
I am going to close the issue. Please give it a try and let us know if you have any issues by creating new issue if needed.
Thanks
		</comment>
		<comment id='9' author='grewe' date='2020-12-22T20:50:20Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44743&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44743&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>