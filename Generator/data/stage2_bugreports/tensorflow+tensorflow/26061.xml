<bug id='26061' author='ageron' open_date='2019-02-24T15:30:38Z' closed_time='2019-05-17T17:35:54Z'>
	<summary>Cannot load a Keras model with a custom initializer/regularizer/constraint function</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Mac OS X 10.13.6
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
N/A
TensorFlow installed from (source or binary):
binary
TensorFlow version (use command below):
tf.version.VERSION == '2.0.0-dev20190222'
tf.version.GIT_VERSION == 'v1.12.0-8615-g74016a0d51'
Python version:
3.6.8
Bazel version (if compiling from source):
N/A
GCC/Compiler version (if compiling from source):
N/A
CUDA/cuDNN version:
N/A
GPU model and memory:
N/A

Describe the current behavior
I cannot load a model containing a custom initializer, or a custom regularizer, or a custom constraint, if they are defined as regular functions (rather than by subclassing the appropriate classes).
Describe the expected behavior
I expect it to work, since the model otherwise works fine, and is saved correctly.
Code to reproduce the issue
The following model uses a custom initializer, and a custom regularizer, and a custom constraint, it works fine, saves fine, but cannot be loaded. You can try using only one at a time, they all fail.
import tensorflow as tf
from tensorflow import keras
import numpy as np

def my_glorot_initializer(shape, dtype=tf.float32):
    stddev = tf.sqrt(2. / (shape[0] + shape[1]))
    return tf.random.normal(shape, stddev=stddev, dtype=dtype)

def my_l1_regularizer(weights):
    return tf.reduce_sum(tf.abs(0.01 * weights))

def my_positive_weights(weights):
    return tf.nn.relu(weights)

X_train = np.random.randn(100, 2)
y_train = np.random.randn(100, 1)

model = keras.models.Sequential([
    keras.layers.Dense(1,
                       kernel_regularizer=my_l1_regularizer,
                       kernel_constraint=my_positive_weights,
                       kernel_initializer=my_glorot_initializer),
])

model.compile(loss="mse", optimizer="nadam")
model.fit(X_train, y_train, epochs=2)
model.save("my_model.h5")
model = keras.models.load_model(
    "my_model.h5",
    custom_objects={
       "my_l1_regularizer": my_l1_regularizer(0.01),
       "my_positive_weights": my_positive_weights,
       "my_glorot_initializer": my_glorot_initializer,
    })
Other info / logs
Here's the stacktrace:
&lt;denchmark-code&gt;TypeError                                 Traceback (most recent call last)
&lt;ipython-input-1-e9ce6b82aa4f&gt; in &lt;module&gt;
     31        "my_l1_regularizer": my_l1_regularizer(0.01),
     32        "my_positive_weights": my_positive_weights,
---&gt; 33        "my_glorot_initializer": my_glorot_initializer,
     34     })

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/saving/hdf5_format.py in load_model(filepath, custom_objects, compile)
    214     model_config = json.loads(model_config.decode('utf-8'))
    215     model = model_config_lib.model_from_config(model_config,
--&gt; 216                                                custom_objects=custom_objects)
    217
    218     # set weights

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/saving/model_config.py in model_from_config(config, custom_objects)
     53                     '`Sequential.from_config(config)`?')
     54   from tensorflow.python.keras.layers import deserialize  # pylint: disable=g-import-not-at-top
---&gt; 55   return deserialize(config, custom_objects=custom_objects)
     56
     57

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/layers/serialization.py in deserialize(config, custom_objects)
     77       module_objects=globs,
     78       custom_objects=custom_objects,
---&gt; 79       printable_module_name='layer')

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)
    190             custom_objects=dict(
    191                 list(_GLOBAL_CUSTOM_OBJECTS.items()) +
--&gt; 192                 list(custom_objects.items())))
    193       with CustomObjectScope(custom_objects):
    194         return cls.from_config(cls_config)

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/sequential.py in from_config(cls, config, custom_objects)
    349     for layer_config in layer_configs:
    350       layer = layer_module.deserialize(layer_config,
--&gt; 351                                        custom_objects=custom_objects)
    352       model.add(layer)
    353     if not model.inputs and build_input_shape:

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/layers/serialization.py in deserialize(config, custom_objects)
     77       module_objects=globs,
     78       custom_objects=custom_objects,
---&gt; 79       printable_module_name='layer')

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)
    192                 list(custom_objects.items())))
    193       with CustomObjectScope(custom_objects):
--&gt; 194         return cls.from_config(cls_config)
    195     else:
    196       # Then `cls` may be a function returning a class.

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py in from_config(cls, config)
    414         A layer instance.
    415     """
--&gt; 416     return cls(**config)
    417
    418   def compute_output_shape(self, input_shape):

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/layers/core.py in __init__(self, units, activation, use_bias, kernel_initializer, bias_initializer, kernel_regularizer, bias_regularizer, activity_regularizer, kernel_constraint, bias_constraint, **kwargs)
    930     self.activation = activations.get(activation)
    931     self.use_bias = use_bias
--&gt; 932     self.kernel_initializer = initializers.get(kernel_initializer)
    933     self.bias_initializer = initializers.get(bias_initializer)
    934     self.kernel_regularizer = regularizers.get(kernel_regularizer)

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/initializers.py in get(identifier)
    176   elif isinstance(identifier, six.string_types):
    177     config = {'class_name': str(identifier), 'config': {}}
--&gt; 178     return deserialize(config)
    179   elif callable(identifier):
    180     return identifier

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/initializers.py in deserialize(config, custom_objects)
    165       module_objects=globals(),
    166       custom_objects=custom_objects,
--&gt; 167       printable_module_name='initializer')
    168
    169

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)
    199       custom_objects = custom_objects or {}
    200       with CustomObjectScope(custom_objects):
--&gt; 201         return cls(**cls_config)
    202   elif isinstance(identifier, six.string_types):
    203     function_name = identifier

TypeError: my_glorot_initializer() missing 1 required positional argument: 'shape'
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ageron' date='2019-04-02T00:38:28Z'>
		&lt;denchmark-link:https://github.com/omalleyt12&gt;@omalleyt12&lt;/denchmark-link&gt;
 -- can you comment on the proper format for serializing+deserializing of initializers?
		</comment>
		<comment id='2' author='ageron' date='2019-04-02T00:52:49Z'>
		&lt;denchmark-link:https://github.com/karmel&gt;@karmel&lt;/denchmark-link&gt;
 Sure
&lt;denchmark-link:https://github.com/ageron&gt;@ageron&lt;/denchmark-link&gt;
 Thanks for the issue, looks like all custom_objects are being treated as classes rather than functions. I'll work on the fix, a quick workaround would be to turn your functions into classes, with the current function as the class's  method
		</comment>
		<comment id='3' author='ageron' date='2019-05-17T17:35:54Z'>
		A fix should be available in the latest nightly :)
		</comment>
		<comment id='4' author='ageron' date='2019-05-17T17:35:56Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=26061&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=26061&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>