<bug id='27201' author='jgehw' open_date='2019-03-27T15:42:19Z' closed_time='2019-04-25T20:13:20Z'>
	<summary>Error when restoring model using an LSTM layer</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): YES
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 1803
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.13.1
Python version: 3.6.6
Bazel version (if compiling from source): NA
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version: NA
GPU model and memory: NA


Reincarnation of bug &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/25327&gt;#25327&lt;/denchmark-link&gt;
 for different layer type (LSTM rather than Embedding). After applying fix &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/cebce4a2b5e33a06a1c92772008082895568f10a&gt;cebce4a&lt;/denchmark-link&gt;
 for bug &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/25327&gt;#25327&lt;/denchmark-link&gt;
, the code provided below results in .
Describe the expected behavior
Should restore model rather than raise error.
Code to reproduce the issue
import tensorflow as tf
from tensorflow import keras
# from tensorflow.python.framework import graph_util
import graph_util_fixed as graph_util  # using file with fix cebce4a
from tensorflow.python.framework import graph_io
from tensorflow.python.platform import gfile

model = keras.models.Sequential()
model.add(keras.layers.Embedding(0x1000, output_dim=128))
model.add(keras.layers.LSTM(512))
model.add(keras.layers.Dense(1, activation="sigmoid"))

sess = keras.backend.get_session()
output_node_names = [node.op.name for node in model.outputs]
constant_graph = graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(), output_node_names)
graph_io.write_graph(constant_graph, ".", "test.pb", as_text=False)

with tf.Session() as sess:
    with gfile.FastGFile("test.pb", "rb") as f:
        graph_def = tf.GraphDef()
        graph_def.ParseFromString(f.read())
        sess.graph.as_default()
        tf.import_graph_def(graph_def, name="")
	</description>
	<comments>
		<comment id='1' author='jgehw' date='2019-03-28T17:52:03Z'>
		&lt;denchmark-link:https://github.com/jgehw&gt;@jgehw&lt;/denchmark-link&gt;
 For saving and restoring, we would recommend you use tf.keras.Model.save() or tf.keras.experimental.export_saved_model(model). These will export to the Keras serialization format and the TF Saved Model format, respectively, both of which can be restored.
		</comment>
		<comment id='2' author='jgehw' date='2019-03-28T20:42:50Z'>
		&lt;denchmark-link:https://github.com/karmel&gt;@karmel&lt;/denchmark-link&gt;
 Thanks for your hint. The code I provided was just a minimalistic example. Restoration of the model (i.e. the last 6 lines) is to be done using the tensorflow C bindings from a different program written in C++. I'd love to just call tf.keras.models.load_model() if it was available in the C bindings; the example code I provided was just my desperate try to get a tf.keras.Model saved in a way loadable using the tensorflow C bindings. Please correct me if I'm wrong or if there's a better way to achieve this.
		</comment>
		<comment id='3' author='jgehw' date='2019-04-15T16:48:48Z'>
		Assigning this to Kathy who is working on the save/load model. From my understanding of save/load model, we don't have strong support on c bindings. I will leave this to Kathy and Karmel for final answer.
		</comment>
		<comment id='4' author='jgehw' date='2019-04-16T20:34:12Z'>
		I don't entirely follow the use case and what you want, but the saved model loader provided from the TF C++ API will work with the models produced from tf.keras.experimental.export_saved_model, at least for inference: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/cc/saved_model/loader.h#L50&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/cc/saved_model/loader.h#L50&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='jgehw' date='2019-04-18T13:37:02Z'>
		&lt;denchmark-link:https://github.com/karmel&gt;@karmel&lt;/denchmark-link&gt;
 Thanks for pointing me to tf.keras.experimental.export_saved_model. I verified that this works in my setting, too. Provided that this experimental API will become regular API one day and not get removed, this obsoletes my code reproducing the issue.
		</comment>
		<comment id='6' author='jgehw' date='2019-04-25T20:13:20Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=27201&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=27201&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>