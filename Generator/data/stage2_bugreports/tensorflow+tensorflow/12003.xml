<bug id='12003' author='louishenrifranc' open_date='2017-08-03T14:18:13Z' closed_time='2017-08-29T16:57:46Z'>
	<summary>top_k doesn't order lower index first if two elements are equals</summary>
	<description>
&lt;denchmark-h:h1&gt;Bug&lt;/denchmark-h&gt;

If two elements are equal, top_k is not ordering them by index value.
&lt;denchmark-h:h1&gt;Reproducing the error&lt;/denchmark-h&gt;

Here is the command I am running
&lt;denchmark-code&gt;import tensorflow as tf
sess = tf.Session()
 sess.run(tf.nn.top_k(tf.convert_to_tensor([0, 0, 0, 0]), k=3))
&lt;/denchmark-code&gt;

And here is the output for Tensorflow 1.3.0-rc0
&lt;denchmark-code&gt;TopKV2(values=array([0, 0, 0], dtype=int32), indices=array([1, 3, 0], dtype=int32))
&lt;/denchmark-code&gt;

compared to version 1.2.1
&lt;denchmark-code&gt;TopKV2(values=array([0, 0, 0]), indices=array([0, 1, 2]))
&lt;/denchmark-code&gt;

&lt;denchmark-h:h1&gt;Setup&lt;/denchmark-h&gt;

Running tf_env_collect.sh:
&lt;denchmark-code&gt;
== cat /etc/issue ===============================================
Linux 0187adfde6c8 4.4.0-47-generic #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
VERSION="16.04.2 LTS (Xenial Xerus)"
VERSION_ID="16.04"
VERSION_CODENAME=xenial

== are we in docker =============================================
Yes

== compiler =====================================================
c++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


== uname -a =====================================================
Linux 0187adfde6c8 4.4.0-47-generic #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux

== check pips ===================================================
numpy (1.12.1)
protobuf (3.3.0)
tensorflow (1.3.0rc0)
tensorflow-tensorboard (0.1.2)

== check for virtualenv =========================================
False

== tensorflow import ============================================
tf.VERSION = 1.3.0-rc0
tf.GIT_VERSION = b'unknown'
tf.COMPILER_VERSION = b'unknown'
Sanity check: array([1], dtype=int32)

== env ==========================================================
LD_LIBRARY_PATH is unset
DYLD_LIBRARY_PATH is unset

== nvidia-smi ===================================================
tf_env_collect.sh: line 90: nvidia-smi: command not found

== cuda libs  ===================================================
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='louishenrifranc' date='2017-08-03T23:23:29Z'>
		I was able to reproduce in version 1.3.0-rc0 and rc1, confirmed it changed from version 1.2  Opening internal bug.
Thanks for the detailed report with simple repro example.
		</comment>
		<comment id='2' author='louishenrifranc' date='2017-08-04T00:32:31Z'>
		Stable sort was not part of the API guarantee, we changed it for the increased performance of unstable sort.
		</comment>
		<comment id='3' author='louishenrifranc' date='2017-08-04T00:40:25Z'>
		The documentation claims sort stability:
&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/nn/top_k&gt;https://www.tensorflow.org/api_docs/python/tf/nn/top_k&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='louishenrifranc' date='2017-08-10T17:26:32Z'>
		&lt;denchmark-link:https://github.com/poxvoculi&gt;@poxvoculi&lt;/denchmark-link&gt;
 thanks for pointing that out. We'll have to revert to stable_sort.
		</comment>
		<comment id='5' author='louishenrifranc' date='2017-08-29T16:57:33Z'>
		I believe this should be fixed now, or in the very next push.
		</comment>
		<comment id='6' author='louishenrifranc' date='2017-08-31T12:36:07Z'>
		Great thanks!
		</comment>
	</comments>
</bug>