<bug id='38632' author='gdhy9064' open_date='2020-04-17T09:26:18Z' closed_time='2020-06-20T01:35:49Z'>
	<summary>Some bugs of CategoricalCrossentropy and SparseCategoricalCrossentropy in tf.keras.losses</summary>
	<description>
It seems that there are some bugs of CategoricalCrossentropy and SparseCategoricalCrossentropy. The codes below will go wrong in tensorflow with version 2.2.0rc2.

Error of no gradients provided with categorical crossentropy .

&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
import tensorflow.keras as keras
import tensorflow.keras.backend as K
from tensorflow.keras.layers import *

i = Input([], dtype='int32')
o = Dense(2, activation='softmax')(i[:, None])
l = tf.keras.losses.categorical_crossentropy(K.one_hot(i, 2), o)
m = keras.Model(inputs=i, outputs=o)
m.add_loss(l)
m.compile(optimizer='adam')
m.fit(np.ones([1]))
&lt;/denchmark-code&gt;

and the same with the code below
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
import tensorflow.keras as keras
import tensorflow.keras.backend as K
from tensorflow.keras.layers import *

i = Input([], dtype='int32')
o = Dense(2, activation='softmax')(i[:, None])
l = tf.keras.losses.CategoricalCrossentropy()(K.one_hot(i, 2), o)
m = keras.Model(inputs=i, outputs=o)
m.add_loss(l)
m.compile(optimizer='adam')
m.fit(np.ones([1]))
&lt;/denchmark-code&gt;


Showing error that 'Sparse ops are not supported with functional models with built-in layer wrapping...' with sparse categorical crossentropy.

&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
import tensorflow.keras as keras
import tensorflow.keras.backend as K
from tensorflow.keras.layers import *

i = Input([], dtype='int32')
o = Dense(2, activation='softmax')(i[:, None])
l = tf.keras.losses.sparse_categorical_crossentropy(i, o)
m = keras.Model(inputs=i, outputs=o)
m.add_loss(l)
m.compile(optimizer='adam')
m.fit(np.ones([1]))
&lt;/denchmark-code&gt;

as well as the one below
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
import tensorflow.keras as keras
import tensorflow.keras.backend as K
from tensorflow.keras.layers import *

i = Input([], dtype='int32')
o = Dense(2, activation='softmax')(i[:, None])
l = tf.keras.losses.SparseCategoricalCrossentropy()(i, o)
m = keras.Model(inputs=i, outputs=o)
m.add_loss(l)
m.compile(optimizer='adam')
m.fit(np.ones([1]))
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='gdhy9064' date='2020-04-17T14:17:36Z'>
		The CategoricalCrossentropy sample code works with TF v2.1 but fails with TF v2.2.0-rc3 and TF-nightly. Whereas code for SparseCategoricalCrossentropy fails with all three versions. Please find the attached gist below


TF v2.1
https://colab.research.google.com/gist/amahendrakar/9593cd3693f10da12f4c8eea9cecc735/38632-2-1.ipynb


TF v2.2.0-rc3
https://colab.research.google.com/gist/amahendrakar/70de2b98f68054f90be8c1244f165946/38632-2-2.ipynb


TF-nightly
https://colab.research.google.com/gist/amahendrakar/1399f73ff9092916d4c9ab408093e067/38632-tf-nightly.ipynb


Thanks!
		</comment>
		<comment id='2' author='gdhy9064' date='2020-04-25T04:56:59Z'>
		Thank you &lt;denchmark-link:https://github.com/gdhy9064&gt;@gdhy9064&lt;/denchmark-link&gt;
. Could you provide more information on the use case you are looking to solve?
For the above use cases you can provide the loss in the compile API. If you want to create a loss that is dependent on layer inputs we recommend that you use  API in layer . Here is an example &lt;denchmark-link:https://colab.sandbox.google.com/drive/1zzLcJ2A2qofIvv94YJ3axRknlA6cBSIw&gt;colab&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='3' author='gdhy9064' date='2020-04-25T13:04:16Z'>
		&lt;denchmark-link:https://github.com/pavithrasv&gt;@pavithrasv&lt;/denchmark-link&gt;
 Yes, I'd like to create a loss which is depend on some layer inputs of a model. Sometimes I prefer to customize these losses with  API outside of a model for convenience, though it maybe not be of a neat structure. In my case, I can simply use  and  instead of  to meet my needs, but it would be better if I can use  or  API directly. And many thanks for your guidances on colab.
		</comment>
		<comment id='4' author='gdhy9064' date='2020-06-18T21:00:17Z'>
		Thank you &lt;denchmark-link:https://github.com/gdhy9064&gt;@gdhy9064&lt;/denchmark-link&gt;
, one simple workaround you can do for both the cases above is : remove activation parameter from the Dense layer and add a separate Activation layer like
&lt;denchmark-code&gt;    o = layers.Dense(2)(i[:, None])
    o = layers.Activation('softmax')(o)
&lt;/denchmark-code&gt;

We will fix the underlying issue soon.
		</comment>
		<comment id='5' author='gdhy9064' date='2020-06-19T09:38:24Z'>
		Thank you &lt;denchmark-link:https://github.com/pavithrasv&gt;@pavithrasv&lt;/denchmark-link&gt;
 , it works well with . It is a little pity that I can't still use with .
		</comment>
		<comment id='6' author='gdhy9064' date='2020-06-19T17:53:53Z'>
		I made the change in this nightly &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/1399f73ff9092916d4c9ab408093e067/38632-tf-nightly.ipynb#scrollTo=6vSINBWRA9GB&gt;colab&lt;/denchmark-link&gt;
. The workaround works for  as well. PTAL and let me know.
		</comment>
		<comment id='7' author='gdhy9064' date='2020-06-20T01:35:49Z'>
		Yes, it works for sparse_categorical_crossentropy in nightly version.
		</comment>
		<comment id='8' author='gdhy9064' date='2020-06-20T01:35:51Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38632&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38632&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>