<bug id='22207' author='Efaq' open_date='2018-09-11T07:17:29Z' closed_time='2019-08-28T17:31:58Z'>
	<summary>Example in Keras guide does not work when training with tf.data datasets</summary>
	<description>
Please go to Stack Overflow for help and support:
&lt;denchmark-link:https://stackoverflow.com/questions/tagged/tensorflow&gt;https://stackoverflow.com/questions/tagged/tensorflow&lt;/denchmark-link&gt;

If you open a GitHub issue, here is our policy:

It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).
The form below must be filled out.
It shouldn't be a TensorBoard issue. Those go here.

Here's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):no
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):Windows 10
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:na
TensorFlow installed from (source or binary):binary
TensorFlow version (use command below):1.11.0-dev20180907
Python version:v3.6.3:2c5fed8
Bazel version (if compiling from source):na
GCC/Compiler version (if compiling from source):na
CUDA/cuDNN version:na
GPU model and memory:na
Exact command to reproduce:na

You can collect some of this information using our environment capture script:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&lt;/denchmark-link&gt;

You can obtain the TensorFlow version with
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.
When going through the tutorial in &lt;denchmark-link:https://www.tensorflow.org/guide/keras&gt;https://www.tensorflow.org/guide/keras&lt;/denchmark-link&gt;
, training with numpy arrays works, but training with tf.data datasets only works if you first perform training with numpy arrays. I expected that you could train with tf.data datasets without first going through numpy arrays. This issue was first identified in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/20827&gt;#20827&lt;/denchmark-link&gt;
 but it was closed as solved at the moment, for some nightly build over tensorflow v1.9.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.
The code below works if one uncomments the line #model.fit(data, labels, epochs=10, batch_size=32). If it runs as it is, it will give an error, showed below.
Code:
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow import keras

model = keras.Sequential()
# Adds a densely-connected layer with 64 units to the model:
model.add(keras.layers.Dense(64, activation='relu'))
# Add another:
model.add(keras.layers.Dense(64, activation='relu'))
# Add a softmax layer with 10 output units:
model.add(keras.layers.Dense(10, activation='softmax'))

model.compile(optimizer=tf.train.AdamOptimizer(0.001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Configure a model for categorical classification.
model.compile(optimizer=tf.train.RMSPropOptimizer(0.01),
              loss=keras.losses.categorical_crossentropy,
              metrics=[keras.metrics.categorical_accuracy])

import numpy as np

data = np.random.random((1000, 32))
labels = np.random.random((1000, 10))

#model.fit(data, labels, epochs=10, batch_size=32)

# Instantiates a toy dataset instance:
dataset = tf.data.Dataset.from_tensor_slices((data, labels))
dataset = dataset.batch(32)
dataset = dataset.repeat()

# Don't forget to specify `steps_per_epoch` when calling `fit` on a dataset.
model.fit(dataset, epochs=10, steps_per_epoch=30)
&lt;/denchmark-code&gt;

Error:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "...\tensorflow\python\framework\op_def_library.py", line 510, in _apply_op_helper
    preferred_dtype=default_dtype)
  File "...\tensorflow\python\framework\ops.py", line 1145, in internal_convert_to_tensor
    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
  File "...\tensorflow\python\ops\variables.py", line 799, in _TensorConversionFunction
    "of type '%s'" % (dtype.name, v.dtype.name))
ValueError: Incompatible type conversion requested to type 'float64' for variable of type 'float32'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "...\temp.py", line 34, in &lt;module&gt;
    model.fit(dataset, epochs=10, steps_per_epoch=30)
  File "...\tensorflow\python\keras\engine\training.py", line 1440, in fit
    validation_split=validation_split)
  File "...\tensorflow\python\keras\engine\training.py", line 944, in _standardize_user_data
    class_weight, batch_size)
  File "...\tensorflow\python\keras\engine\training.py", line 984, in _standardize_weights
    self._set_inputs(x)
  File "...\tensorflow\python\training\checkpointable\base.py", line 426, in _method_wrapper
    method(self, *args, **kwargs)
  File "...\tensorflow\python\keras\engine\training.py", line 1198, in _set_inputs
    self._symbolic_set_inputs(inputs, training=training)
  File "...\tensorflow\python\training\checkpointable\base.py", line 426, in _method_wrapper
    method(self, *args, **kwargs)
  File "...\tensorflow\python\keras\engine\training.py", line 1282, in _symbolic_set_inputs
    outputs = self.call(dummy_input_values, training=training)
  File "...\tensorflow\python\keras\engine\sequential.py", line 232, in call
    inputs, training=training, mask=mask)
  File "...\tensorflow\python\keras\engine\sequential.py", line 250, in _call_and_compute_mask
    x = layer.call(x, **kwargs)
  File "...\tensorflow\python\keras\layers\core.py", line 947, in call
    outputs = gen_math_ops.mat_mul(inputs, self.kernel)
  File "...\tensorflow\python\ops\gen_math_ops.py", line 4856, in mat_mul
    name=name)
  File "...\tensorflow\python\framework\op_def_library.py", line 546, in _apply_op_helper
    inferred_from[input_arg.type_attr]))
TypeError: Input 'b' of 'MatMul' Op has type float32 that does not match type float64 of argument 'a'.

Process finished with exit code 1
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Efaq' date='2018-09-11T07:39:37Z'>
		I can confirm, with yesterday's nightly
TensorFlow v1.11.0-dev20180910
I also now get
Input 'b' of 'MatMul' Op has type float32 that does not match type float64 of argument 'a'.
again.
		</comment>
		<comment id='2' author='Efaq' date='2018-09-11T14:34:56Z'>
		&lt;denchmark-code&gt;data = np.random.random((1000, 32)).astype(np.float32)
labels = np.random.random((1000, 10)).astype(np.float32)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='Efaq' date='2018-09-11T14:56:47Z'>
		&lt;denchmark-link:https://github.com/zakizhou&gt;@zakizhou&lt;/denchmark-link&gt;
 thank you for the code lines. This is indeed a workaround, but the issue is that either you shouldn't need to do that (IMO the conversion could be automatic), or, if you do need, this should be stated in the Keras guide (preferably with some explanation...).
Exactly the same issue has been closed as solved once (&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/20827&gt;#20827&lt;/denchmark-link&gt;
), so I suppose this has been fixed somehow at that time.
		</comment>
		<comment id='4' author='Efaq' date='2018-09-12T01:12:07Z'>
		&lt;denchmark-link:https://github.com/pavithrasv&gt;@pavithrasv&lt;/denchmark-link&gt;
 is this still an issue?
		</comment>
		<comment id='5' author='Efaq' date='2019-01-16T19:29:55Z'>
		I am still seeing this issue.
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):Windows 7
TensorFlow installed from (source or binary):binary
TensorFlow version (use command below):1.12.0-rc2-3-ga6d8ffae09
Python version:v3.6.7
Bazel version (if compiling from source):na
GCC/Compiler version (if compiling from source):na
CUDA/cuDNN version:na
GPU model and memory:na
Exact command to reproduce:na
		</comment>
		<comment id='6' author='Efaq' date='2019-01-18T23:58:07Z'>
		pinging, I am seeing this issue on 1.12.0
		</comment>
		<comment id='7' author='Efaq' date='2019-01-19T19:33:12Z'>
		the solution is in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/20827&gt;#20827&lt;/denchmark-link&gt;
, you have to specify the input_shape for the first dense layer

&lt;denchmark-link:https://www.tensorflow.org/guide/keras&gt;https://www.tensorflow.org/guide/keras&lt;/denchmark-link&gt;
 needs to be updated
		</comment>
		<comment id='8' author='Efaq' date='2019-08-28T17:31:58Z'>
		&lt;denchmark-link:https://github.com/Efaq&gt;@Efaq&lt;/denchmark-link&gt;
 This was resolved already. I cannot reproduce the issue when I use . Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/137af30f9d6c70f254280023346cb0a7/tf_22207_keras_datasets.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
I am closing this issue as it was resolved. Please feel free to open it if the issue persists again. Thanks!
		</comment>
	</comments>
</bug>