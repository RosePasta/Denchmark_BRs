<bug id='528' author='dave-andersen' open_date='2015-12-16T22:15:37Z' closed_time='2015-12-17T21:47:58Z'>
	<summary>tf.image.resize_images and resize_{method} should work with single image as well as batch</summary>
	<description>
Or at least not transparently do the wrong thing with the resulting shape.
At present, it's necessary to
image = tf.expand_dims(image, [0])
and then squeeze it before passing to resize.
	</description>
	<comments>
		<comment id='1' author='dave-andersen' date='2015-12-17T21:47:58Z'>
		I've submitted a fix that corrects the broken case of this.  There was a missing squeeze if the input image was the same size as the desired output.
		</comment>
		<comment id='2' author='dave-andersen' date='2019-08-06T18:55:15Z'>
		&lt;denchmark-link:https://github.com/aselle&gt;@aselle&lt;/denchmark-link&gt;

I am encountering this again
&lt;denchmark-code&gt;    image = tf.image.resize(image, resize)

  File "//anaconda3/lib/python3.7/site-packages/tensorflow/python/ops/image_ops_impl.py", line 1182, in resize_images
    skip_resize_if_same=True)

  File "//anaconda3/lib/python3.7/site-packages/tensorflow/python/ops/image_ops_impl.py", line 1029, in _resize_images_common
    raise ValueError('\'images\' contains no shape.')

ValueError: 'images' contains no shape.

&lt;/denchmark-code&gt;

where image is a single image
def preprocess_image(
    filename:str,
    channels:int=3,
    resize:list=None,
    random_rotate:bool=False,
    rotate_angle:float=0.,
    random_transform:bool=False,
    transform_config:dict=None
)-&gt;list:
    '''
    Arguments:
        filename (str): the full path filename of an image
        channels (int): how many channels the image is assumed to have. Defaults
            to 3.
        resize (list): the resize dimensions to apply to the image. By default
            is set to None (no resize transformation is applied).

        random_rotate (bool): whether or not a random `angle` should be used.

        rotate_angle (float): the angle of which to rotate. Expected to be between `0`
            and `360`.

        random_transform (bool): whether or not `transform_config` should be
            provided to set `random_transform` or to `apply_transform`
        transform_config (dict): the parameters to be passed to `apply_transform`
            or `get_random_transform`. By default `None`.
    Returns:
        image (tf.Tensor): the pixel values fo the image
    '''
    image = tf.io.read_file(filename)
    image = tf.image.decode_jpeg(image, channels=channels)

    print(image) # &lt;--- for debug

    if rotate_angle is not None:
        image = tf_rotate_image(image, rotate_angle, random_rotate)
        # image /= 255.0

    if resize is not None:
        image = tf.image.resize(image, resize)
        image /= 255.0  # normalize to [0,1] range

    if transform_config is not None:
        if random_transform:
            image = apply_random_transform(image, **transform_config)
        else:
            image = apply_transform(image, **transform_config)
    return image
prints out
Tensor("DecodeJpeg:0", shape=(?, ?, 3), dtype=uint8)
		</comment>
	</comments>
</bug>