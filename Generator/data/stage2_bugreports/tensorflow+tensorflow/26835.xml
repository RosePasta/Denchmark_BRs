<bug id='26835' author='frogermcs' open_date='2019-03-18T14:25:03Z' closed_time='2019-08-02T22:02:45Z'>
	<summary>[TF2.0] KerasLayer cannot be loaded from .h5</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template

Run on Colab example from copied from tensorflow/hub: &lt;denchmark-link:https://colab.research.google.com/drive/1ymmzlWHieCuXR7UjXezULnYsNsDeHc9m&gt;https://colab.research.google.com/drive/1ymmzlWHieCuXR7UjXezULnYsNsDeHc9m&lt;/denchmark-link&gt;

Version:  2.0.0-alpha0
Eager mode:  True
Hub version:  0.3.0
GPU is available

When I try to run Colab example from tensorflow/hub for image retraining and then save/load model according to &lt;denchmark-link:https://www.tensorflow.org/alpha/guide/keras/saving_and_serializing&gt;the documentation&lt;/denchmark-link&gt;
, there are some issues with it.
After retraining, when we try to save the model::
&lt;denchmark-code&gt;# Save the model
model.save('path_to_my_model.h5')
&lt;/denchmark-code&gt;

This error occurs (already described here: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/26811&gt;#26811&lt;/denchmark-link&gt;
 )
&lt;denchmark-code&gt;//...skipped, see ticket above for details ^
h5py/_objects.pyx in h5py._objects.with_phil.wrapper()
h5py/_objects.pyx in h5py._objects.with_phil.wrapper()
h5py/h5o.pyx in h5py.h5o.link()
RuntimeError: Unable to create link (name already exists)
&lt;/denchmark-code&gt;

But actually path_to_my_model.h5 file is created. Then when I try to load it via:
&lt;denchmark-code&gt;# Recreate the exact same model purely from the file
new_model = keras.models.load_model('path_to_my_model.h5')
new_model.summary()
&lt;/denchmark-code&gt;

I get an error:
&lt;denchmark-code&gt;ValueError: Unknown layer: KerasLayer
&lt;/denchmark-code&gt;

Entire stacktrace:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-15-0ceb2f1e6ad5&gt; in &lt;module&gt;()
----&gt; 1 new_model = keras.models.load_model('path_to_my_model.h5')
      2 
      3 new_model.summary()

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/saving/hdf5_format.py in load_model(filepath, custom_objects, compile)
    213     model_config = json.loads(model_config.decode('utf-8'))
    214     model = model_config_lib.model_from_config(model_config,
--&gt; 215                                                custom_objects=custom_objects)
    216 
    217     # set weights

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/saving/model_config.py in model_from_config(config, custom_objects)
     53                     '`Sequential.from_config(config)`?')
     54   from tensorflow.python.keras.layers import deserialize  # pylint: disable=g-import-not-at-top
---&gt; 55   return deserialize(config, custom_objects=custom_objects)
     56 
     57 

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/layers/serialization.py in deserialize(config, custom_objects)
     93       module_objects=globs,
     94       custom_objects=custom_objects,
---&gt; 95       printable_module_name='layer')

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)
    190             custom_objects=dict(
    191                 list(_GLOBAL_CUSTOM_OBJECTS.items()) +
--&gt; 192                 list(custom_objects.items())))
    193       with CustomObjectScope(custom_objects):
    194         return cls.from_config(cls_config)

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/sequential.py in from_config(cls, config, custom_objects)
    349     for layer_config in layer_configs:
    350       layer = layer_module.deserialize(layer_config,
--&gt; 351                                        custom_objects=custom_objects)
    352       model.add(layer)
    353     if not model.inputs and build_input_shape:

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/layers/serialization.py in deserialize(config, custom_objects)
     93       module_objects=globs,
     94       custom_objects=custom_objects,
---&gt; 95       printable_module_name='layer')

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)
    179     config = identifier
    180     (cls, cls_config) = class_and_config_for_serialized_keras_object(
--&gt; 181         config, module_objects, custom_objects, printable_module_name)
    182 
    183     if hasattr(cls, 'from_config'):

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/utils/generic_utils.py in class_and_config_for_serialized_keras_object(config, module_objects, custom_objects, printable_module_name)
    164     cls = module_objects.get(class_name)
    165     if cls is None:
--&gt; 166       raise ValueError('Unknown ' + printable_module_name + ': ' + class_name)
    167   return (cls, config['config'])
    168 

ValueError: Unknown layer: KerasLayer
&lt;/denchmark-code&gt;

Entire colab to review: &lt;denchmark-link:https://colab.research.google.com/drive/1ymmzlWHieCuXR7UjXezULnYsNsDeHc9m&gt;https://colab.research.google.com/drive/1ymmzlWHieCuXR7UjXezULnYsNsDeHc9m&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='frogermcs' date='2019-03-28T01:14:56Z'>
		same problem here.
		</comment>
		<comment id='2' author='frogermcs' date='2019-03-28T12:58:19Z'>
		Same for Unknown layer: DenseFeatures
		</comment>
		<comment id='3' author='frogermcs' date='2019-04-04T13:57:36Z'>
		same for Unknown layer: DenseFeatures
		</comment>
		<comment id='4' author='frogermcs' date='2019-04-04T14:31:53Z'>
		Same issue for LSTM layers. When using 'ModelCheckpoint' callback.
File "h5py/_objects.pyx", line 54, in h5py._objects.with_phil.wrapper
File "h5py/_objects.pyx", line 55, in h5py._objects.with_phil.wrapper
File "h5py/h5o.pyx", line 202, in h5py.h5o.link
RuntimeError: Unable to create link (name already exists)
		</comment>
		<comment id='5' author='frogermcs' date='2019-04-14T15:31:18Z'>
		Same here.
&lt;denchmark-code&gt;ValueError: Unknown layer: DenseFeatures
&lt;/denchmark-code&gt;

Is there any update on this?
		</comment>
		<comment id='6' author='frogermcs' date='2019-04-18T14:01:19Z'>
		I'm wondering if it's a good idea to use tf.keras.applications.MobileNetV2 model instead of the module loaded from TF Hub.
It seems working after quick checks - tested model saving in this example: &lt;denchmark-link:https://www.tensorflow.org/alpha/tutorials/images/transfer_learning&gt;https://www.tensorflow.org/alpha/tutorials/images/transfer_learning&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='frogermcs' date='2019-04-22T15:15:26Z'>
		Not perfect, but there is a workaround:
SImply create the model from scratch every time (instead of loading from JSON/YAML) and then load the weights.
When using the DenseFeatures layer, the model will not be built after calling compile, so you will not be able to load the weights right away. You must either manually call the build() method or run a single batch through the model and then load the weights.
		</comment>
		<comment id='8' author='frogermcs' date='2019-04-22T20:07:43Z'>
		I think I found the solution (or another workaround).
Instead of:
&lt;denchmark-code&gt;model.save('path_to_my_model.h5')
&lt;/denchmark-code&gt;

Call:
&lt;denchmark-code&gt;tf.keras.experimental.export_saved_model(model, 'path_to_my_model.h5')
&lt;/denchmark-code&gt;

Instead of:
&lt;denchmark-code&gt;new_model = keras.models.load_model('path_to_my_model.h5')
new_model.summary()
&lt;/denchmark-code&gt;

Call:
&lt;denchmark-code&gt;reloaded_model = tf.keras.experimental.load_from_saved_model('path_to_my_model.h5', custom_objects={'KerasLayer':hub.KerasLayer})
print(reloaded_model.get_config())

#Get input shape from model.get_config()
reloaded_model.build((None, 224, 224, 3))
reloaded_model.summary()
&lt;/denchmark-code&gt;

Works like a charm. :)
Colaboratory with the code above: &lt;denchmark-link:https://colab.research.google.com/drive/17YerjXGUwqp48mB3-WSTipv4itizuOCP&gt;https://colab.research.google.com/drive/17YerjXGUwqp48mB3-WSTipv4itizuOCP&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='frogermcs' date='2019-05-03T06:58:25Z'>
		I use follow this code it work
&lt;denchmark-code&gt;model.save('./model/saved.h5')
new_model = tf.keras.models.load_model('./model/saved.h5',custom_objects='KerasLayer':hub.KerasLayer})
 new_model.summary()
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://colab.research.google.com/drive/1JLkVWpXhDwImuF930i5PWstJvu4ENDoc&gt;https://colab.research.google.com/drive/1JLkVWpXhDwImuF930i5PWstJvu4ENDoc&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='frogermcs' date='2019-05-03T15:58:18Z'>
		The crash with hub.KerasLayer likely needs to be fixed in tensorflow-hub, not tensorflow. I've filed issue &lt;denchmark-link:https://github.com/tensorflow/hub/issues/287&gt;tensorflow/hub#287&lt;/denchmark-link&gt;
 for that.
Can this issue here be closed then?
		</comment>
		<comment id='11' author='frogermcs' date='2019-05-09T21:06:02Z'>
		üëç Same problem.
		</comment>
		<comment id='12' author='frogermcs' date='2019-05-10T11:35:29Z'>
		The crash with hub.KerasLayer and an image module from tfhub.dev should be fixed by updating to their latest versions:
&lt;denchmark-link:https://tfhub.dev/google/tf2-preview/inception_v3/feature_vector/3&gt;https://tfhub.dev/google/tf2-preview/inception_v3/feature_vector/3&lt;/denchmark-link&gt;

&lt;denchmark-link:https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/3&gt;https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/3&lt;/denchmark-link&gt;

For details, see issue &lt;denchmark-link:https://github.com/tensorflow/hub/issues/287&gt;tensorflow/hub#287&lt;/denchmark-link&gt;

Can this issue be closed now, or is anyone using it to track the DenseLayer and LSTM problems with similar error messages but probably different root causes?
		</comment>
		<comment id='13' author='frogermcs' date='2019-05-17T19:35:53Z'>
		Any updates on ValueError: Unknown layer: DenseFeatures ?
		</comment>
		<comment id='14' author='frogermcs' date='2019-05-20T09:28:58Z'>
		Have the same issue when do model.save('model.h5') under tensorflow 1.13.1
		</comment>
		<comment id='15' author='frogermcs' date='2019-05-20T09:40:39Z'>
		
Have the same issue when do model.save('model.h5') under tensorflow 1.13.1

Recommended to install tf-nightly or tf-nightly-gpu also
and test follow &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/26835#issuecomment-488972247&gt;#26835 (comment)&lt;/denchmark-link&gt;

		</comment>
		<comment id='16' author='frogermcs' date='2019-05-20T11:34:13Z'>
		resolved by updating tf version to 2.0

ÂèëËá™ÊàëÁöÑ iPhone

Âú® 2019Âπ¥5Êúà20Êó•Ôºå17:47ÔºåOooO &lt;notifications@github.com&lt;mailto:notifications@github.com&gt;&gt; ÂÜôÈÅìÔºö


Have the same issue when do model.save('model.h5') under tensorflow 1.13.1
Recommended to install tf-nightly or tf-nightly-gpu also

and test follow &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/26835&gt;#26835&lt;/denchmark-link&gt;
 (comment)&lt;&lt;denchmark-link:https://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Ftensorflow%2Ftensorflow%2Fissues%2F26835%23issuecomment-488972247&amp;data=02%7C01%7C%7C7e2e94c948854a0bf13508d6dd08346b%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636939424643466257&amp;sdata=M5tDagIFSyWvX%2Bh%2BX1eWmEPBeT8Xeaqrb7HyaTHTWHI%3D&amp;reserved=0&gt;https://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Ftensorflow%2Ftensorflow%2Fissues%2F26835%23issuecomment-488972247&amp;data=02%7C01%7C%7C7e2e94c948854a0bf13508d6dd08346b%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636939424643466257&amp;sdata=M5tDagIFSyWvX%2Bh%2BX1eWmEPBeT8Xeaqrb7HyaTHTWHI%3D&amp;reserved=0&lt;/denchmark-link&gt;
&gt;

‚Äî
You are receiving this because you commented.
Reply to this email directly, view it on GitHub&lt;&lt;denchmark-link:https://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Ftensorflow%2Ftensorflow%2Fissues%2F26835%3Femail_source%3Dnotifications%26email_token%3DAGN6QFXOJJJ5TODYI7LYTWLPWJXT5A5CNFSM4G7HUWZKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODVYIHMY%23issuecomment-493913011&amp;data=02%7C01%7C%7C7e2e94c948854a0bf13508d6dd08346b%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636939424643476268&amp;sdata=LbB7PLQ68j1qcnPjTiwa67qxvU80XsE%2B9jCNdXeEPL8%3D&amp;reserved=0&gt;https://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Ftensorflow%2Ftensorflow%2Fissues%2F26835%3Femail_source%3Dnotifications%26email_token%3DAGN6QFXOJJJ5TODYI7LYTWLPWJXT5A5CNFSM4G7HUWZKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODVYIHMY%23issuecomment-493913011&amp;data=02%7C01%7C%7C7e2e94c948854a0bf13508d6dd08346b%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636939424643476268&amp;sdata=LbB7PLQ68j1qcnPjTiwa67qxvU80XsE%2B9jCNdXeEPL8%3D&amp;reserved=0&lt;/denchmark-link&gt;
&gt;, or mute the thread&lt;&lt;denchmark-link:https://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAGN6QFRPEUTENZOMTXRUTH3PWJXT5ANCNFSM4G7HUWZA&amp;data=02%7C01%7C%7C7e2e94c948854a0bf13508d6dd08346b%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636939424643486273&amp;sdata=8UOTn%2B%2Bu6IBnXmjw0omM6PKA1gLIqASEi%2BexYO5LsmQ%3D&amp;reserved=0&gt;https://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAGN6QFRPEUTENZOMTXRUTH3PWJXT5ANCNFSM4G7HUWZA&amp;data=02%7C01%7C%7C7e2e94c948854a0bf13508d6dd08346b%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636939424643486273&amp;sdata=8UOTn%2B%2Bu6IBnXmjw0omM6PKA1gLIqASEi%2BexYO5LsmQ%3D&amp;reserved=0&lt;/denchmark-link&gt;
&gt;.
		</comment>
		<comment id='17' author='frogermcs' date='2019-05-29T06:55:05Z'>
		Same for Unknown layer: DenseFeatures
		</comment>
		<comment id='18' author='frogermcs' date='2019-06-06T06:37:11Z'>
		I find a solution &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/26496#issuecomment-477246896&gt;#26496 (comment)&lt;/denchmark-link&gt;

# Load the Keras model into a session.
keras_model = tf.keras.models.load_model(
    keras_file, custom_objects={'VladPooling': VladPooling})
sess = tf.keras.backend.get_session()

# Convert the model.
converter = tf.lite.TFLiteConverter.from_session(sess, keras_model.inputs,
                                                 keras_model.outputs)
converter.convert()
		</comment>
		<comment id='19' author='frogermcs' date='2019-06-10T22:07:43Z'>
		Has anyone found a solution for how I can save a model with a feature layer. Right now I saved the weights of my model and then I rebuild the model and fit the model with epochs= 0; seems to do the trick for now. The results are repeatable, but this seems like it is not the most professional way to do it.
		</comment>
		<comment id='20' author='frogermcs' date='2019-08-02T22:02:45Z'>
		This is fixed in latest tf-nightly build '2.0.0-dev20190802'.
Thanks!
		</comment>
		<comment id='21' author='frogermcs' date='2019-08-02T22:02:47Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=26835&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=26835&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='22' author='frogermcs' date='2019-11-04T15:58:45Z'>
		
I think I found the solution (or another workaround).
Instead of:
model.save('path_to_my_model.h5')

Call:
tf.keras.experimental.export_saved_model(model, 'path_to_my_model.h5')

Instead of:
new_model = keras.models.load_model('path_to_my_model.h5')
new_model.summary()

Call:
reloaded_model = tf.keras.experimental.load_from_saved_model('path_to_my_model.h5', custom_objects={'KerasLayer':hub.KerasLayer})
print(reloaded_model.get_config())

#Get input shape from model.get_config()
reloaded_model.build((None, 224, 224, 3))
reloaded_model.summary()

Works like a charm. :)
Colaboratory with the code above: https://colab.research.google.com/drive/17YerjXGUwqp48mB3-WSTipv4itizuOCP

Thank you, It is worked for me in this way:
My error was: ValueError: Unknown layer: BatchNorm. As I have used KL.BatchNormalization class to compose this custom layer, I solved the error as follows:
&lt;denchmark-code&gt;from keras.models import load_model
import keras.layers as KL
trained_model_path = "./RESULTS/2019_10_30_10_17_53/bestmodel/MultiLabel_BIODI_weights.best.hdf5"
BIODI_model = load_model(trained_model_path, custom_objects={'BatchNorm':KL.BatchNormalization})
BIODI_model.summary()
&lt;/denchmark-code&gt;

		</comment>
		<comment id='23' author='frogermcs' date='2020-04-26T12:09:43Z'>
		
Not perfect, but there is a workaround:
SImply create the model from scratch every time (instead of loading from JSON/YAML) and then load the weights.
When using the DenseFeatures layer, the model will not be built after calling compile, so you will not be able to load the weights right away. You must either manually call the build() method or run a single batch through the model and then load the weights.

This is what I do every time but is there a faster way?
		</comment>
		<comment id='24' author='frogermcs' date='2020-05-04T06:25:51Z'>
		same unknown layer: kerasLayer
		</comment>
		<comment id='25' author='frogermcs' date='2020-05-27T09:19:36Z'>
		
I use follow this code it work
model.save('./model/saved.h5')
new_model = tf.keras.models.load_model('./model/saved.h5',custom_objects='KerasLayer':hub.KerasLayer})
 new_model.summary()

https://colab.research.google.com/drive/1JLkVWpXhDwImuF930i5PWstJvu4ENDoc

don't miss '{' after 'custom_objects='
		</comment>
		<comment id='26' author='frogermcs' date='2020-05-28T06:14:58Z'>
		Oh, thanks for pointing out. I was also wondering why my code didn't run last time.¬†
    On Wednesday, 27 May 2020, 05:20:00 pm GMT+8, AlAlaa Tashkandi &lt;notifications@github.com&gt; wrote:





I use follow this code it work
model.save('./model/saved.h5')
new_model = tf.keras.models.load_model('./model/saved.h5',custom_objects='KerasLayer':hub.KerasLayer})
 new_model.summary()

&lt;denchmark-link:https://colab.research.google.com/drive/1JLkVWpXhDwImuF930i5PWstJvu4ENDoc&gt;https://colab.research.google.com/drive/1JLkVWpXhDwImuF930i5PWstJvu4ENDoc&lt;/denchmark-link&gt;



don't miss '{' after 'custom_objects='

‚Äî
You are receiving this because you commented.
Reply to this email directly, view it on GitHub, or unsubscribe.
		</comment>
		<comment id='27' author='frogermcs' date='2020-05-31T08:51:38Z'>
		
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information
Run on Colab example from copied from tensorflow/hub: https://colab.research.google.com/drive/1ymmzlWHieCuXR7UjXezULnYsNsDeHc9m
Version: 2.0.0-alpha0
Eager mode: True
Hub version: 0.3.0
GPU is available
The issue
When I try to run Colab example from tensorflow/hub for image retraining and then save/load model according to the documentation, there are some issues with it.
After retraining, when we try to save the model::
# Save the model
model.save('path_to_my_model.h5')

This error occurs (already described here: #26811 )
//...skipped, see ticket above for details ^
h5py/_objects.pyx in h5py._objects.with_phil.wrapper()
h5py/_objects.pyx in h5py._objects.with_phil.wrapper()
h5py/h5o.pyx in h5py.h5o.link()
RuntimeError: Unable to create link (name already exists)

But actually path_to_my_model.h5 file is created. Then when I try to load it via:
# Recreate the exact same model purely from the file
new_model = keras.models.load_model('path_to_my_model.h5')
new_model.summary()

I get an error:
ValueError: Unknown layer: KerasLayer

Entire stacktrace:
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-15-0ceb2f1e6ad5&gt; in &lt;module&gt;()
----&gt; 1 new_model = keras.models.load_model('path_to_my_model.h5')
      2 
      3 new_model.summary()

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/saving/hdf5_format.py in load_model(filepath, custom_objects, compile)
    213     model_config = json.loads(model_config.decode('utf-8'))
    214     model = model_config_lib.model_from_config(model_config,
--&gt; 215                                                custom_objects=custom_objects)
    216 
    217     # set weights

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/saving/model_config.py in model_from_config(config, custom_objects)
     53                     '`Sequential.from_config(config)`?')
     54   from tensorflow.python.keras.layers import deserialize  # pylint: disable=g-import-not-at-top
---&gt; 55   return deserialize(config, custom_objects=custom_objects)
     56 
     57 

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/layers/serialization.py in deserialize(config, custom_objects)
     93       module_objects=globs,
     94       custom_objects=custom_objects,
---&gt; 95       printable_module_name='layer')

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)
    190             custom_objects=dict(
    191                 list(_GLOBAL_CUSTOM_OBJECTS.items()) +
--&gt; 192                 list(custom_objects.items())))
    193       with CustomObjectScope(custom_objects):
    194         return cls.from_config(cls_config)

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/sequential.py in from_config(cls, config, custom_objects)
    349     for layer_config in layer_configs:
    350       layer = layer_module.deserialize(layer_config,
--&gt; 351                                        custom_objects=custom_objects)
    352       model.add(layer)
    353     if not model.inputs and build_input_shape:

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/layers/serialization.py in deserialize(config, custom_objects)
     93       module_objects=globs,
     94       custom_objects=custom_objects,
---&gt; 95       printable_module_name='layer')

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)
    179     config = identifier
    180     (cls, cls_config) = class_and_config_for_serialized_keras_object(
--&gt; 181         config, module_objects, custom_objects, printable_module_name)
    182 
    183     if hasattr(cls, 'from_config'):

/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/utils/generic_utils.py in class_and_config_for_serialized_keras_object(config, module_objects, custom_objects, printable_module_name)
    164     cls = module_objects.get(class_name)
    165     if cls is None:
--&gt; 166       raise ValueError('Unknown ' + printable_module_name + ': ' + class_name)
    167   return (cls, config['config'])
    168 

ValueError: Unknown layer: KerasLayer

Entire colab to review: https://colab.research.google.com/drive/1ymmzlWHieCuXR7UjXezULnYsNsDeHc9m

use this
tf.keras.models.load_model('model.h5',custom_objects={'KerasLayer':tfhub.KerasLayer})
		</comment>
		<comment id='28' author='frogermcs' date='2020-05-31T08:52:02Z'>
		Use this code instead :
tf.keras.models.load_model('DogVisionModel.h5',custom_objects={'KerasLayer':tfhub.KerasLayer})
		</comment>
		<comment id='29' author='frogermcs' date='2020-05-31T09:20:41Z'>
		Thanks! I will update the code according to your post. I really appreciate your effort.
    On Sunday, 31 May 2020, 04:52:21 pm GMT+8, Philip Purwoko &lt;notifications@github.com&gt; wrote:




Use this code instead :
tf.keras.models.load_model('DogVisionModel.h5',custom_objects={'KerasLayer':tfhub.KerasLayer})

‚Äî
You are receiving this because you commented.
Reply to this email directly, view it on GitHub, or unsubscribe.
		</comment>
		<comment id='30' author='frogermcs' date='2020-07-05T10:32:57Z'>
		
I use follow this code it work
model.save('./model/saved.h5')
new_model = tf.keras.models.load_model('./model/saved.h5',custom_objects='KerasLayer':hub.KerasLayer})
 new_model.summary()

https://colab.research.google.com/drive/1JLkVWpXhDwImuF930i5PWstJvu4ENDoc

Adding the KeralLayer inside the model_from_json command also did the trick for me.
&lt;denchmark-code&gt;with open(os.path.join(os.getcwd(), 'model_three\\model_english_google_news_without_OOV_{0}batchsize_{1}.json'.format(str(dense_layer_batch_size), version_data_control)),'r') as f:
        model_json = json.load(f)

model_imported = model_from_json(model_json, custom_objects={'KerasLayer':hub.KerasLayer})

model_imported.load_weights(os.path.join(os.getcwd(), 'model_three\\model_english_google_news_without_OOV_{0}batchsize_{1}.h5'.format(str(dense_layer_batch_size), version_data_control)))

model_imported.compile(optimizer=optimizer_adam_v2(x_train_data_shape, training_validation_split_ratio, dense_layer_batch_size),
                           loss=model_loss_function,
                           metrics=model_metric_function)
print(type(model_imported))
print("\nModel is loaded successfully\n")
&lt;/denchmark-code&gt;

		</comment>
		<comment id='31' author='frogermcs' date='2020-07-12T04:08:56Z'>
		Thanks for the effort Nikos Spanos. I'll be updating my colab code.    On Sunday, July 5, 2020, 06:33:15 PM GMT+8, Nikos Spanos &lt;notifications@github.com&gt; wrote:





I use follow this code it work
model.save('./model/saved.h5')
new_model = tf.keras.models.load_model('./model/saved.h5',custom_objects='KerasLayer':hub.KerasLayer})
 new_model.summary()

&lt;denchmark-link:https://colab.research.google.com/drive/1JLkVWpXhDwImuF930i5PWstJvu4ENDoc&gt;https://colab.research.google.com/drive/1JLkVWpXhDwImuF930i5PWstJvu4ENDoc&lt;/denchmark-link&gt;



Adding the KeralLayer inside the model_from_json command also did the trick for me.
with open(os.path.join(os.getcwd(), 'model_three\\model_english_google_news_without_OOV_{0}batchsize_{1}.json'.format(str(dense_layer_batch_size), version_data_control)),'r') as f:
        model_json = json.load(f)

model_imported = model_from_json(model_json, custom_objects={'KerasLayer':hub.KerasLayer})

model_imported.load_weights(os.path.join(os.getcwd(), 'model_three\\model_english_google_news_without_OOV_{0}batchsize_{1}.h5'.format(str(dense_layer_batch_size), version_data_control)))

model_imported.compile(optimizer=optimizer_adam_v2(x_train_data_shape, training_validation_split_ratio, dense_layer_batch_size),
                           loss=model_loss_function,
                           metrics=model_metric_function)
print(type(model_imported))
print("\nModel is loaded successfully\n")

‚Äî
You are receiving this because you commented.
Reply to this email directly, view it on GitHub, or unsubscribe.
		</comment>
		<comment id='32' author='frogermcs' date='2020-08-09T16:14:05Z'>
		
I'm wondering if it's a good idea to use tf.keras.applications.MobileNetV2 model instead of the module loaded from TF Hub.
It seems working after quick checks - tested model saving in this example: https://www.tensorflow.org/alpha/tutorials/images/transfer_learning

Agree, I'm discarding TF Hub for the moment because of that issue,  tf.keras.applications.MobileNetV2 worked just fine.
		</comment>
		<comment id='33' author='frogermcs' date='2020-11-23T02:30:00Z'>
		In my case, I could solve this problem by updating tensorflow from 2.2.0 to 2.3.0
		</comment>
	</comments>
</bug>