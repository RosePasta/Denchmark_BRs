<bug id='32730' author='msoelch' open_date='2019-09-23T14:19:09Z' closed_time='2020-06-02T07:16:19Z'>
	<summary>tf.nn.relu on nan inputs returns zeros on GPU</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes, see minimal example code section below.
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.13.1 and 1.14.0
Python version: 3.6.5
CUDA/cuDNN version: 10.0, 7.6.3
GPU model and memory: GeForce GTX 1080 (8GB)

Describe the current behavior
The behavior of tf.nn.relu when fed with nan-valued inputs is inconsistent:

if the input is a constant tensor, relu returns nan.
if the input is a variable tensor (like nan wrapped into tf.Variable or multiplied by a random tensor), it returns zeros.

This behavior can only be observed on the GPU. On the CPU, relu consistently returns nan. The behavior on the CPU is also consistent with other activation functions.
Describe the expected behavior
tf.nn.relu should handle nan inputs from all sources consistently. To keep consistency with other activation functions, it should return nan in all cases.
Code to reproduce the issue
The assertions below all pass. The second and third assertion (the not assertions) would be expected to fail.
x1 = tf.nn.relu(np.nan)
x2 = tf.nn.relu(np.nan * tf.random_normal(shape=[]))
x3 = tf.nn.relu(tf.Variable(np.nan))

with tf.device("/cpu:0"):
    x1_cpu = tf.nn.relu(np.nan)
    x2_cpu = tf.nn.relu(np.nan * tf.random_normal(shape=[]))
    x3_cpu = tf.nn.relu(tf.Variable(np.nan))

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    assert np.all(np.isnan(sess.run(x1)))
    assert not np.any(np.isnan(sess.run(x2)))  # should fail but does not
    assert not np.any(np.isnan(sess.run(x3)))  # should fail but does not

    assert np.all(np.allclose(sess.run(x2), 0.0))
    assert np.all(np.allclose(sess.run(x3), 0.0))

    assert np.all(np.isnan(sess.run(x1_cpu)))
    assert np.all(np.isnan(sess.run(x2_cpu)))
    assert np.all(np.isnan(sess.run(x3_cpu)))
	</description>
	<comments>
		<comment id='1' author='msoelch' date='2019-09-24T05:51:59Z'>
		Thanks for reporting the issue, its replicating for TF-1.14. Kindly find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/oanush/062f044c9b794f5ca05dd17070873d5a/32730.ipynb&gt;gist&lt;/denchmark-link&gt;
 of colab.
		</comment>
		<comment id='2' author='msoelch' date='2020-05-23T15:09:41Z'>
		&lt;denchmark-link:https://github.com/msoelch&gt;@msoelch&lt;/denchmark-link&gt;
 Sorry for the delay in my response. This was resolved in recent  version . I ran your code and cannot reproduce anymore. Please take a look at the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/ff32c27d1f56b18d59cafeb02777a1b4/32730.ipynb&gt;gist&lt;/denchmark-link&gt;
. Thanks!
Please verify once and close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='3' author='msoelch' date='2020-05-29T09:28:35Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 Thank you. The issue indeed seems fixed in .
However, the bug shows in the latest TF2.2, with a similar snippet:
x1 = tf.nn.relu(np.nan)
x2 = tf.nn.relu(np.nan * tf.random.normal(shape=[]))
x3 = tf.nn.relu(tf.Variable(np.nan))
with tf.device("/cpu:0"):
    x1_cpu = tf.nn.relu(np.nan)
    x2_cpu = tf.nn.relu(np.nan * tf.random.normal(shape=[]))
    x3_cpu = tf.nn.relu(tf.Variable(np.nan))

assert np.all(np.isnan(x1_cpu.numpy()))
assert np.all(np.isnan(x2_cpu.numpy()))
assert np.all(np.isnan(x3_cpu.numpy()))

assert np.all(np.isnan(x1.numpy()))
assert np.all(np.isnan(x2.numpy()))
assert np.all(np.isnan(x3.numpy()))
The first group of assertions on CPU passes, the second group on GPU fails.
		</comment>
		<comment id='4' author='msoelch' date='2020-05-29T17:18:59Z'>
		&lt;denchmark-link:https://github.com/msoelch&gt;@msoelch&lt;/denchmark-link&gt;
 Thanks for the confirmation that it is working as expected with . Please update the question or create a new issue as the original issue was resolved. It will be easy for users to follow the issue. Thanks!
		</comment>
		<comment id='5' author='msoelch' date='2020-06-02T07:16:18Z'>
		I've created &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/40072&gt;#40072&lt;/denchmark-link&gt;
 as a follow-up for . That should close this issue.
		</comment>
		<comment id='6' author='msoelch' date='2020-06-02T07:16:20Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32730&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32730&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>