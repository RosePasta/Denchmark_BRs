<bug id='39832' author='andrewsali' open_date='2020-05-24T12:58:10Z' closed_time='2020-07-07T13:51:39Z'>
	<summary>Wrong result when calling 'multi-line' lambda inside @tf.function</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux, Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v2.2.0-rc4-8-g2b96f3662b 2.2.0
Python version: 3.7.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Describe the current behavior
When decorating a function using tf.function that uses a lambda that extends to multiple lines,
only the first line is considered. When not decorating the function using tf.function the result is correct.
Describe the expected behavior
tf.function should not alter the function behaviour. In the example below, it prints 1 instead of 0. Removing the tf.function decorator gives the correct result. Moving the lambda into a single line gives again a correct result.
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
&lt;denchmark-code&gt;import tensorflow as tf

a = (
     lambda y: lambda x: x*y 
     - y
    )(1)

@tf.function
def test_lambda():
    tf.print(a(1))
    
test_lambda()
&lt;/denchmark-code&gt;

Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
The issue was noticed after applying black formatting changed the code output.
	</description>
	<comments>
		<comment id='1' author='andrewsali' date='2020-05-25T08:29:40Z'>
		I have tried in colab with TF version 2.2 , nightly version and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/313709a5c0c9e445aee01e37d8c1d99f/untitled36.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='2' author='andrewsali' date='2020-05-26T16:32:25Z'>
		This looks like an underlying Python bug:
&lt;denchmark-code&gt;l = (
     lambda y: lambda x: x*y
     - y
    )

import inspect
print(inspect.getsource(l))
&lt;/denchmark-code&gt;

Output:
&lt;denchmark-code&gt;     lambda y: lambda x: x*y
&lt;/denchmark-code&gt;

It looks like the parser misses the second line.
To fix this, we'll need to work around this bug.
		</comment>
		<comment id='3' author='andrewsali' date='2020-06-29T08:08:25Z'>
		Is there any update maybe on this issue? It is concerning that code formatting / linting cannot be safely applied with tf.function
		</comment>
		<comment id='4' author='andrewsali' date='2020-06-29T13:40:23Z'>
		We have confirmed this is caused by a bug in Python, but I think we'll have a workaround in TF 2.4. In the mean time, these practices should help avoid running into this bug:

Avoid placing lambdas inside expressions that could break them across multiple lines, and instead define them on a separate line:

&lt;denchmark-code&gt;partial = lambda y: lambda x: x*y - y
l = partial(1)
&lt;/denchmark-code&gt;


Prefer using normal local functions when the body might be too long to fit on a single line:

&lt;denchmark-code&gt;def partial(y):
  return lambda x, y: x*y - y
l = partial(1)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='andrewsali' date='2020-07-07T13:51:41Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39832&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39832&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='andrewsali' date='2020-07-07T14:17:45Z'>
		Quick update: a more robust fix for this is now in and should be available in tf-nightly and TF 2.4 later this year. The new parsing method should robustly process all cases, and raises an error when it can't determine the proper function with certainty (which should only happen in rare cases).
		</comment>
		<comment id='7' author='andrewsali' date='2020-07-07T14:47:53Z'>
		Fantastic, thanks!
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Tue, Jul 7, 2020, 16:18 Dan Moldovan ***@***.***&gt; wrote:
 Quick update: a more robust fix for this is now in and should be available
 in tf-nightly and TF 2.4 later this year. The new parsing method should
 robustly process all cases, and raises an error when it can't determine the
 proper function with certainty (which should only happen in rare cases).

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 &lt;#39832 (comment)&gt;,
 or unsubscribe
 &lt;https://github.com/notifications/unsubscribe-auth/ADTBRJ2PGTOJYCP3B5FQ7MLR2MVBZANCNFSM4NI4CCVQ&gt;
 .



		</comment>
	</comments>
</bug>