<bug id='38269' author='amaiya' open_date='2020-04-06T14:05:32Z' closed_time='2020-04-06T20:43:59Z'>
	<summary>TF 2.2.0-rc2 tf.Keras API:  model.loss_functions no longer exists</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock
example script provided in TensorFlow):  Yes
OS Platform and Distribution:  Ubuntu 18.04
TensorFlow installed from (binary): v2.2.0-rc1-34-ge6e5d6df2a 2.2.0-rc2
CUDA/cuDNN version: cuda-10.1

Describe the current behavior
In tf.Keras API in  TensorFlow 2.2.0, model.loss_functions no longer exists.  Instead the loss functions are buried and seem to be only accessible with code like this:
model.compiled_loss._get_loss_object(model.compiled_loss._losses).fn
Being able to easily access loss functions associated with a model is important for many applications that are built on TensorFlow.  Moreover, this is an undocumented breaking change.
Describe the expected behavior
The loss functions associated with a model should be more directly and easily accessible like model.loss_functions, which is the way loss functions are accessed in TensorFlow 2.1.0.
Standalone code to reproduce the issue
from tensorflow.keras.models import Sequential  
from tensorflow.keras.layers import Dense, Activation  
model = Sequential()  
model.add(Dense(10, input_dim=10, activation='softmax'))  
model.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy']) 

# works in TF 2.2.0-rc2, but does NOT work in previous versions like 2.1.0
model.compiled_loss._get_loss_object(model.compiled_loss._losses).fn

# does NOT work in TF 2.2.0-rc2, but works in TF 2.1.0
model.loss_functions[0].fn
	</description>
	<comments>
		<comment id='1' author='amaiya' date='2020-04-06T17:07:00Z'>
		This looks related to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/38150&gt;#38150&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='amaiya' date='2020-04-06T20:43:59Z'>
		&lt;denchmark-link:https://github.com/amaiya&gt;@amaiya&lt;/denchmark-link&gt;
 This was removed as a part of a refactor and was an intended change. Sorry this was not communicated in our release notes, i have updated the notes now. This was an undocumented property that was accidentally public.
You can access list of loss functions in the tf.keras.losses module.
		</comment>
		<comment id='3' author='amaiya' date='2020-04-06T20:44:01Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38269&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38269&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='amaiya' date='2020-04-06T21:01:00Z'>
		The tf.keras.losses module does not allow  you to identify the loss function tied to a compiled model.  So, this solution isn't really satisfactory.  The loss function associated with a compiled model should be publicly accessible, which was part of the point of this issue.
		</comment>
		<comment id='5' author='amaiya' date='2020-04-07T02:21:01Z'>
		Oh i meant you can use tf.keras.losses.get to get the loss function using a string. Since loss value is passed to the compile API it should be easy to compile list of loss functions from what's being passed. You can also use model.compiled_loss.metrics.
		</comment>
		<comment id='6' author='amaiya' date='2020-04-07T03:02:12Z'>
		I see - thanks.
So, the idea is to obtain the loss function string names and supply that to tf.keras.losses.get.   In situations where you may not have access to the loss function string names originally supplied to model.compile (e.g., libraries that accept a compiled model as input to facilitate training), what is the best way to obtain the loss function string names directly from the model?  If a model is compiled with a loss function using a string name or loss object, it would make sense for it be possible to query the model and retrieve the loss function (or loss function string name) from the model using public API.
You suggested model.compiled_loss.metrics, but this is an empty list using the example above.  Only  model.compiled_loss._losses contains the string names:
&lt;denchmark-code&gt;In [1]: from tensorflow.keras.models import Sequential   
   ...: from tensorflow.keras.layers import Dense, Activation   
   ...: model = Sequential()   
   ...: model.add(Dense(10, input_dim=10, activation='softmax'))   
   ...: model.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])  

In [2]: model.compiled_loss.metrics                                                                                                                                                                         
Out[2]: []

In [3]: model.compiled_loss._losses                                                                                                                                                                         
Out[3]: 'categorical_crossentropy'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='amaiya' date='2020-04-07T03:27:24Z'>
		model.compiled_loss.metrics gets populated after a model is actually trained /evaluated.
		</comment>
		<comment id='8' author='amaiya' date='2020-04-07T14:21:01Z'>
		I see that model.compiled_loss.metrics is populated after training, but it doesn't return what you claim it returns:
&lt;denchmark-code&gt;In [18]: model.compiled_loss.metrics # no loss function string name                                                                                                                                                                         
Out[18]: [&lt;tensorflow.python.keras.metrics.Mean at 0x7fc85af8a6d8&gt;]
&lt;/denchmark-code&gt;

There should be an easy and public way to query a model to identify either the loss function or loss function string name (in this case 'categorical_crossentropy') without resorting to underscore atrributes like this::
&lt;denchmark-code&gt;In [19]: model.compiled_loss._losses                                                                                                                                                                        
Out[19]: [&lt;tensorflow.python.keras.losses.LossFunctionWrapper at 0x7fc85aed4a90&gt;]

In [20]: model.compiled_loss._losses[0].fn                                                                                                                                                                  
Out[20]: &lt;function tensorflow.python.keras.losses.categorical_crossentropy(y_true, y_pred, from_logits=False, label_smoothing=0)&gt;

&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>