<bug id='37983' author='hannesdm' open_date='2020-03-27T18:02:30Z' closed_time='2020-04-11T23:32:20Z'>
	<summary>Calling next with a default value on an exhausted Dataset iterator raises an OutOfRangeError in graph mode</summary>
	<description>
System information

Have I written custom code: Yes
OS Platform and Distribution:  Windows 10
TensorFlow installed from binary: 2.1.0

Describe the current behavior
next(iterator, default) is supposed to give the next element in the iterator or the value given as default if the iterator is at the end.
However, when using the above construction in a function with @tf.function, the default value is not returned and an error (tensorflow.python.framework.errors_impl.OutOfRangeError) is produced when trying to call next on an iterator that is at the end.
When running this code in eager mode, the default value is returned as expected.
Describe the expected behavior
In graph mode the default value should be returned when at the end of an iterator.
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf

x = tf.convert_to_tensor([[1], [2], [3]])
ds = tf.data.Dataset.from_tensor_slices(x)
dsi = iter(ds)


@tf.function # remove this to get the expected behaviour
def func():
    for _ in range(4):
        tf.print(next(dsi, -1))


func()
&lt;/denchmark-code&gt;

Output (see below for a full stacktrace):
&lt;denchmark-code&gt;[1]
[2]
[3]
2020-03-27 18:56:09.523946: W tensorflow/core/common_runtime/base_collective_executor.cc:217] BaseCollectiveExecutor::StartAbort Out of range: End of sequence
	 [[{{node IteratorGetNext_3}}]]
&lt;/denchmark-code&gt;

Expected output:
&lt;denchmark-code&gt;[1]
[2]
[3]
-1

&lt;/denchmark-code&gt;


 &lt;denchmark-link:https://colab.research.google.com/drive/1PBxoXiE48aC-bo-aY-Bau1Igt4Aj6OFy&gt;https://colab.research.google.com/drive/1PBxoXiE48aC-bo-aY-Bau1Igt4Aj6OFy&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/4395116/stacktrace.txt&gt;stacktrace.txt&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='hannesdm' date='2020-03-28T12:05:58Z'>
		&lt;denchmark-link:https://github.com/hannesdm&gt;@hannesdm&lt;/denchmark-link&gt;
, I have tried after removing  decorator and got expected output.
		</comment>
		<comment id='2' author='hannesdm' date='2020-03-28T13:28:33Z'>
		
@hannesdm, I have tried after removing @tf.function decorator and got expected output.

Yes, everything works as it should without @tf.function, the bug only occurs in graph mode i.e. with @tf.function.
		</comment>
		<comment id='3' author='hannesdm' date='2020-04-11T23:32:21Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37983&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37983&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>