<bug id='25096' author='ageron' open_date='2019-01-22T08:06:34Z' closed_time='2019-01-28T18:03:04Z'>
	<summary>TF2.0-preview: cannot use layer as activation function anymore</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Mac OS X 10.13.6
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
N/A
TensorFlow installed from (source or binary):
binary
TensorFlow version (use command below):
VERSION="1.13.0-dev20190117" (this is the TF 2.0-preview)
GIT_VERSION="b'v1.12.0-6228-g69b9e5358b'"
Python version:
3.6.8
Bazel version (if compiling from source):
N/A
GCC/Compiler version (if compiling from source):
N/A
CUDA/cuDNN version:
N/A
GPU model and memory:
N/A

Describe the current behavior
When I try to use a layer as an activation function in a Dense layer, I get an AttributeError: 'Tensor' object has no attribute 'numpy'. This did not happen a few days ago in TF 2.0-preview.
Describe the expected behavior
I expect no error.
Code to reproduce the issue
import tensorflow as tf
from tensorflow import keras

#### BAD (raise AttributeError):
my_softplus = keras.layers.Activation("softplus")
#my_softplus = keras.layers.Lambda(tf.nn.softplus)
#my_softplus = keras.layers.Lambda(lambda X: tf.nn.softplus(X))
#my_softplus = keras.layers.Lambda(tf.function(lambda X: tf.nn.softplus(X)))

#### GOOD:
#my_softplus = "softplus"
#my_softplus = tf.nn.softplus
#my_softplus = lambda X: tf.nn.softplus(X)
#my_softplus = tf.function(lambda X: tf.nn.softplus(X))

model = keras.models.Sequential([
    keras.layers.Dense(1, activation=my_softplus, input_shape=[5])
])
There is no problem when the my_softplus layer is used as a separate layer, but the Keras API specifies that layers can be used like any function, so I expect to be able to use them as activation functions (and it was possible before).
Other info / logs
Here is the stacktrace:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
  File "/Users/ageron/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/training/checkpointable/base.py", line 455, in _method_wrapper
    method(self, *args, **kwargs)
  File "/Users/ageron/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/sequential.py", line 112, in __init__
    self.add(layer)
  File "/Users/ageron/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/training/checkpointable/base.py", line 455, in _method_wrapper
    method(self, *args, **kwargs)
  File "/Users/ageron/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/sequential.py", line 167, in add
    layer(x)
  File "/Users/ageron/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py", line 564, in __call__
    outputs = self.call(inputs, *args, **kwargs)
  File "/Users/ageron/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/layers/core.py", line 979, in call
    return self.activation(outputs)  # pylint: disable=not-callable
  File "/Users/ageron/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py", line 531, in __call__
    base_layer_utils.create_keras_history(inputs)
  File "/Users/ageron/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer_utils.py", line 251, in create_keras_history
    _create_keras_history_helper(tensors, set())
  File "/Users/ageron/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer_utils.py", line 288, in _create_keras_history_helper
    constants[i] = backend.function([], [op_input])([])
  File "/Users/ageron/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/backend.py", line 3174, in __call__
    [x.numpy() for x in outputs])
  File "/Users/ageron/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/backend.py", line 3174, in &lt;listcomp&gt;
    [x.numpy() for x in outputs])
AttributeError: 'Tensor' object has no attribute 'numpy'
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ageron' date='2019-01-22T09:38:21Z'>
		I just ran into the same AttributeError when trying to create a custom layer:
from tensorflow import keras

class MyActivation(keras.layers.Layer):
    def __init__(self, activation=None, **kwargs):
        self.activation = keras.layers.Activation(activation)
        super(MyActivation, self).__init__(**kwargs)
    def call(self, X):
        return self.activation(X + 1.)

model = keras.models.Sequential([
    MyActivation(activation="softplus", input_shape=[5])
])
The exception disappears if I replace X + 1. with X, or if I add @tf.function before def call(...).
		</comment>
		<comment id='2' author='ageron' date='2019-01-24T00:39:24Z'>
		Thanks for raising this issue, this should be fixed in the next nightly of the preview. It may take a day or two to appear
		</comment>
	</comments>
</bug>