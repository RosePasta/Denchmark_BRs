<bug id='30050' author='calledbymountains' open_date='2019-06-22T20:11:18Z' closed_time='2019-07-01T19:05:10Z'>
	<summary>Composing layers using functools in TF 2.0 gives error</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): YES
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): CentOS 7
TensorFlow installed from (source or binary): SOURCE
TensorFlow version (use command below): 2.0.0-beta1
Python version: 3.6.7
Bazel version (if compiling from source): 0.24.1
GCC/Compiler version (if compiling from source): 4.8.5
CUDA/cuDNN version: 10.0/7.4
GPU model and memory: Nvidia V100 (32 GB)

Describe the current behavior
During eager execution, python lists are wrapped by TF 2.0 as &lt;class 'tensorflow.python.training.tracking.data_structures.ListWrapper'&gt;
I see a weird issue with this data structure when using function composition to build a custom keras layer. The code for the layer is as follows. When called, it gives the error as  TypeError: reduce() arg 2 must support iteration. I have checked that the second argument to reduce() is indeed a generic iterable with an __iter__ method.
Is using function compositions using functools package an issue in TF2.0 ?
&lt;denchmark-code&gt;import tensorflow as tf
import functools
from collections.abc import Iterable


# TODO Check for correctness of the model implementation
class Unit3D(tf.keras.layers.Layer):
    def __init__(self, output_channels,
                 kernel_shape=(1, 1, 1),
                 stride=(1, 1, 1),
                 activation_fn='relu',
                 use_batch_norm=True,
                 use_bias=False,
                 is_training=False,
                 name='unit_3d'):
        super(Unit3D, self).__init__(name=name)
        self._output_channels = output_channels
        self._kernel_shape = kernel_shape
        self._stride = stride
        self._activation = activation_fn
        self._use_batch_norm = use_batch_norm
        self._use_bias = use_bias
        self._is_training = is_training
        self._pipeline = []
        self._pipeline.append(tf.keras.layers.Conv3D(
            filters=self._output_channels,
            kernel_size=self._kernel_shape,
            strides=self._stride,
            padding='same',
            use_bias=self._use_bias,
            data_format='channels_first'
        )
        )
        if self._use_batch_norm:
            bn = tf.keras.layers.BatchNormalization(
                axis=1,
                fused=False,
            )
            bn = functools.partial(bn, training=self._is_training)
            self._pipeline.append(bn)

        if self._activation is not None:
            self._pipeline.append(tf.keras.layers.Activation(
                activation=self._activation
            )
            )

        print(isinstance(self._pipeline, Iterable))
        print(type(self._pipeline))
        self._pipeline = lambda x: functools.reduce(lambda f, g: g(f), self._pipeline, x)

    def call(self, input):
        return self._pipeline(input)
&lt;/denchmark-code&gt;

Describe the expected behavior
Function composition should be working properly.
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
&lt;denchmark-code&gt;import tensorflow as tf
from nets.i3d import Unit3D

model = Unit3D(output_channels=64, kernel_shape=[7,7,7],
               is_training=True)

input = tf.keras.backend.random_uniform(shape=(1,3,64,224,224),
                                        dtype=tf.float32)
output = model(input)

&lt;/denchmark-code&gt;

Other info / logs
&lt;denchmark-code&gt;2019-06-22 22:09:52.578799: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
&lt;class 'tensorflow.python.training.tracking.data_structures._ListWrapper'&gt;
Traceback (most recent call last):
  File "/Users/meetukme/PycharmProjects/KineticsNet/main.py", line 7, in &lt;module&gt;
    out = net(input)
  File "/Users/meetukme/anaconda3/envs/slim2.0/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py", line 660, in __call__
    outputs = self.call(inputs, *args, **kwargs)
  File "/Users/meetukme/PycharmProjects/KineticsNet/nets/i3d.py", line 52, in call
    return self._pipeline(input)
  File "/Users/meetukme/PycharmProjects/KineticsNet/nets/i3d.py", line 47, in &lt;lambda&gt;
    a = lambda x : functools.reduce(lambda f, g: g(f), self._pipeline, x)
TypeError: reduce() arg 2 must support iteration

Process finished with exit code 1
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='calledbymountains' date='2019-06-24T09:18:26Z'>
		It looks like nets.i3d is not defined in Unit3D class.Please, help us to provide complete code snippet to reproduce the issue.Thanks.
		</comment>
		<comment id='2' author='calledbymountains' date='2019-06-24T10:52:38Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;

The model definition can be stored in a file i3d.py and then the code will be
&lt;denchmark-code&gt;import tensorflow as tf
from i3d import Unit3D

model = Unit3D(output_channels=64, kernel_shape=[7,7,7],
               is_training=True)

input = tf.keras.backend.random_uniform(shape=(1,3,64,224,224),
                                        dtype=tf.float32)
output = model(input)

&lt;/denchmark-code&gt;

Hope that clarifies.
		</comment>
		<comment id='3' author='calledbymountains' date='2019-06-25T08:29:48Z'>
		I am able to reproduce the issue in Tensorflow  2.0.0-beta1 version. Thanks!
		</comment>
		<comment id='4' author='calledbymountains' date='2019-06-27T11:09:59Z'>
		Anything on this one ?
		</comment>
		<comment id='5' author='calledbymountains' date='2019-07-01T19:05:10Z'>
		The issue is not a bug. For details please see &lt;denchmark-link:https://stackoverflow.com/questions/56717031/composition-of-lambda-functions-in-tensorflow-2-0/56837574#56837574&gt;this&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='calledbymountains' date='2019-07-01T19:05:11Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30050&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30050&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>