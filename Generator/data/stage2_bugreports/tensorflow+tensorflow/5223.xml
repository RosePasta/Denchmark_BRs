<bug id='5223' author='pfaucon' open_date='2016-10-26T22:11:30Z' closed_time='2016-10-29T22:48:15Z'>
	<summary>dynamic_RNN fails on mac with unspecified batch_Size</summary>
	<description>
tl;dr:
dynamic_rnn fails on OS X with unspecified batch_size but works fine on Ubuntu 14.04/Python3.4.3.  It seems that on OS X the 'None != "?"' evaluates poorly, then at some point in ops/rnn.py +918 this equality fails:
if const_batch_size != got_batch_size:
(i.e. None != Dimension("?"))
My best guess is that Dimension("?") is hacked in such a way that any comparison using it returns some fake None which for some reason on OSX + python 3.4 means true (I tried explicitly "if None:" as a sanity check, it evaluates as false).  For now I've modified the offending code to be:
if const_batch_size != got_batch_size:
if  (const_batch_size != got_batch_size) == got_batch_size or (const_batch_size != got_batch_size) == const_batch_size:
print("weird dimensions stuff in ops/rnn.py, what the shit python?")
continue
raise ValueError(
"Batch_size is not the same for all the elements in the input.")
This
&lt;denchmark-h:h3&gt;Environment info&lt;/denchmark-h&gt;

Operating System:
OS X 10.12
Python 3.4.1
Installed version of CUDA and cuDNN:
(please attach the output of ls -l /path/to/cuda/lib/libcud*):
N/A (CPU version)
If installed from binary pip package, provide:
0.11.0rc1 (just installed wheel)
also fails on 0.10.0rc1, 0.10.0 (though it works on 0.10.0 on Linux)
&lt;denchmark-h:h3&gt;If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code).  It may work with less but this was a simpl&lt;/denchmark-h&gt;

import tensorflow as tf
input_size = 256
length = 100
num_classes = 64
data = tf.placeholder(tf.float32, [None, length, input_size])
target = tf.placeholder(tf.float32, [None, length, num_classes])
max_length = int(target.get_shape()[1])
num_classes = int(target.get_shape()[2])
network = tf.nn.rnn_cell.GRUCell(200)
output, new_state = tf.nn.dynamic_rnn(network, data, dtype=tf.float32)
&lt;denchmark-h:h3&gt;What other attempted solutions have you tried?&lt;/denchmark-h&gt;

Works fine on my Linux box with or without GPU
&lt;denchmark-h:h3&gt;Logs or other output that would be helpful&lt;/denchmark-h&gt;

(If logs are large, please upload as attachment or provide link).
Traceback (most recent call last):
File "&lt;my_directory&gt;/tensorflow_mac_fail_test.py", line 18, in 
output, new_state = tf.nn.dynamic_rnn(network, data, dtype=tf.float32)
File "/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/tensorflow/python/ops/rnn.py", line 836, in dynamic_rnn
dtype=dtype)
File "/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/tensorflow/python/ops/rnn.py", line 920, in _dynamic_rnn_loop
"Batch_size is not the same for all the elements in the input.")
ValueError: Batch_size is not the same for all the elements in the input.
	</description>
	<comments>
		<comment id='1' author='pfaucon' date='2016-10-26T22:23:14Z'>
		It looks like you pretty much know what the problem is. Do you have a idea for a fix you could send?
		</comment>
		<comment id='2' author='pfaucon' date='2016-10-26T22:27:40Z'>
		we could replace the existing comparison with:
if const_batch_size != got_batch_size and not (const_batch_size == got_batch_size) == None:
(if the dimensions aren't equal but also neither are unspecified) but it seems quite awkward.  I feel like a cleaner solution might be ensuring that None != Dimension("?") evaluates to false instead of
None ==Dimension ("?")  =&gt; None, and the negation becomes true.
Edit: If that change was made I would definitely advise putting a comment explaining the purpose, because it seems quite weird otherwise).
		</comment>
		<comment id='3' author='pfaucon' date='2016-10-26T22:52:25Z'>
		&lt;denchmark-link:https://github.com/vrv&gt;@vrv&lt;/denchmark-link&gt;
 possibly for any additional insight
		</comment>
		<comment id='4' author='pfaucon' date='2016-10-29T16:59:00Z'>
		The fix seems reasonable to me, perhaps send a PR if you have one.
		</comment>
		<comment id='5' author='pfaucon' date='2016-10-29T22:29:43Z'>
		created patch &lt;denchmark-link:https://github.com/tensorflow/tensorflow/compare/master...pfaucon:patch-1&gt;master...pfaucon:patch-1&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='pfaucon' date='2016-10-29T22:48:15Z'>
		Thanks! Feel free to send the PR.
		</comment>
	</comments>
</bug>