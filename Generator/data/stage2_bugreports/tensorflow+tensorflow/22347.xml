<bug id='22347' author='jrbtaylor' open_date='2018-09-18T14:44:28Z' closed_time='2018-09-19T15:02:52Z'>
	<summary>Bug in tf.import_graph_def for Graph Editor</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): see example below
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 1.8
Python version: 3.6
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: 9.0
GPU model and memory: Titan X
Exact command to reproduce: see example below

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

I'm trying to export and then later import a subset of my graph after using the graph editor for network pruning (such that I get only the pruned network left at the end). I've written two toy examples to illustrate the problem as simply as possible: example 1 (below) works, I can define two subgraphs that share only their input, grab the graphdef for one, clear the graph and restore only the subgraph I want; example 2 (below) tries to do the same thing but uses the graph editor to replace the weights (as in the pruning case) and grab the new subgraph.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

Example 1:
&lt;denchmark-code&gt;import tensorflow as tf

x = tf.placeholder(tf.float32, [], 'x')
w = tf.Variable([3.], dtype=tf.float32, name='w')
y = tf.multiply(x, w, name='y')

w_1 = tf.Variable([1.], dtype=tf.float32, name='w_1')
y_1 = tf.multiply(x, w_1, name='y_1')

subgraph = tf.graph_util.extract_sub_graph(tf.get_default_graph().as_graph_def(), [y_1.op.name])
print(type(subgraph))
tf.reset_default_graph()
_ = tf.import_graph_def(subgraph)

print(tf.contrib.graph_editor.get_tensors(tf.get_default_graph()))
&lt;/denchmark-code&gt;

this prints, as expected:

&lt;class 'tensorflow.core.framework.graph_pb2.GraphDef'&gt;
[&lt;tf.Tensor 'import/w_1:0' shape=(1,) dtype=float32_ref&gt;, &lt;tf.Tensor 'import/w_1/read:0' shape=(1,) dtype=float32&gt;, &lt;tf.Tensor 'import/x_1:0' shape=() dtype=float32&gt;, &lt;tf.Tensor 'import/y_1:0' shape=(1,) dtype=float32&gt;]

Example 2:
&lt;denchmark-code&gt;import tensorflow as tf

x = tf.placeholder(tf.float32, [], 'x')
w = tf.Variable([3.], dtype=tf.float32, name='w')
y = tf.multiply(x, w, 'y')

w_1 = tf.Variable([2.], dtype=tf.float32, name='w_1')
y_1 = tf.contrib.graph_editor.graph_replace(y, {w.op.outputs[0]: w_1.op.outputs[0]})

subgraph = tf.graph_util.extract_sub_graph(tf.get_default_graph().as_graph_def(), [y_1.op.name])
print(type(subgraph))
tf.reset_default_graph()
_ = tf.import_graph_def(subgraph)

print(tf.contrib.graph_editor.get_tensors(tf.get_default_graph()))
&lt;/denchmark-code&gt;

Edit: fixed typo in example 2, error is now:

ValueError: Node 'w/read_1' expects to be colocated with unknown node 'w'

The notable difference in the subgraph graphdefs is the line  under node , which indicates the root cause is likely in the graph editor (considering that's the only difference between the two examples). Tagging &lt;denchmark-link:https://github.com/purpledog&gt;@purpledog&lt;/denchmark-link&gt;
 for input on the graph editor setting the attribute of that node.
	</description>
	<comments>
		<comment id='1' author='jrbtaylor' date='2018-09-18T15:00:23Z'>
		Thanks for reporting this bug. As you identified, the most likely cause is that the graph_editor does not copy the attribute of the graph correctly.
This package is maintained by the open-source community and contribution are welcome. I am happy to review commits.
		</comment>
		<comment id='2' author='jrbtaylor' date='2018-09-18T21:29:05Z'>
		Fixed typo in the original post. The bug is only in the graph editor, not tf.import_graph_def, and is indeed in how it copies the operations, carrying over collocation attributes of the node_def. I'm working on a fix now.
		</comment>
		<comment id='3' author='jrbtaylor' date='2018-09-19T13:40:01Z'>
		Pull request submitted. The issue was the deepcopy of the node_def. I added a line that checks for the colocation attribute and clears it whenever it is present.
		</comment>
		<comment id='4' author='jrbtaylor' date='2018-09-19T15:02:52Z'>
		Closing this for now. Feel free to reopen.
		</comment>
		<comment id='5' author='jrbtaylor' date='2018-09-24T15:18:04Z'>
		I updated from 1.8 to 1.10 and found there's more bugs in the graph editor. In fact, the graph editor's graph_replace function doesn't work at all now (nevermind trying to re-use the graph_def later, it now fails right away):

ValueError: cannot add an op with id 7443 as it already exists in the graph

I think this should be re-opened.
		</comment>
		<comment id='6' author='jrbtaylor' date='2018-09-24T16:04:04Z'>
		It seems that a new operation is automatically added to the graph now when it's created, so the line info.graph_._add_op(op_) in copy_op_handler is redundant and causing the above error.
		</comment>
	</comments>
</bug>