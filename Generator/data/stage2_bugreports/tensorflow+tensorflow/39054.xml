<bug id='39054' author='CNugteren' open_date='2020-04-30T14:20:00Z' closed_time='2020-09-14T11:10:41Z'>
	<summary>Conv2d with large filters fails on V100 GPU</summary>
	<description>
System information

Have I written custom code: yes
OS Platform and Distribution: Ubuntu 16.04
TensorFlow installed from: binary
TensorFlow version: 2.1.0
Python version: 3.7.3
CUDA/cuDNN version: 10.1 and 7.6.4
GPU model and memory: Tesla V100 with 16 or 32GB

Describe the current behavior
Code segfaults when using a large 2D convolution kernel on a V100 GPU, but not on a GeForce GPU, e.g. GeForce Titan X. Also works fine without a GPU. On a V100, this code segfaults:
&lt;denchmark-code&gt;some_input = tf.random.normal((1, 512, 512, 1))
kernel = tf.random.normal((363, 363, 1, 1))
tf.nn.conv2d(some_input, kernel, strides=[1, 1, 1, 1], padding="SAME")
&lt;/denchmark-code&gt;

If we set the kernel size to 362 then it works again, but 363x363 and beyond segfaults on the V100 GPU.
Describe the expected behavior
It should not segfault on the V100.
Standalone code to reproduce the issue
Simple code snippet to reproduce is available here as a gist:
&lt;denchmark-link:https://gist.github.com/CNugteren/138bc1ecbfbfa42e7b1be85923f48f62&gt;https://gist.github.com/CNugteren/138bc1ecbfbfa42e7b1be85923f48f62&lt;/denchmark-link&gt;

Other info / logs
Example log of running the code in the above gist:
&lt;denchmark-code&gt;$ python tf_conv_bug.py
(... some TF GPU information)
&gt;&gt; kernel_size =  362
&gt;&gt; done for kernel_size =  362
&gt;&gt; kernel_size =  363
Segmentation fault (core dumped)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='CNugteren' date='2020-05-03T07:55:42Z'>
		&lt;denchmark-link:https://github.com/CNugteren&gt;@CNugteren&lt;/denchmark-link&gt;

I have tried in colab with TF 2.1.0, 2.2-rc3 and i am not seeing any issue. Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/76475d07e72d8daa6d7bc8d6ce28de49/untitled846.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='2' author='CNugteren' date='2020-05-03T08:18:17Z'>
		I don't see any GPU info in your link. Are you sure you are on a V100?
		</comment>
		<comment id='3' author='CNugteren' date='2020-05-04T07:51:00Z'>
		&lt;denchmark-link:https://github.com/CNugteren&gt;@CNugteren&lt;/denchmark-link&gt;

Sorry my bad i have executed in cpu but not GPU.I have tried in colab with TF 2.10-GPU and i am seeing a message (Your session crashed for an unknown reason. ) with kernel size 363.Thanks!
		</comment>
		<comment id='4' author='CNugteren' date='2020-05-19T19:25:58Z'>
		This looks like a CUDA issue, since I can also reproduce in PyTorch:
import torch
torch.backends.cudnn.benchmark = True  # Enable autotune, like in TF
for kernel_size in (362, 363):
  input_image = torch.ones((1, 1, 512, 512)).cuda()
  print('&gt;&gt; kernel_size = ', kernel_size)
  kernel = torch.ones((1, 1, kernel_size, kernel_size)).cuda()
  torch.nn.functional.conv2d(input_image, kernel, stride=1, padding=181)
  print('&gt;&gt; done for kernel_size = ', kernel_size)
Running either the TF or PyTorch version with the enviornmental variables CUDNN_LOGINFO_DBG=1 CUDNN_LOGDEST_DBG=stderr to enable logging, I see it crashes right after the log that shows conv2d is running with the algorithm CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM. I can also reproduce with CUDA 11.
&lt;denchmark-link:https://github.com/nluehr&gt;@nluehr&lt;/denchmark-link&gt;
, can you address this CUDA issue?
		</comment>
		<comment id='5' author='CNugteren' date='2020-05-27T20:32:35Z'>
		I can reproduce with CUDNN 7.x. The issue will be fixed in CUDNN 8.
		</comment>
		<comment id='6' author='CNugteren' date='2020-09-08T16:22:15Z'>
		&lt;denchmark-link:https://github.com/CNugteren&gt;@CNugteren&lt;/denchmark-link&gt;
 now that TF nightlies are built against cudnn 8, can you verify that the issue is resolved?
		</comment>
		<comment id='7' author='CNugteren' date='2020-09-14T11:10:40Z'>
		I can confirm indeed that the above code now passes successfully on a Tesla V100 GPU using pip install tf-nightly, CUDA 11.0 and cuDNN 8.0.3.
		</comment>
		<comment id='8' author='CNugteren' date='2020-09-14T11:10:42Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39054&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39054&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>