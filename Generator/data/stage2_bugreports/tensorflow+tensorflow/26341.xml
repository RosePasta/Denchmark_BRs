<bug id='26341' author='ageron' open_date='2019-03-05T03:47:12Z' closed_time='2019-03-05T17:05:56Z'>
	<summary>A function decorated with tf.function cannot return a variable by reference</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
MacOSX 10.13.6
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
No
TensorFlow installed from (source or binary):
Binary
TensorFlow version (use command below):
tf.version.VERSION: '2.0.0-dev20190304'
tf.version.GIT_VERSION: 'v1.12.0-9475-gc1487a9c93'
Python version:
3.6.8
Bazel version (if compiling from source):
N/A
GCC/Compiler version (if compiling from source):
N/A
CUDA/cuDNN version:
N/A
GPU model and memory:
N/A


A function decorated with  cannot return a variable by reference. This makes it impossible to write accessors, so we end up having to access variables directly, which leads to ugly code &amp; hard to maintain. For example, this is the root cause of &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/25754&gt;#25754&lt;/denchmark-link&gt;
.
This might be considered a feature request, rather than an issue: I grant you that it's debatable! :)
Describe the expected behavior
I expect return variable to return a reference, not a copy of the variable.
Code to reproduce the issue
counter = tf.Variable(0)
    
@tf.function
def increment():
    return counter.assign_add(1) # ugly, direct access, but it works
    
print(increment().numpy()) # prints 1
print(increment().numpy()) # prints 2

@tf.function
def get_counter():
    return counter   # actually returns a Tensor (a copy), not a reference to the variable

@tf.function
def increment():
    return get_counter().assign_add(1)  # access through an accessor

increment() # raises AttributeError: 'Tensor' object has no attribute 'assign_add'
Other info / logs
Here is the stacktrace:
&lt;denchmark-code&gt;AttributeError                            Traceback (most recent call last)
&lt;ipython-input-1-dfbc861847ab&gt; in &lt;module&gt;
     18     return get_counter().assign_add(1)
     19
---&gt; 20 increment() # raises AttributeError: '[...].EagerTensor' object has no attribute 'assign_add'

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/eager/def_function.py in __call__(self, *args, **kwds)
    424     # This is the first call of __call__, so we have to initialize.
    425     initializer_map = {}
--&gt; 426     self._initialize(args, kwds, add_initializers_to=initializer_map)
    427     if self._created_variables:
    428       try:

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/eager/def_function.py in _initialize(self, args, kwds, add_initializers_to)
    368     self._concrete_stateful_fn = (
    369         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access
--&gt; 370             *args, **kwds))
    371
    372     def invalid_creator_scope(*unused_args, **unused_kwds):

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/eager/function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)
   1311     if self._input_signature:
   1312       args, kwargs = None, None
-&gt; 1313     graph_function, _, _ = self._maybe_define_function(args, kwargs)
   1314     return graph_function
   1315

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/eager/function.py in _maybe_define_function(self, args, kwargs)
   1578           or call_context_key not in self._function_cache.missed):
   1579         self._function_cache.missed.add(call_context_key)
-&gt; 1580         graph_function = self._create_graph_function(args, kwargs)
   1581         self._function_cache.primary[cache_key] = graph_function
   1582         return graph_function, args, kwargs

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/eager/function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)
   1510             arg_names=arg_names,
   1511             override_flat_arg_shapes=override_flat_arg_shapes,
-&gt; 1512             capture_by_value=self._capture_by_value),
   1513         self._function_attributes)
   1514

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/framework/func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)
    692                                           converted_func)
    693
--&gt; 694       func_outputs = python_func(*func_args, **func_kwargs)
    695
    696       # invariant: `func_outputs` contains only Tensors, IndexedSlices,

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/eager/def_function.py in wrapped_fn(*args, **kwds)
    315         # __wrapped__ allows AutoGraph to swap in a converted function. We give
    316         # the function a weak reference to itself to avoid a reference cycle.
--&gt; 317         return weak_wrapped_fn().__wrapped__(*args, **kwds)
    318     weak_wrapped_fn = weakref.ref(wrapped_fn)
    319

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/framework/func_graph.py in wrapper(*args, **kwargs)
    684                   optional_features=autograph_options,
    685                   force_conversion=True,
--&gt; 686               ), args, kwargs)
    687
    688         # Wrapping around a decorator allows checks like tf_inspect.getargspec

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/autograph/impl/api.py in converted_call(f, owner, options, args, kwargs)
    390     return _call_unconverted(f, args, kwargs)
    391
--&gt; 392   result = converted_f(*effective_args, **kwargs)
    393
    394   # The converted function's closure is simply inserted into the function's

/var/folders/wy/h39t6kb11pnbb0pzhksd_fqh0000gn/T/tmpfo1eq6i2.py in tf__increment()
      4   retval_ = None
      5   do_return = True
----&gt; 6   retval_ = ag__.converted_call('assign_add', get_counter(), ag__.ConversionOptions(recursive=True, verbose=0, strip_decorators=(tf.function, defun, ag__.convert, ag__.do_not_convert, ag__.converted_call), force_conversion=False, optional_features=(), internal_convert_user_code=True), (1,), {})
      7   return retval_
      8

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/autograph/impl/api.py in converted_call(f, owner, options, args, kwargs)
    234       owner = inspect_utils.SuperWrapperForDynamicAttrs(owner)
    235
--&gt; 236     f = getattr(owner, f)
    237
    238   if inspect_utils.isbuiltin(f):

AttributeError: 'Tensor' object has no attribute 'assign_add'
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ageron' date='2019-03-05T17:05:56Z'>
		This is intended behavior for now because returning variables by reference can lead to different semantics in legacy graphs vs tf.function graphs.
		</comment>
	</comments>
</bug>