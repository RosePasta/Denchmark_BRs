<bug id='34264' author='shartoo' open_date='2019-11-14T07:27:34Z' closed_time='2020-04-03T08:45:33Z'>
	<summary>API function changed from Keras 2.3.1 to Keras 2.4.2?</summary>
	<description>
Please make sure that this is a feature request. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:feature_template
System information

TensorFlow version : TF 2.0.0 stable + Keras 2.4.2 (A )and 1.13.1 +Keras 2.3.1 (B)
Are you willing to contribute it (Yes/No): Yes

Describe the feature and the current behavior/state.
I want to do a transfer learning on MobileNet and change the input size ,i copied the code &lt;denchmark-link:https://colab.research.google.com/drive/1s1lkOiqKgl9_MsXJtPF--oh6uXHYkNYm#scrollTo=dV7a_Jca4cgC&gt;colab&lt;/denchmark-link&gt;
 according to &lt;denchmark-link:https://medium.com/@ckyrkou/changing-input-size-of-pre-trained-models-in-keras-3dfbe3ca3091&gt;Changing input size of pre-trained models in Keras&lt;/denchmark-link&gt;
 .Everythin goes fine on my machine (TF 1.13.1 + Keras 2.3.1) ,i could got exact the same output of author namely the input size got changed,while on my another machine (TF 2..0.0+ Keras 2.4.2) i have to do some change and the result of input shape stays 224x224x3 but not as excepted 130x130x3.

Tensorflow 1.13.1+ Keras 2.3.1 works fine

&lt;denchmark-code&gt;# work on tensorflow 1.13.1 
import keras
import numpy as np
keras.backend.clear_session()

def change_model(model, new_input_shape=(None, 40, 40, 3)):
    # replace input shape of first layer
    model._layers[0].batch_input_shape = new_input_shape

    # rebuild model architecture by exporting and importing via json
    new_model = keras.models.model_from_json(model.to_json())

    # copy weights from old model to new one
    for layer in new_model.layers:
        try:
            layer.set_weights(model.get_layer(name=layer.name).get_weights())
            print("Loaded layer {}".format(layer.name))
        except:
            print("Could not transfer weights for layer {}".format(layer.name))
    return new_model

from keras.applications.mobilenet import MobileNet
from keras.preprocessing import image
from keras.applications.mobilenet import preprocess_input,decode_predictions
import numpy as np
model = MobileNet(weights='imagenet',include_top=True,input_shape=(224, 224,3))
new_model = change_model(model,new_input_shape=(None, 130, 130, 3))
new_model.summary()
&lt;/denchmark-code&gt;

ouput is 130x130x3
&lt;denchmark-code&gt;Layer (type)                 Output Shape              Param #
=================================================================
input_1 (InputLayer)         (None, 130, 130, 3)       0
_________________________________________________________________
conv1_pad (ZeroPadding2D)    (None, 131, 131, 3)       0
_________________________________________________________________
conv1 (Conv2D)               (None, 65, 65, 32)        864
_________________________________________________________________
conv1_bn (BatchNormalization (None, 65, 65, 32)        128
...
&lt;/denchmark-code&gt;


Tensorflow 2.0.0 + Keras 2.4.2

&lt;denchmark-code&gt;# work on Tensorflow 2.0.0 
import keras
import tensorflow as tf
from keras_applications.mobilenet import MobileNet

def change_model(model, new_input_shape=(None,40, 40, 3)):
    # replace input shape of first layer
    model._layers[0].batch_input_shape = new_input_shape
    # rebuild model architecture by exporting and importing via json
    new_model = tf.keras.models.model_from_json(model.to_json())
    # copy weights from old model to new one
    for layer in new_model.layers:
        try:
            layer.set_weights(model.get_layer(name=layer.name).get_weights())
            print("Loaded layer {}".format(layer.name))
        except:
            print("Could not transfer weights for layer {}".format(layer.name))
    return new_model

model = MobileNet(include_top=True,weights="imagenet",input_shape=(224,224,3),backend = tf.keras.backend, layers = tf.keras.layers, models = tf.keras.models, utils = tf.keras.utils)
new_model = change_model(model,new_input_shape=(None,130,130,3))
print(new_model.summary())
&lt;/denchmark-code&gt;

output stays 224x224x3
&lt;denchmark-code&gt;Layer (type)                 Output Shape              Param #   
=================================================================
input_1 (InputLayer)         [(None, 224, 224, 3)]     0         
_________________________________________________________________
conv1_pad (ZeroPadding2D)    (None, 225, 225, 3)       0         
_________________________________________________________________
conv1 (Conv2D)               (None, 112, 112, 32)      864       
_________________________________________________________________
conv1_bn (BatchNormalization (None, 112, 112, 32)      128       
_________________________________________________________________
conv1_relu (ReLU)            (None, 112, 112, 32)      0         
_________________________________________________________________
....
&lt;/denchmark-code&gt;

Will this change the current api? How?
not sure.
	</description>
	<comments>
		<comment id='1' author='shartoo' date='2019-11-14T12:07:04Z'>
		I noticed that different versions of the keras can return different layer shapes.
The output shape of the layer is different in the keras and tf.keras: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/33785&gt;#33785&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='shartoo' date='2019-11-15T10:56:05Z'>
		Could reproduce the issue by changing the TF Version from 1.13 to 2.0. Here is the &lt;denchmark-link:https://colab.sandbox.google.com/gist/oanush/47bf6c47011dacd95beca106b25d654e/34264.ipynb&gt;Gist&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='3' author='shartoo' date='2020-03-19T22:10:49Z'>
		Hi &lt;denchmark-link:https://github.com/shartoo&gt;@shartoo&lt;/denchmark-link&gt;
 , with the current implementation, you may use the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/a36fbd6a82d91f47cda9cc8da26d6a83d551b42a/tensorflow/python/keras/engine/base_layer.py#L374&gt;_batch_input_shape&lt;/denchmark-link&gt;
 for the attribute assignment to Keras Layer or Model. Can you try it to see if it works? Thanks.
		</comment>
		<comment id='4' author='shartoo' date='2020-04-03T08:45:29Z'>
		&lt;denchmark-link:https://github.com/shartoo&gt;@shartoo&lt;/denchmark-link&gt;
  Closing this issue as it is the intended behaviour.Thanks!
		</comment>
		<comment id='5' author='shartoo' date='2020-04-03T08:45:34Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34264&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34264&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>