<bug id='45656' author='joba01' open_date='2020-12-14T15:52:08Z' closed_time='2021-01-13T16:08:54Z'>
	<summary>sum/avg/mean ops of tf.keras.backend do not work correctly over batch axis</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v2.3.0-54-gfcc4b966f1 2.3.1 (docker)
Python version: 3.6.9
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: 10.1.243/7.6.4.38-1
GPU model and memory: 1080-TI

Describe the current behavior
When adding an aggregation function on the batch axis (axis=0), everything is fine, as long as the batchsize is &lt;=32, with batchsize &gt;32 the output shape changes.
Code and test tp reproduce on:
&lt;denchmark-link:https://stackoverflow.com/questions/64893958/sum-avg-mean-ops-of-tf-keras-backend-do-not-work-correctly-over-batch-axis&gt;https://stackoverflow.com/questions/64893958/sum-avg-mean-ops-of-tf-keras-backend-do-not-work-correctly-over-batch-axis&lt;/denchmark-link&gt;

Describe the expected behavior
output shape is the expected on from model summary and not depending on the batchsize.

Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
see &lt;denchmark-link:https://stackoverflow.com/questions/64893958/sum-avg-mean-ops-of-tf-keras-backend-do-not-work-correctly-over-batch-axis&gt;https://stackoverflow.com/questions/64893958/sum-avg-mean-ops-of-tf-keras-backend-do-not-work-correctly-over-batch-axis&lt;/denchmark-link&gt;

Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='joba01' date='2020-12-14T16:29:42Z'>
		Was able to reproduce the issue with TF v2.2, TF v2.3 and TF-nightly. Please find the gist of it &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/9cc299da89b22d5aeeea92a97b5cd7b3/45656.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='joba01' date='2020-12-19T02:41:29Z'>
		&lt;denchmark-link:https://github.com/joba01&gt;@joba01&lt;/denchmark-link&gt;
,
Using  instead of  gives a reliable  and IMO is recommended, because even the Documentation for &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/backend/max?hl=FA&gt;tf.keras.backend.max&lt;/denchmark-link&gt;
 is not available in the Tensorflow site, as it is disabled in the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/backend.py#L2272&gt;Source Code&lt;/denchmark-link&gt;
.
Please find &lt;denchmark-link:https://colab.research.google.com/gist/rmothukuru/bb2e9b3747622c445e1ec8588fd1a6dd/45656.ipynb#scrollTo=u1w8q9D1Bzrq&gt;the Gist&lt;/denchmark-link&gt;
 of working code.
Also, if you want to use an Activation Function with Customized Functionality, please refer this &lt;denchmark-link:https://stackoverflow.com/a/43915483/11530462&gt;Stack Overflow Answer&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='3' author='joba01' date='2020-12-22T14:14:16Z'>
		thanks, but as in the title this is the same for sum/avg/mean. Also Relu is not the same as max. The function is also not deprecated in your linked source.
		</comment>
		<comment id='4' author='joba01' date='2021-01-11T21:58:01Z'>
		Thanks for reporting this issue!
This error is caused by model.predict(). Basically inside this method your data is split into several epochs by the first axis (the batch axis), and the processed results of each epoch are concatenated together as the final output. This is based on the assumption that all operations in keras.model or keras.layer should not touch the batch axis. For example, suppose we have input data of size (63, 2), when calling predict(), the data is handled as two frames of size (32, 2) and (31, 2), then their outputs are concatenated, which makes the output value of shape (4, ).
One workaround is to use __call__() method instead of predict(). In your example, instead of calling
&lt;denchmark-code&gt;x = tf.random.normal((orders ,parameters))
result = model.predict(x)
print(result.shape)
&lt;/denchmark-code&gt;

use this
&lt;denchmark-code&gt;x = tf.random.normal((orders ,parameters))
result = model(x)
print(result.shape)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='joba01' date='2021-01-13T16:08:35Z'>
		&lt;denchmark-link:https://github.com/chenmoneygithub&gt;@chenmoneygithub&lt;/denchmark-link&gt;
, thanks a lot for that clarification. I have read that input and output of a model must have the same batchsize/axis-0, but still couldn't explain this behaviour.
		</comment>
		<comment id='6' author='joba01' date='2021-01-13T16:08:55Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/45656&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/45656&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>