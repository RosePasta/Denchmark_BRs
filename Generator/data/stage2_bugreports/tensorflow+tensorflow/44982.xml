<bug id='44982' author='Sidong-Wei' open_date='2020-11-18T15:48:33Z' closed_time='2020-12-09T14:07:33Z'>
	<summary>TF Lite LSH Projection returns different results on Big Endian and Little Endian Machines</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): N
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 20.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 2.3.1
Python version: 3.8.5
Bazel version (if compiling from source): 3.1.0
GCC/Compiler version (if compiling from source): gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
CUDA/cuDNN version: N/A
GPU model and memory: N/A


The LSH Projection defined in  has different outputs on Big Endian and Little Endian machines for the same input. The issue is caused by the fact that the input array is flattened into a string in this &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/402d28705e426fea7aad6bbbe405a11daa6b6cd5/tensorflow/lite/kernels/lsh_projection.cc#L130&gt;line&lt;/denchmark-link&gt;
. When the elements in the array are more than 1 byte long, the same array will be represented differently in bytes for LE and BE, and that will cause the string it converts to -  here - be different. Thus the  will return differently for LE and BE.
Describe the expected behavior
Since Fingerprint64 function returns the same results for the same input string across all platforms, I am actually not sure whether we are expecting the results of lsh_projection to be consistent across all platforms as well. In other words, I wonder when the lsh_projection op is called, are we expecting to see a specific output for a specific input, or it will be okay as long as different inputs have different outputs.
If it is the former one, I have a patch ready that could make Big Endian machine flatten the array into the same string as Little Endian ones, and the output will be the same on both platforms with the same input array.
If it is the latter one, then we could keep the way it is then.
Standalone code to reproduce the issue
The following test case will fail on Big Endian machine:
&lt;denchmark-code&gt;bazel --host_javabase="@local_jdk//:jdk" --cache_test_results=no --test_timeout 300,900,1200,3600 --build_tests_only --test_output=errors -- //tensorflow/lite/kernels:lsh_projection_test
&lt;/denchmark-code&gt;

Other info / logs
	</description>
	<comments>
		<comment id='1' author='Sidong-Wei' date='2020-11-19T15:51:26Z'>
		Thanks for raising the issue and for suggesting a potential solution via your &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/45010&gt;PR&lt;/denchmark-link&gt;
. The requirement of returning the exact same hash regardless of the endianness of the machine is not necessary. Therefore, I would suggest creating a fix for the test. If you are willing, please create the PR fixing lsh_projection_test.cc and assign to me. Thank you!
		</comment>
		<comment id='2' author='Sidong-Wei' date='2020-11-19T16:51:19Z'>
		Thanks for the feedback, I will push the fix for the test case to merge with my PR that fixes other issues on TF Lite.
		</comment>
		<comment id='3' author='Sidong-Wei' date='2020-12-09T14:07:33Z'>
		Closed the issue as the PR has been merged.
		</comment>
		<comment id='4' author='Sidong-Wei' date='2020-12-09T14:07:35Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44982&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44982&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>