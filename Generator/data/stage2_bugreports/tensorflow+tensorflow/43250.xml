<bug id='43250' author='BryceSchmitt' open_date='2020-09-15T21:40:06Z' closed_time='2020-12-02T22:06:20Z'>
	<summary>get_output_shapes does not return the correct dimensions for a Dataset</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): Using docker container with base image tensorflow/tensorflow:2.3.0-jupyter
TensorFlow version (use command below): v2.3.0-rc2-23-gb36436b087 2.3.0
Python version: 3.6
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
I am using AutoKeras to train to train a neural net for image regression, but it is crashing because  function used within AutoKeras is returning shapes that have  for each of the dimension lengths rather than an integer. According to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/30774&gt;this TensorFlow issue&lt;/denchmark-link&gt;
, this function has been replaced by , but both of these return None in their output. I have confirmed that all the tensors in my dataset are the same shape and I have run my Dataset against these functions both with my original Dataset and with the Dataset AutoKeras creates from it and None is returned in both cases as shown in my code snippet below.
Describe the expected behavior
Either tensorflow.compat.v1.data.get_output_shapes(dataset) or tf.data.experimental.get_structure would return the correct shape of elements in a Dataset where all elements have the same shape.
Standalone code to reproduce the issue
This snippet contrasts the output of tensorflow.compat.v1.data.get_output_shapes(dataset), tf.data.experimental.get_structure, and a custom function that returns the shape of the first element in a Dataset.
def get_first_element_shape(dataset):
    for thing in dataset:
        if isinstance(thing, tuple):
            return tuple(element.shape for element in thing)
        else:
            return thing.shape

print(tf.compat.v1.data.get_output_shapes(train_dataset))
print(tf.data.experimental.get_structure(train_dataset))
print(get_first_element_shape(train_dataset))

x = train_dataset.map(lambda a, b: a)
print('\nX dataset (Created by AutoKeras by separating the input values from the output values in the training dataset)')
print(tf.compat.v1.data.get_output_shapes(x))
print(tf.data.experimental.get_structure(x))
print(get_first_element_shape(x))
This outputs:
&lt;denchmark-code&gt;(TensorShape([None, None, None]), TensorShape([1]))
(TensorSpec(shape=(None, None, None), dtype=tf.float32, name=None), TensorSpec(shape=(1,), dtype=tf.float32, name=None))
(TensorShape([600, 600, 3]), TensorShape([1]))

X dataset (Created by AutoKeras by separating the input values from the output values in the training dataset)
(None, None, None)
TensorSpec(shape=(None, None, None), dtype=tf.float32, name=None)
(600, 600, 3)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='BryceSchmitt' date='2020-09-15T22:17:11Z'>
		Could you share a very minimal but complete example or Colab to reproduce this?
		</comment>
		<comment id='2' author='BryceSchmitt' date='2020-09-16T18:31:50Z'>
		This code snipped will generate some images, save them to a TFRecord file, and then load the file into a dataset and print out the same output as above.
import numpy as np
import os
import tempfile
import tensorflow as tf
from io import BytesIO
from PIL import Image
from random import random

# This function converts an image (as a binary string) and the output value for it to an Example to save to a TFRecord
# This function based on this tutorial: https://www.tensorflow.org/tutorials/load_data/tfrecord#walkthrough_reading_and_writing_image_data
def image_and_output_to_example(image_string, output_value):
    # Create some helper functions
    def _bytes_feature(value):
        """Returns a bytes_list from a string / byte."""
        if isinstance(value, type(tf.constant(0))):
            value = value.numpy() # BytesList won't unpack a string from an EagerTensor.
        return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))
    def _float_feature(value):
        """Returns a float_list from a float / double."""
        return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))
    def _int64_feature(value):
        """Returns an int64_list from a bool / enum / int / uint."""
        return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))

    image_shape = tf.io.decode_png(image_string).shape
    feature = {
        'height': _int64_feature(image_shape[0]),
        'width': _int64_feature(image_shape[1]),
        'depth': _int64_feature(image_shape[2]),
        'label': _float_feature(output_value),
        'image_raw': _bytes_feature(image_string),
    }
    
    return tf.train.Example(features=tf.train.Features(feature=feature))

# This function converts the Examples in the TFRecord into a tuple of (image_tensor, [output_value])
# Also based on the above tutorial
def parse_tf_example(example_proto):
    image_feature_description = {
        'height': tf.io.FixedLenFeature([], tf.int64),
        'width': tf.io.FixedLenFeature([], tf.int64),
        'depth': tf.io.FixedLenFeature([], tf.int64),
        'label': tf.io.FixedLenFeature([], tf.float32),
        'image_raw': tf.io.FixedLenFeature([], tf.string),
    }
    
    normalization_layer = tf.keras.layers.experimental.preprocessing.Rescaling(1.0/255)

    parsed_example = tf.io.parse_single_example(example_proto, image_feature_description)
    image_as_tensor = tf.io.decode_png(parsed_example['image_raw'])
    return (normalization_layer(image_as_tensor), [parsed_example['label']])

# Generate some images and save them to a TFRecord file
record_file = os.path.join(tempfile.gettempdir(), 'images.tfrecords')
with tf.io.TFRecordWriter(record_file) as writer:
    for image_num in range(50):
        random_pixels = np.random.randint(low=0, high=255, size=(600,600,3), dtype=np.uint8)
        img = Image.fromarray(random_pixels)
        # Get the string of the image
        image_bytes = BytesIO()
        img.save(image_bytes, format="PNG")
        # Convert image and a random output value for the image to a tf.train.Example
        tf_example = image_and_output_to_example(image_bytes.getvalue(), random())
        writer.write(tf_example.SerializeToString())

# Load the TFRecord file as a dataset and use the map function to convert the Examples into training data
raw_image_dataset = tf.data.TFRecordDataset(record_file)
train_dataset = raw_image_dataset.map(parse_tf_example)

# Returns the shape of the first element in a Dataset
def get_first_element_shape(dataset):
    for thing in dataset:
        if isinstance(thing, tuple):
            return tuple(element.shape for element in thing)
        else:
            return thing.shape
        
print('Original Dataset')
print(tf.compat.v1.data.get_output_shapes(train_dataset)) # in the code
print(tf.data.experimental.get_structure(train_dataset)) # function that replaces get_ouput_shapes (See TF issue #30774)
print(get_first_element_shape(train_dataset)) # My function to work around the None sized dimensions

x = train_dataset.map(lambda a, b: a)
print('\nX dataset (split out of input dataset by _process_xy in autokeras.automodel)')
print(tf.compat.v1.data.get_output_shapes(x)) # in the code
print(tf.data.experimental.get_structure(x)) # function that replaces get_ouput_shapes (See TF issue #30774)
print(get_first_element_shape(x)) # My function to work around the None sized dimensions
		</comment>
		<comment id='3' author='BryceSchmitt' date='2020-09-17T04:11:51Z'>
		I have tried in colab with TF version 2.3, nightly version() and was able to reproduce the issue. Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/c6e16d465e79b35a2cf19ffcfb9f24c3/untitled367.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='BryceSchmitt' date='2020-12-01T00:39:59Z'>
		&lt;denchmark-link:https://github.com/BryceSchmitt&gt;@BryceSchmitt&lt;/denchmark-link&gt;
 Sorry for the late reply.
The issue arises because the shape of the tensors produced by parse_tf_example is unknown until the actual data is parsed. Shape inference happens before then (parsing the entire dataset to make sure every example is the same size would be too expensive). If you know the shape of your examples, you can use &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/ensure_shape&gt;tf.ensure_shape&lt;/denchmark-link&gt;
 at the end of  so that the shapes will be known. That should resolve the error you're getting from AutoKeras.
		</comment>
		<comment id='5' author='BryceSchmitt' date='2020-12-02T22:06:01Z'>
		&lt;denchmark-link:https://github.com/aaudiber&gt;@aaudiber&lt;/denchmark-link&gt;
 Thanks for the detailed response, that does fix the issue and allows AutoKeras to run.
		</comment>
		<comment id='6' author='BryceSchmitt' date='2020-12-02T22:06:22Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43250&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43250&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>