<bug id='40403' author='leehanchung' open_date='2020-06-12T06:50:10Z' closed_time='2020-06-12T22:26:48Z'>
	<summary>GPU-accelerated LSTMs/GRUs crash randomly with: [ InternalError: [_Derived_] Failed to call ThenRnnBackward with model config ]</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No


OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 Pro, Build 19041


TensorFlow installed from (source or binary): pip install tensorflow


TensorFlow version (use command below): v2.2.0-rc4-8-g2b96f3662b 2.2.0


Python version: 3.7.4


CUDA/cuDNN version: CUDA 10.1, cuDNN 7.6.5


GPU model and memory: NVidia Titan RTX, 24GB, RTX 2080 Ti, 11GB


nvidia driver version: 450.99



Both the Jupyter Notebook and extract Python script on the &lt;denchmark-link:https://www.tensorflow.org/tutorials/text/text_classification_rnn&gt;Tensorflow Text Classification Tutorial &lt;/denchmark-link&gt;
 crashes randomly when training locally on my GPU, with the following traceback:
&lt;denchmark-code&gt;tensorflow.python.framework.errors_impl.InternalError:  [_Derived_]  Failed to call ThenRnnForward with model config: [rnn_mode, rnn_input_mode, rnn_direction_mode]: 2, 0, 0 , [num_layers, input_size, num_units, dir_count, max_seq_length, batch_size, cell_num_units]: [1, 64, 64, 1, 2537, 64, 64]
         [[{{node CudnnRNN}}]]
         [[sequential/bidirectional/forward_lstm/StatefulPartitionedCall]]
         [[gradient_tape/sequential/embedding/embedding_lookup/Reshape/_38]] [Op:__inference_train_function_6128]

Function call stack:
train_function -&gt; train_function -&gt; train_function
&lt;/denchmark-code&gt;

I found two similar issues &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/37942&gt;#37942&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/35950&gt;#35950 &lt;/denchmark-link&gt;

Methods suggested in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/37942&gt;#37942&lt;/denchmark-link&gt;
 did not work and still crashes.
Describe the expected behavior
Example tutorial notebooks should run smoothly from top to bottom without random crashes.

&lt;denchmark-link:https://gist.github.com/leehanchung/8da991bf1264c19324920349171386bc&gt;Github Gist here.&lt;/denchmark-link&gt;

Code:
&lt;denchmark-code&gt;import tensorflow_datasets as tfds
import tensorflow as tf

import matplotlib.pyplot as plt

def plot_graphs(history, metric):
    plt.plot(history.history[metric])
    plt.plot(history.history['val_'+metric], '')
    plt.xlabel("Epochs")
    plt.ylabel(metric)
    plt.legend([metric, 'val_'+metric])
    plt.show()


dataset, info = tfds.load('imdb_reviews/subwords8k', with_info=True,
                          as_supervised=True)
train_dataset, test_dataset = dataset['train'], dataset['test']

encoder = info.features['text'].encoder
print('Vocabulary size: {}'.format(encoder.vocab_size))

sample_string = 'Hello TensorFlow.'

encoded_string = encoder.encode(sample_string)
print('Encoded string is {}'.format(encoded_string))

original_string = encoder.decode(encoded_string)
print('The original string: "{}"'.format(original_string))

assert original_string == sample_string

for index in encoded_string:
    print('{} ----&gt; {}'.format(index, encoder.decode([index])))

BUFFER_SIZE = 10000
BATCH_SIZE = 64

train_dataset = train_dataset.shuffle(BUFFER_SIZE)
train_dataset = train_dataset.padded_batch(BATCH_SIZE)
test_dataset = test_dataset.padded_batch(BATCH_SIZE)

for example_batch, label_batch in train_dataset.take(20):
    print("Batch shape:", example_batch.shape)
    print("label shape:", label_batch.shape)

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(encoder.vocab_size, 64),
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1)
])

model.compile(loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),
              optimizer=tf.keras.optimizers.Adam(1e-4),
              metrics=['accuracy'])

history = model.fit(train_dataset, epochs=10,
                    validation_data=test_dataset, 
                    validation_steps=30)
test_loss, test_acc = model.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))
&lt;/denchmark-code&gt;

Other info / logs
&lt;denchmark-code&gt;Epoch 1/10
2020-06-11 23:48:47.036226: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_10.dll
2020-06-11 23:48:47.417459: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll
 39/391 [=&gt;............................] - ETA: 33s - loss: 0.6931 - accuracy: 0.50282020-06-11 23:48:52.108366: E tensorflow/stream_executor/dnn.cc:613] CUDNN_STATUS_INTERNAL_ERROR
in tensorflow/stream_executor/cuda/cuda_dnn.cc(1986): 'cudnnRNNBackwardData( cudnn.handle(), rnn_desc.handle(), model_dims.max_seq_length, output_desc.handles(), output_data.opaque(), output_desc.handles(), output_backprop_data.opaque(), output_h_desc.handle(), output_h_backprop_data.opaque(), output_c_desc.handle(), output_c_backprop_data.opaque(), rnn_desc.params_handle(), params.opaque(), input_h_desc.handle(), input_h_data.opaque(), input_c_desc.handle(), input_c_data.opaque(), input_desc.handles(), input_backprop_data-&gt;opaque(), 
input_h_desc.handle(), input_h_backprop_data-&gt;opaque(), input_c_desc.handle(), input_c_backprop_data-&gt;opaque(), workspace.opaque(), workspace.size(), reserve_space_data-&gt;opaque(), 
reserve_space_data-&gt;size())'
2020-06-11 23:48:52.109818: W tensorflow/core/framework/op_kernel.cc:1753] OP_REQUIRES failed at cudnn_rnn_ops.cc:1922 : Internal: Failed to call ThenRnnBackward with model config: [rnn_mode, rnn_input_mode, rnn_direction_mode]: 2, 0, 0 , [num_layers, input_size, num_units, dir_count, max_seq_length, batch_size, cell_num_units]: [1, 64, 64, 1, 1615, 64, 64] 
Traceback (most recent call last):
  File ".\lesson1.py", line 59, in &lt;module&gt;
    validation_steps=30)
  File "C:\Users\Han\.virtualenvs\tensorflow-in-practice-9XcfUv0Y\lib\site-packages\tensorflow\python\keras\engine\training.py", line 66, in _method_wrapper
    return method(self, *args, **kwargs)
  File "C:\Users\Han\.virtualenvs\tensorflow-in-practice-9XcfUv0Y\lib\site-packages\tensorflow\python\keras\engine\training.py", line 848, in fit
    tmp_logs = train_function(iterator)
  File "C:\Users\Han\.virtualenvs\tensorflow-in-practice-9XcfUv0Y\lib\site-packages\tensorflow\python\eager\def_function.py", line 580, in __call__
    result = self._call(*args, **kwds)
  File "C:\Users\Han\.virtualenvs\tensorflow-in-practice-9XcfUv0Y\lib\site-packages\tensorflow\python\eager\def_function.py", line 611, in _call
    return self._stateless_fn(*args, **kwds)  # pylint: disable=not-callable
  File "C:\Users\Han\.virtualenvs\tensorflow-in-practice-9XcfUv0Y\lib\site-packages\tensorflow\python\eager\function.py", line 2420, in __call__
    return graph_function._filtered_call(args, kwargs)  # pylint: disable=protected-access  File "C:\Users\Han\.virtualenvs\tensorflow-in-practice-9XcfUv0Y\lib\site-packages\tensorflow\python\eager\function.py", line 1665, in _filtered_call
    self.captured_inputs)
  File "C:\Users\Han\.virtualenvs\tensorflow-in-practice-9XcfUv0Y\lib\site-packages\tensorflow\python\eager\function.py", line 1746, in _call_flat
    ctx, args, cancellation_manager=cancellation_manager))
  File "C:\Users\Han\.virtualenvs\tensorflow-in-practice-9XcfUv0Y\lib\site-packages\tensorflow\python\eager\function.py", line 598, in call
    ctx=ctx)
  File "C:\Users\Han\.virtualenvs\tensorflow-in-practice-9XcfUv0Y\lib\site-packages\tensorflow\python\eager\execute.py", line 60, in quick_execute
    inputs, attrs, num_outputs)
tensorflow.python.framework.errors_impl.InternalError:  [_Derived_]  Failed to call ThenRnnBackward with model config: [rnn_mode, rnn_input_mode, rnn_direction_mode]: 2, 0, 0 , [num_layers, input_size, num_units, dir_count, max_seq_length, batch_size, cell_num_units]: [1, 64, 64, 1, 1615, 64, 64]
         [[{{node gradients/CudnnRNN_grad/CudnnRNNBackprop}}]]
         [[StatefulPartitionedCall_1]]
         [[gradient_tape/sequential/embedding/embedding_lookup/Reshape/_38]] [Op:__inference_train_function_6172]

Function call stack:
train_function -&gt; train_function -&gt; train_function
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='leehanchung' date='2020-06-12T08:01:43Z'>
		&lt;denchmark-link:https://github.com/leehanchung&gt;@leehanchung&lt;/denchmark-link&gt;

I tried in colab with TF version 2.2 and i am not seeing any issue.Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/98b63c4661740fa71e893cf5157c79d6/untitled12.ipynb&gt;here.&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='2' author='leehanchung' date='2020-06-12T08:04:53Z'>
		Hi &lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
,
Yes the code runs on Colab.  But issue is specific to Windows 10 w/ GPU.
		</comment>
		<comment id='3' author='leehanchung' date='2020-06-12T22:26:48Z'>
		Did more testing and fixed the problem.
This problem only shows up with tf.keras.Bidirectional wrapped around rnn/lstm/gru.
Fixed the problem by downgrading nvidia driver.
Current software stack that works with Bidirectional:
&lt;denchmark-code&gt;    OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 Pro, Build 19041
    TensorFlow installed from (source or binary): pip install tensorflow
    TensorFlow version (use command below): v2.2.0-rc4-8-g2b96f3662b 2.2.0
    Python version: 3.7.4
    CUDA/cuDNN version: CUDA 10.1, cuDNN 7.6.5
    GPU model and memory: NVidia Titan RTX, 24GB, RTX 2080 Ti, 11GB
    NVIDIA driver version: 431.86
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='leehanchung' date='2020-06-12T22:26:50Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40403&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/40403&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>