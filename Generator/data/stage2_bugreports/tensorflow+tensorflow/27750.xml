<bug id='27750' author='rafiqhasan' open_date='2019-04-11T11:10:48Z' closed_time='2019-06-14T17:58:00Z'>
	<summary>TF 2 - Method estimator.model_to_estimator( ) fails but model.fit works for tf.keras created model</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Win 10 / Colab ( Linux )
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): TF 2.0.0 Alpha
Python version: 3.5

Describe the current behavior
The below code has been taken from the Tensorflow without PHD series - RNN time series prediction.
&lt;denchmark-code&gt;def compile_keras_sequential_model(list_of_layers, msg):
  
    # a tf.keras.Sequential model is a sequence of layers
    model = tf.keras.Sequential(list_of_layers)
    
    # keras does not have a pre-defined metric for Root Mean Square Error. Let's define one.
    def rmse(y_true, y_pred): # Root Mean Squared Error
      return tf.sqrt(tf.reduce_mean(tf.square(y_pred - y_true)))
    
    print('\nModel ', msg)
    
    #Optimizer
    sgd = tf.keras.optimizers.SGD(lr=0.1, decay=1e-6, momentum=0.9, nesterov=True)
    
    # to finalize the model, specify the loss, the optimizer and metrics
    model.compile(
       loss = 'mean_squared_error',
       optimizer = sgd,
#         optimizer=tf.keras.optimizers.SGD(lr=0.0001, momentum=0.9),
       metrics = [rmse])
    
    # this prints a description of the model
    model.summary()
    
    return model
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;#Create Keras model
def model_fn_keras():
    
    # RNN model (RMSE: 0.164 after 10 epochs)
    model_layers_RNN = [
        l.Reshape([SEQLEN, 1], input_shape=[SEQLEN,]), # [BATCHSIZE, SEQLEN, 1] is necessary for RNN model
        l.GRU(RNN_CELLSIZE, return_sequences=True),  # output shape [BATCHSIZE, SEQLEN, RNN_CELLSIZE]
        l.GRU(RNN_CELLSIZE), # keep only last output in sequence: output shape [BATCHSIZE, RNN_CELLSIZE]
        l.Dense(1) # output shape [BATCHSIZE, 1]
    ]

    model_RNN = compile_keras_sequential_model(model_layers_RNN, "RNN")
    
    return(model_RNN)
&lt;/denchmark-code&gt;

While converting the Keras model to estimator version, below line gives error:
estimator = tf.keras.estimator.model_to_estimator(keras_model=model_fn_keras())
&lt;denchmark-code&gt;Model  RNN
Model: "sequential_27"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
reshape_27 (Reshape)         (None, 16, 1)             0         
_________________________________________________________________
unified_gru_57 (UnifiedGRU)  (None, 16, 32)            3360      
_________________________________________________________________
unified_gru_58 (UnifiedGRU)  (None, 32)                6336      
_________________________________________________________________
dense_27 (Dense)             (None, 1)                 33        
=================================================================
Total params: 9,729
Trainable params: 9,729
Non-trainable params: 0
_________________________________________________________________
---------------------------------------------------------------------------
InvalidArgumentError                      Traceback (most recent call last)
c:\users\hrafiq\appdata\local\programs\python\python35\lib\site-packages\tensorflow\python\client\session.py in _do_call(self, fn, *args)
   1334     try:
-&gt; 1335       return fn(*args)
   1336     except errors.OpError as e:

c:\users\hrafiq\appdata\local\programs\python\python35\lib\site-packages\tensorflow\python\client\session.py in _run_fn(feed_dict, fetch_list, target_list, options, run_metadata)
   1317       # Ensure any changes to the graph are reflected in the runtime.
-&gt; 1318       self._extend_graph()
   1319       return self._call_tf_sessionrun(

c:\users\hrafiq\appdata\local\programs\python\python35\lib\site-packages\tensorflow\python\client\session.py in _extend_graph(self)
   1352     with self._graph._session_run_lock():  # pylint: disable=protected-access
-&gt; 1353       tf_session.ExtendSession(self._session)
   1354 

InvalidArgumentError: Node 'training/SGD/gradients/unified_gru_58/StatefulPartitionedCall_grad/StatefulPartitionedCall': Connecting to invalid output 4 of source node unified_gru_58/StatefulPartitionedCall which has 4 outputs

During handling of the above exception, another exception occurred:

InvalidArgumentError                      Traceback (most recent call last)
&lt;ipython-input-52-05ea50da2f1c&gt; in &lt;module&gt;()
      5 #Convert Keras model to Estimator
      6 # tf.disable_eager_execution()
----&gt; 7 estimator = tf.keras.estimator.model_to_estimator(keras_model=model_fn_keras())
      8 # estimator = model_fn_keras()
      9 

c:\users\hrafiq\appdata\local\programs\python\python35\lib\site-packages\tensorflow\python\keras\estimator\__init__.py in model_to_estimator(keras_model, keras_model_path, custom_objects, model_dir, config)
     71       custom_objects=custom_objects,
     72       model_dir=model_dir,
---&gt; 73       config=config)
     74 
     75 # LINT.ThenChange(//tensorflow_estimator/python/estimator/keras.py)

c:\users\hrafiq\appdata\local\programs\python\python35\lib\site-packages\tensorflow_estimator\python\estimator\keras.py in model_to_estimator(keras_model, keras_model_path, custom_objects, model_dir, config)
    488   if keras_model._is_graph_network:
    489     warm_start_path = _save_first_checkpoint(keras_model, custom_objects,
--&gt; 490                                              config)
    491   elif keras_model.built:
    492     logging.warning('You are creating an Estimator from a Keras model manually '

c:\users\hrafiq\appdata\local\programs\python\python35\lib\site-packages\tensorflow_estimator\python\estimator\keras.py in _save_first_checkpoint(keras_model, custom_objects, config)
    365           # pylint: disable=protected-access
    366           model._make_train_function()
--&gt; 367           K._initialize_variables(sess)
    368           # pylint: enable=protected-access
    369         saver = saver_lib.Saver()

c:\users\hrafiq\appdata\local\programs\python\python35\lib\site-packages\tensorflow\python\keras\backend.py in _initialize_variables(session)
    760     # marked as initialized.
    761     is_initialized = session.run(
--&gt; 762         [variables_module.is_variable_initialized(v) for v in candidate_vars])
    763     uninitialized_vars = []
    764     for flag, v in zip(is_initialized, candidate_vars):

c:\users\hrafiq\appdata\local\programs\python\python35\lib\site-packages\tensorflow\python\client\session.py in run(self, fetches, feed_dict, options, run_metadata)
    928     try:
    929       result = self._run(None, fetches, feed_dict, options_ptr,
--&gt; 930                          run_metadata_ptr)
    931       if run_metadata:
    932         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)

c:\users\hrafiq\appdata\local\programs\python\python35\lib\site-packages\tensorflow\python\client\session.py in _run(self, handle, fetches, feed_dict, options, run_metadata)
   1151     if final_fetches or final_targets or (handle and feed_dict_tensor):
   1152       results = self._do_run(handle, final_targets, final_fetches,
-&gt; 1153                              feed_dict_tensor, options, run_metadata)
   1154     else:
   1155       results = []

c:\users\hrafiq\appdata\local\programs\python\python35\lib\site-packages\tensorflow\python\client\session.py in _do_run(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)
   1327     if handle is None:
   1328       return self._do_call(_run_fn, feeds, fetches, targets, options,
-&gt; 1329                            run_metadata)
   1330     else:
   1331       return self._do_call(_prun_fn, handle, feeds, fetches)

c:\users\hrafiq\appdata\local\programs\python\python35\lib\site-packages\tensorflow\python\client\session.py in _do_call(self, fn, *args)
   1347           pass
   1348       message = error_interpolation.interpolate(message, self._graph)
-&gt; 1349       raise type(e)(node_def, op, message)
   1350 
   1351   def _extend_graph(self):

InvalidArgumentError: Node 'training/SGD/gradients/unified_gru_58/StatefulPartitionedCall_grad/StatefulPartitionedCall': Connecting to invalid output 4 of source node unified_gru_58/StatefulPartitionedCall which has 4 outputs

&lt;/denchmark-code&gt;

Describe the expected behavior
Should not give any error
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='rafiqhasan' date='2019-04-19T19:36:58Z'>
		This question is better asked on &lt;denchmark-link:http://stackoverflow.com/questions/tagged/tensorflow&gt;StackOverflow&lt;/denchmark-link&gt;
 since it is not a bug or feature request. There is also a larger community that reads questions there.
If you think we've misinterpreted a bug, please comment again with a clear explanation, as well as all of the information requested in the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/new/choose&gt;issue template&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='rafiqhasan' date='2019-04-20T10:55:56Z'>
		&lt;denchmark-link:https://github.com/ymodak&gt;@ymodak&lt;/denchmark-link&gt;
 : I am not able to relate as to why should this not be a bug ? A simple operation done with a Keras exported TF model is resulting in an error which should not be happening.
On the same model above, if I call model.fit( ), it runs absolutely fine so it should also be converted easily using the function - tf.keras.estimator.model_to_estimator( ).
As per the  here - &lt;denchmark-link:https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/keras/estimator/model_to_estimator&gt;https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/keras/estimator/model_to_estimator&lt;/denchmark-link&gt;
 this should work if the Keras model is valid.
I believe this is a bug.
Also asked on: &lt;denchmark-link:https://stackoverflow.com/questions/55772880/tf-2-0-method-estimator-model-to-estimator-fails-but-model-fit-works-for-tf&gt;https://stackoverflow.com/questions/55772880/tf-2-0-method-estimator-model-to-estimator-fails-but-model-fit-works-for-tf&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='rafiqhasan' date='2019-06-12T05:55:27Z'>
		Reopening this to debug further and handle appropriately.
		</comment>
		<comment id='4' author='rafiqhasan' date='2019-06-13T17:22:38Z'>
		This is indeed a bug, which comes from a bad interaction between tf.function and model_to_estimator.
&lt;denchmark-link:https://colab.sandbox.google.com/gist/robieta/d20dee003c8a21aceb251ac3c64583c1/model_to_est_fn.ipynb&gt;https://colab.sandbox.google.com/gist/robieta/d20dee003c8a21aceb251ac3c64583c1/model_to_est_fn.ipynb&lt;/denchmark-link&gt;

The RNN just happen to be the only layers (that I know of, at least) which use functions internally which is why this surfaced on the GRU layer.
		</comment>
		<comment id='5' author='rafiqhasan' date='2019-06-13T20:15:11Z'>
		Thanks for reporting the issue. We are able to reproduce it.
As &lt;denchmark-link:https://github.com/robieta&gt;@robieta&lt;/denchmark-link&gt;
 stated, this issue was caused by the combination of tf.function in keras layer and v1 tf.session which is used by model_to_estimator.
With LSTM/GRU v2, the call body has been changed to use tf.function. In model_to_estimator, model was first created with forward graph, and then model._make_train_function(), which will try to update the graph with gradient part. This will fail if they run under same session, with warning message:
W0613 09:53:26.989550   66929 c_api.cc:338] Operation '{name:'gru/StatefulPartitionedCall' id:65 op device:{} def:{{{node gru/StatefulPartitionedCall}} = StatefulPartitionedCall[Tin=[DT_FLOAT, DT_FLOAT, DT_RESOURCE, DT_RESOURCE, DT_RESOURCE], Tout=[DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, ..., DT_VARIANT, DT_VARIANT, DT_VARIANT, DT_FLOAT, DT_INT32], _gradient_op_type="PartitionedCall-1192", config="", config_proto="\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001", executor_type="", f=__forward_standard_gru_2674[]](reshape/Reshape, gru/zeros, gru/kernel, gru/recurrent_kernel, gru/bias)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.
The follow up K._initialize_variables(sess) will fail since the graph is in a weird state now.
Let me see if there is any workaround for this issue.
		</comment>
		<comment id='6' author='rafiqhasan' date='2019-06-14T17:58:00Z'>
		This should now be fixed by &lt;denchmark-link:https://github.com/tensorflow/estimator/commit/c956dd32561bac645a1cd870d3c8cfe8e9fe969b&gt;tensorflow/estimator@c956dd3&lt;/denchmark-link&gt;
, which should be available in tf estimator nightly.
		</comment>
		<comment id='7' author='rafiqhasan' date='2019-06-14T17:58:02Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=27750&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=27750&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='rafiqhasan' date='2019-06-17T05:48:34Z'>
		Thanks a lot guys :)
		</comment>
	</comments>
</bug>