<bug id='34577' author='songs18' open_date='2019-11-25T07:39:17Z' closed_time='2019-12-11T19:18:28Z'>
	<summary>tf.losses.cosine_similarity is a negative quantity between -1 and 0</summary>
	<description>
In tensorflow website, it describes tf.losses.cosine_simialrity as follows:
Note that it is a negative quantity between -1 and 0, where 0 indicates orthogonality and values closer to -1 indicate greater similarity.
In fact, the quantity is from 1. to -1., it just takes a negative from normal cosine_similarity.
The page is at
&lt;denchmark-link:https://tensorflow.google.cn/api_docs/python/tf/keras/losses/cosine_similarity&gt;https://tensorflow.google.cn/api_docs/python/tf/keras/losses/cosine_similarity&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='songs18' date='2019-11-25T08:14:31Z'>
		I can find the code in github.
`
y_true = nn.l2_normalize(y_true, axis=axis)
y_pred = nn.l2_normalize(y_pred, axis=axis)
return -math_ops.reduce_sum(y_true * y_pred, axis=axis)
`
		</comment>
		<comment id='2' author='songs18' date='2019-11-26T06:09:15Z'>
		&lt;denchmark-link:https://github.com/songs18&gt;@songs18&lt;/denchmark-link&gt;
, Could you post complete standalone code snippet for us to analyze the issue better?
		</comment>
		<comment id='3' author='songs18' date='2019-11-26T06:46:14Z'>
		‘’‘Python
def cosine_similarity(y_true, y_pred, axis=-1):
"""Computes the cosine similarity between labels and predictions.
Note that it is a negative quantity between -1 and 0, where 0 indicates
orthogonality and values closer to -1 indicate greater similarity. This makes
it usable as a loss function in a setting where you try to maximize the
proximity between predictions and targets.
loss = -sum(y_true * y_pred)
Args:
y_true: Tensor of true targets.
y_pred: Tensor of predicted targets.
axis: Axis along which to determine similarity.
Returns:
Cosine similarity tensor.
"""
y_true = nn.l2_normalize(y_true, axis=axis)
y_pred = nn.l2_normalize(y_pred, axis=axis)
return -math_ops.reduce_sum(y_true * y_pred, axis=axis)
'''
		</comment>
		<comment id='4' author='songs18' date='2019-12-09T02:30:08Z'>
		&lt;denchmark-link:https://github.com/songs18&gt;@songs18&lt;/denchmark-link&gt;
 Thank you for bringing this up. We assume that prediction is a value between 0 and 1 and labels are binary ie. 0 or 1. With these assumptions cosine similarity will be in positive space - [0, 1] and the loss function will be in [-1, 0].
		</comment>
		<comment id='5' author='songs18' date='2019-12-11T19:18:28Z'>
		Closing this as the behavior is as expected. Please let us know if you have any questions. Thank you!
		</comment>
		<comment id='6' author='songs18' date='2020-04-11T21:07:19Z'>
		poor thing,. we cant use it for generic cosine similarity loss functions...
		</comment>
	</comments>
</bug>