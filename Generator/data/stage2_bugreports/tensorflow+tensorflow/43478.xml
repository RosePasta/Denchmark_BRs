<bug id='43478' author='Liu-Da' open_date='2020-09-23T09:53:16Z' closed_time='2020-12-11T22:02:21Z'>
	<summary>tf2.3 keras.models.load_model setting compile=False fails to load saved_model but tf2.0 works.</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Use tensorflow Addons
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Mac (Can be reproduced on colab)
TensorFlow installed from (source or binary):
pip
TensorFlow version (use command below):
2.3 fails 2.0works
Python version:
python3

Describe the current behavior
I use F1score from addons as the metric. After training, I  use keras.models.load_model  to  load the saved_model  and also set compile=False.  I got an error.
&lt;denchmark-code&gt;ValueError: Unable to restore custom object of type _tf_keras_metric currently. Please make sure that the layer implements `get_config`and `from_config` when saving. In addition, please use the `custom_objects` arg when calling `load_model()`.
&lt;/denchmark-code&gt;

This happens with tf2.3, but works with tf2.0.
Describe the expected behavior
If compile=False is set, it shouldn't check the metrics or losses.
Standalone code to reproduce the issue

CODE

&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
import tensorflow_addons as tfa

print(tf.__version__)

_input = tf.keras.layers.Input(shape=(500), name="fbank") # B*T*F*c
out = tf.keras.layers.Dense(50, activation="tanh")(_input)
probabilities = tf.keras.layers.Dense(2, activation="softmax")(out)
model = tf.keras.Model(inputs=_input, outputs=probabilities)

model.compile(optimizer="sgd", loss=tf.keras.losses.CategoricalCrossentropy(), 
              metrics= ["accuracy", tfa.metrics.F1Score(num_classes=2, average="micro")])

model.summary()

x=np.random.rand(300,500)
y=np.random.rand(300,2)
model.fit(x,y,batch_size=100, epochs=2)

path = 'saved_model/'
model.save(path, save_format='tf')

del model
model = tf.keras.models.load_model('saved_model', compile=False)

&lt;/denchmark-code&gt;


OUTPUT

&lt;denchmark-code&gt;2.3.0
Model: "functional_1"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
fbank (InputLayer)           [(None, 500)]             0         
_________________________________________________________________
dense (Dense)                (None, 50)                25050     
_________________________________________________________________
dense_1 (Dense)              (None, 2)                 102       
=================================================================
Total params: 25,152
Trainable params: 25,152
Non-trainable params: 0
_________________________________________________________________
Epoch 1/2
3/3 [==============================] - 0s 4ms/step - loss: 0.7292 - accuracy: 0.5033 - f1_score: 0.0000e+00
Epoch 2/2
3/3 [==============================] - 0s 4ms/step - loss: 0.7192 - accuracy: 0.5200 - f1_score: 0.0000e+00
WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/tracking/tracking.py:111: Model.state_updates (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.
Instructions for updating:
This property should not be used in TensorFlow 2.0, as updates are applied automatically.
WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/tracking/tracking.py:111: Layer.updates (from tensorflow.python.keras.engine.base_layer) is deprecated and will be removed in a future version.
Instructions for updating:
This property should not be used in TensorFlow 2.0, as updates are applied automatically.
INFO:tensorflow:Assets written to: saved_model/assets
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-1-9ff0edc2f186&gt; in &lt;module&gt;()
     23 
     24 del model
---&gt; 25 model = tf.keras.models.load_model('saved_model', compile=False)

8 frames
/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/saving/saved_model/load.py in revive_custom_object(identifier, metadata)
    844                      'and `from_config` when saving. In addition, please use '
    845                      'the `custom_objects` arg when calling `load_model()`.'
--&gt; 846                      .format(identifier))
    847 
    848 

ValueError: Unable to restore custom object of type _tf_keras_metric currently. Please make sure that the layer implements `get_config`and `from_config` when saving. In addition, please use the `custom_objects` arg when calling `load_model()`.
&lt;/denchmark-code&gt;

colab
&lt;denchmark-link:https://colab.research.google.com/drive/17DI2N1L9EKSJ8-Ua88mcSnkmRT5adna3?usp=sharing&gt;https://colab.research.google.com/drive/17DI2N1L9EKSJ8-Ua88mcSnkmRT5adna3?usp=sharing&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='Liu-Da' date='2020-09-23T10:28:03Z'>
		Please unlock the colab access permissions.
		</comment>
		<comment id='2' author='Liu-Da' date='2020-09-23T10:36:02Z'>
		
Please unlock the colab access permissions.

&lt;denchmark-link:https://colab.research.google.com/drive/17DI2N1L9EKSJ8-Ua88mcSnkmRT5adna3?usp=sharing&gt;https://colab.research.google.com/drive/17DI2N1L9EKSJ8-Ua88mcSnkmRT5adna3?usp=sharing&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='Liu-Da' date='2020-09-23T10:45:44Z'>
		Can you try to load with custom_objects={"F1Score": tfa.metrics.F1Score}?
I've used: !pip install --upgrade tensorflow tensorflow_addons in your colab
/cc &lt;denchmark-link:https://github.com/marload&gt;@marload&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='Liu-Da' date='2020-09-23T11:34:49Z'>
		&lt;denchmark-link:https://github.com/Liu-Da&gt;@Liu-Da&lt;/denchmark-link&gt;
,
As suggested by &lt;denchmark-link:https://github.com/bhack&gt;@bhack&lt;/denchmark-link&gt;
, by adding the  argument I was able to load the model without any issues. Please check &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/ae7bdd21b2917d2ec57757c648f0572a/43478.ipynb&gt;this gist&lt;/denchmark-link&gt;
 for reference. Thanks!
		</comment>
		<comment id='5' author='Liu-Da' date='2020-09-23T12:04:09Z'>
		
@Liu-Da,
As suggested by @bhack, by adding the custom_objects={"F1Score": tfa.metrics.F1Score} argument I was able to load the model without any issues. Please check this gist for reference. Thanks!

Thanks &lt;denchmark-link:https://github.com/bhack&gt;@bhack&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
. This does make the model load successfully.
But the key to the problem is why the same code behaves differently in the tf2.0 and tf2.3.
In addition, if I set compile=False,  why should we still care about the custom metric?
		</comment>
		<comment id='6' author='Liu-Da' date='2020-09-23T12:08:24Z'>
		I also found that the model trained and saved using tf2.0 can be loaded correctly by tf2.3. (set compile=False and dont need set custom_objects)
		</comment>
		<comment id='7' author='Liu-Da' date='2020-09-23T12:25:52Z'>
		I don't know if tf2.0 was going to save this custom object metrics. With the current code a think that the internal load doesn't care about the  argument &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/saving/saved_model/load.py#L119-L120&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/saving/saved_model/load.py#L119-L120&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='Liu-Da' date='2020-09-23T12:39:35Z'>
		
I don't know if tf2.0 was going to save this custom object metrics. With the current code a think that the internal load doesn't care about the compile argument https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/saving/saved_model/load.py#L119-L120

As the model trained and saved using tf2.0 can be loaded correctly by tf2.3 without set any custom_objects, this situation may not be caused by tf.keras.model.load but by Model.save.
		</comment>
		<comment id='9' author='Liu-Da' date='2020-09-23T12:41:44Z'>
		
I don't know if tf2.0 was going to save this custom object metrics.

So if you don't save custom object metrics you don't have problem on load or not? As you was asking about loading with compile=False
		</comment>
		<comment id='10' author='Liu-Da' date='2020-09-23T12:56:35Z'>
		E.g. If you save and load a non compiled model also with TF2.3 is ok you don't need to care about the custom_metrics:
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
import tensorflow_addons as tfa

print(tf.__version__)

_input = tf.keras.layers.Input(shape=(500), name="fbank") # B*T*F*c
out = tf.keras.layers.Dense(50, activation="tanh")(_input)
probabilities = tf.keras.layers.Dense(2, activation="softmax")(out)
model = tf.keras.Model(inputs=_input, outputs=probabilities)

#model.compile(optimizer="sgd", loss=tf.keras.losses.CategoricalCrossentropy(), 
#              metrics= ["accuracy", tfa.metrics.F1Score(num_classes=2, average="micro")])

model.summary()

x=np.random.rand(300,500)
y=np.random.rand(300,2)
#model.fit(x,y,batch_size=100, epochs=2)

path = 'saved_model/'
model.save(path, save_format='tf')

del model
model = tf.keras.models.load_model('saved_model', compile=False)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='11' author='Liu-Da' date='2020-09-23T13:24:05Z'>
		
E.g. If you save and load a non compiled model also with TF2.3 is ok you don't need to care about the custom_metrics:
import numpy as np
import tensorflow as tf
import tensorflow_addons as tfa

print(tf.__version__)

_input = tf.keras.layers.Input(shape=(500), name="fbank") # B*T*F*c
out = tf.keras.layers.Dense(50, activation="tanh")(_input)
probabilities = tf.keras.layers.Dense(2, activation="softmax")(out)
model = tf.keras.Model(inputs=_input, outputs=probabilities)

#model.compile(optimizer="sgd", loss=tf.keras.losses.CategoricalCrossentropy(), 
#              metrics= ["accuracy", tfa.metrics.F1Score(num_classes=2, average="micro")])

model.summary()

x=np.random.rand(300,500)
y=np.random.rand(300,2)
#model.fit(x,y,batch_size=100, epochs=2)

path = 'saved_model/'
model.save(path, save_format='tf')

del model
model = tf.keras.models.load_model('saved_model', compile=False)


This code runs perfectly.


I don't know if tf2.0 was going to save this custom object metrics.

So if you don't save custom object metrics you don't have problem on load or not? As you was asking about loading with compile=False

Yes, this code runs perfectly.
		</comment>
		<comment id='12' author='Liu-Da' date='2020-09-23T13:38:14Z'>
		&lt;denchmark-link:https://user-images.githubusercontent.com/24472521/94018474-3bbf0780-fde3-11ea-8ad7-1e08dbc7f464.png&gt;&lt;/denchmark-link&gt;

The official document says that if we use Savedmodel, we don't need to consider the issue of custom_object.
Model should been successfully loaded by model =tf.keras.models.load_model('saved_model').
Even if there is a custom_object, it should not affect the loading model.
When we compile and train a model and then distribute it to others, we hope that the model can be successfully loaded without any source data sharing and inference can be performed correctly.
		</comment>
		<comment id='13' author='Liu-Da' date='2020-09-23T15:24:34Z'>
		I don't know if the exception is (/cc &lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;
)


		</comment>
		<comment id='14' author='Liu-Da' date='2020-09-25T06:44:16Z'>
		If someone only wants to load the model for prediction and inference, without retraining, I found a workaround solution.
Use this code before model.save
&lt;denchmark-code&gt;model.optimizer = None
model.compiled_loss = None
model.compiled_metrics = None
&lt;/denchmark-code&gt;

		</comment>
		<comment id='15' author='Liu-Da' date='2020-09-25T06:46:31Z'>
		
I don't know if the exception is (/cc @k-w-w)



tensorflow/tensorflow/python/keras/saving/saved_model/metric_serialization.py


        Lines 44 to 45
      in
      0650101






 dict())  # TODO(b/135550038): save functions to enable saving 



 # custom metrics. 






Can anyone familiar with this part of the code provide some help?
		</comment>
		<comment id='16' author='Liu-Da' date='2020-09-25T10:49:00Z'>
		It is referencing an internal ticket. I've already mentioned &lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;

		</comment>
		<comment id='17' author='Liu-Da' date='2020-09-28T08:28:23Z'>
		Was able to reproduce the issue.
Code works with TF v2.0, throws an error stating
 with TF v2.3. Please find the gist of it &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/906edc47c0ce6ee03c40d8f3b8f0dc01/untitled0.ipynb#scrollTo=Hcdmx695RtxT&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='18' author='Liu-Da' date='2020-12-10T17:11:08Z'>
		
If someone only wants to load the model for prediction and inference, without retraining, I found a workaround solution.
Use this code before model.save
model.optimizer = None
model.compiled_loss = None
model.compiled_metrics = None


&lt;denchmark-link:https://github.com/Liu-Da&gt;@Liu-Da&lt;/denchmark-link&gt;
 I'm experiencing this problem as well. I'm using  to save the model. Do you see an adjustment of your work-around when using ?
		</comment>
		<comment id='19' author='Liu-Da' date='2020-12-10T17:20:09Z'>
		I submitted a fix for this issue in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/45278&gt;#45278&lt;/denchmark-link&gt;
, but it is still waiting for review.
I don't think there is an easy workaround for this currently other than only saving the weights in  or by adapting the callback itself to only save the model without the metrics.
		</comment>
		<comment id='20' author='Liu-Da' date='2020-12-11T09:27:01Z'>
		&lt;denchmark-link:https://github.com/lgeiger&gt;@lgeiger&lt;/denchmark-link&gt;
 I'm thinking about using &lt;denchmark-link:https://github.com/Liu-Da&gt;@Liu-Da&lt;/denchmark-link&gt;
 workaround together with :
...
callbacks = [
    ModelCheckpoint(
        filepath=arguments['model_output_path'],
        monitor=arguments['early_stopping_monitor'],
        verbose=0,
        save_best_only=True,
        save_weights_only=False,
        mode='max'
    )
]
model.fit(
    x=train_generator,
    steps_per_epoch=np.ceil(num_images_train / arguments['batch_size_train']),
    epochs=arguments['epochs'],
    validation_data=val_generator,
    validation_steps=np.ceil(num_images_val / arguments['batch_size_val']),
    callbacks=callbacks
)

model.optimizer = None
model.compiled_loss = None
model.compiled_metrics = None
model.save(arguments['model_output_path'])
Have I understood ModelCheckpoint correctly, that after model.fit(), the variable model will be the best model (because save_best_only=True in ModelCheckpoint)?
		</comment>
		<comment id='21' author='Liu-Da' date='2020-12-11T22:02:22Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43478&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43478&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>