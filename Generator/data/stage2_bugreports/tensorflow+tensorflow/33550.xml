<bug id='33550' author='mmilosav' open_date='2019-10-20T19:09:21Z' closed_time='2020-02-28T18:48:48Z'>
	<summary>tf.keras.Model.fit ignores class_weight when passed tf.data.Dataset</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS 10.14.6 or Colab
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.0.0, 1.15.0-rc3
Python version: 3.7
CUDA/cuDNN version:
GPU model and memory: None or Colab

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
tf.keras.Model.fit ignores class_weight when passed a tf.data.Dataset.  When passed an instance of tf.data.Dataset and a class_weight dictionary with nonsensical label keys, it runs without exception, whereas it correctly raises ValueError when passed a pair of np.ndarray.
Describe the expected behavior
tf.keras.Model.fit should apply class_weight when passed a tf.data.Dataset.  It should raise an exception for incorrect class_weight keys.
Code to reproduce the issue
import tensorflow as tf
import numpy as np

features = np.array([[-1.], [1.]], dtype=np.float32)
labels = np.array([[0], [1]], dtype=np.int32)

dataset = tf.data.Dataset.from_tensor_slices((features, labels)).batch(1)

model = tf.keras.Sequential([tf.keras.layers.Dense(1, activation='sigmoid')])

model.compile(optimizer='sgd', loss='binary_crossentropy')

class_weight = {'bad_negative_label': 0.5, 'bad_positive_label': 0.5}

fit_ops = (('tf.data.Dataset', lambda: model.fit(dataset, class_weight=class_weight, verbose=0)),
           ('np.ndarray', lambda: model.fit(features, labels, class_weight=class_weight, verbose=0)))

for key, fit_op in fit_ops:
    try:
        print(f'fitting {key} with bad class_weight label')
        fit_op()
    except ValueError as e:
        print('failed as it should have')
        raise ValueError from e
    else:
        print('succeded but should have failed')
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
&lt;denchmark-code&gt;fitting tf.data.Dataset with bad class_weight label
succeded but should have failed
fitting np.ndarray with bad class_weight label
failed as it should have
Traceback (most recent call last):
  File "scratch.py", line 22, in &lt;module&gt;
    fit_op()
  File "scratch.py", line 17, in &lt;lambda&gt;
    ('np.ndarray', lambda: model.fit(features, labels, class_weight=class_weight, verbose=0)))
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training.py", line 728, in fit
    use_multiprocessing=use_multiprocessing)
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training_v2.py", line 224, in fit
    distribution_strategy=strategy)
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training_v2.py", line 547, in _process_training_inputs
    use_multiprocessing=use_multiprocessing)
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training_v2.py", line 594, in _process_inputs
    steps=steps)
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training.py", line 2530, in _standardize_user_data
    feed_sample_weight_modes)
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training.py", line 2529, in &lt;listcomp&gt;
    for (ref, sw, cw, mode) in zip(y, sample_weights, class_weights,
  File "/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training_utils.py", line 946, in standardize_weights
    '`class_weight`.' % (existing_classes - existing_class_weight))
ValueError: `class_weight` must contain all classes in the data. The classes {0, 1} exist in the data but not in `class_weight`.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "scratch.py", line 25, in &lt;module&gt;
    raise ValueError from e
ValueError

Process finished with exit code 1
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='mmilosav' date='2019-10-21T08:47:27Z'>
		I could reproduce the issue on colab with TF 2.0.0.
Please see the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/12fbb6df6ff8c99dce74b1464b725141/untitled213.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks
		</comment>
		<comment id='2' author='mmilosav' date='2019-10-22T18:50:29Z'>
		Could it be that the call to model._standardize_user_data in training_v2.py:



tensorflow/tensorflow/python/keras/engine/training_v2.py


         Line 641
      in
      8b32434






 steps=steps) 





should also be passed extract_tensors_from_dataset=True?
		</comment>
		<comment id='3' author='mmilosav' date='2019-10-22T19:17:30Z'>
		p.s. Or, could it be that calling train_on_batch by running strategy.experimental_run_v2 on per_replica_function in 


tensorflow/tensorflow/python/keras/engine/training_v2_utils.py


         Line 72
      in
      8b32434






 outputs = strategy.experimental_run_v2( 





is failing to pass the class_weight to train_on_batch?  (Unless there is a partial binding of class_weight kwarg to train_on_batch somewhere, but I don't see it.).
Thank you.
		</comment>
		<comment id='4' author='mmilosav' date='2019-10-23T11:26:51Z'>
		We are having a similar problem. It would be nice if we could use class_weights in model.fit() instead of relying on adding a sample weight to the tf.data.Dataset (x, y, weight).
		</comment>
		<comment id='5' author='mmilosav' date='2019-10-23T15:28:41Z'>
		It is very dangerous for the training behavior to completely change, in terms of applying vs. ignoring without any warning the class_weight kwarg, simply by going from model.fit(x, y, class_weight=class_weight, ...) to model.fit(tf.data.Dataset.from_tensor_slices((x, y)).batch(...), class_weight=class_weight, ...).
Consider for example the &lt;denchmark-link:https://www.tensorflow.org/tutorials/structured_data/imbalanced_data&gt;Classification on imbalanced data&lt;/denchmark-link&gt;
 tutorial that specifically demos .  By simply replacing  with  (and similar for , and also removing the  kwarg in ), the tutorial example  to apply , again, without any warning.
		</comment>
		<comment id='6' author='mmilosav' date='2020-02-10T08:35:40Z'>
		Has this problem been resolved in tf2.1?
		</comment>
		<comment id='7' author='mmilosav' date='2020-02-28T18:48:48Z'>
		&lt;denchmark-link:https://github.com/mmilosav&gt;@mmilosav&lt;/denchmark-link&gt;
 Thanks for the issue!
This has been fixed in the latest tf-nightly: pip install -U tf-nightly
		</comment>
		<comment id='8' author='mmilosav' date='2020-02-28T18:48:50Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33550&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33550&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>