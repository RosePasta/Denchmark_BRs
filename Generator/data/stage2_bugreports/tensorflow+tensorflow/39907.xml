<bug id='39907' author='yakovdan' open_date='2020-05-27T14:49:55Z' closed_time='2020-06-29T22:26:14Z'>
	<summary>TFlite with hexagon delegate returns wrong result.</summary>
	<description>
System information

I have written custom code
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: Snapdragon 855 running Android 9
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 2.2.0
Python version: python 3.8
Bazel version (if compiling from source): 2.0.0
GCC/Compiler version (if compiling from source): 7.5.0
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
I'm using TFlite on a mobile device to execute a quantized NN network. Without use of delegates,
I get the expected output image. When using the hexagon delegate, I get a white square image instead of the expected output. The dimensions and types remain the same.
Describe the expected behavior
I expect to have the same output image compared to running TFlite on the same device without delegates.
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
&lt;denchmark-code&gt;{
   
    std::unique_ptr&lt;tflite::FlatBufferModel&gt; model =
             tflite::FlatBufferModel::BuildFromFile(filename);
    TFLITE_MINIMAL_CHECK(model != nullptr);

// Build the interpreter
tflite::ops::builtin::BuiltinOpResolver resolver;
InterpreterBuilder builder(*model, resolver);
std::unique_ptr&lt;Interpreter&gt; interpreter;
builder(&amp;interpreter);
TFLITE_MINIMAL_CHECK(interpreter != nullptr);

// Allocate tensor buffers.
TFLITE_MINIMAL_CHECK(interpreter-&gt;AllocateTensors() == kTfLiteOk);
printf("=== Pre-invoke Interpreter State ===\n");
tflite::PrintInterpreterState(interpreter.get());

// input tensor type is float32
int input = interpreter-&gt;inputs()[0];
TfLiteIntArray* tensor_dims = interpreter-&gt;tensor(input)-&gt;dims;
int wanted_height = tensor_dims-&gt;data[1];
int wanted_width = tensor_dims-&gt;data[2];
int wanted_channels = tensor_dims-&gt;data[3];

int numberOfPixels = wanted_width*wanted_height*wanted_channels;
if (numberOfPixels != 224*224*3) // expected input size
{
    std::cout &lt;&lt; "input tensor is of wrong size";
    exit(-1);
}
float * img_ptr = (float *)processedInput-&gt;getHostPtr();
for (int k = 0; k &lt; numberOfPixels; ++k)
{
    interpreter-&gt;typed_tensor&lt;float&gt;(input)[k] = img_ptr[k];
}


/// setup hexagon delegate now
const char * library_directory_path = "/data/local/";
TfLiteHexagonInitWithPath(library_directory_path);  // Needed once at startup.
TfLiteHexagonDelegateOptions params = {0};

auto* delegate_ptr = TfLiteHexagonDelegateCreate(&amp;params);
Interpreter::TfLiteDelegatePtr delegate(delegate_ptr,
                                        [](TfLiteDelegate* delegate) {
                                            TfLiteHexagonDelegateDelete(delegate);
                                        });
interpreter-&gt;ModifyGraphWithDelegate(delegate.get());



// Run inference
TFLITE_MINIMAL_CHECK(interpreter-&gt;Invoke() == kTfLiteOk);
printf("\n\n=== Post-invoke Interpreter State ===\n");
tflite::PrintInterpreterState(interpreter.get());

int output = interpreter-&gt;outputs()[0];
TfLiteIntArray* output_dims = interpreter-&gt;tensor(output)-&gt;dims;

int output_w = output_dims-&gt;data[1]; // as expected, this 224 by 224 pixels
int output_h = output_dims-&gt;data[2];
numberOfPixels = output_h * output_w;

// output tensor type is float32

float * output_buffer = new float[numberOfPixels];
for (int k=0; k &lt; numberOfPixels;++k)
    output_buffer[k] = interpreter-&gt;typed_tensor&lt;float&gt;(output)[k];

std::ofstream file;
file.open("/data/local/rgbImage_out.bin", std::ios::binary|std::ofstream::out);
if (file.is_open())
{
    file.write((char *)output_buffer, 224*224*sizeof(float)); // assumed the out buffer is a vector
    file.close();

}else{
    std::cout &lt;&lt; "couldn't open file" &lt;&lt; std::endl;
}

delete []  output_buffer;

// After usage of delegate.
TfLiteHexagonTearDown();  // Needed once at end of app/DSP usage.

 }
&lt;/denchmark-code&gt;

Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
See attached two log files which contain interpreter state prints before and after calling invoke()
for both cases - with and without a hexagon delegate
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/4689474/no_delegate_log.txt&gt;no_delegate_log.txt&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/4689475/delegate_log.txt&gt;delegate_log.txt&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='yakovdan' date='2020-05-28T17:42:23Z'>
		Hi,
It will be hard to check what is wrong without a model.
Can you share the model ? (you can share it privately, no need to attach it here).
Thanks
		</comment>
		<comment id='2' author='yakovdan' date='2020-06-04T14:37:50Z'>
		How do I share the model privately?
		</comment>
		<comment id='3' author='yakovdan' date='2020-06-04T23:06:41Z'>
		&lt;denchmark-link:https://github.com/yakovdan&gt;@yakovdan&lt;/denchmark-link&gt;
 either email me directly (email same as username here) or send the question on &lt;denchmark-link:mailto:tflite@tensorflow.org&gt;tflite@tensorflow.org&lt;/denchmark-link&gt;
 and i will reply and we can follow privately.
Thanks
		</comment>
		<comment id='4' author='yakovdan' date='2020-06-22T21:53:01Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='5' author='yakovdan' date='2020-06-29T22:26:13Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='6' author='yakovdan' date='2020-06-29T22:26:15Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39907&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39907&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>