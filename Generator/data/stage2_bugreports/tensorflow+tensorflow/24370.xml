<bug id='24370' author='thymbahutymba' open_date='2018-12-14T11:26:01Z' closed_time='2019-02-22T23:43:13Z'>
	<summary>Use retrained graph with tensorflow in C</summary>
	<description>
Hi guys I'm trying to use retrained graph created with image retraining with C api. I retrainded with bitmap image with size 444x440. The C code that i wrote is the following:
&lt;denchmark-code&gt;#include "neural_network.h"

#define GRAPH_NAME ("retrained_graph.pb")
#define IN_NAME ("Placeholder")
#define OUT_NAME ("final_result")

// Change this or array data with less useless name
typedef unsigned int data_t;

void free_buffer(void *data, size_t length) { free(data); }

/* Read file containing the graph of the neural network and initialize the
 * TF_Buffer
 */
TF_Buffer *read_file(const char *file) {
    FILE *f = fopen(file, "rb");
    fseek(f, 0, SEEK_END);
    long fsize = ftell(f);
    fseek(f, 0, SEEK_SET);

    void *data = malloc(fsize);
    fread(data, fsize, 1, f);
    fclose(f);

    TF_Buffer *buf = TF_NewBuffer();
    buf-&gt;data = data;
    buf-&gt;length = fsize;
    buf-&gt;data_deallocator = free_buffer;
    return buf;
}

// import the graph in the main graph
void import_graph(TF_Graph *graph, TF_Status *status) {
    TF_Buffer *graph_def = read_file(GRAPH_NAME);

    TF_ImportGraphDefOptions *opts = TF_NewImportGraphDefOptions();
    TF_GraphImportGraphDef(graph, graph_def, opts, status);
    TF_DeleteImportGraphDefOptions(opts);
    // check status
    if (TF_GetCode(status) != TF_OK) {
        fprintf(stderr, "ERROR: Unable to import graph %s", TF_Message(status));
        return;
    }

    TF_DeleteBuffer(graph_def);
}

static void Deallocator(void *data, size_t length, void *arg) {}

TF_Code run_session(TF_Graph *graph, TF_Status *status, data_t *data) {
    float *result;

    // Number of bytes of input
    const int nb_in = EL_W * ACT_IMG_H * sizeof(data_t);

    // Number of bytes of output
    const int nb_out = 3 * sizeof(float);

    // Input dimensions
    int64_t in_dims[] = {1, EL_W, ACT_IMG_H, 0};
    int n_in_dims = sizeof(in_dims) / sizeof(int64_t);

    // Output dimensions
    int64_t out_dims[] = {1, 3};
    int n_out_dims = sizeof(out_dims) / sizeof(int64_t);

    TF_Output input_op = {TF_GraphOperationByName(graph, IN_NAME), 0};

    TF_Tensor *input_tensor = TF_NewTensor(TF_FLOAT, in_dims, n_in_dims, data,
                                           nb_in, &amp;Deallocator, 0);

    TF_Output output = {TF_GraphOperationByName(graph, OUT_NAME), 0};

    TF_Tensor *output_values =
        TF_AllocateTensor(TF_FLOAT, out_dims, n_out_dims, nb_out);

    TF_SessionOptions *sess_opts = TF_NewSessionOptions();
    TF_Session *session = TF_NewSession(graph, sess_opts, status);

    TF_SessionRun(session,
                  NULL,                        // Run options
                  &amp;input_op, &amp;input_tensor, 1, // in: tensor, values, number
                  &amp;output, &amp;output_values, 1,  // out: tensor, vlaues, number
                  NULL, 0,                     // target operation, num targets
                  NULL,                        // metadata
                  status                       // outputs status
    );

    // result = TF_TensorData(output_values);
    // printf("%f %f %f\n", result[0], result[1], result[2]);

    printf("%s\n", TF_Message(status));
    return TF_GetCode(status);
}

void image_linearization(data_t *data) {
    BITMAP *image;
    acquire_screen();
    image = create_sub_bitmap(screen, IMG_XT, IMG_YT, EL_W, ACT_IMG_H);

    ssize_t x;
    ssize_t line;

    for (line = 0; line &lt; image-&gt;h; ++line)
        for (x = 0; x &lt; image-&gt;w; ++x) {
            data[line * image-&gt;h + x] = ((data_t *)image-&gt;line[line])[x];
        }

    destroy_bitmap(image);
    release_screen();
}

void *neural_network_task(void *period) {
    struct timespec t;
    data_t data[EL_W * ACT_IMG_H];

    TF_Graph *graph = TF_NewGraph();
    TF_Status *status = TF_NewStatus();

    import_graph(graph, status);

    set_activation(&amp;t, *(int *)period);

    /*
    TF_Operation *decode = TF_GraphOperationByName(graph, IN_NAME);
    printf("P: %p\n", decode);
    printf("NO: %i\n", TF_OperationNumOutputs(decode));
    printf("NI: %i\n", TF_OperationNumInputs(decode));

    decode = TF_GraphOperationByName(graph, OUT_NAME);
    printf("P: %p\n", decode);
    printf("NO: %i\n", TF_OperationNumOutputs(decode));
    printf("NI: %i\n", TF_OperationNumInputs(decode));
    */

    while (1) {
        image_linearization(data);

        printf("%i %s\n", run_session(graph, status, data));
        // TF_Message(status));
        wait_for_activation(&amp;t, *(int *)period);
    }
}
&lt;/denchmark-code&gt;

I had linearized the bitmap with the function and placed it into array with "width*height" element, then i following some example for creating tensor and run session but it didn't works. The tensor it's just one and the output tensor it's for 3 type of class.
The error that tensorflow gives me it's the following:
&lt;denchmark-code&gt;Generic conv implementation does not support grouped convolutions for now.
         [[{{node module_apply_default/InceptionV3/InceptionV3/Conv2d_1a_3x3/BatchNorm/FusedBatchNorm/Mul}} = Conv2D[T=DT_FLOAT, data_format="NHWC", dilations=[1, 1, 1, 1], padding="VALID", strides=[1, 2, 2, 1], use_cudnn_on_gpu=true, _device="/job:localhost/replica:0/task:0/device:CPU:0"](module_apply_default/hub_input/Sub, module_apply_default/InceptionV3/InceptionV3/Conv2d_1a_3x3/Conv2D/merged_input)]]
&lt;/denchmark-code&gt;

How i can fix it?
	</description>
	<comments>
		<comment id='1' author='thymbahutymba' date='2018-12-14T17:17:25Z'>
		Provide more details: what version of TF were your graphs using / made with? Just a hint, but maybe "Generic conv implementation does not support grouped convolutions for now".. maybe thats resolved in a newer version of TF/Inception?
		</comment>
		<comment id='2' author='thymbahutymba' date='2018-12-14T17:29:58Z'>
		The graph was made with &lt;denchmark-link:https://www.tensorflow.org/hub/tutorials/image_retraining&gt;image_retraining&lt;/denchmark-link&gt;
. The version of tensorflow is the lastone installed from the website, 1.12.
		</comment>
		<comment id='3' author='thymbahutymba' date='2018-12-14T17:40:00Z'>
		The error was introduced around 8 months ago according to git blame. It does not look like newer versions support this yet?.. So you may have to modify your code to not use this feature or you could try using an older version of Tensorflow.
this line of code may give you a hint:  OP_REQUIRES(ctx, in_depth == filter.dim_size(2), ctx is just your tf OpKernelContext.. which probably resolves to your whole tf instance, not sure...
Does filter.dim_size(2) mean anything to you?
Hopefully someone who can look at your code can suggest an alternative approach..
Depthwise convolution and grouped convolutions seems to be good keywords to help you investigate an alternative.
blame : &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blame/270acc07cc9c70e51e80956c032b5a264fb82dd8/tensorflow/core/kernels/conv_ops.cc#L133&gt;https://github.com/tensorflow/tensorflow/blame/270acc07cc9c70e51e80956c032b5a264fb82dd8/tensorflow/core/kernels/conv_ops.cc#L133&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/a5a51ad3a1200e2e5ef46c140bab717422e41ca2&gt;a5a51ad&lt;/denchmark-link&gt;

EDIT:
&lt;denchmark-code&gt;    int64_t in_dims[] = {1, EL_W, ACT_IMG_H, 0};
    int n_in_dims = sizeof(in_dims) / sizeof(int64_t);
&lt;/denchmark-code&gt;

So n_in_dims is 4. and your then call TF_NewTensor.. Which I think will return the error when you call TF_SessionRun.. So why not create multiple tensors with only 2 input dims in each one?
I guess 3D tensors aren't supported when you want to run convolutions on them..
I hope I'm being helpful... Hopefully someone with more expertise can provide additional information.
		</comment>
		<comment id='4' author='thymbahutymba' date='2018-12-14T17:49:19Z'>
		
The error was introduced around 8 months ago according to git blame. It does not look like newer versions support this yet?.. So you may have to modify your code to not use this feature or you could try using an older version of Tensorflow.
this line of code may give you a hint:  OP_REQUIRES(ctx, in_depth == filter.dim_size(2), ctx is just your tf OpKernelContext.. which probably resolves to your whole tf instance, not sure...
Does filter.dim_size(2) mean anything to you?
Hopefully someone who can look at your code can suggest an alternative approach..
Depthwise convolution and grouped convolutions seems to be good keywords to help you investigate an alternative.
blame : https://github.com/tensorflow/tensorflow/blame/270acc07cc9c70e51e80956c032b5a264fb82dd8/tensorflow/core/kernels/conv_ops.cc#L133
a5a51ad
EDIT:
    int64_t in_dims[] = {1, EL_W, ACT_IMG_H, 0};
    int n_in_dims = sizeof(in_dims) / sizeof(int64_t);

So n_in_dims is 4. and your then call TF_NewTensor.. Which I think will return the error when you call TF_SessionRun.. So why not create multiple tensors with only 2 input dims in each one?
I guess 3D tensors aren't supported when you want to run convolutions on them..
I hope I'm being helpful... Hopefully someone with more expertise can provide additional information.

I'm forced to use 4d dimension because if i use just {EL_W, ACT_IMG_H} I got other error that is the following:
&lt;denchmark-code&gt;2018-12-14 18:42:22.049577: W tensorflow/core/framework/op_kernel.cc:1273] OP_REQUIRES failed at conv_ops.cc:437 : Invalid argument: input must be 4-dimensional[1,444,440]
input must be 4-dimensional[1,444,440]
&lt;/denchmark-code&gt;

So i'm forced to use different dims but it give me other error!
Edit:
I think that the problem is that the retrain script force size of image to specific size and then i use different size that C api doesn't resize at all.
		</comment>
		<comment id='5' author='thymbahutymba' date='2018-12-14T18:05:28Z'>
		Just a quick summary: I'm trying to build graph with retrain script. I want use this graph into my C code for the recognition of an image that is rapresented by array[WIDTH*HEIGHT]. If some of you have some example that after retrain nn with own images with arbitrary size (WIDTH, HEIGHT) that use an array for store it and use as an input of TF_NewTensor used by session.
		</comment>
		<comment id='6' author='thymbahutymba' date='2018-12-15T12:35:38Z'>
		So now the question is: it's possible to use retrained graph with C api or it's only possible with C++ and python, like the guide suggest? I'm in wrong?
		</comment>
		<comment id='7' author='thymbahutymba' date='2018-12-15T18:40:15Z'>
		No I think it should be possible. I think you may have to look closely at the API / function definitions... Have you done so? Sorry I haven't got enough time this week to look closer..
&lt;denchmark-link:https://github.com/Harshini-Gadige&gt;@Harshini-Gadige&lt;/denchmark-link&gt;
 Do you know anyone you can include in on this problem with more knowledge?
		</comment>
		<comment id='8' author='thymbahutymba' date='2018-12-17T09:51:00Z'>
		Update:
&lt;denchmark-code&gt;#include "neural_network.h"

void free_buffer(void *data, size_t length) { free(data); }

/* Read file containing the graph of the neural network and initialize the
 * TF_Buffer
 */
TF_Buffer *read_file(const char *file) {
    FILE *f = fopen(file, "rb");
    fseek(f, 0, SEEK_END);
    long fsize = ftell(f);
    fseek(f, 0, SEEK_SET);

    void *data = malloc(fsize);
    fread(data, fsize, 1, f);
    fclose(f);

    TF_Buffer *buf = TF_NewBuffer();
    buf-&gt;data = data;
    buf-&gt;length = fsize;
    buf-&gt;data_deallocator = free_buffer;
    return buf;
}

// import the graph in the main graph
void import_graph(TF_Graph *graph, TF_Status *status) {
    TF_Buffer *graph_def = read_file(GRAPH_NAME);

    TF_ImportGraphDefOptions *opts = TF_NewImportGraphDefOptions();
    TF_GraphImportGraphDef(graph, graph_def, opts, status);
    TF_DeleteImportGraphDefOptions(opts);
    // check status
    if (TF_GetCode(status) != TF_OK) {
        fprintf(stderr, "ERROR: Unable to import graph %s", TF_Message(status));
        return;
    }

    TF_DeleteBuffer(graph_def);
}

static void Deallocator(void *data, size_t length, void *arg) {}

void run_session(TF_Graph *graph, TF_Status *status, tfdat_t *data) {
    // Number of bytes of input
    const unsigned int nb_in = ARRAY_SIZE * sizeof(tfdat_t);

    // Number of bytes of output
    const int nb_out = N_LAB * sizeof(float);

    // Input dimensions
    int64_t in_dims[] = {1, EL_W, ACT_IMG_H, CHANNELS};
    int n_in_dims = sizeof(in_dims) / sizeof(int64_t);

    // Output dimensions
    int64_t out_dims[] = {1, N_LAB};
    int n_out_dims = sizeof(out_dims) / sizeof(int64_t);

    TF_Output input_op = {TF_GraphOperationByName(graph, IN_NAME), 0};

    TF_Tensor *input_tensor = TF_NewTensor(TF_FLOAT, in_dims, n_in_dims, data,
                                           nb_in, &amp;Deallocator, 0);

    TF_Output output = {TF_GraphOperationByName(graph, OUT_NAME), 0};

    TF_Tensor *output_values =
        TF_AllocateTensor(TF_FLOAT, out_dims, n_out_dims, nb_out);

    TF_SessionOptions *sess_opts = TF_NewSessionOptions();
    TF_Session *session = TF_NewSession(graph, sess_opts, status);

    TF_SessionRun(session,
                  NULL,                        // Run options
                  &amp;input_op, &amp;input_tensor, 1, // in: tensor, values, number
                  &amp;output, &amp;output_values, 1,  // out: tensor, vlaues, number
                  NULL, 0,                     // target operation, num targets
                  NULL,                        // metadata
                  status                       // outputs status
    );

    if (TF_GetCode(status) == TF_OK) {
        pthread_mutex_lock(&amp;mutex_res);
        result = TF_TensorData(output_values);
        pthread_mutex_unlock(&amp;mutex_res);
    } else
        fprintf(stderr, "%s\n", TF_Message(status));
}

void image_linearization(tfdat_t *data) {
    BITMAP *image;
    acquire_screen();
    image = create_sub_bitmap(screen, IMG_XT, IMG_YT, EL_W, ACT_IMG_H);

    ssize_t x;
    ssize_t line;

    for (line = 0; line &lt; image-&gt;h; ++line)
        for (x = 0; x &lt; image-&gt;w; ++x) {
            int color = _getpixel16(image, x, line);
            data[line * image-&gt;w + x] = (tfdat_t)getr16(color) / (1 &lt;&lt; 8);
            data[line * image-&gt;w + x + 1 * image-&gt;h * image-&gt;w] = (tfdat_t)getg16(color) / (1 &lt;&lt; 8);
            data[line * image-&gt;w + x + 2 * image-&gt;h * image-&gt;w] = (tfdat_t)getb16(color) / (1 &lt;&lt; 8);
        }

    destroy_bitmap(image);
    release_screen();
}

void *neural_network_task(void *period) {
    struct timespec t;
    tfdat_t data[EL_W * ACT_IMG_H * CHANNELS];

    TF_Graph *graph = TF_NewGraph();
    TF_Status *status = TF_NewStatus();

    import_graph(graph, status);

    set_activation(&amp;t, *(int *)period);

    while (1) {
        image_linearization(data);

        run_session(graph, status, data);
        wait_for_activation(&amp;t, *(int *)period);
    }
}
&lt;/denchmark-code&gt;

Now the code works but the result it's wrong. The problem is, in my honest opinion, that the script python resize the image with fix height and width (299,299) but my image is (444,440). In python there are tf.image.resize_bilinear, how i can do it in C? There are also other problem, tensorflow expect image divided into 3 color channels (RGB) how i have to convert this value for put it into array? All height*width elements are red then green and finally blue or it's R G B R G B and so on.
		</comment>
		<comment id='9' author='thymbahutymba' date='2019-02-22T23:43:13Z'>
		This is quite a large question, and seems more appropriate for Stack Overflow (since it's about usage now rather than a bug). You can see an example of doing image resizing here:
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/examples/ios/simple/RunModelViewController.mm#L157&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/examples/ios/simple/RunModelViewController.mm#L157&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>