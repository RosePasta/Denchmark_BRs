<bug id='31166' author='sWizad' open_date='2019-07-30T14:30:08Z' closed_time='2019-12-09T06:57:43Z'>
	<summary>Possible tf.matmul bug (wrong results) on tensorflow-gpu</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v1.14.0-rc1-22-gaf24dc91b5 1.14.0
Python version: 3.6.7
GCC/Compiler version (if compiling from source): 8.2.0
CUDA/cuDNN version: cuda-10.0
GPU model and memory:

Describe the current behavior
tf.matmul on tensorflow-gpu gave wrong results. Here is a simplified version of the code.
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

r = [[ 1.0, 0.0],    [0.0, 1.0]]

x, y = np.meshgrid(list(range(400)), list(range(400)))
coords = np.stack([x,y],-1).reshape((400,400,2,1))
coords = tf.convert_to_tensor(coords,dtype=tf.float32)

r1 = tf.constant(r)

newCoords = tf.matmul(r1, coords)

sess = tf.Session()
ret = sess.run(newCoords,feed_dict={r1:r})

plt.matshow(ret[:,:,0,0])
plt.show()
&lt;/denchmark-code&gt;

When I ran it on my tensorflow-gpu, here is the result:
&lt;denchmark-link:https://gist.githubusercontent.com/sWizad/3a25d6559ea3308e5cc2731519635c32/raw/2479341ed43fb8e69c94eda3a1362d5cbde7d2d7/Figure_1.png&gt;&lt;/denchmark-link&gt;

Looks like it stops computing halfway through and gave the rest 0 as a result.

Here is the result with CPU:
&lt;denchmark-link:https://user-images.githubusercontent.com/45821224/62137176-08631480-b2d5-11e9-8b8e-6348e8b206e7.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Below is my old post. Initially, I thought the problem was related to TFRecord, but seems like this problem occurs without even using tfrecord too. For completeness, I keep the old example code with tfrecord.
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

def parser(serialized_example):
      fs = tf.io.parse_single_example(
          serialized_example,
          features={ "r": tf.FixedLenFeature([4], tf.float32) })
      fs["r"] = tf.reshape(fs["r"], [2, 2])
      return fs

r = [[ 1.0, 0.0],[0.0, 1.0]]

with tf.io.TFRecordWriter("cc.test") as tfrecord_writer:
    feature = {"r": tf.train.Feature(float_list=tf.train.FloatList(value=np.array(r).flatten() ))}
    example = tf.train.Example(features=tf.train.Features(feature=feature))
    tfrecord_writer.write(example.SerializeToString())
dataset = tf.data.TFRecordDataset(["cc.test"])
dataset = dataset.map(parser).repeat().make_one_shot_iterator()
features = dataset.get_next()

x, y = tf.meshgrid(list(range(400)), list(range(400)))
coords = tf.stack([x, y], -1)     #(h,w,2)
coords = tf.expand_dims(tf.cast(coords,tf.float32),-1) #(h,w,2,1)

r1 = features["r"]
r2 = tf.constant(r)

newCoords = tf.matmul(r1, coords)

sess = tf.Session()
ret = sess.run(newCoords[:,:,0,0])
plt.matshow(ret)
plt.show()
&lt;/denchmark-code&gt;

The code will create "cc.test" file to save the variable r and load it as r1. Then matmul r1 with some big varibles.
	</description>
	<comments>
		<comment id='1' author='sWizad' date='2019-07-31T08:30:53Z'>
		I have tried on colab with TF version 1.14 and was able to reproduce the issue.Please, find the &lt;denchmark-link:https://colab.research.google.com/drive/1-PILZtGYy4N5yV_goNWGx6CyOe22gutg&gt;gist &lt;/denchmark-link&gt;
here.Thanks!
		</comment>
		<comment id='2' author='sWizad' date='2019-08-01T05:51:47Z'>
		Replicated with Ubuntu 18.04, CUDA 10, tensorflow-gpu 1.14.0, and Python 2.7
		</comment>
		<comment id='3' author='sWizad' date='2019-08-20T02:50:51Z'>
		Replicated with
Ubuntu 16.04, CUDA 10, tensorflow-gpu 1.14.0, and Python 2.7
Ubuntu 16.04, CUDA 10, tensorflow-gpu 1.14.0, and Python 3.6
		</comment>
		<comment id='4' author='sWizad' date='2019-09-02T20:54:19Z'>
		I'm having the same issue with:
Ubuntu 18.04, CUDA 10, tensorflow-gpu 1.14.0, Python 3.6,
cudnn 7.6.2, driver version 430.26.
		</comment>
		<comment id='5' author='sWizad' date='2019-09-12T13:17:02Z'>
		I get this same issue on tensorflow-gpu 2.0rc0 on Windows with python 3.7.2, CUDA 10.0.
		</comment>
		<comment id='6' author='sWizad' date='2019-10-01T16:50:50Z'>
		I've also run into the same issue; current workaround is to perform the matmul on cpu.
Ubuntu 18.04, CUDA 10.1, tensorflow-gpu 1.13.1, and Python 3.5.2
		</comment>
		<comment id='7' author='sWizad' date='2019-11-21T09:14:14Z'>
		&lt;denchmark-link:https://github.com/sWizad&gt;@sWizad&lt;/denchmark-link&gt;

I tried in colab with TF GPU versions for 1.14, 1.15 and i am not seeing any issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/6c0d71133160fb0614bb28942c3fba04/untitled79.ipynb&gt;here&lt;/denchmark-link&gt;
.Please, let us know whether we can close this issue.Thanks!
		</comment>
		<comment id='8' author='sWizad' date='2019-11-22T14:20:03Z'>
		Hello,
I've run into the same issue on Ubuntu 18.04 CUDA 10.1 tensorflow-gpu version 2.0.0 and Python 3.7.4. Cudnn version is 7.6.2.
But in my case, if I use the version 1.14 of tensorflow the code above gives me the right answer.
It seems that in colab, there is no issue for the version 2.0 and for the 1.14.
Any idea why is there that problem ?
		</comment>
		<comment id='9' author='sWizad' date='2019-12-02T20:56:39Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/humanpose1&gt;@humanpose1&lt;/denchmark-link&gt;
  This is fixed on Colab because CUDA 10.1 is used there. However, the issue still persists in the official TF 1.15 or TF 2 python packages, which are using CUDA 10.0.
		</comment>
		<comment id='10' author='sWizad' date='2019-12-02T20:57:56Z'>
		This is most likely a duplicate of issue &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/26969&gt;#26969&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='11' author='sWizad' date='2019-12-02T21:27:52Z'>
		&lt;denchmark-link:https://github.com/fxtentacle&gt;@fxtentacle&lt;/denchmark-link&gt;
 Can you please try with  and let us know whether it resolved for you or not. Thanks!
		</comment>
		<comment id='12' author='sWizad' date='2019-12-02T21:36:50Z'>
		I have tried  and I cannot reproduce the issue. Please take a look at the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/d8c15cfca53160749ccf84c1443a3bbb/untitled679.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks.
The issue is there in  and I am not sure whether there will be any more changes TF1.x. Thanks!
		</comment>
		<comment id='13' author='sWizad' date='2019-12-03T07:06:29Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 Yes,  works because it uses  instead of . To confirm, I ran inside your gist:
&lt;denchmark-code&gt;from tensorflow.python.platform import build_info as tf_build_info
print(tf_build_info.cuda_version_number)
&lt;/denchmark-code&gt;

which returns 10.1.
		</comment>
		<comment id='14' author='sWizad' date='2019-12-03T07:11:34Z'>
		BTW I believe the bug we're seeing here is this one:
&lt;denchmark-link:https://docs.nvidia.com/cuda/archive/10.1/cuda-toolkit-release-notes/index.html#unique_1334956937&gt;https://docs.nvidia.com/cuda/archive/10.1/cuda-toolkit-release-notes/index.html#unique_1334956937&lt;/denchmark-link&gt;


In earlier releases, cuBLAS GEMM calls might randomly crash when running multiple host threads sharing one cuBLAS handle despite adhering to recommended usage in Thread Safety. This bug affects cuBLAS in earlier CUDA releases, and is fixed in CUDA 10.1.

So this should be a very easy fix for TF 1.15, too: Just recompile with CUDA 10.1.
		</comment>
		<comment id='15' author='sWizad' date='2019-12-09T06:57:43Z'>
		&lt;denchmark-link:https://github.com/fxtentacle&gt;@fxtentacle&lt;/denchmark-link&gt;
: Thank you for your analysis. As the fix is is part of CUDA 10.1, we recommend users to upgrade to a TF release with support for CUDA 10.1+. We do not plan to release a new 1.x based on CUDA 10.1.
		</comment>
		<comment id='16' author='sWizad' date='2019-12-09T06:57:45Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31166&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31166&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>