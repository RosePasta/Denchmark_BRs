<bug id='2209' author='illuzen' open_date='2016-05-03T21:27:13Z' closed_time='2016-08-16T00:15:33Z'>
	<summary>Word2vec overflows int32 corpus_size_</summary>
	<description>
Hello, I'm trying to build a big word model, and I'm getting overflows in the corpus_size_ declared here



tensorflow/tensorflow/models/embedding/word2vec_kernels.cc


         Line 119
      in
      e39d8fe






 int32 corpus_size_ = 0; 





The error is being thrown here:



tensorflow/tensorflow/models/embedding/word2vec_kernels.cc


         Line 191
      in
      e39d8fe






 return errors::InvalidArgument("The text file ", filename, 





Because negative numbers are less than positive numbers. I'm going to change them to uint64 in my own build, if it doesn't cause problems should I make a PR?
	</description>
	<comments>
		<comment id='1' author='illuzen' date='2016-05-03T22:00:15Z'>
		@snakecharmer1024, int64 is better than uint64 for size.
Adding &lt;denchmark-link:https://github.com/zffchen78&gt;@zffchen78&lt;/denchmark-link&gt;
 to comment whether it is okay to int64. It is possible that you need to change several places to make this work.
		</comment>
		<comment id='2' author='illuzen' date='2016-05-03T22:12:58Z'>
		&lt;denchmark-link:https://github.com/zheng-xq&gt;@zheng-xq&lt;/denchmark-link&gt;
 I don't understand these things that well, why would you prefer signed to unsigned?
		</comment>
		<comment id='3' author='illuzen' date='2016-05-03T22:30:48Z'>
		In general, TensorFlow prefers int64 when large indices or size are needed. One reason is that the following code would work naturally.
for (auto i = v_size - 1; i&gt;=0; i--) {...}
		</comment>
		<comment id='4' author='illuzen' date='2016-08-16T00:15:32Z'>
		Thank you for offering to create a pr. Unfortunately, changing from signed to unsigned often creates lots of subtle bugs (especially in the case &lt;denchmark-link:https://github.com/zheng-xq&gt;@zheng-xq&lt;/denchmark-link&gt;
 suggest). So for now I am closing this bug. Hopefully using int64 when you have more than 2^31 positive is a workable solution for you.
		</comment>
	</comments>
</bug>