<bug id='33373' author='kazimuth' open_date='2019-10-15T13:14:29Z' closed_time='2019-10-27T22:55:00Z'>
	<summary>tf.reduce_mean gives incorrect results on CPU</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Arch Linux
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): v2.0.0-rc2-26-g64c3d38 2.0.0
Python version: 3.7.4

Current Behavior
The following script:
import tensorflow as tf
import numpy as np

(x_train, _), (_, _) = tf.keras.datasets.cifar10.load_data()
x_train = x_train.astype('float32')

tf_mean = tf.reduce_mean(x_train, axis=[0, 1, 2], keepdims=False)
np_mean = np.mean(x_train, (0,1,2))
print('channel means:')
print('  tf:', tf_mean)
print('  np:', np_mean)
prints:
&lt;denchmark-code&gt;channel means:
  tf: tf.Tensor([83.88608 83.88608 83.88608], shape=(3,), dtype=float32)
  np: [125.3069  122.95015 113.866  ]
&lt;/denchmark-code&gt;

Note: the numpy results are the correct channel-wise means for CIFAR10.
Expected Behavior
Tensorflow and numpy should give at least vaguely similar results.
	</description>
	<comments>
		<comment id='1' author='kazimuth' date='2019-10-16T06:46:39Z'>
		I have tried on colab with TF version 2.0  and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/d4946579404e70cca2fbbd56137dfd2d/untitled274.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!.
		</comment>
		<comment id='2' author='kazimuth' date='2019-10-16T11:09:29Z'>
		The results of  and  are similar if we use  or . However, results are very different when . Here is the &lt;denchmark-link:https://colab.sandbox.google.com/gist/rmothukuru/86b2d6db331554600e5c27c10be97831/33373.ipynb#scrollTo=S7CWFytQJi4d&gt;Gist&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='3' author='kazimuth' date='2019-10-27T22:55:00Z'>
		&lt;denchmark-link:https://github.com/kazimuth&gt;@kazimuth&lt;/denchmark-link&gt;
: I believe the problem here is that TensorFlow is doing the computation with 32-bit float values whereas numpy is using 64-bit floating almost all the time. Even if you change  to use , it still seems to perform the calculation with 64-bit float values. If you want the same behavior I suggest you change  to use float64 and then cast to float32 in the very end like so:
&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np

(x_train, _), (_, _) = tf.keras.datasets.cifar10.load_data()
x_train = x_train.astype('float64')

tf_mean = tf.cast(tf.reduce_mean(x_train, axis=[0, 1, 2,], keepdims=False), dtype=tf.float32)
np_mean = np.mean(x_train, (0,1,2), dtype=np.float32)
print('channel means:')
print('  tf:', tf_mean)
print('  np:', np_mean)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='kazimuth' date='2019-10-27T22:55:01Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33373&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33373&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>