<bug id='23212' author='brochier' open_date='2018-10-24T13:37:12Z' closed_time='2018-11-26T20:22:40Z'>
	<summary>Ambiguity with tf.nn.embedding_lookup_sparse</summary>
	<description>
Please make sure that this is a feature request. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:feature_template
System information

TensorFlow 1.9.0
Python 3.6.6
Are you willing to contribute it (Yes/No): Yes

Describe the feature and the current behavior/state.
The tf.nn.embedding_lookup_sparse need two tf.SparseTensor (sp_ids and sp_weights) but I can't figure out why. Specifically, it seems to me that the columns of the indices of sp_ids and sp_weights are useless (see the example in the doc). This could be changed to use only one SparseTensor with:

rows of indices pointing to the index of the element of the batch.
columns of indices pointing to the index of the target element of the embedding (params).
values corresponding to the weights.

Small example of two operations doing the same things:
tf.sparse_tensor_dense_matmul(sparse_tensor, embeddings)
tf.nn.embedding_lookup_sparse(embeddings, sparse_ids, sparse_weights, "sum")
Here sparse_ids and sparse_weights have the same indices, the values of sparse_ids are the columns of indices of sparse_tensor and the values of weights are the values of  sparse_tensor. The three sparse tensors share the same rows of indices.
ps: It might not work in higher dimensional embedding lookups, I just wanted to point out the fact that embedding_lookup and embedding_lookup_sparse, despite their close names, have actually a very different usability.
Will this change the current api? How?
I can't really say.  tf.nn.embedding_lookup_sparse(params, sp_ids, sp_weights...) could become tf.nn.embedding_lookup_sparse(params, sparse_ids...) to be more consistent with tf.nn.embedding_lookup.
Who will benefit with this feature?
I don't really know.
Any Other info.
Have I written custom code: no
OS Platform and Distribution: linux, but not relevant
TensorFlow installed from: pip
TensorFlow version: 1.9.0
Bazel version: ?
CUDA/cuDNN version: no CUDA
GPU model and memory: no GPU
Exact command to reproduce: See above
Mobile device: not relevant
	</description>
	<comments>
		<comment id='1' author='brochier' date='2018-10-25T01:30:46Z'>
		Thank you for your post. We noticed you have not filled out the following field in the issue template. Could you update them if they are relevant in your case, or leave them as N/A? Thanks.
Have I written custom code
OS Platform and Distribution
TensorFlow installed from
TensorFlow version
Bazel version
CUDA/cuDNN version
GPU model and memory
Exact command to reproduce
Mobile device
		</comment>
		<comment id='2' author='brochier' date='2018-10-29T22:41:09Z'>
		&lt;denchmark-link:https://github.com/brochier&gt;@brochier&lt;/denchmark-link&gt;
  - Hi, could you please provide the information asked ?
		</comment>
		<comment id='3' author='brochier' date='2018-11-01T20:58:27Z'>
		&lt;denchmark-link:https://github.com/drpngx&gt;@drpngx&lt;/denchmark-link&gt;
  -  PTAL
		</comment>
		<comment id='4' author='brochier' date='2018-11-01T22:46:31Z'>
		Both fields of sp_ids are useful. It is assumed that sp_weights is "aligned" with sp_ids in the sense that sp_ids.indices == sp_weights.indices. Only sp_ids.indices[:, 0] (the first dimension) is used.
		</comment>
		<comment id='5' author='brochier' date='2018-11-19T23:24:14Z'>
		Nagging Assignees &lt;denchmark-link:https://github.com/MarkDaoust&gt;@MarkDaoust&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/Harshini-Gadige&gt;@Harshini-Gadige&lt;/denchmark-link&gt;
: It has been 14 days with no activity and this issue has an assignee. Please update the label and/or status accordingly.
		</comment>
	</comments>
</bug>