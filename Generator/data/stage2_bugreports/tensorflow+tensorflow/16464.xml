<bug id='16464' author='is8ac' open_date='2018-01-26T17:33:42Z' closed_time='2018-02-01T06:41:53Z'>
	<summary>AssignAddVariableOp has no output</summary>
	<description>
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Arch Linux
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 1.5.0-rc1
Python version: NA (Using Go bindings)
Bazel version (if compiling from source): 0.9.0
GCC/Compiler version (if compiling from source): 7.2.1
CUDA/cuDNN version: 9.1 / 7.0
GPU model and memory: GTX 1060 6GB
Exact command to reproduce: See below

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

According to the docs, AssignAddVariableOp "Outputs the incremented value, which can be used to totally order the increments to this variable.". Without this feature, I get non deterministic behavior when reading the value of the variable at the same time as I update it. However, at least in the Go bindings, it returns an operation which has no outputs. I can work around this problem by using two calls to sess.Run(), but this is inelegant.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;package main

import (
	"fmt"

	tf "github.com/tensorflow/tensorflow/tensorflow/go"
	"github.com/tensorflow/tensorflow/tensorflow/go/op"
)

func main() {
	s := op.NewScope()
	value1 := op.Const(s.SubScope("zero"), float32(0))
	value2 := op.Const(s, float32(3.1415))
	handle := op.VarHandleOp(s, tf.Float, tf.ScalarShape())
	init := op.AssignVariableOp(s, handle, value1)
	update := op.AssignAddVariableOp(s, handle, value2)
	fmt.Println("NumOutputs:", update.NumOutputs())
	graph, err := s.Finalize()
	if err != nil {
		panic(err)
	}
	sess, err := tf.NewSession(graph, nil)
	if err != nil {
		panic(err)
	}
	_, err = sess.Run(nil, nil, []*tf.Operation{init})
	if err != nil {
		panic(err)
	}
	_, err = sess.Run(nil, []tf.Output{update.Output(0)}, nil)
	if err != nil {
		panic(err)
	}
}
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;$ go run assign_demo.go 
NumOutputs: 0
panic: Tried to fetch data for 'AssignAddVariableOp:0', which produces no output.  To run to a node but not fetch any data, pass 'AssignAddVariableOp:0' as an argument to the 'target_node_names' argument of the Session::Run API.

goroutine 1 [running]:
main.main()
	/home/isaac/go/src/github.com/is8ac/gotf/assign_demo.go:32 +0x448
exit status 2
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='is8ac' date='2018-01-27T05:35:56Z'>
		&lt;denchmark-link:https://github.com/asimshankar&gt;@asimshankar&lt;/denchmark-link&gt;
  Could you take a look at this Go question?
		</comment>
		<comment id='2' author='is8ac' date='2018-01-30T20:58:19Z'>
		&lt;denchmark-link:https://github.com/is8ac&gt;@is8ac&lt;/denchmark-link&gt;
 : Thanks for the report and sorry for the confusion. That documentation is incorrect, the  does not return a tensor, as you surmised. I've sent out a change to fix the documentation which should sync to GitHub in the next day or two.
The correct way to achieve ordering is by adding control dependencies. Unfortunately, the Go API doesn't yet support control dependencies but it is trivial to add. I'll take a stab at that in the next day or two, or mark this as "Contributions Welcome" if I don't get to it.
Thanks!
		</comment>
		<comment id='3' author='is8ac' date='2018-01-31T02:37:16Z'>
		Thank you for clarifying.
I look forward to being able to use control dependencies.
		</comment>
		<comment id='4' author='is8ac' date='2018-01-31T18:51:48Z'>
		Fix submitted internally, should be synced to github in the next day or so. Thanks!
		</comment>
	</comments>
</bug>