<bug id='34820' author='Meerer' open_date='2019-12-04T10:37:30Z' closed_time='2019-12-17T10:59:03Z'>
	<summary>[Bug] InternalError: cudaGetDevice() failed. Status: cudaGetErrorString symbol not found. On Cuda 10.0.130</summary>
	<description>
System information

OS Platform and Distribution: (Windows 10)
TensorFlow installed from : Binary
TensorFlow version: TF-GIT: v2.0.0-rc2-26-g64c3d382ca  TF : 2.0.0
Python version: 3.6
CUDA/cuDNN version: 10.0.130
GPU model and memory:  GeForce Gtx 1070


similar to this issue just on CUDA 10.0.130:
#&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/32381&gt;#32381&lt;/denchmark-link&gt;


&lt;denchmark-code&gt;import tensorflow as tf
mnist = tf.keras.datasets.mnist
print("Num GPUs Available: ", len(tf.config.experimental.list_physical_devices('GPU')))
(x_train, y_train),(x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)),
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10, activation='softmax')
])


model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5)
model.evaluate(x_test, y_test)
&lt;/denchmark-code&gt;

Other info / logs
&lt;denchmark-code&gt;Num GPUs Available:  1
---------------------------------------------------------------------------
InternalError                             Traceback (most recent call last)
&lt;ipython-input-2-187cc8e8751d&gt; in &lt;module&gt;
      9   tf.keras.layers.Dense(128, activation='relu'),
     10   tf.keras.layers.Dropout(0.2),
---&gt; 11   tf.keras.layers.Dense(10, activation='softmax')
     12 ])
     13 

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\training\tracking\base.py in _method_wrapper(self, *args, **kwargs)
    455     self._self_setattr_tracking = False  # pylint: disable=protected-access
    456     try:
--&gt; 457       result = method(self, *args, **kwargs)
    458     finally:
    459       self._self_setattr_tracking = previous_value  # pylint: disable=protected-access

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\keras\engine\sequential.py in __init__(self, layers, name)
    112       tf_utils.assert_no_legacy_layers(layers)
    113       for layer in layers:
--&gt; 114         self.add(layer)
    115 
    116   @property

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\training\tracking\base.py in _method_wrapper(self, *args, **kwargs)
    455     self._self_setattr_tracking = False  # pylint: disable=protected-access
    456     try:
--&gt; 457       result = method(self, *args, **kwargs)
    458     finally:
    459       self._self_setattr_tracking = previous_value  # pylint: disable=protected-access

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\keras\engine\sequential.py in add(self, layer)
    194       # If the model is being built continuously on top of an input layer:
    195       # refresh its output.
--&gt; 196       output_tensor = layer(self.outputs[0])
    197       if len(nest.flatten(output_tensor)) != 1:
    198         raise TypeError('All layers in a Sequential model '

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\keras\engine\base_layer.py in __call__(self, inputs, *args, **kwargs)
    815           # Build layer if applicable (if the `build` method has been
    816           # overridden).
--&gt; 817           self._maybe_build(inputs)
    818           cast_inputs = self._maybe_cast_inputs(inputs)
    819 

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\keras\engine\base_layer.py in _maybe_build(self, inputs)
   2139         # operations.
   2140         with tf_utils.maybe_init_scope(self):
-&gt; 2141           self.build(input_shapes)
   2142       # We must set self.built since user defined build functions are not
   2143       # constrained to set self.built.

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\keras\layers\core.py in build(self, input_shape)
   1025         constraint=self.kernel_constraint,
   1026         dtype=self.dtype,
-&gt; 1027         trainable=True)
   1028     if self.use_bias:
   1029       self.bias = self.add_weight(

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\keras\engine\base_layer.py in add_weight(self, name, shape, dtype, initializer, regularizer, trainable, constraint, partitioner, use_resource, synchronization, aggregation, **kwargs)
    520         collections=collections_arg,
    521         synchronization=synchronization,
--&gt; 522         aggregation=aggregation)
    523     backend.track_variable(variable)
    524 

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\training\tracking\base.py in _add_variable_with_custom_getter(self, name, shape, dtype, initializer, getter, overwrite, **kwargs_for_getter)
    742         dtype=dtype,
    743         initializer=initializer,
--&gt; 744         **kwargs_for_getter)
    745 
    746     # If we set an initializer and the variable processed it, tracking will not

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\keras\engine\base_layer_utils.py in make_variable(name, shape, dtype, initializer, trainable, caching_device, validate_shape, constraint, use_resource, collections, synchronization, aggregation, partitioner)
    137       synchronization=synchronization,
    138       aggregation=aggregation,
--&gt; 139       shape=variable_shape if variable_shape else None)
    140 
    141 

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\ops\variables.py in __call__(cls, *args, **kwargs)
    256   def __call__(cls, *args, **kwargs):
    257     if cls is VariableV1:
--&gt; 258       return cls._variable_v1_call(*args, **kwargs)
    259     elif cls is Variable:
    260       return cls._variable_v2_call(*args, **kwargs)

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\ops\variables.py in _variable_v1_call(cls, initial_value, trainable, collections, validate_shape, caching_device, name, variable_def, dtype, expected_shape, import_scope, constraint, use_resource, synchronization, aggregation, shape)
    217         synchronization=synchronization,
    218         aggregation=aggregation,
--&gt; 219         shape=shape)
    220 
    221   def _variable_v2_call(cls,

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\ops\variables.py in &lt;lambda&gt;(**kwargs)
    195                         shape=None):
    196     """Call on Variable class. Useful to force the signature."""
--&gt; 197     previous_getter = lambda **kwargs: default_variable_creator(None, **kwargs)
    198     for _, getter in ops.get_default_graph()._variable_creator_stack:  # pylint: disable=protected-access
    199       previous_getter = _make_getter(getter, previous_getter)

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\ops\variable_scope.py in default_variable_creator(next_creator, **kwargs)
   2505         synchronization=synchronization,
   2506         aggregation=aggregation,
-&gt; 2507         shape=shape)
   2508   else:
   2509     return variables.RefVariable(

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\ops\variables.py in __call__(cls, *args, **kwargs)
    260       return cls._variable_v2_call(*args, **kwargs)
    261     else:
--&gt; 262       return super(VariableMetaclass, cls).__call__(*args, **kwargs)
    263 
    264 

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\ops\resource_variable_ops.py in __init__(self, initial_value, trainable, collections, validate_shape, caching_device, name, dtype, variable_def, import_scope, constraint, distribute_strategy, synchronization, aggregation, shape)
   1404           aggregation=aggregation,
   1405           shape=shape,
-&gt; 1406           distribute_strategy=distribute_strategy)
   1407 
   1408   def _init_from_args(self,

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\ops\resource_variable_ops.py in _init_from_args(self, initial_value, trainable, collections, caching_device, name, dtype, constraint, synchronization, aggregation, distribute_strategy, shape)
   1535           with ops.name_scope("Initializer"), device_context_manager(None):
   1536             initial_value = ops.convert_to_tensor(
-&gt; 1537                 initial_value() if init_from_fn else initial_value,
   1538                 name="initial_value", dtype=dtype)
   1539           if shape is not None:

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\keras\engine\base_layer_utils.py in &lt;lambda&gt;()
    117           (type(init_ops.Initializer), type(init_ops_v2.Initializer))):
    118         initializer = initializer()
--&gt; 119       init_val = lambda: initializer(shape, dtype=dtype)
    120       variable_dtype = dtype.base_dtype
    121   if use_resource is None:

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\ops\init_ops_v2.py in __call__(self, shape, dtype)
    435     else:
    436       limit = math.sqrt(3.0 * scale)
--&gt; 437       return self._random_generator.random_uniform(shape, -limit, limit, dtype)
    438 
    439   def get_config(self):

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\ops\init_ops_v2.py in random_uniform(self, shape, minval, maxval, dtype)
    798       op = random_ops.random_uniform
    799     return op(
--&gt; 800         shape=shape, minval=minval, maxval=maxval, dtype=dtype, seed=self.seed)
    801 
    802   def truncated_normal(self, shape, mean, stddev, dtype):

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\ops\random_ops.py in random_uniform(shape, minval, maxval, dtype, seed, name)
    235     maxval = 1
    236   with ops.name_scope(name, "random_uniform", [shape, minval, maxval]) as name:
--&gt; 237     shape = tensor_util.shape_tensor(shape)
    238     minval = ops.convert_to_tensor(minval, dtype=dtype, name="min")
    239     maxval = ops.convert_to_tensor(maxval, dtype=dtype, name="max")

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\framework\tensor_util.py in shape_tensor(shape)
    962       # not convertible to Tensors becasue of mixed content.
    963       shape = tuple(map(tensor_shape.dimension_value, shape))
--&gt; 964   return ops.convert_to_tensor(shape, dtype=dtype, name="shape")
    965 
    966 

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\framework\ops.py in convert_to_tensor(value, dtype, name, preferred_dtype, dtype_hint)
   1182   preferred_dtype = deprecation.deprecated_argument_lookup(
   1183       "dtype_hint", dtype_hint, "preferred_dtype", preferred_dtype)
-&gt; 1184   return convert_to_tensor_v2(value, dtype, preferred_dtype, name)
   1185 
   1186 

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\framework\ops.py in convert_to_tensor_v2(value, dtype, dtype_hint, name)
   1240       name=name,
   1241       preferred_dtype=dtype_hint,
-&gt; 1242       as_ref=False)
   1243 
   1244 

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\framework\ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx, accept_composite_tensors)
   1294 
   1295     if ret is None:
-&gt; 1296       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
   1297 
   1298     if ret is NotImplemented:

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\framework\constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)
    284                                          as_ref=False):
    285   _ = as_ref
--&gt; 286   return constant(v, dtype=dtype, name=name)
    287 
    288 

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\framework\constant_op.py in constant(value, dtype, shape, name)
    225   """
    226   return _constant_impl(value, dtype, shape, name, verify_shape=False,
--&gt; 227                         allow_broadcast=True)
    228 
    229 

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\framework\constant_op.py in _constant_impl(value, dtype, shape, name, verify_shape, allow_broadcast)
    233   ctx = context.context()
    234   if ctx.executing_eagerly():
--&gt; 235     t = convert_to_eager_tensor(value, ctx, dtype)
    236     if shape is None:
    237       return t

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\framework\constant_op.py in convert_to_eager_tensor(value, ctx, dtype)
     93     except AttributeError:
     94       dtype = dtypes.as_dtype(dtype).as_datatype_enum
---&gt; 95   ctx.ensure_initialized()
     96   return ops.EagerTensor(value, ctx.device_name, dtype)
     97 

~\AppData\Local\Continuum\anaconda3\envs\tftestclean\lib\site-packages\tensorflow_core\python\eager\context.py in ensure_initialized(self)
    490         if self._default_is_async == ASYNC:
    491           pywrap_tensorflow.TFE_ContextOptionsSetAsync(opts, True)
--&gt; 492         self._context_handle = pywrap_tensorflow.TFE_NewContext(opts)
    493       finally:
    494         pywrap_tensorflow.TFE_DeleteContextOptions(opts)

InternalError: cudaGetDevice() failed. Status: cudaGetErrorString symbol not found..
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Meerer' date='2019-12-05T10:20:23Z'>
		&lt;denchmark-link:https://github.com/Meerer&gt;@Meerer&lt;/denchmark-link&gt;
, Please refer similar issue &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/30726#issuecomment-511786440&gt;#30726&lt;/denchmark-link&gt;
. Let us know if it helps. Thanks!
		</comment>
		<comment id='2' author='Meerer' date='2019-12-17T07:44:14Z'>
		&lt;denchmark-link:https://github.com/Meerer&gt;@Meerer&lt;/denchmark-link&gt;
, Is this still an issue!
		</comment>
		<comment id='3' author='Meerer' date='2019-12-17T10:58:57Z'>
		Oh yeah sorry I fixed this by reinstalling cuda again.
		</comment>
	</comments>
</bug>