<bug id='38742' author='foxik' open_date='2020-04-21T09:58:14Z' closed_time='2020-05-11T21:31:36Z'>
	<summary>[TF 2.2.0rc] Regression - the `{predict,train,test}_on_batch` trace functions with fixed batch size #34907</summary>
	<description>
See &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34907&gt;#34907&lt;/denchmark-link&gt;
 for description.
Even if the referenced issue was fixed for 2.1, it is again present in TF 2.2.0rc3.
	</description>
	<comments>
		<comment id='1' author='foxik' date='2020-04-21T10:34:20Z'>
		i am able to replicate this issue, please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/58b082e917b16769fef0319f98b8e399/38742.ipynb&gt;gist here&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='foxik' date='2020-04-23T17:54:20Z'>
		Thanks &lt;denchmark-link:https://github.com/foxik&gt;@foxik&lt;/denchmark-link&gt;
 for the report. We are working on a long-term fix right now, which we are hoping to get into the next 2.2rc, but, if it proves difficult, may have to wait for 2.3.
		</comment>
		<comment id='3' author='foxik' date='2020-04-23T20:44:48Z'>
		&lt;denchmark-link:https://github.com/karmel&gt;@karmel&lt;/denchmark-link&gt;
 I perfectly understand that it is late in the release cycle. If unfixed, it would make the  methods unusable for dynamic size input, but affected people can always wait for 2.3.
BTW, how come that .fit is not affected, i.e.
inputs = tf.keras.layers.Input([None])
summed = tf.math.reduce_sum(inputs, axis=1, keepdims=True)
output = tf.keras.layers.Dense(1)(summed)
model = tf.keras.Model(inputs, output)
model.compile(optimizer=tf.optimizers.Adam(), loss=tf.losses.MeanSquaredError())
for i in range(1, 300):
    model.train_on_batch(np.ones([1, i]), np.ones([1]) * i)
causes retraces while
def dataset():
    for i in range(1, 300):
        yield np.ones([1, i]), np.ones([1]) * i

model.fit(dataset())
does not? Does the dataset iteration sees that the shapes are changing and retraces the training method with dynamic shapes?
		</comment>
		<comment id='4' author='foxik' date='2020-04-25T17:00:12Z'>
		&lt;denchmark-link:https://github.com/karmel&gt;@karmel&lt;/denchmark-link&gt;
 BTW, Google Colab is using 2.2.0rc3 and I already have students hitting this issue (we have started working with RNNs).
		</comment>
		<comment id='5' author='foxik' date='2020-04-27T16:20:07Z'>
		&lt;denchmark-link:https://github.com/foxik&gt;@foxik&lt;/denchmark-link&gt;
 Thanks for the issue!
There is a potential fix in the works, but it's unclear if it will make the release cut.
I'd actually recommend moving away from the train_on_batch methods when possible, and instead doing custom training logic via overriding Model.train_step. This feature was added in this release and gives a really nice way to write custom training logic while still getting all the benefits (distribution, callbacks, data formats, etc) of Model.fit. It should also be noticeably faster and won't have the retracing issue
A thread explaining how this works: &lt;denchmark-link:https://twitter.com/fchollet/status/1250622989541838848&gt;https://twitter.com/fchollet/status/1250622989541838848&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='foxik' date='2020-04-27T18:15:51Z'>
		&lt;denchmark-link:https://github.com/omalleyt12&gt;@omalleyt12&lt;/denchmark-link&gt;
 Thanks! I already went through the sources of  and I like how it improved applicability -- for example we use CRF/CTC losses quite a lot, and will now be able to use .fit, which is a great simplification, even if only for the distribution strategy.
But we have sources which we want to work with pre-2.2 TF for the time being, and train_on_batch not working in Collab is also an issue, so it would make our life easier if the regression did not appear. But I definitely understand that it is a trade-off.
Thank you very much for all your hard work!
		</comment>
		<comment id='7' author='foxik' date='2020-05-08T11:17:38Z'>
		For people looking for a way to generate predictions with variable size in 2.2.0 and avoid 1) the concatenation error raised by model.predict 2) tf.function retracing; simply call the model.predict_step function in a batch loop.
		</comment>
		<comment id='8' author='foxik' date='2020-05-08T21:33:10Z'>
		This is fixed with tf-nightly version '2.2.0-dev20200508'.
Refer &lt;denchmark-link:https://colab.research.google.com/gist/ymodak/205ae3ad0d709a84e07c90be10b46190/38742.ipynb&gt;colab gist&lt;/denchmark-link&gt;
.
Thanks!
		</comment>
		<comment id='9' author='foxik' date='2020-05-11T21:31:36Z'>
		&lt;denchmark-link:https://github.com/foxik&gt;@foxik&lt;/denchmark-link&gt;
 closing this issue as this has been resolved and the next TF 2.3.0 release will have it. Please feel free to reopen if you run into any other issues.
		</comment>
		<comment id='10' author='foxik' date='2020-05-11T21:31:38Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38742&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38742&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>