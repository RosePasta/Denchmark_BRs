<bug id='7008' author='cancan101' open_date='2017-01-22T21:55:22Z' closed_time='2017-06-16T18:47:11Z'>
	<summary>Exported Tensorflow Model not Preserving Placeholder Shape</summary>
	<description>
I am using exporter from tensorflow.contrib.session_bundle to save out my model:
&lt;denchmark-code&gt;x = tf.placeholder(tf.float32, (None,) + (100, 200) + (1,))
....
saver = tf_saver.Saver(sharded=True)
model_exporter = exporter.Exporter(saver)
model_exporter.init(
    sess.graph.as_graph_def(),
    named_graph_signatures={
        'inputs': exporter.generic_signature({'images': x}),
        'outputs': exporter.generic_signature({'classes': y})})
&lt;/denchmark-code&gt;

and then I load the model back in (session_bundle from tensorflow.contrib.session_bundle):
&lt;denchmark-code&gt;sess, meta_graph_def = session_bundle.load_session_bundle_from_path(input)
&lt;/denchmark-code&gt;

However when I inspect the Placeholder tensor corresponding to the input x, I see no shape information:
&lt;denchmark-code&gt;&gt; sess.graph.get_tensor_by_name(input_name)
&lt;tf.Tensor 'Placeholder:0' shape=&lt;unknown&gt; dtype=float32&gt;
&lt;/denchmark-code&gt;

Is this by design or is there some bug causing the shape to be lost?
&lt;denchmark-h:h3&gt;What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?&lt;/denchmark-h&gt;

Report from SO: &lt;denchmark-link:http://stackoverflow.com/questions/40733752/exported-tensorflow-model-not-preserving-placeholder-shape&gt;http://stackoverflow.com/questions/40733752/exported-tensorflow-model-not-preserving-placeholder-shape&lt;/denchmark-link&gt;

&lt;denchmark-h:h3&gt;Environment info&lt;/denchmark-h&gt;

Operating System:
Using gcr.io/tensorflow/tensorflow:latest-devel-gpu docker iamge
Installed version of CUDA and cuDNN:
(please attach the output of ls -l /path/to/cuda/lib/libcud*):
&lt;denchmark-code&gt;# ls -al /usr/local/cuda/lib64/libcud*
-rw-r--r-- 1 root root    558720 Sep 14 23:02 /usr/local/cuda/lib64/libcudadevrt.a
lrwxrwxrwx 1 root root        16 Sep 14 23:05 /usr/local/cuda/lib64/libcudart.so -&gt; libcudart.so.8.0
lrwxrwxrwx 1 root root        19 Sep 14 23:05 /usr/local/cuda/lib64/libcudart.so.8.0 -&gt; libcudart.so.8.0.44
-rw-r--r-- 1 root root    415432 Sep 14 23:02 /usr/local/cuda/lib64/libcudart.so.8.0.44
-rw-r--r-- 1 root root    775162 Sep 14 23:02 /usr/local/cuda/lib64/libcudart_static.a
lrwxrwxrwx 1 1000 users       13 Jul 27 05:55 /usr/local/cuda/lib64/libcudnn.so -&gt; libcudnn.so.5
lrwxrwxrwx 1 1000 users       17 Jul 27 05:55 /usr/local/cuda/lib64/libcudnn.so.5 -&gt; libcudnn.so.5.1.5
-rwxrwxr-x 1 1000 users 79337624 Jul 27 05:53 /usr/local/cuda/lib64/libcudnn.so.5.1.5
-rw-rw-r-- 1 1000 users 69756172 Jul 27 05:53 /usr/local/cuda/lib64/libcudnn_static.a
&lt;/denchmark-code&gt;

If installed from source, provide

The commit hash (git rev-parse HEAD)

&lt;denchmark-code&gt;4d924e796368163eff11a8151e8505715345f58d
&lt;/denchmark-code&gt;


The output of bazel version

&lt;denchmark-code&gt;# bazel version
INFO: Reading 'startup' options from /root/.bazelrc: --batch
Extracting Bazel installation...
Build label: 0.3.2
Build target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar
Build time: Fri Oct 7 17:25:10 2016 (1475861110)
Build timestamp: 1475861110
Build timestamp as int: 1475861110
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='cancan101' date='2017-01-22T22:15:32Z'>
		cc &lt;denchmark-link:https://github.com/nfiedel&gt;@nfiedel&lt;/denchmark-link&gt;
 who worked on session bundle
		</comment>
		<comment id='2' author='cancan101' date='2017-01-23T03:57:08Z'>
		If I load the meta file:
meta_graph_def = meta_graph_pb2.MetaGraphDef()
meta_graph_def.ParseFromString(file_io.read_file_to_string(...))
I do see the shape saved on the _output_shapes key on the graph_def:
&lt;denchmark-code&gt;node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 225
          }
          dim {
            size: 300
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
&lt;/denchmark-code&gt;

However that value is not on the actual shape attribute not in the meta_info_def:
&lt;denchmark-code&gt;  op {
    name: "Placeholder"
    output_arg {
      name: "output"
      type_attr: "dtype"
    }
    attr {
      name: "dtype"
      type: "type"
    }
    attr {
      name: "shape"
      type: "shape"
      default_value {
        shape {
        }
      }
    }
  }
&lt;/denchmark-code&gt;

The issue seems like it might be in session_bundle.py:
  collection_def = meta_graph_def.collection_def
  graph_def = tf.GraphDef()
  if constants.GRAPH_KEY in collection_def:
    # Use serving graph_def in MetaGraphDef collection_def if exists
    graph_def_any = collection_def[constants.GRAPH_KEY].any_list.value
    if len(graph_def_any) != 1:
      raise RuntimeError(
          "Expected exactly one serving GraphDef in : %s" % meta_graph_def)
    else:
      graph_def_any[0].Unpack(graph_def)
      # Replace the graph def in meta graph proto.
      meta_graph_def.graph_def.CopyFrom(graph_def)
The serving graph seems to be missing the _output_shapes attr which means this value gets copies over and not used by importer to restore the shape.
		</comment>
		<comment id='3' author='cancan101' date='2017-01-23T06:13:08Z'>
		So I tracked this issue down to:
saver = save.Saver(sharded=True)
model_exporter = exporter.Exporter(saver)
model_exporter.init(
  sess.graph.as_graph_def(),
  ...
)
Changing the as_graph_def() to: sess.graph.as_graph_def(add_shapes=True) solves this problem.
This line of code seems some what duplicated since a similar line exists in saver:
    return export_meta_graph(
        filename=filename,
        graph_def=ops.get_default_graph().as_graph_def(add_shapes=True),
		</comment>
		<comment id='4' author='cancan101' date='2017-01-23T20:49:44Z'>
		&lt;denchmark-link:https://github.com/zheng-xq&gt;@zheng-xq&lt;/denchmark-link&gt;
 for any comments about the default exporter behavior. Should we fix this?
		</comment>
		<comment id='5' author='cancan101' date='2017-06-16T18:47:11Z'>
		Session_bundle is deprecated. Please use SavedModel for exporting models instead.
		</comment>
		<comment id='6' author='cancan101' date='2017-06-16T18:52:53Z'>
		&lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;
: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/7962&gt;#7962&lt;/denchmark-link&gt;
  . Migration path is not totally clear.
		</comment>
	</comments>
</bug>