<bug id='8306' author='yc14600' open_date='2017-03-11T15:38:29Z' closed_time='2017-03-11T19:29:01Z'>
	<summary>tf.contrib.distributions.Multinomial initialization problem</summary>
	<description>
Hi
I can't initialize a multinomial distribution with more than 1 dimension probabilities. The version of installed TF is 1.0.0. I tried the example code in tensorflow website (&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/contrib/distributions/Multinomial&gt;https://www.tensorflow.org/api_docs/python/tf/contrib/distributions/Multinomial&lt;/denchmark-link&gt;
), it gets the same problem and the error doesn't make any sense to require probabilities to be integers. I'm not sure if the guide in the website is obsolete or I got something wrong. Please give some help here, thanks.
&lt;denchmark-code&gt;r=tf.contrib.distributions.Multinomial(n=[4, 5], p=[[.1, .3, .6], [.4, .05, .55]])

ValueErrorTraceback (most recent call last)
&lt;ipython-input-92-7d05643707f2&gt; in &lt;module&gt;()
----&gt; 1 r=tf.contrib.distributions.Multinomial([4, 5], p=[[.1, .3, .6], [.4, .05, .55]])

/usr/local/anaconda2/lib/python2.7/site-packages/tensorflow/contrib/distributions/python/ops/multinomial.pyc in __init__(self, n, logits, p, validate_args, allow_nan_stats, name)
    164             multidimensional=True)
    165         self._n = array_ops.identity(n, name="convert_n")
--&gt; 166         self._mean_val = array_ops.expand_dims(n, -1) * self._p
    167         self._broadcast_shape = math_ops.reduce_sum(
    168             self._mean_val, reduction_indices=[-1], keep_dims=False)

/usr/local/anaconda2/lib/python2.7/site-packages/tensorflow/python/ops/math_ops.pyc in binary_op_wrapper(x, y)
    881     with ops.name_scope(None, op_name, [x, y]) as name:
    882       if not isinstance(y, sparse_tensor.SparseTensor):
--&gt; 883         y = ops.convert_to_tensor(y, dtype=x.dtype.base_dtype, name="y")
    884       return func(x, y, name=name)
    885 

/usr/local/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in convert_to_tensor(value, dtype, name, preferred_dtype)
    649       name=name,
    650       preferred_dtype=preferred_dtype,
--&gt; 651       as_ref=False)
    652 
    653 

/usr/local/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype)
    714 
    715         if ret is None:
--&gt; 716           ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
    717 
    718         if ret is NotImplemented:

/usr/local/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in _TensorTensorConversionFunction(t, dtype, name, as_ref)
    587     raise ValueError(
    588         "Tensor conversion requested dtype %s for Tensor with dtype %s: %r"
--&gt; 589         % (dtype.name, t.dtype.name, str(t)))
    590   return t
    591 

ValueError: Tensor conversion requested dtype int32 for Tensor with dtype float32: 'Tensor("Multinomial_26/Multinomial/p/Identity:0", shape=(2, 3), dtype=float32)'
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='yc14600' date='2017-03-11T19:29:01Z'>
		This isn't a bug.  You appear to have missed a subtle but important character when copying the example...
In your version, the value passed to n is an int32 tensor:
&lt;denchmark-code&gt;r=tf.contrib.distributions.Multinomial(n=[4, 5], p=[[.1, .3, .6], [.4, .05, .55]])
&lt;/denchmark-code&gt;

The example has a decimal point after the 4 which makes the argument a float32 tensor:
&lt;denchmark-code&gt;r=tf.contrib.distributions.Multinomial(n=[4., 5], p=[[.1, .3, .6], [.4, .05, .55]])
                                           ^
&lt;/denchmark-code&gt;

I think that this would have been clearer in documentation:
&lt;denchmark-code&gt;r=tf.contrib.distributions.Multinomial(n=[4.0, 5.0], p=[[.1, .3, .6], [.4, .05, .55]])
&lt;/denchmark-code&gt;

Please let me know if this does not solve your problem.
&lt;denchmark-link:https://github.com/xmbrst&gt;@xmbrst&lt;/denchmark-link&gt;
 This could probably be clearer in the docs!
		</comment>
		<comment id='2' author='yc14600' date='2017-03-12T13:45:01Z'>
		Yes, it does work now. It seems the library I used to wrap the distribution has some bug about this parameter. Thanks!
		</comment>
	</comments>
</bug>