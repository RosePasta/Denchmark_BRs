<bug id='41276' author='sayakpaul' open_date='2020-07-10T11:39:45Z' closed_time='2020-07-17T17:14:44Z'>
	<summary>TypeError: Failed to convert object of type &amp;lt;class 'tensorflow.python.ops.ragged.ragged_tensor.RaggedTensor'&amp;gt; to Tensor.</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Have I written custom code (as opposed to using a stock example script
provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Colab
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue
happens on a mobile device:
TensorFlow installed from (source or binary):
TensorFlow version (use command below): 2.4.0-dev20200709
Python version:
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:
Exact command to reproduce:

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

I am referring to &lt;denchmark-link:https://colab.research.google.com/github/keras-team/keras-io/blob/master/examples/vision/ipynb/captcha_ocr.ipynb&gt;this official Keras example&lt;/denchmark-link&gt;
 that shows how to train an OCR model using the CTC loss. I am trying to extend it to the &lt;denchmark-link:http://www.fki.inf.unibe.ch/DBs/iamDB/iLogin/index.php&gt;IAM dataset&lt;/denchmark-link&gt;
 which is rawer in terms of its quality and the images are of handwritten characters.
I was able to construct the dataset in the way expected by the model used in the example. However, the labels, in this case, are of variable length. This is why they are getting converted to RaggedTensors. This is producing the following error -
&lt;denchmark-code&gt;TypeError: in user code:

    /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py:806 train_function  *
        return step_function(self, iterator)
    &lt;ipython-input-42-e0e4c73f8c9f&gt;:10 call  *
        batch_len = tf.cast(tf.shape(y_true)[0], dtype="int64")
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201 wrapper  **
        return target(*args, **kwargs)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/array_ops.py:617 shape_v2
        return shape(input, name, out_type)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201 wrapper
        return target(*args, **kwargs)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/array_ops.py:644 shape
        return shape_internal(input, name, optimize=True, out_type=out_type)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/array_ops.py:668 shape_internal
        input = ops.convert_to_tensor(input)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py:1525 convert_to_tensor
        ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/constant_op.py:338 _constant_tensor_conversion_function
        return constant(v, dtype=dtype, name=name)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/constant_op.py:264 constant
        allow_broadcast=True)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/constant_op.py:282 _constant_impl
        allow_broadcast=allow_broadcast))
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/tensor_util.py:553 make_tensor_proto
        "supported type." % (type(values), values))

    TypeError: Failed to convert object of type &lt;class 'tensorflow.python.ops.ragged.ragged_tensor.RaggedTensor'&gt; to Tensor. Contents: tf.RaggedTensor(values=tf.RaggedTensor(values=Tensor("ocr_model_v1/Cast_1:0", shape=(None,), dtype=float32), row_splits=Tensor("RaggedFromVariant/RaggedTensorFromVariant:1", shape=(None,), dtype=int64)), row_splits=Tensor("RaggedFromVariant/RaggedTensorFromVariant:0", shape=(None,), dtype=int64)). Consider casting elements to a supported type.
&lt;/denchmark-code&gt;

What I am looking for is a way to bypass this so that the ground truth labels and the predicted labels could be sent to the CTC loss.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

Here's the &lt;denchmark-link:https://colab.research.google.com/gist/sayakpaul/529500ca05252277f1c1f390ef37e4d3/scratchpad.ipynb&gt;Colab Notebook&lt;/denchmark-link&gt;
.
The commands that download the dataset are as follows:
&lt;denchmark-code&gt;$ wget http://www.fki.inf.unibe.ch/DBs/iamDB/data/words/words.tgz --user=**user** --password=**password**
$ wget http://www.fki.inf.unibe.ch/DBs/iamDB/data/ascii/words.txt --user=**user** --password=**password**
&lt;/denchmark-code&gt;

Please register here first: http://www.fki.inf.unibe.ch/DBs/iamDB/iLogin/index.php and then replace the username and password accordingly. This is a requirement.
	</description>
	<comments>
		<comment id='1' author='sayakpaul' date='2020-07-10T18:44:13Z'>
		Was able to reproduce the issue with &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/71ce949e24f2ac3a4c8ad6ad71590a04/41276-2-3.ipynb&gt;TF v2.3&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/02ef24654712fad95814b72d8bf4b0ce/41276-tf-nightly.ipynb&gt;TF-nightly&lt;/denchmark-link&gt;
. Please find the attached gist. Thanks!
		</comment>
		<comment id='2' author='sayakpaul' date='2020-07-15T13:26:03Z'>
		Thanks for your issue. For quicker troubleshooting can you please help us with minimalistic code to reproduce the reported behavior?
		</comment>
		<comment id='3' author='sayakpaul' date='2020-07-15T13:50:14Z'>
		I think I already did that and you can also see that &lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
 was able to confirm it. Unfortunately, I don't have anything more minimalistic at the moment.
		</comment>
		<comment id='4' author='sayakpaul' date='2020-07-15T20:13:54Z'>
		The problem is that tf.shape isn't defined for RaggedTensors, since it's not possible to encode the shape of a RaggedTensor in a vector.  If you know that y_true is ragged, then you can change this:
&lt;denchmark-code&gt;batch_len = tf.cast(tf.shape(y_true)[0], dtype="int64")
&lt;/denchmark-code&gt;

to this:
&lt;denchmark-code&gt;batch_len = y_true.nrows(dtype=tf.int64)
&lt;/denchmark-code&gt;

If you don't know whether it's ragged or not, then the best solution at the moment might be to do something like batch_len = _nrows(y_true, 'int64') where _nrows is defined as:
&lt;denchmark-code&gt;def _nrows(tensor, out_type=dtypes.int32):
  if isinstance(tensor, RaggedTensor):
    return tensor.nrows(out_type=out_type)
  else:
    return array_ops.shape(tensor, out_type=out_type)[0]
&lt;/denchmark-code&gt;

We have some general ideas about how tf.shape could be implemented for RaggedTensor, but it would need to return a different type (a RaggedTensorShape), which is currently only used internally; and that type would need to be updated with getitem etc.  But I don't think that's likely to get implemented in the near-term future.
		</comment>
		<comment id='5' author='sayakpaul' date='2020-07-15T20:24:08Z'>
		I just took a quick look at the colab in question, and there are a few other things you're likely to need to tweak.  E.g., you may need to change:
&lt;denchmark-code&gt;        input_length = tf.cast(tf.shape(y_pred)[1], dtype="int64")
        label_length = tf.cast(tf.shape(y_true)[1], dtype="int64")
&lt;/denchmark-code&gt;

to:
&lt;denchmark-code&gt;        input_length = y_pred.uniform_row_length
        label_length = y_true. uniform_row_length
&lt;/denchmark-code&gt;

Alternatively, if y_pred and y_true have statically known shapes, you could possibly use:
&lt;denchmark-code&gt;        batch_len = tf.cast(y_true.shape[0], dtype="int64")
        input_length = tf.cast(y_pred.shape[1], dtype="int64")
        label_length = tf.cast(y_true.shape[1], dtype="int64")
&lt;/denchmark-code&gt;

Another option might be to convert y_pred and y_true to non-ragged (padded) tensors (with y_pred.to_tensor() and y_true.to_tensor()), though I'm not familiar enough with this code to know whether that would do the right thing.
		</comment>
		<comment id='6' author='sayakpaul' date='2020-07-16T04:13:08Z'>
		&lt;denchmark-link:https://github.com/edloper&gt;@edloper&lt;/denchmark-link&gt;
 I changed
batch_len = tf.cast(y_true.shape[0], dtype="int64")
input_length = tf.cast(y_pred.shape[1], dtype="int64")
label_length = tf.cast(y_true.shape[1], dtype="int64")
to
batch_len = batch_len = nrows(y_true, 'int64')
input_length = y_pred.uniform_row_length
label_length = y_true.uniform_row_length
where nrows() is defined as -
def nrows(tensor, out_type=tf.dtypes.int32):
  if isinstance(tensor, tf.RaggedTensor):
    return tensor.nrows(out_type=out_type)
  else:
    return tf.python.ops.array_ops.shape(tensor, out_type=out_type)[0]
Now, I am getting while building the model -
&lt;denchmark-code&gt;AttributeError: in user code:

    &lt;ipython-input-23-0940c7590da2&gt;:10 call  *
        input_length = y_pred.uniform_row_length

    AttributeError: 'Tensor' object has no attribute 'uniform_row_length'
&lt;/denchmark-code&gt;

Here's the &lt;denchmark-link:https://colab.research.google.com/gist/sayakpaul/fdb3591ea69ce7f4644f03253aae93a7/scratchpad.ipynb&gt;Colab Gist&lt;/denchmark-link&gt;
. Any pointers?
		</comment>
		<comment id='7' author='sayakpaul' date='2020-07-16T14:54:54Z'>
		&lt;denchmark-link:https://github.com/sayakpaul&gt;@sayakpaul&lt;/denchmark-link&gt;
 It looks to me like the keras code would need some refactoring to be able to deal with variable-length labels -- right now, it's assuming a specific rank for its input.  I.e., you could fix your  code with something like the following:
&lt;denchmark-code&gt;    def call(self, y_true, y_pred):
        # Compute the training-time loss value and add it
        # to the layer using `self.add_loss()`.
        if isinstance(y_true, tf.RaggedTensor):
          batch_len = y_true.nrows(out_type='int64')
          input_length = tf.cast(
              tf.expand_dims(y_true.row_lengths(), 1), 'int64'),
        else:
          y_true_shape = tf.shape(y_true, out_type='int64')
          batch_len = y_true_shape[0]
          input_length = tf.fill([batch_len, 1], y_true_shape[1])

        if isinstance(y_pred, tf.RaggedTensor):
          label_length = tf.cast(
              tf.expand_dims(y_pred.row_lengths(), 1), 'int64'),
        else:
          y_pred_shape = tf.shape(y_pred, out_type='int64')
          label_length = tf.fill([batch_len, 1], y_pred_shape[1])

        loss = self.loss_fn(y_true, y_pred, input_length, label_length)
        self.add_loss(loss)

        # At test time, just return the computed predictions
        return y_pred
&lt;/denchmark-code&gt;

But then things will still fail inside ctc_batch_cost in keras/backend.py (when it tries to call ctc_label_dense_to_sparse).  So I think ctc_batch_cost itself would need to be edited/modified to make this work.
		</comment>
		<comment id='8' author='sayakpaul' date='2020-07-16T15:01:13Z'>
		Ah. Thanks for sharing it. So, for now, I am gonna close this issue. If needed I will reopen.
		</comment>
		<comment id='9' author='sayakpaul' date='2020-07-16T15:01:15Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41276&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41276&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='sayakpaul' date='2020-07-17T03:33:49Z'>
		&lt;denchmark-link:https://github.com/alextp&gt;@alextp&lt;/denchmark-link&gt;
 any ideas/pointers how to extend  from  to support variable-length labels labels?
		</comment>
		<comment id='11' author='sayakpaul' date='2020-07-17T16:50:23Z'>
		Can you file a separate issue for that? nothing immediately comes to mind as better than other alternatives
		</comment>
		<comment id='12' author='sayakpaul' date='2020-07-17T17:14:44Z'>
		Okay let me do that.
		</comment>
		<comment id='13' author='sayakpaul' date='2020-07-17T17:14:46Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41276&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/41276&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>