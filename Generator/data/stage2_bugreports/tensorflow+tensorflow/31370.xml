<bug id='31370' author='gridcellcoder' open_date='2019-08-06T14:20:18Z' closed_time='2020-02-21T23:41:14Z'>
	<summary>tf.data.experimental.make_csv_dataset header flag not working as described</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Custom code
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):

&lt;denchmark-code&gt;os kernel version: #22-Ubuntu SMP Tue Jul 2 13:27:33 UTC 2019
os release version: 5.0.0-21-generic
os platform: Linux-5.0.0-21-generic-x86_64-with-debian-buster-sid
linux distribution: ('debian', 'buster/sid', '')
linux os distribution: ('debian', 'buster/sid', '')
mac version: ('', ('', '', ''), '')
uname: uname_result(system='Linux', node='dev-XPS-13-9343', release='5.0.0-21-generic', version='#22-Ubuntu SMP Tue Jul 2 13:27:33 UTC 2019', machine='x86_64', processor='x86_64')
architecture: ('64bit', '')
machine: x86_64
GNU/Linux
&lt;/denchmark-code&gt;


TensorFlow installed from (source or binary):
binary using pip
TensorFlow version (use command below):

&lt;denchmark-code&gt;Version: 2.0.0b1
Summary: TensorFlow is an open source machine learning framework for everyone.
Home-page: https://www.tensorflow.org/
Author-email: packages@tensorflow.org
License: Apache 2.0
Location: /home/dev/miniconda3/envs/pythonapu/lib/python3.6/site-packages
Required-by: 
&lt;/denchmark-code&gt;


Python version:

&lt;denchmark-code&gt;Python 3.6.8 :: Anaconda, Inc.
python version: 3.6.8
python branch: 
python build version: ('default', 'Dec 30 2018 01:22:34')
python compiler version: GCC 7.3.0
python implementation: CPython
&lt;/denchmark-code&gt;

Describe the current behavior
tf.data.experimental.make_csv_dataset(header=True) includes the header data in the dataset
Describe the expected behavior
According to the docs:
&lt;denchmark-code&gt;header: A bool that indicates whether the first rows of provided CSV files
      correspond to header lines with column names, and should not be included
      in the data.
&lt;/denchmark-code&gt;

The data should not be included in the data.
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
I have a dataset in csv /tmp/foo.csv:
&lt;denchmark-code&gt;A,B,C
1,NA,1
1,NA,1
1,NA,1
1,NA,1
&lt;/denchmark-code&gt;

I can run something like with header=True
&lt;denchmark-code&gt; dataset_file = tf.keras.utils.get_file("foo2" + str(uuid.uuid4()) + ".csv", "file:///tmp/foo.csv")
dataset = tf.data.experimental.make_csv_dataset(
        dataset_file, batch_size=4, header=False,
        label_name="A", na_value='NA', column_names=["A", "B", "C"],
        field_delim=',')
    for feature_batch, label_batch in dataset.take(1):
        print(label_batch)
        print("features:")
        for key, value in feature_batch.items():
            print(key + ' ' + value)
&lt;/denchmark-code&gt;

which gives:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/xyz/workspace/pythonapi/main/services/dataloader.py", line 149, in &lt;module&gt;
    load()
  File "/home/xyz/workspace/pythonapi/main/services/dataloader.py", line 143, in load
    print(key + ' ' + value)
  File "/home/xyz/miniconda3/envs/pythonapu/lib/python3.6/site-packages/tensorflow/python/ops/math_ops.py", line 909, in r_binary_op_wrapper
    x = ops.convert_to_tensor(x, dtype=y.dtype.base_dtype, name="x")
  File "/home/xyz/miniconda3/envs/pythonapu/lib/python3.6/site-packages/tensorflow/python/framework/ops.py", line 1100, in convert_to_tensor
    return convert_to_tensor_v2(value, dtype, preferred_dtype, name)
  File "/home/xyz/miniconda3/envs/pythonapu/lib/python3.6/site-packages/tensorflow/python/framework/ops.py", line 1158, in convert_to_tensor_v2
    as_ref=False)
  File "/home/xyz/miniconda3/envs/pythonapu/lib/python3.6/site-packages/tensorflow/python/framework/ops.py", line 1237, in internal_convert_to_tensor
    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
  File "/home/xyz/miniconda3/envs/pythonapu/lib/python3.6/site-packages/tensorflow/python/framework/constant_op.py", line 305, in _constant_tensor_conversion_function
    return constant(v, dtype=dtype, name=name)
  File "/home/xyz/miniconda3/envs/pythonapu/lib/python3.6/site-packages/tensorflow/python/framework/constant_op.py", line 246, in constant
    allow_broadcast=True)
  File "/home/xyz/miniconda3/envs/pythonapu/lib/python3.6/site-packages/tensorflow/python/framework/constant_op.py", line 254, in _constant_impl
    t = convert_to_eager_tensor(value, ctx, dtype)
  File "/home/xyz/miniconda3/envs/pythonapu/lib/python3.6/site-packages/tensorflow/python/framework/constant_op.py", line 115, in convert_to_eager_tensor
    return ops.EagerTensor(value, handle, device, dtype)
TypeError: Cannot convert provided value to EagerTensor. Provided value: C  Requested dtype: int32
&lt;/denchmark-code&gt;

When C should not be in the dataset.
Other info / logs
With header=False
works fine but not as described in the documentation as this suggests the csv does not contain the header and prints
&lt;denchmark-code&gt;tf.Tensor([b'1' b'1' b'1' b'A'], shape=(4,), dtype=string)
features:
tf.Tensor([b'B ' b'B ' b'B ' b'B B'], shape=(4,), dtype=string)
tf.Tensor([b'C 1' b'C 1' b'C 1' b'C C'], shape=(4,), dtype=string)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='gridcellcoder' date='2019-08-07T09:58:02Z'>
		&lt;denchmark-link:https://github.com/gridcellcoder&gt;@gridcellcoder&lt;/denchmark-link&gt;

I have created dataset foo.csv using pandas for reproducing the issue.While executing the code i am getting below Request you to help me with the reproducable code.Thanks!
		</comment>
		<comment id='2' author='gridcellcoder' date='2019-08-07T11:31:03Z'>
		To reproduce:

Create a file in /tmp/foo.csv Note: Not f00.csv as in your message
Copy this into the file you created in 1) note: do not use pandas etc just a simple text editor

&lt;denchmark-code&gt;A,B,C
1,NA,1
1,NA,1
1,NA,1
1,NA,1
&lt;/denchmark-code&gt;


Run this in a python file after importing keras and tf beta2.0

&lt;denchmark-code&gt;dataset_file = tf.keras.utils.get_file("foo2" + str(uuid.uuid4()) + ".csv", "file:///tmp/foo.csv")
dataset = tf.data.experimental.make_csv_dataset(
        dataset_file, batch_size=4, header=False,
        label_name="A", na_value='NA', column_names=["A", "B", "C"],
        field_delim=',')
    for feature_batch, label_batch in dataset.take(1):
        print(label_batch)
        print("features:")
        for key, value in feature_batch.items():
            print(key + ' ' + value)
&lt;/denchmark-code&gt;

that should recreate the issue above.
		</comment>
		<comment id='3' author='gridcellcoder' date='2019-08-08T06:27:34Z'>
		I have tried on Jupyter notebook  with TF version 2.0 beta1 and 2.0.0-dev20190807 and was able to reproduce the issue.Please, find the gist in attachment.Thanks!
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/3480131/test.tar.gz&gt;test.tar.gz&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='gridcellcoder' date='2020-02-21T23:41:14Z'>
		Apologies for the delayed response.
Here's an explanation of what you're seeing. Since you don't provide the column_defaults parameter, make_csv_dataset tries to infer the type of your data.
When the header=True flag is set, it ignores the first line of data.
Therefore, it infers that column A contains ints, B contains strings, C contains ints.
The issue here is that in line
&lt;denchmark-code&gt;print(key + ' ' + value)
&lt;/denchmark-code&gt;

key is a string tensor, and value is an int tensor (in the A and C case). These types cannot be added together, which is why you get the above error.
In the case where header=False, the first (header) line is not ignored. If you read the documentation, the header parameter is "A bool that indicates whether the first rows of provided CSV files correspond to header lines with column names, and should not be included in the data." -- so when header=False, the header line IS included in the data, i.e. it interprets the header line as regular data that's part of your dataset. Because this line has the data "A,B,C", it infers that all your columns are strings. Since string tensors can be added together, you don't get an error.
Does that make sense? Let me know how we can improve the documentation to make the behavior of header clearer.
		</comment>
		<comment id='5' author='gridcellcoder' date='2020-02-21T23:41:16Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31370&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31370&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>