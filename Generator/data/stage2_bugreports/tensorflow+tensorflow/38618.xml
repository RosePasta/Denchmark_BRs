<bug id='38618' author='dfalbel' open_date='2020-04-17T00:21:39Z' closed_time='2020-04-22T17:05:13Z'>
	<summary>Keras ProgbarLogger: OverflowError: cannot convert float infinity to integer</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Colab

Describe the current behavior
It seems that if, at some time accuracy is equal 0 this code will error and stop training.
With TF 2.2-rc3 the following piece of code returns an error:
&lt;denchmark-code&gt;import tensorflow as tf
data = tf.random.uniform(shape=(1000, 784),  maxval=15)
labels = tf.random.uniform(shape=(1000,10), maxval = 1, dtype=tf.int32)
model = tf.keras.Sequential([
  tf.keras.layers.Dense(32, activation = "relu"),
  tf.keras.layers.Dense(10, activation = "softmax")
])
model.compile(loss = "binary_crossentropy", optimizer="sgd", metrics=["accuracy"])
model.fit(data, labels, callbacks = [tf.keras.callbacks.ProgbarLogger()])
&lt;/denchmark-code&gt;


OverflowError: cannot convert float infinity to integer

Describe the expected behavior
With current 2.1, no error is returned:
&lt;denchmark-code&gt;import tensorflow as tf
data = tf.random.uniform(shape=(1000, 784),  maxval=15)
labels = tf.random.uniform(shape=(1000,10), maxval = 1, dtype=tf.int32)
model = tf.keras.Sequential([
  tf.keras.layers.Dense(32, activation = "relu"),
  tf.keras.layers.Dense(10, activation = "softmax")
])
model.compile(loss = "binary_crossentropy", optimizer="sgd", metrics=["accuracy"])
model.fit(data, labels, callbacks = [tf.keras.callbacks.ProgbarLogger()])
&lt;/denchmark-code&gt;

Standalone code to reproduce the issue
See colab here for 2.2-rc3 version: &lt;denchmark-link:https://colab.research.google.com/drive/1Cyu0pBYCYtoxzUs2JPc-oSRr_WG9PNQt&gt;https://colab.research.google.com/drive/1Cyu0pBYCYtoxzUs2JPc-oSRr_WG9PNQt&lt;/denchmark-link&gt;

And here with 2.1 working version:
&lt;denchmark-link:https://colab.research.google.com/drive/1Aq7vhnt91C8MbNP35RUrhszR9xomn-hM&gt;https://colab.research.google.com/drive/1Aq7vhnt91C8MbNP35RUrhszR9xomn-hM&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='dfalbel' date='2020-04-17T05:33:18Z'>
		Was able to reproduce the issue with Tf2.2.rc3.
Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/616b04d15c11f18a139348b142c17414/untitled513.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='dfalbel' date='2020-04-21T16:04:28Z'>
		&lt;denchmark-link:https://github.com/dfalbel&gt;@dfalbel&lt;/denchmark-link&gt;
 hello,
If you want to use Keras ProgbarLogger in TensorFlow version 1, Then I would suggest two solution:-

Either use tf.compat.v1.keras.callbacks.ProgbarLogger( )  instead of tf.keras.callbacks.ProgbarLogger( )
or,
Provide a parameter   count_mode='steps' i.e ProgbarLogger( count_mode='steps') because you will have to look for batches seen

		</comment>
		<comment id='3' author='dfalbel' date='2020-04-21T16:19:15Z'>
		&lt;denchmark-link:https://github.com/gulshanrana10&gt;@gulshanrana10&lt;/denchmark-link&gt;
 I don't understand your answer.

I am not using TF 1, I am using 2.2-rc3.
How can I use the count_mode="samples"? I don't want to use the steps mode. Why does it work in 2.1 and not in 2.2-rc3?

		</comment>
		<comment id='4' author='dfalbel' date='2020-04-22T17:05:13Z'>
		&lt;denchmark-link:https://github.com/dfalbel&gt;@dfalbel&lt;/denchmark-link&gt;
 Thanks for the issue!
You shouldn't be passing the ProgbarLogger directly in Model.fit, it is created automatically or not based on the verbose argument. This works for me:
import tensorflow as tf
data = tf.random.uniform(shape=(1000, 784),  maxval=15)
labels = tf.random.uniform(shape=(1000,10), maxval = 1, dtype=tf.int32)
model = tf.keras.Sequential([
  tf.keras.layers.Dense(32, activation = "relu"),
  tf.keras.layers.Dense(10, activation = "softmax")
])
model.compile(loss = "binary_crossentropy", optimizer="sgd", metrics=["accuracy"])
model.fit(data, labels, verbose=1)
		</comment>
		<comment id='5' author='dfalbel' date='2020-04-22T17:05:14Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38618&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38618&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='dfalbel' date='2020-04-23T18:00:43Z'>
		Fair enough. Although, if it's unusable IMHO it should not be exported.
		</comment>
	</comments>
</bug>