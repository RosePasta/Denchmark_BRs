<bug id='38923' author='SpikingNeuron' open_date='2020-04-27T00:50:48Z' closed_time='2020-05-29T04:41:54Z'>
	<summary>tensorflow 2.1  loading model when saved with `tf` format does not work</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 64 bit
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v2.2.0-rc1-34-ge6e5d6df2a 2.2.0-rc2
Python version: 3.8
Bazel version (if compiling from source): NA
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version: NA
GPU model and memory: 16 GB RAM

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Describe the current behavior
Check the code below to create and save model
&lt;denchmark-link:https://github.com/SpikingNeuron/tfpy_warrior/blob/master/tf2_save_and_load_custom_model.ipynb&gt;Test the code on Google-Colab&lt;/denchmark-link&gt;

# import necessary modules
import tensorflow as tf
import tensorflow.keras as tk
print(tf.__version__)

# define a custom model
class MyModel(tk.Model):
    ...

# Define a simple sequential model
def create_model():
    a = tk.Input(shape=(32,))
    b = tk.layers.Dense(32)(a)
    model = MyModel(inputs=a, outputs=b)

    model.compile(optimizer='adam',
                loss=tf.losses.SparseCategoricalCrossentropy(from_logits=True),
                metrics=['accuracy'])
    return model


# create model
my_model = create_model()

# Display the model's architecture
my_model.summary()

# save model
my_model.save(filepath="./saved_model", save_format="tf")
Now I want to load back the weights from disk. When I use the code below I get the error.
# load back model
my_model.load_weights(filepath="./saved_model")
This gives the error:
&lt;denchmark-code&gt;/usr/local/lib/python3.6/dist-packages/h5py/_hl/files.py in make_fid(name, mode, userblock_size, fapl, fcpl, swmr)
    171         if swmr and swmr_support:
    172             flags |= h5f.ACC_SWMR_READ
--&gt; 173         fid = h5f.open(name, flags, fapl=fapl)
    174     elif mode == 'r+':
    175         fid = h5f.open(name, h5f.ACC_RDWR, fapl=fapl)

h5py/_objects.pyx in h5py._objects.with_phil.wrapper()

h5py/_objects.pyx in h5py._objects.with_phil.wrapper()

h5py/h5f.pyx in h5py.h5f.open()

OSError: Unable to open file (file read failed: time = Tue Apr 28 15:30:40 2020
, filename = './saved_model', file descriptor = 57, errno = 21, error message = 'Is a directory', buf = 0x7fff093afd50, total read size = 8, bytes this sub-read = 8, bytes actually read = 18446744073709551615, offset = 0)
&lt;/denchmark-code&gt;

But then I debugged and found the TensorFlow library confuses itself in thinking that it is an h5 file. So I modified the code as below and now it works. I also get to use my custom MyModel
Basically I added extra path i.e. \\variables\\variables so that it detects the folder as tf checkpoint. Can anyone suggest a better approach?
my_model.load_weights(filepath="./saved_model/variables/variables")
print(my_model.__class__)
The other option is to use tk.models.load(...) as in the code below. But, the
problem is I lose my sub-classed model MyModel
_loaded_my_model = tk.models.load_model("./saved_model")
print(_loaded_my_model.__class__)
Describe the expected behavior
Was expecting the below code to work:
# load back model
# .... this does not work
my_model.load_weights(filepath="saved_model")
Or else provide extra method my_model.load(filepath=..., save_format='tf') which is in line with my_model.save(filepath=..., load_format='tf') with extra kwarg load_format if needed.
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
&lt;denchmark-link:https://github.com/SpikingNeuron/tfpy_warrior/blob/master/tf2_save_and_load_custom_model.ipynb&gt;Test the code on Google-Colab&lt;/denchmark-link&gt;

Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='SpikingNeuron' date='2020-04-27T14:11:53Z'>
		I could able to replicate the issue. Please find the gist &lt;denchmark-link:https://colab.research.google.com/gist/saikumarchalla/34cb21704963c03f8704a468deef6f79/untitled33.ipynb#scrollTo=8v7hSas77msv&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='2' author='SpikingNeuron' date='2020-04-27T16:49:02Z'>
		&lt;denchmark-link:https://github.com/SpikingNeuron&gt;@SpikingNeuron&lt;/denchmark-link&gt;

Actually you need to use  to load the model that was saved earlier using . As  saves everything including architecture, weights, optimizer status etc. In your code you tried to access  folder within the  folder as weights are saved there. Best way is to use 'model.saveload_model`.
If you want to save_weights and then load the weights back then you can use model.load_weights.
So you need to comment out the last line and use load_model as shown below.
&lt;denchmark-code&gt;# model.load_weights(filepath="saved_model") #
loaded_model = tf.keras.models.load_model('./saved_model')
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;Here is the code for saving weights and loading them back.
# saving and loading weights
model.save_weights('./Mymodel_weights',save_format='tf')
# create a new model architecture
new_model = create_model()
new_model.load_weights('./Mymodel_weights')
new_model.summary()
&lt;/denchmark-code&gt;

Can you Please check the &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/ef893f1f17072f30251ffa530cbc2bc6/saving_loading_model.ipynb&gt;gist here&lt;/denchmark-link&gt;

Please close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='3' author='SpikingNeuron' date='2020-04-28T14:00:15Z'>
		Actually I override Model class. And with tf.keras.models.load_model(...) I cannot get that class. So I prefer something like my_model_instance.load(...) to do the job for me. I will modify the question above to reflect this point.
		</comment>
		<comment id='4' author='SpikingNeuron' date='2020-04-28T14:19:59Z'>
		&lt;denchmark-link:https://github.com/SpikingNeuron&gt;@SpikingNeuron&lt;/denchmark-link&gt;
 If you have any  in your model, then please follow this &lt;denchmark-link:https://www.tensorflow.org/tutorials/keras/save_and_load#saving_custom_objects&gt;guide&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='5' author='SpikingNeuron' date='2020-04-28T15:54:29Z'>
		
@SpikingNeuron If you have any custom_objects in your model, then please follow this guide. Thanks!

Please read the updated question now. I assume that providing extra method my_model.load(filepath=..., load_format='tf') which is in line with my_model.save(filepath=..., save_format='tf') with extra kwarg load_format if needed can be a solution that is consistent with save() api..
		</comment>
		<comment id='6' author='SpikingNeuron' date='2020-05-29T00:22:09Z'>
		&lt;denchmark-link:https://github.com/SpikingNeuron&gt;@SpikingNeuron&lt;/denchmark-link&gt;
 As I mentioned in my &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/38923#issuecomment-620104527&gt;last response&lt;/denchmark-link&gt;
, when you save a keras model using  then we need to need  to load the model. I have updated your colab &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/6689b38218dc53c634e7b5324cdafa72/tf2_save_and_load_custom_model.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
Please verify once and close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='7' author='SpikingNeuron' date='2020-05-29T04:41:21Z'>
		I will close the issue ... but I still think that having a class method in tf.keras.models.Model for loading model can be a better idea as the custom class model MyCustomModel that is inheriting tf.keras.models.Model can then load model with class type MyCustomModel instead of tf.keras.models.Model
		</comment>
		<comment id='8' author='SpikingNeuron' date='2020-05-29T04:41:55Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38923&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38923&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>