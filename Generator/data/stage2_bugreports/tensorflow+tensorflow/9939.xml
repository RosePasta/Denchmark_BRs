<bug id='9939' author='nryant' open_date='2017-05-16T18:24:16Z' closed_time='2017-06-02T01:22:26Z'>
	<summary>contrib.layers.avg_pool2d raises warnings when serializing metagraph</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution: Ubuntu 14.04 LTS
TensorFlow installed from: source
TensorFlow version:  ('v1.1.0-rc2-1015-gf2047a3', '1.1.0-rc2')
Bazel version: 0.4.5
CUDA/cuDNN version: 8.0/5.1.5
GPU model and memory: Maxwell Titan X (12 GiB)

&lt;denchmark-h:h3&gt;Overview of problem&lt;/denchmark-h&gt;

Since updating to the most recent version (as of yesterday) of TensorFlow, I've started seeing the following ominous warning when serializing a wide resnet variant that I've been using for acoustic modeling:
&lt;denchmark-code&gt;WARNING:tensorflow:Error encountered when serializing LAYER_NAME_UIDS.
Type is unsupported, or the types of the items don't match field type in CollectionDef.
'dict' object has no attribute 'name'
&lt;/denchmark-code&gt;

However, a metagraphdef does export and I am able to successfully use it to recreate the trained model. After playing around with simpler architectures, it looks like the problem comes from the average pooling I do at the end, which involves a call to tf.contrib.layers.avg_pool2d. For a trivial example that elicits this warning, please see the script at
&lt;denchmark-code&gt;https://gist.github.com/nryant/1f69cda71fd6a468fa5641855199f843
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='nryant' date='2017-05-18T00:36:17Z'>
		Hi &lt;denchmark-link:https://github.com/sherrym&gt;@sherrym&lt;/denchmark-link&gt;
, are you able to take a look? Thanks!
		</comment>
		<comment id='2' author='nryant' date='2017-05-18T05:44:47Z'>
		I also frequently encounter this issue since I started to use the tf.layers module in TF 1.1.
It seems that something related to naming went wrong in some of the modules.
For example, the following code triggered the issue:
import tensorflow as tf

x = tf.zeros([10, 3])
y = tf.layers.dense(x, 5)  # the issue is originated from this line

sv = tf.train.Supervisor()
sess = sv.prepare_or_wait_for_session()
sv.saver.save(sess, '.')
Return:
&lt;denchmark-code&gt;WARNING:tensorflow:Error encountered when serializing LAYER_NAME_UIDS.
Type is unsupported, or the types of the items don't match field type in CollectionDef.
'dict' object has no attribute 'name'
&lt;/denchmark-code&gt;

However, the issue can be easily avoided (in this simple case) by specifying the name argument:
In contrast, using slim, keras, or tf.Variable doesn't trigger such an issue.
Here are some examples that work smoothly without triggering the warning above.
# The Tensorflow infrastructure
w = tf.Variable(tf.zeros([3, 5]))
y = tf.matmul(x, w)
# The `layers` module with the `name` arg specified
y = tf.layers.dense(x, 5, name='y')
# Slim
from tensorflow.contrib import slim
y = slim.fully_connected(x, 5)
# Keras
y = tf.contrib.keras.layers.Dense(units=5)(x)
		</comment>
		<comment id='3' author='nryant' date='2017-05-19T02:01:11Z'>
		&lt;denchmark-link:https://github.com/JeremyCCHsu&gt;@JeremyCCHsu&lt;/denchmark-link&gt;
, I use slim but am yet encountered by this issue AFTER I upgrade from tf 1.0.1 to 1.1.
environment info:
python 2.7
gpu: k40c with cudn 8.0
rhel: 6.5
tf: binary installation
		</comment>
		<comment id='4' author='nryant' date='2017-05-19T23:32:21Z'>
		Also getting this error on tf 1.1 even though I've passed names to all tf.layers commands (at least, I think so. If it's useful, I can try to find a minimal example of this where it doesn't come from an unnamed tf.layers).
See &lt;denchmark-link:http://stackoverflow.com/questions/43986092/warning-when-saving-variables-in-tensorflow-1-1-0&gt;here&lt;/denchmark-link&gt;
 for somebody getting this issue using an RNN as well, which is similar to what I'm seeing (I'm thinking it's probably the same issue as reported above with layers, though I could be wrong).
		</comment>
		<comment id='5' author='nryant' date='2017-05-24T11:48:55Z'>
		I'm getting the exact same error, but I'm not using any tf.layers. I'll see if I can create a minimal example.
		</comment>
		<comment id='6' author='nryant' date='2017-05-24T12:28:20Z'>
		I did a quick debugging session, and it seems the issue was introduced in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/1e3e5d424eaa6332314f8ad1d54089eb0f9e02e7&gt;1e3e5d4&lt;/denchmark-link&gt;
 by adding a dictionary named  as a graph collection. I'm not sure on the internals, but my feeling is that collections are not meant for dictionaries, only for ops, as the serialization code apparently expects to be able to access a  property on all collection entries.
The dictionary serves as a global (or technically graph-local) store for tracking counters per base name to make unique names. As a proof of concept I defined layer_name_uids globally as a struct and just used that without using collections, and this fixed the graph serialization issue.
I hope someone with more in-depth knowledge on this code could take a look. Maybe &lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;
 who authored the commit in question?
		</comment>
		<comment id='7' author='nryant' date='2017-05-24T13:04:30Z'>
		As a temporary workaround, running
del tf.get_collection_ref('LAYER_NAME_UIDS')[0]
before exporting the graph seems to work.
		</comment>
		<comment id='8' author='nryant' date='2017-05-25T19:55:06Z'>
		FWIW, I get the same warning when running &lt;denchmark-link:https://github.com/GoogleCloudPlatform/training-data-analyst/tree/master/blogs/timeseries/simplernn&gt;this&lt;/denchmark-link&gt;
 rnn example using TF 1.2 rc0.
Don't see it in TF 1.1.
&lt;denchmark-code&gt;WARNING:tensorflow:Error encountered when serializing LAYER_NAME_UIDS.
Type is unsupported, or the types of the items don't match field type in CollectionDef.
'dict' object has no attribute 'name'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='nryant' date='2017-05-26T03:20:06Z'>
		&lt;denchmark-link:https://github.com/ebrevdo&gt;@ebrevdo&lt;/denchmark-link&gt;
 has done some work on contrib.layers recently. Mind taking a look at why this warning message is being printed?
		</comment>
		<comment id='10' author='nryant' date='2017-05-26T06:11:16Z'>
		This is a harmless warning.  Layers perform bookkeeping inside a specially
named graph collection. The bookkeeping doesn't need to be serialized
across meta graph save/reload, so we haven't added the appropriate
serialization classes.
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On May 25, 2017 8:20 PM, "Justine Tunney" ***@***.***&gt; wrote:
 @ebrevdo &lt;https://github.com/ebrevdo&gt; has done some work on
 contrib.layers recently. Mind taking a look at why this warning message is
 being printed?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 &lt;#9939 (comment)&gt;,
 or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/ABtim-Oj1wz9-OL91mOJvcMtxJltSfEAks5r9kT6gaJpZM4Nc5RY&gt;
 .



		</comment>
		<comment id='11' author='nryant' date='2017-05-26T06:21:14Z'>
		A harmless warning is still a warning, and users keep asking the meaning of this warning.
It seems that originally the bookkeeping is done within each package (slim, layers, etc). Then the bookkeeping  dict gets moved into a special collection, so that the packages can share the bookkeeping code.
It seems that TensorFlow collections are used for collecting Tensors only. I suggest that we do not re-use the collections, and use some other means to share the bookkeeping dict.
Or, at least we can set a flag so that MetaGraph Savers don't try to serialize that.
		</comment>
		<comment id='12' author='nryant' date='2017-05-26T06:33:05Z'>
		I find that  are a little silly. I don't want to be warned about harmless things. Then it becomes very difficult for me to find the real warnings. Or I just turn warnings off because it's bothersome to have so much text output with no meaning. I'll just add the fix by &lt;denchmark-link:https://github.com/EdeMeijer&gt;@EdeMeijer&lt;/denchmark-link&gt;
 to my code for now, but it is a bit hacky to have to do. As I save models while I'm still training them, though (which is why the number of warnings is enough to be troublesome), I wonder if I ought to make a copy of the dictionary, then delete it when I export the model to avoid the warning, then restore it so that it's there if something in the layers expects it later? By the time the workaround is that long (admittedly only a few lines of code), I'd be glad to have something incorporated that took care of it for me.
		</comment>
		<comment id='13' author='nryant' date='2017-05-26T07:32:27Z'>
		Thanks &lt;denchmark-link:https://github.com/ebrevdo&gt;@ebrevdo&lt;/denchmark-link&gt;
 for helping us know that there's no cause for alarm. How do you think this issue should be triaged? I agree with our friends that, ideally speaking, warnings should be as helpful as possible. So maybe contributions welcome?
		</comment>
		<comment id='14' author='nryant' date='2017-05-29T07:22:13Z'>
		Still present in 1.2rc1:

&lt;denchmark-link:https://github.com/ali01&gt;@ali01&lt;/denchmark-link&gt;
 : please reclassify, this isn't a feature-request, but a bug: This worked fine until 1.1, then models that were working without error-messages suddenly produce the error-message above.
That causes people first to assume a breaking API-change, then to look for problems in their own model definition, when finding out that model-saves cause this, and finally to start digging in tf's code for the reason of this message, which by it self sounds like the model-save did  work.
		</comment>
		<comment id='15' author='nryant' date='2017-05-29T16:42:14Z'>
		Francois and Sherry should probably come to a decision. Either keras keeps
an internal dictionary or we find a way to signal to saver to mark some
collections as local.
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On May 29, 2017 12:22 AM, "Dominik Schlösser" ***@***.***&gt; wrote:
 Still present in 1.2rc1:
 WARNING:tensorflow:Error encountered when serializing LAYER_NAME_UIDS.
 Type is unsupported, or the types of the items don't match field type in
 CollectionDef. 'dict' object has no attribute 'name'
 @ali01 &lt;https://github.com/ali01&gt; : please reclassify, this isn't a
 feature-request, but a bug: This worked fine until 1.1, then models that
 were working without error-messages suddenly produce the error-message
 above.
 That causes people first to assume a breaking API-change, then to look for
 problems in their own model definition, when finding out that model-saves
 cause this, and finally to start digging in tf's code for the reason of
 this message, which by it self sounds like the model-save did *not* work.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 &lt;#9939 (comment)&gt;,
 or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/ABtim8d1pUdjtbZiUzbVEJqFutfiKKiaks5r-nJAgaJpZM4Nc5RY&gt;
 .



		</comment>
		<comment id='16' author='nryant' date='2017-05-31T15:09:50Z'>
		Fix is checked in internally and should get synced today.  I am attempting to make sure it is in the next 1.2 RC as a final cherry pick.  I will close once it hits master.
		</comment>
		<comment id='17' author='nryant' date='2017-06-02T01:22:26Z'>
		This is in with this &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/10359&gt;#10359&lt;/denchmark-link&gt;
   and I have it on the list to get cherry-picked into 1.2 RC2.  I will double check as long as I do not forget.
		</comment>
		<comment id='18' author='nryant' date='2017-07-12T23:55:12Z'>
		&lt;denchmark-link:https://github.com/tfboyd&gt;@tfboyd&lt;/denchmark-link&gt;

I still get this error when I tried to use tf.add_to_collection to add a dictionary/list to the collection. Is it the same issue? I tested with latest 1.2.1 build for windows.
WARNING:tensorflow:Error encountered when serializing exporter_interface.
Type is unsupported, or the types of the items don't match field type in CollectionDef.
'xxxx' object has no attribute 'name'
		</comment>
	</comments>
</bug>