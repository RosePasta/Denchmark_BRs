<bug id='449' author='alquraishi' open_date='2015-12-08T19:43:42Z' closed_time='2015-12-09T00:36:23Z'>
	<summary>TF code crashes python kernel</summary>
	<description>
The following piece of code:
&lt;denchmark-code&gt;import tensorflow as tf
a = tf.placeholder(tf.float32, shape=(-1, 10))
sess = tf.Session()
sess.run(tf.array_ops.shape(a))
&lt;/denchmark-code&gt;

crashes the Python kernel. I realize it's not right (for one thing I'm not feeding it a feed_dict), but it should give an error and not crash the kernel.
	</description>
	<comments>
		<comment id='1' author='alquraishi' date='2015-12-08T21:37:11Z'>
		Nice catch!  Yes, that is a bad bug.
		</comment>
		<comment id='2' author='alquraishi' date='2015-12-08T22:27:25Z'>
		I have this fixed at the kernel level, so it won't crash anymore.  However, I could also fix it at the shape inference level so it throws a Python exception at graph construction time.  To do this, I'd need to make tf.Dimension insist on nonnegative input.
&lt;denchmark-link:https://github.com/vrv&gt;@vrv&lt;/denchmark-link&gt;
: Do you think that's wise?  I'd be a bit worried that negative dimensions are used somewhere, but it's currently a bit inconsistent that C++  requires nonnegative but Python  does not.
		</comment>
		<comment id='3' author='alquraishi' date='2015-12-08T22:41:05Z'>
		C++ part in review.
		</comment>
		<comment id='4' author='alquraishi' date='2015-12-09T00:58:48Z'>
		I'm not sure yet if its wise -- the C++ TensorShape class thinks about shapes more concretely: it doesn't support unspecified dimensions / -1 / shape inference, etc.
I think when we push shape inference down into the C++ code, we'll likely have a C++ class that more closely represents what the python TensorShape class does.
		</comment>
		<comment id='5' author='alquraishi' date='2015-12-09T01:01:38Z'>
		Cool, I'm happy to leave it the way it is now that the C++ is fixed.
		</comment>
		<comment id='6' author='alquraishi' date='2018-12-16T13:45:23Z'>
		try using numpy befor importing tensorflow or keras
		</comment>
	</comments>
</bug>