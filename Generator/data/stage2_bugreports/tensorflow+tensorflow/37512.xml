<bug id='37512' author='ammirato' open_date='2020-03-11T16:49:21Z' closed_time='2020-03-18T17:55:03Z'>
	<summary>InaccessibleTensorError when appending to list, while looping.</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock
example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g.,
Linux Ubuntu 16.04): Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if
the issue happens on mobile device: N/A
TensorFlow installed from (source or
binary): - TensorFlow version (use command below): binary
Python version: - Bazel
version (if compiling from source): 2.7.15
GCC/Compiler version (if compiling from
source):
CUDA/cuDNN version: - GPU model and memory:  N/A

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
I get an InaccessibleTensorError when looping over a tensor and appending to a python list, only sometimes.
Describe the expected behavior

Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
######################
&lt;denchmark-link:https://colab.research.google.com/drive/1dMyCJnC9iPieSLEiPgXKWiJhJHftqLtQ&gt;codalab link&lt;/denchmark-link&gt;

#######################
Python script:
The error happens at the line my_list.append(new_vals).
&lt;denchmark-code&gt;from __future__ import absolute_import, division, print_function
import tensorflow as tf


def list_each_row_times_two(OG_values):
    my_list = []
    for old_vals in OG_values:
        new_vals = tf.math.multiply(old_vals, 2)
        my_list.append(new_vals) #Fails here
        #tf.print(new_vals) #replace above line with this, it works
    return my_list


if __name__ == '__main__':

    test_func = tf.function(list_each_row_times_two)
    ##########################################
    ########      This works!!   #############
    ##########################################
    _OG_values = []
    for _ in range(3):
        _OG_values.append(tf.random.uniform((2,)))
    new_values = test_func(_OG_values)
    print('We did it!')
    ##########################################
    ########     !!!! DOES NOT WORK!!    #####
    ##########################################
    OG_values = tf.random.uniform((3, 2))
    new_values = test_func(OG_values)
    print('We did it! again!')

&lt;/denchmark-code&gt;

Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
&lt;denchmark-code&gt;We did it!
Traceback (most recent call last):
  File "unkown_looping_bug.py", line 30, in &lt;module&gt;
    new_values = test_func(OG_values)
  File "/home/philip/ros_ws/src/real_world/venv/local/lib/python2.7/site-packages/tensorflow_core/python/eager/def_function.py", line 568, in __call__
    result = self._call(*args, **kwds)
  File "/home/philip/ros_ws/src/real_world/venv/local/lib/python2.7/site-packages/tensorflow_core/python/eager/def_function.py", line 606, in _call
    results = self._stateful_fn(*args, **kwds)
  File "/home/philip/ros_ws/src/real_world/venv/local/lib/python2.7/site-packages/tensorflow_core/python/eager/function.py", line 2362, in __call__
    graph_function, args, kwargs = self._maybe_define_function(args, kwargs)
  File "/home/philip/ros_ws/src/real_world/venv/local/lib/python2.7/site-packages/tensorflow_core/python/eager/function.py", line 2703, in _maybe_define_function
    graph_function = self._create_graph_function(args, kwargs)
  File "/home/philip/ros_ws/src/real_world/venv/local/lib/python2.7/site-packages/tensorflow_core/python/eager/function.py", line 2593, in _create_graph_function
    capture_by_value=self._capture_by_value),
  File "/home/philip/ros_ws/src/real_world/venv/local/lib/python2.7/site-packages/tensorflow_core/python/framework/func_graph.py", line 983, in func_graph_from_py_func
    expand_composites=True)
  File "/home/philip/ros_ws/src/real_world/venv/local/lib/python2.7/site-packages/tensorflow_core/python/util/nest.py", line 568, in map_structure
    structure[0], [func(*x) for x in entries],
  File "/home/philip/ros_ws/src/real_world/venv/local/lib/python2.7/site-packages/tensorflow_core/python/framework/func_graph.py", line 945, in convert
    x = deps_ctx.mark_as_return(x)
  File "/home/philip/ros_ws/src/real_world/venv/local/lib/python2.7/site-packages/tensorflow_core/python/framework/auto_control_deps.py", line 167, in mark_as_return
    tensor = array_ops.identity(tensor)
  File "/home/philip/ros_ws/src/real_world/venv/local/lib/python2.7/site-packages/tensorflow_core/python/util/dispatch.py", line 180, in wrapper
    return target(*args, **kwargs)
  File "/home/philip/ros_ws/src/real_world/venv/local/lib/python2.7/site-packages/tensorflow_core/python/ops/array_ops.py", line 267, in identity
    ret = gen_array_ops.identity(input, name=name)
  File "/home/philip/ros_ws/src/real_world/venv/local/lib/python2.7/site-packages/tensorflow_core/python/ops/gen_array_ops.py", line 3829, in identity
    "Identity", input=input, name=name)
  File "/home/philip/ros_ws/src/real_world/venv/local/lib/python2.7/site-packages/tensorflow_core/python/framework/op_def_library.py", line 742, in _apply_op_helper
    attrs=attr_protos, op_def=op_def)
  File "/home/philip/ros_ws/src/real_world/venv/local/lib/python2.7/site-packages/tensorflow_core/python/framework/func_graph.py", line 591, in _create_op_internal
    inp = self.capture(inp)
  File "/home/philip/ros_ws/src/real_world/venv/local/lib/python2.7/site-packages/tensorflow_core/python/framework/func_graph.py", line 641, in capture
    % (tensor, tensor.graph, self))
tensorflow.python.framework.errors_impl.InaccessibleTensorError: The tensor 'Tensor("Mul:0", shape=(2,), dtype=float32)' cannot be accessed here: it is defined in another function or code block. Use return values, explicit Python locals or TensorFlow collections to access it. Defined in: FuncGraph(name=while_body_56, id=139762147406480); accessed from: FuncGraph(name=list_each_row_times_two, id=139762146659984).
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ammirato' date='2020-03-12T13:03:48Z'>
		Was able to reproduce the issue with &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/5a83dc663fb1354abc81409a1516c9e3/37512.ipynb&gt;TF 2.1&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/68b7db6ce215b021abc9d40cd923f528/tf-nightly-37512.ipynb&gt;TF-nightly&lt;/denchmark-link&gt;
. Please find the attached gist. Thanks!
		</comment>
		<comment id='2' author='ammirato' date='2020-03-15T04:00:59Z'>
		&lt;denchmark-link:https://github.com/ammirato&gt;@ammirato&lt;/denchmark-link&gt;
 I think this is tracing behavior of the functions in the graph. When you run the first  block of code, it creates a function graph and ops within the graph. In this first block, the argument  is a list of tensor.
&lt;denchmark-code&gt;    _OG_values = []
    for _ in range(3):
        _OG_values.append(tf.random.uniform((2,)))
    #print(_OG_values)
    new_values = test_func(_OG_values)
&lt;/denchmark-code&gt;

Whenever there is a change in input signature of argument that passed to function graph, it tries to create another function graph. In the second code block, the input argument OG_values is a  tensor of shape (3, 2) which means it cannot access original graph and the ops (MUL here) defined within it. The error clearly describes it. Thanks!
If there is no change in input signature, then everything should work as expected. Thanks!
Please close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='3' author='ammirato' date='2020-03-15T04:59:58Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 Nope I don't think that's it. Did you try it?
&lt;denchmark-link:https://colab.research.google.com/drive/18mZ5h8Z2RXwXUmHnGeIoVIS0nOxmHxZG&gt;Here's another codalab without the first block&lt;/denchmark-link&gt;
. same error. Here's the code:
&lt;denchmark-code&gt;
from __future__ import absolute_import, division, print_function
import tensorflow as tf


def list_each_row_times_two(OG_values):
    my_list = []
    for old_vals in OG_values:
        new_vals = tf.math.multiply(old_vals, 2)
        my_list.append(new_vals) #Fails here
        #tf.print(new_vals) #replace above line with this, it works
    return my_list


if __name__ == '__main__':

    test_func = tf.function(list_each_row_times_two)
    ##########################################
    ########     !!!! DOES NOT WORK!!    #####
    ##########################################
    OG_values = tf.random.uniform((3, 2))
    new_values = test_func(OG_values)
    print('We did it! again!')

&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='ammirato' date='2020-03-18T17:55:03Z'>
		Python lists don't work well with TF control flow at the moment. You can find more info about this error in the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/autograph/g3doc/reference/common_errors.md#inaccessibletensorerror-the-tensor-name-is-defined-in-another-function-or-code-block&gt;AutoGraph reference&lt;/denchmark-link&gt;
. The reason why it works in the first case is because the input is a Python list, so the  loop runs in Python at graph construction (the graph will cpotain the body replicated three times). In the second case, because it iterates over a Tensor, the loop must run in the TF graph (as a tf.while_loop), and you can't use Python collections in there.
We hope to support this properly in the future (see below), but for now we have a few alternatives:

TensorArray:

&lt;denchmark-code&gt;    my_list = tf.TensorArray(tf.float32, size=0, dynamic_size=True)
    for old_vals in OG_values:
        new_vals = tf.math.multiply(old_vals, 2)
        my_list = my_list.write(my_list.size(), new_vals)
    return my_list.stack()
&lt;/denchmark-code&gt;


concat:

&lt;denchmark-code&gt;    my_list = tf.zeros([0])
    for old_vals in OG_values:
        tf.autograph.experimental.set_loop_options(
            shape_invariants=[(my_list, tf.TensorShape([None]))])
        new_vals = tf.math.multiply(old_vals, 2)
        my_list = tf.concat([my_list, new_vals], 0)
    return my_list
&lt;/denchmark-code&gt;

As a side note, there is an experimental option in AutoGraph that lets you work with TensorArrays using the list syntax, but that's not yet ready to use.
&lt;denchmark-code&gt;def list_each_row_times_two(OG_values):
    my_list = tf.TensorArray(tf.float32, size=0, dynamic_size=True)
    for old_vals in OG_values:
        new_vals = tf.math.multiply(old_vals, 2)
        my_list.append(new_vals)
    return my_list.stack()


test_func = tf.function(
    list_each_row_times_two,
    experimental_autograph_options=tf.autograph.experimental.Feature.LISTS)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='ammirato' date='2020-03-18T17:55:05Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37512&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37512&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>