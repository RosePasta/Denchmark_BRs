<bug id='25882' author='serycjon' open_date='2019-02-19T09:14:34Z' closed_time='2019-04-25T20:16:04Z'>
	<summary>tf.image.random_jpeg_quality only products images of single jpeg quality</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Debian 9
TensorFlow installed from (source or binary): pip install
TensorFlow version (use command below): v1.12.0-0-ga6d8ffae09
Python version: 2.7.13
CUDA/cuDNN version: 9.0 / 7.0.3
GPU model and memory: GeForce GTX 1080 Ti, 10405 MB

Describe the current behavior
tf.image.random_jpeg_quality generates random jpeg quality on graph creation, which is then fixed.
Describe the expected behavior
tf.image.random_jpeg_quality generates random jpeg quality for each image/batch of images passed through it.
Code to reproduce the issue
import numpy as np
import tensorflow as tf

img = np.random.randint(0, 256, (100, 200, 3), dtype=np.uint8)

tf_img = tf.placeholder(tf.uint8)
jpeg_augment = tf.image.random_jpeg_quality(tf_img,
                                            min_jpeg_quality=20,
                                            max_jpeg_quality=90)

sess_config = tf.ConfigProto()
sess_config.gpu_options.allow_growth = True

with tf.Session(config=sess_config) as sess:
    sess.run(tf.global_variables_initializer())
    results = []
    for i in range(25):
        augmented = sess.run([jpeg_augment], feed_dict={tf_img: img})[0]
        results.append(augmented)

results = np.array(results)
same_as_first = results == results[0, ...]
all_equal = np.all(same_as_first)
print('all_equal: {}'.format(all_equal))
assert not all_equal
The code causing this is located at:



tensorflow/tensorflow/python/ops/image_ops_impl.py


         Line 1634
      in
      a6d8ffa






 jpeg_quality = np.random.randint(min_jpeg_quality, max_jpeg_quality) 





	</description>
	<comments>
		<comment id='1' author='serycjon' date='2019-02-22T12:46:59Z'>
		&lt;denchmark-link:https://github.com/drpngx&gt;@drpngx&lt;/denchmark-link&gt;
 Can you answer the issue or reassign?
		</comment>
		<comment id='2' author='serycjon' date='2019-02-22T12:57:45Z'>
		I think this is more of a "type:bug" than "type:feature"
		</comment>
		<comment id='3' author='serycjon' date='2019-03-15T21:15:13Z'>
		The root cause of this problem is that the  op's  parameter is a fixed , not a variable . Fixing  will necessitate a new version of  with a different signature. &lt;denchmark-link:https://github.com/drpngx&gt;@drpngx&lt;/denchmark-link&gt;
 I'd be happy to put in a PR for this issue if that's ok.
		</comment>
		<comment id='4' author='serycjon' date='2019-03-18T17:25:38Z'>
		Sounds like a good idea. &lt;denchmark-link:https://github.com/frreiss&gt;@frreiss&lt;/denchmark-link&gt;
 are you familiar with the op replacement process? You have to:

Create a new op, call it v2.
Check it in, with tests etc and wait for two weeks.
Replace the call from v1 to v2.

The v2 version should be a strict superset of v1. Ideally it should behave exactly like v1 with the default options.
		</comment>
		<comment id='5' author='serycjon' date='2019-03-19T17:14:04Z'>
		&lt;denchmark-link:https://github.com/drpngx&gt;@drpngx&lt;/denchmark-link&gt;
 yes, I've done an op replacement in the past with the  op.
I'll break this work down into a few smaller PRs to make the diff size more manageable:

Add a new C++ op, EncodeJpegV2, along with C++ regression tests.
Modify the random_jpeg_quality Python API to use EncodeJpegV2 and also fix issue #25882.
Change the other Python code in image_ops_impl.py that uses gen_image_ops.encode_jpeg to use gen_image_ops.encode_jpeg_v2.

Regarding the first step: I see that EncodeJpeg has a number of other arguments that are currently static attributes:
REGISTER_OP("EncodeJpeg")
    .Input("image: uint8")
    .Attr("format: {'', 'grayscale', 'rgb'} = ''")
    .Attr("quality: int = 95")
    .Attr("progressive: bool = false")
    .Attr("optimize_size: bool = false")
    .Attr("chroma_downsampling: bool = true")
    .Attr("density_unit: {'in', 'cm'} = 'in'")
    .Attr("x_density: int = 300")
    .Attr("y_density: int = 300")
    .Attr("xmp_metadata: string = ''")
    .Output("contents: string")

Do you have any preference about which arguments I should turn into 0-D tensors in the new op?
		</comment>
		<comment id='6' author='serycjon' date='2019-03-20T00:17:51Z'>
		I will let the API reviewer comment. My general intuition is that numbers can be changed, and everything else, in the worst case put in the graph. So quality, {x,y}_density would be input tensors.
		</comment>
		<comment id='7' author='serycjon' date='2019-03-20T20:28:23Z'>
		(For API owners) This might be more appropriate for the &lt;denchmark-link:https://github.com/tensorflow/addons&gt;TensorFlow Addons&lt;/denchmark-link&gt;
 repository, which has a number of special use ops like this. In either case, in the op registration code above, the Attrs should be Inputs. (Inputs are more flexible.)
		</comment>
		<comment id='8' author='serycjon' date='2019-04-02T01:35:21Z'>
		I was about to start work on this, but it looks like an anonymous Googler has already committed a patch. Someone should close this issue.
		</comment>
		<comment id='9' author='serycjon' date='2019-04-25T20:16:05Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=25882&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=25882&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>