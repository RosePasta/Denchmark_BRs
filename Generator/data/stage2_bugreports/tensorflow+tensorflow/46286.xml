<bug id='46286' author='sebastian-sz' open_date='2021-01-08T11:22:29Z' closed_time='2021-01-13T06:26:58Z'>
	<summary>Cannot create tf.constant inside tf.function with integer tensor.</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): binary (Google Colab)
TensorFlow version (use command below): v2.4.0-0-g582c8d236cb 2.4.0
Python version: Python 3.6.9
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the current behavior
It is impossible to create a tf.constant inside a function wrapped by tf.function if the argument to tf.constant is an integer Tensor.
Describe the expected behavior
It is expected that such operations do not raise an error. For example in case of slightly more advanced postprocessing.
Unless this behaviour is desired, this issue can be closed. I would however, greatly appreciate an explanation.
Standalone code to reproduce the issue
The following snippet will work with eager execution:
def function():
    a = int(tf.random.normal(shape=()))
    tf.print(a)

    constant = tf.constant([a])
    tf.print(constant)
Will output:
&lt;denchmark-code&gt;-1
[-1]
&lt;/denchmark-code&gt;

However, after wrapping in tf.function an error is raised:
wrapped = tf.function(function)
wrapped()
Raises:
&lt;denchmark-code&gt;/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/func_graph.py in wrapper(*args, **kwargs)
    975           except Exception as e:  # pylint:disable=broad-except
    976             if hasattr(e, "ag_error_metadata"):
--&gt; 977               raise e.ag_error_metadata.to_exception(e)
    978             else:
    979               raise

TypeError: in user code:

    &lt;ipython-input-97-0acfdad4a1be&gt;:5 function  *
        constant = tf.constant([a])
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/constant_op.py:265 constant  **
        allow_broadcast=True)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/constant_op.py:283 _constant_impl
        allow_broadcast=allow_broadcast))
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/tensor_util.py:457 make_tensor_proto
        _AssertCompatible(values, dtype)
    /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/tensor_util.py:334 _AssertCompatible
        raise TypeError("Expected any non-tensor type, got a tensor instead.")

    TypeError: Expected any non-tensor type, got a tensor instead.
&lt;/denchmark-code&gt;

Other info / logs: N/A
	</description>
	<comments>
		<comment id='1' author='sebastian-sz' date='2021-01-08T16:45:50Z'>
		I have tried in colab with TF version 2.3, 2.4, nightly version() and was able to reproduce the issue . Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/f78f0f1fbb431efeaac88336119788d0/untitled603.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='sebastian-sz' date='2021-01-13T03:01:15Z'>
		It seems that in the wrapped version. The a = int(tf.random.normal(shape=())) is interpreted as a = tf.cast(tf.random.normal(shape=()), tf.int32) and a list of tensor is not good argument for tf.constant.
I've commented the last two line of the function and changed tf.print(a) to tf.print(a, type(a)) to see the above difference.
		</comment>
		<comment id='3' author='sebastian-sz' date='2021-01-13T03:28:18Z'>
		Also, I wonder if you could use tf.convert_to_tensor to replace the second tf.constant in your more advanced case, as tf.convert_to_tensor can accept both Tensor type and python native types.
		</comment>
		<comment id='4' author='sebastian-sz' date='2021-01-13T06:16:25Z'>
		
Also, I wonder if you could use tf.convert_to_tensor to replace the second tf.constant in your more advanced case, as tf.convert_to_tensor can accept both Tensor type and python native types.

Yes! It works! Thank you. My issue is resolved and if you are comfortable with it, it can be closed.
		</comment>
		<comment id='5' author='sebastian-sz' date='2021-01-13T06:21:41Z'>
		&lt;denchmark-link:https://github.com/sebastian-sz&gt;@sebastian-sz&lt;/denchmark-link&gt;
 I'm not a maintainer, so it's up to you whether to close it 
		</comment>
		<comment id='6' author='sebastian-sz' date='2021-01-13T06:26:58Z'>
		Understood. Thanks again for help!
		</comment>
		<comment id='7' author='sebastian-sz' date='2021-01-13T06:27:00Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/46286&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/46286&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>