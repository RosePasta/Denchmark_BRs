<bug id='30919' author='world2vec' open_date='2019-07-22T07:32:20Z' closed_time='2019-07-23T21:54:13Z'>
	<summary>tf.keras.layers.Embedding set trainable to False does not work</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): ubuntu 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.14.0
Python version: 3.5.2

The output of the 2 print statements should be the same. Same issue for other layer like Dense, please confirm trainable parameter behavior.
&lt;denchmark-code&gt;embedding = np.random.rand(2,3).astype(np.float32)
emb_layer = tf.keras.layers.Embedding(2, 3, weights=[embedding], trainable=False)
emb = emb_layer(tf.constant([0],tf.int32))
opt = tf.train.AdamOptimizer()
loss = tf.nn.l2_loss(tf.reduce_mean(emb)-0)
train_op = opt.minimize(loss)
sess.run(tf.initialize_all_variables())
out = np.mean(sess.run(emb_layer.variables[0])[0])
sess.run(train_op)
print(out)
print(np.mean(sess.run(emb_layer.variables[0])[0]))
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='world2vec' date='2019-07-23T08:37:51Z'>
		I could able to reproduce the issue with Tensorflow 1.14 on Colab. Find the gist of Colab &lt;denchmark-link:https://colab.research.google.com/drive/1tQ1C5jnwxXotnxR-H7WGWD0QvCXnLybX&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='world2vec' date='2019-07-23T21:36:49Z'>
		I could reproduce the issue even with tf-nightly. Thanks!
		</comment>
		<comment id='3' author='world2vec' date='2019-07-23T21:54:13Z'>
		This is expected behavior. trainable=False is a keras concept; it doesn't automatically override the graph and op behavior of tf 1.x. In order to do what you want, you should use the new style tf.keras.optimizers optimizers (or GradientTape) which accept a list of variables to differentiate with respect to and the .trainable_weights attribute of Layers and Models which will filter based on .trainable.
		</comment>
		<comment id='4' author='world2vec' date='2019-07-23T21:54:15Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30919&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30919&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>