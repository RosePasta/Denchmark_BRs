<bug id='32884' author='adkoadko' open_date='2019-09-27T18:25:42Z' closed_time='2019-10-29T21:28:22Z'>
	<summary>tf.image.extract_patches bug - incorrect values</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
docker built from tensorflow/tensorflow:2.0.0rc0-gpu-py3
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary):
docker built from tensorflow/tensorflow:2.0.0rc0-gpu-py3
TensorFlow version (use command below):
2.0.0rc0
Python version:
3.6.8
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
10
GPU model and memory:

Describe the current behavior
I am using tf.image.extract_patches to get patches of an image read by cv2.
I pad the image with zeros and so I noticed, that the last extracted patch (after reshaping the output) has unexpected values at the very end (last pixels of the last row). They look like coming from another part of the original image. All the other patches look quite all right.
I also tried retyping the image to float32 before it goes to extract_patches - didn't help.
Code to reproduce the issue
&lt;denchmark-code&gt;def image_to_patches(image, patch_size, stride):                                                                                                                                                                         
    target_width = ((image.shape[1] - patch_size) // stride + 1) * stride + patch_size + 1                                                                                                                  
    target_height = ((image.shape[0] - patch_size) // stride + 1) * stride + patch_size + 1                                                                                                                 
                                                                                                                                                                                                            
    image = np.pad(image, ((0, target_height - image.shape[0]), (0, target_width - image.shape[1]), (0, 0)))                                                                                                
    # here, the last row of `image` is all zeros                                                                                                                                                                      
    batched_image = np.expand_dims(image, 0)                                                                                                                                                                
    patches = tf.image.extract_patches(                                                                                                                                                                     
        images=batched_image,                                                                                                                                                                               
        sizes=[1, patch_size, patch_size, 1],                                                                                                                                                               
        strides=[1, stride, stride, 1],                                                                                                                                                                     
        rates=[1, 1, 1, 1],                                                                                                                                                                                 
        padding='VALID',                                                                                                                                                                                    
        name=None                                                                                                                                                                                           
    )                                                                                                                                                                                                       
    patches = np.array(patches)                                                                                                                                                                             
    patches = np.resize(patches, (patches.shape[0] * patches.shape[1] * patches.shape[2], -1))                                                                                                              
    patches = np.resize(patches, (patches.shape[0], patch_size, patch_size, image.shape[-1]))                                                                                                               
    return patches                                  
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='adkoadko' date='2019-09-30T20:01:16Z'>
		&lt;denchmark-link:https://github.com/adkoadko&gt;@adkoadko&lt;/denchmark-link&gt;
 Can you please share a github gist of this issue as I am unable to reproduce it with the above code. Thanks!
		</comment>
		<comment id='2' author='adkoadko' date='2019-10-02T23:24:10Z'>
		&lt;denchmark-link:https://github.com/adkoadko&gt;@adkoadko&lt;/denchmark-link&gt;
 It would be better if you could share a complete reproducible code snippet that could expose the issue, as &lt;denchmark-link:https://github.com/gowthamkpr&gt;@gowthamkpr&lt;/denchmark-link&gt;
 suggested to help finding the issue.

I am using tf.image.extract_patches to get patches of an image read by cv2.

If I remember correctly, OpenCV uses NCHW format which could be different from TensorFlow's layout. Wondering if you did the conversion before calling extract_patches?
		</comment>
		<comment id='3' author='adkoadko' date='2019-10-03T07:29:10Z'>
		&lt;denchmark-link:https://gist.github.com/adkoadko/59580391e636705b8684056f9a5482f4&gt;https://gist.github.com/adkoadko/59580391e636705b8684056f9a5482f4&lt;/denchmark-link&gt;

OpenCV uses NHWC by default, I also reproduced this with plain numpy and tensorflow 2.0.0 (see gist)
		</comment>
		<comment id='4' author='adkoadko' date='2019-10-03T18:22:01Z'>
		&lt;denchmark-link:https://github.com/adkoadko&gt;@adkoadko&lt;/denchmark-link&gt;
 Tried reproducing your issue, but was not able to. Please find my github gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gowthamkpr/5fc22477c5e37930170941560319bf8e/untitled166.ipynb&gt;here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='5' author='adkoadko' date='2019-10-03T18:55:43Z'>
		I see, you are using an older version of numpy, where  is a required argument. I updated the gist: &lt;denchmark-link:https://gist.github.com/adkoadko/59580391e636705b8684056f9a5482f4&gt;https://gist.github.com/adkoadko/59580391e636705b8684056f9a5482f4&lt;/denchmark-link&gt;

After adding the argument, I was able to reproduce the issue in your notebook
		</comment>
		<comment id='6' author='adkoadko' date='2019-10-09T22:19:54Z'>
		Was able to reproduce the issue. Please find the github gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gowthamkpr/bbb1b6951c41e5337aa319e09e510780/untitled173.ipynb&gt;here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='7' author='adkoadko' date='2019-10-29T19:17:16Z'>
		in the repro, the patch size is 60 and stride size is 50, so there will be some overlap. just want to check whether this is what you want
		</comment>
		<comment id='8' author='adkoadko' date='2019-10-29T21:15:41Z'>
		I think I found the problem, it is not about tf.image.extract_patches. It is about np.resize()
I inserted print(xx.shape) to check the shapes of extracted patches, and the shape of np.resize, turns of the no.resize(), if you use -1,  the length of last dimension is reduced by 1.
If you fix it by using patches.shape[3], it prints the correct values as expected.
&lt;denchmark-code&gt;patches = np.array(patches)
print(patches.shape) .  #(1, 4, 2, 10800)
patches = np.resize(patches, (patches.shape[0] * patches.shape[1] * patches.shape[2], -1))
print(patches.shape) .  #(8, 10799)
&lt;/denchmark-code&gt;

Fix:
patches = np.resize(patches, (patches.shape[0] * patches.shape[1] * patches.shape[2], patches.shape[3]))
		</comment>
		<comment id='9' author='adkoadko' date='2019-10-29T21:28:14Z'>
		Or instead of using np.resize(), you could use np.reshape(), which interpret -1 as expected
		</comment>
		<comment id='10' author='adkoadko' date='2019-10-29T21:28:24Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32884&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32884&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>