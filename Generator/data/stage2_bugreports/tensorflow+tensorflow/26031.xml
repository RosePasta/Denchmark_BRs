<bug id='26031' author='ageron' open_date='2019-02-23T09:34:56Z' closed_time='2019-07-15T18:49:27Z'>
	<summary>Cannot create stateful metrics based on symbolic tensors using the functional API</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Mac OS X 10.13.6
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
N/A
TensorFlow installed from (source or binary):
binary
TensorFlow version (use command below):
tf.version.VERSION == '2.0.0-dev20190222'
tf.version.GIT_VERSION == 'v1.12.0-8615-g74016a0d51'
Python version:
3.6.8
Bazel version (if compiling from source):
N/A
GCC/Compiler version (if compiling from source):
N/A
CUDA/cuDNN version:
N/A
GPU model and memory:
N/A

Describe the current behavior
I get an exception when I try to create a metric based on a symbolic tensor when using the functional API: keras.metrics.Mean()(hidden1)
Describe the expected behavior
I expect to be able to define metrics based on any layer's output, when using the functional API.
Code to reproduce the issue
import tensorflow as tf
from tensorflow import keras

inputs = keras.layers.Input(shape=[2])
hidden1 = keras.layers.Dense(30)(inputs)
hidden1_mean = keras.metrics.Mean()(hidden1) # TypeError: see stacktrace below
Other info / logs
I know I could use instead:
model.add_metric(hidden1, name="hidden1_mean", aggregation="mean")
But using stateful metrics should be possible.
Here is the stacktrace:
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-1-8b9d3421cd04&gt; in &lt;module&gt;
      4 inputs = keras.layers.Input(shape=[2])
      5 hidden1 = keras.layers.Dense(30)(inputs)
----&gt; 6 mean = keras.metrics.Mean()(hidden1)

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/metrics.py in __call__(self, *args, **kwargs)
    172       The metric value tensor.
    173     """
--&gt; 174     update_op = self.update_state(*args, **kwargs)
    175     with ops.control_dependencies([update_op]):
    176       result_t = self.result()

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/utils/metrics_utils.py in decorated(metric_obj, *args, **kwargs)
     70     """Decorated function with `add_update()`."""
     71
---&gt; 72     update_op = update_state_fn(*args, **kwargs)
     73     if update_op is not None:  # update_op will be None in eager execution.
     74       metric_obj.add_update(update_op, inputs=True)

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/keras/metrics.py in update_state(self, values, sample_weight)
    324     elif self.reduction == metrics_utils.Reduction.WEIGHTED_MEAN:
    325       if sample_weight is None:
--&gt; 326         num_values = math_ops.cast(array_ops.size(values), self._dtype)
    327       else:
    328         num_values = math_ops.reduce_sum(sample_weight)

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/util/dispatch.py in wrapper(*args, **kwargs)
    178     """Call target, and fall back on dispatchers if there is a TypeError."""
    179     try:
--&gt; 180       return target(*args, **kwargs)
    181     except (TypeError, ValueError):
    182       # Note: convert_to_eager_tensor currently raises a ValueError, not a

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/ops/array_ops.py in size(input, name, out_type)
    397   @end_compatibility
    398   """
--&gt; 399   return size_internal(input, name, optimize=True, out_type=out_type)
    400
    401

~/.virtualenvs/tf2/lib/python3.6/site-packages/tensorflow/python/ops/array_ops.py in size_internal(input, name, optimize, out_type)
    418     input = ops.convert_to_tensor(input)
    419     np_out_type = out_type.as_numpy_dtype
--&gt; 420     num_elements = np.prod(input._shape_tuple(), dtype=np_out_type)  # pylint: disable=protected-access
    421     return ops.convert_to_tensor(num_elements, dtype=out_type)
    422   with ops.name_scope(name, "Size", [input]) as name:

~/.virtualenvs/tf2/lib/python3.6/site-packages/numpy/core/fromnumeric.py in prod(a, axis, dtype, out, keepdims, initial)
   2770     """
   2771     return _wrapreduction(a, np.multiply, 'prod', axis, dtype, out, keepdims=keepdims,
-&gt; 2772                           initial=initial)
   2773
   2774

~/.virtualenvs/tf2/lib/python3.6/site-packages/numpy/core/fromnumeric.py in _wrapreduction(obj, ufunc, method, axis, dtype, out, **kwargs)
     84                 return reduction(axis=axis, out=out, **passkwargs)
     85
---&gt; 86     return ufunc.reduce(obj, axis, dtype, out, **passkwargs)
     87
     88

TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
	</description>
	<comments>
		<comment id='1' author='ageron' date='2019-07-15T18:49:27Z'>
		&lt;denchmark-link:https://github.com/ageron&gt;@ageron&lt;/denchmark-link&gt;
 I could not reproduce the issue with the above code snippet anymore.
Side note: we do not support model.add_metric(metric_obj) on Functional model as we cannot trace back from the metric result to model inputs for serialization. I assume you want to create metric object and use it with add_metric API?
		</comment>
		<comment id='2' author='ageron' date='2019-07-15T18:49:29Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=26031&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=26031&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>