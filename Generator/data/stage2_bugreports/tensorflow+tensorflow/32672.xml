<bug id='32672' author='currivan' open_date='2019-09-19T21:02:57Z' closed_time='2020-02-04T21:21:32Z'>
	<summary>A keras model containing a tf.tile op layer with a tensor in the `multiples` arg fails when saving to hdf5</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS 10.14.5
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v2.0.0-rc0-101-gd2d2566eef 2.0.0-rc1
Python version: Python 3.6.8 :: Anaconda, Inc.
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
A keras model containing a tf.tile op layer with a tensor in the multiples arg throws an exception when saving to hdf5.
(I'm using tf.tile because RepeatVector(n) doesn't accept a tensor for n. The goal is to stack a 2d feature batch so it can be concatenated to a variable length 3d batch of sequence features.)
Describe the expected behavior
Model.save() should save the model.
Code to reproduce the issue
import numpy as np
import tensorflow as tf
from tensorflow.keras.layers import Input
from tensorflow.keras import Model
a = Input(shape=(10,))
out = tf.tile(a, (1, tf.shape(a)[0]))
model = Model(a, out)
x = np.zeros((50,10), dtype=np.float32)
print(model(x).numpy())
model.save('my_model.h5')
Other info / logs
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

ValueError                                Traceback (most recent call last)
 in 
11 print(model(x).numpy())
12
---&gt; 13 model.save(model_dir + '/my_model.h5')
~/miniconda3/envs/tf20/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/network.py in save(self, filepath, overwrite, include_optimizer, save_format, signatures, options)
1187     """
1188     saving.save_model(self, filepath, overwrite, include_optimizer, save_format,
-&gt; 1189                       signatures, options)
1190
1191   def save_weights(self, filepath, overwrite=True, save_format=None):
~/miniconda3/envs/tf20/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/save.py in save_model(model, filepath, overwrite, include_optimizer, save_format, signatures, options)
110           'or using save_weights.')
111     hdf5_format.save_model_to_hdf5(
--&gt; 112         model, filepath, overwrite, include_optimizer)
113   else:
114     saved_model_save.save(model, filepath, overwrite, include_optimizer,
~/miniconda3/envs/tf20/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/hdf5_format.py in save_model_to_hdf5(model, filepath, overwrite, include_optimizer)
107     model_weights_group = f.create_group('model_weights')
108     model_layers = model.layers
--&gt; 109     save_weights_to_hdf5_group(model_weights_group, model_layers)
110
111     # TODO(b/128683857): Add integration tests between tf.keras and external
~/miniconda3/envs/tf20/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/hdf5_format.py in save_weights_to_hdf5_group(f, layers)
623
624   for layer in layers:
--&gt; 625     g = f.create_group(layer.name)
626     weights = _legacy_weights(layer)
627     weight_values = K.batch_get_value(weights)
~/miniconda3/envs/tf20/lib/python3.6/site-packages/h5py/_hl/group.py in create_group(self, name, track_order)
66             name, lcpl = self._e(name, lcpl=True)
67             gcpl = Group._gcpl_crt_order if track_order else None
---&gt; 68             gid = h5g.create(self.id, name, lcpl=lcpl, gcpl=gcpl)
69             return Group(gid)
70
h5py/_objects.pyx in h5py._objects.with_phil.wrapper()
h5py/_objects.pyx in h5py._objects.with_phil.wrapper()
h5py/h5g.pyx in h5py.h5g.create()
ValueError: Unable to create group (name already exists)
	</description>
	<comments>
		<comment id='1' author='currivan' date='2019-09-20T06:47:15Z'>
		I was able to replicate the issue with given code for TF-2.0rc1, please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/oanush/8ee3a61919408dadf12499d2d95792ca/32672.ipynb&gt;gist&lt;/denchmark-link&gt;
 of colab.Thanks!
		</comment>
		<comment id='2' author='currivan' date='2019-09-20T21:03:14Z'>
		&lt;denchmark-link:https://github.com/currivan&gt;@currivan&lt;/denchmark-link&gt;
 I Don't see any issue if you remove the ".h5" from the . I changed only last line from your code as follows.
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
from tensorflow.keras.layers import Input
from tensorflow.keras import Model

a = Input(shape=(10,))
out = tf.tile(a, (1, tf.shape(a)[0]))
model = Model(a, out)

x = np.zeros((50,10), dtype=np.float32)
print(model(x).numpy())

model.save('./my_model')
&lt;/denchmark-code&gt;

Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/9348e139288b969517ed527334e5fb57/32672.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
I am closing this issue as it was resolved. Please feel free to open it if the issue persists again. Thanks!
		</comment>
		<comment id='3' author='currivan' date='2019-09-20T21:03:15Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=32672&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=32672&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='currivan' date='2019-09-23T14:55:14Z'>
		This should not have been closed. Throwing an exception here is a bug, and the solution is unacceptable. Saving this type of model with h5 takes a second, and the proposed way it takes over a minute. Loading is also unacceptably slow.
		</comment>
		<comment id='5' author='currivan' date='2019-09-23T21:10:27Z'>
		&lt;denchmark-link:https://github.com/currivan&gt;@currivan&lt;/denchmark-link&gt;
 In case If i need to use an op like  as in your case, I will call it with a lambda layer. So the code is as follows
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf
from tensorflow.keras.layers import Input, Lambda
from tensorflow.keras import Model

def my_fun(a):
  out = tf.tile(a, (1, tf.shape(a)[0]))
  return out

a = Input(shape=(10,))
#out = tf.tile(a, (1, tf.shape(a)[0]))
out = Lambda(lambda x : my_fun(x))(a)
model = Model(a, out)

x = np.zeros((50,10), dtype=np.float32)
print(model(x).numpy())

model.save('my_model.h5')

#load the model
new_model=tf.keras.models.load_model("my_model.h5")

&lt;/denchmark-code&gt;

Please let me know what you think? Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/56a985172d3b0702b1eb0b0b2d263761/tf32672.ipynb&gt;gist&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='6' author='currivan' date='2019-09-23T21:51:48Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
 thanks, I was also able to create a custom layer. In general I feel if a model can be executed, it should be savable by all standard methods without throwing an opaque exception. Someone should still fix the bug with saving op layers. "ValueError: Unable to create group (name already exists)" isn't the right way to handle this even if it's unsupported.
		</comment>
		<comment id='7' author='currivan' date='2019-09-23T22:14:57Z'>
		&lt;denchmark-link:https://github.com/currivan&gt;@currivan&lt;/denchmark-link&gt;
 I agree. May be we need to update the error description. Please note that fixing this is not simple.
&lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;
 Could you please take a look at this issue?
		</comment>
		<comment id='8' author='currivan' date='2019-09-30T17:39:53Z'>
		I believe that this is the same issue as &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/12195&gt;#12195&lt;/denchmark-link&gt;
.  When adding a  operation the keras model gets a  layer added  a  layer which I believe is what causes the problem.
		</comment>
		<comment id='9' author='currivan' date='2019-10-31T01:15:01Z'>
		&lt;denchmark-link:https://github.com/ELind77&gt;@ELind77&lt;/denchmark-link&gt;
 : &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/12195&gt;#12195&lt;/denchmark-link&gt;
 seems totally unrelated to this. Did you mean to link to a different issue?
&lt;denchmark-link:https://github.com/currivan&gt;@currivan&lt;/denchmark-link&gt;
 : One problem with using Lambda is that your layer won't have a proper shape defined in case following layers need that.
		</comment>
		<comment id='10' author='currivan' date='2020-02-04T21:21:32Z'>
		&lt;denchmark-link:https://github.com/currivan&gt;@currivan&lt;/denchmark-link&gt;
 I think this was resolved recently in . I ran it with  without any issue. Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/15f06ff402a678a77d0c47592a290701/32672.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
I am closing this issue as it was resolved. Please feel free to reopen. Thanks!
		</comment>
		<comment id='11' author='currivan' date='2020-02-04T21:21:34Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32672&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32672&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='12' author='currivan' date='2020-02-26T20:39:42Z'>
		I have a similar problem. I'm not using tf.tile, I have a custom layer which uses tf.concat, tf.map_fn, and tf.cast. The latest nightly (tf-nightly-2.2.0.dev20200226) seems to crash on my machine so I'm not able to test it fully.
The error message is the same (I found this issue by googling it).
		</comment>
		<comment id='13' author='currivan' date='2020-02-26T22:20:37Z'>
		&lt;denchmark-link:https://github.com/jsilter&gt;@jsilter&lt;/denchmark-link&gt;
 Can you please create  new issue with a standalone code to reproduce the issue? Thanks!
		</comment>
		<comment id='14' author='currivan' date='2020-03-18T20:17:22Z'>
		This issue is happening for me with tf.clip_by_value(). I haven't tested the nightly build.
		</comment>
	</comments>
</bug>