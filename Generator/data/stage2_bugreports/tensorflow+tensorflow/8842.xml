<bug id='8842' author='snarb' open_date='2017-03-30T15:19:54Z' closed_time='2017-04-04T17:46:08Z'>
	<summary>AttributeError: 'Tensor' object has no attribute 'get' at DynamicRnnEstimator.fit(...). The same code works well with LinearRegressor.</summary>
	<description>
TensorFlow version: 1.1
The code:
&lt;denchmark-code&gt;import random
import tensorflow as tf
from tensorflow.contrib.learn.python.learn.estimators import constants
from tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator import PredictionType

xData = []
yData = []
for _ in range(10000):
    x = random.random()
    xData.append(x)
    y = 2 * x
    yData.append(y)


xc = tf.contrib.layers.real_valued_column("")
estimator = tf.contrib.learn.DynamicRnnEstimator(problem_type = constants.ProblemType.LINEAR_REGRESSION,
                                                 prediction_type = PredictionType.SINGLE_VALUE,
                                                 sequence_feature_columns = [xc],
                                                 context_feature_columns = None,
                                                 num_units = 5,
                                                 cell_type = 'lstm', 
                                                 optimizer = 'SGD',
                                                 learning_rate = '0.1')

def get_train_inputs():
  x = tf.constant(xData)
  y = tf.constant(yData)

  return x, y

estimator.fit(input_fn=get_train_inputs, steps=1000) 
&lt;/denchmark-code&gt;


Got:  AttributeError: 'Tensor' object has no attribute 'get' here

The same code works for LinearRegressor instead of DynamicRnnEstimator.

WARNING:tensorflow:From E:\Python35\lib\site-packages\tensorflow\contrib\learn\python\learn\estimators\dynamic_rnn_estimator.py:724: regression_target (from tensorflow.contrib.layers.python.layers.target_column) is deprecated and will be removed after 2016-11-12.
Instructions for updating:
This file will be removed after the deprecation date.Please switch to third_party/tensorflow/contrib/learn/python/learn/estimators/head.py
WARNING:tensorflow:Using temporary folder as model directory: C:\Users\pavel\AppData\Local\Temp\tmpzy68t_iw
Traceback (most recent call last):
File "C:/Users/pavel/PycharmProjects/rnnEstimator/main.py", line 31, in 
estimator.fit(input_fn=get_train_inputs, steps=1000)
File "E:\Python35\lib\site-packages\tensorflow\python\util\deprecation.py", line 281, in new_func
return func(*args, **kwargs)
File "E:\Python35\lib\site-packages\tensorflow\contrib\learn\python\learn\estimators\estimator.py", line 430, in fit
loss = self._train_model(input_fn=input_fn, hooks=hooks)
File "E:\Python35\lib\site-packages\tensorflow\contrib\learn\python\learn\estimators\estimator.py", line 927, in _train_model
model_fn_ops = self._get_train_ops(features, labels)
File "E:\Python35\lib\site-packages\tensorflow\contrib\learn\python\learn\estimators\estimator.py", line 1132, in _get_train_ops
return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)
File "E:\Python35\lib\site-packages\tensorflow\contrib\learn\python\learn\estimators\estimator.py", line 1103, in _call_model_fn
model_fn_results = self._model_fn(features, labels, **kwargs)
File "E:\Python35\lib\site-packages\tensorflow\contrib\learn\python\learn\estimators\dynamic_rnn_estimator.py", line 516, in _dynamic_rnn_model_fn
sequence_length = features.get(sequence_length_key)
AttributeError: 'Tensor' object has no attribute 'get'

	</description>
	<comments>
		<comment id='1' author='snarb' date='2017-03-31T21:12:22Z'>
		&lt;denchmark-link:https://github.com/alextp&gt;@alextp&lt;/denchmark-link&gt;
, could you take a quick look.
		</comment>
		<comment id='2' author='snarb' date='2017-03-31T21:17:28Z'>
		Can I get a full stack trace?
		</comment>
		<comment id='3' author='snarb' date='2017-03-31T21:46:11Z'>
		Try changing the input function to
&lt;denchmark-code&gt;def get_train_inputs():
  x = tf.constant(xData)
  y = tf.constant(yData)

  return {'': x} , y
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='snarb' date='2017-04-01T10:45:54Z'>
		&lt;denchmark-link:https://github.com/alextp&gt;@alextp&lt;/denchmark-link&gt;
 Added original traceback.
&lt;denchmark-link:https://github.com/jamieas&gt;@jamieas&lt;/denchmark-link&gt;
  After I have added   i got error: _NotImplementedError: No deep embedding lookup arguments for column 
Traceback:

WARNING:tensorflow:From E:\Python35\lib\site-packages\tensorflow\contrib\learn\python\learn\estimators\dynamic_rnn_estimator.py:724: regression_target (from tensorflow.contrib.layers.python.layers.target_column) is deprecated and will be removed after 2016-11-12.
Instructions for updating:
This file will be removed after the deprecation date.Please switch to third_party/tensorflow/contrib/learn/python/learn/estimators/head.py
WARNING:tensorflow:Using temporary folder as model directory: C:\Users\pavel\AppData\Local\Temp\tmpndoa1_it
WARNING:tensorflow:sequence_input_from_feature_columns (from tensorflow.contrib.layers.python.layers.feature_column_ops) is experimental and may change or be removed at any time, and without warning.
Traceback (most recent call last):
File "E:\Python35\lib\site-packages\tensorflow\contrib\layers\python\layers\feature_column_ops.py", line 165, in _input_from_feature_columns
transformed_tensor)
File "E:\Python35\lib\site-packages\tensorflow\contrib\layers\python\layers\feature_column.py", line 239, in _deep_embedding_lookup_arguments
"No deep embedding lookup arguments for column {}.".format(self))
NotImplementedError: No deep embedding lookup arguments for column _RealValuedColumn(column_name='', dimension=1, default_value=None, dtype=tf.float32, normalizer=None).
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
File "E:\Python35\lib\site-packages\tensorflow\contrib\layers\python\layers\feature_column_ops.py", line 180, in _input_from_feature_columns
output_rank=output_rank))
File "E:\Python35\lib\site-packages\tensorflow\contrib\layers\python\layers\feature_column.py", line 1420, in _to_dnn_input_layer
return _reshape_real_valued_tensor(input_tensor, output_rank, self.name)
File "E:\Python35\lib\site-packages\tensorflow\contrib\layers\python\layers\feature_column.py", line 1333, in _reshape_real_valued_tensor
raise ValueError(error_string)
ValueError: Error while processing column .Rank of input Tensor (1) should be the same as output_rank (3). For example, sequence data should typically be 3 dimensional (rank 3) while non-sequence data is typically 2 dimensional (rank 2).
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
File "C:/Users/pavel/PycharmProjects/rnnEstimator/main.py", line 31, in 
estimator.fit(input_fn=get_train_inputs, steps=1000)
File "E:\Python35\lib\site-packages\tensorflow\python\util\deprecation.py", line 281, in new_func
return func(*args, **kwargs)
File "E:\Python35\lib\site-packages\tensorflow\contrib\learn\python\learn\estimators\estimator.py", line 430, in fit
loss = self._train_model(input_fn=input_fn, hooks=hooks)
File "E:\Python35\lib\site-packages\tensorflow\contrib\learn\python\learn\estimators\estimator.py", line 927, in _train_model
model_fn_ops = self._get_train_ops(features, labels)
File "E:\Python35\lib\site-packages\tensorflow\contrib\learn\python\learn\estimators\estimator.py", line 1132, in _get_train_ops
return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)
File "E:\Python35\lib\site-packages\tensorflow\contrib\learn\python\learn\estimators\estimator.py", line 1103, in _call_model_fn
model_fn_results = self._model_fn(features, labels, **kwargs)
File "E:\Python35\lib\site-packages\tensorflow\contrib\learn\python\learn\estimators\dynamic_rnn_estimator.py", line 519, in _dynamic_rnn_model_fn
context_feature_columns)
File "E:\Python35\lib\site-packages\tensorflow\contrib\learn\python\learn\estimators\dynamic_rnn_estimator.py", line 194, in build_sequence_input
scope=scope)
File "E:\Python35\lib\site-packages\tensorflow\contrib\framework\python\framework\experimental.py", line 64, in new_func
return func(*args, **kwargs)
File "E:\Python35\lib\site-packages\tensorflow\contrib\layers\python\layers\feature_column_ops.py", line 295, in sequence_input_from_feature_columns
default_name='sequence_input_from_feature_columns')
File "E:\Python35\lib\site-packages\tensorflow\contrib\layers\python\layers\feature_column_ops.py", line 183, in _input_from_feature_columns
'{}, {}'.format(column.name, e, ee))
ValueError: Error creating input layer for column: .
Error while processing column .Rank of input Tensor (1) should be the same as output_rank (3). For example, sequence data should typically be 3 dimensional (rank 3) while non-sequence data is typically 2 dimensional (rank 2)., No deep embedding lookup arguments for column _RealValuedColumn(column_name='', dimension=1, default_value=None, dtype=tf.float32, normalizer=None).

		</comment>
		<comment id='5' author='snarb' date='2017-04-03T13:36:22Z'>
		The relevant part of that trace is

Error while processing column .Rank of input Tensor (1) should be the same as output_rank (3). For example, sequence data should typically be 3 dimensional (rank 3) while non-sequence data is typically 2 dimensional (rank 2).

Sequence input should generally have rank 3, where the first two dimensions are batch size and sequence length. In the following example, the (not very useful) Estimator learns to predict the mean of a sequence:
BATCH_SIZE = 32
SEQUENCE_LENGTH = 16
    

xc = tf.contrib.layers.real_valued_column("")
estimator = tf.contrib.learn.DynamicRnnEstimator(problem_type = constants.ProblemType.LINEAR_REGRESSION,
                                                 prediction_type = PredictionType.SINGLE_VALUE,
                                                 sequence_feature_columns = [xc],
                                                 context_feature_columns = None,
                                                 num_units = 5,
                                                 cell_type = 'lstm', 
                                                 optimizer = 'SGD',
                                                 learning_rate = 0.1)

def get_train_inputs():
  x = tf.random_uniform([BATCH_SIZE, SEQUENCE_LENGTH])
  y = tf.reduce_mean(x, axis=1)
  x = tf.expand_dims(x, axis=2)
  return {"": x}, y

estimator.fit(input_fn=get_train_inputs, steps=1000)
		</comment>
		<comment id='6' author='snarb' date='2017-04-04T11:12:45Z'>
		Thank you &lt;denchmark-link:https://github.com/jamieas&gt;@jamieas&lt;/denchmark-link&gt;
 it works! Now it is clear.
My personal opinion that It would be great if contrib.learn(as a high-level wrapper) will be a little more user-friendly with ranks and dimensions. Maybe some entity like DataAdapter that will take some set of common params as inputs like BATCH_SIZE, SEQUENCE_LENGTH, raw data input (not tensors) and will form appropriate output for  the estimator. IMHO. Thank you for your help!
		</comment>
	</comments>
</bug>