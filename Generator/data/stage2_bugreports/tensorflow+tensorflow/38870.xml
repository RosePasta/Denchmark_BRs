<bug id='38870' author='ngc92' open_date='2020-04-24T14:02:33Z' closed_time='2020-04-27T17:10:42Z'>
	<summary>Gradients for tf.py_function with mixed arguments</summary>
	<description>
System information

Have I written custom code: yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Mint 19.3
TensorFlow installed from (source or binary): conda binary
TensorFlow version (use command below): 2.1
Python version: 3.7

Describe the current behavior
gradient calculation throws an error if a py_function is used that has both integer and floating point inputs/outputs.
Describe the expected behavior
Gradients with respect to all integers should be zero/None, and others should be correctly calculated.
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf

def pf(x, y):
    return x ** 2, y ** 2

def pyf(x, y):
    return tf.py_function(pf, [x, y], [tf.int32, tf.float32])

x = tf.constant(5)
v = tf.Variable(0.5)
with tf.GradientTape() as tape:
    y, m = pyf(x, v)
    z = tf.cast(y, tf.float32) * m

print(tape.gradient(z, v))
&lt;/denchmark-code&gt;

When calling pf, gradient computation works, but for pyf we get first a warning and then an error.
The problematic code seems to be in script_ops.py:
&lt;denchmark-code&gt;@ops.RegisterGradient("EagerPyFunc")
def _EagerPyFuncGrad(op, *dy):
  """Computes the gradient of an EagerPyFunc."""

  token = op.get_attr("token")

  def eagerly_executed_grad(*dy):
    tape, eager_inputs, eager_outputs = tape_cache.pop(compat.as_bytes(token))
    return tape.gradient(eager_outputs, eager_inputs, output_gradients=dy)

  with ops.control_dependencies(op.outputs):
    return _internal_py_func(
        func=eagerly_executed_grad,
        inp=dy,
        Tout=[tensor.dtype for tensor in op.inputs],
        eager=True,
        is_grad_func=True)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ngc92' date='2020-04-27T05:30:07Z'>
		&lt;denchmark-link:https://github.com/ngc92&gt;@ngc92&lt;/denchmark-link&gt;

i ran your code in nightly and do not face any error, please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/9ef6582d4190888740409bc944dae316/38870.ipynb&gt;gist here&lt;/denchmark-link&gt;

the error faced in 2.1 is as per &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/cbed748edb5e596abacd846dfcc28b32/untitled155.ipynb&gt;this gist&lt;/denchmark-link&gt;
, can you please confirm.
		</comment>
		<comment id='2' author='ngc92' date='2020-04-27T07:51:50Z'>
		yes, this is the expected error. This is strange, because as far as I can see the code for def _EagerPyFuncGrad has not been changed. Do you know if there is already a test case for this behaviour?
Edit: I also tried with 2.2rc3, there the error still seems to exist.
		</comment>
		<comment id='3' author='ngc92' date='2020-04-27T17:10:40Z'>
		if it doesn't reproduce in nightly let's close the issue
		</comment>
		<comment id='4' author='ngc92' date='2020-04-27T17:10:43Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38870&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38870&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='ngc92' date='2020-04-27T17:24:27Z'>
		does a test case for this behaviour already exist?
		</comment>
		<comment id='6' author='ngc92' date='2020-07-06T23:17:13Z'>
		I see a similar issue, also using a pyfunc and get the error message "Tensor is unhashable. Instead, use tensor.ref() as the key". It seems to be raised also from within "script_ops.py:363 _EagerPyFuncGrad". I don't have code to reproduce the issue. I'm using tf 2.2.0 on Ubuntu Linux.
		</comment>
	</comments>
</bug>