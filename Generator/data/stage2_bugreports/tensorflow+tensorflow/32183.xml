<bug id='32183' author='git-davi' open_date='2019-09-03T17:19:00Z' closed_time='2019-09-04T17:10:06Z'>
	<summary>Build tflite-with-select-ops.aar for running on emulator (tf v1.14)</summary>
	<description>
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04
TensorFlow installed from (source or binary): source
TensorFlow version: 1.14.0
Python version: 3.6
Bazel version (if compiling from source): 0.24.1
GCC/Compiler version (if compiling from source): 7.4.0

Describe the problem
First of all I tried to build the tflite-with-select-ops.aar lib using this command :
&lt;denchmark-code&gt;bazel build --cxxopt='--std=c++11' \
            -c opt \
            --config=android_arm \
            --config=monolithic \
            --jobs=1 \
            //tensorflow/lite/java:tensorflow-lite-with-select-tf-ops  
&lt;/denchmark-code&gt;

Build was successful , but then inside the emulator i was encountering this ERROR:
java.lang.UnsatisfiedLinkError: No implementation found for long org.tensorflow.lite.NativeInterpreterWrapper.createErrorReporter(int) (tried Java_org_tensorflow_lite_NativeInterpreterWrapper_createErrorReporter and Java_org_tensorflow_lite_NativeInterpreterWrapper_createErrorReporter__I)
I guess that this is due to the not arm architecture of emulator (x86, x86_64).
So I tried this builld command :
&lt;denchmark-code&gt;bazel build --cxxopt='--std=c++11' \
            -c opt \
            --fat_apk_cpu=x86,x86_64,arm64-v8a,armeabi-v7a \
            --config=monolithic \
            --jobs=1 \
            //tensorflow/lite/java:tensorflow-lite-with-select-tf-ops
&lt;/denchmark-code&gt;

(also tried without monolithic argument, both cases failed to build)
This was the error i got (with and without monolithic arg) :
&lt;denchmark-code&gt;ERROR: /home/dav/Desktop/tensorflow-1.14.0/tensorflow/core/BUILD:1856:1: C++ compilation of rule '//tensorflow/core:android_tensorflow_lib_lite' failed (Exit 1)
In file included from tensorflow/core/lib/core/threadpool.cc:26:
In file included from ./tensorflow/core/platform/setround.h:19:
external/androidndk/ndk/sources/cxx-stl/llvm-libc++/include/cfenv:68:9: error: no member named 'feclearexcept' in the global namespace
using ::feclearexcept;
      ~~^
external/androidndk/ndk/sources/cxx-stl/llvm-libc++/include/cfenv:69:9: error: no member named 'fegetexceptflag' in the global namespace
using ::fegetexceptflag;
      ~~^
external/androidndk/ndk/sources/cxx-stl/llvm-libc++/include/cfenv:70:9: error: no member named 'feraiseexcept' in the global namespace
using ::feraiseexcept;
      ~~^
external/androidndk/ndk/sources/cxx-stl/llvm-libc++/include/cfenv:71:9: error: no member named 'fesetexceptflag' in the global namespace
using ::fesetexceptflag;
      ~~^
external/androidndk/ndk/sources/cxx-stl/llvm-libc++/include/cfenv:72:9: error: no member named 'fetestexcept' in the global namespace
using ::fetestexcept;
      ~~^
external/androidndk/ndk/sources/cxx-stl/llvm-libc++/include/cfenv:73:9: error: no member named 'fegetround' in the global namespace
using ::fegetround;
      ~~^
external/androidndk/ndk/sources/cxx-stl/llvm-libc++/include/cfenv:74:9: error: no member named 'fesetround' in the global namespace
using ::fesetround;
      ~~^
external/androidndk/ndk/sources/cxx-stl/llvm-libc++/include/cfenv:75:9: error: no member named 'fegetenv' in the global namespace; did you mean 'getenv'?
using ::fegetenv;
      ~~^
external/androidndk/ndk/sysroot/usr/include/stdlib.h:61:7: note: 'getenv' declared here
char* getenv(const char* __name);
      ^
In file included from tensorflow/core/lib/core/threadpool.cc:26:
In file included from ./tensorflow/core/platform/setround.h:19:
external/androidndk/ndk/sources/cxx-stl/llvm-libc++/include/cfenv:76:9: error: no member named 'feholdexcept' in the global namespace
using ::feholdexcept;
      ~~^
external/androidndk/ndk/sources/cxx-stl/llvm-libc++/include/cfenv:77:9: error: no member named 'fesetenv' in the global namespace
using ::fesetenv;
      ~~^
external/androidndk/ndk/sources/cxx-stl/llvm-libc++/include/cfenv:78:9: error: no member named 'feupdateenv' in the global namespace
using ::feupdateenv;
      ~~^
11 errors generated.
&lt;/denchmark-code&gt;

Additional Info
WORKSPACE:
&lt;denchmark-code&gt;build --action_env ANDROID_NDK_HOME="/home/dav/Android/Sdk/ndk/18"
build --action_env ANDROID_NDK_API_LEVEL="18"
build --action_env ANDROID_BUILD_TOOLS_VERSION="29.0.2"
build --action_env ANDROID_SDK_API_LEVEL="23"
build --action_env ANDROID_SDK_HOME="/home/dav/Android/Sdk"
&lt;/denchmark-code&gt;

Any help would be really appreciated!!
	</description>
	<comments>
		<comment id='1' author='git-davi' date='2019-09-04T17:10:06Z'>
		Can you try building with NDK r17c? That is the version we've been using for our stable releases.
		</comment>
		<comment id='2' author='git-davi' date='2019-09-04T17:10:07Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=32183&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=32183&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='git-davi' date='2019-09-05T11:57:08Z'>
		The build has done many more steps, and the previous problem has been resolver üëç but now gets stuck with :
&lt;denchmark-code&gt;ERROR: /home/dav/Desktop/tensorflow-1.14.0/tensorflow/core/kernels/BUILD:6305:1: Linking of rule '//tensorflow/core/kernels:android_tensorflow_kernels' failed (Exit 1)
Target //tensorflow/lite/java:tensorflow-lite-with-select-tf-ops failed to build
Use --verbose_failures to see the command lines of failed build steps.
INFO: Elapsed time: 15406.345s, Critical Path: 213.49s
INFO: 5208 processes: 5197 local, 11 worker.
FAILED: Build did NOT complete successfully
&lt;/denchmark-code&gt;

new WORKSPACE :
&lt;denchmark-code&gt;build --action_env ANDROID_NDK_HOME="/home/dav/Android/Sdk/ndk/17"
build --action_env ANDROID_NDK_API_LEVEL="18"
build --action_env ANDROID_BUILD_TOOLS_VERSION="29.0.2"
build --action_env ANDROID_SDK_API_LEVEL="23"
build --action_env ANDROID_SDK_HOME="/home/dav/Android/Sdk"
&lt;/denchmark-code&gt;

Should also ANDROID_NDK_API_LEVEL be 17?
		</comment>
		<comment id='4' author='git-davi' date='2019-09-05T15:32:54Z'>
		
ERROR: /home/dav/Desktop/tensorflow-1.14.0/tensorflow/core/kernels/BUILD:6305:1: Linking of rule '//tensorflow/core/kernels:android_tensorflow_kernels' failed (Exit 1)

Is that the only error? No other failure message(s)? You might try setting the NDK_API_LEVEL to 17, though I don't think that should be necessary. You might also try 19.
		</comment>
		<comment id='5' author='git-davi' date='2019-09-10T17:05:51Z'>
		Update
Found this &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/20192&gt;#20192&lt;/denchmark-link&gt;

The first error was fixed and the build was successful with this workspace:
&lt;denchmark-code&gt;build --action_env ANDROID_NDK_HOME="/home/dav/Android/Sdk/ndk/17"
build --action_env ANDROID_NDK_API_LEVEL="21"
build --action_env ANDROID_BUILD_TOOLS_VERSION="29.0.2"
build --action_env ANDROID_SDK_API_LEVEL="23"
build --action_env ANDROID_SDK_HOME="/home/dav/Android/Sdk"
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='git-davi' date='2020-04-20T06:40:57Z'>
		&lt;denchmark-link:https://github.com/git-davi&gt;@git-davi&lt;/denchmark-link&gt;
 were you able to build the tflite with select-ops ? if so, would you be kind enough to share the aar file?
		</comment>
		<comment id='7' author='git-davi' date='2020-04-20T13:31:23Z'>
		Hi, &lt;denchmark-link:https://github.com/bmabir17&gt;@bmabir17&lt;/denchmark-link&gt;
 !
Well, Yes but actually no!
I choosed to debug the app directly from my android device instead from emulator, so I compiled only for arm architecture.
Here's the file 
&lt;denchmark-link:https://drive.google.com/open?id=1021SAVsnh7879-Mj45uXOAgfruaFH2rB&gt;https://drive.google.com/open?id=1021SAVsnh7879-Mj45uXOAgfruaFH2rB&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='git-davi' date='2020-04-20T18:04:48Z'>
		&lt;denchmark-link:https://github.com/git-davi&gt;@git-davi&lt;/denchmark-link&gt;
 Thank you so much!! I was actually looking for the arm version rather than the emulator one.
If i may bother you with one more query.
My model contains , , and   tf_ops. will this tf_lite build be able to run inference with this model?
I have converted this model using  python api [&lt;denchmark-link:https://gist.github.com/bmabir17/754a6e0450ec4fd5e25e462af949cde6#file-convert-py-L72&gt;code&lt;/denchmark-link&gt;
]
like the following

		</comment>
		<comment id='9' author='git-davi' date='2020-04-20T18:54:13Z'>
		I will be honest, a lot of time has passed and I don't remember but with this prebuilt package I'm pretty sure that you can go with every tflite model!
		</comment>
		<comment id='10' author='git-davi' date='2020-04-20T18:59:19Z'>
		Thank you again for the help!! üòÑ
		</comment>
		<comment id='11' author='git-davi' date='2020-04-21T12:42:48Z'>
		You are welcome,
if my aar wont work try to compile like this :
converter.target_ops = [tf.lite.OpsSet.SELECT_TF_OPS]
		</comment>
	</comments>
</bug>