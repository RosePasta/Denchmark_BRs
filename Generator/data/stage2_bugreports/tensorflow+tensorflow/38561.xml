<bug id='38561' author='zaccharieramzi' open_date='2020-04-15T05:32:44Z' closed_time='2020-05-18T04:23:51Z'>
	<summary>Unwanted tf.function retracing when using variable-length inputs</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock
example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04
TensorFlow installed from (source or binary): pip
TensorFlow version (use command below): 2.2.0rc2
Python version: 3.6.8

Describe the current behavior
A lot of warnings saying that there is a tf.function retracing are happening when using a keras model in a loop with variable length inputs.
Describe the expected behavior
I would like not to have retracing if there is no need (for example a fully convolutionnal model).
Standalone code to reproduce the issue
from random import randint

import tensorflow as tf
from tensorflow.keras.layers import Conv1D
from tensorflow.keras.models import Sequential

model = Sequential()
model.add(Conv1D(8, 3))
model.build([None, 12, 1])

predict_tensors = [
    tf.random.normal([randint(1, 8), randint(4, 40), 1])
    for _ in range(10)
]
for t in predict_tensors:
    _ = model.predict(t)
Other info / logs
Logs:
&lt;denchmark-code&gt;WARNING: Logging before flag parsing goes to stderr.
W0406 09:22:52.525994 139643050075904 def_function.py:598] 5 out of the last 6 calls to &lt;function Model.make_predict_function.&lt;locals&gt;.predict_function at 0x7f00a7fc1268&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.
W0406 09:22:52.615050 139643050075904 def_function.py:598] 6 out of the last 7 calls to &lt;function Model.make_predict_function.&lt;locals&gt;.predict_function at 0x7f00a7fc1268&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.
W0406 09:22:52.653312 139643050075904 def_function.py:598] 7 out of the last 8 calls to &lt;function Model.make_predict_function.&lt;locals&gt;.predict_function at 0x7f00a7fc1268&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.
W0406 09:22:52.706550 139643050075904 def_function.py:598] 8 out of the last 10 calls to &lt;function Model.make_predict_function.&lt;locals&gt;.predict_function at 0x7f00a7fc1268&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.
&lt;/denchmark-code&gt;

This issue was originally described &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34025#issuecomment-609612284&gt;here&lt;/denchmark-link&gt;
, and some other people have had trouble with &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34025#issuecomment-609186763&gt;training as well&lt;/denchmark-link&gt;
.
When switching back to 2.1, the problem is gone.
	</description>
	<comments>
		<comment id='1' author='zaccharieramzi' date='2020-04-15T06:53:00Z'>
		As per my understanding, if the input tensor's shape or dtype changes(if it is not constant) then the function would get retraced again.
You may refer this &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/function&gt;https://www.tensorflow.org/api_docs/python/tf/function&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='zaccharieramzi' date='2020-04-15T07:00:35Z'>
		Yes this is totally true, but I am not using tf.function myself directly. Maybe keras is under the hood, but in any case they should handle inputs with varying shapes (but same rank and "compatible" shapes) better by for example specifying a dynamic input signature (see Inputs signatures in the doc).
Moreover, the behaviour I am describing is for version 2.2.0rc2, and the doc is still for 2.1 where there is no issue.
		</comment>
		<comment id='3' author='zaccharieramzi' date='2020-04-15T08:23:41Z'>
		You can see the current doc here:
&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/function?version=nightly&gt;https://www.tensorflow.org/api_docs/python/tf/function?version=nightly&lt;/denchmark-link&gt;

I think the option you need should be .
As a workaround, you could try to wrap the keras model in an explicit tf.function call, like this
&lt;denchmark-code&gt;@tf.function(experimental_relax_shapes=True)
def predict(x):
     return model.predict(x)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='zaccharieramzi' date='2020-04-15T08:45:21Z'>
		
Yes this is totally true, but I am not using tf.function myself directly. Maybe keras is under the hood, but in any case they should handle inputs with varying shapes (but same rank and "compatible" shapes) better by for example specifying a dynamic input signature (see Inputs signatures in the doc).
Moreover, the behaviour I am describing is for version 2.2.0rc2, and the doc is still for 2.1 where there is no issue.

Following is the ouput of tf 2.1.0, seems output is the same
&lt;denchmark-code&gt;/usr/local/bin/python3.7 /Users/gurushant/PycharmProjects/MTCNN/test6.py
2020-04-15 14:12:33.527382: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2020-04-15 14:12:33.545554: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x7fa56ad8c050 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2020-04-15 14:12:33.545588: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
WARNING:tensorflow:5 out of the last 5 calls to &lt;function _make_execution_function.&lt;locals&gt;.distributed_function at 0x134d83290&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.
WARNING:tensorflow:6 out of the last 6 calls to &lt;function _make_execution_function.&lt;locals&gt;.distributed_function at 0x134d83290&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.
WARNING:tensorflow:7 out of the last 7 calls to &lt;function _make_execution_function.&lt;locals&gt;.distributed_function at 0x134d83290&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.
WARNING:tensorflow:8 out of the last 8 calls to &lt;function _make_execution_function.&lt;locals&gt;.distributed_function at 0x134d83290&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.
WARNING:tensorflow:9 out of the last 9 calls to &lt;function _make_execution_function.&lt;locals&gt;.distributed_function at 0x134d83290&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='zaccharieramzi' date='2020-04-15T08:59:00Z'>
		&lt;denchmark-link:https://github.com/gurushantj&gt;@gurushantj&lt;/denchmark-link&gt;
 yes you are right. I don't know why I thought this was in 2.1, it's actually in 2.0 that the problem is gone.
Still, the documentation regarding the re-tracing is about the same.
&lt;denchmark-link:https://github.com/ngc92&gt;@ngc92&lt;/denchmark-link&gt;
 I tried your workaround but got the following error:
&lt;denchmark-code&gt;ValueError: When using data tensors as input to a model, you should specify the `steps` argument.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='zaccharieramzi' date='2020-04-15T10:48:32Z'>
		
@gurushantj yes you are right. I don't know why I thought this was in 2.1, it's actually in 2.0 that the problem is gone.
Still, the documentation regarding the re-tracing is about the same.
@ngc92 I tried your workaround but got the following error:
ValueError: When using data tensors as input to a model, you should specify the `steps` argument.


Could you please validate following and let me know :
Disable eager execution setting
&lt;denchmark-code&gt;tf.compat.v1.disable_eager_execution()
&lt;/denchmark-code&gt;

and pass steps=1  in model.predict and validate
		</comment>
		<comment id='7' author='zaccharieramzi' date='2020-04-15T12:49:19Z'>
		Was able to reproduce the issue with &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/bacd69c72e28f03ebfc6221d8d8fe1fc/38561.ipynb&gt;TF v2.1&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/cda0a10a833f90ebffe9f5f42e2220aa/38561-2-2.ipynb&gt;TF v2.2.0rc3&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/bac1fe12525a0a1511adc75c308695d7/38561-tf-nightly.ipynb#scrollTo=gx2su05ORucx&gt;TF-nightly&lt;/denchmark-link&gt;
. Please find the attached gist. Thanks!
		</comment>
		<comment id='8' author='zaccharieramzi' date='2020-04-15T12:53:13Z'>
		&lt;denchmark-link:https://github.com/zaccharieramzi&gt;@zaccharieramzi&lt;/denchmark-link&gt;
,
Could you please check &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34907#issuecomment-564312261&gt;this comment&lt;/denchmark-link&gt;
 from a similar issue and let us know if it works? Thanks!
		</comment>
		<comment id='9' author='zaccharieramzi' date='2020-04-15T13:33:49Z'>
		&lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
 I am not sure what I am supposed to see in that comment. The issue you linked suggests that this should be dealt with.
		</comment>
		<comment id='10' author='zaccharieramzi' date='2020-04-15T13:35:44Z'>
		&lt;denchmark-link:https://github.com/ngc92&gt;@ngc92&lt;/denchmark-link&gt;
 still got an error: .
		</comment>
		<comment id='11' author='zaccharieramzi' date='2020-04-15T19:07:47Z'>
		Is this what you want to do?
&lt;denchmark-code&gt;@tf.function(experimental_relax_shapes=True)
def predict(t):
    return model(t)

for t in predict_tensors:
    _ = predict(t)
&lt;/denchmark-code&gt;

Note that you are no longer using any features of the model.predict function, but since you seem to be looping over examples by hand that might be OK.
Also, in tf 2.2 there is support for custom model.predict_function, i.e. you might be able to do something like
&lt;denchmark-code&gt;model.predict_function = tf.function(experimental_relax_shapes=True)(model.predict_function)
&lt;/denchmark-code&gt;

i.e. just wrapping the default provided function in something that relaxes shapes.
I haven't tried 2.2 yet, so I'm not very sure about the second suggestion.
		</comment>
		<comment id='12' author='zaccharieramzi' date='2020-04-16T09:10:11Z'>
		&lt;denchmark-link:https://github.com/ngc92&gt;@ngc92&lt;/denchmark-link&gt;
 yes this is a fair workaround. However there are cases where you would want to use  for the callbacks or the batch size.
The second option you provided didn't work straight out of the box, but you can try things in tf 2.2 in colab: &lt;denchmark-link:https://colab.research.google.com/drive/1MfRPQyRhjrF7he7fymoIEG7k64YCd0Da&gt;https://colab.research.google.com/drive/1MfRPQyRhjrF7he7fymoIEG7k64YCd0Da&lt;/denchmark-link&gt;

You will notice that in the case of evaluate and I guess train if you feed the variable-length input through a tf dataset, it doesn't retrace the function, suggesting a bug somewhere.
		</comment>
		<comment id='13' author='zaccharieramzi' date='2020-04-19T01:24:49Z'>
		We're investigating - it seems that a newly-added warning about function retracing seems to fire more than expected.
		</comment>
		<comment id='14' author='zaccharieramzi' date='2020-04-20T18:56:53Z'>
		The error message is not new one so this seems from the existing retracing detection logic.  I think the warning is WAI as it's tracing many times here.  Perhaps Keras using experimental_relax_shapes is an option?
		</comment>
		<comment id='15' author='zaccharieramzi' date='2020-04-20T19:13:20Z'>
		&lt;denchmark-link:https://github.com/omalleyt12&gt;@omalleyt12&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/fchollet&gt;@fchollet&lt;/denchmark-link&gt;

		</comment>
		<comment id='16' author='zaccharieramzi' date='2020-05-08T13:19:09Z'>
		&lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 do you have any news on this?
		</comment>
		<comment id='17' author='zaccharieramzi' date='2020-05-08T14:24:43Z'>
		&lt;denchmark-link:https://github.com/zaccharieramzi&gt;@zaccharieramzi&lt;/denchmark-link&gt;
 No fix yet. According to the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/2f2d1a3a2f4e154017c4ab1aff0a18473ecaa494/tensorflow/python/keras/engine/training.py#L1213&gt;code&lt;/denchmark-link&gt;
 the function that the warning talks about should be cached and only traced once.
&lt;denchmark-link:https://github.com/omalleyt12&gt;@omalleyt12&lt;/denchmark-link&gt;
 any thoughts why the tracing happens so many times?
		</comment>
		<comment id='18' author='zaccharieramzi' date='2020-05-08T18:04:35Z'>
		&lt;denchmark-link:https://github.com/mdanatg&gt;@mdanatg&lt;/denchmark-link&gt;
 ok too bad, I just have one question though maybe you have the answer.
Do you know if the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/38561#issuecomment-614225366&gt;fix provided&lt;/denchmark-link&gt;
 by &lt;denchmark-link:https://github.com/ngc92&gt;@ngc92&lt;/denchmark-link&gt;
 , i.e.:
@tf.function(experimental_relax_shapes=True)
def predict(t):
    return model(t)

for t in predict_tensors:
    _ = predict(t)
still allows predict to benefit from a distribution strategy (typically MirroredStrategy)? My guess is that not but I am not sure, and not sure how to test this on a single GPU (2 logical GPUs).
		</comment>
		<comment id='19' author='zaccharieramzi' date='2020-05-08T18:29:43Z'>
		&lt;denchmark-link:https://github.com/guptapriya&gt;@guptapriya&lt;/denchmark-link&gt;

		</comment>
		<comment id='20' author='zaccharieramzi' date='2020-05-18T04:23:51Z'>
		&lt;denchmark-link:https://github.com/zaccharieramzi&gt;@zaccharieramzi&lt;/denchmark-link&gt;
 Thanks for the issue! This should be fixed in the latest nightly
		</comment>
		<comment id='21' author='zaccharieramzi' date='2020-05-18T04:23:53Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38561&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38561&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='22' author='zaccharieramzi' date='2020-05-28T09:53:13Z'>
		&lt;denchmark-link:https://github.com/omalleyt12&gt;@omalleyt12&lt;/denchmark-link&gt;
 thanks ! One question I didn't ask though is: was this bug slowing down anything or I am just getting annoyed with an unwanted warning?
		</comment>
		<comment id='23' author='zaccharieramzi' date='2020-08-14T01:32:35Z'>
		TF 2.3 still have this issue.
		</comment>
	</comments>
</bug>