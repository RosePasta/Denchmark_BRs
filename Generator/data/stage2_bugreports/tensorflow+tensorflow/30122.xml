<bug id='30122' author='fnand' open_date='2019-06-25T14:06:50Z' closed_time='2019-07-25T21:34:04Z'>
	<summary>Getting validation steps from dict breaks keras fit TF 2.0.0-beta1</summary>
	<description>
System information

TensorFlow installed from: pip
TensorFlow version: 2.0.0-beta1
Python version: 3.6

Describe the current behavior
When calling fit on a Keras model in 2.0.0-beta1 a  KeyError: 0 is thrown when trying to call fit with validation_data given as a dict (this worked in the alpha)
e.g.
&lt;denchmark-code&gt;mymodel.fit(x = {'input_0' : train_data_type_0, 'input_1':  train_data_type_1}, y = train_labels, 
         validation_data = ({'input_0' : val_data_type_0, 'input_1':  val_data_type_1}, val_labels) )
&lt;/denchmark-code&gt;

The issue seems to have been introduced &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/25380986954692d947bd230e4f5d3a2d11dd3064&gt;here&lt;/denchmark-link&gt;
, as the line:

assumes an array will be found and fails for dicts.
Describe the expected behaviour
val_inputs: Either a list or dictionary of arrays, or a dataset instance.
	</description>
	<comments>
		<comment id='1' author='fnand' date='2019-06-26T10:21:04Z'>
		Please provide us complete code to reproduce the issue.Thanks
		</comment>
		<comment id='2' author='fnand' date='2019-06-26T13:52:56Z'>
		The following is sufficient to reproduce the issue:
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf

print(tf.__version__)

train_input_0 = np.random.rand(1000, 1)
train_input_1 = np.random.rand(1000, 1)
train_labels  = np.random.rand(1000, 1)

val_input_0 = np.random.rand(1000, 1)
val_input_1 = np.random.rand(1000, 1)
val_labels  = np.random.rand(1000, 1)

input_0 = tf.keras.Input(shape=(None,), name='input_0')
input_1 = tf.keras.Input(shape=(None,), name='input_1')

class my_model(tf.keras.Model):
    def __init__(self):
        super(my_model, self).__init__(self)
        self.hidden_layer_0 = tf.keras.layers.Dense(100, activation=tf.nn.relu)
        self.hidden_layer_1 = tf.keras.layers.Dense(100, activation=tf.nn.relu)
        self.concat         = tf.keras.layers.Concatenate()

        self.out_layer    = tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)

    def call(self, inputs =  [input_0, input_1]):
        activation_0 = self.hidden_layer_0(inputs['input_0'])
        activation_1 = self.hidden_layer_1(inputs['input_1'])
        concat       = self.concat([activation_0, activation_1])
      
        return self.out_layer(concat)

model = my_model()
opt = tf.optimizers.Adam()
loss = tf.keras.losses.MeanAbsoluteError()
model.compile(opt, loss)

model.fit(x = {'input_0' : train_input_0, 'input_1':  train_input_1}, y = train_labels, 
         validation_data = ({'input_0' : val_input_0, 'input_1':  val_input_1}, val_labels) )
&lt;/denchmark-code&gt;

This runs with 2.0.0-alpha0, but fails with 2.0.0-beta1
		</comment>
		<comment id='3' author='fnand' date='2019-06-27T08:34:19Z'>
		I am able to reproduce the issue in Colab ,works with  TF 2.0.0-alpha0, and fails with 2.0.0-beta1.Thanks!
		</comment>
		<comment id='4' author='fnand' date='2019-06-30T10:50:34Z'>
		Added a PR &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/30258&gt;#30258&lt;/denchmark-link&gt;
 for the fix.
		</comment>
		<comment id='5' author='fnand' date='2019-07-25T21:34:06Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=30122&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=30122&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>