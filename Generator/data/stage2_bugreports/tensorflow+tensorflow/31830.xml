<bug id='31830' author='dsmic' open_date='2019-08-21T08:34:57Z' closed_time='2020-04-03T12:49:25Z'>
	<summary>fit_generator: number of calls to the validation generator does not match validation_steps</summary>
	<description>
Installed: pip install tf-nightly-2.0-preview
in a clean environment. Same bug was in tf 1.14 and 2.0-beta1
The validation generator is called more often than validation_steps in tensorflow.keras.Model.fit_generator(). If one adds workers=0 as a call parameter everything is correct.
I tracked down the issue to starting the threads (parameter max_queue_size changes the number of calls before the calls seem to be used for validation).
Reproduce the bug:
&lt;denchmark-code&gt;from tensorflow.keras.layers import Dense, Input
from tensorflow.keras.models import Model
import numpy as np

train_epoch_size = 10
test_epoch_size = 20

class KerasBatchGenerator(object):
    def generate(self, phase='train'):
        while True:
            if phase == 'train':
                for i in range(train_epoch_size):
                    yield [np.array([0])],[np.array([0])]
            else:
                for i in range(test_epoch_size):
                    print('   i',i)
                    yield [np.array([0])],[np.array([0])]

keras_gen_train = KerasBatchGenerator()

inputs = Input(shape=(1,))
x = Dense(1)(inputs)

model = Model(inputs=inputs, outputs=x)

model.compile(loss='mean_squared_error', optimizer='SGD')
print(model.summary())

model.fit_generator(keras_gen_train.generate(), train_epoch_size, 2,
                           validation_data=keras_gen_train.generate('test'), validation_steps=test_epoch_size)#, workers = 0)
&lt;/denchmark-code&gt;

the output is
&lt;denchmark-code&gt;1/10 [==&gt;...........................] - ETA: 1s - loss: 0.0000e+00   i 0
  i 1
  i 2
  i 3
  i 4
  i 5
  i 6
  i 7
  i 8
  i 9
  i 10
  i 11
  i 12
  i 13
  i 14
  i 15
  i 16
  i 17
  i 18
  i 19
  i 0
  i 1
  i 2
  i 3
  i 4
  i 5
  i 6
  i 7
  i 8
  i 9
  i 10
10/10 [==============================] - 0s 19ms/step - loss: 0.0000e+00 - val_loss: 0.0000e+00
&lt;/denchmark-code&gt;

There are 31 calls to the validation generator (validation_steps + max_queue_size + 1). This might usually be no problem, but it is, if you have to control which validation data match which training data. I use it for transfer learning.
if you uncomment: ,workers=0) you get the expected result:
&lt;denchmark-code&gt;1/10 [==&gt;...........................] - ETA: 1s - loss: 0.0000e+00   i 0
  i 1
  i 2
  i 3
  i 4
  i 5
  i 6
  i 7
  i 8
  i 9
  i 10
  i 11
  i 12
  i 13
  i 14
  i 15
  i 16
  i 17
  i 18
  i 19
10/10 [==============================] - 0s 16ms/step - loss: 0.0000e+00 - val_loss: 0.0000e+00
&lt;/denchmark-code&gt;

I tracked down the issue to starting the threads in training_generator.py: enqueuer.start
&lt;denchmark-code&gt;def _make_enqueued_generator(generator,
                             workers=1,
                             use_multiprocessing=False,
                             max_queue_size=10,
                             shuffle=False):
  """Create a buffered queue of next elements of the generator."""
  is_sequence = isinstance(generator, data_utils.Sequence)
  enqueuer = None
  if workers &gt; 0:
    if is_sequence:
      enqueuer = data_utils.OrderedEnqueuer(
          generator, use_multiprocessing=use_multiprocessing, shuffle=shuffle)
    else:
      enqueuer = data_utils.GeneratorEnqueuer(
          generator, use_multiprocessing=use_multiprocessing)
    enqueuer.start(workers=workers, max_queue_size=max_queue_size) #here the additional calls happen!
    output_generator = enqueuer.get()
  else:
    if is_sequence:
      output_generator = data_utils.iter_sequence_infinite(generator)
    else:
      output_generator = generator
  return output_generator, enqueuer

&lt;/denchmark-code&gt;

but I am too unfamiliar with python threading to supply a patch, sorry.
At the moment the workaround is workers=0!
	</description>
	<comments>
		<comment id='1' author='dsmic' date='2019-08-21T23:56:17Z'>
		Was able to reproduce the error. Github gist is &lt;denchmark-link:https://colab.research.google.com/gist/gowthamkpr/5687a543ffcf0b2d2a72a2a731152063/untitled104.ipynb&gt;here&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='dsmic' date='2020-03-27T19:17:38Z'>
		&lt;denchmark-link:https://github.com/dsmic&gt;@dsmic&lt;/denchmark-link&gt;
,
I ran the above code with TF v2.1 and got the same outputs with  commented and uncommented. Please find the gist of it &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/9ff532a0d1690d0aefd1a2fb69d9f2a9/2-1-template.ipynb&gt;here&lt;/denchmark-link&gt;
.
Could you please confirm if the issue is resolved? Thanks!
		</comment>
		<comment id='3' author='dsmic' date='2020-04-03T12:38:11Z'>
		
Could you please confirm if the issue is resolved? Thanks!

&lt;denchmark-link:https://github.com/dsmic&gt;@dsmic&lt;/denchmark-link&gt;
,
Any updates regarding this issue? Thanks!
		</comment>
		<comment id='4' author='dsmic' date='2020-04-03T12:49:26Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31830&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31830&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>