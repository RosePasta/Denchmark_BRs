<bug id='32772' author='stefanpantic' open_date='2019-09-24T09:22:06Z' closed_time='2020-02-28T18:51:23Z'>
	<summary>Training parameter to model passed as None in 1.14.0</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A
TensorFlow installed from (source or binary): binary (pip)
TensorFlow version (use command below): v1.14.0-0-g87989f6959 1.14.0
Python version: 3.6.8
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: 10.1/7.5
GPU model and memory: GTX 1080Ti

Describe the current behavior
Training parameter to model passed as None
Describe the expected behavior
Training parameter should be True in training and False in inference
Code to reproduce the issue
&lt;denchmark-code&gt;import numpy as np
import tensorflow as tf


class MyModel(tf.keras.Model):
  def __init__(self):
    super(MyModel, self).__init__()
    self.dense = tf.keras.layers.Dense(4)

  def call(self, inputs, training=False):
    print('Training', training)
    return self.dense(inputs)
    
    
class Gen(tf.keras.utils.Sequence):
    def __len__(self):
        return 10
    
    def __getitem__(self, i):
        return np.ones((32, 100)), np.ones((32, 4))
    
model = MyModel()
model.compile(optimizer=tf.train.AdagradOptimizer(0.001), loss='categorical_crossentropy', metrics=['accuracy'])


# training should be False
model.build(input_shape=(32, 100))

# training should be True
model.fit_generator(generator=Gen(), epochs=1, validation_data=Gen())
&lt;/denchmark-code&gt;

Other info / logs
Outputs:
&lt;denchmark-code&gt;Training False
Training None
WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_grad.py:1250: add_dispatch_support.&lt;locals&gt;.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use tf.where in 2.0, which has the same broadcast rule as np.where
WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/adagrad.py:76: calling Constant.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.
Instructions for updating:
Call initializer instance with the dtype argument instead of passing it to the constructor
10/10 [==============================] - 1s 127ms/step - loss: 17.8394 - acc: 1.0000 - val_loss: 16.1181 - val_acc: 1.0000
&lt;tensorflow.python.keras.callbacks.History at 0x7f4754342e80&gt;
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='stefanpantic' date='2019-09-24T09:56:06Z'>
		&lt;denchmark-link:https://github.com/stefanpantic&gt;@stefanpantic&lt;/denchmark-link&gt;

Is it possible for you to try latest TF versions ( )and let us know whether the issue persists? There were lots of performance improvements in the latest versions. Thanks!
		</comment>
		<comment id='2' author='stefanpantic' date='2019-09-24T10:52:10Z'>
		&lt;denchmark-code&gt;Training Tensor("keras_learning_phase:0", shape=(), dtype=bool)
&lt;/denchmark-code&gt;

This gets passed as the training parameter instead of None in the 1.15 release candidate.
An aditional question I have is: is it necessary to pass the training parameter to the Dropout/BatchNormalization layers or can they infer the appropriate value based on K.learning_phase()?
		</comment>
		<comment id='3' author='stefanpantic' date='2020-02-28T18:51:23Z'>
		&lt;denchmark-link:https://github.com/stefanpantic&gt;@stefanpantic&lt;/denchmark-link&gt;
 Thanks for the issue!
This is fixed in the latest tf-nightly: pip install -U tf-nightly
		</comment>
		<comment id='4' author='stefanpantic' date='2020-02-28T18:51:25Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32772&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32772&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>