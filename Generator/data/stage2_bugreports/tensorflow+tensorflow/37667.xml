<bug id='37667' author='adamw96' open_date='2020-03-17T13:17:29Z' closed_time='2020-06-22T06:53:02Z'>
	<summary>Inconsistently sized samples with TimeseriesGenerator</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock
example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g.,
Linux Ubuntu 16.04): Win 10
TensorFlow installed from (source or
binary): Binary
TensorFlow version (use command below): v2.1.0
Python version: 3.6.10

Describe the current behavior
tensorflow.keras.preprocessing.sequence.TimeseriesGenerator generates inconsistently sized samples depending on parameters passed to length, batch_size. Ends up throwing input shape errors when passed into a model such as LSTM.
Describe the expected behavior
Each sample should be of size (batch_size, length, n_features), (batch_size,).
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import numpy as np
from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator

def GenerateData(TIMESTEPS, BATCHSIZE, N_FEATURES, N_SAMPLES):
    """
    Generates batches of one-step forward samples (x_1,...,x_n), (y_n+1)
    Args: TIMESTEPS (int) Number of past observations
          BATCHSIZE (int) Number of samples in each batch
          N_FEATURES (int) Number of features in dataset
          N_SAMPLES (int) Length of dataset

    Each generated sample should be shape (BATCHSIZE, TIMESTEPS, N_FEATURES), (BATCHSIZE,)
    """
    # Dummy multivariate series
    dummy_x = np.random.rand(N_SAMPLES, N_FEATURES)
    dummy_y = np.array([x[0] for x in dummy_x]) # Predict future values of first column
    print(f'Data X Shape: {dummy_x.shape}, Data Y Shape: {dummy_y.shape}')

    generator = TimeseriesGenerator(data=dummy_x, targets=dummy_y,
                                    length=TIMESTEPS,
                                    batch_size=BATCHSIZE,
                                    sampling_rate=1,
                                    stride=1
                                   )

    # Check whether each sample is shaped correctly
    for n in range(len(generator)):
        x,y = generator[n]
        if x.shape != (BATCHSIZE, TIMESTEPS, N_FEATURES):
            print(f'Check index {n}.')
&lt;/denchmark-code&gt;

Tests:
&lt;denchmark-code&gt;[In]
GenerateData(TIMESTEPS=5, BATCHSIZE=2, N_FEATURES=5, N_SAMPLES=1000)
[Out]
Data X Shape: (1000, 5), Data Y Shape: (1000,)
Check index 497.
Index 497 shapes: (1, 5, 5), (1,)

[In]
GenerateData(TIMESTEPS=5, BATCHSIZE=2, N_FEATURES=5, N_SAMPLES=1001)
[Out]
Data X Shape: (1001, 5), Data Y Shape: (1001,)

[In]
GenerateData(TIMESTEPS=6, BATCHSIZE=2, N_FEATURES=5, N_SAMPLES=1001)
[Out]
Data X Shape: (1001, 5), Data Y Shape: (1001,)
Check index 497.
Index 497 shapes: (1, 6, 5), (1,)

[In]
GenerateData(TIMESTEPS=6, BATCHSIZE=32, N_FEATURES=5, N_SAMPLES=1001)
[Out]
Data X Shape: (1001, 5), Data Y Shape: (1001,)
Check index 31.
Index 31 shapes: (3, 6, 5), (3,)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='adamw96' date='2020-03-17T13:20:22Z'>
		In the tests above, only the parameters length=2, batch_size=2, n_samples=1001 generates consistently sized samples.
		</comment>
		<comment id='2' author='adamw96' date='2020-03-17T15:38:04Z'>
		Oh, This problem also occurs on my machine.
&lt;denchmark-h:h4&gt;System information&lt;/denchmark-h&gt;



Have I written custom code (as opposed to using a stock
example script provided in TensorFlow): Yes


OS Platform and Distribution:Ubuntu18.04 LTS


TensorFlow installed from (source or
binary): pip


TensorFlow version (use command below): v2.1.0


Python version: 3.6.10


		</comment>
		<comment id='3' author='adamw96' date='2020-03-17T19:33:05Z'>
		Something that might be helpful information: If N_SAMPLE % BATCH_SIZE == TIMESTEPS, samples are consistently shaped. The converse is generally not true.
		</comment>
		<comment id='4' author='adamw96' date='2020-03-18T05:44:39Z'>
		&lt;denchmark-link:https://github.com/adamw96&gt;@adamw96&lt;/denchmark-link&gt;
, I tried to replicate this issue on colab with Tf 2.1 but I am not seeing any output.
Please find the colab &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/074aaff597159ed7ed42e116fb9da7da/untitled465.ipynb&gt;gist&lt;/denchmark-link&gt;
 and provide more information to replicate the issue. Thanks!
		</comment>
		<comment id='5' author='adamw96' date='2020-03-20T07:12:59Z'>
		&lt;denchmark-link:https://github.com/gadagashwini&gt;@gadagashwini&lt;/denchmark-link&gt;
 Added some tests to the &lt;denchmark-link:https://colab.research.google.com/gist/adamw96/0471618572a3848a834f5acf4fa0a424/untitled465.ipynb&gt;gist&lt;/denchmark-link&gt;
. I think it'll be helpful if  discards the first  values where  is chosen such that the remaining data can be divided into evenly sized samples. Otherwise with inconsistent batch shapes, if fed into a model (say, LSTM) this throws an input shape error.
		</comment>
		<comment id='6' author='adamw96' date='2020-03-23T07:37:06Z'>
		I could reproduce the issue with Tf 2.1.
Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/6cb9012e4d81c2f02c28d983dde22444/untitled474.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='7' author='adamw96' date='2020-04-30T11:43:59Z'>
		I could reproduce the issue with Tf 2.2-rc3.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/31cbd02f23b9fd9bcedbdf1e0ba01bab/untitled843.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='8' author='adamw96' date='2020-05-14T19:00:46Z'>
		&lt;denchmark-link:https://github.com/adamw96&gt;@adamw96&lt;/denchmark-link&gt;
 , the TimeseriesGenerator has been replaced with an updated utility that works directly with TF datasets: &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/timeseries_dataset_from_array&gt;https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/timeseries_dataset_from_array&lt;/denchmark-link&gt;

That is available in the nightlies now; does that work for your use-case?
		</comment>
		<comment id='9' author='adamw96' date='2020-06-13T07:09:10Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='10' author='adamw96' date='2020-06-15T05:53:17Z'>
		&lt;denchmark-link:https://github.com/adamw96&gt;@adamw96&lt;/denchmark-link&gt;

Can you please try with TF nightly versions and see if the problem still persists.Thanks!
		</comment>
		<comment id='11' author='adamw96' date='2020-06-22T06:53:01Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='12' author='adamw96' date='2020-06-22T06:53:04Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37667&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/37667&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>