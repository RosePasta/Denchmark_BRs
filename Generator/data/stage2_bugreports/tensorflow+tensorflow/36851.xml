<bug id='36851' author='neenaloysius' open_date='2020-02-18T09:31:23Z' closed_time='2020-02-28T09:05:29Z'>
	<summary>TypeError: Tensor is unhashable if Tensor equality is enabled. Instead, use tensor.experimental_ref() as the key. in colab</summary>
	<description>
When tryig to build the following model, I get error Tensor is unhashable (see figure)
input_data = Input(name='the_input', shape=(208, 224,224, 3), dtype=dtype)
layer1 =        TimeDistributed(
MobileNet(weights='imagenet',include_top=False))(input_data)
layer2 =  TimeDistributed(GlobalAveragePooling2D())(layer1)
##********************************* Create Bidirectional LSTM*************************************
for i in range(0, n_layers):
x = Bidirectional(CuDNNLSTM(20, kernel_initializer=kernel_init_rnn, bias_initializer=bias_init_rnn,
unit_forget_bias=True, return_sequences=True),
merge_mode='sum', name='CuDNN_bi_lstm'+str(i+1))(layer2)
x = TimeDistributed(Dense(units=20, kernel_initializer=kernel_init_dense, bias_initializer=bias_init_dense,
activation='relu'), name='fc_4')(x)
x = TimeDistributed(Dropout(dropout), name='dropout_4')(x)
# Output layer with softmax
y_pred = TimeDistributed(Dense(units=30, kernel_initializer=kernel_init_dense,
bias_initializer=bias_init_dense, activation='softmax'), name='softmax')(x)
Model(inputs=input_data, outputs=y_pred).summary()
&lt;denchmark-link:https://user-images.githubusercontent.com/17008416/74722702-63ebf400-525f-11ea-804d-283b4016d6fe.JPG&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='neenaloysius' date='2020-02-18T11:43:13Z'>
		&lt;denchmark-link:https://github.com/neenaloysius&gt;@neenaloysius&lt;/denchmark-link&gt;
, Can you please provide complete code to reproduce the reported issue or share the colab gist. Also provide the Tensorflow version. Thanks!
		</comment>
		<comment id='2' author='neenaloysius' date='2020-02-19T11:57:47Z'>
		#%tensorflow_version 2.x
import tensorflow as tf
from tensorflow.python.keras import Sequential
from tensorflow.python.keras.layers import LSTM, Bidirectional,Lambda
from tensorflow.python.keras.layers import Dense, TimeDistributed,Input,CuDNNLSTM
from tensorflow.python.keras.layers import Dropout, GlobalAveragePooling2D
from tensorflow.python.keras import optimizers
from tensorflow.keras.applications.mobilenet import MobileNet
from tensorflow.python.keras import backend as K
from keras.models import Model
dtype = 'float32'
n_layers=1
dropout=0.2
kernel_init_rnn = 'glorot_uniform'
bias_init_rnn = 'random_normal'
kernel_init_dense = 'random_normal'
bias_init_dense = 'random_normal'
kernel_init_conv = 'glorot_uniform'
bias_init_conv = 'random_normal'
sample_shape = (208, 224,224, 3)
input_data = Input(name='the_input', shape=(208, 224,224, 3), dtype=dtype)
layer1 =        TimeDistributed(
MobileNet(weights='imagenet',include_top=False))(input_data)
layer2 =  TimeDistributed(GlobalAveragePooling2D())(layer1)
for i in range(0, n_layers):
x = Bidirectional(CuDNNLSTM(20, kernel_initializer=kernel_init_rnn, bias_initializer=bias_init_rnn,
unit_forget_bias=True, return_sequences=True),
merge_mode='sum', name='CuDNN_bi_lstm'+str(i+1))(layer2)
x = TimeDistributed(Dense(units=20, kernel_initializer=kernel_init_dense, bias_initializer=bias_init_dense,
activation='relu'), name='fc_4')(x)
x = TimeDistributed(Dropout(dropout), name='dropout_4')(x)
y_pred = TimeDistributed(Dense(units=30, kernel_initializer=kernel_init_dense,
bias_initializer=bias_init_dense, activation='softmax'), name='softmax')(x)
Model(inputs=input_data, outputs=y_pred).summary()
		</comment>
		<comment id='3' author='neenaloysius' date='2020-02-20T06:30:29Z'>
		Was able to replicate the issue with Tf 2.1.
Please find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/gadagashwini/81dc9ecd6c0756e951d7f0e3ddc72d88/untitled396.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='neenaloysius' date='2020-02-22T19:33:07Z'>
		Problem solved. In my case it was mistake on importing libraries when using tensorflow 2.x ,
I was having error

TypeError: Tensor is unhashable if Tensor equality is enabled. Instead, use tensor.experimental_ref() as the key.

solution was:
using
from tensorflow.keras.models import Model Instead of
from keras.models import Model
		</comment>
		<comment id='5' author='neenaloysius' date='2020-02-28T09:05:30Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36851&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36851&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>