<bug id='32685' author='dbergh' open_date='2019-09-20T09:12:31Z' closed_time='2019-09-23T05:17:17Z'>
	<summary>tf.function problem when slicing tensor with variable</summary>
	<description>
System information

Have I written custom code: Yes
OS Platform and Distribution: Windows 10
TensorFlow installed from: binary
TensorFlow version: v2.0.0-rc0-101-gd2d2566eef 2.0.0-rc1
Python version: 3.7.4
CUDA/cuDNN version: N/A
GPU model and memory: N/A

Describe the behavior
Slicing tensors using slices indexed by a tf.Variable does not work with tf.function. The problem does not occur when executing eagerly or when slicing with tensors which are not variables.
Code to reproduce the issue
Executing the code
&lt;denchmark-code&gt;import tensorflow as tf

pos = tf.Variable(0, dtype=tf.int32)

def ok():
	return tf.zeros(5)[pos:3]

@tf.function
def also_ok():
	return tf.zeros(5)[pos+0:3]

@tf.function
def not_ok():
	return tf.zeros(5)[pos:3]

tf.print(ok())
tf.print(also_ok())
tf.print(not_ok())	
&lt;/denchmark-code&gt;

produces the output
&lt;denchmark-code&gt;[0 0 0]
[0 0 0]
StagingError
&lt;/denchmark-code&gt;

Detailed traceback
&lt;denchmark-code&gt;---------------------------------------------------------------------------
StagingError                              Traceback (most recent call last)
&lt;ipython-input-29-6470bfb94cb0&gt; in &lt;module&gt;
	 12 
	 13 tf.print(ok())
---&gt; 14 tf.print(not_ok())

~\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\eager\def_function.py in __call__(self, *args, **kwds)
	455 
	456     tracing_count = self._get_tracing_count()
--&gt; 457     result = self._call(*args, **kwds)
	458     if tracing_count == self._get_tracing_count():
	459       self._call_counter.called_without_tracing()

~\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\eager\def_function.py in _call(self, *args, **kwds)
	501       # This is the first call of __call__, so we have to initialize.
	502       initializer_map = object_identity.ObjectIdentityDictionary()
--&gt; 503       self._initialize(args, kwds, add_initializers_to=initializer_map)
	504     finally:
	505       # At this point we know that the initialization is complete (or less

~\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\eager\def_function.py in _initialize(self, args, kwds, add_initializers_to)
	406     self._concrete_stateful_fn = (
	407         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access
--&gt; 408             *args, **kwds))
	409 
	410     def invalid_creator_scope(*unused_args, **unused_kwds):

~\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\eager\function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)
   1846     if self.input_signature:
   1847       args, kwargs = None, None
-&gt; 1848     graph_function, _, _ = self._maybe_define_function(args, kwargs)
   1849     return graph_function
   1850 

~\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\eager\function.py in _maybe_define_function(self, args, kwargs)
   2148         graph_function = self._function_cache.primary.get(cache_key, None)
   2149         if graph_function is None:
-&gt; 2150           graph_function = self._create_graph_function(args, kwargs)
   2151           self._function_cache.primary[cache_key] = graph_function
   2152         return graph_function, args, kwargs

~\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\eager\function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)
   2039             arg_names=arg_names,
   2040             override_flat_arg_shapes=override_flat_arg_shapes,
-&gt; 2041             capture_by_value=self._capture_by_value),
   2042         self._function_attributes,
   2043         # Tell the ConcreteFunction to clean up its graph once it goes out of

~\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\framework\func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)
	913                                           converted_func)
	914 
--&gt; 915       func_outputs = python_func(*func_args, **func_kwargs)
	916 
	917       # invariant: `func_outputs` contains only Tensors, CompositeTensors,

~\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\eager\def_function.py in wrapped_fn(*args, **kwds)
	356         # __wrapped__ allows AutoGraph to swap in a converted function. We give
	357         # the function a weak reference to itself to avoid a reference cycle.
--&gt; 358         return weak_wrapped_fn().__wrapped__(*args, **kwds)
	359     weak_wrapped_fn = weakref.ref(wrapped_fn)
	360 

~\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\framework\func_graph.py in wrapper(*args, **kwargs)
	903           except Exception as e:  # pylint:disable=broad-except
	904             if hasattr(e, "ag_error_metadata"):
--&gt; 905               raise e.ag_error_metadata.to_exception(e)
	906             else:
	907               raise

StagingError: in converted code:

	&lt;ipython-input-20-6173bf43c1fe&gt;:11 not_ok  *
		return tf.zeros(5)[pos:3]
	C:\Users\Daniel\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\ops\array_ops.py:748 _slice_helper
		s.start != sys.maxsize):
	C:\Users\Daniel\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\ops\variables.py:1111 __ne__
		return gen_math_ops.not_equal(self, other)
	C:\Users\Daniel\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\ops\gen_math_ops.py:7012 not_equal
		name=name)
	C:\Users\Daniel\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\framework\op_def_library.py:527 _apply_op_helper
		preferred_dtype=default_dtype)
	C:\Users\Daniel\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\framework\ops.py:1296 internal_convert_to_tensor
		ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
	C:\Users\Daniel\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\framework\tensor_conversion_registry.py:52 _default_conversion_function
		return constant_op.constant(value, dtype, name=name)
	C:\Users\Daniel\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\framework\constant_op.py:227 constant
		allow_broadcast=True)
	C:\Users\Daniel\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\framework\constant_op.py:265 _constant_impl
		allow_broadcast=allow_broadcast))
	C:\Users\Daniel\.conda\envs\tf2\lib\site-packages\tensorflow_core\python\framework\tensor_util.py:450 make_tensor_proto
		nparray = np.array(values, dtype=np_dt)

	OverflowError: Python int too large to convert to C long
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='dbergh' date='2019-09-20T10:47:45Z'>
		Can you please try with and see if the problem still persists. I am not seeing any error message.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/8a0f645e34569d088493c78613b72da4/untitled208.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='dbergh' date='2019-09-20T13:19:41Z'>
		Thanks! That fixed it.
But also had to downgrade to Python 3.6.8 since nightly builds are not available for 3.7.
		</comment>
		<comment id='3' author='dbergh' date='2019-09-23T05:17:17Z'>
		I am closing this issue since the query is been resolved.Thanks!
		</comment>
		<comment id='4' author='dbergh' date='2019-09-23T05:17:18Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=32685&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=32685&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>