<bug id='43978' author='ManuelWiese' open_date='2020-10-13T10:12:47Z' closed_time='2020-10-20T01:16:50Z'>
	<summary>Cannot save mixed precision model when using activity regularizer</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04.5 LTS
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: -
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.3.1
Python version: Python 3.6.9
Bazel version (if compiling from source): -
GCC/Compiler version (if compiling from source): -
CUDA/cuDNN version: 10.1/7.6.5.32-1+cuda10.1
GPU model and memory: RTX 2080Ti 11Gb

Describe the current behavior
When using activity_regularizer in a subclassed keras model, it is not possible to save the model if mixed_float16 policy is set.
If mixed_float16 is not set, the example below does work.
Describe the expected behavior
The example below should save model.
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import numpy as np

import tensorflow as tf
from tensorflow.keras.mixed_precision import experimental as mixed_precision


policy = mixed_precision.Policy('mixed_float16')
mixed_precision.set_policy(policy)


class TestModel(tf.keras.models.Model):
    def __init__(self, **kwargs):
        super(TestModel, self).__init__(**kwargs)
        self.conv_0 = tf.keras.layers.Conv2D(1, (1, 1), activity_regularizer='l1')
    
    def call(self, x):
        return self.conv_0(x)
    
    def get_config(self):
        return {}


model = TestModel()
_ = model(np.zeros((1, 16, 16, 3)))
model.save("test_model")
&lt;/denchmark-code&gt;

Other info / logs
&lt;denchmark-code&gt;ValueError: Python inputs incompatible with input_signature:
  inputs: (
    Tensor("StatefulPartitionedCall:0", shape=(None, 16, 16, 1), dtype=float16))
  input_signature: (
    TensorSpec(shape=&lt;unknown&gt;, dtype=tf.float32, name=None))
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ManuelWiese' date='2020-10-14T08:09:18Z'>
		&lt;denchmark-link:https://github.com/ManuelWiese&gt;@ManuelWiese&lt;/denchmark-link&gt;

I have made small changes to your code and i am not seeing any issue. Please, find the gist &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/1754042ea2ebf9446f560cc6254d5945/untitled454.ipynb&gt;here&lt;/denchmark-link&gt;
.Please, verify once and let us know if it solves your question.Please, refer this &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/mixed_precision/experimental/Policy#how_to_use_mixed_precision_in_a_keras_model_2&gt;tutorial&lt;/denchmark-link&gt;
 and see if it helps you.Thanks!
		</comment>
		<comment id='2' author='ManuelWiese' date='2020-10-14T08:28:02Z'>
		&lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;

Thanks for your reply! I looked through your code and as far as i understand the mixed precision policy is not set. Without mixed precision the example works perfectly.
When using "tf.keras.mixed_precision.experimental.set_policy('mixed_float16')", as shown in the tutorial, in your colab it does not work anymore.
		</comment>
		<comment id='3' author='ManuelWiese' date='2020-10-14T18:27:32Z'>
		I can reproduce the issue when . &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/d17691aa4682b20d939bf6e89521d816/untitled58.ipynb&gt;Here&lt;/denchmark-link&gt;
 is the gist for our reference.
Note: There is no error when activity_regularizer='l1' is removed from the following line
self.conv_0 = tf.keras.layers.Conv2D(1, (1, 1), activity_regularizer='l1')
		</comment>
		<comment id='4' author='ManuelWiese' date='2020-10-16T03:37:12Z'>
		Thank you for the very short and clean example to reproduce! I will have a fix soon.
		</comment>
		<comment id='5' author='ManuelWiese' date='2020-10-20T01:16:51Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43978&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43978&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='ManuelWiese' date='2020-10-20T13:03:56Z'>
		Thank you for the fix. It does work in tf-nightly now!
		</comment>
	</comments>
</bug>