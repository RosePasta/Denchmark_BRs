<bug id='27495' author='guoyejun' open_date='2019-04-04T07:30:32Z' closed_time='2019-04-19T02:47:03Z'>
	<summary>to build with '-g' option</summary>
	<description>
Please make sure that this is a build/installation issue. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:build_template
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): source
TensorFlow version: 2eebcc6
Python version: Python 3.5.2
Installed using virtualenv? pip? conda?:  virtualenv
Bazel version (if compiling from source): bazel-0.24.0-installer-linux-x86_64.sh
GCC/Compiler version (if compiling from source): gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10)
CUDA/cuDNN version:
GPU model and memory:

Describe the problem
My purpose is to build tensorflow c library (libtensorflow_framework.so and libtensorflow.so) to be stepped into within gdb via source code.
I tried two methods:

add '-g -O0' option during ./configure


and then run the below commands to build the c libraries:
bazel test -c opt //tensorflow/tools/lib_package:libtensorflow_test
bazel build -c opt //tensorflow/tools/lib_package:libtensorflow
but, gdb shows that it is unable to read the symbols as below:
0x00007fffedea2400  0x00007ffff41f73ef  Yes ()     /usr/local/lib/libtensorflow.so
0x00007fffe9245bc0  0x00007fffea040ea0  Yes ()     /usr/local/lib/libtensorflow_framework.so

i tried dbg version with:
bazel test -c dbg //tensorflow/tools/lib_package:libtensorflow_test

and it never stops, with:
INFO: Build option --compilation_mode has changed, discarding analysis cache.
INFO: Analysed target //tensorflow/tools/lib_package:libtensorflow_test (0 packages loaded, 15440 targets configured).
INFO: Found 1 test target...
[7,070 / 7,073] Linking tensorflow/libtensorflow.so; 14876s local
^C
Bazel caught interrupt signal; shutting down.
and the build result is weird:
$ file bazel-out/k8-dbg/bin/tensorflow/libtensorflow.so
bazel-out/k8-dbg/bin/tensorflow/libtensorflow.so: data
btw, my build commands come from &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/lib_package/README.md&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/lib_package/README.md&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='guoyejun' date='2019-04-08T23:02:16Z'>
		I'm not sure what Yes() is. It looks wrong.

Make sure you do the pip install if you want to use /usr/local/lib as above. Otherwise the bazel build will not be used unless you are running with a bazel environment.
You can use nm bazel-out/k8-dbg/bin/tensorflow/libtensorflow.so to find out what symbols are defined.
Use --linkopt=-Wl,--strip-never to never strip symbols in your build.
You can load symbols separately, by calling the linker command yourself and passing -Wl,-Map=output.map. You can load the mapfile from gdb.

I think it's probably that gdb is getting confused with the symbols, so Yes() is probably some other function.
		</comment>
		<comment id='2' author='guoyejun' date='2019-04-09T01:49:49Z'>
		
I'm not sure what Yes() is. It looks wrong.

Make sure you do the pip install if you want to use /usr/local/lib as above. Otherwise the bazel build will not be used unless you are running with a bazel environment.


I think it is not a problem, because "bazel test/build -c opt *" successfully build libtensorflow.so and libtensorflow_framework.so.  I then link them into /usr/local/lib, and my application based on tf c lib works, the only issue is that i'm unable to step into the tf source code within gdb.
$ ll /usr/local/lib/libtensorflow*
lrwxrwxrwx 1 root   root          94 4月   4 18:51 /usr/local/lib/libtensorflow_framework.so -&gt; /work/ml/tensorflow_work/tensorflow/bazel-out/k8-opt/bin/tensorflow/libtensorflow_framework.so*
lrwxrwxrwx 1 root   root          84 4月   4 18:51 /usr/local/lib/libtensorflow.so -&gt; /work/ml/tensorflow_work/tensorflow/bazel-out/k8-opt/bin/tensorflow/libtensorflow.so*


You can use nm bazel-out/k8-dbg/bin/tensorflow/libtensorflow.so to find out what symbols are defined.


$ nm bazel-out/k8-dbg/bin/tensorflow/libtensorflow.so
nm: bazel-out/k8-dbg/bin/tensorflow/libtensorflow.so: File format not recognized
it is expected because:
$ file bazel-out/k8-dbg/bin/tensorflow/libtensorflow.so
bazel-out/k8-dbg/bin/tensorflow/libtensorflow.so: data
As for opt version,
$ file bazel-out/k8-opt/bin/tensorflow/libtensorflow.so
bazel-out/k8-opt/bin/tensorflow/libtensorflow.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=7bf0c37714b11d6ff260961f62facdac858f0966, not stripped
$ nm bazel-out/k8-opt/bin/tensorflow/libtensorflow.so | tail    (lots of output, so i use tail)
....
_ZZZZZN10tensorflow12_GLOBAL__N_123GrpcWorkerServiceThread23CompleteInstanceHandlerEPNS_4CallIS1_NS_4grpc13WorkerService12AsyncServiceENS_23CompleteInstanceRequestENS_24CompleteInstanceResponseEEEENKUlvE_clEvENKUlRKNS_6StatusEE0_clESD_ENKUliPKcE_clEiSG_E17vmodule_activated
00000000088fd780 b _ZZZZZN10tensorflow16XlaDeviceContext21CopyDeviceTensorToCPUEPKNS_6TensorEN4absl11string_viewEPNS_6DeviceEPS1_St8functionIFvRKNS_6StatusEEEENKUlSA_E1_clESA_ENKUlvE_clEvENKUliPKcE_clEiSI_E17vmodule_activated


Use --linkopt=-Wl,--strip-never to never strip symbols in your build.


From above, the lib symbols are not stripped.  Anyway, i can try this option, but where can I add it? (I'm not familiar with bazel)


You can load symbols separately, by calling the linker command yourself and passing -Wl,-Map=output.map. You can load the mapfile from gdb.


could you tell me how to pass -Wl,-Map=output.map to the linker command? thanks.
i just searched 'gdb mapfile' but could not find a web page to show how to load a mapfile from gdb, could you also please give me a help for the exact command? thanks a lot. ( symbol-file?)

I think it's probably that gdb is getting confused with the symbols, so Yes() is probably some other function.

yes, for 'opt' version, i guess gdb is getting confused with the symbols, and the mapfile might help.
As for 'dbg' option, i changed nothing else, and the build process never stops for hours, i guess there might be an issue within tf.
		</comment>
		<comment id='3' author='guoyejun' date='2019-04-09T02:11:11Z'>
		If you only want to step into a handful of C++ sources, try adding -g to the --per_file_copt in your bazel build command, for example:
&lt;denchmark-code&gt;bazel build -c opt --config=opt --per_file_copt=//tensorflow/core/distributed_runtime/rpc/.*\.cc@-g //tensorflow/tools/pip_package:build_pip_package
&lt;/denchmark-code&gt;

See &lt;denchmark-link:https://docs.bazel.build/versions/master/user-manual.html#flag--per_file_copt&gt;here&lt;/denchmark-link&gt;
 for details.
		</comment>
		<comment id='4' author='guoyejun' date='2019-04-09T02:21:37Z'>
		I think your link to  may not work. Not sure. We may be setting the  to look for the libraries in a different place. Can you try &lt;denchmark-link:https://github.com/bazelbuild/bazel/issues/6145&gt;this&lt;/denchmark-link&gt;
? Just create a shell script to run gdb and run the test under that script.
		</comment>
		<comment id='5' author='guoyejun' date='2019-04-09T02:58:39Z'>
		
If you only want to step into a handful of C++ sources, try adding -g to the --per_file_copt in your bazel build command, for example:
bazel build -c opt --config=opt --per_file_copt=//tensorflow/core/distributed_runtime/rpc/.*\.cc@-g //tensorflow/tools/pip_package:build_pip_package

See here for details.

thanks, i don't know where are the source files for the build, so I just choose //tensorflow/., as following:
bazel test -c opt --per_file_copt=//tensorflow/..cc.c@-g,-O0,--strip=never //tensorflow/tools/lib_package:libtensorflow_test
bazel test -c dgb --per_file_copt=//tensorflow/.*.cc.c@-g,-O0,--strip=never //tensorflow/tools/lib_package:libtensorflow_test
the option '--strip=never' is from the documentation link you just mentioned:
Caveat: If some files are selectively compiled with debug symbols the symbols might be stripped during linking. This can be prevented by setting --strip=never
but there is a build error:
gcc: error: unrecognized command line option '--strip-never'
I also tried with:
bazel test -c opt --per_file_copt=//tensorflow/.*.cc.c@-g,-O0,--linkopt=-Wl,--strip-never //tensorflow/tools/lib_package:libtensorflow_test
and still the same issue.
I'm currently trying with below commands from a clean source tree (rm -rf ; git checkout .) and build tree (rm -rf ~/.cache/):
bazel test -c opt --per_file_copt=//tensorflow/..cc.c@-g,-O0 //tensorflow/tools/lib_package:libtensorflow_test
bazel build -c opt --per_file_copt=//tensorflow/.*.cc.c@-g,-O0 //tensorflow/tools/lib_package:libtensorflow
hours need to get it finished. will report back after build finished.
		</comment>
		<comment id='6' author='guoyejun' date='2019-04-09T04:32:36Z'>
		
I'm currently trying with below commands from a clean source tree (rm -rf ; git checkout .) and build tree (rm -rf ~/.cache/): bazel test -c opt --per_file_copt=//tensorflow/..cc.c@-g,-O0 //tensorflow/tools/lib_package:libtensorflow_test
bazel build -c opt --per_file_copt=//tensorflow/.*.cc.c@-g,-O0 //tensorflow/tools/lib_package:libtensorflow
hours need to get it finished. will report back after build finished.

with this new command, gdb can read symbols from libtensorflow.so, but still unable to read from libtensorflow_framework.so, see below.  And it still unable to step into tf source code when I press 's' within gdb at the TF_* functions, such as TF_SessionRun, TF_GetCode, TF_GraphImportGraphDef
0x00007fffedea2400  0x00007ffff41f792f  Yes         /usr/local/lib/libtensorflow.so
0x00007fffe9245bc0  0x00007fffea040ea0  Yes ()     /usr/local/lib/libtensorflow_framework.so
(): Shared library is missing debugging information.
		</comment>
		<comment id='7' author='guoyejun' date='2019-04-09T04:54:46Z'>
		
I think your link to /usr/local/lib may not work. Not sure. We may be setting the rpath to look for the libraries in a different place. Can you try this? Just create a shell script to run gdb and run the test under that script.

thanks, but my application is a stand-alone binary out of the tf source tree, and the below command failed to run:
bazel run --run_under=gdb /path_to_my_binary
ERROR: not a valid absolute pattern (absolute target patterns must start with exactly two slashes):
		</comment>
		<comment id='8' author='guoyejun' date='2019-04-09T04:56:37Z'>
		Perhaps that's because these are compiled from the C sources which are not matched with the *.cc regexp.
Maybe it works with --per_file_copt=//tensorflow/.*\.cc@-g,-O0,//tensorflow/.*\.c@-g,-O0.
		</comment>
		<comment id='9' author='guoyejun' date='2019-04-09T05:08:09Z'>
		
Perhaps that's because these are compiled from the C sources which are not matched with the *.cc regexp.
Maybe it works with --per_file_copt=//tensorflow/.*\.cc@-g,-O0,//tensorflow/.*\.c@-g,-O0.

but my command has considered .c file:
&lt;denchmark-link:https://user-images.githubusercontent.com/10448440/55774626-7edecb00-5ac8-11e9-9175-2ed7698c46fe.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='guoyejun' date='2019-04-17T06:26:42Z'>
		I tried as &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/27744&gt;#27744&lt;/denchmark-link&gt;
 with:
bazel build  --cxxopt='-g' //tensorflow/tools/lib_package:libtensorflow_test
and it stops at the below line for hours:
[7,070 / 7,073] Linking tensorflow/libtensorflow.so; 10322s local
and, libtensorflow.so is there, but as data format.
$ file /work/ml/tensorflow_work/tensorflow/bazel-out/k8-opt/bin/tensorflow/libtensorflow.so
/work/ml/tensorflow_work/tensorflow/bazel-out/k8-opt/bin/tensorflow/libtensorflow.so: data
It is the same when i tried with -c dbg
		</comment>
		<comment id='11' author='guoyejun' date='2019-04-19T02:47:02Z'>
		i tried again with '-g' option, it takes ~6 hours to finish ...
INFO: Elapsed time: 24108.686s, Critical Path: 21192.22s
		</comment>
		<comment id='12' author='guoyejun' date='2019-04-19T02:47:05Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=27495&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=27495&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>