<bug id='38296' author='kbrose' open_date='2020-04-07T04:06:39Z' closed_time='2020-10-12T17:13:44Z'>
	<summary>tf.keras custom layer does not use "compute_output_shape"</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):  Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: n/a
TensorFlow installed from (source or binary): pip
TensorFlow version (use command below):
Python version: v2.2.0-rc1-34-ge6e5d6df2a 2.2.0-rc2
Bazel version (if compiling from source): n/a
GCC/Compiler version (if compiling from source): n/a
CUDA/cuDNN version: Driver Version: 440.33.01    CUDA Version: 10.2
GPU model and memory: GTX 1080 Ti 11162MiB ram

Describe the current behavior
When implementing a custom layer where the output shape is not computable directly from the code within the call method, the compute_output_shape function is not used to determine the output shape.
This causes issues when passing to a layer which must know some of the shape, e.g. a Conv*D layer which needs to know the number of channels ahead of time.
Describe the expected behavior
The compute_output_shape function is used to determine the output shape.
Standalone code to reproduce the issue
import tensorflow as tf


class Spectrogram(tf.keras.layers.Layer):
    def __init__(self, num_freqs, max_freq, **kwargs):
        super(Spectrogram, self).__init__(**kwargs)

        self.num_freqs = num_freqs
        self.max_freq = max_freq

        self.input_spec = [
            tf.keras.layers.InputSpec(ndim=2), tf.keras.layers.InputSpec(ndim=2)
        ]

    def call(self, x_fs):
        x, fs = x_fs
        nfft = tf.cast(
            fs[0,0] * (self.num_freqs - 1) / self.max_freq,
            tf.int32
        )
        y = tf.signal.stft(x, nfft, 256, nfft, pad_end=True)
        y = tf.sqrt(tf.abs(y))[:, :, :self.num_freqs]
        return y

    def compute_output_shape(self, input_shape):
        return (input_shape[0], None, self.num_freqs)


signal = tf.keras.layers.Input(shape=(None,))
fs = tf.keras.layers.Input(shape=(1,))
x = Spectrogram(257, 10_000)([signal, fs])
y = tf.keras.layers.Conv1D(16, 3)(x)

tf.keras.models.Model([signal, fs], [y]).summary()
Logs
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "chorus/repro.py", line 32, in &lt;module&gt;
    y = tf.keras.layers.Conv1D(16, 3)(x)
  File "/home/kevin/.pyenv/versions/chorus/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py", line 897, in __call__
    self._maybe_build(inputs)
  File "/home/kevin/.pyenv/versions/chorus/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py", line 2416, in _maybe_build
    self.build(input_shapes)  # pylint:disable=not-callable
  File "/home/kevin/.pyenv/versions/chorus/lib/python3.7/site-packages/tensorflow/python/keras/layers/convolutional.py", line 153, in build
    input_channel = self._get_input_channel(input_shape)
  File "/home/kevin/.pyenv/versions/chorus/lib/python3.7/site-packages/tensorflow/python/keras/layers/convolutional.py", line 293, in _get_input_channel
    raise ValueError('The channel dimension of the inputs '
ValueError: The channel dimension of the inputs should be defined. Found `None`.
&lt;/denchmark-code&gt;

Other info
This was originally opened in &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/19961&gt;#19961&lt;/denchmark-link&gt;
 but was unfortunately closed as "not a bug", but I'm pretty sure this is not expected behavior according to the &lt;denchmark-link:https://keras.io/layers/writing-your-own-keras-layers/&gt;keras docs&lt;/denchmark-link&gt;
.
	</description>
	<comments>
		<comment id='1' author='kbrose' date='2020-04-07T09:23:53Z'>
		Was able to reproduce the issue with &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/ed24e7ab568037a258a2d8bdc1dad4ef/38296.ipynb&gt;TF v2.2.0rc2&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/2560e0070f5e2390f3a088d578106ac9/38296-tf-nightly.ipynb&gt;TF-nightly&lt;/denchmark-link&gt;
. Please find the attached gist. Thanks!
		</comment>
		<comment id='2' author='kbrose' date='2020-05-04T20:51:23Z'>
		This is a difference between tf.keras and the older OSS keras releases.
As an immediate stop-gap you should be able to manually set the output shape on the tensor and be okay, e.g.
&lt;denchmark-code&gt;        y = tf.sqrt(tf.abs(y))[:, :, :self.num_freqs]
        y.set_shape(self.compute_output_shape(x.shape))
        return y
&lt;/denchmark-code&gt;

Currently tf.keras uses compute_output_shape to set the output shape only when layers are dynamic and can only be run eagerly.
In the medium-term we need to figure out whether it makes sense for Keras to automatically set the output shape to the result of compute_output_shape whenever compute_output_shape is implemented, rather than just for dynamic layers.
		</comment>
		<comment id='3' author='kbrose' date='2020-06-10T18:01:48Z'>
		&lt;denchmark-link:https://github.com/kbrose&gt;@kbrose&lt;/denchmark-link&gt;

was this resolved by following &lt;denchmark-link:https://github.com/tomerk&gt;@tomerk&lt;/denchmark-link&gt;
  suggestion? Please close the issue if it was resolved already. Thanks!
		</comment>
		<comment id='4' author='kbrose' date='2020-06-23T06:53:00Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='5' author='kbrose' date='2020-06-23T12:49:23Z'>
		
In the medium-term we need to figure out whether it makes sense for Keras to automatically set the output shape to the result of compute_output_shape whenever compute_output_shape is implemented, rather than just for dynamic layers.

This sounds to me like we shouldn't be closing the issue whether or not the stop gap works. What do you think &lt;denchmark-link:https://github.com/ravikyram&gt;@ravikyram&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='6' author='kbrose' date='2020-10-12T17:13:44Z'>
		&lt;denchmark-link:https://github.com/kbrose&gt;@kbrose&lt;/denchmark-link&gt;
 as mentioned by &lt;denchmark-link:https://github.com/tomerk&gt;@tomerk&lt;/denchmark-link&gt;
 in the above comment, Keras computes the output shape of only dynamic layers, and you can use set_shape in scenarios where you want to control the output shape.
The &lt;denchmark-link:https://keras.io/guides/making_new_layers_and_models_via_subclassing/&gt;keras docs &lt;/denchmark-link&gt;
 you referenced above also been updated.
		</comment>
		<comment id='7' author='kbrose' date='2020-10-12T17:13:46Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38296&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38296&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>