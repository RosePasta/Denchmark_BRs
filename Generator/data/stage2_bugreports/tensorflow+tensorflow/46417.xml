<bug id='46417' author='YooSungHyun' open_date='2021-01-14T01:59:11Z' closed_time='2021-01-14T04:31:36Z'>
	<summary>when i use custom loss and gpu, fit kernel died</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): window 10
TensorFlow version (use command below): tf-nightly-gpu 2.5.0 210112
Python version:3.8
CUDA/cuDNN version: 11.1 / maybe 8(?)
GPU model and memory: RTX 3090 24GB MEM


TF 2.0: v1.12.1-48890-g670cc3fa48f 2.5.0-dev20210113

my custom loss function looks like this,
&lt;denchmark-code&gt;import tensorflow as tf
from keras import backend as K
from tensorflow.keras.losses import Loss

@tf.function
def mase(y_true, y_pred, seasonality=1):
    def _naive_forecasting(actual, seasonality: int = 1):
        return actual[:-seasonality]
    
    def _error(actual, predicted):
        return actual - predicted
    
    def _mae(actual, predicted):
        return K.mean(K.abs(_error(actual, predicted)))
    
#     K.print_tensor(y_true,message='\ny_true==')
#     K.print_tensor(y_pred,message='\ny_pred==')
#     K.print_tensor(_mae(y_true, y_pred) / _mae(y_true[seasonality:], _naive_forecasting(y_true, seasonality)),message='\nminus==')
#     print(y_true, y_pred)
    return _mae(y_true, y_pred) / _mae(y_true[seasonality:], _naive_forecasting(y_true, seasonality))

&lt;/denchmark-code&gt;

and use like this,
&lt;denchmark-code&gt;model.compile(loss=MASE(1), optimizer=Adam(lr=0.001))
...
model.fit(x_concat_data[train], y_concat_data[train], batch_size=batch_size, epochs=epoch, verbose=2, shuffle=True)
...
model.evaluate(x_concat_data[validation], y_concat_data[validation], batch_size=batch_size, callbacks=[early_stopping])
&lt;/denchmark-code&gt;

I use rtx 3090 and want to train with gpu
cpu training is good!
BUT! when i use gpu, python kernel is dead!
kernel output like this
2021-01-14 09:33:55.296929: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:127] None of the MLIR optimization passes are enabled (registered 2)
Epoch 1/1000
d:/&gt;
what is my problem?
	</description>
	<comments>
		<comment id='1' author='YooSungHyun' date='2021-01-14T02:00:16Z'>
		when i use not custom loss func 'mean_absolute_percentage_error' in keras,
i have same issue
only working on 'mean_squared_error'
		</comment>
		<comment id='2' author='YooSungHyun' date='2021-01-14T03:19:09Z'>
		conda install keras
or
Close another notebook which might be running or was used earlier to train a model on GPU
		</comment>
		<comment id='3' author='YooSungHyun' date='2021-01-14T03:54:41Z'>
		
conda install keras
or
Close another notebook which might be running or was used earlier to train a model on GPU

already doin that way. that is not work
		</comment>
		<comment id='4' author='YooSungHyun' date='2021-01-14T04:25:52Z'>
		
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): window 10
TensorFlow version (use command below): tf-nightly-gpu 2.5.0 210112
Python version:3.8
CUDA/cuDNN version: 11.1 / maybe 8(?)
GPU model and memory: RTX 3090 24GB MEM


TF 2.0: v1.12.1-48890-g670cc3fa48f 2.5.0-dev20210113

my custom loss function looks like this,
import tensorflow as tf
from keras import backend as K
from tensorflow.keras.losses import Loss

@tf.function
def mase(y_true, y_pred, seasonality=1):
    def _naive_forecasting(actual, seasonality: int = 1):
        return actual[:-seasonality]
    
    def _error(actual, predicted):
        return actual - predicted
    
    def _mae(actual, predicted):
        return K.mean(K.abs(_error(actual, predicted)))
    
#     K.print_tensor(y_true,message='\ny_true==')
#     K.print_tensor(y_pred,message='\ny_pred==')
#     K.print_tensor(_mae(y_true, y_pred) / _mae(y_true[seasonality:], _naive_forecasting(y_true, seasonality)),message='\nminus==')
#     print(y_true, y_pred)
    return _mae(y_true, y_pred) / _mae(y_true[seasonality:], _naive_forecasting(y_true, seasonality))

and use like this,
model.compile(loss=MASE(1), optimizer=Adam(lr=0.001))
...
model.fit(x_concat_data[train], y_concat_data[train], batch_size=batch_size, epochs=epoch, verbose=2, shuffle=True)
...
model.evaluate(x_concat_data[validation], y_concat_data[validation], batch_size=batch_size, callbacks=[early_stopping])

I use rtx 3090 and want to train with gpu
cpu training is good!
BUT! when i use gpu, python kernel is dead!
kernel output like this
2021-01-14 09:33:55.296929: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:127] None of the MLIR optimization passes are enabled (registered 2)
Epoch 1/1000
d:/&gt;
what is my problem?

2
This informative message is saying MLIR is not being used. Usually its not expected to use the MLIR implementation and are instead expected to use the non-MLIR feature complete implementation.
		</comment>
		<comment id='5' author='YooSungHyun' date='2021-01-14T04:31:36Z'>
		

Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): window 10
TensorFlow version (use command below): tf-nightly-gpu 2.5.0 210112
Python version:3.8
CUDA/cuDNN version: 11.1 / maybe 8(?)
GPU model and memory: RTX 3090 24GB MEM


TF 2.0: v1.12.1-48890-g670cc3fa48f 2.5.0-dev20210113

my custom loss function looks like this,
import tensorflow as tf
from keras import backend as K
from tensorflow.keras.losses import Loss

@tf.function
def mase(y_true, y_pred, seasonality=1):
    def _naive_forecasting(actual, seasonality: int = 1):
        return actual[:-seasonality]
    
    def _error(actual, predicted):
        return actual - predicted
    
    def _mae(actual, predicted):
        return K.mean(K.abs(_error(actual, predicted)))
    
#     K.print_tensor(y_true,message='\ny_true==')
#     K.print_tensor(y_pred,message='\ny_pred==')
#     K.print_tensor(_mae(y_true, y_pred) / _mae(y_true[seasonality:], _naive_forecasting(y_true, seasonality)),message='\nminus==')
#     print(y_true, y_pred)
    return _mae(y_true, y_pred) / _mae(y_true[seasonality:], _naive_forecasting(y_true, seasonality))

and use like this,
model.compile(loss=MASE(1), optimizer=Adam(lr=0.001))
...
model.fit(x_concat_data[train], y_concat_data[train], batch_size=batch_size, epochs=epoch, verbose=2, shuffle=True)
...
model.evaluate(x_concat_data[validation], y_concat_data[validation], batch_size=batch_size, callbacks=[early_stopping])

I use rtx 3090 and want to train with gpu
cpu training is good!
BUT! when i use gpu, python kernel is dead!
kernel output like this
2021-01-14 09:33:55.296929: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:127] None of the MLIR optimization passes are enabled (registered 2)
Epoch 1/1000
d:/&gt;
what is my problem?

2
This informative message is saying MLIR is not being used. Usually its not expected to use the MLIR implementation and are instead expected to use the non-MLIR feature complete implementation.

I uninstalled tf-nightly version, and installing tensorflow-gpu 2.4.0.
that version work good
issue happend only tf-nightly version. maybe i think that is nightly version`s bug. but i don`t know why happened like that.
i will use tensorflow-gpu 2.4.0. so, this issue is complete to me.
		</comment>
		<comment id='6' author='YooSungHyun' date='2021-01-14T04:31:37Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/46417&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/46417&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>