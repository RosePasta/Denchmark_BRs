<bug id='38152' author='formath' open_date='2020-04-02T03:56:23Z' closed_time='2020-04-02T04:51:18Z'>
	<summary>Java SavedModelBundle import LookupTable core dump</summary>
	<description>
I use libtensorflow.jar to load a model with saved_model format. The core dump occurs in LookupTableImportOp computation stage. However, this model could be loaded successfully via c++ tensoflow-serving executable or python tf.saved_model.loader.

tensorflow 1.12.
mac os. cpu only.

&lt;denchmark-code&gt;public static void main(String[] args) {
    System.out.println(TensorFlow.version());
    SavedModelBundle b = SavedModelBundle.load("./model/", "serve");
    b.close();
}
&lt;/denchmark-code&gt;

Error message:
&lt;denchmark-code&gt;1.12.0
2020-04-02 12:09:07.285904: I tensorflow/cc/saved_model/reader.cc:31] Reading SavedModel from: ./model/
2020-04-02 12:09:07.295754: I tensorflow/cc/saved_model/reader.cc:54] Reading meta graph with tags { serve }
2020-04-02 12:09:07.342467: I tensorflow/cc/saved_model/loader.cc:162] Restoring SavedModel bundle.
[thread 23555 also had an error][thread 42243 also had an error]#

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV
 (0xb) at pc=0x00000001163dec0e[thread 23299 also had an error], pid=93091
, tid=0x000000000000a103[thread 41475 also had an error]

#
[thread 41731 also had an error]# JRE version: Java(TM) SE Runtime Environment (8.0_201-b09) (build 1.8.0_201-b09)
[thread 42499 also had an error]

# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.201-b09 mixed mode bsd-amd64 compressed oops)
# Problematic frame:
# C  [libtensorflow_framework.so+0x44c0e]  tensorflow::lookup::LookupInterface::CheckKeyAndValueTensorsHelper(tensorflow::Tensor const&amp;, tensorflow::Tensor const&amp;)+0x6e
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again

&lt;/denchmark-code&gt;

Stack message:
&lt;denchmark-code&gt;Stack: [0x000070000e240000,0x000070000e2c0000],  sp=0x000070000e2bf4b0,  free space=509k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libtensorflow_framework.so+0x44c0e]  tensorflow::lookup::LookupInterface::CheckKeyAndValueTensorsHelper(tensorflow::Tensor const&amp;, tensorflow::Tensor const&amp;)+0x6e
C  [libtensorflow_framework.so+0x44e2e]  tensorflow::lookup::LookupInterface::CheckKeyAndValueTensorsForImport(tensorflow::Tensor const&amp;, tensorflow::Tensor const&amp;)+0xe
C  [libtensorflow_jni.dylib+0x10454e0]  tensorflow::LookupTableImportOp::Compute(tensorflow::OpKernelContext*)+0x140
C  [libtensorflow_framework.so+0x23b362]  tensorflow::(anonymous namespace)::ExecutorState::Process(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long)+0x1f12
C  [libtensorflow_framework.so+0x2434ba]  std::__1::__function::__func&lt;std::__1::__bind&lt;void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&amp;, long long&amp;&gt;, std::__1::allocator&lt;std::__1::__bind&lt;void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&amp;, long long&amp;&gt; &gt;, void ()&gt;::operator()()+0x3a
C  [libtensorflow_framework.so+0x29c58f]  Eigen::NonBlockingThreadPoolTempl&lt;tensorflow::thread::EigenEnvironment&gt;::WorkerLoop(int)+0x54f
C  [libtensorflow_framework.so+0x29bf3f]  std::__1::__function::__func&lt;tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function&lt;void ()&gt;)::'lambda'(), std::__1::allocator&lt;tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function&lt;void ()&gt;)::'lambda'()&gt;, void ()&gt;::operator()()+0x2f
C  [libtensorflow_framework.so+0x2c0990]  void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, std::__1::function&lt;void ()&gt; &gt; &gt;(void*)+0x30
C  [libsystem_pthread.dylib+0x3305]  _pthread_body+0x7e
C  [libsystem_pthread.dylib+0x626f]  _pthread_start+0x46
C  [libsystem_pthread.dylib+0x2415]  thread_start+0xd

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='formath' date='2020-04-02T04:51:18Z'>
		fixed
		</comment>
		<comment id='2' author='formath' date='2020-04-02T04:51:20Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38152&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38152&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='formath' date='2020-10-29T11:17:24Z'>
		Recently, I also meet with this problem. I load my pb model in java and build with maven. But when I execute my jar file, it would  throw core dump error about jvm.
How does you figure out this problem? @ formath
		</comment>
		<comment id='4' author='formath' date='2020-10-29T12:07:28Z'>
		&lt;denchmark-link:https://github.com/cgpeter96&gt;@cgpeter96&lt;/denchmark-link&gt;
 For me the reason is that  is not matched between training and prediction.
		</comment>
		<comment id='5' author='formath' date='2020-10-30T16:06:43Z'>
		&lt;denchmark-link:https://github.com/formath&gt;@formath&lt;/denchmark-link&gt;

Is this still an issue
		</comment>
	</comments>
</bug>