<bug id='34733' author='Emnolope' open_date='2019-12-01T09:41:03Z' closed_time='2019-12-02T21:22:19Z'>
	<summary>loss=tf.keras.backend.sparse_categorical_crossentropy is different than loss='sparse_categorical_crossentropy'</summary>
	<description>
So they run differently, with the version from the backend performing significantly worse.
This was performed on a google colab notebook reset each time, with GPU acceleration.
Code 1
`
%tensorflow_version 2.x
import tensorflow as tf
print(tf.version)
mnist = tf.keras.datasets.fashion_mnist
(training_images,training_labels),(test_images,test_labels)=mnist.load_data()
training_images=training_images/255.0
#training_images=tf.reshape(training_images,(training_images.shape+(1,)))
test_images=test_images/255.0
#test_images=tf.reshape(test_images,(test_images.shape+(1,)))
model = tf.keras.models.Sequential([
tf.keras.layers.InputLayer(input_shape=(28, 28)),
tf.keras.layers.Reshape((28, 28, 1)),
tf.keras.layers.Conv2D(64,(3,3),activation=tf.nn.leaky_relu,input_shape=(28,28,1)),
tf.keras.layers.MaxPooling2D(2,2),
tf.keras.layers.Conv2D(64,(3,3),activation=tf.nn.leaky_relu),
tf.keras.layers.MaxPooling2D(2,2),
tf.keras.layers.Flatten(),
tf.keras.layers.Dense(128,activation=tf.nn.leaky_relu),
tf.keras.layers.Dense(10,activation='softmax')
])
model.compile(optimizer='adam',loss=tf.keras.backend.sparse_categorical_crossentropy,metrics=
['accuracy'])
#model.summary()
model.fit(training_images,training_labels,epochs=5)
test_loss=model.evaluate(test_images,test_labels)
`
Results 1
`
TensorFlow 2.x selected.
2.0.0
Downloading data from &lt;denchmark-link:https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-&gt;https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-&lt;/denchmark-link&gt;

idx1-ubyte.gz
32768/29515 [=================================] - 0s 0us/step
Downloading data from &lt;denchmark-link:https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-&gt;https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-&lt;/denchmark-link&gt;

idx3-ubyte.gz
26427392/26421880 [==============================] - 0s 0us/step
Downloading data from &lt;denchmark-link:https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-&gt;https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-&lt;/denchmark-link&gt;

idx1-ubyte.gz
8192/5148 [===============================================] - 0s 0us/step
Downloading data from &lt;denchmark-link:https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-&gt;https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-&lt;/denchmark-link&gt;

idx3-ubyte.gz
4423680/4422102 [==============================] - 0s 0us/step
Train on 60000 samples
Epoch 1/5
60000/60000 [==============================] - 24s 392us/sample - loss: 0.4204 -
accuracy: 0.1043
Epoch 2/5
60000/60000 [==============================] - 18s 301us/sample - loss: 0.2878 -
accuracy: 0.1026
Epoch 3/5
60000/60000 [==============================] - 18s 307us/sample - loss: 0.2474 -
accuracy: 0.1016
Epoch 4/5
60000/60000 [==============================] - 18s 293us/sample - loss: 0.2156 -
accuracy: 0.1011
Epoch 5/5
60000/60000 [==============================] - 18s 296us/sample - loss: 0.1936 -
accuracy: 0.1011
`
Code 2
`
%tensorflow_version 2.x
import tensorflow as tf
print(tf.version)
mnist = tf.keras.datasets.fashion_mnist
(training_images,training_labels),(test_images,test_labels)=mnist.load_data()
training_images=training_images/255.0
#training_images=tf.reshape(training_images,(training_images.shape+(1,)))
test_images=test_images/255.0
#test_images=tf.reshape(test_images,(test_images.shape+(1,)))
model = tf.keras.models.Sequential([
tf.keras.layers.InputLayer(input_shape=(28, 28)),
tf.keras.layers.Reshape((28, 28, 1)),
tf.keras.layers.Conv2D(64,(3,3),activation=tf.nn.leaky_relu,input_shape=(28,28,1)),
tf.keras.layers.MaxPooling2D(2,2),
tf.keras.layers.Conv2D(64,(3,3),activation=tf.nn.leaky_relu),
tf.keras.layers.MaxPooling2D(2,2),
tf.keras.layers.Flatten(),
tf.keras.layers.Dense(128,activation=tf.nn.leaky_relu),
tf.keras.layers.Dense(10,activation='softmax')
])
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])
#model.summary()
model.fit(training_images,training_labels,epochs=5)
test_loss=model.evaluate(test_images,test_labels)
`
Results 2
`
TensorFlow 2.x selected.
2.0.0
Downloading data from &lt;denchmark-link:https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-&gt;https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-&lt;/denchmark-link&gt;

idx1-ubyte.gz
32768/29515 [=================================] - 0s 0us/step
Downloading data from &lt;denchmark-link:https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-&gt;https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-&lt;/denchmark-link&gt;

idx3-ubyte.gz
26427392/26421880 [==============================] - 0s 0us/step
Downloading data from &lt;denchmark-link:https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-&gt;https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-&lt;/denchmark-link&gt;

idx1-ubyte.gz
8192/5148 [===============================================] - 0s 0us/step
Downloading data from &lt;denchmark-link:https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-&gt;https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-&lt;/denchmark-link&gt;

idx3-ubyte.gz
4423680/4422102 [==============================] - 0s 0us/step
Train on 60000 samples
Epoch 1/5
60000/60000 [==============================] - 11s 186us/sample - loss: 0.4279 -
accuracy: 0.8448
Epoch 2/5
60000/60000 [==============================] - 6s 92us/sample - loss: 0.2905 -
accuracy: 0.8934
Epoch 3/5
60000/60000 [==============================] - 6s 92us/sample - loss: 0.2466 - accuracy: 0.9096
Epoch 4/5
60000/60000 [==============================] - 6s 92us/sample - loss: 0.2177 - accuracy: 0.9183
Epoch 5/5
60000/60000 [==============================] - 5s 91us/sample - loss: 0.1942 - accuracy: 0.9271
`
	</description>
	<comments>
		<comment id='1' author='Emnolope' date='2019-12-02T06:26:45Z'>
		I have tried on colab with TF version 2.0  and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/30c0346fd136e1b76963fa6235326846/untitled426.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='Emnolope' date='2019-12-02T21:22:19Z'>
		&lt;denchmark-link:https://github.com/Emnolope&gt;@Emnolope&lt;/denchmark-link&gt;
 You should have used  instead of . Please check the TF &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/losses/sparse_categorical_crossentropy&gt;website&lt;/denchmark-link&gt;
 for more details on accessing this loss function.
When I used  inplace of  , the results were very similar. Please take a look at the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/4a001b4776ec4233e30a7e23ec2aee51/untitled426.ipynb&gt;gist here&lt;/denchmark-link&gt;
.
I am closing this issue as it was resolved. Please feel free to reopen if the issue persists again. Thanks!
		</comment>
		<comment id='3' author='Emnolope' date='2019-12-02T21:22:21Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34733&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/34733&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>