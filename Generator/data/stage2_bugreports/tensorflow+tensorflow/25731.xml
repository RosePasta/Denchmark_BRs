<bug id='25731' author='DecentGradient' open_date='2019-02-13T23:18:08Z' closed_time='2019-03-07T14:27:37Z'>
	<summary>AttributeError: 'Tensor' object has no attribute 'numpy' in image_captioning_with_attention.ipynb</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): NO
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):Colab
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): pip
TensorFlow version (use command below): 2.0
Python version:3.x

Describe the current behavior
When running the code in

Caching the features extracted from InceptionV3
AttributeError: 'Tensor' object has no attribute 'numpy'

Describe the expected behavior
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
for img, path in tqdm(image_dataset):
batch_features = image_features_extract_model(img)
batch_features = tf.reshape(batch_features,
(batch_features.shape[0], -1, batch_features.shape[3]))
for bf, p in zip(batch_features, path):
path_of_feature = p.numpy().decode("utf-8")
np.save(path_of_feature, bf.numpy())
Other info / logs
AttributeError                            Traceback (most recent call last)
 in ()
15   for bf, p in zip(batch_features, path):
16     path_of_feature = p.numpy().decode("utf-8")
---&gt; 17     np.save(path_of_feature, bf.numpy())
AttributeError: 'Tensor' object has no attribute 'numpy'
	</description>
	<comments>
		<comment id='1' author='DecentGradient' date='2019-02-14T21:48:38Z'>
		In order to expedite the trouble-shooting process, please provide a code snippet/weblink of the tutorial to reproduce the issue reported here. Thanks!
		</comment>
		<comment id='2' author='DecentGradient' date='2019-02-14T21:54:54Z'>
		&lt;denchmark-link:https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/r2/tutorials/generative/image_captioning.ipynb#scrollTo=Dx_fvbVgRPGQ&gt;https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/r2/tutorials/generative/image_captioning.ipynb#scrollTo=Dx_fvbVgRPGQ&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='DecentGradient' date='2019-02-14T22:46:44Z'>
		Thanks for the link and creating this issue.
		</comment>
		<comment id='4' author='DecentGradient' date='2019-02-14T22:52:04Z'>
		Thanks for dealing with this!
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Thu, Feb 14, 2019, 5:50 PM ymodak ***@***.*** wrote:
 Thanks for the link and creating this issue.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 &lt;#25731 (comment)&gt;,
 or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/AEZlcMANlqeX7KDZBKrNtFveT4EbYpYmks5vNeg7gaJpZM4a6egl&gt;
 .



		</comment>
		<comment id='5' author='DecentGradient' date='2019-03-07T14:27:37Z'>
		This is resolved in the alpha, closing
		</comment>
		<comment id='6' author='DecentGradient' date='2019-03-13T03:25:48Z'>
		I have installed the 2.0 alpha version but still get the 'Tensor' object has no attribute 'numpy' error during runtime. Why? It works fines in ipython terminal.
I also tried calling import tensorflow.compat.v1 as tf tf.enable_eager_execution() at the beginning of the code, but still the error.

Traceback (most recent call last):
File "cnn.py", line 192, in 
tf.app.run()
File "/home/bowang/.local/lib/python3.5/site-packages/tensorflow/python/platform/app.py", line 40, in run
_run(main=main, argv=argv, flags_parser=_parse_flags_tolerate_undef)
File "/home/aaa/.local/lib/python3.5/site-packages/absl/app.py", line 300, in run
_run_main(main, args)
File "/home/aaa/.local/lib/python3.5/site-packages/absl/app.py", line 251, in _run_main
sys.exit(main(argv))
File "cnn.py", line 161, in main
tf.estimator.train_and_evaluate(model, train_spec, eval_spec)
File "/home/aaa/.local/lib/python3.5/site-packages/tensorflow_estimator/python/estimator/training.py", line 473, in train_and_evaluate
return executor.run()
File "/home/aaa/.local/lib/python3.5/site-packages/tensorflow_estimator/python/estimator/training.py", line 613, in run
return self.run_local()
File "/home/aaa/.local/lib/python3.5/site-packages/tensorflow_estimator/python/estimator/training.py", line 714, in run_local
saving_listeners=saving_listeners)
File "/home/bowang/.local/lib/python3.5/site-packages/tensorflow_estimator/python/estimator/estimator.py", line 359, in train
loss = self._train_model(input_fn, hooks, saving_listeners)
File "/home/aaa/.local/lib/python3.5/site-packages/tensorflow_estimator/python/estimator/estimator.py", line 1139, in _train_model
return self._train_model_default(input_fn, hooks, saving_listeners)
File "/home/aaa/.local/lib/python3.5/site-packages/tensorflow_estimator/python/estimator/estimator.py", line 1169, in _train_model_default
features, labels, ModeKeys.TRAIN, self.config)
File "/home/aaa/.local/lib/python3.5/site-packages/tensorflow_estimator/python/estimator/estimator.py", line 1127, in _call_model_fn
model_fn_results = self._model_fn(features=features, **kwargs)
File "/data/home/BASELINES/tf_v2/network.py", line 140, in model_fn2
logits_train = conv_net(features, params, reuse=False, is_training=True)
File "/data/home/BASELINES/tf_v2/network.py", line 40, in conv_net
lens = np.array([len(xi) for xi in x.numpy()])
AttributeError: 'Tensor' object has no attribute 'numpy'

		</comment>
		<comment id='7' author='DecentGradient' date='2019-03-13T03:45:02Z'>
		This seems like the code is running with estimators. Can you share the code?
		</comment>
		<comment id='8' author='DecentGradient' date='2019-03-13T03:59:32Z'>
		&lt;denchmark-link:https://github.com/yashk2810&gt;@yashk2810&lt;/denchmark-link&gt;
 Yes I am. So I just call 
&lt;denchmark-code&gt;model = tf.estimator.Estimator(model_fn, logdir, cfg, params)

def model_fn(features, labels, mode, params):

    logits_train = conv_net(features, params, reuse=False, is_training=True)
    logits_test = conv_net(features, params, reuse=True, is_training=False)
    pred_classes = tf.argmax(logits_test, axis=1)
    ... ...
    ... ...

&lt;/denchmark-code&gt;

conv_net function:
&lt;denchmark-code&gt;def conv_net(x_dict, params, reuse, is_training):
    # Define a scope for reusing the variables
    with tf1.variable_scope('ConvNet', reuse=reuse):
        x = x_dict['features']

        lens = np.array([len(xi) for xi in x.numpy()])
        mask = np.arange(lens.max()) &lt; lens[:,None]
        padded = np.zeros(mask.shape)
        padded[mask] = np.hstack((x[:]))

        x = tf.reshape(padded, shape=[-1, padded.shape[1], 1])
        filter_sizes = [8, 16, 32, 64]

        pooled_outputs = []
        for filter_size in filter_sizes:
            with tf.name_scope('conv_maxpool-%s' % filter_size):
                conv1 = tf.layers.conv1d(x, 40, filter_size, strides=30, # 40 filters
                                        padding='same', activation=tf.nn.relu, 
                                        kernel_initializer=tf.keras.initializers.VarianceScaling()
                                        )

                pool1 = tf.reduce_max(input_tensor=conv1, axis=1)
                pooled_outputs.append(pool1)

        # Concatenation and flattening
        concat = tf.concat(pooled_outputs, axis=-1)
        flat = tf.keras.layers.Flatten()(concat)

        # add dropout

        with tf.name_scope("dense_layers"):
            fc1 = tf.layers.dense(flat, params['n_hidden_1'], activation=tf.nn.relu,
                                kernel_initializer=tf.keras.initializers.VarianceScaling()
                                )
            # add dropout (if is_training is False, dropout is not applied)
            dropout_1 = tf.layers.dropout(fc1, rate=params['dropout_rate'], 
                                    training=is_training)
                                
            out = tf.layers.dense(dropout_1, 4, kernel_initializer=tf.keras.initializers.VarianceScaling())

    return out
&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='DecentGradient' date='2019-03-13T16:49:36Z'>
		&lt;denchmark-link:https://stackoverflow.com/questions/55147097/tensor-conversion-function-numpy-doesnt-work-within-tf-estimator-model-functi/55147364#55147364&gt;https://stackoverflow.com/questions/55147097/tensor-conversion-function-numpy-doesnt-work-within-tf-estimator-model-functi/55147364#55147364&lt;/denchmark-link&gt;

Ok, so

Calling methods of Estimator will work while eager execution is enabled. However, the model_fn and input_fn is not executed eagerly

		</comment>
	</comments>
</bug>