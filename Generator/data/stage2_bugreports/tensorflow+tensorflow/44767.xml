<bug id='44767' author='msqueo' open_date='2020-11-11T13:33:57Z' closed_time='2020-12-24T09:33:55Z'>
	<summary>**kwargs weights - Initialization Layer</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary):
TensorFlow version (use command below):
Python version:
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Describe the current behavior
When a Layer is initialized, or a subclassed layer as Dense, with 'weights' among the **kwargs, no weights are stored apparently. I believe the bug is in line 2658 in the base_layer.py file.
Describe the expected behavior
I would expect to have weights set as per initialization, when calling Layer.get_weights()
Standalone code to reproduce the issue
import tensorflow as tf
weights = tf.random.uniform(shape = [20,10]), tf.random.uniform(shape = [10,])
layer = tf.keras.layers.Layer(weights = weights)
dense = tf.keras.layers.Dense(10, weights = weights)
layer.get_weights()
dense.get_weights()
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='msqueo' date='2020-11-12T13:16:39Z'>
		&lt;denchmark-link:https://github.com/msqueo&gt;@msqueo&lt;/denchmark-link&gt;

We see that the issue template has not been filled, could you please do so as it helps us analyse the issue [tf version, steps followed before you ran into this error or stand alone code to reproduce the issue faced]
I ran the code shared on tf 2.3, please refer to &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/ed8b3f6db002f57cf0a4b5c7f70cd6af/untitled460.ipynb&gt;this gist&lt;/denchmark-link&gt;
 and confirm.
		</comment>
		<comment id='2' author='msqueo' date='2020-11-12T19:07:04Z'>
		&lt;denchmark-code&gt;import tensorflow as tf
import numpy as np
weights = np.ones((10, 11))
dense = tf.keras.layers.Dense(units=11, input_shape=(10,),
                          weights=[weights],
                          use_bias=False)
model = tf.keras.models.Sequential()
model.add(dense)
dense_init_weights = model.layers[0].get_weights()
np.allclose(weights,dense_init_weights)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='msqueo' date='2020-11-19T19:41:53Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='4' author='msqueo' date='2020-11-22T21:40:51Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 thanks for taking care of this issue. Yes, I am using it on TensorFlow 2.3.0.
&lt;denchmark-link:https://github.com/bhack&gt;@bhack&lt;/denchmark-link&gt;
 thanks for your solution. I assume that you are able to retrieve custom weights, initialized at layer inception, only if the layer is assigned to a model. Correct?
		</comment>
		<comment id='5' author='msqueo' date='2020-11-22T23:45:48Z'>
		
thanks for your solution. I assume that you are able to retrieve custom weights, initialized at layer inception, only if the layer is assigned to a model. Correct?

Check layers methods e.g.  at &lt;denchmark-link:https://keras.io/guides/making_new_layers_and_models_via_subclassing/&gt;https://keras.io/guides/making_new_layers_and_models_via_subclassing/&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='msqueo' date='2020-12-17T09:03:59Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='7' author='msqueo' date='2020-12-24T09:33:53Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='8' author='msqueo' date='2020-12-24T09:33:56Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44767&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/44767&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>