<bug id='28923' author='batikus' open_date='2019-05-22T10:08:28Z' closed_time='2019-09-06T20:47:18Z'>
	<summary>TF 2.0 save/restore DenseFeatures</summary>
	<description>
** Code **
Follwing this guide i created a model to classify structured data &lt;denchmark-link:https://www.tensorflow.org/alpha/tutorials/keras/feature_columns&gt;https://www.tensorflow.org/alpha/tutorials/keras/feature_columns&lt;/denchmark-link&gt;
 :
&lt;denchmark-code&gt;feature_columns = []
headers = dataframe.columns.tolist()

# feature cols
for header in headers:
    temp = feature_column.numeric_column(header)
    feature_columns.append(feature_column.bucketized_column(temp, boundaries=[-89, -70, -65, -60, -55, -50, -40, -30, -20]))
    #feature_columns.append(temp) #old code used without buckets. only numeric columns


feature_layer = tf.keras.layers.DenseFeatures(feature_columns)

model = tf.keras.Sequential([
  feature_layer,
  layers.Dense(128, activation='relu'),
  layers.Dense(128, activation='relu'),
  layers.Dense(128, activation='relu'),
  layers.Dense(3, activation='sigmoid') #cambiare con il numero di zone
])
&lt;/denchmark-code&gt;

System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Win10
TensorFlow version (use command below): 2.0.0 alpha
Python version: 3.6

Describe the behavior
Now when i try to save with the usual
model.save('path_to_my_model.h5')
i cannot restore the model since i get an exception:

Unknown layer: DenseFeatures

looking at some other &lt;denchmark-link:url&gt;https://github.com/tensorflow/tensorflow/issues/26835&lt;/denchmark-link&gt;
 posts  I tried with

but here I get another exception:

init() missing 1 required positional argument: 'feature_columns'

Tried to restore using
&lt;denchmark-code&gt;for header in headers:
    temp = feature_column.numeric_column(header)
    feature_columns.append(feature_column.bucketized_column(temp, boundaries=[-89, -70, -65, -60, -55, -50, -40, -30, -20]))

feature_layer = tf.keras.layers.DenseFeatures(feature_columns)

new_model = tf.keras.models.load_model('guesser.h5',custom_objects={'DenseFeatures':feature_layer})

new_model.summary()
&lt;/denchmark-code&gt;

but it always give me the feature_columns error
	</description>
	<comments>
		<comment id='1' author='batikus' date='2019-05-24T06:39:48Z'>
		Tried with 2.0.0-alpha on Colab and was able to get the mentioned output.
		</comment>
		<comment id='2' author='batikus' date='2019-07-04T05:10:23Z'>
		I tried with tensorflow-2.0.0beta1, the issue is still there.
		</comment>
		<comment id='3' author='batikus' date='2019-07-04T17:13:59Z'>
		I spent time debugging issue in load_model(). Here is my theory:

As for the error message "Unknown layer: DenseFeatures",  the problem happens with this line of code: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/layers/serialization.py#L82.
DenseFeatures class is not part of the dict returned by the call to globals().

This problem can be solved (not sure if it is a correct way) by adding the following import to serialization.py:
from tensorflow.python.feature_column.feature_column_v2 import DenseFeatures

After that, load_model() will complain about "init() missing 1 required positional argument: 'feature_columns'". This happens in the init of DenseFeatures class. I think the root cause is that feature columns information is not serialized in the saved model file or is not read from the file correctly. From the deserialized model_config dict, I don't see feature columns.

Could anyone from the team take a look?  Thank you.
		</comment>
		<comment id='4' author='batikus' date='2019-07-04T18:12:06Z'>
		Digging more on this. based on this commit: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/cd09510f9218220b872803c9ee70ba1dcd8c0f45#diff-99593c5667932dcaa61fb3e1b4921cc1&gt;cd09510#diff-99593c5667932dcaa61fb3e1b4921cc1&lt;/denchmark-link&gt;
, it seems like &lt;denchmark-link:https://github.com/karmel&gt;@karmel&lt;/denchmark-link&gt;
 was fixing this issue and the fix hasn't made it to tf2.0 beta1 yet?
		</comment>
		<comment id='5' author='batikus' date='2019-07-08T17:36:42Z'>
		Can you try using the TensorFlow format for saving and restoring?
&lt;denchmark-code&gt;# feature cols
for header in headers:
    temp = feature_column.numeric_column(header)
    feature_columns.append(feature_column.bucketized_column(temp, boundaries=[-89, -70, -65, -60, -55, -50, -40, -30, -20]))
    #feature_columns.append(temp) #old code used without buckets. only numeric columns


feature_layer = tf.keras.layers.DenseFeatures(feature_columns)

model = tf.keras.Sequential([
  feature_layer,
  layers.Dense(128, activation='relu'),
  layers.Dense(128, activation='relu'),
  layers.Dense(128, activation='relu'),
  layers.Dense(3, activation='sigmoid') #cambiare con il numero di zone
])

model.save('output_path', format='tf')
&lt;/denchmark-code&gt;

That should work with the beta, though the change in question may have missed the cut. If it doesn't work, try with the nightly 2.0 release: &lt;denchmark-link:https://pypi.org/project/tf-nightly-2.0-preview/&gt;https://pypi.org/project/tf-nightly-2.0-preview/&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='batikus' date='2019-07-24T18:00:23Z'>
		With tf.version 2.0.0-dev20190724, I was not able to save a model using model.save('output_path', save_format='tf'). I used the keras functional api to build the model.
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
&lt;ipython-input-16-070fe449db81&gt; in &lt;module&gt;
      1 # doesn't open successfully
----&gt; 2 model.save('wd-model', save_format='tf')

~/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/network.py in save(self, filepath, overwrite, include_optimizer, save_format)
   1158     ```
   1159     """
-&gt; 1160     saving.save_model(self, filepath, overwrite, include_optimizer, save_format)
   1161 
   1162   def save_weights(self, filepath, overwrite=True, save_format=None):

~/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/save.py in save_model(model, filepath, overwrite, include_optimizer, save_format)
    105         model, filepath, overwrite, include_optimizer)
    106   else:
--&gt; 107     saved_model_save.save(model, filepath, overwrite, include_optimizer)
    108 
    109 

~/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/keras/saving/saved_model/save.py in save(model, filepath, overwrite, include_optimizer)
     83     model.optimizer = None
     84 
---&gt; 85   save_lib.save(model, filepath)
     86 
     87   if not include_optimizer:

~/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/saved_model/save.py in save(obj, export_dir, signatures)
    838   object_saver = util.TrackableSaver(checkpoint_graph_view)
    839   asset_info, exported_graph = _fill_meta_graph_def(
--&gt; 840       meta_graph_def, saveable_view, signatures)
    841   saved_model.saved_model_schema_version = (
    842       constants.SAVED_MODEL_SCHEMA_VERSION)

~/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/saved_model/save.py in _fill_meta_graph_def(meta_graph_def, saveable_view, signature_functions)
    568 
    569   with exported_graph.as_default():
--&gt; 570     signatures = _generate_signatures(signature_functions, resource_map)
    571     for concrete_function in saveable_view.concrete_functions:
    572       concrete_function.add_to_graph()

~/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/saved_model/save.py in _generate_signatures(signature_functions, resource_map)
    442             argument_inputs, signature_key, function.name))
    443     outputs = _call_function_with_mapped_captures(
--&gt; 444         function, mapped_inputs, resource_map)
    445     signatures[signature_key] = signature_def_utils.build_signature_def(
    446         _tensor_dict_to_tensorinfo(exterior_argument_placeholders),

~/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/saved_model/save.py in _call_function_with_mapped_captures(function, args, resource_map)
    393   """Calls `function` in the exported graph, using mapped resource captures."""
    394   export_captures = _map_captures_to_created_tensors(
--&gt; 395       function.graph.captures, resource_map)
    396   mapped_inputs = args + export_captures
    397   # Calls the function quite directly, since we have new captured resource

~/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow_core/python/saved_model/save.py in _map_captures_to_created_tensors(original_captures, resource_map)
    315            "be tracked by assigning them to an attribute of a tracked object "
    316            "or assigned to an attribute of the main object directly.")
--&gt; 317           .format(interior))
    318     export_captures.append(mapped_resource)
    319   return export_captures

AssertionError: Tried to export a function which references untracked object Tensor("StatefulPartitionedCall/args_55:0", shape=(), dtype=resource).TensorFlow objects (e.g. tf.Variable) captured by functions must be tracked by assigning them to an attribute of a tracked object or assigned to an attribute of the main object directly.```
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='batikus' date='2019-07-26T21:35:34Z'>
		&lt;denchmark-link:https://github.com/cysmnl&gt;@cysmnl&lt;/denchmark-link&gt;
 Can you post a standalone code to reproduce the issue? Thanks!
		</comment>
		<comment id='8' author='batikus' date='2019-08-08T11:40:36Z'>
		I am  confused about which API I should use: see &lt;denchmark-link:https://colab.research.google.com/drive/1CXESHGbE8pPZqtBPcsS5UV2tj_MYrxaH&gt;this simple Colab example&lt;/denchmark-link&gt;
 with different approaches of  and  a  model with .
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Save:
&lt;denchmark-code&gt;🧐 Saved with keras APIs.
🧐 Saved with keras APIs in SavedModel format.
😵 Could **not** save with export_saved_model: __init__() missing 1 required positional argument: 'feature_columns'
🧐 Saved with tf.saved_model.save.
&lt;/denchmark-code&gt;

Restore:
&lt;denchmark-code&gt;😵 Couldn't load model via tf.keras.models.load_model (without custom objects): Unknown layer: DenseFeatures
😵 Couldn't load model via tf.keras.models.load_model (with custom objects): __init__() missing 1 required positional argument: 'feature_columns'
😵 Couldn't load model via tf.keras.experimental.load_from_saved_model: keras_model_tf/assets/saved_model.json; No such file or directory
😵 Couldn't load model via tf.keras.models.load_model: Passing a dictionary input to a Sequential Model which doesn't have FeatureLayer as the first layer is an error.
🧐 Model restored via `tf.saved.model.load('keras_model_tf')`
   Accuracy: 95.00%
🧐 Model restored via `tf.saved.model.load('tf_saved_model/1/')`
   Accuracy: 95.00%
&lt;/denchmark-code&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

I am now quite unsure about where the issue is and what are the best practices for exporting and restoring in this case.
		</comment>
		<comment id='9' author='batikus' date='2019-08-13T22:05:56Z'>
		I am currently submitting a fix for this issue, which will allow DenseFeatures to be saved and loaded using Keras APIs (model.save and tf.keras.models.load_model).
The best practices can be summed up to:
If you are planning to load the model back into Keras, use the Keras APIs for saving and loading. If you're not planning on using the Keras APIs to further train the model, then tf.saved_model.save and tf.saved_model.load is sufficient.
I believe the docs need to be updated, as the experimental function tf.keras.experimental.export_saved_model is now deprecated.
		</comment>
		<comment id='10' author='batikus' date='2019-09-06T00:03:49Z'>
		&lt;denchmark-link:https://github.com/batikus&gt;@batikus&lt;/denchmark-link&gt;
 Is this resolved? Please take a look at the  tutorial. I could save the model in "tf" and ".h5" formats without any issue.  Please check the &lt;denchmark-link:https://colab.sandbox.google.com/gist/jvishnuvardhan/b6d63d35fd05058a3eb204891ca891c0/feature_columns.ipynb&gt;gist here&lt;/denchmark-link&gt;
. If you still have an issue, please provide a simple standalone code to reproduce the issue. Thanks!
		</comment>
		<comment id='11' author='batikus' date='2019-09-06T20:47:18Z'>
		I am closing the issue as it was resolved in tf-nightly-2.0-preview. Please feel free to open it if the issue persists again. Thanks!
		</comment>
		<comment id='12' author='batikus' date='2019-09-06T20:47:19Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28923&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28923&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='batikus' date='2019-09-10T09:41:16Z'>
		UPD: after investigation found that for SequenceFeatures should be open another issue, because this fix does not cover SequenceFeatures behavior. The new issue is &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/32385&gt;#32385&lt;/denchmark-link&gt;


I am currently submitting a fix for this issue, which will allow DenseFeatures to be saved and loaded using Keras APIs (model.save and tf.keras.models.load_model).

&lt;denchmark-link:https://github.com/k-w-w&gt;@k-w-w&lt;/denchmark-link&gt;
 , does this fix cover  as well?
I save model by tf.keras.models.model.save('MODEL_PATH.h5'). Then while loading model by tf.keras.models.load_model(MODEL_PATH.h5), I experience the similar error message as described in this issue:

Unknown layer: SequenceFeatures

I have not found separete issue for save\load problems concerning SequenceFeatures but my problem is reproduced in tensorflow 2.0.0-rc0 and 2.0.0b1  and do not reproduced in tf-nightly-2.0-preview. It is not clear now, open new issue for SequenceFeatures or not.
		</comment>
	</comments>
</bug>