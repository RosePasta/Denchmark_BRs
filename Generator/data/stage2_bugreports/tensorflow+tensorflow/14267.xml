<bug id='14267' author='stereomatchingkiss' open_date='2017-11-06T02:14:50Z' closed_time='2017-12-15T05:04:56Z'>
	<summary>opencv cannot read any image with tensorflow</summary>
	<description>
It is the same issue as &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/1924&gt;#1924&lt;/denchmark-link&gt;
, since the bug is closed, I open a new one, because this bug haven't been solved yet.
From subashp

I am using the TF 1.4 and linking against C++ code. Below code always says it failed to read the file. I have incorporated above suggestions and it doesnt make any difference. Thoughts/suggestions?

&lt;denchmark-code&gt;cv::String pathImg = argv[1];
cv::Mat img = cv::imread(pathImg, CV_LOAD_IMAGE_COLOR | CV_LOAD_IMAGE_ANYDEPTH);
if (img.empty()) {
error("Failed to read the file {}", argv[1]);
return -1;
}

&lt;/denchmark-code&gt;

From rmmal

we cloned the latest version of tensorflow and still there is a problem of reading images using opencv , everytime i initiate a TENSOR object the opencv doesn't work.

From me, using tensor1.4, build from source
&lt;denchmark-code&gt;#include &lt;opencv2/core.hpp&gt;
#include &lt;opencv2/highgui.hpp&gt;

//unable to read any image if I include this header, no matter
//it before or after opencv
#include &lt;tensorflow/cc/ops/const_op.h&gt;

#include &lt;iostream&gt;

int main(int argc, char *argv[])
{
    cv::Mat input_mat = cv::imread(argv[1], cv::IMREAD_COLOR);
    std::cout&lt;&lt;argv[1]&lt;&lt;", size:"&lt;&lt;input_mat.size()&lt;&lt;std::endl;    
}

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='stereomatchingkiss' date='2017-11-06T17:04:33Z'>
		This sounds like the same issue as &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/13278&gt;#13278&lt;/denchmark-link&gt;
. Could you add a comment there describing how you're building (Bazel? Linking against libtensorflow_framework.so? Linking against the C++ API .so?)? TensorFlow needs to use image libraries, but it's possible we can hide the symbols in some cases.
		</comment>
		<comment id='2' author='stereomatchingkiss' date='2017-11-07T01:20:45Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;


how you're building (Bazel? Linking against libtensorflow_framework.so? Linking against the C++ API .so?)?

I build tensorflow libs by Bazel

Clone tensorflow from https://github.com/tensorflow
Install require dependencies
bazel build //tensorflow:libtensorflow.so
Link to cuda, -L/usr/local/cuda-8.0/lib64 -lcuda -lcudart -lcurand -lcublas -lcudnn -lcusolver -lcufft
Link to protof and tensorflow, -L/usr/local -lprotobuf -ltensorflow_framework -ltensorflow_cc
Link to opencv, -L/usr/local/lib -lopencv_core -lopencv_imgproc -lopencv_highgui -lopencv_imgcodecs -lopencv_video -lopencv_videoio
Compile and run, images always empty


TensorFlow needs to use image libraries, but it's possible we can hide the symbols in some cases.

Could we separate images loading part as another module, make it as an independent lib? Let the users select they want to build it or not.
		</comment>
		<comment id='3' author='stereomatchingkiss' date='2017-11-07T01:26:31Z'>
		If you're using the C++ API, you shouldn't need to link against libtensorflow_framework.so directly. Does it work if you take "-ltensorflow_framework" out?
		</comment>
		<comment id='4' author='stereomatchingkiss' date='2017-11-07T01:53:05Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;


Does it work if you take "-ltensorflow_framework" out?

It will pop out a lot of undefined symbol when compile
		</comment>
		<comment id='5' author='stereomatchingkiss' date='2017-11-07T17:01:14Z'>
		&lt;denchmark-link:https://github.com/stereomatchingkiss&gt;@stereomatchingkiss&lt;/denchmark-link&gt;
 which symbols? We'd like the C/C++ APIs (libtensorflow.so/libtensorflow_cc.so) to be usable on their own, and those have a linker script so that they don't expose extra symbols (preventing issues like the one you've reported).
		</comment>
		<comment id='6' author='stereomatchingkiss' date='2017-11-08T10:11:51Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;


Which symbols

Many of them(1270), I put the records at &lt;denchmark-link:https://pastebin.com/jmLBncx8&gt;pastebin&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='stereomatchingkiss' date='2017-11-08T15:15:46Z'>
		This seems to be the main problem:
usr/bin/ld: warning: libtensorflow_framework.so, needed by /home/ramsus/Qt/3rdLibs/tf_test/lib/libtensorflow_cc.so, not found (try using -rpath or -rpath-link)
libtensorflow_framework.so should be accessible from libtensorflow_cc.so (in the same directory). As long as that's true and you stick to the C++ API it should work.
		</comment>
		<comment id='8' author='stereomatchingkiss' date='2017-11-08T16:28:56Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;

I use rpath to specify the folder, this time all of the compile time error gone(if I do not call tensorflow::graph_def), but the images read by cv::imread remain empty.
However, create tensorflow::graph_def still got error

/usr/bin/ld: tensorflow_obj_detect_example.o: undefined reference to symbol '_ZN10tensorflow8GraphDefD1Ev'
/home/ramsus/Qt/3rdLibs/tf_test/lib/libtensorflow_framework.so: error adding symbols: DSO missing from command line

I guess a quick fix is split up the image reading part into an independent lib.
		</comment>
		<comment id='9' author='stereomatchingkiss' date='2017-11-08T16:52:17Z'>
		&lt;denchmark-link:https://github.com/skye&gt;@skye&lt;/denchmark-link&gt;
 might know whether GraphDef should be in the C++ API.
But could you verify that cv::imread works if you don't link in the TF C++ API, and doesn't work if you do link it in (making sure you're only linking to that and no other TF libraries)? This would be very surprising, since there's a linker script to control the symbols it exports. Basically we've already split the image reading part into an independent lib (libtensorflow_framework.so) that you don't need to link against.
		</comment>
		<comment id='10' author='stereomatchingkiss' date='2017-11-08T17:16:00Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;


But could you verify that cv::imread works if you don't link in the TF C++ API, and doesn't work if you do link it in (making sure you're only linking to that and no other TF libraries)?

As long as I do not link to tensorflow library, cv::imread can read the image without any issue.
If I link to tensorflow library but do not include any tensorflow header, cv::imread still able to read the image. I do not know if it is cause by macro magic or symbol conflict.
		</comment>
		<comment id='11' author='stereomatchingkiss' date='2017-11-08T17:27:59Z'>
		Ah, so it's not a symbol conflict (and splitting up our shared objects wouldn't help). Interesting. Maybe a #define? I'd think the compiler would complain about most other header issues.
		</comment>
		<comment id='12' author='stereomatchingkiss' date='2017-11-08T18:05:09Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;

I set the option -Wall, most of the worning are related to unused parameter. The header "#include &lt;tensorflow/cc/ops/const_op.h&gt;" will cause imread always return empty image
&lt;denchmark-link:https://pastebin.com/r0arZUt8&gt;Complete warning message&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='stereomatchingkiss' date='2017-11-08T21:06:09Z'>
		Yeah, those warnings all look fine. The next step would be to narrow down and figure out which transitively included header from const_op.h is causing problems; any interest?
		</comment>
		<comment id='14' author='stereomatchingkiss' date='2017-11-10T11:12:26Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;


The next step would be to narrow down and figure out which transitively included header from const_op.h is causing problems;

My tracking history

&lt;tensorflow/cc/ops/const_op.h&gt;
&lt;tensorflow/cc/framework/ops.h&gt;
&lt;tensorflow/core/framework/tensor.h&gt;
&lt;tensorflow/core/lib/core/refcount.h&gt;

As long as I include recount.h, the image return by imread will become empty. However, include &lt;tensorflow/core/platform/logging.h&gt; do not effect the resutls, this is weird. Do not looks like it is caused by #define.
		</comment>
		<comment id='15' author='stereomatchingkiss' date='2017-11-25T10:43:55Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;

Hi,
I have a similar problem as well, although its surprising. I am not using cv in my project. I just trained a network on python and am trying to load the graph on a C++ project. I am trying to link libtensorflow_cc to my c++ project (building with cmake). It fails during linking - undefined reference to symbol '_ZN10tensorflow8GraphDefD1Ev'
/usr/local/lib/libtensorflow_framework.so: error adding symbols: DSO missing from command line.
Any help would be highly appreciated.
		</comment>
		<comment id='16' author='stereomatchingkiss' date='2017-11-25T14:56:50Z'>
		Link with libtensorflow_framework.so should solve the issue

&lt;&lt;denchmark-link:https://www.avast.com/sig-email?utm_medium=email&amp;utm_source=link&amp;utm_campaign=sig-email&amp;utm_content=webmail&gt;https://www.avast.com/sig-email?utm_medium=email&amp;utm_source=link&amp;utm_campaign=sig-email&amp;utm_content=webmail&lt;/denchmark-link&gt;
&gt;
Virus-free.
&lt;denchmark-link:http://www.avast.com&gt;www.avast.com&lt;/denchmark-link&gt;

&lt;&lt;denchmark-link:https://www.avast.com/sig-email?utm_medium=email&amp;utm_source=link&amp;utm_campaign=sig-email&amp;utm_content=webmail&gt;https://www.avast.com/sig-email?utm_medium=email&amp;utm_source=link&amp;utm_campaign=sig-email&amp;utm_content=webmail&lt;/denchmark-link&gt;
&gt;
&lt;#DAB4FAD8-2DD7-40BB-A1B8-4E2AA1F9FDF2&gt;

2017-11-25 18:46 GMT+08:00 kikushah &lt;notifications@github.com&gt;:
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


 @allenlavoie &lt;https://github.com/allenlavoie&gt;
 Hi,

 I have a similar problem as well, although its surprising. I am not using
 cv in my project. I just trained a network on python and am trying to load
 the graph on a C++ project. I am trying to link libtensorflow_cc to my c++
 project (building with cmake). It fails during linking - undefined
 reference to symbol '_ZN10tensorflow8GraphDefD1Ev'
 /usr/local/lib/libtensorflow_framework.so: error adding symbols: DSO
 missing from command line.

 Any help would be highly appreciated.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 &lt;#14267 (comment)&gt;,
 or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/ABt-ulyybo_3buDu-BYlEUGX91aPFjXzks5s5-_0gaJpZM4QSpkr&gt;
 .



		</comment>
		<comment id='17' author='stereomatchingkiss' date='2017-12-12T06:57:45Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;

Hi, I encountered the same problem. Is there any solution?
I am using tensorflow 1.4 &amp; opencv 3.2.0 in Ubuntu 16.04.
The bazel version is 0.6.1, and the tensorflow compile command is: 
		</comment>
		<comment id='18' author='stereomatchingkiss' date='2017-12-12T14:46:00Z'>
		Hi, I meet the same problem. Is there any solution?
I am using tensorflow r1.4 and opencv3.1 in ubuntu14.04.
As far as I include #include &lt;tensorflow/core/public/session.h&gt; or #include "tensorflow/cc/ops/standard_ops.h" I cannot read image. When I didn include these tensorflow files, I can read frame successfully. Anyone could help me? Thanks a lot!!!
my cpp file:
#include &lt;tensorflow/core/platform/env.h&gt;
//#include &lt;tensorflow/core/public/session.h&gt;
//#include "tensorflow/cc/ops/standard_ops.h"
#include &lt;opencv2/opencv.hpp&gt;
#include 
using namespace std;
using namespace tensorflow;
int main()
{
cv::VideoCapture cap;
if(!cap.open("/home/kx/project/RM-dataset/01.avi")){
std::cout&lt;&lt;"cannot open video "&lt;&lt;std::endl;
}
cv::Mat frame;
while(1){
cap&gt;&gt;frame;
if(frame.empty()){
std::cout&lt;&lt;"no frame"&lt;&lt;std::endl;
continue;
}
cv::imshow("frame",frame);
cv::waitKey(0);
}
return 0;
}
my cmake file:
cmake_minimum_required (VERSION 2.8)
project (tf_example)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -std=c++11 -W")
find_package(OpenCV 3.1.0 REQUIRED)
include_directories(
/home/kx/something/tensorflow-r1.4
/home/kx/something/tensorflow-r1.4/tensorflow/bazel-genfiles
/home/kx/something/tensorflow-r1.4/tensorflow/contrib/makefile/gen/protobuf/include
/home/kx/something/tensorflow-r1.4/tensorflow/contrib/makefile/gen/host_obj
/home/kx/something/tensorflow-r1.4/tensorflow/contrib/makefile/gen/proto
/home/kx/something/tensorflow-r1.4/tensorflow/contrib/makefile/downloads/nsync/public
/home/kx/something/tensorflow-r1.4/tensorflow/contrib/makefile/downloads/eigen
/home/kx/something/tensorflow-r1.4/bazel-out/local-py3-opt/genfiles
${OPENCV_INCLUDE_DIRS}
)
add_executable(tf_test  tf_test.cpp)
target_link_libraries(tf_test
/home/kx/something/tensorflow-r1.4/bazel-bin/tensorflow/libtensorflow_cc.so
/home/kx/something/tensorflow-r1.4/bazel-bin/tensorflow/libtensorflow_framework.so
${OpenCV_LIBS}
)
		</comment>
		<comment id='19' author='stereomatchingkiss' date='2017-12-12T17:30:10Z'>
		&lt;denchmark-link:https://github.com/stereomatchingkiss&gt;@stereomatchingkiss&lt;/denchmark-link&gt;
 sorry, got a bit distracted. Is the claim that  is causing the issue? Everything else in that file is in a namespace, so I don't see how it could cause an issue.
		</comment>
		<comment id='20' author='stereomatchingkiss' date='2017-12-13T04:24:50Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;
 Me neither. Whatever, we prefer another tool for our jobs.
Tensorflow is the most popular deep learning library, got rich features, huge community, support by the most brilliant engineers hired by google, amazing tensorboard, tensorflow have a lot of pros, but it got obvious drawback too(no perfect library, just pick the one suit your need)


Very complicated dependencies and build system, I do not know why google prefer bazel but not cmake, cmake is mature and seldom break backward compatibility, but bazel do, it do not looks like a mature tool compare with cmake


Api of tensroflow are far too complicated compared with keras and pytorch.Especially pytorch, it is much easier to debug and describe complicated network architectures by pytorch, everything are modularize and works just like numpy and the good old python way, you do not need to learn tons of new concepts when using pytorch, just some basic and you are good to go.


Deployment steps are non-trivial and not yet mature, like the bugs we encountered in this post


Almost everything in tensorflow need us spend lots of times to pick up new concepts, tons of times to study, figure out how to use it properly. Tensorflow keep telling us "deep learning is super hard", while keras and pytorch show us how easy deep learning could be.
I do not know what the other thinks, these are the major drawback I found in tensorflow.
		</comment>
		<comment id='21' author='stereomatchingkiss' date='2017-12-13T19:17:15Z'>
		I'm guessing this is only an issue on later versions of OpenCV? I tried with 2.4 (since that was what the package manager had) and it seems to work fine including standard_ops.h.
Can someone check for me whether it's just #include &lt;atomic&gt; causing the issue in OpenCV 3.1/3.2? In which case this seems like it's an OpenCV issue rather than something TensorFlow can address.
		</comment>
		<comment id='22' author='stereomatchingkiss' date='2017-12-14T04:04:32Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;

It's wired!
I'm using opencv 2.4.13.2. I cann't use  to load image if I add the tensorflow's include file path &amp; link lib to the compile command.
But when I'm using opencv 3.2.0. I can add the tensorflow's include path &amp; link lib to the compile command and load file normally except the circumstance that I defined  SessionOptions sessOptions; variable.
&lt;denchmark-h:h1&gt;opencv 3.2.0&lt;/denchmark-h&gt;


link option:-lopencv_core -lopencv_highgui -lopencv_imgproc -lopencv_imgcodecs -ltensorflow_cc -ltensorflow_framework;  ==&gt; connot imread image;
link option: -lopencv_core -lopencv_highgui -lopencv_imgproc -lopencv_imgcodecs -ltensorflow_cc; ==&gt;can imread image; but SessionOptions sessOptions;  included in my source code, the compile gets error:
/usr/bin/ld: /tmp/ccCMSFkT.o: undefined reference to symbol '_ZN10tensorflow14SessionOptionsC1Ev'
//usr/lib/libtensorflow_framework.so: error adding symbols: DSO missing from command line.

&lt;denchmark-h:h1&gt;opencv 2.4.13.2&lt;/denchmark-h&gt;


link option: -lopencv_core -lopencv_highgui -lopencv_imgproc  -ltensorflow_cc -ltensorflow_framework; ==&gt; connot imread image;
link option: -lopencv_core -lopencv_highgui -lopencv_imgproc -ltensorflow_cc ==&gt;the same as opencv3.2.0 link without tensorflow_framework.

So maybe the problem is tensorflow_framework.so.
		</comment>
		<comment id='23' author='stereomatchingkiss' date='2017-12-14T17:26:56Z'>
		&lt;denchmark-link:https://github.com/bitzy&gt;@bitzy&lt;/denchmark-link&gt;
 Right, that's a symbol conflict. My original comments in this thread were incorrect; you do need libtensorflow_framework.so for protocol buffers right now, and that's the one with symbols which conflict with OpenCV. The eventual solution is going to be for us to split out a third shared object with just the protocol buffer symbols for use with the C++ API (which I believe &lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;
 is considering anyway).
In the meantime, as long as you're not using any custom ops you can build libtensorflow_cc.so with bazel build --config=monolithic, which will condense everything together into one shared object (no libtensorflow_framework dependence) and seal off non-TensorFlow symbols. That shared object will have protocol buffer symbols.
		</comment>
		<comment id='24' author='stereomatchingkiss' date='2017-12-15T01:55:44Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;

Now I can load image with opencv. Thanks!
		</comment>
		<comment id='25' author='stereomatchingkiss' date='2017-12-15T05:04:56Z'>
		Looks to be resolved?
I will close the issue now, but please reopen if there are still things to address.
		</comment>
		<comment id='26' author='stereomatchingkiss' date='2017-12-15T07:12:28Z'>
		Hi! I meet the same problem.
I'm using opencv3.1 tensorflow1.4 in ubuntu14.04. When I included tensorflow headers like #include &lt;tensorflow/core/public/session.h&gt; or #include "tensorflow/cc/ops/standard_ops.h", cv::imread can not read images encoded by JPEG, but can read other encoding images like Uncompressed 8-bit RGB. When I commented TF headers, I can read any images by cv::imread. Is there any solution? Thanks a lot!!!  &lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/bitzy&gt;@bitzy&lt;/denchmark-link&gt;

update:
I rebuild libtensorflow_cc.so using command   , and can read any images successfully. Thank you &lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;
 .
Though the problem appear to have been solved, I have some questions below：
1.What is the root cause of this problem?(libjpeg version in opencv and tensorflow conficts? or other reason? )
2.Since there is no libtensorflow_framework, are there some functions that I can't use?
3.Could we get a new TF version in the future, which can solve this problem?
		</comment>
		<comment id='27' author='stereomatchingkiss' date='2017-12-15T18:09:40Z'>
		&lt;denchmark-link:https://github.com/kxhit&gt;@kxhit&lt;/denchmark-link&gt;

Neat, so headers aren't causing issues on their own for you?

That's a reasonable guess; I've never tracked down exactly which image library in TF conflicts.
Custom ops are the main limitation (since they need symbols which are sealed off from the C++ API; typically they'd link against libtensorflow_framework directly, but if that's not built then there's no good way to support them); you can use everything else in the C++ API. libtensorflow_framework does have lots of other undocumented/internal symbols which get sealed off from the C++ API, but most likely aren't super useful.
Yes, we'd like to split off our protocol buffers into another shared object. C++ API users could then link against libtensorflow_cc and e.g. libtensorflow_protobufs rather than relying on the metaphorical junk drawer which is libtensorflow_framework for protocol buffer symbols. I think this should be feasible, since we already have header-only protobuf rules (they need to live in exactly one .so, so we already need to exclude them from language bindings).

		</comment>
		<comment id='28' author='stereomatchingkiss' date='2017-12-16T05:22:57Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;

Yes! I can read any images with headers . Thank you for your help!
		</comment>
		<comment id='29' author='stereomatchingkiss' date='2018-02-08T22:30:50Z'>
		Hi, is this also a problem in tensorflow 1.5.0? upgrading takes a long time, so I don't want to do it if it also has the same problem :-(
		</comment>
		<comment id='30' author='stereomatchingkiss' date='2018-03-01T20:21:23Z'>
		&lt;denchmark-link:https://github.com/RoboEvangelist&gt;@RoboEvangelist&lt;/denchmark-link&gt;
 I am having the same issue in tensorflow r1.5 as well.
		</comment>
		<comment id='31' author='stereomatchingkiss' date='2018-04-16T15:30:41Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;
 is there any workaround to build custom ops, which using opencv? cv::resize seems to work, but cv::imread/cv::imdecode always return empty matrix, if it used inside custom op.
		</comment>
		<comment id='32' author='stereomatchingkiss' date='2018-04-16T16:11:54Z'>
		&lt;denchmark-link:https://github.com/svetlov&gt;@svetlov&lt;/denchmark-link&gt;
 for sure, you can link your custom op .so against a second .so which does not link against libtensorflow_framework.so (and doesn't include TensorFlow headers, since the symbols won't be defined). There's &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/f610284f878b341423bde42afc90f917c337138c/tensorflow/contrib/tensor_forest/BUILD#L408&gt;one contrib op doing basically this&lt;/denchmark-link&gt;
. The second .so won't see any TensorFlow symbols and so won't have a problem calling OpenCV.
		</comment>
		<comment id='33' author='stereomatchingkiss' date='2018-05-16T23:02:20Z'>
		I hit the same issue. I can't use "monolithic" workaround since it breaks TensorRT integration. The conflicts are jpeg_CreateDecompress and jpeg_CreateCompress. libopencv_imgcodec expects to import from libjpect.so.8, but it somehow picked up from libtensorflow_framework.
I solved it by compiling tensorflow jpeg with "-fvisibility" flag. The change is around line 41 in thirdparty/jpeg/jpeg.BUILD. "-fPIC" is needed as the result of "-fvisibility".
"//conditions:default": [
"-fvisibility=hidden -fPIC"
],
There are some linking warnings for undefined dynamic symbol in tensorflow/contrib/lite/toco/toco, which I don't use.
		</comment>
		<comment id='34' author='stereomatchingkiss' date='2018-06-06T05:37:39Z'>
		Ran into the same problem while I'm trying to load a cv::Mat data to a tensor following this &lt;denchmark-link:https://stackoverflow.com/questions/39379747/import-opencv-mat-into-c-tensorflow-without-copying&gt;page&lt;/denchmark-link&gt;
, imread() can not load any image. I even can't find out what caused the problem. It solved fine following &lt;denchmark-link:https://github.com/kxhit&gt;@kxhit&lt;/denchmark-link&gt;
 's solution.
		</comment>
		<comment id='35' author='stereomatchingkiss' date='2018-06-19T08:17:42Z'>
		Same for me too, Unfortunately "Videcapture" function for camera does not work with tensorflow libraries.I use Python for programming and using tegra k1 embedded Nvdia controller card.Tensor flow version is TF 0.8 and opencv version is 2.4.13 .These versions are correctly working on this embedded platform but unfortunately does not work together.Could you please help me about this problem.I didn't use any bazel implementation for TF
Solution for Python,TF0.8, Opencv 2.4.13:
I solved this problem implementing opencv libraries before tensorflow libraries like;
First --&gt; import cv2
Second --&gt; import tensorflow as tf
It was totally strange but worked :)
		</comment>
		<comment id='36' author='stereomatchingkiss' date='2018-07-03T07:28:07Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;
 hello, I build as follow:
bazel build --config=opt --config=cuda --config=monolithic -c opt --copt=-msse3 --copt=-msse4.1 --copt=-msse4.2 --copt=-mavx --copt=-mavx2 --copt=-mfma --verbose_failures //tensorflow:libtensorflow_cc.so
But when link libtensorflow_cc.so, opencv imread still not work，load image is empty
		</comment>
		<comment id='37' author='stereomatchingkiss' date='2018-07-03T16:11:28Z'>
		&lt;denchmark-link:https://github.com/zgsxwsdxg&gt;@zgsxwsdxg&lt;/denchmark-link&gt;
 which platform, which OpenCV version, which TF commit hash, and are you linking to anything besides libtensorflow_cc.so? Those symbols should be locked down pretty well (&lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tf_exported_symbols.lds&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tf_exported_symbols.lds&lt;/denchmark-link&gt;
 or &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tf_version_script.lds&gt;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tf_version_script.lds&lt;/denchmark-link&gt;
 depending on the platform).
		</comment>
		<comment id='38' author='stereomatchingkiss' date='2018-07-05T10:40:13Z'>
		&lt;denchmark-link:https://github.com/allenlavoie&gt;@allenlavoie&lt;/denchmark-link&gt;
  Thanks for your reply.
platform: ubuntu16.04 LTS
opencv: 3.1
tensorflow: rc1.3
cuda：8.0
cudnn：6.0
I only link opencv’libs besides libtensorflow_cc.so for my project.
In addition when I build libtensorfow_cc.so with “--config=monolithic” option，one warning occurs as follow："WARNING: Config values are not defined in any .rc file: monolithic"
What should I do with the warning？
Does this have an impact on the question between tensorflow and opencv？
Look forward to your reply. Best wishes.
		</comment>
		<comment id='39' author='stereomatchingkiss' date='2018-07-16T16:13:08Z'>
		TensorFlow 1.3 was the release before we removed RTLD_GLOBAL, so that's always monolithic and won't know about the option. Looks like &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/408fd454d7d2a16269576ea12bcd516e25a6b0c5/tensorflow/BUILD#L446&gt;the C++ API .so had no linker script for that version&lt;/denchmark-link&gt;
. So you could either backport the linker script in &lt;denchmark-link:https://github.com/drpngx/tensorflow/commit/3438981ca7b659e57fb1e15152a1f9fd99b5d6bc&gt;drpngx@3438981&lt;/denchmark-link&gt;
 or use a more recent version.
		</comment>
		<comment id='40' author='stereomatchingkiss' date='2019-07-29T03:53:48Z'>
		opencv3.4.6 tensorflow1.4 on MacOS is ok, the same libs on unbuntu16.04 is not ok . so I try this code "bazel build --config=monolithic :libtensorflow_cc.so"
		</comment>
	</comments>
</bug>