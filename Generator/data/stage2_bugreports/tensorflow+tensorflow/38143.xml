<bug id='38143' author='bmc2-stripe' open_date='2020-04-01T20:16:44Z' closed_time='2020-04-19T17:41:08Z'>
	<summary>WideDeepModel cannot be serialized with tf.saved_model.save</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock
example script provided in TensorFlow):  No
[I used an example script, then tried to save it]
OS Platform and Distribution (e.g.,
Linux Ubuntu 16.04): Linux Ubuntu 16.04
TensorFlow installed from (source or
binary): - TensorFlow version (use command below):
Python version: - Bazel
version (if compiling from source): v2.1.0-rc2-17-ge5bf8de
GCC/Compiler version (if compiling from
source):  N/A
CUDA/cuDNN version: - GPU model and memory:

Describe the current behavior
Serialization fails, apparently because optimizer is a list, rather than a single optimizer.
Describe the expected behavior
Serialization works.
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf

linear_model = tf.keras.experimental.LinearModel()
linear_model.compile('adagrad', 'mse')
dnn_model = tf.keras.Sequential([tf.keras.layers.Dense(units=1)])
dnn_model.compile('rmsprop', 'mse')
combined_model = tf.keras.experimental.WideDeepModel(dnn_model, linear_model)
combined_model.compile(optimizer=['adagrad', 'rmsprop'], loss='mse')
tf.saved_model.save(combined_model, "/tmp/saved_model")
&lt;/denchmark-code&gt;

Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
&lt;denchmark-code&gt;AttributeError                            Traceback (most recent call last)
&lt;ipython-input-10-15923fe78379&gt; in &lt;module&gt;
      7 combined_model = tf.keras.experimental.WideDeepModel(dnn_model, linear_model)
      8 combined_model.compile(optimizer=['adagrad', 'rmsprop'], loss='mse')
----&gt; 9 tf.saved_model.save(combined_model, "/tmp/saved_model")

/pay/src/zoolander/vendor3/lib/python3.7/site-packages/tensorflow_core/python/saved_model/save.py in save(obj, export_dir, signatures, options)
    921       compat.as_str(constants.SAVED_MODEL_FILENAME_PB))
    922   object_graph_proto = _serialize_object_graph(
--&gt; 923       saveable_view, asset_info.asset_index)
    924   meta_graph_def.object_graph_def.CopyFrom(object_graph_proto)
    925 

/pay/src/zoolander/vendor3/lib/python3.7/site-packages/tensorflow_core/python/saved_model/save.py in _serialize_object_graph(saveable_view, asset_file_def_index)
    651 
    652   for obj, obj_proto in zip(saveable_view.nodes, proto.nodes):
--&gt; 653     _write_object_proto(obj, obj_proto, asset_file_def_index)
    654   return proto
    655 

/pay/src/zoolander/vendor3/lib/python3.7/site-packages/tensorflow_core/python/saved_model/save.py in _write_object_proto(obj, proto, asset_file_def_index)
    690           version=versions_pb2.VersionDef(
    691               producer=1, min_consumer=1, bad_consumers=[]),
--&gt; 692           metadata=obj._tracking_metadata)
    693       # pylint:enable=protected-access
    694     proto.user_object.CopyFrom(registered_type_proto)

/pay/src/zoolander/vendor3/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer.py in _tracking_metadata(self)
   2410   @property
   2411   def _tracking_metadata(self):
-&gt; 2412     return self._trackable_saved_model_saver.tracking_metadata
   2413 
   2414   def _list_extra_dependencies_for_serialization(self, serialization_cache):

/pay/src/zoolander/vendor3/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/saved_model/base_serialization.py in tracking_metadata(self)
     55     # object is in the python property)
     56     return json.dumps(
---&gt; 57         self.python_properties,
     58         default=serialization.get_json_type)
     59 

/pay/src/zoolander/vendor3/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/saved_model/layer_serialization.py in python_properties(self)
     38   def python_properties(self):
     39     # TODO(kathywu): Add python property validator
---&gt; 40     return self._python_properties_internal()
     41 
     42   def _python_properties_internal(self):

/pay/src/zoolander/vendor3/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/saved_model/model_serialization.py in _python_properties_internal(self)
     36     metadata.update(
     37         saving_utils.model_metadata(
---&gt; 38             self.obj, include_optimizer=True, require_config=False))
     39     return metadata
     40 

/pay/src/zoolander/vendor3/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/saving_utils.py in model_metadata(model, include_optimizer, require_config)
    207         optimizer_config = {
    208             'class_name': model.optimizer.__class__.__name__,
--&gt; 209             'config': model.optimizer.get_config()}
    210       metadata['training_config']['optimizer_config'] = optimizer_config
    211   return metadata
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='bmc2-stripe' date='2020-04-02T03:41:12Z'>
		&lt;denchmark-link:https://github.com/bmc2-stripe&gt;@bmc2-stripe&lt;/denchmark-link&gt;
, you don't required to compile  as you have already compiled individual model. and  I think you can't compile single model with two optimizer like you have done for . Correct code is:
&lt;denchmark-code&gt;import tensorflow as tf

linear_model = tf.keras.experimental.LinearModel()
linear_model.compile('adagrad', 'mse')
dnn_model = tf.keras.Sequential([tf.keras.layers.Dense(units=1)])
dnn_model.compile('rmsprop', 'mse')
combined_model = tf.keras.experimental.WideDeepModel(dnn_model, linear_model)
tf.saved_model.save(combined_model, "/tmp/saved_model")
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='bmc2-stripe' date='2020-04-02T17:42:42Z'>
		&lt;denchmark-link:https://github.com/khimraj&gt;@khimraj&lt;/denchmark-link&gt;
 Thank you for the reply!
Your snippet does work to serialize the model, but unfortunately compilation seems necessary to actually train the combined model. Note that in both examples in the WideDeepModel documentation, the combined model is compiled with two optimizers:
&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/experimental/WideDeepModel&gt;https://www.tensorflow.org/api_docs/python/tf/keras/experimental/WideDeepModel&lt;/denchmark-link&gt;

Additionally, if I remove the compilation step from those tutorials, I get the following error:
&lt;denchmark-code&gt;RuntimeError: You must compile your model before training/testing. Use `model.compile(optimizer, loss)`.
&lt;/denchmark-code&gt;

Here's a more complete reproducing example --- it's essentially just the second example from the WideDeepModel documentation, but fleshed out with a bit more boilerplate so that it can be executed:
import tensorflow as tf
import numpy as np


features = np.random.uniform(size=[100, 50])
labels = np.random.uniform(size=[100])

linear_model = tf.keras.experimental.LinearModel()
linear_model.compile('adagrad', 'mse')
linear_model.fit(features, labels)
dnn_model = tf.keras.Sequential([tf.keras.layers.Dense(units=1)])
dnn_model.compile('rmsprop', 'mse')
dnn_model.fit(features, labels)
combined_model = tf.keras.experimental.WideDeepModel(dnn_model, linear_model)
# Uncomment the following line to test without compilation:
combined_model.compile(optimizer=['adagrad', 'rmsprop'], loss='mse')
combined_model.fit(features, labels)
tf.saved_model.save(combined_model, "/tmp/saved_model")
This example fails with the same error as in the original bug report.
		</comment>
		<comment id='3' author='bmc2-stripe' date='2020-04-03T03:57:23Z'>
		&lt;denchmark-link:https://github.com/bmc2-stripe&gt;@bmc2-stripe&lt;/denchmark-link&gt;
, Yes you are correct. As given in WideDeepModel documentation, the combined model is compiled with two optimizers. I have tried to save model using  and i have successfully saved it. For your reference link of gist is &lt;denchmark-link:https://gist.github.com/khimraj/63b9e4a7951647e1fde922b5b31b8495&gt;here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='4' author='bmc2-stripe' date='2020-04-06T05:59:13Z'>
		
@bmc2-stripe, Yes you are correct. As given in WideDeepModel documentation, the combined model is compiled with two optimizers. I have tried to save model using save_weights and i have successfully saved it. For your reference link of gist is here.

&lt;denchmark-link:https://github.com/bmc2-stripe&gt;@bmc2-stripe&lt;/denchmark-link&gt;
,
Could you please check &lt;denchmark-link:https://github.com/khimraj&gt;@khimraj&lt;/denchmark-link&gt;
's comment and let us know if it works? Thanks!
		</comment>
		<comment id='5' author='bmc2-stripe' date='2020-04-07T04:17:59Z'>
		Hi &lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
:
The solution &lt;denchmark-link:https://github.com/khimraj&gt;@khimraj&lt;/denchmark-link&gt;
 provides does execute without error, but I don't believe it really solve the issue. Specifically, save_weights (which is used that solution) is great for checkpointing, but the tf.saved_model.save call is needed to get a model we can serve with TF Serving.
		</comment>
		<comment id='6' author='bmc2-stripe' date='2020-04-07T13:44:16Z'>
		Was able to reproduce the issue with &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/4347ee5de8bb96db02699a34aa42034d/38143-2-1.ipynb&gt;TF v2.1&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/cb24acd1e718e5aba3cdfe2ba6848367/38143-tf-nightly.ipynb&gt;TF-nightly&lt;/denchmark-link&gt;
. Please find the attached gist. Thanks!
		</comment>
		<comment id='7' author='bmc2-stripe' date='2020-04-09T00:10:01Z'>
		&lt;denchmark-link:https://github.com/bmc2-stripe&gt;@bmc2-stripe&lt;/denchmark-link&gt;
 I agree  has an issue in saving the  that has multiple optimizers added from compile. One approach is to delete optimizer from the model like  , and then save the model 
Later If you want load the model and train, then you can load the model and then compile again  and train as follows
&lt;denchmark-code&gt;loaded_model = tf.keras.models.load_model('./saved_model')
# compile the loaded model
loaded_model.compile(optimizer=['adagrad','rmsprop'], loss=['mse','mse'])
# restart training
loaded_model.fit([features,features], labels,epochs=10)
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/34dbdb808d0737040d6397ad2df676aa/widedeepmodel.ipynb&gt;Here is the gist&lt;/denchmark-link&gt;
 for y/our reference. Thanks!
		</comment>
		<comment id='8' author='bmc2-stripe' date='2020-04-13T21:30:38Z'>
		&lt;denchmark-link:https://github.com/bmc2-stripe&gt;@bmc2-stripe&lt;/denchmark-link&gt;
 Can you verify once and close the issue if this was resolved for you. Thanks!
		</comment>
		<comment id='9' author='bmc2-stripe' date='2020-04-19T17:41:08Z'>
		I am closing this issue as I think it was resolved. But, please let me know if I'm mistaken. Thanks!
		</comment>
		<comment id='10' author='bmc2-stripe' date='2020-04-19T17:41:10Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38143&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38143&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='bmc2-stripe' date='2020-04-21T18:41:53Z'>
		Seems like a reasonable workaround, thanks
		</comment>
	</comments>
</bug>