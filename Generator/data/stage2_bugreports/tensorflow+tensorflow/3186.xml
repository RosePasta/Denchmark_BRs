<bug id='3186' author='eplondke' open_date='2016-07-04T16:47:23Z' closed_time='2017-06-16T17:45:09Z'>
	<summary>Insufficient alignment in u_ union in tensorflow/core/lib/gtl/inlined_vector.h</summary>
	<description>
&lt;denchmark-h:h3&gt;Environment info&lt;/denchmark-h&gt;

Operating System: Linux
Installed version of CUDA and cuDNN: None
If installed from sources, provide the commit hash: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/aa2cacd6627ffb296bedc910c957a0fd4a2f957f&gt;aa2cacd&lt;/denchmark-link&gt;

&lt;denchmark-h:h3&gt;Steps to reproduce&lt;/denchmark-h&gt;


Find an architecture with 32 bit pointers but strict alignment requirements for 64 bit
Compile and run "benchmark" from tensorflow/contrib/makefile
Get bus error from misaligned pointer

&lt;denchmark-h:h3&gt;What have you tried?&lt;/denchmark-h&gt;


Fixing the issue by increasing the u_ alignment.  This works.

In tensorflow/core/lib/gtl/inlined_vector.h, the data buf is aligned by adding a pointer.  However, it is cast to other types, including uint64_t.  On architectures where pointers are 32 bits, this cast causes errors.
The fix is to add another component to the union that will force alignment to the largest size, such as uint64_t.
For example:
diff --git a/tensorflow/core/lib/gtl/inlined_vector.h b/tensorflow/core/lib/gtl/inlined_vector.h
index e8fe66c..518b421 100644
--- a/tensorflow/core/lib/gtl/inlined_vector.h
+++ b/tensorflow/core/lib/gtl/inlined_vector.h
@@ -276,6 +276,8 @@ class InlinedVector {
unsigned char data[kSize];
// Force data to be aligned enough for a pointer.
T* unused_aligner;

// EJP: force 8 byte alignment, as pointers could be 4-byte but data elements 8-byte?
uint64_t unused_64;
} u_;

You won't see this issue on architectures where pointers are the size of the largest type (aarch64, x86-64) or where a 32-bit architecture loads 64-bit things but can do so at arbitrary 32-bit boundaries (x86, armv7 with misaligned pointers enabled).
But it might improve performance to have 64-bit values on 64-bit boundaries.
	</description>
	<comments>
		<comment id='1' author='eplondke' date='2016-07-07T16:40:44Z'>
		What you're saying makes sense. What are some example processor architectures with this property? It's unlikely we are going to support it, but we would be open to a patch that detects this property in a architecture and does this alignment only when necessary. You indicate it might improve performance to do this extra alignment but it actually also might hurt performance, and without testing we are hesitant to make such a change. Adding &lt;denchmark-link:https://github.com/vrv&gt;@vrv&lt;/denchmark-link&gt;
 to comment.
		</comment>
		<comment id='2' author='eplondke' date='2016-07-07T17:34:16Z'>
		Some ARM variants will give an exception on misaligned LDRD (but some do
not, especially if misaligned support is enabled in ARMv7).
You'd probably have a problem if someone used the buffer for a double
precision value on many targets that don't support misaligned loads and
stores (MIPS, ARM)
Sorry, my patch got formatted by github:
&lt;denchmark-h:h1&gt;&lt;/denchmark-h&gt;

diff --git a/tensorflow/core/lib/gtl/inlined_vector.h
b/tensorflow/core/lib/gtl/inlined_vector.h
index e8fe66c..518b421 100644
--- a/tensorflow/core/lib/gtl/inlined_vector.h
+++ b/tensorflow/core/lib/gtl/inlined_vector.h
@@ -276,6 +276,8 @@ class InlinedVector {
unsigned char data[kSize];
// Force data to be aligned enough for a pointer.
T* unused_aligner;

// EJP: force 8 byte alignment, as pointers could be 4-byte but data
elements 8-byte
uint64_t unused_64;
} u_;

&lt;denchmark-h:h1&gt;inline void InitRep() { u_.data[kSize - 1] = 0; }&lt;/denchmark-h&gt;

Basically a one-liner: since a 64-bit value could go into the data (by
cast), you put a 64-bit value into the union to ensure alignment.
On Thu, Jul 7, 2016 at 11:42 AM, Andrew Selle &lt;denchmark-link:mailto:notifications@github.com&gt;notifications@github.com&lt;/denchmark-link&gt;

wrote:

What you're saying makes sense. What are some example processor
architectures with this property? It's unlikely we are going to support it,
but we would be open to a patch that detects this property in a
architecture and does this alignment only when necessary. You indicate it
might improve performance to do this extra alignment but it actually also
might hurt performance, and without testing we are hesitant to make such a
change. Adding @vrv https://github.com/vrv to comment.
â€”
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub
#3186 (comment),
or mute the thread
https://github.com/notifications/unsubscribe/ABkOanmmqCpZ4crPg83EvlyqGFA_-GfRks5qTSx9gaJpZM4JEg_y
.

		</comment>
		<comment id='3' author='eplondke' date='2016-07-08T18:26:07Z'>
		Created pull request with fix, &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/3237&gt;#3237&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>