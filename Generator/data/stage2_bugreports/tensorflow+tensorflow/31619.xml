<bug id='31619' author='yqtianust' open_date='2019-08-14T14:56:25Z' closed_time='2020-08-10T09:33:16Z'>
	<summary>Incorrect value in results when using tf.math.log()</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No idea
TensorFlow installed from (source or binary): binary using pip3 install
TensorFlow version (use command below): 1.14
Python version: 3.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: cuda9.0, cudnn 7.6
GPU model and memory: RTX 2080Ti

When I run the following code using CPU:
result= tf.math.log(tf.constant([280.41303540865516]*100, dtype=tf.float32)).numpy()
I got:

I found result[0] is not equal to result[-1]. the first one is
5.636263370513916 while the latter one is equal to 5.636263847351074.
I believe it is a bug.
Code to reproduce the issue
 from __future__ import absolute_import, division, print_function, unicode_literals import tensorflow as tf from random import * tf.enable_eager_execution() with tf.device("/cpu:0"): result = tf.math.log(tf.constant([ 280.41303540865516]*100, dtype=tf.float32)).numpy() print("{} vs {}".format(result[0], result[-1]))
Seems GPU has no such issues.
	</description>
	<comments>
		<comment id='1' author='yqtianust' date='2019-08-14T15:00:11Z'>
		Well, this issue could be related to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/31408&gt;#31408&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='yqtianust' date='2019-08-14T16:06:38Z'>
		I think they are related, but don't know if the fix to one will also fix the other one, so better to not mark them as duplicates
		</comment>
		<comment id='3' author='yqtianust' date='2019-08-14T22:44:13Z'>
		&lt;denchmark-link:https://github.com/yqtianust&gt;@yqtianust&lt;/denchmark-link&gt;
 I tried to reproduce the issue on &lt;denchmark-link:https://colab.sandbox.google.com/gist/gowthamkpr/b512cc2618fd02ca1c3b65cf5d7398e3/untitled93.ipynb&gt;Colab&lt;/denchmark-link&gt;
 but was not able to reproduce it. Can you please provide a github gist of the issue. Thanks!
		</comment>
		<comment id='4' author='yqtianust' date='2019-08-15T03:09:41Z'>
		&lt;denchmark-link:https://github.com/gowthamkpr&gt;@gowthamkpr&lt;/denchmark-link&gt;
 I found that it is ok if using number 280.41303540865516 in Colab. However, if you change the number to 774.726039560185 and run it on colab, the issue appear again.
See here &lt;denchmark-link:https://colab.research.google.com/drive/1Z4KvcoYXLwNoOwSaAO4p3nVDsJyjiVZI&gt;colab&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='yqtianust' date='2019-08-28T13:17:01Z'>
		&lt;denchmark-link:https://github.com/mihaimaruseac&gt;@mihaimaruseac&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/yqtianust&gt;@yqtianust&lt;/denchmark-link&gt;

I suspect it's a bug of eigen.
With GDB to debug, I set the break point at


And print the results in memory:
&lt;denchmark-code&gt;x/1fw 0x401e100
0x401e100:  5.63626337

x/1fw 0x401e28c
0x401e28c:  5.63626385
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='yqtianust' date='2019-08-28T13:20:46Z'>
		My understand is it's calling



tensorflow/tensorflow/core/kernels/cwise_ops.h


        Lines 837 to 838
      in
      aac18a3






 template &lt;typename T&gt; 



 struct log : base&lt;T, Eigen::internal::scalar_log_op&lt;T&gt;&gt; {}; 





to calculate the result.
Please correct me if I am wrong.
		</comment>
		<comment id='7' author='yqtianust' date='2019-08-28T15:36:34Z'>
		In that case, let's also open an issue on Eigen and crossreference to here
		</comment>
		<comment id='8' author='yqtianust' date='2019-08-29T10:36:45Z'>
		I have write a sample code to do the test of Eigen:
&lt;denchmark-code&gt;  #include &lt;iostream&gt;
  #include &lt;Eigen/Core&gt;
  #include "Eigen/src/Core/functors/UnaryFunctors.h"
  #include &lt;iomanip&gt;
  using namespace Eigen;
  using namespace std;
  int main()
  {
    Eigen::Matrix&lt;float, 100, 1&gt; tmp = Eigen::Matrix&lt;float, 100, 1&gt;::Constant(100, 1, 280.41303540865516);
    cout &lt;&lt; setprecision(8) &lt;&lt; tmp &lt;&lt; endl &lt;&lt; "becomes: " &lt;&lt; endl &lt;&lt; tmp.unaryExpr(internal::scalar_log_op&lt;float&gt;()) &lt;&lt; endl;
  }
&lt;/denchmark-code&gt;

When I build it, I link to the Eigen lib which tensorflow use.
However, this code didn't happens the problem.
I mean all of the output is same.
Moreover, I narrow down this issue to the code snippet:



tensorflow/tensorflow/core/kernels/cwise_ops_common.h


        Lines 537 to 543
      in
      69b1fea






 template &lt;typename Functor&gt; 



 struct UnaryFunctor&lt;CPUDevice, Functor&gt; { 



 void operator()(const CPUDevice&amp; d, typename Functor::tout_type out, 



 typename Functor::tin_type in) { 



 Assign(d, out, in.unaryExpr(typename Functor::func())); 



   } 



 }; 





		</comment>
		<comment id='9' author='yqtianust' date='2019-08-31T12:09:47Z'>
		&lt;denchmark-link:https://github.com/Leslie-Fang&gt;@Leslie-Fang&lt;/denchmark-link&gt;
 Have you tried other data type? like double? I am not familiar with Eigen.
It seems this issue will not occurs when using dtype float16, but it will occur when using float32 in tensorflow.
Alos, have you tried GDB on the issue &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/31408&gt;#31408&lt;/denchmark-link&gt;
?
Or it is possible the problem is due to the connection between Eigen and TensorFlow?
		</comment>
		<comment id='10' author='yqtianust' date='2019-09-02T03:26:56Z'>
		&lt;denchmark-link:https://github.com/yqtianust&gt;@yqtianust&lt;/denchmark-link&gt;
 I suspect the problem may happen in the tensor copy process. But I don't have any clue now.
		</comment>
		<comment id='11' author='yqtianust' date='2020-05-27T06:39:44Z'>
		&lt;denchmark-link:https://github.com/yqtianust&gt;@yqtianust&lt;/denchmark-link&gt;

Is this still an issue.
		</comment>
		<comment id='12' author='yqtianust' date='2020-05-31T06:45:42Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 I think so.
However, according to &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/31408&gt;#31408&lt;/denchmark-link&gt;
.

Both numbers are correct to within 1 ulp (unit in last place). The inconsistency is due to the difference between the vectorized and scalar path in the underlying Eigen code. In short, please don't rely on exact equality of floating point numbers.

		</comment>
		<comment id='13' author='yqtianust' date='2020-08-10T09:33:16Z'>
		based on the last comment, closing this bug as of now. Please let me know if this is still a problem.
		</comment>
		<comment id='14' author='yqtianust' date='2020-08-10T09:33:18Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31619&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/31619&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>