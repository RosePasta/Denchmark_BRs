<bug id='27112' author='mckeown12' open_date='2019-03-25T15:11:17Z' closed_time='2019-04-22T15:12:08Z'>
	<summary>Cannot export Keras model TypeError: ('Not JSON Serializable:', b'\n...')</summary>
	<description>
Versions:
Mac OS 10.14.3
TF 2.0.0-dev20190319
import tensorflow as tf
from tensorflow.python import tf2
from tensorflow.keras.layers import Input
from tensorflow.keras.models import Model
print(tf.__version__)

import numpy as np
import pandas as pd
import os
# Goal: predict liquidlinePressure as a function of ambientTemp and current
df = pd.DataFrame([[250, 23.2, 8],
                    [255, 22.5, 7.5],
                    [256, 24.0, 8.5],
                    [258, 24.0, 9],
                    [260, 25.1, 8.5]], columns=['liquidLinePressure', 'ambientTemp', 'current'])
#-----standardizing constants
xmu = [26.0,6.0]
xsigma = [5.0, 3.0]
ymu = [255.0]
ysigma = [41.0]
#------------ prepare inputs and outputs
df = df.values
input_features=['ambientTemp','current']
output_features=['liquidLinePressure']
X=df[:,1:]
X = {input_features[i]:x.reshape(-1,1) for i, x in enumerate(X.T)}
y=(df[:,0:1]-ymu)/ysigma #standardize y's for training, but standardize x's within the model

#--------------using Kera's functional api for standardization of inputs
ambientTemp = Input(shape=(1,), dtype='float', name='ambientTemp')
ambientTemp_enc = ((ambientTemp-xmu[0])/xsigma[0])
current=Input(shape=(1,), dtype='float', name='current')
current_enc = ((current-xmu[1])/xsigma[1])

inputs=[ambientTemp, current]
standardizedIns = [ambientTemp_enc, current_enc]
standardized_inputs = tf.keras.layers.concatenate(inputs)
#--model layers
dense1 = tf.keras.layers.Dense(16, activation='relu')(standardized_inputs)
dense2 = tf.keras.layers.Dense(64, activation='relu')(dense1)
dense3 = tf.keras.layers.Dense(64, activation='relu')(dense2)
standardized_outputs = tf.keras.layers.Dense(1, activation='linear')(dense3)

train_model=Model(inputs=inputs, outputs=standardized_outputs)
train_model.compile(optimizer='adam', loss='mse')
train_model.fit(x=X, y=y, epochs=1, verbose=1, batch_size=64,
 shuffle=True);
train_model.save_weights('trainweights.h5')
train_model.save('train_model.h5')  #this works
train_model.summary()

#--- for tf serving, I would like to return unstandardized outputs
liquidLinePressureMean = ((standardized_outputs*ysigma[0])+ymu[0])
outputs=[liquidLinePressureMean]

export_model=Model(inputs=inputs, outputs=outputs, name='model_that_takes_care_of_standardization.h5')
export_model.build(input_shape=[(None,),(None,)]) #is this line necessary/correct?
export_model.summary()
#traceback occurs below
export_model.save('my_model.h5') #this doesn't work
It is curious that the preprocessing steps can serialize fine, but something goes wrong either with the definition/building of the , or with the postprocessing steps...
(I apologize in advance if this is user error and not a bug-- it seems related to issues [here] (&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/19303&gt;#19303&lt;/denchmark-link&gt;
) and &lt;denchmark-link:https://github.com/keras-team/keras/issues/9342&gt;here&lt;/denchmark-link&gt;
 both of which have seemingly hacky solutions.
2.0.0-dev20190319
2019-03-25 10:43:07.165064: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
5/5 [==============================] - 0s 26ms/sample - loss: 10.0754
Model: "model"
__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to                     
==================================================================================================
ambientTemp (InputLayer)        [(None, 1)]          0                                            
__________________________________________________________________________________________________
current (InputLayer)            [(None, 1)]          0                                            
__________________________________________________________________________________________________
concatenate (Concatenate)       (None, 2)            0           ambientTemp[0][0]                
                                                                 current[0][0]                    
__________________________________________________________________________________________________
dense (Dense)                   (None, 16)           48          concatenate[0][0]                
__________________________________________________________________________________________________
dense_1 (Dense)                 (None, 64)           1088        dense[0][0]                      
__________________________________________________________________________________________________
dense_2 (Dense)                 (None, 64)           4160        dense_1[0][0]                    
__________________________________________________________________________________________________
dense_3 (Dense)                 (None, 1)            65          dense_2[0][0]                    
==================================================================================================
Total params: 5,361
Trainable params: 5,361
Non-trainable params: 0
__________________________________________________________________________________________________
Model: "model_that_takes_care_of_standardization.h5"
__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to                     
==================================================================================================
ambientTemp (InputLayer)        [(None, 1)]          0                                            
__________________________________________________________________________________________________
current (InputLayer)            [(None, 1)]          0                                            
__________________________________________________________________________________________________
concatenate (Concatenate)       (None, 2)            0           ambientTemp[0][0]                
                                                                 current[0][0]                    
__________________________________________________________________________________________________
dense (Dense)                   (None, 16)           48          concatenate[0][0]                
__________________________________________________________________________________________________
dense_1 (Dense)                 (None, 64)           1088        dense[0][0]                      
__________________________________________________________________________________________________
dense_2 (Dense)                 (None, 64)           4160        dense_1[0][0]                    
__________________________________________________________________________________________________
dense_3 (Dense)                 (None, 1)            65          dense_2[0][0]                    
__________________________________________________________________________________________________
strided_slice (TensorFlowOpLaye [None]               0           dense_3[0][0]                    
__________________________________________________________________________________________________
mul (TensorFlowOpLayer)         [None]               0           strided_slice[0][0]              
__________________________________________________________________________________________________
add (TensorFlowOpLayer)         [None]               0           mul[0][0]                        
==================================================================================================
Total params: 5,361
Trainable params: 5,361
Non-trainable params: 0
__________________________________________________________________________________________________
Traceback (most recent call last):
  File "minimal_example.py", line 65, in &lt;module&gt;
    export_model.save('my_model.h5')
  File "/Users/jamesmckeown/anaconda2/envs/py36/lib/python3.6/site-packages/tensorflow/python/keras/engine/network.py", line 1319, in save
    save_model(self, filepath, overwrite, include_optimizer)
  File "/Users/jamesmckeown/anaconda2/envs/py36/lib/python3.6/site-packages/tensorflow/python/keras/saving/hdf5_format.py", line 103, in save_model
    default=serialization.get_json_type).encode('utf8')
  File "/Users/jamesmckeown/anaconda2/envs/py36/lib/python3.6/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/Users/jamesmckeown/anaconda2/envs/py36/lib/python3.6/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/Users/jamesmckeown/anaconda2/envs/py36/lib/python3.6/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/Users/jamesmckeown/anaconda2/envs/py36/lib/python3.6/site-packages/tensorflow/python/util/serialization.py", line 69, in get_json_type
    raise TypeError('Not JSON Serializable:', obj)
TypeError: ('Not JSON Serializable:', b'\n\rstrided_slice\x12\x0cStridedSlice\x1a\x0fdense_3/BiasAdd\x1a\x13strided_slice/begin\x1a\x11strided_slice/end\x1a\x15strided_slice/strides*\x16\n\x10shrink_axis_mask\x12\x02\x18\x01*\x10\n\nbegin_mask\x12\x02\x18\x00*\x13\n\rellipsis_mask\x12\x02\x18\x00*\x13\n\rnew_axis_mask\x12\x02\x18\x00*\x0e\n\x08end_mask\x12\x02\x18\x00*\x07\n\x01T\x12\x020\x01*\x0b\n\x05Index\x12\x020\x03')
It is also curious to me that the constants used for unstandardizing the output do not show up as Non-trainable params of the second model.  Is this expected behavior?
	</description>
	<comments>
		<comment id='1' author='mckeown12' date='2019-03-27T14:56:11Z'>
		Possibly related: &lt;denchmark-link:https://github.com/keras-team/keras/issues/12473&gt;keras-team/keras#12473&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='mckeown12' date='2019-04-20T05:40:57Z'>
		&lt;denchmark-link:https://github.com/mckeown12&gt;@mckeown12&lt;/denchmark-link&gt;
  Were you ever able to solve this problem? I'm having the same issue and not sure what is causing it. It only started after I started using tf-nightly.
Edit: I think it's caused when using tensorflow ops (instead of a keras layer) with Keras Model API. I can avoid this error by wrapping operations in Lambda. For example:
This causes an error
embed_layer += get_position_encoding(timesteps, embed_size)
This does not
embed_layer = tf.keras.layers.Lambda(lambda x: x + get_position_encoding(timesteps, embed_size))(embed_layer)
Edit2: The problem is that TensorFlowOpLayer has a property "node_def" of type bytes in its config instead of str, and it causes an error when saving model. The property usually has a value of something like b'\n\rstrided_slice\x12\x0cStridedSlice\x1a\x0fdense_3/BiasAdd\x1a\x13strided_slice/begin\x1a\x11strided_slice/end\x1a\x15strided_slice/strides*\x16\n\x10shrink_axis_mask\x12\x02\x18\x01*\x10\n\nbegin_mask\x12\x02\x18\x00*\x13\n\rellipsis_mask\x12\x02\x18\x00*\x13\n\rnew_axis_mask\x12\x02\x18\x00*\x0e\n\x08end_mask\x12\x02\x18\x00*\x07\n\x01T\x12\x020\x01*\x0b\n\x05Index\x12\x020\x03.
		</comment>
		<comment id='3' author='mckeown12' date='2019-04-22T15:12:08Z'>
		I ended up using tf.saved_model.save(export_model, '/path/to/save/model') for tf serving.
		</comment>
		<comment id='4' author='mckeown12' date='2019-04-22T15:12:10Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=27112&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=27112&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='mckeown12' date='2019-05-17T10:45:03Z'>
		Just let us know if there is any resolution to this issue.
		</comment>
		<comment id='6' author='mckeown12' date='2019-05-20T13:58:47Z'>
		Yes, &lt;denchmark-link:https://github.com/eralmansouri&gt;@eralmansouri&lt;/denchmark-link&gt;
 's solution works for me to save to  as well.  Replacing the line
liquidLinePressureMean = ((standardized_outputs*ysigma[0])+ymu[0])
with
liquidLinePressureMean = tf.keras.layers.Lambda(lambda x: (x*ysigma[0])+ymu[0])(standardized_outputs)
makes my original example work as expected.
		</comment>
		<comment id='7' author='mckeown12' date='2019-07-08T05:51:59Z'>
		&lt;denchmark-link:https://github.com/eralmansouri&gt;@eralmansouri&lt;/denchmark-link&gt;
 solution solved the problem in my case. I guess the problem comes from the tensorflow op in keras. I converted two of my tensorflow ops to keras layers and the problem no longer exists.
x = tf.image.resize(x, (IM_H, IM_W))
--&gt; x = tf.keras.layers.Lambda(lambda x: tf.image.resize(x, (IM_H, IM_W)))(x)
and
x = tf.math.divide(x, tf.reduce_max(x))
--&gt; x = tf.keras.layers.Lambda(lambda x: tf.math.divide(x, tf.reduce_max(x)))(x)
The output of the network is still the same after the conversion.
		</comment>
		<comment id='8' author='mckeown12' date='2019-07-10T23:10:44Z'>
		For anyone else having this problem, I had success modifying my code from:
&lt;denchmark-code&gt;concat = tf.concat([foo, bar], axis=3)
&lt;/denchmark-code&gt;

To instead use:
&lt;denchmark-code&gt;concat = tf.keras.layers.Concatenate(axis=3)([foo, bar])
&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='mckeown12' date='2019-07-20T11:44:12Z'>
		can confirm &lt;denchmark-link:https://github.com/krisives&gt;@krisives&lt;/denchmark-link&gt;
 solution solved this issue :)
		</comment>
		<comment id='10' author='mckeown12' date='2019-11-25T14:52:22Z'>
		
For anyone else having this problem, I had success modifying my code from:
concat = tf.concat([foo, bar], axis=3)

To instead use:
concat = tf.keras.layers.Concatenate(axis=3)([foo, bar])


&lt;denchmark-link:https://github.com/krisives&gt;@krisives&lt;/denchmark-link&gt;
 Thank you, helped! (My issue was with using tf.reshape, and instead I used tf.keras.layers.Reshape)
		</comment>
	</comments>
</bug>