<bug id='33788' author='ONLYstcm' open_date='2019-10-28T15:50:46Z' closed_time='2019-11-05T04:33:14Z'>
	<summary>TFLiteConverter from_keras_model TypeError: call() got an unexpected keyword argument 'training'</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Custom code
Arch Linux Kernel 5.3.7
TensorFlow installed via pip
TensorFlow version v2.0.0-rc2-26-g64c3d38 2.0.0
Python version: 3.7.4

Describe the current behavior
When trying to convert a Keras CNN to TFlite file I get an error at the following line: converter = tf.lite.TFLiteConverter.from_keras_model(model)
Describe the expected behavior
A TFlite file is expected to be created and written to the local directory.
Code to reproduce the issue
&lt;denchmark-code&gt;# Importing the Keras libraries and packages
from keras.models import Sequential, save_model
from keras.layers.core import Dense, Dropout, Flatten
from keras.layers.convolutional import Conv2D, MaxPooling2D
from keras.preprocessing import image
from sklearn.metrics import classification_report, confusion_matrix
import tensorflow as tf
import numpy as np

imageResX, imageResY = 256, 256

def CNNmodel():
	classifier = Sequential()
	classifier.add(Conv2D(filters=128, kernel_size=(3,3), activation='relu', input_shape=(imageResX, imageResY, 3)))
	classifier.add(MaxPooling2D(pool_size=(3,3)))
	classifier.add(Flatten())
	classifier.add(Dense(units=128, activation='relu'))
	classifier.add(Dropout(rate=0.5))
	classifier.add(Dense(units=4, activation='softmax'))
	classifier.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])
	return classifier

# create a data generators
train_datagen = image.ImageDataGenerator(rescale=1./255)
test_datagen = image.ImageDataGenerator(rescale=1./255) 

training_set = train_datagen.flow_from_directory('MY DATA/Training', target_size = (imageResX, imageResY), batch_size = 64, class_mode = 'categorical')
evaluate_set = train_datagen.flow_from_directory('MY DATA/Evaluation', target_size = (imageResX, imageResY), batch_size = 64, class_mode = 'categorical')
test_set = test_datagen.flow_from_directory('MY DATA/Testing', target_size = (imageResX, imageResY), batch_size = 64, class_mode = 'categorical', shuffle=False)

step_size_train=training_set.n//training_set.batch_size
step_size_evaluate=evaluate_set.n//evaluate_set.batch_size
step_size_test=test_set.n//test_set.batch_size

model = CNNmodel()
history = model.fit_generator(generator=training_set, steps_per_epoch=step_size_train, epochs=1, validation_data=evaluate_set, validation_steps=step_size_evaluate)

labels = (training_set.class_indices)
labels = dict((v,k) for k,v in labels.items())

# Save KERAS model
modelName = "ST-AI-Model"
save_model(model, str(modelName+".h5"))

# Convert KERAS model
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()
open(str(modelName+".tflite"), "wb").write(tflite_model)

prediction = model.predict_generator(generator=test_set, verbose=1)
classes = test_set.classes[test_set.index_array]
predicted_class_indices = np.argmax(prediction, axis=1)
target_names = [labels[k] for k in range(len(training_set.class_indices))]


print('Confusion Matrix')
print(confusion_matrix(test_set.classes[test_set.index_array], predicted_class_indices))
print('Classification Report')
print(sum(predicted_class_indices==classes)/len(test_set.classes))
print(classification_report(test_set.classes[test_set.index_array], predicted_class_indices, target_names=target_names))
&lt;/denchmark-code&gt;

Other info / logs

Traceback (most recent call last):
File "/home/user/code/classifier.py", line 98, in 
converter = tf.lite.TFLiteConverter.from_keras_model(model)
File "/usr/lib/python3.7/site-packages/tensorflow_core/lite/python/lite.py", line 383, in from_keras_model
concrete_func = func.get_concrete_function()
File "/usr/lib/python3.7/site-packages/tensorflow_core/python/eager/def_function.py", line 776, in get_concrete_function
self._initialize(args, kwargs, add_initializers_to=initializer_map)
File "/usr/lib/python3.7/site-packages/tensorflow_core/python/eager/def_function.py", line 408, in _initialize
*args, **kwds))
File "/usr/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py", line 1848, in _get_concrete_function_internal_garbage_collected
graph_function, _, _ = self._maybe_define_function(args, kwargs)
File "/usr/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py", line 2150, in _maybe_define_function
graph_function = self._create_graph_function(args, kwargs)
File "/usr/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py", line 2041, in _create_graph_function
capture_by_value=self._capture_by_value),
File "/usr/lib/python3.7/site-packages/tensorflow_core/python/framework/func_graph.py", line 915, in func_graph_from_py_func
func_outputs = python_func(*func_args, **func_kwargs)
File "/usr/lib/python3.7/site-packages/tensorflow_core/python/eager/def_function.py", line 358, in wrapped_fn
return weak_wrapped_fn().wrapped(*args, **kwds)
File "/usr/lib/python3.7/site-packages/tensorflow_core/python/keras/saving/saving_utils.py", line 143, in _wrapped_model
outputs_list = nest.flatten(model(inputs=inputs, training=False))
File "/usr/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py", line 75, in symbolic_fn_wrapper
return func(*args, **kwargs)
File "/usr/lib/python3.7/site-packages/keras/engine/base_layer.py", line 489, in call
output = self.call(inputs, **kwargs)
TypeError: call() got an unexpected keyword argument 'training'
[Finished in 666.7s with exit code 1]

	</description>
	<comments>
		<comment id='1' author='ONLYstcm' date='2019-10-31T18:24:41Z'>
		Could you try something like this:
Before you actually create the tflite converter:
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()
open(str(modelName+".tflite"), "wb").write(tflite_model)
Try load a new instance of the keras model you just saved, rather than using the one created before training. I just create the same keras model 'CNNmodel' as yours, and convert it directly to tflite (without the fit step) and it works without any issue.
		</comment>
		<comment id='2' author='ONLYstcm' date='2019-11-01T08:56:58Z'>
		I tried that. Still gives the same error. I've even simplified the code to a much more simple case that produces the same error.
&lt;denchmark-code&gt;# Importing the Keras libraries and packages
from keras.models import Sequential, save_model
from keras.layers.core import Dense, Dropout, Flatten
from keras.layers.convolutional import Conv2D, MaxPooling2D
import tensorflow as tf

imageResX, imageResY = 256, 256

def CNNmodel():
	classifier = Sequential()
	classifier.add(Conv2D(filters=128, kernel_size=(3,3), activation='relu', input_shape=(imageResX, imageResY, 3)))
	classifier.add(MaxPooling2D(pool_size=(3,3)))
	classifier.add(Flatten())
	classifier.add(Dense(units=128, activation='relu'))
	classifier.add(Dropout(rate=0.5))
	classifier.add(Dense(units=4, activation='softmax'))
	classifier.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])
	return classifier

model = CNNmodel()

# Convert KERAS model
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()
open("test.tflite", "wb").write(tflite_model)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='ONLYstcm' date='2019-11-04T01:12:27Z'>
		I'm getting the same error trying to do the same thing, was the resolved?
		</comment>
		<comment id='4' author='ONLYstcm' date='2019-11-04T03:20:52Z'>
		I've fixed this issue (and am on to the next bug). I was also using the keras lib, however if you switch over to tf.keras the problem goes away.
		</comment>
		<comment id='5' author='ONLYstcm' date='2019-11-04T22:50:41Z'>
		Forgot to mention that I was also using the tf.keras API rather than the pure keras version. Could you try switching to tf.keras API and convert?
		</comment>
		<comment id='6' author='ONLYstcm' date='2019-11-05T04:33:14Z'>
		I just switched over, now it's working!
		</comment>
		<comment id='7' author='ONLYstcm' date='2019-11-05T04:33:15Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33788&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/33788&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='ONLYstcm' date='2020-02-17T16:33:50Z'>
		
Forgot to mention that I was also using the tf.keras API rather than the pure keras version. Could you try switching to tf.keras API and convert?

I am getting this error, I am using pure keras, what needs to be done to switch to tf.keras
converter = tf.lite.TFLiteConverter.from_keras_model(model)
should this line be changed to something else, please advise with a code snippet
		</comment>
		<comment id='9' author='ONLYstcm' date='2020-02-18T18:34:00Z'>
		

Forgot to mention that I was also using the tf.keras API rather than the pure keras version. Could you try switching to tf.keras API and convert?

I am getting this error, I am using pure keras, what needs to be done to switch to tf.keras
converter = tf.lite.TFLiteConverter.from_keras_model(model)
should this line be changed to something else, please advise with a code snippet

I mean when you build your keras model, use the tf.keras.xxx layer API instead of the one without the tf prefix. I believe there are some minor differences between the two set of APIs. Cheers.
		</comment>
		<comment id='10' author='ONLYstcm' date='2020-03-31T17:28:19Z'>
		I am unable to create a new model using tf.keras API, but when using keras it works (but I can't convert keras model to TFLite model.).
Python 3.6.8
Tf: 2.1.0
keras-transformer: 0.32
code :
dict_size = 7000 model = get_model( token_num=dict_size, embed_dim=32, encoder_num=3, decoder_num=2, head_num=4, hidden_dim=128, attention_activation='relu', feed_forward_activation='relu', dropout_rate=0.5, embed_weights=np.random.random((dict_size, 32)) )
model.compile( optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'] )
model.summary()

AttributeError
Traceback (most recent call last)in module
11     feed_forward_activation='relu',
12     dropout_rate=0.5,
------ 13     embed_weights=np.random.random((dict_size, 32))
14 )
15 model.compile(

D:\projects\GEC\tflite\keras_transformer\transformer.py in get_model(token_num, embed_dim, encoder_num, decoder_num, head_num, hidden_dim, attention_activation, feed_forward_activation, dropout_rate, use_same_embed, embed_weights, embed_trainable, trainable, use_adapter, adapter_units, adapter_activation)
443         mode=TrigPosEmbedding.MODE_ADD,
444         name='Encoder-Embedding',
-- 445     )(encoder_embed_layer(encoder_input)[0])
446     encoded_layer = get_encoders(
447         encoder_num=encoder_num,
d:\projects\gec\tf2.1\lib\site-packages\keras\backend\tensorflow_backend.py in symbolic_fn_wrapper(*args, **kwargs)
73         if _SYMBOLIC_SCOPE.value:
74             with get_graph().as_default():
--- 75                 return func(*args, **kwargs)
76         else:
77             return func(*args, **kwargs)
d:\projects\gec\tf2.1\lib\site-packages\keras\engine\base_layer.py in call(self, inputs, **kwargs)
473
474             # Handle mask propagation.
-- 475             previous_mask = _collect_previous_mask(inputs)
476             user_kwargs = kwargs.copy()
477             if not is_all_none(previous_mask):
d:\projects\gec\tf2.1\lib\site-packages\keras\engine\base_layer.py in _collect_previous_mask(input_tensors)
1439             inbound_layer, node_index, tensor_index = x._keras_history
1440             node = inbound_layer._inbound_nodes[node_index]

1441             mask = node.output_masks[tensor_index]
1442             masks.append(mask)
1443         else:

AttributeError: 'Node' object has no attribute 'output_masks'
		</comment>
		<comment id='11' author='ONLYstcm' date='2020-04-19T14:15:37Z'>
		

Forgot to mention that I was also using the tf.keras API rather than the pure keras version. Could you try switching to tf.keras API and convert?

I am getting this error, I am using pure keras, what needs to be done to switch to tf.keras
converter = tf.lite.TFLiteConverter.from_keras_model(model)
should this line be changed to something else, please advise with a code snippet

Here is how the import statements should look. Notice that it is not straight forwards "Find&amp;Replace" as a number of paths have changed.
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow.keras.models import Sequential, save_model
from tensorflow.keras.layers import Dense, Dropout, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D
&lt;/denchmark-code&gt;

		</comment>
		<comment id='12' author='ONLYstcm' date='2020-07-01T09:40:41Z'>
		&lt;denchmark-link:https://github.com/mritunjai-chandra&gt;@mritunjai-chandra&lt;/denchmark-link&gt;
 to your problem， try to update your tensorflow at least 2.3
		</comment>
	</comments>
</bug>