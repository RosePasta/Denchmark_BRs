<bug id='5285' author='elibixby' open_date='2016-10-30T15:58:08Z' closed_time='2018-01-22T02:14:03Z'>
	<summary>(0.11) parse_single_example doesn't play well with read_file</summary>
	<description>
minimal reproduction:
&lt;denchmark-code&gt;import tensorflow as tf

tf.logging.set_verbosity(tf.logging.DEBUG)
index = ['a', 'b', 'c']

with tf.python_io.TFRecordWriter('test.pb2') as writer:
    writer.write(tf.train.Example(features=tf.train.Features(
        feature={'index': tf.train.Feature(bytes_list=tf.train.BytesList(
            value=index))})).SerializeToString())

index_example = tf.read_file('test.pb2')
index = tf.parse_single_example(
    index_example,
    {'index': tf.FixedLenFeature([3], tf.string)}
)['index']

with tf.Session() as sess:
    tf.logging.debug(index_example.eval())
    tf.logging.debug(index.eval())
&lt;/denchmark-code&gt;

You'll notice that read_file works just fine, and outputs bytes as expected, but then the process will completely lock up, and does not respond to SIGINT, responding only to SIGKILL or SIGTERM. Not sure what's going on here, although I suspect that read_file is reading some leading/trailing bytes that TFRecordReader strips off.
Still it seems like TFRecords should be a valid I/O format without requiring a filename queue, (e.g. for reading in initial vocabulary files), and I thought that read_file + parse_single_example would be the expected way to do this. Instead I guess I need to use make_tensor_proto or something? Not sure why this is a separate serialization strategy... and completely missing from the docs.
At the very least, parse_single_example should fail and not livelock when it gets these strings.
EDIT: For people wondering what the correct pattern is it appears to be something like:
&lt;denchmark-code&gt;import tensorflow as tf
from tensorflow.contrib.util import make_tensor_proto

tf.logging.set_verbosity(tf.logging.DEBUG)
index = ['a', 'b', 'c']

with open('test.pb2', 'wb') as writer:
    writer.write(make_tensor_proto(index, dtype=tf.string, shape=[3]).SerializeToString())

index_example = tf.read_file('test.pb2')
index = tf.parse_tensor(index_example, tf.string)

with tf.Session() as sess:
    tf.logging.debug(index_example.eval())
    tf.logging.debug(index.eval())
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='elibixby' date='2016-10-30T17:22:47Z'>
		Let me repro this, it looks like the example doesn't work.
Which versions did you try?
		</comment>
		<comment id='2' author='elibixby' date='2016-10-30T17:26:57Z'>
		0.11.0rc0 Also. I think this may be related to system encodings for python, since when running it on Cloud ML I get a utf8 encoding error... sys.getdefaultencoding is ascii (the default). I'm on Goobuntu 14.04.
		</comment>
		<comment id='3' author='elibixby' date='2016-10-30T17:36:27Z'>
		Yeah these parse errors have been appearing, some of them are correct, some aren't, I haven't traced this down yet.
		</comment>
		<comment id='4' author='elibixby' date='2017-06-16T18:04:21Z'>
		&lt;denchmark-link:https://github.com/drpngx&gt;@drpngx&lt;/denchmark-link&gt;
 What's the status of this bug?
		</comment>
		<comment id='5' author='elibixby' date='2017-12-22T07:39:06Z'>
		It has been 14 days with no activity and the awaiting tensorflower label was assigned. Please update the label and/or status accordingly.
		</comment>
		<comment id='6' author='elibixby' date='2018-01-05T19:12:06Z'>
		Nagging Awaiting TensorFlower: It has been 14 days with no activityand the awaiting tensorflower label was assigned. Please update the label and/or status accordingly.
		</comment>
		<comment id='7' author='elibixby' date='2018-01-05T22:49:04Z'>
		Is that still an issue with the new dataset api?
		</comment>
		<comment id='8' author='elibixby' date='2018-01-22T02:14:03Z'>
		It doesn't appear to be a problem anymore, I just reran the snippet code above and it now fails fast and with an InvalidArgumentError which is somewhat useful.
Side Note: tf.parse_single_example still exists, so it doesn't really matter whether or not this is the preferable way of doing things, it shouldn't fail this catastrophically.
		</comment>
	</comments>
</bug>