<bug id='39060' author='EgorLakomkin' open_date='2020-04-30T19:55:58Z' closed_time='2020-06-19T07:41:04Z'>
	<summary>XLA function crashed when called under GradientTape</summary>
	<description>
Hello,
Describe the current behavior
I have a function compiled with XLA (tf.function + experimental_compile=True) which writes the processed output to the TensorArray. When called inside GradientTape it crashes. Without experimental_compile=True everything works fine.
Describe the expected behavior
function does not crash

Colab link to reproduce the crash: &lt;denchmark-link:https://colab.research.google.com/drive/1Hh7fFkWVC8YCPqTtkQXDNVB8elQS8rq0#scrollTo=MpeMlEwGje0n&gt;https://colab.research.google.com/drive/1Hh7fFkWVC8YCPqTtkQXDNVB8elQS8rq0#scrollTo=MpeMlEwGje0n&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='EgorLakomkin' date='2020-05-01T06:28:35Z'>
		It seems like the TensorArray is causing this crash.
		</comment>
		<comment id='2' author='EgorLakomkin' date='2020-05-04T08:52:16Z'>
		Was able to reproduce the error with &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/8c6095ec7494526e323fd789253b753b/39060-2-2.ipynb#scrollTo=yHUVor_qkn7h&gt;TF v2.2.0-rc3&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/d113930f63ca0bb2c640ada2efaee9b4/39060-tf-nightly.ipynb&gt;TF-nightly&lt;/denchmark-link&gt;
.
However, code works without any issues with &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/32dfbddc0ddfb20bacb17eef47761b0a/39060-2-1.ipynb&gt;TF v2.1&lt;/denchmark-link&gt;
. Please find the attached gist. Thanks!
		</comment>
		<comment id='3' author='EgorLakomkin' date='2020-05-12T23:13:28Z'>
		&lt;denchmark-link:https://github.com/EgorLakomkin&gt;@EgorLakomkin&lt;/denchmark-link&gt;
 As a workaround, you can remove  around the  method inside the layer. Here it does not do anything (since the whole computation is compiled by the outer function), and is causing the crash.
In general, TensorArray handling in XLA does have some sharp edges...
		</comment>
		<comment id='4' author='EgorLakomkin' date='2020-05-14T09:46:09Z'>
		&lt;denchmark-link:https://github.com/cheshire&gt;@cheshire&lt;/denchmark-link&gt;
 Thank you for the suggestion! I am looking how to use XLA for implementing a RNN, maybe there is an alternative to TensorArray to do it?
		</comment>
		<comment id='5' author='EgorLakomkin' date='2020-05-14T16:44:07Z'>
		&lt;denchmark-link:https://github.com/EgorLakomkin&gt;@EgorLakomkin&lt;/denchmark-link&gt;
 There is one bug and one missing feature here:

Nested tf.function(experimental_compile=True) should not affect the result at all, but here it does (the error you are seeing)
If you remove the outer tf.function you'll get the missing feature: TensorArray transition across TF/XLA boundary is not implemented.

If you are fine with keeping the outer tf.function(experimental_compile=True) you should be able to do it as you are doing now and keep good performance, right?
Or do you want to ship it as a library where you have no control over the user code which might take a derivative?
		</comment>
		<comment id='6' author='EgorLakomkin' date='2020-05-23T09:38:56Z'>
		&lt;denchmark-link:https://github.com/cheshire&gt;@cheshire&lt;/denchmark-link&gt;
  Thank you! If I keep only the outer experimental_compile I also have the code crash (repro in colab &lt;denchmark-link:https://colab.research.google.com/drive/1ehh6kklHmXSmcDs6mCdM-6y59v01dXKF?usp=sharing&gt;https://colab.research.google.com/drive/1ehh6kklHmXSmcDs6mCdM-6y59v01dXKF?usp=sharing&lt;/denchmark-link&gt;
), though its completely different one:
&lt;denchmark-code&gt;XLA compilation requires that operator arguments that represent shapes or dimensions be evaluated to concrete values at compile time.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='EgorLakomkin' date='2020-05-26T15:57:19Z'>
		&lt;denchmark-link:https://github.com/EgorLakomkin&gt;@EgorLakomkin&lt;/denchmark-link&gt;
 I have a fix for the issue with both inner and outer function compiled, which should be released shortly.
Could you file a separate bug on XLA compilation requires that operator arguments that represent shapes or dimensions be evaluated to concrete values at compile time. and assign it to me? Also your colab link is requiring some permissions I don't have.
		</comment>
		<comment id='8' author='EgorLakomkin' date='2020-05-26T20:40:59Z'>
		&lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/0e4e0c593bf7957aefd29818e2d24caee00c841a&gt;0e4e0c5&lt;/denchmark-link&gt;
 fixes your original problem. Could you file another bug for a different problem you are seeing?
		</comment>
		<comment id='9' author='EgorLakomkin' date='2020-05-27T11:22:13Z'>
		&lt;denchmark-link:https://github.com/cheshire&gt;@cheshire&lt;/denchmark-link&gt;
 Thank you! Filed a ticket with another issue: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/39904&gt;#39904&lt;/denchmark-link&gt;
 Cannot assign you directly on GitHub (at least did not find out how).
		</comment>
		<comment id='10' author='EgorLakomkin' date='2020-06-17T23:47:33Z'>
		&lt;denchmark-link:https://github.com/EgorLakomkin&gt;@EgorLakomkin&lt;/denchmark-link&gt;
 can we close this issue, since the original issue is solved.
		</comment>
		<comment id='11' author='EgorLakomkin' date='2020-06-19T07:41:04Z'>
		Sure, thx for the fix!
		</comment>
		<comment id='12' author='EgorLakomkin' date='2020-06-19T07:41:05Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39060&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/39060&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>