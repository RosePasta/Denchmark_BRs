<bug id='28976' author='hsm207' open_date='2019-05-23T18:53:14Z' closed_time='2020-03-30T09:31:00Z'>
	<summary>TF2.0 tf.keras.estimator.model_to_estimator does not store input_names from tf.keras.layers.DenseFeatures</summary>
	<description>
Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Google Colab
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): NA
TensorFlow version (use command below): v1.12.0-9492-g2c319fb415 2.0.0-alpha0
Python version: 3.6.7 (default, Oct 22 2018, 11:32:17)  [GCC 8.2.0]
Bazel version (if compiling from source): NA
GCC/Compiler version (if compiling from source): NA
CUDA/cuDNN version: NA
GPU model and memory: NA

You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with: 1. TF 1.0:  2. TF 2.0: 
Describe the current behavior
I created a Keras model that takes as input 2 feature columns named 'store' and 'loc'.
Converting it to an Estimator and then training it throws an exception because it assumes the input names are 'input_1' and 'input_2'.
Describe the expected behavior
Train the keras estimator without errors
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
Please see this gist: &lt;denchmark-link:https://gist.github.com/hsm207/ed5a28f4156e0088b0d1098e225e70fb&gt;https://gist.github.com/hsm207/ed5a28f4156e0088b0d1098e225e70fb&lt;/denchmark-link&gt;

Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='hsm207' date='2019-05-24T09:09:10Z'>
		I was able to get the mentioned error when trying with TensorFlow version 2.0.0-alpha on Colab.
		</comment>
		<comment id='2' author='hsm207' date='2019-09-11T22:36:49Z'>
		&lt;denchmark-link:https://github.com/hsm207&gt;@hsm207&lt;/denchmark-link&gt;
 Cannot load the shared gist. Can you please test it against tf 2.0 nightly version and check if the issue still persists. Thanks!
&lt;denchmark-code&gt;pip install tf-nightly-2.0-preview
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='hsm207' date='2019-09-12T16:21:08Z'>
		&lt;denchmark-link:https://github.com/ymodak&gt;@ymodak&lt;/denchmark-link&gt;
 The last cell is throwing an exception.
This is the last cell:
&lt;denchmark-code&gt;est_1 = tf.keras.estimator.model_to_estimator(keras_model=model_1)


def input_fn():
    ds = tf.data.Dataset.from_tensor_slices((dict(df), labels)).batch(2)
    return ds.repeat()

train_spec = tf.estimator.TrainSpec(input_fn = input_fn, max_steps=4 * 3)
eval_spec = tf.estimator.EvalSpec(input_fn=input_fn,
                                  steps=12)

tf.estimator.train_and_evaluate(est_1, train_spec, eval_spec)
&lt;/denchmark-code&gt;

This is the stack trace:
&lt;denchmark-code&gt;ERROR:root:Internal Python error in the inspect module.
Below is the traceback from this internal error.

ERROR:root:Internal Python error in the inspect module.
Below is the traceback from this internal error.

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/estimator/__init__.py", line 175, in model_to_estimator_v2
    from tensorflow_estimator.python.estimator import keras as keras_lib  # pylint: disable=g-import-not-at-top
  File "/usr/local/lib/python3.6/dist-packages/tensorflow_estimator/__init__.py", line 10, in &lt;module&gt;
    from . import estimator
ImportError: cannot import name 'estimator'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py", line 2882, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "&lt;ipython-input-6-d191f2777eb2&gt;", line 1, in &lt;module&gt;
    est_1 = tf.keras.estimator.model_to_estimator(keras_model=model_1)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/estimator/__init__.py", line 178, in model_to_estimator_v2
    'tf.keras.estimator.model_to_estimator function not available in your '
NotImplementedError: tf.keras.estimator.model_to_estimator function not available in your installation.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py", line 1823, in showtraceback
    stb = value._render_traceback_()
AttributeError: 'NotImplementedError' object has no attribute '_render_traceback_'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/ultratb.py", line 1132, in get_records
    return _fixed_getinnerframes(etb, number_of_lines_of_context, tb_offset)
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/ultratb.py", line 313, in wrapped
    return f(*args, **kwargs)
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/ultratb.py", line 358, in _fixed_getinnerframes
    records = fix_frame_records_filenames(inspect.getinnerframes(etb, context))
  File "/usr/lib/python3.6/inspect.py", line 1490, in getinnerframes
    frameinfo = (tb.tb_frame,) + getframeinfo(tb, context)
  File "/usr/lib/python3.6/inspect.py", line 1448, in getframeinfo
    filename = getsourcefile(frame) or getfile(frame)
  File "/usr/lib/python3.6/inspect.py", line 696, in getsourcefile
    if getattr(getmodule(object, filename), '__loader__', None) is not None:
  File "/usr/lib/python3.6/inspect.py", line 733, in getmodule
    if ismodule(module) and hasattr(module, '__file__'):
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/__init__.py", line 50, in __getattr__
    module = self._load()
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/__init__.py", line 44, in _load
    module = _importlib.import_module(self.__name__)
  File "/usr/lib/python3.6/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "&lt;frozen importlib._bootstrap&gt;", line 994, in _gcd_import
  File "&lt;frozen importlib._bootstrap&gt;", line 971, in _find_and_load
  File "&lt;frozen importlib._bootstrap&gt;", line 953, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'tensorflow_core.estimator'
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/estimator/__init__.py", line 175, in model_to_estimator_v2
    from tensorflow_estimator.python.estimator import keras as keras_lib  # pylint: disable=g-import-not-at-top
  File "/usr/local/lib/python3.6/dist-packages/tensorflow_estimator/__init__.py", line 10, in &lt;module&gt;
    from . import estimator
ImportError: cannot import name 'estimator'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py", line 2882, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "&lt;ipython-input-6-d191f2777eb2&gt;", line 1, in &lt;module&gt;
    est_1 = tf.keras.estimator.model_to_estimator(keras_model=model_1)
  File "/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/estimator/__init__.py", line 178, in model_to_estimator_v2
    'tf.keras.estimator.model_to_estimator function not available in your '
NotImplementedError: tf.keras.estimator.model_to_estimator function not available in your installation.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py", line 1823, in showtraceback
    stb = value._render_traceback_()
AttributeError: 'NotImplementedError' object has no attribute '_render_traceback_'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py", line 2822, in run_ast_nodes
    if self.run_code(code, result):
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py", line 2899, in run_code
    self.showtraceback()
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py", line 1826, in showtraceback
    value, tb, tb_offset=tb_offset)
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/ultratb.py", line 1411, in structured_traceback
    self, etype, value, tb, tb_offset, number_of_lines_of_context)
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/ultratb.py", line 1319, in structured_traceback
    self, etype, value, tb, tb_offset, number_of_lines_of_context
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/ultratb.py", line 1182, in structured_traceback
    formatted_exceptions += self.prepare_chained_exception_message(evalue.__cause__)
TypeError: must be str, not list

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py", line 1823, in showtraceback
    stb = value._render_traceback_()
AttributeError: 'TypeError' object has no attribute '_render_traceback_'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/ultratb.py", line 1132, in get_records
    return _fixed_getinnerframes(etb, number_of_lines_of_context, tb_offset)
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/ultratb.py", line 313, in wrapped
    return f(*args, **kwargs)
  File "/usr/local/lib/python3.6/dist-packages/IPython/core/ultratb.py", line 358, in _fixed_getinnerframes
    records = fix_frame_records_filenames(inspect.getinnerframes(etb, context))
  File "/usr/lib/python3.6/inspect.py", line 1490, in getinnerframes
    frameinfo = (tb.tb_frame,) + getframeinfo(tb, context)
  File "/usr/lib/python3.6/inspect.py", line 1448, in getframeinfo
    filename = getsourcefile(frame) or getfile(frame)
  File "/usr/lib/python3.6/inspect.py", line 696, in getsourcefile
    if getattr(getmodule(object, filename), '__loader__', None) is not None:
  File "/usr/lib/python3.6/inspect.py", line 733, in getmodule
    if ismodule(module) and hasattr(module, '__file__'):
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/__init__.py", line 50, in __getattr__
    module = self._load()
  File "/usr/local/lib/python3.6/dist-packages/tensorflow/__init__.py", line 44, in _load
    module = _importlib.import_module(self.__name__)
  File "/usr/lib/python3.6/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "&lt;frozen importlib._bootstrap&gt;", line 994, in _gcd_import
  File "&lt;frozen importlib._bootstrap&gt;", line 971, in _find_and_load
  File "&lt;frozen importlib._bootstrap&gt;", line 953, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'tensorflow_core.estimator'
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/estimator/__init__.py in model_to_estimator_v2(keras_model, keras_model_path, custom_objects, model_dir, config, checkpoint_format)
    174   try:
--&gt; 175     from tensorflow_estimator.python.estimator import keras as keras_lib  # pylint: disable=g-import-not-at-top
    176   except ImportError:

6 frames
ImportError: cannot import name 'estimator'

During handling of the above exception, another exception occurred:


During handling of the above exception, another exception occurred:

AttributeError                            Traceback (most recent call last)
AttributeError: 'NotImplementedError' object has no attribute '_render_traceback_'

During handling of the above exception, another exception occurred:

TypeError                                 Traceback (most recent call last)
/usr/local/lib/python3.6/dist-packages/IPython/core/ultratb.py in structured_traceback(self, etype, evalue, etb, tb_offset, number_of_lines_of_context)
   1180             exception = self.get_parts_of_chained_exception(evalue)
   1181             if exception:
-&gt; 1182                 formatted_exceptions += self.prepare_chained_exception_message(evalue.__cause__)
   1183                 etype, evalue, etb = exception
   1184             else:

TypeError: must be str, not list
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='hsm207' date='2019-10-21T22:28:31Z'>
		Can you please add a link to the colab ?
		</comment>
		<comment id='5' author='hsm207' date='2019-10-22T16:01:09Z'>
		&lt;denchmark-link:https://github.com/goldiegadde&gt;@goldiegadde&lt;/denchmark-link&gt;
 here's the &lt;denchmark-link:https://gist.github.com/hsm207/3ab2a5b31bc3b21f8466d426abaa8b81&gt;link&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='hsm207' date='2019-10-27T13:13:06Z'>
		Facing the same issue.
Created a Keras model with DenseFeatures layers using tf.feature_column array. After converting Keras model to TF estimator and running the train_and_evaluate, the system gives error
The serving function as well as densefeatures in Keras had column names but seems that Tensorflow estimator doesn't understand it. Tensorflow estimator completely ignores the feature names provided in DenseFeatures layers in Keras.
The dictionary passed into features does not have the expected inputs keys defined in the keras model.
Code Snippet:
&lt;denchmark-code&gt;# Define feature columns
def create_feature_cols():
#   lat_buck = tf.feature_column.bucketized_column(tf.feature_column.numeric_column('latitude'), 
#                                                  boundaries = np.arange(32.0, 42, 1).tolist())
#   long_buck = tf.feature_column.bucketized_column(tf.feature_column.numeric_column('longitude'),
#                                                   boundaries = np.arange(1, 52, 1).tolist())
    werks_c = tf.feature_column.categorical_column_with_vocabulary_list(
            key='WERKS',
            vocabulary_list=['ML01','ML02','ML03'])
    scenario_c = tf.feature_column.categorical_column_with_vocabulary_list(
            key='SCENARIO',
            vocabulary_list=['1','2','3','4'])
    ktokk_c = tf.feature_column.categorical_column_with_vocabulary_list(
            key='KTOKK',
            vocabulary_list=['1','2'])    
    vstatu_c = tf.feature_column.categorical_column_with_vocabulary_list(
            key='VSTATU',
            vocabulary_list=['1','2'])
    ekorg_c = tf.feature_column.categorical_column_with_vocabulary_list(
            key='EKORG',
            vocabulary_list=['1','2'])   
    ekgrp_c = tf.feature_column.categorical_column_with_vocabulary_list(
            key='EKGRP',
            vocabulary_list=['A','B','C'])

    return [
        tf.feature_column.indicator_column(werks_c),
        tf.feature_column.indicator_column(scenario_c),
        tf.feature_column.indicator_column(ktokk_c),
        tf.feature_column.indicator_column(vstatu_c),
        tf.feature_column.indicator_column(ekorg_c),
        tf.feature_column.indicator_column(ekgrp_c),
        tf.feature_column.numeric_column('VPATD'),
        tf.feature_column.numeric_column("TOTGRQTY"),
        tf.feature_column.numeric_column("TOTIRQTY"),
        tf.feature_column.numeric_column("NODLGR"),
        tf.feature_column.numeric_column("NODLIR"),
        tf.feature_column.numeric_column("DIFGRIRD"),
        tf.feature_column.numeric_column("DIFGRIRV"),
        tf.feature_column.numeric_column("grminusirbyvpatd")
  ]

def create_keras_model(params, feature_cols):
    model = tf.keras.Sequential()

    #First step is feature engineering
    # model.add(tf.keras.backend.map_fn(feature_engg_features))

    #Tensorflow style feature columns
    model.add(tf.keras.layers.DenseFeatures(feature_cols))

    #Other columns
    model.add(tf.keras.layers.Dense(32, activation='relu',kernel_initializer='he_uniform'))
    model.add(tf.keras.layers.BatchNormalization())

    for l_ in range(params['hidden_layers']):
        model.add(tf.keras.layers.Dense(32, activation='relu',kernel_initializer='he_uniform'))
        model.add(tf.keras.layers.BatchNormalization())

    model.add(tf.keras.layers.Dense(1,   activation='sigmoid'))
    return model

# Serving function for external call
def serving_fn():
    feature_placeholders  = {'WERKS' : tf.placeholder(tf.string, [None]),
            'SCENARIO' : tf.placeholder(tf.string, [None]),
            'KTOKK' : tf.placeholder(tf.string, [None]),
            'VSTATU' : tf.placeholder(tf.string, [None]),
            'EKORG' : tf.placeholder(tf.string, [None]),
            'EKGRP' : tf.placeholder(tf.string, [None]),
            'VPATD' : tf.placeholder(tf.float32, [None]),
            'TOTGRQTY' : tf.placeholder(tf.float32, [None]),
            'TOTIRQTY' : tf.placeholder(tf.float32, [None]),
            'NODLGR' : tf.placeholder(tf.float32, [None]),
            'NODLIR' : tf.placeholder(tf.float32, [None]),
            'DIFGRIRD' : tf.placeholder(tf.float32, [None]),
            'DIFGRIRV' : tf.placeholder(tf.float32, [None])
    }

    #Features with transformation logic
    features = {
                key: tf.expand_dims(tensor, -1)
                for key, tensor in feature_placeholders.items()
            }
    
    #feat_changed = add_engineered(features.copy())
    return tf.estimator.export.ServingInputReceiver(feature_engg_features(features), feature_placeholders )

# Create estimator train and evaluate function
def est_train_and_evaluate(keras_model, output_dir, num_train_steps, train_file, eval_file):    
    run_config = tf.estimator.RunConfig(save_checkpoints_secs = 40, 
                                        keep_checkpoint_max = 10)
    
    #Convert Keras model to TF estimator
    keras_model.compile()
    estimator = tf.keras.estimator.model_to_estimator(keras_model=keras_model, config=run_config)

    train_spec = tf.estimator.TrainSpec(input_fn =  make_input_fn(filename = train_file,
                                                    mode = tf.estimator.ModeKeys.TRAIN,
                                                    batch_size = 512),
                                        max_steps = num_train_steps)
    
    #Create exporter
    # exp = tf.estimator.LatestExporter("decision", serving_fn)
    eval_spec = tf.estimator.EvalSpec(input_fn =    make_input_fn(filename = eval_file,
                                                    mode = tf.estimator.ModeKeys.TRAIN,
                                                    batch_size = 512),
                                      steps = None, 
                                      # exporters = exp,
                                      start_delay_secs = 20, # start evaluating after N seconds, 
                                      throttle_secs = 45)  # evaluate every N seconds
    tf.estimator.train_and_evaluate(estimator, train_spec, eval_spec)

m_ = create_keras_model(params = params_default, feature_cols = create_feature_cols())
est_train_and_evaluate(m_, None, 20000, train_file, eval_file)
&lt;/denchmark-code&gt;

Error:
&lt;denchmark-code&gt;
/usr/local/lib/python3.6/dist-packages/tensorflow_estimator/python/estimator/keras.py in _to_ordered_tensor_list(obj, key_order, obj_name, order_name)
    138                 order_name=order_name, order_keys=set(key_order),
    139                 obj_name=obj_name, obj_keys=set(obj.keys()),
--&gt; 140                 different_keys=different_keys))
    141 
    142       return [_convert_tensor(obj[key]) for key in key_order]

KeyError: "The dictionary passed into features does not have the expected inputs keys defined in the keras model.\n\tExpected keys: {'input_5', 'input_9', 'input_12', 'input_4', 'input_8', 'input_10', 'input_14', 'input_6', 'input_3', 'input_13', 'input_7', 'input_1', 'input_2', 'input_11'}\n\tfeatures keys: {'WERKS', 'TOTIRQTY', 'DIFGRIRV', 'VPATD', 'VSTATU', 'grminusirbyvpatd', 'EKORG', 'DIFGRIRD', 'EKGRP', 'TOTGRQTY', 'KTOKK', 'NODLIR', 'SCENARIO', 'NODLGR'}\n\tDifference: {'WERKS', 'input_5', 'DIFGRIRV', 'input_14', 'input_1', 'input_2', 'SCENARIO', 'input_10', 'grminusirbyvpatd', 'DIFGRIRD', 'input_3', 'KTOKK', 'input_7', 'input_8', 'input_9', 'NODLGR', 'TOTIRQTY', 'input_12', 'VPATD', 'input_4', 'input_11', 'VSTATU', 'input_6', 'EKORG', 'EKGRP', 'TOTGRQTY', 'input_13', 'NODLIR'}"


&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='hsm207' date='2019-12-31T08:13:49Z'>
		
Can you please add a link to the colab ?

Any update on the issue ?
		</comment>
		<comment id='8' author='hsm207' date='2019-12-31T09:26:02Z'>
		
Can you please add a link to the colab ?
Any update on the issue ?

&lt;denchmark-link:https://github.com/rafiqhasan&gt;@rafiqhasan&lt;/denchmark-link&gt;
 Here's the &lt;denchmark-link:https://gist.github.com/hsm207/3ab2a5b31bc3b21f8466d426abaa8b81&gt;link &lt;/denchmark-link&gt;
to the notebook.
It's still throwing the same error in TF version v2.1.0-rc1-0-g064e1535a7
		</comment>
		<comment id='9' author='hsm207' date='2020-01-10T09:08:39Z'>
		Same error +1
		</comment>
		<comment id='10' author='hsm207' date='2020-03-05T06:09:36Z'>
		Any updates or workarounds?
		</comment>
		<comment id='11' author='hsm207' date='2020-03-30T09:30:12Z'>
		Unfortunately, model_to_estimator wouldn't be able to infer input names for Sequential models.
I think you can make it work by:
def create_model():
    store_feature = tf.feature_column.categorical_column_with_vocabulary_list('store', vocabulary_list=['a', 'b'])

    store_feature = tf.feature_column.embedding_column(store_feature, dimension=64)

    loc_feature = tf.feature_column.categorical_column_with_vocabulary_list('loc', vocabulary_list=['x', 'y', 'z'])

    loc_feature = tf.feature_column.embedding_column(loc_feature, dimension=32)

    inp_1 = tf.keras.Input(name='store', dtype=tf.string, shape=(1,))
    inp_2 = tf.keras.Input(name='loc', dtype=tf.string, shape=(1,))
    keras_dict_input = {'store': inp_1, 'loc': inp_2}
    x = tf.keras.layers.DenseFeatures(feature_columns=[store_feature, loc_feature])(keras_dict_input)
    x = tf.keras.layers.Dense(32, activation='relu')(x)
    x = tf.keras.layers.Dense(1, activation='relu')(x)
    model = tf.keras.Model(keras_dict_input, x)

    return model
		</comment>
		<comment id='12' author='hsm207' date='2020-03-30T09:30:59Z'>
		FWIW, please check &lt;denchmark-link:https://github.com/tensorflow/community/pull/188&gt;tensorflow/community#188&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='hsm207' date='2020-03-30T09:31:02Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/28976&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/28976&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='14' author='hsm207' date='2020-03-30T10:01:19Z'>
		Using the Keras functional API to define a model and calling tf.keras.Input to define inputs seems works, so I rewrite my model using functional API to solve it.
		</comment>
		<comment id='15' author='hsm207' date='2020-04-05T15:12:19Z'>
		Yes , thanks ! This still solves the problem.
		</comment>
	</comments>
</bug>