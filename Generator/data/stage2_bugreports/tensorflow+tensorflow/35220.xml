<bug id='35220' author='thisisandreeeee' open_date='2019-12-18T09:42:28Z' closed_time='2019-12-19T06:41:25Z'>
	<summary>Imputing missing tensor values with the mean is unsuccessful</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux-4.14.106+-x86_64-with-debian-buster-sid
TensorFlow installed from (source or binary): pip install
TensorFlow version (use command below): 2.0.0
Python version: 3.6.6

Describe the current behavior
I am trying to impute the missing values in a tensor with the sample mean. As the size of my dataset is potentially quite large and the calculation of means require a full pass of the dataset, I am using tf.Transform to perform this computation.
As there is no native support for imputation on tf.Transform, I am implementing this by creating a , and specifying a default_value when converting to a dense tensor (as suggested in &lt;denchmark-link:https://github.com/tensorflow/transform/issues/78#issuecomment-427919062&gt;tensorflow/transform#78 (comment)&lt;/denchmark-link&gt;
).
However, this does not seem to be successful as the output tensor still contains nan.
Describe the expected behavior
I expect the missing values in the output tensor to be replaced by the mean of the non-null values.
Code to reproduce the issue
import tempfile
from glob import glob

import apache_beam as beam
import pandas as pd
import tensorflow as tf
import tensorflow_transform as tft
import tensorflow_transform.beam as tft_beam
from tensorflow_transform.tf_metadata import dataset_metadata, schema_utils

assert tf.__version__ == "2.0.0" and tft.__version__ == "0.15.0" and beam.__version__ == "2.16.0"

def create_raw_data(output_file):
    df = pd.DataFrame({"age": [35.2, 17.3, None, 25.0]})
    with tf.io.TFRecordWriter(output_file) as writer:
        for _, row in df.iterrows():
            features = tf.train.Features(
                feature={"age": tf.train.Feature(float_list=tf.train.FloatList(value=[row]))}
            )
            example_proto = tf.train.Example(features=features)
            writer.write(example_proto.SerializeToString())

            
def run_tftransform(input_file, output_file):
    def preprocessing_fn(inputs):
        def _impute(tensor, replacement):
            sparse = tf.sparse.SparseTensor(
                tensor.indices, tensor.values, [tensor.dense_shape[0], 1]
            )
            dense = tf.sparse.to_dense(sp_input=sparse, default_value=replacement)
            dense = tf.squeeze(dense, axis=1)
            return dense

        outputs = inputs.copy()
        mean_age = tft.mean(outputs["age"])
        outputs["age"] = _impute(outputs["age"], mean_age)  # mean is 25.833333333
        return outputs

    RAW_DATA_FEATURE_SPEC = {"age": tf.io.VarLenFeature(tf.float32)}
    RAW_DATA_METADATA = dataset_metadata.DatasetMetadata(
        schema_utils.schema_from_feature_spec(RAW_DATA_FEATURE_SPEC)
    )

    with beam.Pipeline() as pipeline:
        with tft_beam.Context(temp_dir=tempfile.mkdtemp()):
            raw_data_coder = tft.coders.ExampleProtoCoder(RAW_DATA_METADATA.schema)
            raw_train_data = (
                pipeline | beam.io.ReadFromTFRecord(input_file, coder=raw_data_coder)
            )
            (transformed_train_data, transformed_metadata), transform_fn = (
                (raw_train_data, RAW_DATA_METADATA)| tft_beam.AnalyzeAndTransformDataset(preprocessing_fn)
            )
            transformed_data_coder = tft.coders.ExampleProtoCoder(transformed_metadata.schema)
            _ = (
                transformed_train_data| beam.io.WriteToTFRecord(
                    output_file, coder=transformed_data_coder
                )
            )
            
            
if __name__ == "__main__":
    create_raw_data("raw_data.tfrecord")
    run_tftransform("raw_data.tfrecord", "transformed_data.tfrecord")

    TRANSFORMED_FEATURE_SPEC = {"age": tf.io.FixedLenFeature([], tf.float32)}
    raw_dataset = tf.data.TFRecordDataset(filenames=glob("transformed_data.tfrecord*"))
    parsed_dataset = raw_dataset.map(lambda x: tf.io.parse_single_example(x, TRANSFORMED_FEATURE_SPEC)).batch(4)

    print(next(iter(parsed_dataset.take(1))))
Expected output:
{'age': &lt;tf.Tensor: id=533, shape=(4,), dtype=float32, numpy=array([35.2, 17.3,  25.8333, 25. ], dtype=float32)&gt;}
Actual (incorrect) output which still contains nan values:
{'age': &lt;tf.Tensor: id=533, shape=(4,), dtype=float32, numpy=array([35.2, 17.3,  nan, 25. ], dtype=float32)&gt;}
	</description>
	<comments>
		<comment id='1' author='thisisandreeeee' date='2019-12-19T06:41:24Z'>
		Closing this issue as it is a Duplicate of &lt;denchmark-link:https://github.com/tensorflow/transform/issues/152&gt;TFT_152&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='thisisandreeeee' date='2019-12-19T06:41:27Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35220&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35220&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>