<bug id='38988' author='nbro' open_date='2020-04-28T17:10:10Z' closed_time='2020-09-30T00:13:46Z'>
	<summary>AttributeError: 'dict' object has no attribute 'name'</summary>
	<description>
System information

Have I written custom code: No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS X Catalina
TensorFlow installed from: binary
TensorFlow version:  2.2.0.dev20200427
Python version: 3.7.5

Describe the current behavior
I get the error

AttributeError: 'dict' object has no attribute 'name'

when I try to plot a model, with , where I specify the loss to the  method as a dictionary. According to &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/Model?version=nightly#compile&gt;the documentation&lt;/denchmark-link&gt;
, this should be possible and this was actually possible in TF 2.1 (i.e. until recently I was using the exact same code with TF 2.1 and no error was thrown).
Describe the expected behavior
No error.
Standalone code to reproduce the issue
&lt;denchmark-code&gt;import tensorflow as tf


def get_model(input_shape, num_classes=10):
    model_input = tf.keras.layers.Input(shape=input_shape)
    x = tf.keras.layers.Conv2D(6, 3)(model_input)
    x = tf.keras.layers.Flatten()(x)
    model_output = tf.keras.layers.Dense(num_classes, name="my_output_layer")(x)
    model = tf.keras.Model(model_input, model_output)
    model.summary()
    return model


def train():
    model = get_model((28, 28, 1))

    model.compile(loss={"my_output_layer": "categorical_crossentropy"})

    # IF YOU COMMENT THIS, NO ERROR OCCURS!!!
    tf.keras.utils.plot_model(model, to_file="model.png", show_shapes=True)


if __name__ == '__main__':
    train()
&lt;/denchmark-code&gt;

I installed pydot with pip install pydot. The version that was installed is 1.4.1.
Clearly, the error is due to the fact that plot_model thinks that the loss is also a layer.
I need to use TF 2.2 because I am using another library that requires the nightly version of TF.
	</description>
	<comments>
		<comment id='1' author='nbro' date='2020-04-28T18:29:34Z'>
		&lt;denchmark-link:https://github.com/nbro&gt;@nbro&lt;/denchmark-link&gt;

I ran the code shared above and do not face any error on nightly, please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/cdf44239edc5dd83d9574f7b2ad6f5ef/untitled162.ipynb&gt;gist here.&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='nbro' date='2020-04-28T18:37:09Z'>
		&lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
 If I run your notebook, I get the error I am reporting above. Please, run it again!
		</comment>
		<comment id='3' author='nbro' date='2020-04-29T16:24:31Z'>
		This error also comes up in tf 2.1 using tf.keras.utils.model_to_dot(). The first code block gives the AttributeError mentioned above:
&lt;denchmark-code&gt;def custom_loss(y_true, y_pred, w):
  return w * tf.math.square(y_true - y_pred)

opt=tf.keras.optimizers.SGD
lr=1e-4

input = Input(shape=(1000,), dtype=tf.float32, name='input')
y_true = Input(shape=(1,), dtype=tf.float32, name='y_true')
y_pred = Dense(1, name='y_pred')(input)
w = Input(shape=(1,), dtype=tf.float32, name='weights')

model = tf.keras.Model(
    inputs=tuple([input, y_true, w]),
    outputs=y_pred)
model.add_loss(custom_loss(y_true, y_pred, w))
model.compile(optimizer=opt(learning_rate=lr))

img = model_to_dot(
    model, show_shapes=True, show_layer_names=False).create(prog='dot', format='png')
&lt;/denchmark-code&gt;

The second code block does not throw this error and everything works fine, so I think it's something to do with using a custom loss function or the fact that I'm passing y_true as a model input:
&lt;denchmark-code&gt;opt=tf.keras.optimizers.SGD
lr=1e-4

input = Input(shape=(1000,), dtype=tf.float32, name='input')
y_pred = Dense(1, name='y_pred')(input)

model = tf.keras.Model(
    inputs=input, outputs=y_pred)
model.compile(optimizer=opt(lr=lr), loss='mean_squared_error')

img = model_to_dot(
    model, show_shapes=True, show_layer_names=False).create(prog='dot', format='png')
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='nbro' date='2020-04-30T05:17:47Z'>
		&lt;denchmark-link:https://github.com/nbro&gt;@nbro&lt;/denchmark-link&gt;

Yes i confirm on rerunning the gist i am able to see the error.
		</comment>
		<comment id='5' author='nbro' date='2020-05-13T12:43:54Z'>
		When this happens, tensorflow appears to have appended an empty dictionary to model._layers. A workaround for the moment is, once the model has been compiled, to use:
&lt;denchmark-code&gt;model._layers = [layer for layer in model._layers if not isinstance(layer, dict)]
&lt;/denchmark-code&gt;


System information

Have I written custom code: No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS X Catalina
TensorFlow installed from: binary
TensorFlow version:  2.2.0.dev20200427
Python version: 3.7.5

Describe the current behavior
I get the error

AttributeError: 'dict' object has no attribute 'name'

when I try to plot a model, with tf.keras.utils.plot_model, where I specify the loss to the compile method as a dictionary. According to the documentation, this should be possible and this was actually possible in TF 2.1 (i.e. until recently I was using the exact same code with TF 2.1 and no error was thrown).
Describe the expected behavior
No error.
Standalone code to reproduce the issue
import tensorflow as tf


def get_model(input_shape, num_classes=10):
    model_input = tf.keras.layers.Input(shape=input_shape)
    x = tf.keras.layers.Conv2D(6, 3)(model_input)
    x = tf.keras.layers.Flatten()(x)
    model_output = tf.keras.layers.Dense(num_classes, name="my_output_layer")(x)
    model = tf.keras.Model(model_input, model_output)
    model.summary()
    return model


def train():
    model = get_model((28, 28, 1))

    model.compile(loss={"my_output_layer": "categorical_crossentropy"})

    # IF YOU COMMENT THIS, NO ERROR OCCURS!!!
    tf.keras.utils.plot_model(model, to_file="model.png", show_shapes=True)


if __name__ == '__main__':
    train()

I installed pydot with pip install pydot. The version that was installed is 1.4.1.
Clearly, the error is due to the fact that plot_model thinks that the loss is also a layer.
I need to use TF 2.2 because I am using another library that requires the nightly version of TF.

When this happens, tensorflow appears to have appended an empty dictionary to model._layers. A workaround for the moment is, once the model has been compiled, to use: model._layers = [layer for layer in model._layers if not isinstance(layer, dict)]
Your example would therefore read:
&lt;denchmark-code&gt;import tensorflow as tf


def get_model(input_shape, num_classes=10):
    model_input = tf.keras.layers.Input(shape=input_shape)
    x = tf.keras.layers.Conv2D(6, 3)(model_input)
    x = tf.keras.layers.Flatten()(x)
    model_output = tf.keras.layers.Dense(num_classes, name="my_output_layer")(x)
    model = tf.keras.Model(model_input, model_output)
    model.summary()
    return model


def train():
    model = get_model((28, 28, 1))

    model.compile(loss={"my_output_layer": "categorical_crossentropy"})
    model._layers = [layer for layer in model._layers if not isinstance(layer, dict)]

# this should now work
    tf.keras.utils.plot_model(model, to_file="model.png", show_shapes=True)


if __name__ == '__main__':
    train()
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='nbro' date='2020-05-13T13:22:39Z'>
		For some reasons, the last layer in my model._layers is a ListWrapper, and I am using multiple loss functions.
Thus, I am using the following snippet as a workaround:
from tensorflow.keras.layers import Layer
model._layers = [
    layer for layer in model._layers if isinstance(layer, Layer)
]
plot_model(model)
		</comment>
		<comment id='7' author='nbro' date='2020-08-28T18:23:10Z'>
		This is fixed with tf-nightly 2.4.0-dev20200828.
See &lt;denchmark-link:https://colab.research.google.com/gist/ymodak/c20e2929379074ffc1f3fa80ae258b09/github_38988.ipynb&gt;gist&lt;/denchmark-link&gt;
 for your reference. Thanks!
		</comment>
		<comment id='8' author='nbro' date='2020-09-09T21:16:25Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='9' author='nbro' date='2020-09-22T23:34:02Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='10' author='nbro' date='2020-09-30T00:13:44Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='11' author='nbro' date='2020-09-30T00:13:47Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38988&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38988&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>